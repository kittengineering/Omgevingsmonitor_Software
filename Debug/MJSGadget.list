
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aa00  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001238  0801aac0  0801aac0  0001bac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bcf8  0801bcf8  0001d400  2**0
                  CONTENTS
  4 .ARM          00000008  0801bcf8  0801bcf8  0001ccf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bd00  0801bd00  0001d400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bd00  0801bd00  0001cd00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801bd04  0801bd04  0001cd04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000400  20000000  0801bd08  0001d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003b14  20000400  0801c108  0001d400  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  20003f14  0801c108  0001df14  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001d400  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002aa54  00000000  00000000  0001d428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007e00  00000000  00000000  00047e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002378  00000000  00000000  0004fc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001aee  00000000  00000000  00051ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000209a8  00000000  00000000  00053ae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003843e  00000000  00000000  0007448e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ce6f  00000000  00000000  000ac8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014973b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000092c0  00000000  00000000  00149780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00152a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000400 	.word	0x20000400
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801aaa8 	.word	0x0801aaa8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000404 	.word	0x20000404
 8000104:	0801aaa8 	.word	0x0801aaa8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f809 	bl	8002454 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff49 	bl	80022e4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fffb 	bl	8002454 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fff1 	bl	8002454 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff73 	bl	800236c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff69 	bl	800236c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fca5 	bl	8000e00 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc25 	bl	8000d10 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc97 	bl	8000e00 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc8d 	bl	8000e00 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc33 	bl	8000d60 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc29 	bl	8000d60 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f86a 	bl	8000624 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__aeabi_f2uiz>:
 80005b8:	219e      	movs	r1, #158	@ 0x9e
 80005ba:	b510      	push	{r4, lr}
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	1c04      	adds	r4, r0, #0
 80005c0:	f7ff ffa2 	bl	8000508 <__aeabi_fcmpge>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d103      	bne.n	80005d0 <__aeabi_f2uiz+0x18>
 80005c8:	1c20      	adds	r0, r4, #0
 80005ca:	f000 ff5f 	bl	800148c <__aeabi_f2iz>
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	219e      	movs	r1, #158	@ 0x9e
 80005d2:	1c20      	adds	r0, r4, #0
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	f000 fd9f 	bl	8001118 <__aeabi_fsub>
 80005da:	f000 ff57 	bl	800148c <__aeabi_f2iz>
 80005de:	2380      	movs	r3, #128	@ 0x80
 80005e0:	061b      	lsls	r3, r3, #24
 80005e2:	469c      	mov	ip, r3
 80005e4:	4460      	add	r0, ip
 80005e6:	e7f2      	b.n	80005ce <__aeabi_f2uiz+0x16>

080005e8 <__aeabi_d2uiz>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	2200      	movs	r2, #0
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <__aeabi_d2uiz+0x38>)
 80005ee:	0004      	movs	r4, r0
 80005f0:	000d      	movs	r5, r1
 80005f2:	f7ff ff4f 	bl	8000494 <__aeabi_dcmpge>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d104      	bne.n	8000604 <__aeabi_d2uiz+0x1c>
 80005fa:	0020      	movs	r0, r4
 80005fc:	0029      	movs	r1, r5
 80005fe:	f002 fe21 	bl	8003244 <__aeabi_d2iz>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <__aeabi_d2uiz+0x38>)
 8000606:	2200      	movs	r2, #0
 8000608:	0020      	movs	r0, r4
 800060a:	0029      	movs	r1, r5
 800060c:	f002 fa5c 	bl	8002ac8 <__aeabi_dsub>
 8000610:	f002 fe18 	bl	8003244 <__aeabi_d2iz>
 8000614:	2380      	movs	r3, #128	@ 0x80
 8000616:	061b      	lsls	r3, r3, #24
 8000618:	469c      	mov	ip, r3
 800061a:	4460      	add	r0, ip
 800061c:	e7f1      	b.n	8000602 <__aeabi_d2uiz+0x1a>
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	41e00000 	.word	0x41e00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 ff76 	bl	8003534 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 ff71 	bl	8003534 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fadd>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	46ce      	mov	lr, r9
 80007c0:	4647      	mov	r7, r8
 80007c2:	0243      	lsls	r3, r0, #9
 80007c4:	0a5a      	lsrs	r2, r3, #9
 80007c6:	024e      	lsls	r6, r1, #9
 80007c8:	0045      	lsls	r5, r0, #1
 80007ca:	0fc4      	lsrs	r4, r0, #31
 80007cc:	0048      	lsls	r0, r1, #1
 80007ce:	4691      	mov	r9, r2
 80007d0:	0e2d      	lsrs	r5, r5, #24
 80007d2:	0a72      	lsrs	r2, r6, #9
 80007d4:	0e00      	lsrs	r0, r0, #24
 80007d6:	4694      	mov	ip, r2
 80007d8:	b580      	push	{r7, lr}
 80007da:	099b      	lsrs	r3, r3, #6
 80007dc:	0fc9      	lsrs	r1, r1, #31
 80007de:	09b6      	lsrs	r6, r6, #6
 80007e0:	1a2a      	subs	r2, r5, r0
 80007e2:	428c      	cmp	r4, r1
 80007e4:	d021      	beq.n	800082a <__aeabi_fadd+0x6e>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	dd0d      	ble.n	8000806 <__aeabi_fadd+0x4a>
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d12d      	bne.n	800084a <__aeabi_fadd+0x8e>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x38>
 80007f2:	e08d      	b.n	8000910 <__aeabi_fadd+0x154>
 80007f4:	1e51      	subs	r1, r2, #1
 80007f6:	2a01      	cmp	r2, #1
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x40>
 80007fa:	e11d      	b.n	8000a38 <__aeabi_fadd+0x27c>
 80007fc:	2aff      	cmp	r2, #255	@ 0xff
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x46>
 8000800:	e0ab      	b.n	800095a <__aeabi_fadd+0x19e>
 8000802:	000a      	movs	r2, r1
 8000804:	e027      	b.n	8000856 <__aeabi_fadd+0x9a>
 8000806:	2a00      	cmp	r2, #0
 8000808:	d04d      	beq.n	80008a6 <__aeabi_fadd+0xea>
 800080a:	1b42      	subs	r2, r0, r5
 800080c:	2d00      	cmp	r5, #0
 800080e:	d000      	beq.n	8000812 <__aeabi_fadd+0x56>
 8000810:	e0cc      	b.n	80009ac <__aeabi_fadd+0x1f0>
 8000812:	2b00      	cmp	r3, #0
 8000814:	d100      	bne.n	8000818 <__aeabi_fadd+0x5c>
 8000816:	e079      	b.n	800090c <__aeabi_fadd+0x150>
 8000818:	1e54      	subs	r4, r2, #1
 800081a:	2a01      	cmp	r2, #1
 800081c:	d100      	bne.n	8000820 <__aeabi_fadd+0x64>
 800081e:	e128      	b.n	8000a72 <__aeabi_fadd+0x2b6>
 8000820:	2aff      	cmp	r2, #255	@ 0xff
 8000822:	d100      	bne.n	8000826 <__aeabi_fadd+0x6a>
 8000824:	e097      	b.n	8000956 <__aeabi_fadd+0x19a>
 8000826:	0022      	movs	r2, r4
 8000828:	e0c5      	b.n	80009b6 <__aeabi_fadd+0x1fa>
 800082a:	2a00      	cmp	r2, #0
 800082c:	dc00      	bgt.n	8000830 <__aeabi_fadd+0x74>
 800082e:	e096      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000830:	2800      	cmp	r0, #0
 8000832:	d04f      	beq.n	80008d4 <__aeabi_fadd+0x118>
 8000834:	2dff      	cmp	r5, #255	@ 0xff
 8000836:	d100      	bne.n	800083a <__aeabi_fadd+0x7e>
 8000838:	e08f      	b.n	800095a <__aeabi_fadd+0x19e>
 800083a:	2180      	movs	r1, #128	@ 0x80
 800083c:	04c9      	lsls	r1, r1, #19
 800083e:	430e      	orrs	r6, r1
 8000840:	2a1b      	cmp	r2, #27
 8000842:	dd51      	ble.n	80008e8 <__aeabi_fadd+0x12c>
 8000844:	002a      	movs	r2, r5
 8000846:	3301      	adds	r3, #1
 8000848:	e018      	b.n	800087c <__aeabi_fadd+0xc0>
 800084a:	2dff      	cmp	r5, #255	@ 0xff
 800084c:	d100      	bne.n	8000850 <__aeabi_fadd+0x94>
 800084e:	e084      	b.n	800095a <__aeabi_fadd+0x19e>
 8000850:	2180      	movs	r1, #128	@ 0x80
 8000852:	04c9      	lsls	r1, r1, #19
 8000854:	430e      	orrs	r6, r1
 8000856:	2101      	movs	r1, #1
 8000858:	2a1b      	cmp	r2, #27
 800085a:	dc08      	bgt.n	800086e <__aeabi_fadd+0xb2>
 800085c:	0031      	movs	r1, r6
 800085e:	2020      	movs	r0, #32
 8000860:	40d1      	lsrs	r1, r2
 8000862:	1a82      	subs	r2, r0, r2
 8000864:	4096      	lsls	r6, r2
 8000866:	0032      	movs	r2, r6
 8000868:	1e50      	subs	r0, r2, #1
 800086a:	4182      	sbcs	r2, r0
 800086c:	4311      	orrs	r1, r2
 800086e:	1a5b      	subs	r3, r3, r1
 8000870:	015a      	lsls	r2, r3, #5
 8000872:	d459      	bmi.n	8000928 <__aeabi_fadd+0x16c>
 8000874:	2107      	movs	r1, #7
 8000876:	002a      	movs	r2, r5
 8000878:	4019      	ands	r1, r3
 800087a:	d049      	beq.n	8000910 <__aeabi_fadd+0x154>
 800087c:	210f      	movs	r1, #15
 800087e:	4019      	ands	r1, r3
 8000880:	2904      	cmp	r1, #4
 8000882:	d000      	beq.n	8000886 <__aeabi_fadd+0xca>
 8000884:	3304      	adds	r3, #4
 8000886:	0159      	lsls	r1, r3, #5
 8000888:	d542      	bpl.n	8000910 <__aeabi_fadd+0x154>
 800088a:	1c50      	adds	r0, r2, #1
 800088c:	2afe      	cmp	r2, #254	@ 0xfe
 800088e:	d03a      	beq.n	8000906 <__aeabi_fadd+0x14a>
 8000890:	019b      	lsls	r3, r3, #6
 8000892:	b2c0      	uxtb	r0, r0
 8000894:	0a5b      	lsrs	r3, r3, #9
 8000896:	05c0      	lsls	r0, r0, #23
 8000898:	4318      	orrs	r0, r3
 800089a:	07e4      	lsls	r4, r4, #31
 800089c:	4320      	orrs	r0, r4
 800089e:	bcc0      	pop	{r6, r7}
 80008a0:	46b9      	mov	r9, r7
 80008a2:	46b0      	mov	r8, r6
 80008a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a6:	20fe      	movs	r0, #254	@ 0xfe
 80008a8:	4680      	mov	r8, r0
 80008aa:	1c6f      	adds	r7, r5, #1
 80008ac:	0038      	movs	r0, r7
 80008ae:	4647      	mov	r7, r8
 80008b0:	4207      	tst	r7, r0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_fadd+0xfa>
 80008b4:	e08e      	b.n	80009d4 <__aeabi_fadd+0x218>
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d000      	beq.n	80008bc <__aeabi_fadd+0x100>
 80008ba:	e0b4      	b.n	8000a26 <__aeabi_fadd+0x26a>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fadd+0x106>
 80008c0:	e0db      	b.n	8000a7a <__aeabi_fadd+0x2be>
 80008c2:	2e00      	cmp	r6, #0
 80008c4:	d06c      	beq.n	80009a0 <__aeabi_fadd+0x1e4>
 80008c6:	1b98      	subs	r0, r3, r6
 80008c8:	0145      	lsls	r5, r0, #5
 80008ca:	d400      	bmi.n	80008ce <__aeabi_fadd+0x112>
 80008cc:	e0f7      	b.n	8000abe <__aeabi_fadd+0x302>
 80008ce:	000c      	movs	r4, r1
 80008d0:	1af3      	subs	r3, r6, r3
 80008d2:	e03d      	b.n	8000950 <__aeabi_fadd+0x194>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d01b      	beq.n	8000910 <__aeabi_fadd+0x154>
 80008d8:	1e51      	subs	r1, r2, #1
 80008da:	2a01      	cmp	r2, #1
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fadd+0x124>
 80008de:	e082      	b.n	80009e6 <__aeabi_fadd+0x22a>
 80008e0:	2aff      	cmp	r2, #255	@ 0xff
 80008e2:	d03a      	beq.n	800095a <__aeabi_fadd+0x19e>
 80008e4:	000a      	movs	r2, r1
 80008e6:	e7ab      	b.n	8000840 <__aeabi_fadd+0x84>
 80008e8:	0031      	movs	r1, r6
 80008ea:	2020      	movs	r0, #32
 80008ec:	40d1      	lsrs	r1, r2
 80008ee:	1a82      	subs	r2, r0, r2
 80008f0:	4096      	lsls	r6, r2
 80008f2:	0032      	movs	r2, r6
 80008f4:	1e50      	subs	r0, r2, #1
 80008f6:	4182      	sbcs	r2, r0
 80008f8:	430a      	orrs	r2, r1
 80008fa:	189b      	adds	r3, r3, r2
 80008fc:	015a      	lsls	r2, r3, #5
 80008fe:	d5b9      	bpl.n	8000874 <__aeabi_fadd+0xb8>
 8000900:	1c6a      	adds	r2, r5, #1
 8000902:	2dfe      	cmp	r5, #254	@ 0xfe
 8000904:	d175      	bne.n	80009f2 <__aeabi_fadd+0x236>
 8000906:	20ff      	movs	r0, #255	@ 0xff
 8000908:	2300      	movs	r3, #0
 800090a:	e7c4      	b.n	8000896 <__aeabi_fadd+0xda>
 800090c:	000c      	movs	r4, r1
 800090e:	0033      	movs	r3, r6
 8000910:	08db      	lsrs	r3, r3, #3
 8000912:	2aff      	cmp	r2, #255	@ 0xff
 8000914:	d146      	bne.n	80009a4 <__aeabi_fadd+0x1e8>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f5      	beq.n	8000906 <__aeabi_fadd+0x14a>
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	4313      	orrs	r3, r2
 8000920:	025b      	lsls	r3, r3, #9
 8000922:	20ff      	movs	r0, #255	@ 0xff
 8000924:	0a5b      	lsrs	r3, r3, #9
 8000926:	e7b6      	b.n	8000896 <__aeabi_fadd+0xda>
 8000928:	019f      	lsls	r7, r3, #6
 800092a:	09bf      	lsrs	r7, r7, #6
 800092c:	0038      	movs	r0, r7
 800092e:	f002 fde3 	bl	80034f8 <__clzsi2>
 8000932:	3805      	subs	r0, #5
 8000934:	4087      	lsls	r7, r0
 8000936:	4285      	cmp	r5, r0
 8000938:	dc24      	bgt.n	8000984 <__aeabi_fadd+0x1c8>
 800093a:	003b      	movs	r3, r7
 800093c:	2120      	movs	r1, #32
 800093e:	1b42      	subs	r2, r0, r5
 8000940:	3201      	adds	r2, #1
 8000942:	40d3      	lsrs	r3, r2
 8000944:	1a8a      	subs	r2, r1, r2
 8000946:	4097      	lsls	r7, r2
 8000948:	1e7a      	subs	r2, r7, #1
 800094a:	4197      	sbcs	r7, r2
 800094c:	2200      	movs	r2, #0
 800094e:	433b      	orrs	r3, r7
 8000950:	0759      	lsls	r1, r3, #29
 8000952:	d193      	bne.n	800087c <__aeabi_fadd+0xc0>
 8000954:	e797      	b.n	8000886 <__aeabi_fadd+0xca>
 8000956:	000c      	movs	r4, r1
 8000958:	0033      	movs	r3, r6
 800095a:	08db      	lsrs	r3, r3, #3
 800095c:	e7db      	b.n	8000916 <__aeabi_fadd+0x15a>
 800095e:	2a00      	cmp	r2, #0
 8000960:	d014      	beq.n	800098c <__aeabi_fadd+0x1d0>
 8000962:	1b42      	subs	r2, r0, r5
 8000964:	2d00      	cmp	r5, #0
 8000966:	d14b      	bne.n	8000a00 <__aeabi_fadd+0x244>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0d0      	beq.n	800090e <__aeabi_fadd+0x152>
 800096c:	1e51      	subs	r1, r2, #1
 800096e:	2a01      	cmp	r2, #1
 8000970:	d100      	bne.n	8000974 <__aeabi_fadd+0x1b8>
 8000972:	e09e      	b.n	8000ab2 <__aeabi_fadd+0x2f6>
 8000974:	2aff      	cmp	r2, #255	@ 0xff
 8000976:	d0ef      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000978:	000a      	movs	r2, r1
 800097a:	2a1b      	cmp	r2, #27
 800097c:	dd5f      	ble.n	8000a3e <__aeabi_fadd+0x282>
 800097e:	0002      	movs	r2, r0
 8000980:	1c73      	adds	r3, r6, #1
 8000982:	e77b      	b.n	800087c <__aeabi_fadd+0xc0>
 8000984:	4b50      	ldr	r3, [pc, #320]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000986:	1a2a      	subs	r2, r5, r0
 8000988:	403b      	ands	r3, r7
 800098a:	e7e1      	b.n	8000950 <__aeabi_fadd+0x194>
 800098c:	21fe      	movs	r1, #254	@ 0xfe
 800098e:	1c6a      	adds	r2, r5, #1
 8000990:	4211      	tst	r1, r2
 8000992:	d13b      	bne.n	8000a0c <__aeabi_fadd+0x250>
 8000994:	2d00      	cmp	r5, #0
 8000996:	d15d      	bne.n	8000a54 <__aeabi_fadd+0x298>
 8000998:	2b00      	cmp	r3, #0
 800099a:	d07f      	beq.n	8000a9c <__aeabi_fadd+0x2e0>
 800099c:	2e00      	cmp	r6, #0
 800099e:	d17f      	bne.n	8000aa0 <__aeabi_fadd+0x2e4>
 80009a0:	2200      	movs	r2, #0
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	025b      	lsls	r3, r3, #9
 80009a6:	0a5b      	lsrs	r3, r3, #9
 80009a8:	b2d0      	uxtb	r0, r2
 80009aa:	e774      	b.n	8000896 <__aeabi_fadd+0xda>
 80009ac:	28ff      	cmp	r0, #255	@ 0xff
 80009ae:	d0d2      	beq.n	8000956 <__aeabi_fadd+0x19a>
 80009b0:	2480      	movs	r4, #128	@ 0x80
 80009b2:	04e4      	lsls	r4, r4, #19
 80009b4:	4323      	orrs	r3, r4
 80009b6:	2401      	movs	r4, #1
 80009b8:	2a1b      	cmp	r2, #27
 80009ba:	dc07      	bgt.n	80009cc <__aeabi_fadd+0x210>
 80009bc:	001c      	movs	r4, r3
 80009be:	2520      	movs	r5, #32
 80009c0:	40d4      	lsrs	r4, r2
 80009c2:	1aaa      	subs	r2, r5, r2
 80009c4:	4093      	lsls	r3, r2
 80009c6:	1e5a      	subs	r2, r3, #1
 80009c8:	4193      	sbcs	r3, r2
 80009ca:	431c      	orrs	r4, r3
 80009cc:	1b33      	subs	r3, r6, r4
 80009ce:	0005      	movs	r5, r0
 80009d0:	000c      	movs	r4, r1
 80009d2:	e74d      	b.n	8000870 <__aeabi_fadd+0xb4>
 80009d4:	1b9f      	subs	r7, r3, r6
 80009d6:	017a      	lsls	r2, r7, #5
 80009d8:	d422      	bmi.n	8000a20 <__aeabi_fadd+0x264>
 80009da:	2f00      	cmp	r7, #0
 80009dc:	d1a6      	bne.n	800092c <__aeabi_fadd+0x170>
 80009de:	2400      	movs	r4, #0
 80009e0:	2000      	movs	r0, #0
 80009e2:	2300      	movs	r3, #0
 80009e4:	e757      	b.n	8000896 <__aeabi_fadd+0xda>
 80009e6:	199b      	adds	r3, r3, r6
 80009e8:	2501      	movs	r5, #1
 80009ea:	3201      	adds	r2, #1
 80009ec:	0159      	lsls	r1, r3, #5
 80009ee:	d400      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 80009f0:	e740      	b.n	8000874 <__aeabi_fadd+0xb8>
 80009f2:	2101      	movs	r1, #1
 80009f4:	4835      	ldr	r0, [pc, #212]	@ (8000acc <__aeabi_fadd+0x310>)
 80009f6:	4019      	ands	r1, r3
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	4003      	ands	r3, r0
 80009fc:	430b      	orrs	r3, r1
 80009fe:	e7a7      	b.n	8000950 <__aeabi_fadd+0x194>
 8000a00:	28ff      	cmp	r0, #255	@ 0xff
 8000a02:	d0a9      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000a04:	2180      	movs	r1, #128	@ 0x80
 8000a06:	04c9      	lsls	r1, r1, #19
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	e7b6      	b.n	800097a <__aeabi_fadd+0x1be>
 8000a0c:	2aff      	cmp	r2, #255	@ 0xff
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_fadd+0x256>
 8000a10:	e779      	b.n	8000906 <__aeabi_fadd+0x14a>
 8000a12:	199b      	adds	r3, r3, r6
 8000a14:	085b      	lsrs	r3, r3, #1
 8000a16:	0759      	lsls	r1, r3, #29
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fadd+0x260>
 8000a1a:	e72f      	b.n	800087c <__aeabi_fadd+0xc0>
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	e7c1      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000a20:	000c      	movs	r4, r1
 8000a22:	1af7      	subs	r7, r6, r3
 8000a24:	e782      	b.n	800092c <__aeabi_fadd+0x170>
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d12c      	bne.n	8000a84 <__aeabi_fadd+0x2c8>
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d193      	bne.n	8000956 <__aeabi_fadd+0x19a>
 8000a2e:	2380      	movs	r3, #128	@ 0x80
 8000a30:	2400      	movs	r4, #0
 8000a32:	20ff      	movs	r0, #255	@ 0xff
 8000a34:	03db      	lsls	r3, r3, #15
 8000a36:	e72e      	b.n	8000896 <__aeabi_fadd+0xda>
 8000a38:	2501      	movs	r5, #1
 8000a3a:	1b9b      	subs	r3, r3, r6
 8000a3c:	e718      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a3e:	0019      	movs	r1, r3
 8000a40:	2520      	movs	r5, #32
 8000a42:	40d1      	lsrs	r1, r2
 8000a44:	1aaa      	subs	r2, r5, r2
 8000a46:	4093      	lsls	r3, r2
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	4193      	sbcs	r3, r2
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	0005      	movs	r5, r0
 8000a50:	199b      	adds	r3, r3, r6
 8000a52:	e753      	b.n	80008fc <__aeabi_fadd+0x140>
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_fadd+0x29e>
 8000a58:	e77e      	b.n	8000958 <__aeabi_fadd+0x19c>
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fadd+0x2a4>
 8000a5e:	e77c      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	03d2      	lsls	r2, r2, #15
 8000a64:	4591      	cmp	r9, r2
 8000a66:	d302      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a68:	4594      	cmp	ip, r2
 8000a6a:	d200      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a6c:	0033      	movs	r3, r6
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	e753      	b.n	800091a <__aeabi_fadd+0x15e>
 8000a72:	000c      	movs	r4, r1
 8000a74:	1af3      	subs	r3, r6, r3
 8000a76:	3501      	adds	r5, #1
 8000a78:	e6fa      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d0af      	beq.n	80009de <__aeabi_fadd+0x222>
 8000a7e:	000c      	movs	r4, r1
 8000a80:	0033      	movs	r3, r6
 8000a82:	e78d      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fadd+0x2ce>
 8000a88:	e767      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a8a:	2280      	movs	r2, #128	@ 0x80
 8000a8c:	03d2      	lsls	r2, r2, #15
 8000a8e:	4591      	cmp	r9, r2
 8000a90:	d3ed      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a92:	4594      	cmp	ip, r2
 8000a94:	d2eb      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a96:	000c      	movs	r4, r1
 8000a98:	0033      	movs	r3, r6
 8000a9a:	e7e8      	b.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a9c:	0033      	movs	r3, r6
 8000a9e:	e77f      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000aa0:	199b      	adds	r3, r3, r6
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	0159      	lsls	r1, r3, #5
 8000aa6:	d5b9      	bpl.n	8000a1c <__aeabi_fadd+0x260>
 8000aa8:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	08db      	lsrs	r3, r3, #3
 8000aae:	2201      	movs	r2, #1
 8000ab0:	e778      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ab2:	199b      	adds	r3, r3, r6
 8000ab4:	3201      	adds	r2, #1
 8000ab6:	3501      	adds	r5, #1
 8000ab8:	0159      	lsls	r1, r3, #5
 8000aba:	d49a      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 8000abc:	e6da      	b.n	8000874 <__aeabi_fadd+0xb8>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d08d      	beq.n	80009de <__aeabi_fadd+0x222>
 8000ac2:	08db      	lsrs	r3, r3, #3
 8000ac4:	e76e      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	fbffffff 	.word	0xfbffffff
 8000acc:	7dffffff 	.word	0x7dffffff

08000ad0 <__aeabi_fdiv>:
 8000ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad2:	464f      	mov	r7, r9
 8000ad4:	4646      	mov	r6, r8
 8000ad6:	46d6      	mov	lr, sl
 8000ad8:	0244      	lsls	r4, r0, #9
 8000ada:	b5c0      	push	{r6, r7, lr}
 8000adc:	0047      	lsls	r7, r0, #1
 8000ade:	1c0e      	adds	r6, r1, #0
 8000ae0:	0a64      	lsrs	r4, r4, #9
 8000ae2:	0e3f      	lsrs	r7, r7, #24
 8000ae4:	0fc5      	lsrs	r5, r0, #31
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d03c      	beq.n	8000b64 <__aeabi_fdiv+0x94>
 8000aea:	2fff      	cmp	r7, #255	@ 0xff
 8000aec:	d042      	beq.n	8000b74 <__aeabi_fdiv+0xa4>
 8000aee:	2300      	movs	r3, #0
 8000af0:	2280      	movs	r2, #128	@ 0x80
 8000af2:	4699      	mov	r9, r3
 8000af4:	469a      	mov	sl, r3
 8000af6:	00e4      	lsls	r4, r4, #3
 8000af8:	04d2      	lsls	r2, r2, #19
 8000afa:	4314      	orrs	r4, r2
 8000afc:	3f7f      	subs	r7, #127	@ 0x7f
 8000afe:	0273      	lsls	r3, r6, #9
 8000b00:	0a5b      	lsrs	r3, r3, #9
 8000b02:	4698      	mov	r8, r3
 8000b04:	0073      	lsls	r3, r6, #1
 8000b06:	0e1b      	lsrs	r3, r3, #24
 8000b08:	0ff6      	lsrs	r6, r6, #31
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d01b      	beq.n	8000b46 <__aeabi_fdiv+0x76>
 8000b0e:	2bff      	cmp	r3, #255	@ 0xff
 8000b10:	d013      	beq.n	8000b3a <__aeabi_fdiv+0x6a>
 8000b12:	4642      	mov	r2, r8
 8000b14:	2180      	movs	r1, #128	@ 0x80
 8000b16:	00d2      	lsls	r2, r2, #3
 8000b18:	04c9      	lsls	r1, r1, #19
 8000b1a:	4311      	orrs	r1, r2
 8000b1c:	4688      	mov	r8, r1
 8000b1e:	2000      	movs	r0, #0
 8000b20:	3b7f      	subs	r3, #127	@ 0x7f
 8000b22:	0029      	movs	r1, r5
 8000b24:	1aff      	subs	r7, r7, r3
 8000b26:	464b      	mov	r3, r9
 8000b28:	4071      	eors	r1, r6
 8000b2a:	b2c9      	uxtb	r1, r1
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d900      	bls.n	8000b32 <__aeabi_fdiv+0x62>
 8000b30:	e0b5      	b.n	8000c9e <__aeabi_fdiv+0x1ce>
 8000b32:	4a74      	ldr	r2, [pc, #464]	@ (8000d04 <__aeabi_fdiv+0x234>)
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	58d3      	ldr	r3, [r2, r3]
 8000b38:	469f      	mov	pc, r3
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d13f      	bne.n	8000bc0 <__aeabi_fdiv+0xf0>
 8000b40:	3fff      	subs	r7, #255	@ 0xff
 8000b42:	3302      	adds	r3, #2
 8000b44:	e003      	b.n	8000b4e <__aeabi_fdiv+0x7e>
 8000b46:	4643      	mov	r3, r8
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d12d      	bne.n	8000ba8 <__aeabi_fdiv+0xd8>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	0029      	movs	r1, r5
 8000b50:	464a      	mov	r2, r9
 8000b52:	4071      	eors	r1, r6
 8000b54:	b2c9      	uxtb	r1, r1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	2a0e      	cmp	r2, #14
 8000b5a:	d838      	bhi.n	8000bce <__aeabi_fdiv+0xfe>
 8000b5c:	486a      	ldr	r0, [pc, #424]	@ (8000d08 <__aeabi_fdiv+0x238>)
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	5882      	ldr	r2, [r0, r2]
 8000b62:	4697      	mov	pc, r2
 8000b64:	2c00      	cmp	r4, #0
 8000b66:	d113      	bne.n	8000b90 <__aeabi_fdiv+0xc0>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	4699      	mov	r9, r3
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	2700      	movs	r7, #0
 8000b70:	469a      	mov	sl, r3
 8000b72:	e7c4      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	d105      	bne.n	8000b84 <__aeabi_fdiv+0xb4>
 8000b78:	2308      	movs	r3, #8
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	3b06      	subs	r3, #6
 8000b7e:	27ff      	movs	r7, #255	@ 0xff
 8000b80:	469a      	mov	sl, r3
 8000b82:	e7bc      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b84:	230c      	movs	r3, #12
 8000b86:	4699      	mov	r9, r3
 8000b88:	3b09      	subs	r3, #9
 8000b8a:	27ff      	movs	r7, #255	@ 0xff
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	e7b6      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b90:	0020      	movs	r0, r4
 8000b92:	f002 fcb1 	bl	80034f8 <__clzsi2>
 8000b96:	2776      	movs	r7, #118	@ 0x76
 8000b98:	1f43      	subs	r3, r0, #5
 8000b9a:	409c      	lsls	r4, r3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	427f      	negs	r7, r7
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	469a      	mov	sl, r3
 8000ba4:	1a3f      	subs	r7, r7, r0
 8000ba6:	e7aa      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000ba8:	4640      	mov	r0, r8
 8000baa:	f002 fca5 	bl	80034f8 <__clzsi2>
 8000bae:	4642      	mov	r2, r8
 8000bb0:	1f43      	subs	r3, r0, #5
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	2376      	movs	r3, #118	@ 0x76
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	1a1b      	subs	r3, r3, r0
 8000bba:	4690      	mov	r8, r2
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e7b0      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	464a      	mov	r2, r9
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	4691      	mov	r9, r2
 8000bc8:	2003      	movs	r0, #3
 8000bca:	33fc      	adds	r3, #252	@ 0xfc
 8000bcc:	e7a9      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bce:	000d      	movs	r5, r1
 8000bd0:	20ff      	movs	r0, #255	@ 0xff
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	05c0      	lsls	r0, r0, #23
 8000bd6:	07ed      	lsls	r5, r5, #31
 8000bd8:	4310      	orrs	r0, r2
 8000bda:	4328      	orrs	r0, r5
 8000bdc:	bce0      	pop	{r5, r6, r7}
 8000bde:	46ba      	mov	sl, r7
 8000be0:	46b1      	mov	r9, r6
 8000be2:	46a8      	mov	r8, r5
 8000be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be6:	000d      	movs	r5, r1
 8000be8:	2000      	movs	r0, #0
 8000bea:	2200      	movs	r2, #0
 8000bec:	e7f2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000bee:	4653      	mov	r3, sl
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d0ed      	beq.n	8000bd0 <__aeabi_fdiv+0x100>
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d033      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000bf8:	46a0      	mov	r8, r4
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d105      	bne.n	8000c0a <__aeabi_fdiv+0x13a>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	2200      	movs	r2, #0
 8000c02:	e7e7      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c04:	0035      	movs	r5, r6
 8000c06:	2803      	cmp	r0, #3
 8000c08:	d07a      	beq.n	8000d00 <__aeabi_fdiv+0x230>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	337f      	adds	r3, #127	@ 0x7f
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	dd2d      	ble.n	8000c6e <__aeabi_fdiv+0x19e>
 8000c12:	4642      	mov	r2, r8
 8000c14:	0752      	lsls	r2, r2, #29
 8000c16:	d007      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c18:	220f      	movs	r2, #15
 8000c1a:	4641      	mov	r1, r8
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	2a04      	cmp	r2, #4
 8000c20:	d002      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c22:	2204      	movs	r2, #4
 8000c24:	4694      	mov	ip, r2
 8000c26:	44e0      	add	r8, ip
 8000c28:	4642      	mov	r2, r8
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	d505      	bpl.n	8000c3a <__aeabi_fdiv+0x16a>
 8000c2e:	4642      	mov	r2, r8
 8000c30:	4b36      	ldr	r3, [pc, #216]	@ (8000d0c <__aeabi_fdiv+0x23c>)
 8000c32:	401a      	ands	r2, r3
 8000c34:	003b      	movs	r3, r7
 8000c36:	4690      	mov	r8, r2
 8000c38:	3380      	adds	r3, #128	@ 0x80
 8000c3a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c3c:	dcc8      	bgt.n	8000bd0 <__aeabi_fdiv+0x100>
 8000c3e:	4642      	mov	r2, r8
 8000c40:	0192      	lsls	r2, r2, #6
 8000c42:	0a52      	lsrs	r2, r2, #9
 8000c44:	b2d8      	uxtb	r0, r3
 8000c46:	e7c5      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c48:	2280      	movs	r2, #128	@ 0x80
 8000c4a:	2500      	movs	r5, #0
 8000c4c:	20ff      	movs	r0, #255	@ 0xff
 8000c4e:	03d2      	lsls	r2, r2, #15
 8000c50:	e7c0      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	03d2      	lsls	r2, r2, #15
 8000c56:	4214      	tst	r4, r2
 8000c58:	d002      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000c5a:	4643      	mov	r3, r8
 8000c5c:	4213      	tst	r3, r2
 8000c5e:	d049      	beq.n	8000cf4 <__aeabi_fdiv+0x224>
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	03d2      	lsls	r2, r2, #15
 8000c64:	4322      	orrs	r2, r4
 8000c66:	0252      	lsls	r2, r2, #9
 8000c68:	20ff      	movs	r0, #255	@ 0xff
 8000c6a:	0a52      	lsrs	r2, r2, #9
 8000c6c:	e7b2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c6e:	2201      	movs	r2, #1
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b1b      	cmp	r3, #27
 8000c74:	dcc3      	bgt.n	8000bfe <__aeabi_fdiv+0x12e>
 8000c76:	4642      	mov	r2, r8
 8000c78:	40da      	lsrs	r2, r3
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	379e      	adds	r7, #158	@ 0x9e
 8000c7e:	40bb      	lsls	r3, r7
 8000c80:	1e59      	subs	r1, r3, #1
 8000c82:	418b      	sbcs	r3, r1
 8000c84:	431a      	orrs	r2, r3
 8000c86:	0753      	lsls	r3, r2, #29
 8000c88:	d004      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d000      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c92:	3204      	adds	r2, #4
 8000c94:	0153      	lsls	r3, r2, #5
 8000c96:	d529      	bpl.n	8000cec <__aeabi_fdiv+0x21c>
 8000c98:	2001      	movs	r0, #1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e79a      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	0163      	lsls	r3, r4, #5
 8000ca2:	0155      	lsls	r5, r2, #5
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	d215      	bcs.n	8000cd4 <__aeabi_fdiv+0x204>
 8000ca8:	201b      	movs	r0, #27
 8000caa:	2200      	movs	r2, #0
 8000cac:	3f01      	subs	r7, #1
 8000cae:	2601      	movs	r6, #1
 8000cb0:	001c      	movs	r4, r3
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2c00      	cmp	r4, #0
 8000cb8:	db01      	blt.n	8000cbe <__aeabi_fdiv+0x1ee>
 8000cba:	429d      	cmp	r5, r3
 8000cbc:	d801      	bhi.n	8000cc2 <__aeabi_fdiv+0x1f2>
 8000cbe:	1b5b      	subs	r3, r3, r5
 8000cc0:	4332      	orrs	r2, r6
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d1f3      	bne.n	8000cb0 <__aeabi_fdiv+0x1e0>
 8000cc8:	1e58      	subs	r0, r3, #1
 8000cca:	4183      	sbcs	r3, r0
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	4698      	mov	r8, r3
 8000cd0:	000d      	movs	r5, r1
 8000cd2:	e79a      	b.n	8000c0a <__aeabi_fdiv+0x13a>
 8000cd4:	201a      	movs	r0, #26
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	1b5b      	subs	r3, r3, r5
 8000cda:	e7e8      	b.n	8000cae <__aeabi_fdiv+0x1de>
 8000cdc:	3b02      	subs	r3, #2
 8000cde:	425a      	negs	r2, r3
 8000ce0:	4153      	adcs	r3, r2
 8000ce2:	425b      	negs	r3, r3
 8000ce4:	0035      	movs	r5, r6
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	b2d8      	uxtb	r0, r3
 8000cea:	e773      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cec:	0192      	lsls	r2, r2, #6
 8000cee:	2000      	movs	r0, #0
 8000cf0:	0a52      	lsrs	r2, r2, #9
 8000cf2:	e76f      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	0252      	lsls	r2, r2, #9
 8000cf8:	0035      	movs	r5, r6
 8000cfa:	20ff      	movs	r0, #255	@ 0xff
 8000cfc:	0a52      	lsrs	r2, r2, #9
 8000cfe:	e769      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000d00:	4644      	mov	r4, r8
 8000d02:	e7ad      	b.n	8000c60 <__aeabi_fdiv+0x190>
 8000d04:	0801b5c0 	.word	0x0801b5c0
 8000d08:	0801b600 	.word	0x0801b600
 8000d0c:	f7ffffff 	.word	0xf7ffffff

08000d10 <__eqsf2>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	0042      	lsls	r2, r0, #1
 8000d14:	024e      	lsls	r6, r1, #9
 8000d16:	004c      	lsls	r4, r1, #1
 8000d18:	0245      	lsls	r5, r0, #9
 8000d1a:	0a6d      	lsrs	r5, r5, #9
 8000d1c:	0e12      	lsrs	r2, r2, #24
 8000d1e:	0fc3      	lsrs	r3, r0, #31
 8000d20:	0a76      	lsrs	r6, r6, #9
 8000d22:	0e24      	lsrs	r4, r4, #24
 8000d24:	0fc9      	lsrs	r1, r1, #31
 8000d26:	2aff      	cmp	r2, #255	@ 0xff
 8000d28:	d010      	beq.n	8000d4c <__eqsf2+0x3c>
 8000d2a:	2cff      	cmp	r4, #255	@ 0xff
 8000d2c:	d00c      	beq.n	8000d48 <__eqsf2+0x38>
 8000d2e:	2001      	movs	r0, #1
 8000d30:	42a2      	cmp	r2, r4
 8000d32:	d10a      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d34:	42b5      	cmp	r5, r6
 8000d36:	d108      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d00f      	beq.n	8000d5c <__eqsf2+0x4c>
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d104      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d40:	0028      	movs	r0, r5
 8000d42:	1e43      	subs	r3, r0, #1
 8000d44:	4198      	sbcs	r0, r3
 8000d46:	e000      	b.n	8000d4a <__eqsf2+0x3a>
 8000d48:	2001      	movs	r0, #1
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	2cff      	cmp	r4, #255	@ 0xff
 8000d50:	d1fb      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d52:	4335      	orrs	r5, r6
 8000d54:	d1f9      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d56:	404b      	eors	r3, r1
 8000d58:	0018      	movs	r0, r3
 8000d5a:	e7f6      	b.n	8000d4a <__eqsf2+0x3a>
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	e7f4      	b.n	8000d4a <__eqsf2+0x3a>

08000d60 <__gesf2>:
 8000d60:	b530      	push	{r4, r5, lr}
 8000d62:	0042      	lsls	r2, r0, #1
 8000d64:	0244      	lsls	r4, r0, #9
 8000d66:	024d      	lsls	r5, r1, #9
 8000d68:	0fc3      	lsrs	r3, r0, #31
 8000d6a:	0048      	lsls	r0, r1, #1
 8000d6c:	0a64      	lsrs	r4, r4, #9
 8000d6e:	0e12      	lsrs	r2, r2, #24
 8000d70:	0a6d      	lsrs	r5, r5, #9
 8000d72:	0e00      	lsrs	r0, r0, #24
 8000d74:	0fc9      	lsrs	r1, r1, #31
 8000d76:	2aff      	cmp	r2, #255	@ 0xff
 8000d78:	d019      	beq.n	8000dae <__gesf2+0x4e>
 8000d7a:	28ff      	cmp	r0, #255	@ 0xff
 8000d7c:	d00b      	beq.n	8000d96 <__gesf2+0x36>
 8000d7e:	2a00      	cmp	r2, #0
 8000d80:	d11e      	bne.n	8000dc0 <__gesf2+0x60>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d10b      	bne.n	8000d9e <__gesf2+0x3e>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d027      	beq.n	8000dda <__gesf2+0x7a>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d134      	bne.n	8000df8 <__gesf2+0x98>
 8000d8e:	2900      	cmp	r1, #0
 8000d90:	d02f      	beq.n	8000df2 <__gesf2+0x92>
 8000d92:	0008      	movs	r0, r1
 8000d94:	bd30      	pop	{r4, r5, pc}
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d128      	bne.n	8000dec <__gesf2+0x8c>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	d101      	bne.n	8000da2 <__gesf2+0x42>
 8000d9e:	2c00      	cmp	r4, #0
 8000da0:	d0f5      	beq.n	8000d8e <__gesf2+0x2e>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d107      	bne.n	8000db6 <__gesf2+0x56>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d023      	beq.n	8000df2 <__gesf2+0x92>
 8000daa:	0018      	movs	r0, r3
 8000dac:	e7f2      	b.n	8000d94 <__gesf2+0x34>
 8000dae:	2c00      	cmp	r4, #0
 8000db0:	d11c      	bne.n	8000dec <__gesf2+0x8c>
 8000db2:	28ff      	cmp	r0, #255	@ 0xff
 8000db4:	d014      	beq.n	8000de0 <__gesf2+0x80>
 8000db6:	1e58      	subs	r0, r3, #1
 8000db8:	2302      	movs	r3, #2
 8000dba:	4018      	ands	r0, r3
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	e7e9      	b.n	8000d94 <__gesf2+0x34>
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	d0f8      	beq.n	8000db6 <__gesf2+0x56>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d1f6      	bne.n	8000db6 <__gesf2+0x56>
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	dcf4      	bgt.n	8000db6 <__gesf2+0x56>
 8000dcc:	dbeb      	blt.n	8000da6 <__gesf2+0x46>
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	d8f1      	bhi.n	8000db6 <__gesf2+0x56>
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	42ac      	cmp	r4, r5
 8000dd6:	d2dd      	bcs.n	8000d94 <__gesf2+0x34>
 8000dd8:	e7e5      	b.n	8000da6 <__gesf2+0x46>
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	d0da      	beq.n	8000d94 <__gesf2+0x34>
 8000dde:	e7ea      	b.n	8000db6 <__gesf2+0x56>
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d103      	bne.n	8000dec <__gesf2+0x8c>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d1e6      	bne.n	8000db6 <__gesf2+0x56>
 8000de8:	2000      	movs	r0, #0
 8000dea:	e7d3      	b.n	8000d94 <__gesf2+0x34>
 8000dec:	2002      	movs	r0, #2
 8000dee:	4240      	negs	r0, r0
 8000df0:	e7d0      	b.n	8000d94 <__gesf2+0x34>
 8000df2:	2001      	movs	r0, #1
 8000df4:	4240      	negs	r0, r0
 8000df6:	e7cd      	b.n	8000d94 <__gesf2+0x34>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d0e8      	beq.n	8000dce <__gesf2+0x6e>
 8000dfc:	e7db      	b.n	8000db6 <__gesf2+0x56>
 8000dfe:	46c0      	nop			@ (mov r8, r8)

08000e00 <__lesf2>:
 8000e00:	b530      	push	{r4, r5, lr}
 8000e02:	0042      	lsls	r2, r0, #1
 8000e04:	0244      	lsls	r4, r0, #9
 8000e06:	024d      	lsls	r5, r1, #9
 8000e08:	0fc3      	lsrs	r3, r0, #31
 8000e0a:	0048      	lsls	r0, r1, #1
 8000e0c:	0a64      	lsrs	r4, r4, #9
 8000e0e:	0e12      	lsrs	r2, r2, #24
 8000e10:	0a6d      	lsrs	r5, r5, #9
 8000e12:	0e00      	lsrs	r0, r0, #24
 8000e14:	0fc9      	lsrs	r1, r1, #31
 8000e16:	2aff      	cmp	r2, #255	@ 0xff
 8000e18:	d01a      	beq.n	8000e50 <__lesf2+0x50>
 8000e1a:	28ff      	cmp	r0, #255	@ 0xff
 8000e1c:	d00e      	beq.n	8000e3c <__lesf2+0x3c>
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d11e      	bne.n	8000e60 <__lesf2+0x60>
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d10e      	bne.n	8000e44 <__lesf2+0x44>
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d02a      	beq.n	8000e80 <__lesf2+0x80>
 8000e2a:	2c00      	cmp	r4, #0
 8000e2c:	d00c      	beq.n	8000e48 <__lesf2+0x48>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d01d      	beq.n	8000e6e <__lesf2+0x6e>
 8000e32:	1e58      	subs	r0, r3, #1
 8000e34:	2302      	movs	r3, #2
 8000e36:	4018      	ands	r0, r3
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e010      	b.n	8000e5e <__lesf2+0x5e>
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	d10d      	bne.n	8000e5c <__lesf2+0x5c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d120      	bne.n	8000e86 <__lesf2+0x86>
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	d11e      	bne.n	8000e86 <__lesf2+0x86>
 8000e48:	2900      	cmp	r1, #0
 8000e4a:	d023      	beq.n	8000e94 <__lesf2+0x94>
 8000e4c:	0008      	movs	r0, r1
 8000e4e:	e006      	b.n	8000e5e <__lesf2+0x5e>
 8000e50:	2c00      	cmp	r4, #0
 8000e52:	d103      	bne.n	8000e5c <__lesf2+0x5c>
 8000e54:	28ff      	cmp	r0, #255	@ 0xff
 8000e56:	d1ec      	bne.n	8000e32 <__lesf2+0x32>
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d017      	beq.n	8000e8c <__lesf2+0x8c>
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	bd30      	pop	{r4, r5, pc}
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d0e6      	beq.n	8000e32 <__lesf2+0x32>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d1e4      	bne.n	8000e32 <__lesf2+0x32>
 8000e68:	4282      	cmp	r2, r0
 8000e6a:	dce2      	bgt.n	8000e32 <__lesf2+0x32>
 8000e6c:	db04      	blt.n	8000e78 <__lesf2+0x78>
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	d8df      	bhi.n	8000e32 <__lesf2+0x32>
 8000e72:	2000      	movs	r0, #0
 8000e74:	42ac      	cmp	r4, r5
 8000e76:	d2f2      	bcs.n	8000e5e <__lesf2+0x5e>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00b      	beq.n	8000e94 <__lesf2+0x94>
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	e7ee      	b.n	8000e5e <__lesf2+0x5e>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d0ec      	beq.n	8000e5e <__lesf2+0x5e>
 8000e84:	e7d5      	b.n	8000e32 <__lesf2+0x32>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d1d3      	bne.n	8000e32 <__lesf2+0x32>
 8000e8a:	e7f5      	b.n	8000e78 <__lesf2+0x78>
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d0e5      	beq.n	8000e5e <__lesf2+0x5e>
 8000e92:	e7ce      	b.n	8000e32 <__lesf2+0x32>
 8000e94:	2001      	movs	r0, #1
 8000e96:	4240      	negs	r0, r0
 8000e98:	e7e1      	b.n	8000e5e <__lesf2+0x5e>
 8000e9a:	46c0      	nop			@ (mov r8, r8)

08000e9c <__aeabi_fmul>:
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	464f      	mov	r7, r9
 8000ea0:	4646      	mov	r6, r8
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	0243      	lsls	r3, r0, #9
 8000ea6:	0a5b      	lsrs	r3, r3, #9
 8000ea8:	0045      	lsls	r5, r0, #1
 8000eaa:	b5c0      	push	{r6, r7, lr}
 8000eac:	4699      	mov	r9, r3
 8000eae:	1c0f      	adds	r7, r1, #0
 8000eb0:	0e2d      	lsrs	r5, r5, #24
 8000eb2:	0fc6      	lsrs	r6, r0, #31
 8000eb4:	2d00      	cmp	r5, #0
 8000eb6:	d100      	bne.n	8000eba <__aeabi_fmul+0x1e>
 8000eb8:	e088      	b.n	8000fcc <__aeabi_fmul+0x130>
 8000eba:	2dff      	cmp	r5, #255	@ 0xff
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_fmul+0x24>
 8000ebe:	e08d      	b.n	8000fdc <__aeabi_fmul+0x140>
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	04d2      	lsls	r2, r2, #19
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4691      	mov	r9, r2
 8000ecc:	4698      	mov	r8, r3
 8000ece:	469a      	mov	sl, r3
 8000ed0:	3d7f      	subs	r5, #127	@ 0x7f
 8000ed2:	027c      	lsls	r4, r7, #9
 8000ed4:	007b      	lsls	r3, r7, #1
 8000ed6:	0a64      	lsrs	r4, r4, #9
 8000ed8:	0e1b      	lsrs	r3, r3, #24
 8000eda:	0fff      	lsrs	r7, r7, #31
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d068      	beq.n	8000fb2 <__aeabi_fmul+0x116>
 8000ee0:	2bff      	cmp	r3, #255	@ 0xff
 8000ee2:	d021      	beq.n	8000f28 <__aeabi_fmul+0x8c>
 8000ee4:	2280      	movs	r2, #128	@ 0x80
 8000ee6:	00e4      	lsls	r4, r4, #3
 8000ee8:	04d2      	lsls	r2, r2, #19
 8000eea:	4314      	orrs	r4, r2
 8000eec:	4642      	mov	r2, r8
 8000eee:	3b7f      	subs	r3, #127	@ 0x7f
 8000ef0:	195b      	adds	r3, r3, r5
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	1c5d      	adds	r5, r3, #1
 8000ef6:	2a0a      	cmp	r2, #10
 8000ef8:	dc2e      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 8000efa:	407e      	eors	r6, r7
 8000efc:	4642      	mov	r2, r8
 8000efe:	2a02      	cmp	r2, #2
 8000f00:	dc23      	bgt.n	8000f4a <__aeabi_fmul+0xae>
 8000f02:	3a01      	subs	r2, #1
 8000f04:	2a01      	cmp	r2, #1
 8000f06:	d900      	bls.n	8000f0a <__aeabi_fmul+0x6e>
 8000f08:	e0bd      	b.n	8001086 <__aeabi_fmul+0x1ea>
 8000f0a:	2902      	cmp	r1, #2
 8000f0c:	d06e      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f0e:	2901      	cmp	r1, #1
 8000f10:	d12c      	bne.n	8000f6c <__aeabi_fmul+0xd0>
 8000f12:	2000      	movs	r0, #0
 8000f14:	2200      	movs	r2, #0
 8000f16:	05c0      	lsls	r0, r0, #23
 8000f18:	07f6      	lsls	r6, r6, #31
 8000f1a:	4310      	orrs	r0, r2
 8000f1c:	4330      	orrs	r0, r6
 8000f1e:	bce0      	pop	{r5, r6, r7}
 8000f20:	46ba      	mov	sl, r7
 8000f22:	46b1      	mov	r9, r6
 8000f24:	46a8      	mov	r8, r5
 8000f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f28:	002b      	movs	r3, r5
 8000f2a:	33ff      	adds	r3, #255	@ 0xff
 8000f2c:	2c00      	cmp	r4, #0
 8000f2e:	d065      	beq.n	8000ffc <__aeabi_fmul+0x160>
 8000f30:	2203      	movs	r2, #3
 8000f32:	4641      	mov	r1, r8
 8000f34:	4311      	orrs	r1, r2
 8000f36:	0032      	movs	r2, r6
 8000f38:	3501      	adds	r5, #1
 8000f3a:	4688      	mov	r8, r1
 8000f3c:	407a      	eors	r2, r7
 8000f3e:	35ff      	adds	r5, #255	@ 0xff
 8000f40:	290a      	cmp	r1, #10
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_fmul+0xaa>
 8000f44:	e0d8      	b.n	80010f8 <__aeabi_fmul+0x25c>
 8000f46:	0016      	movs	r6, r2
 8000f48:	2103      	movs	r1, #3
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4082      	lsls	r2, r0
 8000f50:	20a6      	movs	r0, #166	@ 0xa6
 8000f52:	00c0      	lsls	r0, r0, #3
 8000f54:	4202      	tst	r2, r0
 8000f56:	d020      	beq.n	8000f9a <__aeabi_fmul+0xfe>
 8000f58:	4653      	mov	r3, sl
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d046      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fmul+0xc8>
 8000f62:	e0bb      	b.n	80010dc <__aeabi_fmul+0x240>
 8000f64:	4651      	mov	r1, sl
 8000f66:	464c      	mov	r4, r9
 8000f68:	2901      	cmp	r1, #1
 8000f6a:	d0d2      	beq.n	8000f12 <__aeabi_fmul+0x76>
 8000f6c:	002b      	movs	r3, r5
 8000f6e:	337f      	adds	r3, #127	@ 0x7f
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	dd70      	ble.n	8001056 <__aeabi_fmul+0x1ba>
 8000f74:	0762      	lsls	r2, r4, #29
 8000f76:	d004      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f78:	220f      	movs	r2, #15
 8000f7a:	4022      	ands	r2, r4
 8000f7c:	2a04      	cmp	r2, #4
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f80:	3404      	adds	r4, #4
 8000f82:	0122      	lsls	r2, r4, #4
 8000f84:	d503      	bpl.n	8000f8e <__aeabi_fmul+0xf2>
 8000f86:	4b63      	ldr	r3, [pc, #396]	@ (8001114 <__aeabi_fmul+0x278>)
 8000f88:	401c      	ands	r4, r3
 8000f8a:	002b      	movs	r3, r5
 8000f8c:	3380      	adds	r3, #128	@ 0x80
 8000f8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f90:	dc2c      	bgt.n	8000fec <__aeabi_fmul+0x150>
 8000f92:	01a2      	lsls	r2, r4, #6
 8000f94:	0a52      	lsrs	r2, r2, #9
 8000f96:	b2d8      	uxtb	r0, r3
 8000f98:	e7bd      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000f9a:	2090      	movs	r0, #144	@ 0x90
 8000f9c:	0080      	lsls	r0, r0, #2
 8000f9e:	4202      	tst	r2, r0
 8000fa0:	d127      	bne.n	8000ff2 <__aeabi_fmul+0x156>
 8000fa2:	38b9      	subs	r0, #185	@ 0xb9
 8000fa4:	38ff      	subs	r0, #255	@ 0xff
 8000fa6:	4210      	tst	r0, r2
 8000fa8:	d06d      	beq.n	8001086 <__aeabi_fmul+0x1ea>
 8000faa:	003e      	movs	r6, r7
 8000fac:	46a1      	mov	r9, r4
 8000fae:	468a      	mov	sl, r1
 8000fb0:	e7d2      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fb2:	2c00      	cmp	r4, #0
 8000fb4:	d141      	bne.n	800103a <__aeabi_fmul+0x19e>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	4642      	mov	r2, r8
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	4690      	mov	r8, r2
 8000fbe:	002b      	movs	r3, r5
 8000fc0:	4642      	mov	r2, r8
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	1c5d      	adds	r5, r3, #1
 8000fc6:	2a0a      	cmp	r2, #10
 8000fc8:	dd97      	ble.n	8000efa <__aeabi_fmul+0x5e>
 8000fca:	e7c5      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d126      	bne.n	800101e <__aeabi_fmul+0x182>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	4698      	mov	r8, r3
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	469a      	mov	sl, r3
 8000fda:	e77a      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d118      	bne.n	8001012 <__aeabi_fmul+0x176>
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	4698      	mov	r8, r3
 8000fe4:	3b06      	subs	r3, #6
 8000fe6:	25ff      	movs	r5, #255	@ 0xff
 8000fe8:	469a      	mov	sl, r3
 8000fea:	e772      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fec:	20ff      	movs	r0, #255	@ 0xff
 8000fee:	2200      	movs	r2, #0
 8000ff0:	e791      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ff2:	2280      	movs	r2, #128	@ 0x80
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	20ff      	movs	r0, #255	@ 0xff
 8000ff8:	03d2      	lsls	r2, r2, #15
 8000ffa:	e78c      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ffc:	4641      	mov	r1, r8
 8000ffe:	2202      	movs	r2, #2
 8001000:	3501      	adds	r5, #1
 8001002:	4311      	orrs	r1, r2
 8001004:	4688      	mov	r8, r1
 8001006:	35ff      	adds	r5, #255	@ 0xff
 8001008:	290a      	cmp	r1, #10
 800100a:	dca5      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 800100c:	2102      	movs	r1, #2
 800100e:	407e      	eors	r6, r7
 8001010:	e774      	b.n	8000efc <__aeabi_fmul+0x60>
 8001012:	230c      	movs	r3, #12
 8001014:	4698      	mov	r8, r3
 8001016:	3b09      	subs	r3, #9
 8001018:	25ff      	movs	r5, #255	@ 0xff
 800101a:	469a      	mov	sl, r3
 800101c:	e759      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800101e:	0018      	movs	r0, r3
 8001020:	f002 fa6a 	bl	80034f8 <__clzsi2>
 8001024:	464a      	mov	r2, r9
 8001026:	1f43      	subs	r3, r0, #5
 8001028:	2576      	movs	r5, #118	@ 0x76
 800102a:	409a      	lsls	r2, r3
 800102c:	2300      	movs	r3, #0
 800102e:	426d      	negs	r5, r5
 8001030:	4691      	mov	r9, r2
 8001032:	4698      	mov	r8, r3
 8001034:	469a      	mov	sl, r3
 8001036:	1a2d      	subs	r5, r5, r0
 8001038:	e74b      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800103a:	0020      	movs	r0, r4
 800103c:	f002 fa5c 	bl	80034f8 <__clzsi2>
 8001040:	4642      	mov	r2, r8
 8001042:	1f43      	subs	r3, r0, #5
 8001044:	409c      	lsls	r4, r3
 8001046:	1a2b      	subs	r3, r5, r0
 8001048:	3b76      	subs	r3, #118	@ 0x76
 800104a:	2100      	movs	r1, #0
 800104c:	1c5d      	adds	r5, r3, #1
 800104e:	2a0a      	cmp	r2, #10
 8001050:	dc00      	bgt.n	8001054 <__aeabi_fmul+0x1b8>
 8001052:	e752      	b.n	8000efa <__aeabi_fmul+0x5e>
 8001054:	e780      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8001056:	2201      	movs	r2, #1
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b1b      	cmp	r3, #27
 800105c:	dd00      	ble.n	8001060 <__aeabi_fmul+0x1c4>
 800105e:	e758      	b.n	8000f12 <__aeabi_fmul+0x76>
 8001060:	359e      	adds	r5, #158	@ 0x9e
 8001062:	0022      	movs	r2, r4
 8001064:	40ac      	lsls	r4, r5
 8001066:	40da      	lsrs	r2, r3
 8001068:	1e63      	subs	r3, r4, #1
 800106a:	419c      	sbcs	r4, r3
 800106c:	4322      	orrs	r2, r4
 800106e:	0753      	lsls	r3, r2, #29
 8001070:	d004      	beq.n	800107c <__aeabi_fmul+0x1e0>
 8001072:	230f      	movs	r3, #15
 8001074:	4013      	ands	r3, r2
 8001076:	2b04      	cmp	r3, #4
 8001078:	d000      	beq.n	800107c <__aeabi_fmul+0x1e0>
 800107a:	3204      	adds	r2, #4
 800107c:	0153      	lsls	r3, r2, #5
 800107e:	d537      	bpl.n	80010f0 <__aeabi_fmul+0x254>
 8001080:	2001      	movs	r0, #1
 8001082:	2200      	movs	r2, #0
 8001084:	e747      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001086:	0c21      	lsrs	r1, r4, #16
 8001088:	464a      	mov	r2, r9
 800108a:	0424      	lsls	r4, r4, #16
 800108c:	0c24      	lsrs	r4, r4, #16
 800108e:	0027      	movs	r7, r4
 8001090:	0c10      	lsrs	r0, r2, #16
 8001092:	0412      	lsls	r2, r2, #16
 8001094:	0c12      	lsrs	r2, r2, #16
 8001096:	4344      	muls	r4, r0
 8001098:	4357      	muls	r7, r2
 800109a:	4348      	muls	r0, r1
 800109c:	4351      	muls	r1, r2
 800109e:	0c3a      	lsrs	r2, r7, #16
 80010a0:	1909      	adds	r1, r1, r4
 80010a2:	1852      	adds	r2, r2, r1
 80010a4:	4294      	cmp	r4, r2
 80010a6:	d903      	bls.n	80010b0 <__aeabi_fmul+0x214>
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	0249      	lsls	r1, r1, #9
 80010ac:	468c      	mov	ip, r1
 80010ae:	4460      	add	r0, ip
 80010b0:	043f      	lsls	r7, r7, #16
 80010b2:	0411      	lsls	r1, r2, #16
 80010b4:	0c3f      	lsrs	r7, r7, #16
 80010b6:	19c9      	adds	r1, r1, r7
 80010b8:	018c      	lsls	r4, r1, #6
 80010ba:	1e67      	subs	r7, r4, #1
 80010bc:	41bc      	sbcs	r4, r7
 80010be:	0c12      	lsrs	r2, r2, #16
 80010c0:	0e89      	lsrs	r1, r1, #26
 80010c2:	1812      	adds	r2, r2, r0
 80010c4:	430c      	orrs	r4, r1
 80010c6:	0192      	lsls	r2, r2, #6
 80010c8:	4314      	orrs	r4, r2
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	d50e      	bpl.n	80010ec <__aeabi_fmul+0x250>
 80010ce:	2301      	movs	r3, #1
 80010d0:	0862      	lsrs	r2, r4, #1
 80010d2:	401c      	ands	r4, r3
 80010d4:	4314      	orrs	r4, r2
 80010d6:	e749      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010d8:	003e      	movs	r6, r7
 80010da:	46a1      	mov	r9, r4
 80010dc:	2280      	movs	r2, #128	@ 0x80
 80010de:	464b      	mov	r3, r9
 80010e0:	03d2      	lsls	r2, r2, #15
 80010e2:	431a      	orrs	r2, r3
 80010e4:	0252      	lsls	r2, r2, #9
 80010e6:	20ff      	movs	r0, #255	@ 0xff
 80010e8:	0a52      	lsrs	r2, r2, #9
 80010ea:	e714      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010ec:	001d      	movs	r5, r3
 80010ee:	e73d      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010f0:	0192      	lsls	r2, r2, #6
 80010f2:	2000      	movs	r0, #0
 80010f4:	0a52      	lsrs	r2, r2, #9
 80010f6:	e70e      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010f8:	290f      	cmp	r1, #15
 80010fa:	d1ed      	bne.n	80010d8 <__aeabi_fmul+0x23c>
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	464b      	mov	r3, r9
 8001100:	03d2      	lsls	r2, r2, #15
 8001102:	4213      	tst	r3, r2
 8001104:	d0ea      	beq.n	80010dc <__aeabi_fmul+0x240>
 8001106:	4214      	tst	r4, r2
 8001108:	d1e8      	bne.n	80010dc <__aeabi_fmul+0x240>
 800110a:	003e      	movs	r6, r7
 800110c:	20ff      	movs	r0, #255	@ 0xff
 800110e:	4322      	orrs	r2, r4
 8001110:	e701      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	f7ffffff 	.word	0xf7ffffff

08001118 <__aeabi_fsub>:
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	4647      	mov	r7, r8
 800111c:	46ce      	mov	lr, r9
 800111e:	024e      	lsls	r6, r1, #9
 8001120:	0243      	lsls	r3, r0, #9
 8001122:	0045      	lsls	r5, r0, #1
 8001124:	0a72      	lsrs	r2, r6, #9
 8001126:	0fc4      	lsrs	r4, r0, #31
 8001128:	0048      	lsls	r0, r1, #1
 800112a:	b580      	push	{r7, lr}
 800112c:	4694      	mov	ip, r2
 800112e:	0a5f      	lsrs	r7, r3, #9
 8001130:	0e2d      	lsrs	r5, r5, #24
 8001132:	099b      	lsrs	r3, r3, #6
 8001134:	0e00      	lsrs	r0, r0, #24
 8001136:	0fc9      	lsrs	r1, r1, #31
 8001138:	09b6      	lsrs	r6, r6, #6
 800113a:	28ff      	cmp	r0, #255	@ 0xff
 800113c:	d024      	beq.n	8001188 <__aeabi_fsub+0x70>
 800113e:	2201      	movs	r2, #1
 8001140:	4051      	eors	r1, r2
 8001142:	1a2a      	subs	r2, r5, r0
 8001144:	428c      	cmp	r4, r1
 8001146:	d00f      	beq.n	8001168 <__aeabi_fsub+0x50>
 8001148:	2a00      	cmp	r2, #0
 800114a:	dc00      	bgt.n	800114e <__aeabi_fsub+0x36>
 800114c:	e16a      	b.n	8001424 <__aeabi_fsub+0x30c>
 800114e:	2800      	cmp	r0, #0
 8001150:	d135      	bne.n	80011be <__aeabi_fsub+0xa6>
 8001152:	2e00      	cmp	r6, #0
 8001154:	d100      	bne.n	8001158 <__aeabi_fsub+0x40>
 8001156:	e0a2      	b.n	800129e <__aeabi_fsub+0x186>
 8001158:	1e51      	subs	r1, r2, #1
 800115a:	2a01      	cmp	r2, #1
 800115c:	d100      	bne.n	8001160 <__aeabi_fsub+0x48>
 800115e:	e124      	b.n	80013aa <__aeabi_fsub+0x292>
 8001160:	2aff      	cmp	r2, #255	@ 0xff
 8001162:	d021      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001164:	000a      	movs	r2, r1
 8001166:	e02f      	b.n	80011c8 <__aeabi_fsub+0xb0>
 8001168:	2a00      	cmp	r2, #0
 800116a:	dc00      	bgt.n	800116e <__aeabi_fsub+0x56>
 800116c:	e167      	b.n	800143e <__aeabi_fsub+0x326>
 800116e:	2800      	cmp	r0, #0
 8001170:	d05e      	beq.n	8001230 <__aeabi_fsub+0x118>
 8001172:	2dff      	cmp	r5, #255	@ 0xff
 8001174:	d018      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	04c9      	lsls	r1, r1, #19
 800117a:	430e      	orrs	r6, r1
 800117c:	2a1b      	cmp	r2, #27
 800117e:	dc00      	bgt.n	8001182 <__aeabi_fsub+0x6a>
 8001180:	e076      	b.n	8001270 <__aeabi_fsub+0x158>
 8001182:	002a      	movs	r2, r5
 8001184:	3301      	adds	r3, #1
 8001186:	e032      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001188:	002a      	movs	r2, r5
 800118a:	3aff      	subs	r2, #255	@ 0xff
 800118c:	4691      	mov	r9, r2
 800118e:	2e00      	cmp	r6, #0
 8001190:	d042      	beq.n	8001218 <__aeabi_fsub+0x100>
 8001192:	428c      	cmp	r4, r1
 8001194:	d055      	beq.n	8001242 <__aeabi_fsub+0x12a>
 8001196:	464a      	mov	r2, r9
 8001198:	2a00      	cmp	r2, #0
 800119a:	d100      	bne.n	800119e <__aeabi_fsub+0x86>
 800119c:	e09c      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800119e:	2d00      	cmp	r5, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x8c>
 80011a2:	e077      	b.n	8001294 <__aeabi_fsub+0x17c>
 80011a4:	000c      	movs	r4, r1
 80011a6:	0033      	movs	r3, r6
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x98>
 80011ae:	e06e      	b.n	800128e <__aeabi_fsub+0x176>
 80011b0:	2280      	movs	r2, #128	@ 0x80
 80011b2:	03d2      	lsls	r2, r2, #15
 80011b4:	4313      	orrs	r3, r2
 80011b6:	025b      	lsls	r3, r3, #9
 80011b8:	20ff      	movs	r0, #255	@ 0xff
 80011ba:	0a5b      	lsrs	r3, r3, #9
 80011bc:	e024      	b.n	8001208 <__aeabi_fsub+0xf0>
 80011be:	2dff      	cmp	r5, #255	@ 0xff
 80011c0:	d0f2      	beq.n	80011a8 <__aeabi_fsub+0x90>
 80011c2:	2180      	movs	r1, #128	@ 0x80
 80011c4:	04c9      	lsls	r1, r1, #19
 80011c6:	430e      	orrs	r6, r1
 80011c8:	2101      	movs	r1, #1
 80011ca:	2a1b      	cmp	r2, #27
 80011cc:	dc08      	bgt.n	80011e0 <__aeabi_fsub+0xc8>
 80011ce:	0031      	movs	r1, r6
 80011d0:	2020      	movs	r0, #32
 80011d2:	40d1      	lsrs	r1, r2
 80011d4:	1a82      	subs	r2, r0, r2
 80011d6:	4096      	lsls	r6, r2
 80011d8:	0032      	movs	r2, r6
 80011da:	1e50      	subs	r0, r2, #1
 80011dc:	4182      	sbcs	r2, r0
 80011de:	4311      	orrs	r1, r2
 80011e0:	1a5b      	subs	r3, r3, r1
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	d460      	bmi.n	80012a8 <__aeabi_fsub+0x190>
 80011e6:	2107      	movs	r1, #7
 80011e8:	002a      	movs	r2, r5
 80011ea:	4019      	ands	r1, r3
 80011ec:	d057      	beq.n	800129e <__aeabi_fsub+0x186>
 80011ee:	210f      	movs	r1, #15
 80011f0:	4019      	ands	r1, r3
 80011f2:	2904      	cmp	r1, #4
 80011f4:	d000      	beq.n	80011f8 <__aeabi_fsub+0xe0>
 80011f6:	3304      	adds	r3, #4
 80011f8:	0159      	lsls	r1, r3, #5
 80011fa:	d550      	bpl.n	800129e <__aeabi_fsub+0x186>
 80011fc:	1c50      	adds	r0, r2, #1
 80011fe:	2afe      	cmp	r2, #254	@ 0xfe
 8001200:	d045      	beq.n	800128e <__aeabi_fsub+0x176>
 8001202:	019b      	lsls	r3, r3, #6
 8001204:	b2c0      	uxtb	r0, r0
 8001206:	0a5b      	lsrs	r3, r3, #9
 8001208:	05c0      	lsls	r0, r0, #23
 800120a:	4318      	orrs	r0, r3
 800120c:	07e4      	lsls	r4, r4, #31
 800120e:	4320      	orrs	r0, r4
 8001210:	bcc0      	pop	{r6, r7}
 8001212:	46b9      	mov	r9, r7
 8001214:	46b0      	mov	r8, r6
 8001216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001218:	2201      	movs	r2, #1
 800121a:	4051      	eors	r1, r2
 800121c:	428c      	cmp	r4, r1
 800121e:	d1ba      	bne.n	8001196 <__aeabi_fsub+0x7e>
 8001220:	464a      	mov	r2, r9
 8001222:	2a00      	cmp	r2, #0
 8001224:	d010      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001226:	2d00      	cmp	r5, #0
 8001228:	d100      	bne.n	800122c <__aeabi_fsub+0x114>
 800122a:	e098      	b.n	800135e <__aeabi_fsub+0x246>
 800122c:	2300      	movs	r3, #0
 800122e:	e7bb      	b.n	80011a8 <__aeabi_fsub+0x90>
 8001230:	2e00      	cmp	r6, #0
 8001232:	d034      	beq.n	800129e <__aeabi_fsub+0x186>
 8001234:	1e51      	subs	r1, r2, #1
 8001236:	2a01      	cmp	r2, #1
 8001238:	d06e      	beq.n	8001318 <__aeabi_fsub+0x200>
 800123a:	2aff      	cmp	r2, #255	@ 0xff
 800123c:	d0b4      	beq.n	80011a8 <__aeabi_fsub+0x90>
 800123e:	000a      	movs	r2, r1
 8001240:	e79c      	b.n	800117c <__aeabi_fsub+0x64>
 8001242:	2a00      	cmp	r2, #0
 8001244:	d000      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001246:	e088      	b.n	800135a <__aeabi_fsub+0x242>
 8001248:	20fe      	movs	r0, #254	@ 0xfe
 800124a:	1c6a      	adds	r2, r5, #1
 800124c:	4210      	tst	r0, r2
 800124e:	d000      	beq.n	8001252 <__aeabi_fsub+0x13a>
 8001250:	e092      	b.n	8001378 <__aeabi_fsub+0x260>
 8001252:	2d00      	cmp	r5, #0
 8001254:	d000      	beq.n	8001258 <__aeabi_fsub+0x140>
 8001256:	e0a4      	b.n	80013a2 <__aeabi_fsub+0x28a>
 8001258:	2b00      	cmp	r3, #0
 800125a:	d100      	bne.n	800125e <__aeabi_fsub+0x146>
 800125c:	e0cb      	b.n	80013f6 <__aeabi_fsub+0x2de>
 800125e:	2e00      	cmp	r6, #0
 8001260:	d000      	beq.n	8001264 <__aeabi_fsub+0x14c>
 8001262:	e0ca      	b.n	80013fa <__aeabi_fsub+0x2e2>
 8001264:	2200      	movs	r2, #0
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	025b      	lsls	r3, r3, #9
 800126a:	0a5b      	lsrs	r3, r3, #9
 800126c:	b2d0      	uxtb	r0, r2
 800126e:	e7cb      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001270:	0031      	movs	r1, r6
 8001272:	2020      	movs	r0, #32
 8001274:	40d1      	lsrs	r1, r2
 8001276:	1a82      	subs	r2, r0, r2
 8001278:	4096      	lsls	r6, r2
 800127a:	0032      	movs	r2, r6
 800127c:	1e50      	subs	r0, r2, #1
 800127e:	4182      	sbcs	r2, r0
 8001280:	430a      	orrs	r2, r1
 8001282:	189b      	adds	r3, r3, r2
 8001284:	015a      	lsls	r2, r3, #5
 8001286:	d5ae      	bpl.n	80011e6 <__aeabi_fsub+0xce>
 8001288:	1c6a      	adds	r2, r5, #1
 800128a:	2dfe      	cmp	r5, #254	@ 0xfe
 800128c:	d14a      	bne.n	8001324 <__aeabi_fsub+0x20c>
 800128e:	20ff      	movs	r0, #255	@ 0xff
 8001290:	2300      	movs	r3, #0
 8001292:	e7b9      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001294:	22ff      	movs	r2, #255	@ 0xff
 8001296:	2b00      	cmp	r3, #0
 8001298:	d14b      	bne.n	8001332 <__aeabi_fsub+0x21a>
 800129a:	000c      	movs	r4, r1
 800129c:	0033      	movs	r3, r6
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	2aff      	cmp	r2, #255	@ 0xff
 80012a2:	d100      	bne.n	80012a6 <__aeabi_fsub+0x18e>
 80012a4:	e781      	b.n	80011aa <__aeabi_fsub+0x92>
 80012a6:	e7df      	b.n	8001268 <__aeabi_fsub+0x150>
 80012a8:	019f      	lsls	r7, r3, #6
 80012aa:	09bf      	lsrs	r7, r7, #6
 80012ac:	0038      	movs	r0, r7
 80012ae:	f002 f923 	bl	80034f8 <__clzsi2>
 80012b2:	3805      	subs	r0, #5
 80012b4:	4087      	lsls	r7, r0
 80012b6:	4285      	cmp	r5, r0
 80012b8:	dc21      	bgt.n	80012fe <__aeabi_fsub+0x1e6>
 80012ba:	003b      	movs	r3, r7
 80012bc:	2120      	movs	r1, #32
 80012be:	1b42      	subs	r2, r0, r5
 80012c0:	3201      	adds	r2, #1
 80012c2:	40d3      	lsrs	r3, r2
 80012c4:	1a8a      	subs	r2, r1, r2
 80012c6:	4097      	lsls	r7, r2
 80012c8:	1e7a      	subs	r2, r7, #1
 80012ca:	4197      	sbcs	r7, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	433b      	orrs	r3, r7
 80012d0:	0759      	lsls	r1, r3, #29
 80012d2:	d000      	beq.n	80012d6 <__aeabi_fsub+0x1be>
 80012d4:	e78b      	b.n	80011ee <__aeabi_fsub+0xd6>
 80012d6:	e78f      	b.n	80011f8 <__aeabi_fsub+0xe0>
 80012d8:	20fe      	movs	r0, #254	@ 0xfe
 80012da:	1c6a      	adds	r2, r5, #1
 80012dc:	4210      	tst	r0, r2
 80012de:	d112      	bne.n	8001306 <__aeabi_fsub+0x1ee>
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d152      	bne.n	800138a <__aeabi_fsub+0x272>
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d07c      	beq.n	80013e2 <__aeabi_fsub+0x2ca>
 80012e8:	2e00      	cmp	r6, #0
 80012ea:	d0bb      	beq.n	8001264 <__aeabi_fsub+0x14c>
 80012ec:	1b9a      	subs	r2, r3, r6
 80012ee:	0150      	lsls	r0, r2, #5
 80012f0:	d400      	bmi.n	80012f4 <__aeabi_fsub+0x1dc>
 80012f2:	e08b      	b.n	800140c <__aeabi_fsub+0x2f4>
 80012f4:	2401      	movs	r4, #1
 80012f6:	2200      	movs	r2, #0
 80012f8:	1af3      	subs	r3, r6, r3
 80012fa:	400c      	ands	r4, r1
 80012fc:	e7e8      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 80012fe:	4b56      	ldr	r3, [pc, #344]	@ (8001458 <__aeabi_fsub+0x340>)
 8001300:	1a2a      	subs	r2, r5, r0
 8001302:	403b      	ands	r3, r7
 8001304:	e7e4      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001306:	1b9f      	subs	r7, r3, r6
 8001308:	017a      	lsls	r2, r7, #5
 800130a:	d446      	bmi.n	800139a <__aeabi_fsub+0x282>
 800130c:	2f00      	cmp	r7, #0
 800130e:	d1cd      	bne.n	80012ac <__aeabi_fsub+0x194>
 8001310:	2400      	movs	r4, #0
 8001312:	2000      	movs	r0, #0
 8001314:	2300      	movs	r3, #0
 8001316:	e777      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001318:	199b      	adds	r3, r3, r6
 800131a:	2501      	movs	r5, #1
 800131c:	3201      	adds	r2, #1
 800131e:	0159      	lsls	r1, r3, #5
 8001320:	d400      	bmi.n	8001324 <__aeabi_fsub+0x20c>
 8001322:	e760      	b.n	80011e6 <__aeabi_fsub+0xce>
 8001324:	2101      	movs	r1, #1
 8001326:	484d      	ldr	r0, [pc, #308]	@ (800145c <__aeabi_fsub+0x344>)
 8001328:	4019      	ands	r1, r3
 800132a:	085b      	lsrs	r3, r3, #1
 800132c:	4003      	ands	r3, r0
 800132e:	430b      	orrs	r3, r1
 8001330:	e7ce      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001332:	1e57      	subs	r7, r2, #1
 8001334:	2a01      	cmp	r2, #1
 8001336:	d05a      	beq.n	80013ee <__aeabi_fsub+0x2d6>
 8001338:	000c      	movs	r4, r1
 800133a:	2aff      	cmp	r2, #255	@ 0xff
 800133c:	d033      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800133e:	2201      	movs	r2, #1
 8001340:	2f1b      	cmp	r7, #27
 8001342:	dc07      	bgt.n	8001354 <__aeabi_fsub+0x23c>
 8001344:	2120      	movs	r1, #32
 8001346:	1bc9      	subs	r1, r1, r7
 8001348:	001a      	movs	r2, r3
 800134a:	408b      	lsls	r3, r1
 800134c:	40fa      	lsrs	r2, r7
 800134e:	1e59      	subs	r1, r3, #1
 8001350:	418b      	sbcs	r3, r1
 8001352:	431a      	orrs	r2, r3
 8001354:	0005      	movs	r5, r0
 8001356:	1ab3      	subs	r3, r6, r2
 8001358:	e743      	b.n	80011e2 <__aeabi_fsub+0xca>
 800135a:	2d00      	cmp	r5, #0
 800135c:	d123      	bne.n	80013a6 <__aeabi_fsub+0x28e>
 800135e:	22ff      	movs	r2, #255	@ 0xff
 8001360:	2b00      	cmp	r3, #0
 8001362:	d09b      	beq.n	800129c <__aeabi_fsub+0x184>
 8001364:	1e51      	subs	r1, r2, #1
 8001366:	2a01      	cmp	r2, #1
 8001368:	d0d6      	beq.n	8001318 <__aeabi_fsub+0x200>
 800136a:	2aff      	cmp	r2, #255	@ 0xff
 800136c:	d01b      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800136e:	291b      	cmp	r1, #27
 8001370:	dd2c      	ble.n	80013cc <__aeabi_fsub+0x2b4>
 8001372:	0002      	movs	r2, r0
 8001374:	1c73      	adds	r3, r6, #1
 8001376:	e73a      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001378:	2aff      	cmp	r2, #255	@ 0xff
 800137a:	d088      	beq.n	800128e <__aeabi_fsub+0x176>
 800137c:	199b      	adds	r3, r3, r6
 800137e:	085b      	lsrs	r3, r3, #1
 8001380:	0759      	lsls	r1, r3, #29
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x26e>
 8001384:	e733      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001386:	08db      	lsrs	r3, r3, #3
 8001388:	e76e      	b.n	8001268 <__aeabi_fsub+0x150>
 800138a:	2b00      	cmp	r3, #0
 800138c:	d110      	bne.n	80013b0 <__aeabi_fsub+0x298>
 800138e:	2e00      	cmp	r6, #0
 8001390:	d043      	beq.n	800141a <__aeabi_fsub+0x302>
 8001392:	2401      	movs	r4, #1
 8001394:	0033      	movs	r3, r6
 8001396:	400c      	ands	r4, r1
 8001398:	e706      	b.n	80011a8 <__aeabi_fsub+0x90>
 800139a:	2401      	movs	r4, #1
 800139c:	1af7      	subs	r7, r6, r3
 800139e:	400c      	ands	r4, r1
 80013a0:	e784      	b.n	80012ac <__aeabi_fsub+0x194>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d104      	bne.n	80013b0 <__aeabi_fsub+0x298>
 80013a6:	0033      	movs	r3, r6
 80013a8:	e6fe      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013aa:	2501      	movs	r5, #1
 80013ac:	1b9b      	subs	r3, r3, r6
 80013ae:	e718      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013b0:	2e00      	cmp	r6, #0
 80013b2:	d100      	bne.n	80013b6 <__aeabi_fsub+0x29e>
 80013b4:	e6f8      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013b6:	2280      	movs	r2, #128	@ 0x80
 80013b8:	03d2      	lsls	r2, r2, #15
 80013ba:	4297      	cmp	r7, r2
 80013bc:	d304      	bcc.n	80013c8 <__aeabi_fsub+0x2b0>
 80013be:	4594      	cmp	ip, r2
 80013c0:	d202      	bcs.n	80013c8 <__aeabi_fsub+0x2b0>
 80013c2:	2401      	movs	r4, #1
 80013c4:	0033      	movs	r3, r6
 80013c6:	400c      	ands	r4, r1
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	e6f1      	b.n	80011b0 <__aeabi_fsub+0x98>
 80013cc:	001a      	movs	r2, r3
 80013ce:	2520      	movs	r5, #32
 80013d0:	40ca      	lsrs	r2, r1
 80013d2:	1a69      	subs	r1, r5, r1
 80013d4:	408b      	lsls	r3, r1
 80013d6:	1e59      	subs	r1, r3, #1
 80013d8:	418b      	sbcs	r3, r1
 80013da:	4313      	orrs	r3, r2
 80013dc:	0005      	movs	r5, r0
 80013de:	199b      	adds	r3, r3, r6
 80013e0:	e750      	b.n	8001284 <__aeabi_fsub+0x16c>
 80013e2:	2e00      	cmp	r6, #0
 80013e4:	d094      	beq.n	8001310 <__aeabi_fsub+0x1f8>
 80013e6:	2401      	movs	r4, #1
 80013e8:	0033      	movs	r3, r6
 80013ea:	400c      	ands	r4, r1
 80013ec:	e73a      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013ee:	000c      	movs	r4, r1
 80013f0:	2501      	movs	r5, #1
 80013f2:	1af3      	subs	r3, r6, r3
 80013f4:	e6f5      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013f6:	0033      	movs	r3, r6
 80013f8:	e734      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013fa:	199b      	adds	r3, r3, r6
 80013fc:	2200      	movs	r2, #0
 80013fe:	0159      	lsls	r1, r3, #5
 8001400:	d5c1      	bpl.n	8001386 <__aeabi_fsub+0x26e>
 8001402:	4a15      	ldr	r2, [pc, #84]	@ (8001458 <__aeabi_fsub+0x340>)
 8001404:	4013      	ands	r3, r2
 8001406:	08db      	lsrs	r3, r3, #3
 8001408:	2201      	movs	r2, #1
 800140a:	e72d      	b.n	8001268 <__aeabi_fsub+0x150>
 800140c:	2a00      	cmp	r2, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_fsub+0x2fa>
 8001410:	e77e      	b.n	8001310 <__aeabi_fsub+0x1f8>
 8001412:	0013      	movs	r3, r2
 8001414:	2200      	movs	r2, #0
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	e726      	b.n	8001268 <__aeabi_fsub+0x150>
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	2400      	movs	r4, #0
 800141e:	20ff      	movs	r0, #255	@ 0xff
 8001420:	03db      	lsls	r3, r3, #15
 8001422:	e6f1      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d100      	bne.n	800142a <__aeabi_fsub+0x312>
 8001428:	e756      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800142a:	1b47      	subs	r7, r0, r5
 800142c:	003a      	movs	r2, r7
 800142e:	2d00      	cmp	r5, #0
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x31c>
 8001432:	e730      	b.n	8001296 <__aeabi_fsub+0x17e>
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	04d2      	lsls	r2, r2, #19
 8001438:	000c      	movs	r4, r1
 800143a:	4313      	orrs	r3, r2
 800143c:	e77f      	b.n	800133e <__aeabi_fsub+0x226>
 800143e:	2a00      	cmp	r2, #0
 8001440:	d100      	bne.n	8001444 <__aeabi_fsub+0x32c>
 8001442:	e701      	b.n	8001248 <__aeabi_fsub+0x130>
 8001444:	1b41      	subs	r1, r0, r5
 8001446:	2d00      	cmp	r5, #0
 8001448:	d101      	bne.n	800144e <__aeabi_fsub+0x336>
 800144a:	000a      	movs	r2, r1
 800144c:	e788      	b.n	8001360 <__aeabi_fsub+0x248>
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	04d2      	lsls	r2, r2, #19
 8001452:	4313      	orrs	r3, r2
 8001454:	e78b      	b.n	800136e <__aeabi_fsub+0x256>
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	fbffffff 	.word	0xfbffffff
 800145c:	7dffffff 	.word	0x7dffffff

08001460 <__aeabi_fcmpun>:
 8001460:	0243      	lsls	r3, r0, #9
 8001462:	024a      	lsls	r2, r1, #9
 8001464:	0040      	lsls	r0, r0, #1
 8001466:	0049      	lsls	r1, r1, #1
 8001468:	0a5b      	lsrs	r3, r3, #9
 800146a:	0a52      	lsrs	r2, r2, #9
 800146c:	0e09      	lsrs	r1, r1, #24
 800146e:	0e00      	lsrs	r0, r0, #24
 8001470:	28ff      	cmp	r0, #255	@ 0xff
 8001472:	d006      	beq.n	8001482 <__aeabi_fcmpun+0x22>
 8001474:	2000      	movs	r0, #0
 8001476:	29ff      	cmp	r1, #255	@ 0xff
 8001478:	d102      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 800147a:	1e53      	subs	r3, r2, #1
 800147c:	419a      	sbcs	r2, r3
 800147e:	0010      	movs	r0, r2
 8001480:	4770      	bx	lr
 8001482:	38fe      	subs	r0, #254	@ 0xfe
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1fb      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 8001488:	e7f4      	b.n	8001474 <__aeabi_fcmpun+0x14>
 800148a:	46c0      	nop			@ (mov r8, r8)

0800148c <__aeabi_f2iz>:
 800148c:	0241      	lsls	r1, r0, #9
 800148e:	0042      	lsls	r2, r0, #1
 8001490:	0fc3      	lsrs	r3, r0, #31
 8001492:	0a49      	lsrs	r1, r1, #9
 8001494:	2000      	movs	r0, #0
 8001496:	0e12      	lsrs	r2, r2, #24
 8001498:	2a7e      	cmp	r2, #126	@ 0x7e
 800149a:	dd03      	ble.n	80014a4 <__aeabi_f2iz+0x18>
 800149c:	2a9d      	cmp	r2, #157	@ 0x9d
 800149e:	dd02      	ble.n	80014a6 <__aeabi_f2iz+0x1a>
 80014a0:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <__aeabi_f2iz+0x3c>)
 80014a2:	1898      	adds	r0, r3, r2
 80014a4:	4770      	bx	lr
 80014a6:	2080      	movs	r0, #128	@ 0x80
 80014a8:	0400      	lsls	r0, r0, #16
 80014aa:	4301      	orrs	r1, r0
 80014ac:	2a95      	cmp	r2, #149	@ 0x95
 80014ae:	dc07      	bgt.n	80014c0 <__aeabi_f2iz+0x34>
 80014b0:	2096      	movs	r0, #150	@ 0x96
 80014b2:	1a82      	subs	r2, r0, r2
 80014b4:	40d1      	lsrs	r1, r2
 80014b6:	4248      	negs	r0, r1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f3      	bne.n	80014a4 <__aeabi_f2iz+0x18>
 80014bc:	0008      	movs	r0, r1
 80014be:	e7f1      	b.n	80014a4 <__aeabi_f2iz+0x18>
 80014c0:	3a96      	subs	r2, #150	@ 0x96
 80014c2:	4091      	lsls	r1, r2
 80014c4:	e7f7      	b.n	80014b6 <__aeabi_f2iz+0x2a>
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	7fffffff 	.word	0x7fffffff

080014cc <__aeabi_i2f>:
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d013      	beq.n	80014fa <__aeabi_i2f+0x2e>
 80014d2:	17c3      	asrs	r3, r0, #31
 80014d4:	18c5      	adds	r5, r0, r3
 80014d6:	405d      	eors	r5, r3
 80014d8:	0fc4      	lsrs	r4, r0, #31
 80014da:	0028      	movs	r0, r5
 80014dc:	f002 f80c 	bl	80034f8 <__clzsi2>
 80014e0:	239e      	movs	r3, #158	@ 0x9e
 80014e2:	0001      	movs	r1, r0
 80014e4:	1a1b      	subs	r3, r3, r0
 80014e6:	2b96      	cmp	r3, #150	@ 0x96
 80014e8:	dc0f      	bgt.n	800150a <__aeabi_i2f+0x3e>
 80014ea:	2808      	cmp	r0, #8
 80014ec:	d034      	beq.n	8001558 <__aeabi_i2f+0x8c>
 80014ee:	3908      	subs	r1, #8
 80014f0:	408d      	lsls	r5, r1
 80014f2:	026d      	lsls	r5, r5, #9
 80014f4:	0a6d      	lsrs	r5, r5, #9
 80014f6:	b2d8      	uxtb	r0, r3
 80014f8:	e002      	b.n	8001500 <__aeabi_i2f+0x34>
 80014fa:	2400      	movs	r4, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	2500      	movs	r5, #0
 8001500:	05c0      	lsls	r0, r0, #23
 8001502:	4328      	orrs	r0, r5
 8001504:	07e4      	lsls	r4, r4, #31
 8001506:	4320      	orrs	r0, r4
 8001508:	bd70      	pop	{r4, r5, r6, pc}
 800150a:	2b99      	cmp	r3, #153	@ 0x99
 800150c:	dc16      	bgt.n	800153c <__aeabi_i2f+0x70>
 800150e:	1f42      	subs	r2, r0, #5
 8001510:	2805      	cmp	r0, #5
 8001512:	d000      	beq.n	8001516 <__aeabi_i2f+0x4a>
 8001514:	4095      	lsls	r5, r2
 8001516:	002a      	movs	r2, r5
 8001518:	4811      	ldr	r0, [pc, #68]	@ (8001560 <__aeabi_i2f+0x94>)
 800151a:	4002      	ands	r2, r0
 800151c:	076e      	lsls	r6, r5, #29
 800151e:	d009      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001520:	260f      	movs	r6, #15
 8001522:	4035      	ands	r5, r6
 8001524:	2d04      	cmp	r5, #4
 8001526:	d005      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001528:	3204      	adds	r2, #4
 800152a:	0155      	lsls	r5, r2, #5
 800152c:	d502      	bpl.n	8001534 <__aeabi_i2f+0x68>
 800152e:	239f      	movs	r3, #159	@ 0x9f
 8001530:	4002      	ands	r2, r0
 8001532:	1a5b      	subs	r3, r3, r1
 8001534:	0192      	lsls	r2, r2, #6
 8001536:	0a55      	lsrs	r5, r2, #9
 8001538:	b2d8      	uxtb	r0, r3
 800153a:	e7e1      	b.n	8001500 <__aeabi_i2f+0x34>
 800153c:	2205      	movs	r2, #5
 800153e:	1a12      	subs	r2, r2, r0
 8001540:	0028      	movs	r0, r5
 8001542:	40d0      	lsrs	r0, r2
 8001544:	0002      	movs	r2, r0
 8001546:	0008      	movs	r0, r1
 8001548:	301b      	adds	r0, #27
 800154a:	4085      	lsls	r5, r0
 800154c:	0028      	movs	r0, r5
 800154e:	1e45      	subs	r5, r0, #1
 8001550:	41a8      	sbcs	r0, r5
 8001552:	4302      	orrs	r2, r0
 8001554:	0015      	movs	r5, r2
 8001556:	e7de      	b.n	8001516 <__aeabi_i2f+0x4a>
 8001558:	026d      	lsls	r5, r5, #9
 800155a:	2096      	movs	r0, #150	@ 0x96
 800155c:	0a6d      	lsrs	r5, r5, #9
 800155e:	e7cf      	b.n	8001500 <__aeabi_i2f+0x34>
 8001560:	fbffffff 	.word	0xfbffffff

08001564 <__aeabi_ui2f>:
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	1e04      	subs	r4, r0, #0
 8001568:	d00e      	beq.n	8001588 <__aeabi_ui2f+0x24>
 800156a:	f001 ffc5 	bl	80034f8 <__clzsi2>
 800156e:	239e      	movs	r3, #158	@ 0x9e
 8001570:	0001      	movs	r1, r0
 8001572:	1a1b      	subs	r3, r3, r0
 8001574:	2b96      	cmp	r3, #150	@ 0x96
 8001576:	dc0c      	bgt.n	8001592 <__aeabi_ui2f+0x2e>
 8001578:	2808      	cmp	r0, #8
 800157a:	d02f      	beq.n	80015dc <__aeabi_ui2f+0x78>
 800157c:	3908      	subs	r1, #8
 800157e:	408c      	lsls	r4, r1
 8001580:	0264      	lsls	r4, r4, #9
 8001582:	0a64      	lsrs	r4, r4, #9
 8001584:	b2d8      	uxtb	r0, r3
 8001586:	e001      	b.n	800158c <__aeabi_ui2f+0x28>
 8001588:	2000      	movs	r0, #0
 800158a:	2400      	movs	r4, #0
 800158c:	05c0      	lsls	r0, r0, #23
 800158e:	4320      	orrs	r0, r4
 8001590:	bd70      	pop	{r4, r5, r6, pc}
 8001592:	2b99      	cmp	r3, #153	@ 0x99
 8001594:	dc16      	bgt.n	80015c4 <__aeabi_ui2f+0x60>
 8001596:	1f42      	subs	r2, r0, #5
 8001598:	2805      	cmp	r0, #5
 800159a:	d000      	beq.n	800159e <__aeabi_ui2f+0x3a>
 800159c:	4094      	lsls	r4, r2
 800159e:	0022      	movs	r2, r4
 80015a0:	4810      	ldr	r0, [pc, #64]	@ (80015e4 <__aeabi_ui2f+0x80>)
 80015a2:	4002      	ands	r2, r0
 80015a4:	0765      	lsls	r5, r4, #29
 80015a6:	d009      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015a8:	250f      	movs	r5, #15
 80015aa:	402c      	ands	r4, r5
 80015ac:	2c04      	cmp	r4, #4
 80015ae:	d005      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015b0:	3204      	adds	r2, #4
 80015b2:	0154      	lsls	r4, r2, #5
 80015b4:	d502      	bpl.n	80015bc <__aeabi_ui2f+0x58>
 80015b6:	239f      	movs	r3, #159	@ 0x9f
 80015b8:	4002      	ands	r2, r0
 80015ba:	1a5b      	subs	r3, r3, r1
 80015bc:	0192      	lsls	r2, r2, #6
 80015be:	0a54      	lsrs	r4, r2, #9
 80015c0:	b2d8      	uxtb	r0, r3
 80015c2:	e7e3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015c4:	0002      	movs	r2, r0
 80015c6:	0020      	movs	r0, r4
 80015c8:	321b      	adds	r2, #27
 80015ca:	4090      	lsls	r0, r2
 80015cc:	0002      	movs	r2, r0
 80015ce:	1e50      	subs	r0, r2, #1
 80015d0:	4182      	sbcs	r2, r0
 80015d2:	2005      	movs	r0, #5
 80015d4:	1a40      	subs	r0, r0, r1
 80015d6:	40c4      	lsrs	r4, r0
 80015d8:	4314      	orrs	r4, r2
 80015da:	e7e0      	b.n	800159e <__aeabi_ui2f+0x3a>
 80015dc:	0264      	lsls	r4, r4, #9
 80015de:	2096      	movs	r0, #150	@ 0x96
 80015e0:	0a64      	lsrs	r4, r4, #9
 80015e2:	e7d3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015e4:	fbffffff 	.word	0xfbffffff

080015e8 <__aeabi_dadd>:
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	4657      	mov	r7, sl
 80015ec:	464e      	mov	r6, r9
 80015ee:	4645      	mov	r5, r8
 80015f0:	46de      	mov	lr, fp
 80015f2:	b5e0      	push	{r5, r6, r7, lr}
 80015f4:	b083      	sub	sp, #12
 80015f6:	9000      	str	r0, [sp, #0]
 80015f8:	9101      	str	r1, [sp, #4]
 80015fa:	030c      	lsls	r4, r1, #12
 80015fc:	004f      	lsls	r7, r1, #1
 80015fe:	0fce      	lsrs	r6, r1, #31
 8001600:	0a61      	lsrs	r1, r4, #9
 8001602:	9c00      	ldr	r4, [sp, #0]
 8001604:	031d      	lsls	r5, r3, #12
 8001606:	0f64      	lsrs	r4, r4, #29
 8001608:	430c      	orrs	r4, r1
 800160a:	9900      	ldr	r1, [sp, #0]
 800160c:	9200      	str	r2, [sp, #0]
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	00c8      	lsls	r0, r1, #3
 8001612:	0059      	lsls	r1, r3, #1
 8001614:	0d4b      	lsrs	r3, r1, #21
 8001616:	4699      	mov	r9, r3
 8001618:	9a00      	ldr	r2, [sp, #0]
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	0a6d      	lsrs	r5, r5, #9
 800161e:	0fd9      	lsrs	r1, r3, #31
 8001620:	0f53      	lsrs	r3, r2, #29
 8001622:	432b      	orrs	r3, r5
 8001624:	469a      	mov	sl, r3
 8001626:	9b00      	ldr	r3, [sp, #0]
 8001628:	0d7f      	lsrs	r7, r7, #21
 800162a:	00da      	lsls	r2, r3, #3
 800162c:	4694      	mov	ip, r2
 800162e:	464a      	mov	r2, r9
 8001630:	46b0      	mov	r8, r6
 8001632:	1aba      	subs	r2, r7, r2
 8001634:	428e      	cmp	r6, r1
 8001636:	d100      	bne.n	800163a <__aeabi_dadd+0x52>
 8001638:	e0b0      	b.n	800179c <__aeabi_dadd+0x1b4>
 800163a:	2a00      	cmp	r2, #0
 800163c:	dc00      	bgt.n	8001640 <__aeabi_dadd+0x58>
 800163e:	e078      	b.n	8001732 <__aeabi_dadd+0x14a>
 8001640:	4649      	mov	r1, r9
 8001642:	2900      	cmp	r1, #0
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x60>
 8001646:	e0e9      	b.n	800181c <__aeabi_dadd+0x234>
 8001648:	49c9      	ldr	r1, [pc, #804]	@ (8001970 <__aeabi_dadd+0x388>)
 800164a:	428f      	cmp	r7, r1
 800164c:	d100      	bne.n	8001650 <__aeabi_dadd+0x68>
 800164e:	e195      	b.n	800197c <__aeabi_dadd+0x394>
 8001650:	2501      	movs	r5, #1
 8001652:	2a38      	cmp	r2, #56	@ 0x38
 8001654:	dc16      	bgt.n	8001684 <__aeabi_dadd+0x9c>
 8001656:	2180      	movs	r1, #128	@ 0x80
 8001658:	4653      	mov	r3, sl
 800165a:	0409      	lsls	r1, r1, #16
 800165c:	430b      	orrs	r3, r1
 800165e:	469a      	mov	sl, r3
 8001660:	2a1f      	cmp	r2, #31
 8001662:	dd00      	ble.n	8001666 <__aeabi_dadd+0x7e>
 8001664:	e1e7      	b.n	8001a36 <__aeabi_dadd+0x44e>
 8001666:	2120      	movs	r1, #32
 8001668:	4655      	mov	r5, sl
 800166a:	1a8b      	subs	r3, r1, r2
 800166c:	4661      	mov	r1, ip
 800166e:	409d      	lsls	r5, r3
 8001670:	40d1      	lsrs	r1, r2
 8001672:	430d      	orrs	r5, r1
 8001674:	4661      	mov	r1, ip
 8001676:	4099      	lsls	r1, r3
 8001678:	1e4b      	subs	r3, r1, #1
 800167a:	4199      	sbcs	r1, r3
 800167c:	4653      	mov	r3, sl
 800167e:	40d3      	lsrs	r3, r2
 8001680:	430d      	orrs	r5, r1
 8001682:	1ae4      	subs	r4, r4, r3
 8001684:	1b45      	subs	r5, r0, r5
 8001686:	42a8      	cmp	r0, r5
 8001688:	4180      	sbcs	r0, r0
 800168a:	4240      	negs	r0, r0
 800168c:	1a24      	subs	r4, r4, r0
 800168e:	0223      	lsls	r3, r4, #8
 8001690:	d400      	bmi.n	8001694 <__aeabi_dadd+0xac>
 8001692:	e10f      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001694:	0264      	lsls	r4, r4, #9
 8001696:	0a64      	lsrs	r4, r4, #9
 8001698:	2c00      	cmp	r4, #0
 800169a:	d100      	bne.n	800169e <__aeabi_dadd+0xb6>
 800169c:	e139      	b.n	8001912 <__aeabi_dadd+0x32a>
 800169e:	0020      	movs	r0, r4
 80016a0:	f001 ff2a 	bl	80034f8 <__clzsi2>
 80016a4:	0003      	movs	r3, r0
 80016a6:	3b08      	subs	r3, #8
 80016a8:	2120      	movs	r1, #32
 80016aa:	0028      	movs	r0, r5
 80016ac:	1aca      	subs	r2, r1, r3
 80016ae:	40d0      	lsrs	r0, r2
 80016b0:	409c      	lsls	r4, r3
 80016b2:	0002      	movs	r2, r0
 80016b4:	409d      	lsls	r5, r3
 80016b6:	4322      	orrs	r2, r4
 80016b8:	429f      	cmp	r7, r3
 80016ba:	dd00      	ble.n	80016be <__aeabi_dadd+0xd6>
 80016bc:	e173      	b.n	80019a6 <__aeabi_dadd+0x3be>
 80016be:	1bd8      	subs	r0, r3, r7
 80016c0:	3001      	adds	r0, #1
 80016c2:	1a09      	subs	r1, r1, r0
 80016c4:	002c      	movs	r4, r5
 80016c6:	408d      	lsls	r5, r1
 80016c8:	40c4      	lsrs	r4, r0
 80016ca:	1e6b      	subs	r3, r5, #1
 80016cc:	419d      	sbcs	r5, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	40c2      	lsrs	r2, r0
 80016d2:	408b      	lsls	r3, r1
 80016d4:	4325      	orrs	r5, r4
 80016d6:	2700      	movs	r7, #0
 80016d8:	0014      	movs	r4, r2
 80016da:	431d      	orrs	r5, r3
 80016dc:	076b      	lsls	r3, r5, #29
 80016de:	d009      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e0:	230f      	movs	r3, #15
 80016e2:	402b      	ands	r3, r5
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d005      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e8:	1d2b      	adds	r3, r5, #4
 80016ea:	42ab      	cmp	r3, r5
 80016ec:	41ad      	sbcs	r5, r5
 80016ee:	426d      	negs	r5, r5
 80016f0:	1964      	adds	r4, r4, r5
 80016f2:	001d      	movs	r5, r3
 80016f4:	0223      	lsls	r3, r4, #8
 80016f6:	d400      	bmi.n	80016fa <__aeabi_dadd+0x112>
 80016f8:	e12d      	b.n	8001956 <__aeabi_dadd+0x36e>
 80016fa:	4a9d      	ldr	r2, [pc, #628]	@ (8001970 <__aeabi_dadd+0x388>)
 80016fc:	3701      	adds	r7, #1
 80016fe:	4297      	cmp	r7, r2
 8001700:	d100      	bne.n	8001704 <__aeabi_dadd+0x11c>
 8001702:	e0d3      	b.n	80018ac <__aeabi_dadd+0x2c4>
 8001704:	4646      	mov	r6, r8
 8001706:	499b      	ldr	r1, [pc, #620]	@ (8001974 <__aeabi_dadd+0x38c>)
 8001708:	08ed      	lsrs	r5, r5, #3
 800170a:	4021      	ands	r1, r4
 800170c:	074a      	lsls	r2, r1, #29
 800170e:	432a      	orrs	r2, r5
 8001710:	057c      	lsls	r4, r7, #21
 8001712:	024d      	lsls	r5, r1, #9
 8001714:	0b2d      	lsrs	r5, r5, #12
 8001716:	0d64      	lsrs	r4, r4, #21
 8001718:	0524      	lsls	r4, r4, #20
 800171a:	432c      	orrs	r4, r5
 800171c:	07f6      	lsls	r6, r6, #31
 800171e:	4334      	orrs	r4, r6
 8001720:	0010      	movs	r0, r2
 8001722:	0021      	movs	r1, r4
 8001724:	b003      	add	sp, #12
 8001726:	bcf0      	pop	{r4, r5, r6, r7}
 8001728:	46bb      	mov	fp, r7
 800172a:	46b2      	mov	sl, r6
 800172c:	46a9      	mov	r9, r5
 800172e:	46a0      	mov	r8, r4
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001732:	2a00      	cmp	r2, #0
 8001734:	d100      	bne.n	8001738 <__aeabi_dadd+0x150>
 8001736:	e084      	b.n	8001842 <__aeabi_dadd+0x25a>
 8001738:	464a      	mov	r2, r9
 800173a:	1bd2      	subs	r2, r2, r7
 800173c:	2f00      	cmp	r7, #0
 800173e:	d000      	beq.n	8001742 <__aeabi_dadd+0x15a>
 8001740:	e16d      	b.n	8001a1e <__aeabi_dadd+0x436>
 8001742:	0025      	movs	r5, r4
 8001744:	4305      	orrs	r5, r0
 8001746:	d100      	bne.n	800174a <__aeabi_dadd+0x162>
 8001748:	e127      	b.n	800199a <__aeabi_dadd+0x3b2>
 800174a:	1e56      	subs	r6, r2, #1
 800174c:	2a01      	cmp	r2, #1
 800174e:	d100      	bne.n	8001752 <__aeabi_dadd+0x16a>
 8001750:	e23b      	b.n	8001bca <__aeabi_dadd+0x5e2>
 8001752:	4d87      	ldr	r5, [pc, #540]	@ (8001970 <__aeabi_dadd+0x388>)
 8001754:	42aa      	cmp	r2, r5
 8001756:	d100      	bne.n	800175a <__aeabi_dadd+0x172>
 8001758:	e26a      	b.n	8001c30 <__aeabi_dadd+0x648>
 800175a:	2501      	movs	r5, #1
 800175c:	2e38      	cmp	r6, #56	@ 0x38
 800175e:	dc12      	bgt.n	8001786 <__aeabi_dadd+0x19e>
 8001760:	0032      	movs	r2, r6
 8001762:	2a1f      	cmp	r2, #31
 8001764:	dd00      	ble.n	8001768 <__aeabi_dadd+0x180>
 8001766:	e1f8      	b.n	8001b5a <__aeabi_dadd+0x572>
 8001768:	2620      	movs	r6, #32
 800176a:	0025      	movs	r5, r4
 800176c:	1ab6      	subs	r6, r6, r2
 800176e:	0007      	movs	r7, r0
 8001770:	4653      	mov	r3, sl
 8001772:	40b0      	lsls	r0, r6
 8001774:	40d4      	lsrs	r4, r2
 8001776:	40b5      	lsls	r5, r6
 8001778:	40d7      	lsrs	r7, r2
 800177a:	1e46      	subs	r6, r0, #1
 800177c:	41b0      	sbcs	r0, r6
 800177e:	1b1b      	subs	r3, r3, r4
 8001780:	469a      	mov	sl, r3
 8001782:	433d      	orrs	r5, r7
 8001784:	4305      	orrs	r5, r0
 8001786:	4662      	mov	r2, ip
 8001788:	1b55      	subs	r5, r2, r5
 800178a:	45ac      	cmp	ip, r5
 800178c:	4192      	sbcs	r2, r2
 800178e:	4653      	mov	r3, sl
 8001790:	4252      	negs	r2, r2
 8001792:	000e      	movs	r6, r1
 8001794:	464f      	mov	r7, r9
 8001796:	4688      	mov	r8, r1
 8001798:	1a9c      	subs	r4, r3, r2
 800179a:	e778      	b.n	800168e <__aeabi_dadd+0xa6>
 800179c:	2a00      	cmp	r2, #0
 800179e:	dc00      	bgt.n	80017a2 <__aeabi_dadd+0x1ba>
 80017a0:	e08e      	b.n	80018c0 <__aeabi_dadd+0x2d8>
 80017a2:	4649      	mov	r1, r9
 80017a4:	2900      	cmp	r1, #0
 80017a6:	d175      	bne.n	8001894 <__aeabi_dadd+0x2ac>
 80017a8:	4661      	mov	r1, ip
 80017aa:	4653      	mov	r3, sl
 80017ac:	4319      	orrs	r1, r3
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dadd+0x1ca>
 80017b0:	e0f6      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80017b2:	1e51      	subs	r1, r2, #1
 80017b4:	2a01      	cmp	r2, #1
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x1d2>
 80017b8:	e191      	b.n	8001ade <__aeabi_dadd+0x4f6>
 80017ba:	4d6d      	ldr	r5, [pc, #436]	@ (8001970 <__aeabi_dadd+0x388>)
 80017bc:	42aa      	cmp	r2, r5
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x1da>
 80017c0:	e0dc      	b.n	800197c <__aeabi_dadd+0x394>
 80017c2:	2501      	movs	r5, #1
 80017c4:	2938      	cmp	r1, #56	@ 0x38
 80017c6:	dc14      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80017c8:	000a      	movs	r2, r1
 80017ca:	2a1f      	cmp	r2, #31
 80017cc:	dd00      	ble.n	80017d0 <__aeabi_dadd+0x1e8>
 80017ce:	e1a2      	b.n	8001b16 <__aeabi_dadd+0x52e>
 80017d0:	2120      	movs	r1, #32
 80017d2:	4653      	mov	r3, sl
 80017d4:	1a89      	subs	r1, r1, r2
 80017d6:	408b      	lsls	r3, r1
 80017d8:	001d      	movs	r5, r3
 80017da:	4663      	mov	r3, ip
 80017dc:	40d3      	lsrs	r3, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	4663      	mov	r3, ip
 80017e2:	408b      	lsls	r3, r1
 80017e4:	0019      	movs	r1, r3
 80017e6:	1e4b      	subs	r3, r1, #1
 80017e8:	4199      	sbcs	r1, r3
 80017ea:	4653      	mov	r3, sl
 80017ec:	40d3      	lsrs	r3, r2
 80017ee:	430d      	orrs	r5, r1
 80017f0:	18e4      	adds	r4, r4, r3
 80017f2:	182d      	adds	r5, r5, r0
 80017f4:	4285      	cmp	r5, r0
 80017f6:	4180      	sbcs	r0, r0
 80017f8:	4240      	negs	r0, r0
 80017fa:	1824      	adds	r4, r4, r0
 80017fc:	0223      	lsls	r3, r4, #8
 80017fe:	d559      	bpl.n	80018b4 <__aeabi_dadd+0x2cc>
 8001800:	4b5b      	ldr	r3, [pc, #364]	@ (8001970 <__aeabi_dadd+0x388>)
 8001802:	3701      	adds	r7, #1
 8001804:	429f      	cmp	r7, r3
 8001806:	d051      	beq.n	80018ac <__aeabi_dadd+0x2c4>
 8001808:	2101      	movs	r1, #1
 800180a:	4b5a      	ldr	r3, [pc, #360]	@ (8001974 <__aeabi_dadd+0x38c>)
 800180c:	086a      	lsrs	r2, r5, #1
 800180e:	401c      	ands	r4, r3
 8001810:	4029      	ands	r1, r5
 8001812:	430a      	orrs	r2, r1
 8001814:	07e5      	lsls	r5, r4, #31
 8001816:	4315      	orrs	r5, r2
 8001818:	0864      	lsrs	r4, r4, #1
 800181a:	e75f      	b.n	80016dc <__aeabi_dadd+0xf4>
 800181c:	4661      	mov	r1, ip
 800181e:	4653      	mov	r3, sl
 8001820:	4319      	orrs	r1, r3
 8001822:	d100      	bne.n	8001826 <__aeabi_dadd+0x23e>
 8001824:	e0bc      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001826:	1e51      	subs	r1, r2, #1
 8001828:	2a01      	cmp	r2, #1
 800182a:	d100      	bne.n	800182e <__aeabi_dadd+0x246>
 800182c:	e164      	b.n	8001af8 <__aeabi_dadd+0x510>
 800182e:	4d50      	ldr	r5, [pc, #320]	@ (8001970 <__aeabi_dadd+0x388>)
 8001830:	42aa      	cmp	r2, r5
 8001832:	d100      	bne.n	8001836 <__aeabi_dadd+0x24e>
 8001834:	e16a      	b.n	8001b0c <__aeabi_dadd+0x524>
 8001836:	2501      	movs	r5, #1
 8001838:	2938      	cmp	r1, #56	@ 0x38
 800183a:	dd00      	ble.n	800183e <__aeabi_dadd+0x256>
 800183c:	e722      	b.n	8001684 <__aeabi_dadd+0x9c>
 800183e:	000a      	movs	r2, r1
 8001840:	e70e      	b.n	8001660 <__aeabi_dadd+0x78>
 8001842:	4a4d      	ldr	r2, [pc, #308]	@ (8001978 <__aeabi_dadd+0x390>)
 8001844:	1c7d      	adds	r5, r7, #1
 8001846:	4215      	tst	r5, r2
 8001848:	d000      	beq.n	800184c <__aeabi_dadd+0x264>
 800184a:	e0d0      	b.n	80019ee <__aeabi_dadd+0x406>
 800184c:	0025      	movs	r5, r4
 800184e:	4662      	mov	r2, ip
 8001850:	4653      	mov	r3, sl
 8001852:	4305      	orrs	r5, r0
 8001854:	431a      	orrs	r2, r3
 8001856:	2f00      	cmp	r7, #0
 8001858:	d000      	beq.n	800185c <__aeabi_dadd+0x274>
 800185a:	e137      	b.n	8001acc <__aeabi_dadd+0x4e4>
 800185c:	2d00      	cmp	r5, #0
 800185e:	d100      	bne.n	8001862 <__aeabi_dadd+0x27a>
 8001860:	e1a8      	b.n	8001bb4 <__aeabi_dadd+0x5cc>
 8001862:	2a00      	cmp	r2, #0
 8001864:	d100      	bne.n	8001868 <__aeabi_dadd+0x280>
 8001866:	e16a      	b.n	8001b3e <__aeabi_dadd+0x556>
 8001868:	4663      	mov	r3, ip
 800186a:	1ac5      	subs	r5, r0, r3
 800186c:	4653      	mov	r3, sl
 800186e:	1ae2      	subs	r2, r4, r3
 8001870:	42a8      	cmp	r0, r5
 8001872:	419b      	sbcs	r3, r3
 8001874:	425b      	negs	r3, r3
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	021a      	lsls	r2, r3, #8
 800187a:	d400      	bmi.n	800187e <__aeabi_dadd+0x296>
 800187c:	e203      	b.n	8001c86 <__aeabi_dadd+0x69e>
 800187e:	4663      	mov	r3, ip
 8001880:	1a1d      	subs	r5, r3, r0
 8001882:	45ac      	cmp	ip, r5
 8001884:	4192      	sbcs	r2, r2
 8001886:	4653      	mov	r3, sl
 8001888:	4252      	negs	r2, r2
 800188a:	1b1c      	subs	r4, r3, r4
 800188c:	000e      	movs	r6, r1
 800188e:	4688      	mov	r8, r1
 8001890:	1aa4      	subs	r4, r4, r2
 8001892:	e723      	b.n	80016dc <__aeabi_dadd+0xf4>
 8001894:	4936      	ldr	r1, [pc, #216]	@ (8001970 <__aeabi_dadd+0x388>)
 8001896:	428f      	cmp	r7, r1
 8001898:	d070      	beq.n	800197c <__aeabi_dadd+0x394>
 800189a:	2501      	movs	r5, #1
 800189c:	2a38      	cmp	r2, #56	@ 0x38
 800189e:	dca8      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80018a0:	2180      	movs	r1, #128	@ 0x80
 80018a2:	4653      	mov	r3, sl
 80018a4:	0409      	lsls	r1, r1, #16
 80018a6:	430b      	orrs	r3, r1
 80018a8:	469a      	mov	sl, r3
 80018aa:	e78e      	b.n	80017ca <__aeabi_dadd+0x1e2>
 80018ac:	003c      	movs	r4, r7
 80018ae:	2500      	movs	r5, #0
 80018b0:	2200      	movs	r2, #0
 80018b2:	e731      	b.n	8001718 <__aeabi_dadd+0x130>
 80018b4:	2307      	movs	r3, #7
 80018b6:	402b      	ands	r3, r5
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d000      	beq.n	80018be <__aeabi_dadd+0x2d6>
 80018bc:	e710      	b.n	80016e0 <__aeabi_dadd+0xf8>
 80018be:	e093      	b.n	80019e8 <__aeabi_dadd+0x400>
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	d074      	beq.n	80019ae <__aeabi_dadd+0x3c6>
 80018c4:	464a      	mov	r2, r9
 80018c6:	1bd2      	subs	r2, r2, r7
 80018c8:	2f00      	cmp	r7, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_dadd+0x2e6>
 80018cc:	e0c7      	b.n	8001a5e <__aeabi_dadd+0x476>
 80018ce:	4928      	ldr	r1, [pc, #160]	@ (8001970 <__aeabi_dadd+0x388>)
 80018d0:	4589      	cmp	r9, r1
 80018d2:	d100      	bne.n	80018d6 <__aeabi_dadd+0x2ee>
 80018d4:	e185      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 80018d6:	2501      	movs	r5, #1
 80018d8:	2a38      	cmp	r2, #56	@ 0x38
 80018da:	dc12      	bgt.n	8001902 <__aeabi_dadd+0x31a>
 80018dc:	2180      	movs	r1, #128	@ 0x80
 80018de:	0409      	lsls	r1, r1, #16
 80018e0:	430c      	orrs	r4, r1
 80018e2:	2a1f      	cmp	r2, #31
 80018e4:	dd00      	ble.n	80018e8 <__aeabi_dadd+0x300>
 80018e6:	e1ab      	b.n	8001c40 <__aeabi_dadd+0x658>
 80018e8:	2120      	movs	r1, #32
 80018ea:	0025      	movs	r5, r4
 80018ec:	1a89      	subs	r1, r1, r2
 80018ee:	0007      	movs	r7, r0
 80018f0:	4088      	lsls	r0, r1
 80018f2:	408d      	lsls	r5, r1
 80018f4:	40d7      	lsrs	r7, r2
 80018f6:	1e41      	subs	r1, r0, #1
 80018f8:	4188      	sbcs	r0, r1
 80018fa:	40d4      	lsrs	r4, r2
 80018fc:	433d      	orrs	r5, r7
 80018fe:	4305      	orrs	r5, r0
 8001900:	44a2      	add	sl, r4
 8001902:	4465      	add	r5, ip
 8001904:	4565      	cmp	r5, ip
 8001906:	4192      	sbcs	r2, r2
 8001908:	4252      	negs	r2, r2
 800190a:	4452      	add	r2, sl
 800190c:	0014      	movs	r4, r2
 800190e:	464f      	mov	r7, r9
 8001910:	e774      	b.n	80017fc <__aeabi_dadd+0x214>
 8001912:	0028      	movs	r0, r5
 8001914:	f001 fdf0 	bl	80034f8 <__clzsi2>
 8001918:	0003      	movs	r3, r0
 800191a:	3318      	adds	r3, #24
 800191c:	2b1f      	cmp	r3, #31
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dadd+0x33a>
 8001920:	e6c2      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001922:	002a      	movs	r2, r5
 8001924:	3808      	subs	r0, #8
 8001926:	4082      	lsls	r2, r0
 8001928:	429f      	cmp	r7, r3
 800192a:	dd00      	ble.n	800192e <__aeabi_dadd+0x346>
 800192c:	e0a9      	b.n	8001a82 <__aeabi_dadd+0x49a>
 800192e:	1bdb      	subs	r3, r3, r7
 8001930:	1c58      	adds	r0, r3, #1
 8001932:	281f      	cmp	r0, #31
 8001934:	dc00      	bgt.n	8001938 <__aeabi_dadd+0x350>
 8001936:	e1ac      	b.n	8001c92 <__aeabi_dadd+0x6aa>
 8001938:	0015      	movs	r5, r2
 800193a:	3b1f      	subs	r3, #31
 800193c:	40dd      	lsrs	r5, r3
 800193e:	2820      	cmp	r0, #32
 8001940:	d005      	beq.n	800194e <__aeabi_dadd+0x366>
 8001942:	2340      	movs	r3, #64	@ 0x40
 8001944:	1a1b      	subs	r3, r3, r0
 8001946:	409a      	lsls	r2, r3
 8001948:	1e53      	subs	r3, r2, #1
 800194a:	419a      	sbcs	r2, r3
 800194c:	4315      	orrs	r5, r2
 800194e:	2307      	movs	r3, #7
 8001950:	2700      	movs	r7, #0
 8001952:	402b      	ands	r3, r5
 8001954:	e7b0      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001956:	08ed      	lsrs	r5, r5, #3
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <__aeabi_dadd+0x388>)
 800195a:	0762      	lsls	r2, r4, #29
 800195c:	432a      	orrs	r2, r5
 800195e:	08e4      	lsrs	r4, r4, #3
 8001960:	429f      	cmp	r7, r3
 8001962:	d00f      	beq.n	8001984 <__aeabi_dadd+0x39c>
 8001964:	0324      	lsls	r4, r4, #12
 8001966:	0b25      	lsrs	r5, r4, #12
 8001968:	057c      	lsls	r4, r7, #21
 800196a:	0d64      	lsrs	r4, r4, #21
 800196c:	e6d4      	b.n	8001718 <__aeabi_dadd+0x130>
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	000007ff 	.word	0x000007ff
 8001974:	ff7fffff 	.word	0xff7fffff
 8001978:	000007fe 	.word	0x000007fe
 800197c:	08c0      	lsrs	r0, r0, #3
 800197e:	0762      	lsls	r2, r4, #29
 8001980:	4302      	orrs	r2, r0
 8001982:	08e4      	lsrs	r4, r4, #3
 8001984:	0013      	movs	r3, r2
 8001986:	4323      	orrs	r3, r4
 8001988:	d100      	bne.n	800198c <__aeabi_dadd+0x3a4>
 800198a:	e186      	b.n	8001c9a <__aeabi_dadd+0x6b2>
 800198c:	2580      	movs	r5, #128	@ 0x80
 800198e:	032d      	lsls	r5, r5, #12
 8001990:	4325      	orrs	r5, r4
 8001992:	032d      	lsls	r5, r5, #12
 8001994:	4cc3      	ldr	r4, [pc, #780]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001996:	0b2d      	lsrs	r5, r5, #12
 8001998:	e6be      	b.n	8001718 <__aeabi_dadd+0x130>
 800199a:	4660      	mov	r0, ip
 800199c:	4654      	mov	r4, sl
 800199e:	000e      	movs	r6, r1
 80019a0:	0017      	movs	r7, r2
 80019a2:	08c5      	lsrs	r5, r0, #3
 80019a4:	e7d8      	b.n	8001958 <__aeabi_dadd+0x370>
 80019a6:	4cc0      	ldr	r4, [pc, #768]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019a8:	1aff      	subs	r7, r7, r3
 80019aa:	4014      	ands	r4, r2
 80019ac:	e696      	b.n	80016dc <__aeabi_dadd+0xf4>
 80019ae:	4abf      	ldr	r2, [pc, #764]	@ (8001cac <__aeabi_dadd+0x6c4>)
 80019b0:	1c79      	adds	r1, r7, #1
 80019b2:	4211      	tst	r1, r2
 80019b4:	d16b      	bne.n	8001a8e <__aeabi_dadd+0x4a6>
 80019b6:	0022      	movs	r2, r4
 80019b8:	4302      	orrs	r2, r0
 80019ba:	2f00      	cmp	r7, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dadd+0x3d8>
 80019be:	e0db      	b.n	8001b78 <__aeabi_dadd+0x590>
 80019c0:	2a00      	cmp	r2, #0
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dadd+0x3de>
 80019c4:	e12d      	b.n	8001c22 <__aeabi_dadd+0x63a>
 80019c6:	4662      	mov	r2, ip
 80019c8:	4653      	mov	r3, sl
 80019ca:	431a      	orrs	r2, r3
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dadd+0x3e8>
 80019ce:	e0b6      	b.n	8001b3e <__aeabi_dadd+0x556>
 80019d0:	4663      	mov	r3, ip
 80019d2:	18c5      	adds	r5, r0, r3
 80019d4:	4285      	cmp	r5, r0
 80019d6:	4180      	sbcs	r0, r0
 80019d8:	4454      	add	r4, sl
 80019da:	4240      	negs	r0, r0
 80019dc:	1824      	adds	r4, r4, r0
 80019de:	0223      	lsls	r3, r4, #8
 80019e0:	d502      	bpl.n	80019e8 <__aeabi_dadd+0x400>
 80019e2:	000f      	movs	r7, r1
 80019e4:	4bb0      	ldr	r3, [pc, #704]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019e6:	401c      	ands	r4, r3
 80019e8:	003a      	movs	r2, r7
 80019ea:	0028      	movs	r0, r5
 80019ec:	e7d8      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80019ee:	4662      	mov	r2, ip
 80019f0:	1a85      	subs	r5, r0, r2
 80019f2:	42a8      	cmp	r0, r5
 80019f4:	4192      	sbcs	r2, r2
 80019f6:	4653      	mov	r3, sl
 80019f8:	4252      	negs	r2, r2
 80019fa:	4691      	mov	r9, r2
 80019fc:	1ae3      	subs	r3, r4, r3
 80019fe:	001a      	movs	r2, r3
 8001a00:	464b      	mov	r3, r9
 8001a02:	1ad2      	subs	r2, r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	4691      	mov	r9, r2
 8001a08:	021a      	lsls	r2, r3, #8
 8001a0a:	d454      	bmi.n	8001ab6 <__aeabi_dadd+0x4ce>
 8001a0c:	464a      	mov	r2, r9
 8001a0e:	464c      	mov	r4, r9
 8001a10:	432a      	orrs	r2, r5
 8001a12:	d000      	beq.n	8001a16 <__aeabi_dadd+0x42e>
 8001a14:	e640      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001a16:	2600      	movs	r6, #0
 8001a18:	2400      	movs	r4, #0
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	e67c      	b.n	8001718 <__aeabi_dadd+0x130>
 8001a1e:	4da1      	ldr	r5, [pc, #644]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a20:	45a9      	cmp	r9, r5
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dadd+0x43e>
 8001a24:	e090      	b.n	8001b48 <__aeabi_dadd+0x560>
 8001a26:	2501      	movs	r5, #1
 8001a28:	2a38      	cmp	r2, #56	@ 0x38
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dadd+0x446>
 8001a2c:	e6ab      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001a2e:	2580      	movs	r5, #128	@ 0x80
 8001a30:	042d      	lsls	r5, r5, #16
 8001a32:	432c      	orrs	r4, r5
 8001a34:	e695      	b.n	8001762 <__aeabi_dadd+0x17a>
 8001a36:	0011      	movs	r1, r2
 8001a38:	4655      	mov	r5, sl
 8001a3a:	3920      	subs	r1, #32
 8001a3c:	40cd      	lsrs	r5, r1
 8001a3e:	46a9      	mov	r9, r5
 8001a40:	2a20      	cmp	r2, #32
 8001a42:	d006      	beq.n	8001a52 <__aeabi_dadd+0x46a>
 8001a44:	2140      	movs	r1, #64	@ 0x40
 8001a46:	4653      	mov	r3, sl
 8001a48:	1a8a      	subs	r2, r1, r2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	4662      	mov	r2, ip
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	4694      	mov	ip, r2
 8001a52:	4665      	mov	r5, ip
 8001a54:	1e6b      	subs	r3, r5, #1
 8001a56:	419d      	sbcs	r5, r3
 8001a58:	464b      	mov	r3, r9
 8001a5a:	431d      	orrs	r5, r3
 8001a5c:	e612      	b.n	8001684 <__aeabi_dadd+0x9c>
 8001a5e:	0021      	movs	r1, r4
 8001a60:	4301      	orrs	r1, r0
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dadd+0x47e>
 8001a64:	e0c4      	b.n	8001bf0 <__aeabi_dadd+0x608>
 8001a66:	1e51      	subs	r1, r2, #1
 8001a68:	2a01      	cmp	r2, #1
 8001a6a:	d100      	bne.n	8001a6e <__aeabi_dadd+0x486>
 8001a6c:	e0fb      	b.n	8001c66 <__aeabi_dadd+0x67e>
 8001a6e:	4d8d      	ldr	r5, [pc, #564]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a70:	42aa      	cmp	r2, r5
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dadd+0x48e>
 8001a74:	e0b5      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 8001a76:	2501      	movs	r5, #1
 8001a78:	2938      	cmp	r1, #56	@ 0x38
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_dadd+0x496>
 8001a7c:	e741      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001a7e:	000a      	movs	r2, r1
 8001a80:	e72f      	b.n	80018e2 <__aeabi_dadd+0x2fa>
 8001a82:	4c89      	ldr	r4, [pc, #548]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 8001a84:	1aff      	subs	r7, r7, r3
 8001a86:	4014      	ands	r4, r2
 8001a88:	0762      	lsls	r2, r4, #29
 8001a8a:	08e4      	lsrs	r4, r4, #3
 8001a8c:	e76a      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001a8e:	4a85      	ldr	r2, [pc, #532]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a90:	4291      	cmp	r1, r2
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dadd+0x4ae>
 8001a94:	e0e3      	b.n	8001c5e <__aeabi_dadd+0x676>
 8001a96:	4663      	mov	r3, ip
 8001a98:	18c2      	adds	r2, r0, r3
 8001a9a:	4282      	cmp	r2, r0
 8001a9c:	4180      	sbcs	r0, r0
 8001a9e:	0023      	movs	r3, r4
 8001aa0:	4240      	negs	r0, r0
 8001aa2:	4453      	add	r3, sl
 8001aa4:	181b      	adds	r3, r3, r0
 8001aa6:	07dd      	lsls	r5, r3, #31
 8001aa8:	085c      	lsrs	r4, r3, #1
 8001aaa:	2307      	movs	r3, #7
 8001aac:	0852      	lsrs	r2, r2, #1
 8001aae:	4315      	orrs	r5, r2
 8001ab0:	000f      	movs	r7, r1
 8001ab2:	402b      	ands	r3, r5
 8001ab4:	e700      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001ab6:	4663      	mov	r3, ip
 8001ab8:	1a1d      	subs	r5, r3, r0
 8001aba:	45ac      	cmp	ip, r5
 8001abc:	4192      	sbcs	r2, r2
 8001abe:	4653      	mov	r3, sl
 8001ac0:	4252      	negs	r2, r2
 8001ac2:	1b1c      	subs	r4, r3, r4
 8001ac4:	000e      	movs	r6, r1
 8001ac6:	4688      	mov	r8, r1
 8001ac8:	1aa4      	subs	r4, r4, r2
 8001aca:	e5e5      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001acc:	2d00      	cmp	r5, #0
 8001ace:	d000      	beq.n	8001ad2 <__aeabi_dadd+0x4ea>
 8001ad0:	e091      	b.n	8001bf6 <__aeabi_dadd+0x60e>
 8001ad2:	2a00      	cmp	r2, #0
 8001ad4:	d138      	bne.n	8001b48 <__aeabi_dadd+0x560>
 8001ad6:	2480      	movs	r4, #128	@ 0x80
 8001ad8:	2600      	movs	r6, #0
 8001ada:	0324      	lsls	r4, r4, #12
 8001adc:	e756      	b.n	800198c <__aeabi_dadd+0x3a4>
 8001ade:	4663      	mov	r3, ip
 8001ae0:	18c5      	adds	r5, r0, r3
 8001ae2:	4285      	cmp	r5, r0
 8001ae4:	4180      	sbcs	r0, r0
 8001ae6:	4454      	add	r4, sl
 8001ae8:	4240      	negs	r0, r0
 8001aea:	1824      	adds	r4, r4, r0
 8001aec:	2701      	movs	r7, #1
 8001aee:	0223      	lsls	r3, r4, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dadd+0x50c>
 8001af2:	e6df      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001af4:	2702      	movs	r7, #2
 8001af6:	e687      	b.n	8001808 <__aeabi_dadd+0x220>
 8001af8:	4663      	mov	r3, ip
 8001afa:	1ac5      	subs	r5, r0, r3
 8001afc:	42a8      	cmp	r0, r5
 8001afe:	4180      	sbcs	r0, r0
 8001b00:	4653      	mov	r3, sl
 8001b02:	4240      	negs	r0, r0
 8001b04:	1ae4      	subs	r4, r4, r3
 8001b06:	2701      	movs	r7, #1
 8001b08:	1a24      	subs	r4, r4, r0
 8001b0a:	e5c0      	b.n	800168e <__aeabi_dadd+0xa6>
 8001b0c:	0762      	lsls	r2, r4, #29
 8001b0e:	08c0      	lsrs	r0, r0, #3
 8001b10:	4302      	orrs	r2, r0
 8001b12:	08e4      	lsrs	r4, r4, #3
 8001b14:	e736      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b16:	0011      	movs	r1, r2
 8001b18:	4653      	mov	r3, sl
 8001b1a:	3920      	subs	r1, #32
 8001b1c:	40cb      	lsrs	r3, r1
 8001b1e:	4699      	mov	r9, r3
 8001b20:	2a20      	cmp	r2, #32
 8001b22:	d006      	beq.n	8001b32 <__aeabi_dadd+0x54a>
 8001b24:	2140      	movs	r1, #64	@ 0x40
 8001b26:	4653      	mov	r3, sl
 8001b28:	1a8a      	subs	r2, r1, r2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	4662      	mov	r2, ip
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	4694      	mov	ip, r2
 8001b32:	4665      	mov	r5, ip
 8001b34:	1e6b      	subs	r3, r5, #1
 8001b36:	419d      	sbcs	r5, r3
 8001b38:	464b      	mov	r3, r9
 8001b3a:	431d      	orrs	r5, r3
 8001b3c:	e659      	b.n	80017f2 <__aeabi_dadd+0x20a>
 8001b3e:	0762      	lsls	r2, r4, #29
 8001b40:	08c0      	lsrs	r0, r0, #3
 8001b42:	4302      	orrs	r2, r0
 8001b44:	08e4      	lsrs	r4, r4, #3
 8001b46:	e70d      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001b48:	4653      	mov	r3, sl
 8001b4a:	075a      	lsls	r2, r3, #29
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	08d8      	lsrs	r0, r3, #3
 8001b50:	4653      	mov	r3, sl
 8001b52:	000e      	movs	r6, r1
 8001b54:	4302      	orrs	r2, r0
 8001b56:	08dc      	lsrs	r4, r3, #3
 8001b58:	e714      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b5a:	0015      	movs	r5, r2
 8001b5c:	0026      	movs	r6, r4
 8001b5e:	3d20      	subs	r5, #32
 8001b60:	40ee      	lsrs	r6, r5
 8001b62:	2a20      	cmp	r2, #32
 8001b64:	d003      	beq.n	8001b6e <__aeabi_dadd+0x586>
 8001b66:	2540      	movs	r5, #64	@ 0x40
 8001b68:	1aaa      	subs	r2, r5, r2
 8001b6a:	4094      	lsls	r4, r2
 8001b6c:	4320      	orrs	r0, r4
 8001b6e:	1e42      	subs	r2, r0, #1
 8001b70:	4190      	sbcs	r0, r2
 8001b72:	0005      	movs	r5, r0
 8001b74:	4335      	orrs	r5, r6
 8001b76:	e606      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d07c      	beq.n	8001c76 <__aeabi_dadd+0x68e>
 8001b7c:	4662      	mov	r2, ip
 8001b7e:	4653      	mov	r3, sl
 8001b80:	08c0      	lsrs	r0, r0, #3
 8001b82:	431a      	orrs	r2, r3
 8001b84:	d100      	bne.n	8001b88 <__aeabi_dadd+0x5a0>
 8001b86:	e6fa      	b.n	800197e <__aeabi_dadd+0x396>
 8001b88:	0762      	lsls	r2, r4, #29
 8001b8a:	4310      	orrs	r0, r2
 8001b8c:	2280      	movs	r2, #128	@ 0x80
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	0312      	lsls	r2, r2, #12
 8001b92:	4214      	tst	r4, r2
 8001b94:	d008      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b96:	08d9      	lsrs	r1, r3, #3
 8001b98:	4211      	tst	r1, r2
 8001b9a:	d105      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	08d8      	lsrs	r0, r3, #3
 8001ba0:	4653      	mov	r3, sl
 8001ba2:	000c      	movs	r4, r1
 8001ba4:	075b      	lsls	r3, r3, #29
 8001ba6:	4318      	orrs	r0, r3
 8001ba8:	0f42      	lsrs	r2, r0, #29
 8001baa:	00c0      	lsls	r0, r0, #3
 8001bac:	08c0      	lsrs	r0, r0, #3
 8001bae:	0752      	lsls	r2, r2, #29
 8001bb0:	4302      	orrs	r2, r0
 8001bb2:	e6e7      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dadd+0x5d2>
 8001bb8:	e72d      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	08d8      	lsrs	r0, r3, #3
 8001bbe:	4653      	mov	r3, sl
 8001bc0:	075a      	lsls	r2, r3, #29
 8001bc2:	000e      	movs	r6, r1
 8001bc4:	4302      	orrs	r2, r0
 8001bc6:	08dc      	lsrs	r4, r3, #3
 8001bc8:	e6cc      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001bca:	4663      	mov	r3, ip
 8001bcc:	1a1d      	subs	r5, r3, r0
 8001bce:	45ac      	cmp	ip, r5
 8001bd0:	4192      	sbcs	r2, r2
 8001bd2:	4653      	mov	r3, sl
 8001bd4:	4252      	negs	r2, r2
 8001bd6:	1b1c      	subs	r4, r3, r4
 8001bd8:	000e      	movs	r6, r1
 8001bda:	4688      	mov	r8, r1
 8001bdc:	1aa4      	subs	r4, r4, r2
 8001bde:	3701      	adds	r7, #1
 8001be0:	e555      	b.n	800168e <__aeabi_dadd+0xa6>
 8001be2:	4663      	mov	r3, ip
 8001be4:	08d9      	lsrs	r1, r3, #3
 8001be6:	4653      	mov	r3, sl
 8001be8:	075a      	lsls	r2, r3, #29
 8001bea:	430a      	orrs	r2, r1
 8001bec:	08dc      	lsrs	r4, r3, #3
 8001bee:	e6c9      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bf0:	4660      	mov	r0, ip
 8001bf2:	4654      	mov	r4, sl
 8001bf4:	e6d4      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001bf6:	08c0      	lsrs	r0, r0, #3
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dadd+0x616>
 8001bfc:	e6bf      	b.n	800197e <__aeabi_dadd+0x396>
 8001bfe:	0762      	lsls	r2, r4, #29
 8001c00:	4310      	orrs	r0, r2
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	08e4      	lsrs	r4, r4, #3
 8001c06:	0312      	lsls	r2, r2, #12
 8001c08:	4214      	tst	r4, r2
 8001c0a:	d0cd      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c0c:	08dd      	lsrs	r5, r3, #3
 8001c0e:	4215      	tst	r5, r2
 8001c10:	d1ca      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c12:	4663      	mov	r3, ip
 8001c14:	08d8      	lsrs	r0, r3, #3
 8001c16:	4653      	mov	r3, sl
 8001c18:	075b      	lsls	r3, r3, #29
 8001c1a:	000e      	movs	r6, r1
 8001c1c:	002c      	movs	r4, r5
 8001c1e:	4318      	orrs	r0, r3
 8001c20:	e7c2      	b.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c22:	4663      	mov	r3, ip
 8001c24:	08d9      	lsrs	r1, r3, #3
 8001c26:	4653      	mov	r3, sl
 8001c28:	075a      	lsls	r2, r3, #29
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	08dc      	lsrs	r4, r3, #3
 8001c2e:	e699      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001c30:	4663      	mov	r3, ip
 8001c32:	08d8      	lsrs	r0, r3, #3
 8001c34:	4653      	mov	r3, sl
 8001c36:	075a      	lsls	r2, r3, #29
 8001c38:	000e      	movs	r6, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	08dc      	lsrs	r4, r3, #3
 8001c3e:	e6a1      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c40:	0011      	movs	r1, r2
 8001c42:	0027      	movs	r7, r4
 8001c44:	3920      	subs	r1, #32
 8001c46:	40cf      	lsrs	r7, r1
 8001c48:	2a20      	cmp	r2, #32
 8001c4a:	d003      	beq.n	8001c54 <__aeabi_dadd+0x66c>
 8001c4c:	2140      	movs	r1, #64	@ 0x40
 8001c4e:	1a8a      	subs	r2, r1, r2
 8001c50:	4094      	lsls	r4, r2
 8001c52:	4320      	orrs	r0, r4
 8001c54:	1e42      	subs	r2, r0, #1
 8001c56:	4190      	sbcs	r0, r2
 8001c58:	0005      	movs	r5, r0
 8001c5a:	433d      	orrs	r5, r7
 8001c5c:	e651      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001c5e:	000c      	movs	r4, r1
 8001c60:	2500      	movs	r5, #0
 8001c62:	2200      	movs	r2, #0
 8001c64:	e558      	b.n	8001718 <__aeabi_dadd+0x130>
 8001c66:	4460      	add	r0, ip
 8001c68:	4560      	cmp	r0, ip
 8001c6a:	4192      	sbcs	r2, r2
 8001c6c:	4454      	add	r4, sl
 8001c6e:	4252      	negs	r2, r2
 8001c70:	0005      	movs	r5, r0
 8001c72:	18a4      	adds	r4, r4, r2
 8001c74:	e73a      	b.n	8001aec <__aeabi_dadd+0x504>
 8001c76:	4653      	mov	r3, sl
 8001c78:	075a      	lsls	r2, r3, #29
 8001c7a:	4663      	mov	r3, ip
 8001c7c:	08d9      	lsrs	r1, r3, #3
 8001c7e:	4653      	mov	r3, sl
 8001c80:	430a      	orrs	r2, r1
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	e67e      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c86:	001a      	movs	r2, r3
 8001c88:	001c      	movs	r4, r3
 8001c8a:	432a      	orrs	r2, r5
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dadd+0x6a8>
 8001c8e:	e6ab      	b.n	80019e8 <__aeabi_dadd+0x400>
 8001c90:	e6c1      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001c92:	2120      	movs	r1, #32
 8001c94:	2500      	movs	r5, #0
 8001c96:	1a09      	subs	r1, r1, r0
 8001c98:	e519      	b.n	80016ce <__aeabi_dadd+0xe6>
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2500      	movs	r5, #0
 8001c9e:	4c01      	ldr	r4, [pc, #4]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001ca0:	e53a      	b.n	8001718 <__aeabi_dadd+0x130>
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	000007ff 	.word	0x000007ff
 8001ca8:	ff7fffff 	.word	0xff7fffff
 8001cac:	000007fe 	.word	0x000007fe

08001cb0 <__aeabi_ddiv>:
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	46de      	mov	lr, fp
 8001cb4:	4645      	mov	r5, r8
 8001cb6:	4657      	mov	r7, sl
 8001cb8:	464e      	mov	r6, r9
 8001cba:	b5e0      	push	{r5, r6, r7, lr}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	9200      	str	r2, [sp, #0]
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	030b      	lsls	r3, r1, #12
 8001cc4:	0b1b      	lsrs	r3, r3, #12
 8001cc6:	469b      	mov	fp, r3
 8001cc8:	0fca      	lsrs	r2, r1, #31
 8001cca:	004b      	lsls	r3, r1, #1
 8001ccc:	0004      	movs	r4, r0
 8001cce:	4680      	mov	r8, r0
 8001cd0:	0d5b      	lsrs	r3, r3, #21
 8001cd2:	9202      	str	r2, [sp, #8]
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_ddiv+0x28>
 8001cd6:	e16a      	b.n	8001fae <__aeabi_ddiv+0x2fe>
 8001cd8:	4ad4      	ldr	r2, [pc, #848]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_ddiv+0x30>
 8001cde:	e18c      	b.n	8001ffa <__aeabi_ddiv+0x34a>
 8001ce0:	4659      	mov	r1, fp
 8001ce2:	0f42      	lsrs	r2, r0, #29
 8001ce4:	00c9      	lsls	r1, r1, #3
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	2180      	movs	r1, #128	@ 0x80
 8001cea:	0409      	lsls	r1, r1, #16
 8001cec:	4311      	orrs	r1, r2
 8001cee:	00c2      	lsls	r2, r0, #3
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4acf      	ldr	r2, [pc, #828]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001cf4:	4689      	mov	r9, r1
 8001cf6:	4692      	mov	sl, r2
 8001cf8:	449a      	add	sl, r3
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2400      	movs	r4, #0
 8001cfe:	9303      	str	r3, [sp, #12]
 8001d00:	9e00      	ldr	r6, [sp, #0]
 8001d02:	9f01      	ldr	r7, [sp, #4]
 8001d04:	033b      	lsls	r3, r7, #12
 8001d06:	0b1b      	lsrs	r3, r3, #12
 8001d08:	469b      	mov	fp, r3
 8001d0a:	007b      	lsls	r3, r7, #1
 8001d0c:	0030      	movs	r0, r6
 8001d0e:	0d5b      	lsrs	r3, r3, #21
 8001d10:	0ffd      	lsrs	r5, r7, #31
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d100      	bne.n	8001d18 <__aeabi_ddiv+0x68>
 8001d16:	e128      	b.n	8001f6a <__aeabi_ddiv+0x2ba>
 8001d18:	4ac4      	ldr	r2, [pc, #784]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_ddiv+0x70>
 8001d1e:	e177      	b.n	8002010 <__aeabi_ddiv+0x360>
 8001d20:	4659      	mov	r1, fp
 8001d22:	0f72      	lsrs	r2, r6, #29
 8001d24:	00c9      	lsls	r1, r1, #3
 8001d26:	430a      	orrs	r2, r1
 8001d28:	2180      	movs	r1, #128	@ 0x80
 8001d2a:	0409      	lsls	r1, r1, #16
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	468b      	mov	fp, r1
 8001d30:	49bf      	ldr	r1, [pc, #764]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001d32:	00f2      	lsls	r2, r6, #3
 8001d34:	468c      	mov	ip, r1
 8001d36:	4651      	mov	r1, sl
 8001d38:	4463      	add	r3, ip
 8001d3a:	1acb      	subs	r3, r1, r3
 8001d3c:	469a      	mov	sl, r3
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9e02      	ldr	r6, [sp, #8]
 8001d42:	406e      	eors	r6, r5
 8001d44:	2c0f      	cmp	r4, #15
 8001d46:	d827      	bhi.n	8001d98 <__aeabi_ddiv+0xe8>
 8001d48:	49ba      	ldr	r1, [pc, #744]	@ (8002034 <__aeabi_ddiv+0x384>)
 8001d4a:	00a4      	lsls	r4, r4, #2
 8001d4c:	5909      	ldr	r1, [r1, r4]
 8001d4e:	468f      	mov	pc, r1
 8001d50:	46cb      	mov	fp, r9
 8001d52:	4642      	mov	r2, r8
 8001d54:	9e02      	ldr	r6, [sp, #8]
 8001d56:	9b03      	ldr	r3, [sp, #12]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d016      	beq.n	8001d8a <__aeabi_ddiv+0xda>
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0xb2>
 8001d60:	e2a6      	b.n	80022b0 <__aeabi_ddiv+0x600>
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d000      	beq.n	8001d68 <__aeabi_ddiv+0xb8>
 8001d66:	e0df      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	4690      	mov	r8, r2
 8001d70:	051b      	lsls	r3, r3, #20
 8001d72:	4323      	orrs	r3, r4
 8001d74:	07f6      	lsls	r6, r6, #31
 8001d76:	4333      	orrs	r3, r6
 8001d78:	4640      	mov	r0, r8
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	b007      	add	sp, #28
 8001d7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d80:	46bb      	mov	fp, r7
 8001d82:	46b2      	mov	sl, r6
 8001d84:	46a9      	mov	r9, r5
 8001d86:	46a0      	mov	r8, r4
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2400      	movs	r4, #0
 8001d8e:	4690      	mov	r8, r2
 8001d90:	4ba6      	ldr	r3, [pc, #664]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d92:	e7ed      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001d94:	002e      	movs	r6, r5
 8001d96:	e7df      	b.n	8001d58 <__aeabi_ddiv+0xa8>
 8001d98:	45cb      	cmp	fp, r9
 8001d9a:	d200      	bcs.n	8001d9e <__aeabi_ddiv+0xee>
 8001d9c:	e1d4      	b.n	8002148 <__aeabi_ddiv+0x498>
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_ddiv+0xf2>
 8001da0:	e1cf      	b.n	8002142 <__aeabi_ddiv+0x492>
 8001da2:	2301      	movs	r3, #1
 8001da4:	425b      	negs	r3, r3
 8001da6:	469c      	mov	ip, r3
 8001da8:	4644      	mov	r4, r8
 8001daa:	4648      	mov	r0, r9
 8001dac:	2700      	movs	r7, #0
 8001dae:	44e2      	add	sl, ip
 8001db0:	465b      	mov	r3, fp
 8001db2:	0e15      	lsrs	r5, r2, #24
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	431d      	orrs	r5, r3
 8001db8:	0c19      	lsrs	r1, r3, #16
 8001dba:	042b      	lsls	r3, r5, #16
 8001dbc:	0212      	lsls	r2, r2, #8
 8001dbe:	9500      	str	r5, [sp, #0]
 8001dc0:	0c1d      	lsrs	r5, r3, #16
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9102      	str	r1, [sp, #8]
 8001dc6:	9503      	str	r5, [sp, #12]
 8001dc8:	f7fe fa40 	bl	800024c <__aeabi_uidivmod>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	436a      	muls	r2, r5
 8001dd0:	040b      	lsls	r3, r1, #16
 8001dd2:	0c21      	lsrs	r1, r4, #16
 8001dd4:	4680      	mov	r8, r0
 8001dd6:	4319      	orrs	r1, r3
 8001dd8:	428a      	cmp	r2, r1
 8001dda:	d909      	bls.n	8001df0 <__aeabi_ddiv+0x140>
 8001ddc:	9d00      	ldr	r5, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	46ac      	mov	ip, r5
 8001de2:	425b      	negs	r3, r3
 8001de4:	4461      	add	r1, ip
 8001de6:	469c      	mov	ip, r3
 8001de8:	44e0      	add	r8, ip
 8001dea:	428d      	cmp	r5, r1
 8001dec:	d800      	bhi.n	8001df0 <__aeabi_ddiv+0x140>
 8001dee:	e1fb      	b.n	80021e8 <__aeabi_ddiv+0x538>
 8001df0:	1a88      	subs	r0, r1, r2
 8001df2:	9902      	ldr	r1, [sp, #8]
 8001df4:	f7fe fa2a 	bl	800024c <__aeabi_uidivmod>
 8001df8:	9a03      	ldr	r2, [sp, #12]
 8001dfa:	0424      	lsls	r4, r4, #16
 8001dfc:	4342      	muls	r2, r0
 8001dfe:	0409      	lsls	r1, r1, #16
 8001e00:	0c24      	lsrs	r4, r4, #16
 8001e02:	0003      	movs	r3, r0
 8001e04:	430c      	orrs	r4, r1
 8001e06:	42a2      	cmp	r2, r4
 8001e08:	d906      	bls.n	8001e18 <__aeabi_ddiv+0x168>
 8001e0a:	9900      	ldr	r1, [sp, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	468c      	mov	ip, r1
 8001e10:	4464      	add	r4, ip
 8001e12:	42a1      	cmp	r1, r4
 8001e14:	d800      	bhi.n	8001e18 <__aeabi_ddiv+0x168>
 8001e16:	e1e1      	b.n	80021dc <__aeabi_ddiv+0x52c>
 8001e18:	1aa0      	subs	r0, r4, r2
 8001e1a:	4642      	mov	r2, r8
 8001e1c:	0412      	lsls	r2, r2, #16
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	4693      	mov	fp, r2
 8001e22:	464b      	mov	r3, r9
 8001e24:	4659      	mov	r1, fp
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	001d      	movs	r5, r3
 8001e2a:	9304      	str	r3, [sp, #16]
 8001e2c:	040b      	lsls	r3, r1, #16
 8001e2e:	4649      	mov	r1, r9
 8001e30:	0409      	lsls	r1, r1, #16
 8001e32:	0c09      	lsrs	r1, r1, #16
 8001e34:	000c      	movs	r4, r1
 8001e36:	0c1b      	lsrs	r3, r3, #16
 8001e38:	435c      	muls	r4, r3
 8001e3a:	0c12      	lsrs	r2, r2, #16
 8001e3c:	436b      	muls	r3, r5
 8001e3e:	4688      	mov	r8, r1
 8001e40:	4351      	muls	r1, r2
 8001e42:	436a      	muls	r2, r5
 8001e44:	0c25      	lsrs	r5, r4, #16
 8001e46:	46ac      	mov	ip, r5
 8001e48:	185b      	adds	r3, r3, r1
 8001e4a:	4463      	add	r3, ip
 8001e4c:	4299      	cmp	r1, r3
 8001e4e:	d903      	bls.n	8001e58 <__aeabi_ddiv+0x1a8>
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	0249      	lsls	r1, r1, #9
 8001e54:	468c      	mov	ip, r1
 8001e56:	4462      	add	r2, ip
 8001e58:	0c19      	lsrs	r1, r3, #16
 8001e5a:	0424      	lsls	r4, r4, #16
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	0c24      	lsrs	r4, r4, #16
 8001e60:	188a      	adds	r2, r1, r2
 8001e62:	191c      	adds	r4, r3, r4
 8001e64:	4290      	cmp	r0, r2
 8001e66:	d302      	bcc.n	8001e6e <__aeabi_ddiv+0x1be>
 8001e68:	d116      	bne.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6a:	42a7      	cmp	r7, r4
 8001e6c:	d214      	bcs.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6e:	465b      	mov	r3, fp
 8001e70:	9d00      	ldr	r5, [sp, #0]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	444f      	add	r7, r9
 8001e76:	9305      	str	r3, [sp, #20]
 8001e78:	454f      	cmp	r7, r9
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	46ac      	mov	ip, r5
 8001e7e:	425b      	negs	r3, r3
 8001e80:	4463      	add	r3, ip
 8001e82:	18c0      	adds	r0, r0, r3
 8001e84:	4285      	cmp	r5, r0
 8001e86:	d300      	bcc.n	8001e8a <__aeabi_ddiv+0x1da>
 8001e88:	e1a1      	b.n	80021ce <__aeabi_ddiv+0x51e>
 8001e8a:	4282      	cmp	r2, r0
 8001e8c:	d900      	bls.n	8001e90 <__aeabi_ddiv+0x1e0>
 8001e8e:	e1f6      	b.n	800227e <__aeabi_ddiv+0x5ce>
 8001e90:	d100      	bne.n	8001e94 <__aeabi_ddiv+0x1e4>
 8001e92:	e1f1      	b.n	8002278 <__aeabi_ddiv+0x5c8>
 8001e94:	9b05      	ldr	r3, [sp, #20]
 8001e96:	469b      	mov	fp, r3
 8001e98:	1b3c      	subs	r4, r7, r4
 8001e9a:	42a7      	cmp	r7, r4
 8001e9c:	41bf      	sbcs	r7, r7
 8001e9e:	9d00      	ldr	r5, [sp, #0]
 8001ea0:	1a80      	subs	r0, r0, r2
 8001ea2:	427f      	negs	r7, r7
 8001ea4:	1bc0      	subs	r0, r0, r7
 8001ea6:	4285      	cmp	r5, r0
 8001ea8:	d100      	bne.n	8001eac <__aeabi_ddiv+0x1fc>
 8001eaa:	e1d0      	b.n	800224e <__aeabi_ddiv+0x59e>
 8001eac:	9902      	ldr	r1, [sp, #8]
 8001eae:	f7fe f9cd 	bl	800024c <__aeabi_uidivmod>
 8001eb2:	9a03      	ldr	r2, [sp, #12]
 8001eb4:	040b      	lsls	r3, r1, #16
 8001eb6:	4342      	muls	r2, r0
 8001eb8:	0c21      	lsrs	r1, r4, #16
 8001eba:	0007      	movs	r7, r0
 8001ebc:	4319      	orrs	r1, r3
 8001ebe:	428a      	cmp	r2, r1
 8001ec0:	d900      	bls.n	8001ec4 <__aeabi_ddiv+0x214>
 8001ec2:	e178      	b.n	80021b6 <__aeabi_ddiv+0x506>
 8001ec4:	1a88      	subs	r0, r1, r2
 8001ec6:	9902      	ldr	r1, [sp, #8]
 8001ec8:	f7fe f9c0 	bl	800024c <__aeabi_uidivmod>
 8001ecc:	9a03      	ldr	r2, [sp, #12]
 8001ece:	0424      	lsls	r4, r4, #16
 8001ed0:	4342      	muls	r2, r0
 8001ed2:	0409      	lsls	r1, r1, #16
 8001ed4:	0c24      	lsrs	r4, r4, #16
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	430c      	orrs	r4, r1
 8001eda:	42a2      	cmp	r2, r4
 8001edc:	d900      	bls.n	8001ee0 <__aeabi_ddiv+0x230>
 8001ede:	e15d      	b.n	800219c <__aeabi_ddiv+0x4ec>
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	1aa4      	subs	r4, r4, r2
 8001ee4:	043a      	lsls	r2, r7, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	9d04      	ldr	r5, [sp, #16]
 8001eea:	0413      	lsls	r3, r2, #16
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	4359      	muls	r1, r3
 8001ef0:	4647      	mov	r7, r8
 8001ef2:	436b      	muls	r3, r5
 8001ef4:	469c      	mov	ip, r3
 8001ef6:	0c10      	lsrs	r0, r2, #16
 8001ef8:	4347      	muls	r7, r0
 8001efa:	0c0b      	lsrs	r3, r1, #16
 8001efc:	44bc      	add	ip, r7
 8001efe:	4463      	add	r3, ip
 8001f00:	4368      	muls	r0, r5
 8001f02:	429f      	cmp	r7, r3
 8001f04:	d903      	bls.n	8001f0e <__aeabi_ddiv+0x25e>
 8001f06:	2580      	movs	r5, #128	@ 0x80
 8001f08:	026d      	lsls	r5, r5, #9
 8001f0a:	46ac      	mov	ip, r5
 8001f0c:	4460      	add	r0, ip
 8001f0e:	0c1f      	lsrs	r7, r3, #16
 8001f10:	0409      	lsls	r1, r1, #16
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	0c09      	lsrs	r1, r1, #16
 8001f16:	183f      	adds	r7, r7, r0
 8001f18:	185b      	adds	r3, r3, r1
 8001f1a:	42bc      	cmp	r4, r7
 8001f1c:	d200      	bcs.n	8001f20 <__aeabi_ddiv+0x270>
 8001f1e:	e102      	b.n	8002126 <__aeabi_ddiv+0x476>
 8001f20:	d100      	bne.n	8001f24 <__aeabi_ddiv+0x274>
 8001f22:	e0fd      	b.n	8002120 <__aeabi_ddiv+0x470>
 8001f24:	2301      	movs	r3, #1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	4b43      	ldr	r3, [pc, #268]	@ (8002038 <__aeabi_ddiv+0x388>)
 8001f2a:	4453      	add	r3, sl
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	dc00      	bgt.n	8001f32 <__aeabi_ddiv+0x282>
 8001f30:	e0ae      	b.n	8002090 <__aeabi_ddiv+0x3e0>
 8001f32:	0751      	lsls	r1, r2, #29
 8001f34:	d000      	beq.n	8001f38 <__aeabi_ddiv+0x288>
 8001f36:	e198      	b.n	800226a <__aeabi_ddiv+0x5ba>
 8001f38:	4659      	mov	r1, fp
 8001f3a:	01c9      	lsls	r1, r1, #7
 8001f3c:	d506      	bpl.n	8001f4c <__aeabi_ddiv+0x29c>
 8001f3e:	4659      	mov	r1, fp
 8001f40:	4b3e      	ldr	r3, [pc, #248]	@ (800203c <__aeabi_ddiv+0x38c>)
 8001f42:	4019      	ands	r1, r3
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	468b      	mov	fp, r1
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4453      	add	r3, sl
 8001f4c:	493c      	ldr	r1, [pc, #240]	@ (8002040 <__aeabi_ddiv+0x390>)
 8001f4e:	428b      	cmp	r3, r1
 8001f50:	dd00      	ble.n	8001f54 <__aeabi_ddiv+0x2a4>
 8001f52:	e71a      	b.n	8001d8a <__aeabi_ddiv+0xda>
 8001f54:	4659      	mov	r1, fp
 8001f56:	08d2      	lsrs	r2, r2, #3
 8001f58:	0749      	lsls	r1, r1, #29
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	465a      	mov	r2, fp
 8001f5e:	055b      	lsls	r3, r3, #21
 8001f60:	0254      	lsls	r4, r2, #9
 8001f62:	4688      	mov	r8, r1
 8001f64:	0b24      	lsrs	r4, r4, #12
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	e702      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001f6a:	465a      	mov	r2, fp
 8001f6c:	9b00      	ldr	r3, [sp, #0]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	d100      	bne.n	8001f74 <__aeabi_ddiv+0x2c4>
 8001f72:	e07e      	b.n	8002072 <__aeabi_ddiv+0x3c2>
 8001f74:	465b      	mov	r3, fp
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d100      	bne.n	8001f7c <__aeabi_ddiv+0x2cc>
 8001f7a:	e100      	b.n	800217e <__aeabi_ddiv+0x4ce>
 8001f7c:	4658      	mov	r0, fp
 8001f7e:	f001 fabb 	bl	80034f8 <__clzsi2>
 8001f82:	0002      	movs	r2, r0
 8001f84:	0003      	movs	r3, r0
 8001f86:	3a0b      	subs	r2, #11
 8001f88:	271d      	movs	r7, #29
 8001f8a:	9e00      	ldr	r6, [sp, #0]
 8001f8c:	1aba      	subs	r2, r7, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	4658      	mov	r0, fp
 8001f92:	40d6      	lsrs	r6, r2
 8001f94:	3908      	subs	r1, #8
 8001f96:	4088      	lsls	r0, r1
 8001f98:	0032      	movs	r2, r6
 8001f9a:	4302      	orrs	r2, r0
 8001f9c:	4693      	mov	fp, r2
 8001f9e:	9a00      	ldr	r2, [sp, #0]
 8001fa0:	408a      	lsls	r2, r1
 8001fa2:	4928      	ldr	r1, [pc, #160]	@ (8002044 <__aeabi_ddiv+0x394>)
 8001fa4:	4453      	add	r3, sl
 8001fa6:	468a      	mov	sl, r1
 8001fa8:	449a      	add	sl, r3
 8001faa:	2300      	movs	r3, #0
 8001fac:	e6c8      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8001fae:	465b      	mov	r3, fp
 8001fb0:	4303      	orrs	r3, r0
 8001fb2:	4699      	mov	r9, r3
 8001fb4:	d056      	beq.n	8002064 <__aeabi_ddiv+0x3b4>
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d100      	bne.n	8001fbe <__aeabi_ddiv+0x30e>
 8001fbc:	e0cd      	b.n	800215a <__aeabi_ddiv+0x4aa>
 8001fbe:	4658      	mov	r0, fp
 8001fc0:	f001 fa9a 	bl	80034f8 <__clzsi2>
 8001fc4:	230b      	movs	r3, #11
 8001fc6:	425b      	negs	r3, r3
 8001fc8:	469c      	mov	ip, r3
 8001fca:	0002      	movs	r2, r0
 8001fcc:	4484      	add	ip, r0
 8001fce:	4666      	mov	r6, ip
 8001fd0:	231d      	movs	r3, #29
 8001fd2:	1b9b      	subs	r3, r3, r6
 8001fd4:	0026      	movs	r6, r4
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	4658      	mov	r0, fp
 8001fda:	40de      	lsrs	r6, r3
 8001fdc:	3908      	subs	r1, #8
 8001fde:	4088      	lsls	r0, r1
 8001fe0:	0033      	movs	r3, r6
 8001fe2:	4303      	orrs	r3, r0
 8001fe4:	4699      	mov	r9, r3
 8001fe6:	0023      	movs	r3, r4
 8001fe8:	408b      	lsls	r3, r1
 8001fea:	4698      	mov	r8, r3
 8001fec:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <__aeabi_ddiv+0x398>)
 8001fee:	2400      	movs	r4, #0
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	469a      	mov	sl, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9303      	str	r3, [sp, #12]
 8001ff8:	e682      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8001ffa:	465a      	mov	r2, fp
 8001ffc:	4302      	orrs	r2, r0
 8001ffe:	4691      	mov	r9, r2
 8002000:	d12a      	bne.n	8002058 <__aeabi_ddiv+0x3a8>
 8002002:	2200      	movs	r2, #0
 8002004:	469a      	mov	sl, r3
 8002006:	2302      	movs	r3, #2
 8002008:	4690      	mov	r8, r2
 800200a:	2408      	movs	r4, #8
 800200c:	9303      	str	r3, [sp, #12]
 800200e:	e677      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002010:	465a      	mov	r2, fp
 8002012:	9b00      	ldr	r3, [sp, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <__aeabi_ddiv+0x39c>)
 8002018:	469c      	mov	ip, r3
 800201a:	44e2      	add	sl, ip
 800201c:	2a00      	cmp	r2, #0
 800201e:	d117      	bne.n	8002050 <__aeabi_ddiv+0x3a0>
 8002020:	2302      	movs	r3, #2
 8002022:	431c      	orrs	r4, r3
 8002024:	2300      	movs	r3, #0
 8002026:	469b      	mov	fp, r3
 8002028:	3302      	adds	r3, #2
 800202a:	e689      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800202c:	000007ff 	.word	0x000007ff
 8002030:	fffffc01 	.word	0xfffffc01
 8002034:	0801b63c 	.word	0x0801b63c
 8002038:	000003ff 	.word	0x000003ff
 800203c:	feffffff 	.word	0xfeffffff
 8002040:	000007fe 	.word	0x000007fe
 8002044:	000003f3 	.word	0x000003f3
 8002048:	fffffc0d 	.word	0xfffffc0d
 800204c:	fffff801 	.word	0xfffff801
 8002050:	2303      	movs	r3, #3
 8002052:	0032      	movs	r2, r6
 8002054:	431c      	orrs	r4, r3
 8002056:	e673      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8002058:	469a      	mov	sl, r3
 800205a:	2303      	movs	r3, #3
 800205c:	46d9      	mov	r9, fp
 800205e:	240c      	movs	r4, #12
 8002060:	9303      	str	r3, [sp, #12]
 8002062:	e64d      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002064:	2300      	movs	r3, #0
 8002066:	4698      	mov	r8, r3
 8002068:	469a      	mov	sl, r3
 800206a:	3301      	adds	r3, #1
 800206c:	2404      	movs	r4, #4
 800206e:	9303      	str	r3, [sp, #12]
 8002070:	e646      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002072:	2301      	movs	r3, #1
 8002074:	431c      	orrs	r4, r3
 8002076:	2300      	movs	r3, #0
 8002078:	469b      	mov	fp, r3
 800207a:	3301      	adds	r3, #1
 800207c:	e660      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800207e:	2300      	movs	r3, #0
 8002080:	2480      	movs	r4, #128	@ 0x80
 8002082:	4698      	mov	r8, r3
 8002084:	2600      	movs	r6, #0
 8002086:	4b92      	ldr	r3, [pc, #584]	@ (80022d0 <__aeabi_ddiv+0x620>)
 8002088:	0324      	lsls	r4, r4, #12
 800208a:	e671      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800208c:	2201      	movs	r2, #1
 800208e:	4252      	negs	r2, r2
 8002090:	2101      	movs	r1, #1
 8002092:	1ac9      	subs	r1, r1, r3
 8002094:	2938      	cmp	r1, #56	@ 0x38
 8002096:	dd00      	ble.n	800209a <__aeabi_ddiv+0x3ea>
 8002098:	e666      	b.n	8001d68 <__aeabi_ddiv+0xb8>
 800209a:	291f      	cmp	r1, #31
 800209c:	dc00      	bgt.n	80020a0 <__aeabi_ddiv+0x3f0>
 800209e:	e0ab      	b.n	80021f8 <__aeabi_ddiv+0x548>
 80020a0:	201f      	movs	r0, #31
 80020a2:	4240      	negs	r0, r0
 80020a4:	1ac3      	subs	r3, r0, r3
 80020a6:	4658      	mov	r0, fp
 80020a8:	40d8      	lsrs	r0, r3
 80020aa:	0003      	movs	r3, r0
 80020ac:	2920      	cmp	r1, #32
 80020ae:	d004      	beq.n	80020ba <__aeabi_ddiv+0x40a>
 80020b0:	4658      	mov	r0, fp
 80020b2:	4988      	ldr	r1, [pc, #544]	@ (80022d4 <__aeabi_ddiv+0x624>)
 80020b4:	4451      	add	r1, sl
 80020b6:	4088      	lsls	r0, r1
 80020b8:	4302      	orrs	r2, r0
 80020ba:	1e51      	subs	r1, r2, #1
 80020bc:	418a      	sbcs	r2, r1
 80020be:	431a      	orrs	r2, r3
 80020c0:	2307      	movs	r3, #7
 80020c2:	0019      	movs	r1, r3
 80020c4:	2400      	movs	r4, #0
 80020c6:	4011      	ands	r1, r2
 80020c8:	4213      	tst	r3, r2
 80020ca:	d00c      	beq.n	80020e6 <__aeabi_ddiv+0x436>
 80020cc:	230f      	movs	r3, #15
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d100      	bne.n	80020d6 <__aeabi_ddiv+0x426>
 80020d4:	e0f9      	b.n	80022ca <__aeabi_ddiv+0x61a>
 80020d6:	1d11      	adds	r1, r2, #4
 80020d8:	4291      	cmp	r1, r2
 80020da:	419b      	sbcs	r3, r3
 80020dc:	000a      	movs	r2, r1
 80020de:	425b      	negs	r3, r3
 80020e0:	0759      	lsls	r1, r3, #29
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	0b1c      	lsrs	r4, r3, #12
 80020e6:	08d2      	lsrs	r2, r2, #3
 80020e8:	430a      	orrs	r2, r1
 80020ea:	4690      	mov	r8, r2
 80020ec:	2300      	movs	r3, #0
 80020ee:	e63f      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80020f0:	2480      	movs	r4, #128	@ 0x80
 80020f2:	464b      	mov	r3, r9
 80020f4:	0324      	lsls	r4, r4, #12
 80020f6:	4223      	tst	r3, r4
 80020f8:	d009      	beq.n	800210e <__aeabi_ddiv+0x45e>
 80020fa:	465b      	mov	r3, fp
 80020fc:	4223      	tst	r3, r4
 80020fe:	d106      	bne.n	800210e <__aeabi_ddiv+0x45e>
 8002100:	431c      	orrs	r4, r3
 8002102:	0324      	lsls	r4, r4, #12
 8002104:	002e      	movs	r6, r5
 8002106:	4690      	mov	r8, r2
 8002108:	4b71      	ldr	r3, [pc, #452]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800210a:	0b24      	lsrs	r4, r4, #12
 800210c:	e630      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800210e:	2480      	movs	r4, #128	@ 0x80
 8002110:	464b      	mov	r3, r9
 8002112:	0324      	lsls	r4, r4, #12
 8002114:	431c      	orrs	r4, r3
 8002116:	0324      	lsls	r4, r4, #12
 8002118:	9e02      	ldr	r6, [sp, #8]
 800211a:	4b6d      	ldr	r3, [pc, #436]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800211c:	0b24      	lsrs	r4, r4, #12
 800211e:	e627      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d100      	bne.n	8002126 <__aeabi_ddiv+0x476>
 8002124:	e700      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8002126:	9800      	ldr	r0, [sp, #0]
 8002128:	1e51      	subs	r1, r2, #1
 800212a:	4684      	mov	ip, r0
 800212c:	4464      	add	r4, ip
 800212e:	4284      	cmp	r4, r0
 8002130:	d200      	bcs.n	8002134 <__aeabi_ddiv+0x484>
 8002132:	e084      	b.n	800223e <__aeabi_ddiv+0x58e>
 8002134:	42bc      	cmp	r4, r7
 8002136:	d200      	bcs.n	800213a <__aeabi_ddiv+0x48a>
 8002138:	e0ae      	b.n	8002298 <__aeabi_ddiv+0x5e8>
 800213a:	d100      	bne.n	800213e <__aeabi_ddiv+0x48e>
 800213c:	e0c1      	b.n	80022c2 <__aeabi_ddiv+0x612>
 800213e:	000a      	movs	r2, r1
 8002140:	e6f0      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002142:	4542      	cmp	r2, r8
 8002144:	d900      	bls.n	8002148 <__aeabi_ddiv+0x498>
 8002146:	e62c      	b.n	8001da2 <__aeabi_ddiv+0xf2>
 8002148:	464b      	mov	r3, r9
 800214a:	07dc      	lsls	r4, r3, #31
 800214c:	0858      	lsrs	r0, r3, #1
 800214e:	4643      	mov	r3, r8
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	431c      	orrs	r4, r3
 8002154:	4643      	mov	r3, r8
 8002156:	07df      	lsls	r7, r3, #31
 8002158:	e62a      	b.n	8001db0 <__aeabi_ddiv+0x100>
 800215a:	f001 f9cd 	bl	80034f8 <__clzsi2>
 800215e:	2315      	movs	r3, #21
 8002160:	469c      	mov	ip, r3
 8002162:	4484      	add	ip, r0
 8002164:	0002      	movs	r2, r0
 8002166:	4663      	mov	r3, ip
 8002168:	3220      	adds	r2, #32
 800216a:	2b1c      	cmp	r3, #28
 800216c:	dc00      	bgt.n	8002170 <__aeabi_ddiv+0x4c0>
 800216e:	e72e      	b.n	8001fce <__aeabi_ddiv+0x31e>
 8002170:	0023      	movs	r3, r4
 8002172:	3808      	subs	r0, #8
 8002174:	4083      	lsls	r3, r0
 8002176:	4699      	mov	r9, r3
 8002178:	2300      	movs	r3, #0
 800217a:	4698      	mov	r8, r3
 800217c:	e736      	b.n	8001fec <__aeabi_ddiv+0x33c>
 800217e:	f001 f9bb 	bl	80034f8 <__clzsi2>
 8002182:	0002      	movs	r2, r0
 8002184:	0003      	movs	r3, r0
 8002186:	3215      	adds	r2, #21
 8002188:	3320      	adds	r3, #32
 800218a:	2a1c      	cmp	r2, #28
 800218c:	dc00      	bgt.n	8002190 <__aeabi_ddiv+0x4e0>
 800218e:	e6fb      	b.n	8001f88 <__aeabi_ddiv+0x2d8>
 8002190:	9900      	ldr	r1, [sp, #0]
 8002192:	3808      	subs	r0, #8
 8002194:	4081      	lsls	r1, r0
 8002196:	2200      	movs	r2, #0
 8002198:	468b      	mov	fp, r1
 800219a:	e702      	b.n	8001fa2 <__aeabi_ddiv+0x2f2>
 800219c:	9900      	ldr	r1, [sp, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	468c      	mov	ip, r1
 80021a2:	4464      	add	r4, ip
 80021a4:	42a1      	cmp	r1, r4
 80021a6:	d900      	bls.n	80021aa <__aeabi_ddiv+0x4fa>
 80021a8:	e69a      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021aa:	42a2      	cmp	r2, r4
 80021ac:	d800      	bhi.n	80021b0 <__aeabi_ddiv+0x500>
 80021ae:	e697      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b0:	1e83      	subs	r3, r0, #2
 80021b2:	4464      	add	r4, ip
 80021b4:	e694      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b6:	46ac      	mov	ip, r5
 80021b8:	4461      	add	r1, ip
 80021ba:	3f01      	subs	r7, #1
 80021bc:	428d      	cmp	r5, r1
 80021be:	d900      	bls.n	80021c2 <__aeabi_ddiv+0x512>
 80021c0:	e680      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c2:	428a      	cmp	r2, r1
 80021c4:	d800      	bhi.n	80021c8 <__aeabi_ddiv+0x518>
 80021c6:	e67d      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c8:	1e87      	subs	r7, r0, #2
 80021ca:	4461      	add	r1, ip
 80021cc:	e67a      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021ce:	4285      	cmp	r5, r0
 80021d0:	d000      	beq.n	80021d4 <__aeabi_ddiv+0x524>
 80021d2:	e65f      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021d4:	45b9      	cmp	r9, r7
 80021d6:	d900      	bls.n	80021da <__aeabi_ddiv+0x52a>
 80021d8:	e65c      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021da:	e656      	b.n	8001e8a <__aeabi_ddiv+0x1da>
 80021dc:	42a2      	cmp	r2, r4
 80021de:	d800      	bhi.n	80021e2 <__aeabi_ddiv+0x532>
 80021e0:	e61a      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e2:	1e83      	subs	r3, r0, #2
 80021e4:	4464      	add	r4, ip
 80021e6:	e617      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e8:	428a      	cmp	r2, r1
 80021ea:	d800      	bhi.n	80021ee <__aeabi_ddiv+0x53e>
 80021ec:	e600      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021ee:	46ac      	mov	ip, r5
 80021f0:	1e83      	subs	r3, r0, #2
 80021f2:	4698      	mov	r8, r3
 80021f4:	4461      	add	r1, ip
 80021f6:	e5fb      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021f8:	4837      	ldr	r0, [pc, #220]	@ (80022d8 <__aeabi_ddiv+0x628>)
 80021fa:	0014      	movs	r4, r2
 80021fc:	4450      	add	r0, sl
 80021fe:	4082      	lsls	r2, r0
 8002200:	465b      	mov	r3, fp
 8002202:	0017      	movs	r7, r2
 8002204:	4083      	lsls	r3, r0
 8002206:	40cc      	lsrs	r4, r1
 8002208:	1e7a      	subs	r2, r7, #1
 800220a:	4197      	sbcs	r7, r2
 800220c:	4323      	orrs	r3, r4
 800220e:	433b      	orrs	r3, r7
 8002210:	001a      	movs	r2, r3
 8002212:	465b      	mov	r3, fp
 8002214:	40cb      	lsrs	r3, r1
 8002216:	0751      	lsls	r1, r2, #29
 8002218:	d009      	beq.n	800222e <__aeabi_ddiv+0x57e>
 800221a:	210f      	movs	r1, #15
 800221c:	4011      	ands	r1, r2
 800221e:	2904      	cmp	r1, #4
 8002220:	d005      	beq.n	800222e <__aeabi_ddiv+0x57e>
 8002222:	1d11      	adds	r1, r2, #4
 8002224:	4291      	cmp	r1, r2
 8002226:	4192      	sbcs	r2, r2
 8002228:	4252      	negs	r2, r2
 800222a:	189b      	adds	r3, r3, r2
 800222c:	000a      	movs	r2, r1
 800222e:	0219      	lsls	r1, r3, #8
 8002230:	d400      	bmi.n	8002234 <__aeabi_ddiv+0x584>
 8002232:	e755      	b.n	80020e0 <__aeabi_ddiv+0x430>
 8002234:	2200      	movs	r2, #0
 8002236:	2301      	movs	r3, #1
 8002238:	2400      	movs	r4, #0
 800223a:	4690      	mov	r8, r2
 800223c:	e598      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800223e:	000a      	movs	r2, r1
 8002240:	42bc      	cmp	r4, r7
 8002242:	d000      	beq.n	8002246 <__aeabi_ddiv+0x596>
 8002244:	e66e      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002246:	454b      	cmp	r3, r9
 8002248:	d000      	beq.n	800224c <__aeabi_ddiv+0x59c>
 800224a:	e66b      	b.n	8001f24 <__aeabi_ddiv+0x274>
 800224c:	e66c      	b.n	8001f28 <__aeabi_ddiv+0x278>
 800224e:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <__aeabi_ddiv+0x62c>)
 8002250:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <__aeabi_ddiv+0x630>)
 8002252:	4453      	add	r3, sl
 8002254:	4592      	cmp	sl, r2
 8002256:	da00      	bge.n	800225a <__aeabi_ddiv+0x5aa>
 8002258:	e718      	b.n	800208c <__aeabi_ddiv+0x3dc>
 800225a:	2101      	movs	r1, #1
 800225c:	4249      	negs	r1, r1
 800225e:	1d0a      	adds	r2, r1, #4
 8002260:	428a      	cmp	r2, r1
 8002262:	4189      	sbcs	r1, r1
 8002264:	4249      	negs	r1, r1
 8002266:	448b      	add	fp, r1
 8002268:	e666      	b.n	8001f38 <__aeabi_ddiv+0x288>
 800226a:	210f      	movs	r1, #15
 800226c:	4011      	ands	r1, r2
 800226e:	2904      	cmp	r1, #4
 8002270:	d100      	bne.n	8002274 <__aeabi_ddiv+0x5c4>
 8002272:	e661      	b.n	8001f38 <__aeabi_ddiv+0x288>
 8002274:	0011      	movs	r1, r2
 8002276:	e7f2      	b.n	800225e <__aeabi_ddiv+0x5ae>
 8002278:	42bc      	cmp	r4, r7
 800227a:	d800      	bhi.n	800227e <__aeabi_ddiv+0x5ce>
 800227c:	e60a      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 800227e:	2302      	movs	r3, #2
 8002280:	425b      	negs	r3, r3
 8002282:	469c      	mov	ip, r3
 8002284:	9900      	ldr	r1, [sp, #0]
 8002286:	444f      	add	r7, r9
 8002288:	454f      	cmp	r7, r9
 800228a:	419b      	sbcs	r3, r3
 800228c:	44e3      	add	fp, ip
 800228e:	468c      	mov	ip, r1
 8002290:	425b      	negs	r3, r3
 8002292:	4463      	add	r3, ip
 8002294:	18c0      	adds	r0, r0, r3
 8002296:	e5ff      	b.n	8001e98 <__aeabi_ddiv+0x1e8>
 8002298:	4649      	mov	r1, r9
 800229a:	9d00      	ldr	r5, [sp, #0]
 800229c:	0048      	lsls	r0, r1, #1
 800229e:	4548      	cmp	r0, r9
 80022a0:	4189      	sbcs	r1, r1
 80022a2:	46ac      	mov	ip, r5
 80022a4:	4249      	negs	r1, r1
 80022a6:	4461      	add	r1, ip
 80022a8:	4681      	mov	r9, r0
 80022aa:	3a02      	subs	r2, #2
 80022ac:	1864      	adds	r4, r4, r1
 80022ae:	e7c7      	b.n	8002240 <__aeabi_ddiv+0x590>
 80022b0:	2480      	movs	r4, #128	@ 0x80
 80022b2:	465b      	mov	r3, fp
 80022b4:	0324      	lsls	r4, r4, #12
 80022b6:	431c      	orrs	r4, r3
 80022b8:	0324      	lsls	r4, r4, #12
 80022ba:	4690      	mov	r8, r2
 80022bc:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <__aeabi_ddiv+0x620>)
 80022be:	0b24      	lsrs	r4, r4, #12
 80022c0:	e556      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80022c2:	4599      	cmp	r9, r3
 80022c4:	d3e8      	bcc.n	8002298 <__aeabi_ddiv+0x5e8>
 80022c6:	000a      	movs	r2, r1
 80022c8:	e7bd      	b.n	8002246 <__aeabi_ddiv+0x596>
 80022ca:	2300      	movs	r3, #0
 80022cc:	e708      	b.n	80020e0 <__aeabi_ddiv+0x430>
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	000007ff 	.word	0x000007ff
 80022d4:	0000043e 	.word	0x0000043e
 80022d8:	0000041e 	.word	0x0000041e
 80022dc:	000003ff 	.word	0x000003ff
 80022e0:	fffffc02 	.word	0xfffffc02

080022e4 <__eqdf2>:
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e6:	4657      	mov	r7, sl
 80022e8:	46de      	mov	lr, fp
 80022ea:	464e      	mov	r6, r9
 80022ec:	4645      	mov	r5, r8
 80022ee:	b5e0      	push	{r5, r6, r7, lr}
 80022f0:	000d      	movs	r5, r1
 80022f2:	0004      	movs	r4, r0
 80022f4:	0fe8      	lsrs	r0, r5, #31
 80022f6:	4683      	mov	fp, r0
 80022f8:	0309      	lsls	r1, r1, #12
 80022fa:	0fd8      	lsrs	r0, r3, #31
 80022fc:	0b09      	lsrs	r1, r1, #12
 80022fe:	4682      	mov	sl, r0
 8002300:	4819      	ldr	r0, [pc, #100]	@ (8002368 <__eqdf2+0x84>)
 8002302:	468c      	mov	ip, r1
 8002304:	031f      	lsls	r7, r3, #12
 8002306:	0069      	lsls	r1, r5, #1
 8002308:	005e      	lsls	r6, r3, #1
 800230a:	0d49      	lsrs	r1, r1, #21
 800230c:	0b3f      	lsrs	r7, r7, #12
 800230e:	0d76      	lsrs	r6, r6, #21
 8002310:	4281      	cmp	r1, r0
 8002312:	d018      	beq.n	8002346 <__eqdf2+0x62>
 8002314:	4286      	cmp	r6, r0
 8002316:	d00f      	beq.n	8002338 <__eqdf2+0x54>
 8002318:	2001      	movs	r0, #1
 800231a:	42b1      	cmp	r1, r6
 800231c:	d10d      	bne.n	800233a <__eqdf2+0x56>
 800231e:	45bc      	cmp	ip, r7
 8002320:	d10b      	bne.n	800233a <__eqdf2+0x56>
 8002322:	4294      	cmp	r4, r2
 8002324:	d109      	bne.n	800233a <__eqdf2+0x56>
 8002326:	45d3      	cmp	fp, sl
 8002328:	d01c      	beq.n	8002364 <__eqdf2+0x80>
 800232a:	2900      	cmp	r1, #0
 800232c:	d105      	bne.n	800233a <__eqdf2+0x56>
 800232e:	4660      	mov	r0, ip
 8002330:	4320      	orrs	r0, r4
 8002332:	1e43      	subs	r3, r0, #1
 8002334:	4198      	sbcs	r0, r3
 8002336:	e000      	b.n	800233a <__eqdf2+0x56>
 8002338:	2001      	movs	r0, #1
 800233a:	bcf0      	pop	{r4, r5, r6, r7}
 800233c:	46bb      	mov	fp, r7
 800233e:	46b2      	mov	sl, r6
 8002340:	46a9      	mov	r9, r5
 8002342:	46a0      	mov	r8, r4
 8002344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002346:	2001      	movs	r0, #1
 8002348:	428e      	cmp	r6, r1
 800234a:	d1f6      	bne.n	800233a <__eqdf2+0x56>
 800234c:	4661      	mov	r1, ip
 800234e:	4339      	orrs	r1, r7
 8002350:	000f      	movs	r7, r1
 8002352:	4317      	orrs	r7, r2
 8002354:	4327      	orrs	r7, r4
 8002356:	d1f0      	bne.n	800233a <__eqdf2+0x56>
 8002358:	465b      	mov	r3, fp
 800235a:	4652      	mov	r2, sl
 800235c:	1a98      	subs	r0, r3, r2
 800235e:	1e43      	subs	r3, r0, #1
 8002360:	4198      	sbcs	r0, r3
 8002362:	e7ea      	b.n	800233a <__eqdf2+0x56>
 8002364:	2000      	movs	r0, #0
 8002366:	e7e8      	b.n	800233a <__eqdf2+0x56>
 8002368:	000007ff 	.word	0x000007ff

0800236c <__gedf2>:
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	4657      	mov	r7, sl
 8002370:	464e      	mov	r6, r9
 8002372:	4645      	mov	r5, r8
 8002374:	46de      	mov	lr, fp
 8002376:	b5e0      	push	{r5, r6, r7, lr}
 8002378:	000d      	movs	r5, r1
 800237a:	030f      	lsls	r7, r1, #12
 800237c:	0b39      	lsrs	r1, r7, #12
 800237e:	b083      	sub	sp, #12
 8002380:	0004      	movs	r4, r0
 8002382:	4680      	mov	r8, r0
 8002384:	9101      	str	r1, [sp, #4]
 8002386:	0058      	lsls	r0, r3, #1
 8002388:	0fe9      	lsrs	r1, r5, #31
 800238a:	4f31      	ldr	r7, [pc, #196]	@ (8002450 <__gedf2+0xe4>)
 800238c:	0d40      	lsrs	r0, r0, #21
 800238e:	468c      	mov	ip, r1
 8002390:	006e      	lsls	r6, r5, #1
 8002392:	0319      	lsls	r1, r3, #12
 8002394:	4682      	mov	sl, r0
 8002396:	4691      	mov	r9, r2
 8002398:	0d76      	lsrs	r6, r6, #21
 800239a:	0b09      	lsrs	r1, r1, #12
 800239c:	0fd8      	lsrs	r0, r3, #31
 800239e:	42be      	cmp	r6, r7
 80023a0:	d01f      	beq.n	80023e2 <__gedf2+0x76>
 80023a2:	45ba      	cmp	sl, r7
 80023a4:	d00f      	beq.n	80023c6 <__gedf2+0x5a>
 80023a6:	2e00      	cmp	r6, #0
 80023a8:	d12f      	bne.n	800240a <__gedf2+0x9e>
 80023aa:	4655      	mov	r5, sl
 80023ac:	9e01      	ldr	r6, [sp, #4]
 80023ae:	4334      	orrs	r4, r6
 80023b0:	2d00      	cmp	r5, #0
 80023b2:	d127      	bne.n	8002404 <__gedf2+0x98>
 80023b4:	430a      	orrs	r2, r1
 80023b6:	d03a      	beq.n	800242e <__gedf2+0xc2>
 80023b8:	2c00      	cmp	r4, #0
 80023ba:	d145      	bne.n	8002448 <__gedf2+0xdc>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d11a      	bne.n	80023f6 <__gedf2+0x8a>
 80023c0:	2001      	movs	r0, #1
 80023c2:	4240      	negs	r0, r0
 80023c4:	e017      	b.n	80023f6 <__gedf2+0x8a>
 80023c6:	4311      	orrs	r1, r2
 80023c8:	d13b      	bne.n	8002442 <__gedf2+0xd6>
 80023ca:	2e00      	cmp	r6, #0
 80023cc:	d102      	bne.n	80023d4 <__gedf2+0x68>
 80023ce:	9f01      	ldr	r7, [sp, #4]
 80023d0:	4327      	orrs	r7, r4
 80023d2:	d0f3      	beq.n	80023bc <__gedf2+0x50>
 80023d4:	4584      	cmp	ip, r0
 80023d6:	d109      	bne.n	80023ec <__gedf2+0x80>
 80023d8:	4663      	mov	r3, ip
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <__gedf2+0x54>
 80023de:	4660      	mov	r0, ip
 80023e0:	e009      	b.n	80023f6 <__gedf2+0x8a>
 80023e2:	9f01      	ldr	r7, [sp, #4]
 80023e4:	4327      	orrs	r7, r4
 80023e6:	d12c      	bne.n	8002442 <__gedf2+0xd6>
 80023e8:	45b2      	cmp	sl, r6
 80023ea:	d024      	beq.n	8002436 <__gedf2+0xca>
 80023ec:	4663      	mov	r3, ip
 80023ee:	2002      	movs	r0, #2
 80023f0:	3b01      	subs	r3, #1
 80023f2:	4018      	ands	r0, r3
 80023f4:	3801      	subs	r0, #1
 80023f6:	b003      	add	sp, #12
 80023f8:	bcf0      	pop	{r4, r5, r6, r7}
 80023fa:	46bb      	mov	fp, r7
 80023fc:	46b2      	mov	sl, r6
 80023fe:	46a9      	mov	r9, r5
 8002400:	46a0      	mov	r8, r4
 8002402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002404:	2c00      	cmp	r4, #0
 8002406:	d0d9      	beq.n	80023bc <__gedf2+0x50>
 8002408:	e7e4      	b.n	80023d4 <__gedf2+0x68>
 800240a:	4654      	mov	r4, sl
 800240c:	2c00      	cmp	r4, #0
 800240e:	d0ed      	beq.n	80023ec <__gedf2+0x80>
 8002410:	4584      	cmp	ip, r0
 8002412:	d1eb      	bne.n	80023ec <__gedf2+0x80>
 8002414:	4556      	cmp	r6, sl
 8002416:	dce9      	bgt.n	80023ec <__gedf2+0x80>
 8002418:	dbde      	blt.n	80023d8 <__gedf2+0x6c>
 800241a:	9b01      	ldr	r3, [sp, #4]
 800241c:	428b      	cmp	r3, r1
 800241e:	d8e5      	bhi.n	80023ec <__gedf2+0x80>
 8002420:	d1da      	bne.n	80023d8 <__gedf2+0x6c>
 8002422:	45c8      	cmp	r8, r9
 8002424:	d8e2      	bhi.n	80023ec <__gedf2+0x80>
 8002426:	2000      	movs	r0, #0
 8002428:	45c8      	cmp	r8, r9
 800242a:	d2e4      	bcs.n	80023f6 <__gedf2+0x8a>
 800242c:	e7d4      	b.n	80023d8 <__gedf2+0x6c>
 800242e:	2000      	movs	r0, #0
 8002430:	2c00      	cmp	r4, #0
 8002432:	d0e0      	beq.n	80023f6 <__gedf2+0x8a>
 8002434:	e7da      	b.n	80023ec <__gedf2+0x80>
 8002436:	4311      	orrs	r1, r2
 8002438:	d103      	bne.n	8002442 <__gedf2+0xd6>
 800243a:	4584      	cmp	ip, r0
 800243c:	d1d6      	bne.n	80023ec <__gedf2+0x80>
 800243e:	2000      	movs	r0, #0
 8002440:	e7d9      	b.n	80023f6 <__gedf2+0x8a>
 8002442:	2002      	movs	r0, #2
 8002444:	4240      	negs	r0, r0
 8002446:	e7d6      	b.n	80023f6 <__gedf2+0x8a>
 8002448:	4584      	cmp	ip, r0
 800244a:	d0e6      	beq.n	800241a <__gedf2+0xae>
 800244c:	e7ce      	b.n	80023ec <__gedf2+0x80>
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	000007ff 	.word	0x000007ff

08002454 <__ledf2>:
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	4657      	mov	r7, sl
 8002458:	464e      	mov	r6, r9
 800245a:	4645      	mov	r5, r8
 800245c:	46de      	mov	lr, fp
 800245e:	b5e0      	push	{r5, r6, r7, lr}
 8002460:	000d      	movs	r5, r1
 8002462:	030f      	lsls	r7, r1, #12
 8002464:	0004      	movs	r4, r0
 8002466:	4680      	mov	r8, r0
 8002468:	0fe8      	lsrs	r0, r5, #31
 800246a:	0b39      	lsrs	r1, r7, #12
 800246c:	4684      	mov	ip, r0
 800246e:	b083      	sub	sp, #12
 8002470:	0058      	lsls	r0, r3, #1
 8002472:	4f30      	ldr	r7, [pc, #192]	@ (8002534 <__ledf2+0xe0>)
 8002474:	0d40      	lsrs	r0, r0, #21
 8002476:	9101      	str	r1, [sp, #4]
 8002478:	031e      	lsls	r6, r3, #12
 800247a:	0069      	lsls	r1, r5, #1
 800247c:	4682      	mov	sl, r0
 800247e:	4691      	mov	r9, r2
 8002480:	0d49      	lsrs	r1, r1, #21
 8002482:	0b36      	lsrs	r6, r6, #12
 8002484:	0fd8      	lsrs	r0, r3, #31
 8002486:	42b9      	cmp	r1, r7
 8002488:	d020      	beq.n	80024cc <__ledf2+0x78>
 800248a:	45ba      	cmp	sl, r7
 800248c:	d00f      	beq.n	80024ae <__ledf2+0x5a>
 800248e:	2900      	cmp	r1, #0
 8002490:	d12b      	bne.n	80024ea <__ledf2+0x96>
 8002492:	9901      	ldr	r1, [sp, #4]
 8002494:	430c      	orrs	r4, r1
 8002496:	4651      	mov	r1, sl
 8002498:	2900      	cmp	r1, #0
 800249a:	d137      	bne.n	800250c <__ledf2+0xb8>
 800249c:	4332      	orrs	r2, r6
 800249e:	d038      	beq.n	8002512 <__ledf2+0xbe>
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	d144      	bne.n	800252e <__ledf2+0xda>
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d119      	bne.n	80024dc <__ledf2+0x88>
 80024a8:	2001      	movs	r0, #1
 80024aa:	4240      	negs	r0, r0
 80024ac:	e016      	b.n	80024dc <__ledf2+0x88>
 80024ae:	4316      	orrs	r6, r2
 80024b0:	d113      	bne.n	80024da <__ledf2+0x86>
 80024b2:	2900      	cmp	r1, #0
 80024b4:	d102      	bne.n	80024bc <__ledf2+0x68>
 80024b6:	9f01      	ldr	r7, [sp, #4]
 80024b8:	4327      	orrs	r7, r4
 80024ba:	d0f3      	beq.n	80024a4 <__ledf2+0x50>
 80024bc:	4584      	cmp	ip, r0
 80024be:	d020      	beq.n	8002502 <__ledf2+0xae>
 80024c0:	4663      	mov	r3, ip
 80024c2:	2002      	movs	r0, #2
 80024c4:	3b01      	subs	r3, #1
 80024c6:	4018      	ands	r0, r3
 80024c8:	3801      	subs	r0, #1
 80024ca:	e007      	b.n	80024dc <__ledf2+0x88>
 80024cc:	9f01      	ldr	r7, [sp, #4]
 80024ce:	4327      	orrs	r7, r4
 80024d0:	d103      	bne.n	80024da <__ledf2+0x86>
 80024d2:	458a      	cmp	sl, r1
 80024d4:	d1f4      	bne.n	80024c0 <__ledf2+0x6c>
 80024d6:	4316      	orrs	r6, r2
 80024d8:	d01f      	beq.n	800251a <__ledf2+0xc6>
 80024da:	2002      	movs	r0, #2
 80024dc:	b003      	add	sp, #12
 80024de:	bcf0      	pop	{r4, r5, r6, r7}
 80024e0:	46bb      	mov	fp, r7
 80024e2:	46b2      	mov	sl, r6
 80024e4:	46a9      	mov	r9, r5
 80024e6:	46a0      	mov	r8, r4
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ea:	4654      	mov	r4, sl
 80024ec:	2c00      	cmp	r4, #0
 80024ee:	d0e7      	beq.n	80024c0 <__ledf2+0x6c>
 80024f0:	4584      	cmp	ip, r0
 80024f2:	d1e5      	bne.n	80024c0 <__ledf2+0x6c>
 80024f4:	4551      	cmp	r1, sl
 80024f6:	dce3      	bgt.n	80024c0 <__ledf2+0x6c>
 80024f8:	db03      	blt.n	8002502 <__ledf2+0xae>
 80024fa:	9b01      	ldr	r3, [sp, #4]
 80024fc:	42b3      	cmp	r3, r6
 80024fe:	d8df      	bhi.n	80024c0 <__ledf2+0x6c>
 8002500:	d00f      	beq.n	8002522 <__ledf2+0xce>
 8002502:	4663      	mov	r3, ip
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0cf      	beq.n	80024a8 <__ledf2+0x54>
 8002508:	4660      	mov	r0, ip
 800250a:	e7e7      	b.n	80024dc <__ledf2+0x88>
 800250c:	2c00      	cmp	r4, #0
 800250e:	d0c9      	beq.n	80024a4 <__ledf2+0x50>
 8002510:	e7d4      	b.n	80024bc <__ledf2+0x68>
 8002512:	2000      	movs	r0, #0
 8002514:	2c00      	cmp	r4, #0
 8002516:	d0e1      	beq.n	80024dc <__ledf2+0x88>
 8002518:	e7d2      	b.n	80024c0 <__ledf2+0x6c>
 800251a:	4584      	cmp	ip, r0
 800251c:	d1d0      	bne.n	80024c0 <__ledf2+0x6c>
 800251e:	2000      	movs	r0, #0
 8002520:	e7dc      	b.n	80024dc <__ledf2+0x88>
 8002522:	45c8      	cmp	r8, r9
 8002524:	d8cc      	bhi.n	80024c0 <__ledf2+0x6c>
 8002526:	2000      	movs	r0, #0
 8002528:	45c8      	cmp	r8, r9
 800252a:	d2d7      	bcs.n	80024dc <__ledf2+0x88>
 800252c:	e7e9      	b.n	8002502 <__ledf2+0xae>
 800252e:	4584      	cmp	ip, r0
 8002530:	d0e3      	beq.n	80024fa <__ledf2+0xa6>
 8002532:	e7c5      	b.n	80024c0 <__ledf2+0x6c>
 8002534:	000007ff 	.word	0x000007ff

08002538 <__aeabi_dmul>:
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253a:	4657      	mov	r7, sl
 800253c:	46de      	mov	lr, fp
 800253e:	464e      	mov	r6, r9
 8002540:	4645      	mov	r5, r8
 8002542:	b5e0      	push	{r5, r6, r7, lr}
 8002544:	001f      	movs	r7, r3
 8002546:	030b      	lsls	r3, r1, #12
 8002548:	0b1b      	lsrs	r3, r3, #12
 800254a:	0016      	movs	r6, r2
 800254c:	469a      	mov	sl, r3
 800254e:	0fca      	lsrs	r2, r1, #31
 8002550:	004b      	lsls	r3, r1, #1
 8002552:	0004      	movs	r4, r0
 8002554:	4693      	mov	fp, r2
 8002556:	b087      	sub	sp, #28
 8002558:	0d5b      	lsrs	r3, r3, #21
 800255a:	d100      	bne.n	800255e <__aeabi_dmul+0x26>
 800255c:	e0d5      	b.n	800270a <__aeabi_dmul+0x1d2>
 800255e:	4abb      	ldr	r2, [pc, #748]	@ (800284c <__aeabi_dmul+0x314>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d100      	bne.n	8002566 <__aeabi_dmul+0x2e>
 8002564:	e0f8      	b.n	8002758 <__aeabi_dmul+0x220>
 8002566:	4651      	mov	r1, sl
 8002568:	0f42      	lsrs	r2, r0, #29
 800256a:	00c9      	lsls	r1, r1, #3
 800256c:	430a      	orrs	r2, r1
 800256e:	2180      	movs	r1, #128	@ 0x80
 8002570:	0409      	lsls	r1, r1, #16
 8002572:	4311      	orrs	r1, r2
 8002574:	00c2      	lsls	r2, r0, #3
 8002576:	4691      	mov	r9, r2
 8002578:	4ab5      	ldr	r2, [pc, #724]	@ (8002850 <__aeabi_dmul+0x318>)
 800257a:	468a      	mov	sl, r1
 800257c:	189d      	adds	r5, r3, r2
 800257e:	2300      	movs	r3, #0
 8002580:	4698      	mov	r8, r3
 8002582:	9302      	str	r3, [sp, #8]
 8002584:	033c      	lsls	r4, r7, #12
 8002586:	007b      	lsls	r3, r7, #1
 8002588:	0ffa      	lsrs	r2, r7, #31
 800258a:	0030      	movs	r0, r6
 800258c:	0b24      	lsrs	r4, r4, #12
 800258e:	0d5b      	lsrs	r3, r3, #21
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	d100      	bne.n	8002596 <__aeabi_dmul+0x5e>
 8002594:	e096      	b.n	80026c4 <__aeabi_dmul+0x18c>
 8002596:	4aad      	ldr	r2, [pc, #692]	@ (800284c <__aeabi_dmul+0x314>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d031      	beq.n	8002600 <__aeabi_dmul+0xc8>
 800259c:	0f72      	lsrs	r2, r6, #29
 800259e:	00e4      	lsls	r4, r4, #3
 80025a0:	4322      	orrs	r2, r4
 80025a2:	2480      	movs	r4, #128	@ 0x80
 80025a4:	0424      	lsls	r4, r4, #16
 80025a6:	4314      	orrs	r4, r2
 80025a8:	4aa9      	ldr	r2, [pc, #676]	@ (8002850 <__aeabi_dmul+0x318>)
 80025aa:	00f0      	lsls	r0, r6, #3
 80025ac:	4694      	mov	ip, r2
 80025ae:	4463      	add	r3, ip
 80025b0:	195b      	adds	r3, r3, r5
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	9201      	str	r2, [sp, #4]
 80025b6:	4642      	mov	r2, r8
 80025b8:	2600      	movs	r6, #0
 80025ba:	2a0a      	cmp	r2, #10
 80025bc:	dc42      	bgt.n	8002644 <__aeabi_dmul+0x10c>
 80025be:	465a      	mov	r2, fp
 80025c0:	9900      	ldr	r1, [sp, #0]
 80025c2:	404a      	eors	r2, r1
 80025c4:	4693      	mov	fp, r2
 80025c6:	4642      	mov	r2, r8
 80025c8:	2a02      	cmp	r2, #2
 80025ca:	dc32      	bgt.n	8002632 <__aeabi_dmul+0xfa>
 80025cc:	3a01      	subs	r2, #1
 80025ce:	2a01      	cmp	r2, #1
 80025d0:	d900      	bls.n	80025d4 <__aeabi_dmul+0x9c>
 80025d2:	e149      	b.n	8002868 <__aeabi_dmul+0x330>
 80025d4:	2e02      	cmp	r6, #2
 80025d6:	d100      	bne.n	80025da <__aeabi_dmul+0xa2>
 80025d8:	e0ca      	b.n	8002770 <__aeabi_dmul+0x238>
 80025da:	2e01      	cmp	r6, #1
 80025dc:	d13d      	bne.n	800265a <__aeabi_dmul+0x122>
 80025de:	2300      	movs	r3, #0
 80025e0:	2400      	movs	r4, #0
 80025e2:	2200      	movs	r2, #0
 80025e4:	0010      	movs	r0, r2
 80025e6:	465a      	mov	r2, fp
 80025e8:	051b      	lsls	r3, r3, #20
 80025ea:	4323      	orrs	r3, r4
 80025ec:	07d2      	lsls	r2, r2, #31
 80025ee:	4313      	orrs	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	b007      	add	sp, #28
 80025f4:	bcf0      	pop	{r4, r5, r6, r7}
 80025f6:	46bb      	mov	fp, r7
 80025f8:	46b2      	mov	sl, r6
 80025fa:	46a9      	mov	r9, r5
 80025fc:	46a0      	mov	r8, r4
 80025fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002600:	4b92      	ldr	r3, [pc, #584]	@ (800284c <__aeabi_dmul+0x314>)
 8002602:	4326      	orrs	r6, r4
 8002604:	18eb      	adds	r3, r5, r3
 8002606:	2e00      	cmp	r6, #0
 8002608:	d100      	bne.n	800260c <__aeabi_dmul+0xd4>
 800260a:	e0bb      	b.n	8002784 <__aeabi_dmul+0x24c>
 800260c:	2203      	movs	r2, #3
 800260e:	4641      	mov	r1, r8
 8002610:	4311      	orrs	r1, r2
 8002612:	465a      	mov	r2, fp
 8002614:	4688      	mov	r8, r1
 8002616:	9900      	ldr	r1, [sp, #0]
 8002618:	404a      	eors	r2, r1
 800261a:	2180      	movs	r1, #128	@ 0x80
 800261c:	0109      	lsls	r1, r1, #4
 800261e:	468c      	mov	ip, r1
 8002620:	0029      	movs	r1, r5
 8002622:	4461      	add	r1, ip
 8002624:	9101      	str	r1, [sp, #4]
 8002626:	4641      	mov	r1, r8
 8002628:	290a      	cmp	r1, #10
 800262a:	dd00      	ble.n	800262e <__aeabi_dmul+0xf6>
 800262c:	e233      	b.n	8002a96 <__aeabi_dmul+0x55e>
 800262e:	4693      	mov	fp, r2
 8002630:	2603      	movs	r6, #3
 8002632:	4642      	mov	r2, r8
 8002634:	2701      	movs	r7, #1
 8002636:	4097      	lsls	r7, r2
 8002638:	21a6      	movs	r1, #166	@ 0xa6
 800263a:	003a      	movs	r2, r7
 800263c:	00c9      	lsls	r1, r1, #3
 800263e:	400a      	ands	r2, r1
 8002640:	420f      	tst	r7, r1
 8002642:	d031      	beq.n	80026a8 <__aeabi_dmul+0x170>
 8002644:	9e02      	ldr	r6, [sp, #8]
 8002646:	2e02      	cmp	r6, #2
 8002648:	d100      	bne.n	800264c <__aeabi_dmul+0x114>
 800264a:	e235      	b.n	8002ab8 <__aeabi_dmul+0x580>
 800264c:	2e03      	cmp	r6, #3
 800264e:	d100      	bne.n	8002652 <__aeabi_dmul+0x11a>
 8002650:	e1d2      	b.n	80029f8 <__aeabi_dmul+0x4c0>
 8002652:	4654      	mov	r4, sl
 8002654:	4648      	mov	r0, r9
 8002656:	2e01      	cmp	r6, #1
 8002658:	d0c1      	beq.n	80025de <__aeabi_dmul+0xa6>
 800265a:	9a01      	ldr	r2, [sp, #4]
 800265c:	4b7d      	ldr	r3, [pc, #500]	@ (8002854 <__aeabi_dmul+0x31c>)
 800265e:	4694      	mov	ip, r2
 8002660:	4463      	add	r3, ip
 8002662:	2b00      	cmp	r3, #0
 8002664:	dc00      	bgt.n	8002668 <__aeabi_dmul+0x130>
 8002666:	e0c0      	b.n	80027ea <__aeabi_dmul+0x2b2>
 8002668:	0742      	lsls	r2, r0, #29
 800266a:	d009      	beq.n	8002680 <__aeabi_dmul+0x148>
 800266c:	220f      	movs	r2, #15
 800266e:	4002      	ands	r2, r0
 8002670:	2a04      	cmp	r2, #4
 8002672:	d005      	beq.n	8002680 <__aeabi_dmul+0x148>
 8002674:	1d02      	adds	r2, r0, #4
 8002676:	4282      	cmp	r2, r0
 8002678:	4180      	sbcs	r0, r0
 800267a:	4240      	negs	r0, r0
 800267c:	1824      	adds	r4, r4, r0
 800267e:	0010      	movs	r0, r2
 8002680:	01e2      	lsls	r2, r4, #7
 8002682:	d506      	bpl.n	8002692 <__aeabi_dmul+0x15a>
 8002684:	4b74      	ldr	r3, [pc, #464]	@ (8002858 <__aeabi_dmul+0x320>)
 8002686:	9a01      	ldr	r2, [sp, #4]
 8002688:	401c      	ands	r4, r3
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	4694      	mov	ip, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4463      	add	r3, ip
 8002692:	4a72      	ldr	r2, [pc, #456]	@ (800285c <__aeabi_dmul+0x324>)
 8002694:	4293      	cmp	r3, r2
 8002696:	dc6b      	bgt.n	8002770 <__aeabi_dmul+0x238>
 8002698:	0762      	lsls	r2, r4, #29
 800269a:	08c0      	lsrs	r0, r0, #3
 800269c:	0264      	lsls	r4, r4, #9
 800269e:	055b      	lsls	r3, r3, #21
 80026a0:	4302      	orrs	r2, r0
 80026a2:	0b24      	lsrs	r4, r4, #12
 80026a4:	0d5b      	lsrs	r3, r3, #21
 80026a6:	e79d      	b.n	80025e4 <__aeabi_dmul+0xac>
 80026a8:	2190      	movs	r1, #144	@ 0x90
 80026aa:	0089      	lsls	r1, r1, #2
 80026ac:	420f      	tst	r7, r1
 80026ae:	d163      	bne.n	8002778 <__aeabi_dmul+0x240>
 80026b0:	2288      	movs	r2, #136	@ 0x88
 80026b2:	423a      	tst	r2, r7
 80026b4:	d100      	bne.n	80026b8 <__aeabi_dmul+0x180>
 80026b6:	e0d7      	b.n	8002868 <__aeabi_dmul+0x330>
 80026b8:	9b00      	ldr	r3, [sp, #0]
 80026ba:	46a2      	mov	sl, r4
 80026bc:	469b      	mov	fp, r3
 80026be:	4681      	mov	r9, r0
 80026c0:	9602      	str	r6, [sp, #8]
 80026c2:	e7bf      	b.n	8002644 <__aeabi_dmul+0x10c>
 80026c4:	0023      	movs	r3, r4
 80026c6:	4333      	orrs	r3, r6
 80026c8:	d100      	bne.n	80026cc <__aeabi_dmul+0x194>
 80026ca:	e07f      	b.n	80027cc <__aeabi_dmul+0x294>
 80026cc:	2c00      	cmp	r4, #0
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dmul+0x19a>
 80026d0:	e1ad      	b.n	8002a2e <__aeabi_dmul+0x4f6>
 80026d2:	0020      	movs	r0, r4
 80026d4:	f000 ff10 	bl	80034f8 <__clzsi2>
 80026d8:	0002      	movs	r2, r0
 80026da:	0003      	movs	r3, r0
 80026dc:	3a0b      	subs	r2, #11
 80026de:	201d      	movs	r0, #29
 80026e0:	0019      	movs	r1, r3
 80026e2:	1a82      	subs	r2, r0, r2
 80026e4:	0030      	movs	r0, r6
 80026e6:	3908      	subs	r1, #8
 80026e8:	40d0      	lsrs	r0, r2
 80026ea:	408c      	lsls	r4, r1
 80026ec:	4304      	orrs	r4, r0
 80026ee:	0030      	movs	r0, r6
 80026f0:	4088      	lsls	r0, r1
 80026f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002860 <__aeabi_dmul+0x328>)
 80026f4:	1aeb      	subs	r3, r5, r3
 80026f6:	4694      	mov	ip, r2
 80026f8:	4463      	add	r3, ip
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	9201      	str	r2, [sp, #4]
 80026fe:	4642      	mov	r2, r8
 8002700:	2600      	movs	r6, #0
 8002702:	2a0a      	cmp	r2, #10
 8002704:	dc00      	bgt.n	8002708 <__aeabi_dmul+0x1d0>
 8002706:	e75a      	b.n	80025be <__aeabi_dmul+0x86>
 8002708:	e79c      	b.n	8002644 <__aeabi_dmul+0x10c>
 800270a:	4653      	mov	r3, sl
 800270c:	4303      	orrs	r3, r0
 800270e:	4699      	mov	r9, r3
 8002710:	d054      	beq.n	80027bc <__aeabi_dmul+0x284>
 8002712:	4653      	mov	r3, sl
 8002714:	2b00      	cmp	r3, #0
 8002716:	d100      	bne.n	800271a <__aeabi_dmul+0x1e2>
 8002718:	e177      	b.n	8002a0a <__aeabi_dmul+0x4d2>
 800271a:	4650      	mov	r0, sl
 800271c:	f000 feec 	bl	80034f8 <__clzsi2>
 8002720:	230b      	movs	r3, #11
 8002722:	425b      	negs	r3, r3
 8002724:	469c      	mov	ip, r3
 8002726:	0002      	movs	r2, r0
 8002728:	4484      	add	ip, r0
 800272a:	0011      	movs	r1, r2
 800272c:	4650      	mov	r0, sl
 800272e:	3908      	subs	r1, #8
 8002730:	4088      	lsls	r0, r1
 8002732:	231d      	movs	r3, #29
 8002734:	4680      	mov	r8, r0
 8002736:	4660      	mov	r0, ip
 8002738:	1a1b      	subs	r3, r3, r0
 800273a:	0020      	movs	r0, r4
 800273c:	40d8      	lsrs	r0, r3
 800273e:	0003      	movs	r3, r0
 8002740:	4640      	mov	r0, r8
 8002742:	4303      	orrs	r3, r0
 8002744:	469a      	mov	sl, r3
 8002746:	0023      	movs	r3, r4
 8002748:	408b      	lsls	r3, r1
 800274a:	4699      	mov	r9, r3
 800274c:	2300      	movs	r3, #0
 800274e:	4d44      	ldr	r5, [pc, #272]	@ (8002860 <__aeabi_dmul+0x328>)
 8002750:	4698      	mov	r8, r3
 8002752:	1aad      	subs	r5, r5, r2
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	e715      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002758:	4652      	mov	r2, sl
 800275a:	4302      	orrs	r2, r0
 800275c:	4691      	mov	r9, r2
 800275e:	d126      	bne.n	80027ae <__aeabi_dmul+0x276>
 8002760:	2200      	movs	r2, #0
 8002762:	001d      	movs	r5, r3
 8002764:	2302      	movs	r3, #2
 8002766:	4692      	mov	sl, r2
 8002768:	3208      	adds	r2, #8
 800276a:	4690      	mov	r8, r2
 800276c:	9302      	str	r3, [sp, #8]
 800276e:	e709      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002770:	2400      	movs	r4, #0
 8002772:	2200      	movs	r2, #0
 8002774:	4b35      	ldr	r3, [pc, #212]	@ (800284c <__aeabi_dmul+0x314>)
 8002776:	e735      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002778:	2300      	movs	r3, #0
 800277a:	2480      	movs	r4, #128	@ 0x80
 800277c:	469b      	mov	fp, r3
 800277e:	0324      	lsls	r4, r4, #12
 8002780:	4b32      	ldr	r3, [pc, #200]	@ (800284c <__aeabi_dmul+0x314>)
 8002782:	e72f      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002784:	2202      	movs	r2, #2
 8002786:	4641      	mov	r1, r8
 8002788:	4311      	orrs	r1, r2
 800278a:	2280      	movs	r2, #128	@ 0x80
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	4694      	mov	ip, r2
 8002790:	002a      	movs	r2, r5
 8002792:	4462      	add	r2, ip
 8002794:	4688      	mov	r8, r1
 8002796:	9201      	str	r2, [sp, #4]
 8002798:	290a      	cmp	r1, #10
 800279a:	dd00      	ble.n	800279e <__aeabi_dmul+0x266>
 800279c:	e752      	b.n	8002644 <__aeabi_dmul+0x10c>
 800279e:	465a      	mov	r2, fp
 80027a0:	2000      	movs	r0, #0
 80027a2:	9900      	ldr	r1, [sp, #0]
 80027a4:	0004      	movs	r4, r0
 80027a6:	404a      	eors	r2, r1
 80027a8:	4693      	mov	fp, r2
 80027aa:	2602      	movs	r6, #2
 80027ac:	e70b      	b.n	80025c6 <__aeabi_dmul+0x8e>
 80027ae:	220c      	movs	r2, #12
 80027b0:	001d      	movs	r5, r3
 80027b2:	2303      	movs	r3, #3
 80027b4:	4681      	mov	r9, r0
 80027b6:	4690      	mov	r8, r2
 80027b8:	9302      	str	r3, [sp, #8]
 80027ba:	e6e3      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027bc:	2300      	movs	r3, #0
 80027be:	469a      	mov	sl, r3
 80027c0:	3304      	adds	r3, #4
 80027c2:	4698      	mov	r8, r3
 80027c4:	3b03      	subs	r3, #3
 80027c6:	2500      	movs	r5, #0
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	e6db      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027cc:	4642      	mov	r2, r8
 80027ce:	3301      	adds	r3, #1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	002b      	movs	r3, r5
 80027d4:	4690      	mov	r8, r2
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	9201      	str	r2, [sp, #4]
 80027da:	4642      	mov	r2, r8
 80027dc:	2400      	movs	r4, #0
 80027de:	2000      	movs	r0, #0
 80027e0:	2601      	movs	r6, #1
 80027e2:	2a0a      	cmp	r2, #10
 80027e4:	dc00      	bgt.n	80027e8 <__aeabi_dmul+0x2b0>
 80027e6:	e6ea      	b.n	80025be <__aeabi_dmul+0x86>
 80027e8:	e72c      	b.n	8002644 <__aeabi_dmul+0x10c>
 80027ea:	2201      	movs	r2, #1
 80027ec:	1ad2      	subs	r2, r2, r3
 80027ee:	2a38      	cmp	r2, #56	@ 0x38
 80027f0:	dd00      	ble.n	80027f4 <__aeabi_dmul+0x2bc>
 80027f2:	e6f4      	b.n	80025de <__aeabi_dmul+0xa6>
 80027f4:	2a1f      	cmp	r2, #31
 80027f6:	dc00      	bgt.n	80027fa <__aeabi_dmul+0x2c2>
 80027f8:	e12a      	b.n	8002a50 <__aeabi_dmul+0x518>
 80027fa:	211f      	movs	r1, #31
 80027fc:	4249      	negs	r1, r1
 80027fe:	1acb      	subs	r3, r1, r3
 8002800:	0021      	movs	r1, r4
 8002802:	40d9      	lsrs	r1, r3
 8002804:	000b      	movs	r3, r1
 8002806:	2a20      	cmp	r2, #32
 8002808:	d005      	beq.n	8002816 <__aeabi_dmul+0x2de>
 800280a:	4a16      	ldr	r2, [pc, #88]	@ (8002864 <__aeabi_dmul+0x32c>)
 800280c:	9d01      	ldr	r5, [sp, #4]
 800280e:	4694      	mov	ip, r2
 8002810:	4465      	add	r5, ip
 8002812:	40ac      	lsls	r4, r5
 8002814:	4320      	orrs	r0, r4
 8002816:	1e42      	subs	r2, r0, #1
 8002818:	4190      	sbcs	r0, r2
 800281a:	4318      	orrs	r0, r3
 800281c:	2307      	movs	r3, #7
 800281e:	0019      	movs	r1, r3
 8002820:	2400      	movs	r4, #0
 8002822:	4001      	ands	r1, r0
 8002824:	4203      	tst	r3, r0
 8002826:	d00c      	beq.n	8002842 <__aeabi_dmul+0x30a>
 8002828:	230f      	movs	r3, #15
 800282a:	4003      	ands	r3, r0
 800282c:	2b04      	cmp	r3, #4
 800282e:	d100      	bne.n	8002832 <__aeabi_dmul+0x2fa>
 8002830:	e140      	b.n	8002ab4 <__aeabi_dmul+0x57c>
 8002832:	1d03      	adds	r3, r0, #4
 8002834:	4283      	cmp	r3, r0
 8002836:	41a4      	sbcs	r4, r4
 8002838:	0018      	movs	r0, r3
 800283a:	4264      	negs	r4, r4
 800283c:	0761      	lsls	r1, r4, #29
 800283e:	0264      	lsls	r4, r4, #9
 8002840:	0b24      	lsrs	r4, r4, #12
 8002842:	08c2      	lsrs	r2, r0, #3
 8002844:	2300      	movs	r3, #0
 8002846:	430a      	orrs	r2, r1
 8002848:	e6cc      	b.n	80025e4 <__aeabi_dmul+0xac>
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	000007ff 	.word	0x000007ff
 8002850:	fffffc01 	.word	0xfffffc01
 8002854:	000003ff 	.word	0x000003ff
 8002858:	feffffff 	.word	0xfeffffff
 800285c:	000007fe 	.word	0x000007fe
 8002860:	fffffc0d 	.word	0xfffffc0d
 8002864:	0000043e 	.word	0x0000043e
 8002868:	4649      	mov	r1, r9
 800286a:	464a      	mov	r2, r9
 800286c:	0409      	lsls	r1, r1, #16
 800286e:	0c09      	lsrs	r1, r1, #16
 8002870:	000d      	movs	r5, r1
 8002872:	0c16      	lsrs	r6, r2, #16
 8002874:	0c02      	lsrs	r2, r0, #16
 8002876:	0400      	lsls	r0, r0, #16
 8002878:	0c00      	lsrs	r0, r0, #16
 800287a:	4345      	muls	r5, r0
 800287c:	46ac      	mov	ip, r5
 800287e:	0005      	movs	r5, r0
 8002880:	4375      	muls	r5, r6
 8002882:	46a8      	mov	r8, r5
 8002884:	0015      	movs	r5, r2
 8002886:	000f      	movs	r7, r1
 8002888:	4375      	muls	r5, r6
 800288a:	9200      	str	r2, [sp, #0]
 800288c:	9502      	str	r5, [sp, #8]
 800288e:	002a      	movs	r2, r5
 8002890:	9d00      	ldr	r5, [sp, #0]
 8002892:	436f      	muls	r7, r5
 8002894:	4665      	mov	r5, ip
 8002896:	0c2d      	lsrs	r5, r5, #16
 8002898:	46a9      	mov	r9, r5
 800289a:	4447      	add	r7, r8
 800289c:	444f      	add	r7, r9
 800289e:	45b8      	cmp	r8, r7
 80028a0:	d905      	bls.n	80028ae <__aeabi_dmul+0x376>
 80028a2:	0015      	movs	r5, r2
 80028a4:	2280      	movs	r2, #128	@ 0x80
 80028a6:	0252      	lsls	r2, r2, #9
 80028a8:	4690      	mov	r8, r2
 80028aa:	4445      	add	r5, r8
 80028ac:	9502      	str	r5, [sp, #8]
 80028ae:	0c3d      	lsrs	r5, r7, #16
 80028b0:	9503      	str	r5, [sp, #12]
 80028b2:	4665      	mov	r5, ip
 80028b4:	042d      	lsls	r5, r5, #16
 80028b6:	043f      	lsls	r7, r7, #16
 80028b8:	0c2d      	lsrs	r5, r5, #16
 80028ba:	46ac      	mov	ip, r5
 80028bc:	003d      	movs	r5, r7
 80028be:	4465      	add	r5, ip
 80028c0:	9504      	str	r5, [sp, #16]
 80028c2:	0c25      	lsrs	r5, r4, #16
 80028c4:	0424      	lsls	r4, r4, #16
 80028c6:	0c24      	lsrs	r4, r4, #16
 80028c8:	46ac      	mov	ip, r5
 80028ca:	0025      	movs	r5, r4
 80028cc:	4375      	muls	r5, r6
 80028ce:	46a8      	mov	r8, r5
 80028d0:	4665      	mov	r5, ip
 80028d2:	000f      	movs	r7, r1
 80028d4:	4369      	muls	r1, r5
 80028d6:	4441      	add	r1, r8
 80028d8:	4689      	mov	r9, r1
 80028da:	4367      	muls	r7, r4
 80028dc:	0c39      	lsrs	r1, r7, #16
 80028de:	4449      	add	r1, r9
 80028e0:	436e      	muls	r6, r5
 80028e2:	4588      	cmp	r8, r1
 80028e4:	d903      	bls.n	80028ee <__aeabi_dmul+0x3b6>
 80028e6:	2280      	movs	r2, #128	@ 0x80
 80028e8:	0252      	lsls	r2, r2, #9
 80028ea:	4690      	mov	r8, r2
 80028ec:	4446      	add	r6, r8
 80028ee:	0c0d      	lsrs	r5, r1, #16
 80028f0:	46a8      	mov	r8, r5
 80028f2:	0035      	movs	r5, r6
 80028f4:	4445      	add	r5, r8
 80028f6:	9505      	str	r5, [sp, #20]
 80028f8:	9d03      	ldr	r5, [sp, #12]
 80028fa:	043f      	lsls	r7, r7, #16
 80028fc:	46a8      	mov	r8, r5
 80028fe:	0c3f      	lsrs	r7, r7, #16
 8002900:	0409      	lsls	r1, r1, #16
 8002902:	19c9      	adds	r1, r1, r7
 8002904:	4488      	add	r8, r1
 8002906:	4645      	mov	r5, r8
 8002908:	9503      	str	r5, [sp, #12]
 800290a:	4655      	mov	r5, sl
 800290c:	042e      	lsls	r6, r5, #16
 800290e:	0c36      	lsrs	r6, r6, #16
 8002910:	0c2f      	lsrs	r7, r5, #16
 8002912:	0035      	movs	r5, r6
 8002914:	4345      	muls	r5, r0
 8002916:	4378      	muls	r0, r7
 8002918:	4681      	mov	r9, r0
 800291a:	0038      	movs	r0, r7
 800291c:	46a8      	mov	r8, r5
 800291e:	0c2d      	lsrs	r5, r5, #16
 8002920:	46aa      	mov	sl, r5
 8002922:	9a00      	ldr	r2, [sp, #0]
 8002924:	4350      	muls	r0, r2
 8002926:	4372      	muls	r2, r6
 8002928:	444a      	add	r2, r9
 800292a:	4452      	add	r2, sl
 800292c:	4591      	cmp	r9, r2
 800292e:	d903      	bls.n	8002938 <__aeabi_dmul+0x400>
 8002930:	2580      	movs	r5, #128	@ 0x80
 8002932:	026d      	lsls	r5, r5, #9
 8002934:	46a9      	mov	r9, r5
 8002936:	4448      	add	r0, r9
 8002938:	0c15      	lsrs	r5, r2, #16
 800293a:	46a9      	mov	r9, r5
 800293c:	4645      	mov	r5, r8
 800293e:	042d      	lsls	r5, r5, #16
 8002940:	0c2d      	lsrs	r5, r5, #16
 8002942:	46a8      	mov	r8, r5
 8002944:	4665      	mov	r5, ip
 8002946:	437d      	muls	r5, r7
 8002948:	0412      	lsls	r2, r2, #16
 800294a:	4448      	add	r0, r9
 800294c:	4490      	add	r8, r2
 800294e:	46a9      	mov	r9, r5
 8002950:	0032      	movs	r2, r6
 8002952:	4665      	mov	r5, ip
 8002954:	4362      	muls	r2, r4
 8002956:	436e      	muls	r6, r5
 8002958:	437c      	muls	r4, r7
 800295a:	0c17      	lsrs	r7, r2, #16
 800295c:	1936      	adds	r6, r6, r4
 800295e:	19bf      	adds	r7, r7, r6
 8002960:	42bc      	cmp	r4, r7
 8002962:	d903      	bls.n	800296c <__aeabi_dmul+0x434>
 8002964:	2480      	movs	r4, #128	@ 0x80
 8002966:	0264      	lsls	r4, r4, #9
 8002968:	46a4      	mov	ip, r4
 800296a:	44e1      	add	r9, ip
 800296c:	9c02      	ldr	r4, [sp, #8]
 800296e:	9e03      	ldr	r6, [sp, #12]
 8002970:	46a4      	mov	ip, r4
 8002972:	9d05      	ldr	r5, [sp, #20]
 8002974:	4466      	add	r6, ip
 8002976:	428e      	cmp	r6, r1
 8002978:	4189      	sbcs	r1, r1
 800297a:	46ac      	mov	ip, r5
 800297c:	0412      	lsls	r2, r2, #16
 800297e:	043c      	lsls	r4, r7, #16
 8002980:	0c12      	lsrs	r2, r2, #16
 8002982:	18a2      	adds	r2, r4, r2
 8002984:	4462      	add	r2, ip
 8002986:	4249      	negs	r1, r1
 8002988:	1854      	adds	r4, r2, r1
 800298a:	4446      	add	r6, r8
 800298c:	46a4      	mov	ip, r4
 800298e:	4546      	cmp	r6, r8
 8002990:	41a4      	sbcs	r4, r4
 8002992:	4682      	mov	sl, r0
 8002994:	4264      	negs	r4, r4
 8002996:	46a0      	mov	r8, r4
 8002998:	42aa      	cmp	r2, r5
 800299a:	4192      	sbcs	r2, r2
 800299c:	458c      	cmp	ip, r1
 800299e:	4189      	sbcs	r1, r1
 80029a0:	44e2      	add	sl, ip
 80029a2:	44d0      	add	r8, sl
 80029a4:	4249      	negs	r1, r1
 80029a6:	4252      	negs	r2, r2
 80029a8:	430a      	orrs	r2, r1
 80029aa:	45a0      	cmp	r8, r4
 80029ac:	41a4      	sbcs	r4, r4
 80029ae:	4582      	cmp	sl, r0
 80029b0:	4189      	sbcs	r1, r1
 80029b2:	4264      	negs	r4, r4
 80029b4:	4249      	negs	r1, r1
 80029b6:	430c      	orrs	r4, r1
 80029b8:	4641      	mov	r1, r8
 80029ba:	0c3f      	lsrs	r7, r7, #16
 80029bc:	19d2      	adds	r2, r2, r7
 80029be:	1912      	adds	r2, r2, r4
 80029c0:	0dcc      	lsrs	r4, r1, #23
 80029c2:	9904      	ldr	r1, [sp, #16]
 80029c4:	0270      	lsls	r0, r6, #9
 80029c6:	4308      	orrs	r0, r1
 80029c8:	1e41      	subs	r1, r0, #1
 80029ca:	4188      	sbcs	r0, r1
 80029cc:	4641      	mov	r1, r8
 80029ce:	444a      	add	r2, r9
 80029d0:	0df6      	lsrs	r6, r6, #23
 80029d2:	0252      	lsls	r2, r2, #9
 80029d4:	4330      	orrs	r0, r6
 80029d6:	0249      	lsls	r1, r1, #9
 80029d8:	4314      	orrs	r4, r2
 80029da:	4308      	orrs	r0, r1
 80029dc:	01d2      	lsls	r2, r2, #7
 80029de:	d535      	bpl.n	8002a4c <__aeabi_dmul+0x514>
 80029e0:	2201      	movs	r2, #1
 80029e2:	0843      	lsrs	r3, r0, #1
 80029e4:	4002      	ands	r2, r0
 80029e6:	4313      	orrs	r3, r2
 80029e8:	07e0      	lsls	r0, r4, #31
 80029ea:	4318      	orrs	r0, r3
 80029ec:	0864      	lsrs	r4, r4, #1
 80029ee:	e634      	b.n	800265a <__aeabi_dmul+0x122>
 80029f0:	9b00      	ldr	r3, [sp, #0]
 80029f2:	46a2      	mov	sl, r4
 80029f4:	469b      	mov	fp, r3
 80029f6:	4681      	mov	r9, r0
 80029f8:	2480      	movs	r4, #128	@ 0x80
 80029fa:	4653      	mov	r3, sl
 80029fc:	0324      	lsls	r4, r4, #12
 80029fe:	431c      	orrs	r4, r3
 8002a00:	0324      	lsls	r4, r4, #12
 8002a02:	464a      	mov	r2, r9
 8002a04:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002a06:	0b24      	lsrs	r4, r4, #12
 8002a08:	e5ec      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a0a:	f000 fd75 	bl	80034f8 <__clzsi2>
 8002a0e:	2315      	movs	r3, #21
 8002a10:	469c      	mov	ip, r3
 8002a12:	4484      	add	ip, r0
 8002a14:	0002      	movs	r2, r0
 8002a16:	4663      	mov	r3, ip
 8002a18:	3220      	adds	r2, #32
 8002a1a:	2b1c      	cmp	r3, #28
 8002a1c:	dc00      	bgt.n	8002a20 <__aeabi_dmul+0x4e8>
 8002a1e:	e684      	b.n	800272a <__aeabi_dmul+0x1f2>
 8002a20:	2300      	movs	r3, #0
 8002a22:	4699      	mov	r9, r3
 8002a24:	0023      	movs	r3, r4
 8002a26:	3808      	subs	r0, #8
 8002a28:	4083      	lsls	r3, r0
 8002a2a:	469a      	mov	sl, r3
 8002a2c:	e68e      	b.n	800274c <__aeabi_dmul+0x214>
 8002a2e:	f000 fd63 	bl	80034f8 <__clzsi2>
 8002a32:	0002      	movs	r2, r0
 8002a34:	0003      	movs	r3, r0
 8002a36:	3215      	adds	r2, #21
 8002a38:	3320      	adds	r3, #32
 8002a3a:	2a1c      	cmp	r2, #28
 8002a3c:	dc00      	bgt.n	8002a40 <__aeabi_dmul+0x508>
 8002a3e:	e64e      	b.n	80026de <__aeabi_dmul+0x1a6>
 8002a40:	0002      	movs	r2, r0
 8002a42:	0034      	movs	r4, r6
 8002a44:	3a08      	subs	r2, #8
 8002a46:	2000      	movs	r0, #0
 8002a48:	4094      	lsls	r4, r2
 8002a4a:	e652      	b.n	80026f2 <__aeabi_dmul+0x1ba>
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	e604      	b.n	800265a <__aeabi_dmul+0x122>
 8002a50:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac4 <__aeabi_dmul+0x58c>)
 8002a52:	0021      	movs	r1, r4
 8002a54:	469c      	mov	ip, r3
 8002a56:	0003      	movs	r3, r0
 8002a58:	9d01      	ldr	r5, [sp, #4]
 8002a5a:	40d3      	lsrs	r3, r2
 8002a5c:	4465      	add	r5, ip
 8002a5e:	40a9      	lsls	r1, r5
 8002a60:	4319      	orrs	r1, r3
 8002a62:	0003      	movs	r3, r0
 8002a64:	40ab      	lsls	r3, r5
 8002a66:	1e58      	subs	r0, r3, #1
 8002a68:	4183      	sbcs	r3, r0
 8002a6a:	4319      	orrs	r1, r3
 8002a6c:	0008      	movs	r0, r1
 8002a6e:	40d4      	lsrs	r4, r2
 8002a70:	074b      	lsls	r3, r1, #29
 8002a72:	d009      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a74:	230f      	movs	r3, #15
 8002a76:	400b      	ands	r3, r1
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d005      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a7c:	1d0b      	adds	r3, r1, #4
 8002a7e:	428b      	cmp	r3, r1
 8002a80:	4180      	sbcs	r0, r0
 8002a82:	4240      	negs	r0, r0
 8002a84:	1824      	adds	r4, r4, r0
 8002a86:	0018      	movs	r0, r3
 8002a88:	0223      	lsls	r3, r4, #8
 8002a8a:	d400      	bmi.n	8002a8e <__aeabi_dmul+0x556>
 8002a8c:	e6d6      	b.n	800283c <__aeabi_dmul+0x304>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	2400      	movs	r4, #0
 8002a92:	2200      	movs	r2, #0
 8002a94:	e5a6      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a96:	290f      	cmp	r1, #15
 8002a98:	d1aa      	bne.n	80029f0 <__aeabi_dmul+0x4b8>
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	4652      	mov	r2, sl
 8002a9e:	031b      	lsls	r3, r3, #12
 8002aa0:	421a      	tst	r2, r3
 8002aa2:	d0a9      	beq.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa4:	421c      	tst	r4, r3
 8002aa6:	d1a7      	bne.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa8:	431c      	orrs	r4, r3
 8002aaa:	9b00      	ldr	r3, [sp, #0]
 8002aac:	0002      	movs	r2, r0
 8002aae:	469b      	mov	fp, r3
 8002ab0:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002ab2:	e597      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ab4:	2400      	movs	r4, #0
 8002ab6:	e6c1      	b.n	800283c <__aeabi_dmul+0x304>
 8002ab8:	2400      	movs	r4, #0
 8002aba:	4b01      	ldr	r3, [pc, #4]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002abc:	0022      	movs	r2, r4
 8002abe:	e591      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ac0:	000007ff 	.word	0x000007ff
 8002ac4:	0000041e 	.word	0x0000041e

08002ac8 <__aeabi_dsub>:
 8002ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aca:	464e      	mov	r6, r9
 8002acc:	4645      	mov	r5, r8
 8002ace:	46de      	mov	lr, fp
 8002ad0:	4657      	mov	r7, sl
 8002ad2:	b5e0      	push	{r5, r6, r7, lr}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	9000      	str	r0, [sp, #0]
 8002ad8:	9101      	str	r1, [sp, #4]
 8002ada:	030c      	lsls	r4, r1, #12
 8002adc:	004f      	lsls	r7, r1, #1
 8002ade:	0fce      	lsrs	r6, r1, #31
 8002ae0:	0a61      	lsrs	r1, r4, #9
 8002ae2:	9c00      	ldr	r4, [sp, #0]
 8002ae4:	46b0      	mov	r8, r6
 8002ae6:	0f64      	lsrs	r4, r4, #29
 8002ae8:	430c      	orrs	r4, r1
 8002aea:	9900      	ldr	r1, [sp, #0]
 8002aec:	0d7f      	lsrs	r7, r7, #21
 8002aee:	00c8      	lsls	r0, r1, #3
 8002af0:	0011      	movs	r1, r2
 8002af2:	001a      	movs	r2, r3
 8002af4:	031b      	lsls	r3, r3, #12
 8002af6:	469c      	mov	ip, r3
 8002af8:	9100      	str	r1, [sp, #0]
 8002afa:	9201      	str	r2, [sp, #4]
 8002afc:	0051      	lsls	r1, r2, #1
 8002afe:	0d4b      	lsrs	r3, r1, #21
 8002b00:	4699      	mov	r9, r3
 8002b02:	9b01      	ldr	r3, [sp, #4]
 8002b04:	9d00      	ldr	r5, [sp, #0]
 8002b06:	0fd9      	lsrs	r1, r3, #31
 8002b08:	4663      	mov	r3, ip
 8002b0a:	0f6a      	lsrs	r2, r5, #29
 8002b0c:	0a5b      	lsrs	r3, r3, #9
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	00ea      	lsls	r2, r5, #3
 8002b12:	4694      	mov	ip, r2
 8002b14:	4693      	mov	fp, r2
 8002b16:	4ac1      	ldr	r2, [pc, #772]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002b18:	9003      	str	r0, [sp, #12]
 8002b1a:	9302      	str	r3, [sp, #8]
 8002b1c:	4591      	cmp	r9, r2
 8002b1e:	d100      	bne.n	8002b22 <__aeabi_dsub+0x5a>
 8002b20:	e0cd      	b.n	8002cbe <__aeabi_dsub+0x1f6>
 8002b22:	2501      	movs	r5, #1
 8002b24:	4069      	eors	r1, r5
 8002b26:	464d      	mov	r5, r9
 8002b28:	1b7d      	subs	r5, r7, r5
 8002b2a:	46aa      	mov	sl, r5
 8002b2c:	428e      	cmp	r6, r1
 8002b2e:	d100      	bne.n	8002b32 <__aeabi_dsub+0x6a>
 8002b30:	e080      	b.n	8002c34 <__aeabi_dsub+0x16c>
 8002b32:	2d00      	cmp	r5, #0
 8002b34:	dc00      	bgt.n	8002b38 <__aeabi_dsub+0x70>
 8002b36:	e335      	b.n	80031a4 <__aeabi_dsub+0x6dc>
 8002b38:	4649      	mov	r1, r9
 8002b3a:	2900      	cmp	r1, #0
 8002b3c:	d100      	bne.n	8002b40 <__aeabi_dsub+0x78>
 8002b3e:	e0df      	b.n	8002d00 <__aeabi_dsub+0x238>
 8002b40:	4297      	cmp	r7, r2
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x7e>
 8002b44:	e194      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002b46:	4652      	mov	r2, sl
 8002b48:	2501      	movs	r5, #1
 8002b4a:	2a38      	cmp	r2, #56	@ 0x38
 8002b4c:	dc19      	bgt.n	8002b82 <__aeabi_dsub+0xba>
 8002b4e:	2280      	movs	r2, #128	@ 0x80
 8002b50:	9b02      	ldr	r3, [sp, #8]
 8002b52:	0412      	lsls	r2, r2, #16
 8002b54:	4313      	orrs	r3, r2
 8002b56:	9302      	str	r3, [sp, #8]
 8002b58:	4652      	mov	r2, sl
 8002b5a:	2a1f      	cmp	r2, #31
 8002b5c:	dd00      	ble.n	8002b60 <__aeabi_dsub+0x98>
 8002b5e:	e1e3      	b.n	8002f28 <__aeabi_dsub+0x460>
 8002b60:	4653      	mov	r3, sl
 8002b62:	2220      	movs	r2, #32
 8002b64:	4661      	mov	r1, ip
 8002b66:	9d02      	ldr	r5, [sp, #8]
 8002b68:	1ad2      	subs	r2, r2, r3
 8002b6a:	4095      	lsls	r5, r2
 8002b6c:	40d9      	lsrs	r1, r3
 8002b6e:	430d      	orrs	r5, r1
 8002b70:	4661      	mov	r1, ip
 8002b72:	4091      	lsls	r1, r2
 8002b74:	000a      	movs	r2, r1
 8002b76:	1e51      	subs	r1, r2, #1
 8002b78:	418a      	sbcs	r2, r1
 8002b7a:	4315      	orrs	r5, r2
 8002b7c:	9a02      	ldr	r2, [sp, #8]
 8002b7e:	40da      	lsrs	r2, r3
 8002b80:	1aa4      	subs	r4, r4, r2
 8002b82:	1b45      	subs	r5, r0, r5
 8002b84:	42a8      	cmp	r0, r5
 8002b86:	4180      	sbcs	r0, r0
 8002b88:	4240      	negs	r0, r0
 8002b8a:	1a24      	subs	r4, r4, r0
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dsub+0xca>
 8002b90:	e13d      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002b92:	0264      	lsls	r4, r4, #9
 8002b94:	0a64      	lsrs	r4, r4, #9
 8002b96:	2c00      	cmp	r4, #0
 8002b98:	d100      	bne.n	8002b9c <__aeabi_dsub+0xd4>
 8002b9a:	e147      	b.n	8002e2c <__aeabi_dsub+0x364>
 8002b9c:	0020      	movs	r0, r4
 8002b9e:	f000 fcab 	bl	80034f8 <__clzsi2>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	3b08      	subs	r3, #8
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	0028      	movs	r0, r5
 8002baa:	1aca      	subs	r2, r1, r3
 8002bac:	40d0      	lsrs	r0, r2
 8002bae:	409c      	lsls	r4, r3
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	409d      	lsls	r5, r3
 8002bb4:	4322      	orrs	r2, r4
 8002bb6:	429f      	cmp	r7, r3
 8002bb8:	dd00      	ble.n	8002bbc <__aeabi_dsub+0xf4>
 8002bba:	e177      	b.n	8002eac <__aeabi_dsub+0x3e4>
 8002bbc:	1bd8      	subs	r0, r3, r7
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	1a09      	subs	r1, r1, r0
 8002bc2:	002c      	movs	r4, r5
 8002bc4:	408d      	lsls	r5, r1
 8002bc6:	40c4      	lsrs	r4, r0
 8002bc8:	1e6b      	subs	r3, r5, #1
 8002bca:	419d      	sbcs	r5, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	40c2      	lsrs	r2, r0
 8002bd0:	408b      	lsls	r3, r1
 8002bd2:	4325      	orrs	r5, r4
 8002bd4:	2700      	movs	r7, #0
 8002bd6:	0014      	movs	r4, r2
 8002bd8:	431d      	orrs	r5, r3
 8002bda:	076b      	lsls	r3, r5, #29
 8002bdc:	d009      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002bde:	230f      	movs	r3, #15
 8002be0:	402b      	ands	r3, r5
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d005      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002be6:	1d2b      	adds	r3, r5, #4
 8002be8:	42ab      	cmp	r3, r5
 8002bea:	41ad      	sbcs	r5, r5
 8002bec:	426d      	negs	r5, r5
 8002bee:	1964      	adds	r4, r4, r5
 8002bf0:	001d      	movs	r5, r3
 8002bf2:	0223      	lsls	r3, r4, #8
 8002bf4:	d400      	bmi.n	8002bf8 <__aeabi_dsub+0x130>
 8002bf6:	e140      	b.n	8002e7a <__aeabi_dsub+0x3b2>
 8002bf8:	4a88      	ldr	r2, [pc, #544]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002bfa:	3701      	adds	r7, #1
 8002bfc:	4297      	cmp	r7, r2
 8002bfe:	d100      	bne.n	8002c02 <__aeabi_dsub+0x13a>
 8002c00:	e101      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002c02:	2601      	movs	r6, #1
 8002c04:	4643      	mov	r3, r8
 8002c06:	4986      	ldr	r1, [pc, #536]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002c08:	08ed      	lsrs	r5, r5, #3
 8002c0a:	4021      	ands	r1, r4
 8002c0c:	074a      	lsls	r2, r1, #29
 8002c0e:	432a      	orrs	r2, r5
 8002c10:	057c      	lsls	r4, r7, #21
 8002c12:	024d      	lsls	r5, r1, #9
 8002c14:	0b2d      	lsrs	r5, r5, #12
 8002c16:	0d64      	lsrs	r4, r4, #21
 8002c18:	401e      	ands	r6, r3
 8002c1a:	0524      	lsls	r4, r4, #20
 8002c1c:	432c      	orrs	r4, r5
 8002c1e:	07f6      	lsls	r6, r6, #31
 8002c20:	4334      	orrs	r4, r6
 8002c22:	0010      	movs	r0, r2
 8002c24:	0021      	movs	r1, r4
 8002c26:	b005      	add	sp, #20
 8002c28:	bcf0      	pop	{r4, r5, r6, r7}
 8002c2a:	46bb      	mov	fp, r7
 8002c2c:	46b2      	mov	sl, r6
 8002c2e:	46a9      	mov	r9, r5
 8002c30:	46a0      	mov	r8, r4
 8002c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c34:	2d00      	cmp	r5, #0
 8002c36:	dc00      	bgt.n	8002c3a <__aeabi_dsub+0x172>
 8002c38:	e2d0      	b.n	80031dc <__aeabi_dsub+0x714>
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	2900      	cmp	r1, #0
 8002c3e:	d000      	beq.n	8002c42 <__aeabi_dsub+0x17a>
 8002c40:	e0d4      	b.n	8002dec <__aeabi_dsub+0x324>
 8002c42:	4661      	mov	r1, ip
 8002c44:	9b02      	ldr	r3, [sp, #8]
 8002c46:	4319      	orrs	r1, r3
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x184>
 8002c4a:	e12b      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002c4c:	1e69      	subs	r1, r5, #1
 8002c4e:	2d01      	cmp	r5, #1
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x18c>
 8002c52:	e1d9      	b.n	8003008 <__aeabi_dsub+0x540>
 8002c54:	4295      	cmp	r5, r2
 8002c56:	d100      	bne.n	8002c5a <__aeabi_dsub+0x192>
 8002c58:	e10a      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002c5a:	2501      	movs	r5, #1
 8002c5c:	2938      	cmp	r1, #56	@ 0x38
 8002c5e:	dc17      	bgt.n	8002c90 <__aeabi_dsub+0x1c8>
 8002c60:	468a      	mov	sl, r1
 8002c62:	4653      	mov	r3, sl
 8002c64:	2b1f      	cmp	r3, #31
 8002c66:	dd00      	ble.n	8002c6a <__aeabi_dsub+0x1a2>
 8002c68:	e1e7      	b.n	800303a <__aeabi_dsub+0x572>
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	9b02      	ldr	r3, [sp, #8]
 8002c70:	4661      	mov	r1, ip
 8002c72:	4093      	lsls	r3, r2
 8002c74:	001d      	movs	r5, r3
 8002c76:	4653      	mov	r3, sl
 8002c78:	40d9      	lsrs	r1, r3
 8002c7a:	4663      	mov	r3, ip
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	001a      	movs	r2, r3
 8002c80:	430d      	orrs	r5, r1
 8002c82:	1e51      	subs	r1, r2, #1
 8002c84:	418a      	sbcs	r2, r1
 8002c86:	4653      	mov	r3, sl
 8002c88:	4315      	orrs	r5, r2
 8002c8a:	9a02      	ldr	r2, [sp, #8]
 8002c8c:	40da      	lsrs	r2, r3
 8002c8e:	18a4      	adds	r4, r4, r2
 8002c90:	182d      	adds	r5, r5, r0
 8002c92:	4285      	cmp	r5, r0
 8002c94:	4180      	sbcs	r0, r0
 8002c96:	4240      	negs	r0, r0
 8002c98:	1824      	adds	r4, r4, r0
 8002c9a:	0223      	lsls	r3, r4, #8
 8002c9c:	d400      	bmi.n	8002ca0 <__aeabi_dsub+0x1d8>
 8002c9e:	e0b6      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002ca2:	3701      	adds	r7, #1
 8002ca4:	429f      	cmp	r7, r3
 8002ca6:	d100      	bne.n	8002caa <__aeabi_dsub+0x1e2>
 8002ca8:	e0ad      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002caa:	2101      	movs	r1, #1
 8002cac:	4b5c      	ldr	r3, [pc, #368]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002cae:	086a      	lsrs	r2, r5, #1
 8002cb0:	401c      	ands	r4, r3
 8002cb2:	4029      	ands	r1, r5
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	07e5      	lsls	r5, r4, #31
 8002cb8:	4315      	orrs	r5, r2
 8002cba:	0864      	lsrs	r4, r4, #1
 8002cbc:	e78d      	b.n	8002bda <__aeabi_dsub+0x112>
 8002cbe:	4a59      	ldr	r2, [pc, #356]	@ (8002e24 <__aeabi_dsub+0x35c>)
 8002cc0:	9b02      	ldr	r3, [sp, #8]
 8002cc2:	4692      	mov	sl, r2
 8002cc4:	4662      	mov	r2, ip
 8002cc6:	44ba      	add	sl, r7
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	d02c      	beq.n	8002d26 <__aeabi_dsub+0x25e>
 8002ccc:	428e      	cmp	r6, r1
 8002cce:	d02e      	beq.n	8002d2e <__aeabi_dsub+0x266>
 8002cd0:	4652      	mov	r2, sl
 8002cd2:	2a00      	cmp	r2, #0
 8002cd4:	d060      	beq.n	8002d98 <__aeabi_dsub+0x2d0>
 8002cd6:	2f00      	cmp	r7, #0
 8002cd8:	d100      	bne.n	8002cdc <__aeabi_dsub+0x214>
 8002cda:	e0db      	b.n	8002e94 <__aeabi_dsub+0x3cc>
 8002cdc:	4663      	mov	r3, ip
 8002cde:	000e      	movs	r6, r1
 8002ce0:	9c02      	ldr	r4, [sp, #8]
 8002ce2:	08d8      	lsrs	r0, r3, #3
 8002ce4:	0762      	lsls	r2, r4, #29
 8002ce6:	4302      	orrs	r2, r0
 8002ce8:	08e4      	lsrs	r4, r4, #3
 8002cea:	0013      	movs	r3, r2
 8002cec:	4323      	orrs	r3, r4
 8002cee:	d100      	bne.n	8002cf2 <__aeabi_dsub+0x22a>
 8002cf0:	e254      	b.n	800319c <__aeabi_dsub+0x6d4>
 8002cf2:	2580      	movs	r5, #128	@ 0x80
 8002cf4:	032d      	lsls	r5, r5, #12
 8002cf6:	4325      	orrs	r5, r4
 8002cf8:	032d      	lsls	r5, r5, #12
 8002cfa:	4c48      	ldr	r4, [pc, #288]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002cfc:	0b2d      	lsrs	r5, r5, #12
 8002cfe:	e78c      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002d00:	4661      	mov	r1, ip
 8002d02:	9b02      	ldr	r3, [sp, #8]
 8002d04:	4319      	orrs	r1, r3
 8002d06:	d100      	bne.n	8002d0a <__aeabi_dsub+0x242>
 8002d08:	e0cc      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002d0a:	0029      	movs	r1, r5
 8002d0c:	3901      	subs	r1, #1
 8002d0e:	2d01      	cmp	r5, #1
 8002d10:	d100      	bne.n	8002d14 <__aeabi_dsub+0x24c>
 8002d12:	e188      	b.n	8003026 <__aeabi_dsub+0x55e>
 8002d14:	4295      	cmp	r5, r2
 8002d16:	d100      	bne.n	8002d1a <__aeabi_dsub+0x252>
 8002d18:	e0aa      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002d1a:	2501      	movs	r5, #1
 8002d1c:	2938      	cmp	r1, #56	@ 0x38
 8002d1e:	dd00      	ble.n	8002d22 <__aeabi_dsub+0x25a>
 8002d20:	e72f      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002d22:	468a      	mov	sl, r1
 8002d24:	e718      	b.n	8002b58 <__aeabi_dsub+0x90>
 8002d26:	2201      	movs	r2, #1
 8002d28:	4051      	eors	r1, r2
 8002d2a:	428e      	cmp	r6, r1
 8002d2c:	d1d0      	bne.n	8002cd0 <__aeabi_dsub+0x208>
 8002d2e:	4653      	mov	r3, sl
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x26e>
 8002d34:	e0be      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 8002d36:	2f00      	cmp	r7, #0
 8002d38:	d000      	beq.n	8002d3c <__aeabi_dsub+0x274>
 8002d3a:	e138      	b.n	8002fae <__aeabi_dsub+0x4e6>
 8002d3c:	46ca      	mov	sl, r9
 8002d3e:	0022      	movs	r2, r4
 8002d40:	4302      	orrs	r2, r0
 8002d42:	d100      	bne.n	8002d46 <__aeabi_dsub+0x27e>
 8002d44:	e1e2      	b.n	800310c <__aeabi_dsub+0x644>
 8002d46:	4653      	mov	r3, sl
 8002d48:	1e59      	subs	r1, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x288>
 8002d4e:	e20d      	b.n	800316c <__aeabi_dsub+0x6a4>
 8002d50:	4a32      	ldr	r2, [pc, #200]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002d52:	4592      	cmp	sl, r2
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x290>
 8002d56:	e1d2      	b.n	80030fe <__aeabi_dsub+0x636>
 8002d58:	2701      	movs	r7, #1
 8002d5a:	2938      	cmp	r1, #56	@ 0x38
 8002d5c:	dc13      	bgt.n	8002d86 <__aeabi_dsub+0x2be>
 8002d5e:	291f      	cmp	r1, #31
 8002d60:	dd00      	ble.n	8002d64 <__aeabi_dsub+0x29c>
 8002d62:	e1ee      	b.n	8003142 <__aeabi_dsub+0x67a>
 8002d64:	2220      	movs	r2, #32
 8002d66:	9b02      	ldr	r3, [sp, #8]
 8002d68:	1a52      	subs	r2, r2, r1
 8002d6a:	0025      	movs	r5, r4
 8002d6c:	0007      	movs	r7, r0
 8002d6e:	469a      	mov	sl, r3
 8002d70:	40cc      	lsrs	r4, r1
 8002d72:	4090      	lsls	r0, r2
 8002d74:	4095      	lsls	r5, r2
 8002d76:	40cf      	lsrs	r7, r1
 8002d78:	44a2      	add	sl, r4
 8002d7a:	1e42      	subs	r2, r0, #1
 8002d7c:	4190      	sbcs	r0, r2
 8002d7e:	4653      	mov	r3, sl
 8002d80:	432f      	orrs	r7, r5
 8002d82:	4307      	orrs	r7, r0
 8002d84:	9302      	str	r3, [sp, #8]
 8002d86:	003d      	movs	r5, r7
 8002d88:	4465      	add	r5, ip
 8002d8a:	4565      	cmp	r5, ip
 8002d8c:	4192      	sbcs	r2, r2
 8002d8e:	9b02      	ldr	r3, [sp, #8]
 8002d90:	4252      	negs	r2, r2
 8002d92:	464f      	mov	r7, r9
 8002d94:	18d4      	adds	r4, r2, r3
 8002d96:	e780      	b.n	8002c9a <__aeabi_dsub+0x1d2>
 8002d98:	4a23      	ldr	r2, [pc, #140]	@ (8002e28 <__aeabi_dsub+0x360>)
 8002d9a:	1c7d      	adds	r5, r7, #1
 8002d9c:	4215      	tst	r5, r2
 8002d9e:	d000      	beq.n	8002da2 <__aeabi_dsub+0x2da>
 8002da0:	e0aa      	b.n	8002ef8 <__aeabi_dsub+0x430>
 8002da2:	4662      	mov	r2, ip
 8002da4:	0025      	movs	r5, r4
 8002da6:	9b02      	ldr	r3, [sp, #8]
 8002da8:	4305      	orrs	r5, r0
 8002daa:	431a      	orrs	r2, r3
 8002dac:	2f00      	cmp	r7, #0
 8002dae:	d000      	beq.n	8002db2 <__aeabi_dsub+0x2ea>
 8002db0:	e0f5      	b.n	8002f9e <__aeabi_dsub+0x4d6>
 8002db2:	2d00      	cmp	r5, #0
 8002db4:	d100      	bne.n	8002db8 <__aeabi_dsub+0x2f0>
 8002db6:	e16b      	b.n	8003090 <__aeabi_dsub+0x5c8>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d100      	bne.n	8002dbe <__aeabi_dsub+0x2f6>
 8002dbc:	e152      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002dbe:	4663      	mov	r3, ip
 8002dc0:	1ac5      	subs	r5, r0, r3
 8002dc2:	9b02      	ldr	r3, [sp, #8]
 8002dc4:	1ae2      	subs	r2, r4, r3
 8002dc6:	42a8      	cmp	r0, r5
 8002dc8:	419b      	sbcs	r3, r3
 8002dca:	425b      	negs	r3, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	d400      	bmi.n	8002dd4 <__aeabi_dsub+0x30c>
 8002dd2:	e1d5      	b.n	8003180 <__aeabi_dsub+0x6b8>
 8002dd4:	4663      	mov	r3, ip
 8002dd6:	1a1d      	subs	r5, r3, r0
 8002dd8:	45ac      	cmp	ip, r5
 8002dda:	4192      	sbcs	r2, r2
 8002ddc:	2601      	movs	r6, #1
 8002dde:	9b02      	ldr	r3, [sp, #8]
 8002de0:	4252      	negs	r2, r2
 8002de2:	1b1c      	subs	r4, r3, r4
 8002de4:	4688      	mov	r8, r1
 8002de6:	1aa4      	subs	r4, r4, r2
 8002de8:	400e      	ands	r6, r1
 8002dea:	e6f6      	b.n	8002bda <__aeabi_dsub+0x112>
 8002dec:	4297      	cmp	r7, r2
 8002dee:	d03f      	beq.n	8002e70 <__aeabi_dsub+0x3a8>
 8002df0:	4652      	mov	r2, sl
 8002df2:	2501      	movs	r5, #1
 8002df4:	2a38      	cmp	r2, #56	@ 0x38
 8002df6:	dd00      	ble.n	8002dfa <__aeabi_dsub+0x332>
 8002df8:	e74a      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8002dfa:	2280      	movs	r2, #128	@ 0x80
 8002dfc:	9b02      	ldr	r3, [sp, #8]
 8002dfe:	0412      	lsls	r2, r2, #16
 8002e00:	4313      	orrs	r3, r2
 8002e02:	9302      	str	r3, [sp, #8]
 8002e04:	e72d      	b.n	8002c62 <__aeabi_dsub+0x19a>
 8002e06:	003c      	movs	r4, r7
 8002e08:	2500      	movs	r5, #0
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	e705      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e0e:	2307      	movs	r3, #7
 8002e10:	402b      	ands	r3, r5
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d000      	beq.n	8002e18 <__aeabi_dsub+0x350>
 8002e16:	e6e2      	b.n	8002bde <__aeabi_dsub+0x116>
 8002e18:	e06b      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	000007ff 	.word	0x000007ff
 8002e20:	ff7fffff 	.word	0xff7fffff
 8002e24:	fffff801 	.word	0xfffff801
 8002e28:	000007fe 	.word	0x000007fe
 8002e2c:	0028      	movs	r0, r5
 8002e2e:	f000 fb63 	bl	80034f8 <__clzsi2>
 8002e32:	0003      	movs	r3, r0
 8002e34:	3318      	adds	r3, #24
 8002e36:	2b1f      	cmp	r3, #31
 8002e38:	dc00      	bgt.n	8002e3c <__aeabi_dsub+0x374>
 8002e3a:	e6b4      	b.n	8002ba6 <__aeabi_dsub+0xde>
 8002e3c:	002a      	movs	r2, r5
 8002e3e:	3808      	subs	r0, #8
 8002e40:	4082      	lsls	r2, r0
 8002e42:	429f      	cmp	r7, r3
 8002e44:	dd00      	ble.n	8002e48 <__aeabi_dsub+0x380>
 8002e46:	e0b9      	b.n	8002fbc <__aeabi_dsub+0x4f4>
 8002e48:	1bdb      	subs	r3, r3, r7
 8002e4a:	1c58      	adds	r0, r3, #1
 8002e4c:	281f      	cmp	r0, #31
 8002e4e:	dc00      	bgt.n	8002e52 <__aeabi_dsub+0x38a>
 8002e50:	e1a0      	b.n	8003194 <__aeabi_dsub+0x6cc>
 8002e52:	0015      	movs	r5, r2
 8002e54:	3b1f      	subs	r3, #31
 8002e56:	40dd      	lsrs	r5, r3
 8002e58:	2820      	cmp	r0, #32
 8002e5a:	d005      	beq.n	8002e68 <__aeabi_dsub+0x3a0>
 8002e5c:	2340      	movs	r3, #64	@ 0x40
 8002e5e:	1a1b      	subs	r3, r3, r0
 8002e60:	409a      	lsls	r2, r3
 8002e62:	1e53      	subs	r3, r2, #1
 8002e64:	419a      	sbcs	r2, r3
 8002e66:	4315      	orrs	r5, r2
 8002e68:	2307      	movs	r3, #7
 8002e6a:	2700      	movs	r7, #0
 8002e6c:	402b      	ands	r3, r5
 8002e6e:	e7d0      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002e70:	08c0      	lsrs	r0, r0, #3
 8002e72:	0762      	lsls	r2, r4, #29
 8002e74:	4302      	orrs	r2, r0
 8002e76:	08e4      	lsrs	r4, r4, #3
 8002e78:	e737      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e7a:	08ea      	lsrs	r2, r5, #3
 8002e7c:	0763      	lsls	r3, r4, #29
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	4bd3      	ldr	r3, [pc, #844]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002e82:	08e4      	lsrs	r4, r4, #3
 8002e84:	429f      	cmp	r7, r3
 8002e86:	d100      	bne.n	8002e8a <__aeabi_dsub+0x3c2>
 8002e88:	e72f      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e8a:	0324      	lsls	r4, r4, #12
 8002e8c:	0b25      	lsrs	r5, r4, #12
 8002e8e:	057c      	lsls	r4, r7, #21
 8002e90:	0d64      	lsrs	r4, r4, #21
 8002e92:	e6c2      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e94:	46ca      	mov	sl, r9
 8002e96:	0022      	movs	r2, r4
 8002e98:	4302      	orrs	r2, r0
 8002e9a:	d158      	bne.n	8002f4e <__aeabi_dsub+0x486>
 8002e9c:	4663      	mov	r3, ip
 8002e9e:	000e      	movs	r6, r1
 8002ea0:	9c02      	ldr	r4, [sp, #8]
 8002ea2:	9303      	str	r3, [sp, #12]
 8002ea4:	9b03      	ldr	r3, [sp, #12]
 8002ea6:	4657      	mov	r7, sl
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	e7e7      	b.n	8002e7c <__aeabi_dsub+0x3b4>
 8002eac:	4cc9      	ldr	r4, [pc, #804]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eae:	1aff      	subs	r7, r7, r3
 8002eb0:	4014      	ands	r4, r2
 8002eb2:	e692      	b.n	8002bda <__aeabi_dsub+0x112>
 8002eb4:	4dc8      	ldr	r5, [pc, #800]	@ (80031d8 <__aeabi_dsub+0x710>)
 8002eb6:	1c7a      	adds	r2, r7, #1
 8002eb8:	422a      	tst	r2, r5
 8002eba:	d000      	beq.n	8002ebe <__aeabi_dsub+0x3f6>
 8002ebc:	e084      	b.n	8002fc8 <__aeabi_dsub+0x500>
 8002ebe:	0022      	movs	r2, r4
 8002ec0:	4302      	orrs	r2, r0
 8002ec2:	2f00      	cmp	r7, #0
 8002ec4:	d000      	beq.n	8002ec8 <__aeabi_dsub+0x400>
 8002ec6:	e0ef      	b.n	80030a8 <__aeabi_dsub+0x5e0>
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	d100      	bne.n	8002ece <__aeabi_dsub+0x406>
 8002ecc:	e0e5      	b.n	800309a <__aeabi_dsub+0x5d2>
 8002ece:	4662      	mov	r2, ip
 8002ed0:	9902      	ldr	r1, [sp, #8]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x410>
 8002ed6:	e0c5      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	18c5      	adds	r5, r0, r3
 8002edc:	468c      	mov	ip, r1
 8002ede:	4285      	cmp	r5, r0
 8002ee0:	4180      	sbcs	r0, r0
 8002ee2:	4464      	add	r4, ip
 8002ee4:	4240      	negs	r0, r0
 8002ee6:	1824      	adds	r4, r4, r0
 8002ee8:	0223      	lsls	r3, r4, #8
 8002eea:	d502      	bpl.n	8002ef2 <__aeabi_dsub+0x42a>
 8002eec:	4bb9      	ldr	r3, [pc, #740]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eee:	3701      	adds	r7, #1
 8002ef0:	401c      	ands	r4, r3
 8002ef2:	46ba      	mov	sl, r7
 8002ef4:	9503      	str	r5, [sp, #12]
 8002ef6:	e7d5      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002ef8:	4662      	mov	r2, ip
 8002efa:	1a85      	subs	r5, r0, r2
 8002efc:	42a8      	cmp	r0, r5
 8002efe:	4192      	sbcs	r2, r2
 8002f00:	4252      	negs	r2, r2
 8002f02:	4691      	mov	r9, r2
 8002f04:	9b02      	ldr	r3, [sp, #8]
 8002f06:	1ae3      	subs	r3, r4, r3
 8002f08:	001a      	movs	r2, r3
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	1ad2      	subs	r2, r2, r3
 8002f0e:	0013      	movs	r3, r2
 8002f10:	4691      	mov	r9, r2
 8002f12:	021a      	lsls	r2, r3, #8
 8002f14:	d46c      	bmi.n	8002ff0 <__aeabi_dsub+0x528>
 8002f16:	464a      	mov	r2, r9
 8002f18:	464c      	mov	r4, r9
 8002f1a:	432a      	orrs	r2, r5
 8002f1c:	d000      	beq.n	8002f20 <__aeabi_dsub+0x458>
 8002f1e:	e63a      	b.n	8002b96 <__aeabi_dsub+0xce>
 8002f20:	2600      	movs	r6, #0
 8002f22:	2400      	movs	r4, #0
 8002f24:	2500      	movs	r5, #0
 8002f26:	e678      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002f28:	9902      	ldr	r1, [sp, #8]
 8002f2a:	4653      	mov	r3, sl
 8002f2c:	000d      	movs	r5, r1
 8002f2e:	3a20      	subs	r2, #32
 8002f30:	40d5      	lsrs	r5, r2
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d006      	beq.n	8002f44 <__aeabi_dsub+0x47c>
 8002f36:	2240      	movs	r2, #64	@ 0x40
 8002f38:	1ad2      	subs	r2, r2, r3
 8002f3a:	000b      	movs	r3, r1
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	4662      	mov	r2, ip
 8002f40:	431a      	orrs	r2, r3
 8002f42:	4693      	mov	fp, r2
 8002f44:	465b      	mov	r3, fp
 8002f46:	1e5a      	subs	r2, r3, #1
 8002f48:	4193      	sbcs	r3, r2
 8002f4a:	431d      	orrs	r5, r3
 8002f4c:	e619      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002f4e:	4653      	mov	r3, sl
 8002f50:	1e5a      	subs	r2, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d100      	bne.n	8002f58 <__aeabi_dsub+0x490>
 8002f56:	e0c6      	b.n	80030e6 <__aeabi_dsub+0x61e>
 8002f58:	4e9d      	ldr	r6, [pc, #628]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002f5a:	45b2      	cmp	sl, r6
 8002f5c:	d100      	bne.n	8002f60 <__aeabi_dsub+0x498>
 8002f5e:	e6bd      	b.n	8002cdc <__aeabi_dsub+0x214>
 8002f60:	4688      	mov	r8, r1
 8002f62:	000e      	movs	r6, r1
 8002f64:	2501      	movs	r5, #1
 8002f66:	2a38      	cmp	r2, #56	@ 0x38
 8002f68:	dc10      	bgt.n	8002f8c <__aeabi_dsub+0x4c4>
 8002f6a:	2a1f      	cmp	r2, #31
 8002f6c:	dc7f      	bgt.n	800306e <__aeabi_dsub+0x5a6>
 8002f6e:	2120      	movs	r1, #32
 8002f70:	0025      	movs	r5, r4
 8002f72:	1a89      	subs	r1, r1, r2
 8002f74:	0007      	movs	r7, r0
 8002f76:	4088      	lsls	r0, r1
 8002f78:	408d      	lsls	r5, r1
 8002f7a:	40d7      	lsrs	r7, r2
 8002f7c:	40d4      	lsrs	r4, r2
 8002f7e:	1e41      	subs	r1, r0, #1
 8002f80:	4188      	sbcs	r0, r1
 8002f82:	9b02      	ldr	r3, [sp, #8]
 8002f84:	433d      	orrs	r5, r7
 8002f86:	1b1b      	subs	r3, r3, r4
 8002f88:	4305      	orrs	r5, r0
 8002f8a:	9302      	str	r3, [sp, #8]
 8002f8c:	4662      	mov	r2, ip
 8002f8e:	1b55      	subs	r5, r2, r5
 8002f90:	45ac      	cmp	ip, r5
 8002f92:	4192      	sbcs	r2, r2
 8002f94:	9b02      	ldr	r3, [sp, #8]
 8002f96:	4252      	negs	r2, r2
 8002f98:	464f      	mov	r7, r9
 8002f9a:	1a9c      	subs	r4, r3, r2
 8002f9c:	e5f6      	b.n	8002b8c <__aeabi_dsub+0xc4>
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	d000      	beq.n	8002fa4 <__aeabi_dsub+0x4dc>
 8002fa2:	e0b7      	b.n	8003114 <__aeabi_dsub+0x64c>
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d100      	bne.n	8002faa <__aeabi_dsub+0x4e2>
 8002fa8:	e0f0      	b.n	800318c <__aeabi_dsub+0x6c4>
 8002faa:	2601      	movs	r6, #1
 8002fac:	400e      	ands	r6, r1
 8002fae:	4663      	mov	r3, ip
 8002fb0:	9802      	ldr	r0, [sp, #8]
 8002fb2:	08d9      	lsrs	r1, r3, #3
 8002fb4:	0742      	lsls	r2, r0, #29
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	08c4      	lsrs	r4, r0, #3
 8002fba:	e696      	b.n	8002cea <__aeabi_dsub+0x222>
 8002fbc:	4c85      	ldr	r4, [pc, #532]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002fbe:	1aff      	subs	r7, r7, r3
 8002fc0:	4014      	ands	r4, r2
 8002fc2:	0762      	lsls	r2, r4, #29
 8002fc4:	08e4      	lsrs	r4, r4, #3
 8002fc6:	e760      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 8002fc8:	4981      	ldr	r1, [pc, #516]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002fca:	428a      	cmp	r2, r1
 8002fcc:	d100      	bne.n	8002fd0 <__aeabi_dsub+0x508>
 8002fce:	e0c9      	b.n	8003164 <__aeabi_dsub+0x69c>
 8002fd0:	4663      	mov	r3, ip
 8002fd2:	18c1      	adds	r1, r0, r3
 8002fd4:	4281      	cmp	r1, r0
 8002fd6:	4180      	sbcs	r0, r0
 8002fd8:	9b02      	ldr	r3, [sp, #8]
 8002fda:	4240      	negs	r0, r0
 8002fdc:	18e3      	adds	r3, r4, r3
 8002fde:	181b      	adds	r3, r3, r0
 8002fe0:	07dd      	lsls	r5, r3, #31
 8002fe2:	085c      	lsrs	r4, r3, #1
 8002fe4:	2307      	movs	r3, #7
 8002fe6:	0849      	lsrs	r1, r1, #1
 8002fe8:	430d      	orrs	r5, r1
 8002fea:	0017      	movs	r7, r2
 8002fec:	402b      	ands	r3, r5
 8002fee:	e710      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002ff0:	4663      	mov	r3, ip
 8002ff2:	1a1d      	subs	r5, r3, r0
 8002ff4:	45ac      	cmp	ip, r5
 8002ff6:	4192      	sbcs	r2, r2
 8002ff8:	2601      	movs	r6, #1
 8002ffa:	9b02      	ldr	r3, [sp, #8]
 8002ffc:	4252      	negs	r2, r2
 8002ffe:	1b1c      	subs	r4, r3, r4
 8003000:	4688      	mov	r8, r1
 8003002:	1aa4      	subs	r4, r4, r2
 8003004:	400e      	ands	r6, r1
 8003006:	e5c6      	b.n	8002b96 <__aeabi_dsub+0xce>
 8003008:	4663      	mov	r3, ip
 800300a:	18c5      	adds	r5, r0, r3
 800300c:	9b02      	ldr	r3, [sp, #8]
 800300e:	4285      	cmp	r5, r0
 8003010:	4180      	sbcs	r0, r0
 8003012:	469c      	mov	ip, r3
 8003014:	4240      	negs	r0, r0
 8003016:	4464      	add	r4, ip
 8003018:	1824      	adds	r4, r4, r0
 800301a:	2701      	movs	r7, #1
 800301c:	0223      	lsls	r3, r4, #8
 800301e:	d400      	bmi.n	8003022 <__aeabi_dsub+0x55a>
 8003020:	e6f5      	b.n	8002e0e <__aeabi_dsub+0x346>
 8003022:	2702      	movs	r7, #2
 8003024:	e641      	b.n	8002caa <__aeabi_dsub+0x1e2>
 8003026:	4663      	mov	r3, ip
 8003028:	1ac5      	subs	r5, r0, r3
 800302a:	42a8      	cmp	r0, r5
 800302c:	4180      	sbcs	r0, r0
 800302e:	9b02      	ldr	r3, [sp, #8]
 8003030:	4240      	negs	r0, r0
 8003032:	1ae4      	subs	r4, r4, r3
 8003034:	2701      	movs	r7, #1
 8003036:	1a24      	subs	r4, r4, r0
 8003038:	e5a8      	b.n	8002b8c <__aeabi_dsub+0xc4>
 800303a:	9d02      	ldr	r5, [sp, #8]
 800303c:	4652      	mov	r2, sl
 800303e:	002b      	movs	r3, r5
 8003040:	3a20      	subs	r2, #32
 8003042:	40d3      	lsrs	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	4653      	mov	r3, sl
 8003048:	2b20      	cmp	r3, #32
 800304a:	d006      	beq.n	800305a <__aeabi_dsub+0x592>
 800304c:	2240      	movs	r2, #64	@ 0x40
 800304e:	1ad2      	subs	r2, r2, r3
 8003050:	002b      	movs	r3, r5
 8003052:	4093      	lsls	r3, r2
 8003054:	4662      	mov	r2, ip
 8003056:	431a      	orrs	r2, r3
 8003058:	4693      	mov	fp, r2
 800305a:	465d      	mov	r5, fp
 800305c:	1e6b      	subs	r3, r5, #1
 800305e:	419d      	sbcs	r5, r3
 8003060:	430d      	orrs	r5, r1
 8003062:	e615      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8003064:	0762      	lsls	r2, r4, #29
 8003066:	08c0      	lsrs	r0, r0, #3
 8003068:	4302      	orrs	r2, r0
 800306a:	08e4      	lsrs	r4, r4, #3
 800306c:	e70d      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 800306e:	0011      	movs	r1, r2
 8003070:	0027      	movs	r7, r4
 8003072:	3920      	subs	r1, #32
 8003074:	40cf      	lsrs	r7, r1
 8003076:	2a20      	cmp	r2, #32
 8003078:	d005      	beq.n	8003086 <__aeabi_dsub+0x5be>
 800307a:	2140      	movs	r1, #64	@ 0x40
 800307c:	1a8a      	subs	r2, r1, r2
 800307e:	4094      	lsls	r4, r2
 8003080:	0025      	movs	r5, r4
 8003082:	4305      	orrs	r5, r0
 8003084:	9503      	str	r5, [sp, #12]
 8003086:	9d03      	ldr	r5, [sp, #12]
 8003088:	1e6a      	subs	r2, r5, #1
 800308a:	4195      	sbcs	r5, r2
 800308c:	433d      	orrs	r5, r7
 800308e:	e77d      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 8003090:	2a00      	cmp	r2, #0
 8003092:	d100      	bne.n	8003096 <__aeabi_dsub+0x5ce>
 8003094:	e744      	b.n	8002f20 <__aeabi_dsub+0x458>
 8003096:	2601      	movs	r6, #1
 8003098:	400e      	ands	r6, r1
 800309a:	4663      	mov	r3, ip
 800309c:	08d9      	lsrs	r1, r3, #3
 800309e:	9b02      	ldr	r3, [sp, #8]
 80030a0:	075a      	lsls	r2, r3, #29
 80030a2:	430a      	orrs	r2, r1
 80030a4:	08dc      	lsrs	r4, r3, #3
 80030a6:	e6f0      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d028      	beq.n	80030fe <__aeabi_dsub+0x636>
 80030ac:	4662      	mov	r2, ip
 80030ae:	9f02      	ldr	r7, [sp, #8]
 80030b0:	08c0      	lsrs	r0, r0, #3
 80030b2:	433a      	orrs	r2, r7
 80030b4:	d100      	bne.n	80030b8 <__aeabi_dsub+0x5f0>
 80030b6:	e6dc      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 80030b8:	0762      	lsls	r2, r4, #29
 80030ba:	4310      	orrs	r0, r2
 80030bc:	2280      	movs	r2, #128	@ 0x80
 80030be:	08e4      	lsrs	r4, r4, #3
 80030c0:	0312      	lsls	r2, r2, #12
 80030c2:	4214      	tst	r4, r2
 80030c4:	d009      	beq.n	80030da <__aeabi_dsub+0x612>
 80030c6:	08fd      	lsrs	r5, r7, #3
 80030c8:	4215      	tst	r5, r2
 80030ca:	d106      	bne.n	80030da <__aeabi_dsub+0x612>
 80030cc:	4663      	mov	r3, ip
 80030ce:	2601      	movs	r6, #1
 80030d0:	002c      	movs	r4, r5
 80030d2:	08d8      	lsrs	r0, r3, #3
 80030d4:	077b      	lsls	r3, r7, #29
 80030d6:	4318      	orrs	r0, r3
 80030d8:	400e      	ands	r6, r1
 80030da:	0f42      	lsrs	r2, r0, #29
 80030dc:	00c0      	lsls	r0, r0, #3
 80030de:	08c0      	lsrs	r0, r0, #3
 80030e0:	0752      	lsls	r2, r2, #29
 80030e2:	4302      	orrs	r2, r0
 80030e4:	e601      	b.n	8002cea <__aeabi_dsub+0x222>
 80030e6:	4663      	mov	r3, ip
 80030e8:	1a1d      	subs	r5, r3, r0
 80030ea:	45ac      	cmp	ip, r5
 80030ec:	4192      	sbcs	r2, r2
 80030ee:	9b02      	ldr	r3, [sp, #8]
 80030f0:	4252      	negs	r2, r2
 80030f2:	1b1c      	subs	r4, r3, r4
 80030f4:	000e      	movs	r6, r1
 80030f6:	4688      	mov	r8, r1
 80030f8:	2701      	movs	r7, #1
 80030fa:	1aa4      	subs	r4, r4, r2
 80030fc:	e546      	b.n	8002b8c <__aeabi_dsub+0xc4>
 80030fe:	4663      	mov	r3, ip
 8003100:	08d9      	lsrs	r1, r3, #3
 8003102:	9b02      	ldr	r3, [sp, #8]
 8003104:	075a      	lsls	r2, r3, #29
 8003106:	430a      	orrs	r2, r1
 8003108:	08dc      	lsrs	r4, r3, #3
 800310a:	e5ee      	b.n	8002cea <__aeabi_dsub+0x222>
 800310c:	4663      	mov	r3, ip
 800310e:	9c02      	ldr	r4, [sp, #8]
 8003110:	9303      	str	r3, [sp, #12]
 8003112:	e6c7      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8003114:	08c0      	lsrs	r0, r0, #3
 8003116:	2a00      	cmp	r2, #0
 8003118:	d100      	bne.n	800311c <__aeabi_dsub+0x654>
 800311a:	e6aa      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 800311c:	0762      	lsls	r2, r4, #29
 800311e:	4310      	orrs	r0, r2
 8003120:	2280      	movs	r2, #128	@ 0x80
 8003122:	08e4      	lsrs	r4, r4, #3
 8003124:	0312      	lsls	r2, r2, #12
 8003126:	4214      	tst	r4, r2
 8003128:	d0d7      	beq.n	80030da <__aeabi_dsub+0x612>
 800312a:	9f02      	ldr	r7, [sp, #8]
 800312c:	08fd      	lsrs	r5, r7, #3
 800312e:	4215      	tst	r5, r2
 8003130:	d1d3      	bne.n	80030da <__aeabi_dsub+0x612>
 8003132:	4663      	mov	r3, ip
 8003134:	2601      	movs	r6, #1
 8003136:	08d8      	lsrs	r0, r3, #3
 8003138:	077b      	lsls	r3, r7, #29
 800313a:	002c      	movs	r4, r5
 800313c:	4318      	orrs	r0, r3
 800313e:	400e      	ands	r6, r1
 8003140:	e7cb      	b.n	80030da <__aeabi_dsub+0x612>
 8003142:	000a      	movs	r2, r1
 8003144:	0027      	movs	r7, r4
 8003146:	3a20      	subs	r2, #32
 8003148:	40d7      	lsrs	r7, r2
 800314a:	2920      	cmp	r1, #32
 800314c:	d005      	beq.n	800315a <__aeabi_dsub+0x692>
 800314e:	2240      	movs	r2, #64	@ 0x40
 8003150:	1a52      	subs	r2, r2, r1
 8003152:	4094      	lsls	r4, r2
 8003154:	0025      	movs	r5, r4
 8003156:	4305      	orrs	r5, r0
 8003158:	9503      	str	r5, [sp, #12]
 800315a:	9d03      	ldr	r5, [sp, #12]
 800315c:	1e6a      	subs	r2, r5, #1
 800315e:	4195      	sbcs	r5, r2
 8003160:	432f      	orrs	r7, r5
 8003162:	e610      	b.n	8002d86 <__aeabi_dsub+0x2be>
 8003164:	0014      	movs	r4, r2
 8003166:	2500      	movs	r5, #0
 8003168:	2200      	movs	r2, #0
 800316a:	e556      	b.n	8002c1a <__aeabi_dsub+0x152>
 800316c:	9b02      	ldr	r3, [sp, #8]
 800316e:	4460      	add	r0, ip
 8003170:	4699      	mov	r9, r3
 8003172:	4560      	cmp	r0, ip
 8003174:	4192      	sbcs	r2, r2
 8003176:	444c      	add	r4, r9
 8003178:	4252      	negs	r2, r2
 800317a:	0005      	movs	r5, r0
 800317c:	18a4      	adds	r4, r4, r2
 800317e:	e74c      	b.n	800301a <__aeabi_dsub+0x552>
 8003180:	001a      	movs	r2, r3
 8003182:	001c      	movs	r4, r3
 8003184:	432a      	orrs	r2, r5
 8003186:	d000      	beq.n	800318a <__aeabi_dsub+0x6c2>
 8003188:	e6b3      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 800318a:	e6c9      	b.n	8002f20 <__aeabi_dsub+0x458>
 800318c:	2480      	movs	r4, #128	@ 0x80
 800318e:	2600      	movs	r6, #0
 8003190:	0324      	lsls	r4, r4, #12
 8003192:	e5ae      	b.n	8002cf2 <__aeabi_dsub+0x22a>
 8003194:	2120      	movs	r1, #32
 8003196:	2500      	movs	r5, #0
 8003198:	1a09      	subs	r1, r1, r0
 800319a:	e517      	b.n	8002bcc <__aeabi_dsub+0x104>
 800319c:	2200      	movs	r2, #0
 800319e:	2500      	movs	r5, #0
 80031a0:	4c0b      	ldr	r4, [pc, #44]	@ (80031d0 <__aeabi_dsub+0x708>)
 80031a2:	e53a      	b.n	8002c1a <__aeabi_dsub+0x152>
 80031a4:	2d00      	cmp	r5, #0
 80031a6:	d100      	bne.n	80031aa <__aeabi_dsub+0x6e2>
 80031a8:	e5f6      	b.n	8002d98 <__aeabi_dsub+0x2d0>
 80031aa:	464b      	mov	r3, r9
 80031ac:	1bda      	subs	r2, r3, r7
 80031ae:	4692      	mov	sl, r2
 80031b0:	2f00      	cmp	r7, #0
 80031b2:	d100      	bne.n	80031b6 <__aeabi_dsub+0x6ee>
 80031b4:	e66f      	b.n	8002e96 <__aeabi_dsub+0x3ce>
 80031b6:	2a38      	cmp	r2, #56	@ 0x38
 80031b8:	dc05      	bgt.n	80031c6 <__aeabi_dsub+0x6fe>
 80031ba:	2680      	movs	r6, #128	@ 0x80
 80031bc:	0436      	lsls	r6, r6, #16
 80031be:	4334      	orrs	r4, r6
 80031c0:	4688      	mov	r8, r1
 80031c2:	000e      	movs	r6, r1
 80031c4:	e6d1      	b.n	8002f6a <__aeabi_dsub+0x4a2>
 80031c6:	4688      	mov	r8, r1
 80031c8:	000e      	movs	r6, r1
 80031ca:	2501      	movs	r5, #1
 80031cc:	e6de      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	000007ff 	.word	0x000007ff
 80031d4:	ff7fffff 	.word	0xff7fffff
 80031d8:	000007fe 	.word	0x000007fe
 80031dc:	2d00      	cmp	r5, #0
 80031de:	d100      	bne.n	80031e2 <__aeabi_dsub+0x71a>
 80031e0:	e668      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 80031e2:	464b      	mov	r3, r9
 80031e4:	1bd9      	subs	r1, r3, r7
 80031e6:	2f00      	cmp	r7, #0
 80031e8:	d101      	bne.n	80031ee <__aeabi_dsub+0x726>
 80031ea:	468a      	mov	sl, r1
 80031ec:	e5a7      	b.n	8002d3e <__aeabi_dsub+0x276>
 80031ee:	2701      	movs	r7, #1
 80031f0:	2938      	cmp	r1, #56	@ 0x38
 80031f2:	dd00      	ble.n	80031f6 <__aeabi_dsub+0x72e>
 80031f4:	e5c7      	b.n	8002d86 <__aeabi_dsub+0x2be>
 80031f6:	2280      	movs	r2, #128	@ 0x80
 80031f8:	0412      	lsls	r2, r2, #16
 80031fa:	4314      	orrs	r4, r2
 80031fc:	e5af      	b.n	8002d5e <__aeabi_dsub+0x296>
 80031fe:	46c0      	nop			@ (mov r8, r8)

08003200 <__aeabi_dcmpun>:
 8003200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003202:	46c6      	mov	lr, r8
 8003204:	031e      	lsls	r6, r3, #12
 8003206:	0b36      	lsrs	r6, r6, #12
 8003208:	46b0      	mov	r8, r6
 800320a:	4e0d      	ldr	r6, [pc, #52]	@ (8003240 <__aeabi_dcmpun+0x40>)
 800320c:	030c      	lsls	r4, r1, #12
 800320e:	004d      	lsls	r5, r1, #1
 8003210:	005f      	lsls	r7, r3, #1
 8003212:	b500      	push	{lr}
 8003214:	0b24      	lsrs	r4, r4, #12
 8003216:	0d6d      	lsrs	r5, r5, #21
 8003218:	0d7f      	lsrs	r7, r7, #21
 800321a:	42b5      	cmp	r5, r6
 800321c:	d00b      	beq.n	8003236 <__aeabi_dcmpun+0x36>
 800321e:	4908      	ldr	r1, [pc, #32]	@ (8003240 <__aeabi_dcmpun+0x40>)
 8003220:	2000      	movs	r0, #0
 8003222:	428f      	cmp	r7, r1
 8003224:	d104      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 8003226:	4646      	mov	r6, r8
 8003228:	4316      	orrs	r6, r2
 800322a:	0030      	movs	r0, r6
 800322c:	1e43      	subs	r3, r0, #1
 800322e:	4198      	sbcs	r0, r3
 8003230:	bc80      	pop	{r7}
 8003232:	46b8      	mov	r8, r7
 8003234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003236:	4304      	orrs	r4, r0
 8003238:	2001      	movs	r0, #1
 800323a:	2c00      	cmp	r4, #0
 800323c:	d1f8      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 800323e:	e7ee      	b.n	800321e <__aeabi_dcmpun+0x1e>
 8003240:	000007ff 	.word	0x000007ff

08003244 <__aeabi_d2iz>:
 8003244:	000b      	movs	r3, r1
 8003246:	0002      	movs	r2, r0
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	4d16      	ldr	r5, [pc, #88]	@ (80032a4 <__aeabi_d2iz+0x60>)
 800324c:	030c      	lsls	r4, r1, #12
 800324e:	b082      	sub	sp, #8
 8003250:	0049      	lsls	r1, r1, #1
 8003252:	2000      	movs	r0, #0
 8003254:	9200      	str	r2, [sp, #0]
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	0b24      	lsrs	r4, r4, #12
 800325a:	0d49      	lsrs	r1, r1, #21
 800325c:	0fde      	lsrs	r6, r3, #31
 800325e:	42a9      	cmp	r1, r5
 8003260:	dd04      	ble.n	800326c <__aeabi_d2iz+0x28>
 8003262:	4811      	ldr	r0, [pc, #68]	@ (80032a8 <__aeabi_d2iz+0x64>)
 8003264:	4281      	cmp	r1, r0
 8003266:	dd03      	ble.n	8003270 <__aeabi_d2iz+0x2c>
 8003268:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <__aeabi_d2iz+0x68>)
 800326a:	18f0      	adds	r0, r6, r3
 800326c:	b002      	add	sp, #8
 800326e:	bd70      	pop	{r4, r5, r6, pc}
 8003270:	2080      	movs	r0, #128	@ 0x80
 8003272:	0340      	lsls	r0, r0, #13
 8003274:	4320      	orrs	r0, r4
 8003276:	4c0e      	ldr	r4, [pc, #56]	@ (80032b0 <__aeabi_d2iz+0x6c>)
 8003278:	1a64      	subs	r4, r4, r1
 800327a:	2c1f      	cmp	r4, #31
 800327c:	dd08      	ble.n	8003290 <__aeabi_d2iz+0x4c>
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <__aeabi_d2iz+0x70>)
 8003280:	1a5b      	subs	r3, r3, r1
 8003282:	40d8      	lsrs	r0, r3
 8003284:	0003      	movs	r3, r0
 8003286:	4258      	negs	r0, r3
 8003288:	2e00      	cmp	r6, #0
 800328a:	d1ef      	bne.n	800326c <__aeabi_d2iz+0x28>
 800328c:	0018      	movs	r0, r3
 800328e:	e7ed      	b.n	800326c <__aeabi_d2iz+0x28>
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <__aeabi_d2iz+0x74>)
 8003292:	9a00      	ldr	r2, [sp, #0]
 8003294:	469c      	mov	ip, r3
 8003296:	0003      	movs	r3, r0
 8003298:	4461      	add	r1, ip
 800329a:	408b      	lsls	r3, r1
 800329c:	40e2      	lsrs	r2, r4
 800329e:	4313      	orrs	r3, r2
 80032a0:	e7f1      	b.n	8003286 <__aeabi_d2iz+0x42>
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	000003fe 	.word	0x000003fe
 80032a8:	0000041d 	.word	0x0000041d
 80032ac:	7fffffff 	.word	0x7fffffff
 80032b0:	00000433 	.word	0x00000433
 80032b4:	00000413 	.word	0x00000413
 80032b8:	fffffbed 	.word	0xfffffbed

080032bc <__aeabi_i2d>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	2800      	cmp	r0, #0
 80032c0:	d016      	beq.n	80032f0 <__aeabi_i2d+0x34>
 80032c2:	17c3      	asrs	r3, r0, #31
 80032c4:	18c5      	adds	r5, r0, r3
 80032c6:	405d      	eors	r5, r3
 80032c8:	0fc4      	lsrs	r4, r0, #31
 80032ca:	0028      	movs	r0, r5
 80032cc:	f000 f914 	bl	80034f8 <__clzsi2>
 80032d0:	4b10      	ldr	r3, [pc, #64]	@ (8003314 <__aeabi_i2d+0x58>)
 80032d2:	1a1b      	subs	r3, r3, r0
 80032d4:	055b      	lsls	r3, r3, #21
 80032d6:	0d5b      	lsrs	r3, r3, #21
 80032d8:	280a      	cmp	r0, #10
 80032da:	dc14      	bgt.n	8003306 <__aeabi_i2d+0x4a>
 80032dc:	0002      	movs	r2, r0
 80032de:	002e      	movs	r6, r5
 80032e0:	3215      	adds	r2, #21
 80032e2:	4096      	lsls	r6, r2
 80032e4:	220b      	movs	r2, #11
 80032e6:	1a12      	subs	r2, r2, r0
 80032e8:	40d5      	lsrs	r5, r2
 80032ea:	032d      	lsls	r5, r5, #12
 80032ec:	0b2d      	lsrs	r5, r5, #12
 80032ee:	e003      	b.n	80032f8 <__aeabi_i2d+0x3c>
 80032f0:	2400      	movs	r4, #0
 80032f2:	2300      	movs	r3, #0
 80032f4:	2500      	movs	r5, #0
 80032f6:	2600      	movs	r6, #0
 80032f8:	051b      	lsls	r3, r3, #20
 80032fa:	432b      	orrs	r3, r5
 80032fc:	07e4      	lsls	r4, r4, #31
 80032fe:	4323      	orrs	r3, r4
 8003300:	0030      	movs	r0, r6
 8003302:	0019      	movs	r1, r3
 8003304:	bd70      	pop	{r4, r5, r6, pc}
 8003306:	380b      	subs	r0, #11
 8003308:	4085      	lsls	r5, r0
 800330a:	032d      	lsls	r5, r5, #12
 800330c:	2600      	movs	r6, #0
 800330e:	0b2d      	lsrs	r5, r5, #12
 8003310:	e7f2      	b.n	80032f8 <__aeabi_i2d+0x3c>
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	0000041e 	.word	0x0000041e

08003318 <__aeabi_ui2d>:
 8003318:	b510      	push	{r4, lr}
 800331a:	1e04      	subs	r4, r0, #0
 800331c:	d010      	beq.n	8003340 <__aeabi_ui2d+0x28>
 800331e:	f000 f8eb 	bl	80034f8 <__clzsi2>
 8003322:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <__aeabi_ui2d+0x44>)
 8003324:	1a1b      	subs	r3, r3, r0
 8003326:	055b      	lsls	r3, r3, #21
 8003328:	0d5b      	lsrs	r3, r3, #21
 800332a:	280a      	cmp	r0, #10
 800332c:	dc0f      	bgt.n	800334e <__aeabi_ui2d+0x36>
 800332e:	220b      	movs	r2, #11
 8003330:	0021      	movs	r1, r4
 8003332:	1a12      	subs	r2, r2, r0
 8003334:	40d1      	lsrs	r1, r2
 8003336:	3015      	adds	r0, #21
 8003338:	030a      	lsls	r2, r1, #12
 800333a:	4084      	lsls	r4, r0
 800333c:	0b12      	lsrs	r2, r2, #12
 800333e:	e001      	b.n	8003344 <__aeabi_ui2d+0x2c>
 8003340:	2300      	movs	r3, #0
 8003342:	2200      	movs	r2, #0
 8003344:	051b      	lsls	r3, r3, #20
 8003346:	4313      	orrs	r3, r2
 8003348:	0020      	movs	r0, r4
 800334a:	0019      	movs	r1, r3
 800334c:	bd10      	pop	{r4, pc}
 800334e:	0022      	movs	r2, r4
 8003350:	380b      	subs	r0, #11
 8003352:	4082      	lsls	r2, r0
 8003354:	0312      	lsls	r2, r2, #12
 8003356:	2400      	movs	r4, #0
 8003358:	0b12      	lsrs	r2, r2, #12
 800335a:	e7f3      	b.n	8003344 <__aeabi_ui2d+0x2c>
 800335c:	0000041e 	.word	0x0000041e

08003360 <__aeabi_f2d>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	0242      	lsls	r2, r0, #9
 8003364:	0043      	lsls	r3, r0, #1
 8003366:	0fc4      	lsrs	r4, r0, #31
 8003368:	20fe      	movs	r0, #254	@ 0xfe
 800336a:	0e1b      	lsrs	r3, r3, #24
 800336c:	1c59      	adds	r1, r3, #1
 800336e:	0a55      	lsrs	r5, r2, #9
 8003370:	4208      	tst	r0, r1
 8003372:	d00c      	beq.n	800338e <__aeabi_f2d+0x2e>
 8003374:	21e0      	movs	r1, #224	@ 0xe0
 8003376:	0089      	lsls	r1, r1, #2
 8003378:	468c      	mov	ip, r1
 800337a:	076d      	lsls	r5, r5, #29
 800337c:	0b12      	lsrs	r2, r2, #12
 800337e:	4463      	add	r3, ip
 8003380:	051b      	lsls	r3, r3, #20
 8003382:	4313      	orrs	r3, r2
 8003384:	07e4      	lsls	r4, r4, #31
 8003386:	4323      	orrs	r3, r4
 8003388:	0028      	movs	r0, r5
 800338a:	0019      	movs	r1, r3
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	2b00      	cmp	r3, #0
 8003390:	d114      	bne.n	80033bc <__aeabi_f2d+0x5c>
 8003392:	2d00      	cmp	r5, #0
 8003394:	d01b      	beq.n	80033ce <__aeabi_f2d+0x6e>
 8003396:	0028      	movs	r0, r5
 8003398:	f000 f8ae 	bl	80034f8 <__clzsi2>
 800339c:	280a      	cmp	r0, #10
 800339e:	dc1c      	bgt.n	80033da <__aeabi_f2d+0x7a>
 80033a0:	230b      	movs	r3, #11
 80033a2:	002a      	movs	r2, r5
 80033a4:	1a1b      	subs	r3, r3, r0
 80033a6:	40da      	lsrs	r2, r3
 80033a8:	0003      	movs	r3, r0
 80033aa:	3315      	adds	r3, #21
 80033ac:	409d      	lsls	r5, r3
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <__aeabi_f2d+0x88>)
 80033b0:	0312      	lsls	r2, r2, #12
 80033b2:	1a1b      	subs	r3, r3, r0
 80033b4:	055b      	lsls	r3, r3, #21
 80033b6:	0b12      	lsrs	r2, r2, #12
 80033b8:	0d5b      	lsrs	r3, r3, #21
 80033ba:	e7e1      	b.n	8003380 <__aeabi_f2d+0x20>
 80033bc:	2d00      	cmp	r5, #0
 80033be:	d009      	beq.n	80033d4 <__aeabi_f2d+0x74>
 80033c0:	0b13      	lsrs	r3, r2, #12
 80033c2:	2280      	movs	r2, #128	@ 0x80
 80033c4:	0312      	lsls	r2, r2, #12
 80033c6:	431a      	orrs	r2, r3
 80033c8:	076d      	lsls	r5, r5, #29
 80033ca:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033cc:	e7d8      	b.n	8003380 <__aeabi_f2d+0x20>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2200      	movs	r2, #0
 80033d2:	e7d5      	b.n	8003380 <__aeabi_f2d+0x20>
 80033d4:	2200      	movs	r2, #0
 80033d6:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033d8:	e7d2      	b.n	8003380 <__aeabi_f2d+0x20>
 80033da:	0003      	movs	r3, r0
 80033dc:	002a      	movs	r2, r5
 80033de:	3b0b      	subs	r3, #11
 80033e0:	409a      	lsls	r2, r3
 80033e2:	2500      	movs	r5, #0
 80033e4:	e7e3      	b.n	80033ae <__aeabi_f2d+0x4e>
 80033e6:	46c0      	nop			@ (mov r8, r8)
 80033e8:	00000389 	.word	0x00000389
 80033ec:	000007ff 	.word	0x000007ff

080033f0 <__aeabi_d2f>:
 80033f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f2:	004b      	lsls	r3, r1, #1
 80033f4:	030f      	lsls	r7, r1, #12
 80033f6:	0d5b      	lsrs	r3, r3, #21
 80033f8:	4c3b      	ldr	r4, [pc, #236]	@ (80034e8 <__aeabi_d2f+0xf8>)
 80033fa:	0f45      	lsrs	r5, r0, #29
 80033fc:	b083      	sub	sp, #12
 80033fe:	0a7f      	lsrs	r7, r7, #9
 8003400:	1c5e      	adds	r6, r3, #1
 8003402:	432f      	orrs	r7, r5
 8003404:	9000      	str	r0, [sp, #0]
 8003406:	9101      	str	r1, [sp, #4]
 8003408:	0fca      	lsrs	r2, r1, #31
 800340a:	00c5      	lsls	r5, r0, #3
 800340c:	4226      	tst	r6, r4
 800340e:	d00b      	beq.n	8003428 <__aeabi_d2f+0x38>
 8003410:	4936      	ldr	r1, [pc, #216]	@ (80034ec <__aeabi_d2f+0xfc>)
 8003412:	185c      	adds	r4, r3, r1
 8003414:	2cfe      	cmp	r4, #254	@ 0xfe
 8003416:	dd13      	ble.n	8003440 <__aeabi_d2f+0x50>
 8003418:	20ff      	movs	r0, #255	@ 0xff
 800341a:	2300      	movs	r3, #0
 800341c:	05c0      	lsls	r0, r0, #23
 800341e:	4318      	orrs	r0, r3
 8003420:	07d2      	lsls	r2, r2, #31
 8003422:	4310      	orrs	r0, r2
 8003424:	b003      	add	sp, #12
 8003426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <__aeabi_d2f+0x42>
 800342c:	2000      	movs	r0, #0
 800342e:	2300      	movs	r3, #0
 8003430:	e7f4      	b.n	800341c <__aeabi_d2f+0x2c>
 8003432:	433d      	orrs	r5, r7
 8003434:	d0f0      	beq.n	8003418 <__aeabi_d2f+0x28>
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	03db      	lsls	r3, r3, #15
 800343a:	20ff      	movs	r0, #255	@ 0xff
 800343c:	433b      	orrs	r3, r7
 800343e:	e7ed      	b.n	800341c <__aeabi_d2f+0x2c>
 8003440:	2c00      	cmp	r4, #0
 8003442:	dd14      	ble.n	800346e <__aeabi_d2f+0x7e>
 8003444:	9b00      	ldr	r3, [sp, #0]
 8003446:	00ff      	lsls	r7, r7, #3
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	4183      	sbcs	r3, r0
 800344e:	0f69      	lsrs	r1, r5, #29
 8003450:	433b      	orrs	r3, r7
 8003452:	430b      	orrs	r3, r1
 8003454:	0759      	lsls	r1, r3, #29
 8003456:	d041      	beq.n	80034dc <__aeabi_d2f+0xec>
 8003458:	210f      	movs	r1, #15
 800345a:	4019      	ands	r1, r3
 800345c:	2904      	cmp	r1, #4
 800345e:	d028      	beq.n	80034b2 <__aeabi_d2f+0xc2>
 8003460:	3304      	adds	r3, #4
 8003462:	0159      	lsls	r1, r3, #5
 8003464:	d525      	bpl.n	80034b2 <__aeabi_d2f+0xc2>
 8003466:	3401      	adds	r4, #1
 8003468:	2300      	movs	r3, #0
 800346a:	b2e0      	uxtb	r0, r4
 800346c:	e7d6      	b.n	800341c <__aeabi_d2f+0x2c>
 800346e:	0021      	movs	r1, r4
 8003470:	3117      	adds	r1, #23
 8003472:	dbdb      	blt.n	800342c <__aeabi_d2f+0x3c>
 8003474:	2180      	movs	r1, #128	@ 0x80
 8003476:	201e      	movs	r0, #30
 8003478:	0409      	lsls	r1, r1, #16
 800347a:	4339      	orrs	r1, r7
 800347c:	1b00      	subs	r0, r0, r4
 800347e:	281f      	cmp	r0, #31
 8003480:	dd1b      	ble.n	80034ba <__aeabi_d2f+0xca>
 8003482:	2602      	movs	r6, #2
 8003484:	4276      	negs	r6, r6
 8003486:	1b34      	subs	r4, r6, r4
 8003488:	000e      	movs	r6, r1
 800348a:	40e6      	lsrs	r6, r4
 800348c:	0034      	movs	r4, r6
 800348e:	2820      	cmp	r0, #32
 8003490:	d004      	beq.n	800349c <__aeabi_d2f+0xac>
 8003492:	4817      	ldr	r0, [pc, #92]	@ (80034f0 <__aeabi_d2f+0x100>)
 8003494:	4684      	mov	ip, r0
 8003496:	4463      	add	r3, ip
 8003498:	4099      	lsls	r1, r3
 800349a:	430d      	orrs	r5, r1
 800349c:	002b      	movs	r3, r5
 800349e:	1e59      	subs	r1, r3, #1
 80034a0:	418b      	sbcs	r3, r1
 80034a2:	4323      	orrs	r3, r4
 80034a4:	0759      	lsls	r1, r3, #29
 80034a6:	d015      	beq.n	80034d4 <__aeabi_d2f+0xe4>
 80034a8:	210f      	movs	r1, #15
 80034aa:	2400      	movs	r4, #0
 80034ac:	4019      	ands	r1, r3
 80034ae:	2904      	cmp	r1, #4
 80034b0:	d117      	bne.n	80034e2 <__aeabi_d2f+0xf2>
 80034b2:	019b      	lsls	r3, r3, #6
 80034b4:	0a5b      	lsrs	r3, r3, #9
 80034b6:	b2e0      	uxtb	r0, r4
 80034b8:	e7b0      	b.n	800341c <__aeabi_d2f+0x2c>
 80034ba:	4c0e      	ldr	r4, [pc, #56]	@ (80034f4 <__aeabi_d2f+0x104>)
 80034bc:	191c      	adds	r4, r3, r4
 80034be:	002b      	movs	r3, r5
 80034c0:	40a5      	lsls	r5, r4
 80034c2:	40c3      	lsrs	r3, r0
 80034c4:	40a1      	lsls	r1, r4
 80034c6:	1e68      	subs	r0, r5, #1
 80034c8:	4185      	sbcs	r5, r0
 80034ca:	4329      	orrs	r1, r5
 80034cc:	430b      	orrs	r3, r1
 80034ce:	2400      	movs	r4, #0
 80034d0:	0759      	lsls	r1, r3, #29
 80034d2:	d1c1      	bne.n	8003458 <__aeabi_d2f+0x68>
 80034d4:	019b      	lsls	r3, r3, #6
 80034d6:	2000      	movs	r0, #0
 80034d8:	0a5b      	lsrs	r3, r3, #9
 80034da:	e79f      	b.n	800341c <__aeabi_d2f+0x2c>
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	b2e0      	uxtb	r0, r4
 80034e0:	e79c      	b.n	800341c <__aeabi_d2f+0x2c>
 80034e2:	3304      	adds	r3, #4
 80034e4:	e7e5      	b.n	80034b2 <__aeabi_d2f+0xc2>
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	000007fe 	.word	0x000007fe
 80034ec:	fffffc80 	.word	0xfffffc80
 80034f0:	fffffca2 	.word	0xfffffca2
 80034f4:	fffffc82 	.word	0xfffffc82

080034f8 <__clzsi2>:
 80034f8:	211c      	movs	r1, #28
 80034fa:	2301      	movs	r3, #1
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	4298      	cmp	r0, r3
 8003500:	d301      	bcc.n	8003506 <__clzsi2+0xe>
 8003502:	0c00      	lsrs	r0, r0, #16
 8003504:	3910      	subs	r1, #16
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	4298      	cmp	r0, r3
 800350a:	d301      	bcc.n	8003510 <__clzsi2+0x18>
 800350c:	0a00      	lsrs	r0, r0, #8
 800350e:	3908      	subs	r1, #8
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	4298      	cmp	r0, r3
 8003514:	d301      	bcc.n	800351a <__clzsi2+0x22>
 8003516:	0900      	lsrs	r0, r0, #4
 8003518:	3904      	subs	r1, #4
 800351a:	a202      	add	r2, pc, #8	@ (adr r2, 8003524 <__clzsi2+0x2c>)
 800351c:	5c10      	ldrb	r0, [r2, r0]
 800351e:	1840      	adds	r0, r0, r1
 8003520:	4770      	bx	lr
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	02020304 	.word	0x02020304
 8003528:	01010101 	.word	0x01010101
	...

08003534 <__clzdi2>:
 8003534:	b510      	push	{r4, lr}
 8003536:	2900      	cmp	r1, #0
 8003538:	d103      	bne.n	8003542 <__clzdi2+0xe>
 800353a:	f7ff ffdd 	bl	80034f8 <__clzsi2>
 800353e:	3020      	adds	r0, #32
 8003540:	e002      	b.n	8003548 <__clzdi2+0x14>
 8003542:	0008      	movs	r0, r1
 8003544:	f7ff ffd8 	bl	80034f8 <__clzsi2>
 8003548:	bd10      	pop	{r4, pc}
 800354a:	46c0      	nop			@ (mov r8, r8)

0800354c <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800354c:	b590      	push	{r4, r7, lr}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	1dbb      	adds	r3, r7, #6
 8003558:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800355a:	4b17      	ldr	r3, [pc, #92]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003560:	f007 fc40 	bl	800ade4 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003564:	2316      	movs	r3, #22
 8003566:	18fb      	adds	r3, r7, r3
 8003568:	2200      	movs	r2, #0
 800356a:	801a      	strh	r2, [r3, #0]
 800356c:	e015      	b.n	800359a <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800356e:	4b12      	ldr	r3, [pc, #72]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 8003570:	6819      	ldr	r1, [r3, #0]
 8003572:	2416      	movs	r4, #22
 8003574:	193b      	adds	r3, r7, r4
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	18d3      	adds	r3, r2, r3
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	001a      	movs	r2, r3
 8003580:	2000      	movs	r0, #0
 8003582:	f007 fc97 	bl	800aeb4 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 8003586:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	4b0a      	ldr	r3, [pc, #40]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 800358e:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003590:	193b      	adds	r3, r7, r4
 8003592:	881a      	ldrh	r2, [r3, #0]
 8003594:	193b      	adds	r3, r7, r4
 8003596:	3201      	adds	r2, #1
 8003598:	801a      	strh	r2, [r3, #0]
 800359a:	2316      	movs	r3, #22
 800359c:	18fa      	adds	r2, r7, r3
 800359e:	1dbb      	adds	r3, r7, #6
 80035a0:	8812      	ldrh	r2, [r2, #0]
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d3e2      	bcc.n	800356e <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80035a8:	f007 fc4a 	bl	800ae40 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80035ac:	4b02      	ldr	r3, [pc, #8]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
}
 80035b0:	0018      	movs	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b007      	add	sp, #28
 80035b6:	bd90      	pop	{r4, r7, pc}
 80035b8:	2000041c 	.word	0x2000041c

080035bc <WriteUint8ArrayEepromSafe>:

uint32_t WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	0019      	movs	r1, r3
 80035c8:	1dbb      	adds	r3, r7, #6
 80035ca:	801a      	strh	r2, [r3, #0]
 80035cc:	1d3b      	adds	r3, r7, #4
 80035ce:	1c0a      	adds	r2, r1, #0
 80035d0:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80035d2:	1dba      	adds	r2, r7, #6
 80035d4:	1d3b      	adds	r3, r7, #4
 80035d6:	8812      	ldrh	r2, [r2, #0]
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d806      	bhi.n	80035ec <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80035de:	1dbb      	adds	r3, r7, #6
 80035e0:	881a      	ldrh	r2, [r3, #0]
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	0018      	movs	r0, r3
 80035e8:	f7ff ffb0 	bl	800354c <WriteUint8ArrayEeprom>
    }
}
 80035ec:	46c0      	nop			@ (mov r8, r8)
 80035ee:	0018      	movs	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b004      	add	sp, #16
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b086      	sub	sp, #24
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	1dbb      	adds	r3, r7, #6
 8003602:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003604:	2316      	movs	r3, #22
 8003606:	18fb      	adds	r3, r7, r3
 8003608:	2200      	movs	r2, #0
 800360a:	801a      	strh	r2, [r3, #0]
 800360c:	e010      	b.n	8003630 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800360e:	2016      	movs	r0, #22
 8003610:	183b      	adds	r3, r7, r0
 8003612:	881a      	ldrh	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	18d3      	adds	r3, r2, r3
 8003618:	0019      	movs	r1, r3
 800361a:	183b      	adds	r3, r7, r0
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	18d3      	adds	r3, r2, r3
 8003622:	780a      	ldrb	r2, [r1, #0]
 8003624:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003626:	183b      	adds	r3, r7, r0
 8003628:	881a      	ldrh	r2, [r3, #0]
 800362a:	183b      	adds	r3, r7, r0
 800362c:	3201      	adds	r2, #1
 800362e:	801a      	strh	r2, [r3, #0]
 8003630:	2316      	movs	r3, #22
 8003632:	18fa      	adds	r2, r7, r3
 8003634:	1dbb      	adds	r3, r7, #6
 8003636:	8812      	ldrh	r2, [r2, #0]
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d3e7      	bcc.n	800360e <ReadUint8ArrayEEprom+0x18>
    }
}
 800363e:	46c0      	nop			@ (mov r8, r8)
 8003640:	46c0      	nop			@ (mov r8, r8)
 8003642:	46bd      	mov	sp, r7
 8003644:	b006      	add	sp, #24
 8003646:	bd80      	pop	{r7, pc}

08003648 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	000a      	movs	r2, r1
 8003652:	1cbb      	adds	r3, r7, #2
 8003654:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003656:	f007 fbc5 	bl	800ade4 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800365a:	230e      	movs	r3, #14
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	2200      	movs	r2, #0
 8003660:	801a      	strh	r2, [r3, #0]
 8003662:	e00c      	b.n	800367e <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003664:	240e      	movs	r4, #14
 8003666:	193b      	adds	r3, r7, r4
 8003668:	881a      	ldrh	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	18d3      	adds	r3, r2, r3
 800366e:	0018      	movs	r0, r3
 8003670:	f007 fbf4 	bl	800ae5c <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003674:	193b      	adds	r3, r7, r4
 8003676:	193a      	adds	r2, r7, r4
 8003678:	8812      	ldrh	r2, [r2, #0]
 800367a:	3204      	adds	r2, #4
 800367c:	801a      	strh	r2, [r3, #0]
 800367e:	230e      	movs	r3, #14
 8003680:	18fa      	adds	r2, r7, r3
 8003682:	1cbb      	adds	r3, r7, #2
 8003684:	8812      	ldrh	r2, [r2, #0]
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d3eb      	bcc.n	8003664 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800368c:	f007 fbd8 	bl	800ae40 <HAL_FLASHEx_DATAEEPROM_Lock>
 8003690:	46c0      	nop			@ (mov r8, r8)
 8003692:	46bd      	mov	sp, r7
 8003694:	b005      	add	sp, #20
 8003696:	bd90      	pop	{r4, r7, pc}

08003698 <setCharges>:
typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;

void setCharges(){
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 800369c:	f001 feda 	bl	8005454 <ReadBatteryVoltage>
 80036a0:	1c02      	adds	r2, r0, #0
 80036a2:	4b05      	ldr	r3, [pc, #20]	@ (80036b8 <setCharges+0x20>)
 80036a4:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80036a6:	f001 ff37 	bl	8005518 <ReadSolarVoltage>
 80036aa:	1c02      	adds	r2, r0, #0
 80036ac:	4b03      	ldr	r3, [pc, #12]	@ (80036bc <setCharges+0x24>)
 80036ae:	601a      	str	r2, [r3, #0]
}
 80036b0:	46c0      	nop			@ (mov r8, r8)
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	20000540 	.word	0x20000540
 80036bc:	20000544 	.word	0x20000544

080036c0 <setMeasurement>:

void setMeasurement(float temp, float humid, uint16_t voc){
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	1dbb      	adds	r3, r7, #6
 80036cc:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 80036ce:	4b07      	ldr	r3, [pc, #28]	@ (80036ec <setMeasurement+0x2c>)
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80036d4:	4b06      	ldr	r3, [pc, #24]	@ (80036f0 <setMeasurement+0x30>)
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 80036da:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <setMeasurement+0x34>)
 80036dc:	1dba      	adds	r2, r7, #6
 80036de:	8812      	ldrh	r2, [r2, #0]
 80036e0:	801a      	strh	r2, [r3, #0]
}
 80036e2:	46c0      	nop			@ (mov r8, r8)
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b004      	add	sp, #16
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			@ (mov r8, r8)
 80036ec:	20000538 	.word	0x20000538
 80036f0:	2000053c 	.word	0x2000053c
 80036f4:	20000548 	.word	0x20000548

080036f8 <setMic>:
void setMic(float dB){
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  dBC = dB;
 8003700:	4b03      	ldr	r3, [pc, #12]	@ (8003710 <setMic+0x18>)
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	601a      	str	r2, [r3, #0]
}
 8003706:	46c0      	nop			@ (mov r8, r8)
 8003708:	46bd      	mov	sp, r7
 800370a:	b002      	add	sp, #8
 800370c:	bd80      	pop	{r7, pc}
 800370e:	46c0      	nop			@ (mov r8, r8)
 8003710:	2000054c 	.word	0x2000054c

08003714 <SetConfigMode>:

void SetConfigMode(){
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 8003718:	4b02      	ldr	r3, [pc, #8]	@ (8003724 <SetConfigMode+0x10>)
 800371a:	2201      	movs	r2, #1
 800371c:	701a      	strb	r2, [r3, #0]
}
 800371e:	46c0      	nop			@ (mov r8, r8)
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	2000052a 	.word	0x2000052a

08003728 <ESP_GetUID>:
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 800372c:	f006 fb26 	bl	8009d7c <HAL_GetUIDw0>
 8003730:	0002      	movs	r2, r0
 8003732:	4b07      	ldr	r3, [pc, #28]	@ (8003750 <ESP_GetUID+0x28>)
 8003734:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 8003736:	f006 fb2b 	bl	8009d90 <HAL_GetUIDw1>
 800373a:	0002      	movs	r2, r0
 800373c:	4b04      	ldr	r3, [pc, #16]	@ (8003750 <ESP_GetUID+0x28>)
 800373e:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003740:	f006 fb30 	bl	8009da4 <HAL_GetUIDw2>
 8003744:	0002      	movs	r2, r0
 8003746:	4b02      	ldr	r3, [pc, #8]	@ (8003750 <ESP_GetUID+0x28>)
 8003748:	609a      	str	r2, [r3, #8]
}
 800374a:	46c0      	nop			@ (mov r8, r8)
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	2000052c 	.word	0x2000052c

08003754 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 800375c:	4b05      	ldr	r3, [pc, #20]	@ (8003774 <ESP_Init+0x20>)
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003762:	4b05      	ldr	r3, [pc, #20]	@ (8003778 <ESP_Init+0x24>)
 8003764:	2202      	movs	r2, #2
 8003766:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003768:	f7ff ffde 	bl	8003728 <ESP_GetUID>
}
 800376c:	46c0      	nop			@ (mov r8, r8)
 800376e:	46bd      	mov	sp, r7
 8003770:	b002      	add	sp, #8
 8003772:	bd80      	pop	{r7, pc}
 8003774:	20000420 	.word	0x20000420
 8003778:	20000059 	.word	0x20000059

0800377c <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 800377c:	b5b0      	push	{r4, r5, r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	000a      	movs	r2, r1
 8003786:	1cbb      	adds	r3, r7, #2
 8003788:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 800378a:	4b0e      	ldr	r3, [pc, #56]	@ (80037c4 <ESP_Send+0x48>)
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	250f      	movs	r5, #15
 8003790:	197c      	adds	r4, r7, r5
 8003792:	1cbb      	adds	r3, r7, #2
 8003794:	881a      	ldrh	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	0019      	movs	r1, r3
 800379a:	f00d fd61 	bl	8011260 <HAL_UART_Transmit_DMA>
 800379e:	0003      	movs	r3, r0
 80037a0:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80037a2:	197b      	adds	r3, r7, r5
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d007      	beq.n	80037ba <ESP_Send+0x3e>
    Debug("Error in HAL_UART_Transmit_DMA");
 80037aa:	4a07      	ldr	r2, [pc, #28]	@ (80037c8 <ESP_Send+0x4c>)
 80037ac:	4b07      	ldr	r3, [pc, #28]	@ (80037cc <ESP_Send+0x50>)
 80037ae:	0019      	movs	r1, r3
 80037b0:	2003      	movs	r0, #3
 80037b2:	f005 ff19 	bl	80095e8 <CreateLine>
    return false;
 80037b6:	2300      	movs	r3, #0
 80037b8:	e000      	b.n	80037bc <ESP_Send+0x40>
  }
  return true;
 80037ba:	2301      	movs	r3, #1
}
 80037bc:	0018      	movs	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	b004      	add	sp, #16
 80037c2:	bdb0      	pop	{r4, r5, r7, pc}
 80037c4:	20000420 	.word	0x20000420
 80037c8:	0801aac0 	.word	0x0801aac0
 80037cc:	0801aae0 	.word	0x0801aae0

080037d0 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint8_t length) {
 80037d0:	b5b0      	push	{r4, r5, r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	000a      	movs	r2, r1
 80037da:	1cfb      	adds	r3, r7, #3
 80037dc:	701a      	strb	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 80037de:	4b12      	ldr	r3, [pc, #72]	@ (8003828 <ESP_Receive+0x58>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 80037e4:	4b11      	ldr	r3, [pc, #68]	@ (800382c <ESP_Receive+0x5c>)
 80037e6:	6818      	ldr	r0, [r3, #0]
 80037e8:	1cfb      	adds	r3, r7, #3
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	250f      	movs	r5, #15
 80037f0:	197c      	adds	r4, r7, r5
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	0019      	movs	r1, r3
 80037f6:	f00d fdc3 	bl	8011380 <HAL_UART_Receive_DMA>
 80037fa:	0003      	movs	r3, r0
 80037fc:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80037fe:	197b      	adds	r3, r7, r5
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <ESP_Receive+0x4c>
    Debug("Error in HAL_UART_Receive_DMA.");
 8003806:	4a0a      	ldr	r2, [pc, #40]	@ (8003830 <ESP_Receive+0x60>)
 8003808:	4b0a      	ldr	r3, [pc, #40]	@ (8003834 <ESP_Receive+0x64>)
 800380a:	0019      	movs	r1, r3
 800380c:	2003      	movs	r0, #3
 800380e:	f005 feeb 	bl	80095e8 <CreateLine>
    RxComplete = true;
 8003812:	4b05      	ldr	r3, [pc, #20]	@ (8003828 <ESP_Receive+0x58>)
 8003814:	2201      	movs	r2, #1
 8003816:	701a      	strb	r2, [r3, #0]
    return false;
 8003818:	2300      	movs	r3, #0
 800381a:	e000      	b.n	800381e <ESP_Receive+0x4e>
  }
  return true;
 800381c:	2301      	movs	r3, #1
}
 800381e:	0018      	movs	r0, r3
 8003820:	46bd      	mov	sp, r7
 8003822:	b004      	add	sp, #16
 8003824:	bdb0      	pop	{r4, r5, r7, pc}
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	20000424 	.word	0x20000424
 800382c:	20000420 	.word	0x20000420
 8003830:	0801aae4 	.word	0x0801aae4
 8003834:	0801aae0 	.word	0x0801aae0

08003838 <HAL_UART_RxCpltCallback>:

// Callback for reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003840:	4b08      	ldr	r3, [pc, #32]	@ (8003864 <HAL_UART_RxCpltCallback+0x2c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	429a      	cmp	r2, r3
 8003848:	d108      	bne.n	800385c <HAL_UART_RxCpltCallback+0x24>
    RxComplete = true;
 800384a:	4b07      	ldr	r3, [pc, #28]	@ (8003868 <HAL_UART_RxCpltCallback+0x30>)
 800384c:	2201      	movs	r2, #1
 800384e:	701a      	strb	r2, [r3, #0]
    Debug("RxComplete");
 8003850:	4a06      	ldr	r2, [pc, #24]	@ (800386c <HAL_UART_RxCpltCallback+0x34>)
 8003852:	4b07      	ldr	r3, [pc, #28]	@ (8003870 <HAL_UART_RxCpltCallback+0x38>)
 8003854:	0019      	movs	r1, r3
 8003856:	2003      	movs	r0, #3
 8003858:	f005 fec6 	bl	80095e8 <CreateLine>
  }
}
 800385c:	46c0      	nop			@ (mov r8, r8)
 800385e:	46bd      	mov	sp, r7
 8003860:	b002      	add	sp, #8
 8003862:	bd80      	pop	{r7, pc}
 8003864:	20000420 	.word	0x20000420
 8003868:	20000424 	.word	0x20000424
 800386c:	0801ab04 	.word	0x0801ab04
 8003870:	0801aae0 	.word	0x0801aae0

08003874 <HAL_UART_ErrorCallback>:

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
    // Handle error
    //EspState = ESP_STATE_ERROR;
  }
}
 800387c:	46c0      	nop			@ (mov r8, r8)
 800387e:	46bd      	mov	sp, r7
 8003880:	b002      	add	sp, #8
 8003882:	bd80      	pop	{r7, pc}

08003884 <CreateMessage>:
uint16_t CreateMessage(){
 8003884:	b5b0      	push	{r4, r5, r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af02      	add	r7, sp, #8
  uint16_t messageLength = 0;
 800388a:	250e      	movs	r5, #14
 800388c:	197b      	adds	r3, r7, r5
 800388e:	2200      	movs	r2, #0
 8003890:	801a      	strh	r2, [r3, #0]
  uint8_t sensorID[IdSize];
  setCharges();
 8003892:	f7ff ff01 	bl	8003698 <setCharges>
  ReadUint8ArrayEEprom(TempConfigAddr, sensorID, IdSize);
 8003896:	003b      	movs	r3, r7
 8003898:	4845      	ldr	r0, [pc, #276]	@ (80039b0 <CreateMessage+0x12c>)
 800389a:	220c      	movs	r2, #12
 800389c:	0019      	movs	r1, r3
 800389e:	f7ff feaa 	bl	80035f6 <ReadUint8ArrayEEprom>
  sprintf(messagePart1, "\"name\":\"temp\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"graden\"", sensorID1, Temperature);
 80038a2:	4b44      	ldr	r3, [pc, #272]	@ (80039b4 <CreateMessage+0x130>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	1c18      	adds	r0, r3, #0
 80038a8:	f7ff fd5a 	bl	8003360 <__aeabi_f2d>
 80038ac:	0002      	movs	r2, r0
 80038ae:	000b      	movs	r3, r1
 80038b0:	4c41      	ldr	r4, [pc, #260]	@ (80039b8 <CreateMessage+0x134>)
 80038b2:	4942      	ldr	r1, [pc, #264]	@ (80039bc <CreateMessage+0x138>)
 80038b4:	4842      	ldr	r0, [pc, #264]	@ (80039c0 <CreateMessage+0x13c>)
 80038b6:	9200      	str	r2, [sp, #0]
 80038b8:	9301      	str	r3, [sp, #4]
 80038ba:	0022      	movs	r2, r4
 80038bc:	f014 f956 	bl	8017b6c <siprintf>
  messageLength += strlen(messagePart1);
 80038c0:	4b3f      	ldr	r3, [pc, #252]	@ (80039c0 <CreateMessage+0x13c>)
 80038c2:	0018      	movs	r0, r3
 80038c4:	f7fc fc20 	bl	8000108 <strlen>
 80038c8:	0003      	movs	r3, r0
 80038ca:	b299      	uxth	r1, r3
 80038cc:	197b      	adds	r3, r7, r5
 80038ce:	197a      	adds	r2, r7, r5
 80038d0:	8812      	ldrh	r2, [r2, #0]
 80038d2:	188a      	adds	r2, r1, r2
 80038d4:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart2, "\"name\":\"humid\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"%%\"", sensorID2, Humidity);
 80038d6:	4b3b      	ldr	r3, [pc, #236]	@ (80039c4 <CreateMessage+0x140>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	1c18      	adds	r0, r3, #0
 80038dc:	f7ff fd40 	bl	8003360 <__aeabi_f2d>
 80038e0:	0002      	movs	r2, r0
 80038e2:	000b      	movs	r3, r1
 80038e4:	4c38      	ldr	r4, [pc, #224]	@ (80039c8 <CreateMessage+0x144>)
 80038e6:	4939      	ldr	r1, [pc, #228]	@ (80039cc <CreateMessage+0x148>)
 80038e8:	4839      	ldr	r0, [pc, #228]	@ (80039d0 <CreateMessage+0x14c>)
 80038ea:	9200      	str	r2, [sp, #0]
 80038ec:	9301      	str	r3, [sp, #4]
 80038ee:	0022      	movs	r2, r4
 80038f0:	f014 f93c 	bl	8017b6c <siprintf>
  messageLength += strlen(messagePart2);
 80038f4:	4b36      	ldr	r3, [pc, #216]	@ (80039d0 <CreateMessage+0x14c>)
 80038f6:	0018      	movs	r0, r3
 80038f8:	f7fc fc06 	bl	8000108 <strlen>
 80038fc:	0003      	movs	r3, r0
 80038fe:	b299      	uxth	r1, r3
 8003900:	197b      	adds	r3, r7, r5
 8003902:	197a      	adds	r2, r7, r5
 8003904:	8812      	ldrh	r2, [r2, #0]
 8003906:	188a      	adds	r2, r1, r2
 8003908:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart3, "\"name\":\"Sound\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"dBC\"", sensorID3, dBC);
 800390a:	4b32      	ldr	r3, [pc, #200]	@ (80039d4 <CreateMessage+0x150>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	1c18      	adds	r0, r3, #0
 8003910:	f7ff fd26 	bl	8003360 <__aeabi_f2d>
 8003914:	0002      	movs	r2, r0
 8003916:	000b      	movs	r3, r1
 8003918:	4c2f      	ldr	r4, [pc, #188]	@ (80039d8 <CreateMessage+0x154>)
 800391a:	4930      	ldr	r1, [pc, #192]	@ (80039dc <CreateMessage+0x158>)
 800391c:	4830      	ldr	r0, [pc, #192]	@ (80039e0 <CreateMessage+0x15c>)
 800391e:	9200      	str	r2, [sp, #0]
 8003920:	9301      	str	r3, [sp, #4]
 8003922:	0022      	movs	r2, r4
 8003924:	f014 f922 	bl	8017b6c <siprintf>
  messageLength += strlen(messagePart3);
 8003928:	4b2d      	ldr	r3, [pc, #180]	@ (80039e0 <CreateMessage+0x15c>)
 800392a:	0018      	movs	r0, r3
 800392c:	f7fc fbec 	bl	8000108 <strlen>
 8003930:	0003      	movs	r3, r0
 8003932:	b299      	uxth	r1, r3
 8003934:	197b      	adds	r3, r7, r5
 8003936:	197a      	adds	r2, r7, r5
 8003938:	8812      	ldrh	r2, [r2, #0]
 800393a:	188a      	adds	r2, r1, r2
 800393c:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart4, "\"name\":\"voc\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%d, \"unit\": \"VOC index\"", sensorID4, VOCIndex);
 800393e:	4b29      	ldr	r3, [pc, #164]	@ (80039e4 <CreateMessage+0x160>)
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	4a29      	ldr	r2, [pc, #164]	@ (80039e8 <CreateMessage+0x164>)
 8003944:	4929      	ldr	r1, [pc, #164]	@ (80039ec <CreateMessage+0x168>)
 8003946:	482a      	ldr	r0, [pc, #168]	@ (80039f0 <CreateMessage+0x16c>)
 8003948:	f014 f910 	bl	8017b6c <siprintf>
  messageLength += strlen(messagePart4);
 800394c:	4b28      	ldr	r3, [pc, #160]	@ (80039f0 <CreateMessage+0x16c>)
 800394e:	0018      	movs	r0, r3
 8003950:	f7fc fbda 	bl	8000108 <strlen>
 8003954:	0003      	movs	r3, r0
 8003956:	b299      	uxth	r1, r3
 8003958:	197b      	adds	r3, r7, r5
 800395a:	197a      	adds	r2, r7, r5
 800395c:	8812      	ldrh	r2, [r2, #0]
 800395e:	188a      	adds	r2, r1, r2
 8003960:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart5, "\"name\":\"battery\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"Volt\"", sensorID5, batteryCharge);
 8003962:	4b24      	ldr	r3, [pc, #144]	@ (80039f4 <CreateMessage+0x170>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	1c18      	adds	r0, r3, #0
 8003968:	f7ff fcfa 	bl	8003360 <__aeabi_f2d>
 800396c:	0002      	movs	r2, r0
 800396e:	000b      	movs	r3, r1
 8003970:	4c21      	ldr	r4, [pc, #132]	@ (80039f8 <CreateMessage+0x174>)
 8003972:	4922      	ldr	r1, [pc, #136]	@ (80039fc <CreateMessage+0x178>)
 8003974:	4822      	ldr	r0, [pc, #136]	@ (8003a00 <CreateMessage+0x17c>)
 8003976:	9200      	str	r2, [sp, #0]
 8003978:	9301      	str	r3, [sp, #4]
 800397a:	0022      	movs	r2, r4
 800397c:	f014 f8f6 	bl	8017b6c <siprintf>
  messageLength += strlen(messagePart5);
 8003980:	4b1f      	ldr	r3, [pc, #124]	@ (8003a00 <CreateMessage+0x17c>)
 8003982:	0018      	movs	r0, r3
 8003984:	f7fc fbc0 	bl	8000108 <strlen>
 8003988:	0003      	movs	r3, r0
 800398a:	b299      	uxth	r1, r3
 800398c:	197b      	adds	r3, r7, r5
 800398e:	197a      	adds	r2, r7, r5
 8003990:	8812      	ldrh	r2, [r2, #0]
 8003992:	188a      	adds	r2, r1, r2
 8003994:	801a      	strh	r2, [r3, #0]
  messageLength += 20;
 8003996:	197b      	adds	r3, r7, r5
 8003998:	0029      	movs	r1, r5
 800399a:	197a      	adds	r2, r7, r5
 800399c:	8812      	ldrh	r2, [r2, #0]
 800399e:	3214      	adds	r2, #20
 80039a0:	801a      	strh	r2, [r3, #0]
  return(messageLength);
 80039a2:	187b      	adds	r3, r7, r1
 80039a4:	881b      	ldrh	r3, [r3, #0]
}
 80039a6:	0018      	movs	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b004      	add	sp, #16
 80039ac:	bdb0      	pop	{r4, r5, r7, pc}
 80039ae:	46c0      	nop			@ (mov r8, r8)
 80039b0:	0808000c 	.word	0x0808000c
 80039b4:	20000538 	.word	0x20000538
 80039b8:	0801b6a0 	.word	0x0801b6a0
 80039bc:	0801ab10 	.word	0x0801ab10
 80039c0:	20000550 	.word	0x20000550
 80039c4:	2000053c 	.word	0x2000053c
 80039c8:	0801b6bc 	.word	0x0801b6bc
 80039cc:	0801ab68 	.word	0x0801ab68
 80039d0:	200005d0 	.word	0x200005d0
 80039d4:	2000054c 	.word	0x2000054c
 80039d8:	0801b6d8 	.word	0x0801b6d8
 80039dc:	0801abbc 	.word	0x0801abbc
 80039e0:	20000650 	.word	0x20000650
 80039e4:	20000548 	.word	0x20000548
 80039e8:	0801b6f4 	.word	0x0801b6f4
 80039ec:	0801ac14 	.word	0x0801ac14
 80039f0:	200006d0 	.word	0x200006d0
 80039f4:	20000540 	.word	0x20000540
 80039f8:	0801b710 	.word	0x0801b710
 80039fc:	0801ac6c 	.word	0x0801ac6c
 8003a00:	20000750 	.word	0x20000750

08003a04 <SetCommandBuffer>:

void SetCommandBuffer(const char* command) {
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
 8003a0c:	2380      	movs	r3, #128	@ 0x80
 8003a0e:	009a      	lsls	r2, r3, #2
 8003a10:	6879      	ldr	r1, [r7, #4]
 8003a12:	4b05      	ldr	r3, [pc, #20]	@ (8003a28 <SetCommandBuffer+0x24>)
 8003a14:	0018      	movs	r0, r3
 8003a16:	f014 f963 	bl	8017ce0 <strncpy>
    CommandEchoed = false; // Reset the flag when a new command is sent
 8003a1a:	4b04      	ldr	r3, [pc, #16]	@ (8003a2c <SetCommandBuffer+0x28>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	701a      	strb	r2, [r3, #0]
}
 8003a20:	46c0      	nop			@ (mov r8, r8)
 8003a22:	46bd      	mov	sp, r7
 8003a24:	b002      	add	sp, #8
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	200007e4 	.word	0x200007e4
 8003a2c:	200009e4 	.word	0x200009e4

08003a30 <StartProg>:
void StartProg(){
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8003a34:	2064      	movs	r0, #100	@ 0x64
 8003a36:	f006 f97d 	bl	8009d34 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003a3a:	4b15      	ldr	r3, [pc, #84]	@ (8003a90 <StartProg+0x60>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	2101      	movs	r1, #1
 8003a40:	0018      	movs	r0, r3
 8003a42:	f007 fd0c 	bl	800b45e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003a46:	2064      	movs	r0, #100	@ 0x64
 8003a48:	f006 f974 	bl	8009d34 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003a4c:	4b10      	ldr	r3, [pc, #64]	@ (8003a90 <StartProg+0x60>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2102      	movs	r1, #2
 8003a52:	0018      	movs	r0, r3
 8003a54:	f007 fd03 	bl	800b45e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003a58:	23fa      	movs	r3, #250	@ 0xfa
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f006 f969 	bl	8009d34 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003a62:	4b0b      	ldr	r3, [pc, #44]	@ (8003a90 <StartProg+0x60>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	2101      	movs	r1, #1
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f007 fcf8 	bl	800b45e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003a6e:	23fa      	movs	r3, #250	@ 0xfa
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	0018      	movs	r0, r3
 8003a74:	f006 f95e 	bl	8009d34 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8003a78:	4b05      	ldr	r3, [pc, #20]	@ (8003a90 <StartProg+0x60>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	2102      	movs	r1, #2
 8003a7e:	0018      	movs	r0, r3
 8003a80:	f007 fced 	bl	800b45e <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8003a84:	2028      	movs	r0, #40	@ 0x28
 8003a86:	f006 f955 	bl	8009d34 <HAL_Delay>
}
 8003a8a:	46c0      	nop			@ (mov r8, r8)
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	50001c00 	.word	0x50001c00

08003a94 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8003a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a96:	46c6      	mov	lr, r8
 8003a98:	b500      	push	{lr}
 8003a9a:	b09a      	sub	sp, #104	@ 0x68
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	61f8      	str	r0, [r7, #28]
 8003aa0:	0008      	movs	r0, r1
 8003aa2:	0011      	movs	r1, r2
 8003aa4:	261a      	movs	r6, #26
 8003aa6:	19bb      	adds	r3, r7, r6
 8003aa8:	1c02      	adds	r2, r0, #0
 8003aaa:	801a      	strh	r2, [r3, #0]
 8003aac:	2319      	movs	r3, #25
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	1c0a      	adds	r2, r1, #0
 8003ab2:	701a      	strb	r2, [r3, #0]
 8003ab4:	466b      	mov	r3, sp
 8003ab6:	4698      	mov	r8, r3
  char tempBuf[len+1];
 8003ab8:	19bb      	adds	r3, r7, r6
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	3301      	adds	r3, #1
 8003abe:	1e5a      	subs	r2, r3, #1
 8003ac0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003ac2:	001a      	movs	r2, r3
 8003ac4:	60ba      	str	r2, [r7, #8]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	60fa      	str	r2, [r7, #12]
 8003aca:	68b8      	ldr	r0, [r7, #8]
 8003acc:	68f9      	ldr	r1, [r7, #12]
 8003ace:	0002      	movs	r2, r0
 8003ad0:	0f52      	lsrs	r2, r2, #29
 8003ad2:	000e      	movs	r6, r1
 8003ad4:	00f6      	lsls	r6, r6, #3
 8003ad6:	617e      	str	r6, [r7, #20]
 8003ad8:	697e      	ldr	r6, [r7, #20]
 8003ada:	4316      	orrs	r6, r2
 8003adc:	617e      	str	r6, [r7, #20]
 8003ade:	0002      	movs	r2, r0
 8003ae0:	00d2      	lsls	r2, r2, #3
 8003ae2:	613a      	str	r2, [r7, #16]
 8003ae4:	001a      	movs	r2, r3
 8003ae6:	603a      	str	r2, [r7, #0]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	6838      	ldr	r0, [r7, #0]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	0002      	movs	r2, r0
 8003af2:	0f52      	lsrs	r2, r2, #29
 8003af4:	000e      	movs	r6, r1
 8003af6:	00f5      	lsls	r5, r6, #3
 8003af8:	4315      	orrs	r5, r2
 8003afa:	0002      	movs	r2, r0
 8003afc:	00d4      	lsls	r4, r2, #3
 8003afe:	3307      	adds	r3, #7
 8003b00:	08db      	lsrs	r3, r3, #3
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	466a      	mov	r2, sp
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	469d      	mov	sp, r3
 8003b0a:	466b      	mov	r3, sp
 8003b0c:	3300      	adds	r3, #0
 8003b0e:	65bb      	str	r3, [r7, #88]	@ 0x58
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003b10:	234f      	movs	r3, #79	@ 0x4f
 8003b12:	2118      	movs	r1, #24
 8003b14:	185b      	adds	r3, r3, r1
 8003b16:	19db      	adds	r3, r3, r7
 8003b18:	2203      	movs	r2, #3
 8003b1a:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003b1c:	234c      	movs	r3, #76	@ 0x4c
 8003b1e:	185b      	adds	r3, r3, r1
 8003b20:	19db      	adds	r3, r3, r7
 8003b22:	2200      	movs	r2, #0
 8003b24:	801a      	strh	r2, [r3, #0]
 8003b26:	e013      	b.n	8003b50 <ParseBuffer+0xbc>
    tempBuf[i] = (char)buffer[i];
 8003b28:	204c      	movs	r0, #76	@ 0x4c
 8003b2a:	2418      	movs	r4, #24
 8003b2c:	1903      	adds	r3, r0, r4
 8003b2e:	19db      	adds	r3, r3, r7
 8003b30:	881b      	ldrh	r3, [r3, #0]
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	18d2      	adds	r2, r2, r3
 8003b36:	1903      	adds	r3, r0, r4
 8003b38:	19db      	adds	r3, r3, r7
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	7811      	ldrb	r1, [r2, #0]
 8003b3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b40:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8003b42:	1903      	adds	r3, r0, r4
 8003b44:	19db      	adds	r3, r3, r7
 8003b46:	881a      	ldrh	r2, [r3, #0]
 8003b48:	1903      	adds	r3, r0, r4
 8003b4a:	19db      	adds	r3, r3, r7
 8003b4c:	3201      	adds	r2, #1
 8003b4e:	801a      	strh	r2, [r3, #0]
 8003b50:	234c      	movs	r3, #76	@ 0x4c
 8003b52:	2018      	movs	r0, #24
 8003b54:	181b      	adds	r3, r3, r0
 8003b56:	19da      	adds	r2, r3, r7
 8003b58:	211a      	movs	r1, #26
 8003b5a:	187b      	adds	r3, r7, r1
 8003b5c:	8812      	ldrh	r2, [r2, #0]
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d3e1      	bcc.n	8003b28 <ParseBuffer+0x94>
  }
  tempBuf[len] = '\0';
 8003b64:	187b      	adds	r3, r7, r1
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	54d1      	strb	r1, [r2, r3]
  char TestChar = 'N';
 8003b6e:	233f      	movs	r3, #63	@ 0x3f
 8003b70:	0006      	movs	r6, r0
 8003b72:	199b      	adds	r3, r3, r6
 8003b74:	19db      	adds	r3, r3, r7
 8003b76:	224e      	movs	r2, #78	@ 0x4e
 8003b78:	701a      	strb	r2, [r3, #0]
  char * ParsePoint;
  char * ParsePoint2;
  char * ParsePoint3;
  const char OK[] = AT_RESPONSE_OK;
 8003b7a:	2530      	movs	r5, #48	@ 0x30
 8003b7c:	19ab      	adds	r3, r5, r6
 8003b7e:	19db      	adds	r3, r3, r7
 8003b80:	4a60      	ldr	r2, [pc, #384]	@ (8003d04 <ParseBuffer+0x270>)
 8003b82:	8811      	ldrh	r1, [r2, #0]
 8003b84:	8019      	strh	r1, [r3, #0]
 8003b86:	7892      	ldrb	r2, [r2, #2]
 8003b88:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8003b8a:	2328      	movs	r3, #40	@ 0x28
 8003b8c:	199b      	adds	r3, r3, r6
 8003b8e:	19db      	adds	r3, r3, r7
 8003b90:	4a5d      	ldr	r2, [pc, #372]	@ (8003d08 <ParseBuffer+0x274>)
 8003b92:	6811      	ldr	r1, [r2, #0]
 8003b94:	6019      	str	r1, [r3, #0]
 8003b96:	8892      	ldrh	r2, [r2, #4]
 8003b98:	809a      	strh	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8003b9a:	2320      	movs	r3, #32
 8003b9c:	199b      	adds	r3, r3, r6
 8003b9e:	19db      	adds	r3, r3, r7
 8003ba0:	4a5a      	ldr	r2, [pc, #360]	@ (8003d0c <ParseBuffer+0x278>)
 8003ba2:	6811      	ldr	r1, [r2, #0]
 8003ba4:	6019      	str	r1, [r3, #0]
 8003ba6:	8892      	ldrh	r2, [r2, #4]
 8003ba8:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8003baa:	231c      	movs	r3, #28
 8003bac:	199b      	adds	r3, r3, r6
 8003bae:	19db      	adds	r3, r3, r7
 8003bb0:	223e      	movs	r2, #62	@ 0x3e
 8003bb2:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8003bb4:	230c      	movs	r3, #12
 8003bb6:	199b      	adds	r3, r3, r6
 8003bb8:	19db      	adds	r3, r3, r7
 8003bba:	4a55      	ldr	r2, [pc, #340]	@ (8003d10 <ParseBuffer+0x27c>)
 8003bbc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003bbe:	c313      	stmia	r3!, {r0, r1, r4}
 8003bc0:	8811      	ldrh	r1, [r2, #0]
 8003bc2:	8019      	strh	r1, [r3, #0]
 8003bc4:	7892      	ldrb	r2, [r2, #2]
 8003bc6:	709a      	strb	r2, [r3, #2]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8003bc8:	2319      	movs	r3, #25
 8003bca:	18fb      	adds	r3, r7, r3
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d108      	bne.n	8003be4 <ParseBuffer+0x150>
    ParsePoint = strstr(tempBuf, OK);
 8003bd2:	19ab      	adds	r3, r5, r6
 8003bd4:	19da      	adds	r2, r3, r7
 8003bd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bd8:	0011      	movs	r1, r2
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f014 f894 	bl	8017d08 <strstr>
 8003be0:	0003      	movs	r3, r0
 8003be2:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8003be4:	2319      	movs	r3, #25
 8003be6:	18fb      	adds	r3, r7, r3
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d10a      	bne.n	8003c04 <ParseBuffer+0x170>
    ParsePoint = strstr(tempBuf, ready);
 8003bee:	2320      	movs	r3, #32
 8003bf0:	2218      	movs	r2, #24
 8003bf2:	189b      	adds	r3, r3, r2
 8003bf4:	19da      	adds	r2, r3, r7
 8003bf6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bf8:	0011      	movs	r1, r2
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	f014 f884 	bl	8017d08 <strstr>
 8003c00:	0003      	movs	r3, r0
 8003c02:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8003c04:	2319      	movs	r3, #25
 8003c06:	18fb      	adds	r3, r7, r3
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d10a      	bne.n	8003c24 <ParseBuffer+0x190>
    ParsePoint = strstr(tempBuf, start);
 8003c0e:	231c      	movs	r3, #28
 8003c10:	2218      	movs	r2, #24
 8003c12:	189b      	adds	r3, r3, r2
 8003c14:	19da      	adds	r2, r3, r7
 8003c16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c18:	0011      	movs	r1, r2
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	f014 f874 	bl	8017d08 <strstr>
 8003c20:	0003      	movs	r3, r0
 8003c22:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  ParsePoint2 = strstr(tempBuf, ERROR);
 8003c24:	2328      	movs	r3, #40	@ 0x28
 8003c26:	2418      	movs	r4, #24
 8003c28:	191b      	adds	r3, r3, r4
 8003c2a:	19da      	adds	r2, r3, r7
 8003c2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c2e:	0011      	movs	r1, r2
 8003c30:	0018      	movs	r0, r3
 8003c32:	f014 f869 	bl	8017d08 <strstr>
 8003c36:	0003      	movs	r3, r0
 8003c38:	653b      	str	r3, [r7, #80]	@ 0x50
  ParsePoint3 = strstr(tempBuf, WIFI);
 8003c3a:	230c      	movs	r3, #12
 8003c3c:	191b      	adds	r3, r3, r4
 8003c3e:	19da      	adds	r2, r3, r7
 8003c40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c42:	0011      	movs	r1, r2
 8003c44:	0018      	movs	r0, r3
 8003c46:	f014 f85f 	bl	8017d08 <strstr>
 8003c4a:	0003      	movs	r3, r0
 8003c4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if(len > 1 ){
 8003c4e:	231a      	movs	r3, #26
 8003c50:	18fb      	adds	r3, r7, r3
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d948      	bls.n	8003cea <ParseBuffer+0x256>
    TestChar = *ParsePoint;
 8003c58:	213f      	movs	r1, #63	@ 0x3f
 8003c5a:	190b      	adds	r3, r1, r4
 8003c5c:	19db      	adds	r3, r3, r7
 8003c5e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003c60:	7812      	ldrb	r2, [r2, #0]
 8003c62:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'O'){
 8003c64:	190b      	adds	r3, r1, r4
 8003c66:	19db      	adds	r3, r3, r7
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b4f      	cmp	r3, #79	@ 0x4f
 8003c6c:	d104      	bne.n	8003c78 <ParseBuffer+0x1e4>
      status = RECEIVE_STATUS_OK;
 8003c6e:	234f      	movs	r3, #79	@ 0x4f
 8003c70:	191b      	adds	r3, r3, r4
 8003c72:	19db      	adds	r3, r3, r7
 8003c74:	2200      	movs	r2, #0
 8003c76:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == 'r'){
 8003c78:	233f      	movs	r3, #63	@ 0x3f
 8003c7a:	2218      	movs	r2, #24
 8003c7c:	189b      	adds	r3, r3, r2
 8003c7e:	19db      	adds	r3, r3, r7
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b72      	cmp	r3, #114	@ 0x72
 8003c84:	d104      	bne.n	8003c90 <ParseBuffer+0x1fc>
      status = RECEIVE_STATUS_READY;
 8003c86:	234f      	movs	r3, #79	@ 0x4f
 8003c88:	189b      	adds	r3, r3, r2
 8003c8a:	19db      	adds	r3, r3, r7
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == '>'){
 8003c90:	233f      	movs	r3, #63	@ 0x3f
 8003c92:	2218      	movs	r2, #24
 8003c94:	189b      	adds	r3, r3, r2
 8003c96:	19db      	adds	r3, r3, r7
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c9c:	d104      	bne.n	8003ca8 <ParseBuffer+0x214>
      status = RECEIVE_STATUS_START;
 8003c9e:	234f      	movs	r3, #79	@ 0x4f
 8003ca0:	189b      	adds	r3, r3, r2
 8003ca2:	19db      	adds	r3, r3, r7
 8003ca4:	2205      	movs	r2, #5
 8003ca6:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint2;
 8003ca8:	213f      	movs	r1, #63	@ 0x3f
 8003caa:	2018      	movs	r0, #24
 8003cac:	180b      	adds	r3, r1, r0
 8003cae:	19db      	adds	r3, r3, r7
 8003cb0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003cb2:	7812      	ldrb	r2, [r2, #0]
 8003cb4:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'E'){
 8003cb6:	0002      	movs	r2, r0
 8003cb8:	188b      	adds	r3, r1, r2
 8003cba:	19db      	adds	r3, r3, r7
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	2b45      	cmp	r3, #69	@ 0x45
 8003cc0:	d104      	bne.n	8003ccc <ParseBuffer+0x238>
      status = RECEIVE_STATUS_ERROR;
 8003cc2:	234f      	movs	r3, #79	@ 0x4f
 8003cc4:	189b      	adds	r3, r3, r2
 8003cc6:	19db      	adds	r3, r3, r7
 8003cc8:	2201      	movs	r2, #1
 8003cca:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint3;
 8003ccc:	213f      	movs	r1, #63	@ 0x3f
 8003cce:	2018      	movs	r0, #24
 8003cd0:	180b      	adds	r3, r1, r0
 8003cd2:	19db      	adds	r3, r3, r7
 8003cd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cd6:	7812      	ldrb	r2, [r2, #0]
 8003cd8:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'W'){
 8003cda:	180b      	adds	r3, r1, r0
 8003cdc:	19db      	adds	r3, r3, r7
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2b57      	cmp	r3, #87	@ 0x57
 8003ce2:	d102      	bne.n	8003cea <ParseBuffer+0x256>
      ConnectionMade = true;
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d14 <ParseBuffer+0x280>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8003cea:	234f      	movs	r3, #79	@ 0x4f
 8003cec:	2218      	movs	r2, #24
 8003cee:	189b      	adds	r3, r3, r2
 8003cf0:	19db      	adds	r3, r3, r7
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	46c5      	mov	sp, r8

}
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b01a      	add	sp, #104	@ 0x68
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	46b8      	mov	r8, r7
 8003d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d02:	46c0      	nop			@ (mov r8, r8)
 8003d04:	0801acc4 	.word	0x0801acc4
 8003d08:	0801acc8 	.word	0x0801acc8
 8003d0c:	0801acd0 	.word	0x0801acd0
 8003d10:	0801acd8 	.word	0x0801acd8
 8003d14:	2000052b 	.word	0x2000052b

08003d18 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8003d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d54 <PollAwake+0x3c>)
 8003d20:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	0018      	movs	r0, r3
 8003d26:	f7ff fe6d 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f7fc f9eb 	bl	8000108 <strlen>
 8003d32:	0003      	movs	r3, r0
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	0011      	movs	r1, r2
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f7ff fd1e 	bl	800377c <ESP_Send>
 8003d40:	1e03      	subs	r3, r0, #0
 8003d42:	d001      	beq.n	8003d48 <PollAwake+0x30>
    return true;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e000      	b.n	8003d4a <PollAwake+0x32>
  }
  else{
    return false;
 8003d48:	2300      	movs	r3, #0
  }
}
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	b002      	add	sp, #8
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	46c0      	nop			@ (mov r8, r8)
 8003d54:	0801ace8 	.word	0x0801ace8

08003d58 <RFPower>:
bool RFPower(){
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8003d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d94 <RFPower+0x3c>)
 8003d60:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	0018      	movs	r0, r3
 8003d66:	f7ff fe4d 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f7fc f9cb 	bl	8000108 <strlen>
 8003d72:	0003      	movs	r3, r0
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	0011      	movs	r1, r2
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f7ff fcfe 	bl	800377c <ESP_Send>
 8003d80:	1e03      	subs	r3, r0, #0
 8003d82:	d001      	beq.n	8003d88 <RFPower+0x30>
    return true;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <RFPower+0x32>
  }
  else{
    return false;
 8003d88:	2300      	movs	r3, #0
  }
}
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b002      	add	sp, #8
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	46c0      	nop			@ (mov r8, r8)
 8003d94:	0801acf0 	.word	0x0801acf0

08003d98 <CheckRFPower>:
bool CheckRFPower(){
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8003d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd4 <CheckRFPower+0x3c>)
 8003da0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	0018      	movs	r0, r3
 8003da6:	f7ff fe2d 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	0018      	movs	r0, r3
 8003dae:	f7fc f9ab 	bl	8000108 <strlen>
 8003db2:	0003      	movs	r3, r0
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	0011      	movs	r1, r2
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f7ff fcde 	bl	800377c <ESP_Send>
 8003dc0:	1e03      	subs	r3, r0, #0
 8003dc2:	d001      	beq.n	8003dc8 <CheckRFPower+0x30>
    return true;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <CheckRFPower+0x32>
  }
  else{
    return false;
 8003dc8:	2300      	movs	r3, #0
  }
}
 8003dca:	0018      	movs	r0, r3
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	b002      	add	sp, #8
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	46c0      	nop			@ (mov r8, r8)
 8003dd4:	0801ad00 	.word	0x0801ad00

08003dd8 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8003dde:	4b0d      	ldr	r3, [pc, #52]	@ (8003e14 <ATRestore+0x3c>)
 8003de0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	0018      	movs	r0, r3
 8003de6:	f7ff fe0d 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	0018      	movs	r0, r3
 8003dee:	f7fc f98b 	bl	8000108 <strlen>
 8003df2:	0003      	movs	r3, r0
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	0011      	movs	r1, r2
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f7ff fcbe 	bl	800377c <ESP_Send>
 8003e00:	1e03      	subs	r3, r0, #0
 8003e02:	d001      	beq.n	8003e08 <ATRestore+0x30>
    return true;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <ATRestore+0x32>
  }
  else{
    return false;
 8003e08:	2300      	movs	r3, #0
  }
}
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	b002      	add	sp, #8
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	46c0      	nop			@ (mov r8, r8)
 8003e14:	0801ad10 	.word	0x0801ad10

08003e18 <CWINIT>:
bool CWINIT(){
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8003e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e54 <CWINIT+0x3c>)
 8003e20:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	0018      	movs	r0, r3
 8003e26:	f7ff fded 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f7fc f96b 	bl	8000108 <strlen>
 8003e32:	0003      	movs	r3, r0
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	0011      	movs	r1, r2
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	f7ff fc9e 	bl	800377c <ESP_Send>
 8003e40:	1e03      	subs	r3, r0, #0
 8003e42:	d001      	beq.n	8003e48 <CWINIT+0x30>
    return true;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <CWINIT+0x32>
  }
  else{
    return false;
 8003e48:	2300      	movs	r3, #0
  }
}
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	b002      	add	sp, #8
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	46c0      	nop			@ (mov r8, r8)
 8003e54:	0801ad20 	.word	0x0801ad20

08003e58 <CWMODE1>:
bool CWMODE1(){
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e94 <CWMODE1+0x3c>)
 8003e60:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	0018      	movs	r0, r3
 8003e66:	f7ff fdcd 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f7fc f94b 	bl	8000108 <strlen>
 8003e72:	0003      	movs	r3, r0
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	0011      	movs	r1, r2
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f7ff fc7e 	bl	800377c <ESP_Send>
 8003e80:	1e03      	subs	r3, r0, #0
 8003e82:	d001      	beq.n	8003e88 <CWMODE1+0x30>
    return true;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <CWMODE1+0x32>
  }
  else{
    return false;
 8003e88:	2300      	movs	r3, #0
  }
}
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	b002      	add	sp, #8
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	46c0      	nop			@ (mov r8, r8)
 8003e94:	0801ad30 	.word	0x0801ad30

08003e98 <CWMODE2>:
bool CWMODE2(){
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 8003e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed4 <CWMODE2+0x3c>)
 8003ea0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f7ff fdad 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	0018      	movs	r0, r3
 8003eae:	f7fc f92b 	bl	8000108 <strlen>
 8003eb2:	0003      	movs	r3, r0
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	0011      	movs	r1, r2
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f7ff fc5e 	bl	800377c <ESP_Send>
 8003ec0:	1e03      	subs	r3, r0, #0
 8003ec2:	d001      	beq.n	8003ec8 <CWMODE2+0x30>
    return true;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e000      	b.n	8003eca <CWMODE2+0x32>
  }
  else{
    return false;
 8003ec8:	2300      	movs	r3, #0
  }
}
 8003eca:	0018      	movs	r0, r3
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	b002      	add	sp, #8
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	46c0      	nop			@ (mov r8, r8)
 8003ed4:	0801ad40 	.word	0x0801ad40

08003ed8 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8003ede:	4b0d      	ldr	r3, [pc, #52]	@ (8003f14 <CWAUTOCONN+0x3c>)
 8003ee0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f7ff fd8d 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	0018      	movs	r0, r3
 8003eee:	f7fc f90b 	bl	8000108 <strlen>
 8003ef2:	0003      	movs	r3, r0
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	0011      	movs	r1, r2
 8003efa:	0018      	movs	r0, r3
 8003efc:	f7ff fc3e 	bl	800377c <ESP_Send>
 8003f00:	1e03      	subs	r3, r0, #0
 8003f02:	d001      	beq.n	8003f08 <CWAUTOCONN+0x30>
    return true;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e000      	b.n	8003f0a <CWAUTOCONN+0x32>
  }
  else{
    return false;
 8003f08:	2300      	movs	r3, #0
  }
}
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	b002      	add	sp, #8
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	46c0      	nop			@ (mov r8, r8)
 8003f14:	0801ad50 	.word	0x0801ad50

08003f18 <CWJAP>:
bool CWJAP(){
 8003f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f1a:	46c6      	mov	lr, r8
 8003f1c:	b500      	push	{lr}
 8003f1e:	b0a2      	sub	sp, #136	@ 0x88
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	466b      	mov	r3, sp
 8003f24:	4698      	mov	r8, r3
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8003f26:	2618      	movs	r6, #24
 8003f28:	19bb      	adds	r3, r7, r6
 8003f2a:	2264      	movs	r2, #100	@ 0x64
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f013 fec0 	bl	8017cb4 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8003f34:	4b35      	ldr	r3, [pc, #212]	@ (800400c <CWJAP+0xf4>)
 8003f36:	4a36      	ldr	r2, [pc, #216]	@ (8004010 <CWJAP+0xf8>)
 8003f38:	4936      	ldr	r1, [pc, #216]	@ (8004014 <CWJAP+0xfc>)
 8003f3a:	19b8      	adds	r0, r7, r6
 8003f3c:	f013 fe16 	bl	8017b6c <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8003f40:	19bb      	adds	r3, r7, r6
 8003f42:	0018      	movs	r0, r3
 8003f44:	f7fc f8e0 	bl	8000108 <strlen>
 8003f48:	0002      	movs	r2, r0
 8003f4a:	216f      	movs	r1, #111	@ 0x6f
 8003f4c:	0030      	movs	r0, r6
 8003f4e:	180b      	adds	r3, r1, r0
 8003f50:	19db      	adds	r3, r3, r7
 8003f52:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8003f54:	180b      	adds	r3, r1, r0
 8003f56:	19db      	adds	r3, r3, r7
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	1e5a      	subs	r2, r3, #1
 8003f5e:	2180      	movs	r1, #128	@ 0x80
 8003f60:	1879      	adds	r1, r7, r1
 8003f62:	600a      	str	r2, [r1, #0]
 8003f64:	001a      	movs	r2, r3
 8003f66:	60ba      	str	r2, [r7, #8]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	60fa      	str	r2, [r7, #12]
 8003f6c:	68b8      	ldr	r0, [r7, #8]
 8003f6e:	68f9      	ldr	r1, [r7, #12]
 8003f70:	0002      	movs	r2, r0
 8003f72:	0f52      	lsrs	r2, r2, #29
 8003f74:	000e      	movs	r6, r1
 8003f76:	00f6      	lsls	r6, r6, #3
 8003f78:	617e      	str	r6, [r7, #20]
 8003f7a:	697e      	ldr	r6, [r7, #20]
 8003f7c:	4316      	orrs	r6, r2
 8003f7e:	617e      	str	r6, [r7, #20]
 8003f80:	0002      	movs	r2, r0
 8003f82:	00d2      	lsls	r2, r2, #3
 8003f84:	613a      	str	r2, [r7, #16]
 8003f86:	001a      	movs	r2, r3
 8003f88:	603a      	str	r2, [r7, #0]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	607a      	str	r2, [r7, #4]
 8003f8e:	6838      	ldr	r0, [r7, #0]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	0002      	movs	r2, r0
 8003f94:	0f52      	lsrs	r2, r2, #29
 8003f96:	000e      	movs	r6, r1
 8003f98:	00f5      	lsls	r5, r6, #3
 8003f9a:	4315      	orrs	r5, r2
 8003f9c:	0002      	movs	r2, r0
 8003f9e:	00d4      	lsls	r4, r2, #3
 8003fa0:	3307      	adds	r3, #7
 8003fa2:	08db      	lsrs	r3, r3, #3
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	466a      	mov	r2, sp
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	469d      	mov	sp, r3
 8003fac:	466b      	mov	r3, sp
 8003fae:	3300      	adds	r3, #0
 8003fb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8003fb2:	246f      	movs	r4, #111	@ 0x6f
 8003fb4:	2518      	movs	r5, #24
 8003fb6:	1963      	adds	r3, r4, r5
 8003fb8:	19db      	adds	r3, r3, r7
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	001a      	movs	r2, r3
 8003fc0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f013 fe75 	bl	8017cb4 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8003fca:	1963      	adds	r3, r4, r5
 8003fcc:	19db      	adds	r3, r3, r7
 8003fce:	781a      	ldrb	r2, [r3, #0]
 8003fd0:	1979      	adds	r1, r7, r5
 8003fd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f013 fe83 	bl	8017ce0 <strncpy>
  SetCommandBuffer(atCommand);
 8003fda:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f7ff fd11 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8003fe2:	1963      	adds	r3, r4, r5
 8003fe4:	19db      	adds	r3, r3, r7
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fec:	0011      	movs	r1, r2
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f7ff fbc4 	bl	800377c <ESP_Send>
 8003ff4:	1e03      	subs	r3, r0, #0
 8003ff6:	d001      	beq.n	8003ffc <CWJAP+0xe4>
    return true;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <CWJAP+0xe6>
  }
  else{
    return false;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	46c5      	mov	sp, r8
  }
}
 8004000:	0018      	movs	r0, r3
 8004002:	46bd      	mov	sp, r7
 8004004:	b022      	add	sp, #136	@ 0x88
 8004006:	bc80      	pop	{r7}
 8004008:	46b8      	mov	r8, r7
 800400a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800400c:	0801b688 	.word	0x0801b688
 8004010:	0801b67c 	.word	0x0801b67c
 8004014:	0801ad64 	.word	0x0801ad64

08004018 <CWMODE3>:
bool CWMODE3(){
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 800401e:	4b0d      	ldr	r3, [pc, #52]	@ (8004054 <CWMODE3+0x3c>)
 8004020:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	0018      	movs	r0, r3
 8004026:	f7ff fced 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	0018      	movs	r0, r3
 800402e:	f7fc f86b 	bl	8000108 <strlen>
 8004032:	0003      	movs	r3, r0
 8004034:	b29a      	uxth	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	0011      	movs	r1, r2
 800403a:	0018      	movs	r0, r3
 800403c:	f7ff fb9e 	bl	800377c <ESP_Send>
 8004040:	1e03      	subs	r3, r0, #0
 8004042:	d001      	beq.n	8004048 <CWMODE3+0x30>
    return true;
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <CWMODE3+0x32>
  }
  else{
    return false;
 8004048:	2300      	movs	r3, #0
  }
}
 800404a:	0018      	movs	r0, r3
 800404c:	46bd      	mov	sp, r7
 800404e:	b002      	add	sp, #8
 8004050:	bd80      	pop	{r7, pc}
 8004052:	46c0      	nop			@ (mov r8, r8)
 8004054:	0801ad7c 	.word	0x0801ad7c

08004058 <CWSAP>:
bool CWSAP(){
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 800405e:	4b0d      	ldr	r3, [pc, #52]	@ (8004094 <CWSAP+0x3c>)
 8004060:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	0018      	movs	r0, r3
 8004066:	f7ff fccd 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	0018      	movs	r0, r3
 800406e:	f7fc f84b 	bl	8000108 <strlen>
 8004072:	0003      	movs	r3, r0
 8004074:	b29a      	uxth	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	0011      	movs	r1, r2
 800407a:	0018      	movs	r0, r3
 800407c:	f7ff fb7e 	bl	800377c <ESP_Send>
 8004080:	1e03      	subs	r3, r0, #0
 8004082:	d001      	beq.n	8004088 <CWSAP+0x30>
    return true;
 8004084:	2301      	movs	r3, #1
 8004086:	e000      	b.n	800408a <CWSAP+0x32>
  }
  else{
    return false;
 8004088:	2300      	movs	r3, #0
  }
}
 800408a:	0018      	movs	r0, r3
 800408c:	46bd      	mov	sp, r7
 800408e:	b002      	add	sp, #8
 8004090:	bd80      	pop	{r7, pc}
 8004092:	46c0      	nop			@ (mov r8, r8)
 8004094:	0801ad8c 	.word	0x0801ad8c

08004098 <CIPMUX>:
bool CIPMUX(){
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 800409e:	4b0d      	ldr	r3, [pc, #52]	@ (80040d4 <CIPMUX+0x3c>)
 80040a0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	0018      	movs	r0, r3
 80040a6:	f7ff fcad 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	0018      	movs	r0, r3
 80040ae:	f7fc f82b 	bl	8000108 <strlen>
 80040b2:	0003      	movs	r3, r0
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	0011      	movs	r1, r2
 80040ba:	0018      	movs	r0, r3
 80040bc:	f7ff fb5e 	bl	800377c <ESP_Send>
 80040c0:	1e03      	subs	r3, r0, #0
 80040c2:	d001      	beq.n	80040c8 <CIPMUX+0x30>
    return true;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <CIPMUX+0x32>
  }
  else{
    return false;
 80040c8:	2300      	movs	r3, #0
  }
}
 80040ca:	0018      	movs	r0, r3
 80040cc:	46bd      	mov	sp, r7
 80040ce:	b002      	add	sp, #8
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	46c0      	nop			@ (mov r8, r8)
 80040d4:	0801adb0 	.word	0x0801adb0

080040d8 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 80040de:	4b0d      	ldr	r3, [pc, #52]	@ (8004114 <WEBSERVER+0x3c>)
 80040e0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	0018      	movs	r0, r3
 80040e6:	f7ff fc8d 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	0018      	movs	r0, r3
 80040ee:	f7fc f80b 	bl	8000108 <strlen>
 80040f2:	0003      	movs	r3, r0
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	0011      	movs	r1, r2
 80040fa:	0018      	movs	r0, r3
 80040fc:	f7ff fb3e 	bl	800377c <ESP_Send>
 8004100:	1e03      	subs	r3, r0, #0
 8004102:	d001      	beq.n	8004108 <WEBSERVER+0x30>
    return true;
 8004104:	2301      	movs	r3, #1
 8004106:	e000      	b.n	800410a <WEBSERVER+0x32>
  }
  else{
    return false;
 8004108:	2300      	movs	r3, #0
  }
}
 800410a:	0018      	movs	r0, r3
 800410c:	46bd      	mov	sp, r7
 800410e:	b002      	add	sp, #8
 8004110:	bd80      	pop	{r7, pc}
 8004112:	46c0      	nop			@ (mov r8, r8)
 8004114:	0801adc0 	.word	0x0801adc0

08004118 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800411a:	46c6      	mov	lr, r8
 800411c:	b500      	push	{lr}
 800411e:	4c47      	ldr	r4, [pc, #284]	@ (800423c <HTTPCPOST+0x124>)
 8004120:	44a5      	add	sp, r4
 8004122:	af00      	add	r7, sp, #0
 8004124:	466b      	mov	r3, sp
 8004126:	4698      	mov	r8, r3
  char atCommandBuff[600];
  uint16_t length = CreateMessage();
 8004128:	4b45      	ldr	r3, [pc, #276]	@ (8004240 <HTTPCPOST+0x128>)
 800412a:	2218      	movs	r2, #24
 800412c:	189b      	adds	r3, r3, r2
 800412e:	19dc      	adds	r4, r3, r7
 8004130:	f7ff fba8 	bl	8003884 <CreateMessage>
 8004134:	0003      	movs	r3, r0
 8004136:	8023      	strh	r3, [r4, #0]
  sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004138:	4b41      	ldr	r3, [pc, #260]	@ (8004240 <HTTPCPOST+0x128>)
 800413a:	2218      	movs	r2, #24
 800413c:	189b      	adds	r3, r3, r2
 800413e:	19db      	adds	r3, r3, r7
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	4a40      	ldr	r2, [pc, #256]	@ (8004244 <HTTPCPOST+0x12c>)
 8004144:	4940      	ldr	r1, [pc, #256]	@ (8004248 <HTTPCPOST+0x130>)
 8004146:	201c      	movs	r0, #28
 8004148:	1838      	adds	r0, r7, r0
 800414a:	f013 fd0f 	bl	8017b6c <siprintf>
  uint8_t len = strlen(atCommandBuff);
 800414e:	231c      	movs	r3, #28
 8004150:	18fb      	adds	r3, r7, r3
 8004152:	0018      	movs	r0, r3
 8004154:	f7fb ffd8 	bl	8000108 <strlen>
 8004158:	0002      	movs	r2, r0
 800415a:	4c3c      	ldr	r4, [pc, #240]	@ (800424c <HTTPCPOST+0x134>)
 800415c:	2318      	movs	r3, #24
 800415e:	18e3      	adds	r3, r4, r3
 8004160:	19db      	adds	r3, r3, r7
 8004162:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8004164:	2318      	movs	r3, #24
 8004166:	18e3      	adds	r3, r4, r3
 8004168:	19db      	adds	r3, r3, r7
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	3301      	adds	r3, #1
 800416e:	1e5a      	subs	r2, r3, #1
 8004170:	2198      	movs	r1, #152	@ 0x98
 8004172:	0089      	lsls	r1, r1, #2
 8004174:	2018      	movs	r0, #24
 8004176:	1809      	adds	r1, r1, r0
 8004178:	19c9      	adds	r1, r1, r7
 800417a:	600a      	str	r2, [r1, #0]
 800417c:	001a      	movs	r2, r3
 800417e:	0015      	movs	r5, r2
 8004180:	2200      	movs	r2, #0
 8004182:	0016      	movs	r6, r2
 8004184:	0028      	movs	r0, r5
 8004186:	0031      	movs	r1, r6
 8004188:	0002      	movs	r2, r0
 800418a:	0f52      	lsrs	r2, r2, #29
 800418c:	000d      	movs	r5, r1
 800418e:	00ed      	lsls	r5, r5, #3
 8004190:	617d      	str	r5, [r7, #20]
 8004192:	697d      	ldr	r5, [r7, #20]
 8004194:	4315      	orrs	r5, r2
 8004196:	617d      	str	r5, [r7, #20]
 8004198:	0002      	movs	r2, r0
 800419a:	00d2      	lsls	r2, r2, #3
 800419c:	613a      	str	r2, [r7, #16]
 800419e:	001a      	movs	r2, r3
 80041a0:	603a      	str	r2, [r7, #0]
 80041a2:	2200      	movs	r2, #0
 80041a4:	607a      	str	r2, [r7, #4]
 80041a6:	6838      	ldr	r0, [r7, #0]
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	0002      	movs	r2, r0
 80041ac:	0f52      	lsrs	r2, r2, #29
 80041ae:	000d      	movs	r5, r1
 80041b0:	00ed      	lsls	r5, r5, #3
 80041b2:	60fd      	str	r5, [r7, #12]
 80041b4:	68fd      	ldr	r5, [r7, #12]
 80041b6:	4315      	orrs	r5, r2
 80041b8:	60fd      	str	r5, [r7, #12]
 80041ba:	0002      	movs	r2, r0
 80041bc:	00d2      	lsls	r2, r2, #3
 80041be:	60ba      	str	r2, [r7, #8]
 80041c0:	3307      	adds	r3, #7
 80041c2:	08db      	lsrs	r3, r3, #3
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	466a      	mov	r2, sp
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	469d      	mov	sp, r3
 80041cc:	466b      	mov	r3, sp
 80041ce:	3300      	adds	r3, #0
 80041d0:	2597      	movs	r5, #151	@ 0x97
 80041d2:	00ad      	lsls	r5, r5, #2
 80041d4:	2218      	movs	r2, #24
 80041d6:	18aa      	adds	r2, r5, r2
 80041d8:	19d2      	adds	r2, r2, r7
 80041da:	6013      	str	r3, [r2, #0]
  strncpy(atCommand, atCommandBuff, len);
 80041dc:	2318      	movs	r3, #24
 80041de:	18e3      	adds	r3, r4, r3
 80041e0:	19db      	adds	r3, r3, r7
 80041e2:	781a      	ldrb	r2, [r3, #0]
 80041e4:	231c      	movs	r3, #28
 80041e6:	18f9      	adds	r1, r7, r3
 80041e8:	2318      	movs	r3, #24
 80041ea:	18eb      	adds	r3, r5, r3
 80041ec:	19db      	adds	r3, r3, r7
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	0018      	movs	r0, r3
 80041f2:	f013 fd75 	bl	8017ce0 <strncpy>
  SetCommandBuffer(atCommand);
 80041f6:	2318      	movs	r3, #24
 80041f8:	18eb      	adds	r3, r5, r3
 80041fa:	19db      	adds	r3, r3, r7
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	0018      	movs	r0, r3
 8004200:	f7ff fc00 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)){
 8004204:	2318      	movs	r3, #24
 8004206:	18e3      	adds	r3, r4, r3
 8004208:	19db      	adds	r3, r3, r7
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	b29a      	uxth	r2, r3
 800420e:	2318      	movs	r3, #24
 8004210:	18eb      	adds	r3, r5, r3
 8004212:	19db      	adds	r3, r3, r7
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	0011      	movs	r1, r2
 8004218:	0018      	movs	r0, r3
 800421a:	f7ff faaf 	bl	800377c <ESP_Send>
 800421e:	1e03      	subs	r3, r0, #0
 8004220:	d001      	beq.n	8004226 <HTTPCPOST+0x10e>
    return true;
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <HTTPCPOST+0x110>
  }
  else{
    return false;
 8004226:	2300      	movs	r3, #0
 8004228:	46c5      	mov	sp, r8
  }
}
 800422a:	0018      	movs	r0, r3
 800422c:	46bd      	mov	sp, r7
 800422e:	23a0      	movs	r3, #160	@ 0xa0
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	449d      	add	sp, r3
 8004234:	bc80      	pop	{r7}
 8004236:	46b8      	mov	r8, r7
 8004238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800423a:	46c0      	nop			@ (mov r8, r8)
 800423c:	fffffd80 	.word	0xfffffd80
 8004240:	00000266 	.word	0x00000266
 8004244:	20000004 	.word	0x20000004
 8004248:	0801add8 	.word	0x0801add8
 800424c:	00000265 	.word	0x00000265

08004250 <SENDDATA>:
bool SENDDATA(){
 8004250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004252:	46c6      	mov	lr, r8
 8004254:	b500      	push	{lr}
 8004256:	4c4c      	ldr	r4, [pc, #304]	@ (8004388 <SENDDATA+0x138>)
 8004258:	44a5      	add	sp, r4
 800425a:	af04      	add	r7, sp, #16
 800425c:	466b      	mov	r3, sp
 800425e:	4698      	mov	r8, r3
  char atCommandBuff[656];
  memset(atCommandBuff, '\0', 656);
 8004260:	23a4      	movs	r3, #164	@ 0xa4
 8004262:	009a      	lsls	r2, r3, #2
 8004264:	261c      	movs	r6, #28
 8004266:	19bb      	adds	r3, r7, r6
 8004268:	2100      	movs	r1, #0
 800426a:	0018      	movs	r0, r3
 800426c:	f013 fd22 	bl	8017cb4 <memset>
  sprintf(atCommandBuff,"[{%s}, {%s}, {%s}, {%s}, {%s}]", messagePart1, messagePart2, messagePart3, messagePart4, messagePart5);
 8004270:	4a46      	ldr	r2, [pc, #280]	@ (800438c <SENDDATA+0x13c>)
 8004272:	4947      	ldr	r1, [pc, #284]	@ (8004390 <SENDDATA+0x140>)
 8004274:	4847      	ldr	r0, [pc, #284]	@ (8004394 <SENDDATA+0x144>)
 8004276:	19be      	adds	r6, r7, r6
 8004278:	4b47      	ldr	r3, [pc, #284]	@ (8004398 <SENDDATA+0x148>)
 800427a:	9302      	str	r3, [sp, #8]
 800427c:	4b47      	ldr	r3, [pc, #284]	@ (800439c <SENDDATA+0x14c>)
 800427e:	9301      	str	r3, [sp, #4]
 8004280:	4b47      	ldr	r3, [pc, #284]	@ (80043a0 <SENDDATA+0x150>)
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	0013      	movs	r3, r2
 8004286:	000a      	movs	r2, r1
 8004288:	0001      	movs	r1, r0
 800428a:	0030      	movs	r0, r6
 800428c:	f013 fc6e 	bl	8017b6c <siprintf>
  uint16_t len = strlen(atCommandBuff);
 8004290:	231c      	movs	r3, #28
 8004292:	18fb      	adds	r3, r7, r3
 8004294:	0018      	movs	r0, r3
 8004296:	f7fb ff37 	bl	8000108 <strlen>
 800429a:	0002      	movs	r2, r0
 800429c:	4e41      	ldr	r6, [pc, #260]	@ (80043a4 <SENDDATA+0x154>)
 800429e:	2018      	movs	r0, #24
 80042a0:	1831      	adds	r1, r6, r0
 80042a2:	19cb      	adds	r3, r1, r7
 80042a4:	801a      	strh	r2, [r3, #0]
  char atCommand[len+1];
 80042a6:	1832      	adds	r2, r6, r0
 80042a8:	19d3      	adds	r3, r2, r7
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	3301      	adds	r3, #1
 80042ae:	1e5a      	subs	r2, r3, #1
 80042b0:	21a6      	movs	r1, #166	@ 0xa6
 80042b2:	0089      	lsls	r1, r1, #2
 80042b4:	1809      	adds	r1, r1, r0
 80042b6:	19c9      	adds	r1, r1, r7
 80042b8:	600a      	str	r2, [r1, #0]
 80042ba:	001a      	movs	r2, r3
 80042bc:	60ba      	str	r2, [r7, #8]
 80042be:	2200      	movs	r2, #0
 80042c0:	60fa      	str	r2, [r7, #12]
 80042c2:	68b8      	ldr	r0, [r7, #8]
 80042c4:	68f9      	ldr	r1, [r7, #12]
 80042c6:	0002      	movs	r2, r0
 80042c8:	0f52      	lsrs	r2, r2, #29
 80042ca:	000e      	movs	r6, r1
 80042cc:	00f6      	lsls	r6, r6, #3
 80042ce:	617e      	str	r6, [r7, #20]
 80042d0:	697e      	ldr	r6, [r7, #20]
 80042d2:	4316      	orrs	r6, r2
 80042d4:	617e      	str	r6, [r7, #20]
 80042d6:	0002      	movs	r2, r0
 80042d8:	00d2      	lsls	r2, r2, #3
 80042da:	613a      	str	r2, [r7, #16]
 80042dc:	001a      	movs	r2, r3
 80042de:	603a      	str	r2, [r7, #0]
 80042e0:	2200      	movs	r2, #0
 80042e2:	607a      	str	r2, [r7, #4]
 80042e4:	6838      	ldr	r0, [r7, #0]
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	0002      	movs	r2, r0
 80042ea:	0f52      	lsrs	r2, r2, #29
 80042ec:	000e      	movs	r6, r1
 80042ee:	00f5      	lsls	r5, r6, #3
 80042f0:	4315      	orrs	r5, r2
 80042f2:	0002      	movs	r2, r0
 80042f4:	00d4      	lsls	r4, r2, #3
 80042f6:	3307      	adds	r3, #7
 80042f8:	08db      	lsrs	r3, r3, #3
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	466a      	mov	r2, sp
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	469d      	mov	sp, r3
 8004302:	ab04      	add	r3, sp, #16
 8004304:	3300      	adds	r3, #0
 8004306:	21a5      	movs	r1, #165	@ 0xa5
 8004308:	0089      	lsls	r1, r1, #2
 800430a:	2018      	movs	r0, #24
 800430c:	180a      	adds	r2, r1, r0
 800430e:	19d2      	adds	r2, r2, r7
 8004310:	6013      	str	r3, [r2, #0]
  memset(atCommand, '\0', len+1);
 8004312:	4e24      	ldr	r6, [pc, #144]	@ (80043a4 <SENDDATA+0x154>)
 8004314:	1832      	adds	r2, r6, r0
 8004316:	19d3      	adds	r3, r2, r7
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	3301      	adds	r3, #1
 800431c:	001a      	movs	r2, r3
 800431e:	000c      	movs	r4, r1
 8004320:	0005      	movs	r5, r0
 8004322:	1821      	adds	r1, r4, r0
 8004324:	19cb      	adds	r3, r1, r7
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2100      	movs	r1, #0
 800432a:	0018      	movs	r0, r3
 800432c:	f013 fcc2 	bl	8017cb4 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004330:	0028      	movs	r0, r5
 8004332:	1832      	adds	r2, r6, r0
 8004334:	19d3      	adds	r3, r2, r7
 8004336:	881a      	ldrh	r2, [r3, #0]
 8004338:	231c      	movs	r3, #28
 800433a:	18f9      	adds	r1, r7, r3
 800433c:	0005      	movs	r5, r0
 800433e:	1963      	adds	r3, r4, r5
 8004340:	19db      	adds	r3, r3, r7
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	0018      	movs	r0, r3
 8004346:	f013 fccb 	bl	8017ce0 <strncpy>
  SetCommandBuffer(atCommand);
 800434a:	1963      	adds	r3, r4, r5
 800434c:	19db      	adds	r3, r3, r7
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	0018      	movs	r0, r3
 8004352:	f7ff fb57 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004356:	0028      	movs	r0, r5
 8004358:	1833      	adds	r3, r6, r0
 800435a:	19db      	adds	r3, r3, r7
 800435c:	881a      	ldrh	r2, [r3, #0]
 800435e:	1823      	adds	r3, r4, r0
 8004360:	19db      	adds	r3, r3, r7
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	0011      	movs	r1, r2
 8004366:	0018      	movs	r0, r3
 8004368:	f7ff fa08 	bl	800377c <ESP_Send>
 800436c:	1e03      	subs	r3, r0, #0
 800436e:	d001      	beq.n	8004374 <SENDDATA+0x124>
    return true;
 8004370:	2301      	movs	r3, #1
 8004372:	e000      	b.n	8004376 <SENDDATA+0x126>
  }
  else{
    return false;
 8004374:	2300      	movs	r3, #0
 8004376:	46c5      	mov	sp, r8
  }
}
 8004378:	0018      	movs	r0, r3
 800437a:	46bd      	mov	sp, r7
 800437c:	23ae      	movs	r3, #174	@ 0xae
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	449d      	add	sp, r3
 8004382:	bc80      	pop	{r7}
 8004384:	46b8      	mov	r8, r7
 8004386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004388:	fffffd38 	.word	0xfffffd38
 800438c:	200005d0 	.word	0x200005d0
 8004390:	20000550 	.word	0x20000550
 8004394:	0801ae10 	.word	0x0801ae10
 8004398:	20000750 	.word	0x20000750
 800439c:	200006d0 	.word	0x200006d0
 80043a0:	20000650 	.word	0x20000650
 80043a4:	0000029e 	.word	0x0000029e

080043a8 <SLEEP>:
bool SLEEP(){
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 80043ae:	4b0d      	ldr	r3, [pc, #52]	@ (80043e4 <SLEEP+0x3c>)
 80043b0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	0018      	movs	r0, r3
 80043b6:	f7ff fb25 	bl	8003a04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	0018      	movs	r0, r3
 80043be:	f7fb fea3 	bl	8000108 <strlen>
 80043c2:	0003      	movs	r3, r0
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	0011      	movs	r1, r2
 80043ca:	0018      	movs	r0, r3
 80043cc:	f7ff f9d6 	bl	800377c <ESP_Send>
 80043d0:	1e03      	subs	r3, r0, #0
 80043d2:	d001      	beq.n	80043d8 <SLEEP+0x30>
    return true;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e000      	b.n	80043da <SLEEP+0x32>
  }
  else{
    return false;
 80043d8:	2300      	movs	r3, #0
  }
}
 80043da:	0018      	movs	r0, r3
 80043dc:	46bd      	mov	sp, r7
 80043de:	b002      	add	sp, #8
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	46c0      	nop			@ (mov r8, r8)
 80043e4:	0801ae30 	.word	0x0801ae30

080043e8 <DMA_ProcessBuffer>:

uint8_t DMA_ProcessBuffer(uint8_t expectation) {
 80043e8:	b5b0      	push	{r4, r5, r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	0002      	movs	r2, r0
 80043f0:	1dfb      	adds	r3, r7, #7
 80043f2:	701a      	strb	r2, [r3, #0]
    uint8_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 80043f4:	4b50      	ldr	r3, [pc, #320]	@ (8004538 <DMA_ProcessBuffer+0x150>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	b2da      	uxtb	r2, r3
 80043fc:	210e      	movs	r1, #14
 80043fe:	187b      	adds	r3, r7, r1
 8004400:	43d2      	mvns	r2, r2
 8004402:	701a      	strb	r2, [r3, #0]
    uint8_t status = RECEIVE_STATUS_INCOMPLETE;
 8004404:	200f      	movs	r0, #15
 8004406:	183b      	adds	r3, r7, r0
 8004408:	2203      	movs	r2, #3
 800440a:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
      pos = ESP_MAX_BUFFER_SIZE;
    }
    if(pos == OldPos){
 800440c:	4b4b      	ldr	r3, [pc, #300]	@ (800453c <DMA_ProcessBuffer+0x154>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	187a      	adds	r2, r7, r1
 8004414:	7812      	ldrb	r2, [r2, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d131      	bne.n	800447e <DMA_ProcessBuffer+0x96>
      if(retry >4){
 800441a:	4b49      	ldr	r3, [pc, #292]	@ (8004540 <DMA_ProcessBuffer+0x158>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	2b04      	cmp	r3, #4
 8004420:	d91b      	bls.n	800445a <DMA_ProcessBuffer+0x72>
        retry = 0;
 8004422:	4b47      	ldr	r3, [pc, #284]	@ (8004540 <DMA_ProcessBuffer+0x158>)
 8004424:	2200      	movs	r2, #0
 8004426:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004428:	4b46      	ldr	r3, [pc, #280]	@ (8004544 <DMA_ProcessBuffer+0x15c>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d106      	bne.n	800443e <DMA_ProcessBuffer+0x56>
 8004430:	4b45      	ldr	r3, [pc, #276]	@ (8004548 <DMA_ProcessBuffer+0x160>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d002      	beq.n	800443e <DMA_ProcessBuffer+0x56>
          status = RECEIVE_STATUS_UNPROGGED;
 8004438:	183b      	adds	r3, r7, r0
 800443a:	2207      	movs	r2, #7
 800443c:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 800443e:	4b41      	ldr	r3, [pc, #260]	@ (8004544 <DMA_ProcessBuffer+0x15c>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	2b08      	cmp	r3, #8
 8004444:	d104      	bne.n	8004450 <DMA_ProcessBuffer+0x68>
          status = RECEIVE_STATUS_HOME;
 8004446:	230f      	movs	r3, #15
 8004448:	18fb      	adds	r3, r7, r3
 800444a:	2208      	movs	r2, #8
 800444c:	701a      	strb	r2, [r3, #0]
 800444e:	e016      	b.n	800447e <DMA_ProcessBuffer+0x96>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004450:	230f      	movs	r3, #15
 8004452:	18fb      	adds	r3, r7, r3
 8004454:	2206      	movs	r2, #6
 8004456:	701a      	strb	r2, [r3, #0]
 8004458:	e011      	b.n	800447e <DMA_ProcessBuffer+0x96>
        }
      }
     else{
       retry ++;
 800445a:	4b39      	ldr	r3, [pc, #228]	@ (8004540 <DMA_ProcessBuffer+0x158>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	3301      	adds	r3, #1
 8004460:	b2da      	uxtb	r2, r3
 8004462:	4b37      	ldr	r3, [pc, #220]	@ (8004540 <DMA_ProcessBuffer+0x158>)
 8004464:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004466:	f005 fc5b 	bl	8009d20 <HAL_GetTick>
 800446a:	0003      	movs	r3, r0
 800446c:	33f5      	adds	r3, #245	@ 0xf5
 800446e:	33ff      	adds	r3, #255	@ 0xff
 8004470:	001a      	movs	r2, r3
 8004472:	4b36      	ldr	r3, [pc, #216]	@ (800454c <DMA_ProcessBuffer+0x164>)
 8004474:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004476:	230f      	movs	r3, #15
 8004478:	18fb      	adds	r3, r7, r3
 800447a:	2204      	movs	r2, #4
 800447c:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 800447e:	4b2f      	ldr	r3, [pc, #188]	@ (800453c <DMA_ProcessBuffer+0x154>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	210e      	movs	r1, #14
 8004486:	187a      	adds	r2, r7, r1
 8004488:	7812      	ldrb	r2, [r2, #0]
 800448a:	429a      	cmp	r2, r3
 800448c:	d048      	beq.n	8004520 <DMA_ProcessBuffer+0x138>
      retry = 0;
 800448e:	4b2c      	ldr	r3, [pc, #176]	@ (8004540 <DMA_ProcessBuffer+0x158>)
 8004490:	2200      	movs	r2, #0
 8004492:	701a      	strb	r2, [r3, #0]
        if (pos > OldPos) {
 8004494:	4b29      	ldr	r3, [pc, #164]	@ (800453c <DMA_ProcessBuffer+0x154>)
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	b2db      	uxtb	r3, r3
 800449a:	187a      	adds	r2, r7, r1
 800449c:	7812      	ldrb	r2, [r2, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d917      	bls.n	80044d2 <DMA_ProcessBuffer+0xea>
            // Direct parsing
            status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 80044a2:	4b26      	ldr	r3, [pc, #152]	@ (800453c <DMA_ProcessBuffer+0x154>)
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	001a      	movs	r2, r3
 80044aa:	4b29      	ldr	r3, [pc, #164]	@ (8004550 <DMA_ProcessBuffer+0x168>)
 80044ac:	18d0      	adds	r0, r2, r3
 80044ae:	187b      	adds	r3, r7, r1
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	4a21      	ldr	r2, [pc, #132]	@ (800453c <DMA_ProcessBuffer+0x154>)
 80044b6:	7812      	ldrb	r2, [r2, #0]
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	1a9b      	subs	r3, r3, r2
 80044bc:	b299      	uxth	r1, r3
 80044be:	230f      	movs	r3, #15
 80044c0:	18fc      	adds	r4, r7, r3
 80044c2:	1dfb      	adds	r3, r7, #7
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	001a      	movs	r2, r3
 80044c8:	f7ff fae4 	bl	8003a94 <ParseBuffer>
 80044cc:	0003      	movs	r3, r0
 80044ce:	7023      	strb	r3, [r4, #0]
 80044d0:	e026      	b.n	8004520 <DMA_ProcessBuffer+0x138>
              //memset(RxBuffer, 0, ESP_MAX_BUFFER_SIZE);
              //pos = 0;
            }
        } else {
            // Buffer wrap-around
            status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 80044d2:	4b1a      	ldr	r3, [pc, #104]	@ (800453c <DMA_ProcessBuffer+0x154>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	001a      	movs	r2, r3
 80044da:	4b1d      	ldr	r3, [pc, #116]	@ (8004550 <DMA_ProcessBuffer+0x168>)
 80044dc:	18d0      	adds	r0, r2, r3
 80044de:	4b17      	ldr	r3, [pc, #92]	@ (800453c <DMA_ProcessBuffer+0x154>)
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	001a      	movs	r2, r3
 80044e6:	23ff      	movs	r3, #255	@ 0xff
 80044e8:	1a9b      	subs	r3, r3, r2
 80044ea:	b299      	uxth	r1, r3
 80044ec:	250f      	movs	r5, #15
 80044ee:	197c      	adds	r4, r7, r5
 80044f0:	1dfb      	adds	r3, r7, #7
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	001a      	movs	r2, r3
 80044f6:	f7ff facd 	bl	8003a94 <ParseBuffer>
 80044fa:	0003      	movs	r3, r0
 80044fc:	7023      	strb	r3, [r4, #0]
            if (pos > 0) {
 80044fe:	220e      	movs	r2, #14
 8004500:	18bb      	adds	r3, r7, r2
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00b      	beq.n	8004520 <DMA_ProcessBuffer+0x138>
                status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004508:	18bb      	adds	r3, r7, r2
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	b299      	uxth	r1, r3
 800450e:	197c      	adds	r4, r7, r5
 8004510:	1dfb      	adds	r3, r7, #7
 8004512:	781a      	ldrb	r2, [r3, #0]
 8004514:	4b0e      	ldr	r3, [pc, #56]	@ (8004550 <DMA_ProcessBuffer+0x168>)
 8004516:	0018      	movs	r0, r3
 8004518:	f7ff fabc 	bl	8003a94 <ParseBuffer>
 800451c:	0003      	movs	r3, r0
 800451e:	7023      	strb	r3, [r4, #0]
            }
        }
    }
    OldPos = pos;
 8004520:	4b06      	ldr	r3, [pc, #24]	@ (800453c <DMA_ProcessBuffer+0x154>)
 8004522:	220e      	movs	r2, #14
 8004524:	18ba      	adds	r2, r7, r2
 8004526:	7812      	ldrb	r2, [r2, #0]
 8004528:	701a      	strb	r2, [r3, #0]
    return status;
 800452a:	230f      	movs	r3, #15
 800452c:	18fb      	adds	r3, r7, r3
 800452e:	781b      	ldrb	r3, [r3, #0]
}
 8004530:	0018      	movs	r0, r3
 8004532:	46bd      	mov	sp, r7
 8004534:	b004      	add	sp, #16
 8004536:	bdb0      	pop	{r4, r5, r7, pc}
 8004538:	20002a64 	.word	0x20002a64
 800453c:	200007db 	.word	0x200007db
 8004540:	200007e0 	.word	0x200007e0
 8004544:	200009e6 	.word	0x200009e6
 8004548:	20000000 	.word	0x20000000
 800454c:	200007dc 	.word	0x200007dc
 8004550:	20000428 	.word	0x20000428

08004554 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	0002      	movs	r2, r0
 800455c:	1dfb      	adds	r3, r7, #7
 800455e:	701a      	strb	r2, [r3, #0]
 8004560:	1dbb      	adds	r3, r7, #6
 8004562:	1c0a      	adds	r2, r1, #0
 8004564:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004566:	210f      	movs	r1, #15
 8004568:	187b      	adds	r3, r7, r1
 800456a:	2200      	movs	r2, #0
 800456c:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 800456e:	1dbb      	adds	r3, r7, #6
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d105      	bne.n	8004582 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004576:	187b      	adds	r3, r7, r1
 8004578:	1dfa      	adds	r2, r7, #7
 800457a:	7812      	ldrb	r2, [r2, #0]
 800457c:	4251      	negs	r1, r2
 800457e:	414a      	adcs	r2, r1
 8004580:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004582:	1dbb      	adds	r3, r7, #6
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d107      	bne.n	800459a <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 800458a:	230f      	movs	r3, #15
 800458c:	18fb      	adds	r3, r7, r3
 800458e:	1dfa      	adds	r2, r7, #7
 8004590:	7812      	ldrb	r2, [r2, #0]
 8004592:	3a02      	subs	r2, #2
 8004594:	4251      	negs	r1, r2
 8004596:	414a      	adcs	r2, r1
 8004598:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 800459a:	1dbb      	adds	r3, r7, #6
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d107      	bne.n	80045b2 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 80045a2:	230f      	movs	r3, #15
 80045a4:	18fb      	adds	r3, r7, r3
 80045a6:	1dfa      	adds	r2, r7, #7
 80045a8:	7812      	ldrb	r2, [r2, #0]
 80045aa:	3a05      	subs	r2, #5
 80045ac:	4251      	negs	r1, r2
 80045ae:	414a      	adcs	r2, r1
 80045b0:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 80045b2:	230f      	movs	r3, #15
 80045b4:	18fb      	adds	r3, r7, r3
 80045b6:	781b      	ldrb	r3, [r3, #0]
}
 80045b8:	0018      	movs	r0, r3
 80045ba:	46bd      	mov	sp, r7
 80045bc:	b004      	add	sp, #16
 80045be:	bd80      	pop	{r7, pc}

080045c0 <AT_Send>:

bool AT_Send(AT_Commands state){
 80045c0:	b590      	push	{r4, r7, lr}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	0002      	movs	r2, r0
 80045c8:	1dfb      	adds	r3, r7, #7
 80045ca:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 80045cc:	230f      	movs	r3, #15
 80045ce:	18fb      	adds	r3, r7, r3
 80045d0:	2200      	movs	r2, #0
 80045d2:	701a      	strb	r2, [r3, #0]
  switch (state){
 80045d4:	1dfb      	adds	r3, r7, #7
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b0f      	cmp	r3, #15
 80045da:	d900      	bls.n	80045de <AT_Send+0x1e>
 80045dc:	e14a      	b.n	8004874 <AT_Send+0x2b4>
 80045de:	009a      	lsls	r2, r3, #2
 80045e0:	4ba8      	ldr	r3, [pc, #672]	@ (8004884 <AT_Send+0x2c4>)
 80045e2:	18d3      	adds	r3, r2, r3
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 80045e8:	4ba7      	ldr	r3, [pc, #668]	@ (8004888 <AT_Send+0x2c8>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	0018      	movs	r0, r3
 80045ee:	f004 ffa5 	bl	800953c <TimestampIsReached>
 80045f2:	1e03      	subs	r3, r0, #0
 80045f4:	d100      	bne.n	80045f8 <AT_Send+0x38>
 80045f6:	e13c      	b.n	8004872 <AT_Send+0x2b2>
    ATCommandSend = PollAwake();
 80045f8:	230f      	movs	r3, #15
 80045fa:	18fc      	adds	r4, r7, r3
 80045fc:	f7ff fb8c 	bl	8003d18 <PollAwake>
 8004600:	0003      	movs	r3, r0
 8004602:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004604:	f005 fb8c 	bl	8009d20 <HAL_GetTick>
 8004608:	0003      	movs	r3, r0
 800460a:	3332      	adds	r3, #50	@ 0x32
 800460c:	001a      	movs	r2, r3
 800460e:	4b9e      	ldr	r3, [pc, #632]	@ (8004888 <AT_Send+0x2c8>)
 8004610:	601a      	str	r2, [r3, #0]
  }
  break;
 8004612:	e12e      	b.n	8004872 <AT_Send+0x2b2>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004614:	4a9d      	ldr	r2, [pc, #628]	@ (800488c <AT_Send+0x2cc>)
 8004616:	4b9e      	ldr	r3, [pc, #632]	@ (8004890 <AT_Send+0x2d0>)
 8004618:	0019      	movs	r1, r3
 800461a:	2003      	movs	r0, #3
 800461c:	f004 ffe4 	bl	80095e8 <CreateLine>
    ATCommandSend = RFPower();
 8004620:	230f      	movs	r3, #15
 8004622:	18fc      	adds	r4, r7, r3
 8004624:	f7ff fb98 	bl	8003d58 <RFPower>
 8004628:	0003      	movs	r3, r0
 800462a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800462c:	f005 fb78 	bl	8009d20 <HAL_GetTick>
 8004630:	0003      	movs	r3, r0
 8004632:	330a      	adds	r3, #10
 8004634:	001a      	movs	r2, r3
 8004636:	4b94      	ldr	r3, [pc, #592]	@ (8004888 <AT_Send+0x2c8>)
 8004638:	601a      	str	r2, [r3, #0]
    break;
 800463a:	e11b      	b.n	8004874 <AT_Send+0x2b4>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 800463c:	4a95      	ldr	r2, [pc, #596]	@ (8004894 <AT_Send+0x2d4>)
 800463e:	4b94      	ldr	r3, [pc, #592]	@ (8004890 <AT_Send+0x2d0>)
 8004640:	0019      	movs	r1, r3
 8004642:	2003      	movs	r0, #3
 8004644:	f004 ffd0 	bl	80095e8 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004648:	230f      	movs	r3, #15
 800464a:	18fc      	adds	r4, r7, r3
 800464c:	f7ff fba4 	bl	8003d98 <CheckRFPower>
 8004650:	0003      	movs	r3, r0
 8004652:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004654:	f005 fb64 	bl	8009d20 <HAL_GetTick>
 8004658:	0003      	movs	r3, r0
 800465a:	330a      	adds	r3, #10
 800465c:	001a      	movs	r2, r3
 800465e:	4b8a      	ldr	r3, [pc, #552]	@ (8004888 <AT_Send+0x2c8>)
 8004660:	601a      	str	r2, [r3, #0]
    break;
 8004662:	e107      	b.n	8004874 <AT_Send+0x2b4>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004664:	4a8c      	ldr	r2, [pc, #560]	@ (8004898 <AT_Send+0x2d8>)
 8004666:	4b8a      	ldr	r3, [pc, #552]	@ (8004890 <AT_Send+0x2d0>)
 8004668:	0019      	movs	r1, r3
 800466a:	2003      	movs	r0, #3
 800466c:	f004 ffbc 	bl	80095e8 <CreateLine>
    ATCommandSend = ATRestore();
 8004670:	230f      	movs	r3, #15
 8004672:	18fc      	adds	r4, r7, r3
 8004674:	f7ff fbb0 	bl	8003dd8 <ATRestore>
 8004678:	0003      	movs	r3, r0
 800467a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800467c:	f005 fb50 	bl	8009d20 <HAL_GetTick>
 8004680:	0003      	movs	r3, r0
 8004682:	3332      	adds	r3, #50	@ 0x32
 8004684:	001a      	movs	r2, r3
 8004686:	4b80      	ldr	r3, [pc, #512]	@ (8004888 <AT_Send+0x2c8>)
 8004688:	601a      	str	r2, [r3, #0]
    break;
 800468a:	e0f3      	b.n	8004874 <AT_Send+0x2b4>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 800468c:	4a83      	ldr	r2, [pc, #524]	@ (800489c <AT_Send+0x2dc>)
 800468e:	4b80      	ldr	r3, [pc, #512]	@ (8004890 <AT_Send+0x2d0>)
 8004690:	0019      	movs	r1, r3
 8004692:	2003      	movs	r0, #3
 8004694:	f004 ffa8 	bl	80095e8 <CreateLine>
    ATCommandSend = CWINIT();
 8004698:	230f      	movs	r3, #15
 800469a:	18fc      	adds	r4, r7, r3
 800469c:	f7ff fbbc 	bl	8003e18 <CWINIT>
 80046a0:	0003      	movs	r3, r0
 80046a2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80046a4:	f005 fb3c 	bl	8009d20 <HAL_GetTick>
 80046a8:	0003      	movs	r3, r0
 80046aa:	33f5      	adds	r3, #245	@ 0xf5
 80046ac:	33ff      	adds	r3, #255	@ 0xff
 80046ae:	001a      	movs	r2, r3
 80046b0:	4b75      	ldr	r3, [pc, #468]	@ (8004888 <AT_Send+0x2c8>)
 80046b2:	601a      	str	r2, [r3, #0]
    break;
 80046b4:	e0de      	b.n	8004874 <AT_Send+0x2b4>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 80046b6:	4a7a      	ldr	r2, [pc, #488]	@ (80048a0 <AT_Send+0x2e0>)
 80046b8:	4b75      	ldr	r3, [pc, #468]	@ (8004890 <AT_Send+0x2d0>)
 80046ba:	0019      	movs	r1, r3
 80046bc:	2003      	movs	r0, #3
 80046be:	f004 ff93 	bl	80095e8 <CreateLine>
    ATCommandSend = CWMODE1();
 80046c2:	230f      	movs	r3, #15
 80046c4:	18fc      	adds	r4, r7, r3
 80046c6:	f7ff fbc7 	bl	8003e58 <CWMODE1>
 80046ca:	0003      	movs	r3, r0
 80046cc:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80046ce:	f005 fb27 	bl	8009d20 <HAL_GetTick>
 80046d2:	0003      	movs	r3, r0
 80046d4:	330a      	adds	r3, #10
 80046d6:	001a      	movs	r2, r3
 80046d8:	4b6b      	ldr	r3, [pc, #428]	@ (8004888 <AT_Send+0x2c8>)
 80046da:	601a      	str	r2, [r3, #0]
    break;
 80046dc:	e0ca      	b.n	8004874 <AT_Send+0x2b4>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 80046de:	4a70      	ldr	r2, [pc, #448]	@ (80048a0 <AT_Send+0x2e0>)
 80046e0:	4b6b      	ldr	r3, [pc, #428]	@ (8004890 <AT_Send+0x2d0>)
 80046e2:	0019      	movs	r1, r3
 80046e4:	2003      	movs	r0, #3
 80046e6:	f004 ff7f 	bl	80095e8 <CreateLine>
    ATCommandSend = CWMODE2();
 80046ea:	230f      	movs	r3, #15
 80046ec:	18fc      	adds	r4, r7, r3
 80046ee:	f7ff fbd3 	bl	8003e98 <CWMODE2>
 80046f2:	0003      	movs	r3, r0
 80046f4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80046f6:	f005 fb13 	bl	8009d20 <HAL_GetTick>
 80046fa:	0003      	movs	r3, r0
 80046fc:	330a      	adds	r3, #10
 80046fe:	001a      	movs	r2, r3
 8004700:	4b61      	ldr	r3, [pc, #388]	@ (8004888 <AT_Send+0x2c8>)
 8004702:	601a      	str	r2, [r3, #0]
    break;
 8004704:	e0b6      	b.n	8004874 <AT_Send+0x2b4>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004706:	4a67      	ldr	r2, [pc, #412]	@ (80048a4 <AT_Send+0x2e4>)
 8004708:	4b61      	ldr	r3, [pc, #388]	@ (8004890 <AT_Send+0x2d0>)
 800470a:	0019      	movs	r1, r3
 800470c:	2003      	movs	r0, #3
 800470e:	f004 ff6b 	bl	80095e8 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8004712:	230f      	movs	r3, #15
 8004714:	18fc      	adds	r4, r7, r3
 8004716:	f7ff fbdf 	bl	8003ed8 <CWAUTOCONN>
 800471a:	0003      	movs	r3, r0
 800471c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800471e:	f005 faff 	bl	8009d20 <HAL_GetTick>
 8004722:	0003      	movs	r3, r0
 8004724:	330a      	adds	r3, #10
 8004726:	001a      	movs	r2, r3
 8004728:	4b57      	ldr	r3, [pc, #348]	@ (8004888 <AT_Send+0x2c8>)
 800472a:	601a      	str	r2, [r3, #0]
    break;
 800472c:	e0a2      	b.n	8004874 <AT_Send+0x2b4>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 800472e:	4a5e      	ldr	r2, [pc, #376]	@ (80048a8 <AT_Send+0x2e8>)
 8004730:	4b57      	ldr	r3, [pc, #348]	@ (8004890 <AT_Send+0x2d0>)
 8004732:	0019      	movs	r1, r3
 8004734:	2003      	movs	r0, #3
 8004736:	f004 ff57 	bl	80095e8 <CreateLine>
    ATCommandSend = CWJAP();
 800473a:	230f      	movs	r3, #15
 800473c:	18fc      	adds	r4, r7, r3
 800473e:	f7ff fbeb 	bl	8003f18 <CWJAP>
 8004742:	0003      	movs	r3, r0
 8004744:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004746:	f005 faeb 	bl	8009d20 <HAL_GetTick>
 800474a:	0003      	movs	r3, r0
 800474c:	3332      	adds	r3, #50	@ 0x32
 800474e:	001a      	movs	r2, r3
 8004750:	4b4d      	ldr	r3, [pc, #308]	@ (8004888 <AT_Send+0x2c8>)
 8004752:	601a      	str	r2, [r3, #0]
    break;
 8004754:	e08e      	b.n	8004874 <AT_Send+0x2b4>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8004756:	4a55      	ldr	r2, [pc, #340]	@ (80048ac <AT_Send+0x2ec>)
 8004758:	4b4d      	ldr	r3, [pc, #308]	@ (8004890 <AT_Send+0x2d0>)
 800475a:	0019      	movs	r1, r3
 800475c:	2003      	movs	r0, #3
 800475e:	f004 ff43 	bl	80095e8 <CreateLine>
    ATCommandSend = CWMODE3();
 8004762:	230f      	movs	r3, #15
 8004764:	18fc      	adds	r4, r7, r3
 8004766:	f7ff fc57 	bl	8004018 <CWMODE3>
 800476a:	0003      	movs	r3, r0
 800476c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800476e:	f005 fad7 	bl	8009d20 <HAL_GetTick>
 8004772:	0003      	movs	r3, r0
 8004774:	330a      	adds	r3, #10
 8004776:	001a      	movs	r2, r3
 8004778:	4b43      	ldr	r3, [pc, #268]	@ (8004888 <AT_Send+0x2c8>)
 800477a:	601a      	str	r2, [r3, #0]
    break;
 800477c:	e07a      	b.n	8004874 <AT_Send+0x2b4>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 800477e:	4a4c      	ldr	r2, [pc, #304]	@ (80048b0 <AT_Send+0x2f0>)
 8004780:	4b43      	ldr	r3, [pc, #268]	@ (8004890 <AT_Send+0x2d0>)
 8004782:	0019      	movs	r1, r3
 8004784:	2003      	movs	r0, #3
 8004786:	f004 ff2f 	bl	80095e8 <CreateLine>
    ATCommandSend = CWSAP();
 800478a:	230f      	movs	r3, #15
 800478c:	18fc      	adds	r4, r7, r3
 800478e:	f7ff fc63 	bl	8004058 <CWSAP>
 8004792:	0003      	movs	r3, r0
 8004794:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004796:	f005 fac3 	bl	8009d20 <HAL_GetTick>
 800479a:	0003      	movs	r3, r0
 800479c:	330a      	adds	r3, #10
 800479e:	001a      	movs	r2, r3
 80047a0:	4b39      	ldr	r3, [pc, #228]	@ (8004888 <AT_Send+0x2c8>)
 80047a2:	601a      	str	r2, [r3, #0]
    break;
 80047a4:	e066      	b.n	8004874 <AT_Send+0x2b4>

  case AT_CIPMUX:
    Debug("SET multiple communication channels");
 80047a6:	4a43      	ldr	r2, [pc, #268]	@ (80048b4 <AT_Send+0x2f4>)
 80047a8:	4b39      	ldr	r3, [pc, #228]	@ (8004890 <AT_Send+0x2d0>)
 80047aa:	0019      	movs	r1, r3
 80047ac:	2003      	movs	r0, #3
 80047ae:	f004 ff1b 	bl	80095e8 <CreateLine>
    ATCommandSend = CIPMUX();
 80047b2:	230f      	movs	r3, #15
 80047b4:	18fc      	adds	r4, r7, r3
 80047b6:	f7ff fc6f 	bl	8004098 <CIPMUX>
 80047ba:	0003      	movs	r3, r0
 80047bc:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80047be:	f005 faaf 	bl	8009d20 <HAL_GetTick>
 80047c2:	0003      	movs	r3, r0
 80047c4:	330a      	adds	r3, #10
 80047c6:	001a      	movs	r2, r3
 80047c8:	4b2f      	ldr	r3, [pc, #188]	@ (8004888 <AT_Send+0x2c8>)
 80047ca:	601a      	str	r2, [r3, #0]
    break;
 80047cc:	e052      	b.n	8004874 <AT_Send+0x2b4>

  case AT_WEBSERVER:
    Debug("SET in station/soft-ap mode");
 80047ce:	4a37      	ldr	r2, [pc, #220]	@ (80048ac <AT_Send+0x2ec>)
 80047d0:	4b2f      	ldr	r3, [pc, #188]	@ (8004890 <AT_Send+0x2d0>)
 80047d2:	0019      	movs	r1, r3
 80047d4:	2003      	movs	r0, #3
 80047d6:	f004 ff07 	bl	80095e8 <CreateLine>
    ATCommandSend = WEBSERVER();
 80047da:	230f      	movs	r3, #15
 80047dc:	18fc      	adds	r4, r7, r3
 80047de:	f7ff fc7b 	bl	80040d8 <WEBSERVER>
 80047e2:	0003      	movs	r3, r0
 80047e4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80047e6:	f005 fa9b 	bl	8009d20 <HAL_GetTick>
 80047ea:	0003      	movs	r3, r0
 80047ec:	330a      	adds	r3, #10
 80047ee:	001a      	movs	r2, r3
 80047f0:	4b25      	ldr	r3, [pc, #148]	@ (8004888 <AT_Send+0x2c8>)
 80047f2:	601a      	str	r2, [r3, #0]
    break;
 80047f4:	e03e      	b.n	8004874 <AT_Send+0x2b4>

  case AT_HTTPCPOST:
    Debug("SET in station/soft-ap mode");
 80047f6:	4a2d      	ldr	r2, [pc, #180]	@ (80048ac <AT_Send+0x2ec>)
 80047f8:	4b25      	ldr	r3, [pc, #148]	@ (8004890 <AT_Send+0x2d0>)
 80047fa:	0019      	movs	r1, r3
 80047fc:	2003      	movs	r0, #3
 80047fe:	f004 fef3 	bl	80095e8 <CreateLine>
    ATCommandSend = HTTPCPOST();
 8004802:	230f      	movs	r3, #15
 8004804:	18fc      	adds	r4, r7, r3
 8004806:	f7ff fc87 	bl	8004118 <HTTPCPOST>
 800480a:	0003      	movs	r3, r0
 800480c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800480e:	f005 fa87 	bl	8009d20 <HAL_GetTick>
 8004812:	0003      	movs	r3, r0
 8004814:	33f5      	adds	r3, #245	@ 0xf5
 8004816:	33ff      	adds	r3, #255	@ 0xff
 8004818:	001a      	movs	r2, r3
 800481a:	4b1b      	ldr	r3, [pc, #108]	@ (8004888 <AT_Send+0x2c8>)
 800481c:	601a      	str	r2, [r3, #0]
    break;
 800481e:	e029      	b.n	8004874 <AT_Send+0x2b4>

  case AT_SENDDATA:
    Debug("Send the data");
 8004820:	4a25      	ldr	r2, [pc, #148]	@ (80048b8 <AT_Send+0x2f8>)
 8004822:	4b1b      	ldr	r3, [pc, #108]	@ (8004890 <AT_Send+0x2d0>)
 8004824:	0019      	movs	r1, r3
 8004826:	2003      	movs	r0, #3
 8004828:	f004 fede 	bl	80095e8 <CreateLine>
    ATCommandSend = SENDDATA();
 800482c:	230f      	movs	r3, #15
 800482e:	18fc      	adds	r4, r7, r3
 8004830:	f7ff fd0e 	bl	8004250 <SENDDATA>
 8004834:	0003      	movs	r3, r0
 8004836:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004838:	f005 fa72 	bl	8009d20 <HAL_GetTick>
 800483c:	0003      	movs	r3, r0
 800483e:	33f5      	adds	r3, #245	@ 0xf5
 8004840:	33ff      	adds	r3, #255	@ 0xff
 8004842:	001a      	movs	r2, r3
 8004844:	4b10      	ldr	r3, [pc, #64]	@ (8004888 <AT_Send+0x2c8>)
 8004846:	601a      	str	r2, [r3, #0]
    break;
 8004848:	e014      	b.n	8004874 <AT_Send+0x2b4>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 800484a:	4a1c      	ldr	r2, [pc, #112]	@ (80048bc <AT_Send+0x2fc>)
 800484c:	4b10      	ldr	r3, [pc, #64]	@ (8004890 <AT_Send+0x2d0>)
 800484e:	0019      	movs	r1, r3
 8004850:	2003      	movs	r0, #3
 8004852:	f004 fec9 	bl	80095e8 <CreateLine>
    ATCommandSend = SLEEP();
 8004856:	230f      	movs	r3, #15
 8004858:	18fc      	adds	r4, r7, r3
 800485a:	f7ff fda5 	bl	80043a8 <SLEEP>
 800485e:	0003      	movs	r3, r0
 8004860:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004862:	f005 fa5d 	bl	8009d20 <HAL_GetTick>
 8004866:	0003      	movs	r3, r0
 8004868:	330a      	adds	r3, #10
 800486a:	001a      	movs	r2, r3
 800486c:	4b06      	ldr	r3, [pc, #24]	@ (8004888 <AT_Send+0x2c8>)
 800486e:	601a      	str	r2, [r3, #0]
    break;
 8004870:	e000      	b.n	8004874 <AT_Send+0x2b4>
  break;
 8004872:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8004874:	230f      	movs	r3, #15
 8004876:	18fb      	adds	r3, r7, r3
 8004878:	781b      	ldrb	r3, [r3, #0]
}
 800487a:	0018      	movs	r0, r3
 800487c:	46bd      	mov	sp, r7
 800487e:	b005      	add	sp, #20
 8004880:	bd90      	pop	{r4, r7, pc}
 8004882:	46c0      	nop			@ (mov r8, r8)
 8004884:	0801b72c 	.word	0x0801b72c
 8004888:	200007dc 	.word	0x200007dc
 800488c:	0801ae40 	.word	0x0801ae40
 8004890:	0801aae0 	.word	0x0801aae0
 8004894:	0801ae54 	.word	0x0801ae54
 8004898:	0801ae68 	.word	0x0801ae68
 800489c:	0801ae78 	.word	0x0801ae78
 80048a0:	0801ae8c 	.word	0x0801ae8c
 80048a4:	0801aea4 	.word	0x0801aea4
 80048a8:	0801aebc 	.word	0x0801aebc
 80048ac:	0801aed0 	.word	0x0801aed0
 80048b0:	0801aeec 	.word	0x0801aeec
 80048b4:	0801af08 	.word	0x0801af08
 80048b8:	0801af2c 	.word	0x0801af2c
 80048bc:	0801af3c 	.word	0x0801af3c

080048c0 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 80048c0:	b590      	push	{r4, r7, lr}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
  bool ATSend = false;
 80048c6:	1dfb      	adds	r3, r7, #7
 80048c8:	2200      	movs	r2, #0
 80048ca:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 80048cc:	4b79      	ldr	r3, [pc, #484]	@ (8004ab4 <ESP_WakeTest+0x1f4>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	2b05      	cmp	r3, #5
 80048d2:	d900      	bls.n	80048d6 <ESP_WakeTest+0x16>
 80048d4:	e0d4      	b.n	8004a80 <ESP_WakeTest+0x1c0>
 80048d6:	009a      	lsls	r2, r3, #2
 80048d8:	4b77      	ldr	r3, [pc, #476]	@ (8004ab8 <ESP_WakeTest+0x1f8>)
 80048da:	18d3      	adds	r3, r2, r3
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 80048e0:	4b76      	ldr	r3, [pc, #472]	@ (8004abc <ESP_WakeTest+0x1fc>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2201      	movs	r2, #1
 80048e6:	4053      	eors	r3, r2
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d036      	beq.n	800495c <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80048ee:	2380      	movs	r3, #128	@ 0x80
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	4873      	ldr	r0, [pc, #460]	@ (8004ac0 <ESP_WakeTest+0x200>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	0019      	movs	r1, r3
 80048f8:	f006 fdb1 	bl	800b45e <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80048fc:	2032      	movs	r0, #50	@ 0x32
 80048fe:	f005 fa19 	bl	8009d34 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004902:	2380      	movs	r3, #128	@ 0x80
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	486e      	ldr	r0, [pc, #440]	@ (8004ac0 <ESP_WakeTest+0x200>)
 8004908:	2201      	movs	r2, #1
 800490a:	0019      	movs	r1, r3
 800490c:	f006 fda7 	bl	800b45e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004910:	200a      	movs	r0, #10
 8004912:	f005 fa0f 	bl	8009d34 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004916:	4b6b      	ldr	r3, [pc, #428]	@ (8004ac4 <ESP_WakeTest+0x204>)
 8004918:	2200      	movs	r2, #0
 800491a:	2101      	movs	r1, #1
 800491c:	0018      	movs	r0, r3
 800491e:	f006 fd9e 	bl	800b45e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004922:	200a      	movs	r0, #10
 8004924:	f005 fa06 	bl	8009d34 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004928:	4b66      	ldr	r3, [pc, #408]	@ (8004ac4 <ESP_WakeTest+0x204>)
 800492a:	2201      	movs	r2, #1
 800492c:	2102      	movs	r1, #2
 800492e:	0018      	movs	r0, r3
 8004930:	f006 fd95 	bl	800b45e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004934:	200a      	movs	r0, #10
 8004936:	f005 f9fd 	bl	8009d34 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800493a:	4b62      	ldr	r3, [pc, #392]	@ (8004ac4 <ESP_WakeTest+0x204>)
 800493c:	2201      	movs	r2, #1
 800493e:	2101      	movs	r1, #1
 8004940:	0018      	movs	r0, r3
 8004942:	f006 fd8c 	bl	800b45e <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004946:	f005 f9eb 	bl	8009d20 <HAL_GetTick>
 800494a:	0003      	movs	r3, r0
 800494c:	22af      	movs	r2, #175	@ 0xaf
 800494e:	0092      	lsls	r2, r2, #2
 8004950:	189a      	adds	r2, r3, r2
 8004952:	4b5d      	ldr	r3, [pc, #372]	@ (8004ac8 <ESP_WakeTest+0x208>)
 8004954:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004956:	4b59      	ldr	r3, [pc, #356]	@ (8004abc <ESP_WakeTest+0x1fc>)
 8004958:	2201      	movs	r2, #1
 800495a:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800495c:	4b5b      	ldr	r3, [pc, #364]	@ (8004acc <ESP_WakeTest+0x20c>)
 800495e:	21ff      	movs	r1, #255	@ 0xff
 8004960:	0018      	movs	r0, r3
 8004962:	f7fe ff35 	bl	80037d0 <ESP_Receive>
 8004966:	1e03      	subs	r3, r0, #0
 8004968:	d100      	bne.n	800496c <ESP_WakeTest+0xac>
 800496a:	e099      	b.n	8004aa0 <ESP_WakeTest+0x1e0>
        TestState = ESP_TEST_SEND;
 800496c:	4b51      	ldr	r3, [pc, #324]	@ (8004ab4 <ESP_WakeTest+0x1f4>)
 800496e:	2201      	movs	r2, #1
 8004970:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004972:	e095      	b.n	8004aa0 <ESP_WakeTest+0x1e0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8004974:	4b54      	ldr	r3, [pc, #336]	@ (8004ac8 <ESP_WakeTest+0x208>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	0018      	movs	r0, r3
 800497a:	f004 fddf 	bl	800953c <TimestampIsReached>
 800497e:	1e03      	subs	r3, r0, #0
 8004980:	d100      	bne.n	8004984 <ESP_WakeTest+0xc4>
 8004982:	e08f      	b.n	8004aa4 <ESP_WakeTest+0x1e4>
        ATSend = AT_Send(ATCommand);
 8004984:	4b52      	ldr	r3, [pc, #328]	@ (8004ad0 <ESP_WakeTest+0x210>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	1dfc      	adds	r4, r7, #7
 800498a:	0018      	movs	r0, r3
 800498c:	f7ff fe18 	bl	80045c0 <AT_Send>
 8004990:	0003      	movs	r3, r0
 8004992:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004994:	1dfb      	adds	r3, r7, #7
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d100      	bne.n	800499e <ESP_WakeTest+0xde>
 800499c:	e082      	b.n	8004aa4 <ESP_WakeTest+0x1e4>
          TestState = ESP_TEST_RECEIVE;
 800499e:	4b45      	ldr	r3, [pc, #276]	@ (8004ab4 <ESP_WakeTest+0x1f4>)
 80049a0:	2202      	movs	r2, #2
 80049a2:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80049a4:	e07e      	b.n	8004aa4 <ESP_WakeTest+0x1e4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 80049a6:	4b48      	ldr	r3, [pc, #288]	@ (8004ac8 <ESP_WakeTest+0x208>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	0018      	movs	r0, r3
 80049ac:	f004 fdc6 	bl	800953c <TimestampIsReached>
 80049b0:	1e03      	subs	r3, r0, #0
 80049b2:	d100      	bne.n	80049b6 <ESP_WakeTest+0xf6>
 80049b4:	e078      	b.n	8004aa8 <ESP_WakeTest+0x1e8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80049b6:	4b47      	ldr	r3, [pc, #284]	@ (8004ad4 <ESP_WakeTest+0x214>)
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	0018      	movs	r0, r3
 80049bc:	f7ff fd14 	bl	80043e8 <DMA_ProcessBuffer>
 80049c0:	0003      	movs	r3, r0
 80049c2:	001a      	movs	r2, r3
 80049c4:	4b44      	ldr	r3, [pc, #272]	@ (8004ad8 <ESP_WakeTest+0x218>)
 80049c6:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80049c8:	4b43      	ldr	r3, [pc, #268]	@ (8004ad8 <ESP_WakeTest+0x218>)
 80049ca:	781a      	ldrb	r2, [r3, #0]
 80049cc:	4b41      	ldr	r3, [pc, #260]	@ (8004ad4 <ESP_WakeTest+0x214>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	1dbc      	adds	r4, r7, #6
 80049d2:	0019      	movs	r1, r3
 80049d4:	0010      	movs	r0, r2
 80049d6:	f7ff fdbd 	bl	8004554 <ATCompare>
 80049da:	0003      	movs	r3, r0
 80049dc:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80049de:	4b3e      	ldr	r3, [pc, #248]	@ (8004ad8 <ESP_WakeTest+0x218>)
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d102      	bne.n	80049ec <ESP_WakeTest+0x12c>
          TestState = ESP_TEST_SEND;
 80049e6:	4b33      	ldr	r3, [pc, #204]	@ (8004ab4 <ESP_WakeTest+0x1f4>)
 80049e8:	2201      	movs	r2, #1
 80049ea:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 80049ec:	4b3a      	ldr	r3, [pc, #232]	@ (8004ad8 <ESP_WakeTest+0x218>)
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	2b07      	cmp	r3, #7
 80049f2:	d104      	bne.n	80049fe <ESP_WakeTest+0x13e>
          StartProg();
 80049f4:	f7ff f81c 	bl	8003a30 <StartProg>
          TestState = ESP_TEST_BOOT;
 80049f8:	4b2e      	ldr	r3, [pc, #184]	@ (8004ab4 <ESP_WakeTest+0x1f4>)
 80049fa:	2205      	movs	r2, #5
 80049fc:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80049fe:	4b36      	ldr	r3, [pc, #216]	@ (8004ad8 <ESP_WakeTest+0x218>)
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	2b03      	cmp	r3, #3
 8004a04:	d109      	bne.n	8004a1a <ESP_WakeTest+0x15a>
          ESPTimeStamp = HAL_GetTick() + 50;
 8004a06:	f005 f98b 	bl	8009d20 <HAL_GetTick>
 8004a0a:	0003      	movs	r3, r0
 8004a0c:	3332      	adds	r3, #50	@ 0x32
 8004a0e:	001a      	movs	r2, r3
 8004a10:	4b2d      	ldr	r3, [pc, #180]	@ (8004ac8 <ESP_WakeTest+0x208>)
 8004a12:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8004a14:	4b27      	ldr	r3, [pc, #156]	@ (8004ab4 <ESP_WakeTest+0x1f4>)
 8004a16:	2201      	movs	r2, #1
 8004a18:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8004a1a:	1dbb      	adds	r3, r7, #6
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d042      	beq.n	8004aa8 <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_VALIDATE;
 8004a22:	4b24      	ldr	r3, [pc, #144]	@ (8004ab4 <ESP_WakeTest+0x1f4>)
 8004a24:	2203      	movs	r2, #3
 8004a26:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004a28:	e03e      	b.n	8004aa8 <ESP_WakeTest+0x1e8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = 4000;
 8004a2a:	4b2c      	ldr	r3, [pc, #176]	@ (8004adc <ESP_WakeTest+0x21c>)
 8004a2c:	22fa      	movs	r2, #250	@ 0xfa
 8004a2e:	0112      	lsls	r2, r2, #4
 8004a30:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 0;
 8004a32:	4b2a      	ldr	r3, [pc, #168]	@ (8004adc <ESP_WakeTest+0x21c>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 4000;
 8004a38:	4b28      	ldr	r3, [pc, #160]	@ (8004adc <ESP_WakeTest+0x21c>)
 8004a3a:	22fa      	movs	r2, #250	@ 0xfa
 8004a3c:	0112      	lsls	r2, r2, #4
 8004a3e:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8004a40:	4b1c      	ldr	r3, [pc, #112]	@ (8004ab4 <ESP_WakeTest+0x1f4>)
 8004a42:	2204      	movs	r2, #4
 8004a44:	701a      	strb	r2, [r3, #0]

      break;
 8004a46:	e030      	b.n	8004aaa <ESP_WakeTest+0x1ea>

    case ESP_TEST_DEINIT:
      testRound = false;
 8004a48:	4b25      	ldr	r3, [pc, #148]	@ (8004ae0 <ESP_WakeTest+0x220>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8004a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004abc <ESP_WakeTest+0x1fc>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004a54:	4b1b      	ldr	r3, [pc, #108]	@ (8004ac4 <ESP_WakeTest+0x204>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	2101      	movs	r1, #1
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	f006 fcff 	bl	800b45e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004a60:	2380      	movs	r3, #128	@ 0x80
 8004a62:	011b      	lsls	r3, r3, #4
 8004a64:	4816      	ldr	r0, [pc, #88]	@ (8004ac0 <ESP_WakeTest+0x200>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	0019      	movs	r1, r3
 8004a6a:	f006 fcf8 	bl	800b45e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8004a6e:	4b15      	ldr	r3, [pc, #84]	@ (8004ac4 <ESP_WakeTest+0x204>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	2102      	movs	r1, #2
 8004a74:	0018      	movs	r0, r3
 8004a76:	f006 fcf2 	bl	800b45e <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 8004a7a:	f001 ffc1 	bl	8006a00 <SetESPMeasurementDone>
      break;
 8004a7e:	e014      	b.n	8004aaa <ESP_WakeTest+0x1ea>

    default:
      TestState = ESP_TEST_INIT;
 8004a80:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab4 <ESP_WakeTest+0x1f4>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	701a      	strb	r2, [r3, #0]
      break;
 8004a86:	e010      	b.n	8004aaa <ESP_WakeTest+0x1ea>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 8004a88:	4b14      	ldr	r3, [pc, #80]	@ (8004adc <ESP_WakeTest+0x21c>)
 8004a8a:	22fa      	movs	r2, #250	@ 0xfa
 8004a8c:	0112      	lsls	r2, r2, #4
 8004a8e:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8004a90:	4b12      	ldr	r3, [pc, #72]	@ (8004adc <ESP_WakeTest+0x21c>)
 8004a92:	22fa      	movs	r2, #250	@ 0xfa
 8004a94:	0112      	lsls	r2, r2, #4
 8004a96:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 8004a98:	4b10      	ldr	r3, [pc, #64]	@ (8004adc <ESP_WakeTest+0x21c>)
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 8004a9e:	e004      	b.n	8004aaa <ESP_WakeTest+0x1ea>
      break;
 8004aa0:	46c0      	nop			@ (mov r8, r8)
 8004aa2:	e002      	b.n	8004aaa <ESP_WakeTest+0x1ea>
      break;
 8004aa4:	46c0      	nop			@ (mov r8, r8)
 8004aa6:	e000      	b.n	8004aaa <ESP_WakeTest+0x1ea>
      break;
 8004aa8:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004aaa:	46c0      	nop			@ (mov r8, r8)
 8004aac:	46bd      	mov	sp, r7
 8004aae:	b003      	add	sp, #12
 8004ab0:	bd90      	pop	{r4, r7, pc}
 8004ab2:	46c0      	nop			@ (mov r8, r8)
 8004ab4:	200009e8 	.word	0x200009e8
 8004ab8:	0801b76c 	.word	0x0801b76c
 8004abc:	20000527 	.word	0x20000527
 8004ac0:	50000800 	.word	0x50000800
 8004ac4:	50001c00 	.word	0x50001c00
 8004ac8:	200007dc 	.word	0x200007dc
 8004acc:	20000428 	.word	0x20000428
 8004ad0:	200009e6 	.word	0x200009e6
 8004ad4:	200009e5 	.word	0x200009e5
 8004ad8:	2000005a 	.word	0x2000005a
 8004adc:	40000400 	.word	0x40000400
 8004ae0:	20000000 	.word	0x20000000

08004ae4 <ESP_Upkeep>:

void ESP_Upkeep(void) {
 8004ae4:	b590      	push	{r4, r7, lr}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004aea:	1dfb      	adds	r3, r7, #7
 8004aec:	2200      	movs	r2, #0
 8004aee:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (EspState) {
 8004af0:	4be0      	ldr	r3, [pc, #896]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	2b0e      	cmp	r3, #14
 8004af6:	d900      	bls.n	8004afa <ESP_Upkeep+0x16>
 8004af8:	e22f      	b.n	8004f5a <ESP_Upkeep+0x476>
 8004afa:	009a      	lsls	r2, r3, #2
 8004afc:	4bde      	ldr	r3, [pc, #888]	@ (8004e78 <ESP_Upkeep+0x394>)
 8004afe:	18d3      	adds	r3, r2, r3
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8004b04:	4bdb      	ldr	r3, [pc, #876]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	701a      	strb	r2, [r3, #0]
      break;
 8004b0a:	e23d      	b.n	8004f88 <ESP_Upkeep+0x4a4>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 8004b0c:	4bdb      	ldr	r3, [pc, #876]	@ (8004e7c <ESP_Upkeep+0x398>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	2201      	movs	r2, #1
 8004b12:	4053      	eors	r3, r2
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d036      	beq.n	8004b88 <ESP_Upkeep+0xa4>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004b1a:	2380      	movs	r3, #128	@ 0x80
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	48d8      	ldr	r0, [pc, #864]	@ (8004e80 <ESP_Upkeep+0x39c>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	0019      	movs	r1, r3
 8004b24:	f006 fc9b 	bl	800b45e <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8004b28:	2032      	movs	r0, #50	@ 0x32
 8004b2a:	f005 f903 	bl	8009d34 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004b2e:	2380      	movs	r3, #128	@ 0x80
 8004b30:	011b      	lsls	r3, r3, #4
 8004b32:	48d3      	ldr	r0, [pc, #844]	@ (8004e80 <ESP_Upkeep+0x39c>)
 8004b34:	2201      	movs	r2, #1
 8004b36:	0019      	movs	r1, r3
 8004b38:	f006 fc91 	bl	800b45e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004b3c:	200a      	movs	r0, #10
 8004b3e:	f005 f8f9 	bl	8009d34 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004b42:	4bd0      	ldr	r3, [pc, #832]	@ (8004e84 <ESP_Upkeep+0x3a0>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	2101      	movs	r1, #1
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f006 fc88 	bl	800b45e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004b4e:	200a      	movs	r0, #10
 8004b50:	f005 f8f0 	bl	8009d34 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004b54:	4bcb      	ldr	r3, [pc, #812]	@ (8004e84 <ESP_Upkeep+0x3a0>)
 8004b56:	2201      	movs	r2, #1
 8004b58:	2102      	movs	r1, #2
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	f006 fc7f 	bl	800b45e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004b60:	200a      	movs	r0, #10
 8004b62:	f005 f8e7 	bl	8009d34 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004b66:	4bc7      	ldr	r3, [pc, #796]	@ (8004e84 <ESP_Upkeep+0x3a0>)
 8004b68:	2201      	movs	r2, #1
 8004b6a:	2101      	movs	r1, #1
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	f006 fc76 	bl	800b45e <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004b72:	f005 f8d5 	bl	8009d20 <HAL_GetTick>
 8004b76:	0003      	movs	r3, r0
 8004b78:	22af      	movs	r2, #175	@ 0xaf
 8004b7a:	0092      	lsls	r2, r2, #2
 8004b7c:	189a      	adds	r2, r3, r2
 8004b7e:	4bc2      	ldr	r3, [pc, #776]	@ (8004e88 <ESP_Upkeep+0x3a4>)
 8004b80:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004b82:	4bbe      	ldr	r3, [pc, #760]	@ (8004e7c <ESP_Upkeep+0x398>)
 8004b84:	2201      	movs	r2, #1
 8004b86:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004b88:	4bc0      	ldr	r3, [pc, #768]	@ (8004e8c <ESP_Upkeep+0x3a8>)
 8004b8a:	21ff      	movs	r1, #255	@ 0xff
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f7fe fe1f 	bl	80037d0 <ESP_Receive>
 8004b92:	1e03      	subs	r3, r0, #0
 8004b94:	d100      	bne.n	8004b98 <ESP_Upkeep+0xb4>
 8004b96:	e1ec      	b.n	8004f72 <ESP_Upkeep+0x48e>
        EspState = ESP_STATE_MODE_SELECT;
 8004b98:	4bb6      	ldr	r3, [pc, #728]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004b9a:	220b      	movs	r2, #11
 8004b9c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004b9e:	e1e8      	b.n	8004f72 <ESP_Upkeep+0x48e>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 8004ba0:	4bbb      	ldr	r3, [pc, #748]	@ (8004e90 <ESP_Upkeep+0x3ac>)
 8004ba2:	2209      	movs	r2, #9
 8004ba4:	2110      	movs	r1, #16
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	f013 f884 	bl	8017cb4 <memset>
      if(!InitIsDone || WifiReset){
 8004bac:	4bb9      	ldr	r3, [pc, #740]	@ (8004e94 <ESP_Upkeep+0x3b0>)
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	4053      	eors	r3, r2
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d103      	bne.n	8004bc2 <ESP_Upkeep+0xde>
 8004bba:	4bb7      	ldr	r3, [pc, #732]	@ (8004e98 <ESP_Upkeep+0x3b4>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d018      	beq.n	8004bf4 <ESP_Upkeep+0x110>
        memcpy(ATCommandArray, AT_INIT, 8);
 8004bc2:	49b6      	ldr	r1, [pc, #728]	@ (8004e9c <ESP_Upkeep+0x3b8>)
 8004bc4:	4bb2      	ldr	r3, [pc, #712]	@ (8004e90 <ESP_Upkeep+0x3ac>)
 8004bc6:	2208      	movs	r2, #8
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f013 f93d 	bl	8017e48 <memcpy>
        EspState = ESP_STATE_SEND;
 8004bce:	4ba9      	ldr	r3, [pc, #676]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004bd0:	2204      	movs	r2, #4
 8004bd2:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004bd4:	4bb2      	ldr	r3, [pc, #712]	@ (8004ea0 <ESP_Upkeep+0x3bc>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8004bda:	4bb2      	ldr	r3, [pc, #712]	@ (8004ea4 <ESP_Upkeep+0x3c0>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004be0:	4baf      	ldr	r3, [pc, #700]	@ (8004ea0 <ESP_Upkeep+0x3bc>)
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	001a      	movs	r2, r3
 8004be6:	4baa      	ldr	r3, [pc, #680]	@ (8004e90 <ESP_Upkeep+0x3ac>)
 8004be8:	5c9a      	ldrb	r2, [r3, r2]
 8004bea:	4baf      	ldr	r3, [pc, #700]	@ (8004ea8 <ESP_Upkeep+0x3c4>)
 8004bec:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004bee:	4baf      	ldr	r3, [pc, #700]	@ (8004eac <ESP_Upkeep+0x3c8>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8004bf4:	4ba7      	ldr	r3, [pc, #668]	@ (8004e94 <ESP_Upkeep+0x3b0>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01f      	beq.n	8004c3c <ESP_Upkeep+0x158>
 8004bfc:	4bac      	ldr	r3, [pc, #688]	@ (8004eb0 <ESP_Upkeep+0x3cc>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	2201      	movs	r2, #1
 8004c02:	4053      	eors	r3, r2
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d018      	beq.n	8004c3c <ESP_Upkeep+0x158>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8004c0a:	4ba1      	ldr	r3, [pc, #644]	@ (8004e90 <ESP_Upkeep+0x3ac>)
 8004c0c:	4aa9      	ldr	r2, [pc, #676]	@ (8004eb4 <ESP_Upkeep+0x3d0>)
 8004c0e:	6811      	ldr	r1, [r2, #0]
 8004c10:	6019      	str	r1, [r3, #0]
 8004c12:	8892      	ldrh	r2, [r2, #4]
 8004c14:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8004c16:	4b97      	ldr	r3, [pc, #604]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004c18:	2204      	movs	r2, #4
 8004c1a:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004c1c:	4ba0      	ldr	r3, [pc, #640]	@ (8004ea0 <ESP_Upkeep+0x3bc>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8004c22:	4ba0      	ldr	r3, [pc, #640]	@ (8004ea4 <ESP_Upkeep+0x3c0>)
 8004c24:	2201      	movs	r2, #1
 8004c26:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004c28:	4b9d      	ldr	r3, [pc, #628]	@ (8004ea0 <ESP_Upkeep+0x3bc>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	001a      	movs	r2, r3
 8004c2e:	4b98      	ldr	r3, [pc, #608]	@ (8004e90 <ESP_Upkeep+0x3ac>)
 8004c30:	5c9a      	ldrb	r2, [r3, r2]
 8004c32:	4b9d      	ldr	r3, [pc, #628]	@ (8004ea8 <ESP_Upkeep+0x3c4>)
 8004c34:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004c36:	4b9d      	ldr	r3, [pc, #628]	@ (8004eac <ESP_Upkeep+0x3c8>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !WifiReset){
 8004c3c:	4b95      	ldr	r3, [pc, #596]	@ (8004e94 <ESP_Upkeep+0x3b0>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d027      	beq.n	8004c94 <ESP_Upkeep+0x1b0>
 8004c44:	4b9a      	ldr	r3, [pc, #616]	@ (8004eb0 <ESP_Upkeep+0x3cc>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d023      	beq.n	8004c94 <ESP_Upkeep+0x1b0>
 8004c4c:	4b92      	ldr	r3, [pc, #584]	@ (8004e98 <ESP_Upkeep+0x3b4>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2201      	movs	r2, #1
 8004c52:	4053      	eors	r3, r2
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d01c      	beq.n	8004c94 <ESP_Upkeep+0x1b0>
        memcpy(ATCommandArray, AT_SEND, 3);
 8004c5a:	4b8d      	ldr	r3, [pc, #564]	@ (8004e90 <ESP_Upkeep+0x3ac>)
 8004c5c:	4a96      	ldr	r2, [pc, #600]	@ (8004eb8 <ESP_Upkeep+0x3d4>)
 8004c5e:	8811      	ldrh	r1, [r2, #0]
 8004c60:	8019      	strh	r1, [r3, #0]
 8004c62:	7892      	ldrb	r2, [r2, #2]
 8004c64:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8004c66:	4b83      	ldr	r3, [pc, #524]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004c68:	2204      	movs	r2, #4
 8004c6a:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004c6c:	4b8c      	ldr	r3, [pc, #560]	@ (8004ea0 <ESP_Upkeep+0x3bc>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8004c72:	4b8c      	ldr	r3, [pc, #560]	@ (8004ea4 <ESP_Upkeep+0x3c0>)
 8004c74:	2202      	movs	r2, #2
 8004c76:	701a      	strb	r2, [r3, #0]
        TIM2 -> CCR4 = 3000;
 8004c78:	2380      	movs	r3, #128	@ 0x80
 8004c7a:	05db      	lsls	r3, r3, #23
 8004c7c:	4a8f      	ldr	r2, [pc, #572]	@ (8004ebc <ESP_Upkeep+0x3d8>)
 8004c7e:	641a      	str	r2, [r3, #64]	@ 0x40
        ATCommand = ATCommandArray[ATCounter];
 8004c80:	4b87      	ldr	r3, [pc, #540]	@ (8004ea0 <ESP_Upkeep+0x3bc>)
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	001a      	movs	r2, r3
 8004c86:	4b82      	ldr	r3, [pc, #520]	@ (8004e90 <ESP_Upkeep+0x3ac>)
 8004c88:	5c9a      	ldrb	r2, [r3, r2]
 8004c8a:	4b87      	ldr	r3, [pc, #540]	@ (8004ea8 <ESP_Upkeep+0x3c4>)
 8004c8c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004c8e:	4b87      	ldr	r3, [pc, #540]	@ (8004eac <ESP_Upkeep+0x3c8>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8004c94:	4b8a      	ldr	r3, [pc, #552]	@ (8004ec0 <ESP_Upkeep+0x3dc>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d100      	bne.n	8004c9e <ESP_Upkeep+0x1ba>
 8004c9c:	e16b      	b.n	8004f76 <ESP_Upkeep+0x492>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8004c9e:	4b7c      	ldr	r3, [pc, #496]	@ (8004e90 <ESP_Upkeep+0x3ac>)
 8004ca0:	4a88      	ldr	r2, [pc, #544]	@ (8004ec4 <ESP_Upkeep+0x3e0>)
 8004ca2:	6811      	ldr	r1, [r2, #0]
 8004ca4:	6019      	str	r1, [r3, #0]
 8004ca6:	7912      	ldrb	r2, [r2, #4]
 8004ca8:	711a      	strb	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8004caa:	4b72      	ldr	r3, [pc, #456]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004cac:	2204      	movs	r2, #4
 8004cae:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004cb0:	4b7b      	ldr	r3, [pc, #492]	@ (8004ea0 <ESP_Upkeep+0x3bc>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8004cb6:	4b7b      	ldr	r3, [pc, #492]	@ (8004ea4 <ESP_Upkeep+0x3c0>)
 8004cb8:	2203      	movs	r2, #3
 8004cba:	701a      	strb	r2, [r3, #0]
        TIM2 -> CCR4 = 3000;
 8004cbc:	2380      	movs	r3, #128	@ 0x80
 8004cbe:	05db      	lsls	r3, r3, #23
 8004cc0:	4a7e      	ldr	r2, [pc, #504]	@ (8004ebc <ESP_Upkeep+0x3d8>)
 8004cc2:	641a      	str	r2, [r3, #64]	@ 0x40
        ATCommand = ATCommandArray[ATCounter];
 8004cc4:	4b76      	ldr	r3, [pc, #472]	@ (8004ea0 <ESP_Upkeep+0x3bc>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	001a      	movs	r2, r3
 8004cca:	4b71      	ldr	r3, [pc, #452]	@ (8004e90 <ESP_Upkeep+0x3ac>)
 8004ccc:	5c9a      	ldrb	r2, [r3, r2]
 8004cce:	4b76      	ldr	r3, [pc, #472]	@ (8004ea8 <ESP_Upkeep+0x3c4>)
 8004cd0:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004cd2:	4b76      	ldr	r3, [pc, #472]	@ (8004eac <ESP_Upkeep+0x3c8>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	701a      	strb	r2, [r3, #0]
      }

    break;
 8004cd8:	e14d      	b.n	8004f76 <ESP_Upkeep+0x492>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 8004cda:	4b73      	ldr	r3, [pc, #460]	@ (8004ea8 <ESP_Upkeep+0x3c4>)
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	1dfc      	adds	r4, r7, #7
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f7ff fc6d 	bl	80045c0 <AT_Send>
 8004ce6:	0003      	movs	r3, r0
 8004ce8:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004cea:	1dfb      	adds	r3, r7, #7
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d100      	bne.n	8004cf4 <ESP_Upkeep+0x210>
 8004cf2:	e142      	b.n	8004f7a <ESP_Upkeep+0x496>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8004cf4:	4b5f      	ldr	r3, [pc, #380]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004cf6:	2203      	movs	r2, #3
 8004cf8:	701a      	strb	r2, [r3, #0]
        }
         break;
 8004cfa:	e13e      	b.n	8004f7a <ESP_Upkeep+0x496>


    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 8004cfc:	4b62      	ldr	r3, [pc, #392]	@ (8004e88 <ESP_Upkeep+0x3a4>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	0018      	movs	r0, r3
 8004d02:	f004 fc1b 	bl	800953c <TimestampIsReached>
 8004d06:	1e03      	subs	r3, r0, #0
 8004d08:	d100      	bne.n	8004d0c <ESP_Upkeep+0x228>
 8004d0a:	e138      	b.n	8004f7e <ESP_Upkeep+0x49a>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004d0c:	4b67      	ldr	r3, [pc, #412]	@ (8004eac <ESP_Upkeep+0x3c8>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	0018      	movs	r0, r3
 8004d12:	f7ff fb69 	bl	80043e8 <DMA_ProcessBuffer>
 8004d16:	0003      	movs	r3, r0
 8004d18:	001a      	movs	r2, r3
 8004d1a:	4b6b      	ldr	r3, [pc, #428]	@ (8004ec8 <ESP_Upkeep+0x3e4>)
 8004d1c:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004d1e:	4b6a      	ldr	r3, [pc, #424]	@ (8004ec8 <ESP_Upkeep+0x3e4>)
 8004d20:	781a      	ldrb	r2, [r3, #0]
 8004d22:	4b62      	ldr	r3, [pc, #392]	@ (8004eac <ESP_Upkeep+0x3c8>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	1dbc      	adds	r4, r7, #6
 8004d28:	0019      	movs	r1, r3
 8004d2a:	0010      	movs	r0, r2
 8004d2c:	f7ff fc12 	bl	8004554 <ATCompare>
 8004d30:	0003      	movs	r3, r0
 8004d32:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004d34:	4b64      	ldr	r3, [pc, #400]	@ (8004ec8 <ESP_Upkeep+0x3e4>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d102      	bne.n	8004d42 <ESP_Upkeep+0x25e>
          EspState = ESP_STATE_SEND;
 8004d3c:	4b4d      	ldr	r3, [pc, #308]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004d3e:	2204      	movs	r2, #4
 8004d40:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004d42:	4b61      	ldr	r3, [pc, #388]	@ (8004ec8 <ESP_Upkeep+0x3e4>)
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d106      	bne.n	8004d58 <ESP_Upkeep+0x274>
          ESPTimeStamp = HAL_GetTick() + 10;
 8004d4a:	f004 ffe9 	bl	8009d20 <HAL_GetTick>
 8004d4e:	0003      	movs	r3, r0
 8004d50:	330a      	adds	r3, #10
 8004d52:	001a      	movs	r2, r3
 8004d54:	4b4c      	ldr	r3, [pc, #304]	@ (8004e88 <ESP_Upkeep+0x3a4>)
 8004d56:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8004d58:	4b5b      	ldr	r3, [pc, #364]	@ (8004ec8 <ESP_Upkeep+0x3e4>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b06      	cmp	r3, #6
 8004d5e:	d116      	bne.n	8004d8e <ESP_Upkeep+0x2aa>
          if(ATCommand != AT_SENDDATA){
 8004d60:	4b51      	ldr	r3, [pc, #324]	@ (8004ea8 <ESP_Upkeep+0x3c4>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	2b0e      	cmp	r3, #14
 8004d66:	d003      	beq.n	8004d70 <ESP_Upkeep+0x28c>
            EspState = ESP_STATE_SEND;
 8004d68:	4b42      	ldr	r3, [pc, #264]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004d6a:	2204      	movs	r2, #4
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	e00e      	b.n	8004d8e <ESP_Upkeep+0x2aa>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8004d70:	4b4d      	ldr	r3, [pc, #308]	@ (8004ea8 <ESP_Upkeep+0x3c4>)
 8004d72:	220d      	movs	r2, #13
 8004d74:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8004d76:	4b4a      	ldr	r3, [pc, #296]	@ (8004ea0 <ESP_Upkeep+0x3bc>)
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	4b48      	ldr	r3, [pc, #288]	@ (8004ea0 <ESP_Upkeep+0x3bc>)
 8004d80:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8004d82:	4b4a      	ldr	r3, [pc, #296]	@ (8004eac <ESP_Upkeep+0x3c8>)
 8004d84:	2202      	movs	r2, #2
 8004d86:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8004d88:	4b3a      	ldr	r3, [pc, #232]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004d8a:	2204      	movs	r2, #4
 8004d8c:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8004d8e:	1dbb      	adds	r3, r7, #6
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d100      	bne.n	8004d98 <ESP_Upkeep+0x2b4>
 8004d96:	e0f2      	b.n	8004f7e <ESP_Upkeep+0x49a>
          EspState = ESP_STATE_NEXT_AT;
 8004d98:	4b36      	ldr	r3, [pc, #216]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004d9a:	2205      	movs	r2, #5
 8004d9c:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004d9e:	e0ee      	b.n	8004f7e <ESP_Upkeep+0x49a>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8004da0:	4b3f      	ldr	r3, [pc, #252]	@ (8004ea0 <ESP_Upkeep+0x3bc>)
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	3301      	adds	r3, #1
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	4b3d      	ldr	r3, [pc, #244]	@ (8004ea0 <ESP_Upkeep+0x3bc>)
 8004daa:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8004dac:	4b3c      	ldr	r3, [pc, #240]	@ (8004ea0 <ESP_Upkeep+0x3bc>)
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	001a      	movs	r2, r3
 8004db2:	4b37      	ldr	r3, [pc, #220]	@ (8004e90 <ESP_Upkeep+0x3ac>)
 8004db4:	5c9a      	ldrb	r2, [r3, r2]
 8004db6:	4b3c      	ldr	r3, [pc, #240]	@ (8004ea8 <ESP_Upkeep+0x3c4>)
 8004db8:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8004dba:	4b3b      	ldr	r3, [pc, #236]	@ (8004ea8 <ESP_Upkeep+0x3c4>)
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b03      	cmp	r3, #3
 8004dc0:	d102      	bne.n	8004dc8 <ESP_Upkeep+0x2e4>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8004dc2:	4b3a      	ldr	r3, [pc, #232]	@ (8004eac <ESP_Upkeep+0x3c8>)
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8004dc8:	4b37      	ldr	r3, [pc, #220]	@ (8004ea8 <ESP_Upkeep+0x3c4>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b0d      	cmp	r3, #13
 8004dce:	d102      	bne.n	8004dd6 <ESP_Upkeep+0x2f2>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8004dd0:	4b36      	ldr	r3, [pc, #216]	@ (8004eac <ESP_Upkeep+0x3c8>)
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8004dd6:	4b34      	ldr	r3, [pc, #208]	@ (8004ea8 <ESP_Upkeep+0x3c4>)
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	2b0d      	cmp	r3, #13
 8004ddc:	d006      	beq.n	8004dec <ESP_Upkeep+0x308>
 8004dde:	4b32      	ldr	r3, [pc, #200]	@ (8004ea8 <ESP_Upkeep+0x3c4>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	d002      	beq.n	8004dec <ESP_Upkeep+0x308>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004de6:	4b31      	ldr	r3, [pc, #196]	@ (8004eac <ESP_Upkeep+0x3c8>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8004dec:	4b21      	ldr	r3, [pc, #132]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004dee:	2204      	movs	r2, #4
 8004df0:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8004df2:	4b2d      	ldr	r3, [pc, #180]	@ (8004ea8 <ESP_Upkeep+0x3c4>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	2b10      	cmp	r3, #16
 8004df8:	d000      	beq.n	8004dfc <ESP_Upkeep+0x318>
 8004dfa:	e0c2      	b.n	8004f82 <ESP_Upkeep+0x49e>
        if(Mode == AT_MODE_SEND){
 8004dfc:	4b29      	ldr	r3, [pc, #164]	@ (8004ea4 <ESP_Upkeep+0x3c0>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d10f      	bne.n	8004e24 <ESP_Upkeep+0x340>
          ESPTimeStamp = HAL_GetTick() + 300000;
 8004e04:	f004 ff8c 	bl	8009d20 <HAL_GetTick>
 8004e08:	0003      	movs	r3, r0
 8004e0a:	4a30      	ldr	r2, [pc, #192]	@ (8004ecc <ESP_Upkeep+0x3e8>)
 8004e0c:	189a      	adds	r2, r3, r2
 8004e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8004e88 <ESP_Upkeep+0x3a4>)
 8004e10:	601a      	str	r2, [r3, #0]
          TIM2 -> CCR4 = 4000;
 8004e12:	2380      	movs	r3, #128	@ 0x80
 8004e14:	05db      	lsls	r3, r3, #23
 8004e16:	22fa      	movs	r2, #250	@ 0xfa
 8004e18:	0112      	lsls	r2, r2, #4
 8004e1a:	641a      	str	r2, [r3, #64]	@ 0x40
          EspState = ESP_STATE_DEINIT;
 8004e1c:	4b15      	ldr	r3, [pc, #84]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004e1e:	220d      	movs	r2, #13
 8004e20:	701a      	strb	r2, [r3, #0]
        }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8004e22:	e0ae      	b.n	8004f82 <ESP_Upkeep+0x49e>
          EspState = ESP_STATE_RESET;
 8004e24:	4b13      	ldr	r3, [pc, #76]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004e26:	2209      	movs	r2, #9
 8004e28:	701a      	strb	r2, [r3, #0]
    break;
 8004e2a:	e0aa      	b.n	8004f82 <ESP_Upkeep+0x49e>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 8004e2c:	4b13      	ldr	r3, [pc, #76]	@ (8004e7c <ESP_Upkeep+0x398>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004e32:	4b14      	ldr	r3, [pc, #80]	@ (8004e84 <ESP_Upkeep+0x3a0>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	2101      	movs	r1, #1
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f006 fb10 	bl	800b45e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004e3e:	2001      	movs	r0, #1
 8004e40:	f004 ff78 	bl	8009d34 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004e44:	2380      	movs	r3, #128	@ 0x80
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	480d      	ldr	r0, [pc, #52]	@ (8004e80 <ESP_Upkeep+0x39c>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	0019      	movs	r1, r3
 8004e4e:	f006 fb06 	bl	800b45e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004e52:	2001      	movs	r0, #1
 8004e54:	f004 ff6e 	bl	8009d34 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8004e58:	4b0a      	ldr	r3, [pc, #40]	@ (8004e84 <ESP_Upkeep+0x3a0>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2102      	movs	r1, #2
 8004e5e:	0018      	movs	r0, r3
 8004e60:	f006 fafd 	bl	800b45e <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8004e64:	4b03      	ldr	r3, [pc, #12]	@ (8004e74 <ESP_Upkeep+0x390>)
 8004e66:	2209      	movs	r2, #9
 8004e68:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8004e6a:	2001      	movs	r0, #1
 8004e6c:	f004 ff62 	bl	8009d34 <HAL_Delay>
      break;
 8004e70:	e08a      	b.n	8004f88 <ESP_Upkeep+0x4a4>
 8004e72:	46c0      	nop			@ (mov r8, r8)
 8004e74:	20000059 	.word	0x20000059
 8004e78:	0801b784 	.word	0x0801b784
 8004e7c:	20000527 	.word	0x20000527
 8004e80:	50000800 	.word	0x50000800
 8004e84:	50001c00 	.word	0x50001c00
 8004e88:	200007dc 	.word	0x200007dc
 8004e8c:	20000428 	.word	0x20000428
 8004e90:	200007d0 	.word	0x200007d0
 8004e94:	20000528 	.word	0x20000528
 8004e98:	20000529 	.word	0x20000529
 8004e9c:	20000040 	.word	0x20000040
 8004ea0:	200007da 	.word	0x200007da
 8004ea4:	200009e7 	.word	0x200009e7
 8004ea8:	200009e6 	.word	0x200009e6
 8004eac:	200009e5 	.word	0x200009e5
 8004eb0:	2000052b 	.word	0x2000052b
 8004eb4:	2000004c 	.word	0x2000004c
 8004eb8:	20000048 	.word	0x20000048
 8004ebc:	00000bb8 	.word	0x00000bb8
 8004ec0:	2000052a 	.word	0x2000052a
 8004ec4:	20000054 	.word	0x20000054
 8004ec8:	2000005b 	.word	0x2000005b
 8004ecc:	000493e0 	.word	0x000493e0

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8004ed0:	4b2f      	ldr	r3, [pc, #188]	@ (8004f90 <ESP_Upkeep+0x4ac>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	f004 fb31 	bl	800953c <TimestampIsReached>
 8004eda:	1e03      	subs	r3, r0, #0
 8004edc:	d103      	bne.n	8004ee6 <ESP_Upkeep+0x402>
 8004ede:	4b2d      	ldr	r3, [pc, #180]	@ (8004f94 <ESP_Upkeep+0x4b0>)
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d04f      	beq.n	8004f86 <ESP_Upkeep+0x4a2>
        if(Mode == AT_MODE_INIT){
 8004ee6:	4b2c      	ldr	r3, [pc, #176]	@ (8004f98 <ESP_Upkeep+0x4b4>)
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d105      	bne.n	8004efa <ESP_Upkeep+0x416>
          InitIsDone = true;
 8004eee:	4b2b      	ldr	r3, [pc, #172]	@ (8004f9c <ESP_Upkeep+0x4b8>)
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8004ef4:	4b2a      	ldr	r3, [pc, #168]	@ (8004fa0 <ESP_Upkeep+0x4bc>)
 8004ef6:	220b      	movs	r2, #11
 8004ef8:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8004efa:	4b27      	ldr	r3, [pc, #156]	@ (8004f98 <ESP_Upkeep+0x4b4>)
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d105      	bne.n	8004f0e <ESP_Upkeep+0x42a>
          ConnectionMade = true;
 8004f02:	4b28      	ldr	r3, [pc, #160]	@ (8004fa4 <ESP_Upkeep+0x4c0>)
 8004f04:	2201      	movs	r2, #1
 8004f06:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8004f08:	4b25      	ldr	r3, [pc, #148]	@ (8004fa0 <ESP_Upkeep+0x4bc>)
 8004f0a:	220b      	movs	r2, #11
 8004f0c:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8004f0e:	4b22      	ldr	r3, [pc, #136]	@ (8004f98 <ESP_Upkeep+0x4b4>)
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d102      	bne.n	8004f1c <ESP_Upkeep+0x438>
          EspState = ESP_STATE_INIT;
 8004f16:	4b22      	ldr	r3, [pc, #136]	@ (8004fa0 <ESP_Upkeep+0x4bc>)
 8004f18:	2202      	movs	r2, #2
 8004f1a:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8004f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8004f98 <ESP_Upkeep+0x4b4>)
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d130      	bne.n	8004f86 <ESP_Upkeep+0x4a2>
          EspState = ESP_STATE_CONFIG;
 8004f24:	4b1e      	ldr	r3, [pc, #120]	@ (8004fa0 <ESP_Upkeep+0x4bc>)
 8004f26:	220e      	movs	r2, #14
 8004f28:	701a      	strb	r2, [r3, #0]
        }
      }

      break;
 8004f2a:	e02c      	b.n	8004f86 <ESP_Upkeep+0x4a2>

    case ESP_STATE_CONFIG:
      Debug("Do nothing until reset");
 8004f2c:	4a1e      	ldr	r2, [pc, #120]	@ (8004fa8 <ESP_Upkeep+0x4c4>)
 8004f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8004fac <ESP_Upkeep+0x4c8>)
 8004f30:	0019      	movs	r1, r3
 8004f32:	2003      	movs	r0, #3
 8004f34:	f004 fb58 	bl	80095e8 <CreateLine>
      Process_PC_Config(GetUsbRxPointer());
 8004f38:	f011 fc1c 	bl	8016774 <GetUsbRxPointer>
 8004f3c:	0003      	movs	r3, r0
 8004f3e:	0018      	movs	r0, r3
 8004f40:	f000 f8ac 	bl	800509c <Process_PC_Config>

      break;
 8004f44:	e020      	b.n	8004f88 <ESP_Upkeep+0x4a4>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 8004f46:	4a1a      	ldr	r2, [pc, #104]	@ (8004fb0 <ESP_Upkeep+0x4cc>)
 8004f48:	4b18      	ldr	r3, [pc, #96]	@ (8004fac <ESP_Upkeep+0x4c8>)
 8004f4a:	0019      	movs	r1, r3
 8004f4c:	2003      	movs	r0, #3
 8004f4e:	f004 fb4b 	bl	80095e8 <CreateLine>
      EspState = ESP_STATE_INIT;
 8004f52:	4b13      	ldr	r3, [pc, #76]	@ (8004fa0 <ESP_Upkeep+0x4bc>)
 8004f54:	2202      	movs	r2, #2
 8004f56:	701a      	strb	r2, [r3, #0]
      break;
 8004f58:	e016      	b.n	8004f88 <ESP_Upkeep+0x4a4>

    default:
      // Handle unexpected state
      Debug("Something went wrong");
 8004f5a:	4a16      	ldr	r2, [pc, #88]	@ (8004fb4 <ESP_Upkeep+0x4d0>)
 8004f5c:	4b13      	ldr	r3, [pc, #76]	@ (8004fac <ESP_Upkeep+0x4c8>)
 8004f5e:	0019      	movs	r1, r3
 8004f60:	2003      	movs	r0, #3
 8004f62:	f004 fb41 	bl	80095e8 <CreateLine>
      EspState = ESP_STATE_ERROR;
 8004f66:	4b0e      	ldr	r3, [pc, #56]	@ (8004fa0 <ESP_Upkeep+0x4bc>)
 8004f68:	2207      	movs	r2, #7
 8004f6a:	701a      	strb	r2, [r3, #0]
      break;
 8004f6c:	e00c      	b.n	8004f88 <ESP_Upkeep+0x4a4>
      break;
 8004f6e:	46c0      	nop			@ (mov r8, r8)
 8004f70:	e00a      	b.n	8004f88 <ESP_Upkeep+0x4a4>
      break;
 8004f72:	46c0      	nop			@ (mov r8, r8)
 8004f74:	e008      	b.n	8004f88 <ESP_Upkeep+0x4a4>
    break;
 8004f76:	46c0      	nop			@ (mov r8, r8)
 8004f78:	e006      	b.n	8004f88 <ESP_Upkeep+0x4a4>
         break;
 8004f7a:	46c0      	nop			@ (mov r8, r8)
 8004f7c:	e004      	b.n	8004f88 <ESP_Upkeep+0x4a4>
      break;
 8004f7e:	46c0      	nop			@ (mov r8, r8)
 8004f80:	e002      	b.n	8004f88 <ESP_Upkeep+0x4a4>
    break;
 8004f82:	46c0      	nop			@ (mov r8, r8)
 8004f84:	e000      	b.n	8004f88 <ESP_Upkeep+0x4a4>
      break;
 8004f86:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004f88:	46c0      	nop			@ (mov r8, r8)
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b003      	add	sp, #12
 8004f8e:	bd90      	pop	{r4, r7, pc}
 8004f90:	200007dc 	.word	0x200007dc
 8004f94:	2000052a 	.word	0x2000052a
 8004f98:	200009e7 	.word	0x200009e7
 8004f9c:	20000528 	.word	0x20000528
 8004fa0:	20000059 	.word	0x20000059
 8004fa4:	2000052b 	.word	0x2000052b
 8004fa8:	0801af60 	.word	0x0801af60
 8004fac:	0801aae0 	.word	0x0801aae0
 8004fb0:	0801af78 	.word	0x0801af78
 8004fb4:	0801af8c 	.word	0x0801af8c

08004fb8 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8004fc0:	4b09      	ldr	r3, [pc, #36]	@ (8004fe8 <I2CSensors_Init+0x30>)
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 8004fc6:	4a09      	ldr	r2, [pc, #36]	@ (8004fec <I2CSensors_Init+0x34>)
 8004fc8:	4b09      	ldr	r3, [pc, #36]	@ (8004ff0 <I2CSensors_Init+0x38>)
 8004fca:	0011      	movs	r1, r2
 8004fcc:	0018      	movs	r0, r3
 8004fce:	f000 fdd7 	bl	8005b80 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 8004fd2:	4a06      	ldr	r2, [pc, #24]	@ (8004fec <I2CSensors_Init+0x34>)
 8004fd4:	4b06      	ldr	r3, [pc, #24]	@ (8004ff0 <I2CSensors_Init+0x38>)
 8004fd6:	0011      	movs	r1, r2
 8004fd8:	0018      	movs	r0, r3
 8004fda:	f000 fc41 	bl	8005860 <Gas_Init>
}
 8004fde:	46c0      	nop			@ (mov r8, r8)
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	b002      	add	sp, #8
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	46c0      	nop			@ (mov r8, r8)
 8004fe8:	200009ec 	.word	0x200009ec
 8004fec:	08005049 	.word	0x08005049
 8004ff0:	08004ff5 	.word	0x08004ff5

08004ff4 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8004ff4:	b5b0      	push	{r4, r5, r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6039      	str	r1, [r7, #0]
 8004ffc:	0011      	movs	r1, r2
 8004ffe:	1dfb      	adds	r3, r7, #7
 8005000:	1c02      	adds	r2, r0, #0
 8005002:	701a      	strb	r2, [r3, #0]
 8005004:	1dbb      	adds	r3, r7, #6
 8005006:	1c0a      	adds	r2, r1, #0
 8005008:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 800500a:	4b0e      	ldr	r3, [pc, #56]	@ (8005044 <ReadI2C+0x50>)
 800500c:	6818      	ldr	r0, [r3, #0]
 800500e:	1dfb      	adds	r3, r7, #7
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	b29b      	uxth	r3, r3
 8005014:	18db      	adds	r3, r3, r3
 8005016:	b299      	uxth	r1, r3
 8005018:	1dbb      	adds	r3, r7, #6
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	b29b      	uxth	r3, r3
 800501e:	250f      	movs	r5, #15
 8005020:	197c      	adds	r4, r7, r5
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	f006 fbd4 	bl	800b7d0 <HAL_I2C_Master_Receive_DMA>
 8005028:	0003      	movs	r3, r0
 800502a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 800502c:	197b      	adds	r3, r7, r5
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <ReadI2C+0x44>
        return false;
 8005034:	2300      	movs	r3, #0
 8005036:	e000      	b.n	800503a <ReadI2C+0x46>
    }
    return true;
 8005038:	2301      	movs	r3, #1
}
 800503a:	0018      	movs	r0, r3
 800503c:	46bd      	mov	sp, r7
 800503e:	b004      	add	sp, #16
 8005040:	bdb0      	pop	{r4, r5, r7, pc}
 8005042:	46c0      	nop			@ (mov r8, r8)
 8005044:	200009ec 	.word	0x200009ec

08005048 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005048:	b5b0      	push	{r4, r5, r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6039      	str	r1, [r7, #0]
 8005050:	0011      	movs	r1, r2
 8005052:	1dfb      	adds	r3, r7, #7
 8005054:	1c02      	adds	r2, r0, #0
 8005056:	701a      	strb	r2, [r3, #0]
 8005058:	1dbb      	adds	r3, r7, #6
 800505a:	1c0a      	adds	r2, r1, #0
 800505c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 800505e:	4b0e      	ldr	r3, [pc, #56]	@ (8005098 <WriteI2C+0x50>)
 8005060:	6818      	ldr	r0, [r3, #0]
 8005062:	1dfb      	adds	r3, r7, #7
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	b29b      	uxth	r3, r3
 8005068:	18db      	adds	r3, r3, r3
 800506a:	b299      	uxth	r1, r3
 800506c:	1dbb      	adds	r3, r7, #6
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	b29b      	uxth	r3, r3
 8005072:	250f      	movs	r5, #15
 8005074:	197c      	adds	r4, r7, r5
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	f006 faa4 	bl	800b5c4 <HAL_I2C_Master_Transmit_DMA>
 800507c:	0003      	movs	r3, r0
 800507e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005080:	197b      	adds	r3, r7, r5
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <WriteI2C+0x44>
        return false;
 8005088:	2300      	movs	r3, #0
 800508a:	e000      	b.n	800508e <WriteI2C+0x46>
    }
    return true;
 800508c:	2301      	movs	r3, #1
}
 800508e:	0018      	movs	r0, r3
 8005090:	46bd      	mov	sp, r7
 8005092:	b004      	add	sp, #16
 8005094:	bdb0      	pop	{r4, r5, r7, pc}
 8005096:	46c0      	nop			@ (mov r8, r8)
 8005098:	200009ec 	.word	0x200009ec

0800509c <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 800509c:	b590      	push	{r4, r7, lr}
 800509e:	b0c3      	sub	sp, #268	@ 0x10c
 80050a0:	af3e      	add	r7, sp, #248	@ 0xf8
 80050a2:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 80050a4:	f011 fb86 	bl	80167b4 <GetUsbRxDataSize>
 80050a8:	0003      	movs	r3, r0
 80050aa:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b05      	cmp	r3, #5
 80050b0:	d971      	bls.n	8005196 <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2123      	movs	r1, #35	@ 0x23
 80050b6:	0018      	movs	r0, r3
 80050b8:	f012 fe04 	bl	8017cc4 <strchr>
 80050bc:	0003      	movs	r3, r0
 80050be:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d065      	beq.n	8005192 <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	785a      	ldrb	r2, [r3, #1]
 80050ca:	4b34      	ldr	r3, [pc, #208]	@ (800519c <Process_PC_Config+0x100>)
 80050cc:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	789a      	ldrb	r2, [r3, #2]
 80050d2:	4b32      	ldr	r3, [pc, #200]	@ (800519c <Process_PC_Config+0x100>)
 80050d4:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 80050d6:	4b31      	ldr	r3, [pc, #196]	@ (800519c <Process_PC_Config+0x100>)
 80050d8:	785b      	ldrb	r3, [r3, #1]
 80050da:	3305      	adds	r3, #5
 80050dc:	001a      	movs	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d351      	bcc.n	8005188 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	1cd9      	adds	r1, r3, #3
 80050e8:	4b2c      	ldr	r3, [pc, #176]	@ (800519c <Process_PC_Config+0x100>)
 80050ea:	785b      	ldrb	r3, [r3, #1]
 80050ec:	001a      	movs	r2, r3
 80050ee:	4b2c      	ldr	r3, [pc, #176]	@ (80051a0 <Process_PC_Config+0x104>)
 80050f0:	0018      	movs	r0, r3
 80050f2:	f012 fea9 	bl	8017e48 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 80050f6:	4b29      	ldr	r3, [pc, #164]	@ (800519c <Process_PC_Config+0x100>)
 80050f8:	785b      	ldrb	r3, [r3, #1]
 80050fa:	3303      	adds	r3, #3
 80050fc:	001a      	movs	r2, r3
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	189b      	adds	r3, r3, r2
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	021b      	lsls	r3, r3, #8
 8005106:	b21a      	sxth	r2, r3
 8005108:	4b24      	ldr	r3, [pc, #144]	@ (800519c <Process_PC_Config+0x100>)
 800510a:	785b      	ldrb	r3, [r3, #1]
 800510c:	3304      	adds	r3, #4
 800510e:	68b9      	ldr	r1, [r7, #8]
 8005110:	18cb      	adds	r3, r1, r3
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	b21b      	sxth	r3, r3
 8005116:	4313      	orrs	r3, r2
 8005118:	b21b      	sxth	r3, r3
 800511a:	b299      	uxth	r1, r3
 800511c:	4a1f      	ldr	r2, [pc, #124]	@ (800519c <Process_PC_Config+0x100>)
 800511e:	2381      	movs	r3, #129	@ 0x81
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005124:	4a1d      	ldr	r2, [pc, #116]	@ (800519c <Process_PC_Config+0x100>)
 8005126:	2381      	movs	r3, #129	@ 0x81
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	5ad4      	ldrh	r4, [r2, r3]
 800512c:	4b1b      	ldr	r3, [pc, #108]	@ (800519c <Process_PC_Config+0x100>)
 800512e:	785b      	ldrb	r3, [r3, #1]
 8005130:	3303      	adds	r3, #3
 8005132:	b29a      	uxth	r2, r3
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	0011      	movs	r1, r2
 8005138:	0018      	movs	r0, r3
 800513a:	f000 f93f 	bl	80053bc <CRC16_ARC>
 800513e:	0003      	movs	r3, r0
 8005140:	429c      	cmp	r4, r3
 8005142:	d007      	beq.n	8005154 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005144:	4b15      	ldr	r3, [pc, #84]	@ (800519c <Process_PC_Config+0x100>)
 8005146:	785a      	ldrb	r2, [r3, #1]
 8005148:	4b15      	ldr	r3, [pc, #84]	@ (80051a0 <Process_PC_Config+0x104>)
 800514a:	0019      	movs	r1, r3
 800514c:	2001      	movs	r0, #1
 800514e:	f000 f8e3 	bl	8005318 <Create_Message>
 8005152:	e016      	b.n	8005182 <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005154:	4c11      	ldr	r4, [pc, #68]	@ (800519c <Process_PC_Config+0x100>)
 8005156:	466b      	mov	r3, sp
 8005158:	0018      	movs	r0, r3
 800515a:	0023      	movs	r3, r4
 800515c:	3310      	adds	r3, #16
 800515e:	22f4      	movs	r2, #244	@ 0xf4
 8005160:	0019      	movs	r1, r3
 8005162:	f012 fe71 	bl	8017e48 <memcpy>
 8005166:	6820      	ldr	r0, [r4, #0]
 8005168:	6861      	ldr	r1, [r4, #4]
 800516a:	68a2      	ldr	r2, [r4, #8]
 800516c:	68e3      	ldr	r3, [r4, #12]
 800516e:	f000 f819 	bl	80051a4 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005172:	4b0a      	ldr	r3, [pc, #40]	@ (800519c <Process_PC_Config+0x100>)
 8005174:	7818      	ldrb	r0, [r3, #0]
 8005176:	4b09      	ldr	r3, [pc, #36]	@ (800519c <Process_PC_Config+0x100>)
 8005178:	785a      	ldrb	r2, [r3, #1]
 800517a:	4b09      	ldr	r3, [pc, #36]	@ (80051a0 <Process_PC_Config+0x104>)
 800517c:	0019      	movs	r1, r3
 800517e:	f000 f8cb 	bl	8005318 <Create_Message>
                }
                ResetUsbRxDataSize();
 8005182:	f011 faff 	bl	8016784 <ResetUsbRxDataSize>
                return;
 8005186:	e006      	b.n	8005196 <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	0018      	movs	r0, r3
 800518c:	f011 fb1c 	bl	80167c8 <GetUsbRxNextChunk>
 8005190:	e001      	b.n	8005196 <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005192:	f011 faf7 	bl	8016784 <ResetUsbRxDataSize>
        }
    }
}
 8005196:	46bd      	mov	sp, r7
 8005198:	b005      	add	sp, #20
 800519a:	bd90      	pop	{r4, r7, pc}
 800519c:	200009f0 	.word	0x200009f0
 80051a0:	200009f2 	.word	0x200009f2

080051a4 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 80051a4:	b084      	sub	sp, #16
 80051a6:	b5b0      	push	{r4, r5, r7, lr}
 80051a8:	b082      	sub	sp, #8
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	2518      	movs	r5, #24
 80051ae:	197c      	adds	r4, r7, r5
 80051b0:	6020      	str	r0, [r4, #0]
 80051b2:	6061      	str	r1, [r4, #4]
 80051b4:	60a2      	str	r2, [r4, #8]
 80051b6:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 80051b8:	197b      	adds	r3, r7, r5
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2bfe      	cmp	r3, #254	@ 0xfe
 80051be:	d100      	bne.n	80051c2 <ProcessCmd+0x1e>
 80051c0:	e06f      	b.n	80052a2 <ProcessCmd+0xfe>
 80051c2:	dd00      	ble.n	80051c6 <ProcessCmd+0x22>
 80051c4:	e08f      	b.n	80052e6 <ProcessCmd+0x142>
 80051c6:	2b0c      	cmp	r3, #12
 80051c8:	dc0a      	bgt.n	80051e0 <ProcessCmd+0x3c>
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	da00      	bge.n	80051d0 <ProcessCmd+0x2c>
 80051ce:	e08a      	b.n	80052e6 <ProcessCmd+0x142>
 80051d0:	2b0c      	cmp	r3, #12
 80051d2:	d900      	bls.n	80051d6 <ProcessCmd+0x32>
 80051d4:	e087      	b.n	80052e6 <ProcessCmd+0x142>
 80051d6:	009a      	lsls	r2, r3, #2
 80051d8:	4b46      	ldr	r3, [pc, #280]	@ (80052f4 <ProcessCmd+0x150>)
 80051da:	18d3      	adds	r3, r2, r3
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	469f      	mov	pc, r3
 80051e0:	2bfd      	cmp	r3, #253	@ 0xfd
 80051e2:	d058      	beq.n	8005296 <ProcessCmd+0xf2>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 80051e4:	e07f      	b.n	80052e6 <ProcessCmd+0x142>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80051e6:	2118      	movs	r1, #24
 80051e8:	187b      	adds	r3, r7, r1
 80051ea:	785b      	ldrb	r3, [r3, #1]
 80051ec:	001a      	movs	r2, r3
 80051ee:	187b      	adds	r3, r7, r1
 80051f0:	1c99      	adds	r1, r3, #2
 80051f2:	4841      	ldr	r0, [pc, #260]	@ (80052f8 <ProcessCmd+0x154>)
 80051f4:	230c      	movs	r3, #12
 80051f6:	f7fe f9e1 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80051fa:	e074      	b.n	80052e6 <ProcessCmd+0x142>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80051fc:	2118      	movs	r1, #24
 80051fe:	187b      	adds	r3, r7, r1
 8005200:	785b      	ldrb	r3, [r3, #1]
 8005202:	001a      	movs	r2, r3
 8005204:	187b      	adds	r3, r7, r1
 8005206:	1c99      	adds	r1, r3, #2
 8005208:	483c      	ldr	r0, [pc, #240]	@ (80052fc <ProcessCmd+0x158>)
 800520a:	230c      	movs	r3, #12
 800520c:	f7fe f9d6 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005210:	e069      	b.n	80052e6 <ProcessCmd+0x142>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005212:	2118      	movs	r1, #24
 8005214:	187b      	adds	r3, r7, r1
 8005216:	785b      	ldrb	r3, [r3, #1]
 8005218:	001a      	movs	r2, r3
 800521a:	187b      	adds	r3, r7, r1
 800521c:	1c99      	adds	r1, r3, #2
 800521e:	4838      	ldr	r0, [pc, #224]	@ (8005300 <ProcessCmd+0x15c>)
 8005220:	230c      	movs	r3, #12
 8005222:	f7fe f9cb 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005226:	e05e      	b.n	80052e6 <ProcessCmd+0x142>
            WriteUint8ArrayEepromSafe(VocRawConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005228:	2118      	movs	r1, #24
 800522a:	187b      	adds	r3, r7, r1
 800522c:	785b      	ldrb	r3, [r3, #1]
 800522e:	001a      	movs	r2, r3
 8005230:	187b      	adds	r3, r7, r1
 8005232:	1c99      	adds	r1, r3, #2
 8005234:	4833      	ldr	r0, [pc, #204]	@ (8005304 <ProcessCmd+0x160>)
 8005236:	230c      	movs	r3, #12
 8005238:	f7fe f9c0 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 800523c:	e053      	b.n	80052e6 <ProcessCmd+0x142>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800523e:	2118      	movs	r1, #24
 8005240:	187b      	adds	r3, r7, r1
 8005242:	785b      	ldrb	r3, [r3, #1]
 8005244:	001a      	movs	r2, r3
 8005246:	187b      	adds	r3, r7, r1
 8005248:	1c99      	adds	r1, r3, #2
 800524a:	482f      	ldr	r0, [pc, #188]	@ (8005308 <ProcessCmd+0x164>)
 800524c:	230c      	movs	r3, #12
 800524e:	f7fe f9b5 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005252:	e048      	b.n	80052e6 <ProcessCmd+0x142>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005254:	2118      	movs	r1, #24
 8005256:	187b      	adds	r3, r7, r1
 8005258:	785b      	ldrb	r3, [r3, #1]
 800525a:	001a      	movs	r2, r3
 800525c:	187b      	adds	r3, r7, r1
 800525e:	1c99      	adds	r1, r3, #2
 8005260:	482a      	ldr	r0, [pc, #168]	@ (800530c <ProcessCmd+0x168>)
 8005262:	230c      	movs	r3, #12
 8005264:	f7fe f9aa 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005268:	e03d      	b.n	80052e6 <ProcessCmd+0x142>
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800526a:	2118      	movs	r1, #24
 800526c:	187b      	adds	r3, r7, r1
 800526e:	785b      	ldrb	r3, [r3, #1]
 8005270:	001a      	movs	r2, r3
 8005272:	187b      	adds	r3, r7, r1
 8005274:	1c99      	adds	r1, r3, #2
 8005276:	4826      	ldr	r0, [pc, #152]	@ (8005310 <ProcessCmd+0x16c>)
 8005278:	230c      	movs	r3, #12
 800527a:	f7fe f99f 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 800527e:	e032      	b.n	80052e6 <ProcessCmd+0x142>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8005280:	2118      	movs	r1, #24
 8005282:	187b      	adds	r3, r7, r1
 8005284:	785b      	ldrb	r3, [r3, #1]
 8005286:	001a      	movs	r2, r3
 8005288:	187b      	adds	r3, r7, r1
 800528a:	1c99      	adds	r1, r3, #2
 800528c:	4821      	ldr	r0, [pc, #132]	@ (8005314 <ProcessCmd+0x170>)
 800528e:	231e      	movs	r3, #30
 8005290:	f7fe f994 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005294:	e027      	b.n	80052e6 <ProcessCmd+0x142>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8005296:	4b18      	ldr	r3, [pc, #96]	@ (80052f8 <ProcessCmd+0x154>)
 8005298:	21ba      	movs	r1, #186	@ 0xba
 800529a:	0018      	movs	r0, r3
 800529c:	f7fe f9d4 	bl	8003648 <ClearEEprom>
        break;
 80052a0:	e021      	b.n	80052e6 <ProcessCmd+0x142>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 80052a2:	2118      	movs	r1, #24
 80052a4:	187b      	adds	r3, r7, r1
 80052a6:	789b      	ldrb	r3, [r3, #2]
 80052a8:	021b      	lsls	r3, r3, #8
 80052aa:	b21a      	sxth	r2, r3
 80052ac:	187b      	adds	r3, r7, r1
 80052ae:	78db      	ldrb	r3, [r3, #3]
 80052b0:	b21b      	sxth	r3, r3
 80052b2:	4313      	orrs	r3, r2
 80052b4:	b21a      	sxth	r2, r3
 80052b6:	1dbb      	adds	r3, r7, #6
 80052b8:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 80052ba:	1dbb      	adds	r3, r7, #6
 80052bc:	881a      	ldrh	r2, [r3, #0]
 80052be:	23c0      	movs	r3, #192	@ 0xc0
 80052c0:	015b      	lsls	r3, r3, #5
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d207      	bcs.n	80052d6 <ProcessCmd+0x132>
                ClearEEprom(EEPromStartAddr, size);
 80052c6:	1dbb      	adds	r3, r7, #6
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	4a0b      	ldr	r2, [pc, #44]	@ (80052f8 <ProcessCmd+0x154>)
 80052cc:	0019      	movs	r1, r3
 80052ce:	0010      	movs	r0, r2
 80052d0:	f7fe f9ba 	bl	8003648 <ClearEEprom>
            break;
 80052d4:	e006      	b.n	80052e4 <ProcessCmd+0x140>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 80052d6:	23c0      	movs	r3, #192	@ 0xc0
 80052d8:	015b      	lsls	r3, r3, #5
 80052da:	4a07      	ldr	r2, [pc, #28]	@ (80052f8 <ProcessCmd+0x154>)
 80052dc:	0019      	movs	r1, r3
 80052de:	0010      	movs	r0, r2
 80052e0:	f7fe f9b2 	bl	8003648 <ClearEEprom>
            break;
 80052e4:	46c0      	nop			@ (mov r8, r8)
}
 80052e6:	46c0      	nop			@ (mov r8, r8)
 80052e8:	46bd      	mov	sp, r7
 80052ea:	b002      	add	sp, #8
 80052ec:	bcb0      	pop	{r4, r5, r7}
 80052ee:	bc08      	pop	{r3}
 80052f0:	b004      	add	sp, #16
 80052f2:	4718      	bx	r3
 80052f4:	0801b7c0 	.word	0x0801b7c0
 80052f8:	08080000 	.word	0x08080000
 80052fc:	0808000c 	.word	0x0808000c
 8005300:	08080018 	.word	0x08080018
 8005304:	08080024 	.word	0x08080024
 8005308:	08080030 	.word	0x08080030
 800530c:	0808003c 	.word	0x0808003c
 8005310:	08080048 	.word	0x08080048
 8005314:	08080090 	.word	0x08080090

08005318 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8005318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6039      	str	r1, [r7, #0]
 8005320:	0011      	movs	r1, r2
 8005322:	1dfb      	adds	r3, r7, #7
 8005324:	1c02      	adds	r2, r0, #0
 8005326:	701a      	strb	r2, [r3, #0]
 8005328:	1dbb      	adds	r3, r7, #6
 800532a:	1c0a      	adds	r2, r1, #0
 800532c:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 800532e:	2223      	movs	r2, #35	@ 0x23
 8005330:	4b20      	ldr	r3, [pc, #128]	@ (80053b4 <Create_Message+0x9c>)
 8005332:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8005334:	4b1f      	ldr	r3, [pc, #124]	@ (80053b4 <Create_Message+0x9c>)
 8005336:	1dfa      	adds	r2, r7, #7
 8005338:	7812      	ldrb	r2, [r2, #0]
 800533a:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 800533c:	4b1d      	ldr	r3, [pc, #116]	@ (80053b4 <Create_Message+0x9c>)
 800533e:	1dba      	adds	r2, r7, #6
 8005340:	7812      	ldrb	r2, [r2, #0]
 8005342:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8005344:	1dbb      	adds	r3, r7, #6
 8005346:	781a      	ldrb	r2, [r3, #0]
 8005348:	6839      	ldr	r1, [r7, #0]
 800534a:	4b1b      	ldr	r3, [pc, #108]	@ (80053b8 <Create_Message+0xa0>)
 800534c:	0018      	movs	r0, r3
 800534e:	f012 fd7b 	bl	8017e48 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8005352:	1dbb      	adds	r3, r7, #6
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	b29a      	uxth	r2, r3
 8005358:	250e      	movs	r5, #14
 800535a:	197b      	adds	r3, r7, r5
 800535c:	3203      	adds	r2, #3
 800535e:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8005360:	260c      	movs	r6, #12
 8005362:	19bc      	adds	r4, r7, r6
 8005364:	197b      	adds	r3, r7, r5
 8005366:	881a      	ldrh	r2, [r3, #0]
 8005368:	4b12      	ldr	r3, [pc, #72]	@ (80053b4 <Create_Message+0x9c>)
 800536a:	0011      	movs	r1, r2
 800536c:	0018      	movs	r0, r3
 800536e:	f000 f825 	bl	80053bc <CRC16_ARC>
 8005372:	0003      	movs	r3, r0
 8005374:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8005376:	0030      	movs	r0, r6
 8005378:	183b      	adds	r3, r7, r0
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	0a1b      	lsrs	r3, r3, #8
 800537e:	b29a      	uxth	r2, r3
 8005380:	197b      	adds	r3, r7, r5
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	b2d1      	uxtb	r1, r2
 8005386:	4a0b      	ldr	r2, [pc, #44]	@ (80053b4 <Create_Message+0x9c>)
 8005388:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 800538a:	197b      	adds	r3, r7, r5
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	3301      	adds	r3, #1
 8005390:	183a      	adds	r2, r7, r0
 8005392:	8812      	ldrh	r2, [r2, #0]
 8005394:	b2d1      	uxtb	r1, r2
 8005396:	4a07      	ldr	r2, [pc, #28]	@ (80053b4 <Create_Message+0x9c>)
 8005398:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 800539a:	197b      	adds	r3, r7, r5
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	3302      	adds	r3, #2
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	4b04      	ldr	r3, [pc, #16]	@ (80053b4 <Create_Message+0x9c>)
 80053a4:	0011      	movs	r1, r2
 80053a6:	0018      	movs	r0, r3
 80053a8:	f011 f9aa 	bl	8016700 <CDC_Transmit_FS>
}
 80053ac:	46c0      	nop			@ (mov r8, r8)
 80053ae:	46bd      	mov	sp, r7
 80053b0:	b005      	add	sp, #20
 80053b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053b4:	20000af4 	.word	0x20000af4
 80053b8:	20000af7 	.word	0x20000af7

080053bc <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	000a      	movs	r2, r1
 80053c6:	1cbb      	adds	r3, r7, #2
 80053c8:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 80053ca:	2316      	movs	r3, #22
 80053cc:	18fb      	adds	r3, r7, r3
 80053ce:	2200      	movs	r2, #0
 80053d0:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 80053d2:	2300      	movs	r3, #0
 80053d4:	613b      	str	r3, [r7, #16]
 80053d6:	e02e      	b.n	8005436 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	18d3      	adds	r3, r2, r3
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	0019      	movs	r1, r3
 80053e2:	2216      	movs	r2, #22
 80053e4:	18bb      	adds	r3, r7, r2
 80053e6:	18ba      	adds	r2, r7, r2
 80053e8:	8812      	ldrh	r2, [r2, #0]
 80053ea:	404a      	eors	r2, r1
 80053ec:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 80053ee:	2300      	movs	r3, #0
 80053f0:	60fb      	str	r3, [r7, #12]
 80053f2:	e01a      	b.n	800542a <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 80053f4:	2116      	movs	r1, #22
 80053f6:	187b      	adds	r3, r7, r1
 80053f8:	881b      	ldrh	r3, [r3, #0]
 80053fa:	2201      	movs	r2, #1
 80053fc:	4013      	ands	r3, r2
 80053fe:	d00b      	beq.n	8005418 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8005400:	187b      	adds	r3, r7, r1
 8005402:	187a      	adds	r2, r7, r1
 8005404:	8812      	ldrh	r2, [r2, #0]
 8005406:	0852      	lsrs	r2, r2, #1
 8005408:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 800540a:	187b      	adds	r3, r7, r1
 800540c:	187a      	adds	r2, r7, r1
 800540e:	8812      	ldrh	r2, [r2, #0]
 8005410:	490f      	ldr	r1, [pc, #60]	@ (8005450 <CRC16_ARC+0x94>)
 8005412:	404a      	eors	r2, r1
 8005414:	801a      	strh	r2, [r3, #0]
 8005416:	e005      	b.n	8005424 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8005418:	2216      	movs	r2, #22
 800541a:	18bb      	adds	r3, r7, r2
 800541c:	18ba      	adds	r2, r7, r2
 800541e:	8812      	ldrh	r2, [r2, #0]
 8005420:	0852      	lsrs	r2, r2, #1
 8005422:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	3301      	adds	r3, #1
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2b07      	cmp	r3, #7
 800542e:	dde1      	ble.n	80053f4 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	3301      	adds	r3, #1
 8005434:	613b      	str	r3, [r7, #16]
 8005436:	1cbb      	adds	r3, r7, #2
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	429a      	cmp	r2, r3
 800543e:	dbcb      	blt.n	80053d8 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8005440:	2316      	movs	r3, #22
 8005442:	18fb      	adds	r3, r7, r3
 8005444:	881b      	ldrh	r3, [r3, #0]
}
 8005446:	0018      	movs	r0, r3
 8005448:	46bd      	mov	sp, r7
 800544a:	b006      	add	sp, #24
 800544c:	bd80      	pop	{r7, pc}
 800544e:	46c0      	nop			@ (mov r8, r8)
 8005450:	ffffa001 	.word	0xffffa001

08005454 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_14;
 8005458:	4b26      	ldr	r3, [pc, #152]	@ (80054f4 <ReadBatteryVoltage+0xa0>)
 800545a:	4a27      	ldr	r2, [pc, #156]	@ (80054f8 <ReadBatteryVoltage+0xa4>)
 800545c:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800545e:	4b25      	ldr	r3, [pc, #148]	@ (80054f4 <ReadBatteryVoltage+0xa0>)
 8005460:	2280      	movs	r2, #128	@ 0x80
 8005462:	0152      	lsls	r2, r2, #5
 8005464:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005466:	4a23      	ldr	r2, [pc, #140]	@ (80054f4 <ReadBatteryVoltage+0xa0>)
 8005468:	4b24      	ldr	r3, [pc, #144]	@ (80054fc <ReadBatteryVoltage+0xa8>)
 800546a:	0011      	movs	r1, r2
 800546c:	0018      	movs	r0, r3
 800546e:	f004 ff13 	bl	800a298 <HAL_ADC_ConfigChannel>
 8005472:	1e03      	subs	r3, r0, #0
 8005474:	d001      	beq.n	800547a <ReadBatteryVoltage+0x26>
   {
     Error_Handler();
 8005476:	f000 ff33 	bl	80062e0 <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 800547a:	4b20      	ldr	r3, [pc, #128]	@ (80054fc <ReadBatteryVoltage+0xa8>)
 800547c:	0018      	movs	r0, r3
 800547e:	f004 fe0f 	bl	800a0a0 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 8005482:	4b1e      	ldr	r3, [pc, #120]	@ (80054fc <ReadBatteryVoltage+0xa8>)
 8005484:	2101      	movs	r1, #1
 8005486:	0018      	movs	r0, r3
 8005488:	f004 fe5e 	bl	800a148 <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 800548c:	4b1b      	ldr	r3, [pc, #108]	@ (80054fc <ReadBatteryVoltage+0xa8>)
 800548e:	0018      	movs	r0, r3
 8005490:	f004 fef6 	bl	800a280 <HAL_ADC_GetValue>
 8005494:	0002      	movs	r2, r0
 8005496:	4b1a      	ldr	r3, [pc, #104]	@ (8005500 <ReadBatteryVoltage+0xac>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4353      	muls	r3, r2
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	4919      	ldr	r1, [pc, #100]	@ (8005504 <ReadBatteryVoltage+0xb0>)
 80054a0:	0018      	movs	r0, r3
 80054a2:	f7fa fe4d 	bl	8000140 <__udivsi3>
 80054a6:	0003      	movs	r3, r0
 80054a8:	001a      	movs	r2, r3
 80054aa:	4b17      	ldr	r3, [pc, #92]	@ (8005508 <ReadBatteryVoltage+0xb4>)
 80054ac:	601a      	str	r2, [r3, #0]
   trueValue = (float)value/1000.0;
 80054ae:	4b16      	ldr	r3, [pc, #88]	@ (8005508 <ReadBatteryVoltage+0xb4>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	0018      	movs	r0, r3
 80054b4:	f7fc f856 	bl	8001564 <__aeabi_ui2f>
 80054b8:	1c03      	adds	r3, r0, #0
 80054ba:	4914      	ldr	r1, [pc, #80]	@ (800550c <ReadBatteryVoltage+0xb8>)
 80054bc:	1c18      	adds	r0, r3, #0
 80054be:	f7fb fb07 	bl	8000ad0 <__aeabi_fdiv>
 80054c2:	1c03      	adds	r3, r0, #0
 80054c4:	1c1a      	adds	r2, r3, #0
 80054c6:	4b12      	ldr	r3, [pc, #72]	@ (8005510 <ReadBatteryVoltage+0xbc>)
 80054c8:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_14;
 80054ca:	4b0a      	ldr	r3, [pc, #40]	@ (80054f4 <ReadBatteryVoltage+0xa0>)
 80054cc:	4a0a      	ldr	r2, [pc, #40]	@ (80054f8 <ReadBatteryVoltage+0xa4>)
 80054ce:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 80054d0:	4b08      	ldr	r3, [pc, #32]	@ (80054f4 <ReadBatteryVoltage+0xa0>)
 80054d2:	4a10      	ldr	r2, [pc, #64]	@ (8005514 <ReadBatteryVoltage+0xc0>)
 80054d4:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80054d6:	4a07      	ldr	r2, [pc, #28]	@ (80054f4 <ReadBatteryVoltage+0xa0>)
 80054d8:	4b08      	ldr	r3, [pc, #32]	@ (80054fc <ReadBatteryVoltage+0xa8>)
 80054da:	0011      	movs	r1, r2
 80054dc:	0018      	movs	r0, r3
 80054de:	f004 fedb 	bl	800a298 <HAL_ADC_ConfigChannel>
 80054e2:	1e03      	subs	r3, r0, #0
 80054e4:	d001      	beq.n	80054ea <ReadBatteryVoltage+0x96>
   {
     Error_Handler();
 80054e6:	f000 fefb 	bl	80062e0 <Error_Handler>
   }
   return trueValue;
 80054ea:	4b09      	ldr	r3, [pc, #36]	@ (8005510 <ReadBatteryVoltage+0xbc>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 }
 80054ee:	1c18      	adds	r0, r3, #0
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	20000bfc 	.word	0x20000bfc
 80054f8:	38004000 	.word	0x38004000
 80054fc:	20000c14 	.word	0x20000c14
 8005500:	2000005c 	.word	0x2000005c
 8005504:	00000fff 	.word	0x00000fff
 8005508:	20000c04 	.word	0x20000c04
 800550c:	447a0000 	.word	0x447a0000
 8005510:	20000c08 	.word	0x20000c08
 8005514:	00001001 	.word	0x00001001

08005518 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_15;
 800551c:	4b27      	ldr	r3, [pc, #156]	@ (80055bc <ReadSolarVoltage+0xa4>)
 800551e:	4a28      	ldr	r2, [pc, #160]	@ (80055c0 <ReadSolarVoltage+0xa8>)
 8005520:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005522:	4b26      	ldr	r3, [pc, #152]	@ (80055bc <ReadSolarVoltage+0xa4>)
 8005524:	2280      	movs	r2, #128	@ 0x80
 8005526:	0152      	lsls	r2, r2, #5
 8005528:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800552a:	4a24      	ldr	r2, [pc, #144]	@ (80055bc <ReadSolarVoltage+0xa4>)
 800552c:	4b25      	ldr	r3, [pc, #148]	@ (80055c4 <ReadSolarVoltage+0xac>)
 800552e:	0011      	movs	r1, r2
 8005530:	0018      	movs	r0, r3
 8005532:	f004 feb1 	bl	800a298 <HAL_ADC_ConfigChannel>
 8005536:	1e03      	subs	r3, r0, #0
 8005538:	d001      	beq.n	800553e <ReadSolarVoltage+0x26>
   {
     Error_Handler();
 800553a:	f000 fed1 	bl	80062e0 <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 800553e:	4b21      	ldr	r3, [pc, #132]	@ (80055c4 <ReadSolarVoltage+0xac>)
 8005540:	0018      	movs	r0, r3
 8005542:	f004 fdad 	bl	800a0a0 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 8005546:	4b1f      	ldr	r3, [pc, #124]	@ (80055c4 <ReadSolarVoltage+0xac>)
 8005548:	2101      	movs	r1, #1
 800554a:	0018      	movs	r0, r3
 800554c:	f004 fdfc 	bl	800a148 <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8005550:	4b1c      	ldr	r3, [pc, #112]	@ (80055c4 <ReadSolarVoltage+0xac>)
 8005552:	0018      	movs	r0, r3
 8005554:	f004 fe94 	bl	800a280 <HAL_ADC_GetValue>
 8005558:	0002      	movs	r2, r0
 800555a:	4b1b      	ldr	r3, [pc, #108]	@ (80055c8 <ReadSolarVoltage+0xb0>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	435a      	muls	r2, r3
 8005560:	0013      	movs	r3, r2
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	189b      	adds	r3, r3, r2
 8005566:	4919      	ldr	r1, [pc, #100]	@ (80055cc <ReadSolarVoltage+0xb4>)
 8005568:	0018      	movs	r0, r3
 800556a:	f7fa fde9 	bl	8000140 <__udivsi3>
 800556e:	0003      	movs	r3, r0
 8005570:	001a      	movs	r2, r3
 8005572:	4b17      	ldr	r3, [pc, #92]	@ (80055d0 <ReadSolarVoltage+0xb8>)
 8005574:	601a      	str	r2, [r3, #0]
   trueValue = (float)value / 1000.0;
 8005576:	4b16      	ldr	r3, [pc, #88]	@ (80055d0 <ReadSolarVoltage+0xb8>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	0018      	movs	r0, r3
 800557c:	f7fb fff2 	bl	8001564 <__aeabi_ui2f>
 8005580:	1c03      	adds	r3, r0, #0
 8005582:	4914      	ldr	r1, [pc, #80]	@ (80055d4 <ReadSolarVoltage+0xbc>)
 8005584:	1c18      	adds	r0, r3, #0
 8005586:	f7fb faa3 	bl	8000ad0 <__aeabi_fdiv>
 800558a:	1c03      	adds	r3, r0, #0
 800558c:	1c1a      	adds	r2, r3, #0
 800558e:	4b12      	ldr	r3, [pc, #72]	@ (80055d8 <ReadSolarVoltage+0xc0>)
 8005590:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_15;
 8005592:	4b0a      	ldr	r3, [pc, #40]	@ (80055bc <ReadSolarVoltage+0xa4>)
 8005594:	4a0a      	ldr	r2, [pc, #40]	@ (80055c0 <ReadSolarVoltage+0xa8>)
 8005596:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 8005598:	4b08      	ldr	r3, [pc, #32]	@ (80055bc <ReadSolarVoltage+0xa4>)
 800559a:	4a10      	ldr	r2, [pc, #64]	@ (80055dc <ReadSolarVoltage+0xc4>)
 800559c:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800559e:	4a07      	ldr	r2, [pc, #28]	@ (80055bc <ReadSolarVoltage+0xa4>)
 80055a0:	4b08      	ldr	r3, [pc, #32]	@ (80055c4 <ReadSolarVoltage+0xac>)
 80055a2:	0011      	movs	r1, r2
 80055a4:	0018      	movs	r0, r3
 80055a6:	f004 fe77 	bl	800a298 <HAL_ADC_ConfigChannel>
 80055aa:	1e03      	subs	r3, r0, #0
 80055ac:	d001      	beq.n	80055b2 <ReadSolarVoltage+0x9a>
   {
     Error_Handler();
 80055ae:	f000 fe97 	bl	80062e0 <Error_Handler>
   }
   return trueValue;
 80055b2:	4b09      	ldr	r3, [pc, #36]	@ (80055d8 <ReadSolarVoltage+0xc0>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 }
 80055b6:	1c18      	adds	r0, r3, #0
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	20000bfc 	.word	0x20000bfc
 80055c0:	3c008000 	.word	0x3c008000
 80055c4:	20000c14 	.word	0x20000c14
 80055c8:	2000005c 	.word	0x2000005c
 80055cc:	00000fff 	.word	0x00000fff
 80055d0:	20000c0c 	.word	0x20000c0c
 80055d4:	447a0000 	.word	0x447a0000
 80055d8:	20000c10 	.word	0x20000c10
 80055dc:	00001001 	.word	0x00001001

080055e0 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool   Check_USB_PowerOn(void){
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
return   (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 80055e4:	23a0      	movs	r3, #160	@ 0xa0
 80055e6:	05db      	lsls	r3, r3, #23
 80055e8:	2180      	movs	r1, #128	@ 0x80
 80055ea:	0018      	movs	r0, r3
 80055ec:	f005 ff1a 	bl	800b424 <HAL_GPIO_ReadPin>
 80055f0:	0003      	movs	r3, r0
 80055f2:	1e5a      	subs	r2, r3, #1
 80055f4:	4193      	sbcs	r3, r2
 80055f6:	b2db      	uxtb	r3, r3
}
 80055f8:	0018      	movs	r0, r3
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 80055fe:	b580      	push	{r7, lr}
 8005600:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8005602:	2380      	movs	r3, #128	@ 0x80
 8005604:	021a      	lsls	r2, r3, #8
 8005606:	23a0      	movs	r3, #160	@ 0xa0
 8005608:	05db      	lsls	r3, r3, #23
 800560a:	0011      	movs	r1, r2
 800560c:	0018      	movs	r0, r3
 800560e:	f005 ff09 	bl	800b424 <HAL_GPIO_ReadPin>
 8005612:	0003      	movs	r3, r0
 8005614:	1e5a      	subs	r2, r3, #1
 8005616:	4193      	sbcs	r3, r2
 8005618:	b2db      	uxtb	r3, r3
}
 800561a:	0018      	movs	r0, r3
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8005624:	4b05      	ldr	r3, [pc, #20]	@ (800563c <UserButton_Pressed+0x1c>)
 8005626:	2104      	movs	r1, #4
 8005628:	0018      	movs	r0, r3
 800562a:	f005 fefb 	bl	800b424 <HAL_GPIO_ReadPin>
 800562e:	0003      	movs	r3, r0
 8005630:	425a      	negs	r2, r3
 8005632:	4153      	adcs	r3, r2
 8005634:	b2db      	uxtb	r3, r3
}
 8005636:	0018      	movs	r0, r3
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	50000c00 	.word	0x50000c00

08005640 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005646:	003b      	movs	r3, r7
 8005648:	0018      	movs	r0, r3
 800564a:	2308      	movs	r3, #8
 800564c:	001a      	movs	r2, r3
 800564e:	2100      	movs	r1, #0
 8005650:	f012 fb30 	bl	8017cb4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8005654:	4b30      	ldr	r3, [pc, #192]	@ (8005718 <MX_ADC_Init+0xd8>)
 8005656:	4a31      	ldr	r2, [pc, #196]	@ (800571c <MX_ADC_Init+0xdc>)
 8005658:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800565a:	4b2f      	ldr	r3, [pc, #188]	@ (8005718 <MX_ADC_Init+0xd8>)
 800565c:	2200      	movs	r2, #0
 800565e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8005660:	4b2d      	ldr	r3, [pc, #180]	@ (8005718 <MX_ADC_Init+0xd8>)
 8005662:	22c0      	movs	r2, #192	@ 0xc0
 8005664:	0612      	lsls	r2, r2, #24
 8005666:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8005668:	4b2b      	ldr	r3, [pc, #172]	@ (8005718 <MX_ADC_Init+0xd8>)
 800566a:	2200      	movs	r2, #0
 800566c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800566e:	4b2a      	ldr	r3, [pc, #168]	@ (8005718 <MX_ADC_Init+0xd8>)
 8005670:	2200      	movs	r2, #0
 8005672:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8005674:	4b28      	ldr	r3, [pc, #160]	@ (8005718 <MX_ADC_Init+0xd8>)
 8005676:	2201      	movs	r2, #1
 8005678:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800567a:	4b27      	ldr	r3, [pc, #156]	@ (8005718 <MX_ADC_Init+0xd8>)
 800567c:	2200      	movs	r2, #0
 800567e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8005680:	4b25      	ldr	r3, [pc, #148]	@ (8005718 <MX_ADC_Init+0xd8>)
 8005682:	2220      	movs	r2, #32
 8005684:	2100      	movs	r1, #0
 8005686:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8005688:	4b23      	ldr	r3, [pc, #140]	@ (8005718 <MX_ADC_Init+0xd8>)
 800568a:	2221      	movs	r2, #33	@ 0x21
 800568c:	2101      	movs	r1, #1
 800568e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005690:	4b21      	ldr	r3, [pc, #132]	@ (8005718 <MX_ADC_Init+0xd8>)
 8005692:	2200      	movs	r2, #0
 8005694:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005696:	4b20      	ldr	r3, [pc, #128]	@ (8005718 <MX_ADC_Init+0xd8>)
 8005698:	22c2      	movs	r2, #194	@ 0xc2
 800569a:	32ff      	adds	r2, #255	@ 0xff
 800569c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800569e:	4b1e      	ldr	r3, [pc, #120]	@ (8005718 <MX_ADC_Init+0xd8>)
 80056a0:	222c      	movs	r2, #44	@ 0x2c
 80056a2:	2100      	movs	r1, #0
 80056a4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80056a6:	4b1c      	ldr	r3, [pc, #112]	@ (8005718 <MX_ADC_Init+0xd8>)
 80056a8:	2204      	movs	r2, #4
 80056aa:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80056ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005718 <MX_ADC_Init+0xd8>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80056b2:	4b19      	ldr	r3, [pc, #100]	@ (8005718 <MX_ADC_Init+0xd8>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80056b8:	4b17      	ldr	r3, [pc, #92]	@ (8005718 <MX_ADC_Init+0xd8>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80056be:	4b16      	ldr	r3, [pc, #88]	@ (8005718 <MX_ADC_Init+0xd8>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80056c4:	4b14      	ldr	r3, [pc, #80]	@ (8005718 <MX_ADC_Init+0xd8>)
 80056c6:	0018      	movs	r0, r3
 80056c8:	f004 fb76 	bl	8009db8 <HAL_ADC_Init>
 80056cc:	1e03      	subs	r3, r0, #0
 80056ce:	d001      	beq.n	80056d4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80056d0:	f000 fe06 	bl	80062e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80056d4:	003b      	movs	r3, r7
 80056d6:	4a12      	ldr	r2, [pc, #72]	@ (8005720 <MX_ADC_Init+0xe0>)
 80056d8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80056da:	003b      	movs	r3, r7
 80056dc:	2280      	movs	r2, #128	@ 0x80
 80056de:	0152      	lsls	r2, r2, #5
 80056e0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80056e2:	003a      	movs	r2, r7
 80056e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005718 <MX_ADC_Init+0xd8>)
 80056e6:	0011      	movs	r1, r2
 80056e8:	0018      	movs	r0, r3
 80056ea:	f004 fdd5 	bl	800a298 <HAL_ADC_ConfigChannel>
 80056ee:	1e03      	subs	r3, r0, #0
 80056f0:	d001      	beq.n	80056f6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80056f2:	f000 fdf5 	bl	80062e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80056f6:	003b      	movs	r3, r7
 80056f8:	4a0a      	ldr	r2, [pc, #40]	@ (8005724 <MX_ADC_Init+0xe4>)
 80056fa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80056fc:	003a      	movs	r2, r7
 80056fe:	4b06      	ldr	r3, [pc, #24]	@ (8005718 <MX_ADC_Init+0xd8>)
 8005700:	0011      	movs	r1, r2
 8005702:	0018      	movs	r0, r3
 8005704:	f004 fdc8 	bl	800a298 <HAL_ADC_ConfigChannel>
 8005708:	1e03      	subs	r3, r0, #0
 800570a:	d001      	beq.n	8005710 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800570c:	f000 fde8 	bl	80062e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8005710:	46c0      	nop			@ (mov r8, r8)
 8005712:	46bd      	mov	sp, r7
 8005714:	b002      	add	sp, #8
 8005716:	bd80      	pop	{r7, pc}
 8005718:	20000c14 	.word	0x20000c14
 800571c:	40012400 	.word	0x40012400
 8005720:	38004000 	.word	0x38004000
 8005724:	3c008000 	.word	0x3c008000

08005728 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005728:	b590      	push	{r4, r7, lr}
 800572a:	b089      	sub	sp, #36	@ 0x24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005730:	240c      	movs	r4, #12
 8005732:	193b      	adds	r3, r7, r4
 8005734:	0018      	movs	r0, r3
 8005736:	2314      	movs	r3, #20
 8005738:	001a      	movs	r2, r3
 800573a:	2100      	movs	r1, #0
 800573c:	f012 faba 	bl	8017cb4 <memset>
  if(adcHandle->Instance==ADC1)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a14      	ldr	r2, [pc, #80]	@ (8005798 <HAL_ADC_MspInit+0x70>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d121      	bne.n	800578e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800574a:	4b14      	ldr	r3, [pc, #80]	@ (800579c <HAL_ADC_MspInit+0x74>)
 800574c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800574e:	4b13      	ldr	r3, [pc, #76]	@ (800579c <HAL_ADC_MspInit+0x74>)
 8005750:	2180      	movs	r1, #128	@ 0x80
 8005752:	0089      	lsls	r1, r1, #2
 8005754:	430a      	orrs	r2, r1
 8005756:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005758:	4b10      	ldr	r3, [pc, #64]	@ (800579c <HAL_ADC_MspInit+0x74>)
 800575a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800575c:	4b0f      	ldr	r3, [pc, #60]	@ (800579c <HAL_ADC_MspInit+0x74>)
 800575e:	2104      	movs	r1, #4
 8005760:	430a      	orrs	r2, r1
 8005762:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005764:	4b0d      	ldr	r3, [pc, #52]	@ (800579c <HAL_ADC_MspInit+0x74>)
 8005766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005768:	2204      	movs	r2, #4
 800576a:	4013      	ands	r3, r2
 800576c:	60bb      	str	r3, [r7, #8]
 800576e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8005770:	193b      	adds	r3, r7, r4
 8005772:	2230      	movs	r2, #48	@ 0x30
 8005774:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005776:	193b      	adds	r3, r7, r4
 8005778:	2203      	movs	r2, #3
 800577a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800577c:	193b      	adds	r3, r7, r4
 800577e:	2200      	movs	r2, #0
 8005780:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005782:	193b      	adds	r3, r7, r4
 8005784:	4a06      	ldr	r2, [pc, #24]	@ (80057a0 <HAL_ADC_MspInit+0x78>)
 8005786:	0019      	movs	r1, r3
 8005788:	0010      	movs	r0, r2
 800578a:	f005 fbeb 	bl	800af64 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800578e:	46c0      	nop			@ (mov r8, r8)
 8005790:	46bd      	mov	sp, r7
 8005792:	b009      	add	sp, #36	@ 0x24
 8005794:	bd90      	pop	{r4, r7, pc}
 8005796:	46c0      	nop			@ (mov r8, r8)
 8005798:	40012400 	.word	0x40012400
 800579c:	40021000 	.word	0x40021000
 80057a0:	50000800 	.word	0x50000800

080057a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80057aa:	4b10      	ldr	r3, [pc, #64]	@ (80057ec <MX_DMA_Init+0x48>)
 80057ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057ae:	4b0f      	ldr	r3, [pc, #60]	@ (80057ec <MX_DMA_Init+0x48>)
 80057b0:	2101      	movs	r1, #1
 80057b2:	430a      	orrs	r2, r1
 80057b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80057b6:	4b0d      	ldr	r3, [pc, #52]	@ (80057ec <MX_DMA_Init+0x48>)
 80057b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ba:	2201      	movs	r2, #1
 80057bc:	4013      	ands	r3, r2
 80057be:	607b      	str	r3, [r7, #4]
 80057c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80057c2:	2200      	movs	r2, #0
 80057c4:	2100      	movs	r1, #0
 80057c6:	200a      	movs	r0, #10
 80057c8:	f004 ff20 	bl	800a60c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80057cc:	200a      	movs	r0, #10
 80057ce:	f004 ff32 	bl	800a636 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 80057d2:	2200      	movs	r2, #0
 80057d4:	2103      	movs	r1, #3
 80057d6:	200b      	movs	r0, #11
 80057d8:	f004 ff18 	bl	800a60c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80057dc:	200b      	movs	r0, #11
 80057de:	f004 ff2a 	bl	800a636 <HAL_NVIC_EnableIRQ>

}
 80057e2:	46c0      	nop			@ (mov r8, r8)
 80057e4:	46bd      	mov	sp, r7
 80057e6:	b002      	add	sp, #8
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	46c0      	nop			@ (mov r8, r8)
 80057ec:	40021000 	.word	0x40021000

080057f0 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
 80057fc:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 80057fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005830 <Gadget_Init+0x40>)
 8005800:	6818      	ldr	r0, [r3, #0]
 8005802:	f001 f8af 	bl	8006964 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	68b9      	ldr	r1, [r7, #8]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	0018      	movs	r0, r3
 800580e:	f000 fddb 	bl	80063c8 <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	0018      	movs	r0, r3
 8005816:	f7fd ff9d 	bl	8003754 <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 800581a:	4a06      	ldr	r2, [pc, #24]	@ (8005834 <Gadget_Init+0x44>)
 800581c:	4b06      	ldr	r3, [pc, #24]	@ (8005838 <Gadget_Init+0x48>)
 800581e:	0019      	movs	r1, r3
 8005820:	2003      	movs	r0, #3
 8005822:	f003 fee1 	bl	80095e8 <CreateLine>
}
 8005826:	46c0      	nop			@ (mov r8, r8)
 8005828:	46bd      	mov	sp, r7
 800582a:	b004      	add	sp, #16
 800582c:	bd80      	pop	{r7, pc}
 800582e:	46c0      	nop			@ (mov r8, r8)
 8005830:	20000060 	.word	0x20000060
 8005834:	0801afa4 	.word	0x0801afa4
 8005838:	0801afb8 	.word	0x0801afb8

0800583c <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 800583c:	b580      	push	{r7, lr}
 800583e:	af00      	add	r7, sp, #0
  Meas_Test();
 8005840:	f000 ff02 	bl	8006648 <Meas_Test>
}
 8005844:	46c0      	nop			@ (mov r8, r8)
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <UpkeepGadget>:

void UpkeepGadget() {
 800584a:	b580      	push	{r7, lr}
 800584c:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  Meas_Upkeep();
 800584e:	f000 fff3 	bl	8006838 <Meas_Upkeep>
  Mic_Upkeep();
 8005852:	f000 ffa5 	bl	80067a0 <Mic_Upkeep>
  status_Upkeep();
 8005856:	f003 f9dd 	bl	8008c14 <status_Upkeep>
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 800585a:	46c0      	nop			@ (mov r8, r8)
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	0011      	movs	r1, r2
 8005870:	0018      	movs	r0, r3
 8005872:	f002 fc49 	bl	8008108 <SGP_Init>
}
 8005876:	46c0      	nop			@ (mov r8, r8)
 8005878:	46bd      	mov	sp, r7
 800587a:	b002      	add	sp, #8
 800587c:	bd80      	pop	{r7, pc}

0800587e <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 800587e:	b580      	push	{r7, lr}
 8005880:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 8005882:	f002 fc5b 	bl	800813c <SGP_StartMeasurement>
}
 8005886:	46c0      	nop			@ (mov r8, r8)
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	0018      	movs	r0, r3
 8005898:	f002 fcc0 	bl	800821c <SGP_GetMeasurementValues>
 800589c:	0003      	movs	r3, r0
}
 800589e:	0018      	movs	r0, r3
 80058a0:	46bd      	mov	sp, r7
 80058a2:	b002      	add	sp, #8
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 80058a6:	b580      	push	{r7, lr}
 80058a8:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 80058aa:	f002 fed5 	bl	8008658 <SGP_DeviceConnected>
 80058ae:	0003      	movs	r3, r0
}
 80058b0:	0018      	movs	r0, r3
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80058b8:	b590      	push	{r4, r7, lr}
 80058ba:	b08b      	sub	sp, #44	@ 0x2c
 80058bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058be:	2414      	movs	r4, #20
 80058c0:	193b      	adds	r3, r7, r4
 80058c2:	0018      	movs	r0, r3
 80058c4:	2314      	movs	r3, #20
 80058c6:	001a      	movs	r2, r3
 80058c8:	2100      	movs	r1, #0
 80058ca:	f012 f9f3 	bl	8017cb4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80058ce:	4b7c      	ldr	r3, [pc, #496]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 80058d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d2:	4b7b      	ldr	r3, [pc, #492]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 80058d4:	2104      	movs	r1, #4
 80058d6:	430a      	orrs	r2, r1
 80058d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80058da:	4b79      	ldr	r3, [pc, #484]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 80058dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058de:	2204      	movs	r2, #4
 80058e0:	4013      	ands	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]
 80058e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80058e6:	4b76      	ldr	r3, [pc, #472]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 80058e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ea:	4b75      	ldr	r3, [pc, #468]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 80058ec:	2180      	movs	r1, #128	@ 0x80
 80058ee:	430a      	orrs	r2, r1
 80058f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80058f2:	4b73      	ldr	r3, [pc, #460]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 80058f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f6:	2280      	movs	r2, #128	@ 0x80
 80058f8:	4013      	ands	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80058fe:	4b70      	ldr	r3, [pc, #448]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 8005900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005902:	4b6f      	ldr	r3, [pc, #444]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 8005904:	2101      	movs	r1, #1
 8005906:	430a      	orrs	r2, r1
 8005908:	62da      	str	r2, [r3, #44]	@ 0x2c
 800590a:	4b6d      	ldr	r3, [pc, #436]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 800590c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800590e:	2201      	movs	r2, #1
 8005910:	4013      	ands	r3, r2
 8005912:	60bb      	str	r3, [r7, #8]
 8005914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005916:	4b6a      	ldr	r3, [pc, #424]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 8005918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800591a:	4b69      	ldr	r3, [pc, #420]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 800591c:	2102      	movs	r1, #2
 800591e:	430a      	orrs	r2, r1
 8005920:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005922:	4b67      	ldr	r3, [pc, #412]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 8005924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005926:	2202      	movs	r2, #2
 8005928:	4013      	ands	r3, r2
 800592a:	607b      	str	r3, [r7, #4]
 800592c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800592e:	4b64      	ldr	r3, [pc, #400]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 8005930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005932:	4b63      	ldr	r3, [pc, #396]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 8005934:	2108      	movs	r1, #8
 8005936:	430a      	orrs	r2, r1
 8005938:	62da      	str	r2, [r3, #44]	@ 0x2c
 800593a:	4b61      	ldr	r3, [pc, #388]	@ (8005ac0 <MX_GPIO_Init+0x208>)
 800593c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593e:	2208      	movs	r2, #8
 8005940:	4013      	ands	r3, r2
 8005942:	603b      	str	r3, [r7, #0]
 8005944:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8005946:	4b5f      	ldr	r3, [pc, #380]	@ (8005ac4 <MX_GPIO_Init+0x20c>)
 8005948:	2201      	movs	r2, #1
 800594a:	2101      	movs	r1, #1
 800594c:	0018      	movs	r0, r3
 800594e:	f005 fd86 	bl	800b45e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8005952:	4b5c      	ldr	r3, [pc, #368]	@ (8005ac4 <MX_GPIO_Init+0x20c>)
 8005954:	2200      	movs	r2, #0
 8005956:	2102      	movs	r1, #2
 8005958:	0018      	movs	r0, r3
 800595a:	f005 fd80 	bl	800b45e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 800595e:	495a      	ldr	r1, [pc, #360]	@ (8005ac8 <MX_GPIO_Init+0x210>)
 8005960:	4b5a      	ldr	r3, [pc, #360]	@ (8005acc <MX_GPIO_Init+0x214>)
 8005962:	2201      	movs	r2, #1
 8005964:	0018      	movs	r0, r3
 8005966:	f005 fd7a 	bl	800b45e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800596a:	2380      	movs	r3, #128	@ 0x80
 800596c:	011b      	lsls	r3, r3, #4
 800596e:	4858      	ldr	r0, [pc, #352]	@ (8005ad0 <MX_GPIO_Init+0x218>)
 8005970:	2201      	movs	r2, #1
 8005972:	0019      	movs	r1, r3
 8005974:	f005 fd73 	bl	800b45e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8005978:	2380      	movs	r3, #128	@ 0x80
 800597a:	015b      	lsls	r3, r3, #5
 800597c:	4854      	ldr	r0, [pc, #336]	@ (8005ad0 <MX_GPIO_Init+0x218>)
 800597e:	2200      	movs	r2, #0
 8005980:	0019      	movs	r1, r3
 8005982:	f005 fd6c 	bl	800b45e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 8005986:	193b      	adds	r3, r7, r4
 8005988:	4a52      	ldr	r2, [pc, #328]	@ (8005ad4 <MX_GPIO_Init+0x21c>)
 800598a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800598c:	193b      	adds	r3, r7, r4
 800598e:	2203      	movs	r2, #3
 8005990:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005992:	193b      	adds	r3, r7, r4
 8005994:	2200      	movs	r2, #0
 8005996:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005998:	193b      	adds	r3, r7, r4
 800599a:	4a4d      	ldr	r2, [pc, #308]	@ (8005ad0 <MX_GPIO_Init+0x218>)
 800599c:	0019      	movs	r1, r3
 800599e:	0010      	movs	r0, r2
 80059a0:	f005 fae0 	bl	800af64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 80059a4:	193b      	adds	r3, r7, r4
 80059a6:	2203      	movs	r2, #3
 80059a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059aa:	193b      	adds	r3, r7, r4
 80059ac:	2201      	movs	r2, #1
 80059ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059b0:	193b      	adds	r3, r7, r4
 80059b2:	2200      	movs	r2, #0
 80059b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059b6:	193b      	adds	r3, r7, r4
 80059b8:	2200      	movs	r2, #0
 80059ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80059bc:	193b      	adds	r3, r7, r4
 80059be:	4a41      	ldr	r2, [pc, #260]	@ (8005ac4 <MX_GPIO_Init+0x20c>)
 80059c0:	0019      	movs	r1, r3
 80059c2:	0010      	movs	r0, r2
 80059c4:	f005 face 	bl	800af64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80059c8:	193b      	adds	r3, r7, r4
 80059ca:	2270      	movs	r2, #112	@ 0x70
 80059cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80059ce:	193b      	adds	r3, r7, r4
 80059d0:	2203      	movs	r2, #3
 80059d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059d4:	193b      	adds	r3, r7, r4
 80059d6:	2200      	movs	r2, #0
 80059d8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059da:	193a      	adds	r2, r7, r4
 80059dc:	23a0      	movs	r3, #160	@ 0xa0
 80059de:	05db      	lsls	r3, r3, #23
 80059e0:	0011      	movs	r1, r2
 80059e2:	0018      	movs	r0, r3
 80059e4:	f005 fabe 	bl	800af64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin|BOOT0_Pin;
 80059e8:	193b      	adds	r3, r7, r4
 80059ea:	4a3b      	ldr	r2, [pc, #236]	@ (8005ad8 <MX_GPIO_Init+0x220>)
 80059ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80059ee:	193b      	adds	r3, r7, r4
 80059f0:	2200      	movs	r2, #0
 80059f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059f4:	193b      	adds	r3, r7, r4
 80059f6:	2200      	movs	r2, #0
 80059f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059fa:	193a      	adds	r2, r7, r4
 80059fc:	23a0      	movs	r3, #160	@ 0xa0
 80059fe:	05db      	lsls	r3, r3, #23
 8005a00:	0011      	movs	r1, r2
 8005a02:	0018      	movs	r0, r3
 8005a04:	f005 faae 	bl	800af64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8005a08:	193b      	adds	r3, r7, r4
 8005a0a:	4a2f      	ldr	r2, [pc, #188]	@ (8005ac8 <MX_GPIO_Init+0x210>)
 8005a0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a0e:	193b      	adds	r3, r7, r4
 8005a10:	2201      	movs	r2, #1
 8005a12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a14:	193b      	adds	r3, r7, r4
 8005a16:	2200      	movs	r2, #0
 8005a18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a1a:	193b      	adds	r3, r7, r4
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a20:	193b      	adds	r3, r7, r4
 8005a22:	4a2a      	ldr	r2, [pc, #168]	@ (8005acc <MX_GPIO_Init+0x214>)
 8005a24:	0019      	movs	r1, r3
 8005a26:	0010      	movs	r0, r2
 8005a28:	f005 fa9c 	bl	800af64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8005a2c:	193b      	adds	r3, r7, r4
 8005a2e:	4a2b      	ldr	r2, [pc, #172]	@ (8005adc <MX_GPIO_Init+0x224>)
 8005a30:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005a32:	193b      	adds	r3, r7, r4
 8005a34:	2203      	movs	r2, #3
 8005a36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a38:	193b      	adds	r3, r7, r4
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a3e:	193b      	adds	r3, r7, r4
 8005a40:	4a22      	ldr	r2, [pc, #136]	@ (8005acc <MX_GPIO_Init+0x214>)
 8005a42:	0019      	movs	r1, r3
 8005a44:	0010      	movs	r0, r2
 8005a46:	f005 fa8d 	bl	800af64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8005a4a:	0021      	movs	r1, r4
 8005a4c:	187b      	adds	r3, r7, r1
 8005a4e:	2280      	movs	r2, #128	@ 0x80
 8005a50:	0092      	lsls	r2, r2, #2
 8005a52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a54:	000c      	movs	r4, r1
 8005a56:	193b      	adds	r3, r7, r4
 8005a58:	2200      	movs	r2, #0
 8005a5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a5c:	193b      	adds	r3, r7, r4
 8005a5e:	2200      	movs	r2, #0
 8005a60:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8005a62:	193b      	adds	r3, r7, r4
 8005a64:	4a1a      	ldr	r2, [pc, #104]	@ (8005ad0 <MX_GPIO_Init+0x218>)
 8005a66:	0019      	movs	r1, r3
 8005a68:	0010      	movs	r0, r2
 8005a6a:	f005 fa7b 	bl	800af64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8005a6e:	0021      	movs	r1, r4
 8005a70:	187b      	adds	r3, r7, r1
 8005a72:	22c0      	movs	r2, #192	@ 0xc0
 8005a74:	0152      	lsls	r2, r2, #5
 8005a76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a78:	000c      	movs	r4, r1
 8005a7a:	193b      	adds	r3, r7, r4
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a80:	193b      	adds	r3, r7, r4
 8005a82:	2200      	movs	r2, #0
 8005a84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a86:	193b      	adds	r3, r7, r4
 8005a88:	2200      	movs	r2, #0
 8005a8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a8c:	193b      	adds	r3, r7, r4
 8005a8e:	4a10      	ldr	r2, [pc, #64]	@ (8005ad0 <MX_GPIO_Init+0x218>)
 8005a90:	0019      	movs	r1, r3
 8005a92:	0010      	movs	r0, r2
 8005a94:	f005 fa66 	bl	800af64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8005a98:	0021      	movs	r1, r4
 8005a9a:	187b      	adds	r3, r7, r1
 8005a9c:	2204      	movs	r2, #4
 8005a9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005aa0:	187b      	adds	r3, r7, r1
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005aa6:	187b      	adds	r3, r7, r1
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8005aac:	187b      	adds	r3, r7, r1
 8005aae:	4a0c      	ldr	r2, [pc, #48]	@ (8005ae0 <MX_GPIO_Init+0x228>)
 8005ab0:	0019      	movs	r1, r3
 8005ab2:	0010      	movs	r0, r2
 8005ab4:	f005 fa56 	bl	800af64 <HAL_GPIO_Init>

}
 8005ab8:	46c0      	nop			@ (mov r8, r8)
 8005aba:	46bd      	mov	sp, r7
 8005abc:	b00b      	add	sp, #44	@ 0x2c
 8005abe:	bd90      	pop	{r4, r7, pc}
 8005ac0:	40021000 	.word	0x40021000
 8005ac4:	50001c00 	.word	0x50001c00
 8005ac8:	00000301 	.word	0x00000301
 8005acc:	50000400 	.word	0x50000400
 8005ad0:	50000800 	.word	0x50000800
 8005ad4:	0000200c 	.word	0x0000200c
 8005ad8:	00008180 	.word	0x00008180
 8005adc:	0000403e 	.word	0x0000403e
 8005ae0:	50000c00 	.word	0x50000c00

08005ae4 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2100      	movs	r1, #0
 8005af2:	0018      	movs	r0, r3
 8005af4:	f00a ff54 	bl	80109a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2108      	movs	r1, #8
 8005afc:	0018      	movs	r0, r3
 8005afe:	f00a ff4f 	bl	80109a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	210c      	movs	r1, #12
 8005b06:	0018      	movs	r0, r3
 8005b08:	f00a ff4a 	bl	80109a0 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8005b0c:	2380      	movs	r3, #128	@ 0x80
 8005b0e:	05db      	lsls	r3, r3, #23
 8005b10:	22fa      	movs	r2, #250	@ 0xfa
 8005b12:	0112      	lsls	r2, r2, #4
 8005b14:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8005b16:	2380      	movs	r3, #128	@ 0x80
 8005b18:	05db      	lsls	r3, r3, #23
 8005b1a:	22fa      	movs	r2, #250	@ 0xfa
 8005b1c:	0112      	lsls	r2, r2, #4
 8005b1e:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8005b20:	2380      	movs	r3, #128	@ 0x80
 8005b22:	05db      	lsls	r3, r3, #23
 8005b24:	22fa      	movs	r2, #250	@ 0xfa
 8005b26:	0112      	lsls	r2, r2, #4
 8005b28:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8005b2a:	2380      	movs	r3, #128	@ 0x80
 8005b2c:	05db      	lsls	r3, r3, #23
 8005b2e:	22fa      	movs	r2, #250	@ 0xfa
 8005b30:	0112      	lsls	r2, r2, #4
 8005b32:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2100      	movs	r1, #0
 8005b38:	0018      	movs	r0, r3
 8005b3a:	f00a ff31 	bl	80109a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2104      	movs	r1, #4
 8005b42:	0018      	movs	r0, r3
 8005b44:	f00a ff2c 	bl	80109a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	2108      	movs	r1, #8
 8005b4c:	0018      	movs	r0, r3
 8005b4e:	f00a ff27 	bl	80109a0 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8005b52:	4b0a      	ldr	r3, [pc, #40]	@ (8005b7c <GPIO_InitPWMLEDs+0x98>)
 8005b54:	22fa      	movs	r2, #250	@ 0xfa
 8005b56:	0112      	lsls	r2, r2, #4
 8005b58:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8005b5a:	4b08      	ldr	r3, [pc, #32]	@ (8005b7c <GPIO_InitPWMLEDs+0x98>)
 8005b5c:	22fa      	movs	r2, #250	@ 0xfa
 8005b5e:	0112      	lsls	r2, r2, #4
 8005b60:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8005b62:	4b06      	ldr	r3, [pc, #24]	@ (8005b7c <GPIO_InitPWMLEDs+0x98>)
 8005b64:	22fa      	movs	r2, #250	@ 0xfa
 8005b66:	0112      	lsls	r2, r2, #4
 8005b68:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8005b6a:	4b04      	ldr	r3, [pc, #16]	@ (8005b7c <GPIO_InitPWMLEDs+0x98>)
 8005b6c:	22fa      	movs	r2, #250	@ 0xfa
 8005b6e:	0112      	lsls	r2, r2, #4
 8005b70:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8005b72:	46c0      	nop			@ (mov r8, r8)
 8005b74:	46bd      	mov	sp, r7
 8005b76:	b002      	add	sp, #8
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	46c0      	nop			@ (mov r8, r8)
 8005b7c:	40000400 	.word	0x40000400

08005b80 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	0011      	movs	r1, r2
 8005b90:	0018      	movs	r0, r3
 8005b92:	f003 fe81 	bl	8009898 <HIDS_Init>
}
 8005b96:	46c0      	nop			@ (mov r8, r8)
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	b002      	add	sp, #8
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8005ba2:	f003 fe9b 	bl	80098dc <HIDS_StartMeasurement>
}
 8005ba6:	46c0      	nop			@ (mov r8, r8)
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	0011      	movs	r1, r2
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f003 ff69 	bl	8009a94 <HIDS_GetMeasurementValues>
 8005bc2:	0003      	movs	r3, r0
}
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	b002      	add	sp, #8
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8005bd0:	f003 ff04 	bl	80099dc <HIDS_DeviceConnected>
 8005bd4:	0003      	movs	r3, r0
}
 8005bd6:	0018      	movs	r0, r3
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005be0:	4b1b      	ldr	r3, [pc, #108]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005be2:	4a1c      	ldr	r2, [pc, #112]	@ (8005c54 <MX_I2C1_Init+0x78>)
 8005be4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8005be6:	4b1a      	ldr	r3, [pc, #104]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005be8:	4a1b      	ldr	r2, [pc, #108]	@ (8005c58 <MX_I2C1_Init+0x7c>)
 8005bea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005bec:	4b18      	ldr	r3, [pc, #96]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005bf2:	4b17      	ldr	r3, [pc, #92]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005bf8:	4b15      	ldr	r3, [pc, #84]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005bfe:	4b14      	ldr	r3, [pc, #80]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005c04:	4b12      	ldr	r3, [pc, #72]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005c0a:	4b11      	ldr	r3, [pc, #68]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005c10:	4b0f      	ldr	r3, [pc, #60]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005c16:	4b0e      	ldr	r3, [pc, #56]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005c18:	0018      	movs	r0, r3
 8005c1a:	f005 fc3d 	bl	800b498 <HAL_I2C_Init>
 8005c1e:	1e03      	subs	r3, r0, #0
 8005c20:	d001      	beq.n	8005c26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005c22:	f000 fb5d 	bl	80062e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005c26:	4b0a      	ldr	r3, [pc, #40]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005c28:	2100      	movs	r1, #0
 8005c2a:	0018      	movs	r0, r3
 8005c2c:	f007 fbac 	bl	800d388 <HAL_I2CEx_ConfigAnalogFilter>
 8005c30:	1e03      	subs	r3, r0, #0
 8005c32:	d001      	beq.n	8005c38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005c34:	f000 fb54 	bl	80062e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005c38:	4b05      	ldr	r3, [pc, #20]	@ (8005c50 <MX_I2C1_Init+0x74>)
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	f007 fbef 	bl	800d420 <HAL_I2CEx_ConfigDigitalFilter>
 8005c42:	1e03      	subs	r3, r0, #0
 8005c44:	d001      	beq.n	8005c4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005c46:	f000 fb4b 	bl	80062e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005c4a:	46c0      	nop			@ (mov r8, r8)
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	20000c70 	.word	0x20000c70
 8005c54:	40005400 	.word	0x40005400
 8005c58:	00503d58 	.word	0x00503d58

08005c5c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005c60:	4b1b      	ldr	r3, [pc, #108]	@ (8005cd0 <MX_I2C2_Init+0x74>)
 8005c62:	4a1c      	ldr	r2, [pc, #112]	@ (8005cd4 <MX_I2C2_Init+0x78>)
 8005c64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8005c66:	4b1a      	ldr	r3, [pc, #104]	@ (8005cd0 <MX_I2C2_Init+0x74>)
 8005c68:	4a1b      	ldr	r2, [pc, #108]	@ (8005cd8 <MX_I2C2_Init+0x7c>)
 8005c6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005c6c:	4b18      	ldr	r3, [pc, #96]	@ (8005cd0 <MX_I2C2_Init+0x74>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005c72:	4b17      	ldr	r3, [pc, #92]	@ (8005cd0 <MX_I2C2_Init+0x74>)
 8005c74:	2201      	movs	r2, #1
 8005c76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005c78:	4b15      	ldr	r3, [pc, #84]	@ (8005cd0 <MX_I2C2_Init+0x74>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8005c7e:	4b14      	ldr	r3, [pc, #80]	@ (8005cd0 <MX_I2C2_Init+0x74>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005c84:	4b12      	ldr	r3, [pc, #72]	@ (8005cd0 <MX_I2C2_Init+0x74>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005c8a:	4b11      	ldr	r3, [pc, #68]	@ (8005cd0 <MX_I2C2_Init+0x74>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005c90:	4b0f      	ldr	r3, [pc, #60]	@ (8005cd0 <MX_I2C2_Init+0x74>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005c96:	4b0e      	ldr	r3, [pc, #56]	@ (8005cd0 <MX_I2C2_Init+0x74>)
 8005c98:	0018      	movs	r0, r3
 8005c9a:	f005 fbfd 	bl	800b498 <HAL_I2C_Init>
 8005c9e:	1e03      	subs	r3, r0, #0
 8005ca0:	d001      	beq.n	8005ca6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8005ca2:	f000 fb1d 	bl	80062e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8005cd0 <MX_I2C2_Init+0x74>)
 8005ca8:	2100      	movs	r1, #0
 8005caa:	0018      	movs	r0, r3
 8005cac:	f007 fb6c 	bl	800d388 <HAL_I2CEx_ConfigAnalogFilter>
 8005cb0:	1e03      	subs	r3, r0, #0
 8005cb2:	d001      	beq.n	8005cb8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005cb4:	f000 fb14 	bl	80062e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005cb8:	4b05      	ldr	r3, [pc, #20]	@ (8005cd0 <MX_I2C2_Init+0x74>)
 8005cba:	2100      	movs	r1, #0
 8005cbc:	0018      	movs	r0, r3
 8005cbe:	f007 fbaf 	bl	800d420 <HAL_I2CEx_ConfigDigitalFilter>
 8005cc2:	1e03      	subs	r3, r0, #0
 8005cc4:	d001      	beq.n	8005cca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8005cc6:	f000 fb0b 	bl	80062e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005cca:	46c0      	nop			@ (mov r8, r8)
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	20000cc4 	.word	0x20000cc4
 8005cd4:	40005800 	.word	0x40005800
 8005cd8:	00503d58 	.word	0x00503d58

08005cdc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005cdc:	b590      	push	{r4, r7, lr}
 8005cde:	b08b      	sub	sp, #44	@ 0x2c
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ce4:	2414      	movs	r4, #20
 8005ce6:	193b      	adds	r3, r7, r4
 8005ce8:	0018      	movs	r0, r3
 8005cea:	2314      	movs	r3, #20
 8005cec:	001a      	movs	r2, r3
 8005cee:	2100      	movs	r1, #0
 8005cf0:	f011 ffe0 	bl	8017cb4 <memset>
  if(i2cHandle->Instance==I2C1)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a5d      	ldr	r2, [pc, #372]	@ (8005e70 <HAL_I2C_MspInit+0x194>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d000      	beq.n	8005d00 <HAL_I2C_MspInit+0x24>
 8005cfe:	e083      	b.n	8005e08 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d00:	4b5c      	ldr	r3, [pc, #368]	@ (8005e74 <HAL_I2C_MspInit+0x198>)
 8005d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d04:	4b5b      	ldr	r3, [pc, #364]	@ (8005e74 <HAL_I2C_MspInit+0x198>)
 8005d06:	2102      	movs	r1, #2
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005d0c:	4b59      	ldr	r3, [pc, #356]	@ (8005e74 <HAL_I2C_MspInit+0x198>)
 8005d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d10:	2202      	movs	r2, #2
 8005d12:	4013      	ands	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]
 8005d16:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005d18:	0021      	movs	r1, r4
 8005d1a:	187b      	adds	r3, r7, r1
 8005d1c:	22c0      	movs	r2, #192	@ 0xc0
 8005d1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005d20:	187b      	adds	r3, r7, r1
 8005d22:	2212      	movs	r2, #18
 8005d24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d26:	187b      	adds	r3, r7, r1
 8005d28:	2200      	movs	r2, #0
 8005d2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d2c:	187b      	adds	r3, r7, r1
 8005d2e:	2203      	movs	r2, #3
 8005d30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8005d32:	187b      	adds	r3, r7, r1
 8005d34:	2201      	movs	r2, #1
 8005d36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d38:	187b      	adds	r3, r7, r1
 8005d3a:	4a4f      	ldr	r2, [pc, #316]	@ (8005e78 <HAL_I2C_MspInit+0x19c>)
 8005d3c:	0019      	movs	r1, r3
 8005d3e:	0010      	movs	r0, r2
 8005d40:	f005 f910 	bl	800af64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005d44:	4b4b      	ldr	r3, [pc, #300]	@ (8005e74 <HAL_I2C_MspInit+0x198>)
 8005d46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d48:	4b4a      	ldr	r3, [pc, #296]	@ (8005e74 <HAL_I2C_MspInit+0x198>)
 8005d4a:	2180      	movs	r1, #128	@ 0x80
 8005d4c:	0389      	lsls	r1, r1, #14
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8005d52:	4b4a      	ldr	r3, [pc, #296]	@ (8005e7c <HAL_I2C_MspInit+0x1a0>)
 8005d54:	4a4a      	ldr	r2, [pc, #296]	@ (8005e80 <HAL_I2C_MspInit+0x1a4>)
 8005d56:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8005d58:	4b48      	ldr	r3, [pc, #288]	@ (8005e7c <HAL_I2C_MspInit+0x1a0>)
 8005d5a:	2206      	movs	r2, #6
 8005d5c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d5e:	4b47      	ldr	r3, [pc, #284]	@ (8005e7c <HAL_I2C_MspInit+0x1a0>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d64:	4b45      	ldr	r3, [pc, #276]	@ (8005e7c <HAL_I2C_MspInit+0x1a0>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005d6a:	4b44      	ldr	r3, [pc, #272]	@ (8005e7c <HAL_I2C_MspInit+0x1a0>)
 8005d6c:	2280      	movs	r2, #128	@ 0x80
 8005d6e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d70:	4b42      	ldr	r3, [pc, #264]	@ (8005e7c <HAL_I2C_MspInit+0x1a0>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d76:	4b41      	ldr	r3, [pc, #260]	@ (8005e7c <HAL_I2C_MspInit+0x1a0>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005d7c:	4b3f      	ldr	r3, [pc, #252]	@ (8005e7c <HAL_I2C_MspInit+0x1a0>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005d82:	4b3e      	ldr	r3, [pc, #248]	@ (8005e7c <HAL_I2C_MspInit+0x1a0>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005d88:	4b3c      	ldr	r3, [pc, #240]	@ (8005e7c <HAL_I2C_MspInit+0x1a0>)
 8005d8a:	0018      	movs	r0, r3
 8005d8c:	f004 fc70 	bl	800a670 <HAL_DMA_Init>
 8005d90:	1e03      	subs	r3, r0, #0
 8005d92:	d001      	beq.n	8005d98 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8005d94:	f000 faa4 	bl	80062e0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a38      	ldr	r2, [pc, #224]	@ (8005e7c <HAL_I2C_MspInit+0x1a0>)
 8005d9c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005d9e:	4b37      	ldr	r3, [pc, #220]	@ (8005e7c <HAL_I2C_MspInit+0x1a0>)
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8005da4:	4b37      	ldr	r3, [pc, #220]	@ (8005e84 <HAL_I2C_MspInit+0x1a8>)
 8005da6:	4a38      	ldr	r2, [pc, #224]	@ (8005e88 <HAL_I2C_MspInit+0x1ac>)
 8005da8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8005daa:	4b36      	ldr	r3, [pc, #216]	@ (8005e84 <HAL_I2C_MspInit+0x1a8>)
 8005dac:	2206      	movs	r2, #6
 8005dae:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005db0:	4b34      	ldr	r3, [pc, #208]	@ (8005e84 <HAL_I2C_MspInit+0x1a8>)
 8005db2:	2210      	movs	r2, #16
 8005db4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005db6:	4b33      	ldr	r3, [pc, #204]	@ (8005e84 <HAL_I2C_MspInit+0x1a8>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005dbc:	4b31      	ldr	r3, [pc, #196]	@ (8005e84 <HAL_I2C_MspInit+0x1a8>)
 8005dbe:	2280      	movs	r2, #128	@ 0x80
 8005dc0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005dc2:	4b30      	ldr	r3, [pc, #192]	@ (8005e84 <HAL_I2C_MspInit+0x1a8>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8005e84 <HAL_I2C_MspInit+0x1a8>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005dce:	4b2d      	ldr	r3, [pc, #180]	@ (8005e84 <HAL_I2C_MspInit+0x1a8>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005dd4:	4b2b      	ldr	r3, [pc, #172]	@ (8005e84 <HAL_I2C_MspInit+0x1a8>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005dda:	4b2a      	ldr	r3, [pc, #168]	@ (8005e84 <HAL_I2C_MspInit+0x1a8>)
 8005ddc:	0018      	movs	r0, r3
 8005dde:	f004 fc47 	bl	800a670 <HAL_DMA_Init>
 8005de2:	1e03      	subs	r3, r0, #0
 8005de4:	d001      	beq.n	8005dea <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8005de6:	f000 fa7b 	bl	80062e0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a25      	ldr	r2, [pc, #148]	@ (8005e84 <HAL_I2C_MspInit+0x1a8>)
 8005dee:	639a      	str	r2, [r3, #56]	@ 0x38
 8005df0:	4b24      	ldr	r3, [pc, #144]	@ (8005e84 <HAL_I2C_MspInit+0x1a8>)
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8005df6:	2200      	movs	r2, #0
 8005df8:	2100      	movs	r1, #0
 8005dfa:	2017      	movs	r0, #23
 8005dfc:	f004 fc06 	bl	800a60c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8005e00:	2017      	movs	r0, #23
 8005e02:	f004 fc18 	bl	800a636 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8005e06:	e02e      	b.n	8005e66 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a1f      	ldr	r2, [pc, #124]	@ (8005e8c <HAL_I2C_MspInit+0x1b0>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d129      	bne.n	8005e66 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e12:	4b18      	ldr	r3, [pc, #96]	@ (8005e74 <HAL_I2C_MspInit+0x198>)
 8005e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e16:	4b17      	ldr	r3, [pc, #92]	@ (8005e74 <HAL_I2C_MspInit+0x198>)
 8005e18:	2102      	movs	r1, #2
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005e1e:	4b15      	ldr	r3, [pc, #84]	@ (8005e74 <HAL_I2C_MspInit+0x198>)
 8005e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e22:	2202      	movs	r2, #2
 8005e24:	4013      	ands	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005e2a:	2114      	movs	r1, #20
 8005e2c:	187b      	adds	r3, r7, r1
 8005e2e:	22c0      	movs	r2, #192	@ 0xc0
 8005e30:	0112      	lsls	r2, r2, #4
 8005e32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e34:	187b      	adds	r3, r7, r1
 8005e36:	2212      	movs	r2, #18
 8005e38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e3a:	187b      	adds	r3, r7, r1
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e40:	187b      	adds	r3, r7, r1
 8005e42:	2203      	movs	r2, #3
 8005e44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8005e46:	187b      	adds	r3, r7, r1
 8005e48:	2206      	movs	r2, #6
 8005e4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e4c:	187b      	adds	r3, r7, r1
 8005e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8005e78 <HAL_I2C_MspInit+0x19c>)
 8005e50:	0019      	movs	r1, r3
 8005e52:	0010      	movs	r0, r2
 8005e54:	f005 f886 	bl	800af64 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005e58:	4b06      	ldr	r3, [pc, #24]	@ (8005e74 <HAL_I2C_MspInit+0x198>)
 8005e5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e5c:	4b05      	ldr	r3, [pc, #20]	@ (8005e74 <HAL_I2C_MspInit+0x198>)
 8005e5e:	2180      	movs	r1, #128	@ 0x80
 8005e60:	03c9      	lsls	r1, r1, #15
 8005e62:	430a      	orrs	r2, r1
 8005e64:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8005e66:	46c0      	nop			@ (mov r8, r8)
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	b00b      	add	sp, #44	@ 0x2c
 8005e6c:	bd90      	pop	{r4, r7, pc}
 8005e6e:	46c0      	nop			@ (mov r8, r8)
 8005e70:	40005400 	.word	0x40005400
 8005e74:	40021000 	.word	0x40021000
 8005e78:	50000400 	.word	0x50000400
 8005e7c:	20000d18 	.word	0x20000d18
 8005e80:	40020030 	.word	0x40020030
 8005e84:	20000d60 	.word	0x20000d60
 8005e88:	4002001c 	.word	0x4002001c
 8005e8c:	40005800 	.word	0x40005800

08005e90 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8005e94:	4b10      	ldr	r3, [pc, #64]	@ (8005ed8 <MX_I2S2_Init+0x48>)
 8005e96:	4a11      	ldr	r2, [pc, #68]	@ (8005edc <MX_I2S2_Init+0x4c>)
 8005e98:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8005e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8005ed8 <MX_I2S2_Init+0x48>)
 8005e9c:	22c0      	movs	r2, #192	@ 0xc0
 8005e9e:	0092      	lsls	r2, r2, #2
 8005ea0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8005ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed8 <MX_I2S2_Init+0x48>)
 8005ea4:	2210      	movs	r2, #16
 8005ea6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 8005ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ed8 <MX_I2S2_Init+0x48>)
 8005eaa:	2205      	movs	r2, #5
 8005eac:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8005eae:	4b0a      	ldr	r3, [pc, #40]	@ (8005ed8 <MX_I2S2_Init+0x48>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8005eb4:	4b08      	ldr	r3, [pc, #32]	@ (8005ed8 <MX_I2S2_Init+0x48>)
 8005eb6:	22fa      	movs	r2, #250	@ 0xfa
 8005eb8:	0152      	lsls	r2, r2, #5
 8005eba:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8005ebc:	4b06      	ldr	r3, [pc, #24]	@ (8005ed8 <MX_I2S2_Init+0x48>)
 8005ebe:	2208      	movs	r2, #8
 8005ec0:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8005ec2:	4b05      	ldr	r3, [pc, #20]	@ (8005ed8 <MX_I2S2_Init+0x48>)
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	f007 faf7 	bl	800d4b8 <HAL_I2S_Init>
 8005eca:	1e03      	subs	r3, r0, #0
 8005ecc:	d001      	beq.n	8005ed2 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8005ece:	f000 fa07 	bl	80062e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8005ed2:	46c0      	nop			@ (mov r8, r8)
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	20000da8 	.word	0x20000da8
 8005edc:	40003800 	.word	0x40003800

08005ee0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8005ee0:	b590      	push	{r4, r7, lr}
 8005ee2:	b089      	sub	sp, #36	@ 0x24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ee8:	240c      	movs	r4, #12
 8005eea:	193b      	adds	r3, r7, r4
 8005eec:	0018      	movs	r0, r3
 8005eee:	2314      	movs	r3, #20
 8005ef0:	001a      	movs	r2, r3
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	f011 fede 	bl	8017cb4 <memset>
  if(i2sHandle->Instance==SPI2)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a2d      	ldr	r2, [pc, #180]	@ (8005fb4 <HAL_I2S_MspInit+0xd4>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d154      	bne.n	8005fac <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005f02:	4b2d      	ldr	r3, [pc, #180]	@ (8005fb8 <HAL_I2S_MspInit+0xd8>)
 8005f04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f06:	4b2c      	ldr	r3, [pc, #176]	@ (8005fb8 <HAL_I2S_MspInit+0xd8>)
 8005f08:	2180      	movs	r1, #128	@ 0x80
 8005f0a:	01c9      	lsls	r1, r1, #7
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f10:	4b29      	ldr	r3, [pc, #164]	@ (8005fb8 <HAL_I2S_MspInit+0xd8>)
 8005f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f14:	4b28      	ldr	r3, [pc, #160]	@ (8005fb8 <HAL_I2S_MspInit+0xd8>)
 8005f16:	2102      	movs	r1, #2
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005f1c:	4b26      	ldr	r3, [pc, #152]	@ (8005fb8 <HAL_I2S_MspInit+0xd8>)
 8005f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f20:	2202      	movs	r2, #2
 8005f22:	4013      	ands	r3, r2
 8005f24:	60bb      	str	r3, [r7, #8]
 8005f26:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8005f28:	193b      	adds	r3, r7, r4
 8005f2a:	22b0      	movs	r2, #176	@ 0xb0
 8005f2c:	0212      	lsls	r2, r2, #8
 8005f2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f30:	0021      	movs	r1, r4
 8005f32:	187b      	adds	r3, r7, r1
 8005f34:	2202      	movs	r2, #2
 8005f36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f38:	187b      	adds	r3, r7, r1
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f3e:	187b      	adds	r3, r7, r1
 8005f40:	2200      	movs	r2, #0
 8005f42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8005f44:	187b      	adds	r3, r7, r1
 8005f46:	2200      	movs	r2, #0
 8005f48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f4a:	187b      	adds	r3, r7, r1
 8005f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8005fbc <HAL_I2S_MspInit+0xdc>)
 8005f4e:	0019      	movs	r1, r3
 8005f50:	0010      	movs	r0, r2
 8005f52:	f005 f807 	bl	800af64 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8005f56:	4b1a      	ldr	r3, [pc, #104]	@ (8005fc0 <HAL_I2S_MspInit+0xe0>)
 8005f58:	4a1a      	ldr	r2, [pc, #104]	@ (8005fc4 <HAL_I2S_MspInit+0xe4>)
 8005f5a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8005f5c:	4b18      	ldr	r3, [pc, #96]	@ (8005fc0 <HAL_I2S_MspInit+0xe0>)
 8005f5e:	2202      	movs	r2, #2
 8005f60:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f62:	4b17      	ldr	r3, [pc, #92]	@ (8005fc0 <HAL_I2S_MspInit+0xe0>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f68:	4b15      	ldr	r3, [pc, #84]	@ (8005fc0 <HAL_I2S_MspInit+0xe0>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005f6e:	4b14      	ldr	r3, [pc, #80]	@ (8005fc0 <HAL_I2S_MspInit+0xe0>)
 8005f70:	2280      	movs	r2, #128	@ 0x80
 8005f72:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005f74:	4b12      	ldr	r3, [pc, #72]	@ (8005fc0 <HAL_I2S_MspInit+0xe0>)
 8005f76:	2280      	movs	r2, #128	@ 0x80
 8005f78:	0052      	lsls	r2, r2, #1
 8005f7a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005f7c:	4b10      	ldr	r3, [pc, #64]	@ (8005fc0 <HAL_I2S_MspInit+0xe0>)
 8005f7e:	2280      	movs	r2, #128	@ 0x80
 8005f80:	00d2      	lsls	r2, r2, #3
 8005f82:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8005f84:	4b0e      	ldr	r3, [pc, #56]	@ (8005fc0 <HAL_I2S_MspInit+0xe0>)
 8005f86:	2220      	movs	r2, #32
 8005f88:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc0 <HAL_I2S_MspInit+0xe0>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005f90:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc0 <HAL_I2S_MspInit+0xe0>)
 8005f92:	0018      	movs	r0, r3
 8005f94:	f004 fb6c 	bl	800a670 <HAL_DMA_Init>
 8005f98:	1e03      	subs	r3, r0, #0
 8005f9a:	d001      	beq.n	8005fa0 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8005f9c:	f000 f9a0 	bl	80062e0 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a07      	ldr	r2, [pc, #28]	@ (8005fc0 <HAL_I2S_MspInit+0xe0>)
 8005fa4:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fa6:	4b06      	ldr	r3, [pc, #24]	@ (8005fc0 <HAL_I2S_MspInit+0xe0>)
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005fac:	46c0      	nop			@ (mov r8, r8)
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	b009      	add	sp, #36	@ 0x24
 8005fb2:	bd90      	pop	{r4, r7, pc}
 8005fb4:	40003800 	.word	0x40003800
 8005fb8:	40021000 	.word	0x40021000
 8005fbc:	50000400 	.word	0x50000400
 8005fc0:	20000de4 	.word	0x20000de4
 8005fc4:	40020044 	.word	0x40020044

08005fc8 <HAL_I2S_MspDeInit>:

void HAL_I2S_MspDeInit(I2S_HandleTypeDef* i2sHandle)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]

  if(i2sHandle->Instance==SPI2)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8006008 <HAL_I2S_MspDeInit+0x40>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d111      	bne.n	8005ffe <HAL_I2S_MspDeInit+0x36>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8005fda:	4b0c      	ldr	r3, [pc, #48]	@ (800600c <HAL_I2S_MspDeInit+0x44>)
 8005fdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fde:	4b0b      	ldr	r3, [pc, #44]	@ (800600c <HAL_I2S_MspDeInit+0x44>)
 8005fe0:	490b      	ldr	r1, [pc, #44]	@ (8006010 <HAL_I2S_MspDeInit+0x48>)
 8005fe2:	400a      	ands	r2, r1
 8005fe4:	639a      	str	r2, [r3, #56]	@ 0x38
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
 8005fe6:	23b0      	movs	r3, #176	@ 0xb0
 8005fe8:	021b      	lsls	r3, r3, #8
 8005fea:	4a0a      	ldr	r2, [pc, #40]	@ (8006014 <HAL_I2S_MspDeInit+0x4c>)
 8005fec:	0019      	movs	r1, r3
 8005fee:	0010      	movs	r0, r2
 8005ff0:	f005 f936 	bl	800b260 <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(i2sHandle->hdmarx);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff8:	0018      	movs	r0, r3
 8005ffa:	f004 fbb1 	bl	800a760 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 8005ffe:	46c0      	nop			@ (mov r8, r8)
 8006000:	46bd      	mov	sp, r7
 8006002:	b002      	add	sp, #8
 8006004:	bd80      	pop	{r7, pc}
 8006006:	46c0      	nop			@ (mov r8, r8)
 8006008:	40003800 	.word	0x40003800
 800600c:	40021000 	.word	0x40021000
 8006010:	ffffbfff 	.word	0xffffbfff
 8006014:	50000400 	.word	0x50000400

08006018 <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 8006018:	b580      	push	{r7, lr}
 800601a:	af00      	add	r7, sp, #0
  testDone = true;
 800601c:	4b35      	ldr	r3, [pc, #212]	@ (80060f4 <SetTestDone+0xdc>)
 800601e:	2201      	movs	r2, #1
 8006020:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1000);
 8006022:	23fa      	movs	r3, #250	@ 0xfa
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	0018      	movs	r0, r3
 8006028:	f003 fe84 	bl	8009d34 <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 800602c:	4b32      	ldr	r3, [pc, #200]	@ (80060f8 <SetTestDone+0xe0>)
 800602e:	2201      	movs	r2, #1
 8006030:	2101      	movs	r1, #1
 8006032:	0018      	movs	r0, r3
 8006034:	f005 fa13 	bl	800b45e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8006038:	2380      	movs	r3, #128	@ 0x80
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	482e      	ldr	r0, [pc, #184]	@ (80060f8 <SetTestDone+0xe0>)
 800603e:	2201      	movs	r2, #1
 8006040:	0019      	movs	r1, r3
 8006042:	f005 fa0c 	bl	800b45e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8006046:	2380      	movs	r3, #128	@ 0x80
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	482b      	ldr	r0, [pc, #172]	@ (80060f8 <SetTestDone+0xe0>)
 800604c:	2200      	movs	r2, #0
 800604e:	0019      	movs	r1, r3
 8006050:	f005 fa05 	bl	800b45e <HAL_GPIO_WritePin>
  TIM2 -> CCR1 = 4000;
 8006054:	2380      	movs	r3, #128	@ 0x80
 8006056:	05db      	lsls	r3, r3, #23
 8006058:	22fa      	movs	r2, #250	@ 0xfa
 800605a:	0112      	lsls	r2, r2, #4
 800605c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 800605e:	2380      	movs	r3, #128	@ 0x80
 8006060:	05db      	lsls	r3, r3, #23
 8006062:	22fa      	movs	r2, #250	@ 0xfa
 8006064:	0112      	lsls	r2, r2, #4
 8006066:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 0;
 8006068:	2380      	movs	r3, #128	@ 0x80
 800606a:	05db      	lsls	r3, r3, #23
 800606c:	2200      	movs	r2, #0
 800606e:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 4000;
 8006070:	4b22      	ldr	r3, [pc, #136]	@ (80060fc <SetTestDone+0xe4>)
 8006072:	22fa      	movs	r2, #250	@ 0xfa
 8006074:	0112      	lsls	r2, r2, #4
 8006076:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8006078:	4b20      	ldr	r3, [pc, #128]	@ (80060fc <SetTestDone+0xe4>)
 800607a:	22fa      	movs	r2, #250	@ 0xfa
 800607c:	0112      	lsls	r2, r2, #4
 800607e:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 0;
 8006080:	4b1e      	ldr	r3, [pc, #120]	@ (80060fc <SetTestDone+0xe4>)
 8006082:	2200      	movs	r2, #0
 8006084:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_Delay(1000);
 8006086:	23fa      	movs	r3, #250	@ 0xfa
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	0018      	movs	r0, r3
 800608c:	f003 fe52 	bl	8009d34 <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8006090:	4b19      	ldr	r3, [pc, #100]	@ (80060f8 <SetTestDone+0xe0>)
 8006092:	2201      	movs	r2, #1
 8006094:	2101      	movs	r1, #1
 8006096:	0018      	movs	r0, r3
 8006098:	f005 f9e1 	bl	800b45e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800609c:	2380      	movs	r3, #128	@ 0x80
 800609e:	005b      	lsls	r3, r3, #1
 80060a0:	4815      	ldr	r0, [pc, #84]	@ (80060f8 <SetTestDone+0xe0>)
 80060a2:	2201      	movs	r2, #1
 80060a4:	0019      	movs	r1, r3
 80060a6:	f005 f9da 	bl	800b45e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80060aa:	2380      	movs	r3, #128	@ 0x80
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4812      	ldr	r0, [pc, #72]	@ (80060f8 <SetTestDone+0xe0>)
 80060b0:	2201      	movs	r2, #1
 80060b2:	0019      	movs	r1, r3
 80060b4:	f005 f9d3 	bl	800b45e <HAL_GPIO_WritePin>
  TIM2 -> CCR1 = 4000;
 80060b8:	2380      	movs	r3, #128	@ 0x80
 80060ba:	05db      	lsls	r3, r3, #23
 80060bc:	22fa      	movs	r2, #250	@ 0xfa
 80060be:	0112      	lsls	r2, r2, #4
 80060c0:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 80060c2:	2380      	movs	r3, #128	@ 0x80
 80060c4:	05db      	lsls	r3, r3, #23
 80060c6:	22fa      	movs	r2, #250	@ 0xfa
 80060c8:	0112      	lsls	r2, r2, #4
 80060ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 80060cc:	2380      	movs	r3, #128	@ 0x80
 80060ce:	05db      	lsls	r3, r3, #23
 80060d0:	22fa      	movs	r2, #250	@ 0xfa
 80060d2:	0112      	lsls	r2, r2, #4
 80060d4:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 4000;
 80060d6:	4b09      	ldr	r3, [pc, #36]	@ (80060fc <SetTestDone+0xe4>)
 80060d8:	22fa      	movs	r2, #250	@ 0xfa
 80060da:	0112      	lsls	r2, r2, #4
 80060dc:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 80060de:	4b07      	ldr	r3, [pc, #28]	@ (80060fc <SetTestDone+0xe4>)
 80060e0:	22fa      	movs	r2, #250	@ 0xfa
 80060e2:	0112      	lsls	r2, r2, #4
 80060e4:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 80060e6:	4b05      	ldr	r3, [pc, #20]	@ (80060fc <SetTestDone+0xe4>)
 80060e8:	22fa      	movs	r2, #250	@ 0xfa
 80060ea:	0112      	lsls	r2, r2, #4
 80060ec:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80060ee:	46c0      	nop			@ (mov r8, r8)
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	20000e2c 	.word	0x20000e2c
 80060f8:	50000400 	.word	0x50000400
 80060fc:	40000400 	.word	0x40000400

08006100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006104:	f003 fda6 	bl	8009c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006108:	f000 f864 	bl	80061d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800610c:	f7ff fbd4 	bl	80058b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8006110:	f7ff fb48 	bl	80057a4 <MX_DMA_Init>
  MX_I2C1_Init();
 8006114:	f7ff fd62 	bl	8005bdc <MX_I2C1_Init>
  MX_I2S2_Init();
 8006118:	f7ff feba 	bl	8005e90 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800611c:	f003 f87a 	bl	8009214 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8006120:	f7ff fd9c 	bl	8005c5c <MX_I2C2_Init>
  MX_TIM2_Init();
 8006124:	f002 fec2 	bl	8008eac <MX_TIM2_Init>
  MX_TIM3_Init();
 8006128:	f002 ff34 	bl	8008f94 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800612c:	f003 f8a6 	bl	800927c <MX_USART4_UART_Init>
  MX_ADC_Init();
 8006130:	f7ff fa86 	bl	8005640 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8006134:	f010 fa3a 	bl	80165ac <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8006138:	f001 f87e 	bl	8007238 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800613c:	f003 f834 	bl	80091a8 <MX_LPUART1_UART_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8006140:	4a1c      	ldr	r2, [pc, #112]	@ (80061b4 <main+0xb4>)
 8006142:	4b1d      	ldr	r3, [pc, #116]	@ (80061b8 <main+0xb8>)
 8006144:	0011      	movs	r1, r2
 8006146:	0018      	movs	r0, r3
 8006148:	f7ff fccc 	bl	8005ae4 <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 800614c:	f7ff fa68 	bl	8005620 <UserButton_Pressed>
 8006150:	1e03      	subs	r3, r0, #0
 8006152:	d004      	beq.n	800615e <main+0x5e>
    EnableESPProg();
 8006154:	f010 fb04 	bl	8016760 <EnableESPProg>
    ESP_Programming = true;
 8006158:	4b18      	ldr	r3, [pc, #96]	@ (80061bc <main+0xbc>)
 800615a:	2201      	movs	r2, #1
 800615c:	701a      	strb	r2, [r3, #0]
  }
  //uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
  SetVerboseLevel(VERBOSE_ALL);
 800615e:	2003      	movs	r0, #3
 8006160:	f003 fabe 	bl	80096e0 <SetVerboseLevel>
  BinaryReleaseInfo();
 8006164:	f003 fad4 	bl	8009710 <BinaryReleaseInfo>
  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 8006168:	4b15      	ldr	r3, [pc, #84]	@ (80061c0 <main+0xc0>)
 800616a:	4a16      	ldr	r2, [pc, #88]	@ (80061c4 <main+0xc4>)
 800616c:	4916      	ldr	r1, [pc, #88]	@ (80061c8 <main+0xc8>)
 800616e:	4817      	ldr	r0, [pc, #92]	@ (80061cc <main+0xcc>)
 8006170:	f7ff fb3e 	bl	80057f0 <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone && !ESP_Programming){
 8006174:	4b16      	ldr	r3, [pc, #88]	@ (80061d0 <main+0xd0>)
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00a      	beq.n	8006192 <main+0x92>
 800617c:	4b0f      	ldr	r3, [pc, #60]	@ (80061bc <main+0xbc>)
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	2201      	movs	r2, #1
 8006182:	4053      	eors	r3, r2
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <main+0x92>
      UpkeepGadget();
 800618a:	f7ff fb5e 	bl	800584a <UpkeepGadget>
      ESP_Upkeep();
 800618e:	f7fe fca9 	bl	8004ae4 <ESP_Upkeep>
    }
    if(!testDone && !ESP_Programming){
 8006192:	4b0f      	ldr	r3, [pc, #60]	@ (80061d0 <main+0xd0>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2201      	movs	r2, #1
 8006198:	4053      	eors	r3, r2
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0e9      	beq.n	8006174 <main+0x74>
 80061a0:	4b06      	ldr	r3, [pc, #24]	@ (80061bc <main+0xbc>)
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2201      	movs	r2, #1
 80061a6:	4053      	eors	r3, r2
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0e2      	beq.n	8006174 <main+0x74>
      Gadget_Test();
 80061ae:	f7ff fb45 	bl	800583c <Gadget_Test>
    if(testDone && !ESP_Programming){
 80061b2:	e7df      	b.n	8006174 <main+0x74>
 80061b4:	200027fc 	.word	0x200027fc
 80061b8:	200027bc 	.word	0x200027bc
 80061bc:	20000e2d 	.word	0x20000e2d
 80061c0:	20000c14 	.word	0x20000c14
 80061c4:	200029ac 	.word	0x200029ac
 80061c8:	20000da8 	.word	0x20000da8
 80061cc:	20000c70 	.word	0x20000c70
 80061d0:	20000e2c 	.word	0x20000e2c

080061d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80061d4:	b590      	push	{r4, r7, lr}
 80061d6:	b09d      	sub	sp, #116	@ 0x74
 80061d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80061da:	2438      	movs	r4, #56	@ 0x38
 80061dc:	193b      	adds	r3, r7, r4
 80061de:	0018      	movs	r0, r3
 80061e0:	2338      	movs	r3, #56	@ 0x38
 80061e2:	001a      	movs	r2, r3
 80061e4:	2100      	movs	r1, #0
 80061e6:	f011 fd65 	bl	8017cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80061ea:	2324      	movs	r3, #36	@ 0x24
 80061ec:	18fb      	adds	r3, r7, r3
 80061ee:	0018      	movs	r0, r3
 80061f0:	2314      	movs	r3, #20
 80061f2:	001a      	movs	r2, r3
 80061f4:	2100      	movs	r1, #0
 80061f6:	f011 fd5d 	bl	8017cb4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80061fa:	003b      	movs	r3, r7
 80061fc:	0018      	movs	r0, r3
 80061fe:	2324      	movs	r3, #36	@ 0x24
 8006200:	001a      	movs	r2, r3
 8006202:	2100      	movs	r1, #0
 8006204:	f011 fd56 	bl	8017cb4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006208:	4b32      	ldr	r3, [pc, #200]	@ (80062d4 <SystemClock_Config+0x100>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a32      	ldr	r2, [pc, #200]	@ (80062d8 <SystemClock_Config+0x104>)
 800620e:	401a      	ands	r2, r3
 8006210:	4b30      	ldr	r3, [pc, #192]	@ (80062d4 <SystemClock_Config+0x100>)
 8006212:	2180      	movs	r1, #128	@ 0x80
 8006214:	0109      	lsls	r1, r1, #4
 8006216:	430a      	orrs	r2, r1
 8006218:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800621a:	f009 faed 	bl	800f7f8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800621e:	4b2f      	ldr	r3, [pc, #188]	@ (80062dc <SystemClock_Config+0x108>)
 8006220:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006222:	4b2e      	ldr	r3, [pc, #184]	@ (80062dc <SystemClock_Config+0x108>)
 8006224:	492c      	ldr	r1, [pc, #176]	@ (80062d8 <SystemClock_Config+0x104>)
 8006226:	400a      	ands	r2, r1
 8006228:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800622a:	193b      	adds	r3, r7, r4
 800622c:	2226      	movs	r2, #38	@ 0x26
 800622e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006230:	193b      	adds	r3, r7, r4
 8006232:	2280      	movs	r2, #128	@ 0x80
 8006234:	0052      	lsls	r2, r2, #1
 8006236:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006238:	0021      	movs	r1, r4
 800623a:	187b      	adds	r3, r7, r1
 800623c:	2201      	movs	r2, #1
 800623e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006240:	187b      	adds	r3, r7, r1
 8006242:	2210      	movs	r2, #16
 8006244:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8006246:	187b      	adds	r3, r7, r1
 8006248:	2201      	movs	r2, #1
 800624a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800624c:	187b      	adds	r3, r7, r1
 800624e:	2200      	movs	r2, #0
 8006250:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006252:	187b      	adds	r3, r7, r1
 8006254:	0018      	movs	r0, r3
 8006256:	f009 fadd 	bl	800f814 <HAL_RCC_OscConfig>
 800625a:	1e03      	subs	r3, r0, #0
 800625c:	d001      	beq.n	8006262 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800625e:	f000 f83f 	bl	80062e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006262:	2124      	movs	r1, #36	@ 0x24
 8006264:	187b      	adds	r3, r7, r1
 8006266:	220f      	movs	r2, #15
 8006268:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800626a:	187b      	adds	r3, r7, r1
 800626c:	2201      	movs	r2, #1
 800626e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006270:	187b      	adds	r3, r7, r1
 8006272:	2200      	movs	r2, #0
 8006274:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006276:	187b      	adds	r3, r7, r1
 8006278:	2200      	movs	r2, #0
 800627a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800627c:	187b      	adds	r3, r7, r1
 800627e:	2200      	movs	r2, #0
 8006280:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8006282:	187b      	adds	r3, r7, r1
 8006284:	2100      	movs	r1, #0
 8006286:	0018      	movs	r0, r3
 8006288:	f009 fe98 	bl	800ffbc <HAL_RCC_ClockConfig>
 800628c:	1e03      	subs	r3, r0, #0
 800628e:	d001      	beq.n	8006294 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8006290:	f000 f826 	bl	80062e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8006294:	003b      	movs	r3, r7
 8006296:	226d      	movs	r2, #109	@ 0x6d
 8006298:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800629a:	003b      	movs	r3, r7
 800629c:	2200      	movs	r2, #0
 800629e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80062a0:	003b      	movs	r3, r7
 80062a2:	2200      	movs	r2, #0
 80062a4:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80062a6:	003b      	movs	r3, r7
 80062a8:	2200      	movs	r2, #0
 80062aa:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80062ac:	003b      	movs	r3, r7
 80062ae:	2280      	movs	r2, #128	@ 0x80
 80062b0:	0252      	lsls	r2, r2, #9
 80062b2:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80062b4:	003b      	movs	r3, r7
 80062b6:	2280      	movs	r2, #128	@ 0x80
 80062b8:	04d2      	lsls	r2, r2, #19
 80062ba:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80062bc:	003b      	movs	r3, r7
 80062be:	0018      	movs	r0, r3
 80062c0:	f00a f8a0 	bl	8010404 <HAL_RCCEx_PeriphCLKConfig>
 80062c4:	1e03      	subs	r3, r0, #0
 80062c6:	d001      	beq.n	80062cc <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80062c8:	f000 f80a 	bl	80062e0 <Error_Handler>
  }
}
 80062cc:	46c0      	nop			@ (mov r8, r8)
 80062ce:	46bd      	mov	sp, r7
 80062d0:	b01d      	add	sp, #116	@ 0x74
 80062d2:	bd90      	pop	{r4, r7, pc}
 80062d4:	40007000 	.word	0x40007000
 80062d8:	ffffe7ff 	.word	0xffffe7ff
 80062dc:	40021000 	.word	0x40021000

080062e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80062e4:	b672      	cpsid	i
}
 80062e6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80062e8:	46c0      	nop			@ (mov r8, r8)
 80062ea:	e7fd      	b.n	80062e8 <Error_Handler+0x8>

080062ec <HT_StartMeasurementWrapper>:
static MicrophoneState MicState = MIC_STATE_INIT;
static uint8_t CurrentMeasurementIndex = 0;
static uint32_t MeasStamp;
static uint32_t MicStamp;

static void HT_StartMeasurementWrapper(void) {
 80062ec:	b580      	push	{r7, lr}
 80062ee:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 80062f0:	f7ff fc55 	bl	8005b9e <HT_StartMeasurement>
}
 80062f4:	46c0      	nop			@ (mov r8, r8)
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
	...

080062fc <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 80062fc:	b580      	push	{r7, lr}
 80062fe:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8006300:	4a04      	ldr	r2, [pc, #16]	@ (8006314 <HT_IsMeasurementDoneWrapper+0x18>)
 8006302:	4b05      	ldr	r3, [pc, #20]	@ (8006318 <HT_IsMeasurementDoneWrapper+0x1c>)
 8006304:	0011      	movs	r1, r2
 8006306:	0018      	movs	r0, r3
 8006308:	f7ff fc50 	bl	8005bac <HT_GetMeasurementValues>
 800630c:	0003      	movs	r3, r0
}
 800630e:	0018      	movs	r0, r3
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	20000e34 	.word	0x20000e34
 8006318:	20000e30 	.word	0x20000e30

0800631c <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 800631c:	b580      	push	{r7, lr}
 800631e:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8006320:	f7ff faad 	bl	800587e <Gas_StartMeasurement>
}
 8006324:	46c0      	nop			@ (mov r8, r8)
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
	...

0800632c <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 800632c:	b580      	push	{r7, lr}
 800632e:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8006330:	4b03      	ldr	r3, [pc, #12]	@ (8006340 <VOC_IsMeasurementDoneWrapper+0x14>)
 8006332:	0018      	movs	r0, r3
 8006334:	f7ff faaa 	bl	800588c <Gas_GetMeasurementValues>
 8006338:	0003      	movs	r3, r0
}
 800633a:	0018      	movs	r0, r3
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	20000e38 	.word	0x20000e38

08006344 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 8006344:	b580      	push	{r7, lr}
 8006346:	af00      	add	r7, sp, #0
}
 8006348:	46c0      	nop			@ (mov r8, r8)
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 800634e:	b580      	push	{r7, lr}
 8006350:	af00      	add	r7, sp, #0
  return true;
 8006352:	2301      	movs	r3, #1
}
 8006354:	0018      	movs	r0, r3
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <MIC_StartMeasurementWrapper>:

static void MIC_StartMeasurementWrapper(void) {
 800635a:	b580      	push	{r7, lr}
 800635c:	af00      	add	r7, sp, #0
  MIC_Start(SAMPLE_RATE_8K, NR_SAMPLES_128);
 800635e:	23fa      	movs	r3, #250	@ 0xfa
 8006360:	015b      	lsls	r3, r3, #5
 8006362:	2180      	movs	r1, #128	@ 0x80
 8006364:	0018      	movs	r0, r3
 8006366:	f000 fbbb 	bl	8006ae0 <MIC_Start>
}
 800636a:	46c0      	nop			@ (mov r8, r8)
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 8006370:	b580      	push	{r7, lr}
 8006372:	af00      	add	r7, sp, #0
  return MIC_MeasurementDone();
 8006374:	f000 fe84 	bl	8007080 <MIC_MeasurementDone>
 8006378:	0003      	movs	r3, r0
}
 800637a:	0018      	movs	r0, r3
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <Meas_TestStart>:
void Meas_TestStart(){
 8006380:	b580      	push	{r7, lr}
 8006382:	af00      	add	r7, sp, #0
  MIC_StartMeasurementWrapper();
 8006384:	f7ff ffe9 	bl	800635a <MIC_StartMeasurementWrapper>
}
 8006388:	46c0      	nop			@ (mov r8, r8)
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <MIC_IsTestMeasurementDoneWrapper>:
static bool MIC_IsTestMeasurementDoneWrapper(void) {
 800638e:	b580      	push	{r7, lr}
 8006390:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 8006392:	f000 fe99 	bl	80070c8 <MIC_TestMeasurementDone>
 8006396:	0003      	movs	r3, r0
}
 8006398:	0018      	movs	r0, r3
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <testInit>:
void testInit(){
 80063a0:	b580      	push	{r7, lr}
 80063a2:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 80063a4:	4b07      	ldr	r3, [pc, #28]	@ (80063c4 <testInit+0x24>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 80063aa:	4b06      	ldr	r3, [pc, #24]	@ (80063c4 <testInit+0x24>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	709a      	strb	r2, [r3, #2]
  MeasTest.HT_Tested = false;
 80063b0:	4b04      	ldr	r3, [pc, #16]	@ (80063c4 <testInit+0x24>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 80063b6:	4b03      	ldr	r3, [pc, #12]	@ (80063c4 <testInit+0x24>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	705a      	strb	r2, [r3, #1]
}
 80063bc:	46c0      	nop			@ (mov r8, r8)
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	46c0      	nop			@ (mov r8, r8)
 80063c4:	20000e74 	.word	0x20000e74

080063c8 <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 80063c8:	b5b0      	push	{r4, r5, r7, lr}
 80063ca:	b092      	sub	sp, #72	@ 0x48
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
  MeasState = MEAS_STATE_INIT;
 80063d4:	4b74      	ldr	r3, [pc, #464]	@ (80065a8 <Meas_Init+0x1e0>)
 80063d6:	2200      	movs	r2, #0
 80063d8:	701a      	strb	r2, [r3, #0]
  testInit();
 80063da:	f7ff ffe1 	bl	80063a0 <testInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 80063de:	4b73      	ldr	r3, [pc, #460]	@ (80065ac <Meas_Init+0x1e4>)
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d103      	bne.n	80063ee <Meas_Init+0x26>
 80063e6:	4b71      	ldr	r3, [pc, #452]	@ (80065ac <Meas_Init+0x1e4>)
 80063e8:	785b      	ldrb	r3, [r3, #1]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d072      	beq.n	80064d4 <Meas_Init+0x10c>
    I2CSensors_Init(sensorI2C);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	0018      	movs	r0, r3
 80063f2:	f7fe fde1 	bl	8004fb8 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 80063f6:	f7ff fbe9 	bl	8005bcc <HT_DeviceConnected>
 80063fa:	0003      	movs	r3, r0
 80063fc:	001a      	movs	r2, r3
 80063fe:	2301      	movs	r3, #1
 8006400:	4053      	eors	r3, r2
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00c      	beq.n	8006422 <Meas_Init+0x5a>
       Error("Humidity / Temperature sensor NOT connected!");
 8006408:	4a69      	ldr	r2, [pc, #420]	@ (80065b0 <Meas_Init+0x1e8>)
 800640a:	4b6a      	ldr	r3, [pc, #424]	@ (80065b4 <Meas_Init+0x1ec>)
 800640c:	0019      	movs	r1, r3
 800640e:	2001      	movs	r0, #1
 8006410:	f003 f8ea 	bl	80095e8 <CreateLine>
       MeasTest.HT_Tested = false;
 8006414:	4b68      	ldr	r3, [pc, #416]	@ (80065b8 <Meas_Init+0x1f0>)
 8006416:	2200      	movs	r2, #0
 8006418:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 800641a:	4b64      	ldr	r3, [pc, #400]	@ (80065ac <Meas_Init+0x1e4>)
 800641c:	2200      	movs	r2, #0
 800641e:	701a      	strb	r2, [r3, #0]
 8006420:	e008      	b.n	8006434 <Meas_Init+0x6c>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
      MeasTest.HT_Tested = true;
 8006422:	4b65      	ldr	r3, [pc, #404]	@ (80065b8 <Meas_Init+0x1f0>)
 8006424:	2201      	movs	r2, #1
 8006426:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 8006428:	4a64      	ldr	r2, [pc, #400]	@ (80065bc <Meas_Init+0x1f4>)
 800642a:	4b65      	ldr	r3, [pc, #404]	@ (80065c0 <Meas_Init+0x1f8>)
 800642c:	0019      	movs	r1, r3
 800642e:	2003      	movs	r0, #3
 8006430:	f003 f8da 	bl	80095e8 <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 8006434:	f7ff fa37 	bl	80058a6 <Gas_DeviceConnected>
 8006438:	0003      	movs	r3, r0
 800643a:	001a      	movs	r2, r3
 800643c:	2301      	movs	r3, #1
 800643e:	4053      	eors	r3, r2
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00c      	beq.n	8006460 <Meas_Init+0x98>
      MeasTest.VOC_Tested = false;
 8006446:	4b5c      	ldr	r3, [pc, #368]	@ (80065b8 <Meas_Init+0x1f0>)
 8006448:	2200      	movs	r2, #0
 800644a:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 800644c:	4a5d      	ldr	r2, [pc, #372]	@ (80065c4 <Meas_Init+0x1fc>)
 800644e:	4b59      	ldr	r3, [pc, #356]	@ (80065b4 <Meas_Init+0x1ec>)
 8006450:	0019      	movs	r1, r3
 8006452:	2001      	movs	r0, #1
 8006454:	f003 f8c8 	bl	80095e8 <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 8006458:	4b54      	ldr	r3, [pc, #336]	@ (80065ac <Meas_Init+0x1e4>)
 800645a:	2200      	movs	r2, #0
 800645c:	705a      	strb	r2, [r3, #1]
 800645e:	e008      	b.n	8006472 <Meas_Init+0xaa>
    }else{
      MeasTest.VOC_Tested = true;
 8006460:	4b55      	ldr	r3, [pc, #340]	@ (80065b8 <Meas_Init+0x1f0>)
 8006462:	2201      	movs	r2, #1
 8006464:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 8006466:	4a58      	ldr	r2, [pc, #352]	@ (80065c8 <Meas_Init+0x200>)
 8006468:	4b55      	ldr	r3, [pc, #340]	@ (80065c0 <Meas_Init+0x1f8>)
 800646a:	0019      	movs	r1, r3
 800646c:	2003      	movs	r0, #3
 800646e:	f003 f8bb 	bl	80095e8 <CreateLine>
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 8006472:	4b51      	ldr	r3, [pc, #324]	@ (80065b8 <Meas_Init+0x1f0>)
 8006474:	785b      	ldrb	r3, [r3, #1]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d018      	beq.n	80064ac <Meas_Init+0xe4>
 800647a:	4b4f      	ldr	r3, [pc, #316]	@ (80065b8 <Meas_Init+0x1f0>)
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d014      	beq.n	80064ac <Meas_Init+0xe4>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8006482:	4b52      	ldr	r3, [pc, #328]	@ (80065cc <Meas_Init+0x204>)
 8006484:	2201      	movs	r2, #1
 8006486:	2101      	movs	r1, #1
 8006488:	0018      	movs	r0, r3
 800648a:	f004 ffe8 	bl	800b45e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 800648e:	2380      	movs	r3, #128	@ 0x80
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	484e      	ldr	r0, [pc, #312]	@ (80065cc <Meas_Init+0x204>)
 8006494:	2200      	movs	r2, #0
 8006496:	0019      	movs	r1, r3
 8006498:	f004 ffe1 	bl	800b45e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800649c:	2380      	movs	r3, #128	@ 0x80
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	484a      	ldr	r0, [pc, #296]	@ (80065cc <Meas_Init+0x204>)
 80064a2:	2201      	movs	r2, #1
 80064a4:	0019      	movs	r1, r3
 80064a6:	f004 ffda 	bl	800b45e <HAL_GPIO_WritePin>
 80064aa:	e013      	b.n	80064d4 <Meas_Init+0x10c>
    }
    else{
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 80064ac:	4b47      	ldr	r3, [pc, #284]	@ (80065cc <Meas_Init+0x204>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	2101      	movs	r1, #1
 80064b2:	0018      	movs	r0, r3
 80064b4:	f004 ffd3 	bl	800b45e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 80064b8:	2380      	movs	r3, #128	@ 0x80
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	4843      	ldr	r0, [pc, #268]	@ (80065cc <Meas_Init+0x204>)
 80064be:	2201      	movs	r2, #1
 80064c0:	0019      	movs	r1, r3
 80064c2:	f004 ffcc 	bl	800b45e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80064c6:	2380      	movs	r3, #128	@ 0x80
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4840      	ldr	r0, [pc, #256]	@ (80065cc <Meas_Init+0x204>)
 80064cc:	2201      	movs	r2, #1
 80064ce:	0019      	movs	r1, r3
 80064d0:	f004 ffc5 	bl	800b45e <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 80064d4:	4b35      	ldr	r3, [pc, #212]	@ (80065ac <Meas_Init+0x1e4>)
 80064d6:	78db      	ldrb	r3, [r3, #3]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <Meas_Init+0x120>
    MIC_Init(micI2s);
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	0018      	movs	r0, r3
 80064e0:	f000 fa98 	bl	8006a14 <MIC_Init>
    Meas_TestStart();
 80064e4:	f7ff ff4c 	bl	8006380 <Meas_TestStart>
  }
  uint8_t offset = 0;
 80064e8:	2547      	movs	r5, #71	@ 0x47
 80064ea:	197b      	adds	r3, r7, r5
 80064ec:	2200      	movs	r2, #0
 80064ee:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 80064f0:	197b      	adds	r3, r7, r5
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	197a      	adds	r2, r7, r5
 80064f6:	1c59      	adds	r1, r3, #1
 80064f8:	7011      	strb	r1, [r2, #0]
 80064fa:	4a2c      	ldr	r2, [pc, #176]	@ (80065ac <Meas_Init+0x1e4>)
 80064fc:	7814      	ldrb	r4, [r2, #0]
 80064fe:	4a34      	ldr	r2, [pc, #208]	@ (80065d0 <Meas_Init+0x208>)
 8006500:	0119      	lsls	r1, r3, #4
 8006502:	4834      	ldr	r0, [pc, #208]	@ (80065d4 <Meas_Init+0x20c>)
 8006504:	5088      	str	r0, [r1, r2]
 8006506:	4932      	ldr	r1, [pc, #200]	@ (80065d0 <Meas_Init+0x208>)
 8006508:	011a      	lsls	r2, r3, #4
 800650a:	188a      	adds	r2, r1, r2
 800650c:	3204      	adds	r2, #4
 800650e:	4932      	ldr	r1, [pc, #200]	@ (80065d8 <Meas_Init+0x210>)
 8006510:	6011      	str	r1, [r2, #0]
 8006512:	492f      	ldr	r1, [pc, #188]	@ (80065d0 <Meas_Init+0x208>)
 8006514:	011a      	lsls	r2, r3, #4
 8006516:	188a      	adds	r2, r1, r2
 8006518:	3208      	adds	r2, #8
 800651a:	4930      	ldr	r1, [pc, #192]	@ (80065dc <Meas_Init+0x214>)
 800651c:	6011      	str	r1, [r2, #0]
 800651e:	4a2c      	ldr	r2, [pc, #176]	@ (80065d0 <Meas_Init+0x208>)
 8006520:	011b      	lsls	r3, r3, #4
 8006522:	18d3      	adds	r3, r2, r3
 8006524:	330c      	adds	r3, #12
 8006526:	1c22      	adds	r2, r4, #0
 8006528:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 800652a:	197b      	adds	r3, r7, r5
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	197a      	adds	r2, r7, r5
 8006530:	1c59      	adds	r1, r3, #1
 8006532:	7011      	strb	r1, [r2, #0]
 8006534:	4a1d      	ldr	r2, [pc, #116]	@ (80065ac <Meas_Init+0x1e4>)
 8006536:	7854      	ldrb	r4, [r2, #1]
 8006538:	4a25      	ldr	r2, [pc, #148]	@ (80065d0 <Meas_Init+0x208>)
 800653a:	0119      	lsls	r1, r3, #4
 800653c:	4828      	ldr	r0, [pc, #160]	@ (80065e0 <Meas_Init+0x218>)
 800653e:	5088      	str	r0, [r1, r2]
 8006540:	4923      	ldr	r1, [pc, #140]	@ (80065d0 <Meas_Init+0x208>)
 8006542:	011a      	lsls	r2, r3, #4
 8006544:	188a      	adds	r2, r1, r2
 8006546:	3204      	adds	r2, #4
 8006548:	4926      	ldr	r1, [pc, #152]	@ (80065e4 <Meas_Init+0x21c>)
 800654a:	6011      	str	r1, [r2, #0]
 800654c:	4920      	ldr	r1, [pc, #128]	@ (80065d0 <Meas_Init+0x208>)
 800654e:	011a      	lsls	r2, r3, #4
 8006550:	188a      	adds	r2, r1, r2
 8006552:	3208      	adds	r2, #8
 8006554:	4924      	ldr	r1, [pc, #144]	@ (80065e8 <Meas_Init+0x220>)
 8006556:	6011      	str	r1, [r2, #0]
 8006558:	4a1d      	ldr	r2, [pc, #116]	@ (80065d0 <Meas_Init+0x208>)
 800655a:	011b      	lsls	r3, r3, #4
 800655c:	18d3      	adds	r3, r2, r3
 800655e:	330c      	adds	r3, #12
 8006560:	1c22      	adds	r2, r4, #0
 8006562:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 8006564:	197b      	adds	r3, r7, r5
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	197a      	adds	r2, r7, r5
 800656a:	1c59      	adds	r1, r3, #1
 800656c:	7011      	strb	r1, [r2, #0]
 800656e:	4a0f      	ldr	r2, [pc, #60]	@ (80065ac <Meas_Init+0x1e4>)
 8006570:	7894      	ldrb	r4, [r2, #2]
 8006572:	4a17      	ldr	r2, [pc, #92]	@ (80065d0 <Meas_Init+0x208>)
 8006574:	0119      	lsls	r1, r3, #4
 8006576:	481d      	ldr	r0, [pc, #116]	@ (80065ec <Meas_Init+0x224>)
 8006578:	5088      	str	r0, [r1, r2]
 800657a:	4915      	ldr	r1, [pc, #84]	@ (80065d0 <Meas_Init+0x208>)
 800657c:	011a      	lsls	r2, r3, #4
 800657e:	188a      	adds	r2, r1, r2
 8006580:	3204      	adds	r2, #4
 8006582:	491b      	ldr	r1, [pc, #108]	@ (80065f0 <Meas_Init+0x228>)
 8006584:	6011      	str	r1, [r2, #0]
 8006586:	4912      	ldr	r1, [pc, #72]	@ (80065d0 <Meas_Init+0x208>)
 8006588:	011a      	lsls	r2, r3, #4
 800658a:	188a      	adds	r2, r1, r2
 800658c:	3208      	adds	r2, #8
 800658e:	4919      	ldr	r1, [pc, #100]	@ (80065f4 <Meas_Init+0x22c>)
 8006590:	6011      	str	r1, [r2, #0]
 8006592:	4a0f      	ldr	r2, [pc, #60]	@ (80065d0 <Meas_Init+0x208>)
 8006594:	011b      	lsls	r3, r3, #4
 8006596:	18d3      	adds	r3, r2, r3
 8006598:	330c      	adds	r3, #12
 800659a:	1c22      	adds	r2, r4, #0
 800659c:	701a      	strb	r2, [r3, #0]
//  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
}
 800659e:	46c0      	nop			@ (mov r8, r8)
 80065a0:	46bd      	mov	sp, r7
 80065a2:	b012      	add	sp, #72	@ 0x48
 80065a4:	bdb0      	pop	{r4, r5, r7, pc}
 80065a6:	46c0      	nop			@ (mov r8, r8)
 80065a8:	20000e78 	.word	0x20000e78
 80065ac:	20000e70 	.word	0x20000e70
 80065b0:	0801afbc 	.word	0x0801afbc
 80065b4:	0801afec 	.word	0x0801afec
 80065b8:	20000e74 	.word	0x20000e74
 80065bc:	0801aff0 	.word	0x0801aff0
 80065c0:	0801b01c 	.word	0x0801b01c
 80065c4:	0801b020 	.word	0x0801b020
 80065c8:	0801b03c 	.word	0x0801b03c
 80065cc:	50000400 	.word	0x50000400
 80065d0:	20000e40 	.word	0x20000e40
 80065d4:	080062ed 	.word	0x080062ed
 80065d8:	080062fd 	.word	0x080062fd
 80065dc:	20000e3c 	.word	0x20000e3c
 80065e0:	0800631d 	.word	0x0800631d
 80065e4:	0800632d 	.word	0x0800632d
 80065e8:	20000e3d 	.word	0x20000e3d
 80065ec:	08006345 	.word	0x08006345
 80065f0:	0800634f 	.word	0x0800634f
 80065f4:	20000e3e 	.word	0x20000e3e

080065f8 <StartMeasurements>:

void StartMeasurements(void) {
 80065f8:	b580      	push	{r7, lr}
 80065fa:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80065fc:	4b10      	ldr	r3, [pc, #64]	@ (8006640 <StartMeasurements+0x48>)
 80065fe:	2200      	movs	r2, #0
 8006600:	701a      	strb	r2, [r3, #0]
 8006602:	e015      	b.n	8006630 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8006604:	4b0e      	ldr	r3, [pc, #56]	@ (8006640 <StartMeasurements+0x48>)
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	4a0e      	ldr	r2, [pc, #56]	@ (8006644 <StartMeasurements+0x4c>)
 800660a:	011b      	lsls	r3, r3, #4
 800660c:	18d3      	adds	r3, r2, r3
 800660e:	330c      	adds	r3, #12
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d006      	beq.n	8006624 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 8006616:	4b0a      	ldr	r3, [pc, #40]	@ (8006640 <StartMeasurements+0x48>)
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	001a      	movs	r2, r3
 800661c:	4b09      	ldr	r3, [pc, #36]	@ (8006644 <StartMeasurements+0x4c>)
 800661e:	0112      	lsls	r2, r2, #4
 8006620:	58d3      	ldr	r3, [r2, r3]
 8006622:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006624:	4b06      	ldr	r3, [pc, #24]	@ (8006640 <StartMeasurements+0x48>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	3301      	adds	r3, #1
 800662a:	b2da      	uxtb	r2, r3
 800662c:	4b04      	ldr	r3, [pc, #16]	@ (8006640 <StartMeasurements+0x48>)
 800662e:	701a      	strb	r2, [r3, #0]
 8006630:	4b03      	ldr	r3, [pc, #12]	@ (8006640 <StartMeasurements+0x48>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	2b02      	cmp	r3, #2
 8006636:	d9e5      	bls.n	8006604 <StartMeasurements+0xc>
    }
  }
}
 8006638:	46c0      	nop			@ (mov r8, r8)
 800663a:	46c0      	nop			@ (mov r8, r8)
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	20000e7a 	.word	0x20000e7a
 8006644:	20000e40 	.word	0x20000e40

08006648 <Meas_Test>:

void Meas_Test(){
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 800664c:	4b27      	ldr	r3, [pc, #156]	@ (80066ec <Meas_Test+0xa4>)
 800664e:	78db      	ldrb	r3, [r3, #3]
 8006650:	2201      	movs	r2, #1
 8006652:	4053      	eors	r3, r2
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <Meas_Test+0x16>
    ESP_WakeTest();
 800665a:	f7fe f931 	bl	80048c0 <ESP_WakeTest>
  }
  if(!MeasTest.MIC_Tested){
 800665e:	4b23      	ldr	r3, [pc, #140]	@ (80066ec <Meas_Test+0xa4>)
 8006660:	789b      	ldrb	r3, [r3, #2]
 8006662:	2201      	movs	r2, #1
 8006664:	4053      	eors	r3, r2
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	d023      	beq.n	80066b4 <Meas_Test+0x6c>
    if(MIC_IsTestMeasurementDoneWrapper()){
 800666c:	f7ff fe8f 	bl	800638e <MIC_IsTestMeasurementDoneWrapper>
 8006670:	1e03      	subs	r3, r0, #0
 8006672:	d011      	beq.n	8006698 <Meas_Test+0x50>
      MeasTest.MIC_Tested = true;
 8006674:	4b1d      	ldr	r3, [pc, #116]	@ (80066ec <Meas_Test+0xa4>)
 8006676:	2201      	movs	r2, #1
 8006678:	709a      	strb	r2, [r3, #2]
      TIM2 -> CCR1 = 4000;
 800667a:	2380      	movs	r3, #128	@ 0x80
 800667c:	05db      	lsls	r3, r3, #23
 800667e:	22fa      	movs	r2, #250	@ 0xfa
 8006680:	0112      	lsls	r2, r2, #4
 8006682:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 0;
 8006684:	2380      	movs	r3, #128	@ 0x80
 8006686:	05db      	lsls	r3, r3, #23
 8006688:	2200      	movs	r2, #0
 800668a:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 4000;
 800668c:	2380      	movs	r3, #128	@ 0x80
 800668e:	05db      	lsls	r3, r3, #23
 8006690:	22fa      	movs	r2, #250	@ 0xfa
 8006692:	0112      	lsls	r2, r2, #4
 8006694:	641a      	str	r2, [r3, #64]	@ 0x40
 8006696:	e00d      	b.n	80066b4 <Meas_Test+0x6c>
    }
    else{
      TIM2 -> CCR1 = 0;
 8006698:	2380      	movs	r3, #128	@ 0x80
 800669a:	05db      	lsls	r3, r3, #23
 800669c:	2200      	movs	r2, #0
 800669e:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 4000;
 80066a0:	2380      	movs	r3, #128	@ 0x80
 80066a2:	05db      	lsls	r3, r3, #23
 80066a4:	22fa      	movs	r2, #250	@ 0xfa
 80066a6:	0112      	lsls	r2, r2, #4
 80066a8:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 4000;
 80066aa:	2380      	movs	r3, #128	@ 0x80
 80066ac:	05db      	lsls	r3, r3, #23
 80066ae:	22fa      	movs	r2, #250	@ 0xfa
 80066b0:	0112      	lsls	r2, r2, #4
 80066b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 80066b4:	4b0d      	ldr	r3, [pc, #52]	@ (80066ec <Meas_Test+0xa4>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d013      	beq.n	80066e4 <Meas_Test+0x9c>
 80066bc:	4b0b      	ldr	r3, [pc, #44]	@ (80066ec <Meas_Test+0xa4>)
 80066be:	785b      	ldrb	r3, [r3, #1]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00f      	beq.n	80066e4 <Meas_Test+0x9c>
 80066c4:	4b09      	ldr	r3, [pc, #36]	@ (80066ec <Meas_Test+0xa4>)
 80066c6:	78db      	ldrb	r3, [r3, #3]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00b      	beq.n	80066e4 <Meas_Test+0x9c>
 80066cc:	4b07      	ldr	r3, [pc, #28]	@ (80066ec <Meas_Test+0xa4>)
 80066ce:	789b      	ldrb	r3, [r3, #2]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d007      	beq.n	80066e4 <Meas_Test+0x9c>
    Debug("Test completed");
 80066d4:	4a06      	ldr	r2, [pc, #24]	@ (80066f0 <Meas_Test+0xa8>)
 80066d6:	4b07      	ldr	r3, [pc, #28]	@ (80066f4 <Meas_Test+0xac>)
 80066d8:	0019      	movs	r1, r3
 80066da:	2003      	movs	r0, #3
 80066dc:	f002 ff84 	bl	80095e8 <CreateLine>
    SetTestDone();
 80066e0:	f7ff fc9a 	bl	8006018 <SetTestDone>
  }
}
 80066e4:	46c0      	nop			@ (mov r8, r8)
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	46c0      	nop			@ (mov r8, r8)
 80066ec:	20000e74 	.word	0x20000e74
 80066f0:	0801b054 	.word	0x0801b054
 80066f4:	0801b01c 	.word	0x0801b01c

080066f8 <ResetMeasurements>:
void ResetMeasurements(void) {
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 80066fc:	4b0b      	ldr	r3, [pc, #44]	@ (800672c <ResetMeasurements+0x34>)
 80066fe:	2200      	movs	r2, #0
 8006700:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 8006702:	4b0a      	ldr	r3, [pc, #40]	@ (800672c <ResetMeasurements+0x34>)
 8006704:	2200      	movs	r2, #0
 8006706:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 8006708:	4b08      	ldr	r3, [pc, #32]	@ (800672c <ResetMeasurements+0x34>)
 800670a:	2200      	movs	r2, #0
 800670c:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 800670e:	4b07      	ldr	r3, [pc, #28]	@ (800672c <ResetMeasurements+0x34>)
 8006710:	2200      	movs	r2, #0
 8006712:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8006714:	4b05      	ldr	r3, [pc, #20]	@ (800672c <ResetMeasurements+0x34>)
 8006716:	2200      	movs	r2, #0
 8006718:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 800671a:	4b04      	ldr	r3, [pc, #16]	@ (800672c <ResetMeasurements+0x34>)
 800671c:	2200      	movs	r2, #0
 800671e:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 8006720:	4b02      	ldr	r3, [pc, #8]	@ (800672c <ResetMeasurements+0x34>)
 8006722:	2200      	movs	r2, #0
 8006724:	73da      	strb	r2, [r3, #15]
}
 8006726:	46c0      	nop			@ (mov r8, r8)
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	20000e30 	.word	0x20000e30

08006730 <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8006730:	b580      	push	{r7, lr}
 8006732:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006734:	4b18      	ldr	r3, [pc, #96]	@ (8006798 <MeasurementsCompleted+0x68>)
 8006736:	2200      	movs	r2, #0
 8006738:	701a      	strb	r2, [r3, #0]
 800673a:	e024      	b.n	8006786 <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 800673c:	4b16      	ldr	r3, [pc, #88]	@ (8006798 <MeasurementsCompleted+0x68>)
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	4a16      	ldr	r2, [pc, #88]	@ (800679c <MeasurementsCompleted+0x6c>)
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	18d3      	adds	r3, r2, r3
 8006746:	330c      	adds	r3, #12
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d015      	beq.n	800677a <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 800674e:	4b12      	ldr	r3, [pc, #72]	@ (8006798 <MeasurementsCompleted+0x68>)
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	4a12      	ldr	r2, [pc, #72]	@ (800679c <MeasurementsCompleted+0x6c>)
 8006754:	011b      	lsls	r3, r3, #4
 8006756:	18d3      	adds	r3, r2, r3
 8006758:	3304      	adds	r3, #4
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4798      	blx	r3
 800675e:	1e03      	subs	r3, r0, #0
 8006760:	d009      	beq.n	8006776 <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8006762:	4b0d      	ldr	r3, [pc, #52]	@ (8006798 <MeasurementsCompleted+0x68>)
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	4a0d      	ldr	r2, [pc, #52]	@ (800679c <MeasurementsCompleted+0x6c>)
 8006768:	011b      	lsls	r3, r3, #4
 800676a:	18d3      	adds	r3, r2, r3
 800676c:	3308      	adds	r3, #8
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2201      	movs	r2, #1
 8006772:	701a      	strb	r2, [r3, #0]
 8006774:	e001      	b.n	800677a <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8006776:	2300      	movs	r3, #0
 8006778:	e00a      	b.n	8006790 <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 800677a:	4b07      	ldr	r3, [pc, #28]	@ (8006798 <MeasurementsCompleted+0x68>)
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	3301      	adds	r3, #1
 8006780:	b2da      	uxtb	r2, r3
 8006782:	4b05      	ldr	r3, [pc, #20]	@ (8006798 <MeasurementsCompleted+0x68>)
 8006784:	701a      	strb	r2, [r3, #0]
 8006786:	4b04      	ldr	r3, [pc, #16]	@ (8006798 <MeasurementsCompleted+0x68>)
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	2b02      	cmp	r3, #2
 800678c:	d9d6      	bls.n	800673c <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 800678e:	2301      	movs	r3, #1
}
 8006790:	0018      	movs	r0, r3
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	46c0      	nop			@ (mov r8, r8)
 8006798:	20000e7a 	.word	0x20000e7a
 800679c:	20000e40 	.word	0x20000e40

080067a0 <Mic_Upkeep>:

void Mic_Upkeep(){
 80067a0:	b580      	push	{r7, lr}
 80067a2:	af00      	add	r7, sp, #0
  switch(MicState){
 80067a4:	4b20      	ldr	r3, [pc, #128]	@ (8006828 <Mic_Upkeep+0x88>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	2b03      	cmp	r3, #3
 80067aa:	d022      	beq.n	80067f2 <Mic_Upkeep+0x52>
 80067ac:	dc2c      	bgt.n	8006808 <Mic_Upkeep+0x68>
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d00f      	beq.n	80067d2 <Mic_Upkeep+0x32>
 80067b2:	dc29      	bgt.n	8006808 <Mic_Upkeep+0x68>
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d002      	beq.n	80067be <Mic_Upkeep+0x1e>
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d004      	beq.n	80067c6 <Mic_Upkeep+0x26>
 80067bc:	e024      	b.n	8006808 <Mic_Upkeep+0x68>

  case MIC_STATE_INIT:
    //reset if necesarry
    MicState = MIC_STATE_START_MEASUREMENT;
 80067be:	4b1a      	ldr	r3, [pc, #104]	@ (8006828 <Mic_Upkeep+0x88>)
 80067c0:	2201      	movs	r2, #1
 80067c2:	701a      	strb	r2, [r3, #0]
    break;
 80067c4:	e02d      	b.n	8006822 <Mic_Upkeep+0x82>

  case MIC_STATE_START_MEASUREMENT:
    MIC_StartMeasurementWrapper();
 80067c6:	f7ff fdc8 	bl	800635a <MIC_StartMeasurementWrapper>
    MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 80067ca:	4b17      	ldr	r3, [pc, #92]	@ (8006828 <Mic_Upkeep+0x88>)
 80067cc:	2202      	movs	r2, #2
 80067ce:	701a      	strb	r2, [r3, #0]
    break;
 80067d0:	e027      	b.n	8006822 <Mic_Upkeep+0x82>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if(MIC_IsMeasurementDoneWrapper()){
 80067d2:	f7ff fdcd 	bl	8006370 <MIC_IsMeasurementDoneWrapper>
 80067d6:	1e03      	subs	r3, r0, #0
 80067d8:	d020      	beq.n	800681c <Mic_Upkeep+0x7c>
      MicState = MIC_STATE_WAIT;
 80067da:	4b13      	ldr	r3, [pc, #76]	@ (8006828 <Mic_Upkeep+0x88>)
 80067dc:	2203      	movs	r2, #3
 80067de:	701a      	strb	r2, [r3, #0]
      MicStamp = HAL_GetTick() + 1000;
 80067e0:	f003 fa9e 	bl	8009d20 <HAL_GetTick>
 80067e4:	0003      	movs	r3, r0
 80067e6:	22fa      	movs	r2, #250	@ 0xfa
 80067e8:	0092      	lsls	r2, r2, #2
 80067ea:	189a      	adds	r2, r3, r2
 80067ec:	4b0f      	ldr	r3, [pc, #60]	@ (800682c <Mic_Upkeep+0x8c>)
 80067ee:	601a      	str	r2, [r3, #0]
    }
    break;
 80067f0:	e014      	b.n	800681c <Mic_Upkeep+0x7c>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MicStamp)){
 80067f2:	4b0e      	ldr	r3, [pc, #56]	@ (800682c <Mic_Upkeep+0x8c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	0018      	movs	r0, r3
 80067f8:	f002 fea0 	bl	800953c <TimestampIsReached>
 80067fc:	1e03      	subs	r3, r0, #0
 80067fe:	d00f      	beq.n	8006820 <Mic_Upkeep+0x80>
      MicState = MIC_STATE_START_MEASUREMENT;
 8006800:	4b09      	ldr	r3, [pc, #36]	@ (8006828 <Mic_Upkeep+0x88>)
 8006802:	2201      	movs	r2, #1
 8006804:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006806:	e00b      	b.n	8006820 <Mic_Upkeep+0x80>

  default:
    Debug("Unexpected ocurrence happened");
 8006808:	4a09      	ldr	r2, [pc, #36]	@ (8006830 <Mic_Upkeep+0x90>)
 800680a:	4b0a      	ldr	r3, [pc, #40]	@ (8006834 <Mic_Upkeep+0x94>)
 800680c:	0019      	movs	r1, r3
 800680e:	2003      	movs	r0, #3
 8006810:	f002 feea 	bl	80095e8 <CreateLine>
    MicState = MIC_STATE_INIT;
 8006814:	4b04      	ldr	r3, [pc, #16]	@ (8006828 <Mic_Upkeep+0x88>)
 8006816:	2200      	movs	r2, #0
 8006818:	701a      	strb	r2, [r3, #0]
    break;
 800681a:	e002      	b.n	8006822 <Mic_Upkeep+0x82>
    break;
 800681c:	46c0      	nop			@ (mov r8, r8)
 800681e:	e000      	b.n	8006822 <Mic_Upkeep+0x82>
    break;
 8006820:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006822:	46c0      	nop			@ (mov r8, r8)
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	20000e79 	.word	0x20000e79
 800682c:	20000e80 	.word	0x20000e80
 8006830:	0801b064 	.word	0x0801b064
 8006834:	0801b01c 	.word	0x0801b01c

08006838 <Meas_Upkeep>:

void Meas_Upkeep(void) {
 8006838:	b5b0      	push	{r4, r5, r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af04      	add	r7, sp, #16
  switch(MeasState) {
 800683e:	4b3e      	ldr	r3, [pc, #248]	@ (8006938 <Meas_Upkeep+0x100>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	2b06      	cmp	r3, #6
 8006844:	d86d      	bhi.n	8006922 <Meas_Upkeep+0xea>
 8006846:	009a      	lsls	r2, r3, #2
 8006848:	4b3c      	ldr	r3, [pc, #240]	@ (800693c <Meas_Upkeep+0x104>)
 800684a:	18d3      	adds	r3, r2, r3
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:

    Debug("Measurements are turned off.");
 8006850:	4a3b      	ldr	r2, [pc, #236]	@ (8006940 <Meas_Upkeep+0x108>)
 8006852:	4b3c      	ldr	r3, [pc, #240]	@ (8006944 <Meas_Upkeep+0x10c>)
 8006854:	0019      	movs	r1, r3
 8006856:	2003      	movs	r0, #3
 8006858:	f002 fec6 	bl	80095e8 <CreateLine>
    break;
 800685c:	e068      	b.n	8006930 <Meas_Upkeep+0xf8>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 800685e:	f7ff ff4b 	bl	80066f8 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 8006862:	4b35      	ldr	r3, [pc, #212]	@ (8006938 <Meas_Upkeep+0x100>)
 8006864:	2201      	movs	r2, #1
 8006866:	701a      	strb	r2, [r3, #0]
    break;
 8006868:	e062      	b.n	8006930 <Meas_Upkeep+0xf8>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 800686a:	f7ff fec5 	bl	80065f8 <StartMeasurements>
    TIM2 -> CCR3 = 3000;
 800686e:	2380      	movs	r3, #128	@ 0x80
 8006870:	05db      	lsls	r3, r3, #23
 8006872:	4a35      	ldr	r2, [pc, #212]	@ (8006948 <Meas_Upkeep+0x110>)
 8006874:	63da      	str	r2, [r3, #60]	@ 0x3c
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 8006876:	4b30      	ldr	r3, [pc, #192]	@ (8006938 <Meas_Upkeep+0x100>)
 8006878:	2202      	movs	r2, #2
 800687a:	701a      	strb	r2, [r3, #0]
   break;
 800687c:	e058      	b.n	8006930 <Meas_Upkeep+0xf8>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 800687e:	f7ff ff57 	bl	8006730 <MeasurementsCompleted>
 8006882:	1e03      	subs	r3, r0, #0
 8006884:	d051      	beq.n	800692a <Meas_Upkeep+0xf2>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 8006886:	4b2c      	ldr	r3, [pc, #176]	@ (8006938 <Meas_Upkeep+0x100>)
 8006888:	2203      	movs	r2, #3
 800688a:	701a      	strb	r2, [r3, #0]
    }
    break;
 800688c:	e04d      	b.n	800692a <Meas_Upkeep+0xf2>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 800688e:	4a2f      	ldr	r2, [pc, #188]	@ (800694c <Meas_Upkeep+0x114>)
 8006890:	4b2c      	ldr	r3, [pc, #176]	@ (8006944 <Meas_Upkeep+0x10c>)
 8006892:	0019      	movs	r1, r3
 8006894:	2003      	movs	r0, #3
 8006896:	f002 fea7 	bl	80095e8 <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 800689a:	4b2d      	ldr	r3, [pc, #180]	@ (8006950 <Meas_Upkeep+0x118>)
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	4a2d      	ldr	r2, [pc, #180]	@ (8006954 <Meas_Upkeep+0x11c>)
 80068a0:	4928      	ldr	r1, [pc, #160]	@ (8006944 <Meas_Upkeep+0x10c>)
 80068a2:	2003      	movs	r0, #3
 80068a4:	f002 fea0 	bl	80095e8 <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 80068a8:	4b29      	ldr	r3, [pc, #164]	@ (8006950 <Meas_Upkeep+0x118>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	1c18      	adds	r0, r3, #0
 80068ae:	f7fc fd57 	bl	8003360 <__aeabi_f2d>
 80068b2:	0004      	movs	r4, r0
 80068b4:	000d      	movs	r5, r1
 80068b6:	4b26      	ldr	r3, [pc, #152]	@ (8006950 <Meas_Upkeep+0x118>)
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	1c18      	adds	r0, r3, #0
 80068bc:	f7fc fd50 	bl	8003360 <__aeabi_f2d>
 80068c0:	0002      	movs	r2, r0
 80068c2:	000b      	movs	r3, r1
 80068c4:	4824      	ldr	r0, [pc, #144]	@ (8006958 <Meas_Upkeep+0x120>)
 80068c6:	491f      	ldr	r1, [pc, #124]	@ (8006944 <Meas_Upkeep+0x10c>)
 80068c8:	9202      	str	r2, [sp, #8]
 80068ca:	9303      	str	r3, [sp, #12]
 80068cc:	9400      	str	r4, [sp, #0]
 80068ce:	9501      	str	r5, [sp, #4]
 80068d0:	0002      	movs	r2, r0
 80068d2:	2003      	movs	r0, #3
 80068d4:	f002 fe88 	bl	80095e8 <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 80068d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006950 <Meas_Upkeep+0x118>)
 80068da:	6858      	ldr	r0, [r3, #4]
 80068dc:	4b1c      	ldr	r3, [pc, #112]	@ (8006950 <Meas_Upkeep+0x118>)
 80068de:	6819      	ldr	r1, [r3, #0]
 80068e0:	4b1b      	ldr	r3, [pc, #108]	@ (8006950 <Meas_Upkeep+0x118>)
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	001a      	movs	r2, r3
 80068e8:	f7fc feea 	bl	80036c0 <setMeasurement>
    TIM2 -> CCR3 = 4000;
 80068ec:	2380      	movs	r3, #128	@ 0x80
 80068ee:	05db      	lsls	r3, r3, #23
 80068f0:	22fa      	movs	r2, #250	@ 0xfa
 80068f2:	0112      	lsls	r2, r2, #4
 80068f4:	63da      	str	r2, [r3, #60]	@ 0x3c
    MeasStamp = HAL_GetTick() + 10000;
 80068f6:	f003 fa13 	bl	8009d20 <HAL_GetTick>
 80068fa:	0003      	movs	r3, r0
 80068fc:	4a17      	ldr	r2, [pc, #92]	@ (800695c <Meas_Upkeep+0x124>)
 80068fe:	189a      	adds	r2, r3, r2
 8006900:	4b17      	ldr	r3, [pc, #92]	@ (8006960 <Meas_Upkeep+0x128>)
 8006902:	601a      	str	r2, [r3, #0]
    MeasState = MEAS_STATE_WAIT;
 8006904:	4b0c      	ldr	r3, [pc, #48]	@ (8006938 <Meas_Upkeep+0x100>)
 8006906:	2206      	movs	r2, #6
 8006908:	701a      	strb	r2, [r3, #0]
    break;
 800690a:	e011      	b.n	8006930 <Meas_Upkeep+0xf8>

  case MEAS_STATE_WAIT:
    if(TimestampIsReached(MeasStamp)){
 800690c:	4b14      	ldr	r3, [pc, #80]	@ (8006960 <Meas_Upkeep+0x128>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	0018      	movs	r0, r3
 8006912:	f002 fe13 	bl	800953c <TimestampIsReached>
 8006916:	1e03      	subs	r3, r0, #0
 8006918:	d009      	beq.n	800692e <Meas_Upkeep+0xf6>
      MeasState = MEAS_STATE_INIT;
 800691a:	4b07      	ldr	r3, [pc, #28]	@ (8006938 <Meas_Upkeep+0x100>)
 800691c:	2200      	movs	r2, #0
 800691e:	701a      	strb	r2, [r3, #0]
    }

    break;
 8006920:	e005      	b.n	800692e <Meas_Upkeep+0xf6>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8006922:	4b05      	ldr	r3, [pc, #20]	@ (8006938 <Meas_Upkeep+0x100>)
 8006924:	2200      	movs	r2, #0
 8006926:	701a      	strb	r2, [r3, #0]
    break;
 8006928:	e002      	b.n	8006930 <Meas_Upkeep+0xf8>
    break;
 800692a:	46c0      	nop			@ (mov r8, r8)
 800692c:	e000      	b.n	8006930 <Meas_Upkeep+0xf8>
    break;
 800692e:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006930:	46c0      	nop			@ (mov r8, r8)
 8006932:	46bd      	mov	sp, r7
 8006934:	bdb0      	pop	{r4, r5, r7, pc}
 8006936:	46c0      	nop			@ (mov r8, r8)
 8006938:	20000e78 	.word	0x20000e78
 800693c:	0801b7f4 	.word	0x0801b7f4
 8006940:	0801b084 	.word	0x0801b084
 8006944:	0801b01c 	.word	0x0801b01c
 8006948:	00000bb8 	.word	0x00000bb8
 800694c:	0801b0a4 	.word	0x0801b0a4
 8006950:	20000e30 	.word	0x20000e30
 8006954:	0801b0b8 	.word	0x0801b0b8
 8006958:	0801b0d0 	.word	0x0801b0d0
 800695c:	00002710 	.word	0x00002710
 8006960:	20000e7c 	.word	0x20000e7c

08006964 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 8006964:	b590      	push	{r4, r7, lr}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	1d3b      	adds	r3, r7, #4
 800696c:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 800696e:	240f      	movs	r4, #15
 8006970:	193b      	adds	r3, r7, r4
 8006972:	2200      	movs	r2, #0
 8006974:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 8006976:	4b20      	ldr	r3, [pc, #128]	@ (80069f8 <Meas_SetEnabledSensors+0x94>)
 8006978:	1d3a      	adds	r2, r7, #4
 800697a:	6812      	ldr	r2, [r2, #0]
 800697c:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 800697e:	193b      	adds	r3, r7, r4
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	193a      	adds	r2, r7, r4
 8006984:	1c59      	adds	r1, r3, #1
 8006986:	7011      	strb	r1, [r2, #0]
 8006988:	0018      	movs	r0, r3
 800698a:	1d3b      	adds	r3, r7, #4
 800698c:	7819      	ldrb	r1, [r3, #0]
 800698e:	4a1b      	ldr	r2, [pc, #108]	@ (80069fc <Meas_SetEnabledSensors+0x98>)
 8006990:	0103      	lsls	r3, r0, #4
 8006992:	18d3      	adds	r3, r2, r3
 8006994:	330c      	adds	r3, #12
 8006996:	1c0a      	adds	r2, r1, #0
 8006998:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 800699a:	193b      	adds	r3, r7, r4
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	193a      	adds	r2, r7, r4
 80069a0:	1c59      	adds	r1, r3, #1
 80069a2:	7011      	strb	r1, [r2, #0]
 80069a4:	0018      	movs	r0, r3
 80069a6:	1d3b      	adds	r3, r7, #4
 80069a8:	7859      	ldrb	r1, [r3, #1]
 80069aa:	4a14      	ldr	r2, [pc, #80]	@ (80069fc <Meas_SetEnabledSensors+0x98>)
 80069ac:	0103      	lsls	r3, r0, #4
 80069ae:	18d3      	adds	r3, r2, r3
 80069b0:	330c      	adds	r3, #12
 80069b2:	1c0a      	adds	r2, r1, #0
 80069b4:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 80069b6:	193b      	adds	r3, r7, r4
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	193a      	adds	r2, r7, r4
 80069bc:	1c59      	adds	r1, r3, #1
 80069be:	7011      	strb	r1, [r2, #0]
 80069c0:	0018      	movs	r0, r3
 80069c2:	1d3b      	adds	r3, r7, #4
 80069c4:	7899      	ldrb	r1, [r3, #2]
 80069c6:	4a0d      	ldr	r2, [pc, #52]	@ (80069fc <Meas_SetEnabledSensors+0x98>)
 80069c8:	0103      	lsls	r3, r0, #4
 80069ca:	18d3      	adds	r3, r2, r3
 80069cc:	330c      	adds	r3, #12
 80069ce:	1c0a      	adds	r2, r1, #0
 80069d0:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 80069d2:	193b      	adds	r3, r7, r4
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	193a      	adds	r2, r7, r4
 80069d8:	1c59      	adds	r1, r3, #1
 80069da:	7011      	strb	r1, [r2, #0]
 80069dc:	0018      	movs	r0, r3
 80069de:	1d3b      	adds	r3, r7, #4
 80069e0:	78d9      	ldrb	r1, [r3, #3]
 80069e2:	4a06      	ldr	r2, [pc, #24]	@ (80069fc <Meas_SetEnabledSensors+0x98>)
 80069e4:	0103      	lsls	r3, r0, #4
 80069e6:	18d3      	adds	r3, r2, r3
 80069e8:	330c      	adds	r3, #12
 80069ea:	1c0a      	adds	r2, r1, #0
 80069ec:	701a      	strb	r2, [r3, #0]
}
 80069ee:	46c0      	nop			@ (mov r8, r8)
 80069f0:	46bd      	mov	sp, r7
 80069f2:	b005      	add	sp, #20
 80069f4:	bd90      	pop	{r4, r7, pc}
 80069f6:	46c0      	nop			@ (mov r8, r8)
 80069f8:	20000e70 	.word	0x20000e70
 80069fc:	20000e40 	.word	0x20000e40

08006a00 <SetESPMeasurementDone>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}

void SetESPMeasurementDone(){
 8006a00:	b580      	push	{r7, lr}
 8006a02:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 8006a04:	4b02      	ldr	r3, [pc, #8]	@ (8006a10 <SetESPMeasurementDone+0x10>)
 8006a06:	2201      	movs	r2, #1
 8006a08:	70da      	strb	r2, [r3, #3]
}
 8006a0a:	46c0      	nop			@ (mov r8, r8)
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	20000e74 	.word	0x20000e74

08006a14 <MIC_Init>:
float sample[NUMBER_OF_SAMPLES];




void MIC_Init(I2S_HandleTypeDef* i2SHandle) { I2SHandle = i2SHandle; }
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	4b03      	ldr	r3, [pc, #12]	@ (8006a2c <MIC_Init+0x18>)
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	46c0      	nop			@ (mov r8, r8)
 8006a24:	46bd      	mov	sp, r7
 8006a26:	b002      	add	sp, #8
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	46c0      	nop			@ (mov r8, r8)
 8006a2c:	20000e84 	.word	0x20000e84

08006a30 <UpdateSampleRate>:
//  for(uint8_t i = 0;i < NR_SAMPLES_128; i++) {
//    FFTResult[i] *= energyCorrectionFactor;
//  }
//}

static void UpdateSampleRate(uint32_t sampleRate) {
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  if (I2SHandle->Init.AudioFreq == sampleRate) {
 8006a38:	4b0c      	ldr	r3, [pc, #48]	@ (8006a6c <UpdateSampleRate+0x3c>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d00e      	beq.n	8006a62 <UpdateSampleRate+0x32>
    return;
  }

  HAL_I2S_DeInit(I2SHandle);
 8006a44:	4b09      	ldr	r3, [pc, #36]	@ (8006a6c <UpdateSampleRate+0x3c>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	0018      	movs	r0, r3
 8006a4a:	f006 fe27 	bl	800d69c <HAL_I2S_DeInit>
  I2SHandle->Init.AudioFreq = sampleRate;
 8006a4e:	4b07      	ldr	r3, [pc, #28]	@ (8006a6c <UpdateSampleRate+0x3c>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	615a      	str	r2, [r3, #20]
  HAL_I2S_Init(I2SHandle);
 8006a56:	4b05      	ldr	r3, [pc, #20]	@ (8006a6c <UpdateSampleRate+0x3c>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	f006 fd2c 	bl	800d4b8 <HAL_I2S_Init>
 8006a60:	e000      	b.n	8006a64 <UpdateSampleRate+0x34>
    return;
 8006a62:	46c0      	nop			@ (mov r8, r8)
}
 8006a64:	46bd      	mov	sp, r7
 8006a66:	b002      	add	sp, #8
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	46c0      	nop			@ (mov r8, r8)
 8006a6c:	20000e84 	.word	0x20000e84

08006a70 <ConvertAudio>:

static float ConvertAudio(int16_t* data) {
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b088      	sub	sp, #32
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  uint32_t MSP;
  uint32_t LSP;
  int32_t signedAudioValue;
  float Division = 8388607.0; //Reference?
 8006a78:	4b18      	ldr	r3, [pc, #96]	@ (8006adc <ConvertAudio+0x6c>)
 8006a7a:	61bb      	str	r3, [r7, #24]
  float adjustedAudioValue = 0;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	617b      	str	r3, [r7, #20]
  uint32_t audioValue = 0;
 8006a80:	2300      	movs	r3, #0
 8006a82:	61fb      	str	r3, [r7, #28]
  MSP = data[0]<<9;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	5e9b      	ldrsh	r3, [r3, r2]
 8006a8a:	025b      	lsls	r3, r3, #9
 8006a8c:	613b      	str	r3, [r7, #16]
  LSP = (data[1]&0xFF80)>>7;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	3302      	adds	r3, #2
 8006a92:	2200      	movs	r2, #0
 8006a94:	5e9b      	ldrsh	r3, [r3, r2]
 8006a96:	11db      	asrs	r3, r3, #7
 8006a98:	05db      	lsls	r3, r3, #23
 8006a9a:	0ddb      	lsrs	r3, r3, #23
 8006a9c:	60fb      	str	r3, [r7, #12]
  audioValue = MSP | LSP;
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	61fb      	str	r3, [r7, #28]
  if((0x800000 & audioValue) != 0){
 8006aa6:	69fa      	ldr	r2, [r7, #28]
 8006aa8:	2380      	movs	r3, #128	@ 0x80
 8006aaa:	041b      	lsls	r3, r3, #16
 8006aac:	4013      	ands	r3, r2
 8006aae:	d004      	beq.n	8006aba <ConvertAudio+0x4a>
    audioValue = 0xFF000000 | audioValue;
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	22ff      	movs	r2, #255	@ 0xff
 8006ab4:	0612      	lsls	r2, r2, #24
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	61fb      	str	r3, [r7, #28]
  }
  signedAudioValue = (int32_t)audioValue;
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	60bb      	str	r3, [r7, #8]
  adjustedAudioValue = ((float)signedAudioValue/Division);
 8006abe:	68b8      	ldr	r0, [r7, #8]
 8006ac0:	f7fa fd04 	bl	80014cc <__aeabi_i2f>
 8006ac4:	1c03      	adds	r3, r0, #0
 8006ac6:	69b9      	ldr	r1, [r7, #24]
 8006ac8:	1c18      	adds	r0, r3, #0
 8006aca:	f7fa f801 	bl	8000ad0 <__aeabi_fdiv>
 8006ace:	1c03      	adds	r3, r0, #0
 8006ad0:	617b      	str	r3, [r7, #20]
//  if(audioValue < 0){
//    audioValue = 0xFFFFFFFF-audioValue;
//  }
//  dB = 20 * log10(audioValue / Division);

  return adjustedAudioValue;
 8006ad2:	697b      	ldr	r3, [r7, #20]
}
 8006ad4:	1c18      	adds	r0, r3, #0
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	b008      	add	sp, #32
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	4afffffe 	.word	0x4afffffe

08006ae0 <MIC_Start>:
//  arm_rfft_q15(&fft_instance, sample, output);
//  arm_abs_q15(output, output, NUMBER_OF_SAMPLES);
//  GetAllOctaves();
//}

void MIC_Start(uint32_t sampleRate, uint16_t nrSamples) {
 8006ae0:	b5b0      	push	{r4, r5, r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	000a      	movs	r2, r1
 8006aea:	1cbb      	adds	r3, r7, #2
 8006aec:	801a      	strh	r2, [r3, #0]
  if (I2SHandle == NULL) {
 8006aee:	4b20      	ldr	r3, [pc, #128]	@ (8006b70 <MIC_Start+0x90>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d106      	bne.n	8006b04 <MIC_Start+0x24>
    Error("Microphone is not initialised.");
 8006af6:	4a1f      	ldr	r2, [pc, #124]	@ (8006b74 <MIC_Start+0x94>)
 8006af8:	4b1f      	ldr	r3, [pc, #124]	@ (8006b78 <MIC_Start+0x98>)
 8006afa:	0019      	movs	r1, r3
 8006afc:	2001      	movs	r0, #1
 8006afe:	f002 fd73 	bl	80095e8 <CreateLine>
    return;
 8006b02:	e031      	b.n	8006b68 <MIC_Start+0x88>
  }
  TIM2 -> CCR1 = 3000;
 8006b04:	2380      	movs	r3, #128	@ 0x80
 8006b06:	05db      	lsls	r3, r3, #23
 8006b08:	4a1c      	ldr	r2, [pc, #112]	@ (8006b7c <MIC_Start+0x9c>)
 8006b0a:	635a      	str	r2, [r3, #52]	@ 0x34
  Debug("In mic start");
 8006b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8006b80 <MIC_Start+0xa0>)
 8006b0e:	4b1d      	ldr	r3, [pc, #116]	@ (8006b84 <MIC_Start+0xa4>)
 8006b10:	0019      	movs	r1, r3
 8006b12:	2003      	movs	r0, #3
 8006b14:	f002 fd68 	bl	80095e8 <CreateLine>
  UpdateSampleRate(sampleRate);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	0018      	movs	r0, r3
 8006b1c:	f7ff ff88 	bl	8006a30 <UpdateSampleRate>
  Samples = (NrOfSamples)nrSamples;
 8006b20:	4b19      	ldr	r3, [pc, #100]	@ (8006b88 <MIC_Start+0xa8>)
 8006b22:	1cba      	adds	r2, r7, #2
 8006b24:	8812      	ldrh	r2, [r2, #0]
 8006b26:	801a      	strh	r2, [r3, #0]

  //StartTime = GetCurrentHalTicks();
  StartupDoneTime = HAL_GetTick() + 20;
 8006b28:	f003 f8fa 	bl	8009d20 <HAL_GetTick>
 8006b2c:	0003      	movs	r3, r0
 8006b2e:	3314      	adds	r3, #20
 8006b30:	001a      	movs	r2, r3
 8006b32:	4b16      	ldr	r3, [pc, #88]	@ (8006b8c <MIC_Start+0xac>)
 8006b34:	601a      	str	r2, [r3, #0]
  StartUpDone = false;
 8006b36:	4b16      	ldr	r3, [pc, #88]	@ (8006b90 <MIC_Start+0xb0>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	701a      	strb	r2, [r3, #0]
  DataReady = false;
 8006b3c:	4b15      	ldr	r3, [pc, #84]	@ (8006b94 <MIC_Start+0xb4>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, NUMBER_OF_SAMPLES*2);
 8006b42:	4b0b      	ldr	r3, [pc, #44]	@ (8006b70 <MIC_Start+0x90>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	250f      	movs	r5, #15
 8006b48:	197c      	adds	r4, r7, r5
 8006b4a:	2280      	movs	r2, #128	@ 0x80
 8006b4c:	00d2      	lsls	r2, r2, #3
 8006b4e:	4912      	ldr	r1, [pc, #72]	@ (8006b98 <MIC_Start+0xb8>)
 8006b50:	0018      	movs	r0, r3
 8006b52:	f006 fdcf 	bl	800d6f4 <HAL_I2S_Receive_DMA>
 8006b56:	0003      	movs	r3, r0
 8006b58:	7023      	strb	r3, [r4, #0]
//      HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer,
//          Samples >> 1); //>>1 because reading half word

  Info("Status %d", status);
 8006b5a:	197b      	adds	r3, r7, r5
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8006b9c <MIC_Start+0xbc>)
 8006b60:	490f      	ldr	r1, [pc, #60]	@ (8006ba0 <MIC_Start+0xc0>)
 8006b62:	2002      	movs	r0, #2
 8006b64:	f002 fd40 	bl	80095e8 <CreateLine>
}
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	b004      	add	sp, #16
 8006b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8006b6e:	46c0      	nop			@ (mov r8, r8)
 8006b70:	20000e84 	.word	0x20000e84
 8006b74:	0801b104 	.word	0x0801b104
 8006b78:	0801b124 	.word	0x0801b124
 8006b7c:	00000bb8 	.word	0x00000bb8
 8006b80:	0801b128 	.word	0x0801b128
 8006b84:	0801b138 	.word	0x0801b138
 8006b88:	20000064 	.word	0x20000064
 8006b8c:	20001e88 	.word	0x20001e88
 8006b90:	20001e8c 	.word	0x20001e8c
 8006b94:	20001e8d 	.word	0x20001e8d
 8006b98:	20000e88 	.word	0x20000e88
 8006b9c:	0801b13c 	.word	0x0801b13c
 8006ba0:	0801b148 	.word	0x0801b148

08006ba4 <MinimalValue>:

float MinimalValue(uint16_t length){
 8006ba4:	b590      	push	{r4, r7, lr}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	0002      	movs	r2, r0
 8006bac:	1dbb      	adds	r3, r7, #6
 8006bae:	801a      	strh	r2, [r3, #0]
  float MinVal = 1;
 8006bb0:	23fe      	movs	r3, #254	@ 0xfe
 8006bb2:	059b      	lsls	r3, r3, #22
 8006bb4:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 8006bb6:	230a      	movs	r3, #10
 8006bb8:	18fb      	adds	r3, r7, r3
 8006bba:	2200      	movs	r2, #0
 8006bbc:	801a      	strh	r2, [r3, #0]
 8006bbe:	e01c      	b.n	8006bfa <MinimalValue+0x56>
    if(sample[i] < MinVal){
 8006bc0:	240a      	movs	r4, #10
 8006bc2:	193b      	adds	r3, r7, r4
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	5e9a      	ldrsh	r2, [r3, r2]
 8006bc8:	4b12      	ldr	r3, [pc, #72]	@ (8006c14 <MinimalValue+0x70>)
 8006bca:	0092      	lsls	r2, r2, #2
 8006bcc:	58d3      	ldr	r3, [r2, r3]
 8006bce:	1c19      	adds	r1, r3, #0
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f7f9 fc8f 	bl	80004f4 <__aeabi_fcmpgt>
 8006bd6:	1e03      	subs	r3, r0, #0
 8006bd8:	d006      	beq.n	8006be8 <MinimalValue+0x44>
      MinVal = sample[i];
 8006bda:	193b      	adds	r3, r7, r4
 8006bdc:	2200      	movs	r2, #0
 8006bde:	5e9a      	ldrsh	r2, [r3, r2]
 8006be0:	4b0c      	ldr	r3, [pc, #48]	@ (8006c14 <MinimalValue+0x70>)
 8006be2:	0092      	lsls	r2, r2, #2
 8006be4:	58d3      	ldr	r3, [r2, r3]
 8006be6:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 8006be8:	210a      	movs	r1, #10
 8006bea:	187b      	adds	r3, r7, r1
 8006bec:	2200      	movs	r2, #0
 8006bee:	5e9b      	ldrsh	r3, [r3, r2]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	187b      	adds	r3, r7, r1
 8006bf8:	801a      	strh	r2, [r3, #0]
 8006bfa:	230a      	movs	r3, #10
 8006bfc:	18fb      	adds	r3, r7, r3
 8006bfe:	2200      	movs	r2, #0
 8006c00:	5e9a      	ldrsh	r2, [r3, r2]
 8006c02:	1dbb      	adds	r3, r7, #6
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	dbda      	blt.n	8006bc0 <MinimalValue+0x1c>
    }
  }
  return(MinVal);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
}
 8006c0c:	1c18      	adds	r0, r3, #0
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	b005      	add	sp, #20
 8006c12:	bd90      	pop	{r4, r7, pc}
 8006c14:	20001ec4 	.word	0x20001ec4

08006c18 <MaximalValue>:

float MaximalValue(uint16_t length){
 8006c18:	b590      	push	{r4, r7, lr}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	0002      	movs	r2, r0
 8006c20:	1dbb      	adds	r3, r7, #6
 8006c22:	801a      	strh	r2, [r3, #0]
  float MaxVal = -1;
 8006c24:	4b18      	ldr	r3, [pc, #96]	@ (8006c88 <MaximalValue+0x70>)
 8006c26:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 8006c28:	230a      	movs	r3, #10
 8006c2a:	18fb      	adds	r3, r7, r3
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	801a      	strh	r2, [r3, #0]
 8006c30:	e01c      	b.n	8006c6c <MaximalValue+0x54>
    if(sample[i] > MaxVal){
 8006c32:	240a      	movs	r4, #10
 8006c34:	193b      	adds	r3, r7, r4
 8006c36:	2200      	movs	r2, #0
 8006c38:	5e9a      	ldrsh	r2, [r3, r2]
 8006c3a:	4b14      	ldr	r3, [pc, #80]	@ (8006c8c <MaximalValue+0x74>)
 8006c3c:	0092      	lsls	r2, r2, #2
 8006c3e:	58d3      	ldr	r3, [r2, r3]
 8006c40:	1c19      	adds	r1, r3, #0
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f7f9 fc42 	bl	80004cc <__aeabi_fcmplt>
 8006c48:	1e03      	subs	r3, r0, #0
 8006c4a:	d006      	beq.n	8006c5a <MaximalValue+0x42>
      MaxVal = sample[i];
 8006c4c:	193b      	adds	r3, r7, r4
 8006c4e:	2200      	movs	r2, #0
 8006c50:	5e9a      	ldrsh	r2, [r3, r2]
 8006c52:	4b0e      	ldr	r3, [pc, #56]	@ (8006c8c <MaximalValue+0x74>)
 8006c54:	0092      	lsls	r2, r2, #2
 8006c56:	58d3      	ldr	r3, [r2, r3]
 8006c58:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 8006c5a:	210a      	movs	r1, #10
 8006c5c:	187b      	adds	r3, r7, r1
 8006c5e:	2200      	movs	r2, #0
 8006c60:	5e9b      	ldrsh	r3, [r3, r2]
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	3301      	adds	r3, #1
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	187b      	adds	r3, r7, r1
 8006c6a:	801a      	strh	r2, [r3, #0]
 8006c6c:	230a      	movs	r3, #10
 8006c6e:	18fb      	adds	r3, r7, r3
 8006c70:	2200      	movs	r2, #0
 8006c72:	5e9a      	ldrsh	r2, [r3, r2]
 8006c74:	1dbb      	adds	r3, r7, #6
 8006c76:	881b      	ldrh	r3, [r3, #0]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	dbda      	blt.n	8006c32 <MaximalValue+0x1a>
    }
  }
  return(MaxVal);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
}
 8006c7e:	1c18      	adds	r0, r3, #0
 8006c80:	46bd      	mov	sp, r7
 8006c82:	b005      	add	sp, #20
 8006c84:	bd90      	pop	{r4, r7, pc}
 8006c86:	46c0      	nop			@ (mov r8, r8)
 8006c88:	bf800000 	.word	0xbf800000
 8006c8c:	20001ec4 	.word	0x20001ec4

08006c90 <MIC_Check>:
bool MIC_Check(void) {
 8006c90:	b5b0      	push	{r4, r5, r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
  float Max;
  float Min;
  Info("New samples");
 8006c96:	4a25      	ldr	r2, [pc, #148]	@ (8006d2c <MIC_Check+0x9c>)
 8006c98:	4b25      	ldr	r3, [pc, #148]	@ (8006d30 <MIC_Check+0xa0>)
 8006c9a:	0019      	movs	r1, r3
 8006c9c:	2002      	movs	r0, #2
 8006c9e:	f002 fca3 	bl	80095e8 <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006ca2:	230e      	movs	r3, #14
 8006ca4:	18fb      	adds	r3, r7, r3
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	801a      	strh	r2, [r3, #0]
 8006caa:	e016      	b.n	8006cda <MIC_Check+0x4a>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 8006cac:	210e      	movs	r1, #14
 8006cae:	187b      	adds	r3, r7, r1
 8006cb0:	881b      	ldrh	r3, [r3, #0]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	3302      	adds	r3, #2
 8006cb6:	005a      	lsls	r2, r3, #1
 8006cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8006d34 <MIC_Check+0xa4>)
 8006cba:	18d2      	adds	r2, r2, r3
 8006cbc:	000d      	movs	r5, r1
 8006cbe:	187b      	adds	r3, r7, r1
 8006cc0:	881c      	ldrh	r4, [r3, #0]
 8006cc2:	0010      	movs	r0, r2
 8006cc4:	f7ff fed4 	bl	8006a70 <ConvertAudio>
 8006cc8:	1c01      	adds	r1, r0, #0
 8006cca:	4b1b      	ldr	r3, [pc, #108]	@ (8006d38 <MIC_Check+0xa8>)
 8006ccc:	00a2      	lsls	r2, r4, #2
 8006cce:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006cd0:	197b      	adds	r3, r7, r5
 8006cd2:	197a      	adds	r2, r7, r5
 8006cd4:	8812      	ldrh	r2, [r2, #0]
 8006cd6:	3201      	adds	r2, #1
 8006cd8:	801a      	strh	r2, [r3, #0]
 8006cda:	230e      	movs	r3, #14
 8006cdc:	18fb      	adds	r3, r7, r3
 8006cde:	881a      	ldrh	r2, [r3, #0]
 8006ce0:	2380      	movs	r3, #128	@ 0x80
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d3e1      	bcc.n	8006cac <MIC_Check+0x1c>
    //Info("0x%08x", sample);
  }
  Max = MaximalValue(NUMBER_OF_SAMPLES);
 8006ce8:	2380      	movs	r3, #128	@ 0x80
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	0018      	movs	r0, r3
 8006cee:	f7ff ff93 	bl	8006c18 <MaximalValue>
 8006cf2:	1c03      	adds	r3, r0, #0
 8006cf4:	60bb      	str	r3, [r7, #8]
  Min = MinimalValue(NUMBER_OF_SAMPLES);
 8006cf6:	2380      	movs	r3, #128	@ 0x80
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	0018      	movs	r0, r3
 8006cfc:	f7ff ff52 	bl	8006ba4 <MinimalValue>
 8006d00:	1c03      	adds	r3, r0, #0
 8006d02:	607b      	str	r3, [r7, #4]
  if(Max > 0.0 || Min < 0.0){
 8006d04:	2100      	movs	r1, #0
 8006d06:	68b8      	ldr	r0, [r7, #8]
 8006d08:	f7f9 fbf4 	bl	80004f4 <__aeabi_fcmpgt>
 8006d0c:	1e03      	subs	r3, r0, #0
 8006d0e:	d105      	bne.n	8006d1c <MIC_Check+0x8c>
 8006d10:	2100      	movs	r1, #0
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7f9 fbda 	bl	80004cc <__aeabi_fcmplt>
 8006d18:	1e03      	subs	r3, r0, #0
 8006d1a:	d001      	beq.n	8006d20 <MIC_Check+0x90>
    return(true);
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e000      	b.n	8006d22 <MIC_Check+0x92>
  }
  return(false);
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	0018      	movs	r0, r3
 8006d24:	46bd      	mov	sp, r7
 8006d26:	b004      	add	sp, #16
 8006d28:	bdb0      	pop	{r4, r5, r7, pc}
 8006d2a:	46c0      	nop			@ (mov r8, r8)
 8006d2c:	0801b14c 	.word	0x0801b14c
 8006d30:	0801b148 	.word	0x0801b148
 8006d34:	20000e88 	.word	0x20000e88
 8006d38:	20001ec4 	.word	0x20001ec4

08006d3c <MIC_Print>:
void MIC_Print(void) {
 8006d3c:	b590      	push	{r4, r7, lr}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
  Info("New samples");
 8006d42:	4abe      	ldr	r2, [pc, #760]	@ (800703c <MIC_Print+0x300>)
 8006d44:	4bbe      	ldr	r3, [pc, #760]	@ (8007040 <MIC_Print+0x304>)
 8006d46:	0019      	movs	r1, r3
 8006d48:	2002      	movs	r0, #2
 8006d4a:	f002 fc4d 	bl	80095e8 <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006d4e:	1dbb      	adds	r3, r7, #6
 8006d50:	2200      	movs	r2, #0
 8006d52:	801a      	strh	r2, [r3, #0]
 8006d54:	e014      	b.n	8006d80 <MIC_Print+0x44>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 8006d56:	1dbb      	adds	r3, r7, #6
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	3302      	adds	r3, #2
 8006d5e:	005a      	lsls	r2, r3, #1
 8006d60:	4bb8      	ldr	r3, [pc, #736]	@ (8007044 <MIC_Print+0x308>)
 8006d62:	18d2      	adds	r2, r2, r3
 8006d64:	1dbb      	adds	r3, r7, #6
 8006d66:	881c      	ldrh	r4, [r3, #0]
 8006d68:	0010      	movs	r0, r2
 8006d6a:	f7ff fe81 	bl	8006a70 <ConvertAudio>
 8006d6e:	1c01      	adds	r1, r0, #0
 8006d70:	4bb5      	ldr	r3, [pc, #724]	@ (8007048 <MIC_Print+0x30c>)
 8006d72:	00a2      	lsls	r2, r4, #2
 8006d74:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006d76:	1dbb      	adds	r3, r7, #6
 8006d78:	1dba      	adds	r2, r7, #6
 8006d7a:	8812      	ldrh	r2, [r2, #0]
 8006d7c:	3201      	adds	r2, #1
 8006d7e:	801a      	strh	r2, [r3, #0]
 8006d80:	1dbb      	adds	r3, r7, #6
 8006d82:	881a      	ldrh	r2, [r3, #0]
 8006d84:	2380      	movs	r3, #128	@ 0x80
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d3e4      	bcc.n	8006d56 <MIC_Print+0x1a>
    //Info("0x%08x", sample);
  }
  //filter();
  dBc = MIC_GetDB();
 8006d8c:	f000 f9e6 	bl	800715c <MIC_GetDB>
 8006d90:	1c02      	adds	r2, r0, #0
 8006d92:	4bae      	ldr	r3, [pc, #696]	@ (800704c <MIC_Print+0x310>)
 8006d94:	601a      	str	r2, [r3, #0]
  if(counter < 10){
 8006d96:	4bae      	ldr	r3, [pc, #696]	@ (8007050 <MIC_Print+0x314>)
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	2b09      	cmp	r3, #9
 8006d9c:	d80e      	bhi.n	8006dbc <MIC_Print+0x80>
    dBcSamples[counter] = dBc;
 8006d9e:	4bac      	ldr	r3, [pc, #688]	@ (8007050 <MIC_Print+0x314>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	001a      	movs	r2, r3
 8006da4:	4ba9      	ldr	r3, [pc, #676]	@ (800704c <MIC_Print+0x310>)
 8006da6:	6819      	ldr	r1, [r3, #0]
 8006da8:	4baa      	ldr	r3, [pc, #680]	@ (8007054 <MIC_Print+0x318>)
 8006daa:	0092      	lsls	r2, r2, #2
 8006dac:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8006dae:	4ba8      	ldr	r3, [pc, #672]	@ (8007050 <MIC_Print+0x314>)
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	3301      	adds	r3, #1
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	4ba6      	ldr	r3, [pc, #664]	@ (8007050 <MIC_Print+0x314>)
 8006db8:	701a      	strb	r2, [r3, #0]
 8006dba:	e013      	b.n	8006de4 <MIC_Print+0xa8>
  }
  else{
    counter = 0;
 8006dbc:	4ba4      	ldr	r3, [pc, #656]	@ (8007050 <MIC_Print+0x314>)
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	701a      	strb	r2, [r3, #0]
    dBcSamples[counter] = dBc;
 8006dc2:	4ba3      	ldr	r3, [pc, #652]	@ (8007050 <MIC_Print+0x314>)
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	001a      	movs	r2, r3
 8006dc8:	4ba0      	ldr	r3, [pc, #640]	@ (800704c <MIC_Print+0x310>)
 8006dca:	6819      	ldr	r1, [r3, #0]
 8006dcc:	4ba1      	ldr	r3, [pc, #644]	@ (8007054 <MIC_Print+0x318>)
 8006dce:	0092      	lsls	r2, r2, #2
 8006dd0:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8006dd2:	4b9f      	ldr	r3, [pc, #636]	@ (8007050 <MIC_Print+0x314>)
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	4b9d      	ldr	r3, [pc, #628]	@ (8007050 <MIC_Print+0x314>)
 8006ddc:	701a      	strb	r2, [r3, #0]
    averageReached = true;
 8006dde:	4b9e      	ldr	r3, [pc, #632]	@ (8007058 <MIC_Print+0x31c>)
 8006de0:	2201      	movs	r2, #1
 8006de2:	701a      	strb	r2, [r3, #0]
  }
  if(!averageReached){
 8006de4:	4b9c      	ldr	r3, [pc, #624]	@ (8007058 <MIC_Print+0x31c>)
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	2201      	movs	r2, #1
 8006dea:	4053      	eors	r3, r2
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d005      	beq.n	8006dfe <MIC_Print+0xc2>
    setMic(dBc);
 8006df2:	4b96      	ldr	r3, [pc, #600]	@ (800704c <MIC_Print+0x310>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	1c18      	adds	r0, r3, #0
 8006df8:	f7fc fc7e 	bl	80036f8 <setMic>
 8006dfc:	e02d      	b.n	8006e5a <MIC_Print+0x11e>
  }
  else{
    dBcAverage = 0;
 8006dfe:	4b97      	ldr	r3, [pc, #604]	@ (800705c <MIC_Print+0x320>)
 8006e00:	2200      	movs	r2, #0
 8006e02:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++){
 8006e04:	1d7b      	adds	r3, r7, #5
 8006e06:	2200      	movs	r2, #0
 8006e08:	701a      	strb	r2, [r3, #0]
 8006e0a:	e013      	b.n	8006e34 <MIC_Print+0xf8>
      dBcAverage += dBcSamples[i];
 8006e0c:	1d7b      	adds	r3, r7, #5
 8006e0e:	781a      	ldrb	r2, [r3, #0]
 8006e10:	4b90      	ldr	r3, [pc, #576]	@ (8007054 <MIC_Print+0x318>)
 8006e12:	0092      	lsls	r2, r2, #2
 8006e14:	58d2      	ldr	r2, [r2, r3]
 8006e16:	4b91      	ldr	r3, [pc, #580]	@ (800705c <MIC_Print+0x320>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	1c19      	adds	r1, r3, #0
 8006e1c:	1c10      	adds	r0, r2, #0
 8006e1e:	f7f9 fccd 	bl	80007bc <__aeabi_fadd>
 8006e22:	1c03      	adds	r3, r0, #0
 8006e24:	1c1a      	adds	r2, r3, #0
 8006e26:	4b8d      	ldr	r3, [pc, #564]	@ (800705c <MIC_Print+0x320>)
 8006e28:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++){
 8006e2a:	1d7b      	adds	r3, r7, #5
 8006e2c:	781a      	ldrb	r2, [r3, #0]
 8006e2e:	1d7b      	adds	r3, r7, #5
 8006e30:	3201      	adds	r2, #1
 8006e32:	701a      	strb	r2, [r3, #0]
 8006e34:	1d7b      	adds	r3, r7, #5
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	2b09      	cmp	r3, #9
 8006e3a:	d9e7      	bls.n	8006e0c <MIC_Print+0xd0>
    }
    dBcAverage = dBcAverage/10;
 8006e3c:	4b87      	ldr	r3, [pc, #540]	@ (800705c <MIC_Print+0x320>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4987      	ldr	r1, [pc, #540]	@ (8007060 <MIC_Print+0x324>)
 8006e42:	1c18      	adds	r0, r3, #0
 8006e44:	f7f9 fe44 	bl	8000ad0 <__aeabi_fdiv>
 8006e48:	1c03      	adds	r3, r0, #0
 8006e4a:	1c1a      	adds	r2, r3, #0
 8006e4c:	4b83      	ldr	r3, [pc, #524]	@ (800705c <MIC_Print+0x320>)
 8006e4e:	601a      	str	r2, [r3, #0]
    setMic(dBcAverage);
 8006e50:	4b82      	ldr	r3, [pc, #520]	@ (800705c <MIC_Print+0x320>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	1c18      	adds	r0, r3, #0
 8006e56:	f7fc fc4f 	bl	80036f8 <setMic>
  }
  //Currently is set as the individual dBc, should be set to average.
//  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
  if(dBc > 85){ //white
 8006e5a:	4b7c      	ldr	r3, [pc, #496]	@ (800704c <MIC_Print+0x310>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4981      	ldr	r1, [pc, #516]	@ (8007064 <MIC_Print+0x328>)
 8006e60:	1c18      	adds	r0, r3, #0
 8006e62:	f7f9 fb47 	bl	80004f4 <__aeabi_fcmpgt>
 8006e66:	1e03      	subs	r3, r0, #0
 8006e68:	d013      	beq.n	8006e92 <MIC_Print+0x156>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8006e6a:	4b7f      	ldr	r3, [pc, #508]	@ (8007068 <MIC_Print+0x32c>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	2101      	movs	r1, #1
 8006e70:	0018      	movs	r0, r3
 8006e72:	f004 faf4 	bl	800b45e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8006e76:	2380      	movs	r3, #128	@ 0x80
 8006e78:	005b      	lsls	r3, r3, #1
 8006e7a:	487b      	ldr	r0, [pc, #492]	@ (8007068 <MIC_Print+0x32c>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	0019      	movs	r1, r3
 8006e80:	f004 faed 	bl	800b45e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8006e84:	2380      	movs	r3, #128	@ 0x80
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4877      	ldr	r0, [pc, #476]	@ (8007068 <MIC_Print+0x32c>)
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	0019      	movs	r1, r3
 8006e8e:	f004 fae6 	bl	800b45e <HAL_GPIO_WritePin>
  }
  if(dBc < 85 && dBc >= 80){ //red
 8006e92:	4b6e      	ldr	r3, [pc, #440]	@ (800704c <MIC_Print+0x310>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4973      	ldr	r1, [pc, #460]	@ (8007064 <MIC_Print+0x328>)
 8006e98:	1c18      	adds	r0, r3, #0
 8006e9a:	f7f9 fb17 	bl	80004cc <__aeabi_fcmplt>
 8006e9e:	1e03      	subs	r3, r0, #0
 8006ea0:	d01b      	beq.n	8006eda <MIC_Print+0x19e>
 8006ea2:	4b6a      	ldr	r3, [pc, #424]	@ (800704c <MIC_Print+0x310>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4971      	ldr	r1, [pc, #452]	@ (800706c <MIC_Print+0x330>)
 8006ea8:	1c18      	adds	r0, r3, #0
 8006eaa:	f7f9 fb2d 	bl	8000508 <__aeabi_fcmpge>
 8006eae:	1e03      	subs	r3, r0, #0
 8006eb0:	d013      	beq.n	8006eda <MIC_Print+0x19e>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8006eb2:	4b6d      	ldr	r3, [pc, #436]	@ (8007068 <MIC_Print+0x32c>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	2101      	movs	r1, #1
 8006eb8:	0018      	movs	r0, r3
 8006eba:	f004 fad0 	bl	800b45e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8006ebe:	2380      	movs	r3, #128	@ 0x80
 8006ec0:	005b      	lsls	r3, r3, #1
 8006ec2:	4869      	ldr	r0, [pc, #420]	@ (8007068 <MIC_Print+0x32c>)
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	0019      	movs	r1, r3
 8006ec8:	f004 fac9 	bl	800b45e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8006ecc:	2380      	movs	r3, #128	@ 0x80
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4865      	ldr	r0, [pc, #404]	@ (8007068 <MIC_Print+0x32c>)
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	0019      	movs	r1, r3
 8006ed6:	f004 fac2 	bl	800b45e <HAL_GPIO_WritePin>
  }
  if(dBc < 80 && dBc >= 75){//purple
 8006eda:	4b5c      	ldr	r3, [pc, #368]	@ (800704c <MIC_Print+0x310>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4963      	ldr	r1, [pc, #396]	@ (800706c <MIC_Print+0x330>)
 8006ee0:	1c18      	adds	r0, r3, #0
 8006ee2:	f7f9 faf3 	bl	80004cc <__aeabi_fcmplt>
 8006ee6:	1e03      	subs	r3, r0, #0
 8006ee8:	d01b      	beq.n	8006f22 <MIC_Print+0x1e6>
 8006eea:	4b58      	ldr	r3, [pc, #352]	@ (800704c <MIC_Print+0x310>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4960      	ldr	r1, [pc, #384]	@ (8007070 <MIC_Print+0x334>)
 8006ef0:	1c18      	adds	r0, r3, #0
 8006ef2:	f7f9 fb09 	bl	8000508 <__aeabi_fcmpge>
 8006ef6:	1e03      	subs	r3, r0, #0
 8006ef8:	d013      	beq.n	8006f22 <MIC_Print+0x1e6>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8006efa:	4b5b      	ldr	r3, [pc, #364]	@ (8007068 <MIC_Print+0x32c>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	2101      	movs	r1, #1
 8006f00:	0018      	movs	r0, r3
 8006f02:	f004 faac 	bl	800b45e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8006f06:	2380      	movs	r3, #128	@ 0x80
 8006f08:	005b      	lsls	r3, r3, #1
 8006f0a:	4857      	ldr	r0, [pc, #348]	@ (8007068 <MIC_Print+0x32c>)
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	0019      	movs	r1, r3
 8006f10:	f004 faa5 	bl	800b45e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8006f14:	2380      	movs	r3, #128	@ 0x80
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4853      	ldr	r0, [pc, #332]	@ (8007068 <MIC_Print+0x32c>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	0019      	movs	r1, r3
 8006f1e:	f004 fa9e 	bl	800b45e <HAL_GPIO_WritePin>
  }
  if(dBc < 75 && dBc >= 70){//yellow
 8006f22:	4b4a      	ldr	r3, [pc, #296]	@ (800704c <MIC_Print+0x310>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4952      	ldr	r1, [pc, #328]	@ (8007070 <MIC_Print+0x334>)
 8006f28:	1c18      	adds	r0, r3, #0
 8006f2a:	f7f9 facf 	bl	80004cc <__aeabi_fcmplt>
 8006f2e:	1e03      	subs	r3, r0, #0
 8006f30:	d01b      	beq.n	8006f6a <MIC_Print+0x22e>
 8006f32:	4b46      	ldr	r3, [pc, #280]	@ (800704c <MIC_Print+0x310>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	494f      	ldr	r1, [pc, #316]	@ (8007074 <MIC_Print+0x338>)
 8006f38:	1c18      	adds	r0, r3, #0
 8006f3a:	f7f9 fae5 	bl	8000508 <__aeabi_fcmpge>
 8006f3e:	1e03      	subs	r3, r0, #0
 8006f40:	d013      	beq.n	8006f6a <MIC_Print+0x22e>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8006f42:	4b49      	ldr	r3, [pc, #292]	@ (8007068 <MIC_Print+0x32c>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	2101      	movs	r1, #1
 8006f48:	0018      	movs	r0, r3
 8006f4a:	f004 fa88 	bl	800b45e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8006f4e:	2380      	movs	r3, #128	@ 0x80
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	4845      	ldr	r0, [pc, #276]	@ (8007068 <MIC_Print+0x32c>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	0019      	movs	r1, r3
 8006f58:	f004 fa81 	bl	800b45e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8006f5c:	2380      	movs	r3, #128	@ 0x80
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4841      	ldr	r0, [pc, #260]	@ (8007068 <MIC_Print+0x32c>)
 8006f62:	2201      	movs	r2, #1
 8006f64:	0019      	movs	r1, r3
 8006f66:	f004 fa7a 	bl	800b45e <HAL_GPIO_WritePin>
  }
  if(dBc < 70 && dBc >= 65){//Green
 8006f6a:	4b38      	ldr	r3, [pc, #224]	@ (800704c <MIC_Print+0x310>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4941      	ldr	r1, [pc, #260]	@ (8007074 <MIC_Print+0x338>)
 8006f70:	1c18      	adds	r0, r3, #0
 8006f72:	f7f9 faab 	bl	80004cc <__aeabi_fcmplt>
 8006f76:	1e03      	subs	r3, r0, #0
 8006f78:	d01b      	beq.n	8006fb2 <MIC_Print+0x276>
 8006f7a:	4b34      	ldr	r3, [pc, #208]	@ (800704c <MIC_Print+0x310>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	493e      	ldr	r1, [pc, #248]	@ (8007078 <MIC_Print+0x33c>)
 8006f80:	1c18      	adds	r0, r3, #0
 8006f82:	f7f9 fac1 	bl	8000508 <__aeabi_fcmpge>
 8006f86:	1e03      	subs	r3, r0, #0
 8006f88:	d013      	beq.n	8006fb2 <MIC_Print+0x276>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8006f8a:	4b37      	ldr	r3, [pc, #220]	@ (8007068 <MIC_Print+0x32c>)
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	2101      	movs	r1, #1
 8006f90:	0018      	movs	r0, r3
 8006f92:	f004 fa64 	bl	800b45e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8006f96:	2380      	movs	r3, #128	@ 0x80
 8006f98:	005b      	lsls	r3, r3, #1
 8006f9a:	4833      	ldr	r0, [pc, #204]	@ (8007068 <MIC_Print+0x32c>)
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	0019      	movs	r1, r3
 8006fa0:	f004 fa5d 	bl	800b45e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8006fa4:	2380      	movs	r3, #128	@ 0x80
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	482f      	ldr	r0, [pc, #188]	@ (8007068 <MIC_Print+0x32c>)
 8006faa:	2201      	movs	r2, #1
 8006fac:	0019      	movs	r1, r3
 8006fae:	f004 fa56 	bl	800b45e <HAL_GPIO_WritePin>
  }
  if(dBc < 65 && dBc >= 60){//blue
 8006fb2:	4b26      	ldr	r3, [pc, #152]	@ (800704c <MIC_Print+0x310>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4930      	ldr	r1, [pc, #192]	@ (8007078 <MIC_Print+0x33c>)
 8006fb8:	1c18      	adds	r0, r3, #0
 8006fba:	f7f9 fa87 	bl	80004cc <__aeabi_fcmplt>
 8006fbe:	1e03      	subs	r3, r0, #0
 8006fc0:	d01b      	beq.n	8006ffa <MIC_Print+0x2be>
 8006fc2:	4b22      	ldr	r3, [pc, #136]	@ (800704c <MIC_Print+0x310>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	492d      	ldr	r1, [pc, #180]	@ (800707c <MIC_Print+0x340>)
 8006fc8:	1c18      	adds	r0, r3, #0
 8006fca:	f7f9 fa9d 	bl	8000508 <__aeabi_fcmpge>
 8006fce:	1e03      	subs	r3, r0, #0
 8006fd0:	d013      	beq.n	8006ffa <MIC_Print+0x2be>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8006fd2:	4b25      	ldr	r3, [pc, #148]	@ (8007068 <MIC_Print+0x32c>)
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	0018      	movs	r0, r3
 8006fda:	f004 fa40 	bl	800b45e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8006fde:	2380      	movs	r3, #128	@ 0x80
 8006fe0:	005b      	lsls	r3, r3, #1
 8006fe2:	4821      	ldr	r0, [pc, #132]	@ (8007068 <MIC_Print+0x32c>)
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	0019      	movs	r1, r3
 8006fe8:	f004 fa39 	bl	800b45e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8006fec:	2380      	movs	r3, #128	@ 0x80
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	481d      	ldr	r0, [pc, #116]	@ (8007068 <MIC_Print+0x32c>)
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	0019      	movs	r1, r3
 8006ff6:	f004 fa32 	bl	800b45e <HAL_GPIO_WritePin>
  }
  if(dBc < 60){//light blue
 8006ffa:	4b14      	ldr	r3, [pc, #80]	@ (800704c <MIC_Print+0x310>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	491f      	ldr	r1, [pc, #124]	@ (800707c <MIC_Print+0x340>)
 8007000:	1c18      	adds	r0, r3, #0
 8007002:	f7f9 fa63 	bl	80004cc <__aeabi_fcmplt>
 8007006:	1e03      	subs	r3, r0, #0
 8007008:	d100      	bne.n	800700c <MIC_Print+0x2d0>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
  }


  //FFT();
}
 800700a:	e013      	b.n	8007034 <MIC_Print+0x2f8>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 800700c:	4b16      	ldr	r3, [pc, #88]	@ (8007068 <MIC_Print+0x32c>)
 800700e:	2201      	movs	r2, #1
 8007010:	2101      	movs	r1, #1
 8007012:	0018      	movs	r0, r3
 8007014:	f004 fa23 	bl	800b45e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8007018:	2380      	movs	r3, #128	@ 0x80
 800701a:	005b      	lsls	r3, r3, #1
 800701c:	4812      	ldr	r0, [pc, #72]	@ (8007068 <MIC_Print+0x32c>)
 800701e:	2200      	movs	r2, #0
 8007020:	0019      	movs	r1, r3
 8007022:	f004 fa1c 	bl	800b45e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8007026:	2380      	movs	r3, #128	@ 0x80
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	480f      	ldr	r0, [pc, #60]	@ (8007068 <MIC_Print+0x32c>)
 800702c:	2200      	movs	r2, #0
 800702e:	0019      	movs	r1, r3
 8007030:	f004 fa15 	bl	800b45e <HAL_GPIO_WritePin>
}
 8007034:	46c0      	nop			@ (mov r8, r8)
 8007036:	46bd      	mov	sp, r7
 8007038:	b003      	add	sp, #12
 800703a:	bd90      	pop	{r4, r7, pc}
 800703c:	0801b14c 	.word	0x0801b14c
 8007040:	0801b148 	.word	0x0801b148
 8007044:	20000e88 	.word	0x20000e88
 8007048:	20001ec4 	.word	0x20001ec4
 800704c:	20001e90 	.word	0x20001e90
 8007050:	20001ec0 	.word	0x20001ec0
 8007054:	20001e94 	.word	0x20001e94
 8007058:	20001ec1 	.word	0x20001ec1
 800705c:	20001ebc 	.word	0x20001ebc
 8007060:	41200000 	.word	0x41200000
 8007064:	42aa0000 	.word	0x42aa0000
 8007068:	50000400 	.word	0x50000400
 800706c:	42a00000 	.word	0x42a00000
 8007070:	42960000 	.word	0x42960000
 8007074:	428c0000 	.word	0x428c0000
 8007078:	42820000 	.word	0x42820000
 800707c:	42700000 	.word	0x42700000

08007080 <MIC_MeasurementDone>:

bool MIC_MeasurementDone(void) {
 8007080:	b580      	push	{r7, lr}
 8007082:	af00      	add	r7, sp, #0
  if(DataReady) {
 8007084:	4b0c      	ldr	r3, [pc, #48]	@ (80070b8 <MIC_MeasurementDone+0x38>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00f      	beq.n	80070ae <MIC_MeasurementDone+0x2e>
    MIC_Print();
 800708e:	f7ff fe55 	bl	8006d3c <MIC_Print>
    Debug("MIC measurement is done with %i samples.", Samples);
 8007092:	4b0a      	ldr	r3, [pc, #40]	@ (80070bc <MIC_MeasurementDone+0x3c>)
 8007094:	881b      	ldrh	r3, [r3, #0]
 8007096:	4a0a      	ldr	r2, [pc, #40]	@ (80070c0 <MIC_MeasurementDone+0x40>)
 8007098:	490a      	ldr	r1, [pc, #40]	@ (80070c4 <MIC_MeasurementDone+0x44>)
 800709a:	2003      	movs	r0, #3
 800709c:	f002 faa4 	bl	80095e8 <CreateLine>
    TIM2 -> CCR1 = 4000;
 80070a0:	2380      	movs	r3, #128	@ 0x80
 80070a2:	05db      	lsls	r3, r3, #23
 80070a4:	22fa      	movs	r2, #250	@ 0xfa
 80070a6:	0112      	lsls	r2, r2, #4
 80070a8:	635a      	str	r2, [r3, #52]	@ 0x34
    return true;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e000      	b.n	80070b0 <MIC_MeasurementDone+0x30>
  }
  return false;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	0018      	movs	r0, r3
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	46c0      	nop			@ (mov r8, r8)
 80070b8:	20001e8d 	.word	0x20001e8d
 80070bc:	20000064 	.word	0x20000064
 80070c0:	0801b158 	.word	0x0801b158
 80070c4:	0801b138 	.word	0x0801b138

080070c8 <MIC_TestMeasurementDone>:
bool MIC_TestMeasurementDone(void) {
 80070c8:	b590      	push	{r4, r7, lr}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
  bool Check;
  if(DataReady) {
 80070ce:	4b0b      	ldr	r3, [pc, #44]	@ (80070fc <MIC_TestMeasurementDone+0x34>)
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00c      	beq.n	80070f2 <MIC_TestMeasurementDone+0x2a>
    Check = MIC_Check();
 80070d8:	1dfc      	adds	r4, r7, #7
 80070da:	f7ff fdd9 	bl	8006c90 <MIC_Check>
 80070de:	0003      	movs	r3, r0
 80070e0:	7023      	strb	r3, [r4, #0]
    TIM2 -> CCR1 = 4000;
 80070e2:	2380      	movs	r3, #128	@ 0x80
 80070e4:	05db      	lsls	r3, r3, #23
 80070e6:	22fa      	movs	r2, #250	@ 0xfa
 80070e8:	0112      	lsls	r2, r2, #4
 80070ea:	635a      	str	r2, [r3, #52]	@ 0x34
    return Check;
 80070ec:	1dfb      	adds	r3, r7, #7
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	e000      	b.n	80070f4 <MIC_TestMeasurementDone+0x2c>
  }
  return false;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	0018      	movs	r0, r3
 80070f6:	46bd      	mov	sp, r7
 80070f8:	b003      	add	sp, #12
 80070fa:	bd90      	pop	{r4, r7, pc}
 80070fc:	20001e8d 	.word	0x20001e8d

08007100 <HAL_I2S_RxCpltCallback>:


// #TODO Also include half full callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef* hi2s) {
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  if (hi2s != I2SHandle)
 8007108:	4b10      	ldr	r3, [pc, #64]	@ (800714c <HAL_I2S_RxCpltCallback+0x4c>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	429a      	cmp	r2, r3
 8007110:	d118      	bne.n	8007144 <HAL_I2S_RxCpltCallback+0x44>
    return;

  if (StartUpDone) {
 8007112:	4b0f      	ldr	r3, [pc, #60]	@ (8007150 <HAL_I2S_RxCpltCallback+0x50>)
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	d008      	beq.n	800712e <HAL_I2S_RxCpltCallback+0x2e>
    HAL_I2S_DMAStop(I2SHandle);
 800711c:	4b0b      	ldr	r3, [pc, #44]	@ (800714c <HAL_I2S_RxCpltCallback+0x4c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	0018      	movs	r0, r3
 8007122:	f006 fba9 	bl	800d878 <HAL_I2S_DMAStop>
    DataReady = true;
 8007126:	4b0b      	ldr	r3, [pc, #44]	@ (8007154 <HAL_I2S_RxCpltCallback+0x54>)
 8007128:	2201      	movs	r2, #1
 800712a:	701a      	strb	r2, [r3, #0]
 800712c:	e00b      	b.n	8007146 <HAL_I2S_RxCpltCallback+0x46>
    // MIC trigger pin is used to debug when the measurement has started.
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
    // TODO: Use different pin for MIC_Trigger.
  } else if (TimestampIsReached(StartupDoneTime)) {
 800712e:	4b0a      	ldr	r3, [pc, #40]	@ (8007158 <HAL_I2S_RxCpltCallback+0x58>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	0018      	movs	r0, r3
 8007134:	f002 fa02 	bl	800953c <TimestampIsReached>
 8007138:	1e03      	subs	r3, r0, #0
 800713a:	d004      	beq.n	8007146 <HAL_I2S_RxCpltCallback+0x46>
    StartUpDone = true;
 800713c:	4b04      	ldr	r3, [pc, #16]	@ (8007150 <HAL_I2S_RxCpltCallback+0x50>)
 800713e:	2201      	movs	r2, #1
 8007140:	701a      	strb	r2, [r3, #0]
 8007142:	e000      	b.n	8007146 <HAL_I2S_RxCpltCallback+0x46>
    return;
 8007144:	46c0      	nop			@ (mov r8, r8)
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_SET);
  }
}
 8007146:	46bd      	mov	sp, r7
 8007148:	b002      	add	sp, #8
 800714a:	bd80      	pop	{r7, pc}
 800714c:	20000e84 	.word	0x20000e84
 8007150:	20001e8c 	.word	0x20001e8c
 8007154:	20001e8d 	.word	0x20001e8d
 8007158:	20001e88 	.word	0x20001e88

0800715c <MIC_GetDB>:

float MIC_GetDB(void) {
 800715c:	b590      	push	{r4, r7, lr}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
    float sum = 0.0f;
 8007162:	2300      	movs	r3, #0
 8007164:	60fb      	str	r3, [r7, #12]
    float dBValue = 0.0f;
 8007166:	2300      	movs	r3, #0
 8007168:	607b      	str	r3, [r7, #4]

    // Calculate the sum of the magnitudes in FFTResult
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 800716a:	230a      	movs	r3, #10
 800716c:	18fb      	adds	r3, r7, r3
 800716e:	2280      	movs	r2, #128	@ 0x80
 8007170:	0052      	lsls	r2, r2, #1
 8007172:	801a      	strh	r2, [r3, #0]
 8007174:	e019      	b.n	80071aa <MIC_GetDB+0x4e>
      // Sum of squares of magnitudes
      sum += sample[i]*sample[i];
 8007176:	240a      	movs	r4, #10
 8007178:	193b      	adds	r3, r7, r4
 800717a:	881a      	ldrh	r2, [r3, #0]
 800717c:	4b2b      	ldr	r3, [pc, #172]	@ (800722c <MIC_GetDB+0xd0>)
 800717e:	0092      	lsls	r2, r2, #2
 8007180:	58d0      	ldr	r0, [r2, r3]
 8007182:	193b      	adds	r3, r7, r4
 8007184:	881a      	ldrh	r2, [r3, #0]
 8007186:	4b29      	ldr	r3, [pc, #164]	@ (800722c <MIC_GetDB+0xd0>)
 8007188:	0092      	lsls	r2, r2, #2
 800718a:	58d3      	ldr	r3, [r2, r3]
 800718c:	1c19      	adds	r1, r3, #0
 800718e:	f7f9 fe85 	bl	8000e9c <__aeabi_fmul>
 8007192:	1c03      	adds	r3, r0, #0
 8007194:	1c19      	adds	r1, r3, #0
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f7f9 fb10 	bl	80007bc <__aeabi_fadd>
 800719c:	1c03      	adds	r3, r0, #0
 800719e:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 80071a0:	193b      	adds	r3, r7, r4
 80071a2:	881a      	ldrh	r2, [r3, #0]
 80071a4:	193b      	adds	r3, r7, r4
 80071a6:	3201      	adds	r2, #1
 80071a8:	801a      	strh	r2, [r3, #0]
 80071aa:	230a      	movs	r3, #10
 80071ac:	18fb      	adds	r3, r7, r3
 80071ae:	881a      	ldrh	r2, [r3, #0]
 80071b0:	2380      	movs	r3, #128	@ 0x80
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d3de      	bcc.n	8007176 <MIC_GetDB+0x1a>
    }

    // Calculate the root mean square (RMS)
    float rms = sqrt(sum/(float)(NUMBER_OF_SAMPLES/2));
 80071b8:	2187      	movs	r1, #135	@ 0x87
 80071ba:	05c9      	lsls	r1, r1, #23
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f7f9 fc87 	bl	8000ad0 <__aeabi_fdiv>
 80071c2:	1c03      	adds	r3, r0, #0
 80071c4:	1c18      	adds	r0, r3, #0
 80071c6:	f7fc f8cb 	bl	8003360 <__aeabi_f2d>
 80071ca:	0002      	movs	r2, r0
 80071cc:	000b      	movs	r3, r1
 80071ce:	0010      	movs	r0, r2
 80071d0:	0019      	movs	r1, r3
 80071d2:	f012 ff51 	bl	801a078 <sqrt>
 80071d6:	0002      	movs	r2, r0
 80071d8:	000b      	movs	r3, r1
 80071da:	0010      	movs	r0, r2
 80071dc:	0019      	movs	r1, r3
 80071de:	f7fc f907 	bl	80033f0 <__aeabi_d2f>
 80071e2:	1c03      	adds	r3, r0, #0
 80071e4:	603b      	str	r3, [r7, #0]

    // Convert the RMS value to dB
    dBValue = 20.0f * log10(rms) +120.0;
 80071e6:	6838      	ldr	r0, [r7, #0]
 80071e8:	f7fc f8ba 	bl	8003360 <__aeabi_f2d>
 80071ec:	0002      	movs	r2, r0
 80071ee:	000b      	movs	r3, r1
 80071f0:	0010      	movs	r0, r2
 80071f2:	0019      	movs	r1, r3
 80071f4:	f012 ff0a 	bl	801a00c <log10>
 80071f8:	2200      	movs	r2, #0
 80071fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007230 <MIC_GetDB+0xd4>)
 80071fc:	f7fb f99c 	bl	8002538 <__aeabi_dmul>
 8007200:	0002      	movs	r2, r0
 8007202:	000b      	movs	r3, r1
 8007204:	0010      	movs	r0, r2
 8007206:	0019      	movs	r1, r3
 8007208:	2200      	movs	r2, #0
 800720a:	4b0a      	ldr	r3, [pc, #40]	@ (8007234 <MIC_GetDB+0xd8>)
 800720c:	f7fa f9ec 	bl	80015e8 <__aeabi_dadd>
 8007210:	0002      	movs	r2, r0
 8007212:	000b      	movs	r3, r1
 8007214:	0010      	movs	r0, r2
 8007216:	0019      	movs	r1, r3
 8007218:	f7fc f8ea 	bl	80033f0 <__aeabi_d2f>
 800721c:	1c03      	adds	r3, r0, #0
 800721e:	607b      	str	r3, [r7, #4]

    return dBValue;
 8007220:	687b      	ldr	r3, [r7, #4]
}
 8007222:	1c18      	adds	r0, r3, #0
 8007224:	46bd      	mov	sp, r7
 8007226:	b005      	add	sp, #20
 8007228:	bd90      	pop	{r4, r7, pc}
 800722a:	46c0      	nop			@ (mov r8, r8)
 800722c:	20001ec4 	.word	0x20001ec4
 8007230:	40340000 	.word	0x40340000
 8007234:	405e0000 	.word	0x405e0000

08007238 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800723c:	4b11      	ldr	r3, [pc, #68]	@ (8007284 <MX_RTC_Init+0x4c>)
 800723e:	4a12      	ldr	r2, [pc, #72]	@ (8007288 <MX_RTC_Init+0x50>)
 8007240:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007242:	4b10      	ldr	r3, [pc, #64]	@ (8007284 <MX_RTC_Init+0x4c>)
 8007244:	2200      	movs	r2, #0
 8007246:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007248:	4b0e      	ldr	r3, [pc, #56]	@ (8007284 <MX_RTC_Init+0x4c>)
 800724a:	227f      	movs	r2, #127	@ 0x7f
 800724c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800724e:	4b0d      	ldr	r3, [pc, #52]	@ (8007284 <MX_RTC_Init+0x4c>)
 8007250:	22ff      	movs	r2, #255	@ 0xff
 8007252:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007254:	4b0b      	ldr	r3, [pc, #44]	@ (8007284 <MX_RTC_Init+0x4c>)
 8007256:	2200      	movs	r2, #0
 8007258:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800725a:	4b0a      	ldr	r3, [pc, #40]	@ (8007284 <MX_RTC_Init+0x4c>)
 800725c:	2200      	movs	r2, #0
 800725e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007260:	4b08      	ldr	r3, [pc, #32]	@ (8007284 <MX_RTC_Init+0x4c>)
 8007262:	2200      	movs	r2, #0
 8007264:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007266:	4b07      	ldr	r3, [pc, #28]	@ (8007284 <MX_RTC_Init+0x4c>)
 8007268:	2200      	movs	r2, #0
 800726a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800726c:	4b05      	ldr	r3, [pc, #20]	@ (8007284 <MX_RTC_Init+0x4c>)
 800726e:	0018      	movs	r0, r3
 8007270:	f009 fa24 	bl	80106bc <HAL_RTC_Init>
 8007274:	1e03      	subs	r3, r0, #0
 8007276:	d001      	beq.n	800727c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8007278:	f7ff f832 	bl	80062e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800727c:	46c0      	nop			@ (mov r8, r8)
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	46c0      	nop			@ (mov r8, r8)
 8007284:	200026c4 	.word	0x200026c4
 8007288:	40002800 	.word	0x40002800

0800728c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a06      	ldr	r2, [pc, #24]	@ (80072b4 <HAL_RTC_MspInit+0x28>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d106      	bne.n	80072ac <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800729e:	4b06      	ldr	r3, [pc, #24]	@ (80072b8 <HAL_RTC_MspInit+0x2c>)
 80072a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80072a2:	4b05      	ldr	r3, [pc, #20]	@ (80072b8 <HAL_RTC_MspInit+0x2c>)
 80072a4:	2180      	movs	r1, #128	@ 0x80
 80072a6:	02c9      	lsls	r1, r1, #11
 80072a8:	430a      	orrs	r2, r1
 80072aa:	651a      	str	r2, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80072ac:	46c0      	nop			@ (mov r8, r8)
 80072ae:	46bd      	mov	sp, r7
 80072b0:	b002      	add	sp, #8
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	40002800 	.word	0x40002800
 80072b8:	40021000 	.word	0x40021000

080072bc <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	68ba      	ldr	r2, [r7, #8]
 80072cc:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d113      	bne.n	8007302 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	22fe      	movs	r2, #254	@ 0xfe
 80072de:	0592      	lsls	r2, r2, #22
 80072e0:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	4a1a      	ldr	r2, [pc, #104]	@ (8007350 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 80072e6:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	4a1a      	ldr	r2, [pc, #104]	@ (8007354 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 80072ec:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	4a19      	ldr	r2, [pc, #100]	@ (8007358 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 80072f2:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4a19      	ldr	r2, [pc, #100]	@ (800735c <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 80072f8:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	4a18      	ldr	r2, [pc, #96]	@ (8007360 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 80072fe:	61da      	str	r2, [r3, #28]
 8007300:	e011      	b.n	8007326 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	4a17      	ldr	r2, [pc, #92]	@ (8007364 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8007306:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	4a17      	ldr	r2, [pc, #92]	@ (8007368 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800730c:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	4a16      	ldr	r2, [pc, #88]	@ (800736c <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 8007312:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	4a16      	ldr	r2, [pc, #88]	@ (8007370 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8007318:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	4a15      	ldr	r2, [pc, #84]	@ (8007374 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800731e:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	4a15      	ldr	r2, [pc, #84]	@ (8007378 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8007324:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	4a14      	ldr	r2, [pc, #80]	@ (800737c <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800732a:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	4a14      	ldr	r2, [pc, #80]	@ (8007380 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8007330:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	4a12      	ldr	r2, [pc, #72]	@ (8007380 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8007336:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4a12      	ldr	r2, [pc, #72]	@ (8007384 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800733c:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	0018      	movs	r0, r3
 8007342:	f000 f831 	bl	80073a8 <GasIndexAlgorithm_reset>
}
 8007346:	46c0      	nop			@ (mov r8, r8)
 8007348:	46bd      	mov	sp, r7
 800734a:	b004      	add	sp, #16
 800734c:	bd80      	pop	{r7, pc}
 800734e:	46c0      	nop			@ (mov r8, r8)
 8007350:	00002710 	.word	0x00002710
 8007354:	44340000 	.word	0x44340000
 8007358:	46859800 	.word	0x46859800
 800735c:	46a05000 	.word	0x46a05000
 8007360:	41f00000 	.word	0x41f00000
 8007364:	42c80000 	.word	0x42c80000
 8007368:	00004e20 	.word	0x00004e20
 800736c:	43340000 	.word	0x43340000
 8007370:	4528c000 	.word	0x4528c000
 8007374:	45a32000 	.word	0x45a32000
 8007378:	43aa0000 	.word	0x43aa0000
 800737c:	43660000 	.word	0x43660000
 8007380:	41400000 	.word	0x41400000
 8007384:	42480000 	.word	0x42480000

08007388 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 8007392:	22fe      	movs	r2, #254	@ 0xfe
 8007394:	0592      	lsls	r2, r2, #22
 8007396:	6839      	ldr	r1, [r7, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	0018      	movs	r0, r3
 800739c:	f7ff ff8e 	bl	80072bc <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 80073a0:	46c0      	nop			@ (mov r8, r8)
 80073a2:	46bd      	mov	sp, r7
 80073a4:	b002      	add	sp, #8
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	0018      	movs	r0, r3
 80073c6:	f000 f805 	bl	80073d4 <GasIndexAlgorithm__init_instances>
}
 80073ca:	46c0      	nop			@ (mov r8, r8)
 80073cc:	46bd      	mov	sp, r7
 80073ce:	b002      	add	sp, #8
 80073d0:	bd80      	pop	{r7, pc}
	...

080073d4 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 80073d4:	b590      	push	{r4, r7, lr}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	0018      	movs	r0, r3
 80073e0:	f000 f8e8 	bl	80075b4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	0018      	movs	r0, r3
 80073e8:	f000 f9a6 	bl	8007738 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 80073ec:	1c04      	adds	r4, r0, #0
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	0018      	movs	r0, r3
 80073f2:	f000 f9ab 	bl	800774c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 80073f6:	1c02      	adds	r2, r0, #0
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	1c21      	adds	r1, r4, #0
 80073fc:	0018      	movs	r0, r3
 80073fe:	f000 fc3b 	bl	8007c78 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b01      	cmp	r3, #1
 8007408:	d107      	bne.n	800741a <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800740a:	23fe      	movs	r3, #254	@ 0xfe
 800740c:	059b      	lsls	r3, r3, #22
 800740e:	4a0a      	ldr	r2, [pc, #40]	@ (8007438 <GasIndexAlgorithm__init_instances+0x64>)
 8007410:	490a      	ldr	r1, [pc, #40]	@ (800743c <GasIndexAlgorithm__init_instances+0x68>)
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fc86 	bl	8007d24 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 8007418:	e005      	b.n	8007426 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800741a:	4b09      	ldr	r3, [pc, #36]	@ (8007440 <GasIndexAlgorithm__init_instances+0x6c>)
 800741c:	4a09      	ldr	r2, [pc, #36]	@ (8007444 <GasIndexAlgorithm__init_instances+0x70>)
 800741e:	490a      	ldr	r1, [pc, #40]	@ (8007448 <GasIndexAlgorithm__init_instances+0x74>)
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fc7f 	bl	8007d24 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	0018      	movs	r0, r3
 800742a:	f000 fd35 	bl	8007e98 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800742e:	46c0      	nop			@ (mov r8, r8)
 8007430:	46bd      	mov	sp, r7
 8007432:	b003      	add	sp, #12
 8007434:	bd90      	pop	{r4, r7, pc}
 8007436:	46c0      	nop			@ (mov r8, r8)
 8007438:	bc257a78 	.word	0xbc257a78
 800743c:	44198000 	.word	0x44198000
 8007440:	42c80000 	.word	0x42c80000
 8007444:	bbd4fdf4 	.word	0xbbd4fdf4
 8007448:	43550000 	.word	0x43550000

0800744c <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800744c:	b590      	push	{r4, r7, lr}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800745c:	4952      	ldr	r1, [pc, #328]	@ (80075a8 <GasIndexAlgorithm_process+0x15c>)
 800745e:	1c18      	adds	r0, r3, #0
 8007460:	f7f9 f83e 	bl	80004e0 <__aeabi_fcmple>
 8007464:	1e03      	subs	r3, r0, #0
 8007466:	d00c      	beq.n	8007482 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	1c19      	adds	r1, r3, #0
 8007472:	1c10      	adds	r0, r2, #0
 8007474:	f7f9 f9a2 	bl	80007bc <__aeabi_fadd>
 8007478:	1c03      	adds	r3, r0, #0
 800747a:	1c1a      	adds	r2, r3, #0
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007480:	e080      	b.n	8007584 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	2b00      	cmp	r3, #0
 8007486:	dd25      	ble.n	80074d4 <GasIndexAlgorithm_process+0x88>
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	4a48      	ldr	r2, [pc, #288]	@ (80075ac <GasIndexAlgorithm_process+0x160>)
 800748c:	4293      	cmp	r3, r2
 800748e:	dc21      	bgt.n	80074d4 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	429a      	cmp	r2, r3
 8007498:	dc04      	bgt.n	80074a4 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	3301      	adds	r3, #1
 80074a0:	60bb      	str	r3, [r7, #8]
 80074a2:	e00d      	b.n	80074c0 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	4a41      	ldr	r2, [pc, #260]	@ (80075b0 <GasIndexAlgorithm_process+0x164>)
 80074aa:	4694      	mov	ip, r2
 80074ac:	4463      	add	r3, ip
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	dd05      	ble.n	80074c0 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	4a3d      	ldr	r2, [pc, #244]	@ (80075b0 <GasIndexAlgorithm_process+0x164>)
 80074ba:	4694      	mov	ip, r2
 80074bc:	4463      	add	r3, ip
 80074be:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	0018      	movs	r0, r3
 80074ca:	f7f9 ffff 	bl	80014cc <__aeabi_i2f>
 80074ce:	1c02      	adds	r2, r0, #0
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d005      	beq.n	80074e8 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	0018      	movs	r0, r3
 80074e0:	f000 f945 	bl	800776e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 80074e4:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 80074e6:	d014      	beq.n	8007512 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	1c11      	adds	r1, r2, #0
 80074f0:	0018      	movs	r0, r3
 80074f2:	f000 fbd1 	bl	8007c98 <GasIndexAlgorithm__mox_model__process>
 80074f6:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	1c11      	adds	r1, r2, #0
 8007504:	0018      	movs	r0, r3
 8007506:	f000 fc25 	bl	8007d54 <GasIndexAlgorithm__sigmoid_scaled__process>
 800750a:	1c02      	adds	r2, r0, #0
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007510:	e003      	b.n	800751a <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	689a      	ldr	r2, [r3, #8]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	1c11      	adds	r1, r2, #0
 8007522:	0018      	movs	r0, r3
 8007524:	f000 fcec 	bl	8007f00 <GasIndexAlgorithm__adaptive_lowpass__process>
 8007528:	1c02      	adds	r2, r0, #0
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007532:	21fc      	movs	r1, #252	@ 0xfc
 8007534:	0589      	lsls	r1, r1, #22
 8007536:	1c18      	adds	r0, r3, #0
 8007538:	f7f8 ffc8 	bl	80004cc <__aeabi_fcmplt>
 800753c:	1e03      	subs	r3, r0, #0
 800753e:	d003      	beq.n	8007548 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	22fc      	movs	r2, #252	@ 0xfc
 8007544:	0592      	lsls	r2, r2, #22
 8007546:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800754c:	2100      	movs	r1, #0
 800754e:	1c18      	adds	r0, r3, #0
 8007550:	f7f8 ffd0 	bl	80004f4 <__aeabi_fcmpgt>
 8007554:	1e03      	subs	r3, r0, #0
 8007556:	d015      	beq.n	8007584 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	1c11      	adds	r1, r2, #0
 8007560:	0018      	movs	r0, r3
 8007562:	f000 fa4f 	bl	8007a04 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	0018      	movs	r0, r3
 800756a:	f000 f8e5 	bl	8007738 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800756e:	1c04      	adds	r4, r0, #0
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	0018      	movs	r0, r3
 8007574:	f000 f8ea 	bl	800774c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8007578:	1c02      	adds	r2, r0, #0
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	1c21      	adds	r1, r4, #0
 800757e:	0018      	movs	r0, r3
 8007580:	f000 fb7a 	bl	8007c78 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007588:	21fc      	movs	r1, #252	@ 0xfc
 800758a:	0589      	lsls	r1, r1, #22
 800758c:	1c18      	adds	r0, r3, #0
 800758e:	f7f9 f915 	bl	80007bc <__aeabi_fadd>
 8007592:	1c03      	adds	r3, r0, #0
 8007594:	1c18      	adds	r0, r3, #0
 8007596:	f7f9 ff79 	bl	800148c <__aeabi_f2iz>
 800759a:	0002      	movs	r2, r0
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	601a      	str	r2, [r3, #0]
    return;
 80075a0:	46c0      	nop			@ (mov r8, r8)
}
 80075a2:	46bd      	mov	sp, r7
 80075a4:	b005      	add	sp, #20
 80075a6:	bd90      	pop	{r4, r7, pc}
 80075a8:	42340000 	.word	0x42340000
 80075ac:	0000fde7 	.word	0x0000fde7
 80075b0:	00007fff 	.word	0x00007fff

080075b4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 80075b4:	b5b0      	push	{r4, r5, r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	223c      	movs	r2, #60	@ 0x3c
 80075c0:	2100      	movs	r1, #0
 80075c2:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	4952      	ldr	r1, [pc, #328]	@ (8007728 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80075de:	1c18      	adds	r0, r3, #0
 80075e0:	f7f9 fa76 	bl	8000ad0 <__aeabi_fdiv>
 80075e4:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80075e6:	2188      	movs	r1, #136	@ 0x88
 80075e8:	05c9      	lsls	r1, r1, #23
 80075ea:	1c18      	adds	r0, r3, #0
 80075ec:	f7f9 fc56 	bl	8000e9c <__aeabi_fmul>
 80075f0:	1c03      	adds	r3, r0, #0
 80075f2:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	494a      	ldr	r1, [pc, #296]	@ (8007728 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80075fe:	1c18      	adds	r0, r3, #0
 8007600:	f7f9 fa66 	bl	8000ad0 <__aeabi_fdiv>
 8007604:	1c03      	adds	r3, r0, #0
 8007606:	1c19      	adds	r1, r3, #0
 8007608:	1c20      	adds	r0, r4, #0
 800760a:	f7f9 f8d7 	bl	80007bc <__aeabi_fadd>
 800760e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8007610:	1c19      	adds	r1, r3, #0
 8007612:	1c28      	adds	r0, r5, #0
 8007614:	f7f9 fa5c 	bl	8000ad0 <__aeabi_fdiv>
 8007618:	1c03      	adds	r3, r0, #0
 800761a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	4940      	ldr	r1, [pc, #256]	@ (8007728 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8007626:	1c18      	adds	r0, r3, #0
 8007628:	f7f9 fa52 	bl	8000ad0 <__aeabi_fdiv>
 800762c:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800762e:	2185      	movs	r1, #133	@ 0x85
 8007630:	05c9      	lsls	r1, r1, #23
 8007632:	1c18      	adds	r0, r3, #0
 8007634:	f7f9 fc32 	bl	8000e9c <__aeabi_fmul>
 8007638:	1c03      	adds	r3, r0, #0
 800763a:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	4938      	ldr	r1, [pc, #224]	@ (8007728 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8007646:	1c18      	adds	r0, r3, #0
 8007648:	f7f9 fa42 	bl	8000ad0 <__aeabi_fdiv>
 800764c:	1c03      	adds	r3, r0, #0
 800764e:	1c19      	adds	r1, r3, #0
 8007650:	1c20      	adds	r0, r4, #0
 8007652:	f7f9 f8b3 	bl	80007bc <__aeabi_fadd>
 8007656:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8007658:	1c19      	adds	r1, r3, #0
 800765a:	1c28      	adds	r0, r5, #0
 800765c:	f7f9 fa38 	bl	8000ad0 <__aeabi_fdiv>
 8007660:	1c03      	adds	r3, r0, #0
 8007662:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d118      	bne.n	80076a2 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8007674:	2188      	movs	r1, #136	@ 0x88
 8007676:	05c9      	lsls	r1, r1, #23
 8007678:	1c18      	adds	r0, r3, #0
 800767a:	f7f9 fc0f 	bl	8000e9c <__aeabi_fmul>
 800767e:	1c03      	adds	r3, r0, #0
 8007680:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 8007686:	4929      	ldr	r1, [pc, #164]	@ (800772c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8007688:	1c18      	adds	r0, r3, #0
 800768a:	f7f9 f897 	bl	80007bc <__aeabi_fadd>
 800768e:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8007690:	1c19      	adds	r1, r3, #0
 8007692:	1c20      	adds	r0, r4, #0
 8007694:	f7f9 fa1c 	bl	8000ad0 <__aeabi_fdiv>
 8007698:	1c03      	adds	r3, r0, #0
 800769a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	655a      	str	r2, [r3, #84]	@ 0x54
 80076a0:	e017      	b.n	80076d2 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80076a6:	2188      	movs	r1, #136	@ 0x88
 80076a8:	05c9      	lsls	r1, r1, #23
 80076aa:	1c18      	adds	r0, r3, #0
 80076ac:	f7f9 fbf6 	bl	8000e9c <__aeabi_fmul>
 80076b0:	1c03      	adds	r3, r0, #0
 80076b2:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 80076b8:	491d      	ldr	r1, [pc, #116]	@ (8007730 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 80076ba:	1c18      	adds	r0, r3, #0
 80076bc:	f7f9 f87e 	bl	80007bc <__aeabi_fadd>
 80076c0:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 80076c2:	1c19      	adds	r1, r3, #0
 80076c4:	1c20      	adds	r0, r4, #0
 80076c6:	f7f9 fa03 	bl	8000ad0 <__aeabi_fdiv>
 80076ca:	1c03      	adds	r3, r0, #0
 80076cc:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80076d6:	2185      	movs	r1, #133	@ 0x85
 80076d8:	05c9      	lsls	r1, r1, #23
 80076da:	1c18      	adds	r0, r3, #0
 80076dc:	f7f9 fbde 	bl	8000e9c <__aeabi_fmul>
 80076e0:	1c03      	adds	r3, r0, #0
 80076e2:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	4912      	ldr	r1, [pc, #72]	@ (8007734 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 80076ea:	1c18      	adds	r0, r3, #0
 80076ec:	f7f9 f866 	bl	80007bc <__aeabi_fadd>
 80076f0:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 80076f2:	1c19      	adds	r1, r3, #0
 80076f4:	1c20      	adds	r0, r4, #0
 80076f6:	f7f9 f9eb 	bl	8000ad0 <__aeabi_fdiv>
 80076fa:	1c03      	adds	r3, r0, #0
 80076fc:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8007720:	46c0      	nop			@ (mov r8, r8)
 8007722:	46bd      	mov	sp, r7
 8007724:	b002      	add	sp, #8
 8007726:	bdb0      	pop	{r4, r5, r7, pc}
 8007728:	45610000 	.word	0x45610000
 800772c:	44960000 	.word	0x44960000
 8007730:	41a00000 	.word	0x41a00000
 8007734:	451c4000 	.word	0x451c4000

08007738 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8007744:	1c18      	adds	r0, r3, #0
 8007746:	46bd      	mov	sp, r7
 8007748:	b002      	add	sp, #8
 800774a:	bd80      	pop	{r7, pc}

0800774c <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800775c:	1c19      	adds	r1, r3, #0
 800775e:	1c10      	adds	r0, r2, #0
 8007760:	f7f9 f82c 	bl	80007bc <__aeabi_fadd>
 8007764:	1c03      	adds	r3, r0, #0
}
 8007766:	1c18      	adds	r0, r3, #0
 8007768:	46bd      	mov	sp, r7
 800776a:	b002      	add	sp, #8
 800776c:	bd80      	pop	{r7, pc}

0800776e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800776e:	b580      	push	{r7, lr}
 8007770:	b082      	sub	sp, #8
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	223c      	movs	r2, #60	@ 0x3c
 800777a:	5c9b      	ldrb	r3, [r3, r2]
}
 800777c:	0018      	movs	r0, r3
 800777e:	46bd      	mov	sp, r7
 8007780:	b002      	add	sp, #8
 8007782:	bd80      	pop	{r7, pc}

08007784 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8007784:	b5b0      	push	{r4, r5, r7, lr}
 8007786:	b08c      	sub	sp, #48	@ 0x30
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8007790:	1c19      	adds	r1, r3, #0
 8007792:	4895      	ldr	r0, [pc, #596]	@ (80079e8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8007794:	f7f9 fcc0 	bl	8001118 <__aeabi_fsub>
 8007798:	1c03      	adds	r3, r0, #0
 800779a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077a0:	1c19      	adds	r1, r3, #0
 80077a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077a4:	f7f8 fea6 	bl	80004f4 <__aeabi_fcmpgt>
 80077a8:	1e03      	subs	r3, r0, #0
 80077aa:	d00b      	beq.n	80077c4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80077b4:	1c19      	adds	r1, r3, #0
 80077b6:	1c10      	adds	r0, r2, #0
 80077b8:	f7f9 f800 	bl	80007bc <__aeabi_fadd>
 80077bc:	1c03      	adds	r3, r0, #0
 80077be:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077c8:	1c19      	adds	r1, r3, #0
 80077ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80077cc:	f7f8 fe92 	bl	80004f4 <__aeabi_fcmpgt>
 80077d0:	1e03      	subs	r3, r0, #0
 80077d2:	d00b      	beq.n	80077ec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80077dc:	1c19      	adds	r1, r3, #0
 80077de:	1c10      	adds	r0, r2, #0
 80077e0:	f7f8 ffec 	bl	80007bc <__aeabi_fadd>
 80077e4:	1c03      	adds	r3, r0, #0
 80077e6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6959      	ldr	r1, [r3, #20]
 80077f0:	4a7e      	ldr	r2, [pc, #504]	@ (80079ec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	0018      	movs	r0, r3
 80077f6:	f000 f9f1 	bl	8007bdc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	1c11      	adds	r1, r2, #0
 8007802:	0018      	movs	r0, r3
 8007804:	f000 f9fa 	bl	8007bfc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007808:	1c03      	adds	r3, r0, #0
 800780a:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8007818:	1c19      	adds	r1, r3, #0
 800781a:	1c10      	adds	r0, r2, #0
 800781c:	f7f9 fc7c 	bl	8001118 <__aeabi_fsub>
 8007820:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8007822:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007824:	1c18      	adds	r0, r3, #0
 8007826:	f7f9 fb39 	bl	8000e9c <__aeabi_fmul>
 800782a:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800782c:	1c19      	adds	r1, r3, #0
 800782e:	1c20      	adds	r0, r4, #0
 8007830:	f7f8 ffc4 	bl	80007bc <__aeabi_fadd>
 8007834:	1c03      	adds	r3, r0, #0
 8007836:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8007840:	1c19      	adds	r1, r3, #0
 8007842:	486b      	ldr	r0, [pc, #428]	@ (80079f0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8007844:	f7f9 fc68 	bl	8001118 <__aeabi_fsub>
 8007848:	1c03      	adds	r3, r0, #0
 800784a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	1c11      	adds	r1, r2, #0
 8007854:	0018      	movs	r0, r3
 8007856:	f000 f9d1 	bl	8007bfc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800785a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800785c:	1c19      	adds	r1, r3, #0
 800785e:	1c28      	adds	r0, r5, #0
 8007860:	f7f9 fb1c 	bl	8000e9c <__aeabi_fmul>
 8007864:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8007866:	1c19      	adds	r1, r3, #0
 8007868:	1c20      	adds	r0, r4, #0
 800786a:	f7f8 ffa7 	bl	80007bc <__aeabi_fadd>
 800786e:	1c03      	adds	r3, r0, #0
 8007870:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007872:	4a60      	ldr	r2, [pc, #384]	@ (80079f4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8007874:	6a39      	ldr	r1, [r7, #32]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	0018      	movs	r0, r3
 800787a:	f000 f9af 	bl	8007bdc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	1c11      	adds	r1, r2, #0
 8007886:	0018      	movs	r0, r3
 8007888:	f000 f9b8 	bl	8007bfc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800788c:	1c03      	adds	r3, r0, #0
 800788e:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8007890:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007892:	69f8      	ldr	r0, [r7, #28]
 8007894:	f7f9 fb02 	bl	8000e9c <__aeabi_fmul>
 8007898:	1c03      	adds	r3, r0, #0
 800789a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6999      	ldr	r1, [r3, #24]
 80078a4:	4a51      	ldr	r2, [pc, #324]	@ (80079ec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	0018      	movs	r0, r3
 80078aa:	f000 f997 	bl	8007bdc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	1c11      	adds	r1, r2, #0
 80078b6:	0018      	movs	r0, r3
 80078b8:	f000 f9a0 	bl	8007bfc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80078bc:	1c03      	adds	r3, r0, #0
 80078be:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80078cc:	1c19      	adds	r1, r3, #0
 80078ce:	1c10      	adds	r0, r2, #0
 80078d0:	f7f9 fc22 	bl	8001118 <__aeabi_fsub>
 80078d4:	1c03      	adds	r3, r0, #0
 80078d6:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 80078d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078da:	69b8      	ldr	r0, [r7, #24]
 80078dc:	f7f9 fc1c 	bl	8001118 <__aeabi_fsub>
 80078e0:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80078e2:	1c19      	adds	r1, r3, #0
 80078e4:	1c28      	adds	r0, r5, #0
 80078e6:	f7f9 fad9 	bl	8000e9c <__aeabi_fmul>
 80078ea:	1c03      	adds	r3, r0, #0
    gamma_variance =
 80078ec:	1c19      	adds	r1, r3, #0
 80078ee:	1c20      	adds	r0, r4, #0
 80078f0:	f7f8 ff64 	bl	80007bc <__aeabi_fadd>
 80078f4:	1c03      	adds	r3, r0, #0
 80078f6:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8007900:	1c19      	adds	r1, r3, #0
 8007902:	483b      	ldr	r0, [pc, #236]	@ (80079f0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8007904:	f7f9 fc08 	bl	8001118 <__aeabi_fsub>
 8007908:	1c03      	adds	r3, r0, #0
 800790a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	1c11      	adds	r1, r2, #0
 8007914:	0018      	movs	r0, r3
 8007916:	f000 f971 	bl	8007bfc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800791a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800791c:	1c19      	adds	r1, r3, #0
 800791e:	1c28      	adds	r0, r5, #0
 8007920:	f7f9 fabc 	bl	8000e9c <__aeabi_fmul>
 8007924:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 8007926:	1c19      	adds	r1, r3, #0
 8007928:	1c20      	adds	r0, r4, #0
 800792a:	f7f8 ff47 	bl	80007bc <__aeabi_fadd>
 800792e:	1c03      	adds	r3, r0, #0
 8007930:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007932:	4a30      	ldr	r2, [pc, #192]	@ (80079f4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8007934:	6939      	ldr	r1, [r7, #16]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	0018      	movs	r0, r3
 800793a:	f000 f94f 	bl	8007bdc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	1c11      	adds	r1, r2, #0
 8007946:	0018      	movs	r0, r3
 8007948:	f000 f958 	bl	8007bfc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800794c:	1c03      	adds	r3, r0, #0
 800794e:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8007950:	6979      	ldr	r1, [r7, #20]
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f7f9 faa2 	bl	8000e9c <__aeabi_fmul>
 8007958:	1c03      	adds	r3, r0, #0
 800795a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	4923      	ldr	r1, [pc, #140]	@ (80079f8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800796a:	1c18      	adds	r0, r3, #0
 800796c:	f7f9 f8b0 	bl	8000ad0 <__aeabi_fdiv>
 8007970:	1c03      	adds	r3, r0, #0
 8007972:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8007974:	69f9      	ldr	r1, [r7, #28]
 8007976:	20fe      	movs	r0, #254	@ 0xfe
 8007978:	0580      	lsls	r0, r0, #22
 800797a:	f7f9 fbcd 	bl	8001118 <__aeabi_fsub>
 800797e:	1c03      	adds	r3, r0, #0
 8007980:	491e      	ldr	r1, [pc, #120]	@ (80079fc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 8007982:	1c18      	adds	r0, r3, #0
 8007984:	f7f9 fa8a 	bl	8000e9c <__aeabi_fmul>
 8007988:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800798a:	491d      	ldr	r1, [pc, #116]	@ (8007a00 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800798c:	1c18      	adds	r0, r3, #0
 800798e:	f7f9 fbc3 	bl	8001118 <__aeabi_fsub>
 8007992:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8007994:	1c19      	adds	r1, r3, #0
 8007996:	1c28      	adds	r0, r5, #0
 8007998:	f7f9 fa80 	bl	8000e9c <__aeabi_fmul>
 800799c:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800799e:	1c19      	adds	r1, r3, #0
 80079a0:	1c20      	adds	r0, r4, #0
 80079a2:	f7f8 ff0b 	bl	80007bc <__aeabi_fadd>
 80079a6:	1c03      	adds	r3, r0, #0
 80079a8:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079b2:	2100      	movs	r1, #0
 80079b4:	1c18      	adds	r0, r3, #0
 80079b6:	f7f8 fd89 	bl	80004cc <__aeabi_fcmplt>
 80079ba:	1e03      	subs	r3, r0, #0
 80079bc:	d002      	beq.n	80079c4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80079cc:	1c19      	adds	r1, r3, #0
 80079ce:	1c10      	adds	r0, r2, #0
 80079d0:	f7f8 fd90 	bl	80004f4 <__aeabi_fcmpgt>
 80079d4:	1e03      	subs	r3, r0, #0
 80079d6:	d100      	bne.n	80079da <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 80079d8:	e002      	b.n	80079e0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80079e0:	46c0      	nop			@ (mov r8, r8)
 80079e2:	46bd      	mov	sp, r7
 80079e4:	b00c      	add	sp, #48	@ 0x30
 80079e6:	bdb0      	pop	{r4, r5, r7, pc}
 80079e8:	46fffe00 	.word	0x46fffe00
 80079ec:	3c23d70a 	.word	0x3c23d70a
 80079f0:	43ff0000 	.word	0x43ff0000
 80079f4:	3db851ec 	.word	0x3db851ec
 80079f8:	42700000 	.word	0x42700000
 80079fc:	3fa66666 	.word	0x3fa66666
 8007a00:	3e99999a 	.word	0x3e99999a

08007a04 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8007a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a06:	b087      	sub	sp, #28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	223c      	movs	r2, #60	@ 0x3c
 8007a12:	5c9b      	ldrb	r3, [r3, r2]
 8007a14:	2201      	movs	r2, #1
 8007a16:	4053      	eors	r3, r2
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00a      	beq.n	8007a34 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	223c      	movs	r2, #60	@ 0x3c
 8007a22:	2101      	movs	r1, #1
 8007a24:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	683a      	ldr	r2, [r7, #0]
 8007a2a:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 8007a32:	e0c8      	b.n	8007bc6 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a38:	4965      	ldr	r1, [pc, #404]	@ (8007bd0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8007a3a:	1c18      	adds	r0, r3, #0
 8007a3c:	f7f8 fd64 	bl	8000508 <__aeabi_fcmpge>
 8007a40:	1e03      	subs	r3, r0, #0
 8007a42:	d107      	bne.n	8007a54 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8007a48:	4962      	ldr	r1, [pc, #392]	@ (8007bd4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8007a4a:	1c18      	adds	r0, r3, #0
 8007a4c:	f7f8 fd48 	bl	80004e0 <__aeabi_fcmple>
 8007a50:	1e03      	subs	r3, r0, #0
 8007a52:	d00e      	beq.n	8007a72 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8007a5c:	1c19      	adds	r1, r3, #0
 8007a5e:	1c10      	adds	r0, r2, #0
 8007a60:	f7f8 feac 	bl	80007bc <__aeabi_fadd>
 8007a64:	1c03      	adds	r3, r0, #0
 8007a66:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a76:	1c19      	adds	r1, r3, #0
 8007a78:	6838      	ldr	r0, [r7, #0]
 8007a7a:	f7f9 fb4d 	bl	8001118 <__aeabi_fsub>
 8007a7e:	1c03      	adds	r3, r0, #0
 8007a80:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	0018      	movs	r0, r3
 8007a86:	f7ff fe7d 	bl	8007784 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a8e:	1c19      	adds	r1, r3, #0
 8007a90:	6838      	ldr	r0, [r7, #0]
 8007a92:	f7f9 fb41 	bl	8001118 <__aeabi_fsub>
 8007a96:	1c03      	adds	r3, r0, #0
 8007a98:	2185      	movs	r1, #133	@ 0x85
 8007a9a:	05c9      	lsls	r1, r1, #23
 8007a9c:	1c18      	adds	r0, r3, #0
 8007a9e:	f7f9 f817 	bl	8000ad0 <__aeabi_fdiv>
 8007aa2:	1c03      	adds	r3, r0, #0
 8007aa4:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f7f8 fd0f 	bl	80004cc <__aeabi_fcmplt>
 8007aae:	1e03      	subs	r3, r0, #0
 8007ab0:	d008      	beq.n	8007ac4 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ab6:	68f9      	ldr	r1, [r7, #12]
 8007ab8:	1c18      	adds	r0, r3, #0
 8007aba:	f7f9 fb2d 	bl	8001118 <__aeabi_fsub>
 8007abe:	1c03      	adds	r3, r0, #0
 8007ac0:	617b      	str	r3, [r7, #20]
 8007ac2:	e007      	b.n	8007ad4 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ac8:	1c19      	adds	r1, r3, #0
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f7f8 fe76 	bl	80007bc <__aeabi_fadd>
 8007ad0:	1c03      	adds	r3, r0, #0
 8007ad2:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 8007ad4:	23fe      	movs	r3, #254	@ 0xfe
 8007ad6:	059b      	lsls	r3, r3, #22
 8007ad8:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8007ada:	493f      	ldr	r1, [pc, #252]	@ (8007bd8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007adc:	6978      	ldr	r0, [r7, #20]
 8007ade:	f7f8 fd09 	bl	80004f4 <__aeabi_fcmpgt>
 8007ae2:	1e03      	subs	r3, r0, #0
 8007ae4:	d010      	beq.n	8007b08 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 8007ae6:	493c      	ldr	r1, [pc, #240]	@ (8007bd8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007ae8:	6978      	ldr	r0, [r7, #20]
 8007aea:	f7f8 fff1 	bl	8000ad0 <__aeabi_fdiv>
 8007aee:	1c03      	adds	r3, r0, #0
 8007af0:	1c1c      	adds	r4, r3, #0
 8007af2:	4939      	ldr	r1, [pc, #228]	@ (8007bd8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007af4:	6978      	ldr	r0, [r7, #20]
 8007af6:	f7f8 ffeb 	bl	8000ad0 <__aeabi_fdiv>
 8007afa:	1c03      	adds	r3, r0, #0
 8007afc:	1c19      	adds	r1, r3, #0
 8007afe:	1c20      	adds	r0, r4, #0
 8007b00:	f7f9 f9cc 	bl	8000e9c <__aeabi_fmul>
 8007b04:	1c03      	adds	r3, r0, #0
 8007b06:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8007b0c:	1c19      	adds	r1, r3, #0
 8007b0e:	2085      	movs	r0, #133	@ 0x85
 8007b10:	05c0      	lsls	r0, r0, #23
 8007b12:	f7f9 fb01 	bl	8001118 <__aeabi_fsub>
 8007b16:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8007b18:	6939      	ldr	r1, [r7, #16]
 8007b1a:	1c18      	adds	r0, r3, #0
 8007b1c:	f7f9 f9be 	bl	8000e9c <__aeabi_fmul>
 8007b20:	1c03      	adds	r3, r0, #0
 8007b22:	1c18      	adds	r0, r3, #0
 8007b24:	f012 faf6 	bl	801a114 <sqrtf>
 8007b28:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8007b32:	2185      	movs	r1, #133	@ 0x85
 8007b34:	05c9      	lsls	r1, r1, #23
 8007b36:	6938      	ldr	r0, [r7, #16]
 8007b38:	f7f9 f9b0 	bl	8000e9c <__aeabi_fmul>
 8007b3c:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8007b3e:	1c19      	adds	r1, r3, #0
 8007b40:	1c28      	adds	r0, r5, #0
 8007b42:	f7f8 ffc5 	bl	8000ad0 <__aeabi_fdiv>
 8007b46:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8007b48:	1c19      	adds	r1, r3, #0
 8007b4a:	1c20      	adds	r0, r4, #0
 8007b4c:	f7f9 f9a6 	bl	8000e9c <__aeabi_fmul>
 8007b50:	1c03      	adds	r3, r0, #0
 8007b52:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b58:	68f9      	ldr	r1, [r7, #12]
 8007b5a:	1c18      	adds	r0, r3, #0
 8007b5c:	f7f9 f99e 	bl	8000e9c <__aeabi_fmul>
 8007b60:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8007b62:	6939      	ldr	r1, [r7, #16]
 8007b64:	1c18      	adds	r0, r3, #0
 8007b66:	f7f8 ffb3 	bl	8000ad0 <__aeabi_fdiv>
 8007b6a:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8007b6c:	68f9      	ldr	r1, [r7, #12]
 8007b6e:	1c18      	adds	r0, r3, #0
 8007b70:	f7f9 f994 	bl	8000e9c <__aeabi_fmul>
 8007b74:	1c03      	adds	r3, r0, #0
             sqrtf(
 8007b76:	1c19      	adds	r1, r3, #0
 8007b78:	1c20      	adds	r0, r4, #0
 8007b7a:	f7f8 fe1f 	bl	80007bc <__aeabi_fadd>
 8007b7e:	1c03      	adds	r3, r0, #0
 8007b80:	1c18      	adds	r0, r3, #0
 8007b82:	f012 fac7 	bl	801a114 <sqrtf>
 8007b86:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007b88:	1c19      	adds	r1, r3, #0
 8007b8a:	1c30      	adds	r0, r6, #0
 8007b8c:	f7f9 f986 	bl	8000e9c <__aeabi_fmul>
 8007b90:	1c03      	adds	r3, r0, #0
 8007b92:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ba0:	68f9      	ldr	r1, [r7, #12]
 8007ba2:	1c18      	adds	r0, r3, #0
 8007ba4:	f7f9 f97a 	bl	8000e9c <__aeabi_fmul>
 8007ba8:	1c03      	adds	r3, r0, #0
 8007baa:	2182      	movs	r1, #130	@ 0x82
 8007bac:	05c9      	lsls	r1, r1, #23
 8007bae:	1c18      	adds	r0, r3, #0
 8007bb0:	f7f8 ff8e 	bl	8000ad0 <__aeabi_fdiv>
 8007bb4:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 8007bb6:	1c19      	adds	r1, r3, #0
 8007bb8:	1c20      	adds	r0, r4, #0
 8007bba:	f7f8 fdff 	bl	80007bc <__aeabi_fadd>
 8007bbe:	1c03      	adds	r3, r0, #0
 8007bc0:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007bc6:	46c0      	nop			@ (mov r8, r8)
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	b007      	add	sp, #28
 8007bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bce:	46c0      	nop			@ (mov r8, r8)
 8007bd0:	42c80000 	.word	0x42c80000
 8007bd4:	c2c80000 	.word	0xc2c80000
 8007bd8:	44b40000 	.word	0x44b40000

08007bdc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007bf4:	46c0      	nop			@ (mov r8, r8)
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	b004      	add	sp, #16
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8007bfc:	b590      	push	{r4, r7, lr}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c0e:	1c19      	adds	r1, r3, #0
 8007c10:	6838      	ldr	r0, [r7, #0]
 8007c12:	f7f9 fa81 	bl	8001118 <__aeabi_fsub>
 8007c16:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8007c18:	1c19      	adds	r1, r3, #0
 8007c1a:	1c20      	adds	r0, r4, #0
 8007c1c:	f7f9 f93e 	bl	8000e9c <__aeabi_fmul>
 8007c20:	1c03      	adds	r3, r0, #0
 8007c22:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8007c24:	4912      	ldr	r1, [pc, #72]	@ (8007c70 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f7f8 fc50 	bl	80004cc <__aeabi_fcmplt>
 8007c2c:	1e03      	subs	r3, r0, #0
 8007c2e:	d002      	beq.n	8007c36 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8007c30:	23fe      	movs	r3, #254	@ 0xfe
 8007c32:	059b      	lsls	r3, r3, #22
 8007c34:	e018      	b.n	8007c68 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8007c36:	490f      	ldr	r1, [pc, #60]	@ (8007c74 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f7f8 fc5b 	bl	80004f4 <__aeabi_fcmpgt>
 8007c3e:	1e03      	subs	r3, r0, #0
 8007c40:	d001      	beq.n	8007c46 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8007c42:	2300      	movs	r3, #0
 8007c44:	e010      	b.n	8007c68 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	1c18      	adds	r0, r3, #0
 8007c4a:	f012 fa3b 	bl	801a0c4 <expf>
 8007c4e:	1c03      	adds	r3, r0, #0
 8007c50:	21fe      	movs	r1, #254	@ 0xfe
 8007c52:	0589      	lsls	r1, r1, #22
 8007c54:	1c18      	adds	r0, r3, #0
 8007c56:	f7f8 fdb1 	bl	80007bc <__aeabi_fadd>
 8007c5a:	1c03      	adds	r3, r0, #0
 8007c5c:	1c19      	adds	r1, r3, #0
 8007c5e:	20fe      	movs	r0, #254	@ 0xfe
 8007c60:	0580      	lsls	r0, r0, #22
 8007c62:	f7f8 ff35 	bl	8000ad0 <__aeabi_fdiv>
 8007c66:	1c03      	adds	r3, r0, #0
    }
}
 8007c68:	1c18      	adds	r0, r3, #0
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	b005      	add	sp, #20
 8007c6e:	bd90      	pop	{r4, r7, pc}
 8007c70:	c2480000 	.word	0xc2480000
 8007c74:	42480000 	.word	0x42480000

08007c78 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	68ba      	ldr	r2, [r7, #8]
 8007c88:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007c90:	46c0      	nop			@ (mov r8, r8)
 8007c92:	46bd      	mov	sp, r7
 8007c94:	b004      	add	sp, #16
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8007c98:	b590      	push	{r4, r7, lr}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d114      	bne.n	8007cd4 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cae:	1c19      	adds	r1, r3, #0
 8007cb0:	6838      	ldr	r0, [r7, #0]
 8007cb2:	f7f9 fa31 	bl	8001118 <__aeabi_fsub>
 8007cb6:	1c03      	adds	r3, r0, #0
 8007cb8:	4918      	ldr	r1, [pc, #96]	@ (8007d1c <GasIndexAlgorithm__mox_model__process+0x84>)
 8007cba:	1c18      	adds	r0, r3, #0
 8007cbc:	f7f8 ff08 	bl	8000ad0 <__aeabi_fdiv>
 8007cc0:	1c03      	adds	r3, r0, #0
 8007cc2:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 8007cc8:	1c19      	adds	r1, r3, #0
 8007cca:	1c10      	adds	r0, r2, #0
 8007ccc:	f7f9 f8e6 	bl	8000e9c <__aeabi_fmul>
 8007cd0:	1c03      	adds	r3, r0, #0
 8007cd2:	e01f      	b.n	8007d14 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007cd8:	1c19      	adds	r1, r3, #0
 8007cda:	6838      	ldr	r0, [r7, #0]
 8007cdc:	f7f9 fa1c 	bl	8001118 <__aeabi_fsub>
 8007ce0:	1c03      	adds	r3, r0, #0
 8007ce2:	1c1a      	adds	r2, r3, #0
 8007ce4:	2380      	movs	r3, #128	@ 0x80
 8007ce6:	061b      	lsls	r3, r3, #24
 8007ce8:	4053      	eors	r3, r2
 8007cea:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007cf0:	490b      	ldr	r1, [pc, #44]	@ (8007d20 <GasIndexAlgorithm__mox_model__process+0x88>)
 8007cf2:	1c18      	adds	r0, r3, #0
 8007cf4:	f7f8 fd62 	bl	80007bc <__aeabi_fadd>
 8007cf8:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007cfa:	1c19      	adds	r1, r3, #0
 8007cfc:	1c20      	adds	r0, r4, #0
 8007cfe:	f7f8 fee7 	bl	8000ad0 <__aeabi_fdiv>
 8007d02:	1c03      	adds	r3, r0, #0
 8007d04:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 8007d0a:	1c19      	adds	r1, r3, #0
 8007d0c:	1c10      	adds	r0, r2, #0
 8007d0e:	f7f9 f8c5 	bl	8000e9c <__aeabi_fmul>
 8007d12:	1c03      	adds	r3, r0, #0
    }
}
 8007d14:	1c18      	adds	r0, r3, #0
 8007d16:	46bd      	mov	sp, r7
 8007d18:	b003      	add	sp, #12
 8007d1a:	bd90      	pop	{r4, r7, pc}
 8007d1c:	44fa0000 	.word	0x44fa0000
 8007d20:	435c0000 	.word	0x435c0000

08007d24 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	607a      	str	r2, [r7, #4]
 8007d30:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2180      	movs	r1, #128	@ 0x80
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2184      	movs	r1, #132	@ 0x84
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2188      	movs	r1, #136	@ 0x88
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	505a      	str	r2, [r3, r1]
}
 8007d4a:	46c0      	nop			@ (mov r8, r8)
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	b004      	add	sp, #16
 8007d50:	bd80      	pop	{r7, pc}
	...

08007d54 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8007d54:	b590      	push	{r4, r7, lr}
 8007d56:	b085      	sub	sp, #20
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2280      	movs	r2, #128	@ 0x80
 8007d62:	589c      	ldr	r4, [r3, r2]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2284      	movs	r2, #132	@ 0x84
 8007d68:	589b      	ldr	r3, [r3, r2]
 8007d6a:	1c19      	adds	r1, r3, #0
 8007d6c:	6838      	ldr	r0, [r7, #0]
 8007d6e:	f7f9 f9d3 	bl	8001118 <__aeabi_fsub>
 8007d72:	1c03      	adds	r3, r0, #0
 8007d74:	1c19      	adds	r1, r3, #0
 8007d76:	1c20      	adds	r0, r4, #0
 8007d78:	f7f9 f890 	bl	8000e9c <__aeabi_fmul>
 8007d7c:	1c03      	adds	r3, r0, #0
 8007d7e:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8007d80:	4940      	ldr	r1, [pc, #256]	@ (8007e84 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8007d82:	68b8      	ldr	r0, [r7, #8]
 8007d84:	f7f8 fba2 	bl	80004cc <__aeabi_fcmplt>
 8007d88:	1e03      	subs	r3, r0, #0
 8007d8a:	d001      	beq.n	8007d90 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8007d8c:	4b3e      	ldr	r3, [pc, #248]	@ (8007e88 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007d8e:	e075      	b.n	8007e7c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8007d90:	493e      	ldr	r1, [pc, #248]	@ (8007e8c <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 8007d92:	68b8      	ldr	r0, [r7, #8]
 8007d94:	f7f8 fbae 	bl	80004f4 <__aeabi_fcmpgt>
 8007d98:	1e03      	subs	r3, r0, #0
 8007d9a:	d001      	beq.n	8007da0 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	e06d      	b.n	8007e7c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 8007da0:	2100      	movs	r1, #0
 8007da2:	6838      	ldr	r0, [r7, #0]
 8007da4:	f7f8 fbb0 	bl	8000508 <__aeabi_fcmpge>
 8007da8:	1e03      	subs	r3, r0, #0
 8007daa:	d047      	beq.n	8007e3c <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2288      	movs	r2, #136	@ 0x88
 8007db0:	589b      	ldr	r3, [r3, r2]
 8007db2:	21fe      	movs	r1, #254	@ 0xfe
 8007db4:	0589      	lsls	r1, r1, #22
 8007db6:	1c18      	adds	r0, r3, #0
 8007db8:	f7f8 fb82 	bl	80004c0 <__aeabi_fcmpeq>
 8007dbc:	1e03      	subs	r3, r0, #0
 8007dbe:	d00e      	beq.n	8007dde <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	1c19      	adds	r1, r3, #0
 8007dc6:	20fe      	movs	r0, #254	@ 0xfe
 8007dc8:	0580      	lsls	r0, r0, #22
 8007dca:	f7f9 f9a5 	bl	8001118 <__aeabi_fsub>
 8007dce:	1c03      	adds	r3, r0, #0
 8007dd0:	492f      	ldr	r1, [pc, #188]	@ (8007e90 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 8007dd2:	1c18      	adds	r0, r3, #0
 8007dd4:	f7f9 f862 	bl	8000e9c <__aeabi_fmul>
 8007dd8:	1c03      	adds	r3, r0, #0
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	e012      	b.n	8007e04 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	492c      	ldr	r1, [pc, #176]	@ (8007e94 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8007de4:	1c18      	adds	r0, r3, #0
 8007de6:	f7f9 f859 	bl	8000e9c <__aeabi_fmul>
 8007dea:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8007dec:	1c19      	adds	r1, r3, #0
 8007dee:	4826      	ldr	r0, [pc, #152]	@ (8007e88 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007df0:	f7f9 f992 	bl	8001118 <__aeabi_fsub>
 8007df4:	1c03      	adds	r3, r0, #0
 8007df6:	2181      	movs	r1, #129	@ 0x81
 8007df8:	05c9      	lsls	r1, r1, #23
 8007dfa:	1c18      	adds	r0, r3, #0
 8007dfc:	f7f8 fe68 	bl	8000ad0 <__aeabi_fdiv>
 8007e00:	1c03      	adds	r3, r0, #0
 8007e02:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8007e04:	4920      	ldr	r1, [pc, #128]	@ (8007e88 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f7f8 fcd8 	bl	80007bc <__aeabi_fadd>
 8007e0c:	1c03      	adds	r3, r0, #0
 8007e0e:	1c1c      	adds	r4, r3, #0
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	1c18      	adds	r0, r3, #0
 8007e14:	f012 f956 	bl	801a0c4 <expf>
 8007e18:	1c03      	adds	r3, r0, #0
 8007e1a:	21fe      	movs	r1, #254	@ 0xfe
 8007e1c:	0589      	lsls	r1, r1, #22
 8007e1e:	1c18      	adds	r0, r3, #0
 8007e20:	f7f8 fccc 	bl	80007bc <__aeabi_fadd>
 8007e24:	1c03      	adds	r3, r0, #0
 8007e26:	1c19      	adds	r1, r3, #0
 8007e28:	1c20      	adds	r0, r4, #0
 8007e2a:	f7f8 fe51 	bl	8000ad0 <__aeabi_fdiv>
 8007e2e:	1c03      	adds	r3, r0, #0
 8007e30:	68f9      	ldr	r1, [r7, #12]
 8007e32:	1c18      	adds	r0, r3, #0
 8007e34:	f7f9 f970 	bl	8001118 <__aeabi_fsub>
 8007e38:	1c03      	adds	r3, r0, #0
 8007e3a:	e01f      	b.n	8007e7c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2188      	movs	r1, #136	@ 0x88
 8007e44:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 8007e46:	1c19      	adds	r1, r3, #0
 8007e48:	1c10      	adds	r0, r2, #0
 8007e4a:	f7f8 fe41 	bl	8000ad0 <__aeabi_fdiv>
 8007e4e:	1c03      	adds	r3, r0, #0
 8007e50:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	1c18      	adds	r0, r3, #0
 8007e56:	f012 f935 	bl	801a0c4 <expf>
 8007e5a:	1c03      	adds	r3, r0, #0
 8007e5c:	21fe      	movs	r1, #254	@ 0xfe
 8007e5e:	0589      	lsls	r1, r1, #22
 8007e60:	1c18      	adds	r0, r3, #0
 8007e62:	f7f8 fcab 	bl	80007bc <__aeabi_fadd>
 8007e66:	1c03      	adds	r3, r0, #0
 8007e68:	1c19      	adds	r1, r3, #0
 8007e6a:	4807      	ldr	r0, [pc, #28]	@ (8007e88 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007e6c:	f7f8 fe30 	bl	8000ad0 <__aeabi_fdiv>
 8007e70:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8007e72:	1c19      	adds	r1, r3, #0
 8007e74:	1c20      	adds	r0, r4, #0
 8007e76:	f7f9 f811 	bl	8000e9c <__aeabi_fmul>
 8007e7a:	1c03      	adds	r3, r0, #0
        }
    }
}
 8007e7c:	1c18      	adds	r0, r3, #0
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	b005      	add	sp, #20
 8007e82:	bd90      	pop	{r4, r7, pc}
 8007e84:	c2480000 	.word	0xc2480000
 8007e88:	43fa0000 	.word	0x43fa0000
 8007e8c:	42480000 	.word	0x42480000
 8007e90:	3f8041ab 	.word	0x3f8041ab
 8007e94:	40a00000 	.word	0x40a00000

08007e98 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8007e98:	b590      	push	{r4, r7, lr}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	4913      	ldr	r1, [pc, #76]	@ (8007ef8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 8007eaa:	1c18      	adds	r0, r3, #0
 8007eac:	f7f8 fc86 	bl	80007bc <__aeabi_fadd>
 8007eb0:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8007eb2:	1c19      	adds	r1, r3, #0
 8007eb4:	1c20      	adds	r0, r4, #0
 8007eb6:	f7f8 fe0b 	bl	8000ad0 <__aeabi_fdiv>
 8007eba:	1c03      	adds	r3, r0, #0
 8007ebc:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	228c      	movs	r2, #140	@ 0x8c
 8007ec2:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	490b      	ldr	r1, [pc, #44]	@ (8007efc <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 8007ece:	1c18      	adds	r0, r3, #0
 8007ed0:	f7f8 fc74 	bl	80007bc <__aeabi_fadd>
 8007ed4:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8007ed6:	1c19      	adds	r1, r3, #0
 8007ed8:	1c20      	adds	r0, r4, #0
 8007eda:	f7f8 fdf9 	bl	8000ad0 <__aeabi_fdiv>
 8007ede:	1c03      	adds	r3, r0, #0
 8007ee0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2290      	movs	r2, #144	@ 0x90
 8007ee6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2294      	movs	r2, #148	@ 0x94
 8007eec:	2100      	movs	r1, #0
 8007eee:	5499      	strb	r1, [r3, r2]
}
 8007ef0:	46c0      	nop			@ (mov r8, r8)
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	b003      	add	sp, #12
 8007ef6:	bd90      	pop	{r4, r7, pc}
 8007ef8:	41a00000 	.word	0x41a00000
 8007efc:	43fa0000 	.word	0x43fa0000

08007f00 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8007f00:	b590      	push	{r4, r7, lr}
 8007f02:	b087      	sub	sp, #28
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2294      	movs	r2, #148	@ 0x94
 8007f0e:	5c9b      	ldrb	r3, [r3, r2]
 8007f10:	2201      	movs	r2, #1
 8007f12:	4053      	eors	r3, r2
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00f      	beq.n	8007f3a <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2198      	movs	r1, #152	@ 0x98
 8007f1e:	683a      	ldr	r2, [r7, #0]
 8007f20:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	219c      	movs	r1, #156	@ 0x9c
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	21a0      	movs	r1, #160	@ 0xa0
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2294      	movs	r2, #148	@ 0x94
 8007f36:	2101      	movs	r1, #1
 8007f38:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	228c      	movs	r2, #140	@ 0x8c
 8007f3e:	589b      	ldr	r3, [r3, r2]
 8007f40:	1c19      	adds	r1, r3, #0
 8007f42:	20fe      	movs	r0, #254	@ 0xfe
 8007f44:	0580      	lsls	r0, r0, #22
 8007f46:	f7f9 f8e7 	bl	8001118 <__aeabi_fsub>
 8007f4a:	1c03      	adds	r3, r0, #0
 8007f4c:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2298      	movs	r2, #152	@ 0x98
 8007f52:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8007f54:	1c19      	adds	r1, r3, #0
 8007f56:	f7f8 ffa1 	bl	8000e9c <__aeabi_fmul>
 8007f5a:	1c03      	adds	r3, r0, #0
 8007f5c:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	228c      	movs	r2, #140	@ 0x8c
 8007f62:	589b      	ldr	r3, [r3, r2]
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	1c18      	adds	r0, r3, #0
 8007f68:	f7f8 ff98 	bl	8000e9c <__aeabi_fmul>
 8007f6c:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 8007f6e:	1c19      	adds	r1, r3, #0
 8007f70:	1c20      	adds	r0, r4, #0
 8007f72:	f7f8 fc23 	bl	80007bc <__aeabi_fadd>
 8007f76:	1c03      	adds	r3, r0, #0
 8007f78:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2298      	movs	r2, #152	@ 0x98
 8007f7e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2290      	movs	r2, #144	@ 0x90
 8007f84:	589b      	ldr	r3, [r3, r2]
 8007f86:	1c19      	adds	r1, r3, #0
 8007f88:	20fe      	movs	r0, #254	@ 0xfe
 8007f8a:	0580      	lsls	r0, r0, #22
 8007f8c:	f7f9 f8c4 	bl	8001118 <__aeabi_fsub>
 8007f90:	1c03      	adds	r3, r0, #0
 8007f92:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	229c      	movs	r2, #156	@ 0x9c
 8007f98:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8007f9a:	1c19      	adds	r1, r3, #0
 8007f9c:	f7f8 ff7e 	bl	8000e9c <__aeabi_fmul>
 8007fa0:	1c03      	adds	r3, r0, #0
 8007fa2:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2290      	movs	r2, #144	@ 0x90
 8007fa8:	589b      	ldr	r3, [r3, r2]
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	1c18      	adds	r0, r3, #0
 8007fae:	f7f8 ff75 	bl	8000e9c <__aeabi_fmul>
 8007fb2:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8007fb4:	1c19      	adds	r1, r3, #0
 8007fb6:	1c20      	adds	r0, r4, #0
 8007fb8:	f7f8 fc00 	bl	80007bc <__aeabi_fadd>
 8007fbc:	1c03      	adds	r3, r0, #0
 8007fbe:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	229c      	movs	r2, #156	@ 0x9c
 8007fc4:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2298      	movs	r2, #152	@ 0x98
 8007fca:	589a      	ldr	r2, [r3, r2]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	219c      	movs	r1, #156	@ 0x9c
 8007fd0:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 8007fd2:	1c19      	adds	r1, r3, #0
 8007fd4:	1c10      	adds	r0, r2, #0
 8007fd6:	f7f9 f89f 	bl	8001118 <__aeabi_fsub>
 8007fda:	1c03      	adds	r3, r0, #0
 8007fdc:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 8007fde:	2100      	movs	r1, #0
 8007fe0:	6978      	ldr	r0, [r7, #20]
 8007fe2:	f7f8 fa73 	bl	80004cc <__aeabi_fcmplt>
 8007fe6:	1e03      	subs	r3, r0, #0
 8007fe8:	d004      	beq.n	8007ff4 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	2280      	movs	r2, #128	@ 0x80
 8007fee:	0612      	lsls	r2, r2, #24
 8007ff0:	4053      	eors	r3, r2
 8007ff2:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8007ff4:	4923      	ldr	r1, [pc, #140]	@ (8008084 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 8007ff6:	6978      	ldr	r0, [r7, #20]
 8007ff8:	f7f8 ff50 	bl	8000e9c <__aeabi_fmul>
 8007ffc:	1c03      	adds	r3, r0, #0
 8007ffe:	1c18      	adds	r0, r3, #0
 8008000:	f012 f860 	bl	801a0c4 <expf>
 8008004:	1c03      	adds	r3, r0, #0
 8008006:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8008008:	491f      	ldr	r1, [pc, #124]	@ (8008088 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800800a:	6938      	ldr	r0, [r7, #16]
 800800c:	f7f8 ff46 	bl	8000e9c <__aeabi_fmul>
 8008010:	1c03      	adds	r3, r0, #0
 8008012:	491e      	ldr	r1, [pc, #120]	@ (800808c <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8008014:	1c18      	adds	r0, r3, #0
 8008016:	f7f8 fbd1 	bl	80007bc <__aeabi_fadd>
 800801a:	1c03      	adds	r3, r0, #0
 800801c:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685c      	ldr	r4, [r3, #4]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	68f9      	ldr	r1, [r7, #12]
 8008028:	1c18      	adds	r0, r3, #0
 800802a:	f7f8 fbc7 	bl	80007bc <__aeabi_fadd>
 800802e:	1c03      	adds	r3, r0, #0
 8008030:	1c19      	adds	r1, r3, #0
 8008032:	1c20      	adds	r0, r4, #0
 8008034:	f7f8 fd4c 	bl	8000ad0 <__aeabi_fdiv>
 8008038:	1c03      	adds	r3, r0, #0
 800803a:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800803c:	68b9      	ldr	r1, [r7, #8]
 800803e:	20fe      	movs	r0, #254	@ 0xfe
 8008040:	0580      	lsls	r0, r0, #22
 8008042:	f7f9 f869 	bl	8001118 <__aeabi_fsub>
 8008046:	1c03      	adds	r3, r0, #0
 8008048:	1c18      	adds	r0, r3, #0
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	22a0      	movs	r2, #160	@ 0xa0
 800804e:	589b      	ldr	r3, [r3, r2]
 8008050:	1c19      	adds	r1, r3, #0
 8008052:	f7f8 ff23 	bl	8000e9c <__aeabi_fmul>
 8008056:	1c03      	adds	r3, r0, #0
 8008058:	1c1c      	adds	r4, r3, #0
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	68b8      	ldr	r0, [r7, #8]
 800805e:	f7f8 ff1d 	bl	8000e9c <__aeabi_fmul>
 8008062:	1c03      	adds	r3, r0, #0
 8008064:	1c19      	adds	r1, r3, #0
 8008066:	1c20      	adds	r0, r4, #0
 8008068:	f7f8 fba8 	bl	80007bc <__aeabi_fadd>
 800806c:	1c03      	adds	r3, r0, #0
 800806e:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	22a0      	movs	r2, #160	@ 0xa0
 8008074:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	22a0      	movs	r2, #160	@ 0xa0
 800807a:	589b      	ldr	r3, [r3, r2]
}
 800807c:	1c18      	adds	r0, r3, #0
 800807e:	46bd      	mov	sp, r7
 8008080:	b007      	add	sp, #28
 8008082:	bd90      	pop	{r4, r7, pc}
 8008084:	be4ccccd 	.word	0xbe4ccccd
 8008088:	43f00000 	.word	0x43f00000
 800808c:	41a00000 	.word	0x41a00000

08008090 <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8008090:	b590      	push	{r4, r7, lr}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6039      	str	r1, [r7, #0]
 8008098:	0011      	movs	r1, r2
 800809a:	1dfb      	adds	r3, r7, #7
 800809c:	1c02      	adds	r2, r0, #0
 800809e:	701a      	strb	r2, [r3, #0]
 80080a0:	1dbb      	adds	r3, r7, #6
 80080a2:	1c0a      	adds	r2, r1, #0
 80080a4:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 80080a6:	4b08      	ldr	r3, [pc, #32]	@ (80080c8 <ReadRegister+0x38>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d008      	beq.n	80080c0 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 80080ae:	4b06      	ldr	r3, [pc, #24]	@ (80080c8 <ReadRegister+0x38>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	1dba      	adds	r2, r7, #6
 80080b4:	7814      	ldrb	r4, [r2, #0]
 80080b6:	6839      	ldr	r1, [r7, #0]
 80080b8:	1dfa      	adds	r2, r7, #7
 80080ba:	7810      	ldrb	r0, [r2, #0]
 80080bc:	0022      	movs	r2, r4
 80080be:	4798      	blx	r3
  }
}
 80080c0:	46c0      	nop			@ (mov r8, r8)
 80080c2:	46bd      	mov	sp, r7
 80080c4:	b003      	add	sp, #12
 80080c6:	bd90      	pop	{r4, r7, pc}
 80080c8:	200026e8 	.word	0x200026e8

080080cc <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 80080cc:	b590      	push	{r4, r7, lr}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6039      	str	r1, [r7, #0]
 80080d4:	0011      	movs	r1, r2
 80080d6:	1dfb      	adds	r3, r7, #7
 80080d8:	1c02      	adds	r2, r0, #0
 80080da:	701a      	strb	r2, [r3, #0]
 80080dc:	1dbb      	adds	r3, r7, #6
 80080de:	1c0a      	adds	r2, r1, #0
 80080e0:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 80080e2:	4b08      	ldr	r3, [pc, #32]	@ (8008104 <WriteRegister+0x38>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d008      	beq.n	80080fc <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 80080ea:	4b06      	ldr	r3, [pc, #24]	@ (8008104 <WriteRegister+0x38>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	1dba      	adds	r2, r7, #6
 80080f0:	7814      	ldrb	r4, [r2, #0]
 80080f2:	6839      	ldr	r1, [r7, #0]
 80080f4:	1dfa      	adds	r2, r7, #7
 80080f6:	7810      	ldrb	r0, [r2, #0]
 80080f8:	0022      	movs	r2, r4
 80080fa:	4798      	blx	r3
  }
}
 80080fc:	46c0      	nop			@ (mov r8, r8)
 80080fe:	46bd      	mov	sp, r7
 8008100:	b003      	add	sp, #12
 8008102:	bd90      	pop	{r4, r7, pc}
 8008104:	200026ec 	.word	0x200026ec

08008108 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8008112:	4b07      	ldr	r3, [pc, #28]	@ (8008130 <SGP_Init+0x28>)
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8008118:	4b06      	ldr	r3, [pc, #24]	@ (8008134 <SGP_Init+0x2c>)
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800811e:	4b06      	ldr	r3, [pc, #24]	@ (8008138 <SGP_Init+0x30>)
 8008120:	2100      	movs	r1, #0
 8008122:	0018      	movs	r0, r3
 8008124:	f7ff f930 	bl	8007388 <GasIndexAlgorithm_init>
}
 8008128:	46c0      	nop			@ (mov r8, r8)
 800812a:	46bd      	mov	sp, r7
 800812c:	b002      	add	sp, #8
 800812e:	bd80      	pop	{r7, pc}
 8008130:	200026e8 	.word	0x200026e8
 8008134:	200026ec 	.word	0x200026ec
 8008138:	200026fc 	.word	0x200026fc

0800813c <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800813c:	b580      	push	{r7, lr}
 800813e:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8008140:	4b13      	ldr	r3, [pc, #76]	@ (8008190 <SGP_StartMeasurement+0x54>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00d      	beq.n	8008164 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008148:	4b12      	ldr	r3, [pc, #72]	@ (8008194 <SGP_StartMeasurement+0x58>)
 800814a:	2208      	movs	r2, #8
 800814c:	0019      	movs	r1, r3
 800814e:	2059      	movs	r0, #89	@ 0x59
 8008150:	f7ff ffbc 	bl	80080cc <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8008154:	f001 fad4 	bl	8009700 <GetCurrentHalTicks>
 8008158:	0003      	movs	r3, r0
 800815a:	331e      	adds	r3, #30
 800815c:	001a      	movs	r2, r3
 800815e:	4b0e      	ldr	r3, [pc, #56]	@ (8008198 <SGP_StartMeasurement+0x5c>)
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	e00c      	b.n	800817e <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008164:	4b0d      	ldr	r3, [pc, #52]	@ (800819c <SGP_StartMeasurement+0x60>)
 8008166:	2208      	movs	r2, #8
 8008168:	0019      	movs	r1, r3
 800816a:	2059      	movs	r0, #89	@ 0x59
 800816c:	f7ff ffae 	bl	80080cc <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 8008170:	f001 fac6 	bl	8009700 <GetCurrentHalTicks>
 8008174:	0003      	movs	r3, r0
 8008176:	33aa      	adds	r3, #170	@ 0xaa
 8008178:	001a      	movs	r2, r3
 800817a:	4b09      	ldr	r3, [pc, #36]	@ (80081a0 <SGP_StartMeasurement+0x64>)
 800817c:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800817e:	4b09      	ldr	r3, [pc, #36]	@ (80081a4 <SGP_StartMeasurement+0x68>)
 8008180:	2200      	movs	r2, #0
 8008182:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8008184:	4b08      	ldr	r3, [pc, #32]	@ (80081a8 <SGP_StartMeasurement+0x6c>)
 8008186:	2200      	movs	r2, #0
 8008188:	701a      	strb	r2, [r3, #0]
}
 800818a:	46c0      	nop			@ (mov r8, r8)
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	200027a4 	.word	0x200027a4
 8008194:	20000078 	.word	0x20000078
 8008198:	2000008c 	.word	0x2000008c
 800819c:	20000070 	.word	0x20000070
 80081a0:	20000084 	.word	0x20000084
 80081a4:	200026fa 	.word	0x200026fa
 80081a8:	200026fb 	.word	0x200026fb

080081ac <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 80081ac:	b580      	push	{r7, lr}
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	4b04      	ldr	r3, [pc, #16]	@ (80081c4 <SGP_HeatedUp+0x18>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	0018      	movs	r0, r3
 80081b6:	f001 f9c1 	bl	800953c <TimestampIsReached>
 80081ba:	0003      	movs	r3, r0
 80081bc:	0018      	movs	r0, r3
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	46c0      	nop			@ (mov r8, r8)
 80081c4:	20000084 	.word	0x20000084

080081c8 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 80081c8:	b580      	push	{r7, lr}
 80081ca:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 80081cc:	4b04      	ldr	r3, [pc, #16]	@ (80081e0 <SGP_MeasurementReady+0x18>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	0018      	movs	r0, r3
 80081d2:	f001 f9b3 	bl	800953c <TimestampIsReached>
 80081d6:	0003      	movs	r3, r0
}
 80081d8:	0018      	movs	r0, r3
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	46c0      	nop			@ (mov r8, r8)
 80081e0:	2000008c 	.word	0x2000008c

080081e4 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 80081e4:	b580      	push	{r7, lr}
 80081e6:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 80081e8:	4b04      	ldr	r3, [pc, #16]	@ (80081fc <SGP_MeasurementDone+0x18>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	0018      	movs	r0, r3
 80081ee:	f001 f9a5 	bl	800953c <TimestampIsReached>
 80081f2:	0003      	movs	r3, r0
}
 80081f4:	0018      	movs	r0, r3
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	46c0      	nop			@ (mov r8, r8)
 80081fc:	20000088 	.word	0x20000088

08008200 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 8008200:	b580      	push	{r7, lr}
 8008202:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8008204:	4b04      	ldr	r3, [pc, #16]	@ (8008218 <SGP_TurnHeaterOff+0x18>)
 8008206:	2202      	movs	r2, #2
 8008208:	0019      	movs	r1, r3
 800820a:	2059      	movs	r0, #89	@ 0x59
 800820c:	f7ff ff5e 	bl	80080cc <WriteRegister>
}
 8008210:	46c0      	nop			@ (mov r8, r8)
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	46c0      	nop			@ (mov r8, r8)
 8008218:	20000068 	.word	0x20000068

0800821c <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800821c:	b5b0      	push	{r4, r5, r7, lr}
 800821e:	b086      	sub	sp, #24
 8008220:	af02      	add	r7, sp, #8
 8008222:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8008224:	f7ff ffc2 	bl	80081ac <SGP_HeatedUp>
 8008228:	1e03      	subs	r3, r0, #0
 800822a:	d038      	beq.n	800829e <SGP_GetMeasurementValues+0x82>
 800822c:	4bd8      	ldr	r3, [pc, #864]	@ (8008590 <SGP_GetMeasurementValues+0x374>)
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	2201      	movs	r2, #1
 8008232:	4053      	eors	r3, r2
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d031      	beq.n	800829e <SGP_GetMeasurementValues+0x82>
 800823a:	4bd6      	ldr	r3, [pc, #856]	@ (8008594 <SGP_GetMeasurementValues+0x378>)
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	2201      	movs	r2, #1
 8008240:	4053      	eors	r3, r2
 8008242:	b2db      	uxtb	r3, r3
 8008244:	2b00      	cmp	r3, #0
 8008246:	d02a      	beq.n	800829e <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 8008248:	4ad3      	ldr	r2, [pc, #844]	@ (8008598 <SGP_GetMeasurementValues+0x37c>)
 800824a:	4bd4      	ldr	r3, [pc, #848]	@ (800859c <SGP_GetMeasurementValues+0x380>)
 800824c:	0019      	movs	r1, r3
 800824e:	2003      	movs	r0, #3
 8008250:	f001 f9ca 	bl	80095e8 <CreateLine>
    HeatUpIsDone = true;
 8008254:	4bce      	ldr	r3, [pc, #824]	@ (8008590 <SGP_GetMeasurementValues+0x374>)
 8008256:	2201      	movs	r2, #1
 8008258:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800825a:	4bd1      	ldr	r3, [pc, #836]	@ (80085a0 <SGP_GetMeasurementValues+0x384>)
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00d      	beq.n	800827e <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008262:	4bd0      	ldr	r3, [pc, #832]	@ (80085a4 <SGP_GetMeasurementValues+0x388>)
 8008264:	2208      	movs	r2, #8
 8008266:	0019      	movs	r1, r3
 8008268:	2059      	movs	r0, #89	@ 0x59
 800826a:	f7ff ff2f 	bl	80080cc <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800826e:	f001 fa47 	bl	8009700 <GetCurrentHalTicks>
 8008272:	0003      	movs	r3, r0
 8008274:	331e      	adds	r3, #30
 8008276:	001a      	movs	r2, r3
 8008278:	4bcb      	ldr	r3, [pc, #812]	@ (80085a8 <SGP_GetMeasurementValues+0x38c>)
 800827a:	601a      	str	r2, [r3, #0]
 800827c:	e00c      	b.n	8008298 <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800827e:	4bcb      	ldr	r3, [pc, #812]	@ (80085ac <SGP_GetMeasurementValues+0x390>)
 8008280:	2208      	movs	r2, #8
 8008282:	0019      	movs	r1, r3
 8008284:	2059      	movs	r0, #89	@ 0x59
 8008286:	f7ff ff21 	bl	80080cc <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800828a:	f001 fa39 	bl	8009700 <GetCurrentHalTicks>
 800828e:	0003      	movs	r3, r0
 8008290:	331e      	adds	r3, #30
 8008292:	001a      	movs	r2, r3
 8008294:	4bc4      	ldr	r3, [pc, #784]	@ (80085a8 <SGP_GetMeasurementValues+0x38c>)
 8008296:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8008298:	4bbe      	ldr	r3, [pc, #760]	@ (8008594 <SGP_GetMeasurementValues+0x378>)
 800829a:	2201      	movs	r2, #1
 800829c:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800829e:	4bbc      	ldr	r3, [pc, #752]	@ (8008590 <SGP_GetMeasurementValues+0x374>)
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d100      	bne.n	80082a8 <SGP_GetMeasurementValues+0x8c>
 80082a6:	e1b1      	b.n	800860c <SGP_GetMeasurementValues+0x3f0>
 80082a8:	f7ff ff8e 	bl	80081c8 <SGP_MeasurementReady>
 80082ac:	1e03      	subs	r3, r0, #0
 80082ae:	d100      	bne.n	80082b2 <SGP_GetMeasurementValues+0x96>
 80082b0:	e1ac      	b.n	800860c <SGP_GetMeasurementValues+0x3f0>
 80082b2:	4bbf      	ldr	r3, [pc, #764]	@ (80085b0 <SGP_GetMeasurementValues+0x394>)
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	2201      	movs	r2, #1
 80082b8:	4053      	eors	r3, r2
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d100      	bne.n	80082c2 <SGP_GetMeasurementValues+0xa6>
 80082c0:	e1a4      	b.n	800860c <SGP_GetMeasurementValues+0x3f0>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 80082c2:	4bbc      	ldr	r3, [pc, #752]	@ (80085b4 <SGP_GetMeasurementValues+0x398>)
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	3301      	adds	r3, #1
 80082c8:	4abb      	ldr	r2, [pc, #748]	@ (80085b8 <SGP_GetMeasurementValues+0x39c>)
 80082ca:	49b4      	ldr	r1, [pc, #720]	@ (800859c <SGP_GetMeasurementValues+0x380>)
 80082cc:	2003      	movs	r0, #3
 80082ce:	f001 f98b 	bl	80095e8 <CreateLine>
    MeasurementIsReady = true;
 80082d2:	4bb7      	ldr	r3, [pc, #732]	@ (80085b0 <SGP_GetMeasurementValues+0x394>)
 80082d4:	2201      	movs	r2, #1
 80082d6:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 80082d8:	4bb8      	ldr	r3, [pc, #736]	@ (80085bc <SGP_GetMeasurementValues+0x3a0>)
 80082da:	2203      	movs	r2, #3
 80082dc:	0019      	movs	r1, r3
 80082de:	2059      	movs	r0, #89	@ 0x59
 80082e0:	f7ff fed6 	bl	8008090 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 80082e4:	4bb5      	ldr	r3, [pc, #724]	@ (80085bc <SGP_GetMeasurementValues+0x3a0>)
 80082e6:	2203      	movs	r2, #3
 80082e8:	2103      	movs	r1, #3
 80082ea:	0018      	movs	r0, r3
 80082ec:	f000 f9f4 	bl	80086d8 <CheckCRC>
 80082f0:	0003      	movs	r3, r0
 80082f2:	001a      	movs	r2, r3
 80082f4:	2301      	movs	r3, #1
 80082f6:	4053      	eors	r3, r2
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d02a      	beq.n	8008354 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 80082fe:	4ab0      	ldr	r2, [pc, #704]	@ (80085c0 <SGP_GetMeasurementValues+0x3a4>)
 8008300:	4bb0      	ldr	r3, [pc, #704]	@ (80085c4 <SGP_GetMeasurementValues+0x3a8>)
 8008302:	0019      	movs	r1, r3
 8008304:	2001      	movs	r0, #1
 8008306:	f001 f96f 	bl	80095e8 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800830a:	4aaf      	ldr	r2, [pc, #700]	@ (80085c8 <SGP_GetMeasurementValues+0x3ac>)
 800830c:	4baf      	ldr	r3, [pc, #700]	@ (80085cc <SGP_GetMeasurementValues+0x3b0>)
 800830e:	0019      	movs	r1, r3
 8008310:	2002      	movs	r0, #2
 8008312:	f001 f969 	bl	80095e8 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8008316:	230f      	movs	r3, #15
 8008318:	18fb      	adds	r3, r7, r3
 800831a:	2200      	movs	r2, #0
 800831c:	701a      	strb	r2, [r3, #0]
 800831e:	e012      	b.n	8008346 <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8008320:	240f      	movs	r4, #15
 8008322:	193b      	adds	r3, r7, r4
 8008324:	7818      	ldrb	r0, [r3, #0]
 8008326:	193b      	adds	r3, r7, r4
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	4aa4      	ldr	r2, [pc, #656]	@ (80085bc <SGP_GetMeasurementValues+0x3a0>)
 800832c:	5cd3      	ldrb	r3, [r2, r3]
 800832e:	4aa8      	ldr	r2, [pc, #672]	@ (80085d0 <SGP_GetMeasurementValues+0x3b4>)
 8008330:	499a      	ldr	r1, [pc, #616]	@ (800859c <SGP_GetMeasurementValues+0x380>)
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	0003      	movs	r3, r0
 8008336:	2003      	movs	r0, #3
 8008338:	f001 f956 	bl	80095e8 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800833c:	193b      	adds	r3, r7, r4
 800833e:	781a      	ldrb	r2, [r3, #0]
 8008340:	193b      	adds	r3, r7, r4
 8008342:	3201      	adds	r2, #1
 8008344:	701a      	strb	r2, [r3, #0]
 8008346:	230f      	movs	r3, #15
 8008348:	18fb      	adds	r3, r7, r3
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	2b02      	cmp	r3, #2
 800834e:	d9e7      	bls.n	8008320 <SGP_GetMeasurementValues+0x104>
      }
      return false;
 8008350:	2300      	movs	r3, #0
 8008352:	e173      	b.n	800863c <SGP_GetMeasurementValues+0x420>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 8008354:	f001 f9d4 	bl	8009700 <GetCurrentHalTicks>
 8008358:	0003      	movs	r3, r0
 800835a:	22fa      	movs	r2, #250	@ 0xfa
 800835c:	0092      	lsls	r2, r2, #2
 800835e:	189a      	adds	r2, r3, r2
 8008360:	4b9c      	ldr	r3, [pc, #624]	@ (80085d4 <SGP_GetMeasurementValues+0x3b8>)
 8008362:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 8008364:	f7ff ff4c 	bl	8008200 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 8008368:	4b92      	ldr	r3, [pc, #584]	@ (80085b4 <SGP_GetMeasurementValues+0x398>)
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	3301      	adds	r3, #1
 800836e:	b2da      	uxtb	r2, r3
 8008370:	4b90      	ldr	r3, [pc, #576]	@ (80085b4 <SGP_GetMeasurementValues+0x398>)
 8008372:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8008374:	4b8f      	ldr	r3, [pc, #572]	@ (80085b4 <SGP_GetMeasurementValues+0x398>)
 8008376:	781a      	ldrb	r2, [r3, #0]
 8008378:	4b97      	ldr	r3, [pc, #604]	@ (80085d8 <SGP_GetMeasurementValues+0x3bc>)
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	429a      	cmp	r2, r3
 800837e:	d200      	bcs.n	8008382 <SGP_GetMeasurementValues+0x166>
 8008380:	e144      	b.n	800860c <SGP_GetMeasurementValues+0x3f0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 8008382:	4b8e      	ldr	r3, [pc, #568]	@ (80085bc <SGP_GetMeasurementValues+0x3a0>)
 8008384:	785b      	ldrb	r3, [r3, #1]
 8008386:	021b      	lsls	r3, r3, #8
 8008388:	b21a      	sxth	r2, r3
 800838a:	4b8c      	ldr	r3, [pc, #560]	@ (80085bc <SGP_GetMeasurementValues+0x3a0>)
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	b21b      	sxth	r3, r3
 8008390:	4313      	orrs	r3, r2
 8008392:	b21a      	sxth	r2, r3
 8008394:	240c      	movs	r4, #12
 8008396:	193b      	adds	r3, r7, r4
 8008398:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 800839a:	193b      	adds	r3, r7, r4
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	4a8f      	ldr	r2, [pc, #572]	@ (80085dc <SGP_GetMeasurementValues+0x3c0>)
 80083a0:	497e      	ldr	r1, [pc, #504]	@ (800859c <SGP_GetMeasurementValues+0x380>)
 80083a2:	2003      	movs	r0, #3
 80083a4:	f001 f920 	bl	80095e8 <CreateLine>
      int32_t tempVocIndex = 0;
 80083a8:	2300      	movs	r3, #0
 80083aa:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 80083ac:	193b      	adds	r3, r7, r4
 80083ae:	8819      	ldrh	r1, [r3, #0]
 80083b0:	2308      	movs	r3, #8
 80083b2:	18fa      	adds	r2, r7, r3
 80083b4:	4b8a      	ldr	r3, [pc, #552]	@ (80085e0 <SGP_GetMeasurementValues+0x3c4>)
 80083b6:	0018      	movs	r0, r3
 80083b8:	f7ff f848 	bl	800744c <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	4a89      	ldr	r2, [pc, #548]	@ (80085e4 <SGP_GetMeasurementValues+0x3c8>)
 80083c0:	4976      	ldr	r1, [pc, #472]	@ (800859c <SGP_GetMeasurementValues+0x380>)
 80083c2:	2003      	movs	r0, #3
 80083c4:	f001 f910 	bl	80095e8 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	dd5d      	ble.n	8008492 <SGP_GetMeasurementValues+0x276>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2b64      	cmp	r3, #100	@ 0x64
 80083dc:	dc59      	bgt.n	8008492 <SGP_GetMeasurementValues+0x276>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	0018      	movs	r0, r3
 80083e4:	f7fa ff6a 	bl	80032bc <__aeabi_i2d>
 80083e8:	2200      	movs	r2, #0
 80083ea:	4b7f      	ldr	r3, [pc, #508]	@ (80085e8 <SGP_GetMeasurementValues+0x3cc>)
 80083ec:	f7f9 fc60 	bl	8001cb0 <__aeabi_ddiv>
 80083f0:	0002      	movs	r2, r0
 80083f2:	000b      	movs	r3, r1
 80083f4:	2000      	movs	r0, #0
 80083f6:	497d      	ldr	r1, [pc, #500]	@ (80085ec <SGP_GetMeasurementValues+0x3d0>)
 80083f8:	f7fa fb66 	bl	8002ac8 <__aeabi_dsub>
 80083fc:	0002      	movs	r2, r0
 80083fe:	000b      	movs	r3, r1
 8008400:	0014      	movs	r4, r2
 8008402:	001d      	movs	r5, r3
 8008404:	4b7a      	ldr	r3, [pc, #488]	@ (80085f0 <SGP_GetMeasurementValues+0x3d4>)
 8008406:	881b      	ldrh	r3, [r3, #0]
 8008408:	0018      	movs	r0, r3
 800840a:	f7fa ff57 	bl	80032bc <__aeabi_i2d>
 800840e:	0002      	movs	r2, r0
 8008410:	000b      	movs	r3, r1
 8008412:	0020      	movs	r0, r4
 8008414:	0029      	movs	r1, r5
 8008416:	f7fa f88f 	bl	8002538 <__aeabi_dmul>
 800841a:	0002      	movs	r2, r0
 800841c:	000b      	movs	r3, r1
 800841e:	0010      	movs	r0, r2
 8008420:	0019      	movs	r1, r3
 8008422:	f7f8 f8e1 	bl	80005e8 <__aeabi_d2uiz>
 8008426:	0003      	movs	r3, r0
 8008428:	b29a      	uxth	r2, r3
 800842a:	4b72      	ldr	r3, [pc, #456]	@ (80085f4 <SGP_GetMeasurementValues+0x3d8>)
 800842c:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	0018      	movs	r0, r3
 8008434:	f7fa ff42 	bl	80032bc <__aeabi_i2d>
 8008438:	2200      	movs	r2, #0
 800843a:	4b6b      	ldr	r3, [pc, #428]	@ (80085e8 <SGP_GetMeasurementValues+0x3cc>)
 800843c:	f7f9 fc38 	bl	8001cb0 <__aeabi_ddiv>
 8008440:	0002      	movs	r2, r0
 8008442:	000b      	movs	r3, r1
 8008444:	0014      	movs	r4, r2
 8008446:	001d      	movs	r5, r3
 8008448:	4b69      	ldr	r3, [pc, #420]	@ (80085f0 <SGP_GetMeasurementValues+0x3d4>)
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	0018      	movs	r0, r3
 800844e:	f7fa ff35 	bl	80032bc <__aeabi_i2d>
 8008452:	0002      	movs	r2, r0
 8008454:	000b      	movs	r3, r1
 8008456:	0020      	movs	r0, r4
 8008458:	0029      	movs	r1, r5
 800845a:	f7fa f86d 	bl	8002538 <__aeabi_dmul>
 800845e:	0002      	movs	r2, r0
 8008460:	000b      	movs	r3, r1
 8008462:	0010      	movs	r0, r2
 8008464:	0019      	movs	r1, r3
 8008466:	f7f8 f8bf 	bl	80005e8 <__aeabi_d2uiz>
 800846a:	0003      	movs	r3, r0
 800846c:	b29a      	uxth	r2, r3
 800846e:	4b62      	ldr	r3, [pc, #392]	@ (80085f8 <SGP_GetMeasurementValues+0x3dc>)
 8008470:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 8008472:	4b5f      	ldr	r3, [pc, #380]	@ (80085f0 <SGP_GetMeasurementValues+0x3d4>)
 8008474:	881a      	ldrh	r2, [r3, #0]
 8008476:	4b61      	ldr	r3, [pc, #388]	@ (80085fc <SGP_GetMeasurementValues+0x3e0>)
 8008478:	801a      	strh	r2, [r3, #0]
      TIM3->CCR1 = Red;
 800847a:	4b60      	ldr	r3, [pc, #384]	@ (80085fc <SGP_GetMeasurementValues+0x3e0>)
 800847c:	881a      	ldrh	r2, [r3, #0]
 800847e:	4b60      	ldr	r3, [pc, #384]	@ (8008600 <SGP_GetMeasurementValues+0x3e4>)
 8008480:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3->CCR2 = Green;
 8008482:	4b5c      	ldr	r3, [pc, #368]	@ (80085f4 <SGP_GetMeasurementValues+0x3d8>)
 8008484:	881a      	ldrh	r2, [r3, #0]
 8008486:	4b5e      	ldr	r3, [pc, #376]	@ (8008600 <SGP_GetMeasurementValues+0x3e4>)
 8008488:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3->CCR3 = Blue;
 800848a:	4b5b      	ldr	r3, [pc, #364]	@ (80085f8 <SGP_GetMeasurementValues+0x3dc>)
 800848c:	881a      	ldrh	r2, [r3, #0]
 800848e:	4b5c      	ldr	r3, [pc, #368]	@ (8008600 <SGP_GetMeasurementValues+0x3e4>)
 8008490:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
      if(*vocIndex > 100){
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2b64      	cmp	r3, #100	@ 0x64
 8008498:	dd69      	ble.n	800856e <SGP_GetMeasurementValues+0x352>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	0018      	movs	r0, r3
 80084a0:	f7fa ff0c 	bl	80032bc <__aeabi_i2d>
 80084a4:	2200      	movs	r2, #0
 80084a6:	4b50      	ldr	r3, [pc, #320]	@ (80085e8 <SGP_GetMeasurementValues+0x3cc>)
 80084a8:	f7fa fb0e 	bl	8002ac8 <__aeabi_dsub>
 80084ac:	0002      	movs	r2, r0
 80084ae:	000b      	movs	r3, r1
 80084b0:	0010      	movs	r0, r2
 80084b2:	0019      	movs	r1, r3
 80084b4:	2200      	movs	r2, #0
 80084b6:	4b53      	ldr	r3, [pc, #332]	@ (8008604 <SGP_GetMeasurementValues+0x3e8>)
 80084b8:	f7f9 fbfa 	bl	8001cb0 <__aeabi_ddiv>
 80084bc:	0002      	movs	r2, r0
 80084be:	000b      	movs	r3, r1
 80084c0:	0014      	movs	r4, r2
 80084c2:	001d      	movs	r5, r3
 80084c4:	4b4a      	ldr	r3, [pc, #296]	@ (80085f0 <SGP_GetMeasurementValues+0x3d4>)
 80084c6:	881b      	ldrh	r3, [r3, #0]
 80084c8:	0018      	movs	r0, r3
 80084ca:	f7fa fef7 	bl	80032bc <__aeabi_i2d>
 80084ce:	0002      	movs	r2, r0
 80084d0:	000b      	movs	r3, r1
 80084d2:	0020      	movs	r0, r4
 80084d4:	0029      	movs	r1, r5
 80084d6:	f7fa f82f 	bl	8002538 <__aeabi_dmul>
 80084da:	0002      	movs	r2, r0
 80084dc:	000b      	movs	r3, r1
 80084de:	0010      	movs	r0, r2
 80084e0:	0019      	movs	r1, r3
 80084e2:	f7f8 f881 	bl	80005e8 <__aeabi_d2uiz>
 80084e6:	0003      	movs	r3, r0
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	4b42      	ldr	r3, [pc, #264]	@ (80085f4 <SGP_GetMeasurementValues+0x3d8>)
 80084ec:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	0018      	movs	r0, r3
 80084f4:	f7fa fee2 	bl	80032bc <__aeabi_i2d>
 80084f8:	2200      	movs	r2, #0
 80084fa:	4b3b      	ldr	r3, [pc, #236]	@ (80085e8 <SGP_GetMeasurementValues+0x3cc>)
 80084fc:	f7fa fae4 	bl	8002ac8 <__aeabi_dsub>
 8008500:	0002      	movs	r2, r0
 8008502:	000b      	movs	r3, r1
 8008504:	0010      	movs	r0, r2
 8008506:	0019      	movs	r1, r3
 8008508:	2200      	movs	r2, #0
 800850a:	4b3e      	ldr	r3, [pc, #248]	@ (8008604 <SGP_GetMeasurementValues+0x3e8>)
 800850c:	f7f9 fbd0 	bl	8001cb0 <__aeabi_ddiv>
 8008510:	0002      	movs	r2, r0
 8008512:	000b      	movs	r3, r1
 8008514:	2000      	movs	r0, #0
 8008516:	4935      	ldr	r1, [pc, #212]	@ (80085ec <SGP_GetMeasurementValues+0x3d0>)
 8008518:	f7fa fad6 	bl	8002ac8 <__aeabi_dsub>
 800851c:	0002      	movs	r2, r0
 800851e:	000b      	movs	r3, r1
 8008520:	0014      	movs	r4, r2
 8008522:	001d      	movs	r5, r3
 8008524:	4b32      	ldr	r3, [pc, #200]	@ (80085f0 <SGP_GetMeasurementValues+0x3d4>)
 8008526:	881b      	ldrh	r3, [r3, #0]
 8008528:	0018      	movs	r0, r3
 800852a:	f7fa fec7 	bl	80032bc <__aeabi_i2d>
 800852e:	0002      	movs	r2, r0
 8008530:	000b      	movs	r3, r1
 8008532:	0020      	movs	r0, r4
 8008534:	0029      	movs	r1, r5
 8008536:	f7f9 ffff 	bl	8002538 <__aeabi_dmul>
 800853a:	0002      	movs	r2, r0
 800853c:	000b      	movs	r3, r1
 800853e:	0010      	movs	r0, r2
 8008540:	0019      	movs	r1, r3
 8008542:	f7f8 f851 	bl	80005e8 <__aeabi_d2uiz>
 8008546:	0003      	movs	r3, r0
 8008548:	b29a      	uxth	r2, r3
 800854a:	4b2c      	ldr	r3, [pc, #176]	@ (80085fc <SGP_GetMeasurementValues+0x3e0>)
 800854c:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 800854e:	4b28      	ldr	r3, [pc, #160]	@ (80085f0 <SGP_GetMeasurementValues+0x3d4>)
 8008550:	881a      	ldrh	r2, [r3, #0]
 8008552:	4b29      	ldr	r3, [pc, #164]	@ (80085f8 <SGP_GetMeasurementValues+0x3dc>)
 8008554:	801a      	strh	r2, [r3, #0]
        TIM3->CCR1 = Red;
 8008556:	4b29      	ldr	r3, [pc, #164]	@ (80085fc <SGP_GetMeasurementValues+0x3e0>)
 8008558:	881a      	ldrh	r2, [r3, #0]
 800855a:	4b29      	ldr	r3, [pc, #164]	@ (8008600 <SGP_GetMeasurementValues+0x3e4>)
 800855c:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3->CCR2 = Green;
 800855e:	4b25      	ldr	r3, [pc, #148]	@ (80085f4 <SGP_GetMeasurementValues+0x3d8>)
 8008560:	881a      	ldrh	r2, [r3, #0]
 8008562:	4b27      	ldr	r3, [pc, #156]	@ (8008600 <SGP_GetMeasurementValues+0x3e4>)
 8008564:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3->CCR3 = Blue;
 8008566:	4b24      	ldr	r3, [pc, #144]	@ (80085f8 <SGP_GetMeasurementValues+0x3dc>)
 8008568:	881a      	ldrh	r2, [r3, #0]
 800856a:	4b25      	ldr	r3, [pc, #148]	@ (8008600 <SGP_GetMeasurementValues+0x3e4>)
 800856c:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
      SGP_AmountOfSamplesDone = 0;
 800856e:	4b11      	ldr	r3, [pc, #68]	@ (80085b4 <SGP_GetMeasurementValues+0x398>)
 8008570:	2200      	movs	r2, #0
 8008572:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 8008574:	4a24      	ldr	r2, [pc, #144]	@ (8008608 <SGP_GetMeasurementValues+0x3ec>)
 8008576:	4b09      	ldr	r3, [pc, #36]	@ (800859c <SGP_GetMeasurementValues+0x380>)
 8008578:	0019      	movs	r1, r3
 800857a:	2003      	movs	r0, #3
 800857c:	f001 f834 	bl	80095e8 <CreateLine>
      HT_MeasurementReceived = false;
 8008580:	4b07      	ldr	r3, [pc, #28]	@ (80085a0 <SGP_GetMeasurementValues+0x384>)
 8008582:	2200      	movs	r2, #0
 8008584:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 8008586:	4b03      	ldr	r3, [pc, #12]	@ (8008594 <SGP_GetMeasurementValues+0x378>)
 8008588:	2200      	movs	r2, #0
 800858a:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 800858c:	2301      	movs	r3, #1
 800858e:	e055      	b.n	800863c <SGP_GetMeasurementValues+0x420>
 8008590:	200026fa 	.word	0x200026fa
 8008594:	200027a5 	.word	0x200027a5
 8008598:	0801b184 	.word	0x0801b184
 800859c:	0801b1b0 	.word	0x0801b1b0
 80085a0:	200027a4 	.word	0x200027a4
 80085a4:	20000078 	.word	0x20000078
 80085a8:	2000008c 	.word	0x2000008c
 80085ac:	20000070 	.word	0x20000070
 80085b0:	200026fb 	.word	0x200026fb
 80085b4:	200026f9 	.word	0x200026f9
 80085b8:	0801b1b4 	.word	0x0801b1b4
 80085bc:	200026f0 	.word	0x200026f0
 80085c0:	0801b1e4 	.word	0x0801b1e4
 80085c4:	0801b208 	.word	0x0801b208
 80085c8:	0801b20c 	.word	0x0801b20c
 80085cc:	0801b22c 	.word	0x0801b22c
 80085d0:	0801b230 	.word	0x0801b230
 80085d4:	20000088 	.word	0x20000088
 80085d8:	20000080 	.word	0x20000080
 80085dc:	0801b250 	.word	0x0801b250
 80085e0:	200026fc 	.word	0x200026fc
 80085e4:	0801b264 	.word	0x0801b264
 80085e8:	40590000 	.word	0x40590000
 80085ec:	3ff00000 	.word	0x3ff00000
 80085f0:	20000090 	.word	0x20000090
 80085f4:	200027aa 	.word	0x200027aa
 80085f8:	200027a8 	.word	0x200027a8
 80085fc:	200027a6 	.word	0x200027a6
 8008600:	40000400 	.word	0x40000400
 8008604:	40790000 	.word	0x40790000
 8008608:	0801b278 	.word	0x0801b278
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800860c:	f7ff fdea 	bl	80081e4 <SGP_MeasurementDone>
 8008610:	1e03      	subs	r3, r0, #0
 8008612:	d012      	beq.n	800863a <SGP_GetMeasurementValues+0x41e>
 8008614:	4b0b      	ldr	r3, [pc, #44]	@ (8008644 <SGP_GetMeasurementValues+0x428>)
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00e      	beq.n	800863a <SGP_GetMeasurementValues+0x41e>
 800861c:	4b0a      	ldr	r3, [pc, #40]	@ (8008648 <SGP_GetMeasurementValues+0x42c>)
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00a      	beq.n	800863a <SGP_GetMeasurementValues+0x41e>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 8008624:	4a09      	ldr	r2, [pc, #36]	@ (800864c <SGP_GetMeasurementValues+0x430>)
 8008626:	4b0a      	ldr	r3, [pc, #40]	@ (8008650 <SGP_GetMeasurementValues+0x434>)
 8008628:	0019      	movs	r1, r3
 800862a:	2003      	movs	r0, #3
 800862c:	f000 ffdc 	bl	80095e8 <CreateLine>
    SGP_StartMeasurement();
 8008630:	f7ff fd84 	bl	800813c <SGP_StartMeasurement>
    SGP_MsgSent = false;
 8008634:	4b07      	ldr	r3, [pc, #28]	@ (8008654 <SGP_GetMeasurementValues+0x438>)
 8008636:	2200      	movs	r2, #0
 8008638:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800863a:	2300      	movs	r3, #0
}
 800863c:	0018      	movs	r0, r3
 800863e:	46bd      	mov	sp, r7
 8008640:	b004      	add	sp, #16
 8008642:	bdb0      	pop	{r4, r5, r7, pc}
 8008644:	200026fa 	.word	0x200026fa
 8008648:	200026fb 	.word	0x200026fb
 800864c:	0801b29c 	.word	0x0801b29c
 8008650:	0801b1b0 	.word	0x0801b1b0
 8008654:	200027a5 	.word	0x200027a5

08008658 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800865e:	4b1a      	ldr	r3, [pc, #104]	@ (80086c8 <SGP_DeviceConnected+0x70>)
 8008660:	2202      	movs	r2, #2
 8008662:	0019      	movs	r1, r3
 8008664:	2059      	movs	r0, #89	@ 0x59
 8008666:	f7ff fd31 	bl	80080cc <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800866a:	2001      	movs	r0, #1
 800866c:	f001 fb62 	bl	8009d34 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8008670:	4b16      	ldr	r3, [pc, #88]	@ (80086cc <SGP_DeviceConnected+0x74>)
 8008672:	2209      	movs	r2, #9
 8008674:	0019      	movs	r1, r3
 8008676:	2059      	movs	r0, #89	@ 0x59
 8008678:	f7ff fd0a 	bl	8008090 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800867c:	1dfb      	adds	r3, r7, #7
 800867e:	2200      	movs	r2, #0
 8008680:	701a      	strb	r2, [r3, #0]
 8008682:	e011      	b.n	80086a8 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8008684:	1dfb      	adds	r3, r7, #7
 8008686:	7818      	ldrb	r0, [r3, #0]
 8008688:	1dfb      	adds	r3, r7, #7
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	4a0f      	ldr	r2, [pc, #60]	@ (80086cc <SGP_DeviceConnected+0x74>)
 800868e:	5cd3      	ldrb	r3, [r2, r3]
 8008690:	4a0f      	ldr	r2, [pc, #60]	@ (80086d0 <SGP_DeviceConnected+0x78>)
 8008692:	4910      	ldr	r1, [pc, #64]	@ (80086d4 <SGP_DeviceConnected+0x7c>)
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	0003      	movs	r3, r0
 8008698:	2002      	movs	r0, #2
 800869a:	f000 ffa5 	bl	80095e8 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800869e:	1dfb      	adds	r3, r7, #7
 80086a0:	781a      	ldrb	r2, [r3, #0]
 80086a2:	1dfb      	adds	r3, r7, #7
 80086a4:	3201      	adds	r2, #1
 80086a6:	701a      	strb	r2, [r3, #0]
 80086a8:	1dfb      	adds	r3, r7, #7
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	2b08      	cmp	r3, #8
 80086ae:	d9e9      	bls.n	8008684 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 80086b0:	4b06      	ldr	r3, [pc, #24]	@ (80086cc <SGP_DeviceConnected+0x74>)
 80086b2:	2203      	movs	r2, #3
 80086b4:	2109      	movs	r1, #9
 80086b6:	0018      	movs	r0, r3
 80086b8:	f000 f80e 	bl	80086d8 <CheckCRC>
 80086bc:	0003      	movs	r3, r0
}
 80086be:	0018      	movs	r0, r3
 80086c0:	46bd      	mov	sp, r7
 80086c2:	b002      	add	sp, #8
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	46c0      	nop			@ (mov r8, r8)
 80086c8:	2000006c 	.word	0x2000006c
 80086cc:	200026f0 	.word	0x200026f0
 80086d0:	0801b2bc 	.word	0x0801b2bc
 80086d4:	0801b22c 	.word	0x0801b22c

080086d8 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 80086d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086da:	b08f      	sub	sp, #60	@ 0x3c
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6278      	str	r0, [r7, #36]	@ 0x24
 80086e0:	0008      	movs	r0, r1
 80086e2:	0011      	movs	r1, r2
 80086e4:	2323      	movs	r3, #35	@ 0x23
 80086e6:	18fb      	adds	r3, r7, r3
 80086e8:	1c02      	adds	r2, r0, #0
 80086ea:	701a      	strb	r2, [r3, #0]
 80086ec:	2322      	movs	r3, #34	@ 0x22
 80086ee:	18fb      	adds	r3, r7, r3
 80086f0:	1c0a      	adds	r2, r1, #0
 80086f2:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80086f4:	2317      	movs	r3, #23
 80086f6:	2220      	movs	r2, #32
 80086f8:	189b      	adds	r3, r3, r2
 80086fa:	19db      	adds	r3, r3, r7
 80086fc:	2200      	movs	r2, #0
 80086fe:	701a      	strb	r2, [r3, #0]
 8008700:	e09f      	b.n	8008842 <CheckCRC+0x16a>
 8008702:	466b      	mov	r3, sp
 8008704:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 8008706:	2322      	movs	r3, #34	@ 0x22
 8008708:	18fb      	adds	r3, r7, r3
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	001a      	movs	r2, r3
 800870e:	3a01      	subs	r2, #1
 8008710:	633a      	str	r2, [r7, #48]	@ 0x30
 8008712:	60bb      	str	r3, [r7, #8]
 8008714:	2200      	movs	r2, #0
 8008716:	60fa      	str	r2, [r7, #12]
 8008718:	68b8      	ldr	r0, [r7, #8]
 800871a:	68f9      	ldr	r1, [r7, #12]
 800871c:	0002      	movs	r2, r0
 800871e:	0f52      	lsrs	r2, r2, #29
 8008720:	000c      	movs	r4, r1
 8008722:	00e4      	lsls	r4, r4, #3
 8008724:	61fc      	str	r4, [r7, #28]
 8008726:	69fc      	ldr	r4, [r7, #28]
 8008728:	4314      	orrs	r4, r2
 800872a:	61fc      	str	r4, [r7, #28]
 800872c:	0002      	movs	r2, r0
 800872e:	00d2      	lsls	r2, r2, #3
 8008730:	61ba      	str	r2, [r7, #24]
 8008732:	603b      	str	r3, [r7, #0]
 8008734:	2200      	movs	r2, #0
 8008736:	607a      	str	r2, [r7, #4]
 8008738:	6838      	ldr	r0, [r7, #0]
 800873a:	6879      	ldr	r1, [r7, #4]
 800873c:	0002      	movs	r2, r0
 800873e:	0f52      	lsrs	r2, r2, #29
 8008740:	000c      	movs	r4, r1
 8008742:	00e4      	lsls	r4, r4, #3
 8008744:	617c      	str	r4, [r7, #20]
 8008746:	697c      	ldr	r4, [r7, #20]
 8008748:	4314      	orrs	r4, r2
 800874a:	617c      	str	r4, [r7, #20]
 800874c:	0002      	movs	r2, r0
 800874e:	00d2      	lsls	r2, r2, #3
 8008750:	613a      	str	r2, [r7, #16]
 8008752:	3307      	adds	r3, #7
 8008754:	08db      	lsrs	r3, r3, #3
 8008756:	00db      	lsls	r3, r3, #3
 8008758:	466a      	mov	r2, sp
 800875a:	1ad3      	subs	r3, r2, r3
 800875c:	469d      	mov	sp, r3
 800875e:	466b      	mov	r3, sp
 8008760:	3300      	adds	r3, #0
 8008762:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8008764:	2316      	movs	r3, #22
 8008766:	2220      	movs	r2, #32
 8008768:	189b      	adds	r3, r3, r2
 800876a:	19db      	adds	r3, r3, r7
 800876c:	2200      	movs	r2, #0
 800876e:	701a      	strb	r2, [r3, #0]
 8008770:	e01e      	b.n	80087b0 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 8008772:	2317      	movs	r3, #23
 8008774:	2220      	movs	r2, #32
 8008776:	189b      	adds	r3, r3, r2
 8008778:	19db      	adds	r3, r3, r7
 800877a:	781a      	ldrb	r2, [r3, #0]
 800877c:	2116      	movs	r1, #22
 800877e:	2320      	movs	r3, #32
 8008780:	18cb      	adds	r3, r1, r3
 8008782:	19db      	adds	r3, r3, r7
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	18d3      	adds	r3, r2, r3
 8008788:	001a      	movs	r2, r3
 800878a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878c:	189a      	adds	r2, r3, r2
 800878e:	0008      	movs	r0, r1
 8008790:	2320      	movs	r3, #32
 8008792:	18cb      	adds	r3, r1, r3
 8008794:	19db      	adds	r3, r3, r7
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	7811      	ldrb	r1, [r2, #0]
 800879a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800879c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800879e:	2320      	movs	r3, #32
 80087a0:	18c3      	adds	r3, r0, r3
 80087a2:	19db      	adds	r3, r3, r7
 80087a4:	781a      	ldrb	r2, [r3, #0]
 80087a6:	2320      	movs	r3, #32
 80087a8:	18c3      	adds	r3, r0, r3
 80087aa:	19db      	adds	r3, r3, r7
 80087ac:	3201      	adds	r2, #1
 80087ae:	701a      	strb	r2, [r3, #0]
 80087b0:	2316      	movs	r3, #22
 80087b2:	2220      	movs	r2, #32
 80087b4:	189b      	adds	r3, r3, r2
 80087b6:	19da      	adds	r2, r3, r7
 80087b8:	2322      	movs	r3, #34	@ 0x22
 80087ba:	18fb      	adds	r3, r7, r3
 80087bc:	7812      	ldrb	r2, [r2, #0]
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d3d6      	bcc.n	8008772 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 80087c4:	2417      	movs	r4, #23
 80087c6:	2320      	movs	r3, #32
 80087c8:	18e3      	adds	r3, r4, r3
 80087ca:	19db      	adds	r3, r3, r7
 80087cc:	781a      	ldrb	r2, [r3, #0]
 80087ce:	2322      	movs	r3, #34	@ 0x22
 80087d0:	18fb      	adds	r3, r7, r3
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	18d3      	adds	r3, r2, r3
 80087d6:	3b01      	subs	r3, #1
 80087d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087da:	18d2      	adds	r2, r2, r3
 80087dc:	250b      	movs	r5, #11
 80087de:	2320      	movs	r3, #32
 80087e0:	18eb      	adds	r3, r5, r3
 80087e2:	19db      	adds	r3, r3, r7
 80087e4:	7812      	ldrb	r2, [r2, #0]
 80087e6:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 80087e8:	2322      	movs	r3, #34	@ 0x22
 80087ea:	18fb      	adds	r3, r7, r3
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	3b01      	subs	r3, #1
 80087f0:	b2da      	uxtb	r2, r3
 80087f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087f4:	0011      	movs	r1, r2
 80087f6:	0018      	movs	r0, r3
 80087f8:	f000 f838 	bl	800886c <CalculateCRC>
 80087fc:	0003      	movs	r3, r0
 80087fe:	001a      	movs	r2, r3
 8008800:	2320      	movs	r3, #32
 8008802:	18eb      	adds	r3, r5, r3
 8008804:	19db      	adds	r3, r3, r7
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	4293      	cmp	r3, r2
 800880a:	d00c      	beq.n	8008826 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800880c:	2320      	movs	r3, #32
 800880e:	18e3      	adds	r3, r4, r3
 8008810:	19db      	adds	r3, r3, r7
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	3301      	adds	r3, #1
 8008816:	4a13      	ldr	r2, [pc, #76]	@ (8008864 <CheckCRC+0x18c>)
 8008818:	4913      	ldr	r1, [pc, #76]	@ (8008868 <CheckCRC+0x190>)
 800881a:	2001      	movs	r0, #1
 800881c:	f000 fee4 	bl	80095e8 <CreateLine>
      return false;
 8008820:	2300      	movs	r3, #0
 8008822:	46b5      	mov	sp, r6
 8008824:	e019      	b.n	800885a <CheckCRC+0x182>
 8008826:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8008828:	2217      	movs	r2, #23
 800882a:	2320      	movs	r3, #32
 800882c:	18d3      	adds	r3, r2, r3
 800882e:	19db      	adds	r3, r3, r7
 8008830:	2120      	movs	r1, #32
 8008832:	1852      	adds	r2, r2, r1
 8008834:	19d1      	adds	r1, r2, r7
 8008836:	2222      	movs	r2, #34	@ 0x22
 8008838:	18ba      	adds	r2, r7, r2
 800883a:	7809      	ldrb	r1, [r1, #0]
 800883c:	7812      	ldrb	r2, [r2, #0]
 800883e:	188a      	adds	r2, r1, r2
 8008840:	701a      	strb	r2, [r3, #0]
 8008842:	2317      	movs	r3, #23
 8008844:	2220      	movs	r2, #32
 8008846:	189b      	adds	r3, r3, r2
 8008848:	19da      	adds	r2, r3, r7
 800884a:	2323      	movs	r3, #35	@ 0x23
 800884c:	18fb      	adds	r3, r7, r3
 800884e:	7812      	ldrb	r2, [r2, #0]
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	429a      	cmp	r2, r3
 8008854:	d200      	bcs.n	8008858 <CheckCRC+0x180>
 8008856:	e754      	b.n	8008702 <CheckCRC+0x2a>
    }
  }
  return true;
 8008858:	2301      	movs	r3, #1
}
 800885a:	0018      	movs	r0, r3
 800885c:	46bd      	mov	sp, r7
 800885e:	b00f      	add	sp, #60	@ 0x3c
 8008860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008862:	46c0      	nop			@ (mov r8, r8)
 8008864:	0801b2dc 	.word	0x0801b2dc
 8008868:	0801b208 	.word	0x0801b208

0800886c <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	000a      	movs	r2, r1
 8008876:	1cfb      	adds	r3, r7, #3
 8008878:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800887a:	230f      	movs	r3, #15
 800887c:	18fb      	adds	r3, r7, r3
 800887e:	22ff      	movs	r2, #255	@ 0xff
 8008880:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8008882:	230e      	movs	r3, #14
 8008884:	18fb      	adds	r3, r7, r3
 8008886:	2200      	movs	r2, #0
 8008888:	701a      	strb	r2, [r3, #0]
 800888a:	e037      	b.n	80088fc <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800888c:	230e      	movs	r3, #14
 800888e:	18fb      	adds	r3, r7, r3
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	18d3      	adds	r3, r2, r3
 8008896:	7819      	ldrb	r1, [r3, #0]
 8008898:	220f      	movs	r2, #15
 800889a:	18bb      	adds	r3, r7, r2
 800889c:	18ba      	adds	r2, r7, r2
 800889e:	7812      	ldrb	r2, [r2, #0]
 80088a0:	404a      	eors	r2, r1
 80088a2:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 80088a4:	230d      	movs	r3, #13
 80088a6:	18fb      	adds	r3, r7, r3
 80088a8:	2200      	movs	r2, #0
 80088aa:	701a      	strb	r2, [r3, #0]
 80088ac:	e01b      	b.n	80088e6 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 80088ae:	210f      	movs	r1, #15
 80088b0:	187b      	adds	r3, r7, r1
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	b25b      	sxtb	r3, r3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	da09      	bge.n	80088ce <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 80088ba:	187b      	adds	r3, r7, r1
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	005b      	lsls	r3, r3, #1
 80088c0:	b25b      	sxtb	r3, r3
 80088c2:	2231      	movs	r2, #49	@ 0x31
 80088c4:	4053      	eors	r3, r2
 80088c6:	b25a      	sxtb	r2, r3
 80088c8:	187b      	adds	r3, r7, r1
 80088ca:	701a      	strb	r2, [r3, #0]
 80088cc:	e005      	b.n	80088da <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 80088ce:	230f      	movs	r3, #15
 80088d0:	18fa      	adds	r2, r7, r3
 80088d2:	18fb      	adds	r3, r7, r3
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	18db      	adds	r3, r3, r3
 80088d8:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80088da:	210d      	movs	r1, #13
 80088dc:	187b      	adds	r3, r7, r1
 80088de:	781a      	ldrb	r2, [r3, #0]
 80088e0:	187b      	adds	r3, r7, r1
 80088e2:	3201      	adds	r2, #1
 80088e4:	701a      	strb	r2, [r3, #0]
 80088e6:	230d      	movs	r3, #13
 80088e8:	18fb      	adds	r3, r7, r3
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	2b07      	cmp	r3, #7
 80088ee:	d9de      	bls.n	80088ae <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80088f0:	210e      	movs	r1, #14
 80088f2:	187b      	adds	r3, r7, r1
 80088f4:	781a      	ldrb	r2, [r3, #0]
 80088f6:	187b      	adds	r3, r7, r1
 80088f8:	3201      	adds	r2, #1
 80088fa:	701a      	strb	r2, [r3, #0]
 80088fc:	230e      	movs	r3, #14
 80088fe:	18fa      	adds	r2, r7, r3
 8008900:	1cfb      	adds	r3, r7, #3
 8008902:	7812      	ldrb	r2, [r2, #0]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	429a      	cmp	r2, r3
 8008908:	d3c0      	bcc.n	800888c <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800890a:	230f      	movs	r3, #15
 800890c:	18fb      	adds	r3, r7, r3
 800890e:	781b      	ldrb	r3, [r3, #0]
}
 8008910:	0018      	movs	r0, r3
 8008912:	46bd      	mov	sp, r7
 8008914:	b004      	add	sp, #16
 8008916:	bd80      	pop	{r7, pc}

08008918 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4936      	ldr	r1, [pc, #216]	@ (8008a00 <SGP_GetHT+0xe8>)
 8008928:	1c18      	adds	r0, r3, #0
 800892a:	f7f7 ff47 	bl	80007bc <__aeabi_fadd>
 800892e:	1c03      	adds	r3, r0, #0
 8008930:	4934      	ldr	r1, [pc, #208]	@ (8008a04 <SGP_GetHT+0xec>)
 8008932:	1c18      	adds	r0, r3, #0
 8008934:	f7f8 f8cc 	bl	8000ad0 <__aeabi_fdiv>
 8008938:	1c03      	adds	r3, r0, #0
 800893a:	4933      	ldr	r1, [pc, #204]	@ (8008a08 <SGP_GetHT+0xf0>)
 800893c:	1c18      	adds	r0, r3, #0
 800893e:	f7f8 faad 	bl	8000e9c <__aeabi_fmul>
 8008942:	1c03      	adds	r3, r0, #0
 8008944:	1c18      	adds	r0, r3, #0
 8008946:	f7f7 fe37 	bl	80005b8 <__aeabi_f2uiz>
 800894a:	0003      	movs	r3, r0
 800894c:	b29a      	uxth	r2, r3
 800894e:	4b2f      	ldr	r3, [pc, #188]	@ (8008a0c <SGP_GetHT+0xf4>)
 8008950:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	492e      	ldr	r1, [pc, #184]	@ (8008a10 <SGP_GetHT+0xf8>)
 8008958:	1c18      	adds	r0, r3, #0
 800895a:	f7f8 f8b9 	bl	8000ad0 <__aeabi_fdiv>
 800895e:	1c03      	adds	r3, r0, #0
 8008960:	4929      	ldr	r1, [pc, #164]	@ (8008a08 <SGP_GetHT+0xf0>)
 8008962:	1c18      	adds	r0, r3, #0
 8008964:	f7f8 fa9a 	bl	8000e9c <__aeabi_fmul>
 8008968:	1c03      	adds	r3, r0, #0
 800896a:	1c18      	adds	r0, r3, #0
 800896c:	f7f7 fe24 	bl	80005b8 <__aeabi_f2uiz>
 8008970:	0003      	movs	r3, r0
 8008972:	b29a      	uxth	r2, r3
 8008974:	4b27      	ldr	r3, [pc, #156]	@ (8008a14 <SGP_GetHT+0xfc>)
 8008976:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8008978:	4b26      	ldr	r3, [pc, #152]	@ (8008a14 <SGP_GetHT+0xfc>)
 800897a:	881b      	ldrh	r3, [r3, #0]
 800897c:	0a1b      	lsrs	r3, r3, #8
 800897e:	b29b      	uxth	r3, r3
 8008980:	b2da      	uxtb	r2, r3
 8008982:	4b25      	ldr	r3, [pc, #148]	@ (8008a18 <SGP_GetHT+0x100>)
 8008984:	709a      	strb	r2, [r3, #2]
 8008986:	4b24      	ldr	r3, [pc, #144]	@ (8008a18 <SGP_GetHT+0x100>)
 8008988:	789a      	ldrb	r2, [r3, #2]
 800898a:	210c      	movs	r1, #12
 800898c:	187b      	adds	r3, r7, r1
 800898e:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8008990:	4b20      	ldr	r3, [pc, #128]	@ (8008a14 <SGP_GetHT+0xfc>)
 8008992:	881b      	ldrh	r3, [r3, #0]
 8008994:	b2da      	uxtb	r2, r3
 8008996:	4b20      	ldr	r3, [pc, #128]	@ (8008a18 <SGP_GetHT+0x100>)
 8008998:	70da      	strb	r2, [r3, #3]
 800899a:	4b1f      	ldr	r3, [pc, #124]	@ (8008a18 <SGP_GetHT+0x100>)
 800899c:	78da      	ldrb	r2, [r3, #3]
 800899e:	187b      	adds	r3, r7, r1
 80089a0:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 80089a2:	187b      	adds	r3, r7, r1
 80089a4:	2102      	movs	r1, #2
 80089a6:	0018      	movs	r0, r3
 80089a8:	f7ff ff60 	bl	800886c <CalculateCRC>
 80089ac:	0003      	movs	r3, r0
 80089ae:	001a      	movs	r2, r3
 80089b0:	4b19      	ldr	r3, [pc, #100]	@ (8008a18 <SGP_GetHT+0x100>)
 80089b2:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 80089b4:	4b15      	ldr	r3, [pc, #84]	@ (8008a0c <SGP_GetHT+0xf4>)
 80089b6:	881b      	ldrh	r3, [r3, #0]
 80089b8:	0a1b      	lsrs	r3, r3, #8
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	b2da      	uxtb	r2, r3
 80089be:	4b16      	ldr	r3, [pc, #88]	@ (8008a18 <SGP_GetHT+0x100>)
 80089c0:	715a      	strb	r2, [r3, #5]
 80089c2:	4b15      	ldr	r3, [pc, #84]	@ (8008a18 <SGP_GetHT+0x100>)
 80089c4:	795a      	ldrb	r2, [r3, #5]
 80089c6:	2108      	movs	r1, #8
 80089c8:	187b      	adds	r3, r7, r1
 80089ca:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 80089cc:	4b0f      	ldr	r3, [pc, #60]	@ (8008a0c <SGP_GetHT+0xf4>)
 80089ce:	881b      	ldrh	r3, [r3, #0]
 80089d0:	b2da      	uxtb	r2, r3
 80089d2:	4b11      	ldr	r3, [pc, #68]	@ (8008a18 <SGP_GetHT+0x100>)
 80089d4:	719a      	strb	r2, [r3, #6]
 80089d6:	4b10      	ldr	r3, [pc, #64]	@ (8008a18 <SGP_GetHT+0x100>)
 80089d8:	799a      	ldrb	r2, [r3, #6]
 80089da:	187b      	adds	r3, r7, r1
 80089dc:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 80089de:	187b      	adds	r3, r7, r1
 80089e0:	2102      	movs	r1, #2
 80089e2:	0018      	movs	r0, r3
 80089e4:	f7ff ff42 	bl	800886c <CalculateCRC>
 80089e8:	0003      	movs	r3, r0
 80089ea:	001a      	movs	r2, r3
 80089ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008a18 <SGP_GetHT+0x100>)
 80089ee:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 80089f0:	4b0a      	ldr	r3, [pc, #40]	@ (8008a1c <SGP_GetHT+0x104>)
 80089f2:	2201      	movs	r2, #1
 80089f4:	701a      	strb	r2, [r3, #0]
}
 80089f6:	46c0      	nop			@ (mov r8, r8)
 80089f8:	46bd      	mov	sp, r7
 80089fa:	b004      	add	sp, #16
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	46c0      	nop			@ (mov r8, r8)
 8008a00:	42340000 	.word	0x42340000
 8008a04:	432f0000 	.word	0x432f0000
 8008a08:	477fff00 	.word	0x477fff00
 8008a0c:	200027a2 	.word	0x200027a2
 8008a10:	42c80000 	.word	0x42c80000
 8008a14:	200027a0 	.word	0x200027a0
 8008a18:	20000078 	.word	0x20000078
 8008a1c:	200027a4 	.word	0x200027a4

08008a20 <batteryChargeCheck>:
bool configSet = false;
bool energyGood = false;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;

Battery_Status batteryChargeCheck(){
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
  Battery_Status status;
  float batteryCharge = ReadBatteryVoltage();
 8008a26:	f7fc fd15 	bl	8005454 <ReadBatteryVoltage>
 8008a2a:	1c03      	adds	r3, r0, #0
 8008a2c:	603b      	str	r3, [r7, #0]
  if(batteryCharge < 3.5){
 8008a2e:	491f      	ldr	r1, [pc, #124]	@ (8008aac <batteryChargeCheck+0x8c>)
 8008a30:	6838      	ldr	r0, [r7, #0]
 8008a32:	f7f7 fd4b 	bl	80004cc <__aeabi_fcmplt>
 8008a36:	1e03      	subs	r3, r0, #0
 8008a38:	d002      	beq.n	8008a40 <batteryChargeCheck+0x20>
    status = BATTERY_CRITICAL;
 8008a3a:	1dfb      	adds	r3, r7, #7
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 8008a40:	6838      	ldr	r0, [r7, #0]
 8008a42:	f7fa fc8d 	bl	8003360 <__aeabi_f2d>
 8008a46:	4a1a      	ldr	r2, [pc, #104]	@ (8008ab0 <batteryChargeCheck+0x90>)
 8008a48:	4b1a      	ldr	r3, [pc, #104]	@ (8008ab4 <batteryChargeCheck+0x94>)
 8008a4a:	f7f7 fd05 	bl	8000458 <__aeabi_dcmplt>
 8008a4e:	1e03      	subs	r3, r0, #0
 8008a50:	d008      	beq.n	8008a64 <batteryChargeCheck+0x44>
 8008a52:	4916      	ldr	r1, [pc, #88]	@ (8008aac <batteryChargeCheck+0x8c>)
 8008a54:	6838      	ldr	r0, [r7, #0]
 8008a56:	f7f7 fd57 	bl	8000508 <__aeabi_fcmpge>
 8008a5a:	1e03      	subs	r3, r0, #0
 8008a5c:	d002      	beq.n	8008a64 <batteryChargeCheck+0x44>
    status = BATTERY_LOW;
 8008a5e:	1dfb      	adds	r3, r7, #7
 8008a60:	2202      	movs	r2, #2
 8008a62:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 8008a64:	2181      	movs	r1, #129	@ 0x81
 8008a66:	05c9      	lsls	r1, r1, #23
 8008a68:	6838      	ldr	r0, [r7, #0]
 8008a6a:	f7f7 fd2f 	bl	80004cc <__aeabi_fcmplt>
 8008a6e:	1e03      	subs	r3, r0, #0
 8008a70:	d00b      	beq.n	8008a8a <batteryChargeCheck+0x6a>
 8008a72:	6838      	ldr	r0, [r7, #0]
 8008a74:	f7fa fc74 	bl	8003360 <__aeabi_f2d>
 8008a78:	4a0d      	ldr	r2, [pc, #52]	@ (8008ab0 <batteryChargeCheck+0x90>)
 8008a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8008ab4 <batteryChargeCheck+0x94>)
 8008a7c:	f7f7 fd0a 	bl	8000494 <__aeabi_dcmpge>
 8008a80:	1e03      	subs	r3, r0, #0
 8008a82:	d002      	beq.n	8008a8a <batteryChargeCheck+0x6a>
    status = BATTERY_GOOD;
 8008a84:	1dfb      	adds	r3, r7, #7
 8008a86:	2203      	movs	r2, #3
 8008a88:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 8008a8a:	2181      	movs	r1, #129	@ 0x81
 8008a8c:	05c9      	lsls	r1, r1, #23
 8008a8e:	6838      	ldr	r0, [r7, #0]
 8008a90:	f7f7 fd3a 	bl	8000508 <__aeabi_fcmpge>
 8008a94:	1e03      	subs	r3, r0, #0
 8008a96:	d002      	beq.n	8008a9e <batteryChargeCheck+0x7e>
    status = BATTERY_FULL;
 8008a98:	1dfb      	adds	r3, r7, #7
 8008a9a:	2204      	movs	r2, #4
 8008a9c:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 8008a9e:	1dfb      	adds	r3, r7, #7
 8008aa0:	781b      	ldrb	r3, [r3, #0]
}
 8008aa2:	0018      	movs	r0, r3
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	b002      	add	sp, #8
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	46c0      	nop			@ (mov r8, r8)
 8008aac:	40600000 	.word	0x40600000
 8008ab0:	9999999a 	.word	0x9999999a
 8008ab4:	400d9999 	.word	0x400d9999

08008ab8 <powerCheck>:

Battery_Status powerCheck(){
 8008ab8:	b590      	push	{r4, r7, lr}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
  PowerStamp = HAL_GetTick() + 10000;
 8008abe:	f001 f92f 	bl	8009d20 <HAL_GetTick>
 8008ac2:	0003      	movs	r3, r0
 8008ac4:	4a0b      	ldr	r2, [pc, #44]	@ (8008af4 <powerCheck+0x3c>)
 8008ac6:	189a      	adds	r2, r3, r2
 8008ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8008af8 <powerCheck+0x40>)
 8008aca:	601a      	str	r2, [r3, #0]
  Battery_Status status;
  if(Check_USB_PowerOn()){
 8008acc:	f7fc fd88 	bl	80055e0 <Check_USB_PowerOn>
 8008ad0:	1e03      	subs	r3, r0, #0
 8008ad2:	d003      	beq.n	8008adc <powerCheck+0x24>
    status = USB_PLUGGED_IN;
 8008ad4:	1dfb      	adds	r3, r7, #7
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	701a      	strb	r2, [r3, #0]
 8008ada:	e004      	b.n	8008ae6 <powerCheck+0x2e>
  }
  else{
    status = batteryChargeCheck();
 8008adc:	1dfc      	adds	r4, r7, #7
 8008ade:	f7ff ff9f 	bl	8008a20 <batteryChargeCheck>
 8008ae2:	0003      	movs	r3, r0
 8008ae4:	7023      	strb	r3, [r4, #0]
  }
  return status;
 8008ae6:	1dfb      	adds	r3, r7, #7
 8008ae8:	781b      	ldrb	r3, [r3, #0]
}
 8008aea:	0018      	movs	r0, r3
 8008aec:	46bd      	mov	sp, r7
 8008aee:	b003      	add	sp, #12
 8008af0:	bd90      	pop	{r4, r7, pc}
 8008af2:	46c0      	nop			@ (mov r8, r8)
 8008af4:	00002710 	.word	0x00002710
 8008af8:	200027b4 	.word	0x200027b4

08008afc <powerDisplay>:

void powerDisplay(Battery_Status status){
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	0002      	movs	r2, r0
 8008b04:	1dfb      	adds	r3, r7, #7
 8008b06:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 8008b08:	1dfb      	adds	r3, r7, #7
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d105      	bne.n	8008b1c <powerDisplay+0x20>
    Debug("LEDS are okay");
 8008b10:	4a18      	ldr	r2, [pc, #96]	@ (8008b74 <powerDisplay+0x78>)
 8008b12:	4b19      	ldr	r3, [pc, #100]	@ (8008b78 <powerDisplay+0x7c>)
 8008b14:	0019      	movs	r1, r3
 8008b16:	2003      	movs	r0, #3
 8008b18:	f000 fd66 	bl	80095e8 <CreateLine>
  }
  if(status == BATTERY_FULL){
 8008b1c:	1dfb      	adds	r3, r7, #7
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	2b04      	cmp	r3, #4
 8008b22:	d105      	bne.n	8008b30 <powerDisplay+0x34>
    Debug("Battery fully charged");
 8008b24:	4a15      	ldr	r2, [pc, #84]	@ (8008b7c <powerDisplay+0x80>)
 8008b26:	4b14      	ldr	r3, [pc, #80]	@ (8008b78 <powerDisplay+0x7c>)
 8008b28:	0019      	movs	r1, r3
 8008b2a:	2003      	movs	r0, #3
 8008b2c:	f000 fd5c 	bl	80095e8 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 8008b30:	1dfb      	adds	r3, r7, #7
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	2b03      	cmp	r3, #3
 8008b36:	d105      	bne.n	8008b44 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 8008b38:	4a11      	ldr	r2, [pc, #68]	@ (8008b80 <powerDisplay+0x84>)
 8008b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8008b78 <powerDisplay+0x7c>)
 8008b3c:	0019      	movs	r1, r3
 8008b3e:	2003      	movs	r0, #3
 8008b40:	f000 fd52 	bl	80095e8 <CreateLine>
  }
  if(status == BATTERY_LOW){
 8008b44:	1dfb      	adds	r3, r7, #7
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d105      	bne.n	8008b58 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 8008b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8008b84 <powerDisplay+0x88>)
 8008b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8008b78 <powerDisplay+0x7c>)
 8008b50:	0019      	movs	r1, r3
 8008b52:	2003      	movs	r0, #3
 8008b54:	f000 fd48 	bl	80095e8 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 8008b58:	1dfb      	adds	r3, r7, #7
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d105      	bne.n	8008b6c <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 8008b60:	4a09      	ldr	r2, [pc, #36]	@ (8008b88 <powerDisplay+0x8c>)
 8008b62:	4b05      	ldr	r3, [pc, #20]	@ (8008b78 <powerDisplay+0x7c>)
 8008b64:	0019      	movs	r1, r3
 8008b66:	2003      	movs	r0, #3
 8008b68:	f000 fd3e 	bl	80095e8 <CreateLine>
  }
}
 8008b6c:	46c0      	nop			@ (mov r8, r8)
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	b002      	add	sp, #8
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	0801b384 	.word	0x0801b384
 8008b78:	0801b394 	.word	0x0801b394
 8008b7c:	0801b398 	.word	0x0801b398
 8008b80:	0801b3b0 	.word	0x0801b3b0
 8008b84:	0801b3d0 	.word	0x0801b3d0
 8008b88:	0801b3e8 	.word	0x0801b3e8

08008b8c <configCheck>:

void configCheck(){
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 8008b90:	f7fc fd35 	bl	80055fe <BootButton_Pressed>
 8008b94:	1e03      	subs	r3, r0, #0
 8008b96:	d007      	beq.n	8008ba8 <configCheck+0x1c>
 8008b98:	f7fc fd42 	bl	8005620 <UserButton_Pressed>
 8008b9c:	1e03      	subs	r3, r0, #0
 8008b9e:	d003      	beq.n	8008ba8 <configCheck+0x1c>
    configSet = true;
 8008ba0:	4b19      	ldr	r3, [pc, #100]	@ (8008c08 <configCheck+0x7c>)
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	701a      	strb	r2, [r3, #0]
 8008ba6:	e00a      	b.n	8008bbe <configCheck+0x32>
  }
  else{
    configSet = false;
 8008ba8:	4b17      	ldr	r3, [pc, #92]	@ (8008c08 <configCheck+0x7c>)
 8008baa:	2200      	movs	r2, #0
 8008bac:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 8008bae:	f001 f8b7 	bl	8009d20 <HAL_GetTick>
 8008bb2:	0003      	movs	r3, r0
 8008bb4:	22fa      	movs	r2, #250	@ 0xfa
 8008bb6:	00d2      	lsls	r2, r2, #3
 8008bb8:	189a      	adds	r2, r3, r2
 8008bba:	4b14      	ldr	r3, [pc, #80]	@ (8008c0c <configCheck+0x80>)
 8008bbc:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 8008bbe:	4b12      	ldr	r3, [pc, #72]	@ (8008c08 <configCheck+0x7c>)
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d01c      	beq.n	8008c00 <configCheck+0x74>
 8008bc6:	4b11      	ldr	r3, [pc, #68]	@ (8008c0c <configCheck+0x80>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	0018      	movs	r0, r3
 8008bcc:	f000 fcb6 	bl	800953c <TimestampIsReached>
 8008bd0:	1e03      	subs	r3, r0, #0
 8008bd2:	d015      	beq.n	8008c00 <configCheck+0x74>
    SetConfigMode(); //Make config mode wifi
 8008bd4:	f7fa fd9e 	bl	8003714 <SetConfigMode>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8008bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8008c10 <configCheck+0x84>)
 8008bda:	2200      	movs	r2, #0
 8008bdc:	2101      	movs	r1, #1
 8008bde:	0018      	movs	r0, r3
 8008be0:	f002 fc3d 	bl	800b45e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8008be4:	2380      	movs	r3, #128	@ 0x80
 8008be6:	005b      	lsls	r3, r3, #1
 8008be8:	4809      	ldr	r0, [pc, #36]	@ (8008c10 <configCheck+0x84>)
 8008bea:	2200      	movs	r2, #0
 8008bec:	0019      	movs	r1, r3
 8008bee:	f002 fc36 	bl	800b45e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8008bf2:	2380      	movs	r3, #128	@ 0x80
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4806      	ldr	r0, [pc, #24]	@ (8008c10 <configCheck+0x84>)
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	0019      	movs	r1, r3
 8008bfc:	f002 fc2f 	bl	800b45e <HAL_GPIO_WritePin>
  }
}
 8008c00:	46c0      	nop			@ (mov r8, r8)
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	46c0      	nop			@ (mov r8, r8)
 8008c08:	200027ac 	.word	0x200027ac
 8008c0c:	200027b0 	.word	0x200027b0
 8008c10:	50000400 	.word	0x50000400

08008c14 <status_Upkeep>:
  //RTC_SetWakeUpTimer(RTC_Handler, 300000);
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
  HAL_ResumeTick();
}

void status_Upkeep(){
 8008c14:	b590      	push	{r4, r7, lr}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
  Battery_Status status;
  configCheck();
 8008c1a:	f7ff ffb7 	bl	8008b8c <configCheck>
  if(TimestampIsReached(PowerStamp)){
 8008c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8008c48 <status_Upkeep+0x34>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	0018      	movs	r0, r3
 8008c24:	f000 fc8a 	bl	800953c <TimestampIsReached>
 8008c28:	1e03      	subs	r3, r0, #0
 8008c2a:	d009      	beq.n	8008c40 <status_Upkeep+0x2c>
    status = powerCheck();
 8008c2c:	1dfc      	adds	r4, r7, #7
 8008c2e:	f7ff ff43 	bl	8008ab8 <powerCheck>
 8008c32:	0003      	movs	r3, r0
 8008c34:	7023      	strb	r3, [r4, #0]
    powerDisplay(status);
 8008c36:	1dfb      	adds	r3, r7, #7
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	0018      	movs	r0, r3
 8008c3c:	f7ff ff5e 	bl	8008afc <powerDisplay>
  }
}
 8008c40:	46c0      	nop			@ (mov r8, r8)
 8008c42:	46bd      	mov	sp, r7
 8008c44:	b003      	add	sp, #12
 8008c46:	bd90      	pop	{r4, r7, pc}
 8008c48:	200027b4 	.word	0x200027b4

08008c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c50:	4b07      	ldr	r3, [pc, #28]	@ (8008c70 <HAL_MspInit+0x24>)
 8008c52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c54:	4b06      	ldr	r3, [pc, #24]	@ (8008c70 <HAL_MspInit+0x24>)
 8008c56:	2101      	movs	r1, #1
 8008c58:	430a      	orrs	r2, r1
 8008c5a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8008c5c:	4b04      	ldr	r3, [pc, #16]	@ (8008c70 <HAL_MspInit+0x24>)
 8008c5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c60:	4b03      	ldr	r3, [pc, #12]	@ (8008c70 <HAL_MspInit+0x24>)
 8008c62:	2180      	movs	r1, #128	@ 0x80
 8008c64:	0549      	lsls	r1, r1, #21
 8008c66:	430a      	orrs	r2, r1
 8008c68:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008c6a:	46c0      	nop			@ (mov r8, r8)
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	40021000 	.word	0x40021000

08008c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008c78:	46c0      	nop			@ (mov r8, r8)
 8008c7a:	e7fd      	b.n	8008c78 <NMI_Handler+0x4>

08008c7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008c80:	46c0      	nop			@ (mov r8, r8)
 8008c82:	e7fd      	b.n	8008c80 <HardFault_Handler+0x4>

08008c84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8008c88:	46c0      	nop			@ (mov r8, r8)
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008c92:	46c0      	nop			@ (mov r8, r8)
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008c9c:	f001 f82e 	bl	8009cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008ca0:	46c0      	nop			@ (mov r8, r8)
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
	...

08008ca8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8008cac:	4b05      	ldr	r3, [pc, #20]	@ (8008cc4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8008cae:	0018      	movs	r0, r3
 8008cb0:	f001 fea1 	bl	800a9f6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8008cb4:	4b04      	ldr	r3, [pc, #16]	@ (8008cc8 <DMA1_Channel2_3_IRQHandler+0x20>)
 8008cb6:	0018      	movs	r0, r3
 8008cb8:	f001 fe9d 	bl	800a9f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8008cbc:	46c0      	nop			@ (mov r8, r8)
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	46c0      	nop			@ (mov r8, r8)
 8008cc4:	20000d60 	.word	0x20000d60
 8008cc8:	20000d18 	.word	0x20000d18

08008ccc <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8008cd0:	4b07      	ldr	r3, [pc, #28]	@ (8008cf0 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 8008cd2:	0018      	movs	r0, r3
 8008cd4:	f001 fe8f 	bl	800a9f6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8008cd8:	4b06      	ldr	r3, [pc, #24]	@ (8008cf4 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 8008cda:	0018      	movs	r0, r3
 8008cdc:	f001 fe8b 	bl	800a9f6 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8008ce0:	4b05      	ldr	r3, [pc, #20]	@ (8008cf8 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8008ce2:	0018      	movs	r0, r3
 8008ce4:	f001 fe87 	bl	800a9f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8008ce8:	46c0      	nop			@ (mov r8, r8)
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	46c0      	nop			@ (mov r8, r8)
 8008cf0:	20000de4 	.word	0x20000de4
 8008cf4:	20002a64 	.word	0x20002a64
 8008cf8:	20002aac 	.word	0x20002aac

08008cfc <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8008d00:	4b03      	ldr	r3, [pc, #12]	@ (8008d10 <USART4_5_IRQHandler+0x14>)
 8008d02:	0018      	movs	r0, r3
 8008d04:	f008 fb9a 	bl	801143c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8008d08:	46c0      	nop			@ (mov r8, r8)
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	46c0      	nop			@ (mov r8, r8)
 8008d10:	200029ac 	.word	0x200029ac

08008d14 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8008d18:	4b09      	ldr	r3, [pc, #36]	@ (8008d40 <I2C1_IRQHandler+0x2c>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	699a      	ldr	r2, [r3, #24]
 8008d1e:	23e0      	movs	r3, #224	@ 0xe0
 8008d20:	00db      	lsls	r3, r3, #3
 8008d22:	4013      	ands	r3, r2
 8008d24:	d004      	beq.n	8008d30 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8008d26:	4b06      	ldr	r3, [pc, #24]	@ (8008d40 <I2C1_IRQHandler+0x2c>)
 8008d28:	0018      	movs	r0, r3
 8008d2a:	f002 fe71 	bl	800ba10 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8008d2e:	e003      	b.n	8008d38 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8008d30:	4b03      	ldr	r3, [pc, #12]	@ (8008d40 <I2C1_IRQHandler+0x2c>)
 8008d32:	0018      	movs	r0, r3
 8008d34:	f002 fe52 	bl	800b9dc <HAL_I2C_EV_IRQHandler>
}
 8008d38:	46c0      	nop			@ (mov r8, r8)
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	46c0      	nop			@ (mov r8, r8)
 8008d40:	20000c70 	.word	0x20000c70

08008d44 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8008d48:	4b03      	ldr	r3, [pc, #12]	@ (8008d58 <USB_IRQHandler+0x14>)
 8008d4a:	0018      	movs	r0, r3
 8008d4c:	f005 f828 	bl	800dda0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8008d50:	46c0      	nop			@ (mov r8, r8)
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	46c0      	nop			@ (mov r8, r8)
 8008d58:	200038b4 	.word	0x200038b4

08008d5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	af00      	add	r7, sp, #0
  return 1;
 8008d60:	2301      	movs	r3, #1
}
 8008d62:	0018      	movs	r0, r3
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <_kill>:

int _kill(int pid, int sig)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008d72:	f00f f831 	bl	8017dd8 <__errno>
 8008d76:	0003      	movs	r3, r0
 8008d78:	2216      	movs	r2, #22
 8008d7a:	601a      	str	r2, [r3, #0]
  return -1;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	425b      	negs	r3, r3
}
 8008d80:	0018      	movs	r0, r3
 8008d82:	46bd      	mov	sp, r7
 8008d84:	b002      	add	sp, #8
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <_exit>:

void _exit (int status)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008d90:	2301      	movs	r3, #1
 8008d92:	425a      	negs	r2, r3
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	0011      	movs	r1, r2
 8008d98:	0018      	movs	r0, r3
 8008d9a:	f7ff ffe5 	bl	8008d68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008d9e:	46c0      	nop			@ (mov r8, r8)
 8008da0:	e7fd      	b.n	8008d9e <_exit+0x16>

08008da2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b086      	sub	sp, #24
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	60f8      	str	r0, [r7, #12]
 8008daa:	60b9      	str	r1, [r7, #8]
 8008dac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008dae:	2300      	movs	r3, #0
 8008db0:	617b      	str	r3, [r7, #20]
 8008db2:	e00a      	b.n	8008dca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008db4:	e000      	b.n	8008db8 <_read+0x16>
 8008db6:	bf00      	nop
 8008db8:	0001      	movs	r1, r0
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	1c5a      	adds	r2, r3, #1
 8008dbe:	60ba      	str	r2, [r7, #8]
 8008dc0:	b2ca      	uxtb	r2, r1
 8008dc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	617b      	str	r3, [r7, #20]
 8008dca:	697a      	ldr	r2, [r7, #20]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	dbf0      	blt.n	8008db4 <_read+0x12>
  }

  return len;
 8008dd2:	687b      	ldr	r3, [r7, #4]
}
 8008dd4:	0018      	movs	r0, r3
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	b006      	add	sp, #24
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <_close>:
  }
  return len;
}

int _close(int file)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008de4:	2301      	movs	r3, #1
 8008de6:	425b      	negs	r3, r3
}
 8008de8:	0018      	movs	r0, r3
 8008dea:	46bd      	mov	sp, r7
 8008dec:	b002      	add	sp, #8
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	2280      	movs	r2, #128	@ 0x80
 8008dfe:	0192      	lsls	r2, r2, #6
 8008e00:	605a      	str	r2, [r3, #4]
  return 0;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	0018      	movs	r0, r3
 8008e06:	46bd      	mov	sp, r7
 8008e08:	b002      	add	sp, #8
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <_isatty>:

int _isatty(int file)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008e14:	2301      	movs	r3, #1
}
 8008e16:	0018      	movs	r0, r3
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	b002      	add	sp, #8
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b084      	sub	sp, #16
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	60f8      	str	r0, [r7, #12]
 8008e26:	60b9      	str	r1, [r7, #8]
 8008e28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	0018      	movs	r0, r3
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	b004      	add	sp, #16
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b086      	sub	sp, #24
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008e3c:	4a14      	ldr	r2, [pc, #80]	@ (8008e90 <_sbrk+0x5c>)
 8008e3e:	4b15      	ldr	r3, [pc, #84]	@ (8008e94 <_sbrk+0x60>)
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008e48:	4b13      	ldr	r3, [pc, #76]	@ (8008e98 <_sbrk+0x64>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d102      	bne.n	8008e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008e50:	4b11      	ldr	r3, [pc, #68]	@ (8008e98 <_sbrk+0x64>)
 8008e52:	4a12      	ldr	r2, [pc, #72]	@ (8008e9c <_sbrk+0x68>)
 8008e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008e56:	4b10      	ldr	r3, [pc, #64]	@ (8008e98 <_sbrk+0x64>)
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	18d3      	adds	r3, r2, r3
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d207      	bcs.n	8008e74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008e64:	f00e ffb8 	bl	8017dd8 <__errno>
 8008e68:	0003      	movs	r3, r0
 8008e6a:	220c      	movs	r2, #12
 8008e6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	425b      	negs	r3, r3
 8008e72:	e009      	b.n	8008e88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008e74:	4b08      	ldr	r3, [pc, #32]	@ (8008e98 <_sbrk+0x64>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008e7a:	4b07      	ldr	r3, [pc, #28]	@ (8008e98 <_sbrk+0x64>)
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	18d2      	adds	r2, r2, r3
 8008e82:	4b05      	ldr	r3, [pc, #20]	@ (8008e98 <_sbrk+0x64>)
 8008e84:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8008e86:	68fb      	ldr	r3, [r7, #12]
}
 8008e88:	0018      	movs	r0, r3
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	b006      	add	sp, #24
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	20005000 	.word	0x20005000
 8008e94:	00000400 	.word	0x00000400
 8008e98:	200027b8 	.word	0x200027b8
 8008e9c:	20003f18 	.word	0x20003f18

08008ea0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008ea4:	46c0      	nop			@ (mov r8, r8)
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
	...

08008eac <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008eb2:	2310      	movs	r3, #16
 8008eb4:	18fb      	adds	r3, r7, r3
 8008eb6:	0018      	movs	r0, r3
 8008eb8:	2308      	movs	r3, #8
 8008eba:	001a      	movs	r2, r3
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	f00e fef9 	bl	8017cb4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008ec2:	003b      	movs	r3, r7
 8008ec4:	0018      	movs	r0, r3
 8008ec6:	2310      	movs	r3, #16
 8008ec8:	001a      	movs	r2, r3
 8008eca:	2100      	movs	r1, #0
 8008ecc:	f00e fef2 	bl	8017cb4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8008f8c <MX_TIM2_Init+0xe0>)
 8008ed2:	2280      	movs	r2, #128	@ 0x80
 8008ed4:	05d2      	lsls	r2, r2, #23
 8008ed6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8008ed8:	4b2c      	ldr	r3, [pc, #176]	@ (8008f8c <MX_TIM2_Init+0xe0>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ede:	4b2b      	ldr	r3, [pc, #172]	@ (8008f8c <MX_TIM2_Init+0xe0>)
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8008ee4:	4b29      	ldr	r3, [pc, #164]	@ (8008f8c <MX_TIM2_Init+0xe0>)
 8008ee6:	4a2a      	ldr	r2, [pc, #168]	@ (8008f90 <MX_TIM2_Init+0xe4>)
 8008ee8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008eea:	4b28      	ldr	r3, [pc, #160]	@ (8008f8c <MX_TIM2_Init+0xe0>)
 8008eec:	2200      	movs	r2, #0
 8008eee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008ef0:	4b26      	ldr	r3, [pc, #152]	@ (8008f8c <MX_TIM2_Init+0xe0>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8008ef6:	4b25      	ldr	r3, [pc, #148]	@ (8008f8c <MX_TIM2_Init+0xe0>)
 8008ef8:	0018      	movs	r0, r3
 8008efa:	f007 fd11 	bl	8010920 <HAL_TIM_PWM_Init>
 8008efe:	1e03      	subs	r3, r0, #0
 8008f00:	d001      	beq.n	8008f06 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8008f02:	f7fd f9ed 	bl	80062e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008f06:	2110      	movs	r1, #16
 8008f08:	187b      	adds	r3, r7, r1
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008f0e:	187b      	adds	r3, r7, r1
 8008f10:	2200      	movs	r2, #0
 8008f12:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008f14:	187a      	adds	r2, r7, r1
 8008f16:	4b1d      	ldr	r3, [pc, #116]	@ (8008f8c <MX_TIM2_Init+0xe0>)
 8008f18:	0011      	movs	r1, r2
 8008f1a:	0018      	movs	r0, r3
 8008f1c:	f008 f81e 	bl	8010f5c <HAL_TIMEx_MasterConfigSynchronization>
 8008f20:	1e03      	subs	r3, r0, #0
 8008f22:	d001      	beq.n	8008f28 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8008f24:	f7fd f9dc 	bl	80062e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008f28:	003b      	movs	r3, r7
 8008f2a:	2260      	movs	r2, #96	@ 0x60
 8008f2c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8008f2e:	003b      	movs	r3, r7
 8008f30:	2200      	movs	r2, #0
 8008f32:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008f34:	003b      	movs	r3, r7
 8008f36:	2200      	movs	r2, #0
 8008f38:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008f3a:	003b      	movs	r3, r7
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008f40:	0039      	movs	r1, r7
 8008f42:	4b12      	ldr	r3, [pc, #72]	@ (8008f8c <MX_TIM2_Init+0xe0>)
 8008f44:	2200      	movs	r2, #0
 8008f46:	0018      	movs	r0, r3
 8008f48:	f007 fdbc 	bl	8010ac4 <HAL_TIM_PWM_ConfigChannel>
 8008f4c:	1e03      	subs	r3, r0, #0
 8008f4e:	d001      	beq.n	8008f54 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8008f50:	f7fd f9c6 	bl	80062e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008f54:	0039      	movs	r1, r7
 8008f56:	4b0d      	ldr	r3, [pc, #52]	@ (8008f8c <MX_TIM2_Init+0xe0>)
 8008f58:	2208      	movs	r2, #8
 8008f5a:	0018      	movs	r0, r3
 8008f5c:	f007 fdb2 	bl	8010ac4 <HAL_TIM_PWM_ConfigChannel>
 8008f60:	1e03      	subs	r3, r0, #0
 8008f62:	d001      	beq.n	8008f68 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8008f64:	f7fd f9bc 	bl	80062e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008f68:	0039      	movs	r1, r7
 8008f6a:	4b08      	ldr	r3, [pc, #32]	@ (8008f8c <MX_TIM2_Init+0xe0>)
 8008f6c:	220c      	movs	r2, #12
 8008f6e:	0018      	movs	r0, r3
 8008f70:	f007 fda8 	bl	8010ac4 <HAL_TIM_PWM_ConfigChannel>
 8008f74:	1e03      	subs	r3, r0, #0
 8008f76:	d001      	beq.n	8008f7c <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8008f78:	f7fd f9b2 	bl	80062e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8008f7c:	4b03      	ldr	r3, [pc, #12]	@ (8008f8c <MX_TIM2_Init+0xe0>)
 8008f7e:	0018      	movs	r0, r3
 8008f80:	f000 f8aa 	bl	80090d8 <HAL_TIM_MspPostInit>

}
 8008f84:	46c0      	nop			@ (mov r8, r8)
 8008f86:	46bd      	mov	sp, r7
 8008f88:	b006      	add	sp, #24
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	200027bc 	.word	0x200027bc
 8008f90:	0000ffff 	.word	0x0000ffff

08008f94 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008f9a:	2310      	movs	r3, #16
 8008f9c:	18fb      	adds	r3, r7, r3
 8008f9e:	0018      	movs	r0, r3
 8008fa0:	2308      	movs	r3, #8
 8008fa2:	001a      	movs	r2, r3
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	f00e fe85 	bl	8017cb4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008faa:	003b      	movs	r3, r7
 8008fac:	0018      	movs	r0, r3
 8008fae:	2310      	movs	r3, #16
 8008fb0:	001a      	movs	r2, r3
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	f00e fe7e 	bl	8017cb4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008fb8:	4b32      	ldr	r3, [pc, #200]	@ (8009084 <MX_TIM3_Init+0xf0>)
 8008fba:	4a33      	ldr	r2, [pc, #204]	@ (8009088 <MX_TIM3_Init+0xf4>)
 8008fbc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008fbe:	4b31      	ldr	r3, [pc, #196]	@ (8009084 <MX_TIM3_Init+0xf0>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008fc4:	4b2f      	ldr	r3, [pc, #188]	@ (8009084 <MX_TIM3_Init+0xf0>)
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8008fca:	4b2e      	ldr	r3, [pc, #184]	@ (8009084 <MX_TIM3_Init+0xf0>)
 8008fcc:	4a2f      	ldr	r2, [pc, #188]	@ (800908c <MX_TIM3_Init+0xf8>)
 8008fce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008fd0:	4b2c      	ldr	r3, [pc, #176]	@ (8009084 <MX_TIM3_Init+0xf0>)
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008fd6:	4b2b      	ldr	r3, [pc, #172]	@ (8009084 <MX_TIM3_Init+0xf0>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008fdc:	4b29      	ldr	r3, [pc, #164]	@ (8009084 <MX_TIM3_Init+0xf0>)
 8008fde:	0018      	movs	r0, r3
 8008fe0:	f007 fc9e 	bl	8010920 <HAL_TIM_PWM_Init>
 8008fe4:	1e03      	subs	r3, r0, #0
 8008fe6:	d001      	beq.n	8008fec <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8008fe8:	f7fd f97a 	bl	80062e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008fec:	2110      	movs	r1, #16
 8008fee:	187b      	adds	r3, r7, r1
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008ff4:	187b      	adds	r3, r7, r1
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008ffa:	187a      	adds	r2, r7, r1
 8008ffc:	4b21      	ldr	r3, [pc, #132]	@ (8009084 <MX_TIM3_Init+0xf0>)
 8008ffe:	0011      	movs	r1, r2
 8009000:	0018      	movs	r0, r3
 8009002:	f007 ffab 	bl	8010f5c <HAL_TIMEx_MasterConfigSynchronization>
 8009006:	1e03      	subs	r3, r0, #0
 8009008:	d001      	beq.n	800900e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800900a:	f7fd f969 	bl	80062e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800900e:	003b      	movs	r3, r7
 8009010:	2260      	movs	r2, #96	@ 0x60
 8009012:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8009014:	003b      	movs	r3, r7
 8009016:	2200      	movs	r2, #0
 8009018:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800901a:	003b      	movs	r3, r7
 800901c:	2200      	movs	r2, #0
 800901e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009020:	003b      	movs	r3, r7
 8009022:	2200      	movs	r2, #0
 8009024:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009026:	0039      	movs	r1, r7
 8009028:	4b16      	ldr	r3, [pc, #88]	@ (8009084 <MX_TIM3_Init+0xf0>)
 800902a:	2200      	movs	r2, #0
 800902c:	0018      	movs	r0, r3
 800902e:	f007 fd49 	bl	8010ac4 <HAL_TIM_PWM_ConfigChannel>
 8009032:	1e03      	subs	r3, r0, #0
 8009034:	d001      	beq.n	800903a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8009036:	f7fd f953 	bl	80062e0 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800903a:	4b12      	ldr	r3, [pc, #72]	@ (8009084 <MX_TIM3_Init+0xf0>)
 800903c:	2104      	movs	r1, #4
 800903e:	0018      	movs	r0, r3
 8009040:	f007 ffea 	bl	8011018 <HAL_TIMEx_RemapConfig>
 8009044:	1e03      	subs	r3, r0, #0
 8009046:	d001      	beq.n	800904c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8009048:	f7fd f94a 	bl	80062e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800904c:	0039      	movs	r1, r7
 800904e:	4b0d      	ldr	r3, [pc, #52]	@ (8009084 <MX_TIM3_Init+0xf0>)
 8009050:	2204      	movs	r2, #4
 8009052:	0018      	movs	r0, r3
 8009054:	f007 fd36 	bl	8010ac4 <HAL_TIM_PWM_ConfigChannel>
 8009058:	1e03      	subs	r3, r0, #0
 800905a:	d001      	beq.n	8009060 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800905c:	f7fd f940 	bl	80062e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009060:	0039      	movs	r1, r7
 8009062:	4b08      	ldr	r3, [pc, #32]	@ (8009084 <MX_TIM3_Init+0xf0>)
 8009064:	2208      	movs	r2, #8
 8009066:	0018      	movs	r0, r3
 8009068:	f007 fd2c 	bl	8010ac4 <HAL_TIM_PWM_ConfigChannel>
 800906c:	1e03      	subs	r3, r0, #0
 800906e:	d001      	beq.n	8009074 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8009070:	f7fd f936 	bl	80062e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8009074:	4b03      	ldr	r3, [pc, #12]	@ (8009084 <MX_TIM3_Init+0xf0>)
 8009076:	0018      	movs	r0, r3
 8009078:	f000 f82e 	bl	80090d8 <HAL_TIM_MspPostInit>

}
 800907c:	46c0      	nop			@ (mov r8, r8)
 800907e:	46bd      	mov	sp, r7
 8009080:	b006      	add	sp, #24
 8009082:	bd80      	pop	{r7, pc}
 8009084:	200027fc 	.word	0x200027fc
 8009088:	40000400 	.word	0x40000400
 800908c:	0000ffff 	.word	0x0000ffff

08009090 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	2380      	movs	r3, #128	@ 0x80
 800909e:	05db      	lsls	r3, r3, #23
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d106      	bne.n	80090b2 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80090a4:	4b0a      	ldr	r3, [pc, #40]	@ (80090d0 <HAL_TIM_PWM_MspInit+0x40>)
 80090a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090a8:	4b09      	ldr	r3, [pc, #36]	@ (80090d0 <HAL_TIM_PWM_MspInit+0x40>)
 80090aa:	2101      	movs	r1, #1
 80090ac:	430a      	orrs	r2, r1
 80090ae:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80090b0:	e00a      	b.n	80090c8 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a07      	ldr	r2, [pc, #28]	@ (80090d4 <HAL_TIM_PWM_MspInit+0x44>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d105      	bne.n	80090c8 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80090bc:	4b04      	ldr	r3, [pc, #16]	@ (80090d0 <HAL_TIM_PWM_MspInit+0x40>)
 80090be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090c0:	4b03      	ldr	r3, [pc, #12]	@ (80090d0 <HAL_TIM_PWM_MspInit+0x40>)
 80090c2:	2102      	movs	r1, #2
 80090c4:	430a      	orrs	r2, r1
 80090c6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80090c8:	46c0      	nop			@ (mov r8, r8)
 80090ca:	46bd      	mov	sp, r7
 80090cc:	b002      	add	sp, #8
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	40021000 	.word	0x40021000
 80090d4:	40000400 	.word	0x40000400

080090d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80090d8:	b590      	push	{r4, r7, lr}
 80090da:	b08b      	sub	sp, #44	@ 0x2c
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090e0:	2414      	movs	r4, #20
 80090e2:	193b      	adds	r3, r7, r4
 80090e4:	0018      	movs	r0, r3
 80090e6:	2314      	movs	r3, #20
 80090e8:	001a      	movs	r2, r3
 80090ea:	2100      	movs	r1, #0
 80090ec:	f00e fde2 	bl	8017cb4 <memset>
  if(timHandle->Instance==TIM2)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	2380      	movs	r3, #128	@ 0x80
 80090f6:	05db      	lsls	r3, r3, #23
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d123      	bne.n	8009144 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090fc:	4b27      	ldr	r3, [pc, #156]	@ (800919c <HAL_TIM_MspPostInit+0xc4>)
 80090fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009100:	4b26      	ldr	r3, [pc, #152]	@ (800919c <HAL_TIM_MspPostInit+0xc4>)
 8009102:	2101      	movs	r1, #1
 8009104:	430a      	orrs	r2, r1
 8009106:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009108:	4b24      	ldr	r3, [pc, #144]	@ (800919c <HAL_TIM_MspPostInit+0xc4>)
 800910a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800910c:	2201      	movs	r2, #1
 800910e:	4013      	ands	r3, r2
 8009110:	613b      	str	r3, [r7, #16]
 8009112:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 8009114:	0021      	movs	r1, r4
 8009116:	187b      	adds	r3, r7, r1
 8009118:	220d      	movs	r2, #13
 800911a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800911c:	187b      	adds	r3, r7, r1
 800911e:	2202      	movs	r2, #2
 8009120:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009122:	187b      	adds	r3, r7, r1
 8009124:	2200      	movs	r2, #0
 8009126:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009128:	187b      	adds	r3, r7, r1
 800912a:	2200      	movs	r2, #0
 800912c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800912e:	187b      	adds	r3, r7, r1
 8009130:	2202      	movs	r2, #2
 8009132:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009134:	187a      	adds	r2, r7, r1
 8009136:	23a0      	movs	r3, #160	@ 0xa0
 8009138:	05db      	lsls	r3, r3, #23
 800913a:	0011      	movs	r1, r2
 800913c:	0018      	movs	r0, r3
 800913e:	f001 ff11 	bl	800af64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8009142:	e027      	b.n	8009194 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a15      	ldr	r2, [pc, #84]	@ (80091a0 <HAL_TIM_MspPostInit+0xc8>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d122      	bne.n	8009194 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800914e:	4b13      	ldr	r3, [pc, #76]	@ (800919c <HAL_TIM_MspPostInit+0xc4>)
 8009150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009152:	4b12      	ldr	r3, [pc, #72]	@ (800919c <HAL_TIM_MspPostInit+0xc4>)
 8009154:	2104      	movs	r1, #4
 8009156:	430a      	orrs	r2, r1
 8009158:	62da      	str	r2, [r3, #44]	@ 0x2c
 800915a:	4b10      	ldr	r3, [pc, #64]	@ (800919c <HAL_TIM_MspPostInit+0xc4>)
 800915c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800915e:	2204      	movs	r2, #4
 8009160:	4013      	ands	r3, r2
 8009162:	60fb      	str	r3, [r7, #12]
 8009164:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 8009166:	2114      	movs	r1, #20
 8009168:	187b      	adds	r3, r7, r1
 800916a:	22e0      	movs	r2, #224	@ 0xe0
 800916c:	0052      	lsls	r2, r2, #1
 800916e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009170:	187b      	adds	r3, r7, r1
 8009172:	2202      	movs	r2, #2
 8009174:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009176:	187b      	adds	r3, r7, r1
 8009178:	2200      	movs	r2, #0
 800917a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800917c:	187b      	adds	r3, r7, r1
 800917e:	2200      	movs	r2, #0
 8009180:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009182:	187b      	adds	r3, r7, r1
 8009184:	2202      	movs	r2, #2
 8009186:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009188:	187b      	adds	r3, r7, r1
 800918a:	4a06      	ldr	r2, [pc, #24]	@ (80091a4 <HAL_TIM_MspPostInit+0xcc>)
 800918c:	0019      	movs	r1, r3
 800918e:	0010      	movs	r0, r2
 8009190:	f001 fee8 	bl	800af64 <HAL_GPIO_Init>
}
 8009194:	46c0      	nop			@ (mov r8, r8)
 8009196:	46bd      	mov	sp, r7
 8009198:	b00b      	add	sp, #44	@ 0x2c
 800919a:	bd90      	pop	{r4, r7, pc}
 800919c:	40021000 	.word	0x40021000
 80091a0:	40000400 	.word	0x40000400
 80091a4:	50000800 	.word	0x50000800

080091a8 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80091ac:	4b17      	ldr	r3, [pc, #92]	@ (800920c <MX_LPUART1_UART_Init+0x64>)
 80091ae:	4a18      	ldr	r2, [pc, #96]	@ (8009210 <MX_LPUART1_UART_Init+0x68>)
 80091b0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80091b2:	4b16      	ldr	r3, [pc, #88]	@ (800920c <MX_LPUART1_UART_Init+0x64>)
 80091b4:	22e1      	movs	r2, #225	@ 0xe1
 80091b6:	0252      	lsls	r2, r2, #9
 80091b8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80091ba:	4b14      	ldr	r3, [pc, #80]	@ (800920c <MX_LPUART1_UART_Init+0x64>)
 80091bc:	2200      	movs	r2, #0
 80091be:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80091c0:	4b12      	ldr	r3, [pc, #72]	@ (800920c <MX_LPUART1_UART_Init+0x64>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80091c6:	4b11      	ldr	r3, [pc, #68]	@ (800920c <MX_LPUART1_UART_Init+0x64>)
 80091c8:	2200      	movs	r2, #0
 80091ca:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80091cc:	4b0f      	ldr	r3, [pc, #60]	@ (800920c <MX_LPUART1_UART_Init+0x64>)
 80091ce:	220c      	movs	r2, #12
 80091d0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80091d2:	4b0e      	ldr	r3, [pc, #56]	@ (800920c <MX_LPUART1_UART_Init+0x64>)
 80091d4:	2200      	movs	r2, #0
 80091d6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80091d8:	4b0c      	ldr	r3, [pc, #48]	@ (800920c <MX_LPUART1_UART_Init+0x64>)
 80091da:	2200      	movs	r2, #0
 80091dc:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80091de:	4b0b      	ldr	r3, [pc, #44]	@ (800920c <MX_LPUART1_UART_Init+0x64>)
 80091e0:	2218      	movs	r2, #24
 80091e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80091e4:	4b09      	ldr	r3, [pc, #36]	@ (800920c <MX_LPUART1_UART_Init+0x64>)
 80091e6:	2280      	movs	r2, #128	@ 0x80
 80091e8:	0212      	lsls	r2, r2, #8
 80091ea:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80091ec:	4b07      	ldr	r3, [pc, #28]	@ (800920c <MX_LPUART1_UART_Init+0x64>)
 80091ee:	2280      	movs	r2, #128	@ 0x80
 80091f0:	0152      	lsls	r2, r2, #5
 80091f2:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80091f4:	4b05      	ldr	r3, [pc, #20]	@ (800920c <MX_LPUART1_UART_Init+0x64>)
 80091f6:	0018      	movs	r0, r3
 80091f8:	f007 ff2c 	bl	8011054 <HAL_UART_Init>
 80091fc:	1e03      	subs	r3, r0, #0
 80091fe:	d001      	beq.n	8009204 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8009200:	f7fd f86e 	bl	80062e0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8009204:	46c0      	nop			@ (mov r8, r8)
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	46c0      	nop			@ (mov r8, r8)
 800920c:	2000283c 	.word	0x2000283c
 8009210:	40004800 	.word	0x40004800

08009214 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009218:	4b16      	ldr	r3, [pc, #88]	@ (8009274 <MX_USART1_UART_Init+0x60>)
 800921a:	4a17      	ldr	r2, [pc, #92]	@ (8009278 <MX_USART1_UART_Init+0x64>)
 800921c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800921e:	4b15      	ldr	r3, [pc, #84]	@ (8009274 <MX_USART1_UART_Init+0x60>)
 8009220:	22e1      	movs	r2, #225	@ 0xe1
 8009222:	0252      	lsls	r2, r2, #9
 8009224:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009226:	4b13      	ldr	r3, [pc, #76]	@ (8009274 <MX_USART1_UART_Init+0x60>)
 8009228:	2200      	movs	r2, #0
 800922a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800922c:	4b11      	ldr	r3, [pc, #68]	@ (8009274 <MX_USART1_UART_Init+0x60>)
 800922e:	2200      	movs	r2, #0
 8009230:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009232:	4b10      	ldr	r3, [pc, #64]	@ (8009274 <MX_USART1_UART_Init+0x60>)
 8009234:	2200      	movs	r2, #0
 8009236:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009238:	4b0e      	ldr	r3, [pc, #56]	@ (8009274 <MX_USART1_UART_Init+0x60>)
 800923a:	220c      	movs	r2, #12
 800923c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800923e:	4b0d      	ldr	r3, [pc, #52]	@ (8009274 <MX_USART1_UART_Init+0x60>)
 8009240:	2200      	movs	r2, #0
 8009242:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009244:	4b0b      	ldr	r3, [pc, #44]	@ (8009274 <MX_USART1_UART_Init+0x60>)
 8009246:	2200      	movs	r2, #0
 8009248:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800924a:	4b0a      	ldr	r3, [pc, #40]	@ (8009274 <MX_USART1_UART_Init+0x60>)
 800924c:	2200      	movs	r2, #0
 800924e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8009250:	4b08      	ldr	r3, [pc, #32]	@ (8009274 <MX_USART1_UART_Init+0x60>)
 8009252:	2208      	movs	r2, #8
 8009254:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8009256:	4b07      	ldr	r3, [pc, #28]	@ (8009274 <MX_USART1_UART_Init+0x60>)
 8009258:	2280      	movs	r2, #128	@ 0x80
 800925a:	0212      	lsls	r2, r2, #8
 800925c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800925e:	4b05      	ldr	r3, [pc, #20]	@ (8009274 <MX_USART1_UART_Init+0x60>)
 8009260:	0018      	movs	r0, r3
 8009262:	f007 fef7 	bl	8011054 <HAL_UART_Init>
 8009266:	1e03      	subs	r3, r0, #0
 8009268:	d001      	beq.n	800926e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800926a:	f7fd f839 	bl	80062e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800926e:	46c0      	nop			@ (mov r8, r8)
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	200028f4 	.word	0x200028f4
 8009278:	40013800 	.word	0x40013800

0800927c <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8009280:	4b14      	ldr	r3, [pc, #80]	@ (80092d4 <MX_USART4_UART_Init+0x58>)
 8009282:	4a15      	ldr	r2, [pc, #84]	@ (80092d8 <MX_USART4_UART_Init+0x5c>)
 8009284:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8009286:	4b13      	ldr	r3, [pc, #76]	@ (80092d4 <MX_USART4_UART_Init+0x58>)
 8009288:	22e1      	movs	r2, #225	@ 0xe1
 800928a:	0252      	lsls	r2, r2, #9
 800928c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800928e:	4b11      	ldr	r3, [pc, #68]	@ (80092d4 <MX_USART4_UART_Init+0x58>)
 8009290:	2200      	movs	r2, #0
 8009292:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8009294:	4b0f      	ldr	r3, [pc, #60]	@ (80092d4 <MX_USART4_UART_Init+0x58>)
 8009296:	2200      	movs	r2, #0
 8009298:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800929a:	4b0e      	ldr	r3, [pc, #56]	@ (80092d4 <MX_USART4_UART_Init+0x58>)
 800929c:	2200      	movs	r2, #0
 800929e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80092a0:	4b0c      	ldr	r3, [pc, #48]	@ (80092d4 <MX_USART4_UART_Init+0x58>)
 80092a2:	220c      	movs	r2, #12
 80092a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80092a6:	4b0b      	ldr	r3, [pc, #44]	@ (80092d4 <MX_USART4_UART_Init+0x58>)
 80092a8:	2200      	movs	r2, #0
 80092aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80092ac:	4b09      	ldr	r3, [pc, #36]	@ (80092d4 <MX_USART4_UART_Init+0x58>)
 80092ae:	2200      	movs	r2, #0
 80092b0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80092b2:	4b08      	ldr	r3, [pc, #32]	@ (80092d4 <MX_USART4_UART_Init+0x58>)
 80092b4:	2200      	movs	r2, #0
 80092b6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80092b8:	4b06      	ldr	r3, [pc, #24]	@ (80092d4 <MX_USART4_UART_Init+0x58>)
 80092ba:	2200      	movs	r2, #0
 80092bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80092be:	4b05      	ldr	r3, [pc, #20]	@ (80092d4 <MX_USART4_UART_Init+0x58>)
 80092c0:	0018      	movs	r0, r3
 80092c2:	f007 fec7 	bl	8011054 <HAL_UART_Init>
 80092c6:	1e03      	subs	r3, r0, #0
 80092c8:	d001      	beq.n	80092ce <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 80092ca:	f7fd f809 	bl	80062e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80092ce:	46c0      	nop			@ (mov r8, r8)
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	200029ac 	.word	0x200029ac
 80092d8:	40004c00 	.word	0x40004c00

080092dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80092dc:	b590      	push	{r4, r7, lr}
 80092de:	b08d      	sub	sp, #52	@ 0x34
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092e4:	241c      	movs	r4, #28
 80092e6:	193b      	adds	r3, r7, r4
 80092e8:	0018      	movs	r0, r3
 80092ea:	2314      	movs	r3, #20
 80092ec:	001a      	movs	r2, r3
 80092ee:	2100      	movs	r1, #0
 80092f0:	f00e fce0 	bl	8017cb4 <memset>
  if(uartHandle->Instance==LPUART1)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a87      	ldr	r2, [pc, #540]	@ (8009518 <HAL_UART_MspInit+0x23c>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d129      	bne.n	8009352 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80092fe:	4b87      	ldr	r3, [pc, #540]	@ (800951c <HAL_UART_MspInit+0x240>)
 8009300:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009302:	4b86      	ldr	r3, [pc, #536]	@ (800951c <HAL_UART_MspInit+0x240>)
 8009304:	2180      	movs	r1, #128	@ 0x80
 8009306:	02c9      	lsls	r1, r1, #11
 8009308:	430a      	orrs	r2, r1
 800930a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800930c:	4b83      	ldr	r3, [pc, #524]	@ (800951c <HAL_UART_MspInit+0x240>)
 800930e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009310:	4b82      	ldr	r3, [pc, #520]	@ (800951c <HAL_UART_MspInit+0x240>)
 8009312:	2104      	movs	r1, #4
 8009314:	430a      	orrs	r2, r1
 8009316:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009318:	4b80      	ldr	r3, [pc, #512]	@ (800951c <HAL_UART_MspInit+0x240>)
 800931a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800931c:	2204      	movs	r2, #4
 800931e:	4013      	ands	r3, r2
 8009320:	61bb      	str	r3, [r7, #24]
 8009322:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009324:	0021      	movs	r1, r4
 8009326:	187b      	adds	r3, r7, r1
 8009328:	2203      	movs	r2, #3
 800932a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800932c:	187b      	adds	r3, r7, r1
 800932e:	2202      	movs	r2, #2
 8009330:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009332:	187b      	adds	r3, r7, r1
 8009334:	2200      	movs	r2, #0
 8009336:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009338:	187b      	adds	r3, r7, r1
 800933a:	2203      	movs	r2, #3
 800933c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800933e:	187b      	adds	r3, r7, r1
 8009340:	2206      	movs	r2, #6
 8009342:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009344:	187b      	adds	r3, r7, r1
 8009346:	4a76      	ldr	r2, [pc, #472]	@ (8009520 <HAL_UART_MspInit+0x244>)
 8009348:	0019      	movs	r1, r3
 800934a:	0010      	movs	r0, r2
 800934c:	f001 fe0a 	bl	800af64 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8009350:	e0dd      	b.n	800950e <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART1)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a73      	ldr	r2, [pc, #460]	@ (8009524 <HAL_UART_MspInit+0x248>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d12b      	bne.n	80093b4 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800935c:	4b6f      	ldr	r3, [pc, #444]	@ (800951c <HAL_UART_MspInit+0x240>)
 800935e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009360:	4b6e      	ldr	r3, [pc, #440]	@ (800951c <HAL_UART_MspInit+0x240>)
 8009362:	2180      	movs	r1, #128	@ 0x80
 8009364:	01c9      	lsls	r1, r1, #7
 8009366:	430a      	orrs	r2, r1
 8009368:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800936a:	4b6c      	ldr	r3, [pc, #432]	@ (800951c <HAL_UART_MspInit+0x240>)
 800936c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800936e:	4b6b      	ldr	r3, [pc, #428]	@ (800951c <HAL_UART_MspInit+0x240>)
 8009370:	2101      	movs	r1, #1
 8009372:	430a      	orrs	r2, r1
 8009374:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009376:	4b69      	ldr	r3, [pc, #420]	@ (800951c <HAL_UART_MspInit+0x240>)
 8009378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800937a:	2201      	movs	r2, #1
 800937c:	4013      	ands	r3, r2
 800937e:	617b      	str	r3, [r7, #20]
 8009380:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009382:	211c      	movs	r1, #28
 8009384:	187b      	adds	r3, r7, r1
 8009386:	22c0      	movs	r2, #192	@ 0xc0
 8009388:	00d2      	lsls	r2, r2, #3
 800938a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800938c:	187b      	adds	r3, r7, r1
 800938e:	2202      	movs	r2, #2
 8009390:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009392:	187b      	adds	r3, r7, r1
 8009394:	2200      	movs	r2, #0
 8009396:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009398:	187b      	adds	r3, r7, r1
 800939a:	2203      	movs	r2, #3
 800939c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800939e:	187b      	adds	r3, r7, r1
 80093a0:	2204      	movs	r2, #4
 80093a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093a4:	187a      	adds	r2, r7, r1
 80093a6:	23a0      	movs	r3, #160	@ 0xa0
 80093a8:	05db      	lsls	r3, r3, #23
 80093aa:	0011      	movs	r1, r2
 80093ac:	0018      	movs	r0, r3
 80093ae:	f001 fdd9 	bl	800af64 <HAL_GPIO_Init>
}
 80093b2:	e0ac      	b.n	800950e <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART4)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a5b      	ldr	r2, [pc, #364]	@ (8009528 <HAL_UART_MspInit+0x24c>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d000      	beq.n	80093c0 <HAL_UART_MspInit+0xe4>
 80093be:	e0a6      	b.n	800950e <HAL_UART_MspInit+0x232>
    __HAL_RCC_USART4_CLK_ENABLE();
 80093c0:	4b56      	ldr	r3, [pc, #344]	@ (800951c <HAL_UART_MspInit+0x240>)
 80093c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093c4:	4b55      	ldr	r3, [pc, #340]	@ (800951c <HAL_UART_MspInit+0x240>)
 80093c6:	2180      	movs	r1, #128	@ 0x80
 80093c8:	0309      	lsls	r1, r1, #12
 80093ca:	430a      	orrs	r2, r1
 80093cc:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093ce:	4b53      	ldr	r3, [pc, #332]	@ (800951c <HAL_UART_MspInit+0x240>)
 80093d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093d2:	4b52      	ldr	r3, [pc, #328]	@ (800951c <HAL_UART_MspInit+0x240>)
 80093d4:	2101      	movs	r1, #1
 80093d6:	430a      	orrs	r2, r1
 80093d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80093da:	4b50      	ldr	r3, [pc, #320]	@ (800951c <HAL_UART_MspInit+0x240>)
 80093dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093de:	2201      	movs	r2, #1
 80093e0:	4013      	ands	r3, r2
 80093e2:	613b      	str	r3, [r7, #16]
 80093e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80093e6:	4b4d      	ldr	r3, [pc, #308]	@ (800951c <HAL_UART_MspInit+0x240>)
 80093e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093ea:	4b4c      	ldr	r3, [pc, #304]	@ (800951c <HAL_UART_MspInit+0x240>)
 80093ec:	2104      	movs	r1, #4
 80093ee:	430a      	orrs	r2, r1
 80093f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80093f2:	4b4a      	ldr	r3, [pc, #296]	@ (800951c <HAL_UART_MspInit+0x240>)
 80093f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093f6:	2204      	movs	r2, #4
 80093f8:	4013      	ands	r3, r2
 80093fa:	60fb      	str	r3, [r7, #12]
 80093fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80093fe:	241c      	movs	r4, #28
 8009400:	193b      	adds	r3, r7, r4
 8009402:	2202      	movs	r2, #2
 8009404:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009406:	193b      	adds	r3, r7, r4
 8009408:	2202      	movs	r2, #2
 800940a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800940c:	193b      	adds	r3, r7, r4
 800940e:	2200      	movs	r2, #0
 8009410:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009412:	193b      	adds	r3, r7, r4
 8009414:	2203      	movs	r2, #3
 8009416:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8009418:	193b      	adds	r3, r7, r4
 800941a:	2206      	movs	r2, #6
 800941c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800941e:	193a      	adds	r2, r7, r4
 8009420:	23a0      	movs	r3, #160	@ 0xa0
 8009422:	05db      	lsls	r3, r3, #23
 8009424:	0011      	movs	r1, r2
 8009426:	0018      	movs	r0, r3
 8009428:	f001 fd9c 	bl	800af64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800942c:	0021      	movs	r1, r4
 800942e:	187b      	adds	r3, r7, r1
 8009430:	2280      	movs	r2, #128	@ 0x80
 8009432:	00d2      	lsls	r2, r2, #3
 8009434:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009436:	187b      	adds	r3, r7, r1
 8009438:	2202      	movs	r2, #2
 800943a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800943c:	187b      	adds	r3, r7, r1
 800943e:	2200      	movs	r2, #0
 8009440:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009442:	187b      	adds	r3, r7, r1
 8009444:	2203      	movs	r2, #3
 8009446:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8009448:	187b      	adds	r3, r7, r1
 800944a:	2206      	movs	r2, #6
 800944c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800944e:	187b      	adds	r3, r7, r1
 8009450:	4a33      	ldr	r2, [pc, #204]	@ (8009520 <HAL_UART_MspInit+0x244>)
 8009452:	0019      	movs	r1, r3
 8009454:	0010      	movs	r0, r2
 8009456:	f001 fd85 	bl	800af64 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800945a:	4b34      	ldr	r3, [pc, #208]	@ (800952c <HAL_UART_MspInit+0x250>)
 800945c:	4a34      	ldr	r2, [pc, #208]	@ (8009530 <HAL_UART_MspInit+0x254>)
 800945e:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8009460:	4b32      	ldr	r3, [pc, #200]	@ (800952c <HAL_UART_MspInit+0x250>)
 8009462:	220c      	movs	r2, #12
 8009464:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009466:	4b31      	ldr	r3, [pc, #196]	@ (800952c <HAL_UART_MspInit+0x250>)
 8009468:	2200      	movs	r2, #0
 800946a:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800946c:	4b2f      	ldr	r3, [pc, #188]	@ (800952c <HAL_UART_MspInit+0x250>)
 800946e:	2200      	movs	r2, #0
 8009470:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009472:	4b2e      	ldr	r3, [pc, #184]	@ (800952c <HAL_UART_MspInit+0x250>)
 8009474:	2280      	movs	r2, #128	@ 0x80
 8009476:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009478:	4b2c      	ldr	r3, [pc, #176]	@ (800952c <HAL_UART_MspInit+0x250>)
 800947a:	2200      	movs	r2, #0
 800947c:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800947e:	4b2b      	ldr	r3, [pc, #172]	@ (800952c <HAL_UART_MspInit+0x250>)
 8009480:	2200      	movs	r2, #0
 8009482:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8009484:	4b29      	ldr	r3, [pc, #164]	@ (800952c <HAL_UART_MspInit+0x250>)
 8009486:	2220      	movs	r2, #32
 8009488:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800948a:	4b28      	ldr	r3, [pc, #160]	@ (800952c <HAL_UART_MspInit+0x250>)
 800948c:	2200      	movs	r2, #0
 800948e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8009490:	4b26      	ldr	r3, [pc, #152]	@ (800952c <HAL_UART_MspInit+0x250>)
 8009492:	0018      	movs	r0, r3
 8009494:	f001 f8ec 	bl	800a670 <HAL_DMA_Init>
 8009498:	1e03      	subs	r3, r0, #0
 800949a:	d001      	beq.n	80094a0 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 800949c:	f7fc ff20 	bl	80062e0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a22      	ldr	r2, [pc, #136]	@ (800952c <HAL_UART_MspInit+0x250>)
 80094a4:	675a      	str	r2, [r3, #116]	@ 0x74
 80094a6:	4b21      	ldr	r3, [pc, #132]	@ (800952c <HAL_UART_MspInit+0x250>)
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 80094ac:	4b21      	ldr	r3, [pc, #132]	@ (8009534 <HAL_UART_MspInit+0x258>)
 80094ae:	4a22      	ldr	r2, [pc, #136]	@ (8009538 <HAL_UART_MspInit+0x25c>)
 80094b0:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 80094b2:	4b20      	ldr	r3, [pc, #128]	@ (8009534 <HAL_UART_MspInit+0x258>)
 80094b4:	220c      	movs	r2, #12
 80094b6:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80094b8:	4b1e      	ldr	r3, [pc, #120]	@ (8009534 <HAL_UART_MspInit+0x258>)
 80094ba:	2210      	movs	r2, #16
 80094bc:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80094be:	4b1d      	ldr	r3, [pc, #116]	@ (8009534 <HAL_UART_MspInit+0x258>)
 80094c0:	2200      	movs	r2, #0
 80094c2:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80094c4:	4b1b      	ldr	r3, [pc, #108]	@ (8009534 <HAL_UART_MspInit+0x258>)
 80094c6:	2280      	movs	r2, #128	@ 0x80
 80094c8:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80094ca:	4b1a      	ldr	r3, [pc, #104]	@ (8009534 <HAL_UART_MspInit+0x258>)
 80094cc:	2200      	movs	r2, #0
 80094ce:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80094d0:	4b18      	ldr	r3, [pc, #96]	@ (8009534 <HAL_UART_MspInit+0x258>)
 80094d2:	2200      	movs	r2, #0
 80094d4:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 80094d6:	4b17      	ldr	r3, [pc, #92]	@ (8009534 <HAL_UART_MspInit+0x258>)
 80094d8:	2200      	movs	r2, #0
 80094da:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80094dc:	4b15      	ldr	r3, [pc, #84]	@ (8009534 <HAL_UART_MspInit+0x258>)
 80094de:	2200      	movs	r2, #0
 80094e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 80094e2:	4b14      	ldr	r3, [pc, #80]	@ (8009534 <HAL_UART_MspInit+0x258>)
 80094e4:	0018      	movs	r0, r3
 80094e6:	f001 f8c3 	bl	800a670 <HAL_DMA_Init>
 80094ea:	1e03      	subs	r3, r0, #0
 80094ec:	d001      	beq.n	80094f2 <HAL_UART_MspInit+0x216>
      Error_Handler();
 80094ee:	f7fc fef7 	bl	80062e0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a0f      	ldr	r2, [pc, #60]	@ (8009534 <HAL_UART_MspInit+0x258>)
 80094f6:	671a      	str	r2, [r3, #112]	@ 0x70
 80094f8:	4b0e      	ldr	r3, [pc, #56]	@ (8009534 <HAL_UART_MspInit+0x258>)
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 80094fe:	2200      	movs	r2, #0
 8009500:	2100      	movs	r1, #0
 8009502:	200e      	movs	r0, #14
 8009504:	f001 f882 	bl	800a60c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8009508:	200e      	movs	r0, #14
 800950a:	f001 f894 	bl	800a636 <HAL_NVIC_EnableIRQ>
}
 800950e:	46c0      	nop			@ (mov r8, r8)
 8009510:	46bd      	mov	sp, r7
 8009512:	b00d      	add	sp, #52	@ 0x34
 8009514:	bd90      	pop	{r4, r7, pc}
 8009516:	46c0      	nop			@ (mov r8, r8)
 8009518:	40004800 	.word	0x40004800
 800951c:	40021000 	.word	0x40021000
 8009520:	50000800 	.word	0x50000800
 8009524:	40013800 	.word	0x40013800
 8009528:	40004c00 	.word	0x40004c00
 800952c:	20002a64 	.word	0x20002a64
 8009530:	4002006c 	.word	0x4002006c
 8009534:	20002aac 	.word	0x20002aac
 8009538:	40020080 	.word	0x40020080

0800953c <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 1024

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800953c:	b580      	push	{r7, lr}
 800953e:	b086      	sub	sp, #24
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8009544:	f000 fbec 	bl	8009d20 <HAL_GetTick>
 8009548:	0003      	movs	r3, r0
 800954a:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800954c:	4b1c      	ldr	r3, [pc, #112]	@ (80095c0 <TimestampIsReached+0x84>)
 800954e:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8009550:	697a      	ldr	r2, [r7, #20]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	429a      	cmp	r2, r3
 8009556:	d307      	bcc.n	8009568 <TimestampIsReached+0x2c>
 8009558:	697a      	ldr	r2, [r7, #20]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	1ad3      	subs	r3, r2, r3
 800955e:	693a      	ldr	r2, [r7, #16]
 8009560:	429a      	cmp	r2, r3
 8009562:	d901      	bls.n	8009568 <TimestampIsReached+0x2c>
 8009564:	2201      	movs	r2, #1
 8009566:	e000      	b.n	800956a <TimestampIsReached+0x2e>
 8009568:	2200      	movs	r2, #0
 800956a:	230f      	movs	r3, #15
 800956c:	18fb      	adds	r3, r7, r3
 800956e:	701a      	strb	r2, [r3, #0]
 8009570:	781a      	ldrb	r2, [r3, #0]
 8009572:	2101      	movs	r1, #1
 8009574:	400a      	ands	r2, r1
 8009576:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8009578:	697a      	ldr	r2, [r7, #20]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	429a      	cmp	r2, r3
 800957e:	d207      	bcs.n	8009590 <TimestampIsReached+0x54>
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	693a      	ldr	r2, [r7, #16]
 8009588:	429a      	cmp	r2, r3
 800958a:	d201      	bcs.n	8009590 <TimestampIsReached+0x54>
 800958c:	2201      	movs	r2, #1
 800958e:	e000      	b.n	8009592 <TimestampIsReached+0x56>
 8009590:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8009592:	200e      	movs	r0, #14
 8009594:	183b      	adds	r3, r7, r0
 8009596:	701a      	strb	r2, [r3, #0]
 8009598:	781a      	ldrb	r2, [r3, #0]
 800959a:	2101      	movs	r1, #1
 800959c:	400a      	ands	r2, r1
 800959e:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 80095a0:	230f      	movs	r3, #15
 80095a2:	18fb      	adds	r3, r7, r3
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d103      	bne.n	80095b2 <TimestampIsReached+0x76>
 80095aa:	183b      	adds	r3, r7, r0
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d001      	beq.n	80095b6 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 80095b2:	2301      	movs	r3, #1
 80095b4:	e000      	b.n	80095b8 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	0018      	movs	r0, r3
 80095ba:	46bd      	mov	sp, r7
 80095bc:	b006      	add	sp, #24
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	7fffffff 	.word	0x7fffffff

080095c4 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 80095cc:	f000 fba8 	bl	8009d20 <HAL_GetTick>
 80095d0:	0002      	movs	r2, r0
 80095d2:	4904      	ldr	r1, [pc, #16]	@ (80095e4 <AddTimestamp+0x20>)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	0018      	movs	r0, r3
 80095d8:	f00e fac8 	bl	8017b6c <siprintf>
}
 80095dc:	46c0      	nop			@ (mov r8, r8)
 80095de:	46bd      	mov	sp, r7
 80095e0:	b002      	add	sp, #8
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	0801b40c 	.word	0x0801b40c

080095e8 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 80095e8:	b40c      	push	{r2, r3}
 80095ea:	b5b0      	push	{r4, r5, r7, lr}
 80095ec:	4c2b      	ldr	r4, [pc, #172]	@ (800969c <CreateLine+0xb4>)
 80095ee:	44a5      	add	sp, r4
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	0002      	movs	r2, r0
 80095f4:	6039      	str	r1, [r7, #0]
 80095f6:	4b2a      	ldr	r3, [pc, #168]	@ (80096a0 <CreateLine+0xb8>)
 80095f8:	2182      	movs	r1, #130	@ 0x82
 80095fa:	00c9      	lsls	r1, r1, #3
 80095fc:	185b      	adds	r3, r3, r1
 80095fe:	19db      	adds	r3, r3, r7
 8009600:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8009602:	4b28      	ldr	r3, [pc, #160]	@ (80096a4 <CreateLine+0xbc>)
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	4a26      	ldr	r2, [pc, #152]	@ (80096a0 <CreateLine+0xb8>)
 8009608:	1852      	adds	r2, r2, r1
 800960a:	19d2      	adds	r2, r2, r7
 800960c:	7812      	ldrb	r2, [r2, #0]
 800960e:	429a      	cmp	r2, r3
 8009610:	d83b      	bhi.n	800968a <CreateLine+0xa2>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8009612:	683a      	ldr	r2, [r7, #0]
 8009614:	4924      	ldr	r1, [pc, #144]	@ (80096a8 <CreateLine+0xc0>)
 8009616:	240c      	movs	r4, #12
 8009618:	193b      	adds	r3, r7, r4
 800961a:	0018      	movs	r0, r3
 800961c:	f00e faa6 	bl	8017b6c <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8009620:	4b20      	ldr	r3, [pc, #128]	@ (80096a4 <CreateLine+0xbc>)
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d909      	bls.n	800963c <CreateLine+0x54>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8009628:	193b      	adds	r3, r7, r4
 800962a:	0018      	movs	r0, r3
 800962c:	f7f6 fd6c 	bl	8000108 <strlen>
 8009630:	0002      	movs	r2, r0
 8009632:	193b      	adds	r3, r7, r4
 8009634:	189b      	adds	r3, r3, r2
 8009636:	0018      	movs	r0, r3
 8009638:	f7ff ffc4 	bl	80095c4 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800963c:	240c      	movs	r4, #12
 800963e:	193b      	adds	r3, r7, r4
 8009640:	0018      	movs	r0, r3
 8009642:	f7f6 fd61 	bl	8000108 <strlen>
 8009646:	0003      	movs	r3, r0
 8009648:	4918      	ldr	r1, [pc, #96]	@ (80096ac <CreateLine+0xc4>)
 800964a:	187a      	adds	r2, r7, r1
 800964c:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800964e:	4b18      	ldr	r3, [pc, #96]	@ (80096b0 <CreateLine+0xc8>)
 8009650:	2508      	movs	r5, #8
 8009652:	195b      	adds	r3, r3, r5
 8009654:	19db      	adds	r3, r3, r7
 8009656:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 8009658:	193a      	adds	r2, r7, r4
 800965a:	187b      	adds	r3, r7, r1
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	18d0      	adds	r0, r2, r3
 8009660:	187b      	adds	r3, r7, r1
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2280      	movs	r2, #128	@ 0x80
 8009666:	00d2      	lsls	r2, r2, #3
 8009668:	1ad3      	subs	r3, r2, r3
 800966a:	0019      	movs	r1, r3
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	2283      	movs	r2, #131	@ 0x83
 8009670:	00d2      	lsls	r2, r2, #3
 8009672:	1952      	adds	r2, r2, r5
 8009674:	19d2      	adds	r2, r2, r7
 8009676:	6812      	ldr	r2, [r2, #0]
 8009678:	f00e fb10 	bl	8017c9c <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800967c:	193a      	adds	r2, r7, r4
 800967e:	4b0d      	ldr	r3, [pc, #52]	@ (80096b4 <CreateLine+0xcc>)
 8009680:	0011      	movs	r1, r2
 8009682:	0018      	movs	r0, r3
 8009684:	f00e fa62 	bl	8017b4c <iprintf>
 8009688:	e000      	b.n	800968c <CreateLine+0xa4>
    return;
 800968a:	46c0      	nop			@ (mov r8, r8)
}
 800968c:	46bd      	mov	sp, r7
 800968e:	2382      	movs	r3, #130	@ 0x82
 8009690:	00db      	lsls	r3, r3, #3
 8009692:	449d      	add	sp, r3
 8009694:	bcb0      	pop	{r4, r5, r7}
 8009696:	bc08      	pop	{r3}
 8009698:	b002      	add	sp, #8
 800969a:	4718      	bx	r3
 800969c:	fffffbf0 	.word	0xfffffbf0
 80096a0:	fffffbf7 	.word	0xfffffbf7
 80096a4:	20000098 	.word	0x20000098
 80096a8:	0801b418 	.word	0x0801b418
 80096ac:	0000040c 	.word	0x0000040c
 80096b0:	0000041c 	.word	0x0000041c
 80096b4:	0801b41c 	.word	0x0801b41c

080096b8 <_write>:

int _write(int fd, const void *buf, size_t count) {
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	68b9      	ldr	r1, [r7, #8]
 80096ca:	4804      	ldr	r0, [pc, #16]	@ (80096dc <_write+0x24>)
 80096cc:	2364      	movs	r3, #100	@ 0x64
 80096ce:	f007 fd27 	bl	8011120 <HAL_UART_Transmit>
  return count;
 80096d2:	687b      	ldr	r3, [r7, #4]
}
 80096d4:	0018      	movs	r0, r3
 80096d6:	46bd      	mov	sp, r7
 80096d8:	b004      	add	sp, #16
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	200028f4 	.word	0x200028f4

080096e0 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	0002      	movs	r2, r0
 80096e8:	1dfb      	adds	r3, r7, #7
 80096ea:	701a      	strb	r2, [r3, #0]
 80096ec:	4b03      	ldr	r3, [pc, #12]	@ (80096fc <SetVerboseLevel+0x1c>)
 80096ee:	1dfa      	adds	r2, r7, #7
 80096f0:	7812      	ldrb	r2, [r2, #0]
 80096f2:	701a      	strb	r2, [r3, #0]
 80096f4:	46c0      	nop			@ (mov r8, r8)
 80096f6:	46bd      	mov	sp, r7
 80096f8:	b002      	add	sp, #8
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	20000098 	.word	0x20000098

08009700 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 8009700:	b580      	push	{r7, lr}
 8009702:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009704:	f000 fb0c 	bl	8009d20 <HAL_GetTick>
 8009708:	0003      	movs	r3, r0
}
 800970a:	0018      	movs	r0, r3
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 8009716:	4a0f      	ldr	r2, [pc, #60]	@ (8009754 <BinaryReleaseInfo+0x44>)
 8009718:	4b0f      	ldr	r3, [pc, #60]	@ (8009758 <BinaryReleaseInfo+0x48>)
 800971a:	0019      	movs	r1, r3
 800971c:	2002      	movs	r0, #2
 800971e:	f7ff ff63 	bl	80095e8 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8009722:	480e      	ldr	r0, [pc, #56]	@ (800975c <BinaryReleaseInfo+0x4c>)
 8009724:	4a0e      	ldr	r2, [pc, #56]	@ (8009760 <BinaryReleaseInfo+0x50>)
 8009726:	490c      	ldr	r1, [pc, #48]	@ (8009758 <BinaryReleaseInfo+0x48>)
 8009728:	4b0e      	ldr	r3, [pc, #56]	@ (8009764 <BinaryReleaseInfo+0x54>)
 800972a:	9300      	str	r3, [sp, #0]
 800972c:	0003      	movs	r3, r0
 800972e:	2002      	movs	r0, #2
 8009730:	f7ff ff5a 	bl	80095e8 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w33a");
 8009734:	4a0c      	ldr	r2, [pc, #48]	@ (8009768 <BinaryReleaseInfo+0x58>)
 8009736:	4b08      	ldr	r3, [pc, #32]	@ (8009758 <BinaryReleaseInfo+0x48>)
 8009738:	0019      	movs	r1, r3
 800973a:	2002      	movs	r0, #2
 800973c:	f7ff ff54 	bl	80095e8 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 8009740:	4b0a      	ldr	r3, [pc, #40]	@ (800976c <BinaryReleaseInfo+0x5c>)
 8009742:	4a0b      	ldr	r2, [pc, #44]	@ (8009770 <BinaryReleaseInfo+0x60>)
 8009744:	4904      	ldr	r1, [pc, #16]	@ (8009758 <BinaryReleaseInfo+0x48>)
 8009746:	2002      	movs	r0, #2
 8009748:	f7ff ff4e 	bl	80095e8 <CreateLine>
}
 800974c:	46c0      	nop			@ (mov r8, r8)
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	46c0      	nop			@ (mov r8, r8)
 8009754:	0801b424 	.word	0x0801b424
 8009758:	0801b450 	.word	0x0801b450
 800975c:	0801b454 	.word	0x0801b454
 8009760:	0801b460 	.word	0x0801b460
 8009764:	0801b474 	.word	0x0801b474
 8009768:	0801b480 	.word	0x0801b480
 800976c:	0801b48c 	.word	0x0801b48c
 8009770:	0801b494 	.word	0x0801b494

08009774 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static void ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8009774:	b590      	push	{r4, r7, lr}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6039      	str	r1, [r7, #0]
 800977c:	0011      	movs	r1, r2
 800977e:	1dfb      	adds	r3, r7, #7
 8009780:	1c02      	adds	r2, r0, #0
 8009782:	701a      	strb	r2, [r3, #0]
 8009784:	1dbb      	adds	r3, r7, #6
 8009786:	1c0a      	adds	r2, r1, #0
 8009788:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800978a:	4b08      	ldr	r3, [pc, #32]	@ (80097ac <ReadRegister+0x38>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d008      	beq.n	80097a4 <ReadRegister+0x30>
		ReadFunction(address, buffer, nrBytes);
 8009792:	4b06      	ldr	r3, [pc, #24]	@ (80097ac <ReadRegister+0x38>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	1dba      	adds	r2, r7, #6
 8009798:	7814      	ldrb	r4, [r2, #0]
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	1dfa      	adds	r2, r7, #7
 800979e:	7810      	ldrb	r0, [r2, #0]
 80097a0:	0022      	movs	r2, r4
 80097a2:	4798      	blx	r3
	}
}
 80097a4:	46c0      	nop			@ (mov r8, r8)
 80097a6:	46bd      	mov	sp, r7
 80097a8:	b003      	add	sp, #12
 80097aa:	bd90      	pop	{r4, r7, pc}
 80097ac:	20002af4 	.word	0x20002af4

080097b0 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80097b0:	b590      	push	{r4, r7, lr}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6039      	str	r1, [r7, #0]
 80097b8:	0011      	movs	r1, r2
 80097ba:	1dfb      	adds	r3, r7, #7
 80097bc:	1c02      	adds	r2, r0, #0
 80097be:	701a      	strb	r2, [r3, #0]
 80097c0:	1dbb      	adds	r3, r7, #6
 80097c2:	1c0a      	adds	r2, r1, #0
 80097c4:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 80097c6:	4b08      	ldr	r3, [pc, #32]	@ (80097e8 <WriteRegister+0x38>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d008      	beq.n	80097e0 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 80097ce:	4b06      	ldr	r3, [pc, #24]	@ (80097e8 <WriteRegister+0x38>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	1dba      	adds	r2, r7, #6
 80097d4:	7814      	ldrb	r4, [r2, #0]
 80097d6:	6839      	ldr	r1, [r7, #0]
 80097d8:	1dfa      	adds	r2, r7, #7
 80097da:	7810      	ldrb	r0, [r2, #0]
 80097dc:	0022      	movs	r2, r4
 80097de:	4798      	blx	r3
  }
}
 80097e0:	46c0      	nop			@ (mov r8, r8)
 80097e2:	46bd      	mov	sp, r7
 80097e4:	b003      	add	sp, #12
 80097e6:	bd90      	pop	{r4, r7, pc}
 80097e8:	20002af8 	.word	0x20002af8

080097ec <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	000a      	movs	r2, r1
 80097f6:	1cfb      	adds	r3, r7, #3
 80097f8:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 80097fa:	230f      	movs	r3, #15
 80097fc:	18fb      	adds	r3, r7, r3
 80097fe:	22ff      	movs	r2, #255	@ 0xff
 8009800:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8009802:	230e      	movs	r3, #14
 8009804:	18fb      	adds	r3, r7, r3
 8009806:	2200      	movs	r2, #0
 8009808:	701a      	strb	r2, [r3, #0]
 800980a:	e037      	b.n	800987c <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800980c:	230e      	movs	r3, #14
 800980e:	18fb      	adds	r3, r7, r3
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	18d3      	adds	r3, r2, r3
 8009816:	7819      	ldrb	r1, [r3, #0]
 8009818:	220f      	movs	r2, #15
 800981a:	18bb      	adds	r3, r7, r2
 800981c:	18ba      	adds	r2, r7, r2
 800981e:	7812      	ldrb	r2, [r2, #0]
 8009820:	404a      	eors	r2, r1
 8009822:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8009824:	230d      	movs	r3, #13
 8009826:	18fb      	adds	r3, r7, r3
 8009828:	2200      	movs	r2, #0
 800982a:	701a      	strb	r2, [r3, #0]
 800982c:	e01b      	b.n	8009866 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800982e:	210f      	movs	r1, #15
 8009830:	187b      	adds	r3, r7, r1
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	b25b      	sxtb	r3, r3
 8009836:	2b00      	cmp	r3, #0
 8009838:	da09      	bge.n	800984e <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800983a:	187b      	adds	r3, r7, r1
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	005b      	lsls	r3, r3, #1
 8009840:	b25b      	sxtb	r3, r3
 8009842:	2231      	movs	r2, #49	@ 0x31
 8009844:	4053      	eors	r3, r2
 8009846:	b25a      	sxtb	r2, r3
 8009848:	187b      	adds	r3, r7, r1
 800984a:	701a      	strb	r2, [r3, #0]
 800984c:	e005      	b.n	800985a <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800984e:	230f      	movs	r3, #15
 8009850:	18fa      	adds	r2, r7, r3
 8009852:	18fb      	adds	r3, r7, r3
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	18db      	adds	r3, r3, r3
 8009858:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800985a:	210d      	movs	r1, #13
 800985c:	187b      	adds	r3, r7, r1
 800985e:	781a      	ldrb	r2, [r3, #0]
 8009860:	187b      	adds	r3, r7, r1
 8009862:	3201      	adds	r2, #1
 8009864:	701a      	strb	r2, [r3, #0]
 8009866:	230d      	movs	r3, #13
 8009868:	18fb      	adds	r3, r7, r3
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	2b07      	cmp	r3, #7
 800986e:	d9de      	bls.n	800982e <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8009870:	210e      	movs	r1, #14
 8009872:	187b      	adds	r3, r7, r1
 8009874:	781a      	ldrb	r2, [r3, #0]
 8009876:	187b      	adds	r3, r7, r1
 8009878:	3201      	adds	r2, #1
 800987a:	701a      	strb	r2, [r3, #0]
 800987c:	230e      	movs	r3, #14
 800987e:	18fa      	adds	r2, r7, r3
 8009880:	1cfb      	adds	r3, r7, #3
 8009882:	7812      	ldrb	r2, [r2, #0]
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	429a      	cmp	r2, r3
 8009888:	d3c0      	bcc.n	800980c <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800988a:	230f      	movs	r3, #15
 800988c:	18fb      	adds	r3, r7, r3
 800988e:	781b      	ldrb	r3, [r3, #0]
}
 8009890:	0018      	movs	r0, r3
 8009892:	46bd      	mov	sp, r7
 8009894:	b004      	add	sp, #16
 8009896:	bd80      	pop	{r7, pc}

08009898 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 80098a2:	4b0a      	ldr	r3, [pc, #40]	@ (80098cc <HIDS_Init+0x34>)
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 80098a8:	4b09      	ldr	r3, [pc, #36]	@ (80098d0 <HIDS_Init+0x38>)
 80098aa:	683a      	ldr	r2, [r7, #0]
 80098ac:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 80098ae:	4b09      	ldr	r3, [pc, #36]	@ (80098d4 <HIDS_Init+0x3c>)
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	0018      	movs	r0, r3
 80098b4:	f000 f8d0 	bl	8009a58 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 80098b8:	4b07      	ldr	r3, [pc, #28]	@ (80098d8 <HIDS_Init+0x40>)
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	0018      	movs	r0, r3
 80098be:	f000 f82b 	bl	8009918 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 80098c2:	46c0      	nop			@ (mov r8, r8)
 80098c4:	46bd      	mov	sp, r7
 80098c6:	b002      	add	sp, #8
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	46c0      	nop			@ (mov r8, r8)
 80098cc:	20002af4 	.word	0x20002af4
 80098d0:	20002af8 	.word	0x20002af8
 80098d4:	2000009a 	.word	0x2000009a
 80098d8:	20000099 	.word	0x20000099

080098dc <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 80098dc:	b580      	push	{r7, lr}
 80098de:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 80098e0:	f7ff ff0e 	bl	8009700 <GetCurrentHalTicks>
 80098e4:	0002      	movs	r2, r0
 80098e6:	4b08      	ldr	r3, [pc, #32]	@ (8009908 <HIDS_StartMeasurement+0x2c>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	18d2      	adds	r2, r2, r3
 80098ec:	4b07      	ldr	r3, [pc, #28]	@ (800990c <HIDS_StartMeasurement+0x30>)
 80098ee:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 80098f0:	4b07      	ldr	r3, [pc, #28]	@ (8009910 <HIDS_StartMeasurement+0x34>)
 80098f2:	2201      	movs	r2, #1
 80098f4:	0019      	movs	r1, r3
 80098f6:	2044      	movs	r0, #68	@ 0x44
 80098f8:	f7ff ff5a 	bl	80097b0 <WriteRegister>
  MeasurementDone = false;
 80098fc:	4b05      	ldr	r3, [pc, #20]	@ (8009914 <HIDS_StartMeasurement+0x38>)
 80098fe:	2200      	movs	r2, #0
 8009900:	701a      	strb	r2, [r3, #0]
}
 8009902:	46c0      	nop			@ (mov r8, r8)
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	200000a0 	.word	0x200000a0
 800990c:	2000009c 	.word	0x2000009c
 8009910:	2000009a 	.word	0x2000009a
 8009914:	20002b0a 	.word	0x20002b0a

08009918 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	0002      	movs	r2, r0
 8009920:	1dfb      	adds	r3, r7, #7
 8009922:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8009924:	4b03      	ldr	r3, [pc, #12]	@ (8009934 <HIDS_SetHeaterMode+0x1c>)
 8009926:	1dfa      	adds	r2, r7, #7
 8009928:	7812      	ldrb	r2, [r2, #0]
 800992a:	701a      	strb	r2, [r3, #0]
}
 800992c:	46c0      	nop			@ (mov r8, r8)
 800992e:	46bd      	mov	sp, r7
 8009930:	b002      	add	sp, #8
 8009932:	bd80      	pop	{r7, pc}
 8009934:	20000099 	.word	0x20000099

08009938 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8009938:	b590      	push	{r4, r7, lr}
 800993a:	b085      	sub	sp, #20
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	781a      	ldrb	r2, [r3, #0]
 8009944:	210c      	movs	r1, #12
 8009946:	187b      	adds	r3, r7, r1
 8009948:	701a      	strb	r2, [r3, #0]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	785a      	ldrb	r2, [r3, #1]
 800994e:	187b      	adds	r3, r7, r1
 8009950:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8009952:	240f      	movs	r4, #15
 8009954:	193b      	adds	r3, r7, r4
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	7892      	ldrb	r2, [r2, #2]
 800995a:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800995c:	187b      	adds	r3, r7, r1
 800995e:	2102      	movs	r1, #2
 8009960:	0018      	movs	r0, r3
 8009962:	f7ff ff43 	bl	80097ec <CalculateCRC>
 8009966:	0003      	movs	r3, r0
 8009968:	001a      	movs	r2, r3
 800996a:	193b      	adds	r3, r7, r4
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	4293      	cmp	r3, r2
 8009970:	d007      	beq.n	8009982 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8009972:	4a17      	ldr	r2, [pc, #92]	@ (80099d0 <CheckCRC+0x98>)
 8009974:	4b17      	ldr	r3, [pc, #92]	@ (80099d4 <CheckCRC+0x9c>)
 8009976:	0019      	movs	r1, r3
 8009978:	2001      	movs	r0, #1
 800997a:	f7ff fe35 	bl	80095e8 <CreateLine>
		return false;
 800997e:	2300      	movs	r3, #0
 8009980:	e021      	b.n	80099c6 <CheckCRC+0x8e>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	78da      	ldrb	r2, [r3, #3]
 8009986:	2108      	movs	r1, #8
 8009988:	187b      	adds	r3, r7, r1
 800998a:	701a      	strb	r2, [r3, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	791a      	ldrb	r2, [r3, #4]
 8009990:	187b      	adds	r3, r7, r1
 8009992:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8009994:	240e      	movs	r4, #14
 8009996:	193b      	adds	r3, r7, r4
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	7952      	ldrb	r2, [r2, #5]
 800999c:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800999e:	187b      	adds	r3, r7, r1
 80099a0:	2102      	movs	r1, #2
 80099a2:	0018      	movs	r0, r3
 80099a4:	f7ff ff22 	bl	80097ec <CalculateCRC>
 80099a8:	0003      	movs	r3, r0
 80099aa:	001a      	movs	r2, r3
 80099ac:	193b      	adds	r3, r7, r4
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d007      	beq.n	80099c4 <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 80099b4:	4a08      	ldr	r2, [pc, #32]	@ (80099d8 <CheckCRC+0xa0>)
 80099b6:	4b07      	ldr	r3, [pc, #28]	@ (80099d4 <CheckCRC+0x9c>)
 80099b8:	0019      	movs	r1, r3
 80099ba:	2001      	movs	r0, #1
 80099bc:	f7ff fe14 	bl	80095e8 <CreateLine>
		return false;
 80099c0:	2300      	movs	r3, #0
 80099c2:	e000      	b.n	80099c6 <CheckCRC+0x8e>
	}
	return true;
 80099c4:	2301      	movs	r3, #1
}
 80099c6:	0018      	movs	r0, r3
 80099c8:	46bd      	mov	sp, r7
 80099ca:	b005      	add	sp, #20
 80099cc:	bd90      	pop	{r4, r7, pc}
 80099ce:	46c0      	nop			@ (mov r8, r8)
 80099d0:	0801b4d0 	.word	0x0801b4d0
 80099d4:	0801b4f8 	.word	0x0801b4f8
 80099d8:	0801b4fc 	.word	0x0801b4fc

080099dc <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 80099dc:	b580      	push	{r7, lr}
 80099de:	b084      	sub	sp, #16
 80099e0:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 80099e2:	1dbb      	adds	r3, r7, #6
 80099e4:	2289      	movs	r2, #137	@ 0x89
 80099e6:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 80099e8:	1dbb      	adds	r3, r7, #6
 80099ea:	2201      	movs	r2, #1
 80099ec:	0019      	movs	r1, r3
 80099ee:	2044      	movs	r0, #68	@ 0x44
 80099f0:	f7ff fede 	bl	80097b0 <WriteRegister>
	HAL_Delay(30);
 80099f4:	201e      	movs	r0, #30
 80099f6:	f000 f99d 	bl	8009d34 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 80099fa:	4b14      	ldr	r3, [pc, #80]	@ (8009a4c <HIDS_DeviceConnected+0x70>)
 80099fc:	2206      	movs	r2, #6
 80099fe:	0019      	movs	r1, r3
 8009a00:	2044      	movs	r0, #68	@ 0x44
 8009a02:	f7ff feb7 	bl	8009774 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8009a06:	1dfb      	adds	r3, r7, #7
 8009a08:	2200      	movs	r2, #0
 8009a0a:	701a      	strb	r2, [r3, #0]
 8009a0c:	e011      	b.n	8009a32 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8009a0e:	1dfb      	adds	r3, r7, #7
 8009a10:	7818      	ldrb	r0, [r3, #0]
 8009a12:	1dfb      	adds	r3, r7, #7
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	4a0d      	ldr	r2, [pc, #52]	@ (8009a4c <HIDS_DeviceConnected+0x70>)
 8009a18:	5cd3      	ldrb	r3, [r2, r3]
 8009a1a:	4a0d      	ldr	r2, [pc, #52]	@ (8009a50 <HIDS_DeviceConnected+0x74>)
 8009a1c:	490d      	ldr	r1, [pc, #52]	@ (8009a54 <HIDS_DeviceConnected+0x78>)
 8009a1e:	9300      	str	r3, [sp, #0]
 8009a20:	0003      	movs	r3, r0
 8009a22:	2002      	movs	r0, #2
 8009a24:	f7ff fde0 	bl	80095e8 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8009a28:	1dfb      	adds	r3, r7, #7
 8009a2a:	781a      	ldrb	r2, [r3, #0]
 8009a2c:	1dfb      	adds	r3, r7, #7
 8009a2e:	3201      	adds	r2, #1
 8009a30:	701a      	strb	r2, [r3, #0]
 8009a32:	1dfb      	adds	r3, r7, #7
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	2b05      	cmp	r3, #5
 8009a38:	d9e9      	bls.n	8009a0e <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8009a3a:	4b04      	ldr	r3, [pc, #16]	@ (8009a4c <HIDS_DeviceConnected+0x70>)
 8009a3c:	0018      	movs	r0, r3
 8009a3e:	f7ff ff7b 	bl	8009938 <CheckCRC>
 8009a42:	0003      	movs	r3, r0
}
 8009a44:	0018      	movs	r0, r3
 8009a46:	46bd      	mov	sp, r7
 8009a48:	b002      	add	sp, #8
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	20002afc 	.word	0x20002afc
 8009a50:	0801b528 	.word	0x0801b528
 8009a54:	0801b4cc 	.word	0x0801b4cc

08009a58 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	0002      	movs	r2, r0
 8009a60:	1dfb      	adds	r3, r7, #7
 8009a62:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 8009a64:	4b03      	ldr	r3, [pc, #12]	@ (8009a74 <HIDS_SetMeasurementMode+0x1c>)
 8009a66:	1dfa      	adds	r2, r7, #7
 8009a68:	7812      	ldrb	r2, [r2, #0]
 8009a6a:	701a      	strb	r2, [r3, #0]
}
 8009a6c:	46c0      	nop			@ (mov r8, r8)
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	b002      	add	sp, #8
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	2000009a 	.word	0x2000009a

08009a78 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8009a7c:	4b04      	ldr	r3, [pc, #16]	@ (8009a90 <HIDS_MeasurementReady+0x18>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	0018      	movs	r0, r3
 8009a82:	f7ff fd5b 	bl	800953c <TimestampIsReached>
 8009a86:	0003      	movs	r3, r0
}
 8009a88:	0018      	movs	r0, r3
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	46c0      	nop			@ (mov r8, r8)
 8009a90:	2000009c 	.word	0x2000009c

08009a94 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b088      	sub	sp, #32
 8009a98:	af02      	add	r7, sp, #8
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 8009a9e:	4b4e      	ldr	r3, [pc, #312]	@ (8009bd8 <HIDS_GetMeasurementValues+0x144>)
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d001      	beq.n	8009aaa <HIDS_GetMeasurementValues+0x16>
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e092      	b.n	8009bd0 <HIDS_GetMeasurementValues+0x13c>
  if(!HIDS_MeasurementReady()) return false;
 8009aaa:	f7ff ffe5 	bl	8009a78 <HIDS_MeasurementReady>
 8009aae:	0003      	movs	r3, r0
 8009ab0:	001a      	movs	r2, r3
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	4053      	eors	r3, r2
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d001      	beq.n	8009ac0 <HIDS_GetMeasurementValues+0x2c>
 8009abc:	2300      	movs	r3, #0
 8009abe:	e087      	b.n	8009bd0 <HIDS_GetMeasurementValues+0x13c>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 8009ac0:	4b46      	ldr	r3, [pc, #280]	@ (8009bdc <HIDS_GetMeasurementValues+0x148>)
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	4b46      	ldr	r3, [pc, #280]	@ (8009be0 <HIDS_GetMeasurementValues+0x14c>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	0019      	movs	r1, r3
 8009aca:	0010      	movs	r0, r2
 8009acc:	f7f6 fb38 	bl	8000140 <__udivsi3>
 8009ad0:	0003      	movs	r3, r0
 8009ad2:	613b      	str	r3, [r7, #16]
  float currentTemperature;
  float currentHumidity;
  //static float temperatures[HIDS_MAX_MEASUREMENTS];
  //static float humidities[HIDS_MAX_MEASUREMENTS];

  Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
 8009ad4:	4b43      	ldr	r3, [pc, #268]	@ (8009be4 <HIDS_GetMeasurementValues+0x150>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	1c58      	adds	r0, r3, #1
 8009ada:	4a43      	ldr	r2, [pc, #268]	@ (8009be8 <HIDS_GetMeasurementValues+0x154>)
 8009adc:	4943      	ldr	r1, [pc, #268]	@ (8009bec <HIDS_GetMeasurementValues+0x158>)
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	9300      	str	r3, [sp, #0]
 8009ae2:	0003      	movs	r3, r0
 8009ae4:	2003      	movs	r0, #3
 8009ae6:	f7ff fd7f 	bl	80095e8 <CreateLine>
  ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 8009aea:	4b41      	ldr	r3, [pc, #260]	@ (8009bf0 <HIDS_GetMeasurementValues+0x15c>)
 8009aec:	2206      	movs	r2, #6
 8009aee:	0019      	movs	r1, r3
 8009af0:	2044      	movs	r0, #68	@ 0x44
 8009af2:	f7ff fe3f 	bl	8009774 <ReadRegister>
	if(!CheckCRC(MeasureBuffer)) {
 8009af6:	4b3e      	ldr	r3, [pc, #248]	@ (8009bf0 <HIDS_GetMeasurementValues+0x15c>)
 8009af8:	0018      	movs	r0, r3
 8009afa:	f7ff ff1d 	bl	8009938 <CheckCRC>
 8009afe:	0003      	movs	r3, r0
 8009b00:	001a      	movs	r2, r3
 8009b02:	2301      	movs	r3, #1
 8009b04:	4053      	eors	r3, r2
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d011      	beq.n	8009b30 <HIDS_GetMeasurementValues+0x9c>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 8009b0c:	2317      	movs	r3, #23
 8009b0e:	18fb      	adds	r3, r7, r3
 8009b10:	2200      	movs	r2, #0
 8009b12:	701a      	strb	r2, [r3, #0]
 8009b14:	e005      	b.n	8009b22 <HIDS_GetMeasurementValues+0x8e>
 8009b16:	2117      	movs	r1, #23
 8009b18:	187b      	adds	r3, r7, r1
 8009b1a:	781a      	ldrb	r2, [r3, #0]
 8009b1c:	187b      	adds	r3, r7, r1
 8009b1e:	3201      	adds	r2, #1
 8009b20:	701a      	strb	r2, [r3, #0]
 8009b22:	2317      	movs	r3, #23
 8009b24:	18fb      	adds	r3, r7, r3
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	2b05      	cmp	r3, #5
 8009b2a:	d9f4      	bls.n	8009b16 <HIDS_GetMeasurementValues+0x82>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	e04f      	b.n	8009bd0 <HIDS_GetMeasurementValues+0x13c>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * (MeasureBuffer[0] << 8) | MeasureBuffer[1])) / HIDS_POW_2_16_MINUS_1);
 8009b30:	4b2f      	ldr	r3, [pc, #188]	@ (8009bf0 <HIDS_GetMeasurementValues+0x15c>)
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	021b      	lsls	r3, r3, #8
 8009b36:	22af      	movs	r2, #175	@ 0xaf
 8009b38:	4353      	muls	r3, r2
 8009b3a:	4a2d      	ldr	r2, [pc, #180]	@ (8009bf0 <HIDS_GetMeasurementValues+0x15c>)
 8009b3c:	7852      	ldrb	r2, [r2, #1]
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	0018      	movs	r0, r3
 8009b42:	f7f9 fbbb 	bl	80032bc <__aeabi_i2d>
 8009b46:	2200      	movs	r2, #0
 8009b48:	4b2a      	ldr	r3, [pc, #168]	@ (8009bf4 <HIDS_GetMeasurementValues+0x160>)
 8009b4a:	f7f8 f8b1 	bl	8001cb0 <__aeabi_ddiv>
 8009b4e:	0002      	movs	r2, r0
 8009b50:	000b      	movs	r3, r1
 8009b52:	0010      	movs	r0, r2
 8009b54:	0019      	movs	r1, r3
 8009b56:	f7f9 fc4b 	bl	80033f0 <__aeabi_d2f>
 8009b5a:	1c03      	adds	r3, r0, #0
 8009b5c:	60fb      	str	r3, [r7, #12]
	currentTemperature += -45;
 8009b5e:	4926      	ldr	r1, [pc, #152]	@ (8009bf8 <HIDS_GetMeasurementValues+0x164>)
 8009b60:	68f8      	ldr	r0, [r7, #12]
 8009b62:	f7f7 fad9 	bl	8001118 <__aeabi_fsub>
 8009b66:	1c03      	adds	r3, r0, #0
 8009b68:	60fb      	str	r3, [r7, #12]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8009b6a:	4b21      	ldr	r3, [pc, #132]	@ (8009bf0 <HIDS_GetMeasurementValues+0x15c>)
 8009b6c:	78db      	ldrb	r3, [r3, #3]
 8009b6e:	021b      	lsls	r3, r3, #8
 8009b70:	4a1f      	ldr	r2, [pc, #124]	@ (8009bf0 <HIDS_GetMeasurementValues+0x15c>)
 8009b72:	7912      	ldrb	r2, [r2, #4]
 8009b74:	431a      	orrs	r2, r3
 8009b76:	0013      	movs	r3, r2
 8009b78:	015b      	lsls	r3, r3, #5
 8009b7a:	1a9b      	subs	r3, r3, r2
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	189b      	adds	r3, r3, r2
 8009b80:	0018      	movs	r0, r3
 8009b82:	f7f9 fb9b 	bl	80032bc <__aeabi_i2d>
 8009b86:	2200      	movs	r2, #0
 8009b88:	4b1a      	ldr	r3, [pc, #104]	@ (8009bf4 <HIDS_GetMeasurementValues+0x160>)
 8009b8a:	f7f8 f891 	bl	8001cb0 <__aeabi_ddiv>
 8009b8e:	0002      	movs	r2, r0
 8009b90:	000b      	movs	r3, r1
 8009b92:	0010      	movs	r0, r2
 8009b94:	0019      	movs	r1, r3
 8009b96:	f7f9 fc2b 	bl	80033f0 <__aeabi_d2f>
 8009b9a:	1c03      	adds	r3, r0, #0
 8009b9c:	60bb      	str	r3, [r7, #8]
	currentHumidity += -6;
 8009b9e:	4917      	ldr	r1, [pc, #92]	@ (8009bfc <HIDS_GetMeasurementValues+0x168>)
 8009ba0:	68b8      	ldr	r0, [r7, #8]
 8009ba2:	f7f7 fab9 	bl	8001118 <__aeabi_fsub>
 8009ba6:	1c03      	adds	r3, r0, #0
 8009ba8:	60bb      	str	r3, [r7, #8]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	68ba      	ldr	r2, [r7, #8]
 8009bb4:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	0011      	movs	r1, r2
 8009bbc:	0018      	movs	r0, r3
 8009bbe:	f7fe feab 	bl	8008918 <SGP_GetHT>

   measurements = 0;
 8009bc2:	4b08      	ldr	r3, [pc, #32]	@ (8009be4 <HIDS_GetMeasurementValues+0x150>)
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	601a      	str	r2, [r3, #0]
   MeasurementDone = true;
 8009bc8:	4b03      	ldr	r3, [pc, #12]	@ (8009bd8 <HIDS_GetMeasurementValues+0x144>)
 8009bca:	2201      	movs	r2, #1
 8009bcc:	701a      	strb	r2, [r3, #0]
    //Debug("HIDS measurement is done.");
   return true;
 8009bce:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.
	//HIDS_StartMeasurement();
	//return false;
}
 8009bd0:	0018      	movs	r0, r3
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	b006      	add	sp, #24
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	20002b0a 	.word	0x20002b0a
 8009bdc:	200000a4 	.word	0x200000a4
 8009be0:	200000a0 	.word	0x200000a0
 8009be4:	20002b0c 	.word	0x20002b0c
 8009be8:	0801b548 	.word	0x0801b548
 8009bec:	0801b574 	.word	0x0801b574
 8009bf0:	20002b04 	.word	0x20002b04
 8009bf4:	40efffe0 	.word	0x40efffe0
 8009bf8:	42340000 	.word	0x42340000
 8009bfc:	40c00000 	.word	0x40c00000

08009c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8009c00:	480d      	ldr	r0, [pc, #52]	@ (8009c38 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8009c02:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8009c04:	f7ff f94c 	bl	8008ea0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009c08:	480c      	ldr	r0, [pc, #48]	@ (8009c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8009c0a:	490d      	ldr	r1, [pc, #52]	@ (8009c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8009c44 <LoopForever+0xe>)
  movs r3, #0
 8009c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009c10:	e002      	b.n	8009c18 <LoopCopyDataInit>

08009c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009c16:	3304      	adds	r3, #4

08009c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009c1c:	d3f9      	bcc.n	8009c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8009c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009c20:	4c0a      	ldr	r4, [pc, #40]	@ (8009c4c <LoopForever+0x16>)
  movs r3, #0
 8009c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009c24:	e001      	b.n	8009c2a <LoopFillZerobss>

08009c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009c28:	3204      	adds	r2, #4

08009c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009c2c:	d3fb      	bcc.n	8009c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009c2e:	f00e f8d9 	bl	8017de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009c32:	f7fc fa65 	bl	8006100 <main>

08009c36 <LoopForever>:

LoopForever:
    b LoopForever
 8009c36:	e7fe      	b.n	8009c36 <LoopForever>
   ldr   r0, =_estack
 8009c38:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8009c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009c40:	20000400 	.word	0x20000400
  ldr r2, =_sidata
 8009c44:	0801bd08 	.word	0x0801bd08
  ldr r2, =_sbss
 8009c48:	20000400 	.word	0x20000400
  ldr r4, =_ebss
 8009c4c:	20003f14 	.word	0x20003f14

08009c50 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009c50:	e7fe      	b.n	8009c50 <ADC1_COMP_IRQHandler>
	...

08009c54 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009c5a:	1dfb      	adds	r3, r7, #7
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8009c60:	4b0b      	ldr	r3, [pc, #44]	@ (8009c90 <HAL_Init+0x3c>)
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	4b0a      	ldr	r3, [pc, #40]	@ (8009c90 <HAL_Init+0x3c>)
 8009c66:	2140      	movs	r1, #64	@ 0x40
 8009c68:	430a      	orrs	r2, r1
 8009c6a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009c6c:	2003      	movs	r0, #3
 8009c6e:	f000 f811 	bl	8009c94 <HAL_InitTick>
 8009c72:	1e03      	subs	r3, r0, #0
 8009c74:	d003      	beq.n	8009c7e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8009c76:	1dfb      	adds	r3, r7, #7
 8009c78:	2201      	movs	r2, #1
 8009c7a:	701a      	strb	r2, [r3, #0]
 8009c7c:	e001      	b.n	8009c82 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009c7e:	f7fe ffe5 	bl	8008c4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009c82:	1dfb      	adds	r3, r7, #7
 8009c84:	781b      	ldrb	r3, [r3, #0]
}
 8009c86:	0018      	movs	r0, r3
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	b002      	add	sp, #8
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	46c0      	nop			@ (mov r8, r8)
 8009c90:	40022000 	.word	0x40022000

08009c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009c94:	b590      	push	{r4, r7, lr}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009c9c:	4b14      	ldr	r3, [pc, #80]	@ (8009cf0 <HAL_InitTick+0x5c>)
 8009c9e:	681c      	ldr	r4, [r3, #0]
 8009ca0:	4b14      	ldr	r3, [pc, #80]	@ (8009cf4 <HAL_InitTick+0x60>)
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	0019      	movs	r1, r3
 8009ca6:	23fa      	movs	r3, #250	@ 0xfa
 8009ca8:	0098      	lsls	r0, r3, #2
 8009caa:	f7f6 fa49 	bl	8000140 <__udivsi3>
 8009cae:	0003      	movs	r3, r0
 8009cb0:	0019      	movs	r1, r3
 8009cb2:	0020      	movs	r0, r4
 8009cb4:	f7f6 fa44 	bl	8000140 <__udivsi3>
 8009cb8:	0003      	movs	r3, r0
 8009cba:	0018      	movs	r0, r3
 8009cbc:	f000 fccb 	bl	800a656 <HAL_SYSTICK_Config>
 8009cc0:	1e03      	subs	r3, r0, #0
 8009cc2:	d001      	beq.n	8009cc8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	e00f      	b.n	8009ce8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2b03      	cmp	r3, #3
 8009ccc:	d80b      	bhi.n	8009ce6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009cce:	6879      	ldr	r1, [r7, #4]
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	425b      	negs	r3, r3
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	0018      	movs	r0, r3
 8009cd8:	f000 fc98 	bl	800a60c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009cdc:	4b06      	ldr	r3, [pc, #24]	@ (8009cf8 <HAL_InitTick+0x64>)
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	e000      	b.n	8009ce8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
}
 8009ce8:	0018      	movs	r0, r3
 8009cea:	46bd      	mov	sp, r7
 8009cec:	b003      	add	sp, #12
 8009cee:	bd90      	pop	{r4, r7, pc}
 8009cf0:	20000094 	.word	0x20000094
 8009cf4:	200000ac 	.word	0x200000ac
 8009cf8:	200000a8 	.word	0x200000a8

08009cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009d00:	4b05      	ldr	r3, [pc, #20]	@ (8009d18 <HAL_IncTick+0x1c>)
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	001a      	movs	r2, r3
 8009d06:	4b05      	ldr	r3, [pc, #20]	@ (8009d1c <HAL_IncTick+0x20>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	18d2      	adds	r2, r2, r3
 8009d0c:	4b03      	ldr	r3, [pc, #12]	@ (8009d1c <HAL_IncTick+0x20>)
 8009d0e:	601a      	str	r2, [r3, #0]
}
 8009d10:	46c0      	nop			@ (mov r8, r8)
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	46c0      	nop			@ (mov r8, r8)
 8009d18:	200000ac 	.word	0x200000ac
 8009d1c:	20002b10 	.word	0x20002b10

08009d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	af00      	add	r7, sp, #0
  return uwTick;
 8009d24:	4b02      	ldr	r3, [pc, #8]	@ (8009d30 <HAL_GetTick+0x10>)
 8009d26:	681b      	ldr	r3, [r3, #0]
}
 8009d28:	0018      	movs	r0, r3
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	46c0      	nop			@ (mov r8, r8)
 8009d30:	20002b10 	.word	0x20002b10

08009d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009d3c:	f7ff fff0 	bl	8009d20 <HAL_GetTick>
 8009d40:	0003      	movs	r3, r0
 8009d42:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	d005      	beq.n	8009d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8009d78 <HAL_Delay+0x44>)
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	001a      	movs	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	189b      	adds	r3, r3, r2
 8009d58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009d5a:	46c0      	nop			@ (mov r8, r8)
 8009d5c:	f7ff ffe0 	bl	8009d20 <HAL_GetTick>
 8009d60:	0002      	movs	r2, r0
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	1ad3      	subs	r3, r2, r3
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d8f7      	bhi.n	8009d5c <HAL_Delay+0x28>
  {
  }
}
 8009d6c:	46c0      	nop			@ (mov r8, r8)
 8009d6e:	46c0      	nop			@ (mov r8, r8)
 8009d70:	46bd      	mov	sp, r7
 8009d72:	b004      	add	sp, #16
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	46c0      	nop			@ (mov r8, r8)
 8009d78:	200000ac 	.word	0x200000ac

08009d7c <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8009d80:	4b02      	ldr	r3, [pc, #8]	@ (8009d8c <HAL_GetUIDw0+0x10>)
 8009d82:	681b      	ldr	r3, [r3, #0]
}
 8009d84:	0018      	movs	r0, r3
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	46c0      	nop			@ (mov r8, r8)
 8009d8c:	1ff80050 	.word	0x1ff80050

08009d90 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8009d94:	4b02      	ldr	r3, [pc, #8]	@ (8009da0 <HAL_GetUIDw1+0x10>)
 8009d96:	681b      	ldr	r3, [r3, #0]
}
 8009d98:	0018      	movs	r0, r3
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	46c0      	nop			@ (mov r8, r8)
 8009da0:	1ff80054 	.word	0x1ff80054

08009da4 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8009da8:	4b02      	ldr	r3, [pc, #8]	@ (8009db4 <HAL_GetUIDw2+0x10>)
 8009daa:	681b      	ldr	r3, [r3, #0]
}
 8009dac:	0018      	movs	r0, r3
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	46c0      	nop			@ (mov r8, r8)
 8009db4:	1ff80064 	.word	0x1ff80064

08009db8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d101      	bne.n	8009dca <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e159      	b.n	800a07e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d10a      	bne.n	8009de8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2250      	movs	r2, #80	@ 0x50
 8009ddc:	2100      	movs	r1, #0
 8009dde:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	0018      	movs	r0, r3
 8009de4:	f7fb fca0 	bl	8005728 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dec:	2210      	movs	r2, #16
 8009dee:	4013      	ands	r3, r2
 8009df0:	2b10      	cmp	r3, #16
 8009df2:	d005      	beq.n	8009e00 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	2204      	movs	r2, #4
 8009dfc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8009dfe:	d00b      	beq.n	8009e18 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e04:	2210      	movs	r2, #16
 8009e06:	431a      	orrs	r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2250      	movs	r2, #80	@ 0x50
 8009e10:	2100      	movs	r1, #0
 8009e12:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	e132      	b.n	800a07e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e1c:	4a9a      	ldr	r2, [pc, #616]	@ (800a088 <HAL_ADC_Init+0x2d0>)
 8009e1e:	4013      	ands	r3, r2
 8009e20:	2202      	movs	r2, #2
 8009e22:	431a      	orrs	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	2203      	movs	r2, #3
 8009e30:	4013      	ands	r3, r2
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d108      	bne.n	8009e48 <HAL_ADC_Init+0x90>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	4013      	ands	r3, r2
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d101      	bne.n	8009e48 <HAL_ADC_Init+0x90>
 8009e44:	2301      	movs	r3, #1
 8009e46:	e000      	b.n	8009e4a <HAL_ADC_Init+0x92>
 8009e48:	2300      	movs	r3, #0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d149      	bne.n	8009ee2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	685a      	ldr	r2, [r3, #4]
 8009e52:	23c0      	movs	r3, #192	@ 0xc0
 8009e54:	061b      	lsls	r3, r3, #24
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d00b      	beq.n	8009e72 <HAL_ADC_Init+0xba>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	685a      	ldr	r2, [r3, #4]
 8009e5e:	2380      	movs	r3, #128	@ 0x80
 8009e60:	05db      	lsls	r3, r3, #23
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d005      	beq.n	8009e72 <HAL_ADC_Init+0xba>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	685a      	ldr	r2, [r3, #4]
 8009e6a:	2380      	movs	r3, #128	@ 0x80
 8009e6c:	061b      	lsls	r3, r3, #24
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d111      	bne.n	8009e96 <HAL_ADC_Init+0xde>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	691a      	ldr	r2, [r3, #16]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	0092      	lsls	r2, r2, #2
 8009e7e:	0892      	lsrs	r2, r2, #2
 8009e80:	611a      	str	r2, [r3, #16]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	6919      	ldr	r1, [r3, #16]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	685a      	ldr	r2, [r3, #4]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	430a      	orrs	r2, r1
 8009e92:	611a      	str	r2, [r3, #16]
 8009e94:	e014      	b.n	8009ec0 <HAL_ADC_Init+0x108>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	691a      	ldr	r2, [r3, #16]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	0092      	lsls	r2, r2, #2
 8009ea2:	0892      	lsrs	r2, r2, #2
 8009ea4:	611a      	str	r2, [r3, #16]
 8009ea6:	4b79      	ldr	r3, [pc, #484]	@ (800a08c <HAL_ADC_Init+0x2d4>)
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	4b78      	ldr	r3, [pc, #480]	@ (800a08c <HAL_ADC_Init+0x2d4>)
 8009eac:	4978      	ldr	r1, [pc, #480]	@ (800a090 <HAL_ADC_Init+0x2d8>)
 8009eae:	400a      	ands	r2, r1
 8009eb0:	601a      	str	r2, [r3, #0]
 8009eb2:	4b76      	ldr	r3, [pc, #472]	@ (800a08c <HAL_ADC_Init+0x2d4>)
 8009eb4:	6819      	ldr	r1, [r3, #0]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	685a      	ldr	r2, [r3, #4]
 8009eba:	4b74      	ldr	r3, [pc, #464]	@ (800a08c <HAL_ADC_Init+0x2d4>)
 8009ebc:	430a      	orrs	r2, r1
 8009ebe:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	68da      	ldr	r2, [r3, #12]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2118      	movs	r1, #24
 8009ecc:	438a      	bics	r2, r1
 8009ece:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	68d9      	ldr	r1, [r3, #12]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	689a      	ldr	r2, [r3, #8]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	430a      	orrs	r2, r1
 8009ee0:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8009ee2:	4b6a      	ldr	r3, [pc, #424]	@ (800a08c <HAL_ADC_Init+0x2d4>)
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	4b69      	ldr	r3, [pc, #420]	@ (800a08c <HAL_ADC_Init+0x2d4>)
 8009ee8:	496a      	ldr	r1, [pc, #424]	@ (800a094 <HAL_ADC_Init+0x2dc>)
 8009eea:	400a      	ands	r2, r1
 8009eec:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8009eee:	4b67      	ldr	r3, [pc, #412]	@ (800a08c <HAL_ADC_Init+0x2d4>)
 8009ef0:	6819      	ldr	r1, [r3, #0]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ef6:	065a      	lsls	r2, r3, #25
 8009ef8:	4b64      	ldr	r3, [pc, #400]	@ (800a08c <HAL_ADC_Init+0x2d4>)
 8009efa:	430a      	orrs	r2, r1
 8009efc:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	689a      	ldr	r2, [r3, #8]
 8009f04:	2380      	movs	r3, #128	@ 0x80
 8009f06:	055b      	lsls	r3, r3, #21
 8009f08:	4013      	ands	r3, r2
 8009f0a:	d108      	bne.n	8009f1e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	689a      	ldr	r2, [r3, #8]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2180      	movs	r1, #128	@ 0x80
 8009f18:	0549      	lsls	r1, r1, #21
 8009f1a:	430a      	orrs	r2, r1
 8009f1c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	68da      	ldr	r2, [r3, #12]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	495b      	ldr	r1, [pc, #364]	@ (800a098 <HAL_ADC_Init+0x2e0>)
 8009f2a:	400a      	ands	r2, r1
 8009f2c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	68d9      	ldr	r1, [r3, #12]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	691b      	ldr	r3, [r3, #16]
 8009f3c:	2b02      	cmp	r3, #2
 8009f3e:	d101      	bne.n	8009f44 <HAL_ADC_Init+0x18c>
 8009f40:	2304      	movs	r3, #4
 8009f42:	e000      	b.n	8009f46 <HAL_ADC_Init+0x18e>
 8009f44:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8009f46:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2020      	movs	r0, #32
 8009f4c:	5c1b      	ldrb	r3, [r3, r0]
 8009f4e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8009f50:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	202c      	movs	r0, #44	@ 0x2c
 8009f56:	5c1b      	ldrb	r3, [r3, r0]
 8009f58:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8009f5a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8009f60:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	699b      	ldr	r3, [r3, #24]
 8009f66:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8009f68:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	69db      	ldr	r3, [r3, #28]
 8009f6e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8009f70:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	430a      	orrs	r2, r1
 8009f78:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f7e:	23c2      	movs	r3, #194	@ 0xc2
 8009f80:	33ff      	adds	r3, #255	@ 0xff
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d00b      	beq.n	8009f9e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68d9      	ldr	r1, [r3, #12]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8009f94:	431a      	orrs	r2, r3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	430a      	orrs	r2, r1
 8009f9c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2221      	movs	r2, #33	@ 0x21
 8009fa2:	5c9b      	ldrb	r3, [r3, r2]
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d11a      	bne.n	8009fde <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2220      	movs	r2, #32
 8009fac:	5c9b      	ldrb	r3, [r3, r2]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d109      	bne.n	8009fc6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	68da      	ldr	r2, [r3, #12]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2180      	movs	r1, #128	@ 0x80
 8009fbe:	0249      	lsls	r1, r1, #9
 8009fc0:	430a      	orrs	r2, r1
 8009fc2:	60da      	str	r2, [r3, #12]
 8009fc4:	e00b      	b.n	8009fde <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fca:	2220      	movs	r2, #32
 8009fcc:	431a      	orrs	r2, r3
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	431a      	orrs	r2, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d11f      	bne.n	800a026 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	691a      	ldr	r2, [r3, #16]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	492a      	ldr	r1, [pc, #168]	@ (800a09c <HAL_ADC_Init+0x2e4>)
 8009ff2:	400a      	ands	r2, r1
 8009ff4:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	6919      	ldr	r1, [r3, #16]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800a004:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800a00a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	430a      	orrs	r2, r1
 800a012:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	691a      	ldr	r2, [r3, #16]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2101      	movs	r1, #1
 800a020:	430a      	orrs	r2, r1
 800a022:	611a      	str	r2, [r3, #16]
 800a024:	e00e      	b.n	800a044 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	691b      	ldr	r3, [r3, #16]
 800a02c:	2201      	movs	r2, #1
 800a02e:	4013      	ands	r3, r2
 800a030:	2b01      	cmp	r3, #1
 800a032:	d107      	bne.n	800a044 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	691a      	ldr	r2, [r3, #16]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	2101      	movs	r1, #1
 800a040:	438a      	bics	r2, r1
 800a042:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	695a      	ldr	r2, [r3, #20]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2107      	movs	r1, #7
 800a050:	438a      	bics	r2, r1
 800a052:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	6959      	ldr	r1, [r3, #20]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	430a      	orrs	r2, r1
 800a064:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a070:	2203      	movs	r2, #3
 800a072:	4393      	bics	r3, r2
 800a074:	2201      	movs	r2, #1
 800a076:	431a      	orrs	r2, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	0018      	movs	r0, r3
 800a080:	46bd      	mov	sp, r7
 800a082:	b002      	add	sp, #8
 800a084:	bd80      	pop	{r7, pc}
 800a086:	46c0      	nop			@ (mov r8, r8)
 800a088:	fffffefd 	.word	0xfffffefd
 800a08c:	40012708 	.word	0x40012708
 800a090:	ffc3ffff 	.word	0xffc3ffff
 800a094:	fdffffff 	.word	0xfdffffff
 800a098:	fffe0219 	.word	0xfffe0219
 800a09c:	fffffc03 	.word	0xfffffc03

0800a0a0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800a0a0:	b590      	push	{r4, r7, lr}
 800a0a2:	b085      	sub	sp, #20
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a0a8:	230f      	movs	r3, #15
 800a0aa:	18fb      	adds	r3, r7, r3
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	2204      	movs	r2, #4
 800a0b8:	4013      	ands	r3, r2
 800a0ba:	d138      	bne.n	800a12e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2250      	movs	r2, #80	@ 0x50
 800a0c0:	5c9b      	ldrb	r3, [r3, r2]
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d101      	bne.n	800a0ca <HAL_ADC_Start+0x2a>
 800a0c6:	2302      	movs	r3, #2
 800a0c8:	e038      	b.n	800a13c <HAL_ADC_Start+0x9c>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2250      	movs	r2, #80	@ 0x50
 800a0ce:	2101      	movs	r1, #1
 800a0d0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	69db      	ldr	r3, [r3, #28]
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d007      	beq.n	800a0ea <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800a0da:	230f      	movs	r3, #15
 800a0dc:	18fc      	adds	r4, r7, r3
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	0018      	movs	r0, r3
 800a0e2:	f000 f95f 	bl	800a3a4 <ADC_Enable>
 800a0e6:	0003      	movs	r3, r0
 800a0e8:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800a0ea:	230f      	movs	r3, #15
 800a0ec:	18fb      	adds	r3, r7, r3
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d120      	bne.n	800a136 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0f8:	4a12      	ldr	r2, [pc, #72]	@ (800a144 <HAL_ADC_Start+0xa4>)
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	2280      	movs	r2, #128	@ 0x80
 800a0fe:	0052      	lsls	r2, r2, #1
 800a100:	431a      	orrs	r2, r3
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2250      	movs	r2, #80	@ 0x50
 800a110:	2100      	movs	r1, #0
 800a112:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	221c      	movs	r2, #28
 800a11a:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	689a      	ldr	r2, [r3, #8]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2104      	movs	r1, #4
 800a128:	430a      	orrs	r2, r1
 800a12a:	609a      	str	r2, [r3, #8]
 800a12c:	e003      	b.n	800a136 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a12e:	230f      	movs	r3, #15
 800a130:	18fb      	adds	r3, r7, r3
 800a132:	2202      	movs	r2, #2
 800a134:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800a136:	230f      	movs	r3, #15
 800a138:	18fb      	adds	r3, r7, r3
 800a13a:	781b      	ldrb	r3, [r3, #0]
}
 800a13c:	0018      	movs	r0, r3
 800a13e:	46bd      	mov	sp, r7
 800a140:	b005      	add	sp, #20
 800a142:	bd90      	pop	{r4, r7, pc}
 800a144:	fffff0fe 	.word	0xfffff0fe

0800a148 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a152:	2300      	movs	r3, #0
 800a154:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800a156:	2300      	movs	r3, #0
 800a158:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	695b      	ldr	r3, [r3, #20]
 800a15e:	2b08      	cmp	r3, #8
 800a160:	d102      	bne.n	800a168 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800a162:	2308      	movs	r3, #8
 800a164:	60fb      	str	r3, [r7, #12]
 800a166:	e014      	b.n	800a192 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	2201      	movs	r2, #1
 800a170:	4013      	ands	r3, r2
 800a172:	2b01      	cmp	r3, #1
 800a174:	d10b      	bne.n	800a18e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a17a:	2220      	movs	r2, #32
 800a17c:	431a      	orrs	r2, r3
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2250      	movs	r2, #80	@ 0x50
 800a186:	2100      	movs	r1, #0
 800a188:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	e072      	b.n	800a274 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800a18e:	230c      	movs	r3, #12
 800a190:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800a192:	f7ff fdc5 	bl	8009d20 <HAL_GetTick>
 800a196:	0003      	movs	r3, r0
 800a198:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800a19a:	e01f      	b.n	800a1dc <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	d01c      	beq.n	800a1dc <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d007      	beq.n	800a1b8 <HAL_ADC_PollForConversion+0x70>
 800a1a8:	f7ff fdba 	bl	8009d20 <HAL_GetTick>
 800a1ac:	0002      	movs	r2, r0
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	1ad3      	subs	r3, r2, r3
 800a1b2:	683a      	ldr	r2, [r7, #0]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d211      	bcs.n	800a1dc <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	68fa      	ldr	r2, [r7, #12]
 800a1c0:	4013      	ands	r3, r2
 800a1c2:	d10b      	bne.n	800a1dc <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1c8:	2204      	movs	r2, #4
 800a1ca:	431a      	orrs	r2, r3
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2250      	movs	r2, #80	@ 0x50
 800a1d4:	2100      	movs	r1, #0
 800a1d6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a1d8:	2303      	movs	r3, #3
 800a1da:	e04b      	b.n	800a274 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	68fa      	ldr	r2, [r7, #12]
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	d0d9      	beq.n	800a19c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1ec:	2280      	movs	r2, #128	@ 0x80
 800a1ee:	0092      	lsls	r2, r2, #2
 800a1f0:	431a      	orrs	r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	68da      	ldr	r2, [r3, #12]
 800a1fc:	23c0      	movs	r3, #192	@ 0xc0
 800a1fe:	011b      	lsls	r3, r3, #4
 800a200:	4013      	ands	r3, r2
 800a202:	d12e      	bne.n	800a262 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2220      	movs	r2, #32
 800a208:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d129      	bne.n	800a262 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2208      	movs	r2, #8
 800a216:	4013      	ands	r3, r2
 800a218:	2b08      	cmp	r3, #8
 800a21a:	d122      	bne.n	800a262 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	2204      	movs	r2, #4
 800a224:	4013      	ands	r3, r2
 800a226:	d110      	bne.n	800a24a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	685a      	ldr	r2, [r3, #4]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	210c      	movs	r1, #12
 800a234:	438a      	bics	r2, r1
 800a236:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a23c:	4a0f      	ldr	r2, [pc, #60]	@ (800a27c <HAL_ADC_PollForConversion+0x134>)
 800a23e:	4013      	ands	r3, r2
 800a240:	2201      	movs	r2, #1
 800a242:	431a      	orrs	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	655a      	str	r2, [r3, #84]	@ 0x54
 800a248:	e00b      	b.n	800a262 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a24e:	2220      	movs	r2, #32
 800a250:	431a      	orrs	r2, r3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a25a:	2201      	movs	r2, #1
 800a25c:	431a      	orrs	r2, r3
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	699b      	ldr	r3, [r3, #24]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d103      	bne.n	800a272 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	220c      	movs	r2, #12
 800a270:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a272:	2300      	movs	r3, #0
}
 800a274:	0018      	movs	r0, r3
 800a276:	46bd      	mov	sp, r7
 800a278:	b004      	add	sp, #16
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	fffffefe 	.word	0xfffffefe

0800a280 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800a28e:	0018      	movs	r0, r3
 800a290:	46bd      	mov	sp, r7
 800a292:	b002      	add	sp, #8
 800a294:	bd80      	pop	{r7, pc}
	...

0800a298 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2250      	movs	r2, #80	@ 0x50
 800a2a6:	5c9b      	ldrb	r3, [r3, r2]
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d101      	bne.n	800a2b0 <HAL_ADC_ConfigChannel+0x18>
 800a2ac:	2302      	movs	r3, #2
 800a2ae:	e06c      	b.n	800a38a <HAL_ADC_ConfigChannel+0xf2>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2250      	movs	r2, #80	@ 0x50
 800a2b4:	2101      	movs	r1, #1
 800a2b6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	2204      	movs	r2, #4
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	d00b      	beq.n	800a2dc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2c8:	2220      	movs	r2, #32
 800a2ca:	431a      	orrs	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2250      	movs	r2, #80	@ 0x50
 800a2d4:	2100      	movs	r1, #0
 800a2d6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e056      	b.n	800a38a <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	4a2c      	ldr	r2, [pc, #176]	@ (800a394 <HAL_ADC_ConfigChannel+0xfc>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d028      	beq.n	800a338 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	035b      	lsls	r3, r3, #13
 800a2f2:	0b5a      	lsrs	r2, r3, #13
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	430a      	orrs	r2, r1
 800a2fa:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	2380      	movs	r3, #128	@ 0x80
 800a302:	02db      	lsls	r3, r3, #11
 800a304:	4013      	ands	r3, r2
 800a306:	d009      	beq.n	800a31c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800a308:	4b23      	ldr	r3, [pc, #140]	@ (800a398 <HAL_ADC_ConfigChannel+0x100>)
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	4b22      	ldr	r3, [pc, #136]	@ (800a398 <HAL_ADC_ConfigChannel+0x100>)
 800a30e:	2180      	movs	r1, #128	@ 0x80
 800a310:	0409      	lsls	r1, r1, #16
 800a312:	430a      	orrs	r2, r1
 800a314:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800a316:	200a      	movs	r0, #10
 800a318:	f000 f8ac 	bl	800a474 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	2380      	movs	r3, #128	@ 0x80
 800a322:	029b      	lsls	r3, r3, #10
 800a324:	4013      	ands	r3, r2
 800a326:	d02b      	beq.n	800a380 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800a328:	4b1b      	ldr	r3, [pc, #108]	@ (800a398 <HAL_ADC_ConfigChannel+0x100>)
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	4b1a      	ldr	r3, [pc, #104]	@ (800a398 <HAL_ADC_ConfigChannel+0x100>)
 800a32e:	2180      	movs	r1, #128	@ 0x80
 800a330:	03c9      	lsls	r1, r1, #15
 800a332:	430a      	orrs	r2, r1
 800a334:	601a      	str	r2, [r3, #0]
 800a336:	e023      	b.n	800a380 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	035b      	lsls	r3, r3, #13
 800a344:	0b5b      	lsrs	r3, r3, #13
 800a346:	43d9      	mvns	r1, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	400a      	ands	r2, r1
 800a34e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	2380      	movs	r3, #128	@ 0x80
 800a356:	02db      	lsls	r3, r3, #11
 800a358:	4013      	ands	r3, r2
 800a35a:	d005      	beq.n	800a368 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800a35c:	4b0e      	ldr	r3, [pc, #56]	@ (800a398 <HAL_ADC_ConfigChannel+0x100>)
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	4b0d      	ldr	r3, [pc, #52]	@ (800a398 <HAL_ADC_ConfigChannel+0x100>)
 800a362:	490e      	ldr	r1, [pc, #56]	@ (800a39c <HAL_ADC_ConfigChannel+0x104>)
 800a364:	400a      	ands	r2, r1
 800a366:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	2380      	movs	r3, #128	@ 0x80
 800a36e:	029b      	lsls	r3, r3, #10
 800a370:	4013      	ands	r3, r2
 800a372:	d005      	beq.n	800a380 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800a374:	4b08      	ldr	r3, [pc, #32]	@ (800a398 <HAL_ADC_ConfigChannel+0x100>)
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	4b07      	ldr	r3, [pc, #28]	@ (800a398 <HAL_ADC_ConfigChannel+0x100>)
 800a37a:	4909      	ldr	r1, [pc, #36]	@ (800a3a0 <HAL_ADC_ConfigChannel+0x108>)
 800a37c:	400a      	ands	r2, r1
 800a37e:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2250      	movs	r2, #80	@ 0x50
 800a384:	2100      	movs	r1, #0
 800a386:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	0018      	movs	r0, r3
 800a38c:	46bd      	mov	sp, r7
 800a38e:	b002      	add	sp, #8
 800a390:	bd80      	pop	{r7, pc}
 800a392:	46c0      	nop			@ (mov r8, r8)
 800a394:	00001001 	.word	0x00001001
 800a398:	40012708 	.word	0x40012708
 800a39c:	ff7fffff 	.word	0xff7fffff
 800a3a0:	ffbfffff 	.word	0xffbfffff

0800a3a4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	2203      	movs	r2, #3
 800a3b8:	4013      	ands	r3, r2
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d108      	bne.n	800a3d0 <ADC_Enable+0x2c>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	4013      	ands	r3, r2
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d101      	bne.n	800a3d0 <ADC_Enable+0x2c>
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e000      	b.n	800a3d2 <ADC_Enable+0x2e>
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d146      	bne.n	800a464 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	4a24      	ldr	r2, [pc, #144]	@ (800a470 <ADC_Enable+0xcc>)
 800a3de:	4013      	ands	r3, r2
 800a3e0:	d00d      	beq.n	800a3fe <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3e6:	2210      	movs	r2, #16
 800a3e8:	431a      	orrs	r2, r3
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	431a      	orrs	r2, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e033      	b.n	800a466 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	689a      	ldr	r2, [r3, #8]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2101      	movs	r1, #1
 800a40a:	430a      	orrs	r2, r1
 800a40c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800a40e:	2001      	movs	r0, #1
 800a410:	f000 f830 	bl	800a474 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800a414:	f7ff fc84 	bl	8009d20 <HAL_GetTick>
 800a418:	0003      	movs	r3, r0
 800a41a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800a41c:	e01b      	b.n	800a456 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a41e:	f7ff fc7f 	bl	8009d20 <HAL_GetTick>
 800a422:	0002      	movs	r2, r0
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	1ad3      	subs	r3, r2, r3
 800a428:	2b0a      	cmp	r3, #10
 800a42a:	d914      	bls.n	800a456 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2201      	movs	r2, #1
 800a434:	4013      	ands	r3, r2
 800a436:	2b01      	cmp	r3, #1
 800a438:	d00d      	beq.n	800a456 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a43e:	2210      	movs	r2, #16
 800a440:	431a      	orrs	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a44a:	2201      	movs	r2, #1
 800a44c:	431a      	orrs	r2, r3
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800a452:	2301      	movs	r3, #1
 800a454:	e007      	b.n	800a466 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2201      	movs	r2, #1
 800a45e:	4013      	ands	r3, r2
 800a460:	2b01      	cmp	r3, #1
 800a462:	d1dc      	bne.n	800a41e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a464:	2300      	movs	r3, #0
}
 800a466:	0018      	movs	r0, r3
 800a468:	46bd      	mov	sp, r7
 800a46a:	b004      	add	sp, #16
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	46c0      	nop			@ (mov r8, r8)
 800a470:	80000017 	.word	0x80000017

0800a474 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800a47c:	4b0b      	ldr	r3, [pc, #44]	@ (800a4ac <ADC_DelayMicroSecond+0x38>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	490b      	ldr	r1, [pc, #44]	@ (800a4b0 <ADC_DelayMicroSecond+0x3c>)
 800a482:	0018      	movs	r0, r3
 800a484:	f7f5 fe5c 	bl	8000140 <__udivsi3>
 800a488:	0003      	movs	r3, r0
 800a48a:	001a      	movs	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4353      	muls	r3, r2
 800a490:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800a492:	e002      	b.n	800a49a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	3b01      	subs	r3, #1
 800a498:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d1f9      	bne.n	800a494 <ADC_DelayMicroSecond+0x20>
  }
}
 800a4a0:	46c0      	nop			@ (mov r8, r8)
 800a4a2:	46c0      	nop			@ (mov r8, r8)
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	b004      	add	sp, #16
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	46c0      	nop			@ (mov r8, r8)
 800a4ac:	20000094 	.word	0x20000094
 800a4b0:	000f4240 	.word	0x000f4240

0800a4b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	0002      	movs	r2, r0
 800a4bc:	1dfb      	adds	r3, r7, #7
 800a4be:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800a4c0:	1dfb      	adds	r3, r7, #7
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	2b7f      	cmp	r3, #127	@ 0x7f
 800a4c6:	d809      	bhi.n	800a4dc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a4c8:	1dfb      	adds	r3, r7, #7
 800a4ca:	781b      	ldrb	r3, [r3, #0]
 800a4cc:	001a      	movs	r2, r3
 800a4ce:	231f      	movs	r3, #31
 800a4d0:	401a      	ands	r2, r3
 800a4d2:	4b04      	ldr	r3, [pc, #16]	@ (800a4e4 <__NVIC_EnableIRQ+0x30>)
 800a4d4:	2101      	movs	r1, #1
 800a4d6:	4091      	lsls	r1, r2
 800a4d8:	000a      	movs	r2, r1
 800a4da:	601a      	str	r2, [r3, #0]
  }
}
 800a4dc:	46c0      	nop			@ (mov r8, r8)
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	b002      	add	sp, #8
 800a4e2:	bd80      	pop	{r7, pc}
 800a4e4:	e000e100 	.word	0xe000e100

0800a4e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a4e8:	b590      	push	{r4, r7, lr}
 800a4ea:	b083      	sub	sp, #12
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	0002      	movs	r2, r0
 800a4f0:	6039      	str	r1, [r7, #0]
 800a4f2:	1dfb      	adds	r3, r7, #7
 800a4f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800a4f6:	1dfb      	adds	r3, r7, #7
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	2b7f      	cmp	r3, #127	@ 0x7f
 800a4fc:	d828      	bhi.n	800a550 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a4fe:	4a2f      	ldr	r2, [pc, #188]	@ (800a5bc <__NVIC_SetPriority+0xd4>)
 800a500:	1dfb      	adds	r3, r7, #7
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	b25b      	sxtb	r3, r3
 800a506:	089b      	lsrs	r3, r3, #2
 800a508:	33c0      	adds	r3, #192	@ 0xc0
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	589b      	ldr	r3, [r3, r2]
 800a50e:	1dfa      	adds	r2, r7, #7
 800a510:	7812      	ldrb	r2, [r2, #0]
 800a512:	0011      	movs	r1, r2
 800a514:	2203      	movs	r2, #3
 800a516:	400a      	ands	r2, r1
 800a518:	00d2      	lsls	r2, r2, #3
 800a51a:	21ff      	movs	r1, #255	@ 0xff
 800a51c:	4091      	lsls	r1, r2
 800a51e:	000a      	movs	r2, r1
 800a520:	43d2      	mvns	r2, r2
 800a522:	401a      	ands	r2, r3
 800a524:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	019b      	lsls	r3, r3, #6
 800a52a:	22ff      	movs	r2, #255	@ 0xff
 800a52c:	401a      	ands	r2, r3
 800a52e:	1dfb      	adds	r3, r7, #7
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	0018      	movs	r0, r3
 800a534:	2303      	movs	r3, #3
 800a536:	4003      	ands	r3, r0
 800a538:	00db      	lsls	r3, r3, #3
 800a53a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a53c:	481f      	ldr	r0, [pc, #124]	@ (800a5bc <__NVIC_SetPriority+0xd4>)
 800a53e:	1dfb      	adds	r3, r7, #7
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	b25b      	sxtb	r3, r3
 800a544:	089b      	lsrs	r3, r3, #2
 800a546:	430a      	orrs	r2, r1
 800a548:	33c0      	adds	r3, #192	@ 0xc0
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800a54e:	e031      	b.n	800a5b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a550:	4a1b      	ldr	r2, [pc, #108]	@ (800a5c0 <__NVIC_SetPriority+0xd8>)
 800a552:	1dfb      	adds	r3, r7, #7
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	0019      	movs	r1, r3
 800a558:	230f      	movs	r3, #15
 800a55a:	400b      	ands	r3, r1
 800a55c:	3b08      	subs	r3, #8
 800a55e:	089b      	lsrs	r3, r3, #2
 800a560:	3306      	adds	r3, #6
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	18d3      	adds	r3, r2, r3
 800a566:	3304      	adds	r3, #4
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	1dfa      	adds	r2, r7, #7
 800a56c:	7812      	ldrb	r2, [r2, #0]
 800a56e:	0011      	movs	r1, r2
 800a570:	2203      	movs	r2, #3
 800a572:	400a      	ands	r2, r1
 800a574:	00d2      	lsls	r2, r2, #3
 800a576:	21ff      	movs	r1, #255	@ 0xff
 800a578:	4091      	lsls	r1, r2
 800a57a:	000a      	movs	r2, r1
 800a57c:	43d2      	mvns	r2, r2
 800a57e:	401a      	ands	r2, r3
 800a580:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	019b      	lsls	r3, r3, #6
 800a586:	22ff      	movs	r2, #255	@ 0xff
 800a588:	401a      	ands	r2, r3
 800a58a:	1dfb      	adds	r3, r7, #7
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	0018      	movs	r0, r3
 800a590:	2303      	movs	r3, #3
 800a592:	4003      	ands	r3, r0
 800a594:	00db      	lsls	r3, r3, #3
 800a596:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a598:	4809      	ldr	r0, [pc, #36]	@ (800a5c0 <__NVIC_SetPriority+0xd8>)
 800a59a:	1dfb      	adds	r3, r7, #7
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	001c      	movs	r4, r3
 800a5a0:	230f      	movs	r3, #15
 800a5a2:	4023      	ands	r3, r4
 800a5a4:	3b08      	subs	r3, #8
 800a5a6:	089b      	lsrs	r3, r3, #2
 800a5a8:	430a      	orrs	r2, r1
 800a5aa:	3306      	adds	r3, #6
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	18c3      	adds	r3, r0, r3
 800a5b0:	3304      	adds	r3, #4
 800a5b2:	601a      	str	r2, [r3, #0]
}
 800a5b4:	46c0      	nop			@ (mov r8, r8)
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	b003      	add	sp, #12
 800a5ba:	bd90      	pop	{r4, r7, pc}
 800a5bc:	e000e100 	.word	0xe000e100
 800a5c0:	e000ed00 	.word	0xe000ed00

0800a5c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	1e5a      	subs	r2, r3, #1
 800a5d0:	2380      	movs	r3, #128	@ 0x80
 800a5d2:	045b      	lsls	r3, r3, #17
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d301      	bcc.n	800a5dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e010      	b.n	800a5fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a5dc:	4b0a      	ldr	r3, [pc, #40]	@ (800a608 <SysTick_Config+0x44>)
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	3a01      	subs	r2, #1
 800a5e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	425b      	negs	r3, r3
 800a5e8:	2103      	movs	r1, #3
 800a5ea:	0018      	movs	r0, r3
 800a5ec:	f7ff ff7c 	bl	800a4e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a5f0:	4b05      	ldr	r3, [pc, #20]	@ (800a608 <SysTick_Config+0x44>)
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a5f6:	4b04      	ldr	r3, [pc, #16]	@ (800a608 <SysTick_Config+0x44>)
 800a5f8:	2207      	movs	r2, #7
 800a5fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	0018      	movs	r0, r3
 800a600:	46bd      	mov	sp, r7
 800a602:	b002      	add	sp, #8
 800a604:	bd80      	pop	{r7, pc}
 800a606:	46c0      	nop			@ (mov r8, r8)
 800a608:	e000e010 	.word	0xe000e010

0800a60c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	60b9      	str	r1, [r7, #8]
 800a614:	607a      	str	r2, [r7, #4]
 800a616:	210f      	movs	r1, #15
 800a618:	187b      	adds	r3, r7, r1
 800a61a:	1c02      	adds	r2, r0, #0
 800a61c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800a61e:	68ba      	ldr	r2, [r7, #8]
 800a620:	187b      	adds	r3, r7, r1
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	b25b      	sxtb	r3, r3
 800a626:	0011      	movs	r1, r2
 800a628:	0018      	movs	r0, r3
 800a62a:	f7ff ff5d 	bl	800a4e8 <__NVIC_SetPriority>
}
 800a62e:	46c0      	nop			@ (mov r8, r8)
 800a630:	46bd      	mov	sp, r7
 800a632:	b004      	add	sp, #16
 800a634:	bd80      	pop	{r7, pc}

0800a636 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a636:	b580      	push	{r7, lr}
 800a638:	b082      	sub	sp, #8
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	0002      	movs	r2, r0
 800a63e:	1dfb      	adds	r3, r7, #7
 800a640:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a642:	1dfb      	adds	r3, r7, #7
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	b25b      	sxtb	r3, r3
 800a648:	0018      	movs	r0, r3
 800a64a:	f7ff ff33 	bl	800a4b4 <__NVIC_EnableIRQ>
}
 800a64e:	46c0      	nop			@ (mov r8, r8)
 800a650:	46bd      	mov	sp, r7
 800a652:	b002      	add	sp, #8
 800a654:	bd80      	pop	{r7, pc}

0800a656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a656:	b580      	push	{r7, lr}
 800a658:	b082      	sub	sp, #8
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	0018      	movs	r0, r3
 800a662:	f7ff ffaf 	bl	800a5c4 <SysTick_Config>
 800a666:	0003      	movs	r3, r0
}
 800a668:	0018      	movs	r0, r3
 800a66a:	46bd      	mov	sp, r7
 800a66c:	b002      	add	sp, #8
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d101      	bne.n	800a682 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a67e:	2301      	movs	r3, #1
 800a680:	e061      	b.n	800a746 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a32      	ldr	r2, [pc, #200]	@ (800a750 <HAL_DMA_Init+0xe0>)
 800a688:	4694      	mov	ip, r2
 800a68a:	4463      	add	r3, ip
 800a68c:	2114      	movs	r1, #20
 800a68e:	0018      	movs	r0, r3
 800a690:	f7f5 fd56 	bl	8000140 <__udivsi3>
 800a694:	0003      	movs	r3, r0
 800a696:	009a      	lsls	r2, r3, #2
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	4a2d      	ldr	r2, [pc, #180]	@ (800a754 <HAL_DMA_Init+0xe4>)
 800a6a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2225      	movs	r2, #37	@ 0x25
 800a6a6:	2102      	movs	r1, #2
 800a6a8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	4a28      	ldr	r2, [pc, #160]	@ (800a758 <HAL_DMA_Init+0xe8>)
 800a6b6:	4013      	ands	r3, r2
 800a6b8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a6c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	699b      	ldr	r3, [r3, #24]
 800a6d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6a1b      	ldr	r3, [r3, #32]
 800a6e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a6e2:	68fa      	ldr	r2, [r7, #12]
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	689a      	ldr	r2, [r3, #8]
 800a6f4:	2380      	movs	r3, #128	@ 0x80
 800a6f6:	01db      	lsls	r3, r3, #7
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d018      	beq.n	800a72e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800a6fc:	4b17      	ldr	r3, [pc, #92]	@ (800a75c <HAL_DMA_Init+0xec>)
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a704:	211c      	movs	r1, #28
 800a706:	400b      	ands	r3, r1
 800a708:	210f      	movs	r1, #15
 800a70a:	4099      	lsls	r1, r3
 800a70c:	000b      	movs	r3, r1
 800a70e:	43d9      	mvns	r1, r3
 800a710:	4b12      	ldr	r3, [pc, #72]	@ (800a75c <HAL_DMA_Init+0xec>)
 800a712:	400a      	ands	r2, r1
 800a714:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800a716:	4b11      	ldr	r3, [pc, #68]	@ (800a75c <HAL_DMA_Init+0xec>)
 800a718:	6819      	ldr	r1, [r3, #0]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	685a      	ldr	r2, [r3, #4]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a722:	201c      	movs	r0, #28
 800a724:	4003      	ands	r3, r0
 800a726:	409a      	lsls	r2, r3
 800a728:	4b0c      	ldr	r3, [pc, #48]	@ (800a75c <HAL_DMA_Init+0xec>)
 800a72a:	430a      	orrs	r2, r1
 800a72c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2225      	movs	r2, #37	@ 0x25
 800a738:	2101      	movs	r1, #1
 800a73a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2224      	movs	r2, #36	@ 0x24
 800a740:	2100      	movs	r1, #0
 800a742:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a744:	2300      	movs	r3, #0
}
 800a746:	0018      	movs	r0, r3
 800a748:	46bd      	mov	sp, r7
 800a74a:	b004      	add	sp, #16
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	46c0      	nop			@ (mov r8, r8)
 800a750:	bffdfff8 	.word	0xbffdfff8
 800a754:	40020000 	.word	0x40020000
 800a758:	ffff800f 	.word	0xffff800f
 800a75c:	400200a8 	.word	0x400200a8

0800a760 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d101      	bne.n	800a772 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800a76e:	2301      	movs	r3, #1
 800a770:	e04a      	b.n	800a808 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2101      	movs	r1, #1
 800a77e:	438a      	bics	r2, r1
 800a780:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a22      	ldr	r2, [pc, #136]	@ (800a810 <HAL_DMA_DeInit+0xb0>)
 800a788:	4694      	mov	ip, r2
 800a78a:	4463      	add	r3, ip
 800a78c:	2114      	movs	r1, #20
 800a78e:	0018      	movs	r0, r3
 800a790:	f7f5 fcd6 	bl	8000140 <__udivsi3>
 800a794:	0003      	movs	r3, r0
 800a796:	009a      	lsls	r2, r3, #2
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4a1d      	ldr	r2, [pc, #116]	@ (800a814 <HAL_DMA_DeInit+0xb4>)
 800a7a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7ae:	221c      	movs	r2, #28
 800a7b0:	401a      	ands	r2, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7b6:	2101      	movs	r1, #1
 800a7b8:	4091      	lsls	r1, r2
 800a7ba:	000a      	movs	r2, r1
 800a7bc:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800a7be:	4b16      	ldr	r3, [pc, #88]	@ (800a818 <HAL_DMA_DeInit+0xb8>)
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7c6:	211c      	movs	r1, #28
 800a7c8:	400b      	ands	r3, r1
 800a7ca:	210f      	movs	r1, #15
 800a7cc:	4099      	lsls	r1, r3
 800a7ce:	000b      	movs	r3, r1
 800a7d0:	43d9      	mvns	r1, r3
 800a7d2:	4b11      	ldr	r3, [pc, #68]	@ (800a818 <HAL_DMA_DeInit+0xb8>)
 800a7d4:	400a      	ands	r2, r1
 800a7d6:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2225      	movs	r2, #37	@ 0x25
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2224      	movs	r2, #36	@ 0x24
 800a802:	2100      	movs	r1, #0
 800a804:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a806:	2300      	movs	r3, #0
}
 800a808:	0018      	movs	r0, r3
 800a80a:	46bd      	mov	sp, r7
 800a80c:	b002      	add	sp, #8
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	bffdfff8 	.word	0xbffdfff8
 800a814:	40020000 	.word	0x40020000
 800a818:	400200a8 	.word	0x400200a8

0800a81c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b086      	sub	sp, #24
 800a820:	af00      	add	r7, sp, #0
 800a822:	60f8      	str	r0, [r7, #12]
 800a824:	60b9      	str	r1, [r7, #8]
 800a826:	607a      	str	r2, [r7, #4]
 800a828:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a82a:	2317      	movs	r3, #23
 800a82c:	18fb      	adds	r3, r7, r3
 800a82e:	2200      	movs	r2, #0
 800a830:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2224      	movs	r2, #36	@ 0x24
 800a836:	5c9b      	ldrb	r3, [r3, r2]
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d101      	bne.n	800a840 <HAL_DMA_Start_IT+0x24>
 800a83c:	2302      	movs	r3, #2
 800a83e:	e04f      	b.n	800a8e0 <HAL_DMA_Start_IT+0xc4>
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2224      	movs	r2, #36	@ 0x24
 800a844:	2101      	movs	r1, #1
 800a846:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2225      	movs	r2, #37	@ 0x25
 800a84c:	5c9b      	ldrb	r3, [r3, r2]
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	2b01      	cmp	r3, #1
 800a852:	d13a      	bne.n	800a8ca <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2225      	movs	r2, #37	@ 0x25
 800a858:	2102      	movs	r1, #2
 800a85a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2200      	movs	r2, #0
 800a860:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	2101      	movs	r1, #1
 800a86e:	438a      	bics	r2, r1
 800a870:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	68b9      	ldr	r1, [r7, #8]
 800a878:	68f8      	ldr	r0, [r7, #12]
 800a87a:	f000 f976 	bl	800ab6a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a882:	2b00      	cmp	r3, #0
 800a884:	d008      	beq.n	800a898 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	210e      	movs	r1, #14
 800a892:	430a      	orrs	r2, r1
 800a894:	601a      	str	r2, [r3, #0]
 800a896:	e00f      	b.n	800a8b8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	2104      	movs	r1, #4
 800a8a4:	438a      	bics	r2, r1
 800a8a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	681a      	ldr	r2, [r3, #0]
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	210a      	movs	r1, #10
 800a8b4:	430a      	orrs	r2, r1
 800a8b6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	681a      	ldr	r2, [r3, #0]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	2101      	movs	r1, #1
 800a8c4:	430a      	orrs	r2, r1
 800a8c6:	601a      	str	r2, [r3, #0]
 800a8c8:	e007      	b.n	800a8da <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2224      	movs	r2, #36	@ 0x24
 800a8ce:	2100      	movs	r1, #0
 800a8d0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800a8d2:	2317      	movs	r3, #23
 800a8d4:	18fb      	adds	r3, r7, r3
 800a8d6:	2202      	movs	r2, #2
 800a8d8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800a8da:	2317      	movs	r3, #23
 800a8dc:	18fb      	adds	r3, r7, r3
 800a8de:	781b      	ldrb	r3, [r3, #0]
}
 800a8e0:	0018      	movs	r0, r3
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	b006      	add	sp, #24
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8f0:	230f      	movs	r3, #15
 800a8f2:	18fb      	adds	r3, r7, r3
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2225      	movs	r2, #37	@ 0x25
 800a8fc:	5c9b      	ldrb	r3, [r3, r2]
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	2b02      	cmp	r3, #2
 800a902:	d008      	beq.n	800a916 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2204      	movs	r2, #4
 800a908:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2224      	movs	r2, #36	@ 0x24
 800a90e:	2100      	movs	r1, #0
 800a910:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800a912:	2301      	movs	r3, #1
 800a914:	e024      	b.n	800a960 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	210e      	movs	r1, #14
 800a922:	438a      	bics	r2, r1
 800a924:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2101      	movs	r1, #1
 800a932:	438a      	bics	r2, r1
 800a934:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a93a:	221c      	movs	r2, #28
 800a93c:	401a      	ands	r2, r3
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a942:	2101      	movs	r1, #1
 800a944:	4091      	lsls	r1, r2
 800a946:	000a      	movs	r2, r1
 800a948:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2225      	movs	r2, #37	@ 0x25
 800a94e:	2101      	movs	r1, #1
 800a950:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2224      	movs	r2, #36	@ 0x24
 800a956:	2100      	movs	r1, #0
 800a958:	5499      	strb	r1, [r3, r2]

    return status;
 800a95a:	230f      	movs	r3, #15
 800a95c:	18fb      	adds	r3, r7, r3
 800a95e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a960:	0018      	movs	r0, r3
 800a962:	46bd      	mov	sp, r7
 800a964:	b004      	add	sp, #16
 800a966:	bd80      	pop	{r7, pc}

0800a968 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a970:	210f      	movs	r1, #15
 800a972:	187b      	adds	r3, r7, r1
 800a974:	2200      	movs	r2, #0
 800a976:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2225      	movs	r2, #37	@ 0x25
 800a97c:	5c9b      	ldrb	r3, [r3, r2]
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	2b02      	cmp	r3, #2
 800a982:	d006      	beq.n	800a992 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2204      	movs	r2, #4
 800a988:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800a98a:	187b      	adds	r3, r7, r1
 800a98c:	2201      	movs	r2, #1
 800a98e:	701a      	strb	r2, [r3, #0]
 800a990:	e02a      	b.n	800a9e8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	210e      	movs	r1, #14
 800a99e:	438a      	bics	r2, r1
 800a9a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	2101      	movs	r1, #1
 800a9ae:	438a      	bics	r2, r1
 800a9b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9b6:	221c      	movs	r2, #28
 800a9b8:	401a      	ands	r2, r3
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9be:	2101      	movs	r1, #1
 800a9c0:	4091      	lsls	r1, r2
 800a9c2:	000a      	movs	r2, r1
 800a9c4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2225      	movs	r2, #37	@ 0x25
 800a9ca:	2101      	movs	r1, #1
 800a9cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2224      	movs	r2, #36	@ 0x24
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d004      	beq.n	800a9e8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	0010      	movs	r0, r2
 800a9e6:	4798      	blx	r3
    }
  }
  return status;
 800a9e8:	230f      	movs	r3, #15
 800a9ea:	18fb      	adds	r3, r7, r3
 800a9ec:	781b      	ldrb	r3, [r3, #0]
}
 800a9ee:	0018      	movs	r0, r3
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	b004      	add	sp, #16
 800a9f4:	bd80      	pop	{r7, pc}

0800a9f6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b084      	sub	sp, #16
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa12:	221c      	movs	r2, #28
 800aa14:	4013      	ands	r3, r2
 800aa16:	2204      	movs	r2, #4
 800aa18:	409a      	lsls	r2, r3
 800aa1a:	0013      	movs	r3, r2
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	4013      	ands	r3, r2
 800aa20:	d026      	beq.n	800aa70 <HAL_DMA_IRQHandler+0x7a>
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	2204      	movs	r2, #4
 800aa26:	4013      	ands	r3, r2
 800aa28:	d022      	beq.n	800aa70 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2220      	movs	r2, #32
 800aa32:	4013      	ands	r3, r2
 800aa34:	d107      	bne.n	800aa46 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2104      	movs	r1, #4
 800aa42:	438a      	bics	r2, r1
 800aa44:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa4a:	221c      	movs	r2, #28
 800aa4c:	401a      	ands	r2, r3
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa52:	2104      	movs	r1, #4
 800aa54:	4091      	lsls	r1, r2
 800aa56:	000a      	movs	r2, r1
 800aa58:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d100      	bne.n	800aa64 <HAL_DMA_IRQHandler+0x6e>
 800aa62:	e071      	b.n	800ab48 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	0010      	movs	r0, r2
 800aa6c:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800aa6e:	e06b      	b.n	800ab48 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa74:	221c      	movs	r2, #28
 800aa76:	4013      	ands	r3, r2
 800aa78:	2202      	movs	r2, #2
 800aa7a:	409a      	lsls	r2, r3
 800aa7c:	0013      	movs	r3, r2
 800aa7e:	68fa      	ldr	r2, [r7, #12]
 800aa80:	4013      	ands	r3, r2
 800aa82:	d02d      	beq.n	800aae0 <HAL_DMA_IRQHandler+0xea>
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	2202      	movs	r2, #2
 800aa88:	4013      	ands	r3, r2
 800aa8a:	d029      	beq.n	800aae0 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	2220      	movs	r2, #32
 800aa94:	4013      	ands	r3, r2
 800aa96:	d10b      	bne.n	800aab0 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	210a      	movs	r1, #10
 800aaa4:	438a      	bics	r2, r1
 800aaa6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2225      	movs	r2, #37	@ 0x25
 800aaac:	2101      	movs	r1, #1
 800aaae:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aab4:	221c      	movs	r2, #28
 800aab6:	401a      	ands	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aabc:	2102      	movs	r1, #2
 800aabe:	4091      	lsls	r1, r2
 800aac0:	000a      	movs	r2, r1
 800aac2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2224      	movs	r2, #36	@ 0x24
 800aac8:	2100      	movs	r1, #0
 800aaca:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d039      	beq.n	800ab48 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	0010      	movs	r0, r2
 800aadc:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800aade:	e033      	b.n	800ab48 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aae4:	221c      	movs	r2, #28
 800aae6:	4013      	ands	r3, r2
 800aae8:	2208      	movs	r2, #8
 800aaea:	409a      	lsls	r2, r3
 800aaec:	0013      	movs	r3, r2
 800aaee:	68fa      	ldr	r2, [r7, #12]
 800aaf0:	4013      	ands	r3, r2
 800aaf2:	d02a      	beq.n	800ab4a <HAL_DMA_IRQHandler+0x154>
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	2208      	movs	r2, #8
 800aaf8:	4013      	ands	r3, r2
 800aafa:	d026      	beq.n	800ab4a <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	210e      	movs	r1, #14
 800ab08:	438a      	bics	r2, r1
 800ab0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab10:	221c      	movs	r2, #28
 800ab12:	401a      	ands	r2, r3
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab18:	2101      	movs	r1, #1
 800ab1a:	4091      	lsls	r1, r2
 800ab1c:	000a      	movs	r2, r1
 800ab1e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2201      	movs	r2, #1
 800ab24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2225      	movs	r2, #37	@ 0x25
 800ab2a:	2101      	movs	r1, #1
 800ab2c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2224      	movs	r2, #36	@ 0x24
 800ab32:	2100      	movs	r1, #0
 800ab34:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d005      	beq.n	800ab4a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	0010      	movs	r0, r2
 800ab46:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800ab48:	46c0      	nop			@ (mov r8, r8)
 800ab4a:	46c0      	nop			@ (mov r8, r8)
}
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	b004      	add	sp, #16
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b082      	sub	sp, #8
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2225      	movs	r2, #37	@ 0x25
 800ab5e:	5c9b      	ldrb	r3, [r3, r2]
 800ab60:	b2db      	uxtb	r3, r3
}
 800ab62:	0018      	movs	r0, r3
 800ab64:	46bd      	mov	sp, r7
 800ab66:	b002      	add	sp, #8
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ab6a:	b580      	push	{r7, lr}
 800ab6c:	b084      	sub	sp, #16
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	60f8      	str	r0, [r7, #12]
 800ab72:	60b9      	str	r1, [r7, #8]
 800ab74:	607a      	str	r2, [r7, #4]
 800ab76:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab7c:	221c      	movs	r2, #28
 800ab7e:	401a      	ands	r2, r3
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab84:	2101      	movs	r1, #1
 800ab86:	4091      	lsls	r1, r2
 800ab88:	000a      	movs	r2, r1
 800ab8a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	683a      	ldr	r2, [r7, #0]
 800ab92:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	2b10      	cmp	r3, #16
 800ab9a:	d108      	bne.n	800abae <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	68ba      	ldr	r2, [r7, #8]
 800abaa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800abac:	e007      	b.n	800abbe <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	68ba      	ldr	r2, [r7, #8]
 800abb4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	60da      	str	r2, [r3, #12]
}
 800abbe:	46c0      	nop			@ (mov r8, r8)
 800abc0:	46bd      	mov	sp, r7
 800abc2:	b004      	add	sp, #16
 800abc4:	bd80      	pop	{r7, pc}
	...

0800abc8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800abd0:	f7ff f8a6 	bl	8009d20 <HAL_GetTick>
 800abd4:	0003      	movs	r3, r0
 800abd6:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800abd8:	e00f      	b.n	800abfa <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	3301      	adds	r3, #1
 800abde:	d00c      	beq.n	800abfa <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d007      	beq.n	800abf6 <FLASH_WaitForLastOperation+0x2e>
 800abe6:	f7ff f89b 	bl	8009d20 <HAL_GetTick>
 800abea:	0002      	movs	r2, r0
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	1ad3      	subs	r3, r2, r3
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d201      	bcs.n	800abfa <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800abf6:	2303      	movs	r3, #3
 800abf8:	e052      	b.n	800aca0 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800abfa:	4b2b      	ldr	r3, [pc, #172]	@ (800aca8 <FLASH_WaitForLastOperation+0xe0>)
 800abfc:	699b      	ldr	r3, [r3, #24]
 800abfe:	2201      	movs	r2, #1
 800ac00:	4013      	ands	r3, r2
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d0e9      	beq.n	800abda <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800ac06:	4b28      	ldr	r3, [pc, #160]	@ (800aca8 <FLASH_WaitForLastOperation+0xe0>)
 800ac08:	699b      	ldr	r3, [r3, #24]
 800ac0a:	2202      	movs	r2, #2
 800ac0c:	4013      	ands	r3, r2
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	d102      	bne.n	800ac18 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ac12:	4b25      	ldr	r3, [pc, #148]	@ (800aca8 <FLASH_WaitForLastOperation+0xe0>)
 800ac14:	2202      	movs	r2, #2
 800ac16:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800ac18:	4b23      	ldr	r3, [pc, #140]	@ (800aca8 <FLASH_WaitForLastOperation+0xe0>)
 800ac1a:	699a      	ldr	r2, [r3, #24]
 800ac1c:	2380      	movs	r3, #128	@ 0x80
 800ac1e:	005b      	lsls	r3, r3, #1
 800ac20:	401a      	ands	r2, r3
 800ac22:	2380      	movs	r3, #128	@ 0x80
 800ac24:	005b      	lsls	r3, r3, #1
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d035      	beq.n	800ac96 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800ac2a:	4b1f      	ldr	r3, [pc, #124]	@ (800aca8 <FLASH_WaitForLastOperation+0xe0>)
 800ac2c:	699a      	ldr	r2, [r3, #24]
 800ac2e:	2380      	movs	r3, #128	@ 0x80
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800ac34:	2380      	movs	r3, #128	@ 0x80
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d02c      	beq.n	800ac96 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800ac3c:	4b1a      	ldr	r3, [pc, #104]	@ (800aca8 <FLASH_WaitForLastOperation+0xe0>)
 800ac3e:	699a      	ldr	r2, [r3, #24]
 800ac40:	2380      	movs	r3, #128	@ 0x80
 800ac42:	00db      	lsls	r3, r3, #3
 800ac44:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800ac46:	2380      	movs	r3, #128	@ 0x80
 800ac48:	00db      	lsls	r3, r3, #3
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d023      	beq.n	800ac96 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800ac4e:	4b16      	ldr	r3, [pc, #88]	@ (800aca8 <FLASH_WaitForLastOperation+0xe0>)
 800ac50:	699a      	ldr	r2, [r3, #24]
 800ac52:	2380      	movs	r3, #128	@ 0x80
 800ac54:	011b      	lsls	r3, r3, #4
 800ac56:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800ac58:	2380      	movs	r3, #128	@ 0x80
 800ac5a:	011b      	lsls	r3, r3, #4
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d01a      	beq.n	800ac96 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800ac60:	4b11      	ldr	r3, [pc, #68]	@ (800aca8 <FLASH_WaitForLastOperation+0xe0>)
 800ac62:	699a      	ldr	r2, [r3, #24]
 800ac64:	2380      	movs	r3, #128	@ 0x80
 800ac66:	019b      	lsls	r3, r3, #6
 800ac68:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800ac6a:	2380      	movs	r3, #128	@ 0x80
 800ac6c:	019b      	lsls	r3, r3, #6
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d011      	beq.n	800ac96 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800ac72:	4b0d      	ldr	r3, [pc, #52]	@ (800aca8 <FLASH_WaitForLastOperation+0xe0>)
 800ac74:	699a      	ldr	r2, [r3, #24]
 800ac76:	2380      	movs	r3, #128	@ 0x80
 800ac78:	029b      	lsls	r3, r3, #10
 800ac7a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800ac7c:	2380      	movs	r3, #128	@ 0x80
 800ac7e:	029b      	lsls	r3, r3, #10
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d008      	beq.n	800ac96 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800ac84:	4b08      	ldr	r3, [pc, #32]	@ (800aca8 <FLASH_WaitForLastOperation+0xe0>)
 800ac86:	699a      	ldr	r2, [r3, #24]
 800ac88:	2380      	movs	r3, #128	@ 0x80
 800ac8a:	025b      	lsls	r3, r3, #9
 800ac8c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800ac8e:	2380      	movs	r3, #128	@ 0x80
 800ac90:	025b      	lsls	r3, r3, #9
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d103      	bne.n	800ac9e <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800ac96:	f000 f809 	bl	800acac <FLASH_SetErrorCode>
    return HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e000      	b.n	800aca0 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800ac9e:	2300      	movs	r3, #0
}
 800aca0:	0018      	movs	r0, r3
 800aca2:	46bd      	mov	sp, r7
 800aca4:	b004      	add	sp, #16
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	40022000 	.word	0x40022000

0800acac <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800acb2:	2300      	movs	r3, #0
 800acb4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800acb6:	4b49      	ldr	r3, [pc, #292]	@ (800addc <FLASH_SetErrorCode+0x130>)
 800acb8:	699a      	ldr	r2, [r3, #24]
 800acba:	2380      	movs	r3, #128	@ 0x80
 800acbc:	005b      	lsls	r3, r3, #1
 800acbe:	401a      	ands	r2, r3
 800acc0:	2380      	movs	r3, #128	@ 0x80
 800acc2:	005b      	lsls	r3, r3, #1
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d10a      	bne.n	800acde <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800acc8:	4b45      	ldr	r3, [pc, #276]	@ (800ade0 <FLASH_SetErrorCode+0x134>)
 800acca:	695b      	ldr	r3, [r3, #20]
 800accc:	2202      	movs	r2, #2
 800acce:	431a      	orrs	r2, r3
 800acd0:	4b43      	ldr	r3, [pc, #268]	@ (800ade0 <FLASH_SetErrorCode+0x134>)
 800acd2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2280      	movs	r2, #128	@ 0x80
 800acd8:	0052      	lsls	r2, r2, #1
 800acda:	4313      	orrs	r3, r2
 800acdc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800acde:	4b3f      	ldr	r3, [pc, #252]	@ (800addc <FLASH_SetErrorCode+0x130>)
 800ace0:	699a      	ldr	r2, [r3, #24]
 800ace2:	2380      	movs	r3, #128	@ 0x80
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	401a      	ands	r2, r3
 800ace8:	2380      	movs	r3, #128	@ 0x80
 800acea:	009b      	lsls	r3, r3, #2
 800acec:	429a      	cmp	r2, r3
 800acee:	d10a      	bne.n	800ad06 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800acf0:	4b3b      	ldr	r3, [pc, #236]	@ (800ade0 <FLASH_SetErrorCode+0x134>)
 800acf2:	695b      	ldr	r3, [r3, #20]
 800acf4:	2201      	movs	r2, #1
 800acf6:	431a      	orrs	r2, r3
 800acf8:	4b39      	ldr	r3, [pc, #228]	@ (800ade0 <FLASH_SetErrorCode+0x134>)
 800acfa:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2280      	movs	r2, #128	@ 0x80
 800ad00:	0092      	lsls	r2, r2, #2
 800ad02:	4313      	orrs	r3, r2
 800ad04:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800ad06:	4b35      	ldr	r3, [pc, #212]	@ (800addc <FLASH_SetErrorCode+0x130>)
 800ad08:	699a      	ldr	r2, [r3, #24]
 800ad0a:	2380      	movs	r3, #128	@ 0x80
 800ad0c:	00db      	lsls	r3, r3, #3
 800ad0e:	401a      	ands	r2, r3
 800ad10:	2380      	movs	r3, #128	@ 0x80
 800ad12:	00db      	lsls	r3, r3, #3
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d10a      	bne.n	800ad2e <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800ad18:	4b31      	ldr	r3, [pc, #196]	@ (800ade0 <FLASH_SetErrorCode+0x134>)
 800ad1a:	695b      	ldr	r3, [r3, #20]
 800ad1c:	2208      	movs	r2, #8
 800ad1e:	431a      	orrs	r2, r3
 800ad20:	4b2f      	ldr	r3, [pc, #188]	@ (800ade0 <FLASH_SetErrorCode+0x134>)
 800ad22:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2280      	movs	r2, #128	@ 0x80
 800ad28:	00d2      	lsls	r2, r2, #3
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800ad2e:	4b2b      	ldr	r3, [pc, #172]	@ (800addc <FLASH_SetErrorCode+0x130>)
 800ad30:	699a      	ldr	r2, [r3, #24]
 800ad32:	2380      	movs	r3, #128	@ 0x80
 800ad34:	011b      	lsls	r3, r3, #4
 800ad36:	401a      	ands	r2, r3
 800ad38:	2380      	movs	r3, #128	@ 0x80
 800ad3a:	011b      	lsls	r3, r3, #4
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d10a      	bne.n	800ad56 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800ad40:	4b27      	ldr	r3, [pc, #156]	@ (800ade0 <FLASH_SetErrorCode+0x134>)
 800ad42:	695b      	ldr	r3, [r3, #20]
 800ad44:	2204      	movs	r2, #4
 800ad46:	431a      	orrs	r2, r3
 800ad48:	4b25      	ldr	r3, [pc, #148]	@ (800ade0 <FLASH_SetErrorCode+0x134>)
 800ad4a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2280      	movs	r2, #128	@ 0x80
 800ad50:	0112      	lsls	r2, r2, #4
 800ad52:	4313      	orrs	r3, r2
 800ad54:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800ad56:	4b21      	ldr	r3, [pc, #132]	@ (800addc <FLASH_SetErrorCode+0x130>)
 800ad58:	699a      	ldr	r2, [r3, #24]
 800ad5a:	2380      	movs	r3, #128	@ 0x80
 800ad5c:	019b      	lsls	r3, r3, #6
 800ad5e:	401a      	ands	r2, r3
 800ad60:	2380      	movs	r3, #128	@ 0x80
 800ad62:	019b      	lsls	r3, r3, #6
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d10a      	bne.n	800ad7e <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800ad68:	4b1d      	ldr	r3, [pc, #116]	@ (800ade0 <FLASH_SetErrorCode+0x134>)
 800ad6a:	695b      	ldr	r3, [r3, #20]
 800ad6c:	2210      	movs	r2, #16
 800ad6e:	431a      	orrs	r2, r3
 800ad70:	4b1b      	ldr	r3, [pc, #108]	@ (800ade0 <FLASH_SetErrorCode+0x134>)
 800ad72:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2280      	movs	r2, #128	@ 0x80
 800ad78:	0192      	lsls	r2, r2, #6
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800ad7e:	4b17      	ldr	r3, [pc, #92]	@ (800addc <FLASH_SetErrorCode+0x130>)
 800ad80:	699a      	ldr	r2, [r3, #24]
 800ad82:	2380      	movs	r3, #128	@ 0x80
 800ad84:	029b      	lsls	r3, r3, #10
 800ad86:	401a      	ands	r2, r3
 800ad88:	2380      	movs	r3, #128	@ 0x80
 800ad8a:	029b      	lsls	r3, r3, #10
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d109      	bne.n	800ada4 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800ad90:	4b13      	ldr	r3, [pc, #76]	@ (800ade0 <FLASH_SetErrorCode+0x134>)
 800ad92:	695b      	ldr	r3, [r3, #20]
 800ad94:	2220      	movs	r2, #32
 800ad96:	431a      	orrs	r2, r3
 800ad98:	4b11      	ldr	r3, [pc, #68]	@ (800ade0 <FLASH_SetErrorCode+0x134>)
 800ad9a:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2220      	movs	r2, #32
 800ada0:	4313      	orrs	r3, r2
 800ada2:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800ada4:	4b0d      	ldr	r3, [pc, #52]	@ (800addc <FLASH_SetErrorCode+0x130>)
 800ada6:	699a      	ldr	r2, [r3, #24]
 800ada8:	2380      	movs	r3, #128	@ 0x80
 800adaa:	025b      	lsls	r3, r3, #9
 800adac:	401a      	ands	r2, r3
 800adae:	2380      	movs	r3, #128	@ 0x80
 800adb0:	025b      	lsls	r3, r3, #9
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d10a      	bne.n	800adcc <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800adb6:	4b0a      	ldr	r3, [pc, #40]	@ (800ade0 <FLASH_SetErrorCode+0x134>)
 800adb8:	695b      	ldr	r3, [r3, #20]
 800adba:	2240      	movs	r2, #64	@ 0x40
 800adbc:	431a      	orrs	r2, r3
 800adbe:	4b08      	ldr	r3, [pc, #32]	@ (800ade0 <FLASH_SetErrorCode+0x134>)
 800adc0:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2280      	movs	r2, #128	@ 0x80
 800adc6:	0252      	lsls	r2, r2, #9
 800adc8:	4313      	orrs	r3, r2
 800adca:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800adcc:	4b03      	ldr	r3, [pc, #12]	@ (800addc <FLASH_SetErrorCode+0x130>)
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	619a      	str	r2, [r3, #24]
}  
 800add2:	46c0      	nop			@ (mov r8, r8)
 800add4:	46bd      	mov	sp, r7
 800add6:	b002      	add	sp, #8
 800add8:	bd80      	pop	{r7, pc}
 800adda:	46c0      	nop			@ (mov r8, r8)
 800addc:	40022000 	.word	0x40022000
 800ade0:	20002b14 	.word	0x20002b14

0800ade4 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800adea:	4b12      	ldr	r3, [pc, #72]	@ (800ae34 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	2201      	movs	r2, #1
 800adf0:	4013      	ands	r3, r2
 800adf2:	d019      	beq.n	800ae28 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800adf4:	f3ef 8310 	mrs	r3, PRIMASK
 800adf8:	607b      	str	r3, [r7, #4]
  return(result);
 800adfa:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800adfc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800adfe:	b672      	cpsid	i
}
 800ae00:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800ae02:	4b0c      	ldr	r3, [pc, #48]	@ (800ae34 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ae04:	4a0c      	ldr	r2, [pc, #48]	@ (800ae38 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800ae06:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800ae08:	4b0a      	ldr	r3, [pc, #40]	@ (800ae34 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ae0a:	4a0c      	ldr	r2, [pc, #48]	@ (800ae3c <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800ae0c:	60da      	str	r2, [r3, #12]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	f383 8810 	msr	PRIMASK, r3
}
 800ae18:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800ae1a:	4b06      	ldr	r3, [pc, #24]	@ (800ae34 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	4013      	ands	r3, r2
 800ae22:	d001      	beq.n	800ae28 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800ae24:	2301      	movs	r3, #1
 800ae26:	e000      	b.n	800ae2a <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800ae28:	2300      	movs	r3, #0
}
 800ae2a:	0018      	movs	r0, r3
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	b004      	add	sp, #16
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	46c0      	nop			@ (mov r8, r8)
 800ae34:	40022000 	.word	0x40022000
 800ae38:	89abcdef 	.word	0x89abcdef
 800ae3c:	02030405 	.word	0x02030405

0800ae40 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800ae44:	4b04      	ldr	r3, [pc, #16]	@ (800ae58 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800ae46:	685a      	ldr	r2, [r3, #4]
 800ae48:	4b03      	ldr	r3, [pc, #12]	@ (800ae58 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800ae4a:	2101      	movs	r1, #1
 800ae4c:	430a      	orrs	r2, r1
 800ae4e:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800ae50:	2300      	movs	r3, #0
}
 800ae52:	0018      	movs	r0, r3
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	40022000 	.word	0x40022000

0800ae5c <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800ae5c:	b5b0      	push	{r4, r5, r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae64:	250f      	movs	r5, #15
 800ae66:	197b      	adds	r3, r7, r5
 800ae68:	2200      	movs	r2, #0
 800ae6a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ae6c:	197c      	adds	r4, r7, r5
 800ae6e:	4b0f      	ldr	r3, [pc, #60]	@ (800aeac <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800ae70:	0018      	movs	r0, r3
 800ae72:	f7ff fea9 	bl	800abc8 <FLASH_WaitForLastOperation>
 800ae76:	0003      	movs	r3, r0
 800ae78:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800ae7a:	0029      	movs	r1, r5
 800ae7c:	187b      	adds	r3, r7, r1
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d10c      	bne.n	800ae9e <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ae84:	4b0a      	ldr	r3, [pc, #40]	@ (800aeb0 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800ae86:	2200      	movs	r2, #0
 800ae88:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ae90:	187c      	adds	r4, r7, r1
 800ae92:	4b06      	ldr	r3, [pc, #24]	@ (800aeac <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800ae94:	0018      	movs	r0, r3
 800ae96:	f7ff fe97 	bl	800abc8 <FLASH_WaitForLastOperation>
 800ae9a:	0003      	movs	r3, r0
 800ae9c:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800ae9e:	230f      	movs	r3, #15
 800aea0:	18fb      	adds	r3, r7, r3
 800aea2:	781b      	ldrb	r3, [r3, #0]
}  
 800aea4:	0018      	movs	r0, r3
 800aea6:	46bd      	mov	sp, r7
 800aea8:	b004      	add	sp, #16
 800aeaa:	bdb0      	pop	{r4, r5, r7, pc}
 800aeac:	0000c350 	.word	0x0000c350
 800aeb0:	20002b14 	.word	0x20002b14

0800aeb4 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800aeb4:	b5b0      	push	{r4, r5, r7, lr}
 800aeb6:	b086      	sub	sp, #24
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800aec0:	2317      	movs	r3, #23
 800aec2:	18fb      	adds	r3, r7, r3
 800aec4:	2201      	movs	r2, #1
 800aec6:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800aec8:	4b24      	ldr	r3, [pc, #144]	@ (800af5c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800aeca:	7c1b      	ldrb	r3, [r3, #16]
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d101      	bne.n	800aed4 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800aed0:	2302      	movs	r3, #2
 800aed2:	e03e      	b.n	800af52 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800aed4:	4b21      	ldr	r3, [pc, #132]	@ (800af5c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800aed6:	2201      	movs	r2, #1
 800aed8:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800aeda:	2517      	movs	r5, #23
 800aedc:	197c      	adds	r4, r7, r5
 800aede:	4b20      	ldr	r3, [pc, #128]	@ (800af60 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800aee0:	0018      	movs	r0, r3
 800aee2:	f7ff fe71 	bl	800abc8 <FLASH_WaitForLastOperation>
 800aee6:	0003      	movs	r3, r0
 800aee8:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800aeea:	197b      	adds	r3, r7, r5
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d129      	bne.n	800af46 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800aef2:	4b1a      	ldr	r3, [pc, #104]	@ (800af5c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800aef4:	2200      	movs	r2, #0
 800aef6:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2b02      	cmp	r3, #2
 800aefc:	d103      	bne.n	800af06 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	687a      	ldr	r2, [r7, #4]
 800af02:	601a      	str	r2, [r3, #0]
 800af04:	e013      	b.n	800af2e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d104      	bne.n	800af16 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	b292      	uxth	r2, r2
 800af12:	801a      	strh	r2, [r3, #0]
 800af14:	e00b      	b.n	800af2e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d104      	bne.n	800af26 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	b2d2      	uxtb	r2, r2
 800af22:	701a      	strb	r2, [r3, #0]
 800af24:	e003      	b.n	800af2e <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800af26:	2317      	movs	r3, #23
 800af28:	18fb      	adds	r3, r7, r3
 800af2a:	2201      	movs	r2, #1
 800af2c:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800af2e:	2217      	movs	r2, #23
 800af30:	18bb      	adds	r3, r7, r2
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d106      	bne.n	800af46 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800af38:	18bc      	adds	r4, r7, r2
 800af3a:	4b09      	ldr	r3, [pc, #36]	@ (800af60 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800af3c:	0018      	movs	r0, r3
 800af3e:	f7ff fe43 	bl	800abc8 <FLASH_WaitForLastOperation>
 800af42:	0003      	movs	r3, r0
 800af44:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800af46:	4b05      	ldr	r3, [pc, #20]	@ (800af5c <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800af48:	2200      	movs	r2, #0
 800af4a:	741a      	strb	r2, [r3, #16]

  return status;
 800af4c:	2317      	movs	r3, #23
 800af4e:	18fb      	adds	r3, r7, r3
 800af50:	781b      	ldrb	r3, [r3, #0]
}
 800af52:	0018      	movs	r0, r3
 800af54:	46bd      	mov	sp, r7
 800af56:	b006      	add	sp, #24
 800af58:	bdb0      	pop	{r4, r5, r7, pc}
 800af5a:	46c0      	nop			@ (mov r8, r8)
 800af5c:	20002b14 	.word	0x20002b14
 800af60:	0000c350 	.word	0x0000c350

0800af64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b086      	sub	sp, #24
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800af6e:	2300      	movs	r3, #0
 800af70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800af72:	2300      	movs	r3, #0
 800af74:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800af76:	2300      	movs	r3, #0
 800af78:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800af7a:	e155      	b.n	800b228 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2101      	movs	r1, #1
 800af82:	697a      	ldr	r2, [r7, #20]
 800af84:	4091      	lsls	r1, r2
 800af86:	000a      	movs	r2, r1
 800af88:	4013      	ands	r3, r2
 800af8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d100      	bne.n	800af94 <HAL_GPIO_Init+0x30>
 800af92:	e146      	b.n	800b222 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	2203      	movs	r2, #3
 800af9a:	4013      	ands	r3, r2
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d005      	beq.n	800afac <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	2203      	movs	r2, #3
 800afa6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800afa8:	2b02      	cmp	r3, #2
 800afaa:	d130      	bne.n	800b00e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	005b      	lsls	r3, r3, #1
 800afb6:	2203      	movs	r2, #3
 800afb8:	409a      	lsls	r2, r3
 800afba:	0013      	movs	r3, r2
 800afbc:	43da      	mvns	r2, r3
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	4013      	ands	r3, r2
 800afc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	68da      	ldr	r2, [r3, #12]
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	005b      	lsls	r3, r3, #1
 800afcc:	409a      	lsls	r2, r3
 800afce:	0013      	movs	r3, r2
 800afd0:	693a      	ldr	r2, [r7, #16]
 800afd2:	4313      	orrs	r3, r2
 800afd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	693a      	ldr	r2, [r7, #16]
 800afda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800afe2:	2201      	movs	r2, #1
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	409a      	lsls	r2, r3
 800afe8:	0013      	movs	r3, r2
 800afea:	43da      	mvns	r2, r3
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	4013      	ands	r3, r2
 800aff0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	091b      	lsrs	r3, r3, #4
 800aff8:	2201      	movs	r2, #1
 800affa:	401a      	ands	r2, r3
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	409a      	lsls	r2, r3
 800b000:	0013      	movs	r3, r2
 800b002:	693a      	ldr	r2, [r7, #16]
 800b004:	4313      	orrs	r3, r2
 800b006:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	693a      	ldr	r2, [r7, #16]
 800b00c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	2203      	movs	r2, #3
 800b014:	4013      	ands	r3, r2
 800b016:	2b03      	cmp	r3, #3
 800b018:	d017      	beq.n	800b04a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	005b      	lsls	r3, r3, #1
 800b024:	2203      	movs	r2, #3
 800b026:	409a      	lsls	r2, r3
 800b028:	0013      	movs	r3, r2
 800b02a:	43da      	mvns	r2, r3
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	4013      	ands	r3, r2
 800b030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	689a      	ldr	r2, [r3, #8]
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	005b      	lsls	r3, r3, #1
 800b03a:	409a      	lsls	r2, r3
 800b03c:	0013      	movs	r3, r2
 800b03e:	693a      	ldr	r2, [r7, #16]
 800b040:	4313      	orrs	r3, r2
 800b042:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	693a      	ldr	r2, [r7, #16]
 800b048:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	2203      	movs	r2, #3
 800b050:	4013      	ands	r3, r2
 800b052:	2b02      	cmp	r3, #2
 800b054:	d123      	bne.n	800b09e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	08da      	lsrs	r2, r3, #3
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	3208      	adds	r2, #8
 800b05e:	0092      	lsls	r2, r2, #2
 800b060:	58d3      	ldr	r3, [r2, r3]
 800b062:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	2207      	movs	r2, #7
 800b068:	4013      	ands	r3, r2
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	220f      	movs	r2, #15
 800b06e:	409a      	lsls	r2, r3
 800b070:	0013      	movs	r3, r2
 800b072:	43da      	mvns	r2, r3
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	4013      	ands	r3, r2
 800b078:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	691a      	ldr	r2, [r3, #16]
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	2107      	movs	r1, #7
 800b082:	400b      	ands	r3, r1
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	409a      	lsls	r2, r3
 800b088:	0013      	movs	r3, r2
 800b08a:	693a      	ldr	r2, [r7, #16]
 800b08c:	4313      	orrs	r3, r2
 800b08e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	08da      	lsrs	r2, r3, #3
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	3208      	adds	r2, #8
 800b098:	0092      	lsls	r2, r2, #2
 800b09a:	6939      	ldr	r1, [r7, #16]
 800b09c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	005b      	lsls	r3, r3, #1
 800b0a8:	2203      	movs	r2, #3
 800b0aa:	409a      	lsls	r2, r3
 800b0ac:	0013      	movs	r3, r2
 800b0ae:	43da      	mvns	r2, r3
 800b0b0:	693b      	ldr	r3, [r7, #16]
 800b0b2:	4013      	ands	r3, r2
 800b0b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	2203      	movs	r2, #3
 800b0bc:	401a      	ands	r2, r3
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	005b      	lsls	r3, r3, #1
 800b0c2:	409a      	lsls	r2, r3
 800b0c4:	0013      	movs	r3, r2
 800b0c6:	693a      	ldr	r2, [r7, #16]
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	693a      	ldr	r2, [r7, #16]
 800b0d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	685a      	ldr	r2, [r3, #4]
 800b0d6:	23c0      	movs	r3, #192	@ 0xc0
 800b0d8:	029b      	lsls	r3, r3, #10
 800b0da:	4013      	ands	r3, r2
 800b0dc:	d100      	bne.n	800b0e0 <HAL_GPIO_Init+0x17c>
 800b0de:	e0a0      	b.n	800b222 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b0e0:	4b57      	ldr	r3, [pc, #348]	@ (800b240 <HAL_GPIO_Init+0x2dc>)
 800b0e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b0e4:	4b56      	ldr	r3, [pc, #344]	@ (800b240 <HAL_GPIO_Init+0x2dc>)
 800b0e6:	2101      	movs	r1, #1
 800b0e8:	430a      	orrs	r2, r1
 800b0ea:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800b0ec:	4a55      	ldr	r2, [pc, #340]	@ (800b244 <HAL_GPIO_Init+0x2e0>)
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	089b      	lsrs	r3, r3, #2
 800b0f2:	3302      	adds	r3, #2
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	589b      	ldr	r3, [r3, r2]
 800b0f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	2203      	movs	r2, #3
 800b0fe:	4013      	ands	r3, r2
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	220f      	movs	r2, #15
 800b104:	409a      	lsls	r2, r3
 800b106:	0013      	movs	r3, r2
 800b108:	43da      	mvns	r2, r3
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	4013      	ands	r3, r2
 800b10e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	23a0      	movs	r3, #160	@ 0xa0
 800b114:	05db      	lsls	r3, r3, #23
 800b116:	429a      	cmp	r2, r3
 800b118:	d01f      	beq.n	800b15a <HAL_GPIO_Init+0x1f6>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	4a4a      	ldr	r2, [pc, #296]	@ (800b248 <HAL_GPIO_Init+0x2e4>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d019      	beq.n	800b156 <HAL_GPIO_Init+0x1f2>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	4a49      	ldr	r2, [pc, #292]	@ (800b24c <HAL_GPIO_Init+0x2e8>)
 800b126:	4293      	cmp	r3, r2
 800b128:	d013      	beq.n	800b152 <HAL_GPIO_Init+0x1ee>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4a48      	ldr	r2, [pc, #288]	@ (800b250 <HAL_GPIO_Init+0x2ec>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d00d      	beq.n	800b14e <HAL_GPIO_Init+0x1ea>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	4a47      	ldr	r2, [pc, #284]	@ (800b254 <HAL_GPIO_Init+0x2f0>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d007      	beq.n	800b14a <HAL_GPIO_Init+0x1e6>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4a46      	ldr	r2, [pc, #280]	@ (800b258 <HAL_GPIO_Init+0x2f4>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d101      	bne.n	800b146 <HAL_GPIO_Init+0x1e2>
 800b142:	2305      	movs	r3, #5
 800b144:	e00a      	b.n	800b15c <HAL_GPIO_Init+0x1f8>
 800b146:	2306      	movs	r3, #6
 800b148:	e008      	b.n	800b15c <HAL_GPIO_Init+0x1f8>
 800b14a:	2304      	movs	r3, #4
 800b14c:	e006      	b.n	800b15c <HAL_GPIO_Init+0x1f8>
 800b14e:	2303      	movs	r3, #3
 800b150:	e004      	b.n	800b15c <HAL_GPIO_Init+0x1f8>
 800b152:	2302      	movs	r3, #2
 800b154:	e002      	b.n	800b15c <HAL_GPIO_Init+0x1f8>
 800b156:	2301      	movs	r3, #1
 800b158:	e000      	b.n	800b15c <HAL_GPIO_Init+0x1f8>
 800b15a:	2300      	movs	r3, #0
 800b15c:	697a      	ldr	r2, [r7, #20]
 800b15e:	2103      	movs	r1, #3
 800b160:	400a      	ands	r2, r1
 800b162:	0092      	lsls	r2, r2, #2
 800b164:	4093      	lsls	r3, r2
 800b166:	693a      	ldr	r2, [r7, #16]
 800b168:	4313      	orrs	r3, r2
 800b16a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b16c:	4935      	ldr	r1, [pc, #212]	@ (800b244 <HAL_GPIO_Init+0x2e0>)
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	089b      	lsrs	r3, r3, #2
 800b172:	3302      	adds	r3, #2
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	693a      	ldr	r2, [r7, #16]
 800b178:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b17a:	4b38      	ldr	r3, [pc, #224]	@ (800b25c <HAL_GPIO_Init+0x2f8>)
 800b17c:	689b      	ldr	r3, [r3, #8]
 800b17e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	43da      	mvns	r2, r3
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	4013      	ands	r3, r2
 800b188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	685a      	ldr	r2, [r3, #4]
 800b18e:	2380      	movs	r3, #128	@ 0x80
 800b190:	035b      	lsls	r3, r3, #13
 800b192:	4013      	ands	r3, r2
 800b194:	d003      	beq.n	800b19e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800b196:	693a      	ldr	r2, [r7, #16]
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	4313      	orrs	r3, r2
 800b19c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800b19e:	4b2f      	ldr	r3, [pc, #188]	@ (800b25c <HAL_GPIO_Init+0x2f8>)
 800b1a0:	693a      	ldr	r2, [r7, #16]
 800b1a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800b1a4:	4b2d      	ldr	r3, [pc, #180]	@ (800b25c <HAL_GPIO_Init+0x2f8>)
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	43da      	mvns	r2, r3
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	4013      	ands	r3, r2
 800b1b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	685a      	ldr	r2, [r3, #4]
 800b1b8:	2380      	movs	r3, #128	@ 0x80
 800b1ba:	039b      	lsls	r3, r3, #14
 800b1bc:	4013      	ands	r3, r2
 800b1be:	d003      	beq.n	800b1c8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800b1c0:	693a      	ldr	r2, [r7, #16]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800b1c8:	4b24      	ldr	r3, [pc, #144]	@ (800b25c <HAL_GPIO_Init+0x2f8>)
 800b1ca:	693a      	ldr	r2, [r7, #16]
 800b1cc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800b1ce:	4b23      	ldr	r3, [pc, #140]	@ (800b25c <HAL_GPIO_Init+0x2f8>)
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	43da      	mvns	r2, r3
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	4013      	ands	r3, r2
 800b1dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	685a      	ldr	r2, [r3, #4]
 800b1e2:	2380      	movs	r3, #128	@ 0x80
 800b1e4:	029b      	lsls	r3, r3, #10
 800b1e6:	4013      	ands	r3, r2
 800b1e8:	d003      	beq.n	800b1f2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800b1ea:	693a      	ldr	r2, [r7, #16]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800b1f2:	4b1a      	ldr	r3, [pc, #104]	@ (800b25c <HAL_GPIO_Init+0x2f8>)
 800b1f4:	693a      	ldr	r2, [r7, #16]
 800b1f6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b1f8:	4b18      	ldr	r3, [pc, #96]	@ (800b25c <HAL_GPIO_Init+0x2f8>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	43da      	mvns	r2, r3
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	4013      	ands	r3, r2
 800b206:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	685a      	ldr	r2, [r3, #4]
 800b20c:	2380      	movs	r3, #128	@ 0x80
 800b20e:	025b      	lsls	r3, r3, #9
 800b210:	4013      	ands	r3, r2
 800b212:	d003      	beq.n	800b21c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800b214:	693a      	ldr	r2, [r7, #16]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	4313      	orrs	r3, r2
 800b21a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800b21c:	4b0f      	ldr	r3, [pc, #60]	@ (800b25c <HAL_GPIO_Init+0x2f8>)
 800b21e:	693a      	ldr	r2, [r7, #16]
 800b220:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	3301      	adds	r3, #1
 800b226:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	40da      	lsrs	r2, r3
 800b230:	1e13      	subs	r3, r2, #0
 800b232:	d000      	beq.n	800b236 <HAL_GPIO_Init+0x2d2>
 800b234:	e6a2      	b.n	800af7c <HAL_GPIO_Init+0x18>
  }
}
 800b236:	46c0      	nop			@ (mov r8, r8)
 800b238:	46c0      	nop			@ (mov r8, r8)
 800b23a:	46bd      	mov	sp, r7
 800b23c:	b006      	add	sp, #24
 800b23e:	bd80      	pop	{r7, pc}
 800b240:	40021000 	.word	0x40021000
 800b244:	40010000 	.word	0x40010000
 800b248:	50000400 	.word	0x50000400
 800b24c:	50000800 	.word	0x50000800
 800b250:	50000c00 	.word	0x50000c00
 800b254:	50001000 	.word	0x50001000
 800b258:	50001c00 	.word	0x50001c00
 800b25c:	40010400 	.word	0x40010400

0800b260 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b086      	sub	sp, #24
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b26a:	2300      	movs	r3, #0
 800b26c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b26e:	2300      	movs	r3, #0
 800b270:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 800b272:	2300      	movs	r3, #0
 800b274:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800b276:	e0bc      	b.n	800b3f2 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800b278:	2201      	movs	r2, #1
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	409a      	lsls	r2, r3
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	4013      	ands	r3, r2
 800b282:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d100      	bne.n	800b28c <HAL_GPIO_DeInit+0x2c>
 800b28a:	e0af      	b.n	800b3ec <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800b28c:	4a5e      	ldr	r2, [pc, #376]	@ (800b408 <HAL_GPIO_DeInit+0x1a8>)
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	089b      	lsrs	r3, r3, #2
 800b292:	3302      	adds	r3, #2
 800b294:	009b      	lsls	r3, r3, #2
 800b296:	589b      	ldr	r3, [r3, r2]
 800b298:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	2203      	movs	r2, #3
 800b29e:	4013      	ands	r3, r2
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	220f      	movs	r2, #15
 800b2a4:	409a      	lsls	r2, r3
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	4013      	ands	r3, r2
 800b2aa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	23a0      	movs	r3, #160	@ 0xa0
 800b2b0:	05db      	lsls	r3, r3, #23
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d01f      	beq.n	800b2f6 <HAL_GPIO_DeInit+0x96>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4a54      	ldr	r2, [pc, #336]	@ (800b40c <HAL_GPIO_DeInit+0x1ac>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d019      	beq.n	800b2f2 <HAL_GPIO_DeInit+0x92>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4a53      	ldr	r2, [pc, #332]	@ (800b410 <HAL_GPIO_DeInit+0x1b0>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d013      	beq.n	800b2ee <HAL_GPIO_DeInit+0x8e>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4a52      	ldr	r2, [pc, #328]	@ (800b414 <HAL_GPIO_DeInit+0x1b4>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d00d      	beq.n	800b2ea <HAL_GPIO_DeInit+0x8a>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4a51      	ldr	r2, [pc, #324]	@ (800b418 <HAL_GPIO_DeInit+0x1b8>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d007      	beq.n	800b2e6 <HAL_GPIO_DeInit+0x86>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	4a50      	ldr	r2, [pc, #320]	@ (800b41c <HAL_GPIO_DeInit+0x1bc>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d101      	bne.n	800b2e2 <HAL_GPIO_DeInit+0x82>
 800b2de:	2305      	movs	r3, #5
 800b2e0:	e00a      	b.n	800b2f8 <HAL_GPIO_DeInit+0x98>
 800b2e2:	2306      	movs	r3, #6
 800b2e4:	e008      	b.n	800b2f8 <HAL_GPIO_DeInit+0x98>
 800b2e6:	2304      	movs	r3, #4
 800b2e8:	e006      	b.n	800b2f8 <HAL_GPIO_DeInit+0x98>
 800b2ea:	2303      	movs	r3, #3
 800b2ec:	e004      	b.n	800b2f8 <HAL_GPIO_DeInit+0x98>
 800b2ee:	2302      	movs	r3, #2
 800b2f0:	e002      	b.n	800b2f8 <HAL_GPIO_DeInit+0x98>
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e000      	b.n	800b2f8 <HAL_GPIO_DeInit+0x98>
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	697a      	ldr	r2, [r7, #20]
 800b2fa:	2103      	movs	r1, #3
 800b2fc:	400a      	ands	r2, r1
 800b2fe:	0092      	lsls	r2, r2, #2
 800b300:	4093      	lsls	r3, r2
 800b302:	68fa      	ldr	r2, [r7, #12]
 800b304:	429a      	cmp	r2, r3
 800b306:	d132      	bne.n	800b36e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b308:	4b45      	ldr	r3, [pc, #276]	@ (800b420 <HAL_GPIO_DeInit+0x1c0>)
 800b30a:	681a      	ldr	r2, [r3, #0]
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	43d9      	mvns	r1, r3
 800b310:	4b43      	ldr	r3, [pc, #268]	@ (800b420 <HAL_GPIO_DeInit+0x1c0>)
 800b312:	400a      	ands	r2, r1
 800b314:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800b316:	4b42      	ldr	r3, [pc, #264]	@ (800b420 <HAL_GPIO_DeInit+0x1c0>)
 800b318:	685a      	ldr	r2, [r3, #4]
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	43d9      	mvns	r1, r3
 800b31e:	4b40      	ldr	r3, [pc, #256]	@ (800b420 <HAL_GPIO_DeInit+0x1c0>)
 800b320:	400a      	ands	r2, r1
 800b322:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800b324:	4b3e      	ldr	r3, [pc, #248]	@ (800b420 <HAL_GPIO_DeInit+0x1c0>)
 800b326:	68da      	ldr	r2, [r3, #12]
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	43d9      	mvns	r1, r3
 800b32c:	4b3c      	ldr	r3, [pc, #240]	@ (800b420 <HAL_GPIO_DeInit+0x1c0>)
 800b32e:	400a      	ands	r2, r1
 800b330:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800b332:	4b3b      	ldr	r3, [pc, #236]	@ (800b420 <HAL_GPIO_DeInit+0x1c0>)
 800b334:	689a      	ldr	r2, [r3, #8]
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	43d9      	mvns	r1, r3
 800b33a:	4b39      	ldr	r3, [pc, #228]	@ (800b420 <HAL_GPIO_DeInit+0x1c0>)
 800b33c:	400a      	ands	r2, r1
 800b33e:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	2203      	movs	r2, #3
 800b344:	4013      	ands	r3, r2
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	220f      	movs	r2, #15
 800b34a:	409a      	lsls	r2, r3
 800b34c:	0013      	movs	r3, r2
 800b34e:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800b350:	4a2d      	ldr	r2, [pc, #180]	@ (800b408 <HAL_GPIO_DeInit+0x1a8>)
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	089b      	lsrs	r3, r3, #2
 800b356:	3302      	adds	r3, #2
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	589a      	ldr	r2, [r3, r2]
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	43d9      	mvns	r1, r3
 800b360:	4829      	ldr	r0, [pc, #164]	@ (800b408 <HAL_GPIO_DeInit+0x1a8>)
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	089b      	lsrs	r3, r3, #2
 800b366:	400a      	ands	r2, r1
 800b368:	3302      	adds	r3, #2
 800b36a:	009b      	lsls	r3, r3, #2
 800b36c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	005b      	lsls	r3, r3, #1
 800b376:	2103      	movs	r1, #3
 800b378:	4099      	lsls	r1, r3
 800b37a:	000b      	movs	r3, r1
 800b37c:	431a      	orrs	r2, r3
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	08da      	lsrs	r2, r3, #3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	3208      	adds	r2, #8
 800b38a:	0092      	lsls	r2, r2, #2
 800b38c:	58d3      	ldr	r3, [r2, r3]
 800b38e:	697a      	ldr	r2, [r7, #20]
 800b390:	2107      	movs	r1, #7
 800b392:	400a      	ands	r2, r1
 800b394:	0092      	lsls	r2, r2, #2
 800b396:	210f      	movs	r1, #15
 800b398:	4091      	lsls	r1, r2
 800b39a:	000a      	movs	r2, r1
 800b39c:	43d1      	mvns	r1, r2
 800b39e:	697a      	ldr	r2, [r7, #20]
 800b3a0:	08d2      	lsrs	r2, r2, #3
 800b3a2:	4019      	ands	r1, r3
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	3208      	adds	r2, #8
 800b3a8:	0092      	lsls	r2, r2, #2
 800b3aa:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	68db      	ldr	r3, [r3, #12]
 800b3b0:	697a      	ldr	r2, [r7, #20]
 800b3b2:	0052      	lsls	r2, r2, #1
 800b3b4:	2103      	movs	r1, #3
 800b3b6:	4091      	lsls	r1, r2
 800b3b8:	000a      	movs	r2, r1
 800b3ba:	43d2      	mvns	r2, r2
 800b3bc:	401a      	ands	r2, r3
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	685b      	ldr	r3, [r3, #4]
 800b3c6:	2101      	movs	r1, #1
 800b3c8:	697a      	ldr	r2, [r7, #20]
 800b3ca:	4091      	lsls	r1, r2
 800b3cc:	000a      	movs	r2, r1
 800b3ce:	43d2      	mvns	r2, r2
 800b3d0:	401a      	ands	r2, r3
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	697a      	ldr	r2, [r7, #20]
 800b3dc:	0052      	lsls	r2, r2, #1
 800b3de:	2103      	movs	r1, #3
 800b3e0:	4091      	lsls	r1, r2
 800b3e2:	000a      	movs	r2, r1
 800b3e4:	43d2      	mvns	r2, r2
 800b3e6:	401a      	ands	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	609a      	str	r2, [r3, #8]
    }
    position++;
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800b3f2:	683a      	ldr	r2, [r7, #0]
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	40da      	lsrs	r2, r3
 800b3f8:	1e13      	subs	r3, r2, #0
 800b3fa:	d000      	beq.n	800b3fe <HAL_GPIO_DeInit+0x19e>
 800b3fc:	e73c      	b.n	800b278 <HAL_GPIO_DeInit+0x18>
  }
}
 800b3fe:	46c0      	nop			@ (mov r8, r8)
 800b400:	46c0      	nop			@ (mov r8, r8)
 800b402:	46bd      	mov	sp, r7
 800b404:	b006      	add	sp, #24
 800b406:	bd80      	pop	{r7, pc}
 800b408:	40010000 	.word	0x40010000
 800b40c:	50000400 	.word	0x50000400
 800b410:	50000800 	.word	0x50000800
 800b414:	50000c00 	.word	0x50000c00
 800b418:	50001000 	.word	0x50001000
 800b41c:	50001c00 	.word	0x50001c00
 800b420:	40010400 	.word	0x40010400

0800b424 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	000a      	movs	r2, r1
 800b42e:	1cbb      	adds	r3, r7, #2
 800b430:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	691b      	ldr	r3, [r3, #16]
 800b436:	1cba      	adds	r2, r7, #2
 800b438:	8812      	ldrh	r2, [r2, #0]
 800b43a:	4013      	ands	r3, r2
 800b43c:	d004      	beq.n	800b448 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800b43e:	230f      	movs	r3, #15
 800b440:	18fb      	adds	r3, r7, r3
 800b442:	2201      	movs	r2, #1
 800b444:	701a      	strb	r2, [r3, #0]
 800b446:	e003      	b.n	800b450 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b448:	230f      	movs	r3, #15
 800b44a:	18fb      	adds	r3, r7, r3
 800b44c:	2200      	movs	r2, #0
 800b44e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800b450:	230f      	movs	r3, #15
 800b452:	18fb      	adds	r3, r7, r3
 800b454:	781b      	ldrb	r3, [r3, #0]
}
 800b456:	0018      	movs	r0, r3
 800b458:	46bd      	mov	sp, r7
 800b45a:	b004      	add	sp, #16
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b45e:	b580      	push	{r7, lr}
 800b460:	b082      	sub	sp, #8
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
 800b466:	0008      	movs	r0, r1
 800b468:	0011      	movs	r1, r2
 800b46a:	1cbb      	adds	r3, r7, #2
 800b46c:	1c02      	adds	r2, r0, #0
 800b46e:	801a      	strh	r2, [r3, #0]
 800b470:	1c7b      	adds	r3, r7, #1
 800b472:	1c0a      	adds	r2, r1, #0
 800b474:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b476:	1c7b      	adds	r3, r7, #1
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d004      	beq.n	800b488 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b47e:	1cbb      	adds	r3, r7, #2
 800b480:	881a      	ldrh	r2, [r3, #0]
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800b486:	e003      	b.n	800b490 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800b488:	1cbb      	adds	r3, r7, #2
 800b48a:	881a      	ldrh	r2, [r3, #0]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800b490:	46c0      	nop			@ (mov r8, r8)
 800b492:	46bd      	mov	sp, r7
 800b494:	b002      	add	sp, #8
 800b496:	bd80      	pop	{r7, pc}

0800b498 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d101      	bne.n	800b4aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	e082      	b.n	800b5b0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2241      	movs	r2, #65	@ 0x41
 800b4ae:	5c9b      	ldrb	r3, [r3, r2]
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d107      	bne.n	800b4c6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2240      	movs	r2, #64	@ 0x40
 800b4ba:	2100      	movs	r1, #0
 800b4bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	0018      	movs	r0, r3
 800b4c2:	f7fa fc0b 	bl	8005cdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2241      	movs	r2, #65	@ 0x41
 800b4ca:	2124      	movs	r1, #36	@ 0x24
 800b4cc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	681a      	ldr	r2, [r3, #0]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2101      	movs	r1, #1
 800b4da:	438a      	bics	r2, r1
 800b4dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	685a      	ldr	r2, [r3, #4]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4934      	ldr	r1, [pc, #208]	@ (800b5b8 <HAL_I2C_Init+0x120>)
 800b4e8:	400a      	ands	r2, r1
 800b4ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	689a      	ldr	r2, [r3, #8]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4931      	ldr	r1, [pc, #196]	@ (800b5bc <HAL_I2C_Init+0x124>)
 800b4f8:	400a      	ands	r2, r1
 800b4fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	2b01      	cmp	r3, #1
 800b502:	d108      	bne.n	800b516 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	689a      	ldr	r2, [r3, #8]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2180      	movs	r1, #128	@ 0x80
 800b50e:	0209      	lsls	r1, r1, #8
 800b510:	430a      	orrs	r2, r1
 800b512:	609a      	str	r2, [r3, #8]
 800b514:	e007      	b.n	800b526 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	689a      	ldr	r2, [r3, #8]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	2184      	movs	r1, #132	@ 0x84
 800b520:	0209      	lsls	r1, r1, #8
 800b522:	430a      	orrs	r2, r1
 800b524:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	68db      	ldr	r3, [r3, #12]
 800b52a:	2b02      	cmp	r3, #2
 800b52c:	d104      	bne.n	800b538 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2280      	movs	r2, #128	@ 0x80
 800b534:	0112      	lsls	r2, r2, #4
 800b536:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	685a      	ldr	r2, [r3, #4]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	491f      	ldr	r1, [pc, #124]	@ (800b5c0 <HAL_I2C_Init+0x128>)
 800b544:	430a      	orrs	r2, r1
 800b546:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	68da      	ldr	r2, [r3, #12]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	491a      	ldr	r1, [pc, #104]	@ (800b5bc <HAL_I2C_Init+0x124>)
 800b554:	400a      	ands	r2, r1
 800b556:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	691a      	ldr	r2, [r3, #16]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	695b      	ldr	r3, [r3, #20]
 800b560:	431a      	orrs	r2, r3
 800b562:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	699b      	ldr	r3, [r3, #24]
 800b568:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	430a      	orrs	r2, r1
 800b570:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	69d9      	ldr	r1, [r3, #28]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a1a      	ldr	r2, [r3, #32]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	430a      	orrs	r2, r1
 800b580:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	2101      	movs	r1, #1
 800b58e:	430a      	orrs	r2, r1
 800b590:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2200      	movs	r2, #0
 800b596:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2241      	movs	r2, #65	@ 0x41
 800b59c:	2120      	movs	r1, #32
 800b59e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2242      	movs	r2, #66	@ 0x42
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b5ae:	2300      	movs	r3, #0
}
 800b5b0:	0018      	movs	r0, r3
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	b002      	add	sp, #8
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	f0ffffff 	.word	0xf0ffffff
 800b5bc:	ffff7fff 	.word	0xffff7fff
 800b5c0:	02008000 	.word	0x02008000

0800b5c4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800b5c4:	b5b0      	push	{r4, r5, r7, lr}
 800b5c6:	b088      	sub	sp, #32
 800b5c8:	af02      	add	r7, sp, #8
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	0008      	movs	r0, r1
 800b5ce:	607a      	str	r2, [r7, #4]
 800b5d0:	0019      	movs	r1, r3
 800b5d2:	230a      	movs	r3, #10
 800b5d4:	18fb      	adds	r3, r7, r3
 800b5d6:	1c02      	adds	r2, r0, #0
 800b5d8:	801a      	strh	r2, [r3, #0]
 800b5da:	2308      	movs	r3, #8
 800b5dc:	18fb      	adds	r3, r7, r3
 800b5de:	1c0a      	adds	r2, r1, #0
 800b5e0:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2241      	movs	r2, #65	@ 0x41
 800b5e6:	5c9b      	ldrb	r3, [r3, r2]
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	2b20      	cmp	r3, #32
 800b5ec:	d000      	beq.n	800b5f0 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800b5ee:	e0dd      	b.n	800b7ac <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	699a      	ldr	r2, [r3, #24]
 800b5f6:	2380      	movs	r3, #128	@ 0x80
 800b5f8:	021b      	lsls	r3, r3, #8
 800b5fa:	401a      	ands	r2, r3
 800b5fc:	2380      	movs	r3, #128	@ 0x80
 800b5fe:	021b      	lsls	r3, r3, #8
 800b600:	429a      	cmp	r2, r3
 800b602:	d101      	bne.n	800b608 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800b604:	2302      	movs	r3, #2
 800b606:	e0d2      	b.n	800b7ae <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2240      	movs	r2, #64	@ 0x40
 800b60c:	5c9b      	ldrb	r3, [r3, r2]
 800b60e:	2b01      	cmp	r3, #1
 800b610:	d101      	bne.n	800b616 <HAL_I2C_Master_Transmit_DMA+0x52>
 800b612:	2302      	movs	r3, #2
 800b614:	e0cb      	b.n	800b7ae <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	2240      	movs	r2, #64	@ 0x40
 800b61a:	2101      	movs	r1, #1
 800b61c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2241      	movs	r2, #65	@ 0x41
 800b622:	2121      	movs	r1, #33	@ 0x21
 800b624:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2242      	movs	r2, #66	@ 0x42
 800b62a:	2110      	movs	r1, #16
 800b62c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2200      	movs	r2, #0
 800b632:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2208      	movs	r2, #8
 800b63e:	18ba      	adds	r2, r7, r2
 800b640:	8812      	ldrh	r2, [r2, #0]
 800b642:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	4a5c      	ldr	r2, [pc, #368]	@ (800b7b8 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800b648:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	4a5b      	ldr	r2, [pc, #364]	@ (800b7bc <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800b64e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b654:	b29b      	uxth	r3, r3
 800b656:	2bff      	cmp	r3, #255	@ 0xff
 800b658:	d906      	bls.n	800b668 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	22ff      	movs	r2, #255	@ 0xff
 800b65e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800b660:	2380      	movs	r3, #128	@ 0x80
 800b662:	045b      	lsls	r3, r3, #17
 800b664:	617b      	str	r3, [r7, #20]
 800b666:	e007      	b.n	800b678 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b66c:	b29a      	uxth	r2, r3
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b672:	2380      	movs	r3, #128	@ 0x80
 800b674:	049b      	lsls	r3, r3, #18
 800b676:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d100      	bne.n	800b682 <HAL_I2C_Master_Transmit_DMA+0xbe>
 800b680:	e078      	b.n	800b774 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b686:	2b00      	cmp	r3, #0
 800b688:	d023      	beq.n	800b6d2 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b68e:	4a4c      	ldr	r2, [pc, #304]	@ (800b7c0 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800b690:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b696:	4a4b      	ldr	r2, [pc, #300]	@ (800b7c4 <HAL_I2C_Master_Transmit_DMA+0x200>)
 800b698:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b69e:	2200      	movs	r2, #0
 800b6a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800b6ae:	6879      	ldr	r1, [r7, #4]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	3328      	adds	r3, #40	@ 0x28
 800b6b6:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800b6bc:	2513      	movs	r5, #19
 800b6be:	197c      	adds	r4, r7, r5
 800b6c0:	f7ff f8ac 	bl	800a81c <HAL_DMA_Start_IT>
 800b6c4:	0003      	movs	r3, r0
 800b6c6:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b6c8:	197b      	adds	r3, r7, r5
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d13d      	bne.n	800b74c <HAL_I2C_Master_Transmit_DMA+0x188>
 800b6d0:	e013      	b.n	800b6fa <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2241      	movs	r2, #65	@ 0x41
 800b6d6:	2120      	movs	r1, #32
 800b6d8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2242      	movs	r2, #66	@ 0x42
 800b6de:	2100      	movs	r1, #0
 800b6e0:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b6e6:	2280      	movs	r2, #128	@ 0x80
 800b6e8:	431a      	orrs	r2, r3
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2240      	movs	r2, #64	@ 0x40
 800b6f2:	2100      	movs	r1, #0
 800b6f4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	e059      	b.n	800b7ae <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b6fe:	b2da      	uxtb	r2, r3
 800b700:	697c      	ldr	r4, [r7, #20]
 800b702:	230a      	movs	r3, #10
 800b704:	18fb      	adds	r3, r7, r3
 800b706:	8819      	ldrh	r1, [r3, #0]
 800b708:	68f8      	ldr	r0, [r7, #12]
 800b70a:	4b2f      	ldr	r3, [pc, #188]	@ (800b7c8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800b70c:	9300      	str	r3, [sp, #0]
 800b70e:	0023      	movs	r3, r4
 800b710:	f001 fd0e 	bl	800d130 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b718:	b29a      	uxth	r2, r3
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b71e:	1ad3      	subs	r3, r2, r3
 800b720:	b29a      	uxth	r2, r3
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2240      	movs	r2, #64	@ 0x40
 800b72a:	2100      	movs	r1, #0
 800b72c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2110      	movs	r1, #16
 800b732:	0018      	movs	r0, r3
 800b734:	f001 fd36 	bl	800d1a4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	2180      	movs	r1, #128	@ 0x80
 800b744:	01c9      	lsls	r1, r1, #7
 800b746:	430a      	orrs	r2, r1
 800b748:	601a      	str	r2, [r3, #0]
 800b74a:	e02d      	b.n	800b7a8 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2241      	movs	r2, #65	@ 0x41
 800b750:	2120      	movs	r1, #32
 800b752:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2242      	movs	r2, #66	@ 0x42
 800b758:	2100      	movs	r1, #0
 800b75a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b760:	2210      	movs	r2, #16
 800b762:	431a      	orrs	r2, r3
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2240      	movs	r2, #64	@ 0x40
 800b76c:	2100      	movs	r1, #0
 800b76e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800b770:	2301      	movs	r3, #1
 800b772:	e01c      	b.n	800b7ae <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	4a15      	ldr	r2, [pc, #84]	@ (800b7cc <HAL_I2C_Master_Transmit_DMA+0x208>)
 800b778:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b77e:	b2da      	uxtb	r2, r3
 800b780:	2380      	movs	r3, #128	@ 0x80
 800b782:	049c      	lsls	r4, r3, #18
 800b784:	230a      	movs	r3, #10
 800b786:	18fb      	adds	r3, r7, r3
 800b788:	8819      	ldrh	r1, [r3, #0]
 800b78a:	68f8      	ldr	r0, [r7, #12]
 800b78c:	4b0e      	ldr	r3, [pc, #56]	@ (800b7c8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800b78e:	9300      	str	r3, [sp, #0]
 800b790:	0023      	movs	r3, r4
 800b792:	f001 fccd 	bl	800d130 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2240      	movs	r2, #64	@ 0x40
 800b79a:	2100      	movs	r1, #0
 800b79c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2101      	movs	r1, #1
 800b7a2:	0018      	movs	r0, r3
 800b7a4:	f001 fcfe 	bl	800d1a4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	e000      	b.n	800b7ae <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b7ac:	2302      	movs	r3, #2
  }
}
 800b7ae:	0018      	movs	r0, r3
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	b006      	add	sp, #24
 800b7b4:	bdb0      	pop	{r4, r5, r7, pc}
 800b7b6:	46c0      	nop			@ (mov r8, r8)
 800b7b8:	ffff0000 	.word	0xffff0000
 800b7bc:	0800bfc9 	.word	0x0800bfc9
 800b7c0:	0800cf81 	.word	0x0800cf81
 800b7c4:	0800d0c1 	.word	0x0800d0c1
 800b7c8:	80002000 	.word	0x80002000
 800b7cc:	0800bb75 	.word	0x0800bb75

0800b7d0 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800b7d0:	b5b0      	push	{r4, r5, r7, lr}
 800b7d2:	b088      	sub	sp, #32
 800b7d4:	af02      	add	r7, sp, #8
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	0008      	movs	r0, r1
 800b7da:	607a      	str	r2, [r7, #4]
 800b7dc:	0019      	movs	r1, r3
 800b7de:	230a      	movs	r3, #10
 800b7e0:	18fb      	adds	r3, r7, r3
 800b7e2:	1c02      	adds	r2, r0, #0
 800b7e4:	801a      	strh	r2, [r3, #0]
 800b7e6:	2308      	movs	r3, #8
 800b7e8:	18fb      	adds	r3, r7, r3
 800b7ea:	1c0a      	adds	r2, r1, #0
 800b7ec:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2241      	movs	r2, #65	@ 0x41
 800b7f2:	5c9b      	ldrb	r3, [r3, r2]
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	2b20      	cmp	r3, #32
 800b7f8:	d000      	beq.n	800b7fc <HAL_I2C_Master_Receive_DMA+0x2c>
 800b7fa:	e0dd      	b.n	800b9b8 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	699a      	ldr	r2, [r3, #24]
 800b802:	2380      	movs	r3, #128	@ 0x80
 800b804:	021b      	lsls	r3, r3, #8
 800b806:	401a      	ands	r2, r3
 800b808:	2380      	movs	r3, #128	@ 0x80
 800b80a:	021b      	lsls	r3, r3, #8
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d101      	bne.n	800b814 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800b810:	2302      	movs	r3, #2
 800b812:	e0d2      	b.n	800b9ba <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2240      	movs	r2, #64	@ 0x40
 800b818:	5c9b      	ldrb	r3, [r3, r2]
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d101      	bne.n	800b822 <HAL_I2C_Master_Receive_DMA+0x52>
 800b81e:	2302      	movs	r3, #2
 800b820:	e0cb      	b.n	800b9ba <HAL_I2C_Master_Receive_DMA+0x1ea>
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	2240      	movs	r2, #64	@ 0x40
 800b826:	2101      	movs	r1, #1
 800b828:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	2241      	movs	r2, #65	@ 0x41
 800b82e:	2122      	movs	r1, #34	@ 0x22
 800b830:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2242      	movs	r2, #66	@ 0x42
 800b836:	2110      	movs	r1, #16
 800b838:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2200      	movs	r2, #0
 800b83e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2208      	movs	r2, #8
 800b84a:	18ba      	adds	r2, r7, r2
 800b84c:	8812      	ldrh	r2, [r2, #0]
 800b84e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	4a5c      	ldr	r2, [pc, #368]	@ (800b9c4 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800b854:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	4a5b      	ldr	r2, [pc, #364]	@ (800b9c8 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800b85a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b860:	b29b      	uxth	r3, r3
 800b862:	2bff      	cmp	r3, #255	@ 0xff
 800b864:	d906      	bls.n	800b874 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	22ff      	movs	r2, #255	@ 0xff
 800b86a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800b86c:	2380      	movs	r3, #128	@ 0x80
 800b86e:	045b      	lsls	r3, r3, #17
 800b870:	617b      	str	r3, [r7, #20]
 800b872:	e007      	b.n	800b884 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b878:	b29a      	uxth	r2, r3
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800b87e:	2380      	movs	r3, #128	@ 0x80
 800b880:	049b      	lsls	r3, r3, #18
 800b882:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d100      	bne.n	800b88e <HAL_I2C_Master_Receive_DMA+0xbe>
 800b88c:	e078      	b.n	800b980 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b892:	2b00      	cmp	r3, #0
 800b894:	d023      	beq.n	800b8de <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b89a:	4a4c      	ldr	r2, [pc, #304]	@ (800b9cc <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800b89c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8a2:	4a4b      	ldr	r2, [pc, #300]	@ (800b9d0 <HAL_I2C_Master_Receive_DMA+0x200>)
 800b8a4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	3324      	adds	r3, #36	@ 0x24
 800b8c0:	0019      	movs	r1, r3
 800b8c2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800b8c8:	2513      	movs	r5, #19
 800b8ca:	197c      	adds	r4, r7, r5
 800b8cc:	f7fe ffa6 	bl	800a81c <HAL_DMA_Start_IT>
 800b8d0:	0003      	movs	r3, r0
 800b8d2:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800b8d4:	197b      	adds	r3, r7, r5
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d13d      	bne.n	800b958 <HAL_I2C_Master_Receive_DMA+0x188>
 800b8dc:	e013      	b.n	800b906 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2241      	movs	r2, #65	@ 0x41
 800b8e2:	2120      	movs	r1, #32
 800b8e4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2242      	movs	r2, #66	@ 0x42
 800b8ea:	2100      	movs	r1, #0
 800b8ec:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8f2:	2280      	movs	r2, #128	@ 0x80
 800b8f4:	431a      	orrs	r2, r3
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2240      	movs	r2, #64	@ 0x40
 800b8fe:	2100      	movs	r1, #0
 800b900:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800b902:	2301      	movs	r3, #1
 800b904:	e059      	b.n	800b9ba <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b90a:	b2da      	uxtb	r2, r3
 800b90c:	697c      	ldr	r4, [r7, #20]
 800b90e:	230a      	movs	r3, #10
 800b910:	18fb      	adds	r3, r7, r3
 800b912:	8819      	ldrh	r1, [r3, #0]
 800b914:	68f8      	ldr	r0, [r7, #12]
 800b916:	4b2f      	ldr	r3, [pc, #188]	@ (800b9d4 <HAL_I2C_Master_Receive_DMA+0x204>)
 800b918:	9300      	str	r3, [sp, #0]
 800b91a:	0023      	movs	r3, r4
 800b91c:	f001 fc08 	bl	800d130 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b924:	b29a      	uxth	r2, r3
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b92a:	1ad3      	subs	r3, r2, r3
 800b92c:	b29a      	uxth	r2, r3
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2240      	movs	r2, #64	@ 0x40
 800b936:	2100      	movs	r1, #0
 800b938:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2110      	movs	r1, #16
 800b93e:	0018      	movs	r0, r3
 800b940:	f001 fc30 	bl	800d1a4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	2180      	movs	r1, #128	@ 0x80
 800b950:	0209      	lsls	r1, r1, #8
 800b952:	430a      	orrs	r2, r1
 800b954:	601a      	str	r2, [r3, #0]
 800b956:	e02d      	b.n	800b9b4 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2241      	movs	r2, #65	@ 0x41
 800b95c:	2120      	movs	r1, #32
 800b95e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2242      	movs	r2, #66	@ 0x42
 800b964:	2100      	movs	r1, #0
 800b966:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b96c:	2210      	movs	r2, #16
 800b96e:	431a      	orrs	r2, r3
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2240      	movs	r2, #64	@ 0x40
 800b978:	2100      	movs	r1, #0
 800b97a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800b97c:	2301      	movs	r3, #1
 800b97e:	e01c      	b.n	800b9ba <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	4a15      	ldr	r2, [pc, #84]	@ (800b9d8 <HAL_I2C_Master_Receive_DMA+0x208>)
 800b984:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b98a:	b2da      	uxtb	r2, r3
 800b98c:	2380      	movs	r3, #128	@ 0x80
 800b98e:	049c      	lsls	r4, r3, #18
 800b990:	230a      	movs	r3, #10
 800b992:	18fb      	adds	r3, r7, r3
 800b994:	8819      	ldrh	r1, [r3, #0]
 800b996:	68f8      	ldr	r0, [r7, #12]
 800b998:	4b0e      	ldr	r3, [pc, #56]	@ (800b9d4 <HAL_I2C_Master_Receive_DMA+0x204>)
 800b99a:	9300      	str	r3, [sp, #0]
 800b99c:	0023      	movs	r3, r4
 800b99e:	f001 fbc7 	bl	800d130 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2240      	movs	r2, #64	@ 0x40
 800b9a6:	2100      	movs	r1, #0
 800b9a8:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2101      	movs	r1, #1
 800b9ae:	0018      	movs	r0, r3
 800b9b0:	f001 fbf8 	bl	800d1a4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	e000      	b.n	800b9ba <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b9b8:	2302      	movs	r3, #2
  }
}
 800b9ba:	0018      	movs	r0, r3
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	b006      	add	sp, #24
 800b9c0:	bdb0      	pop	{r4, r5, r7, pc}
 800b9c2:	46c0      	nop			@ (mov r8, r8)
 800b9c4:	ffff0000 	.word	0xffff0000
 800b9c8:	0800bfc9 	.word	0x0800bfc9
 800b9cc:	0800d021 	.word	0x0800d021
 800b9d0:	0800d0c1 	.word	0x0800d0c1
 800b9d4:	80002400 	.word	0x80002400
 800b9d8:	0800bb75 	.word	0x0800bb75

0800b9dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	699b      	ldr	r3, [r3, #24]
 800b9ea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d005      	beq.n	800ba08 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba00:	68ba      	ldr	r2, [r7, #8]
 800ba02:	68f9      	ldr	r1, [r7, #12]
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	4798      	blx	r3
  }
}
 800ba08:	46c0      	nop			@ (mov r8, r8)
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	b004      	add	sp, #16
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b086      	sub	sp, #24
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	699b      	ldr	r3, [r3, #24]
 800ba1e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800ba28:	697a      	ldr	r2, [r7, #20]
 800ba2a:	2380      	movs	r3, #128	@ 0x80
 800ba2c:	005b      	lsls	r3, r3, #1
 800ba2e:	4013      	ands	r3, r2
 800ba30:	d00e      	beq.n	800ba50 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	2280      	movs	r2, #128	@ 0x80
 800ba36:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800ba38:	d00a      	beq.n	800ba50 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba3e:	2201      	movs	r2, #1
 800ba40:	431a      	orrs	r2, r3
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	2280      	movs	r2, #128	@ 0x80
 800ba4c:	0052      	lsls	r2, r2, #1
 800ba4e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800ba50:	697a      	ldr	r2, [r7, #20]
 800ba52:	2380      	movs	r3, #128	@ 0x80
 800ba54:	00db      	lsls	r3, r3, #3
 800ba56:	4013      	ands	r3, r2
 800ba58:	d00e      	beq.n	800ba78 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	2280      	movs	r2, #128	@ 0x80
 800ba5e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800ba60:	d00a      	beq.n	800ba78 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba66:	2208      	movs	r2, #8
 800ba68:	431a      	orrs	r2, r3
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2280      	movs	r2, #128	@ 0x80
 800ba74:	00d2      	lsls	r2, r2, #3
 800ba76:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800ba78:	697a      	ldr	r2, [r7, #20]
 800ba7a:	2380      	movs	r3, #128	@ 0x80
 800ba7c:	009b      	lsls	r3, r3, #2
 800ba7e:	4013      	ands	r3, r2
 800ba80:	d00e      	beq.n	800baa0 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	2280      	movs	r2, #128	@ 0x80
 800ba86:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800ba88:	d00a      	beq.n	800baa0 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba8e:	2202      	movs	r2, #2
 800ba90:	431a      	orrs	r2, r3
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	2280      	movs	r2, #128	@ 0x80
 800ba9c:	0092      	lsls	r2, r2, #2
 800ba9e:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800baa4:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	220b      	movs	r2, #11
 800baaa:	4013      	ands	r3, r2
 800baac:	d005      	beq.n	800baba <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800baae:	68fa      	ldr	r2, [r7, #12]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	0011      	movs	r1, r2
 800bab4:	0018      	movs	r0, r3
 800bab6:	f001 f915 	bl	800cce4 <I2C_ITError>
  }
}
 800baba:	46c0      	nop			@ (mov r8, r8)
 800babc:	46bd      	mov	sp, r7
 800babe:	b006      	add	sp, #24
 800bac0:	bd80      	pop	{r7, pc}

0800bac2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bac2:	b580      	push	{r7, lr}
 800bac4:	b082      	sub	sp, #8
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800baca:	46c0      	nop			@ (mov r8, r8)
 800bacc:	46bd      	mov	sp, r7
 800bace:	b002      	add	sp, #8
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b082      	sub	sp, #8
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800bada:	46c0      	nop			@ (mov r8, r8)
 800badc:	46bd      	mov	sp, r7
 800bade:	b002      	add	sp, #8
 800bae0:	bd80      	pop	{r7, pc}

0800bae2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b082      	sub	sp, #8
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800baea:	46c0      	nop			@ (mov r8, r8)
 800baec:	46bd      	mov	sp, r7
 800baee:	b002      	add	sp, #8
 800baf0:	bd80      	pop	{r7, pc}

0800baf2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800baf2:	b580      	push	{r7, lr}
 800baf4:	b082      	sub	sp, #8
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800bafa:	46c0      	nop			@ (mov r8, r8)
 800bafc:	46bd      	mov	sp, r7
 800bafe:	b002      	add	sp, #8
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b082      	sub	sp, #8
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
 800bb0a:	0008      	movs	r0, r1
 800bb0c:	0011      	movs	r1, r2
 800bb0e:	1cfb      	adds	r3, r7, #3
 800bb10:	1c02      	adds	r2, r0, #0
 800bb12:	701a      	strb	r2, [r3, #0]
 800bb14:	003b      	movs	r3, r7
 800bb16:	1c0a      	adds	r2, r1, #0
 800bb18:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800bb1a:	46c0      	nop			@ (mov r8, r8)
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	b002      	add	sp, #8
 800bb20:	bd80      	pop	{r7, pc}

0800bb22 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bb22:	b580      	push	{r7, lr}
 800bb24:	b082      	sub	sp, #8
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800bb2a:	46c0      	nop			@ (mov r8, r8)
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	b002      	add	sp, #8
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bb32:	b580      	push	{r7, lr}
 800bb34:	b082      	sub	sp, #8
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800bb3a:	46c0      	nop			@ (mov r8, r8)
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	b002      	add	sp, #8
 800bb40:	bd80      	pop	{r7, pc}

0800bb42 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bb42:	b580      	push	{r7, lr}
 800bb44:	b082      	sub	sp, #8
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800bb4a:	46c0      	nop			@ (mov r8, r8)
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	b002      	add	sp, #8
 800bb50:	bd80      	pop	{r7, pc}

0800bb52 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800bb52:	b580      	push	{r7, lr}
 800bb54:	b082      	sub	sp, #8
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800bb5a:	46c0      	nop			@ (mov r8, r8)
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	b002      	add	sp, #8
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b082      	sub	sp, #8
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800bb6a:	46c0      	nop			@ (mov r8, r8)
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	b002      	add	sp, #8
 800bb70:	bd80      	pop	{r7, pc}
	...

0800bb74 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800bb74:	b590      	push	{r4, r7, lr}
 800bb76:	b089      	sub	sp, #36	@ 0x24
 800bb78:	af02      	add	r7, sp, #8
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2240      	movs	r2, #64	@ 0x40
 800bb88:	5c9b      	ldrb	r3, [r3, r2]
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	d101      	bne.n	800bb92 <I2C_Master_ISR_IT+0x1e>
 800bb8e:	2302      	movs	r3, #2
 800bb90:	e113      	b.n	800bdba <I2C_Master_ISR_IT+0x246>
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2240      	movs	r2, #64	@ 0x40
 800bb96:	2101      	movs	r1, #1
 800bb98:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	2210      	movs	r2, #16
 800bb9e:	4013      	ands	r3, r2
 800bba0:	d012      	beq.n	800bbc8 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2210      	movs	r2, #16
 800bba6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bba8:	d00e      	beq.n	800bbc8 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	2210      	movs	r2, #16
 800bbb0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbb6:	2204      	movs	r2, #4
 800bbb8:	431a      	orrs	r2, r3
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	0018      	movs	r0, r3
 800bbc2:	f001 f9ba 	bl	800cf3a <I2C_Flush_TXDR>
 800bbc6:	e0e5      	b.n	800bd94 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	2204      	movs	r2, #4
 800bbcc:	4013      	ands	r3, r2
 800bbce:	d021      	beq.n	800bc14 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2204      	movs	r2, #4
 800bbd4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bbd6:	d01d      	beq.n	800bc14 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	2204      	movs	r2, #4
 800bbdc:	4393      	bics	r3, r2
 800bbde:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbea:	b2d2      	uxtb	r2, r2
 800bbec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbf2:	1c5a      	adds	r2, r3, #1
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bbfc:	3b01      	subs	r3, #1
 800bbfe:	b29a      	uxth	r2, r3
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	3b01      	subs	r3, #1
 800bc0c:	b29a      	uxth	r2, r3
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bc12:	e0bf      	b.n	800bd94 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	2202      	movs	r2, #2
 800bc18:	4013      	ands	r3, r2
 800bc1a:	d01c      	beq.n	800bc56 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2202      	movs	r2, #2
 800bc20:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bc22:	d018      	beq.n	800bc56 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc28:	781a      	ldrb	r2, [r3, #0]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc34:	1c5a      	adds	r2, r3, #1
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc3e:	3b01      	subs	r3, #1
 800bc40:	b29a      	uxth	r2, r3
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	3b01      	subs	r3, #1
 800bc4e:	b29a      	uxth	r2, r3
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bc54:	e09e      	b.n	800bd94 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	2280      	movs	r2, #128	@ 0x80
 800bc5a:	4013      	ands	r3, r2
 800bc5c:	d100      	bne.n	800bc60 <I2C_Master_ISR_IT+0xec>
 800bc5e:	e069      	b.n	800bd34 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2240      	movs	r2, #64	@ 0x40
 800bc64:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800bc66:	d065      	beq.n	800bd34 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d04a      	beq.n	800bd08 <I2C_Master_ISR_IT+0x194>
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d146      	bne.n	800bd08 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	b29a      	uxth	r2, r3
 800bc82:	2112      	movs	r1, #18
 800bc84:	187b      	adds	r3, r7, r1
 800bc86:	0592      	lsls	r2, r2, #22
 800bc88:	0d92      	lsrs	r2, r2, #22
 800bc8a:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	2bff      	cmp	r3, #255	@ 0xff
 800bc94:	d910      	bls.n	800bcb8 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	22ff      	movs	r2, #255	@ 0xff
 800bc9a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bca0:	b2da      	uxtb	r2, r3
 800bca2:	2380      	movs	r3, #128	@ 0x80
 800bca4:	045c      	lsls	r4, r3, #17
 800bca6:	187b      	adds	r3, r7, r1
 800bca8:	8819      	ldrh	r1, [r3, #0]
 800bcaa:	68f8      	ldr	r0, [r7, #12]
 800bcac:	2300      	movs	r3, #0
 800bcae:	9300      	str	r3, [sp, #0]
 800bcb0:	0023      	movs	r3, r4
 800bcb2:	f001 fa3d 	bl	800d130 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bcb6:	e03c      	b.n	800bd32 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bcbc:	b29a      	uxth	r2, r3
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcc6:	4a3f      	ldr	r2, [pc, #252]	@ (800bdc4 <I2C_Master_ISR_IT+0x250>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d00e      	beq.n	800bcea <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bcd0:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bcd6:	2312      	movs	r3, #18
 800bcd8:	18fb      	adds	r3, r7, r3
 800bcda:	8819      	ldrh	r1, [r3, #0]
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	2300      	movs	r3, #0
 800bce0:	9300      	str	r3, [sp, #0]
 800bce2:	0023      	movs	r3, r4
 800bce4:	f001 fa24 	bl	800d130 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bce8:	e023      	b.n	800bd32 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bcee:	b2da      	uxtb	r2, r3
 800bcf0:	2380      	movs	r3, #128	@ 0x80
 800bcf2:	049c      	lsls	r4, r3, #18
 800bcf4:	2312      	movs	r3, #18
 800bcf6:	18fb      	adds	r3, r7, r3
 800bcf8:	8819      	ldrh	r1, [r3, #0]
 800bcfa:	68f8      	ldr	r0, [r7, #12]
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	9300      	str	r3, [sp, #0]
 800bd00:	0023      	movs	r3, r4
 800bd02:	f001 fa15 	bl	800d130 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bd06:	e014      	b.n	800bd32 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	685a      	ldr	r2, [r3, #4]
 800bd0e:	2380      	movs	r3, #128	@ 0x80
 800bd10:	049b      	lsls	r3, r3, #18
 800bd12:	401a      	ands	r2, r3
 800bd14:	2380      	movs	r3, #128	@ 0x80
 800bd16:	049b      	lsls	r3, r3, #18
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d004      	beq.n	800bd26 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	0018      	movs	r0, r3
 800bd20:	f000 fcf4 	bl	800c70c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bd24:	e036      	b.n	800bd94 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2140      	movs	r1, #64	@ 0x40
 800bd2a:	0018      	movs	r0, r3
 800bd2c:	f000 ffda 	bl	800cce4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bd30:	e030      	b.n	800bd94 <I2C_Master_ISR_IT+0x220>
 800bd32:	e02f      	b.n	800bd94 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	2240      	movs	r2, #64	@ 0x40
 800bd38:	4013      	ands	r3, r2
 800bd3a:	d02b      	beq.n	800bd94 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2240      	movs	r2, #64	@ 0x40
 800bd40:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800bd42:	d027      	beq.n	800bd94 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd48:	b29b      	uxth	r3, r3
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d11d      	bne.n	800bd8a <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	685a      	ldr	r2, [r3, #4]
 800bd54:	2380      	movs	r3, #128	@ 0x80
 800bd56:	049b      	lsls	r3, r3, #18
 800bd58:	401a      	ands	r2, r3
 800bd5a:	2380      	movs	r3, #128	@ 0x80
 800bd5c:	049b      	lsls	r3, r3, #18
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d018      	beq.n	800bd94 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd66:	4a17      	ldr	r2, [pc, #92]	@ (800bdc4 <I2C_Master_ISR_IT+0x250>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d109      	bne.n	800bd80 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	685a      	ldr	r2, [r3, #4]
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	2180      	movs	r1, #128	@ 0x80
 800bd78:	01c9      	lsls	r1, r1, #7
 800bd7a:	430a      	orrs	r2, r1
 800bd7c:	605a      	str	r2, [r3, #4]
 800bd7e:	e009      	b.n	800bd94 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	0018      	movs	r0, r3
 800bd84:	f000 fcc2 	bl	800c70c <I2C_ITMasterSeqCplt>
 800bd88:	e004      	b.n	800bd94 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2140      	movs	r1, #64	@ 0x40
 800bd8e:	0018      	movs	r0, r3
 800bd90:	f000 ffa8 	bl	800cce4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	2220      	movs	r2, #32
 800bd98:	4013      	ands	r3, r2
 800bd9a:	d009      	beq.n	800bdb0 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2220      	movs	r2, #32
 800bda0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bda2:	d005      	beq.n	800bdb0 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800bda4:	697a      	ldr	r2, [r7, #20]
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	0011      	movs	r1, r2
 800bdaa:	0018      	movs	r0, r3
 800bdac:	f000 fd54 	bl	800c858 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2240      	movs	r2, #64	@ 0x40
 800bdb4:	2100      	movs	r1, #0
 800bdb6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bdb8:	2300      	movs	r3, #0
}
 800bdba:	0018      	movs	r0, r3
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	b007      	add	sp, #28
 800bdc0:	bd90      	pop	{r4, r7, pc}
 800bdc2:	46c0      	nop			@ (mov r8, r8)
 800bdc4:	ffff0000 	.word	0xffff0000

0800bdc8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b086      	sub	sp, #24
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	60b9      	str	r1, [r7, #8]
 800bdd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdd8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2240      	movs	r2, #64	@ 0x40
 800bde2:	5c9b      	ldrb	r3, [r3, r2]
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d101      	bne.n	800bdec <I2C_Slave_ISR_IT+0x24>
 800bde8:	2302      	movs	r3, #2
 800bdea:	e0e6      	b.n	800bfba <I2C_Slave_ISR_IT+0x1f2>
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2240      	movs	r2, #64	@ 0x40
 800bdf0:	2101      	movs	r1, #1
 800bdf2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	2220      	movs	r2, #32
 800bdf8:	4013      	ands	r3, r2
 800bdfa:	d009      	beq.n	800be10 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2220      	movs	r2, #32
 800be00:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800be02:	d005      	beq.n	800be10 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800be04:	693a      	ldr	r2, [r7, #16]
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	0011      	movs	r1, r2
 800be0a:	0018      	movs	r0, r3
 800be0c:	f000 fdf2 	bl	800c9f4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	2210      	movs	r2, #16
 800be14:	4013      	ands	r3, r2
 800be16:	d052      	beq.n	800bebe <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2210      	movs	r2, #16
 800be1c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800be1e:	d04e      	beq.n	800bebe <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be24:	b29b      	uxth	r3, r3
 800be26:	2b00      	cmp	r3, #0
 800be28:	d12d      	bne.n	800be86 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2241      	movs	r2, #65	@ 0x41
 800be2e:	5c9b      	ldrb	r3, [r3, r2]
 800be30:	b2db      	uxtb	r3, r3
 800be32:	2b28      	cmp	r3, #40	@ 0x28
 800be34:	d10b      	bne.n	800be4e <I2C_Slave_ISR_IT+0x86>
 800be36:	697a      	ldr	r2, [r7, #20]
 800be38:	2380      	movs	r3, #128	@ 0x80
 800be3a:	049b      	lsls	r3, r3, #18
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d106      	bne.n	800be4e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800be40:	693a      	ldr	r2, [r7, #16]
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	0011      	movs	r1, r2
 800be46:	0018      	movs	r0, r3
 800be48:	f000 fef4 	bl	800cc34 <I2C_ITListenCplt>
 800be4c:	e036      	b.n	800bebc <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2241      	movs	r2, #65	@ 0x41
 800be52:	5c9b      	ldrb	r3, [r3, r2]
 800be54:	b2db      	uxtb	r3, r3
 800be56:	2b29      	cmp	r3, #41	@ 0x29
 800be58:	d110      	bne.n	800be7c <I2C_Slave_ISR_IT+0xb4>
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	4a59      	ldr	r2, [pc, #356]	@ (800bfc4 <I2C_Slave_ISR_IT+0x1fc>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d00c      	beq.n	800be7c <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	2210      	movs	r2, #16
 800be68:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	0018      	movs	r0, r3
 800be6e:	f001 f864 	bl	800cf3a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	0018      	movs	r0, r3
 800be76:	f000 fc8b 	bl	800c790 <I2C_ITSlaveSeqCplt>
 800be7a:	e01f      	b.n	800bebc <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	2210      	movs	r2, #16
 800be82:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800be84:	e091      	b.n	800bfaa <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	2210      	movs	r2, #16
 800be8c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be92:	2204      	movs	r2, #4
 800be94:	431a      	orrs	r2, r3
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d005      	beq.n	800beac <I2C_Slave_ISR_IT+0xe4>
 800bea0:	697a      	ldr	r2, [r7, #20]
 800bea2:	2380      	movs	r3, #128	@ 0x80
 800bea4:	045b      	lsls	r3, r3, #17
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d000      	beq.n	800beac <I2C_Slave_ISR_IT+0xe4>
 800beaa:	e07e      	b.n	800bfaa <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	0011      	movs	r1, r2
 800beb4:	0018      	movs	r0, r3
 800beb6:	f000 ff15 	bl	800cce4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800beba:	e076      	b.n	800bfaa <I2C_Slave_ISR_IT+0x1e2>
 800bebc:	e075      	b.n	800bfaa <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	2204      	movs	r2, #4
 800bec2:	4013      	ands	r3, r2
 800bec4:	d02f      	beq.n	800bf26 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2204      	movs	r2, #4
 800beca:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800becc:	d02b      	beq.n	800bf26 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d018      	beq.n	800bf0a <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bee2:	b2d2      	uxtb	r2, r2
 800bee4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beea:	1c5a      	adds	r2, r3, #1
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bef4:	3b01      	subs	r3, #1
 800bef6:	b29a      	uxth	r2, r3
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	3b01      	subs	r3, #1
 800bf04:	b29a      	uxth	r2, r3
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d14c      	bne.n	800bfae <I2C_Slave_ISR_IT+0x1e6>
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	4a2b      	ldr	r2, [pc, #172]	@ (800bfc4 <I2C_Slave_ISR_IT+0x1fc>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d048      	beq.n	800bfae <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	0018      	movs	r0, r3
 800bf20:	f000 fc36 	bl	800c790 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800bf24:	e043      	b.n	800bfae <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	2208      	movs	r2, #8
 800bf2a:	4013      	ands	r3, r2
 800bf2c:	d00a      	beq.n	800bf44 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2208      	movs	r2, #8
 800bf32:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800bf34:	d006      	beq.n	800bf44 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800bf36:	693a      	ldr	r2, [r7, #16]
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	0011      	movs	r1, r2
 800bf3c:	0018      	movs	r0, r3
 800bf3e:	f000 fb41 	bl	800c5c4 <I2C_ITAddrCplt>
 800bf42:	e035      	b.n	800bfb0 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	2202      	movs	r2, #2
 800bf48:	4013      	ands	r3, r2
 800bf4a:	d031      	beq.n	800bfb0 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2202      	movs	r2, #2
 800bf50:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800bf52:	d02d      	beq.n	800bfb0 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d018      	beq.n	800bf90 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf62:	781a      	ldrb	r2, [r3, #0]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf6e:	1c5a      	adds	r2, r3, #1
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf78:	b29b      	uxth	r3, r3
 800bf7a:	3b01      	subs	r3, #1
 800bf7c:	b29a      	uxth	r2, r3
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bf86:	3b01      	subs	r3, #1
 800bf88:	b29a      	uxth	r2, r3
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800bf8e:	e00f      	b.n	800bfb0 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800bf90:	697a      	ldr	r2, [r7, #20]
 800bf92:	2380      	movs	r3, #128	@ 0x80
 800bf94:	045b      	lsls	r3, r3, #17
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d002      	beq.n	800bfa0 <I2C_Slave_ISR_IT+0x1d8>
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d107      	bne.n	800bfb0 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	0018      	movs	r0, r3
 800bfa4:	f000 fbf4 	bl	800c790 <I2C_ITSlaveSeqCplt>
 800bfa8:	e002      	b.n	800bfb0 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800bfaa:	46c0      	nop			@ (mov r8, r8)
 800bfac:	e000      	b.n	800bfb0 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800bfae:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2240      	movs	r2, #64	@ 0x40
 800bfb4:	2100      	movs	r1, #0
 800bfb6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bfb8:	2300      	movs	r3, #0
}
 800bfba:	0018      	movs	r0, r3
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	b006      	add	sp, #24
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	46c0      	nop			@ (mov r8, r8)
 800bfc4:	ffff0000 	.word	0xffff0000

0800bfc8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800bfc8:	b590      	push	{r4, r7, lr}
 800bfca:	b089      	sub	sp, #36	@ 0x24
 800bfcc:	af02      	add	r7, sp, #8
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	60b9      	str	r1, [r7, #8]
 800bfd2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2240      	movs	r2, #64	@ 0x40
 800bfd8:	5c9b      	ldrb	r3, [r3, r2]
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d101      	bne.n	800bfe2 <I2C_Master_ISR_DMA+0x1a>
 800bfde:	2302      	movs	r3, #2
 800bfe0:	e0e7      	b.n	800c1b2 <I2C_Master_ISR_DMA+0x1ea>
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2240      	movs	r2, #64	@ 0x40
 800bfe6:	2101      	movs	r1, #1
 800bfe8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	2210      	movs	r2, #16
 800bfee:	4013      	ands	r3, r2
 800bff0:	d017      	beq.n	800c022 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2210      	movs	r2, #16
 800bff6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800bff8:	d013      	beq.n	800c022 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2210      	movs	r2, #16
 800c000:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c006:	2204      	movs	r2, #4
 800c008:	431a      	orrs	r2, r3
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2120      	movs	r1, #32
 800c012:	0018      	movs	r0, r3
 800c014:	f001 f8c6 	bl	800d1a4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	0018      	movs	r0, r3
 800c01c:	f000 ff8d 	bl	800cf3a <I2C_Flush_TXDR>
 800c020:	e0c2      	b.n	800c1a8 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	2280      	movs	r2, #128	@ 0x80
 800c026:	4013      	ands	r3, r2
 800c028:	d100      	bne.n	800c02c <I2C_Master_ISR_DMA+0x64>
 800c02a:	e07c      	b.n	800c126 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2240      	movs	r2, #64	@ 0x40
 800c030:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c032:	d100      	bne.n	800c036 <I2C_Master_ISR_DMA+0x6e>
 800c034:	e077      	b.n	800c126 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	681a      	ldr	r2, [r3, #0]
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2140      	movs	r1, #64	@ 0x40
 800c042:	438a      	bics	r2, r1
 800c044:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d055      	beq.n	800c0fc <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	b29a      	uxth	r2, r3
 800c058:	2312      	movs	r3, #18
 800c05a:	18fb      	adds	r3, r7, r3
 800c05c:	0592      	lsls	r2, r2, #22
 800c05e:	0d92      	lsrs	r2, r2, #22
 800c060:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c066:	b29b      	uxth	r3, r3
 800c068:	2bff      	cmp	r3, #255	@ 0xff
 800c06a:	d906      	bls.n	800c07a <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	22ff      	movs	r2, #255	@ 0xff
 800c070:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800c072:	2380      	movs	r3, #128	@ 0x80
 800c074:	045b      	lsls	r3, r3, #17
 800c076:	617b      	str	r3, [r7, #20]
 800c078:	e010      	b.n	800c09c <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c07e:	b29a      	uxth	r2, r3
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c088:	4a4c      	ldr	r2, [pc, #304]	@ (800c1bc <I2C_Master_ISR_DMA+0x1f4>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d003      	beq.n	800c096 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c092:	617b      	str	r3, [r7, #20]
 800c094:	e002      	b.n	800c09c <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800c096:	2380      	movs	r3, #128	@ 0x80
 800c098:	049b      	lsls	r3, r3, #18
 800c09a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c0a0:	b2da      	uxtb	r2, r3
 800c0a2:	697c      	ldr	r4, [r7, #20]
 800c0a4:	2312      	movs	r3, #18
 800c0a6:	18fb      	adds	r3, r7, r3
 800c0a8:	8819      	ldrh	r1, [r3, #0]
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	9300      	str	r3, [sp, #0]
 800c0b0:	0023      	movs	r3, r4
 800c0b2:	f001 f83d 	bl	800d130 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0ba:	b29a      	uxth	r2, r3
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c0c0:	1ad3      	subs	r3, r2, r3
 800c0c2:	b29a      	uxth	r2, r3
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2241      	movs	r2, #65	@ 0x41
 800c0cc:	5c9b      	ldrb	r3, [r3, r2]
 800c0ce:	b2db      	uxtb	r3, r3
 800c0d0:	2b22      	cmp	r3, #34	@ 0x22
 800c0d2:	d109      	bne.n	800c0e8 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	681a      	ldr	r2, [r3, #0]
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	2180      	movs	r1, #128	@ 0x80
 800c0e0:	0209      	lsls	r1, r1, #8
 800c0e2:	430a      	orrs	r2, r1
 800c0e4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c0e6:	e05f      	b.n	800c1a8 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	2180      	movs	r1, #128	@ 0x80
 800c0f4:	01c9      	lsls	r1, r1, #7
 800c0f6:	430a      	orrs	r2, r1
 800c0f8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c0fa:	e055      	b.n	800c1a8 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	685a      	ldr	r2, [r3, #4]
 800c102:	2380      	movs	r3, #128	@ 0x80
 800c104:	049b      	lsls	r3, r3, #18
 800c106:	401a      	ands	r2, r3
 800c108:	2380      	movs	r3, #128	@ 0x80
 800c10a:	049b      	lsls	r3, r3, #18
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d004      	beq.n	800c11a <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	0018      	movs	r0, r3
 800c114:	f000 fafa 	bl	800c70c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800c118:	e046      	b.n	800c1a8 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2140      	movs	r1, #64	@ 0x40
 800c11e:	0018      	movs	r0, r3
 800c120:	f000 fde0 	bl	800cce4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c124:	e040      	b.n	800c1a8 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	2240      	movs	r2, #64	@ 0x40
 800c12a:	4013      	ands	r3, r2
 800c12c:	d02c      	beq.n	800c188 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2240      	movs	r2, #64	@ 0x40
 800c132:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c134:	d028      	beq.n	800c188 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d11d      	bne.n	800c17c <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	685a      	ldr	r2, [r3, #4]
 800c146:	2380      	movs	r3, #128	@ 0x80
 800c148:	049b      	lsls	r3, r3, #18
 800c14a:	401a      	ands	r2, r3
 800c14c:	2380      	movs	r3, #128	@ 0x80
 800c14e:	049b      	lsls	r3, r3, #18
 800c150:	429a      	cmp	r2, r3
 800c152:	d028      	beq.n	800c1a6 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c158:	4a18      	ldr	r2, [pc, #96]	@ (800c1bc <I2C_Master_ISR_DMA+0x1f4>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d109      	bne.n	800c172 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	685a      	ldr	r2, [r3, #4]
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	2180      	movs	r1, #128	@ 0x80
 800c16a:	01c9      	lsls	r1, r1, #7
 800c16c:	430a      	orrs	r2, r1
 800c16e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800c170:	e019      	b.n	800c1a6 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	0018      	movs	r0, r3
 800c176:	f000 fac9 	bl	800c70c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800c17a:	e014      	b.n	800c1a6 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2140      	movs	r1, #64	@ 0x40
 800c180:	0018      	movs	r0, r3
 800c182:	f000 fdaf 	bl	800cce4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c186:	e00e      	b.n	800c1a6 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	2220      	movs	r2, #32
 800c18c:	4013      	ands	r3, r2
 800c18e:	d00b      	beq.n	800c1a8 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2220      	movs	r2, #32
 800c194:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c196:	d007      	beq.n	800c1a8 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c198:	68ba      	ldr	r2, [r7, #8]
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	0011      	movs	r1, r2
 800c19e:	0018      	movs	r0, r3
 800c1a0:	f000 fb5a 	bl	800c858 <I2C_ITMasterCplt>
 800c1a4:	e000      	b.n	800c1a8 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800c1a6:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2240      	movs	r2, #64	@ 0x40
 800c1ac:	2100      	movs	r1, #0
 800c1ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c1b0:	2300      	movs	r3, #0
}
 800c1b2:	0018      	movs	r0, r3
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	b007      	add	sp, #28
 800c1b8:	bd90      	pop	{r4, r7, pc}
 800c1ba:	46c0      	nop			@ (mov r8, r8)
 800c1bc:	ffff0000 	.word	0xffff0000

0800c1c0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800c1c0:	b590      	push	{r4, r7, lr}
 800c1c2:	b089      	sub	sp, #36	@ 0x24
 800c1c4:	af02      	add	r7, sp, #8
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800c1cc:	4b88      	ldr	r3, [pc, #544]	@ (800c3f0 <I2C_Mem_ISR_DMA+0x230>)
 800c1ce:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2240      	movs	r2, #64	@ 0x40
 800c1d4:	5c9b      	ldrb	r3, [r3, r2]
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	d101      	bne.n	800c1de <I2C_Mem_ISR_DMA+0x1e>
 800c1da:	2302      	movs	r3, #2
 800c1dc:	e104      	b.n	800c3e8 <I2C_Mem_ISR_DMA+0x228>
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2240      	movs	r2, #64	@ 0x40
 800c1e2:	2101      	movs	r1, #1
 800c1e4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	2210      	movs	r2, #16
 800c1ea:	4013      	ands	r3, r2
 800c1ec:	d017      	beq.n	800c21e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2210      	movs	r2, #16
 800c1f2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c1f4:	d013      	beq.n	800c21e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	2210      	movs	r2, #16
 800c1fc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c202:	2204      	movs	r2, #4
 800c204:	431a      	orrs	r2, r3
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2120      	movs	r1, #32
 800c20e:	0018      	movs	r0, r3
 800c210:	f000 ffc8 	bl	800d1a4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	0018      	movs	r0, r3
 800c218:	f000 fe8f 	bl	800cf3a <I2C_Flush_TXDR>
 800c21c:	e0df      	b.n	800c3de <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	2202      	movs	r2, #2
 800c222:	4013      	ands	r3, r2
 800c224:	d00d      	beq.n	800c242 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2202      	movs	r2, #2
 800c22a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c22c:	d009      	beq.n	800c242 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	68fa      	ldr	r2, [r7, #12]
 800c234:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c236:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2201      	movs	r2, #1
 800c23c:	4252      	negs	r2, r2
 800c23e:	651a      	str	r2, [r3, #80]	@ 0x50
 800c240:	e0cd      	b.n	800c3de <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	2280      	movs	r2, #128	@ 0x80
 800c246:	4013      	ands	r3, r2
 800c248:	d05e      	beq.n	800c308 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2240      	movs	r2, #64	@ 0x40
 800c24e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c250:	d05a      	beq.n	800c308 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2110      	movs	r1, #16
 800c256:	0018      	movs	r0, r3
 800c258:	f000 ffa4 	bl	800d1a4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c260:	b29b      	uxth	r3, r3
 800c262:	2b00      	cmp	r3, #0
 800c264:	d04a      	beq.n	800c2fc <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	2bff      	cmp	r3, #255	@ 0xff
 800c26e:	d910      	bls.n	800c292 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	22ff      	movs	r2, #255	@ 0xff
 800c274:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c27a:	b299      	uxth	r1, r3
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c280:	b2da      	uxtb	r2, r3
 800c282:	2380      	movs	r3, #128	@ 0x80
 800c284:	045b      	lsls	r3, r3, #17
 800c286:	68f8      	ldr	r0, [r7, #12]
 800c288:	2400      	movs	r4, #0
 800c28a:	9400      	str	r4, [sp, #0]
 800c28c:	f000 ff50 	bl	800d130 <I2C_TransferConfig>
 800c290:	e011      	b.n	800c2b6 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c296:	b29a      	uxth	r2, r3
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2a0:	b299      	uxth	r1, r3
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c2a6:	b2da      	uxtb	r2, r3
 800c2a8:	2380      	movs	r3, #128	@ 0x80
 800c2aa:	049b      	lsls	r3, r3, #18
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	2400      	movs	r4, #0
 800c2b0:	9400      	str	r4, [sp, #0]
 800c2b2:	f000 ff3d 	bl	800d130 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c2ba:	b29a      	uxth	r2, r3
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c2c0:	1ad3      	subs	r3, r2, r3
 800c2c2:	b29a      	uxth	r2, r3
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	2241      	movs	r2, #65	@ 0x41
 800c2cc:	5c9b      	ldrb	r3, [r3, r2]
 800c2ce:	b2db      	uxtb	r3, r3
 800c2d0:	2b22      	cmp	r3, #34	@ 0x22
 800c2d2:	d109      	bne.n	800c2e8 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	2180      	movs	r1, #128	@ 0x80
 800c2e0:	0209      	lsls	r1, r1, #8
 800c2e2:	430a      	orrs	r2, r1
 800c2e4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c2e6:	e07a      	b.n	800c3de <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	681a      	ldr	r2, [r3, #0]
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	2180      	movs	r1, #128	@ 0x80
 800c2f4:	01c9      	lsls	r1, r1, #7
 800c2f6:	430a      	orrs	r2, r1
 800c2f8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c2fa:	e070      	b.n	800c3de <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2140      	movs	r1, #64	@ 0x40
 800c300:	0018      	movs	r0, r3
 800c302:	f000 fcef 	bl	800cce4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c306:	e06a      	b.n	800c3de <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	2240      	movs	r2, #64	@ 0x40
 800c30c:	4013      	ands	r3, r2
 800c30e:	d058      	beq.n	800c3c2 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2240      	movs	r2, #64	@ 0x40
 800c314:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c316:	d054      	beq.n	800c3c2 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2241      	movs	r2, #65	@ 0x41
 800c31c:	5c9b      	ldrb	r3, [r3, r2]
 800c31e:	b2db      	uxtb	r3, r3
 800c320:	2b22      	cmp	r3, #34	@ 0x22
 800c322:	d101      	bne.n	800c328 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800c324:	4b33      	ldr	r3, [pc, #204]	@ (800c3f4 <I2C_Mem_ISR_DMA+0x234>)
 800c326:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	2bff      	cmp	r3, #255	@ 0xff
 800c330:	d911      	bls.n	800c356 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	22ff      	movs	r2, #255	@ 0xff
 800c336:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c33c:	b299      	uxth	r1, r3
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c342:	b2da      	uxtb	r2, r3
 800c344:	2380      	movs	r3, #128	@ 0x80
 800c346:	045c      	lsls	r4, r3, #17
 800c348:	68f8      	ldr	r0, [r7, #12]
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	9300      	str	r3, [sp, #0]
 800c34e:	0023      	movs	r3, r4
 800c350:	f000 feee 	bl	800d130 <I2C_TransferConfig>
 800c354:	e012      	b.n	800c37c <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c35a:	b29a      	uxth	r2, r3
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c364:	b299      	uxth	r1, r3
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c36a:	b2da      	uxtb	r2, r3
 800c36c:	2380      	movs	r3, #128	@ 0x80
 800c36e:	049c      	lsls	r4, r3, #18
 800c370:	68f8      	ldr	r0, [r7, #12]
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	9300      	str	r3, [sp, #0]
 800c376:	0023      	movs	r3, r4
 800c378:	f000 feda 	bl	800d130 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c380:	b29a      	uxth	r2, r3
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c386:	1ad3      	subs	r3, r2, r3
 800c388:	b29a      	uxth	r2, r3
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	2241      	movs	r2, #65	@ 0x41
 800c392:	5c9b      	ldrb	r3, [r3, r2]
 800c394:	b2db      	uxtb	r3, r3
 800c396:	2b22      	cmp	r3, #34	@ 0x22
 800c398:	d109      	bne.n	800c3ae <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	2180      	movs	r1, #128	@ 0x80
 800c3a6:	0209      	lsls	r1, r1, #8
 800c3a8:	430a      	orrs	r2, r1
 800c3aa:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c3ac:	e017      	b.n	800c3de <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	681a      	ldr	r2, [r3, #0]
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	2180      	movs	r1, #128	@ 0x80
 800c3ba:	01c9      	lsls	r1, r1, #7
 800c3bc:	430a      	orrs	r2, r1
 800c3be:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c3c0:	e00d      	b.n	800c3de <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	2220      	movs	r2, #32
 800c3c6:	4013      	ands	r3, r2
 800c3c8:	d009      	beq.n	800c3de <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2220      	movs	r2, #32
 800c3ce:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c3d0:	d005      	beq.n	800c3de <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c3d2:	68ba      	ldr	r2, [r7, #8]
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	0011      	movs	r1, r2
 800c3d8:	0018      	movs	r0, r3
 800c3da:	f000 fa3d 	bl	800c858 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2240      	movs	r2, #64	@ 0x40
 800c3e2:	2100      	movs	r1, #0
 800c3e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c3e6:	2300      	movs	r3, #0
}
 800c3e8:	0018      	movs	r0, r3
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	b007      	add	sp, #28
 800c3ee:	bd90      	pop	{r4, r7, pc}
 800c3f0:	80002000 	.word	0x80002000
 800c3f4:	80002400 	.word	0x80002400

0800c3f8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b088      	sub	sp, #32
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	60f8      	str	r0, [r7, #12]
 800c400:	60b9      	str	r1, [r7, #8]
 800c402:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c408:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800c40a:	2300      	movs	r3, #0
 800c40c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2240      	movs	r2, #64	@ 0x40
 800c412:	5c9b      	ldrb	r3, [r3, r2]
 800c414:	2b01      	cmp	r3, #1
 800c416:	d101      	bne.n	800c41c <I2C_Slave_ISR_DMA+0x24>
 800c418:	2302      	movs	r3, #2
 800c41a:	e0cd      	b.n	800c5b8 <I2C_Slave_ISR_DMA+0x1c0>
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2240      	movs	r2, #64	@ 0x40
 800c420:	2101      	movs	r1, #1
 800c422:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	2220      	movs	r2, #32
 800c428:	4013      	ands	r3, r2
 800c42a:	d009      	beq.n	800c440 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2220      	movs	r2, #32
 800c430:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c432:	d005      	beq.n	800c440 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800c434:	68ba      	ldr	r2, [r7, #8]
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	0011      	movs	r1, r2
 800c43a:	0018      	movs	r0, r3
 800c43c:	f000 fada 	bl	800c9f4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	2210      	movs	r2, #16
 800c444:	4013      	ands	r3, r2
 800c446:	d100      	bne.n	800c44a <I2C_Slave_ISR_DMA+0x52>
 800c448:	e0a3      	b.n	800c592 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2210      	movs	r2, #16
 800c44e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c450:	d100      	bne.n	800c454 <I2C_Slave_ISR_DMA+0x5c>
 800c452:	e09e      	b.n	800c592 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	2380      	movs	r3, #128	@ 0x80
 800c458:	01db      	lsls	r3, r3, #7
 800c45a:	4013      	ands	r3, r2
 800c45c:	d105      	bne.n	800c46a <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	2380      	movs	r3, #128	@ 0x80
 800c462:	021b      	lsls	r3, r3, #8
 800c464:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c466:	d100      	bne.n	800c46a <I2C_Slave_ISR_DMA+0x72>
 800c468:	e08c      	b.n	800c584 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d00c      	beq.n	800c48c <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	2380      	movs	r3, #128	@ 0x80
 800c476:	021b      	lsls	r3, r3, #8
 800c478:	4013      	ands	r3, r2
 800c47a:	d007      	beq.n	800c48c <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d101      	bne.n	800c48c <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800c488:	2301      	movs	r3, #1
 800c48a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c490:	2b00      	cmp	r3, #0
 800c492:	d00c      	beq.n	800c4ae <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	2380      	movs	r3, #128	@ 0x80
 800c498:	01db      	lsls	r3, r3, #7
 800c49a:	4013      	ands	r3, r2
 800c49c:	d007      	beq.n	800c4ae <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d101      	bne.n	800c4ae <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d12d      	bne.n	800c510 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2241      	movs	r2, #65	@ 0x41
 800c4b8:	5c9b      	ldrb	r3, [r3, r2]
 800c4ba:	b2db      	uxtb	r3, r3
 800c4bc:	2b28      	cmp	r3, #40	@ 0x28
 800c4be:	d10b      	bne.n	800c4d8 <I2C_Slave_ISR_DMA+0xe0>
 800c4c0:	69ba      	ldr	r2, [r7, #24]
 800c4c2:	2380      	movs	r3, #128	@ 0x80
 800c4c4:	049b      	lsls	r3, r3, #18
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d106      	bne.n	800c4d8 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800c4ca:	68ba      	ldr	r2, [r7, #8]
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	0011      	movs	r1, r2
 800c4d0:	0018      	movs	r0, r3
 800c4d2:	f000 fbaf 	bl	800cc34 <I2C_ITListenCplt>
 800c4d6:	e054      	b.n	800c582 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	2241      	movs	r2, #65	@ 0x41
 800c4dc:	5c9b      	ldrb	r3, [r3, r2]
 800c4de:	b2db      	uxtb	r3, r3
 800c4e0:	2b29      	cmp	r3, #41	@ 0x29
 800c4e2:	d110      	bne.n	800c506 <I2C_Slave_ISR_DMA+0x10e>
 800c4e4:	69bb      	ldr	r3, [r7, #24]
 800c4e6:	4a36      	ldr	r2, [pc, #216]	@ (800c5c0 <I2C_Slave_ISR_DMA+0x1c8>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d00c      	beq.n	800c506 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	2210      	movs	r2, #16
 800c4f2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	0018      	movs	r0, r3
 800c4f8:	f000 fd1f 	bl	800cf3a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	0018      	movs	r0, r3
 800c500:	f000 f946 	bl	800c790 <I2C_ITSlaveSeqCplt>
 800c504:	e03d      	b.n	800c582 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	2210      	movs	r2, #16
 800c50c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800c50e:	e03e      	b.n	800c58e <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	2210      	movs	r2, #16
 800c516:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c51c:	2204      	movs	r2, #4
 800c51e:	431a      	orrs	r2, r3
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800c524:	2317      	movs	r3, #23
 800c526:	18fb      	adds	r3, r7, r3
 800c528:	68fa      	ldr	r2, [r7, #12]
 800c52a:	2141      	movs	r1, #65	@ 0x41
 800c52c:	5c52      	ldrb	r2, [r2, r1]
 800c52e:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c530:	69bb      	ldr	r3, [r7, #24]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d004      	beq.n	800c540 <I2C_Slave_ISR_DMA+0x148>
 800c536:	69ba      	ldr	r2, [r7, #24]
 800c538:	2380      	movs	r3, #128	@ 0x80
 800c53a:	045b      	lsls	r3, r3, #17
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d126      	bne.n	800c58e <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c540:	2217      	movs	r2, #23
 800c542:	18bb      	adds	r3, r7, r2
 800c544:	781b      	ldrb	r3, [r3, #0]
 800c546:	2b21      	cmp	r3, #33	@ 0x21
 800c548:	d003      	beq.n	800c552 <I2C_Slave_ISR_DMA+0x15a>
 800c54a:	18bb      	adds	r3, r7, r2
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	2b29      	cmp	r3, #41	@ 0x29
 800c550:	d103      	bne.n	800c55a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	2221      	movs	r2, #33	@ 0x21
 800c556:	631a      	str	r2, [r3, #48]	@ 0x30
 800c558:	e00b      	b.n	800c572 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c55a:	2217      	movs	r2, #23
 800c55c:	18bb      	adds	r3, r7, r2
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	2b22      	cmp	r3, #34	@ 0x22
 800c562:	d003      	beq.n	800c56c <I2C_Slave_ISR_DMA+0x174>
 800c564:	18bb      	adds	r3, r7, r2
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	2b2a      	cmp	r3, #42	@ 0x2a
 800c56a:	d102      	bne.n	800c572 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2222      	movs	r2, #34	@ 0x22
 800c570:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	0011      	movs	r1, r2
 800c57a:	0018      	movs	r0, r3
 800c57c:	f000 fbb2 	bl	800cce4 <I2C_ITError>
      if (treatdmanack == 1U)
 800c580:	e005      	b.n	800c58e <I2C_Slave_ISR_DMA+0x196>
 800c582:	e004      	b.n	800c58e <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	2210      	movs	r2, #16
 800c58a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c58c:	e00f      	b.n	800c5ae <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800c58e:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c590:	e00d      	b.n	800c5ae <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	2208      	movs	r2, #8
 800c596:	4013      	ands	r3, r2
 800c598:	d009      	beq.n	800c5ae <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2208      	movs	r2, #8
 800c59e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c5a0:	d005      	beq.n	800c5ae <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800c5a2:	68ba      	ldr	r2, [r7, #8]
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	0011      	movs	r1, r2
 800c5a8:	0018      	movs	r0, r3
 800c5aa:	f000 f80b 	bl	800c5c4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2240      	movs	r2, #64	@ 0x40
 800c5b2:	2100      	movs	r1, #0
 800c5b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c5b6:	2300      	movs	r3, #0
}
 800c5b8:	0018      	movs	r0, r3
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	b008      	add	sp, #32
 800c5be:	bd80      	pop	{r7, pc}
 800c5c0:	ffff0000 	.word	0xffff0000

0800c5c4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c5c4:	b5b0      	push	{r4, r5, r7, lr}
 800c5c6:	b084      	sub	sp, #16
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2241      	movs	r2, #65	@ 0x41
 800c5d2:	5c9b      	ldrb	r3, [r3, r2]
 800c5d4:	b2db      	uxtb	r3, r3
 800c5d6:	001a      	movs	r2, r3
 800c5d8:	2328      	movs	r3, #40	@ 0x28
 800c5da:	4013      	ands	r3, r2
 800c5dc:	2b28      	cmp	r3, #40	@ 0x28
 800c5de:	d000      	beq.n	800c5e2 <I2C_ITAddrCplt+0x1e>
 800c5e0:	e088      	b.n	800c6f4 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	699b      	ldr	r3, [r3, #24]
 800c5e8:	0c1b      	lsrs	r3, r3, #16
 800c5ea:	b2da      	uxtb	r2, r3
 800c5ec:	250f      	movs	r5, #15
 800c5ee:	197b      	adds	r3, r7, r5
 800c5f0:	2101      	movs	r1, #1
 800c5f2:	400a      	ands	r2, r1
 800c5f4:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	699b      	ldr	r3, [r3, #24]
 800c5fc:	0c1b      	lsrs	r3, r3, #16
 800c5fe:	b29a      	uxth	r2, r3
 800c600:	200c      	movs	r0, #12
 800c602:	183b      	adds	r3, r7, r0
 800c604:	21fe      	movs	r1, #254	@ 0xfe
 800c606:	400a      	ands	r2, r1
 800c608:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	689b      	ldr	r3, [r3, #8]
 800c610:	b29a      	uxth	r2, r3
 800c612:	240a      	movs	r4, #10
 800c614:	193b      	adds	r3, r7, r4
 800c616:	0592      	lsls	r2, r2, #22
 800c618:	0d92      	lsrs	r2, r2, #22
 800c61a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	68db      	ldr	r3, [r3, #12]
 800c622:	b29a      	uxth	r2, r3
 800c624:	2308      	movs	r3, #8
 800c626:	18fb      	adds	r3, r7, r3
 800c628:	21fe      	movs	r1, #254	@ 0xfe
 800c62a:	400a      	ands	r2, r1
 800c62c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	2b02      	cmp	r3, #2
 800c634:	d148      	bne.n	800c6c8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800c636:	0021      	movs	r1, r4
 800c638:	187b      	adds	r3, r7, r1
 800c63a:	881b      	ldrh	r3, [r3, #0]
 800c63c:	09db      	lsrs	r3, r3, #7
 800c63e:	b29a      	uxth	r2, r3
 800c640:	183b      	adds	r3, r7, r0
 800c642:	881b      	ldrh	r3, [r3, #0]
 800c644:	4053      	eors	r3, r2
 800c646:	b29b      	uxth	r3, r3
 800c648:	001a      	movs	r2, r3
 800c64a:	2306      	movs	r3, #6
 800c64c:	4013      	ands	r3, r2
 800c64e:	d120      	bne.n	800c692 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800c650:	183b      	adds	r3, r7, r0
 800c652:	187a      	adds	r2, r7, r1
 800c654:	8812      	ldrh	r2, [r2, #0]
 800c656:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c65c:	1c5a      	adds	r2, r3, #1
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c666:	2b02      	cmp	r3, #2
 800c668:	d14c      	bne.n	800c704 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2200      	movs	r2, #0
 800c66e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	2208      	movs	r2, #8
 800c676:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2240      	movs	r2, #64	@ 0x40
 800c67c:	2100      	movs	r1, #0
 800c67e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c680:	183b      	adds	r3, r7, r0
 800c682:	881a      	ldrh	r2, [r3, #0]
 800c684:	197b      	adds	r3, r7, r5
 800c686:	7819      	ldrb	r1, [r3, #0]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	0018      	movs	r0, r3
 800c68c:	f7ff fa39 	bl	800bb02 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c690:	e038      	b.n	800c704 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800c692:	240c      	movs	r4, #12
 800c694:	193b      	adds	r3, r7, r4
 800c696:	2208      	movs	r2, #8
 800c698:	18ba      	adds	r2, r7, r2
 800c69a:	8812      	ldrh	r2, [r2, #0]
 800c69c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c69e:	2380      	movs	r3, #128	@ 0x80
 800c6a0:	021a      	lsls	r2, r3, #8
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	0011      	movs	r1, r2
 800c6a6:	0018      	movs	r0, r3
 800c6a8:	f000 fe0a 	bl	800d2c0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2240      	movs	r2, #64	@ 0x40
 800c6b0:	2100      	movs	r1, #0
 800c6b2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c6b4:	193b      	adds	r3, r7, r4
 800c6b6:	881a      	ldrh	r2, [r3, #0]
 800c6b8:	230f      	movs	r3, #15
 800c6ba:	18fb      	adds	r3, r7, r3
 800c6bc:	7819      	ldrb	r1, [r3, #0]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	0018      	movs	r0, r3
 800c6c2:	f7ff fa1e 	bl	800bb02 <HAL_I2C_AddrCallback>
}
 800c6c6:	e01d      	b.n	800c704 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c6c8:	2380      	movs	r3, #128	@ 0x80
 800c6ca:	021a      	lsls	r2, r3, #8
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	0011      	movs	r1, r2
 800c6d0:	0018      	movs	r0, r3
 800c6d2:	f000 fdf5 	bl	800d2c0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2240      	movs	r2, #64	@ 0x40
 800c6da:	2100      	movs	r1, #0
 800c6dc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c6de:	230c      	movs	r3, #12
 800c6e0:	18fb      	adds	r3, r7, r3
 800c6e2:	881a      	ldrh	r2, [r3, #0]
 800c6e4:	230f      	movs	r3, #15
 800c6e6:	18fb      	adds	r3, r7, r3
 800c6e8:	7819      	ldrb	r1, [r3, #0]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	0018      	movs	r0, r3
 800c6ee:	f7ff fa08 	bl	800bb02 <HAL_I2C_AddrCallback>
}
 800c6f2:	e007      	b.n	800c704 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	2208      	movs	r2, #8
 800c6fa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2240      	movs	r2, #64	@ 0x40
 800c700:	2100      	movs	r1, #0
 800c702:	5499      	strb	r1, [r3, r2]
}
 800c704:	46c0      	nop			@ (mov r8, r8)
 800c706:	46bd      	mov	sp, r7
 800c708:	b004      	add	sp, #16
 800c70a:	bdb0      	pop	{r4, r5, r7, pc}

0800c70c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2242      	movs	r2, #66	@ 0x42
 800c718:	2100      	movs	r1, #0
 800c71a:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2241      	movs	r2, #65	@ 0x41
 800c720:	5c9b      	ldrb	r3, [r3, r2]
 800c722:	b2db      	uxtb	r3, r3
 800c724:	2b21      	cmp	r3, #33	@ 0x21
 800c726:	d117      	bne.n	800c758 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2241      	movs	r2, #65	@ 0x41
 800c72c:	2120      	movs	r1, #32
 800c72e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2211      	movs	r2, #17
 800c734:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2200      	movs	r2, #0
 800c73a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2101      	movs	r1, #1
 800c740:	0018      	movs	r0, r3
 800c742:	f000 fdbd 	bl	800d2c0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2240      	movs	r2, #64	@ 0x40
 800c74a:	2100      	movs	r1, #0
 800c74c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	0018      	movs	r0, r3
 800c752:	f7ff f9b6 	bl	800bac2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c756:	e016      	b.n	800c786 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2241      	movs	r2, #65	@ 0x41
 800c75c:	2120      	movs	r1, #32
 800c75e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2212      	movs	r2, #18
 800c764:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2102      	movs	r1, #2
 800c770:	0018      	movs	r0, r3
 800c772:	f000 fda5 	bl	800d2c0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2240      	movs	r2, #64	@ 0x40
 800c77a:	2100      	movs	r1, #0
 800c77c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	0018      	movs	r0, r3
 800c782:	f7ff f9a6 	bl	800bad2 <HAL_I2C_MasterRxCpltCallback>
}
 800c786:	46c0      	nop			@ (mov r8, r8)
 800c788:	46bd      	mov	sp, r7
 800c78a:	b002      	add	sp, #8
 800c78c:	bd80      	pop	{r7, pc}
	...

0800c790 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b084      	sub	sp, #16
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2242      	movs	r2, #66	@ 0x42
 800c7a4:	2100      	movs	r1, #0
 800c7a6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c7a8:	68fa      	ldr	r2, [r7, #12]
 800c7aa:	2380      	movs	r3, #128	@ 0x80
 800c7ac:	01db      	lsls	r3, r3, #7
 800c7ae:	4013      	ands	r3, r2
 800c7b0:	d008      	beq.n	800c7c4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	681a      	ldr	r2, [r3, #0]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	4924      	ldr	r1, [pc, #144]	@ (800c850 <I2C_ITSlaveSeqCplt+0xc0>)
 800c7be:	400a      	ands	r2, r1
 800c7c0:	601a      	str	r2, [r3, #0]
 800c7c2:	e00c      	b.n	800c7de <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c7c4:	68fa      	ldr	r2, [r7, #12]
 800c7c6:	2380      	movs	r3, #128	@ 0x80
 800c7c8:	021b      	lsls	r3, r3, #8
 800c7ca:	4013      	ands	r3, r2
 800c7cc:	d007      	beq.n	800c7de <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	491e      	ldr	r1, [pc, #120]	@ (800c854 <I2C_ITSlaveSeqCplt+0xc4>)
 800c7da:	400a      	ands	r2, r1
 800c7dc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2241      	movs	r2, #65	@ 0x41
 800c7e2:	5c9b      	ldrb	r3, [r3, r2]
 800c7e4:	b2db      	uxtb	r3, r3
 800c7e6:	2b29      	cmp	r3, #41	@ 0x29
 800c7e8:	d114      	bne.n	800c814 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2241      	movs	r2, #65	@ 0x41
 800c7ee:	2128      	movs	r1, #40	@ 0x28
 800c7f0:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2221      	movs	r2, #33	@ 0x21
 800c7f6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2101      	movs	r1, #1
 800c7fc:	0018      	movs	r0, r3
 800c7fe:	f000 fd5f 	bl	800d2c0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2240      	movs	r2, #64	@ 0x40
 800c806:	2100      	movs	r1, #0
 800c808:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	0018      	movs	r0, r3
 800c80e:	f7ff f968 	bl	800bae2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c812:	e019      	b.n	800c848 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2241      	movs	r2, #65	@ 0x41
 800c818:	5c9b      	ldrb	r3, [r3, r2]
 800c81a:	b2db      	uxtb	r3, r3
 800c81c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c81e:	d113      	bne.n	800c848 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2241      	movs	r2, #65	@ 0x41
 800c824:	2128      	movs	r1, #40	@ 0x28
 800c826:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2222      	movs	r2, #34	@ 0x22
 800c82c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2102      	movs	r1, #2
 800c832:	0018      	movs	r0, r3
 800c834:	f000 fd44 	bl	800d2c0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2240      	movs	r2, #64	@ 0x40
 800c83c:	2100      	movs	r1, #0
 800c83e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	0018      	movs	r0, r3
 800c844:	f7ff f955 	bl	800baf2 <HAL_I2C_SlaveRxCpltCallback>
}
 800c848:	46c0      	nop			@ (mov r8, r8)
 800c84a:	46bd      	mov	sp, r7
 800c84c:	b004      	add	sp, #16
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	ffffbfff 	.word	0xffffbfff
 800c854:	ffff7fff 	.word	0xffff7fff

0800c858 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b086      	sub	sp, #24
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	2220      	movs	r2, #32
 800c86c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2241      	movs	r2, #65	@ 0x41
 800c872:	5c9b      	ldrb	r3, [r3, r2]
 800c874:	b2db      	uxtb	r3, r3
 800c876:	2b21      	cmp	r3, #33	@ 0x21
 800c878:	d108      	bne.n	800c88c <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2101      	movs	r1, #1
 800c87e:	0018      	movs	r0, r3
 800c880:	f000 fd1e 	bl	800d2c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2211      	movs	r2, #17
 800c888:	631a      	str	r2, [r3, #48]	@ 0x30
 800c88a:	e00d      	b.n	800c8a8 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2241      	movs	r2, #65	@ 0x41
 800c890:	5c9b      	ldrb	r3, [r3, r2]
 800c892:	b2db      	uxtb	r3, r3
 800c894:	2b22      	cmp	r3, #34	@ 0x22
 800c896:	d107      	bne.n	800c8a8 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2102      	movs	r1, #2
 800c89c:	0018      	movs	r0, r3
 800c89e:	f000 fd0f 	bl	800d2c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2212      	movs	r2, #18
 800c8a6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	685a      	ldr	r2, [r3, #4]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	494e      	ldr	r1, [pc, #312]	@ (800c9ec <I2C_ITMasterCplt+0x194>)
 800c8b4:	400a      	ands	r2, r1
 800c8b6:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	4a4b      	ldr	r2, [pc, #300]	@ (800c9f0 <I2C_ITMasterCplt+0x198>)
 800c8c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	2210      	movs	r2, #16
 800c8c8:	4013      	ands	r3, r2
 800c8ca:	d009      	beq.n	800c8e0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	2210      	movs	r2, #16
 800c8d2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8d8:	2204      	movs	r2, #4
 800c8da:	431a      	orrs	r2, r3
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2241      	movs	r2, #65	@ 0x41
 800c8e4:	5c9b      	ldrb	r3, [r3, r2]
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	2b60      	cmp	r3, #96	@ 0x60
 800c8ea:	d109      	bne.n	800c900 <I2C_ITMasterCplt+0xa8>
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	2204      	movs	r2, #4
 800c8f0:	4013      	ands	r3, r2
 800c8f2:	d005      	beq.n	800c900 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800c8fe:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	0018      	movs	r0, r3
 800c904:	f000 fb19 	bl	800cf3a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c90c:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2241      	movs	r2, #65	@ 0x41
 800c912:	5c9b      	ldrb	r3, [r3, r2]
 800c914:	b2db      	uxtb	r3, r3
 800c916:	2b60      	cmp	r3, #96	@ 0x60
 800c918:	d002      	beq.n	800c920 <I2C_ITMasterCplt+0xc8>
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d007      	beq.n	800c930 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	0011      	movs	r1, r2
 800c928:	0018      	movs	r0, r3
 800c92a:	f000 f9db 	bl	800cce4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c92e:	e058      	b.n	800c9e2 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2241      	movs	r2, #65	@ 0x41
 800c934:	5c9b      	ldrb	r3, [r3, r2]
 800c936:	b2db      	uxtb	r3, r3
 800c938:	2b21      	cmp	r3, #33	@ 0x21
 800c93a:	d126      	bne.n	800c98a <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2241      	movs	r2, #65	@ 0x41
 800c940:	2120      	movs	r1, #32
 800c942:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2200      	movs	r2, #0
 800c948:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2242      	movs	r2, #66	@ 0x42
 800c94e:	5c9b      	ldrb	r3, [r3, r2]
 800c950:	b2db      	uxtb	r3, r3
 800c952:	2b40      	cmp	r3, #64	@ 0x40
 800c954:	d10c      	bne.n	800c970 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2242      	movs	r2, #66	@ 0x42
 800c95a:	2100      	movs	r1, #0
 800c95c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2240      	movs	r2, #64	@ 0x40
 800c962:	2100      	movs	r1, #0
 800c964:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	0018      	movs	r0, r3
 800c96a:	f7ff f8e2 	bl	800bb32 <HAL_I2C_MemTxCpltCallback>
}
 800c96e:	e038      	b.n	800c9e2 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2242      	movs	r2, #66	@ 0x42
 800c974:	2100      	movs	r1, #0
 800c976:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2240      	movs	r2, #64	@ 0x40
 800c97c:	2100      	movs	r1, #0
 800c97e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	0018      	movs	r0, r3
 800c984:	f7ff f89d 	bl	800bac2 <HAL_I2C_MasterTxCpltCallback>
}
 800c988:	e02b      	b.n	800c9e2 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2241      	movs	r2, #65	@ 0x41
 800c98e:	5c9b      	ldrb	r3, [r3, r2]
 800c990:	b2db      	uxtb	r3, r3
 800c992:	2b22      	cmp	r3, #34	@ 0x22
 800c994:	d125      	bne.n	800c9e2 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2241      	movs	r2, #65	@ 0x41
 800c99a:	2120      	movs	r1, #32
 800c99c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2242      	movs	r2, #66	@ 0x42
 800c9a8:	5c9b      	ldrb	r3, [r3, r2]
 800c9aa:	b2db      	uxtb	r3, r3
 800c9ac:	2b40      	cmp	r3, #64	@ 0x40
 800c9ae:	d10c      	bne.n	800c9ca <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2242      	movs	r2, #66	@ 0x42
 800c9b4:	2100      	movs	r1, #0
 800c9b6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2240      	movs	r2, #64	@ 0x40
 800c9bc:	2100      	movs	r1, #0
 800c9be:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	0018      	movs	r0, r3
 800c9c4:	f7ff f8bd 	bl	800bb42 <HAL_I2C_MemRxCpltCallback>
}
 800c9c8:	e00b      	b.n	800c9e2 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2242      	movs	r2, #66	@ 0x42
 800c9ce:	2100      	movs	r1, #0
 800c9d0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2240      	movs	r2, #64	@ 0x40
 800c9d6:	2100      	movs	r1, #0
 800c9d8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	0018      	movs	r0, r3
 800c9de:	f7ff f878 	bl	800bad2 <HAL_I2C_MasterRxCpltCallback>
}
 800c9e2:	46c0      	nop			@ (mov r8, r8)
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	b006      	add	sp, #24
 800c9e8:	bd80      	pop	{r7, pc}
 800c9ea:	46c0      	nop			@ (mov r8, r8)
 800c9ec:	fe00e800 	.word	0xfe00e800
 800c9f0:	ffff0000 	.word	0xffff0000

0800c9f4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b086      	sub	sp, #24
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ca0a:	200f      	movs	r0, #15
 800ca0c:	183b      	adds	r3, r7, r0
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	2141      	movs	r1, #65	@ 0x41
 800ca12:	5c52      	ldrb	r2, [r2, r1]
 800ca14:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	2220      	movs	r2, #32
 800ca1c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ca1e:	183b      	adds	r3, r7, r0
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	2b21      	cmp	r3, #33	@ 0x21
 800ca24:	d003      	beq.n	800ca2e <I2C_ITSlaveCplt+0x3a>
 800ca26:	183b      	adds	r3, r7, r0
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	2b29      	cmp	r3, #41	@ 0x29
 800ca2c:	d109      	bne.n	800ca42 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800ca2e:	4a7b      	ldr	r2, [pc, #492]	@ (800cc1c <I2C_ITSlaveCplt+0x228>)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	0011      	movs	r1, r2
 800ca34:	0018      	movs	r0, r3
 800ca36:	f000 fc43 	bl	800d2c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2221      	movs	r2, #33	@ 0x21
 800ca3e:	631a      	str	r2, [r3, #48]	@ 0x30
 800ca40:	e011      	b.n	800ca66 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ca42:	220f      	movs	r2, #15
 800ca44:	18bb      	adds	r3, r7, r2
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	2b22      	cmp	r3, #34	@ 0x22
 800ca4a:	d003      	beq.n	800ca54 <I2C_ITSlaveCplt+0x60>
 800ca4c:	18bb      	adds	r3, r7, r2
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca52:	d108      	bne.n	800ca66 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800ca54:	4a72      	ldr	r2, [pc, #456]	@ (800cc20 <I2C_ITSlaveCplt+0x22c>)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	0011      	movs	r1, r2
 800ca5a:	0018      	movs	r0, r3
 800ca5c:	f000 fc30 	bl	800d2c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2222      	movs	r2, #34	@ 0x22
 800ca64:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	685a      	ldr	r2, [r3, #4]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	2180      	movs	r1, #128	@ 0x80
 800ca72:	0209      	lsls	r1, r1, #8
 800ca74:	430a      	orrs	r2, r1
 800ca76:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	685a      	ldr	r2, [r3, #4]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	4968      	ldr	r1, [pc, #416]	@ (800cc24 <I2C_ITSlaveCplt+0x230>)
 800ca84:	400a      	ands	r2, r1
 800ca86:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	0018      	movs	r0, r3
 800ca8c:	f000 fa55 	bl	800cf3a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800ca90:	693a      	ldr	r2, [r7, #16]
 800ca92:	2380      	movs	r3, #128	@ 0x80
 800ca94:	01db      	lsls	r3, r3, #7
 800ca96:	4013      	ands	r3, r2
 800ca98:	d013      	beq.n	800cac2 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	681a      	ldr	r2, [r3, #0]
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	4960      	ldr	r1, [pc, #384]	@ (800cc28 <I2C_ITSlaveCplt+0x234>)
 800caa6:	400a      	ands	r2, r1
 800caa8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d01f      	beq.n	800caf2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	685b      	ldr	r3, [r3, #4]
 800caba:	b29a      	uxth	r2, r3
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800cac0:	e017      	b.n	800caf2 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800cac2:	693a      	ldr	r2, [r7, #16]
 800cac4:	2380      	movs	r3, #128	@ 0x80
 800cac6:	021b      	lsls	r3, r3, #8
 800cac8:	4013      	ands	r3, r2
 800caca:	d012      	beq.n	800caf2 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	681a      	ldr	r2, [r3, #0]
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	4955      	ldr	r1, [pc, #340]	@ (800cc2c <I2C_ITSlaveCplt+0x238>)
 800cad8:	400a      	ands	r2, r1
 800cada:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d006      	beq.n	800caf2 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	b29a      	uxth	r2, r3
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	2204      	movs	r2, #4
 800caf6:	4013      	ands	r3, r2
 800caf8:	d020      	beq.n	800cb3c <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	2204      	movs	r2, #4
 800cafe:	4393      	bics	r3, r2
 800cb00:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb0c:	b2d2      	uxtb	r2, r2
 800cb0e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb14:	1c5a      	adds	r2, r3, #1
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d00c      	beq.n	800cb3c <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cb26:	3b01      	subs	r3, #1
 800cb28:	b29a      	uxth	r2, r3
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cb32:	b29b      	uxth	r3, r3
 800cb34:	3b01      	subs	r3, #1
 800cb36:	b29a      	uxth	r2, r3
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cb40:	b29b      	uxth	r3, r3
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d005      	beq.n	800cb52 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb4a:	2204      	movs	r2, #4
 800cb4c:	431a      	orrs	r2, r3
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2242      	movs	r2, #66	@ 0x42
 800cb56:	2100      	movs	r1, #0
 800cb58:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d013      	beq.n	800cb90 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	0011      	movs	r1, r2
 800cb70:	0018      	movs	r0, r3
 800cb72:	f000 f8b7 	bl	800cce4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2241      	movs	r2, #65	@ 0x41
 800cb7a:	5c9b      	ldrb	r3, [r3, r2]
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	2b28      	cmp	r3, #40	@ 0x28
 800cb80:	d147      	bne.n	800cc12 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800cb82:	697a      	ldr	r2, [r7, #20]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	0011      	movs	r1, r2
 800cb88:	0018      	movs	r0, r3
 800cb8a:	f000 f853 	bl	800cc34 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cb8e:	e040      	b.n	800cc12 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb94:	4a26      	ldr	r2, [pc, #152]	@ (800cc30 <I2C_ITSlaveCplt+0x23c>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d016      	beq.n	800cbc8 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	0018      	movs	r0, r3
 800cb9e:	f7ff fdf7 	bl	800c790 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	4a22      	ldr	r2, [pc, #136]	@ (800cc30 <I2C_ITSlaveCplt+0x23c>)
 800cba6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2241      	movs	r2, #65	@ 0x41
 800cbac:	2120      	movs	r1, #32
 800cbae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2240      	movs	r2, #64	@ 0x40
 800cbba:	2100      	movs	r1, #0
 800cbbc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	0018      	movs	r0, r3
 800cbc2:	f7fe ffae 	bl	800bb22 <HAL_I2C_ListenCpltCallback>
}
 800cbc6:	e024      	b.n	800cc12 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2241      	movs	r2, #65	@ 0x41
 800cbcc:	5c9b      	ldrb	r3, [r3, r2]
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	2b22      	cmp	r3, #34	@ 0x22
 800cbd2:	d10f      	bne.n	800cbf4 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2241      	movs	r2, #65	@ 0x41
 800cbd8:	2120      	movs	r1, #32
 800cbda:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	2240      	movs	r2, #64	@ 0x40
 800cbe6:	2100      	movs	r1, #0
 800cbe8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	0018      	movs	r0, r3
 800cbee:	f7fe ff80 	bl	800baf2 <HAL_I2C_SlaveRxCpltCallback>
}
 800cbf2:	e00e      	b.n	800cc12 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2241      	movs	r2, #65	@ 0x41
 800cbf8:	2120      	movs	r1, #32
 800cbfa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2240      	movs	r2, #64	@ 0x40
 800cc06:	2100      	movs	r1, #0
 800cc08:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	0018      	movs	r0, r3
 800cc0e:	f7fe ff68 	bl	800bae2 <HAL_I2C_SlaveTxCpltCallback>
}
 800cc12:	46c0      	nop			@ (mov r8, r8)
 800cc14:	46bd      	mov	sp, r7
 800cc16:	b006      	add	sp, #24
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	46c0      	nop			@ (mov r8, r8)
 800cc1c:	00008001 	.word	0x00008001
 800cc20:	00008002 	.word	0x00008002
 800cc24:	fe00e800 	.word	0xfe00e800
 800cc28:	ffffbfff 	.word	0xffffbfff
 800cc2c:	ffff7fff 	.word	0xffff7fff
 800cc30:	ffff0000 	.word	0xffff0000

0800cc34 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b082      	sub	sp, #8
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	4a26      	ldr	r2, [pc, #152]	@ (800ccdc <I2C_ITListenCplt+0xa8>)
 800cc42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2200      	movs	r2, #0
 800cc48:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2241      	movs	r2, #65	@ 0x41
 800cc4e:	2120      	movs	r1, #32
 800cc50:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2242      	movs	r2, #66	@ 0x42
 800cc56:	2100      	movs	r1, #0
 800cc58:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	2204      	movs	r2, #4
 800cc64:	4013      	ands	r3, r2
 800cc66:	d022      	beq.n	800ccae <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc72:	b2d2      	uxtb	r2, r2
 800cc74:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc7a:	1c5a      	adds	r2, r3, #1
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d012      	beq.n	800ccae <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc8c:	3b01      	subs	r3, #1
 800cc8e:	b29a      	uxth	r2, r3
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cc98:	b29b      	uxth	r3, r3
 800cc9a:	3b01      	subs	r3, #1
 800cc9c:	b29a      	uxth	r2, r3
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cca6:	2204      	movs	r2, #4
 800cca8:	431a      	orrs	r2, r3
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ccae:	4a0c      	ldr	r2, [pc, #48]	@ (800cce0 <I2C_ITListenCplt+0xac>)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	0011      	movs	r1, r2
 800ccb4:	0018      	movs	r0, r3
 800ccb6:	f000 fb03 	bl	800d2c0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2210      	movs	r2, #16
 800ccc0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2240      	movs	r2, #64	@ 0x40
 800ccc6:	2100      	movs	r1, #0
 800ccc8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	0018      	movs	r0, r3
 800ccce:	f7fe ff28 	bl	800bb22 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800ccd2:	46c0      	nop			@ (mov r8, r8)
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	b002      	add	sp, #8
 800ccd8:	bd80      	pop	{r7, pc}
 800ccda:	46c0      	nop			@ (mov r8, r8)
 800ccdc:	ffff0000 	.word	0xffff0000
 800cce0:	00008003 	.word	0x00008003

0800cce4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b084      	sub	sp, #16
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ccee:	200f      	movs	r0, #15
 800ccf0:	183b      	adds	r3, r7, r0
 800ccf2:	687a      	ldr	r2, [r7, #4]
 800ccf4:	2141      	movs	r1, #65	@ 0x41
 800ccf6:	5c52      	ldrb	r2, [r2, r1]
 800ccf8:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2242      	movs	r2, #66	@ 0x42
 800ccfe:	2100      	movs	r1, #0
 800cd00:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	4a72      	ldr	r2, [pc, #456]	@ (800ced0 <I2C_ITError+0x1ec>)
 800cd06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	431a      	orrs	r2, r3
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800cd1a:	183b      	adds	r3, r7, r0
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	2b28      	cmp	r3, #40	@ 0x28
 800cd20:	d007      	beq.n	800cd32 <I2C_ITError+0x4e>
 800cd22:	183b      	adds	r3, r7, r0
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	2b29      	cmp	r3, #41	@ 0x29
 800cd28:	d003      	beq.n	800cd32 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800cd2a:	183b      	adds	r3, r7, r0
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd30:	d10c      	bne.n	800cd4c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2103      	movs	r1, #3
 800cd36:	0018      	movs	r0, r3
 800cd38:	f000 fac2 	bl	800d2c0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2241      	movs	r2, #65	@ 0x41
 800cd40:	2128      	movs	r1, #40	@ 0x28
 800cd42:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	4a63      	ldr	r2, [pc, #396]	@ (800ced4 <I2C_ITError+0x1f0>)
 800cd48:	635a      	str	r2, [r3, #52]	@ 0x34
 800cd4a:	e032      	b.n	800cdb2 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cd4c:	4a62      	ldr	r2, [pc, #392]	@ (800ced8 <I2C_ITError+0x1f4>)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	0011      	movs	r1, r2
 800cd52:	0018      	movs	r0, r3
 800cd54:	f000 fab4 	bl	800d2c0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	0018      	movs	r0, r3
 800cd5c:	f000 f8ed 	bl	800cf3a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2241      	movs	r2, #65	@ 0x41
 800cd64:	5c9b      	ldrb	r3, [r3, r2]
 800cd66:	b2db      	uxtb	r3, r3
 800cd68:	2b60      	cmp	r3, #96	@ 0x60
 800cd6a:	d01f      	beq.n	800cdac <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2241      	movs	r2, #65	@ 0x41
 800cd70:	2120      	movs	r1, #32
 800cd72:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	699b      	ldr	r3, [r3, #24]
 800cd7a:	2220      	movs	r2, #32
 800cd7c:	4013      	ands	r3, r2
 800cd7e:	2b20      	cmp	r3, #32
 800cd80:	d114      	bne.n	800cdac <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	699b      	ldr	r3, [r3, #24]
 800cd88:	2210      	movs	r2, #16
 800cd8a:	4013      	ands	r3, r2
 800cd8c:	2b10      	cmp	r3, #16
 800cd8e:	d109      	bne.n	800cda4 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	2210      	movs	r2, #16
 800cd96:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd9c:	2204      	movs	r2, #4
 800cd9e:	431a      	orrs	r2, r3
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	2220      	movs	r2, #32
 800cdaa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdb6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d03b      	beq.n	800ce38 <I2C_ITError+0x154>
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	2b11      	cmp	r3, #17
 800cdc4:	d002      	beq.n	800cdcc <I2C_ITError+0xe8>
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	2b21      	cmp	r3, #33	@ 0x21
 800cdca:	d135      	bne.n	800ce38 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	2380      	movs	r3, #128	@ 0x80
 800cdd4:	01db      	lsls	r3, r3, #7
 800cdd6:	401a      	ands	r2, r3
 800cdd8:	2380      	movs	r3, #128	@ 0x80
 800cdda:	01db      	lsls	r3, r3, #7
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d107      	bne.n	800cdf0 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	681a      	ldr	r2, [r3, #0]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	493c      	ldr	r1, [pc, #240]	@ (800cedc <I2C_ITError+0x1f8>)
 800cdec:	400a      	ands	r2, r1
 800cdee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdf4:	0018      	movs	r0, r3
 800cdf6:	f7fd feac 	bl	800ab52 <HAL_DMA_GetState>
 800cdfa:	0003      	movs	r3, r0
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d016      	beq.n	800ce2e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce04:	4a36      	ldr	r2, [pc, #216]	@ (800cee0 <I2C_ITError+0x1fc>)
 800ce06:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2240      	movs	r2, #64	@ 0x40
 800ce0c:	2100      	movs	r1, #0
 800ce0e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce14:	0018      	movs	r0, r3
 800ce16:	f7fd fda7 	bl	800a968 <HAL_DMA_Abort_IT>
 800ce1a:	1e03      	subs	r3, r0, #0
 800ce1c:	d051      	beq.n	800cec2 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce28:	0018      	movs	r0, r3
 800ce2a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ce2c:	e049      	b.n	800cec2 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	0018      	movs	r0, r3
 800ce32:	f000 f859 	bl	800cee8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ce36:	e044      	b.n	800cec2 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d03b      	beq.n	800ceb8 <I2C_ITError+0x1d4>
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	2b12      	cmp	r3, #18
 800ce44:	d002      	beq.n	800ce4c <I2C_ITError+0x168>
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	2b22      	cmp	r3, #34	@ 0x22
 800ce4a:	d135      	bne.n	800ceb8 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	2380      	movs	r3, #128	@ 0x80
 800ce54:	021b      	lsls	r3, r3, #8
 800ce56:	401a      	ands	r2, r3
 800ce58:	2380      	movs	r3, #128	@ 0x80
 800ce5a:	021b      	lsls	r3, r3, #8
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d107      	bne.n	800ce70 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	681a      	ldr	r2, [r3, #0]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	491e      	ldr	r1, [pc, #120]	@ (800cee4 <I2C_ITError+0x200>)
 800ce6c:	400a      	ands	r2, r1
 800ce6e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce74:	0018      	movs	r0, r3
 800ce76:	f7fd fe6c 	bl	800ab52 <HAL_DMA_GetState>
 800ce7a:	0003      	movs	r3, r0
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	d016      	beq.n	800ceae <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce84:	4a16      	ldr	r2, [pc, #88]	@ (800cee0 <I2C_ITError+0x1fc>)
 800ce86:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2240      	movs	r2, #64	@ 0x40
 800ce8c:	2100      	movs	r1, #0
 800ce8e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce94:	0018      	movs	r0, r3
 800ce96:	f7fd fd67 	bl	800a968 <HAL_DMA_Abort_IT>
 800ce9a:	1e03      	subs	r3, r0, #0
 800ce9c:	d013      	beq.n	800cec6 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cea2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cea8:	0018      	movs	r0, r3
 800ceaa:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ceac:	e00b      	b.n	800cec6 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	0018      	movs	r0, r3
 800ceb2:	f000 f819 	bl	800cee8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ceb6:	e006      	b.n	800cec6 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	0018      	movs	r0, r3
 800cebc:	f000 f814 	bl	800cee8 <I2C_TreatErrorCallback>
  }
}
 800cec0:	e002      	b.n	800cec8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cec2:	46c0      	nop			@ (mov r8, r8)
 800cec4:	e000      	b.n	800cec8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cec6:	46c0      	nop			@ (mov r8, r8)
}
 800cec8:	46c0      	nop			@ (mov r8, r8)
 800ceca:	46bd      	mov	sp, r7
 800cecc:	b004      	add	sp, #16
 800cece:	bd80      	pop	{r7, pc}
 800ced0:	ffff0000 	.word	0xffff0000
 800ced4:	0800bdc9 	.word	0x0800bdc9
 800ced8:	00008003 	.word	0x00008003
 800cedc:	ffffbfff 	.word	0xffffbfff
 800cee0:	0800d0f3 	.word	0x0800d0f3
 800cee4:	ffff7fff 	.word	0xffff7fff

0800cee8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b082      	sub	sp, #8
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2241      	movs	r2, #65	@ 0x41
 800cef4:	5c9b      	ldrb	r3, [r3, r2]
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	2b60      	cmp	r3, #96	@ 0x60
 800cefa:	d10f      	bne.n	800cf1c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2241      	movs	r2, #65	@ 0x41
 800cf00:	2120      	movs	r1, #32
 800cf02:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2200      	movs	r2, #0
 800cf08:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2240      	movs	r2, #64	@ 0x40
 800cf0e:	2100      	movs	r1, #0
 800cf10:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	0018      	movs	r0, r3
 800cf16:	f7fe fe24 	bl	800bb62 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cf1a:	e00a      	b.n	800cf32 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2240      	movs	r2, #64	@ 0x40
 800cf26:	2100      	movs	r1, #0
 800cf28:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	0018      	movs	r0, r3
 800cf2e:	f7fe fe10 	bl	800bb52 <HAL_I2C_ErrorCallback>
}
 800cf32:	46c0      	nop			@ (mov r8, r8)
 800cf34:	46bd      	mov	sp, r7
 800cf36:	b002      	add	sp, #8
 800cf38:	bd80      	pop	{r7, pc}

0800cf3a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800cf3a:	b580      	push	{r7, lr}
 800cf3c:	b082      	sub	sp, #8
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	699b      	ldr	r3, [r3, #24]
 800cf48:	2202      	movs	r2, #2
 800cf4a:	4013      	ands	r3, r2
 800cf4c:	2b02      	cmp	r3, #2
 800cf4e:	d103      	bne.n	800cf58 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	2200      	movs	r2, #0
 800cf56:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	699b      	ldr	r3, [r3, #24]
 800cf5e:	2201      	movs	r2, #1
 800cf60:	4013      	ands	r3, r2
 800cf62:	2b01      	cmp	r3, #1
 800cf64:	d007      	beq.n	800cf76 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	699a      	ldr	r2, [r3, #24]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	2101      	movs	r1, #1
 800cf72:	430a      	orrs	r2, r1
 800cf74:	619a      	str	r2, [r3, #24]
  }
}
 800cf76:	46c0      	nop			@ (mov r8, r8)
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	b002      	add	sp, #8
 800cf7c:	bd80      	pop	{r7, pc}
	...

0800cf80 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b084      	sub	sp, #16
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf8c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	681a      	ldr	r2, [r3, #0]
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	4920      	ldr	r1, [pc, #128]	@ (800d01c <I2C_DMAMasterTransmitCplt+0x9c>)
 800cf9a:	400a      	ands	r2, r1
 800cf9c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d105      	bne.n	800cfb4 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2120      	movs	r1, #32
 800cfac:	0018      	movs	r0, r3
 800cfae:	f000 f8f9 	bl	800d1a4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800cfb2:	e02e      	b.n	800d012 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfb8:	68fa      	ldr	r2, [r7, #12]
 800cfba:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800cfbc:	189a      	adds	r2, r3, r2
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cfc6:	b29b      	uxth	r3, r3
 800cfc8:	2bff      	cmp	r3, #255	@ 0xff
 800cfca:	d903      	bls.n	800cfd4 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	22ff      	movs	r2, #255	@ 0xff
 800cfd0:	851a      	strh	r2, [r3, #40]	@ 0x28
 800cfd2:	e004      	b.n	800cfde <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800cfd8:	b29a      	uxth	r2, r3
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfe6:	0019      	movs	r1, r3
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	3328      	adds	r3, #40	@ 0x28
 800cfee:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800cff4:	f7fd fc12 	bl	800a81c <HAL_DMA_Start_IT>
 800cff8:	1e03      	subs	r3, r0, #0
 800cffa:	d005      	beq.n	800d008 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2110      	movs	r1, #16
 800d000:	0018      	movs	r0, r3
 800d002:	f7ff fe6f 	bl	800cce4 <I2C_ITError>
}
 800d006:	e004      	b.n	800d012 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	2140      	movs	r1, #64	@ 0x40
 800d00c:	0018      	movs	r0, r3
 800d00e:	f000 f8c9 	bl	800d1a4 <I2C_Enable_IRQ>
}
 800d012:	46c0      	nop			@ (mov r8, r8)
 800d014:	46bd      	mov	sp, r7
 800d016:	b004      	add	sp, #16
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	46c0      	nop			@ (mov r8, r8)
 800d01c:	ffffbfff 	.word	0xffffbfff

0800d020 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b084      	sub	sp, #16
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d02c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	681a      	ldr	r2, [r3, #0]
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	4920      	ldr	r1, [pc, #128]	@ (800d0bc <I2C_DMAMasterReceiveCplt+0x9c>)
 800d03a:	400a      	ands	r2, r1
 800d03c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d042:	b29b      	uxth	r3, r3
 800d044:	2b00      	cmp	r3, #0
 800d046:	d105      	bne.n	800d054 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	2120      	movs	r1, #32
 800d04c:	0018      	movs	r0, r3
 800d04e:	f000 f8a9 	bl	800d1a4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d052:	e02e      	b.n	800d0b2 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d058:	68fa      	ldr	r2, [r7, #12]
 800d05a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800d05c:	189a      	adds	r2, r3, r2
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d066:	b29b      	uxth	r3, r3
 800d068:	2bff      	cmp	r3, #255	@ 0xff
 800d06a:	d903      	bls.n	800d074 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	22ff      	movs	r2, #255	@ 0xff
 800d070:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d072:	e004      	b.n	800d07e <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d078:	b29a      	uxth	r2, r3
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	3324      	adds	r3, #36	@ 0x24
 800d088:	0019      	movs	r1, r3
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d08e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d094:	f7fd fbc2 	bl	800a81c <HAL_DMA_Start_IT>
 800d098:	1e03      	subs	r3, r0, #0
 800d09a:	d005      	beq.n	800d0a8 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	2110      	movs	r1, #16
 800d0a0:	0018      	movs	r0, r3
 800d0a2:	f7ff fe1f 	bl	800cce4 <I2C_ITError>
}
 800d0a6:	e004      	b.n	800d0b2 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	2140      	movs	r1, #64	@ 0x40
 800d0ac:	0018      	movs	r0, r3
 800d0ae:	f000 f879 	bl	800d1a4 <I2C_Enable_IRQ>
}
 800d0b2:	46c0      	nop			@ (mov r8, r8)
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	b004      	add	sp, #16
 800d0b8:	bd80      	pop	{r7, pc}
 800d0ba:	46c0      	nop			@ (mov r8, r8)
 800d0bc:	ffff7fff 	.word	0xffff7fff

0800d0c0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b084      	sub	sp, #16
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0cc:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	685a      	ldr	r2, [r3, #4]
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	2180      	movs	r1, #128	@ 0x80
 800d0da:	0209      	lsls	r1, r1, #8
 800d0dc:	430a      	orrs	r2, r1
 800d0de:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	2110      	movs	r1, #16
 800d0e4:	0018      	movs	r0, r3
 800d0e6:	f7ff fdfd 	bl	800cce4 <I2C_ITError>
}
 800d0ea:	46c0      	nop			@ (mov r8, r8)
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	b004      	add	sp, #16
 800d0f0:	bd80      	pop	{r7, pc}

0800d0f2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d0f2:	b580      	push	{r7, lr}
 800d0f4:	b084      	sub	sp, #16
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0fe:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d104:	2b00      	cmp	r3, #0
 800d106:	d003      	beq.n	800d110 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d10c:	2200      	movs	r2, #0
 800d10e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d114:	2b00      	cmp	r3, #0
 800d116:	d003      	beq.n	800d120 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d11c:	2200      	movs	r2, #0
 800d11e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	0018      	movs	r0, r3
 800d124:	f7ff fee0 	bl	800cee8 <I2C_TreatErrorCallback>
}
 800d128:	46c0      	nop			@ (mov r8, r8)
 800d12a:	46bd      	mov	sp, r7
 800d12c:	b004      	add	sp, #16
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d130:	b590      	push	{r4, r7, lr}
 800d132:	b087      	sub	sp, #28
 800d134:	af00      	add	r7, sp, #0
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	0008      	movs	r0, r1
 800d13a:	0011      	movs	r1, r2
 800d13c:	607b      	str	r3, [r7, #4]
 800d13e:	240a      	movs	r4, #10
 800d140:	193b      	adds	r3, r7, r4
 800d142:	1c02      	adds	r2, r0, #0
 800d144:	801a      	strh	r2, [r3, #0]
 800d146:	2009      	movs	r0, #9
 800d148:	183b      	adds	r3, r7, r0
 800d14a:	1c0a      	adds	r2, r1, #0
 800d14c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d14e:	193b      	adds	r3, r7, r4
 800d150:	881b      	ldrh	r3, [r3, #0]
 800d152:	059b      	lsls	r3, r3, #22
 800d154:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d156:	183b      	adds	r3, r7, r0
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	0419      	lsls	r1, r3, #16
 800d15c:	23ff      	movs	r3, #255	@ 0xff
 800d15e:	041b      	lsls	r3, r3, #16
 800d160:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d162:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d16a:	4313      	orrs	r3, r2
 800d16c:	005b      	lsls	r3, r3, #1
 800d16e:	085b      	lsrs	r3, r3, #1
 800d170:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	685b      	ldr	r3, [r3, #4]
 800d178:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d17a:	0d51      	lsrs	r1, r2, #21
 800d17c:	2280      	movs	r2, #128	@ 0x80
 800d17e:	00d2      	lsls	r2, r2, #3
 800d180:	400a      	ands	r2, r1
 800d182:	4907      	ldr	r1, [pc, #28]	@ (800d1a0 <I2C_TransferConfig+0x70>)
 800d184:	430a      	orrs	r2, r1
 800d186:	43d2      	mvns	r2, r2
 800d188:	401a      	ands	r2, r3
 800d18a:	0011      	movs	r1, r2
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	697a      	ldr	r2, [r7, #20]
 800d192:	430a      	orrs	r2, r1
 800d194:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d196:	46c0      	nop			@ (mov r8, r8)
 800d198:	46bd      	mov	sp, r7
 800d19a:	b007      	add	sp, #28
 800d19c:	bd90      	pop	{r4, r7, pc}
 800d19e:	46c0      	nop			@ (mov r8, r8)
 800d1a0:	03ff63ff 	.word	0x03ff63ff

0800d1a4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b084      	sub	sp, #16
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	000a      	movs	r2, r1
 800d1ae:	1cbb      	adds	r3, r7, #2
 800d1b0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d1ba:	4b3e      	ldr	r3, [pc, #248]	@ (800d2b4 <I2C_Enable_IRQ+0x110>)
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d035      	beq.n	800d22c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d1c4:	4b3c      	ldr	r3, [pc, #240]	@ (800d2b8 <I2C_Enable_IRQ+0x114>)
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d030      	beq.n	800d22c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d1ce:	4b3b      	ldr	r3, [pc, #236]	@ (800d2bc <I2C_Enable_IRQ+0x118>)
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d02b      	beq.n	800d22c <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d1d4:	1cbb      	adds	r3, r7, #2
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	5e9b      	ldrsh	r3, [r3, r2]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	da03      	bge.n	800d1e6 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	22b8      	movs	r2, #184	@ 0xb8
 800d1e2:	4313      	orrs	r3, r2
 800d1e4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d1e6:	1cbb      	adds	r3, r7, #2
 800d1e8:	881b      	ldrh	r3, [r3, #0]
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	4013      	ands	r3, r2
 800d1ee:	d003      	beq.n	800d1f8 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	22f2      	movs	r2, #242	@ 0xf2
 800d1f4:	4313      	orrs	r3, r2
 800d1f6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d1f8:	1cbb      	adds	r3, r7, #2
 800d1fa:	881b      	ldrh	r3, [r3, #0]
 800d1fc:	2202      	movs	r2, #2
 800d1fe:	4013      	ands	r3, r2
 800d200:	d003      	beq.n	800d20a <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	22f4      	movs	r2, #244	@ 0xf4
 800d206:	4313      	orrs	r3, r2
 800d208:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d20a:	1cbb      	adds	r3, r7, #2
 800d20c:	881b      	ldrh	r3, [r3, #0]
 800d20e:	2b10      	cmp	r3, #16
 800d210:	d103      	bne.n	800d21a <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2290      	movs	r2, #144	@ 0x90
 800d216:	4313      	orrs	r3, r2
 800d218:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d21a:	1cbb      	adds	r3, r7, #2
 800d21c:	881b      	ldrh	r3, [r3, #0]
 800d21e:	2b20      	cmp	r3, #32
 800d220:	d13c      	bne.n	800d29c <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	2220      	movs	r2, #32
 800d226:	4313      	orrs	r3, r2
 800d228:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d22a:	e037      	b.n	800d29c <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d22c:	1cbb      	adds	r3, r7, #2
 800d22e:	2200      	movs	r2, #0
 800d230:	5e9b      	ldrsh	r3, [r3, r2]
 800d232:	2b00      	cmp	r3, #0
 800d234:	da03      	bge.n	800d23e <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	22b8      	movs	r2, #184	@ 0xb8
 800d23a:	4313      	orrs	r3, r2
 800d23c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d23e:	1cbb      	adds	r3, r7, #2
 800d240:	881b      	ldrh	r3, [r3, #0]
 800d242:	2201      	movs	r2, #1
 800d244:	4013      	ands	r3, r2
 800d246:	d003      	beq.n	800d250 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	22f2      	movs	r2, #242	@ 0xf2
 800d24c:	4313      	orrs	r3, r2
 800d24e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d250:	1cbb      	adds	r3, r7, #2
 800d252:	881b      	ldrh	r3, [r3, #0]
 800d254:	2202      	movs	r2, #2
 800d256:	4013      	ands	r3, r2
 800d258:	d003      	beq.n	800d262 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	22f4      	movs	r2, #244	@ 0xf4
 800d25e:	4313      	orrs	r3, r2
 800d260:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d262:	1cbb      	adds	r3, r7, #2
 800d264:	881b      	ldrh	r3, [r3, #0]
 800d266:	2b10      	cmp	r3, #16
 800d268:	d103      	bne.n	800d272 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2290      	movs	r2, #144	@ 0x90
 800d26e:	4313      	orrs	r3, r2
 800d270:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d272:	1cbb      	adds	r3, r7, #2
 800d274:	881b      	ldrh	r3, [r3, #0]
 800d276:	2b20      	cmp	r3, #32
 800d278:	d103      	bne.n	800d282 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	2260      	movs	r2, #96	@ 0x60
 800d27e:	4313      	orrs	r3, r2
 800d280:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d286:	4b0d      	ldr	r3, [pc, #52]	@ (800d2bc <I2C_Enable_IRQ+0x118>)
 800d288:	429a      	cmp	r2, r3
 800d28a:	d007      	beq.n	800d29c <I2C_Enable_IRQ+0xf8>
 800d28c:	1cbb      	adds	r3, r7, #2
 800d28e:	881b      	ldrh	r3, [r3, #0]
 800d290:	2b40      	cmp	r3, #64	@ 0x40
 800d292:	d103      	bne.n	800d29c <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	2240      	movs	r2, #64	@ 0x40
 800d298:	4313      	orrs	r3, r2
 800d29a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	6819      	ldr	r1, [r3, #0]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	68fa      	ldr	r2, [r7, #12]
 800d2a8:	430a      	orrs	r2, r1
 800d2aa:	601a      	str	r2, [r3, #0]
}
 800d2ac:	46c0      	nop			@ (mov r8, r8)
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	b004      	add	sp, #16
 800d2b2:	bd80      	pop	{r7, pc}
 800d2b4:	0800bfc9 	.word	0x0800bfc9
 800d2b8:	0800c3f9 	.word	0x0800c3f9
 800d2bc:	0800c1c1 	.word	0x0800c1c1

0800d2c0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b084      	sub	sp, #16
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
 800d2c8:	000a      	movs	r2, r1
 800d2ca:	1cbb      	adds	r3, r7, #2
 800d2cc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d2d2:	1cbb      	adds	r3, r7, #2
 800d2d4:	881b      	ldrh	r3, [r3, #0]
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	4013      	ands	r3, r2
 800d2da:	d010      	beq.n	800d2fe <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	2242      	movs	r2, #66	@ 0x42
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2241      	movs	r2, #65	@ 0x41
 800d2e8:	5c9b      	ldrb	r3, [r3, r2]
 800d2ea:	b2db      	uxtb	r3, r3
 800d2ec:	001a      	movs	r2, r3
 800d2ee:	2328      	movs	r3, #40	@ 0x28
 800d2f0:	4013      	ands	r3, r2
 800d2f2:	2b28      	cmp	r3, #40	@ 0x28
 800d2f4:	d003      	beq.n	800d2fe <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	22b0      	movs	r2, #176	@ 0xb0
 800d2fa:	4313      	orrs	r3, r2
 800d2fc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d2fe:	1cbb      	adds	r3, r7, #2
 800d300:	881b      	ldrh	r3, [r3, #0]
 800d302:	2202      	movs	r2, #2
 800d304:	4013      	ands	r3, r2
 800d306:	d010      	beq.n	800d32a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	2244      	movs	r2, #68	@ 0x44
 800d30c:	4313      	orrs	r3, r2
 800d30e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2241      	movs	r2, #65	@ 0x41
 800d314:	5c9b      	ldrb	r3, [r3, r2]
 800d316:	b2db      	uxtb	r3, r3
 800d318:	001a      	movs	r2, r3
 800d31a:	2328      	movs	r3, #40	@ 0x28
 800d31c:	4013      	ands	r3, r2
 800d31e:	2b28      	cmp	r3, #40	@ 0x28
 800d320:	d003      	beq.n	800d32a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	22b0      	movs	r2, #176	@ 0xb0
 800d326:	4313      	orrs	r3, r2
 800d328:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d32a:	1cbb      	adds	r3, r7, #2
 800d32c:	2200      	movs	r2, #0
 800d32e:	5e9b      	ldrsh	r3, [r3, r2]
 800d330:	2b00      	cmp	r3, #0
 800d332:	da03      	bge.n	800d33c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	22b8      	movs	r2, #184	@ 0xb8
 800d338:	4313      	orrs	r3, r2
 800d33a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d33c:	1cbb      	adds	r3, r7, #2
 800d33e:	881b      	ldrh	r3, [r3, #0]
 800d340:	2b10      	cmp	r3, #16
 800d342:	d103      	bne.n	800d34c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	2290      	movs	r2, #144	@ 0x90
 800d348:	4313      	orrs	r3, r2
 800d34a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d34c:	1cbb      	adds	r3, r7, #2
 800d34e:	881b      	ldrh	r3, [r3, #0]
 800d350:	2b20      	cmp	r3, #32
 800d352:	d103      	bne.n	800d35c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2220      	movs	r2, #32
 800d358:	4313      	orrs	r3, r2
 800d35a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d35c:	1cbb      	adds	r3, r7, #2
 800d35e:	881b      	ldrh	r3, [r3, #0]
 800d360:	2b40      	cmp	r3, #64	@ 0x40
 800d362:	d103      	bne.n	800d36c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2240      	movs	r2, #64	@ 0x40
 800d368:	4313      	orrs	r3, r2
 800d36a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	681a      	ldr	r2, [r3, #0]
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	43d9      	mvns	r1, r3
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	400a      	ands	r2, r1
 800d37c:	601a      	str	r2, [r3, #0]
}
 800d37e:	46c0      	nop			@ (mov r8, r8)
 800d380:	46bd      	mov	sp, r7
 800d382:	b004      	add	sp, #16
 800d384:	bd80      	pop	{r7, pc}
	...

0800d388 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b082      	sub	sp, #8
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
 800d390:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2241      	movs	r2, #65	@ 0x41
 800d396:	5c9b      	ldrb	r3, [r3, r2]
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	2b20      	cmp	r3, #32
 800d39c:	d138      	bne.n	800d410 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2240      	movs	r2, #64	@ 0x40
 800d3a2:	5c9b      	ldrb	r3, [r3, r2]
 800d3a4:	2b01      	cmp	r3, #1
 800d3a6:	d101      	bne.n	800d3ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d3a8:	2302      	movs	r3, #2
 800d3aa:	e032      	b.n	800d412 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2240      	movs	r2, #64	@ 0x40
 800d3b0:	2101      	movs	r1, #1
 800d3b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2241      	movs	r2, #65	@ 0x41
 800d3b8:	2124      	movs	r1, #36	@ 0x24
 800d3ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	2101      	movs	r1, #1
 800d3c8:	438a      	bics	r2, r1
 800d3ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	681a      	ldr	r2, [r3, #0]
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	4911      	ldr	r1, [pc, #68]	@ (800d41c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800d3d8:	400a      	ands	r2, r1
 800d3da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	6819      	ldr	r1, [r3, #0]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	683a      	ldr	r2, [r7, #0]
 800d3e8:	430a      	orrs	r2, r1
 800d3ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	2101      	movs	r1, #1
 800d3f8:	430a      	orrs	r2, r1
 800d3fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2241      	movs	r2, #65	@ 0x41
 800d400:	2120      	movs	r1, #32
 800d402:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2240      	movs	r2, #64	@ 0x40
 800d408:	2100      	movs	r1, #0
 800d40a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800d40c:	2300      	movs	r3, #0
 800d40e:	e000      	b.n	800d412 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d410:	2302      	movs	r3, #2
  }
}
 800d412:	0018      	movs	r0, r3
 800d414:	46bd      	mov	sp, r7
 800d416:	b002      	add	sp, #8
 800d418:	bd80      	pop	{r7, pc}
 800d41a:	46c0      	nop			@ (mov r8, r8)
 800d41c:	ffffefff 	.word	0xffffefff

0800d420 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b084      	sub	sp, #16
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2241      	movs	r2, #65	@ 0x41
 800d42e:	5c9b      	ldrb	r3, [r3, r2]
 800d430:	b2db      	uxtb	r3, r3
 800d432:	2b20      	cmp	r3, #32
 800d434:	d139      	bne.n	800d4aa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2240      	movs	r2, #64	@ 0x40
 800d43a:	5c9b      	ldrb	r3, [r3, r2]
 800d43c:	2b01      	cmp	r3, #1
 800d43e:	d101      	bne.n	800d444 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d440:	2302      	movs	r3, #2
 800d442:	e033      	b.n	800d4ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2240      	movs	r2, #64	@ 0x40
 800d448:	2101      	movs	r1, #1
 800d44a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2241      	movs	r2, #65	@ 0x41
 800d450:	2124      	movs	r1, #36	@ 0x24
 800d452:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	681a      	ldr	r2, [r3, #0]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	2101      	movs	r1, #1
 800d460:	438a      	bics	r2, r1
 800d462:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	4a11      	ldr	r2, [pc, #68]	@ (800d4b4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800d470:	4013      	ands	r3, r2
 800d472:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	021b      	lsls	r3, r3, #8
 800d478:	68fa      	ldr	r2, [r7, #12]
 800d47a:	4313      	orrs	r3, r2
 800d47c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	68fa      	ldr	r2, [r7, #12]
 800d484:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	681a      	ldr	r2, [r3, #0]
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	2101      	movs	r1, #1
 800d492:	430a      	orrs	r2, r1
 800d494:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2241      	movs	r2, #65	@ 0x41
 800d49a:	2120      	movs	r1, #32
 800d49c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2240      	movs	r2, #64	@ 0x40
 800d4a2:	2100      	movs	r1, #0
 800d4a4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	e000      	b.n	800d4ac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d4aa:	2302      	movs	r3, #2
  }
}
 800d4ac:	0018      	movs	r0, r3
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	b004      	add	sp, #16
 800d4b2:	bd80      	pop	{r7, pc}
 800d4b4:	fffff0ff 	.word	0xfffff0ff

0800d4b8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b088      	sub	sp, #32
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d101      	bne.n	800d4ca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	e0e1      	b.n	800d68e <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2235      	movs	r2, #53	@ 0x35
 800d4ce:	5c9b      	ldrb	r3, [r3, r2]
 800d4d0:	b2db      	uxtb	r3, r3
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d107      	bne.n	800d4e6 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2234      	movs	r2, #52	@ 0x34
 800d4da:	2100      	movs	r1, #0
 800d4dc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	0018      	movs	r0, r3
 800d4e2:	f7f8 fcfd 	bl	8005ee0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2235      	movs	r2, #53	@ 0x35
 800d4ea:	2102      	movs	r1, #2
 800d4ec:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	69da      	ldr	r2, [r3, #28]
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	4967      	ldr	r1, [pc, #412]	@ (800d698 <HAL_I2S_Init+0x1e0>)
 800d4fa:	400a      	ands	r2, r1
 800d4fc:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	2202      	movs	r2, #2
 800d504:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	695b      	ldr	r3, [r3, #20]
 800d50a:	2b02      	cmp	r3, #2
 800d50c:	d073      	beq.n	800d5f6 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	68db      	ldr	r3, [r3, #12]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d102      	bne.n	800d51c <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800d516:	2310      	movs	r3, #16
 800d518:	617b      	str	r3, [r7, #20]
 800d51a:	e001      	b.n	800d520 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800d51c:	2320      	movs	r3, #32
 800d51e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	689b      	ldr	r3, [r3, #8]
 800d524:	2b20      	cmp	r3, #32
 800d526:	d802      	bhi.n	800d52e <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	005b      	lsls	r3, r3, #1
 800d52c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800d52e:	f002 fe8d 	bl	801024c <HAL_RCC_GetSysClockFreq>
 800d532:	0003      	movs	r3, r0
 800d534:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	691a      	ldr	r2, [r3, #16]
 800d53a:	2380      	movs	r3, #128	@ 0x80
 800d53c:	009b      	lsls	r3, r3, #2
 800d53e:	429a      	cmp	r2, r3
 800d540:	d131      	bne.n	800d5a6 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	68db      	ldr	r3, [r3, #12]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d016      	beq.n	800d578 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	009b      	lsls	r3, r3, #2
 800d54e:	0019      	movs	r1, r3
 800d550:	68f8      	ldr	r0, [r7, #12]
 800d552:	f7f2 fdf5 	bl	8000140 <__udivsi3>
 800d556:	0003      	movs	r3, r0
 800d558:	001a      	movs	r2, r3
 800d55a:	0013      	movs	r3, r2
 800d55c:	009b      	lsls	r3, r3, #2
 800d55e:	189b      	adds	r3, r3, r2
 800d560:	005b      	lsls	r3, r3, #1
 800d562:	001a      	movs	r2, r3
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	695b      	ldr	r3, [r3, #20]
 800d568:	0019      	movs	r1, r3
 800d56a:	0010      	movs	r0, r2
 800d56c:	f7f2 fde8 	bl	8000140 <__udivsi3>
 800d570:	0003      	movs	r3, r0
 800d572:	3305      	adds	r3, #5
 800d574:	613b      	str	r3, [r7, #16]
 800d576:	e02a      	b.n	800d5ce <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	00db      	lsls	r3, r3, #3
 800d57c:	0019      	movs	r1, r3
 800d57e:	68f8      	ldr	r0, [r7, #12]
 800d580:	f7f2 fdde 	bl	8000140 <__udivsi3>
 800d584:	0003      	movs	r3, r0
 800d586:	001a      	movs	r2, r3
 800d588:	0013      	movs	r3, r2
 800d58a:	009b      	lsls	r3, r3, #2
 800d58c:	189b      	adds	r3, r3, r2
 800d58e:	005b      	lsls	r3, r3, #1
 800d590:	001a      	movs	r2, r3
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	695b      	ldr	r3, [r3, #20]
 800d596:	0019      	movs	r1, r3
 800d598:	0010      	movs	r0, r2
 800d59a:	f7f2 fdd1 	bl	8000140 <__udivsi3>
 800d59e:	0003      	movs	r3, r0
 800d5a0:	3305      	adds	r3, #5
 800d5a2:	613b      	str	r3, [r7, #16]
 800d5a4:	e013      	b.n	800d5ce <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800d5a6:	6979      	ldr	r1, [r7, #20]
 800d5a8:	68f8      	ldr	r0, [r7, #12]
 800d5aa:	f7f2 fdc9 	bl	8000140 <__udivsi3>
 800d5ae:	0003      	movs	r3, r0
 800d5b0:	001a      	movs	r2, r3
 800d5b2:	0013      	movs	r3, r2
 800d5b4:	009b      	lsls	r3, r3, #2
 800d5b6:	189b      	adds	r3, r3, r2
 800d5b8:	005b      	lsls	r3, r3, #1
 800d5ba:	001a      	movs	r2, r3
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	695b      	ldr	r3, [r3, #20]
 800d5c0:	0019      	movs	r1, r3
 800d5c2:	0010      	movs	r0, r2
 800d5c4:	f7f2 fdbc 	bl	8000140 <__udivsi3>
 800d5c8:	0003      	movs	r3, r0
 800d5ca:	3305      	adds	r3, #5
 800d5cc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	210a      	movs	r1, #10
 800d5d2:	0018      	movs	r0, r3
 800d5d4:	f7f2 fdb4 	bl	8000140 <__udivsi3>
 800d5d8:	0003      	movs	r3, r0
 800d5da:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	2201      	movs	r2, #1
 800d5e0:	4013      	ands	r3, r2
 800d5e2:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800d5e4:	693a      	ldr	r2, [r7, #16]
 800d5e6:	69bb      	ldr	r3, [r7, #24]
 800d5e8:	1ad3      	subs	r3, r2, r3
 800d5ea:	085b      	lsrs	r3, r3, #1
 800d5ec:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800d5ee:	69bb      	ldr	r3, [r7, #24]
 800d5f0:	021b      	lsls	r3, r3, #8
 800d5f2:	61bb      	str	r3, [r7, #24]
 800d5f4:	e003      	b.n	800d5fe <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800d5f6:	2302      	movs	r3, #2
 800d5f8:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800d5fe:	69fb      	ldr	r3, [r7, #28]
 800d600:	2b01      	cmp	r3, #1
 800d602:	d902      	bls.n	800d60a <HAL_I2S_Init+0x152>
 800d604:	69fb      	ldr	r3, [r7, #28]
 800d606:	2bff      	cmp	r3, #255	@ 0xff
 800d608:	d907      	bls.n	800d61a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d60e:	2210      	movs	r2, #16
 800d610:	431a      	orrs	r2, r3
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800d616:	2301      	movs	r3, #1
 800d618:	e039      	b.n	800d68e <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	691a      	ldr	r2, [r3, #16]
 800d61e:	69bb      	ldr	r3, [r7, #24]
 800d620:	431a      	orrs	r2, r3
 800d622:	0011      	movs	r1, r2
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	69fa      	ldr	r2, [r7, #28]
 800d62a:	430a      	orrs	r2, r1
 800d62c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	69db      	ldr	r3, [r3, #28]
 800d634:	4a18      	ldr	r2, [pc, #96]	@ (800d698 <HAL_I2S_Init+0x1e0>)
 800d636:	401a      	ands	r2, r3
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6859      	ldr	r1, [r3, #4]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	689b      	ldr	r3, [r3, #8]
 800d640:	4319      	orrs	r1, r3
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	68db      	ldr	r3, [r3, #12]
 800d646:	4319      	orrs	r1, r3
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	699b      	ldr	r3, [r3, #24]
 800d64c:	430b      	orrs	r3, r1
 800d64e:	431a      	orrs	r2, r3
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	2180      	movs	r1, #128	@ 0x80
 800d656:	0109      	lsls	r1, r1, #4
 800d658:	430a      	orrs	r2, r1
 800d65a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	689b      	ldr	r3, [r3, #8]
 800d660:	2b30      	cmp	r3, #48	@ 0x30
 800d662:	d003      	beq.n	800d66c <HAL_I2S_Init+0x1b4>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	689b      	ldr	r3, [r3, #8]
 800d668:	2bb0      	cmp	r3, #176	@ 0xb0
 800d66a:	d108      	bne.n	800d67e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	69da      	ldr	r2, [r3, #28]
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	2180      	movs	r1, #128	@ 0x80
 800d678:	0149      	lsls	r1, r1, #5
 800d67a:	430a      	orrs	r2, r1
 800d67c:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2200      	movs	r2, #0
 800d682:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2235      	movs	r2, #53	@ 0x35
 800d688:	2101      	movs	r1, #1
 800d68a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d68c:	2300      	movs	r3, #0
}
 800d68e:	0018      	movs	r0, r3
 800d690:	46bd      	mov	sp, r7
 800d692:	b008      	add	sp, #32
 800d694:	bd80      	pop	{r7, pc}
 800d696:	46c0      	nop			@ (mov r8, r8)
 800d698:	fffff040 	.word	0xfffff040

0800d69c <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b082      	sub	sp, #8
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d101      	bne.n	800d6ae <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	e01b      	b.n	800d6e6 <HAL_I2S_DeInit+0x4a>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2235      	movs	r2, #53	@ 0x35
 800d6b2:	2102      	movs	r1, #2
 800d6b4:	5499      	strb	r1, [r3, r2]

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	69da      	ldr	r2, [r3, #28]
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	490b      	ldr	r1, [pc, #44]	@ (800d6f0 <HAL_I2S_DeInit+0x54>)
 800d6c2:	400a      	ands	r2, r1
 800d6c4:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	0018      	movs	r0, r3
 800d6ca:	f7f8 fc7d 	bl	8005fc8 <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2235      	movs	r2, #53	@ 0x35
 800d6d8:	2100      	movs	r1, #0
 800d6da:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2234      	movs	r2, #52	@ 0x34
 800d6e0:	2100      	movs	r1, #0
 800d6e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d6e4:	2300      	movs	r3, #0
}
 800d6e6:	0018      	movs	r0, r3
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	b002      	add	sp, #8
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	46c0      	nop			@ (mov r8, r8)
 800d6f0:	fffffbff 	.word	0xfffffbff

0800d6f4 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b086      	sub	sp, #24
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	60f8      	str	r0, [r7, #12]
 800d6fc:	60b9      	str	r1, [r7, #8]
 800d6fe:	1dbb      	adds	r3, r7, #6
 800d700:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d003      	beq.n	800d710 <HAL_I2S_Receive_DMA+0x1c>
 800d708:	1dbb      	adds	r3, r7, #6
 800d70a:	881b      	ldrh	r3, [r3, #0]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d101      	bne.n	800d714 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800d710:	2301      	movs	r3, #1
 800d712:	e0a6      	b.n	800d862 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	2234      	movs	r2, #52	@ 0x34
 800d718:	5c9b      	ldrb	r3, [r3, r2]
 800d71a:	b2db      	uxtb	r3, r3
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	d101      	bne.n	800d724 <HAL_I2S_Receive_DMA+0x30>
 800d720:	2302      	movs	r3, #2
 800d722:	e09e      	b.n	800d862 <HAL_I2S_Receive_DMA+0x16e>
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2234      	movs	r2, #52	@ 0x34
 800d728:	2101      	movs	r1, #1
 800d72a:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	2235      	movs	r2, #53	@ 0x35
 800d730:	5c9b      	ldrb	r3, [r3, r2]
 800d732:	b2db      	uxtb	r3, r3
 800d734:	2b01      	cmp	r3, #1
 800d736:	d005      	beq.n	800d744 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	2234      	movs	r2, #52	@ 0x34
 800d73c:	2100      	movs	r1, #0
 800d73e:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800d740:	2302      	movs	r3, #2
 800d742:	e08e      	b.n	800d862 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	2235      	movs	r2, #53	@ 0x35
 800d748:	2104      	movs	r1, #4
 800d74a:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2200      	movs	r2, #0
 800d750:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	68ba      	ldr	r2, [r7, #8]
 800d756:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	69db      	ldr	r3, [r3, #28]
 800d75e:	2207      	movs	r2, #7
 800d760:	4013      	ands	r3, r2
 800d762:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	2b03      	cmp	r3, #3
 800d768:	d002      	beq.n	800d770 <HAL_I2S_Receive_DMA+0x7c>
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	2b05      	cmp	r3, #5
 800d76e:	d10c      	bne.n	800d78a <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800d770:	1dbb      	adds	r3, r7, #6
 800d772:	881b      	ldrh	r3, [r3, #0]
 800d774:	18db      	adds	r3, r3, r3
 800d776:	b29a      	uxth	r2, r3
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800d77c:	1dbb      	adds	r3, r7, #6
 800d77e:	881b      	ldrh	r3, [r3, #0]
 800d780:	18db      	adds	r3, r3, r3
 800d782:	b29a      	uxth	r2, r3
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d788:	e007      	b.n	800d79a <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	1dba      	adds	r2, r7, #6
 800d78e:	8812      	ldrh	r2, [r2, #0]
 800d790:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	1dba      	adds	r2, r7, #6
 800d796:	8812      	ldrh	r2, [r2, #0]
 800d798:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d79e:	4a33      	ldr	r2, [pc, #204]	@ (800d86c <HAL_I2S_Receive_DMA+0x178>)
 800d7a0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7a6:	4a32      	ldr	r2, [pc, #200]	@ (800d870 <HAL_I2S_Receive_DMA+0x17c>)
 800d7a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7ae:	4a31      	ldr	r2, [pc, #196]	@ (800d874 <HAL_I2S_Receive_DMA+0x180>)
 800d7b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	69da      	ldr	r2, [r3, #28]
 800d7b8:	23c0      	movs	r3, #192	@ 0xc0
 800d7ba:	009b      	lsls	r3, r3, #2
 800d7bc:	401a      	ands	r2, r3
 800d7be:	23c0      	movs	r3, #192	@ 0xc0
 800d7c0:	009b      	lsls	r3, r3, #2
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d10a      	bne.n	800d7dc <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	613b      	str	r3, [r7, #16]
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	68db      	ldr	r3, [r3, #12]
 800d7d0:	613b      	str	r3, [r7, #16]
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	689b      	ldr	r3, [r3, #8]
 800d7d8:	613b      	str	r3, [r7, #16]
 800d7da:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	330c      	adds	r3, #12
 800d7e6:	0019      	movs	r1, r3
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7ec:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7f2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800d7f4:	f7fd f812 	bl	800a81c <HAL_DMA_Start_IT>
 800d7f8:	1e03      	subs	r3, r0, #0
 800d7fa:	d00f      	beq.n	800d81c <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d800:	2208      	movs	r2, #8
 800d802:	431a      	orrs	r2, r3
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2235      	movs	r2, #53	@ 0x35
 800d80c:	2101      	movs	r1, #1
 800d80e:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2234      	movs	r2, #52	@ 0x34
 800d814:	2100      	movs	r1, #0
 800d816:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800d818:	2301      	movs	r3, #1
 800d81a:	e022      	b.n	800d862 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	69da      	ldr	r2, [r3, #28]
 800d822:	2380      	movs	r3, #128	@ 0x80
 800d824:	00db      	lsls	r3, r3, #3
 800d826:	4013      	ands	r3, r2
 800d828:	d108      	bne.n	800d83c <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	69da      	ldr	r2, [r3, #28]
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	2180      	movs	r1, #128	@ 0x80
 800d836:	00c9      	lsls	r1, r1, #3
 800d838:	430a      	orrs	r2, r1
 800d83a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	2201      	movs	r2, #1
 800d844:	4013      	ands	r3, r2
 800d846:	d107      	bne.n	800d858 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	685a      	ldr	r2, [r3, #4]
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	2101      	movs	r1, #1
 800d854:	430a      	orrs	r2, r1
 800d856:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2234      	movs	r2, #52	@ 0x34
 800d85c:	2100      	movs	r1, #0
 800d85e:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800d860:	2300      	movs	r3, #0
}
 800d862:	0018      	movs	r0, r3
 800d864:	46bd      	mov	sp, r7
 800d866:	b006      	add	sp, #24
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	46c0      	nop			@ (mov r8, r8)
 800d86c:	0800da75 	.word	0x0800da75
 800d870:	0800da31 	.word	0x0800da31
 800d874:	0800da93 	.word	0x0800da93

0800d878 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b086      	sub	sp, #24
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d880:	2317      	movs	r3, #23
 800d882:	18fb      	adds	r3, r7, r3
 800d884:	2200      	movs	r2, #0
 800d886:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	685a      	ldr	r2, [r3, #4]
 800d88c:	2380      	movs	r3, #128	@ 0x80
 800d88e:	009b      	lsls	r3, r3, #2
 800d890:	429a      	cmp	r2, r3
 800d892:	d003      	beq.n	800d89c <HAL_I2S_DMAStop+0x24>
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d158      	bne.n	800d94e <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d010      	beq.n	800d8c6 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8a8:	0018      	movs	r0, r3
 800d8aa:	f7fd f81d 	bl	800a8e8 <HAL_DMA_Abort>
 800d8ae:	1e03      	subs	r3, r0, #0
 800d8b0:	d009      	beq.n	800d8c6 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8b6:	2208      	movs	r2, #8
 800d8b8:	431a      	orrs	r2, r3
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800d8be:	2317      	movs	r3, #23
 800d8c0:	18fb      	adds	r3, r7, r3
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	2364      	movs	r3, #100	@ 0x64
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	2102      	movs	r1, #2
 800d8ce:	f000 f907 	bl	800dae0 <I2S_WaitFlagStateUntilTimeout>
 800d8d2:	1e03      	subs	r3, r0, #0
 800d8d4:	d00d      	beq.n	800d8f2 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8da:	2201      	movs	r2, #1
 800d8dc:	431a      	orrs	r2, r3
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2235      	movs	r2, #53	@ 0x35
 800d8e6:	2101      	movs	r1, #1
 800d8e8:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800d8ea:	2317      	movs	r3, #23
 800d8ec:	18fb      	adds	r3, r7, r3
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	2364      	movs	r3, #100	@ 0x64
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	2180      	movs	r1, #128	@ 0x80
 800d8fa:	f000 f8f1 	bl	800dae0 <I2S_WaitFlagStateUntilTimeout>
 800d8fe:	1e03      	subs	r3, r0, #0
 800d900:	d00d      	beq.n	800d91e <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d906:	2201      	movs	r2, #1
 800d908:	431a      	orrs	r2, r3
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2235      	movs	r2, #53	@ 0x35
 800d912:	2101      	movs	r1, #1
 800d914:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800d916:	2317      	movs	r3, #23
 800d918:	18fb      	adds	r3, r7, r3
 800d91a:	2201      	movs	r2, #1
 800d91c:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	69da      	ldr	r2, [r3, #28]
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	4938      	ldr	r1, [pc, #224]	@ (800da0c <HAL_I2S_DMAStop+0x194>)
 800d92a:	400a      	ands	r2, r1
 800d92c:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800d92e:	2300      	movs	r3, #0
 800d930:	613b      	str	r3, [r7, #16]
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	689b      	ldr	r3, [r3, #8]
 800d938:	613b      	str	r3, [r7, #16]
 800d93a:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	685a      	ldr	r2, [r3, #4]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	2102      	movs	r1, #2
 800d948:	438a      	bics	r2, r1
 800d94a:	605a      	str	r2, [r3, #4]
 800d94c:	e053      	b.n	800d9f6 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	685a      	ldr	r2, [r3, #4]
 800d952:	23c0      	movs	r3, #192	@ 0xc0
 800d954:	009b      	lsls	r3, r3, #2
 800d956:	429a      	cmp	r2, r3
 800d958:	d005      	beq.n	800d966 <HAL_I2S_DMAStop+0xee>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	685a      	ldr	r2, [r3, #4]
 800d95e:	2380      	movs	r3, #128	@ 0x80
 800d960:	005b      	lsls	r3, r3, #1
 800d962:	429a      	cmp	r2, r3
 800d964:	d147      	bne.n	800d9f6 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d010      	beq.n	800d990 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d972:	0018      	movs	r0, r3
 800d974:	f7fc ffb8 	bl	800a8e8 <HAL_DMA_Abort>
 800d978:	1e03      	subs	r3, r0, #0
 800d97a:	d009      	beq.n	800d990 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d980:	2208      	movs	r2, #8
 800d982:	431a      	orrs	r2, r3
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800d988:	2317      	movs	r3, #23
 800d98a:	18fb      	adds	r3, r7, r3
 800d98c:	2201      	movs	r2, #1
 800d98e:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	69da      	ldr	r2, [r3, #28]
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	491c      	ldr	r1, [pc, #112]	@ (800da0c <HAL_I2S_DMAStop+0x194>)
 800d99c:	400a      	ands	r2, r1
 800d99e:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	60fb      	str	r3, [r7, #12]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	68db      	ldr	r3, [r3, #12]
 800d9aa:	60fb      	str	r3, [r7, #12]
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	689b      	ldr	r3, [r3, #8]
 800d9b2:	60fb      	str	r3, [r7, #12]
 800d9b4:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	685a      	ldr	r2, [r3, #4]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	2101      	movs	r1, #1
 800d9c2:	438a      	bics	r2, r1
 800d9c4:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	685a      	ldr	r2, [r3, #4]
 800d9ca:	2380      	movs	r3, #128	@ 0x80
 800d9cc:	005b      	lsls	r3, r3, #1
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d10e      	bne.n	800d9f0 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9d6:	2240      	movs	r2, #64	@ 0x40
 800d9d8:	431a      	orrs	r2, r3
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2235      	movs	r2, #53	@ 0x35
 800d9e2:	2101      	movs	r1, #1
 800d9e4:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800d9e6:	2317      	movs	r3, #23
 800d9e8:	18fb      	adds	r3, r7, r3
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	701a      	strb	r2, [r3, #0]
 800d9ee:	e002      	b.n	800d9f6 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2235      	movs	r2, #53	@ 0x35
 800d9fa:	2101      	movs	r1, #1
 800d9fc:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800d9fe:	2317      	movs	r3, #23
 800da00:	18fb      	adds	r3, r7, r3
 800da02:	781b      	ldrb	r3, [r3, #0]
}
 800da04:	0018      	movs	r0, r3
 800da06:	46bd      	mov	sp, r7
 800da08:	b006      	add	sp, #24
 800da0a:	bd80      	pop	{r7, pc}
 800da0c:	fffffbff 	.word	0xfffffbff

0800da10 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b082      	sub	sp, #8
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800da18:	46c0      	nop			@ (mov r8, r8)
 800da1a:	46bd      	mov	sp, r7
 800da1c:	b002      	add	sp, #8
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b082      	sub	sp, #8
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800da28:	46c0      	nop			@ (mov r8, r8)
 800da2a:	46bd      	mov	sp, r7
 800da2c:	b002      	add	sp, #8
 800da2e:	bd80      	pop	{r7, pc}

0800da30 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b084      	sub	sp, #16
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da3c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	69db      	ldr	r3, [r3, #28]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d10e      	bne.n	800da64 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	685a      	ldr	r2, [r3, #4]
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	2101      	movs	r1, #1
 800da52:	438a      	bics	r2, r1
 800da54:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2200      	movs	r2, #0
 800da5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	2235      	movs	r2, #53	@ 0x35
 800da60:	2101      	movs	r1, #1
 800da62:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	0018      	movs	r0, r3
 800da68:	f7f9 fb4a 	bl	8007100 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800da6c:	46c0      	nop			@ (mov r8, r8)
 800da6e:	46bd      	mov	sp, r7
 800da70:	b004      	add	sp, #16
 800da72:	bd80      	pop	{r7, pc}

0800da74 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b084      	sub	sp, #16
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da80:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	0018      	movs	r0, r3
 800da86:	f7ff ffc3 	bl	800da10 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800da8a:	46c0      	nop			@ (mov r8, r8)
 800da8c:	46bd      	mov	sp, r7
 800da8e:	b004      	add	sp, #16
 800da90:	bd80      	pop	{r7, pc}

0800da92 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800da92:	b580      	push	{r7, lr}
 800da94:	b084      	sub	sp, #16
 800da96:	af00      	add	r7, sp, #0
 800da98:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da9e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	685a      	ldr	r2, [r3, #4]
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	2103      	movs	r1, #3
 800daac:	438a      	bics	r2, r1
 800daae:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2200      	movs	r2, #0
 800dab4:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2200      	movs	r2, #0
 800daba:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	2235      	movs	r2, #53	@ 0x35
 800dac0:	2101      	movs	r1, #1
 800dac2:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dac8:	2208      	movs	r2, #8
 800daca:	431a      	orrs	r2, r3
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	0018      	movs	r0, r3
 800dad4:	f7ff ffa4 	bl	800da20 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800dad8:	46c0      	nop			@ (mov r8, r8)
 800dada:	46bd      	mov	sp, r7
 800dadc:	b004      	add	sp, #16
 800dade:	bd80      	pop	{r7, pc}

0800dae0 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b086      	sub	sp, #24
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	60f8      	str	r0, [r7, #12]
 800dae8:	60b9      	str	r1, [r7, #8]
 800daea:	603b      	str	r3, [r7, #0]
 800daec:	1dfb      	adds	r3, r7, #7
 800daee:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800daf0:	f7fc f916 	bl	8009d20 <HAL_GetTick>
 800daf4:	0003      	movs	r3, r0
 800daf6:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800daf8:	e017      	b.n	800db2a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	3301      	adds	r3, #1
 800dafe:	d014      	beq.n	800db2a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800db00:	f7fc f90e 	bl	8009d20 <HAL_GetTick>
 800db04:	0002      	movs	r2, r0
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	1ad3      	subs	r3, r2, r3
 800db0a:	683a      	ldr	r2, [r7, #0]
 800db0c:	429a      	cmp	r2, r3
 800db0e:	d902      	bls.n	800db16 <I2S_WaitFlagStateUntilTimeout+0x36>
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d109      	bne.n	800db2a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2235      	movs	r2, #53	@ 0x35
 800db1a:	2101      	movs	r1, #1
 800db1c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	2234      	movs	r2, #52	@ 0x34
 800db22:	2100      	movs	r1, #0
 800db24:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800db26:	2303      	movs	r3, #3
 800db28:	e00f      	b.n	800db4a <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	689b      	ldr	r3, [r3, #8]
 800db30:	68ba      	ldr	r2, [r7, #8]
 800db32:	4013      	ands	r3, r2
 800db34:	68ba      	ldr	r2, [r7, #8]
 800db36:	1ad3      	subs	r3, r2, r3
 800db38:	425a      	negs	r2, r3
 800db3a:	4153      	adcs	r3, r2
 800db3c:	b2db      	uxtb	r3, r3
 800db3e:	001a      	movs	r2, r3
 800db40:	1dfb      	adds	r3, r7, #7
 800db42:	781b      	ldrb	r3, [r3, #0]
 800db44:	429a      	cmp	r2, r3
 800db46:	d1d8      	bne.n	800dafa <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800db48:	2300      	movs	r3, #0
}
 800db4a:	0018      	movs	r0, r3
 800db4c:	46bd      	mov	sp, r7
 800db4e:	b006      	add	sp, #24
 800db50:	bd80      	pop	{r7, pc}
	...

0800db54 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800db54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db56:	b08b      	sub	sp, #44	@ 0x2c
 800db58:	af06      	add	r7, sp, #24
 800db5a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d101      	bne.n	800db66 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800db62:	2301      	movs	r3, #1
 800db64:	e0f0      	b.n	800dd48 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	4a79      	ldr	r2, [pc, #484]	@ (800dd50 <HAL_PCD_Init+0x1fc>)
 800db6a:	5c9b      	ldrb	r3, [r3, r2]
 800db6c:	b2db      	uxtb	r3, r3
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d108      	bne.n	800db84 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	23aa      	movs	r3, #170	@ 0xaa
 800db76:	009b      	lsls	r3, r3, #2
 800db78:	2100      	movs	r1, #0
 800db7a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	0018      	movs	r0, r3
 800db80:	f008 ff68 	bl	8016a54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	4a72      	ldr	r2, [pc, #456]	@ (800dd50 <HAL_PCD_Init+0x1fc>)
 800db88:	2103      	movs	r1, #3
 800db8a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	0018      	movs	r0, r3
 800db92:	f004 ff11 	bl	80129b8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800db96:	230f      	movs	r3, #15
 800db98:	18fb      	adds	r3, r7, r3
 800db9a:	2200      	movs	r2, #0
 800db9c:	701a      	strb	r2, [r3, #0]
 800db9e:	e049      	b.n	800dc34 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800dba0:	200f      	movs	r0, #15
 800dba2:	183b      	adds	r3, r7, r0
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	6879      	ldr	r1, [r7, #4]
 800dba8:	1c5a      	adds	r2, r3, #1
 800dbaa:	0013      	movs	r3, r2
 800dbac:	009b      	lsls	r3, r3, #2
 800dbae:	189b      	adds	r3, r3, r2
 800dbb0:	00db      	lsls	r3, r3, #3
 800dbb2:	18cb      	adds	r3, r1, r3
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800dbba:	183b      	adds	r3, r7, r0
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	6879      	ldr	r1, [r7, #4]
 800dbc0:	1c5a      	adds	r2, r3, #1
 800dbc2:	0013      	movs	r3, r2
 800dbc4:	009b      	lsls	r3, r3, #2
 800dbc6:	189b      	adds	r3, r3, r2
 800dbc8:	00db      	lsls	r3, r3, #3
 800dbca:	183a      	adds	r2, r7, r0
 800dbcc:	7812      	ldrb	r2, [r2, #0]
 800dbce:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800dbd0:	183b      	adds	r3, r7, r0
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	6879      	ldr	r1, [r7, #4]
 800dbd6:	1c5a      	adds	r2, r3, #1
 800dbd8:	0013      	movs	r3, r2
 800dbda:	009b      	lsls	r3, r3, #2
 800dbdc:	189b      	adds	r3, r3, r2
 800dbde:	00db      	lsls	r3, r3, #3
 800dbe0:	18cb      	adds	r3, r1, r3
 800dbe2:	3303      	adds	r3, #3
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800dbe8:	183b      	adds	r3, r7, r0
 800dbea:	781a      	ldrb	r2, [r3, #0]
 800dbec:	6879      	ldr	r1, [r7, #4]
 800dbee:	0013      	movs	r3, r2
 800dbf0:	009b      	lsls	r3, r3, #2
 800dbf2:	189b      	adds	r3, r3, r2
 800dbf4:	00db      	lsls	r3, r3, #3
 800dbf6:	18cb      	adds	r3, r1, r3
 800dbf8:	3338      	adds	r3, #56	@ 0x38
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800dbfe:	183b      	adds	r3, r7, r0
 800dc00:	781a      	ldrb	r2, [r3, #0]
 800dc02:	6879      	ldr	r1, [r7, #4]
 800dc04:	0013      	movs	r3, r2
 800dc06:	009b      	lsls	r3, r3, #2
 800dc08:	189b      	adds	r3, r3, r2
 800dc0a:	00db      	lsls	r3, r3, #3
 800dc0c:	18cb      	adds	r3, r1, r3
 800dc0e:	333c      	adds	r3, #60	@ 0x3c
 800dc10:	2200      	movs	r2, #0
 800dc12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800dc14:	183b      	adds	r3, r7, r0
 800dc16:	781a      	ldrb	r2, [r3, #0]
 800dc18:	6879      	ldr	r1, [r7, #4]
 800dc1a:	0013      	movs	r3, r2
 800dc1c:	009b      	lsls	r3, r3, #2
 800dc1e:	189b      	adds	r3, r3, r2
 800dc20:	00db      	lsls	r3, r3, #3
 800dc22:	18cb      	adds	r3, r1, r3
 800dc24:	3340      	adds	r3, #64	@ 0x40
 800dc26:	2200      	movs	r2, #0
 800dc28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc2a:	183b      	adds	r3, r7, r0
 800dc2c:	781a      	ldrb	r2, [r3, #0]
 800dc2e:	183b      	adds	r3, r7, r0
 800dc30:	3201      	adds	r2, #1
 800dc32:	701a      	strb	r2, [r3, #0]
 800dc34:	210f      	movs	r1, #15
 800dc36:	187b      	adds	r3, r7, r1
 800dc38:	781a      	ldrb	r2, [r3, #0]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d3ae      	bcc.n	800dba0 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc42:	187b      	adds	r3, r7, r1
 800dc44:	2200      	movs	r2, #0
 800dc46:	701a      	strb	r2, [r3, #0]
 800dc48:	e056      	b.n	800dcf8 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800dc4a:	240f      	movs	r4, #15
 800dc4c:	193b      	adds	r3, r7, r4
 800dc4e:	781a      	ldrb	r2, [r3, #0]
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	236a      	movs	r3, #106	@ 0x6a
 800dc54:	33ff      	adds	r3, #255	@ 0xff
 800dc56:	0019      	movs	r1, r3
 800dc58:	0013      	movs	r3, r2
 800dc5a:	009b      	lsls	r3, r3, #2
 800dc5c:	189b      	adds	r3, r3, r2
 800dc5e:	00db      	lsls	r3, r3, #3
 800dc60:	18c3      	adds	r3, r0, r3
 800dc62:	185b      	adds	r3, r3, r1
 800dc64:	2200      	movs	r2, #0
 800dc66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800dc68:	193b      	adds	r3, r7, r4
 800dc6a:	781a      	ldrb	r2, [r3, #0]
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	23b4      	movs	r3, #180	@ 0xb4
 800dc70:	0059      	lsls	r1, r3, #1
 800dc72:	0013      	movs	r3, r2
 800dc74:	009b      	lsls	r3, r3, #2
 800dc76:	189b      	adds	r3, r3, r2
 800dc78:	00db      	lsls	r3, r3, #3
 800dc7a:	18c3      	adds	r3, r0, r3
 800dc7c:	185b      	adds	r3, r3, r1
 800dc7e:	193a      	adds	r2, r7, r4
 800dc80:	7812      	ldrb	r2, [r2, #0]
 800dc82:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800dc84:	193b      	adds	r3, r7, r4
 800dc86:	781a      	ldrb	r2, [r3, #0]
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	236c      	movs	r3, #108	@ 0x6c
 800dc8c:	33ff      	adds	r3, #255	@ 0xff
 800dc8e:	0019      	movs	r1, r3
 800dc90:	0013      	movs	r3, r2
 800dc92:	009b      	lsls	r3, r3, #2
 800dc94:	189b      	adds	r3, r3, r2
 800dc96:	00db      	lsls	r3, r3, #3
 800dc98:	18c3      	adds	r3, r0, r3
 800dc9a:	185b      	adds	r3, r3, r1
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800dca0:	193b      	adds	r3, r7, r4
 800dca2:	781a      	ldrb	r2, [r3, #0]
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	23bc      	movs	r3, #188	@ 0xbc
 800dca8:	0059      	lsls	r1, r3, #1
 800dcaa:	0013      	movs	r3, r2
 800dcac:	009b      	lsls	r3, r3, #2
 800dcae:	189b      	adds	r3, r3, r2
 800dcb0:	00db      	lsls	r3, r3, #3
 800dcb2:	18c3      	adds	r3, r0, r3
 800dcb4:	185b      	adds	r3, r3, r1
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800dcba:	193b      	adds	r3, r7, r4
 800dcbc:	781a      	ldrb	r2, [r3, #0]
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	23be      	movs	r3, #190	@ 0xbe
 800dcc2:	0059      	lsls	r1, r3, #1
 800dcc4:	0013      	movs	r3, r2
 800dcc6:	009b      	lsls	r3, r3, #2
 800dcc8:	189b      	adds	r3, r3, r2
 800dcca:	00db      	lsls	r3, r3, #3
 800dccc:	18c3      	adds	r3, r0, r3
 800dcce:	185b      	adds	r3, r3, r1
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800dcd4:	193b      	adds	r3, r7, r4
 800dcd6:	781a      	ldrb	r2, [r3, #0]
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	23c0      	movs	r3, #192	@ 0xc0
 800dcdc:	0059      	lsls	r1, r3, #1
 800dcde:	0013      	movs	r3, r2
 800dce0:	009b      	lsls	r3, r3, #2
 800dce2:	189b      	adds	r3, r3, r2
 800dce4:	00db      	lsls	r3, r3, #3
 800dce6:	18c3      	adds	r3, r0, r3
 800dce8:	185b      	adds	r3, r3, r1
 800dcea:	2200      	movs	r2, #0
 800dcec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dcee:	193b      	adds	r3, r7, r4
 800dcf0:	781a      	ldrb	r2, [r3, #0]
 800dcf2:	193b      	adds	r3, r7, r4
 800dcf4:	3201      	adds	r2, #1
 800dcf6:	701a      	strb	r2, [r3, #0]
 800dcf8:	230f      	movs	r3, #15
 800dcfa:	18fb      	adds	r3, r7, r3
 800dcfc:	781a      	ldrb	r2, [r3, #0]
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	685b      	ldr	r3, [r3, #4]
 800dd02:	429a      	cmp	r2, r3
 800dd04:	d3a1      	bcc.n	800dc4a <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6818      	ldr	r0, [r3, #0]
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	466a      	mov	r2, sp
 800dd0e:	0011      	movs	r1, r2
 800dd10:	001a      	movs	r2, r3
 800dd12:	3210      	adds	r2, #16
 800dd14:	ca70      	ldmia	r2!, {r4, r5, r6}
 800dd16:	c170      	stmia	r1!, {r4, r5, r6}
 800dd18:	ca30      	ldmia	r2!, {r4, r5}
 800dd1a:	c130      	stmia	r1!, {r4, r5}
 800dd1c:	6859      	ldr	r1, [r3, #4]
 800dd1e:	689a      	ldr	r2, [r3, #8]
 800dd20:	68db      	ldr	r3, [r3, #12]
 800dd22:	f004 fe63 	bl	80129ec <USB_DevInit>

  hpcd->USB_Address = 0U;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2224      	movs	r2, #36	@ 0x24
 800dd2a:	2100      	movs	r1, #0
 800dd2c:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	4a07      	ldr	r2, [pc, #28]	@ (800dd50 <HAL_PCD_Init+0x1fc>)
 800dd32:	2101      	movs	r1, #1
 800dd34:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	69db      	ldr	r3, [r3, #28]
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	d103      	bne.n	800dd46 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	0018      	movs	r0, r3
 800dd42:	f001 fd23 	bl	800f78c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800dd46:	2300      	movs	r3, #0
}
 800dd48:	0018      	movs	r0, r3
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	b005      	add	sp, #20
 800dd4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd50:	000002a9 	.word	0x000002a9

0800dd54 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b082      	sub	sp, #8
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800dd5c:	687a      	ldr	r2, [r7, #4]
 800dd5e:	23aa      	movs	r3, #170	@ 0xaa
 800dd60:	009b      	lsls	r3, r3, #2
 800dd62:	5cd3      	ldrb	r3, [r2, r3]
 800dd64:	2b01      	cmp	r3, #1
 800dd66:	d101      	bne.n	800dd6c <HAL_PCD_Start+0x18>
 800dd68:	2302      	movs	r3, #2
 800dd6a:	e014      	b.n	800dd96 <HAL_PCD_Start+0x42>
 800dd6c:	687a      	ldr	r2, [r7, #4]
 800dd6e:	23aa      	movs	r3, #170	@ 0xaa
 800dd70:	009b      	lsls	r3, r3, #2
 800dd72:	2101      	movs	r1, #1
 800dd74:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	0018      	movs	r0, r3
 800dd7c:	f004 fe06 	bl	801298c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	0018      	movs	r0, r3
 800dd86:	f006 fe09 	bl	801499c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800dd8a:	687a      	ldr	r2, [r7, #4]
 800dd8c:	23aa      	movs	r3, #170	@ 0xaa
 800dd8e:	009b      	lsls	r3, r3, #2
 800dd90:	2100      	movs	r1, #0
 800dd92:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800dd94:	2300      	movs	r3, #0
}
 800dd96:	0018      	movs	r0, r3
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	b002      	add	sp, #8
 800dd9c:	bd80      	pop	{r7, pc}
	...

0800dda0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b084      	sub	sp, #16
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	0018      	movs	r0, r3
 800ddae:	f006 fe0b 	bl	80149c8 <USB_ReadInterrupts>
 800ddb2:	0003      	movs	r3, r0
 800ddb4:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800ddb6:	68fa      	ldr	r2, [r7, #12]
 800ddb8:	2380      	movs	r3, #128	@ 0x80
 800ddba:	021b      	lsls	r3, r3, #8
 800ddbc:	4013      	ands	r3, r2
 800ddbe:	d004      	beq.n	800ddca <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	0018      	movs	r0, r3
 800ddc4:	f000 fb62 	bl	800e48c <PCD_EP_ISR_Handler>

    return;
 800ddc8:	e11d      	b.n	800e006 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800ddca:	68fa      	ldr	r2, [r7, #12]
 800ddcc:	2380      	movs	r3, #128	@ 0x80
 800ddce:	00db      	lsls	r3, r3, #3
 800ddd0:	4013      	ands	r3, r2
 800ddd2:	d015      	beq.n	800de00 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	2244      	movs	r2, #68	@ 0x44
 800ddda:	5a9b      	ldrh	r3, [r3, r2]
 800dddc:	b29a      	uxth	r2, r3
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	498a      	ldr	r1, [pc, #552]	@ (800e00c <HAL_PCD_IRQHandler+0x26c>)
 800dde4:	400a      	ands	r2, r1
 800dde6:	b291      	uxth	r1, r2
 800dde8:	2244      	movs	r2, #68	@ 0x44
 800ddea:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	0018      	movs	r0, r3
 800ddf0:	f008 feb3 	bl	8016b5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2100      	movs	r1, #0
 800ddf8:	0018      	movs	r0, r3
 800ddfa:	f000 f915 	bl	800e028 <HAL_PCD_SetAddress>

    return;
 800ddfe:	e102      	b.n	800e006 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800de00:	68fa      	ldr	r2, [r7, #12]
 800de02:	2380      	movs	r3, #128	@ 0x80
 800de04:	01db      	lsls	r3, r3, #7
 800de06:	4013      	ands	r3, r2
 800de08:	d00c      	beq.n	800de24 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	2244      	movs	r2, #68	@ 0x44
 800de10:	5a9b      	ldrh	r3, [r3, r2]
 800de12:	b29a      	uxth	r2, r3
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	497d      	ldr	r1, [pc, #500]	@ (800e010 <HAL_PCD_IRQHandler+0x270>)
 800de1a:	400a      	ands	r2, r1
 800de1c:	b291      	uxth	r1, r2
 800de1e:	2244      	movs	r2, #68	@ 0x44
 800de20:	5299      	strh	r1, [r3, r2]

    return;
 800de22:	e0f0      	b.n	800e006 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800de24:	68fa      	ldr	r2, [r7, #12]
 800de26:	2380      	movs	r3, #128	@ 0x80
 800de28:	019b      	lsls	r3, r3, #6
 800de2a:	4013      	ands	r3, r2
 800de2c:	d00c      	beq.n	800de48 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	2244      	movs	r2, #68	@ 0x44
 800de34:	5a9b      	ldrh	r3, [r3, r2]
 800de36:	b29a      	uxth	r2, r3
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	4975      	ldr	r1, [pc, #468]	@ (800e014 <HAL_PCD_IRQHandler+0x274>)
 800de3e:	400a      	ands	r2, r1
 800de40:	b291      	uxth	r1, r2
 800de42:	2244      	movs	r2, #68	@ 0x44
 800de44:	5299      	strh	r1, [r3, r2]

    return;
 800de46:	e0de      	b.n	800e006 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800de48:	68fa      	ldr	r2, [r7, #12]
 800de4a:	2380      	movs	r3, #128	@ 0x80
 800de4c:	015b      	lsls	r3, r3, #5
 800de4e:	4013      	ands	r3, r2
 800de50:	d038      	beq.n	800dec4 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	2240      	movs	r2, #64	@ 0x40
 800de58:	5a9b      	ldrh	r3, [r3, r2]
 800de5a:	b29a      	uxth	r2, r3
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	2104      	movs	r1, #4
 800de62:	438a      	bics	r2, r1
 800de64:	b291      	uxth	r1, r2
 800de66:	2240      	movs	r2, #64	@ 0x40
 800de68:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	2240      	movs	r2, #64	@ 0x40
 800de70:	5a9b      	ldrh	r3, [r3, r2]
 800de72:	b29a      	uxth	r2, r3
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	2108      	movs	r1, #8
 800de7a:	438a      	bics	r2, r1
 800de7c:	b291      	uxth	r1, r2
 800de7e:	2240      	movs	r2, #64	@ 0x40
 800de80:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800de82:	687a      	ldr	r2, [r7, #4]
 800de84:	23b8      	movs	r3, #184	@ 0xb8
 800de86:	009b      	lsls	r3, r3, #2
 800de88:	5cd3      	ldrb	r3, [r2, r3]
 800de8a:	2b01      	cmp	r3, #1
 800de8c:	d109      	bne.n	800dea2 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800de8e:	687a      	ldr	r2, [r7, #4]
 800de90:	23b8      	movs	r3, #184	@ 0xb8
 800de92:	009b      	lsls	r3, r3, #2
 800de94:	2100      	movs	r1, #0
 800de96:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2100      	movs	r1, #0
 800de9c:	0018      	movs	r0, r3
 800de9e:	f001 fc9f 	bl	800f7e0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	0018      	movs	r0, r3
 800dea6:	f008 fe99 	bl	8016bdc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	2244      	movs	r2, #68	@ 0x44
 800deb0:	5a9b      	ldrh	r3, [r3, r2]
 800deb2:	b29a      	uxth	r2, r3
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	4957      	ldr	r1, [pc, #348]	@ (800e018 <HAL_PCD_IRQHandler+0x278>)
 800deba:	400a      	ands	r2, r1
 800debc:	b291      	uxth	r1, r2
 800debe:	2244      	movs	r2, #68	@ 0x44
 800dec0:	5299      	strh	r1, [r3, r2]

    return;
 800dec2:	e0a0      	b.n	800e006 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800dec4:	68fa      	ldr	r2, [r7, #12]
 800dec6:	2380      	movs	r3, #128	@ 0x80
 800dec8:	011b      	lsls	r3, r3, #4
 800deca:	4013      	ands	r3, r2
 800decc:	d028      	beq.n	800df20 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	2240      	movs	r2, #64	@ 0x40
 800ded4:	5a9b      	ldrh	r3, [r3, r2]
 800ded6:	b29a      	uxth	r2, r3
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	2108      	movs	r1, #8
 800dede:	430a      	orrs	r2, r1
 800dee0:	b291      	uxth	r1, r2
 800dee2:	2240      	movs	r2, #64	@ 0x40
 800dee4:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	2244      	movs	r2, #68	@ 0x44
 800deec:	5a9b      	ldrh	r3, [r3, r2]
 800deee:	b29a      	uxth	r2, r3
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	4949      	ldr	r1, [pc, #292]	@ (800e01c <HAL_PCD_IRQHandler+0x27c>)
 800def6:	400a      	ands	r2, r1
 800def8:	b291      	uxth	r1, r2
 800defa:	2244      	movs	r2, #68	@ 0x44
 800defc:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	2240      	movs	r2, #64	@ 0x40
 800df04:	5a9b      	ldrh	r3, [r3, r2]
 800df06:	b29a      	uxth	r2, r3
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	2104      	movs	r1, #4
 800df0e:	430a      	orrs	r2, r1
 800df10:	b291      	uxth	r1, r2
 800df12:	2240      	movs	r2, #64	@ 0x40
 800df14:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	0018      	movs	r0, r3
 800df1a:	f008 fe43 	bl	8016ba4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800df1e:	e072      	b.n	800e006 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	2280      	movs	r2, #128	@ 0x80
 800df24:	4013      	ands	r3, r2
 800df26:	d046      	beq.n	800dfb6 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	2244      	movs	r2, #68	@ 0x44
 800df2e:	5a9b      	ldrh	r3, [r3, r2]
 800df30:	b29a      	uxth	r2, r3
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	2180      	movs	r1, #128	@ 0x80
 800df38:	438a      	bics	r2, r1
 800df3a:	b291      	uxth	r1, r2
 800df3c:	2244      	movs	r2, #68	@ 0x44
 800df3e:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800df40:	687a      	ldr	r2, [r7, #4]
 800df42:	23b8      	movs	r3, #184	@ 0xb8
 800df44:	009b      	lsls	r3, r3, #2
 800df46:	5cd3      	ldrb	r3, [r2, r3]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d12f      	bne.n	800dfac <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	2240      	movs	r2, #64	@ 0x40
 800df52:	5a9b      	ldrh	r3, [r3, r2]
 800df54:	b29a      	uxth	r2, r3
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2104      	movs	r1, #4
 800df5c:	430a      	orrs	r2, r1
 800df5e:	b291      	uxth	r1, r2
 800df60:	2240      	movs	r2, #64	@ 0x40
 800df62:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	2240      	movs	r2, #64	@ 0x40
 800df6a:	5a9b      	ldrh	r3, [r3, r2]
 800df6c:	b29a      	uxth	r2, r3
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	2108      	movs	r1, #8
 800df74:	430a      	orrs	r2, r1
 800df76:	b291      	uxth	r1, r2
 800df78:	2240      	movs	r2, #64	@ 0x40
 800df7a:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800df7c:	687a      	ldr	r2, [r7, #4]
 800df7e:	23b8      	movs	r3, #184	@ 0xb8
 800df80:	009b      	lsls	r3, r3, #2
 800df82:	2101      	movs	r1, #1
 800df84:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	2254      	movs	r2, #84	@ 0x54
 800df8c:	5a9b      	ldrh	r3, [r3, r2]
 800df8e:	b29b      	uxth	r3, r3
 800df90:	089b      	lsrs	r3, r3, #2
 800df92:	223c      	movs	r2, #60	@ 0x3c
 800df94:	4013      	ands	r3, r2
 800df96:	0019      	movs	r1, r3
 800df98:	687a      	ldr	r2, [r7, #4]
 800df9a:	23b9      	movs	r3, #185	@ 0xb9
 800df9c:	009b      	lsls	r3, r3, #2
 800df9e:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2101      	movs	r1, #1
 800dfa4:	0018      	movs	r0, r3
 800dfa6:	f001 fc1b 	bl	800f7e0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800dfaa:	e02c      	b.n	800e006 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	0018      	movs	r0, r3
 800dfb0:	f008 fdf8 	bl	8016ba4 <HAL_PCD_SuspendCallback>
    return;
 800dfb4:	e027      	b.n	800e006 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800dfb6:	68fa      	ldr	r2, [r7, #12]
 800dfb8:	2380      	movs	r3, #128	@ 0x80
 800dfba:	009b      	lsls	r3, r3, #2
 800dfbc:	4013      	ands	r3, r2
 800dfbe:	d010      	beq.n	800dfe2 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	2244      	movs	r2, #68	@ 0x44
 800dfc6:	5a9b      	ldrh	r3, [r3, r2]
 800dfc8:	b29a      	uxth	r2, r3
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	4914      	ldr	r1, [pc, #80]	@ (800e020 <HAL_PCD_IRQHandler+0x280>)
 800dfd0:	400a      	ands	r2, r1
 800dfd2:	b291      	uxth	r1, r2
 800dfd4:	2244      	movs	r2, #68	@ 0x44
 800dfd6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	0018      	movs	r0, r3
 800dfdc:	f008 fdae 	bl	8016b3c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800dfe0:	e011      	b.n	800e006 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800dfe2:	68fa      	ldr	r2, [r7, #12]
 800dfe4:	2380      	movs	r3, #128	@ 0x80
 800dfe6:	005b      	lsls	r3, r3, #1
 800dfe8:	4013      	ands	r3, r2
 800dfea:	d00c      	beq.n	800e006 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	2244      	movs	r2, #68	@ 0x44
 800dff2:	5a9b      	ldrh	r3, [r3, r2]
 800dff4:	b29a      	uxth	r2, r3
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	490a      	ldr	r1, [pc, #40]	@ (800e024 <HAL_PCD_IRQHandler+0x284>)
 800dffc:	400a      	ands	r2, r1
 800dffe:	b291      	uxth	r1, r2
 800e000:	2244      	movs	r2, #68	@ 0x44
 800e002:	5299      	strh	r1, [r3, r2]

    return;
 800e004:	46c0      	nop			@ (mov r8, r8)
  }
}
 800e006:	46bd      	mov	sp, r7
 800e008:	b004      	add	sp, #16
 800e00a:	bd80      	pop	{r7, pc}
 800e00c:	fffffbff 	.word	0xfffffbff
 800e010:	ffffbfff 	.word	0xffffbfff
 800e014:	ffffdfff 	.word	0xffffdfff
 800e018:	ffffefff 	.word	0xffffefff
 800e01c:	fffff7ff 	.word	0xfffff7ff
 800e020:	fffffdff 	.word	0xfffffdff
 800e024:	fffffeff 	.word	0xfffffeff

0800e028 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	000a      	movs	r2, r1
 800e032:	1cfb      	adds	r3, r7, #3
 800e034:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800e036:	687a      	ldr	r2, [r7, #4]
 800e038:	23aa      	movs	r3, #170	@ 0xaa
 800e03a:	009b      	lsls	r3, r3, #2
 800e03c:	5cd3      	ldrb	r3, [r2, r3]
 800e03e:	2b01      	cmp	r3, #1
 800e040:	d101      	bne.n	800e046 <HAL_PCD_SetAddress+0x1e>
 800e042:	2302      	movs	r3, #2
 800e044:	e017      	b.n	800e076 <HAL_PCD_SetAddress+0x4e>
 800e046:	687a      	ldr	r2, [r7, #4]
 800e048:	23aa      	movs	r3, #170	@ 0xaa
 800e04a:	009b      	lsls	r3, r3, #2
 800e04c:	2101      	movs	r1, #1
 800e04e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	1cfa      	adds	r2, r7, #3
 800e054:	2124      	movs	r1, #36	@ 0x24
 800e056:	7812      	ldrb	r2, [r2, #0]
 800e058:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681a      	ldr	r2, [r3, #0]
 800e05e:	1cfb      	adds	r3, r7, #3
 800e060:	781b      	ldrb	r3, [r3, #0]
 800e062:	0019      	movs	r1, r3
 800e064:	0010      	movs	r0, r2
 800e066:	f006 fc85 	bl	8014974 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800e06a:	687a      	ldr	r2, [r7, #4]
 800e06c:	23aa      	movs	r3, #170	@ 0xaa
 800e06e:	009b      	lsls	r3, r3, #2
 800e070:	2100      	movs	r1, #0
 800e072:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e074:	2300      	movs	r3, #0
}
 800e076:	0018      	movs	r0, r3
 800e078:	46bd      	mov	sp, r7
 800e07a:	b002      	add	sp, #8
 800e07c:	bd80      	pop	{r7, pc}

0800e07e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800e07e:	b590      	push	{r4, r7, lr}
 800e080:	b085      	sub	sp, #20
 800e082:	af00      	add	r7, sp, #0
 800e084:	6078      	str	r0, [r7, #4]
 800e086:	000c      	movs	r4, r1
 800e088:	0010      	movs	r0, r2
 800e08a:	0019      	movs	r1, r3
 800e08c:	1cfb      	adds	r3, r7, #3
 800e08e:	1c22      	adds	r2, r4, #0
 800e090:	701a      	strb	r2, [r3, #0]
 800e092:	003b      	movs	r3, r7
 800e094:	1c02      	adds	r2, r0, #0
 800e096:	801a      	strh	r2, [r3, #0]
 800e098:	1cbb      	adds	r3, r7, #2
 800e09a:	1c0a      	adds	r2, r1, #0
 800e09c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800e09e:	230b      	movs	r3, #11
 800e0a0:	18fb      	adds	r3, r7, r3
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e0a6:	1cfb      	adds	r3, r7, #3
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	b25b      	sxtb	r3, r3
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	da0f      	bge.n	800e0d0 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e0b0:	1cfb      	adds	r3, r7, #3
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	2207      	movs	r2, #7
 800e0b6:	4013      	ands	r3, r2
 800e0b8:	1c5a      	adds	r2, r3, #1
 800e0ba:	0013      	movs	r3, r2
 800e0bc:	009b      	lsls	r3, r3, #2
 800e0be:	189b      	adds	r3, r3, r2
 800e0c0:	00db      	lsls	r3, r3, #3
 800e0c2:	687a      	ldr	r2, [r7, #4]
 800e0c4:	18d3      	adds	r3, r2, r3
 800e0c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2201      	movs	r2, #1
 800e0cc:	705a      	strb	r2, [r3, #1]
 800e0ce:	e00f      	b.n	800e0f0 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e0d0:	1cfb      	adds	r3, r7, #3
 800e0d2:	781b      	ldrb	r3, [r3, #0]
 800e0d4:	2207      	movs	r2, #7
 800e0d6:	401a      	ands	r2, r3
 800e0d8:	0013      	movs	r3, r2
 800e0da:	009b      	lsls	r3, r3, #2
 800e0dc:	189b      	adds	r3, r3, r2
 800e0de:	00db      	lsls	r3, r3, #3
 800e0e0:	3369      	adds	r3, #105	@ 0x69
 800e0e2:	33ff      	adds	r3, #255	@ 0xff
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	18d3      	adds	r3, r2, r3
 800e0e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800e0f0:	1cfb      	adds	r3, r7, #3
 800e0f2:	781b      	ldrb	r3, [r3, #0]
 800e0f4:	2207      	movs	r2, #7
 800e0f6:	4013      	ands	r3, r2
 800e0f8:	b2da      	uxtb	r2, r3
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800e0fe:	003b      	movs	r3, r7
 800e100:	881a      	ldrh	r2, [r3, #0]
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	1cba      	adds	r2, r7, #2
 800e10a:	7812      	ldrb	r2, [r2, #0]
 800e10c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800e10e:	1cbb      	adds	r3, r7, #2
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	2b02      	cmp	r3, #2
 800e114:	d102      	bne.n	800e11c <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	2200      	movs	r2, #0
 800e11a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800e11c:	687a      	ldr	r2, [r7, #4]
 800e11e:	23aa      	movs	r3, #170	@ 0xaa
 800e120:	009b      	lsls	r3, r3, #2
 800e122:	5cd3      	ldrb	r3, [r2, r3]
 800e124:	2b01      	cmp	r3, #1
 800e126:	d101      	bne.n	800e12c <HAL_PCD_EP_Open+0xae>
 800e128:	2302      	movs	r3, #2
 800e12a:	e013      	b.n	800e154 <HAL_PCD_EP_Open+0xd6>
 800e12c:	687a      	ldr	r2, [r7, #4]
 800e12e:	23aa      	movs	r3, #170	@ 0xaa
 800e130:	009b      	lsls	r3, r3, #2
 800e132:	2101      	movs	r1, #1
 800e134:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	68fa      	ldr	r2, [r7, #12]
 800e13c:	0011      	movs	r1, r2
 800e13e:	0018      	movs	r0, r3
 800e140:	f004 fc7c 	bl	8012a3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e144:	687a      	ldr	r2, [r7, #4]
 800e146:	23aa      	movs	r3, #170	@ 0xaa
 800e148:	009b      	lsls	r3, r3, #2
 800e14a:	2100      	movs	r1, #0
 800e14c:	54d1      	strb	r1, [r2, r3]

  return ret;
 800e14e:	230b      	movs	r3, #11
 800e150:	18fb      	adds	r3, r7, r3
 800e152:	781b      	ldrb	r3, [r3, #0]
}
 800e154:	0018      	movs	r0, r3
 800e156:	46bd      	mov	sp, r7
 800e158:	b005      	add	sp, #20
 800e15a:	bd90      	pop	{r4, r7, pc}

0800e15c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b084      	sub	sp, #16
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	000a      	movs	r2, r1
 800e166:	1cfb      	adds	r3, r7, #3
 800e168:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e16a:	1cfb      	adds	r3, r7, #3
 800e16c:	781b      	ldrb	r3, [r3, #0]
 800e16e:	b25b      	sxtb	r3, r3
 800e170:	2b00      	cmp	r3, #0
 800e172:	da0f      	bge.n	800e194 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e174:	1cfb      	adds	r3, r7, #3
 800e176:	781b      	ldrb	r3, [r3, #0]
 800e178:	2207      	movs	r2, #7
 800e17a:	4013      	ands	r3, r2
 800e17c:	1c5a      	adds	r2, r3, #1
 800e17e:	0013      	movs	r3, r2
 800e180:	009b      	lsls	r3, r3, #2
 800e182:	189b      	adds	r3, r3, r2
 800e184:	00db      	lsls	r3, r3, #3
 800e186:	687a      	ldr	r2, [r7, #4]
 800e188:	18d3      	adds	r3, r2, r3
 800e18a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2201      	movs	r2, #1
 800e190:	705a      	strb	r2, [r3, #1]
 800e192:	e00f      	b.n	800e1b4 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e194:	1cfb      	adds	r3, r7, #3
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	2207      	movs	r2, #7
 800e19a:	401a      	ands	r2, r3
 800e19c:	0013      	movs	r3, r2
 800e19e:	009b      	lsls	r3, r3, #2
 800e1a0:	189b      	adds	r3, r3, r2
 800e1a2:	00db      	lsls	r3, r3, #3
 800e1a4:	3369      	adds	r3, #105	@ 0x69
 800e1a6:	33ff      	adds	r3, #255	@ 0xff
 800e1a8:	687a      	ldr	r2, [r7, #4]
 800e1aa:	18d3      	adds	r3, r2, r3
 800e1ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800e1b4:	1cfb      	adds	r3, r7, #3
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	2207      	movs	r2, #7
 800e1ba:	4013      	ands	r3, r2
 800e1bc:	b2da      	uxtb	r2, r3
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e1c2:	687a      	ldr	r2, [r7, #4]
 800e1c4:	23aa      	movs	r3, #170	@ 0xaa
 800e1c6:	009b      	lsls	r3, r3, #2
 800e1c8:	5cd3      	ldrb	r3, [r2, r3]
 800e1ca:	2b01      	cmp	r3, #1
 800e1cc:	d101      	bne.n	800e1d2 <HAL_PCD_EP_Close+0x76>
 800e1ce:	2302      	movs	r3, #2
 800e1d0:	e011      	b.n	800e1f6 <HAL_PCD_EP_Close+0x9a>
 800e1d2:	687a      	ldr	r2, [r7, #4]
 800e1d4:	23aa      	movs	r3, #170	@ 0xaa
 800e1d6:	009b      	lsls	r3, r3, #2
 800e1d8:	2101      	movs	r1, #1
 800e1da:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	68fa      	ldr	r2, [r7, #12]
 800e1e2:	0011      	movs	r1, r2
 800e1e4:	0018      	movs	r0, r3
 800e1e6:	f004 ffcb 	bl	8013180 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e1ea:	687a      	ldr	r2, [r7, #4]
 800e1ec:	23aa      	movs	r3, #170	@ 0xaa
 800e1ee:	009b      	lsls	r3, r3, #2
 800e1f0:	2100      	movs	r1, #0
 800e1f2:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800e1f4:	2300      	movs	r3, #0
}
 800e1f6:	0018      	movs	r0, r3
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	b004      	add	sp, #16
 800e1fc:	bd80      	pop	{r7, pc}

0800e1fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e1fe:	b580      	push	{r7, lr}
 800e200:	b086      	sub	sp, #24
 800e202:	af00      	add	r7, sp, #0
 800e204:	60f8      	str	r0, [r7, #12]
 800e206:	607a      	str	r2, [r7, #4]
 800e208:	603b      	str	r3, [r7, #0]
 800e20a:	200b      	movs	r0, #11
 800e20c:	183b      	adds	r3, r7, r0
 800e20e:	1c0a      	adds	r2, r1, #0
 800e210:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e212:	0001      	movs	r1, r0
 800e214:	187b      	adds	r3, r7, r1
 800e216:	781b      	ldrb	r3, [r3, #0]
 800e218:	2207      	movs	r2, #7
 800e21a:	401a      	ands	r2, r3
 800e21c:	0013      	movs	r3, r2
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	189b      	adds	r3, r3, r2
 800e222:	00db      	lsls	r3, r3, #3
 800e224:	3369      	adds	r3, #105	@ 0x69
 800e226:	33ff      	adds	r3, #255	@ 0xff
 800e228:	68fa      	ldr	r2, [r7, #12]
 800e22a:	18d3      	adds	r3, r2, r3
 800e22c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	687a      	ldr	r2, [r7, #4]
 800e232:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	683a      	ldr	r2, [r7, #0]
 800e238:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	2200      	movs	r2, #0
 800e23e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	2200      	movs	r2, #0
 800e244:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e246:	187b      	adds	r3, r7, r1
 800e248:	781b      	ldrb	r3, [r3, #0]
 800e24a:	2207      	movs	r2, #7
 800e24c:	4013      	ands	r3, r2
 800e24e:	b2da      	uxtb	r2, r3
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	697a      	ldr	r2, [r7, #20]
 800e25a:	0011      	movs	r1, r2
 800e25c:	0018      	movs	r0, r3
 800e25e:	f005 f94f 	bl	8013500 <USB_EPStartXfer>

  return HAL_OK;
 800e262:	2300      	movs	r3, #0
}
 800e264:	0018      	movs	r0, r3
 800e266:	46bd      	mov	sp, r7
 800e268:	b006      	add	sp, #24
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	000a      	movs	r2, r1
 800e276:	1cfb      	adds	r3, r7, #3
 800e278:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800e27a:	1cfb      	adds	r3, r7, #3
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	2207      	movs	r2, #7
 800e280:	401a      	ands	r2, r3
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	23c2      	movs	r3, #194	@ 0xc2
 800e286:	0059      	lsls	r1, r3, #1
 800e288:	0013      	movs	r3, r2
 800e28a:	009b      	lsls	r3, r3, #2
 800e28c:	189b      	adds	r3, r3, r2
 800e28e:	00db      	lsls	r3, r3, #3
 800e290:	18c3      	adds	r3, r0, r3
 800e292:	185b      	adds	r3, r3, r1
 800e294:	681b      	ldr	r3, [r3, #0]
}
 800e296:	0018      	movs	r0, r3
 800e298:	46bd      	mov	sp, r7
 800e29a:	b002      	add	sp, #8
 800e29c:	bd80      	pop	{r7, pc}

0800e29e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e29e:	b580      	push	{r7, lr}
 800e2a0:	b086      	sub	sp, #24
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	60f8      	str	r0, [r7, #12]
 800e2a6:	607a      	str	r2, [r7, #4]
 800e2a8:	603b      	str	r3, [r7, #0]
 800e2aa:	200b      	movs	r0, #11
 800e2ac:	183b      	adds	r3, r7, r0
 800e2ae:	1c0a      	adds	r2, r1, #0
 800e2b0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e2b2:	183b      	adds	r3, r7, r0
 800e2b4:	781b      	ldrb	r3, [r3, #0]
 800e2b6:	2207      	movs	r2, #7
 800e2b8:	4013      	ands	r3, r2
 800e2ba:	1c5a      	adds	r2, r3, #1
 800e2bc:	0013      	movs	r3, r2
 800e2be:	009b      	lsls	r3, r3, #2
 800e2c0:	189b      	adds	r3, r3, r2
 800e2c2:	00db      	lsls	r3, r3, #3
 800e2c4:	68fa      	ldr	r2, [r7, #12]
 800e2c6:	18d3      	adds	r3, r2, r3
 800e2c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	687a      	ldr	r2, [r7, #4]
 800e2ce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	683a      	ldr	r2, [r7, #0]
 800e2d4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	2224      	movs	r2, #36	@ 0x24
 800e2da:	2101      	movs	r1, #1
 800e2dc:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800e2de:	697b      	ldr	r3, [r7, #20]
 800e2e0:	683a      	ldr	r2, [r7, #0]
 800e2e2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800e2e4:	697b      	ldr	r3, [r7, #20]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e2f0:	183b      	adds	r3, r7, r0
 800e2f2:	781b      	ldrb	r3, [r3, #0]
 800e2f4:	2207      	movs	r2, #7
 800e2f6:	4013      	ands	r3, r2
 800e2f8:	b2da      	uxtb	r2, r3
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	697a      	ldr	r2, [r7, #20]
 800e304:	0011      	movs	r1, r2
 800e306:	0018      	movs	r0, r3
 800e308:	f005 f8fa 	bl	8013500 <USB_EPStartXfer>

  return HAL_OK;
 800e30c:	2300      	movs	r3, #0
}
 800e30e:	0018      	movs	r0, r3
 800e310:	46bd      	mov	sp, r7
 800e312:	b006      	add	sp, #24
 800e314:	bd80      	pop	{r7, pc}

0800e316 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e316:	b580      	push	{r7, lr}
 800e318:	b084      	sub	sp, #16
 800e31a:	af00      	add	r7, sp, #0
 800e31c:	6078      	str	r0, [r7, #4]
 800e31e:	000a      	movs	r2, r1
 800e320:	1cfb      	adds	r3, r7, #3
 800e322:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800e324:	1cfb      	adds	r3, r7, #3
 800e326:	781b      	ldrb	r3, [r3, #0]
 800e328:	2207      	movs	r2, #7
 800e32a:	401a      	ands	r2, r3
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	685b      	ldr	r3, [r3, #4]
 800e330:	429a      	cmp	r2, r3
 800e332:	d901      	bls.n	800e338 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800e334:	2301      	movs	r3, #1
 800e336:	e046      	b.n	800e3c6 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e338:	1cfb      	adds	r3, r7, #3
 800e33a:	781b      	ldrb	r3, [r3, #0]
 800e33c:	b25b      	sxtb	r3, r3
 800e33e:	2b00      	cmp	r3, #0
 800e340:	da0f      	bge.n	800e362 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e342:	1cfb      	adds	r3, r7, #3
 800e344:	781b      	ldrb	r3, [r3, #0]
 800e346:	2207      	movs	r2, #7
 800e348:	4013      	ands	r3, r2
 800e34a:	1c5a      	adds	r2, r3, #1
 800e34c:	0013      	movs	r3, r2
 800e34e:	009b      	lsls	r3, r3, #2
 800e350:	189b      	adds	r3, r3, r2
 800e352:	00db      	lsls	r3, r3, #3
 800e354:	687a      	ldr	r2, [r7, #4]
 800e356:	18d3      	adds	r3, r2, r3
 800e358:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	2201      	movs	r2, #1
 800e35e:	705a      	strb	r2, [r3, #1]
 800e360:	e00d      	b.n	800e37e <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e362:	1cfb      	adds	r3, r7, #3
 800e364:	781a      	ldrb	r2, [r3, #0]
 800e366:	0013      	movs	r3, r2
 800e368:	009b      	lsls	r3, r3, #2
 800e36a:	189b      	adds	r3, r3, r2
 800e36c:	00db      	lsls	r3, r3, #3
 800e36e:	3369      	adds	r3, #105	@ 0x69
 800e370:	33ff      	adds	r3, #255	@ 0xff
 800e372:	687a      	ldr	r2, [r7, #4]
 800e374:	18d3      	adds	r3, r2, r3
 800e376:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	2200      	movs	r2, #0
 800e37c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	2201      	movs	r2, #1
 800e382:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e384:	1cfb      	adds	r3, r7, #3
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	2207      	movs	r2, #7
 800e38a:	4013      	ands	r3, r2
 800e38c:	b2da      	uxtb	r2, r3
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e392:	687a      	ldr	r2, [r7, #4]
 800e394:	23aa      	movs	r3, #170	@ 0xaa
 800e396:	009b      	lsls	r3, r3, #2
 800e398:	5cd3      	ldrb	r3, [r2, r3]
 800e39a:	2b01      	cmp	r3, #1
 800e39c:	d101      	bne.n	800e3a2 <HAL_PCD_EP_SetStall+0x8c>
 800e39e:	2302      	movs	r3, #2
 800e3a0:	e011      	b.n	800e3c6 <HAL_PCD_EP_SetStall+0xb0>
 800e3a2:	687a      	ldr	r2, [r7, #4]
 800e3a4:	23aa      	movs	r3, #170	@ 0xaa
 800e3a6:	009b      	lsls	r3, r3, #2
 800e3a8:	2101      	movs	r1, #1
 800e3aa:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	68fa      	ldr	r2, [r7, #12]
 800e3b2:	0011      	movs	r1, r2
 800e3b4:	0018      	movs	r0, r3
 800e3b6:	f006 f9db 	bl	8014770 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800e3ba:	687a      	ldr	r2, [r7, #4]
 800e3bc:	23aa      	movs	r3, #170	@ 0xaa
 800e3be:	009b      	lsls	r3, r3, #2
 800e3c0:	2100      	movs	r1, #0
 800e3c2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e3c4:	2300      	movs	r3, #0
}
 800e3c6:	0018      	movs	r0, r3
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	b004      	add	sp, #16
 800e3cc:	bd80      	pop	{r7, pc}

0800e3ce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e3ce:	b580      	push	{r7, lr}
 800e3d0:	b084      	sub	sp, #16
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	6078      	str	r0, [r7, #4]
 800e3d6:	000a      	movs	r2, r1
 800e3d8:	1cfb      	adds	r3, r7, #3
 800e3da:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e3dc:	1cfb      	adds	r3, r7, #3
 800e3de:	781b      	ldrb	r3, [r3, #0]
 800e3e0:	220f      	movs	r2, #15
 800e3e2:	401a      	ands	r2, r3
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	685b      	ldr	r3, [r3, #4]
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	d901      	bls.n	800e3f0 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	e048      	b.n	800e482 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e3f0:	1cfb      	adds	r3, r7, #3
 800e3f2:	781b      	ldrb	r3, [r3, #0]
 800e3f4:	b25b      	sxtb	r3, r3
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	da0f      	bge.n	800e41a <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e3fa:	1cfb      	adds	r3, r7, #3
 800e3fc:	781b      	ldrb	r3, [r3, #0]
 800e3fe:	2207      	movs	r2, #7
 800e400:	4013      	ands	r3, r2
 800e402:	1c5a      	adds	r2, r3, #1
 800e404:	0013      	movs	r3, r2
 800e406:	009b      	lsls	r3, r3, #2
 800e408:	189b      	adds	r3, r3, r2
 800e40a:	00db      	lsls	r3, r3, #3
 800e40c:	687a      	ldr	r2, [r7, #4]
 800e40e:	18d3      	adds	r3, r2, r3
 800e410:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	2201      	movs	r2, #1
 800e416:	705a      	strb	r2, [r3, #1]
 800e418:	e00f      	b.n	800e43a <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e41a:	1cfb      	adds	r3, r7, #3
 800e41c:	781b      	ldrb	r3, [r3, #0]
 800e41e:	2207      	movs	r2, #7
 800e420:	401a      	ands	r2, r3
 800e422:	0013      	movs	r3, r2
 800e424:	009b      	lsls	r3, r3, #2
 800e426:	189b      	adds	r3, r3, r2
 800e428:	00db      	lsls	r3, r3, #3
 800e42a:	3369      	adds	r3, #105	@ 0x69
 800e42c:	33ff      	adds	r3, #255	@ 0xff
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	18d3      	adds	r3, r2, r3
 800e432:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2200      	movs	r2, #0
 800e438:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	2200      	movs	r2, #0
 800e43e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e440:	1cfb      	adds	r3, r7, #3
 800e442:	781b      	ldrb	r3, [r3, #0]
 800e444:	2207      	movs	r2, #7
 800e446:	4013      	ands	r3, r2
 800e448:	b2da      	uxtb	r2, r3
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e44e:	687a      	ldr	r2, [r7, #4]
 800e450:	23aa      	movs	r3, #170	@ 0xaa
 800e452:	009b      	lsls	r3, r3, #2
 800e454:	5cd3      	ldrb	r3, [r2, r3]
 800e456:	2b01      	cmp	r3, #1
 800e458:	d101      	bne.n	800e45e <HAL_PCD_EP_ClrStall+0x90>
 800e45a:	2302      	movs	r3, #2
 800e45c:	e011      	b.n	800e482 <HAL_PCD_EP_ClrStall+0xb4>
 800e45e:	687a      	ldr	r2, [r7, #4]
 800e460:	23aa      	movs	r3, #170	@ 0xaa
 800e462:	009b      	lsls	r3, r3, #2
 800e464:	2101      	movs	r1, #1
 800e466:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	68fa      	ldr	r2, [r7, #12]
 800e46e:	0011      	movs	r1, r2
 800e470:	0018      	movs	r0, r3
 800e472:	f006 f9cd 	bl	8014810 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800e476:	687a      	ldr	r2, [r7, #4]
 800e478:	23aa      	movs	r3, #170	@ 0xaa
 800e47a:	009b      	lsls	r3, r3, #2
 800e47c:	2100      	movs	r1, #0
 800e47e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e480:	2300      	movs	r3, #0
}
 800e482:	0018      	movs	r0, r3
 800e484:	46bd      	mov	sp, r7
 800e486:	b004      	add	sp, #16
 800e488:	bd80      	pop	{r7, pc}
	...

0800e48c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800e48c:	b5b0      	push	{r4, r5, r7, lr}
 800e48e:	b096      	sub	sp, #88	@ 0x58
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800e494:	f000 fbec 	bl	800ec70 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681a      	ldr	r2, [r3, #0]
 800e49c:	204e      	movs	r0, #78	@ 0x4e
 800e49e:	183b      	adds	r3, r7, r0
 800e4a0:	2144      	movs	r1, #68	@ 0x44
 800e4a2:	5a52      	ldrh	r2, [r2, r1]
 800e4a4:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800e4a6:	183b      	adds	r3, r7, r0
 800e4a8:	881b      	ldrh	r3, [r3, #0]
 800e4aa:	b2da      	uxtb	r2, r3
 800e4ac:	244d      	movs	r4, #77	@ 0x4d
 800e4ae:	193b      	adds	r3, r7, r4
 800e4b0:	210f      	movs	r1, #15
 800e4b2:	400a      	ands	r2, r1
 800e4b4:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800e4b6:	193b      	adds	r3, r7, r4
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d000      	beq.n	800e4c0 <PCD_EP_ISR_Handler+0x34>
 800e4be:	e18f      	b.n	800e7e0 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800e4c0:	183b      	adds	r3, r7, r0
 800e4c2:	881b      	ldrh	r3, [r3, #0]
 800e4c4:	2210      	movs	r2, #16
 800e4c6:	4013      	ands	r3, r2
 800e4c8:	d155      	bne.n	800e576 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	881b      	ldrh	r3, [r3, #0]
 800e4d0:	b29a      	uxth	r2, r3
 800e4d2:	200e      	movs	r0, #14
 800e4d4:	183b      	adds	r3, r7, r0
 800e4d6:	49bb      	ldr	r1, [pc, #748]	@ (800e7c4 <PCD_EP_ISR_Handler+0x338>)
 800e4d8:	400a      	ands	r2, r1
 800e4da:	801a      	strh	r2, [r3, #0]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	183a      	adds	r2, r7, r0
 800e4e2:	8812      	ldrh	r2, [r2, #0]
 800e4e4:	49b8      	ldr	r1, [pc, #736]	@ (800e7c8 <PCD_EP_ISR_Handler+0x33c>)
 800e4e6:	430a      	orrs	r2, r1
 800e4e8:	b292      	uxth	r2, r2
 800e4ea:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	3328      	adds	r3, #40	@ 0x28
 800e4f0:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	2250      	movs	r2, #80	@ 0x50
 800e4f8:	5a9b      	ldrh	r3, [r3, r2]
 800e4fa:	b29b      	uxth	r3, r3
 800e4fc:	001a      	movs	r2, r3
 800e4fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	00db      	lsls	r3, r3, #3
 800e504:	18d2      	adds	r2, r2, r3
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	18d3      	adds	r3, r2, r3
 800e50c:	4aaf      	ldr	r2, [pc, #700]	@ (800e7cc <PCD_EP_ISR_Handler+0x340>)
 800e50e:	4694      	mov	ip, r2
 800e510:	4463      	add	r3, ip
 800e512:	881b      	ldrh	r3, [r3, #0]
 800e514:	059b      	lsls	r3, r3, #22
 800e516:	0d9a      	lsrs	r2, r3, #22
 800e518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e51a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800e51c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e51e:	695a      	ldr	r2, [r3, #20]
 800e520:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e522:	69db      	ldr	r3, [r3, #28]
 800e524:	18d2      	adds	r2, r2, r3
 800e526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e528:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2100      	movs	r1, #0
 800e52e:	0018      	movs	r0, r3
 800e530:	f008 fae6 	bl	8016b00 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2224      	movs	r2, #36	@ 0x24
 800e538:	5c9b      	ldrb	r3, [r3, r2]
 800e53a:	b2db      	uxtb	r3, r3
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d101      	bne.n	800e544 <PCD_EP_ISR_Handler+0xb8>
 800e540:	f000 fb96 	bl	800ec70 <PCD_EP_ISR_Handler+0x7e4>
 800e544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e546:	699b      	ldr	r3, [r3, #24]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d001      	beq.n	800e550 <PCD_EP_ISR_Handler+0xc4>
 800e54c:	f000 fb90 	bl	800ec70 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2224      	movs	r2, #36	@ 0x24
 800e554:	5c9b      	ldrb	r3, [r3, r2]
 800e556:	b2db      	uxtb	r3, r3
 800e558:	2280      	movs	r2, #128	@ 0x80
 800e55a:	4252      	negs	r2, r2
 800e55c:	4313      	orrs	r3, r2
 800e55e:	b2da      	uxtb	r2, r3
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	0011      	movs	r1, r2
 800e566:	224c      	movs	r2, #76	@ 0x4c
 800e568:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2224      	movs	r2, #36	@ 0x24
 800e56e:	2100      	movs	r1, #0
 800e570:	5499      	strb	r1, [r3, r2]
 800e572:	f000 fb7d 	bl	800ec70 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	3369      	adds	r3, #105	@ 0x69
 800e57a:	33ff      	adds	r3, #255	@ 0xff
 800e57c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681a      	ldr	r2, [r3, #0]
 800e582:	214a      	movs	r1, #74	@ 0x4a
 800e584:	187b      	adds	r3, r7, r1
 800e586:	8812      	ldrh	r2, [r2, #0]
 800e588:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800e58a:	187b      	adds	r3, r7, r1
 800e58c:	881a      	ldrh	r2, [r3, #0]
 800e58e:	2380      	movs	r3, #128	@ 0x80
 800e590:	011b      	lsls	r3, r3, #4
 800e592:	4013      	ands	r3, r2
 800e594:	d037      	beq.n	800e606 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	2250      	movs	r2, #80	@ 0x50
 800e59c:	5a9b      	ldrh	r3, [r3, r2]
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	001a      	movs	r2, r3
 800e5a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5a4:	781b      	ldrb	r3, [r3, #0]
 800e5a6:	00db      	lsls	r3, r3, #3
 800e5a8:	18d2      	adds	r2, r2, r3
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	18d3      	adds	r3, r2, r3
 800e5b0:	4a87      	ldr	r2, [pc, #540]	@ (800e7d0 <PCD_EP_ISR_Handler+0x344>)
 800e5b2:	4694      	mov	ip, r2
 800e5b4:	4463      	add	r3, ip
 800e5b6:	881b      	ldrh	r3, [r3, #0]
 800e5b8:	059b      	lsls	r3, r3, #22
 800e5ba:	0d9a      	lsrs	r2, r3, #22
 800e5bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5be:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6818      	ldr	r0, [r3, #0]
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	22ac      	movs	r2, #172	@ 0xac
 800e5c8:	0092      	lsls	r2, r2, #2
 800e5ca:	1899      	adds	r1, r3, r2
 800e5cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5ce:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800e5d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5d2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800e5d4:	b29b      	uxth	r3, r3
 800e5d6:	f006 fa4e 	bl	8014a76 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	881b      	ldrh	r3, [r3, #0]
 800e5e0:	b29a      	uxth	r2, r3
 800e5e2:	2010      	movs	r0, #16
 800e5e4:	183b      	adds	r3, r7, r0
 800e5e6:	497b      	ldr	r1, [pc, #492]	@ (800e7d4 <PCD_EP_ISR_Handler+0x348>)
 800e5e8:	400a      	ands	r2, r1
 800e5ea:	801a      	strh	r2, [r3, #0]
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	183a      	adds	r2, r7, r0
 800e5f2:	8812      	ldrh	r2, [r2, #0]
 800e5f4:	2180      	movs	r1, #128	@ 0x80
 800e5f6:	430a      	orrs	r2, r1
 800e5f8:	b292      	uxth	r2, r2
 800e5fa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	0018      	movs	r0, r3
 800e600:	f008 fa48 	bl	8016a94 <HAL_PCD_SetupStageCallback>
 800e604:	e334      	b.n	800ec70 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800e606:	234a      	movs	r3, #74	@ 0x4a
 800e608:	18fb      	adds	r3, r7, r3
 800e60a:	2200      	movs	r2, #0
 800e60c:	5e9b      	ldrsh	r3, [r3, r2]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	db00      	blt.n	800e614 <PCD_EP_ISR_Handler+0x188>
 800e612:	e32d      	b.n	800ec70 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	881b      	ldrh	r3, [r3, #0]
 800e61a:	b29a      	uxth	r2, r3
 800e61c:	201e      	movs	r0, #30
 800e61e:	183b      	adds	r3, r7, r0
 800e620:	496c      	ldr	r1, [pc, #432]	@ (800e7d4 <PCD_EP_ISR_Handler+0x348>)
 800e622:	400a      	ands	r2, r1
 800e624:	801a      	strh	r2, [r3, #0]
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	183a      	adds	r2, r7, r0
 800e62c:	8812      	ldrh	r2, [r2, #0]
 800e62e:	2180      	movs	r1, #128	@ 0x80
 800e630:	430a      	orrs	r2, r1
 800e632:	b292      	uxth	r2, r2
 800e634:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	2250      	movs	r2, #80	@ 0x50
 800e63c:	5a9b      	ldrh	r3, [r3, r2]
 800e63e:	b29b      	uxth	r3, r3
 800e640:	001a      	movs	r2, r3
 800e642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e644:	781b      	ldrb	r3, [r3, #0]
 800e646:	00db      	lsls	r3, r3, #3
 800e648:	18d2      	adds	r2, r2, r3
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	18d3      	adds	r3, r2, r3
 800e650:	4a5f      	ldr	r2, [pc, #380]	@ (800e7d0 <PCD_EP_ISR_Handler+0x344>)
 800e652:	4694      	mov	ip, r2
 800e654:	4463      	add	r3, ip
 800e656:	881b      	ldrh	r3, [r3, #0]
 800e658:	059b      	lsls	r3, r3, #22
 800e65a:	0d9a      	lsrs	r2, r3, #22
 800e65c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e65e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800e660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e662:	69db      	ldr	r3, [r3, #28]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d01a      	beq.n	800e69e <PCD_EP_ISR_Handler+0x212>
 800e668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e66a:	695b      	ldr	r3, [r3, #20]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d016      	beq.n	800e69e <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6818      	ldr	r0, [r3, #0]
 800e674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e676:	6959      	ldr	r1, [r3, #20]
 800e678:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e67a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800e67c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e67e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800e680:	b29b      	uxth	r3, r3
 800e682:	f006 f9f8 	bl	8014a76 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800e686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e688:	695a      	ldr	r2, [r3, #20]
 800e68a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e68c:	69db      	ldr	r3, [r3, #28]
 800e68e:	18d2      	adds	r2, r2, r3
 800e690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e692:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2100      	movs	r1, #0
 800e698:	0018      	movs	r0, r3
 800e69a:	f008 fa10 	bl	8016abe <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681a      	ldr	r2, [r3, #0]
 800e6a2:	214a      	movs	r1, #74	@ 0x4a
 800e6a4:	187b      	adds	r3, r7, r1
 800e6a6:	8812      	ldrh	r2, [r2, #0]
 800e6a8:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800e6aa:	187b      	adds	r3, r7, r1
 800e6ac:	881a      	ldrh	r2, [r3, #0]
 800e6ae:	2380      	movs	r3, #128	@ 0x80
 800e6b0:	011b      	lsls	r3, r3, #4
 800e6b2:	4013      	ands	r3, r2
 800e6b4:	d000      	beq.n	800e6b8 <PCD_EP_ISR_Handler+0x22c>
 800e6b6:	e2db      	b.n	800ec70 <PCD_EP_ISR_Handler+0x7e4>
 800e6b8:	187b      	adds	r3, r7, r1
 800e6ba:	881a      	ldrh	r2, [r3, #0]
 800e6bc:	23c0      	movs	r3, #192	@ 0xc0
 800e6be:	019b      	lsls	r3, r3, #6
 800e6c0:	401a      	ands	r2, r3
 800e6c2:	23c0      	movs	r3, #192	@ 0xc0
 800e6c4:	019b      	lsls	r3, r3, #6
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	d100      	bne.n	800e6cc <PCD_EP_ISR_Handler+0x240>
 800e6ca:	e2d1      	b.n	800ec70 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	61bb      	str	r3, [r7, #24]
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	2250      	movs	r2, #80	@ 0x50
 800e6d8:	5a9b      	ldrh	r3, [r3, r2]
 800e6da:	b29b      	uxth	r3, r3
 800e6dc:	001a      	movs	r2, r3
 800e6de:	69bb      	ldr	r3, [r7, #24]
 800e6e0:	189b      	adds	r3, r3, r2
 800e6e2:	61bb      	str	r3, [r7, #24]
 800e6e4:	69bb      	ldr	r3, [r7, #24]
 800e6e6:	4a3a      	ldr	r2, [pc, #232]	@ (800e7d0 <PCD_EP_ISR_Handler+0x344>)
 800e6e8:	4694      	mov	ip, r2
 800e6ea:	4463      	add	r3, ip
 800e6ec:	617b      	str	r3, [r7, #20]
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	881b      	ldrh	r3, [r3, #0]
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	059b      	lsls	r3, r3, #22
 800e6f6:	0d9b      	lsrs	r3, r3, #22
 800e6f8:	b29a      	uxth	r2, r3
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	801a      	strh	r2, [r3, #0]
 800e6fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e700:	691b      	ldr	r3, [r3, #16]
 800e702:	2b3e      	cmp	r3, #62	@ 0x3e
 800e704:	d91a      	bls.n	800e73c <PCD_EP_ISR_Handler+0x2b0>
 800e706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e708:	691b      	ldr	r3, [r3, #16]
 800e70a:	095b      	lsrs	r3, r3, #5
 800e70c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e70e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e710:	691b      	ldr	r3, [r3, #16]
 800e712:	221f      	movs	r2, #31
 800e714:	4013      	ands	r3, r2
 800e716:	d102      	bne.n	800e71e <PCD_EP_ISR_Handler+0x292>
 800e718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e71a:	3b01      	subs	r3, #1
 800e71c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e71e:	697b      	ldr	r3, [r7, #20]
 800e720:	881b      	ldrh	r3, [r3, #0]
 800e722:	b29a      	uxth	r2, r3
 800e724:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e726:	b29b      	uxth	r3, r3
 800e728:	029b      	lsls	r3, r3, #10
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	4313      	orrs	r3, r2
 800e72e:	b29b      	uxth	r3, r3
 800e730:	4a25      	ldr	r2, [pc, #148]	@ (800e7c8 <PCD_EP_ISR_Handler+0x33c>)
 800e732:	4313      	orrs	r3, r2
 800e734:	b29a      	uxth	r2, r3
 800e736:	697b      	ldr	r3, [r7, #20]
 800e738:	801a      	strh	r2, [r3, #0]
 800e73a:	e023      	b.n	800e784 <PCD_EP_ISR_Handler+0x2f8>
 800e73c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e73e:	691b      	ldr	r3, [r3, #16]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d108      	bne.n	800e756 <PCD_EP_ISR_Handler+0x2ca>
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	881b      	ldrh	r3, [r3, #0]
 800e748:	b29b      	uxth	r3, r3
 800e74a:	4a1f      	ldr	r2, [pc, #124]	@ (800e7c8 <PCD_EP_ISR_Handler+0x33c>)
 800e74c:	4313      	orrs	r3, r2
 800e74e:	b29a      	uxth	r2, r3
 800e750:	697b      	ldr	r3, [r7, #20]
 800e752:	801a      	strh	r2, [r3, #0]
 800e754:	e016      	b.n	800e784 <PCD_EP_ISR_Handler+0x2f8>
 800e756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e758:	691b      	ldr	r3, [r3, #16]
 800e75a:	085b      	lsrs	r3, r3, #1
 800e75c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e75e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e760:	691b      	ldr	r3, [r3, #16]
 800e762:	2201      	movs	r2, #1
 800e764:	4013      	ands	r3, r2
 800e766:	d002      	beq.n	800e76e <PCD_EP_ISR_Handler+0x2e2>
 800e768:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e76a:	3301      	adds	r3, #1
 800e76c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	881b      	ldrh	r3, [r3, #0]
 800e772:	b29a      	uxth	r2, r3
 800e774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e776:	b29b      	uxth	r3, r3
 800e778:	029b      	lsls	r3, r3, #10
 800e77a:	b29b      	uxth	r3, r3
 800e77c:	4313      	orrs	r3, r2
 800e77e:	b29a      	uxth	r2, r3
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	881b      	ldrh	r3, [r3, #0]
 800e78a:	b29a      	uxth	r2, r3
 800e78c:	2012      	movs	r0, #18
 800e78e:	183b      	adds	r3, r7, r0
 800e790:	4911      	ldr	r1, [pc, #68]	@ (800e7d8 <PCD_EP_ISR_Handler+0x34c>)
 800e792:	400a      	ands	r2, r1
 800e794:	801a      	strh	r2, [r3, #0]
 800e796:	183b      	adds	r3, r7, r0
 800e798:	183a      	adds	r2, r7, r0
 800e79a:	8812      	ldrh	r2, [r2, #0]
 800e79c:	2180      	movs	r1, #128	@ 0x80
 800e79e:	0149      	lsls	r1, r1, #5
 800e7a0:	404a      	eors	r2, r1
 800e7a2:	801a      	strh	r2, [r3, #0]
 800e7a4:	183b      	adds	r3, r7, r0
 800e7a6:	183a      	adds	r2, r7, r0
 800e7a8:	8812      	ldrh	r2, [r2, #0]
 800e7aa:	2180      	movs	r1, #128	@ 0x80
 800e7ac:	0189      	lsls	r1, r1, #6
 800e7ae:	404a      	eors	r2, r1
 800e7b0:	801a      	strh	r2, [r3, #0]
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	183a      	adds	r2, r7, r0
 800e7b8:	8812      	ldrh	r2, [r2, #0]
 800e7ba:	4908      	ldr	r1, [pc, #32]	@ (800e7dc <PCD_EP_ISR_Handler+0x350>)
 800e7bc:	430a      	orrs	r2, r1
 800e7be:	b292      	uxth	r2, r2
 800e7c0:	801a      	strh	r2, [r3, #0]
 800e7c2:	e255      	b.n	800ec70 <PCD_EP_ISR_Handler+0x7e4>
 800e7c4:	ffff8f0f 	.word	0xffff8f0f
 800e7c8:	ffff8000 	.word	0xffff8000
 800e7cc:	00000402 	.word	0x00000402
 800e7d0:	00000406 	.word	0x00000406
 800e7d4:	00000f8f 	.word	0x00000f8f
 800e7d8:	ffffbf8f 	.word	0xffffbf8f
 800e7dc:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	001a      	movs	r2, r3
 800e7e6:	204d      	movs	r0, #77	@ 0x4d
 800e7e8:	183b      	adds	r3, r7, r0
 800e7ea:	781b      	ldrb	r3, [r3, #0]
 800e7ec:	009b      	lsls	r3, r3, #2
 800e7ee:	18d2      	adds	r2, r2, r3
 800e7f0:	214a      	movs	r1, #74	@ 0x4a
 800e7f2:	187b      	adds	r3, r7, r1
 800e7f4:	8812      	ldrh	r2, [r2, #0]
 800e7f6:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800e7f8:	187b      	adds	r3, r7, r1
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	5e9b      	ldrsh	r3, [r3, r2]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	db00      	blt.n	800e804 <PCD_EP_ISR_Handler+0x378>
 800e802:	e0fa      	b.n	800e9fa <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	001a      	movs	r2, r3
 800e80a:	183b      	adds	r3, r7, r0
 800e80c:	781b      	ldrb	r3, [r3, #0]
 800e80e:	009b      	lsls	r3, r3, #2
 800e810:	18d3      	adds	r3, r2, r3
 800e812:	881b      	ldrh	r3, [r3, #0]
 800e814:	b29a      	uxth	r2, r3
 800e816:	2448      	movs	r4, #72	@ 0x48
 800e818:	193b      	adds	r3, r7, r4
 800e81a:	49d1      	ldr	r1, [pc, #836]	@ (800eb60 <PCD_EP_ISR_Handler+0x6d4>)
 800e81c:	400a      	ands	r2, r1
 800e81e:	801a      	strh	r2, [r3, #0]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	001a      	movs	r2, r3
 800e826:	183b      	adds	r3, r7, r0
 800e828:	781b      	ldrb	r3, [r3, #0]
 800e82a:	009b      	lsls	r3, r3, #2
 800e82c:	18d3      	adds	r3, r2, r3
 800e82e:	193a      	adds	r2, r7, r4
 800e830:	8812      	ldrh	r2, [r2, #0]
 800e832:	2180      	movs	r1, #128	@ 0x80
 800e834:	430a      	orrs	r2, r1
 800e836:	b292      	uxth	r2, r2
 800e838:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800e83a:	183b      	adds	r3, r7, r0
 800e83c:	781a      	ldrb	r2, [r3, #0]
 800e83e:	0013      	movs	r3, r2
 800e840:	009b      	lsls	r3, r3, #2
 800e842:	189b      	adds	r3, r3, r2
 800e844:	00db      	lsls	r3, r3, #3
 800e846:	3369      	adds	r3, #105	@ 0x69
 800e848:	33ff      	adds	r3, #255	@ 0xff
 800e84a:	687a      	ldr	r2, [r7, #4]
 800e84c:	18d3      	adds	r3, r2, r3
 800e84e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800e850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e852:	7b1b      	ldrb	r3, [r3, #12]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d125      	bne.n	800e8a4 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	2250      	movs	r2, #80	@ 0x50
 800e85e:	5a9b      	ldrh	r3, [r3, r2]
 800e860:	b29b      	uxth	r3, r3
 800e862:	001a      	movs	r2, r3
 800e864:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	00db      	lsls	r3, r3, #3
 800e86a:	18d2      	adds	r2, r2, r3
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	18d3      	adds	r3, r2, r3
 800e872:	4abc      	ldr	r2, [pc, #752]	@ (800eb64 <PCD_EP_ISR_Handler+0x6d8>)
 800e874:	4694      	mov	ip, r2
 800e876:	4463      	add	r3, ip
 800e878:	881a      	ldrh	r2, [r3, #0]
 800e87a:	2450      	movs	r4, #80	@ 0x50
 800e87c:	193b      	adds	r3, r7, r4
 800e87e:	0592      	lsls	r2, r2, #22
 800e880:	0d92      	lsrs	r2, r2, #22
 800e882:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800e884:	193b      	adds	r3, r7, r4
 800e886:	881b      	ldrh	r3, [r3, #0]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d100      	bne.n	800e88e <PCD_EP_ISR_Handler+0x402>
 800e88c:	e08d      	b.n	800e9aa <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6818      	ldr	r0, [r3, #0]
 800e892:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e894:	6959      	ldr	r1, [r3, #20]
 800e896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e898:	88da      	ldrh	r2, [r3, #6]
 800e89a:	193b      	adds	r3, r7, r4
 800e89c:	881b      	ldrh	r3, [r3, #0]
 800e89e:	f006 f8ea 	bl	8014a76 <USB_ReadPMA>
 800e8a2:	e082      	b.n	800e9aa <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800e8a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8a6:	78db      	ldrb	r3, [r3, #3]
 800e8a8:	2b02      	cmp	r3, #2
 800e8aa:	d10c      	bne.n	800e8c6 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800e8ac:	2350      	movs	r3, #80	@ 0x50
 800e8ae:	18fc      	adds	r4, r7, r3
 800e8b0:	234a      	movs	r3, #74	@ 0x4a
 800e8b2:	18fb      	adds	r3, r7, r3
 800e8b4:	881a      	ldrh	r2, [r3, #0]
 800e8b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	0018      	movs	r0, r3
 800e8bc:	f000 f9ec 	bl	800ec98 <HAL_PCD_EP_DB_Receive>
 800e8c0:	0003      	movs	r3, r0
 800e8c2:	8023      	strh	r3, [r4, #0]
 800e8c4:	e071      	b.n	800e9aa <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	001a      	movs	r2, r3
 800e8cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8ce:	781b      	ldrb	r3, [r3, #0]
 800e8d0:	009b      	lsls	r3, r3, #2
 800e8d2:	18d3      	adds	r3, r2, r3
 800e8d4:	881b      	ldrh	r3, [r3, #0]
 800e8d6:	b29a      	uxth	r2, r3
 800e8d8:	2052      	movs	r0, #82	@ 0x52
 800e8da:	183b      	adds	r3, r7, r0
 800e8dc:	49a2      	ldr	r1, [pc, #648]	@ (800eb68 <PCD_EP_ISR_Handler+0x6dc>)
 800e8de:	400a      	ands	r2, r1
 800e8e0:	801a      	strh	r2, [r3, #0]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	001a      	movs	r2, r3
 800e8e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8ea:	781b      	ldrb	r3, [r3, #0]
 800e8ec:	009b      	lsls	r3, r3, #2
 800e8ee:	18d3      	adds	r3, r2, r3
 800e8f0:	183a      	adds	r2, r7, r0
 800e8f2:	8812      	ldrh	r2, [r2, #0]
 800e8f4:	499d      	ldr	r1, [pc, #628]	@ (800eb6c <PCD_EP_ISR_Handler+0x6e0>)
 800e8f6:	430a      	orrs	r2, r1
 800e8f8:	b292      	uxth	r2, r2
 800e8fa:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	001a      	movs	r2, r3
 800e902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	009b      	lsls	r3, r3, #2
 800e908:	18d3      	adds	r3, r2, r3
 800e90a:	881b      	ldrh	r3, [r3, #0]
 800e90c:	b29b      	uxth	r3, r3
 800e90e:	001a      	movs	r2, r3
 800e910:	2380      	movs	r3, #128	@ 0x80
 800e912:	01db      	lsls	r3, r3, #7
 800e914:	4013      	ands	r3, r2
 800e916:	d024      	beq.n	800e962 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	2250      	movs	r2, #80	@ 0x50
 800e91e:	5a9b      	ldrh	r3, [r3, r2]
 800e920:	b29b      	uxth	r3, r3
 800e922:	001a      	movs	r2, r3
 800e924:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e926:	781b      	ldrb	r3, [r3, #0]
 800e928:	00db      	lsls	r3, r3, #3
 800e92a:	18d2      	adds	r2, r2, r3
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	18d3      	adds	r3, r2, r3
 800e932:	4a8f      	ldr	r2, [pc, #572]	@ (800eb70 <PCD_EP_ISR_Handler+0x6e4>)
 800e934:	4694      	mov	ip, r2
 800e936:	4463      	add	r3, ip
 800e938:	881a      	ldrh	r2, [r3, #0]
 800e93a:	2450      	movs	r4, #80	@ 0x50
 800e93c:	193b      	adds	r3, r7, r4
 800e93e:	0592      	lsls	r2, r2, #22
 800e940:	0d92      	lsrs	r2, r2, #22
 800e942:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800e944:	193b      	adds	r3, r7, r4
 800e946:	881b      	ldrh	r3, [r3, #0]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d02e      	beq.n	800e9aa <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6818      	ldr	r0, [r3, #0]
 800e950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e952:	6959      	ldr	r1, [r3, #20]
 800e954:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e956:	891a      	ldrh	r2, [r3, #8]
 800e958:	193b      	adds	r3, r7, r4
 800e95a:	881b      	ldrh	r3, [r3, #0]
 800e95c:	f006 f88b 	bl	8014a76 <USB_ReadPMA>
 800e960:	e023      	b.n	800e9aa <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	2250      	movs	r2, #80	@ 0x50
 800e968:	5a9b      	ldrh	r3, [r3, r2]
 800e96a:	b29b      	uxth	r3, r3
 800e96c:	001a      	movs	r2, r3
 800e96e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e970:	781b      	ldrb	r3, [r3, #0]
 800e972:	00db      	lsls	r3, r3, #3
 800e974:	18d2      	adds	r2, r2, r3
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	18d3      	adds	r3, r2, r3
 800e97c:	4a79      	ldr	r2, [pc, #484]	@ (800eb64 <PCD_EP_ISR_Handler+0x6d8>)
 800e97e:	4694      	mov	ip, r2
 800e980:	4463      	add	r3, ip
 800e982:	881a      	ldrh	r2, [r3, #0]
 800e984:	2450      	movs	r4, #80	@ 0x50
 800e986:	193b      	adds	r3, r7, r4
 800e988:	0592      	lsls	r2, r2, #22
 800e98a:	0d92      	lsrs	r2, r2, #22
 800e98c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800e98e:	193b      	adds	r3, r7, r4
 800e990:	881b      	ldrh	r3, [r3, #0]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d009      	beq.n	800e9aa <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6818      	ldr	r0, [r3, #0]
 800e99a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e99c:	6959      	ldr	r1, [r3, #20]
 800e99e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9a0:	895a      	ldrh	r2, [r3, #10]
 800e9a2:	193b      	adds	r3, r7, r4
 800e9a4:	881b      	ldrh	r3, [r3, #0]
 800e9a6:	f006 f866 	bl	8014a76 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800e9aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9ac:	69da      	ldr	r2, [r3, #28]
 800e9ae:	2150      	movs	r1, #80	@ 0x50
 800e9b0:	187b      	adds	r3, r7, r1
 800e9b2:	881b      	ldrh	r3, [r3, #0]
 800e9b4:	18d2      	adds	r2, r2, r3
 800e9b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800e9ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9bc:	695a      	ldr	r2, [r3, #20]
 800e9be:	187b      	adds	r3, r7, r1
 800e9c0:	881b      	ldrh	r3, [r3, #0]
 800e9c2:	18d2      	adds	r2, r2, r3
 800e9c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9c6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800e9c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9ca:	699b      	ldr	r3, [r3, #24]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d005      	beq.n	800e9dc <PCD_EP_ISR_Handler+0x550>
 800e9d0:	187b      	adds	r3, r7, r1
 800e9d2:	881a      	ldrh	r2, [r3, #0]
 800e9d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9d6:	691b      	ldr	r3, [r3, #16]
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	d207      	bcs.n	800e9ec <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800e9dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e9de:	781a      	ldrb	r2, [r3, #0]
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	0011      	movs	r1, r2
 800e9e4:	0018      	movs	r0, r3
 800e9e6:	f008 f86a 	bl	8016abe <HAL_PCD_DataOutStageCallback>
 800e9ea:	e006      	b.n	800e9fa <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e9f2:	0011      	movs	r1, r2
 800e9f4:	0018      	movs	r0, r3
 800e9f6:	f004 fd83 	bl	8013500 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800e9fa:	244a      	movs	r4, #74	@ 0x4a
 800e9fc:	193b      	adds	r3, r7, r4
 800e9fe:	881b      	ldrh	r3, [r3, #0]
 800ea00:	2280      	movs	r2, #128	@ 0x80
 800ea02:	4013      	ands	r3, r2
 800ea04:	d100      	bne.n	800ea08 <PCD_EP_ISR_Handler+0x57c>
 800ea06:	e133      	b.n	800ec70 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800ea08:	204d      	movs	r0, #77	@ 0x4d
 800ea0a:	183b      	adds	r3, r7, r0
 800ea0c:	781b      	ldrb	r3, [r3, #0]
 800ea0e:	1c5a      	adds	r2, r3, #1
 800ea10:	0013      	movs	r3, r2
 800ea12:	009b      	lsls	r3, r3, #2
 800ea14:	189b      	adds	r3, r3, r2
 800ea16:	00db      	lsls	r3, r3, #3
 800ea18:	687a      	ldr	r2, [r7, #4]
 800ea1a:	18d3      	adds	r3, r2, r3
 800ea1c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	001a      	movs	r2, r3
 800ea24:	183b      	adds	r3, r7, r0
 800ea26:	781b      	ldrb	r3, [r3, #0]
 800ea28:	009b      	lsls	r3, r3, #2
 800ea2a:	18d3      	adds	r3, r2, r3
 800ea2c:	881b      	ldrh	r3, [r3, #0]
 800ea2e:	b29a      	uxth	r2, r3
 800ea30:	2542      	movs	r5, #66	@ 0x42
 800ea32:	197b      	adds	r3, r7, r5
 800ea34:	494f      	ldr	r1, [pc, #316]	@ (800eb74 <PCD_EP_ISR_Handler+0x6e8>)
 800ea36:	400a      	ands	r2, r1
 800ea38:	801a      	strh	r2, [r3, #0]
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	001a      	movs	r2, r3
 800ea40:	183b      	adds	r3, r7, r0
 800ea42:	781b      	ldrb	r3, [r3, #0]
 800ea44:	009b      	lsls	r3, r3, #2
 800ea46:	18d3      	adds	r3, r2, r3
 800ea48:	197a      	adds	r2, r7, r5
 800ea4a:	8812      	ldrh	r2, [r2, #0]
 800ea4c:	494a      	ldr	r1, [pc, #296]	@ (800eb78 <PCD_EP_ISR_Handler+0x6ec>)
 800ea4e:	430a      	orrs	r2, r1
 800ea50:	b292      	uxth	r2, r2
 800ea52:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800ea54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea56:	78db      	ldrb	r3, [r3, #3]
 800ea58:	2b01      	cmp	r3, #1
 800ea5a:	d000      	beq.n	800ea5e <PCD_EP_ISR_Handler+0x5d2>
 800ea5c:	e0af      	b.n	800ebbe <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 800ea5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea60:	2200      	movs	r2, #0
 800ea62:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800ea64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea66:	7b1b      	ldrb	r3, [r3, #12]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d100      	bne.n	800ea6e <PCD_EP_ISR_Handler+0x5e2>
 800ea6c:	e09f      	b.n	800ebae <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ea6e:	193b      	adds	r3, r7, r4
 800ea70:	881b      	ldrh	r3, [r3, #0]
 800ea72:	2240      	movs	r2, #64	@ 0x40
 800ea74:	4013      	ands	r3, r2
 800ea76:	d046      	beq.n	800eb06 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ea78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea7a:	785b      	ldrb	r3, [r3, #1]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d125      	bne.n	800eacc <PCD_EP_ISR_Handler+0x640>
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	2250      	movs	r2, #80	@ 0x50
 800ea8c:	5a9b      	ldrh	r3, [r3, r2]
 800ea8e:	b29b      	uxth	r3, r3
 800ea90:	001a      	movs	r2, r3
 800ea92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea94:	189b      	adds	r3, r3, r2
 800ea96:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea9a:	781b      	ldrb	r3, [r3, #0]
 800ea9c:	00da      	lsls	r2, r3, #3
 800ea9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaa0:	18d3      	adds	r3, r2, r3
 800eaa2:	4a33      	ldr	r2, [pc, #204]	@ (800eb70 <PCD_EP_ISR_Handler+0x6e4>)
 800eaa4:	4694      	mov	ip, r2
 800eaa6:	4463      	add	r3, ip
 800eaa8:	623b      	str	r3, [r7, #32]
 800eaaa:	6a3b      	ldr	r3, [r7, #32]
 800eaac:	881b      	ldrh	r3, [r3, #0]
 800eaae:	b29b      	uxth	r3, r3
 800eab0:	059b      	lsls	r3, r3, #22
 800eab2:	0d9b      	lsrs	r3, r3, #22
 800eab4:	b29a      	uxth	r2, r3
 800eab6:	6a3b      	ldr	r3, [r7, #32]
 800eab8:	801a      	strh	r2, [r3, #0]
 800eaba:	6a3b      	ldr	r3, [r7, #32]
 800eabc:	881b      	ldrh	r3, [r3, #0]
 800eabe:	b29b      	uxth	r3, r3
 800eac0:	4a2d      	ldr	r2, [pc, #180]	@ (800eb78 <PCD_EP_ISR_Handler+0x6ec>)
 800eac2:	4313      	orrs	r3, r2
 800eac4:	b29a      	uxth	r2, r3
 800eac6:	6a3b      	ldr	r3, [r7, #32]
 800eac8:	801a      	strh	r2, [r3, #0]
 800eaca:	e070      	b.n	800ebae <PCD_EP_ISR_Handler+0x722>
 800eacc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eace:	785b      	ldrb	r3, [r3, #1]
 800ead0:	2b01      	cmp	r3, #1
 800ead2:	d16c      	bne.n	800ebae <PCD_EP_ISR_Handler+0x722>
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	2250      	movs	r2, #80	@ 0x50
 800eae0:	5a9b      	ldrh	r3, [r3, r2]
 800eae2:	b29b      	uxth	r3, r3
 800eae4:	001a      	movs	r2, r3
 800eae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eae8:	189b      	adds	r3, r3, r2
 800eaea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eaec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eaee:	781b      	ldrb	r3, [r3, #0]
 800eaf0:	00da      	lsls	r2, r3, #3
 800eaf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaf4:	18d3      	adds	r3, r2, r3
 800eaf6:	4a1e      	ldr	r2, [pc, #120]	@ (800eb70 <PCD_EP_ISR_Handler+0x6e4>)
 800eaf8:	4694      	mov	ip, r2
 800eafa:	4463      	add	r3, ip
 800eafc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eafe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb00:	2200      	movs	r2, #0
 800eb02:	801a      	strh	r2, [r3, #0]
 800eb04:	e053      	b.n	800ebae <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eb0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb0e:	785b      	ldrb	r3, [r3, #1]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d133      	bne.n	800eb7c <PCD_EP_ISR_Handler+0x6f0>
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	2250      	movs	r2, #80	@ 0x50
 800eb20:	5a9b      	ldrh	r3, [r3, r2]
 800eb22:	b29b      	uxth	r3, r3
 800eb24:	001a      	movs	r2, r3
 800eb26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb28:	189b      	adds	r3, r3, r2
 800eb2a:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb2e:	781b      	ldrb	r3, [r3, #0]
 800eb30:	00da      	lsls	r2, r3, #3
 800eb32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb34:	18d3      	adds	r3, r2, r3
 800eb36:	4a0b      	ldr	r2, [pc, #44]	@ (800eb64 <PCD_EP_ISR_Handler+0x6d8>)
 800eb38:	4694      	mov	ip, r2
 800eb3a:	4463      	add	r3, ip
 800eb3c:	633b      	str	r3, [r7, #48]	@ 0x30
 800eb3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb40:	881b      	ldrh	r3, [r3, #0]
 800eb42:	b29b      	uxth	r3, r3
 800eb44:	059b      	lsls	r3, r3, #22
 800eb46:	0d9b      	lsrs	r3, r3, #22
 800eb48:	b29a      	uxth	r2, r3
 800eb4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb4c:	801a      	strh	r2, [r3, #0]
 800eb4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb50:	881b      	ldrh	r3, [r3, #0]
 800eb52:	b29b      	uxth	r3, r3
 800eb54:	4a08      	ldr	r2, [pc, #32]	@ (800eb78 <PCD_EP_ISR_Handler+0x6ec>)
 800eb56:	4313      	orrs	r3, r2
 800eb58:	b29a      	uxth	r2, r3
 800eb5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb5c:	801a      	strh	r2, [r3, #0]
 800eb5e:	e026      	b.n	800ebae <PCD_EP_ISR_Handler+0x722>
 800eb60:	00000f8f 	.word	0x00000f8f
 800eb64:	00000406 	.word	0x00000406
 800eb68:	ffff8f8f 	.word	0xffff8f8f
 800eb6c:	ffff80c0 	.word	0xffff80c0
 800eb70:	00000402 	.word	0x00000402
 800eb74:	ffff8f0f 	.word	0xffff8f0f
 800eb78:	ffff8000 	.word	0xffff8000
 800eb7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb7e:	785b      	ldrb	r3, [r3, #1]
 800eb80:	2b01      	cmp	r3, #1
 800eb82:	d114      	bne.n	800ebae <PCD_EP_ISR_Handler+0x722>
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	2250      	movs	r2, #80	@ 0x50
 800eb8a:	5a9b      	ldrh	r3, [r3, r2]
 800eb8c:	b29b      	uxth	r3, r3
 800eb8e:	001a      	movs	r2, r3
 800eb90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb92:	189b      	adds	r3, r3, r2
 800eb94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eb96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	00da      	lsls	r2, r3, #3
 800eb9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb9e:	18d3      	adds	r3, r2, r3
 800eba0:	4a3b      	ldr	r2, [pc, #236]	@ (800ec90 <PCD_EP_ISR_Handler+0x804>)
 800eba2:	4694      	mov	ip, r2
 800eba4:	4463      	add	r3, ip
 800eba6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800eba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebaa:	2200      	movs	r2, #0
 800ebac:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ebae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebb0:	781a      	ldrb	r2, [r3, #0]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	0011      	movs	r1, r2
 800ebb6:	0018      	movs	r0, r3
 800ebb8:	f007 ffa2 	bl	8016b00 <HAL_PCD_DataInStageCallback>
 800ebbc:	e058      	b.n	800ec70 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800ebbe:	234a      	movs	r3, #74	@ 0x4a
 800ebc0:	18fb      	adds	r3, r7, r3
 800ebc2:	881a      	ldrh	r2, [r3, #0]
 800ebc4:	2380      	movs	r3, #128	@ 0x80
 800ebc6:	005b      	lsls	r3, r3, #1
 800ebc8:	4013      	ands	r3, r2
 800ebca:	d149      	bne.n	800ec60 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	2250      	movs	r2, #80	@ 0x50
 800ebd2:	5a9b      	ldrh	r3, [r3, r2]
 800ebd4:	b29b      	uxth	r3, r3
 800ebd6:	001a      	movs	r2, r3
 800ebd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebda:	781b      	ldrb	r3, [r3, #0]
 800ebdc:	00db      	lsls	r3, r3, #3
 800ebde:	18d2      	adds	r2, r2, r3
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	18d3      	adds	r3, r2, r3
 800ebe6:	4a2b      	ldr	r2, [pc, #172]	@ (800ec94 <PCD_EP_ISR_Handler+0x808>)
 800ebe8:	4694      	mov	ip, r2
 800ebea:	4463      	add	r3, ip
 800ebec:	881a      	ldrh	r2, [r3, #0]
 800ebee:	2140      	movs	r1, #64	@ 0x40
 800ebf0:	187b      	adds	r3, r7, r1
 800ebf2:	0592      	lsls	r2, r2, #22
 800ebf4:	0d92      	lsrs	r2, r2, #22
 800ebf6:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800ebf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebfa:	699a      	ldr	r2, [r3, #24]
 800ebfc:	187b      	adds	r3, r7, r1
 800ebfe:	881b      	ldrh	r3, [r3, #0]
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d907      	bls.n	800ec14 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 800ec04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec06:	699a      	ldr	r2, [r3, #24]
 800ec08:	187b      	adds	r3, r7, r1
 800ec0a:	881b      	ldrh	r3, [r3, #0]
 800ec0c:	1ad2      	subs	r2, r2, r3
 800ec0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec10:	619a      	str	r2, [r3, #24]
 800ec12:	e002      	b.n	800ec1a <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 800ec14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec16:	2200      	movs	r2, #0
 800ec18:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800ec1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec1c:	699b      	ldr	r3, [r3, #24]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d107      	bne.n	800ec32 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ec22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec24:	781a      	ldrb	r2, [r3, #0]
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	0011      	movs	r1, r2
 800ec2a:	0018      	movs	r0, r3
 800ec2c:	f007 ff68 	bl	8016b00 <HAL_PCD_DataInStageCallback>
 800ec30:	e01e      	b.n	800ec70 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800ec32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec34:	695a      	ldr	r2, [r3, #20]
 800ec36:	2140      	movs	r1, #64	@ 0x40
 800ec38:	187b      	adds	r3, r7, r1
 800ec3a:	881b      	ldrh	r3, [r3, #0]
 800ec3c:	18d2      	adds	r2, r2, r3
 800ec3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec40:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800ec42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec44:	69da      	ldr	r2, [r3, #28]
 800ec46:	187b      	adds	r3, r7, r1
 800ec48:	881b      	ldrh	r3, [r3, #0]
 800ec4a:	18d2      	adds	r2, r2, r3
 800ec4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec4e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ec56:	0011      	movs	r1, r2
 800ec58:	0018      	movs	r0, r3
 800ec5a:	f004 fc51 	bl	8013500 <USB_EPStartXfer>
 800ec5e:	e007      	b.n	800ec70 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800ec60:	234a      	movs	r3, #74	@ 0x4a
 800ec62:	18fb      	adds	r3, r7, r3
 800ec64:	881a      	ldrh	r2, [r3, #0]
 800ec66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	0018      	movs	r0, r3
 800ec6c:	f000 f930 	bl	800eed0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	2244      	movs	r2, #68	@ 0x44
 800ec76:	5a9b      	ldrh	r3, [r3, r2]
 800ec78:	b29b      	uxth	r3, r3
 800ec7a:	b21b      	sxth	r3, r3
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	da01      	bge.n	800ec84 <PCD_EP_ISR_Handler+0x7f8>
 800ec80:	f7ff fc0a 	bl	800e498 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 800ec84:	2300      	movs	r3, #0
}
 800ec86:	0018      	movs	r0, r3
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	b016      	add	sp, #88	@ 0x58
 800ec8c:	bdb0      	pop	{r4, r5, r7, pc}
 800ec8e:	46c0      	nop			@ (mov r8, r8)
 800ec90:	00000406 	.word	0x00000406
 800ec94:	00000402 	.word	0x00000402

0800ec98 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800ec98:	b590      	push	{r4, r7, lr}
 800ec9a:	b089      	sub	sp, #36	@ 0x24
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	60f8      	str	r0, [r7, #12]
 800eca0:	60b9      	str	r1, [r7, #8]
 800eca2:	1dbb      	adds	r3, r7, #6
 800eca4:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800eca6:	1dbb      	adds	r3, r7, #6
 800eca8:	881a      	ldrh	r2, [r3, #0]
 800ecaa:	2380      	movs	r3, #128	@ 0x80
 800ecac:	01db      	lsls	r3, r3, #7
 800ecae:	4013      	ands	r3, r2
 800ecb0:	d100      	bne.n	800ecb4 <HAL_PCD_EP_DB_Receive+0x1c>
 800ecb2:	e07d      	b.n	800edb0 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	2250      	movs	r2, #80	@ 0x50
 800ecba:	5a9b      	ldrh	r3, [r3, r2]
 800ecbc:	b29b      	uxth	r3, r3
 800ecbe:	001a      	movs	r2, r3
 800ecc0:	68bb      	ldr	r3, [r7, #8]
 800ecc2:	781b      	ldrb	r3, [r3, #0]
 800ecc4:	00db      	lsls	r3, r3, #3
 800ecc6:	18d2      	adds	r2, r2, r3
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	18d3      	adds	r3, r2, r3
 800ecce:	4a7a      	ldr	r2, [pc, #488]	@ (800eeb8 <HAL_PCD_EP_DB_Receive+0x220>)
 800ecd0:	4694      	mov	ip, r2
 800ecd2:	4463      	add	r3, ip
 800ecd4:	881a      	ldrh	r2, [r3, #0]
 800ecd6:	211a      	movs	r1, #26
 800ecd8:	187b      	adds	r3, r7, r1
 800ecda:	0592      	lsls	r2, r2, #22
 800ecdc:	0d92      	lsrs	r2, r2, #22
 800ecde:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	699a      	ldr	r2, [r3, #24]
 800ece4:	187b      	adds	r3, r7, r1
 800ece6:	881b      	ldrh	r3, [r3, #0]
 800ece8:	429a      	cmp	r2, r3
 800ecea:	d307      	bcc.n	800ecfc <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	699a      	ldr	r2, [r3, #24]
 800ecf0:	187b      	adds	r3, r7, r1
 800ecf2:	881b      	ldrh	r3, [r3, #0]
 800ecf4:	1ad2      	subs	r2, r2, r3
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	619a      	str	r2, [r3, #24]
 800ecfa:	e002      	b.n	800ed02 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800ecfc:	68bb      	ldr	r3, [r7, #8]
 800ecfe:	2200      	movs	r2, #0
 800ed00:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	699b      	ldr	r3, [r3, #24]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d121      	bne.n	800ed4e <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	001a      	movs	r2, r3
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	009b      	lsls	r3, r3, #2
 800ed16:	18d3      	adds	r3, r2, r3
 800ed18:	881b      	ldrh	r3, [r3, #0]
 800ed1a:	b29a      	uxth	r2, r3
 800ed1c:	2018      	movs	r0, #24
 800ed1e:	183b      	adds	r3, r7, r0
 800ed20:	4966      	ldr	r1, [pc, #408]	@ (800eebc <HAL_PCD_EP_DB_Receive+0x224>)
 800ed22:	400a      	ands	r2, r1
 800ed24:	801a      	strh	r2, [r3, #0]
 800ed26:	183b      	adds	r3, r7, r0
 800ed28:	183a      	adds	r2, r7, r0
 800ed2a:	8812      	ldrh	r2, [r2, #0]
 800ed2c:	2180      	movs	r1, #128	@ 0x80
 800ed2e:	0189      	lsls	r1, r1, #6
 800ed30:	404a      	eors	r2, r1
 800ed32:	801a      	strh	r2, [r3, #0]
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	001a      	movs	r2, r3
 800ed3a:	68bb      	ldr	r3, [r7, #8]
 800ed3c:	781b      	ldrb	r3, [r3, #0]
 800ed3e:	009b      	lsls	r3, r3, #2
 800ed40:	18d3      	adds	r3, r2, r3
 800ed42:	183a      	adds	r2, r7, r0
 800ed44:	8812      	ldrh	r2, [r2, #0]
 800ed46:	495e      	ldr	r1, [pc, #376]	@ (800eec0 <HAL_PCD_EP_DB_Receive+0x228>)
 800ed48:	430a      	orrs	r2, r1
 800ed4a:	b292      	uxth	r2, r2
 800ed4c:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ed4e:	1dbb      	adds	r3, r7, #6
 800ed50:	881b      	ldrh	r3, [r3, #0]
 800ed52:	2240      	movs	r2, #64	@ 0x40
 800ed54:	4013      	ands	r3, r2
 800ed56:	d01a      	beq.n	800ed8e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	001a      	movs	r2, r3
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	781b      	ldrb	r3, [r3, #0]
 800ed62:	009b      	lsls	r3, r3, #2
 800ed64:	18d3      	adds	r3, r2, r3
 800ed66:	881b      	ldrh	r3, [r3, #0]
 800ed68:	b29a      	uxth	r2, r3
 800ed6a:	2016      	movs	r0, #22
 800ed6c:	183b      	adds	r3, r7, r0
 800ed6e:	4955      	ldr	r1, [pc, #340]	@ (800eec4 <HAL_PCD_EP_DB_Receive+0x22c>)
 800ed70:	400a      	ands	r2, r1
 800ed72:	801a      	strh	r2, [r3, #0]
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	001a      	movs	r2, r3
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	009b      	lsls	r3, r3, #2
 800ed80:	18d3      	adds	r3, r2, r3
 800ed82:	183a      	adds	r2, r7, r0
 800ed84:	8812      	ldrh	r2, [r2, #0]
 800ed86:	4950      	ldr	r1, [pc, #320]	@ (800eec8 <HAL_PCD_EP_DB_Receive+0x230>)
 800ed88:	430a      	orrs	r2, r1
 800ed8a:	b292      	uxth	r2, r2
 800ed8c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800ed8e:	241a      	movs	r4, #26
 800ed90:	193b      	adds	r3, r7, r4
 800ed92:	881b      	ldrh	r3, [r3, #0]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d100      	bne.n	800ed9a <HAL_PCD_EP_DB_Receive+0x102>
 800ed98:	e086      	b.n	800eea8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	6818      	ldr	r0, [r3, #0]
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	6959      	ldr	r1, [r3, #20]
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	891a      	ldrh	r2, [r3, #8]
 800eda6:	193b      	adds	r3, r7, r4
 800eda8:	881b      	ldrh	r3, [r3, #0]
 800edaa:	f005 fe64 	bl	8014a76 <USB_ReadPMA>
 800edae:	e07b      	b.n	800eea8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	2250      	movs	r2, #80	@ 0x50
 800edb6:	5a9b      	ldrh	r3, [r3, r2]
 800edb8:	b29b      	uxth	r3, r3
 800edba:	001a      	movs	r2, r3
 800edbc:	68bb      	ldr	r3, [r7, #8]
 800edbe:	781b      	ldrb	r3, [r3, #0]
 800edc0:	00db      	lsls	r3, r3, #3
 800edc2:	18d2      	adds	r2, r2, r3
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	18d3      	adds	r3, r2, r3
 800edca:	4a40      	ldr	r2, [pc, #256]	@ (800eecc <HAL_PCD_EP_DB_Receive+0x234>)
 800edcc:	4694      	mov	ip, r2
 800edce:	4463      	add	r3, ip
 800edd0:	881a      	ldrh	r2, [r3, #0]
 800edd2:	211a      	movs	r1, #26
 800edd4:	187b      	adds	r3, r7, r1
 800edd6:	0592      	lsls	r2, r2, #22
 800edd8:	0d92      	lsrs	r2, r2, #22
 800edda:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	699a      	ldr	r2, [r3, #24]
 800ede0:	187b      	adds	r3, r7, r1
 800ede2:	881b      	ldrh	r3, [r3, #0]
 800ede4:	429a      	cmp	r2, r3
 800ede6:	d307      	bcc.n	800edf8 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	699a      	ldr	r2, [r3, #24]
 800edec:	187b      	adds	r3, r7, r1
 800edee:	881b      	ldrh	r3, [r3, #0]
 800edf0:	1ad2      	subs	r2, r2, r3
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	619a      	str	r2, [r3, #24]
 800edf6:	e002      	b.n	800edfe <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	2200      	movs	r2, #0
 800edfc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	699b      	ldr	r3, [r3, #24]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d121      	bne.n	800ee4a <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	001a      	movs	r2, r3
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	781b      	ldrb	r3, [r3, #0]
 800ee10:	009b      	lsls	r3, r3, #2
 800ee12:	18d3      	adds	r3, r2, r3
 800ee14:	881b      	ldrh	r3, [r3, #0]
 800ee16:	b29a      	uxth	r2, r3
 800ee18:	201e      	movs	r0, #30
 800ee1a:	183b      	adds	r3, r7, r0
 800ee1c:	4927      	ldr	r1, [pc, #156]	@ (800eebc <HAL_PCD_EP_DB_Receive+0x224>)
 800ee1e:	400a      	ands	r2, r1
 800ee20:	801a      	strh	r2, [r3, #0]
 800ee22:	183b      	adds	r3, r7, r0
 800ee24:	183a      	adds	r2, r7, r0
 800ee26:	8812      	ldrh	r2, [r2, #0]
 800ee28:	2180      	movs	r1, #128	@ 0x80
 800ee2a:	0189      	lsls	r1, r1, #6
 800ee2c:	404a      	eors	r2, r1
 800ee2e:	801a      	strh	r2, [r3, #0]
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	001a      	movs	r2, r3
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	781b      	ldrb	r3, [r3, #0]
 800ee3a:	009b      	lsls	r3, r3, #2
 800ee3c:	18d3      	adds	r3, r2, r3
 800ee3e:	183a      	adds	r2, r7, r0
 800ee40:	8812      	ldrh	r2, [r2, #0]
 800ee42:	491f      	ldr	r1, [pc, #124]	@ (800eec0 <HAL_PCD_EP_DB_Receive+0x228>)
 800ee44:	430a      	orrs	r2, r1
 800ee46:	b292      	uxth	r2, r2
 800ee48:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800ee4a:	1dbb      	adds	r3, r7, #6
 800ee4c:	881b      	ldrh	r3, [r3, #0]
 800ee4e:	2240      	movs	r2, #64	@ 0x40
 800ee50:	4013      	ands	r3, r2
 800ee52:	d11a      	bne.n	800ee8a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	001a      	movs	r2, r3
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	781b      	ldrb	r3, [r3, #0]
 800ee5e:	009b      	lsls	r3, r3, #2
 800ee60:	18d3      	adds	r3, r2, r3
 800ee62:	881b      	ldrh	r3, [r3, #0]
 800ee64:	b29a      	uxth	r2, r3
 800ee66:	201c      	movs	r0, #28
 800ee68:	183b      	adds	r3, r7, r0
 800ee6a:	4916      	ldr	r1, [pc, #88]	@ (800eec4 <HAL_PCD_EP_DB_Receive+0x22c>)
 800ee6c:	400a      	ands	r2, r1
 800ee6e:	801a      	strh	r2, [r3, #0]
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	001a      	movs	r2, r3
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	781b      	ldrb	r3, [r3, #0]
 800ee7a:	009b      	lsls	r3, r3, #2
 800ee7c:	18d3      	adds	r3, r2, r3
 800ee7e:	183a      	adds	r2, r7, r0
 800ee80:	8812      	ldrh	r2, [r2, #0]
 800ee82:	4911      	ldr	r1, [pc, #68]	@ (800eec8 <HAL_PCD_EP_DB_Receive+0x230>)
 800ee84:	430a      	orrs	r2, r1
 800ee86:	b292      	uxth	r2, r2
 800ee88:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800ee8a:	241a      	movs	r4, #26
 800ee8c:	193b      	adds	r3, r7, r4
 800ee8e:	881b      	ldrh	r3, [r3, #0]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d009      	beq.n	800eea8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	6818      	ldr	r0, [r3, #0]
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	6959      	ldr	r1, [r3, #20]
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	895a      	ldrh	r2, [r3, #10]
 800eea0:	193b      	adds	r3, r7, r4
 800eea2:	881b      	ldrh	r3, [r3, #0]
 800eea4:	f005 fde7 	bl	8014a76 <USB_ReadPMA>
    }
  }

  return count;
 800eea8:	231a      	movs	r3, #26
 800eeaa:	18fb      	adds	r3, r7, r3
 800eeac:	881b      	ldrh	r3, [r3, #0]
}
 800eeae:	0018      	movs	r0, r3
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	b009      	add	sp, #36	@ 0x24
 800eeb4:	bd90      	pop	{r4, r7, pc}
 800eeb6:	46c0      	nop			@ (mov r8, r8)
 800eeb8:	00000402 	.word	0x00000402
 800eebc:	ffffbf8f 	.word	0xffffbf8f
 800eec0:	ffff8080 	.word	0xffff8080
 800eec4:	ffff8f8f 	.word	0xffff8f8f
 800eec8:	ffff80c0 	.word	0xffff80c0
 800eecc:	00000406 	.word	0x00000406

0800eed0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b0a4      	sub	sp, #144	@ 0x90
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	60f8      	str	r0, [r7, #12]
 800eed8:	60b9      	str	r1, [r7, #8]
 800eeda:	1dbb      	adds	r3, r7, #6
 800eedc:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800eede:	1dbb      	adds	r3, r7, #6
 800eee0:	881b      	ldrh	r3, [r3, #0]
 800eee2:	2240      	movs	r2, #64	@ 0x40
 800eee4:	4013      	ands	r3, r2
 800eee6:	d100      	bne.n	800eeea <HAL_PCD_EP_DB_Transmit+0x1a>
 800eee8:	e1e4      	b.n	800f2b4 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	2250      	movs	r2, #80	@ 0x50
 800eef0:	5a9b      	ldrh	r3, [r3, r2]
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	001a      	movs	r2, r3
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	781b      	ldrb	r3, [r3, #0]
 800eefa:	00db      	lsls	r3, r3, #3
 800eefc:	18d2      	adds	r2, r2, r3
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	18d3      	adds	r3, r2, r3
 800ef04:	4ad0      	ldr	r2, [pc, #832]	@ (800f248 <HAL_PCD_EP_DB_Transmit+0x378>)
 800ef06:	4694      	mov	ip, r2
 800ef08:	4463      	add	r3, ip
 800ef0a:	881a      	ldrh	r2, [r3, #0]
 800ef0c:	2186      	movs	r1, #134	@ 0x86
 800ef0e:	187b      	adds	r3, r7, r1
 800ef10:	0592      	lsls	r2, r2, #22
 800ef12:	0d92      	lsrs	r2, r2, #22
 800ef14:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	699a      	ldr	r2, [r3, #24]
 800ef1a:	187b      	adds	r3, r7, r1
 800ef1c:	881b      	ldrh	r3, [r3, #0]
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d907      	bls.n	800ef32 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	699a      	ldr	r2, [r3, #24]
 800ef26:	187b      	adds	r3, r7, r1
 800ef28:	881b      	ldrh	r3, [r3, #0]
 800ef2a:	1ad2      	subs	r2, r2, r3
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	619a      	str	r2, [r3, #24]
 800ef30:	e002      	b.n	800ef38 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	2200      	movs	r2, #0
 800ef36:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	699b      	ldr	r3, [r3, #24]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d000      	beq.n	800ef42 <HAL_PCD_EP_DB_Transmit+0x72>
 800ef40:	e0b5      	b.n	800f0ae <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	785b      	ldrb	r3, [r3, #1]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d125      	bne.n	800ef96 <HAL_PCD_EP_DB_Transmit+0xc6>
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	2250      	movs	r2, #80	@ 0x50
 800ef56:	5a9b      	ldrh	r3, [r3, r2]
 800ef58:	b29b      	uxth	r3, r3
 800ef5a:	001a      	movs	r2, r3
 800ef5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef5e:	189b      	adds	r3, r3, r2
 800ef60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	781b      	ldrb	r3, [r3, #0]
 800ef66:	00da      	lsls	r2, r3, #3
 800ef68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef6a:	18d3      	adds	r3, r2, r3
 800ef6c:	4ab6      	ldr	r2, [pc, #728]	@ (800f248 <HAL_PCD_EP_DB_Transmit+0x378>)
 800ef6e:	4694      	mov	ip, r2
 800ef70:	4463      	add	r3, ip
 800ef72:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ef74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef76:	881b      	ldrh	r3, [r3, #0]
 800ef78:	b29b      	uxth	r3, r3
 800ef7a:	059b      	lsls	r3, r3, #22
 800ef7c:	0d9b      	lsrs	r3, r3, #22
 800ef7e:	b29a      	uxth	r2, r3
 800ef80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef82:	801a      	strh	r2, [r3, #0]
 800ef84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef86:	881b      	ldrh	r3, [r3, #0]
 800ef88:	b29b      	uxth	r3, r3
 800ef8a:	4ab0      	ldr	r2, [pc, #704]	@ (800f24c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800ef8c:	4313      	orrs	r3, r2
 800ef8e:	b29a      	uxth	r2, r3
 800ef90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef92:	801a      	strh	r2, [r3, #0]
 800ef94:	e01b      	b.n	800efce <HAL_PCD_EP_DB_Transmit+0xfe>
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	785b      	ldrb	r3, [r3, #1]
 800ef9a:	2b01      	cmp	r3, #1
 800ef9c:	d117      	bne.n	800efce <HAL_PCD_EP_DB_Transmit+0xfe>
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	637b      	str	r3, [r7, #52]	@ 0x34
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	2250      	movs	r2, #80	@ 0x50
 800efaa:	5a9b      	ldrh	r3, [r3, r2]
 800efac:	b29b      	uxth	r3, r3
 800efae:	001a      	movs	r2, r3
 800efb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efb2:	189b      	adds	r3, r3, r2
 800efb4:	637b      	str	r3, [r7, #52]	@ 0x34
 800efb6:	68bb      	ldr	r3, [r7, #8]
 800efb8:	781b      	ldrb	r3, [r3, #0]
 800efba:	00da      	lsls	r2, r3, #3
 800efbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efbe:	18d3      	adds	r3, r2, r3
 800efc0:	4aa1      	ldr	r2, [pc, #644]	@ (800f248 <HAL_PCD_EP_DB_Transmit+0x378>)
 800efc2:	4694      	mov	ip, r2
 800efc4:	4463      	add	r3, ip
 800efc6:	633b      	str	r3, [r7, #48]	@ 0x30
 800efc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efca:	2200      	movs	r2, #0
 800efcc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	627b      	str	r3, [r7, #36]	@ 0x24
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	785b      	ldrb	r3, [r3, #1]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d125      	bne.n	800f028 <HAL_PCD_EP_DB_Transmit+0x158>
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	61fb      	str	r3, [r7, #28]
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	2250      	movs	r2, #80	@ 0x50
 800efe8:	5a9b      	ldrh	r3, [r3, r2]
 800efea:	b29b      	uxth	r3, r3
 800efec:	001a      	movs	r2, r3
 800efee:	69fb      	ldr	r3, [r7, #28]
 800eff0:	189b      	adds	r3, r3, r2
 800eff2:	61fb      	str	r3, [r7, #28]
 800eff4:	68bb      	ldr	r3, [r7, #8]
 800eff6:	781b      	ldrb	r3, [r3, #0]
 800eff8:	00da      	lsls	r2, r3, #3
 800effa:	69fb      	ldr	r3, [r7, #28]
 800effc:	18d3      	adds	r3, r2, r3
 800effe:	4a94      	ldr	r2, [pc, #592]	@ (800f250 <HAL_PCD_EP_DB_Transmit+0x380>)
 800f000:	4694      	mov	ip, r2
 800f002:	4463      	add	r3, ip
 800f004:	61bb      	str	r3, [r7, #24]
 800f006:	69bb      	ldr	r3, [r7, #24]
 800f008:	881b      	ldrh	r3, [r3, #0]
 800f00a:	b29b      	uxth	r3, r3
 800f00c:	059b      	lsls	r3, r3, #22
 800f00e:	0d9b      	lsrs	r3, r3, #22
 800f010:	b29a      	uxth	r2, r3
 800f012:	69bb      	ldr	r3, [r7, #24]
 800f014:	801a      	strh	r2, [r3, #0]
 800f016:	69bb      	ldr	r3, [r7, #24]
 800f018:	881b      	ldrh	r3, [r3, #0]
 800f01a:	b29b      	uxth	r3, r3
 800f01c:	4a8b      	ldr	r2, [pc, #556]	@ (800f24c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f01e:	4313      	orrs	r3, r2
 800f020:	b29a      	uxth	r2, r3
 800f022:	69bb      	ldr	r3, [r7, #24]
 800f024:	801a      	strh	r2, [r3, #0]
 800f026:	e018      	b.n	800f05a <HAL_PCD_EP_DB_Transmit+0x18a>
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	785b      	ldrb	r3, [r3, #1]
 800f02c:	2b01      	cmp	r3, #1
 800f02e:	d114      	bne.n	800f05a <HAL_PCD_EP_DB_Transmit+0x18a>
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	2250      	movs	r2, #80	@ 0x50
 800f036:	5a9b      	ldrh	r3, [r3, r2]
 800f038:	b29b      	uxth	r3, r3
 800f03a:	001a      	movs	r2, r3
 800f03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f03e:	189b      	adds	r3, r3, r2
 800f040:	627b      	str	r3, [r7, #36]	@ 0x24
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	781b      	ldrb	r3, [r3, #0]
 800f046:	00da      	lsls	r2, r3, #3
 800f048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f04a:	18d3      	adds	r3, r2, r3
 800f04c:	4a80      	ldr	r2, [pc, #512]	@ (800f250 <HAL_PCD_EP_DB_Transmit+0x380>)
 800f04e:	4694      	mov	ip, r2
 800f050:	4463      	add	r3, ip
 800f052:	623b      	str	r3, [r7, #32]
 800f054:	6a3b      	ldr	r3, [r7, #32]
 800f056:	2200      	movs	r2, #0
 800f058:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	781a      	ldrb	r2, [r3, #0]
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	0011      	movs	r1, r2
 800f062:	0018      	movs	r0, r3
 800f064:	f007 fd4c 	bl	8016b00 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f068:	1dbb      	adds	r3, r7, #6
 800f06a:	881a      	ldrh	r2, [r3, #0]
 800f06c:	2380      	movs	r3, #128	@ 0x80
 800f06e:	01db      	lsls	r3, r3, #7
 800f070:	4013      	ands	r3, r2
 800f072:	d100      	bne.n	800f076 <HAL_PCD_EP_DB_Transmit+0x1a6>
 800f074:	e309      	b.n	800f68a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	001a      	movs	r2, r3
 800f07c:	68bb      	ldr	r3, [r7, #8]
 800f07e:	781b      	ldrb	r3, [r3, #0]
 800f080:	009b      	lsls	r3, r3, #2
 800f082:	18d3      	adds	r3, r2, r3
 800f084:	881b      	ldrh	r3, [r3, #0]
 800f086:	b29a      	uxth	r2, r3
 800f088:	2016      	movs	r0, #22
 800f08a:	183b      	adds	r3, r7, r0
 800f08c:	4971      	ldr	r1, [pc, #452]	@ (800f254 <HAL_PCD_EP_DB_Transmit+0x384>)
 800f08e:	400a      	ands	r2, r1
 800f090:	801a      	strh	r2, [r3, #0]
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	001a      	movs	r2, r3
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	009b      	lsls	r3, r3, #2
 800f09e:	18d3      	adds	r3, r2, r3
 800f0a0:	183a      	adds	r2, r7, r0
 800f0a2:	8812      	ldrh	r2, [r2, #0]
 800f0a4:	496c      	ldr	r1, [pc, #432]	@ (800f258 <HAL_PCD_EP_DB_Transmit+0x388>)
 800f0a6:	430a      	orrs	r2, r1
 800f0a8:	b292      	uxth	r2, r2
 800f0aa:	801a      	strh	r2, [r3, #0]
 800f0ac:	e2ed      	b.n	800f68a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f0ae:	1dbb      	adds	r3, r7, #6
 800f0b0:	881a      	ldrh	r2, [r3, #0]
 800f0b2:	2380      	movs	r3, #128	@ 0x80
 800f0b4:	01db      	lsls	r3, r3, #7
 800f0b6:	4013      	ands	r3, r2
 800f0b8:	d01a      	beq.n	800f0f0 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	001a      	movs	r2, r3
 800f0c0:	68bb      	ldr	r3, [r7, #8]
 800f0c2:	781b      	ldrb	r3, [r3, #0]
 800f0c4:	009b      	lsls	r3, r3, #2
 800f0c6:	18d3      	adds	r3, r2, r3
 800f0c8:	881b      	ldrh	r3, [r3, #0]
 800f0ca:	b29a      	uxth	r2, r3
 800f0cc:	208a      	movs	r0, #138	@ 0x8a
 800f0ce:	183b      	adds	r3, r7, r0
 800f0d0:	4960      	ldr	r1, [pc, #384]	@ (800f254 <HAL_PCD_EP_DB_Transmit+0x384>)
 800f0d2:	400a      	ands	r2, r1
 800f0d4:	801a      	strh	r2, [r3, #0]
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	001a      	movs	r2, r3
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	781b      	ldrb	r3, [r3, #0]
 800f0e0:	009b      	lsls	r3, r3, #2
 800f0e2:	18d3      	adds	r3, r2, r3
 800f0e4:	183a      	adds	r2, r7, r0
 800f0e6:	8812      	ldrh	r2, [r2, #0]
 800f0e8:	495b      	ldr	r1, [pc, #364]	@ (800f258 <HAL_PCD_EP_DB_Transmit+0x388>)
 800f0ea:	430a      	orrs	r2, r1
 800f0ec:	b292      	uxth	r2, r2
 800f0ee:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	2224      	movs	r2, #36	@ 0x24
 800f0f4:	5c9b      	ldrb	r3, [r3, r2]
 800f0f6:	2b01      	cmp	r3, #1
 800f0f8:	d000      	beq.n	800f0fc <HAL_PCD_EP_DB_Transmit+0x22c>
 800f0fa:	e2c6      	b.n	800f68a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	695a      	ldr	r2, [r3, #20]
 800f100:	2186      	movs	r1, #134	@ 0x86
 800f102:	187b      	adds	r3, r7, r1
 800f104:	881b      	ldrh	r3, [r3, #0]
 800f106:	18d2      	adds	r2, r2, r3
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800f10c:	68bb      	ldr	r3, [r7, #8]
 800f10e:	69da      	ldr	r2, [r3, #28]
 800f110:	187b      	adds	r3, r7, r1
 800f112:	881b      	ldrh	r3, [r3, #0]
 800f114:	18d2      	adds	r2, r2, r3
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	6a1a      	ldr	r2, [r3, #32]
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	691b      	ldr	r3, [r3, #16]
 800f122:	429a      	cmp	r2, r3
 800f124:	d30c      	bcc.n	800f140 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	691b      	ldr	r3, [r3, #16]
 800f12a:	218c      	movs	r1, #140	@ 0x8c
 800f12c:	187a      	adds	r2, r7, r1
 800f12e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	6a1a      	ldr	r2, [r3, #32]
 800f134:	187b      	adds	r3, r7, r1
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	1ad2      	subs	r2, r2, r3
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	621a      	str	r2, [r3, #32]
 800f13e:	e01a      	b.n	800f176 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	6a1b      	ldr	r3, [r3, #32]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d10a      	bne.n	800f15e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800f148:	2386      	movs	r3, #134	@ 0x86
 800f14a:	18fb      	adds	r3, r7, r3
 800f14c:	881b      	ldrh	r3, [r3, #0]
 800f14e:	228c      	movs	r2, #140	@ 0x8c
 800f150:	18ba      	adds	r2, r7, r2
 800f152:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	2224      	movs	r2, #36	@ 0x24
 800f158:	2100      	movs	r1, #0
 800f15a:	5499      	strb	r1, [r3, r2]
 800f15c:	e00b      	b.n	800f176 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	2224      	movs	r2, #36	@ 0x24
 800f162:	2100      	movs	r1, #0
 800f164:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	6a1b      	ldr	r3, [r3, #32]
 800f16a:	228c      	movs	r2, #140	@ 0x8c
 800f16c:	18ba      	adds	r2, r7, r2
 800f16e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	2200      	movs	r2, #0
 800f174:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800f176:	68bb      	ldr	r3, [r7, #8]
 800f178:	785b      	ldrb	r3, [r3, #1]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d000      	beq.n	800f180 <HAL_PCD_EP_DB_Transmit+0x2b0>
 800f17e:	e06d      	b.n	800f25c <HAL_PCD_EP_DB_Transmit+0x38c>
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	2250      	movs	r2, #80	@ 0x50
 800f18c:	5a9b      	ldrh	r3, [r3, r2]
 800f18e:	b29b      	uxth	r3, r3
 800f190:	001a      	movs	r2, r3
 800f192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f194:	189b      	adds	r3, r3, r2
 800f196:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	781b      	ldrb	r3, [r3, #0]
 800f19c:	00da      	lsls	r2, r3, #3
 800f19e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1a0:	18d3      	adds	r3, r2, r3
 800f1a2:	4a29      	ldr	r2, [pc, #164]	@ (800f248 <HAL_PCD_EP_DB_Transmit+0x378>)
 800f1a4:	4694      	mov	ip, r2
 800f1a6:	4463      	add	r3, ip
 800f1a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f1aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1ac:	881b      	ldrh	r3, [r3, #0]
 800f1ae:	b29b      	uxth	r3, r3
 800f1b0:	059b      	lsls	r3, r3, #22
 800f1b2:	0d9b      	lsrs	r3, r3, #22
 800f1b4:	b29a      	uxth	r2, r3
 800f1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1b8:	801a      	strh	r2, [r3, #0]
 800f1ba:	228c      	movs	r2, #140	@ 0x8c
 800f1bc:	18bb      	adds	r3, r7, r2
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	2b3e      	cmp	r3, #62	@ 0x3e
 800f1c2:	d91a      	bls.n	800f1fa <HAL_PCD_EP_DB_Transmit+0x32a>
 800f1c4:	18bb      	adds	r3, r7, r2
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	095b      	lsrs	r3, r3, #5
 800f1ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f1cc:	18bb      	adds	r3, r7, r2
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	221f      	movs	r2, #31
 800f1d2:	4013      	ands	r3, r2
 800f1d4:	d102      	bne.n	800f1dc <HAL_PCD_EP_DB_Transmit+0x30c>
 800f1d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f1d8:	3b01      	subs	r3, #1
 800f1da:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1de:	881b      	ldrh	r3, [r3, #0]
 800f1e0:	b29a      	uxth	r2, r3
 800f1e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f1e4:	b29b      	uxth	r3, r3
 800f1e6:	029b      	lsls	r3, r3, #10
 800f1e8:	b29b      	uxth	r3, r3
 800f1ea:	4313      	orrs	r3, r2
 800f1ec:	b29b      	uxth	r3, r3
 800f1ee:	4a17      	ldr	r2, [pc, #92]	@ (800f24c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f1f0:	4313      	orrs	r3, r2
 800f1f2:	b29a      	uxth	r2, r3
 800f1f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1f6:	801a      	strh	r2, [r3, #0]
 800f1f8:	e04f      	b.n	800f29a <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f1fa:	238c      	movs	r3, #140	@ 0x8c
 800f1fc:	18fb      	adds	r3, r7, r3
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d108      	bne.n	800f216 <HAL_PCD_EP_DB_Transmit+0x346>
 800f204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f206:	881b      	ldrh	r3, [r3, #0]
 800f208:	b29b      	uxth	r3, r3
 800f20a:	4a10      	ldr	r2, [pc, #64]	@ (800f24c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f20c:	4313      	orrs	r3, r2
 800f20e:	b29a      	uxth	r2, r3
 800f210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f212:	801a      	strh	r2, [r3, #0]
 800f214:	e041      	b.n	800f29a <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f216:	228c      	movs	r2, #140	@ 0x8c
 800f218:	18bb      	adds	r3, r7, r2
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	085b      	lsrs	r3, r3, #1
 800f21e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f220:	18bb      	adds	r3, r7, r2
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	2201      	movs	r2, #1
 800f226:	4013      	ands	r3, r2
 800f228:	d002      	beq.n	800f230 <HAL_PCD_EP_DB_Transmit+0x360>
 800f22a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f22c:	3301      	adds	r3, #1
 800f22e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f232:	881b      	ldrh	r3, [r3, #0]
 800f234:	b29a      	uxth	r2, r3
 800f236:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f238:	b29b      	uxth	r3, r3
 800f23a:	029b      	lsls	r3, r3, #10
 800f23c:	b29b      	uxth	r3, r3
 800f23e:	4313      	orrs	r3, r2
 800f240:	b29a      	uxth	r2, r3
 800f242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f244:	801a      	strh	r2, [r3, #0]
 800f246:	e028      	b.n	800f29a <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f248:	00000402 	.word	0x00000402
 800f24c:	ffff8000 	.word	0xffff8000
 800f250:	00000406 	.word	0x00000406
 800f254:	ffff8f8f 	.word	0xffff8f8f
 800f258:	ffffc080 	.word	0xffffc080
 800f25c:	68bb      	ldr	r3, [r7, #8]
 800f25e:	785b      	ldrb	r3, [r3, #1]
 800f260:	2b01      	cmp	r3, #1
 800f262:	d11a      	bne.n	800f29a <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	647b      	str	r3, [r7, #68]	@ 0x44
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	2250      	movs	r2, #80	@ 0x50
 800f270:	5a9b      	ldrh	r3, [r3, r2]
 800f272:	b29b      	uxth	r3, r3
 800f274:	001a      	movs	r2, r3
 800f276:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f278:	189b      	adds	r3, r3, r2
 800f27a:	647b      	str	r3, [r7, #68]	@ 0x44
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	781b      	ldrb	r3, [r3, #0]
 800f280:	00da      	lsls	r2, r3, #3
 800f282:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f284:	18d3      	adds	r3, r2, r3
 800f286:	4adb      	ldr	r2, [pc, #876]	@ (800f5f4 <HAL_PCD_EP_DB_Transmit+0x724>)
 800f288:	4694      	mov	ip, r2
 800f28a:	4463      	add	r3, ip
 800f28c:	643b      	str	r3, [r7, #64]	@ 0x40
 800f28e:	238c      	movs	r3, #140	@ 0x8c
 800f290:	18fb      	adds	r3, r7, r3
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	b29a      	uxth	r2, r3
 800f296:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f298:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	6818      	ldr	r0, [r3, #0]
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	6959      	ldr	r1, [r3, #20]
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	891a      	ldrh	r2, [r3, #8]
 800f2a6:	238c      	movs	r3, #140	@ 0x8c
 800f2a8:	18fb      	adds	r3, r7, r3
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	b29b      	uxth	r3, r3
 800f2ae:	f005 fb99 	bl	80149e4 <USB_WritePMA>
 800f2b2:	e1ea      	b.n	800f68a <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	2250      	movs	r2, #80	@ 0x50
 800f2ba:	5a9b      	ldrh	r3, [r3, r2]
 800f2bc:	b29b      	uxth	r3, r3
 800f2be:	001a      	movs	r2, r3
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	781b      	ldrb	r3, [r3, #0]
 800f2c4:	00db      	lsls	r3, r3, #3
 800f2c6:	18d2      	adds	r2, r2, r3
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	18d3      	adds	r3, r2, r3
 800f2ce:	4aca      	ldr	r2, [pc, #808]	@ (800f5f8 <HAL_PCD_EP_DB_Transmit+0x728>)
 800f2d0:	4694      	mov	ip, r2
 800f2d2:	4463      	add	r3, ip
 800f2d4:	881a      	ldrh	r2, [r3, #0]
 800f2d6:	2186      	movs	r1, #134	@ 0x86
 800f2d8:	187b      	adds	r3, r7, r1
 800f2da:	0592      	lsls	r2, r2, #22
 800f2dc:	0d92      	lsrs	r2, r2, #22
 800f2de:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 800f2e0:	68bb      	ldr	r3, [r7, #8]
 800f2e2:	699a      	ldr	r2, [r3, #24]
 800f2e4:	187b      	adds	r3, r7, r1
 800f2e6:	881b      	ldrh	r3, [r3, #0]
 800f2e8:	429a      	cmp	r2, r3
 800f2ea:	d307      	bcc.n	800f2fc <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	699a      	ldr	r2, [r3, #24]
 800f2f0:	187b      	adds	r3, r7, r1
 800f2f2:	881b      	ldrh	r3, [r3, #0]
 800f2f4:	1ad2      	subs	r2, r2, r3
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	619a      	str	r2, [r3, #24]
 800f2fa:	e002      	b.n	800f302 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	2200      	movs	r2, #0
 800f300:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	699b      	ldr	r3, [r3, #24]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d000      	beq.n	800f30c <HAL_PCD_EP_DB_Transmit+0x43c>
 800f30a:	e0bb      	b.n	800f484 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f30c:	68bb      	ldr	r3, [r7, #8]
 800f30e:	785b      	ldrb	r3, [r3, #1]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d125      	bne.n	800f360 <HAL_PCD_EP_DB_Transmit+0x490>
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	2250      	movs	r2, #80	@ 0x50
 800f320:	5a9b      	ldrh	r3, [r3, r2]
 800f322:	b29b      	uxth	r3, r3
 800f324:	001a      	movs	r2, r3
 800f326:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f328:	189b      	adds	r3, r3, r2
 800f32a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f32c:	68bb      	ldr	r3, [r7, #8]
 800f32e:	781b      	ldrb	r3, [r3, #0]
 800f330:	00da      	lsls	r2, r3, #3
 800f332:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f334:	18d3      	adds	r3, r2, r3
 800f336:	4aaf      	ldr	r2, [pc, #700]	@ (800f5f4 <HAL_PCD_EP_DB_Transmit+0x724>)
 800f338:	4694      	mov	ip, r2
 800f33a:	4463      	add	r3, ip
 800f33c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f33e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f340:	881b      	ldrh	r3, [r3, #0]
 800f342:	b29b      	uxth	r3, r3
 800f344:	059b      	lsls	r3, r3, #22
 800f346:	0d9b      	lsrs	r3, r3, #22
 800f348:	b29a      	uxth	r2, r3
 800f34a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f34c:	801a      	strh	r2, [r3, #0]
 800f34e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f350:	881b      	ldrh	r3, [r3, #0]
 800f352:	b29b      	uxth	r3, r3
 800f354:	4aa9      	ldr	r2, [pc, #676]	@ (800f5fc <HAL_PCD_EP_DB_Transmit+0x72c>)
 800f356:	4313      	orrs	r3, r2
 800f358:	b29a      	uxth	r2, r3
 800f35a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f35c:	801a      	strh	r2, [r3, #0]
 800f35e:	e01b      	b.n	800f398 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	785b      	ldrb	r3, [r3, #1]
 800f364:	2b01      	cmp	r3, #1
 800f366:	d117      	bne.n	800f398 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	667b      	str	r3, [r7, #100]	@ 0x64
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	2250      	movs	r2, #80	@ 0x50
 800f374:	5a9b      	ldrh	r3, [r3, r2]
 800f376:	b29b      	uxth	r3, r3
 800f378:	001a      	movs	r2, r3
 800f37a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f37c:	189b      	adds	r3, r3, r2
 800f37e:	667b      	str	r3, [r7, #100]	@ 0x64
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	781b      	ldrb	r3, [r3, #0]
 800f384:	00da      	lsls	r2, r3, #3
 800f386:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f388:	18d3      	adds	r3, r2, r3
 800f38a:	4a9a      	ldr	r2, [pc, #616]	@ (800f5f4 <HAL_PCD_EP_DB_Transmit+0x724>)
 800f38c:	4694      	mov	ip, r2
 800f38e:	4463      	add	r3, ip
 800f390:	663b      	str	r3, [r7, #96]	@ 0x60
 800f392:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f394:	2200      	movs	r2, #0
 800f396:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	677b      	str	r3, [r7, #116]	@ 0x74
 800f39e:	68bb      	ldr	r3, [r7, #8]
 800f3a0:	785b      	ldrb	r3, [r3, #1]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d12b      	bne.n	800f3fe <HAL_PCD_EP_DB_Transmit+0x52e>
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	2250      	movs	r2, #80	@ 0x50
 800f3b2:	5a9b      	ldrh	r3, [r3, r2]
 800f3b4:	b29b      	uxth	r3, r3
 800f3b6:	001a      	movs	r2, r3
 800f3b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f3ba:	189b      	adds	r3, r3, r2
 800f3bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	781b      	ldrb	r3, [r3, #0]
 800f3c2:	00da      	lsls	r2, r3, #3
 800f3c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f3c6:	18d3      	adds	r3, r2, r3
 800f3c8:	4a8b      	ldr	r2, [pc, #556]	@ (800f5f8 <HAL_PCD_EP_DB_Transmit+0x728>)
 800f3ca:	4694      	mov	ip, r2
 800f3cc:	4463      	add	r3, ip
 800f3ce:	2180      	movs	r1, #128	@ 0x80
 800f3d0:	187a      	adds	r2, r7, r1
 800f3d2:	6013      	str	r3, [r2, #0]
 800f3d4:	187b      	adds	r3, r7, r1
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	881b      	ldrh	r3, [r3, #0]
 800f3da:	b29b      	uxth	r3, r3
 800f3dc:	059b      	lsls	r3, r3, #22
 800f3de:	0d9b      	lsrs	r3, r3, #22
 800f3e0:	b29a      	uxth	r2, r3
 800f3e2:	187b      	adds	r3, r7, r1
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	801a      	strh	r2, [r3, #0]
 800f3e8:	187b      	adds	r3, r7, r1
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	881b      	ldrh	r3, [r3, #0]
 800f3ee:	b29b      	uxth	r3, r3
 800f3f0:	4a82      	ldr	r2, [pc, #520]	@ (800f5fc <HAL_PCD_EP_DB_Transmit+0x72c>)
 800f3f2:	4313      	orrs	r3, r2
 800f3f4:	b29a      	uxth	r2, r3
 800f3f6:	187b      	adds	r3, r7, r1
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	801a      	strh	r2, [r3, #0]
 800f3fc:	e018      	b.n	800f430 <HAL_PCD_EP_DB_Transmit+0x560>
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	785b      	ldrb	r3, [r3, #1]
 800f402:	2b01      	cmp	r3, #1
 800f404:	d114      	bne.n	800f430 <HAL_PCD_EP_DB_Transmit+0x560>
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	2250      	movs	r2, #80	@ 0x50
 800f40c:	5a9b      	ldrh	r3, [r3, r2]
 800f40e:	b29b      	uxth	r3, r3
 800f410:	001a      	movs	r2, r3
 800f412:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f414:	189b      	adds	r3, r3, r2
 800f416:	677b      	str	r3, [r7, #116]	@ 0x74
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	781b      	ldrb	r3, [r3, #0]
 800f41c:	00da      	lsls	r2, r3, #3
 800f41e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f420:	18d3      	adds	r3, r2, r3
 800f422:	4a75      	ldr	r2, [pc, #468]	@ (800f5f8 <HAL_PCD_EP_DB_Transmit+0x728>)
 800f424:	4694      	mov	ip, r2
 800f426:	4463      	add	r3, ip
 800f428:	673b      	str	r3, [r7, #112]	@ 0x70
 800f42a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f42c:	2200      	movs	r2, #0
 800f42e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	781a      	ldrb	r2, [r3, #0]
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	0011      	movs	r1, r2
 800f438:	0018      	movs	r0, r3
 800f43a:	f007 fb61 	bl	8016b00 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800f43e:	1dbb      	adds	r3, r7, #6
 800f440:	881a      	ldrh	r2, [r3, #0]
 800f442:	2380      	movs	r3, #128	@ 0x80
 800f444:	01db      	lsls	r3, r3, #7
 800f446:	4013      	ands	r3, r2
 800f448:	d000      	beq.n	800f44c <HAL_PCD_EP_DB_Transmit+0x57c>
 800f44a:	e11e      	b.n	800f68a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	001a      	movs	r2, r3
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	781b      	ldrb	r3, [r3, #0]
 800f456:	009b      	lsls	r3, r3, #2
 800f458:	18d3      	adds	r3, r2, r3
 800f45a:	881b      	ldrh	r3, [r3, #0]
 800f45c:	b29a      	uxth	r2, r3
 800f45e:	2088      	movs	r0, #136	@ 0x88
 800f460:	183b      	adds	r3, r7, r0
 800f462:	4967      	ldr	r1, [pc, #412]	@ (800f600 <HAL_PCD_EP_DB_Transmit+0x730>)
 800f464:	400a      	ands	r2, r1
 800f466:	801a      	strh	r2, [r3, #0]
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	001a      	movs	r2, r3
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	781b      	ldrb	r3, [r3, #0]
 800f472:	009b      	lsls	r3, r3, #2
 800f474:	18d3      	adds	r3, r2, r3
 800f476:	183a      	adds	r2, r7, r0
 800f478:	8812      	ldrh	r2, [r2, #0]
 800f47a:	4962      	ldr	r1, [pc, #392]	@ (800f604 <HAL_PCD_EP_DB_Transmit+0x734>)
 800f47c:	430a      	orrs	r2, r1
 800f47e:	b292      	uxth	r2, r2
 800f480:	801a      	strh	r2, [r3, #0]
 800f482:	e102      	b.n	800f68a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800f484:	1dbb      	adds	r3, r7, #6
 800f486:	881a      	ldrh	r2, [r3, #0]
 800f488:	2380      	movs	r3, #128	@ 0x80
 800f48a:	01db      	lsls	r3, r3, #7
 800f48c:	4013      	ands	r3, r2
 800f48e:	d11a      	bne.n	800f4c6 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	001a      	movs	r2, r3
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	781b      	ldrb	r3, [r3, #0]
 800f49a:	009b      	lsls	r3, r3, #2
 800f49c:	18d3      	adds	r3, r2, r3
 800f49e:	881b      	ldrh	r3, [r3, #0]
 800f4a0:	b29a      	uxth	r2, r3
 800f4a2:	204e      	movs	r0, #78	@ 0x4e
 800f4a4:	183b      	adds	r3, r7, r0
 800f4a6:	4956      	ldr	r1, [pc, #344]	@ (800f600 <HAL_PCD_EP_DB_Transmit+0x730>)
 800f4a8:	400a      	ands	r2, r1
 800f4aa:	801a      	strh	r2, [r3, #0]
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	001a      	movs	r2, r3
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	781b      	ldrb	r3, [r3, #0]
 800f4b6:	009b      	lsls	r3, r3, #2
 800f4b8:	18d3      	adds	r3, r2, r3
 800f4ba:	183a      	adds	r2, r7, r0
 800f4bc:	8812      	ldrh	r2, [r2, #0]
 800f4be:	4951      	ldr	r1, [pc, #324]	@ (800f604 <HAL_PCD_EP_DB_Transmit+0x734>)
 800f4c0:	430a      	orrs	r2, r1
 800f4c2:	b292      	uxth	r2, r2
 800f4c4:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	2224      	movs	r2, #36	@ 0x24
 800f4ca:	5c9b      	ldrb	r3, [r3, r2]
 800f4cc:	2b01      	cmp	r3, #1
 800f4ce:	d000      	beq.n	800f4d2 <HAL_PCD_EP_DB_Transmit+0x602>
 800f4d0:	e0db      	b.n	800f68a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	695a      	ldr	r2, [r3, #20]
 800f4d6:	2186      	movs	r1, #134	@ 0x86
 800f4d8:	187b      	adds	r3, r7, r1
 800f4da:	881b      	ldrh	r3, [r3, #0]
 800f4dc:	18d2      	adds	r2, r2, r3
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	69da      	ldr	r2, [r3, #28]
 800f4e6:	187b      	adds	r3, r7, r1
 800f4e8:	881b      	ldrh	r3, [r3, #0]
 800f4ea:	18d2      	adds	r2, r2, r3
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	6a1a      	ldr	r2, [r3, #32]
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	691b      	ldr	r3, [r3, #16]
 800f4f8:	429a      	cmp	r2, r3
 800f4fa:	d30c      	bcc.n	800f516 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	691b      	ldr	r3, [r3, #16]
 800f500:	218c      	movs	r1, #140	@ 0x8c
 800f502:	187a      	adds	r2, r7, r1
 800f504:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	6a1a      	ldr	r2, [r3, #32]
 800f50a:	187b      	adds	r3, r7, r1
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	1ad2      	subs	r2, r2, r3
 800f510:	68bb      	ldr	r3, [r7, #8]
 800f512:	621a      	str	r2, [r3, #32]
 800f514:	e01a      	b.n	800f54c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	6a1b      	ldr	r3, [r3, #32]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d10a      	bne.n	800f534 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 800f51e:	2386      	movs	r3, #134	@ 0x86
 800f520:	18fb      	adds	r3, r7, r3
 800f522:	881b      	ldrh	r3, [r3, #0]
 800f524:	228c      	movs	r2, #140	@ 0x8c
 800f526:	18ba      	adds	r2, r7, r2
 800f528:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	2224      	movs	r2, #36	@ 0x24
 800f52e:	2100      	movs	r1, #0
 800f530:	5499      	strb	r1, [r3, r2]
 800f532:	e00b      	b.n	800f54c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	6a1b      	ldr	r3, [r3, #32]
 800f538:	228c      	movs	r2, #140	@ 0x8c
 800f53a:	18ba      	adds	r2, r7, r2
 800f53c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	2200      	movs	r2, #0
 800f542:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	2224      	movs	r2, #36	@ 0x24
 800f548:	2100      	movs	r1, #0
 800f54a:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	657b      	str	r3, [r7, #84]	@ 0x54
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	785b      	ldrb	r3, [r3, #1]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d000      	beq.n	800f55c <HAL_PCD_EP_DB_Transmit+0x68c>
 800f55a:	e06e      	b.n	800f63a <HAL_PCD_EP_DB_Transmit+0x76a>
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	2250      	movs	r2, #80	@ 0x50
 800f568:	5a9b      	ldrh	r3, [r3, r2]
 800f56a:	b29b      	uxth	r3, r3
 800f56c:	001a      	movs	r2, r3
 800f56e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f570:	189b      	adds	r3, r3, r2
 800f572:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	781b      	ldrb	r3, [r3, #0]
 800f578:	00da      	lsls	r2, r3, #3
 800f57a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f57c:	18d3      	adds	r3, r2, r3
 800f57e:	4a1e      	ldr	r2, [pc, #120]	@ (800f5f8 <HAL_PCD_EP_DB_Transmit+0x728>)
 800f580:	4694      	mov	ip, r2
 800f582:	4463      	add	r3, ip
 800f584:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f586:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f588:	881b      	ldrh	r3, [r3, #0]
 800f58a:	b29b      	uxth	r3, r3
 800f58c:	059b      	lsls	r3, r3, #22
 800f58e:	0d9b      	lsrs	r3, r3, #22
 800f590:	b29a      	uxth	r2, r3
 800f592:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f594:	801a      	strh	r2, [r3, #0]
 800f596:	228c      	movs	r2, #140	@ 0x8c
 800f598:	18bb      	adds	r3, r7, r2
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	2b3e      	cmp	r3, #62	@ 0x3e
 800f59e:	d91a      	bls.n	800f5d6 <HAL_PCD_EP_DB_Transmit+0x706>
 800f5a0:	18bb      	adds	r3, r7, r2
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	095b      	lsrs	r3, r3, #5
 800f5a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f5a8:	18bb      	adds	r3, r7, r2
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	221f      	movs	r2, #31
 800f5ae:	4013      	ands	r3, r2
 800f5b0:	d102      	bne.n	800f5b8 <HAL_PCD_EP_DB_Transmit+0x6e8>
 800f5b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f5b4:	3b01      	subs	r3, #1
 800f5b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f5b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f5ba:	881b      	ldrh	r3, [r3, #0]
 800f5bc:	b29a      	uxth	r2, r3
 800f5be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f5c0:	b29b      	uxth	r3, r3
 800f5c2:	029b      	lsls	r3, r3, #10
 800f5c4:	b29b      	uxth	r3, r3
 800f5c6:	4313      	orrs	r3, r2
 800f5c8:	b29b      	uxth	r3, r3
 800f5ca:	4a0c      	ldr	r2, [pc, #48]	@ (800f5fc <HAL_PCD_EP_DB_Transmit+0x72c>)
 800f5cc:	4313      	orrs	r3, r2
 800f5ce:	b29a      	uxth	r2, r3
 800f5d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f5d2:	801a      	strh	r2, [r3, #0]
 800f5d4:	e04d      	b.n	800f672 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800f5d6:	238c      	movs	r3, #140	@ 0x8c
 800f5d8:	18fb      	adds	r3, r7, r3
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d113      	bne.n	800f608 <HAL_PCD_EP_DB_Transmit+0x738>
 800f5e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f5e2:	881b      	ldrh	r3, [r3, #0]
 800f5e4:	b29b      	uxth	r3, r3
 800f5e6:	4a05      	ldr	r2, [pc, #20]	@ (800f5fc <HAL_PCD_EP_DB_Transmit+0x72c>)
 800f5e8:	4313      	orrs	r3, r2
 800f5ea:	b29a      	uxth	r2, r3
 800f5ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f5ee:	801a      	strh	r2, [r3, #0]
 800f5f0:	e03f      	b.n	800f672 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800f5f2:	46c0      	nop			@ (mov r8, r8)
 800f5f4:	00000402 	.word	0x00000402
 800f5f8:	00000406 	.word	0x00000406
 800f5fc:	ffff8000 	.word	0xffff8000
 800f600:	ffff8f8f 	.word	0xffff8f8f
 800f604:	ffffc080 	.word	0xffffc080
 800f608:	228c      	movs	r2, #140	@ 0x8c
 800f60a:	18bb      	adds	r3, r7, r2
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	085b      	lsrs	r3, r3, #1
 800f610:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f612:	18bb      	adds	r3, r7, r2
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	2201      	movs	r2, #1
 800f618:	4013      	ands	r3, r2
 800f61a:	d002      	beq.n	800f622 <HAL_PCD_EP_DB_Transmit+0x752>
 800f61c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f61e:	3301      	adds	r3, #1
 800f620:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f622:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f624:	881b      	ldrh	r3, [r3, #0]
 800f626:	b29a      	uxth	r2, r3
 800f628:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f62a:	b29b      	uxth	r3, r3
 800f62c:	029b      	lsls	r3, r3, #10
 800f62e:	b29b      	uxth	r3, r3
 800f630:	4313      	orrs	r3, r2
 800f632:	b29a      	uxth	r2, r3
 800f634:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f636:	801a      	strh	r2, [r3, #0]
 800f638:	e01b      	b.n	800f672 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	785b      	ldrb	r3, [r3, #1]
 800f63e:	2b01      	cmp	r3, #1
 800f640:	d117      	bne.n	800f672 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	2250      	movs	r2, #80	@ 0x50
 800f648:	5a9b      	ldrh	r3, [r3, r2]
 800f64a:	b29b      	uxth	r3, r3
 800f64c:	001a      	movs	r2, r3
 800f64e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f650:	189b      	adds	r3, r3, r2
 800f652:	657b      	str	r3, [r7, #84]	@ 0x54
 800f654:	68bb      	ldr	r3, [r7, #8]
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	00da      	lsls	r2, r3, #3
 800f65a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f65c:	18d3      	adds	r3, r2, r3
 800f65e:	4a21      	ldr	r2, [pc, #132]	@ (800f6e4 <HAL_PCD_EP_DB_Transmit+0x814>)
 800f660:	4694      	mov	ip, r2
 800f662:	4463      	add	r3, ip
 800f664:	653b      	str	r3, [r7, #80]	@ 0x50
 800f666:	238c      	movs	r3, #140	@ 0x8c
 800f668:	18fb      	adds	r3, r7, r3
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	b29a      	uxth	r2, r3
 800f66e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f670:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	6818      	ldr	r0, [r3, #0]
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	6959      	ldr	r1, [r3, #20]
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	895a      	ldrh	r2, [r3, #10]
 800f67e:	238c      	movs	r3, #140	@ 0x8c
 800f680:	18fb      	adds	r3, r7, r3
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	b29b      	uxth	r3, r3
 800f686:	f005 f9ad 	bl	80149e4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	001a      	movs	r2, r3
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	009b      	lsls	r3, r3, #2
 800f696:	18d3      	adds	r3, r2, r3
 800f698:	881b      	ldrh	r3, [r3, #0]
 800f69a:	b29a      	uxth	r2, r3
 800f69c:	2014      	movs	r0, #20
 800f69e:	183b      	adds	r3, r7, r0
 800f6a0:	4911      	ldr	r1, [pc, #68]	@ (800f6e8 <HAL_PCD_EP_DB_Transmit+0x818>)
 800f6a2:	400a      	ands	r2, r1
 800f6a4:	801a      	strh	r2, [r3, #0]
 800f6a6:	183b      	adds	r3, r7, r0
 800f6a8:	183a      	adds	r2, r7, r0
 800f6aa:	8812      	ldrh	r2, [r2, #0]
 800f6ac:	2110      	movs	r1, #16
 800f6ae:	404a      	eors	r2, r1
 800f6b0:	801a      	strh	r2, [r3, #0]
 800f6b2:	183b      	adds	r3, r7, r0
 800f6b4:	183a      	adds	r2, r7, r0
 800f6b6:	8812      	ldrh	r2, [r2, #0]
 800f6b8:	2120      	movs	r1, #32
 800f6ba:	404a      	eors	r2, r1
 800f6bc:	801a      	strh	r2, [r3, #0]
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	001a      	movs	r2, r3
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	781b      	ldrb	r3, [r3, #0]
 800f6c8:	009b      	lsls	r3, r3, #2
 800f6ca:	18d3      	adds	r3, r2, r3
 800f6cc:	183a      	adds	r2, r7, r0
 800f6ce:	8812      	ldrh	r2, [r2, #0]
 800f6d0:	4906      	ldr	r1, [pc, #24]	@ (800f6ec <HAL_PCD_EP_DB_Transmit+0x81c>)
 800f6d2:	430a      	orrs	r2, r1
 800f6d4:	b292      	uxth	r2, r2
 800f6d6:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800f6d8:	2300      	movs	r3, #0
}
 800f6da:	0018      	movs	r0, r3
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	b024      	add	sp, #144	@ 0x90
 800f6e0:	bd80      	pop	{r7, pc}
 800f6e2:	46c0      	nop			@ (mov r8, r8)
 800f6e4:	00000406 	.word	0x00000406
 800f6e8:	ffff8fbf 	.word	0xffff8fbf
 800f6ec:	ffff8080 	.word	0xffff8080

0800f6f0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800f6f0:	b590      	push	{r4, r7, lr}
 800f6f2:	b087      	sub	sp, #28
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	60f8      	str	r0, [r7, #12]
 800f6f8:	0008      	movs	r0, r1
 800f6fa:	0011      	movs	r1, r2
 800f6fc:	607b      	str	r3, [r7, #4]
 800f6fe:	240a      	movs	r4, #10
 800f700:	193b      	adds	r3, r7, r4
 800f702:	1c02      	adds	r2, r0, #0
 800f704:	801a      	strh	r2, [r3, #0]
 800f706:	2308      	movs	r3, #8
 800f708:	18fb      	adds	r3, r7, r3
 800f70a:	1c0a      	adds	r2, r1, #0
 800f70c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800f70e:	0021      	movs	r1, r4
 800f710:	187b      	adds	r3, r7, r1
 800f712:	881b      	ldrh	r3, [r3, #0]
 800f714:	2280      	movs	r2, #128	@ 0x80
 800f716:	4013      	ands	r3, r2
 800f718:	b29b      	uxth	r3, r3
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d00c      	beq.n	800f738 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f71e:	187b      	adds	r3, r7, r1
 800f720:	881b      	ldrh	r3, [r3, #0]
 800f722:	2207      	movs	r2, #7
 800f724:	4013      	ands	r3, r2
 800f726:	1c5a      	adds	r2, r3, #1
 800f728:	0013      	movs	r3, r2
 800f72a:	009b      	lsls	r3, r3, #2
 800f72c:	189b      	adds	r3, r3, r2
 800f72e:	00db      	lsls	r3, r3, #3
 800f730:	68fa      	ldr	r2, [r7, #12]
 800f732:	18d3      	adds	r3, r2, r3
 800f734:	617b      	str	r3, [r7, #20]
 800f736:	e00b      	b.n	800f750 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800f738:	230a      	movs	r3, #10
 800f73a:	18fb      	adds	r3, r7, r3
 800f73c:	881a      	ldrh	r2, [r3, #0]
 800f73e:	0013      	movs	r3, r2
 800f740:	009b      	lsls	r3, r3, #2
 800f742:	189b      	adds	r3, r3, r2
 800f744:	00db      	lsls	r3, r3, #3
 800f746:	3369      	adds	r3, #105	@ 0x69
 800f748:	33ff      	adds	r3, #255	@ 0xff
 800f74a:	68fa      	ldr	r2, [r7, #12]
 800f74c:	18d3      	adds	r3, r2, r3
 800f74e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800f750:	2308      	movs	r3, #8
 800f752:	18fb      	adds	r3, r7, r3
 800f754:	881b      	ldrh	r3, [r3, #0]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d107      	bne.n	800f76a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800f75a:	697b      	ldr	r3, [r7, #20]
 800f75c:	2200      	movs	r2, #0
 800f75e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	b29a      	uxth	r2, r3
 800f764:	697b      	ldr	r3, [r7, #20]
 800f766:	80da      	strh	r2, [r3, #6]
 800f768:	e00b      	b.n	800f782 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	2201      	movs	r2, #1
 800f76e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	b29a      	uxth	r2, r3
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	0c1b      	lsrs	r3, r3, #16
 800f77c:	b29a      	uxth	r2, r3
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800f782:	2300      	movs	r3, #0
}
 800f784:	0018      	movs	r0, r3
 800f786:	46bd      	mov	sp, r7
 800f788:	b007      	add	sp, #28
 800f78a:	bd90      	pop	{r4, r7, pc}

0800f78c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	b084      	sub	sp, #16
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800f79a:	687a      	ldr	r2, [r7, #4]
 800f79c:	23ba      	movs	r3, #186	@ 0xba
 800f79e:	009b      	lsls	r3, r3, #2
 800f7a0:	2101      	movs	r1, #1
 800f7a2:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800f7a4:	687a      	ldr	r2, [r7, #4]
 800f7a6:	23b8      	movs	r3, #184	@ 0xb8
 800f7a8:	009b      	lsls	r3, r3, #2
 800f7aa:	2100      	movs	r1, #0
 800f7ac:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	2254      	movs	r2, #84	@ 0x54
 800f7b2:	5a9b      	ldrh	r3, [r3, r2]
 800f7b4:	b29b      	uxth	r3, r3
 800f7b6:	2201      	movs	r2, #1
 800f7b8:	4313      	orrs	r3, r2
 800f7ba:	b299      	uxth	r1, r3
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	2254      	movs	r2, #84	@ 0x54
 800f7c0:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	2254      	movs	r2, #84	@ 0x54
 800f7c6:	5a9b      	ldrh	r3, [r3, r2]
 800f7c8:	b29b      	uxth	r3, r3
 800f7ca:	2202      	movs	r2, #2
 800f7cc:	4313      	orrs	r3, r2
 800f7ce:	b299      	uxth	r1, r3
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	2254      	movs	r2, #84	@ 0x54
 800f7d4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800f7d6:	2300      	movs	r3, #0
}
 800f7d8:	0018      	movs	r0, r3
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	b004      	add	sp, #16
 800f7de:	bd80      	pop	{r7, pc}

0800f7e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b082      	sub	sp, #8
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
 800f7e8:	000a      	movs	r2, r1
 800f7ea:	1cfb      	adds	r3, r7, #3
 800f7ec:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800f7ee:	46c0      	nop			@ (mov r8, r8)
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	b002      	add	sp, #8
 800f7f4:	bd80      	pop	{r7, pc}
	...

0800f7f8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800f7fc:	4b04      	ldr	r3, [pc, #16]	@ (800f810 <HAL_PWR_EnableBkUpAccess+0x18>)
 800f7fe:	681a      	ldr	r2, [r3, #0]
 800f800:	4b03      	ldr	r3, [pc, #12]	@ (800f810 <HAL_PWR_EnableBkUpAccess+0x18>)
 800f802:	2180      	movs	r1, #128	@ 0x80
 800f804:	0049      	lsls	r1, r1, #1
 800f806:	430a      	orrs	r2, r1
 800f808:	601a      	str	r2, [r3, #0]
}
 800f80a:	46c0      	nop			@ (mov r8, r8)
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}
 800f810:	40007000 	.word	0x40007000

0800f814 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f814:	b5b0      	push	{r4, r5, r7, lr}
 800f816:	b08a      	sub	sp, #40	@ 0x28
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d102      	bne.n	800f828 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800f822:	2301      	movs	r3, #1
 800f824:	f000 fbbf 	bl	800ffa6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f828:	4bc9      	ldr	r3, [pc, #804]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800f82a:	68db      	ldr	r3, [r3, #12]
 800f82c:	220c      	movs	r2, #12
 800f82e:	4013      	ands	r3, r2
 800f830:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f832:	4bc7      	ldr	r3, [pc, #796]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800f834:	68da      	ldr	r2, [r3, #12]
 800f836:	2380      	movs	r3, #128	@ 0x80
 800f838:	025b      	lsls	r3, r3, #9
 800f83a:	4013      	ands	r3, r2
 800f83c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	2201      	movs	r2, #1
 800f844:	4013      	ands	r3, r2
 800f846:	d100      	bne.n	800f84a <HAL_RCC_OscConfig+0x36>
 800f848:	e07e      	b.n	800f948 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800f84a:	69fb      	ldr	r3, [r7, #28]
 800f84c:	2b08      	cmp	r3, #8
 800f84e:	d007      	beq.n	800f860 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800f850:	69fb      	ldr	r3, [r7, #28]
 800f852:	2b0c      	cmp	r3, #12
 800f854:	d112      	bne.n	800f87c <HAL_RCC_OscConfig+0x68>
 800f856:	69ba      	ldr	r2, [r7, #24]
 800f858:	2380      	movs	r3, #128	@ 0x80
 800f85a:	025b      	lsls	r3, r3, #9
 800f85c:	429a      	cmp	r2, r3
 800f85e:	d10d      	bne.n	800f87c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f860:	4bbb      	ldr	r3, [pc, #748]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800f862:	681a      	ldr	r2, [r3, #0]
 800f864:	2380      	movs	r3, #128	@ 0x80
 800f866:	029b      	lsls	r3, r3, #10
 800f868:	4013      	ands	r3, r2
 800f86a:	d100      	bne.n	800f86e <HAL_RCC_OscConfig+0x5a>
 800f86c:	e06b      	b.n	800f946 <HAL_RCC_OscConfig+0x132>
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	685b      	ldr	r3, [r3, #4]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d167      	bne.n	800f946 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800f876:	2301      	movs	r3, #1
 800f878:	f000 fb95 	bl	800ffa6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	685a      	ldr	r2, [r3, #4]
 800f880:	2380      	movs	r3, #128	@ 0x80
 800f882:	025b      	lsls	r3, r3, #9
 800f884:	429a      	cmp	r2, r3
 800f886:	d107      	bne.n	800f898 <HAL_RCC_OscConfig+0x84>
 800f888:	4bb1      	ldr	r3, [pc, #708]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800f88a:	681a      	ldr	r2, [r3, #0]
 800f88c:	4bb0      	ldr	r3, [pc, #704]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800f88e:	2180      	movs	r1, #128	@ 0x80
 800f890:	0249      	lsls	r1, r1, #9
 800f892:	430a      	orrs	r2, r1
 800f894:	601a      	str	r2, [r3, #0]
 800f896:	e027      	b.n	800f8e8 <HAL_RCC_OscConfig+0xd4>
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	685a      	ldr	r2, [r3, #4]
 800f89c:	23a0      	movs	r3, #160	@ 0xa0
 800f89e:	02db      	lsls	r3, r3, #11
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	d10e      	bne.n	800f8c2 <HAL_RCC_OscConfig+0xae>
 800f8a4:	4baa      	ldr	r3, [pc, #680]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800f8a6:	681a      	ldr	r2, [r3, #0]
 800f8a8:	4ba9      	ldr	r3, [pc, #676]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800f8aa:	2180      	movs	r1, #128	@ 0x80
 800f8ac:	02c9      	lsls	r1, r1, #11
 800f8ae:	430a      	orrs	r2, r1
 800f8b0:	601a      	str	r2, [r3, #0]
 800f8b2:	4ba7      	ldr	r3, [pc, #668]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800f8b4:	681a      	ldr	r2, [r3, #0]
 800f8b6:	4ba6      	ldr	r3, [pc, #664]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800f8b8:	2180      	movs	r1, #128	@ 0x80
 800f8ba:	0249      	lsls	r1, r1, #9
 800f8bc:	430a      	orrs	r2, r1
 800f8be:	601a      	str	r2, [r3, #0]
 800f8c0:	e012      	b.n	800f8e8 <HAL_RCC_OscConfig+0xd4>
 800f8c2:	4ba3      	ldr	r3, [pc, #652]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800f8c4:	681a      	ldr	r2, [r3, #0]
 800f8c6:	4ba2      	ldr	r3, [pc, #648]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800f8c8:	49a2      	ldr	r1, [pc, #648]	@ (800fb54 <HAL_RCC_OscConfig+0x340>)
 800f8ca:	400a      	ands	r2, r1
 800f8cc:	601a      	str	r2, [r3, #0]
 800f8ce:	4ba0      	ldr	r3, [pc, #640]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800f8d0:	681a      	ldr	r2, [r3, #0]
 800f8d2:	2380      	movs	r3, #128	@ 0x80
 800f8d4:	025b      	lsls	r3, r3, #9
 800f8d6:	4013      	ands	r3, r2
 800f8d8:	60fb      	str	r3, [r7, #12]
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	4b9c      	ldr	r3, [pc, #624]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800f8de:	681a      	ldr	r2, [r3, #0]
 800f8e0:	4b9b      	ldr	r3, [pc, #620]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800f8e2:	499d      	ldr	r1, [pc, #628]	@ (800fb58 <HAL_RCC_OscConfig+0x344>)
 800f8e4:	400a      	ands	r2, r1
 800f8e6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	685b      	ldr	r3, [r3, #4]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d015      	beq.n	800f91c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f8f0:	f7fa fa16 	bl	8009d20 <HAL_GetTick>
 800f8f4:	0003      	movs	r3, r0
 800f8f6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f8f8:	e009      	b.n	800f90e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f8fa:	f7fa fa11 	bl	8009d20 <HAL_GetTick>
 800f8fe:	0002      	movs	r2, r0
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	1ad3      	subs	r3, r2, r3
 800f904:	2b64      	cmp	r3, #100	@ 0x64
 800f906:	d902      	bls.n	800f90e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800f908:	2303      	movs	r3, #3
 800f90a:	f000 fb4c 	bl	800ffa6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f90e:	4b90      	ldr	r3, [pc, #576]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800f910:	681a      	ldr	r2, [r3, #0]
 800f912:	2380      	movs	r3, #128	@ 0x80
 800f914:	029b      	lsls	r3, r3, #10
 800f916:	4013      	ands	r3, r2
 800f918:	d0ef      	beq.n	800f8fa <HAL_RCC_OscConfig+0xe6>
 800f91a:	e015      	b.n	800f948 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f91c:	f7fa fa00 	bl	8009d20 <HAL_GetTick>
 800f920:	0003      	movs	r3, r0
 800f922:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f924:	e008      	b.n	800f938 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800f926:	f7fa f9fb 	bl	8009d20 <HAL_GetTick>
 800f92a:	0002      	movs	r2, r0
 800f92c:	697b      	ldr	r3, [r7, #20]
 800f92e:	1ad3      	subs	r3, r2, r3
 800f930:	2b64      	cmp	r3, #100	@ 0x64
 800f932:	d901      	bls.n	800f938 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800f934:	2303      	movs	r3, #3
 800f936:	e336      	b.n	800ffa6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f938:	4b85      	ldr	r3, [pc, #532]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800f93a:	681a      	ldr	r2, [r3, #0]
 800f93c:	2380      	movs	r3, #128	@ 0x80
 800f93e:	029b      	lsls	r3, r3, #10
 800f940:	4013      	ands	r3, r2
 800f942:	d1f0      	bne.n	800f926 <HAL_RCC_OscConfig+0x112>
 800f944:	e000      	b.n	800f948 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f946:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	2202      	movs	r2, #2
 800f94e:	4013      	ands	r3, r2
 800f950:	d100      	bne.n	800f954 <HAL_RCC_OscConfig+0x140>
 800f952:	e099      	b.n	800fa88 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	68db      	ldr	r3, [r3, #12]
 800f958:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800f95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f95c:	2220      	movs	r2, #32
 800f95e:	4013      	ands	r3, r2
 800f960:	d009      	beq.n	800f976 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800f962:	4b7b      	ldr	r3, [pc, #492]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800f964:	681a      	ldr	r2, [r3, #0]
 800f966:	4b7a      	ldr	r3, [pc, #488]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800f968:	2120      	movs	r1, #32
 800f96a:	430a      	orrs	r2, r1
 800f96c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800f96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f970:	2220      	movs	r2, #32
 800f972:	4393      	bics	r3, r2
 800f974:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800f976:	69fb      	ldr	r3, [r7, #28]
 800f978:	2b04      	cmp	r3, #4
 800f97a:	d005      	beq.n	800f988 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800f97c:	69fb      	ldr	r3, [r7, #28]
 800f97e:	2b0c      	cmp	r3, #12
 800f980:	d13e      	bne.n	800fa00 <HAL_RCC_OscConfig+0x1ec>
 800f982:	69bb      	ldr	r3, [r7, #24]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d13b      	bne.n	800fa00 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800f988:	4b71      	ldr	r3, [pc, #452]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	2204      	movs	r2, #4
 800f98e:	4013      	ands	r3, r2
 800f990:	d004      	beq.n	800f99c <HAL_RCC_OscConfig+0x188>
 800f992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f994:	2b00      	cmp	r3, #0
 800f996:	d101      	bne.n	800f99c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800f998:	2301      	movs	r3, #1
 800f99a:	e304      	b.n	800ffa6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f99c:	4b6c      	ldr	r3, [pc, #432]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800f99e:	685b      	ldr	r3, [r3, #4]
 800f9a0:	4a6e      	ldr	r2, [pc, #440]	@ (800fb5c <HAL_RCC_OscConfig+0x348>)
 800f9a2:	4013      	ands	r3, r2
 800f9a4:	0019      	movs	r1, r3
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	691b      	ldr	r3, [r3, #16]
 800f9aa:	021a      	lsls	r2, r3, #8
 800f9ac:	4b68      	ldr	r3, [pc, #416]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800f9ae:	430a      	orrs	r2, r1
 800f9b0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800f9b2:	4b67      	ldr	r3, [pc, #412]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	2209      	movs	r2, #9
 800f9b8:	4393      	bics	r3, r2
 800f9ba:	0019      	movs	r1, r3
 800f9bc:	4b64      	ldr	r3, [pc, #400]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800f9be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f9c0:	430a      	orrs	r2, r1
 800f9c2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f9c4:	f000 fc42 	bl	801024c <HAL_RCC_GetSysClockFreq>
 800f9c8:	0001      	movs	r1, r0
 800f9ca:	4b61      	ldr	r3, [pc, #388]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800f9cc:	68db      	ldr	r3, [r3, #12]
 800f9ce:	091b      	lsrs	r3, r3, #4
 800f9d0:	220f      	movs	r2, #15
 800f9d2:	4013      	ands	r3, r2
 800f9d4:	4a62      	ldr	r2, [pc, #392]	@ (800fb60 <HAL_RCC_OscConfig+0x34c>)
 800f9d6:	5cd3      	ldrb	r3, [r2, r3]
 800f9d8:	000a      	movs	r2, r1
 800f9da:	40da      	lsrs	r2, r3
 800f9dc:	4b61      	ldr	r3, [pc, #388]	@ (800fb64 <HAL_RCC_OscConfig+0x350>)
 800f9de:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800f9e0:	4b61      	ldr	r3, [pc, #388]	@ (800fb68 <HAL_RCC_OscConfig+0x354>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	2513      	movs	r5, #19
 800f9e6:	197c      	adds	r4, r7, r5
 800f9e8:	0018      	movs	r0, r3
 800f9ea:	f7fa f953 	bl	8009c94 <HAL_InitTick>
 800f9ee:	0003      	movs	r3, r0
 800f9f0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800f9f2:	197b      	adds	r3, r7, r5
 800f9f4:	781b      	ldrb	r3, [r3, #0]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d046      	beq.n	800fa88 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800f9fa:	197b      	adds	r3, r7, r5
 800f9fc:	781b      	ldrb	r3, [r3, #0]
 800f9fe:	e2d2      	b.n	800ffa6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800fa00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d027      	beq.n	800fa56 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800fa06:	4b52      	ldr	r3, [pc, #328]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	2209      	movs	r2, #9
 800fa0c:	4393      	bics	r3, r2
 800fa0e:	0019      	movs	r1, r3
 800fa10:	4b4f      	ldr	r3, [pc, #316]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800fa12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa14:	430a      	orrs	r2, r1
 800fa16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fa18:	f7fa f982 	bl	8009d20 <HAL_GetTick>
 800fa1c:	0003      	movs	r3, r0
 800fa1e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fa20:	e008      	b.n	800fa34 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fa22:	f7fa f97d 	bl	8009d20 <HAL_GetTick>
 800fa26:	0002      	movs	r2, r0
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	1ad3      	subs	r3, r2, r3
 800fa2c:	2b02      	cmp	r3, #2
 800fa2e:	d901      	bls.n	800fa34 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800fa30:	2303      	movs	r3, #3
 800fa32:	e2b8      	b.n	800ffa6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fa34:	4b46      	ldr	r3, [pc, #280]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	2204      	movs	r2, #4
 800fa3a:	4013      	ands	r3, r2
 800fa3c:	d0f1      	beq.n	800fa22 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fa3e:	4b44      	ldr	r3, [pc, #272]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800fa40:	685b      	ldr	r3, [r3, #4]
 800fa42:	4a46      	ldr	r2, [pc, #280]	@ (800fb5c <HAL_RCC_OscConfig+0x348>)
 800fa44:	4013      	ands	r3, r2
 800fa46:	0019      	movs	r1, r3
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	691b      	ldr	r3, [r3, #16]
 800fa4c:	021a      	lsls	r2, r3, #8
 800fa4e:	4b40      	ldr	r3, [pc, #256]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800fa50:	430a      	orrs	r2, r1
 800fa52:	605a      	str	r2, [r3, #4]
 800fa54:	e018      	b.n	800fa88 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800fa56:	4b3e      	ldr	r3, [pc, #248]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800fa58:	681a      	ldr	r2, [r3, #0]
 800fa5a:	4b3d      	ldr	r3, [pc, #244]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800fa5c:	2101      	movs	r1, #1
 800fa5e:	438a      	bics	r2, r1
 800fa60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fa62:	f7fa f95d 	bl	8009d20 <HAL_GetTick>
 800fa66:	0003      	movs	r3, r0
 800fa68:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800fa6a:	e008      	b.n	800fa7e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800fa6c:	f7fa f958 	bl	8009d20 <HAL_GetTick>
 800fa70:	0002      	movs	r2, r0
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	1ad3      	subs	r3, r2, r3
 800fa76:	2b02      	cmp	r3, #2
 800fa78:	d901      	bls.n	800fa7e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800fa7a:	2303      	movs	r3, #3
 800fa7c:	e293      	b.n	800ffa6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800fa7e:	4b34      	ldr	r3, [pc, #208]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	2204      	movs	r2, #4
 800fa84:	4013      	ands	r3, r2
 800fa86:	d1f1      	bne.n	800fa6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	2210      	movs	r2, #16
 800fa8e:	4013      	ands	r3, r2
 800fa90:	d100      	bne.n	800fa94 <HAL_RCC_OscConfig+0x280>
 800fa92:	e0a2      	b.n	800fbda <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800fa94:	69fb      	ldr	r3, [r7, #28]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d140      	bne.n	800fb1c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800fa9a:	4b2d      	ldr	r3, [pc, #180]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800fa9c:	681a      	ldr	r2, [r3, #0]
 800fa9e:	2380      	movs	r3, #128	@ 0x80
 800faa0:	009b      	lsls	r3, r3, #2
 800faa2:	4013      	ands	r3, r2
 800faa4:	d005      	beq.n	800fab2 <HAL_RCC_OscConfig+0x29e>
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	69db      	ldr	r3, [r3, #28]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d101      	bne.n	800fab2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800faae:	2301      	movs	r3, #1
 800fab0:	e279      	b.n	800ffa6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fab2:	4b27      	ldr	r3, [pc, #156]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800fab4:	685b      	ldr	r3, [r3, #4]
 800fab6:	4a2d      	ldr	r2, [pc, #180]	@ (800fb6c <HAL_RCC_OscConfig+0x358>)
 800fab8:	4013      	ands	r3, r2
 800faba:	0019      	movs	r1, r3
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fac0:	4b23      	ldr	r3, [pc, #140]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800fac2:	430a      	orrs	r2, r1
 800fac4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fac6:	4b22      	ldr	r3, [pc, #136]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800fac8:	685b      	ldr	r3, [r3, #4]
 800faca:	021b      	lsls	r3, r3, #8
 800facc:	0a19      	lsrs	r1, r3, #8
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6a1b      	ldr	r3, [r3, #32]
 800fad2:	061a      	lsls	r2, r3, #24
 800fad4:	4b1e      	ldr	r3, [pc, #120]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800fad6:	430a      	orrs	r2, r1
 800fad8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fade:	0b5b      	lsrs	r3, r3, #13
 800fae0:	3301      	adds	r3, #1
 800fae2:	2280      	movs	r2, #128	@ 0x80
 800fae4:	0212      	lsls	r2, r2, #8
 800fae6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800fae8:	4b19      	ldr	r3, [pc, #100]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800faea:	68db      	ldr	r3, [r3, #12]
 800faec:	091b      	lsrs	r3, r3, #4
 800faee:	210f      	movs	r1, #15
 800faf0:	400b      	ands	r3, r1
 800faf2:	491b      	ldr	r1, [pc, #108]	@ (800fb60 <HAL_RCC_OscConfig+0x34c>)
 800faf4:	5ccb      	ldrb	r3, [r1, r3]
 800faf6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800faf8:	4b1a      	ldr	r3, [pc, #104]	@ (800fb64 <HAL_RCC_OscConfig+0x350>)
 800fafa:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800fafc:	4b1a      	ldr	r3, [pc, #104]	@ (800fb68 <HAL_RCC_OscConfig+0x354>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	2513      	movs	r5, #19
 800fb02:	197c      	adds	r4, r7, r5
 800fb04:	0018      	movs	r0, r3
 800fb06:	f7fa f8c5 	bl	8009c94 <HAL_InitTick>
 800fb0a:	0003      	movs	r3, r0
 800fb0c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800fb0e:	197b      	adds	r3, r7, r5
 800fb10:	781b      	ldrb	r3, [r3, #0]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d061      	beq.n	800fbda <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800fb16:	197b      	adds	r3, r7, r5
 800fb18:	781b      	ldrb	r3, [r3, #0]
 800fb1a:	e244      	b.n	800ffa6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	69db      	ldr	r3, [r3, #28]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d040      	beq.n	800fba6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800fb24:	4b0a      	ldr	r3, [pc, #40]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800fb26:	681a      	ldr	r2, [r3, #0]
 800fb28:	4b09      	ldr	r3, [pc, #36]	@ (800fb50 <HAL_RCC_OscConfig+0x33c>)
 800fb2a:	2180      	movs	r1, #128	@ 0x80
 800fb2c:	0049      	lsls	r1, r1, #1
 800fb2e:	430a      	orrs	r2, r1
 800fb30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fb32:	f7fa f8f5 	bl	8009d20 <HAL_GetTick>
 800fb36:	0003      	movs	r3, r0
 800fb38:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800fb3a:	e019      	b.n	800fb70 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fb3c:	f7fa f8f0 	bl	8009d20 <HAL_GetTick>
 800fb40:	0002      	movs	r2, r0
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	1ad3      	subs	r3, r2, r3
 800fb46:	2b02      	cmp	r3, #2
 800fb48:	d912      	bls.n	800fb70 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800fb4a:	2303      	movs	r3, #3
 800fb4c:	e22b      	b.n	800ffa6 <HAL_RCC_OscConfig+0x792>
 800fb4e:	46c0      	nop			@ (mov r8, r8)
 800fb50:	40021000 	.word	0x40021000
 800fb54:	fffeffff 	.word	0xfffeffff
 800fb58:	fffbffff 	.word	0xfffbffff
 800fb5c:	ffffe0ff 	.word	0xffffe0ff
 800fb60:	0801b810 	.word	0x0801b810
 800fb64:	20000094 	.word	0x20000094
 800fb68:	200000a8 	.word	0x200000a8
 800fb6c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800fb70:	4bca      	ldr	r3, [pc, #808]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fb72:	681a      	ldr	r2, [r3, #0]
 800fb74:	2380      	movs	r3, #128	@ 0x80
 800fb76:	009b      	lsls	r3, r3, #2
 800fb78:	4013      	ands	r3, r2
 800fb7a:	d0df      	beq.n	800fb3c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800fb7c:	4bc7      	ldr	r3, [pc, #796]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fb7e:	685b      	ldr	r3, [r3, #4]
 800fb80:	4ac7      	ldr	r2, [pc, #796]	@ (800fea0 <HAL_RCC_OscConfig+0x68c>)
 800fb82:	4013      	ands	r3, r2
 800fb84:	0019      	movs	r1, r3
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fb8a:	4bc4      	ldr	r3, [pc, #784]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fb8c:	430a      	orrs	r2, r1
 800fb8e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fb90:	4bc2      	ldr	r3, [pc, #776]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fb92:	685b      	ldr	r3, [r3, #4]
 800fb94:	021b      	lsls	r3, r3, #8
 800fb96:	0a19      	lsrs	r1, r3, #8
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	6a1b      	ldr	r3, [r3, #32]
 800fb9c:	061a      	lsls	r2, r3, #24
 800fb9e:	4bbf      	ldr	r3, [pc, #764]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fba0:	430a      	orrs	r2, r1
 800fba2:	605a      	str	r2, [r3, #4]
 800fba4:	e019      	b.n	800fbda <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800fba6:	4bbd      	ldr	r3, [pc, #756]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fba8:	681a      	ldr	r2, [r3, #0]
 800fbaa:	4bbc      	ldr	r3, [pc, #752]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fbac:	49bd      	ldr	r1, [pc, #756]	@ (800fea4 <HAL_RCC_OscConfig+0x690>)
 800fbae:	400a      	ands	r2, r1
 800fbb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fbb2:	f7fa f8b5 	bl	8009d20 <HAL_GetTick>
 800fbb6:	0003      	movs	r3, r0
 800fbb8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800fbba:	e008      	b.n	800fbce <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fbbc:	f7fa f8b0 	bl	8009d20 <HAL_GetTick>
 800fbc0:	0002      	movs	r2, r0
 800fbc2:	697b      	ldr	r3, [r7, #20]
 800fbc4:	1ad3      	subs	r3, r2, r3
 800fbc6:	2b02      	cmp	r3, #2
 800fbc8:	d901      	bls.n	800fbce <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800fbca:	2303      	movs	r3, #3
 800fbcc:	e1eb      	b.n	800ffa6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800fbce:	4bb3      	ldr	r3, [pc, #716]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fbd0:	681a      	ldr	r2, [r3, #0]
 800fbd2:	2380      	movs	r3, #128	@ 0x80
 800fbd4:	009b      	lsls	r3, r3, #2
 800fbd6:	4013      	ands	r3, r2
 800fbd8:	d1f0      	bne.n	800fbbc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	2208      	movs	r2, #8
 800fbe0:	4013      	ands	r3, r2
 800fbe2:	d036      	beq.n	800fc52 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	695b      	ldr	r3, [r3, #20]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d019      	beq.n	800fc20 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fbec:	4bab      	ldr	r3, [pc, #684]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fbee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fbf0:	4baa      	ldr	r3, [pc, #680]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fbf2:	2101      	movs	r1, #1
 800fbf4:	430a      	orrs	r2, r1
 800fbf6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fbf8:	f7fa f892 	bl	8009d20 <HAL_GetTick>
 800fbfc:	0003      	movs	r3, r0
 800fbfe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800fc00:	e008      	b.n	800fc14 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fc02:	f7fa f88d 	bl	8009d20 <HAL_GetTick>
 800fc06:	0002      	movs	r2, r0
 800fc08:	697b      	ldr	r3, [r7, #20]
 800fc0a:	1ad3      	subs	r3, r2, r3
 800fc0c:	2b02      	cmp	r3, #2
 800fc0e:	d901      	bls.n	800fc14 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800fc10:	2303      	movs	r3, #3
 800fc12:	e1c8      	b.n	800ffa6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800fc14:	4ba1      	ldr	r3, [pc, #644]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fc16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc18:	2202      	movs	r2, #2
 800fc1a:	4013      	ands	r3, r2
 800fc1c:	d0f1      	beq.n	800fc02 <HAL_RCC_OscConfig+0x3ee>
 800fc1e:	e018      	b.n	800fc52 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fc20:	4b9e      	ldr	r3, [pc, #632]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fc22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fc24:	4b9d      	ldr	r3, [pc, #628]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fc26:	2101      	movs	r1, #1
 800fc28:	438a      	bics	r2, r1
 800fc2a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fc2c:	f7fa f878 	bl	8009d20 <HAL_GetTick>
 800fc30:	0003      	movs	r3, r0
 800fc32:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800fc34:	e008      	b.n	800fc48 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800fc36:	f7fa f873 	bl	8009d20 <HAL_GetTick>
 800fc3a:	0002      	movs	r2, r0
 800fc3c:	697b      	ldr	r3, [r7, #20]
 800fc3e:	1ad3      	subs	r3, r2, r3
 800fc40:	2b02      	cmp	r3, #2
 800fc42:	d901      	bls.n	800fc48 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800fc44:	2303      	movs	r3, #3
 800fc46:	e1ae      	b.n	800ffa6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800fc48:	4b94      	ldr	r3, [pc, #592]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fc4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc4c:	2202      	movs	r2, #2
 800fc4e:	4013      	ands	r3, r2
 800fc50:	d1f1      	bne.n	800fc36 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	2204      	movs	r2, #4
 800fc58:	4013      	ands	r3, r2
 800fc5a:	d100      	bne.n	800fc5e <HAL_RCC_OscConfig+0x44a>
 800fc5c:	e0ae      	b.n	800fdbc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800fc5e:	2023      	movs	r0, #35	@ 0x23
 800fc60:	183b      	adds	r3, r7, r0
 800fc62:	2200      	movs	r2, #0
 800fc64:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800fc66:	4b8d      	ldr	r3, [pc, #564]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fc68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fc6a:	2380      	movs	r3, #128	@ 0x80
 800fc6c:	055b      	lsls	r3, r3, #21
 800fc6e:	4013      	ands	r3, r2
 800fc70:	d109      	bne.n	800fc86 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fc72:	4b8a      	ldr	r3, [pc, #552]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fc74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fc76:	4b89      	ldr	r3, [pc, #548]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fc78:	2180      	movs	r1, #128	@ 0x80
 800fc7a:	0549      	lsls	r1, r1, #21
 800fc7c:	430a      	orrs	r2, r1
 800fc7e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800fc80:	183b      	adds	r3, r7, r0
 800fc82:	2201      	movs	r2, #1
 800fc84:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fc86:	4b88      	ldr	r3, [pc, #544]	@ (800fea8 <HAL_RCC_OscConfig+0x694>)
 800fc88:	681a      	ldr	r2, [r3, #0]
 800fc8a:	2380      	movs	r3, #128	@ 0x80
 800fc8c:	005b      	lsls	r3, r3, #1
 800fc8e:	4013      	ands	r3, r2
 800fc90:	d11a      	bne.n	800fcc8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800fc92:	4b85      	ldr	r3, [pc, #532]	@ (800fea8 <HAL_RCC_OscConfig+0x694>)
 800fc94:	681a      	ldr	r2, [r3, #0]
 800fc96:	4b84      	ldr	r3, [pc, #528]	@ (800fea8 <HAL_RCC_OscConfig+0x694>)
 800fc98:	2180      	movs	r1, #128	@ 0x80
 800fc9a:	0049      	lsls	r1, r1, #1
 800fc9c:	430a      	orrs	r2, r1
 800fc9e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fca0:	f7fa f83e 	bl	8009d20 <HAL_GetTick>
 800fca4:	0003      	movs	r3, r0
 800fca6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fca8:	e008      	b.n	800fcbc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fcaa:	f7fa f839 	bl	8009d20 <HAL_GetTick>
 800fcae:	0002      	movs	r2, r0
 800fcb0:	697b      	ldr	r3, [r7, #20]
 800fcb2:	1ad3      	subs	r3, r2, r3
 800fcb4:	2b64      	cmp	r3, #100	@ 0x64
 800fcb6:	d901      	bls.n	800fcbc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800fcb8:	2303      	movs	r3, #3
 800fcba:	e174      	b.n	800ffa6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fcbc:	4b7a      	ldr	r3, [pc, #488]	@ (800fea8 <HAL_RCC_OscConfig+0x694>)
 800fcbe:	681a      	ldr	r2, [r3, #0]
 800fcc0:	2380      	movs	r3, #128	@ 0x80
 800fcc2:	005b      	lsls	r3, r3, #1
 800fcc4:	4013      	ands	r3, r2
 800fcc6:	d0f0      	beq.n	800fcaa <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	689a      	ldr	r2, [r3, #8]
 800fccc:	2380      	movs	r3, #128	@ 0x80
 800fcce:	005b      	lsls	r3, r3, #1
 800fcd0:	429a      	cmp	r2, r3
 800fcd2:	d107      	bne.n	800fce4 <HAL_RCC_OscConfig+0x4d0>
 800fcd4:	4b71      	ldr	r3, [pc, #452]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fcd6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fcd8:	4b70      	ldr	r3, [pc, #448]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fcda:	2180      	movs	r1, #128	@ 0x80
 800fcdc:	0049      	lsls	r1, r1, #1
 800fcde:	430a      	orrs	r2, r1
 800fce0:	651a      	str	r2, [r3, #80]	@ 0x50
 800fce2:	e031      	b.n	800fd48 <HAL_RCC_OscConfig+0x534>
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	689b      	ldr	r3, [r3, #8]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d10c      	bne.n	800fd06 <HAL_RCC_OscConfig+0x4f2>
 800fcec:	4b6b      	ldr	r3, [pc, #428]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fcee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fcf0:	4b6a      	ldr	r3, [pc, #424]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fcf2:	496c      	ldr	r1, [pc, #432]	@ (800fea4 <HAL_RCC_OscConfig+0x690>)
 800fcf4:	400a      	ands	r2, r1
 800fcf6:	651a      	str	r2, [r3, #80]	@ 0x50
 800fcf8:	4b68      	ldr	r3, [pc, #416]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fcfa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fcfc:	4b67      	ldr	r3, [pc, #412]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fcfe:	496b      	ldr	r1, [pc, #428]	@ (800feac <HAL_RCC_OscConfig+0x698>)
 800fd00:	400a      	ands	r2, r1
 800fd02:	651a      	str	r2, [r3, #80]	@ 0x50
 800fd04:	e020      	b.n	800fd48 <HAL_RCC_OscConfig+0x534>
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	689a      	ldr	r2, [r3, #8]
 800fd0a:	23a0      	movs	r3, #160	@ 0xa0
 800fd0c:	00db      	lsls	r3, r3, #3
 800fd0e:	429a      	cmp	r2, r3
 800fd10:	d10e      	bne.n	800fd30 <HAL_RCC_OscConfig+0x51c>
 800fd12:	4b62      	ldr	r3, [pc, #392]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fd14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd16:	4b61      	ldr	r3, [pc, #388]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fd18:	2180      	movs	r1, #128	@ 0x80
 800fd1a:	00c9      	lsls	r1, r1, #3
 800fd1c:	430a      	orrs	r2, r1
 800fd1e:	651a      	str	r2, [r3, #80]	@ 0x50
 800fd20:	4b5e      	ldr	r3, [pc, #376]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fd22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd24:	4b5d      	ldr	r3, [pc, #372]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fd26:	2180      	movs	r1, #128	@ 0x80
 800fd28:	0049      	lsls	r1, r1, #1
 800fd2a:	430a      	orrs	r2, r1
 800fd2c:	651a      	str	r2, [r3, #80]	@ 0x50
 800fd2e:	e00b      	b.n	800fd48 <HAL_RCC_OscConfig+0x534>
 800fd30:	4b5a      	ldr	r3, [pc, #360]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fd32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd34:	4b59      	ldr	r3, [pc, #356]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fd36:	495b      	ldr	r1, [pc, #364]	@ (800fea4 <HAL_RCC_OscConfig+0x690>)
 800fd38:	400a      	ands	r2, r1
 800fd3a:	651a      	str	r2, [r3, #80]	@ 0x50
 800fd3c:	4b57      	ldr	r3, [pc, #348]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fd3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd40:	4b56      	ldr	r3, [pc, #344]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fd42:	495a      	ldr	r1, [pc, #360]	@ (800feac <HAL_RCC_OscConfig+0x698>)
 800fd44:	400a      	ands	r2, r1
 800fd46:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	689b      	ldr	r3, [r3, #8]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d015      	beq.n	800fd7c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fd50:	f7f9 ffe6 	bl	8009d20 <HAL_GetTick>
 800fd54:	0003      	movs	r3, r0
 800fd56:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fd58:	e009      	b.n	800fd6e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fd5a:	f7f9 ffe1 	bl	8009d20 <HAL_GetTick>
 800fd5e:	0002      	movs	r2, r0
 800fd60:	697b      	ldr	r3, [r7, #20]
 800fd62:	1ad3      	subs	r3, r2, r3
 800fd64:	4a52      	ldr	r2, [pc, #328]	@ (800feb0 <HAL_RCC_OscConfig+0x69c>)
 800fd66:	4293      	cmp	r3, r2
 800fd68:	d901      	bls.n	800fd6e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800fd6a:	2303      	movs	r3, #3
 800fd6c:	e11b      	b.n	800ffa6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fd6e:	4b4b      	ldr	r3, [pc, #300]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fd70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd72:	2380      	movs	r3, #128	@ 0x80
 800fd74:	009b      	lsls	r3, r3, #2
 800fd76:	4013      	ands	r3, r2
 800fd78:	d0ef      	beq.n	800fd5a <HAL_RCC_OscConfig+0x546>
 800fd7a:	e014      	b.n	800fda6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fd7c:	f7f9 ffd0 	bl	8009d20 <HAL_GetTick>
 800fd80:	0003      	movs	r3, r0
 800fd82:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800fd84:	e009      	b.n	800fd9a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800fd86:	f7f9 ffcb 	bl	8009d20 <HAL_GetTick>
 800fd8a:	0002      	movs	r2, r0
 800fd8c:	697b      	ldr	r3, [r7, #20]
 800fd8e:	1ad3      	subs	r3, r2, r3
 800fd90:	4a47      	ldr	r2, [pc, #284]	@ (800feb0 <HAL_RCC_OscConfig+0x69c>)
 800fd92:	4293      	cmp	r3, r2
 800fd94:	d901      	bls.n	800fd9a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800fd96:	2303      	movs	r3, #3
 800fd98:	e105      	b.n	800ffa6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800fd9a:	4b40      	ldr	r3, [pc, #256]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fd9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd9e:	2380      	movs	r3, #128	@ 0x80
 800fda0:	009b      	lsls	r3, r3, #2
 800fda2:	4013      	ands	r3, r2
 800fda4:	d1ef      	bne.n	800fd86 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800fda6:	2323      	movs	r3, #35	@ 0x23
 800fda8:	18fb      	adds	r3, r7, r3
 800fdaa:	781b      	ldrb	r3, [r3, #0]
 800fdac:	2b01      	cmp	r3, #1
 800fdae:	d105      	bne.n	800fdbc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fdb0:	4b3a      	ldr	r3, [pc, #232]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fdb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fdb4:	4b39      	ldr	r3, [pc, #228]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fdb6:	493f      	ldr	r1, [pc, #252]	@ (800feb4 <HAL_RCC_OscConfig+0x6a0>)
 800fdb8:	400a      	ands	r2, r1
 800fdba:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	2220      	movs	r2, #32
 800fdc2:	4013      	ands	r3, r2
 800fdc4:	d049      	beq.n	800fe5a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	699b      	ldr	r3, [r3, #24]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d026      	beq.n	800fe1c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800fdce:	4b33      	ldr	r3, [pc, #204]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fdd0:	689a      	ldr	r2, [r3, #8]
 800fdd2:	4b32      	ldr	r3, [pc, #200]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fdd4:	2101      	movs	r1, #1
 800fdd6:	430a      	orrs	r2, r1
 800fdd8:	609a      	str	r2, [r3, #8]
 800fdda:	4b30      	ldr	r3, [pc, #192]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fddc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fdde:	4b2f      	ldr	r3, [pc, #188]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fde0:	2101      	movs	r1, #1
 800fde2:	430a      	orrs	r2, r1
 800fde4:	635a      	str	r2, [r3, #52]	@ 0x34
 800fde6:	4b34      	ldr	r3, [pc, #208]	@ (800feb8 <HAL_RCC_OscConfig+0x6a4>)
 800fde8:	6a1a      	ldr	r2, [r3, #32]
 800fdea:	4b33      	ldr	r3, [pc, #204]	@ (800feb8 <HAL_RCC_OscConfig+0x6a4>)
 800fdec:	2180      	movs	r1, #128	@ 0x80
 800fdee:	0189      	lsls	r1, r1, #6
 800fdf0:	430a      	orrs	r2, r1
 800fdf2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fdf4:	f7f9 ff94 	bl	8009d20 <HAL_GetTick>
 800fdf8:	0003      	movs	r3, r0
 800fdfa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800fdfc:	e008      	b.n	800fe10 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800fdfe:	f7f9 ff8f 	bl	8009d20 <HAL_GetTick>
 800fe02:	0002      	movs	r2, r0
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	1ad3      	subs	r3, r2, r3
 800fe08:	2b02      	cmp	r3, #2
 800fe0a:	d901      	bls.n	800fe10 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800fe0c:	2303      	movs	r3, #3
 800fe0e:	e0ca      	b.n	800ffa6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800fe10:	4b22      	ldr	r3, [pc, #136]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fe12:	689b      	ldr	r3, [r3, #8]
 800fe14:	2202      	movs	r2, #2
 800fe16:	4013      	ands	r3, r2
 800fe18:	d0f1      	beq.n	800fdfe <HAL_RCC_OscConfig+0x5ea>
 800fe1a:	e01e      	b.n	800fe5a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800fe1c:	4b1f      	ldr	r3, [pc, #124]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fe1e:	689a      	ldr	r2, [r3, #8]
 800fe20:	4b1e      	ldr	r3, [pc, #120]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fe22:	2101      	movs	r1, #1
 800fe24:	438a      	bics	r2, r1
 800fe26:	609a      	str	r2, [r3, #8]
 800fe28:	4b23      	ldr	r3, [pc, #140]	@ (800feb8 <HAL_RCC_OscConfig+0x6a4>)
 800fe2a:	6a1a      	ldr	r2, [r3, #32]
 800fe2c:	4b22      	ldr	r3, [pc, #136]	@ (800feb8 <HAL_RCC_OscConfig+0x6a4>)
 800fe2e:	4923      	ldr	r1, [pc, #140]	@ (800febc <HAL_RCC_OscConfig+0x6a8>)
 800fe30:	400a      	ands	r2, r1
 800fe32:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fe34:	f7f9 ff74 	bl	8009d20 <HAL_GetTick>
 800fe38:	0003      	movs	r3, r0
 800fe3a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800fe3c:	e008      	b.n	800fe50 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800fe3e:	f7f9 ff6f 	bl	8009d20 <HAL_GetTick>
 800fe42:	0002      	movs	r2, r0
 800fe44:	697b      	ldr	r3, [r7, #20]
 800fe46:	1ad3      	subs	r3, r2, r3
 800fe48:	2b02      	cmp	r3, #2
 800fe4a:	d901      	bls.n	800fe50 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800fe4c:	2303      	movs	r3, #3
 800fe4e:	e0aa      	b.n	800ffa6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800fe50:	4b12      	ldr	r3, [pc, #72]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fe52:	689b      	ldr	r3, [r3, #8]
 800fe54:	2202      	movs	r2, #2
 800fe56:	4013      	ands	r3, r2
 800fe58:	d1f1      	bne.n	800fe3e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d100      	bne.n	800fe64 <HAL_RCC_OscConfig+0x650>
 800fe62:	e09f      	b.n	800ffa4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800fe64:	69fb      	ldr	r3, [r7, #28]
 800fe66:	2b0c      	cmp	r3, #12
 800fe68:	d100      	bne.n	800fe6c <HAL_RCC_OscConfig+0x658>
 800fe6a:	e078      	b.n	800ff5e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe70:	2b02      	cmp	r3, #2
 800fe72:	d159      	bne.n	800ff28 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fe74:	4b09      	ldr	r3, [pc, #36]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fe76:	681a      	ldr	r2, [r3, #0]
 800fe78:	4b08      	ldr	r3, [pc, #32]	@ (800fe9c <HAL_RCC_OscConfig+0x688>)
 800fe7a:	4911      	ldr	r1, [pc, #68]	@ (800fec0 <HAL_RCC_OscConfig+0x6ac>)
 800fe7c:	400a      	ands	r2, r1
 800fe7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fe80:	f7f9 ff4e 	bl	8009d20 <HAL_GetTick>
 800fe84:	0003      	movs	r3, r0
 800fe86:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800fe88:	e01c      	b.n	800fec4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800fe8a:	f7f9 ff49 	bl	8009d20 <HAL_GetTick>
 800fe8e:	0002      	movs	r2, r0
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	1ad3      	subs	r3, r2, r3
 800fe94:	2b02      	cmp	r3, #2
 800fe96:	d915      	bls.n	800fec4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800fe98:	2303      	movs	r3, #3
 800fe9a:	e084      	b.n	800ffa6 <HAL_RCC_OscConfig+0x792>
 800fe9c:	40021000 	.word	0x40021000
 800fea0:	ffff1fff 	.word	0xffff1fff
 800fea4:	fffffeff 	.word	0xfffffeff
 800fea8:	40007000 	.word	0x40007000
 800feac:	fffffbff 	.word	0xfffffbff
 800feb0:	00001388 	.word	0x00001388
 800feb4:	efffffff 	.word	0xefffffff
 800feb8:	40010000 	.word	0x40010000
 800febc:	ffffdfff 	.word	0xffffdfff
 800fec0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800fec4:	4b3a      	ldr	r3, [pc, #232]	@ (800ffb0 <HAL_RCC_OscConfig+0x79c>)
 800fec6:	681a      	ldr	r2, [r3, #0]
 800fec8:	2380      	movs	r3, #128	@ 0x80
 800feca:	049b      	lsls	r3, r3, #18
 800fecc:	4013      	ands	r3, r2
 800fece:	d1dc      	bne.n	800fe8a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800fed0:	4b37      	ldr	r3, [pc, #220]	@ (800ffb0 <HAL_RCC_OscConfig+0x79c>)
 800fed2:	68db      	ldr	r3, [r3, #12]
 800fed4:	4a37      	ldr	r2, [pc, #220]	@ (800ffb4 <HAL_RCC_OscConfig+0x7a0>)
 800fed6:	4013      	ands	r3, r2
 800fed8:	0019      	movs	r1, r3
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fee2:	431a      	orrs	r2, r3
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fee8:	431a      	orrs	r2, r3
 800feea:	4b31      	ldr	r3, [pc, #196]	@ (800ffb0 <HAL_RCC_OscConfig+0x79c>)
 800feec:	430a      	orrs	r2, r1
 800feee:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800fef0:	4b2f      	ldr	r3, [pc, #188]	@ (800ffb0 <HAL_RCC_OscConfig+0x79c>)
 800fef2:	681a      	ldr	r2, [r3, #0]
 800fef4:	4b2e      	ldr	r3, [pc, #184]	@ (800ffb0 <HAL_RCC_OscConfig+0x79c>)
 800fef6:	2180      	movs	r1, #128	@ 0x80
 800fef8:	0449      	lsls	r1, r1, #17
 800fefa:	430a      	orrs	r2, r1
 800fefc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fefe:	f7f9 ff0f 	bl	8009d20 <HAL_GetTick>
 800ff02:	0003      	movs	r3, r0
 800ff04:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800ff06:	e008      	b.n	800ff1a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ff08:	f7f9 ff0a 	bl	8009d20 <HAL_GetTick>
 800ff0c:	0002      	movs	r2, r0
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	1ad3      	subs	r3, r2, r3
 800ff12:	2b02      	cmp	r3, #2
 800ff14:	d901      	bls.n	800ff1a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800ff16:	2303      	movs	r3, #3
 800ff18:	e045      	b.n	800ffa6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800ff1a:	4b25      	ldr	r3, [pc, #148]	@ (800ffb0 <HAL_RCC_OscConfig+0x79c>)
 800ff1c:	681a      	ldr	r2, [r3, #0]
 800ff1e:	2380      	movs	r3, #128	@ 0x80
 800ff20:	049b      	lsls	r3, r3, #18
 800ff22:	4013      	ands	r3, r2
 800ff24:	d0f0      	beq.n	800ff08 <HAL_RCC_OscConfig+0x6f4>
 800ff26:	e03d      	b.n	800ffa4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ff28:	4b21      	ldr	r3, [pc, #132]	@ (800ffb0 <HAL_RCC_OscConfig+0x79c>)
 800ff2a:	681a      	ldr	r2, [r3, #0]
 800ff2c:	4b20      	ldr	r3, [pc, #128]	@ (800ffb0 <HAL_RCC_OscConfig+0x79c>)
 800ff2e:	4922      	ldr	r1, [pc, #136]	@ (800ffb8 <HAL_RCC_OscConfig+0x7a4>)
 800ff30:	400a      	ands	r2, r1
 800ff32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ff34:	f7f9 fef4 	bl	8009d20 <HAL_GetTick>
 800ff38:	0003      	movs	r3, r0
 800ff3a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ff3c:	e008      	b.n	800ff50 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ff3e:	f7f9 feef 	bl	8009d20 <HAL_GetTick>
 800ff42:	0002      	movs	r2, r0
 800ff44:	697b      	ldr	r3, [r7, #20]
 800ff46:	1ad3      	subs	r3, r2, r3
 800ff48:	2b02      	cmp	r3, #2
 800ff4a:	d901      	bls.n	800ff50 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800ff4c:	2303      	movs	r3, #3
 800ff4e:	e02a      	b.n	800ffa6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ff50:	4b17      	ldr	r3, [pc, #92]	@ (800ffb0 <HAL_RCC_OscConfig+0x79c>)
 800ff52:	681a      	ldr	r2, [r3, #0]
 800ff54:	2380      	movs	r3, #128	@ 0x80
 800ff56:	049b      	lsls	r3, r3, #18
 800ff58:	4013      	ands	r3, r2
 800ff5a:	d1f0      	bne.n	800ff3e <HAL_RCC_OscConfig+0x72a>
 800ff5c:	e022      	b.n	800ffa4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff62:	2b01      	cmp	r3, #1
 800ff64:	d101      	bne.n	800ff6a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800ff66:	2301      	movs	r3, #1
 800ff68:	e01d      	b.n	800ffa6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ff6a:	4b11      	ldr	r3, [pc, #68]	@ (800ffb0 <HAL_RCC_OscConfig+0x79c>)
 800ff6c:	68db      	ldr	r3, [r3, #12]
 800ff6e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ff70:	69ba      	ldr	r2, [r7, #24]
 800ff72:	2380      	movs	r3, #128	@ 0x80
 800ff74:	025b      	lsls	r3, r3, #9
 800ff76:	401a      	ands	r2, r3
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff7c:	429a      	cmp	r2, r3
 800ff7e:	d10f      	bne.n	800ffa0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800ff80:	69ba      	ldr	r2, [r7, #24]
 800ff82:	23f0      	movs	r3, #240	@ 0xf0
 800ff84:	039b      	lsls	r3, r3, #14
 800ff86:	401a      	ands	r2, r3
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ff8c:	429a      	cmp	r2, r3
 800ff8e:	d107      	bne.n	800ffa0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800ff90:	69ba      	ldr	r2, [r7, #24]
 800ff92:	23c0      	movs	r3, #192	@ 0xc0
 800ff94:	041b      	lsls	r3, r3, #16
 800ff96:	401a      	ands	r2, r3
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800ff9c:	429a      	cmp	r2, r3
 800ff9e:	d001      	beq.n	800ffa4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800ffa0:	2301      	movs	r3, #1
 800ffa2:	e000      	b.n	800ffa6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800ffa4:	2300      	movs	r3, #0
}
 800ffa6:	0018      	movs	r0, r3
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	b00a      	add	sp, #40	@ 0x28
 800ffac:	bdb0      	pop	{r4, r5, r7, pc}
 800ffae:	46c0      	nop			@ (mov r8, r8)
 800ffb0:	40021000 	.word	0x40021000
 800ffb4:	ff02ffff 	.word	0xff02ffff
 800ffb8:	feffffff 	.word	0xfeffffff

0800ffbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ffbc:	b5b0      	push	{r4, r5, r7, lr}
 800ffbe:	b084      	sub	sp, #16
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
 800ffc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d101      	bne.n	800ffd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ffcc:	2301      	movs	r3, #1
 800ffce:	e128      	b.n	8010222 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ffd0:	4b96      	ldr	r3, [pc, #600]	@ (801022c <HAL_RCC_ClockConfig+0x270>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	2201      	movs	r2, #1
 800ffd6:	4013      	ands	r3, r2
 800ffd8:	683a      	ldr	r2, [r7, #0]
 800ffda:	429a      	cmp	r2, r3
 800ffdc:	d91e      	bls.n	801001c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ffde:	4b93      	ldr	r3, [pc, #588]	@ (801022c <HAL_RCC_ClockConfig+0x270>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	2201      	movs	r2, #1
 800ffe4:	4393      	bics	r3, r2
 800ffe6:	0019      	movs	r1, r3
 800ffe8:	4b90      	ldr	r3, [pc, #576]	@ (801022c <HAL_RCC_ClockConfig+0x270>)
 800ffea:	683a      	ldr	r2, [r7, #0]
 800ffec:	430a      	orrs	r2, r1
 800ffee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800fff0:	f7f9 fe96 	bl	8009d20 <HAL_GetTick>
 800fff4:	0003      	movs	r3, r0
 800fff6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fff8:	e009      	b.n	801000e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fffa:	f7f9 fe91 	bl	8009d20 <HAL_GetTick>
 800fffe:	0002      	movs	r2, r0
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	1ad3      	subs	r3, r2, r3
 8010004:	4a8a      	ldr	r2, [pc, #552]	@ (8010230 <HAL_RCC_ClockConfig+0x274>)
 8010006:	4293      	cmp	r3, r2
 8010008:	d901      	bls.n	801000e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 801000a:	2303      	movs	r3, #3
 801000c:	e109      	b.n	8010222 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801000e:	4b87      	ldr	r3, [pc, #540]	@ (801022c <HAL_RCC_ClockConfig+0x270>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	2201      	movs	r2, #1
 8010014:	4013      	ands	r3, r2
 8010016:	683a      	ldr	r2, [r7, #0]
 8010018:	429a      	cmp	r2, r3
 801001a:	d1ee      	bne.n	800fffa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	2202      	movs	r2, #2
 8010022:	4013      	ands	r3, r2
 8010024:	d009      	beq.n	801003a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010026:	4b83      	ldr	r3, [pc, #524]	@ (8010234 <HAL_RCC_ClockConfig+0x278>)
 8010028:	68db      	ldr	r3, [r3, #12]
 801002a:	22f0      	movs	r2, #240	@ 0xf0
 801002c:	4393      	bics	r3, r2
 801002e:	0019      	movs	r1, r3
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	689a      	ldr	r2, [r3, #8]
 8010034:	4b7f      	ldr	r3, [pc, #508]	@ (8010234 <HAL_RCC_ClockConfig+0x278>)
 8010036:	430a      	orrs	r2, r1
 8010038:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	2201      	movs	r2, #1
 8010040:	4013      	ands	r3, r2
 8010042:	d100      	bne.n	8010046 <HAL_RCC_ClockConfig+0x8a>
 8010044:	e089      	b.n	801015a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	685b      	ldr	r3, [r3, #4]
 801004a:	2b02      	cmp	r3, #2
 801004c:	d107      	bne.n	801005e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801004e:	4b79      	ldr	r3, [pc, #484]	@ (8010234 <HAL_RCC_ClockConfig+0x278>)
 8010050:	681a      	ldr	r2, [r3, #0]
 8010052:	2380      	movs	r3, #128	@ 0x80
 8010054:	029b      	lsls	r3, r3, #10
 8010056:	4013      	ands	r3, r2
 8010058:	d120      	bne.n	801009c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801005a:	2301      	movs	r3, #1
 801005c:	e0e1      	b.n	8010222 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	685b      	ldr	r3, [r3, #4]
 8010062:	2b03      	cmp	r3, #3
 8010064:	d107      	bne.n	8010076 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010066:	4b73      	ldr	r3, [pc, #460]	@ (8010234 <HAL_RCC_ClockConfig+0x278>)
 8010068:	681a      	ldr	r2, [r3, #0]
 801006a:	2380      	movs	r3, #128	@ 0x80
 801006c:	049b      	lsls	r3, r3, #18
 801006e:	4013      	ands	r3, r2
 8010070:	d114      	bne.n	801009c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8010072:	2301      	movs	r3, #1
 8010074:	e0d5      	b.n	8010222 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	685b      	ldr	r3, [r3, #4]
 801007a:	2b01      	cmp	r3, #1
 801007c:	d106      	bne.n	801008c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801007e:	4b6d      	ldr	r3, [pc, #436]	@ (8010234 <HAL_RCC_ClockConfig+0x278>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	2204      	movs	r2, #4
 8010084:	4013      	ands	r3, r2
 8010086:	d109      	bne.n	801009c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8010088:	2301      	movs	r3, #1
 801008a:	e0ca      	b.n	8010222 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 801008c:	4b69      	ldr	r3, [pc, #420]	@ (8010234 <HAL_RCC_ClockConfig+0x278>)
 801008e:	681a      	ldr	r2, [r3, #0]
 8010090:	2380      	movs	r3, #128	@ 0x80
 8010092:	009b      	lsls	r3, r3, #2
 8010094:	4013      	ands	r3, r2
 8010096:	d101      	bne.n	801009c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8010098:	2301      	movs	r3, #1
 801009a:	e0c2      	b.n	8010222 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801009c:	4b65      	ldr	r3, [pc, #404]	@ (8010234 <HAL_RCC_ClockConfig+0x278>)
 801009e:	68db      	ldr	r3, [r3, #12]
 80100a0:	2203      	movs	r2, #3
 80100a2:	4393      	bics	r3, r2
 80100a4:	0019      	movs	r1, r3
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	685a      	ldr	r2, [r3, #4]
 80100aa:	4b62      	ldr	r3, [pc, #392]	@ (8010234 <HAL_RCC_ClockConfig+0x278>)
 80100ac:	430a      	orrs	r2, r1
 80100ae:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80100b0:	f7f9 fe36 	bl	8009d20 <HAL_GetTick>
 80100b4:	0003      	movs	r3, r0
 80100b6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	685b      	ldr	r3, [r3, #4]
 80100bc:	2b02      	cmp	r3, #2
 80100be:	d111      	bne.n	80100e4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80100c0:	e009      	b.n	80100d6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80100c2:	f7f9 fe2d 	bl	8009d20 <HAL_GetTick>
 80100c6:	0002      	movs	r2, r0
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	1ad3      	subs	r3, r2, r3
 80100cc:	4a58      	ldr	r2, [pc, #352]	@ (8010230 <HAL_RCC_ClockConfig+0x274>)
 80100ce:	4293      	cmp	r3, r2
 80100d0:	d901      	bls.n	80100d6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80100d2:	2303      	movs	r3, #3
 80100d4:	e0a5      	b.n	8010222 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80100d6:	4b57      	ldr	r3, [pc, #348]	@ (8010234 <HAL_RCC_ClockConfig+0x278>)
 80100d8:	68db      	ldr	r3, [r3, #12]
 80100da:	220c      	movs	r2, #12
 80100dc:	4013      	ands	r3, r2
 80100de:	2b08      	cmp	r3, #8
 80100e0:	d1ef      	bne.n	80100c2 <HAL_RCC_ClockConfig+0x106>
 80100e2:	e03a      	b.n	801015a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	685b      	ldr	r3, [r3, #4]
 80100e8:	2b03      	cmp	r3, #3
 80100ea:	d111      	bne.n	8010110 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80100ec:	e009      	b.n	8010102 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80100ee:	f7f9 fe17 	bl	8009d20 <HAL_GetTick>
 80100f2:	0002      	movs	r2, r0
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	1ad3      	subs	r3, r2, r3
 80100f8:	4a4d      	ldr	r2, [pc, #308]	@ (8010230 <HAL_RCC_ClockConfig+0x274>)
 80100fa:	4293      	cmp	r3, r2
 80100fc:	d901      	bls.n	8010102 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80100fe:	2303      	movs	r3, #3
 8010100:	e08f      	b.n	8010222 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010102:	4b4c      	ldr	r3, [pc, #304]	@ (8010234 <HAL_RCC_ClockConfig+0x278>)
 8010104:	68db      	ldr	r3, [r3, #12]
 8010106:	220c      	movs	r2, #12
 8010108:	4013      	ands	r3, r2
 801010a:	2b0c      	cmp	r3, #12
 801010c:	d1ef      	bne.n	80100ee <HAL_RCC_ClockConfig+0x132>
 801010e:	e024      	b.n	801015a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	685b      	ldr	r3, [r3, #4]
 8010114:	2b01      	cmp	r3, #1
 8010116:	d11b      	bne.n	8010150 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010118:	e009      	b.n	801012e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801011a:	f7f9 fe01 	bl	8009d20 <HAL_GetTick>
 801011e:	0002      	movs	r2, r0
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	1ad3      	subs	r3, r2, r3
 8010124:	4a42      	ldr	r2, [pc, #264]	@ (8010230 <HAL_RCC_ClockConfig+0x274>)
 8010126:	4293      	cmp	r3, r2
 8010128:	d901      	bls.n	801012e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801012a:	2303      	movs	r3, #3
 801012c:	e079      	b.n	8010222 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801012e:	4b41      	ldr	r3, [pc, #260]	@ (8010234 <HAL_RCC_ClockConfig+0x278>)
 8010130:	68db      	ldr	r3, [r3, #12]
 8010132:	220c      	movs	r2, #12
 8010134:	4013      	ands	r3, r2
 8010136:	2b04      	cmp	r3, #4
 8010138:	d1ef      	bne.n	801011a <HAL_RCC_ClockConfig+0x15e>
 801013a:	e00e      	b.n	801015a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801013c:	f7f9 fdf0 	bl	8009d20 <HAL_GetTick>
 8010140:	0002      	movs	r2, r0
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	1ad3      	subs	r3, r2, r3
 8010146:	4a3a      	ldr	r2, [pc, #232]	@ (8010230 <HAL_RCC_ClockConfig+0x274>)
 8010148:	4293      	cmp	r3, r2
 801014a:	d901      	bls.n	8010150 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 801014c:	2303      	movs	r3, #3
 801014e:	e068      	b.n	8010222 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8010150:	4b38      	ldr	r3, [pc, #224]	@ (8010234 <HAL_RCC_ClockConfig+0x278>)
 8010152:	68db      	ldr	r3, [r3, #12]
 8010154:	220c      	movs	r2, #12
 8010156:	4013      	ands	r3, r2
 8010158:	d1f0      	bne.n	801013c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801015a:	4b34      	ldr	r3, [pc, #208]	@ (801022c <HAL_RCC_ClockConfig+0x270>)
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	2201      	movs	r2, #1
 8010160:	4013      	ands	r3, r2
 8010162:	683a      	ldr	r2, [r7, #0]
 8010164:	429a      	cmp	r2, r3
 8010166:	d21e      	bcs.n	80101a6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010168:	4b30      	ldr	r3, [pc, #192]	@ (801022c <HAL_RCC_ClockConfig+0x270>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	2201      	movs	r2, #1
 801016e:	4393      	bics	r3, r2
 8010170:	0019      	movs	r1, r3
 8010172:	4b2e      	ldr	r3, [pc, #184]	@ (801022c <HAL_RCC_ClockConfig+0x270>)
 8010174:	683a      	ldr	r2, [r7, #0]
 8010176:	430a      	orrs	r2, r1
 8010178:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801017a:	f7f9 fdd1 	bl	8009d20 <HAL_GetTick>
 801017e:	0003      	movs	r3, r0
 8010180:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010182:	e009      	b.n	8010198 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010184:	f7f9 fdcc 	bl	8009d20 <HAL_GetTick>
 8010188:	0002      	movs	r2, r0
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	1ad3      	subs	r3, r2, r3
 801018e:	4a28      	ldr	r2, [pc, #160]	@ (8010230 <HAL_RCC_ClockConfig+0x274>)
 8010190:	4293      	cmp	r3, r2
 8010192:	d901      	bls.n	8010198 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8010194:	2303      	movs	r3, #3
 8010196:	e044      	b.n	8010222 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010198:	4b24      	ldr	r3, [pc, #144]	@ (801022c <HAL_RCC_ClockConfig+0x270>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	2201      	movs	r2, #1
 801019e:	4013      	ands	r3, r2
 80101a0:	683a      	ldr	r2, [r7, #0]
 80101a2:	429a      	cmp	r2, r3
 80101a4:	d1ee      	bne.n	8010184 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	2204      	movs	r2, #4
 80101ac:	4013      	ands	r3, r2
 80101ae:	d009      	beq.n	80101c4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80101b0:	4b20      	ldr	r3, [pc, #128]	@ (8010234 <HAL_RCC_ClockConfig+0x278>)
 80101b2:	68db      	ldr	r3, [r3, #12]
 80101b4:	4a20      	ldr	r2, [pc, #128]	@ (8010238 <HAL_RCC_ClockConfig+0x27c>)
 80101b6:	4013      	ands	r3, r2
 80101b8:	0019      	movs	r1, r3
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	68da      	ldr	r2, [r3, #12]
 80101be:	4b1d      	ldr	r3, [pc, #116]	@ (8010234 <HAL_RCC_ClockConfig+0x278>)
 80101c0:	430a      	orrs	r2, r1
 80101c2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	2208      	movs	r2, #8
 80101ca:	4013      	ands	r3, r2
 80101cc:	d00a      	beq.n	80101e4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80101ce:	4b19      	ldr	r3, [pc, #100]	@ (8010234 <HAL_RCC_ClockConfig+0x278>)
 80101d0:	68db      	ldr	r3, [r3, #12]
 80101d2:	4a1a      	ldr	r2, [pc, #104]	@ (801023c <HAL_RCC_ClockConfig+0x280>)
 80101d4:	4013      	ands	r3, r2
 80101d6:	0019      	movs	r1, r3
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	691b      	ldr	r3, [r3, #16]
 80101dc:	00da      	lsls	r2, r3, #3
 80101de:	4b15      	ldr	r3, [pc, #84]	@ (8010234 <HAL_RCC_ClockConfig+0x278>)
 80101e0:	430a      	orrs	r2, r1
 80101e2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80101e4:	f000 f832 	bl	801024c <HAL_RCC_GetSysClockFreq>
 80101e8:	0001      	movs	r1, r0
 80101ea:	4b12      	ldr	r3, [pc, #72]	@ (8010234 <HAL_RCC_ClockConfig+0x278>)
 80101ec:	68db      	ldr	r3, [r3, #12]
 80101ee:	091b      	lsrs	r3, r3, #4
 80101f0:	220f      	movs	r2, #15
 80101f2:	4013      	ands	r3, r2
 80101f4:	4a12      	ldr	r2, [pc, #72]	@ (8010240 <HAL_RCC_ClockConfig+0x284>)
 80101f6:	5cd3      	ldrb	r3, [r2, r3]
 80101f8:	000a      	movs	r2, r1
 80101fa:	40da      	lsrs	r2, r3
 80101fc:	4b11      	ldr	r3, [pc, #68]	@ (8010244 <HAL_RCC_ClockConfig+0x288>)
 80101fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8010200:	4b11      	ldr	r3, [pc, #68]	@ (8010248 <HAL_RCC_ClockConfig+0x28c>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	250b      	movs	r5, #11
 8010206:	197c      	adds	r4, r7, r5
 8010208:	0018      	movs	r0, r3
 801020a:	f7f9 fd43 	bl	8009c94 <HAL_InitTick>
 801020e:	0003      	movs	r3, r0
 8010210:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8010212:	197b      	adds	r3, r7, r5
 8010214:	781b      	ldrb	r3, [r3, #0]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d002      	beq.n	8010220 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801021a:	197b      	adds	r3, r7, r5
 801021c:	781b      	ldrb	r3, [r3, #0]
 801021e:	e000      	b.n	8010222 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8010220:	2300      	movs	r3, #0
}
 8010222:	0018      	movs	r0, r3
 8010224:	46bd      	mov	sp, r7
 8010226:	b004      	add	sp, #16
 8010228:	bdb0      	pop	{r4, r5, r7, pc}
 801022a:	46c0      	nop			@ (mov r8, r8)
 801022c:	40022000 	.word	0x40022000
 8010230:	00001388 	.word	0x00001388
 8010234:	40021000 	.word	0x40021000
 8010238:	fffff8ff 	.word	0xfffff8ff
 801023c:	ffffc7ff 	.word	0xffffc7ff
 8010240:	0801b810 	.word	0x0801b810
 8010244:	20000094 	.word	0x20000094
 8010248:	200000a8 	.word	0x200000a8

0801024c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801024c:	b5b0      	push	{r4, r5, r7, lr}
 801024e:	b08e      	sub	sp, #56	@ 0x38
 8010250:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8010252:	4b4c      	ldr	r3, [pc, #304]	@ (8010384 <HAL_RCC_GetSysClockFreq+0x138>)
 8010254:	68db      	ldr	r3, [r3, #12]
 8010256:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8010258:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801025a:	230c      	movs	r3, #12
 801025c:	4013      	ands	r3, r2
 801025e:	2b0c      	cmp	r3, #12
 8010260:	d014      	beq.n	801028c <HAL_RCC_GetSysClockFreq+0x40>
 8010262:	d900      	bls.n	8010266 <HAL_RCC_GetSysClockFreq+0x1a>
 8010264:	e07b      	b.n	801035e <HAL_RCC_GetSysClockFreq+0x112>
 8010266:	2b04      	cmp	r3, #4
 8010268:	d002      	beq.n	8010270 <HAL_RCC_GetSysClockFreq+0x24>
 801026a:	2b08      	cmp	r3, #8
 801026c:	d00b      	beq.n	8010286 <HAL_RCC_GetSysClockFreq+0x3a>
 801026e:	e076      	b.n	801035e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8010270:	4b44      	ldr	r3, [pc, #272]	@ (8010384 <HAL_RCC_GetSysClockFreq+0x138>)
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	2210      	movs	r2, #16
 8010276:	4013      	ands	r3, r2
 8010278:	d002      	beq.n	8010280 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801027a:	4b43      	ldr	r3, [pc, #268]	@ (8010388 <HAL_RCC_GetSysClockFreq+0x13c>)
 801027c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801027e:	e07c      	b.n	801037a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8010280:	4b42      	ldr	r3, [pc, #264]	@ (801038c <HAL_RCC_GetSysClockFreq+0x140>)
 8010282:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8010284:	e079      	b.n	801037a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8010286:	4b42      	ldr	r3, [pc, #264]	@ (8010390 <HAL_RCC_GetSysClockFreq+0x144>)
 8010288:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801028a:	e076      	b.n	801037a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 801028c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801028e:	0c9a      	lsrs	r2, r3, #18
 8010290:	230f      	movs	r3, #15
 8010292:	401a      	ands	r2, r3
 8010294:	4b3f      	ldr	r3, [pc, #252]	@ (8010394 <HAL_RCC_GetSysClockFreq+0x148>)
 8010296:	5c9b      	ldrb	r3, [r3, r2]
 8010298:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801029a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801029c:	0d9a      	lsrs	r2, r3, #22
 801029e:	2303      	movs	r3, #3
 80102a0:	4013      	ands	r3, r2
 80102a2:	3301      	adds	r3, #1
 80102a4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80102a6:	4b37      	ldr	r3, [pc, #220]	@ (8010384 <HAL_RCC_GetSysClockFreq+0x138>)
 80102a8:	68da      	ldr	r2, [r3, #12]
 80102aa:	2380      	movs	r3, #128	@ 0x80
 80102ac:	025b      	lsls	r3, r3, #9
 80102ae:	4013      	ands	r3, r2
 80102b0:	d01a      	beq.n	80102e8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80102b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102b4:	61bb      	str	r3, [r7, #24]
 80102b6:	2300      	movs	r3, #0
 80102b8:	61fb      	str	r3, [r7, #28]
 80102ba:	4a35      	ldr	r2, [pc, #212]	@ (8010390 <HAL_RCC_GetSysClockFreq+0x144>)
 80102bc:	2300      	movs	r3, #0
 80102be:	69b8      	ldr	r0, [r7, #24]
 80102c0:	69f9      	ldr	r1, [r7, #28]
 80102c2:	f7f0 f94b 	bl	800055c <__aeabi_lmul>
 80102c6:	0002      	movs	r2, r0
 80102c8:	000b      	movs	r3, r1
 80102ca:	0010      	movs	r0, r2
 80102cc:	0019      	movs	r1, r3
 80102ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102d0:	613b      	str	r3, [r7, #16]
 80102d2:	2300      	movs	r3, #0
 80102d4:	617b      	str	r3, [r7, #20]
 80102d6:	693a      	ldr	r2, [r7, #16]
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	f7f0 f91f 	bl	800051c <__aeabi_uldivmod>
 80102de:	0002      	movs	r2, r0
 80102e0:	000b      	movs	r3, r1
 80102e2:	0013      	movs	r3, r2
 80102e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80102e6:	e037      	b.n	8010358 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80102e8:	4b26      	ldr	r3, [pc, #152]	@ (8010384 <HAL_RCC_GetSysClockFreq+0x138>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	2210      	movs	r2, #16
 80102ee:	4013      	ands	r3, r2
 80102f0:	d01a      	beq.n	8010328 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80102f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102f4:	60bb      	str	r3, [r7, #8]
 80102f6:	2300      	movs	r3, #0
 80102f8:	60fb      	str	r3, [r7, #12]
 80102fa:	4a23      	ldr	r2, [pc, #140]	@ (8010388 <HAL_RCC_GetSysClockFreq+0x13c>)
 80102fc:	2300      	movs	r3, #0
 80102fe:	68b8      	ldr	r0, [r7, #8]
 8010300:	68f9      	ldr	r1, [r7, #12]
 8010302:	f7f0 f92b 	bl	800055c <__aeabi_lmul>
 8010306:	0002      	movs	r2, r0
 8010308:	000b      	movs	r3, r1
 801030a:	0010      	movs	r0, r2
 801030c:	0019      	movs	r1, r3
 801030e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010310:	603b      	str	r3, [r7, #0]
 8010312:	2300      	movs	r3, #0
 8010314:	607b      	str	r3, [r7, #4]
 8010316:	683a      	ldr	r2, [r7, #0]
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f7f0 f8ff 	bl	800051c <__aeabi_uldivmod>
 801031e:	0002      	movs	r2, r0
 8010320:	000b      	movs	r3, r1
 8010322:	0013      	movs	r3, r2
 8010324:	637b      	str	r3, [r7, #52]	@ 0x34
 8010326:	e017      	b.n	8010358 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8010328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801032a:	0018      	movs	r0, r3
 801032c:	2300      	movs	r3, #0
 801032e:	0019      	movs	r1, r3
 8010330:	4a16      	ldr	r2, [pc, #88]	@ (801038c <HAL_RCC_GetSysClockFreq+0x140>)
 8010332:	2300      	movs	r3, #0
 8010334:	f7f0 f912 	bl	800055c <__aeabi_lmul>
 8010338:	0002      	movs	r2, r0
 801033a:	000b      	movs	r3, r1
 801033c:	0010      	movs	r0, r2
 801033e:	0019      	movs	r1, r3
 8010340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010342:	001c      	movs	r4, r3
 8010344:	2300      	movs	r3, #0
 8010346:	001d      	movs	r5, r3
 8010348:	0022      	movs	r2, r4
 801034a:	002b      	movs	r3, r5
 801034c:	f7f0 f8e6 	bl	800051c <__aeabi_uldivmod>
 8010350:	0002      	movs	r2, r0
 8010352:	000b      	movs	r3, r1
 8010354:	0013      	movs	r3, r2
 8010356:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8010358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801035a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801035c:	e00d      	b.n	801037a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 801035e:	4b09      	ldr	r3, [pc, #36]	@ (8010384 <HAL_RCC_GetSysClockFreq+0x138>)
 8010360:	685b      	ldr	r3, [r3, #4]
 8010362:	0b5b      	lsrs	r3, r3, #13
 8010364:	2207      	movs	r2, #7
 8010366:	4013      	ands	r3, r2
 8010368:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801036a:	6a3b      	ldr	r3, [r7, #32]
 801036c:	3301      	adds	r3, #1
 801036e:	2280      	movs	r2, #128	@ 0x80
 8010370:	0212      	lsls	r2, r2, #8
 8010372:	409a      	lsls	r2, r3
 8010374:	0013      	movs	r3, r2
 8010376:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8010378:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801037a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801037c:	0018      	movs	r0, r3
 801037e:	46bd      	mov	sp, r7
 8010380:	b00e      	add	sp, #56	@ 0x38
 8010382:	bdb0      	pop	{r4, r5, r7, pc}
 8010384:	40021000 	.word	0x40021000
 8010388:	003d0900 	.word	0x003d0900
 801038c:	00f42400 	.word	0x00f42400
 8010390:	007a1200 	.word	0x007a1200
 8010394:	0801b828 	.word	0x0801b828

08010398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801039c:	4b02      	ldr	r3, [pc, #8]	@ (80103a8 <HAL_RCC_GetHCLKFreq+0x10>)
 801039e:	681b      	ldr	r3, [r3, #0]
}
 80103a0:	0018      	movs	r0, r3
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}
 80103a6:	46c0      	nop			@ (mov r8, r8)
 80103a8:	20000094 	.word	0x20000094

080103ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80103b0:	f7ff fff2 	bl	8010398 <HAL_RCC_GetHCLKFreq>
 80103b4:	0001      	movs	r1, r0
 80103b6:	4b06      	ldr	r3, [pc, #24]	@ (80103d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80103b8:	68db      	ldr	r3, [r3, #12]
 80103ba:	0a1b      	lsrs	r3, r3, #8
 80103bc:	2207      	movs	r2, #7
 80103be:	4013      	ands	r3, r2
 80103c0:	4a04      	ldr	r2, [pc, #16]	@ (80103d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80103c2:	5cd3      	ldrb	r3, [r2, r3]
 80103c4:	40d9      	lsrs	r1, r3
 80103c6:	000b      	movs	r3, r1
}
 80103c8:	0018      	movs	r0, r3
 80103ca:	46bd      	mov	sp, r7
 80103cc:	bd80      	pop	{r7, pc}
 80103ce:	46c0      	nop			@ (mov r8, r8)
 80103d0:	40021000 	.word	0x40021000
 80103d4:	0801b820 	.word	0x0801b820

080103d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80103dc:	f7ff ffdc 	bl	8010398 <HAL_RCC_GetHCLKFreq>
 80103e0:	0001      	movs	r1, r0
 80103e2:	4b06      	ldr	r3, [pc, #24]	@ (80103fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80103e4:	68db      	ldr	r3, [r3, #12]
 80103e6:	0adb      	lsrs	r3, r3, #11
 80103e8:	2207      	movs	r2, #7
 80103ea:	4013      	ands	r3, r2
 80103ec:	4a04      	ldr	r2, [pc, #16]	@ (8010400 <HAL_RCC_GetPCLK2Freq+0x28>)
 80103ee:	5cd3      	ldrb	r3, [r2, r3]
 80103f0:	40d9      	lsrs	r1, r3
 80103f2:	000b      	movs	r3, r1
}
 80103f4:	0018      	movs	r0, r3
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}
 80103fa:	46c0      	nop			@ (mov r8, r8)
 80103fc:	40021000 	.word	0x40021000
 8010400:	0801b820 	.word	0x0801b820

08010404 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b086      	sub	sp, #24
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 801040c:	2017      	movs	r0, #23
 801040e:	183b      	adds	r3, r7, r0
 8010410:	2200      	movs	r2, #0
 8010412:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	2220      	movs	r2, #32
 801041a:	4013      	ands	r3, r2
 801041c:	d100      	bne.n	8010420 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801041e:	e0c7      	b.n	80105b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010420:	4b9b      	ldr	r3, [pc, #620]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010422:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010424:	2380      	movs	r3, #128	@ 0x80
 8010426:	055b      	lsls	r3, r3, #21
 8010428:	4013      	ands	r3, r2
 801042a:	d109      	bne.n	8010440 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801042c:	4b98      	ldr	r3, [pc, #608]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801042e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010430:	4b97      	ldr	r3, [pc, #604]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010432:	2180      	movs	r1, #128	@ 0x80
 8010434:	0549      	lsls	r1, r1, #21
 8010436:	430a      	orrs	r2, r1
 8010438:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801043a:	183b      	adds	r3, r7, r0
 801043c:	2201      	movs	r2, #1
 801043e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010440:	4b94      	ldr	r3, [pc, #592]	@ (8010694 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8010442:	681a      	ldr	r2, [r3, #0]
 8010444:	2380      	movs	r3, #128	@ 0x80
 8010446:	005b      	lsls	r3, r3, #1
 8010448:	4013      	ands	r3, r2
 801044a:	d11a      	bne.n	8010482 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801044c:	4b91      	ldr	r3, [pc, #580]	@ (8010694 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801044e:	681a      	ldr	r2, [r3, #0]
 8010450:	4b90      	ldr	r3, [pc, #576]	@ (8010694 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8010452:	2180      	movs	r1, #128	@ 0x80
 8010454:	0049      	lsls	r1, r1, #1
 8010456:	430a      	orrs	r2, r1
 8010458:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801045a:	f7f9 fc61 	bl	8009d20 <HAL_GetTick>
 801045e:	0003      	movs	r3, r0
 8010460:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010462:	e008      	b.n	8010476 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010464:	f7f9 fc5c 	bl	8009d20 <HAL_GetTick>
 8010468:	0002      	movs	r2, r0
 801046a:	693b      	ldr	r3, [r7, #16]
 801046c:	1ad3      	subs	r3, r2, r3
 801046e:	2b64      	cmp	r3, #100	@ 0x64
 8010470:	d901      	bls.n	8010476 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8010472:	2303      	movs	r3, #3
 8010474:	e107      	b.n	8010686 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010476:	4b87      	ldr	r3, [pc, #540]	@ (8010694 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8010478:	681a      	ldr	r2, [r3, #0]
 801047a:	2380      	movs	r3, #128	@ 0x80
 801047c:	005b      	lsls	r3, r3, #1
 801047e:	4013      	ands	r3, r2
 8010480:	d0f0      	beq.n	8010464 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8010482:	4b83      	ldr	r3, [pc, #524]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010484:	681a      	ldr	r2, [r3, #0]
 8010486:	23c0      	movs	r3, #192	@ 0xc0
 8010488:	039b      	lsls	r3, r3, #14
 801048a:	4013      	ands	r3, r2
 801048c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	685a      	ldr	r2, [r3, #4]
 8010492:	23c0      	movs	r3, #192	@ 0xc0
 8010494:	039b      	lsls	r3, r3, #14
 8010496:	4013      	ands	r3, r2
 8010498:	68fa      	ldr	r2, [r7, #12]
 801049a:	429a      	cmp	r2, r3
 801049c:	d013      	beq.n	80104c6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	685a      	ldr	r2, [r3, #4]
 80104a2:	23c0      	movs	r3, #192	@ 0xc0
 80104a4:	029b      	lsls	r3, r3, #10
 80104a6:	401a      	ands	r2, r3
 80104a8:	23c0      	movs	r3, #192	@ 0xc0
 80104aa:	029b      	lsls	r3, r3, #10
 80104ac:	429a      	cmp	r2, r3
 80104ae:	d10a      	bne.n	80104c6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80104b0:	4b77      	ldr	r3, [pc, #476]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80104b2:	681a      	ldr	r2, [r3, #0]
 80104b4:	2380      	movs	r3, #128	@ 0x80
 80104b6:	029b      	lsls	r3, r3, #10
 80104b8:	401a      	ands	r2, r3
 80104ba:	2380      	movs	r3, #128	@ 0x80
 80104bc:	029b      	lsls	r3, r3, #10
 80104be:	429a      	cmp	r2, r3
 80104c0:	d101      	bne.n	80104c6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80104c2:	2301      	movs	r3, #1
 80104c4:	e0df      	b.n	8010686 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80104c6:	4b72      	ldr	r3, [pc, #456]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80104c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80104ca:	23c0      	movs	r3, #192	@ 0xc0
 80104cc:	029b      	lsls	r3, r3, #10
 80104ce:	4013      	ands	r3, r2
 80104d0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d03b      	beq.n	8010550 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	685a      	ldr	r2, [r3, #4]
 80104dc:	23c0      	movs	r3, #192	@ 0xc0
 80104de:	029b      	lsls	r3, r3, #10
 80104e0:	4013      	ands	r3, r2
 80104e2:	68fa      	ldr	r2, [r7, #12]
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d033      	beq.n	8010550 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	2220      	movs	r2, #32
 80104ee:	4013      	ands	r3, r2
 80104f0:	d02e      	beq.n	8010550 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80104f2:	4b67      	ldr	r3, [pc, #412]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80104f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80104f6:	4a68      	ldr	r2, [pc, #416]	@ (8010698 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80104f8:	4013      	ands	r3, r2
 80104fa:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80104fc:	4b64      	ldr	r3, [pc, #400]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80104fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010500:	4b63      	ldr	r3, [pc, #396]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010502:	2180      	movs	r1, #128	@ 0x80
 8010504:	0309      	lsls	r1, r1, #12
 8010506:	430a      	orrs	r2, r1
 8010508:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 801050a:	4b61      	ldr	r3, [pc, #388]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801050c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801050e:	4b60      	ldr	r3, [pc, #384]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010510:	4962      	ldr	r1, [pc, #392]	@ (801069c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8010512:	400a      	ands	r2, r1
 8010514:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8010516:	4b5e      	ldr	r3, [pc, #376]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010518:	68fa      	ldr	r2, [r7, #12]
 801051a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 801051c:	68fa      	ldr	r2, [r7, #12]
 801051e:	2380      	movs	r3, #128	@ 0x80
 8010520:	005b      	lsls	r3, r3, #1
 8010522:	4013      	ands	r3, r2
 8010524:	d014      	beq.n	8010550 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010526:	f7f9 fbfb 	bl	8009d20 <HAL_GetTick>
 801052a:	0003      	movs	r3, r0
 801052c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801052e:	e009      	b.n	8010544 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010530:	f7f9 fbf6 	bl	8009d20 <HAL_GetTick>
 8010534:	0002      	movs	r2, r0
 8010536:	693b      	ldr	r3, [r7, #16]
 8010538:	1ad3      	subs	r3, r2, r3
 801053a:	4a59      	ldr	r2, [pc, #356]	@ (80106a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 801053c:	4293      	cmp	r3, r2
 801053e:	d901      	bls.n	8010544 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8010540:	2303      	movs	r3, #3
 8010542:	e0a0      	b.n	8010686 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010544:	4b52      	ldr	r3, [pc, #328]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010546:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010548:	2380      	movs	r3, #128	@ 0x80
 801054a:	009b      	lsls	r3, r3, #2
 801054c:	4013      	ands	r3, r2
 801054e:	d0ef      	beq.n	8010530 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	2220      	movs	r2, #32
 8010556:	4013      	ands	r3, r2
 8010558:	d01f      	beq.n	801059a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	685a      	ldr	r2, [r3, #4]
 801055e:	23c0      	movs	r3, #192	@ 0xc0
 8010560:	029b      	lsls	r3, r3, #10
 8010562:	401a      	ands	r2, r3
 8010564:	23c0      	movs	r3, #192	@ 0xc0
 8010566:	029b      	lsls	r3, r3, #10
 8010568:	429a      	cmp	r2, r3
 801056a:	d10c      	bne.n	8010586 <HAL_RCCEx_PeriphCLKConfig+0x182>
 801056c:	4b48      	ldr	r3, [pc, #288]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	4a4c      	ldr	r2, [pc, #304]	@ (80106a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8010572:	4013      	ands	r3, r2
 8010574:	0019      	movs	r1, r3
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	685a      	ldr	r2, [r3, #4]
 801057a:	23c0      	movs	r3, #192	@ 0xc0
 801057c:	039b      	lsls	r3, r3, #14
 801057e:	401a      	ands	r2, r3
 8010580:	4b43      	ldr	r3, [pc, #268]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010582:	430a      	orrs	r2, r1
 8010584:	601a      	str	r2, [r3, #0]
 8010586:	4b42      	ldr	r3, [pc, #264]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010588:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	685a      	ldr	r2, [r3, #4]
 801058e:	23c0      	movs	r3, #192	@ 0xc0
 8010590:	029b      	lsls	r3, r3, #10
 8010592:	401a      	ands	r2, r3
 8010594:	4b3e      	ldr	r3, [pc, #248]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010596:	430a      	orrs	r2, r1
 8010598:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801059a:	2317      	movs	r3, #23
 801059c:	18fb      	adds	r3, r7, r3
 801059e:	781b      	ldrb	r3, [r3, #0]
 80105a0:	2b01      	cmp	r3, #1
 80105a2:	d105      	bne.n	80105b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80105a4:	4b3a      	ldr	r3, [pc, #232]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80105a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80105a8:	4b39      	ldr	r3, [pc, #228]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80105aa:	493f      	ldr	r1, [pc, #252]	@ (80106a8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80105ac:	400a      	ands	r2, r1
 80105ae:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	2201      	movs	r2, #1
 80105b6:	4013      	ands	r3, r2
 80105b8:	d009      	beq.n	80105ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80105ba:	4b35      	ldr	r3, [pc, #212]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80105bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80105be:	2203      	movs	r2, #3
 80105c0:	4393      	bics	r3, r2
 80105c2:	0019      	movs	r1, r3
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	689a      	ldr	r2, [r3, #8]
 80105c8:	4b31      	ldr	r3, [pc, #196]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80105ca:	430a      	orrs	r2, r1
 80105cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	2202      	movs	r2, #2
 80105d4:	4013      	ands	r3, r2
 80105d6:	d009      	beq.n	80105ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80105d8:	4b2d      	ldr	r3, [pc, #180]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80105da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80105dc:	220c      	movs	r2, #12
 80105de:	4393      	bics	r3, r2
 80105e0:	0019      	movs	r1, r3
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	68da      	ldr	r2, [r3, #12]
 80105e6:	4b2a      	ldr	r3, [pc, #168]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80105e8:	430a      	orrs	r2, r1
 80105ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	2204      	movs	r2, #4
 80105f2:	4013      	ands	r3, r2
 80105f4:	d009      	beq.n	801060a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80105f6:	4b26      	ldr	r3, [pc, #152]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80105f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80105fa:	4a2c      	ldr	r2, [pc, #176]	@ (80106ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80105fc:	4013      	ands	r3, r2
 80105fe:	0019      	movs	r1, r3
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	691a      	ldr	r2, [r3, #16]
 8010604:	4b22      	ldr	r3, [pc, #136]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010606:	430a      	orrs	r2, r1
 8010608:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	2208      	movs	r2, #8
 8010610:	4013      	ands	r3, r2
 8010612:	d009      	beq.n	8010628 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010614:	4b1e      	ldr	r3, [pc, #120]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010618:	4a25      	ldr	r2, [pc, #148]	@ (80106b0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801061a:	4013      	ands	r3, r2
 801061c:	0019      	movs	r1, r3
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	695a      	ldr	r2, [r3, #20]
 8010622:	4b1b      	ldr	r3, [pc, #108]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010624:	430a      	orrs	r2, r1
 8010626:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	681a      	ldr	r2, [r3, #0]
 801062c:	2380      	movs	r3, #128	@ 0x80
 801062e:	005b      	lsls	r3, r3, #1
 8010630:	4013      	ands	r3, r2
 8010632:	d009      	beq.n	8010648 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8010634:	4b16      	ldr	r3, [pc, #88]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010638:	4a17      	ldr	r2, [pc, #92]	@ (8010698 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801063a:	4013      	ands	r3, r2
 801063c:	0019      	movs	r1, r3
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	699a      	ldr	r2, [r3, #24]
 8010642:	4b13      	ldr	r3, [pc, #76]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010644:	430a      	orrs	r2, r1
 8010646:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	2240      	movs	r2, #64	@ 0x40
 801064e:	4013      	ands	r3, r2
 8010650:	d009      	beq.n	8010666 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010652:	4b0f      	ldr	r3, [pc, #60]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010656:	4a17      	ldr	r2, [pc, #92]	@ (80106b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8010658:	4013      	ands	r3, r2
 801065a:	0019      	movs	r1, r3
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	6a1a      	ldr	r2, [r3, #32]
 8010660:	4b0b      	ldr	r3, [pc, #44]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010662:	430a      	orrs	r2, r1
 8010664:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	2280      	movs	r2, #128	@ 0x80
 801066c:	4013      	ands	r3, r2
 801066e:	d009      	beq.n	8010684 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8010670:	4b07      	ldr	r3, [pc, #28]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010674:	4a10      	ldr	r2, [pc, #64]	@ (80106b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8010676:	4013      	ands	r3, r2
 8010678:	0019      	movs	r1, r3
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	69da      	ldr	r2, [r3, #28]
 801067e:	4b04      	ldr	r3, [pc, #16]	@ (8010690 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010680:	430a      	orrs	r2, r1
 8010682:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8010684:	2300      	movs	r3, #0
}
 8010686:	0018      	movs	r0, r3
 8010688:	46bd      	mov	sp, r7
 801068a:	b006      	add	sp, #24
 801068c:	bd80      	pop	{r7, pc}
 801068e:	46c0      	nop			@ (mov r8, r8)
 8010690:	40021000 	.word	0x40021000
 8010694:	40007000 	.word	0x40007000
 8010698:	fffcffff 	.word	0xfffcffff
 801069c:	fff7ffff 	.word	0xfff7ffff
 80106a0:	00001388 	.word	0x00001388
 80106a4:	ffcfffff 	.word	0xffcfffff
 80106a8:	efffffff 	.word	0xefffffff
 80106ac:	fffff3ff 	.word	0xfffff3ff
 80106b0:	ffffcfff 	.word	0xffffcfff
 80106b4:	fbffffff 	.word	0xfbffffff
 80106b8:	fff3ffff 	.word	0xfff3ffff

080106bc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80106bc:	b5b0      	push	{r4, r5, r7, lr}
 80106be:	b084      	sub	sp, #16
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80106c4:	230f      	movs	r3, #15
 80106c6:	18fb      	adds	r3, r7, r3
 80106c8:	2201      	movs	r2, #1
 80106ca:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d101      	bne.n	80106d6 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80106d2:	2301      	movs	r3, #1
 80106d4:	e088      	b.n	80107e8 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	2221      	movs	r2, #33	@ 0x21
 80106da:	5c9b      	ldrb	r3, [r3, r2]
 80106dc:	b2db      	uxtb	r3, r3
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d107      	bne.n	80106f2 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2220      	movs	r2, #32
 80106e6:	2100      	movs	r1, #0
 80106e8:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	0018      	movs	r0, r3
 80106ee:	f7f6 fdcd 	bl	800728c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	2221      	movs	r2, #33	@ 0x21
 80106f6:	2102      	movs	r1, #2
 80106f8:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	68db      	ldr	r3, [r3, #12]
 8010700:	2210      	movs	r2, #16
 8010702:	4013      	ands	r3, r2
 8010704:	2b10      	cmp	r3, #16
 8010706:	d05f      	beq.n	80107c8 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	22ca      	movs	r2, #202	@ 0xca
 801070e:	625a      	str	r2, [r3, #36]	@ 0x24
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	2253      	movs	r2, #83	@ 0x53
 8010716:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8010718:	250f      	movs	r5, #15
 801071a:	197c      	adds	r4, r7, r5
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	0018      	movs	r0, r3
 8010720:	f000 f890 	bl	8010844 <RTC_EnterInitMode>
 8010724:	0003      	movs	r3, r0
 8010726:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8010728:	0028      	movs	r0, r5
 801072a:	183b      	adds	r3, r7, r0
 801072c:	781b      	ldrb	r3, [r3, #0]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d12c      	bne.n	801078c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	689a      	ldr	r2, [r3, #8]
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	492c      	ldr	r1, [pc, #176]	@ (80107f0 <HAL_RTC_Init+0x134>)
 801073e:	400a      	ands	r2, r1
 8010740:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	6899      	ldr	r1, [r3, #8]
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	685a      	ldr	r2, [r3, #4]
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	691b      	ldr	r3, [r3, #16]
 8010750:	431a      	orrs	r2, r3
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	699b      	ldr	r3, [r3, #24]
 8010756:	431a      	orrs	r2, r3
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	430a      	orrs	r2, r1
 801075e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	687a      	ldr	r2, [r7, #4]
 8010766:	68d2      	ldr	r2, [r2, #12]
 8010768:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	6919      	ldr	r1, [r3, #16]
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	689b      	ldr	r3, [r3, #8]
 8010774:	041a      	lsls	r2, r3, #16
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	430a      	orrs	r2, r1
 801077c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801077e:	183c      	adds	r4, r7, r0
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	0018      	movs	r0, r3
 8010784:	f000 f8a2 	bl	80108cc <RTC_ExitInitMode>
 8010788:	0003      	movs	r3, r0
 801078a:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 801078c:	230f      	movs	r3, #15
 801078e:	18fb      	adds	r3, r7, r3
 8010790:	781b      	ldrb	r3, [r3, #0]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d113      	bne.n	80107be <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	2103      	movs	r1, #3
 80107a2:	438a      	bics	r2, r1
 80107a4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	69da      	ldr	r2, [r3, #28]
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	695b      	ldr	r3, [r3, #20]
 80107b4:	431a      	orrs	r2, r3
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	430a      	orrs	r2, r1
 80107bc:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	22ff      	movs	r2, #255	@ 0xff
 80107c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80107c6:	e003      	b.n	80107d0 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80107c8:	230f      	movs	r3, #15
 80107ca:	18fb      	adds	r3, r7, r3
 80107cc:	2200      	movs	r2, #0
 80107ce:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80107d0:	230f      	movs	r3, #15
 80107d2:	18fb      	adds	r3, r7, r3
 80107d4:	781b      	ldrb	r3, [r3, #0]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d103      	bne.n	80107e2 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2221      	movs	r2, #33	@ 0x21
 80107de:	2101      	movs	r1, #1
 80107e0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80107e2:	230f      	movs	r3, #15
 80107e4:	18fb      	adds	r3, r7, r3
 80107e6:	781b      	ldrb	r3, [r3, #0]
}
 80107e8:	0018      	movs	r0, r3
 80107ea:	46bd      	mov	sp, r7
 80107ec:	b004      	add	sp, #16
 80107ee:	bdb0      	pop	{r4, r5, r7, pc}
 80107f0:	ff8fffbf 	.word	0xff8fffbf

080107f4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b084      	sub	sp, #16
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80107fc:	2300      	movs	r3, #0
 80107fe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	4a0e      	ldr	r2, [pc, #56]	@ (8010840 <HAL_RTC_WaitForSynchro+0x4c>)
 8010806:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010808:	f7f9 fa8a 	bl	8009d20 <HAL_GetTick>
 801080c:	0003      	movs	r3, r0
 801080e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010810:	e00a      	b.n	8010828 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010812:	f7f9 fa85 	bl	8009d20 <HAL_GetTick>
 8010816:	0002      	movs	r2, r0
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	1ad2      	subs	r2, r2, r3
 801081c:	23fa      	movs	r3, #250	@ 0xfa
 801081e:	009b      	lsls	r3, r3, #2
 8010820:	429a      	cmp	r2, r3
 8010822:	d901      	bls.n	8010828 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8010824:	2303      	movs	r3, #3
 8010826:	e006      	b.n	8010836 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	68db      	ldr	r3, [r3, #12]
 801082e:	2220      	movs	r2, #32
 8010830:	4013      	ands	r3, r2
 8010832:	d0ee      	beq.n	8010812 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8010834:	2300      	movs	r3, #0
}
 8010836:	0018      	movs	r0, r3
 8010838:	46bd      	mov	sp, r7
 801083a:	b004      	add	sp, #16
 801083c:	bd80      	pop	{r7, pc}
 801083e:	46c0      	nop			@ (mov r8, r8)
 8010840:	0001ff5f 	.word	0x0001ff5f

08010844 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b084      	sub	sp, #16
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801084c:	2300      	movs	r3, #0
 801084e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8010850:	230f      	movs	r3, #15
 8010852:	18fb      	adds	r3, r7, r3
 8010854:	2200      	movs	r2, #0
 8010856:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	68db      	ldr	r3, [r3, #12]
 801085e:	2240      	movs	r2, #64	@ 0x40
 8010860:	4013      	ands	r3, r2
 8010862:	d12c      	bne.n	80108be <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	68da      	ldr	r2, [r3, #12]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	2180      	movs	r1, #128	@ 0x80
 8010870:	430a      	orrs	r2, r1
 8010872:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8010874:	f7f9 fa54 	bl	8009d20 <HAL_GetTick>
 8010878:	0003      	movs	r3, r0
 801087a:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 801087c:	e014      	b.n	80108a8 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801087e:	f7f9 fa4f 	bl	8009d20 <HAL_GetTick>
 8010882:	0002      	movs	r2, r0
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	1ad2      	subs	r2, r2, r3
 8010888:	200f      	movs	r0, #15
 801088a:	183b      	adds	r3, r7, r0
 801088c:	1839      	adds	r1, r7, r0
 801088e:	7809      	ldrb	r1, [r1, #0]
 8010890:	7019      	strb	r1, [r3, #0]
 8010892:	23fa      	movs	r3, #250	@ 0xfa
 8010894:	009b      	lsls	r3, r3, #2
 8010896:	429a      	cmp	r2, r3
 8010898:	d906      	bls.n	80108a8 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	2221      	movs	r2, #33	@ 0x21
 801089e:	2104      	movs	r1, #4
 80108a0:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80108a2:	183b      	adds	r3, r7, r0
 80108a4:	2201      	movs	r2, #1
 80108a6:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	68db      	ldr	r3, [r3, #12]
 80108ae:	2240      	movs	r2, #64	@ 0x40
 80108b0:	4013      	ands	r3, r2
 80108b2:	d104      	bne.n	80108be <RTC_EnterInitMode+0x7a>
 80108b4:	230f      	movs	r3, #15
 80108b6:	18fb      	adds	r3, r7, r3
 80108b8:	781b      	ldrb	r3, [r3, #0]
 80108ba:	2b01      	cmp	r3, #1
 80108bc:	d1df      	bne.n	801087e <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80108be:	230f      	movs	r3, #15
 80108c0:	18fb      	adds	r3, r7, r3
 80108c2:	781b      	ldrb	r3, [r3, #0]
}
 80108c4:	0018      	movs	r0, r3
 80108c6:	46bd      	mov	sp, r7
 80108c8:	b004      	add	sp, #16
 80108ca:	bd80      	pop	{r7, pc}

080108cc <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80108cc:	b590      	push	{r4, r7, lr}
 80108ce:	b085      	sub	sp, #20
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80108d4:	240f      	movs	r4, #15
 80108d6:	193b      	adds	r3, r7, r4
 80108d8:	2200      	movs	r2, #0
 80108da:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	68da      	ldr	r2, [r3, #12]
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	2180      	movs	r1, #128	@ 0x80
 80108e8:	438a      	bics	r2, r1
 80108ea:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	689b      	ldr	r3, [r3, #8]
 80108f2:	2220      	movs	r2, #32
 80108f4:	4013      	ands	r3, r2
 80108f6:	d10c      	bne.n	8010912 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	0018      	movs	r0, r3
 80108fc:	f7ff ff7a 	bl	80107f4 <HAL_RTC_WaitForSynchro>
 8010900:	1e03      	subs	r3, r0, #0
 8010902:	d006      	beq.n	8010912 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	2221      	movs	r2, #33	@ 0x21
 8010908:	2104      	movs	r1, #4
 801090a:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 801090c:	193b      	adds	r3, r7, r4
 801090e:	2201      	movs	r2, #1
 8010910:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8010912:	230f      	movs	r3, #15
 8010914:	18fb      	adds	r3, r7, r3
 8010916:	781b      	ldrb	r3, [r3, #0]
}
 8010918:	0018      	movs	r0, r3
 801091a:	46bd      	mov	sp, r7
 801091c:	b005      	add	sp, #20
 801091e:	bd90      	pop	{r4, r7, pc}

08010920 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010920:	b580      	push	{r7, lr}
 8010922:	b082      	sub	sp, #8
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d101      	bne.n	8010932 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801092e:	2301      	movs	r3, #1
 8010930:	e032      	b.n	8010998 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	2239      	movs	r2, #57	@ 0x39
 8010936:	5c9b      	ldrb	r3, [r3, r2]
 8010938:	b2db      	uxtb	r3, r3
 801093a:	2b00      	cmp	r3, #0
 801093c:	d107      	bne.n	801094e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	2238      	movs	r2, #56	@ 0x38
 8010942:	2100      	movs	r1, #0
 8010944:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	0018      	movs	r0, r3
 801094a:	f7f8 fba1 	bl	8009090 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	2239      	movs	r2, #57	@ 0x39
 8010952:	2102      	movs	r1, #2
 8010954:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681a      	ldr	r2, [r3, #0]
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	3304      	adds	r3, #4
 801095e:	0019      	movs	r1, r3
 8010960:	0010      	movs	r0, r2
 8010962:	f000 f975 	bl	8010c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	223e      	movs	r2, #62	@ 0x3e
 801096a:	2101      	movs	r1, #1
 801096c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	223a      	movs	r2, #58	@ 0x3a
 8010972:	2101      	movs	r1, #1
 8010974:	5499      	strb	r1, [r3, r2]
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	223b      	movs	r2, #59	@ 0x3b
 801097a:	2101      	movs	r1, #1
 801097c:	5499      	strb	r1, [r3, r2]
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	223c      	movs	r2, #60	@ 0x3c
 8010982:	2101      	movs	r1, #1
 8010984:	5499      	strb	r1, [r3, r2]
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	223d      	movs	r2, #61	@ 0x3d
 801098a:	2101      	movs	r1, #1
 801098c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	2239      	movs	r2, #57	@ 0x39
 8010992:	2101      	movs	r1, #1
 8010994:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010996:	2300      	movs	r3, #0
}
 8010998:	0018      	movs	r0, r3
 801099a:	46bd      	mov	sp, r7
 801099c:	b002      	add	sp, #8
 801099e:	bd80      	pop	{r7, pc}

080109a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b084      	sub	sp, #16
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
 80109a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80109aa:	683b      	ldr	r3, [r7, #0]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d108      	bne.n	80109c2 <HAL_TIM_PWM_Start+0x22>
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	223a      	movs	r2, #58	@ 0x3a
 80109b4:	5c9b      	ldrb	r3, [r3, r2]
 80109b6:	b2db      	uxtb	r3, r3
 80109b8:	3b01      	subs	r3, #1
 80109ba:	1e5a      	subs	r2, r3, #1
 80109bc:	4193      	sbcs	r3, r2
 80109be:	b2db      	uxtb	r3, r3
 80109c0:	e01f      	b.n	8010a02 <HAL_TIM_PWM_Start+0x62>
 80109c2:	683b      	ldr	r3, [r7, #0]
 80109c4:	2b04      	cmp	r3, #4
 80109c6:	d108      	bne.n	80109da <HAL_TIM_PWM_Start+0x3a>
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	223b      	movs	r2, #59	@ 0x3b
 80109cc:	5c9b      	ldrb	r3, [r3, r2]
 80109ce:	b2db      	uxtb	r3, r3
 80109d0:	3b01      	subs	r3, #1
 80109d2:	1e5a      	subs	r2, r3, #1
 80109d4:	4193      	sbcs	r3, r2
 80109d6:	b2db      	uxtb	r3, r3
 80109d8:	e013      	b.n	8010a02 <HAL_TIM_PWM_Start+0x62>
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	2b08      	cmp	r3, #8
 80109de:	d108      	bne.n	80109f2 <HAL_TIM_PWM_Start+0x52>
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	223c      	movs	r2, #60	@ 0x3c
 80109e4:	5c9b      	ldrb	r3, [r3, r2]
 80109e6:	b2db      	uxtb	r3, r3
 80109e8:	3b01      	subs	r3, #1
 80109ea:	1e5a      	subs	r2, r3, #1
 80109ec:	4193      	sbcs	r3, r2
 80109ee:	b2db      	uxtb	r3, r3
 80109f0:	e007      	b.n	8010a02 <HAL_TIM_PWM_Start+0x62>
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	223d      	movs	r2, #61	@ 0x3d
 80109f6:	5c9b      	ldrb	r3, [r3, r2]
 80109f8:	b2db      	uxtb	r3, r3
 80109fa:	3b01      	subs	r3, #1
 80109fc:	1e5a      	subs	r2, r3, #1
 80109fe:	4193      	sbcs	r3, r2
 8010a00:	b2db      	uxtb	r3, r3
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d001      	beq.n	8010a0a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8010a06:	2301      	movs	r3, #1
 8010a08:	e052      	b.n	8010ab0 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d104      	bne.n	8010a1a <HAL_TIM_PWM_Start+0x7a>
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	223a      	movs	r2, #58	@ 0x3a
 8010a14:	2102      	movs	r1, #2
 8010a16:	5499      	strb	r1, [r3, r2]
 8010a18:	e013      	b.n	8010a42 <HAL_TIM_PWM_Start+0xa2>
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	2b04      	cmp	r3, #4
 8010a1e:	d104      	bne.n	8010a2a <HAL_TIM_PWM_Start+0x8a>
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	223b      	movs	r2, #59	@ 0x3b
 8010a24:	2102      	movs	r1, #2
 8010a26:	5499      	strb	r1, [r3, r2]
 8010a28:	e00b      	b.n	8010a42 <HAL_TIM_PWM_Start+0xa2>
 8010a2a:	683b      	ldr	r3, [r7, #0]
 8010a2c:	2b08      	cmp	r3, #8
 8010a2e:	d104      	bne.n	8010a3a <HAL_TIM_PWM_Start+0x9a>
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	223c      	movs	r2, #60	@ 0x3c
 8010a34:	2102      	movs	r1, #2
 8010a36:	5499      	strb	r1, [r3, r2]
 8010a38:	e003      	b.n	8010a42 <HAL_TIM_PWM_Start+0xa2>
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	223d      	movs	r2, #61	@ 0x3d
 8010a3e:	2102      	movs	r1, #2
 8010a40:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	6839      	ldr	r1, [r7, #0]
 8010a48:	2201      	movs	r2, #1
 8010a4a:	0018      	movs	r0, r3
 8010a4c:	f000 fa62 	bl	8010f14 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681a      	ldr	r2, [r3, #0]
 8010a54:	2380      	movs	r3, #128	@ 0x80
 8010a56:	05db      	lsls	r3, r3, #23
 8010a58:	429a      	cmp	r2, r3
 8010a5a:	d00e      	beq.n	8010a7a <HAL_TIM_PWM_Start+0xda>
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	4a15      	ldr	r2, [pc, #84]	@ (8010ab8 <HAL_TIM_PWM_Start+0x118>)
 8010a62:	4293      	cmp	r3, r2
 8010a64:	d009      	beq.n	8010a7a <HAL_TIM_PWM_Start+0xda>
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	4a14      	ldr	r2, [pc, #80]	@ (8010abc <HAL_TIM_PWM_Start+0x11c>)
 8010a6c:	4293      	cmp	r3, r2
 8010a6e:	d004      	beq.n	8010a7a <HAL_TIM_PWM_Start+0xda>
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	4a12      	ldr	r2, [pc, #72]	@ (8010ac0 <HAL_TIM_PWM_Start+0x120>)
 8010a76:	4293      	cmp	r3, r2
 8010a78:	d111      	bne.n	8010a9e <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	689b      	ldr	r3, [r3, #8]
 8010a80:	2207      	movs	r2, #7
 8010a82:	4013      	ands	r3, r2
 8010a84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	2b06      	cmp	r3, #6
 8010a8a:	d010      	beq.n	8010aae <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	681a      	ldr	r2, [r3, #0]
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	2101      	movs	r1, #1
 8010a98:	430a      	orrs	r2, r1
 8010a9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010a9c:	e007      	b.n	8010aae <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	681a      	ldr	r2, [r3, #0]
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	2101      	movs	r1, #1
 8010aaa:	430a      	orrs	r2, r1
 8010aac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8010aae:	2300      	movs	r3, #0
}
 8010ab0:	0018      	movs	r0, r3
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	b004      	add	sp, #16
 8010ab6:	bd80      	pop	{r7, pc}
 8010ab8:	40000400 	.word	0x40000400
 8010abc:	40010800 	.word	0x40010800
 8010ac0:	40011400 	.word	0x40011400

08010ac4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b086      	sub	sp, #24
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	60f8      	str	r0, [r7, #12]
 8010acc:	60b9      	str	r1, [r7, #8]
 8010ace:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010ad0:	2317      	movs	r3, #23
 8010ad2:	18fb      	adds	r3, r7, r3
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	2238      	movs	r2, #56	@ 0x38
 8010adc:	5c9b      	ldrb	r3, [r3, r2]
 8010ade:	2b01      	cmp	r3, #1
 8010ae0:	d101      	bne.n	8010ae6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8010ae2:	2302      	movs	r3, #2
 8010ae4:	e0ad      	b.n	8010c42 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	2238      	movs	r2, #56	@ 0x38
 8010aea:	2101      	movs	r1, #1
 8010aec:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	2b0c      	cmp	r3, #12
 8010af2:	d100      	bne.n	8010af6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8010af4:	e076      	b.n	8010be4 <HAL_TIM_PWM_ConfigChannel+0x120>
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	2b0c      	cmp	r3, #12
 8010afa:	d900      	bls.n	8010afe <HAL_TIM_PWM_ConfigChannel+0x3a>
 8010afc:	e095      	b.n	8010c2a <HAL_TIM_PWM_ConfigChannel+0x166>
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	2b08      	cmp	r3, #8
 8010b02:	d04e      	beq.n	8010ba2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2b08      	cmp	r3, #8
 8010b08:	d900      	bls.n	8010b0c <HAL_TIM_PWM_ConfigChannel+0x48>
 8010b0a:	e08e      	b.n	8010c2a <HAL_TIM_PWM_ConfigChannel+0x166>
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d003      	beq.n	8010b1a <HAL_TIM_PWM_ConfigChannel+0x56>
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	2b04      	cmp	r3, #4
 8010b16:	d021      	beq.n	8010b5c <HAL_TIM_PWM_ConfigChannel+0x98>
 8010b18:	e087      	b.n	8010c2a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	68ba      	ldr	r2, [r7, #8]
 8010b20:	0011      	movs	r1, r2
 8010b22:	0018      	movs	r0, r3
 8010b24:	f000 f8f2 	bl	8010d0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	699a      	ldr	r2, [r3, #24]
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	2108      	movs	r1, #8
 8010b34:	430a      	orrs	r2, r1
 8010b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	699a      	ldr	r2, [r3, #24]
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	2104      	movs	r1, #4
 8010b44:	438a      	bics	r2, r1
 8010b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	6999      	ldr	r1, [r3, #24]
 8010b4e:	68bb      	ldr	r3, [r7, #8]
 8010b50:	68da      	ldr	r2, [r3, #12]
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	430a      	orrs	r2, r1
 8010b58:	619a      	str	r2, [r3, #24]
      break;
 8010b5a:	e06b      	b.n	8010c34 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	68ba      	ldr	r2, [r7, #8]
 8010b62:	0011      	movs	r1, r2
 8010b64:	0018      	movs	r0, r3
 8010b66:	f000 f90d 	bl	8010d84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	699a      	ldr	r2, [r3, #24]
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	2180      	movs	r1, #128	@ 0x80
 8010b76:	0109      	lsls	r1, r1, #4
 8010b78:	430a      	orrs	r2, r1
 8010b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	699a      	ldr	r2, [r3, #24]
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	4931      	ldr	r1, [pc, #196]	@ (8010c4c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8010b88:	400a      	ands	r2, r1
 8010b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	6999      	ldr	r1, [r3, #24]
 8010b92:	68bb      	ldr	r3, [r7, #8]
 8010b94:	68db      	ldr	r3, [r3, #12]
 8010b96:	021a      	lsls	r2, r3, #8
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	430a      	orrs	r2, r1
 8010b9e:	619a      	str	r2, [r3, #24]
      break;
 8010ba0:	e048      	b.n	8010c34 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	68ba      	ldr	r2, [r7, #8]
 8010ba8:	0011      	movs	r1, r2
 8010baa:	0018      	movs	r0, r3
 8010bac:	f000 f92c 	bl	8010e08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	69da      	ldr	r2, [r3, #28]
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	2108      	movs	r1, #8
 8010bbc:	430a      	orrs	r2, r1
 8010bbe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	69da      	ldr	r2, [r3, #28]
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	2104      	movs	r1, #4
 8010bcc:	438a      	bics	r2, r1
 8010bce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	69d9      	ldr	r1, [r3, #28]
 8010bd6:	68bb      	ldr	r3, [r7, #8]
 8010bd8:	68da      	ldr	r2, [r3, #12]
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	430a      	orrs	r2, r1
 8010be0:	61da      	str	r2, [r3, #28]
      break;
 8010be2:	e027      	b.n	8010c34 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	68ba      	ldr	r2, [r7, #8]
 8010bea:	0011      	movs	r1, r2
 8010bec:	0018      	movs	r0, r3
 8010bee:	f000 f94b 	bl	8010e88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	69da      	ldr	r2, [r3, #28]
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	2180      	movs	r1, #128	@ 0x80
 8010bfe:	0109      	lsls	r1, r1, #4
 8010c00:	430a      	orrs	r2, r1
 8010c02:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	69da      	ldr	r2, [r3, #28]
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	490f      	ldr	r1, [pc, #60]	@ (8010c4c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8010c10:	400a      	ands	r2, r1
 8010c12:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	69d9      	ldr	r1, [r3, #28]
 8010c1a:	68bb      	ldr	r3, [r7, #8]
 8010c1c:	68db      	ldr	r3, [r3, #12]
 8010c1e:	021a      	lsls	r2, r3, #8
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	430a      	orrs	r2, r1
 8010c26:	61da      	str	r2, [r3, #28]
      break;
 8010c28:	e004      	b.n	8010c34 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8010c2a:	2317      	movs	r3, #23
 8010c2c:	18fb      	adds	r3, r7, r3
 8010c2e:	2201      	movs	r2, #1
 8010c30:	701a      	strb	r2, [r3, #0]
      break;
 8010c32:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	2238      	movs	r2, #56	@ 0x38
 8010c38:	2100      	movs	r1, #0
 8010c3a:	5499      	strb	r1, [r3, r2]

  return status;
 8010c3c:	2317      	movs	r3, #23
 8010c3e:	18fb      	adds	r3, r7, r3
 8010c40:	781b      	ldrb	r3, [r3, #0]
}
 8010c42:	0018      	movs	r0, r3
 8010c44:	46bd      	mov	sp, r7
 8010c46:	b006      	add	sp, #24
 8010c48:	bd80      	pop	{r7, pc}
 8010c4a:	46c0      	nop			@ (mov r8, r8)
 8010c4c:	fffffbff 	.word	0xfffffbff

08010c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b084      	sub	sp, #16
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
 8010c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010c60:	687a      	ldr	r2, [r7, #4]
 8010c62:	2380      	movs	r3, #128	@ 0x80
 8010c64:	05db      	lsls	r3, r3, #23
 8010c66:	429a      	cmp	r2, r3
 8010c68:	d00b      	beq.n	8010c82 <TIM_Base_SetConfig+0x32>
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	4a23      	ldr	r2, [pc, #140]	@ (8010cfc <TIM_Base_SetConfig+0xac>)
 8010c6e:	4293      	cmp	r3, r2
 8010c70:	d007      	beq.n	8010c82 <TIM_Base_SetConfig+0x32>
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	4a22      	ldr	r2, [pc, #136]	@ (8010d00 <TIM_Base_SetConfig+0xb0>)
 8010c76:	4293      	cmp	r3, r2
 8010c78:	d003      	beq.n	8010c82 <TIM_Base_SetConfig+0x32>
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	4a21      	ldr	r2, [pc, #132]	@ (8010d04 <TIM_Base_SetConfig+0xb4>)
 8010c7e:	4293      	cmp	r3, r2
 8010c80:	d108      	bne.n	8010c94 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	2270      	movs	r2, #112	@ 0x70
 8010c86:	4393      	bics	r3, r2
 8010c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010c8a:	683b      	ldr	r3, [r7, #0]
 8010c8c:	685b      	ldr	r3, [r3, #4]
 8010c8e:	68fa      	ldr	r2, [r7, #12]
 8010c90:	4313      	orrs	r3, r2
 8010c92:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010c94:	687a      	ldr	r2, [r7, #4]
 8010c96:	2380      	movs	r3, #128	@ 0x80
 8010c98:	05db      	lsls	r3, r3, #23
 8010c9a:	429a      	cmp	r2, r3
 8010c9c:	d00b      	beq.n	8010cb6 <TIM_Base_SetConfig+0x66>
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	4a16      	ldr	r2, [pc, #88]	@ (8010cfc <TIM_Base_SetConfig+0xac>)
 8010ca2:	4293      	cmp	r3, r2
 8010ca4:	d007      	beq.n	8010cb6 <TIM_Base_SetConfig+0x66>
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	4a15      	ldr	r2, [pc, #84]	@ (8010d00 <TIM_Base_SetConfig+0xb0>)
 8010caa:	4293      	cmp	r3, r2
 8010cac:	d003      	beq.n	8010cb6 <TIM_Base_SetConfig+0x66>
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	4a14      	ldr	r2, [pc, #80]	@ (8010d04 <TIM_Base_SetConfig+0xb4>)
 8010cb2:	4293      	cmp	r3, r2
 8010cb4:	d108      	bne.n	8010cc8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	4a13      	ldr	r2, [pc, #76]	@ (8010d08 <TIM_Base_SetConfig+0xb8>)
 8010cba:	4013      	ands	r3, r2
 8010cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	68db      	ldr	r3, [r3, #12]
 8010cc2:	68fa      	ldr	r2, [r7, #12]
 8010cc4:	4313      	orrs	r3, r2
 8010cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	2280      	movs	r2, #128	@ 0x80
 8010ccc:	4393      	bics	r3, r2
 8010cce:	001a      	movs	r2, r3
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	691b      	ldr	r3, [r3, #16]
 8010cd4:	4313      	orrs	r3, r2
 8010cd6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	68fa      	ldr	r2, [r7, #12]
 8010cdc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	689a      	ldr	r2, [r3, #8]
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	681a      	ldr	r2, [r3, #0]
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	2201      	movs	r2, #1
 8010cf2:	615a      	str	r2, [r3, #20]
}
 8010cf4:	46c0      	nop			@ (mov r8, r8)
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	b004      	add	sp, #16
 8010cfa:	bd80      	pop	{r7, pc}
 8010cfc:	40000400 	.word	0x40000400
 8010d00:	40010800 	.word	0x40010800
 8010d04:	40011400 	.word	0x40011400
 8010d08:	fffffcff 	.word	0xfffffcff

08010d0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b086      	sub	sp, #24
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
 8010d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	6a1b      	ldr	r3, [r3, #32]
 8010d1a:	2201      	movs	r2, #1
 8010d1c:	4393      	bics	r3, r2
 8010d1e:	001a      	movs	r2, r3
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6a1b      	ldr	r3, [r3, #32]
 8010d28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	685b      	ldr	r3, [r3, #4]
 8010d2e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	699b      	ldr	r3, [r3, #24]
 8010d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	2270      	movs	r2, #112	@ 0x70
 8010d3a:	4393      	bics	r3, r2
 8010d3c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	2203      	movs	r2, #3
 8010d42:	4393      	bics	r3, r2
 8010d44:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	68fa      	ldr	r2, [r7, #12]
 8010d4c:	4313      	orrs	r3, r2
 8010d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010d50:	697b      	ldr	r3, [r7, #20]
 8010d52:	2202      	movs	r2, #2
 8010d54:	4393      	bics	r3, r2
 8010d56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	689b      	ldr	r3, [r3, #8]
 8010d5c:	697a      	ldr	r2, [r7, #20]
 8010d5e:	4313      	orrs	r3, r2
 8010d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	693a      	ldr	r2, [r7, #16]
 8010d66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	68fa      	ldr	r2, [r7, #12]
 8010d6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010d6e:	683b      	ldr	r3, [r7, #0]
 8010d70:	685a      	ldr	r2, [r3, #4]
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	697a      	ldr	r2, [r7, #20]
 8010d7a:	621a      	str	r2, [r3, #32]
}
 8010d7c:	46c0      	nop			@ (mov r8, r8)
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	b006      	add	sp, #24
 8010d82:	bd80      	pop	{r7, pc}

08010d84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b086      	sub	sp, #24
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
 8010d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	6a1b      	ldr	r3, [r3, #32]
 8010d92:	2210      	movs	r2, #16
 8010d94:	4393      	bics	r3, r2
 8010d96:	001a      	movs	r2, r3
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	6a1b      	ldr	r3, [r3, #32]
 8010da0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	685b      	ldr	r3, [r3, #4]
 8010da6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	699b      	ldr	r3, [r3, #24]
 8010dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	4a13      	ldr	r2, [pc, #76]	@ (8010e00 <TIM_OC2_SetConfig+0x7c>)
 8010db2:	4013      	ands	r3, r2
 8010db4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	4a12      	ldr	r2, [pc, #72]	@ (8010e04 <TIM_OC2_SetConfig+0x80>)
 8010dba:	4013      	ands	r3, r2
 8010dbc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	021b      	lsls	r3, r3, #8
 8010dc4:	68fa      	ldr	r2, [r7, #12]
 8010dc6:	4313      	orrs	r3, r2
 8010dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010dca:	697b      	ldr	r3, [r7, #20]
 8010dcc:	2220      	movs	r2, #32
 8010dce:	4393      	bics	r3, r2
 8010dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010dd2:	683b      	ldr	r3, [r7, #0]
 8010dd4:	689b      	ldr	r3, [r3, #8]
 8010dd6:	011b      	lsls	r3, r3, #4
 8010dd8:	697a      	ldr	r2, [r7, #20]
 8010dda:	4313      	orrs	r3, r2
 8010ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	693a      	ldr	r2, [r7, #16]
 8010de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	68fa      	ldr	r2, [r7, #12]
 8010de8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010dea:	683b      	ldr	r3, [r7, #0]
 8010dec:	685a      	ldr	r2, [r3, #4]
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	697a      	ldr	r2, [r7, #20]
 8010df6:	621a      	str	r2, [r3, #32]
}
 8010df8:	46c0      	nop			@ (mov r8, r8)
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	b006      	add	sp, #24
 8010dfe:	bd80      	pop	{r7, pc}
 8010e00:	ffff8fff 	.word	0xffff8fff
 8010e04:	fffffcff 	.word	0xfffffcff

08010e08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b086      	sub	sp, #24
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
 8010e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	6a1b      	ldr	r3, [r3, #32]
 8010e16:	4a1a      	ldr	r2, [pc, #104]	@ (8010e80 <TIM_OC3_SetConfig+0x78>)
 8010e18:	401a      	ands	r2, r3
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	6a1b      	ldr	r3, [r3, #32]
 8010e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	685b      	ldr	r3, [r3, #4]
 8010e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	69db      	ldr	r3, [r3, #28]
 8010e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	2270      	movs	r2, #112	@ 0x70
 8010e34:	4393      	bics	r3, r2
 8010e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	2203      	movs	r2, #3
 8010e3c:	4393      	bics	r3, r2
 8010e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	68fa      	ldr	r2, [r7, #12]
 8010e46:	4313      	orrs	r3, r2
 8010e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010e4a:	697b      	ldr	r3, [r7, #20]
 8010e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8010e84 <TIM_OC3_SetConfig+0x7c>)
 8010e4e:	4013      	ands	r3, r2
 8010e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010e52:	683b      	ldr	r3, [r7, #0]
 8010e54:	689b      	ldr	r3, [r3, #8]
 8010e56:	021b      	lsls	r3, r3, #8
 8010e58:	697a      	ldr	r2, [r7, #20]
 8010e5a:	4313      	orrs	r3, r2
 8010e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	693a      	ldr	r2, [r7, #16]
 8010e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	68fa      	ldr	r2, [r7, #12]
 8010e68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	685a      	ldr	r2, [r3, #4]
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	697a      	ldr	r2, [r7, #20]
 8010e76:	621a      	str	r2, [r3, #32]
}
 8010e78:	46c0      	nop			@ (mov r8, r8)
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	b006      	add	sp, #24
 8010e7e:	bd80      	pop	{r7, pc}
 8010e80:	fffffeff 	.word	0xfffffeff
 8010e84:	fffffdff 	.word	0xfffffdff

08010e88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b086      	sub	sp, #24
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
 8010e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6a1b      	ldr	r3, [r3, #32]
 8010e96:	4a1b      	ldr	r2, [pc, #108]	@ (8010f04 <TIM_OC4_SetConfig+0x7c>)
 8010e98:	401a      	ands	r2, r3
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	6a1b      	ldr	r3, [r3, #32]
 8010ea2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	685b      	ldr	r3, [r3, #4]
 8010ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	69db      	ldr	r3, [r3, #28]
 8010eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	4a15      	ldr	r2, [pc, #84]	@ (8010f08 <TIM_OC4_SetConfig+0x80>)
 8010eb4:	4013      	ands	r3, r2
 8010eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	4a14      	ldr	r2, [pc, #80]	@ (8010f0c <TIM_OC4_SetConfig+0x84>)
 8010ebc:	4013      	ands	r3, r2
 8010ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010ec0:	683b      	ldr	r3, [r7, #0]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	021b      	lsls	r3, r3, #8
 8010ec6:	68fa      	ldr	r2, [r7, #12]
 8010ec8:	4313      	orrs	r3, r2
 8010eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010ecc:	697b      	ldr	r3, [r7, #20]
 8010ece:	4a10      	ldr	r2, [pc, #64]	@ (8010f10 <TIM_OC4_SetConfig+0x88>)
 8010ed0:	4013      	ands	r3, r2
 8010ed2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	689b      	ldr	r3, [r3, #8]
 8010ed8:	031b      	lsls	r3, r3, #12
 8010eda:	697a      	ldr	r2, [r7, #20]
 8010edc:	4313      	orrs	r3, r2
 8010ede:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	693a      	ldr	r2, [r7, #16]
 8010ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	68fa      	ldr	r2, [r7, #12]
 8010eea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010eec:	683b      	ldr	r3, [r7, #0]
 8010eee:	685a      	ldr	r2, [r3, #4]
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	697a      	ldr	r2, [r7, #20]
 8010ef8:	621a      	str	r2, [r3, #32]
}
 8010efa:	46c0      	nop			@ (mov r8, r8)
 8010efc:	46bd      	mov	sp, r7
 8010efe:	b006      	add	sp, #24
 8010f00:	bd80      	pop	{r7, pc}
 8010f02:	46c0      	nop			@ (mov r8, r8)
 8010f04:	ffffefff 	.word	0xffffefff
 8010f08:	ffff8fff 	.word	0xffff8fff
 8010f0c:	fffffcff 	.word	0xfffffcff
 8010f10:	ffffdfff 	.word	0xffffdfff

08010f14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b086      	sub	sp, #24
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	60f8      	str	r0, [r7, #12]
 8010f1c:	60b9      	str	r1, [r7, #8]
 8010f1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010f20:	68bb      	ldr	r3, [r7, #8]
 8010f22:	221f      	movs	r2, #31
 8010f24:	4013      	ands	r3, r2
 8010f26:	2201      	movs	r2, #1
 8010f28:	409a      	lsls	r2, r3
 8010f2a:	0013      	movs	r3, r2
 8010f2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	6a1b      	ldr	r3, [r3, #32]
 8010f32:	697a      	ldr	r2, [r7, #20]
 8010f34:	43d2      	mvns	r2, r2
 8010f36:	401a      	ands	r2, r3
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	6a1a      	ldr	r2, [r3, #32]
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	211f      	movs	r1, #31
 8010f44:	400b      	ands	r3, r1
 8010f46:	6879      	ldr	r1, [r7, #4]
 8010f48:	4099      	lsls	r1, r3
 8010f4a:	000b      	movs	r3, r1
 8010f4c:	431a      	orrs	r2, r3
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	621a      	str	r2, [r3, #32]
}
 8010f52:	46c0      	nop			@ (mov r8, r8)
 8010f54:	46bd      	mov	sp, r7
 8010f56:	b006      	add	sp, #24
 8010f58:	bd80      	pop	{r7, pc}
	...

08010f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b084      	sub	sp, #16
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
 8010f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	2238      	movs	r2, #56	@ 0x38
 8010f6a:	5c9b      	ldrb	r3, [r3, r2]
 8010f6c:	2b01      	cmp	r3, #1
 8010f6e:	d101      	bne.n	8010f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010f70:	2302      	movs	r3, #2
 8010f72:	e047      	b.n	8011004 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	2238      	movs	r2, #56	@ 0x38
 8010f78:	2101      	movs	r1, #1
 8010f7a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	2239      	movs	r2, #57	@ 0x39
 8010f80:	2102      	movs	r1, #2
 8010f82:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	685b      	ldr	r3, [r3, #4]
 8010f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	689b      	ldr	r3, [r3, #8]
 8010f92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	2270      	movs	r2, #112	@ 0x70
 8010f98:	4393      	bics	r3, r2
 8010f9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	68fa      	ldr	r2, [r7, #12]
 8010fa2:	4313      	orrs	r3, r2
 8010fa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	68fa      	ldr	r2, [r7, #12]
 8010fac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	681a      	ldr	r2, [r3, #0]
 8010fb2:	2380      	movs	r3, #128	@ 0x80
 8010fb4:	05db      	lsls	r3, r3, #23
 8010fb6:	429a      	cmp	r2, r3
 8010fb8:	d00e      	beq.n	8010fd8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	4a13      	ldr	r2, [pc, #76]	@ (801100c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8010fc0:	4293      	cmp	r3, r2
 8010fc2:	d009      	beq.n	8010fd8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	4a11      	ldr	r2, [pc, #68]	@ (8011010 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8010fca:	4293      	cmp	r3, r2
 8010fcc:	d004      	beq.n	8010fd8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	4a10      	ldr	r2, [pc, #64]	@ (8011014 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8010fd4:	4293      	cmp	r3, r2
 8010fd6:	d10c      	bne.n	8010ff2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010fd8:	68bb      	ldr	r3, [r7, #8]
 8010fda:	2280      	movs	r2, #128	@ 0x80
 8010fdc:	4393      	bics	r3, r2
 8010fde:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010fe0:	683b      	ldr	r3, [r7, #0]
 8010fe2:	685b      	ldr	r3, [r3, #4]
 8010fe4:	68ba      	ldr	r2, [r7, #8]
 8010fe6:	4313      	orrs	r3, r2
 8010fe8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	68ba      	ldr	r2, [r7, #8]
 8010ff0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	2239      	movs	r2, #57	@ 0x39
 8010ff6:	2101      	movs	r1, #1
 8010ff8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2238      	movs	r2, #56	@ 0x38
 8010ffe:	2100      	movs	r1, #0
 8011000:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011002:	2300      	movs	r3, #0
}
 8011004:	0018      	movs	r0, r3
 8011006:	46bd      	mov	sp, r7
 8011008:	b004      	add	sp, #16
 801100a:	bd80      	pop	{r7, pc}
 801100c:	40000400 	.word	0x40000400
 8011010:	40010800 	.word	0x40010800
 8011014:	40011400 	.word	0x40011400

08011018 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b082      	sub	sp, #8
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
 8011020:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	2238      	movs	r2, #56	@ 0x38
 8011026:	5c9b      	ldrb	r3, [r3, r2]
 8011028:	2b01      	cmp	r3, #1
 801102a:	d101      	bne.n	8011030 <HAL_TIMEx_RemapConfig+0x18>
 801102c:	2302      	movs	r3, #2
 801102e:	e00c      	b.n	801104a <HAL_TIMEx_RemapConfig+0x32>
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	2238      	movs	r2, #56	@ 0x38
 8011034:	2101      	movs	r1, #1
 8011036:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	683a      	ldr	r2, [r7, #0]
 801103e:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2238      	movs	r2, #56	@ 0x38
 8011044:	2100      	movs	r1, #0
 8011046:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011048:	2300      	movs	r3, #0
}
 801104a:	0018      	movs	r0, r3
 801104c:	46bd      	mov	sp, r7
 801104e:	b002      	add	sp, #8
 8011050:	bd80      	pop	{r7, pc}
	...

08011054 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b082      	sub	sp, #8
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d101      	bne.n	8011066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011062:	2301      	movs	r3, #1
 8011064:	e053      	b.n	801110e <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801106a:	2b00      	cmp	r3, #0
 801106c:	d116      	bne.n	801109c <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2278      	movs	r2, #120	@ 0x78
 8011072:	2100      	movs	r1, #0
 8011074:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	0018      	movs	r0, r3
 801107a:	f000 fd07 	bl	8011a8c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	22b0      	movs	r2, #176	@ 0xb0
 8011082:	589b      	ldr	r3, [r3, r2]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d103      	bne.n	8011090 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	21b0      	movs	r1, #176	@ 0xb0
 801108c:	4a22      	ldr	r2, [pc, #136]	@ (8011118 <HAL_UART_Init+0xc4>)
 801108e:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	22b0      	movs	r2, #176	@ 0xb0
 8011094:	589b      	ldr	r3, [r3, r2]
 8011096:	687a      	ldr	r2, [r7, #4]
 8011098:	0010      	movs	r0, r2
 801109a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	2224      	movs	r2, #36	@ 0x24
 80110a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	681a      	ldr	r2, [r3, #0]
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	2101      	movs	r1, #1
 80110ae:	438a      	bics	r2, r1
 80110b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	0018      	movs	r0, r3
 80110b6:	f000 fd2d 	bl	8011b14 <UART_SetConfig>
 80110ba:	0003      	movs	r3, r0
 80110bc:	2b01      	cmp	r3, #1
 80110be:	d101      	bne.n	80110c4 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 80110c0:	2301      	movs	r3, #1
 80110c2:	e024      	b.n	801110e <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d003      	beq.n	80110d4 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	0018      	movs	r0, r3
 80110d0:	f000 ffbe 	bl	8012050 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	685a      	ldr	r2, [r3, #4]
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	490f      	ldr	r1, [pc, #60]	@ (801111c <HAL_UART_Init+0xc8>)
 80110e0:	400a      	ands	r2, r1
 80110e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	689a      	ldr	r2, [r3, #8]
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	212a      	movs	r1, #42	@ 0x2a
 80110f0:	438a      	bics	r2, r1
 80110f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	681a      	ldr	r2, [r3, #0]
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	2101      	movs	r1, #1
 8011100:	430a      	orrs	r2, r1
 8011102:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	0018      	movs	r0, r3
 8011108:	f001 f856 	bl	80121b8 <UART_CheckIdleState>
 801110c:	0003      	movs	r3, r0
}
 801110e:	0018      	movs	r0, r3
 8011110:	46bd      	mov	sp, r7
 8011112:	b002      	add	sp, #8
 8011114:	bd80      	pop	{r7, pc}
 8011116:	46c0      	nop			@ (mov r8, r8)
 8011118:	080092dd 	.word	0x080092dd
 801111c:	ffffb7ff 	.word	0xffffb7ff

08011120 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b08a      	sub	sp, #40	@ 0x28
 8011124:	af02      	add	r7, sp, #8
 8011126:	60f8      	str	r0, [r7, #12]
 8011128:	60b9      	str	r1, [r7, #8]
 801112a:	603b      	str	r3, [r7, #0]
 801112c:	1dbb      	adds	r3, r7, #6
 801112e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011134:	2b20      	cmp	r3, #32
 8011136:	d000      	beq.n	801113a <HAL_UART_Transmit+0x1a>
 8011138:	e08c      	b.n	8011254 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801113a:	68bb      	ldr	r3, [r7, #8]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d003      	beq.n	8011148 <HAL_UART_Transmit+0x28>
 8011140:	1dbb      	adds	r3, r7, #6
 8011142:	881b      	ldrh	r3, [r3, #0]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d101      	bne.n	801114c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8011148:	2301      	movs	r3, #1
 801114a:	e084      	b.n	8011256 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	689a      	ldr	r2, [r3, #8]
 8011150:	2380      	movs	r3, #128	@ 0x80
 8011152:	015b      	lsls	r3, r3, #5
 8011154:	429a      	cmp	r2, r3
 8011156:	d109      	bne.n	801116c <HAL_UART_Transmit+0x4c>
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	691b      	ldr	r3, [r3, #16]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d105      	bne.n	801116c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8011160:	68bb      	ldr	r3, [r7, #8]
 8011162:	2201      	movs	r2, #1
 8011164:	4013      	ands	r3, r2
 8011166:	d001      	beq.n	801116c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8011168:	2301      	movs	r3, #1
 801116a:	e074      	b.n	8011256 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	2284      	movs	r2, #132	@ 0x84
 8011170:	2100      	movs	r1, #0
 8011172:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	2221      	movs	r2, #33	@ 0x21
 8011178:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801117a:	f7f8 fdd1 	bl	8009d20 <HAL_GetTick>
 801117e:	0003      	movs	r3, r0
 8011180:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	1dba      	adds	r2, r7, #6
 8011186:	2150      	movs	r1, #80	@ 0x50
 8011188:	8812      	ldrh	r2, [r2, #0]
 801118a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	1dba      	adds	r2, r7, #6
 8011190:	2152      	movs	r1, #82	@ 0x52
 8011192:	8812      	ldrh	r2, [r2, #0]
 8011194:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	689a      	ldr	r2, [r3, #8]
 801119a:	2380      	movs	r3, #128	@ 0x80
 801119c:	015b      	lsls	r3, r3, #5
 801119e:	429a      	cmp	r2, r3
 80111a0:	d108      	bne.n	80111b4 <HAL_UART_Transmit+0x94>
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	691b      	ldr	r3, [r3, #16]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d104      	bne.n	80111b4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80111aa:	2300      	movs	r3, #0
 80111ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80111ae:	68bb      	ldr	r3, [r7, #8]
 80111b0:	61bb      	str	r3, [r7, #24]
 80111b2:	e003      	b.n	80111bc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80111b4:	68bb      	ldr	r3, [r7, #8]
 80111b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80111b8:	2300      	movs	r3, #0
 80111ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80111bc:	e02f      	b.n	801121e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80111be:	697a      	ldr	r2, [r7, #20]
 80111c0:	68f8      	ldr	r0, [r7, #12]
 80111c2:	683b      	ldr	r3, [r7, #0]
 80111c4:	9300      	str	r3, [sp, #0]
 80111c6:	0013      	movs	r3, r2
 80111c8:	2200      	movs	r2, #0
 80111ca:	2180      	movs	r1, #128	@ 0x80
 80111cc:	f001 f89c 	bl	8012308 <UART_WaitOnFlagUntilTimeout>
 80111d0:	1e03      	subs	r3, r0, #0
 80111d2:	d004      	beq.n	80111de <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	2220      	movs	r2, #32
 80111d8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80111da:	2303      	movs	r3, #3
 80111dc:	e03b      	b.n	8011256 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80111de:	69fb      	ldr	r3, [r7, #28]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d10b      	bne.n	80111fc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80111e4:	69bb      	ldr	r3, [r7, #24]
 80111e6:	881b      	ldrh	r3, [r3, #0]
 80111e8:	001a      	movs	r2, r3
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	05d2      	lsls	r2, r2, #23
 80111f0:	0dd2      	lsrs	r2, r2, #23
 80111f2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80111f4:	69bb      	ldr	r3, [r7, #24]
 80111f6:	3302      	adds	r3, #2
 80111f8:	61bb      	str	r3, [r7, #24]
 80111fa:	e007      	b.n	801120c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80111fc:	69fb      	ldr	r3, [r7, #28]
 80111fe:	781a      	ldrb	r2, [r3, #0]
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8011206:	69fb      	ldr	r3, [r7, #28]
 8011208:	3301      	adds	r3, #1
 801120a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	2252      	movs	r2, #82	@ 0x52
 8011210:	5a9b      	ldrh	r3, [r3, r2]
 8011212:	b29b      	uxth	r3, r3
 8011214:	3b01      	subs	r3, #1
 8011216:	b299      	uxth	r1, r3
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	2252      	movs	r2, #82	@ 0x52
 801121c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	2252      	movs	r2, #82	@ 0x52
 8011222:	5a9b      	ldrh	r3, [r3, r2]
 8011224:	b29b      	uxth	r3, r3
 8011226:	2b00      	cmp	r3, #0
 8011228:	d1c9      	bne.n	80111be <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801122a:	697a      	ldr	r2, [r7, #20]
 801122c:	68f8      	ldr	r0, [r7, #12]
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	9300      	str	r3, [sp, #0]
 8011232:	0013      	movs	r3, r2
 8011234:	2200      	movs	r2, #0
 8011236:	2140      	movs	r1, #64	@ 0x40
 8011238:	f001 f866 	bl	8012308 <UART_WaitOnFlagUntilTimeout>
 801123c:	1e03      	subs	r3, r0, #0
 801123e:	d004      	beq.n	801124a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	2220      	movs	r2, #32
 8011244:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8011246:	2303      	movs	r3, #3
 8011248:	e005      	b.n	8011256 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	2220      	movs	r2, #32
 801124e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8011250:	2300      	movs	r3, #0
 8011252:	e000      	b.n	8011256 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8011254:	2302      	movs	r3, #2
  }
}
 8011256:	0018      	movs	r0, r3
 8011258:	46bd      	mov	sp, r7
 801125a:	b008      	add	sp, #32
 801125c:	bd80      	pop	{r7, pc}
	...

08011260 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b088      	sub	sp, #32
 8011264:	af00      	add	r7, sp, #0
 8011266:	60f8      	str	r0, [r7, #12]
 8011268:	60b9      	str	r1, [r7, #8]
 801126a:	1dbb      	adds	r3, r7, #6
 801126c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011272:	2b20      	cmp	r3, #32
 8011274:	d000      	beq.n	8011278 <HAL_UART_Transmit_DMA+0x18>
 8011276:	e077      	b.n	8011368 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8011278:	68bb      	ldr	r3, [r7, #8]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d003      	beq.n	8011286 <HAL_UART_Transmit_DMA+0x26>
 801127e:	1dbb      	adds	r3, r7, #6
 8011280:	881b      	ldrh	r3, [r3, #0]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d101      	bne.n	801128a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8011286:	2301      	movs	r3, #1
 8011288:	e06f      	b.n	801136a <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	689a      	ldr	r2, [r3, #8]
 801128e:	2380      	movs	r3, #128	@ 0x80
 8011290:	015b      	lsls	r3, r3, #5
 8011292:	429a      	cmp	r2, r3
 8011294:	d109      	bne.n	80112aa <HAL_UART_Transmit_DMA+0x4a>
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	691b      	ldr	r3, [r3, #16]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d105      	bne.n	80112aa <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	2201      	movs	r2, #1
 80112a2:	4013      	ands	r3, r2
 80112a4:	d001      	beq.n	80112aa <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80112a6:	2301      	movs	r3, #1
 80112a8:	e05f      	b.n	801136a <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	68ba      	ldr	r2, [r7, #8]
 80112ae:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	1dba      	adds	r2, r7, #6
 80112b4:	2150      	movs	r1, #80	@ 0x50
 80112b6:	8812      	ldrh	r2, [r2, #0]
 80112b8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	1dba      	adds	r2, r7, #6
 80112be:	2152      	movs	r1, #82	@ 0x52
 80112c0:	8812      	ldrh	r2, [r2, #0]
 80112c2:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	2284      	movs	r2, #132	@ 0x84
 80112c8:	2100      	movs	r1, #0
 80112ca:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	2221      	movs	r2, #33	@ 0x21
 80112d0:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d027      	beq.n	801132a <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112de:	4a25      	ldr	r2, [pc, #148]	@ (8011374 <HAL_UART_Transmit_DMA+0x114>)
 80112e0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112e6:	4a24      	ldr	r2, [pc, #144]	@ (8011378 <HAL_UART_Transmit_DMA+0x118>)
 80112e8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112ee:	4a23      	ldr	r2, [pc, #140]	@ (801137c <HAL_UART_Transmit_DMA+0x11c>)
 80112f0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112f6:	2200      	movs	r2, #0
 80112f8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011302:	0019      	movs	r1, r3
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	3328      	adds	r3, #40	@ 0x28
 801130a:	001a      	movs	r2, r3
 801130c:	1dbb      	adds	r3, r7, #6
 801130e:	881b      	ldrh	r3, [r3, #0]
 8011310:	f7f9 fa84 	bl	800a81c <HAL_DMA_Start_IT>
 8011314:	1e03      	subs	r3, r0, #0
 8011316:	d008      	beq.n	801132a <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	2284      	movs	r2, #132	@ 0x84
 801131c:	2110      	movs	r1, #16
 801131e:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	2220      	movs	r2, #32
 8011324:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8011326:	2301      	movs	r3, #1
 8011328:	e01f      	b.n	801136a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	2240      	movs	r2, #64	@ 0x40
 8011330:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011332:	f3ef 8310 	mrs	r3, PRIMASK
 8011336:	613b      	str	r3, [r7, #16]
  return(result);
 8011338:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801133a:	61fb      	str	r3, [r7, #28]
 801133c:	2301      	movs	r3, #1
 801133e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011340:	697b      	ldr	r3, [r7, #20]
 8011342:	f383 8810 	msr	PRIMASK, r3
}
 8011346:	46c0      	nop			@ (mov r8, r8)
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	689a      	ldr	r2, [r3, #8]
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	2180      	movs	r1, #128	@ 0x80
 8011354:	430a      	orrs	r2, r1
 8011356:	609a      	str	r2, [r3, #8]
 8011358:	69fb      	ldr	r3, [r7, #28]
 801135a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801135c:	69bb      	ldr	r3, [r7, #24]
 801135e:	f383 8810 	msr	PRIMASK, r3
}
 8011362:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8011364:	2300      	movs	r3, #0
 8011366:	e000      	b.n	801136a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8011368:	2302      	movs	r3, #2
  }
}
 801136a:	0018      	movs	r0, r3
 801136c:	46bd      	mov	sp, r7
 801136e:	b008      	add	sp, #32
 8011370:	bd80      	pop	{r7, pc}
 8011372:	46c0      	nop			@ (mov r8, r8)
 8011374:	0801262d 	.word	0x0801262d
 8011378:	080126c9 	.word	0x080126c9
 801137c:	08012869 	.word	0x08012869

08011380 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b088      	sub	sp, #32
 8011384:	af00      	add	r7, sp, #0
 8011386:	60f8      	str	r0, [r7, #12]
 8011388:	60b9      	str	r1, [r7, #8]
 801138a:	1dbb      	adds	r3, r7, #6
 801138c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	2280      	movs	r2, #128	@ 0x80
 8011392:	589b      	ldr	r3, [r3, r2]
 8011394:	2b20      	cmp	r3, #32
 8011396:	d14a      	bne.n	801142e <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8011398:	68bb      	ldr	r3, [r7, #8]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d003      	beq.n	80113a6 <HAL_UART_Receive_DMA+0x26>
 801139e:	1dbb      	adds	r3, r7, #6
 80113a0:	881b      	ldrh	r3, [r3, #0]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d101      	bne.n	80113aa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80113a6:	2301      	movs	r3, #1
 80113a8:	e042      	b.n	8011430 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	689a      	ldr	r2, [r3, #8]
 80113ae:	2380      	movs	r3, #128	@ 0x80
 80113b0:	015b      	lsls	r3, r3, #5
 80113b2:	429a      	cmp	r2, r3
 80113b4:	d109      	bne.n	80113ca <HAL_UART_Receive_DMA+0x4a>
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	691b      	ldr	r3, [r3, #16]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d105      	bne.n	80113ca <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80113be:	68bb      	ldr	r3, [r7, #8]
 80113c0:	2201      	movs	r2, #1
 80113c2:	4013      	ands	r3, r2
 80113c4:	d001      	beq.n	80113ca <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80113c6:	2301      	movs	r3, #1
 80113c8:	e032      	b.n	8011430 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	2200      	movs	r2, #0
 80113ce:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	4a18      	ldr	r2, [pc, #96]	@ (8011438 <HAL_UART_Receive_DMA+0xb8>)
 80113d6:	4293      	cmp	r3, r2
 80113d8:	d020      	beq.n	801141c <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	685a      	ldr	r2, [r3, #4]
 80113e0:	2380      	movs	r3, #128	@ 0x80
 80113e2:	041b      	lsls	r3, r3, #16
 80113e4:	4013      	ands	r3, r2
 80113e6:	d019      	beq.n	801141c <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80113e8:	f3ef 8310 	mrs	r3, PRIMASK
 80113ec:	613b      	str	r3, [r7, #16]
  return(result);
 80113ee:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80113f0:	61fb      	str	r3, [r7, #28]
 80113f2:	2301      	movs	r3, #1
 80113f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	f383 8810 	msr	PRIMASK, r3
}
 80113fc:	46c0      	nop			@ (mov r8, r8)
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	681a      	ldr	r2, [r3, #0]
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	2180      	movs	r1, #128	@ 0x80
 801140a:	04c9      	lsls	r1, r1, #19
 801140c:	430a      	orrs	r2, r1
 801140e:	601a      	str	r2, [r3, #0]
 8011410:	69fb      	ldr	r3, [r7, #28]
 8011412:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011414:	69bb      	ldr	r3, [r7, #24]
 8011416:	f383 8810 	msr	PRIMASK, r3
}
 801141a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 801141c:	1dbb      	adds	r3, r7, #6
 801141e:	881a      	ldrh	r2, [r3, #0]
 8011420:	68b9      	ldr	r1, [r7, #8]
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	0018      	movs	r0, r3
 8011426:	f000 ffd9 	bl	80123dc <UART_Start_Receive_DMA>
 801142a:	0003      	movs	r3, r0
 801142c:	e000      	b.n	8011430 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801142e:	2302      	movs	r3, #2
  }
}
 8011430:	0018      	movs	r0, r3
 8011432:	46bd      	mov	sp, r7
 8011434:	b008      	add	sp, #32
 8011436:	bd80      	pop	{r7, pc}
 8011438:	40004800 	.word	0x40004800

0801143c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801143c:	b590      	push	{r4, r7, lr}
 801143e:	b0ab      	sub	sp, #172	@ 0xac
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	69db      	ldr	r3, [r3, #28]
 801144a:	22a4      	movs	r2, #164	@ 0xa4
 801144c:	18b9      	adds	r1, r7, r2
 801144e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	20a0      	movs	r0, #160	@ 0xa0
 8011458:	1839      	adds	r1, r7, r0
 801145a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	689b      	ldr	r3, [r3, #8]
 8011462:	219c      	movs	r1, #156	@ 0x9c
 8011464:	1879      	adds	r1, r7, r1
 8011466:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011468:	0011      	movs	r1, r2
 801146a:	18bb      	adds	r3, r7, r2
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	4a9c      	ldr	r2, [pc, #624]	@ (80116e0 <HAL_UART_IRQHandler+0x2a4>)
 8011470:	4013      	ands	r3, r2
 8011472:	2298      	movs	r2, #152	@ 0x98
 8011474:	18bc      	adds	r4, r7, r2
 8011476:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8011478:	18bb      	adds	r3, r7, r2
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d114      	bne.n	80114aa <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8011480:	187b      	adds	r3, r7, r1
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	2220      	movs	r2, #32
 8011486:	4013      	ands	r3, r2
 8011488:	d00f      	beq.n	80114aa <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801148a:	183b      	adds	r3, r7, r0
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	2220      	movs	r2, #32
 8011490:	4013      	ands	r3, r2
 8011492:	d00a      	beq.n	80114aa <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011498:	2b00      	cmp	r3, #0
 801149a:	d100      	bne.n	801149e <HAL_UART_IRQHandler+0x62>
 801149c:	e2aa      	b.n	80119f4 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80114a2:	687a      	ldr	r2, [r7, #4]
 80114a4:	0010      	movs	r0, r2
 80114a6:	4798      	blx	r3
      }
      return;
 80114a8:	e2a4      	b.n	80119f4 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80114aa:	2398      	movs	r3, #152	@ 0x98
 80114ac:	18fb      	adds	r3, r7, r3
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d100      	bne.n	80114b6 <HAL_UART_IRQHandler+0x7a>
 80114b4:	e11a      	b.n	80116ec <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80114b6:	239c      	movs	r3, #156	@ 0x9c
 80114b8:	18fb      	adds	r3, r7, r3
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	2201      	movs	r2, #1
 80114be:	4013      	ands	r3, r2
 80114c0:	d106      	bne.n	80114d0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80114c2:	23a0      	movs	r3, #160	@ 0xa0
 80114c4:	18fb      	adds	r3, r7, r3
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	4a86      	ldr	r2, [pc, #536]	@ (80116e4 <HAL_UART_IRQHandler+0x2a8>)
 80114ca:	4013      	ands	r3, r2
 80114cc:	d100      	bne.n	80114d0 <HAL_UART_IRQHandler+0x94>
 80114ce:	e10d      	b.n	80116ec <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80114d0:	23a4      	movs	r3, #164	@ 0xa4
 80114d2:	18fb      	adds	r3, r7, r3
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	2201      	movs	r2, #1
 80114d8:	4013      	ands	r3, r2
 80114da:	d012      	beq.n	8011502 <HAL_UART_IRQHandler+0xc6>
 80114dc:	23a0      	movs	r3, #160	@ 0xa0
 80114de:	18fb      	adds	r3, r7, r3
 80114e0:	681a      	ldr	r2, [r3, #0]
 80114e2:	2380      	movs	r3, #128	@ 0x80
 80114e4:	005b      	lsls	r3, r3, #1
 80114e6:	4013      	ands	r3, r2
 80114e8:	d00b      	beq.n	8011502 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	2201      	movs	r2, #1
 80114f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	2284      	movs	r2, #132	@ 0x84
 80114f6:	589b      	ldr	r3, [r3, r2]
 80114f8:	2201      	movs	r2, #1
 80114fa:	431a      	orrs	r2, r3
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	2184      	movs	r1, #132	@ 0x84
 8011500:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011502:	23a4      	movs	r3, #164	@ 0xa4
 8011504:	18fb      	adds	r3, r7, r3
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	2202      	movs	r2, #2
 801150a:	4013      	ands	r3, r2
 801150c:	d011      	beq.n	8011532 <HAL_UART_IRQHandler+0xf6>
 801150e:	239c      	movs	r3, #156	@ 0x9c
 8011510:	18fb      	adds	r3, r7, r3
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	2201      	movs	r2, #1
 8011516:	4013      	ands	r3, r2
 8011518:	d00b      	beq.n	8011532 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	2202      	movs	r2, #2
 8011520:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	2284      	movs	r2, #132	@ 0x84
 8011526:	589b      	ldr	r3, [r3, r2]
 8011528:	2204      	movs	r2, #4
 801152a:	431a      	orrs	r2, r3
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	2184      	movs	r1, #132	@ 0x84
 8011530:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011532:	23a4      	movs	r3, #164	@ 0xa4
 8011534:	18fb      	adds	r3, r7, r3
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	2204      	movs	r2, #4
 801153a:	4013      	ands	r3, r2
 801153c:	d011      	beq.n	8011562 <HAL_UART_IRQHandler+0x126>
 801153e:	239c      	movs	r3, #156	@ 0x9c
 8011540:	18fb      	adds	r3, r7, r3
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	2201      	movs	r2, #1
 8011546:	4013      	ands	r3, r2
 8011548:	d00b      	beq.n	8011562 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	2204      	movs	r2, #4
 8011550:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	2284      	movs	r2, #132	@ 0x84
 8011556:	589b      	ldr	r3, [r3, r2]
 8011558:	2202      	movs	r2, #2
 801155a:	431a      	orrs	r2, r3
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	2184      	movs	r1, #132	@ 0x84
 8011560:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011562:	23a4      	movs	r3, #164	@ 0xa4
 8011564:	18fb      	adds	r3, r7, r3
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	2208      	movs	r2, #8
 801156a:	4013      	ands	r3, r2
 801156c:	d017      	beq.n	801159e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801156e:	23a0      	movs	r3, #160	@ 0xa0
 8011570:	18fb      	adds	r3, r7, r3
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	2220      	movs	r2, #32
 8011576:	4013      	ands	r3, r2
 8011578:	d105      	bne.n	8011586 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801157a:	239c      	movs	r3, #156	@ 0x9c
 801157c:	18fb      	adds	r3, r7, r3
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	2201      	movs	r2, #1
 8011582:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8011584:	d00b      	beq.n	801159e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	2208      	movs	r2, #8
 801158c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	2284      	movs	r2, #132	@ 0x84
 8011592:	589b      	ldr	r3, [r3, r2]
 8011594:	2208      	movs	r2, #8
 8011596:	431a      	orrs	r2, r3
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	2184      	movs	r1, #132	@ 0x84
 801159c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801159e:	23a4      	movs	r3, #164	@ 0xa4
 80115a0:	18fb      	adds	r3, r7, r3
 80115a2:	681a      	ldr	r2, [r3, #0]
 80115a4:	2380      	movs	r3, #128	@ 0x80
 80115a6:	011b      	lsls	r3, r3, #4
 80115a8:	4013      	ands	r3, r2
 80115aa:	d013      	beq.n	80115d4 <HAL_UART_IRQHandler+0x198>
 80115ac:	23a0      	movs	r3, #160	@ 0xa0
 80115ae:	18fb      	adds	r3, r7, r3
 80115b0:	681a      	ldr	r2, [r3, #0]
 80115b2:	2380      	movs	r3, #128	@ 0x80
 80115b4:	04db      	lsls	r3, r3, #19
 80115b6:	4013      	ands	r3, r2
 80115b8:	d00c      	beq.n	80115d4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	2280      	movs	r2, #128	@ 0x80
 80115c0:	0112      	lsls	r2, r2, #4
 80115c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	2284      	movs	r2, #132	@ 0x84
 80115c8:	589b      	ldr	r3, [r3, r2]
 80115ca:	2220      	movs	r2, #32
 80115cc:	431a      	orrs	r2, r3
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	2184      	movs	r1, #132	@ 0x84
 80115d2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	2284      	movs	r2, #132	@ 0x84
 80115d8:	589b      	ldr	r3, [r3, r2]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d100      	bne.n	80115e0 <HAL_UART_IRQHandler+0x1a4>
 80115de:	e20b      	b.n	80119f8 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80115e0:	23a4      	movs	r3, #164	@ 0xa4
 80115e2:	18fb      	adds	r3, r7, r3
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	2220      	movs	r2, #32
 80115e8:	4013      	ands	r3, r2
 80115ea:	d00e      	beq.n	801160a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80115ec:	23a0      	movs	r3, #160	@ 0xa0
 80115ee:	18fb      	adds	r3, r7, r3
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	2220      	movs	r2, #32
 80115f4:	4013      	ands	r3, r2
 80115f6:	d008      	beq.n	801160a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d004      	beq.n	801160a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011604:	687a      	ldr	r2, [r7, #4]
 8011606:	0010      	movs	r0, r2
 8011608:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	2284      	movs	r2, #132	@ 0x84
 801160e:	589b      	ldr	r3, [r3, r2]
 8011610:	2194      	movs	r1, #148	@ 0x94
 8011612:	187a      	adds	r2, r7, r1
 8011614:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	689b      	ldr	r3, [r3, #8]
 801161c:	2240      	movs	r2, #64	@ 0x40
 801161e:	4013      	ands	r3, r2
 8011620:	2b40      	cmp	r3, #64	@ 0x40
 8011622:	d004      	beq.n	801162e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8011624:	187b      	adds	r3, r7, r1
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	2228      	movs	r2, #40	@ 0x28
 801162a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801162c:	d04b      	beq.n	80116c6 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	0018      	movs	r0, r3
 8011632:	f000 ff97 	bl	8012564 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	689b      	ldr	r3, [r3, #8]
 801163c:	2240      	movs	r2, #64	@ 0x40
 801163e:	4013      	ands	r3, r2
 8011640:	2b40      	cmp	r3, #64	@ 0x40
 8011642:	d139      	bne.n	80116b8 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011644:	f3ef 8310 	mrs	r3, PRIMASK
 8011648:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801164a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801164c:	2090      	movs	r0, #144	@ 0x90
 801164e:	183a      	adds	r2, r7, r0
 8011650:	6013      	str	r3, [r2, #0]
 8011652:	2301      	movs	r3, #1
 8011654:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011656:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011658:	f383 8810 	msr	PRIMASK, r3
}
 801165c:	46c0      	nop			@ (mov r8, r8)
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	689a      	ldr	r2, [r3, #8]
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	2140      	movs	r1, #64	@ 0x40
 801166a:	438a      	bics	r2, r1
 801166c:	609a      	str	r2, [r3, #8]
 801166e:	183b      	adds	r3, r7, r0
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011674:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011676:	f383 8810 	msr	PRIMASK, r3
}
 801167a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011680:	2b00      	cmp	r3, #0
 8011682:	d012      	beq.n	80116aa <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011688:	4a17      	ldr	r2, [pc, #92]	@ (80116e8 <HAL_UART_IRQHandler+0x2ac>)
 801168a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011690:	0018      	movs	r0, r3
 8011692:	f7f9 f969 	bl	800a968 <HAL_DMA_Abort_IT>
 8011696:	1e03      	subs	r3, r0, #0
 8011698:	d020      	beq.n	80116dc <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801169e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80116a4:	0018      	movs	r0, r3
 80116a6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80116a8:	e018      	b.n	80116dc <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	2298      	movs	r2, #152	@ 0x98
 80116ae:	589b      	ldr	r3, [r3, r2]
 80116b0:	687a      	ldr	r2, [r7, #4]
 80116b2:	0010      	movs	r0, r2
 80116b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80116b6:	e011      	b.n	80116dc <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	2298      	movs	r2, #152	@ 0x98
 80116bc:	589b      	ldr	r3, [r3, r2]
 80116be:	687a      	ldr	r2, [r7, #4]
 80116c0:	0010      	movs	r0, r2
 80116c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80116c4:	e00a      	b.n	80116dc <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	2298      	movs	r2, #152	@ 0x98
 80116ca:	589b      	ldr	r3, [r3, r2]
 80116cc:	687a      	ldr	r2, [r7, #4]
 80116ce:	0010      	movs	r0, r2
 80116d0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	2284      	movs	r2, #132	@ 0x84
 80116d6:	2100      	movs	r1, #0
 80116d8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80116da:	e18d      	b.n	80119f8 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80116dc:	46c0      	nop			@ (mov r8, r8)
    return;
 80116de:	e18b      	b.n	80119f8 <HAL_UART_IRQHandler+0x5bc>
 80116e0:	0000080f 	.word	0x0000080f
 80116e4:	04000120 	.word	0x04000120
 80116e8:	080128f1 	.word	0x080128f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80116f0:	2b01      	cmp	r3, #1
 80116f2:	d000      	beq.n	80116f6 <HAL_UART_IRQHandler+0x2ba>
 80116f4:	e13d      	b.n	8011972 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80116f6:	23a4      	movs	r3, #164	@ 0xa4
 80116f8:	18fb      	adds	r3, r7, r3
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	2210      	movs	r2, #16
 80116fe:	4013      	ands	r3, r2
 8011700:	d100      	bne.n	8011704 <HAL_UART_IRQHandler+0x2c8>
 8011702:	e136      	b.n	8011972 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011704:	23a0      	movs	r3, #160	@ 0xa0
 8011706:	18fb      	adds	r3, r7, r3
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	2210      	movs	r2, #16
 801170c:	4013      	ands	r3, r2
 801170e:	d100      	bne.n	8011712 <HAL_UART_IRQHandler+0x2d6>
 8011710:	e12f      	b.n	8011972 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	2210      	movs	r2, #16
 8011718:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	689b      	ldr	r3, [r3, #8]
 8011720:	2240      	movs	r2, #64	@ 0x40
 8011722:	4013      	ands	r3, r2
 8011724:	2b40      	cmp	r3, #64	@ 0x40
 8011726:	d000      	beq.n	801172a <HAL_UART_IRQHandler+0x2ee>
 8011728:	e0a2      	b.n	8011870 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	685a      	ldr	r2, [r3, #4]
 8011732:	217e      	movs	r1, #126	@ 0x7e
 8011734:	187b      	adds	r3, r7, r1
 8011736:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8011738:	187b      	adds	r3, r7, r1
 801173a:	881b      	ldrh	r3, [r3, #0]
 801173c:	2b00      	cmp	r3, #0
 801173e:	d100      	bne.n	8011742 <HAL_UART_IRQHandler+0x306>
 8011740:	e15c      	b.n	80119fc <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	2258      	movs	r2, #88	@ 0x58
 8011746:	5a9b      	ldrh	r3, [r3, r2]
 8011748:	187a      	adds	r2, r7, r1
 801174a:	8812      	ldrh	r2, [r2, #0]
 801174c:	429a      	cmp	r2, r3
 801174e:	d300      	bcc.n	8011752 <HAL_UART_IRQHandler+0x316>
 8011750:	e154      	b.n	80119fc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	187a      	adds	r2, r7, r1
 8011756:	215a      	movs	r1, #90	@ 0x5a
 8011758:	8812      	ldrh	r2, [r2, #0]
 801175a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	2220      	movs	r2, #32
 8011766:	4013      	ands	r3, r2
 8011768:	d16f      	bne.n	801184a <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801176a:	f3ef 8310 	mrs	r3, PRIMASK
 801176e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8011770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011772:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011774:	2301      	movs	r3, #1
 8011776:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801177a:	f383 8810 	msr	PRIMASK, r3
}
 801177e:	46c0      	nop			@ (mov r8, r8)
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	681a      	ldr	r2, [r3, #0]
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	49a0      	ldr	r1, [pc, #640]	@ (8011a0c <HAL_UART_IRQHandler+0x5d0>)
 801178c:	400a      	ands	r2, r1
 801178e:	601a      	str	r2, [r3, #0]
 8011790:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011792:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011796:	f383 8810 	msr	PRIMASK, r3
}
 801179a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801179c:	f3ef 8310 	mrs	r3, PRIMASK
 80117a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80117a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80117a4:	677b      	str	r3, [r7, #116]	@ 0x74
 80117a6:	2301      	movs	r3, #1
 80117a8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80117aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80117ac:	f383 8810 	msr	PRIMASK, r3
}
 80117b0:	46c0      	nop			@ (mov r8, r8)
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	689a      	ldr	r2, [r3, #8]
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	2101      	movs	r1, #1
 80117be:	438a      	bics	r2, r1
 80117c0:	609a      	str	r2, [r3, #8]
 80117c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80117c4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80117c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117c8:	f383 8810 	msr	PRIMASK, r3
}
 80117cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80117ce:	f3ef 8310 	mrs	r3, PRIMASK
 80117d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80117d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80117d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80117d8:	2301      	movs	r3, #1
 80117da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80117dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80117de:	f383 8810 	msr	PRIMASK, r3
}
 80117e2:	46c0      	nop			@ (mov r8, r8)
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	689a      	ldr	r2, [r3, #8]
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	2140      	movs	r1, #64	@ 0x40
 80117f0:	438a      	bics	r2, r1
 80117f2:	609a      	str	r2, [r3, #8]
 80117f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80117f6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80117f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117fa:	f383 8810 	msr	PRIMASK, r3
}
 80117fe:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	2280      	movs	r2, #128	@ 0x80
 8011804:	2120      	movs	r1, #32
 8011806:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	2200      	movs	r2, #0
 801180c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801180e:	f3ef 8310 	mrs	r3, PRIMASK
 8011812:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8011814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011816:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011818:	2301      	movs	r3, #1
 801181a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801181c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801181e:	f383 8810 	msr	PRIMASK, r3
}
 8011822:	46c0      	nop			@ (mov r8, r8)
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	681a      	ldr	r2, [r3, #0]
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	2110      	movs	r1, #16
 8011830:	438a      	bics	r2, r1
 8011832:	601a      	str	r2, [r3, #0]
 8011834:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011836:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011838:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801183a:	f383 8810 	msr	PRIMASK, r3
}
 801183e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011844:	0018      	movs	r0, r3
 8011846:	f7f9 f84f 	bl	800a8e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	2202      	movs	r2, #2
 801184e:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	22ac      	movs	r2, #172	@ 0xac
 8011854:	589b      	ldr	r3, [r3, r2]
 8011856:	687a      	ldr	r2, [r7, #4]
 8011858:	2158      	movs	r1, #88	@ 0x58
 801185a:	5a51      	ldrh	r1, [r2, r1]
 801185c:	687a      	ldr	r2, [r7, #4]
 801185e:	205a      	movs	r0, #90	@ 0x5a
 8011860:	5a12      	ldrh	r2, [r2, r0]
 8011862:	b292      	uxth	r2, r2
 8011864:	1a8a      	subs	r2, r1, r2
 8011866:	b291      	uxth	r1, r2
 8011868:	687a      	ldr	r2, [r7, #4]
 801186a:	0010      	movs	r0, r2
 801186c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801186e:	e0c5      	b.n	80119fc <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	2258      	movs	r2, #88	@ 0x58
 8011874:	5a99      	ldrh	r1, [r3, r2]
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	225a      	movs	r2, #90	@ 0x5a
 801187a:	5a9b      	ldrh	r3, [r3, r2]
 801187c:	b29a      	uxth	r2, r3
 801187e:	208e      	movs	r0, #142	@ 0x8e
 8011880:	183b      	adds	r3, r7, r0
 8011882:	1a8a      	subs	r2, r1, r2
 8011884:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	225a      	movs	r2, #90	@ 0x5a
 801188a:	5a9b      	ldrh	r3, [r3, r2]
 801188c:	b29b      	uxth	r3, r3
 801188e:	2b00      	cmp	r3, #0
 8011890:	d100      	bne.n	8011894 <HAL_UART_IRQHandler+0x458>
 8011892:	e0b5      	b.n	8011a00 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8011894:	183b      	adds	r3, r7, r0
 8011896:	881b      	ldrh	r3, [r3, #0]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d100      	bne.n	801189e <HAL_UART_IRQHandler+0x462>
 801189c:	e0b0      	b.n	8011a00 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801189e:	f3ef 8310 	mrs	r3, PRIMASK
 80118a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80118a4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80118a6:	2488      	movs	r4, #136	@ 0x88
 80118a8:	193a      	adds	r2, r7, r4
 80118aa:	6013      	str	r3, [r2, #0]
 80118ac:	2301      	movs	r3, #1
 80118ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80118b0:	693b      	ldr	r3, [r7, #16]
 80118b2:	f383 8810 	msr	PRIMASK, r3
}
 80118b6:	46c0      	nop			@ (mov r8, r8)
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	681a      	ldr	r2, [r3, #0]
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	4953      	ldr	r1, [pc, #332]	@ (8011a10 <HAL_UART_IRQHandler+0x5d4>)
 80118c4:	400a      	ands	r2, r1
 80118c6:	601a      	str	r2, [r3, #0]
 80118c8:	193b      	adds	r3, r7, r4
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80118ce:	697b      	ldr	r3, [r7, #20]
 80118d0:	f383 8810 	msr	PRIMASK, r3
}
 80118d4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80118d6:	f3ef 8310 	mrs	r3, PRIMASK
 80118da:	61bb      	str	r3, [r7, #24]
  return(result);
 80118dc:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80118de:	2484      	movs	r4, #132	@ 0x84
 80118e0:	193a      	adds	r2, r7, r4
 80118e2:	6013      	str	r3, [r2, #0]
 80118e4:	2301      	movs	r3, #1
 80118e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80118e8:	69fb      	ldr	r3, [r7, #28]
 80118ea:	f383 8810 	msr	PRIMASK, r3
}
 80118ee:	46c0      	nop			@ (mov r8, r8)
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	689a      	ldr	r2, [r3, #8]
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	2101      	movs	r1, #1
 80118fc:	438a      	bics	r2, r1
 80118fe:	609a      	str	r2, [r3, #8]
 8011900:	193b      	adds	r3, r7, r4
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011906:	6a3b      	ldr	r3, [r7, #32]
 8011908:	f383 8810 	msr	PRIMASK, r3
}
 801190c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	2280      	movs	r2, #128	@ 0x80
 8011912:	2120      	movs	r1, #32
 8011914:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	2200      	movs	r2, #0
 801191a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	2200      	movs	r2, #0
 8011920:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011922:	f3ef 8310 	mrs	r3, PRIMASK
 8011926:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8011928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801192a:	2480      	movs	r4, #128	@ 0x80
 801192c:	193a      	adds	r2, r7, r4
 801192e:	6013      	str	r3, [r2, #0]
 8011930:	2301      	movs	r3, #1
 8011932:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011936:	f383 8810 	msr	PRIMASK, r3
}
 801193a:	46c0      	nop			@ (mov r8, r8)
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	681a      	ldr	r2, [r3, #0]
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	2110      	movs	r1, #16
 8011948:	438a      	bics	r2, r1
 801194a:	601a      	str	r2, [r3, #0]
 801194c:	193b      	adds	r3, r7, r4
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011954:	f383 8810 	msr	PRIMASK, r3
}
 8011958:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	2202      	movs	r2, #2
 801195e:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	22ac      	movs	r2, #172	@ 0xac
 8011964:	589b      	ldr	r3, [r3, r2]
 8011966:	183a      	adds	r2, r7, r0
 8011968:	8811      	ldrh	r1, [r2, #0]
 801196a:	687a      	ldr	r2, [r7, #4]
 801196c:	0010      	movs	r0, r2
 801196e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011970:	e046      	b.n	8011a00 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011972:	23a4      	movs	r3, #164	@ 0xa4
 8011974:	18fb      	adds	r3, r7, r3
 8011976:	681a      	ldr	r2, [r3, #0]
 8011978:	2380      	movs	r3, #128	@ 0x80
 801197a:	035b      	lsls	r3, r3, #13
 801197c:	4013      	ands	r3, r2
 801197e:	d012      	beq.n	80119a6 <HAL_UART_IRQHandler+0x56a>
 8011980:	239c      	movs	r3, #156	@ 0x9c
 8011982:	18fb      	adds	r3, r7, r3
 8011984:	681a      	ldr	r2, [r3, #0]
 8011986:	2380      	movs	r3, #128	@ 0x80
 8011988:	03db      	lsls	r3, r3, #15
 801198a:	4013      	ands	r3, r2
 801198c:	d00b      	beq.n	80119a6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	2280      	movs	r2, #128	@ 0x80
 8011994:	0352      	lsls	r2, r2, #13
 8011996:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	22a8      	movs	r2, #168	@ 0xa8
 801199c:	589b      	ldr	r3, [r3, r2]
 801199e:	687a      	ldr	r2, [r7, #4]
 80119a0:	0010      	movs	r0, r2
 80119a2:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80119a4:	e02f      	b.n	8011a06 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80119a6:	23a4      	movs	r3, #164	@ 0xa4
 80119a8:	18fb      	adds	r3, r7, r3
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	2280      	movs	r2, #128	@ 0x80
 80119ae:	4013      	ands	r3, r2
 80119b0:	d00f      	beq.n	80119d2 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80119b2:	23a0      	movs	r3, #160	@ 0xa0
 80119b4:	18fb      	adds	r3, r7, r3
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	2280      	movs	r2, #128	@ 0x80
 80119ba:	4013      	ands	r3, r2
 80119bc:	d009      	beq.n	80119d2 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d01e      	beq.n	8011a04 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80119ca:	687a      	ldr	r2, [r7, #4]
 80119cc:	0010      	movs	r0, r2
 80119ce:	4798      	blx	r3
    }
    return;
 80119d0:	e018      	b.n	8011a04 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80119d2:	23a4      	movs	r3, #164	@ 0xa4
 80119d4:	18fb      	adds	r3, r7, r3
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	2240      	movs	r2, #64	@ 0x40
 80119da:	4013      	ands	r3, r2
 80119dc:	d013      	beq.n	8011a06 <HAL_UART_IRQHandler+0x5ca>
 80119de:	23a0      	movs	r3, #160	@ 0xa0
 80119e0:	18fb      	adds	r3, r7, r3
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	2240      	movs	r2, #64	@ 0x40
 80119e6:	4013      	ands	r3, r2
 80119e8:	d00d      	beq.n	8011a06 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	0018      	movs	r0, r3
 80119ee:	f000 ff98 	bl	8012922 <UART_EndTransmit_IT>
    return;
 80119f2:	e008      	b.n	8011a06 <HAL_UART_IRQHandler+0x5ca>
      return;
 80119f4:	46c0      	nop			@ (mov r8, r8)
 80119f6:	e006      	b.n	8011a06 <HAL_UART_IRQHandler+0x5ca>
    return;
 80119f8:	46c0      	nop			@ (mov r8, r8)
 80119fa:	e004      	b.n	8011a06 <HAL_UART_IRQHandler+0x5ca>
      return;
 80119fc:	46c0      	nop			@ (mov r8, r8)
 80119fe:	e002      	b.n	8011a06 <HAL_UART_IRQHandler+0x5ca>
      return;
 8011a00:	46c0      	nop			@ (mov r8, r8)
 8011a02:	e000      	b.n	8011a06 <HAL_UART_IRQHandler+0x5ca>
    return;
 8011a04:	46c0      	nop			@ (mov r8, r8)
  }

}
 8011a06:	46bd      	mov	sp, r7
 8011a08:	b02b      	add	sp, #172	@ 0xac
 8011a0a:	bd90      	pop	{r4, r7, pc}
 8011a0c:	fffffeff 	.word	0xfffffeff
 8011a10:	fffffedf 	.word	0xfffffedf

08011a14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b082      	sub	sp, #8
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011a1c:	46c0      	nop			@ (mov r8, r8)
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	b002      	add	sp, #8
 8011a22:	bd80      	pop	{r7, pc}

08011a24 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b082      	sub	sp, #8
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8011a2c:	46c0      	nop			@ (mov r8, r8)
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	b002      	add	sp, #8
 8011a32:	bd80      	pop	{r7, pc}

08011a34 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b082      	sub	sp, #8
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8011a3c:	46c0      	nop			@ (mov r8, r8)
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	b002      	add	sp, #8
 8011a42:	bd80      	pop	{r7, pc}

08011a44 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b082      	sub	sp, #8
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8011a4c:	46c0      	nop			@ (mov r8, r8)
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	b002      	add	sp, #8
 8011a52:	bd80      	pop	{r7, pc}

08011a54 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b082      	sub	sp, #8
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8011a5c:	46c0      	nop			@ (mov r8, r8)
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	b002      	add	sp, #8
 8011a62:	bd80      	pop	{r7, pc}

08011a64 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b082      	sub	sp, #8
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8011a6c:	46c0      	nop			@ (mov r8, r8)
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	b002      	add	sp, #8
 8011a72:	bd80      	pop	{r7, pc}

08011a74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b082      	sub	sp, #8
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
 8011a7c:	000a      	movs	r2, r1
 8011a7e:	1cbb      	adds	r3, r7, #2
 8011a80:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011a82:	46c0      	nop			@ (mov r8, r8)
 8011a84:	46bd      	mov	sp, r7
 8011a86:	b002      	add	sp, #8
 8011a88:	bd80      	pop	{r7, pc}
	...

08011a8c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b082      	sub	sp, #8
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	2188      	movs	r1, #136	@ 0x88
 8011a98:	4a14      	ldr	r2, [pc, #80]	@ (8011aec <UART_InitCallbacksToDefault+0x60>)
 8011a9a:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	218c      	movs	r1, #140	@ 0x8c
 8011aa0:	4a13      	ldr	r2, [pc, #76]	@ (8011af0 <UART_InitCallbacksToDefault+0x64>)
 8011aa2:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2190      	movs	r1, #144	@ 0x90
 8011aa8:	4a12      	ldr	r2, [pc, #72]	@ (8011af4 <UART_InitCallbacksToDefault+0x68>)
 8011aaa:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	2194      	movs	r1, #148	@ 0x94
 8011ab0:	4a11      	ldr	r2, [pc, #68]	@ (8011af8 <UART_InitCallbacksToDefault+0x6c>)
 8011ab2:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	2198      	movs	r1, #152	@ 0x98
 8011ab8:	4a10      	ldr	r2, [pc, #64]	@ (8011afc <UART_InitCallbacksToDefault+0x70>)
 8011aba:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	219c      	movs	r1, #156	@ 0x9c
 8011ac0:	4a0f      	ldr	r2, [pc, #60]	@ (8011b00 <UART_InitCallbacksToDefault+0x74>)
 8011ac2:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	21a0      	movs	r1, #160	@ 0xa0
 8011ac8:	4a0e      	ldr	r2, [pc, #56]	@ (8011b04 <UART_InitCallbacksToDefault+0x78>)
 8011aca:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	21a4      	movs	r1, #164	@ 0xa4
 8011ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8011b08 <UART_InitCallbacksToDefault+0x7c>)
 8011ad2:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	21a8      	movs	r1, #168	@ 0xa8
 8011ad8:	4a0c      	ldr	r2, [pc, #48]	@ (8011b0c <UART_InitCallbacksToDefault+0x80>)
 8011ada:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	21ac      	movs	r1, #172	@ 0xac
 8011ae0:	4a0b      	ldr	r2, [pc, #44]	@ (8011b10 <UART_InitCallbacksToDefault+0x84>)
 8011ae2:	505a      	str	r2, [r3, r1]

}
 8011ae4:	46c0      	nop			@ (mov r8, r8)
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	b002      	add	sp, #8
 8011aea:	bd80      	pop	{r7, pc}
 8011aec:	08011a25 	.word	0x08011a25
 8011af0:	08011a15 	.word	0x08011a15
 8011af4:	08011a35 	.word	0x08011a35
 8011af8:	08003839 	.word	0x08003839
 8011afc:	08003875 	.word	0x08003875
 8011b00:	08011a45 	.word	0x08011a45
 8011b04:	08011a55 	.word	0x08011a55
 8011b08:	08011a65 	.word	0x08011a65
 8011b0c:	0801297d 	.word	0x0801297d
 8011b10:	08011a75 	.word	0x08011a75

08011b14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011b14:	b5b0      	push	{r4, r5, r7, lr}
 8011b16:	b08e      	sub	sp, #56	@ 0x38
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011b1c:	231a      	movs	r3, #26
 8011b1e:	2218      	movs	r2, #24
 8011b20:	189b      	adds	r3, r3, r2
 8011b22:	19db      	adds	r3, r3, r7
 8011b24:	2200      	movs	r2, #0
 8011b26:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011b28:	69fb      	ldr	r3, [r7, #28]
 8011b2a:	689a      	ldr	r2, [r3, #8]
 8011b2c:	69fb      	ldr	r3, [r7, #28]
 8011b2e:	691b      	ldr	r3, [r3, #16]
 8011b30:	431a      	orrs	r2, r3
 8011b32:	69fb      	ldr	r3, [r7, #28]
 8011b34:	695b      	ldr	r3, [r3, #20]
 8011b36:	431a      	orrs	r2, r3
 8011b38:	69fb      	ldr	r3, [r7, #28]
 8011b3a:	69db      	ldr	r3, [r3, #28]
 8011b3c:	4313      	orrs	r3, r2
 8011b3e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011b40:	69fb      	ldr	r3, [r7, #28]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	4ac3      	ldr	r2, [pc, #780]	@ (8011e54 <UART_SetConfig+0x340>)
 8011b48:	4013      	ands	r3, r2
 8011b4a:	0019      	movs	r1, r3
 8011b4c:	69fb      	ldr	r3, [r7, #28]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011b52:	430a      	orrs	r2, r1
 8011b54:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011b56:	69fb      	ldr	r3, [r7, #28]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	685b      	ldr	r3, [r3, #4]
 8011b5c:	4abe      	ldr	r2, [pc, #760]	@ (8011e58 <UART_SetConfig+0x344>)
 8011b5e:	4013      	ands	r3, r2
 8011b60:	0019      	movs	r1, r3
 8011b62:	69fb      	ldr	r3, [r7, #28]
 8011b64:	68da      	ldr	r2, [r3, #12]
 8011b66:	69fb      	ldr	r3, [r7, #28]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	430a      	orrs	r2, r1
 8011b6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011b6e:	69fb      	ldr	r3, [r7, #28]
 8011b70:	699b      	ldr	r3, [r3, #24]
 8011b72:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011b74:	69fb      	ldr	r3, [r7, #28]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	4ab8      	ldr	r2, [pc, #736]	@ (8011e5c <UART_SetConfig+0x348>)
 8011b7a:	4293      	cmp	r3, r2
 8011b7c:	d004      	beq.n	8011b88 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011b7e:	69fb      	ldr	r3, [r7, #28]
 8011b80:	6a1b      	ldr	r3, [r3, #32]
 8011b82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011b84:	4313      	orrs	r3, r2
 8011b86:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011b88:	69fb      	ldr	r3, [r7, #28]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	689b      	ldr	r3, [r3, #8]
 8011b8e:	4ab4      	ldr	r2, [pc, #720]	@ (8011e60 <UART_SetConfig+0x34c>)
 8011b90:	4013      	ands	r3, r2
 8011b92:	0019      	movs	r1, r3
 8011b94:	69fb      	ldr	r3, [r7, #28]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011b9a:	430a      	orrs	r2, r1
 8011b9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011b9e:	69fb      	ldr	r3, [r7, #28]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	4ab0      	ldr	r2, [pc, #704]	@ (8011e64 <UART_SetConfig+0x350>)
 8011ba4:	4293      	cmp	r3, r2
 8011ba6:	d131      	bne.n	8011c0c <UART_SetConfig+0xf8>
 8011ba8:	4baf      	ldr	r3, [pc, #700]	@ (8011e68 <UART_SetConfig+0x354>)
 8011baa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011bac:	2203      	movs	r2, #3
 8011bae:	4013      	ands	r3, r2
 8011bb0:	2b03      	cmp	r3, #3
 8011bb2:	d01d      	beq.n	8011bf0 <UART_SetConfig+0xdc>
 8011bb4:	d823      	bhi.n	8011bfe <UART_SetConfig+0xea>
 8011bb6:	2b02      	cmp	r3, #2
 8011bb8:	d00c      	beq.n	8011bd4 <UART_SetConfig+0xc0>
 8011bba:	d820      	bhi.n	8011bfe <UART_SetConfig+0xea>
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d002      	beq.n	8011bc6 <UART_SetConfig+0xb2>
 8011bc0:	2b01      	cmp	r3, #1
 8011bc2:	d00e      	beq.n	8011be2 <UART_SetConfig+0xce>
 8011bc4:	e01b      	b.n	8011bfe <UART_SetConfig+0xea>
 8011bc6:	231b      	movs	r3, #27
 8011bc8:	2218      	movs	r2, #24
 8011bca:	189b      	adds	r3, r3, r2
 8011bcc:	19db      	adds	r3, r3, r7
 8011bce:	2201      	movs	r2, #1
 8011bd0:	701a      	strb	r2, [r3, #0]
 8011bd2:	e0b4      	b.n	8011d3e <UART_SetConfig+0x22a>
 8011bd4:	231b      	movs	r3, #27
 8011bd6:	2218      	movs	r2, #24
 8011bd8:	189b      	adds	r3, r3, r2
 8011bda:	19db      	adds	r3, r3, r7
 8011bdc:	2202      	movs	r2, #2
 8011bde:	701a      	strb	r2, [r3, #0]
 8011be0:	e0ad      	b.n	8011d3e <UART_SetConfig+0x22a>
 8011be2:	231b      	movs	r3, #27
 8011be4:	2218      	movs	r2, #24
 8011be6:	189b      	adds	r3, r3, r2
 8011be8:	19db      	adds	r3, r3, r7
 8011bea:	2204      	movs	r2, #4
 8011bec:	701a      	strb	r2, [r3, #0]
 8011bee:	e0a6      	b.n	8011d3e <UART_SetConfig+0x22a>
 8011bf0:	231b      	movs	r3, #27
 8011bf2:	2218      	movs	r2, #24
 8011bf4:	189b      	adds	r3, r3, r2
 8011bf6:	19db      	adds	r3, r3, r7
 8011bf8:	2208      	movs	r2, #8
 8011bfa:	701a      	strb	r2, [r3, #0]
 8011bfc:	e09f      	b.n	8011d3e <UART_SetConfig+0x22a>
 8011bfe:	231b      	movs	r3, #27
 8011c00:	2218      	movs	r2, #24
 8011c02:	189b      	adds	r3, r3, r2
 8011c04:	19db      	adds	r3, r3, r7
 8011c06:	2210      	movs	r2, #16
 8011c08:	701a      	strb	r2, [r3, #0]
 8011c0a:	e098      	b.n	8011d3e <UART_SetConfig+0x22a>
 8011c0c:	69fb      	ldr	r3, [r7, #28]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	4a96      	ldr	r2, [pc, #600]	@ (8011e6c <UART_SetConfig+0x358>)
 8011c12:	4293      	cmp	r3, r2
 8011c14:	d131      	bne.n	8011c7a <UART_SetConfig+0x166>
 8011c16:	4b94      	ldr	r3, [pc, #592]	@ (8011e68 <UART_SetConfig+0x354>)
 8011c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011c1a:	220c      	movs	r2, #12
 8011c1c:	4013      	ands	r3, r2
 8011c1e:	2b0c      	cmp	r3, #12
 8011c20:	d01d      	beq.n	8011c5e <UART_SetConfig+0x14a>
 8011c22:	d823      	bhi.n	8011c6c <UART_SetConfig+0x158>
 8011c24:	2b08      	cmp	r3, #8
 8011c26:	d00c      	beq.n	8011c42 <UART_SetConfig+0x12e>
 8011c28:	d820      	bhi.n	8011c6c <UART_SetConfig+0x158>
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d002      	beq.n	8011c34 <UART_SetConfig+0x120>
 8011c2e:	2b04      	cmp	r3, #4
 8011c30:	d00e      	beq.n	8011c50 <UART_SetConfig+0x13c>
 8011c32:	e01b      	b.n	8011c6c <UART_SetConfig+0x158>
 8011c34:	231b      	movs	r3, #27
 8011c36:	2218      	movs	r2, #24
 8011c38:	189b      	adds	r3, r3, r2
 8011c3a:	19db      	adds	r3, r3, r7
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	701a      	strb	r2, [r3, #0]
 8011c40:	e07d      	b.n	8011d3e <UART_SetConfig+0x22a>
 8011c42:	231b      	movs	r3, #27
 8011c44:	2218      	movs	r2, #24
 8011c46:	189b      	adds	r3, r3, r2
 8011c48:	19db      	adds	r3, r3, r7
 8011c4a:	2202      	movs	r2, #2
 8011c4c:	701a      	strb	r2, [r3, #0]
 8011c4e:	e076      	b.n	8011d3e <UART_SetConfig+0x22a>
 8011c50:	231b      	movs	r3, #27
 8011c52:	2218      	movs	r2, #24
 8011c54:	189b      	adds	r3, r3, r2
 8011c56:	19db      	adds	r3, r3, r7
 8011c58:	2204      	movs	r2, #4
 8011c5a:	701a      	strb	r2, [r3, #0]
 8011c5c:	e06f      	b.n	8011d3e <UART_SetConfig+0x22a>
 8011c5e:	231b      	movs	r3, #27
 8011c60:	2218      	movs	r2, #24
 8011c62:	189b      	adds	r3, r3, r2
 8011c64:	19db      	adds	r3, r3, r7
 8011c66:	2208      	movs	r2, #8
 8011c68:	701a      	strb	r2, [r3, #0]
 8011c6a:	e068      	b.n	8011d3e <UART_SetConfig+0x22a>
 8011c6c:	231b      	movs	r3, #27
 8011c6e:	2218      	movs	r2, #24
 8011c70:	189b      	adds	r3, r3, r2
 8011c72:	19db      	adds	r3, r3, r7
 8011c74:	2210      	movs	r2, #16
 8011c76:	701a      	strb	r2, [r3, #0]
 8011c78:	e061      	b.n	8011d3e <UART_SetConfig+0x22a>
 8011c7a:	69fb      	ldr	r3, [r7, #28]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	4a7c      	ldr	r2, [pc, #496]	@ (8011e70 <UART_SetConfig+0x35c>)
 8011c80:	4293      	cmp	r3, r2
 8011c82:	d106      	bne.n	8011c92 <UART_SetConfig+0x17e>
 8011c84:	231b      	movs	r3, #27
 8011c86:	2218      	movs	r2, #24
 8011c88:	189b      	adds	r3, r3, r2
 8011c8a:	19db      	adds	r3, r3, r7
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	701a      	strb	r2, [r3, #0]
 8011c90:	e055      	b.n	8011d3e <UART_SetConfig+0x22a>
 8011c92:	69fb      	ldr	r3, [r7, #28]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	4a77      	ldr	r2, [pc, #476]	@ (8011e74 <UART_SetConfig+0x360>)
 8011c98:	4293      	cmp	r3, r2
 8011c9a:	d106      	bne.n	8011caa <UART_SetConfig+0x196>
 8011c9c:	231b      	movs	r3, #27
 8011c9e:	2218      	movs	r2, #24
 8011ca0:	189b      	adds	r3, r3, r2
 8011ca2:	19db      	adds	r3, r3, r7
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	701a      	strb	r2, [r3, #0]
 8011ca8:	e049      	b.n	8011d3e <UART_SetConfig+0x22a>
 8011caa:	69fb      	ldr	r3, [r7, #28]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	4a6b      	ldr	r2, [pc, #428]	@ (8011e5c <UART_SetConfig+0x348>)
 8011cb0:	4293      	cmp	r3, r2
 8011cb2:	d13e      	bne.n	8011d32 <UART_SetConfig+0x21e>
 8011cb4:	4b6c      	ldr	r3, [pc, #432]	@ (8011e68 <UART_SetConfig+0x354>)
 8011cb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011cb8:	23c0      	movs	r3, #192	@ 0xc0
 8011cba:	011b      	lsls	r3, r3, #4
 8011cbc:	4013      	ands	r3, r2
 8011cbe:	22c0      	movs	r2, #192	@ 0xc0
 8011cc0:	0112      	lsls	r2, r2, #4
 8011cc2:	4293      	cmp	r3, r2
 8011cc4:	d027      	beq.n	8011d16 <UART_SetConfig+0x202>
 8011cc6:	22c0      	movs	r2, #192	@ 0xc0
 8011cc8:	0112      	lsls	r2, r2, #4
 8011cca:	4293      	cmp	r3, r2
 8011ccc:	d82a      	bhi.n	8011d24 <UART_SetConfig+0x210>
 8011cce:	2280      	movs	r2, #128	@ 0x80
 8011cd0:	0112      	lsls	r2, r2, #4
 8011cd2:	4293      	cmp	r3, r2
 8011cd4:	d011      	beq.n	8011cfa <UART_SetConfig+0x1e6>
 8011cd6:	2280      	movs	r2, #128	@ 0x80
 8011cd8:	0112      	lsls	r2, r2, #4
 8011cda:	4293      	cmp	r3, r2
 8011cdc:	d822      	bhi.n	8011d24 <UART_SetConfig+0x210>
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d004      	beq.n	8011cec <UART_SetConfig+0x1d8>
 8011ce2:	2280      	movs	r2, #128	@ 0x80
 8011ce4:	00d2      	lsls	r2, r2, #3
 8011ce6:	4293      	cmp	r3, r2
 8011ce8:	d00e      	beq.n	8011d08 <UART_SetConfig+0x1f4>
 8011cea:	e01b      	b.n	8011d24 <UART_SetConfig+0x210>
 8011cec:	231b      	movs	r3, #27
 8011cee:	2218      	movs	r2, #24
 8011cf0:	189b      	adds	r3, r3, r2
 8011cf2:	19db      	adds	r3, r3, r7
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	701a      	strb	r2, [r3, #0]
 8011cf8:	e021      	b.n	8011d3e <UART_SetConfig+0x22a>
 8011cfa:	231b      	movs	r3, #27
 8011cfc:	2218      	movs	r2, #24
 8011cfe:	189b      	adds	r3, r3, r2
 8011d00:	19db      	adds	r3, r3, r7
 8011d02:	2202      	movs	r2, #2
 8011d04:	701a      	strb	r2, [r3, #0]
 8011d06:	e01a      	b.n	8011d3e <UART_SetConfig+0x22a>
 8011d08:	231b      	movs	r3, #27
 8011d0a:	2218      	movs	r2, #24
 8011d0c:	189b      	adds	r3, r3, r2
 8011d0e:	19db      	adds	r3, r3, r7
 8011d10:	2204      	movs	r2, #4
 8011d12:	701a      	strb	r2, [r3, #0]
 8011d14:	e013      	b.n	8011d3e <UART_SetConfig+0x22a>
 8011d16:	231b      	movs	r3, #27
 8011d18:	2218      	movs	r2, #24
 8011d1a:	189b      	adds	r3, r3, r2
 8011d1c:	19db      	adds	r3, r3, r7
 8011d1e:	2208      	movs	r2, #8
 8011d20:	701a      	strb	r2, [r3, #0]
 8011d22:	e00c      	b.n	8011d3e <UART_SetConfig+0x22a>
 8011d24:	231b      	movs	r3, #27
 8011d26:	2218      	movs	r2, #24
 8011d28:	189b      	adds	r3, r3, r2
 8011d2a:	19db      	adds	r3, r3, r7
 8011d2c:	2210      	movs	r2, #16
 8011d2e:	701a      	strb	r2, [r3, #0]
 8011d30:	e005      	b.n	8011d3e <UART_SetConfig+0x22a>
 8011d32:	231b      	movs	r3, #27
 8011d34:	2218      	movs	r2, #24
 8011d36:	189b      	adds	r3, r3, r2
 8011d38:	19db      	adds	r3, r3, r7
 8011d3a:	2210      	movs	r2, #16
 8011d3c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011d3e:	69fb      	ldr	r3, [r7, #28]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	4a46      	ldr	r2, [pc, #280]	@ (8011e5c <UART_SetConfig+0x348>)
 8011d44:	4293      	cmp	r3, r2
 8011d46:	d000      	beq.n	8011d4a <UART_SetConfig+0x236>
 8011d48:	e09a      	b.n	8011e80 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011d4a:	231b      	movs	r3, #27
 8011d4c:	2218      	movs	r2, #24
 8011d4e:	189b      	adds	r3, r3, r2
 8011d50:	19db      	adds	r3, r3, r7
 8011d52:	781b      	ldrb	r3, [r3, #0]
 8011d54:	2b08      	cmp	r3, #8
 8011d56:	d01d      	beq.n	8011d94 <UART_SetConfig+0x280>
 8011d58:	dc20      	bgt.n	8011d9c <UART_SetConfig+0x288>
 8011d5a:	2b04      	cmp	r3, #4
 8011d5c:	d015      	beq.n	8011d8a <UART_SetConfig+0x276>
 8011d5e:	dc1d      	bgt.n	8011d9c <UART_SetConfig+0x288>
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d002      	beq.n	8011d6a <UART_SetConfig+0x256>
 8011d64:	2b02      	cmp	r3, #2
 8011d66:	d005      	beq.n	8011d74 <UART_SetConfig+0x260>
 8011d68:	e018      	b.n	8011d9c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011d6a:	f7fe fb1f 	bl	80103ac <HAL_RCC_GetPCLK1Freq>
 8011d6e:	0003      	movs	r3, r0
 8011d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8011d72:	e01c      	b.n	8011dae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011d74:	4b3c      	ldr	r3, [pc, #240]	@ (8011e68 <UART_SetConfig+0x354>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	2210      	movs	r2, #16
 8011d7a:	4013      	ands	r3, r2
 8011d7c:	d002      	beq.n	8011d84 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8011d7e:	4b3e      	ldr	r3, [pc, #248]	@ (8011e78 <UART_SetConfig+0x364>)
 8011d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011d82:	e014      	b.n	8011dae <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8011d84:	4b3d      	ldr	r3, [pc, #244]	@ (8011e7c <UART_SetConfig+0x368>)
 8011d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8011d88:	e011      	b.n	8011dae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011d8a:	f7fe fa5f 	bl	801024c <HAL_RCC_GetSysClockFreq>
 8011d8e:	0003      	movs	r3, r0
 8011d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8011d92:	e00c      	b.n	8011dae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011d94:	2380      	movs	r3, #128	@ 0x80
 8011d96:	021b      	lsls	r3, r3, #8
 8011d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8011d9a:	e008      	b.n	8011dae <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8011da0:	231a      	movs	r3, #26
 8011da2:	2218      	movs	r2, #24
 8011da4:	189b      	adds	r3, r3, r2
 8011da6:	19db      	adds	r3, r3, r7
 8011da8:	2201      	movs	r2, #1
 8011daa:	701a      	strb	r2, [r3, #0]
        break;
 8011dac:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d100      	bne.n	8011db6 <UART_SetConfig+0x2a2>
 8011db4:	e133      	b.n	801201e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8011db6:	69fb      	ldr	r3, [r7, #28]
 8011db8:	685a      	ldr	r2, [r3, #4]
 8011dba:	0013      	movs	r3, r2
 8011dbc:	005b      	lsls	r3, r3, #1
 8011dbe:	189b      	adds	r3, r3, r2
 8011dc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011dc2:	429a      	cmp	r2, r3
 8011dc4:	d305      	bcc.n	8011dd2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8011dc6:	69fb      	ldr	r3, [r7, #28]
 8011dc8:	685b      	ldr	r3, [r3, #4]
 8011dca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8011dcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	d906      	bls.n	8011de0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8011dd2:	231a      	movs	r3, #26
 8011dd4:	2218      	movs	r2, #24
 8011dd6:	189b      	adds	r3, r3, r2
 8011dd8:	19db      	adds	r3, r3, r7
 8011dda:	2201      	movs	r2, #1
 8011ddc:	701a      	strb	r2, [r3, #0]
 8011dde:	e11e      	b.n	801201e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8011de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011de2:	613b      	str	r3, [r7, #16]
 8011de4:	2300      	movs	r3, #0
 8011de6:	617b      	str	r3, [r7, #20]
 8011de8:	6939      	ldr	r1, [r7, #16]
 8011dea:	697a      	ldr	r2, [r7, #20]
 8011dec:	000b      	movs	r3, r1
 8011dee:	0e1b      	lsrs	r3, r3, #24
 8011df0:	0010      	movs	r0, r2
 8011df2:	0205      	lsls	r5, r0, #8
 8011df4:	431d      	orrs	r5, r3
 8011df6:	000b      	movs	r3, r1
 8011df8:	021c      	lsls	r4, r3, #8
 8011dfa:	69fb      	ldr	r3, [r7, #28]
 8011dfc:	685b      	ldr	r3, [r3, #4]
 8011dfe:	085b      	lsrs	r3, r3, #1
 8011e00:	60bb      	str	r3, [r7, #8]
 8011e02:	2300      	movs	r3, #0
 8011e04:	60fb      	str	r3, [r7, #12]
 8011e06:	68b8      	ldr	r0, [r7, #8]
 8011e08:	68f9      	ldr	r1, [r7, #12]
 8011e0a:	1900      	adds	r0, r0, r4
 8011e0c:	4169      	adcs	r1, r5
 8011e0e:	69fb      	ldr	r3, [r7, #28]
 8011e10:	685b      	ldr	r3, [r3, #4]
 8011e12:	603b      	str	r3, [r7, #0]
 8011e14:	2300      	movs	r3, #0
 8011e16:	607b      	str	r3, [r7, #4]
 8011e18:	683a      	ldr	r2, [r7, #0]
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	f7ee fb7e 	bl	800051c <__aeabi_uldivmod>
 8011e20:	0002      	movs	r2, r0
 8011e22:	000b      	movs	r3, r1
 8011e24:	0013      	movs	r3, r2
 8011e26:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011e28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011e2a:	23c0      	movs	r3, #192	@ 0xc0
 8011e2c:	009b      	lsls	r3, r3, #2
 8011e2e:	429a      	cmp	r2, r3
 8011e30:	d309      	bcc.n	8011e46 <UART_SetConfig+0x332>
 8011e32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011e34:	2380      	movs	r3, #128	@ 0x80
 8011e36:	035b      	lsls	r3, r3, #13
 8011e38:	429a      	cmp	r2, r3
 8011e3a:	d204      	bcs.n	8011e46 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8011e3c:	69fb      	ldr	r3, [r7, #28]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011e42:	60da      	str	r2, [r3, #12]
 8011e44:	e0eb      	b.n	801201e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8011e46:	231a      	movs	r3, #26
 8011e48:	2218      	movs	r2, #24
 8011e4a:	189b      	adds	r3, r3, r2
 8011e4c:	19db      	adds	r3, r3, r7
 8011e4e:	2201      	movs	r2, #1
 8011e50:	701a      	strb	r2, [r3, #0]
 8011e52:	e0e4      	b.n	801201e <UART_SetConfig+0x50a>
 8011e54:	efff69f3 	.word	0xefff69f3
 8011e58:	ffffcfff 	.word	0xffffcfff
 8011e5c:	40004800 	.word	0x40004800
 8011e60:	fffff4ff 	.word	0xfffff4ff
 8011e64:	40013800 	.word	0x40013800
 8011e68:	40021000 	.word	0x40021000
 8011e6c:	40004400 	.word	0x40004400
 8011e70:	40004c00 	.word	0x40004c00
 8011e74:	40005000 	.word	0x40005000
 8011e78:	003d0900 	.word	0x003d0900
 8011e7c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011e80:	69fb      	ldr	r3, [r7, #28]
 8011e82:	69da      	ldr	r2, [r3, #28]
 8011e84:	2380      	movs	r3, #128	@ 0x80
 8011e86:	021b      	lsls	r3, r3, #8
 8011e88:	429a      	cmp	r2, r3
 8011e8a:	d000      	beq.n	8011e8e <UART_SetConfig+0x37a>
 8011e8c:	e070      	b.n	8011f70 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8011e8e:	231b      	movs	r3, #27
 8011e90:	2218      	movs	r2, #24
 8011e92:	189b      	adds	r3, r3, r2
 8011e94:	19db      	adds	r3, r3, r7
 8011e96:	781b      	ldrb	r3, [r3, #0]
 8011e98:	2b08      	cmp	r3, #8
 8011e9a:	d822      	bhi.n	8011ee2 <UART_SetConfig+0x3ce>
 8011e9c:	009a      	lsls	r2, r3, #2
 8011e9e:	4b67      	ldr	r3, [pc, #412]	@ (801203c <UART_SetConfig+0x528>)
 8011ea0:	18d3      	adds	r3, r2, r3
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011ea6:	f7fe fa81 	bl	80103ac <HAL_RCC_GetPCLK1Freq>
 8011eaa:	0003      	movs	r3, r0
 8011eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8011eae:	e021      	b.n	8011ef4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011eb0:	f7fe fa92 	bl	80103d8 <HAL_RCC_GetPCLK2Freq>
 8011eb4:	0003      	movs	r3, r0
 8011eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8011eb8:	e01c      	b.n	8011ef4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011eba:	4b61      	ldr	r3, [pc, #388]	@ (8012040 <UART_SetConfig+0x52c>)
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	2210      	movs	r2, #16
 8011ec0:	4013      	ands	r3, r2
 8011ec2:	d002      	beq.n	8011eca <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8011ec4:	4b5f      	ldr	r3, [pc, #380]	@ (8012044 <UART_SetConfig+0x530>)
 8011ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011ec8:	e014      	b.n	8011ef4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8011eca:	4b5f      	ldr	r3, [pc, #380]	@ (8012048 <UART_SetConfig+0x534>)
 8011ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8011ece:	e011      	b.n	8011ef4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011ed0:	f7fe f9bc 	bl	801024c <HAL_RCC_GetSysClockFreq>
 8011ed4:	0003      	movs	r3, r0
 8011ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8011ed8:	e00c      	b.n	8011ef4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011eda:	2380      	movs	r3, #128	@ 0x80
 8011edc:	021b      	lsls	r3, r3, #8
 8011ede:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8011ee0:	e008      	b.n	8011ef4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8011ee6:	231a      	movs	r3, #26
 8011ee8:	2218      	movs	r2, #24
 8011eea:	189b      	adds	r3, r3, r2
 8011eec:	19db      	adds	r3, r3, r7
 8011eee:	2201      	movs	r2, #1
 8011ef0:	701a      	strb	r2, [r3, #0]
        break;
 8011ef2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d100      	bne.n	8011efc <UART_SetConfig+0x3e8>
 8011efa:	e090      	b.n	801201e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8011efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011efe:	005a      	lsls	r2, r3, #1
 8011f00:	69fb      	ldr	r3, [r7, #28]
 8011f02:	685b      	ldr	r3, [r3, #4]
 8011f04:	085b      	lsrs	r3, r3, #1
 8011f06:	18d2      	adds	r2, r2, r3
 8011f08:	69fb      	ldr	r3, [r7, #28]
 8011f0a:	685b      	ldr	r3, [r3, #4]
 8011f0c:	0019      	movs	r1, r3
 8011f0e:	0010      	movs	r0, r2
 8011f10:	f7ee f916 	bl	8000140 <__udivsi3>
 8011f14:	0003      	movs	r3, r0
 8011f16:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f1a:	2b0f      	cmp	r3, #15
 8011f1c:	d921      	bls.n	8011f62 <UART_SetConfig+0x44e>
 8011f1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011f20:	2380      	movs	r3, #128	@ 0x80
 8011f22:	025b      	lsls	r3, r3, #9
 8011f24:	429a      	cmp	r2, r3
 8011f26:	d21c      	bcs.n	8011f62 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f2a:	b29a      	uxth	r2, r3
 8011f2c:	200e      	movs	r0, #14
 8011f2e:	2418      	movs	r4, #24
 8011f30:	1903      	adds	r3, r0, r4
 8011f32:	19db      	adds	r3, r3, r7
 8011f34:	210f      	movs	r1, #15
 8011f36:	438a      	bics	r2, r1
 8011f38:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f3c:	085b      	lsrs	r3, r3, #1
 8011f3e:	b29b      	uxth	r3, r3
 8011f40:	2207      	movs	r2, #7
 8011f42:	4013      	ands	r3, r2
 8011f44:	b299      	uxth	r1, r3
 8011f46:	1903      	adds	r3, r0, r4
 8011f48:	19db      	adds	r3, r3, r7
 8011f4a:	1902      	adds	r2, r0, r4
 8011f4c:	19d2      	adds	r2, r2, r7
 8011f4e:	8812      	ldrh	r2, [r2, #0]
 8011f50:	430a      	orrs	r2, r1
 8011f52:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8011f54:	69fb      	ldr	r3, [r7, #28]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	1902      	adds	r2, r0, r4
 8011f5a:	19d2      	adds	r2, r2, r7
 8011f5c:	8812      	ldrh	r2, [r2, #0]
 8011f5e:	60da      	str	r2, [r3, #12]
 8011f60:	e05d      	b.n	801201e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8011f62:	231a      	movs	r3, #26
 8011f64:	2218      	movs	r2, #24
 8011f66:	189b      	adds	r3, r3, r2
 8011f68:	19db      	adds	r3, r3, r7
 8011f6a:	2201      	movs	r2, #1
 8011f6c:	701a      	strb	r2, [r3, #0]
 8011f6e:	e056      	b.n	801201e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011f70:	231b      	movs	r3, #27
 8011f72:	2218      	movs	r2, #24
 8011f74:	189b      	adds	r3, r3, r2
 8011f76:	19db      	adds	r3, r3, r7
 8011f78:	781b      	ldrb	r3, [r3, #0]
 8011f7a:	2b08      	cmp	r3, #8
 8011f7c:	d822      	bhi.n	8011fc4 <UART_SetConfig+0x4b0>
 8011f7e:	009a      	lsls	r2, r3, #2
 8011f80:	4b32      	ldr	r3, [pc, #200]	@ (801204c <UART_SetConfig+0x538>)
 8011f82:	18d3      	adds	r3, r2, r3
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011f88:	f7fe fa10 	bl	80103ac <HAL_RCC_GetPCLK1Freq>
 8011f8c:	0003      	movs	r3, r0
 8011f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8011f90:	e021      	b.n	8011fd6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011f92:	f7fe fa21 	bl	80103d8 <HAL_RCC_GetPCLK2Freq>
 8011f96:	0003      	movs	r3, r0
 8011f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8011f9a:	e01c      	b.n	8011fd6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011f9c:	4b28      	ldr	r3, [pc, #160]	@ (8012040 <UART_SetConfig+0x52c>)
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	2210      	movs	r2, #16
 8011fa2:	4013      	ands	r3, r2
 8011fa4:	d002      	beq.n	8011fac <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8011fa6:	4b27      	ldr	r3, [pc, #156]	@ (8012044 <UART_SetConfig+0x530>)
 8011fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011faa:	e014      	b.n	8011fd6 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8011fac:	4b26      	ldr	r3, [pc, #152]	@ (8012048 <UART_SetConfig+0x534>)
 8011fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8011fb0:	e011      	b.n	8011fd6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011fb2:	f7fe f94b 	bl	801024c <HAL_RCC_GetSysClockFreq>
 8011fb6:	0003      	movs	r3, r0
 8011fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8011fba:	e00c      	b.n	8011fd6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011fbc:	2380      	movs	r3, #128	@ 0x80
 8011fbe:	021b      	lsls	r3, r3, #8
 8011fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8011fc2:	e008      	b.n	8011fd6 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8011fc8:	231a      	movs	r3, #26
 8011fca:	2218      	movs	r2, #24
 8011fcc:	189b      	adds	r3, r3, r2
 8011fce:	19db      	adds	r3, r3, r7
 8011fd0:	2201      	movs	r2, #1
 8011fd2:	701a      	strb	r2, [r3, #0]
        break;
 8011fd4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8011fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d020      	beq.n	801201e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8011fdc:	69fb      	ldr	r3, [r7, #28]
 8011fde:	685b      	ldr	r3, [r3, #4]
 8011fe0:	085a      	lsrs	r2, r3, #1
 8011fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011fe4:	18d2      	adds	r2, r2, r3
 8011fe6:	69fb      	ldr	r3, [r7, #28]
 8011fe8:	685b      	ldr	r3, [r3, #4]
 8011fea:	0019      	movs	r1, r3
 8011fec:	0010      	movs	r0, r2
 8011fee:	f7ee f8a7 	bl	8000140 <__udivsi3>
 8011ff2:	0003      	movs	r3, r0
 8011ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ff8:	2b0f      	cmp	r3, #15
 8011ffa:	d90a      	bls.n	8012012 <UART_SetConfig+0x4fe>
 8011ffc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011ffe:	2380      	movs	r3, #128	@ 0x80
 8012000:	025b      	lsls	r3, r3, #9
 8012002:	429a      	cmp	r2, r3
 8012004:	d205      	bcs.n	8012012 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012008:	b29a      	uxth	r2, r3
 801200a:	69fb      	ldr	r3, [r7, #28]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	60da      	str	r2, [r3, #12]
 8012010:	e005      	b.n	801201e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8012012:	231a      	movs	r3, #26
 8012014:	2218      	movs	r2, #24
 8012016:	189b      	adds	r3, r3, r2
 8012018:	19db      	adds	r3, r3, r7
 801201a:	2201      	movs	r2, #1
 801201c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801201e:	69fb      	ldr	r3, [r7, #28]
 8012020:	2200      	movs	r2, #0
 8012022:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8012024:	69fb      	ldr	r3, [r7, #28]
 8012026:	2200      	movs	r2, #0
 8012028:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801202a:	231a      	movs	r3, #26
 801202c:	2218      	movs	r2, #24
 801202e:	189b      	adds	r3, r3, r2
 8012030:	19db      	adds	r3, r3, r7
 8012032:	781b      	ldrb	r3, [r3, #0]
}
 8012034:	0018      	movs	r0, r3
 8012036:	46bd      	mov	sp, r7
 8012038:	b00e      	add	sp, #56	@ 0x38
 801203a:	bdb0      	pop	{r4, r5, r7, pc}
 801203c:	0801b834 	.word	0x0801b834
 8012040:	40021000 	.word	0x40021000
 8012044:	003d0900 	.word	0x003d0900
 8012048:	00f42400 	.word	0x00f42400
 801204c:	0801b858 	.word	0x0801b858

08012050 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b082      	sub	sp, #8
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801205c:	2201      	movs	r2, #1
 801205e:	4013      	ands	r3, r2
 8012060:	d00b      	beq.n	801207a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	685b      	ldr	r3, [r3, #4]
 8012068:	4a4a      	ldr	r2, [pc, #296]	@ (8012194 <UART_AdvFeatureConfig+0x144>)
 801206a:	4013      	ands	r3, r2
 801206c:	0019      	movs	r1, r3
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	430a      	orrs	r2, r1
 8012078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801207e:	2202      	movs	r2, #2
 8012080:	4013      	ands	r3, r2
 8012082:	d00b      	beq.n	801209c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	685b      	ldr	r3, [r3, #4]
 801208a:	4a43      	ldr	r2, [pc, #268]	@ (8012198 <UART_AdvFeatureConfig+0x148>)
 801208c:	4013      	ands	r3, r2
 801208e:	0019      	movs	r1, r3
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	430a      	orrs	r2, r1
 801209a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120a0:	2204      	movs	r2, #4
 80120a2:	4013      	ands	r3, r2
 80120a4:	d00b      	beq.n	80120be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	685b      	ldr	r3, [r3, #4]
 80120ac:	4a3b      	ldr	r2, [pc, #236]	@ (801219c <UART_AdvFeatureConfig+0x14c>)
 80120ae:	4013      	ands	r3, r2
 80120b0:	0019      	movs	r1, r3
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	430a      	orrs	r2, r1
 80120bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120c2:	2208      	movs	r2, #8
 80120c4:	4013      	ands	r3, r2
 80120c6:	d00b      	beq.n	80120e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	685b      	ldr	r3, [r3, #4]
 80120ce:	4a34      	ldr	r2, [pc, #208]	@ (80121a0 <UART_AdvFeatureConfig+0x150>)
 80120d0:	4013      	ands	r3, r2
 80120d2:	0019      	movs	r1, r3
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	430a      	orrs	r2, r1
 80120de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120e4:	2210      	movs	r2, #16
 80120e6:	4013      	ands	r3, r2
 80120e8:	d00b      	beq.n	8012102 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	689b      	ldr	r3, [r3, #8]
 80120f0:	4a2c      	ldr	r2, [pc, #176]	@ (80121a4 <UART_AdvFeatureConfig+0x154>)
 80120f2:	4013      	ands	r3, r2
 80120f4:	0019      	movs	r1, r3
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	430a      	orrs	r2, r1
 8012100:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012106:	2220      	movs	r2, #32
 8012108:	4013      	ands	r3, r2
 801210a:	d00b      	beq.n	8012124 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	689b      	ldr	r3, [r3, #8]
 8012112:	4a25      	ldr	r2, [pc, #148]	@ (80121a8 <UART_AdvFeatureConfig+0x158>)
 8012114:	4013      	ands	r3, r2
 8012116:	0019      	movs	r1, r3
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	430a      	orrs	r2, r1
 8012122:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012128:	2240      	movs	r2, #64	@ 0x40
 801212a:	4013      	ands	r3, r2
 801212c:	d01d      	beq.n	801216a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	685b      	ldr	r3, [r3, #4]
 8012134:	4a1d      	ldr	r2, [pc, #116]	@ (80121ac <UART_AdvFeatureConfig+0x15c>)
 8012136:	4013      	ands	r3, r2
 8012138:	0019      	movs	r1, r3
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	430a      	orrs	r2, r1
 8012144:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801214a:	2380      	movs	r3, #128	@ 0x80
 801214c:	035b      	lsls	r3, r3, #13
 801214e:	429a      	cmp	r2, r3
 8012150:	d10b      	bne.n	801216a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	685b      	ldr	r3, [r3, #4]
 8012158:	4a15      	ldr	r2, [pc, #84]	@ (80121b0 <UART_AdvFeatureConfig+0x160>)
 801215a:	4013      	ands	r3, r2
 801215c:	0019      	movs	r1, r3
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	430a      	orrs	r2, r1
 8012168:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801216e:	2280      	movs	r2, #128	@ 0x80
 8012170:	4013      	ands	r3, r2
 8012172:	d00b      	beq.n	801218c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	685b      	ldr	r3, [r3, #4]
 801217a:	4a0e      	ldr	r2, [pc, #56]	@ (80121b4 <UART_AdvFeatureConfig+0x164>)
 801217c:	4013      	ands	r3, r2
 801217e:	0019      	movs	r1, r3
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	430a      	orrs	r2, r1
 801218a:	605a      	str	r2, [r3, #4]
  }
}
 801218c:	46c0      	nop			@ (mov r8, r8)
 801218e:	46bd      	mov	sp, r7
 8012190:	b002      	add	sp, #8
 8012192:	bd80      	pop	{r7, pc}
 8012194:	fffdffff 	.word	0xfffdffff
 8012198:	fffeffff 	.word	0xfffeffff
 801219c:	fffbffff 	.word	0xfffbffff
 80121a0:	ffff7fff 	.word	0xffff7fff
 80121a4:	ffffefff 	.word	0xffffefff
 80121a8:	ffffdfff 	.word	0xffffdfff
 80121ac:	ffefffff 	.word	0xffefffff
 80121b0:	ff9fffff 	.word	0xff9fffff
 80121b4:	fff7ffff 	.word	0xfff7ffff

080121b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b092      	sub	sp, #72	@ 0x48
 80121bc:	af02      	add	r7, sp, #8
 80121be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	2284      	movs	r2, #132	@ 0x84
 80121c4:	2100      	movs	r1, #0
 80121c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80121c8:	f7f7 fdaa 	bl	8009d20 <HAL_GetTick>
 80121cc:	0003      	movs	r3, r0
 80121ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	2208      	movs	r2, #8
 80121d8:	4013      	ands	r3, r2
 80121da:	2b08      	cmp	r3, #8
 80121dc:	d12c      	bne.n	8012238 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80121de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80121e0:	2280      	movs	r2, #128	@ 0x80
 80121e2:	0391      	lsls	r1, r2, #14
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	4a46      	ldr	r2, [pc, #280]	@ (8012300 <UART_CheckIdleState+0x148>)
 80121e8:	9200      	str	r2, [sp, #0]
 80121ea:	2200      	movs	r2, #0
 80121ec:	f000 f88c 	bl	8012308 <UART_WaitOnFlagUntilTimeout>
 80121f0:	1e03      	subs	r3, r0, #0
 80121f2:	d021      	beq.n	8012238 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80121f4:	f3ef 8310 	mrs	r3, PRIMASK
 80121f8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80121fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80121fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80121fe:	2301      	movs	r3, #1
 8012200:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012204:	f383 8810 	msr	PRIMASK, r3
}
 8012208:	46c0      	nop			@ (mov r8, r8)
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	681a      	ldr	r2, [r3, #0]
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	2180      	movs	r1, #128	@ 0x80
 8012216:	438a      	bics	r2, r1
 8012218:	601a      	str	r2, [r3, #0]
 801221a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801221c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801221e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012220:	f383 8810 	msr	PRIMASK, r3
}
 8012224:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	2220      	movs	r2, #32
 801222a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2278      	movs	r2, #120	@ 0x78
 8012230:	2100      	movs	r1, #0
 8012232:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012234:	2303      	movs	r3, #3
 8012236:	e05f      	b.n	80122f8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	2204      	movs	r2, #4
 8012240:	4013      	ands	r3, r2
 8012242:	2b04      	cmp	r3, #4
 8012244:	d146      	bne.n	80122d4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012248:	2280      	movs	r2, #128	@ 0x80
 801224a:	03d1      	lsls	r1, r2, #15
 801224c:	6878      	ldr	r0, [r7, #4]
 801224e:	4a2c      	ldr	r2, [pc, #176]	@ (8012300 <UART_CheckIdleState+0x148>)
 8012250:	9200      	str	r2, [sp, #0]
 8012252:	2200      	movs	r2, #0
 8012254:	f000 f858 	bl	8012308 <UART_WaitOnFlagUntilTimeout>
 8012258:	1e03      	subs	r3, r0, #0
 801225a:	d03b      	beq.n	80122d4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801225c:	f3ef 8310 	mrs	r3, PRIMASK
 8012260:	60fb      	str	r3, [r7, #12]
  return(result);
 8012262:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012264:	637b      	str	r3, [r7, #52]	@ 0x34
 8012266:	2301      	movs	r3, #1
 8012268:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801226a:	693b      	ldr	r3, [r7, #16]
 801226c:	f383 8810 	msr	PRIMASK, r3
}
 8012270:	46c0      	nop			@ (mov r8, r8)
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	681a      	ldr	r2, [r3, #0]
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	4921      	ldr	r1, [pc, #132]	@ (8012304 <UART_CheckIdleState+0x14c>)
 801227e:	400a      	ands	r2, r1
 8012280:	601a      	str	r2, [r3, #0]
 8012282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012284:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012286:	697b      	ldr	r3, [r7, #20]
 8012288:	f383 8810 	msr	PRIMASK, r3
}
 801228c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801228e:	f3ef 8310 	mrs	r3, PRIMASK
 8012292:	61bb      	str	r3, [r7, #24]
  return(result);
 8012294:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012296:	633b      	str	r3, [r7, #48]	@ 0x30
 8012298:	2301      	movs	r3, #1
 801229a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801229c:	69fb      	ldr	r3, [r7, #28]
 801229e:	f383 8810 	msr	PRIMASK, r3
}
 80122a2:	46c0      	nop			@ (mov r8, r8)
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	689a      	ldr	r2, [r3, #8]
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	2101      	movs	r1, #1
 80122b0:	438a      	bics	r2, r1
 80122b2:	609a      	str	r2, [r3, #8]
 80122b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80122b8:	6a3b      	ldr	r3, [r7, #32]
 80122ba:	f383 8810 	msr	PRIMASK, r3
}
 80122be:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	2280      	movs	r2, #128	@ 0x80
 80122c4:	2120      	movs	r1, #32
 80122c6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	2278      	movs	r2, #120	@ 0x78
 80122cc:	2100      	movs	r1, #0
 80122ce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80122d0:	2303      	movs	r3, #3
 80122d2:	e011      	b.n	80122f8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	2220      	movs	r2, #32
 80122d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	2280      	movs	r2, #128	@ 0x80
 80122de:	2120      	movs	r1, #32
 80122e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	2200      	movs	r2, #0
 80122e6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	2200      	movs	r2, #0
 80122ec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	2278      	movs	r2, #120	@ 0x78
 80122f2:	2100      	movs	r1, #0
 80122f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80122f6:	2300      	movs	r3, #0
}
 80122f8:	0018      	movs	r0, r3
 80122fa:	46bd      	mov	sp, r7
 80122fc:	b010      	add	sp, #64	@ 0x40
 80122fe:	bd80      	pop	{r7, pc}
 8012300:	01ffffff 	.word	0x01ffffff
 8012304:	fffffedf 	.word	0xfffffedf

08012308 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012308:	b580      	push	{r7, lr}
 801230a:	b084      	sub	sp, #16
 801230c:	af00      	add	r7, sp, #0
 801230e:	60f8      	str	r0, [r7, #12]
 8012310:	60b9      	str	r1, [r7, #8]
 8012312:	603b      	str	r3, [r7, #0]
 8012314:	1dfb      	adds	r3, r7, #7
 8012316:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012318:	e04b      	b.n	80123b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801231a:	69bb      	ldr	r3, [r7, #24]
 801231c:	3301      	adds	r3, #1
 801231e:	d048      	beq.n	80123b2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012320:	f7f7 fcfe 	bl	8009d20 <HAL_GetTick>
 8012324:	0002      	movs	r2, r0
 8012326:	683b      	ldr	r3, [r7, #0]
 8012328:	1ad3      	subs	r3, r2, r3
 801232a:	69ba      	ldr	r2, [r7, #24]
 801232c:	429a      	cmp	r2, r3
 801232e:	d302      	bcc.n	8012336 <UART_WaitOnFlagUntilTimeout+0x2e>
 8012330:	69bb      	ldr	r3, [r7, #24]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d101      	bne.n	801233a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8012336:	2303      	movs	r3, #3
 8012338:	e04b      	b.n	80123d2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	2204      	movs	r2, #4
 8012342:	4013      	ands	r3, r2
 8012344:	d035      	beq.n	80123b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	69db      	ldr	r3, [r3, #28]
 801234c:	2208      	movs	r2, #8
 801234e:	4013      	ands	r3, r2
 8012350:	2b08      	cmp	r3, #8
 8012352:	d111      	bne.n	8012378 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	2208      	movs	r2, #8
 801235a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	0018      	movs	r0, r3
 8012360:	f000 f900 	bl	8012564 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	2284      	movs	r2, #132	@ 0x84
 8012368:	2108      	movs	r1, #8
 801236a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	2278      	movs	r2, #120	@ 0x78
 8012370:	2100      	movs	r1, #0
 8012372:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8012374:	2301      	movs	r3, #1
 8012376:	e02c      	b.n	80123d2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	69da      	ldr	r2, [r3, #28]
 801237e:	2380      	movs	r3, #128	@ 0x80
 8012380:	011b      	lsls	r3, r3, #4
 8012382:	401a      	ands	r2, r3
 8012384:	2380      	movs	r3, #128	@ 0x80
 8012386:	011b      	lsls	r3, r3, #4
 8012388:	429a      	cmp	r2, r3
 801238a:	d112      	bne.n	80123b2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	2280      	movs	r2, #128	@ 0x80
 8012392:	0112      	lsls	r2, r2, #4
 8012394:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	0018      	movs	r0, r3
 801239a:	f000 f8e3 	bl	8012564 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	2284      	movs	r2, #132	@ 0x84
 80123a2:	2120      	movs	r1, #32
 80123a4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	2278      	movs	r2, #120	@ 0x78
 80123aa:	2100      	movs	r1, #0
 80123ac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80123ae:	2303      	movs	r3, #3
 80123b0:	e00f      	b.n	80123d2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	69db      	ldr	r3, [r3, #28]
 80123b8:	68ba      	ldr	r2, [r7, #8]
 80123ba:	4013      	ands	r3, r2
 80123bc:	68ba      	ldr	r2, [r7, #8]
 80123be:	1ad3      	subs	r3, r2, r3
 80123c0:	425a      	negs	r2, r3
 80123c2:	4153      	adcs	r3, r2
 80123c4:	b2db      	uxtb	r3, r3
 80123c6:	001a      	movs	r2, r3
 80123c8:	1dfb      	adds	r3, r7, #7
 80123ca:	781b      	ldrb	r3, [r3, #0]
 80123cc:	429a      	cmp	r2, r3
 80123ce:	d0a4      	beq.n	801231a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80123d0:	2300      	movs	r3, #0
}
 80123d2:	0018      	movs	r0, r3
 80123d4:	46bd      	mov	sp, r7
 80123d6:	b004      	add	sp, #16
 80123d8:	bd80      	pop	{r7, pc}
	...

080123dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b090      	sub	sp, #64	@ 0x40
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	60f8      	str	r0, [r7, #12]
 80123e4:	60b9      	str	r1, [r7, #8]
 80123e6:	1dbb      	adds	r3, r7, #6
 80123e8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	68ba      	ldr	r2, [r7, #8]
 80123ee:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	1dba      	adds	r2, r7, #6
 80123f4:	2158      	movs	r1, #88	@ 0x58
 80123f6:	8812      	ldrh	r2, [r2, #0]
 80123f8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	2284      	movs	r2, #132	@ 0x84
 80123fe:	2100      	movs	r1, #0
 8012400:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	2280      	movs	r2, #128	@ 0x80
 8012406:	2122      	movs	r1, #34	@ 0x22
 8012408:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801240e:	2b00      	cmp	r3, #0
 8012410:	d028      	beq.n	8012464 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012416:	4a3e      	ldr	r2, [pc, #248]	@ (8012510 <UART_Start_Receive_DMA+0x134>)
 8012418:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801241e:	4a3d      	ldr	r2, [pc, #244]	@ (8012514 <UART_Start_Receive_DMA+0x138>)
 8012420:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012426:	4a3c      	ldr	r2, [pc, #240]	@ (8012518 <UART_Start_Receive_DMA+0x13c>)
 8012428:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801242e:	2200      	movs	r2, #0
 8012430:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	3324      	adds	r3, #36	@ 0x24
 801243c:	0019      	movs	r1, r3
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012442:	001a      	movs	r2, r3
 8012444:	1dbb      	adds	r3, r7, #6
 8012446:	881b      	ldrh	r3, [r3, #0]
 8012448:	f7f8 f9e8 	bl	800a81c <HAL_DMA_Start_IT>
 801244c:	1e03      	subs	r3, r0, #0
 801244e:	d009      	beq.n	8012464 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	2284      	movs	r2, #132	@ 0x84
 8012454:	2110      	movs	r1, #16
 8012456:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	2280      	movs	r2, #128	@ 0x80
 801245c:	2120      	movs	r1, #32
 801245e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8012460:	2301      	movs	r3, #1
 8012462:	e050      	b.n	8012506 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	691b      	ldr	r3, [r3, #16]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d019      	beq.n	80124a0 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801246c:	f3ef 8310 	mrs	r3, PRIMASK
 8012470:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8012472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012474:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012476:	2301      	movs	r3, #1
 8012478:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801247a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801247c:	f383 8810 	msr	PRIMASK, r3
}
 8012480:	46c0      	nop			@ (mov r8, r8)
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	681a      	ldr	r2, [r3, #0]
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	2180      	movs	r1, #128	@ 0x80
 801248e:	0049      	lsls	r1, r1, #1
 8012490:	430a      	orrs	r2, r1
 8012492:	601a      	str	r2, [r3, #0]
 8012494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012496:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801249a:	f383 8810 	msr	PRIMASK, r3
}
 801249e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80124a0:	f3ef 8310 	mrs	r3, PRIMASK
 80124a4:	613b      	str	r3, [r7, #16]
  return(result);
 80124a6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80124a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80124aa:	2301      	movs	r3, #1
 80124ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80124ae:	697b      	ldr	r3, [r7, #20]
 80124b0:	f383 8810 	msr	PRIMASK, r3
}
 80124b4:	46c0      	nop			@ (mov r8, r8)
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	689a      	ldr	r2, [r3, #8]
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	2101      	movs	r1, #1
 80124c2:	430a      	orrs	r2, r1
 80124c4:	609a      	str	r2, [r3, #8]
 80124c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80124ca:	69bb      	ldr	r3, [r7, #24]
 80124cc:	f383 8810 	msr	PRIMASK, r3
}
 80124d0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80124d2:	f3ef 8310 	mrs	r3, PRIMASK
 80124d6:	61fb      	str	r3, [r7, #28]
  return(result);
 80124d8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80124da:	637b      	str	r3, [r7, #52]	@ 0x34
 80124dc:	2301      	movs	r3, #1
 80124de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80124e0:	6a3b      	ldr	r3, [r7, #32]
 80124e2:	f383 8810 	msr	PRIMASK, r3
}
 80124e6:	46c0      	nop			@ (mov r8, r8)
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	689a      	ldr	r2, [r3, #8]
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	2140      	movs	r1, #64	@ 0x40
 80124f4:	430a      	orrs	r2, r1
 80124f6:	609a      	str	r2, [r3, #8]
 80124f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80124fa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80124fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124fe:	f383 8810 	msr	PRIMASK, r3
}
 8012502:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8012504:	2300      	movs	r3, #0
}
 8012506:	0018      	movs	r0, r3
 8012508:	46bd      	mov	sp, r7
 801250a:	b010      	add	sp, #64	@ 0x40
 801250c:	bd80      	pop	{r7, pc}
 801250e:	46c0      	nop			@ (mov r8, r8)
 8012510:	080126ed 	.word	0x080126ed
 8012514:	08012821 	.word	0x08012821
 8012518:	08012869 	.word	0x08012869

0801251c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b086      	sub	sp, #24
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012524:	f3ef 8310 	mrs	r3, PRIMASK
 8012528:	60bb      	str	r3, [r7, #8]
  return(result);
 801252a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801252c:	617b      	str	r3, [r7, #20]
 801252e:	2301      	movs	r3, #1
 8012530:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	f383 8810 	msr	PRIMASK, r3
}
 8012538:	46c0      	nop			@ (mov r8, r8)
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	681a      	ldr	r2, [r3, #0]
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	21c0      	movs	r1, #192	@ 0xc0
 8012546:	438a      	bics	r2, r1
 8012548:	601a      	str	r2, [r3, #0]
 801254a:	697b      	ldr	r3, [r7, #20]
 801254c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801254e:	693b      	ldr	r3, [r7, #16]
 8012550:	f383 8810 	msr	PRIMASK, r3
}
 8012554:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	2220      	movs	r2, #32
 801255a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801255c:	46c0      	nop			@ (mov r8, r8)
 801255e:	46bd      	mov	sp, r7
 8012560:	b006      	add	sp, #24
 8012562:	bd80      	pop	{r7, pc}

08012564 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b08e      	sub	sp, #56	@ 0x38
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801256c:	f3ef 8310 	mrs	r3, PRIMASK
 8012570:	617b      	str	r3, [r7, #20]
  return(result);
 8012572:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012574:	637b      	str	r3, [r7, #52]	@ 0x34
 8012576:	2301      	movs	r3, #1
 8012578:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801257a:	69bb      	ldr	r3, [r7, #24]
 801257c:	f383 8810 	msr	PRIMASK, r3
}
 8012580:	46c0      	nop			@ (mov r8, r8)
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	681a      	ldr	r2, [r3, #0]
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	4926      	ldr	r1, [pc, #152]	@ (8012628 <UART_EndRxTransfer+0xc4>)
 801258e:	400a      	ands	r2, r1
 8012590:	601a      	str	r2, [r3, #0]
 8012592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012594:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012596:	69fb      	ldr	r3, [r7, #28]
 8012598:	f383 8810 	msr	PRIMASK, r3
}
 801259c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801259e:	f3ef 8310 	mrs	r3, PRIMASK
 80125a2:	623b      	str	r3, [r7, #32]
  return(result);
 80125a4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80125a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80125a8:	2301      	movs	r3, #1
 80125aa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80125ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125ae:	f383 8810 	msr	PRIMASK, r3
}
 80125b2:	46c0      	nop			@ (mov r8, r8)
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	689a      	ldr	r2, [r3, #8]
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	2101      	movs	r1, #1
 80125c0:	438a      	bics	r2, r1
 80125c2:	609a      	str	r2, [r3, #8]
 80125c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80125c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125ca:	f383 8810 	msr	PRIMASK, r3
}
 80125ce:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80125d4:	2b01      	cmp	r3, #1
 80125d6:	d118      	bne.n	801260a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80125d8:	f3ef 8310 	mrs	r3, PRIMASK
 80125dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80125de:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80125e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80125e2:	2301      	movs	r3, #1
 80125e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	f383 8810 	msr	PRIMASK, r3
}
 80125ec:	46c0      	nop			@ (mov r8, r8)
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	681a      	ldr	r2, [r3, #0]
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	2110      	movs	r1, #16
 80125fa:	438a      	bics	r2, r1
 80125fc:	601a      	str	r2, [r3, #0]
 80125fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012600:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012602:	693b      	ldr	r3, [r7, #16]
 8012604:	f383 8810 	msr	PRIMASK, r3
}
 8012608:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	2280      	movs	r2, #128	@ 0x80
 801260e:	2120      	movs	r1, #32
 8012610:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	2200      	movs	r2, #0
 8012616:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	2200      	movs	r2, #0
 801261c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801261e:	46c0      	nop			@ (mov r8, r8)
 8012620:	46bd      	mov	sp, r7
 8012622:	b00e      	add	sp, #56	@ 0x38
 8012624:	bd80      	pop	{r7, pc}
 8012626:	46c0      	nop			@ (mov r8, r8)
 8012628:	fffffedf 	.word	0xfffffedf

0801262c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801262c:	b580      	push	{r7, lr}
 801262e:	b08c      	sub	sp, #48	@ 0x30
 8012630:	af00      	add	r7, sp, #0
 8012632:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012638:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	2220      	movs	r2, #32
 8012642:	4013      	ands	r3, r2
 8012644:	d135      	bne.n	80126b2 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8012646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012648:	2252      	movs	r2, #82	@ 0x52
 801264a:	2100      	movs	r1, #0
 801264c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801264e:	f3ef 8310 	mrs	r3, PRIMASK
 8012652:	60fb      	str	r3, [r7, #12]
  return(result);
 8012654:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012656:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012658:	2301      	movs	r3, #1
 801265a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801265c:	693b      	ldr	r3, [r7, #16]
 801265e:	f383 8810 	msr	PRIMASK, r3
}
 8012662:	46c0      	nop			@ (mov r8, r8)
 8012664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	689a      	ldr	r2, [r3, #8]
 801266a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	2180      	movs	r1, #128	@ 0x80
 8012670:	438a      	bics	r2, r1
 8012672:	609a      	str	r2, [r3, #8]
 8012674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012676:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012678:	697b      	ldr	r3, [r7, #20]
 801267a:	f383 8810 	msr	PRIMASK, r3
}
 801267e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012680:	f3ef 8310 	mrs	r3, PRIMASK
 8012684:	61bb      	str	r3, [r7, #24]
  return(result);
 8012686:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012688:	627b      	str	r3, [r7, #36]	@ 0x24
 801268a:	2301      	movs	r3, #1
 801268c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801268e:	69fb      	ldr	r3, [r7, #28]
 8012690:	f383 8810 	msr	PRIMASK, r3
}
 8012694:	46c0      	nop			@ (mov r8, r8)
 8012696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	681a      	ldr	r2, [r3, #0]
 801269c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	2140      	movs	r1, #64	@ 0x40
 80126a2:	430a      	orrs	r2, r1
 80126a4:	601a      	str	r2, [r3, #0]
 80126a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80126aa:	6a3b      	ldr	r3, [r7, #32]
 80126ac:	f383 8810 	msr	PRIMASK, r3
}
 80126b0:	e006      	b.n	80126c0 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 80126b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126b4:	228c      	movs	r2, #140	@ 0x8c
 80126b6:	589b      	ldr	r3, [r3, r2]
 80126b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80126ba:	0010      	movs	r0, r2
 80126bc:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80126be:	46c0      	nop			@ (mov r8, r8)
 80126c0:	46c0      	nop			@ (mov r8, r8)
 80126c2:	46bd      	mov	sp, r7
 80126c4:	b00c      	add	sp, #48	@ 0x30
 80126c6:	bd80      	pop	{r7, pc}

080126c8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b084      	sub	sp, #16
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126d4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	2288      	movs	r2, #136	@ 0x88
 80126da:	589b      	ldr	r3, [r3, r2]
 80126dc:	68fa      	ldr	r2, [r7, #12]
 80126de:	0010      	movs	r0, r2
 80126e0:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80126e2:	46c0      	nop			@ (mov r8, r8)
 80126e4:	46bd      	mov	sp, r7
 80126e6:	b004      	add	sp, #16
 80126e8:	bd80      	pop	{r7, pc}
	...

080126ec <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b094      	sub	sp, #80	@ 0x50
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126f8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	2220      	movs	r2, #32
 8012702:	4013      	ands	r3, r2
 8012704:	d16f      	bne.n	80127e6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8012706:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012708:	225a      	movs	r2, #90	@ 0x5a
 801270a:	2100      	movs	r1, #0
 801270c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801270e:	f3ef 8310 	mrs	r3, PRIMASK
 8012712:	61bb      	str	r3, [r7, #24]
  return(result);
 8012714:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012716:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012718:	2301      	movs	r3, #1
 801271a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801271c:	69fb      	ldr	r3, [r7, #28]
 801271e:	f383 8810 	msr	PRIMASK, r3
}
 8012722:	46c0      	nop			@ (mov r8, r8)
 8012724:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	681a      	ldr	r2, [r3, #0]
 801272a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	493b      	ldr	r1, [pc, #236]	@ (801281c <UART_DMAReceiveCplt+0x130>)
 8012730:	400a      	ands	r2, r1
 8012732:	601a      	str	r2, [r3, #0]
 8012734:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012736:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012738:	6a3b      	ldr	r3, [r7, #32]
 801273a:	f383 8810 	msr	PRIMASK, r3
}
 801273e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012740:	f3ef 8310 	mrs	r3, PRIMASK
 8012744:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8012746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012748:	647b      	str	r3, [r7, #68]	@ 0x44
 801274a:	2301      	movs	r3, #1
 801274c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801274e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012750:	f383 8810 	msr	PRIMASK, r3
}
 8012754:	46c0      	nop			@ (mov r8, r8)
 8012756:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	689a      	ldr	r2, [r3, #8]
 801275c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	2101      	movs	r1, #1
 8012762:	438a      	bics	r2, r1
 8012764:	609a      	str	r2, [r3, #8]
 8012766:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801276a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801276c:	f383 8810 	msr	PRIMASK, r3
}
 8012770:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012772:	f3ef 8310 	mrs	r3, PRIMASK
 8012776:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8012778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801277a:	643b      	str	r3, [r7, #64]	@ 0x40
 801277c:	2301      	movs	r3, #1
 801277e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012782:	f383 8810 	msr	PRIMASK, r3
}
 8012786:	46c0      	nop			@ (mov r8, r8)
 8012788:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	689a      	ldr	r2, [r3, #8]
 801278e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	2140      	movs	r1, #64	@ 0x40
 8012794:	438a      	bics	r2, r1
 8012796:	609a      	str	r2, [r3, #8]
 8012798:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801279a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801279c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801279e:	f383 8810 	msr	PRIMASK, r3
}
 80127a2:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80127a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80127a6:	2280      	movs	r2, #128	@ 0x80
 80127a8:	2120      	movs	r1, #32
 80127aa:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80127ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80127ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80127b0:	2b01      	cmp	r3, #1
 80127b2:	d118      	bne.n	80127e6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80127b4:	f3ef 8310 	mrs	r3, PRIMASK
 80127b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80127ba:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80127bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80127be:	2301      	movs	r3, #1
 80127c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80127c2:	693b      	ldr	r3, [r7, #16]
 80127c4:	f383 8810 	msr	PRIMASK, r3
}
 80127c8:	46c0      	nop			@ (mov r8, r8)
 80127ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	681a      	ldr	r2, [r3, #0]
 80127d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	2110      	movs	r1, #16
 80127d6:	438a      	bics	r2, r1
 80127d8:	601a      	str	r2, [r3, #0]
 80127da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80127dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80127de:	697b      	ldr	r3, [r7, #20]
 80127e0:	f383 8810 	msr	PRIMASK, r3
}
 80127e4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80127e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80127e8:	2200      	movs	r2, #0
 80127ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80127ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80127ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80127f0:	2b01      	cmp	r3, #1
 80127f2:	d109      	bne.n	8012808 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80127f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80127f6:	22ac      	movs	r2, #172	@ 0xac
 80127f8:	589b      	ldr	r3, [r3, r2]
 80127fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80127fc:	2158      	movs	r1, #88	@ 0x58
 80127fe:	5a51      	ldrh	r1, [r2, r1]
 8012800:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012802:	0010      	movs	r0, r2
 8012804:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012806:	e005      	b.n	8012814 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8012808:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801280a:	2294      	movs	r2, #148	@ 0x94
 801280c:	589b      	ldr	r3, [r3, r2]
 801280e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012810:	0010      	movs	r0, r2
 8012812:	4798      	blx	r3
}
 8012814:	46c0      	nop			@ (mov r8, r8)
 8012816:	46bd      	mov	sp, r7
 8012818:	b014      	add	sp, #80	@ 0x50
 801281a:	bd80      	pop	{r7, pc}
 801281c:	fffffeff 	.word	0xfffffeff

08012820 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012820:	b580      	push	{r7, lr}
 8012822:	b084      	sub	sp, #16
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801282c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	2201      	movs	r2, #1
 8012832:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012838:	2b01      	cmp	r3, #1
 801283a:	d10b      	bne.n	8012854 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	22ac      	movs	r2, #172	@ 0xac
 8012840:	589b      	ldr	r3, [r3, r2]
 8012842:	68fa      	ldr	r2, [r7, #12]
 8012844:	2158      	movs	r1, #88	@ 0x58
 8012846:	5a52      	ldrh	r2, [r2, r1]
 8012848:	0852      	lsrs	r2, r2, #1
 801284a:	b291      	uxth	r1, r2
 801284c:	68fa      	ldr	r2, [r7, #12]
 801284e:	0010      	movs	r0, r2
 8012850:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012852:	e005      	b.n	8012860 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	2290      	movs	r2, #144	@ 0x90
 8012858:	589b      	ldr	r3, [r3, r2]
 801285a:	68fa      	ldr	r2, [r7, #12]
 801285c:	0010      	movs	r0, r2
 801285e:	4798      	blx	r3
}
 8012860:	46c0      	nop			@ (mov r8, r8)
 8012862:	46bd      	mov	sp, r7
 8012864:	b004      	add	sp, #16
 8012866:	bd80      	pop	{r7, pc}

08012868 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b086      	sub	sp, #24
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012874:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8012876:	697b      	ldr	r3, [r7, #20]
 8012878:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801287a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801287c:	697b      	ldr	r3, [r7, #20]
 801287e:	2280      	movs	r2, #128	@ 0x80
 8012880:	589b      	ldr	r3, [r3, r2]
 8012882:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8012884:	697b      	ldr	r3, [r7, #20]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	689b      	ldr	r3, [r3, #8]
 801288a:	2280      	movs	r2, #128	@ 0x80
 801288c:	4013      	ands	r3, r2
 801288e:	2b80      	cmp	r3, #128	@ 0x80
 8012890:	d10a      	bne.n	80128a8 <UART_DMAError+0x40>
 8012892:	693b      	ldr	r3, [r7, #16]
 8012894:	2b21      	cmp	r3, #33	@ 0x21
 8012896:	d107      	bne.n	80128a8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8012898:	697b      	ldr	r3, [r7, #20]
 801289a:	2252      	movs	r2, #82	@ 0x52
 801289c:	2100      	movs	r1, #0
 801289e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80128a0:	697b      	ldr	r3, [r7, #20]
 80128a2:	0018      	movs	r0, r3
 80128a4:	f7ff fe3a 	bl	801251c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80128a8:	697b      	ldr	r3, [r7, #20]
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	689b      	ldr	r3, [r3, #8]
 80128ae:	2240      	movs	r2, #64	@ 0x40
 80128b0:	4013      	ands	r3, r2
 80128b2:	2b40      	cmp	r3, #64	@ 0x40
 80128b4:	d10a      	bne.n	80128cc <UART_DMAError+0x64>
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	2b22      	cmp	r3, #34	@ 0x22
 80128ba:	d107      	bne.n	80128cc <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80128bc:	697b      	ldr	r3, [r7, #20]
 80128be:	225a      	movs	r2, #90	@ 0x5a
 80128c0:	2100      	movs	r1, #0
 80128c2:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80128c4:	697b      	ldr	r3, [r7, #20]
 80128c6:	0018      	movs	r0, r3
 80128c8:	f7ff fe4c 	bl	8012564 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80128cc:	697b      	ldr	r3, [r7, #20]
 80128ce:	2284      	movs	r2, #132	@ 0x84
 80128d0:	589b      	ldr	r3, [r3, r2]
 80128d2:	2210      	movs	r2, #16
 80128d4:	431a      	orrs	r2, r3
 80128d6:	697b      	ldr	r3, [r7, #20]
 80128d8:	2184      	movs	r1, #132	@ 0x84
 80128da:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80128dc:	697b      	ldr	r3, [r7, #20]
 80128de:	2298      	movs	r2, #152	@ 0x98
 80128e0:	589b      	ldr	r3, [r3, r2]
 80128e2:	697a      	ldr	r2, [r7, #20]
 80128e4:	0010      	movs	r0, r2
 80128e6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80128e8:	46c0      	nop			@ (mov r8, r8)
 80128ea:	46bd      	mov	sp, r7
 80128ec:	b006      	add	sp, #24
 80128ee:	bd80      	pop	{r7, pc}

080128f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b084      	sub	sp, #16
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80128fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	225a      	movs	r2, #90	@ 0x5a
 8012902:	2100      	movs	r1, #0
 8012904:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	2252      	movs	r2, #82	@ 0x52
 801290a:	2100      	movs	r1, #0
 801290c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	2298      	movs	r2, #152	@ 0x98
 8012912:	589b      	ldr	r3, [r3, r2]
 8012914:	68fa      	ldr	r2, [r7, #12]
 8012916:	0010      	movs	r0, r2
 8012918:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801291a:	46c0      	nop			@ (mov r8, r8)
 801291c:	46bd      	mov	sp, r7
 801291e:	b004      	add	sp, #16
 8012920:	bd80      	pop	{r7, pc}

08012922 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012922:	b580      	push	{r7, lr}
 8012924:	b086      	sub	sp, #24
 8012926:	af00      	add	r7, sp, #0
 8012928:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801292a:	f3ef 8310 	mrs	r3, PRIMASK
 801292e:	60bb      	str	r3, [r7, #8]
  return(result);
 8012930:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012932:	617b      	str	r3, [r7, #20]
 8012934:	2301      	movs	r3, #1
 8012936:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	f383 8810 	msr	PRIMASK, r3
}
 801293e:	46c0      	nop			@ (mov r8, r8)
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	681a      	ldr	r2, [r3, #0]
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	2140      	movs	r1, #64	@ 0x40
 801294c:	438a      	bics	r2, r1
 801294e:	601a      	str	r2, [r3, #0]
 8012950:	697b      	ldr	r3, [r7, #20]
 8012952:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012954:	693b      	ldr	r3, [r7, #16]
 8012956:	f383 8810 	msr	PRIMASK, r3
}
 801295a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	2220      	movs	r2, #32
 8012960:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	2200      	movs	r2, #0
 8012966:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	228c      	movs	r2, #140	@ 0x8c
 801296c:	589b      	ldr	r3, [r3, r2]
 801296e:	687a      	ldr	r2, [r7, #4]
 8012970:	0010      	movs	r0, r2
 8012972:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012974:	46c0      	nop			@ (mov r8, r8)
 8012976:	46bd      	mov	sp, r7
 8012978:	b006      	add	sp, #24
 801297a:	bd80      	pop	{r7, pc}

0801297c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b082      	sub	sp, #8
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012984:	46c0      	nop			@ (mov r8, r8)
 8012986:	46bd      	mov	sp, r7
 8012988:	b002      	add	sp, #8
 801298a:	bd80      	pop	{r7, pc}

0801298c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801298c:	b580      	push	{r7, lr}
 801298e:	b084      	sub	sp, #16
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	2244      	movs	r2, #68	@ 0x44
 8012998:	2100      	movs	r1, #0
 801299a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801299c:	4b05      	ldr	r3, [pc, #20]	@ (80129b4 <USB_EnableGlobalInt+0x28>)
 801299e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	b299      	uxth	r1, r3
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	2240      	movs	r2, #64	@ 0x40
 80129a8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80129aa:	2300      	movs	r3, #0
}
 80129ac:	0018      	movs	r0, r3
 80129ae:	46bd      	mov	sp, r7
 80129b0:	b004      	add	sp, #16
 80129b2:	bd80      	pop	{r7, pc}
 80129b4:	0000bf80 	.word	0x0000bf80

080129b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b084      	sub	sp, #16
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80129c0:	4b09      	ldr	r3, [pc, #36]	@ (80129e8 <USB_DisableGlobalInt+0x30>)
 80129c2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	2240      	movs	r2, #64	@ 0x40
 80129c8:	5a9b      	ldrh	r3, [r3, r2]
 80129ca:	b29b      	uxth	r3, r3
 80129cc:	68fa      	ldr	r2, [r7, #12]
 80129ce:	b292      	uxth	r2, r2
 80129d0:	43d2      	mvns	r2, r2
 80129d2:	b292      	uxth	r2, r2
 80129d4:	4013      	ands	r3, r2
 80129d6:	b299      	uxth	r1, r3
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	2240      	movs	r2, #64	@ 0x40
 80129dc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80129de:	2300      	movs	r3, #0
}
 80129e0:	0018      	movs	r0, r3
 80129e2:	46bd      	mov	sp, r7
 80129e4:	b004      	add	sp, #16
 80129e6:	bd80      	pop	{r7, pc}
 80129e8:	0000bf80 	.word	0x0000bf80

080129ec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80129ec:	b084      	sub	sp, #16
 80129ee:	b590      	push	{r4, r7, lr}
 80129f0:	b083      	sub	sp, #12
 80129f2:	af00      	add	r7, sp, #0
 80129f4:	6078      	str	r0, [r7, #4]
 80129f6:	2004      	movs	r0, #4
 80129f8:	2410      	movs	r4, #16
 80129fa:	1900      	adds	r0, r0, r4
 80129fc:	2408      	movs	r4, #8
 80129fe:	46a4      	mov	ip, r4
 8012a00:	44bc      	add	ip, r7
 8012a02:	4460      	add	r0, ip
 8012a04:	6001      	str	r1, [r0, #0]
 8012a06:	6042      	str	r2, [r0, #4]
 8012a08:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	2240      	movs	r2, #64	@ 0x40
 8012a0e:	2101      	movs	r1, #1
 8012a10:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	2240      	movs	r2, #64	@ 0x40
 8012a16:	2100      	movs	r1, #0
 8012a18:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	2244      	movs	r2, #68	@ 0x44
 8012a1e:	2100      	movs	r1, #0
 8012a20:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	2250      	movs	r2, #80	@ 0x50
 8012a26:	2100      	movs	r1, #0
 8012a28:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8012a2a:	2300      	movs	r3, #0
}
 8012a2c:	0018      	movs	r0, r3
 8012a2e:	46bd      	mov	sp, r7
 8012a30:	b003      	add	sp, #12
 8012a32:	bc90      	pop	{r4, r7}
 8012a34:	bc08      	pop	{r3}
 8012a36:	b004      	add	sp, #16
 8012a38:	4718      	bx	r3
	...

08012a3c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b09c      	sub	sp, #112	@ 0x70
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
 8012a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8012a46:	236f      	movs	r3, #111	@ 0x6f
 8012a48:	18fb      	adds	r3, r7, r3
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8012a4e:	687a      	ldr	r2, [r7, #4]
 8012a50:	683b      	ldr	r3, [r7, #0]
 8012a52:	781b      	ldrb	r3, [r3, #0]
 8012a54:	009b      	lsls	r3, r3, #2
 8012a56:	18d3      	adds	r3, r2, r3
 8012a58:	881b      	ldrh	r3, [r3, #0]
 8012a5a:	b29a      	uxth	r2, r3
 8012a5c:	236c      	movs	r3, #108	@ 0x6c
 8012a5e:	18fb      	adds	r3, r7, r3
 8012a60:	49a3      	ldr	r1, [pc, #652]	@ (8012cf0 <USB_ActivateEndpoint+0x2b4>)
 8012a62:	400a      	ands	r2, r1
 8012a64:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8012a66:	683b      	ldr	r3, [r7, #0]
 8012a68:	78db      	ldrb	r3, [r3, #3]
 8012a6a:	2b03      	cmp	r3, #3
 8012a6c:	d017      	beq.n	8012a9e <USB_ActivateEndpoint+0x62>
 8012a6e:	dc28      	bgt.n	8012ac2 <USB_ActivateEndpoint+0x86>
 8012a70:	2b02      	cmp	r3, #2
 8012a72:	d00e      	beq.n	8012a92 <USB_ActivateEndpoint+0x56>
 8012a74:	dc25      	bgt.n	8012ac2 <USB_ActivateEndpoint+0x86>
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d002      	beq.n	8012a80 <USB_ActivateEndpoint+0x44>
 8012a7a:	2b01      	cmp	r3, #1
 8012a7c:	d018      	beq.n	8012ab0 <USB_ActivateEndpoint+0x74>
 8012a7e:	e020      	b.n	8012ac2 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8012a80:	226c      	movs	r2, #108	@ 0x6c
 8012a82:	18bb      	adds	r3, r7, r2
 8012a84:	18ba      	adds	r2, r7, r2
 8012a86:	8812      	ldrh	r2, [r2, #0]
 8012a88:	2180      	movs	r1, #128	@ 0x80
 8012a8a:	0089      	lsls	r1, r1, #2
 8012a8c:	430a      	orrs	r2, r1
 8012a8e:	801a      	strh	r2, [r3, #0]
      break;
 8012a90:	e01c      	b.n	8012acc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8012a92:	226c      	movs	r2, #108	@ 0x6c
 8012a94:	18bb      	adds	r3, r7, r2
 8012a96:	18ba      	adds	r2, r7, r2
 8012a98:	8812      	ldrh	r2, [r2, #0]
 8012a9a:	801a      	strh	r2, [r3, #0]
      break;
 8012a9c:	e016      	b.n	8012acc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8012a9e:	226c      	movs	r2, #108	@ 0x6c
 8012aa0:	18bb      	adds	r3, r7, r2
 8012aa2:	18ba      	adds	r2, r7, r2
 8012aa4:	8812      	ldrh	r2, [r2, #0]
 8012aa6:	21c0      	movs	r1, #192	@ 0xc0
 8012aa8:	00c9      	lsls	r1, r1, #3
 8012aaa:	430a      	orrs	r2, r1
 8012aac:	801a      	strh	r2, [r3, #0]
      break;
 8012aae:	e00d      	b.n	8012acc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8012ab0:	226c      	movs	r2, #108	@ 0x6c
 8012ab2:	18bb      	adds	r3, r7, r2
 8012ab4:	18ba      	adds	r2, r7, r2
 8012ab6:	8812      	ldrh	r2, [r2, #0]
 8012ab8:	2180      	movs	r1, #128	@ 0x80
 8012aba:	00c9      	lsls	r1, r1, #3
 8012abc:	430a      	orrs	r2, r1
 8012abe:	801a      	strh	r2, [r3, #0]
      break;
 8012ac0:	e004      	b.n	8012acc <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8012ac2:	236f      	movs	r3, #111	@ 0x6f
 8012ac4:	18fb      	adds	r3, r7, r3
 8012ac6:	2201      	movs	r2, #1
 8012ac8:	701a      	strb	r2, [r3, #0]
      break;
 8012aca:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8012acc:	687a      	ldr	r2, [r7, #4]
 8012ace:	683b      	ldr	r3, [r7, #0]
 8012ad0:	781b      	ldrb	r3, [r3, #0]
 8012ad2:	009b      	lsls	r3, r3, #2
 8012ad4:	18d3      	adds	r3, r2, r3
 8012ad6:	226c      	movs	r2, #108	@ 0x6c
 8012ad8:	18ba      	adds	r2, r7, r2
 8012ada:	8812      	ldrh	r2, [r2, #0]
 8012adc:	4985      	ldr	r1, [pc, #532]	@ (8012cf4 <USB_ActivateEndpoint+0x2b8>)
 8012ade:	430a      	orrs	r2, r1
 8012ae0:	b292      	uxth	r2, r2
 8012ae2:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8012ae4:	687a      	ldr	r2, [r7, #4]
 8012ae6:	683b      	ldr	r3, [r7, #0]
 8012ae8:	781b      	ldrb	r3, [r3, #0]
 8012aea:	009b      	lsls	r3, r3, #2
 8012aec:	18d3      	adds	r3, r2, r3
 8012aee:	881b      	ldrh	r3, [r3, #0]
 8012af0:	b29b      	uxth	r3, r3
 8012af2:	b21b      	sxth	r3, r3
 8012af4:	4a80      	ldr	r2, [pc, #512]	@ (8012cf8 <USB_ActivateEndpoint+0x2bc>)
 8012af6:	4013      	ands	r3, r2
 8012af8:	b21a      	sxth	r2, r3
 8012afa:	683b      	ldr	r3, [r7, #0]
 8012afc:	781b      	ldrb	r3, [r3, #0]
 8012afe:	b21b      	sxth	r3, r3
 8012b00:	4313      	orrs	r3, r2
 8012b02:	b21a      	sxth	r2, r3
 8012b04:	2166      	movs	r1, #102	@ 0x66
 8012b06:	187b      	adds	r3, r7, r1
 8012b08:	801a      	strh	r2, [r3, #0]
 8012b0a:	687a      	ldr	r2, [r7, #4]
 8012b0c:	683b      	ldr	r3, [r7, #0]
 8012b0e:	781b      	ldrb	r3, [r3, #0]
 8012b10:	009b      	lsls	r3, r3, #2
 8012b12:	18d3      	adds	r3, r2, r3
 8012b14:	187a      	adds	r2, r7, r1
 8012b16:	8812      	ldrh	r2, [r2, #0]
 8012b18:	4976      	ldr	r1, [pc, #472]	@ (8012cf4 <USB_ActivateEndpoint+0x2b8>)
 8012b1a:	430a      	orrs	r2, r1
 8012b1c:	b292      	uxth	r2, r2
 8012b1e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	7b1b      	ldrb	r3, [r3, #12]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d000      	beq.n	8012b2a <USB_ActivateEndpoint+0xee>
 8012b28:	e178      	b.n	8012e1c <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8012b2a:	683b      	ldr	r3, [r7, #0]
 8012b2c:	785b      	ldrb	r3, [r3, #1]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d100      	bne.n	8012b34 <USB_ActivateEndpoint+0xf8>
 8012b32:	e07a      	b.n	8012c2a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	61bb      	str	r3, [r7, #24]
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	2250      	movs	r2, #80	@ 0x50
 8012b3c:	5a9b      	ldrh	r3, [r3, r2]
 8012b3e:	b29b      	uxth	r3, r3
 8012b40:	001a      	movs	r2, r3
 8012b42:	69bb      	ldr	r3, [r7, #24]
 8012b44:	189b      	adds	r3, r3, r2
 8012b46:	61bb      	str	r3, [r7, #24]
 8012b48:	683b      	ldr	r3, [r7, #0]
 8012b4a:	781b      	ldrb	r3, [r3, #0]
 8012b4c:	00da      	lsls	r2, r3, #3
 8012b4e:	69bb      	ldr	r3, [r7, #24]
 8012b50:	18d3      	adds	r3, r2, r3
 8012b52:	2280      	movs	r2, #128	@ 0x80
 8012b54:	00d2      	lsls	r2, r2, #3
 8012b56:	4694      	mov	ip, r2
 8012b58:	4463      	add	r3, ip
 8012b5a:	617b      	str	r3, [r7, #20]
 8012b5c:	683b      	ldr	r3, [r7, #0]
 8012b5e:	88db      	ldrh	r3, [r3, #6]
 8012b60:	085b      	lsrs	r3, r3, #1
 8012b62:	b29b      	uxth	r3, r3
 8012b64:	18db      	adds	r3, r3, r3
 8012b66:	b29a      	uxth	r2, r3
 8012b68:	697b      	ldr	r3, [r7, #20]
 8012b6a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012b6c:	687a      	ldr	r2, [r7, #4]
 8012b6e:	683b      	ldr	r3, [r7, #0]
 8012b70:	781b      	ldrb	r3, [r3, #0]
 8012b72:	009b      	lsls	r3, r3, #2
 8012b74:	18d2      	adds	r2, r2, r3
 8012b76:	2112      	movs	r1, #18
 8012b78:	187b      	adds	r3, r7, r1
 8012b7a:	8812      	ldrh	r2, [r2, #0]
 8012b7c:	801a      	strh	r2, [r3, #0]
 8012b7e:	187b      	adds	r3, r7, r1
 8012b80:	881b      	ldrh	r3, [r3, #0]
 8012b82:	2240      	movs	r2, #64	@ 0x40
 8012b84:	4013      	ands	r3, r2
 8012b86:	d016      	beq.n	8012bb6 <USB_ActivateEndpoint+0x17a>
 8012b88:	687a      	ldr	r2, [r7, #4]
 8012b8a:	683b      	ldr	r3, [r7, #0]
 8012b8c:	781b      	ldrb	r3, [r3, #0]
 8012b8e:	009b      	lsls	r3, r3, #2
 8012b90:	18d3      	adds	r3, r2, r3
 8012b92:	881b      	ldrh	r3, [r3, #0]
 8012b94:	b29a      	uxth	r2, r3
 8012b96:	2010      	movs	r0, #16
 8012b98:	183b      	adds	r3, r7, r0
 8012b9a:	4957      	ldr	r1, [pc, #348]	@ (8012cf8 <USB_ActivateEndpoint+0x2bc>)
 8012b9c:	400a      	ands	r2, r1
 8012b9e:	801a      	strh	r2, [r3, #0]
 8012ba0:	687a      	ldr	r2, [r7, #4]
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	781b      	ldrb	r3, [r3, #0]
 8012ba6:	009b      	lsls	r3, r3, #2
 8012ba8:	18d3      	adds	r3, r2, r3
 8012baa:	183a      	adds	r2, r7, r0
 8012bac:	8812      	ldrh	r2, [r2, #0]
 8012bae:	4953      	ldr	r1, [pc, #332]	@ (8012cfc <USB_ActivateEndpoint+0x2c0>)
 8012bb0:	430a      	orrs	r2, r1
 8012bb2:	b292      	uxth	r2, r2
 8012bb4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012bb6:	683b      	ldr	r3, [r7, #0]
 8012bb8:	78db      	ldrb	r3, [r3, #3]
 8012bba:	2b01      	cmp	r3, #1
 8012bbc:	d01d      	beq.n	8012bfa <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012bbe:	687a      	ldr	r2, [r7, #4]
 8012bc0:	683b      	ldr	r3, [r7, #0]
 8012bc2:	781b      	ldrb	r3, [r3, #0]
 8012bc4:	009b      	lsls	r3, r3, #2
 8012bc6:	18d3      	adds	r3, r2, r3
 8012bc8:	881b      	ldrh	r3, [r3, #0]
 8012bca:	b29a      	uxth	r2, r3
 8012bcc:	200c      	movs	r0, #12
 8012bce:	183b      	adds	r3, r7, r0
 8012bd0:	494b      	ldr	r1, [pc, #300]	@ (8012d00 <USB_ActivateEndpoint+0x2c4>)
 8012bd2:	400a      	ands	r2, r1
 8012bd4:	801a      	strh	r2, [r3, #0]
 8012bd6:	183b      	adds	r3, r7, r0
 8012bd8:	183a      	adds	r2, r7, r0
 8012bda:	8812      	ldrh	r2, [r2, #0]
 8012bdc:	2120      	movs	r1, #32
 8012bde:	404a      	eors	r2, r1
 8012be0:	801a      	strh	r2, [r3, #0]
 8012be2:	687a      	ldr	r2, [r7, #4]
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	781b      	ldrb	r3, [r3, #0]
 8012be8:	009b      	lsls	r3, r3, #2
 8012bea:	18d3      	adds	r3, r2, r3
 8012bec:	183a      	adds	r2, r7, r0
 8012bee:	8812      	ldrh	r2, [r2, #0]
 8012bf0:	4940      	ldr	r1, [pc, #256]	@ (8012cf4 <USB_ActivateEndpoint+0x2b8>)
 8012bf2:	430a      	orrs	r2, r1
 8012bf4:	b292      	uxth	r2, r2
 8012bf6:	801a      	strh	r2, [r3, #0]
 8012bf8:	e2b4      	b.n	8013164 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012bfa:	687a      	ldr	r2, [r7, #4]
 8012bfc:	683b      	ldr	r3, [r7, #0]
 8012bfe:	781b      	ldrb	r3, [r3, #0]
 8012c00:	009b      	lsls	r3, r3, #2
 8012c02:	18d3      	adds	r3, r2, r3
 8012c04:	881b      	ldrh	r3, [r3, #0]
 8012c06:	b29a      	uxth	r2, r3
 8012c08:	200e      	movs	r0, #14
 8012c0a:	183b      	adds	r3, r7, r0
 8012c0c:	493c      	ldr	r1, [pc, #240]	@ (8012d00 <USB_ActivateEndpoint+0x2c4>)
 8012c0e:	400a      	ands	r2, r1
 8012c10:	801a      	strh	r2, [r3, #0]
 8012c12:	687a      	ldr	r2, [r7, #4]
 8012c14:	683b      	ldr	r3, [r7, #0]
 8012c16:	781b      	ldrb	r3, [r3, #0]
 8012c18:	009b      	lsls	r3, r3, #2
 8012c1a:	18d3      	adds	r3, r2, r3
 8012c1c:	183a      	adds	r2, r7, r0
 8012c1e:	8812      	ldrh	r2, [r2, #0]
 8012c20:	4934      	ldr	r1, [pc, #208]	@ (8012cf4 <USB_ActivateEndpoint+0x2b8>)
 8012c22:	430a      	orrs	r2, r1
 8012c24:	b292      	uxth	r2, r2
 8012c26:	801a      	strh	r2, [r3, #0]
 8012c28:	e29c      	b.n	8013164 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	2250      	movs	r2, #80	@ 0x50
 8012c32:	5a9b      	ldrh	r3, [r3, r2]
 8012c34:	b29b      	uxth	r3, r3
 8012c36:	001a      	movs	r2, r3
 8012c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c3a:	189b      	adds	r3, r3, r2
 8012c3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8012c3e:	683b      	ldr	r3, [r7, #0]
 8012c40:	781b      	ldrb	r3, [r3, #0]
 8012c42:	00da      	lsls	r2, r3, #3
 8012c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c46:	18d3      	adds	r3, r2, r3
 8012c48:	4a2e      	ldr	r2, [pc, #184]	@ (8012d04 <USB_ActivateEndpoint+0x2c8>)
 8012c4a:	4694      	mov	ip, r2
 8012c4c:	4463      	add	r3, ip
 8012c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012c50:	683b      	ldr	r3, [r7, #0]
 8012c52:	88db      	ldrh	r3, [r3, #6]
 8012c54:	085b      	lsrs	r3, r3, #1
 8012c56:	b29b      	uxth	r3, r3
 8012c58:	18db      	adds	r3, r3, r3
 8012c5a:	b29a      	uxth	r2, r3
 8012c5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c5e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	2250      	movs	r2, #80	@ 0x50
 8012c68:	5a9b      	ldrh	r3, [r3, r2]
 8012c6a:	b29b      	uxth	r3, r3
 8012c6c:	001a      	movs	r2, r3
 8012c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c70:	189b      	adds	r3, r3, r2
 8012c72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	781b      	ldrb	r3, [r3, #0]
 8012c78:	00da      	lsls	r2, r3, #3
 8012c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c7c:	18d3      	adds	r3, r2, r3
 8012c7e:	4a22      	ldr	r2, [pc, #136]	@ (8012d08 <USB_ActivateEndpoint+0x2cc>)
 8012c80:	4694      	mov	ip, r2
 8012c82:	4463      	add	r3, ip
 8012c84:	627b      	str	r3, [r7, #36]	@ 0x24
 8012c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c88:	881b      	ldrh	r3, [r3, #0]
 8012c8a:	b29b      	uxth	r3, r3
 8012c8c:	059b      	lsls	r3, r3, #22
 8012c8e:	0d9b      	lsrs	r3, r3, #22
 8012c90:	b29a      	uxth	r2, r3
 8012c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c94:	801a      	strh	r2, [r3, #0]
 8012c96:	683b      	ldr	r3, [r7, #0]
 8012c98:	691b      	ldr	r3, [r3, #16]
 8012c9a:	2b3e      	cmp	r3, #62	@ 0x3e
 8012c9c:	d91a      	bls.n	8012cd4 <USB_ActivateEndpoint+0x298>
 8012c9e:	683b      	ldr	r3, [r7, #0]
 8012ca0:	691b      	ldr	r3, [r3, #16]
 8012ca2:	095b      	lsrs	r3, r3, #5
 8012ca4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	691b      	ldr	r3, [r3, #16]
 8012caa:	221f      	movs	r2, #31
 8012cac:	4013      	ands	r3, r2
 8012cae:	d102      	bne.n	8012cb6 <USB_ActivateEndpoint+0x27a>
 8012cb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012cb2:	3b01      	subs	r3, #1
 8012cb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cb8:	881b      	ldrh	r3, [r3, #0]
 8012cba:	b29a      	uxth	r2, r3
 8012cbc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012cbe:	b29b      	uxth	r3, r3
 8012cc0:	029b      	lsls	r3, r3, #10
 8012cc2:	b29b      	uxth	r3, r3
 8012cc4:	4313      	orrs	r3, r2
 8012cc6:	b29b      	uxth	r3, r3
 8012cc8:	4a10      	ldr	r2, [pc, #64]	@ (8012d0c <USB_ActivateEndpoint+0x2d0>)
 8012cca:	4313      	orrs	r3, r2
 8012ccc:	b29a      	uxth	r2, r3
 8012cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cd0:	801a      	strh	r2, [r3, #0]
 8012cd2:	e034      	b.n	8012d3e <USB_ActivateEndpoint+0x302>
 8012cd4:	683b      	ldr	r3, [r7, #0]
 8012cd6:	691b      	ldr	r3, [r3, #16]
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d119      	bne.n	8012d10 <USB_ActivateEndpoint+0x2d4>
 8012cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cde:	881b      	ldrh	r3, [r3, #0]
 8012ce0:	b29b      	uxth	r3, r3
 8012ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8012d0c <USB_ActivateEndpoint+0x2d0>)
 8012ce4:	4313      	orrs	r3, r2
 8012ce6:	b29a      	uxth	r2, r3
 8012ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cea:	801a      	strh	r2, [r3, #0]
 8012cec:	e027      	b.n	8012d3e <USB_ActivateEndpoint+0x302>
 8012cee:	46c0      	nop			@ (mov r8, r8)
 8012cf0:	ffff898f 	.word	0xffff898f
 8012cf4:	ffff8080 	.word	0xffff8080
 8012cf8:	ffff8f8f 	.word	0xffff8f8f
 8012cfc:	ffff80c0 	.word	0xffff80c0
 8012d00:	ffff8fbf 	.word	0xffff8fbf
 8012d04:	00000404 	.word	0x00000404
 8012d08:	00000406 	.word	0x00000406
 8012d0c:	ffff8000 	.word	0xffff8000
 8012d10:	683b      	ldr	r3, [r7, #0]
 8012d12:	691b      	ldr	r3, [r3, #16]
 8012d14:	085b      	lsrs	r3, r3, #1
 8012d16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012d18:	683b      	ldr	r3, [r7, #0]
 8012d1a:	691b      	ldr	r3, [r3, #16]
 8012d1c:	2201      	movs	r2, #1
 8012d1e:	4013      	ands	r3, r2
 8012d20:	d002      	beq.n	8012d28 <USB_ActivateEndpoint+0x2ec>
 8012d22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012d24:	3301      	adds	r3, #1
 8012d26:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d2a:	881b      	ldrh	r3, [r3, #0]
 8012d2c:	b29a      	uxth	r2, r3
 8012d2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012d30:	b29b      	uxth	r3, r3
 8012d32:	029b      	lsls	r3, r3, #10
 8012d34:	b29b      	uxth	r3, r3
 8012d36:	4313      	orrs	r3, r2
 8012d38:	b29a      	uxth	r2, r3
 8012d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d3c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012d3e:	687a      	ldr	r2, [r7, #4]
 8012d40:	683b      	ldr	r3, [r7, #0]
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	009b      	lsls	r3, r3, #2
 8012d46:	18d2      	adds	r2, r2, r3
 8012d48:	2122      	movs	r1, #34	@ 0x22
 8012d4a:	187b      	adds	r3, r7, r1
 8012d4c:	8812      	ldrh	r2, [r2, #0]
 8012d4e:	801a      	strh	r2, [r3, #0]
 8012d50:	187b      	adds	r3, r7, r1
 8012d52:	881a      	ldrh	r2, [r3, #0]
 8012d54:	2380      	movs	r3, #128	@ 0x80
 8012d56:	01db      	lsls	r3, r3, #7
 8012d58:	4013      	ands	r3, r2
 8012d5a:	d016      	beq.n	8012d8a <USB_ActivateEndpoint+0x34e>
 8012d5c:	687a      	ldr	r2, [r7, #4]
 8012d5e:	683b      	ldr	r3, [r7, #0]
 8012d60:	781b      	ldrb	r3, [r3, #0]
 8012d62:	009b      	lsls	r3, r3, #2
 8012d64:	18d3      	adds	r3, r2, r3
 8012d66:	881b      	ldrh	r3, [r3, #0]
 8012d68:	b29a      	uxth	r2, r3
 8012d6a:	2020      	movs	r0, #32
 8012d6c:	183b      	adds	r3, r7, r0
 8012d6e:	49dd      	ldr	r1, [pc, #884]	@ (80130e4 <USB_ActivateEndpoint+0x6a8>)
 8012d70:	400a      	ands	r2, r1
 8012d72:	801a      	strh	r2, [r3, #0]
 8012d74:	687a      	ldr	r2, [r7, #4]
 8012d76:	683b      	ldr	r3, [r7, #0]
 8012d78:	781b      	ldrb	r3, [r3, #0]
 8012d7a:	009b      	lsls	r3, r3, #2
 8012d7c:	18d3      	adds	r3, r2, r3
 8012d7e:	183a      	adds	r2, r7, r0
 8012d80:	8812      	ldrh	r2, [r2, #0]
 8012d82:	49d9      	ldr	r1, [pc, #868]	@ (80130e8 <USB_ActivateEndpoint+0x6ac>)
 8012d84:	430a      	orrs	r2, r1
 8012d86:	b292      	uxth	r2, r2
 8012d88:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8012d8a:	683b      	ldr	r3, [r7, #0]
 8012d8c:	781b      	ldrb	r3, [r3, #0]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d125      	bne.n	8012dde <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012d92:	687a      	ldr	r2, [r7, #4]
 8012d94:	683b      	ldr	r3, [r7, #0]
 8012d96:	781b      	ldrb	r3, [r3, #0]
 8012d98:	009b      	lsls	r3, r3, #2
 8012d9a:	18d3      	adds	r3, r2, r3
 8012d9c:	881b      	ldrh	r3, [r3, #0]
 8012d9e:	b29a      	uxth	r2, r3
 8012da0:	201c      	movs	r0, #28
 8012da2:	183b      	adds	r3, r7, r0
 8012da4:	49d1      	ldr	r1, [pc, #836]	@ (80130ec <USB_ActivateEndpoint+0x6b0>)
 8012da6:	400a      	ands	r2, r1
 8012da8:	801a      	strh	r2, [r3, #0]
 8012daa:	183b      	adds	r3, r7, r0
 8012dac:	183a      	adds	r2, r7, r0
 8012dae:	8812      	ldrh	r2, [r2, #0]
 8012db0:	2180      	movs	r1, #128	@ 0x80
 8012db2:	0149      	lsls	r1, r1, #5
 8012db4:	404a      	eors	r2, r1
 8012db6:	801a      	strh	r2, [r3, #0]
 8012db8:	183b      	adds	r3, r7, r0
 8012dba:	183a      	adds	r2, r7, r0
 8012dbc:	8812      	ldrh	r2, [r2, #0]
 8012dbe:	2180      	movs	r1, #128	@ 0x80
 8012dc0:	0189      	lsls	r1, r1, #6
 8012dc2:	404a      	eors	r2, r1
 8012dc4:	801a      	strh	r2, [r3, #0]
 8012dc6:	687a      	ldr	r2, [r7, #4]
 8012dc8:	683b      	ldr	r3, [r7, #0]
 8012dca:	781b      	ldrb	r3, [r3, #0]
 8012dcc:	009b      	lsls	r3, r3, #2
 8012dce:	18d3      	adds	r3, r2, r3
 8012dd0:	183a      	adds	r2, r7, r0
 8012dd2:	8812      	ldrh	r2, [r2, #0]
 8012dd4:	49c6      	ldr	r1, [pc, #792]	@ (80130f0 <USB_ActivateEndpoint+0x6b4>)
 8012dd6:	430a      	orrs	r2, r1
 8012dd8:	b292      	uxth	r2, r2
 8012dda:	801a      	strh	r2, [r3, #0]
 8012ddc:	e1c2      	b.n	8013164 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8012dde:	687a      	ldr	r2, [r7, #4]
 8012de0:	683b      	ldr	r3, [r7, #0]
 8012de2:	781b      	ldrb	r3, [r3, #0]
 8012de4:	009b      	lsls	r3, r3, #2
 8012de6:	18d3      	adds	r3, r2, r3
 8012de8:	881b      	ldrh	r3, [r3, #0]
 8012dea:	b29a      	uxth	r2, r3
 8012dec:	201e      	movs	r0, #30
 8012dee:	183b      	adds	r3, r7, r0
 8012df0:	49be      	ldr	r1, [pc, #760]	@ (80130ec <USB_ActivateEndpoint+0x6b0>)
 8012df2:	400a      	ands	r2, r1
 8012df4:	801a      	strh	r2, [r3, #0]
 8012df6:	183b      	adds	r3, r7, r0
 8012df8:	183a      	adds	r2, r7, r0
 8012dfa:	8812      	ldrh	r2, [r2, #0]
 8012dfc:	2180      	movs	r1, #128	@ 0x80
 8012dfe:	0189      	lsls	r1, r1, #6
 8012e00:	404a      	eors	r2, r1
 8012e02:	801a      	strh	r2, [r3, #0]
 8012e04:	687a      	ldr	r2, [r7, #4]
 8012e06:	683b      	ldr	r3, [r7, #0]
 8012e08:	781b      	ldrb	r3, [r3, #0]
 8012e0a:	009b      	lsls	r3, r3, #2
 8012e0c:	18d3      	adds	r3, r2, r3
 8012e0e:	183a      	adds	r2, r7, r0
 8012e10:	8812      	ldrh	r2, [r2, #0]
 8012e12:	49b7      	ldr	r1, [pc, #732]	@ (80130f0 <USB_ActivateEndpoint+0x6b4>)
 8012e14:	430a      	orrs	r2, r1
 8012e16:	b292      	uxth	r2, r2
 8012e18:	801a      	strh	r2, [r3, #0]
 8012e1a:	e1a3      	b.n	8013164 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8012e1c:	683b      	ldr	r3, [r7, #0]
 8012e1e:	78db      	ldrb	r3, [r3, #3]
 8012e20:	2b02      	cmp	r3, #2
 8012e22:	d117      	bne.n	8012e54 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8012e24:	687a      	ldr	r2, [r7, #4]
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	781b      	ldrb	r3, [r3, #0]
 8012e2a:	009b      	lsls	r3, r3, #2
 8012e2c:	18d3      	adds	r3, r2, r3
 8012e2e:	881b      	ldrh	r3, [r3, #0]
 8012e30:	b29a      	uxth	r2, r3
 8012e32:	2062      	movs	r0, #98	@ 0x62
 8012e34:	183b      	adds	r3, r7, r0
 8012e36:	49ab      	ldr	r1, [pc, #684]	@ (80130e4 <USB_ActivateEndpoint+0x6a8>)
 8012e38:	400a      	ands	r2, r1
 8012e3a:	801a      	strh	r2, [r3, #0]
 8012e3c:	687a      	ldr	r2, [r7, #4]
 8012e3e:	683b      	ldr	r3, [r7, #0]
 8012e40:	781b      	ldrb	r3, [r3, #0]
 8012e42:	009b      	lsls	r3, r3, #2
 8012e44:	18d3      	adds	r3, r2, r3
 8012e46:	183a      	adds	r2, r7, r0
 8012e48:	8812      	ldrh	r2, [r2, #0]
 8012e4a:	49aa      	ldr	r1, [pc, #680]	@ (80130f4 <USB_ActivateEndpoint+0x6b8>)
 8012e4c:	430a      	orrs	r2, r1
 8012e4e:	b292      	uxth	r2, r2
 8012e50:	801a      	strh	r2, [r3, #0]
 8012e52:	e016      	b.n	8012e82 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8012e54:	687a      	ldr	r2, [r7, #4]
 8012e56:	683b      	ldr	r3, [r7, #0]
 8012e58:	781b      	ldrb	r3, [r3, #0]
 8012e5a:	009b      	lsls	r3, r3, #2
 8012e5c:	18d3      	adds	r3, r2, r3
 8012e5e:	881b      	ldrh	r3, [r3, #0]
 8012e60:	b29a      	uxth	r2, r3
 8012e62:	2064      	movs	r0, #100	@ 0x64
 8012e64:	183b      	adds	r3, r7, r0
 8012e66:	49a4      	ldr	r1, [pc, #656]	@ (80130f8 <USB_ActivateEndpoint+0x6bc>)
 8012e68:	400a      	ands	r2, r1
 8012e6a:	801a      	strh	r2, [r3, #0]
 8012e6c:	687a      	ldr	r2, [r7, #4]
 8012e6e:	683b      	ldr	r3, [r7, #0]
 8012e70:	781b      	ldrb	r3, [r3, #0]
 8012e72:	009b      	lsls	r3, r3, #2
 8012e74:	18d3      	adds	r3, r2, r3
 8012e76:	183a      	adds	r2, r7, r0
 8012e78:	8812      	ldrh	r2, [r2, #0]
 8012e7a:	499d      	ldr	r1, [pc, #628]	@ (80130f0 <USB_ActivateEndpoint+0x6b4>)
 8012e7c:	430a      	orrs	r2, r1
 8012e7e:	b292      	uxth	r2, r2
 8012e80:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	2250      	movs	r2, #80	@ 0x50
 8012e8a:	5a9b      	ldrh	r3, [r3, r2]
 8012e8c:	b29b      	uxth	r3, r3
 8012e8e:	001a      	movs	r2, r3
 8012e90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012e92:	189b      	adds	r3, r3, r2
 8012e94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012e96:	683b      	ldr	r3, [r7, #0]
 8012e98:	781b      	ldrb	r3, [r3, #0]
 8012e9a:	00da      	lsls	r2, r3, #3
 8012e9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012e9e:	18d3      	adds	r3, r2, r3
 8012ea0:	2280      	movs	r2, #128	@ 0x80
 8012ea2:	00d2      	lsls	r2, r2, #3
 8012ea4:	4694      	mov	ip, r2
 8012ea6:	4463      	add	r3, ip
 8012ea8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012eaa:	683b      	ldr	r3, [r7, #0]
 8012eac:	891b      	ldrh	r3, [r3, #8]
 8012eae:	085b      	lsrs	r3, r3, #1
 8012eb0:	b29b      	uxth	r3, r3
 8012eb2:	18db      	adds	r3, r3, r3
 8012eb4:	b29a      	uxth	r2, r3
 8012eb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012eb8:	801a      	strh	r2, [r3, #0]
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	657b      	str	r3, [r7, #84]	@ 0x54
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	2250      	movs	r2, #80	@ 0x50
 8012ec2:	5a9b      	ldrh	r3, [r3, r2]
 8012ec4:	b29b      	uxth	r3, r3
 8012ec6:	001a      	movs	r2, r3
 8012ec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012eca:	189b      	adds	r3, r3, r2
 8012ecc:	657b      	str	r3, [r7, #84]	@ 0x54
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	781b      	ldrb	r3, [r3, #0]
 8012ed2:	00da      	lsls	r2, r3, #3
 8012ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ed6:	18d3      	adds	r3, r2, r3
 8012ed8:	4a88      	ldr	r2, [pc, #544]	@ (80130fc <USB_ActivateEndpoint+0x6c0>)
 8012eda:	4694      	mov	ip, r2
 8012edc:	4463      	add	r3, ip
 8012ede:	653b      	str	r3, [r7, #80]	@ 0x50
 8012ee0:	683b      	ldr	r3, [r7, #0]
 8012ee2:	895b      	ldrh	r3, [r3, #10]
 8012ee4:	085b      	lsrs	r3, r3, #1
 8012ee6:	b29b      	uxth	r3, r3
 8012ee8:	18db      	adds	r3, r3, r3
 8012eea:	b29a      	uxth	r2, r3
 8012eec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012eee:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8012ef0:	683b      	ldr	r3, [r7, #0]
 8012ef2:	785b      	ldrb	r3, [r3, #1]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d000      	beq.n	8012efa <USB_ActivateEndpoint+0x4be>
 8012ef8:	e087      	b.n	801300a <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012efa:	687a      	ldr	r2, [r7, #4]
 8012efc:	683b      	ldr	r3, [r7, #0]
 8012efe:	781b      	ldrb	r3, [r3, #0]
 8012f00:	009b      	lsls	r3, r3, #2
 8012f02:	18d2      	adds	r2, r2, r3
 8012f04:	2140      	movs	r1, #64	@ 0x40
 8012f06:	187b      	adds	r3, r7, r1
 8012f08:	8812      	ldrh	r2, [r2, #0]
 8012f0a:	801a      	strh	r2, [r3, #0]
 8012f0c:	187b      	adds	r3, r7, r1
 8012f0e:	881a      	ldrh	r2, [r3, #0]
 8012f10:	2380      	movs	r3, #128	@ 0x80
 8012f12:	01db      	lsls	r3, r3, #7
 8012f14:	4013      	ands	r3, r2
 8012f16:	d016      	beq.n	8012f46 <USB_ActivateEndpoint+0x50a>
 8012f18:	687a      	ldr	r2, [r7, #4]
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	009b      	lsls	r3, r3, #2
 8012f20:	18d3      	adds	r3, r2, r3
 8012f22:	881b      	ldrh	r3, [r3, #0]
 8012f24:	b29a      	uxth	r2, r3
 8012f26:	203e      	movs	r0, #62	@ 0x3e
 8012f28:	183b      	adds	r3, r7, r0
 8012f2a:	496e      	ldr	r1, [pc, #440]	@ (80130e4 <USB_ActivateEndpoint+0x6a8>)
 8012f2c:	400a      	ands	r2, r1
 8012f2e:	801a      	strh	r2, [r3, #0]
 8012f30:	687a      	ldr	r2, [r7, #4]
 8012f32:	683b      	ldr	r3, [r7, #0]
 8012f34:	781b      	ldrb	r3, [r3, #0]
 8012f36:	009b      	lsls	r3, r3, #2
 8012f38:	18d3      	adds	r3, r2, r3
 8012f3a:	183a      	adds	r2, r7, r0
 8012f3c:	8812      	ldrh	r2, [r2, #0]
 8012f3e:	496a      	ldr	r1, [pc, #424]	@ (80130e8 <USB_ActivateEndpoint+0x6ac>)
 8012f40:	430a      	orrs	r2, r1
 8012f42:	b292      	uxth	r2, r2
 8012f44:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012f46:	687a      	ldr	r2, [r7, #4]
 8012f48:	683b      	ldr	r3, [r7, #0]
 8012f4a:	781b      	ldrb	r3, [r3, #0]
 8012f4c:	009b      	lsls	r3, r3, #2
 8012f4e:	18d2      	adds	r2, r2, r3
 8012f50:	213c      	movs	r1, #60	@ 0x3c
 8012f52:	187b      	adds	r3, r7, r1
 8012f54:	8812      	ldrh	r2, [r2, #0]
 8012f56:	801a      	strh	r2, [r3, #0]
 8012f58:	187b      	adds	r3, r7, r1
 8012f5a:	881b      	ldrh	r3, [r3, #0]
 8012f5c:	2240      	movs	r2, #64	@ 0x40
 8012f5e:	4013      	ands	r3, r2
 8012f60:	d016      	beq.n	8012f90 <USB_ActivateEndpoint+0x554>
 8012f62:	687a      	ldr	r2, [r7, #4]
 8012f64:	683b      	ldr	r3, [r7, #0]
 8012f66:	781b      	ldrb	r3, [r3, #0]
 8012f68:	009b      	lsls	r3, r3, #2
 8012f6a:	18d3      	adds	r3, r2, r3
 8012f6c:	881b      	ldrh	r3, [r3, #0]
 8012f6e:	b29a      	uxth	r2, r3
 8012f70:	203a      	movs	r0, #58	@ 0x3a
 8012f72:	183b      	adds	r3, r7, r0
 8012f74:	495b      	ldr	r1, [pc, #364]	@ (80130e4 <USB_ActivateEndpoint+0x6a8>)
 8012f76:	400a      	ands	r2, r1
 8012f78:	801a      	strh	r2, [r3, #0]
 8012f7a:	687a      	ldr	r2, [r7, #4]
 8012f7c:	683b      	ldr	r3, [r7, #0]
 8012f7e:	781b      	ldrb	r3, [r3, #0]
 8012f80:	009b      	lsls	r3, r3, #2
 8012f82:	18d3      	adds	r3, r2, r3
 8012f84:	183a      	adds	r2, r7, r0
 8012f86:	8812      	ldrh	r2, [r2, #0]
 8012f88:	495d      	ldr	r1, [pc, #372]	@ (8013100 <USB_ActivateEndpoint+0x6c4>)
 8012f8a:	430a      	orrs	r2, r1
 8012f8c:	b292      	uxth	r2, r2
 8012f8e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012f90:	687a      	ldr	r2, [r7, #4]
 8012f92:	683b      	ldr	r3, [r7, #0]
 8012f94:	781b      	ldrb	r3, [r3, #0]
 8012f96:	009b      	lsls	r3, r3, #2
 8012f98:	18d3      	adds	r3, r2, r3
 8012f9a:	881b      	ldrh	r3, [r3, #0]
 8012f9c:	b29a      	uxth	r2, r3
 8012f9e:	2038      	movs	r0, #56	@ 0x38
 8012fa0:	183b      	adds	r3, r7, r0
 8012fa2:	4952      	ldr	r1, [pc, #328]	@ (80130ec <USB_ActivateEndpoint+0x6b0>)
 8012fa4:	400a      	ands	r2, r1
 8012fa6:	801a      	strh	r2, [r3, #0]
 8012fa8:	183b      	adds	r3, r7, r0
 8012faa:	183a      	adds	r2, r7, r0
 8012fac:	8812      	ldrh	r2, [r2, #0]
 8012fae:	2180      	movs	r1, #128	@ 0x80
 8012fb0:	0149      	lsls	r1, r1, #5
 8012fb2:	404a      	eors	r2, r1
 8012fb4:	801a      	strh	r2, [r3, #0]
 8012fb6:	183b      	adds	r3, r7, r0
 8012fb8:	183a      	adds	r2, r7, r0
 8012fba:	8812      	ldrh	r2, [r2, #0]
 8012fbc:	2180      	movs	r1, #128	@ 0x80
 8012fbe:	0189      	lsls	r1, r1, #6
 8012fc0:	404a      	eors	r2, r1
 8012fc2:	801a      	strh	r2, [r3, #0]
 8012fc4:	687a      	ldr	r2, [r7, #4]
 8012fc6:	683b      	ldr	r3, [r7, #0]
 8012fc8:	781b      	ldrb	r3, [r3, #0]
 8012fca:	009b      	lsls	r3, r3, #2
 8012fcc:	18d3      	adds	r3, r2, r3
 8012fce:	183a      	adds	r2, r7, r0
 8012fd0:	8812      	ldrh	r2, [r2, #0]
 8012fd2:	4947      	ldr	r1, [pc, #284]	@ (80130f0 <USB_ActivateEndpoint+0x6b4>)
 8012fd4:	430a      	orrs	r2, r1
 8012fd6:	b292      	uxth	r2, r2
 8012fd8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012fda:	687a      	ldr	r2, [r7, #4]
 8012fdc:	683b      	ldr	r3, [r7, #0]
 8012fde:	781b      	ldrb	r3, [r3, #0]
 8012fe0:	009b      	lsls	r3, r3, #2
 8012fe2:	18d3      	adds	r3, r2, r3
 8012fe4:	881b      	ldrh	r3, [r3, #0]
 8012fe6:	b29a      	uxth	r2, r3
 8012fe8:	2036      	movs	r0, #54	@ 0x36
 8012fea:	183b      	adds	r3, r7, r0
 8012fec:	4945      	ldr	r1, [pc, #276]	@ (8013104 <USB_ActivateEndpoint+0x6c8>)
 8012fee:	400a      	ands	r2, r1
 8012ff0:	801a      	strh	r2, [r3, #0]
 8012ff2:	687a      	ldr	r2, [r7, #4]
 8012ff4:	683b      	ldr	r3, [r7, #0]
 8012ff6:	781b      	ldrb	r3, [r3, #0]
 8012ff8:	009b      	lsls	r3, r3, #2
 8012ffa:	18d3      	adds	r3, r2, r3
 8012ffc:	183a      	adds	r2, r7, r0
 8012ffe:	8812      	ldrh	r2, [r2, #0]
 8013000:	493b      	ldr	r1, [pc, #236]	@ (80130f0 <USB_ActivateEndpoint+0x6b4>)
 8013002:	430a      	orrs	r2, r1
 8013004:	b292      	uxth	r2, r2
 8013006:	801a      	strh	r2, [r3, #0]
 8013008:	e0ac      	b.n	8013164 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801300a:	687a      	ldr	r2, [r7, #4]
 801300c:	683b      	ldr	r3, [r7, #0]
 801300e:	781b      	ldrb	r3, [r3, #0]
 8013010:	009b      	lsls	r3, r3, #2
 8013012:	18d2      	adds	r2, r2, r3
 8013014:	214e      	movs	r1, #78	@ 0x4e
 8013016:	187b      	adds	r3, r7, r1
 8013018:	8812      	ldrh	r2, [r2, #0]
 801301a:	801a      	strh	r2, [r3, #0]
 801301c:	187b      	adds	r3, r7, r1
 801301e:	881a      	ldrh	r2, [r3, #0]
 8013020:	2380      	movs	r3, #128	@ 0x80
 8013022:	01db      	lsls	r3, r3, #7
 8013024:	4013      	ands	r3, r2
 8013026:	d016      	beq.n	8013056 <USB_ActivateEndpoint+0x61a>
 8013028:	687a      	ldr	r2, [r7, #4]
 801302a:	683b      	ldr	r3, [r7, #0]
 801302c:	781b      	ldrb	r3, [r3, #0]
 801302e:	009b      	lsls	r3, r3, #2
 8013030:	18d3      	adds	r3, r2, r3
 8013032:	881b      	ldrh	r3, [r3, #0]
 8013034:	b29a      	uxth	r2, r3
 8013036:	204c      	movs	r0, #76	@ 0x4c
 8013038:	183b      	adds	r3, r7, r0
 801303a:	492a      	ldr	r1, [pc, #168]	@ (80130e4 <USB_ActivateEndpoint+0x6a8>)
 801303c:	400a      	ands	r2, r1
 801303e:	801a      	strh	r2, [r3, #0]
 8013040:	687a      	ldr	r2, [r7, #4]
 8013042:	683b      	ldr	r3, [r7, #0]
 8013044:	781b      	ldrb	r3, [r3, #0]
 8013046:	009b      	lsls	r3, r3, #2
 8013048:	18d3      	adds	r3, r2, r3
 801304a:	183a      	adds	r2, r7, r0
 801304c:	8812      	ldrh	r2, [r2, #0]
 801304e:	4926      	ldr	r1, [pc, #152]	@ (80130e8 <USB_ActivateEndpoint+0x6ac>)
 8013050:	430a      	orrs	r2, r1
 8013052:	b292      	uxth	r2, r2
 8013054:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013056:	687a      	ldr	r2, [r7, #4]
 8013058:	683b      	ldr	r3, [r7, #0]
 801305a:	781b      	ldrb	r3, [r3, #0]
 801305c:	009b      	lsls	r3, r3, #2
 801305e:	18d2      	adds	r2, r2, r3
 8013060:	214a      	movs	r1, #74	@ 0x4a
 8013062:	187b      	adds	r3, r7, r1
 8013064:	8812      	ldrh	r2, [r2, #0]
 8013066:	801a      	strh	r2, [r3, #0]
 8013068:	187b      	adds	r3, r7, r1
 801306a:	881b      	ldrh	r3, [r3, #0]
 801306c:	2240      	movs	r2, #64	@ 0x40
 801306e:	4013      	ands	r3, r2
 8013070:	d016      	beq.n	80130a0 <USB_ActivateEndpoint+0x664>
 8013072:	687a      	ldr	r2, [r7, #4]
 8013074:	683b      	ldr	r3, [r7, #0]
 8013076:	781b      	ldrb	r3, [r3, #0]
 8013078:	009b      	lsls	r3, r3, #2
 801307a:	18d3      	adds	r3, r2, r3
 801307c:	881b      	ldrh	r3, [r3, #0]
 801307e:	b29a      	uxth	r2, r3
 8013080:	2048      	movs	r0, #72	@ 0x48
 8013082:	183b      	adds	r3, r7, r0
 8013084:	4917      	ldr	r1, [pc, #92]	@ (80130e4 <USB_ActivateEndpoint+0x6a8>)
 8013086:	400a      	ands	r2, r1
 8013088:	801a      	strh	r2, [r3, #0]
 801308a:	687a      	ldr	r2, [r7, #4]
 801308c:	683b      	ldr	r3, [r7, #0]
 801308e:	781b      	ldrb	r3, [r3, #0]
 8013090:	009b      	lsls	r3, r3, #2
 8013092:	18d3      	adds	r3, r2, r3
 8013094:	183a      	adds	r2, r7, r0
 8013096:	8812      	ldrh	r2, [r2, #0]
 8013098:	4919      	ldr	r1, [pc, #100]	@ (8013100 <USB_ActivateEndpoint+0x6c4>)
 801309a:	430a      	orrs	r2, r1
 801309c:	b292      	uxth	r2, r2
 801309e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80130a0:	683b      	ldr	r3, [r7, #0]
 80130a2:	78db      	ldrb	r3, [r3, #3]
 80130a4:	2b01      	cmp	r3, #1
 80130a6:	d02f      	beq.n	8013108 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80130a8:	687a      	ldr	r2, [r7, #4]
 80130aa:	683b      	ldr	r3, [r7, #0]
 80130ac:	781b      	ldrb	r3, [r3, #0]
 80130ae:	009b      	lsls	r3, r3, #2
 80130b0:	18d3      	adds	r3, r2, r3
 80130b2:	881b      	ldrh	r3, [r3, #0]
 80130b4:	b29a      	uxth	r2, r3
 80130b6:	2044      	movs	r0, #68	@ 0x44
 80130b8:	183b      	adds	r3, r7, r0
 80130ba:	4912      	ldr	r1, [pc, #72]	@ (8013104 <USB_ActivateEndpoint+0x6c8>)
 80130bc:	400a      	ands	r2, r1
 80130be:	801a      	strh	r2, [r3, #0]
 80130c0:	183b      	adds	r3, r7, r0
 80130c2:	183a      	adds	r2, r7, r0
 80130c4:	8812      	ldrh	r2, [r2, #0]
 80130c6:	2120      	movs	r1, #32
 80130c8:	404a      	eors	r2, r1
 80130ca:	801a      	strh	r2, [r3, #0]
 80130cc:	687a      	ldr	r2, [r7, #4]
 80130ce:	683b      	ldr	r3, [r7, #0]
 80130d0:	781b      	ldrb	r3, [r3, #0]
 80130d2:	009b      	lsls	r3, r3, #2
 80130d4:	18d3      	adds	r3, r2, r3
 80130d6:	183a      	adds	r2, r7, r0
 80130d8:	8812      	ldrh	r2, [r2, #0]
 80130da:	4905      	ldr	r1, [pc, #20]	@ (80130f0 <USB_ActivateEndpoint+0x6b4>)
 80130dc:	430a      	orrs	r2, r1
 80130de:	b292      	uxth	r2, r2
 80130e0:	801a      	strh	r2, [r3, #0]
 80130e2:	e028      	b.n	8013136 <USB_ActivateEndpoint+0x6fa>
 80130e4:	ffff8f8f 	.word	0xffff8f8f
 80130e8:	ffffc080 	.word	0xffffc080
 80130ec:	ffffbf8f 	.word	0xffffbf8f
 80130f0:	ffff8080 	.word	0xffff8080
 80130f4:	ffff8180 	.word	0xffff8180
 80130f8:	ffff8e8f 	.word	0xffff8e8f
 80130fc:	00000404 	.word	0x00000404
 8013100:	ffff80c0 	.word	0xffff80c0
 8013104:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013108:	687a      	ldr	r2, [r7, #4]
 801310a:	683b      	ldr	r3, [r7, #0]
 801310c:	781b      	ldrb	r3, [r3, #0]
 801310e:	009b      	lsls	r3, r3, #2
 8013110:	18d3      	adds	r3, r2, r3
 8013112:	881b      	ldrh	r3, [r3, #0]
 8013114:	b29a      	uxth	r2, r3
 8013116:	2046      	movs	r0, #70	@ 0x46
 8013118:	183b      	adds	r3, r7, r0
 801311a:	4916      	ldr	r1, [pc, #88]	@ (8013174 <USB_ActivateEndpoint+0x738>)
 801311c:	400a      	ands	r2, r1
 801311e:	801a      	strh	r2, [r3, #0]
 8013120:	687a      	ldr	r2, [r7, #4]
 8013122:	683b      	ldr	r3, [r7, #0]
 8013124:	781b      	ldrb	r3, [r3, #0]
 8013126:	009b      	lsls	r3, r3, #2
 8013128:	18d3      	adds	r3, r2, r3
 801312a:	183a      	adds	r2, r7, r0
 801312c:	8812      	ldrh	r2, [r2, #0]
 801312e:	4912      	ldr	r1, [pc, #72]	@ (8013178 <USB_ActivateEndpoint+0x73c>)
 8013130:	430a      	orrs	r2, r1
 8013132:	b292      	uxth	r2, r2
 8013134:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013136:	687a      	ldr	r2, [r7, #4]
 8013138:	683b      	ldr	r3, [r7, #0]
 801313a:	781b      	ldrb	r3, [r3, #0]
 801313c:	009b      	lsls	r3, r3, #2
 801313e:	18d3      	adds	r3, r2, r3
 8013140:	881b      	ldrh	r3, [r3, #0]
 8013142:	b29a      	uxth	r2, r3
 8013144:	2042      	movs	r0, #66	@ 0x42
 8013146:	183b      	adds	r3, r7, r0
 8013148:	490c      	ldr	r1, [pc, #48]	@ (801317c <USB_ActivateEndpoint+0x740>)
 801314a:	400a      	ands	r2, r1
 801314c:	801a      	strh	r2, [r3, #0]
 801314e:	687a      	ldr	r2, [r7, #4]
 8013150:	683b      	ldr	r3, [r7, #0]
 8013152:	781b      	ldrb	r3, [r3, #0]
 8013154:	009b      	lsls	r3, r3, #2
 8013156:	18d3      	adds	r3, r2, r3
 8013158:	183a      	adds	r2, r7, r0
 801315a:	8812      	ldrh	r2, [r2, #0]
 801315c:	4906      	ldr	r1, [pc, #24]	@ (8013178 <USB_ActivateEndpoint+0x73c>)
 801315e:	430a      	orrs	r2, r1
 8013160:	b292      	uxth	r2, r2
 8013162:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8013164:	236f      	movs	r3, #111	@ 0x6f
 8013166:	18fb      	adds	r3, r7, r3
 8013168:	781b      	ldrb	r3, [r3, #0]
}
 801316a:	0018      	movs	r0, r3
 801316c:	46bd      	mov	sp, r7
 801316e:	b01c      	add	sp, #112	@ 0x70
 8013170:	bd80      	pop	{r7, pc}
 8013172:	46c0      	nop			@ (mov r8, r8)
 8013174:	ffff8fbf 	.word	0xffff8fbf
 8013178:	ffff8080 	.word	0xffff8080
 801317c:	ffffbf8f 	.word	0xffffbf8f

08013180 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013180:	b580      	push	{r7, lr}
 8013182:	b08c      	sub	sp, #48	@ 0x30
 8013184:	af00      	add	r7, sp, #0
 8013186:	6078      	str	r0, [r7, #4]
 8013188:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801318a:	683b      	ldr	r3, [r7, #0]
 801318c:	7b1b      	ldrb	r3, [r3, #12]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d000      	beq.n	8013194 <USB_DeactivateEndpoint+0x14>
 8013192:	e07e      	b.n	8013292 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8013194:	683b      	ldr	r3, [r7, #0]
 8013196:	785b      	ldrb	r3, [r3, #1]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d03c      	beq.n	8013216 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801319c:	687a      	ldr	r2, [r7, #4]
 801319e:	683b      	ldr	r3, [r7, #0]
 80131a0:	781b      	ldrb	r3, [r3, #0]
 80131a2:	009b      	lsls	r3, r3, #2
 80131a4:	18d2      	adds	r2, r2, r3
 80131a6:	210c      	movs	r1, #12
 80131a8:	187b      	adds	r3, r7, r1
 80131aa:	8812      	ldrh	r2, [r2, #0]
 80131ac:	801a      	strh	r2, [r3, #0]
 80131ae:	187b      	adds	r3, r7, r1
 80131b0:	881b      	ldrh	r3, [r3, #0]
 80131b2:	2240      	movs	r2, #64	@ 0x40
 80131b4:	4013      	ands	r3, r2
 80131b6:	d016      	beq.n	80131e6 <USB_DeactivateEndpoint+0x66>
 80131b8:	687a      	ldr	r2, [r7, #4]
 80131ba:	683b      	ldr	r3, [r7, #0]
 80131bc:	781b      	ldrb	r3, [r3, #0]
 80131be:	009b      	lsls	r3, r3, #2
 80131c0:	18d3      	adds	r3, r2, r3
 80131c2:	881b      	ldrh	r3, [r3, #0]
 80131c4:	b29a      	uxth	r2, r3
 80131c6:	200a      	movs	r0, #10
 80131c8:	183b      	adds	r3, r7, r0
 80131ca:	49c7      	ldr	r1, [pc, #796]	@ (80134e8 <USB_DeactivateEndpoint+0x368>)
 80131cc:	400a      	ands	r2, r1
 80131ce:	801a      	strh	r2, [r3, #0]
 80131d0:	687a      	ldr	r2, [r7, #4]
 80131d2:	683b      	ldr	r3, [r7, #0]
 80131d4:	781b      	ldrb	r3, [r3, #0]
 80131d6:	009b      	lsls	r3, r3, #2
 80131d8:	18d3      	adds	r3, r2, r3
 80131da:	183a      	adds	r2, r7, r0
 80131dc:	8812      	ldrh	r2, [r2, #0]
 80131de:	49c3      	ldr	r1, [pc, #780]	@ (80134ec <USB_DeactivateEndpoint+0x36c>)
 80131e0:	430a      	orrs	r2, r1
 80131e2:	b292      	uxth	r2, r2
 80131e4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80131e6:	687a      	ldr	r2, [r7, #4]
 80131e8:	683b      	ldr	r3, [r7, #0]
 80131ea:	781b      	ldrb	r3, [r3, #0]
 80131ec:	009b      	lsls	r3, r3, #2
 80131ee:	18d3      	adds	r3, r2, r3
 80131f0:	881b      	ldrh	r3, [r3, #0]
 80131f2:	b29a      	uxth	r2, r3
 80131f4:	2008      	movs	r0, #8
 80131f6:	183b      	adds	r3, r7, r0
 80131f8:	49bd      	ldr	r1, [pc, #756]	@ (80134f0 <USB_DeactivateEndpoint+0x370>)
 80131fa:	400a      	ands	r2, r1
 80131fc:	801a      	strh	r2, [r3, #0]
 80131fe:	687a      	ldr	r2, [r7, #4]
 8013200:	683b      	ldr	r3, [r7, #0]
 8013202:	781b      	ldrb	r3, [r3, #0]
 8013204:	009b      	lsls	r3, r3, #2
 8013206:	18d3      	adds	r3, r2, r3
 8013208:	183a      	adds	r2, r7, r0
 801320a:	8812      	ldrh	r2, [r2, #0]
 801320c:	49b9      	ldr	r1, [pc, #740]	@ (80134f4 <USB_DeactivateEndpoint+0x374>)
 801320e:	430a      	orrs	r2, r1
 8013210:	b292      	uxth	r2, r2
 8013212:	801a      	strh	r2, [r3, #0]
 8013214:	e163      	b.n	80134de <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013216:	687a      	ldr	r2, [r7, #4]
 8013218:	683b      	ldr	r3, [r7, #0]
 801321a:	781b      	ldrb	r3, [r3, #0]
 801321c:	009b      	lsls	r3, r3, #2
 801321e:	18d2      	adds	r2, r2, r3
 8013220:	2112      	movs	r1, #18
 8013222:	187b      	adds	r3, r7, r1
 8013224:	8812      	ldrh	r2, [r2, #0]
 8013226:	801a      	strh	r2, [r3, #0]
 8013228:	187b      	adds	r3, r7, r1
 801322a:	881a      	ldrh	r2, [r3, #0]
 801322c:	2380      	movs	r3, #128	@ 0x80
 801322e:	01db      	lsls	r3, r3, #7
 8013230:	4013      	ands	r3, r2
 8013232:	d016      	beq.n	8013262 <USB_DeactivateEndpoint+0xe2>
 8013234:	687a      	ldr	r2, [r7, #4]
 8013236:	683b      	ldr	r3, [r7, #0]
 8013238:	781b      	ldrb	r3, [r3, #0]
 801323a:	009b      	lsls	r3, r3, #2
 801323c:	18d3      	adds	r3, r2, r3
 801323e:	881b      	ldrh	r3, [r3, #0]
 8013240:	b29a      	uxth	r2, r3
 8013242:	2010      	movs	r0, #16
 8013244:	183b      	adds	r3, r7, r0
 8013246:	49a8      	ldr	r1, [pc, #672]	@ (80134e8 <USB_DeactivateEndpoint+0x368>)
 8013248:	400a      	ands	r2, r1
 801324a:	801a      	strh	r2, [r3, #0]
 801324c:	687a      	ldr	r2, [r7, #4]
 801324e:	683b      	ldr	r3, [r7, #0]
 8013250:	781b      	ldrb	r3, [r3, #0]
 8013252:	009b      	lsls	r3, r3, #2
 8013254:	18d3      	adds	r3, r2, r3
 8013256:	183a      	adds	r2, r7, r0
 8013258:	8812      	ldrh	r2, [r2, #0]
 801325a:	49a7      	ldr	r1, [pc, #668]	@ (80134f8 <USB_DeactivateEndpoint+0x378>)
 801325c:	430a      	orrs	r2, r1
 801325e:	b292      	uxth	r2, r2
 8013260:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013262:	687a      	ldr	r2, [r7, #4]
 8013264:	683b      	ldr	r3, [r7, #0]
 8013266:	781b      	ldrb	r3, [r3, #0]
 8013268:	009b      	lsls	r3, r3, #2
 801326a:	18d3      	adds	r3, r2, r3
 801326c:	881b      	ldrh	r3, [r3, #0]
 801326e:	b29a      	uxth	r2, r3
 8013270:	200e      	movs	r0, #14
 8013272:	183b      	adds	r3, r7, r0
 8013274:	49a1      	ldr	r1, [pc, #644]	@ (80134fc <USB_DeactivateEndpoint+0x37c>)
 8013276:	400a      	ands	r2, r1
 8013278:	801a      	strh	r2, [r3, #0]
 801327a:	687a      	ldr	r2, [r7, #4]
 801327c:	683b      	ldr	r3, [r7, #0]
 801327e:	781b      	ldrb	r3, [r3, #0]
 8013280:	009b      	lsls	r3, r3, #2
 8013282:	18d3      	adds	r3, r2, r3
 8013284:	183a      	adds	r2, r7, r0
 8013286:	8812      	ldrh	r2, [r2, #0]
 8013288:	499a      	ldr	r1, [pc, #616]	@ (80134f4 <USB_DeactivateEndpoint+0x374>)
 801328a:	430a      	orrs	r2, r1
 801328c:	b292      	uxth	r2, r2
 801328e:	801a      	strh	r2, [r3, #0]
 8013290:	e125      	b.n	80134de <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8013292:	683b      	ldr	r3, [r7, #0]
 8013294:	785b      	ldrb	r3, [r3, #1]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d000      	beq.n	801329c <USB_DeactivateEndpoint+0x11c>
 801329a:	e090      	b.n	80133be <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801329c:	687a      	ldr	r2, [r7, #4]
 801329e:	683b      	ldr	r3, [r7, #0]
 80132a0:	781b      	ldrb	r3, [r3, #0]
 80132a2:	009b      	lsls	r3, r3, #2
 80132a4:	18d2      	adds	r2, r2, r3
 80132a6:	2120      	movs	r1, #32
 80132a8:	187b      	adds	r3, r7, r1
 80132aa:	8812      	ldrh	r2, [r2, #0]
 80132ac:	801a      	strh	r2, [r3, #0]
 80132ae:	187b      	adds	r3, r7, r1
 80132b0:	881a      	ldrh	r2, [r3, #0]
 80132b2:	2380      	movs	r3, #128	@ 0x80
 80132b4:	01db      	lsls	r3, r3, #7
 80132b6:	4013      	ands	r3, r2
 80132b8:	d016      	beq.n	80132e8 <USB_DeactivateEndpoint+0x168>
 80132ba:	687a      	ldr	r2, [r7, #4]
 80132bc:	683b      	ldr	r3, [r7, #0]
 80132be:	781b      	ldrb	r3, [r3, #0]
 80132c0:	009b      	lsls	r3, r3, #2
 80132c2:	18d3      	adds	r3, r2, r3
 80132c4:	881b      	ldrh	r3, [r3, #0]
 80132c6:	b29a      	uxth	r2, r3
 80132c8:	201e      	movs	r0, #30
 80132ca:	183b      	adds	r3, r7, r0
 80132cc:	4986      	ldr	r1, [pc, #536]	@ (80134e8 <USB_DeactivateEndpoint+0x368>)
 80132ce:	400a      	ands	r2, r1
 80132d0:	801a      	strh	r2, [r3, #0]
 80132d2:	687a      	ldr	r2, [r7, #4]
 80132d4:	683b      	ldr	r3, [r7, #0]
 80132d6:	781b      	ldrb	r3, [r3, #0]
 80132d8:	009b      	lsls	r3, r3, #2
 80132da:	18d3      	adds	r3, r2, r3
 80132dc:	183a      	adds	r2, r7, r0
 80132de:	8812      	ldrh	r2, [r2, #0]
 80132e0:	4985      	ldr	r1, [pc, #532]	@ (80134f8 <USB_DeactivateEndpoint+0x378>)
 80132e2:	430a      	orrs	r2, r1
 80132e4:	b292      	uxth	r2, r2
 80132e6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80132e8:	687a      	ldr	r2, [r7, #4]
 80132ea:	683b      	ldr	r3, [r7, #0]
 80132ec:	781b      	ldrb	r3, [r3, #0]
 80132ee:	009b      	lsls	r3, r3, #2
 80132f0:	18d2      	adds	r2, r2, r3
 80132f2:	211c      	movs	r1, #28
 80132f4:	187b      	adds	r3, r7, r1
 80132f6:	8812      	ldrh	r2, [r2, #0]
 80132f8:	801a      	strh	r2, [r3, #0]
 80132fa:	187b      	adds	r3, r7, r1
 80132fc:	881b      	ldrh	r3, [r3, #0]
 80132fe:	2240      	movs	r2, #64	@ 0x40
 8013300:	4013      	ands	r3, r2
 8013302:	d016      	beq.n	8013332 <USB_DeactivateEndpoint+0x1b2>
 8013304:	687a      	ldr	r2, [r7, #4]
 8013306:	683b      	ldr	r3, [r7, #0]
 8013308:	781b      	ldrb	r3, [r3, #0]
 801330a:	009b      	lsls	r3, r3, #2
 801330c:	18d3      	adds	r3, r2, r3
 801330e:	881b      	ldrh	r3, [r3, #0]
 8013310:	b29a      	uxth	r2, r3
 8013312:	201a      	movs	r0, #26
 8013314:	183b      	adds	r3, r7, r0
 8013316:	4974      	ldr	r1, [pc, #464]	@ (80134e8 <USB_DeactivateEndpoint+0x368>)
 8013318:	400a      	ands	r2, r1
 801331a:	801a      	strh	r2, [r3, #0]
 801331c:	687a      	ldr	r2, [r7, #4]
 801331e:	683b      	ldr	r3, [r7, #0]
 8013320:	781b      	ldrb	r3, [r3, #0]
 8013322:	009b      	lsls	r3, r3, #2
 8013324:	18d3      	adds	r3, r2, r3
 8013326:	183a      	adds	r2, r7, r0
 8013328:	8812      	ldrh	r2, [r2, #0]
 801332a:	4970      	ldr	r1, [pc, #448]	@ (80134ec <USB_DeactivateEndpoint+0x36c>)
 801332c:	430a      	orrs	r2, r1
 801332e:	b292      	uxth	r2, r2
 8013330:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8013332:	687a      	ldr	r2, [r7, #4]
 8013334:	683b      	ldr	r3, [r7, #0]
 8013336:	781b      	ldrb	r3, [r3, #0]
 8013338:	009b      	lsls	r3, r3, #2
 801333a:	18d3      	adds	r3, r2, r3
 801333c:	881b      	ldrh	r3, [r3, #0]
 801333e:	b29a      	uxth	r2, r3
 8013340:	2018      	movs	r0, #24
 8013342:	183b      	adds	r3, r7, r0
 8013344:	4968      	ldr	r1, [pc, #416]	@ (80134e8 <USB_DeactivateEndpoint+0x368>)
 8013346:	400a      	ands	r2, r1
 8013348:	801a      	strh	r2, [r3, #0]
 801334a:	687a      	ldr	r2, [r7, #4]
 801334c:	683b      	ldr	r3, [r7, #0]
 801334e:	781b      	ldrb	r3, [r3, #0]
 8013350:	009b      	lsls	r3, r3, #2
 8013352:	18d3      	adds	r3, r2, r3
 8013354:	183a      	adds	r2, r7, r0
 8013356:	8812      	ldrh	r2, [r2, #0]
 8013358:	4964      	ldr	r1, [pc, #400]	@ (80134ec <USB_DeactivateEndpoint+0x36c>)
 801335a:	430a      	orrs	r2, r1
 801335c:	b292      	uxth	r2, r2
 801335e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013360:	687a      	ldr	r2, [r7, #4]
 8013362:	683b      	ldr	r3, [r7, #0]
 8013364:	781b      	ldrb	r3, [r3, #0]
 8013366:	009b      	lsls	r3, r3, #2
 8013368:	18d3      	adds	r3, r2, r3
 801336a:	881b      	ldrh	r3, [r3, #0]
 801336c:	b29a      	uxth	r2, r3
 801336e:	2016      	movs	r0, #22
 8013370:	183b      	adds	r3, r7, r0
 8013372:	4962      	ldr	r1, [pc, #392]	@ (80134fc <USB_DeactivateEndpoint+0x37c>)
 8013374:	400a      	ands	r2, r1
 8013376:	801a      	strh	r2, [r3, #0]
 8013378:	687a      	ldr	r2, [r7, #4]
 801337a:	683b      	ldr	r3, [r7, #0]
 801337c:	781b      	ldrb	r3, [r3, #0]
 801337e:	009b      	lsls	r3, r3, #2
 8013380:	18d3      	adds	r3, r2, r3
 8013382:	183a      	adds	r2, r7, r0
 8013384:	8812      	ldrh	r2, [r2, #0]
 8013386:	495b      	ldr	r1, [pc, #364]	@ (80134f4 <USB_DeactivateEndpoint+0x374>)
 8013388:	430a      	orrs	r2, r1
 801338a:	b292      	uxth	r2, r2
 801338c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801338e:	687a      	ldr	r2, [r7, #4]
 8013390:	683b      	ldr	r3, [r7, #0]
 8013392:	781b      	ldrb	r3, [r3, #0]
 8013394:	009b      	lsls	r3, r3, #2
 8013396:	18d3      	adds	r3, r2, r3
 8013398:	881b      	ldrh	r3, [r3, #0]
 801339a:	b29a      	uxth	r2, r3
 801339c:	2014      	movs	r0, #20
 801339e:	183b      	adds	r3, r7, r0
 80133a0:	4953      	ldr	r1, [pc, #332]	@ (80134f0 <USB_DeactivateEndpoint+0x370>)
 80133a2:	400a      	ands	r2, r1
 80133a4:	801a      	strh	r2, [r3, #0]
 80133a6:	687a      	ldr	r2, [r7, #4]
 80133a8:	683b      	ldr	r3, [r7, #0]
 80133aa:	781b      	ldrb	r3, [r3, #0]
 80133ac:	009b      	lsls	r3, r3, #2
 80133ae:	18d3      	adds	r3, r2, r3
 80133b0:	183a      	adds	r2, r7, r0
 80133b2:	8812      	ldrh	r2, [r2, #0]
 80133b4:	494f      	ldr	r1, [pc, #316]	@ (80134f4 <USB_DeactivateEndpoint+0x374>)
 80133b6:	430a      	orrs	r2, r1
 80133b8:	b292      	uxth	r2, r2
 80133ba:	801a      	strh	r2, [r3, #0]
 80133bc:	e08f      	b.n	80134de <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80133be:	687a      	ldr	r2, [r7, #4]
 80133c0:	683b      	ldr	r3, [r7, #0]
 80133c2:	781b      	ldrb	r3, [r3, #0]
 80133c4:	009b      	lsls	r3, r3, #2
 80133c6:	18d2      	adds	r2, r2, r3
 80133c8:	212e      	movs	r1, #46	@ 0x2e
 80133ca:	187b      	adds	r3, r7, r1
 80133cc:	8812      	ldrh	r2, [r2, #0]
 80133ce:	801a      	strh	r2, [r3, #0]
 80133d0:	187b      	adds	r3, r7, r1
 80133d2:	881a      	ldrh	r2, [r3, #0]
 80133d4:	2380      	movs	r3, #128	@ 0x80
 80133d6:	01db      	lsls	r3, r3, #7
 80133d8:	4013      	ands	r3, r2
 80133da:	d016      	beq.n	801340a <USB_DeactivateEndpoint+0x28a>
 80133dc:	687a      	ldr	r2, [r7, #4]
 80133de:	683b      	ldr	r3, [r7, #0]
 80133e0:	781b      	ldrb	r3, [r3, #0]
 80133e2:	009b      	lsls	r3, r3, #2
 80133e4:	18d3      	adds	r3, r2, r3
 80133e6:	881b      	ldrh	r3, [r3, #0]
 80133e8:	b29a      	uxth	r2, r3
 80133ea:	202c      	movs	r0, #44	@ 0x2c
 80133ec:	183b      	adds	r3, r7, r0
 80133ee:	493e      	ldr	r1, [pc, #248]	@ (80134e8 <USB_DeactivateEndpoint+0x368>)
 80133f0:	400a      	ands	r2, r1
 80133f2:	801a      	strh	r2, [r3, #0]
 80133f4:	687a      	ldr	r2, [r7, #4]
 80133f6:	683b      	ldr	r3, [r7, #0]
 80133f8:	781b      	ldrb	r3, [r3, #0]
 80133fa:	009b      	lsls	r3, r3, #2
 80133fc:	18d3      	adds	r3, r2, r3
 80133fe:	183a      	adds	r2, r7, r0
 8013400:	8812      	ldrh	r2, [r2, #0]
 8013402:	493d      	ldr	r1, [pc, #244]	@ (80134f8 <USB_DeactivateEndpoint+0x378>)
 8013404:	430a      	orrs	r2, r1
 8013406:	b292      	uxth	r2, r2
 8013408:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801340a:	687a      	ldr	r2, [r7, #4]
 801340c:	683b      	ldr	r3, [r7, #0]
 801340e:	781b      	ldrb	r3, [r3, #0]
 8013410:	009b      	lsls	r3, r3, #2
 8013412:	18d2      	adds	r2, r2, r3
 8013414:	212a      	movs	r1, #42	@ 0x2a
 8013416:	187b      	adds	r3, r7, r1
 8013418:	8812      	ldrh	r2, [r2, #0]
 801341a:	801a      	strh	r2, [r3, #0]
 801341c:	187b      	adds	r3, r7, r1
 801341e:	881b      	ldrh	r3, [r3, #0]
 8013420:	2240      	movs	r2, #64	@ 0x40
 8013422:	4013      	ands	r3, r2
 8013424:	d016      	beq.n	8013454 <USB_DeactivateEndpoint+0x2d4>
 8013426:	687a      	ldr	r2, [r7, #4]
 8013428:	683b      	ldr	r3, [r7, #0]
 801342a:	781b      	ldrb	r3, [r3, #0]
 801342c:	009b      	lsls	r3, r3, #2
 801342e:	18d3      	adds	r3, r2, r3
 8013430:	881b      	ldrh	r3, [r3, #0]
 8013432:	b29a      	uxth	r2, r3
 8013434:	2028      	movs	r0, #40	@ 0x28
 8013436:	183b      	adds	r3, r7, r0
 8013438:	492b      	ldr	r1, [pc, #172]	@ (80134e8 <USB_DeactivateEndpoint+0x368>)
 801343a:	400a      	ands	r2, r1
 801343c:	801a      	strh	r2, [r3, #0]
 801343e:	687a      	ldr	r2, [r7, #4]
 8013440:	683b      	ldr	r3, [r7, #0]
 8013442:	781b      	ldrb	r3, [r3, #0]
 8013444:	009b      	lsls	r3, r3, #2
 8013446:	18d3      	adds	r3, r2, r3
 8013448:	183a      	adds	r2, r7, r0
 801344a:	8812      	ldrh	r2, [r2, #0]
 801344c:	4927      	ldr	r1, [pc, #156]	@ (80134ec <USB_DeactivateEndpoint+0x36c>)
 801344e:	430a      	orrs	r2, r1
 8013450:	b292      	uxth	r2, r2
 8013452:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8013454:	687a      	ldr	r2, [r7, #4]
 8013456:	683b      	ldr	r3, [r7, #0]
 8013458:	781b      	ldrb	r3, [r3, #0]
 801345a:	009b      	lsls	r3, r3, #2
 801345c:	18d3      	adds	r3, r2, r3
 801345e:	881b      	ldrh	r3, [r3, #0]
 8013460:	b29a      	uxth	r2, r3
 8013462:	2026      	movs	r0, #38	@ 0x26
 8013464:	183b      	adds	r3, r7, r0
 8013466:	4920      	ldr	r1, [pc, #128]	@ (80134e8 <USB_DeactivateEndpoint+0x368>)
 8013468:	400a      	ands	r2, r1
 801346a:	801a      	strh	r2, [r3, #0]
 801346c:	687a      	ldr	r2, [r7, #4]
 801346e:	683b      	ldr	r3, [r7, #0]
 8013470:	781b      	ldrb	r3, [r3, #0]
 8013472:	009b      	lsls	r3, r3, #2
 8013474:	18d3      	adds	r3, r2, r3
 8013476:	183a      	adds	r2, r7, r0
 8013478:	8812      	ldrh	r2, [r2, #0]
 801347a:	491f      	ldr	r1, [pc, #124]	@ (80134f8 <USB_DeactivateEndpoint+0x378>)
 801347c:	430a      	orrs	r2, r1
 801347e:	b292      	uxth	r2, r2
 8013480:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013482:	687a      	ldr	r2, [r7, #4]
 8013484:	683b      	ldr	r3, [r7, #0]
 8013486:	781b      	ldrb	r3, [r3, #0]
 8013488:	009b      	lsls	r3, r3, #2
 801348a:	18d3      	adds	r3, r2, r3
 801348c:	881b      	ldrh	r3, [r3, #0]
 801348e:	b29a      	uxth	r2, r3
 8013490:	2024      	movs	r0, #36	@ 0x24
 8013492:	183b      	adds	r3, r7, r0
 8013494:	4916      	ldr	r1, [pc, #88]	@ (80134f0 <USB_DeactivateEndpoint+0x370>)
 8013496:	400a      	ands	r2, r1
 8013498:	801a      	strh	r2, [r3, #0]
 801349a:	687a      	ldr	r2, [r7, #4]
 801349c:	683b      	ldr	r3, [r7, #0]
 801349e:	781b      	ldrb	r3, [r3, #0]
 80134a0:	009b      	lsls	r3, r3, #2
 80134a2:	18d3      	adds	r3, r2, r3
 80134a4:	183a      	adds	r2, r7, r0
 80134a6:	8812      	ldrh	r2, [r2, #0]
 80134a8:	4912      	ldr	r1, [pc, #72]	@ (80134f4 <USB_DeactivateEndpoint+0x374>)
 80134aa:	430a      	orrs	r2, r1
 80134ac:	b292      	uxth	r2, r2
 80134ae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80134b0:	687a      	ldr	r2, [r7, #4]
 80134b2:	683b      	ldr	r3, [r7, #0]
 80134b4:	781b      	ldrb	r3, [r3, #0]
 80134b6:	009b      	lsls	r3, r3, #2
 80134b8:	18d3      	adds	r3, r2, r3
 80134ba:	881b      	ldrh	r3, [r3, #0]
 80134bc:	b29a      	uxth	r2, r3
 80134be:	2022      	movs	r0, #34	@ 0x22
 80134c0:	183b      	adds	r3, r7, r0
 80134c2:	490e      	ldr	r1, [pc, #56]	@ (80134fc <USB_DeactivateEndpoint+0x37c>)
 80134c4:	400a      	ands	r2, r1
 80134c6:	801a      	strh	r2, [r3, #0]
 80134c8:	687a      	ldr	r2, [r7, #4]
 80134ca:	683b      	ldr	r3, [r7, #0]
 80134cc:	781b      	ldrb	r3, [r3, #0]
 80134ce:	009b      	lsls	r3, r3, #2
 80134d0:	18d3      	adds	r3, r2, r3
 80134d2:	183a      	adds	r2, r7, r0
 80134d4:	8812      	ldrh	r2, [r2, #0]
 80134d6:	4907      	ldr	r1, [pc, #28]	@ (80134f4 <USB_DeactivateEndpoint+0x374>)
 80134d8:	430a      	orrs	r2, r1
 80134da:	b292      	uxth	r2, r2
 80134dc:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80134de:	2300      	movs	r3, #0
}
 80134e0:	0018      	movs	r0, r3
 80134e2:	46bd      	mov	sp, r7
 80134e4:	b00c      	add	sp, #48	@ 0x30
 80134e6:	bd80      	pop	{r7, pc}
 80134e8:	ffff8f8f 	.word	0xffff8f8f
 80134ec:	ffff80c0 	.word	0xffff80c0
 80134f0:	ffff8fbf 	.word	0xffff8fbf
 80134f4:	ffff8080 	.word	0xffff8080
 80134f8:	ffffc080 	.word	0xffffc080
 80134fc:	ffffbf8f 	.word	0xffffbf8f

08013500 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013500:	b590      	push	{r4, r7, lr}
 8013502:	b0c3      	sub	sp, #268	@ 0x10c
 8013504:	af00      	add	r7, sp, #0
 8013506:	6078      	str	r0, [r7, #4]
 8013508:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801350a:	683b      	ldr	r3, [r7, #0]
 801350c:	785b      	ldrb	r3, [r3, #1]
 801350e:	2b01      	cmp	r3, #1
 8013510:	d001      	beq.n	8013516 <USB_EPStartXfer+0x16>
 8013512:	f000 fd2d 	bl	8013f70 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8013516:	683b      	ldr	r3, [r7, #0]
 8013518:	699a      	ldr	r2, [r3, #24]
 801351a:	683b      	ldr	r3, [r7, #0]
 801351c:	691b      	ldr	r3, [r3, #16]
 801351e:	429a      	cmp	r2, r3
 8013520:	d905      	bls.n	801352e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8013522:	683b      	ldr	r3, [r7, #0]
 8013524:	691b      	ldr	r3, [r3, #16]
 8013526:	1d7a      	adds	r2, r7, #5
 8013528:	32ff      	adds	r2, #255	@ 0xff
 801352a:	6013      	str	r3, [r2, #0]
 801352c:	e004      	b.n	8013538 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801352e:	683b      	ldr	r3, [r7, #0]
 8013530:	699b      	ldr	r3, [r3, #24]
 8013532:	1d7a      	adds	r2, r7, #5
 8013534:	32ff      	adds	r2, #255	@ 0xff
 8013536:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8013538:	683b      	ldr	r3, [r7, #0]
 801353a:	7b1b      	ldrb	r3, [r3, #12]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d125      	bne.n	801358c <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8013540:	683b      	ldr	r3, [r7, #0]
 8013542:	6959      	ldr	r1, [r3, #20]
 8013544:	683b      	ldr	r3, [r7, #0]
 8013546:	88da      	ldrh	r2, [r3, #6]
 8013548:	1d7b      	adds	r3, r7, #5
 801354a:	33ff      	adds	r3, #255	@ 0xff
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	b29b      	uxth	r3, r3
 8013550:	6878      	ldr	r0, [r7, #4]
 8013552:	f001 fa47 	bl	80149e4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	613b      	str	r3, [r7, #16]
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	2250      	movs	r2, #80	@ 0x50
 801355e:	5a9b      	ldrh	r3, [r3, r2]
 8013560:	b29b      	uxth	r3, r3
 8013562:	001a      	movs	r2, r3
 8013564:	693b      	ldr	r3, [r7, #16]
 8013566:	189b      	adds	r3, r3, r2
 8013568:	613b      	str	r3, [r7, #16]
 801356a:	683b      	ldr	r3, [r7, #0]
 801356c:	781b      	ldrb	r3, [r3, #0]
 801356e:	00da      	lsls	r2, r3, #3
 8013570:	693b      	ldr	r3, [r7, #16]
 8013572:	18d3      	adds	r3, r2, r3
 8013574:	4ad7      	ldr	r2, [pc, #860]	@ (80138d4 <USB_EPStartXfer+0x3d4>)
 8013576:	4694      	mov	ip, r2
 8013578:	4463      	add	r3, ip
 801357a:	60fb      	str	r3, [r7, #12]
 801357c:	1d7b      	adds	r3, r7, #5
 801357e:	33ff      	adds	r3, #255	@ 0xff
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	b29a      	uxth	r2, r3
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	801a      	strh	r2, [r3, #0]
 8013588:	f000 fccd 	bl	8013f26 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801358c:	683b      	ldr	r3, [r7, #0]
 801358e:	78db      	ldrb	r3, [r3, #3]
 8013590:	2b02      	cmp	r3, #2
 8013592:	d000      	beq.n	8013596 <USB_EPStartXfer+0x96>
 8013594:	e362      	b.n	8013c5c <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8013596:	683b      	ldr	r3, [r7, #0]
 8013598:	6a1a      	ldr	r2, [r3, #32]
 801359a:	683b      	ldr	r3, [r7, #0]
 801359c:	691b      	ldr	r3, [r3, #16]
 801359e:	429a      	cmp	r2, r3
 80135a0:	d800      	bhi.n	80135a4 <USB_EPStartXfer+0xa4>
 80135a2:	e309      	b.n	8013bb8 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80135a4:	687a      	ldr	r2, [r7, #4]
 80135a6:	683b      	ldr	r3, [r7, #0]
 80135a8:	781b      	ldrb	r3, [r3, #0]
 80135aa:	009b      	lsls	r3, r3, #2
 80135ac:	18d3      	adds	r3, r2, r3
 80135ae:	881b      	ldrh	r3, [r3, #0]
 80135b0:	b29a      	uxth	r2, r3
 80135b2:	2056      	movs	r0, #86	@ 0x56
 80135b4:	183b      	adds	r3, r7, r0
 80135b6:	49c8      	ldr	r1, [pc, #800]	@ (80138d8 <USB_EPStartXfer+0x3d8>)
 80135b8:	400a      	ands	r2, r1
 80135ba:	801a      	strh	r2, [r3, #0]
 80135bc:	687a      	ldr	r2, [r7, #4]
 80135be:	683b      	ldr	r3, [r7, #0]
 80135c0:	781b      	ldrb	r3, [r3, #0]
 80135c2:	009b      	lsls	r3, r3, #2
 80135c4:	18d3      	adds	r3, r2, r3
 80135c6:	183a      	adds	r2, r7, r0
 80135c8:	8812      	ldrh	r2, [r2, #0]
 80135ca:	49c4      	ldr	r1, [pc, #784]	@ (80138dc <USB_EPStartXfer+0x3dc>)
 80135cc:	430a      	orrs	r2, r1
 80135ce:	b292      	uxth	r2, r2
 80135d0:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80135d2:	683b      	ldr	r3, [r7, #0]
 80135d4:	6a1a      	ldr	r2, [r3, #32]
 80135d6:	1d7b      	adds	r3, r7, #5
 80135d8:	33ff      	adds	r3, #255	@ 0xff
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	1ad2      	subs	r2, r2, r3
 80135de:	683b      	ldr	r3, [r7, #0]
 80135e0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80135e2:	687a      	ldr	r2, [r7, #4]
 80135e4:	683b      	ldr	r3, [r7, #0]
 80135e6:	781b      	ldrb	r3, [r3, #0]
 80135e8:	009b      	lsls	r3, r3, #2
 80135ea:	18d3      	adds	r3, r2, r3
 80135ec:	881b      	ldrh	r3, [r3, #0]
 80135ee:	b29b      	uxth	r3, r3
 80135f0:	001a      	movs	r2, r3
 80135f2:	2340      	movs	r3, #64	@ 0x40
 80135f4:	4013      	ands	r3, r2
 80135f6:	d100      	bne.n	80135fa <USB_EPStartXfer+0xfa>
 80135f8:	e176      	b.n	80138e8 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80135fe:	683b      	ldr	r3, [r7, #0]
 8013600:	785b      	ldrb	r3, [r3, #1]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d000      	beq.n	8013608 <USB_EPStartXfer+0x108>
 8013606:	e074      	b.n	80136f2 <USB_EPStartXfer+0x1f2>
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	2250      	movs	r2, #80	@ 0x50
 8013610:	5a9b      	ldrh	r3, [r3, r2]
 8013612:	b29b      	uxth	r3, r3
 8013614:	001a      	movs	r2, r3
 8013616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013618:	189b      	adds	r3, r3, r2
 801361a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801361c:	683b      	ldr	r3, [r7, #0]
 801361e:	781b      	ldrb	r3, [r3, #0]
 8013620:	00da      	lsls	r2, r3, #3
 8013622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013624:	18d3      	adds	r3, r2, r3
 8013626:	4aae      	ldr	r2, [pc, #696]	@ (80138e0 <USB_EPStartXfer+0x3e0>)
 8013628:	4694      	mov	ip, r2
 801362a:	4463      	add	r3, ip
 801362c:	627b      	str	r3, [r7, #36]	@ 0x24
 801362e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013630:	881b      	ldrh	r3, [r3, #0]
 8013632:	b29b      	uxth	r3, r3
 8013634:	059b      	lsls	r3, r3, #22
 8013636:	0d9b      	lsrs	r3, r3, #22
 8013638:	b29a      	uxth	r2, r3
 801363a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801363c:	801a      	strh	r2, [r3, #0]
 801363e:	1d7b      	adds	r3, r7, #5
 8013640:	33ff      	adds	r3, #255	@ 0xff
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	2b3e      	cmp	r3, #62	@ 0x3e
 8013646:	d924      	bls.n	8013692 <USB_EPStartXfer+0x192>
 8013648:	1d7b      	adds	r3, r7, #5
 801364a:	33ff      	adds	r3, #255	@ 0xff
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	095b      	lsrs	r3, r3, #5
 8013650:	1c7a      	adds	r2, r7, #1
 8013652:	32ff      	adds	r2, #255	@ 0xff
 8013654:	6013      	str	r3, [r2, #0]
 8013656:	1d7b      	adds	r3, r7, #5
 8013658:	33ff      	adds	r3, #255	@ 0xff
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	221f      	movs	r2, #31
 801365e:	4013      	ands	r3, r2
 8013660:	d106      	bne.n	8013670 <USB_EPStartXfer+0x170>
 8013662:	1c7b      	adds	r3, r7, #1
 8013664:	33ff      	adds	r3, #255	@ 0xff
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	3b01      	subs	r3, #1
 801366a:	1c7a      	adds	r2, r7, #1
 801366c:	32ff      	adds	r2, #255	@ 0xff
 801366e:	6013      	str	r3, [r2, #0]
 8013670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013672:	881b      	ldrh	r3, [r3, #0]
 8013674:	b29a      	uxth	r2, r3
 8013676:	1c7b      	adds	r3, r7, #1
 8013678:	33ff      	adds	r3, #255	@ 0xff
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	b29b      	uxth	r3, r3
 801367e:	029b      	lsls	r3, r3, #10
 8013680:	b29b      	uxth	r3, r3
 8013682:	4313      	orrs	r3, r2
 8013684:	b29b      	uxth	r3, r3
 8013686:	4a97      	ldr	r2, [pc, #604]	@ (80138e4 <USB_EPStartXfer+0x3e4>)
 8013688:	4313      	orrs	r3, r2
 801368a:	b29a      	uxth	r2, r3
 801368c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801368e:	801a      	strh	r2, [r3, #0]
 8013690:	e04a      	b.n	8013728 <USB_EPStartXfer+0x228>
 8013692:	1d7b      	adds	r3, r7, #5
 8013694:	33ff      	adds	r3, #255	@ 0xff
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d108      	bne.n	80136ae <USB_EPStartXfer+0x1ae>
 801369c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801369e:	881b      	ldrh	r3, [r3, #0]
 80136a0:	b29b      	uxth	r3, r3
 80136a2:	4a90      	ldr	r2, [pc, #576]	@ (80138e4 <USB_EPStartXfer+0x3e4>)
 80136a4:	4313      	orrs	r3, r2
 80136a6:	b29a      	uxth	r2, r3
 80136a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136aa:	801a      	strh	r2, [r3, #0]
 80136ac:	e03c      	b.n	8013728 <USB_EPStartXfer+0x228>
 80136ae:	1d7b      	adds	r3, r7, #5
 80136b0:	33ff      	adds	r3, #255	@ 0xff
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	085b      	lsrs	r3, r3, #1
 80136b6:	1c7a      	adds	r2, r7, #1
 80136b8:	32ff      	adds	r2, #255	@ 0xff
 80136ba:	6013      	str	r3, [r2, #0]
 80136bc:	1d7b      	adds	r3, r7, #5
 80136be:	33ff      	adds	r3, #255	@ 0xff
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	2201      	movs	r2, #1
 80136c4:	4013      	ands	r3, r2
 80136c6:	d006      	beq.n	80136d6 <USB_EPStartXfer+0x1d6>
 80136c8:	1c7b      	adds	r3, r7, #1
 80136ca:	33ff      	adds	r3, #255	@ 0xff
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	3301      	adds	r3, #1
 80136d0:	1c7a      	adds	r2, r7, #1
 80136d2:	32ff      	adds	r2, #255	@ 0xff
 80136d4:	6013      	str	r3, [r2, #0]
 80136d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136d8:	881b      	ldrh	r3, [r3, #0]
 80136da:	b29a      	uxth	r2, r3
 80136dc:	1c7b      	adds	r3, r7, #1
 80136de:	33ff      	adds	r3, #255	@ 0xff
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	b29b      	uxth	r3, r3
 80136e4:	029b      	lsls	r3, r3, #10
 80136e6:	b29b      	uxth	r3, r3
 80136e8:	4313      	orrs	r3, r2
 80136ea:	b29a      	uxth	r2, r3
 80136ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136ee:	801a      	strh	r2, [r3, #0]
 80136f0:	e01a      	b.n	8013728 <USB_EPStartXfer+0x228>
 80136f2:	683b      	ldr	r3, [r7, #0]
 80136f4:	785b      	ldrb	r3, [r3, #1]
 80136f6:	2b01      	cmp	r3, #1
 80136f8:	d116      	bne.n	8013728 <USB_EPStartXfer+0x228>
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	2250      	movs	r2, #80	@ 0x50
 80136fe:	5a9b      	ldrh	r3, [r3, r2]
 8013700:	b29b      	uxth	r3, r3
 8013702:	001a      	movs	r2, r3
 8013704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013706:	189b      	adds	r3, r3, r2
 8013708:	633b      	str	r3, [r7, #48]	@ 0x30
 801370a:	683b      	ldr	r3, [r7, #0]
 801370c:	781b      	ldrb	r3, [r3, #0]
 801370e:	00da      	lsls	r2, r3, #3
 8013710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013712:	18d3      	adds	r3, r2, r3
 8013714:	4a72      	ldr	r2, [pc, #456]	@ (80138e0 <USB_EPStartXfer+0x3e0>)
 8013716:	4694      	mov	ip, r2
 8013718:	4463      	add	r3, ip
 801371a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801371c:	1d7b      	adds	r3, r7, #5
 801371e:	33ff      	adds	r3, #255	@ 0xff
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	b29a      	uxth	r2, r3
 8013724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013726:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8013728:	2076      	movs	r0, #118	@ 0x76
 801372a:	183b      	adds	r3, r7, r0
 801372c:	683a      	ldr	r2, [r7, #0]
 801372e:	8952      	ldrh	r2, [r2, #10]
 8013730:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013732:	683b      	ldr	r3, [r7, #0]
 8013734:	6959      	ldr	r1, [r3, #20]
 8013736:	1d7b      	adds	r3, r7, #5
 8013738:	33ff      	adds	r3, #255	@ 0xff
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	b29c      	uxth	r4, r3
 801373e:	183b      	adds	r3, r7, r0
 8013740:	881a      	ldrh	r2, [r3, #0]
 8013742:	6878      	ldr	r0, [r7, #4]
 8013744:	0023      	movs	r3, r4
 8013746:	f001 f94d 	bl	80149e4 <USB_WritePMA>
            ep->xfer_buff += len;
 801374a:	683b      	ldr	r3, [r7, #0]
 801374c:	695a      	ldr	r2, [r3, #20]
 801374e:	1d7b      	adds	r3, r7, #5
 8013750:	33ff      	adds	r3, #255	@ 0xff
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	18d2      	adds	r2, r2, r3
 8013756:	683b      	ldr	r3, [r7, #0]
 8013758:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801375a:	683b      	ldr	r3, [r7, #0]
 801375c:	6a1a      	ldr	r2, [r3, #32]
 801375e:	683b      	ldr	r3, [r7, #0]
 8013760:	691b      	ldr	r3, [r3, #16]
 8013762:	429a      	cmp	r2, r3
 8013764:	d908      	bls.n	8013778 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8013766:	683b      	ldr	r3, [r7, #0]
 8013768:	6a1a      	ldr	r2, [r3, #32]
 801376a:	1d7b      	adds	r3, r7, #5
 801376c:	33ff      	adds	r3, #255	@ 0xff
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	1ad2      	subs	r2, r2, r3
 8013772:	683b      	ldr	r3, [r7, #0]
 8013774:	621a      	str	r2, [r3, #32]
 8013776:	e007      	b.n	8013788 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8013778:	683b      	ldr	r3, [r7, #0]
 801377a:	6a1b      	ldr	r3, [r3, #32]
 801377c:	1d7a      	adds	r2, r7, #5
 801377e:	32ff      	adds	r2, #255	@ 0xff
 8013780:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8013782:	683b      	ldr	r3, [r7, #0]
 8013784:	2200      	movs	r2, #0
 8013786:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	785b      	ldrb	r3, [r3, #1]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d000      	beq.n	8013792 <USB_EPStartXfer+0x292>
 8013790:	e070      	b.n	8013874 <USB_EPStartXfer+0x374>
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	61bb      	str	r3, [r7, #24]
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	2250      	movs	r2, #80	@ 0x50
 801379a:	5a9b      	ldrh	r3, [r3, r2]
 801379c:	b29b      	uxth	r3, r3
 801379e:	001a      	movs	r2, r3
 80137a0:	69bb      	ldr	r3, [r7, #24]
 80137a2:	189b      	adds	r3, r3, r2
 80137a4:	61bb      	str	r3, [r7, #24]
 80137a6:	683b      	ldr	r3, [r7, #0]
 80137a8:	781b      	ldrb	r3, [r3, #0]
 80137aa:	00da      	lsls	r2, r3, #3
 80137ac:	69bb      	ldr	r3, [r7, #24]
 80137ae:	18d3      	adds	r3, r2, r3
 80137b0:	4a48      	ldr	r2, [pc, #288]	@ (80138d4 <USB_EPStartXfer+0x3d4>)
 80137b2:	4694      	mov	ip, r2
 80137b4:	4463      	add	r3, ip
 80137b6:	617b      	str	r3, [r7, #20]
 80137b8:	697b      	ldr	r3, [r7, #20]
 80137ba:	881b      	ldrh	r3, [r3, #0]
 80137bc:	b29b      	uxth	r3, r3
 80137be:	059b      	lsls	r3, r3, #22
 80137c0:	0d9b      	lsrs	r3, r3, #22
 80137c2:	b29a      	uxth	r2, r3
 80137c4:	697b      	ldr	r3, [r7, #20]
 80137c6:	801a      	strh	r2, [r3, #0]
 80137c8:	1d7b      	adds	r3, r7, #5
 80137ca:	33ff      	adds	r3, #255	@ 0xff
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80137d0:	d922      	bls.n	8013818 <USB_EPStartXfer+0x318>
 80137d2:	1d7b      	adds	r3, r7, #5
 80137d4:	33ff      	adds	r3, #255	@ 0xff
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	095b      	lsrs	r3, r3, #5
 80137da:	21fc      	movs	r1, #252	@ 0xfc
 80137dc:	187a      	adds	r2, r7, r1
 80137de:	6013      	str	r3, [r2, #0]
 80137e0:	1d7b      	adds	r3, r7, #5
 80137e2:	33ff      	adds	r3, #255	@ 0xff
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	221f      	movs	r2, #31
 80137e8:	4013      	ands	r3, r2
 80137ea:	d104      	bne.n	80137f6 <USB_EPStartXfer+0x2f6>
 80137ec:	187b      	adds	r3, r7, r1
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	3b01      	subs	r3, #1
 80137f2:	187a      	adds	r2, r7, r1
 80137f4:	6013      	str	r3, [r2, #0]
 80137f6:	697b      	ldr	r3, [r7, #20]
 80137f8:	881b      	ldrh	r3, [r3, #0]
 80137fa:	b29a      	uxth	r2, r3
 80137fc:	23fc      	movs	r3, #252	@ 0xfc
 80137fe:	18fb      	adds	r3, r7, r3
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	b29b      	uxth	r3, r3
 8013804:	029b      	lsls	r3, r3, #10
 8013806:	b29b      	uxth	r3, r3
 8013808:	4313      	orrs	r3, r2
 801380a:	b29b      	uxth	r3, r3
 801380c:	4a35      	ldr	r2, [pc, #212]	@ (80138e4 <USB_EPStartXfer+0x3e4>)
 801380e:	4313      	orrs	r3, r2
 8013810:	b29a      	uxth	r2, r3
 8013812:	697b      	ldr	r3, [r7, #20]
 8013814:	801a      	strh	r2, [r3, #0]
 8013816:	e04a      	b.n	80138ae <USB_EPStartXfer+0x3ae>
 8013818:	1d7b      	adds	r3, r7, #5
 801381a:	33ff      	adds	r3, #255	@ 0xff
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d108      	bne.n	8013834 <USB_EPStartXfer+0x334>
 8013822:	697b      	ldr	r3, [r7, #20]
 8013824:	881b      	ldrh	r3, [r3, #0]
 8013826:	b29b      	uxth	r3, r3
 8013828:	4a2e      	ldr	r2, [pc, #184]	@ (80138e4 <USB_EPStartXfer+0x3e4>)
 801382a:	4313      	orrs	r3, r2
 801382c:	b29a      	uxth	r2, r3
 801382e:	697b      	ldr	r3, [r7, #20]
 8013830:	801a      	strh	r2, [r3, #0]
 8013832:	e03c      	b.n	80138ae <USB_EPStartXfer+0x3ae>
 8013834:	1d7b      	adds	r3, r7, #5
 8013836:	33ff      	adds	r3, #255	@ 0xff
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	085b      	lsrs	r3, r3, #1
 801383c:	21fc      	movs	r1, #252	@ 0xfc
 801383e:	187a      	adds	r2, r7, r1
 8013840:	6013      	str	r3, [r2, #0]
 8013842:	1d7b      	adds	r3, r7, #5
 8013844:	33ff      	adds	r3, #255	@ 0xff
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	2201      	movs	r2, #1
 801384a:	4013      	ands	r3, r2
 801384c:	d004      	beq.n	8013858 <USB_EPStartXfer+0x358>
 801384e:	187b      	adds	r3, r7, r1
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	3301      	adds	r3, #1
 8013854:	187a      	adds	r2, r7, r1
 8013856:	6013      	str	r3, [r2, #0]
 8013858:	697b      	ldr	r3, [r7, #20]
 801385a:	881b      	ldrh	r3, [r3, #0]
 801385c:	b29a      	uxth	r2, r3
 801385e:	23fc      	movs	r3, #252	@ 0xfc
 8013860:	18fb      	adds	r3, r7, r3
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	b29b      	uxth	r3, r3
 8013866:	029b      	lsls	r3, r3, #10
 8013868:	b29b      	uxth	r3, r3
 801386a:	4313      	orrs	r3, r2
 801386c:	b29a      	uxth	r2, r3
 801386e:	697b      	ldr	r3, [r7, #20]
 8013870:	801a      	strh	r2, [r3, #0]
 8013872:	e01c      	b.n	80138ae <USB_EPStartXfer+0x3ae>
 8013874:	683b      	ldr	r3, [r7, #0]
 8013876:	785b      	ldrb	r3, [r3, #1]
 8013878:	2b01      	cmp	r3, #1
 801387a:	d118      	bne.n	80138ae <USB_EPStartXfer+0x3ae>
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	623b      	str	r3, [r7, #32]
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	2250      	movs	r2, #80	@ 0x50
 8013884:	5a9b      	ldrh	r3, [r3, r2]
 8013886:	b29b      	uxth	r3, r3
 8013888:	001a      	movs	r2, r3
 801388a:	6a3b      	ldr	r3, [r7, #32]
 801388c:	189b      	adds	r3, r3, r2
 801388e:	623b      	str	r3, [r7, #32]
 8013890:	683b      	ldr	r3, [r7, #0]
 8013892:	781b      	ldrb	r3, [r3, #0]
 8013894:	00da      	lsls	r2, r3, #3
 8013896:	6a3b      	ldr	r3, [r7, #32]
 8013898:	18d3      	adds	r3, r2, r3
 801389a:	4a0e      	ldr	r2, [pc, #56]	@ (80138d4 <USB_EPStartXfer+0x3d4>)
 801389c:	4694      	mov	ip, r2
 801389e:	4463      	add	r3, ip
 80138a0:	61fb      	str	r3, [r7, #28]
 80138a2:	1d7b      	adds	r3, r7, #5
 80138a4:	33ff      	adds	r3, #255	@ 0xff
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	b29a      	uxth	r2, r3
 80138aa:	69fb      	ldr	r3, [r7, #28]
 80138ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80138ae:	2076      	movs	r0, #118	@ 0x76
 80138b0:	183b      	adds	r3, r7, r0
 80138b2:	683a      	ldr	r2, [r7, #0]
 80138b4:	8912      	ldrh	r2, [r2, #8]
 80138b6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80138b8:	683b      	ldr	r3, [r7, #0]
 80138ba:	6959      	ldr	r1, [r3, #20]
 80138bc:	1d7b      	adds	r3, r7, #5
 80138be:	33ff      	adds	r3, #255	@ 0xff
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	b29c      	uxth	r4, r3
 80138c4:	183b      	adds	r3, r7, r0
 80138c6:	881a      	ldrh	r2, [r3, #0]
 80138c8:	6878      	ldr	r0, [r7, #4]
 80138ca:	0023      	movs	r3, r4
 80138cc:	f001 f88a 	bl	80149e4 <USB_WritePMA>
 80138d0:	e329      	b.n	8013f26 <USB_EPStartXfer+0xa26>
 80138d2:	46c0      	nop			@ (mov r8, r8)
 80138d4:	00000402 	.word	0x00000402
 80138d8:	ffff8f8f 	.word	0xffff8f8f
 80138dc:	ffff8180 	.word	0xffff8180
 80138e0:	00000406 	.word	0x00000406
 80138e4:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80138e8:	683b      	ldr	r3, [r7, #0]
 80138ea:	785b      	ldrb	r3, [r3, #1]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d000      	beq.n	80138f2 <USB_EPStartXfer+0x3f2>
 80138f0:	e070      	b.n	80139d4 <USB_EPStartXfer+0x4d4>
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	2250      	movs	r2, #80	@ 0x50
 80138fa:	5a9b      	ldrh	r3, [r3, r2]
 80138fc:	b29b      	uxth	r3, r3
 80138fe:	001a      	movs	r2, r3
 8013900:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013902:	189b      	adds	r3, r3, r2
 8013904:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013906:	683b      	ldr	r3, [r7, #0]
 8013908:	781b      	ldrb	r3, [r3, #0]
 801390a:	00da      	lsls	r2, r3, #3
 801390c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801390e:	18d3      	adds	r3, r2, r3
 8013910:	4acd      	ldr	r2, [pc, #820]	@ (8013c48 <USB_EPStartXfer+0x748>)
 8013912:	4694      	mov	ip, r2
 8013914:	4463      	add	r3, ip
 8013916:	647b      	str	r3, [r7, #68]	@ 0x44
 8013918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801391a:	881b      	ldrh	r3, [r3, #0]
 801391c:	b29b      	uxth	r3, r3
 801391e:	059b      	lsls	r3, r3, #22
 8013920:	0d9b      	lsrs	r3, r3, #22
 8013922:	b29a      	uxth	r2, r3
 8013924:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013926:	801a      	strh	r2, [r3, #0]
 8013928:	1d7b      	adds	r3, r7, #5
 801392a:	33ff      	adds	r3, #255	@ 0xff
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	2b3e      	cmp	r3, #62	@ 0x3e
 8013930:	d922      	bls.n	8013978 <USB_EPStartXfer+0x478>
 8013932:	1d7b      	adds	r3, r7, #5
 8013934:	33ff      	adds	r3, #255	@ 0xff
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	095b      	lsrs	r3, r3, #5
 801393a:	21f8      	movs	r1, #248	@ 0xf8
 801393c:	187a      	adds	r2, r7, r1
 801393e:	6013      	str	r3, [r2, #0]
 8013940:	1d7b      	adds	r3, r7, #5
 8013942:	33ff      	adds	r3, #255	@ 0xff
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	221f      	movs	r2, #31
 8013948:	4013      	ands	r3, r2
 801394a:	d104      	bne.n	8013956 <USB_EPStartXfer+0x456>
 801394c:	187b      	adds	r3, r7, r1
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	3b01      	subs	r3, #1
 8013952:	187a      	adds	r2, r7, r1
 8013954:	6013      	str	r3, [r2, #0]
 8013956:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013958:	881b      	ldrh	r3, [r3, #0]
 801395a:	b29a      	uxth	r2, r3
 801395c:	23f8      	movs	r3, #248	@ 0xf8
 801395e:	18fb      	adds	r3, r7, r3
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	b29b      	uxth	r3, r3
 8013964:	029b      	lsls	r3, r3, #10
 8013966:	b29b      	uxth	r3, r3
 8013968:	4313      	orrs	r3, r2
 801396a:	b29b      	uxth	r3, r3
 801396c:	4ab7      	ldr	r2, [pc, #732]	@ (8013c4c <USB_EPStartXfer+0x74c>)
 801396e:	4313      	orrs	r3, r2
 8013970:	b29a      	uxth	r2, r3
 8013972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013974:	801a      	strh	r2, [r3, #0]
 8013976:	e04a      	b.n	8013a0e <USB_EPStartXfer+0x50e>
 8013978:	1d7b      	adds	r3, r7, #5
 801397a:	33ff      	adds	r3, #255	@ 0xff
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d108      	bne.n	8013994 <USB_EPStartXfer+0x494>
 8013982:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013984:	881b      	ldrh	r3, [r3, #0]
 8013986:	b29b      	uxth	r3, r3
 8013988:	4ab0      	ldr	r2, [pc, #704]	@ (8013c4c <USB_EPStartXfer+0x74c>)
 801398a:	4313      	orrs	r3, r2
 801398c:	b29a      	uxth	r2, r3
 801398e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013990:	801a      	strh	r2, [r3, #0]
 8013992:	e03c      	b.n	8013a0e <USB_EPStartXfer+0x50e>
 8013994:	1d7b      	adds	r3, r7, #5
 8013996:	33ff      	adds	r3, #255	@ 0xff
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	085b      	lsrs	r3, r3, #1
 801399c:	21f8      	movs	r1, #248	@ 0xf8
 801399e:	187a      	adds	r2, r7, r1
 80139a0:	6013      	str	r3, [r2, #0]
 80139a2:	1d7b      	adds	r3, r7, #5
 80139a4:	33ff      	adds	r3, #255	@ 0xff
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	2201      	movs	r2, #1
 80139aa:	4013      	ands	r3, r2
 80139ac:	d004      	beq.n	80139b8 <USB_EPStartXfer+0x4b8>
 80139ae:	187b      	adds	r3, r7, r1
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	3301      	adds	r3, #1
 80139b4:	187a      	adds	r2, r7, r1
 80139b6:	6013      	str	r3, [r2, #0]
 80139b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80139ba:	881b      	ldrh	r3, [r3, #0]
 80139bc:	b29a      	uxth	r2, r3
 80139be:	23f8      	movs	r3, #248	@ 0xf8
 80139c0:	18fb      	adds	r3, r7, r3
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	b29b      	uxth	r3, r3
 80139c6:	029b      	lsls	r3, r3, #10
 80139c8:	b29b      	uxth	r3, r3
 80139ca:	4313      	orrs	r3, r2
 80139cc:	b29a      	uxth	r2, r3
 80139ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80139d0:	801a      	strh	r2, [r3, #0]
 80139d2:	e01c      	b.n	8013a0e <USB_EPStartXfer+0x50e>
 80139d4:	683b      	ldr	r3, [r7, #0]
 80139d6:	785b      	ldrb	r3, [r3, #1]
 80139d8:	2b01      	cmp	r3, #1
 80139da:	d118      	bne.n	8013a0e <USB_EPStartXfer+0x50e>
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	653b      	str	r3, [r7, #80]	@ 0x50
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	2250      	movs	r2, #80	@ 0x50
 80139e4:	5a9b      	ldrh	r3, [r3, r2]
 80139e6:	b29b      	uxth	r3, r3
 80139e8:	001a      	movs	r2, r3
 80139ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80139ec:	189b      	adds	r3, r3, r2
 80139ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80139f0:	683b      	ldr	r3, [r7, #0]
 80139f2:	781b      	ldrb	r3, [r3, #0]
 80139f4:	00da      	lsls	r2, r3, #3
 80139f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80139f8:	18d3      	adds	r3, r2, r3
 80139fa:	4a93      	ldr	r2, [pc, #588]	@ (8013c48 <USB_EPStartXfer+0x748>)
 80139fc:	4694      	mov	ip, r2
 80139fe:	4463      	add	r3, ip
 8013a00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013a02:	1d7b      	adds	r3, r7, #5
 8013a04:	33ff      	adds	r3, #255	@ 0xff
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	b29a      	uxth	r2, r3
 8013a0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a0c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8013a0e:	2076      	movs	r0, #118	@ 0x76
 8013a10:	183b      	adds	r3, r7, r0
 8013a12:	683a      	ldr	r2, [r7, #0]
 8013a14:	8912      	ldrh	r2, [r2, #8]
 8013a16:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013a18:	683b      	ldr	r3, [r7, #0]
 8013a1a:	6959      	ldr	r1, [r3, #20]
 8013a1c:	1d7b      	adds	r3, r7, #5
 8013a1e:	33ff      	adds	r3, #255	@ 0xff
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	b29c      	uxth	r4, r3
 8013a24:	183b      	adds	r3, r7, r0
 8013a26:	881a      	ldrh	r2, [r3, #0]
 8013a28:	6878      	ldr	r0, [r7, #4]
 8013a2a:	0023      	movs	r3, r4
 8013a2c:	f000 ffda 	bl	80149e4 <USB_WritePMA>
            ep->xfer_buff += len;
 8013a30:	683b      	ldr	r3, [r7, #0]
 8013a32:	695a      	ldr	r2, [r3, #20]
 8013a34:	1d7b      	adds	r3, r7, #5
 8013a36:	33ff      	adds	r3, #255	@ 0xff
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	18d2      	adds	r2, r2, r3
 8013a3c:	683b      	ldr	r3, [r7, #0]
 8013a3e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8013a40:	683b      	ldr	r3, [r7, #0]
 8013a42:	6a1a      	ldr	r2, [r3, #32]
 8013a44:	683b      	ldr	r3, [r7, #0]
 8013a46:	691b      	ldr	r3, [r3, #16]
 8013a48:	429a      	cmp	r2, r3
 8013a4a:	d908      	bls.n	8013a5e <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8013a4c:	683b      	ldr	r3, [r7, #0]
 8013a4e:	6a1a      	ldr	r2, [r3, #32]
 8013a50:	1d7b      	adds	r3, r7, #5
 8013a52:	33ff      	adds	r3, #255	@ 0xff
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	1ad2      	subs	r2, r2, r3
 8013a58:	683b      	ldr	r3, [r7, #0]
 8013a5a:	621a      	str	r2, [r3, #32]
 8013a5c:	e007      	b.n	8013a6e <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8013a5e:	683b      	ldr	r3, [r7, #0]
 8013a60:	6a1b      	ldr	r3, [r3, #32]
 8013a62:	1d7a      	adds	r2, r7, #5
 8013a64:	32ff      	adds	r2, #255	@ 0xff
 8013a66:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8013a68:	683b      	ldr	r3, [r7, #0]
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	643b      	str	r3, [r7, #64]	@ 0x40
 8013a72:	683b      	ldr	r3, [r7, #0]
 8013a74:	785b      	ldrb	r3, [r3, #1]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d000      	beq.n	8013a7c <USB_EPStartXfer+0x57c>
 8013a7a:	e070      	b.n	8013b5e <USB_EPStartXfer+0x65e>
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	2250      	movs	r2, #80	@ 0x50
 8013a84:	5a9b      	ldrh	r3, [r3, r2]
 8013a86:	b29b      	uxth	r3, r3
 8013a88:	001a      	movs	r2, r3
 8013a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a8c:	189b      	adds	r3, r3, r2
 8013a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013a90:	683b      	ldr	r3, [r7, #0]
 8013a92:	781b      	ldrb	r3, [r3, #0]
 8013a94:	00da      	lsls	r2, r3, #3
 8013a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a98:	18d3      	adds	r3, r2, r3
 8013a9a:	4a6d      	ldr	r2, [pc, #436]	@ (8013c50 <USB_EPStartXfer+0x750>)
 8013a9c:	4694      	mov	ip, r2
 8013a9e:	4463      	add	r3, ip
 8013aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8013aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013aa4:	881b      	ldrh	r3, [r3, #0]
 8013aa6:	b29b      	uxth	r3, r3
 8013aa8:	059b      	lsls	r3, r3, #22
 8013aaa:	0d9b      	lsrs	r3, r3, #22
 8013aac:	b29a      	uxth	r2, r3
 8013aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ab0:	801a      	strh	r2, [r3, #0]
 8013ab2:	1d7b      	adds	r3, r7, #5
 8013ab4:	33ff      	adds	r3, #255	@ 0xff
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	2b3e      	cmp	r3, #62	@ 0x3e
 8013aba:	d922      	bls.n	8013b02 <USB_EPStartXfer+0x602>
 8013abc:	1d7b      	adds	r3, r7, #5
 8013abe:	33ff      	adds	r3, #255	@ 0xff
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	095b      	lsrs	r3, r3, #5
 8013ac4:	21f4      	movs	r1, #244	@ 0xf4
 8013ac6:	187a      	adds	r2, r7, r1
 8013ac8:	6013      	str	r3, [r2, #0]
 8013aca:	1d7b      	adds	r3, r7, #5
 8013acc:	33ff      	adds	r3, #255	@ 0xff
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	221f      	movs	r2, #31
 8013ad2:	4013      	ands	r3, r2
 8013ad4:	d104      	bne.n	8013ae0 <USB_EPStartXfer+0x5e0>
 8013ad6:	187b      	adds	r3, r7, r1
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	3b01      	subs	r3, #1
 8013adc:	187a      	adds	r2, r7, r1
 8013ade:	6013      	str	r3, [r2, #0]
 8013ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ae2:	881b      	ldrh	r3, [r3, #0]
 8013ae4:	b29a      	uxth	r2, r3
 8013ae6:	23f4      	movs	r3, #244	@ 0xf4
 8013ae8:	18fb      	adds	r3, r7, r3
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	b29b      	uxth	r3, r3
 8013aee:	029b      	lsls	r3, r3, #10
 8013af0:	b29b      	uxth	r3, r3
 8013af2:	4313      	orrs	r3, r2
 8013af4:	b29b      	uxth	r3, r3
 8013af6:	4a55      	ldr	r2, [pc, #340]	@ (8013c4c <USB_EPStartXfer+0x74c>)
 8013af8:	4313      	orrs	r3, r2
 8013afa:	b29a      	uxth	r2, r3
 8013afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013afe:	801a      	strh	r2, [r3, #0]
 8013b00:	e048      	b.n	8013b94 <USB_EPStartXfer+0x694>
 8013b02:	1d7b      	adds	r3, r7, #5
 8013b04:	33ff      	adds	r3, #255	@ 0xff
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d108      	bne.n	8013b1e <USB_EPStartXfer+0x61e>
 8013b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b0e:	881b      	ldrh	r3, [r3, #0]
 8013b10:	b29b      	uxth	r3, r3
 8013b12:	4a4e      	ldr	r2, [pc, #312]	@ (8013c4c <USB_EPStartXfer+0x74c>)
 8013b14:	4313      	orrs	r3, r2
 8013b16:	b29a      	uxth	r2, r3
 8013b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b1a:	801a      	strh	r2, [r3, #0]
 8013b1c:	e03a      	b.n	8013b94 <USB_EPStartXfer+0x694>
 8013b1e:	1d7b      	adds	r3, r7, #5
 8013b20:	33ff      	adds	r3, #255	@ 0xff
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	085b      	lsrs	r3, r3, #1
 8013b26:	21f4      	movs	r1, #244	@ 0xf4
 8013b28:	187a      	adds	r2, r7, r1
 8013b2a:	6013      	str	r3, [r2, #0]
 8013b2c:	1d7b      	adds	r3, r7, #5
 8013b2e:	33ff      	adds	r3, #255	@ 0xff
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	2201      	movs	r2, #1
 8013b34:	4013      	ands	r3, r2
 8013b36:	d004      	beq.n	8013b42 <USB_EPStartXfer+0x642>
 8013b38:	187b      	adds	r3, r7, r1
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	3301      	adds	r3, #1
 8013b3e:	187a      	adds	r2, r7, r1
 8013b40:	6013      	str	r3, [r2, #0]
 8013b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b44:	881b      	ldrh	r3, [r3, #0]
 8013b46:	b29a      	uxth	r2, r3
 8013b48:	23f4      	movs	r3, #244	@ 0xf4
 8013b4a:	18fb      	adds	r3, r7, r3
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	b29b      	uxth	r3, r3
 8013b50:	029b      	lsls	r3, r3, #10
 8013b52:	b29b      	uxth	r3, r3
 8013b54:	4313      	orrs	r3, r2
 8013b56:	b29a      	uxth	r2, r3
 8013b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b5a:	801a      	strh	r2, [r3, #0]
 8013b5c:	e01a      	b.n	8013b94 <USB_EPStartXfer+0x694>
 8013b5e:	683b      	ldr	r3, [r7, #0]
 8013b60:	785b      	ldrb	r3, [r3, #1]
 8013b62:	2b01      	cmp	r3, #1
 8013b64:	d116      	bne.n	8013b94 <USB_EPStartXfer+0x694>
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	2250      	movs	r2, #80	@ 0x50
 8013b6a:	5a9b      	ldrh	r3, [r3, r2]
 8013b6c:	b29b      	uxth	r3, r3
 8013b6e:	001a      	movs	r2, r3
 8013b70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013b72:	189b      	adds	r3, r3, r2
 8013b74:	643b      	str	r3, [r7, #64]	@ 0x40
 8013b76:	683b      	ldr	r3, [r7, #0]
 8013b78:	781b      	ldrb	r3, [r3, #0]
 8013b7a:	00da      	lsls	r2, r3, #3
 8013b7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013b7e:	18d3      	adds	r3, r2, r3
 8013b80:	4a33      	ldr	r2, [pc, #204]	@ (8013c50 <USB_EPStartXfer+0x750>)
 8013b82:	4694      	mov	ip, r2
 8013b84:	4463      	add	r3, ip
 8013b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013b88:	1d7b      	adds	r3, r7, #5
 8013b8a:	33ff      	adds	r3, #255	@ 0xff
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	b29a      	uxth	r2, r3
 8013b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013b92:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8013b94:	2076      	movs	r0, #118	@ 0x76
 8013b96:	183b      	adds	r3, r7, r0
 8013b98:	683a      	ldr	r2, [r7, #0]
 8013b9a:	8952      	ldrh	r2, [r2, #10]
 8013b9c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013b9e:	683b      	ldr	r3, [r7, #0]
 8013ba0:	6959      	ldr	r1, [r3, #20]
 8013ba2:	1d7b      	adds	r3, r7, #5
 8013ba4:	33ff      	adds	r3, #255	@ 0xff
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	b29c      	uxth	r4, r3
 8013baa:	183b      	adds	r3, r7, r0
 8013bac:	881a      	ldrh	r2, [r3, #0]
 8013bae:	6878      	ldr	r0, [r7, #4]
 8013bb0:	0023      	movs	r3, r4
 8013bb2:	f000 ff17 	bl	80149e4 <USB_WritePMA>
 8013bb6:	e1b6      	b.n	8013f26 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8013bb8:	683b      	ldr	r3, [r7, #0]
 8013bba:	6a1b      	ldr	r3, [r3, #32]
 8013bbc:	1d7a      	adds	r2, r7, #5
 8013bbe:	32ff      	adds	r2, #255	@ 0xff
 8013bc0:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8013bc2:	687a      	ldr	r2, [r7, #4]
 8013bc4:	683b      	ldr	r3, [r7, #0]
 8013bc6:	781b      	ldrb	r3, [r3, #0]
 8013bc8:	009b      	lsls	r3, r3, #2
 8013bca:	18d3      	adds	r3, r2, r3
 8013bcc:	881b      	ldrh	r3, [r3, #0]
 8013bce:	b29a      	uxth	r2, r3
 8013bd0:	2062      	movs	r0, #98	@ 0x62
 8013bd2:	183b      	adds	r3, r7, r0
 8013bd4:	491f      	ldr	r1, [pc, #124]	@ (8013c54 <USB_EPStartXfer+0x754>)
 8013bd6:	400a      	ands	r2, r1
 8013bd8:	801a      	strh	r2, [r3, #0]
 8013bda:	687a      	ldr	r2, [r7, #4]
 8013bdc:	683b      	ldr	r3, [r7, #0]
 8013bde:	781b      	ldrb	r3, [r3, #0]
 8013be0:	009b      	lsls	r3, r3, #2
 8013be2:	18d3      	adds	r3, r2, r3
 8013be4:	183a      	adds	r2, r7, r0
 8013be6:	8812      	ldrh	r2, [r2, #0]
 8013be8:	491b      	ldr	r1, [pc, #108]	@ (8013c58 <USB_EPStartXfer+0x758>)
 8013bea:	430a      	orrs	r2, r1
 8013bec:	b292      	uxth	r2, r2
 8013bee:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	2250      	movs	r2, #80	@ 0x50
 8013bf8:	5a9b      	ldrh	r3, [r3, r2]
 8013bfa:	b29b      	uxth	r3, r3
 8013bfc:	001a      	movs	r2, r3
 8013bfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013c00:	189b      	adds	r3, r3, r2
 8013c02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013c04:	683b      	ldr	r3, [r7, #0]
 8013c06:	781b      	ldrb	r3, [r3, #0]
 8013c08:	00da      	lsls	r2, r3, #3
 8013c0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013c0c:	18d3      	adds	r3, r2, r3
 8013c0e:	4a0e      	ldr	r2, [pc, #56]	@ (8013c48 <USB_EPStartXfer+0x748>)
 8013c10:	4694      	mov	ip, r2
 8013c12:	4463      	add	r3, ip
 8013c14:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013c16:	1d7b      	adds	r3, r7, #5
 8013c18:	33ff      	adds	r3, #255	@ 0xff
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	b29a      	uxth	r2, r3
 8013c1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013c20:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8013c22:	2076      	movs	r0, #118	@ 0x76
 8013c24:	183b      	adds	r3, r7, r0
 8013c26:	683a      	ldr	r2, [r7, #0]
 8013c28:	8912      	ldrh	r2, [r2, #8]
 8013c2a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013c2c:	683b      	ldr	r3, [r7, #0]
 8013c2e:	6959      	ldr	r1, [r3, #20]
 8013c30:	1d7b      	adds	r3, r7, #5
 8013c32:	33ff      	adds	r3, #255	@ 0xff
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	b29c      	uxth	r4, r3
 8013c38:	183b      	adds	r3, r7, r0
 8013c3a:	881a      	ldrh	r2, [r3, #0]
 8013c3c:	6878      	ldr	r0, [r7, #4]
 8013c3e:	0023      	movs	r3, r4
 8013c40:	f000 fed0 	bl	80149e4 <USB_WritePMA>
 8013c44:	e16f      	b.n	8013f26 <USB_EPStartXfer+0xa26>
 8013c46:	46c0      	nop			@ (mov r8, r8)
 8013c48:	00000402 	.word	0x00000402
 8013c4c:	ffff8000 	.word	0xffff8000
 8013c50:	00000406 	.word	0x00000406
 8013c54:	ffff8e8f 	.word	0xffff8e8f
 8013c58:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8013c5c:	683b      	ldr	r3, [r7, #0]
 8013c5e:	6a1a      	ldr	r2, [r3, #32]
 8013c60:	1d7b      	adds	r3, r7, #5
 8013c62:	33ff      	adds	r3, #255	@ 0xff
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	1ad2      	subs	r2, r2, r3
 8013c68:	683b      	ldr	r3, [r7, #0]
 8013c6a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8013c6c:	687a      	ldr	r2, [r7, #4]
 8013c6e:	683b      	ldr	r3, [r7, #0]
 8013c70:	781b      	ldrb	r3, [r3, #0]
 8013c72:	009b      	lsls	r3, r3, #2
 8013c74:	18d3      	adds	r3, r2, r3
 8013c76:	881b      	ldrh	r3, [r3, #0]
 8013c78:	b29b      	uxth	r3, r3
 8013c7a:	001a      	movs	r2, r3
 8013c7c:	2340      	movs	r3, #64	@ 0x40
 8013c7e:	4013      	ands	r3, r2
 8013c80:	d100      	bne.n	8013c84 <USB_EPStartXfer+0x784>
 8013c82:	e0a4      	b.n	8013dce <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	673b      	str	r3, [r7, #112]	@ 0x70
 8013c88:	683b      	ldr	r3, [r7, #0]
 8013c8a:	785b      	ldrb	r3, [r3, #1]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d000      	beq.n	8013c92 <USB_EPStartXfer+0x792>
 8013c90:	e070      	b.n	8013d74 <USB_EPStartXfer+0x874>
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	2250      	movs	r2, #80	@ 0x50
 8013c9a:	5a9b      	ldrh	r3, [r3, r2]
 8013c9c:	b29b      	uxth	r3, r3
 8013c9e:	001a      	movs	r2, r3
 8013ca0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013ca2:	189b      	adds	r3, r3, r2
 8013ca4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013ca6:	683b      	ldr	r3, [r7, #0]
 8013ca8:	781b      	ldrb	r3, [r3, #0]
 8013caa:	00da      	lsls	r2, r3, #3
 8013cac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013cae:	18d3      	adds	r3, r2, r3
 8013cb0:	4abc      	ldr	r2, [pc, #752]	@ (8013fa4 <USB_EPStartXfer+0xaa4>)
 8013cb2:	4694      	mov	ip, r2
 8013cb4:	4463      	add	r3, ip
 8013cb6:	667b      	str	r3, [r7, #100]	@ 0x64
 8013cb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013cba:	881b      	ldrh	r3, [r3, #0]
 8013cbc:	b29b      	uxth	r3, r3
 8013cbe:	059b      	lsls	r3, r3, #22
 8013cc0:	0d9b      	lsrs	r3, r3, #22
 8013cc2:	b29a      	uxth	r2, r3
 8013cc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013cc6:	801a      	strh	r2, [r3, #0]
 8013cc8:	1d7b      	adds	r3, r7, #5
 8013cca:	33ff      	adds	r3, #255	@ 0xff
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	2b3e      	cmp	r3, #62	@ 0x3e
 8013cd0:	d922      	bls.n	8013d18 <USB_EPStartXfer+0x818>
 8013cd2:	1d7b      	adds	r3, r7, #5
 8013cd4:	33ff      	adds	r3, #255	@ 0xff
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	095b      	lsrs	r3, r3, #5
 8013cda:	21f0      	movs	r1, #240	@ 0xf0
 8013cdc:	187a      	adds	r2, r7, r1
 8013cde:	6013      	str	r3, [r2, #0]
 8013ce0:	1d7b      	adds	r3, r7, #5
 8013ce2:	33ff      	adds	r3, #255	@ 0xff
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	221f      	movs	r2, #31
 8013ce8:	4013      	ands	r3, r2
 8013cea:	d104      	bne.n	8013cf6 <USB_EPStartXfer+0x7f6>
 8013cec:	187b      	adds	r3, r7, r1
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	3b01      	subs	r3, #1
 8013cf2:	187a      	adds	r2, r7, r1
 8013cf4:	6013      	str	r3, [r2, #0]
 8013cf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013cf8:	881b      	ldrh	r3, [r3, #0]
 8013cfa:	b29a      	uxth	r2, r3
 8013cfc:	23f0      	movs	r3, #240	@ 0xf0
 8013cfe:	18fb      	adds	r3, r7, r3
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	b29b      	uxth	r3, r3
 8013d04:	029b      	lsls	r3, r3, #10
 8013d06:	b29b      	uxth	r3, r3
 8013d08:	4313      	orrs	r3, r2
 8013d0a:	b29b      	uxth	r3, r3
 8013d0c:	4aa6      	ldr	r2, [pc, #664]	@ (8013fa8 <USB_EPStartXfer+0xaa8>)
 8013d0e:	4313      	orrs	r3, r2
 8013d10:	b29a      	uxth	r2, r3
 8013d12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013d14:	801a      	strh	r2, [r3, #0]
 8013d16:	e048      	b.n	8013daa <USB_EPStartXfer+0x8aa>
 8013d18:	1d7b      	adds	r3, r7, #5
 8013d1a:	33ff      	adds	r3, #255	@ 0xff
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d108      	bne.n	8013d34 <USB_EPStartXfer+0x834>
 8013d22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013d24:	881b      	ldrh	r3, [r3, #0]
 8013d26:	b29b      	uxth	r3, r3
 8013d28:	4a9f      	ldr	r2, [pc, #636]	@ (8013fa8 <USB_EPStartXfer+0xaa8>)
 8013d2a:	4313      	orrs	r3, r2
 8013d2c:	b29a      	uxth	r2, r3
 8013d2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013d30:	801a      	strh	r2, [r3, #0]
 8013d32:	e03a      	b.n	8013daa <USB_EPStartXfer+0x8aa>
 8013d34:	1d7b      	adds	r3, r7, #5
 8013d36:	33ff      	adds	r3, #255	@ 0xff
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	085b      	lsrs	r3, r3, #1
 8013d3c:	21f0      	movs	r1, #240	@ 0xf0
 8013d3e:	187a      	adds	r2, r7, r1
 8013d40:	6013      	str	r3, [r2, #0]
 8013d42:	1d7b      	adds	r3, r7, #5
 8013d44:	33ff      	adds	r3, #255	@ 0xff
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	2201      	movs	r2, #1
 8013d4a:	4013      	ands	r3, r2
 8013d4c:	d004      	beq.n	8013d58 <USB_EPStartXfer+0x858>
 8013d4e:	187b      	adds	r3, r7, r1
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	3301      	adds	r3, #1
 8013d54:	187a      	adds	r2, r7, r1
 8013d56:	6013      	str	r3, [r2, #0]
 8013d58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013d5a:	881b      	ldrh	r3, [r3, #0]
 8013d5c:	b29a      	uxth	r2, r3
 8013d5e:	23f0      	movs	r3, #240	@ 0xf0
 8013d60:	18fb      	adds	r3, r7, r3
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	b29b      	uxth	r3, r3
 8013d66:	029b      	lsls	r3, r3, #10
 8013d68:	b29b      	uxth	r3, r3
 8013d6a:	4313      	orrs	r3, r2
 8013d6c:	b29a      	uxth	r2, r3
 8013d6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013d70:	801a      	strh	r2, [r3, #0]
 8013d72:	e01a      	b.n	8013daa <USB_EPStartXfer+0x8aa>
 8013d74:	683b      	ldr	r3, [r7, #0]
 8013d76:	785b      	ldrb	r3, [r3, #1]
 8013d78:	2b01      	cmp	r3, #1
 8013d7a:	d116      	bne.n	8013daa <USB_EPStartXfer+0x8aa>
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	2250      	movs	r2, #80	@ 0x50
 8013d80:	5a9b      	ldrh	r3, [r3, r2]
 8013d82:	b29b      	uxth	r3, r3
 8013d84:	001a      	movs	r2, r3
 8013d86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013d88:	189b      	adds	r3, r3, r2
 8013d8a:	673b      	str	r3, [r7, #112]	@ 0x70
 8013d8c:	683b      	ldr	r3, [r7, #0]
 8013d8e:	781b      	ldrb	r3, [r3, #0]
 8013d90:	00da      	lsls	r2, r3, #3
 8013d92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013d94:	18d3      	adds	r3, r2, r3
 8013d96:	4a83      	ldr	r2, [pc, #524]	@ (8013fa4 <USB_EPStartXfer+0xaa4>)
 8013d98:	4694      	mov	ip, r2
 8013d9a:	4463      	add	r3, ip
 8013d9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013d9e:	1d7b      	adds	r3, r7, #5
 8013da0:	33ff      	adds	r3, #255	@ 0xff
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	b29a      	uxth	r2, r3
 8013da6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013da8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8013daa:	2076      	movs	r0, #118	@ 0x76
 8013dac:	183b      	adds	r3, r7, r0
 8013dae:	683a      	ldr	r2, [r7, #0]
 8013db0:	8952      	ldrh	r2, [r2, #10]
 8013db2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013db4:	683b      	ldr	r3, [r7, #0]
 8013db6:	6959      	ldr	r1, [r3, #20]
 8013db8:	1d7b      	adds	r3, r7, #5
 8013dba:	33ff      	adds	r3, #255	@ 0xff
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	b29c      	uxth	r4, r3
 8013dc0:	183b      	adds	r3, r7, r0
 8013dc2:	881a      	ldrh	r2, [r3, #0]
 8013dc4:	6878      	ldr	r0, [r7, #4]
 8013dc6:	0023      	movs	r3, r4
 8013dc8:	f000 fe0c 	bl	80149e4 <USB_WritePMA>
 8013dcc:	e0ab      	b.n	8013f26 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013dce:	683b      	ldr	r3, [r7, #0]
 8013dd0:	785b      	ldrb	r3, [r3, #1]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d000      	beq.n	8013dd8 <USB_EPStartXfer+0x8d8>
 8013dd6:	e070      	b.n	8013eba <USB_EPStartXfer+0x9ba>
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	2250      	movs	r2, #80	@ 0x50
 8013de0:	5a9b      	ldrh	r3, [r3, r2]
 8013de2:	b29b      	uxth	r3, r3
 8013de4:	001a      	movs	r2, r3
 8013de6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013de8:	189b      	adds	r3, r3, r2
 8013dea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013dec:	683b      	ldr	r3, [r7, #0]
 8013dee:	781b      	ldrb	r3, [r3, #0]
 8013df0:	00da      	lsls	r2, r3, #3
 8013df2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013df4:	18d3      	adds	r3, r2, r3
 8013df6:	4a6d      	ldr	r2, [pc, #436]	@ (8013fac <USB_EPStartXfer+0xaac>)
 8013df8:	4694      	mov	ip, r2
 8013dfa:	4463      	add	r3, ip
 8013dfc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013dfe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013e00:	881b      	ldrh	r3, [r3, #0]
 8013e02:	b29b      	uxth	r3, r3
 8013e04:	059b      	lsls	r3, r3, #22
 8013e06:	0d9b      	lsrs	r3, r3, #22
 8013e08:	b29a      	uxth	r2, r3
 8013e0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013e0c:	801a      	strh	r2, [r3, #0]
 8013e0e:	1d7b      	adds	r3, r7, #5
 8013e10:	33ff      	adds	r3, #255	@ 0xff
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	2b3e      	cmp	r3, #62	@ 0x3e
 8013e16:	d922      	bls.n	8013e5e <USB_EPStartXfer+0x95e>
 8013e18:	1d7b      	adds	r3, r7, #5
 8013e1a:	33ff      	adds	r3, #255	@ 0xff
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	095b      	lsrs	r3, r3, #5
 8013e20:	21ec      	movs	r1, #236	@ 0xec
 8013e22:	187a      	adds	r2, r7, r1
 8013e24:	6013      	str	r3, [r2, #0]
 8013e26:	1d7b      	adds	r3, r7, #5
 8013e28:	33ff      	adds	r3, #255	@ 0xff
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	221f      	movs	r2, #31
 8013e2e:	4013      	ands	r3, r2
 8013e30:	d104      	bne.n	8013e3c <USB_EPStartXfer+0x93c>
 8013e32:	187b      	adds	r3, r7, r1
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	3b01      	subs	r3, #1
 8013e38:	187a      	adds	r2, r7, r1
 8013e3a:	6013      	str	r3, [r2, #0]
 8013e3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013e3e:	881b      	ldrh	r3, [r3, #0]
 8013e40:	b29a      	uxth	r2, r3
 8013e42:	23ec      	movs	r3, #236	@ 0xec
 8013e44:	18fb      	adds	r3, r7, r3
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	b29b      	uxth	r3, r3
 8013e4a:	029b      	lsls	r3, r3, #10
 8013e4c:	b29b      	uxth	r3, r3
 8013e4e:	4313      	orrs	r3, r2
 8013e50:	b29b      	uxth	r3, r3
 8013e52:	4a55      	ldr	r2, [pc, #340]	@ (8013fa8 <USB_EPStartXfer+0xaa8>)
 8013e54:	4313      	orrs	r3, r2
 8013e56:	b29a      	uxth	r2, r3
 8013e58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013e5a:	801a      	strh	r2, [r3, #0]
 8013e5c:	e052      	b.n	8013f04 <USB_EPStartXfer+0xa04>
 8013e5e:	1d7b      	adds	r3, r7, #5
 8013e60:	33ff      	adds	r3, #255	@ 0xff
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d108      	bne.n	8013e7a <USB_EPStartXfer+0x97a>
 8013e68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013e6a:	881b      	ldrh	r3, [r3, #0]
 8013e6c:	b29b      	uxth	r3, r3
 8013e6e:	4a4e      	ldr	r2, [pc, #312]	@ (8013fa8 <USB_EPStartXfer+0xaa8>)
 8013e70:	4313      	orrs	r3, r2
 8013e72:	b29a      	uxth	r2, r3
 8013e74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013e76:	801a      	strh	r2, [r3, #0]
 8013e78:	e044      	b.n	8013f04 <USB_EPStartXfer+0xa04>
 8013e7a:	1d7b      	adds	r3, r7, #5
 8013e7c:	33ff      	adds	r3, #255	@ 0xff
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	085b      	lsrs	r3, r3, #1
 8013e82:	21ec      	movs	r1, #236	@ 0xec
 8013e84:	187a      	adds	r2, r7, r1
 8013e86:	6013      	str	r3, [r2, #0]
 8013e88:	1d7b      	adds	r3, r7, #5
 8013e8a:	33ff      	adds	r3, #255	@ 0xff
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	2201      	movs	r2, #1
 8013e90:	4013      	ands	r3, r2
 8013e92:	d004      	beq.n	8013e9e <USB_EPStartXfer+0x99e>
 8013e94:	187b      	adds	r3, r7, r1
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	3301      	adds	r3, #1
 8013e9a:	187a      	adds	r2, r7, r1
 8013e9c:	6013      	str	r3, [r2, #0]
 8013e9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013ea0:	881b      	ldrh	r3, [r3, #0]
 8013ea2:	b29a      	uxth	r2, r3
 8013ea4:	23ec      	movs	r3, #236	@ 0xec
 8013ea6:	18fb      	adds	r3, r7, r3
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	b29b      	uxth	r3, r3
 8013eac:	029b      	lsls	r3, r3, #10
 8013eae:	b29b      	uxth	r3, r3
 8013eb0:	4313      	orrs	r3, r2
 8013eb2:	b29a      	uxth	r2, r3
 8013eb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013eb6:	801a      	strh	r2, [r3, #0]
 8013eb8:	e024      	b.n	8013f04 <USB_EPStartXfer+0xa04>
 8013eba:	683b      	ldr	r3, [r7, #0]
 8013ebc:	785b      	ldrb	r3, [r3, #1]
 8013ebe:	2b01      	cmp	r3, #1
 8013ec0:	d120      	bne.n	8013f04 <USB_EPStartXfer+0xa04>
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	2184      	movs	r1, #132	@ 0x84
 8013ec6:	187a      	adds	r2, r7, r1
 8013ec8:	6013      	str	r3, [r2, #0]
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	2250      	movs	r2, #80	@ 0x50
 8013ece:	5a9b      	ldrh	r3, [r3, r2]
 8013ed0:	b29b      	uxth	r3, r3
 8013ed2:	001a      	movs	r2, r3
 8013ed4:	187b      	adds	r3, r7, r1
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	189b      	adds	r3, r3, r2
 8013eda:	187a      	adds	r2, r7, r1
 8013edc:	6013      	str	r3, [r2, #0]
 8013ede:	683b      	ldr	r3, [r7, #0]
 8013ee0:	781b      	ldrb	r3, [r3, #0]
 8013ee2:	00da      	lsls	r2, r3, #3
 8013ee4:	187b      	adds	r3, r7, r1
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	18d3      	adds	r3, r2, r3
 8013eea:	4a30      	ldr	r2, [pc, #192]	@ (8013fac <USB_EPStartXfer+0xaac>)
 8013eec:	4694      	mov	ip, r2
 8013eee:	4463      	add	r3, ip
 8013ef0:	2180      	movs	r1, #128	@ 0x80
 8013ef2:	187a      	adds	r2, r7, r1
 8013ef4:	6013      	str	r3, [r2, #0]
 8013ef6:	1d7b      	adds	r3, r7, #5
 8013ef8:	33ff      	adds	r3, #255	@ 0xff
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	b29a      	uxth	r2, r3
 8013efe:	187b      	adds	r3, r7, r1
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8013f04:	2076      	movs	r0, #118	@ 0x76
 8013f06:	183b      	adds	r3, r7, r0
 8013f08:	683a      	ldr	r2, [r7, #0]
 8013f0a:	8912      	ldrh	r2, [r2, #8]
 8013f0c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013f0e:	683b      	ldr	r3, [r7, #0]
 8013f10:	6959      	ldr	r1, [r3, #20]
 8013f12:	1d7b      	adds	r3, r7, #5
 8013f14:	33ff      	adds	r3, #255	@ 0xff
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	b29c      	uxth	r4, r3
 8013f1a:	183b      	adds	r3, r7, r0
 8013f1c:	881a      	ldrh	r2, [r3, #0]
 8013f1e:	6878      	ldr	r0, [r7, #4]
 8013f20:	0023      	movs	r3, r4
 8013f22:	f000 fd5f 	bl	80149e4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8013f26:	687a      	ldr	r2, [r7, #4]
 8013f28:	683b      	ldr	r3, [r7, #0]
 8013f2a:	781b      	ldrb	r3, [r3, #0]
 8013f2c:	009b      	lsls	r3, r3, #2
 8013f2e:	18d3      	adds	r3, r2, r3
 8013f30:	881b      	ldrh	r3, [r3, #0]
 8013f32:	b29a      	uxth	r2, r3
 8013f34:	200a      	movs	r0, #10
 8013f36:	183b      	adds	r3, r7, r0
 8013f38:	491d      	ldr	r1, [pc, #116]	@ (8013fb0 <USB_EPStartXfer+0xab0>)
 8013f3a:	400a      	ands	r2, r1
 8013f3c:	801a      	strh	r2, [r3, #0]
 8013f3e:	183b      	adds	r3, r7, r0
 8013f40:	183a      	adds	r2, r7, r0
 8013f42:	8812      	ldrh	r2, [r2, #0]
 8013f44:	2110      	movs	r1, #16
 8013f46:	404a      	eors	r2, r1
 8013f48:	801a      	strh	r2, [r3, #0]
 8013f4a:	183b      	adds	r3, r7, r0
 8013f4c:	183a      	adds	r2, r7, r0
 8013f4e:	8812      	ldrh	r2, [r2, #0]
 8013f50:	2120      	movs	r1, #32
 8013f52:	404a      	eors	r2, r1
 8013f54:	801a      	strh	r2, [r3, #0]
 8013f56:	687a      	ldr	r2, [r7, #4]
 8013f58:	683b      	ldr	r3, [r7, #0]
 8013f5a:	781b      	ldrb	r3, [r3, #0]
 8013f5c:	009b      	lsls	r3, r3, #2
 8013f5e:	18d3      	adds	r3, r2, r3
 8013f60:	183a      	adds	r2, r7, r0
 8013f62:	8812      	ldrh	r2, [r2, #0]
 8013f64:	4913      	ldr	r1, [pc, #76]	@ (8013fb4 <USB_EPStartXfer+0xab4>)
 8013f66:	430a      	orrs	r2, r1
 8013f68:	b292      	uxth	r2, r2
 8013f6a:	801a      	strh	r2, [r3, #0]
 8013f6c:	f000 fbf4 	bl	8014758 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8013f70:	683b      	ldr	r3, [r7, #0]
 8013f72:	7b1b      	ldrb	r3, [r3, #12]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d000      	beq.n	8013f7a <USB_EPStartXfer+0xa7a>
 8013f78:	e0a9      	b.n	80140ce <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8013f7a:	683b      	ldr	r3, [r7, #0]
 8013f7c:	699a      	ldr	r2, [r3, #24]
 8013f7e:	683b      	ldr	r3, [r7, #0]
 8013f80:	691b      	ldr	r3, [r3, #16]
 8013f82:	429a      	cmp	r2, r3
 8013f84:	d918      	bls.n	8013fb8 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8013f86:	683b      	ldr	r3, [r7, #0]
 8013f88:	691b      	ldr	r3, [r3, #16]
 8013f8a:	1d7a      	adds	r2, r7, #5
 8013f8c:	32ff      	adds	r2, #255	@ 0xff
 8013f8e:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8013f90:	683b      	ldr	r3, [r7, #0]
 8013f92:	699a      	ldr	r2, [r3, #24]
 8013f94:	1d7b      	adds	r3, r7, #5
 8013f96:	33ff      	adds	r3, #255	@ 0xff
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	1ad2      	subs	r2, r2, r3
 8013f9c:	683b      	ldr	r3, [r7, #0]
 8013f9e:	619a      	str	r2, [r3, #24]
 8013fa0:	e012      	b.n	8013fc8 <USB_EPStartXfer+0xac8>
 8013fa2:	46c0      	nop			@ (mov r8, r8)
 8013fa4:	00000406 	.word	0x00000406
 8013fa8:	ffff8000 	.word	0xffff8000
 8013fac:	00000402 	.word	0x00000402
 8013fb0:	ffff8fbf 	.word	0xffff8fbf
 8013fb4:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8013fb8:	683b      	ldr	r3, [r7, #0]
 8013fba:	699b      	ldr	r3, [r3, #24]
 8013fbc:	1d7a      	adds	r2, r7, #5
 8013fbe:	32ff      	adds	r2, #255	@ 0xff
 8013fc0:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8013fc2:	683b      	ldr	r3, [r7, #0]
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	2190      	movs	r1, #144	@ 0x90
 8013fcc:	187a      	adds	r2, r7, r1
 8013fce:	6013      	str	r3, [r2, #0]
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	2250      	movs	r2, #80	@ 0x50
 8013fd4:	5a9b      	ldrh	r3, [r3, r2]
 8013fd6:	b29b      	uxth	r3, r3
 8013fd8:	001a      	movs	r2, r3
 8013fda:	187b      	adds	r3, r7, r1
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	189b      	adds	r3, r3, r2
 8013fe0:	187a      	adds	r2, r7, r1
 8013fe2:	6013      	str	r3, [r2, #0]
 8013fe4:	683b      	ldr	r3, [r7, #0]
 8013fe6:	781b      	ldrb	r3, [r3, #0]
 8013fe8:	00da      	lsls	r2, r3, #3
 8013fea:	187b      	adds	r3, r7, r1
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	18d3      	adds	r3, r2, r3
 8013ff0:	4acf      	ldr	r2, [pc, #828]	@ (8014330 <USB_EPStartXfer+0xe30>)
 8013ff2:	4694      	mov	ip, r2
 8013ff4:	4463      	add	r3, ip
 8013ff6:	218c      	movs	r1, #140	@ 0x8c
 8013ff8:	187a      	adds	r2, r7, r1
 8013ffa:	6013      	str	r3, [r2, #0]
 8013ffc:	187b      	adds	r3, r7, r1
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	881b      	ldrh	r3, [r3, #0]
 8014002:	b29b      	uxth	r3, r3
 8014004:	059b      	lsls	r3, r3, #22
 8014006:	0d9b      	lsrs	r3, r3, #22
 8014008:	b29a      	uxth	r2, r3
 801400a:	187b      	adds	r3, r7, r1
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	801a      	strh	r2, [r3, #0]
 8014010:	1d7b      	adds	r3, r7, #5
 8014012:	33ff      	adds	r3, #255	@ 0xff
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	2b3e      	cmp	r3, #62	@ 0x3e
 8014018:	d925      	bls.n	8014066 <USB_EPStartXfer+0xb66>
 801401a:	1d7b      	adds	r3, r7, #5
 801401c:	33ff      	adds	r3, #255	@ 0xff
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	095b      	lsrs	r3, r3, #5
 8014022:	21e8      	movs	r1, #232	@ 0xe8
 8014024:	187a      	adds	r2, r7, r1
 8014026:	6013      	str	r3, [r2, #0]
 8014028:	1d7b      	adds	r3, r7, #5
 801402a:	33ff      	adds	r3, #255	@ 0xff
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	221f      	movs	r2, #31
 8014030:	4013      	ands	r3, r2
 8014032:	d104      	bne.n	801403e <USB_EPStartXfer+0xb3e>
 8014034:	187b      	adds	r3, r7, r1
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	3b01      	subs	r3, #1
 801403a:	187a      	adds	r2, r7, r1
 801403c:	6013      	str	r3, [r2, #0]
 801403e:	218c      	movs	r1, #140	@ 0x8c
 8014040:	187b      	adds	r3, r7, r1
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	881b      	ldrh	r3, [r3, #0]
 8014046:	b29a      	uxth	r2, r3
 8014048:	23e8      	movs	r3, #232	@ 0xe8
 801404a:	18fb      	adds	r3, r7, r3
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	b29b      	uxth	r3, r3
 8014050:	029b      	lsls	r3, r3, #10
 8014052:	b29b      	uxth	r3, r3
 8014054:	4313      	orrs	r3, r2
 8014056:	b29b      	uxth	r3, r3
 8014058:	4ab6      	ldr	r2, [pc, #728]	@ (8014334 <USB_EPStartXfer+0xe34>)
 801405a:	4313      	orrs	r3, r2
 801405c:	b29a      	uxth	r2, r3
 801405e:	187b      	adds	r3, r7, r1
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	801a      	strh	r2, [r3, #0]
 8014064:	e353      	b.n	801470e <USB_EPStartXfer+0x120e>
 8014066:	1d7b      	adds	r3, r7, #5
 8014068:	33ff      	adds	r3, #255	@ 0xff
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d10b      	bne.n	8014088 <USB_EPStartXfer+0xb88>
 8014070:	218c      	movs	r1, #140	@ 0x8c
 8014072:	187b      	adds	r3, r7, r1
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	881b      	ldrh	r3, [r3, #0]
 8014078:	b29b      	uxth	r3, r3
 801407a:	4aae      	ldr	r2, [pc, #696]	@ (8014334 <USB_EPStartXfer+0xe34>)
 801407c:	4313      	orrs	r3, r2
 801407e:	b29a      	uxth	r2, r3
 8014080:	187b      	adds	r3, r7, r1
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	801a      	strh	r2, [r3, #0]
 8014086:	e342      	b.n	801470e <USB_EPStartXfer+0x120e>
 8014088:	1d7b      	adds	r3, r7, #5
 801408a:	33ff      	adds	r3, #255	@ 0xff
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	085b      	lsrs	r3, r3, #1
 8014090:	21e8      	movs	r1, #232	@ 0xe8
 8014092:	187a      	adds	r2, r7, r1
 8014094:	6013      	str	r3, [r2, #0]
 8014096:	1d7b      	adds	r3, r7, #5
 8014098:	33ff      	adds	r3, #255	@ 0xff
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	2201      	movs	r2, #1
 801409e:	4013      	ands	r3, r2
 80140a0:	d004      	beq.n	80140ac <USB_EPStartXfer+0xbac>
 80140a2:	187b      	adds	r3, r7, r1
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	3301      	adds	r3, #1
 80140a8:	187a      	adds	r2, r7, r1
 80140aa:	6013      	str	r3, [r2, #0]
 80140ac:	218c      	movs	r1, #140	@ 0x8c
 80140ae:	187b      	adds	r3, r7, r1
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	881b      	ldrh	r3, [r3, #0]
 80140b4:	b29a      	uxth	r2, r3
 80140b6:	23e8      	movs	r3, #232	@ 0xe8
 80140b8:	18fb      	adds	r3, r7, r3
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	b29b      	uxth	r3, r3
 80140be:	029b      	lsls	r3, r3, #10
 80140c0:	b29b      	uxth	r3, r3
 80140c2:	4313      	orrs	r3, r2
 80140c4:	b29a      	uxth	r2, r3
 80140c6:	187b      	adds	r3, r7, r1
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	801a      	strh	r2, [r3, #0]
 80140cc:	e31f      	b.n	801470e <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80140ce:	683b      	ldr	r3, [r7, #0]
 80140d0:	78db      	ldrb	r3, [r3, #3]
 80140d2:	2b02      	cmp	r3, #2
 80140d4:	d000      	beq.n	80140d8 <USB_EPStartXfer+0xbd8>
 80140d6:	e191      	b.n	80143fc <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80140d8:	683b      	ldr	r3, [r7, #0]
 80140da:	785b      	ldrb	r3, [r3, #1]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d000      	beq.n	80140e2 <USB_EPStartXfer+0xbe2>
 80140e0:	e07c      	b.n	80141dc <USB_EPStartXfer+0xcdc>
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	21ac      	movs	r1, #172	@ 0xac
 80140e6:	187a      	adds	r2, r7, r1
 80140e8:	6013      	str	r3, [r2, #0]
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	2250      	movs	r2, #80	@ 0x50
 80140ee:	5a9b      	ldrh	r3, [r3, r2]
 80140f0:	b29b      	uxth	r3, r3
 80140f2:	001a      	movs	r2, r3
 80140f4:	187b      	adds	r3, r7, r1
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	189b      	adds	r3, r3, r2
 80140fa:	187a      	adds	r2, r7, r1
 80140fc:	6013      	str	r3, [r2, #0]
 80140fe:	683b      	ldr	r3, [r7, #0]
 8014100:	781b      	ldrb	r3, [r3, #0]
 8014102:	00da      	lsls	r2, r3, #3
 8014104:	187b      	adds	r3, r7, r1
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	18d3      	adds	r3, r2, r3
 801410a:	4a8b      	ldr	r2, [pc, #556]	@ (8014338 <USB_EPStartXfer+0xe38>)
 801410c:	4694      	mov	ip, r2
 801410e:	4463      	add	r3, ip
 8014110:	21a8      	movs	r1, #168	@ 0xa8
 8014112:	187a      	adds	r2, r7, r1
 8014114:	6013      	str	r3, [r2, #0]
 8014116:	187b      	adds	r3, r7, r1
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	881b      	ldrh	r3, [r3, #0]
 801411c:	b29b      	uxth	r3, r3
 801411e:	059b      	lsls	r3, r3, #22
 8014120:	0d9b      	lsrs	r3, r3, #22
 8014122:	b29a      	uxth	r2, r3
 8014124:	187b      	adds	r3, r7, r1
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	801a      	strh	r2, [r3, #0]
 801412a:	683b      	ldr	r3, [r7, #0]
 801412c:	691b      	ldr	r3, [r3, #16]
 801412e:	2b3e      	cmp	r3, #62	@ 0x3e
 8014130:	d923      	bls.n	801417a <USB_EPStartXfer+0xc7a>
 8014132:	683b      	ldr	r3, [r7, #0]
 8014134:	691b      	ldr	r3, [r3, #16]
 8014136:	095b      	lsrs	r3, r3, #5
 8014138:	21e4      	movs	r1, #228	@ 0xe4
 801413a:	187a      	adds	r2, r7, r1
 801413c:	6013      	str	r3, [r2, #0]
 801413e:	683b      	ldr	r3, [r7, #0]
 8014140:	691b      	ldr	r3, [r3, #16]
 8014142:	221f      	movs	r2, #31
 8014144:	4013      	ands	r3, r2
 8014146:	d104      	bne.n	8014152 <USB_EPStartXfer+0xc52>
 8014148:	187b      	adds	r3, r7, r1
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	3b01      	subs	r3, #1
 801414e:	187a      	adds	r2, r7, r1
 8014150:	6013      	str	r3, [r2, #0]
 8014152:	21a8      	movs	r1, #168	@ 0xa8
 8014154:	187b      	adds	r3, r7, r1
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	881b      	ldrh	r3, [r3, #0]
 801415a:	b29a      	uxth	r2, r3
 801415c:	23e4      	movs	r3, #228	@ 0xe4
 801415e:	18fb      	adds	r3, r7, r3
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	b29b      	uxth	r3, r3
 8014164:	029b      	lsls	r3, r3, #10
 8014166:	b29b      	uxth	r3, r3
 8014168:	4313      	orrs	r3, r2
 801416a:	b29b      	uxth	r3, r3
 801416c:	4a71      	ldr	r2, [pc, #452]	@ (8014334 <USB_EPStartXfer+0xe34>)
 801416e:	4313      	orrs	r3, r2
 8014170:	b29a      	uxth	r2, r3
 8014172:	187b      	adds	r3, r7, r1
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	801a      	strh	r2, [r3, #0]
 8014178:	e054      	b.n	8014224 <USB_EPStartXfer+0xd24>
 801417a:	683b      	ldr	r3, [r7, #0]
 801417c:	691b      	ldr	r3, [r3, #16]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d10b      	bne.n	801419a <USB_EPStartXfer+0xc9a>
 8014182:	21a8      	movs	r1, #168	@ 0xa8
 8014184:	187b      	adds	r3, r7, r1
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	881b      	ldrh	r3, [r3, #0]
 801418a:	b29b      	uxth	r3, r3
 801418c:	4a69      	ldr	r2, [pc, #420]	@ (8014334 <USB_EPStartXfer+0xe34>)
 801418e:	4313      	orrs	r3, r2
 8014190:	b29a      	uxth	r2, r3
 8014192:	187b      	adds	r3, r7, r1
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	801a      	strh	r2, [r3, #0]
 8014198:	e044      	b.n	8014224 <USB_EPStartXfer+0xd24>
 801419a:	683b      	ldr	r3, [r7, #0]
 801419c:	691b      	ldr	r3, [r3, #16]
 801419e:	085b      	lsrs	r3, r3, #1
 80141a0:	21e4      	movs	r1, #228	@ 0xe4
 80141a2:	187a      	adds	r2, r7, r1
 80141a4:	6013      	str	r3, [r2, #0]
 80141a6:	683b      	ldr	r3, [r7, #0]
 80141a8:	691b      	ldr	r3, [r3, #16]
 80141aa:	2201      	movs	r2, #1
 80141ac:	4013      	ands	r3, r2
 80141ae:	d004      	beq.n	80141ba <USB_EPStartXfer+0xcba>
 80141b0:	187b      	adds	r3, r7, r1
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	3301      	adds	r3, #1
 80141b6:	187a      	adds	r2, r7, r1
 80141b8:	6013      	str	r3, [r2, #0]
 80141ba:	21a8      	movs	r1, #168	@ 0xa8
 80141bc:	187b      	adds	r3, r7, r1
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	881b      	ldrh	r3, [r3, #0]
 80141c2:	b29a      	uxth	r2, r3
 80141c4:	23e4      	movs	r3, #228	@ 0xe4
 80141c6:	18fb      	adds	r3, r7, r3
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	b29b      	uxth	r3, r3
 80141cc:	029b      	lsls	r3, r3, #10
 80141ce:	b29b      	uxth	r3, r3
 80141d0:	4313      	orrs	r3, r2
 80141d2:	b29a      	uxth	r2, r3
 80141d4:	187b      	adds	r3, r7, r1
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	801a      	strh	r2, [r3, #0]
 80141da:	e023      	b.n	8014224 <USB_EPStartXfer+0xd24>
 80141dc:	683b      	ldr	r3, [r7, #0]
 80141de:	785b      	ldrb	r3, [r3, #1]
 80141e0:	2b01      	cmp	r3, #1
 80141e2:	d11f      	bne.n	8014224 <USB_EPStartXfer+0xd24>
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	21b4      	movs	r1, #180	@ 0xb4
 80141e8:	187a      	adds	r2, r7, r1
 80141ea:	6013      	str	r3, [r2, #0]
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	2250      	movs	r2, #80	@ 0x50
 80141f0:	5a9b      	ldrh	r3, [r3, r2]
 80141f2:	b29b      	uxth	r3, r3
 80141f4:	001a      	movs	r2, r3
 80141f6:	187b      	adds	r3, r7, r1
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	189b      	adds	r3, r3, r2
 80141fc:	187a      	adds	r2, r7, r1
 80141fe:	6013      	str	r3, [r2, #0]
 8014200:	683b      	ldr	r3, [r7, #0]
 8014202:	781b      	ldrb	r3, [r3, #0]
 8014204:	00da      	lsls	r2, r3, #3
 8014206:	187b      	adds	r3, r7, r1
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	18d3      	adds	r3, r2, r3
 801420c:	4a4a      	ldr	r2, [pc, #296]	@ (8014338 <USB_EPStartXfer+0xe38>)
 801420e:	4694      	mov	ip, r2
 8014210:	4463      	add	r3, ip
 8014212:	21b0      	movs	r1, #176	@ 0xb0
 8014214:	187a      	adds	r2, r7, r1
 8014216:	6013      	str	r3, [r2, #0]
 8014218:	683b      	ldr	r3, [r7, #0]
 801421a:	691b      	ldr	r3, [r3, #16]
 801421c:	b29a      	uxth	r2, r3
 801421e:	187b      	adds	r3, r7, r1
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	801a      	strh	r2, [r3, #0]
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	22a4      	movs	r2, #164	@ 0xa4
 8014228:	18ba      	adds	r2, r7, r2
 801422a:	6013      	str	r3, [r2, #0]
 801422c:	683b      	ldr	r3, [r7, #0]
 801422e:	785b      	ldrb	r3, [r3, #1]
 8014230:	2b00      	cmp	r3, #0
 8014232:	d000      	beq.n	8014236 <USB_EPStartXfer+0xd36>
 8014234:	e082      	b.n	801433c <USB_EPStartXfer+0xe3c>
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	219c      	movs	r1, #156	@ 0x9c
 801423a:	187a      	adds	r2, r7, r1
 801423c:	6013      	str	r3, [r2, #0]
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	2250      	movs	r2, #80	@ 0x50
 8014242:	5a9b      	ldrh	r3, [r3, r2]
 8014244:	b29b      	uxth	r3, r3
 8014246:	001a      	movs	r2, r3
 8014248:	187b      	adds	r3, r7, r1
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	189b      	adds	r3, r3, r2
 801424e:	187a      	adds	r2, r7, r1
 8014250:	6013      	str	r3, [r2, #0]
 8014252:	683b      	ldr	r3, [r7, #0]
 8014254:	781b      	ldrb	r3, [r3, #0]
 8014256:	00da      	lsls	r2, r3, #3
 8014258:	187b      	adds	r3, r7, r1
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	18d3      	adds	r3, r2, r3
 801425e:	4a34      	ldr	r2, [pc, #208]	@ (8014330 <USB_EPStartXfer+0xe30>)
 8014260:	4694      	mov	ip, r2
 8014262:	4463      	add	r3, ip
 8014264:	2198      	movs	r1, #152	@ 0x98
 8014266:	187a      	adds	r2, r7, r1
 8014268:	6013      	str	r3, [r2, #0]
 801426a:	187b      	adds	r3, r7, r1
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	881b      	ldrh	r3, [r3, #0]
 8014270:	b29b      	uxth	r3, r3
 8014272:	059b      	lsls	r3, r3, #22
 8014274:	0d9b      	lsrs	r3, r3, #22
 8014276:	b29a      	uxth	r2, r3
 8014278:	187b      	adds	r3, r7, r1
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	801a      	strh	r2, [r3, #0]
 801427e:	683b      	ldr	r3, [r7, #0]
 8014280:	691b      	ldr	r3, [r3, #16]
 8014282:	2b3e      	cmp	r3, #62	@ 0x3e
 8014284:	d923      	bls.n	80142ce <USB_EPStartXfer+0xdce>
 8014286:	683b      	ldr	r3, [r7, #0]
 8014288:	691b      	ldr	r3, [r3, #16]
 801428a:	095b      	lsrs	r3, r3, #5
 801428c:	21e0      	movs	r1, #224	@ 0xe0
 801428e:	187a      	adds	r2, r7, r1
 8014290:	6013      	str	r3, [r2, #0]
 8014292:	683b      	ldr	r3, [r7, #0]
 8014294:	691b      	ldr	r3, [r3, #16]
 8014296:	221f      	movs	r2, #31
 8014298:	4013      	ands	r3, r2
 801429a:	d104      	bne.n	80142a6 <USB_EPStartXfer+0xda6>
 801429c:	187b      	adds	r3, r7, r1
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	3b01      	subs	r3, #1
 80142a2:	187a      	adds	r2, r7, r1
 80142a4:	6013      	str	r3, [r2, #0]
 80142a6:	2198      	movs	r1, #152	@ 0x98
 80142a8:	187b      	adds	r3, r7, r1
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	881b      	ldrh	r3, [r3, #0]
 80142ae:	b29a      	uxth	r2, r3
 80142b0:	23e0      	movs	r3, #224	@ 0xe0
 80142b2:	18fb      	adds	r3, r7, r3
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	b29b      	uxth	r3, r3
 80142b8:	029b      	lsls	r3, r3, #10
 80142ba:	b29b      	uxth	r3, r3
 80142bc:	4313      	orrs	r3, r2
 80142be:	b29b      	uxth	r3, r3
 80142c0:	4a1c      	ldr	r2, [pc, #112]	@ (8014334 <USB_EPStartXfer+0xe34>)
 80142c2:	4313      	orrs	r3, r2
 80142c4:	b29a      	uxth	r2, r3
 80142c6:	187b      	adds	r3, r7, r1
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	801a      	strh	r2, [r3, #0]
 80142cc:	e057      	b.n	801437e <USB_EPStartXfer+0xe7e>
 80142ce:	683b      	ldr	r3, [r7, #0]
 80142d0:	691b      	ldr	r3, [r3, #16]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d10b      	bne.n	80142ee <USB_EPStartXfer+0xdee>
 80142d6:	2198      	movs	r1, #152	@ 0x98
 80142d8:	187b      	adds	r3, r7, r1
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	881b      	ldrh	r3, [r3, #0]
 80142de:	b29b      	uxth	r3, r3
 80142e0:	4a14      	ldr	r2, [pc, #80]	@ (8014334 <USB_EPStartXfer+0xe34>)
 80142e2:	4313      	orrs	r3, r2
 80142e4:	b29a      	uxth	r2, r3
 80142e6:	187b      	adds	r3, r7, r1
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	801a      	strh	r2, [r3, #0]
 80142ec:	e047      	b.n	801437e <USB_EPStartXfer+0xe7e>
 80142ee:	683b      	ldr	r3, [r7, #0]
 80142f0:	691b      	ldr	r3, [r3, #16]
 80142f2:	085b      	lsrs	r3, r3, #1
 80142f4:	21e0      	movs	r1, #224	@ 0xe0
 80142f6:	187a      	adds	r2, r7, r1
 80142f8:	6013      	str	r3, [r2, #0]
 80142fa:	683b      	ldr	r3, [r7, #0]
 80142fc:	691b      	ldr	r3, [r3, #16]
 80142fe:	2201      	movs	r2, #1
 8014300:	4013      	ands	r3, r2
 8014302:	d004      	beq.n	801430e <USB_EPStartXfer+0xe0e>
 8014304:	187b      	adds	r3, r7, r1
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	3301      	adds	r3, #1
 801430a:	187a      	adds	r2, r7, r1
 801430c:	6013      	str	r3, [r2, #0]
 801430e:	2198      	movs	r1, #152	@ 0x98
 8014310:	187b      	adds	r3, r7, r1
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	881b      	ldrh	r3, [r3, #0]
 8014316:	b29a      	uxth	r2, r3
 8014318:	23e0      	movs	r3, #224	@ 0xe0
 801431a:	18fb      	adds	r3, r7, r3
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	b29b      	uxth	r3, r3
 8014320:	029b      	lsls	r3, r3, #10
 8014322:	b29b      	uxth	r3, r3
 8014324:	4313      	orrs	r3, r2
 8014326:	b29a      	uxth	r2, r3
 8014328:	187b      	adds	r3, r7, r1
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	801a      	strh	r2, [r3, #0]
 801432e:	e026      	b.n	801437e <USB_EPStartXfer+0xe7e>
 8014330:	00000406 	.word	0x00000406
 8014334:	ffff8000 	.word	0xffff8000
 8014338:	00000402 	.word	0x00000402
 801433c:	683b      	ldr	r3, [r7, #0]
 801433e:	785b      	ldrb	r3, [r3, #1]
 8014340:	2b01      	cmp	r3, #1
 8014342:	d11c      	bne.n	801437e <USB_EPStartXfer+0xe7e>
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	2250      	movs	r2, #80	@ 0x50
 8014348:	5a9b      	ldrh	r3, [r3, r2]
 801434a:	b29b      	uxth	r3, r3
 801434c:	001a      	movs	r2, r3
 801434e:	21a4      	movs	r1, #164	@ 0xa4
 8014350:	187b      	adds	r3, r7, r1
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	189b      	adds	r3, r3, r2
 8014356:	187a      	adds	r2, r7, r1
 8014358:	6013      	str	r3, [r2, #0]
 801435a:	683b      	ldr	r3, [r7, #0]
 801435c:	781b      	ldrb	r3, [r3, #0]
 801435e:	00da      	lsls	r2, r3, #3
 8014360:	187b      	adds	r3, r7, r1
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	18d3      	adds	r3, r2, r3
 8014366:	4ad2      	ldr	r2, [pc, #840]	@ (80146b0 <USB_EPStartXfer+0x11b0>)
 8014368:	4694      	mov	ip, r2
 801436a:	4463      	add	r3, ip
 801436c:	21a0      	movs	r1, #160	@ 0xa0
 801436e:	187a      	adds	r2, r7, r1
 8014370:	6013      	str	r3, [r2, #0]
 8014372:	683b      	ldr	r3, [r7, #0]
 8014374:	691b      	ldr	r3, [r3, #16]
 8014376:	b29a      	uxth	r2, r3
 8014378:	187b      	adds	r3, r7, r1
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801437e:	683b      	ldr	r3, [r7, #0]
 8014380:	69db      	ldr	r3, [r3, #28]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d100      	bne.n	8014388 <USB_EPStartXfer+0xe88>
 8014386:	e1c2      	b.n	801470e <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8014388:	687a      	ldr	r2, [r7, #4]
 801438a:	683b      	ldr	r3, [r7, #0]
 801438c:	781b      	ldrb	r3, [r3, #0]
 801438e:	009b      	lsls	r3, r3, #2
 8014390:	18d2      	adds	r2, r2, r3
 8014392:	2196      	movs	r1, #150	@ 0x96
 8014394:	187b      	adds	r3, r7, r1
 8014396:	8812      	ldrh	r2, [r2, #0]
 8014398:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801439a:	187b      	adds	r3, r7, r1
 801439c:	881a      	ldrh	r2, [r3, #0]
 801439e:	2380      	movs	r3, #128	@ 0x80
 80143a0:	01db      	lsls	r3, r3, #7
 80143a2:	4013      	ands	r3, r2
 80143a4:	d004      	beq.n	80143b0 <USB_EPStartXfer+0xeb0>
 80143a6:	187b      	adds	r3, r7, r1
 80143a8:	881b      	ldrh	r3, [r3, #0]
 80143aa:	2240      	movs	r2, #64	@ 0x40
 80143ac:	4013      	ands	r3, r2
 80143ae:	d10d      	bne.n	80143cc <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80143b0:	2196      	movs	r1, #150	@ 0x96
 80143b2:	187b      	adds	r3, r7, r1
 80143b4:	881a      	ldrh	r2, [r3, #0]
 80143b6:	2380      	movs	r3, #128	@ 0x80
 80143b8:	01db      	lsls	r3, r3, #7
 80143ba:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80143bc:	d000      	beq.n	80143c0 <USB_EPStartXfer+0xec0>
 80143be:	e1a6      	b.n	801470e <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80143c0:	187b      	adds	r3, r7, r1
 80143c2:	881b      	ldrh	r3, [r3, #0]
 80143c4:	2240      	movs	r2, #64	@ 0x40
 80143c6:	4013      	ands	r3, r2
 80143c8:	d000      	beq.n	80143cc <USB_EPStartXfer+0xecc>
 80143ca:	e1a0      	b.n	801470e <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80143cc:	687a      	ldr	r2, [r7, #4]
 80143ce:	683b      	ldr	r3, [r7, #0]
 80143d0:	781b      	ldrb	r3, [r3, #0]
 80143d2:	009b      	lsls	r3, r3, #2
 80143d4:	18d3      	adds	r3, r2, r3
 80143d6:	881b      	ldrh	r3, [r3, #0]
 80143d8:	b29a      	uxth	r2, r3
 80143da:	2094      	movs	r0, #148	@ 0x94
 80143dc:	183b      	adds	r3, r7, r0
 80143de:	49b5      	ldr	r1, [pc, #724]	@ (80146b4 <USB_EPStartXfer+0x11b4>)
 80143e0:	400a      	ands	r2, r1
 80143e2:	801a      	strh	r2, [r3, #0]
 80143e4:	687a      	ldr	r2, [r7, #4]
 80143e6:	683b      	ldr	r3, [r7, #0]
 80143e8:	781b      	ldrb	r3, [r3, #0]
 80143ea:	009b      	lsls	r3, r3, #2
 80143ec:	18d3      	adds	r3, r2, r3
 80143ee:	183a      	adds	r2, r7, r0
 80143f0:	8812      	ldrh	r2, [r2, #0]
 80143f2:	49b1      	ldr	r1, [pc, #708]	@ (80146b8 <USB_EPStartXfer+0x11b8>)
 80143f4:	430a      	orrs	r2, r1
 80143f6:	b292      	uxth	r2, r2
 80143f8:	801a      	strh	r2, [r3, #0]
 80143fa:	e188      	b.n	801470e <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80143fc:	683b      	ldr	r3, [r7, #0]
 80143fe:	78db      	ldrb	r3, [r3, #3]
 8014400:	2b01      	cmp	r3, #1
 8014402:	d000      	beq.n	8014406 <USB_EPStartXfer+0xf06>
 8014404:	e181      	b.n	801470a <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8014406:	683b      	ldr	r3, [r7, #0]
 8014408:	699a      	ldr	r2, [r3, #24]
 801440a:	683b      	ldr	r3, [r7, #0]
 801440c:	691b      	ldr	r3, [r3, #16]
 801440e:	429a      	cmp	r2, r3
 8014410:	d90d      	bls.n	801442e <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8014412:	683b      	ldr	r3, [r7, #0]
 8014414:	691b      	ldr	r3, [r3, #16]
 8014416:	1d7a      	adds	r2, r7, #5
 8014418:	32ff      	adds	r2, #255	@ 0xff
 801441a:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801441c:	683b      	ldr	r3, [r7, #0]
 801441e:	699a      	ldr	r2, [r3, #24]
 8014420:	1d7b      	adds	r3, r7, #5
 8014422:	33ff      	adds	r3, #255	@ 0xff
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	1ad2      	subs	r2, r2, r3
 8014428:	683b      	ldr	r3, [r7, #0]
 801442a:	619a      	str	r2, [r3, #24]
 801442c:	e007      	b.n	801443e <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801442e:	683b      	ldr	r3, [r7, #0]
 8014430:	699b      	ldr	r3, [r3, #24]
 8014432:	1d7a      	adds	r2, r7, #5
 8014434:	32ff      	adds	r2, #255	@ 0xff
 8014436:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8014438:	683b      	ldr	r3, [r7, #0]
 801443a:	2200      	movs	r2, #0
 801443c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801443e:	683b      	ldr	r3, [r7, #0]
 8014440:	785b      	ldrb	r3, [r3, #1]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d000      	beq.n	8014448 <USB_EPStartXfer+0xf48>
 8014446:	e082      	b.n	801454e <USB_EPStartXfer+0x104e>
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	21cc      	movs	r1, #204	@ 0xcc
 801444c:	187a      	adds	r2, r7, r1
 801444e:	6013      	str	r3, [r2, #0]
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	2250      	movs	r2, #80	@ 0x50
 8014454:	5a9b      	ldrh	r3, [r3, r2]
 8014456:	b29b      	uxth	r3, r3
 8014458:	001a      	movs	r2, r3
 801445a:	187b      	adds	r3, r7, r1
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	189b      	adds	r3, r3, r2
 8014460:	187a      	adds	r2, r7, r1
 8014462:	6013      	str	r3, [r2, #0]
 8014464:	683b      	ldr	r3, [r7, #0]
 8014466:	781b      	ldrb	r3, [r3, #0]
 8014468:	00da      	lsls	r2, r3, #3
 801446a:	187b      	adds	r3, r7, r1
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	18d3      	adds	r3, r2, r3
 8014470:	4a92      	ldr	r2, [pc, #584]	@ (80146bc <USB_EPStartXfer+0x11bc>)
 8014472:	4694      	mov	ip, r2
 8014474:	4463      	add	r3, ip
 8014476:	21c8      	movs	r1, #200	@ 0xc8
 8014478:	187a      	adds	r2, r7, r1
 801447a:	6013      	str	r3, [r2, #0]
 801447c:	187b      	adds	r3, r7, r1
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	881b      	ldrh	r3, [r3, #0]
 8014482:	b29b      	uxth	r3, r3
 8014484:	059b      	lsls	r3, r3, #22
 8014486:	0d9b      	lsrs	r3, r3, #22
 8014488:	b29a      	uxth	r2, r3
 801448a:	187b      	adds	r3, r7, r1
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	801a      	strh	r2, [r3, #0]
 8014490:	1d7b      	adds	r3, r7, #5
 8014492:	33ff      	adds	r3, #255	@ 0xff
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	2b3e      	cmp	r3, #62	@ 0x3e
 8014498:	d925      	bls.n	80144e6 <USB_EPStartXfer+0xfe6>
 801449a:	1d7b      	adds	r3, r7, #5
 801449c:	33ff      	adds	r3, #255	@ 0xff
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	095b      	lsrs	r3, r3, #5
 80144a2:	21dc      	movs	r1, #220	@ 0xdc
 80144a4:	187a      	adds	r2, r7, r1
 80144a6:	6013      	str	r3, [r2, #0]
 80144a8:	1d7b      	adds	r3, r7, #5
 80144aa:	33ff      	adds	r3, #255	@ 0xff
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	221f      	movs	r2, #31
 80144b0:	4013      	ands	r3, r2
 80144b2:	d104      	bne.n	80144be <USB_EPStartXfer+0xfbe>
 80144b4:	187b      	adds	r3, r7, r1
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	3b01      	subs	r3, #1
 80144ba:	187a      	adds	r2, r7, r1
 80144bc:	6013      	str	r3, [r2, #0]
 80144be:	21c8      	movs	r1, #200	@ 0xc8
 80144c0:	187b      	adds	r3, r7, r1
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	881b      	ldrh	r3, [r3, #0]
 80144c6:	b29a      	uxth	r2, r3
 80144c8:	23dc      	movs	r3, #220	@ 0xdc
 80144ca:	18fb      	adds	r3, r7, r3
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	b29b      	uxth	r3, r3
 80144d0:	029b      	lsls	r3, r3, #10
 80144d2:	b29b      	uxth	r3, r3
 80144d4:	4313      	orrs	r3, r2
 80144d6:	b29b      	uxth	r3, r3
 80144d8:	4a79      	ldr	r2, [pc, #484]	@ (80146c0 <USB_EPStartXfer+0x11c0>)
 80144da:	4313      	orrs	r3, r2
 80144dc:	b29a      	uxth	r2, r3
 80144de:	187b      	adds	r3, r7, r1
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	801a      	strh	r2, [r3, #0]
 80144e4:	e058      	b.n	8014598 <USB_EPStartXfer+0x1098>
 80144e6:	1d7b      	adds	r3, r7, #5
 80144e8:	33ff      	adds	r3, #255	@ 0xff
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d10b      	bne.n	8014508 <USB_EPStartXfer+0x1008>
 80144f0:	21c8      	movs	r1, #200	@ 0xc8
 80144f2:	187b      	adds	r3, r7, r1
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	881b      	ldrh	r3, [r3, #0]
 80144f8:	b29b      	uxth	r3, r3
 80144fa:	4a71      	ldr	r2, [pc, #452]	@ (80146c0 <USB_EPStartXfer+0x11c0>)
 80144fc:	4313      	orrs	r3, r2
 80144fe:	b29a      	uxth	r2, r3
 8014500:	187b      	adds	r3, r7, r1
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	801a      	strh	r2, [r3, #0]
 8014506:	e047      	b.n	8014598 <USB_EPStartXfer+0x1098>
 8014508:	1d7b      	adds	r3, r7, #5
 801450a:	33ff      	adds	r3, #255	@ 0xff
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	085b      	lsrs	r3, r3, #1
 8014510:	21dc      	movs	r1, #220	@ 0xdc
 8014512:	187a      	adds	r2, r7, r1
 8014514:	6013      	str	r3, [r2, #0]
 8014516:	1d7b      	adds	r3, r7, #5
 8014518:	33ff      	adds	r3, #255	@ 0xff
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	2201      	movs	r2, #1
 801451e:	4013      	ands	r3, r2
 8014520:	d004      	beq.n	801452c <USB_EPStartXfer+0x102c>
 8014522:	187b      	adds	r3, r7, r1
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	3301      	adds	r3, #1
 8014528:	187a      	adds	r2, r7, r1
 801452a:	6013      	str	r3, [r2, #0]
 801452c:	21c8      	movs	r1, #200	@ 0xc8
 801452e:	187b      	adds	r3, r7, r1
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	881b      	ldrh	r3, [r3, #0]
 8014534:	b29a      	uxth	r2, r3
 8014536:	23dc      	movs	r3, #220	@ 0xdc
 8014538:	18fb      	adds	r3, r7, r3
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	b29b      	uxth	r3, r3
 801453e:	029b      	lsls	r3, r3, #10
 8014540:	b29b      	uxth	r3, r3
 8014542:	4313      	orrs	r3, r2
 8014544:	b29a      	uxth	r2, r3
 8014546:	187b      	adds	r3, r7, r1
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	801a      	strh	r2, [r3, #0]
 801454c:	e024      	b.n	8014598 <USB_EPStartXfer+0x1098>
 801454e:	683b      	ldr	r3, [r7, #0]
 8014550:	785b      	ldrb	r3, [r3, #1]
 8014552:	2b01      	cmp	r3, #1
 8014554:	d120      	bne.n	8014598 <USB_EPStartXfer+0x1098>
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	21d4      	movs	r1, #212	@ 0xd4
 801455a:	187a      	adds	r2, r7, r1
 801455c:	6013      	str	r3, [r2, #0]
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	2250      	movs	r2, #80	@ 0x50
 8014562:	5a9b      	ldrh	r3, [r3, r2]
 8014564:	b29b      	uxth	r3, r3
 8014566:	001a      	movs	r2, r3
 8014568:	187b      	adds	r3, r7, r1
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	189b      	adds	r3, r3, r2
 801456e:	187a      	adds	r2, r7, r1
 8014570:	6013      	str	r3, [r2, #0]
 8014572:	683b      	ldr	r3, [r7, #0]
 8014574:	781b      	ldrb	r3, [r3, #0]
 8014576:	00da      	lsls	r2, r3, #3
 8014578:	187b      	adds	r3, r7, r1
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	18d3      	adds	r3, r2, r3
 801457e:	4a4f      	ldr	r2, [pc, #316]	@ (80146bc <USB_EPStartXfer+0x11bc>)
 8014580:	4694      	mov	ip, r2
 8014582:	4463      	add	r3, ip
 8014584:	21d0      	movs	r1, #208	@ 0xd0
 8014586:	187a      	adds	r2, r7, r1
 8014588:	6013      	str	r3, [r2, #0]
 801458a:	1d7b      	adds	r3, r7, #5
 801458c:	33ff      	adds	r3, #255	@ 0xff
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	b29a      	uxth	r2, r3
 8014592:	187b      	adds	r3, r7, r1
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	801a      	strh	r2, [r3, #0]
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	22c4      	movs	r2, #196	@ 0xc4
 801459c:	18ba      	adds	r2, r7, r2
 801459e:	6013      	str	r3, [r2, #0]
 80145a0:	683b      	ldr	r3, [r7, #0]
 80145a2:	785b      	ldrb	r3, [r3, #1]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d000      	beq.n	80145aa <USB_EPStartXfer+0x10aa>
 80145a8:	e08c      	b.n	80146c4 <USB_EPStartXfer+0x11c4>
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	21bc      	movs	r1, #188	@ 0xbc
 80145ae:	187a      	adds	r2, r7, r1
 80145b0:	6013      	str	r3, [r2, #0]
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	2250      	movs	r2, #80	@ 0x50
 80145b6:	5a9b      	ldrh	r3, [r3, r2]
 80145b8:	b29b      	uxth	r3, r3
 80145ba:	001a      	movs	r2, r3
 80145bc:	187b      	adds	r3, r7, r1
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	189b      	adds	r3, r3, r2
 80145c2:	187a      	adds	r2, r7, r1
 80145c4:	6013      	str	r3, [r2, #0]
 80145c6:	683b      	ldr	r3, [r7, #0]
 80145c8:	781b      	ldrb	r3, [r3, #0]
 80145ca:	00da      	lsls	r2, r3, #3
 80145cc:	187b      	adds	r3, r7, r1
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	18d3      	adds	r3, r2, r3
 80145d2:	4a37      	ldr	r2, [pc, #220]	@ (80146b0 <USB_EPStartXfer+0x11b0>)
 80145d4:	4694      	mov	ip, r2
 80145d6:	4463      	add	r3, ip
 80145d8:	21b8      	movs	r1, #184	@ 0xb8
 80145da:	187a      	adds	r2, r7, r1
 80145dc:	6013      	str	r3, [r2, #0]
 80145de:	187b      	adds	r3, r7, r1
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	881b      	ldrh	r3, [r3, #0]
 80145e4:	b29b      	uxth	r3, r3
 80145e6:	059b      	lsls	r3, r3, #22
 80145e8:	0d9b      	lsrs	r3, r3, #22
 80145ea:	b29a      	uxth	r2, r3
 80145ec:	187b      	adds	r3, r7, r1
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	801a      	strh	r2, [r3, #0]
 80145f2:	1d7b      	adds	r3, r7, #5
 80145f4:	33ff      	adds	r3, #255	@ 0xff
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80145fa:	d925      	bls.n	8014648 <USB_EPStartXfer+0x1148>
 80145fc:	1d7b      	adds	r3, r7, #5
 80145fe:	33ff      	adds	r3, #255	@ 0xff
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	095b      	lsrs	r3, r3, #5
 8014604:	21d8      	movs	r1, #216	@ 0xd8
 8014606:	187a      	adds	r2, r7, r1
 8014608:	6013      	str	r3, [r2, #0]
 801460a:	1d7b      	adds	r3, r7, #5
 801460c:	33ff      	adds	r3, #255	@ 0xff
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	221f      	movs	r2, #31
 8014612:	4013      	ands	r3, r2
 8014614:	d104      	bne.n	8014620 <USB_EPStartXfer+0x1120>
 8014616:	187b      	adds	r3, r7, r1
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	3b01      	subs	r3, #1
 801461c:	187a      	adds	r2, r7, r1
 801461e:	6013      	str	r3, [r2, #0]
 8014620:	21b8      	movs	r1, #184	@ 0xb8
 8014622:	187b      	adds	r3, r7, r1
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	881b      	ldrh	r3, [r3, #0]
 8014628:	b29a      	uxth	r2, r3
 801462a:	23d8      	movs	r3, #216	@ 0xd8
 801462c:	18fb      	adds	r3, r7, r3
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	b29b      	uxth	r3, r3
 8014632:	029b      	lsls	r3, r3, #10
 8014634:	b29b      	uxth	r3, r3
 8014636:	4313      	orrs	r3, r2
 8014638:	b29b      	uxth	r3, r3
 801463a:	4a21      	ldr	r2, [pc, #132]	@ (80146c0 <USB_EPStartXfer+0x11c0>)
 801463c:	4313      	orrs	r3, r2
 801463e:	b29a      	uxth	r2, r3
 8014640:	187b      	adds	r3, r7, r1
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	801a      	strh	r2, [r3, #0]
 8014646:	e062      	b.n	801470e <USB_EPStartXfer+0x120e>
 8014648:	1d7b      	adds	r3, r7, #5
 801464a:	33ff      	adds	r3, #255	@ 0xff
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d10b      	bne.n	801466a <USB_EPStartXfer+0x116a>
 8014652:	21b8      	movs	r1, #184	@ 0xb8
 8014654:	187b      	adds	r3, r7, r1
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	881b      	ldrh	r3, [r3, #0]
 801465a:	b29b      	uxth	r3, r3
 801465c:	4a18      	ldr	r2, [pc, #96]	@ (80146c0 <USB_EPStartXfer+0x11c0>)
 801465e:	4313      	orrs	r3, r2
 8014660:	b29a      	uxth	r2, r3
 8014662:	187b      	adds	r3, r7, r1
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	801a      	strh	r2, [r3, #0]
 8014668:	e051      	b.n	801470e <USB_EPStartXfer+0x120e>
 801466a:	1d7b      	adds	r3, r7, #5
 801466c:	33ff      	adds	r3, #255	@ 0xff
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	085b      	lsrs	r3, r3, #1
 8014672:	21d8      	movs	r1, #216	@ 0xd8
 8014674:	187a      	adds	r2, r7, r1
 8014676:	6013      	str	r3, [r2, #0]
 8014678:	1d7b      	adds	r3, r7, #5
 801467a:	33ff      	adds	r3, #255	@ 0xff
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	2201      	movs	r2, #1
 8014680:	4013      	ands	r3, r2
 8014682:	d004      	beq.n	801468e <USB_EPStartXfer+0x118e>
 8014684:	187b      	adds	r3, r7, r1
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	3301      	adds	r3, #1
 801468a:	187a      	adds	r2, r7, r1
 801468c:	6013      	str	r3, [r2, #0]
 801468e:	21b8      	movs	r1, #184	@ 0xb8
 8014690:	187b      	adds	r3, r7, r1
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	881b      	ldrh	r3, [r3, #0]
 8014696:	b29a      	uxth	r2, r3
 8014698:	23d8      	movs	r3, #216	@ 0xd8
 801469a:	18fb      	adds	r3, r7, r3
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	b29b      	uxth	r3, r3
 80146a0:	029b      	lsls	r3, r3, #10
 80146a2:	b29b      	uxth	r3, r3
 80146a4:	4313      	orrs	r3, r2
 80146a6:	b29a      	uxth	r2, r3
 80146a8:	187b      	adds	r3, r7, r1
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	801a      	strh	r2, [r3, #0]
 80146ae:	e02e      	b.n	801470e <USB_EPStartXfer+0x120e>
 80146b0:	00000406 	.word	0x00000406
 80146b4:	ffff8f8f 	.word	0xffff8f8f
 80146b8:	ffff80c0 	.word	0xffff80c0
 80146bc:	00000402 	.word	0x00000402
 80146c0:	ffff8000 	.word	0xffff8000
 80146c4:	683b      	ldr	r3, [r7, #0]
 80146c6:	785b      	ldrb	r3, [r3, #1]
 80146c8:	2b01      	cmp	r3, #1
 80146ca:	d120      	bne.n	801470e <USB_EPStartXfer+0x120e>
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	2250      	movs	r2, #80	@ 0x50
 80146d0:	5a9b      	ldrh	r3, [r3, r2]
 80146d2:	b29b      	uxth	r3, r3
 80146d4:	001a      	movs	r2, r3
 80146d6:	21c4      	movs	r1, #196	@ 0xc4
 80146d8:	187b      	adds	r3, r7, r1
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	189b      	adds	r3, r3, r2
 80146de:	187a      	adds	r2, r7, r1
 80146e0:	6013      	str	r3, [r2, #0]
 80146e2:	683b      	ldr	r3, [r7, #0]
 80146e4:	781b      	ldrb	r3, [r3, #0]
 80146e6:	00da      	lsls	r2, r3, #3
 80146e8:	187b      	adds	r3, r7, r1
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	18d3      	adds	r3, r2, r3
 80146ee:	4a1d      	ldr	r2, [pc, #116]	@ (8014764 <USB_EPStartXfer+0x1264>)
 80146f0:	4694      	mov	ip, r2
 80146f2:	4463      	add	r3, ip
 80146f4:	21c0      	movs	r1, #192	@ 0xc0
 80146f6:	187a      	adds	r2, r7, r1
 80146f8:	6013      	str	r3, [r2, #0]
 80146fa:	1d7b      	adds	r3, r7, #5
 80146fc:	33ff      	adds	r3, #255	@ 0xff
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	b29a      	uxth	r2, r3
 8014702:	187b      	adds	r3, r7, r1
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	801a      	strh	r2, [r3, #0]
 8014708:	e001      	b.n	801470e <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 801470a:	2301      	movs	r3, #1
 801470c:	e025      	b.n	801475a <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801470e:	687a      	ldr	r2, [r7, #4]
 8014710:	683b      	ldr	r3, [r7, #0]
 8014712:	781b      	ldrb	r3, [r3, #0]
 8014714:	009b      	lsls	r3, r3, #2
 8014716:	18d3      	adds	r3, r2, r3
 8014718:	881b      	ldrh	r3, [r3, #0]
 801471a:	b29a      	uxth	r2, r3
 801471c:	208a      	movs	r0, #138	@ 0x8a
 801471e:	183b      	adds	r3, r7, r0
 8014720:	4911      	ldr	r1, [pc, #68]	@ (8014768 <USB_EPStartXfer+0x1268>)
 8014722:	400a      	ands	r2, r1
 8014724:	801a      	strh	r2, [r3, #0]
 8014726:	183b      	adds	r3, r7, r0
 8014728:	183a      	adds	r2, r7, r0
 801472a:	8812      	ldrh	r2, [r2, #0]
 801472c:	2180      	movs	r1, #128	@ 0x80
 801472e:	0149      	lsls	r1, r1, #5
 8014730:	404a      	eors	r2, r1
 8014732:	801a      	strh	r2, [r3, #0]
 8014734:	183b      	adds	r3, r7, r0
 8014736:	183a      	adds	r2, r7, r0
 8014738:	8812      	ldrh	r2, [r2, #0]
 801473a:	2180      	movs	r1, #128	@ 0x80
 801473c:	0189      	lsls	r1, r1, #6
 801473e:	404a      	eors	r2, r1
 8014740:	801a      	strh	r2, [r3, #0]
 8014742:	687a      	ldr	r2, [r7, #4]
 8014744:	683b      	ldr	r3, [r7, #0]
 8014746:	781b      	ldrb	r3, [r3, #0]
 8014748:	009b      	lsls	r3, r3, #2
 801474a:	18d3      	adds	r3, r2, r3
 801474c:	183a      	adds	r2, r7, r0
 801474e:	8812      	ldrh	r2, [r2, #0]
 8014750:	4906      	ldr	r1, [pc, #24]	@ (801476c <USB_EPStartXfer+0x126c>)
 8014752:	430a      	orrs	r2, r1
 8014754:	b292      	uxth	r2, r2
 8014756:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8014758:	2300      	movs	r3, #0
}
 801475a:	0018      	movs	r0, r3
 801475c:	46bd      	mov	sp, r7
 801475e:	b043      	add	sp, #268	@ 0x10c
 8014760:	bd90      	pop	{r4, r7, pc}
 8014762:	46c0      	nop			@ (mov r8, r8)
 8014764:	00000406 	.word	0x00000406
 8014768:	ffffbf8f 	.word	0xffffbf8f
 801476c:	ffff8080 	.word	0xffff8080

08014770 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8014770:	b580      	push	{r7, lr}
 8014772:	b084      	sub	sp, #16
 8014774:	af00      	add	r7, sp, #0
 8014776:	6078      	str	r0, [r7, #4]
 8014778:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801477a:	683b      	ldr	r3, [r7, #0]
 801477c:	785b      	ldrb	r3, [r3, #1]
 801477e:	2b00      	cmp	r3, #0
 8014780:	d01d      	beq.n	80147be <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8014782:	687a      	ldr	r2, [r7, #4]
 8014784:	683b      	ldr	r3, [r7, #0]
 8014786:	781b      	ldrb	r3, [r3, #0]
 8014788:	009b      	lsls	r3, r3, #2
 801478a:	18d3      	adds	r3, r2, r3
 801478c:	881b      	ldrh	r3, [r3, #0]
 801478e:	b29a      	uxth	r2, r3
 8014790:	200c      	movs	r0, #12
 8014792:	183b      	adds	r3, r7, r0
 8014794:	491b      	ldr	r1, [pc, #108]	@ (8014804 <USB_EPSetStall+0x94>)
 8014796:	400a      	ands	r2, r1
 8014798:	801a      	strh	r2, [r3, #0]
 801479a:	183b      	adds	r3, r7, r0
 801479c:	183a      	adds	r2, r7, r0
 801479e:	8812      	ldrh	r2, [r2, #0]
 80147a0:	2110      	movs	r1, #16
 80147a2:	404a      	eors	r2, r1
 80147a4:	801a      	strh	r2, [r3, #0]
 80147a6:	687a      	ldr	r2, [r7, #4]
 80147a8:	683b      	ldr	r3, [r7, #0]
 80147aa:	781b      	ldrb	r3, [r3, #0]
 80147ac:	009b      	lsls	r3, r3, #2
 80147ae:	18d3      	adds	r3, r2, r3
 80147b0:	183a      	adds	r2, r7, r0
 80147b2:	8812      	ldrh	r2, [r2, #0]
 80147b4:	4914      	ldr	r1, [pc, #80]	@ (8014808 <USB_EPSetStall+0x98>)
 80147b6:	430a      	orrs	r2, r1
 80147b8:	b292      	uxth	r2, r2
 80147ba:	801a      	strh	r2, [r3, #0]
 80147bc:	e01d      	b.n	80147fa <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80147be:	687a      	ldr	r2, [r7, #4]
 80147c0:	683b      	ldr	r3, [r7, #0]
 80147c2:	781b      	ldrb	r3, [r3, #0]
 80147c4:	009b      	lsls	r3, r3, #2
 80147c6:	18d3      	adds	r3, r2, r3
 80147c8:	881b      	ldrh	r3, [r3, #0]
 80147ca:	b29a      	uxth	r2, r3
 80147cc:	200e      	movs	r0, #14
 80147ce:	183b      	adds	r3, r7, r0
 80147d0:	490e      	ldr	r1, [pc, #56]	@ (801480c <USB_EPSetStall+0x9c>)
 80147d2:	400a      	ands	r2, r1
 80147d4:	801a      	strh	r2, [r3, #0]
 80147d6:	183b      	adds	r3, r7, r0
 80147d8:	183a      	adds	r2, r7, r0
 80147da:	8812      	ldrh	r2, [r2, #0]
 80147dc:	2180      	movs	r1, #128	@ 0x80
 80147de:	0149      	lsls	r1, r1, #5
 80147e0:	404a      	eors	r2, r1
 80147e2:	801a      	strh	r2, [r3, #0]
 80147e4:	687a      	ldr	r2, [r7, #4]
 80147e6:	683b      	ldr	r3, [r7, #0]
 80147e8:	781b      	ldrb	r3, [r3, #0]
 80147ea:	009b      	lsls	r3, r3, #2
 80147ec:	18d3      	adds	r3, r2, r3
 80147ee:	183a      	adds	r2, r7, r0
 80147f0:	8812      	ldrh	r2, [r2, #0]
 80147f2:	4905      	ldr	r1, [pc, #20]	@ (8014808 <USB_EPSetStall+0x98>)
 80147f4:	430a      	orrs	r2, r1
 80147f6:	b292      	uxth	r2, r2
 80147f8:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80147fa:	2300      	movs	r3, #0
}
 80147fc:	0018      	movs	r0, r3
 80147fe:	46bd      	mov	sp, r7
 8014800:	b004      	add	sp, #16
 8014802:	bd80      	pop	{r7, pc}
 8014804:	ffff8fbf 	.word	0xffff8fbf
 8014808:	ffff8080 	.word	0xffff8080
 801480c:	ffffbf8f 	.word	0xffffbf8f

08014810 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8014810:	b580      	push	{r7, lr}
 8014812:	b086      	sub	sp, #24
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
 8014818:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801481a:	683b      	ldr	r3, [r7, #0]
 801481c:	7b1b      	ldrb	r3, [r3, #12]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d000      	beq.n	8014824 <USB_EPClearStall+0x14>
 8014822:	e095      	b.n	8014950 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8014824:	683b      	ldr	r3, [r7, #0]
 8014826:	785b      	ldrb	r3, [r3, #1]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d046      	beq.n	80148ba <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801482c:	687a      	ldr	r2, [r7, #4]
 801482e:	683b      	ldr	r3, [r7, #0]
 8014830:	781b      	ldrb	r3, [r3, #0]
 8014832:	009b      	lsls	r3, r3, #2
 8014834:	18d2      	adds	r2, r2, r3
 8014836:	2110      	movs	r1, #16
 8014838:	187b      	adds	r3, r7, r1
 801483a:	8812      	ldrh	r2, [r2, #0]
 801483c:	801a      	strh	r2, [r3, #0]
 801483e:	187b      	adds	r3, r7, r1
 8014840:	881b      	ldrh	r3, [r3, #0]
 8014842:	2240      	movs	r2, #64	@ 0x40
 8014844:	4013      	ands	r3, r2
 8014846:	d016      	beq.n	8014876 <USB_EPClearStall+0x66>
 8014848:	687a      	ldr	r2, [r7, #4]
 801484a:	683b      	ldr	r3, [r7, #0]
 801484c:	781b      	ldrb	r3, [r3, #0]
 801484e:	009b      	lsls	r3, r3, #2
 8014850:	18d3      	adds	r3, r2, r3
 8014852:	881b      	ldrh	r3, [r3, #0]
 8014854:	b29a      	uxth	r2, r3
 8014856:	200e      	movs	r0, #14
 8014858:	183b      	adds	r3, r7, r0
 801485a:	4940      	ldr	r1, [pc, #256]	@ (801495c <USB_EPClearStall+0x14c>)
 801485c:	400a      	ands	r2, r1
 801485e:	801a      	strh	r2, [r3, #0]
 8014860:	687a      	ldr	r2, [r7, #4]
 8014862:	683b      	ldr	r3, [r7, #0]
 8014864:	781b      	ldrb	r3, [r3, #0]
 8014866:	009b      	lsls	r3, r3, #2
 8014868:	18d3      	adds	r3, r2, r3
 801486a:	183a      	adds	r2, r7, r0
 801486c:	8812      	ldrh	r2, [r2, #0]
 801486e:	493c      	ldr	r1, [pc, #240]	@ (8014960 <USB_EPClearStall+0x150>)
 8014870:	430a      	orrs	r2, r1
 8014872:	b292      	uxth	r2, r2
 8014874:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014876:	683b      	ldr	r3, [r7, #0]
 8014878:	78db      	ldrb	r3, [r3, #3]
 801487a:	2b01      	cmp	r3, #1
 801487c:	d068      	beq.n	8014950 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801487e:	687a      	ldr	r2, [r7, #4]
 8014880:	683b      	ldr	r3, [r7, #0]
 8014882:	781b      	ldrb	r3, [r3, #0]
 8014884:	009b      	lsls	r3, r3, #2
 8014886:	18d3      	adds	r3, r2, r3
 8014888:	881b      	ldrh	r3, [r3, #0]
 801488a:	b29a      	uxth	r2, r3
 801488c:	200c      	movs	r0, #12
 801488e:	183b      	adds	r3, r7, r0
 8014890:	4934      	ldr	r1, [pc, #208]	@ (8014964 <USB_EPClearStall+0x154>)
 8014892:	400a      	ands	r2, r1
 8014894:	801a      	strh	r2, [r3, #0]
 8014896:	183b      	adds	r3, r7, r0
 8014898:	183a      	adds	r2, r7, r0
 801489a:	8812      	ldrh	r2, [r2, #0]
 801489c:	2120      	movs	r1, #32
 801489e:	404a      	eors	r2, r1
 80148a0:	801a      	strh	r2, [r3, #0]
 80148a2:	687a      	ldr	r2, [r7, #4]
 80148a4:	683b      	ldr	r3, [r7, #0]
 80148a6:	781b      	ldrb	r3, [r3, #0]
 80148a8:	009b      	lsls	r3, r3, #2
 80148aa:	18d3      	adds	r3, r2, r3
 80148ac:	183a      	adds	r2, r7, r0
 80148ae:	8812      	ldrh	r2, [r2, #0]
 80148b0:	492d      	ldr	r1, [pc, #180]	@ (8014968 <USB_EPClearStall+0x158>)
 80148b2:	430a      	orrs	r2, r1
 80148b4:	b292      	uxth	r2, r2
 80148b6:	801a      	strh	r2, [r3, #0]
 80148b8:	e04a      	b.n	8014950 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80148ba:	687a      	ldr	r2, [r7, #4]
 80148bc:	683b      	ldr	r3, [r7, #0]
 80148be:	781b      	ldrb	r3, [r3, #0]
 80148c0:	009b      	lsls	r3, r3, #2
 80148c2:	18d2      	adds	r2, r2, r3
 80148c4:	2116      	movs	r1, #22
 80148c6:	187b      	adds	r3, r7, r1
 80148c8:	8812      	ldrh	r2, [r2, #0]
 80148ca:	801a      	strh	r2, [r3, #0]
 80148cc:	187b      	adds	r3, r7, r1
 80148ce:	881a      	ldrh	r2, [r3, #0]
 80148d0:	2380      	movs	r3, #128	@ 0x80
 80148d2:	01db      	lsls	r3, r3, #7
 80148d4:	4013      	ands	r3, r2
 80148d6:	d016      	beq.n	8014906 <USB_EPClearStall+0xf6>
 80148d8:	687a      	ldr	r2, [r7, #4]
 80148da:	683b      	ldr	r3, [r7, #0]
 80148dc:	781b      	ldrb	r3, [r3, #0]
 80148de:	009b      	lsls	r3, r3, #2
 80148e0:	18d3      	adds	r3, r2, r3
 80148e2:	881b      	ldrh	r3, [r3, #0]
 80148e4:	b29a      	uxth	r2, r3
 80148e6:	2014      	movs	r0, #20
 80148e8:	183b      	adds	r3, r7, r0
 80148ea:	491c      	ldr	r1, [pc, #112]	@ (801495c <USB_EPClearStall+0x14c>)
 80148ec:	400a      	ands	r2, r1
 80148ee:	801a      	strh	r2, [r3, #0]
 80148f0:	687a      	ldr	r2, [r7, #4]
 80148f2:	683b      	ldr	r3, [r7, #0]
 80148f4:	781b      	ldrb	r3, [r3, #0]
 80148f6:	009b      	lsls	r3, r3, #2
 80148f8:	18d3      	adds	r3, r2, r3
 80148fa:	183a      	adds	r2, r7, r0
 80148fc:	8812      	ldrh	r2, [r2, #0]
 80148fe:	491b      	ldr	r1, [pc, #108]	@ (801496c <USB_EPClearStall+0x15c>)
 8014900:	430a      	orrs	r2, r1
 8014902:	b292      	uxth	r2, r2
 8014904:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8014906:	687a      	ldr	r2, [r7, #4]
 8014908:	683b      	ldr	r3, [r7, #0]
 801490a:	781b      	ldrb	r3, [r3, #0]
 801490c:	009b      	lsls	r3, r3, #2
 801490e:	18d3      	adds	r3, r2, r3
 8014910:	881b      	ldrh	r3, [r3, #0]
 8014912:	b29a      	uxth	r2, r3
 8014914:	2012      	movs	r0, #18
 8014916:	183b      	adds	r3, r7, r0
 8014918:	4915      	ldr	r1, [pc, #84]	@ (8014970 <USB_EPClearStall+0x160>)
 801491a:	400a      	ands	r2, r1
 801491c:	801a      	strh	r2, [r3, #0]
 801491e:	183b      	adds	r3, r7, r0
 8014920:	183a      	adds	r2, r7, r0
 8014922:	8812      	ldrh	r2, [r2, #0]
 8014924:	2180      	movs	r1, #128	@ 0x80
 8014926:	0149      	lsls	r1, r1, #5
 8014928:	404a      	eors	r2, r1
 801492a:	801a      	strh	r2, [r3, #0]
 801492c:	183b      	adds	r3, r7, r0
 801492e:	183a      	adds	r2, r7, r0
 8014930:	8812      	ldrh	r2, [r2, #0]
 8014932:	2180      	movs	r1, #128	@ 0x80
 8014934:	0189      	lsls	r1, r1, #6
 8014936:	404a      	eors	r2, r1
 8014938:	801a      	strh	r2, [r3, #0]
 801493a:	687a      	ldr	r2, [r7, #4]
 801493c:	683b      	ldr	r3, [r7, #0]
 801493e:	781b      	ldrb	r3, [r3, #0]
 8014940:	009b      	lsls	r3, r3, #2
 8014942:	18d3      	adds	r3, r2, r3
 8014944:	183a      	adds	r2, r7, r0
 8014946:	8812      	ldrh	r2, [r2, #0]
 8014948:	4907      	ldr	r1, [pc, #28]	@ (8014968 <USB_EPClearStall+0x158>)
 801494a:	430a      	orrs	r2, r1
 801494c:	b292      	uxth	r2, r2
 801494e:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8014950:	2300      	movs	r3, #0
}
 8014952:	0018      	movs	r0, r3
 8014954:	46bd      	mov	sp, r7
 8014956:	b006      	add	sp, #24
 8014958:	bd80      	pop	{r7, pc}
 801495a:	46c0      	nop			@ (mov r8, r8)
 801495c:	ffff8f8f 	.word	0xffff8f8f
 8014960:	ffff80c0 	.word	0xffff80c0
 8014964:	ffff8fbf 	.word	0xffff8fbf
 8014968:	ffff8080 	.word	0xffff8080
 801496c:	ffffc080 	.word	0xffffc080
 8014970:	ffffbf8f 	.word	0xffffbf8f

08014974 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8014974:	b580      	push	{r7, lr}
 8014976:	b082      	sub	sp, #8
 8014978:	af00      	add	r7, sp, #0
 801497a:	6078      	str	r0, [r7, #4]
 801497c:	000a      	movs	r2, r1
 801497e:	1cfb      	adds	r3, r7, #3
 8014980:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8014982:	1cfb      	adds	r3, r7, #3
 8014984:	781b      	ldrb	r3, [r3, #0]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d103      	bne.n	8014992 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	224c      	movs	r2, #76	@ 0x4c
 801498e:	2180      	movs	r1, #128	@ 0x80
 8014990:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8014992:	2300      	movs	r3, #0
}
 8014994:	0018      	movs	r0, r3
 8014996:	46bd      	mov	sp, r7
 8014998:	b002      	add	sp, #8
 801499a:	bd80      	pop	{r7, pc}

0801499c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b082      	sub	sp, #8
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	2258      	movs	r2, #88	@ 0x58
 80149a8:	5a9b      	ldrh	r3, [r3, r2]
 80149aa:	b29b      	uxth	r3, r3
 80149ac:	4a05      	ldr	r2, [pc, #20]	@ (80149c4 <USB_DevConnect+0x28>)
 80149ae:	4313      	orrs	r3, r2
 80149b0:	b299      	uxth	r1, r3
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	2258      	movs	r2, #88	@ 0x58
 80149b6:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80149b8:	2300      	movs	r3, #0
}
 80149ba:	0018      	movs	r0, r3
 80149bc:	46bd      	mov	sp, r7
 80149be:	b002      	add	sp, #8
 80149c0:	bd80      	pop	{r7, pc}
 80149c2:	46c0      	nop			@ (mov r8, r8)
 80149c4:	ffff8000 	.word	0xffff8000

080149c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b084      	sub	sp, #16
 80149cc:	af00      	add	r7, sp, #0
 80149ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	2244      	movs	r2, #68	@ 0x44
 80149d4:	5a9b      	ldrh	r3, [r3, r2]
 80149d6:	b29b      	uxth	r3, r3
 80149d8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80149da:	68fb      	ldr	r3, [r7, #12]
}
 80149dc:	0018      	movs	r0, r3
 80149de:	46bd      	mov	sp, r7
 80149e0:	b004      	add	sp, #16
 80149e2:	bd80      	pop	{r7, pc}

080149e4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b08a      	sub	sp, #40	@ 0x28
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	60f8      	str	r0, [r7, #12]
 80149ec:	60b9      	str	r1, [r7, #8]
 80149ee:	0019      	movs	r1, r3
 80149f0:	1dbb      	adds	r3, r7, #6
 80149f2:	801a      	strh	r2, [r3, #0]
 80149f4:	1d3b      	adds	r3, r7, #4
 80149f6:	1c0a      	adds	r2, r1, #0
 80149f8:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80149fa:	1d3b      	adds	r3, r7, #4
 80149fc:	881b      	ldrh	r3, [r3, #0]
 80149fe:	3301      	adds	r3, #1
 8014a00:	085b      	lsrs	r3, r3, #1
 8014a02:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8014a08:	68bb      	ldr	r3, [r7, #8]
 8014a0a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8014a0c:	1dbb      	adds	r3, r7, #6
 8014a0e:	881a      	ldrh	r2, [r3, #0]
 8014a10:	697b      	ldr	r3, [r7, #20]
 8014a12:	18d3      	adds	r3, r2, r3
 8014a14:	2280      	movs	r2, #128	@ 0x80
 8014a16:	00d2      	lsls	r2, r2, #3
 8014a18:	4694      	mov	ip, r2
 8014a1a:	4463      	add	r3, ip
 8014a1c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8014a1e:	69bb      	ldr	r3, [r7, #24]
 8014a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8014a22:	e020      	b.n	8014a66 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8014a24:	69fb      	ldr	r3, [r7, #28]
 8014a26:	781a      	ldrb	r2, [r3, #0]
 8014a28:	2112      	movs	r1, #18
 8014a2a:	187b      	adds	r3, r7, r1
 8014a2c:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8014a2e:	69fb      	ldr	r3, [r7, #28]
 8014a30:	3301      	adds	r3, #1
 8014a32:	781b      	ldrb	r3, [r3, #0]
 8014a34:	021b      	lsls	r3, r3, #8
 8014a36:	b21a      	sxth	r2, r3
 8014a38:	187b      	adds	r3, r7, r1
 8014a3a:	2000      	movs	r0, #0
 8014a3c:	5e1b      	ldrsh	r3, [r3, r0]
 8014a3e:	4313      	orrs	r3, r2
 8014a40:	b21a      	sxth	r2, r3
 8014a42:	187b      	adds	r3, r7, r1
 8014a44:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8014a46:	6a3b      	ldr	r3, [r7, #32]
 8014a48:	187a      	adds	r2, r7, r1
 8014a4a:	8812      	ldrh	r2, [r2, #0]
 8014a4c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8014a4e:	6a3b      	ldr	r3, [r7, #32]
 8014a50:	3302      	adds	r3, #2
 8014a52:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8014a54:	69fb      	ldr	r3, [r7, #28]
 8014a56:	3301      	adds	r3, #1
 8014a58:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8014a5a:	69fb      	ldr	r3, [r7, #28]
 8014a5c:	3301      	adds	r3, #1
 8014a5e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8014a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a62:	3b01      	subs	r3, #1
 8014a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8014a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d1db      	bne.n	8014a24 <USB_WritePMA+0x40>
  }
}
 8014a6c:	46c0      	nop			@ (mov r8, r8)
 8014a6e:	46c0      	nop			@ (mov r8, r8)
 8014a70:	46bd      	mov	sp, r7
 8014a72:	b00a      	add	sp, #40	@ 0x28
 8014a74:	bd80      	pop	{r7, pc}

08014a76 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8014a76:	b580      	push	{r7, lr}
 8014a78:	b08a      	sub	sp, #40	@ 0x28
 8014a7a:	af00      	add	r7, sp, #0
 8014a7c:	60f8      	str	r0, [r7, #12]
 8014a7e:	60b9      	str	r1, [r7, #8]
 8014a80:	0019      	movs	r1, r3
 8014a82:	1dbb      	adds	r3, r7, #6
 8014a84:	801a      	strh	r2, [r3, #0]
 8014a86:	1d3b      	adds	r3, r7, #4
 8014a88:	1c0a      	adds	r2, r1, #0
 8014a8a:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8014a8c:	1d3b      	adds	r3, r7, #4
 8014a8e:	881b      	ldrh	r3, [r3, #0]
 8014a90:	085b      	lsrs	r3, r3, #1
 8014a92:	b29b      	uxth	r3, r3
 8014a94:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8014a9a:	68bb      	ldr	r3, [r7, #8]
 8014a9c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8014a9e:	1dbb      	adds	r3, r7, #6
 8014aa0:	881a      	ldrh	r2, [r3, #0]
 8014aa2:	697b      	ldr	r3, [r7, #20]
 8014aa4:	18d3      	adds	r3, r2, r3
 8014aa6:	2280      	movs	r2, #128	@ 0x80
 8014aa8:	00d2      	lsls	r2, r2, #3
 8014aaa:	4694      	mov	ip, r2
 8014aac:	4463      	add	r3, ip
 8014aae:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8014ab0:	69bb      	ldr	r3, [r7, #24]
 8014ab2:	627b      	str	r3, [r7, #36]	@ 0x24
 8014ab4:	e018      	b.n	8014ae8 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8014ab6:	6a3b      	ldr	r3, [r7, #32]
 8014ab8:	881b      	ldrh	r3, [r3, #0]
 8014aba:	b29b      	uxth	r3, r3
 8014abc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8014abe:	6a3b      	ldr	r3, [r7, #32]
 8014ac0:	3302      	adds	r3, #2
 8014ac2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8014ac4:	693b      	ldr	r3, [r7, #16]
 8014ac6:	b2da      	uxtb	r2, r3
 8014ac8:	69fb      	ldr	r3, [r7, #28]
 8014aca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8014acc:	69fb      	ldr	r3, [r7, #28]
 8014ace:	3301      	adds	r3, #1
 8014ad0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8014ad2:	693b      	ldr	r3, [r7, #16]
 8014ad4:	0a1b      	lsrs	r3, r3, #8
 8014ad6:	b2da      	uxtb	r2, r3
 8014ad8:	69fb      	ldr	r3, [r7, #28]
 8014ada:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8014adc:	69fb      	ldr	r3, [r7, #28]
 8014ade:	3301      	adds	r3, #1
 8014ae0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8014ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ae4:	3b01      	subs	r3, #1
 8014ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8014ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d1e3      	bne.n	8014ab6 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8014aee:	1d3b      	adds	r3, r7, #4
 8014af0:	881b      	ldrh	r3, [r3, #0]
 8014af2:	2201      	movs	r2, #1
 8014af4:	4013      	ands	r3, r2
 8014af6:	b29b      	uxth	r3, r3
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d007      	beq.n	8014b0c <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8014afc:	6a3b      	ldr	r3, [r7, #32]
 8014afe:	881b      	ldrh	r3, [r3, #0]
 8014b00:	b29b      	uxth	r3, r3
 8014b02:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8014b04:	693b      	ldr	r3, [r7, #16]
 8014b06:	b2da      	uxtb	r2, r3
 8014b08:	69fb      	ldr	r3, [r7, #28]
 8014b0a:	701a      	strb	r2, [r3, #0]
  }
}
 8014b0c:	46c0      	nop			@ (mov r8, r8)
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	b00a      	add	sp, #40	@ 0x28
 8014b12:	bd80      	pop	{r7, pc}

08014b14 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b084      	sub	sp, #16
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	6078      	str	r0, [r7, #4]
 8014b1c:	000a      	movs	r2, r1
 8014b1e:	1cfb      	adds	r3, r7, #3
 8014b20:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8014b22:	230f      	movs	r3, #15
 8014b24:	18fb      	adds	r3, r7, r3
 8014b26:	2200      	movs	r2, #0
 8014b28:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	7c1b      	ldrb	r3, [r3, #16]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d116      	bne.n	8014b60 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014b32:	2380      	movs	r3, #128	@ 0x80
 8014b34:	009b      	lsls	r3, r3, #2
 8014b36:	6878      	ldr	r0, [r7, #4]
 8014b38:	2202      	movs	r2, #2
 8014b3a:	2181      	movs	r1, #129	@ 0x81
 8014b3c:	f002 f8f5 	bl	8016d2a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	2201      	movs	r2, #1
 8014b44:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014b46:	2380      	movs	r3, #128	@ 0x80
 8014b48:	009b      	lsls	r3, r3, #2
 8014b4a:	6878      	ldr	r0, [r7, #4]
 8014b4c:	2202      	movs	r2, #2
 8014b4e:	2101      	movs	r1, #1
 8014b50:	f002 f8eb 	bl	8016d2a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8014b54:	687a      	ldr	r2, [r7, #4]
 8014b56:	23b6      	movs	r3, #182	@ 0xb6
 8014b58:	005b      	lsls	r3, r3, #1
 8014b5a:	2101      	movs	r1, #1
 8014b5c:	50d1      	str	r1, [r2, r3]
 8014b5e:	e013      	b.n	8014b88 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014b60:	6878      	ldr	r0, [r7, #4]
 8014b62:	2340      	movs	r3, #64	@ 0x40
 8014b64:	2202      	movs	r2, #2
 8014b66:	2181      	movs	r1, #129	@ 0x81
 8014b68:	f002 f8df 	bl	8016d2a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	2201      	movs	r2, #1
 8014b70:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014b72:	6878      	ldr	r0, [r7, #4]
 8014b74:	2340      	movs	r3, #64	@ 0x40
 8014b76:	2202      	movs	r2, #2
 8014b78:	2101      	movs	r1, #1
 8014b7a:	f002 f8d6 	bl	8016d2a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8014b7e:	687a      	ldr	r2, [r7, #4]
 8014b80:	23b6      	movs	r3, #182	@ 0xb6
 8014b82:	005b      	lsls	r3, r3, #1
 8014b84:	2101      	movs	r1, #1
 8014b86:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014b88:	6878      	ldr	r0, [r7, #4]
 8014b8a:	2308      	movs	r3, #8
 8014b8c:	2203      	movs	r2, #3
 8014b8e:	2182      	movs	r1, #130	@ 0x82
 8014b90:	f002 f8cb 	bl	8016d2a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	2201      	movs	r2, #1
 8014b98:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014b9a:	2387      	movs	r3, #135	@ 0x87
 8014b9c:	009b      	lsls	r3, r3, #2
 8014b9e:	0018      	movs	r0, r3
 8014ba0:	f002 fa5c 	bl	801705c <USBD_static_malloc>
 8014ba4:	0001      	movs	r1, r0
 8014ba6:	687a      	ldr	r2, [r7, #4]
 8014ba8:	23ae      	movs	r3, #174	@ 0xae
 8014baa:	009b      	lsls	r3, r3, #2
 8014bac:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8014bae:	687a      	ldr	r2, [r7, #4]
 8014bb0:	23ae      	movs	r3, #174	@ 0xae
 8014bb2:	009b      	lsls	r3, r3, #2
 8014bb4:	58d3      	ldr	r3, [r2, r3]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d104      	bne.n	8014bc4 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8014bba:	230f      	movs	r3, #15
 8014bbc:	18fb      	adds	r3, r7, r3
 8014bbe:	2201      	movs	r2, #1
 8014bc0:	701a      	strb	r2, [r3, #0]
 8014bc2:	e02c      	b.n	8014c1e <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8014bc4:	687a      	ldr	r2, [r7, #4]
 8014bc6:	23ae      	movs	r3, #174	@ 0xae
 8014bc8:	009b      	lsls	r3, r3, #2
 8014bca:	58d3      	ldr	r3, [r2, r3]
 8014bcc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8014bce:	687a      	ldr	r2, [r7, #4]
 8014bd0:	23af      	movs	r3, #175	@ 0xaf
 8014bd2:	009b      	lsls	r3, r3, #2
 8014bd4:	58d3      	ldr	r3, [r2, r3]
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8014bda:	68ba      	ldr	r2, [r7, #8]
 8014bdc:	2385      	movs	r3, #133	@ 0x85
 8014bde:	009b      	lsls	r3, r3, #2
 8014be0:	2100      	movs	r1, #0
 8014be2:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8014be4:	68ba      	ldr	r2, [r7, #8]
 8014be6:	2386      	movs	r3, #134	@ 0x86
 8014be8:	009b      	lsls	r3, r3, #2
 8014bea:	2100      	movs	r1, #0
 8014bec:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	7c1b      	ldrb	r3, [r3, #16]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d10a      	bne.n	8014c0c <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014bf6:	68ba      	ldr	r2, [r7, #8]
 8014bf8:	2381      	movs	r3, #129	@ 0x81
 8014bfa:	009b      	lsls	r3, r3, #2
 8014bfc:	58d2      	ldr	r2, [r2, r3]
 8014bfe:	2380      	movs	r3, #128	@ 0x80
 8014c00:	009b      	lsls	r3, r3, #2
 8014c02:	6878      	ldr	r0, [r7, #4]
 8014c04:	2101      	movs	r1, #1
 8014c06:	f002 f9db 	bl	8016fc0 <USBD_LL_PrepareReceive>
 8014c0a:	e008      	b.n	8014c1e <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014c0c:	68ba      	ldr	r2, [r7, #8]
 8014c0e:	2381      	movs	r3, #129	@ 0x81
 8014c10:	009b      	lsls	r3, r3, #2
 8014c12:	58d2      	ldr	r2, [r2, r3]
 8014c14:	6878      	ldr	r0, [r7, #4]
 8014c16:	2340      	movs	r3, #64	@ 0x40
 8014c18:	2101      	movs	r1, #1
 8014c1a:	f002 f9d1 	bl	8016fc0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8014c1e:	230f      	movs	r3, #15
 8014c20:	18fb      	adds	r3, r7, r3
 8014c22:	781b      	ldrb	r3, [r3, #0]
}
 8014c24:	0018      	movs	r0, r3
 8014c26:	46bd      	mov	sp, r7
 8014c28:	b004      	add	sp, #16
 8014c2a:	bd80      	pop	{r7, pc}

08014c2c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b084      	sub	sp, #16
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
 8014c34:	000a      	movs	r2, r1
 8014c36:	1cfb      	adds	r3, r7, #3
 8014c38:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8014c3a:	230f      	movs	r3, #15
 8014c3c:	18fb      	adds	r3, r7, r3
 8014c3e:	2200      	movs	r2, #0
 8014c40:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	2181      	movs	r1, #129	@ 0x81
 8014c46:	0018      	movs	r0, r3
 8014c48:	f002 f8a6 	bl	8016d98 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	2200      	movs	r2, #0
 8014c50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	2101      	movs	r1, #1
 8014c56:	0018      	movs	r0, r3
 8014c58:	f002 f89e 	bl	8016d98 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8014c5c:	687a      	ldr	r2, [r7, #4]
 8014c5e:	23b6      	movs	r3, #182	@ 0xb6
 8014c60:	005b      	lsls	r3, r3, #1
 8014c62:	2100      	movs	r1, #0
 8014c64:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	2182      	movs	r1, #130	@ 0x82
 8014c6a:	0018      	movs	r0, r3
 8014c6c:	f002 f894 	bl	8016d98 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	2200      	movs	r2, #0
 8014c74:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8014c76:	687a      	ldr	r2, [r7, #4]
 8014c78:	23ae      	movs	r3, #174	@ 0xae
 8014c7a:	009b      	lsls	r3, r3, #2
 8014c7c:	58d3      	ldr	r3, [r2, r3]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d011      	beq.n	8014ca6 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8014c82:	687a      	ldr	r2, [r7, #4]
 8014c84:	23af      	movs	r3, #175	@ 0xaf
 8014c86:	009b      	lsls	r3, r3, #2
 8014c88:	58d3      	ldr	r3, [r2, r3]
 8014c8a:	685b      	ldr	r3, [r3, #4]
 8014c8c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8014c8e:	687a      	ldr	r2, [r7, #4]
 8014c90:	23ae      	movs	r3, #174	@ 0xae
 8014c92:	009b      	lsls	r3, r3, #2
 8014c94:	58d3      	ldr	r3, [r2, r3]
 8014c96:	0018      	movs	r0, r3
 8014c98:	f002 f9ec 	bl	8017074 <USBD_static_free>
    pdev->pClassData = NULL;
 8014c9c:	687a      	ldr	r2, [r7, #4]
 8014c9e:	23ae      	movs	r3, #174	@ 0xae
 8014ca0:	009b      	lsls	r3, r3, #2
 8014ca2:	2100      	movs	r1, #0
 8014ca4:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8014ca6:	230f      	movs	r3, #15
 8014ca8:	18fb      	adds	r3, r7, r3
 8014caa:	781b      	ldrb	r3, [r3, #0]
}
 8014cac:	0018      	movs	r0, r3
 8014cae:	46bd      	mov	sp, r7
 8014cb0:	b004      	add	sp, #16
 8014cb2:	bd80      	pop	{r7, pc}

08014cb4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b086      	sub	sp, #24
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
 8014cbc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8014cbe:	687a      	ldr	r2, [r7, #4]
 8014cc0:	23ae      	movs	r3, #174	@ 0xae
 8014cc2:	009b      	lsls	r3, r3, #2
 8014cc4:	58d3      	ldr	r3, [r2, r3]
 8014cc6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8014cc8:	230f      	movs	r3, #15
 8014cca:	18fb      	adds	r3, r7, r3
 8014ccc:	2200      	movs	r2, #0
 8014cce:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8014cd0:	230c      	movs	r3, #12
 8014cd2:	18fb      	adds	r3, r7, r3
 8014cd4:	2200      	movs	r2, #0
 8014cd6:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8014cd8:	2317      	movs	r3, #23
 8014cda:	18fb      	adds	r3, r7, r3
 8014cdc:	2200      	movs	r2, #0
 8014cde:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014ce0:	683b      	ldr	r3, [r7, #0]
 8014ce2:	781b      	ldrb	r3, [r3, #0]
 8014ce4:	001a      	movs	r2, r3
 8014ce6:	2360      	movs	r3, #96	@ 0x60
 8014ce8:	4013      	ands	r3, r2
 8014cea:	d03d      	beq.n	8014d68 <USBD_CDC_Setup+0xb4>
 8014cec:	2b20      	cmp	r3, #32
 8014cee:	d000      	beq.n	8014cf2 <USBD_CDC_Setup+0x3e>
 8014cf0:	e094      	b.n	8014e1c <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8014cf2:	683b      	ldr	r3, [r7, #0]
 8014cf4:	88db      	ldrh	r3, [r3, #6]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d02b      	beq.n	8014d52 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8014cfa:	683b      	ldr	r3, [r7, #0]
 8014cfc:	781b      	ldrb	r3, [r3, #0]
 8014cfe:	b25b      	sxtb	r3, r3
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	da12      	bge.n	8014d2a <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014d04:	687a      	ldr	r2, [r7, #4]
 8014d06:	23af      	movs	r3, #175	@ 0xaf
 8014d08:	009b      	lsls	r3, r3, #2
 8014d0a:	58d3      	ldr	r3, [r2, r3]
 8014d0c:	689b      	ldr	r3, [r3, #8]
 8014d0e:	683a      	ldr	r2, [r7, #0]
 8014d10:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8014d12:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014d14:	683a      	ldr	r2, [r7, #0]
 8014d16:	88d2      	ldrh	r2, [r2, #6]
 8014d18:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8014d1a:	6939      	ldr	r1, [r7, #16]
 8014d1c:	683b      	ldr	r3, [r7, #0]
 8014d1e:	88da      	ldrh	r2, [r3, #6]
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	0018      	movs	r0, r3
 8014d24:	f001 fbaf 	bl	8016486 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8014d28:	e083      	b.n	8014e32 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8014d2a:	683b      	ldr	r3, [r7, #0]
 8014d2c:	7859      	ldrb	r1, [r3, #1]
 8014d2e:	693a      	ldr	r2, [r7, #16]
 8014d30:	2380      	movs	r3, #128	@ 0x80
 8014d32:	009b      	lsls	r3, r3, #2
 8014d34:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8014d36:	683b      	ldr	r3, [r7, #0]
 8014d38:	88db      	ldrh	r3, [r3, #6]
 8014d3a:	b2d9      	uxtb	r1, r3
 8014d3c:	693b      	ldr	r3, [r7, #16]
 8014d3e:	4a40      	ldr	r2, [pc, #256]	@ (8014e40 <USBD_CDC_Setup+0x18c>)
 8014d40:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8014d42:	6939      	ldr	r1, [r7, #16]
 8014d44:	683b      	ldr	r3, [r7, #0]
 8014d46:	88da      	ldrh	r2, [r3, #6]
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	0018      	movs	r0, r3
 8014d4c:	f001 fbce 	bl	80164ec <USBD_CtlPrepareRx>
      break;
 8014d50:	e06f      	b.n	8014e32 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014d52:	687a      	ldr	r2, [r7, #4]
 8014d54:	23af      	movs	r3, #175	@ 0xaf
 8014d56:	009b      	lsls	r3, r3, #2
 8014d58:	58d3      	ldr	r3, [r2, r3]
 8014d5a:	689b      	ldr	r3, [r3, #8]
 8014d5c:	683a      	ldr	r2, [r7, #0]
 8014d5e:	7850      	ldrb	r0, [r2, #1]
 8014d60:	6839      	ldr	r1, [r7, #0]
 8014d62:	2200      	movs	r2, #0
 8014d64:	4798      	blx	r3
      break;
 8014d66:	e064      	b.n	8014e32 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014d68:	683b      	ldr	r3, [r7, #0]
 8014d6a:	785b      	ldrb	r3, [r3, #1]
 8014d6c:	2b0b      	cmp	r3, #11
 8014d6e:	d037      	beq.n	8014de0 <USBD_CDC_Setup+0x12c>
 8014d70:	dc47      	bgt.n	8014e02 <USBD_CDC_Setup+0x14e>
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d002      	beq.n	8014d7c <USBD_CDC_Setup+0xc8>
 8014d76:	2b0a      	cmp	r3, #10
 8014d78:	d019      	beq.n	8014dae <USBD_CDC_Setup+0xfa>
 8014d7a:	e042      	b.n	8014e02 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d7c:	687a      	ldr	r2, [r7, #4]
 8014d7e:	23a7      	movs	r3, #167	@ 0xa7
 8014d80:	009b      	lsls	r3, r3, #2
 8014d82:	5cd3      	ldrb	r3, [r2, r3]
 8014d84:	2b03      	cmp	r3, #3
 8014d86:	d107      	bne.n	8014d98 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8014d88:	230c      	movs	r3, #12
 8014d8a:	18f9      	adds	r1, r7, r3
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	2202      	movs	r2, #2
 8014d90:	0018      	movs	r0, r3
 8014d92:	f001 fb78 	bl	8016486 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014d96:	e040      	b.n	8014e1a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8014d98:	683a      	ldr	r2, [r7, #0]
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	0011      	movs	r1, r2
 8014d9e:	0018      	movs	r0, r3
 8014da0:	f001 faf3 	bl	801638a <USBD_CtlError>
            ret = USBD_FAIL;
 8014da4:	2317      	movs	r3, #23
 8014da6:	18fb      	adds	r3, r7, r3
 8014da8:	2202      	movs	r2, #2
 8014daa:	701a      	strb	r2, [r3, #0]
          break;
 8014dac:	e035      	b.n	8014e1a <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014dae:	687a      	ldr	r2, [r7, #4]
 8014db0:	23a7      	movs	r3, #167	@ 0xa7
 8014db2:	009b      	lsls	r3, r3, #2
 8014db4:	5cd3      	ldrb	r3, [r2, r3]
 8014db6:	2b03      	cmp	r3, #3
 8014db8:	d107      	bne.n	8014dca <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8014dba:	230f      	movs	r3, #15
 8014dbc:	18f9      	adds	r1, r7, r3
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	2201      	movs	r2, #1
 8014dc2:	0018      	movs	r0, r3
 8014dc4:	f001 fb5f 	bl	8016486 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014dc8:	e027      	b.n	8014e1a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8014dca:	683a      	ldr	r2, [r7, #0]
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	0011      	movs	r1, r2
 8014dd0:	0018      	movs	r0, r3
 8014dd2:	f001 fada 	bl	801638a <USBD_CtlError>
            ret = USBD_FAIL;
 8014dd6:	2317      	movs	r3, #23
 8014dd8:	18fb      	adds	r3, r7, r3
 8014dda:	2202      	movs	r2, #2
 8014ddc:	701a      	strb	r2, [r3, #0]
          break;
 8014dde:	e01c      	b.n	8014e1a <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014de0:	687a      	ldr	r2, [r7, #4]
 8014de2:	23a7      	movs	r3, #167	@ 0xa7
 8014de4:	009b      	lsls	r3, r3, #2
 8014de6:	5cd3      	ldrb	r3, [r2, r3]
 8014de8:	2b03      	cmp	r3, #3
 8014dea:	d015      	beq.n	8014e18 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8014dec:	683a      	ldr	r2, [r7, #0]
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	0011      	movs	r1, r2
 8014df2:	0018      	movs	r0, r3
 8014df4:	f001 fac9 	bl	801638a <USBD_CtlError>
            ret = USBD_FAIL;
 8014df8:	2317      	movs	r3, #23
 8014dfa:	18fb      	adds	r3, r7, r3
 8014dfc:	2202      	movs	r2, #2
 8014dfe:	701a      	strb	r2, [r3, #0]
          }
          break;
 8014e00:	e00a      	b.n	8014e18 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8014e02:	683a      	ldr	r2, [r7, #0]
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	0011      	movs	r1, r2
 8014e08:	0018      	movs	r0, r3
 8014e0a:	f001 fabe 	bl	801638a <USBD_CtlError>
          ret = USBD_FAIL;
 8014e0e:	2317      	movs	r3, #23
 8014e10:	18fb      	adds	r3, r7, r3
 8014e12:	2202      	movs	r2, #2
 8014e14:	701a      	strb	r2, [r3, #0]
          break;
 8014e16:	e000      	b.n	8014e1a <USBD_CDC_Setup+0x166>
          break;
 8014e18:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8014e1a:	e00a      	b.n	8014e32 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8014e1c:	683a      	ldr	r2, [r7, #0]
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	0011      	movs	r1, r2
 8014e22:	0018      	movs	r0, r3
 8014e24:	f001 fab1 	bl	801638a <USBD_CtlError>
      ret = USBD_FAIL;
 8014e28:	2317      	movs	r3, #23
 8014e2a:	18fb      	adds	r3, r7, r3
 8014e2c:	2202      	movs	r2, #2
 8014e2e:	701a      	strb	r2, [r3, #0]
      break;
 8014e30:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8014e32:	2317      	movs	r3, #23
 8014e34:	18fb      	adds	r3, r7, r3
 8014e36:	781b      	ldrb	r3, [r3, #0]
}
 8014e38:	0018      	movs	r0, r3
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	b006      	add	sp, #24
 8014e3e:	bd80      	pop	{r7, pc}
 8014e40:	00000201 	.word	0x00000201

08014e44 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014e44:	b580      	push	{r7, lr}
 8014e46:	b084      	sub	sp, #16
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	6078      	str	r0, [r7, #4]
 8014e4c:	000a      	movs	r2, r1
 8014e4e:	1cfb      	adds	r3, r7, #3
 8014e50:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014e52:	687a      	ldr	r2, [r7, #4]
 8014e54:	23ae      	movs	r3, #174	@ 0xae
 8014e56:	009b      	lsls	r3, r3, #2
 8014e58:	58d3      	ldr	r3, [r2, r3]
 8014e5a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8014e5c:	687a      	ldr	r2, [r7, #4]
 8014e5e:	23b0      	movs	r3, #176	@ 0xb0
 8014e60:	009b      	lsls	r3, r3, #2
 8014e62:	58d3      	ldr	r3, [r2, r3]
 8014e64:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8014e66:	687a      	ldr	r2, [r7, #4]
 8014e68:	23ae      	movs	r3, #174	@ 0xae
 8014e6a:	009b      	lsls	r3, r3, #2
 8014e6c:	58d3      	ldr	r3, [r2, r3]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d03e      	beq.n	8014ef0 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8014e72:	1cfb      	adds	r3, r7, #3
 8014e74:	781a      	ldrb	r2, [r3, #0]
 8014e76:	6879      	ldr	r1, [r7, #4]
 8014e78:	0013      	movs	r3, r2
 8014e7a:	009b      	lsls	r3, r3, #2
 8014e7c:	189b      	adds	r3, r3, r2
 8014e7e:	009b      	lsls	r3, r3, #2
 8014e80:	18cb      	adds	r3, r1, r3
 8014e82:	331c      	adds	r3, #28
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d02b      	beq.n	8014ee2 <USBD_CDC_DataIn+0x9e>
 8014e8a:	1cfb      	adds	r3, r7, #3
 8014e8c:	781a      	ldrb	r2, [r3, #0]
 8014e8e:	6879      	ldr	r1, [r7, #4]
 8014e90:	0013      	movs	r3, r2
 8014e92:	009b      	lsls	r3, r3, #2
 8014e94:	189b      	adds	r3, r3, r2
 8014e96:	009b      	lsls	r3, r3, #2
 8014e98:	18cb      	adds	r3, r1, r3
 8014e9a:	331c      	adds	r3, #28
 8014e9c:	6818      	ldr	r0, [r3, #0]
 8014e9e:	1cfb      	adds	r3, r7, #3
 8014ea0:	781a      	ldrb	r2, [r3, #0]
 8014ea2:	68b9      	ldr	r1, [r7, #8]
 8014ea4:	0013      	movs	r3, r2
 8014ea6:	009b      	lsls	r3, r3, #2
 8014ea8:	189b      	adds	r3, r3, r2
 8014eaa:	00db      	lsls	r3, r3, #3
 8014eac:	18cb      	adds	r3, r1, r3
 8014eae:	3338      	adds	r3, #56	@ 0x38
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	0019      	movs	r1, r3
 8014eb4:	f7eb f9ca 	bl	800024c <__aeabi_uidivmod>
 8014eb8:	1e0b      	subs	r3, r1, #0
 8014eba:	d112      	bne.n	8014ee2 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8014ebc:	1cfb      	adds	r3, r7, #3
 8014ebe:	781a      	ldrb	r2, [r3, #0]
 8014ec0:	6879      	ldr	r1, [r7, #4]
 8014ec2:	0013      	movs	r3, r2
 8014ec4:	009b      	lsls	r3, r3, #2
 8014ec6:	189b      	adds	r3, r3, r2
 8014ec8:	009b      	lsls	r3, r3, #2
 8014eca:	18cb      	adds	r3, r1, r3
 8014ecc:	331c      	adds	r3, #28
 8014ece:	2200      	movs	r2, #0
 8014ed0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014ed2:	1cfb      	adds	r3, r7, #3
 8014ed4:	7819      	ldrb	r1, [r3, #0]
 8014ed6:	6878      	ldr	r0, [r7, #4]
 8014ed8:	2300      	movs	r3, #0
 8014eda:	2200      	movs	r2, #0
 8014edc:	f002 f839 	bl	8016f52 <USBD_LL_Transmit>
 8014ee0:	e004      	b.n	8014eec <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8014ee2:	68fa      	ldr	r2, [r7, #12]
 8014ee4:	2385      	movs	r3, #133	@ 0x85
 8014ee6:	009b      	lsls	r3, r3, #2
 8014ee8:	2100      	movs	r1, #0
 8014eea:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8014eec:	2300      	movs	r3, #0
 8014eee:	e000      	b.n	8014ef2 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8014ef0:	2302      	movs	r3, #2
  }
}
 8014ef2:	0018      	movs	r0, r3
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	b004      	add	sp, #16
 8014ef8:	bd80      	pop	{r7, pc}

08014efa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014efa:	b580      	push	{r7, lr}
 8014efc:	b084      	sub	sp, #16
 8014efe:	af00      	add	r7, sp, #0
 8014f00:	6078      	str	r0, [r7, #4]
 8014f02:	000a      	movs	r2, r1
 8014f04:	1cfb      	adds	r3, r7, #3
 8014f06:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8014f08:	687a      	ldr	r2, [r7, #4]
 8014f0a:	23ae      	movs	r3, #174	@ 0xae
 8014f0c:	009b      	lsls	r3, r3, #2
 8014f0e:	58d3      	ldr	r3, [r2, r3]
 8014f10:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014f12:	1cfb      	adds	r3, r7, #3
 8014f14:	781a      	ldrb	r2, [r3, #0]
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	0011      	movs	r1, r2
 8014f1a:	0018      	movs	r0, r3
 8014f1c:	f002 f887 	bl	801702e <USBD_LL_GetRxDataSize>
 8014f20:	0001      	movs	r1, r0
 8014f22:	68fa      	ldr	r2, [r7, #12]
 8014f24:	2383      	movs	r3, #131	@ 0x83
 8014f26:	009b      	lsls	r3, r3, #2
 8014f28:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8014f2a:	687a      	ldr	r2, [r7, #4]
 8014f2c:	23ae      	movs	r3, #174	@ 0xae
 8014f2e:	009b      	lsls	r3, r3, #2
 8014f30:	58d3      	ldr	r3, [r2, r3]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d011      	beq.n	8014f5a <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014f36:	687a      	ldr	r2, [r7, #4]
 8014f38:	23af      	movs	r3, #175	@ 0xaf
 8014f3a:	009b      	lsls	r3, r3, #2
 8014f3c:	58d3      	ldr	r3, [r2, r3]
 8014f3e:	68da      	ldr	r2, [r3, #12]
 8014f40:	68f9      	ldr	r1, [r7, #12]
 8014f42:	2381      	movs	r3, #129	@ 0x81
 8014f44:	009b      	lsls	r3, r3, #2
 8014f46:	58c8      	ldr	r0, [r1, r3]
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	2183      	movs	r1, #131	@ 0x83
 8014f4c:	0089      	lsls	r1, r1, #2
 8014f4e:	468c      	mov	ip, r1
 8014f50:	4463      	add	r3, ip
 8014f52:	0019      	movs	r1, r3
 8014f54:	4790      	blx	r2

    return USBD_OK;
 8014f56:	2300      	movs	r3, #0
 8014f58:	e000      	b.n	8014f5c <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8014f5a:	2302      	movs	r3, #2
  }
}
 8014f5c:	0018      	movs	r0, r3
 8014f5e:	46bd      	mov	sp, r7
 8014f60:	b004      	add	sp, #16
 8014f62:	bd80      	pop	{r7, pc}

08014f64 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014f64:	b590      	push	{r4, r7, lr}
 8014f66:	b085      	sub	sp, #20
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8014f6c:	687a      	ldr	r2, [r7, #4]
 8014f6e:	23ae      	movs	r3, #174	@ 0xae
 8014f70:	009b      	lsls	r3, r3, #2
 8014f72:	58d3      	ldr	r3, [r2, r3]
 8014f74:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014f76:	687a      	ldr	r2, [r7, #4]
 8014f78:	23af      	movs	r3, #175	@ 0xaf
 8014f7a:	009b      	lsls	r3, r3, #2
 8014f7c:	58d3      	ldr	r3, [r2, r3]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d018      	beq.n	8014fb4 <USBD_CDC_EP0_RxReady+0x50>
 8014f82:	68fa      	ldr	r2, [r7, #12]
 8014f84:	2380      	movs	r3, #128	@ 0x80
 8014f86:	009b      	lsls	r3, r3, #2
 8014f88:	5cd3      	ldrb	r3, [r2, r3]
 8014f8a:	2bff      	cmp	r3, #255	@ 0xff
 8014f8c:	d012      	beq.n	8014fb4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8014f8e:	687a      	ldr	r2, [r7, #4]
 8014f90:	23af      	movs	r3, #175	@ 0xaf
 8014f92:	009b      	lsls	r3, r3, #2
 8014f94:	58d3      	ldr	r3, [r2, r3]
 8014f96:	689b      	ldr	r3, [r3, #8]
 8014f98:	68f9      	ldr	r1, [r7, #12]
 8014f9a:	2280      	movs	r2, #128	@ 0x80
 8014f9c:	0092      	lsls	r2, r2, #2
 8014f9e:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8014fa0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8014fa2:	68fa      	ldr	r2, [r7, #12]
 8014fa4:	4c06      	ldr	r4, [pc, #24]	@ (8014fc0 <USBD_CDC_EP0_RxReady+0x5c>)
 8014fa6:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8014fa8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014faa:	68fa      	ldr	r2, [r7, #12]
 8014fac:	2380      	movs	r3, #128	@ 0x80
 8014fae:	009b      	lsls	r3, r3, #2
 8014fb0:	21ff      	movs	r1, #255	@ 0xff
 8014fb2:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8014fb4:	2300      	movs	r3, #0
}
 8014fb6:	0018      	movs	r0, r3
 8014fb8:	46bd      	mov	sp, r7
 8014fba:	b005      	add	sp, #20
 8014fbc:	bd90      	pop	{r4, r7, pc}
 8014fbe:	46c0      	nop			@ (mov r8, r8)
 8014fc0:	00000201 	.word	0x00000201

08014fc4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b082      	sub	sp, #8
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	2243      	movs	r2, #67	@ 0x43
 8014fd0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8014fd2:	4b02      	ldr	r3, [pc, #8]	@ (8014fdc <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8014fd4:	0018      	movs	r0, r3
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	b002      	add	sp, #8
 8014fda:	bd80      	pop	{r7, pc}
 8014fdc:	20000138 	.word	0x20000138

08014fe0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b082      	sub	sp, #8
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	2243      	movs	r2, #67	@ 0x43
 8014fec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8014fee:	4b02      	ldr	r3, [pc, #8]	@ (8014ff8 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8014ff0:	0018      	movs	r0, r3
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	b002      	add	sp, #8
 8014ff6:	bd80      	pop	{r7, pc}
 8014ff8:	200000f4 	.word	0x200000f4

08014ffc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	b082      	sub	sp, #8
 8015000:	af00      	add	r7, sp, #0
 8015002:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	2243      	movs	r2, #67	@ 0x43
 8015008:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801500a:	4b02      	ldr	r3, [pc, #8]	@ (8015014 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801500c:	0018      	movs	r0, r3
 801500e:	46bd      	mov	sp, r7
 8015010:	b002      	add	sp, #8
 8015012:	bd80      	pop	{r7, pc}
 8015014:	2000017c 	.word	0x2000017c

08015018 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015018:	b580      	push	{r7, lr}
 801501a:	b082      	sub	sp, #8
 801501c:	af00      	add	r7, sp, #0
 801501e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	220a      	movs	r2, #10
 8015024:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8015026:	4b02      	ldr	r3, [pc, #8]	@ (8015030 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8015028:	0018      	movs	r0, r3
 801502a:	46bd      	mov	sp, r7
 801502c:	b002      	add	sp, #8
 801502e:	bd80      	pop	{r7, pc}
 8015030:	200000b0 	.word	0x200000b0

08015034 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8015034:	b580      	push	{r7, lr}
 8015036:	b084      	sub	sp, #16
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]
 801503c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801503e:	200f      	movs	r0, #15
 8015040:	183b      	adds	r3, r7, r0
 8015042:	2202      	movs	r2, #2
 8015044:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8015046:	683b      	ldr	r3, [r7, #0]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d007      	beq.n	801505c <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801504c:	687a      	ldr	r2, [r7, #4]
 801504e:	23af      	movs	r3, #175	@ 0xaf
 8015050:	009b      	lsls	r3, r3, #2
 8015052:	6839      	ldr	r1, [r7, #0]
 8015054:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8015056:	183b      	adds	r3, r7, r0
 8015058:	2200      	movs	r2, #0
 801505a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801505c:	230f      	movs	r3, #15
 801505e:	18fb      	adds	r3, r7, r3
 8015060:	781b      	ldrb	r3, [r3, #0]
}
 8015062:	0018      	movs	r0, r3
 8015064:	46bd      	mov	sp, r7
 8015066:	b004      	add	sp, #16
 8015068:	bd80      	pop	{r7, pc}

0801506a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801506a:	b580      	push	{r7, lr}
 801506c:	b086      	sub	sp, #24
 801506e:	af00      	add	r7, sp, #0
 8015070:	60f8      	str	r0, [r7, #12]
 8015072:	60b9      	str	r1, [r7, #8]
 8015074:	1dbb      	adds	r3, r7, #6
 8015076:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015078:	68fa      	ldr	r2, [r7, #12]
 801507a:	23ae      	movs	r3, #174	@ 0xae
 801507c:	009b      	lsls	r3, r3, #2
 801507e:	58d3      	ldr	r3, [r2, r3]
 8015080:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8015082:	697a      	ldr	r2, [r7, #20]
 8015084:	2382      	movs	r3, #130	@ 0x82
 8015086:	009b      	lsls	r3, r3, #2
 8015088:	68b9      	ldr	r1, [r7, #8]
 801508a:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801508c:	1dbb      	adds	r3, r7, #6
 801508e:	8819      	ldrh	r1, [r3, #0]
 8015090:	697a      	ldr	r2, [r7, #20]
 8015092:	2384      	movs	r3, #132	@ 0x84
 8015094:	009b      	lsls	r3, r3, #2
 8015096:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8015098:	2300      	movs	r3, #0
}
 801509a:	0018      	movs	r0, r3
 801509c:	46bd      	mov	sp, r7
 801509e:	b006      	add	sp, #24
 80150a0:	bd80      	pop	{r7, pc}

080150a2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80150a2:	b580      	push	{r7, lr}
 80150a4:	b084      	sub	sp, #16
 80150a6:	af00      	add	r7, sp, #0
 80150a8:	6078      	str	r0, [r7, #4]
 80150aa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80150ac:	687a      	ldr	r2, [r7, #4]
 80150ae:	23ae      	movs	r3, #174	@ 0xae
 80150b0:	009b      	lsls	r3, r3, #2
 80150b2:	58d3      	ldr	r3, [r2, r3]
 80150b4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80150b6:	68fa      	ldr	r2, [r7, #12]
 80150b8:	2381      	movs	r3, #129	@ 0x81
 80150ba:	009b      	lsls	r3, r3, #2
 80150bc:	6839      	ldr	r1, [r7, #0]
 80150be:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80150c0:	2300      	movs	r3, #0
}
 80150c2:	0018      	movs	r0, r3
 80150c4:	46bd      	mov	sp, r7
 80150c6:	b004      	add	sp, #16
 80150c8:	bd80      	pop	{r7, pc}

080150ca <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80150ca:	b580      	push	{r7, lr}
 80150cc:	b084      	sub	sp, #16
 80150ce:	af00      	add	r7, sp, #0
 80150d0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80150d2:	687a      	ldr	r2, [r7, #4]
 80150d4:	23ae      	movs	r3, #174	@ 0xae
 80150d6:	009b      	lsls	r3, r3, #2
 80150d8:	58d3      	ldr	r3, [r2, r3]
 80150da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80150dc:	687a      	ldr	r2, [r7, #4]
 80150de:	23ae      	movs	r3, #174	@ 0xae
 80150e0:	009b      	lsls	r3, r3, #2
 80150e2:	58d3      	ldr	r3, [r2, r3]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d022      	beq.n	801512e <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 80150e8:	68fa      	ldr	r2, [r7, #12]
 80150ea:	2385      	movs	r3, #133	@ 0x85
 80150ec:	009b      	lsls	r3, r3, #2
 80150ee:	58d3      	ldr	r3, [r2, r3]
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d11a      	bne.n	801512a <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80150f4:	68fa      	ldr	r2, [r7, #12]
 80150f6:	2385      	movs	r3, #133	@ 0x85
 80150f8:	009b      	lsls	r3, r3, #2
 80150fa:	2101      	movs	r1, #1
 80150fc:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80150fe:	68fa      	ldr	r2, [r7, #12]
 8015100:	2384      	movs	r3, #132	@ 0x84
 8015102:	009b      	lsls	r3, r3, #2
 8015104:	58d2      	ldr	r2, [r2, r3]
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801510a:	68fa      	ldr	r2, [r7, #12]
 801510c:	2382      	movs	r3, #130	@ 0x82
 801510e:	009b      	lsls	r3, r3, #2
 8015110:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8015112:	68fa      	ldr	r2, [r7, #12]
 8015114:	2384      	movs	r3, #132	@ 0x84
 8015116:	009b      	lsls	r3, r3, #2
 8015118:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801511a:	b29b      	uxth	r3, r3
 801511c:	6878      	ldr	r0, [r7, #4]
 801511e:	000a      	movs	r2, r1
 8015120:	2181      	movs	r1, #129	@ 0x81
 8015122:	f001 ff16 	bl	8016f52 <USBD_LL_Transmit>

      return USBD_OK;
 8015126:	2300      	movs	r3, #0
 8015128:	e002      	b.n	8015130 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801512a:	2301      	movs	r3, #1
 801512c:	e000      	b.n	8015130 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801512e:	2302      	movs	r3, #2
  }
}
 8015130:	0018      	movs	r0, r3
 8015132:	46bd      	mov	sp, r7
 8015134:	b004      	add	sp, #16
 8015136:	bd80      	pop	{r7, pc}

08015138 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015138:	b580      	push	{r7, lr}
 801513a:	b084      	sub	sp, #16
 801513c:	af00      	add	r7, sp, #0
 801513e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015140:	687a      	ldr	r2, [r7, #4]
 8015142:	23ae      	movs	r3, #174	@ 0xae
 8015144:	009b      	lsls	r3, r3, #2
 8015146:	58d3      	ldr	r3, [r2, r3]
 8015148:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801514a:	687a      	ldr	r2, [r7, #4]
 801514c:	23ae      	movs	r3, #174	@ 0xae
 801514e:	009b      	lsls	r3, r3, #2
 8015150:	58d3      	ldr	r3, [r2, r3]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d019      	beq.n	801518a <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	7c1b      	ldrb	r3, [r3, #16]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d10a      	bne.n	8015174 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801515e:	68fa      	ldr	r2, [r7, #12]
 8015160:	2381      	movs	r3, #129	@ 0x81
 8015162:	009b      	lsls	r3, r3, #2
 8015164:	58d2      	ldr	r2, [r2, r3]
 8015166:	2380      	movs	r3, #128	@ 0x80
 8015168:	009b      	lsls	r3, r3, #2
 801516a:	6878      	ldr	r0, [r7, #4]
 801516c:	2101      	movs	r1, #1
 801516e:	f001 ff27 	bl	8016fc0 <USBD_LL_PrepareReceive>
 8015172:	e008      	b.n	8015186 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8015174:	68fa      	ldr	r2, [r7, #12]
 8015176:	2381      	movs	r3, #129	@ 0x81
 8015178:	009b      	lsls	r3, r3, #2
 801517a:	58d2      	ldr	r2, [r2, r3]
 801517c:	6878      	ldr	r0, [r7, #4]
 801517e:	2340      	movs	r3, #64	@ 0x40
 8015180:	2101      	movs	r1, #1
 8015182:	f001 ff1d 	bl	8016fc0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8015186:	2300      	movs	r3, #0
 8015188:	e000      	b.n	801518c <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801518a:	2302      	movs	r3, #2
  }
}
 801518c:	0018      	movs	r0, r3
 801518e:	46bd      	mov	sp, r7
 8015190:	b004      	add	sp, #16
 8015192:	bd80      	pop	{r7, pc}

08015194 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b084      	sub	sp, #16
 8015198:	af00      	add	r7, sp, #0
 801519a:	60f8      	str	r0, [r7, #12]
 801519c:	60b9      	str	r1, [r7, #8]
 801519e:	1dfb      	adds	r3, r7, #7
 80151a0:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d101      	bne.n	80151ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80151a8:	2302      	movs	r3, #2
 80151aa:	e020      	b.n	80151ee <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80151ac:	68fa      	ldr	r2, [r7, #12]
 80151ae:	23ad      	movs	r3, #173	@ 0xad
 80151b0:	009b      	lsls	r3, r3, #2
 80151b2:	58d3      	ldr	r3, [r2, r3]
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d004      	beq.n	80151c2 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 80151b8:	68fa      	ldr	r2, [r7, #12]
 80151ba:	23ad      	movs	r3, #173	@ 0xad
 80151bc:	009b      	lsls	r3, r3, #2
 80151be:	2100      	movs	r1, #0
 80151c0:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80151c2:	68bb      	ldr	r3, [r7, #8]
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d004      	beq.n	80151d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80151c8:	68fa      	ldr	r2, [r7, #12]
 80151ca:	23ac      	movs	r3, #172	@ 0xac
 80151cc:	009b      	lsls	r3, r3, #2
 80151ce:	68b9      	ldr	r1, [r7, #8]
 80151d0:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80151d2:	68fa      	ldr	r2, [r7, #12]
 80151d4:	23a7      	movs	r3, #167	@ 0xa7
 80151d6:	009b      	lsls	r3, r3, #2
 80151d8:	2101      	movs	r1, #1
 80151da:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	1dfa      	adds	r2, r7, #7
 80151e0:	7812      	ldrb	r2, [r2, #0]
 80151e2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	0018      	movs	r0, r3
 80151e8:	f001 fd16 	bl	8016c18 <USBD_LL_Init>

  return USBD_OK;
 80151ec:	2300      	movs	r3, #0
}
 80151ee:	0018      	movs	r0, r3
 80151f0:	46bd      	mov	sp, r7
 80151f2:	b004      	add	sp, #16
 80151f4:	bd80      	pop	{r7, pc}

080151f6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80151f6:	b580      	push	{r7, lr}
 80151f8:	b084      	sub	sp, #16
 80151fa:	af00      	add	r7, sp, #0
 80151fc:	6078      	str	r0, [r7, #4]
 80151fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8015200:	200f      	movs	r0, #15
 8015202:	183b      	adds	r3, r7, r0
 8015204:	2200      	movs	r2, #0
 8015206:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8015208:	683b      	ldr	r3, [r7, #0]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d008      	beq.n	8015220 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801520e:	687a      	ldr	r2, [r7, #4]
 8015210:	23ad      	movs	r3, #173	@ 0xad
 8015212:	009b      	lsls	r3, r3, #2
 8015214:	6839      	ldr	r1, [r7, #0]
 8015216:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8015218:	183b      	adds	r3, r7, r0
 801521a:	2200      	movs	r2, #0
 801521c:	701a      	strb	r2, [r3, #0]
 801521e:	e003      	b.n	8015228 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8015220:	230f      	movs	r3, #15
 8015222:	18fb      	adds	r3, r7, r3
 8015224:	2202      	movs	r2, #2
 8015226:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8015228:	230f      	movs	r3, #15
 801522a:	18fb      	adds	r3, r7, r3
 801522c:	781b      	ldrb	r3, [r3, #0]
}
 801522e:	0018      	movs	r0, r3
 8015230:	46bd      	mov	sp, r7
 8015232:	b004      	add	sp, #16
 8015234:	bd80      	pop	{r7, pc}

08015236 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015236:	b580      	push	{r7, lr}
 8015238:	b082      	sub	sp, #8
 801523a:	af00      	add	r7, sp, #0
 801523c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	0018      	movs	r0, r3
 8015242:	f001 fd4d 	bl	8016ce0 <USBD_LL_Start>

  return USBD_OK;
 8015246:	2300      	movs	r3, #0
}
 8015248:	0018      	movs	r0, r3
 801524a:	46bd      	mov	sp, r7
 801524c:	b002      	add	sp, #8
 801524e:	bd80      	pop	{r7, pc}

08015250 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8015250:	b580      	push	{r7, lr}
 8015252:	b082      	sub	sp, #8
 8015254:	af00      	add	r7, sp, #0
 8015256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015258:	2300      	movs	r3, #0
}
 801525a:	0018      	movs	r0, r3
 801525c:	46bd      	mov	sp, r7
 801525e:	b002      	add	sp, #8
 8015260:	bd80      	pop	{r7, pc}

08015262 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8015262:	b590      	push	{r4, r7, lr}
 8015264:	b085      	sub	sp, #20
 8015266:	af00      	add	r7, sp, #0
 8015268:	6078      	str	r0, [r7, #4]
 801526a:	000a      	movs	r2, r1
 801526c:	1cfb      	adds	r3, r7, #3
 801526e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8015270:	240f      	movs	r4, #15
 8015272:	193b      	adds	r3, r7, r4
 8015274:	2202      	movs	r2, #2
 8015276:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8015278:	687a      	ldr	r2, [r7, #4]
 801527a:	23ad      	movs	r3, #173	@ 0xad
 801527c:	009b      	lsls	r3, r3, #2
 801527e:	58d3      	ldr	r3, [r2, r3]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d00e      	beq.n	80152a2 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8015284:	687a      	ldr	r2, [r7, #4]
 8015286:	23ad      	movs	r3, #173	@ 0xad
 8015288:	009b      	lsls	r3, r3, #2
 801528a:	58d3      	ldr	r3, [r2, r3]
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	1cfa      	adds	r2, r7, #3
 8015290:	7811      	ldrb	r1, [r2, #0]
 8015292:	687a      	ldr	r2, [r7, #4]
 8015294:	0010      	movs	r0, r2
 8015296:	4798      	blx	r3
 8015298:	1e03      	subs	r3, r0, #0
 801529a:	d102      	bne.n	80152a2 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801529c:	193b      	adds	r3, r7, r4
 801529e:	2200      	movs	r2, #0
 80152a0:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 80152a2:	230f      	movs	r3, #15
 80152a4:	18fb      	adds	r3, r7, r3
 80152a6:	781b      	ldrb	r3, [r3, #0]
}
 80152a8:	0018      	movs	r0, r3
 80152aa:	46bd      	mov	sp, r7
 80152ac:	b005      	add	sp, #20
 80152ae:	bd90      	pop	{r4, r7, pc}

080152b0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b082      	sub	sp, #8
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
 80152b8:	000a      	movs	r2, r1
 80152ba:	1cfb      	adds	r3, r7, #3
 80152bc:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80152be:	687a      	ldr	r2, [r7, #4]
 80152c0:	23ad      	movs	r3, #173	@ 0xad
 80152c2:	009b      	lsls	r3, r3, #2
 80152c4:	58d3      	ldr	r3, [r2, r3]
 80152c6:	685b      	ldr	r3, [r3, #4]
 80152c8:	1cfa      	adds	r2, r7, #3
 80152ca:	7811      	ldrb	r1, [r2, #0]
 80152cc:	687a      	ldr	r2, [r7, #4]
 80152ce:	0010      	movs	r0, r2
 80152d0:	4798      	blx	r3

  return USBD_OK;
 80152d2:	2300      	movs	r3, #0
}
 80152d4:	0018      	movs	r0, r3
 80152d6:	46bd      	mov	sp, r7
 80152d8:	b002      	add	sp, #8
 80152da:	bd80      	pop	{r7, pc}

080152dc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80152dc:	b580      	push	{r7, lr}
 80152de:	b082      	sub	sp, #8
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	6078      	str	r0, [r7, #4]
 80152e4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	22aa      	movs	r2, #170	@ 0xaa
 80152ea:	0092      	lsls	r2, r2, #2
 80152ec:	4694      	mov	ip, r2
 80152ee:	4463      	add	r3, ip
 80152f0:	683a      	ldr	r2, [r7, #0]
 80152f2:	0011      	movs	r1, r2
 80152f4:	0018      	movs	r0, r3
 80152f6:	f001 f810 	bl	801631a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80152fa:	687a      	ldr	r2, [r7, #4]
 80152fc:	23a5      	movs	r3, #165	@ 0xa5
 80152fe:	009b      	lsls	r3, r3, #2
 8015300:	2101      	movs	r1, #1
 8015302:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	4a23      	ldr	r2, [pc, #140]	@ (8015394 <USBD_LL_SetupStage+0xb8>)
 8015308:	5a9b      	ldrh	r3, [r3, r2]
 801530a:	0019      	movs	r1, r3
 801530c:	687a      	ldr	r2, [r7, #4]
 801530e:	23a6      	movs	r3, #166	@ 0xa6
 8015310:	009b      	lsls	r3, r3, #2
 8015312:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8015314:	687a      	ldr	r2, [r7, #4]
 8015316:	23aa      	movs	r3, #170	@ 0xaa
 8015318:	009b      	lsls	r3, r3, #2
 801531a:	5cd3      	ldrb	r3, [r2, r3]
 801531c:	001a      	movs	r2, r3
 801531e:	231f      	movs	r3, #31
 8015320:	4013      	ands	r3, r2
 8015322:	2b02      	cmp	r3, #2
 8015324:	d019      	beq.n	801535a <USBD_LL_SetupStage+0x7e>
 8015326:	d822      	bhi.n	801536e <USBD_LL_SetupStage+0x92>
 8015328:	2b00      	cmp	r3, #0
 801532a:	d002      	beq.n	8015332 <USBD_LL_SetupStage+0x56>
 801532c:	2b01      	cmp	r3, #1
 801532e:	d00a      	beq.n	8015346 <USBD_LL_SetupStage+0x6a>
 8015330:	e01d      	b.n	801536e <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	22aa      	movs	r2, #170	@ 0xaa
 8015336:	0092      	lsls	r2, r2, #2
 8015338:	189a      	adds	r2, r3, r2
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	0011      	movs	r1, r2
 801533e:	0018      	movs	r0, r3
 8015340:	f000 fa10 	bl	8015764 <USBD_StdDevReq>
      break;
 8015344:	e020      	b.n	8015388 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	22aa      	movs	r2, #170	@ 0xaa
 801534a:	0092      	lsls	r2, r2, #2
 801534c:	189a      	adds	r2, r3, r2
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	0011      	movs	r1, r2
 8015352:	0018      	movs	r0, r3
 8015354:	f000 fa78 	bl	8015848 <USBD_StdItfReq>
      break;
 8015358:	e016      	b.n	8015388 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	22aa      	movs	r2, #170	@ 0xaa
 801535e:	0092      	lsls	r2, r2, #2
 8015360:	189a      	adds	r2, r3, r2
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	0011      	movs	r1, r2
 8015366:	0018      	movs	r0, r3
 8015368:	f000 fac5 	bl	80158f6 <USBD_StdEPReq>
      break;
 801536c:	e00c      	b.n	8015388 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801536e:	687a      	ldr	r2, [r7, #4]
 8015370:	23aa      	movs	r3, #170	@ 0xaa
 8015372:	009b      	lsls	r3, r3, #2
 8015374:	5cd3      	ldrb	r3, [r2, r3]
 8015376:	227f      	movs	r2, #127	@ 0x7f
 8015378:	4393      	bics	r3, r2
 801537a:	b2da      	uxtb	r2, r3
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	0011      	movs	r1, r2
 8015380:	0018      	movs	r0, r3
 8015382:	f001 fd34 	bl	8016dee <USBD_LL_StallEP>
      break;
 8015386:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8015388:	2300      	movs	r3, #0
}
 801538a:	0018      	movs	r0, r3
 801538c:	46bd      	mov	sp, r7
 801538e:	b002      	add	sp, #8
 8015390:	bd80      	pop	{r7, pc}
 8015392:	46c0      	nop			@ (mov r8, r8)
 8015394:	000002ae 	.word	0x000002ae

08015398 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015398:	b580      	push	{r7, lr}
 801539a:	b086      	sub	sp, #24
 801539c:	af00      	add	r7, sp, #0
 801539e:	60f8      	str	r0, [r7, #12]
 80153a0:	607a      	str	r2, [r7, #4]
 80153a2:	200b      	movs	r0, #11
 80153a4:	183b      	adds	r3, r7, r0
 80153a6:	1c0a      	adds	r2, r1, #0
 80153a8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80153aa:	183b      	adds	r3, r7, r0
 80153ac:	781b      	ldrb	r3, [r3, #0]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d154      	bne.n	801545c <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	3355      	adds	r3, #85	@ 0x55
 80153b6:	33ff      	adds	r3, #255	@ 0xff
 80153b8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80153ba:	68fa      	ldr	r2, [r7, #12]
 80153bc:	23a5      	movs	r3, #165	@ 0xa5
 80153be:	009b      	lsls	r3, r3, #2
 80153c0:	58d3      	ldr	r3, [r2, r3]
 80153c2:	2b03      	cmp	r3, #3
 80153c4:	d139      	bne.n	801543a <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 80153c6:	697b      	ldr	r3, [r7, #20]
 80153c8:	68da      	ldr	r2, [r3, #12]
 80153ca:	697b      	ldr	r3, [r7, #20]
 80153cc:	691b      	ldr	r3, [r3, #16]
 80153ce:	429a      	cmp	r2, r3
 80153d0:	d919      	bls.n	8015406 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 80153d2:	697b      	ldr	r3, [r7, #20]
 80153d4:	68da      	ldr	r2, [r3, #12]
 80153d6:	697b      	ldr	r3, [r7, #20]
 80153d8:	691b      	ldr	r3, [r3, #16]
 80153da:	1ad2      	subs	r2, r2, r3
 80153dc:	697b      	ldr	r3, [r7, #20]
 80153de:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80153e0:	697b      	ldr	r3, [r7, #20]
 80153e2:	68da      	ldr	r2, [r3, #12]
 80153e4:	697b      	ldr	r3, [r7, #20]
 80153e6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80153e8:	429a      	cmp	r2, r3
 80153ea:	d203      	bcs.n	80153f4 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80153ec:	697b      	ldr	r3, [r7, #20]
 80153ee:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80153f0:	b29b      	uxth	r3, r3
 80153f2:	e002      	b.n	80153fa <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80153f4:	697b      	ldr	r3, [r7, #20]
 80153f6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80153f8:	b29b      	uxth	r3, r3
 80153fa:	6879      	ldr	r1, [r7, #4]
 80153fc:	68f8      	ldr	r0, [r7, #12]
 80153fe:	001a      	movs	r2, r3
 8015400:	f001 f898 	bl	8016534 <USBD_CtlContinueRx>
 8015404:	e045      	b.n	8015492 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015406:	68fa      	ldr	r2, [r7, #12]
 8015408:	23ad      	movs	r3, #173	@ 0xad
 801540a:	009b      	lsls	r3, r3, #2
 801540c:	58d3      	ldr	r3, [r2, r3]
 801540e:	691b      	ldr	r3, [r3, #16]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d00d      	beq.n	8015430 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015414:	68fa      	ldr	r2, [r7, #12]
 8015416:	23a7      	movs	r3, #167	@ 0xa7
 8015418:	009b      	lsls	r3, r3, #2
 801541a:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801541c:	2b03      	cmp	r3, #3
 801541e:	d107      	bne.n	8015430 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8015420:	68fa      	ldr	r2, [r7, #12]
 8015422:	23ad      	movs	r3, #173	@ 0xad
 8015424:	009b      	lsls	r3, r3, #2
 8015426:	58d3      	ldr	r3, [r2, r3]
 8015428:	691b      	ldr	r3, [r3, #16]
 801542a:	68fa      	ldr	r2, [r7, #12]
 801542c:	0010      	movs	r0, r2
 801542e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	0018      	movs	r0, r3
 8015434:	f001 f891 	bl	801655a <USBD_CtlSendStatus>
 8015438:	e02b      	b.n	8015492 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801543a:	68fa      	ldr	r2, [r7, #12]
 801543c:	23a5      	movs	r3, #165	@ 0xa5
 801543e:	009b      	lsls	r3, r3, #2
 8015440:	58d3      	ldr	r3, [r2, r3]
 8015442:	2b05      	cmp	r3, #5
 8015444:	d125      	bne.n	8015492 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8015446:	68fa      	ldr	r2, [r7, #12]
 8015448:	23a5      	movs	r3, #165	@ 0xa5
 801544a:	009b      	lsls	r3, r3, #2
 801544c:	2100      	movs	r1, #0
 801544e:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	2100      	movs	r1, #0
 8015454:	0018      	movs	r0, r3
 8015456:	f001 fcca 	bl	8016dee <USBD_LL_StallEP>
 801545a:	e01a      	b.n	8015492 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801545c:	68fa      	ldr	r2, [r7, #12]
 801545e:	23ad      	movs	r3, #173	@ 0xad
 8015460:	009b      	lsls	r3, r3, #2
 8015462:	58d3      	ldr	r3, [r2, r3]
 8015464:	699b      	ldr	r3, [r3, #24]
 8015466:	2b00      	cmp	r3, #0
 8015468:	d011      	beq.n	801548e <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801546a:	68fa      	ldr	r2, [r7, #12]
 801546c:	23a7      	movs	r3, #167	@ 0xa7
 801546e:	009b      	lsls	r3, r3, #2
 8015470:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8015472:	2b03      	cmp	r3, #3
 8015474:	d10b      	bne.n	801548e <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8015476:	68fa      	ldr	r2, [r7, #12]
 8015478:	23ad      	movs	r3, #173	@ 0xad
 801547a:	009b      	lsls	r3, r3, #2
 801547c:	58d3      	ldr	r3, [r2, r3]
 801547e:	699b      	ldr	r3, [r3, #24]
 8015480:	220b      	movs	r2, #11
 8015482:	18ba      	adds	r2, r7, r2
 8015484:	7811      	ldrb	r1, [r2, #0]
 8015486:	68fa      	ldr	r2, [r7, #12]
 8015488:	0010      	movs	r0, r2
 801548a:	4798      	blx	r3
 801548c:	e001      	b.n	8015492 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801548e:	2302      	movs	r3, #2
 8015490:	e000      	b.n	8015494 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8015492:	2300      	movs	r3, #0
}
 8015494:	0018      	movs	r0, r3
 8015496:	46bd      	mov	sp, r7
 8015498:	b006      	add	sp, #24
 801549a:	bd80      	pop	{r7, pc}

0801549c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801549c:	b580      	push	{r7, lr}
 801549e:	b086      	sub	sp, #24
 80154a0:	af00      	add	r7, sp, #0
 80154a2:	60f8      	str	r0, [r7, #12]
 80154a4:	607a      	str	r2, [r7, #4]
 80154a6:	200b      	movs	r0, #11
 80154a8:	183b      	adds	r3, r7, r0
 80154aa:	1c0a      	adds	r2, r1, #0
 80154ac:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80154ae:	183b      	adds	r3, r7, r0
 80154b0:	781b      	ldrb	r3, [r3, #0]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d000      	beq.n	80154b8 <USBD_LL_DataInStage+0x1c>
 80154b6:	e08e      	b.n	80155d6 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	3314      	adds	r3, #20
 80154bc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80154be:	68fa      	ldr	r2, [r7, #12]
 80154c0:	23a5      	movs	r3, #165	@ 0xa5
 80154c2:	009b      	lsls	r3, r3, #2
 80154c4:	58d3      	ldr	r3, [r2, r3]
 80154c6:	2b02      	cmp	r3, #2
 80154c8:	d164      	bne.n	8015594 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80154ca:	697b      	ldr	r3, [r7, #20]
 80154cc:	68da      	ldr	r2, [r3, #12]
 80154ce:	697b      	ldr	r3, [r7, #20]
 80154d0:	691b      	ldr	r3, [r3, #16]
 80154d2:	429a      	cmp	r2, r3
 80154d4:	d915      	bls.n	8015502 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80154d6:	697b      	ldr	r3, [r7, #20]
 80154d8:	68da      	ldr	r2, [r3, #12]
 80154da:	697b      	ldr	r3, [r7, #20]
 80154dc:	691b      	ldr	r3, [r3, #16]
 80154de:	1ad2      	subs	r2, r2, r3
 80154e0:	697b      	ldr	r3, [r7, #20]
 80154e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80154e4:	697b      	ldr	r3, [r7, #20]
 80154e6:	68db      	ldr	r3, [r3, #12]
 80154e8:	b29a      	uxth	r2, r3
 80154ea:	6879      	ldr	r1, [r7, #4]
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	0018      	movs	r0, r3
 80154f0:	f000 ffe9 	bl	80164c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80154f4:	68f8      	ldr	r0, [r7, #12]
 80154f6:	2300      	movs	r3, #0
 80154f8:	2200      	movs	r2, #0
 80154fa:	2100      	movs	r1, #0
 80154fc:	f001 fd60 	bl	8016fc0 <USBD_LL_PrepareReceive>
 8015500:	e059      	b.n	80155b6 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8015502:	697b      	ldr	r3, [r7, #20]
 8015504:	689a      	ldr	r2, [r3, #8]
 8015506:	697b      	ldr	r3, [r7, #20]
 8015508:	691b      	ldr	r3, [r3, #16]
 801550a:	0019      	movs	r1, r3
 801550c:	0010      	movs	r0, r2
 801550e:	f7ea fe9d 	bl	800024c <__aeabi_uidivmod>
 8015512:	1e0b      	subs	r3, r1, #0
 8015514:	d11f      	bne.n	8015556 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8015516:	697b      	ldr	r3, [r7, #20]
 8015518:	689a      	ldr	r2, [r3, #8]
 801551a:	697b      	ldr	r3, [r7, #20]
 801551c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801551e:	429a      	cmp	r2, r3
 8015520:	d319      	bcc.n	8015556 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8015522:	697b      	ldr	r3, [r7, #20]
 8015524:	689a      	ldr	r2, [r3, #8]
 8015526:	68f9      	ldr	r1, [r7, #12]
 8015528:	23a6      	movs	r3, #166	@ 0xa6
 801552a:	009b      	lsls	r3, r3, #2
 801552c:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801552e:	429a      	cmp	r2, r3
 8015530:	d211      	bcs.n	8015556 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	2200      	movs	r2, #0
 8015536:	2100      	movs	r1, #0
 8015538:	0018      	movs	r0, r3
 801553a:	f000 ffc4 	bl	80164c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801553e:	68fa      	ldr	r2, [r7, #12]
 8015540:	23a6      	movs	r3, #166	@ 0xa6
 8015542:	009b      	lsls	r3, r3, #2
 8015544:	2100      	movs	r1, #0
 8015546:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015548:	68f8      	ldr	r0, [r7, #12]
 801554a:	2300      	movs	r3, #0
 801554c:	2200      	movs	r2, #0
 801554e:	2100      	movs	r1, #0
 8015550:	f001 fd36 	bl	8016fc0 <USBD_LL_PrepareReceive>
 8015554:	e02f      	b.n	80155b6 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015556:	68fa      	ldr	r2, [r7, #12]
 8015558:	23ad      	movs	r3, #173	@ 0xad
 801555a:	009b      	lsls	r3, r3, #2
 801555c:	58d3      	ldr	r3, [r2, r3]
 801555e:	68db      	ldr	r3, [r3, #12]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d00d      	beq.n	8015580 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015564:	68fa      	ldr	r2, [r7, #12]
 8015566:	23a7      	movs	r3, #167	@ 0xa7
 8015568:	009b      	lsls	r3, r3, #2
 801556a:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801556c:	2b03      	cmp	r3, #3
 801556e:	d107      	bne.n	8015580 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8015570:	68fa      	ldr	r2, [r7, #12]
 8015572:	23ad      	movs	r3, #173	@ 0xad
 8015574:	009b      	lsls	r3, r3, #2
 8015576:	58d3      	ldr	r3, [r2, r3]
 8015578:	68db      	ldr	r3, [r3, #12]
 801557a:	68fa      	ldr	r2, [r7, #12]
 801557c:	0010      	movs	r0, r2
 801557e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	2180      	movs	r1, #128	@ 0x80
 8015584:	0018      	movs	r0, r3
 8015586:	f001 fc32 	bl	8016dee <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	0018      	movs	r0, r3
 801558e:	f000 fff8 	bl	8016582 <USBD_CtlReceiveStatus>
 8015592:	e010      	b.n	80155b6 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8015594:	68fa      	ldr	r2, [r7, #12]
 8015596:	23a5      	movs	r3, #165	@ 0xa5
 8015598:	009b      	lsls	r3, r3, #2
 801559a:	58d3      	ldr	r3, [r2, r3]
 801559c:	2b04      	cmp	r3, #4
 801559e:	d005      	beq.n	80155ac <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80155a0:	68fa      	ldr	r2, [r7, #12]
 80155a2:	23a5      	movs	r3, #165	@ 0xa5
 80155a4:	009b      	lsls	r3, r3, #2
 80155a6:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d104      	bne.n	80155b6 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	2180      	movs	r1, #128	@ 0x80
 80155b0:	0018      	movs	r0, r3
 80155b2:	f001 fc1c 	bl	8016dee <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80155b6:	68fa      	ldr	r2, [r7, #12]
 80155b8:	23a8      	movs	r3, #168	@ 0xa8
 80155ba:	009b      	lsls	r3, r3, #2
 80155bc:	5cd3      	ldrb	r3, [r2, r3]
 80155be:	2b01      	cmp	r3, #1
 80155c0:	d124      	bne.n	801560c <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	0018      	movs	r0, r3
 80155c6:	f7ff fe43 	bl	8015250 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80155ca:	68fa      	ldr	r2, [r7, #12]
 80155cc:	23a8      	movs	r3, #168	@ 0xa8
 80155ce:	009b      	lsls	r3, r3, #2
 80155d0:	2100      	movs	r1, #0
 80155d2:	54d1      	strb	r1, [r2, r3]
 80155d4:	e01a      	b.n	801560c <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80155d6:	68fa      	ldr	r2, [r7, #12]
 80155d8:	23ad      	movs	r3, #173	@ 0xad
 80155da:	009b      	lsls	r3, r3, #2
 80155dc:	58d3      	ldr	r3, [r2, r3]
 80155de:	695b      	ldr	r3, [r3, #20]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d011      	beq.n	8015608 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80155e4:	68fa      	ldr	r2, [r7, #12]
 80155e6:	23a7      	movs	r3, #167	@ 0xa7
 80155e8:	009b      	lsls	r3, r3, #2
 80155ea:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80155ec:	2b03      	cmp	r3, #3
 80155ee:	d10b      	bne.n	8015608 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80155f0:	68fa      	ldr	r2, [r7, #12]
 80155f2:	23ad      	movs	r3, #173	@ 0xad
 80155f4:	009b      	lsls	r3, r3, #2
 80155f6:	58d3      	ldr	r3, [r2, r3]
 80155f8:	695b      	ldr	r3, [r3, #20]
 80155fa:	220b      	movs	r2, #11
 80155fc:	18ba      	adds	r2, r7, r2
 80155fe:	7811      	ldrb	r1, [r2, #0]
 8015600:	68fa      	ldr	r2, [r7, #12]
 8015602:	0010      	movs	r0, r2
 8015604:	4798      	blx	r3
 8015606:	e001      	b.n	801560c <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015608:	2302      	movs	r3, #2
 801560a:	e000      	b.n	801560e <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801560c:	2300      	movs	r3, #0
}
 801560e:	0018      	movs	r0, r3
 8015610:	46bd      	mov	sp, r7
 8015612:	b006      	add	sp, #24
 8015614:	bd80      	pop	{r7, pc}

08015616 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015616:	b580      	push	{r7, lr}
 8015618:	b082      	sub	sp, #8
 801561a:	af00      	add	r7, sp, #0
 801561c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801561e:	6878      	ldr	r0, [r7, #4]
 8015620:	2340      	movs	r3, #64	@ 0x40
 8015622:	2200      	movs	r2, #0
 8015624:	2100      	movs	r1, #0
 8015626:	f001 fb80 	bl	8016d2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801562a:	687a      	ldr	r2, [r7, #4]
 801562c:	23ac      	movs	r3, #172	@ 0xac
 801562e:	005b      	lsls	r3, r3, #1
 8015630:	2101      	movs	r1, #1
 8015632:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015634:	687a      	ldr	r2, [r7, #4]
 8015636:	23b2      	movs	r3, #178	@ 0xb2
 8015638:	005b      	lsls	r3, r3, #1
 801563a:	2140      	movs	r1, #64	@ 0x40
 801563c:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801563e:	6878      	ldr	r0, [r7, #4]
 8015640:	2340      	movs	r3, #64	@ 0x40
 8015642:	2200      	movs	r2, #0
 8015644:	2180      	movs	r1, #128	@ 0x80
 8015646:	f001 fb70 	bl	8016d2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	2201      	movs	r2, #1
 801564e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	2240      	movs	r2, #64	@ 0x40
 8015654:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015656:	687a      	ldr	r2, [r7, #4]
 8015658:	23a7      	movs	r3, #167	@ 0xa7
 801565a:	009b      	lsls	r3, r3, #2
 801565c:	2101      	movs	r1, #1
 801565e:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8015660:	687a      	ldr	r2, [r7, #4]
 8015662:	23a5      	movs	r3, #165	@ 0xa5
 8015664:	009b      	lsls	r3, r3, #2
 8015666:	2100      	movs	r1, #0
 8015668:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	2200      	movs	r2, #0
 801566e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015670:	687a      	ldr	r2, [r7, #4]
 8015672:	23a9      	movs	r3, #169	@ 0xa9
 8015674:	009b      	lsls	r3, r3, #2
 8015676:	2100      	movs	r1, #0
 8015678:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801567a:	687a      	ldr	r2, [r7, #4]
 801567c:	23ae      	movs	r3, #174	@ 0xae
 801567e:	009b      	lsls	r3, r3, #2
 8015680:	58d3      	ldr	r3, [r2, r3]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d00a      	beq.n	801569c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015686:	687a      	ldr	r2, [r7, #4]
 8015688:	23ad      	movs	r3, #173	@ 0xad
 801568a:	009b      	lsls	r3, r3, #2
 801568c:	58d3      	ldr	r3, [r2, r3]
 801568e:	685a      	ldr	r2, [r3, #4]
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	685b      	ldr	r3, [r3, #4]
 8015694:	b2d9      	uxtb	r1, r3
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	0018      	movs	r0, r3
 801569a:	4790      	blx	r2
  }

  return USBD_OK;
 801569c:	2300      	movs	r3, #0
}
 801569e:	0018      	movs	r0, r3
 80156a0:	46bd      	mov	sp, r7
 80156a2:	b002      	add	sp, #8
 80156a4:	bd80      	pop	{r7, pc}

080156a6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80156a6:	b580      	push	{r7, lr}
 80156a8:	b082      	sub	sp, #8
 80156aa:	af00      	add	r7, sp, #0
 80156ac:	6078      	str	r0, [r7, #4]
 80156ae:	000a      	movs	r2, r1
 80156b0:	1cfb      	adds	r3, r7, #3
 80156b2:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	1cfa      	adds	r2, r7, #3
 80156b8:	7812      	ldrb	r2, [r2, #0]
 80156ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80156bc:	2300      	movs	r3, #0
}
 80156be:	0018      	movs	r0, r3
 80156c0:	46bd      	mov	sp, r7
 80156c2:	b002      	add	sp, #8
 80156c4:	bd80      	pop	{r7, pc}
	...

080156c8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80156c8:	b580      	push	{r7, lr}
 80156ca:	b082      	sub	sp, #8
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80156d0:	687a      	ldr	r2, [r7, #4]
 80156d2:	23a7      	movs	r3, #167	@ 0xa7
 80156d4:	009b      	lsls	r3, r3, #2
 80156d6:	5cd1      	ldrb	r1, [r2, r3]
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	4a06      	ldr	r2, [pc, #24]	@ (80156f4 <USBD_LL_Suspend+0x2c>)
 80156dc:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80156de:	687a      	ldr	r2, [r7, #4]
 80156e0:	23a7      	movs	r3, #167	@ 0xa7
 80156e2:	009b      	lsls	r3, r3, #2
 80156e4:	2104      	movs	r1, #4
 80156e6:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80156e8:	2300      	movs	r3, #0
}
 80156ea:	0018      	movs	r0, r3
 80156ec:	46bd      	mov	sp, r7
 80156ee:	b002      	add	sp, #8
 80156f0:	bd80      	pop	{r7, pc}
 80156f2:	46c0      	nop			@ (mov r8, r8)
 80156f4:	0000029d 	.word	0x0000029d

080156f8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b082      	sub	sp, #8
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015700:	687a      	ldr	r2, [r7, #4]
 8015702:	23a7      	movs	r3, #167	@ 0xa7
 8015704:	009b      	lsls	r3, r3, #2
 8015706:	5cd3      	ldrb	r3, [r2, r3]
 8015708:	2b04      	cmp	r3, #4
 801570a:	d106      	bne.n	801571a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	4a05      	ldr	r2, [pc, #20]	@ (8015724 <USBD_LL_Resume+0x2c>)
 8015710:	5c99      	ldrb	r1, [r3, r2]
 8015712:	687a      	ldr	r2, [r7, #4]
 8015714:	23a7      	movs	r3, #167	@ 0xa7
 8015716:	009b      	lsls	r3, r3, #2
 8015718:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801571a:	2300      	movs	r3, #0
}
 801571c:	0018      	movs	r0, r3
 801571e:	46bd      	mov	sp, r7
 8015720:	b002      	add	sp, #8
 8015722:	bd80      	pop	{r7, pc}
 8015724:	0000029d 	.word	0x0000029d

08015728 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015728:	b580      	push	{r7, lr}
 801572a:	b082      	sub	sp, #8
 801572c:	af00      	add	r7, sp, #0
 801572e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015730:	687a      	ldr	r2, [r7, #4]
 8015732:	23a7      	movs	r3, #167	@ 0xa7
 8015734:	009b      	lsls	r3, r3, #2
 8015736:	5cd3      	ldrb	r3, [r2, r3]
 8015738:	2b03      	cmp	r3, #3
 801573a:	d10e      	bne.n	801575a <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801573c:	687a      	ldr	r2, [r7, #4]
 801573e:	23ad      	movs	r3, #173	@ 0xad
 8015740:	009b      	lsls	r3, r3, #2
 8015742:	58d3      	ldr	r3, [r2, r3]
 8015744:	69db      	ldr	r3, [r3, #28]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d007      	beq.n	801575a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801574a:	687a      	ldr	r2, [r7, #4]
 801574c:	23ad      	movs	r3, #173	@ 0xad
 801574e:	009b      	lsls	r3, r3, #2
 8015750:	58d3      	ldr	r3, [r2, r3]
 8015752:	69db      	ldr	r3, [r3, #28]
 8015754:	687a      	ldr	r2, [r7, #4]
 8015756:	0010      	movs	r0, r2
 8015758:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801575a:	2300      	movs	r3, #0
}
 801575c:	0018      	movs	r0, r3
 801575e:	46bd      	mov	sp, r7
 8015760:	b002      	add	sp, #8
 8015762:	bd80      	pop	{r7, pc}

08015764 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8015764:	b580      	push	{r7, lr}
 8015766:	b084      	sub	sp, #16
 8015768:	af00      	add	r7, sp, #0
 801576a:	6078      	str	r0, [r7, #4]
 801576c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801576e:	230f      	movs	r3, #15
 8015770:	18fb      	adds	r3, r7, r3
 8015772:	2200      	movs	r2, #0
 8015774:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015776:	683b      	ldr	r3, [r7, #0]
 8015778:	781b      	ldrb	r3, [r3, #0]
 801577a:	001a      	movs	r2, r3
 801577c:	2360      	movs	r3, #96	@ 0x60
 801577e:	4013      	ands	r3, r2
 8015780:	2b40      	cmp	r3, #64	@ 0x40
 8015782:	d004      	beq.n	801578e <USBD_StdDevReq+0x2a>
 8015784:	d84f      	bhi.n	8015826 <USBD_StdDevReq+0xc2>
 8015786:	2b00      	cmp	r3, #0
 8015788:	d00b      	beq.n	80157a2 <USBD_StdDevReq+0x3e>
 801578a:	2b20      	cmp	r3, #32
 801578c:	d14b      	bne.n	8015826 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801578e:	687a      	ldr	r2, [r7, #4]
 8015790:	23ad      	movs	r3, #173	@ 0xad
 8015792:	009b      	lsls	r3, r3, #2
 8015794:	58d3      	ldr	r3, [r2, r3]
 8015796:	689b      	ldr	r3, [r3, #8]
 8015798:	6839      	ldr	r1, [r7, #0]
 801579a:	687a      	ldr	r2, [r7, #4]
 801579c:	0010      	movs	r0, r2
 801579e:	4798      	blx	r3
      break;
 80157a0:	e048      	b.n	8015834 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80157a2:	683b      	ldr	r3, [r7, #0]
 80157a4:	785b      	ldrb	r3, [r3, #1]
 80157a6:	2b09      	cmp	r3, #9
 80157a8:	d835      	bhi.n	8015816 <USBD_StdDevReq+0xb2>
 80157aa:	009a      	lsls	r2, r3, #2
 80157ac:	4b25      	ldr	r3, [pc, #148]	@ (8015844 <USBD_StdDevReq+0xe0>)
 80157ae:	18d3      	adds	r3, r2, r3
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80157b4:	683a      	ldr	r2, [r7, #0]
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	0011      	movs	r1, r2
 80157ba:	0018      	movs	r0, r3
 80157bc:	f000 fa52 	bl	8015c64 <USBD_GetDescriptor>
          break;
 80157c0:	e030      	b.n	8015824 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80157c2:	683a      	ldr	r2, [r7, #0]
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	0011      	movs	r1, r2
 80157c8:	0018      	movs	r0, r3
 80157ca:	f000 fbfd 	bl	8015fc8 <USBD_SetAddress>
          break;
 80157ce:	e029      	b.n	8015824 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80157d0:	683a      	ldr	r2, [r7, #0]
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	0011      	movs	r1, r2
 80157d6:	0018      	movs	r0, r3
 80157d8:	f000 fc4a 	bl	8016070 <USBD_SetConfig>
          break;
 80157dc:	e022      	b.n	8015824 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80157de:	683a      	ldr	r2, [r7, #0]
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	0011      	movs	r1, r2
 80157e4:	0018      	movs	r0, r3
 80157e6:	f000 fce7 	bl	80161b8 <USBD_GetConfig>
          break;
 80157ea:	e01b      	b.n	8015824 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80157ec:	683a      	ldr	r2, [r7, #0]
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	0011      	movs	r1, r2
 80157f2:	0018      	movs	r0, r3
 80157f4:	f000 fd1b 	bl	801622e <USBD_GetStatus>
          break;
 80157f8:	e014      	b.n	8015824 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80157fa:	683a      	ldr	r2, [r7, #0]
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	0011      	movs	r1, r2
 8015800:	0018      	movs	r0, r3
 8015802:	f000 fd4e 	bl	80162a2 <USBD_SetFeature>
          break;
 8015806:	e00d      	b.n	8015824 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015808:	683a      	ldr	r2, [r7, #0]
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	0011      	movs	r1, r2
 801580e:	0018      	movs	r0, r3
 8015810:	f000 fd5d 	bl	80162ce <USBD_ClrFeature>
          break;
 8015814:	e006      	b.n	8015824 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015816:	683a      	ldr	r2, [r7, #0]
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	0011      	movs	r1, r2
 801581c:	0018      	movs	r0, r3
 801581e:	f000 fdb4 	bl	801638a <USBD_CtlError>
          break;
 8015822:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8015824:	e006      	b.n	8015834 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8015826:	683a      	ldr	r2, [r7, #0]
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	0011      	movs	r1, r2
 801582c:	0018      	movs	r0, r3
 801582e:	f000 fdac 	bl	801638a <USBD_CtlError>
      break;
 8015832:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8015834:	230f      	movs	r3, #15
 8015836:	18fb      	adds	r3, r7, r3
 8015838:	781b      	ldrb	r3, [r3, #0]
}
 801583a:	0018      	movs	r0, r3
 801583c:	46bd      	mov	sp, r7
 801583e:	b004      	add	sp, #16
 8015840:	bd80      	pop	{r7, pc}
 8015842:	46c0      	nop			@ (mov r8, r8)
 8015844:	0801b87c 	.word	0x0801b87c

08015848 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8015848:	b5b0      	push	{r4, r5, r7, lr}
 801584a:	b084      	sub	sp, #16
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
 8015850:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015852:	230f      	movs	r3, #15
 8015854:	18fb      	adds	r3, r7, r3
 8015856:	2200      	movs	r2, #0
 8015858:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801585a:	683b      	ldr	r3, [r7, #0]
 801585c:	781b      	ldrb	r3, [r3, #0]
 801585e:	001a      	movs	r2, r3
 8015860:	2360      	movs	r3, #96	@ 0x60
 8015862:	4013      	ands	r3, r2
 8015864:	2b40      	cmp	r3, #64	@ 0x40
 8015866:	d004      	beq.n	8015872 <USBD_StdItfReq+0x2a>
 8015868:	d839      	bhi.n	80158de <USBD_StdItfReq+0x96>
 801586a:	2b00      	cmp	r3, #0
 801586c:	d001      	beq.n	8015872 <USBD_StdItfReq+0x2a>
 801586e:	2b20      	cmp	r3, #32
 8015870:	d135      	bne.n	80158de <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015872:	687a      	ldr	r2, [r7, #4]
 8015874:	23a7      	movs	r3, #167	@ 0xa7
 8015876:	009b      	lsls	r3, r3, #2
 8015878:	5cd3      	ldrb	r3, [r2, r3]
 801587a:	3b01      	subs	r3, #1
 801587c:	2b02      	cmp	r3, #2
 801587e:	d825      	bhi.n	80158cc <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015880:	683b      	ldr	r3, [r7, #0]
 8015882:	889b      	ldrh	r3, [r3, #4]
 8015884:	b2db      	uxtb	r3, r3
 8015886:	2b01      	cmp	r3, #1
 8015888:	d819      	bhi.n	80158be <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801588a:	687a      	ldr	r2, [r7, #4]
 801588c:	23ad      	movs	r3, #173	@ 0xad
 801588e:	009b      	lsls	r3, r3, #2
 8015890:	58d3      	ldr	r3, [r2, r3]
 8015892:	689b      	ldr	r3, [r3, #8]
 8015894:	250f      	movs	r5, #15
 8015896:	197c      	adds	r4, r7, r5
 8015898:	6839      	ldr	r1, [r7, #0]
 801589a:	687a      	ldr	r2, [r7, #4]
 801589c:	0010      	movs	r0, r2
 801589e:	4798      	blx	r3
 80158a0:	0003      	movs	r3, r0
 80158a2:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80158a4:	683b      	ldr	r3, [r7, #0]
 80158a6:	88db      	ldrh	r3, [r3, #6]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d116      	bne.n	80158da <USBD_StdItfReq+0x92>
 80158ac:	197b      	adds	r3, r7, r5
 80158ae:	781b      	ldrb	r3, [r3, #0]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d112      	bne.n	80158da <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	0018      	movs	r0, r3
 80158b8:	f000 fe4f 	bl	801655a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80158bc:	e00d      	b.n	80158da <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80158be:	683a      	ldr	r2, [r7, #0]
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	0011      	movs	r1, r2
 80158c4:	0018      	movs	r0, r3
 80158c6:	f000 fd60 	bl	801638a <USBD_CtlError>
          break;
 80158ca:	e006      	b.n	80158da <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80158cc:	683a      	ldr	r2, [r7, #0]
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	0011      	movs	r1, r2
 80158d2:	0018      	movs	r0, r3
 80158d4:	f000 fd59 	bl	801638a <USBD_CtlError>
          break;
 80158d8:	e000      	b.n	80158dc <USBD_StdItfReq+0x94>
          break;
 80158da:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80158dc:	e006      	b.n	80158ec <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80158de:	683a      	ldr	r2, [r7, #0]
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	0011      	movs	r1, r2
 80158e4:	0018      	movs	r0, r3
 80158e6:	f000 fd50 	bl	801638a <USBD_CtlError>
      break;
 80158ea:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80158ec:	2300      	movs	r3, #0
}
 80158ee:	0018      	movs	r0, r3
 80158f0:	46bd      	mov	sp, r7
 80158f2:	b004      	add	sp, #16
 80158f4:	bdb0      	pop	{r4, r5, r7, pc}

080158f6 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80158f6:	b5b0      	push	{r4, r5, r7, lr}
 80158f8:	b084      	sub	sp, #16
 80158fa:	af00      	add	r7, sp, #0
 80158fc:	6078      	str	r0, [r7, #4]
 80158fe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8015900:	230f      	movs	r3, #15
 8015902:	18fb      	adds	r3, r7, r3
 8015904:	2200      	movs	r2, #0
 8015906:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8015908:	683b      	ldr	r3, [r7, #0]
 801590a:	889a      	ldrh	r2, [r3, #4]
 801590c:	230e      	movs	r3, #14
 801590e:	18fb      	adds	r3, r7, r3
 8015910:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015912:	683b      	ldr	r3, [r7, #0]
 8015914:	781b      	ldrb	r3, [r3, #0]
 8015916:	001a      	movs	r2, r3
 8015918:	2360      	movs	r3, #96	@ 0x60
 801591a:	4013      	ands	r3, r2
 801591c:	2b40      	cmp	r3, #64	@ 0x40
 801591e:	d006      	beq.n	801592e <USBD_StdEPReq+0x38>
 8015920:	d900      	bls.n	8015924 <USBD_StdEPReq+0x2e>
 8015922:	e190      	b.n	8015c46 <USBD_StdEPReq+0x350>
 8015924:	2b00      	cmp	r3, #0
 8015926:	d00c      	beq.n	8015942 <USBD_StdEPReq+0x4c>
 8015928:	2b20      	cmp	r3, #32
 801592a:	d000      	beq.n	801592e <USBD_StdEPReq+0x38>
 801592c:	e18b      	b.n	8015c46 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801592e:	687a      	ldr	r2, [r7, #4]
 8015930:	23ad      	movs	r3, #173	@ 0xad
 8015932:	009b      	lsls	r3, r3, #2
 8015934:	58d3      	ldr	r3, [r2, r3]
 8015936:	689b      	ldr	r3, [r3, #8]
 8015938:	6839      	ldr	r1, [r7, #0]
 801593a:	687a      	ldr	r2, [r7, #4]
 801593c:	0010      	movs	r0, r2
 801593e:	4798      	blx	r3
      break;
 8015940:	e188      	b.n	8015c54 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8015942:	683b      	ldr	r3, [r7, #0]
 8015944:	781b      	ldrb	r3, [r3, #0]
 8015946:	001a      	movs	r2, r3
 8015948:	2360      	movs	r3, #96	@ 0x60
 801594a:	4013      	ands	r3, r2
 801594c:	2b20      	cmp	r3, #32
 801594e:	d10f      	bne.n	8015970 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015950:	687a      	ldr	r2, [r7, #4]
 8015952:	23ad      	movs	r3, #173	@ 0xad
 8015954:	009b      	lsls	r3, r3, #2
 8015956:	58d3      	ldr	r3, [r2, r3]
 8015958:	689b      	ldr	r3, [r3, #8]
 801595a:	250f      	movs	r5, #15
 801595c:	197c      	adds	r4, r7, r5
 801595e:	6839      	ldr	r1, [r7, #0]
 8015960:	687a      	ldr	r2, [r7, #4]
 8015962:	0010      	movs	r0, r2
 8015964:	4798      	blx	r3
 8015966:	0003      	movs	r3, r0
 8015968:	7023      	strb	r3, [r4, #0]

        return ret;
 801596a:	197b      	adds	r3, r7, r5
 801596c:	781b      	ldrb	r3, [r3, #0]
 801596e:	e174      	b.n	8015c5a <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8015970:	683b      	ldr	r3, [r7, #0]
 8015972:	785b      	ldrb	r3, [r3, #1]
 8015974:	2b03      	cmp	r3, #3
 8015976:	d007      	beq.n	8015988 <USBD_StdEPReq+0x92>
 8015978:	dd00      	ble.n	801597c <USBD_StdEPReq+0x86>
 801597a:	e15c      	b.n	8015c36 <USBD_StdEPReq+0x340>
 801597c:	2b00      	cmp	r3, #0
 801597e:	d100      	bne.n	8015982 <USBD_StdEPReq+0x8c>
 8015980:	e092      	b.n	8015aa8 <USBD_StdEPReq+0x1b2>
 8015982:	2b01      	cmp	r3, #1
 8015984:	d04b      	beq.n	8015a1e <USBD_StdEPReq+0x128>
 8015986:	e156      	b.n	8015c36 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015988:	687a      	ldr	r2, [r7, #4]
 801598a:	23a7      	movs	r3, #167	@ 0xa7
 801598c:	009b      	lsls	r3, r3, #2
 801598e:	5cd3      	ldrb	r3, [r2, r3]
 8015990:	2b02      	cmp	r3, #2
 8015992:	d002      	beq.n	801599a <USBD_StdEPReq+0xa4>
 8015994:	2b03      	cmp	r3, #3
 8015996:	d01d      	beq.n	80159d4 <USBD_StdEPReq+0xde>
 8015998:	e039      	b.n	8015a0e <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801599a:	220e      	movs	r2, #14
 801599c:	18bb      	adds	r3, r7, r2
 801599e:	781b      	ldrb	r3, [r3, #0]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d010      	beq.n	80159c6 <USBD_StdEPReq+0xd0>
 80159a4:	18bb      	adds	r3, r7, r2
 80159a6:	781b      	ldrb	r3, [r3, #0]
 80159a8:	2b80      	cmp	r3, #128	@ 0x80
 80159aa:	d00c      	beq.n	80159c6 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80159ac:	18bb      	adds	r3, r7, r2
 80159ae:	781a      	ldrb	r2, [r3, #0]
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	0011      	movs	r1, r2
 80159b4:	0018      	movs	r0, r3
 80159b6:	f001 fa1a 	bl	8016dee <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	2180      	movs	r1, #128	@ 0x80
 80159be:	0018      	movs	r0, r3
 80159c0:	f001 fa15 	bl	8016dee <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80159c4:	e02a      	b.n	8015a1c <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80159c6:	683a      	ldr	r2, [r7, #0]
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	0011      	movs	r1, r2
 80159cc:	0018      	movs	r0, r3
 80159ce:	f000 fcdc 	bl	801638a <USBD_CtlError>
              break;
 80159d2:	e023      	b.n	8015a1c <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80159d4:	683b      	ldr	r3, [r7, #0]
 80159d6:	885b      	ldrh	r3, [r3, #2]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d113      	bne.n	8015a04 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 80159dc:	220e      	movs	r2, #14
 80159de:	18bb      	adds	r3, r7, r2
 80159e0:	781b      	ldrb	r3, [r3, #0]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d00e      	beq.n	8015a04 <USBD_StdEPReq+0x10e>
 80159e6:	18bb      	adds	r3, r7, r2
 80159e8:	781b      	ldrb	r3, [r3, #0]
 80159ea:	2b80      	cmp	r3, #128	@ 0x80
 80159ec:	d00a      	beq.n	8015a04 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80159ee:	683b      	ldr	r3, [r7, #0]
 80159f0:	88db      	ldrh	r3, [r3, #6]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d106      	bne.n	8015a04 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80159f6:	18bb      	adds	r3, r7, r2
 80159f8:	781a      	ldrb	r2, [r3, #0]
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	0011      	movs	r1, r2
 80159fe:	0018      	movs	r0, r3
 8015a00:	f001 f9f5 	bl	8016dee <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	0018      	movs	r0, r3
 8015a08:	f000 fda7 	bl	801655a <USBD_CtlSendStatus>

              break;
 8015a0c:	e006      	b.n	8015a1c <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8015a0e:	683a      	ldr	r2, [r7, #0]
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	0011      	movs	r1, r2
 8015a14:	0018      	movs	r0, r3
 8015a16:	f000 fcb8 	bl	801638a <USBD_CtlError>
              break;
 8015a1a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8015a1c:	e112      	b.n	8015c44 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015a1e:	687a      	ldr	r2, [r7, #4]
 8015a20:	23a7      	movs	r3, #167	@ 0xa7
 8015a22:	009b      	lsls	r3, r3, #2
 8015a24:	5cd3      	ldrb	r3, [r2, r3]
 8015a26:	2b02      	cmp	r3, #2
 8015a28:	d002      	beq.n	8015a30 <USBD_StdEPReq+0x13a>
 8015a2a:	2b03      	cmp	r3, #3
 8015a2c:	d01d      	beq.n	8015a6a <USBD_StdEPReq+0x174>
 8015a2e:	e032      	b.n	8015a96 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015a30:	220e      	movs	r2, #14
 8015a32:	18bb      	adds	r3, r7, r2
 8015a34:	781b      	ldrb	r3, [r3, #0]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d010      	beq.n	8015a5c <USBD_StdEPReq+0x166>
 8015a3a:	18bb      	adds	r3, r7, r2
 8015a3c:	781b      	ldrb	r3, [r3, #0]
 8015a3e:	2b80      	cmp	r3, #128	@ 0x80
 8015a40:	d00c      	beq.n	8015a5c <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8015a42:	18bb      	adds	r3, r7, r2
 8015a44:	781a      	ldrb	r2, [r3, #0]
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	0011      	movs	r1, r2
 8015a4a:	0018      	movs	r0, r3
 8015a4c:	f001 f9cf 	bl	8016dee <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	2180      	movs	r1, #128	@ 0x80
 8015a54:	0018      	movs	r0, r3
 8015a56:	f001 f9ca 	bl	8016dee <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015a5a:	e024      	b.n	8015aa6 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8015a5c:	683a      	ldr	r2, [r7, #0]
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	0011      	movs	r1, r2
 8015a62:	0018      	movs	r0, r3
 8015a64:	f000 fc91 	bl	801638a <USBD_CtlError>
              break;
 8015a68:	e01d      	b.n	8015aa6 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015a6a:	683b      	ldr	r3, [r7, #0]
 8015a6c:	885b      	ldrh	r3, [r3, #2]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d118      	bne.n	8015aa4 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015a72:	210e      	movs	r1, #14
 8015a74:	187b      	adds	r3, r7, r1
 8015a76:	781b      	ldrb	r3, [r3, #0]
 8015a78:	227f      	movs	r2, #127	@ 0x7f
 8015a7a:	4013      	ands	r3, r2
 8015a7c:	d006      	beq.n	8015a8c <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8015a7e:	187b      	adds	r3, r7, r1
 8015a80:	781a      	ldrb	r2, [r3, #0]
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	0011      	movs	r1, r2
 8015a86:	0018      	movs	r0, r3
 8015a88:	f001 f9dc 	bl	8016e44 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	0018      	movs	r0, r3
 8015a90:	f000 fd63 	bl	801655a <USBD_CtlSendStatus>
              }
              break;
 8015a94:	e006      	b.n	8015aa4 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8015a96:	683a      	ldr	r2, [r7, #0]
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	0011      	movs	r1, r2
 8015a9c:	0018      	movs	r0, r3
 8015a9e:	f000 fc74 	bl	801638a <USBD_CtlError>
              break;
 8015aa2:	e000      	b.n	8015aa6 <USBD_StdEPReq+0x1b0>
              break;
 8015aa4:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8015aa6:	e0cd      	b.n	8015c44 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015aa8:	687a      	ldr	r2, [r7, #4]
 8015aaa:	23a7      	movs	r3, #167	@ 0xa7
 8015aac:	009b      	lsls	r3, r3, #2
 8015aae:	5cd3      	ldrb	r3, [r2, r3]
 8015ab0:	2b02      	cmp	r3, #2
 8015ab2:	d002      	beq.n	8015aba <USBD_StdEPReq+0x1c4>
 8015ab4:	2b03      	cmp	r3, #3
 8015ab6:	d03c      	beq.n	8015b32 <USBD_StdEPReq+0x23c>
 8015ab8:	e0b5      	b.n	8015c26 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015aba:	220e      	movs	r2, #14
 8015abc:	18bb      	adds	r3, r7, r2
 8015abe:	781b      	ldrb	r3, [r3, #0]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d00a      	beq.n	8015ada <USBD_StdEPReq+0x1e4>
 8015ac4:	18bb      	adds	r3, r7, r2
 8015ac6:	781b      	ldrb	r3, [r3, #0]
 8015ac8:	2b80      	cmp	r3, #128	@ 0x80
 8015aca:	d006      	beq.n	8015ada <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8015acc:	683a      	ldr	r2, [r7, #0]
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	0011      	movs	r1, r2
 8015ad2:	0018      	movs	r0, r3
 8015ad4:	f000 fc59 	bl	801638a <USBD_CtlError>
                break;
 8015ad8:	e0ac      	b.n	8015c34 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015ada:	220e      	movs	r2, #14
 8015adc:	18bb      	adds	r3, r7, r2
 8015ade:	781b      	ldrb	r3, [r3, #0]
 8015ae0:	b25b      	sxtb	r3, r3
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	da0c      	bge.n	8015b00 <USBD_StdEPReq+0x20a>
 8015ae6:	18bb      	adds	r3, r7, r2
 8015ae8:	781b      	ldrb	r3, [r3, #0]
 8015aea:	227f      	movs	r2, #127	@ 0x7f
 8015aec:	401a      	ands	r2, r3
 8015aee:	0013      	movs	r3, r2
 8015af0:	009b      	lsls	r3, r3, #2
 8015af2:	189b      	adds	r3, r3, r2
 8015af4:	009b      	lsls	r3, r3, #2
 8015af6:	3310      	adds	r3, #16
 8015af8:	687a      	ldr	r2, [r7, #4]
 8015afa:	18d3      	adds	r3, r2, r3
 8015afc:	3304      	adds	r3, #4
 8015afe:	e00d      	b.n	8015b1c <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015b00:	230e      	movs	r3, #14
 8015b02:	18fb      	adds	r3, r7, r3
 8015b04:	781b      	ldrb	r3, [r3, #0]
 8015b06:	227f      	movs	r2, #127	@ 0x7f
 8015b08:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b0a:	0013      	movs	r3, r2
 8015b0c:	009b      	lsls	r3, r3, #2
 8015b0e:	189b      	adds	r3, r3, r2
 8015b10:	009b      	lsls	r3, r3, #2
 8015b12:	3351      	adds	r3, #81	@ 0x51
 8015b14:	33ff      	adds	r3, #255	@ 0xff
 8015b16:	687a      	ldr	r2, [r7, #4]
 8015b18:	18d3      	adds	r3, r2, r3
 8015b1a:	3304      	adds	r3, #4
 8015b1c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015b1e:	68bb      	ldr	r3, [r7, #8]
 8015b20:	2200      	movs	r2, #0
 8015b22:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8015b24:	68b9      	ldr	r1, [r7, #8]
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	2202      	movs	r2, #2
 8015b2a:	0018      	movs	r0, r3
 8015b2c:	f000 fcab 	bl	8016486 <USBD_CtlSendData>
              break;
 8015b30:	e080      	b.n	8015c34 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015b32:	220e      	movs	r2, #14
 8015b34:	18bb      	adds	r3, r7, r2
 8015b36:	781b      	ldrb	r3, [r3, #0]
 8015b38:	b25b      	sxtb	r3, r3
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	da14      	bge.n	8015b68 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015b3e:	18bb      	adds	r3, r7, r2
 8015b40:	781b      	ldrb	r3, [r3, #0]
 8015b42:	220f      	movs	r2, #15
 8015b44:	401a      	ands	r2, r3
 8015b46:	6879      	ldr	r1, [r7, #4]
 8015b48:	0013      	movs	r3, r2
 8015b4a:	009b      	lsls	r3, r3, #2
 8015b4c:	189b      	adds	r3, r3, r2
 8015b4e:	009b      	lsls	r3, r3, #2
 8015b50:	18cb      	adds	r3, r1, r3
 8015b52:	3318      	adds	r3, #24
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d11e      	bne.n	8015b98 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8015b5a:	683a      	ldr	r2, [r7, #0]
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	0011      	movs	r1, r2
 8015b60:	0018      	movs	r0, r3
 8015b62:	f000 fc12 	bl	801638a <USBD_CtlError>
                  break;
 8015b66:	e065      	b.n	8015c34 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015b68:	230e      	movs	r3, #14
 8015b6a:	18fb      	adds	r3, r7, r3
 8015b6c:	781b      	ldrb	r3, [r3, #0]
 8015b6e:	220f      	movs	r2, #15
 8015b70:	401a      	ands	r2, r3
 8015b72:	6878      	ldr	r0, [r7, #4]
 8015b74:	23ac      	movs	r3, #172	@ 0xac
 8015b76:	0059      	lsls	r1, r3, #1
 8015b78:	0013      	movs	r3, r2
 8015b7a:	009b      	lsls	r3, r3, #2
 8015b7c:	189b      	adds	r3, r3, r2
 8015b7e:	009b      	lsls	r3, r3, #2
 8015b80:	18c3      	adds	r3, r0, r3
 8015b82:	185b      	adds	r3, r3, r1
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d106      	bne.n	8015b98 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8015b8a:	683a      	ldr	r2, [r7, #0]
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	0011      	movs	r1, r2
 8015b90:	0018      	movs	r0, r3
 8015b92:	f000 fbfa 	bl	801638a <USBD_CtlError>
                  break;
 8015b96:	e04d      	b.n	8015c34 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b98:	220e      	movs	r2, #14
 8015b9a:	18bb      	adds	r3, r7, r2
 8015b9c:	781b      	ldrb	r3, [r3, #0]
 8015b9e:	b25b      	sxtb	r3, r3
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	da0c      	bge.n	8015bbe <USBD_StdEPReq+0x2c8>
 8015ba4:	18bb      	adds	r3, r7, r2
 8015ba6:	781b      	ldrb	r3, [r3, #0]
 8015ba8:	227f      	movs	r2, #127	@ 0x7f
 8015baa:	401a      	ands	r2, r3
 8015bac:	0013      	movs	r3, r2
 8015bae:	009b      	lsls	r3, r3, #2
 8015bb0:	189b      	adds	r3, r3, r2
 8015bb2:	009b      	lsls	r3, r3, #2
 8015bb4:	3310      	adds	r3, #16
 8015bb6:	687a      	ldr	r2, [r7, #4]
 8015bb8:	18d3      	adds	r3, r2, r3
 8015bba:	3304      	adds	r3, #4
 8015bbc:	e00d      	b.n	8015bda <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015bbe:	230e      	movs	r3, #14
 8015bc0:	18fb      	adds	r3, r7, r3
 8015bc2:	781b      	ldrb	r3, [r3, #0]
 8015bc4:	227f      	movs	r2, #127	@ 0x7f
 8015bc6:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015bc8:	0013      	movs	r3, r2
 8015bca:	009b      	lsls	r3, r3, #2
 8015bcc:	189b      	adds	r3, r3, r2
 8015bce:	009b      	lsls	r3, r3, #2
 8015bd0:	3351      	adds	r3, #81	@ 0x51
 8015bd2:	33ff      	adds	r3, #255	@ 0xff
 8015bd4:	687a      	ldr	r2, [r7, #4]
 8015bd6:	18d3      	adds	r3, r2, r3
 8015bd8:	3304      	adds	r3, #4
 8015bda:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015bdc:	220e      	movs	r2, #14
 8015bde:	18bb      	adds	r3, r7, r2
 8015be0:	781b      	ldrb	r3, [r3, #0]
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d003      	beq.n	8015bee <USBD_StdEPReq+0x2f8>
 8015be6:	18bb      	adds	r3, r7, r2
 8015be8:	781b      	ldrb	r3, [r3, #0]
 8015bea:	2b80      	cmp	r3, #128	@ 0x80
 8015bec:	d103      	bne.n	8015bf6 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8015bee:	68bb      	ldr	r3, [r7, #8]
 8015bf0:	2200      	movs	r2, #0
 8015bf2:	601a      	str	r2, [r3, #0]
 8015bf4:	e010      	b.n	8015c18 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8015bf6:	230e      	movs	r3, #14
 8015bf8:	18fb      	adds	r3, r7, r3
 8015bfa:	781a      	ldrb	r2, [r3, #0]
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	0011      	movs	r1, r2
 8015c00:	0018      	movs	r0, r3
 8015c02:	f001 f94a 	bl	8016e9a <USBD_LL_IsStallEP>
 8015c06:	1e03      	subs	r3, r0, #0
 8015c08:	d003      	beq.n	8015c12 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8015c0a:	68bb      	ldr	r3, [r7, #8]
 8015c0c:	2201      	movs	r2, #1
 8015c0e:	601a      	str	r2, [r3, #0]
 8015c10:	e002      	b.n	8015c18 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8015c12:	68bb      	ldr	r3, [r7, #8]
 8015c14:	2200      	movs	r2, #0
 8015c16:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8015c18:	68b9      	ldr	r1, [r7, #8]
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	2202      	movs	r2, #2
 8015c1e:	0018      	movs	r0, r3
 8015c20:	f000 fc31 	bl	8016486 <USBD_CtlSendData>
              break;
 8015c24:	e006      	b.n	8015c34 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8015c26:	683a      	ldr	r2, [r7, #0]
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	0011      	movs	r1, r2
 8015c2c:	0018      	movs	r0, r3
 8015c2e:	f000 fbac 	bl	801638a <USBD_CtlError>
              break;
 8015c32:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8015c34:	e006      	b.n	8015c44 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8015c36:	683a      	ldr	r2, [r7, #0]
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	0011      	movs	r1, r2
 8015c3c:	0018      	movs	r0, r3
 8015c3e:	f000 fba4 	bl	801638a <USBD_CtlError>
          break;
 8015c42:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8015c44:	e006      	b.n	8015c54 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8015c46:	683a      	ldr	r2, [r7, #0]
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	0011      	movs	r1, r2
 8015c4c:	0018      	movs	r0, r3
 8015c4e:	f000 fb9c 	bl	801638a <USBD_CtlError>
      break;
 8015c52:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8015c54:	230f      	movs	r3, #15
 8015c56:	18fb      	adds	r3, r7, r3
 8015c58:	781b      	ldrb	r3, [r3, #0]
}
 8015c5a:	0018      	movs	r0, r3
 8015c5c:	46bd      	mov	sp, r7
 8015c5e:	b004      	add	sp, #16
 8015c60:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015c64 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8015c64:	b580      	push	{r7, lr}
 8015c66:	b084      	sub	sp, #16
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	6078      	str	r0, [r7, #4]
 8015c6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015c6e:	2308      	movs	r3, #8
 8015c70:	18fb      	adds	r3, r7, r3
 8015c72:	2200      	movs	r2, #0
 8015c74:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8015c76:	2300      	movs	r3, #0
 8015c78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015c7a:	230b      	movs	r3, #11
 8015c7c:	18fb      	adds	r3, r7, r3
 8015c7e:	2200      	movs	r2, #0
 8015c80:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8015c82:	683b      	ldr	r3, [r7, #0]
 8015c84:	885b      	ldrh	r3, [r3, #2]
 8015c86:	0a1b      	lsrs	r3, r3, #8
 8015c88:	b29b      	uxth	r3, r3
 8015c8a:	2b07      	cmp	r3, #7
 8015c8c:	d900      	bls.n	8015c90 <USBD_GetDescriptor+0x2c>
 8015c8e:	e159      	b.n	8015f44 <USBD_GetDescriptor+0x2e0>
 8015c90:	009a      	lsls	r2, r3, #2
 8015c92:	4bcb      	ldr	r3, [pc, #812]	@ (8015fc0 <USBD_GetDescriptor+0x35c>)
 8015c94:	18d3      	adds	r3, r2, r3
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015c9a:	687a      	ldr	r2, [r7, #4]
 8015c9c:	23ac      	movs	r3, #172	@ 0xac
 8015c9e:	009b      	lsls	r3, r3, #2
 8015ca0:	58d3      	ldr	r3, [r2, r3]
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	687a      	ldr	r2, [r7, #4]
 8015ca6:	7c12      	ldrb	r2, [r2, #16]
 8015ca8:	2108      	movs	r1, #8
 8015caa:	1879      	adds	r1, r7, r1
 8015cac:	0010      	movs	r0, r2
 8015cae:	4798      	blx	r3
 8015cb0:	0003      	movs	r3, r0
 8015cb2:	60fb      	str	r3, [r7, #12]
      break;
 8015cb4:	e153      	b.n	8015f5e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	7c1b      	ldrb	r3, [r3, #16]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d10f      	bne.n	8015cde <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8015cbe:	687a      	ldr	r2, [r7, #4]
 8015cc0:	23ad      	movs	r3, #173	@ 0xad
 8015cc2:	009b      	lsls	r3, r3, #2
 8015cc4:	58d3      	ldr	r3, [r2, r3]
 8015cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015cc8:	2208      	movs	r2, #8
 8015cca:	18ba      	adds	r2, r7, r2
 8015ccc:	0010      	movs	r0, r2
 8015cce:	4798      	blx	r3
 8015cd0:	0003      	movs	r3, r0
 8015cd2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	3301      	adds	r3, #1
 8015cd8:	2202      	movs	r2, #2
 8015cda:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015cdc:	e13f      	b.n	8015f5e <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8015cde:	687a      	ldr	r2, [r7, #4]
 8015ce0:	23ad      	movs	r3, #173	@ 0xad
 8015ce2:	009b      	lsls	r3, r3, #2
 8015ce4:	58d3      	ldr	r3, [r2, r3]
 8015ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ce8:	2208      	movs	r2, #8
 8015cea:	18ba      	adds	r2, r7, r2
 8015cec:	0010      	movs	r0, r2
 8015cee:	4798      	blx	r3
 8015cf0:	0003      	movs	r3, r0
 8015cf2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	3301      	adds	r3, #1
 8015cf8:	2202      	movs	r2, #2
 8015cfa:	701a      	strb	r2, [r3, #0]
      break;
 8015cfc:	e12f      	b.n	8015f5e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015cfe:	683b      	ldr	r3, [r7, #0]
 8015d00:	885b      	ldrh	r3, [r3, #2]
 8015d02:	b2db      	uxtb	r3, r3
 8015d04:	2b05      	cmp	r3, #5
 8015d06:	d900      	bls.n	8015d0a <USBD_GetDescriptor+0xa6>
 8015d08:	e0d0      	b.n	8015eac <USBD_GetDescriptor+0x248>
 8015d0a:	009a      	lsls	r2, r3, #2
 8015d0c:	4bad      	ldr	r3, [pc, #692]	@ (8015fc4 <USBD_GetDescriptor+0x360>)
 8015d0e:	18d3      	adds	r3, r2, r3
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015d14:	687a      	ldr	r2, [r7, #4]
 8015d16:	23ac      	movs	r3, #172	@ 0xac
 8015d18:	009b      	lsls	r3, r3, #2
 8015d1a:	58d3      	ldr	r3, [r2, r3]
 8015d1c:	685b      	ldr	r3, [r3, #4]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d00d      	beq.n	8015d3e <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015d22:	687a      	ldr	r2, [r7, #4]
 8015d24:	23ac      	movs	r3, #172	@ 0xac
 8015d26:	009b      	lsls	r3, r3, #2
 8015d28:	58d3      	ldr	r3, [r2, r3]
 8015d2a:	685b      	ldr	r3, [r3, #4]
 8015d2c:	687a      	ldr	r2, [r7, #4]
 8015d2e:	7c12      	ldrb	r2, [r2, #16]
 8015d30:	2108      	movs	r1, #8
 8015d32:	1879      	adds	r1, r7, r1
 8015d34:	0010      	movs	r0, r2
 8015d36:	4798      	blx	r3
 8015d38:	0003      	movs	r3, r0
 8015d3a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d3c:	e0c3      	b.n	8015ec6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8015d3e:	683a      	ldr	r2, [r7, #0]
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	0011      	movs	r1, r2
 8015d44:	0018      	movs	r0, r3
 8015d46:	f000 fb20 	bl	801638a <USBD_CtlError>
            err++;
 8015d4a:	210b      	movs	r1, #11
 8015d4c:	187b      	adds	r3, r7, r1
 8015d4e:	781a      	ldrb	r2, [r3, #0]
 8015d50:	187b      	adds	r3, r7, r1
 8015d52:	3201      	adds	r2, #1
 8015d54:	701a      	strb	r2, [r3, #0]
          break;
 8015d56:	e0b6      	b.n	8015ec6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015d58:	687a      	ldr	r2, [r7, #4]
 8015d5a:	23ac      	movs	r3, #172	@ 0xac
 8015d5c:	009b      	lsls	r3, r3, #2
 8015d5e:	58d3      	ldr	r3, [r2, r3]
 8015d60:	689b      	ldr	r3, [r3, #8]
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d00d      	beq.n	8015d82 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015d66:	687a      	ldr	r2, [r7, #4]
 8015d68:	23ac      	movs	r3, #172	@ 0xac
 8015d6a:	009b      	lsls	r3, r3, #2
 8015d6c:	58d3      	ldr	r3, [r2, r3]
 8015d6e:	689b      	ldr	r3, [r3, #8]
 8015d70:	687a      	ldr	r2, [r7, #4]
 8015d72:	7c12      	ldrb	r2, [r2, #16]
 8015d74:	2108      	movs	r1, #8
 8015d76:	1879      	adds	r1, r7, r1
 8015d78:	0010      	movs	r0, r2
 8015d7a:	4798      	blx	r3
 8015d7c:	0003      	movs	r3, r0
 8015d7e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d80:	e0a1      	b.n	8015ec6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8015d82:	683a      	ldr	r2, [r7, #0]
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	0011      	movs	r1, r2
 8015d88:	0018      	movs	r0, r3
 8015d8a:	f000 fafe 	bl	801638a <USBD_CtlError>
            err++;
 8015d8e:	210b      	movs	r1, #11
 8015d90:	187b      	adds	r3, r7, r1
 8015d92:	781a      	ldrb	r2, [r3, #0]
 8015d94:	187b      	adds	r3, r7, r1
 8015d96:	3201      	adds	r2, #1
 8015d98:	701a      	strb	r2, [r3, #0]
          break;
 8015d9a:	e094      	b.n	8015ec6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015d9c:	687a      	ldr	r2, [r7, #4]
 8015d9e:	23ac      	movs	r3, #172	@ 0xac
 8015da0:	009b      	lsls	r3, r3, #2
 8015da2:	58d3      	ldr	r3, [r2, r3]
 8015da4:	68db      	ldr	r3, [r3, #12]
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d00d      	beq.n	8015dc6 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015daa:	687a      	ldr	r2, [r7, #4]
 8015dac:	23ac      	movs	r3, #172	@ 0xac
 8015dae:	009b      	lsls	r3, r3, #2
 8015db0:	58d3      	ldr	r3, [r2, r3]
 8015db2:	68db      	ldr	r3, [r3, #12]
 8015db4:	687a      	ldr	r2, [r7, #4]
 8015db6:	7c12      	ldrb	r2, [r2, #16]
 8015db8:	2108      	movs	r1, #8
 8015dba:	1879      	adds	r1, r7, r1
 8015dbc:	0010      	movs	r0, r2
 8015dbe:	4798      	blx	r3
 8015dc0:	0003      	movs	r3, r0
 8015dc2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015dc4:	e07f      	b.n	8015ec6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8015dc6:	683a      	ldr	r2, [r7, #0]
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	0011      	movs	r1, r2
 8015dcc:	0018      	movs	r0, r3
 8015dce:	f000 fadc 	bl	801638a <USBD_CtlError>
            err++;
 8015dd2:	210b      	movs	r1, #11
 8015dd4:	187b      	adds	r3, r7, r1
 8015dd6:	781a      	ldrb	r2, [r3, #0]
 8015dd8:	187b      	adds	r3, r7, r1
 8015dda:	3201      	adds	r2, #1
 8015ddc:	701a      	strb	r2, [r3, #0]
          break;
 8015dde:	e072      	b.n	8015ec6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015de0:	687a      	ldr	r2, [r7, #4]
 8015de2:	23ac      	movs	r3, #172	@ 0xac
 8015de4:	009b      	lsls	r3, r3, #2
 8015de6:	58d3      	ldr	r3, [r2, r3]
 8015de8:	691b      	ldr	r3, [r3, #16]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d00d      	beq.n	8015e0a <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015dee:	687a      	ldr	r2, [r7, #4]
 8015df0:	23ac      	movs	r3, #172	@ 0xac
 8015df2:	009b      	lsls	r3, r3, #2
 8015df4:	58d3      	ldr	r3, [r2, r3]
 8015df6:	691b      	ldr	r3, [r3, #16]
 8015df8:	687a      	ldr	r2, [r7, #4]
 8015dfa:	7c12      	ldrb	r2, [r2, #16]
 8015dfc:	2108      	movs	r1, #8
 8015dfe:	1879      	adds	r1, r7, r1
 8015e00:	0010      	movs	r0, r2
 8015e02:	4798      	blx	r3
 8015e04:	0003      	movs	r3, r0
 8015e06:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e08:	e05d      	b.n	8015ec6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8015e0a:	683a      	ldr	r2, [r7, #0]
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	0011      	movs	r1, r2
 8015e10:	0018      	movs	r0, r3
 8015e12:	f000 faba 	bl	801638a <USBD_CtlError>
            err++;
 8015e16:	210b      	movs	r1, #11
 8015e18:	187b      	adds	r3, r7, r1
 8015e1a:	781a      	ldrb	r2, [r3, #0]
 8015e1c:	187b      	adds	r3, r7, r1
 8015e1e:	3201      	adds	r2, #1
 8015e20:	701a      	strb	r2, [r3, #0]
          break;
 8015e22:	e050      	b.n	8015ec6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015e24:	687a      	ldr	r2, [r7, #4]
 8015e26:	23ac      	movs	r3, #172	@ 0xac
 8015e28:	009b      	lsls	r3, r3, #2
 8015e2a:	58d3      	ldr	r3, [r2, r3]
 8015e2c:	695b      	ldr	r3, [r3, #20]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d00d      	beq.n	8015e4e <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015e32:	687a      	ldr	r2, [r7, #4]
 8015e34:	23ac      	movs	r3, #172	@ 0xac
 8015e36:	009b      	lsls	r3, r3, #2
 8015e38:	58d3      	ldr	r3, [r2, r3]
 8015e3a:	695b      	ldr	r3, [r3, #20]
 8015e3c:	687a      	ldr	r2, [r7, #4]
 8015e3e:	7c12      	ldrb	r2, [r2, #16]
 8015e40:	2108      	movs	r1, #8
 8015e42:	1879      	adds	r1, r7, r1
 8015e44:	0010      	movs	r0, r2
 8015e46:	4798      	blx	r3
 8015e48:	0003      	movs	r3, r0
 8015e4a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e4c:	e03b      	b.n	8015ec6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8015e4e:	683a      	ldr	r2, [r7, #0]
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	0011      	movs	r1, r2
 8015e54:	0018      	movs	r0, r3
 8015e56:	f000 fa98 	bl	801638a <USBD_CtlError>
            err++;
 8015e5a:	210b      	movs	r1, #11
 8015e5c:	187b      	adds	r3, r7, r1
 8015e5e:	781a      	ldrb	r2, [r3, #0]
 8015e60:	187b      	adds	r3, r7, r1
 8015e62:	3201      	adds	r2, #1
 8015e64:	701a      	strb	r2, [r3, #0]
          break;
 8015e66:	e02e      	b.n	8015ec6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015e68:	687a      	ldr	r2, [r7, #4]
 8015e6a:	23ac      	movs	r3, #172	@ 0xac
 8015e6c:	009b      	lsls	r3, r3, #2
 8015e6e:	58d3      	ldr	r3, [r2, r3]
 8015e70:	699b      	ldr	r3, [r3, #24]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d00d      	beq.n	8015e92 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015e76:	687a      	ldr	r2, [r7, #4]
 8015e78:	23ac      	movs	r3, #172	@ 0xac
 8015e7a:	009b      	lsls	r3, r3, #2
 8015e7c:	58d3      	ldr	r3, [r2, r3]
 8015e7e:	699b      	ldr	r3, [r3, #24]
 8015e80:	687a      	ldr	r2, [r7, #4]
 8015e82:	7c12      	ldrb	r2, [r2, #16]
 8015e84:	2108      	movs	r1, #8
 8015e86:	1879      	adds	r1, r7, r1
 8015e88:	0010      	movs	r0, r2
 8015e8a:	4798      	blx	r3
 8015e8c:	0003      	movs	r3, r0
 8015e8e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e90:	e019      	b.n	8015ec6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8015e92:	683a      	ldr	r2, [r7, #0]
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	0011      	movs	r1, r2
 8015e98:	0018      	movs	r0, r3
 8015e9a:	f000 fa76 	bl	801638a <USBD_CtlError>
            err++;
 8015e9e:	210b      	movs	r1, #11
 8015ea0:	187b      	adds	r3, r7, r1
 8015ea2:	781a      	ldrb	r2, [r3, #0]
 8015ea4:	187b      	adds	r3, r7, r1
 8015ea6:	3201      	adds	r2, #1
 8015ea8:	701a      	strb	r2, [r3, #0]
          break;
 8015eaa:	e00c      	b.n	8015ec6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8015eac:	683a      	ldr	r2, [r7, #0]
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	0011      	movs	r1, r2
 8015eb2:	0018      	movs	r0, r3
 8015eb4:	f000 fa69 	bl	801638a <USBD_CtlError>
          err++;
 8015eb8:	210b      	movs	r1, #11
 8015eba:	187b      	adds	r3, r7, r1
 8015ebc:	781a      	ldrb	r2, [r3, #0]
 8015ebe:	187b      	adds	r3, r7, r1
 8015ec0:	3201      	adds	r2, #1
 8015ec2:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8015ec4:	e04b      	b.n	8015f5e <USBD_GetDescriptor+0x2fa>
 8015ec6:	e04a      	b.n	8015f5e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	7c1b      	ldrb	r3, [r3, #16]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d10b      	bne.n	8015ee8 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8015ed0:	687a      	ldr	r2, [r7, #4]
 8015ed2:	23ad      	movs	r3, #173	@ 0xad
 8015ed4:	009b      	lsls	r3, r3, #2
 8015ed6:	58d3      	ldr	r3, [r2, r3]
 8015ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015eda:	2208      	movs	r2, #8
 8015edc:	18ba      	adds	r2, r7, r2
 8015ede:	0010      	movs	r0, r2
 8015ee0:	4798      	blx	r3
 8015ee2:	0003      	movs	r3, r0
 8015ee4:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015ee6:	e03a      	b.n	8015f5e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8015ee8:	683a      	ldr	r2, [r7, #0]
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	0011      	movs	r1, r2
 8015eee:	0018      	movs	r0, r3
 8015ef0:	f000 fa4b 	bl	801638a <USBD_CtlError>
        err++;
 8015ef4:	210b      	movs	r1, #11
 8015ef6:	187b      	adds	r3, r7, r1
 8015ef8:	781a      	ldrb	r2, [r3, #0]
 8015efa:	187b      	adds	r3, r7, r1
 8015efc:	3201      	adds	r2, #1
 8015efe:	701a      	strb	r2, [r3, #0]
      break;
 8015f00:	e02d      	b.n	8015f5e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	7c1b      	ldrb	r3, [r3, #16]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d10f      	bne.n	8015f2a <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8015f0a:	687a      	ldr	r2, [r7, #4]
 8015f0c:	23ad      	movs	r3, #173	@ 0xad
 8015f0e:	009b      	lsls	r3, r3, #2
 8015f10:	58d3      	ldr	r3, [r2, r3]
 8015f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015f14:	2208      	movs	r2, #8
 8015f16:	18ba      	adds	r2, r7, r2
 8015f18:	0010      	movs	r0, r2
 8015f1a:	4798      	blx	r3
 8015f1c:	0003      	movs	r3, r0
 8015f1e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	3301      	adds	r3, #1
 8015f24:	2207      	movs	r2, #7
 8015f26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015f28:	e019      	b.n	8015f5e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8015f2a:	683a      	ldr	r2, [r7, #0]
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	0011      	movs	r1, r2
 8015f30:	0018      	movs	r0, r3
 8015f32:	f000 fa2a 	bl	801638a <USBD_CtlError>
        err++;
 8015f36:	210b      	movs	r1, #11
 8015f38:	187b      	adds	r3, r7, r1
 8015f3a:	781a      	ldrb	r2, [r3, #0]
 8015f3c:	187b      	adds	r3, r7, r1
 8015f3e:	3201      	adds	r2, #1
 8015f40:	701a      	strb	r2, [r3, #0]
      break;
 8015f42:	e00c      	b.n	8015f5e <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8015f44:	683a      	ldr	r2, [r7, #0]
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	0011      	movs	r1, r2
 8015f4a:	0018      	movs	r0, r3
 8015f4c:	f000 fa1d 	bl	801638a <USBD_CtlError>
      err++;
 8015f50:	210b      	movs	r1, #11
 8015f52:	187b      	adds	r3, r7, r1
 8015f54:	781a      	ldrb	r2, [r3, #0]
 8015f56:	187b      	adds	r3, r7, r1
 8015f58:	3201      	adds	r2, #1
 8015f5a:	701a      	strb	r2, [r3, #0]
      break;
 8015f5c:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8015f5e:	230b      	movs	r3, #11
 8015f60:	18fb      	adds	r3, r7, r3
 8015f62:	781b      	ldrb	r3, [r3, #0]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d127      	bne.n	8015fb8 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8015f68:	2108      	movs	r1, #8
 8015f6a:	187b      	adds	r3, r7, r1
 8015f6c:	881b      	ldrh	r3, [r3, #0]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d019      	beq.n	8015fa6 <USBD_GetDescriptor+0x342>
 8015f72:	683b      	ldr	r3, [r7, #0]
 8015f74:	88db      	ldrh	r3, [r3, #6]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d015      	beq.n	8015fa6 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8015f7a:	683b      	ldr	r3, [r7, #0]
 8015f7c:	88da      	ldrh	r2, [r3, #6]
 8015f7e:	187b      	adds	r3, r7, r1
 8015f80:	881b      	ldrh	r3, [r3, #0]
 8015f82:	1c18      	adds	r0, r3, #0
 8015f84:	1c11      	adds	r1, r2, #0
 8015f86:	b28a      	uxth	r2, r1
 8015f88:	b283      	uxth	r3, r0
 8015f8a:	429a      	cmp	r2, r3
 8015f8c:	d900      	bls.n	8015f90 <USBD_GetDescriptor+0x32c>
 8015f8e:	1c01      	adds	r1, r0, #0
 8015f90:	b28a      	uxth	r2, r1
 8015f92:	2108      	movs	r1, #8
 8015f94:	187b      	adds	r3, r7, r1
 8015f96:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015f98:	187b      	adds	r3, r7, r1
 8015f9a:	881a      	ldrh	r2, [r3, #0]
 8015f9c:	68f9      	ldr	r1, [r7, #12]
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	0018      	movs	r0, r3
 8015fa2:	f000 fa70 	bl	8016486 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8015fa6:	683b      	ldr	r3, [r7, #0]
 8015fa8:	88db      	ldrh	r3, [r3, #6]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d105      	bne.n	8015fba <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	0018      	movs	r0, r3
 8015fb2:	f000 fad2 	bl	801655a <USBD_CtlSendStatus>
 8015fb6:	e000      	b.n	8015fba <USBD_GetDescriptor+0x356>
    return;
 8015fb8:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8015fba:	46bd      	mov	sp, r7
 8015fbc:	b004      	add	sp, #16
 8015fbe:	bd80      	pop	{r7, pc}
 8015fc0:	0801b8a4 	.word	0x0801b8a4
 8015fc4:	0801b8c4 	.word	0x0801b8c4

08015fc8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8015fc8:	b590      	push	{r4, r7, lr}
 8015fca:	b085      	sub	sp, #20
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	6078      	str	r0, [r7, #4]
 8015fd0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015fd2:	683b      	ldr	r3, [r7, #0]
 8015fd4:	889b      	ldrh	r3, [r3, #4]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d13d      	bne.n	8016056 <USBD_SetAddress+0x8e>
 8015fda:	683b      	ldr	r3, [r7, #0]
 8015fdc:	88db      	ldrh	r3, [r3, #6]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d139      	bne.n	8016056 <USBD_SetAddress+0x8e>
 8015fe2:	683b      	ldr	r3, [r7, #0]
 8015fe4:	885b      	ldrh	r3, [r3, #2]
 8015fe6:	2b7f      	cmp	r3, #127	@ 0x7f
 8015fe8:	d835      	bhi.n	8016056 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015fea:	683b      	ldr	r3, [r7, #0]
 8015fec:	885b      	ldrh	r3, [r3, #2]
 8015fee:	b2da      	uxtb	r2, r3
 8015ff0:	230f      	movs	r3, #15
 8015ff2:	18fb      	adds	r3, r7, r3
 8015ff4:	217f      	movs	r1, #127	@ 0x7f
 8015ff6:	400a      	ands	r2, r1
 8015ff8:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015ffa:	687a      	ldr	r2, [r7, #4]
 8015ffc:	23a7      	movs	r3, #167	@ 0xa7
 8015ffe:	009b      	lsls	r3, r3, #2
 8016000:	5cd3      	ldrb	r3, [r2, r3]
 8016002:	2b03      	cmp	r3, #3
 8016004:	d106      	bne.n	8016014 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8016006:	683a      	ldr	r2, [r7, #0]
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	0011      	movs	r1, r2
 801600c:	0018      	movs	r0, r3
 801600e:	f000 f9bc 	bl	801638a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016012:	e027      	b.n	8016064 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	240f      	movs	r4, #15
 8016018:	193a      	adds	r2, r7, r4
 801601a:	4914      	ldr	r1, [pc, #80]	@ (801606c <USBD_SetAddress+0xa4>)
 801601c:	7812      	ldrb	r2, [r2, #0]
 801601e:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016020:	193b      	adds	r3, r7, r4
 8016022:	781a      	ldrb	r2, [r3, #0]
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	0011      	movs	r1, r2
 8016028:	0018      	movs	r0, r3
 801602a:	f000 ff67 	bl	8016efc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	0018      	movs	r0, r3
 8016032:	f000 fa92 	bl	801655a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016036:	193b      	adds	r3, r7, r4
 8016038:	781b      	ldrb	r3, [r3, #0]
 801603a:	2b00      	cmp	r3, #0
 801603c:	d005      	beq.n	801604a <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801603e:	687a      	ldr	r2, [r7, #4]
 8016040:	23a7      	movs	r3, #167	@ 0xa7
 8016042:	009b      	lsls	r3, r3, #2
 8016044:	2102      	movs	r1, #2
 8016046:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016048:	e00c      	b.n	8016064 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801604a:	687a      	ldr	r2, [r7, #4]
 801604c:	23a7      	movs	r3, #167	@ 0xa7
 801604e:	009b      	lsls	r3, r3, #2
 8016050:	2101      	movs	r1, #1
 8016052:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016054:	e006      	b.n	8016064 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016056:	683a      	ldr	r2, [r7, #0]
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	0011      	movs	r1, r2
 801605c:	0018      	movs	r0, r3
 801605e:	f000 f994 	bl	801638a <USBD_CtlError>
  }
}
 8016062:	46c0      	nop			@ (mov r8, r8)
 8016064:	46c0      	nop			@ (mov r8, r8)
 8016066:	46bd      	mov	sp, r7
 8016068:	b005      	add	sp, #20
 801606a:	bd90      	pop	{r4, r7, pc}
 801606c:	0000029e 	.word	0x0000029e

08016070 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016070:	b580      	push	{r7, lr}
 8016072:	b082      	sub	sp, #8
 8016074:	af00      	add	r7, sp, #0
 8016076:	6078      	str	r0, [r7, #4]
 8016078:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801607a:	683b      	ldr	r3, [r7, #0]
 801607c:	885b      	ldrh	r3, [r3, #2]
 801607e:	b2da      	uxtb	r2, r3
 8016080:	4b4c      	ldr	r3, [pc, #304]	@ (80161b4 <USBD_SetConfig+0x144>)
 8016082:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016084:	4b4b      	ldr	r3, [pc, #300]	@ (80161b4 <USBD_SetConfig+0x144>)
 8016086:	781b      	ldrb	r3, [r3, #0]
 8016088:	2b01      	cmp	r3, #1
 801608a:	d906      	bls.n	801609a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801608c:	683a      	ldr	r2, [r7, #0]
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	0011      	movs	r1, r2
 8016092:	0018      	movs	r0, r3
 8016094:	f000 f979 	bl	801638a <USBD_CtlError>
 8016098:	e088      	b.n	80161ac <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801609a:	687a      	ldr	r2, [r7, #4]
 801609c:	23a7      	movs	r3, #167	@ 0xa7
 801609e:	009b      	lsls	r3, r3, #2
 80160a0:	5cd3      	ldrb	r3, [r2, r3]
 80160a2:	2b02      	cmp	r3, #2
 80160a4:	d002      	beq.n	80160ac <USBD_SetConfig+0x3c>
 80160a6:	2b03      	cmp	r3, #3
 80160a8:	d029      	beq.n	80160fe <USBD_SetConfig+0x8e>
 80160aa:	e071      	b.n	8016190 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80160ac:	4b41      	ldr	r3, [pc, #260]	@ (80161b4 <USBD_SetConfig+0x144>)
 80160ae:	781b      	ldrb	r3, [r3, #0]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d01f      	beq.n	80160f4 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 80160b4:	4b3f      	ldr	r3, [pc, #252]	@ (80161b4 <USBD_SetConfig+0x144>)
 80160b6:	781b      	ldrb	r3, [r3, #0]
 80160b8:	001a      	movs	r2, r3
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80160be:	687a      	ldr	r2, [r7, #4]
 80160c0:	23a7      	movs	r3, #167	@ 0xa7
 80160c2:	009b      	lsls	r3, r3, #2
 80160c4:	2103      	movs	r1, #3
 80160c6:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80160c8:	4b3a      	ldr	r3, [pc, #232]	@ (80161b4 <USBD_SetConfig+0x144>)
 80160ca:	781a      	ldrb	r2, [r3, #0]
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	0011      	movs	r1, r2
 80160d0:	0018      	movs	r0, r3
 80160d2:	f7ff f8c6 	bl	8015262 <USBD_SetClassConfig>
 80160d6:	0003      	movs	r3, r0
 80160d8:	2b02      	cmp	r3, #2
 80160da:	d106      	bne.n	80160ea <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 80160dc:	683a      	ldr	r2, [r7, #0]
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	0011      	movs	r1, r2
 80160e2:	0018      	movs	r0, r3
 80160e4:	f000 f951 	bl	801638a <USBD_CtlError>
            return;
 80160e8:	e060      	b.n	80161ac <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	0018      	movs	r0, r3
 80160ee:	f000 fa34 	bl	801655a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80160f2:	e05b      	b.n	80161ac <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	0018      	movs	r0, r3
 80160f8:	f000 fa2f 	bl	801655a <USBD_CtlSendStatus>
        break;
 80160fc:	e056      	b.n	80161ac <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80160fe:	4b2d      	ldr	r3, [pc, #180]	@ (80161b4 <USBD_SetConfig+0x144>)
 8016100:	781b      	ldrb	r3, [r3, #0]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d115      	bne.n	8016132 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016106:	687a      	ldr	r2, [r7, #4]
 8016108:	23a7      	movs	r3, #167	@ 0xa7
 801610a:	009b      	lsls	r3, r3, #2
 801610c:	2102      	movs	r1, #2
 801610e:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8016110:	4b28      	ldr	r3, [pc, #160]	@ (80161b4 <USBD_SetConfig+0x144>)
 8016112:	781b      	ldrb	r3, [r3, #0]
 8016114:	001a      	movs	r2, r3
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801611a:	4b26      	ldr	r3, [pc, #152]	@ (80161b4 <USBD_SetConfig+0x144>)
 801611c:	781a      	ldrb	r2, [r3, #0]
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	0011      	movs	r1, r2
 8016122:	0018      	movs	r0, r3
 8016124:	f7ff f8c4 	bl	80152b0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	0018      	movs	r0, r3
 801612c:	f000 fa15 	bl	801655a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8016130:	e03c      	b.n	80161ac <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8016132:	4b20      	ldr	r3, [pc, #128]	@ (80161b4 <USBD_SetConfig+0x144>)
 8016134:	781b      	ldrb	r3, [r3, #0]
 8016136:	001a      	movs	r2, r3
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	685b      	ldr	r3, [r3, #4]
 801613c:	429a      	cmp	r2, r3
 801613e:	d022      	beq.n	8016186 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	685b      	ldr	r3, [r3, #4]
 8016144:	b2da      	uxtb	r2, r3
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	0011      	movs	r1, r2
 801614a:	0018      	movs	r0, r3
 801614c:	f7ff f8b0 	bl	80152b0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8016150:	4b18      	ldr	r3, [pc, #96]	@ (80161b4 <USBD_SetConfig+0x144>)
 8016152:	781b      	ldrb	r3, [r3, #0]
 8016154:	001a      	movs	r2, r3
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801615a:	4b16      	ldr	r3, [pc, #88]	@ (80161b4 <USBD_SetConfig+0x144>)
 801615c:	781a      	ldrb	r2, [r3, #0]
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	0011      	movs	r1, r2
 8016162:	0018      	movs	r0, r3
 8016164:	f7ff f87d 	bl	8015262 <USBD_SetClassConfig>
 8016168:	0003      	movs	r3, r0
 801616a:	2b02      	cmp	r3, #2
 801616c:	d106      	bne.n	801617c <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801616e:	683a      	ldr	r2, [r7, #0]
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	0011      	movs	r1, r2
 8016174:	0018      	movs	r0, r3
 8016176:	f000 f908 	bl	801638a <USBD_CtlError>
            return;
 801617a:	e017      	b.n	80161ac <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	0018      	movs	r0, r3
 8016180:	f000 f9eb 	bl	801655a <USBD_CtlSendStatus>
        break;
 8016184:	e012      	b.n	80161ac <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	0018      	movs	r0, r3
 801618a:	f000 f9e6 	bl	801655a <USBD_CtlSendStatus>
        break;
 801618e:	e00d      	b.n	80161ac <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8016190:	683a      	ldr	r2, [r7, #0]
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	0011      	movs	r1, r2
 8016196:	0018      	movs	r0, r3
 8016198:	f000 f8f7 	bl	801638a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801619c:	4b05      	ldr	r3, [pc, #20]	@ (80161b4 <USBD_SetConfig+0x144>)
 801619e:	781a      	ldrb	r2, [r3, #0]
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	0011      	movs	r1, r2
 80161a4:	0018      	movs	r0, r3
 80161a6:	f7ff f883 	bl	80152b0 <USBD_ClrClassConfig>
        break;
 80161aa:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80161ac:	46bd      	mov	sp, r7
 80161ae:	b002      	add	sp, #8
 80161b0:	bd80      	pop	{r7, pc}
 80161b2:	46c0      	nop			@ (mov r8, r8)
 80161b4:	20002b2c 	.word	0x20002b2c

080161b8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161b8:	b580      	push	{r7, lr}
 80161ba:	b082      	sub	sp, #8
 80161bc:	af00      	add	r7, sp, #0
 80161be:	6078      	str	r0, [r7, #4]
 80161c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80161c2:	683b      	ldr	r3, [r7, #0]
 80161c4:	88db      	ldrh	r3, [r3, #6]
 80161c6:	2b01      	cmp	r3, #1
 80161c8:	d006      	beq.n	80161d8 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 80161ca:	683a      	ldr	r2, [r7, #0]
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	0011      	movs	r1, r2
 80161d0:	0018      	movs	r0, r3
 80161d2:	f000 f8da 	bl	801638a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80161d6:	e026      	b.n	8016226 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 80161d8:	687a      	ldr	r2, [r7, #4]
 80161da:	23a7      	movs	r3, #167	@ 0xa7
 80161dc:	009b      	lsls	r3, r3, #2
 80161de:	5cd3      	ldrb	r3, [r2, r3]
 80161e0:	2b02      	cmp	r3, #2
 80161e2:	dc02      	bgt.n	80161ea <USBD_GetConfig+0x32>
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	dc03      	bgt.n	80161f0 <USBD_GetConfig+0x38>
 80161e8:	e016      	b.n	8016218 <USBD_GetConfig+0x60>
 80161ea:	2b03      	cmp	r3, #3
 80161ec:	d00c      	beq.n	8016208 <USBD_GetConfig+0x50>
 80161ee:	e013      	b.n	8016218 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	2200      	movs	r2, #0
 80161f4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	3308      	adds	r3, #8
 80161fa:	0019      	movs	r1, r3
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	2201      	movs	r2, #1
 8016200:	0018      	movs	r0, r3
 8016202:	f000 f940 	bl	8016486 <USBD_CtlSendData>
        break;
 8016206:	e00e      	b.n	8016226 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	1d19      	adds	r1, r3, #4
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	2201      	movs	r2, #1
 8016210:	0018      	movs	r0, r3
 8016212:	f000 f938 	bl	8016486 <USBD_CtlSendData>
        break;
 8016216:	e006      	b.n	8016226 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8016218:	683a      	ldr	r2, [r7, #0]
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	0011      	movs	r1, r2
 801621e:	0018      	movs	r0, r3
 8016220:	f000 f8b3 	bl	801638a <USBD_CtlError>
        break;
 8016224:	46c0      	nop			@ (mov r8, r8)
}
 8016226:	46c0      	nop			@ (mov r8, r8)
 8016228:	46bd      	mov	sp, r7
 801622a:	b002      	add	sp, #8
 801622c:	bd80      	pop	{r7, pc}

0801622e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801622e:	b580      	push	{r7, lr}
 8016230:	b082      	sub	sp, #8
 8016232:	af00      	add	r7, sp, #0
 8016234:	6078      	str	r0, [r7, #4]
 8016236:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016238:	687a      	ldr	r2, [r7, #4]
 801623a:	23a7      	movs	r3, #167	@ 0xa7
 801623c:	009b      	lsls	r3, r3, #2
 801623e:	5cd3      	ldrb	r3, [r2, r3]
 8016240:	3b01      	subs	r3, #1
 8016242:	2b02      	cmp	r3, #2
 8016244:	d822      	bhi.n	801628c <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016246:	683b      	ldr	r3, [r7, #0]
 8016248:	88db      	ldrh	r3, [r3, #6]
 801624a:	2b02      	cmp	r3, #2
 801624c:	d006      	beq.n	801625c <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801624e:	683a      	ldr	r2, [r7, #0]
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	0011      	movs	r1, r2
 8016254:	0018      	movs	r0, r3
 8016256:	f000 f898 	bl	801638a <USBD_CtlError>
        break;
 801625a:	e01e      	b.n	801629a <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	2201      	movs	r2, #1
 8016260:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8016262:	687a      	ldr	r2, [r7, #4]
 8016264:	23a9      	movs	r3, #169	@ 0xa9
 8016266:	009b      	lsls	r3, r3, #2
 8016268:	58d3      	ldr	r3, [r2, r3]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d005      	beq.n	801627a <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	68db      	ldr	r3, [r3, #12]
 8016272:	2202      	movs	r2, #2
 8016274:	431a      	orrs	r2, r3
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	330c      	adds	r3, #12
 801627e:	0019      	movs	r1, r3
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	2202      	movs	r2, #2
 8016284:	0018      	movs	r0, r3
 8016286:	f000 f8fe 	bl	8016486 <USBD_CtlSendData>
      break;
 801628a:	e006      	b.n	801629a <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801628c:	683a      	ldr	r2, [r7, #0]
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	0011      	movs	r1, r2
 8016292:	0018      	movs	r0, r3
 8016294:	f000 f879 	bl	801638a <USBD_CtlError>
      break;
 8016298:	46c0      	nop			@ (mov r8, r8)
  }
}
 801629a:	46c0      	nop			@ (mov r8, r8)
 801629c:	46bd      	mov	sp, r7
 801629e:	b002      	add	sp, #8
 80162a0:	bd80      	pop	{r7, pc}

080162a2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80162a2:	b580      	push	{r7, lr}
 80162a4:	b082      	sub	sp, #8
 80162a6:	af00      	add	r7, sp, #0
 80162a8:	6078      	str	r0, [r7, #4]
 80162aa:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80162ac:	683b      	ldr	r3, [r7, #0]
 80162ae:	885b      	ldrh	r3, [r3, #2]
 80162b0:	2b01      	cmp	r3, #1
 80162b2:	d108      	bne.n	80162c6 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 80162b4:	687a      	ldr	r2, [r7, #4]
 80162b6:	23a9      	movs	r3, #169	@ 0xa9
 80162b8:	009b      	lsls	r3, r3, #2
 80162ba:	2101      	movs	r1, #1
 80162bc:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	0018      	movs	r0, r3
 80162c2:	f000 f94a 	bl	801655a <USBD_CtlSendStatus>
  }
}
 80162c6:	46c0      	nop			@ (mov r8, r8)
 80162c8:	46bd      	mov	sp, r7
 80162ca:	b002      	add	sp, #8
 80162cc:	bd80      	pop	{r7, pc}

080162ce <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80162ce:	b580      	push	{r7, lr}
 80162d0:	b082      	sub	sp, #8
 80162d2:	af00      	add	r7, sp, #0
 80162d4:	6078      	str	r0, [r7, #4]
 80162d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80162d8:	687a      	ldr	r2, [r7, #4]
 80162da:	23a7      	movs	r3, #167	@ 0xa7
 80162dc:	009b      	lsls	r3, r3, #2
 80162de:	5cd3      	ldrb	r3, [r2, r3]
 80162e0:	3b01      	subs	r3, #1
 80162e2:	2b02      	cmp	r3, #2
 80162e4:	d80d      	bhi.n	8016302 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80162e6:	683b      	ldr	r3, [r7, #0]
 80162e8:	885b      	ldrh	r3, [r3, #2]
 80162ea:	2b01      	cmp	r3, #1
 80162ec:	d110      	bne.n	8016310 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 80162ee:	687a      	ldr	r2, [r7, #4]
 80162f0:	23a9      	movs	r3, #169	@ 0xa9
 80162f2:	009b      	lsls	r3, r3, #2
 80162f4:	2100      	movs	r1, #0
 80162f6:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	0018      	movs	r0, r3
 80162fc:	f000 f92d 	bl	801655a <USBD_CtlSendStatus>
      }
      break;
 8016300:	e006      	b.n	8016310 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8016302:	683a      	ldr	r2, [r7, #0]
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	0011      	movs	r1, r2
 8016308:	0018      	movs	r0, r3
 801630a:	f000 f83e 	bl	801638a <USBD_CtlError>
      break;
 801630e:	e000      	b.n	8016312 <USBD_ClrFeature+0x44>
      break;
 8016310:	46c0      	nop			@ (mov r8, r8)
  }
}
 8016312:	46c0      	nop			@ (mov r8, r8)
 8016314:	46bd      	mov	sp, r7
 8016316:	b002      	add	sp, #8
 8016318:	bd80      	pop	{r7, pc}

0801631a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801631a:	b580      	push	{r7, lr}
 801631c:	b082      	sub	sp, #8
 801631e:	af00      	add	r7, sp, #0
 8016320:	6078      	str	r0, [r7, #4]
 8016322:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8016324:	683b      	ldr	r3, [r7, #0]
 8016326:	781a      	ldrb	r2, [r3, #0]
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801632c:	683b      	ldr	r3, [r7, #0]
 801632e:	785a      	ldrb	r2, [r3, #1]
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8016334:	683b      	ldr	r3, [r7, #0]
 8016336:	3302      	adds	r3, #2
 8016338:	781b      	ldrb	r3, [r3, #0]
 801633a:	001a      	movs	r2, r3
 801633c:	683b      	ldr	r3, [r7, #0]
 801633e:	3303      	adds	r3, #3
 8016340:	781b      	ldrb	r3, [r3, #0]
 8016342:	021b      	lsls	r3, r3, #8
 8016344:	b29b      	uxth	r3, r3
 8016346:	18d3      	adds	r3, r2, r3
 8016348:	b29a      	uxth	r2, r3
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801634e:	683b      	ldr	r3, [r7, #0]
 8016350:	3304      	adds	r3, #4
 8016352:	781b      	ldrb	r3, [r3, #0]
 8016354:	001a      	movs	r2, r3
 8016356:	683b      	ldr	r3, [r7, #0]
 8016358:	3305      	adds	r3, #5
 801635a:	781b      	ldrb	r3, [r3, #0]
 801635c:	021b      	lsls	r3, r3, #8
 801635e:	b29b      	uxth	r3, r3
 8016360:	18d3      	adds	r3, r2, r3
 8016362:	b29a      	uxth	r2, r3
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8016368:	683b      	ldr	r3, [r7, #0]
 801636a:	3306      	adds	r3, #6
 801636c:	781b      	ldrb	r3, [r3, #0]
 801636e:	001a      	movs	r2, r3
 8016370:	683b      	ldr	r3, [r7, #0]
 8016372:	3307      	adds	r3, #7
 8016374:	781b      	ldrb	r3, [r3, #0]
 8016376:	021b      	lsls	r3, r3, #8
 8016378:	b29b      	uxth	r3, r3
 801637a:	18d3      	adds	r3, r2, r3
 801637c:	b29a      	uxth	r2, r3
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	80da      	strh	r2, [r3, #6]

}
 8016382:	46c0      	nop			@ (mov r8, r8)
 8016384:	46bd      	mov	sp, r7
 8016386:	b002      	add	sp, #8
 8016388:	bd80      	pop	{r7, pc}

0801638a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801638a:	b580      	push	{r7, lr}
 801638c:	b082      	sub	sp, #8
 801638e:	af00      	add	r7, sp, #0
 8016390:	6078      	str	r0, [r7, #4]
 8016392:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	2180      	movs	r1, #128	@ 0x80
 8016398:	0018      	movs	r0, r3
 801639a:	f000 fd28 	bl	8016dee <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	2100      	movs	r1, #0
 80163a2:	0018      	movs	r0, r3
 80163a4:	f000 fd23 	bl	8016dee <USBD_LL_StallEP>
}
 80163a8:	46c0      	nop			@ (mov r8, r8)
 80163aa:	46bd      	mov	sp, r7
 80163ac:	b002      	add	sp, #8
 80163ae:	bd80      	pop	{r7, pc}

080163b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80163b0:	b590      	push	{r4, r7, lr}
 80163b2:	b087      	sub	sp, #28
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	60f8      	str	r0, [r7, #12]
 80163b8:	60b9      	str	r1, [r7, #8]
 80163ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80163bc:	2417      	movs	r4, #23
 80163be:	193b      	adds	r3, r7, r4
 80163c0:	2200      	movs	r2, #0
 80163c2:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d03c      	beq.n	8016444 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	0018      	movs	r0, r3
 80163ce:	f000 f83d 	bl	801644c <USBD_GetLen>
 80163d2:	0003      	movs	r3, r0
 80163d4:	3301      	adds	r3, #1
 80163d6:	b29b      	uxth	r3, r3
 80163d8:	18db      	adds	r3, r3, r3
 80163da:	b29a      	uxth	r2, r3
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80163e0:	193b      	adds	r3, r7, r4
 80163e2:	781b      	ldrb	r3, [r3, #0]
 80163e4:	193a      	adds	r2, r7, r4
 80163e6:	1c59      	adds	r1, r3, #1
 80163e8:	7011      	strb	r1, [r2, #0]
 80163ea:	001a      	movs	r2, r3
 80163ec:	68bb      	ldr	r3, [r7, #8]
 80163ee:	189b      	adds	r3, r3, r2
 80163f0:	687a      	ldr	r2, [r7, #4]
 80163f2:	7812      	ldrb	r2, [r2, #0]
 80163f4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80163f6:	193b      	adds	r3, r7, r4
 80163f8:	781b      	ldrb	r3, [r3, #0]
 80163fa:	193a      	adds	r2, r7, r4
 80163fc:	1c59      	adds	r1, r3, #1
 80163fe:	7011      	strb	r1, [r2, #0]
 8016400:	001a      	movs	r2, r3
 8016402:	68bb      	ldr	r3, [r7, #8]
 8016404:	189b      	adds	r3, r3, r2
 8016406:	2203      	movs	r2, #3
 8016408:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801640a:	e017      	b.n	801643c <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	1c5a      	adds	r2, r3, #1
 8016410:	60fa      	str	r2, [r7, #12]
 8016412:	2417      	movs	r4, #23
 8016414:	193a      	adds	r2, r7, r4
 8016416:	7812      	ldrb	r2, [r2, #0]
 8016418:	1939      	adds	r1, r7, r4
 801641a:	1c50      	adds	r0, r2, #1
 801641c:	7008      	strb	r0, [r1, #0]
 801641e:	0011      	movs	r1, r2
 8016420:	68ba      	ldr	r2, [r7, #8]
 8016422:	1852      	adds	r2, r2, r1
 8016424:	781b      	ldrb	r3, [r3, #0]
 8016426:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8016428:	193b      	adds	r3, r7, r4
 801642a:	781b      	ldrb	r3, [r3, #0]
 801642c:	193a      	adds	r2, r7, r4
 801642e:	1c59      	adds	r1, r3, #1
 8016430:	7011      	strb	r1, [r2, #0]
 8016432:	001a      	movs	r2, r3
 8016434:	68bb      	ldr	r3, [r7, #8]
 8016436:	189b      	adds	r3, r3, r2
 8016438:	2200      	movs	r2, #0
 801643a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	781b      	ldrb	r3, [r3, #0]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d1e3      	bne.n	801640c <USBD_GetString+0x5c>
    }
  }
}
 8016444:	46c0      	nop			@ (mov r8, r8)
 8016446:	46bd      	mov	sp, r7
 8016448:	b007      	add	sp, #28
 801644a:	bd90      	pop	{r4, r7, pc}

0801644c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801644c:	b580      	push	{r7, lr}
 801644e:	b084      	sub	sp, #16
 8016450:	af00      	add	r7, sp, #0
 8016452:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016454:	230f      	movs	r3, #15
 8016456:	18fb      	adds	r3, r7, r3
 8016458:	2200      	movs	r2, #0
 801645a:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801645c:	e008      	b.n	8016470 <USBD_GetLen+0x24>
  {
    len++;
 801645e:	210f      	movs	r1, #15
 8016460:	187b      	adds	r3, r7, r1
 8016462:	781a      	ldrb	r2, [r3, #0]
 8016464:	187b      	adds	r3, r7, r1
 8016466:	3201      	adds	r2, #1
 8016468:	701a      	strb	r2, [r3, #0]
    buf++;
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	3301      	adds	r3, #1
 801646e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	781b      	ldrb	r3, [r3, #0]
 8016474:	2b00      	cmp	r3, #0
 8016476:	d1f2      	bne.n	801645e <USBD_GetLen+0x12>
  }

  return len;
 8016478:	230f      	movs	r3, #15
 801647a:	18fb      	adds	r3, r7, r3
 801647c:	781b      	ldrb	r3, [r3, #0]
}
 801647e:	0018      	movs	r0, r3
 8016480:	46bd      	mov	sp, r7
 8016482:	b004      	add	sp, #16
 8016484:	bd80      	pop	{r7, pc}

08016486 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8016486:	b580      	push	{r7, lr}
 8016488:	b084      	sub	sp, #16
 801648a:	af00      	add	r7, sp, #0
 801648c:	60f8      	str	r0, [r7, #12]
 801648e:	60b9      	str	r1, [r7, #8]
 8016490:	1dbb      	adds	r3, r7, #6
 8016492:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016494:	68fa      	ldr	r2, [r7, #12]
 8016496:	23a5      	movs	r3, #165	@ 0xa5
 8016498:	009b      	lsls	r3, r3, #2
 801649a:	2102      	movs	r1, #2
 801649c:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801649e:	1dbb      	adds	r3, r7, #6
 80164a0:	881a      	ldrh	r2, [r3, #0]
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80164a6:	1dbb      	adds	r3, r7, #6
 80164a8:	881a      	ldrh	r2, [r3, #0]
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80164ae:	1dbb      	adds	r3, r7, #6
 80164b0:	881b      	ldrh	r3, [r3, #0]
 80164b2:	68ba      	ldr	r2, [r7, #8]
 80164b4:	68f8      	ldr	r0, [r7, #12]
 80164b6:	2100      	movs	r1, #0
 80164b8:	f000 fd4b 	bl	8016f52 <USBD_LL_Transmit>

  return USBD_OK;
 80164bc:	2300      	movs	r3, #0
}
 80164be:	0018      	movs	r0, r3
 80164c0:	46bd      	mov	sp, r7
 80164c2:	b004      	add	sp, #16
 80164c4:	bd80      	pop	{r7, pc}

080164c6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80164c6:	b580      	push	{r7, lr}
 80164c8:	b084      	sub	sp, #16
 80164ca:	af00      	add	r7, sp, #0
 80164cc:	60f8      	str	r0, [r7, #12]
 80164ce:	60b9      	str	r1, [r7, #8]
 80164d0:	1dbb      	adds	r3, r7, #6
 80164d2:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80164d4:	1dbb      	adds	r3, r7, #6
 80164d6:	881b      	ldrh	r3, [r3, #0]
 80164d8:	68ba      	ldr	r2, [r7, #8]
 80164da:	68f8      	ldr	r0, [r7, #12]
 80164dc:	2100      	movs	r1, #0
 80164de:	f000 fd38 	bl	8016f52 <USBD_LL_Transmit>

  return USBD_OK;
 80164e2:	2300      	movs	r3, #0
}
 80164e4:	0018      	movs	r0, r3
 80164e6:	46bd      	mov	sp, r7
 80164e8:	b004      	add	sp, #16
 80164ea:	bd80      	pop	{r7, pc}

080164ec <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80164ec:	b580      	push	{r7, lr}
 80164ee:	b084      	sub	sp, #16
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	60f8      	str	r0, [r7, #12]
 80164f4:	60b9      	str	r1, [r7, #8]
 80164f6:	1dbb      	adds	r3, r7, #6
 80164f8:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80164fa:	68fa      	ldr	r2, [r7, #12]
 80164fc:	23a5      	movs	r3, #165	@ 0xa5
 80164fe:	009b      	lsls	r3, r3, #2
 8016500:	2103      	movs	r1, #3
 8016502:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8016504:	1dbb      	adds	r3, r7, #6
 8016506:	8819      	ldrh	r1, [r3, #0]
 8016508:	68fa      	ldr	r2, [r7, #12]
 801650a:	23ae      	movs	r3, #174	@ 0xae
 801650c:	005b      	lsls	r3, r3, #1
 801650e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8016510:	1dbb      	adds	r3, r7, #6
 8016512:	8819      	ldrh	r1, [r3, #0]
 8016514:	68fa      	ldr	r2, [r7, #12]
 8016516:	23b0      	movs	r3, #176	@ 0xb0
 8016518:	005b      	lsls	r3, r3, #1
 801651a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801651c:	1dbb      	adds	r3, r7, #6
 801651e:	881b      	ldrh	r3, [r3, #0]
 8016520:	68ba      	ldr	r2, [r7, #8]
 8016522:	68f8      	ldr	r0, [r7, #12]
 8016524:	2100      	movs	r1, #0
 8016526:	f000 fd4b 	bl	8016fc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801652a:	2300      	movs	r3, #0
}
 801652c:	0018      	movs	r0, r3
 801652e:	46bd      	mov	sp, r7
 8016530:	b004      	add	sp, #16
 8016532:	bd80      	pop	{r7, pc}

08016534 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8016534:	b580      	push	{r7, lr}
 8016536:	b084      	sub	sp, #16
 8016538:	af00      	add	r7, sp, #0
 801653a:	60f8      	str	r0, [r7, #12]
 801653c:	60b9      	str	r1, [r7, #8]
 801653e:	1dbb      	adds	r3, r7, #6
 8016540:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016542:	1dbb      	adds	r3, r7, #6
 8016544:	881b      	ldrh	r3, [r3, #0]
 8016546:	68ba      	ldr	r2, [r7, #8]
 8016548:	68f8      	ldr	r0, [r7, #12]
 801654a:	2100      	movs	r1, #0
 801654c:	f000 fd38 	bl	8016fc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016550:	2300      	movs	r3, #0
}
 8016552:	0018      	movs	r0, r3
 8016554:	46bd      	mov	sp, r7
 8016556:	b004      	add	sp, #16
 8016558:	bd80      	pop	{r7, pc}

0801655a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801655a:	b580      	push	{r7, lr}
 801655c:	b082      	sub	sp, #8
 801655e:	af00      	add	r7, sp, #0
 8016560:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016562:	687a      	ldr	r2, [r7, #4]
 8016564:	23a5      	movs	r3, #165	@ 0xa5
 8016566:	009b      	lsls	r3, r3, #2
 8016568:	2104      	movs	r1, #4
 801656a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801656c:	6878      	ldr	r0, [r7, #4]
 801656e:	2300      	movs	r3, #0
 8016570:	2200      	movs	r2, #0
 8016572:	2100      	movs	r1, #0
 8016574:	f000 fced 	bl	8016f52 <USBD_LL_Transmit>

  return USBD_OK;
 8016578:	2300      	movs	r3, #0
}
 801657a:	0018      	movs	r0, r3
 801657c:	46bd      	mov	sp, r7
 801657e:	b002      	add	sp, #8
 8016580:	bd80      	pop	{r7, pc}

08016582 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016582:	b580      	push	{r7, lr}
 8016584:	b082      	sub	sp, #8
 8016586:	af00      	add	r7, sp, #0
 8016588:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801658a:	687a      	ldr	r2, [r7, #4]
 801658c:	23a5      	movs	r3, #165	@ 0xa5
 801658e:	009b      	lsls	r3, r3, #2
 8016590:	2105      	movs	r1, #5
 8016592:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016594:	6878      	ldr	r0, [r7, #4]
 8016596:	2300      	movs	r3, #0
 8016598:	2200      	movs	r2, #0
 801659a:	2100      	movs	r1, #0
 801659c:	f000 fd10 	bl	8016fc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80165a0:	2300      	movs	r3, #0
}
 80165a2:	0018      	movs	r0, r3
 80165a4:	46bd      	mov	sp, r7
 80165a6:	b002      	add	sp, #8
 80165a8:	bd80      	pop	{r7, pc}
	...

080165ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80165ac:	b580      	push	{r7, lr}
 80165ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80165b0:	4914      	ldr	r1, [pc, #80]	@ (8016604 <MX_USB_DEVICE_Init+0x58>)
 80165b2:	4b15      	ldr	r3, [pc, #84]	@ (8016608 <MX_USB_DEVICE_Init+0x5c>)
 80165b4:	2200      	movs	r2, #0
 80165b6:	0018      	movs	r0, r3
 80165b8:	f7fe fdec 	bl	8015194 <USBD_Init>
 80165bc:	1e03      	subs	r3, r0, #0
 80165be:	d001      	beq.n	80165c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80165c0:	f7ef fe8e 	bl	80062e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80165c4:	4a11      	ldr	r2, [pc, #68]	@ (801660c <MX_USB_DEVICE_Init+0x60>)
 80165c6:	4b10      	ldr	r3, [pc, #64]	@ (8016608 <MX_USB_DEVICE_Init+0x5c>)
 80165c8:	0011      	movs	r1, r2
 80165ca:	0018      	movs	r0, r3
 80165cc:	f7fe fe13 	bl	80151f6 <USBD_RegisterClass>
 80165d0:	1e03      	subs	r3, r0, #0
 80165d2:	d001      	beq.n	80165d8 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80165d4:	f7ef fe84 	bl	80062e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80165d8:	4a0d      	ldr	r2, [pc, #52]	@ (8016610 <MX_USB_DEVICE_Init+0x64>)
 80165da:	4b0b      	ldr	r3, [pc, #44]	@ (8016608 <MX_USB_DEVICE_Init+0x5c>)
 80165dc:	0011      	movs	r1, r2
 80165de:	0018      	movs	r0, r3
 80165e0:	f7fe fd28 	bl	8015034 <USBD_CDC_RegisterInterface>
 80165e4:	1e03      	subs	r3, r0, #0
 80165e6:	d001      	beq.n	80165ec <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80165e8:	f7ef fe7a 	bl	80062e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80165ec:	4b06      	ldr	r3, [pc, #24]	@ (8016608 <MX_USB_DEVICE_Init+0x5c>)
 80165ee:	0018      	movs	r0, r3
 80165f0:	f7fe fe21 	bl	8015236 <USBD_Start>
 80165f4:	1e03      	subs	r3, r0, #0
 80165f6:	d001      	beq.n	80165fc <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80165f8:	f7ef fe72 	bl	80062e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80165fc:	46c0      	nop			@ (mov r8, r8)
 80165fe:	46bd      	mov	sp, r7
 8016600:	bd80      	pop	{r7, pc}
 8016602:	46c0      	nop			@ (mov r8, r8)
 8016604:	200001d0 	.word	0x200001d0
 8016608:	20002b30 	.word	0x20002b30
 801660c:	200000bc 	.word	0x200000bc
 8016610:	200001c0 	.word	0x200001c0

08016614 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016614:	b580      	push	{r7, lr}
 8016616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016618:	4907      	ldr	r1, [pc, #28]	@ (8016638 <CDC_Init_FS+0x24>)
 801661a:	4b08      	ldr	r3, [pc, #32]	@ (801663c <CDC_Init_FS+0x28>)
 801661c:	2200      	movs	r2, #0
 801661e:	0018      	movs	r0, r3
 8016620:	f7fe fd23 	bl	801506a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8016624:	4a06      	ldr	r2, [pc, #24]	@ (8016640 <CDC_Init_FS+0x2c>)
 8016626:	4b05      	ldr	r3, [pc, #20]	@ (801663c <CDC_Init_FS+0x28>)
 8016628:	0011      	movs	r1, r2
 801662a:	0018      	movs	r0, r3
 801662c:	f7fe fd39 	bl	80150a2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016630:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016632:	0018      	movs	r0, r3
 8016634:	46bd      	mov	sp, r7
 8016636:	bd80      	pop	{r7, pc}
 8016638:	200032b4 	.word	0x200032b4
 801663c:	20002b30 	.word	0x20002b30
 8016640:	20002eb4 	.word	0x20002eb4

08016644 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016644:	b580      	push	{r7, lr}
 8016646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016648:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801664a:	0018      	movs	r0, r3
 801664c:	46bd      	mov	sp, r7
 801664e:	bd80      	pop	{r7, pc}

08016650 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016650:	b580      	push	{r7, lr}
 8016652:	b082      	sub	sp, #8
 8016654:	af00      	add	r7, sp, #0
 8016656:	6039      	str	r1, [r7, #0]
 8016658:	0011      	movs	r1, r2
 801665a:	1dfb      	adds	r3, r7, #7
 801665c:	1c02      	adds	r2, r0, #0
 801665e:	701a      	strb	r2, [r3, #0]
 8016660:	1d3b      	adds	r3, r7, #4
 8016662:	1c0a      	adds	r2, r1, #0
 8016664:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016666:	1dfb      	adds	r3, r7, #7
 8016668:	781b      	ldrb	r3, [r3, #0]
 801666a:	2b23      	cmp	r3, #35	@ 0x23
 801666c:	d804      	bhi.n	8016678 <CDC_Control_FS+0x28>
 801666e:	009a      	lsls	r2, r3, #2
 8016670:	4b04      	ldr	r3, [pc, #16]	@ (8016684 <CDC_Control_FS+0x34>)
 8016672:	18d3      	adds	r3, r2, r3
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016678:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801667a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801667c:	0018      	movs	r0, r3
 801667e:	46bd      	mov	sp, r7
 8016680:	b002      	add	sp, #8
 8016682:	bd80      	pop	{r7, pc}
 8016684:	0801b8dc 	.word	0x0801b8dc

08016688 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016688:	b580      	push	{r7, lr}
 801668a:	b082      	sub	sp, #8
 801668c:	af00      	add	r7, sp, #0
 801668e:	6078      	str	r0, [r7, #4]
 8016690:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 8016692:	4b17      	ldr	r3, [pc, #92]	@ (80166f0 <CDC_Receive_FS+0x68>)
 8016694:	781b      	ldrb	r3, [r3, #0]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d013      	beq.n	80166c2 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801669a:	683b      	ldr	r3, [r7, #0]
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	b29a      	uxth	r2, r3
 80166a0:	2301      	movs	r3, #1
 80166a2:	425b      	negs	r3, r3
 80166a4:	6879      	ldr	r1, [r7, #4]
 80166a6:	4813      	ldr	r0, [pc, #76]	@ (80166f4 <CDC_Receive_FS+0x6c>)
 80166a8:	f7fa fd3a 	bl	8011120 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80166ac:	687a      	ldr	r2, [r7, #4]
 80166ae:	4b12      	ldr	r3, [pc, #72]	@ (80166f8 <CDC_Receive_FS+0x70>)
 80166b0:	0011      	movs	r1, r2
 80166b2:	0018      	movs	r0, r3
 80166b4:	f7fe fcf5 	bl	80150a2 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80166b8:	4b0f      	ldr	r3, [pc, #60]	@ (80166f8 <CDC_Receive_FS+0x70>)
 80166ba:	0018      	movs	r0, r3
 80166bc:	f7fe fd3c 	bl	8015138 <USBD_CDC_ReceivePacket>
 80166c0:	e010      	b.n	80166e4 <CDC_Receive_FS+0x5c>
  }
  else
   {
     UsbRxDataSize += *Len;
 80166c2:	683b      	ldr	r3, [r7, #0]
 80166c4:	681a      	ldr	r2, [r3, #0]
 80166c6:	4b0d      	ldr	r3, [pc, #52]	@ (80166fc <CDC_Receive_FS+0x74>)
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	18d2      	adds	r2, r2, r3
 80166cc:	4b0b      	ldr	r3, [pc, #44]	@ (80166fc <CDC_Receive_FS+0x74>)
 80166ce:	601a      	str	r2, [r3, #0]
     USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80166d0:	687a      	ldr	r2, [r7, #4]
 80166d2:	4b09      	ldr	r3, [pc, #36]	@ (80166f8 <CDC_Receive_FS+0x70>)
 80166d4:	0011      	movs	r1, r2
 80166d6:	0018      	movs	r0, r3
 80166d8:	f7fe fce3 	bl	80150a2 <USBD_CDC_SetRxBuffer>
     USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80166dc:	4b06      	ldr	r3, [pc, #24]	@ (80166f8 <CDC_Receive_FS+0x70>)
 80166de:	0018      	movs	r0, r3
 80166e0:	f7fe fd2a 	bl	8015138 <USBD_CDC_ReceivePacket>
   }
   return (USBD_OK);
 80166e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80166e6:	0018      	movs	r0, r3
 80166e8:	46bd      	mov	sp, r7
 80166ea:	b002      	add	sp, #8
 80166ec:	bd80      	pop	{r7, pc}
 80166ee:	46c0      	nop			@ (mov r8, r8)
 80166f0:	20002df4 	.word	0x20002df4
 80166f4:	20002df8 	.word	0x20002df8
 80166f8:	20002b30 	.word	0x20002b30
 80166fc:	20002eb0 	.word	0x20002eb0

08016700 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8016700:	b5b0      	push	{r4, r5, r7, lr}
 8016702:	b084      	sub	sp, #16
 8016704:	af00      	add	r7, sp, #0
 8016706:	6078      	str	r0, [r7, #4]
 8016708:	000a      	movs	r2, r1
 801670a:	1cbb      	adds	r3, r7, #2
 801670c:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801670e:	230f      	movs	r3, #15
 8016710:	18fb      	adds	r3, r7, r3
 8016712:	2200      	movs	r2, #0
 8016714:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8016716:	4a11      	ldr	r2, [pc, #68]	@ (801675c <CDC_Transmit_FS+0x5c>)
 8016718:	23ae      	movs	r3, #174	@ 0xae
 801671a:	009b      	lsls	r3, r3, #2
 801671c:	58d3      	ldr	r3, [r2, r3]
 801671e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016720:	68ba      	ldr	r2, [r7, #8]
 8016722:	2385      	movs	r3, #133	@ 0x85
 8016724:	009b      	lsls	r3, r3, #2
 8016726:	58d3      	ldr	r3, [r2, r3]
 8016728:	2b00      	cmp	r3, #0
 801672a:	d001      	beq.n	8016730 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801672c:	2301      	movs	r3, #1
 801672e:	e010      	b.n	8016752 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8016730:	1cbb      	adds	r3, r7, #2
 8016732:	881a      	ldrh	r2, [r3, #0]
 8016734:	6879      	ldr	r1, [r7, #4]
 8016736:	4b09      	ldr	r3, [pc, #36]	@ (801675c <CDC_Transmit_FS+0x5c>)
 8016738:	0018      	movs	r0, r3
 801673a:	f7fe fc96 	bl	801506a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801673e:	250f      	movs	r5, #15
 8016740:	197c      	adds	r4, r7, r5
 8016742:	4b06      	ldr	r3, [pc, #24]	@ (801675c <CDC_Transmit_FS+0x5c>)
 8016744:	0018      	movs	r0, r3
 8016746:	f7fe fcc0 	bl	80150ca <USBD_CDC_TransmitPacket>
 801674a:	0003      	movs	r3, r0
 801674c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801674e:	197b      	adds	r3, r7, r5
 8016750:	781b      	ldrb	r3, [r3, #0]
}
 8016752:	0018      	movs	r0, r3
 8016754:	46bd      	mov	sp, r7
 8016756:	b004      	add	sp, #16
 8016758:	bdb0      	pop	{r4, r5, r7, pc}
 801675a:	46c0      	nop			@ (mov r8, r8)
 801675c:	20002b30 	.word	0x20002b30

08016760 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 8016760:	b580      	push	{r7, lr}
 8016762:	af00      	add	r7, sp, #0
  ESPProg = true;
 8016764:	4b02      	ldr	r3, [pc, #8]	@ (8016770 <EnableESPProg+0x10>)
 8016766:	2201      	movs	r2, #1
 8016768:	701a      	strb	r2, [r3, #0]
}
 801676a:	46c0      	nop			@ (mov r8, r8)
 801676c:	46bd      	mov	sp, r7
 801676e:	bd80      	pop	{r7, pc}
 8016770:	20002df4 	.word	0x20002df4

08016774 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 8016774:	b580      	push	{r7, lr}
 8016776:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 8016778:	4b01      	ldr	r3, [pc, #4]	@ (8016780 <GetUsbRxPointer+0xc>)
}
 801677a:	0018      	movs	r0, r3
 801677c:	46bd      	mov	sp, r7
 801677e:	bd80      	pop	{r7, pc}
 8016780:	20002eb4 	.word	0x20002eb4

08016784 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 8016784:	b580      	push	{r7, lr}
 8016786:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 8016788:	4b07      	ldr	r3, [pc, #28]	@ (80167a8 <ResetUsbRxDataSize+0x24>)
 801678a:	2200      	movs	r2, #0
 801678c:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801678e:	4a07      	ldr	r2, [pc, #28]	@ (80167ac <ResetUsbRxDataSize+0x28>)
 8016790:	4b07      	ldr	r3, [pc, #28]	@ (80167b0 <ResetUsbRxDataSize+0x2c>)
 8016792:	0011      	movs	r1, r2
 8016794:	0018      	movs	r0, r3
 8016796:	f7fe fc84 	bl	80150a2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801679a:	4b05      	ldr	r3, [pc, #20]	@ (80167b0 <ResetUsbRxDataSize+0x2c>)
 801679c:	0018      	movs	r0, r3
 801679e:	f7fe fccb 	bl	8015138 <USBD_CDC_ReceivePacket>
}
 80167a2:	46c0      	nop			@ (mov r8, r8)
 80167a4:	46bd      	mov	sp, r7
 80167a6:	bd80      	pop	{r7, pc}
 80167a8:	20002eb0 	.word	0x20002eb0
 80167ac:	20002eb4 	.word	0x20002eb4
 80167b0:	20002b30 	.word	0x20002b30

080167b4 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 80167b4:	b580      	push	{r7, lr}
 80167b6:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 80167b8:	4b02      	ldr	r3, [pc, #8]	@ (80167c4 <GetUsbRxDataSize+0x10>)
 80167ba:	681b      	ldr	r3, [r3, #0]
}
 80167bc:	0018      	movs	r0, r3
 80167be:	46bd      	mov	sp, r7
 80167c0:	bd80      	pop	{r7, pc}
 80167c2:	46c0      	nop			@ (mov r8, r8)
 80167c4:	20002eb0 	.word	0x20002eb0

080167c8 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 80167c8:	b580      	push	{r7, lr}
 80167ca:	b082      	sub	sp, #8
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 80167d0:	687a      	ldr	r2, [r7, #4]
 80167d2:	4b07      	ldr	r3, [pc, #28]	@ (80167f0 <GetUsbRxNextChunk+0x28>)
 80167d4:	18d2      	adds	r2, r2, r3
 80167d6:	4b07      	ldr	r3, [pc, #28]	@ (80167f4 <GetUsbRxNextChunk+0x2c>)
 80167d8:	0011      	movs	r1, r2
 80167da:	0018      	movs	r0, r3
 80167dc:	f7fe fc61 	bl	80150a2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80167e0:	4b04      	ldr	r3, [pc, #16]	@ (80167f4 <GetUsbRxNextChunk+0x2c>)
 80167e2:	0018      	movs	r0, r3
 80167e4:	f7fe fca8 	bl	8015138 <USBD_CDC_ReceivePacket>
}
 80167e8:	46c0      	nop			@ (mov r8, r8)
 80167ea:	46bd      	mov	sp, r7
 80167ec:	b002      	add	sp, #8
 80167ee:	bd80      	pop	{r7, pc}
 80167f0:	20002eb4 	.word	0x20002eb4
 80167f4:	20002b30 	.word	0x20002b30

080167f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80167f8:	b580      	push	{r7, lr}
 80167fa:	b082      	sub	sp, #8
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	0002      	movs	r2, r0
 8016800:	6039      	str	r1, [r7, #0]
 8016802:	1dfb      	adds	r3, r7, #7
 8016804:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016806:	683b      	ldr	r3, [r7, #0]
 8016808:	2212      	movs	r2, #18
 801680a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801680c:	4b02      	ldr	r3, [pc, #8]	@ (8016818 <USBD_FS_DeviceDescriptor+0x20>)
}
 801680e:	0018      	movs	r0, r3
 8016810:	46bd      	mov	sp, r7
 8016812:	b002      	add	sp, #8
 8016814:	bd80      	pop	{r7, pc}
 8016816:	46c0      	nop			@ (mov r8, r8)
 8016818:	200001ec 	.word	0x200001ec

0801681c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801681c:	b580      	push	{r7, lr}
 801681e:	b082      	sub	sp, #8
 8016820:	af00      	add	r7, sp, #0
 8016822:	0002      	movs	r2, r0
 8016824:	6039      	str	r1, [r7, #0]
 8016826:	1dfb      	adds	r3, r7, #7
 8016828:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801682a:	683b      	ldr	r3, [r7, #0]
 801682c:	2204      	movs	r2, #4
 801682e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016830:	4b02      	ldr	r3, [pc, #8]	@ (801683c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016832:	0018      	movs	r0, r3
 8016834:	46bd      	mov	sp, r7
 8016836:	b002      	add	sp, #8
 8016838:	bd80      	pop	{r7, pc}
 801683a:	46c0      	nop			@ (mov r8, r8)
 801683c:	20000200 	.word	0x20000200

08016840 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016840:	b580      	push	{r7, lr}
 8016842:	b082      	sub	sp, #8
 8016844:	af00      	add	r7, sp, #0
 8016846:	0002      	movs	r2, r0
 8016848:	6039      	str	r1, [r7, #0]
 801684a:	1dfb      	adds	r3, r7, #7
 801684c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801684e:	1dfb      	adds	r3, r7, #7
 8016850:	781b      	ldrb	r3, [r3, #0]
 8016852:	2b00      	cmp	r3, #0
 8016854:	d106      	bne.n	8016864 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016856:	683a      	ldr	r2, [r7, #0]
 8016858:	4908      	ldr	r1, [pc, #32]	@ (801687c <USBD_FS_ProductStrDescriptor+0x3c>)
 801685a:	4b09      	ldr	r3, [pc, #36]	@ (8016880 <USBD_FS_ProductStrDescriptor+0x40>)
 801685c:	0018      	movs	r0, r3
 801685e:	f7ff fda7 	bl	80163b0 <USBD_GetString>
 8016862:	e005      	b.n	8016870 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016864:	683a      	ldr	r2, [r7, #0]
 8016866:	4905      	ldr	r1, [pc, #20]	@ (801687c <USBD_FS_ProductStrDescriptor+0x3c>)
 8016868:	4b05      	ldr	r3, [pc, #20]	@ (8016880 <USBD_FS_ProductStrDescriptor+0x40>)
 801686a:	0018      	movs	r0, r3
 801686c:	f7ff fda0 	bl	80163b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016870:	4b02      	ldr	r3, [pc, #8]	@ (801687c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8016872:	0018      	movs	r0, r3
 8016874:	46bd      	mov	sp, r7
 8016876:	b002      	add	sp, #8
 8016878:	bd80      	pop	{r7, pc}
 801687a:	46c0      	nop			@ (mov r8, r8)
 801687c:	200036b4 	.word	0x200036b4
 8016880:	0801b578 	.word	0x0801b578

08016884 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016884:	b580      	push	{r7, lr}
 8016886:	b082      	sub	sp, #8
 8016888:	af00      	add	r7, sp, #0
 801688a:	0002      	movs	r2, r0
 801688c:	6039      	str	r1, [r7, #0]
 801688e:	1dfb      	adds	r3, r7, #7
 8016890:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016892:	683a      	ldr	r2, [r7, #0]
 8016894:	4904      	ldr	r1, [pc, #16]	@ (80168a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016896:	4b05      	ldr	r3, [pc, #20]	@ (80168ac <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8016898:	0018      	movs	r0, r3
 801689a:	f7ff fd89 	bl	80163b0 <USBD_GetString>
  return USBD_StrDesc;
 801689e:	4b02      	ldr	r3, [pc, #8]	@ (80168a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80168a0:	0018      	movs	r0, r3
 80168a2:	46bd      	mov	sp, r7
 80168a4:	b002      	add	sp, #8
 80168a6:	bd80      	pop	{r7, pc}
 80168a8:	200036b4 	.word	0x200036b4
 80168ac:	0801b590 	.word	0x0801b590

080168b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b082      	sub	sp, #8
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	0002      	movs	r2, r0
 80168b8:	6039      	str	r1, [r7, #0]
 80168ba:	1dfb      	adds	r3, r7, #7
 80168bc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80168be:	683b      	ldr	r3, [r7, #0]
 80168c0:	221a      	movs	r2, #26
 80168c2:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80168c4:	f000 f84c 	bl	8016960 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80168c8:	4b02      	ldr	r3, [pc, #8]	@ (80168d4 <USBD_FS_SerialStrDescriptor+0x24>)
}
 80168ca:	0018      	movs	r0, r3
 80168cc:	46bd      	mov	sp, r7
 80168ce:	b002      	add	sp, #8
 80168d0:	bd80      	pop	{r7, pc}
 80168d2:	46c0      	nop			@ (mov r8, r8)
 80168d4:	20000204 	.word	0x20000204

080168d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168d8:	b580      	push	{r7, lr}
 80168da:	b082      	sub	sp, #8
 80168dc:	af00      	add	r7, sp, #0
 80168de:	0002      	movs	r2, r0
 80168e0:	6039      	str	r1, [r7, #0]
 80168e2:	1dfb      	adds	r3, r7, #7
 80168e4:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80168e6:	1dfb      	adds	r3, r7, #7
 80168e8:	781b      	ldrb	r3, [r3, #0]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d106      	bne.n	80168fc <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80168ee:	683a      	ldr	r2, [r7, #0]
 80168f0:	4908      	ldr	r1, [pc, #32]	@ (8016914 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80168f2:	4b09      	ldr	r3, [pc, #36]	@ (8016918 <USBD_FS_ConfigStrDescriptor+0x40>)
 80168f4:	0018      	movs	r0, r3
 80168f6:	f7ff fd5b 	bl	80163b0 <USBD_GetString>
 80168fa:	e005      	b.n	8016908 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80168fc:	683a      	ldr	r2, [r7, #0]
 80168fe:	4905      	ldr	r1, [pc, #20]	@ (8016914 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8016900:	4b05      	ldr	r3, [pc, #20]	@ (8016918 <USBD_FS_ConfigStrDescriptor+0x40>)
 8016902:	0018      	movs	r0, r3
 8016904:	f7ff fd54 	bl	80163b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016908:	4b02      	ldr	r3, [pc, #8]	@ (8016914 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801690a:	0018      	movs	r0, r3
 801690c:	46bd      	mov	sp, r7
 801690e:	b002      	add	sp, #8
 8016910:	bd80      	pop	{r7, pc}
 8016912:	46c0      	nop			@ (mov r8, r8)
 8016914:	200036b4 	.word	0x200036b4
 8016918:	0801b5a4 	.word	0x0801b5a4

0801691c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801691c:	b580      	push	{r7, lr}
 801691e:	b082      	sub	sp, #8
 8016920:	af00      	add	r7, sp, #0
 8016922:	0002      	movs	r2, r0
 8016924:	6039      	str	r1, [r7, #0]
 8016926:	1dfb      	adds	r3, r7, #7
 8016928:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801692a:	1dfb      	adds	r3, r7, #7
 801692c:	781b      	ldrb	r3, [r3, #0]
 801692e:	2b00      	cmp	r3, #0
 8016930:	d106      	bne.n	8016940 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016932:	683a      	ldr	r2, [r7, #0]
 8016934:	4908      	ldr	r1, [pc, #32]	@ (8016958 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8016936:	4b09      	ldr	r3, [pc, #36]	@ (801695c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8016938:	0018      	movs	r0, r3
 801693a:	f7ff fd39 	bl	80163b0 <USBD_GetString>
 801693e:	e005      	b.n	801694c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016940:	683a      	ldr	r2, [r7, #0]
 8016942:	4905      	ldr	r1, [pc, #20]	@ (8016958 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8016944:	4b05      	ldr	r3, [pc, #20]	@ (801695c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8016946:	0018      	movs	r0, r3
 8016948:	f7ff fd32 	bl	80163b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801694c:	4b02      	ldr	r3, [pc, #8]	@ (8016958 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801694e:	0018      	movs	r0, r3
 8016950:	46bd      	mov	sp, r7
 8016952:	b002      	add	sp, #8
 8016954:	bd80      	pop	{r7, pc}
 8016956:	46c0      	nop			@ (mov r8, r8)
 8016958:	200036b4 	.word	0x200036b4
 801695c:	0801b5b0 	.word	0x0801b5b0

08016960 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016960:	b580      	push	{r7, lr}
 8016962:	b084      	sub	sp, #16
 8016964:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016966:	4b10      	ldr	r3, [pc, #64]	@ (80169a8 <Get_SerialNum+0x48>)
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801696c:	4b0f      	ldr	r3, [pc, #60]	@ (80169ac <Get_SerialNum+0x4c>)
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016972:	4b0f      	ldr	r3, [pc, #60]	@ (80169b0 <Get_SerialNum+0x50>)
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016978:	68fa      	ldr	r2, [r7, #12]
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	18d3      	adds	r3, r2, r3
 801697e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	2b00      	cmp	r3, #0
 8016984:	d00b      	beq.n	801699e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016986:	490b      	ldr	r1, [pc, #44]	@ (80169b4 <Get_SerialNum+0x54>)
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	2208      	movs	r2, #8
 801698c:	0018      	movs	r0, r3
 801698e:	f000 f815 	bl	80169bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016992:	4909      	ldr	r1, [pc, #36]	@ (80169b8 <Get_SerialNum+0x58>)
 8016994:	68bb      	ldr	r3, [r7, #8]
 8016996:	2204      	movs	r2, #4
 8016998:	0018      	movs	r0, r3
 801699a:	f000 f80f 	bl	80169bc <IntToUnicode>
  }
}
 801699e:	46c0      	nop			@ (mov r8, r8)
 80169a0:	46bd      	mov	sp, r7
 80169a2:	b004      	add	sp, #16
 80169a4:	bd80      	pop	{r7, pc}
 80169a6:	46c0      	nop			@ (mov r8, r8)
 80169a8:	1ff80050 	.word	0x1ff80050
 80169ac:	1ff80054 	.word	0x1ff80054
 80169b0:	1ff80058 	.word	0x1ff80058
 80169b4:	20000206 	.word	0x20000206
 80169b8:	20000216 	.word	0x20000216

080169bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80169bc:	b580      	push	{r7, lr}
 80169be:	b086      	sub	sp, #24
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	60f8      	str	r0, [r7, #12]
 80169c4:	60b9      	str	r1, [r7, #8]
 80169c6:	1dfb      	adds	r3, r7, #7
 80169c8:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80169ca:	2117      	movs	r1, #23
 80169cc:	187b      	adds	r3, r7, r1
 80169ce:	2200      	movs	r2, #0
 80169d0:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80169d2:	187b      	adds	r3, r7, r1
 80169d4:	2200      	movs	r2, #0
 80169d6:	701a      	strb	r2, [r3, #0]
 80169d8:	e02f      	b.n	8016a3a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	0f1b      	lsrs	r3, r3, #28
 80169de:	2b09      	cmp	r3, #9
 80169e0:	d80d      	bhi.n	80169fe <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	0f1b      	lsrs	r3, r3, #28
 80169e6:	b2da      	uxtb	r2, r3
 80169e8:	2317      	movs	r3, #23
 80169ea:	18fb      	adds	r3, r7, r3
 80169ec:	781b      	ldrb	r3, [r3, #0]
 80169ee:	005b      	lsls	r3, r3, #1
 80169f0:	0019      	movs	r1, r3
 80169f2:	68bb      	ldr	r3, [r7, #8]
 80169f4:	185b      	adds	r3, r3, r1
 80169f6:	3230      	adds	r2, #48	@ 0x30
 80169f8:	b2d2      	uxtb	r2, r2
 80169fa:	701a      	strb	r2, [r3, #0]
 80169fc:	e00c      	b.n	8016a18 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	0f1b      	lsrs	r3, r3, #28
 8016a02:	b2da      	uxtb	r2, r3
 8016a04:	2317      	movs	r3, #23
 8016a06:	18fb      	adds	r3, r7, r3
 8016a08:	781b      	ldrb	r3, [r3, #0]
 8016a0a:	005b      	lsls	r3, r3, #1
 8016a0c:	0019      	movs	r1, r3
 8016a0e:	68bb      	ldr	r3, [r7, #8]
 8016a10:	185b      	adds	r3, r3, r1
 8016a12:	3237      	adds	r2, #55	@ 0x37
 8016a14:	b2d2      	uxtb	r2, r2
 8016a16:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	011b      	lsls	r3, r3, #4
 8016a1c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016a1e:	2117      	movs	r1, #23
 8016a20:	187b      	adds	r3, r7, r1
 8016a22:	781b      	ldrb	r3, [r3, #0]
 8016a24:	005b      	lsls	r3, r3, #1
 8016a26:	3301      	adds	r3, #1
 8016a28:	68ba      	ldr	r2, [r7, #8]
 8016a2a:	18d3      	adds	r3, r2, r3
 8016a2c:	2200      	movs	r2, #0
 8016a2e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016a30:	187b      	adds	r3, r7, r1
 8016a32:	781a      	ldrb	r2, [r3, #0]
 8016a34:	187b      	adds	r3, r7, r1
 8016a36:	3201      	adds	r2, #1
 8016a38:	701a      	strb	r2, [r3, #0]
 8016a3a:	2317      	movs	r3, #23
 8016a3c:	18fa      	adds	r2, r7, r3
 8016a3e:	1dfb      	adds	r3, r7, #7
 8016a40:	7812      	ldrb	r2, [r2, #0]
 8016a42:	781b      	ldrb	r3, [r3, #0]
 8016a44:	429a      	cmp	r2, r3
 8016a46:	d3c8      	bcc.n	80169da <IntToUnicode+0x1e>
  }
}
 8016a48:	46c0      	nop			@ (mov r8, r8)
 8016a4a:	46c0      	nop			@ (mov r8, r8)
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	b006      	add	sp, #24
 8016a50:	bd80      	pop	{r7, pc}
	...

08016a54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016a54:	b580      	push	{r7, lr}
 8016a56:	b082      	sub	sp, #8
 8016a58:	af00      	add	r7, sp, #0
 8016a5a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	4a0a      	ldr	r2, [pc, #40]	@ (8016a8c <HAL_PCD_MspInit+0x38>)
 8016a62:	4293      	cmp	r3, r2
 8016a64:	d10e      	bne.n	8016a84 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8016a66:	4b0a      	ldr	r3, [pc, #40]	@ (8016a90 <HAL_PCD_MspInit+0x3c>)
 8016a68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016a6a:	4b09      	ldr	r3, [pc, #36]	@ (8016a90 <HAL_PCD_MspInit+0x3c>)
 8016a6c:	2180      	movs	r1, #128	@ 0x80
 8016a6e:	0409      	lsls	r1, r1, #16
 8016a70:	430a      	orrs	r2, r1
 8016a72:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8016a74:	2200      	movs	r2, #0
 8016a76:	2100      	movs	r1, #0
 8016a78:	201f      	movs	r0, #31
 8016a7a:	f7f3 fdc7 	bl	800a60c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8016a7e:	201f      	movs	r0, #31
 8016a80:	f7f3 fdd9 	bl	800a636 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8016a84:	46c0      	nop			@ (mov r8, r8)
 8016a86:	46bd      	mov	sp, r7
 8016a88:	b002      	add	sp, #8
 8016a8a:	bd80      	pop	{r7, pc}
 8016a8c:	40005c00 	.word	0x40005c00
 8016a90:	40021000 	.word	0x40021000

08016a94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a94:	b580      	push	{r7, lr}
 8016a96:	b082      	sub	sp, #8
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016a9c:	687a      	ldr	r2, [r7, #4]
 8016a9e:	23bc      	movs	r3, #188	@ 0xbc
 8016aa0:	009b      	lsls	r3, r3, #2
 8016aa2:	58d2      	ldr	r2, [r2, r3]
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	21ac      	movs	r1, #172	@ 0xac
 8016aa8:	0089      	lsls	r1, r1, #2
 8016aaa:	468c      	mov	ip, r1
 8016aac:	4463      	add	r3, ip
 8016aae:	0019      	movs	r1, r3
 8016ab0:	0010      	movs	r0, r2
 8016ab2:	f7fe fc13 	bl	80152dc <USBD_LL_SetupStage>
}
 8016ab6:	46c0      	nop			@ (mov r8, r8)
 8016ab8:	46bd      	mov	sp, r7
 8016aba:	b002      	add	sp, #8
 8016abc:	bd80      	pop	{r7, pc}

08016abe <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016abe:	b590      	push	{r4, r7, lr}
 8016ac0:	b083      	sub	sp, #12
 8016ac2:	af00      	add	r7, sp, #0
 8016ac4:	6078      	str	r0, [r7, #4]
 8016ac6:	000a      	movs	r2, r1
 8016ac8:	1cfb      	adds	r3, r7, #3
 8016aca:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016acc:	687a      	ldr	r2, [r7, #4]
 8016ace:	23bc      	movs	r3, #188	@ 0xbc
 8016ad0:	009b      	lsls	r3, r3, #2
 8016ad2:	58d4      	ldr	r4, [r2, r3]
 8016ad4:	1cfb      	adds	r3, r7, #3
 8016ad6:	781a      	ldrb	r2, [r3, #0]
 8016ad8:	6878      	ldr	r0, [r7, #4]
 8016ada:	23be      	movs	r3, #190	@ 0xbe
 8016adc:	0059      	lsls	r1, r3, #1
 8016ade:	0013      	movs	r3, r2
 8016ae0:	009b      	lsls	r3, r3, #2
 8016ae2:	189b      	adds	r3, r3, r2
 8016ae4:	00db      	lsls	r3, r3, #3
 8016ae6:	18c3      	adds	r3, r0, r3
 8016ae8:	185b      	adds	r3, r3, r1
 8016aea:	681a      	ldr	r2, [r3, #0]
 8016aec:	1cfb      	adds	r3, r7, #3
 8016aee:	781b      	ldrb	r3, [r3, #0]
 8016af0:	0019      	movs	r1, r3
 8016af2:	0020      	movs	r0, r4
 8016af4:	f7fe fc50 	bl	8015398 <USBD_LL_DataOutStage>
}
 8016af8:	46c0      	nop			@ (mov r8, r8)
 8016afa:	46bd      	mov	sp, r7
 8016afc:	b003      	add	sp, #12
 8016afe:	bd90      	pop	{r4, r7, pc}

08016b00 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b00:	b580      	push	{r7, lr}
 8016b02:	b082      	sub	sp, #8
 8016b04:	af00      	add	r7, sp, #0
 8016b06:	6078      	str	r0, [r7, #4]
 8016b08:	000a      	movs	r2, r1
 8016b0a:	1cfb      	adds	r3, r7, #3
 8016b0c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016b0e:	687a      	ldr	r2, [r7, #4]
 8016b10:	23bc      	movs	r3, #188	@ 0xbc
 8016b12:	009b      	lsls	r3, r3, #2
 8016b14:	58d0      	ldr	r0, [r2, r3]
 8016b16:	1cfb      	adds	r3, r7, #3
 8016b18:	781a      	ldrb	r2, [r3, #0]
 8016b1a:	6879      	ldr	r1, [r7, #4]
 8016b1c:	0013      	movs	r3, r2
 8016b1e:	009b      	lsls	r3, r3, #2
 8016b20:	189b      	adds	r3, r3, r2
 8016b22:	00db      	lsls	r3, r3, #3
 8016b24:	18cb      	adds	r3, r1, r3
 8016b26:	333c      	adds	r3, #60	@ 0x3c
 8016b28:	681a      	ldr	r2, [r3, #0]
 8016b2a:	1cfb      	adds	r3, r7, #3
 8016b2c:	781b      	ldrb	r3, [r3, #0]
 8016b2e:	0019      	movs	r1, r3
 8016b30:	f7fe fcb4 	bl	801549c <USBD_LL_DataInStage>
}
 8016b34:	46c0      	nop			@ (mov r8, r8)
 8016b36:	46bd      	mov	sp, r7
 8016b38:	b002      	add	sp, #8
 8016b3a:	bd80      	pop	{r7, pc}

08016b3c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b082      	sub	sp, #8
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016b44:	687a      	ldr	r2, [r7, #4]
 8016b46:	23bc      	movs	r3, #188	@ 0xbc
 8016b48:	009b      	lsls	r3, r3, #2
 8016b4a:	58d3      	ldr	r3, [r2, r3]
 8016b4c:	0018      	movs	r0, r3
 8016b4e:	f7fe fdeb 	bl	8015728 <USBD_LL_SOF>
}
 8016b52:	46c0      	nop			@ (mov r8, r8)
 8016b54:	46bd      	mov	sp, r7
 8016b56:	b002      	add	sp, #8
 8016b58:	bd80      	pop	{r7, pc}

08016b5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b5a:	b580      	push	{r7, lr}
 8016b5c:	b084      	sub	sp, #16
 8016b5e:	af00      	add	r7, sp, #0
 8016b60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016b62:	230f      	movs	r3, #15
 8016b64:	18fb      	adds	r3, r7, r3
 8016b66:	2201      	movs	r2, #1
 8016b68:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	689b      	ldr	r3, [r3, #8]
 8016b6e:	2b02      	cmp	r3, #2
 8016b70:	d001      	beq.n	8016b76 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8016b72:	f7ef fbb5 	bl	80062e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016b76:	687a      	ldr	r2, [r7, #4]
 8016b78:	23bc      	movs	r3, #188	@ 0xbc
 8016b7a:	009b      	lsls	r3, r3, #2
 8016b7c:	58d2      	ldr	r2, [r2, r3]
 8016b7e:	230f      	movs	r3, #15
 8016b80:	18fb      	adds	r3, r7, r3
 8016b82:	781b      	ldrb	r3, [r3, #0]
 8016b84:	0019      	movs	r1, r3
 8016b86:	0010      	movs	r0, r2
 8016b88:	f7fe fd8d 	bl	80156a6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016b8c:	687a      	ldr	r2, [r7, #4]
 8016b8e:	23bc      	movs	r3, #188	@ 0xbc
 8016b90:	009b      	lsls	r3, r3, #2
 8016b92:	58d3      	ldr	r3, [r2, r3]
 8016b94:	0018      	movs	r0, r3
 8016b96:	f7fe fd3e 	bl	8015616 <USBD_LL_Reset>
}
 8016b9a:	46c0      	nop			@ (mov r8, r8)
 8016b9c:	46bd      	mov	sp, r7
 8016b9e:	b004      	add	sp, #16
 8016ba0:	bd80      	pop	{r7, pc}
	...

08016ba4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ba4:	b580      	push	{r7, lr}
 8016ba6:	b082      	sub	sp, #8
 8016ba8:	af00      	add	r7, sp, #0
 8016baa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016bac:	687a      	ldr	r2, [r7, #4]
 8016bae:	23bc      	movs	r3, #188	@ 0xbc
 8016bb0:	009b      	lsls	r3, r3, #2
 8016bb2:	58d3      	ldr	r3, [r2, r3]
 8016bb4:	0018      	movs	r0, r3
 8016bb6:	f7fe fd87 	bl	80156c8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	699b      	ldr	r3, [r3, #24]
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d005      	beq.n	8016bce <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016bc2:	4b05      	ldr	r3, [pc, #20]	@ (8016bd8 <HAL_PCD_SuspendCallback+0x34>)
 8016bc4:	691a      	ldr	r2, [r3, #16]
 8016bc6:	4b04      	ldr	r3, [pc, #16]	@ (8016bd8 <HAL_PCD_SuspendCallback+0x34>)
 8016bc8:	2106      	movs	r1, #6
 8016bca:	430a      	orrs	r2, r1
 8016bcc:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8016bce:	46c0      	nop			@ (mov r8, r8)
 8016bd0:	46bd      	mov	sp, r7
 8016bd2:	b002      	add	sp, #8
 8016bd4:	bd80      	pop	{r7, pc}
 8016bd6:	46c0      	nop			@ (mov r8, r8)
 8016bd8:	e000ed00 	.word	0xe000ed00

08016bdc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bdc:	b580      	push	{r7, lr}
 8016bde:	b082      	sub	sp, #8
 8016be0:	af00      	add	r7, sp, #0
 8016be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	699b      	ldr	r3, [r3, #24]
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d007      	beq.n	8016bfc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016bec:	4b09      	ldr	r3, [pc, #36]	@ (8016c14 <HAL_PCD_ResumeCallback+0x38>)
 8016bee:	691a      	ldr	r2, [r3, #16]
 8016bf0:	4b08      	ldr	r3, [pc, #32]	@ (8016c14 <HAL_PCD_ResumeCallback+0x38>)
 8016bf2:	2106      	movs	r1, #6
 8016bf4:	438a      	bics	r2, r1
 8016bf6:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8016bf8:	f000 fa44 	bl	8017084 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016bfc:	687a      	ldr	r2, [r7, #4]
 8016bfe:	23bc      	movs	r3, #188	@ 0xbc
 8016c00:	009b      	lsls	r3, r3, #2
 8016c02:	58d3      	ldr	r3, [r2, r3]
 8016c04:	0018      	movs	r0, r3
 8016c06:	f7fe fd77 	bl	80156f8 <USBD_LL_Resume>
}
 8016c0a:	46c0      	nop			@ (mov r8, r8)
 8016c0c:	46bd      	mov	sp, r7
 8016c0e:	b002      	add	sp, #8
 8016c10:	bd80      	pop	{r7, pc}
 8016c12:	46c0      	nop			@ (mov r8, r8)
 8016c14:	e000ed00 	.word	0xe000ed00

08016c18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016c18:	b580      	push	{r7, lr}
 8016c1a:	b082      	sub	sp, #8
 8016c1c:	af00      	add	r7, sp, #0
 8016c1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8016c20:	4a2d      	ldr	r2, [pc, #180]	@ (8016cd8 <USBD_LL_Init+0xc0>)
 8016c22:	23bc      	movs	r3, #188	@ 0xbc
 8016c24:	009b      	lsls	r3, r3, #2
 8016c26:	6879      	ldr	r1, [r7, #4]
 8016c28:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8016c2a:	687a      	ldr	r2, [r7, #4]
 8016c2c:	23b0      	movs	r3, #176	@ 0xb0
 8016c2e:	009b      	lsls	r3, r3, #2
 8016c30:	4929      	ldr	r1, [pc, #164]	@ (8016cd8 <USBD_LL_Init+0xc0>)
 8016c32:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8016c34:	4b28      	ldr	r3, [pc, #160]	@ (8016cd8 <USBD_LL_Init+0xc0>)
 8016c36:	4a29      	ldr	r2, [pc, #164]	@ (8016cdc <USBD_LL_Init+0xc4>)
 8016c38:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8016c3a:	4b27      	ldr	r3, [pc, #156]	@ (8016cd8 <USBD_LL_Init+0xc0>)
 8016c3c:	2208      	movs	r2, #8
 8016c3e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8016c40:	4b25      	ldr	r3, [pc, #148]	@ (8016cd8 <USBD_LL_Init+0xc0>)
 8016c42:	2202      	movs	r2, #2
 8016c44:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016c46:	4b24      	ldr	r3, [pc, #144]	@ (8016cd8 <USBD_LL_Init+0xc0>)
 8016c48:	2202      	movs	r2, #2
 8016c4a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8016c4c:	4b22      	ldr	r3, [pc, #136]	@ (8016cd8 <USBD_LL_Init+0xc0>)
 8016c4e:	2200      	movs	r2, #0
 8016c50:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8016c52:	4b21      	ldr	r3, [pc, #132]	@ (8016cd8 <USBD_LL_Init+0xc0>)
 8016c54:	2200      	movs	r2, #0
 8016c56:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8016c58:	4b1f      	ldr	r3, [pc, #124]	@ (8016cd8 <USBD_LL_Init+0xc0>)
 8016c5a:	2200      	movs	r2, #0
 8016c5c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8016c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8016cd8 <USBD_LL_Init+0xc0>)
 8016c60:	0018      	movs	r0, r3
 8016c62:	f7f6 ff77 	bl	800db54 <HAL_PCD_Init>
 8016c66:	1e03      	subs	r3, r0, #0
 8016c68:	d001      	beq.n	8016c6e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8016c6a:	f7ef fb39 	bl	80062e0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8016c6e:	687a      	ldr	r2, [r7, #4]
 8016c70:	23b0      	movs	r3, #176	@ 0xb0
 8016c72:	009b      	lsls	r3, r3, #2
 8016c74:	58d0      	ldr	r0, [r2, r3]
 8016c76:	2318      	movs	r3, #24
 8016c78:	2200      	movs	r2, #0
 8016c7a:	2100      	movs	r1, #0
 8016c7c:	f7f8 fd38 	bl	800f6f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8016c80:	687a      	ldr	r2, [r7, #4]
 8016c82:	23b0      	movs	r3, #176	@ 0xb0
 8016c84:	009b      	lsls	r3, r3, #2
 8016c86:	58d0      	ldr	r0, [r2, r3]
 8016c88:	2358      	movs	r3, #88	@ 0x58
 8016c8a:	2200      	movs	r2, #0
 8016c8c:	2180      	movs	r1, #128	@ 0x80
 8016c8e:	f7f8 fd2f 	bl	800f6f0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8016c92:	687a      	ldr	r2, [r7, #4]
 8016c94:	23b0      	movs	r3, #176	@ 0xb0
 8016c96:	009b      	lsls	r3, r3, #2
 8016c98:	58d0      	ldr	r0, [r2, r3]
 8016c9a:	23c0      	movs	r3, #192	@ 0xc0
 8016c9c:	2200      	movs	r2, #0
 8016c9e:	2181      	movs	r1, #129	@ 0x81
 8016ca0:	f7f8 fd26 	bl	800f6f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8016ca4:	687a      	ldr	r2, [r7, #4]
 8016ca6:	23b0      	movs	r3, #176	@ 0xb0
 8016ca8:	009b      	lsls	r3, r3, #2
 8016caa:	58d0      	ldr	r0, [r2, r3]
 8016cac:	2388      	movs	r3, #136	@ 0x88
 8016cae:	005b      	lsls	r3, r3, #1
 8016cb0:	2200      	movs	r2, #0
 8016cb2:	2101      	movs	r1, #1
 8016cb4:	f7f8 fd1c 	bl	800f6f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8016cb8:	687a      	ldr	r2, [r7, #4]
 8016cba:	23b0      	movs	r3, #176	@ 0xb0
 8016cbc:	009b      	lsls	r3, r3, #2
 8016cbe:	58d0      	ldr	r0, [r2, r3]
 8016cc0:	2380      	movs	r3, #128	@ 0x80
 8016cc2:	005b      	lsls	r3, r3, #1
 8016cc4:	2200      	movs	r2, #0
 8016cc6:	2182      	movs	r1, #130	@ 0x82
 8016cc8:	f7f8 fd12 	bl	800f6f0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8016ccc:	2300      	movs	r3, #0
}
 8016cce:	0018      	movs	r0, r3
 8016cd0:	46bd      	mov	sp, r7
 8016cd2:	b002      	add	sp, #8
 8016cd4:	bd80      	pop	{r7, pc}
 8016cd6:	46c0      	nop			@ (mov r8, r8)
 8016cd8:	200038b4 	.word	0x200038b4
 8016cdc:	40005c00 	.word	0x40005c00

08016ce0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ce2:	b085      	sub	sp, #20
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ce8:	210f      	movs	r1, #15
 8016cea:	187b      	adds	r3, r7, r1
 8016cec:	2200      	movs	r2, #0
 8016cee:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016cf0:	260e      	movs	r6, #14
 8016cf2:	19bb      	adds	r3, r7, r6
 8016cf4:	2200      	movs	r2, #0
 8016cf6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016cf8:	687a      	ldr	r2, [r7, #4]
 8016cfa:	23b0      	movs	r3, #176	@ 0xb0
 8016cfc:	009b      	lsls	r3, r3, #2
 8016cfe:	58d3      	ldr	r3, [r2, r3]
 8016d00:	000d      	movs	r5, r1
 8016d02:	187c      	adds	r4, r7, r1
 8016d04:	0018      	movs	r0, r3
 8016d06:	f7f7 f825 	bl	800dd54 <HAL_PCD_Start>
 8016d0a:	0003      	movs	r3, r0
 8016d0c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d0e:	19bc      	adds	r4, r7, r6
 8016d10:	197b      	adds	r3, r7, r5
 8016d12:	781b      	ldrb	r3, [r3, #0]
 8016d14:	0018      	movs	r0, r3
 8016d16:	f000 f9bc 	bl	8017092 <USBD_Get_USB_Status>
 8016d1a:	0003      	movs	r3, r0
 8016d1c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8016d1e:	19bb      	adds	r3, r7, r6
 8016d20:	781b      	ldrb	r3, [r3, #0]
}
 8016d22:	0018      	movs	r0, r3
 8016d24:	46bd      	mov	sp, r7
 8016d26:	b005      	add	sp, #20
 8016d28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016d2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016d2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d2c:	b085      	sub	sp, #20
 8016d2e:	af00      	add	r7, sp, #0
 8016d30:	6078      	str	r0, [r7, #4]
 8016d32:	000c      	movs	r4, r1
 8016d34:	0010      	movs	r0, r2
 8016d36:	0019      	movs	r1, r3
 8016d38:	1cfb      	adds	r3, r7, #3
 8016d3a:	1c22      	adds	r2, r4, #0
 8016d3c:	701a      	strb	r2, [r3, #0]
 8016d3e:	1cbb      	adds	r3, r7, #2
 8016d40:	1c02      	adds	r2, r0, #0
 8016d42:	701a      	strb	r2, [r3, #0]
 8016d44:	003b      	movs	r3, r7
 8016d46:	1c0a      	adds	r2, r1, #0
 8016d48:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d4a:	260f      	movs	r6, #15
 8016d4c:	19bb      	adds	r3, r7, r6
 8016d4e:	2200      	movs	r2, #0
 8016d50:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d52:	250e      	movs	r5, #14
 8016d54:	197b      	adds	r3, r7, r5
 8016d56:	2200      	movs	r2, #0
 8016d58:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016d5a:	687a      	ldr	r2, [r7, #4]
 8016d5c:	23b0      	movs	r3, #176	@ 0xb0
 8016d5e:	009b      	lsls	r3, r3, #2
 8016d60:	58d0      	ldr	r0, [r2, r3]
 8016d62:	19bc      	adds	r4, r7, r6
 8016d64:	1cbb      	adds	r3, r7, #2
 8016d66:	781d      	ldrb	r5, [r3, #0]
 8016d68:	003b      	movs	r3, r7
 8016d6a:	881a      	ldrh	r2, [r3, #0]
 8016d6c:	1cfb      	adds	r3, r7, #3
 8016d6e:	7819      	ldrb	r1, [r3, #0]
 8016d70:	002b      	movs	r3, r5
 8016d72:	f7f7 f984 	bl	800e07e <HAL_PCD_EP_Open>
 8016d76:	0003      	movs	r3, r0
 8016d78:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d7a:	250e      	movs	r5, #14
 8016d7c:	197c      	adds	r4, r7, r5
 8016d7e:	19bb      	adds	r3, r7, r6
 8016d80:	781b      	ldrb	r3, [r3, #0]
 8016d82:	0018      	movs	r0, r3
 8016d84:	f000 f985 	bl	8017092 <USBD_Get_USB_Status>
 8016d88:	0003      	movs	r3, r0
 8016d8a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8016d8c:	197b      	adds	r3, r7, r5
 8016d8e:	781b      	ldrb	r3, [r3, #0]
}
 8016d90:	0018      	movs	r0, r3
 8016d92:	46bd      	mov	sp, r7
 8016d94:	b005      	add	sp, #20
 8016d96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016d98 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d9a:	b085      	sub	sp, #20
 8016d9c:	af00      	add	r7, sp, #0
 8016d9e:	6078      	str	r0, [r7, #4]
 8016da0:	000a      	movs	r2, r1
 8016da2:	1cfb      	adds	r3, r7, #3
 8016da4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016da6:	210f      	movs	r1, #15
 8016da8:	187b      	adds	r3, r7, r1
 8016daa:	2200      	movs	r2, #0
 8016dac:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016dae:	260e      	movs	r6, #14
 8016db0:	19bb      	adds	r3, r7, r6
 8016db2:	2200      	movs	r2, #0
 8016db4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016db6:	687a      	ldr	r2, [r7, #4]
 8016db8:	23b0      	movs	r3, #176	@ 0xb0
 8016dba:	009b      	lsls	r3, r3, #2
 8016dbc:	58d2      	ldr	r2, [r2, r3]
 8016dbe:	000d      	movs	r5, r1
 8016dc0:	187c      	adds	r4, r7, r1
 8016dc2:	1cfb      	adds	r3, r7, #3
 8016dc4:	781b      	ldrb	r3, [r3, #0]
 8016dc6:	0019      	movs	r1, r3
 8016dc8:	0010      	movs	r0, r2
 8016dca:	f7f7 f9c7 	bl	800e15c <HAL_PCD_EP_Close>
 8016dce:	0003      	movs	r3, r0
 8016dd0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016dd2:	19bc      	adds	r4, r7, r6
 8016dd4:	197b      	adds	r3, r7, r5
 8016dd6:	781b      	ldrb	r3, [r3, #0]
 8016dd8:	0018      	movs	r0, r3
 8016dda:	f000 f95a 	bl	8017092 <USBD_Get_USB_Status>
 8016dde:	0003      	movs	r3, r0
 8016de0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8016de2:	19bb      	adds	r3, r7, r6
 8016de4:	781b      	ldrb	r3, [r3, #0]
}
 8016de6:	0018      	movs	r0, r3
 8016de8:	46bd      	mov	sp, r7
 8016dea:	b005      	add	sp, #20
 8016dec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016dee <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016dee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016df0:	b085      	sub	sp, #20
 8016df2:	af00      	add	r7, sp, #0
 8016df4:	6078      	str	r0, [r7, #4]
 8016df6:	000a      	movs	r2, r1
 8016df8:	1cfb      	adds	r3, r7, #3
 8016dfa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016dfc:	210f      	movs	r1, #15
 8016dfe:	187b      	adds	r3, r7, r1
 8016e00:	2200      	movs	r2, #0
 8016e02:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e04:	260e      	movs	r6, #14
 8016e06:	19bb      	adds	r3, r7, r6
 8016e08:	2200      	movs	r2, #0
 8016e0a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016e0c:	687a      	ldr	r2, [r7, #4]
 8016e0e:	23b0      	movs	r3, #176	@ 0xb0
 8016e10:	009b      	lsls	r3, r3, #2
 8016e12:	58d2      	ldr	r2, [r2, r3]
 8016e14:	000d      	movs	r5, r1
 8016e16:	187c      	adds	r4, r7, r1
 8016e18:	1cfb      	adds	r3, r7, #3
 8016e1a:	781b      	ldrb	r3, [r3, #0]
 8016e1c:	0019      	movs	r1, r3
 8016e1e:	0010      	movs	r0, r2
 8016e20:	f7f7 fa79 	bl	800e316 <HAL_PCD_EP_SetStall>
 8016e24:	0003      	movs	r3, r0
 8016e26:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e28:	19bc      	adds	r4, r7, r6
 8016e2a:	197b      	adds	r3, r7, r5
 8016e2c:	781b      	ldrb	r3, [r3, #0]
 8016e2e:	0018      	movs	r0, r3
 8016e30:	f000 f92f 	bl	8017092 <USBD_Get_USB_Status>
 8016e34:	0003      	movs	r3, r0
 8016e36:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8016e38:	19bb      	adds	r3, r7, r6
 8016e3a:	781b      	ldrb	r3, [r3, #0]
}
 8016e3c:	0018      	movs	r0, r3
 8016e3e:	46bd      	mov	sp, r7
 8016e40:	b005      	add	sp, #20
 8016e42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016e44 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e46:	b085      	sub	sp, #20
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	6078      	str	r0, [r7, #4]
 8016e4c:	000a      	movs	r2, r1
 8016e4e:	1cfb      	adds	r3, r7, #3
 8016e50:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e52:	210f      	movs	r1, #15
 8016e54:	187b      	adds	r3, r7, r1
 8016e56:	2200      	movs	r2, #0
 8016e58:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e5a:	260e      	movs	r6, #14
 8016e5c:	19bb      	adds	r3, r7, r6
 8016e5e:	2200      	movs	r2, #0
 8016e60:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016e62:	687a      	ldr	r2, [r7, #4]
 8016e64:	23b0      	movs	r3, #176	@ 0xb0
 8016e66:	009b      	lsls	r3, r3, #2
 8016e68:	58d2      	ldr	r2, [r2, r3]
 8016e6a:	000d      	movs	r5, r1
 8016e6c:	187c      	adds	r4, r7, r1
 8016e6e:	1cfb      	adds	r3, r7, #3
 8016e70:	781b      	ldrb	r3, [r3, #0]
 8016e72:	0019      	movs	r1, r3
 8016e74:	0010      	movs	r0, r2
 8016e76:	f7f7 faaa 	bl	800e3ce <HAL_PCD_EP_ClrStall>
 8016e7a:	0003      	movs	r3, r0
 8016e7c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e7e:	19bc      	adds	r4, r7, r6
 8016e80:	197b      	adds	r3, r7, r5
 8016e82:	781b      	ldrb	r3, [r3, #0]
 8016e84:	0018      	movs	r0, r3
 8016e86:	f000 f904 	bl	8017092 <USBD_Get_USB_Status>
 8016e8a:	0003      	movs	r3, r0
 8016e8c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8016e8e:	19bb      	adds	r3, r7, r6
 8016e90:	781b      	ldrb	r3, [r3, #0]
}
 8016e92:	0018      	movs	r0, r3
 8016e94:	46bd      	mov	sp, r7
 8016e96:	b005      	add	sp, #20
 8016e98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016e9a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e9a:	b580      	push	{r7, lr}
 8016e9c:	b084      	sub	sp, #16
 8016e9e:	af00      	add	r7, sp, #0
 8016ea0:	6078      	str	r0, [r7, #4]
 8016ea2:	000a      	movs	r2, r1
 8016ea4:	1cfb      	adds	r3, r7, #3
 8016ea6:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016ea8:	687a      	ldr	r2, [r7, #4]
 8016eaa:	23b0      	movs	r3, #176	@ 0xb0
 8016eac:	009b      	lsls	r3, r3, #2
 8016eae:	58d3      	ldr	r3, [r2, r3]
 8016eb0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016eb2:	1cfb      	adds	r3, r7, #3
 8016eb4:	781b      	ldrb	r3, [r3, #0]
 8016eb6:	b25b      	sxtb	r3, r3
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	da0d      	bge.n	8016ed8 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016ebc:	1cfb      	adds	r3, r7, #3
 8016ebe:	781b      	ldrb	r3, [r3, #0]
 8016ec0:	227f      	movs	r2, #127	@ 0x7f
 8016ec2:	4013      	ands	r3, r2
 8016ec4:	68f9      	ldr	r1, [r7, #12]
 8016ec6:	1c5a      	adds	r2, r3, #1
 8016ec8:	0013      	movs	r3, r2
 8016eca:	009b      	lsls	r3, r3, #2
 8016ecc:	189b      	adds	r3, r3, r2
 8016ece:	00db      	lsls	r3, r3, #3
 8016ed0:	18cb      	adds	r3, r1, r3
 8016ed2:	3302      	adds	r3, #2
 8016ed4:	781b      	ldrb	r3, [r3, #0]
 8016ed6:	e00d      	b.n	8016ef4 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016ed8:	1cfb      	adds	r3, r7, #3
 8016eda:	781b      	ldrb	r3, [r3, #0]
 8016edc:	227f      	movs	r2, #127	@ 0x7f
 8016ede:	401a      	ands	r2, r3
 8016ee0:	68f8      	ldr	r0, [r7, #12]
 8016ee2:	23b5      	movs	r3, #181	@ 0xb5
 8016ee4:	0059      	lsls	r1, r3, #1
 8016ee6:	0013      	movs	r3, r2
 8016ee8:	009b      	lsls	r3, r3, #2
 8016eea:	189b      	adds	r3, r3, r2
 8016eec:	00db      	lsls	r3, r3, #3
 8016eee:	18c3      	adds	r3, r0, r3
 8016ef0:	185b      	adds	r3, r3, r1
 8016ef2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016ef4:	0018      	movs	r0, r3
 8016ef6:	46bd      	mov	sp, r7
 8016ef8:	b004      	add	sp, #16
 8016efa:	bd80      	pop	{r7, pc}

08016efc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016efe:	b085      	sub	sp, #20
 8016f00:	af00      	add	r7, sp, #0
 8016f02:	6078      	str	r0, [r7, #4]
 8016f04:	000a      	movs	r2, r1
 8016f06:	1cfb      	adds	r3, r7, #3
 8016f08:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f0a:	210f      	movs	r1, #15
 8016f0c:	187b      	adds	r3, r7, r1
 8016f0e:	2200      	movs	r2, #0
 8016f10:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f12:	260e      	movs	r6, #14
 8016f14:	19bb      	adds	r3, r7, r6
 8016f16:	2200      	movs	r2, #0
 8016f18:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016f1a:	687a      	ldr	r2, [r7, #4]
 8016f1c:	23b0      	movs	r3, #176	@ 0xb0
 8016f1e:	009b      	lsls	r3, r3, #2
 8016f20:	58d2      	ldr	r2, [r2, r3]
 8016f22:	000d      	movs	r5, r1
 8016f24:	187c      	adds	r4, r7, r1
 8016f26:	1cfb      	adds	r3, r7, #3
 8016f28:	781b      	ldrb	r3, [r3, #0]
 8016f2a:	0019      	movs	r1, r3
 8016f2c:	0010      	movs	r0, r2
 8016f2e:	f7f7 f87b 	bl	800e028 <HAL_PCD_SetAddress>
 8016f32:	0003      	movs	r3, r0
 8016f34:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f36:	19bc      	adds	r4, r7, r6
 8016f38:	197b      	adds	r3, r7, r5
 8016f3a:	781b      	ldrb	r3, [r3, #0]
 8016f3c:	0018      	movs	r0, r3
 8016f3e:	f000 f8a8 	bl	8017092 <USBD_Get_USB_Status>
 8016f42:	0003      	movs	r3, r0
 8016f44:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8016f46:	19bb      	adds	r3, r7, r6
 8016f48:	781b      	ldrb	r3, [r3, #0]
}
 8016f4a:	0018      	movs	r0, r3
 8016f4c:	46bd      	mov	sp, r7
 8016f4e:	b005      	add	sp, #20
 8016f50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016f52 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8016f52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f54:	b087      	sub	sp, #28
 8016f56:	af00      	add	r7, sp, #0
 8016f58:	60f8      	str	r0, [r7, #12]
 8016f5a:	0008      	movs	r0, r1
 8016f5c:	607a      	str	r2, [r7, #4]
 8016f5e:	0019      	movs	r1, r3
 8016f60:	230b      	movs	r3, #11
 8016f62:	18fb      	adds	r3, r7, r3
 8016f64:	1c02      	adds	r2, r0, #0
 8016f66:	701a      	strb	r2, [r3, #0]
 8016f68:	2408      	movs	r4, #8
 8016f6a:	193b      	adds	r3, r7, r4
 8016f6c:	1c0a      	adds	r2, r1, #0
 8016f6e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f70:	2117      	movs	r1, #23
 8016f72:	187b      	adds	r3, r7, r1
 8016f74:	2200      	movs	r2, #0
 8016f76:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f78:	2516      	movs	r5, #22
 8016f7a:	197b      	adds	r3, r7, r5
 8016f7c:	2200      	movs	r2, #0
 8016f7e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016f80:	68fa      	ldr	r2, [r7, #12]
 8016f82:	23b0      	movs	r3, #176	@ 0xb0
 8016f84:	009b      	lsls	r3, r3, #2
 8016f86:	58d0      	ldr	r0, [r2, r3]
 8016f88:	193b      	adds	r3, r7, r4
 8016f8a:	881d      	ldrh	r5, [r3, #0]
 8016f8c:	000e      	movs	r6, r1
 8016f8e:	187c      	adds	r4, r7, r1
 8016f90:	687a      	ldr	r2, [r7, #4]
 8016f92:	230b      	movs	r3, #11
 8016f94:	18fb      	adds	r3, r7, r3
 8016f96:	7819      	ldrb	r1, [r3, #0]
 8016f98:	002b      	movs	r3, r5
 8016f9a:	f7f7 f980 	bl	800e29e <HAL_PCD_EP_Transmit>
 8016f9e:	0003      	movs	r3, r0
 8016fa0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016fa2:	2516      	movs	r5, #22
 8016fa4:	197c      	adds	r4, r7, r5
 8016fa6:	19bb      	adds	r3, r7, r6
 8016fa8:	781b      	ldrb	r3, [r3, #0]
 8016faa:	0018      	movs	r0, r3
 8016fac:	f000 f871 	bl	8017092 <USBD_Get_USB_Status>
 8016fb0:	0003      	movs	r3, r0
 8016fb2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8016fb4:	197b      	adds	r3, r7, r5
 8016fb6:	781b      	ldrb	r3, [r3, #0]
}
 8016fb8:	0018      	movs	r0, r3
 8016fba:	46bd      	mov	sp, r7
 8016fbc:	b007      	add	sp, #28
 8016fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016fc0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8016fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fc2:	b087      	sub	sp, #28
 8016fc4:	af00      	add	r7, sp, #0
 8016fc6:	60f8      	str	r0, [r7, #12]
 8016fc8:	0008      	movs	r0, r1
 8016fca:	607a      	str	r2, [r7, #4]
 8016fcc:	0019      	movs	r1, r3
 8016fce:	230b      	movs	r3, #11
 8016fd0:	18fb      	adds	r3, r7, r3
 8016fd2:	1c02      	adds	r2, r0, #0
 8016fd4:	701a      	strb	r2, [r3, #0]
 8016fd6:	2408      	movs	r4, #8
 8016fd8:	193b      	adds	r3, r7, r4
 8016fda:	1c0a      	adds	r2, r1, #0
 8016fdc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016fde:	2117      	movs	r1, #23
 8016fe0:	187b      	adds	r3, r7, r1
 8016fe2:	2200      	movs	r2, #0
 8016fe4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016fe6:	2516      	movs	r5, #22
 8016fe8:	197b      	adds	r3, r7, r5
 8016fea:	2200      	movs	r2, #0
 8016fec:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016fee:	68fa      	ldr	r2, [r7, #12]
 8016ff0:	23b0      	movs	r3, #176	@ 0xb0
 8016ff2:	009b      	lsls	r3, r3, #2
 8016ff4:	58d0      	ldr	r0, [r2, r3]
 8016ff6:	193b      	adds	r3, r7, r4
 8016ff8:	881d      	ldrh	r5, [r3, #0]
 8016ffa:	000e      	movs	r6, r1
 8016ffc:	187c      	adds	r4, r7, r1
 8016ffe:	687a      	ldr	r2, [r7, #4]
 8017000:	230b      	movs	r3, #11
 8017002:	18fb      	adds	r3, r7, r3
 8017004:	7819      	ldrb	r1, [r3, #0]
 8017006:	002b      	movs	r3, r5
 8017008:	f7f7 f8f9 	bl	800e1fe <HAL_PCD_EP_Receive>
 801700c:	0003      	movs	r3, r0
 801700e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017010:	2516      	movs	r5, #22
 8017012:	197c      	adds	r4, r7, r5
 8017014:	19bb      	adds	r3, r7, r6
 8017016:	781b      	ldrb	r3, [r3, #0]
 8017018:	0018      	movs	r0, r3
 801701a:	f000 f83a 	bl	8017092 <USBD_Get_USB_Status>
 801701e:	0003      	movs	r3, r0
 8017020:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8017022:	197b      	adds	r3, r7, r5
 8017024:	781b      	ldrb	r3, [r3, #0]
}
 8017026:	0018      	movs	r0, r3
 8017028:	46bd      	mov	sp, r7
 801702a:	b007      	add	sp, #28
 801702c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801702e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801702e:	b580      	push	{r7, lr}
 8017030:	b082      	sub	sp, #8
 8017032:	af00      	add	r7, sp, #0
 8017034:	6078      	str	r0, [r7, #4]
 8017036:	000a      	movs	r2, r1
 8017038:	1cfb      	adds	r3, r7, #3
 801703a:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801703c:	687a      	ldr	r2, [r7, #4]
 801703e:	23b0      	movs	r3, #176	@ 0xb0
 8017040:	009b      	lsls	r3, r3, #2
 8017042:	58d2      	ldr	r2, [r2, r3]
 8017044:	1cfb      	adds	r3, r7, #3
 8017046:	781b      	ldrb	r3, [r3, #0]
 8017048:	0019      	movs	r1, r3
 801704a:	0010      	movs	r0, r2
 801704c:	f7f7 f90e 	bl	800e26c <HAL_PCD_EP_GetRxCount>
 8017050:	0003      	movs	r3, r0
}
 8017052:	0018      	movs	r0, r3
 8017054:	46bd      	mov	sp, r7
 8017056:	b002      	add	sp, #8
 8017058:	bd80      	pop	{r7, pc}
	...

0801705c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801705c:	b580      	push	{r7, lr}
 801705e:	b082      	sub	sp, #8
 8017060:	af00      	add	r7, sp, #0
 8017062:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017064:	4b02      	ldr	r3, [pc, #8]	@ (8017070 <USBD_static_malloc+0x14>)
}
 8017066:	0018      	movs	r0, r3
 8017068:	46bd      	mov	sp, r7
 801706a:	b002      	add	sp, #8
 801706c:	bd80      	pop	{r7, pc}
 801706e:	46c0      	nop			@ (mov r8, r8)
 8017070:	20003ba8 	.word	0x20003ba8

08017074 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017074:	b580      	push	{r7, lr}
 8017076:	b082      	sub	sp, #8
 8017078:	af00      	add	r7, sp, #0
 801707a:	6078      	str	r0, [r7, #4]

}
 801707c:	46c0      	nop			@ (mov r8, r8)
 801707e:	46bd      	mov	sp, r7
 8017080:	b002      	add	sp, #8
 8017082:	bd80      	pop	{r7, pc}

08017084 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8017084:	b580      	push	{r7, lr}
 8017086:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8017088:	f7ef f8a4 	bl	80061d4 <SystemClock_Config>
}
 801708c:	46c0      	nop			@ (mov r8, r8)
 801708e:	46bd      	mov	sp, r7
 8017090:	bd80      	pop	{r7, pc}

08017092 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017092:	b580      	push	{r7, lr}
 8017094:	b084      	sub	sp, #16
 8017096:	af00      	add	r7, sp, #0
 8017098:	0002      	movs	r2, r0
 801709a:	1dfb      	adds	r3, r7, #7
 801709c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801709e:	230f      	movs	r3, #15
 80170a0:	18fb      	adds	r3, r7, r3
 80170a2:	2200      	movs	r2, #0
 80170a4:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 80170a6:	1dfb      	adds	r3, r7, #7
 80170a8:	781b      	ldrb	r3, [r3, #0]
 80170aa:	2b03      	cmp	r3, #3
 80170ac:	d017      	beq.n	80170de <USBD_Get_USB_Status+0x4c>
 80170ae:	dc1b      	bgt.n	80170e8 <USBD_Get_USB_Status+0x56>
 80170b0:	2b02      	cmp	r3, #2
 80170b2:	d00f      	beq.n	80170d4 <USBD_Get_USB_Status+0x42>
 80170b4:	dc18      	bgt.n	80170e8 <USBD_Get_USB_Status+0x56>
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d002      	beq.n	80170c0 <USBD_Get_USB_Status+0x2e>
 80170ba:	2b01      	cmp	r3, #1
 80170bc:	d005      	beq.n	80170ca <USBD_Get_USB_Status+0x38>
 80170be:	e013      	b.n	80170e8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80170c0:	230f      	movs	r3, #15
 80170c2:	18fb      	adds	r3, r7, r3
 80170c4:	2200      	movs	r2, #0
 80170c6:	701a      	strb	r2, [r3, #0]
    break;
 80170c8:	e013      	b.n	80170f2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80170ca:	230f      	movs	r3, #15
 80170cc:	18fb      	adds	r3, r7, r3
 80170ce:	2202      	movs	r2, #2
 80170d0:	701a      	strb	r2, [r3, #0]
    break;
 80170d2:	e00e      	b.n	80170f2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80170d4:	230f      	movs	r3, #15
 80170d6:	18fb      	adds	r3, r7, r3
 80170d8:	2201      	movs	r2, #1
 80170da:	701a      	strb	r2, [r3, #0]
    break;
 80170dc:	e009      	b.n	80170f2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80170de:	230f      	movs	r3, #15
 80170e0:	18fb      	adds	r3, r7, r3
 80170e2:	2202      	movs	r2, #2
 80170e4:	701a      	strb	r2, [r3, #0]
    break;
 80170e6:	e004      	b.n	80170f2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80170e8:	230f      	movs	r3, #15
 80170ea:	18fb      	adds	r3, r7, r3
 80170ec:	2202      	movs	r2, #2
 80170ee:	701a      	strb	r2, [r3, #0]
    break;
 80170f0:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 80170f2:	230f      	movs	r3, #15
 80170f4:	18fb      	adds	r3, r7, r3
 80170f6:	781b      	ldrb	r3, [r3, #0]
}
 80170f8:	0018      	movs	r0, r3
 80170fa:	46bd      	mov	sp, r7
 80170fc:	b004      	add	sp, #16
 80170fe:	bd80      	pop	{r7, pc}

08017100 <__cvt>:
 8017100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017102:	001f      	movs	r7, r3
 8017104:	2300      	movs	r3, #0
 8017106:	0016      	movs	r6, r2
 8017108:	b08b      	sub	sp, #44	@ 0x2c
 801710a:	429f      	cmp	r7, r3
 801710c:	da04      	bge.n	8017118 <__cvt+0x18>
 801710e:	2180      	movs	r1, #128	@ 0x80
 8017110:	0609      	lsls	r1, r1, #24
 8017112:	187b      	adds	r3, r7, r1
 8017114:	001f      	movs	r7, r3
 8017116:	232d      	movs	r3, #45	@ 0x2d
 8017118:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801711a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801711c:	7013      	strb	r3, [r2, #0]
 801711e:	2320      	movs	r3, #32
 8017120:	2203      	movs	r2, #3
 8017122:	439d      	bics	r5, r3
 8017124:	2d46      	cmp	r5, #70	@ 0x46
 8017126:	d007      	beq.n	8017138 <__cvt+0x38>
 8017128:	002b      	movs	r3, r5
 801712a:	3b45      	subs	r3, #69	@ 0x45
 801712c:	4259      	negs	r1, r3
 801712e:	414b      	adcs	r3, r1
 8017130:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8017132:	3a01      	subs	r2, #1
 8017134:	18cb      	adds	r3, r1, r3
 8017136:	9310      	str	r3, [sp, #64]	@ 0x40
 8017138:	ab09      	add	r3, sp, #36	@ 0x24
 801713a:	9304      	str	r3, [sp, #16]
 801713c:	ab08      	add	r3, sp, #32
 801713e:	9303      	str	r3, [sp, #12]
 8017140:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017142:	9200      	str	r2, [sp, #0]
 8017144:	9302      	str	r3, [sp, #8]
 8017146:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017148:	0032      	movs	r2, r6
 801714a:	9301      	str	r3, [sp, #4]
 801714c:	003b      	movs	r3, r7
 801714e:	f000 ff13 	bl	8017f78 <_dtoa_r>
 8017152:	0004      	movs	r4, r0
 8017154:	2d47      	cmp	r5, #71	@ 0x47
 8017156:	d11b      	bne.n	8017190 <__cvt+0x90>
 8017158:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801715a:	07db      	lsls	r3, r3, #31
 801715c:	d511      	bpl.n	8017182 <__cvt+0x82>
 801715e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017160:	18c3      	adds	r3, r0, r3
 8017162:	9307      	str	r3, [sp, #28]
 8017164:	2200      	movs	r2, #0
 8017166:	2300      	movs	r3, #0
 8017168:	0030      	movs	r0, r6
 801716a:	0039      	movs	r1, r7
 801716c:	f7e9 f96e 	bl	800044c <__aeabi_dcmpeq>
 8017170:	2800      	cmp	r0, #0
 8017172:	d001      	beq.n	8017178 <__cvt+0x78>
 8017174:	9b07      	ldr	r3, [sp, #28]
 8017176:	9309      	str	r3, [sp, #36]	@ 0x24
 8017178:	2230      	movs	r2, #48	@ 0x30
 801717a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801717c:	9907      	ldr	r1, [sp, #28]
 801717e:	428b      	cmp	r3, r1
 8017180:	d320      	bcc.n	80171c4 <__cvt+0xc4>
 8017182:	0020      	movs	r0, r4
 8017184:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017186:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8017188:	1b1b      	subs	r3, r3, r4
 801718a:	6013      	str	r3, [r2, #0]
 801718c:	b00b      	add	sp, #44	@ 0x2c
 801718e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017190:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017192:	18c3      	adds	r3, r0, r3
 8017194:	9307      	str	r3, [sp, #28]
 8017196:	2d46      	cmp	r5, #70	@ 0x46
 8017198:	d1e4      	bne.n	8017164 <__cvt+0x64>
 801719a:	7803      	ldrb	r3, [r0, #0]
 801719c:	2b30      	cmp	r3, #48	@ 0x30
 801719e:	d10c      	bne.n	80171ba <__cvt+0xba>
 80171a0:	2200      	movs	r2, #0
 80171a2:	2300      	movs	r3, #0
 80171a4:	0030      	movs	r0, r6
 80171a6:	0039      	movs	r1, r7
 80171a8:	f7e9 f950 	bl	800044c <__aeabi_dcmpeq>
 80171ac:	2800      	cmp	r0, #0
 80171ae:	d104      	bne.n	80171ba <__cvt+0xba>
 80171b0:	2301      	movs	r3, #1
 80171b2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80171b4:	1a9b      	subs	r3, r3, r2
 80171b6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80171b8:	6013      	str	r3, [r2, #0]
 80171ba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80171bc:	9a07      	ldr	r2, [sp, #28]
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	18d3      	adds	r3, r2, r3
 80171c2:	e7ce      	b.n	8017162 <__cvt+0x62>
 80171c4:	1c59      	adds	r1, r3, #1
 80171c6:	9109      	str	r1, [sp, #36]	@ 0x24
 80171c8:	701a      	strb	r2, [r3, #0]
 80171ca:	e7d6      	b.n	801717a <__cvt+0x7a>

080171cc <__exponent>:
 80171cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171ce:	232b      	movs	r3, #43	@ 0x2b
 80171d0:	0005      	movs	r5, r0
 80171d2:	000c      	movs	r4, r1
 80171d4:	b085      	sub	sp, #20
 80171d6:	7002      	strb	r2, [r0, #0]
 80171d8:	2900      	cmp	r1, #0
 80171da:	da01      	bge.n	80171e0 <__exponent+0x14>
 80171dc:	424c      	negs	r4, r1
 80171de:	3302      	adds	r3, #2
 80171e0:	706b      	strb	r3, [r5, #1]
 80171e2:	2c09      	cmp	r4, #9
 80171e4:	dd2c      	ble.n	8017240 <__exponent+0x74>
 80171e6:	ab02      	add	r3, sp, #8
 80171e8:	1dde      	adds	r6, r3, #7
 80171ea:	0020      	movs	r0, r4
 80171ec:	210a      	movs	r1, #10
 80171ee:	f7e9 f917 	bl	8000420 <__aeabi_idivmod>
 80171f2:	0037      	movs	r7, r6
 80171f4:	3130      	adds	r1, #48	@ 0x30
 80171f6:	3e01      	subs	r6, #1
 80171f8:	0020      	movs	r0, r4
 80171fa:	7031      	strb	r1, [r6, #0]
 80171fc:	210a      	movs	r1, #10
 80171fe:	9401      	str	r4, [sp, #4]
 8017200:	f7e9 f828 	bl	8000254 <__divsi3>
 8017204:	9b01      	ldr	r3, [sp, #4]
 8017206:	0004      	movs	r4, r0
 8017208:	2b63      	cmp	r3, #99	@ 0x63
 801720a:	dcee      	bgt.n	80171ea <__exponent+0x1e>
 801720c:	1eba      	subs	r2, r7, #2
 801720e:	1ca8      	adds	r0, r5, #2
 8017210:	0001      	movs	r1, r0
 8017212:	0013      	movs	r3, r2
 8017214:	3430      	adds	r4, #48	@ 0x30
 8017216:	7014      	strb	r4, [r2, #0]
 8017218:	ac02      	add	r4, sp, #8
 801721a:	3407      	adds	r4, #7
 801721c:	429c      	cmp	r4, r3
 801721e:	d80a      	bhi.n	8017236 <__exponent+0x6a>
 8017220:	2300      	movs	r3, #0
 8017222:	42a2      	cmp	r2, r4
 8017224:	d803      	bhi.n	801722e <__exponent+0x62>
 8017226:	3309      	adds	r3, #9
 8017228:	aa02      	add	r2, sp, #8
 801722a:	189b      	adds	r3, r3, r2
 801722c:	1bdb      	subs	r3, r3, r7
 801722e:	18c0      	adds	r0, r0, r3
 8017230:	1b40      	subs	r0, r0, r5
 8017232:	b005      	add	sp, #20
 8017234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017236:	781c      	ldrb	r4, [r3, #0]
 8017238:	3301      	adds	r3, #1
 801723a:	700c      	strb	r4, [r1, #0]
 801723c:	3101      	adds	r1, #1
 801723e:	e7eb      	b.n	8017218 <__exponent+0x4c>
 8017240:	2330      	movs	r3, #48	@ 0x30
 8017242:	18e4      	adds	r4, r4, r3
 8017244:	70ab      	strb	r3, [r5, #2]
 8017246:	1d28      	adds	r0, r5, #4
 8017248:	70ec      	strb	r4, [r5, #3]
 801724a:	e7f1      	b.n	8017230 <__exponent+0x64>

0801724c <_printf_float>:
 801724c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801724e:	b097      	sub	sp, #92	@ 0x5c
 8017250:	000d      	movs	r5, r1
 8017252:	920a      	str	r2, [sp, #40]	@ 0x28
 8017254:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8017256:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017258:	9009      	str	r0, [sp, #36]	@ 0x24
 801725a:	f000 fd6b 	bl	8017d34 <_localeconv_r>
 801725e:	6803      	ldr	r3, [r0, #0]
 8017260:	0018      	movs	r0, r3
 8017262:	930d      	str	r3, [sp, #52]	@ 0x34
 8017264:	f7e8 ff50 	bl	8000108 <strlen>
 8017268:	2300      	movs	r3, #0
 801726a:	900f      	str	r0, [sp, #60]	@ 0x3c
 801726c:	9314      	str	r3, [sp, #80]	@ 0x50
 801726e:	7e2b      	ldrb	r3, [r5, #24]
 8017270:	2207      	movs	r2, #7
 8017272:	930c      	str	r3, [sp, #48]	@ 0x30
 8017274:	682b      	ldr	r3, [r5, #0]
 8017276:	930e      	str	r3, [sp, #56]	@ 0x38
 8017278:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801727a:	6823      	ldr	r3, [r4, #0]
 801727c:	05c9      	lsls	r1, r1, #23
 801727e:	d545      	bpl.n	801730c <_printf_float+0xc0>
 8017280:	189b      	adds	r3, r3, r2
 8017282:	4393      	bics	r3, r2
 8017284:	001a      	movs	r2, r3
 8017286:	3208      	adds	r2, #8
 8017288:	6022      	str	r2, [r4, #0]
 801728a:	2201      	movs	r2, #1
 801728c:	681e      	ldr	r6, [r3, #0]
 801728e:	685f      	ldr	r7, [r3, #4]
 8017290:	007b      	lsls	r3, r7, #1
 8017292:	085b      	lsrs	r3, r3, #1
 8017294:	9311      	str	r3, [sp, #68]	@ 0x44
 8017296:	9610      	str	r6, [sp, #64]	@ 0x40
 8017298:	64ae      	str	r6, [r5, #72]	@ 0x48
 801729a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801729c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801729e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80172a0:	4ba7      	ldr	r3, [pc, #668]	@ (8017540 <_printf_float+0x2f4>)
 80172a2:	4252      	negs	r2, r2
 80172a4:	f7eb ffac 	bl	8003200 <__aeabi_dcmpun>
 80172a8:	2800      	cmp	r0, #0
 80172aa:	d131      	bne.n	8017310 <_printf_float+0xc4>
 80172ac:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80172ae:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80172b0:	2201      	movs	r2, #1
 80172b2:	4ba3      	ldr	r3, [pc, #652]	@ (8017540 <_printf_float+0x2f4>)
 80172b4:	4252      	negs	r2, r2
 80172b6:	f7e9 f8d9 	bl	800046c <__aeabi_dcmple>
 80172ba:	2800      	cmp	r0, #0
 80172bc:	d128      	bne.n	8017310 <_printf_float+0xc4>
 80172be:	2200      	movs	r2, #0
 80172c0:	2300      	movs	r3, #0
 80172c2:	0030      	movs	r0, r6
 80172c4:	0039      	movs	r1, r7
 80172c6:	f7e9 f8c7 	bl	8000458 <__aeabi_dcmplt>
 80172ca:	2800      	cmp	r0, #0
 80172cc:	d003      	beq.n	80172d6 <_printf_float+0x8a>
 80172ce:	002b      	movs	r3, r5
 80172d0:	222d      	movs	r2, #45	@ 0x2d
 80172d2:	3343      	adds	r3, #67	@ 0x43
 80172d4:	701a      	strb	r2, [r3, #0]
 80172d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80172d8:	4f9a      	ldr	r7, [pc, #616]	@ (8017544 <_printf_float+0x2f8>)
 80172da:	2b47      	cmp	r3, #71	@ 0x47
 80172dc:	d900      	bls.n	80172e0 <_printf_float+0x94>
 80172de:	4f9a      	ldr	r7, [pc, #616]	@ (8017548 <_printf_float+0x2fc>)
 80172e0:	2303      	movs	r3, #3
 80172e2:	2400      	movs	r4, #0
 80172e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80172e6:	612b      	str	r3, [r5, #16]
 80172e8:	3301      	adds	r3, #1
 80172ea:	439a      	bics	r2, r3
 80172ec:	602a      	str	r2, [r5, #0]
 80172ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80172f0:	0029      	movs	r1, r5
 80172f2:	9300      	str	r3, [sp, #0]
 80172f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80172f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80172f8:	aa15      	add	r2, sp, #84	@ 0x54
 80172fa:	f000 f9e5 	bl	80176c8 <_printf_common>
 80172fe:	3001      	adds	r0, #1
 8017300:	d000      	beq.n	8017304 <_printf_float+0xb8>
 8017302:	e09f      	b.n	8017444 <_printf_float+0x1f8>
 8017304:	2001      	movs	r0, #1
 8017306:	4240      	negs	r0, r0
 8017308:	b017      	add	sp, #92	@ 0x5c
 801730a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801730c:	3307      	adds	r3, #7
 801730e:	e7b8      	b.n	8017282 <_printf_float+0x36>
 8017310:	0032      	movs	r2, r6
 8017312:	003b      	movs	r3, r7
 8017314:	0030      	movs	r0, r6
 8017316:	0039      	movs	r1, r7
 8017318:	f7eb ff72 	bl	8003200 <__aeabi_dcmpun>
 801731c:	2800      	cmp	r0, #0
 801731e:	d00b      	beq.n	8017338 <_printf_float+0xec>
 8017320:	2f00      	cmp	r7, #0
 8017322:	da03      	bge.n	801732c <_printf_float+0xe0>
 8017324:	002b      	movs	r3, r5
 8017326:	222d      	movs	r2, #45	@ 0x2d
 8017328:	3343      	adds	r3, #67	@ 0x43
 801732a:	701a      	strb	r2, [r3, #0]
 801732c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801732e:	4f87      	ldr	r7, [pc, #540]	@ (801754c <_printf_float+0x300>)
 8017330:	2b47      	cmp	r3, #71	@ 0x47
 8017332:	d9d5      	bls.n	80172e0 <_printf_float+0x94>
 8017334:	4f86      	ldr	r7, [pc, #536]	@ (8017550 <_printf_float+0x304>)
 8017336:	e7d3      	b.n	80172e0 <_printf_float+0x94>
 8017338:	2220      	movs	r2, #32
 801733a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801733c:	686b      	ldr	r3, [r5, #4]
 801733e:	4394      	bics	r4, r2
 8017340:	1c5a      	adds	r2, r3, #1
 8017342:	d146      	bne.n	80173d2 <_printf_float+0x186>
 8017344:	3307      	adds	r3, #7
 8017346:	606b      	str	r3, [r5, #4]
 8017348:	2380      	movs	r3, #128	@ 0x80
 801734a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801734c:	00db      	lsls	r3, r3, #3
 801734e:	4313      	orrs	r3, r2
 8017350:	2200      	movs	r2, #0
 8017352:	602b      	str	r3, [r5, #0]
 8017354:	9206      	str	r2, [sp, #24]
 8017356:	aa14      	add	r2, sp, #80	@ 0x50
 8017358:	9205      	str	r2, [sp, #20]
 801735a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801735c:	a90a      	add	r1, sp, #40	@ 0x28
 801735e:	9204      	str	r2, [sp, #16]
 8017360:	aa13      	add	r2, sp, #76	@ 0x4c
 8017362:	9203      	str	r2, [sp, #12]
 8017364:	2223      	movs	r2, #35	@ 0x23
 8017366:	1852      	adds	r2, r2, r1
 8017368:	9202      	str	r2, [sp, #8]
 801736a:	9301      	str	r3, [sp, #4]
 801736c:	686b      	ldr	r3, [r5, #4]
 801736e:	0032      	movs	r2, r6
 8017370:	9300      	str	r3, [sp, #0]
 8017372:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017374:	003b      	movs	r3, r7
 8017376:	f7ff fec3 	bl	8017100 <__cvt>
 801737a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801737c:	0007      	movs	r7, r0
 801737e:	2c47      	cmp	r4, #71	@ 0x47
 8017380:	d12d      	bne.n	80173de <_printf_float+0x192>
 8017382:	1cd3      	adds	r3, r2, #3
 8017384:	db02      	blt.n	801738c <_printf_float+0x140>
 8017386:	686b      	ldr	r3, [r5, #4]
 8017388:	429a      	cmp	r2, r3
 801738a:	dd48      	ble.n	801741e <_printf_float+0x1d2>
 801738c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801738e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8017390:	3b02      	subs	r3, #2
 8017392:	b2db      	uxtb	r3, r3
 8017394:	930c      	str	r3, [sp, #48]	@ 0x30
 8017396:	0028      	movs	r0, r5
 8017398:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801739a:	3901      	subs	r1, #1
 801739c:	3050      	adds	r0, #80	@ 0x50
 801739e:	9113      	str	r1, [sp, #76]	@ 0x4c
 80173a0:	f7ff ff14 	bl	80171cc <__exponent>
 80173a4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80173a6:	0004      	movs	r4, r0
 80173a8:	1813      	adds	r3, r2, r0
 80173aa:	612b      	str	r3, [r5, #16]
 80173ac:	2a01      	cmp	r2, #1
 80173ae:	dc02      	bgt.n	80173b6 <_printf_float+0x16a>
 80173b0:	682a      	ldr	r2, [r5, #0]
 80173b2:	07d2      	lsls	r2, r2, #31
 80173b4:	d501      	bpl.n	80173ba <_printf_float+0x16e>
 80173b6:	3301      	adds	r3, #1
 80173b8:	612b      	str	r3, [r5, #16]
 80173ba:	2323      	movs	r3, #35	@ 0x23
 80173bc:	aa0a      	add	r2, sp, #40	@ 0x28
 80173be:	189b      	adds	r3, r3, r2
 80173c0:	781b      	ldrb	r3, [r3, #0]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d100      	bne.n	80173c8 <_printf_float+0x17c>
 80173c6:	e792      	b.n	80172ee <_printf_float+0xa2>
 80173c8:	002b      	movs	r3, r5
 80173ca:	222d      	movs	r2, #45	@ 0x2d
 80173cc:	3343      	adds	r3, #67	@ 0x43
 80173ce:	701a      	strb	r2, [r3, #0]
 80173d0:	e78d      	b.n	80172ee <_printf_float+0xa2>
 80173d2:	2c47      	cmp	r4, #71	@ 0x47
 80173d4:	d1b8      	bne.n	8017348 <_printf_float+0xfc>
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d1b6      	bne.n	8017348 <_printf_float+0xfc>
 80173da:	3301      	adds	r3, #1
 80173dc:	e7b3      	b.n	8017346 <_printf_float+0xfa>
 80173de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80173e0:	0011      	movs	r1, r2
 80173e2:	2b65      	cmp	r3, #101	@ 0x65
 80173e4:	d9d7      	bls.n	8017396 <_printf_float+0x14a>
 80173e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80173e8:	2b66      	cmp	r3, #102	@ 0x66
 80173ea:	d11a      	bne.n	8017422 <_printf_float+0x1d6>
 80173ec:	686b      	ldr	r3, [r5, #4]
 80173ee:	2a00      	cmp	r2, #0
 80173f0:	dd09      	ble.n	8017406 <_printf_float+0x1ba>
 80173f2:	612a      	str	r2, [r5, #16]
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d102      	bne.n	80173fe <_printf_float+0x1b2>
 80173f8:	6829      	ldr	r1, [r5, #0]
 80173fa:	07c9      	lsls	r1, r1, #31
 80173fc:	d50b      	bpl.n	8017416 <_printf_float+0x1ca>
 80173fe:	3301      	adds	r3, #1
 8017400:	189b      	adds	r3, r3, r2
 8017402:	612b      	str	r3, [r5, #16]
 8017404:	e007      	b.n	8017416 <_printf_float+0x1ca>
 8017406:	2b00      	cmp	r3, #0
 8017408:	d103      	bne.n	8017412 <_printf_float+0x1c6>
 801740a:	2201      	movs	r2, #1
 801740c:	6829      	ldr	r1, [r5, #0]
 801740e:	4211      	tst	r1, r2
 8017410:	d000      	beq.n	8017414 <_printf_float+0x1c8>
 8017412:	1c9a      	adds	r2, r3, #2
 8017414:	612a      	str	r2, [r5, #16]
 8017416:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017418:	2400      	movs	r4, #0
 801741a:	65ab      	str	r3, [r5, #88]	@ 0x58
 801741c:	e7cd      	b.n	80173ba <_printf_float+0x16e>
 801741e:	2367      	movs	r3, #103	@ 0x67
 8017420:	930c      	str	r3, [sp, #48]	@ 0x30
 8017422:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8017424:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017426:	4299      	cmp	r1, r3
 8017428:	db06      	blt.n	8017438 <_printf_float+0x1ec>
 801742a:	682b      	ldr	r3, [r5, #0]
 801742c:	6129      	str	r1, [r5, #16]
 801742e:	07db      	lsls	r3, r3, #31
 8017430:	d5f1      	bpl.n	8017416 <_printf_float+0x1ca>
 8017432:	3101      	adds	r1, #1
 8017434:	6129      	str	r1, [r5, #16]
 8017436:	e7ee      	b.n	8017416 <_printf_float+0x1ca>
 8017438:	2201      	movs	r2, #1
 801743a:	2900      	cmp	r1, #0
 801743c:	dce0      	bgt.n	8017400 <_printf_float+0x1b4>
 801743e:	1892      	adds	r2, r2, r2
 8017440:	1a52      	subs	r2, r2, r1
 8017442:	e7dd      	b.n	8017400 <_printf_float+0x1b4>
 8017444:	682a      	ldr	r2, [r5, #0]
 8017446:	0553      	lsls	r3, r2, #21
 8017448:	d408      	bmi.n	801745c <_printf_float+0x210>
 801744a:	692b      	ldr	r3, [r5, #16]
 801744c:	003a      	movs	r2, r7
 801744e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017450:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017452:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017454:	47a0      	blx	r4
 8017456:	3001      	adds	r0, #1
 8017458:	d129      	bne.n	80174ae <_printf_float+0x262>
 801745a:	e753      	b.n	8017304 <_printf_float+0xb8>
 801745c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801745e:	2b65      	cmp	r3, #101	@ 0x65
 8017460:	d800      	bhi.n	8017464 <_printf_float+0x218>
 8017462:	e0da      	b.n	801761a <_printf_float+0x3ce>
 8017464:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8017466:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8017468:	2200      	movs	r2, #0
 801746a:	2300      	movs	r3, #0
 801746c:	f7e8 ffee 	bl	800044c <__aeabi_dcmpeq>
 8017470:	2800      	cmp	r0, #0
 8017472:	d033      	beq.n	80174dc <_printf_float+0x290>
 8017474:	2301      	movs	r3, #1
 8017476:	4a37      	ldr	r2, [pc, #220]	@ (8017554 <_printf_float+0x308>)
 8017478:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801747a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801747c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801747e:	47a0      	blx	r4
 8017480:	3001      	adds	r0, #1
 8017482:	d100      	bne.n	8017486 <_printf_float+0x23a>
 8017484:	e73e      	b.n	8017304 <_printf_float+0xb8>
 8017486:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8017488:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801748a:	42b3      	cmp	r3, r6
 801748c:	db02      	blt.n	8017494 <_printf_float+0x248>
 801748e:	682b      	ldr	r3, [r5, #0]
 8017490:	07db      	lsls	r3, r3, #31
 8017492:	d50c      	bpl.n	80174ae <_printf_float+0x262>
 8017494:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017496:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017498:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801749a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801749c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801749e:	47a0      	blx	r4
 80174a0:	2400      	movs	r4, #0
 80174a2:	3001      	adds	r0, #1
 80174a4:	d100      	bne.n	80174a8 <_printf_float+0x25c>
 80174a6:	e72d      	b.n	8017304 <_printf_float+0xb8>
 80174a8:	1e73      	subs	r3, r6, #1
 80174aa:	42a3      	cmp	r3, r4
 80174ac:	dc0a      	bgt.n	80174c4 <_printf_float+0x278>
 80174ae:	682b      	ldr	r3, [r5, #0]
 80174b0:	079b      	lsls	r3, r3, #30
 80174b2:	d500      	bpl.n	80174b6 <_printf_float+0x26a>
 80174b4:	e105      	b.n	80176c2 <_printf_float+0x476>
 80174b6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80174b8:	68e8      	ldr	r0, [r5, #12]
 80174ba:	4298      	cmp	r0, r3
 80174bc:	db00      	blt.n	80174c0 <_printf_float+0x274>
 80174be:	e723      	b.n	8017308 <_printf_float+0xbc>
 80174c0:	0018      	movs	r0, r3
 80174c2:	e721      	b.n	8017308 <_printf_float+0xbc>
 80174c4:	002a      	movs	r2, r5
 80174c6:	2301      	movs	r3, #1
 80174c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80174ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80174cc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80174ce:	321a      	adds	r2, #26
 80174d0:	47b8      	blx	r7
 80174d2:	3001      	adds	r0, #1
 80174d4:	d100      	bne.n	80174d8 <_printf_float+0x28c>
 80174d6:	e715      	b.n	8017304 <_printf_float+0xb8>
 80174d8:	3401      	adds	r4, #1
 80174da:	e7e5      	b.n	80174a8 <_printf_float+0x25c>
 80174dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80174de:	2b00      	cmp	r3, #0
 80174e0:	dc3a      	bgt.n	8017558 <_printf_float+0x30c>
 80174e2:	2301      	movs	r3, #1
 80174e4:	4a1b      	ldr	r2, [pc, #108]	@ (8017554 <_printf_float+0x308>)
 80174e6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80174e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80174ea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80174ec:	47a0      	blx	r4
 80174ee:	3001      	adds	r0, #1
 80174f0:	d100      	bne.n	80174f4 <_printf_float+0x2a8>
 80174f2:	e707      	b.n	8017304 <_printf_float+0xb8>
 80174f4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80174f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80174f8:	4333      	orrs	r3, r6
 80174fa:	d102      	bne.n	8017502 <_printf_float+0x2b6>
 80174fc:	682b      	ldr	r3, [r5, #0]
 80174fe:	07db      	lsls	r3, r3, #31
 8017500:	d5d5      	bpl.n	80174ae <_printf_float+0x262>
 8017502:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017504:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017506:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017508:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801750a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801750c:	47a0      	blx	r4
 801750e:	2300      	movs	r3, #0
 8017510:	3001      	adds	r0, #1
 8017512:	d100      	bne.n	8017516 <_printf_float+0x2ca>
 8017514:	e6f6      	b.n	8017304 <_printf_float+0xb8>
 8017516:	930c      	str	r3, [sp, #48]	@ 0x30
 8017518:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801751a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801751c:	425b      	negs	r3, r3
 801751e:	4293      	cmp	r3, r2
 8017520:	dc01      	bgt.n	8017526 <_printf_float+0x2da>
 8017522:	0033      	movs	r3, r6
 8017524:	e792      	b.n	801744c <_printf_float+0x200>
 8017526:	002a      	movs	r2, r5
 8017528:	2301      	movs	r3, #1
 801752a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801752c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801752e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017530:	321a      	adds	r2, #26
 8017532:	47a0      	blx	r4
 8017534:	3001      	adds	r0, #1
 8017536:	d100      	bne.n	801753a <_printf_float+0x2ee>
 8017538:	e6e4      	b.n	8017304 <_printf_float+0xb8>
 801753a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801753c:	3301      	adds	r3, #1
 801753e:	e7ea      	b.n	8017516 <_printf_float+0x2ca>
 8017540:	7fefffff 	.word	0x7fefffff
 8017544:	0801b96c 	.word	0x0801b96c
 8017548:	0801b970 	.word	0x0801b970
 801754c:	0801b974 	.word	0x0801b974
 8017550:	0801b978 	.word	0x0801b978
 8017554:	0801b97c 	.word	0x0801b97c
 8017558:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801755a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801755c:	930c      	str	r3, [sp, #48]	@ 0x30
 801755e:	429e      	cmp	r6, r3
 8017560:	dd00      	ble.n	8017564 <_printf_float+0x318>
 8017562:	001e      	movs	r6, r3
 8017564:	2e00      	cmp	r6, #0
 8017566:	dc31      	bgt.n	80175cc <_printf_float+0x380>
 8017568:	43f3      	mvns	r3, r6
 801756a:	2400      	movs	r4, #0
 801756c:	17db      	asrs	r3, r3, #31
 801756e:	4033      	ands	r3, r6
 8017570:	930e      	str	r3, [sp, #56]	@ 0x38
 8017572:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8017574:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017576:	1af3      	subs	r3, r6, r3
 8017578:	42a3      	cmp	r3, r4
 801757a:	dc30      	bgt.n	80175de <_printf_float+0x392>
 801757c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801757e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017580:	429a      	cmp	r2, r3
 8017582:	dc38      	bgt.n	80175f6 <_printf_float+0x3aa>
 8017584:	682b      	ldr	r3, [r5, #0]
 8017586:	07db      	lsls	r3, r3, #31
 8017588:	d435      	bmi.n	80175f6 <_printf_float+0x3aa>
 801758a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801758c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801758e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017590:	1b9b      	subs	r3, r3, r6
 8017592:	1b14      	subs	r4, r2, r4
 8017594:	429c      	cmp	r4, r3
 8017596:	dd00      	ble.n	801759a <_printf_float+0x34e>
 8017598:	001c      	movs	r4, r3
 801759a:	2c00      	cmp	r4, #0
 801759c:	dc34      	bgt.n	8017608 <_printf_float+0x3bc>
 801759e:	43e3      	mvns	r3, r4
 80175a0:	2600      	movs	r6, #0
 80175a2:	17db      	asrs	r3, r3, #31
 80175a4:	401c      	ands	r4, r3
 80175a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80175a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80175aa:	1ad3      	subs	r3, r2, r3
 80175ac:	1b1b      	subs	r3, r3, r4
 80175ae:	42b3      	cmp	r3, r6
 80175b0:	dc00      	bgt.n	80175b4 <_printf_float+0x368>
 80175b2:	e77c      	b.n	80174ae <_printf_float+0x262>
 80175b4:	002a      	movs	r2, r5
 80175b6:	2301      	movs	r3, #1
 80175b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80175ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80175bc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80175be:	321a      	adds	r2, #26
 80175c0:	47b8      	blx	r7
 80175c2:	3001      	adds	r0, #1
 80175c4:	d100      	bne.n	80175c8 <_printf_float+0x37c>
 80175c6:	e69d      	b.n	8017304 <_printf_float+0xb8>
 80175c8:	3601      	adds	r6, #1
 80175ca:	e7ec      	b.n	80175a6 <_printf_float+0x35a>
 80175cc:	0033      	movs	r3, r6
 80175ce:	003a      	movs	r2, r7
 80175d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80175d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80175d4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80175d6:	47a0      	blx	r4
 80175d8:	3001      	adds	r0, #1
 80175da:	d1c5      	bne.n	8017568 <_printf_float+0x31c>
 80175dc:	e692      	b.n	8017304 <_printf_float+0xb8>
 80175de:	002a      	movs	r2, r5
 80175e0:	2301      	movs	r3, #1
 80175e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80175e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80175e6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80175e8:	321a      	adds	r2, #26
 80175ea:	47b0      	blx	r6
 80175ec:	3001      	adds	r0, #1
 80175ee:	d100      	bne.n	80175f2 <_printf_float+0x3a6>
 80175f0:	e688      	b.n	8017304 <_printf_float+0xb8>
 80175f2:	3401      	adds	r4, #1
 80175f4:	e7bd      	b.n	8017572 <_printf_float+0x326>
 80175f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80175f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80175fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80175fc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80175fe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017600:	47a0      	blx	r4
 8017602:	3001      	adds	r0, #1
 8017604:	d1c1      	bne.n	801758a <_printf_float+0x33e>
 8017606:	e67d      	b.n	8017304 <_printf_float+0xb8>
 8017608:	19ba      	adds	r2, r7, r6
 801760a:	0023      	movs	r3, r4
 801760c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801760e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017610:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017612:	47b0      	blx	r6
 8017614:	3001      	adds	r0, #1
 8017616:	d1c2      	bne.n	801759e <_printf_float+0x352>
 8017618:	e674      	b.n	8017304 <_printf_float+0xb8>
 801761a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801761c:	930c      	str	r3, [sp, #48]	@ 0x30
 801761e:	2b01      	cmp	r3, #1
 8017620:	dc02      	bgt.n	8017628 <_printf_float+0x3dc>
 8017622:	2301      	movs	r3, #1
 8017624:	421a      	tst	r2, r3
 8017626:	d039      	beq.n	801769c <_printf_float+0x450>
 8017628:	2301      	movs	r3, #1
 801762a:	003a      	movs	r2, r7
 801762c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801762e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017630:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017632:	47b0      	blx	r6
 8017634:	3001      	adds	r0, #1
 8017636:	d100      	bne.n	801763a <_printf_float+0x3ee>
 8017638:	e664      	b.n	8017304 <_printf_float+0xb8>
 801763a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801763c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801763e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017640:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017642:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017644:	47b0      	blx	r6
 8017646:	3001      	adds	r0, #1
 8017648:	d100      	bne.n	801764c <_printf_float+0x400>
 801764a:	e65b      	b.n	8017304 <_printf_float+0xb8>
 801764c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801764e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8017650:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017652:	2200      	movs	r2, #0
 8017654:	3b01      	subs	r3, #1
 8017656:	930c      	str	r3, [sp, #48]	@ 0x30
 8017658:	2300      	movs	r3, #0
 801765a:	f7e8 fef7 	bl	800044c <__aeabi_dcmpeq>
 801765e:	2800      	cmp	r0, #0
 8017660:	d11a      	bne.n	8017698 <_printf_float+0x44c>
 8017662:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017664:	1c7a      	adds	r2, r7, #1
 8017666:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017668:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801766a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801766c:	47b0      	blx	r6
 801766e:	3001      	adds	r0, #1
 8017670:	d10e      	bne.n	8017690 <_printf_float+0x444>
 8017672:	e647      	b.n	8017304 <_printf_float+0xb8>
 8017674:	002a      	movs	r2, r5
 8017676:	2301      	movs	r3, #1
 8017678:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801767a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801767c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801767e:	321a      	adds	r2, #26
 8017680:	47b8      	blx	r7
 8017682:	3001      	adds	r0, #1
 8017684:	d100      	bne.n	8017688 <_printf_float+0x43c>
 8017686:	e63d      	b.n	8017304 <_printf_float+0xb8>
 8017688:	3601      	adds	r6, #1
 801768a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801768c:	429e      	cmp	r6, r3
 801768e:	dbf1      	blt.n	8017674 <_printf_float+0x428>
 8017690:	002a      	movs	r2, r5
 8017692:	0023      	movs	r3, r4
 8017694:	3250      	adds	r2, #80	@ 0x50
 8017696:	e6da      	b.n	801744e <_printf_float+0x202>
 8017698:	2600      	movs	r6, #0
 801769a:	e7f6      	b.n	801768a <_printf_float+0x43e>
 801769c:	003a      	movs	r2, r7
 801769e:	e7e2      	b.n	8017666 <_printf_float+0x41a>
 80176a0:	002a      	movs	r2, r5
 80176a2:	2301      	movs	r3, #1
 80176a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80176a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80176a8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80176aa:	3219      	adds	r2, #25
 80176ac:	47b0      	blx	r6
 80176ae:	3001      	adds	r0, #1
 80176b0:	d100      	bne.n	80176b4 <_printf_float+0x468>
 80176b2:	e627      	b.n	8017304 <_printf_float+0xb8>
 80176b4:	3401      	adds	r4, #1
 80176b6:	68eb      	ldr	r3, [r5, #12]
 80176b8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80176ba:	1a9b      	subs	r3, r3, r2
 80176bc:	42a3      	cmp	r3, r4
 80176be:	dcef      	bgt.n	80176a0 <_printf_float+0x454>
 80176c0:	e6f9      	b.n	80174b6 <_printf_float+0x26a>
 80176c2:	2400      	movs	r4, #0
 80176c4:	e7f7      	b.n	80176b6 <_printf_float+0x46a>
 80176c6:	46c0      	nop			@ (mov r8, r8)

080176c8 <_printf_common>:
 80176c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80176ca:	0016      	movs	r6, r2
 80176cc:	9301      	str	r3, [sp, #4]
 80176ce:	688a      	ldr	r2, [r1, #8]
 80176d0:	690b      	ldr	r3, [r1, #16]
 80176d2:	000c      	movs	r4, r1
 80176d4:	9000      	str	r0, [sp, #0]
 80176d6:	4293      	cmp	r3, r2
 80176d8:	da00      	bge.n	80176dc <_printf_common+0x14>
 80176da:	0013      	movs	r3, r2
 80176dc:	0022      	movs	r2, r4
 80176de:	6033      	str	r3, [r6, #0]
 80176e0:	3243      	adds	r2, #67	@ 0x43
 80176e2:	7812      	ldrb	r2, [r2, #0]
 80176e4:	2a00      	cmp	r2, #0
 80176e6:	d001      	beq.n	80176ec <_printf_common+0x24>
 80176e8:	3301      	adds	r3, #1
 80176ea:	6033      	str	r3, [r6, #0]
 80176ec:	6823      	ldr	r3, [r4, #0]
 80176ee:	069b      	lsls	r3, r3, #26
 80176f0:	d502      	bpl.n	80176f8 <_printf_common+0x30>
 80176f2:	6833      	ldr	r3, [r6, #0]
 80176f4:	3302      	adds	r3, #2
 80176f6:	6033      	str	r3, [r6, #0]
 80176f8:	6822      	ldr	r2, [r4, #0]
 80176fa:	2306      	movs	r3, #6
 80176fc:	0015      	movs	r5, r2
 80176fe:	401d      	ands	r5, r3
 8017700:	421a      	tst	r2, r3
 8017702:	d027      	beq.n	8017754 <_printf_common+0x8c>
 8017704:	0023      	movs	r3, r4
 8017706:	3343      	adds	r3, #67	@ 0x43
 8017708:	781b      	ldrb	r3, [r3, #0]
 801770a:	1e5a      	subs	r2, r3, #1
 801770c:	4193      	sbcs	r3, r2
 801770e:	6822      	ldr	r2, [r4, #0]
 8017710:	0692      	lsls	r2, r2, #26
 8017712:	d430      	bmi.n	8017776 <_printf_common+0xae>
 8017714:	0022      	movs	r2, r4
 8017716:	9901      	ldr	r1, [sp, #4]
 8017718:	9800      	ldr	r0, [sp, #0]
 801771a:	9d08      	ldr	r5, [sp, #32]
 801771c:	3243      	adds	r2, #67	@ 0x43
 801771e:	47a8      	blx	r5
 8017720:	3001      	adds	r0, #1
 8017722:	d025      	beq.n	8017770 <_printf_common+0xa8>
 8017724:	2206      	movs	r2, #6
 8017726:	6823      	ldr	r3, [r4, #0]
 8017728:	2500      	movs	r5, #0
 801772a:	4013      	ands	r3, r2
 801772c:	2b04      	cmp	r3, #4
 801772e:	d105      	bne.n	801773c <_printf_common+0x74>
 8017730:	6833      	ldr	r3, [r6, #0]
 8017732:	68e5      	ldr	r5, [r4, #12]
 8017734:	1aed      	subs	r5, r5, r3
 8017736:	43eb      	mvns	r3, r5
 8017738:	17db      	asrs	r3, r3, #31
 801773a:	401d      	ands	r5, r3
 801773c:	68a3      	ldr	r3, [r4, #8]
 801773e:	6922      	ldr	r2, [r4, #16]
 8017740:	4293      	cmp	r3, r2
 8017742:	dd01      	ble.n	8017748 <_printf_common+0x80>
 8017744:	1a9b      	subs	r3, r3, r2
 8017746:	18ed      	adds	r5, r5, r3
 8017748:	2600      	movs	r6, #0
 801774a:	42b5      	cmp	r5, r6
 801774c:	d120      	bne.n	8017790 <_printf_common+0xc8>
 801774e:	2000      	movs	r0, #0
 8017750:	e010      	b.n	8017774 <_printf_common+0xac>
 8017752:	3501      	adds	r5, #1
 8017754:	68e3      	ldr	r3, [r4, #12]
 8017756:	6832      	ldr	r2, [r6, #0]
 8017758:	1a9b      	subs	r3, r3, r2
 801775a:	42ab      	cmp	r3, r5
 801775c:	ddd2      	ble.n	8017704 <_printf_common+0x3c>
 801775e:	0022      	movs	r2, r4
 8017760:	2301      	movs	r3, #1
 8017762:	9901      	ldr	r1, [sp, #4]
 8017764:	9800      	ldr	r0, [sp, #0]
 8017766:	9f08      	ldr	r7, [sp, #32]
 8017768:	3219      	adds	r2, #25
 801776a:	47b8      	blx	r7
 801776c:	3001      	adds	r0, #1
 801776e:	d1f0      	bne.n	8017752 <_printf_common+0x8a>
 8017770:	2001      	movs	r0, #1
 8017772:	4240      	negs	r0, r0
 8017774:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017776:	2030      	movs	r0, #48	@ 0x30
 8017778:	18e1      	adds	r1, r4, r3
 801777a:	3143      	adds	r1, #67	@ 0x43
 801777c:	7008      	strb	r0, [r1, #0]
 801777e:	0021      	movs	r1, r4
 8017780:	1c5a      	adds	r2, r3, #1
 8017782:	3145      	adds	r1, #69	@ 0x45
 8017784:	7809      	ldrb	r1, [r1, #0]
 8017786:	18a2      	adds	r2, r4, r2
 8017788:	3243      	adds	r2, #67	@ 0x43
 801778a:	3302      	adds	r3, #2
 801778c:	7011      	strb	r1, [r2, #0]
 801778e:	e7c1      	b.n	8017714 <_printf_common+0x4c>
 8017790:	0022      	movs	r2, r4
 8017792:	2301      	movs	r3, #1
 8017794:	9901      	ldr	r1, [sp, #4]
 8017796:	9800      	ldr	r0, [sp, #0]
 8017798:	9f08      	ldr	r7, [sp, #32]
 801779a:	321a      	adds	r2, #26
 801779c:	47b8      	blx	r7
 801779e:	3001      	adds	r0, #1
 80177a0:	d0e6      	beq.n	8017770 <_printf_common+0xa8>
 80177a2:	3601      	adds	r6, #1
 80177a4:	e7d1      	b.n	801774a <_printf_common+0x82>
	...

080177a8 <_printf_i>:
 80177a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80177aa:	b08b      	sub	sp, #44	@ 0x2c
 80177ac:	9206      	str	r2, [sp, #24]
 80177ae:	000a      	movs	r2, r1
 80177b0:	3243      	adds	r2, #67	@ 0x43
 80177b2:	9307      	str	r3, [sp, #28]
 80177b4:	9005      	str	r0, [sp, #20]
 80177b6:	9203      	str	r2, [sp, #12]
 80177b8:	7e0a      	ldrb	r2, [r1, #24]
 80177ba:	000c      	movs	r4, r1
 80177bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80177be:	2a78      	cmp	r2, #120	@ 0x78
 80177c0:	d809      	bhi.n	80177d6 <_printf_i+0x2e>
 80177c2:	2a62      	cmp	r2, #98	@ 0x62
 80177c4:	d80b      	bhi.n	80177de <_printf_i+0x36>
 80177c6:	2a00      	cmp	r2, #0
 80177c8:	d100      	bne.n	80177cc <_printf_i+0x24>
 80177ca:	e0bc      	b.n	8017946 <_printf_i+0x19e>
 80177cc:	497b      	ldr	r1, [pc, #492]	@ (80179bc <_printf_i+0x214>)
 80177ce:	9104      	str	r1, [sp, #16]
 80177d0:	2a58      	cmp	r2, #88	@ 0x58
 80177d2:	d100      	bne.n	80177d6 <_printf_i+0x2e>
 80177d4:	e090      	b.n	80178f8 <_printf_i+0x150>
 80177d6:	0025      	movs	r5, r4
 80177d8:	3542      	adds	r5, #66	@ 0x42
 80177da:	702a      	strb	r2, [r5, #0]
 80177dc:	e022      	b.n	8017824 <_printf_i+0x7c>
 80177de:	0010      	movs	r0, r2
 80177e0:	3863      	subs	r0, #99	@ 0x63
 80177e2:	2815      	cmp	r0, #21
 80177e4:	d8f7      	bhi.n	80177d6 <_printf_i+0x2e>
 80177e6:	f7e8 fca1 	bl	800012c <__gnu_thumb1_case_shi>
 80177ea:	0016      	.short	0x0016
 80177ec:	fff6001f 	.word	0xfff6001f
 80177f0:	fff6fff6 	.word	0xfff6fff6
 80177f4:	001ffff6 	.word	0x001ffff6
 80177f8:	fff6fff6 	.word	0xfff6fff6
 80177fc:	fff6fff6 	.word	0xfff6fff6
 8017800:	003600a1 	.word	0x003600a1
 8017804:	fff60080 	.word	0xfff60080
 8017808:	00b2fff6 	.word	0x00b2fff6
 801780c:	0036fff6 	.word	0x0036fff6
 8017810:	fff6fff6 	.word	0xfff6fff6
 8017814:	0084      	.short	0x0084
 8017816:	0025      	movs	r5, r4
 8017818:	681a      	ldr	r2, [r3, #0]
 801781a:	3542      	adds	r5, #66	@ 0x42
 801781c:	1d11      	adds	r1, r2, #4
 801781e:	6019      	str	r1, [r3, #0]
 8017820:	6813      	ldr	r3, [r2, #0]
 8017822:	702b      	strb	r3, [r5, #0]
 8017824:	2301      	movs	r3, #1
 8017826:	e0a0      	b.n	801796a <_printf_i+0x1c2>
 8017828:	6818      	ldr	r0, [r3, #0]
 801782a:	6809      	ldr	r1, [r1, #0]
 801782c:	1d02      	adds	r2, r0, #4
 801782e:	060d      	lsls	r5, r1, #24
 8017830:	d50b      	bpl.n	801784a <_printf_i+0xa2>
 8017832:	6806      	ldr	r6, [r0, #0]
 8017834:	601a      	str	r2, [r3, #0]
 8017836:	2e00      	cmp	r6, #0
 8017838:	da03      	bge.n	8017842 <_printf_i+0x9a>
 801783a:	232d      	movs	r3, #45	@ 0x2d
 801783c:	9a03      	ldr	r2, [sp, #12]
 801783e:	4276      	negs	r6, r6
 8017840:	7013      	strb	r3, [r2, #0]
 8017842:	4b5e      	ldr	r3, [pc, #376]	@ (80179bc <_printf_i+0x214>)
 8017844:	270a      	movs	r7, #10
 8017846:	9304      	str	r3, [sp, #16]
 8017848:	e018      	b.n	801787c <_printf_i+0xd4>
 801784a:	6806      	ldr	r6, [r0, #0]
 801784c:	601a      	str	r2, [r3, #0]
 801784e:	0649      	lsls	r1, r1, #25
 8017850:	d5f1      	bpl.n	8017836 <_printf_i+0x8e>
 8017852:	b236      	sxth	r6, r6
 8017854:	e7ef      	b.n	8017836 <_printf_i+0x8e>
 8017856:	6808      	ldr	r0, [r1, #0]
 8017858:	6819      	ldr	r1, [r3, #0]
 801785a:	c940      	ldmia	r1!, {r6}
 801785c:	0605      	lsls	r5, r0, #24
 801785e:	d402      	bmi.n	8017866 <_printf_i+0xbe>
 8017860:	0640      	lsls	r0, r0, #25
 8017862:	d500      	bpl.n	8017866 <_printf_i+0xbe>
 8017864:	b2b6      	uxth	r6, r6
 8017866:	6019      	str	r1, [r3, #0]
 8017868:	4b54      	ldr	r3, [pc, #336]	@ (80179bc <_printf_i+0x214>)
 801786a:	270a      	movs	r7, #10
 801786c:	9304      	str	r3, [sp, #16]
 801786e:	2a6f      	cmp	r2, #111	@ 0x6f
 8017870:	d100      	bne.n	8017874 <_printf_i+0xcc>
 8017872:	3f02      	subs	r7, #2
 8017874:	0023      	movs	r3, r4
 8017876:	2200      	movs	r2, #0
 8017878:	3343      	adds	r3, #67	@ 0x43
 801787a:	701a      	strb	r2, [r3, #0]
 801787c:	6863      	ldr	r3, [r4, #4]
 801787e:	60a3      	str	r3, [r4, #8]
 8017880:	2b00      	cmp	r3, #0
 8017882:	db03      	blt.n	801788c <_printf_i+0xe4>
 8017884:	2104      	movs	r1, #4
 8017886:	6822      	ldr	r2, [r4, #0]
 8017888:	438a      	bics	r2, r1
 801788a:	6022      	str	r2, [r4, #0]
 801788c:	2e00      	cmp	r6, #0
 801788e:	d102      	bne.n	8017896 <_printf_i+0xee>
 8017890:	9d03      	ldr	r5, [sp, #12]
 8017892:	2b00      	cmp	r3, #0
 8017894:	d00c      	beq.n	80178b0 <_printf_i+0x108>
 8017896:	9d03      	ldr	r5, [sp, #12]
 8017898:	0030      	movs	r0, r6
 801789a:	0039      	movs	r1, r7
 801789c:	f7e8 fcd6 	bl	800024c <__aeabi_uidivmod>
 80178a0:	9b04      	ldr	r3, [sp, #16]
 80178a2:	3d01      	subs	r5, #1
 80178a4:	5c5b      	ldrb	r3, [r3, r1]
 80178a6:	702b      	strb	r3, [r5, #0]
 80178a8:	0033      	movs	r3, r6
 80178aa:	0006      	movs	r6, r0
 80178ac:	429f      	cmp	r7, r3
 80178ae:	d9f3      	bls.n	8017898 <_printf_i+0xf0>
 80178b0:	2f08      	cmp	r7, #8
 80178b2:	d109      	bne.n	80178c8 <_printf_i+0x120>
 80178b4:	6823      	ldr	r3, [r4, #0]
 80178b6:	07db      	lsls	r3, r3, #31
 80178b8:	d506      	bpl.n	80178c8 <_printf_i+0x120>
 80178ba:	6862      	ldr	r2, [r4, #4]
 80178bc:	6923      	ldr	r3, [r4, #16]
 80178be:	429a      	cmp	r2, r3
 80178c0:	dc02      	bgt.n	80178c8 <_printf_i+0x120>
 80178c2:	2330      	movs	r3, #48	@ 0x30
 80178c4:	3d01      	subs	r5, #1
 80178c6:	702b      	strb	r3, [r5, #0]
 80178c8:	9b03      	ldr	r3, [sp, #12]
 80178ca:	1b5b      	subs	r3, r3, r5
 80178cc:	6123      	str	r3, [r4, #16]
 80178ce:	9b07      	ldr	r3, [sp, #28]
 80178d0:	0021      	movs	r1, r4
 80178d2:	9300      	str	r3, [sp, #0]
 80178d4:	9805      	ldr	r0, [sp, #20]
 80178d6:	9b06      	ldr	r3, [sp, #24]
 80178d8:	aa09      	add	r2, sp, #36	@ 0x24
 80178da:	f7ff fef5 	bl	80176c8 <_printf_common>
 80178de:	3001      	adds	r0, #1
 80178e0:	d148      	bne.n	8017974 <_printf_i+0x1cc>
 80178e2:	2001      	movs	r0, #1
 80178e4:	4240      	negs	r0, r0
 80178e6:	b00b      	add	sp, #44	@ 0x2c
 80178e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80178ea:	2220      	movs	r2, #32
 80178ec:	6809      	ldr	r1, [r1, #0]
 80178ee:	430a      	orrs	r2, r1
 80178f0:	6022      	str	r2, [r4, #0]
 80178f2:	2278      	movs	r2, #120	@ 0x78
 80178f4:	4932      	ldr	r1, [pc, #200]	@ (80179c0 <_printf_i+0x218>)
 80178f6:	9104      	str	r1, [sp, #16]
 80178f8:	0021      	movs	r1, r4
 80178fa:	3145      	adds	r1, #69	@ 0x45
 80178fc:	700a      	strb	r2, [r1, #0]
 80178fe:	6819      	ldr	r1, [r3, #0]
 8017900:	6822      	ldr	r2, [r4, #0]
 8017902:	c940      	ldmia	r1!, {r6}
 8017904:	0610      	lsls	r0, r2, #24
 8017906:	d402      	bmi.n	801790e <_printf_i+0x166>
 8017908:	0650      	lsls	r0, r2, #25
 801790a:	d500      	bpl.n	801790e <_printf_i+0x166>
 801790c:	b2b6      	uxth	r6, r6
 801790e:	6019      	str	r1, [r3, #0]
 8017910:	07d3      	lsls	r3, r2, #31
 8017912:	d502      	bpl.n	801791a <_printf_i+0x172>
 8017914:	2320      	movs	r3, #32
 8017916:	4313      	orrs	r3, r2
 8017918:	6023      	str	r3, [r4, #0]
 801791a:	2e00      	cmp	r6, #0
 801791c:	d001      	beq.n	8017922 <_printf_i+0x17a>
 801791e:	2710      	movs	r7, #16
 8017920:	e7a8      	b.n	8017874 <_printf_i+0xcc>
 8017922:	2220      	movs	r2, #32
 8017924:	6823      	ldr	r3, [r4, #0]
 8017926:	4393      	bics	r3, r2
 8017928:	6023      	str	r3, [r4, #0]
 801792a:	e7f8      	b.n	801791e <_printf_i+0x176>
 801792c:	681a      	ldr	r2, [r3, #0]
 801792e:	680d      	ldr	r5, [r1, #0]
 8017930:	1d10      	adds	r0, r2, #4
 8017932:	6949      	ldr	r1, [r1, #20]
 8017934:	6018      	str	r0, [r3, #0]
 8017936:	6813      	ldr	r3, [r2, #0]
 8017938:	062e      	lsls	r6, r5, #24
 801793a:	d501      	bpl.n	8017940 <_printf_i+0x198>
 801793c:	6019      	str	r1, [r3, #0]
 801793e:	e002      	b.n	8017946 <_printf_i+0x19e>
 8017940:	066d      	lsls	r5, r5, #25
 8017942:	d5fb      	bpl.n	801793c <_printf_i+0x194>
 8017944:	8019      	strh	r1, [r3, #0]
 8017946:	2300      	movs	r3, #0
 8017948:	9d03      	ldr	r5, [sp, #12]
 801794a:	6123      	str	r3, [r4, #16]
 801794c:	e7bf      	b.n	80178ce <_printf_i+0x126>
 801794e:	681a      	ldr	r2, [r3, #0]
 8017950:	1d11      	adds	r1, r2, #4
 8017952:	6019      	str	r1, [r3, #0]
 8017954:	6815      	ldr	r5, [r2, #0]
 8017956:	2100      	movs	r1, #0
 8017958:	0028      	movs	r0, r5
 801795a:	6862      	ldr	r2, [r4, #4]
 801795c:	f000 fa69 	bl	8017e32 <memchr>
 8017960:	2800      	cmp	r0, #0
 8017962:	d001      	beq.n	8017968 <_printf_i+0x1c0>
 8017964:	1b40      	subs	r0, r0, r5
 8017966:	6060      	str	r0, [r4, #4]
 8017968:	6863      	ldr	r3, [r4, #4]
 801796a:	6123      	str	r3, [r4, #16]
 801796c:	2300      	movs	r3, #0
 801796e:	9a03      	ldr	r2, [sp, #12]
 8017970:	7013      	strb	r3, [r2, #0]
 8017972:	e7ac      	b.n	80178ce <_printf_i+0x126>
 8017974:	002a      	movs	r2, r5
 8017976:	6923      	ldr	r3, [r4, #16]
 8017978:	9906      	ldr	r1, [sp, #24]
 801797a:	9805      	ldr	r0, [sp, #20]
 801797c:	9d07      	ldr	r5, [sp, #28]
 801797e:	47a8      	blx	r5
 8017980:	3001      	adds	r0, #1
 8017982:	d0ae      	beq.n	80178e2 <_printf_i+0x13a>
 8017984:	6823      	ldr	r3, [r4, #0]
 8017986:	079b      	lsls	r3, r3, #30
 8017988:	d415      	bmi.n	80179b6 <_printf_i+0x20e>
 801798a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801798c:	68e0      	ldr	r0, [r4, #12]
 801798e:	4298      	cmp	r0, r3
 8017990:	daa9      	bge.n	80178e6 <_printf_i+0x13e>
 8017992:	0018      	movs	r0, r3
 8017994:	e7a7      	b.n	80178e6 <_printf_i+0x13e>
 8017996:	0022      	movs	r2, r4
 8017998:	2301      	movs	r3, #1
 801799a:	9906      	ldr	r1, [sp, #24]
 801799c:	9805      	ldr	r0, [sp, #20]
 801799e:	9e07      	ldr	r6, [sp, #28]
 80179a0:	3219      	adds	r2, #25
 80179a2:	47b0      	blx	r6
 80179a4:	3001      	adds	r0, #1
 80179a6:	d09c      	beq.n	80178e2 <_printf_i+0x13a>
 80179a8:	3501      	adds	r5, #1
 80179aa:	68e3      	ldr	r3, [r4, #12]
 80179ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80179ae:	1a9b      	subs	r3, r3, r2
 80179b0:	42ab      	cmp	r3, r5
 80179b2:	dcf0      	bgt.n	8017996 <_printf_i+0x1ee>
 80179b4:	e7e9      	b.n	801798a <_printf_i+0x1e2>
 80179b6:	2500      	movs	r5, #0
 80179b8:	e7f7      	b.n	80179aa <_printf_i+0x202>
 80179ba:	46c0      	nop			@ (mov r8, r8)
 80179bc:	0801b97e 	.word	0x0801b97e
 80179c0:	0801b98f 	.word	0x0801b98f

080179c4 <std>:
 80179c4:	2300      	movs	r3, #0
 80179c6:	b510      	push	{r4, lr}
 80179c8:	0004      	movs	r4, r0
 80179ca:	6003      	str	r3, [r0, #0]
 80179cc:	6043      	str	r3, [r0, #4]
 80179ce:	6083      	str	r3, [r0, #8]
 80179d0:	8181      	strh	r1, [r0, #12]
 80179d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80179d4:	81c2      	strh	r2, [r0, #14]
 80179d6:	6103      	str	r3, [r0, #16]
 80179d8:	6143      	str	r3, [r0, #20]
 80179da:	6183      	str	r3, [r0, #24]
 80179dc:	0019      	movs	r1, r3
 80179de:	2208      	movs	r2, #8
 80179e0:	305c      	adds	r0, #92	@ 0x5c
 80179e2:	f000 f967 	bl	8017cb4 <memset>
 80179e6:	4b0b      	ldr	r3, [pc, #44]	@ (8017a14 <std+0x50>)
 80179e8:	6224      	str	r4, [r4, #32]
 80179ea:	6263      	str	r3, [r4, #36]	@ 0x24
 80179ec:	4b0a      	ldr	r3, [pc, #40]	@ (8017a18 <std+0x54>)
 80179ee:	62a3      	str	r3, [r4, #40]	@ 0x28
 80179f0:	4b0a      	ldr	r3, [pc, #40]	@ (8017a1c <std+0x58>)
 80179f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80179f4:	4b0a      	ldr	r3, [pc, #40]	@ (8017a20 <std+0x5c>)
 80179f6:	6323      	str	r3, [r4, #48]	@ 0x30
 80179f8:	4b0a      	ldr	r3, [pc, #40]	@ (8017a24 <std+0x60>)
 80179fa:	429c      	cmp	r4, r3
 80179fc:	d005      	beq.n	8017a0a <std+0x46>
 80179fe:	4b0a      	ldr	r3, [pc, #40]	@ (8017a28 <std+0x64>)
 8017a00:	429c      	cmp	r4, r3
 8017a02:	d002      	beq.n	8017a0a <std+0x46>
 8017a04:	4b09      	ldr	r3, [pc, #36]	@ (8017a2c <std+0x68>)
 8017a06:	429c      	cmp	r4, r3
 8017a08:	d103      	bne.n	8017a12 <std+0x4e>
 8017a0a:	0020      	movs	r0, r4
 8017a0c:	3058      	adds	r0, #88	@ 0x58
 8017a0e:	f000 fa0d 	bl	8017e2c <__retarget_lock_init_recursive>
 8017a12:	bd10      	pop	{r4, pc}
 8017a14:	08017bad 	.word	0x08017bad
 8017a18:	08017bd5 	.word	0x08017bd5
 8017a1c:	08017c0d 	.word	0x08017c0d
 8017a20:	08017c39 	.word	0x08017c39
 8017a24:	20003dc8 	.word	0x20003dc8
 8017a28:	20003e30 	.word	0x20003e30
 8017a2c:	20003e98 	.word	0x20003e98

08017a30 <stdio_exit_handler>:
 8017a30:	b510      	push	{r4, lr}
 8017a32:	4a03      	ldr	r2, [pc, #12]	@ (8017a40 <stdio_exit_handler+0x10>)
 8017a34:	4903      	ldr	r1, [pc, #12]	@ (8017a44 <stdio_exit_handler+0x14>)
 8017a36:	4804      	ldr	r0, [pc, #16]	@ (8017a48 <stdio_exit_handler+0x18>)
 8017a38:	f000 f86c 	bl	8017b14 <_fwalk_sglue>
 8017a3c:	bd10      	pop	{r4, pc}
 8017a3e:	46c0      	nop			@ (mov r8, r8)
 8017a40:	20000220 	.word	0x20000220
 8017a44:	08019b05 	.word	0x08019b05
 8017a48:	20000230 	.word	0x20000230

08017a4c <cleanup_stdio>:
 8017a4c:	6841      	ldr	r1, [r0, #4]
 8017a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8017a7c <cleanup_stdio+0x30>)
 8017a50:	b510      	push	{r4, lr}
 8017a52:	0004      	movs	r4, r0
 8017a54:	4299      	cmp	r1, r3
 8017a56:	d001      	beq.n	8017a5c <cleanup_stdio+0x10>
 8017a58:	f002 f854 	bl	8019b04 <_fflush_r>
 8017a5c:	68a1      	ldr	r1, [r4, #8]
 8017a5e:	4b08      	ldr	r3, [pc, #32]	@ (8017a80 <cleanup_stdio+0x34>)
 8017a60:	4299      	cmp	r1, r3
 8017a62:	d002      	beq.n	8017a6a <cleanup_stdio+0x1e>
 8017a64:	0020      	movs	r0, r4
 8017a66:	f002 f84d 	bl	8019b04 <_fflush_r>
 8017a6a:	68e1      	ldr	r1, [r4, #12]
 8017a6c:	4b05      	ldr	r3, [pc, #20]	@ (8017a84 <cleanup_stdio+0x38>)
 8017a6e:	4299      	cmp	r1, r3
 8017a70:	d002      	beq.n	8017a78 <cleanup_stdio+0x2c>
 8017a72:	0020      	movs	r0, r4
 8017a74:	f002 f846 	bl	8019b04 <_fflush_r>
 8017a78:	bd10      	pop	{r4, pc}
 8017a7a:	46c0      	nop			@ (mov r8, r8)
 8017a7c:	20003dc8 	.word	0x20003dc8
 8017a80:	20003e30 	.word	0x20003e30
 8017a84:	20003e98 	.word	0x20003e98

08017a88 <global_stdio_init.part.0>:
 8017a88:	b510      	push	{r4, lr}
 8017a8a:	4b09      	ldr	r3, [pc, #36]	@ (8017ab0 <global_stdio_init.part.0+0x28>)
 8017a8c:	4a09      	ldr	r2, [pc, #36]	@ (8017ab4 <global_stdio_init.part.0+0x2c>)
 8017a8e:	2104      	movs	r1, #4
 8017a90:	601a      	str	r2, [r3, #0]
 8017a92:	4809      	ldr	r0, [pc, #36]	@ (8017ab8 <global_stdio_init.part.0+0x30>)
 8017a94:	2200      	movs	r2, #0
 8017a96:	f7ff ff95 	bl	80179c4 <std>
 8017a9a:	2201      	movs	r2, #1
 8017a9c:	2109      	movs	r1, #9
 8017a9e:	4807      	ldr	r0, [pc, #28]	@ (8017abc <global_stdio_init.part.0+0x34>)
 8017aa0:	f7ff ff90 	bl	80179c4 <std>
 8017aa4:	2202      	movs	r2, #2
 8017aa6:	2112      	movs	r1, #18
 8017aa8:	4805      	ldr	r0, [pc, #20]	@ (8017ac0 <global_stdio_init.part.0+0x38>)
 8017aaa:	f7ff ff8b 	bl	80179c4 <std>
 8017aae:	bd10      	pop	{r4, pc}
 8017ab0:	20003f00 	.word	0x20003f00
 8017ab4:	08017a31 	.word	0x08017a31
 8017ab8:	20003dc8 	.word	0x20003dc8
 8017abc:	20003e30 	.word	0x20003e30
 8017ac0:	20003e98 	.word	0x20003e98

08017ac4 <__sfp_lock_acquire>:
 8017ac4:	b510      	push	{r4, lr}
 8017ac6:	4802      	ldr	r0, [pc, #8]	@ (8017ad0 <__sfp_lock_acquire+0xc>)
 8017ac8:	f000 f9b1 	bl	8017e2e <__retarget_lock_acquire_recursive>
 8017acc:	bd10      	pop	{r4, pc}
 8017ace:	46c0      	nop			@ (mov r8, r8)
 8017ad0:	20003f09 	.word	0x20003f09

08017ad4 <__sfp_lock_release>:
 8017ad4:	b510      	push	{r4, lr}
 8017ad6:	4802      	ldr	r0, [pc, #8]	@ (8017ae0 <__sfp_lock_release+0xc>)
 8017ad8:	f000 f9aa 	bl	8017e30 <__retarget_lock_release_recursive>
 8017adc:	bd10      	pop	{r4, pc}
 8017ade:	46c0      	nop			@ (mov r8, r8)
 8017ae0:	20003f09 	.word	0x20003f09

08017ae4 <__sinit>:
 8017ae4:	b510      	push	{r4, lr}
 8017ae6:	0004      	movs	r4, r0
 8017ae8:	f7ff ffec 	bl	8017ac4 <__sfp_lock_acquire>
 8017aec:	6a23      	ldr	r3, [r4, #32]
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d002      	beq.n	8017af8 <__sinit+0x14>
 8017af2:	f7ff ffef 	bl	8017ad4 <__sfp_lock_release>
 8017af6:	bd10      	pop	{r4, pc}
 8017af8:	4b04      	ldr	r3, [pc, #16]	@ (8017b0c <__sinit+0x28>)
 8017afa:	6223      	str	r3, [r4, #32]
 8017afc:	4b04      	ldr	r3, [pc, #16]	@ (8017b10 <__sinit+0x2c>)
 8017afe:	681b      	ldr	r3, [r3, #0]
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d1f6      	bne.n	8017af2 <__sinit+0xe>
 8017b04:	f7ff ffc0 	bl	8017a88 <global_stdio_init.part.0>
 8017b08:	e7f3      	b.n	8017af2 <__sinit+0xe>
 8017b0a:	46c0      	nop			@ (mov r8, r8)
 8017b0c:	08017a4d 	.word	0x08017a4d
 8017b10:	20003f00 	.word	0x20003f00

08017b14 <_fwalk_sglue>:
 8017b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017b16:	0014      	movs	r4, r2
 8017b18:	2600      	movs	r6, #0
 8017b1a:	9000      	str	r0, [sp, #0]
 8017b1c:	9101      	str	r1, [sp, #4]
 8017b1e:	68a5      	ldr	r5, [r4, #8]
 8017b20:	6867      	ldr	r7, [r4, #4]
 8017b22:	3f01      	subs	r7, #1
 8017b24:	d504      	bpl.n	8017b30 <_fwalk_sglue+0x1c>
 8017b26:	6824      	ldr	r4, [r4, #0]
 8017b28:	2c00      	cmp	r4, #0
 8017b2a:	d1f8      	bne.n	8017b1e <_fwalk_sglue+0xa>
 8017b2c:	0030      	movs	r0, r6
 8017b2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017b30:	89ab      	ldrh	r3, [r5, #12]
 8017b32:	2b01      	cmp	r3, #1
 8017b34:	d908      	bls.n	8017b48 <_fwalk_sglue+0x34>
 8017b36:	220e      	movs	r2, #14
 8017b38:	5eab      	ldrsh	r3, [r5, r2]
 8017b3a:	3301      	adds	r3, #1
 8017b3c:	d004      	beq.n	8017b48 <_fwalk_sglue+0x34>
 8017b3e:	0029      	movs	r1, r5
 8017b40:	9800      	ldr	r0, [sp, #0]
 8017b42:	9b01      	ldr	r3, [sp, #4]
 8017b44:	4798      	blx	r3
 8017b46:	4306      	orrs	r6, r0
 8017b48:	3568      	adds	r5, #104	@ 0x68
 8017b4a:	e7ea      	b.n	8017b22 <_fwalk_sglue+0xe>

08017b4c <iprintf>:
 8017b4c:	b40f      	push	{r0, r1, r2, r3}
 8017b4e:	b507      	push	{r0, r1, r2, lr}
 8017b50:	4905      	ldr	r1, [pc, #20]	@ (8017b68 <iprintf+0x1c>)
 8017b52:	ab04      	add	r3, sp, #16
 8017b54:	6808      	ldr	r0, [r1, #0]
 8017b56:	cb04      	ldmia	r3!, {r2}
 8017b58:	6881      	ldr	r1, [r0, #8]
 8017b5a:	9301      	str	r3, [sp, #4]
 8017b5c:	f001 fe30 	bl	80197c0 <_vfiprintf_r>
 8017b60:	b003      	add	sp, #12
 8017b62:	bc08      	pop	{r3}
 8017b64:	b004      	add	sp, #16
 8017b66:	4718      	bx	r3
 8017b68:	2000022c 	.word	0x2000022c

08017b6c <siprintf>:
 8017b6c:	b40e      	push	{r1, r2, r3}
 8017b6e:	b500      	push	{lr}
 8017b70:	490b      	ldr	r1, [pc, #44]	@ (8017ba0 <siprintf+0x34>)
 8017b72:	b09c      	sub	sp, #112	@ 0x70
 8017b74:	ab1d      	add	r3, sp, #116	@ 0x74
 8017b76:	9002      	str	r0, [sp, #8]
 8017b78:	9006      	str	r0, [sp, #24]
 8017b7a:	9107      	str	r1, [sp, #28]
 8017b7c:	9104      	str	r1, [sp, #16]
 8017b7e:	4809      	ldr	r0, [pc, #36]	@ (8017ba4 <siprintf+0x38>)
 8017b80:	4909      	ldr	r1, [pc, #36]	@ (8017ba8 <siprintf+0x3c>)
 8017b82:	cb04      	ldmia	r3!, {r2}
 8017b84:	9105      	str	r1, [sp, #20]
 8017b86:	6800      	ldr	r0, [r0, #0]
 8017b88:	a902      	add	r1, sp, #8
 8017b8a:	9301      	str	r3, [sp, #4]
 8017b8c:	f001 fcf2 	bl	8019574 <_svfiprintf_r>
 8017b90:	2200      	movs	r2, #0
 8017b92:	9b02      	ldr	r3, [sp, #8]
 8017b94:	701a      	strb	r2, [r3, #0]
 8017b96:	b01c      	add	sp, #112	@ 0x70
 8017b98:	bc08      	pop	{r3}
 8017b9a:	b003      	add	sp, #12
 8017b9c:	4718      	bx	r3
 8017b9e:	46c0      	nop			@ (mov r8, r8)
 8017ba0:	7fffffff 	.word	0x7fffffff
 8017ba4:	2000022c 	.word	0x2000022c
 8017ba8:	ffff0208 	.word	0xffff0208

08017bac <__sread>:
 8017bac:	b570      	push	{r4, r5, r6, lr}
 8017bae:	000c      	movs	r4, r1
 8017bb0:	250e      	movs	r5, #14
 8017bb2:	5f49      	ldrsh	r1, [r1, r5]
 8017bb4:	f000 f8e8 	bl	8017d88 <_read_r>
 8017bb8:	2800      	cmp	r0, #0
 8017bba:	db03      	blt.n	8017bc4 <__sread+0x18>
 8017bbc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017bbe:	181b      	adds	r3, r3, r0
 8017bc0:	6563      	str	r3, [r4, #84]	@ 0x54
 8017bc2:	bd70      	pop	{r4, r5, r6, pc}
 8017bc4:	89a3      	ldrh	r3, [r4, #12]
 8017bc6:	4a02      	ldr	r2, [pc, #8]	@ (8017bd0 <__sread+0x24>)
 8017bc8:	4013      	ands	r3, r2
 8017bca:	81a3      	strh	r3, [r4, #12]
 8017bcc:	e7f9      	b.n	8017bc2 <__sread+0x16>
 8017bce:	46c0      	nop			@ (mov r8, r8)
 8017bd0:	ffffefff 	.word	0xffffefff

08017bd4 <__swrite>:
 8017bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bd6:	001f      	movs	r7, r3
 8017bd8:	898b      	ldrh	r3, [r1, #12]
 8017bda:	0005      	movs	r5, r0
 8017bdc:	000c      	movs	r4, r1
 8017bde:	0016      	movs	r6, r2
 8017be0:	05db      	lsls	r3, r3, #23
 8017be2:	d505      	bpl.n	8017bf0 <__swrite+0x1c>
 8017be4:	230e      	movs	r3, #14
 8017be6:	5ec9      	ldrsh	r1, [r1, r3]
 8017be8:	2200      	movs	r2, #0
 8017bea:	2302      	movs	r3, #2
 8017bec:	f000 f8b8 	bl	8017d60 <_lseek_r>
 8017bf0:	89a3      	ldrh	r3, [r4, #12]
 8017bf2:	4a05      	ldr	r2, [pc, #20]	@ (8017c08 <__swrite+0x34>)
 8017bf4:	0028      	movs	r0, r5
 8017bf6:	4013      	ands	r3, r2
 8017bf8:	81a3      	strh	r3, [r4, #12]
 8017bfa:	0032      	movs	r2, r6
 8017bfc:	230e      	movs	r3, #14
 8017bfe:	5ee1      	ldrsh	r1, [r4, r3]
 8017c00:	003b      	movs	r3, r7
 8017c02:	f000 f8d5 	bl	8017db0 <_write_r>
 8017c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c08:	ffffefff 	.word	0xffffefff

08017c0c <__sseek>:
 8017c0c:	b570      	push	{r4, r5, r6, lr}
 8017c0e:	000c      	movs	r4, r1
 8017c10:	250e      	movs	r5, #14
 8017c12:	5f49      	ldrsh	r1, [r1, r5]
 8017c14:	f000 f8a4 	bl	8017d60 <_lseek_r>
 8017c18:	89a3      	ldrh	r3, [r4, #12]
 8017c1a:	1c42      	adds	r2, r0, #1
 8017c1c:	d103      	bne.n	8017c26 <__sseek+0x1a>
 8017c1e:	4a05      	ldr	r2, [pc, #20]	@ (8017c34 <__sseek+0x28>)
 8017c20:	4013      	ands	r3, r2
 8017c22:	81a3      	strh	r3, [r4, #12]
 8017c24:	bd70      	pop	{r4, r5, r6, pc}
 8017c26:	2280      	movs	r2, #128	@ 0x80
 8017c28:	0152      	lsls	r2, r2, #5
 8017c2a:	4313      	orrs	r3, r2
 8017c2c:	81a3      	strh	r3, [r4, #12]
 8017c2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8017c30:	e7f8      	b.n	8017c24 <__sseek+0x18>
 8017c32:	46c0      	nop			@ (mov r8, r8)
 8017c34:	ffffefff 	.word	0xffffefff

08017c38 <__sclose>:
 8017c38:	b510      	push	{r4, lr}
 8017c3a:	230e      	movs	r3, #14
 8017c3c:	5ec9      	ldrsh	r1, [r1, r3]
 8017c3e:	f000 f87d 	bl	8017d3c <_close_r>
 8017c42:	bd10      	pop	{r4, pc}

08017c44 <_vsniprintf_r>:
 8017c44:	b530      	push	{r4, r5, lr}
 8017c46:	0014      	movs	r4, r2
 8017c48:	0005      	movs	r5, r0
 8017c4a:	001a      	movs	r2, r3
 8017c4c:	b09b      	sub	sp, #108	@ 0x6c
 8017c4e:	2c00      	cmp	r4, #0
 8017c50:	da05      	bge.n	8017c5e <_vsniprintf_r+0x1a>
 8017c52:	238b      	movs	r3, #139	@ 0x8b
 8017c54:	6003      	str	r3, [r0, #0]
 8017c56:	2001      	movs	r0, #1
 8017c58:	4240      	negs	r0, r0
 8017c5a:	b01b      	add	sp, #108	@ 0x6c
 8017c5c:	bd30      	pop	{r4, r5, pc}
 8017c5e:	2382      	movs	r3, #130	@ 0x82
 8017c60:	4668      	mov	r0, sp
 8017c62:	009b      	lsls	r3, r3, #2
 8017c64:	8183      	strh	r3, [r0, #12]
 8017c66:	2300      	movs	r3, #0
 8017c68:	9100      	str	r1, [sp, #0]
 8017c6a:	9104      	str	r1, [sp, #16]
 8017c6c:	429c      	cmp	r4, r3
 8017c6e:	d000      	beq.n	8017c72 <_vsniprintf_r+0x2e>
 8017c70:	1e63      	subs	r3, r4, #1
 8017c72:	9302      	str	r3, [sp, #8]
 8017c74:	9305      	str	r3, [sp, #20]
 8017c76:	2301      	movs	r3, #1
 8017c78:	4669      	mov	r1, sp
 8017c7a:	425b      	negs	r3, r3
 8017c7c:	81cb      	strh	r3, [r1, #14]
 8017c7e:	0028      	movs	r0, r5
 8017c80:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017c82:	f001 fc77 	bl	8019574 <_svfiprintf_r>
 8017c86:	1c43      	adds	r3, r0, #1
 8017c88:	da01      	bge.n	8017c8e <_vsniprintf_r+0x4a>
 8017c8a:	238b      	movs	r3, #139	@ 0x8b
 8017c8c:	602b      	str	r3, [r5, #0]
 8017c8e:	2c00      	cmp	r4, #0
 8017c90:	d0e3      	beq.n	8017c5a <_vsniprintf_r+0x16>
 8017c92:	2200      	movs	r2, #0
 8017c94:	9b00      	ldr	r3, [sp, #0]
 8017c96:	701a      	strb	r2, [r3, #0]
 8017c98:	e7df      	b.n	8017c5a <_vsniprintf_r+0x16>
	...

08017c9c <vsniprintf>:
 8017c9c:	b513      	push	{r0, r1, r4, lr}
 8017c9e:	4c04      	ldr	r4, [pc, #16]	@ (8017cb0 <vsniprintf+0x14>)
 8017ca0:	9300      	str	r3, [sp, #0]
 8017ca2:	0013      	movs	r3, r2
 8017ca4:	000a      	movs	r2, r1
 8017ca6:	0001      	movs	r1, r0
 8017ca8:	6820      	ldr	r0, [r4, #0]
 8017caa:	f7ff ffcb 	bl	8017c44 <_vsniprintf_r>
 8017cae:	bd16      	pop	{r1, r2, r4, pc}
 8017cb0:	2000022c 	.word	0x2000022c

08017cb4 <memset>:
 8017cb4:	0003      	movs	r3, r0
 8017cb6:	1882      	adds	r2, r0, r2
 8017cb8:	4293      	cmp	r3, r2
 8017cba:	d100      	bne.n	8017cbe <memset+0xa>
 8017cbc:	4770      	bx	lr
 8017cbe:	7019      	strb	r1, [r3, #0]
 8017cc0:	3301      	adds	r3, #1
 8017cc2:	e7f9      	b.n	8017cb8 <memset+0x4>

08017cc4 <strchr>:
 8017cc4:	b2c9      	uxtb	r1, r1
 8017cc6:	7803      	ldrb	r3, [r0, #0]
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d004      	beq.n	8017cd6 <strchr+0x12>
 8017ccc:	428b      	cmp	r3, r1
 8017cce:	d100      	bne.n	8017cd2 <strchr+0xe>
 8017cd0:	4770      	bx	lr
 8017cd2:	3001      	adds	r0, #1
 8017cd4:	e7f7      	b.n	8017cc6 <strchr+0x2>
 8017cd6:	424b      	negs	r3, r1
 8017cd8:	4159      	adcs	r1, r3
 8017cda:	4249      	negs	r1, r1
 8017cdc:	4008      	ands	r0, r1
 8017cde:	e7f7      	b.n	8017cd0 <strchr+0xc>

08017ce0 <strncpy>:
 8017ce0:	0003      	movs	r3, r0
 8017ce2:	b530      	push	{r4, r5, lr}
 8017ce4:	001d      	movs	r5, r3
 8017ce6:	2a00      	cmp	r2, #0
 8017ce8:	d006      	beq.n	8017cf8 <strncpy+0x18>
 8017cea:	780c      	ldrb	r4, [r1, #0]
 8017cec:	3a01      	subs	r2, #1
 8017cee:	3301      	adds	r3, #1
 8017cf0:	702c      	strb	r4, [r5, #0]
 8017cf2:	3101      	adds	r1, #1
 8017cf4:	2c00      	cmp	r4, #0
 8017cf6:	d1f5      	bne.n	8017ce4 <strncpy+0x4>
 8017cf8:	2100      	movs	r1, #0
 8017cfa:	189a      	adds	r2, r3, r2
 8017cfc:	4293      	cmp	r3, r2
 8017cfe:	d100      	bne.n	8017d02 <strncpy+0x22>
 8017d00:	bd30      	pop	{r4, r5, pc}
 8017d02:	7019      	strb	r1, [r3, #0]
 8017d04:	3301      	adds	r3, #1
 8017d06:	e7f9      	b.n	8017cfc <strncpy+0x1c>

08017d08 <strstr>:
 8017d08:	780a      	ldrb	r2, [r1, #0]
 8017d0a:	b530      	push	{r4, r5, lr}
 8017d0c:	2a00      	cmp	r2, #0
 8017d0e:	d10c      	bne.n	8017d2a <strstr+0x22>
 8017d10:	bd30      	pop	{r4, r5, pc}
 8017d12:	429a      	cmp	r2, r3
 8017d14:	d108      	bne.n	8017d28 <strstr+0x20>
 8017d16:	2301      	movs	r3, #1
 8017d18:	5ccc      	ldrb	r4, [r1, r3]
 8017d1a:	2c00      	cmp	r4, #0
 8017d1c:	d0f8      	beq.n	8017d10 <strstr+0x8>
 8017d1e:	5cc5      	ldrb	r5, [r0, r3]
 8017d20:	42a5      	cmp	r5, r4
 8017d22:	d101      	bne.n	8017d28 <strstr+0x20>
 8017d24:	3301      	adds	r3, #1
 8017d26:	e7f7      	b.n	8017d18 <strstr+0x10>
 8017d28:	3001      	adds	r0, #1
 8017d2a:	7803      	ldrb	r3, [r0, #0]
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d1f0      	bne.n	8017d12 <strstr+0xa>
 8017d30:	0018      	movs	r0, r3
 8017d32:	e7ed      	b.n	8017d10 <strstr+0x8>

08017d34 <_localeconv_r>:
 8017d34:	4800      	ldr	r0, [pc, #0]	@ (8017d38 <_localeconv_r+0x4>)
 8017d36:	4770      	bx	lr
 8017d38:	2000036c 	.word	0x2000036c

08017d3c <_close_r>:
 8017d3c:	2300      	movs	r3, #0
 8017d3e:	b570      	push	{r4, r5, r6, lr}
 8017d40:	4d06      	ldr	r5, [pc, #24]	@ (8017d5c <_close_r+0x20>)
 8017d42:	0004      	movs	r4, r0
 8017d44:	0008      	movs	r0, r1
 8017d46:	602b      	str	r3, [r5, #0]
 8017d48:	f7f1 f848 	bl	8008ddc <_close>
 8017d4c:	1c43      	adds	r3, r0, #1
 8017d4e:	d103      	bne.n	8017d58 <_close_r+0x1c>
 8017d50:	682b      	ldr	r3, [r5, #0]
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d000      	beq.n	8017d58 <_close_r+0x1c>
 8017d56:	6023      	str	r3, [r4, #0]
 8017d58:	bd70      	pop	{r4, r5, r6, pc}
 8017d5a:	46c0      	nop			@ (mov r8, r8)
 8017d5c:	20003f04 	.word	0x20003f04

08017d60 <_lseek_r>:
 8017d60:	b570      	push	{r4, r5, r6, lr}
 8017d62:	0004      	movs	r4, r0
 8017d64:	0008      	movs	r0, r1
 8017d66:	0011      	movs	r1, r2
 8017d68:	001a      	movs	r2, r3
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	4d05      	ldr	r5, [pc, #20]	@ (8017d84 <_lseek_r+0x24>)
 8017d6e:	602b      	str	r3, [r5, #0]
 8017d70:	f7f1 f855 	bl	8008e1e <_lseek>
 8017d74:	1c43      	adds	r3, r0, #1
 8017d76:	d103      	bne.n	8017d80 <_lseek_r+0x20>
 8017d78:	682b      	ldr	r3, [r5, #0]
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d000      	beq.n	8017d80 <_lseek_r+0x20>
 8017d7e:	6023      	str	r3, [r4, #0]
 8017d80:	bd70      	pop	{r4, r5, r6, pc}
 8017d82:	46c0      	nop			@ (mov r8, r8)
 8017d84:	20003f04 	.word	0x20003f04

08017d88 <_read_r>:
 8017d88:	b570      	push	{r4, r5, r6, lr}
 8017d8a:	0004      	movs	r4, r0
 8017d8c:	0008      	movs	r0, r1
 8017d8e:	0011      	movs	r1, r2
 8017d90:	001a      	movs	r2, r3
 8017d92:	2300      	movs	r3, #0
 8017d94:	4d05      	ldr	r5, [pc, #20]	@ (8017dac <_read_r+0x24>)
 8017d96:	602b      	str	r3, [r5, #0]
 8017d98:	f7f1 f803 	bl	8008da2 <_read>
 8017d9c:	1c43      	adds	r3, r0, #1
 8017d9e:	d103      	bne.n	8017da8 <_read_r+0x20>
 8017da0:	682b      	ldr	r3, [r5, #0]
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d000      	beq.n	8017da8 <_read_r+0x20>
 8017da6:	6023      	str	r3, [r4, #0]
 8017da8:	bd70      	pop	{r4, r5, r6, pc}
 8017daa:	46c0      	nop			@ (mov r8, r8)
 8017dac:	20003f04 	.word	0x20003f04

08017db0 <_write_r>:
 8017db0:	b570      	push	{r4, r5, r6, lr}
 8017db2:	0004      	movs	r4, r0
 8017db4:	0008      	movs	r0, r1
 8017db6:	0011      	movs	r1, r2
 8017db8:	001a      	movs	r2, r3
 8017dba:	2300      	movs	r3, #0
 8017dbc:	4d05      	ldr	r5, [pc, #20]	@ (8017dd4 <_write_r+0x24>)
 8017dbe:	602b      	str	r3, [r5, #0]
 8017dc0:	f7f1 fc7a 	bl	80096b8 <_write>
 8017dc4:	1c43      	adds	r3, r0, #1
 8017dc6:	d103      	bne.n	8017dd0 <_write_r+0x20>
 8017dc8:	682b      	ldr	r3, [r5, #0]
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d000      	beq.n	8017dd0 <_write_r+0x20>
 8017dce:	6023      	str	r3, [r4, #0]
 8017dd0:	bd70      	pop	{r4, r5, r6, pc}
 8017dd2:	46c0      	nop			@ (mov r8, r8)
 8017dd4:	20003f04 	.word	0x20003f04

08017dd8 <__errno>:
 8017dd8:	4b01      	ldr	r3, [pc, #4]	@ (8017de0 <__errno+0x8>)
 8017dda:	6818      	ldr	r0, [r3, #0]
 8017ddc:	4770      	bx	lr
 8017dde:	46c0      	nop			@ (mov r8, r8)
 8017de0:	2000022c 	.word	0x2000022c

08017de4 <__libc_init_array>:
 8017de4:	b570      	push	{r4, r5, r6, lr}
 8017de6:	2600      	movs	r6, #0
 8017de8:	4c0c      	ldr	r4, [pc, #48]	@ (8017e1c <__libc_init_array+0x38>)
 8017dea:	4d0d      	ldr	r5, [pc, #52]	@ (8017e20 <__libc_init_array+0x3c>)
 8017dec:	1b64      	subs	r4, r4, r5
 8017dee:	10a4      	asrs	r4, r4, #2
 8017df0:	42a6      	cmp	r6, r4
 8017df2:	d109      	bne.n	8017e08 <__libc_init_array+0x24>
 8017df4:	2600      	movs	r6, #0
 8017df6:	f002 fe57 	bl	801aaa8 <_init>
 8017dfa:	4c0a      	ldr	r4, [pc, #40]	@ (8017e24 <__libc_init_array+0x40>)
 8017dfc:	4d0a      	ldr	r5, [pc, #40]	@ (8017e28 <__libc_init_array+0x44>)
 8017dfe:	1b64      	subs	r4, r4, r5
 8017e00:	10a4      	asrs	r4, r4, #2
 8017e02:	42a6      	cmp	r6, r4
 8017e04:	d105      	bne.n	8017e12 <__libc_init_array+0x2e>
 8017e06:	bd70      	pop	{r4, r5, r6, pc}
 8017e08:	00b3      	lsls	r3, r6, #2
 8017e0a:	58eb      	ldr	r3, [r5, r3]
 8017e0c:	4798      	blx	r3
 8017e0e:	3601      	adds	r6, #1
 8017e10:	e7ee      	b.n	8017df0 <__libc_init_array+0xc>
 8017e12:	00b3      	lsls	r3, r6, #2
 8017e14:	58eb      	ldr	r3, [r5, r3]
 8017e16:	4798      	blx	r3
 8017e18:	3601      	adds	r6, #1
 8017e1a:	e7f2      	b.n	8017e02 <__libc_init_array+0x1e>
 8017e1c:	0801bd00 	.word	0x0801bd00
 8017e20:	0801bd00 	.word	0x0801bd00
 8017e24:	0801bd04 	.word	0x0801bd04
 8017e28:	0801bd00 	.word	0x0801bd00

08017e2c <__retarget_lock_init_recursive>:
 8017e2c:	4770      	bx	lr

08017e2e <__retarget_lock_acquire_recursive>:
 8017e2e:	4770      	bx	lr

08017e30 <__retarget_lock_release_recursive>:
 8017e30:	4770      	bx	lr

08017e32 <memchr>:
 8017e32:	b2c9      	uxtb	r1, r1
 8017e34:	1882      	adds	r2, r0, r2
 8017e36:	4290      	cmp	r0, r2
 8017e38:	d101      	bne.n	8017e3e <memchr+0xc>
 8017e3a:	2000      	movs	r0, #0
 8017e3c:	4770      	bx	lr
 8017e3e:	7803      	ldrb	r3, [r0, #0]
 8017e40:	428b      	cmp	r3, r1
 8017e42:	d0fb      	beq.n	8017e3c <memchr+0xa>
 8017e44:	3001      	adds	r0, #1
 8017e46:	e7f6      	b.n	8017e36 <memchr+0x4>

08017e48 <memcpy>:
 8017e48:	2300      	movs	r3, #0
 8017e4a:	b510      	push	{r4, lr}
 8017e4c:	429a      	cmp	r2, r3
 8017e4e:	d100      	bne.n	8017e52 <memcpy+0xa>
 8017e50:	bd10      	pop	{r4, pc}
 8017e52:	5ccc      	ldrb	r4, [r1, r3]
 8017e54:	54c4      	strb	r4, [r0, r3]
 8017e56:	3301      	adds	r3, #1
 8017e58:	e7f8      	b.n	8017e4c <memcpy+0x4>

08017e5a <quorem>:
 8017e5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e5c:	6902      	ldr	r2, [r0, #16]
 8017e5e:	690f      	ldr	r7, [r1, #16]
 8017e60:	b087      	sub	sp, #28
 8017e62:	0006      	movs	r6, r0
 8017e64:	000b      	movs	r3, r1
 8017e66:	2000      	movs	r0, #0
 8017e68:	9102      	str	r1, [sp, #8]
 8017e6a:	42ba      	cmp	r2, r7
 8017e6c:	db6d      	blt.n	8017f4a <quorem+0xf0>
 8017e6e:	3f01      	subs	r7, #1
 8017e70:	00bc      	lsls	r4, r7, #2
 8017e72:	3314      	adds	r3, #20
 8017e74:	9305      	str	r3, [sp, #20]
 8017e76:	191b      	adds	r3, r3, r4
 8017e78:	9303      	str	r3, [sp, #12]
 8017e7a:	0033      	movs	r3, r6
 8017e7c:	3314      	adds	r3, #20
 8017e7e:	191c      	adds	r4, r3, r4
 8017e80:	9301      	str	r3, [sp, #4]
 8017e82:	6823      	ldr	r3, [r4, #0]
 8017e84:	9304      	str	r3, [sp, #16]
 8017e86:	9b03      	ldr	r3, [sp, #12]
 8017e88:	9804      	ldr	r0, [sp, #16]
 8017e8a:	681d      	ldr	r5, [r3, #0]
 8017e8c:	3501      	adds	r5, #1
 8017e8e:	0029      	movs	r1, r5
 8017e90:	f7e8 f956 	bl	8000140 <__udivsi3>
 8017e94:	9b04      	ldr	r3, [sp, #16]
 8017e96:	9000      	str	r0, [sp, #0]
 8017e98:	42ab      	cmp	r3, r5
 8017e9a:	d32b      	bcc.n	8017ef4 <quorem+0x9a>
 8017e9c:	9b05      	ldr	r3, [sp, #20]
 8017e9e:	9d01      	ldr	r5, [sp, #4]
 8017ea0:	469c      	mov	ip, r3
 8017ea2:	2300      	movs	r3, #0
 8017ea4:	9305      	str	r3, [sp, #20]
 8017ea6:	9304      	str	r3, [sp, #16]
 8017ea8:	4662      	mov	r2, ip
 8017eaa:	ca08      	ldmia	r2!, {r3}
 8017eac:	6828      	ldr	r0, [r5, #0]
 8017eae:	4694      	mov	ip, r2
 8017eb0:	9a00      	ldr	r2, [sp, #0]
 8017eb2:	b299      	uxth	r1, r3
 8017eb4:	4351      	muls	r1, r2
 8017eb6:	9a05      	ldr	r2, [sp, #20]
 8017eb8:	0c1b      	lsrs	r3, r3, #16
 8017eba:	1889      	adds	r1, r1, r2
 8017ebc:	9a00      	ldr	r2, [sp, #0]
 8017ebe:	4353      	muls	r3, r2
 8017ec0:	0c0a      	lsrs	r2, r1, #16
 8017ec2:	189b      	adds	r3, r3, r2
 8017ec4:	0c1a      	lsrs	r2, r3, #16
 8017ec6:	b289      	uxth	r1, r1
 8017ec8:	9205      	str	r2, [sp, #20]
 8017eca:	b282      	uxth	r2, r0
 8017ecc:	1a52      	subs	r2, r2, r1
 8017ece:	9904      	ldr	r1, [sp, #16]
 8017ed0:	0c00      	lsrs	r0, r0, #16
 8017ed2:	1852      	adds	r2, r2, r1
 8017ed4:	b29b      	uxth	r3, r3
 8017ed6:	1411      	asrs	r1, r2, #16
 8017ed8:	1ac3      	subs	r3, r0, r3
 8017eda:	185b      	adds	r3, r3, r1
 8017edc:	1419      	asrs	r1, r3, #16
 8017ede:	b292      	uxth	r2, r2
 8017ee0:	041b      	lsls	r3, r3, #16
 8017ee2:	431a      	orrs	r2, r3
 8017ee4:	9b03      	ldr	r3, [sp, #12]
 8017ee6:	9104      	str	r1, [sp, #16]
 8017ee8:	c504      	stmia	r5!, {r2}
 8017eea:	4563      	cmp	r3, ip
 8017eec:	d2dc      	bcs.n	8017ea8 <quorem+0x4e>
 8017eee:	6823      	ldr	r3, [r4, #0]
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	d030      	beq.n	8017f56 <quorem+0xfc>
 8017ef4:	0030      	movs	r0, r6
 8017ef6:	9902      	ldr	r1, [sp, #8]
 8017ef8:	f001 f9c6 	bl	8019288 <__mcmp>
 8017efc:	2800      	cmp	r0, #0
 8017efe:	db23      	blt.n	8017f48 <quorem+0xee>
 8017f00:	0034      	movs	r4, r6
 8017f02:	2500      	movs	r5, #0
 8017f04:	9902      	ldr	r1, [sp, #8]
 8017f06:	3414      	adds	r4, #20
 8017f08:	3114      	adds	r1, #20
 8017f0a:	6823      	ldr	r3, [r4, #0]
 8017f0c:	c901      	ldmia	r1!, {r0}
 8017f0e:	9302      	str	r3, [sp, #8]
 8017f10:	466b      	mov	r3, sp
 8017f12:	891b      	ldrh	r3, [r3, #8]
 8017f14:	b282      	uxth	r2, r0
 8017f16:	1a9a      	subs	r2, r3, r2
 8017f18:	9b02      	ldr	r3, [sp, #8]
 8017f1a:	1952      	adds	r2, r2, r5
 8017f1c:	0c00      	lsrs	r0, r0, #16
 8017f1e:	0c1b      	lsrs	r3, r3, #16
 8017f20:	1a1b      	subs	r3, r3, r0
 8017f22:	1410      	asrs	r0, r2, #16
 8017f24:	181b      	adds	r3, r3, r0
 8017f26:	141d      	asrs	r5, r3, #16
 8017f28:	b292      	uxth	r2, r2
 8017f2a:	041b      	lsls	r3, r3, #16
 8017f2c:	431a      	orrs	r2, r3
 8017f2e:	9b03      	ldr	r3, [sp, #12]
 8017f30:	c404      	stmia	r4!, {r2}
 8017f32:	428b      	cmp	r3, r1
 8017f34:	d2e9      	bcs.n	8017f0a <quorem+0xb0>
 8017f36:	9a01      	ldr	r2, [sp, #4]
 8017f38:	00bb      	lsls	r3, r7, #2
 8017f3a:	18d3      	adds	r3, r2, r3
 8017f3c:	681a      	ldr	r2, [r3, #0]
 8017f3e:	2a00      	cmp	r2, #0
 8017f40:	d013      	beq.n	8017f6a <quorem+0x110>
 8017f42:	9b00      	ldr	r3, [sp, #0]
 8017f44:	3301      	adds	r3, #1
 8017f46:	9300      	str	r3, [sp, #0]
 8017f48:	9800      	ldr	r0, [sp, #0]
 8017f4a:	b007      	add	sp, #28
 8017f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f4e:	6823      	ldr	r3, [r4, #0]
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d104      	bne.n	8017f5e <quorem+0x104>
 8017f54:	3f01      	subs	r7, #1
 8017f56:	9b01      	ldr	r3, [sp, #4]
 8017f58:	3c04      	subs	r4, #4
 8017f5a:	42a3      	cmp	r3, r4
 8017f5c:	d3f7      	bcc.n	8017f4e <quorem+0xf4>
 8017f5e:	6137      	str	r7, [r6, #16]
 8017f60:	e7c8      	b.n	8017ef4 <quorem+0x9a>
 8017f62:	681a      	ldr	r2, [r3, #0]
 8017f64:	2a00      	cmp	r2, #0
 8017f66:	d104      	bne.n	8017f72 <quorem+0x118>
 8017f68:	3f01      	subs	r7, #1
 8017f6a:	9a01      	ldr	r2, [sp, #4]
 8017f6c:	3b04      	subs	r3, #4
 8017f6e:	429a      	cmp	r2, r3
 8017f70:	d3f7      	bcc.n	8017f62 <quorem+0x108>
 8017f72:	6137      	str	r7, [r6, #16]
 8017f74:	e7e5      	b.n	8017f42 <quorem+0xe8>
	...

08017f78 <_dtoa_r>:
 8017f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f7a:	0014      	movs	r4, r2
 8017f7c:	001d      	movs	r5, r3
 8017f7e:	69c6      	ldr	r6, [r0, #28]
 8017f80:	b09d      	sub	sp, #116	@ 0x74
 8017f82:	940a      	str	r4, [sp, #40]	@ 0x28
 8017f84:	950b      	str	r5, [sp, #44]	@ 0x2c
 8017f86:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8017f88:	9003      	str	r0, [sp, #12]
 8017f8a:	2e00      	cmp	r6, #0
 8017f8c:	d10f      	bne.n	8017fae <_dtoa_r+0x36>
 8017f8e:	2010      	movs	r0, #16
 8017f90:	f000 fe30 	bl	8018bf4 <malloc>
 8017f94:	9b03      	ldr	r3, [sp, #12]
 8017f96:	1e02      	subs	r2, r0, #0
 8017f98:	61d8      	str	r0, [r3, #28]
 8017f9a:	d104      	bne.n	8017fa6 <_dtoa_r+0x2e>
 8017f9c:	21ef      	movs	r1, #239	@ 0xef
 8017f9e:	4bc7      	ldr	r3, [pc, #796]	@ (80182bc <_dtoa_r+0x344>)
 8017fa0:	48c7      	ldr	r0, [pc, #796]	@ (80182c0 <_dtoa_r+0x348>)
 8017fa2:	f001 fea1 	bl	8019ce8 <__assert_func>
 8017fa6:	6046      	str	r6, [r0, #4]
 8017fa8:	6086      	str	r6, [r0, #8]
 8017faa:	6006      	str	r6, [r0, #0]
 8017fac:	60c6      	str	r6, [r0, #12]
 8017fae:	9b03      	ldr	r3, [sp, #12]
 8017fb0:	69db      	ldr	r3, [r3, #28]
 8017fb2:	6819      	ldr	r1, [r3, #0]
 8017fb4:	2900      	cmp	r1, #0
 8017fb6:	d00b      	beq.n	8017fd0 <_dtoa_r+0x58>
 8017fb8:	685a      	ldr	r2, [r3, #4]
 8017fba:	2301      	movs	r3, #1
 8017fbc:	4093      	lsls	r3, r2
 8017fbe:	604a      	str	r2, [r1, #4]
 8017fc0:	608b      	str	r3, [r1, #8]
 8017fc2:	9803      	ldr	r0, [sp, #12]
 8017fc4:	f000 ff16 	bl	8018df4 <_Bfree>
 8017fc8:	2200      	movs	r2, #0
 8017fca:	9b03      	ldr	r3, [sp, #12]
 8017fcc:	69db      	ldr	r3, [r3, #28]
 8017fce:	601a      	str	r2, [r3, #0]
 8017fd0:	2d00      	cmp	r5, #0
 8017fd2:	da1e      	bge.n	8018012 <_dtoa_r+0x9a>
 8017fd4:	2301      	movs	r3, #1
 8017fd6:	603b      	str	r3, [r7, #0]
 8017fd8:	006b      	lsls	r3, r5, #1
 8017fda:	085b      	lsrs	r3, r3, #1
 8017fdc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017fde:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8017fe0:	4bb8      	ldr	r3, [pc, #736]	@ (80182c4 <_dtoa_r+0x34c>)
 8017fe2:	4ab8      	ldr	r2, [pc, #736]	@ (80182c4 <_dtoa_r+0x34c>)
 8017fe4:	403b      	ands	r3, r7
 8017fe6:	4293      	cmp	r3, r2
 8017fe8:	d116      	bne.n	8018018 <_dtoa_r+0xa0>
 8017fea:	4bb7      	ldr	r3, [pc, #732]	@ (80182c8 <_dtoa_r+0x350>)
 8017fec:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8017fee:	6013      	str	r3, [r2, #0]
 8017ff0:	033b      	lsls	r3, r7, #12
 8017ff2:	0b1b      	lsrs	r3, r3, #12
 8017ff4:	4323      	orrs	r3, r4
 8017ff6:	d101      	bne.n	8017ffc <_dtoa_r+0x84>
 8017ff8:	f000 fd83 	bl	8018b02 <_dtoa_r+0xb8a>
 8017ffc:	4bb3      	ldr	r3, [pc, #716]	@ (80182cc <_dtoa_r+0x354>)
 8017ffe:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8018000:	9308      	str	r3, [sp, #32]
 8018002:	2a00      	cmp	r2, #0
 8018004:	d002      	beq.n	801800c <_dtoa_r+0x94>
 8018006:	4bb2      	ldr	r3, [pc, #712]	@ (80182d0 <_dtoa_r+0x358>)
 8018008:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801800a:	6013      	str	r3, [r2, #0]
 801800c:	9808      	ldr	r0, [sp, #32]
 801800e:	b01d      	add	sp, #116	@ 0x74
 8018010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018012:	2300      	movs	r3, #0
 8018014:	603b      	str	r3, [r7, #0]
 8018016:	e7e2      	b.n	8017fde <_dtoa_r+0x66>
 8018018:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801801a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801801c:	9212      	str	r2, [sp, #72]	@ 0x48
 801801e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8018020:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018022:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018024:	2200      	movs	r2, #0
 8018026:	2300      	movs	r3, #0
 8018028:	f7e8 fa10 	bl	800044c <__aeabi_dcmpeq>
 801802c:	1e06      	subs	r6, r0, #0
 801802e:	d00b      	beq.n	8018048 <_dtoa_r+0xd0>
 8018030:	2301      	movs	r3, #1
 8018032:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8018034:	6013      	str	r3, [r2, #0]
 8018036:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8018038:	2b00      	cmp	r3, #0
 801803a:	d002      	beq.n	8018042 <_dtoa_r+0xca>
 801803c:	4ba5      	ldr	r3, [pc, #660]	@ (80182d4 <_dtoa_r+0x35c>)
 801803e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8018040:	6013      	str	r3, [r2, #0]
 8018042:	4ba5      	ldr	r3, [pc, #660]	@ (80182d8 <_dtoa_r+0x360>)
 8018044:	9308      	str	r3, [sp, #32]
 8018046:	e7e1      	b.n	801800c <_dtoa_r+0x94>
 8018048:	ab1a      	add	r3, sp, #104	@ 0x68
 801804a:	9301      	str	r3, [sp, #4]
 801804c:	ab1b      	add	r3, sp, #108	@ 0x6c
 801804e:	9300      	str	r3, [sp, #0]
 8018050:	9803      	ldr	r0, [sp, #12]
 8018052:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018054:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8018056:	f001 f9cd 	bl	80193f4 <__d2b>
 801805a:	007a      	lsls	r2, r7, #1
 801805c:	9005      	str	r0, [sp, #20]
 801805e:	0d52      	lsrs	r2, r2, #21
 8018060:	d100      	bne.n	8018064 <_dtoa_r+0xec>
 8018062:	e07b      	b.n	801815c <_dtoa_r+0x1e4>
 8018064:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8018066:	9618      	str	r6, [sp, #96]	@ 0x60
 8018068:	0319      	lsls	r1, r3, #12
 801806a:	4b9c      	ldr	r3, [pc, #624]	@ (80182dc <_dtoa_r+0x364>)
 801806c:	0b09      	lsrs	r1, r1, #12
 801806e:	430b      	orrs	r3, r1
 8018070:	499b      	ldr	r1, [pc, #620]	@ (80182e0 <_dtoa_r+0x368>)
 8018072:	1857      	adds	r7, r2, r1
 8018074:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018076:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018078:	0019      	movs	r1, r3
 801807a:	2200      	movs	r2, #0
 801807c:	4b99      	ldr	r3, [pc, #612]	@ (80182e4 <_dtoa_r+0x36c>)
 801807e:	f7ea fd23 	bl	8002ac8 <__aeabi_dsub>
 8018082:	4a99      	ldr	r2, [pc, #612]	@ (80182e8 <_dtoa_r+0x370>)
 8018084:	4b99      	ldr	r3, [pc, #612]	@ (80182ec <_dtoa_r+0x374>)
 8018086:	f7ea fa57 	bl	8002538 <__aeabi_dmul>
 801808a:	4a99      	ldr	r2, [pc, #612]	@ (80182f0 <_dtoa_r+0x378>)
 801808c:	4b99      	ldr	r3, [pc, #612]	@ (80182f4 <_dtoa_r+0x37c>)
 801808e:	f7e9 faab 	bl	80015e8 <__aeabi_dadd>
 8018092:	0004      	movs	r4, r0
 8018094:	0038      	movs	r0, r7
 8018096:	000d      	movs	r5, r1
 8018098:	f7eb f910 	bl	80032bc <__aeabi_i2d>
 801809c:	4a96      	ldr	r2, [pc, #600]	@ (80182f8 <_dtoa_r+0x380>)
 801809e:	4b97      	ldr	r3, [pc, #604]	@ (80182fc <_dtoa_r+0x384>)
 80180a0:	f7ea fa4a 	bl	8002538 <__aeabi_dmul>
 80180a4:	0002      	movs	r2, r0
 80180a6:	000b      	movs	r3, r1
 80180a8:	0020      	movs	r0, r4
 80180aa:	0029      	movs	r1, r5
 80180ac:	f7e9 fa9c 	bl	80015e8 <__aeabi_dadd>
 80180b0:	0004      	movs	r4, r0
 80180b2:	000d      	movs	r5, r1
 80180b4:	f7eb f8c6 	bl	8003244 <__aeabi_d2iz>
 80180b8:	2200      	movs	r2, #0
 80180ba:	9004      	str	r0, [sp, #16]
 80180bc:	2300      	movs	r3, #0
 80180be:	0020      	movs	r0, r4
 80180c0:	0029      	movs	r1, r5
 80180c2:	f7e8 f9c9 	bl	8000458 <__aeabi_dcmplt>
 80180c6:	2800      	cmp	r0, #0
 80180c8:	d00b      	beq.n	80180e2 <_dtoa_r+0x16a>
 80180ca:	9804      	ldr	r0, [sp, #16]
 80180cc:	f7eb f8f6 	bl	80032bc <__aeabi_i2d>
 80180d0:	002b      	movs	r3, r5
 80180d2:	0022      	movs	r2, r4
 80180d4:	f7e8 f9ba 	bl	800044c <__aeabi_dcmpeq>
 80180d8:	4243      	negs	r3, r0
 80180da:	4158      	adcs	r0, r3
 80180dc:	9b04      	ldr	r3, [sp, #16]
 80180de:	1a1b      	subs	r3, r3, r0
 80180e0:	9304      	str	r3, [sp, #16]
 80180e2:	2301      	movs	r3, #1
 80180e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80180e6:	9b04      	ldr	r3, [sp, #16]
 80180e8:	2b16      	cmp	r3, #22
 80180ea:	d810      	bhi.n	801810e <_dtoa_r+0x196>
 80180ec:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80180ee:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80180f0:	9a04      	ldr	r2, [sp, #16]
 80180f2:	4b83      	ldr	r3, [pc, #524]	@ (8018300 <_dtoa_r+0x388>)
 80180f4:	00d2      	lsls	r2, r2, #3
 80180f6:	189b      	adds	r3, r3, r2
 80180f8:	681a      	ldr	r2, [r3, #0]
 80180fa:	685b      	ldr	r3, [r3, #4]
 80180fc:	f7e8 f9ac 	bl	8000458 <__aeabi_dcmplt>
 8018100:	2800      	cmp	r0, #0
 8018102:	d047      	beq.n	8018194 <_dtoa_r+0x21c>
 8018104:	9b04      	ldr	r3, [sp, #16]
 8018106:	3b01      	subs	r3, #1
 8018108:	9304      	str	r3, [sp, #16]
 801810a:	2300      	movs	r3, #0
 801810c:	9315      	str	r3, [sp, #84]	@ 0x54
 801810e:	2200      	movs	r2, #0
 8018110:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8018112:	9206      	str	r2, [sp, #24]
 8018114:	1bdb      	subs	r3, r3, r7
 8018116:	1e5a      	subs	r2, r3, #1
 8018118:	d53e      	bpl.n	8018198 <_dtoa_r+0x220>
 801811a:	2201      	movs	r2, #1
 801811c:	1ad3      	subs	r3, r2, r3
 801811e:	9306      	str	r3, [sp, #24]
 8018120:	2300      	movs	r3, #0
 8018122:	930d      	str	r3, [sp, #52]	@ 0x34
 8018124:	9b04      	ldr	r3, [sp, #16]
 8018126:	2b00      	cmp	r3, #0
 8018128:	db38      	blt.n	801819c <_dtoa_r+0x224>
 801812a:	9a04      	ldr	r2, [sp, #16]
 801812c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801812e:	4694      	mov	ip, r2
 8018130:	4463      	add	r3, ip
 8018132:	930d      	str	r3, [sp, #52]	@ 0x34
 8018134:	2300      	movs	r3, #0
 8018136:	9214      	str	r2, [sp, #80]	@ 0x50
 8018138:	930f      	str	r3, [sp, #60]	@ 0x3c
 801813a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801813c:	2401      	movs	r4, #1
 801813e:	2b09      	cmp	r3, #9
 8018140:	d867      	bhi.n	8018212 <_dtoa_r+0x29a>
 8018142:	2b05      	cmp	r3, #5
 8018144:	dd02      	ble.n	801814c <_dtoa_r+0x1d4>
 8018146:	2400      	movs	r4, #0
 8018148:	3b04      	subs	r3, #4
 801814a:	9322      	str	r3, [sp, #136]	@ 0x88
 801814c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801814e:	1e98      	subs	r0, r3, #2
 8018150:	2803      	cmp	r0, #3
 8018152:	d867      	bhi.n	8018224 <_dtoa_r+0x2ac>
 8018154:	f7e7 ffe0 	bl	8000118 <__gnu_thumb1_case_uqi>
 8018158:	5b383a2b 	.word	0x5b383a2b
 801815c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801815e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8018160:	18f6      	adds	r6, r6, r3
 8018162:	4b68      	ldr	r3, [pc, #416]	@ (8018304 <_dtoa_r+0x38c>)
 8018164:	18f2      	adds	r2, r6, r3
 8018166:	2a20      	cmp	r2, #32
 8018168:	dd0f      	ble.n	801818a <_dtoa_r+0x212>
 801816a:	2340      	movs	r3, #64	@ 0x40
 801816c:	1a9b      	subs	r3, r3, r2
 801816e:	409f      	lsls	r7, r3
 8018170:	4b65      	ldr	r3, [pc, #404]	@ (8018308 <_dtoa_r+0x390>)
 8018172:	0038      	movs	r0, r7
 8018174:	18f3      	adds	r3, r6, r3
 8018176:	40dc      	lsrs	r4, r3
 8018178:	4320      	orrs	r0, r4
 801817a:	f7eb f8cd 	bl	8003318 <__aeabi_ui2d>
 801817e:	2201      	movs	r2, #1
 8018180:	4b62      	ldr	r3, [pc, #392]	@ (801830c <_dtoa_r+0x394>)
 8018182:	1e77      	subs	r7, r6, #1
 8018184:	18cb      	adds	r3, r1, r3
 8018186:	9218      	str	r2, [sp, #96]	@ 0x60
 8018188:	e776      	b.n	8018078 <_dtoa_r+0x100>
 801818a:	2320      	movs	r3, #32
 801818c:	0020      	movs	r0, r4
 801818e:	1a9b      	subs	r3, r3, r2
 8018190:	4098      	lsls	r0, r3
 8018192:	e7f2      	b.n	801817a <_dtoa_r+0x202>
 8018194:	9015      	str	r0, [sp, #84]	@ 0x54
 8018196:	e7ba      	b.n	801810e <_dtoa_r+0x196>
 8018198:	920d      	str	r2, [sp, #52]	@ 0x34
 801819a:	e7c3      	b.n	8018124 <_dtoa_r+0x1ac>
 801819c:	9b06      	ldr	r3, [sp, #24]
 801819e:	9a04      	ldr	r2, [sp, #16]
 80181a0:	1a9b      	subs	r3, r3, r2
 80181a2:	9306      	str	r3, [sp, #24]
 80181a4:	4253      	negs	r3, r2
 80181a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80181a8:	2300      	movs	r3, #0
 80181aa:	9314      	str	r3, [sp, #80]	@ 0x50
 80181ac:	e7c5      	b.n	801813a <_dtoa_r+0x1c2>
 80181ae:	2300      	movs	r3, #0
 80181b0:	9310      	str	r3, [sp, #64]	@ 0x40
 80181b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80181b4:	930e      	str	r3, [sp, #56]	@ 0x38
 80181b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	dc13      	bgt.n	80181e4 <_dtoa_r+0x26c>
 80181bc:	2301      	movs	r3, #1
 80181be:	001a      	movs	r2, r3
 80181c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80181c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80181c4:	9223      	str	r2, [sp, #140]	@ 0x8c
 80181c6:	e00d      	b.n	80181e4 <_dtoa_r+0x26c>
 80181c8:	2301      	movs	r3, #1
 80181ca:	e7f1      	b.n	80181b0 <_dtoa_r+0x238>
 80181cc:	2300      	movs	r3, #0
 80181ce:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80181d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80181d2:	4694      	mov	ip, r2
 80181d4:	9b04      	ldr	r3, [sp, #16]
 80181d6:	4463      	add	r3, ip
 80181d8:	930e      	str	r3, [sp, #56]	@ 0x38
 80181da:	3301      	adds	r3, #1
 80181dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80181de:	2b00      	cmp	r3, #0
 80181e0:	dc00      	bgt.n	80181e4 <_dtoa_r+0x26c>
 80181e2:	2301      	movs	r3, #1
 80181e4:	9a03      	ldr	r2, [sp, #12]
 80181e6:	2100      	movs	r1, #0
 80181e8:	69d0      	ldr	r0, [r2, #28]
 80181ea:	2204      	movs	r2, #4
 80181ec:	0015      	movs	r5, r2
 80181ee:	3514      	adds	r5, #20
 80181f0:	429d      	cmp	r5, r3
 80181f2:	d91b      	bls.n	801822c <_dtoa_r+0x2b4>
 80181f4:	6041      	str	r1, [r0, #4]
 80181f6:	9803      	ldr	r0, [sp, #12]
 80181f8:	f000 fdb8 	bl	8018d6c <_Balloc>
 80181fc:	9008      	str	r0, [sp, #32]
 80181fe:	2800      	cmp	r0, #0
 8018200:	d117      	bne.n	8018232 <_dtoa_r+0x2ba>
 8018202:	21b0      	movs	r1, #176	@ 0xb0
 8018204:	4b42      	ldr	r3, [pc, #264]	@ (8018310 <_dtoa_r+0x398>)
 8018206:	482e      	ldr	r0, [pc, #184]	@ (80182c0 <_dtoa_r+0x348>)
 8018208:	9a08      	ldr	r2, [sp, #32]
 801820a:	31ff      	adds	r1, #255	@ 0xff
 801820c:	e6c9      	b.n	8017fa2 <_dtoa_r+0x2a>
 801820e:	2301      	movs	r3, #1
 8018210:	e7dd      	b.n	80181ce <_dtoa_r+0x256>
 8018212:	2300      	movs	r3, #0
 8018214:	9410      	str	r4, [sp, #64]	@ 0x40
 8018216:	9322      	str	r3, [sp, #136]	@ 0x88
 8018218:	3b01      	subs	r3, #1
 801821a:	930e      	str	r3, [sp, #56]	@ 0x38
 801821c:	9309      	str	r3, [sp, #36]	@ 0x24
 801821e:	2200      	movs	r2, #0
 8018220:	3313      	adds	r3, #19
 8018222:	e7cf      	b.n	80181c4 <_dtoa_r+0x24c>
 8018224:	2301      	movs	r3, #1
 8018226:	9310      	str	r3, [sp, #64]	@ 0x40
 8018228:	3b02      	subs	r3, #2
 801822a:	e7f6      	b.n	801821a <_dtoa_r+0x2a2>
 801822c:	3101      	adds	r1, #1
 801822e:	0052      	lsls	r2, r2, #1
 8018230:	e7dc      	b.n	80181ec <_dtoa_r+0x274>
 8018232:	9b03      	ldr	r3, [sp, #12]
 8018234:	9a08      	ldr	r2, [sp, #32]
 8018236:	69db      	ldr	r3, [r3, #28]
 8018238:	601a      	str	r2, [r3, #0]
 801823a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801823c:	2b0e      	cmp	r3, #14
 801823e:	d900      	bls.n	8018242 <_dtoa_r+0x2ca>
 8018240:	e0d9      	b.n	80183f6 <_dtoa_r+0x47e>
 8018242:	2c00      	cmp	r4, #0
 8018244:	d100      	bne.n	8018248 <_dtoa_r+0x2d0>
 8018246:	e0d6      	b.n	80183f6 <_dtoa_r+0x47e>
 8018248:	9b04      	ldr	r3, [sp, #16]
 801824a:	2b00      	cmp	r3, #0
 801824c:	dd64      	ble.n	8018318 <_dtoa_r+0x3a0>
 801824e:	210f      	movs	r1, #15
 8018250:	9a04      	ldr	r2, [sp, #16]
 8018252:	4b2b      	ldr	r3, [pc, #172]	@ (8018300 <_dtoa_r+0x388>)
 8018254:	400a      	ands	r2, r1
 8018256:	00d2      	lsls	r2, r2, #3
 8018258:	189b      	adds	r3, r3, r2
 801825a:	681e      	ldr	r6, [r3, #0]
 801825c:	685f      	ldr	r7, [r3, #4]
 801825e:	9b04      	ldr	r3, [sp, #16]
 8018260:	2402      	movs	r4, #2
 8018262:	111d      	asrs	r5, r3, #4
 8018264:	05db      	lsls	r3, r3, #23
 8018266:	d50a      	bpl.n	801827e <_dtoa_r+0x306>
 8018268:	4b2a      	ldr	r3, [pc, #168]	@ (8018314 <_dtoa_r+0x39c>)
 801826a:	400d      	ands	r5, r1
 801826c:	6a1a      	ldr	r2, [r3, #32]
 801826e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018270:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018272:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018274:	f7e9 fd1c 	bl	8001cb0 <__aeabi_ddiv>
 8018278:	900a      	str	r0, [sp, #40]	@ 0x28
 801827a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801827c:	3401      	adds	r4, #1
 801827e:	4b25      	ldr	r3, [pc, #148]	@ (8018314 <_dtoa_r+0x39c>)
 8018280:	930c      	str	r3, [sp, #48]	@ 0x30
 8018282:	2d00      	cmp	r5, #0
 8018284:	d108      	bne.n	8018298 <_dtoa_r+0x320>
 8018286:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018288:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801828a:	0032      	movs	r2, r6
 801828c:	003b      	movs	r3, r7
 801828e:	f7e9 fd0f 	bl	8001cb0 <__aeabi_ddiv>
 8018292:	900a      	str	r0, [sp, #40]	@ 0x28
 8018294:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018296:	e05a      	b.n	801834e <_dtoa_r+0x3d6>
 8018298:	2301      	movs	r3, #1
 801829a:	421d      	tst	r5, r3
 801829c:	d009      	beq.n	80182b2 <_dtoa_r+0x33a>
 801829e:	18e4      	adds	r4, r4, r3
 80182a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80182a2:	0030      	movs	r0, r6
 80182a4:	681a      	ldr	r2, [r3, #0]
 80182a6:	685b      	ldr	r3, [r3, #4]
 80182a8:	0039      	movs	r1, r7
 80182aa:	f7ea f945 	bl	8002538 <__aeabi_dmul>
 80182ae:	0006      	movs	r6, r0
 80182b0:	000f      	movs	r7, r1
 80182b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80182b4:	106d      	asrs	r5, r5, #1
 80182b6:	3308      	adds	r3, #8
 80182b8:	e7e2      	b.n	8018280 <_dtoa_r+0x308>
 80182ba:	46c0      	nop			@ (mov r8, r8)
 80182bc:	0801b9ad 	.word	0x0801b9ad
 80182c0:	0801b9c4 	.word	0x0801b9c4
 80182c4:	7ff00000 	.word	0x7ff00000
 80182c8:	0000270f 	.word	0x0000270f
 80182cc:	0801b9a9 	.word	0x0801b9a9
 80182d0:	0801b9ac 	.word	0x0801b9ac
 80182d4:	0801b97d 	.word	0x0801b97d
 80182d8:	0801b97c 	.word	0x0801b97c
 80182dc:	3ff00000 	.word	0x3ff00000
 80182e0:	fffffc01 	.word	0xfffffc01
 80182e4:	3ff80000 	.word	0x3ff80000
 80182e8:	636f4361 	.word	0x636f4361
 80182ec:	3fd287a7 	.word	0x3fd287a7
 80182f0:	8b60c8b3 	.word	0x8b60c8b3
 80182f4:	3fc68a28 	.word	0x3fc68a28
 80182f8:	509f79fb 	.word	0x509f79fb
 80182fc:	3fd34413 	.word	0x3fd34413
 8018300:	0801bac0 	.word	0x0801bac0
 8018304:	00000432 	.word	0x00000432
 8018308:	00000412 	.word	0x00000412
 801830c:	fe100000 	.word	0xfe100000
 8018310:	0801ba1c 	.word	0x0801ba1c
 8018314:	0801ba98 	.word	0x0801ba98
 8018318:	9b04      	ldr	r3, [sp, #16]
 801831a:	2402      	movs	r4, #2
 801831c:	2b00      	cmp	r3, #0
 801831e:	d016      	beq.n	801834e <_dtoa_r+0x3d6>
 8018320:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018322:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018324:	220f      	movs	r2, #15
 8018326:	425d      	negs	r5, r3
 8018328:	402a      	ands	r2, r5
 801832a:	4bd7      	ldr	r3, [pc, #860]	@ (8018688 <_dtoa_r+0x710>)
 801832c:	00d2      	lsls	r2, r2, #3
 801832e:	189b      	adds	r3, r3, r2
 8018330:	681a      	ldr	r2, [r3, #0]
 8018332:	685b      	ldr	r3, [r3, #4]
 8018334:	f7ea f900 	bl	8002538 <__aeabi_dmul>
 8018338:	2701      	movs	r7, #1
 801833a:	2300      	movs	r3, #0
 801833c:	900a      	str	r0, [sp, #40]	@ 0x28
 801833e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018340:	4ed2      	ldr	r6, [pc, #840]	@ (801868c <_dtoa_r+0x714>)
 8018342:	112d      	asrs	r5, r5, #4
 8018344:	2d00      	cmp	r5, #0
 8018346:	d000      	beq.n	801834a <_dtoa_r+0x3d2>
 8018348:	e0ba      	b.n	80184c0 <_dtoa_r+0x548>
 801834a:	2b00      	cmp	r3, #0
 801834c:	d1a1      	bne.n	8018292 <_dtoa_r+0x31a>
 801834e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8018350:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018352:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018354:	2b00      	cmp	r3, #0
 8018356:	d100      	bne.n	801835a <_dtoa_r+0x3e2>
 8018358:	e0bd      	b.n	80184d6 <_dtoa_r+0x55e>
 801835a:	2200      	movs	r2, #0
 801835c:	0030      	movs	r0, r6
 801835e:	0039      	movs	r1, r7
 8018360:	4bcb      	ldr	r3, [pc, #812]	@ (8018690 <_dtoa_r+0x718>)
 8018362:	f7e8 f879 	bl	8000458 <__aeabi_dcmplt>
 8018366:	2800      	cmp	r0, #0
 8018368:	d100      	bne.n	801836c <_dtoa_r+0x3f4>
 801836a:	e0b4      	b.n	80184d6 <_dtoa_r+0x55e>
 801836c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801836e:	2b00      	cmp	r3, #0
 8018370:	d100      	bne.n	8018374 <_dtoa_r+0x3fc>
 8018372:	e0b0      	b.n	80184d6 <_dtoa_r+0x55e>
 8018374:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018376:	2b00      	cmp	r3, #0
 8018378:	dd39      	ble.n	80183ee <_dtoa_r+0x476>
 801837a:	9b04      	ldr	r3, [sp, #16]
 801837c:	2200      	movs	r2, #0
 801837e:	3b01      	subs	r3, #1
 8018380:	930c      	str	r3, [sp, #48]	@ 0x30
 8018382:	0030      	movs	r0, r6
 8018384:	4bc3      	ldr	r3, [pc, #780]	@ (8018694 <_dtoa_r+0x71c>)
 8018386:	0039      	movs	r1, r7
 8018388:	f7ea f8d6 	bl	8002538 <__aeabi_dmul>
 801838c:	900a      	str	r0, [sp, #40]	@ 0x28
 801838e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018390:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018392:	3401      	adds	r4, #1
 8018394:	0020      	movs	r0, r4
 8018396:	9311      	str	r3, [sp, #68]	@ 0x44
 8018398:	f7ea ff90 	bl	80032bc <__aeabi_i2d>
 801839c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801839e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80183a0:	f7ea f8ca 	bl	8002538 <__aeabi_dmul>
 80183a4:	4bbc      	ldr	r3, [pc, #752]	@ (8018698 <_dtoa_r+0x720>)
 80183a6:	2200      	movs	r2, #0
 80183a8:	f7e9 f91e 	bl	80015e8 <__aeabi_dadd>
 80183ac:	4bbb      	ldr	r3, [pc, #748]	@ (801869c <_dtoa_r+0x724>)
 80183ae:	0006      	movs	r6, r0
 80183b0:	18cf      	adds	r7, r1, r3
 80183b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d000      	beq.n	80183ba <_dtoa_r+0x442>
 80183b8:	e091      	b.n	80184de <_dtoa_r+0x566>
 80183ba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80183bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80183be:	2200      	movs	r2, #0
 80183c0:	4bb7      	ldr	r3, [pc, #732]	@ (80186a0 <_dtoa_r+0x728>)
 80183c2:	f7ea fb81 	bl	8002ac8 <__aeabi_dsub>
 80183c6:	0032      	movs	r2, r6
 80183c8:	003b      	movs	r3, r7
 80183ca:	0004      	movs	r4, r0
 80183cc:	000d      	movs	r5, r1
 80183ce:	f7e8 f857 	bl	8000480 <__aeabi_dcmpgt>
 80183d2:	2800      	cmp	r0, #0
 80183d4:	d000      	beq.n	80183d8 <_dtoa_r+0x460>
 80183d6:	e29d      	b.n	8018914 <_dtoa_r+0x99c>
 80183d8:	2180      	movs	r1, #128	@ 0x80
 80183da:	0609      	lsls	r1, r1, #24
 80183dc:	187b      	adds	r3, r7, r1
 80183de:	0032      	movs	r2, r6
 80183e0:	0020      	movs	r0, r4
 80183e2:	0029      	movs	r1, r5
 80183e4:	f7e8 f838 	bl	8000458 <__aeabi_dcmplt>
 80183e8:	2800      	cmp	r0, #0
 80183ea:	d000      	beq.n	80183ee <_dtoa_r+0x476>
 80183ec:	e130      	b.n	8018650 <_dtoa_r+0x6d8>
 80183ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80183f0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80183f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80183f4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80183f6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	da00      	bge.n	80183fe <_dtoa_r+0x486>
 80183fc:	e177      	b.n	80186ee <_dtoa_r+0x776>
 80183fe:	9a04      	ldr	r2, [sp, #16]
 8018400:	2a0e      	cmp	r2, #14
 8018402:	dd00      	ble.n	8018406 <_dtoa_r+0x48e>
 8018404:	e173      	b.n	80186ee <_dtoa_r+0x776>
 8018406:	4ba0      	ldr	r3, [pc, #640]	@ (8018688 <_dtoa_r+0x710>)
 8018408:	00d2      	lsls	r2, r2, #3
 801840a:	189b      	adds	r3, r3, r2
 801840c:	685c      	ldr	r4, [r3, #4]
 801840e:	681b      	ldr	r3, [r3, #0]
 8018410:	9306      	str	r3, [sp, #24]
 8018412:	9407      	str	r4, [sp, #28]
 8018414:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018416:	2b00      	cmp	r3, #0
 8018418:	da03      	bge.n	8018422 <_dtoa_r+0x4aa>
 801841a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801841c:	2b00      	cmp	r3, #0
 801841e:	dc00      	bgt.n	8018422 <_dtoa_r+0x4aa>
 8018420:	e106      	b.n	8018630 <_dtoa_r+0x6b8>
 8018422:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8018424:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018428:	9d08      	ldr	r5, [sp, #32]
 801842a:	3b01      	subs	r3, #1
 801842c:	195b      	adds	r3, r3, r5
 801842e:	930a      	str	r3, [sp, #40]	@ 0x28
 8018430:	9a06      	ldr	r2, [sp, #24]
 8018432:	9b07      	ldr	r3, [sp, #28]
 8018434:	0030      	movs	r0, r6
 8018436:	0039      	movs	r1, r7
 8018438:	f7e9 fc3a 	bl	8001cb0 <__aeabi_ddiv>
 801843c:	f7ea ff02 	bl	8003244 <__aeabi_d2iz>
 8018440:	9009      	str	r0, [sp, #36]	@ 0x24
 8018442:	f7ea ff3b 	bl	80032bc <__aeabi_i2d>
 8018446:	9a06      	ldr	r2, [sp, #24]
 8018448:	9b07      	ldr	r3, [sp, #28]
 801844a:	f7ea f875 	bl	8002538 <__aeabi_dmul>
 801844e:	0002      	movs	r2, r0
 8018450:	000b      	movs	r3, r1
 8018452:	0030      	movs	r0, r6
 8018454:	0039      	movs	r1, r7
 8018456:	f7ea fb37 	bl	8002ac8 <__aeabi_dsub>
 801845a:	002b      	movs	r3, r5
 801845c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801845e:	3501      	adds	r5, #1
 8018460:	3230      	adds	r2, #48	@ 0x30
 8018462:	701a      	strb	r2, [r3, #0]
 8018464:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018466:	002c      	movs	r4, r5
 8018468:	429a      	cmp	r2, r3
 801846a:	d000      	beq.n	801846e <_dtoa_r+0x4f6>
 801846c:	e131      	b.n	80186d2 <_dtoa_r+0x75a>
 801846e:	0002      	movs	r2, r0
 8018470:	000b      	movs	r3, r1
 8018472:	f7e9 f8b9 	bl	80015e8 <__aeabi_dadd>
 8018476:	9a06      	ldr	r2, [sp, #24]
 8018478:	9b07      	ldr	r3, [sp, #28]
 801847a:	0006      	movs	r6, r0
 801847c:	000f      	movs	r7, r1
 801847e:	f7e7 ffff 	bl	8000480 <__aeabi_dcmpgt>
 8018482:	2800      	cmp	r0, #0
 8018484:	d000      	beq.n	8018488 <_dtoa_r+0x510>
 8018486:	e10f      	b.n	80186a8 <_dtoa_r+0x730>
 8018488:	9a06      	ldr	r2, [sp, #24]
 801848a:	9b07      	ldr	r3, [sp, #28]
 801848c:	0030      	movs	r0, r6
 801848e:	0039      	movs	r1, r7
 8018490:	f7e7 ffdc 	bl	800044c <__aeabi_dcmpeq>
 8018494:	2800      	cmp	r0, #0
 8018496:	d003      	beq.n	80184a0 <_dtoa_r+0x528>
 8018498:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801849a:	07dd      	lsls	r5, r3, #31
 801849c:	d500      	bpl.n	80184a0 <_dtoa_r+0x528>
 801849e:	e103      	b.n	80186a8 <_dtoa_r+0x730>
 80184a0:	9905      	ldr	r1, [sp, #20]
 80184a2:	9803      	ldr	r0, [sp, #12]
 80184a4:	f000 fca6 	bl	8018df4 <_Bfree>
 80184a8:	2300      	movs	r3, #0
 80184aa:	7023      	strb	r3, [r4, #0]
 80184ac:	9b04      	ldr	r3, [sp, #16]
 80184ae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80184b0:	3301      	adds	r3, #1
 80184b2:	6013      	str	r3, [r2, #0]
 80184b4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d100      	bne.n	80184bc <_dtoa_r+0x544>
 80184ba:	e5a7      	b.n	801800c <_dtoa_r+0x94>
 80184bc:	601c      	str	r4, [r3, #0]
 80184be:	e5a5      	b.n	801800c <_dtoa_r+0x94>
 80184c0:	423d      	tst	r5, r7
 80184c2:	d005      	beq.n	80184d0 <_dtoa_r+0x558>
 80184c4:	6832      	ldr	r2, [r6, #0]
 80184c6:	6873      	ldr	r3, [r6, #4]
 80184c8:	f7ea f836 	bl	8002538 <__aeabi_dmul>
 80184cc:	003b      	movs	r3, r7
 80184ce:	3401      	adds	r4, #1
 80184d0:	106d      	asrs	r5, r5, #1
 80184d2:	3608      	adds	r6, #8
 80184d4:	e736      	b.n	8018344 <_dtoa_r+0x3cc>
 80184d6:	9b04      	ldr	r3, [sp, #16]
 80184d8:	930c      	str	r3, [sp, #48]	@ 0x30
 80184da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80184dc:	e75a      	b.n	8018394 <_dtoa_r+0x41c>
 80184de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80184e0:	4b69      	ldr	r3, [pc, #420]	@ (8018688 <_dtoa_r+0x710>)
 80184e2:	3a01      	subs	r2, #1
 80184e4:	00d2      	lsls	r2, r2, #3
 80184e6:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80184e8:	189b      	adds	r3, r3, r2
 80184ea:	681a      	ldr	r2, [r3, #0]
 80184ec:	685b      	ldr	r3, [r3, #4]
 80184ee:	2900      	cmp	r1, #0
 80184f0:	d04c      	beq.n	801858c <_dtoa_r+0x614>
 80184f2:	2000      	movs	r0, #0
 80184f4:	496b      	ldr	r1, [pc, #428]	@ (80186a4 <_dtoa_r+0x72c>)
 80184f6:	f7e9 fbdb 	bl	8001cb0 <__aeabi_ddiv>
 80184fa:	0032      	movs	r2, r6
 80184fc:	003b      	movs	r3, r7
 80184fe:	f7ea fae3 	bl	8002ac8 <__aeabi_dsub>
 8018502:	9a08      	ldr	r2, [sp, #32]
 8018504:	0006      	movs	r6, r0
 8018506:	4694      	mov	ip, r2
 8018508:	000f      	movs	r7, r1
 801850a:	9b08      	ldr	r3, [sp, #32]
 801850c:	9316      	str	r3, [sp, #88]	@ 0x58
 801850e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018510:	4463      	add	r3, ip
 8018512:	9311      	str	r3, [sp, #68]	@ 0x44
 8018514:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018516:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018518:	f7ea fe94 	bl	8003244 <__aeabi_d2iz>
 801851c:	0005      	movs	r5, r0
 801851e:	f7ea fecd 	bl	80032bc <__aeabi_i2d>
 8018522:	0002      	movs	r2, r0
 8018524:	000b      	movs	r3, r1
 8018526:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018528:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801852a:	f7ea facd 	bl	8002ac8 <__aeabi_dsub>
 801852e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8018530:	3530      	adds	r5, #48	@ 0x30
 8018532:	1c5c      	adds	r4, r3, #1
 8018534:	701d      	strb	r5, [r3, #0]
 8018536:	0032      	movs	r2, r6
 8018538:	003b      	movs	r3, r7
 801853a:	900a      	str	r0, [sp, #40]	@ 0x28
 801853c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801853e:	f7e7 ff8b 	bl	8000458 <__aeabi_dcmplt>
 8018542:	2800      	cmp	r0, #0
 8018544:	d16a      	bne.n	801861c <_dtoa_r+0x6a4>
 8018546:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018548:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801854a:	2000      	movs	r0, #0
 801854c:	4950      	ldr	r1, [pc, #320]	@ (8018690 <_dtoa_r+0x718>)
 801854e:	f7ea fabb 	bl	8002ac8 <__aeabi_dsub>
 8018552:	0032      	movs	r2, r6
 8018554:	003b      	movs	r3, r7
 8018556:	f7e7 ff7f 	bl	8000458 <__aeabi_dcmplt>
 801855a:	2800      	cmp	r0, #0
 801855c:	d000      	beq.n	8018560 <_dtoa_r+0x5e8>
 801855e:	e0a5      	b.n	80186ac <_dtoa_r+0x734>
 8018560:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018562:	42a3      	cmp	r3, r4
 8018564:	d100      	bne.n	8018568 <_dtoa_r+0x5f0>
 8018566:	e742      	b.n	80183ee <_dtoa_r+0x476>
 8018568:	2200      	movs	r2, #0
 801856a:	0030      	movs	r0, r6
 801856c:	0039      	movs	r1, r7
 801856e:	4b49      	ldr	r3, [pc, #292]	@ (8018694 <_dtoa_r+0x71c>)
 8018570:	f7e9 ffe2 	bl	8002538 <__aeabi_dmul>
 8018574:	2200      	movs	r2, #0
 8018576:	0006      	movs	r6, r0
 8018578:	000f      	movs	r7, r1
 801857a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801857c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801857e:	4b45      	ldr	r3, [pc, #276]	@ (8018694 <_dtoa_r+0x71c>)
 8018580:	f7e9 ffda 	bl	8002538 <__aeabi_dmul>
 8018584:	9416      	str	r4, [sp, #88]	@ 0x58
 8018586:	900a      	str	r0, [sp, #40]	@ 0x28
 8018588:	910b      	str	r1, [sp, #44]	@ 0x2c
 801858a:	e7c3      	b.n	8018514 <_dtoa_r+0x59c>
 801858c:	0030      	movs	r0, r6
 801858e:	0039      	movs	r1, r7
 8018590:	f7e9 ffd2 	bl	8002538 <__aeabi_dmul>
 8018594:	9d08      	ldr	r5, [sp, #32]
 8018596:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018598:	002b      	movs	r3, r5
 801859a:	4694      	mov	ip, r2
 801859c:	9016      	str	r0, [sp, #88]	@ 0x58
 801859e:	9117      	str	r1, [sp, #92]	@ 0x5c
 80185a0:	4463      	add	r3, ip
 80185a2:	9319      	str	r3, [sp, #100]	@ 0x64
 80185a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80185a6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80185a8:	f7ea fe4c 	bl	8003244 <__aeabi_d2iz>
 80185ac:	0004      	movs	r4, r0
 80185ae:	f7ea fe85 	bl	80032bc <__aeabi_i2d>
 80185b2:	000b      	movs	r3, r1
 80185b4:	0002      	movs	r2, r0
 80185b6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80185b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80185ba:	f7ea fa85 	bl	8002ac8 <__aeabi_dsub>
 80185be:	3430      	adds	r4, #48	@ 0x30
 80185c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80185c2:	702c      	strb	r4, [r5, #0]
 80185c4:	3501      	adds	r5, #1
 80185c6:	0006      	movs	r6, r0
 80185c8:	000f      	movs	r7, r1
 80185ca:	42ab      	cmp	r3, r5
 80185cc:	d129      	bne.n	8018622 <_dtoa_r+0x6aa>
 80185ce:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80185d0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80185d2:	9b08      	ldr	r3, [sp, #32]
 80185d4:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80185d6:	469c      	mov	ip, r3
 80185d8:	2200      	movs	r2, #0
 80185da:	4b32      	ldr	r3, [pc, #200]	@ (80186a4 <_dtoa_r+0x72c>)
 80185dc:	4464      	add	r4, ip
 80185de:	f7e9 f803 	bl	80015e8 <__aeabi_dadd>
 80185e2:	0002      	movs	r2, r0
 80185e4:	000b      	movs	r3, r1
 80185e6:	0030      	movs	r0, r6
 80185e8:	0039      	movs	r1, r7
 80185ea:	f7e7 ff49 	bl	8000480 <__aeabi_dcmpgt>
 80185ee:	2800      	cmp	r0, #0
 80185f0:	d15c      	bne.n	80186ac <_dtoa_r+0x734>
 80185f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80185f4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80185f6:	2000      	movs	r0, #0
 80185f8:	492a      	ldr	r1, [pc, #168]	@ (80186a4 <_dtoa_r+0x72c>)
 80185fa:	f7ea fa65 	bl	8002ac8 <__aeabi_dsub>
 80185fe:	0002      	movs	r2, r0
 8018600:	000b      	movs	r3, r1
 8018602:	0030      	movs	r0, r6
 8018604:	0039      	movs	r1, r7
 8018606:	f7e7 ff27 	bl	8000458 <__aeabi_dcmplt>
 801860a:	2800      	cmp	r0, #0
 801860c:	d100      	bne.n	8018610 <_dtoa_r+0x698>
 801860e:	e6ee      	b.n	80183ee <_dtoa_r+0x476>
 8018610:	0023      	movs	r3, r4
 8018612:	3c01      	subs	r4, #1
 8018614:	7822      	ldrb	r2, [r4, #0]
 8018616:	2a30      	cmp	r2, #48	@ 0x30
 8018618:	d0fa      	beq.n	8018610 <_dtoa_r+0x698>
 801861a:	001c      	movs	r4, r3
 801861c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801861e:	9304      	str	r3, [sp, #16]
 8018620:	e73e      	b.n	80184a0 <_dtoa_r+0x528>
 8018622:	2200      	movs	r2, #0
 8018624:	4b1b      	ldr	r3, [pc, #108]	@ (8018694 <_dtoa_r+0x71c>)
 8018626:	f7e9 ff87 	bl	8002538 <__aeabi_dmul>
 801862a:	900a      	str	r0, [sp, #40]	@ 0x28
 801862c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801862e:	e7b9      	b.n	80185a4 <_dtoa_r+0x62c>
 8018630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018632:	2b00      	cmp	r3, #0
 8018634:	d10c      	bne.n	8018650 <_dtoa_r+0x6d8>
 8018636:	9806      	ldr	r0, [sp, #24]
 8018638:	9907      	ldr	r1, [sp, #28]
 801863a:	2200      	movs	r2, #0
 801863c:	4b18      	ldr	r3, [pc, #96]	@ (80186a0 <_dtoa_r+0x728>)
 801863e:	f7e9 ff7b 	bl	8002538 <__aeabi_dmul>
 8018642:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018644:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018646:	f7e7 ff25 	bl	8000494 <__aeabi_dcmpge>
 801864a:	2800      	cmp	r0, #0
 801864c:	d100      	bne.n	8018650 <_dtoa_r+0x6d8>
 801864e:	e164      	b.n	801891a <_dtoa_r+0x9a2>
 8018650:	2600      	movs	r6, #0
 8018652:	0037      	movs	r7, r6
 8018654:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018656:	9c08      	ldr	r4, [sp, #32]
 8018658:	43db      	mvns	r3, r3
 801865a:	930c      	str	r3, [sp, #48]	@ 0x30
 801865c:	2300      	movs	r3, #0
 801865e:	9304      	str	r3, [sp, #16]
 8018660:	0031      	movs	r1, r6
 8018662:	9803      	ldr	r0, [sp, #12]
 8018664:	f000 fbc6 	bl	8018df4 <_Bfree>
 8018668:	2f00      	cmp	r7, #0
 801866a:	d0d7      	beq.n	801861c <_dtoa_r+0x6a4>
 801866c:	9b04      	ldr	r3, [sp, #16]
 801866e:	2b00      	cmp	r3, #0
 8018670:	d005      	beq.n	801867e <_dtoa_r+0x706>
 8018672:	42bb      	cmp	r3, r7
 8018674:	d003      	beq.n	801867e <_dtoa_r+0x706>
 8018676:	0019      	movs	r1, r3
 8018678:	9803      	ldr	r0, [sp, #12]
 801867a:	f000 fbbb 	bl	8018df4 <_Bfree>
 801867e:	0039      	movs	r1, r7
 8018680:	9803      	ldr	r0, [sp, #12]
 8018682:	f000 fbb7 	bl	8018df4 <_Bfree>
 8018686:	e7c9      	b.n	801861c <_dtoa_r+0x6a4>
 8018688:	0801bac0 	.word	0x0801bac0
 801868c:	0801ba98 	.word	0x0801ba98
 8018690:	3ff00000 	.word	0x3ff00000
 8018694:	40240000 	.word	0x40240000
 8018698:	401c0000 	.word	0x401c0000
 801869c:	fcc00000 	.word	0xfcc00000
 80186a0:	40140000 	.word	0x40140000
 80186a4:	3fe00000 	.word	0x3fe00000
 80186a8:	9b04      	ldr	r3, [sp, #16]
 80186aa:	930c      	str	r3, [sp, #48]	@ 0x30
 80186ac:	0023      	movs	r3, r4
 80186ae:	001c      	movs	r4, r3
 80186b0:	3b01      	subs	r3, #1
 80186b2:	781a      	ldrb	r2, [r3, #0]
 80186b4:	2a39      	cmp	r2, #57	@ 0x39
 80186b6:	d108      	bne.n	80186ca <_dtoa_r+0x752>
 80186b8:	9a08      	ldr	r2, [sp, #32]
 80186ba:	429a      	cmp	r2, r3
 80186bc:	d1f7      	bne.n	80186ae <_dtoa_r+0x736>
 80186be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80186c0:	9908      	ldr	r1, [sp, #32]
 80186c2:	3201      	adds	r2, #1
 80186c4:	920c      	str	r2, [sp, #48]	@ 0x30
 80186c6:	2230      	movs	r2, #48	@ 0x30
 80186c8:	700a      	strb	r2, [r1, #0]
 80186ca:	781a      	ldrb	r2, [r3, #0]
 80186cc:	3201      	adds	r2, #1
 80186ce:	701a      	strb	r2, [r3, #0]
 80186d0:	e7a4      	b.n	801861c <_dtoa_r+0x6a4>
 80186d2:	2200      	movs	r2, #0
 80186d4:	4bc6      	ldr	r3, [pc, #792]	@ (80189f0 <_dtoa_r+0xa78>)
 80186d6:	f7e9 ff2f 	bl	8002538 <__aeabi_dmul>
 80186da:	2200      	movs	r2, #0
 80186dc:	2300      	movs	r3, #0
 80186de:	0006      	movs	r6, r0
 80186e0:	000f      	movs	r7, r1
 80186e2:	f7e7 feb3 	bl	800044c <__aeabi_dcmpeq>
 80186e6:	2800      	cmp	r0, #0
 80186e8:	d100      	bne.n	80186ec <_dtoa_r+0x774>
 80186ea:	e6a1      	b.n	8018430 <_dtoa_r+0x4b8>
 80186ec:	e6d8      	b.n	80184a0 <_dtoa_r+0x528>
 80186ee:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80186f0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80186f2:	9c06      	ldr	r4, [sp, #24]
 80186f4:	2f00      	cmp	r7, #0
 80186f6:	d014      	beq.n	8018722 <_dtoa_r+0x7aa>
 80186f8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80186fa:	2a01      	cmp	r2, #1
 80186fc:	dd00      	ble.n	8018700 <_dtoa_r+0x788>
 80186fe:	e0c8      	b.n	8018892 <_dtoa_r+0x91a>
 8018700:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018702:	2a00      	cmp	r2, #0
 8018704:	d100      	bne.n	8018708 <_dtoa_r+0x790>
 8018706:	e0be      	b.n	8018886 <_dtoa_r+0x90e>
 8018708:	4aba      	ldr	r2, [pc, #744]	@ (80189f4 <_dtoa_r+0xa7c>)
 801870a:	189b      	adds	r3, r3, r2
 801870c:	9a06      	ldr	r2, [sp, #24]
 801870e:	2101      	movs	r1, #1
 8018710:	18d2      	adds	r2, r2, r3
 8018712:	9206      	str	r2, [sp, #24]
 8018714:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018716:	9803      	ldr	r0, [sp, #12]
 8018718:	18d3      	adds	r3, r2, r3
 801871a:	930d      	str	r3, [sp, #52]	@ 0x34
 801871c:	f000 fc22 	bl	8018f64 <__i2b>
 8018720:	0007      	movs	r7, r0
 8018722:	2c00      	cmp	r4, #0
 8018724:	d00e      	beq.n	8018744 <_dtoa_r+0x7cc>
 8018726:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018728:	2b00      	cmp	r3, #0
 801872a:	dd0b      	ble.n	8018744 <_dtoa_r+0x7cc>
 801872c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801872e:	0023      	movs	r3, r4
 8018730:	4294      	cmp	r4, r2
 8018732:	dd00      	ble.n	8018736 <_dtoa_r+0x7be>
 8018734:	0013      	movs	r3, r2
 8018736:	9a06      	ldr	r2, [sp, #24]
 8018738:	1ae4      	subs	r4, r4, r3
 801873a:	1ad2      	subs	r2, r2, r3
 801873c:	9206      	str	r2, [sp, #24]
 801873e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018740:	1ad3      	subs	r3, r2, r3
 8018742:	930d      	str	r3, [sp, #52]	@ 0x34
 8018744:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018746:	2b00      	cmp	r3, #0
 8018748:	d01f      	beq.n	801878a <_dtoa_r+0x812>
 801874a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801874c:	2b00      	cmp	r3, #0
 801874e:	d100      	bne.n	8018752 <_dtoa_r+0x7da>
 8018750:	e0b5      	b.n	80188be <_dtoa_r+0x946>
 8018752:	2d00      	cmp	r5, #0
 8018754:	d010      	beq.n	8018778 <_dtoa_r+0x800>
 8018756:	0039      	movs	r1, r7
 8018758:	002a      	movs	r2, r5
 801875a:	9803      	ldr	r0, [sp, #12]
 801875c:	f000 fccc 	bl	80190f8 <__pow5mult>
 8018760:	9a05      	ldr	r2, [sp, #20]
 8018762:	0001      	movs	r1, r0
 8018764:	0007      	movs	r7, r0
 8018766:	9803      	ldr	r0, [sp, #12]
 8018768:	f000 fc14 	bl	8018f94 <__multiply>
 801876c:	0006      	movs	r6, r0
 801876e:	9905      	ldr	r1, [sp, #20]
 8018770:	9803      	ldr	r0, [sp, #12]
 8018772:	f000 fb3f 	bl	8018df4 <_Bfree>
 8018776:	9605      	str	r6, [sp, #20]
 8018778:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801877a:	1b5a      	subs	r2, r3, r5
 801877c:	42ab      	cmp	r3, r5
 801877e:	d004      	beq.n	801878a <_dtoa_r+0x812>
 8018780:	9905      	ldr	r1, [sp, #20]
 8018782:	9803      	ldr	r0, [sp, #12]
 8018784:	f000 fcb8 	bl	80190f8 <__pow5mult>
 8018788:	9005      	str	r0, [sp, #20]
 801878a:	2101      	movs	r1, #1
 801878c:	9803      	ldr	r0, [sp, #12]
 801878e:	f000 fbe9 	bl	8018f64 <__i2b>
 8018792:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018794:	0006      	movs	r6, r0
 8018796:	2b00      	cmp	r3, #0
 8018798:	d100      	bne.n	801879c <_dtoa_r+0x824>
 801879a:	e1bc      	b.n	8018b16 <_dtoa_r+0xb9e>
 801879c:	001a      	movs	r2, r3
 801879e:	0001      	movs	r1, r0
 80187a0:	9803      	ldr	r0, [sp, #12]
 80187a2:	f000 fca9 	bl	80190f8 <__pow5mult>
 80187a6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80187a8:	0006      	movs	r6, r0
 80187aa:	2500      	movs	r5, #0
 80187ac:	2b01      	cmp	r3, #1
 80187ae:	dc16      	bgt.n	80187de <_dtoa_r+0x866>
 80187b0:	2500      	movs	r5, #0
 80187b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80187b4:	42ab      	cmp	r3, r5
 80187b6:	d10e      	bne.n	80187d6 <_dtoa_r+0x85e>
 80187b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80187ba:	031b      	lsls	r3, r3, #12
 80187bc:	42ab      	cmp	r3, r5
 80187be:	d10a      	bne.n	80187d6 <_dtoa_r+0x85e>
 80187c0:	4b8d      	ldr	r3, [pc, #564]	@ (80189f8 <_dtoa_r+0xa80>)
 80187c2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80187c4:	4213      	tst	r3, r2
 80187c6:	d006      	beq.n	80187d6 <_dtoa_r+0x85e>
 80187c8:	9b06      	ldr	r3, [sp, #24]
 80187ca:	3501      	adds	r5, #1
 80187cc:	3301      	adds	r3, #1
 80187ce:	9306      	str	r3, [sp, #24]
 80187d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80187d2:	3301      	adds	r3, #1
 80187d4:	930d      	str	r3, [sp, #52]	@ 0x34
 80187d6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80187d8:	2001      	movs	r0, #1
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d008      	beq.n	80187f0 <_dtoa_r+0x878>
 80187de:	6933      	ldr	r3, [r6, #16]
 80187e0:	3303      	adds	r3, #3
 80187e2:	009b      	lsls	r3, r3, #2
 80187e4:	18f3      	adds	r3, r6, r3
 80187e6:	6858      	ldr	r0, [r3, #4]
 80187e8:	f000 fb6c 	bl	8018ec4 <__hi0bits>
 80187ec:	2320      	movs	r3, #32
 80187ee:	1a18      	subs	r0, r3, r0
 80187f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80187f2:	1818      	adds	r0, r3, r0
 80187f4:	0002      	movs	r2, r0
 80187f6:	231f      	movs	r3, #31
 80187f8:	401a      	ands	r2, r3
 80187fa:	4218      	tst	r0, r3
 80187fc:	d065      	beq.n	80188ca <_dtoa_r+0x952>
 80187fe:	3301      	adds	r3, #1
 8018800:	1a9b      	subs	r3, r3, r2
 8018802:	2b04      	cmp	r3, #4
 8018804:	dd5d      	ble.n	80188c2 <_dtoa_r+0x94a>
 8018806:	231c      	movs	r3, #28
 8018808:	1a9b      	subs	r3, r3, r2
 801880a:	9a06      	ldr	r2, [sp, #24]
 801880c:	18e4      	adds	r4, r4, r3
 801880e:	18d2      	adds	r2, r2, r3
 8018810:	9206      	str	r2, [sp, #24]
 8018812:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018814:	18d3      	adds	r3, r2, r3
 8018816:	930d      	str	r3, [sp, #52]	@ 0x34
 8018818:	9b06      	ldr	r3, [sp, #24]
 801881a:	2b00      	cmp	r3, #0
 801881c:	dd05      	ble.n	801882a <_dtoa_r+0x8b2>
 801881e:	001a      	movs	r2, r3
 8018820:	9905      	ldr	r1, [sp, #20]
 8018822:	9803      	ldr	r0, [sp, #12]
 8018824:	f000 fcc4 	bl	80191b0 <__lshift>
 8018828:	9005      	str	r0, [sp, #20]
 801882a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801882c:	2b00      	cmp	r3, #0
 801882e:	dd05      	ble.n	801883c <_dtoa_r+0x8c4>
 8018830:	0031      	movs	r1, r6
 8018832:	001a      	movs	r2, r3
 8018834:	9803      	ldr	r0, [sp, #12]
 8018836:	f000 fcbb 	bl	80191b0 <__lshift>
 801883a:	0006      	movs	r6, r0
 801883c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801883e:	2b00      	cmp	r3, #0
 8018840:	d045      	beq.n	80188ce <_dtoa_r+0x956>
 8018842:	0031      	movs	r1, r6
 8018844:	9805      	ldr	r0, [sp, #20]
 8018846:	f000 fd1f 	bl	8019288 <__mcmp>
 801884a:	2800      	cmp	r0, #0
 801884c:	da3f      	bge.n	80188ce <_dtoa_r+0x956>
 801884e:	9b04      	ldr	r3, [sp, #16]
 8018850:	220a      	movs	r2, #10
 8018852:	3b01      	subs	r3, #1
 8018854:	930c      	str	r3, [sp, #48]	@ 0x30
 8018856:	9905      	ldr	r1, [sp, #20]
 8018858:	2300      	movs	r3, #0
 801885a:	9803      	ldr	r0, [sp, #12]
 801885c:	f000 faee 	bl	8018e3c <__multadd>
 8018860:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018862:	9005      	str	r0, [sp, #20]
 8018864:	2b00      	cmp	r3, #0
 8018866:	d100      	bne.n	801886a <_dtoa_r+0x8f2>
 8018868:	e15c      	b.n	8018b24 <_dtoa_r+0xbac>
 801886a:	2300      	movs	r3, #0
 801886c:	0039      	movs	r1, r7
 801886e:	220a      	movs	r2, #10
 8018870:	9803      	ldr	r0, [sp, #12]
 8018872:	f000 fae3 	bl	8018e3c <__multadd>
 8018876:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018878:	0007      	movs	r7, r0
 801887a:	2b00      	cmp	r3, #0
 801887c:	dc55      	bgt.n	801892a <_dtoa_r+0x9b2>
 801887e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018880:	2b02      	cmp	r3, #2
 8018882:	dc2d      	bgt.n	80188e0 <_dtoa_r+0x968>
 8018884:	e051      	b.n	801892a <_dtoa_r+0x9b2>
 8018886:	2336      	movs	r3, #54	@ 0x36
 8018888:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801888a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801888c:	9c06      	ldr	r4, [sp, #24]
 801888e:	1a9b      	subs	r3, r3, r2
 8018890:	e73c      	b.n	801870c <_dtoa_r+0x794>
 8018892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018894:	1e5d      	subs	r5, r3, #1
 8018896:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018898:	42ab      	cmp	r3, r5
 801889a:	db08      	blt.n	80188ae <_dtoa_r+0x936>
 801889c:	1b5d      	subs	r5, r3, r5
 801889e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80188a0:	9c06      	ldr	r4, [sp, #24]
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	db00      	blt.n	80188a8 <_dtoa_r+0x930>
 80188a6:	e731      	b.n	801870c <_dtoa_r+0x794>
 80188a8:	1ae4      	subs	r4, r4, r3
 80188aa:	2300      	movs	r3, #0
 80188ac:	e72e      	b.n	801870c <_dtoa_r+0x794>
 80188ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80188b0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80188b2:	1aeb      	subs	r3, r5, r3
 80188b4:	18d3      	adds	r3, r2, r3
 80188b6:	950f      	str	r5, [sp, #60]	@ 0x3c
 80188b8:	9314      	str	r3, [sp, #80]	@ 0x50
 80188ba:	2500      	movs	r5, #0
 80188bc:	e7ef      	b.n	801889e <_dtoa_r+0x926>
 80188be:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80188c0:	e75e      	b.n	8018780 <_dtoa_r+0x808>
 80188c2:	2b04      	cmp	r3, #4
 80188c4:	d0a8      	beq.n	8018818 <_dtoa_r+0x8a0>
 80188c6:	331c      	adds	r3, #28
 80188c8:	e79f      	b.n	801880a <_dtoa_r+0x892>
 80188ca:	0013      	movs	r3, r2
 80188cc:	e7fb      	b.n	80188c6 <_dtoa_r+0x94e>
 80188ce:	9b04      	ldr	r3, [sp, #16]
 80188d0:	930c      	str	r3, [sp, #48]	@ 0x30
 80188d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80188d4:	930e      	str	r3, [sp, #56]	@ 0x38
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	dc23      	bgt.n	8018922 <_dtoa_r+0x9aa>
 80188da:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80188dc:	2b02      	cmp	r3, #2
 80188de:	dd20      	ble.n	8018922 <_dtoa_r+0x9aa>
 80188e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d000      	beq.n	80188e8 <_dtoa_r+0x970>
 80188e6:	e6b5      	b.n	8018654 <_dtoa_r+0x6dc>
 80188e8:	0031      	movs	r1, r6
 80188ea:	2205      	movs	r2, #5
 80188ec:	9803      	ldr	r0, [sp, #12]
 80188ee:	f000 faa5 	bl	8018e3c <__multadd>
 80188f2:	0006      	movs	r6, r0
 80188f4:	0001      	movs	r1, r0
 80188f6:	9805      	ldr	r0, [sp, #20]
 80188f8:	f000 fcc6 	bl	8019288 <__mcmp>
 80188fc:	2800      	cmp	r0, #0
 80188fe:	dc00      	bgt.n	8018902 <_dtoa_r+0x98a>
 8018900:	e6a8      	b.n	8018654 <_dtoa_r+0x6dc>
 8018902:	9b08      	ldr	r3, [sp, #32]
 8018904:	9a08      	ldr	r2, [sp, #32]
 8018906:	1c5c      	adds	r4, r3, #1
 8018908:	2331      	movs	r3, #49	@ 0x31
 801890a:	7013      	strb	r3, [r2, #0]
 801890c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801890e:	3301      	adds	r3, #1
 8018910:	930c      	str	r3, [sp, #48]	@ 0x30
 8018912:	e6a3      	b.n	801865c <_dtoa_r+0x6e4>
 8018914:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8018916:	0037      	movs	r7, r6
 8018918:	e7f3      	b.n	8018902 <_dtoa_r+0x98a>
 801891a:	9b04      	ldr	r3, [sp, #16]
 801891c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801891e:	930c      	str	r3, [sp, #48]	@ 0x30
 8018920:	e7f9      	b.n	8018916 <_dtoa_r+0x99e>
 8018922:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018924:	2b00      	cmp	r3, #0
 8018926:	d100      	bne.n	801892a <_dtoa_r+0x9b2>
 8018928:	e100      	b.n	8018b2c <_dtoa_r+0xbb4>
 801892a:	2c00      	cmp	r4, #0
 801892c:	dd05      	ble.n	801893a <_dtoa_r+0x9c2>
 801892e:	0039      	movs	r1, r7
 8018930:	0022      	movs	r2, r4
 8018932:	9803      	ldr	r0, [sp, #12]
 8018934:	f000 fc3c 	bl	80191b0 <__lshift>
 8018938:	0007      	movs	r7, r0
 801893a:	0038      	movs	r0, r7
 801893c:	2d00      	cmp	r5, #0
 801893e:	d018      	beq.n	8018972 <_dtoa_r+0x9fa>
 8018940:	6879      	ldr	r1, [r7, #4]
 8018942:	9803      	ldr	r0, [sp, #12]
 8018944:	f000 fa12 	bl	8018d6c <_Balloc>
 8018948:	1e04      	subs	r4, r0, #0
 801894a:	d105      	bne.n	8018958 <_dtoa_r+0x9e0>
 801894c:	0022      	movs	r2, r4
 801894e:	4b2b      	ldr	r3, [pc, #172]	@ (80189fc <_dtoa_r+0xa84>)
 8018950:	482b      	ldr	r0, [pc, #172]	@ (8018a00 <_dtoa_r+0xa88>)
 8018952:	492c      	ldr	r1, [pc, #176]	@ (8018a04 <_dtoa_r+0xa8c>)
 8018954:	f7ff fb25 	bl	8017fa2 <_dtoa_r+0x2a>
 8018958:	0039      	movs	r1, r7
 801895a:	693a      	ldr	r2, [r7, #16]
 801895c:	310c      	adds	r1, #12
 801895e:	3202      	adds	r2, #2
 8018960:	0092      	lsls	r2, r2, #2
 8018962:	300c      	adds	r0, #12
 8018964:	f7ff fa70 	bl	8017e48 <memcpy>
 8018968:	2201      	movs	r2, #1
 801896a:	0021      	movs	r1, r4
 801896c:	9803      	ldr	r0, [sp, #12]
 801896e:	f000 fc1f 	bl	80191b0 <__lshift>
 8018972:	9b08      	ldr	r3, [sp, #32]
 8018974:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018976:	9306      	str	r3, [sp, #24]
 8018978:	3b01      	subs	r3, #1
 801897a:	189b      	adds	r3, r3, r2
 801897c:	2201      	movs	r2, #1
 801897e:	9704      	str	r7, [sp, #16]
 8018980:	0007      	movs	r7, r0
 8018982:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018986:	4013      	ands	r3, r2
 8018988:	930e      	str	r3, [sp, #56]	@ 0x38
 801898a:	0031      	movs	r1, r6
 801898c:	9805      	ldr	r0, [sp, #20]
 801898e:	f7ff fa64 	bl	8017e5a <quorem>
 8018992:	9904      	ldr	r1, [sp, #16]
 8018994:	0005      	movs	r5, r0
 8018996:	900a      	str	r0, [sp, #40]	@ 0x28
 8018998:	9805      	ldr	r0, [sp, #20]
 801899a:	f000 fc75 	bl	8019288 <__mcmp>
 801899e:	003a      	movs	r2, r7
 80189a0:	900d      	str	r0, [sp, #52]	@ 0x34
 80189a2:	0031      	movs	r1, r6
 80189a4:	9803      	ldr	r0, [sp, #12]
 80189a6:	f000 fc8b 	bl	80192c0 <__mdiff>
 80189aa:	2201      	movs	r2, #1
 80189ac:	68c3      	ldr	r3, [r0, #12]
 80189ae:	0004      	movs	r4, r0
 80189b0:	3530      	adds	r5, #48	@ 0x30
 80189b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d104      	bne.n	80189c2 <_dtoa_r+0xa4a>
 80189b8:	0001      	movs	r1, r0
 80189ba:	9805      	ldr	r0, [sp, #20]
 80189bc:	f000 fc64 	bl	8019288 <__mcmp>
 80189c0:	9009      	str	r0, [sp, #36]	@ 0x24
 80189c2:	0021      	movs	r1, r4
 80189c4:	9803      	ldr	r0, [sp, #12]
 80189c6:	f000 fa15 	bl	8018df4 <_Bfree>
 80189ca:	9b06      	ldr	r3, [sp, #24]
 80189cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80189ce:	1c5c      	adds	r4, r3, #1
 80189d0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80189d2:	4313      	orrs	r3, r2
 80189d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80189d6:	4313      	orrs	r3, r2
 80189d8:	d116      	bne.n	8018a08 <_dtoa_r+0xa90>
 80189da:	2d39      	cmp	r5, #57	@ 0x39
 80189dc:	d02f      	beq.n	8018a3e <_dtoa_r+0xac6>
 80189de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	dd01      	ble.n	80189e8 <_dtoa_r+0xa70>
 80189e4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80189e6:	3531      	adds	r5, #49	@ 0x31
 80189e8:	9b06      	ldr	r3, [sp, #24]
 80189ea:	701d      	strb	r5, [r3, #0]
 80189ec:	e638      	b.n	8018660 <_dtoa_r+0x6e8>
 80189ee:	46c0      	nop			@ (mov r8, r8)
 80189f0:	40240000 	.word	0x40240000
 80189f4:	00000433 	.word	0x00000433
 80189f8:	7ff00000 	.word	0x7ff00000
 80189fc:	0801ba1c 	.word	0x0801ba1c
 8018a00:	0801b9c4 	.word	0x0801b9c4
 8018a04:	000002ef 	.word	0x000002ef
 8018a08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	db04      	blt.n	8018a18 <_dtoa_r+0xaa0>
 8018a0e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8018a10:	4313      	orrs	r3, r2
 8018a12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018a14:	4313      	orrs	r3, r2
 8018a16:	d11e      	bne.n	8018a56 <_dtoa_r+0xade>
 8018a18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	dde4      	ble.n	80189e8 <_dtoa_r+0xa70>
 8018a1e:	9905      	ldr	r1, [sp, #20]
 8018a20:	2201      	movs	r2, #1
 8018a22:	9803      	ldr	r0, [sp, #12]
 8018a24:	f000 fbc4 	bl	80191b0 <__lshift>
 8018a28:	0031      	movs	r1, r6
 8018a2a:	9005      	str	r0, [sp, #20]
 8018a2c:	f000 fc2c 	bl	8019288 <__mcmp>
 8018a30:	2800      	cmp	r0, #0
 8018a32:	dc02      	bgt.n	8018a3a <_dtoa_r+0xac2>
 8018a34:	d1d8      	bne.n	80189e8 <_dtoa_r+0xa70>
 8018a36:	07eb      	lsls	r3, r5, #31
 8018a38:	d5d6      	bpl.n	80189e8 <_dtoa_r+0xa70>
 8018a3a:	2d39      	cmp	r5, #57	@ 0x39
 8018a3c:	d1d2      	bne.n	80189e4 <_dtoa_r+0xa6c>
 8018a3e:	2339      	movs	r3, #57	@ 0x39
 8018a40:	9a06      	ldr	r2, [sp, #24]
 8018a42:	7013      	strb	r3, [r2, #0]
 8018a44:	0023      	movs	r3, r4
 8018a46:	001c      	movs	r4, r3
 8018a48:	3b01      	subs	r3, #1
 8018a4a:	781a      	ldrb	r2, [r3, #0]
 8018a4c:	2a39      	cmp	r2, #57	@ 0x39
 8018a4e:	d04f      	beq.n	8018af0 <_dtoa_r+0xb78>
 8018a50:	3201      	adds	r2, #1
 8018a52:	701a      	strb	r2, [r3, #0]
 8018a54:	e604      	b.n	8018660 <_dtoa_r+0x6e8>
 8018a56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	dd03      	ble.n	8018a64 <_dtoa_r+0xaec>
 8018a5c:	2d39      	cmp	r5, #57	@ 0x39
 8018a5e:	d0ee      	beq.n	8018a3e <_dtoa_r+0xac6>
 8018a60:	3501      	adds	r5, #1
 8018a62:	e7c1      	b.n	80189e8 <_dtoa_r+0xa70>
 8018a64:	9b06      	ldr	r3, [sp, #24]
 8018a66:	9a06      	ldr	r2, [sp, #24]
 8018a68:	701d      	strb	r5, [r3, #0]
 8018a6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018a6c:	4293      	cmp	r3, r2
 8018a6e:	d02a      	beq.n	8018ac6 <_dtoa_r+0xb4e>
 8018a70:	2300      	movs	r3, #0
 8018a72:	220a      	movs	r2, #10
 8018a74:	9905      	ldr	r1, [sp, #20]
 8018a76:	9803      	ldr	r0, [sp, #12]
 8018a78:	f000 f9e0 	bl	8018e3c <__multadd>
 8018a7c:	9b04      	ldr	r3, [sp, #16]
 8018a7e:	9005      	str	r0, [sp, #20]
 8018a80:	42bb      	cmp	r3, r7
 8018a82:	d109      	bne.n	8018a98 <_dtoa_r+0xb20>
 8018a84:	2300      	movs	r3, #0
 8018a86:	220a      	movs	r2, #10
 8018a88:	9904      	ldr	r1, [sp, #16]
 8018a8a:	9803      	ldr	r0, [sp, #12]
 8018a8c:	f000 f9d6 	bl	8018e3c <__multadd>
 8018a90:	9004      	str	r0, [sp, #16]
 8018a92:	0007      	movs	r7, r0
 8018a94:	9406      	str	r4, [sp, #24]
 8018a96:	e778      	b.n	801898a <_dtoa_r+0xa12>
 8018a98:	9904      	ldr	r1, [sp, #16]
 8018a9a:	2300      	movs	r3, #0
 8018a9c:	220a      	movs	r2, #10
 8018a9e:	9803      	ldr	r0, [sp, #12]
 8018aa0:	f000 f9cc 	bl	8018e3c <__multadd>
 8018aa4:	2300      	movs	r3, #0
 8018aa6:	9004      	str	r0, [sp, #16]
 8018aa8:	220a      	movs	r2, #10
 8018aaa:	0039      	movs	r1, r7
 8018aac:	9803      	ldr	r0, [sp, #12]
 8018aae:	f000 f9c5 	bl	8018e3c <__multadd>
 8018ab2:	e7ee      	b.n	8018a92 <_dtoa_r+0xb1a>
 8018ab4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018ab6:	2401      	movs	r4, #1
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	dd00      	ble.n	8018abe <_dtoa_r+0xb46>
 8018abc:	001c      	movs	r4, r3
 8018abe:	9b08      	ldr	r3, [sp, #32]
 8018ac0:	191c      	adds	r4, r3, r4
 8018ac2:	2300      	movs	r3, #0
 8018ac4:	9304      	str	r3, [sp, #16]
 8018ac6:	9905      	ldr	r1, [sp, #20]
 8018ac8:	2201      	movs	r2, #1
 8018aca:	9803      	ldr	r0, [sp, #12]
 8018acc:	f000 fb70 	bl	80191b0 <__lshift>
 8018ad0:	0031      	movs	r1, r6
 8018ad2:	9005      	str	r0, [sp, #20]
 8018ad4:	f000 fbd8 	bl	8019288 <__mcmp>
 8018ad8:	2800      	cmp	r0, #0
 8018ada:	dcb3      	bgt.n	8018a44 <_dtoa_r+0xacc>
 8018adc:	d101      	bne.n	8018ae2 <_dtoa_r+0xb6a>
 8018ade:	07ed      	lsls	r5, r5, #31
 8018ae0:	d4b0      	bmi.n	8018a44 <_dtoa_r+0xacc>
 8018ae2:	0023      	movs	r3, r4
 8018ae4:	001c      	movs	r4, r3
 8018ae6:	3b01      	subs	r3, #1
 8018ae8:	781a      	ldrb	r2, [r3, #0]
 8018aea:	2a30      	cmp	r2, #48	@ 0x30
 8018aec:	d0fa      	beq.n	8018ae4 <_dtoa_r+0xb6c>
 8018aee:	e5b7      	b.n	8018660 <_dtoa_r+0x6e8>
 8018af0:	9a08      	ldr	r2, [sp, #32]
 8018af2:	429a      	cmp	r2, r3
 8018af4:	d1a7      	bne.n	8018a46 <_dtoa_r+0xace>
 8018af6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018af8:	3301      	adds	r3, #1
 8018afa:	930c      	str	r3, [sp, #48]	@ 0x30
 8018afc:	2331      	movs	r3, #49	@ 0x31
 8018afe:	7013      	strb	r3, [r2, #0]
 8018b00:	e5ae      	b.n	8018660 <_dtoa_r+0x6e8>
 8018b02:	4b15      	ldr	r3, [pc, #84]	@ (8018b58 <_dtoa_r+0xbe0>)
 8018b04:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8018b06:	9308      	str	r3, [sp, #32]
 8018b08:	4b14      	ldr	r3, [pc, #80]	@ (8018b5c <_dtoa_r+0xbe4>)
 8018b0a:	2a00      	cmp	r2, #0
 8018b0c:	d001      	beq.n	8018b12 <_dtoa_r+0xb9a>
 8018b0e:	f7ff fa7b 	bl	8018008 <_dtoa_r+0x90>
 8018b12:	f7ff fa7b 	bl	801800c <_dtoa_r+0x94>
 8018b16:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018b18:	2b01      	cmp	r3, #1
 8018b1a:	dc00      	bgt.n	8018b1e <_dtoa_r+0xba6>
 8018b1c:	e648      	b.n	80187b0 <_dtoa_r+0x838>
 8018b1e:	2001      	movs	r0, #1
 8018b20:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8018b22:	e665      	b.n	80187f0 <_dtoa_r+0x878>
 8018b24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	dc00      	bgt.n	8018b2c <_dtoa_r+0xbb4>
 8018b2a:	e6d6      	b.n	80188da <_dtoa_r+0x962>
 8018b2c:	2400      	movs	r4, #0
 8018b2e:	0031      	movs	r1, r6
 8018b30:	9805      	ldr	r0, [sp, #20]
 8018b32:	f7ff f992 	bl	8017e5a <quorem>
 8018b36:	9b08      	ldr	r3, [sp, #32]
 8018b38:	3030      	adds	r0, #48	@ 0x30
 8018b3a:	5518      	strb	r0, [r3, r4]
 8018b3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018b3e:	3401      	adds	r4, #1
 8018b40:	0005      	movs	r5, r0
 8018b42:	429c      	cmp	r4, r3
 8018b44:	dab6      	bge.n	8018ab4 <_dtoa_r+0xb3c>
 8018b46:	2300      	movs	r3, #0
 8018b48:	220a      	movs	r2, #10
 8018b4a:	9905      	ldr	r1, [sp, #20]
 8018b4c:	9803      	ldr	r0, [sp, #12]
 8018b4e:	f000 f975 	bl	8018e3c <__multadd>
 8018b52:	9005      	str	r0, [sp, #20]
 8018b54:	e7eb      	b.n	8018b2e <_dtoa_r+0xbb6>
 8018b56:	46c0      	nop			@ (mov r8, r8)
 8018b58:	0801b9a0 	.word	0x0801b9a0
 8018b5c:	0801b9a8 	.word	0x0801b9a8

08018b60 <_free_r>:
 8018b60:	b570      	push	{r4, r5, r6, lr}
 8018b62:	0005      	movs	r5, r0
 8018b64:	1e0c      	subs	r4, r1, #0
 8018b66:	d010      	beq.n	8018b8a <_free_r+0x2a>
 8018b68:	3c04      	subs	r4, #4
 8018b6a:	6823      	ldr	r3, [r4, #0]
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	da00      	bge.n	8018b72 <_free_r+0x12>
 8018b70:	18e4      	adds	r4, r4, r3
 8018b72:	0028      	movs	r0, r5
 8018b74:	f000 f8ea 	bl	8018d4c <__malloc_lock>
 8018b78:	4a1d      	ldr	r2, [pc, #116]	@ (8018bf0 <_free_r+0x90>)
 8018b7a:	6813      	ldr	r3, [r2, #0]
 8018b7c:	2b00      	cmp	r3, #0
 8018b7e:	d105      	bne.n	8018b8c <_free_r+0x2c>
 8018b80:	6063      	str	r3, [r4, #4]
 8018b82:	6014      	str	r4, [r2, #0]
 8018b84:	0028      	movs	r0, r5
 8018b86:	f000 f8e9 	bl	8018d5c <__malloc_unlock>
 8018b8a:	bd70      	pop	{r4, r5, r6, pc}
 8018b8c:	42a3      	cmp	r3, r4
 8018b8e:	d908      	bls.n	8018ba2 <_free_r+0x42>
 8018b90:	6820      	ldr	r0, [r4, #0]
 8018b92:	1821      	adds	r1, r4, r0
 8018b94:	428b      	cmp	r3, r1
 8018b96:	d1f3      	bne.n	8018b80 <_free_r+0x20>
 8018b98:	6819      	ldr	r1, [r3, #0]
 8018b9a:	685b      	ldr	r3, [r3, #4]
 8018b9c:	1809      	adds	r1, r1, r0
 8018b9e:	6021      	str	r1, [r4, #0]
 8018ba0:	e7ee      	b.n	8018b80 <_free_r+0x20>
 8018ba2:	001a      	movs	r2, r3
 8018ba4:	685b      	ldr	r3, [r3, #4]
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	d001      	beq.n	8018bae <_free_r+0x4e>
 8018baa:	42a3      	cmp	r3, r4
 8018bac:	d9f9      	bls.n	8018ba2 <_free_r+0x42>
 8018bae:	6811      	ldr	r1, [r2, #0]
 8018bb0:	1850      	adds	r0, r2, r1
 8018bb2:	42a0      	cmp	r0, r4
 8018bb4:	d10b      	bne.n	8018bce <_free_r+0x6e>
 8018bb6:	6820      	ldr	r0, [r4, #0]
 8018bb8:	1809      	adds	r1, r1, r0
 8018bba:	1850      	adds	r0, r2, r1
 8018bbc:	6011      	str	r1, [r2, #0]
 8018bbe:	4283      	cmp	r3, r0
 8018bc0:	d1e0      	bne.n	8018b84 <_free_r+0x24>
 8018bc2:	6818      	ldr	r0, [r3, #0]
 8018bc4:	685b      	ldr	r3, [r3, #4]
 8018bc6:	1841      	adds	r1, r0, r1
 8018bc8:	6011      	str	r1, [r2, #0]
 8018bca:	6053      	str	r3, [r2, #4]
 8018bcc:	e7da      	b.n	8018b84 <_free_r+0x24>
 8018bce:	42a0      	cmp	r0, r4
 8018bd0:	d902      	bls.n	8018bd8 <_free_r+0x78>
 8018bd2:	230c      	movs	r3, #12
 8018bd4:	602b      	str	r3, [r5, #0]
 8018bd6:	e7d5      	b.n	8018b84 <_free_r+0x24>
 8018bd8:	6820      	ldr	r0, [r4, #0]
 8018bda:	1821      	adds	r1, r4, r0
 8018bdc:	428b      	cmp	r3, r1
 8018bde:	d103      	bne.n	8018be8 <_free_r+0x88>
 8018be0:	6819      	ldr	r1, [r3, #0]
 8018be2:	685b      	ldr	r3, [r3, #4]
 8018be4:	1809      	adds	r1, r1, r0
 8018be6:	6021      	str	r1, [r4, #0]
 8018be8:	6063      	str	r3, [r4, #4]
 8018bea:	6054      	str	r4, [r2, #4]
 8018bec:	e7ca      	b.n	8018b84 <_free_r+0x24>
 8018bee:	46c0      	nop			@ (mov r8, r8)
 8018bf0:	20003f10 	.word	0x20003f10

08018bf4 <malloc>:
 8018bf4:	b510      	push	{r4, lr}
 8018bf6:	4b03      	ldr	r3, [pc, #12]	@ (8018c04 <malloc+0x10>)
 8018bf8:	0001      	movs	r1, r0
 8018bfa:	6818      	ldr	r0, [r3, #0]
 8018bfc:	f000 f826 	bl	8018c4c <_malloc_r>
 8018c00:	bd10      	pop	{r4, pc}
 8018c02:	46c0      	nop			@ (mov r8, r8)
 8018c04:	2000022c 	.word	0x2000022c

08018c08 <sbrk_aligned>:
 8018c08:	b570      	push	{r4, r5, r6, lr}
 8018c0a:	4e0f      	ldr	r6, [pc, #60]	@ (8018c48 <sbrk_aligned+0x40>)
 8018c0c:	000d      	movs	r5, r1
 8018c0e:	6831      	ldr	r1, [r6, #0]
 8018c10:	0004      	movs	r4, r0
 8018c12:	2900      	cmp	r1, #0
 8018c14:	d102      	bne.n	8018c1c <sbrk_aligned+0x14>
 8018c16:	f001 f855 	bl	8019cc4 <_sbrk_r>
 8018c1a:	6030      	str	r0, [r6, #0]
 8018c1c:	0029      	movs	r1, r5
 8018c1e:	0020      	movs	r0, r4
 8018c20:	f001 f850 	bl	8019cc4 <_sbrk_r>
 8018c24:	1c43      	adds	r3, r0, #1
 8018c26:	d103      	bne.n	8018c30 <sbrk_aligned+0x28>
 8018c28:	2501      	movs	r5, #1
 8018c2a:	426d      	negs	r5, r5
 8018c2c:	0028      	movs	r0, r5
 8018c2e:	bd70      	pop	{r4, r5, r6, pc}
 8018c30:	2303      	movs	r3, #3
 8018c32:	1cc5      	adds	r5, r0, #3
 8018c34:	439d      	bics	r5, r3
 8018c36:	42a8      	cmp	r0, r5
 8018c38:	d0f8      	beq.n	8018c2c <sbrk_aligned+0x24>
 8018c3a:	1a29      	subs	r1, r5, r0
 8018c3c:	0020      	movs	r0, r4
 8018c3e:	f001 f841 	bl	8019cc4 <_sbrk_r>
 8018c42:	3001      	adds	r0, #1
 8018c44:	d1f2      	bne.n	8018c2c <sbrk_aligned+0x24>
 8018c46:	e7ef      	b.n	8018c28 <sbrk_aligned+0x20>
 8018c48:	20003f0c 	.word	0x20003f0c

08018c4c <_malloc_r>:
 8018c4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018c4e:	2203      	movs	r2, #3
 8018c50:	1ccb      	adds	r3, r1, #3
 8018c52:	4393      	bics	r3, r2
 8018c54:	3308      	adds	r3, #8
 8018c56:	0005      	movs	r5, r0
 8018c58:	001f      	movs	r7, r3
 8018c5a:	2b0c      	cmp	r3, #12
 8018c5c:	d234      	bcs.n	8018cc8 <_malloc_r+0x7c>
 8018c5e:	270c      	movs	r7, #12
 8018c60:	42b9      	cmp	r1, r7
 8018c62:	d833      	bhi.n	8018ccc <_malloc_r+0x80>
 8018c64:	0028      	movs	r0, r5
 8018c66:	f000 f871 	bl	8018d4c <__malloc_lock>
 8018c6a:	4e37      	ldr	r6, [pc, #220]	@ (8018d48 <_malloc_r+0xfc>)
 8018c6c:	6833      	ldr	r3, [r6, #0]
 8018c6e:	001c      	movs	r4, r3
 8018c70:	2c00      	cmp	r4, #0
 8018c72:	d12f      	bne.n	8018cd4 <_malloc_r+0x88>
 8018c74:	0039      	movs	r1, r7
 8018c76:	0028      	movs	r0, r5
 8018c78:	f7ff ffc6 	bl	8018c08 <sbrk_aligned>
 8018c7c:	0004      	movs	r4, r0
 8018c7e:	1c43      	adds	r3, r0, #1
 8018c80:	d15f      	bne.n	8018d42 <_malloc_r+0xf6>
 8018c82:	6834      	ldr	r4, [r6, #0]
 8018c84:	9400      	str	r4, [sp, #0]
 8018c86:	9b00      	ldr	r3, [sp, #0]
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	d14a      	bne.n	8018d22 <_malloc_r+0xd6>
 8018c8c:	2c00      	cmp	r4, #0
 8018c8e:	d052      	beq.n	8018d36 <_malloc_r+0xea>
 8018c90:	6823      	ldr	r3, [r4, #0]
 8018c92:	0028      	movs	r0, r5
 8018c94:	18e3      	adds	r3, r4, r3
 8018c96:	9900      	ldr	r1, [sp, #0]
 8018c98:	9301      	str	r3, [sp, #4]
 8018c9a:	f001 f813 	bl	8019cc4 <_sbrk_r>
 8018c9e:	9b01      	ldr	r3, [sp, #4]
 8018ca0:	4283      	cmp	r3, r0
 8018ca2:	d148      	bne.n	8018d36 <_malloc_r+0xea>
 8018ca4:	6823      	ldr	r3, [r4, #0]
 8018ca6:	0028      	movs	r0, r5
 8018ca8:	1aff      	subs	r7, r7, r3
 8018caa:	0039      	movs	r1, r7
 8018cac:	f7ff ffac 	bl	8018c08 <sbrk_aligned>
 8018cb0:	3001      	adds	r0, #1
 8018cb2:	d040      	beq.n	8018d36 <_malloc_r+0xea>
 8018cb4:	6823      	ldr	r3, [r4, #0]
 8018cb6:	19db      	adds	r3, r3, r7
 8018cb8:	6023      	str	r3, [r4, #0]
 8018cba:	6833      	ldr	r3, [r6, #0]
 8018cbc:	685a      	ldr	r2, [r3, #4]
 8018cbe:	2a00      	cmp	r2, #0
 8018cc0:	d133      	bne.n	8018d2a <_malloc_r+0xde>
 8018cc2:	9b00      	ldr	r3, [sp, #0]
 8018cc4:	6033      	str	r3, [r6, #0]
 8018cc6:	e019      	b.n	8018cfc <_malloc_r+0xb0>
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	dac9      	bge.n	8018c60 <_malloc_r+0x14>
 8018ccc:	230c      	movs	r3, #12
 8018cce:	602b      	str	r3, [r5, #0]
 8018cd0:	2000      	movs	r0, #0
 8018cd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018cd4:	6821      	ldr	r1, [r4, #0]
 8018cd6:	1bc9      	subs	r1, r1, r7
 8018cd8:	d420      	bmi.n	8018d1c <_malloc_r+0xd0>
 8018cda:	290b      	cmp	r1, #11
 8018cdc:	d90a      	bls.n	8018cf4 <_malloc_r+0xa8>
 8018cde:	19e2      	adds	r2, r4, r7
 8018ce0:	6027      	str	r7, [r4, #0]
 8018ce2:	42a3      	cmp	r3, r4
 8018ce4:	d104      	bne.n	8018cf0 <_malloc_r+0xa4>
 8018ce6:	6032      	str	r2, [r6, #0]
 8018ce8:	6863      	ldr	r3, [r4, #4]
 8018cea:	6011      	str	r1, [r2, #0]
 8018cec:	6053      	str	r3, [r2, #4]
 8018cee:	e005      	b.n	8018cfc <_malloc_r+0xb0>
 8018cf0:	605a      	str	r2, [r3, #4]
 8018cf2:	e7f9      	b.n	8018ce8 <_malloc_r+0x9c>
 8018cf4:	6862      	ldr	r2, [r4, #4]
 8018cf6:	42a3      	cmp	r3, r4
 8018cf8:	d10e      	bne.n	8018d18 <_malloc_r+0xcc>
 8018cfa:	6032      	str	r2, [r6, #0]
 8018cfc:	0028      	movs	r0, r5
 8018cfe:	f000 f82d 	bl	8018d5c <__malloc_unlock>
 8018d02:	0020      	movs	r0, r4
 8018d04:	2207      	movs	r2, #7
 8018d06:	300b      	adds	r0, #11
 8018d08:	1d23      	adds	r3, r4, #4
 8018d0a:	4390      	bics	r0, r2
 8018d0c:	1ac2      	subs	r2, r0, r3
 8018d0e:	4298      	cmp	r0, r3
 8018d10:	d0df      	beq.n	8018cd2 <_malloc_r+0x86>
 8018d12:	1a1b      	subs	r3, r3, r0
 8018d14:	50a3      	str	r3, [r4, r2]
 8018d16:	e7dc      	b.n	8018cd2 <_malloc_r+0x86>
 8018d18:	605a      	str	r2, [r3, #4]
 8018d1a:	e7ef      	b.n	8018cfc <_malloc_r+0xb0>
 8018d1c:	0023      	movs	r3, r4
 8018d1e:	6864      	ldr	r4, [r4, #4]
 8018d20:	e7a6      	b.n	8018c70 <_malloc_r+0x24>
 8018d22:	9c00      	ldr	r4, [sp, #0]
 8018d24:	6863      	ldr	r3, [r4, #4]
 8018d26:	9300      	str	r3, [sp, #0]
 8018d28:	e7ad      	b.n	8018c86 <_malloc_r+0x3a>
 8018d2a:	001a      	movs	r2, r3
 8018d2c:	685b      	ldr	r3, [r3, #4]
 8018d2e:	42a3      	cmp	r3, r4
 8018d30:	d1fb      	bne.n	8018d2a <_malloc_r+0xde>
 8018d32:	2300      	movs	r3, #0
 8018d34:	e7da      	b.n	8018cec <_malloc_r+0xa0>
 8018d36:	230c      	movs	r3, #12
 8018d38:	0028      	movs	r0, r5
 8018d3a:	602b      	str	r3, [r5, #0]
 8018d3c:	f000 f80e 	bl	8018d5c <__malloc_unlock>
 8018d40:	e7c6      	b.n	8018cd0 <_malloc_r+0x84>
 8018d42:	6007      	str	r7, [r0, #0]
 8018d44:	e7da      	b.n	8018cfc <_malloc_r+0xb0>
 8018d46:	46c0      	nop			@ (mov r8, r8)
 8018d48:	20003f10 	.word	0x20003f10

08018d4c <__malloc_lock>:
 8018d4c:	b510      	push	{r4, lr}
 8018d4e:	4802      	ldr	r0, [pc, #8]	@ (8018d58 <__malloc_lock+0xc>)
 8018d50:	f7ff f86d 	bl	8017e2e <__retarget_lock_acquire_recursive>
 8018d54:	bd10      	pop	{r4, pc}
 8018d56:	46c0      	nop			@ (mov r8, r8)
 8018d58:	20003f08 	.word	0x20003f08

08018d5c <__malloc_unlock>:
 8018d5c:	b510      	push	{r4, lr}
 8018d5e:	4802      	ldr	r0, [pc, #8]	@ (8018d68 <__malloc_unlock+0xc>)
 8018d60:	f7ff f866 	bl	8017e30 <__retarget_lock_release_recursive>
 8018d64:	bd10      	pop	{r4, pc}
 8018d66:	46c0      	nop			@ (mov r8, r8)
 8018d68:	20003f08 	.word	0x20003f08

08018d6c <_Balloc>:
 8018d6c:	b570      	push	{r4, r5, r6, lr}
 8018d6e:	69c5      	ldr	r5, [r0, #28]
 8018d70:	0006      	movs	r6, r0
 8018d72:	000c      	movs	r4, r1
 8018d74:	2d00      	cmp	r5, #0
 8018d76:	d10e      	bne.n	8018d96 <_Balloc+0x2a>
 8018d78:	2010      	movs	r0, #16
 8018d7a:	f7ff ff3b 	bl	8018bf4 <malloc>
 8018d7e:	1e02      	subs	r2, r0, #0
 8018d80:	61f0      	str	r0, [r6, #28]
 8018d82:	d104      	bne.n	8018d8e <_Balloc+0x22>
 8018d84:	216b      	movs	r1, #107	@ 0x6b
 8018d86:	4b19      	ldr	r3, [pc, #100]	@ (8018dec <_Balloc+0x80>)
 8018d88:	4819      	ldr	r0, [pc, #100]	@ (8018df0 <_Balloc+0x84>)
 8018d8a:	f000 ffad 	bl	8019ce8 <__assert_func>
 8018d8e:	6045      	str	r5, [r0, #4]
 8018d90:	6085      	str	r5, [r0, #8]
 8018d92:	6005      	str	r5, [r0, #0]
 8018d94:	60c5      	str	r5, [r0, #12]
 8018d96:	69f5      	ldr	r5, [r6, #28]
 8018d98:	68eb      	ldr	r3, [r5, #12]
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	d013      	beq.n	8018dc6 <_Balloc+0x5a>
 8018d9e:	69f3      	ldr	r3, [r6, #28]
 8018da0:	00a2      	lsls	r2, r4, #2
 8018da2:	68db      	ldr	r3, [r3, #12]
 8018da4:	189b      	adds	r3, r3, r2
 8018da6:	6818      	ldr	r0, [r3, #0]
 8018da8:	2800      	cmp	r0, #0
 8018daa:	d118      	bne.n	8018dde <_Balloc+0x72>
 8018dac:	2101      	movs	r1, #1
 8018dae:	000d      	movs	r5, r1
 8018db0:	40a5      	lsls	r5, r4
 8018db2:	1d6a      	adds	r2, r5, #5
 8018db4:	0030      	movs	r0, r6
 8018db6:	0092      	lsls	r2, r2, #2
 8018db8:	f000 ffb4 	bl	8019d24 <_calloc_r>
 8018dbc:	2800      	cmp	r0, #0
 8018dbe:	d00c      	beq.n	8018dda <_Balloc+0x6e>
 8018dc0:	6044      	str	r4, [r0, #4]
 8018dc2:	6085      	str	r5, [r0, #8]
 8018dc4:	e00d      	b.n	8018de2 <_Balloc+0x76>
 8018dc6:	2221      	movs	r2, #33	@ 0x21
 8018dc8:	2104      	movs	r1, #4
 8018dca:	0030      	movs	r0, r6
 8018dcc:	f000 ffaa 	bl	8019d24 <_calloc_r>
 8018dd0:	69f3      	ldr	r3, [r6, #28]
 8018dd2:	60e8      	str	r0, [r5, #12]
 8018dd4:	68db      	ldr	r3, [r3, #12]
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	d1e1      	bne.n	8018d9e <_Balloc+0x32>
 8018dda:	2000      	movs	r0, #0
 8018ddc:	bd70      	pop	{r4, r5, r6, pc}
 8018dde:	6802      	ldr	r2, [r0, #0]
 8018de0:	601a      	str	r2, [r3, #0]
 8018de2:	2300      	movs	r3, #0
 8018de4:	6103      	str	r3, [r0, #16]
 8018de6:	60c3      	str	r3, [r0, #12]
 8018de8:	e7f8      	b.n	8018ddc <_Balloc+0x70>
 8018dea:	46c0      	nop			@ (mov r8, r8)
 8018dec:	0801b9ad 	.word	0x0801b9ad
 8018df0:	0801ba2d 	.word	0x0801ba2d

08018df4 <_Bfree>:
 8018df4:	b570      	push	{r4, r5, r6, lr}
 8018df6:	69c6      	ldr	r6, [r0, #28]
 8018df8:	0005      	movs	r5, r0
 8018dfa:	000c      	movs	r4, r1
 8018dfc:	2e00      	cmp	r6, #0
 8018dfe:	d10e      	bne.n	8018e1e <_Bfree+0x2a>
 8018e00:	2010      	movs	r0, #16
 8018e02:	f7ff fef7 	bl	8018bf4 <malloc>
 8018e06:	1e02      	subs	r2, r0, #0
 8018e08:	61e8      	str	r0, [r5, #28]
 8018e0a:	d104      	bne.n	8018e16 <_Bfree+0x22>
 8018e0c:	218f      	movs	r1, #143	@ 0x8f
 8018e0e:	4b09      	ldr	r3, [pc, #36]	@ (8018e34 <_Bfree+0x40>)
 8018e10:	4809      	ldr	r0, [pc, #36]	@ (8018e38 <_Bfree+0x44>)
 8018e12:	f000 ff69 	bl	8019ce8 <__assert_func>
 8018e16:	6046      	str	r6, [r0, #4]
 8018e18:	6086      	str	r6, [r0, #8]
 8018e1a:	6006      	str	r6, [r0, #0]
 8018e1c:	60c6      	str	r6, [r0, #12]
 8018e1e:	2c00      	cmp	r4, #0
 8018e20:	d007      	beq.n	8018e32 <_Bfree+0x3e>
 8018e22:	69eb      	ldr	r3, [r5, #28]
 8018e24:	6862      	ldr	r2, [r4, #4]
 8018e26:	68db      	ldr	r3, [r3, #12]
 8018e28:	0092      	lsls	r2, r2, #2
 8018e2a:	189b      	adds	r3, r3, r2
 8018e2c:	681a      	ldr	r2, [r3, #0]
 8018e2e:	6022      	str	r2, [r4, #0]
 8018e30:	601c      	str	r4, [r3, #0]
 8018e32:	bd70      	pop	{r4, r5, r6, pc}
 8018e34:	0801b9ad 	.word	0x0801b9ad
 8018e38:	0801ba2d 	.word	0x0801ba2d

08018e3c <__multadd>:
 8018e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018e3e:	000f      	movs	r7, r1
 8018e40:	9001      	str	r0, [sp, #4]
 8018e42:	000c      	movs	r4, r1
 8018e44:	001e      	movs	r6, r3
 8018e46:	2000      	movs	r0, #0
 8018e48:	690d      	ldr	r5, [r1, #16]
 8018e4a:	3714      	adds	r7, #20
 8018e4c:	683b      	ldr	r3, [r7, #0]
 8018e4e:	3001      	adds	r0, #1
 8018e50:	b299      	uxth	r1, r3
 8018e52:	4351      	muls	r1, r2
 8018e54:	0c1b      	lsrs	r3, r3, #16
 8018e56:	4353      	muls	r3, r2
 8018e58:	1989      	adds	r1, r1, r6
 8018e5a:	0c0e      	lsrs	r6, r1, #16
 8018e5c:	199b      	adds	r3, r3, r6
 8018e5e:	0c1e      	lsrs	r6, r3, #16
 8018e60:	b289      	uxth	r1, r1
 8018e62:	041b      	lsls	r3, r3, #16
 8018e64:	185b      	adds	r3, r3, r1
 8018e66:	c708      	stmia	r7!, {r3}
 8018e68:	4285      	cmp	r5, r0
 8018e6a:	dcef      	bgt.n	8018e4c <__multadd+0x10>
 8018e6c:	2e00      	cmp	r6, #0
 8018e6e:	d022      	beq.n	8018eb6 <__multadd+0x7a>
 8018e70:	68a3      	ldr	r3, [r4, #8]
 8018e72:	42ab      	cmp	r3, r5
 8018e74:	dc19      	bgt.n	8018eaa <__multadd+0x6e>
 8018e76:	6861      	ldr	r1, [r4, #4]
 8018e78:	9801      	ldr	r0, [sp, #4]
 8018e7a:	3101      	adds	r1, #1
 8018e7c:	f7ff ff76 	bl	8018d6c <_Balloc>
 8018e80:	1e07      	subs	r7, r0, #0
 8018e82:	d105      	bne.n	8018e90 <__multadd+0x54>
 8018e84:	003a      	movs	r2, r7
 8018e86:	21ba      	movs	r1, #186	@ 0xba
 8018e88:	4b0c      	ldr	r3, [pc, #48]	@ (8018ebc <__multadd+0x80>)
 8018e8a:	480d      	ldr	r0, [pc, #52]	@ (8018ec0 <__multadd+0x84>)
 8018e8c:	f000 ff2c 	bl	8019ce8 <__assert_func>
 8018e90:	0021      	movs	r1, r4
 8018e92:	6922      	ldr	r2, [r4, #16]
 8018e94:	310c      	adds	r1, #12
 8018e96:	3202      	adds	r2, #2
 8018e98:	0092      	lsls	r2, r2, #2
 8018e9a:	300c      	adds	r0, #12
 8018e9c:	f7fe ffd4 	bl	8017e48 <memcpy>
 8018ea0:	0021      	movs	r1, r4
 8018ea2:	9801      	ldr	r0, [sp, #4]
 8018ea4:	f7ff ffa6 	bl	8018df4 <_Bfree>
 8018ea8:	003c      	movs	r4, r7
 8018eaa:	1d2b      	adds	r3, r5, #4
 8018eac:	009b      	lsls	r3, r3, #2
 8018eae:	18e3      	adds	r3, r4, r3
 8018eb0:	3501      	adds	r5, #1
 8018eb2:	605e      	str	r6, [r3, #4]
 8018eb4:	6125      	str	r5, [r4, #16]
 8018eb6:	0020      	movs	r0, r4
 8018eb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018eba:	46c0      	nop			@ (mov r8, r8)
 8018ebc:	0801ba1c 	.word	0x0801ba1c
 8018ec0:	0801ba2d 	.word	0x0801ba2d

08018ec4 <__hi0bits>:
 8018ec4:	2280      	movs	r2, #128	@ 0x80
 8018ec6:	0003      	movs	r3, r0
 8018ec8:	0252      	lsls	r2, r2, #9
 8018eca:	2000      	movs	r0, #0
 8018ecc:	4293      	cmp	r3, r2
 8018ece:	d201      	bcs.n	8018ed4 <__hi0bits+0x10>
 8018ed0:	041b      	lsls	r3, r3, #16
 8018ed2:	3010      	adds	r0, #16
 8018ed4:	2280      	movs	r2, #128	@ 0x80
 8018ed6:	0452      	lsls	r2, r2, #17
 8018ed8:	4293      	cmp	r3, r2
 8018eda:	d201      	bcs.n	8018ee0 <__hi0bits+0x1c>
 8018edc:	3008      	adds	r0, #8
 8018ede:	021b      	lsls	r3, r3, #8
 8018ee0:	2280      	movs	r2, #128	@ 0x80
 8018ee2:	0552      	lsls	r2, r2, #21
 8018ee4:	4293      	cmp	r3, r2
 8018ee6:	d201      	bcs.n	8018eec <__hi0bits+0x28>
 8018ee8:	3004      	adds	r0, #4
 8018eea:	011b      	lsls	r3, r3, #4
 8018eec:	2280      	movs	r2, #128	@ 0x80
 8018eee:	05d2      	lsls	r2, r2, #23
 8018ef0:	4293      	cmp	r3, r2
 8018ef2:	d201      	bcs.n	8018ef8 <__hi0bits+0x34>
 8018ef4:	3002      	adds	r0, #2
 8018ef6:	009b      	lsls	r3, r3, #2
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	db03      	blt.n	8018f04 <__hi0bits+0x40>
 8018efc:	3001      	adds	r0, #1
 8018efe:	4213      	tst	r3, r2
 8018f00:	d100      	bne.n	8018f04 <__hi0bits+0x40>
 8018f02:	2020      	movs	r0, #32
 8018f04:	4770      	bx	lr

08018f06 <__lo0bits>:
 8018f06:	6803      	ldr	r3, [r0, #0]
 8018f08:	0001      	movs	r1, r0
 8018f0a:	2207      	movs	r2, #7
 8018f0c:	0018      	movs	r0, r3
 8018f0e:	4010      	ands	r0, r2
 8018f10:	4213      	tst	r3, r2
 8018f12:	d00d      	beq.n	8018f30 <__lo0bits+0x2a>
 8018f14:	3a06      	subs	r2, #6
 8018f16:	2000      	movs	r0, #0
 8018f18:	4213      	tst	r3, r2
 8018f1a:	d105      	bne.n	8018f28 <__lo0bits+0x22>
 8018f1c:	3002      	adds	r0, #2
 8018f1e:	4203      	tst	r3, r0
 8018f20:	d003      	beq.n	8018f2a <__lo0bits+0x24>
 8018f22:	40d3      	lsrs	r3, r2
 8018f24:	0010      	movs	r0, r2
 8018f26:	600b      	str	r3, [r1, #0]
 8018f28:	4770      	bx	lr
 8018f2a:	089b      	lsrs	r3, r3, #2
 8018f2c:	600b      	str	r3, [r1, #0]
 8018f2e:	e7fb      	b.n	8018f28 <__lo0bits+0x22>
 8018f30:	b29a      	uxth	r2, r3
 8018f32:	2a00      	cmp	r2, #0
 8018f34:	d101      	bne.n	8018f3a <__lo0bits+0x34>
 8018f36:	2010      	movs	r0, #16
 8018f38:	0c1b      	lsrs	r3, r3, #16
 8018f3a:	b2da      	uxtb	r2, r3
 8018f3c:	2a00      	cmp	r2, #0
 8018f3e:	d101      	bne.n	8018f44 <__lo0bits+0x3e>
 8018f40:	3008      	adds	r0, #8
 8018f42:	0a1b      	lsrs	r3, r3, #8
 8018f44:	071a      	lsls	r2, r3, #28
 8018f46:	d101      	bne.n	8018f4c <__lo0bits+0x46>
 8018f48:	3004      	adds	r0, #4
 8018f4a:	091b      	lsrs	r3, r3, #4
 8018f4c:	079a      	lsls	r2, r3, #30
 8018f4e:	d101      	bne.n	8018f54 <__lo0bits+0x4e>
 8018f50:	3002      	adds	r0, #2
 8018f52:	089b      	lsrs	r3, r3, #2
 8018f54:	07da      	lsls	r2, r3, #31
 8018f56:	d4e9      	bmi.n	8018f2c <__lo0bits+0x26>
 8018f58:	3001      	adds	r0, #1
 8018f5a:	085b      	lsrs	r3, r3, #1
 8018f5c:	d1e6      	bne.n	8018f2c <__lo0bits+0x26>
 8018f5e:	2020      	movs	r0, #32
 8018f60:	e7e2      	b.n	8018f28 <__lo0bits+0x22>
	...

08018f64 <__i2b>:
 8018f64:	b510      	push	{r4, lr}
 8018f66:	000c      	movs	r4, r1
 8018f68:	2101      	movs	r1, #1
 8018f6a:	f7ff feff 	bl	8018d6c <_Balloc>
 8018f6e:	2800      	cmp	r0, #0
 8018f70:	d107      	bne.n	8018f82 <__i2b+0x1e>
 8018f72:	2146      	movs	r1, #70	@ 0x46
 8018f74:	4c05      	ldr	r4, [pc, #20]	@ (8018f8c <__i2b+0x28>)
 8018f76:	0002      	movs	r2, r0
 8018f78:	4b05      	ldr	r3, [pc, #20]	@ (8018f90 <__i2b+0x2c>)
 8018f7a:	0020      	movs	r0, r4
 8018f7c:	31ff      	adds	r1, #255	@ 0xff
 8018f7e:	f000 feb3 	bl	8019ce8 <__assert_func>
 8018f82:	2301      	movs	r3, #1
 8018f84:	6144      	str	r4, [r0, #20]
 8018f86:	6103      	str	r3, [r0, #16]
 8018f88:	bd10      	pop	{r4, pc}
 8018f8a:	46c0      	nop			@ (mov r8, r8)
 8018f8c:	0801ba2d 	.word	0x0801ba2d
 8018f90:	0801ba1c 	.word	0x0801ba1c

08018f94 <__multiply>:
 8018f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f96:	0014      	movs	r4, r2
 8018f98:	690a      	ldr	r2, [r1, #16]
 8018f9a:	6923      	ldr	r3, [r4, #16]
 8018f9c:	000d      	movs	r5, r1
 8018f9e:	b08b      	sub	sp, #44	@ 0x2c
 8018fa0:	429a      	cmp	r2, r3
 8018fa2:	db02      	blt.n	8018faa <__multiply+0x16>
 8018fa4:	0023      	movs	r3, r4
 8018fa6:	000c      	movs	r4, r1
 8018fa8:	001d      	movs	r5, r3
 8018faa:	6927      	ldr	r7, [r4, #16]
 8018fac:	692e      	ldr	r6, [r5, #16]
 8018fae:	6861      	ldr	r1, [r4, #4]
 8018fb0:	19bb      	adds	r3, r7, r6
 8018fb2:	9303      	str	r3, [sp, #12]
 8018fb4:	68a3      	ldr	r3, [r4, #8]
 8018fb6:	19ba      	adds	r2, r7, r6
 8018fb8:	4293      	cmp	r3, r2
 8018fba:	da00      	bge.n	8018fbe <__multiply+0x2a>
 8018fbc:	3101      	adds	r1, #1
 8018fbe:	f7ff fed5 	bl	8018d6c <_Balloc>
 8018fc2:	9002      	str	r0, [sp, #8]
 8018fc4:	2800      	cmp	r0, #0
 8018fc6:	d106      	bne.n	8018fd6 <__multiply+0x42>
 8018fc8:	21b1      	movs	r1, #177	@ 0xb1
 8018fca:	4b49      	ldr	r3, [pc, #292]	@ (80190f0 <__multiply+0x15c>)
 8018fcc:	4849      	ldr	r0, [pc, #292]	@ (80190f4 <__multiply+0x160>)
 8018fce:	9a02      	ldr	r2, [sp, #8]
 8018fd0:	0049      	lsls	r1, r1, #1
 8018fd2:	f000 fe89 	bl	8019ce8 <__assert_func>
 8018fd6:	9b02      	ldr	r3, [sp, #8]
 8018fd8:	2200      	movs	r2, #0
 8018fda:	3314      	adds	r3, #20
 8018fdc:	469c      	mov	ip, r3
 8018fde:	19bb      	adds	r3, r7, r6
 8018fe0:	009b      	lsls	r3, r3, #2
 8018fe2:	4463      	add	r3, ip
 8018fe4:	9304      	str	r3, [sp, #16]
 8018fe6:	4663      	mov	r3, ip
 8018fe8:	9904      	ldr	r1, [sp, #16]
 8018fea:	428b      	cmp	r3, r1
 8018fec:	d32a      	bcc.n	8019044 <__multiply+0xb0>
 8018fee:	0023      	movs	r3, r4
 8018ff0:	00bf      	lsls	r7, r7, #2
 8018ff2:	3314      	adds	r3, #20
 8018ff4:	3514      	adds	r5, #20
 8018ff6:	9308      	str	r3, [sp, #32]
 8018ff8:	00b6      	lsls	r6, r6, #2
 8018ffa:	19db      	adds	r3, r3, r7
 8018ffc:	9305      	str	r3, [sp, #20]
 8018ffe:	19ab      	adds	r3, r5, r6
 8019000:	9309      	str	r3, [sp, #36]	@ 0x24
 8019002:	2304      	movs	r3, #4
 8019004:	9306      	str	r3, [sp, #24]
 8019006:	0023      	movs	r3, r4
 8019008:	9a05      	ldr	r2, [sp, #20]
 801900a:	3315      	adds	r3, #21
 801900c:	9501      	str	r5, [sp, #4]
 801900e:	429a      	cmp	r2, r3
 8019010:	d305      	bcc.n	801901e <__multiply+0x8a>
 8019012:	1b13      	subs	r3, r2, r4
 8019014:	3b15      	subs	r3, #21
 8019016:	089b      	lsrs	r3, r3, #2
 8019018:	3301      	adds	r3, #1
 801901a:	009b      	lsls	r3, r3, #2
 801901c:	9306      	str	r3, [sp, #24]
 801901e:	9b01      	ldr	r3, [sp, #4]
 8019020:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019022:	4293      	cmp	r3, r2
 8019024:	d310      	bcc.n	8019048 <__multiply+0xb4>
 8019026:	9b03      	ldr	r3, [sp, #12]
 8019028:	2b00      	cmp	r3, #0
 801902a:	dd05      	ble.n	8019038 <__multiply+0xa4>
 801902c:	9b04      	ldr	r3, [sp, #16]
 801902e:	3b04      	subs	r3, #4
 8019030:	9304      	str	r3, [sp, #16]
 8019032:	681b      	ldr	r3, [r3, #0]
 8019034:	2b00      	cmp	r3, #0
 8019036:	d056      	beq.n	80190e6 <__multiply+0x152>
 8019038:	9b02      	ldr	r3, [sp, #8]
 801903a:	9a03      	ldr	r2, [sp, #12]
 801903c:	0018      	movs	r0, r3
 801903e:	611a      	str	r2, [r3, #16]
 8019040:	b00b      	add	sp, #44	@ 0x2c
 8019042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019044:	c304      	stmia	r3!, {r2}
 8019046:	e7cf      	b.n	8018fe8 <__multiply+0x54>
 8019048:	9b01      	ldr	r3, [sp, #4]
 801904a:	6818      	ldr	r0, [r3, #0]
 801904c:	b280      	uxth	r0, r0
 801904e:	2800      	cmp	r0, #0
 8019050:	d01e      	beq.n	8019090 <__multiply+0xfc>
 8019052:	4667      	mov	r7, ip
 8019054:	2500      	movs	r5, #0
 8019056:	9e08      	ldr	r6, [sp, #32]
 8019058:	ce02      	ldmia	r6!, {r1}
 801905a:	683b      	ldr	r3, [r7, #0]
 801905c:	9307      	str	r3, [sp, #28]
 801905e:	b28b      	uxth	r3, r1
 8019060:	4343      	muls	r3, r0
 8019062:	001a      	movs	r2, r3
 8019064:	466b      	mov	r3, sp
 8019066:	0c09      	lsrs	r1, r1, #16
 8019068:	8b9b      	ldrh	r3, [r3, #28]
 801906a:	4341      	muls	r1, r0
 801906c:	18d3      	adds	r3, r2, r3
 801906e:	9a07      	ldr	r2, [sp, #28]
 8019070:	195b      	adds	r3, r3, r5
 8019072:	0c12      	lsrs	r2, r2, #16
 8019074:	1889      	adds	r1, r1, r2
 8019076:	0c1a      	lsrs	r2, r3, #16
 8019078:	188a      	adds	r2, r1, r2
 801907a:	b29b      	uxth	r3, r3
 801907c:	0c15      	lsrs	r5, r2, #16
 801907e:	0412      	lsls	r2, r2, #16
 8019080:	431a      	orrs	r2, r3
 8019082:	9b05      	ldr	r3, [sp, #20]
 8019084:	c704      	stmia	r7!, {r2}
 8019086:	42b3      	cmp	r3, r6
 8019088:	d8e6      	bhi.n	8019058 <__multiply+0xc4>
 801908a:	4663      	mov	r3, ip
 801908c:	9a06      	ldr	r2, [sp, #24]
 801908e:	509d      	str	r5, [r3, r2]
 8019090:	9b01      	ldr	r3, [sp, #4]
 8019092:	6818      	ldr	r0, [r3, #0]
 8019094:	0c00      	lsrs	r0, r0, #16
 8019096:	d020      	beq.n	80190da <__multiply+0x146>
 8019098:	4663      	mov	r3, ip
 801909a:	0025      	movs	r5, r4
 801909c:	4661      	mov	r1, ip
 801909e:	2700      	movs	r7, #0
 80190a0:	681b      	ldr	r3, [r3, #0]
 80190a2:	3514      	adds	r5, #20
 80190a4:	682a      	ldr	r2, [r5, #0]
 80190a6:	680e      	ldr	r6, [r1, #0]
 80190a8:	b292      	uxth	r2, r2
 80190aa:	4342      	muls	r2, r0
 80190ac:	0c36      	lsrs	r6, r6, #16
 80190ae:	1992      	adds	r2, r2, r6
 80190b0:	19d2      	adds	r2, r2, r7
 80190b2:	0416      	lsls	r6, r2, #16
 80190b4:	b29b      	uxth	r3, r3
 80190b6:	431e      	orrs	r6, r3
 80190b8:	600e      	str	r6, [r1, #0]
 80190ba:	cd40      	ldmia	r5!, {r6}
 80190bc:	684b      	ldr	r3, [r1, #4]
 80190be:	0c36      	lsrs	r6, r6, #16
 80190c0:	4346      	muls	r6, r0
 80190c2:	b29b      	uxth	r3, r3
 80190c4:	0c12      	lsrs	r2, r2, #16
 80190c6:	18f3      	adds	r3, r6, r3
 80190c8:	189b      	adds	r3, r3, r2
 80190ca:	9a05      	ldr	r2, [sp, #20]
 80190cc:	0c1f      	lsrs	r7, r3, #16
 80190ce:	3104      	adds	r1, #4
 80190d0:	42aa      	cmp	r2, r5
 80190d2:	d8e7      	bhi.n	80190a4 <__multiply+0x110>
 80190d4:	4662      	mov	r2, ip
 80190d6:	9906      	ldr	r1, [sp, #24]
 80190d8:	5053      	str	r3, [r2, r1]
 80190da:	9b01      	ldr	r3, [sp, #4]
 80190dc:	3304      	adds	r3, #4
 80190de:	9301      	str	r3, [sp, #4]
 80190e0:	2304      	movs	r3, #4
 80190e2:	449c      	add	ip, r3
 80190e4:	e79b      	b.n	801901e <__multiply+0x8a>
 80190e6:	9b03      	ldr	r3, [sp, #12]
 80190e8:	3b01      	subs	r3, #1
 80190ea:	9303      	str	r3, [sp, #12]
 80190ec:	e79b      	b.n	8019026 <__multiply+0x92>
 80190ee:	46c0      	nop			@ (mov r8, r8)
 80190f0:	0801ba1c 	.word	0x0801ba1c
 80190f4:	0801ba2d 	.word	0x0801ba2d

080190f8 <__pow5mult>:
 80190f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80190fa:	2303      	movs	r3, #3
 80190fc:	0015      	movs	r5, r2
 80190fe:	0007      	movs	r7, r0
 8019100:	000e      	movs	r6, r1
 8019102:	401a      	ands	r2, r3
 8019104:	421d      	tst	r5, r3
 8019106:	d008      	beq.n	801911a <__pow5mult+0x22>
 8019108:	4925      	ldr	r1, [pc, #148]	@ (80191a0 <__pow5mult+0xa8>)
 801910a:	3a01      	subs	r2, #1
 801910c:	0092      	lsls	r2, r2, #2
 801910e:	5852      	ldr	r2, [r2, r1]
 8019110:	2300      	movs	r3, #0
 8019112:	0031      	movs	r1, r6
 8019114:	f7ff fe92 	bl	8018e3c <__multadd>
 8019118:	0006      	movs	r6, r0
 801911a:	10ad      	asrs	r5, r5, #2
 801911c:	d03d      	beq.n	801919a <__pow5mult+0xa2>
 801911e:	69fc      	ldr	r4, [r7, #28]
 8019120:	2c00      	cmp	r4, #0
 8019122:	d10f      	bne.n	8019144 <__pow5mult+0x4c>
 8019124:	2010      	movs	r0, #16
 8019126:	f7ff fd65 	bl	8018bf4 <malloc>
 801912a:	1e02      	subs	r2, r0, #0
 801912c:	61f8      	str	r0, [r7, #28]
 801912e:	d105      	bne.n	801913c <__pow5mult+0x44>
 8019130:	21b4      	movs	r1, #180	@ 0xb4
 8019132:	4b1c      	ldr	r3, [pc, #112]	@ (80191a4 <__pow5mult+0xac>)
 8019134:	481c      	ldr	r0, [pc, #112]	@ (80191a8 <__pow5mult+0xb0>)
 8019136:	31ff      	adds	r1, #255	@ 0xff
 8019138:	f000 fdd6 	bl	8019ce8 <__assert_func>
 801913c:	6044      	str	r4, [r0, #4]
 801913e:	6084      	str	r4, [r0, #8]
 8019140:	6004      	str	r4, [r0, #0]
 8019142:	60c4      	str	r4, [r0, #12]
 8019144:	69fb      	ldr	r3, [r7, #28]
 8019146:	689c      	ldr	r4, [r3, #8]
 8019148:	9301      	str	r3, [sp, #4]
 801914a:	2c00      	cmp	r4, #0
 801914c:	d108      	bne.n	8019160 <__pow5mult+0x68>
 801914e:	0038      	movs	r0, r7
 8019150:	4916      	ldr	r1, [pc, #88]	@ (80191ac <__pow5mult+0xb4>)
 8019152:	f7ff ff07 	bl	8018f64 <__i2b>
 8019156:	9b01      	ldr	r3, [sp, #4]
 8019158:	0004      	movs	r4, r0
 801915a:	6098      	str	r0, [r3, #8]
 801915c:	2300      	movs	r3, #0
 801915e:	6003      	str	r3, [r0, #0]
 8019160:	2301      	movs	r3, #1
 8019162:	421d      	tst	r5, r3
 8019164:	d00a      	beq.n	801917c <__pow5mult+0x84>
 8019166:	0031      	movs	r1, r6
 8019168:	0022      	movs	r2, r4
 801916a:	0038      	movs	r0, r7
 801916c:	f7ff ff12 	bl	8018f94 <__multiply>
 8019170:	0031      	movs	r1, r6
 8019172:	9001      	str	r0, [sp, #4]
 8019174:	0038      	movs	r0, r7
 8019176:	f7ff fe3d 	bl	8018df4 <_Bfree>
 801917a:	9e01      	ldr	r6, [sp, #4]
 801917c:	106d      	asrs	r5, r5, #1
 801917e:	d00c      	beq.n	801919a <__pow5mult+0xa2>
 8019180:	6820      	ldr	r0, [r4, #0]
 8019182:	2800      	cmp	r0, #0
 8019184:	d107      	bne.n	8019196 <__pow5mult+0x9e>
 8019186:	0022      	movs	r2, r4
 8019188:	0021      	movs	r1, r4
 801918a:	0038      	movs	r0, r7
 801918c:	f7ff ff02 	bl	8018f94 <__multiply>
 8019190:	2300      	movs	r3, #0
 8019192:	6020      	str	r0, [r4, #0]
 8019194:	6003      	str	r3, [r0, #0]
 8019196:	0004      	movs	r4, r0
 8019198:	e7e2      	b.n	8019160 <__pow5mult+0x68>
 801919a:	0030      	movs	r0, r6
 801919c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801919e:	46c0      	nop			@ (mov r8, r8)
 80191a0:	0801ba88 	.word	0x0801ba88
 80191a4:	0801b9ad 	.word	0x0801b9ad
 80191a8:	0801ba2d 	.word	0x0801ba2d
 80191ac:	00000271 	.word	0x00000271

080191b0 <__lshift>:
 80191b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80191b2:	000c      	movs	r4, r1
 80191b4:	0016      	movs	r6, r2
 80191b6:	6923      	ldr	r3, [r4, #16]
 80191b8:	1157      	asrs	r7, r2, #5
 80191ba:	b085      	sub	sp, #20
 80191bc:	18fb      	adds	r3, r7, r3
 80191be:	9301      	str	r3, [sp, #4]
 80191c0:	3301      	adds	r3, #1
 80191c2:	9300      	str	r3, [sp, #0]
 80191c4:	6849      	ldr	r1, [r1, #4]
 80191c6:	68a3      	ldr	r3, [r4, #8]
 80191c8:	9002      	str	r0, [sp, #8]
 80191ca:	9a00      	ldr	r2, [sp, #0]
 80191cc:	4293      	cmp	r3, r2
 80191ce:	db10      	blt.n	80191f2 <__lshift+0x42>
 80191d0:	9802      	ldr	r0, [sp, #8]
 80191d2:	f7ff fdcb 	bl	8018d6c <_Balloc>
 80191d6:	2300      	movs	r3, #0
 80191d8:	0001      	movs	r1, r0
 80191da:	0005      	movs	r5, r0
 80191dc:	001a      	movs	r2, r3
 80191de:	3114      	adds	r1, #20
 80191e0:	4298      	cmp	r0, r3
 80191e2:	d10c      	bne.n	80191fe <__lshift+0x4e>
 80191e4:	21ef      	movs	r1, #239	@ 0xef
 80191e6:	002a      	movs	r2, r5
 80191e8:	4b25      	ldr	r3, [pc, #148]	@ (8019280 <__lshift+0xd0>)
 80191ea:	4826      	ldr	r0, [pc, #152]	@ (8019284 <__lshift+0xd4>)
 80191ec:	0049      	lsls	r1, r1, #1
 80191ee:	f000 fd7b 	bl	8019ce8 <__assert_func>
 80191f2:	3101      	adds	r1, #1
 80191f4:	005b      	lsls	r3, r3, #1
 80191f6:	e7e8      	b.n	80191ca <__lshift+0x1a>
 80191f8:	0098      	lsls	r0, r3, #2
 80191fa:	500a      	str	r2, [r1, r0]
 80191fc:	3301      	adds	r3, #1
 80191fe:	42bb      	cmp	r3, r7
 8019200:	dbfa      	blt.n	80191f8 <__lshift+0x48>
 8019202:	43fb      	mvns	r3, r7
 8019204:	17db      	asrs	r3, r3, #31
 8019206:	401f      	ands	r7, r3
 8019208:	00bf      	lsls	r7, r7, #2
 801920a:	0023      	movs	r3, r4
 801920c:	201f      	movs	r0, #31
 801920e:	19c9      	adds	r1, r1, r7
 8019210:	0037      	movs	r7, r6
 8019212:	6922      	ldr	r2, [r4, #16]
 8019214:	3314      	adds	r3, #20
 8019216:	0092      	lsls	r2, r2, #2
 8019218:	189a      	adds	r2, r3, r2
 801921a:	4007      	ands	r7, r0
 801921c:	4206      	tst	r6, r0
 801921e:	d029      	beq.n	8019274 <__lshift+0xc4>
 8019220:	3001      	adds	r0, #1
 8019222:	1bc0      	subs	r0, r0, r7
 8019224:	9003      	str	r0, [sp, #12]
 8019226:	468c      	mov	ip, r1
 8019228:	2000      	movs	r0, #0
 801922a:	681e      	ldr	r6, [r3, #0]
 801922c:	40be      	lsls	r6, r7
 801922e:	4306      	orrs	r6, r0
 8019230:	4660      	mov	r0, ip
 8019232:	c040      	stmia	r0!, {r6}
 8019234:	4684      	mov	ip, r0
 8019236:	9e03      	ldr	r6, [sp, #12]
 8019238:	cb01      	ldmia	r3!, {r0}
 801923a:	40f0      	lsrs	r0, r6
 801923c:	429a      	cmp	r2, r3
 801923e:	d8f4      	bhi.n	801922a <__lshift+0x7a>
 8019240:	0026      	movs	r6, r4
 8019242:	3615      	adds	r6, #21
 8019244:	2304      	movs	r3, #4
 8019246:	42b2      	cmp	r2, r6
 8019248:	d304      	bcc.n	8019254 <__lshift+0xa4>
 801924a:	1b13      	subs	r3, r2, r4
 801924c:	3b15      	subs	r3, #21
 801924e:	089b      	lsrs	r3, r3, #2
 8019250:	3301      	adds	r3, #1
 8019252:	009b      	lsls	r3, r3, #2
 8019254:	50c8      	str	r0, [r1, r3]
 8019256:	2800      	cmp	r0, #0
 8019258:	d002      	beq.n	8019260 <__lshift+0xb0>
 801925a:	9b01      	ldr	r3, [sp, #4]
 801925c:	3302      	adds	r3, #2
 801925e:	9300      	str	r3, [sp, #0]
 8019260:	9b00      	ldr	r3, [sp, #0]
 8019262:	9802      	ldr	r0, [sp, #8]
 8019264:	3b01      	subs	r3, #1
 8019266:	0021      	movs	r1, r4
 8019268:	612b      	str	r3, [r5, #16]
 801926a:	f7ff fdc3 	bl	8018df4 <_Bfree>
 801926e:	0028      	movs	r0, r5
 8019270:	b005      	add	sp, #20
 8019272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019274:	cb01      	ldmia	r3!, {r0}
 8019276:	c101      	stmia	r1!, {r0}
 8019278:	429a      	cmp	r2, r3
 801927a:	d8fb      	bhi.n	8019274 <__lshift+0xc4>
 801927c:	e7f0      	b.n	8019260 <__lshift+0xb0>
 801927e:	46c0      	nop			@ (mov r8, r8)
 8019280:	0801ba1c 	.word	0x0801ba1c
 8019284:	0801ba2d 	.word	0x0801ba2d

08019288 <__mcmp>:
 8019288:	b530      	push	{r4, r5, lr}
 801928a:	690b      	ldr	r3, [r1, #16]
 801928c:	6904      	ldr	r4, [r0, #16]
 801928e:	0002      	movs	r2, r0
 8019290:	1ae0      	subs	r0, r4, r3
 8019292:	429c      	cmp	r4, r3
 8019294:	d10f      	bne.n	80192b6 <__mcmp+0x2e>
 8019296:	3214      	adds	r2, #20
 8019298:	009b      	lsls	r3, r3, #2
 801929a:	3114      	adds	r1, #20
 801929c:	0014      	movs	r4, r2
 801929e:	18c9      	adds	r1, r1, r3
 80192a0:	18d2      	adds	r2, r2, r3
 80192a2:	3a04      	subs	r2, #4
 80192a4:	3904      	subs	r1, #4
 80192a6:	6815      	ldr	r5, [r2, #0]
 80192a8:	680b      	ldr	r3, [r1, #0]
 80192aa:	429d      	cmp	r5, r3
 80192ac:	d004      	beq.n	80192b8 <__mcmp+0x30>
 80192ae:	2001      	movs	r0, #1
 80192b0:	429d      	cmp	r5, r3
 80192b2:	d200      	bcs.n	80192b6 <__mcmp+0x2e>
 80192b4:	3802      	subs	r0, #2
 80192b6:	bd30      	pop	{r4, r5, pc}
 80192b8:	4294      	cmp	r4, r2
 80192ba:	d3f2      	bcc.n	80192a2 <__mcmp+0x1a>
 80192bc:	e7fb      	b.n	80192b6 <__mcmp+0x2e>
	...

080192c0 <__mdiff>:
 80192c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80192c2:	000c      	movs	r4, r1
 80192c4:	b087      	sub	sp, #28
 80192c6:	9000      	str	r0, [sp, #0]
 80192c8:	0011      	movs	r1, r2
 80192ca:	0020      	movs	r0, r4
 80192cc:	0017      	movs	r7, r2
 80192ce:	f7ff ffdb 	bl	8019288 <__mcmp>
 80192d2:	1e05      	subs	r5, r0, #0
 80192d4:	d110      	bne.n	80192f8 <__mdiff+0x38>
 80192d6:	0001      	movs	r1, r0
 80192d8:	9800      	ldr	r0, [sp, #0]
 80192da:	f7ff fd47 	bl	8018d6c <_Balloc>
 80192de:	1e02      	subs	r2, r0, #0
 80192e0:	d104      	bne.n	80192ec <__mdiff+0x2c>
 80192e2:	4b40      	ldr	r3, [pc, #256]	@ (80193e4 <__mdiff+0x124>)
 80192e4:	4840      	ldr	r0, [pc, #256]	@ (80193e8 <__mdiff+0x128>)
 80192e6:	4941      	ldr	r1, [pc, #260]	@ (80193ec <__mdiff+0x12c>)
 80192e8:	f000 fcfe 	bl	8019ce8 <__assert_func>
 80192ec:	2301      	movs	r3, #1
 80192ee:	6145      	str	r5, [r0, #20]
 80192f0:	6103      	str	r3, [r0, #16]
 80192f2:	0010      	movs	r0, r2
 80192f4:	b007      	add	sp, #28
 80192f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80192f8:	2600      	movs	r6, #0
 80192fa:	42b0      	cmp	r0, r6
 80192fc:	da03      	bge.n	8019306 <__mdiff+0x46>
 80192fe:	0023      	movs	r3, r4
 8019300:	003c      	movs	r4, r7
 8019302:	001f      	movs	r7, r3
 8019304:	3601      	adds	r6, #1
 8019306:	6861      	ldr	r1, [r4, #4]
 8019308:	9800      	ldr	r0, [sp, #0]
 801930a:	f7ff fd2f 	bl	8018d6c <_Balloc>
 801930e:	1e02      	subs	r2, r0, #0
 8019310:	d103      	bne.n	801931a <__mdiff+0x5a>
 8019312:	4b34      	ldr	r3, [pc, #208]	@ (80193e4 <__mdiff+0x124>)
 8019314:	4834      	ldr	r0, [pc, #208]	@ (80193e8 <__mdiff+0x128>)
 8019316:	4936      	ldr	r1, [pc, #216]	@ (80193f0 <__mdiff+0x130>)
 8019318:	e7e6      	b.n	80192e8 <__mdiff+0x28>
 801931a:	6923      	ldr	r3, [r4, #16]
 801931c:	3414      	adds	r4, #20
 801931e:	9300      	str	r3, [sp, #0]
 8019320:	009b      	lsls	r3, r3, #2
 8019322:	18e3      	adds	r3, r4, r3
 8019324:	0021      	movs	r1, r4
 8019326:	9401      	str	r4, [sp, #4]
 8019328:	003c      	movs	r4, r7
 801932a:	9302      	str	r3, [sp, #8]
 801932c:	693b      	ldr	r3, [r7, #16]
 801932e:	3414      	adds	r4, #20
 8019330:	009b      	lsls	r3, r3, #2
 8019332:	18e3      	adds	r3, r4, r3
 8019334:	9303      	str	r3, [sp, #12]
 8019336:	0003      	movs	r3, r0
 8019338:	60c6      	str	r6, [r0, #12]
 801933a:	468c      	mov	ip, r1
 801933c:	2000      	movs	r0, #0
 801933e:	3314      	adds	r3, #20
 8019340:	9304      	str	r3, [sp, #16]
 8019342:	9305      	str	r3, [sp, #20]
 8019344:	4663      	mov	r3, ip
 8019346:	cb20      	ldmia	r3!, {r5}
 8019348:	b2a9      	uxth	r1, r5
 801934a:	000e      	movs	r6, r1
 801934c:	469c      	mov	ip, r3
 801934e:	cc08      	ldmia	r4!, {r3}
 8019350:	0c2d      	lsrs	r5, r5, #16
 8019352:	b299      	uxth	r1, r3
 8019354:	1a71      	subs	r1, r6, r1
 8019356:	1809      	adds	r1, r1, r0
 8019358:	0c1b      	lsrs	r3, r3, #16
 801935a:	1408      	asrs	r0, r1, #16
 801935c:	1aeb      	subs	r3, r5, r3
 801935e:	181b      	adds	r3, r3, r0
 8019360:	1418      	asrs	r0, r3, #16
 8019362:	b289      	uxth	r1, r1
 8019364:	041b      	lsls	r3, r3, #16
 8019366:	4319      	orrs	r1, r3
 8019368:	9b05      	ldr	r3, [sp, #20]
 801936a:	c302      	stmia	r3!, {r1}
 801936c:	9305      	str	r3, [sp, #20]
 801936e:	9b03      	ldr	r3, [sp, #12]
 8019370:	42a3      	cmp	r3, r4
 8019372:	d8e7      	bhi.n	8019344 <__mdiff+0x84>
 8019374:	0039      	movs	r1, r7
 8019376:	9c03      	ldr	r4, [sp, #12]
 8019378:	3115      	adds	r1, #21
 801937a:	2304      	movs	r3, #4
 801937c:	428c      	cmp	r4, r1
 801937e:	d304      	bcc.n	801938a <__mdiff+0xca>
 8019380:	1be3      	subs	r3, r4, r7
 8019382:	3b15      	subs	r3, #21
 8019384:	089b      	lsrs	r3, r3, #2
 8019386:	3301      	adds	r3, #1
 8019388:	009b      	lsls	r3, r3, #2
 801938a:	9901      	ldr	r1, [sp, #4]
 801938c:	18cd      	adds	r5, r1, r3
 801938e:	9904      	ldr	r1, [sp, #16]
 8019390:	002e      	movs	r6, r5
 8019392:	18cb      	adds	r3, r1, r3
 8019394:	001f      	movs	r7, r3
 8019396:	9902      	ldr	r1, [sp, #8]
 8019398:	428e      	cmp	r6, r1
 801939a:	d311      	bcc.n	80193c0 <__mdiff+0x100>
 801939c:	9c02      	ldr	r4, [sp, #8]
 801939e:	1ee9      	subs	r1, r5, #3
 80193a0:	2000      	movs	r0, #0
 80193a2:	428c      	cmp	r4, r1
 80193a4:	d304      	bcc.n	80193b0 <__mdiff+0xf0>
 80193a6:	0021      	movs	r1, r4
 80193a8:	3103      	adds	r1, #3
 80193aa:	1b49      	subs	r1, r1, r5
 80193ac:	0889      	lsrs	r1, r1, #2
 80193ae:	0088      	lsls	r0, r1, #2
 80193b0:	181b      	adds	r3, r3, r0
 80193b2:	3b04      	subs	r3, #4
 80193b4:	6819      	ldr	r1, [r3, #0]
 80193b6:	2900      	cmp	r1, #0
 80193b8:	d010      	beq.n	80193dc <__mdiff+0x11c>
 80193ba:	9b00      	ldr	r3, [sp, #0]
 80193bc:	6113      	str	r3, [r2, #16]
 80193be:	e798      	b.n	80192f2 <__mdiff+0x32>
 80193c0:	4684      	mov	ip, r0
 80193c2:	ce02      	ldmia	r6!, {r1}
 80193c4:	b288      	uxth	r0, r1
 80193c6:	4460      	add	r0, ip
 80193c8:	1400      	asrs	r0, r0, #16
 80193ca:	0c0c      	lsrs	r4, r1, #16
 80193cc:	1904      	adds	r4, r0, r4
 80193ce:	4461      	add	r1, ip
 80193d0:	1420      	asrs	r0, r4, #16
 80193d2:	b289      	uxth	r1, r1
 80193d4:	0424      	lsls	r4, r4, #16
 80193d6:	4321      	orrs	r1, r4
 80193d8:	c702      	stmia	r7!, {r1}
 80193da:	e7dc      	b.n	8019396 <__mdiff+0xd6>
 80193dc:	9900      	ldr	r1, [sp, #0]
 80193de:	3901      	subs	r1, #1
 80193e0:	9100      	str	r1, [sp, #0]
 80193e2:	e7e6      	b.n	80193b2 <__mdiff+0xf2>
 80193e4:	0801ba1c 	.word	0x0801ba1c
 80193e8:	0801ba2d 	.word	0x0801ba2d
 80193ec:	00000237 	.word	0x00000237
 80193f0:	00000245 	.word	0x00000245

080193f4 <__d2b>:
 80193f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80193f6:	2101      	movs	r1, #1
 80193f8:	0016      	movs	r6, r2
 80193fa:	001f      	movs	r7, r3
 80193fc:	f7ff fcb6 	bl	8018d6c <_Balloc>
 8019400:	1e04      	subs	r4, r0, #0
 8019402:	d105      	bne.n	8019410 <__d2b+0x1c>
 8019404:	0022      	movs	r2, r4
 8019406:	4b25      	ldr	r3, [pc, #148]	@ (801949c <__d2b+0xa8>)
 8019408:	4825      	ldr	r0, [pc, #148]	@ (80194a0 <__d2b+0xac>)
 801940a:	4926      	ldr	r1, [pc, #152]	@ (80194a4 <__d2b+0xb0>)
 801940c:	f000 fc6c 	bl	8019ce8 <__assert_func>
 8019410:	033b      	lsls	r3, r7, #12
 8019412:	007d      	lsls	r5, r7, #1
 8019414:	0b1b      	lsrs	r3, r3, #12
 8019416:	0d6d      	lsrs	r5, r5, #21
 8019418:	d002      	beq.n	8019420 <__d2b+0x2c>
 801941a:	2280      	movs	r2, #128	@ 0x80
 801941c:	0352      	lsls	r2, r2, #13
 801941e:	4313      	orrs	r3, r2
 8019420:	9301      	str	r3, [sp, #4]
 8019422:	2e00      	cmp	r6, #0
 8019424:	d025      	beq.n	8019472 <__d2b+0x7e>
 8019426:	4668      	mov	r0, sp
 8019428:	9600      	str	r6, [sp, #0]
 801942a:	f7ff fd6c 	bl	8018f06 <__lo0bits>
 801942e:	9b01      	ldr	r3, [sp, #4]
 8019430:	9900      	ldr	r1, [sp, #0]
 8019432:	2800      	cmp	r0, #0
 8019434:	d01b      	beq.n	801946e <__d2b+0x7a>
 8019436:	2220      	movs	r2, #32
 8019438:	001e      	movs	r6, r3
 801943a:	1a12      	subs	r2, r2, r0
 801943c:	4096      	lsls	r6, r2
 801943e:	0032      	movs	r2, r6
 8019440:	40c3      	lsrs	r3, r0
 8019442:	430a      	orrs	r2, r1
 8019444:	6162      	str	r2, [r4, #20]
 8019446:	9301      	str	r3, [sp, #4]
 8019448:	9e01      	ldr	r6, [sp, #4]
 801944a:	61a6      	str	r6, [r4, #24]
 801944c:	1e73      	subs	r3, r6, #1
 801944e:	419e      	sbcs	r6, r3
 8019450:	3601      	adds	r6, #1
 8019452:	6126      	str	r6, [r4, #16]
 8019454:	2d00      	cmp	r5, #0
 8019456:	d014      	beq.n	8019482 <__d2b+0x8e>
 8019458:	2635      	movs	r6, #53	@ 0x35
 801945a:	4b13      	ldr	r3, [pc, #76]	@ (80194a8 <__d2b+0xb4>)
 801945c:	18ed      	adds	r5, r5, r3
 801945e:	9b08      	ldr	r3, [sp, #32]
 8019460:	182d      	adds	r5, r5, r0
 8019462:	601d      	str	r5, [r3, #0]
 8019464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019466:	1a36      	subs	r6, r6, r0
 8019468:	601e      	str	r6, [r3, #0]
 801946a:	0020      	movs	r0, r4
 801946c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801946e:	6161      	str	r1, [r4, #20]
 8019470:	e7ea      	b.n	8019448 <__d2b+0x54>
 8019472:	a801      	add	r0, sp, #4
 8019474:	f7ff fd47 	bl	8018f06 <__lo0bits>
 8019478:	9b01      	ldr	r3, [sp, #4]
 801947a:	2601      	movs	r6, #1
 801947c:	6163      	str	r3, [r4, #20]
 801947e:	3020      	adds	r0, #32
 8019480:	e7e7      	b.n	8019452 <__d2b+0x5e>
 8019482:	4b0a      	ldr	r3, [pc, #40]	@ (80194ac <__d2b+0xb8>)
 8019484:	18c0      	adds	r0, r0, r3
 8019486:	9b08      	ldr	r3, [sp, #32]
 8019488:	6018      	str	r0, [r3, #0]
 801948a:	4b09      	ldr	r3, [pc, #36]	@ (80194b0 <__d2b+0xbc>)
 801948c:	18f3      	adds	r3, r6, r3
 801948e:	009b      	lsls	r3, r3, #2
 8019490:	18e3      	adds	r3, r4, r3
 8019492:	6958      	ldr	r0, [r3, #20]
 8019494:	f7ff fd16 	bl	8018ec4 <__hi0bits>
 8019498:	0176      	lsls	r6, r6, #5
 801949a:	e7e3      	b.n	8019464 <__d2b+0x70>
 801949c:	0801ba1c 	.word	0x0801ba1c
 80194a0:	0801ba2d 	.word	0x0801ba2d
 80194a4:	0000030f 	.word	0x0000030f
 80194a8:	fffffbcd 	.word	0xfffffbcd
 80194ac:	fffffbce 	.word	0xfffffbce
 80194b0:	3fffffff 	.word	0x3fffffff

080194b4 <__ssputs_r>:
 80194b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80194b6:	688e      	ldr	r6, [r1, #8]
 80194b8:	b085      	sub	sp, #20
 80194ba:	001f      	movs	r7, r3
 80194bc:	000c      	movs	r4, r1
 80194be:	680b      	ldr	r3, [r1, #0]
 80194c0:	9002      	str	r0, [sp, #8]
 80194c2:	9203      	str	r2, [sp, #12]
 80194c4:	42be      	cmp	r6, r7
 80194c6:	d830      	bhi.n	801952a <__ssputs_r+0x76>
 80194c8:	210c      	movs	r1, #12
 80194ca:	5e62      	ldrsh	r2, [r4, r1]
 80194cc:	2190      	movs	r1, #144	@ 0x90
 80194ce:	00c9      	lsls	r1, r1, #3
 80194d0:	420a      	tst	r2, r1
 80194d2:	d028      	beq.n	8019526 <__ssputs_r+0x72>
 80194d4:	2003      	movs	r0, #3
 80194d6:	6921      	ldr	r1, [r4, #16]
 80194d8:	1a5b      	subs	r3, r3, r1
 80194da:	9301      	str	r3, [sp, #4]
 80194dc:	6963      	ldr	r3, [r4, #20]
 80194de:	4343      	muls	r3, r0
 80194e0:	9801      	ldr	r0, [sp, #4]
 80194e2:	0fdd      	lsrs	r5, r3, #31
 80194e4:	18ed      	adds	r5, r5, r3
 80194e6:	1c7b      	adds	r3, r7, #1
 80194e8:	181b      	adds	r3, r3, r0
 80194ea:	106d      	asrs	r5, r5, #1
 80194ec:	42ab      	cmp	r3, r5
 80194ee:	d900      	bls.n	80194f2 <__ssputs_r+0x3e>
 80194f0:	001d      	movs	r5, r3
 80194f2:	0552      	lsls	r2, r2, #21
 80194f4:	d528      	bpl.n	8019548 <__ssputs_r+0x94>
 80194f6:	0029      	movs	r1, r5
 80194f8:	9802      	ldr	r0, [sp, #8]
 80194fa:	f7ff fba7 	bl	8018c4c <_malloc_r>
 80194fe:	1e06      	subs	r6, r0, #0
 8019500:	d02c      	beq.n	801955c <__ssputs_r+0xa8>
 8019502:	9a01      	ldr	r2, [sp, #4]
 8019504:	6921      	ldr	r1, [r4, #16]
 8019506:	f7fe fc9f 	bl	8017e48 <memcpy>
 801950a:	89a2      	ldrh	r2, [r4, #12]
 801950c:	4b18      	ldr	r3, [pc, #96]	@ (8019570 <__ssputs_r+0xbc>)
 801950e:	401a      	ands	r2, r3
 8019510:	2380      	movs	r3, #128	@ 0x80
 8019512:	4313      	orrs	r3, r2
 8019514:	81a3      	strh	r3, [r4, #12]
 8019516:	9b01      	ldr	r3, [sp, #4]
 8019518:	6126      	str	r6, [r4, #16]
 801951a:	18f6      	adds	r6, r6, r3
 801951c:	6026      	str	r6, [r4, #0]
 801951e:	003e      	movs	r6, r7
 8019520:	6165      	str	r5, [r4, #20]
 8019522:	1aed      	subs	r5, r5, r3
 8019524:	60a5      	str	r5, [r4, #8]
 8019526:	42be      	cmp	r6, r7
 8019528:	d900      	bls.n	801952c <__ssputs_r+0x78>
 801952a:	003e      	movs	r6, r7
 801952c:	0032      	movs	r2, r6
 801952e:	9903      	ldr	r1, [sp, #12]
 8019530:	6820      	ldr	r0, [r4, #0]
 8019532:	f000 fbb3 	bl	8019c9c <memmove>
 8019536:	2000      	movs	r0, #0
 8019538:	68a3      	ldr	r3, [r4, #8]
 801953a:	1b9b      	subs	r3, r3, r6
 801953c:	60a3      	str	r3, [r4, #8]
 801953e:	6823      	ldr	r3, [r4, #0]
 8019540:	199b      	adds	r3, r3, r6
 8019542:	6023      	str	r3, [r4, #0]
 8019544:	b005      	add	sp, #20
 8019546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019548:	002a      	movs	r2, r5
 801954a:	9802      	ldr	r0, [sp, #8]
 801954c:	f000 fc29 	bl	8019da2 <_realloc_r>
 8019550:	1e06      	subs	r6, r0, #0
 8019552:	d1e0      	bne.n	8019516 <__ssputs_r+0x62>
 8019554:	6921      	ldr	r1, [r4, #16]
 8019556:	9802      	ldr	r0, [sp, #8]
 8019558:	f7ff fb02 	bl	8018b60 <_free_r>
 801955c:	230c      	movs	r3, #12
 801955e:	2001      	movs	r0, #1
 8019560:	9a02      	ldr	r2, [sp, #8]
 8019562:	4240      	negs	r0, r0
 8019564:	6013      	str	r3, [r2, #0]
 8019566:	89a2      	ldrh	r2, [r4, #12]
 8019568:	3334      	adds	r3, #52	@ 0x34
 801956a:	4313      	orrs	r3, r2
 801956c:	81a3      	strh	r3, [r4, #12]
 801956e:	e7e9      	b.n	8019544 <__ssputs_r+0x90>
 8019570:	fffffb7f 	.word	0xfffffb7f

08019574 <_svfiprintf_r>:
 8019574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019576:	b0a1      	sub	sp, #132	@ 0x84
 8019578:	9003      	str	r0, [sp, #12]
 801957a:	001d      	movs	r5, r3
 801957c:	898b      	ldrh	r3, [r1, #12]
 801957e:	000f      	movs	r7, r1
 8019580:	0016      	movs	r6, r2
 8019582:	061b      	lsls	r3, r3, #24
 8019584:	d511      	bpl.n	80195aa <_svfiprintf_r+0x36>
 8019586:	690b      	ldr	r3, [r1, #16]
 8019588:	2b00      	cmp	r3, #0
 801958a:	d10e      	bne.n	80195aa <_svfiprintf_r+0x36>
 801958c:	2140      	movs	r1, #64	@ 0x40
 801958e:	f7ff fb5d 	bl	8018c4c <_malloc_r>
 8019592:	6038      	str	r0, [r7, #0]
 8019594:	6138      	str	r0, [r7, #16]
 8019596:	2800      	cmp	r0, #0
 8019598:	d105      	bne.n	80195a6 <_svfiprintf_r+0x32>
 801959a:	230c      	movs	r3, #12
 801959c:	9a03      	ldr	r2, [sp, #12]
 801959e:	6013      	str	r3, [r2, #0]
 80195a0:	2001      	movs	r0, #1
 80195a2:	4240      	negs	r0, r0
 80195a4:	e0cf      	b.n	8019746 <_svfiprintf_r+0x1d2>
 80195a6:	2340      	movs	r3, #64	@ 0x40
 80195a8:	617b      	str	r3, [r7, #20]
 80195aa:	2300      	movs	r3, #0
 80195ac:	ac08      	add	r4, sp, #32
 80195ae:	6163      	str	r3, [r4, #20]
 80195b0:	3320      	adds	r3, #32
 80195b2:	7663      	strb	r3, [r4, #25]
 80195b4:	3310      	adds	r3, #16
 80195b6:	76a3      	strb	r3, [r4, #26]
 80195b8:	9507      	str	r5, [sp, #28]
 80195ba:	0035      	movs	r5, r6
 80195bc:	782b      	ldrb	r3, [r5, #0]
 80195be:	2b00      	cmp	r3, #0
 80195c0:	d001      	beq.n	80195c6 <_svfiprintf_r+0x52>
 80195c2:	2b25      	cmp	r3, #37	@ 0x25
 80195c4:	d148      	bne.n	8019658 <_svfiprintf_r+0xe4>
 80195c6:	1bab      	subs	r3, r5, r6
 80195c8:	9305      	str	r3, [sp, #20]
 80195ca:	42b5      	cmp	r5, r6
 80195cc:	d00b      	beq.n	80195e6 <_svfiprintf_r+0x72>
 80195ce:	0032      	movs	r2, r6
 80195d0:	0039      	movs	r1, r7
 80195d2:	9803      	ldr	r0, [sp, #12]
 80195d4:	f7ff ff6e 	bl	80194b4 <__ssputs_r>
 80195d8:	3001      	adds	r0, #1
 80195da:	d100      	bne.n	80195de <_svfiprintf_r+0x6a>
 80195dc:	e0ae      	b.n	801973c <_svfiprintf_r+0x1c8>
 80195de:	6963      	ldr	r3, [r4, #20]
 80195e0:	9a05      	ldr	r2, [sp, #20]
 80195e2:	189b      	adds	r3, r3, r2
 80195e4:	6163      	str	r3, [r4, #20]
 80195e6:	782b      	ldrb	r3, [r5, #0]
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	d100      	bne.n	80195ee <_svfiprintf_r+0x7a>
 80195ec:	e0a6      	b.n	801973c <_svfiprintf_r+0x1c8>
 80195ee:	2201      	movs	r2, #1
 80195f0:	2300      	movs	r3, #0
 80195f2:	4252      	negs	r2, r2
 80195f4:	6062      	str	r2, [r4, #4]
 80195f6:	a904      	add	r1, sp, #16
 80195f8:	3254      	adds	r2, #84	@ 0x54
 80195fa:	1852      	adds	r2, r2, r1
 80195fc:	1c6e      	adds	r6, r5, #1
 80195fe:	6023      	str	r3, [r4, #0]
 8019600:	60e3      	str	r3, [r4, #12]
 8019602:	60a3      	str	r3, [r4, #8]
 8019604:	7013      	strb	r3, [r2, #0]
 8019606:	65a3      	str	r3, [r4, #88]	@ 0x58
 8019608:	4b54      	ldr	r3, [pc, #336]	@ (801975c <_svfiprintf_r+0x1e8>)
 801960a:	2205      	movs	r2, #5
 801960c:	0018      	movs	r0, r3
 801960e:	7831      	ldrb	r1, [r6, #0]
 8019610:	9305      	str	r3, [sp, #20]
 8019612:	f7fe fc0e 	bl	8017e32 <memchr>
 8019616:	1c75      	adds	r5, r6, #1
 8019618:	2800      	cmp	r0, #0
 801961a:	d11f      	bne.n	801965c <_svfiprintf_r+0xe8>
 801961c:	6822      	ldr	r2, [r4, #0]
 801961e:	06d3      	lsls	r3, r2, #27
 8019620:	d504      	bpl.n	801962c <_svfiprintf_r+0xb8>
 8019622:	2353      	movs	r3, #83	@ 0x53
 8019624:	a904      	add	r1, sp, #16
 8019626:	185b      	adds	r3, r3, r1
 8019628:	2120      	movs	r1, #32
 801962a:	7019      	strb	r1, [r3, #0]
 801962c:	0713      	lsls	r3, r2, #28
 801962e:	d504      	bpl.n	801963a <_svfiprintf_r+0xc6>
 8019630:	2353      	movs	r3, #83	@ 0x53
 8019632:	a904      	add	r1, sp, #16
 8019634:	185b      	adds	r3, r3, r1
 8019636:	212b      	movs	r1, #43	@ 0x2b
 8019638:	7019      	strb	r1, [r3, #0]
 801963a:	7833      	ldrb	r3, [r6, #0]
 801963c:	2b2a      	cmp	r3, #42	@ 0x2a
 801963e:	d016      	beq.n	801966e <_svfiprintf_r+0xfa>
 8019640:	0035      	movs	r5, r6
 8019642:	2100      	movs	r1, #0
 8019644:	200a      	movs	r0, #10
 8019646:	68e3      	ldr	r3, [r4, #12]
 8019648:	782a      	ldrb	r2, [r5, #0]
 801964a:	1c6e      	adds	r6, r5, #1
 801964c:	3a30      	subs	r2, #48	@ 0x30
 801964e:	2a09      	cmp	r2, #9
 8019650:	d950      	bls.n	80196f4 <_svfiprintf_r+0x180>
 8019652:	2900      	cmp	r1, #0
 8019654:	d111      	bne.n	801967a <_svfiprintf_r+0x106>
 8019656:	e017      	b.n	8019688 <_svfiprintf_r+0x114>
 8019658:	3501      	adds	r5, #1
 801965a:	e7af      	b.n	80195bc <_svfiprintf_r+0x48>
 801965c:	9b05      	ldr	r3, [sp, #20]
 801965e:	6822      	ldr	r2, [r4, #0]
 8019660:	1ac0      	subs	r0, r0, r3
 8019662:	2301      	movs	r3, #1
 8019664:	4083      	lsls	r3, r0
 8019666:	4313      	orrs	r3, r2
 8019668:	002e      	movs	r6, r5
 801966a:	6023      	str	r3, [r4, #0]
 801966c:	e7cc      	b.n	8019608 <_svfiprintf_r+0x94>
 801966e:	9b07      	ldr	r3, [sp, #28]
 8019670:	1d19      	adds	r1, r3, #4
 8019672:	681b      	ldr	r3, [r3, #0]
 8019674:	9107      	str	r1, [sp, #28]
 8019676:	2b00      	cmp	r3, #0
 8019678:	db01      	blt.n	801967e <_svfiprintf_r+0x10a>
 801967a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801967c:	e004      	b.n	8019688 <_svfiprintf_r+0x114>
 801967e:	425b      	negs	r3, r3
 8019680:	60e3      	str	r3, [r4, #12]
 8019682:	2302      	movs	r3, #2
 8019684:	4313      	orrs	r3, r2
 8019686:	6023      	str	r3, [r4, #0]
 8019688:	782b      	ldrb	r3, [r5, #0]
 801968a:	2b2e      	cmp	r3, #46	@ 0x2e
 801968c:	d10c      	bne.n	80196a8 <_svfiprintf_r+0x134>
 801968e:	786b      	ldrb	r3, [r5, #1]
 8019690:	2b2a      	cmp	r3, #42	@ 0x2a
 8019692:	d134      	bne.n	80196fe <_svfiprintf_r+0x18a>
 8019694:	9b07      	ldr	r3, [sp, #28]
 8019696:	3502      	adds	r5, #2
 8019698:	1d1a      	adds	r2, r3, #4
 801969a:	681b      	ldr	r3, [r3, #0]
 801969c:	9207      	str	r2, [sp, #28]
 801969e:	2b00      	cmp	r3, #0
 80196a0:	da01      	bge.n	80196a6 <_svfiprintf_r+0x132>
 80196a2:	2301      	movs	r3, #1
 80196a4:	425b      	negs	r3, r3
 80196a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80196a8:	4e2d      	ldr	r6, [pc, #180]	@ (8019760 <_svfiprintf_r+0x1ec>)
 80196aa:	2203      	movs	r2, #3
 80196ac:	0030      	movs	r0, r6
 80196ae:	7829      	ldrb	r1, [r5, #0]
 80196b0:	f7fe fbbf 	bl	8017e32 <memchr>
 80196b4:	2800      	cmp	r0, #0
 80196b6:	d006      	beq.n	80196c6 <_svfiprintf_r+0x152>
 80196b8:	2340      	movs	r3, #64	@ 0x40
 80196ba:	1b80      	subs	r0, r0, r6
 80196bc:	4083      	lsls	r3, r0
 80196be:	6822      	ldr	r2, [r4, #0]
 80196c0:	3501      	adds	r5, #1
 80196c2:	4313      	orrs	r3, r2
 80196c4:	6023      	str	r3, [r4, #0]
 80196c6:	7829      	ldrb	r1, [r5, #0]
 80196c8:	2206      	movs	r2, #6
 80196ca:	4826      	ldr	r0, [pc, #152]	@ (8019764 <_svfiprintf_r+0x1f0>)
 80196cc:	1c6e      	adds	r6, r5, #1
 80196ce:	7621      	strb	r1, [r4, #24]
 80196d0:	f7fe fbaf 	bl	8017e32 <memchr>
 80196d4:	2800      	cmp	r0, #0
 80196d6:	d038      	beq.n	801974a <_svfiprintf_r+0x1d6>
 80196d8:	4b23      	ldr	r3, [pc, #140]	@ (8019768 <_svfiprintf_r+0x1f4>)
 80196da:	2b00      	cmp	r3, #0
 80196dc:	d122      	bne.n	8019724 <_svfiprintf_r+0x1b0>
 80196de:	2207      	movs	r2, #7
 80196e0:	9b07      	ldr	r3, [sp, #28]
 80196e2:	3307      	adds	r3, #7
 80196e4:	4393      	bics	r3, r2
 80196e6:	3308      	adds	r3, #8
 80196e8:	9307      	str	r3, [sp, #28]
 80196ea:	6963      	ldr	r3, [r4, #20]
 80196ec:	9a04      	ldr	r2, [sp, #16]
 80196ee:	189b      	adds	r3, r3, r2
 80196f0:	6163      	str	r3, [r4, #20]
 80196f2:	e762      	b.n	80195ba <_svfiprintf_r+0x46>
 80196f4:	4343      	muls	r3, r0
 80196f6:	0035      	movs	r5, r6
 80196f8:	2101      	movs	r1, #1
 80196fa:	189b      	adds	r3, r3, r2
 80196fc:	e7a4      	b.n	8019648 <_svfiprintf_r+0xd4>
 80196fe:	2300      	movs	r3, #0
 8019700:	200a      	movs	r0, #10
 8019702:	0019      	movs	r1, r3
 8019704:	3501      	adds	r5, #1
 8019706:	6063      	str	r3, [r4, #4]
 8019708:	782a      	ldrb	r2, [r5, #0]
 801970a:	1c6e      	adds	r6, r5, #1
 801970c:	3a30      	subs	r2, #48	@ 0x30
 801970e:	2a09      	cmp	r2, #9
 8019710:	d903      	bls.n	801971a <_svfiprintf_r+0x1a6>
 8019712:	2b00      	cmp	r3, #0
 8019714:	d0c8      	beq.n	80196a8 <_svfiprintf_r+0x134>
 8019716:	9109      	str	r1, [sp, #36]	@ 0x24
 8019718:	e7c6      	b.n	80196a8 <_svfiprintf_r+0x134>
 801971a:	4341      	muls	r1, r0
 801971c:	0035      	movs	r5, r6
 801971e:	2301      	movs	r3, #1
 8019720:	1889      	adds	r1, r1, r2
 8019722:	e7f1      	b.n	8019708 <_svfiprintf_r+0x194>
 8019724:	aa07      	add	r2, sp, #28
 8019726:	9200      	str	r2, [sp, #0]
 8019728:	0021      	movs	r1, r4
 801972a:	003a      	movs	r2, r7
 801972c:	4b0f      	ldr	r3, [pc, #60]	@ (801976c <_svfiprintf_r+0x1f8>)
 801972e:	9803      	ldr	r0, [sp, #12]
 8019730:	f7fd fd8c 	bl	801724c <_printf_float>
 8019734:	9004      	str	r0, [sp, #16]
 8019736:	9b04      	ldr	r3, [sp, #16]
 8019738:	3301      	adds	r3, #1
 801973a:	d1d6      	bne.n	80196ea <_svfiprintf_r+0x176>
 801973c:	89bb      	ldrh	r3, [r7, #12]
 801973e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8019740:	065b      	lsls	r3, r3, #25
 8019742:	d500      	bpl.n	8019746 <_svfiprintf_r+0x1d2>
 8019744:	e72c      	b.n	80195a0 <_svfiprintf_r+0x2c>
 8019746:	b021      	add	sp, #132	@ 0x84
 8019748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801974a:	aa07      	add	r2, sp, #28
 801974c:	9200      	str	r2, [sp, #0]
 801974e:	0021      	movs	r1, r4
 8019750:	003a      	movs	r2, r7
 8019752:	4b06      	ldr	r3, [pc, #24]	@ (801976c <_svfiprintf_r+0x1f8>)
 8019754:	9803      	ldr	r0, [sp, #12]
 8019756:	f7fe f827 	bl	80177a8 <_printf_i>
 801975a:	e7eb      	b.n	8019734 <_svfiprintf_r+0x1c0>
 801975c:	0801bb88 	.word	0x0801bb88
 8019760:	0801bb8e 	.word	0x0801bb8e
 8019764:	0801bb92 	.word	0x0801bb92
 8019768:	0801724d 	.word	0x0801724d
 801976c:	080194b5 	.word	0x080194b5

08019770 <__sfputc_r>:
 8019770:	6893      	ldr	r3, [r2, #8]
 8019772:	b510      	push	{r4, lr}
 8019774:	3b01      	subs	r3, #1
 8019776:	6093      	str	r3, [r2, #8]
 8019778:	2b00      	cmp	r3, #0
 801977a:	da04      	bge.n	8019786 <__sfputc_r+0x16>
 801977c:	6994      	ldr	r4, [r2, #24]
 801977e:	42a3      	cmp	r3, r4
 8019780:	db07      	blt.n	8019792 <__sfputc_r+0x22>
 8019782:	290a      	cmp	r1, #10
 8019784:	d005      	beq.n	8019792 <__sfputc_r+0x22>
 8019786:	6813      	ldr	r3, [r2, #0]
 8019788:	1c58      	adds	r0, r3, #1
 801978a:	6010      	str	r0, [r2, #0]
 801978c:	7019      	strb	r1, [r3, #0]
 801978e:	0008      	movs	r0, r1
 8019790:	bd10      	pop	{r4, pc}
 8019792:	f000 f9e2 	bl	8019b5a <__swbuf_r>
 8019796:	0001      	movs	r1, r0
 8019798:	e7f9      	b.n	801978e <__sfputc_r+0x1e>

0801979a <__sfputs_r>:
 801979a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801979c:	0006      	movs	r6, r0
 801979e:	000f      	movs	r7, r1
 80197a0:	0014      	movs	r4, r2
 80197a2:	18d5      	adds	r5, r2, r3
 80197a4:	42ac      	cmp	r4, r5
 80197a6:	d101      	bne.n	80197ac <__sfputs_r+0x12>
 80197a8:	2000      	movs	r0, #0
 80197aa:	e007      	b.n	80197bc <__sfputs_r+0x22>
 80197ac:	7821      	ldrb	r1, [r4, #0]
 80197ae:	003a      	movs	r2, r7
 80197b0:	0030      	movs	r0, r6
 80197b2:	f7ff ffdd 	bl	8019770 <__sfputc_r>
 80197b6:	3401      	adds	r4, #1
 80197b8:	1c43      	adds	r3, r0, #1
 80197ba:	d1f3      	bne.n	80197a4 <__sfputs_r+0xa>
 80197bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080197c0 <_vfiprintf_r>:
 80197c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197c2:	b0a1      	sub	sp, #132	@ 0x84
 80197c4:	000f      	movs	r7, r1
 80197c6:	0015      	movs	r5, r2
 80197c8:	001e      	movs	r6, r3
 80197ca:	9003      	str	r0, [sp, #12]
 80197cc:	2800      	cmp	r0, #0
 80197ce:	d004      	beq.n	80197da <_vfiprintf_r+0x1a>
 80197d0:	6a03      	ldr	r3, [r0, #32]
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d101      	bne.n	80197da <_vfiprintf_r+0x1a>
 80197d6:	f7fe f985 	bl	8017ae4 <__sinit>
 80197da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80197dc:	07db      	lsls	r3, r3, #31
 80197de:	d405      	bmi.n	80197ec <_vfiprintf_r+0x2c>
 80197e0:	89bb      	ldrh	r3, [r7, #12]
 80197e2:	059b      	lsls	r3, r3, #22
 80197e4:	d402      	bmi.n	80197ec <_vfiprintf_r+0x2c>
 80197e6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80197e8:	f7fe fb21 	bl	8017e2e <__retarget_lock_acquire_recursive>
 80197ec:	89bb      	ldrh	r3, [r7, #12]
 80197ee:	071b      	lsls	r3, r3, #28
 80197f0:	d502      	bpl.n	80197f8 <_vfiprintf_r+0x38>
 80197f2:	693b      	ldr	r3, [r7, #16]
 80197f4:	2b00      	cmp	r3, #0
 80197f6:	d113      	bne.n	8019820 <_vfiprintf_r+0x60>
 80197f8:	0039      	movs	r1, r7
 80197fa:	9803      	ldr	r0, [sp, #12]
 80197fc:	f000 f9f0 	bl	8019be0 <__swsetup_r>
 8019800:	2800      	cmp	r0, #0
 8019802:	d00d      	beq.n	8019820 <_vfiprintf_r+0x60>
 8019804:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019806:	07db      	lsls	r3, r3, #31
 8019808:	d503      	bpl.n	8019812 <_vfiprintf_r+0x52>
 801980a:	2001      	movs	r0, #1
 801980c:	4240      	negs	r0, r0
 801980e:	b021      	add	sp, #132	@ 0x84
 8019810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019812:	89bb      	ldrh	r3, [r7, #12]
 8019814:	059b      	lsls	r3, r3, #22
 8019816:	d4f8      	bmi.n	801980a <_vfiprintf_r+0x4a>
 8019818:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801981a:	f7fe fb09 	bl	8017e30 <__retarget_lock_release_recursive>
 801981e:	e7f4      	b.n	801980a <_vfiprintf_r+0x4a>
 8019820:	2300      	movs	r3, #0
 8019822:	ac08      	add	r4, sp, #32
 8019824:	6163      	str	r3, [r4, #20]
 8019826:	3320      	adds	r3, #32
 8019828:	7663      	strb	r3, [r4, #25]
 801982a:	3310      	adds	r3, #16
 801982c:	76a3      	strb	r3, [r4, #26]
 801982e:	9607      	str	r6, [sp, #28]
 8019830:	002e      	movs	r6, r5
 8019832:	7833      	ldrb	r3, [r6, #0]
 8019834:	2b00      	cmp	r3, #0
 8019836:	d001      	beq.n	801983c <_vfiprintf_r+0x7c>
 8019838:	2b25      	cmp	r3, #37	@ 0x25
 801983a:	d148      	bne.n	80198ce <_vfiprintf_r+0x10e>
 801983c:	1b73      	subs	r3, r6, r5
 801983e:	9305      	str	r3, [sp, #20]
 8019840:	42ae      	cmp	r6, r5
 8019842:	d00b      	beq.n	801985c <_vfiprintf_r+0x9c>
 8019844:	002a      	movs	r2, r5
 8019846:	0039      	movs	r1, r7
 8019848:	9803      	ldr	r0, [sp, #12]
 801984a:	f7ff ffa6 	bl	801979a <__sfputs_r>
 801984e:	3001      	adds	r0, #1
 8019850:	d100      	bne.n	8019854 <_vfiprintf_r+0x94>
 8019852:	e0ae      	b.n	80199b2 <_vfiprintf_r+0x1f2>
 8019854:	6963      	ldr	r3, [r4, #20]
 8019856:	9a05      	ldr	r2, [sp, #20]
 8019858:	189b      	adds	r3, r3, r2
 801985a:	6163      	str	r3, [r4, #20]
 801985c:	7833      	ldrb	r3, [r6, #0]
 801985e:	2b00      	cmp	r3, #0
 8019860:	d100      	bne.n	8019864 <_vfiprintf_r+0xa4>
 8019862:	e0a6      	b.n	80199b2 <_vfiprintf_r+0x1f2>
 8019864:	2201      	movs	r2, #1
 8019866:	2300      	movs	r3, #0
 8019868:	4252      	negs	r2, r2
 801986a:	6062      	str	r2, [r4, #4]
 801986c:	a904      	add	r1, sp, #16
 801986e:	3254      	adds	r2, #84	@ 0x54
 8019870:	1852      	adds	r2, r2, r1
 8019872:	1c75      	adds	r5, r6, #1
 8019874:	6023      	str	r3, [r4, #0]
 8019876:	60e3      	str	r3, [r4, #12]
 8019878:	60a3      	str	r3, [r4, #8]
 801987a:	7013      	strb	r3, [r2, #0]
 801987c:	65a3      	str	r3, [r4, #88]	@ 0x58
 801987e:	4b59      	ldr	r3, [pc, #356]	@ (80199e4 <_vfiprintf_r+0x224>)
 8019880:	2205      	movs	r2, #5
 8019882:	0018      	movs	r0, r3
 8019884:	7829      	ldrb	r1, [r5, #0]
 8019886:	9305      	str	r3, [sp, #20]
 8019888:	f7fe fad3 	bl	8017e32 <memchr>
 801988c:	1c6e      	adds	r6, r5, #1
 801988e:	2800      	cmp	r0, #0
 8019890:	d11f      	bne.n	80198d2 <_vfiprintf_r+0x112>
 8019892:	6822      	ldr	r2, [r4, #0]
 8019894:	06d3      	lsls	r3, r2, #27
 8019896:	d504      	bpl.n	80198a2 <_vfiprintf_r+0xe2>
 8019898:	2353      	movs	r3, #83	@ 0x53
 801989a:	a904      	add	r1, sp, #16
 801989c:	185b      	adds	r3, r3, r1
 801989e:	2120      	movs	r1, #32
 80198a0:	7019      	strb	r1, [r3, #0]
 80198a2:	0713      	lsls	r3, r2, #28
 80198a4:	d504      	bpl.n	80198b0 <_vfiprintf_r+0xf0>
 80198a6:	2353      	movs	r3, #83	@ 0x53
 80198a8:	a904      	add	r1, sp, #16
 80198aa:	185b      	adds	r3, r3, r1
 80198ac:	212b      	movs	r1, #43	@ 0x2b
 80198ae:	7019      	strb	r1, [r3, #0]
 80198b0:	782b      	ldrb	r3, [r5, #0]
 80198b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80198b4:	d016      	beq.n	80198e4 <_vfiprintf_r+0x124>
 80198b6:	002e      	movs	r6, r5
 80198b8:	2100      	movs	r1, #0
 80198ba:	200a      	movs	r0, #10
 80198bc:	68e3      	ldr	r3, [r4, #12]
 80198be:	7832      	ldrb	r2, [r6, #0]
 80198c0:	1c75      	adds	r5, r6, #1
 80198c2:	3a30      	subs	r2, #48	@ 0x30
 80198c4:	2a09      	cmp	r2, #9
 80198c6:	d950      	bls.n	801996a <_vfiprintf_r+0x1aa>
 80198c8:	2900      	cmp	r1, #0
 80198ca:	d111      	bne.n	80198f0 <_vfiprintf_r+0x130>
 80198cc:	e017      	b.n	80198fe <_vfiprintf_r+0x13e>
 80198ce:	3601      	adds	r6, #1
 80198d0:	e7af      	b.n	8019832 <_vfiprintf_r+0x72>
 80198d2:	9b05      	ldr	r3, [sp, #20]
 80198d4:	6822      	ldr	r2, [r4, #0]
 80198d6:	1ac0      	subs	r0, r0, r3
 80198d8:	2301      	movs	r3, #1
 80198da:	4083      	lsls	r3, r0
 80198dc:	4313      	orrs	r3, r2
 80198de:	0035      	movs	r5, r6
 80198e0:	6023      	str	r3, [r4, #0]
 80198e2:	e7cc      	b.n	801987e <_vfiprintf_r+0xbe>
 80198e4:	9b07      	ldr	r3, [sp, #28]
 80198e6:	1d19      	adds	r1, r3, #4
 80198e8:	681b      	ldr	r3, [r3, #0]
 80198ea:	9107      	str	r1, [sp, #28]
 80198ec:	2b00      	cmp	r3, #0
 80198ee:	db01      	blt.n	80198f4 <_vfiprintf_r+0x134>
 80198f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80198f2:	e004      	b.n	80198fe <_vfiprintf_r+0x13e>
 80198f4:	425b      	negs	r3, r3
 80198f6:	60e3      	str	r3, [r4, #12]
 80198f8:	2302      	movs	r3, #2
 80198fa:	4313      	orrs	r3, r2
 80198fc:	6023      	str	r3, [r4, #0]
 80198fe:	7833      	ldrb	r3, [r6, #0]
 8019900:	2b2e      	cmp	r3, #46	@ 0x2e
 8019902:	d10c      	bne.n	801991e <_vfiprintf_r+0x15e>
 8019904:	7873      	ldrb	r3, [r6, #1]
 8019906:	2b2a      	cmp	r3, #42	@ 0x2a
 8019908:	d134      	bne.n	8019974 <_vfiprintf_r+0x1b4>
 801990a:	9b07      	ldr	r3, [sp, #28]
 801990c:	3602      	adds	r6, #2
 801990e:	1d1a      	adds	r2, r3, #4
 8019910:	681b      	ldr	r3, [r3, #0]
 8019912:	9207      	str	r2, [sp, #28]
 8019914:	2b00      	cmp	r3, #0
 8019916:	da01      	bge.n	801991c <_vfiprintf_r+0x15c>
 8019918:	2301      	movs	r3, #1
 801991a:	425b      	negs	r3, r3
 801991c:	9309      	str	r3, [sp, #36]	@ 0x24
 801991e:	4d32      	ldr	r5, [pc, #200]	@ (80199e8 <_vfiprintf_r+0x228>)
 8019920:	2203      	movs	r2, #3
 8019922:	0028      	movs	r0, r5
 8019924:	7831      	ldrb	r1, [r6, #0]
 8019926:	f7fe fa84 	bl	8017e32 <memchr>
 801992a:	2800      	cmp	r0, #0
 801992c:	d006      	beq.n	801993c <_vfiprintf_r+0x17c>
 801992e:	2340      	movs	r3, #64	@ 0x40
 8019930:	1b40      	subs	r0, r0, r5
 8019932:	4083      	lsls	r3, r0
 8019934:	6822      	ldr	r2, [r4, #0]
 8019936:	3601      	adds	r6, #1
 8019938:	4313      	orrs	r3, r2
 801993a:	6023      	str	r3, [r4, #0]
 801993c:	7831      	ldrb	r1, [r6, #0]
 801993e:	2206      	movs	r2, #6
 8019940:	482a      	ldr	r0, [pc, #168]	@ (80199ec <_vfiprintf_r+0x22c>)
 8019942:	1c75      	adds	r5, r6, #1
 8019944:	7621      	strb	r1, [r4, #24]
 8019946:	f7fe fa74 	bl	8017e32 <memchr>
 801994a:	2800      	cmp	r0, #0
 801994c:	d040      	beq.n	80199d0 <_vfiprintf_r+0x210>
 801994e:	4b28      	ldr	r3, [pc, #160]	@ (80199f0 <_vfiprintf_r+0x230>)
 8019950:	2b00      	cmp	r3, #0
 8019952:	d122      	bne.n	801999a <_vfiprintf_r+0x1da>
 8019954:	2207      	movs	r2, #7
 8019956:	9b07      	ldr	r3, [sp, #28]
 8019958:	3307      	adds	r3, #7
 801995a:	4393      	bics	r3, r2
 801995c:	3308      	adds	r3, #8
 801995e:	9307      	str	r3, [sp, #28]
 8019960:	6963      	ldr	r3, [r4, #20]
 8019962:	9a04      	ldr	r2, [sp, #16]
 8019964:	189b      	adds	r3, r3, r2
 8019966:	6163      	str	r3, [r4, #20]
 8019968:	e762      	b.n	8019830 <_vfiprintf_r+0x70>
 801996a:	4343      	muls	r3, r0
 801996c:	002e      	movs	r6, r5
 801996e:	2101      	movs	r1, #1
 8019970:	189b      	adds	r3, r3, r2
 8019972:	e7a4      	b.n	80198be <_vfiprintf_r+0xfe>
 8019974:	2300      	movs	r3, #0
 8019976:	200a      	movs	r0, #10
 8019978:	0019      	movs	r1, r3
 801997a:	3601      	adds	r6, #1
 801997c:	6063      	str	r3, [r4, #4]
 801997e:	7832      	ldrb	r2, [r6, #0]
 8019980:	1c75      	adds	r5, r6, #1
 8019982:	3a30      	subs	r2, #48	@ 0x30
 8019984:	2a09      	cmp	r2, #9
 8019986:	d903      	bls.n	8019990 <_vfiprintf_r+0x1d0>
 8019988:	2b00      	cmp	r3, #0
 801998a:	d0c8      	beq.n	801991e <_vfiprintf_r+0x15e>
 801998c:	9109      	str	r1, [sp, #36]	@ 0x24
 801998e:	e7c6      	b.n	801991e <_vfiprintf_r+0x15e>
 8019990:	4341      	muls	r1, r0
 8019992:	002e      	movs	r6, r5
 8019994:	2301      	movs	r3, #1
 8019996:	1889      	adds	r1, r1, r2
 8019998:	e7f1      	b.n	801997e <_vfiprintf_r+0x1be>
 801999a:	aa07      	add	r2, sp, #28
 801999c:	9200      	str	r2, [sp, #0]
 801999e:	0021      	movs	r1, r4
 80199a0:	003a      	movs	r2, r7
 80199a2:	4b14      	ldr	r3, [pc, #80]	@ (80199f4 <_vfiprintf_r+0x234>)
 80199a4:	9803      	ldr	r0, [sp, #12]
 80199a6:	f7fd fc51 	bl	801724c <_printf_float>
 80199aa:	9004      	str	r0, [sp, #16]
 80199ac:	9b04      	ldr	r3, [sp, #16]
 80199ae:	3301      	adds	r3, #1
 80199b0:	d1d6      	bne.n	8019960 <_vfiprintf_r+0x1a0>
 80199b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80199b4:	07db      	lsls	r3, r3, #31
 80199b6:	d405      	bmi.n	80199c4 <_vfiprintf_r+0x204>
 80199b8:	89bb      	ldrh	r3, [r7, #12]
 80199ba:	059b      	lsls	r3, r3, #22
 80199bc:	d402      	bmi.n	80199c4 <_vfiprintf_r+0x204>
 80199be:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80199c0:	f7fe fa36 	bl	8017e30 <__retarget_lock_release_recursive>
 80199c4:	89bb      	ldrh	r3, [r7, #12]
 80199c6:	065b      	lsls	r3, r3, #25
 80199c8:	d500      	bpl.n	80199cc <_vfiprintf_r+0x20c>
 80199ca:	e71e      	b.n	801980a <_vfiprintf_r+0x4a>
 80199cc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80199ce:	e71e      	b.n	801980e <_vfiprintf_r+0x4e>
 80199d0:	aa07      	add	r2, sp, #28
 80199d2:	9200      	str	r2, [sp, #0]
 80199d4:	0021      	movs	r1, r4
 80199d6:	003a      	movs	r2, r7
 80199d8:	4b06      	ldr	r3, [pc, #24]	@ (80199f4 <_vfiprintf_r+0x234>)
 80199da:	9803      	ldr	r0, [sp, #12]
 80199dc:	f7fd fee4 	bl	80177a8 <_printf_i>
 80199e0:	e7e3      	b.n	80199aa <_vfiprintf_r+0x1ea>
 80199e2:	46c0      	nop			@ (mov r8, r8)
 80199e4:	0801bb88 	.word	0x0801bb88
 80199e8:	0801bb8e 	.word	0x0801bb8e
 80199ec:	0801bb92 	.word	0x0801bb92
 80199f0:	0801724d 	.word	0x0801724d
 80199f4:	0801979b 	.word	0x0801979b

080199f8 <__sflush_r>:
 80199f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80199fa:	220c      	movs	r2, #12
 80199fc:	5e8b      	ldrsh	r3, [r1, r2]
 80199fe:	0005      	movs	r5, r0
 8019a00:	000c      	movs	r4, r1
 8019a02:	071a      	lsls	r2, r3, #28
 8019a04:	d456      	bmi.n	8019ab4 <__sflush_r+0xbc>
 8019a06:	684a      	ldr	r2, [r1, #4]
 8019a08:	2a00      	cmp	r2, #0
 8019a0a:	dc02      	bgt.n	8019a12 <__sflush_r+0x1a>
 8019a0c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8019a0e:	2a00      	cmp	r2, #0
 8019a10:	dd4e      	ble.n	8019ab0 <__sflush_r+0xb8>
 8019a12:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8019a14:	2f00      	cmp	r7, #0
 8019a16:	d04b      	beq.n	8019ab0 <__sflush_r+0xb8>
 8019a18:	2200      	movs	r2, #0
 8019a1a:	2080      	movs	r0, #128	@ 0x80
 8019a1c:	682e      	ldr	r6, [r5, #0]
 8019a1e:	602a      	str	r2, [r5, #0]
 8019a20:	001a      	movs	r2, r3
 8019a22:	0140      	lsls	r0, r0, #5
 8019a24:	6a21      	ldr	r1, [r4, #32]
 8019a26:	4002      	ands	r2, r0
 8019a28:	4203      	tst	r3, r0
 8019a2a:	d033      	beq.n	8019a94 <__sflush_r+0x9c>
 8019a2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019a2e:	89a3      	ldrh	r3, [r4, #12]
 8019a30:	075b      	lsls	r3, r3, #29
 8019a32:	d506      	bpl.n	8019a42 <__sflush_r+0x4a>
 8019a34:	6863      	ldr	r3, [r4, #4]
 8019a36:	1ad2      	subs	r2, r2, r3
 8019a38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019a3a:	2b00      	cmp	r3, #0
 8019a3c:	d001      	beq.n	8019a42 <__sflush_r+0x4a>
 8019a3e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019a40:	1ad2      	subs	r2, r2, r3
 8019a42:	2300      	movs	r3, #0
 8019a44:	0028      	movs	r0, r5
 8019a46:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8019a48:	6a21      	ldr	r1, [r4, #32]
 8019a4a:	47b8      	blx	r7
 8019a4c:	89a2      	ldrh	r2, [r4, #12]
 8019a4e:	1c43      	adds	r3, r0, #1
 8019a50:	d106      	bne.n	8019a60 <__sflush_r+0x68>
 8019a52:	6829      	ldr	r1, [r5, #0]
 8019a54:	291d      	cmp	r1, #29
 8019a56:	d846      	bhi.n	8019ae6 <__sflush_r+0xee>
 8019a58:	4b29      	ldr	r3, [pc, #164]	@ (8019b00 <__sflush_r+0x108>)
 8019a5a:	410b      	asrs	r3, r1
 8019a5c:	07db      	lsls	r3, r3, #31
 8019a5e:	d442      	bmi.n	8019ae6 <__sflush_r+0xee>
 8019a60:	2300      	movs	r3, #0
 8019a62:	6063      	str	r3, [r4, #4]
 8019a64:	6923      	ldr	r3, [r4, #16]
 8019a66:	6023      	str	r3, [r4, #0]
 8019a68:	04d2      	lsls	r2, r2, #19
 8019a6a:	d505      	bpl.n	8019a78 <__sflush_r+0x80>
 8019a6c:	1c43      	adds	r3, r0, #1
 8019a6e:	d102      	bne.n	8019a76 <__sflush_r+0x7e>
 8019a70:	682b      	ldr	r3, [r5, #0]
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d100      	bne.n	8019a78 <__sflush_r+0x80>
 8019a76:	6560      	str	r0, [r4, #84]	@ 0x54
 8019a78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019a7a:	602e      	str	r6, [r5, #0]
 8019a7c:	2900      	cmp	r1, #0
 8019a7e:	d017      	beq.n	8019ab0 <__sflush_r+0xb8>
 8019a80:	0023      	movs	r3, r4
 8019a82:	3344      	adds	r3, #68	@ 0x44
 8019a84:	4299      	cmp	r1, r3
 8019a86:	d002      	beq.n	8019a8e <__sflush_r+0x96>
 8019a88:	0028      	movs	r0, r5
 8019a8a:	f7ff f869 	bl	8018b60 <_free_r>
 8019a8e:	2300      	movs	r3, #0
 8019a90:	6363      	str	r3, [r4, #52]	@ 0x34
 8019a92:	e00d      	b.n	8019ab0 <__sflush_r+0xb8>
 8019a94:	2301      	movs	r3, #1
 8019a96:	0028      	movs	r0, r5
 8019a98:	47b8      	blx	r7
 8019a9a:	0002      	movs	r2, r0
 8019a9c:	1c43      	adds	r3, r0, #1
 8019a9e:	d1c6      	bne.n	8019a2e <__sflush_r+0x36>
 8019aa0:	682b      	ldr	r3, [r5, #0]
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	d0c3      	beq.n	8019a2e <__sflush_r+0x36>
 8019aa6:	2b1d      	cmp	r3, #29
 8019aa8:	d001      	beq.n	8019aae <__sflush_r+0xb6>
 8019aaa:	2b16      	cmp	r3, #22
 8019aac:	d11a      	bne.n	8019ae4 <__sflush_r+0xec>
 8019aae:	602e      	str	r6, [r5, #0]
 8019ab0:	2000      	movs	r0, #0
 8019ab2:	e01e      	b.n	8019af2 <__sflush_r+0xfa>
 8019ab4:	690e      	ldr	r6, [r1, #16]
 8019ab6:	2e00      	cmp	r6, #0
 8019ab8:	d0fa      	beq.n	8019ab0 <__sflush_r+0xb8>
 8019aba:	680f      	ldr	r7, [r1, #0]
 8019abc:	600e      	str	r6, [r1, #0]
 8019abe:	1bba      	subs	r2, r7, r6
 8019ac0:	9201      	str	r2, [sp, #4]
 8019ac2:	2200      	movs	r2, #0
 8019ac4:	079b      	lsls	r3, r3, #30
 8019ac6:	d100      	bne.n	8019aca <__sflush_r+0xd2>
 8019ac8:	694a      	ldr	r2, [r1, #20]
 8019aca:	60a2      	str	r2, [r4, #8]
 8019acc:	9b01      	ldr	r3, [sp, #4]
 8019ace:	2b00      	cmp	r3, #0
 8019ad0:	ddee      	ble.n	8019ab0 <__sflush_r+0xb8>
 8019ad2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8019ad4:	0032      	movs	r2, r6
 8019ad6:	001f      	movs	r7, r3
 8019ad8:	0028      	movs	r0, r5
 8019ada:	9b01      	ldr	r3, [sp, #4]
 8019adc:	6a21      	ldr	r1, [r4, #32]
 8019ade:	47b8      	blx	r7
 8019ae0:	2800      	cmp	r0, #0
 8019ae2:	dc07      	bgt.n	8019af4 <__sflush_r+0xfc>
 8019ae4:	89a2      	ldrh	r2, [r4, #12]
 8019ae6:	2340      	movs	r3, #64	@ 0x40
 8019ae8:	2001      	movs	r0, #1
 8019aea:	4313      	orrs	r3, r2
 8019aec:	b21b      	sxth	r3, r3
 8019aee:	81a3      	strh	r3, [r4, #12]
 8019af0:	4240      	negs	r0, r0
 8019af2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019af4:	9b01      	ldr	r3, [sp, #4]
 8019af6:	1836      	adds	r6, r6, r0
 8019af8:	1a1b      	subs	r3, r3, r0
 8019afa:	9301      	str	r3, [sp, #4]
 8019afc:	e7e6      	b.n	8019acc <__sflush_r+0xd4>
 8019afe:	46c0      	nop			@ (mov r8, r8)
 8019b00:	dfbffffe 	.word	0xdfbffffe

08019b04 <_fflush_r>:
 8019b04:	690b      	ldr	r3, [r1, #16]
 8019b06:	b570      	push	{r4, r5, r6, lr}
 8019b08:	0005      	movs	r5, r0
 8019b0a:	000c      	movs	r4, r1
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	d102      	bne.n	8019b16 <_fflush_r+0x12>
 8019b10:	2500      	movs	r5, #0
 8019b12:	0028      	movs	r0, r5
 8019b14:	bd70      	pop	{r4, r5, r6, pc}
 8019b16:	2800      	cmp	r0, #0
 8019b18:	d004      	beq.n	8019b24 <_fflush_r+0x20>
 8019b1a:	6a03      	ldr	r3, [r0, #32]
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	d101      	bne.n	8019b24 <_fflush_r+0x20>
 8019b20:	f7fd ffe0 	bl	8017ae4 <__sinit>
 8019b24:	220c      	movs	r2, #12
 8019b26:	5ea3      	ldrsh	r3, [r4, r2]
 8019b28:	2b00      	cmp	r3, #0
 8019b2a:	d0f1      	beq.n	8019b10 <_fflush_r+0xc>
 8019b2c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019b2e:	07d2      	lsls	r2, r2, #31
 8019b30:	d404      	bmi.n	8019b3c <_fflush_r+0x38>
 8019b32:	059b      	lsls	r3, r3, #22
 8019b34:	d402      	bmi.n	8019b3c <_fflush_r+0x38>
 8019b36:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019b38:	f7fe f979 	bl	8017e2e <__retarget_lock_acquire_recursive>
 8019b3c:	0028      	movs	r0, r5
 8019b3e:	0021      	movs	r1, r4
 8019b40:	f7ff ff5a 	bl	80199f8 <__sflush_r>
 8019b44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019b46:	0005      	movs	r5, r0
 8019b48:	07db      	lsls	r3, r3, #31
 8019b4a:	d4e2      	bmi.n	8019b12 <_fflush_r+0xe>
 8019b4c:	89a3      	ldrh	r3, [r4, #12]
 8019b4e:	059b      	lsls	r3, r3, #22
 8019b50:	d4df      	bmi.n	8019b12 <_fflush_r+0xe>
 8019b52:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019b54:	f7fe f96c 	bl	8017e30 <__retarget_lock_release_recursive>
 8019b58:	e7db      	b.n	8019b12 <_fflush_r+0xe>

08019b5a <__swbuf_r>:
 8019b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b5c:	0006      	movs	r6, r0
 8019b5e:	000d      	movs	r5, r1
 8019b60:	0014      	movs	r4, r2
 8019b62:	2800      	cmp	r0, #0
 8019b64:	d004      	beq.n	8019b70 <__swbuf_r+0x16>
 8019b66:	6a03      	ldr	r3, [r0, #32]
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d101      	bne.n	8019b70 <__swbuf_r+0x16>
 8019b6c:	f7fd ffba 	bl	8017ae4 <__sinit>
 8019b70:	69a3      	ldr	r3, [r4, #24]
 8019b72:	60a3      	str	r3, [r4, #8]
 8019b74:	89a3      	ldrh	r3, [r4, #12]
 8019b76:	071b      	lsls	r3, r3, #28
 8019b78:	d502      	bpl.n	8019b80 <__swbuf_r+0x26>
 8019b7a:	6923      	ldr	r3, [r4, #16]
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	d109      	bne.n	8019b94 <__swbuf_r+0x3a>
 8019b80:	0021      	movs	r1, r4
 8019b82:	0030      	movs	r0, r6
 8019b84:	f000 f82c 	bl	8019be0 <__swsetup_r>
 8019b88:	2800      	cmp	r0, #0
 8019b8a:	d003      	beq.n	8019b94 <__swbuf_r+0x3a>
 8019b8c:	2501      	movs	r5, #1
 8019b8e:	426d      	negs	r5, r5
 8019b90:	0028      	movs	r0, r5
 8019b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b94:	6923      	ldr	r3, [r4, #16]
 8019b96:	6820      	ldr	r0, [r4, #0]
 8019b98:	b2ef      	uxtb	r7, r5
 8019b9a:	1ac0      	subs	r0, r0, r3
 8019b9c:	6963      	ldr	r3, [r4, #20]
 8019b9e:	b2ed      	uxtb	r5, r5
 8019ba0:	4283      	cmp	r3, r0
 8019ba2:	dc05      	bgt.n	8019bb0 <__swbuf_r+0x56>
 8019ba4:	0021      	movs	r1, r4
 8019ba6:	0030      	movs	r0, r6
 8019ba8:	f7ff ffac 	bl	8019b04 <_fflush_r>
 8019bac:	2800      	cmp	r0, #0
 8019bae:	d1ed      	bne.n	8019b8c <__swbuf_r+0x32>
 8019bb0:	68a3      	ldr	r3, [r4, #8]
 8019bb2:	3001      	adds	r0, #1
 8019bb4:	3b01      	subs	r3, #1
 8019bb6:	60a3      	str	r3, [r4, #8]
 8019bb8:	6823      	ldr	r3, [r4, #0]
 8019bba:	1c5a      	adds	r2, r3, #1
 8019bbc:	6022      	str	r2, [r4, #0]
 8019bbe:	701f      	strb	r7, [r3, #0]
 8019bc0:	6963      	ldr	r3, [r4, #20]
 8019bc2:	4283      	cmp	r3, r0
 8019bc4:	d004      	beq.n	8019bd0 <__swbuf_r+0x76>
 8019bc6:	89a3      	ldrh	r3, [r4, #12]
 8019bc8:	07db      	lsls	r3, r3, #31
 8019bca:	d5e1      	bpl.n	8019b90 <__swbuf_r+0x36>
 8019bcc:	2d0a      	cmp	r5, #10
 8019bce:	d1df      	bne.n	8019b90 <__swbuf_r+0x36>
 8019bd0:	0021      	movs	r1, r4
 8019bd2:	0030      	movs	r0, r6
 8019bd4:	f7ff ff96 	bl	8019b04 <_fflush_r>
 8019bd8:	2800      	cmp	r0, #0
 8019bda:	d0d9      	beq.n	8019b90 <__swbuf_r+0x36>
 8019bdc:	e7d6      	b.n	8019b8c <__swbuf_r+0x32>
	...

08019be0 <__swsetup_r>:
 8019be0:	4b2d      	ldr	r3, [pc, #180]	@ (8019c98 <__swsetup_r+0xb8>)
 8019be2:	b570      	push	{r4, r5, r6, lr}
 8019be4:	0005      	movs	r5, r0
 8019be6:	6818      	ldr	r0, [r3, #0]
 8019be8:	000c      	movs	r4, r1
 8019bea:	2800      	cmp	r0, #0
 8019bec:	d004      	beq.n	8019bf8 <__swsetup_r+0x18>
 8019bee:	6a03      	ldr	r3, [r0, #32]
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	d101      	bne.n	8019bf8 <__swsetup_r+0x18>
 8019bf4:	f7fd ff76 	bl	8017ae4 <__sinit>
 8019bf8:	230c      	movs	r3, #12
 8019bfa:	5ee2      	ldrsh	r2, [r4, r3]
 8019bfc:	0713      	lsls	r3, r2, #28
 8019bfe:	d423      	bmi.n	8019c48 <__swsetup_r+0x68>
 8019c00:	06d3      	lsls	r3, r2, #27
 8019c02:	d407      	bmi.n	8019c14 <__swsetup_r+0x34>
 8019c04:	2309      	movs	r3, #9
 8019c06:	602b      	str	r3, [r5, #0]
 8019c08:	2340      	movs	r3, #64	@ 0x40
 8019c0a:	2001      	movs	r0, #1
 8019c0c:	4313      	orrs	r3, r2
 8019c0e:	81a3      	strh	r3, [r4, #12]
 8019c10:	4240      	negs	r0, r0
 8019c12:	e03a      	b.n	8019c8a <__swsetup_r+0xaa>
 8019c14:	0752      	lsls	r2, r2, #29
 8019c16:	d513      	bpl.n	8019c40 <__swsetup_r+0x60>
 8019c18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019c1a:	2900      	cmp	r1, #0
 8019c1c:	d008      	beq.n	8019c30 <__swsetup_r+0x50>
 8019c1e:	0023      	movs	r3, r4
 8019c20:	3344      	adds	r3, #68	@ 0x44
 8019c22:	4299      	cmp	r1, r3
 8019c24:	d002      	beq.n	8019c2c <__swsetup_r+0x4c>
 8019c26:	0028      	movs	r0, r5
 8019c28:	f7fe ff9a 	bl	8018b60 <_free_r>
 8019c2c:	2300      	movs	r3, #0
 8019c2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8019c30:	2224      	movs	r2, #36	@ 0x24
 8019c32:	89a3      	ldrh	r3, [r4, #12]
 8019c34:	4393      	bics	r3, r2
 8019c36:	81a3      	strh	r3, [r4, #12]
 8019c38:	2300      	movs	r3, #0
 8019c3a:	6063      	str	r3, [r4, #4]
 8019c3c:	6923      	ldr	r3, [r4, #16]
 8019c3e:	6023      	str	r3, [r4, #0]
 8019c40:	2308      	movs	r3, #8
 8019c42:	89a2      	ldrh	r2, [r4, #12]
 8019c44:	4313      	orrs	r3, r2
 8019c46:	81a3      	strh	r3, [r4, #12]
 8019c48:	6923      	ldr	r3, [r4, #16]
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	d10b      	bne.n	8019c66 <__swsetup_r+0x86>
 8019c4e:	21a0      	movs	r1, #160	@ 0xa0
 8019c50:	2280      	movs	r2, #128	@ 0x80
 8019c52:	89a3      	ldrh	r3, [r4, #12]
 8019c54:	0089      	lsls	r1, r1, #2
 8019c56:	0092      	lsls	r2, r2, #2
 8019c58:	400b      	ands	r3, r1
 8019c5a:	4293      	cmp	r3, r2
 8019c5c:	d003      	beq.n	8019c66 <__swsetup_r+0x86>
 8019c5e:	0021      	movs	r1, r4
 8019c60:	0028      	movs	r0, r5
 8019c62:	f000 f915 	bl	8019e90 <__smakebuf_r>
 8019c66:	230c      	movs	r3, #12
 8019c68:	5ee2      	ldrsh	r2, [r4, r3]
 8019c6a:	2101      	movs	r1, #1
 8019c6c:	0013      	movs	r3, r2
 8019c6e:	400b      	ands	r3, r1
 8019c70:	420a      	tst	r2, r1
 8019c72:	d00b      	beq.n	8019c8c <__swsetup_r+0xac>
 8019c74:	2300      	movs	r3, #0
 8019c76:	60a3      	str	r3, [r4, #8]
 8019c78:	6963      	ldr	r3, [r4, #20]
 8019c7a:	425b      	negs	r3, r3
 8019c7c:	61a3      	str	r3, [r4, #24]
 8019c7e:	2000      	movs	r0, #0
 8019c80:	6923      	ldr	r3, [r4, #16]
 8019c82:	4283      	cmp	r3, r0
 8019c84:	d101      	bne.n	8019c8a <__swsetup_r+0xaa>
 8019c86:	0613      	lsls	r3, r2, #24
 8019c88:	d4be      	bmi.n	8019c08 <__swsetup_r+0x28>
 8019c8a:	bd70      	pop	{r4, r5, r6, pc}
 8019c8c:	0791      	lsls	r1, r2, #30
 8019c8e:	d400      	bmi.n	8019c92 <__swsetup_r+0xb2>
 8019c90:	6963      	ldr	r3, [r4, #20]
 8019c92:	60a3      	str	r3, [r4, #8]
 8019c94:	e7f3      	b.n	8019c7e <__swsetup_r+0x9e>
 8019c96:	46c0      	nop			@ (mov r8, r8)
 8019c98:	2000022c 	.word	0x2000022c

08019c9c <memmove>:
 8019c9c:	b510      	push	{r4, lr}
 8019c9e:	4288      	cmp	r0, r1
 8019ca0:	d806      	bhi.n	8019cb0 <memmove+0x14>
 8019ca2:	2300      	movs	r3, #0
 8019ca4:	429a      	cmp	r2, r3
 8019ca6:	d008      	beq.n	8019cba <memmove+0x1e>
 8019ca8:	5ccc      	ldrb	r4, [r1, r3]
 8019caa:	54c4      	strb	r4, [r0, r3]
 8019cac:	3301      	adds	r3, #1
 8019cae:	e7f9      	b.n	8019ca4 <memmove+0x8>
 8019cb0:	188b      	adds	r3, r1, r2
 8019cb2:	4298      	cmp	r0, r3
 8019cb4:	d2f5      	bcs.n	8019ca2 <memmove+0x6>
 8019cb6:	3a01      	subs	r2, #1
 8019cb8:	d200      	bcs.n	8019cbc <memmove+0x20>
 8019cba:	bd10      	pop	{r4, pc}
 8019cbc:	5c8b      	ldrb	r3, [r1, r2]
 8019cbe:	5483      	strb	r3, [r0, r2]
 8019cc0:	e7f9      	b.n	8019cb6 <memmove+0x1a>
	...

08019cc4 <_sbrk_r>:
 8019cc4:	2300      	movs	r3, #0
 8019cc6:	b570      	push	{r4, r5, r6, lr}
 8019cc8:	4d06      	ldr	r5, [pc, #24]	@ (8019ce4 <_sbrk_r+0x20>)
 8019cca:	0004      	movs	r4, r0
 8019ccc:	0008      	movs	r0, r1
 8019cce:	602b      	str	r3, [r5, #0]
 8019cd0:	f7ef f8b0 	bl	8008e34 <_sbrk>
 8019cd4:	1c43      	adds	r3, r0, #1
 8019cd6:	d103      	bne.n	8019ce0 <_sbrk_r+0x1c>
 8019cd8:	682b      	ldr	r3, [r5, #0]
 8019cda:	2b00      	cmp	r3, #0
 8019cdc:	d000      	beq.n	8019ce0 <_sbrk_r+0x1c>
 8019cde:	6023      	str	r3, [r4, #0]
 8019ce0:	bd70      	pop	{r4, r5, r6, pc}
 8019ce2:	46c0      	nop			@ (mov r8, r8)
 8019ce4:	20003f04 	.word	0x20003f04

08019ce8 <__assert_func>:
 8019ce8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8019cea:	0014      	movs	r4, r2
 8019cec:	001a      	movs	r2, r3
 8019cee:	4b09      	ldr	r3, [pc, #36]	@ (8019d14 <__assert_func+0x2c>)
 8019cf0:	0005      	movs	r5, r0
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	000e      	movs	r6, r1
 8019cf6:	68d8      	ldr	r0, [r3, #12]
 8019cf8:	4b07      	ldr	r3, [pc, #28]	@ (8019d18 <__assert_func+0x30>)
 8019cfa:	2c00      	cmp	r4, #0
 8019cfc:	d101      	bne.n	8019d02 <__assert_func+0x1a>
 8019cfe:	4b07      	ldr	r3, [pc, #28]	@ (8019d1c <__assert_func+0x34>)
 8019d00:	001c      	movs	r4, r3
 8019d02:	4907      	ldr	r1, [pc, #28]	@ (8019d20 <__assert_func+0x38>)
 8019d04:	9301      	str	r3, [sp, #4]
 8019d06:	9402      	str	r4, [sp, #8]
 8019d08:	002b      	movs	r3, r5
 8019d0a:	9600      	str	r6, [sp, #0]
 8019d0c:	f000 f886 	bl	8019e1c <fiprintf>
 8019d10:	f000 f924 	bl	8019f5c <abort>
 8019d14:	2000022c 	.word	0x2000022c
 8019d18:	0801bba3 	.word	0x0801bba3
 8019d1c:	0801bbde 	.word	0x0801bbde
 8019d20:	0801bbb0 	.word	0x0801bbb0

08019d24 <_calloc_r>:
 8019d24:	b570      	push	{r4, r5, r6, lr}
 8019d26:	0c0b      	lsrs	r3, r1, #16
 8019d28:	0c15      	lsrs	r5, r2, #16
 8019d2a:	2b00      	cmp	r3, #0
 8019d2c:	d11e      	bne.n	8019d6c <_calloc_r+0x48>
 8019d2e:	2d00      	cmp	r5, #0
 8019d30:	d10c      	bne.n	8019d4c <_calloc_r+0x28>
 8019d32:	b289      	uxth	r1, r1
 8019d34:	b294      	uxth	r4, r2
 8019d36:	434c      	muls	r4, r1
 8019d38:	0021      	movs	r1, r4
 8019d3a:	f7fe ff87 	bl	8018c4c <_malloc_r>
 8019d3e:	1e05      	subs	r5, r0, #0
 8019d40:	d01a      	beq.n	8019d78 <_calloc_r+0x54>
 8019d42:	0022      	movs	r2, r4
 8019d44:	2100      	movs	r1, #0
 8019d46:	f7fd ffb5 	bl	8017cb4 <memset>
 8019d4a:	e016      	b.n	8019d7a <_calloc_r+0x56>
 8019d4c:	1c2b      	adds	r3, r5, #0
 8019d4e:	1c0c      	adds	r4, r1, #0
 8019d50:	b289      	uxth	r1, r1
 8019d52:	b292      	uxth	r2, r2
 8019d54:	434a      	muls	r2, r1
 8019d56:	b29b      	uxth	r3, r3
 8019d58:	b2a1      	uxth	r1, r4
 8019d5a:	4359      	muls	r1, r3
 8019d5c:	0c14      	lsrs	r4, r2, #16
 8019d5e:	190c      	adds	r4, r1, r4
 8019d60:	0c23      	lsrs	r3, r4, #16
 8019d62:	d107      	bne.n	8019d74 <_calloc_r+0x50>
 8019d64:	0424      	lsls	r4, r4, #16
 8019d66:	b292      	uxth	r2, r2
 8019d68:	4314      	orrs	r4, r2
 8019d6a:	e7e5      	b.n	8019d38 <_calloc_r+0x14>
 8019d6c:	2d00      	cmp	r5, #0
 8019d6e:	d101      	bne.n	8019d74 <_calloc_r+0x50>
 8019d70:	1c14      	adds	r4, r2, #0
 8019d72:	e7ed      	b.n	8019d50 <_calloc_r+0x2c>
 8019d74:	230c      	movs	r3, #12
 8019d76:	6003      	str	r3, [r0, #0]
 8019d78:	2500      	movs	r5, #0
 8019d7a:	0028      	movs	r0, r5
 8019d7c:	bd70      	pop	{r4, r5, r6, pc}

08019d7e <__ascii_mbtowc>:
 8019d7e:	b082      	sub	sp, #8
 8019d80:	2900      	cmp	r1, #0
 8019d82:	d100      	bne.n	8019d86 <__ascii_mbtowc+0x8>
 8019d84:	a901      	add	r1, sp, #4
 8019d86:	1e10      	subs	r0, r2, #0
 8019d88:	d006      	beq.n	8019d98 <__ascii_mbtowc+0x1a>
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	d006      	beq.n	8019d9c <__ascii_mbtowc+0x1e>
 8019d8e:	7813      	ldrb	r3, [r2, #0]
 8019d90:	600b      	str	r3, [r1, #0]
 8019d92:	7810      	ldrb	r0, [r2, #0]
 8019d94:	1e43      	subs	r3, r0, #1
 8019d96:	4198      	sbcs	r0, r3
 8019d98:	b002      	add	sp, #8
 8019d9a:	4770      	bx	lr
 8019d9c:	2002      	movs	r0, #2
 8019d9e:	4240      	negs	r0, r0
 8019da0:	e7fa      	b.n	8019d98 <__ascii_mbtowc+0x1a>

08019da2 <_realloc_r>:
 8019da2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019da4:	0006      	movs	r6, r0
 8019da6:	000c      	movs	r4, r1
 8019da8:	0015      	movs	r5, r2
 8019daa:	2900      	cmp	r1, #0
 8019dac:	d105      	bne.n	8019dba <_realloc_r+0x18>
 8019dae:	0011      	movs	r1, r2
 8019db0:	f7fe ff4c 	bl	8018c4c <_malloc_r>
 8019db4:	0004      	movs	r4, r0
 8019db6:	0020      	movs	r0, r4
 8019db8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019dba:	2a00      	cmp	r2, #0
 8019dbc:	d103      	bne.n	8019dc6 <_realloc_r+0x24>
 8019dbe:	f7fe fecf 	bl	8018b60 <_free_r>
 8019dc2:	2400      	movs	r4, #0
 8019dc4:	e7f7      	b.n	8019db6 <_realloc_r+0x14>
 8019dc6:	f000 f8d0 	bl	8019f6a <_malloc_usable_size_r>
 8019dca:	0007      	movs	r7, r0
 8019dcc:	4285      	cmp	r5, r0
 8019dce:	d802      	bhi.n	8019dd6 <_realloc_r+0x34>
 8019dd0:	0843      	lsrs	r3, r0, #1
 8019dd2:	42ab      	cmp	r3, r5
 8019dd4:	d3ef      	bcc.n	8019db6 <_realloc_r+0x14>
 8019dd6:	0029      	movs	r1, r5
 8019dd8:	0030      	movs	r0, r6
 8019dda:	f7fe ff37 	bl	8018c4c <_malloc_r>
 8019dde:	9001      	str	r0, [sp, #4]
 8019de0:	2800      	cmp	r0, #0
 8019de2:	d0ee      	beq.n	8019dc2 <_realloc_r+0x20>
 8019de4:	002a      	movs	r2, r5
 8019de6:	42bd      	cmp	r5, r7
 8019de8:	d900      	bls.n	8019dec <_realloc_r+0x4a>
 8019dea:	003a      	movs	r2, r7
 8019dec:	0021      	movs	r1, r4
 8019dee:	9801      	ldr	r0, [sp, #4]
 8019df0:	f7fe f82a 	bl	8017e48 <memcpy>
 8019df4:	0021      	movs	r1, r4
 8019df6:	0030      	movs	r0, r6
 8019df8:	f7fe feb2 	bl	8018b60 <_free_r>
 8019dfc:	9c01      	ldr	r4, [sp, #4]
 8019dfe:	e7da      	b.n	8019db6 <_realloc_r+0x14>

08019e00 <__ascii_wctomb>:
 8019e00:	0003      	movs	r3, r0
 8019e02:	1e08      	subs	r0, r1, #0
 8019e04:	d005      	beq.n	8019e12 <__ascii_wctomb+0x12>
 8019e06:	2aff      	cmp	r2, #255	@ 0xff
 8019e08:	d904      	bls.n	8019e14 <__ascii_wctomb+0x14>
 8019e0a:	228a      	movs	r2, #138	@ 0x8a
 8019e0c:	2001      	movs	r0, #1
 8019e0e:	601a      	str	r2, [r3, #0]
 8019e10:	4240      	negs	r0, r0
 8019e12:	4770      	bx	lr
 8019e14:	2001      	movs	r0, #1
 8019e16:	700a      	strb	r2, [r1, #0]
 8019e18:	e7fb      	b.n	8019e12 <__ascii_wctomb+0x12>
	...

08019e1c <fiprintf>:
 8019e1c:	b40e      	push	{r1, r2, r3}
 8019e1e:	b517      	push	{r0, r1, r2, r4, lr}
 8019e20:	4c05      	ldr	r4, [pc, #20]	@ (8019e38 <fiprintf+0x1c>)
 8019e22:	ab05      	add	r3, sp, #20
 8019e24:	cb04      	ldmia	r3!, {r2}
 8019e26:	0001      	movs	r1, r0
 8019e28:	6820      	ldr	r0, [r4, #0]
 8019e2a:	9301      	str	r3, [sp, #4]
 8019e2c:	f7ff fcc8 	bl	80197c0 <_vfiprintf_r>
 8019e30:	bc1e      	pop	{r1, r2, r3, r4}
 8019e32:	bc08      	pop	{r3}
 8019e34:	b003      	add	sp, #12
 8019e36:	4718      	bx	r3
 8019e38:	2000022c 	.word	0x2000022c

08019e3c <__swhatbuf_r>:
 8019e3c:	b570      	push	{r4, r5, r6, lr}
 8019e3e:	000e      	movs	r6, r1
 8019e40:	001d      	movs	r5, r3
 8019e42:	230e      	movs	r3, #14
 8019e44:	5ec9      	ldrsh	r1, [r1, r3]
 8019e46:	0014      	movs	r4, r2
 8019e48:	b096      	sub	sp, #88	@ 0x58
 8019e4a:	2900      	cmp	r1, #0
 8019e4c:	da0c      	bge.n	8019e68 <__swhatbuf_r+0x2c>
 8019e4e:	89b2      	ldrh	r2, [r6, #12]
 8019e50:	2380      	movs	r3, #128	@ 0x80
 8019e52:	0011      	movs	r1, r2
 8019e54:	4019      	ands	r1, r3
 8019e56:	421a      	tst	r2, r3
 8019e58:	d114      	bne.n	8019e84 <__swhatbuf_r+0x48>
 8019e5a:	2380      	movs	r3, #128	@ 0x80
 8019e5c:	00db      	lsls	r3, r3, #3
 8019e5e:	2000      	movs	r0, #0
 8019e60:	6029      	str	r1, [r5, #0]
 8019e62:	6023      	str	r3, [r4, #0]
 8019e64:	b016      	add	sp, #88	@ 0x58
 8019e66:	bd70      	pop	{r4, r5, r6, pc}
 8019e68:	466a      	mov	r2, sp
 8019e6a:	f000 f853 	bl	8019f14 <_fstat_r>
 8019e6e:	2800      	cmp	r0, #0
 8019e70:	dbed      	blt.n	8019e4e <__swhatbuf_r+0x12>
 8019e72:	23f0      	movs	r3, #240	@ 0xf0
 8019e74:	9901      	ldr	r1, [sp, #4]
 8019e76:	021b      	lsls	r3, r3, #8
 8019e78:	4019      	ands	r1, r3
 8019e7a:	4b04      	ldr	r3, [pc, #16]	@ (8019e8c <__swhatbuf_r+0x50>)
 8019e7c:	18c9      	adds	r1, r1, r3
 8019e7e:	424b      	negs	r3, r1
 8019e80:	4159      	adcs	r1, r3
 8019e82:	e7ea      	b.n	8019e5a <__swhatbuf_r+0x1e>
 8019e84:	2100      	movs	r1, #0
 8019e86:	2340      	movs	r3, #64	@ 0x40
 8019e88:	e7e9      	b.n	8019e5e <__swhatbuf_r+0x22>
 8019e8a:	46c0      	nop			@ (mov r8, r8)
 8019e8c:	ffffe000 	.word	0xffffe000

08019e90 <__smakebuf_r>:
 8019e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e92:	2602      	movs	r6, #2
 8019e94:	898b      	ldrh	r3, [r1, #12]
 8019e96:	0005      	movs	r5, r0
 8019e98:	000c      	movs	r4, r1
 8019e9a:	b085      	sub	sp, #20
 8019e9c:	4233      	tst	r3, r6
 8019e9e:	d007      	beq.n	8019eb0 <__smakebuf_r+0x20>
 8019ea0:	0023      	movs	r3, r4
 8019ea2:	3347      	adds	r3, #71	@ 0x47
 8019ea4:	6023      	str	r3, [r4, #0]
 8019ea6:	6123      	str	r3, [r4, #16]
 8019ea8:	2301      	movs	r3, #1
 8019eaa:	6163      	str	r3, [r4, #20]
 8019eac:	b005      	add	sp, #20
 8019eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019eb0:	ab03      	add	r3, sp, #12
 8019eb2:	aa02      	add	r2, sp, #8
 8019eb4:	f7ff ffc2 	bl	8019e3c <__swhatbuf_r>
 8019eb8:	9f02      	ldr	r7, [sp, #8]
 8019eba:	9001      	str	r0, [sp, #4]
 8019ebc:	0039      	movs	r1, r7
 8019ebe:	0028      	movs	r0, r5
 8019ec0:	f7fe fec4 	bl	8018c4c <_malloc_r>
 8019ec4:	2800      	cmp	r0, #0
 8019ec6:	d108      	bne.n	8019eda <__smakebuf_r+0x4a>
 8019ec8:	220c      	movs	r2, #12
 8019eca:	5ea3      	ldrsh	r3, [r4, r2]
 8019ecc:	059a      	lsls	r2, r3, #22
 8019ece:	d4ed      	bmi.n	8019eac <__smakebuf_r+0x1c>
 8019ed0:	2203      	movs	r2, #3
 8019ed2:	4393      	bics	r3, r2
 8019ed4:	431e      	orrs	r6, r3
 8019ed6:	81a6      	strh	r6, [r4, #12]
 8019ed8:	e7e2      	b.n	8019ea0 <__smakebuf_r+0x10>
 8019eda:	2380      	movs	r3, #128	@ 0x80
 8019edc:	89a2      	ldrh	r2, [r4, #12]
 8019ede:	6020      	str	r0, [r4, #0]
 8019ee0:	4313      	orrs	r3, r2
 8019ee2:	81a3      	strh	r3, [r4, #12]
 8019ee4:	9b03      	ldr	r3, [sp, #12]
 8019ee6:	6120      	str	r0, [r4, #16]
 8019ee8:	6167      	str	r7, [r4, #20]
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d00c      	beq.n	8019f08 <__smakebuf_r+0x78>
 8019eee:	0028      	movs	r0, r5
 8019ef0:	230e      	movs	r3, #14
 8019ef2:	5ee1      	ldrsh	r1, [r4, r3]
 8019ef4:	f000 f820 	bl	8019f38 <_isatty_r>
 8019ef8:	2800      	cmp	r0, #0
 8019efa:	d005      	beq.n	8019f08 <__smakebuf_r+0x78>
 8019efc:	2303      	movs	r3, #3
 8019efe:	89a2      	ldrh	r2, [r4, #12]
 8019f00:	439a      	bics	r2, r3
 8019f02:	3b02      	subs	r3, #2
 8019f04:	4313      	orrs	r3, r2
 8019f06:	81a3      	strh	r3, [r4, #12]
 8019f08:	89a3      	ldrh	r3, [r4, #12]
 8019f0a:	9a01      	ldr	r2, [sp, #4]
 8019f0c:	4313      	orrs	r3, r2
 8019f0e:	81a3      	strh	r3, [r4, #12]
 8019f10:	e7cc      	b.n	8019eac <__smakebuf_r+0x1c>
	...

08019f14 <_fstat_r>:
 8019f14:	2300      	movs	r3, #0
 8019f16:	b570      	push	{r4, r5, r6, lr}
 8019f18:	4d06      	ldr	r5, [pc, #24]	@ (8019f34 <_fstat_r+0x20>)
 8019f1a:	0004      	movs	r4, r0
 8019f1c:	0008      	movs	r0, r1
 8019f1e:	0011      	movs	r1, r2
 8019f20:	602b      	str	r3, [r5, #0]
 8019f22:	f7ee ff65 	bl	8008df0 <_fstat>
 8019f26:	1c43      	adds	r3, r0, #1
 8019f28:	d103      	bne.n	8019f32 <_fstat_r+0x1e>
 8019f2a:	682b      	ldr	r3, [r5, #0]
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	d000      	beq.n	8019f32 <_fstat_r+0x1e>
 8019f30:	6023      	str	r3, [r4, #0]
 8019f32:	bd70      	pop	{r4, r5, r6, pc}
 8019f34:	20003f04 	.word	0x20003f04

08019f38 <_isatty_r>:
 8019f38:	2300      	movs	r3, #0
 8019f3a:	b570      	push	{r4, r5, r6, lr}
 8019f3c:	4d06      	ldr	r5, [pc, #24]	@ (8019f58 <_isatty_r+0x20>)
 8019f3e:	0004      	movs	r4, r0
 8019f40:	0008      	movs	r0, r1
 8019f42:	602b      	str	r3, [r5, #0]
 8019f44:	f7ee ff62 	bl	8008e0c <_isatty>
 8019f48:	1c43      	adds	r3, r0, #1
 8019f4a:	d103      	bne.n	8019f54 <_isatty_r+0x1c>
 8019f4c:	682b      	ldr	r3, [r5, #0]
 8019f4e:	2b00      	cmp	r3, #0
 8019f50:	d000      	beq.n	8019f54 <_isatty_r+0x1c>
 8019f52:	6023      	str	r3, [r4, #0]
 8019f54:	bd70      	pop	{r4, r5, r6, pc}
 8019f56:	46c0      	nop			@ (mov r8, r8)
 8019f58:	20003f04 	.word	0x20003f04

08019f5c <abort>:
 8019f5c:	2006      	movs	r0, #6
 8019f5e:	b510      	push	{r4, lr}
 8019f60:	f000 f834 	bl	8019fcc <raise>
 8019f64:	2001      	movs	r0, #1
 8019f66:	f7ee ff0f 	bl	8008d88 <_exit>

08019f6a <_malloc_usable_size_r>:
 8019f6a:	1f0b      	subs	r3, r1, #4
 8019f6c:	681b      	ldr	r3, [r3, #0]
 8019f6e:	1f18      	subs	r0, r3, #4
 8019f70:	2b00      	cmp	r3, #0
 8019f72:	da01      	bge.n	8019f78 <_malloc_usable_size_r+0xe>
 8019f74:	580b      	ldr	r3, [r1, r0]
 8019f76:	18c0      	adds	r0, r0, r3
 8019f78:	4770      	bx	lr

08019f7a <_raise_r>:
 8019f7a:	b570      	push	{r4, r5, r6, lr}
 8019f7c:	0004      	movs	r4, r0
 8019f7e:	000d      	movs	r5, r1
 8019f80:	291f      	cmp	r1, #31
 8019f82:	d904      	bls.n	8019f8e <_raise_r+0x14>
 8019f84:	2316      	movs	r3, #22
 8019f86:	6003      	str	r3, [r0, #0]
 8019f88:	2001      	movs	r0, #1
 8019f8a:	4240      	negs	r0, r0
 8019f8c:	bd70      	pop	{r4, r5, r6, pc}
 8019f8e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d004      	beq.n	8019f9e <_raise_r+0x24>
 8019f94:	008a      	lsls	r2, r1, #2
 8019f96:	189b      	adds	r3, r3, r2
 8019f98:	681a      	ldr	r2, [r3, #0]
 8019f9a:	2a00      	cmp	r2, #0
 8019f9c:	d108      	bne.n	8019fb0 <_raise_r+0x36>
 8019f9e:	0020      	movs	r0, r4
 8019fa0:	f000 f830 	bl	801a004 <_getpid_r>
 8019fa4:	002a      	movs	r2, r5
 8019fa6:	0001      	movs	r1, r0
 8019fa8:	0020      	movs	r0, r4
 8019faa:	f000 f819 	bl	8019fe0 <_kill_r>
 8019fae:	e7ed      	b.n	8019f8c <_raise_r+0x12>
 8019fb0:	2a01      	cmp	r2, #1
 8019fb2:	d009      	beq.n	8019fc8 <_raise_r+0x4e>
 8019fb4:	1c51      	adds	r1, r2, #1
 8019fb6:	d103      	bne.n	8019fc0 <_raise_r+0x46>
 8019fb8:	2316      	movs	r3, #22
 8019fba:	6003      	str	r3, [r0, #0]
 8019fbc:	2001      	movs	r0, #1
 8019fbe:	e7e5      	b.n	8019f8c <_raise_r+0x12>
 8019fc0:	2100      	movs	r1, #0
 8019fc2:	0028      	movs	r0, r5
 8019fc4:	6019      	str	r1, [r3, #0]
 8019fc6:	4790      	blx	r2
 8019fc8:	2000      	movs	r0, #0
 8019fca:	e7df      	b.n	8019f8c <_raise_r+0x12>

08019fcc <raise>:
 8019fcc:	b510      	push	{r4, lr}
 8019fce:	4b03      	ldr	r3, [pc, #12]	@ (8019fdc <raise+0x10>)
 8019fd0:	0001      	movs	r1, r0
 8019fd2:	6818      	ldr	r0, [r3, #0]
 8019fd4:	f7ff ffd1 	bl	8019f7a <_raise_r>
 8019fd8:	bd10      	pop	{r4, pc}
 8019fda:	46c0      	nop			@ (mov r8, r8)
 8019fdc:	2000022c 	.word	0x2000022c

08019fe0 <_kill_r>:
 8019fe0:	2300      	movs	r3, #0
 8019fe2:	b570      	push	{r4, r5, r6, lr}
 8019fe4:	4d06      	ldr	r5, [pc, #24]	@ (801a000 <_kill_r+0x20>)
 8019fe6:	0004      	movs	r4, r0
 8019fe8:	0008      	movs	r0, r1
 8019fea:	0011      	movs	r1, r2
 8019fec:	602b      	str	r3, [r5, #0]
 8019fee:	f7ee febb 	bl	8008d68 <_kill>
 8019ff2:	1c43      	adds	r3, r0, #1
 8019ff4:	d103      	bne.n	8019ffe <_kill_r+0x1e>
 8019ff6:	682b      	ldr	r3, [r5, #0]
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	d000      	beq.n	8019ffe <_kill_r+0x1e>
 8019ffc:	6023      	str	r3, [r4, #0]
 8019ffe:	bd70      	pop	{r4, r5, r6, pc}
 801a000:	20003f04 	.word	0x20003f04

0801a004 <_getpid_r>:
 801a004:	b510      	push	{r4, lr}
 801a006:	f7ee fea9 	bl	8008d5c <_getpid>
 801a00a:	bd10      	pop	{r4, pc}

0801a00c <log10>:
 801a00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a00e:	0004      	movs	r4, r0
 801a010:	000d      	movs	r5, r1
 801a012:	f000 fa0b 	bl	801a42c <__ieee754_log10>
 801a016:	0022      	movs	r2, r4
 801a018:	0006      	movs	r6, r0
 801a01a:	000f      	movs	r7, r1
 801a01c:	002b      	movs	r3, r5
 801a01e:	0020      	movs	r0, r4
 801a020:	0029      	movs	r1, r5
 801a022:	f7e9 f8ed 	bl	8003200 <__aeabi_dcmpun>
 801a026:	2800      	cmp	r0, #0
 801a028:	d115      	bne.n	801a056 <log10+0x4a>
 801a02a:	2200      	movs	r2, #0
 801a02c:	2300      	movs	r3, #0
 801a02e:	0020      	movs	r0, r4
 801a030:	0029      	movs	r1, r5
 801a032:	f7e6 fa1b 	bl	800046c <__aeabi_dcmple>
 801a036:	2800      	cmp	r0, #0
 801a038:	d00d      	beq.n	801a056 <log10+0x4a>
 801a03a:	2200      	movs	r2, #0
 801a03c:	2300      	movs	r3, #0
 801a03e:	0020      	movs	r0, r4
 801a040:	0029      	movs	r1, r5
 801a042:	f7e6 fa03 	bl	800044c <__aeabi_dcmpeq>
 801a046:	2800      	cmp	r0, #0
 801a048:	d008      	beq.n	801a05c <log10+0x50>
 801a04a:	f7fd fec5 	bl	8017dd8 <__errno>
 801a04e:	2322      	movs	r3, #34	@ 0x22
 801a050:	2600      	movs	r6, #0
 801a052:	4f07      	ldr	r7, [pc, #28]	@ (801a070 <log10+0x64>)
 801a054:	6003      	str	r3, [r0, #0]
 801a056:	0030      	movs	r0, r6
 801a058:	0039      	movs	r1, r7
 801a05a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a05c:	f7fd febc 	bl	8017dd8 <__errno>
 801a060:	2321      	movs	r3, #33	@ 0x21
 801a062:	6003      	str	r3, [r0, #0]
 801a064:	4803      	ldr	r0, [pc, #12]	@ (801a074 <log10+0x68>)
 801a066:	f000 f871 	bl	801a14c <nan>
 801a06a:	0006      	movs	r6, r0
 801a06c:	000f      	movs	r7, r1
 801a06e:	e7f2      	b.n	801a056 <log10+0x4a>
 801a070:	fff00000 	.word	0xfff00000
 801a074:	0801bbde 	.word	0x0801bbde

0801a078 <sqrt>:
 801a078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a07a:	0004      	movs	r4, r0
 801a07c:	000d      	movs	r5, r1
 801a07e:	f000 f875 	bl	801a16c <__ieee754_sqrt>
 801a082:	0022      	movs	r2, r4
 801a084:	0006      	movs	r6, r0
 801a086:	000f      	movs	r7, r1
 801a088:	002b      	movs	r3, r5
 801a08a:	0020      	movs	r0, r4
 801a08c:	0029      	movs	r1, r5
 801a08e:	f7e9 f8b7 	bl	8003200 <__aeabi_dcmpun>
 801a092:	2800      	cmp	r0, #0
 801a094:	d113      	bne.n	801a0be <sqrt+0x46>
 801a096:	2200      	movs	r2, #0
 801a098:	2300      	movs	r3, #0
 801a09a:	0020      	movs	r0, r4
 801a09c:	0029      	movs	r1, r5
 801a09e:	f7e6 f9db 	bl	8000458 <__aeabi_dcmplt>
 801a0a2:	2800      	cmp	r0, #0
 801a0a4:	d00b      	beq.n	801a0be <sqrt+0x46>
 801a0a6:	f7fd fe97 	bl	8017dd8 <__errno>
 801a0aa:	2321      	movs	r3, #33	@ 0x21
 801a0ac:	2200      	movs	r2, #0
 801a0ae:	6003      	str	r3, [r0, #0]
 801a0b0:	2300      	movs	r3, #0
 801a0b2:	0010      	movs	r0, r2
 801a0b4:	0019      	movs	r1, r3
 801a0b6:	f7e7 fdfb 	bl	8001cb0 <__aeabi_ddiv>
 801a0ba:	0006      	movs	r6, r0
 801a0bc:	000f      	movs	r7, r1
 801a0be:	0030      	movs	r0, r6
 801a0c0:	0039      	movs	r1, r7
 801a0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a0c4 <expf>:
 801a0c4:	b570      	push	{r4, r5, r6, lr}
 801a0c6:	1c04      	adds	r4, r0, #0
 801a0c8:	f000 fa2a 	bl	801a520 <__ieee754_expf>
 801a0cc:	1c05      	adds	r5, r0, #0
 801a0ce:	1c20      	adds	r0, r4, #0
 801a0d0:	f000 f842 	bl	801a158 <finitef>
 801a0d4:	2800      	cmp	r0, #0
 801a0d6:	d00b      	beq.n	801a0f0 <expf+0x2c>
 801a0d8:	490c      	ldr	r1, [pc, #48]	@ (801a10c <expf+0x48>)
 801a0da:	1c20      	adds	r0, r4, #0
 801a0dc:	f7e6 fa0a 	bl	80004f4 <__aeabi_fcmpgt>
 801a0e0:	2800      	cmp	r0, #0
 801a0e2:	d007      	beq.n	801a0f4 <expf+0x30>
 801a0e4:	f7fd fe78 	bl	8017dd8 <__errno>
 801a0e8:	25ff      	movs	r5, #255	@ 0xff
 801a0ea:	2322      	movs	r3, #34	@ 0x22
 801a0ec:	05ed      	lsls	r5, r5, #23
 801a0ee:	6003      	str	r3, [r0, #0]
 801a0f0:	1c28      	adds	r0, r5, #0
 801a0f2:	bd70      	pop	{r4, r5, r6, pc}
 801a0f4:	4906      	ldr	r1, [pc, #24]	@ (801a110 <expf+0x4c>)
 801a0f6:	1c20      	adds	r0, r4, #0
 801a0f8:	f7e6 f9e8 	bl	80004cc <__aeabi_fcmplt>
 801a0fc:	2800      	cmp	r0, #0
 801a0fe:	d0f7      	beq.n	801a0f0 <expf+0x2c>
 801a100:	f7fd fe6a 	bl	8017dd8 <__errno>
 801a104:	2322      	movs	r3, #34	@ 0x22
 801a106:	2500      	movs	r5, #0
 801a108:	6003      	str	r3, [r0, #0]
 801a10a:	e7f1      	b.n	801a0f0 <expf+0x2c>
 801a10c:	42b17217 	.word	0x42b17217
 801a110:	c2cff1b5 	.word	0xc2cff1b5

0801a114 <sqrtf>:
 801a114:	b570      	push	{r4, r5, r6, lr}
 801a116:	1c05      	adds	r5, r0, #0
 801a118:	f000 f910 	bl	801a33c <__ieee754_sqrtf>
 801a11c:	1c29      	adds	r1, r5, #0
 801a11e:	1c04      	adds	r4, r0, #0
 801a120:	1c28      	adds	r0, r5, #0
 801a122:	f7e7 f99d 	bl	8001460 <__aeabi_fcmpun>
 801a126:	2800      	cmp	r0, #0
 801a128:	d10e      	bne.n	801a148 <sqrtf+0x34>
 801a12a:	2100      	movs	r1, #0
 801a12c:	1c28      	adds	r0, r5, #0
 801a12e:	f7e6 f9cd 	bl	80004cc <__aeabi_fcmplt>
 801a132:	2800      	cmp	r0, #0
 801a134:	d008      	beq.n	801a148 <sqrtf+0x34>
 801a136:	f7fd fe4f 	bl	8017dd8 <__errno>
 801a13a:	2321      	movs	r3, #33	@ 0x21
 801a13c:	2100      	movs	r1, #0
 801a13e:	6003      	str	r3, [r0, #0]
 801a140:	1c08      	adds	r0, r1, #0
 801a142:	f7e6 fcc5 	bl	8000ad0 <__aeabi_fdiv>
 801a146:	1c04      	adds	r4, r0, #0
 801a148:	1c20      	adds	r0, r4, #0
 801a14a:	bd70      	pop	{r4, r5, r6, pc}

0801a14c <nan>:
 801a14c:	2000      	movs	r0, #0
 801a14e:	4901      	ldr	r1, [pc, #4]	@ (801a154 <nan+0x8>)
 801a150:	4770      	bx	lr
 801a152:	46c0      	nop			@ (mov r8, r8)
 801a154:	7ff80000 	.word	0x7ff80000

0801a158 <finitef>:
 801a158:	22ff      	movs	r2, #255	@ 0xff
 801a15a:	0043      	lsls	r3, r0, #1
 801a15c:	085b      	lsrs	r3, r3, #1
 801a15e:	2001      	movs	r0, #1
 801a160:	05d2      	lsls	r2, r2, #23
 801a162:	4293      	cmp	r3, r2
 801a164:	db00      	blt.n	801a168 <finitef+0x10>
 801a166:	2000      	movs	r0, #0
 801a168:	4770      	bx	lr
	...

0801a16c <__ieee754_sqrt>:
 801a16c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a16e:	000a      	movs	r2, r1
 801a170:	000d      	movs	r5, r1
 801a172:	496d      	ldr	r1, [pc, #436]	@ (801a328 <__ieee754_sqrt+0x1bc>)
 801a174:	0004      	movs	r4, r0
 801a176:	0003      	movs	r3, r0
 801a178:	0008      	movs	r0, r1
 801a17a:	b087      	sub	sp, #28
 801a17c:	4028      	ands	r0, r5
 801a17e:	4288      	cmp	r0, r1
 801a180:	d111      	bne.n	801a1a6 <__ieee754_sqrt+0x3a>
 801a182:	0022      	movs	r2, r4
 801a184:	002b      	movs	r3, r5
 801a186:	0020      	movs	r0, r4
 801a188:	0029      	movs	r1, r5
 801a18a:	f7e8 f9d5 	bl	8002538 <__aeabi_dmul>
 801a18e:	0002      	movs	r2, r0
 801a190:	000b      	movs	r3, r1
 801a192:	0020      	movs	r0, r4
 801a194:	0029      	movs	r1, r5
 801a196:	f7e7 fa27 	bl	80015e8 <__aeabi_dadd>
 801a19a:	0004      	movs	r4, r0
 801a19c:	000d      	movs	r5, r1
 801a19e:	0020      	movs	r0, r4
 801a1a0:	0029      	movs	r1, r5
 801a1a2:	b007      	add	sp, #28
 801a1a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a1a6:	2d00      	cmp	r5, #0
 801a1a8:	dc11      	bgt.n	801a1ce <__ieee754_sqrt+0x62>
 801a1aa:	0069      	lsls	r1, r5, #1
 801a1ac:	0849      	lsrs	r1, r1, #1
 801a1ae:	4321      	orrs	r1, r4
 801a1b0:	d0f5      	beq.n	801a19e <__ieee754_sqrt+0x32>
 801a1b2:	2000      	movs	r0, #0
 801a1b4:	4285      	cmp	r5, r0
 801a1b6:	d010      	beq.n	801a1da <__ieee754_sqrt+0x6e>
 801a1b8:	0022      	movs	r2, r4
 801a1ba:	002b      	movs	r3, r5
 801a1bc:	0020      	movs	r0, r4
 801a1be:	0029      	movs	r1, r5
 801a1c0:	f7e8 fc82 	bl	8002ac8 <__aeabi_dsub>
 801a1c4:	0002      	movs	r2, r0
 801a1c6:	000b      	movs	r3, r1
 801a1c8:	f7e7 fd72 	bl	8001cb0 <__aeabi_ddiv>
 801a1cc:	e7e5      	b.n	801a19a <__ieee754_sqrt+0x2e>
 801a1ce:	1528      	asrs	r0, r5, #20
 801a1d0:	d115      	bne.n	801a1fe <__ieee754_sqrt+0x92>
 801a1d2:	2480      	movs	r4, #128	@ 0x80
 801a1d4:	2100      	movs	r1, #0
 801a1d6:	0364      	lsls	r4, r4, #13
 801a1d8:	e007      	b.n	801a1ea <__ieee754_sqrt+0x7e>
 801a1da:	0ada      	lsrs	r2, r3, #11
 801a1dc:	3815      	subs	r0, #21
 801a1de:	055b      	lsls	r3, r3, #21
 801a1e0:	2a00      	cmp	r2, #0
 801a1e2:	d0fa      	beq.n	801a1da <__ieee754_sqrt+0x6e>
 801a1e4:	e7f5      	b.n	801a1d2 <__ieee754_sqrt+0x66>
 801a1e6:	0052      	lsls	r2, r2, #1
 801a1e8:	3101      	adds	r1, #1
 801a1ea:	4222      	tst	r2, r4
 801a1ec:	d0fb      	beq.n	801a1e6 <__ieee754_sqrt+0x7a>
 801a1ee:	1e4c      	subs	r4, r1, #1
 801a1f0:	1b00      	subs	r0, r0, r4
 801a1f2:	2420      	movs	r4, #32
 801a1f4:	001d      	movs	r5, r3
 801a1f6:	1a64      	subs	r4, r4, r1
 801a1f8:	40e5      	lsrs	r5, r4
 801a1fa:	408b      	lsls	r3, r1
 801a1fc:	432a      	orrs	r2, r5
 801a1fe:	494b      	ldr	r1, [pc, #300]	@ (801a32c <__ieee754_sqrt+0x1c0>)
 801a200:	0312      	lsls	r2, r2, #12
 801a202:	1844      	adds	r4, r0, r1
 801a204:	2180      	movs	r1, #128	@ 0x80
 801a206:	0b12      	lsrs	r2, r2, #12
 801a208:	0349      	lsls	r1, r1, #13
 801a20a:	4311      	orrs	r1, r2
 801a20c:	07c0      	lsls	r0, r0, #31
 801a20e:	d403      	bmi.n	801a218 <__ieee754_sqrt+0xac>
 801a210:	0fda      	lsrs	r2, r3, #31
 801a212:	0049      	lsls	r1, r1, #1
 801a214:	1851      	adds	r1, r2, r1
 801a216:	005b      	lsls	r3, r3, #1
 801a218:	2500      	movs	r5, #0
 801a21a:	1062      	asrs	r2, r4, #1
 801a21c:	0049      	lsls	r1, r1, #1
 801a21e:	2480      	movs	r4, #128	@ 0x80
 801a220:	9205      	str	r2, [sp, #20]
 801a222:	0fda      	lsrs	r2, r3, #31
 801a224:	1852      	adds	r2, r2, r1
 801a226:	2016      	movs	r0, #22
 801a228:	0029      	movs	r1, r5
 801a22a:	005b      	lsls	r3, r3, #1
 801a22c:	03a4      	lsls	r4, r4, #14
 801a22e:	190e      	adds	r6, r1, r4
 801a230:	4296      	cmp	r6, r2
 801a232:	dc02      	bgt.n	801a23a <__ieee754_sqrt+0xce>
 801a234:	1931      	adds	r1, r6, r4
 801a236:	1b92      	subs	r2, r2, r6
 801a238:	192d      	adds	r5, r5, r4
 801a23a:	0fde      	lsrs	r6, r3, #31
 801a23c:	0052      	lsls	r2, r2, #1
 801a23e:	3801      	subs	r0, #1
 801a240:	1992      	adds	r2, r2, r6
 801a242:	005b      	lsls	r3, r3, #1
 801a244:	0864      	lsrs	r4, r4, #1
 801a246:	2800      	cmp	r0, #0
 801a248:	d1f1      	bne.n	801a22e <__ieee754_sqrt+0xc2>
 801a24a:	2620      	movs	r6, #32
 801a24c:	2780      	movs	r7, #128	@ 0x80
 801a24e:	0004      	movs	r4, r0
 801a250:	9604      	str	r6, [sp, #16]
 801a252:	063f      	lsls	r7, r7, #24
 801a254:	19c6      	adds	r6, r0, r7
 801a256:	46b4      	mov	ip, r6
 801a258:	4291      	cmp	r1, r2
 801a25a:	db02      	blt.n	801a262 <__ieee754_sqrt+0xf6>
 801a25c:	d114      	bne.n	801a288 <__ieee754_sqrt+0x11c>
 801a25e:	429e      	cmp	r6, r3
 801a260:	d812      	bhi.n	801a288 <__ieee754_sqrt+0x11c>
 801a262:	4660      	mov	r0, ip
 801a264:	4666      	mov	r6, ip
 801a266:	19c0      	adds	r0, r0, r7
 801a268:	9100      	str	r1, [sp, #0]
 801a26a:	2e00      	cmp	r6, #0
 801a26c:	da03      	bge.n	801a276 <__ieee754_sqrt+0x10a>
 801a26e:	43c6      	mvns	r6, r0
 801a270:	0ff6      	lsrs	r6, r6, #31
 801a272:	198e      	adds	r6, r1, r6
 801a274:	9600      	str	r6, [sp, #0]
 801a276:	1a52      	subs	r2, r2, r1
 801a278:	4563      	cmp	r3, ip
 801a27a:	4189      	sbcs	r1, r1
 801a27c:	4249      	negs	r1, r1
 801a27e:	1a52      	subs	r2, r2, r1
 801a280:	4661      	mov	r1, ip
 801a282:	1a5b      	subs	r3, r3, r1
 801a284:	9900      	ldr	r1, [sp, #0]
 801a286:	19e4      	adds	r4, r4, r7
 801a288:	0fde      	lsrs	r6, r3, #31
 801a28a:	0052      	lsls	r2, r2, #1
 801a28c:	1992      	adds	r2, r2, r6
 801a28e:	9e04      	ldr	r6, [sp, #16]
 801a290:	005b      	lsls	r3, r3, #1
 801a292:	3e01      	subs	r6, #1
 801a294:	087f      	lsrs	r7, r7, #1
 801a296:	9604      	str	r6, [sp, #16]
 801a298:	2e00      	cmp	r6, #0
 801a29a:	d1db      	bne.n	801a254 <__ieee754_sqrt+0xe8>
 801a29c:	431a      	orrs	r2, r3
 801a29e:	d01f      	beq.n	801a2e0 <__ieee754_sqrt+0x174>
 801a2a0:	4e23      	ldr	r6, [pc, #140]	@ (801a330 <__ieee754_sqrt+0x1c4>)
 801a2a2:	4f24      	ldr	r7, [pc, #144]	@ (801a334 <__ieee754_sqrt+0x1c8>)
 801a2a4:	6830      	ldr	r0, [r6, #0]
 801a2a6:	6871      	ldr	r1, [r6, #4]
 801a2a8:	683a      	ldr	r2, [r7, #0]
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	9200      	str	r2, [sp, #0]
 801a2ae:	9301      	str	r3, [sp, #4]
 801a2b0:	6832      	ldr	r2, [r6, #0]
 801a2b2:	6873      	ldr	r3, [r6, #4]
 801a2b4:	9202      	str	r2, [sp, #8]
 801a2b6:	9303      	str	r3, [sp, #12]
 801a2b8:	9a00      	ldr	r2, [sp, #0]
 801a2ba:	9b01      	ldr	r3, [sp, #4]
 801a2bc:	f7e8 fc04 	bl	8002ac8 <__aeabi_dsub>
 801a2c0:	0002      	movs	r2, r0
 801a2c2:	000b      	movs	r3, r1
 801a2c4:	9802      	ldr	r0, [sp, #8]
 801a2c6:	9903      	ldr	r1, [sp, #12]
 801a2c8:	f7e6 f8d0 	bl	800046c <__aeabi_dcmple>
 801a2cc:	2800      	cmp	r0, #0
 801a2ce:	d007      	beq.n	801a2e0 <__ieee754_sqrt+0x174>
 801a2d0:	6830      	ldr	r0, [r6, #0]
 801a2d2:	6871      	ldr	r1, [r6, #4]
 801a2d4:	683a      	ldr	r2, [r7, #0]
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	1c67      	adds	r7, r4, #1
 801a2da:	d10f      	bne.n	801a2fc <__ieee754_sqrt+0x190>
 801a2dc:	9c04      	ldr	r4, [sp, #16]
 801a2de:	3501      	adds	r5, #1
 801a2e0:	4b15      	ldr	r3, [pc, #84]	@ (801a338 <__ieee754_sqrt+0x1cc>)
 801a2e2:	106a      	asrs	r2, r5, #1
 801a2e4:	18d2      	adds	r2, r2, r3
 801a2e6:	0863      	lsrs	r3, r4, #1
 801a2e8:	07ed      	lsls	r5, r5, #31
 801a2ea:	d502      	bpl.n	801a2f2 <__ieee754_sqrt+0x186>
 801a2ec:	2180      	movs	r1, #128	@ 0x80
 801a2ee:	0609      	lsls	r1, r1, #24
 801a2f0:	430b      	orrs	r3, r1
 801a2f2:	9905      	ldr	r1, [sp, #20]
 801a2f4:	001c      	movs	r4, r3
 801a2f6:	0509      	lsls	r1, r1, #20
 801a2f8:	188d      	adds	r5, r1, r2
 801a2fa:	e750      	b.n	801a19e <__ieee754_sqrt+0x32>
 801a2fc:	f7e7 f974 	bl	80015e8 <__aeabi_dadd>
 801a300:	6877      	ldr	r7, [r6, #4]
 801a302:	6836      	ldr	r6, [r6, #0]
 801a304:	0002      	movs	r2, r0
 801a306:	000b      	movs	r3, r1
 801a308:	0030      	movs	r0, r6
 801a30a:	0039      	movs	r1, r7
 801a30c:	f7e6 f8a4 	bl	8000458 <__aeabi_dcmplt>
 801a310:	2800      	cmp	r0, #0
 801a312:	d004      	beq.n	801a31e <__ieee754_sqrt+0x1b2>
 801a314:	3402      	adds	r4, #2
 801a316:	4263      	negs	r3, r4
 801a318:	4163      	adcs	r3, r4
 801a31a:	18ed      	adds	r5, r5, r3
 801a31c:	e7e0      	b.n	801a2e0 <__ieee754_sqrt+0x174>
 801a31e:	2301      	movs	r3, #1
 801a320:	3401      	adds	r4, #1
 801a322:	439c      	bics	r4, r3
 801a324:	e7dc      	b.n	801a2e0 <__ieee754_sqrt+0x174>
 801a326:	46c0      	nop			@ (mov r8, r8)
 801a328:	7ff00000 	.word	0x7ff00000
 801a32c:	fffffc01 	.word	0xfffffc01
 801a330:	200003f0 	.word	0x200003f0
 801a334:	200003e8 	.word	0x200003e8
 801a338:	3fe00000 	.word	0x3fe00000

0801a33c <__ieee754_sqrtf>:
 801a33c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a33e:	0003      	movs	r3, r0
 801a340:	0042      	lsls	r2, r0, #1
 801a342:	1c04      	adds	r4, r0, #0
 801a344:	20ff      	movs	r0, #255	@ 0xff
 801a346:	0852      	lsrs	r2, r2, #1
 801a348:	05c0      	lsls	r0, r0, #23
 801a34a:	4282      	cmp	r2, r0
 801a34c:	d30a      	bcc.n	801a364 <__ieee754_sqrtf+0x28>
 801a34e:	1c21      	adds	r1, r4, #0
 801a350:	1c20      	adds	r0, r4, #0
 801a352:	f7e6 fda3 	bl	8000e9c <__aeabi_fmul>
 801a356:	1c01      	adds	r1, r0, #0
 801a358:	1c20      	adds	r0, r4, #0
 801a35a:	f7e6 fa2f 	bl	80007bc <__aeabi_fadd>
 801a35e:	1c04      	adds	r4, r0, #0
 801a360:	1c20      	adds	r0, r4, #0
 801a362:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a364:	2a00      	cmp	r2, #0
 801a366:	d0fb      	beq.n	801a360 <__ieee754_sqrtf+0x24>
 801a368:	2c00      	cmp	r4, #0
 801a36a:	da07      	bge.n	801a37c <__ieee754_sqrtf+0x40>
 801a36c:	1c21      	adds	r1, r4, #0
 801a36e:	1c20      	adds	r0, r4, #0
 801a370:	f7e6 fed2 	bl	8001118 <__aeabi_fsub>
 801a374:	1c01      	adds	r1, r0, #0
 801a376:	f7e6 fbab 	bl	8000ad0 <__aeabi_fdiv>
 801a37a:	e7f0      	b.n	801a35e <__ieee754_sqrtf+0x22>
 801a37c:	0022      	movs	r2, r4
 801a37e:	15e1      	asrs	r1, r4, #23
 801a380:	4002      	ands	r2, r0
 801a382:	4204      	tst	r4, r0
 801a384:	d046      	beq.n	801a414 <__ieee754_sqrtf+0xd8>
 801a386:	2280      	movs	r2, #128	@ 0x80
 801a388:	000f      	movs	r7, r1
 801a38a:	025b      	lsls	r3, r3, #9
 801a38c:	0a5b      	lsrs	r3, r3, #9
 801a38e:	0412      	lsls	r2, r2, #16
 801a390:	3f7f      	subs	r7, #127	@ 0x7f
 801a392:	4313      	orrs	r3, r2
 801a394:	07c9      	lsls	r1, r1, #31
 801a396:	d400      	bmi.n	801a39a <__ieee754_sqrtf+0x5e>
 801a398:	005b      	lsls	r3, r3, #1
 801a39a:	2400      	movs	r4, #0
 801a39c:	2180      	movs	r1, #128	@ 0x80
 801a39e:	2019      	movs	r0, #25
 801a3a0:	0026      	movs	r6, r4
 801a3a2:	107f      	asrs	r7, r7, #1
 801a3a4:	005b      	lsls	r3, r3, #1
 801a3a6:	0449      	lsls	r1, r1, #17
 801a3a8:	1875      	adds	r5, r6, r1
 801a3aa:	001a      	movs	r2, r3
 801a3ac:	429d      	cmp	r5, r3
 801a3ae:	dc02      	bgt.n	801a3b6 <__ieee754_sqrtf+0x7a>
 801a3b0:	186e      	adds	r6, r5, r1
 801a3b2:	1b5a      	subs	r2, r3, r5
 801a3b4:	1864      	adds	r4, r4, r1
 801a3b6:	3801      	subs	r0, #1
 801a3b8:	0053      	lsls	r3, r2, #1
 801a3ba:	0849      	lsrs	r1, r1, #1
 801a3bc:	2800      	cmp	r0, #0
 801a3be:	d1f3      	bne.n	801a3a8 <__ieee754_sqrtf+0x6c>
 801a3c0:	2a00      	cmp	r2, #0
 801a3c2:	d019      	beq.n	801a3f8 <__ieee754_sqrtf+0xbc>
 801a3c4:	4d17      	ldr	r5, [pc, #92]	@ (801a424 <__ieee754_sqrtf+0xe8>)
 801a3c6:	4e18      	ldr	r6, [pc, #96]	@ (801a428 <__ieee754_sqrtf+0xec>)
 801a3c8:	6828      	ldr	r0, [r5, #0]
 801a3ca:	6831      	ldr	r1, [r6, #0]
 801a3cc:	682b      	ldr	r3, [r5, #0]
 801a3ce:	9301      	str	r3, [sp, #4]
 801a3d0:	f7e6 fea2 	bl	8001118 <__aeabi_fsub>
 801a3d4:	1c01      	adds	r1, r0, #0
 801a3d6:	9801      	ldr	r0, [sp, #4]
 801a3d8:	f7e6 f882 	bl	80004e0 <__aeabi_fcmple>
 801a3dc:	2800      	cmp	r0, #0
 801a3de:	d00b      	beq.n	801a3f8 <__ieee754_sqrtf+0xbc>
 801a3e0:	6828      	ldr	r0, [r5, #0]
 801a3e2:	6831      	ldr	r1, [r6, #0]
 801a3e4:	f7e6 f9ea 	bl	80007bc <__aeabi_fadd>
 801a3e8:	682d      	ldr	r5, [r5, #0]
 801a3ea:	1c01      	adds	r1, r0, #0
 801a3ec:	1c28      	adds	r0, r5, #0
 801a3ee:	f7e6 f86d 	bl	80004cc <__aeabi_fcmplt>
 801a3f2:	2800      	cmp	r0, #0
 801a3f4:	d011      	beq.n	801a41a <__ieee754_sqrtf+0xde>
 801a3f6:	3402      	adds	r4, #2
 801a3f8:	23fc      	movs	r3, #252	@ 0xfc
 801a3fa:	1064      	asrs	r4, r4, #1
 801a3fc:	059b      	lsls	r3, r3, #22
 801a3fe:	18e3      	adds	r3, r4, r3
 801a400:	05fc      	lsls	r4, r7, #23
 801a402:	18e4      	adds	r4, r4, r3
 801a404:	e7ac      	b.n	801a360 <__ieee754_sqrtf+0x24>
 801a406:	005b      	lsls	r3, r3, #1
 801a408:	3201      	adds	r2, #1
 801a40a:	4203      	tst	r3, r0
 801a40c:	d0fb      	beq.n	801a406 <__ieee754_sqrtf+0xca>
 801a40e:	3a01      	subs	r2, #1
 801a410:	1a89      	subs	r1, r1, r2
 801a412:	e7b8      	b.n	801a386 <__ieee754_sqrtf+0x4a>
 801a414:	2080      	movs	r0, #128	@ 0x80
 801a416:	0400      	lsls	r0, r0, #16
 801a418:	e7f7      	b.n	801a40a <__ieee754_sqrtf+0xce>
 801a41a:	2301      	movs	r3, #1
 801a41c:	3401      	adds	r4, #1
 801a41e:	439c      	bics	r4, r3
 801a420:	e7ea      	b.n	801a3f8 <__ieee754_sqrtf+0xbc>
 801a422:	46c0      	nop			@ (mov r8, r8)
 801a424:	200003fc 	.word	0x200003fc
 801a428:	200003f8 	.word	0x200003f8

0801a42c <__ieee754_log10>:
 801a42c:	2280      	movs	r2, #128	@ 0x80
 801a42e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a430:	000b      	movs	r3, r1
 801a432:	0004      	movs	r4, r0
 801a434:	000d      	movs	r5, r1
 801a436:	b085      	sub	sp, #20
 801a438:	0352      	lsls	r2, r2, #13
 801a43a:	4291      	cmp	r1, r2
 801a43c:	da26      	bge.n	801a48c <__ieee754_log10+0x60>
 801a43e:	004a      	lsls	r2, r1, #1
 801a440:	0852      	lsrs	r2, r2, #1
 801a442:	4302      	orrs	r2, r0
 801a444:	d107      	bne.n	801a456 <__ieee754_log10+0x2a>
 801a446:	2200      	movs	r2, #0
 801a448:	2300      	movs	r3, #0
 801a44a:	2000      	movs	r0, #0
 801a44c:	4929      	ldr	r1, [pc, #164]	@ (801a4f4 <__ieee754_log10+0xc8>)
 801a44e:	f7e7 fc2f 	bl	8001cb0 <__aeabi_ddiv>
 801a452:	b005      	add	sp, #20
 801a454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a456:	2900      	cmp	r1, #0
 801a458:	da05      	bge.n	801a466 <__ieee754_log10+0x3a>
 801a45a:	0002      	movs	r2, r0
 801a45c:	f7e8 fb34 	bl	8002ac8 <__aeabi_dsub>
 801a460:	2200      	movs	r2, #0
 801a462:	2300      	movs	r3, #0
 801a464:	e7f3      	b.n	801a44e <__ieee754_log10+0x22>
 801a466:	2200      	movs	r2, #0
 801a468:	4b23      	ldr	r3, [pc, #140]	@ (801a4f8 <__ieee754_log10+0xcc>)
 801a46a:	f7e8 f865 	bl	8002538 <__aeabi_dmul>
 801a46e:	2236      	movs	r2, #54	@ 0x36
 801a470:	0004      	movs	r4, r0
 801a472:	000d      	movs	r5, r1
 801a474:	000b      	movs	r3, r1
 801a476:	4252      	negs	r2, r2
 801a478:	4920      	ldr	r1, [pc, #128]	@ (801a4fc <__ieee754_log10+0xd0>)
 801a47a:	428b      	cmp	r3, r1
 801a47c:	dd08      	ble.n	801a490 <__ieee754_log10+0x64>
 801a47e:	0022      	movs	r2, r4
 801a480:	002b      	movs	r3, r5
 801a482:	0020      	movs	r0, r4
 801a484:	0029      	movs	r1, r5
 801a486:	f7e7 f8af 	bl	80015e8 <__aeabi_dadd>
 801a48a:	e7e2      	b.n	801a452 <__ieee754_log10+0x26>
 801a48c:	2200      	movs	r2, #0
 801a48e:	e7f3      	b.n	801a478 <__ieee754_log10+0x4c>
 801a490:	491b      	ldr	r1, [pc, #108]	@ (801a500 <__ieee754_log10+0xd4>)
 801a492:	1518      	asrs	r0, r3, #20
 801a494:	1840      	adds	r0, r0, r1
 801a496:	1880      	adds	r0, r0, r2
 801a498:	0fc2      	lsrs	r2, r0, #31
 801a49a:	031b      	lsls	r3, r3, #12
 801a49c:	0b1b      	lsrs	r3, r3, #12
 801a49e:	1880      	adds	r0, r0, r2
 801a4a0:	9203      	str	r2, [sp, #12]
 801a4a2:	9300      	str	r3, [sp, #0]
 801a4a4:	f7e8 ff0a 	bl	80032bc <__aeabi_i2d>
 801a4a8:	9a03      	ldr	r2, [sp, #12]
 801a4aa:	4b16      	ldr	r3, [pc, #88]	@ (801a504 <__ieee754_log10+0xd8>)
 801a4ac:	0006      	movs	r6, r0
 801a4ae:	1a9b      	subs	r3, r3, r2
 801a4b0:	9a00      	ldr	r2, [sp, #0]
 801a4b2:	051b      	lsls	r3, r3, #20
 801a4b4:	431a      	orrs	r2, r3
 801a4b6:	0015      	movs	r5, r2
 801a4b8:	4b13      	ldr	r3, [pc, #76]	@ (801a508 <__ieee754_log10+0xdc>)
 801a4ba:	4a14      	ldr	r2, [pc, #80]	@ (801a50c <__ieee754_log10+0xe0>)
 801a4bc:	000f      	movs	r7, r1
 801a4be:	f7e8 f83b 	bl	8002538 <__aeabi_dmul>
 801a4c2:	9000      	str	r0, [sp, #0]
 801a4c4:	9101      	str	r1, [sp, #4]
 801a4c6:	0020      	movs	r0, r4
 801a4c8:	0029      	movs	r1, r5
 801a4ca:	f000 f93b 	bl	801a744 <__ieee754_log>
 801a4ce:	4a10      	ldr	r2, [pc, #64]	@ (801a510 <__ieee754_log10+0xe4>)
 801a4d0:	4b10      	ldr	r3, [pc, #64]	@ (801a514 <__ieee754_log10+0xe8>)
 801a4d2:	f7e8 f831 	bl	8002538 <__aeabi_dmul>
 801a4d6:	9a00      	ldr	r2, [sp, #0]
 801a4d8:	9b01      	ldr	r3, [sp, #4]
 801a4da:	f7e7 f885 	bl	80015e8 <__aeabi_dadd>
 801a4de:	4a0e      	ldr	r2, [pc, #56]	@ (801a518 <__ieee754_log10+0xec>)
 801a4e0:	4b0e      	ldr	r3, [pc, #56]	@ (801a51c <__ieee754_log10+0xf0>)
 801a4e2:	0004      	movs	r4, r0
 801a4e4:	000d      	movs	r5, r1
 801a4e6:	0030      	movs	r0, r6
 801a4e8:	0039      	movs	r1, r7
 801a4ea:	f7e8 f825 	bl	8002538 <__aeabi_dmul>
 801a4ee:	0002      	movs	r2, r0
 801a4f0:	000b      	movs	r3, r1
 801a4f2:	e7c6      	b.n	801a482 <__ieee754_log10+0x56>
 801a4f4:	c3500000 	.word	0xc3500000
 801a4f8:	43500000 	.word	0x43500000
 801a4fc:	7fefffff 	.word	0x7fefffff
 801a500:	fffffc01 	.word	0xfffffc01
 801a504:	000003ff 	.word	0x000003ff
 801a508:	3d59fef3 	.word	0x3d59fef3
 801a50c:	11f12b36 	.word	0x11f12b36
 801a510:	1526e50e 	.word	0x1526e50e
 801a514:	3fdbcb7b 	.word	0x3fdbcb7b
 801a518:	509f6000 	.word	0x509f6000
 801a51c:	3fd34413 	.word	0x3fd34413

0801a520 <__ieee754_expf>:
 801a520:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a522:	21ff      	movs	r1, #255	@ 0xff
 801a524:	0043      	lsls	r3, r0, #1
 801a526:	1c04      	adds	r4, r0, #0
 801a528:	085b      	lsrs	r3, r3, #1
 801a52a:	05c9      	lsls	r1, r1, #23
 801a52c:	428b      	cmp	r3, r1
 801a52e:	d904      	bls.n	801a53a <__ieee754_expf+0x1a>
 801a530:	1c01      	adds	r1, r0, #0
 801a532:	1c20      	adds	r0, r4, #0
 801a534:	f7e6 f942 	bl	80007bc <__aeabi_fadd>
 801a538:	e00d      	b.n	801a556 <__ieee754_expf+0x36>
 801a53a:	0fc6      	lsrs	r6, r0, #31
 801a53c:	428b      	cmp	r3, r1
 801a53e:	d104      	bne.n	801a54a <__ieee754_expf+0x2a>
 801a540:	2e00      	cmp	r6, #0
 801a542:	d000      	beq.n	801a546 <__ieee754_expf+0x26>
 801a544:	e0ba      	b.n	801a6bc <__ieee754_expf+0x19c>
 801a546:	1c20      	adds	r0, r4, #0
 801a548:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a54a:	495d      	ldr	r1, [pc, #372]	@ (801a6c0 <__ieee754_expf+0x1a0>)
 801a54c:	4288      	cmp	r0, r1
 801a54e:	dd04      	ble.n	801a55a <__ieee754_expf+0x3a>
 801a550:	2000      	movs	r0, #0
 801a552:	f000 f8f1 	bl	801a738 <__math_oflowf>
 801a556:	1c04      	adds	r4, r0, #0
 801a558:	e7f5      	b.n	801a546 <__ieee754_expf+0x26>
 801a55a:	2800      	cmp	r0, #0
 801a55c:	da06      	bge.n	801a56c <__ieee754_expf+0x4c>
 801a55e:	4a59      	ldr	r2, [pc, #356]	@ (801a6c4 <__ieee754_expf+0x1a4>)
 801a560:	4293      	cmp	r3, r2
 801a562:	d903      	bls.n	801a56c <__ieee754_expf+0x4c>
 801a564:	2000      	movs	r0, #0
 801a566:	f000 f8e1 	bl	801a72c <__math_uflowf>
 801a56a:	e7f4      	b.n	801a556 <__ieee754_expf+0x36>
 801a56c:	4a56      	ldr	r2, [pc, #344]	@ (801a6c8 <__ieee754_expf+0x1a8>)
 801a56e:	4293      	cmp	r3, r2
 801a570:	d96e      	bls.n	801a650 <__ieee754_expf+0x130>
 801a572:	4a56      	ldr	r2, [pc, #344]	@ (801a6cc <__ieee754_expf+0x1ac>)
 801a574:	00b5      	lsls	r5, r6, #2
 801a576:	4293      	cmp	r3, r2
 801a578:	d84e      	bhi.n	801a618 <__ieee754_expf+0xf8>
 801a57a:	4b55      	ldr	r3, [pc, #340]	@ (801a6d0 <__ieee754_expf+0x1b0>)
 801a57c:	1c20      	adds	r0, r4, #0
 801a57e:	5959      	ldr	r1, [r3, r5]
 801a580:	f7e6 fdca 	bl	8001118 <__aeabi_fsub>
 801a584:	4b53      	ldr	r3, [pc, #332]	@ (801a6d4 <__ieee754_expf+0x1b4>)
 801a586:	1c07      	adds	r7, r0, #0
 801a588:	595b      	ldr	r3, [r3, r5]
 801a58a:	2501      	movs	r5, #1
 801a58c:	1bad      	subs	r5, r5, r6
 801a58e:	9300      	str	r3, [sp, #0]
 801a590:	1bad      	subs	r5, r5, r6
 801a592:	9900      	ldr	r1, [sp, #0]
 801a594:	1c38      	adds	r0, r7, #0
 801a596:	f7e6 fdbf 	bl	8001118 <__aeabi_fsub>
 801a59a:	1c04      	adds	r4, r0, #0
 801a59c:	1c21      	adds	r1, r4, #0
 801a59e:	1c20      	adds	r0, r4, #0
 801a5a0:	f7e6 fc7c 	bl	8000e9c <__aeabi_fmul>
 801a5a4:	494c      	ldr	r1, [pc, #304]	@ (801a6d8 <__ieee754_expf+0x1b8>)
 801a5a6:	1c06      	adds	r6, r0, #0
 801a5a8:	f7e6 fc78 	bl	8000e9c <__aeabi_fmul>
 801a5ac:	494b      	ldr	r1, [pc, #300]	@ (801a6dc <__ieee754_expf+0x1bc>)
 801a5ae:	f7e6 fdb3 	bl	8001118 <__aeabi_fsub>
 801a5b2:	1c31      	adds	r1, r6, #0
 801a5b4:	f7e6 fc72 	bl	8000e9c <__aeabi_fmul>
 801a5b8:	4949      	ldr	r1, [pc, #292]	@ (801a6e0 <__ieee754_expf+0x1c0>)
 801a5ba:	f7e6 f8ff 	bl	80007bc <__aeabi_fadd>
 801a5be:	1c31      	adds	r1, r6, #0
 801a5c0:	f7e6 fc6c 	bl	8000e9c <__aeabi_fmul>
 801a5c4:	4947      	ldr	r1, [pc, #284]	@ (801a6e4 <__ieee754_expf+0x1c4>)
 801a5c6:	f7e6 fda7 	bl	8001118 <__aeabi_fsub>
 801a5ca:	1c31      	adds	r1, r6, #0
 801a5cc:	f7e6 fc66 	bl	8000e9c <__aeabi_fmul>
 801a5d0:	4945      	ldr	r1, [pc, #276]	@ (801a6e8 <__ieee754_expf+0x1c8>)
 801a5d2:	f7e6 f8f3 	bl	80007bc <__aeabi_fadd>
 801a5d6:	1c31      	adds	r1, r6, #0
 801a5d8:	f7e6 fc60 	bl	8000e9c <__aeabi_fmul>
 801a5dc:	1c01      	adds	r1, r0, #0
 801a5de:	1c20      	adds	r0, r4, #0
 801a5e0:	f7e6 fd9a 	bl	8001118 <__aeabi_fsub>
 801a5e4:	1c01      	adds	r1, r0, #0
 801a5e6:	1c06      	adds	r6, r0, #0
 801a5e8:	1c20      	adds	r0, r4, #0
 801a5ea:	f7e6 fc57 	bl	8000e9c <__aeabi_fmul>
 801a5ee:	9001      	str	r0, [sp, #4]
 801a5f0:	2d00      	cmp	r5, #0
 801a5f2:	d140      	bne.n	801a676 <__ieee754_expf+0x156>
 801a5f4:	2180      	movs	r1, #128	@ 0x80
 801a5f6:	1c30      	adds	r0, r6, #0
 801a5f8:	05c9      	lsls	r1, r1, #23
 801a5fa:	f7e6 fd8d 	bl	8001118 <__aeabi_fsub>
 801a5fe:	1c01      	adds	r1, r0, #0
 801a600:	9801      	ldr	r0, [sp, #4]
 801a602:	f7e6 fa65 	bl	8000ad0 <__aeabi_fdiv>
 801a606:	1c21      	adds	r1, r4, #0
 801a608:	f7e6 fd86 	bl	8001118 <__aeabi_fsub>
 801a60c:	1c01      	adds	r1, r0, #0
 801a60e:	20fe      	movs	r0, #254	@ 0xfe
 801a610:	0580      	lsls	r0, r0, #22
 801a612:	f7e6 fd81 	bl	8001118 <__aeabi_fsub>
 801a616:	e79e      	b.n	801a556 <__ieee754_expf+0x36>
 801a618:	4934      	ldr	r1, [pc, #208]	@ (801a6ec <__ieee754_expf+0x1cc>)
 801a61a:	1c20      	adds	r0, r4, #0
 801a61c:	f7e6 fc3e 	bl	8000e9c <__aeabi_fmul>
 801a620:	4b33      	ldr	r3, [pc, #204]	@ (801a6f0 <__ieee754_expf+0x1d0>)
 801a622:	5959      	ldr	r1, [r3, r5]
 801a624:	f7e6 f8ca 	bl	80007bc <__aeabi_fadd>
 801a628:	f7e6 ff30 	bl	800148c <__aeabi_f2iz>
 801a62c:	0005      	movs	r5, r0
 801a62e:	f7e6 ff4d 	bl	80014cc <__aeabi_i2f>
 801a632:	4930      	ldr	r1, [pc, #192]	@ (801a6f4 <__ieee754_expf+0x1d4>)
 801a634:	1c06      	adds	r6, r0, #0
 801a636:	f7e6 fc31 	bl	8000e9c <__aeabi_fmul>
 801a63a:	1c01      	adds	r1, r0, #0
 801a63c:	1c20      	adds	r0, r4, #0
 801a63e:	f7e6 fd6b 	bl	8001118 <__aeabi_fsub>
 801a642:	492d      	ldr	r1, [pc, #180]	@ (801a6f8 <__ieee754_expf+0x1d8>)
 801a644:	1c07      	adds	r7, r0, #0
 801a646:	1c30      	adds	r0, r6, #0
 801a648:	f7e6 fc28 	bl	8000e9c <__aeabi_fmul>
 801a64c:	9000      	str	r0, [sp, #0]
 801a64e:	e7a0      	b.n	801a592 <__ieee754_expf+0x72>
 801a650:	22d0      	movs	r2, #208	@ 0xd0
 801a652:	0592      	lsls	r2, r2, #22
 801a654:	4293      	cmp	r3, r2
 801a656:	d20c      	bcs.n	801a672 <__ieee754_expf+0x152>
 801a658:	4928      	ldr	r1, [pc, #160]	@ (801a6fc <__ieee754_expf+0x1dc>)
 801a65a:	1c20      	adds	r0, r4, #0
 801a65c:	f7e6 f8ae 	bl	80007bc <__aeabi_fadd>
 801a660:	21fe      	movs	r1, #254	@ 0xfe
 801a662:	0589      	lsls	r1, r1, #22
 801a664:	f7e5 ff46 	bl	80004f4 <__aeabi_fcmpgt>
 801a668:	1e05      	subs	r5, r0, #0
 801a66a:	d097      	beq.n	801a59c <__ieee754_expf+0x7c>
 801a66c:	21fe      	movs	r1, #254	@ 0xfe
 801a66e:	0589      	lsls	r1, r1, #22
 801a670:	e75f      	b.n	801a532 <__ieee754_expf+0x12>
 801a672:	2500      	movs	r5, #0
 801a674:	e792      	b.n	801a59c <__ieee754_expf+0x7c>
 801a676:	2080      	movs	r0, #128	@ 0x80
 801a678:	1c31      	adds	r1, r6, #0
 801a67a:	05c0      	lsls	r0, r0, #23
 801a67c:	f7e6 fd4c 	bl	8001118 <__aeabi_fsub>
 801a680:	1c01      	adds	r1, r0, #0
 801a682:	9801      	ldr	r0, [sp, #4]
 801a684:	f7e6 fa24 	bl	8000ad0 <__aeabi_fdiv>
 801a688:	1c01      	adds	r1, r0, #0
 801a68a:	9800      	ldr	r0, [sp, #0]
 801a68c:	f7e6 fd44 	bl	8001118 <__aeabi_fsub>
 801a690:	1c39      	adds	r1, r7, #0
 801a692:	f7e6 fd41 	bl	8001118 <__aeabi_fsub>
 801a696:	1c01      	adds	r1, r0, #0
 801a698:	20fe      	movs	r0, #254	@ 0xfe
 801a69a:	0580      	lsls	r0, r0, #22
 801a69c:	f7e6 fd3c 	bl	8001118 <__aeabi_fsub>
 801a6a0:	002b      	movs	r3, r5
 801a6a2:	337d      	adds	r3, #125	@ 0x7d
 801a6a4:	db02      	blt.n	801a6ac <__ieee754_expf+0x18c>
 801a6a6:	05ec      	lsls	r4, r5, #23
 801a6a8:	1824      	adds	r4, r4, r0
 801a6aa:	e74c      	b.n	801a546 <__ieee754_expf+0x26>
 801a6ac:	21d8      	movs	r1, #216	@ 0xd8
 801a6ae:	3564      	adds	r5, #100	@ 0x64
 801a6b0:	05ed      	lsls	r5, r5, #23
 801a6b2:	1828      	adds	r0, r5, r0
 801a6b4:	0509      	lsls	r1, r1, #20
 801a6b6:	f7e6 fbf1 	bl	8000e9c <__aeabi_fmul>
 801a6ba:	e74c      	b.n	801a556 <__ieee754_expf+0x36>
 801a6bc:	2400      	movs	r4, #0
 801a6be:	e742      	b.n	801a546 <__ieee754_expf+0x26>
 801a6c0:	42b17217 	.word	0x42b17217
 801a6c4:	42cff1b5 	.word	0x42cff1b5
 801a6c8:	3eb17218 	.word	0x3eb17218
 801a6cc:	3f851591 	.word	0x3f851591
 801a6d0:	0801bce8 	.word	0x0801bce8
 801a6d4:	0801bce0 	.word	0x0801bce0
 801a6d8:	3331bb4c 	.word	0x3331bb4c
 801a6dc:	35ddea0e 	.word	0x35ddea0e
 801a6e0:	388ab355 	.word	0x388ab355
 801a6e4:	3b360b61 	.word	0x3b360b61
 801a6e8:	3e2aaaab 	.word	0x3e2aaaab
 801a6ec:	3fb8aa3b 	.word	0x3fb8aa3b
 801a6f0:	0801bcf0 	.word	0x0801bcf0
 801a6f4:	3f317180 	.word	0x3f317180
 801a6f8:	3717f7d1 	.word	0x3717f7d1
 801a6fc:	7149f2ca 	.word	0x7149f2ca

0801a700 <with_errnof>:
 801a700:	b570      	push	{r4, r5, r6, lr}
 801a702:	000d      	movs	r5, r1
 801a704:	1c04      	adds	r4, r0, #0
 801a706:	f7fd fb67 	bl	8017dd8 <__errno>
 801a70a:	6005      	str	r5, [r0, #0]
 801a70c:	1c20      	adds	r0, r4, #0
 801a70e:	bd70      	pop	{r4, r5, r6, pc}

0801a710 <xflowf>:
 801a710:	b510      	push	{r4, lr}
 801a712:	1c0b      	adds	r3, r1, #0
 801a714:	2800      	cmp	r0, #0
 801a716:	d002      	beq.n	801a71e <xflowf+0xe>
 801a718:	2380      	movs	r3, #128	@ 0x80
 801a71a:	061b      	lsls	r3, r3, #24
 801a71c:	18cb      	adds	r3, r1, r3
 801a71e:	1c18      	adds	r0, r3, #0
 801a720:	f7e6 fbbc 	bl	8000e9c <__aeabi_fmul>
 801a724:	2122      	movs	r1, #34	@ 0x22
 801a726:	f7ff ffeb 	bl	801a700 <with_errnof>
 801a72a:	bd10      	pop	{r4, pc}

0801a72c <__math_uflowf>:
 801a72c:	2180      	movs	r1, #128	@ 0x80
 801a72e:	b510      	push	{r4, lr}
 801a730:	0549      	lsls	r1, r1, #21
 801a732:	f7ff ffed 	bl	801a710 <xflowf>
 801a736:	bd10      	pop	{r4, pc}

0801a738 <__math_oflowf>:
 801a738:	21e0      	movs	r1, #224	@ 0xe0
 801a73a:	b510      	push	{r4, lr}
 801a73c:	05c9      	lsls	r1, r1, #23
 801a73e:	f7ff ffe7 	bl	801a710 <xflowf>
 801a742:	bd10      	pop	{r4, pc}

0801a744 <__ieee754_log>:
 801a744:	2380      	movs	r3, #128	@ 0x80
 801a746:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a748:	035b      	lsls	r3, r3, #13
 801a74a:	000e      	movs	r6, r1
 801a74c:	b08d      	sub	sp, #52	@ 0x34
 801a74e:	4299      	cmp	r1, r3
 801a750:	da23      	bge.n	801a79a <__ieee754_log+0x56>
 801a752:	004b      	lsls	r3, r1, #1
 801a754:	085b      	lsrs	r3, r3, #1
 801a756:	4303      	orrs	r3, r0
 801a758:	d107      	bne.n	801a76a <__ieee754_log+0x26>
 801a75a:	2200      	movs	r2, #0
 801a75c:	2300      	movs	r3, #0
 801a75e:	2000      	movs	r0, #0
 801a760:	49b4      	ldr	r1, [pc, #720]	@ (801aa34 <__ieee754_log+0x2f0>)
 801a762:	f7e7 faa5 	bl	8001cb0 <__aeabi_ddiv>
 801a766:	b00d      	add	sp, #52	@ 0x34
 801a768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a76a:	2900      	cmp	r1, #0
 801a76c:	da06      	bge.n	801a77c <__ieee754_log+0x38>
 801a76e:	0002      	movs	r2, r0
 801a770:	000b      	movs	r3, r1
 801a772:	f7e8 f9a9 	bl	8002ac8 <__aeabi_dsub>
 801a776:	2200      	movs	r2, #0
 801a778:	2300      	movs	r3, #0
 801a77a:	e7f2      	b.n	801a762 <__ieee754_log+0x1e>
 801a77c:	4bae      	ldr	r3, [pc, #696]	@ (801aa38 <__ieee754_log+0x2f4>)
 801a77e:	2200      	movs	r2, #0
 801a780:	f7e7 feda 	bl	8002538 <__aeabi_dmul>
 801a784:	2336      	movs	r3, #54	@ 0x36
 801a786:	000e      	movs	r6, r1
 801a788:	425b      	negs	r3, r3
 801a78a:	4aac      	ldr	r2, [pc, #688]	@ (801aa3c <__ieee754_log+0x2f8>)
 801a78c:	4296      	cmp	r6, r2
 801a78e:	dd06      	ble.n	801a79e <__ieee754_log+0x5a>
 801a790:	0002      	movs	r2, r0
 801a792:	000b      	movs	r3, r1
 801a794:	f7e6 ff28 	bl	80015e8 <__aeabi_dadd>
 801a798:	e7e5      	b.n	801a766 <__ieee754_log+0x22>
 801a79a:	2300      	movs	r3, #0
 801a79c:	e7f5      	b.n	801a78a <__ieee754_log+0x46>
 801a79e:	4ca8      	ldr	r4, [pc, #672]	@ (801aa40 <__ieee754_log+0x2fc>)
 801a7a0:	1532      	asrs	r2, r6, #20
 801a7a2:	1912      	adds	r2, r2, r4
 801a7a4:	0336      	lsls	r6, r6, #12
 801a7a6:	4ca7      	ldr	r4, [pc, #668]	@ (801aa44 <__ieee754_log+0x300>)
 801a7a8:	18d2      	adds	r2, r2, r3
 801a7aa:	0b33      	lsrs	r3, r6, #12
 801a7ac:	9302      	str	r3, [sp, #8]
 801a7ae:	191b      	adds	r3, r3, r4
 801a7b0:	2480      	movs	r4, #128	@ 0x80
 801a7b2:	0364      	lsls	r4, r4, #13
 801a7b4:	4023      	ands	r3, r4
 801a7b6:	4ca4      	ldr	r4, [pc, #656]	@ (801aa48 <__ieee754_log+0x304>)
 801a7b8:	9d02      	ldr	r5, [sp, #8]
 801a7ba:	405c      	eors	r4, r3
 801a7bc:	151b      	asrs	r3, r3, #20
 801a7be:	189b      	adds	r3, r3, r2
 801a7c0:	4325      	orrs	r5, r4
 801a7c2:	2200      	movs	r2, #0
 801a7c4:	9300      	str	r3, [sp, #0]
 801a7c6:	0029      	movs	r1, r5
 801a7c8:	4b9f      	ldr	r3, [pc, #636]	@ (801aa48 <__ieee754_log+0x304>)
 801a7ca:	f7e8 f97d 	bl	8002ac8 <__aeabi_dsub>
 801a7ce:	9b02      	ldr	r3, [sp, #8]
 801a7d0:	0006      	movs	r6, r0
 801a7d2:	3302      	adds	r3, #2
 801a7d4:	031b      	lsls	r3, r3, #12
 801a7d6:	000f      	movs	r7, r1
 801a7d8:	2200      	movs	r2, #0
 801a7da:	0b1b      	lsrs	r3, r3, #12
 801a7dc:	2b02      	cmp	r3, #2
 801a7de:	dc64      	bgt.n	801a8aa <__ieee754_log+0x166>
 801a7e0:	2300      	movs	r3, #0
 801a7e2:	f7e5 fe33 	bl	800044c <__aeabi_dcmpeq>
 801a7e6:	2800      	cmp	r0, #0
 801a7e8:	d019      	beq.n	801a81e <__ieee754_log+0xda>
 801a7ea:	9b00      	ldr	r3, [sp, #0]
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	d100      	bne.n	801a7f2 <__ieee754_log+0xae>
 801a7f0:	e11c      	b.n	801aa2c <__ieee754_log+0x2e8>
 801a7f2:	0018      	movs	r0, r3
 801a7f4:	f7e8 fd62 	bl	80032bc <__aeabi_i2d>
 801a7f8:	4a94      	ldr	r2, [pc, #592]	@ (801aa4c <__ieee754_log+0x308>)
 801a7fa:	4b95      	ldr	r3, [pc, #596]	@ (801aa50 <__ieee754_log+0x30c>)
 801a7fc:	0004      	movs	r4, r0
 801a7fe:	000d      	movs	r5, r1
 801a800:	f7e7 fe9a 	bl	8002538 <__aeabi_dmul>
 801a804:	4a93      	ldr	r2, [pc, #588]	@ (801aa54 <__ieee754_log+0x310>)
 801a806:	0006      	movs	r6, r0
 801a808:	000f      	movs	r7, r1
 801a80a:	4b93      	ldr	r3, [pc, #588]	@ (801aa58 <__ieee754_log+0x314>)
 801a80c:	0020      	movs	r0, r4
 801a80e:	0029      	movs	r1, r5
 801a810:	f7e7 fe92 	bl	8002538 <__aeabi_dmul>
 801a814:	0002      	movs	r2, r0
 801a816:	000b      	movs	r3, r1
 801a818:	0030      	movs	r0, r6
 801a81a:	0039      	movs	r1, r7
 801a81c:	e7ba      	b.n	801a794 <__ieee754_log+0x50>
 801a81e:	4a8f      	ldr	r2, [pc, #572]	@ (801aa5c <__ieee754_log+0x318>)
 801a820:	4b8f      	ldr	r3, [pc, #572]	@ (801aa60 <__ieee754_log+0x31c>)
 801a822:	0030      	movs	r0, r6
 801a824:	0039      	movs	r1, r7
 801a826:	f7e7 fe87 	bl	8002538 <__aeabi_dmul>
 801a82a:	0002      	movs	r2, r0
 801a82c:	000b      	movs	r3, r1
 801a82e:	2000      	movs	r0, #0
 801a830:	498c      	ldr	r1, [pc, #560]	@ (801aa64 <__ieee754_log+0x320>)
 801a832:	f7e8 f949 	bl	8002ac8 <__aeabi_dsub>
 801a836:	0032      	movs	r2, r6
 801a838:	0004      	movs	r4, r0
 801a83a:	000d      	movs	r5, r1
 801a83c:	003b      	movs	r3, r7
 801a83e:	0030      	movs	r0, r6
 801a840:	0039      	movs	r1, r7
 801a842:	f7e7 fe79 	bl	8002538 <__aeabi_dmul>
 801a846:	000b      	movs	r3, r1
 801a848:	0002      	movs	r2, r0
 801a84a:	0029      	movs	r1, r5
 801a84c:	0020      	movs	r0, r4
 801a84e:	f7e7 fe73 	bl	8002538 <__aeabi_dmul>
 801a852:	9b00      	ldr	r3, [sp, #0]
 801a854:	9002      	str	r0, [sp, #8]
 801a856:	9103      	str	r1, [sp, #12]
 801a858:	2b00      	cmp	r3, #0
 801a85a:	d106      	bne.n	801a86a <__ieee754_log+0x126>
 801a85c:	0002      	movs	r2, r0
 801a85e:	000b      	movs	r3, r1
 801a860:	0030      	movs	r0, r6
 801a862:	0039      	movs	r1, r7
 801a864:	f7e8 f930 	bl	8002ac8 <__aeabi_dsub>
 801a868:	e77d      	b.n	801a766 <__ieee754_log+0x22>
 801a86a:	9800      	ldr	r0, [sp, #0]
 801a86c:	f7e8 fd26 	bl	80032bc <__aeabi_i2d>
 801a870:	4a76      	ldr	r2, [pc, #472]	@ (801aa4c <__ieee754_log+0x308>)
 801a872:	4b77      	ldr	r3, [pc, #476]	@ (801aa50 <__ieee754_log+0x30c>)
 801a874:	0004      	movs	r4, r0
 801a876:	000d      	movs	r5, r1
 801a878:	f7e7 fe5e 	bl	8002538 <__aeabi_dmul>
 801a87c:	4a75      	ldr	r2, [pc, #468]	@ (801aa54 <__ieee754_log+0x310>)
 801a87e:	9000      	str	r0, [sp, #0]
 801a880:	9101      	str	r1, [sp, #4]
 801a882:	4b75      	ldr	r3, [pc, #468]	@ (801aa58 <__ieee754_log+0x314>)
 801a884:	0020      	movs	r0, r4
 801a886:	0029      	movs	r1, r5
 801a888:	f7e7 fe56 	bl	8002538 <__aeabi_dmul>
 801a88c:	0002      	movs	r2, r0
 801a88e:	000b      	movs	r3, r1
 801a890:	9802      	ldr	r0, [sp, #8]
 801a892:	9903      	ldr	r1, [sp, #12]
 801a894:	f7e8 f918 	bl	8002ac8 <__aeabi_dsub>
 801a898:	0032      	movs	r2, r6
 801a89a:	003b      	movs	r3, r7
 801a89c:	f7e8 f914 	bl	8002ac8 <__aeabi_dsub>
 801a8a0:	0002      	movs	r2, r0
 801a8a2:	000b      	movs	r3, r1
 801a8a4:	9800      	ldr	r0, [sp, #0]
 801a8a6:	9901      	ldr	r1, [sp, #4]
 801a8a8:	e7dc      	b.n	801a864 <__ieee754_log+0x120>
 801a8aa:	2380      	movs	r3, #128	@ 0x80
 801a8ac:	05db      	lsls	r3, r3, #23
 801a8ae:	f7e6 fe9b 	bl	80015e8 <__aeabi_dadd>
 801a8b2:	0002      	movs	r2, r0
 801a8b4:	000b      	movs	r3, r1
 801a8b6:	0030      	movs	r0, r6
 801a8b8:	0039      	movs	r1, r7
 801a8ba:	f7e7 f9f9 	bl	8001cb0 <__aeabi_ddiv>
 801a8be:	9004      	str	r0, [sp, #16]
 801a8c0:	9105      	str	r1, [sp, #20]
 801a8c2:	9800      	ldr	r0, [sp, #0]
 801a8c4:	f7e8 fcfa 	bl	80032bc <__aeabi_i2d>
 801a8c8:	9a04      	ldr	r2, [sp, #16]
 801a8ca:	9b05      	ldr	r3, [sp, #20]
 801a8cc:	9006      	str	r0, [sp, #24]
 801a8ce:	9107      	str	r1, [sp, #28]
 801a8d0:	0010      	movs	r0, r2
 801a8d2:	0019      	movs	r1, r3
 801a8d4:	f7e7 fe30 	bl	8002538 <__aeabi_dmul>
 801a8d8:	4a63      	ldr	r2, [pc, #396]	@ (801aa68 <__ieee754_log+0x324>)
 801a8da:	9b02      	ldr	r3, [sp, #8]
 801a8dc:	4694      	mov	ip, r2
 801a8de:	4463      	add	r3, ip
 801a8e0:	0002      	movs	r2, r0
 801a8e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a8e4:	000b      	movs	r3, r1
 801a8e6:	9008      	str	r0, [sp, #32]
 801a8e8:	9109      	str	r1, [sp, #36]	@ 0x24
 801a8ea:	f7e7 fe25 	bl	8002538 <__aeabi_dmul>
 801a8ee:	0004      	movs	r4, r0
 801a8f0:	000d      	movs	r5, r1
 801a8f2:	4a5e      	ldr	r2, [pc, #376]	@ (801aa6c <__ieee754_log+0x328>)
 801a8f4:	4b5e      	ldr	r3, [pc, #376]	@ (801aa70 <__ieee754_log+0x32c>)
 801a8f6:	f7e7 fe1f 	bl	8002538 <__aeabi_dmul>
 801a8fa:	4a5e      	ldr	r2, [pc, #376]	@ (801aa74 <__ieee754_log+0x330>)
 801a8fc:	4b5e      	ldr	r3, [pc, #376]	@ (801aa78 <__ieee754_log+0x334>)
 801a8fe:	f7e6 fe73 	bl	80015e8 <__aeabi_dadd>
 801a902:	0022      	movs	r2, r4
 801a904:	002b      	movs	r3, r5
 801a906:	f7e7 fe17 	bl	8002538 <__aeabi_dmul>
 801a90a:	4a5c      	ldr	r2, [pc, #368]	@ (801aa7c <__ieee754_log+0x338>)
 801a90c:	4b5c      	ldr	r3, [pc, #368]	@ (801aa80 <__ieee754_log+0x33c>)
 801a90e:	f7e6 fe6b 	bl	80015e8 <__aeabi_dadd>
 801a912:	0022      	movs	r2, r4
 801a914:	002b      	movs	r3, r5
 801a916:	f7e7 fe0f 	bl	8002538 <__aeabi_dmul>
 801a91a:	4a5a      	ldr	r2, [pc, #360]	@ (801aa84 <__ieee754_log+0x340>)
 801a91c:	4b5a      	ldr	r3, [pc, #360]	@ (801aa88 <__ieee754_log+0x344>)
 801a91e:	f7e6 fe63 	bl	80015e8 <__aeabi_dadd>
 801a922:	9a08      	ldr	r2, [sp, #32]
 801a924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a926:	f7e7 fe07 	bl	8002538 <__aeabi_dmul>
 801a92a:	4a58      	ldr	r2, [pc, #352]	@ (801aa8c <__ieee754_log+0x348>)
 801a92c:	9008      	str	r0, [sp, #32]
 801a92e:	9109      	str	r1, [sp, #36]	@ 0x24
 801a930:	4b57      	ldr	r3, [pc, #348]	@ (801aa90 <__ieee754_log+0x34c>)
 801a932:	0020      	movs	r0, r4
 801a934:	0029      	movs	r1, r5
 801a936:	f7e7 fdff 	bl	8002538 <__aeabi_dmul>
 801a93a:	4a56      	ldr	r2, [pc, #344]	@ (801aa94 <__ieee754_log+0x350>)
 801a93c:	4b56      	ldr	r3, [pc, #344]	@ (801aa98 <__ieee754_log+0x354>)
 801a93e:	f7e6 fe53 	bl	80015e8 <__aeabi_dadd>
 801a942:	0022      	movs	r2, r4
 801a944:	002b      	movs	r3, r5
 801a946:	f7e7 fdf7 	bl	8002538 <__aeabi_dmul>
 801a94a:	4a54      	ldr	r2, [pc, #336]	@ (801aa9c <__ieee754_log+0x358>)
 801a94c:	4b54      	ldr	r3, [pc, #336]	@ (801aaa0 <__ieee754_log+0x35c>)
 801a94e:	f7e6 fe4b 	bl	80015e8 <__aeabi_dadd>
 801a952:	0022      	movs	r2, r4
 801a954:	002b      	movs	r3, r5
 801a956:	f7e7 fdef 	bl	8002538 <__aeabi_dmul>
 801a95a:	0002      	movs	r2, r0
 801a95c:	000b      	movs	r3, r1
 801a95e:	9808      	ldr	r0, [sp, #32]
 801a960:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a962:	f7e6 fe41 	bl	80015e8 <__aeabi_dadd>
 801a966:	9a02      	ldr	r2, [sp, #8]
 801a968:	4b4e      	ldr	r3, [pc, #312]	@ (801aaa4 <__ieee754_log+0x360>)
 801a96a:	0004      	movs	r4, r0
 801a96c:	1a9b      	subs	r3, r3, r2
 801a96e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a970:	000d      	movs	r5, r1
 801a972:	4313      	orrs	r3, r2
 801a974:	2b00      	cmp	r3, #0
 801a976:	dd34      	ble.n	801a9e2 <__ieee754_log+0x29e>
 801a978:	2200      	movs	r2, #0
 801a97a:	4b3a      	ldr	r3, [pc, #232]	@ (801aa64 <__ieee754_log+0x320>)
 801a97c:	0030      	movs	r0, r6
 801a97e:	0039      	movs	r1, r7
 801a980:	f7e7 fdda 	bl	8002538 <__aeabi_dmul>
 801a984:	0032      	movs	r2, r6
 801a986:	003b      	movs	r3, r7
 801a988:	f7e7 fdd6 	bl	8002538 <__aeabi_dmul>
 801a98c:	0002      	movs	r2, r0
 801a98e:	000b      	movs	r3, r1
 801a990:	9002      	str	r0, [sp, #8]
 801a992:	9103      	str	r1, [sp, #12]
 801a994:	0020      	movs	r0, r4
 801a996:	0029      	movs	r1, r5
 801a998:	f7e6 fe26 	bl	80015e8 <__aeabi_dadd>
 801a99c:	9a04      	ldr	r2, [sp, #16]
 801a99e:	9b05      	ldr	r3, [sp, #20]
 801a9a0:	f7e7 fdca 	bl	8002538 <__aeabi_dmul>
 801a9a4:	9b00      	ldr	r3, [sp, #0]
 801a9a6:	0004      	movs	r4, r0
 801a9a8:	000d      	movs	r5, r1
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	d106      	bne.n	801a9bc <__ieee754_log+0x278>
 801a9ae:	0002      	movs	r2, r0
 801a9b0:	000b      	movs	r3, r1
 801a9b2:	9802      	ldr	r0, [sp, #8]
 801a9b4:	9903      	ldr	r1, [sp, #12]
 801a9b6:	f7e8 f887 	bl	8002ac8 <__aeabi_dsub>
 801a9ba:	e74f      	b.n	801a85c <__ieee754_log+0x118>
 801a9bc:	4a23      	ldr	r2, [pc, #140]	@ (801aa4c <__ieee754_log+0x308>)
 801a9be:	4b24      	ldr	r3, [pc, #144]	@ (801aa50 <__ieee754_log+0x30c>)
 801a9c0:	9806      	ldr	r0, [sp, #24]
 801a9c2:	9907      	ldr	r1, [sp, #28]
 801a9c4:	f7e7 fdb8 	bl	8002538 <__aeabi_dmul>
 801a9c8:	4a22      	ldr	r2, [pc, #136]	@ (801aa54 <__ieee754_log+0x310>)
 801a9ca:	9000      	str	r0, [sp, #0]
 801a9cc:	9101      	str	r1, [sp, #4]
 801a9ce:	9806      	ldr	r0, [sp, #24]
 801a9d0:	9907      	ldr	r1, [sp, #28]
 801a9d2:	4b21      	ldr	r3, [pc, #132]	@ (801aa58 <__ieee754_log+0x314>)
 801a9d4:	f7e7 fdb0 	bl	8002538 <__aeabi_dmul>
 801a9d8:	0022      	movs	r2, r4
 801a9da:	002b      	movs	r3, r5
 801a9dc:	f7e6 fe04 	bl	80015e8 <__aeabi_dadd>
 801a9e0:	e754      	b.n	801a88c <__ieee754_log+0x148>
 801a9e2:	0002      	movs	r2, r0
 801a9e4:	000b      	movs	r3, r1
 801a9e6:	0030      	movs	r0, r6
 801a9e8:	0039      	movs	r1, r7
 801a9ea:	f7e8 f86d 	bl	8002ac8 <__aeabi_dsub>
 801a9ee:	9a04      	ldr	r2, [sp, #16]
 801a9f0:	9b05      	ldr	r3, [sp, #20]
 801a9f2:	f7e7 fda1 	bl	8002538 <__aeabi_dmul>
 801a9f6:	9b00      	ldr	r3, [sp, #0]
 801a9f8:	0004      	movs	r4, r0
 801a9fa:	000d      	movs	r5, r1
 801a9fc:	2b00      	cmp	r3, #0
 801a9fe:	d102      	bne.n	801aa06 <__ieee754_log+0x2c2>
 801aa00:	0002      	movs	r2, r0
 801aa02:	000b      	movs	r3, r1
 801aa04:	e72c      	b.n	801a860 <__ieee754_log+0x11c>
 801aa06:	4a11      	ldr	r2, [pc, #68]	@ (801aa4c <__ieee754_log+0x308>)
 801aa08:	4b11      	ldr	r3, [pc, #68]	@ (801aa50 <__ieee754_log+0x30c>)
 801aa0a:	9806      	ldr	r0, [sp, #24]
 801aa0c:	9907      	ldr	r1, [sp, #28]
 801aa0e:	f7e7 fd93 	bl	8002538 <__aeabi_dmul>
 801aa12:	4a10      	ldr	r2, [pc, #64]	@ (801aa54 <__ieee754_log+0x310>)
 801aa14:	9000      	str	r0, [sp, #0]
 801aa16:	9101      	str	r1, [sp, #4]
 801aa18:	9806      	ldr	r0, [sp, #24]
 801aa1a:	9907      	ldr	r1, [sp, #28]
 801aa1c:	4b0e      	ldr	r3, [pc, #56]	@ (801aa58 <__ieee754_log+0x314>)
 801aa1e:	f7e7 fd8b 	bl	8002538 <__aeabi_dmul>
 801aa22:	0002      	movs	r2, r0
 801aa24:	000b      	movs	r3, r1
 801aa26:	0020      	movs	r0, r4
 801aa28:	0029      	movs	r1, r5
 801aa2a:	e733      	b.n	801a894 <__ieee754_log+0x150>
 801aa2c:	2000      	movs	r0, #0
 801aa2e:	2100      	movs	r1, #0
 801aa30:	e699      	b.n	801a766 <__ieee754_log+0x22>
 801aa32:	46c0      	nop			@ (mov r8, r8)
 801aa34:	c3500000 	.word	0xc3500000
 801aa38:	43500000 	.word	0x43500000
 801aa3c:	7fefffff 	.word	0x7fefffff
 801aa40:	fffffc01 	.word	0xfffffc01
 801aa44:	00095f64 	.word	0x00095f64
 801aa48:	3ff00000 	.word	0x3ff00000
 801aa4c:	fee00000 	.word	0xfee00000
 801aa50:	3fe62e42 	.word	0x3fe62e42
 801aa54:	35793c76 	.word	0x35793c76
 801aa58:	3dea39ef 	.word	0x3dea39ef
 801aa5c:	55555555 	.word	0x55555555
 801aa60:	3fd55555 	.word	0x3fd55555
 801aa64:	3fe00000 	.word	0x3fe00000
 801aa68:	fff9eb86 	.word	0xfff9eb86
 801aa6c:	df3e5244 	.word	0xdf3e5244
 801aa70:	3fc2f112 	.word	0x3fc2f112
 801aa74:	96cb03de 	.word	0x96cb03de
 801aa78:	3fc74664 	.word	0x3fc74664
 801aa7c:	94229359 	.word	0x94229359
 801aa80:	3fd24924 	.word	0x3fd24924
 801aa84:	55555593 	.word	0x55555593
 801aa88:	3fe55555 	.word	0x3fe55555
 801aa8c:	d078c69f 	.word	0xd078c69f
 801aa90:	3fc39a09 	.word	0x3fc39a09
 801aa94:	1d8e78af 	.word	0x1d8e78af
 801aa98:	3fcc71c5 	.word	0x3fcc71c5
 801aa9c:	9997fa04 	.word	0x9997fa04
 801aaa0:	3fd99999 	.word	0x3fd99999
 801aaa4:	0006b851 	.word	0x0006b851

0801aaa8 <_init>:
 801aaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aaaa:	46c0      	nop			@ (mov r8, r8)
 801aaac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aaae:	bc08      	pop	{r3}
 801aab0:	469e      	mov	lr, r3
 801aab2:	4770      	bx	lr

0801aab4 <_fini>:
 801aab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aab6:	46c0      	nop			@ (mov r8, r8)
 801aab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aaba:	bc08      	pop	{r3}
 801aabc:	469e      	mov	lr, r3
 801aabe:	4770      	bx	lr
