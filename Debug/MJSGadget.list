
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3e8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000900  0800c4a8  0800c4a8  0000d4a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cda8  0800cda8  0000e1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800cda8  0800cda8  0000dda8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cdb0  0800cdb0  0000e1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cdb0  0800cdb0  0000ddb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cdb4  0800cdb4  0000ddb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800cdb8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c94  200001ec  0800cfa4  0000e1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20000e80  0800cfa4  0000ee80  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000132ad  00000000  00000000  0000e214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c11  00000000  00000000  000214c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  000250d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d10  00000000  00000000  00026218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f30  00000000  00000000  00026f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bf23  00000000  00000000  0003ee58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000877a6  00000000  00000000  0005ad7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2521  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d28  00000000  00000000  000e2564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000e728c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ec 	.word	0x200001ec
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c490 	.word	0x0800c490

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f0 	.word	0x200001f0
 8000104:	0800c490 	.word	0x0800c490

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fd13 	bl	8001e68 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fc53 	bl	8001cf8 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fd05 	bl	8001e68 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fcfb 	bl	8001e68 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fc7d 	bl	8001d80 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fc73 	bl	8001d80 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	@ (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f834 	bl	8000544 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			@ (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1824      	adds	r4, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	42a3      	cmp	r3, r4
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	@ 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c23      	lsrs	r3, r4, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0424      	lsls	r4, r4, #16
 8000536:	1960      	adds	r0, r4, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__udivmoddi4>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	4657      	mov	r7, sl
 8000548:	464e      	mov	r6, r9
 800054a:	4645      	mov	r5, r8
 800054c:	46de      	mov	lr, fp
 800054e:	b5e0      	push	{r5, r6, r7, lr}
 8000550:	0004      	movs	r4, r0
 8000552:	000d      	movs	r5, r1
 8000554:	4692      	mov	sl, r2
 8000556:	4699      	mov	r9, r3
 8000558:	b083      	sub	sp, #12
 800055a:	428b      	cmp	r3, r1
 800055c:	d830      	bhi.n	80005c0 <__udivmoddi4+0x7c>
 800055e:	d02d      	beq.n	80005bc <__udivmoddi4+0x78>
 8000560:	4649      	mov	r1, r9
 8000562:	4650      	mov	r0, sl
 8000564:	f002 fcf0 	bl	8002f48 <__clzdi2>
 8000568:	0029      	movs	r1, r5
 800056a:	0006      	movs	r6, r0
 800056c:	0020      	movs	r0, r4
 800056e:	f002 fceb 	bl	8002f48 <__clzdi2>
 8000572:	1a33      	subs	r3, r6, r0
 8000574:	4698      	mov	r8, r3
 8000576:	3b20      	subs	r3, #32
 8000578:	d434      	bmi.n	80005e4 <__udivmoddi4+0xa0>
 800057a:	469b      	mov	fp, r3
 800057c:	4653      	mov	r3, sl
 800057e:	465a      	mov	r2, fp
 8000580:	4093      	lsls	r3, r2
 8000582:	4642      	mov	r2, r8
 8000584:	001f      	movs	r7, r3
 8000586:	4653      	mov	r3, sl
 8000588:	4093      	lsls	r3, r2
 800058a:	001e      	movs	r6, r3
 800058c:	42af      	cmp	r7, r5
 800058e:	d83b      	bhi.n	8000608 <__udivmoddi4+0xc4>
 8000590:	42af      	cmp	r7, r5
 8000592:	d100      	bne.n	8000596 <__udivmoddi4+0x52>
 8000594:	e079      	b.n	800068a <__udivmoddi4+0x146>
 8000596:	465b      	mov	r3, fp
 8000598:	1ba4      	subs	r4, r4, r6
 800059a:	41bd      	sbcs	r5, r7
 800059c:	2b00      	cmp	r3, #0
 800059e:	da00      	bge.n	80005a2 <__udivmoddi4+0x5e>
 80005a0:	e076      	b.n	8000690 <__udivmoddi4+0x14c>
 80005a2:	2200      	movs	r2, #0
 80005a4:	2300      	movs	r3, #0
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	465a      	mov	r2, fp
 80005ae:	4093      	lsls	r3, r2
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	4642      	mov	r2, r8
 80005b6:	4093      	lsls	r3, r2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	e029      	b.n	8000610 <__udivmoddi4+0xcc>
 80005bc:	4282      	cmp	r2, r0
 80005be:	d9cf      	bls.n	8000560 <__udivmoddi4+0x1c>
 80005c0:	2200      	movs	r2, #0
 80005c2:	2300      	movs	r3, #0
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <__udivmoddi4+0x8e>
 80005ce:	601c      	str	r4, [r3, #0]
 80005d0:	605d      	str	r5, [r3, #4]
 80005d2:	9800      	ldr	r0, [sp, #0]
 80005d4:	9901      	ldr	r1, [sp, #4]
 80005d6:	b003      	add	sp, #12
 80005d8:	bcf0      	pop	{r4, r5, r6, r7}
 80005da:	46bb      	mov	fp, r7
 80005dc:	46b2      	mov	sl, r6
 80005de:	46a9      	mov	r9, r5
 80005e0:	46a0      	mov	r8, r4
 80005e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e4:	4642      	mov	r2, r8
 80005e6:	469b      	mov	fp, r3
 80005e8:	2320      	movs	r3, #32
 80005ea:	1a9b      	subs	r3, r3, r2
 80005ec:	4652      	mov	r2, sl
 80005ee:	40da      	lsrs	r2, r3
 80005f0:	4641      	mov	r1, r8
 80005f2:	0013      	movs	r3, r2
 80005f4:	464a      	mov	r2, r9
 80005f6:	408a      	lsls	r2, r1
 80005f8:	0017      	movs	r7, r2
 80005fa:	4642      	mov	r2, r8
 80005fc:	431f      	orrs	r7, r3
 80005fe:	4653      	mov	r3, sl
 8000600:	4093      	lsls	r3, r2
 8000602:	001e      	movs	r6, r3
 8000604:	42af      	cmp	r7, r5
 8000606:	d9c3      	bls.n	8000590 <__udivmoddi4+0x4c>
 8000608:	2200      	movs	r2, #0
 800060a:	2300      	movs	r3, #0
 800060c:	9200      	str	r2, [sp, #0]
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	4643      	mov	r3, r8
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0d8      	beq.n	80005c8 <__udivmoddi4+0x84>
 8000616:	07fb      	lsls	r3, r7, #31
 8000618:	0872      	lsrs	r2, r6, #1
 800061a:	431a      	orrs	r2, r3
 800061c:	4646      	mov	r6, r8
 800061e:	087b      	lsrs	r3, r7, #1
 8000620:	e00e      	b.n	8000640 <__udivmoddi4+0xfc>
 8000622:	42ab      	cmp	r3, r5
 8000624:	d101      	bne.n	800062a <__udivmoddi4+0xe6>
 8000626:	42a2      	cmp	r2, r4
 8000628:	d80c      	bhi.n	8000644 <__udivmoddi4+0x100>
 800062a:	1aa4      	subs	r4, r4, r2
 800062c:	419d      	sbcs	r5, r3
 800062e:	2001      	movs	r0, #1
 8000630:	1924      	adds	r4, r4, r4
 8000632:	416d      	adcs	r5, r5
 8000634:	2100      	movs	r1, #0
 8000636:	3e01      	subs	r6, #1
 8000638:	1824      	adds	r4, r4, r0
 800063a:	414d      	adcs	r5, r1
 800063c:	2e00      	cmp	r6, #0
 800063e:	d006      	beq.n	800064e <__udivmoddi4+0x10a>
 8000640:	42ab      	cmp	r3, r5
 8000642:	d9ee      	bls.n	8000622 <__udivmoddi4+0xde>
 8000644:	3e01      	subs	r6, #1
 8000646:	1924      	adds	r4, r4, r4
 8000648:	416d      	adcs	r5, r5
 800064a:	2e00      	cmp	r6, #0
 800064c:	d1f8      	bne.n	8000640 <__udivmoddi4+0xfc>
 800064e:	9800      	ldr	r0, [sp, #0]
 8000650:	9901      	ldr	r1, [sp, #4]
 8000652:	465b      	mov	r3, fp
 8000654:	1900      	adds	r0, r0, r4
 8000656:	4169      	adcs	r1, r5
 8000658:	2b00      	cmp	r3, #0
 800065a:	db24      	blt.n	80006a6 <__udivmoddi4+0x162>
 800065c:	002b      	movs	r3, r5
 800065e:	465a      	mov	r2, fp
 8000660:	4644      	mov	r4, r8
 8000662:	40d3      	lsrs	r3, r2
 8000664:	002a      	movs	r2, r5
 8000666:	40e2      	lsrs	r2, r4
 8000668:	001c      	movs	r4, r3
 800066a:	465b      	mov	r3, fp
 800066c:	0015      	movs	r5, r2
 800066e:	2b00      	cmp	r3, #0
 8000670:	db2a      	blt.n	80006c8 <__udivmoddi4+0x184>
 8000672:	0026      	movs	r6, r4
 8000674:	409e      	lsls	r6, r3
 8000676:	0033      	movs	r3, r6
 8000678:	0026      	movs	r6, r4
 800067a:	4647      	mov	r7, r8
 800067c:	40be      	lsls	r6, r7
 800067e:	0032      	movs	r2, r6
 8000680:	1a80      	subs	r0, r0, r2
 8000682:	4199      	sbcs	r1, r3
 8000684:	9000      	str	r0, [sp, #0]
 8000686:	9101      	str	r1, [sp, #4]
 8000688:	e79e      	b.n	80005c8 <__udivmoddi4+0x84>
 800068a:	42a3      	cmp	r3, r4
 800068c:	d8bc      	bhi.n	8000608 <__udivmoddi4+0xc4>
 800068e:	e782      	b.n	8000596 <__udivmoddi4+0x52>
 8000690:	4642      	mov	r2, r8
 8000692:	2320      	movs	r3, #32
 8000694:	2100      	movs	r1, #0
 8000696:	1a9b      	subs	r3, r3, r2
 8000698:	2200      	movs	r2, #0
 800069a:	9100      	str	r1, [sp, #0]
 800069c:	9201      	str	r2, [sp, #4]
 800069e:	2201      	movs	r2, #1
 80006a0:	40da      	lsrs	r2, r3
 80006a2:	9201      	str	r2, [sp, #4]
 80006a4:	e785      	b.n	80005b2 <__udivmoddi4+0x6e>
 80006a6:	4642      	mov	r2, r8
 80006a8:	2320      	movs	r3, #32
 80006aa:	1a9b      	subs	r3, r3, r2
 80006ac:	002a      	movs	r2, r5
 80006ae:	4646      	mov	r6, r8
 80006b0:	409a      	lsls	r2, r3
 80006b2:	0023      	movs	r3, r4
 80006b4:	40f3      	lsrs	r3, r6
 80006b6:	4644      	mov	r4, r8
 80006b8:	4313      	orrs	r3, r2
 80006ba:	002a      	movs	r2, r5
 80006bc:	40e2      	lsrs	r2, r4
 80006be:	001c      	movs	r4, r3
 80006c0:	465b      	mov	r3, fp
 80006c2:	0015      	movs	r5, r2
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	dad4      	bge.n	8000672 <__udivmoddi4+0x12e>
 80006c8:	4642      	mov	r2, r8
 80006ca:	002f      	movs	r7, r5
 80006cc:	2320      	movs	r3, #32
 80006ce:	0026      	movs	r6, r4
 80006d0:	4097      	lsls	r7, r2
 80006d2:	1a9b      	subs	r3, r3, r2
 80006d4:	40de      	lsrs	r6, r3
 80006d6:	003b      	movs	r3, r7
 80006d8:	4333      	orrs	r3, r6
 80006da:	e7cd      	b.n	8000678 <__udivmoddi4+0x134>

080006dc <__aeabi_fadd>:
 80006dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006de:	46ce      	mov	lr, r9
 80006e0:	4647      	mov	r7, r8
 80006e2:	0243      	lsls	r3, r0, #9
 80006e4:	0a5a      	lsrs	r2, r3, #9
 80006e6:	024e      	lsls	r6, r1, #9
 80006e8:	0045      	lsls	r5, r0, #1
 80006ea:	0fc4      	lsrs	r4, r0, #31
 80006ec:	0048      	lsls	r0, r1, #1
 80006ee:	4691      	mov	r9, r2
 80006f0:	0e2d      	lsrs	r5, r5, #24
 80006f2:	0a72      	lsrs	r2, r6, #9
 80006f4:	0e00      	lsrs	r0, r0, #24
 80006f6:	4694      	mov	ip, r2
 80006f8:	b580      	push	{r7, lr}
 80006fa:	099b      	lsrs	r3, r3, #6
 80006fc:	0fc9      	lsrs	r1, r1, #31
 80006fe:	09b6      	lsrs	r6, r6, #6
 8000700:	1a2a      	subs	r2, r5, r0
 8000702:	428c      	cmp	r4, r1
 8000704:	d021      	beq.n	800074a <__aeabi_fadd+0x6e>
 8000706:	2a00      	cmp	r2, #0
 8000708:	dd0d      	ble.n	8000726 <__aeabi_fadd+0x4a>
 800070a:	2800      	cmp	r0, #0
 800070c:	d12d      	bne.n	800076a <__aeabi_fadd+0x8e>
 800070e:	2e00      	cmp	r6, #0
 8000710:	d100      	bne.n	8000714 <__aeabi_fadd+0x38>
 8000712:	e08d      	b.n	8000830 <__aeabi_fadd+0x154>
 8000714:	1e51      	subs	r1, r2, #1
 8000716:	2a01      	cmp	r2, #1
 8000718:	d100      	bne.n	800071c <__aeabi_fadd+0x40>
 800071a:	e11d      	b.n	8000958 <__aeabi_fadd+0x27c>
 800071c:	2aff      	cmp	r2, #255	@ 0xff
 800071e:	d100      	bne.n	8000722 <__aeabi_fadd+0x46>
 8000720:	e0ab      	b.n	800087a <__aeabi_fadd+0x19e>
 8000722:	000a      	movs	r2, r1
 8000724:	e027      	b.n	8000776 <__aeabi_fadd+0x9a>
 8000726:	2a00      	cmp	r2, #0
 8000728:	d04d      	beq.n	80007c6 <__aeabi_fadd+0xea>
 800072a:	1b42      	subs	r2, r0, r5
 800072c:	2d00      	cmp	r5, #0
 800072e:	d000      	beq.n	8000732 <__aeabi_fadd+0x56>
 8000730:	e0cc      	b.n	80008cc <__aeabi_fadd+0x1f0>
 8000732:	2b00      	cmp	r3, #0
 8000734:	d100      	bne.n	8000738 <__aeabi_fadd+0x5c>
 8000736:	e079      	b.n	800082c <__aeabi_fadd+0x150>
 8000738:	1e54      	subs	r4, r2, #1
 800073a:	2a01      	cmp	r2, #1
 800073c:	d100      	bne.n	8000740 <__aeabi_fadd+0x64>
 800073e:	e128      	b.n	8000992 <__aeabi_fadd+0x2b6>
 8000740:	2aff      	cmp	r2, #255	@ 0xff
 8000742:	d100      	bne.n	8000746 <__aeabi_fadd+0x6a>
 8000744:	e097      	b.n	8000876 <__aeabi_fadd+0x19a>
 8000746:	0022      	movs	r2, r4
 8000748:	e0c5      	b.n	80008d6 <__aeabi_fadd+0x1fa>
 800074a:	2a00      	cmp	r2, #0
 800074c:	dc00      	bgt.n	8000750 <__aeabi_fadd+0x74>
 800074e:	e096      	b.n	800087e <__aeabi_fadd+0x1a2>
 8000750:	2800      	cmp	r0, #0
 8000752:	d04f      	beq.n	80007f4 <__aeabi_fadd+0x118>
 8000754:	2dff      	cmp	r5, #255	@ 0xff
 8000756:	d100      	bne.n	800075a <__aeabi_fadd+0x7e>
 8000758:	e08f      	b.n	800087a <__aeabi_fadd+0x19e>
 800075a:	2180      	movs	r1, #128	@ 0x80
 800075c:	04c9      	lsls	r1, r1, #19
 800075e:	430e      	orrs	r6, r1
 8000760:	2a1b      	cmp	r2, #27
 8000762:	dd51      	ble.n	8000808 <__aeabi_fadd+0x12c>
 8000764:	002a      	movs	r2, r5
 8000766:	3301      	adds	r3, #1
 8000768:	e018      	b.n	800079c <__aeabi_fadd+0xc0>
 800076a:	2dff      	cmp	r5, #255	@ 0xff
 800076c:	d100      	bne.n	8000770 <__aeabi_fadd+0x94>
 800076e:	e084      	b.n	800087a <__aeabi_fadd+0x19e>
 8000770:	2180      	movs	r1, #128	@ 0x80
 8000772:	04c9      	lsls	r1, r1, #19
 8000774:	430e      	orrs	r6, r1
 8000776:	2101      	movs	r1, #1
 8000778:	2a1b      	cmp	r2, #27
 800077a:	dc08      	bgt.n	800078e <__aeabi_fadd+0xb2>
 800077c:	0031      	movs	r1, r6
 800077e:	2020      	movs	r0, #32
 8000780:	40d1      	lsrs	r1, r2
 8000782:	1a82      	subs	r2, r0, r2
 8000784:	4096      	lsls	r6, r2
 8000786:	0032      	movs	r2, r6
 8000788:	1e50      	subs	r0, r2, #1
 800078a:	4182      	sbcs	r2, r0
 800078c:	4311      	orrs	r1, r2
 800078e:	1a5b      	subs	r3, r3, r1
 8000790:	015a      	lsls	r2, r3, #5
 8000792:	d459      	bmi.n	8000848 <__aeabi_fadd+0x16c>
 8000794:	2107      	movs	r1, #7
 8000796:	002a      	movs	r2, r5
 8000798:	4019      	ands	r1, r3
 800079a:	d049      	beq.n	8000830 <__aeabi_fadd+0x154>
 800079c:	210f      	movs	r1, #15
 800079e:	4019      	ands	r1, r3
 80007a0:	2904      	cmp	r1, #4
 80007a2:	d000      	beq.n	80007a6 <__aeabi_fadd+0xca>
 80007a4:	3304      	adds	r3, #4
 80007a6:	0159      	lsls	r1, r3, #5
 80007a8:	d542      	bpl.n	8000830 <__aeabi_fadd+0x154>
 80007aa:	1c50      	adds	r0, r2, #1
 80007ac:	2afe      	cmp	r2, #254	@ 0xfe
 80007ae:	d03a      	beq.n	8000826 <__aeabi_fadd+0x14a>
 80007b0:	019b      	lsls	r3, r3, #6
 80007b2:	b2c0      	uxtb	r0, r0
 80007b4:	0a5b      	lsrs	r3, r3, #9
 80007b6:	05c0      	lsls	r0, r0, #23
 80007b8:	4318      	orrs	r0, r3
 80007ba:	07e4      	lsls	r4, r4, #31
 80007bc:	4320      	orrs	r0, r4
 80007be:	bcc0      	pop	{r6, r7}
 80007c0:	46b9      	mov	r9, r7
 80007c2:	46b0      	mov	r8, r6
 80007c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007c6:	20fe      	movs	r0, #254	@ 0xfe
 80007c8:	4680      	mov	r8, r0
 80007ca:	1c6f      	adds	r7, r5, #1
 80007cc:	0038      	movs	r0, r7
 80007ce:	4647      	mov	r7, r8
 80007d0:	4207      	tst	r7, r0
 80007d2:	d000      	beq.n	80007d6 <__aeabi_fadd+0xfa>
 80007d4:	e08e      	b.n	80008f4 <__aeabi_fadd+0x218>
 80007d6:	2d00      	cmp	r5, #0
 80007d8:	d000      	beq.n	80007dc <__aeabi_fadd+0x100>
 80007da:	e0b4      	b.n	8000946 <__aeabi_fadd+0x26a>
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d100      	bne.n	80007e2 <__aeabi_fadd+0x106>
 80007e0:	e0db      	b.n	800099a <__aeabi_fadd+0x2be>
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	d06c      	beq.n	80008c0 <__aeabi_fadd+0x1e4>
 80007e6:	1b98      	subs	r0, r3, r6
 80007e8:	0145      	lsls	r5, r0, #5
 80007ea:	d400      	bmi.n	80007ee <__aeabi_fadd+0x112>
 80007ec:	e0f7      	b.n	80009de <__aeabi_fadd+0x302>
 80007ee:	000c      	movs	r4, r1
 80007f0:	1af3      	subs	r3, r6, r3
 80007f2:	e03d      	b.n	8000870 <__aeabi_fadd+0x194>
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d01b      	beq.n	8000830 <__aeabi_fadd+0x154>
 80007f8:	1e51      	subs	r1, r2, #1
 80007fa:	2a01      	cmp	r2, #1
 80007fc:	d100      	bne.n	8000800 <__aeabi_fadd+0x124>
 80007fe:	e082      	b.n	8000906 <__aeabi_fadd+0x22a>
 8000800:	2aff      	cmp	r2, #255	@ 0xff
 8000802:	d03a      	beq.n	800087a <__aeabi_fadd+0x19e>
 8000804:	000a      	movs	r2, r1
 8000806:	e7ab      	b.n	8000760 <__aeabi_fadd+0x84>
 8000808:	0031      	movs	r1, r6
 800080a:	2020      	movs	r0, #32
 800080c:	40d1      	lsrs	r1, r2
 800080e:	1a82      	subs	r2, r0, r2
 8000810:	4096      	lsls	r6, r2
 8000812:	0032      	movs	r2, r6
 8000814:	1e50      	subs	r0, r2, #1
 8000816:	4182      	sbcs	r2, r0
 8000818:	430a      	orrs	r2, r1
 800081a:	189b      	adds	r3, r3, r2
 800081c:	015a      	lsls	r2, r3, #5
 800081e:	d5b9      	bpl.n	8000794 <__aeabi_fadd+0xb8>
 8000820:	1c6a      	adds	r2, r5, #1
 8000822:	2dfe      	cmp	r5, #254	@ 0xfe
 8000824:	d175      	bne.n	8000912 <__aeabi_fadd+0x236>
 8000826:	20ff      	movs	r0, #255	@ 0xff
 8000828:	2300      	movs	r3, #0
 800082a:	e7c4      	b.n	80007b6 <__aeabi_fadd+0xda>
 800082c:	000c      	movs	r4, r1
 800082e:	0033      	movs	r3, r6
 8000830:	08db      	lsrs	r3, r3, #3
 8000832:	2aff      	cmp	r2, #255	@ 0xff
 8000834:	d146      	bne.n	80008c4 <__aeabi_fadd+0x1e8>
 8000836:	2b00      	cmp	r3, #0
 8000838:	d0f5      	beq.n	8000826 <__aeabi_fadd+0x14a>
 800083a:	2280      	movs	r2, #128	@ 0x80
 800083c:	03d2      	lsls	r2, r2, #15
 800083e:	4313      	orrs	r3, r2
 8000840:	025b      	lsls	r3, r3, #9
 8000842:	20ff      	movs	r0, #255	@ 0xff
 8000844:	0a5b      	lsrs	r3, r3, #9
 8000846:	e7b6      	b.n	80007b6 <__aeabi_fadd+0xda>
 8000848:	019f      	lsls	r7, r3, #6
 800084a:	09bf      	lsrs	r7, r7, #6
 800084c:	0038      	movs	r0, r7
 800084e:	f002 fb5d 	bl	8002f0c <__clzsi2>
 8000852:	3805      	subs	r0, #5
 8000854:	4087      	lsls	r7, r0
 8000856:	4285      	cmp	r5, r0
 8000858:	dc24      	bgt.n	80008a4 <__aeabi_fadd+0x1c8>
 800085a:	003b      	movs	r3, r7
 800085c:	2120      	movs	r1, #32
 800085e:	1b42      	subs	r2, r0, r5
 8000860:	3201      	adds	r2, #1
 8000862:	40d3      	lsrs	r3, r2
 8000864:	1a8a      	subs	r2, r1, r2
 8000866:	4097      	lsls	r7, r2
 8000868:	1e7a      	subs	r2, r7, #1
 800086a:	4197      	sbcs	r7, r2
 800086c:	2200      	movs	r2, #0
 800086e:	433b      	orrs	r3, r7
 8000870:	0759      	lsls	r1, r3, #29
 8000872:	d193      	bne.n	800079c <__aeabi_fadd+0xc0>
 8000874:	e797      	b.n	80007a6 <__aeabi_fadd+0xca>
 8000876:	000c      	movs	r4, r1
 8000878:	0033      	movs	r3, r6
 800087a:	08db      	lsrs	r3, r3, #3
 800087c:	e7db      	b.n	8000836 <__aeabi_fadd+0x15a>
 800087e:	2a00      	cmp	r2, #0
 8000880:	d014      	beq.n	80008ac <__aeabi_fadd+0x1d0>
 8000882:	1b42      	subs	r2, r0, r5
 8000884:	2d00      	cmp	r5, #0
 8000886:	d14b      	bne.n	8000920 <__aeabi_fadd+0x244>
 8000888:	2b00      	cmp	r3, #0
 800088a:	d0d0      	beq.n	800082e <__aeabi_fadd+0x152>
 800088c:	1e51      	subs	r1, r2, #1
 800088e:	2a01      	cmp	r2, #1
 8000890:	d100      	bne.n	8000894 <__aeabi_fadd+0x1b8>
 8000892:	e09e      	b.n	80009d2 <__aeabi_fadd+0x2f6>
 8000894:	2aff      	cmp	r2, #255	@ 0xff
 8000896:	d0ef      	beq.n	8000878 <__aeabi_fadd+0x19c>
 8000898:	000a      	movs	r2, r1
 800089a:	2a1b      	cmp	r2, #27
 800089c:	dd5f      	ble.n	800095e <__aeabi_fadd+0x282>
 800089e:	0002      	movs	r2, r0
 80008a0:	1c73      	adds	r3, r6, #1
 80008a2:	e77b      	b.n	800079c <__aeabi_fadd+0xc0>
 80008a4:	4b50      	ldr	r3, [pc, #320]	@ (80009e8 <__aeabi_fadd+0x30c>)
 80008a6:	1a2a      	subs	r2, r5, r0
 80008a8:	403b      	ands	r3, r7
 80008aa:	e7e1      	b.n	8000870 <__aeabi_fadd+0x194>
 80008ac:	21fe      	movs	r1, #254	@ 0xfe
 80008ae:	1c6a      	adds	r2, r5, #1
 80008b0:	4211      	tst	r1, r2
 80008b2:	d13b      	bne.n	800092c <__aeabi_fadd+0x250>
 80008b4:	2d00      	cmp	r5, #0
 80008b6:	d15d      	bne.n	8000974 <__aeabi_fadd+0x298>
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d07f      	beq.n	80009bc <__aeabi_fadd+0x2e0>
 80008bc:	2e00      	cmp	r6, #0
 80008be:	d17f      	bne.n	80009c0 <__aeabi_fadd+0x2e4>
 80008c0:	2200      	movs	r2, #0
 80008c2:	08db      	lsrs	r3, r3, #3
 80008c4:	025b      	lsls	r3, r3, #9
 80008c6:	0a5b      	lsrs	r3, r3, #9
 80008c8:	b2d0      	uxtb	r0, r2
 80008ca:	e774      	b.n	80007b6 <__aeabi_fadd+0xda>
 80008cc:	28ff      	cmp	r0, #255	@ 0xff
 80008ce:	d0d2      	beq.n	8000876 <__aeabi_fadd+0x19a>
 80008d0:	2480      	movs	r4, #128	@ 0x80
 80008d2:	04e4      	lsls	r4, r4, #19
 80008d4:	4323      	orrs	r3, r4
 80008d6:	2401      	movs	r4, #1
 80008d8:	2a1b      	cmp	r2, #27
 80008da:	dc07      	bgt.n	80008ec <__aeabi_fadd+0x210>
 80008dc:	001c      	movs	r4, r3
 80008de:	2520      	movs	r5, #32
 80008e0:	40d4      	lsrs	r4, r2
 80008e2:	1aaa      	subs	r2, r5, r2
 80008e4:	4093      	lsls	r3, r2
 80008e6:	1e5a      	subs	r2, r3, #1
 80008e8:	4193      	sbcs	r3, r2
 80008ea:	431c      	orrs	r4, r3
 80008ec:	1b33      	subs	r3, r6, r4
 80008ee:	0005      	movs	r5, r0
 80008f0:	000c      	movs	r4, r1
 80008f2:	e74d      	b.n	8000790 <__aeabi_fadd+0xb4>
 80008f4:	1b9f      	subs	r7, r3, r6
 80008f6:	017a      	lsls	r2, r7, #5
 80008f8:	d422      	bmi.n	8000940 <__aeabi_fadd+0x264>
 80008fa:	2f00      	cmp	r7, #0
 80008fc:	d1a6      	bne.n	800084c <__aeabi_fadd+0x170>
 80008fe:	2400      	movs	r4, #0
 8000900:	2000      	movs	r0, #0
 8000902:	2300      	movs	r3, #0
 8000904:	e757      	b.n	80007b6 <__aeabi_fadd+0xda>
 8000906:	199b      	adds	r3, r3, r6
 8000908:	2501      	movs	r5, #1
 800090a:	3201      	adds	r2, #1
 800090c:	0159      	lsls	r1, r3, #5
 800090e:	d400      	bmi.n	8000912 <__aeabi_fadd+0x236>
 8000910:	e740      	b.n	8000794 <__aeabi_fadd+0xb8>
 8000912:	2101      	movs	r1, #1
 8000914:	4835      	ldr	r0, [pc, #212]	@ (80009ec <__aeabi_fadd+0x310>)
 8000916:	4019      	ands	r1, r3
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	4003      	ands	r3, r0
 800091c:	430b      	orrs	r3, r1
 800091e:	e7a7      	b.n	8000870 <__aeabi_fadd+0x194>
 8000920:	28ff      	cmp	r0, #255	@ 0xff
 8000922:	d0a9      	beq.n	8000878 <__aeabi_fadd+0x19c>
 8000924:	2180      	movs	r1, #128	@ 0x80
 8000926:	04c9      	lsls	r1, r1, #19
 8000928:	430b      	orrs	r3, r1
 800092a:	e7b6      	b.n	800089a <__aeabi_fadd+0x1be>
 800092c:	2aff      	cmp	r2, #255	@ 0xff
 800092e:	d100      	bne.n	8000932 <__aeabi_fadd+0x256>
 8000930:	e779      	b.n	8000826 <__aeabi_fadd+0x14a>
 8000932:	199b      	adds	r3, r3, r6
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	0759      	lsls	r1, r3, #29
 8000938:	d000      	beq.n	800093c <__aeabi_fadd+0x260>
 800093a:	e72f      	b.n	800079c <__aeabi_fadd+0xc0>
 800093c:	08db      	lsrs	r3, r3, #3
 800093e:	e7c1      	b.n	80008c4 <__aeabi_fadd+0x1e8>
 8000940:	000c      	movs	r4, r1
 8000942:	1af7      	subs	r7, r6, r3
 8000944:	e782      	b.n	800084c <__aeabi_fadd+0x170>
 8000946:	2b00      	cmp	r3, #0
 8000948:	d12c      	bne.n	80009a4 <__aeabi_fadd+0x2c8>
 800094a:	2e00      	cmp	r6, #0
 800094c:	d193      	bne.n	8000876 <__aeabi_fadd+0x19a>
 800094e:	2380      	movs	r3, #128	@ 0x80
 8000950:	2400      	movs	r4, #0
 8000952:	20ff      	movs	r0, #255	@ 0xff
 8000954:	03db      	lsls	r3, r3, #15
 8000956:	e72e      	b.n	80007b6 <__aeabi_fadd+0xda>
 8000958:	2501      	movs	r5, #1
 800095a:	1b9b      	subs	r3, r3, r6
 800095c:	e718      	b.n	8000790 <__aeabi_fadd+0xb4>
 800095e:	0019      	movs	r1, r3
 8000960:	2520      	movs	r5, #32
 8000962:	40d1      	lsrs	r1, r2
 8000964:	1aaa      	subs	r2, r5, r2
 8000966:	4093      	lsls	r3, r2
 8000968:	1e5a      	subs	r2, r3, #1
 800096a:	4193      	sbcs	r3, r2
 800096c:	430b      	orrs	r3, r1
 800096e:	0005      	movs	r5, r0
 8000970:	199b      	adds	r3, r3, r6
 8000972:	e753      	b.n	800081c <__aeabi_fadd+0x140>
 8000974:	2b00      	cmp	r3, #0
 8000976:	d100      	bne.n	800097a <__aeabi_fadd+0x29e>
 8000978:	e77e      	b.n	8000878 <__aeabi_fadd+0x19c>
 800097a:	2e00      	cmp	r6, #0
 800097c:	d100      	bne.n	8000980 <__aeabi_fadd+0x2a4>
 800097e:	e77c      	b.n	800087a <__aeabi_fadd+0x19e>
 8000980:	2280      	movs	r2, #128	@ 0x80
 8000982:	03d2      	lsls	r2, r2, #15
 8000984:	4591      	cmp	r9, r2
 8000986:	d302      	bcc.n	800098e <__aeabi_fadd+0x2b2>
 8000988:	4594      	cmp	ip, r2
 800098a:	d200      	bcs.n	800098e <__aeabi_fadd+0x2b2>
 800098c:	0033      	movs	r3, r6
 800098e:	08db      	lsrs	r3, r3, #3
 8000990:	e753      	b.n	800083a <__aeabi_fadd+0x15e>
 8000992:	000c      	movs	r4, r1
 8000994:	1af3      	subs	r3, r6, r3
 8000996:	3501      	adds	r5, #1
 8000998:	e6fa      	b.n	8000790 <__aeabi_fadd+0xb4>
 800099a:	2e00      	cmp	r6, #0
 800099c:	d0af      	beq.n	80008fe <__aeabi_fadd+0x222>
 800099e:	000c      	movs	r4, r1
 80009a0:	0033      	movs	r3, r6
 80009a2:	e78d      	b.n	80008c0 <__aeabi_fadd+0x1e4>
 80009a4:	2e00      	cmp	r6, #0
 80009a6:	d100      	bne.n	80009aa <__aeabi_fadd+0x2ce>
 80009a8:	e767      	b.n	800087a <__aeabi_fadd+0x19e>
 80009aa:	2280      	movs	r2, #128	@ 0x80
 80009ac:	03d2      	lsls	r2, r2, #15
 80009ae:	4591      	cmp	r9, r2
 80009b0:	d3ed      	bcc.n	800098e <__aeabi_fadd+0x2b2>
 80009b2:	4594      	cmp	ip, r2
 80009b4:	d2eb      	bcs.n	800098e <__aeabi_fadd+0x2b2>
 80009b6:	000c      	movs	r4, r1
 80009b8:	0033      	movs	r3, r6
 80009ba:	e7e8      	b.n	800098e <__aeabi_fadd+0x2b2>
 80009bc:	0033      	movs	r3, r6
 80009be:	e77f      	b.n	80008c0 <__aeabi_fadd+0x1e4>
 80009c0:	199b      	adds	r3, r3, r6
 80009c2:	2200      	movs	r2, #0
 80009c4:	0159      	lsls	r1, r3, #5
 80009c6:	d5b9      	bpl.n	800093c <__aeabi_fadd+0x260>
 80009c8:	4a07      	ldr	r2, [pc, #28]	@ (80009e8 <__aeabi_fadd+0x30c>)
 80009ca:	4013      	ands	r3, r2
 80009cc:	08db      	lsrs	r3, r3, #3
 80009ce:	2201      	movs	r2, #1
 80009d0:	e778      	b.n	80008c4 <__aeabi_fadd+0x1e8>
 80009d2:	199b      	adds	r3, r3, r6
 80009d4:	3201      	adds	r2, #1
 80009d6:	3501      	adds	r5, #1
 80009d8:	0159      	lsls	r1, r3, #5
 80009da:	d49a      	bmi.n	8000912 <__aeabi_fadd+0x236>
 80009dc:	e6da      	b.n	8000794 <__aeabi_fadd+0xb8>
 80009de:	1e03      	subs	r3, r0, #0
 80009e0:	d08d      	beq.n	80008fe <__aeabi_fadd+0x222>
 80009e2:	08db      	lsrs	r3, r3, #3
 80009e4:	e76e      	b.n	80008c4 <__aeabi_fadd+0x1e8>
 80009e6:	46c0      	nop			@ (mov r8, r8)
 80009e8:	fbffffff 	.word	0xfbffffff
 80009ec:	7dffffff 	.word	0x7dffffff

080009f0 <__aeabi_fdiv>:
 80009f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f2:	464f      	mov	r7, r9
 80009f4:	4646      	mov	r6, r8
 80009f6:	46d6      	mov	lr, sl
 80009f8:	0244      	lsls	r4, r0, #9
 80009fa:	b5c0      	push	{r6, r7, lr}
 80009fc:	0047      	lsls	r7, r0, #1
 80009fe:	1c0e      	adds	r6, r1, #0
 8000a00:	0a64      	lsrs	r4, r4, #9
 8000a02:	0e3f      	lsrs	r7, r7, #24
 8000a04:	0fc5      	lsrs	r5, r0, #31
 8000a06:	2f00      	cmp	r7, #0
 8000a08:	d03c      	beq.n	8000a84 <__aeabi_fdiv+0x94>
 8000a0a:	2fff      	cmp	r7, #255	@ 0xff
 8000a0c:	d042      	beq.n	8000a94 <__aeabi_fdiv+0xa4>
 8000a0e:	2300      	movs	r3, #0
 8000a10:	2280      	movs	r2, #128	@ 0x80
 8000a12:	4699      	mov	r9, r3
 8000a14:	469a      	mov	sl, r3
 8000a16:	00e4      	lsls	r4, r4, #3
 8000a18:	04d2      	lsls	r2, r2, #19
 8000a1a:	4314      	orrs	r4, r2
 8000a1c:	3f7f      	subs	r7, #127	@ 0x7f
 8000a1e:	0273      	lsls	r3, r6, #9
 8000a20:	0a5b      	lsrs	r3, r3, #9
 8000a22:	4698      	mov	r8, r3
 8000a24:	0073      	lsls	r3, r6, #1
 8000a26:	0e1b      	lsrs	r3, r3, #24
 8000a28:	0ff6      	lsrs	r6, r6, #31
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d01b      	beq.n	8000a66 <__aeabi_fdiv+0x76>
 8000a2e:	2bff      	cmp	r3, #255	@ 0xff
 8000a30:	d013      	beq.n	8000a5a <__aeabi_fdiv+0x6a>
 8000a32:	4642      	mov	r2, r8
 8000a34:	2180      	movs	r1, #128	@ 0x80
 8000a36:	00d2      	lsls	r2, r2, #3
 8000a38:	04c9      	lsls	r1, r1, #19
 8000a3a:	4311      	orrs	r1, r2
 8000a3c:	4688      	mov	r8, r1
 8000a3e:	2000      	movs	r0, #0
 8000a40:	3b7f      	subs	r3, #127	@ 0x7f
 8000a42:	0029      	movs	r1, r5
 8000a44:	1aff      	subs	r7, r7, r3
 8000a46:	464b      	mov	r3, r9
 8000a48:	4071      	eors	r1, r6
 8000a4a:	b2c9      	uxtb	r1, r1
 8000a4c:	2b0f      	cmp	r3, #15
 8000a4e:	d900      	bls.n	8000a52 <__aeabi_fdiv+0x62>
 8000a50:	e0b5      	b.n	8000bbe <__aeabi_fdiv+0x1ce>
 8000a52:	4a74      	ldr	r2, [pc, #464]	@ (8000c24 <__aeabi_fdiv+0x234>)
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	58d3      	ldr	r3, [r2, r3]
 8000a58:	469f      	mov	pc, r3
 8000a5a:	4643      	mov	r3, r8
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d13f      	bne.n	8000ae0 <__aeabi_fdiv+0xf0>
 8000a60:	3fff      	subs	r7, #255	@ 0xff
 8000a62:	3302      	adds	r3, #2
 8000a64:	e003      	b.n	8000a6e <__aeabi_fdiv+0x7e>
 8000a66:	4643      	mov	r3, r8
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d12d      	bne.n	8000ac8 <__aeabi_fdiv+0xd8>
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	0029      	movs	r1, r5
 8000a70:	464a      	mov	r2, r9
 8000a72:	4071      	eors	r1, r6
 8000a74:	b2c9      	uxtb	r1, r1
 8000a76:	431a      	orrs	r2, r3
 8000a78:	2a0e      	cmp	r2, #14
 8000a7a:	d838      	bhi.n	8000aee <__aeabi_fdiv+0xfe>
 8000a7c:	486a      	ldr	r0, [pc, #424]	@ (8000c28 <__aeabi_fdiv+0x238>)
 8000a7e:	0092      	lsls	r2, r2, #2
 8000a80:	5882      	ldr	r2, [r0, r2]
 8000a82:	4697      	mov	pc, r2
 8000a84:	2c00      	cmp	r4, #0
 8000a86:	d113      	bne.n	8000ab0 <__aeabi_fdiv+0xc0>
 8000a88:	2304      	movs	r3, #4
 8000a8a:	4699      	mov	r9, r3
 8000a8c:	3b03      	subs	r3, #3
 8000a8e:	2700      	movs	r7, #0
 8000a90:	469a      	mov	sl, r3
 8000a92:	e7c4      	b.n	8000a1e <__aeabi_fdiv+0x2e>
 8000a94:	2c00      	cmp	r4, #0
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_fdiv+0xb4>
 8000a98:	2308      	movs	r3, #8
 8000a9a:	4699      	mov	r9, r3
 8000a9c:	3b06      	subs	r3, #6
 8000a9e:	27ff      	movs	r7, #255	@ 0xff
 8000aa0:	469a      	mov	sl, r3
 8000aa2:	e7bc      	b.n	8000a1e <__aeabi_fdiv+0x2e>
 8000aa4:	230c      	movs	r3, #12
 8000aa6:	4699      	mov	r9, r3
 8000aa8:	3b09      	subs	r3, #9
 8000aaa:	27ff      	movs	r7, #255	@ 0xff
 8000aac:	469a      	mov	sl, r3
 8000aae:	e7b6      	b.n	8000a1e <__aeabi_fdiv+0x2e>
 8000ab0:	0020      	movs	r0, r4
 8000ab2:	f002 fa2b 	bl	8002f0c <__clzsi2>
 8000ab6:	2776      	movs	r7, #118	@ 0x76
 8000ab8:	1f43      	subs	r3, r0, #5
 8000aba:	409c      	lsls	r4, r3
 8000abc:	2300      	movs	r3, #0
 8000abe:	427f      	negs	r7, r7
 8000ac0:	4699      	mov	r9, r3
 8000ac2:	469a      	mov	sl, r3
 8000ac4:	1a3f      	subs	r7, r7, r0
 8000ac6:	e7aa      	b.n	8000a1e <__aeabi_fdiv+0x2e>
 8000ac8:	4640      	mov	r0, r8
 8000aca:	f002 fa1f 	bl	8002f0c <__clzsi2>
 8000ace:	4642      	mov	r2, r8
 8000ad0:	1f43      	subs	r3, r0, #5
 8000ad2:	409a      	lsls	r2, r3
 8000ad4:	2376      	movs	r3, #118	@ 0x76
 8000ad6:	425b      	negs	r3, r3
 8000ad8:	1a1b      	subs	r3, r3, r0
 8000ada:	4690      	mov	r8, r2
 8000adc:	2000      	movs	r0, #0
 8000ade:	e7b0      	b.n	8000a42 <__aeabi_fdiv+0x52>
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	464a      	mov	r2, r9
 8000ae4:	431a      	orrs	r2, r3
 8000ae6:	4691      	mov	r9, r2
 8000ae8:	2003      	movs	r0, #3
 8000aea:	33fc      	adds	r3, #252	@ 0xfc
 8000aec:	e7a9      	b.n	8000a42 <__aeabi_fdiv+0x52>
 8000aee:	000d      	movs	r5, r1
 8000af0:	20ff      	movs	r0, #255	@ 0xff
 8000af2:	2200      	movs	r2, #0
 8000af4:	05c0      	lsls	r0, r0, #23
 8000af6:	07ed      	lsls	r5, r5, #31
 8000af8:	4310      	orrs	r0, r2
 8000afa:	4328      	orrs	r0, r5
 8000afc:	bce0      	pop	{r5, r6, r7}
 8000afe:	46ba      	mov	sl, r7
 8000b00:	46b1      	mov	r9, r6
 8000b02:	46a8      	mov	r8, r5
 8000b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b06:	000d      	movs	r5, r1
 8000b08:	2000      	movs	r0, #0
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	e7f2      	b.n	8000af4 <__aeabi_fdiv+0x104>
 8000b0e:	4653      	mov	r3, sl
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d0ed      	beq.n	8000af0 <__aeabi_fdiv+0x100>
 8000b14:	2b03      	cmp	r3, #3
 8000b16:	d033      	beq.n	8000b80 <__aeabi_fdiv+0x190>
 8000b18:	46a0      	mov	r8, r4
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d105      	bne.n	8000b2a <__aeabi_fdiv+0x13a>
 8000b1e:	2000      	movs	r0, #0
 8000b20:	2200      	movs	r2, #0
 8000b22:	e7e7      	b.n	8000af4 <__aeabi_fdiv+0x104>
 8000b24:	0035      	movs	r5, r6
 8000b26:	2803      	cmp	r0, #3
 8000b28:	d07a      	beq.n	8000c20 <__aeabi_fdiv+0x230>
 8000b2a:	003b      	movs	r3, r7
 8000b2c:	337f      	adds	r3, #127	@ 0x7f
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	dd2d      	ble.n	8000b8e <__aeabi_fdiv+0x19e>
 8000b32:	4642      	mov	r2, r8
 8000b34:	0752      	lsls	r2, r2, #29
 8000b36:	d007      	beq.n	8000b48 <__aeabi_fdiv+0x158>
 8000b38:	220f      	movs	r2, #15
 8000b3a:	4641      	mov	r1, r8
 8000b3c:	400a      	ands	r2, r1
 8000b3e:	2a04      	cmp	r2, #4
 8000b40:	d002      	beq.n	8000b48 <__aeabi_fdiv+0x158>
 8000b42:	2204      	movs	r2, #4
 8000b44:	4694      	mov	ip, r2
 8000b46:	44e0      	add	r8, ip
 8000b48:	4642      	mov	r2, r8
 8000b4a:	0112      	lsls	r2, r2, #4
 8000b4c:	d505      	bpl.n	8000b5a <__aeabi_fdiv+0x16a>
 8000b4e:	4642      	mov	r2, r8
 8000b50:	4b36      	ldr	r3, [pc, #216]	@ (8000c2c <__aeabi_fdiv+0x23c>)
 8000b52:	401a      	ands	r2, r3
 8000b54:	003b      	movs	r3, r7
 8000b56:	4690      	mov	r8, r2
 8000b58:	3380      	adds	r3, #128	@ 0x80
 8000b5a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000b5c:	dcc8      	bgt.n	8000af0 <__aeabi_fdiv+0x100>
 8000b5e:	4642      	mov	r2, r8
 8000b60:	0192      	lsls	r2, r2, #6
 8000b62:	0a52      	lsrs	r2, r2, #9
 8000b64:	b2d8      	uxtb	r0, r3
 8000b66:	e7c5      	b.n	8000af4 <__aeabi_fdiv+0x104>
 8000b68:	2280      	movs	r2, #128	@ 0x80
 8000b6a:	2500      	movs	r5, #0
 8000b6c:	20ff      	movs	r0, #255	@ 0xff
 8000b6e:	03d2      	lsls	r2, r2, #15
 8000b70:	e7c0      	b.n	8000af4 <__aeabi_fdiv+0x104>
 8000b72:	2280      	movs	r2, #128	@ 0x80
 8000b74:	03d2      	lsls	r2, r2, #15
 8000b76:	4214      	tst	r4, r2
 8000b78:	d002      	beq.n	8000b80 <__aeabi_fdiv+0x190>
 8000b7a:	4643      	mov	r3, r8
 8000b7c:	4213      	tst	r3, r2
 8000b7e:	d049      	beq.n	8000c14 <__aeabi_fdiv+0x224>
 8000b80:	2280      	movs	r2, #128	@ 0x80
 8000b82:	03d2      	lsls	r2, r2, #15
 8000b84:	4322      	orrs	r2, r4
 8000b86:	0252      	lsls	r2, r2, #9
 8000b88:	20ff      	movs	r0, #255	@ 0xff
 8000b8a:	0a52      	lsrs	r2, r2, #9
 8000b8c:	e7b2      	b.n	8000af4 <__aeabi_fdiv+0x104>
 8000b8e:	2201      	movs	r2, #1
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	2b1b      	cmp	r3, #27
 8000b94:	dcc3      	bgt.n	8000b1e <__aeabi_fdiv+0x12e>
 8000b96:	4642      	mov	r2, r8
 8000b98:	40da      	lsrs	r2, r3
 8000b9a:	4643      	mov	r3, r8
 8000b9c:	379e      	adds	r7, #158	@ 0x9e
 8000b9e:	40bb      	lsls	r3, r7
 8000ba0:	1e59      	subs	r1, r3, #1
 8000ba2:	418b      	sbcs	r3, r1
 8000ba4:	431a      	orrs	r2, r3
 8000ba6:	0753      	lsls	r3, r2, #29
 8000ba8:	d004      	beq.n	8000bb4 <__aeabi_fdiv+0x1c4>
 8000baa:	230f      	movs	r3, #15
 8000bac:	4013      	ands	r3, r2
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	d000      	beq.n	8000bb4 <__aeabi_fdiv+0x1c4>
 8000bb2:	3204      	adds	r2, #4
 8000bb4:	0153      	lsls	r3, r2, #5
 8000bb6:	d529      	bpl.n	8000c0c <__aeabi_fdiv+0x21c>
 8000bb8:	2001      	movs	r0, #1
 8000bba:	2200      	movs	r2, #0
 8000bbc:	e79a      	b.n	8000af4 <__aeabi_fdiv+0x104>
 8000bbe:	4642      	mov	r2, r8
 8000bc0:	0163      	lsls	r3, r4, #5
 8000bc2:	0155      	lsls	r5, r2, #5
 8000bc4:	42ab      	cmp	r3, r5
 8000bc6:	d215      	bcs.n	8000bf4 <__aeabi_fdiv+0x204>
 8000bc8:	201b      	movs	r0, #27
 8000bca:	2200      	movs	r2, #0
 8000bcc:	3f01      	subs	r7, #1
 8000bce:	2601      	movs	r6, #1
 8000bd0:	001c      	movs	r4, r3
 8000bd2:	0052      	lsls	r2, r2, #1
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	2c00      	cmp	r4, #0
 8000bd8:	db01      	blt.n	8000bde <__aeabi_fdiv+0x1ee>
 8000bda:	429d      	cmp	r5, r3
 8000bdc:	d801      	bhi.n	8000be2 <__aeabi_fdiv+0x1f2>
 8000bde:	1b5b      	subs	r3, r3, r5
 8000be0:	4332      	orrs	r2, r6
 8000be2:	3801      	subs	r0, #1
 8000be4:	2800      	cmp	r0, #0
 8000be6:	d1f3      	bne.n	8000bd0 <__aeabi_fdiv+0x1e0>
 8000be8:	1e58      	subs	r0, r3, #1
 8000bea:	4183      	sbcs	r3, r0
 8000bec:	4313      	orrs	r3, r2
 8000bee:	4698      	mov	r8, r3
 8000bf0:	000d      	movs	r5, r1
 8000bf2:	e79a      	b.n	8000b2a <__aeabi_fdiv+0x13a>
 8000bf4:	201a      	movs	r0, #26
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	1b5b      	subs	r3, r3, r5
 8000bfa:	e7e8      	b.n	8000bce <__aeabi_fdiv+0x1de>
 8000bfc:	3b02      	subs	r3, #2
 8000bfe:	425a      	negs	r2, r3
 8000c00:	4153      	adcs	r3, r2
 8000c02:	425b      	negs	r3, r3
 8000c04:	0035      	movs	r5, r6
 8000c06:	2200      	movs	r2, #0
 8000c08:	b2d8      	uxtb	r0, r3
 8000c0a:	e773      	b.n	8000af4 <__aeabi_fdiv+0x104>
 8000c0c:	0192      	lsls	r2, r2, #6
 8000c0e:	2000      	movs	r0, #0
 8000c10:	0a52      	lsrs	r2, r2, #9
 8000c12:	e76f      	b.n	8000af4 <__aeabi_fdiv+0x104>
 8000c14:	431a      	orrs	r2, r3
 8000c16:	0252      	lsls	r2, r2, #9
 8000c18:	0035      	movs	r5, r6
 8000c1a:	20ff      	movs	r0, #255	@ 0xff
 8000c1c:	0a52      	lsrs	r2, r2, #9
 8000c1e:	e769      	b.n	8000af4 <__aeabi_fdiv+0x104>
 8000c20:	4644      	mov	r4, r8
 8000c22:	e7ad      	b.n	8000b80 <__aeabi_fdiv+0x190>
 8000c24:	0800c8f8 	.word	0x0800c8f8
 8000c28:	0800c938 	.word	0x0800c938
 8000c2c:	f7ffffff 	.word	0xf7ffffff

08000c30 <__aeabi_fsub>:
 8000c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c32:	4647      	mov	r7, r8
 8000c34:	46ce      	mov	lr, r9
 8000c36:	024e      	lsls	r6, r1, #9
 8000c38:	0243      	lsls	r3, r0, #9
 8000c3a:	0045      	lsls	r5, r0, #1
 8000c3c:	0a72      	lsrs	r2, r6, #9
 8000c3e:	0fc4      	lsrs	r4, r0, #31
 8000c40:	0048      	lsls	r0, r1, #1
 8000c42:	b580      	push	{r7, lr}
 8000c44:	4694      	mov	ip, r2
 8000c46:	0a5f      	lsrs	r7, r3, #9
 8000c48:	0e2d      	lsrs	r5, r5, #24
 8000c4a:	099b      	lsrs	r3, r3, #6
 8000c4c:	0e00      	lsrs	r0, r0, #24
 8000c4e:	0fc9      	lsrs	r1, r1, #31
 8000c50:	09b6      	lsrs	r6, r6, #6
 8000c52:	28ff      	cmp	r0, #255	@ 0xff
 8000c54:	d024      	beq.n	8000ca0 <__aeabi_fsub+0x70>
 8000c56:	2201      	movs	r2, #1
 8000c58:	4051      	eors	r1, r2
 8000c5a:	1a2a      	subs	r2, r5, r0
 8000c5c:	428c      	cmp	r4, r1
 8000c5e:	d00f      	beq.n	8000c80 <__aeabi_fsub+0x50>
 8000c60:	2a00      	cmp	r2, #0
 8000c62:	dc00      	bgt.n	8000c66 <__aeabi_fsub+0x36>
 8000c64:	e16a      	b.n	8000f3c <__aeabi_fsub+0x30c>
 8000c66:	2800      	cmp	r0, #0
 8000c68:	d135      	bne.n	8000cd6 <__aeabi_fsub+0xa6>
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_fsub+0x40>
 8000c6e:	e0a2      	b.n	8000db6 <__aeabi_fsub+0x186>
 8000c70:	1e51      	subs	r1, r2, #1
 8000c72:	2a01      	cmp	r2, #1
 8000c74:	d100      	bne.n	8000c78 <__aeabi_fsub+0x48>
 8000c76:	e124      	b.n	8000ec2 <__aeabi_fsub+0x292>
 8000c78:	2aff      	cmp	r2, #255	@ 0xff
 8000c7a:	d021      	beq.n	8000cc0 <__aeabi_fsub+0x90>
 8000c7c:	000a      	movs	r2, r1
 8000c7e:	e02f      	b.n	8000ce0 <__aeabi_fsub+0xb0>
 8000c80:	2a00      	cmp	r2, #0
 8000c82:	dc00      	bgt.n	8000c86 <__aeabi_fsub+0x56>
 8000c84:	e167      	b.n	8000f56 <__aeabi_fsub+0x326>
 8000c86:	2800      	cmp	r0, #0
 8000c88:	d05e      	beq.n	8000d48 <__aeabi_fsub+0x118>
 8000c8a:	2dff      	cmp	r5, #255	@ 0xff
 8000c8c:	d018      	beq.n	8000cc0 <__aeabi_fsub+0x90>
 8000c8e:	2180      	movs	r1, #128	@ 0x80
 8000c90:	04c9      	lsls	r1, r1, #19
 8000c92:	430e      	orrs	r6, r1
 8000c94:	2a1b      	cmp	r2, #27
 8000c96:	dc00      	bgt.n	8000c9a <__aeabi_fsub+0x6a>
 8000c98:	e076      	b.n	8000d88 <__aeabi_fsub+0x158>
 8000c9a:	002a      	movs	r2, r5
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	e032      	b.n	8000d06 <__aeabi_fsub+0xd6>
 8000ca0:	002a      	movs	r2, r5
 8000ca2:	3aff      	subs	r2, #255	@ 0xff
 8000ca4:	4691      	mov	r9, r2
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d042      	beq.n	8000d30 <__aeabi_fsub+0x100>
 8000caa:	428c      	cmp	r4, r1
 8000cac:	d055      	beq.n	8000d5a <__aeabi_fsub+0x12a>
 8000cae:	464a      	mov	r2, r9
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	d100      	bne.n	8000cb6 <__aeabi_fsub+0x86>
 8000cb4:	e09c      	b.n	8000df0 <__aeabi_fsub+0x1c0>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d100      	bne.n	8000cbc <__aeabi_fsub+0x8c>
 8000cba:	e077      	b.n	8000dac <__aeabi_fsub+0x17c>
 8000cbc:	000c      	movs	r4, r1
 8000cbe:	0033      	movs	r3, r6
 8000cc0:	08db      	lsrs	r3, r3, #3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d100      	bne.n	8000cc8 <__aeabi_fsub+0x98>
 8000cc6:	e06e      	b.n	8000da6 <__aeabi_fsub+0x176>
 8000cc8:	2280      	movs	r2, #128	@ 0x80
 8000cca:	03d2      	lsls	r2, r2, #15
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	025b      	lsls	r3, r3, #9
 8000cd0:	20ff      	movs	r0, #255	@ 0xff
 8000cd2:	0a5b      	lsrs	r3, r3, #9
 8000cd4:	e024      	b.n	8000d20 <__aeabi_fsub+0xf0>
 8000cd6:	2dff      	cmp	r5, #255	@ 0xff
 8000cd8:	d0f2      	beq.n	8000cc0 <__aeabi_fsub+0x90>
 8000cda:	2180      	movs	r1, #128	@ 0x80
 8000cdc:	04c9      	lsls	r1, r1, #19
 8000cde:	430e      	orrs	r6, r1
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	2a1b      	cmp	r2, #27
 8000ce4:	dc08      	bgt.n	8000cf8 <__aeabi_fsub+0xc8>
 8000ce6:	0031      	movs	r1, r6
 8000ce8:	2020      	movs	r0, #32
 8000cea:	40d1      	lsrs	r1, r2
 8000cec:	1a82      	subs	r2, r0, r2
 8000cee:	4096      	lsls	r6, r2
 8000cf0:	0032      	movs	r2, r6
 8000cf2:	1e50      	subs	r0, r2, #1
 8000cf4:	4182      	sbcs	r2, r0
 8000cf6:	4311      	orrs	r1, r2
 8000cf8:	1a5b      	subs	r3, r3, r1
 8000cfa:	015a      	lsls	r2, r3, #5
 8000cfc:	d460      	bmi.n	8000dc0 <__aeabi_fsub+0x190>
 8000cfe:	2107      	movs	r1, #7
 8000d00:	002a      	movs	r2, r5
 8000d02:	4019      	ands	r1, r3
 8000d04:	d057      	beq.n	8000db6 <__aeabi_fsub+0x186>
 8000d06:	210f      	movs	r1, #15
 8000d08:	4019      	ands	r1, r3
 8000d0a:	2904      	cmp	r1, #4
 8000d0c:	d000      	beq.n	8000d10 <__aeabi_fsub+0xe0>
 8000d0e:	3304      	adds	r3, #4
 8000d10:	0159      	lsls	r1, r3, #5
 8000d12:	d550      	bpl.n	8000db6 <__aeabi_fsub+0x186>
 8000d14:	1c50      	adds	r0, r2, #1
 8000d16:	2afe      	cmp	r2, #254	@ 0xfe
 8000d18:	d045      	beq.n	8000da6 <__aeabi_fsub+0x176>
 8000d1a:	019b      	lsls	r3, r3, #6
 8000d1c:	b2c0      	uxtb	r0, r0
 8000d1e:	0a5b      	lsrs	r3, r3, #9
 8000d20:	05c0      	lsls	r0, r0, #23
 8000d22:	4318      	orrs	r0, r3
 8000d24:	07e4      	lsls	r4, r4, #31
 8000d26:	4320      	orrs	r0, r4
 8000d28:	bcc0      	pop	{r6, r7}
 8000d2a:	46b9      	mov	r9, r7
 8000d2c:	46b0      	mov	r8, r6
 8000d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d30:	2201      	movs	r2, #1
 8000d32:	4051      	eors	r1, r2
 8000d34:	428c      	cmp	r4, r1
 8000d36:	d1ba      	bne.n	8000cae <__aeabi_fsub+0x7e>
 8000d38:	464a      	mov	r2, r9
 8000d3a:	2a00      	cmp	r2, #0
 8000d3c:	d010      	beq.n	8000d60 <__aeabi_fsub+0x130>
 8000d3e:	2d00      	cmp	r5, #0
 8000d40:	d100      	bne.n	8000d44 <__aeabi_fsub+0x114>
 8000d42:	e098      	b.n	8000e76 <__aeabi_fsub+0x246>
 8000d44:	2300      	movs	r3, #0
 8000d46:	e7bb      	b.n	8000cc0 <__aeabi_fsub+0x90>
 8000d48:	2e00      	cmp	r6, #0
 8000d4a:	d034      	beq.n	8000db6 <__aeabi_fsub+0x186>
 8000d4c:	1e51      	subs	r1, r2, #1
 8000d4e:	2a01      	cmp	r2, #1
 8000d50:	d06e      	beq.n	8000e30 <__aeabi_fsub+0x200>
 8000d52:	2aff      	cmp	r2, #255	@ 0xff
 8000d54:	d0b4      	beq.n	8000cc0 <__aeabi_fsub+0x90>
 8000d56:	000a      	movs	r2, r1
 8000d58:	e79c      	b.n	8000c94 <__aeabi_fsub+0x64>
 8000d5a:	2a00      	cmp	r2, #0
 8000d5c:	d000      	beq.n	8000d60 <__aeabi_fsub+0x130>
 8000d5e:	e088      	b.n	8000e72 <__aeabi_fsub+0x242>
 8000d60:	20fe      	movs	r0, #254	@ 0xfe
 8000d62:	1c6a      	adds	r2, r5, #1
 8000d64:	4210      	tst	r0, r2
 8000d66:	d000      	beq.n	8000d6a <__aeabi_fsub+0x13a>
 8000d68:	e092      	b.n	8000e90 <__aeabi_fsub+0x260>
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d000      	beq.n	8000d70 <__aeabi_fsub+0x140>
 8000d6e:	e0a4      	b.n	8000eba <__aeabi_fsub+0x28a>
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d100      	bne.n	8000d76 <__aeabi_fsub+0x146>
 8000d74:	e0cb      	b.n	8000f0e <__aeabi_fsub+0x2de>
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	d000      	beq.n	8000d7c <__aeabi_fsub+0x14c>
 8000d7a:	e0ca      	b.n	8000f12 <__aeabi_fsub+0x2e2>
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	08db      	lsrs	r3, r3, #3
 8000d80:	025b      	lsls	r3, r3, #9
 8000d82:	0a5b      	lsrs	r3, r3, #9
 8000d84:	b2d0      	uxtb	r0, r2
 8000d86:	e7cb      	b.n	8000d20 <__aeabi_fsub+0xf0>
 8000d88:	0031      	movs	r1, r6
 8000d8a:	2020      	movs	r0, #32
 8000d8c:	40d1      	lsrs	r1, r2
 8000d8e:	1a82      	subs	r2, r0, r2
 8000d90:	4096      	lsls	r6, r2
 8000d92:	0032      	movs	r2, r6
 8000d94:	1e50      	subs	r0, r2, #1
 8000d96:	4182      	sbcs	r2, r0
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	189b      	adds	r3, r3, r2
 8000d9c:	015a      	lsls	r2, r3, #5
 8000d9e:	d5ae      	bpl.n	8000cfe <__aeabi_fsub+0xce>
 8000da0:	1c6a      	adds	r2, r5, #1
 8000da2:	2dfe      	cmp	r5, #254	@ 0xfe
 8000da4:	d14a      	bne.n	8000e3c <__aeabi_fsub+0x20c>
 8000da6:	20ff      	movs	r0, #255	@ 0xff
 8000da8:	2300      	movs	r3, #0
 8000daa:	e7b9      	b.n	8000d20 <__aeabi_fsub+0xf0>
 8000dac:	22ff      	movs	r2, #255	@ 0xff
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d14b      	bne.n	8000e4a <__aeabi_fsub+0x21a>
 8000db2:	000c      	movs	r4, r1
 8000db4:	0033      	movs	r3, r6
 8000db6:	08db      	lsrs	r3, r3, #3
 8000db8:	2aff      	cmp	r2, #255	@ 0xff
 8000dba:	d100      	bne.n	8000dbe <__aeabi_fsub+0x18e>
 8000dbc:	e781      	b.n	8000cc2 <__aeabi_fsub+0x92>
 8000dbe:	e7df      	b.n	8000d80 <__aeabi_fsub+0x150>
 8000dc0:	019f      	lsls	r7, r3, #6
 8000dc2:	09bf      	lsrs	r7, r7, #6
 8000dc4:	0038      	movs	r0, r7
 8000dc6:	f002 f8a1 	bl	8002f0c <__clzsi2>
 8000dca:	3805      	subs	r0, #5
 8000dcc:	4087      	lsls	r7, r0
 8000dce:	4285      	cmp	r5, r0
 8000dd0:	dc21      	bgt.n	8000e16 <__aeabi_fsub+0x1e6>
 8000dd2:	003b      	movs	r3, r7
 8000dd4:	2120      	movs	r1, #32
 8000dd6:	1b42      	subs	r2, r0, r5
 8000dd8:	3201      	adds	r2, #1
 8000dda:	40d3      	lsrs	r3, r2
 8000ddc:	1a8a      	subs	r2, r1, r2
 8000dde:	4097      	lsls	r7, r2
 8000de0:	1e7a      	subs	r2, r7, #1
 8000de2:	4197      	sbcs	r7, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	433b      	orrs	r3, r7
 8000de8:	0759      	lsls	r1, r3, #29
 8000dea:	d000      	beq.n	8000dee <__aeabi_fsub+0x1be>
 8000dec:	e78b      	b.n	8000d06 <__aeabi_fsub+0xd6>
 8000dee:	e78f      	b.n	8000d10 <__aeabi_fsub+0xe0>
 8000df0:	20fe      	movs	r0, #254	@ 0xfe
 8000df2:	1c6a      	adds	r2, r5, #1
 8000df4:	4210      	tst	r0, r2
 8000df6:	d112      	bne.n	8000e1e <__aeabi_fsub+0x1ee>
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d152      	bne.n	8000ea2 <__aeabi_fsub+0x272>
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d07c      	beq.n	8000efa <__aeabi_fsub+0x2ca>
 8000e00:	2e00      	cmp	r6, #0
 8000e02:	d0bb      	beq.n	8000d7c <__aeabi_fsub+0x14c>
 8000e04:	1b9a      	subs	r2, r3, r6
 8000e06:	0150      	lsls	r0, r2, #5
 8000e08:	d400      	bmi.n	8000e0c <__aeabi_fsub+0x1dc>
 8000e0a:	e08b      	b.n	8000f24 <__aeabi_fsub+0x2f4>
 8000e0c:	2401      	movs	r4, #1
 8000e0e:	2200      	movs	r2, #0
 8000e10:	1af3      	subs	r3, r6, r3
 8000e12:	400c      	ands	r4, r1
 8000e14:	e7e8      	b.n	8000de8 <__aeabi_fsub+0x1b8>
 8000e16:	4b56      	ldr	r3, [pc, #344]	@ (8000f70 <__aeabi_fsub+0x340>)
 8000e18:	1a2a      	subs	r2, r5, r0
 8000e1a:	403b      	ands	r3, r7
 8000e1c:	e7e4      	b.n	8000de8 <__aeabi_fsub+0x1b8>
 8000e1e:	1b9f      	subs	r7, r3, r6
 8000e20:	017a      	lsls	r2, r7, #5
 8000e22:	d446      	bmi.n	8000eb2 <__aeabi_fsub+0x282>
 8000e24:	2f00      	cmp	r7, #0
 8000e26:	d1cd      	bne.n	8000dc4 <__aeabi_fsub+0x194>
 8000e28:	2400      	movs	r4, #0
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	e777      	b.n	8000d20 <__aeabi_fsub+0xf0>
 8000e30:	199b      	adds	r3, r3, r6
 8000e32:	2501      	movs	r5, #1
 8000e34:	3201      	adds	r2, #1
 8000e36:	0159      	lsls	r1, r3, #5
 8000e38:	d400      	bmi.n	8000e3c <__aeabi_fsub+0x20c>
 8000e3a:	e760      	b.n	8000cfe <__aeabi_fsub+0xce>
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	484d      	ldr	r0, [pc, #308]	@ (8000f74 <__aeabi_fsub+0x344>)
 8000e40:	4019      	ands	r1, r3
 8000e42:	085b      	lsrs	r3, r3, #1
 8000e44:	4003      	ands	r3, r0
 8000e46:	430b      	orrs	r3, r1
 8000e48:	e7ce      	b.n	8000de8 <__aeabi_fsub+0x1b8>
 8000e4a:	1e57      	subs	r7, r2, #1
 8000e4c:	2a01      	cmp	r2, #1
 8000e4e:	d05a      	beq.n	8000f06 <__aeabi_fsub+0x2d6>
 8000e50:	000c      	movs	r4, r1
 8000e52:	2aff      	cmp	r2, #255	@ 0xff
 8000e54:	d033      	beq.n	8000ebe <__aeabi_fsub+0x28e>
 8000e56:	2201      	movs	r2, #1
 8000e58:	2f1b      	cmp	r7, #27
 8000e5a:	dc07      	bgt.n	8000e6c <__aeabi_fsub+0x23c>
 8000e5c:	2120      	movs	r1, #32
 8000e5e:	1bc9      	subs	r1, r1, r7
 8000e60:	001a      	movs	r2, r3
 8000e62:	408b      	lsls	r3, r1
 8000e64:	40fa      	lsrs	r2, r7
 8000e66:	1e59      	subs	r1, r3, #1
 8000e68:	418b      	sbcs	r3, r1
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	0005      	movs	r5, r0
 8000e6e:	1ab3      	subs	r3, r6, r2
 8000e70:	e743      	b.n	8000cfa <__aeabi_fsub+0xca>
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	d123      	bne.n	8000ebe <__aeabi_fsub+0x28e>
 8000e76:	22ff      	movs	r2, #255	@ 0xff
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d09b      	beq.n	8000db4 <__aeabi_fsub+0x184>
 8000e7c:	1e51      	subs	r1, r2, #1
 8000e7e:	2a01      	cmp	r2, #1
 8000e80:	d0d6      	beq.n	8000e30 <__aeabi_fsub+0x200>
 8000e82:	2aff      	cmp	r2, #255	@ 0xff
 8000e84:	d01b      	beq.n	8000ebe <__aeabi_fsub+0x28e>
 8000e86:	291b      	cmp	r1, #27
 8000e88:	dd2c      	ble.n	8000ee4 <__aeabi_fsub+0x2b4>
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	1c73      	adds	r3, r6, #1
 8000e8e:	e73a      	b.n	8000d06 <__aeabi_fsub+0xd6>
 8000e90:	2aff      	cmp	r2, #255	@ 0xff
 8000e92:	d088      	beq.n	8000da6 <__aeabi_fsub+0x176>
 8000e94:	199b      	adds	r3, r3, r6
 8000e96:	085b      	lsrs	r3, r3, #1
 8000e98:	0759      	lsls	r1, r3, #29
 8000e9a:	d000      	beq.n	8000e9e <__aeabi_fsub+0x26e>
 8000e9c:	e733      	b.n	8000d06 <__aeabi_fsub+0xd6>
 8000e9e:	08db      	lsrs	r3, r3, #3
 8000ea0:	e76e      	b.n	8000d80 <__aeabi_fsub+0x150>
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d110      	bne.n	8000ec8 <__aeabi_fsub+0x298>
 8000ea6:	2e00      	cmp	r6, #0
 8000ea8:	d043      	beq.n	8000f32 <__aeabi_fsub+0x302>
 8000eaa:	2401      	movs	r4, #1
 8000eac:	0033      	movs	r3, r6
 8000eae:	400c      	ands	r4, r1
 8000eb0:	e706      	b.n	8000cc0 <__aeabi_fsub+0x90>
 8000eb2:	2401      	movs	r4, #1
 8000eb4:	1af7      	subs	r7, r6, r3
 8000eb6:	400c      	ands	r4, r1
 8000eb8:	e784      	b.n	8000dc4 <__aeabi_fsub+0x194>
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d104      	bne.n	8000ec8 <__aeabi_fsub+0x298>
 8000ebe:	0033      	movs	r3, r6
 8000ec0:	e6fe      	b.n	8000cc0 <__aeabi_fsub+0x90>
 8000ec2:	2501      	movs	r5, #1
 8000ec4:	1b9b      	subs	r3, r3, r6
 8000ec6:	e718      	b.n	8000cfa <__aeabi_fsub+0xca>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d100      	bne.n	8000ece <__aeabi_fsub+0x29e>
 8000ecc:	e6f8      	b.n	8000cc0 <__aeabi_fsub+0x90>
 8000ece:	2280      	movs	r2, #128	@ 0x80
 8000ed0:	03d2      	lsls	r2, r2, #15
 8000ed2:	4297      	cmp	r7, r2
 8000ed4:	d304      	bcc.n	8000ee0 <__aeabi_fsub+0x2b0>
 8000ed6:	4594      	cmp	ip, r2
 8000ed8:	d202      	bcs.n	8000ee0 <__aeabi_fsub+0x2b0>
 8000eda:	2401      	movs	r4, #1
 8000edc:	0033      	movs	r3, r6
 8000ede:	400c      	ands	r4, r1
 8000ee0:	08db      	lsrs	r3, r3, #3
 8000ee2:	e6f1      	b.n	8000cc8 <__aeabi_fsub+0x98>
 8000ee4:	001a      	movs	r2, r3
 8000ee6:	2520      	movs	r5, #32
 8000ee8:	40ca      	lsrs	r2, r1
 8000eea:	1a69      	subs	r1, r5, r1
 8000eec:	408b      	lsls	r3, r1
 8000eee:	1e59      	subs	r1, r3, #1
 8000ef0:	418b      	sbcs	r3, r1
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	0005      	movs	r5, r0
 8000ef6:	199b      	adds	r3, r3, r6
 8000ef8:	e750      	b.n	8000d9c <__aeabi_fsub+0x16c>
 8000efa:	2e00      	cmp	r6, #0
 8000efc:	d094      	beq.n	8000e28 <__aeabi_fsub+0x1f8>
 8000efe:	2401      	movs	r4, #1
 8000f00:	0033      	movs	r3, r6
 8000f02:	400c      	ands	r4, r1
 8000f04:	e73a      	b.n	8000d7c <__aeabi_fsub+0x14c>
 8000f06:	000c      	movs	r4, r1
 8000f08:	2501      	movs	r5, #1
 8000f0a:	1af3      	subs	r3, r6, r3
 8000f0c:	e6f5      	b.n	8000cfa <__aeabi_fsub+0xca>
 8000f0e:	0033      	movs	r3, r6
 8000f10:	e734      	b.n	8000d7c <__aeabi_fsub+0x14c>
 8000f12:	199b      	adds	r3, r3, r6
 8000f14:	2200      	movs	r2, #0
 8000f16:	0159      	lsls	r1, r3, #5
 8000f18:	d5c1      	bpl.n	8000e9e <__aeabi_fsub+0x26e>
 8000f1a:	4a15      	ldr	r2, [pc, #84]	@ (8000f70 <__aeabi_fsub+0x340>)
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	08db      	lsrs	r3, r3, #3
 8000f20:	2201      	movs	r2, #1
 8000f22:	e72d      	b.n	8000d80 <__aeabi_fsub+0x150>
 8000f24:	2a00      	cmp	r2, #0
 8000f26:	d100      	bne.n	8000f2a <__aeabi_fsub+0x2fa>
 8000f28:	e77e      	b.n	8000e28 <__aeabi_fsub+0x1f8>
 8000f2a:	0013      	movs	r3, r2
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	08db      	lsrs	r3, r3, #3
 8000f30:	e726      	b.n	8000d80 <__aeabi_fsub+0x150>
 8000f32:	2380      	movs	r3, #128	@ 0x80
 8000f34:	2400      	movs	r4, #0
 8000f36:	20ff      	movs	r0, #255	@ 0xff
 8000f38:	03db      	lsls	r3, r3, #15
 8000f3a:	e6f1      	b.n	8000d20 <__aeabi_fsub+0xf0>
 8000f3c:	2a00      	cmp	r2, #0
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_fsub+0x312>
 8000f40:	e756      	b.n	8000df0 <__aeabi_fsub+0x1c0>
 8000f42:	1b47      	subs	r7, r0, r5
 8000f44:	003a      	movs	r2, r7
 8000f46:	2d00      	cmp	r5, #0
 8000f48:	d100      	bne.n	8000f4c <__aeabi_fsub+0x31c>
 8000f4a:	e730      	b.n	8000dae <__aeabi_fsub+0x17e>
 8000f4c:	2280      	movs	r2, #128	@ 0x80
 8000f4e:	04d2      	lsls	r2, r2, #19
 8000f50:	000c      	movs	r4, r1
 8000f52:	4313      	orrs	r3, r2
 8000f54:	e77f      	b.n	8000e56 <__aeabi_fsub+0x226>
 8000f56:	2a00      	cmp	r2, #0
 8000f58:	d100      	bne.n	8000f5c <__aeabi_fsub+0x32c>
 8000f5a:	e701      	b.n	8000d60 <__aeabi_fsub+0x130>
 8000f5c:	1b41      	subs	r1, r0, r5
 8000f5e:	2d00      	cmp	r5, #0
 8000f60:	d101      	bne.n	8000f66 <__aeabi_fsub+0x336>
 8000f62:	000a      	movs	r2, r1
 8000f64:	e788      	b.n	8000e78 <__aeabi_fsub+0x248>
 8000f66:	2280      	movs	r2, #128	@ 0x80
 8000f68:	04d2      	lsls	r2, r2, #19
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	e78b      	b.n	8000e86 <__aeabi_fsub+0x256>
 8000f6e:	46c0      	nop			@ (mov r8, r8)
 8000f70:	fbffffff 	.word	0xfbffffff
 8000f74:	7dffffff 	.word	0x7dffffff

08000f78 <__aeabi_ui2f>:
 8000f78:	b570      	push	{r4, r5, r6, lr}
 8000f7a:	1e04      	subs	r4, r0, #0
 8000f7c:	d00e      	beq.n	8000f9c <__aeabi_ui2f+0x24>
 8000f7e:	f001 ffc5 	bl	8002f0c <__clzsi2>
 8000f82:	239e      	movs	r3, #158	@ 0x9e
 8000f84:	0001      	movs	r1, r0
 8000f86:	1a1b      	subs	r3, r3, r0
 8000f88:	2b96      	cmp	r3, #150	@ 0x96
 8000f8a:	dc0c      	bgt.n	8000fa6 <__aeabi_ui2f+0x2e>
 8000f8c:	2808      	cmp	r0, #8
 8000f8e:	d02f      	beq.n	8000ff0 <__aeabi_ui2f+0x78>
 8000f90:	3908      	subs	r1, #8
 8000f92:	408c      	lsls	r4, r1
 8000f94:	0264      	lsls	r4, r4, #9
 8000f96:	0a64      	lsrs	r4, r4, #9
 8000f98:	b2d8      	uxtb	r0, r3
 8000f9a:	e001      	b.n	8000fa0 <__aeabi_ui2f+0x28>
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	2400      	movs	r4, #0
 8000fa0:	05c0      	lsls	r0, r0, #23
 8000fa2:	4320      	orrs	r0, r4
 8000fa4:	bd70      	pop	{r4, r5, r6, pc}
 8000fa6:	2b99      	cmp	r3, #153	@ 0x99
 8000fa8:	dc16      	bgt.n	8000fd8 <__aeabi_ui2f+0x60>
 8000faa:	1f42      	subs	r2, r0, #5
 8000fac:	2805      	cmp	r0, #5
 8000fae:	d000      	beq.n	8000fb2 <__aeabi_ui2f+0x3a>
 8000fb0:	4094      	lsls	r4, r2
 8000fb2:	0022      	movs	r2, r4
 8000fb4:	4810      	ldr	r0, [pc, #64]	@ (8000ff8 <__aeabi_ui2f+0x80>)
 8000fb6:	4002      	ands	r2, r0
 8000fb8:	0765      	lsls	r5, r4, #29
 8000fba:	d009      	beq.n	8000fd0 <__aeabi_ui2f+0x58>
 8000fbc:	250f      	movs	r5, #15
 8000fbe:	402c      	ands	r4, r5
 8000fc0:	2c04      	cmp	r4, #4
 8000fc2:	d005      	beq.n	8000fd0 <__aeabi_ui2f+0x58>
 8000fc4:	3204      	adds	r2, #4
 8000fc6:	0154      	lsls	r4, r2, #5
 8000fc8:	d502      	bpl.n	8000fd0 <__aeabi_ui2f+0x58>
 8000fca:	239f      	movs	r3, #159	@ 0x9f
 8000fcc:	4002      	ands	r2, r0
 8000fce:	1a5b      	subs	r3, r3, r1
 8000fd0:	0192      	lsls	r2, r2, #6
 8000fd2:	0a54      	lsrs	r4, r2, #9
 8000fd4:	b2d8      	uxtb	r0, r3
 8000fd6:	e7e3      	b.n	8000fa0 <__aeabi_ui2f+0x28>
 8000fd8:	0002      	movs	r2, r0
 8000fda:	0020      	movs	r0, r4
 8000fdc:	321b      	adds	r2, #27
 8000fde:	4090      	lsls	r0, r2
 8000fe0:	0002      	movs	r2, r0
 8000fe2:	1e50      	subs	r0, r2, #1
 8000fe4:	4182      	sbcs	r2, r0
 8000fe6:	2005      	movs	r0, #5
 8000fe8:	1a40      	subs	r0, r0, r1
 8000fea:	40c4      	lsrs	r4, r0
 8000fec:	4314      	orrs	r4, r2
 8000fee:	e7e0      	b.n	8000fb2 <__aeabi_ui2f+0x3a>
 8000ff0:	0264      	lsls	r4, r4, #9
 8000ff2:	2096      	movs	r0, #150	@ 0x96
 8000ff4:	0a64      	lsrs	r4, r4, #9
 8000ff6:	e7d3      	b.n	8000fa0 <__aeabi_ui2f+0x28>
 8000ff8:	fbffffff 	.word	0xfbffffff

08000ffc <__aeabi_dadd>:
 8000ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ffe:	4657      	mov	r7, sl
 8001000:	464e      	mov	r6, r9
 8001002:	4645      	mov	r5, r8
 8001004:	46de      	mov	lr, fp
 8001006:	b5e0      	push	{r5, r6, r7, lr}
 8001008:	b083      	sub	sp, #12
 800100a:	9000      	str	r0, [sp, #0]
 800100c:	9101      	str	r1, [sp, #4]
 800100e:	030c      	lsls	r4, r1, #12
 8001010:	004f      	lsls	r7, r1, #1
 8001012:	0fce      	lsrs	r6, r1, #31
 8001014:	0a61      	lsrs	r1, r4, #9
 8001016:	9c00      	ldr	r4, [sp, #0]
 8001018:	031d      	lsls	r5, r3, #12
 800101a:	0f64      	lsrs	r4, r4, #29
 800101c:	430c      	orrs	r4, r1
 800101e:	9900      	ldr	r1, [sp, #0]
 8001020:	9200      	str	r2, [sp, #0]
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	00c8      	lsls	r0, r1, #3
 8001026:	0059      	lsls	r1, r3, #1
 8001028:	0d4b      	lsrs	r3, r1, #21
 800102a:	4699      	mov	r9, r3
 800102c:	9a00      	ldr	r2, [sp, #0]
 800102e:	9b01      	ldr	r3, [sp, #4]
 8001030:	0a6d      	lsrs	r5, r5, #9
 8001032:	0fd9      	lsrs	r1, r3, #31
 8001034:	0f53      	lsrs	r3, r2, #29
 8001036:	432b      	orrs	r3, r5
 8001038:	469a      	mov	sl, r3
 800103a:	9b00      	ldr	r3, [sp, #0]
 800103c:	0d7f      	lsrs	r7, r7, #21
 800103e:	00da      	lsls	r2, r3, #3
 8001040:	4694      	mov	ip, r2
 8001042:	464a      	mov	r2, r9
 8001044:	46b0      	mov	r8, r6
 8001046:	1aba      	subs	r2, r7, r2
 8001048:	428e      	cmp	r6, r1
 800104a:	d100      	bne.n	800104e <__aeabi_dadd+0x52>
 800104c:	e0b0      	b.n	80011b0 <__aeabi_dadd+0x1b4>
 800104e:	2a00      	cmp	r2, #0
 8001050:	dc00      	bgt.n	8001054 <__aeabi_dadd+0x58>
 8001052:	e078      	b.n	8001146 <__aeabi_dadd+0x14a>
 8001054:	4649      	mov	r1, r9
 8001056:	2900      	cmp	r1, #0
 8001058:	d100      	bne.n	800105c <__aeabi_dadd+0x60>
 800105a:	e0e9      	b.n	8001230 <__aeabi_dadd+0x234>
 800105c:	49c9      	ldr	r1, [pc, #804]	@ (8001384 <__aeabi_dadd+0x388>)
 800105e:	428f      	cmp	r7, r1
 8001060:	d100      	bne.n	8001064 <__aeabi_dadd+0x68>
 8001062:	e195      	b.n	8001390 <__aeabi_dadd+0x394>
 8001064:	2501      	movs	r5, #1
 8001066:	2a38      	cmp	r2, #56	@ 0x38
 8001068:	dc16      	bgt.n	8001098 <__aeabi_dadd+0x9c>
 800106a:	2180      	movs	r1, #128	@ 0x80
 800106c:	4653      	mov	r3, sl
 800106e:	0409      	lsls	r1, r1, #16
 8001070:	430b      	orrs	r3, r1
 8001072:	469a      	mov	sl, r3
 8001074:	2a1f      	cmp	r2, #31
 8001076:	dd00      	ble.n	800107a <__aeabi_dadd+0x7e>
 8001078:	e1e7      	b.n	800144a <__aeabi_dadd+0x44e>
 800107a:	2120      	movs	r1, #32
 800107c:	4655      	mov	r5, sl
 800107e:	1a8b      	subs	r3, r1, r2
 8001080:	4661      	mov	r1, ip
 8001082:	409d      	lsls	r5, r3
 8001084:	40d1      	lsrs	r1, r2
 8001086:	430d      	orrs	r5, r1
 8001088:	4661      	mov	r1, ip
 800108a:	4099      	lsls	r1, r3
 800108c:	1e4b      	subs	r3, r1, #1
 800108e:	4199      	sbcs	r1, r3
 8001090:	4653      	mov	r3, sl
 8001092:	40d3      	lsrs	r3, r2
 8001094:	430d      	orrs	r5, r1
 8001096:	1ae4      	subs	r4, r4, r3
 8001098:	1b45      	subs	r5, r0, r5
 800109a:	42a8      	cmp	r0, r5
 800109c:	4180      	sbcs	r0, r0
 800109e:	4240      	negs	r0, r0
 80010a0:	1a24      	subs	r4, r4, r0
 80010a2:	0223      	lsls	r3, r4, #8
 80010a4:	d400      	bmi.n	80010a8 <__aeabi_dadd+0xac>
 80010a6:	e10f      	b.n	80012c8 <__aeabi_dadd+0x2cc>
 80010a8:	0264      	lsls	r4, r4, #9
 80010aa:	0a64      	lsrs	r4, r4, #9
 80010ac:	2c00      	cmp	r4, #0
 80010ae:	d100      	bne.n	80010b2 <__aeabi_dadd+0xb6>
 80010b0:	e139      	b.n	8001326 <__aeabi_dadd+0x32a>
 80010b2:	0020      	movs	r0, r4
 80010b4:	f001 ff2a 	bl	8002f0c <__clzsi2>
 80010b8:	0003      	movs	r3, r0
 80010ba:	3b08      	subs	r3, #8
 80010bc:	2120      	movs	r1, #32
 80010be:	0028      	movs	r0, r5
 80010c0:	1aca      	subs	r2, r1, r3
 80010c2:	40d0      	lsrs	r0, r2
 80010c4:	409c      	lsls	r4, r3
 80010c6:	0002      	movs	r2, r0
 80010c8:	409d      	lsls	r5, r3
 80010ca:	4322      	orrs	r2, r4
 80010cc:	429f      	cmp	r7, r3
 80010ce:	dd00      	ble.n	80010d2 <__aeabi_dadd+0xd6>
 80010d0:	e173      	b.n	80013ba <__aeabi_dadd+0x3be>
 80010d2:	1bd8      	subs	r0, r3, r7
 80010d4:	3001      	adds	r0, #1
 80010d6:	1a09      	subs	r1, r1, r0
 80010d8:	002c      	movs	r4, r5
 80010da:	408d      	lsls	r5, r1
 80010dc:	40c4      	lsrs	r4, r0
 80010de:	1e6b      	subs	r3, r5, #1
 80010e0:	419d      	sbcs	r5, r3
 80010e2:	0013      	movs	r3, r2
 80010e4:	40c2      	lsrs	r2, r0
 80010e6:	408b      	lsls	r3, r1
 80010e8:	4325      	orrs	r5, r4
 80010ea:	2700      	movs	r7, #0
 80010ec:	0014      	movs	r4, r2
 80010ee:	431d      	orrs	r5, r3
 80010f0:	076b      	lsls	r3, r5, #29
 80010f2:	d009      	beq.n	8001108 <__aeabi_dadd+0x10c>
 80010f4:	230f      	movs	r3, #15
 80010f6:	402b      	ands	r3, r5
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d005      	beq.n	8001108 <__aeabi_dadd+0x10c>
 80010fc:	1d2b      	adds	r3, r5, #4
 80010fe:	42ab      	cmp	r3, r5
 8001100:	41ad      	sbcs	r5, r5
 8001102:	426d      	negs	r5, r5
 8001104:	1964      	adds	r4, r4, r5
 8001106:	001d      	movs	r5, r3
 8001108:	0223      	lsls	r3, r4, #8
 800110a:	d400      	bmi.n	800110e <__aeabi_dadd+0x112>
 800110c:	e12d      	b.n	800136a <__aeabi_dadd+0x36e>
 800110e:	4a9d      	ldr	r2, [pc, #628]	@ (8001384 <__aeabi_dadd+0x388>)
 8001110:	3701      	adds	r7, #1
 8001112:	4297      	cmp	r7, r2
 8001114:	d100      	bne.n	8001118 <__aeabi_dadd+0x11c>
 8001116:	e0d3      	b.n	80012c0 <__aeabi_dadd+0x2c4>
 8001118:	4646      	mov	r6, r8
 800111a:	499b      	ldr	r1, [pc, #620]	@ (8001388 <__aeabi_dadd+0x38c>)
 800111c:	08ed      	lsrs	r5, r5, #3
 800111e:	4021      	ands	r1, r4
 8001120:	074a      	lsls	r2, r1, #29
 8001122:	432a      	orrs	r2, r5
 8001124:	057c      	lsls	r4, r7, #21
 8001126:	024d      	lsls	r5, r1, #9
 8001128:	0b2d      	lsrs	r5, r5, #12
 800112a:	0d64      	lsrs	r4, r4, #21
 800112c:	0524      	lsls	r4, r4, #20
 800112e:	432c      	orrs	r4, r5
 8001130:	07f6      	lsls	r6, r6, #31
 8001132:	4334      	orrs	r4, r6
 8001134:	0010      	movs	r0, r2
 8001136:	0021      	movs	r1, r4
 8001138:	b003      	add	sp, #12
 800113a:	bcf0      	pop	{r4, r5, r6, r7}
 800113c:	46bb      	mov	fp, r7
 800113e:	46b2      	mov	sl, r6
 8001140:	46a9      	mov	r9, r5
 8001142:	46a0      	mov	r8, r4
 8001144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001146:	2a00      	cmp	r2, #0
 8001148:	d100      	bne.n	800114c <__aeabi_dadd+0x150>
 800114a:	e084      	b.n	8001256 <__aeabi_dadd+0x25a>
 800114c:	464a      	mov	r2, r9
 800114e:	1bd2      	subs	r2, r2, r7
 8001150:	2f00      	cmp	r7, #0
 8001152:	d000      	beq.n	8001156 <__aeabi_dadd+0x15a>
 8001154:	e16d      	b.n	8001432 <__aeabi_dadd+0x436>
 8001156:	0025      	movs	r5, r4
 8001158:	4305      	orrs	r5, r0
 800115a:	d100      	bne.n	800115e <__aeabi_dadd+0x162>
 800115c:	e127      	b.n	80013ae <__aeabi_dadd+0x3b2>
 800115e:	1e56      	subs	r6, r2, #1
 8001160:	2a01      	cmp	r2, #1
 8001162:	d100      	bne.n	8001166 <__aeabi_dadd+0x16a>
 8001164:	e23b      	b.n	80015de <__aeabi_dadd+0x5e2>
 8001166:	4d87      	ldr	r5, [pc, #540]	@ (8001384 <__aeabi_dadd+0x388>)
 8001168:	42aa      	cmp	r2, r5
 800116a:	d100      	bne.n	800116e <__aeabi_dadd+0x172>
 800116c:	e26a      	b.n	8001644 <__aeabi_dadd+0x648>
 800116e:	2501      	movs	r5, #1
 8001170:	2e38      	cmp	r6, #56	@ 0x38
 8001172:	dc12      	bgt.n	800119a <__aeabi_dadd+0x19e>
 8001174:	0032      	movs	r2, r6
 8001176:	2a1f      	cmp	r2, #31
 8001178:	dd00      	ble.n	800117c <__aeabi_dadd+0x180>
 800117a:	e1f8      	b.n	800156e <__aeabi_dadd+0x572>
 800117c:	2620      	movs	r6, #32
 800117e:	0025      	movs	r5, r4
 8001180:	1ab6      	subs	r6, r6, r2
 8001182:	0007      	movs	r7, r0
 8001184:	4653      	mov	r3, sl
 8001186:	40b0      	lsls	r0, r6
 8001188:	40d4      	lsrs	r4, r2
 800118a:	40b5      	lsls	r5, r6
 800118c:	40d7      	lsrs	r7, r2
 800118e:	1e46      	subs	r6, r0, #1
 8001190:	41b0      	sbcs	r0, r6
 8001192:	1b1b      	subs	r3, r3, r4
 8001194:	469a      	mov	sl, r3
 8001196:	433d      	orrs	r5, r7
 8001198:	4305      	orrs	r5, r0
 800119a:	4662      	mov	r2, ip
 800119c:	1b55      	subs	r5, r2, r5
 800119e:	45ac      	cmp	ip, r5
 80011a0:	4192      	sbcs	r2, r2
 80011a2:	4653      	mov	r3, sl
 80011a4:	4252      	negs	r2, r2
 80011a6:	000e      	movs	r6, r1
 80011a8:	464f      	mov	r7, r9
 80011aa:	4688      	mov	r8, r1
 80011ac:	1a9c      	subs	r4, r3, r2
 80011ae:	e778      	b.n	80010a2 <__aeabi_dadd+0xa6>
 80011b0:	2a00      	cmp	r2, #0
 80011b2:	dc00      	bgt.n	80011b6 <__aeabi_dadd+0x1ba>
 80011b4:	e08e      	b.n	80012d4 <__aeabi_dadd+0x2d8>
 80011b6:	4649      	mov	r1, r9
 80011b8:	2900      	cmp	r1, #0
 80011ba:	d175      	bne.n	80012a8 <__aeabi_dadd+0x2ac>
 80011bc:	4661      	mov	r1, ip
 80011be:	4653      	mov	r3, sl
 80011c0:	4319      	orrs	r1, r3
 80011c2:	d100      	bne.n	80011c6 <__aeabi_dadd+0x1ca>
 80011c4:	e0f6      	b.n	80013b4 <__aeabi_dadd+0x3b8>
 80011c6:	1e51      	subs	r1, r2, #1
 80011c8:	2a01      	cmp	r2, #1
 80011ca:	d100      	bne.n	80011ce <__aeabi_dadd+0x1d2>
 80011cc:	e191      	b.n	80014f2 <__aeabi_dadd+0x4f6>
 80011ce:	4d6d      	ldr	r5, [pc, #436]	@ (8001384 <__aeabi_dadd+0x388>)
 80011d0:	42aa      	cmp	r2, r5
 80011d2:	d100      	bne.n	80011d6 <__aeabi_dadd+0x1da>
 80011d4:	e0dc      	b.n	8001390 <__aeabi_dadd+0x394>
 80011d6:	2501      	movs	r5, #1
 80011d8:	2938      	cmp	r1, #56	@ 0x38
 80011da:	dc14      	bgt.n	8001206 <__aeabi_dadd+0x20a>
 80011dc:	000a      	movs	r2, r1
 80011de:	2a1f      	cmp	r2, #31
 80011e0:	dd00      	ble.n	80011e4 <__aeabi_dadd+0x1e8>
 80011e2:	e1a2      	b.n	800152a <__aeabi_dadd+0x52e>
 80011e4:	2120      	movs	r1, #32
 80011e6:	4653      	mov	r3, sl
 80011e8:	1a89      	subs	r1, r1, r2
 80011ea:	408b      	lsls	r3, r1
 80011ec:	001d      	movs	r5, r3
 80011ee:	4663      	mov	r3, ip
 80011f0:	40d3      	lsrs	r3, r2
 80011f2:	431d      	orrs	r5, r3
 80011f4:	4663      	mov	r3, ip
 80011f6:	408b      	lsls	r3, r1
 80011f8:	0019      	movs	r1, r3
 80011fa:	1e4b      	subs	r3, r1, #1
 80011fc:	4199      	sbcs	r1, r3
 80011fe:	4653      	mov	r3, sl
 8001200:	40d3      	lsrs	r3, r2
 8001202:	430d      	orrs	r5, r1
 8001204:	18e4      	adds	r4, r4, r3
 8001206:	182d      	adds	r5, r5, r0
 8001208:	4285      	cmp	r5, r0
 800120a:	4180      	sbcs	r0, r0
 800120c:	4240      	negs	r0, r0
 800120e:	1824      	adds	r4, r4, r0
 8001210:	0223      	lsls	r3, r4, #8
 8001212:	d559      	bpl.n	80012c8 <__aeabi_dadd+0x2cc>
 8001214:	4b5b      	ldr	r3, [pc, #364]	@ (8001384 <__aeabi_dadd+0x388>)
 8001216:	3701      	adds	r7, #1
 8001218:	429f      	cmp	r7, r3
 800121a:	d051      	beq.n	80012c0 <__aeabi_dadd+0x2c4>
 800121c:	2101      	movs	r1, #1
 800121e:	4b5a      	ldr	r3, [pc, #360]	@ (8001388 <__aeabi_dadd+0x38c>)
 8001220:	086a      	lsrs	r2, r5, #1
 8001222:	401c      	ands	r4, r3
 8001224:	4029      	ands	r1, r5
 8001226:	430a      	orrs	r2, r1
 8001228:	07e5      	lsls	r5, r4, #31
 800122a:	4315      	orrs	r5, r2
 800122c:	0864      	lsrs	r4, r4, #1
 800122e:	e75f      	b.n	80010f0 <__aeabi_dadd+0xf4>
 8001230:	4661      	mov	r1, ip
 8001232:	4653      	mov	r3, sl
 8001234:	4319      	orrs	r1, r3
 8001236:	d100      	bne.n	800123a <__aeabi_dadd+0x23e>
 8001238:	e0bc      	b.n	80013b4 <__aeabi_dadd+0x3b8>
 800123a:	1e51      	subs	r1, r2, #1
 800123c:	2a01      	cmp	r2, #1
 800123e:	d100      	bne.n	8001242 <__aeabi_dadd+0x246>
 8001240:	e164      	b.n	800150c <__aeabi_dadd+0x510>
 8001242:	4d50      	ldr	r5, [pc, #320]	@ (8001384 <__aeabi_dadd+0x388>)
 8001244:	42aa      	cmp	r2, r5
 8001246:	d100      	bne.n	800124a <__aeabi_dadd+0x24e>
 8001248:	e16a      	b.n	8001520 <__aeabi_dadd+0x524>
 800124a:	2501      	movs	r5, #1
 800124c:	2938      	cmp	r1, #56	@ 0x38
 800124e:	dd00      	ble.n	8001252 <__aeabi_dadd+0x256>
 8001250:	e722      	b.n	8001098 <__aeabi_dadd+0x9c>
 8001252:	000a      	movs	r2, r1
 8001254:	e70e      	b.n	8001074 <__aeabi_dadd+0x78>
 8001256:	4a4d      	ldr	r2, [pc, #308]	@ (800138c <__aeabi_dadd+0x390>)
 8001258:	1c7d      	adds	r5, r7, #1
 800125a:	4215      	tst	r5, r2
 800125c:	d000      	beq.n	8001260 <__aeabi_dadd+0x264>
 800125e:	e0d0      	b.n	8001402 <__aeabi_dadd+0x406>
 8001260:	0025      	movs	r5, r4
 8001262:	4662      	mov	r2, ip
 8001264:	4653      	mov	r3, sl
 8001266:	4305      	orrs	r5, r0
 8001268:	431a      	orrs	r2, r3
 800126a:	2f00      	cmp	r7, #0
 800126c:	d000      	beq.n	8001270 <__aeabi_dadd+0x274>
 800126e:	e137      	b.n	80014e0 <__aeabi_dadd+0x4e4>
 8001270:	2d00      	cmp	r5, #0
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x27a>
 8001274:	e1a8      	b.n	80015c8 <__aeabi_dadd+0x5cc>
 8001276:	2a00      	cmp	r2, #0
 8001278:	d100      	bne.n	800127c <__aeabi_dadd+0x280>
 800127a:	e16a      	b.n	8001552 <__aeabi_dadd+0x556>
 800127c:	4663      	mov	r3, ip
 800127e:	1ac5      	subs	r5, r0, r3
 8001280:	4653      	mov	r3, sl
 8001282:	1ae2      	subs	r2, r4, r3
 8001284:	42a8      	cmp	r0, r5
 8001286:	419b      	sbcs	r3, r3
 8001288:	425b      	negs	r3, r3
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	021a      	lsls	r2, r3, #8
 800128e:	d400      	bmi.n	8001292 <__aeabi_dadd+0x296>
 8001290:	e203      	b.n	800169a <__aeabi_dadd+0x69e>
 8001292:	4663      	mov	r3, ip
 8001294:	1a1d      	subs	r5, r3, r0
 8001296:	45ac      	cmp	ip, r5
 8001298:	4192      	sbcs	r2, r2
 800129a:	4653      	mov	r3, sl
 800129c:	4252      	negs	r2, r2
 800129e:	1b1c      	subs	r4, r3, r4
 80012a0:	000e      	movs	r6, r1
 80012a2:	4688      	mov	r8, r1
 80012a4:	1aa4      	subs	r4, r4, r2
 80012a6:	e723      	b.n	80010f0 <__aeabi_dadd+0xf4>
 80012a8:	4936      	ldr	r1, [pc, #216]	@ (8001384 <__aeabi_dadd+0x388>)
 80012aa:	428f      	cmp	r7, r1
 80012ac:	d070      	beq.n	8001390 <__aeabi_dadd+0x394>
 80012ae:	2501      	movs	r5, #1
 80012b0:	2a38      	cmp	r2, #56	@ 0x38
 80012b2:	dca8      	bgt.n	8001206 <__aeabi_dadd+0x20a>
 80012b4:	2180      	movs	r1, #128	@ 0x80
 80012b6:	4653      	mov	r3, sl
 80012b8:	0409      	lsls	r1, r1, #16
 80012ba:	430b      	orrs	r3, r1
 80012bc:	469a      	mov	sl, r3
 80012be:	e78e      	b.n	80011de <__aeabi_dadd+0x1e2>
 80012c0:	003c      	movs	r4, r7
 80012c2:	2500      	movs	r5, #0
 80012c4:	2200      	movs	r2, #0
 80012c6:	e731      	b.n	800112c <__aeabi_dadd+0x130>
 80012c8:	2307      	movs	r3, #7
 80012ca:	402b      	ands	r3, r5
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d000      	beq.n	80012d2 <__aeabi_dadd+0x2d6>
 80012d0:	e710      	b.n	80010f4 <__aeabi_dadd+0xf8>
 80012d2:	e093      	b.n	80013fc <__aeabi_dadd+0x400>
 80012d4:	2a00      	cmp	r2, #0
 80012d6:	d074      	beq.n	80013c2 <__aeabi_dadd+0x3c6>
 80012d8:	464a      	mov	r2, r9
 80012da:	1bd2      	subs	r2, r2, r7
 80012dc:	2f00      	cmp	r7, #0
 80012de:	d100      	bne.n	80012e2 <__aeabi_dadd+0x2e6>
 80012e0:	e0c7      	b.n	8001472 <__aeabi_dadd+0x476>
 80012e2:	4928      	ldr	r1, [pc, #160]	@ (8001384 <__aeabi_dadd+0x388>)
 80012e4:	4589      	cmp	r9, r1
 80012e6:	d100      	bne.n	80012ea <__aeabi_dadd+0x2ee>
 80012e8:	e185      	b.n	80015f6 <__aeabi_dadd+0x5fa>
 80012ea:	2501      	movs	r5, #1
 80012ec:	2a38      	cmp	r2, #56	@ 0x38
 80012ee:	dc12      	bgt.n	8001316 <__aeabi_dadd+0x31a>
 80012f0:	2180      	movs	r1, #128	@ 0x80
 80012f2:	0409      	lsls	r1, r1, #16
 80012f4:	430c      	orrs	r4, r1
 80012f6:	2a1f      	cmp	r2, #31
 80012f8:	dd00      	ble.n	80012fc <__aeabi_dadd+0x300>
 80012fa:	e1ab      	b.n	8001654 <__aeabi_dadd+0x658>
 80012fc:	2120      	movs	r1, #32
 80012fe:	0025      	movs	r5, r4
 8001300:	1a89      	subs	r1, r1, r2
 8001302:	0007      	movs	r7, r0
 8001304:	4088      	lsls	r0, r1
 8001306:	408d      	lsls	r5, r1
 8001308:	40d7      	lsrs	r7, r2
 800130a:	1e41      	subs	r1, r0, #1
 800130c:	4188      	sbcs	r0, r1
 800130e:	40d4      	lsrs	r4, r2
 8001310:	433d      	orrs	r5, r7
 8001312:	4305      	orrs	r5, r0
 8001314:	44a2      	add	sl, r4
 8001316:	4465      	add	r5, ip
 8001318:	4565      	cmp	r5, ip
 800131a:	4192      	sbcs	r2, r2
 800131c:	4252      	negs	r2, r2
 800131e:	4452      	add	r2, sl
 8001320:	0014      	movs	r4, r2
 8001322:	464f      	mov	r7, r9
 8001324:	e774      	b.n	8001210 <__aeabi_dadd+0x214>
 8001326:	0028      	movs	r0, r5
 8001328:	f001 fdf0 	bl	8002f0c <__clzsi2>
 800132c:	0003      	movs	r3, r0
 800132e:	3318      	adds	r3, #24
 8001330:	2b1f      	cmp	r3, #31
 8001332:	dc00      	bgt.n	8001336 <__aeabi_dadd+0x33a>
 8001334:	e6c2      	b.n	80010bc <__aeabi_dadd+0xc0>
 8001336:	002a      	movs	r2, r5
 8001338:	3808      	subs	r0, #8
 800133a:	4082      	lsls	r2, r0
 800133c:	429f      	cmp	r7, r3
 800133e:	dd00      	ble.n	8001342 <__aeabi_dadd+0x346>
 8001340:	e0a9      	b.n	8001496 <__aeabi_dadd+0x49a>
 8001342:	1bdb      	subs	r3, r3, r7
 8001344:	1c58      	adds	r0, r3, #1
 8001346:	281f      	cmp	r0, #31
 8001348:	dc00      	bgt.n	800134c <__aeabi_dadd+0x350>
 800134a:	e1ac      	b.n	80016a6 <__aeabi_dadd+0x6aa>
 800134c:	0015      	movs	r5, r2
 800134e:	3b1f      	subs	r3, #31
 8001350:	40dd      	lsrs	r5, r3
 8001352:	2820      	cmp	r0, #32
 8001354:	d005      	beq.n	8001362 <__aeabi_dadd+0x366>
 8001356:	2340      	movs	r3, #64	@ 0x40
 8001358:	1a1b      	subs	r3, r3, r0
 800135a:	409a      	lsls	r2, r3
 800135c:	1e53      	subs	r3, r2, #1
 800135e:	419a      	sbcs	r2, r3
 8001360:	4315      	orrs	r5, r2
 8001362:	2307      	movs	r3, #7
 8001364:	2700      	movs	r7, #0
 8001366:	402b      	ands	r3, r5
 8001368:	e7b0      	b.n	80012cc <__aeabi_dadd+0x2d0>
 800136a:	08ed      	lsrs	r5, r5, #3
 800136c:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <__aeabi_dadd+0x388>)
 800136e:	0762      	lsls	r2, r4, #29
 8001370:	432a      	orrs	r2, r5
 8001372:	08e4      	lsrs	r4, r4, #3
 8001374:	429f      	cmp	r7, r3
 8001376:	d00f      	beq.n	8001398 <__aeabi_dadd+0x39c>
 8001378:	0324      	lsls	r4, r4, #12
 800137a:	0b25      	lsrs	r5, r4, #12
 800137c:	057c      	lsls	r4, r7, #21
 800137e:	0d64      	lsrs	r4, r4, #21
 8001380:	e6d4      	b.n	800112c <__aeabi_dadd+0x130>
 8001382:	46c0      	nop			@ (mov r8, r8)
 8001384:	000007ff 	.word	0x000007ff
 8001388:	ff7fffff 	.word	0xff7fffff
 800138c:	000007fe 	.word	0x000007fe
 8001390:	08c0      	lsrs	r0, r0, #3
 8001392:	0762      	lsls	r2, r4, #29
 8001394:	4302      	orrs	r2, r0
 8001396:	08e4      	lsrs	r4, r4, #3
 8001398:	0013      	movs	r3, r2
 800139a:	4323      	orrs	r3, r4
 800139c:	d100      	bne.n	80013a0 <__aeabi_dadd+0x3a4>
 800139e:	e186      	b.n	80016ae <__aeabi_dadd+0x6b2>
 80013a0:	2580      	movs	r5, #128	@ 0x80
 80013a2:	032d      	lsls	r5, r5, #12
 80013a4:	4325      	orrs	r5, r4
 80013a6:	032d      	lsls	r5, r5, #12
 80013a8:	4cc3      	ldr	r4, [pc, #780]	@ (80016b8 <__aeabi_dadd+0x6bc>)
 80013aa:	0b2d      	lsrs	r5, r5, #12
 80013ac:	e6be      	b.n	800112c <__aeabi_dadd+0x130>
 80013ae:	4660      	mov	r0, ip
 80013b0:	4654      	mov	r4, sl
 80013b2:	000e      	movs	r6, r1
 80013b4:	0017      	movs	r7, r2
 80013b6:	08c5      	lsrs	r5, r0, #3
 80013b8:	e7d8      	b.n	800136c <__aeabi_dadd+0x370>
 80013ba:	4cc0      	ldr	r4, [pc, #768]	@ (80016bc <__aeabi_dadd+0x6c0>)
 80013bc:	1aff      	subs	r7, r7, r3
 80013be:	4014      	ands	r4, r2
 80013c0:	e696      	b.n	80010f0 <__aeabi_dadd+0xf4>
 80013c2:	4abf      	ldr	r2, [pc, #764]	@ (80016c0 <__aeabi_dadd+0x6c4>)
 80013c4:	1c79      	adds	r1, r7, #1
 80013c6:	4211      	tst	r1, r2
 80013c8:	d16b      	bne.n	80014a2 <__aeabi_dadd+0x4a6>
 80013ca:	0022      	movs	r2, r4
 80013cc:	4302      	orrs	r2, r0
 80013ce:	2f00      	cmp	r7, #0
 80013d0:	d000      	beq.n	80013d4 <__aeabi_dadd+0x3d8>
 80013d2:	e0db      	b.n	800158c <__aeabi_dadd+0x590>
 80013d4:	2a00      	cmp	r2, #0
 80013d6:	d100      	bne.n	80013da <__aeabi_dadd+0x3de>
 80013d8:	e12d      	b.n	8001636 <__aeabi_dadd+0x63a>
 80013da:	4662      	mov	r2, ip
 80013dc:	4653      	mov	r3, sl
 80013de:	431a      	orrs	r2, r3
 80013e0:	d100      	bne.n	80013e4 <__aeabi_dadd+0x3e8>
 80013e2:	e0b6      	b.n	8001552 <__aeabi_dadd+0x556>
 80013e4:	4663      	mov	r3, ip
 80013e6:	18c5      	adds	r5, r0, r3
 80013e8:	4285      	cmp	r5, r0
 80013ea:	4180      	sbcs	r0, r0
 80013ec:	4454      	add	r4, sl
 80013ee:	4240      	negs	r0, r0
 80013f0:	1824      	adds	r4, r4, r0
 80013f2:	0223      	lsls	r3, r4, #8
 80013f4:	d502      	bpl.n	80013fc <__aeabi_dadd+0x400>
 80013f6:	000f      	movs	r7, r1
 80013f8:	4bb0      	ldr	r3, [pc, #704]	@ (80016bc <__aeabi_dadd+0x6c0>)
 80013fa:	401c      	ands	r4, r3
 80013fc:	003a      	movs	r2, r7
 80013fe:	0028      	movs	r0, r5
 8001400:	e7d8      	b.n	80013b4 <__aeabi_dadd+0x3b8>
 8001402:	4662      	mov	r2, ip
 8001404:	1a85      	subs	r5, r0, r2
 8001406:	42a8      	cmp	r0, r5
 8001408:	4192      	sbcs	r2, r2
 800140a:	4653      	mov	r3, sl
 800140c:	4252      	negs	r2, r2
 800140e:	4691      	mov	r9, r2
 8001410:	1ae3      	subs	r3, r4, r3
 8001412:	001a      	movs	r2, r3
 8001414:	464b      	mov	r3, r9
 8001416:	1ad2      	subs	r2, r2, r3
 8001418:	0013      	movs	r3, r2
 800141a:	4691      	mov	r9, r2
 800141c:	021a      	lsls	r2, r3, #8
 800141e:	d454      	bmi.n	80014ca <__aeabi_dadd+0x4ce>
 8001420:	464a      	mov	r2, r9
 8001422:	464c      	mov	r4, r9
 8001424:	432a      	orrs	r2, r5
 8001426:	d000      	beq.n	800142a <__aeabi_dadd+0x42e>
 8001428:	e640      	b.n	80010ac <__aeabi_dadd+0xb0>
 800142a:	2600      	movs	r6, #0
 800142c:	2400      	movs	r4, #0
 800142e:	2500      	movs	r5, #0
 8001430:	e67c      	b.n	800112c <__aeabi_dadd+0x130>
 8001432:	4da1      	ldr	r5, [pc, #644]	@ (80016b8 <__aeabi_dadd+0x6bc>)
 8001434:	45a9      	cmp	r9, r5
 8001436:	d100      	bne.n	800143a <__aeabi_dadd+0x43e>
 8001438:	e090      	b.n	800155c <__aeabi_dadd+0x560>
 800143a:	2501      	movs	r5, #1
 800143c:	2a38      	cmp	r2, #56	@ 0x38
 800143e:	dd00      	ble.n	8001442 <__aeabi_dadd+0x446>
 8001440:	e6ab      	b.n	800119a <__aeabi_dadd+0x19e>
 8001442:	2580      	movs	r5, #128	@ 0x80
 8001444:	042d      	lsls	r5, r5, #16
 8001446:	432c      	orrs	r4, r5
 8001448:	e695      	b.n	8001176 <__aeabi_dadd+0x17a>
 800144a:	0011      	movs	r1, r2
 800144c:	4655      	mov	r5, sl
 800144e:	3920      	subs	r1, #32
 8001450:	40cd      	lsrs	r5, r1
 8001452:	46a9      	mov	r9, r5
 8001454:	2a20      	cmp	r2, #32
 8001456:	d006      	beq.n	8001466 <__aeabi_dadd+0x46a>
 8001458:	2140      	movs	r1, #64	@ 0x40
 800145a:	4653      	mov	r3, sl
 800145c:	1a8a      	subs	r2, r1, r2
 800145e:	4093      	lsls	r3, r2
 8001460:	4662      	mov	r2, ip
 8001462:	431a      	orrs	r2, r3
 8001464:	4694      	mov	ip, r2
 8001466:	4665      	mov	r5, ip
 8001468:	1e6b      	subs	r3, r5, #1
 800146a:	419d      	sbcs	r5, r3
 800146c:	464b      	mov	r3, r9
 800146e:	431d      	orrs	r5, r3
 8001470:	e612      	b.n	8001098 <__aeabi_dadd+0x9c>
 8001472:	0021      	movs	r1, r4
 8001474:	4301      	orrs	r1, r0
 8001476:	d100      	bne.n	800147a <__aeabi_dadd+0x47e>
 8001478:	e0c4      	b.n	8001604 <__aeabi_dadd+0x608>
 800147a:	1e51      	subs	r1, r2, #1
 800147c:	2a01      	cmp	r2, #1
 800147e:	d100      	bne.n	8001482 <__aeabi_dadd+0x486>
 8001480:	e0fb      	b.n	800167a <__aeabi_dadd+0x67e>
 8001482:	4d8d      	ldr	r5, [pc, #564]	@ (80016b8 <__aeabi_dadd+0x6bc>)
 8001484:	42aa      	cmp	r2, r5
 8001486:	d100      	bne.n	800148a <__aeabi_dadd+0x48e>
 8001488:	e0b5      	b.n	80015f6 <__aeabi_dadd+0x5fa>
 800148a:	2501      	movs	r5, #1
 800148c:	2938      	cmp	r1, #56	@ 0x38
 800148e:	dd00      	ble.n	8001492 <__aeabi_dadd+0x496>
 8001490:	e741      	b.n	8001316 <__aeabi_dadd+0x31a>
 8001492:	000a      	movs	r2, r1
 8001494:	e72f      	b.n	80012f6 <__aeabi_dadd+0x2fa>
 8001496:	4c89      	ldr	r4, [pc, #548]	@ (80016bc <__aeabi_dadd+0x6c0>)
 8001498:	1aff      	subs	r7, r7, r3
 800149a:	4014      	ands	r4, r2
 800149c:	0762      	lsls	r2, r4, #29
 800149e:	08e4      	lsrs	r4, r4, #3
 80014a0:	e76a      	b.n	8001378 <__aeabi_dadd+0x37c>
 80014a2:	4a85      	ldr	r2, [pc, #532]	@ (80016b8 <__aeabi_dadd+0x6bc>)
 80014a4:	4291      	cmp	r1, r2
 80014a6:	d100      	bne.n	80014aa <__aeabi_dadd+0x4ae>
 80014a8:	e0e3      	b.n	8001672 <__aeabi_dadd+0x676>
 80014aa:	4663      	mov	r3, ip
 80014ac:	18c2      	adds	r2, r0, r3
 80014ae:	4282      	cmp	r2, r0
 80014b0:	4180      	sbcs	r0, r0
 80014b2:	0023      	movs	r3, r4
 80014b4:	4240      	negs	r0, r0
 80014b6:	4453      	add	r3, sl
 80014b8:	181b      	adds	r3, r3, r0
 80014ba:	07dd      	lsls	r5, r3, #31
 80014bc:	085c      	lsrs	r4, r3, #1
 80014be:	2307      	movs	r3, #7
 80014c0:	0852      	lsrs	r2, r2, #1
 80014c2:	4315      	orrs	r5, r2
 80014c4:	000f      	movs	r7, r1
 80014c6:	402b      	ands	r3, r5
 80014c8:	e700      	b.n	80012cc <__aeabi_dadd+0x2d0>
 80014ca:	4663      	mov	r3, ip
 80014cc:	1a1d      	subs	r5, r3, r0
 80014ce:	45ac      	cmp	ip, r5
 80014d0:	4192      	sbcs	r2, r2
 80014d2:	4653      	mov	r3, sl
 80014d4:	4252      	negs	r2, r2
 80014d6:	1b1c      	subs	r4, r3, r4
 80014d8:	000e      	movs	r6, r1
 80014da:	4688      	mov	r8, r1
 80014dc:	1aa4      	subs	r4, r4, r2
 80014de:	e5e5      	b.n	80010ac <__aeabi_dadd+0xb0>
 80014e0:	2d00      	cmp	r5, #0
 80014e2:	d000      	beq.n	80014e6 <__aeabi_dadd+0x4ea>
 80014e4:	e091      	b.n	800160a <__aeabi_dadd+0x60e>
 80014e6:	2a00      	cmp	r2, #0
 80014e8:	d138      	bne.n	800155c <__aeabi_dadd+0x560>
 80014ea:	2480      	movs	r4, #128	@ 0x80
 80014ec:	2600      	movs	r6, #0
 80014ee:	0324      	lsls	r4, r4, #12
 80014f0:	e756      	b.n	80013a0 <__aeabi_dadd+0x3a4>
 80014f2:	4663      	mov	r3, ip
 80014f4:	18c5      	adds	r5, r0, r3
 80014f6:	4285      	cmp	r5, r0
 80014f8:	4180      	sbcs	r0, r0
 80014fa:	4454      	add	r4, sl
 80014fc:	4240      	negs	r0, r0
 80014fe:	1824      	adds	r4, r4, r0
 8001500:	2701      	movs	r7, #1
 8001502:	0223      	lsls	r3, r4, #8
 8001504:	d400      	bmi.n	8001508 <__aeabi_dadd+0x50c>
 8001506:	e6df      	b.n	80012c8 <__aeabi_dadd+0x2cc>
 8001508:	2702      	movs	r7, #2
 800150a:	e687      	b.n	800121c <__aeabi_dadd+0x220>
 800150c:	4663      	mov	r3, ip
 800150e:	1ac5      	subs	r5, r0, r3
 8001510:	42a8      	cmp	r0, r5
 8001512:	4180      	sbcs	r0, r0
 8001514:	4653      	mov	r3, sl
 8001516:	4240      	negs	r0, r0
 8001518:	1ae4      	subs	r4, r4, r3
 800151a:	2701      	movs	r7, #1
 800151c:	1a24      	subs	r4, r4, r0
 800151e:	e5c0      	b.n	80010a2 <__aeabi_dadd+0xa6>
 8001520:	0762      	lsls	r2, r4, #29
 8001522:	08c0      	lsrs	r0, r0, #3
 8001524:	4302      	orrs	r2, r0
 8001526:	08e4      	lsrs	r4, r4, #3
 8001528:	e736      	b.n	8001398 <__aeabi_dadd+0x39c>
 800152a:	0011      	movs	r1, r2
 800152c:	4653      	mov	r3, sl
 800152e:	3920      	subs	r1, #32
 8001530:	40cb      	lsrs	r3, r1
 8001532:	4699      	mov	r9, r3
 8001534:	2a20      	cmp	r2, #32
 8001536:	d006      	beq.n	8001546 <__aeabi_dadd+0x54a>
 8001538:	2140      	movs	r1, #64	@ 0x40
 800153a:	4653      	mov	r3, sl
 800153c:	1a8a      	subs	r2, r1, r2
 800153e:	4093      	lsls	r3, r2
 8001540:	4662      	mov	r2, ip
 8001542:	431a      	orrs	r2, r3
 8001544:	4694      	mov	ip, r2
 8001546:	4665      	mov	r5, ip
 8001548:	1e6b      	subs	r3, r5, #1
 800154a:	419d      	sbcs	r5, r3
 800154c:	464b      	mov	r3, r9
 800154e:	431d      	orrs	r5, r3
 8001550:	e659      	b.n	8001206 <__aeabi_dadd+0x20a>
 8001552:	0762      	lsls	r2, r4, #29
 8001554:	08c0      	lsrs	r0, r0, #3
 8001556:	4302      	orrs	r2, r0
 8001558:	08e4      	lsrs	r4, r4, #3
 800155a:	e70d      	b.n	8001378 <__aeabi_dadd+0x37c>
 800155c:	4653      	mov	r3, sl
 800155e:	075a      	lsls	r2, r3, #29
 8001560:	4663      	mov	r3, ip
 8001562:	08d8      	lsrs	r0, r3, #3
 8001564:	4653      	mov	r3, sl
 8001566:	000e      	movs	r6, r1
 8001568:	4302      	orrs	r2, r0
 800156a:	08dc      	lsrs	r4, r3, #3
 800156c:	e714      	b.n	8001398 <__aeabi_dadd+0x39c>
 800156e:	0015      	movs	r5, r2
 8001570:	0026      	movs	r6, r4
 8001572:	3d20      	subs	r5, #32
 8001574:	40ee      	lsrs	r6, r5
 8001576:	2a20      	cmp	r2, #32
 8001578:	d003      	beq.n	8001582 <__aeabi_dadd+0x586>
 800157a:	2540      	movs	r5, #64	@ 0x40
 800157c:	1aaa      	subs	r2, r5, r2
 800157e:	4094      	lsls	r4, r2
 8001580:	4320      	orrs	r0, r4
 8001582:	1e42      	subs	r2, r0, #1
 8001584:	4190      	sbcs	r0, r2
 8001586:	0005      	movs	r5, r0
 8001588:	4335      	orrs	r5, r6
 800158a:	e606      	b.n	800119a <__aeabi_dadd+0x19e>
 800158c:	2a00      	cmp	r2, #0
 800158e:	d07c      	beq.n	800168a <__aeabi_dadd+0x68e>
 8001590:	4662      	mov	r2, ip
 8001592:	4653      	mov	r3, sl
 8001594:	08c0      	lsrs	r0, r0, #3
 8001596:	431a      	orrs	r2, r3
 8001598:	d100      	bne.n	800159c <__aeabi_dadd+0x5a0>
 800159a:	e6fa      	b.n	8001392 <__aeabi_dadd+0x396>
 800159c:	0762      	lsls	r2, r4, #29
 800159e:	4310      	orrs	r0, r2
 80015a0:	2280      	movs	r2, #128	@ 0x80
 80015a2:	08e4      	lsrs	r4, r4, #3
 80015a4:	0312      	lsls	r2, r2, #12
 80015a6:	4214      	tst	r4, r2
 80015a8:	d008      	beq.n	80015bc <__aeabi_dadd+0x5c0>
 80015aa:	08d9      	lsrs	r1, r3, #3
 80015ac:	4211      	tst	r1, r2
 80015ae:	d105      	bne.n	80015bc <__aeabi_dadd+0x5c0>
 80015b0:	4663      	mov	r3, ip
 80015b2:	08d8      	lsrs	r0, r3, #3
 80015b4:	4653      	mov	r3, sl
 80015b6:	000c      	movs	r4, r1
 80015b8:	075b      	lsls	r3, r3, #29
 80015ba:	4318      	orrs	r0, r3
 80015bc:	0f42      	lsrs	r2, r0, #29
 80015be:	00c0      	lsls	r0, r0, #3
 80015c0:	08c0      	lsrs	r0, r0, #3
 80015c2:	0752      	lsls	r2, r2, #29
 80015c4:	4302      	orrs	r2, r0
 80015c6:	e6e7      	b.n	8001398 <__aeabi_dadd+0x39c>
 80015c8:	2a00      	cmp	r2, #0
 80015ca:	d100      	bne.n	80015ce <__aeabi_dadd+0x5d2>
 80015cc:	e72d      	b.n	800142a <__aeabi_dadd+0x42e>
 80015ce:	4663      	mov	r3, ip
 80015d0:	08d8      	lsrs	r0, r3, #3
 80015d2:	4653      	mov	r3, sl
 80015d4:	075a      	lsls	r2, r3, #29
 80015d6:	000e      	movs	r6, r1
 80015d8:	4302      	orrs	r2, r0
 80015da:	08dc      	lsrs	r4, r3, #3
 80015dc:	e6cc      	b.n	8001378 <__aeabi_dadd+0x37c>
 80015de:	4663      	mov	r3, ip
 80015e0:	1a1d      	subs	r5, r3, r0
 80015e2:	45ac      	cmp	ip, r5
 80015e4:	4192      	sbcs	r2, r2
 80015e6:	4653      	mov	r3, sl
 80015e8:	4252      	negs	r2, r2
 80015ea:	1b1c      	subs	r4, r3, r4
 80015ec:	000e      	movs	r6, r1
 80015ee:	4688      	mov	r8, r1
 80015f0:	1aa4      	subs	r4, r4, r2
 80015f2:	3701      	adds	r7, #1
 80015f4:	e555      	b.n	80010a2 <__aeabi_dadd+0xa6>
 80015f6:	4663      	mov	r3, ip
 80015f8:	08d9      	lsrs	r1, r3, #3
 80015fa:	4653      	mov	r3, sl
 80015fc:	075a      	lsls	r2, r3, #29
 80015fe:	430a      	orrs	r2, r1
 8001600:	08dc      	lsrs	r4, r3, #3
 8001602:	e6c9      	b.n	8001398 <__aeabi_dadd+0x39c>
 8001604:	4660      	mov	r0, ip
 8001606:	4654      	mov	r4, sl
 8001608:	e6d4      	b.n	80013b4 <__aeabi_dadd+0x3b8>
 800160a:	08c0      	lsrs	r0, r0, #3
 800160c:	2a00      	cmp	r2, #0
 800160e:	d100      	bne.n	8001612 <__aeabi_dadd+0x616>
 8001610:	e6bf      	b.n	8001392 <__aeabi_dadd+0x396>
 8001612:	0762      	lsls	r2, r4, #29
 8001614:	4310      	orrs	r0, r2
 8001616:	2280      	movs	r2, #128	@ 0x80
 8001618:	08e4      	lsrs	r4, r4, #3
 800161a:	0312      	lsls	r2, r2, #12
 800161c:	4214      	tst	r4, r2
 800161e:	d0cd      	beq.n	80015bc <__aeabi_dadd+0x5c0>
 8001620:	08dd      	lsrs	r5, r3, #3
 8001622:	4215      	tst	r5, r2
 8001624:	d1ca      	bne.n	80015bc <__aeabi_dadd+0x5c0>
 8001626:	4663      	mov	r3, ip
 8001628:	08d8      	lsrs	r0, r3, #3
 800162a:	4653      	mov	r3, sl
 800162c:	075b      	lsls	r3, r3, #29
 800162e:	000e      	movs	r6, r1
 8001630:	002c      	movs	r4, r5
 8001632:	4318      	orrs	r0, r3
 8001634:	e7c2      	b.n	80015bc <__aeabi_dadd+0x5c0>
 8001636:	4663      	mov	r3, ip
 8001638:	08d9      	lsrs	r1, r3, #3
 800163a:	4653      	mov	r3, sl
 800163c:	075a      	lsls	r2, r3, #29
 800163e:	430a      	orrs	r2, r1
 8001640:	08dc      	lsrs	r4, r3, #3
 8001642:	e699      	b.n	8001378 <__aeabi_dadd+0x37c>
 8001644:	4663      	mov	r3, ip
 8001646:	08d8      	lsrs	r0, r3, #3
 8001648:	4653      	mov	r3, sl
 800164a:	075a      	lsls	r2, r3, #29
 800164c:	000e      	movs	r6, r1
 800164e:	4302      	orrs	r2, r0
 8001650:	08dc      	lsrs	r4, r3, #3
 8001652:	e6a1      	b.n	8001398 <__aeabi_dadd+0x39c>
 8001654:	0011      	movs	r1, r2
 8001656:	0027      	movs	r7, r4
 8001658:	3920      	subs	r1, #32
 800165a:	40cf      	lsrs	r7, r1
 800165c:	2a20      	cmp	r2, #32
 800165e:	d003      	beq.n	8001668 <__aeabi_dadd+0x66c>
 8001660:	2140      	movs	r1, #64	@ 0x40
 8001662:	1a8a      	subs	r2, r1, r2
 8001664:	4094      	lsls	r4, r2
 8001666:	4320      	orrs	r0, r4
 8001668:	1e42      	subs	r2, r0, #1
 800166a:	4190      	sbcs	r0, r2
 800166c:	0005      	movs	r5, r0
 800166e:	433d      	orrs	r5, r7
 8001670:	e651      	b.n	8001316 <__aeabi_dadd+0x31a>
 8001672:	000c      	movs	r4, r1
 8001674:	2500      	movs	r5, #0
 8001676:	2200      	movs	r2, #0
 8001678:	e558      	b.n	800112c <__aeabi_dadd+0x130>
 800167a:	4460      	add	r0, ip
 800167c:	4560      	cmp	r0, ip
 800167e:	4192      	sbcs	r2, r2
 8001680:	4454      	add	r4, sl
 8001682:	4252      	negs	r2, r2
 8001684:	0005      	movs	r5, r0
 8001686:	18a4      	adds	r4, r4, r2
 8001688:	e73a      	b.n	8001500 <__aeabi_dadd+0x504>
 800168a:	4653      	mov	r3, sl
 800168c:	075a      	lsls	r2, r3, #29
 800168e:	4663      	mov	r3, ip
 8001690:	08d9      	lsrs	r1, r3, #3
 8001692:	4653      	mov	r3, sl
 8001694:	430a      	orrs	r2, r1
 8001696:	08dc      	lsrs	r4, r3, #3
 8001698:	e67e      	b.n	8001398 <__aeabi_dadd+0x39c>
 800169a:	001a      	movs	r2, r3
 800169c:	001c      	movs	r4, r3
 800169e:	432a      	orrs	r2, r5
 80016a0:	d000      	beq.n	80016a4 <__aeabi_dadd+0x6a8>
 80016a2:	e6ab      	b.n	80013fc <__aeabi_dadd+0x400>
 80016a4:	e6c1      	b.n	800142a <__aeabi_dadd+0x42e>
 80016a6:	2120      	movs	r1, #32
 80016a8:	2500      	movs	r5, #0
 80016aa:	1a09      	subs	r1, r1, r0
 80016ac:	e519      	b.n	80010e2 <__aeabi_dadd+0xe6>
 80016ae:	2200      	movs	r2, #0
 80016b0:	2500      	movs	r5, #0
 80016b2:	4c01      	ldr	r4, [pc, #4]	@ (80016b8 <__aeabi_dadd+0x6bc>)
 80016b4:	e53a      	b.n	800112c <__aeabi_dadd+0x130>
 80016b6:	46c0      	nop			@ (mov r8, r8)
 80016b8:	000007ff 	.word	0x000007ff
 80016bc:	ff7fffff 	.word	0xff7fffff
 80016c0:	000007fe 	.word	0x000007fe

080016c4 <__aeabi_ddiv>:
 80016c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c6:	46de      	mov	lr, fp
 80016c8:	4645      	mov	r5, r8
 80016ca:	4657      	mov	r7, sl
 80016cc:	464e      	mov	r6, r9
 80016ce:	b5e0      	push	{r5, r6, r7, lr}
 80016d0:	b087      	sub	sp, #28
 80016d2:	9200      	str	r2, [sp, #0]
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	030b      	lsls	r3, r1, #12
 80016d8:	0b1b      	lsrs	r3, r3, #12
 80016da:	469b      	mov	fp, r3
 80016dc:	0fca      	lsrs	r2, r1, #31
 80016de:	004b      	lsls	r3, r1, #1
 80016e0:	0004      	movs	r4, r0
 80016e2:	4680      	mov	r8, r0
 80016e4:	0d5b      	lsrs	r3, r3, #21
 80016e6:	9202      	str	r2, [sp, #8]
 80016e8:	d100      	bne.n	80016ec <__aeabi_ddiv+0x28>
 80016ea:	e16a      	b.n	80019c2 <__aeabi_ddiv+0x2fe>
 80016ec:	4ad4      	ldr	r2, [pc, #848]	@ (8001a40 <__aeabi_ddiv+0x37c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d100      	bne.n	80016f4 <__aeabi_ddiv+0x30>
 80016f2:	e18c      	b.n	8001a0e <__aeabi_ddiv+0x34a>
 80016f4:	4659      	mov	r1, fp
 80016f6:	0f42      	lsrs	r2, r0, #29
 80016f8:	00c9      	lsls	r1, r1, #3
 80016fa:	430a      	orrs	r2, r1
 80016fc:	2180      	movs	r1, #128	@ 0x80
 80016fe:	0409      	lsls	r1, r1, #16
 8001700:	4311      	orrs	r1, r2
 8001702:	00c2      	lsls	r2, r0, #3
 8001704:	4690      	mov	r8, r2
 8001706:	4acf      	ldr	r2, [pc, #828]	@ (8001a44 <__aeabi_ddiv+0x380>)
 8001708:	4689      	mov	r9, r1
 800170a:	4692      	mov	sl, r2
 800170c:	449a      	add	sl, r3
 800170e:	2300      	movs	r3, #0
 8001710:	2400      	movs	r4, #0
 8001712:	9303      	str	r3, [sp, #12]
 8001714:	9e00      	ldr	r6, [sp, #0]
 8001716:	9f01      	ldr	r7, [sp, #4]
 8001718:	033b      	lsls	r3, r7, #12
 800171a:	0b1b      	lsrs	r3, r3, #12
 800171c:	469b      	mov	fp, r3
 800171e:	007b      	lsls	r3, r7, #1
 8001720:	0030      	movs	r0, r6
 8001722:	0d5b      	lsrs	r3, r3, #21
 8001724:	0ffd      	lsrs	r5, r7, #31
 8001726:	2b00      	cmp	r3, #0
 8001728:	d100      	bne.n	800172c <__aeabi_ddiv+0x68>
 800172a:	e128      	b.n	800197e <__aeabi_ddiv+0x2ba>
 800172c:	4ac4      	ldr	r2, [pc, #784]	@ (8001a40 <__aeabi_ddiv+0x37c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d100      	bne.n	8001734 <__aeabi_ddiv+0x70>
 8001732:	e177      	b.n	8001a24 <__aeabi_ddiv+0x360>
 8001734:	4659      	mov	r1, fp
 8001736:	0f72      	lsrs	r2, r6, #29
 8001738:	00c9      	lsls	r1, r1, #3
 800173a:	430a      	orrs	r2, r1
 800173c:	2180      	movs	r1, #128	@ 0x80
 800173e:	0409      	lsls	r1, r1, #16
 8001740:	4311      	orrs	r1, r2
 8001742:	468b      	mov	fp, r1
 8001744:	49bf      	ldr	r1, [pc, #764]	@ (8001a44 <__aeabi_ddiv+0x380>)
 8001746:	00f2      	lsls	r2, r6, #3
 8001748:	468c      	mov	ip, r1
 800174a:	4651      	mov	r1, sl
 800174c:	4463      	add	r3, ip
 800174e:	1acb      	subs	r3, r1, r3
 8001750:	469a      	mov	sl, r3
 8001752:	2300      	movs	r3, #0
 8001754:	9e02      	ldr	r6, [sp, #8]
 8001756:	406e      	eors	r6, r5
 8001758:	2c0f      	cmp	r4, #15
 800175a:	d827      	bhi.n	80017ac <__aeabi_ddiv+0xe8>
 800175c:	49ba      	ldr	r1, [pc, #744]	@ (8001a48 <__aeabi_ddiv+0x384>)
 800175e:	00a4      	lsls	r4, r4, #2
 8001760:	5909      	ldr	r1, [r1, r4]
 8001762:	468f      	mov	pc, r1
 8001764:	46cb      	mov	fp, r9
 8001766:	4642      	mov	r2, r8
 8001768:	9e02      	ldr	r6, [sp, #8]
 800176a:	9b03      	ldr	r3, [sp, #12]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d016      	beq.n	800179e <__aeabi_ddiv+0xda>
 8001770:	2b03      	cmp	r3, #3
 8001772:	d100      	bne.n	8001776 <__aeabi_ddiv+0xb2>
 8001774:	e2a6      	b.n	8001cc4 <__aeabi_ddiv+0x600>
 8001776:	2b01      	cmp	r3, #1
 8001778:	d000      	beq.n	800177c <__aeabi_ddiv+0xb8>
 800177a:	e0df      	b.n	800193c <__aeabi_ddiv+0x278>
 800177c:	2200      	movs	r2, #0
 800177e:	2300      	movs	r3, #0
 8001780:	2400      	movs	r4, #0
 8001782:	4690      	mov	r8, r2
 8001784:	051b      	lsls	r3, r3, #20
 8001786:	4323      	orrs	r3, r4
 8001788:	07f6      	lsls	r6, r6, #31
 800178a:	4333      	orrs	r3, r6
 800178c:	4640      	mov	r0, r8
 800178e:	0019      	movs	r1, r3
 8001790:	b007      	add	sp, #28
 8001792:	bcf0      	pop	{r4, r5, r6, r7}
 8001794:	46bb      	mov	fp, r7
 8001796:	46b2      	mov	sl, r6
 8001798:	46a9      	mov	r9, r5
 800179a:	46a0      	mov	r8, r4
 800179c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800179e:	2200      	movs	r2, #0
 80017a0:	2400      	movs	r4, #0
 80017a2:	4690      	mov	r8, r2
 80017a4:	4ba6      	ldr	r3, [pc, #664]	@ (8001a40 <__aeabi_ddiv+0x37c>)
 80017a6:	e7ed      	b.n	8001784 <__aeabi_ddiv+0xc0>
 80017a8:	002e      	movs	r6, r5
 80017aa:	e7df      	b.n	800176c <__aeabi_ddiv+0xa8>
 80017ac:	45cb      	cmp	fp, r9
 80017ae:	d200      	bcs.n	80017b2 <__aeabi_ddiv+0xee>
 80017b0:	e1d4      	b.n	8001b5c <__aeabi_ddiv+0x498>
 80017b2:	d100      	bne.n	80017b6 <__aeabi_ddiv+0xf2>
 80017b4:	e1cf      	b.n	8001b56 <__aeabi_ddiv+0x492>
 80017b6:	2301      	movs	r3, #1
 80017b8:	425b      	negs	r3, r3
 80017ba:	469c      	mov	ip, r3
 80017bc:	4644      	mov	r4, r8
 80017be:	4648      	mov	r0, r9
 80017c0:	2700      	movs	r7, #0
 80017c2:	44e2      	add	sl, ip
 80017c4:	465b      	mov	r3, fp
 80017c6:	0e15      	lsrs	r5, r2, #24
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	431d      	orrs	r5, r3
 80017cc:	0c19      	lsrs	r1, r3, #16
 80017ce:	042b      	lsls	r3, r5, #16
 80017d0:	0212      	lsls	r2, r2, #8
 80017d2:	9500      	str	r5, [sp, #0]
 80017d4:	0c1d      	lsrs	r5, r3, #16
 80017d6:	4691      	mov	r9, r2
 80017d8:	9102      	str	r1, [sp, #8]
 80017da:	9503      	str	r5, [sp, #12]
 80017dc:	f7fe fd36 	bl	800024c <__aeabi_uidivmod>
 80017e0:	0002      	movs	r2, r0
 80017e2:	436a      	muls	r2, r5
 80017e4:	040b      	lsls	r3, r1, #16
 80017e6:	0c21      	lsrs	r1, r4, #16
 80017e8:	4680      	mov	r8, r0
 80017ea:	4319      	orrs	r1, r3
 80017ec:	428a      	cmp	r2, r1
 80017ee:	d909      	bls.n	8001804 <__aeabi_ddiv+0x140>
 80017f0:	9d00      	ldr	r5, [sp, #0]
 80017f2:	2301      	movs	r3, #1
 80017f4:	46ac      	mov	ip, r5
 80017f6:	425b      	negs	r3, r3
 80017f8:	4461      	add	r1, ip
 80017fa:	469c      	mov	ip, r3
 80017fc:	44e0      	add	r8, ip
 80017fe:	428d      	cmp	r5, r1
 8001800:	d800      	bhi.n	8001804 <__aeabi_ddiv+0x140>
 8001802:	e1fb      	b.n	8001bfc <__aeabi_ddiv+0x538>
 8001804:	1a88      	subs	r0, r1, r2
 8001806:	9902      	ldr	r1, [sp, #8]
 8001808:	f7fe fd20 	bl	800024c <__aeabi_uidivmod>
 800180c:	9a03      	ldr	r2, [sp, #12]
 800180e:	0424      	lsls	r4, r4, #16
 8001810:	4342      	muls	r2, r0
 8001812:	0409      	lsls	r1, r1, #16
 8001814:	0c24      	lsrs	r4, r4, #16
 8001816:	0003      	movs	r3, r0
 8001818:	430c      	orrs	r4, r1
 800181a:	42a2      	cmp	r2, r4
 800181c:	d906      	bls.n	800182c <__aeabi_ddiv+0x168>
 800181e:	9900      	ldr	r1, [sp, #0]
 8001820:	3b01      	subs	r3, #1
 8001822:	468c      	mov	ip, r1
 8001824:	4464      	add	r4, ip
 8001826:	42a1      	cmp	r1, r4
 8001828:	d800      	bhi.n	800182c <__aeabi_ddiv+0x168>
 800182a:	e1e1      	b.n	8001bf0 <__aeabi_ddiv+0x52c>
 800182c:	1aa0      	subs	r0, r4, r2
 800182e:	4642      	mov	r2, r8
 8001830:	0412      	lsls	r2, r2, #16
 8001832:	431a      	orrs	r2, r3
 8001834:	4693      	mov	fp, r2
 8001836:	464b      	mov	r3, r9
 8001838:	4659      	mov	r1, fp
 800183a:	0c1b      	lsrs	r3, r3, #16
 800183c:	001d      	movs	r5, r3
 800183e:	9304      	str	r3, [sp, #16]
 8001840:	040b      	lsls	r3, r1, #16
 8001842:	4649      	mov	r1, r9
 8001844:	0409      	lsls	r1, r1, #16
 8001846:	0c09      	lsrs	r1, r1, #16
 8001848:	000c      	movs	r4, r1
 800184a:	0c1b      	lsrs	r3, r3, #16
 800184c:	435c      	muls	r4, r3
 800184e:	0c12      	lsrs	r2, r2, #16
 8001850:	436b      	muls	r3, r5
 8001852:	4688      	mov	r8, r1
 8001854:	4351      	muls	r1, r2
 8001856:	436a      	muls	r2, r5
 8001858:	0c25      	lsrs	r5, r4, #16
 800185a:	46ac      	mov	ip, r5
 800185c:	185b      	adds	r3, r3, r1
 800185e:	4463      	add	r3, ip
 8001860:	4299      	cmp	r1, r3
 8001862:	d903      	bls.n	800186c <__aeabi_ddiv+0x1a8>
 8001864:	2180      	movs	r1, #128	@ 0x80
 8001866:	0249      	lsls	r1, r1, #9
 8001868:	468c      	mov	ip, r1
 800186a:	4462      	add	r2, ip
 800186c:	0c19      	lsrs	r1, r3, #16
 800186e:	0424      	lsls	r4, r4, #16
 8001870:	041b      	lsls	r3, r3, #16
 8001872:	0c24      	lsrs	r4, r4, #16
 8001874:	188a      	adds	r2, r1, r2
 8001876:	191c      	adds	r4, r3, r4
 8001878:	4290      	cmp	r0, r2
 800187a:	d302      	bcc.n	8001882 <__aeabi_ddiv+0x1be>
 800187c:	d116      	bne.n	80018ac <__aeabi_ddiv+0x1e8>
 800187e:	42a7      	cmp	r7, r4
 8001880:	d214      	bcs.n	80018ac <__aeabi_ddiv+0x1e8>
 8001882:	465b      	mov	r3, fp
 8001884:	9d00      	ldr	r5, [sp, #0]
 8001886:	3b01      	subs	r3, #1
 8001888:	444f      	add	r7, r9
 800188a:	9305      	str	r3, [sp, #20]
 800188c:	454f      	cmp	r7, r9
 800188e:	419b      	sbcs	r3, r3
 8001890:	46ac      	mov	ip, r5
 8001892:	425b      	negs	r3, r3
 8001894:	4463      	add	r3, ip
 8001896:	18c0      	adds	r0, r0, r3
 8001898:	4285      	cmp	r5, r0
 800189a:	d300      	bcc.n	800189e <__aeabi_ddiv+0x1da>
 800189c:	e1a1      	b.n	8001be2 <__aeabi_ddiv+0x51e>
 800189e:	4282      	cmp	r2, r0
 80018a0:	d900      	bls.n	80018a4 <__aeabi_ddiv+0x1e0>
 80018a2:	e1f6      	b.n	8001c92 <__aeabi_ddiv+0x5ce>
 80018a4:	d100      	bne.n	80018a8 <__aeabi_ddiv+0x1e4>
 80018a6:	e1f1      	b.n	8001c8c <__aeabi_ddiv+0x5c8>
 80018a8:	9b05      	ldr	r3, [sp, #20]
 80018aa:	469b      	mov	fp, r3
 80018ac:	1b3c      	subs	r4, r7, r4
 80018ae:	42a7      	cmp	r7, r4
 80018b0:	41bf      	sbcs	r7, r7
 80018b2:	9d00      	ldr	r5, [sp, #0]
 80018b4:	1a80      	subs	r0, r0, r2
 80018b6:	427f      	negs	r7, r7
 80018b8:	1bc0      	subs	r0, r0, r7
 80018ba:	4285      	cmp	r5, r0
 80018bc:	d100      	bne.n	80018c0 <__aeabi_ddiv+0x1fc>
 80018be:	e1d0      	b.n	8001c62 <__aeabi_ddiv+0x59e>
 80018c0:	9902      	ldr	r1, [sp, #8]
 80018c2:	f7fe fcc3 	bl	800024c <__aeabi_uidivmod>
 80018c6:	9a03      	ldr	r2, [sp, #12]
 80018c8:	040b      	lsls	r3, r1, #16
 80018ca:	4342      	muls	r2, r0
 80018cc:	0c21      	lsrs	r1, r4, #16
 80018ce:	0007      	movs	r7, r0
 80018d0:	4319      	orrs	r1, r3
 80018d2:	428a      	cmp	r2, r1
 80018d4:	d900      	bls.n	80018d8 <__aeabi_ddiv+0x214>
 80018d6:	e178      	b.n	8001bca <__aeabi_ddiv+0x506>
 80018d8:	1a88      	subs	r0, r1, r2
 80018da:	9902      	ldr	r1, [sp, #8]
 80018dc:	f7fe fcb6 	bl	800024c <__aeabi_uidivmod>
 80018e0:	9a03      	ldr	r2, [sp, #12]
 80018e2:	0424      	lsls	r4, r4, #16
 80018e4:	4342      	muls	r2, r0
 80018e6:	0409      	lsls	r1, r1, #16
 80018e8:	0c24      	lsrs	r4, r4, #16
 80018ea:	0003      	movs	r3, r0
 80018ec:	430c      	orrs	r4, r1
 80018ee:	42a2      	cmp	r2, r4
 80018f0:	d900      	bls.n	80018f4 <__aeabi_ddiv+0x230>
 80018f2:	e15d      	b.n	8001bb0 <__aeabi_ddiv+0x4ec>
 80018f4:	4641      	mov	r1, r8
 80018f6:	1aa4      	subs	r4, r4, r2
 80018f8:	043a      	lsls	r2, r7, #16
 80018fa:	431a      	orrs	r2, r3
 80018fc:	9d04      	ldr	r5, [sp, #16]
 80018fe:	0413      	lsls	r3, r2, #16
 8001900:	0c1b      	lsrs	r3, r3, #16
 8001902:	4359      	muls	r1, r3
 8001904:	4647      	mov	r7, r8
 8001906:	436b      	muls	r3, r5
 8001908:	469c      	mov	ip, r3
 800190a:	0c10      	lsrs	r0, r2, #16
 800190c:	4347      	muls	r7, r0
 800190e:	0c0b      	lsrs	r3, r1, #16
 8001910:	44bc      	add	ip, r7
 8001912:	4463      	add	r3, ip
 8001914:	4368      	muls	r0, r5
 8001916:	429f      	cmp	r7, r3
 8001918:	d903      	bls.n	8001922 <__aeabi_ddiv+0x25e>
 800191a:	2580      	movs	r5, #128	@ 0x80
 800191c:	026d      	lsls	r5, r5, #9
 800191e:	46ac      	mov	ip, r5
 8001920:	4460      	add	r0, ip
 8001922:	0c1f      	lsrs	r7, r3, #16
 8001924:	0409      	lsls	r1, r1, #16
 8001926:	041b      	lsls	r3, r3, #16
 8001928:	0c09      	lsrs	r1, r1, #16
 800192a:	183f      	adds	r7, r7, r0
 800192c:	185b      	adds	r3, r3, r1
 800192e:	42bc      	cmp	r4, r7
 8001930:	d200      	bcs.n	8001934 <__aeabi_ddiv+0x270>
 8001932:	e102      	b.n	8001b3a <__aeabi_ddiv+0x476>
 8001934:	d100      	bne.n	8001938 <__aeabi_ddiv+0x274>
 8001936:	e0fd      	b.n	8001b34 <__aeabi_ddiv+0x470>
 8001938:	2301      	movs	r3, #1
 800193a:	431a      	orrs	r2, r3
 800193c:	4b43      	ldr	r3, [pc, #268]	@ (8001a4c <__aeabi_ddiv+0x388>)
 800193e:	4453      	add	r3, sl
 8001940:	2b00      	cmp	r3, #0
 8001942:	dc00      	bgt.n	8001946 <__aeabi_ddiv+0x282>
 8001944:	e0ae      	b.n	8001aa4 <__aeabi_ddiv+0x3e0>
 8001946:	0751      	lsls	r1, r2, #29
 8001948:	d000      	beq.n	800194c <__aeabi_ddiv+0x288>
 800194a:	e198      	b.n	8001c7e <__aeabi_ddiv+0x5ba>
 800194c:	4659      	mov	r1, fp
 800194e:	01c9      	lsls	r1, r1, #7
 8001950:	d506      	bpl.n	8001960 <__aeabi_ddiv+0x29c>
 8001952:	4659      	mov	r1, fp
 8001954:	4b3e      	ldr	r3, [pc, #248]	@ (8001a50 <__aeabi_ddiv+0x38c>)
 8001956:	4019      	ands	r1, r3
 8001958:	2380      	movs	r3, #128	@ 0x80
 800195a:	468b      	mov	fp, r1
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	4453      	add	r3, sl
 8001960:	493c      	ldr	r1, [pc, #240]	@ (8001a54 <__aeabi_ddiv+0x390>)
 8001962:	428b      	cmp	r3, r1
 8001964:	dd00      	ble.n	8001968 <__aeabi_ddiv+0x2a4>
 8001966:	e71a      	b.n	800179e <__aeabi_ddiv+0xda>
 8001968:	4659      	mov	r1, fp
 800196a:	08d2      	lsrs	r2, r2, #3
 800196c:	0749      	lsls	r1, r1, #29
 800196e:	4311      	orrs	r1, r2
 8001970:	465a      	mov	r2, fp
 8001972:	055b      	lsls	r3, r3, #21
 8001974:	0254      	lsls	r4, r2, #9
 8001976:	4688      	mov	r8, r1
 8001978:	0b24      	lsrs	r4, r4, #12
 800197a:	0d5b      	lsrs	r3, r3, #21
 800197c:	e702      	b.n	8001784 <__aeabi_ddiv+0xc0>
 800197e:	465a      	mov	r2, fp
 8001980:	9b00      	ldr	r3, [sp, #0]
 8001982:	431a      	orrs	r2, r3
 8001984:	d100      	bne.n	8001988 <__aeabi_ddiv+0x2c4>
 8001986:	e07e      	b.n	8001a86 <__aeabi_ddiv+0x3c2>
 8001988:	465b      	mov	r3, fp
 800198a:	2b00      	cmp	r3, #0
 800198c:	d100      	bne.n	8001990 <__aeabi_ddiv+0x2cc>
 800198e:	e100      	b.n	8001b92 <__aeabi_ddiv+0x4ce>
 8001990:	4658      	mov	r0, fp
 8001992:	f001 fabb 	bl	8002f0c <__clzsi2>
 8001996:	0002      	movs	r2, r0
 8001998:	0003      	movs	r3, r0
 800199a:	3a0b      	subs	r2, #11
 800199c:	271d      	movs	r7, #29
 800199e:	9e00      	ldr	r6, [sp, #0]
 80019a0:	1aba      	subs	r2, r7, r2
 80019a2:	0019      	movs	r1, r3
 80019a4:	4658      	mov	r0, fp
 80019a6:	40d6      	lsrs	r6, r2
 80019a8:	3908      	subs	r1, #8
 80019aa:	4088      	lsls	r0, r1
 80019ac:	0032      	movs	r2, r6
 80019ae:	4302      	orrs	r2, r0
 80019b0:	4693      	mov	fp, r2
 80019b2:	9a00      	ldr	r2, [sp, #0]
 80019b4:	408a      	lsls	r2, r1
 80019b6:	4928      	ldr	r1, [pc, #160]	@ (8001a58 <__aeabi_ddiv+0x394>)
 80019b8:	4453      	add	r3, sl
 80019ba:	468a      	mov	sl, r1
 80019bc:	449a      	add	sl, r3
 80019be:	2300      	movs	r3, #0
 80019c0:	e6c8      	b.n	8001754 <__aeabi_ddiv+0x90>
 80019c2:	465b      	mov	r3, fp
 80019c4:	4303      	orrs	r3, r0
 80019c6:	4699      	mov	r9, r3
 80019c8:	d056      	beq.n	8001a78 <__aeabi_ddiv+0x3b4>
 80019ca:	465b      	mov	r3, fp
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_ddiv+0x30e>
 80019d0:	e0cd      	b.n	8001b6e <__aeabi_ddiv+0x4aa>
 80019d2:	4658      	mov	r0, fp
 80019d4:	f001 fa9a 	bl	8002f0c <__clzsi2>
 80019d8:	230b      	movs	r3, #11
 80019da:	425b      	negs	r3, r3
 80019dc:	469c      	mov	ip, r3
 80019de:	0002      	movs	r2, r0
 80019e0:	4484      	add	ip, r0
 80019e2:	4666      	mov	r6, ip
 80019e4:	231d      	movs	r3, #29
 80019e6:	1b9b      	subs	r3, r3, r6
 80019e8:	0026      	movs	r6, r4
 80019ea:	0011      	movs	r1, r2
 80019ec:	4658      	mov	r0, fp
 80019ee:	40de      	lsrs	r6, r3
 80019f0:	3908      	subs	r1, #8
 80019f2:	4088      	lsls	r0, r1
 80019f4:	0033      	movs	r3, r6
 80019f6:	4303      	orrs	r3, r0
 80019f8:	4699      	mov	r9, r3
 80019fa:	0023      	movs	r3, r4
 80019fc:	408b      	lsls	r3, r1
 80019fe:	4698      	mov	r8, r3
 8001a00:	4b16      	ldr	r3, [pc, #88]	@ (8001a5c <__aeabi_ddiv+0x398>)
 8001a02:	2400      	movs	r4, #0
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	469a      	mov	sl, r3
 8001a08:	2300      	movs	r3, #0
 8001a0a:	9303      	str	r3, [sp, #12]
 8001a0c:	e682      	b.n	8001714 <__aeabi_ddiv+0x50>
 8001a0e:	465a      	mov	r2, fp
 8001a10:	4302      	orrs	r2, r0
 8001a12:	4691      	mov	r9, r2
 8001a14:	d12a      	bne.n	8001a6c <__aeabi_ddiv+0x3a8>
 8001a16:	2200      	movs	r2, #0
 8001a18:	469a      	mov	sl, r3
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	4690      	mov	r8, r2
 8001a1e:	2408      	movs	r4, #8
 8001a20:	9303      	str	r3, [sp, #12]
 8001a22:	e677      	b.n	8001714 <__aeabi_ddiv+0x50>
 8001a24:	465a      	mov	r2, fp
 8001a26:	9b00      	ldr	r3, [sp, #0]
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <__aeabi_ddiv+0x39c>)
 8001a2c:	469c      	mov	ip, r3
 8001a2e:	44e2      	add	sl, ip
 8001a30:	2a00      	cmp	r2, #0
 8001a32:	d117      	bne.n	8001a64 <__aeabi_ddiv+0x3a0>
 8001a34:	2302      	movs	r3, #2
 8001a36:	431c      	orrs	r4, r3
 8001a38:	2300      	movs	r3, #0
 8001a3a:	469b      	mov	fp, r3
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	e689      	b.n	8001754 <__aeabi_ddiv+0x90>
 8001a40:	000007ff 	.word	0x000007ff
 8001a44:	fffffc01 	.word	0xfffffc01
 8001a48:	0800c974 	.word	0x0800c974
 8001a4c:	000003ff 	.word	0x000003ff
 8001a50:	feffffff 	.word	0xfeffffff
 8001a54:	000007fe 	.word	0x000007fe
 8001a58:	000003f3 	.word	0x000003f3
 8001a5c:	fffffc0d 	.word	0xfffffc0d
 8001a60:	fffff801 	.word	0xfffff801
 8001a64:	2303      	movs	r3, #3
 8001a66:	0032      	movs	r2, r6
 8001a68:	431c      	orrs	r4, r3
 8001a6a:	e673      	b.n	8001754 <__aeabi_ddiv+0x90>
 8001a6c:	469a      	mov	sl, r3
 8001a6e:	2303      	movs	r3, #3
 8001a70:	46d9      	mov	r9, fp
 8001a72:	240c      	movs	r4, #12
 8001a74:	9303      	str	r3, [sp, #12]
 8001a76:	e64d      	b.n	8001714 <__aeabi_ddiv+0x50>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	4698      	mov	r8, r3
 8001a7c:	469a      	mov	sl, r3
 8001a7e:	3301      	adds	r3, #1
 8001a80:	2404      	movs	r4, #4
 8001a82:	9303      	str	r3, [sp, #12]
 8001a84:	e646      	b.n	8001714 <__aeabi_ddiv+0x50>
 8001a86:	2301      	movs	r3, #1
 8001a88:	431c      	orrs	r4, r3
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	469b      	mov	fp, r3
 8001a8e:	3301      	adds	r3, #1
 8001a90:	e660      	b.n	8001754 <__aeabi_ddiv+0x90>
 8001a92:	2300      	movs	r3, #0
 8001a94:	2480      	movs	r4, #128	@ 0x80
 8001a96:	4698      	mov	r8, r3
 8001a98:	2600      	movs	r6, #0
 8001a9a:	4b92      	ldr	r3, [pc, #584]	@ (8001ce4 <__aeabi_ddiv+0x620>)
 8001a9c:	0324      	lsls	r4, r4, #12
 8001a9e:	e671      	b.n	8001784 <__aeabi_ddiv+0xc0>
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	4252      	negs	r2, r2
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	1ac9      	subs	r1, r1, r3
 8001aa8:	2938      	cmp	r1, #56	@ 0x38
 8001aaa:	dd00      	ble.n	8001aae <__aeabi_ddiv+0x3ea>
 8001aac:	e666      	b.n	800177c <__aeabi_ddiv+0xb8>
 8001aae:	291f      	cmp	r1, #31
 8001ab0:	dc00      	bgt.n	8001ab4 <__aeabi_ddiv+0x3f0>
 8001ab2:	e0ab      	b.n	8001c0c <__aeabi_ddiv+0x548>
 8001ab4:	201f      	movs	r0, #31
 8001ab6:	4240      	negs	r0, r0
 8001ab8:	1ac3      	subs	r3, r0, r3
 8001aba:	4658      	mov	r0, fp
 8001abc:	40d8      	lsrs	r0, r3
 8001abe:	0003      	movs	r3, r0
 8001ac0:	2920      	cmp	r1, #32
 8001ac2:	d004      	beq.n	8001ace <__aeabi_ddiv+0x40a>
 8001ac4:	4658      	mov	r0, fp
 8001ac6:	4988      	ldr	r1, [pc, #544]	@ (8001ce8 <__aeabi_ddiv+0x624>)
 8001ac8:	4451      	add	r1, sl
 8001aca:	4088      	lsls	r0, r1
 8001acc:	4302      	orrs	r2, r0
 8001ace:	1e51      	subs	r1, r2, #1
 8001ad0:	418a      	sbcs	r2, r1
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	2307      	movs	r3, #7
 8001ad6:	0019      	movs	r1, r3
 8001ad8:	2400      	movs	r4, #0
 8001ada:	4011      	ands	r1, r2
 8001adc:	4213      	tst	r3, r2
 8001ade:	d00c      	beq.n	8001afa <__aeabi_ddiv+0x436>
 8001ae0:	230f      	movs	r3, #15
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d100      	bne.n	8001aea <__aeabi_ddiv+0x426>
 8001ae8:	e0f9      	b.n	8001cde <__aeabi_ddiv+0x61a>
 8001aea:	1d11      	adds	r1, r2, #4
 8001aec:	4291      	cmp	r1, r2
 8001aee:	419b      	sbcs	r3, r3
 8001af0:	000a      	movs	r2, r1
 8001af2:	425b      	negs	r3, r3
 8001af4:	0759      	lsls	r1, r3, #29
 8001af6:	025b      	lsls	r3, r3, #9
 8001af8:	0b1c      	lsrs	r4, r3, #12
 8001afa:	08d2      	lsrs	r2, r2, #3
 8001afc:	430a      	orrs	r2, r1
 8001afe:	4690      	mov	r8, r2
 8001b00:	2300      	movs	r3, #0
 8001b02:	e63f      	b.n	8001784 <__aeabi_ddiv+0xc0>
 8001b04:	2480      	movs	r4, #128	@ 0x80
 8001b06:	464b      	mov	r3, r9
 8001b08:	0324      	lsls	r4, r4, #12
 8001b0a:	4223      	tst	r3, r4
 8001b0c:	d009      	beq.n	8001b22 <__aeabi_ddiv+0x45e>
 8001b0e:	465b      	mov	r3, fp
 8001b10:	4223      	tst	r3, r4
 8001b12:	d106      	bne.n	8001b22 <__aeabi_ddiv+0x45e>
 8001b14:	431c      	orrs	r4, r3
 8001b16:	0324      	lsls	r4, r4, #12
 8001b18:	002e      	movs	r6, r5
 8001b1a:	4690      	mov	r8, r2
 8001b1c:	4b71      	ldr	r3, [pc, #452]	@ (8001ce4 <__aeabi_ddiv+0x620>)
 8001b1e:	0b24      	lsrs	r4, r4, #12
 8001b20:	e630      	b.n	8001784 <__aeabi_ddiv+0xc0>
 8001b22:	2480      	movs	r4, #128	@ 0x80
 8001b24:	464b      	mov	r3, r9
 8001b26:	0324      	lsls	r4, r4, #12
 8001b28:	431c      	orrs	r4, r3
 8001b2a:	0324      	lsls	r4, r4, #12
 8001b2c:	9e02      	ldr	r6, [sp, #8]
 8001b2e:	4b6d      	ldr	r3, [pc, #436]	@ (8001ce4 <__aeabi_ddiv+0x620>)
 8001b30:	0b24      	lsrs	r4, r4, #12
 8001b32:	e627      	b.n	8001784 <__aeabi_ddiv+0xc0>
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d100      	bne.n	8001b3a <__aeabi_ddiv+0x476>
 8001b38:	e700      	b.n	800193c <__aeabi_ddiv+0x278>
 8001b3a:	9800      	ldr	r0, [sp, #0]
 8001b3c:	1e51      	subs	r1, r2, #1
 8001b3e:	4684      	mov	ip, r0
 8001b40:	4464      	add	r4, ip
 8001b42:	4284      	cmp	r4, r0
 8001b44:	d200      	bcs.n	8001b48 <__aeabi_ddiv+0x484>
 8001b46:	e084      	b.n	8001c52 <__aeabi_ddiv+0x58e>
 8001b48:	42bc      	cmp	r4, r7
 8001b4a:	d200      	bcs.n	8001b4e <__aeabi_ddiv+0x48a>
 8001b4c:	e0ae      	b.n	8001cac <__aeabi_ddiv+0x5e8>
 8001b4e:	d100      	bne.n	8001b52 <__aeabi_ddiv+0x48e>
 8001b50:	e0c1      	b.n	8001cd6 <__aeabi_ddiv+0x612>
 8001b52:	000a      	movs	r2, r1
 8001b54:	e6f0      	b.n	8001938 <__aeabi_ddiv+0x274>
 8001b56:	4542      	cmp	r2, r8
 8001b58:	d900      	bls.n	8001b5c <__aeabi_ddiv+0x498>
 8001b5a:	e62c      	b.n	80017b6 <__aeabi_ddiv+0xf2>
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	07dc      	lsls	r4, r3, #31
 8001b60:	0858      	lsrs	r0, r3, #1
 8001b62:	4643      	mov	r3, r8
 8001b64:	085b      	lsrs	r3, r3, #1
 8001b66:	431c      	orrs	r4, r3
 8001b68:	4643      	mov	r3, r8
 8001b6a:	07df      	lsls	r7, r3, #31
 8001b6c:	e62a      	b.n	80017c4 <__aeabi_ddiv+0x100>
 8001b6e:	f001 f9cd 	bl	8002f0c <__clzsi2>
 8001b72:	2315      	movs	r3, #21
 8001b74:	469c      	mov	ip, r3
 8001b76:	4484      	add	ip, r0
 8001b78:	0002      	movs	r2, r0
 8001b7a:	4663      	mov	r3, ip
 8001b7c:	3220      	adds	r2, #32
 8001b7e:	2b1c      	cmp	r3, #28
 8001b80:	dc00      	bgt.n	8001b84 <__aeabi_ddiv+0x4c0>
 8001b82:	e72e      	b.n	80019e2 <__aeabi_ddiv+0x31e>
 8001b84:	0023      	movs	r3, r4
 8001b86:	3808      	subs	r0, #8
 8001b88:	4083      	lsls	r3, r0
 8001b8a:	4699      	mov	r9, r3
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	4698      	mov	r8, r3
 8001b90:	e736      	b.n	8001a00 <__aeabi_ddiv+0x33c>
 8001b92:	f001 f9bb 	bl	8002f0c <__clzsi2>
 8001b96:	0002      	movs	r2, r0
 8001b98:	0003      	movs	r3, r0
 8001b9a:	3215      	adds	r2, #21
 8001b9c:	3320      	adds	r3, #32
 8001b9e:	2a1c      	cmp	r2, #28
 8001ba0:	dc00      	bgt.n	8001ba4 <__aeabi_ddiv+0x4e0>
 8001ba2:	e6fb      	b.n	800199c <__aeabi_ddiv+0x2d8>
 8001ba4:	9900      	ldr	r1, [sp, #0]
 8001ba6:	3808      	subs	r0, #8
 8001ba8:	4081      	lsls	r1, r0
 8001baa:	2200      	movs	r2, #0
 8001bac:	468b      	mov	fp, r1
 8001bae:	e702      	b.n	80019b6 <__aeabi_ddiv+0x2f2>
 8001bb0:	9900      	ldr	r1, [sp, #0]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	468c      	mov	ip, r1
 8001bb6:	4464      	add	r4, ip
 8001bb8:	42a1      	cmp	r1, r4
 8001bba:	d900      	bls.n	8001bbe <__aeabi_ddiv+0x4fa>
 8001bbc:	e69a      	b.n	80018f4 <__aeabi_ddiv+0x230>
 8001bbe:	42a2      	cmp	r2, r4
 8001bc0:	d800      	bhi.n	8001bc4 <__aeabi_ddiv+0x500>
 8001bc2:	e697      	b.n	80018f4 <__aeabi_ddiv+0x230>
 8001bc4:	1e83      	subs	r3, r0, #2
 8001bc6:	4464      	add	r4, ip
 8001bc8:	e694      	b.n	80018f4 <__aeabi_ddiv+0x230>
 8001bca:	46ac      	mov	ip, r5
 8001bcc:	4461      	add	r1, ip
 8001bce:	3f01      	subs	r7, #1
 8001bd0:	428d      	cmp	r5, r1
 8001bd2:	d900      	bls.n	8001bd6 <__aeabi_ddiv+0x512>
 8001bd4:	e680      	b.n	80018d8 <__aeabi_ddiv+0x214>
 8001bd6:	428a      	cmp	r2, r1
 8001bd8:	d800      	bhi.n	8001bdc <__aeabi_ddiv+0x518>
 8001bda:	e67d      	b.n	80018d8 <__aeabi_ddiv+0x214>
 8001bdc:	1e87      	subs	r7, r0, #2
 8001bde:	4461      	add	r1, ip
 8001be0:	e67a      	b.n	80018d8 <__aeabi_ddiv+0x214>
 8001be2:	4285      	cmp	r5, r0
 8001be4:	d000      	beq.n	8001be8 <__aeabi_ddiv+0x524>
 8001be6:	e65f      	b.n	80018a8 <__aeabi_ddiv+0x1e4>
 8001be8:	45b9      	cmp	r9, r7
 8001bea:	d900      	bls.n	8001bee <__aeabi_ddiv+0x52a>
 8001bec:	e65c      	b.n	80018a8 <__aeabi_ddiv+0x1e4>
 8001bee:	e656      	b.n	800189e <__aeabi_ddiv+0x1da>
 8001bf0:	42a2      	cmp	r2, r4
 8001bf2:	d800      	bhi.n	8001bf6 <__aeabi_ddiv+0x532>
 8001bf4:	e61a      	b.n	800182c <__aeabi_ddiv+0x168>
 8001bf6:	1e83      	subs	r3, r0, #2
 8001bf8:	4464      	add	r4, ip
 8001bfa:	e617      	b.n	800182c <__aeabi_ddiv+0x168>
 8001bfc:	428a      	cmp	r2, r1
 8001bfe:	d800      	bhi.n	8001c02 <__aeabi_ddiv+0x53e>
 8001c00:	e600      	b.n	8001804 <__aeabi_ddiv+0x140>
 8001c02:	46ac      	mov	ip, r5
 8001c04:	1e83      	subs	r3, r0, #2
 8001c06:	4698      	mov	r8, r3
 8001c08:	4461      	add	r1, ip
 8001c0a:	e5fb      	b.n	8001804 <__aeabi_ddiv+0x140>
 8001c0c:	4837      	ldr	r0, [pc, #220]	@ (8001cec <__aeabi_ddiv+0x628>)
 8001c0e:	0014      	movs	r4, r2
 8001c10:	4450      	add	r0, sl
 8001c12:	4082      	lsls	r2, r0
 8001c14:	465b      	mov	r3, fp
 8001c16:	0017      	movs	r7, r2
 8001c18:	4083      	lsls	r3, r0
 8001c1a:	40cc      	lsrs	r4, r1
 8001c1c:	1e7a      	subs	r2, r7, #1
 8001c1e:	4197      	sbcs	r7, r2
 8001c20:	4323      	orrs	r3, r4
 8001c22:	433b      	orrs	r3, r7
 8001c24:	001a      	movs	r2, r3
 8001c26:	465b      	mov	r3, fp
 8001c28:	40cb      	lsrs	r3, r1
 8001c2a:	0751      	lsls	r1, r2, #29
 8001c2c:	d009      	beq.n	8001c42 <__aeabi_ddiv+0x57e>
 8001c2e:	210f      	movs	r1, #15
 8001c30:	4011      	ands	r1, r2
 8001c32:	2904      	cmp	r1, #4
 8001c34:	d005      	beq.n	8001c42 <__aeabi_ddiv+0x57e>
 8001c36:	1d11      	adds	r1, r2, #4
 8001c38:	4291      	cmp	r1, r2
 8001c3a:	4192      	sbcs	r2, r2
 8001c3c:	4252      	negs	r2, r2
 8001c3e:	189b      	adds	r3, r3, r2
 8001c40:	000a      	movs	r2, r1
 8001c42:	0219      	lsls	r1, r3, #8
 8001c44:	d400      	bmi.n	8001c48 <__aeabi_ddiv+0x584>
 8001c46:	e755      	b.n	8001af4 <__aeabi_ddiv+0x430>
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	2400      	movs	r4, #0
 8001c4e:	4690      	mov	r8, r2
 8001c50:	e598      	b.n	8001784 <__aeabi_ddiv+0xc0>
 8001c52:	000a      	movs	r2, r1
 8001c54:	42bc      	cmp	r4, r7
 8001c56:	d000      	beq.n	8001c5a <__aeabi_ddiv+0x596>
 8001c58:	e66e      	b.n	8001938 <__aeabi_ddiv+0x274>
 8001c5a:	454b      	cmp	r3, r9
 8001c5c:	d000      	beq.n	8001c60 <__aeabi_ddiv+0x59c>
 8001c5e:	e66b      	b.n	8001938 <__aeabi_ddiv+0x274>
 8001c60:	e66c      	b.n	800193c <__aeabi_ddiv+0x278>
 8001c62:	4b23      	ldr	r3, [pc, #140]	@ (8001cf0 <__aeabi_ddiv+0x62c>)
 8001c64:	4a23      	ldr	r2, [pc, #140]	@ (8001cf4 <__aeabi_ddiv+0x630>)
 8001c66:	4453      	add	r3, sl
 8001c68:	4592      	cmp	sl, r2
 8001c6a:	da00      	bge.n	8001c6e <__aeabi_ddiv+0x5aa>
 8001c6c:	e718      	b.n	8001aa0 <__aeabi_ddiv+0x3dc>
 8001c6e:	2101      	movs	r1, #1
 8001c70:	4249      	negs	r1, r1
 8001c72:	1d0a      	adds	r2, r1, #4
 8001c74:	428a      	cmp	r2, r1
 8001c76:	4189      	sbcs	r1, r1
 8001c78:	4249      	negs	r1, r1
 8001c7a:	448b      	add	fp, r1
 8001c7c:	e666      	b.n	800194c <__aeabi_ddiv+0x288>
 8001c7e:	210f      	movs	r1, #15
 8001c80:	4011      	ands	r1, r2
 8001c82:	2904      	cmp	r1, #4
 8001c84:	d100      	bne.n	8001c88 <__aeabi_ddiv+0x5c4>
 8001c86:	e661      	b.n	800194c <__aeabi_ddiv+0x288>
 8001c88:	0011      	movs	r1, r2
 8001c8a:	e7f2      	b.n	8001c72 <__aeabi_ddiv+0x5ae>
 8001c8c:	42bc      	cmp	r4, r7
 8001c8e:	d800      	bhi.n	8001c92 <__aeabi_ddiv+0x5ce>
 8001c90:	e60a      	b.n	80018a8 <__aeabi_ddiv+0x1e4>
 8001c92:	2302      	movs	r3, #2
 8001c94:	425b      	negs	r3, r3
 8001c96:	469c      	mov	ip, r3
 8001c98:	9900      	ldr	r1, [sp, #0]
 8001c9a:	444f      	add	r7, r9
 8001c9c:	454f      	cmp	r7, r9
 8001c9e:	419b      	sbcs	r3, r3
 8001ca0:	44e3      	add	fp, ip
 8001ca2:	468c      	mov	ip, r1
 8001ca4:	425b      	negs	r3, r3
 8001ca6:	4463      	add	r3, ip
 8001ca8:	18c0      	adds	r0, r0, r3
 8001caa:	e5ff      	b.n	80018ac <__aeabi_ddiv+0x1e8>
 8001cac:	4649      	mov	r1, r9
 8001cae:	9d00      	ldr	r5, [sp, #0]
 8001cb0:	0048      	lsls	r0, r1, #1
 8001cb2:	4548      	cmp	r0, r9
 8001cb4:	4189      	sbcs	r1, r1
 8001cb6:	46ac      	mov	ip, r5
 8001cb8:	4249      	negs	r1, r1
 8001cba:	4461      	add	r1, ip
 8001cbc:	4681      	mov	r9, r0
 8001cbe:	3a02      	subs	r2, #2
 8001cc0:	1864      	adds	r4, r4, r1
 8001cc2:	e7c7      	b.n	8001c54 <__aeabi_ddiv+0x590>
 8001cc4:	2480      	movs	r4, #128	@ 0x80
 8001cc6:	465b      	mov	r3, fp
 8001cc8:	0324      	lsls	r4, r4, #12
 8001cca:	431c      	orrs	r4, r3
 8001ccc:	0324      	lsls	r4, r4, #12
 8001cce:	4690      	mov	r8, r2
 8001cd0:	4b04      	ldr	r3, [pc, #16]	@ (8001ce4 <__aeabi_ddiv+0x620>)
 8001cd2:	0b24      	lsrs	r4, r4, #12
 8001cd4:	e556      	b.n	8001784 <__aeabi_ddiv+0xc0>
 8001cd6:	4599      	cmp	r9, r3
 8001cd8:	d3e8      	bcc.n	8001cac <__aeabi_ddiv+0x5e8>
 8001cda:	000a      	movs	r2, r1
 8001cdc:	e7bd      	b.n	8001c5a <__aeabi_ddiv+0x596>
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e708      	b.n	8001af4 <__aeabi_ddiv+0x430>
 8001ce2:	46c0      	nop			@ (mov r8, r8)
 8001ce4:	000007ff 	.word	0x000007ff
 8001ce8:	0000043e 	.word	0x0000043e
 8001cec:	0000041e 	.word	0x0000041e
 8001cf0:	000003ff 	.word	0x000003ff
 8001cf4:	fffffc02 	.word	0xfffffc02

08001cf8 <__eqdf2>:
 8001cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cfa:	4657      	mov	r7, sl
 8001cfc:	46de      	mov	lr, fp
 8001cfe:	464e      	mov	r6, r9
 8001d00:	4645      	mov	r5, r8
 8001d02:	b5e0      	push	{r5, r6, r7, lr}
 8001d04:	000d      	movs	r5, r1
 8001d06:	0004      	movs	r4, r0
 8001d08:	0fe8      	lsrs	r0, r5, #31
 8001d0a:	4683      	mov	fp, r0
 8001d0c:	0309      	lsls	r1, r1, #12
 8001d0e:	0fd8      	lsrs	r0, r3, #31
 8001d10:	0b09      	lsrs	r1, r1, #12
 8001d12:	4682      	mov	sl, r0
 8001d14:	4819      	ldr	r0, [pc, #100]	@ (8001d7c <__eqdf2+0x84>)
 8001d16:	468c      	mov	ip, r1
 8001d18:	031f      	lsls	r7, r3, #12
 8001d1a:	0069      	lsls	r1, r5, #1
 8001d1c:	005e      	lsls	r6, r3, #1
 8001d1e:	0d49      	lsrs	r1, r1, #21
 8001d20:	0b3f      	lsrs	r7, r7, #12
 8001d22:	0d76      	lsrs	r6, r6, #21
 8001d24:	4281      	cmp	r1, r0
 8001d26:	d018      	beq.n	8001d5a <__eqdf2+0x62>
 8001d28:	4286      	cmp	r6, r0
 8001d2a:	d00f      	beq.n	8001d4c <__eqdf2+0x54>
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	42b1      	cmp	r1, r6
 8001d30:	d10d      	bne.n	8001d4e <__eqdf2+0x56>
 8001d32:	45bc      	cmp	ip, r7
 8001d34:	d10b      	bne.n	8001d4e <__eqdf2+0x56>
 8001d36:	4294      	cmp	r4, r2
 8001d38:	d109      	bne.n	8001d4e <__eqdf2+0x56>
 8001d3a:	45d3      	cmp	fp, sl
 8001d3c:	d01c      	beq.n	8001d78 <__eqdf2+0x80>
 8001d3e:	2900      	cmp	r1, #0
 8001d40:	d105      	bne.n	8001d4e <__eqdf2+0x56>
 8001d42:	4660      	mov	r0, ip
 8001d44:	4320      	orrs	r0, r4
 8001d46:	1e43      	subs	r3, r0, #1
 8001d48:	4198      	sbcs	r0, r3
 8001d4a:	e000      	b.n	8001d4e <__eqdf2+0x56>
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d50:	46bb      	mov	fp, r7
 8001d52:	46b2      	mov	sl, r6
 8001d54:	46a9      	mov	r9, r5
 8001d56:	46a0      	mov	r8, r4
 8001d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	428e      	cmp	r6, r1
 8001d5e:	d1f6      	bne.n	8001d4e <__eqdf2+0x56>
 8001d60:	4661      	mov	r1, ip
 8001d62:	4339      	orrs	r1, r7
 8001d64:	000f      	movs	r7, r1
 8001d66:	4317      	orrs	r7, r2
 8001d68:	4327      	orrs	r7, r4
 8001d6a:	d1f0      	bne.n	8001d4e <__eqdf2+0x56>
 8001d6c:	465b      	mov	r3, fp
 8001d6e:	4652      	mov	r2, sl
 8001d70:	1a98      	subs	r0, r3, r2
 8001d72:	1e43      	subs	r3, r0, #1
 8001d74:	4198      	sbcs	r0, r3
 8001d76:	e7ea      	b.n	8001d4e <__eqdf2+0x56>
 8001d78:	2000      	movs	r0, #0
 8001d7a:	e7e8      	b.n	8001d4e <__eqdf2+0x56>
 8001d7c:	000007ff 	.word	0x000007ff

08001d80 <__gedf2>:
 8001d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d82:	4657      	mov	r7, sl
 8001d84:	464e      	mov	r6, r9
 8001d86:	4645      	mov	r5, r8
 8001d88:	46de      	mov	lr, fp
 8001d8a:	b5e0      	push	{r5, r6, r7, lr}
 8001d8c:	000d      	movs	r5, r1
 8001d8e:	030f      	lsls	r7, r1, #12
 8001d90:	0b39      	lsrs	r1, r7, #12
 8001d92:	b083      	sub	sp, #12
 8001d94:	0004      	movs	r4, r0
 8001d96:	4680      	mov	r8, r0
 8001d98:	9101      	str	r1, [sp, #4]
 8001d9a:	0058      	lsls	r0, r3, #1
 8001d9c:	0fe9      	lsrs	r1, r5, #31
 8001d9e:	4f31      	ldr	r7, [pc, #196]	@ (8001e64 <__gedf2+0xe4>)
 8001da0:	0d40      	lsrs	r0, r0, #21
 8001da2:	468c      	mov	ip, r1
 8001da4:	006e      	lsls	r6, r5, #1
 8001da6:	0319      	lsls	r1, r3, #12
 8001da8:	4682      	mov	sl, r0
 8001daa:	4691      	mov	r9, r2
 8001dac:	0d76      	lsrs	r6, r6, #21
 8001dae:	0b09      	lsrs	r1, r1, #12
 8001db0:	0fd8      	lsrs	r0, r3, #31
 8001db2:	42be      	cmp	r6, r7
 8001db4:	d01f      	beq.n	8001df6 <__gedf2+0x76>
 8001db6:	45ba      	cmp	sl, r7
 8001db8:	d00f      	beq.n	8001dda <__gedf2+0x5a>
 8001dba:	2e00      	cmp	r6, #0
 8001dbc:	d12f      	bne.n	8001e1e <__gedf2+0x9e>
 8001dbe:	4655      	mov	r5, sl
 8001dc0:	9e01      	ldr	r6, [sp, #4]
 8001dc2:	4334      	orrs	r4, r6
 8001dc4:	2d00      	cmp	r5, #0
 8001dc6:	d127      	bne.n	8001e18 <__gedf2+0x98>
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	d03a      	beq.n	8001e42 <__gedf2+0xc2>
 8001dcc:	2c00      	cmp	r4, #0
 8001dce:	d145      	bne.n	8001e5c <__gedf2+0xdc>
 8001dd0:	2800      	cmp	r0, #0
 8001dd2:	d11a      	bne.n	8001e0a <__gedf2+0x8a>
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	4240      	negs	r0, r0
 8001dd8:	e017      	b.n	8001e0a <__gedf2+0x8a>
 8001dda:	4311      	orrs	r1, r2
 8001ddc:	d13b      	bne.n	8001e56 <__gedf2+0xd6>
 8001dde:	2e00      	cmp	r6, #0
 8001de0:	d102      	bne.n	8001de8 <__gedf2+0x68>
 8001de2:	9f01      	ldr	r7, [sp, #4]
 8001de4:	4327      	orrs	r7, r4
 8001de6:	d0f3      	beq.n	8001dd0 <__gedf2+0x50>
 8001de8:	4584      	cmp	ip, r0
 8001dea:	d109      	bne.n	8001e00 <__gedf2+0x80>
 8001dec:	4663      	mov	r3, ip
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d0f0      	beq.n	8001dd4 <__gedf2+0x54>
 8001df2:	4660      	mov	r0, ip
 8001df4:	e009      	b.n	8001e0a <__gedf2+0x8a>
 8001df6:	9f01      	ldr	r7, [sp, #4]
 8001df8:	4327      	orrs	r7, r4
 8001dfa:	d12c      	bne.n	8001e56 <__gedf2+0xd6>
 8001dfc:	45b2      	cmp	sl, r6
 8001dfe:	d024      	beq.n	8001e4a <__gedf2+0xca>
 8001e00:	4663      	mov	r3, ip
 8001e02:	2002      	movs	r0, #2
 8001e04:	3b01      	subs	r3, #1
 8001e06:	4018      	ands	r0, r3
 8001e08:	3801      	subs	r0, #1
 8001e0a:	b003      	add	sp, #12
 8001e0c:	bcf0      	pop	{r4, r5, r6, r7}
 8001e0e:	46bb      	mov	fp, r7
 8001e10:	46b2      	mov	sl, r6
 8001e12:	46a9      	mov	r9, r5
 8001e14:	46a0      	mov	r8, r4
 8001e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e18:	2c00      	cmp	r4, #0
 8001e1a:	d0d9      	beq.n	8001dd0 <__gedf2+0x50>
 8001e1c:	e7e4      	b.n	8001de8 <__gedf2+0x68>
 8001e1e:	4654      	mov	r4, sl
 8001e20:	2c00      	cmp	r4, #0
 8001e22:	d0ed      	beq.n	8001e00 <__gedf2+0x80>
 8001e24:	4584      	cmp	ip, r0
 8001e26:	d1eb      	bne.n	8001e00 <__gedf2+0x80>
 8001e28:	4556      	cmp	r6, sl
 8001e2a:	dce9      	bgt.n	8001e00 <__gedf2+0x80>
 8001e2c:	dbde      	blt.n	8001dec <__gedf2+0x6c>
 8001e2e:	9b01      	ldr	r3, [sp, #4]
 8001e30:	428b      	cmp	r3, r1
 8001e32:	d8e5      	bhi.n	8001e00 <__gedf2+0x80>
 8001e34:	d1da      	bne.n	8001dec <__gedf2+0x6c>
 8001e36:	45c8      	cmp	r8, r9
 8001e38:	d8e2      	bhi.n	8001e00 <__gedf2+0x80>
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	45c8      	cmp	r8, r9
 8001e3e:	d2e4      	bcs.n	8001e0a <__gedf2+0x8a>
 8001e40:	e7d4      	b.n	8001dec <__gedf2+0x6c>
 8001e42:	2000      	movs	r0, #0
 8001e44:	2c00      	cmp	r4, #0
 8001e46:	d0e0      	beq.n	8001e0a <__gedf2+0x8a>
 8001e48:	e7da      	b.n	8001e00 <__gedf2+0x80>
 8001e4a:	4311      	orrs	r1, r2
 8001e4c:	d103      	bne.n	8001e56 <__gedf2+0xd6>
 8001e4e:	4584      	cmp	ip, r0
 8001e50:	d1d6      	bne.n	8001e00 <__gedf2+0x80>
 8001e52:	2000      	movs	r0, #0
 8001e54:	e7d9      	b.n	8001e0a <__gedf2+0x8a>
 8001e56:	2002      	movs	r0, #2
 8001e58:	4240      	negs	r0, r0
 8001e5a:	e7d6      	b.n	8001e0a <__gedf2+0x8a>
 8001e5c:	4584      	cmp	ip, r0
 8001e5e:	d0e6      	beq.n	8001e2e <__gedf2+0xae>
 8001e60:	e7ce      	b.n	8001e00 <__gedf2+0x80>
 8001e62:	46c0      	nop			@ (mov r8, r8)
 8001e64:	000007ff 	.word	0x000007ff

08001e68 <__ledf2>:
 8001e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e6a:	4657      	mov	r7, sl
 8001e6c:	464e      	mov	r6, r9
 8001e6e:	4645      	mov	r5, r8
 8001e70:	46de      	mov	lr, fp
 8001e72:	b5e0      	push	{r5, r6, r7, lr}
 8001e74:	000d      	movs	r5, r1
 8001e76:	030f      	lsls	r7, r1, #12
 8001e78:	0004      	movs	r4, r0
 8001e7a:	4680      	mov	r8, r0
 8001e7c:	0fe8      	lsrs	r0, r5, #31
 8001e7e:	0b39      	lsrs	r1, r7, #12
 8001e80:	4684      	mov	ip, r0
 8001e82:	b083      	sub	sp, #12
 8001e84:	0058      	lsls	r0, r3, #1
 8001e86:	4f30      	ldr	r7, [pc, #192]	@ (8001f48 <__ledf2+0xe0>)
 8001e88:	0d40      	lsrs	r0, r0, #21
 8001e8a:	9101      	str	r1, [sp, #4]
 8001e8c:	031e      	lsls	r6, r3, #12
 8001e8e:	0069      	lsls	r1, r5, #1
 8001e90:	4682      	mov	sl, r0
 8001e92:	4691      	mov	r9, r2
 8001e94:	0d49      	lsrs	r1, r1, #21
 8001e96:	0b36      	lsrs	r6, r6, #12
 8001e98:	0fd8      	lsrs	r0, r3, #31
 8001e9a:	42b9      	cmp	r1, r7
 8001e9c:	d020      	beq.n	8001ee0 <__ledf2+0x78>
 8001e9e:	45ba      	cmp	sl, r7
 8001ea0:	d00f      	beq.n	8001ec2 <__ledf2+0x5a>
 8001ea2:	2900      	cmp	r1, #0
 8001ea4:	d12b      	bne.n	8001efe <__ledf2+0x96>
 8001ea6:	9901      	ldr	r1, [sp, #4]
 8001ea8:	430c      	orrs	r4, r1
 8001eaa:	4651      	mov	r1, sl
 8001eac:	2900      	cmp	r1, #0
 8001eae:	d137      	bne.n	8001f20 <__ledf2+0xb8>
 8001eb0:	4332      	orrs	r2, r6
 8001eb2:	d038      	beq.n	8001f26 <__ledf2+0xbe>
 8001eb4:	2c00      	cmp	r4, #0
 8001eb6:	d144      	bne.n	8001f42 <__ledf2+0xda>
 8001eb8:	2800      	cmp	r0, #0
 8001eba:	d119      	bne.n	8001ef0 <__ledf2+0x88>
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	4240      	negs	r0, r0
 8001ec0:	e016      	b.n	8001ef0 <__ledf2+0x88>
 8001ec2:	4316      	orrs	r6, r2
 8001ec4:	d113      	bne.n	8001eee <__ledf2+0x86>
 8001ec6:	2900      	cmp	r1, #0
 8001ec8:	d102      	bne.n	8001ed0 <__ledf2+0x68>
 8001eca:	9f01      	ldr	r7, [sp, #4]
 8001ecc:	4327      	orrs	r7, r4
 8001ece:	d0f3      	beq.n	8001eb8 <__ledf2+0x50>
 8001ed0:	4584      	cmp	ip, r0
 8001ed2:	d020      	beq.n	8001f16 <__ledf2+0xae>
 8001ed4:	4663      	mov	r3, ip
 8001ed6:	2002      	movs	r0, #2
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	4018      	ands	r0, r3
 8001edc:	3801      	subs	r0, #1
 8001ede:	e007      	b.n	8001ef0 <__ledf2+0x88>
 8001ee0:	9f01      	ldr	r7, [sp, #4]
 8001ee2:	4327      	orrs	r7, r4
 8001ee4:	d103      	bne.n	8001eee <__ledf2+0x86>
 8001ee6:	458a      	cmp	sl, r1
 8001ee8:	d1f4      	bne.n	8001ed4 <__ledf2+0x6c>
 8001eea:	4316      	orrs	r6, r2
 8001eec:	d01f      	beq.n	8001f2e <__ledf2+0xc6>
 8001eee:	2002      	movs	r0, #2
 8001ef0:	b003      	add	sp, #12
 8001ef2:	bcf0      	pop	{r4, r5, r6, r7}
 8001ef4:	46bb      	mov	fp, r7
 8001ef6:	46b2      	mov	sl, r6
 8001ef8:	46a9      	mov	r9, r5
 8001efa:	46a0      	mov	r8, r4
 8001efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001efe:	4654      	mov	r4, sl
 8001f00:	2c00      	cmp	r4, #0
 8001f02:	d0e7      	beq.n	8001ed4 <__ledf2+0x6c>
 8001f04:	4584      	cmp	ip, r0
 8001f06:	d1e5      	bne.n	8001ed4 <__ledf2+0x6c>
 8001f08:	4551      	cmp	r1, sl
 8001f0a:	dce3      	bgt.n	8001ed4 <__ledf2+0x6c>
 8001f0c:	db03      	blt.n	8001f16 <__ledf2+0xae>
 8001f0e:	9b01      	ldr	r3, [sp, #4]
 8001f10:	42b3      	cmp	r3, r6
 8001f12:	d8df      	bhi.n	8001ed4 <__ledf2+0x6c>
 8001f14:	d00f      	beq.n	8001f36 <__ledf2+0xce>
 8001f16:	4663      	mov	r3, ip
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0cf      	beq.n	8001ebc <__ledf2+0x54>
 8001f1c:	4660      	mov	r0, ip
 8001f1e:	e7e7      	b.n	8001ef0 <__ledf2+0x88>
 8001f20:	2c00      	cmp	r4, #0
 8001f22:	d0c9      	beq.n	8001eb8 <__ledf2+0x50>
 8001f24:	e7d4      	b.n	8001ed0 <__ledf2+0x68>
 8001f26:	2000      	movs	r0, #0
 8001f28:	2c00      	cmp	r4, #0
 8001f2a:	d0e1      	beq.n	8001ef0 <__ledf2+0x88>
 8001f2c:	e7d2      	b.n	8001ed4 <__ledf2+0x6c>
 8001f2e:	4584      	cmp	ip, r0
 8001f30:	d1d0      	bne.n	8001ed4 <__ledf2+0x6c>
 8001f32:	2000      	movs	r0, #0
 8001f34:	e7dc      	b.n	8001ef0 <__ledf2+0x88>
 8001f36:	45c8      	cmp	r8, r9
 8001f38:	d8cc      	bhi.n	8001ed4 <__ledf2+0x6c>
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	45c8      	cmp	r8, r9
 8001f3e:	d2d7      	bcs.n	8001ef0 <__ledf2+0x88>
 8001f40:	e7e9      	b.n	8001f16 <__ledf2+0xae>
 8001f42:	4584      	cmp	ip, r0
 8001f44:	d0e3      	beq.n	8001f0e <__ledf2+0xa6>
 8001f46:	e7c5      	b.n	8001ed4 <__ledf2+0x6c>
 8001f48:	000007ff 	.word	0x000007ff

08001f4c <__aeabi_dmul>:
 8001f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f4e:	4657      	mov	r7, sl
 8001f50:	46de      	mov	lr, fp
 8001f52:	464e      	mov	r6, r9
 8001f54:	4645      	mov	r5, r8
 8001f56:	b5e0      	push	{r5, r6, r7, lr}
 8001f58:	001f      	movs	r7, r3
 8001f5a:	030b      	lsls	r3, r1, #12
 8001f5c:	0b1b      	lsrs	r3, r3, #12
 8001f5e:	0016      	movs	r6, r2
 8001f60:	469a      	mov	sl, r3
 8001f62:	0fca      	lsrs	r2, r1, #31
 8001f64:	004b      	lsls	r3, r1, #1
 8001f66:	0004      	movs	r4, r0
 8001f68:	4693      	mov	fp, r2
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	0d5b      	lsrs	r3, r3, #21
 8001f6e:	d100      	bne.n	8001f72 <__aeabi_dmul+0x26>
 8001f70:	e0d5      	b.n	800211e <__aeabi_dmul+0x1d2>
 8001f72:	4abb      	ldr	r2, [pc, #748]	@ (8002260 <__aeabi_dmul+0x314>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d100      	bne.n	8001f7a <__aeabi_dmul+0x2e>
 8001f78:	e0f8      	b.n	800216c <__aeabi_dmul+0x220>
 8001f7a:	4651      	mov	r1, sl
 8001f7c:	0f42      	lsrs	r2, r0, #29
 8001f7e:	00c9      	lsls	r1, r1, #3
 8001f80:	430a      	orrs	r2, r1
 8001f82:	2180      	movs	r1, #128	@ 0x80
 8001f84:	0409      	lsls	r1, r1, #16
 8001f86:	4311      	orrs	r1, r2
 8001f88:	00c2      	lsls	r2, r0, #3
 8001f8a:	4691      	mov	r9, r2
 8001f8c:	4ab5      	ldr	r2, [pc, #724]	@ (8002264 <__aeabi_dmul+0x318>)
 8001f8e:	468a      	mov	sl, r1
 8001f90:	189d      	adds	r5, r3, r2
 8001f92:	2300      	movs	r3, #0
 8001f94:	4698      	mov	r8, r3
 8001f96:	9302      	str	r3, [sp, #8]
 8001f98:	033c      	lsls	r4, r7, #12
 8001f9a:	007b      	lsls	r3, r7, #1
 8001f9c:	0ffa      	lsrs	r2, r7, #31
 8001f9e:	0030      	movs	r0, r6
 8001fa0:	0b24      	lsrs	r4, r4, #12
 8001fa2:	0d5b      	lsrs	r3, r3, #21
 8001fa4:	9200      	str	r2, [sp, #0]
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dmul+0x5e>
 8001fa8:	e096      	b.n	80020d8 <__aeabi_dmul+0x18c>
 8001faa:	4aad      	ldr	r2, [pc, #692]	@ (8002260 <__aeabi_dmul+0x314>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d031      	beq.n	8002014 <__aeabi_dmul+0xc8>
 8001fb0:	0f72      	lsrs	r2, r6, #29
 8001fb2:	00e4      	lsls	r4, r4, #3
 8001fb4:	4322      	orrs	r2, r4
 8001fb6:	2480      	movs	r4, #128	@ 0x80
 8001fb8:	0424      	lsls	r4, r4, #16
 8001fba:	4314      	orrs	r4, r2
 8001fbc:	4aa9      	ldr	r2, [pc, #676]	@ (8002264 <__aeabi_dmul+0x318>)
 8001fbe:	00f0      	lsls	r0, r6, #3
 8001fc0:	4694      	mov	ip, r2
 8001fc2:	4463      	add	r3, ip
 8001fc4:	195b      	adds	r3, r3, r5
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	9201      	str	r2, [sp, #4]
 8001fca:	4642      	mov	r2, r8
 8001fcc:	2600      	movs	r6, #0
 8001fce:	2a0a      	cmp	r2, #10
 8001fd0:	dc42      	bgt.n	8002058 <__aeabi_dmul+0x10c>
 8001fd2:	465a      	mov	r2, fp
 8001fd4:	9900      	ldr	r1, [sp, #0]
 8001fd6:	404a      	eors	r2, r1
 8001fd8:	4693      	mov	fp, r2
 8001fda:	4642      	mov	r2, r8
 8001fdc:	2a02      	cmp	r2, #2
 8001fde:	dc32      	bgt.n	8002046 <__aeabi_dmul+0xfa>
 8001fe0:	3a01      	subs	r2, #1
 8001fe2:	2a01      	cmp	r2, #1
 8001fe4:	d900      	bls.n	8001fe8 <__aeabi_dmul+0x9c>
 8001fe6:	e149      	b.n	800227c <__aeabi_dmul+0x330>
 8001fe8:	2e02      	cmp	r6, #2
 8001fea:	d100      	bne.n	8001fee <__aeabi_dmul+0xa2>
 8001fec:	e0ca      	b.n	8002184 <__aeabi_dmul+0x238>
 8001fee:	2e01      	cmp	r6, #1
 8001ff0:	d13d      	bne.n	800206e <__aeabi_dmul+0x122>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	2400      	movs	r4, #0
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	0010      	movs	r0, r2
 8001ffa:	465a      	mov	r2, fp
 8001ffc:	051b      	lsls	r3, r3, #20
 8001ffe:	4323      	orrs	r3, r4
 8002000:	07d2      	lsls	r2, r2, #31
 8002002:	4313      	orrs	r3, r2
 8002004:	0019      	movs	r1, r3
 8002006:	b007      	add	sp, #28
 8002008:	bcf0      	pop	{r4, r5, r6, r7}
 800200a:	46bb      	mov	fp, r7
 800200c:	46b2      	mov	sl, r6
 800200e:	46a9      	mov	r9, r5
 8002010:	46a0      	mov	r8, r4
 8002012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002014:	4b92      	ldr	r3, [pc, #584]	@ (8002260 <__aeabi_dmul+0x314>)
 8002016:	4326      	orrs	r6, r4
 8002018:	18eb      	adds	r3, r5, r3
 800201a:	2e00      	cmp	r6, #0
 800201c:	d100      	bne.n	8002020 <__aeabi_dmul+0xd4>
 800201e:	e0bb      	b.n	8002198 <__aeabi_dmul+0x24c>
 8002020:	2203      	movs	r2, #3
 8002022:	4641      	mov	r1, r8
 8002024:	4311      	orrs	r1, r2
 8002026:	465a      	mov	r2, fp
 8002028:	4688      	mov	r8, r1
 800202a:	9900      	ldr	r1, [sp, #0]
 800202c:	404a      	eors	r2, r1
 800202e:	2180      	movs	r1, #128	@ 0x80
 8002030:	0109      	lsls	r1, r1, #4
 8002032:	468c      	mov	ip, r1
 8002034:	0029      	movs	r1, r5
 8002036:	4461      	add	r1, ip
 8002038:	9101      	str	r1, [sp, #4]
 800203a:	4641      	mov	r1, r8
 800203c:	290a      	cmp	r1, #10
 800203e:	dd00      	ble.n	8002042 <__aeabi_dmul+0xf6>
 8002040:	e233      	b.n	80024aa <__aeabi_dmul+0x55e>
 8002042:	4693      	mov	fp, r2
 8002044:	2603      	movs	r6, #3
 8002046:	4642      	mov	r2, r8
 8002048:	2701      	movs	r7, #1
 800204a:	4097      	lsls	r7, r2
 800204c:	21a6      	movs	r1, #166	@ 0xa6
 800204e:	003a      	movs	r2, r7
 8002050:	00c9      	lsls	r1, r1, #3
 8002052:	400a      	ands	r2, r1
 8002054:	420f      	tst	r7, r1
 8002056:	d031      	beq.n	80020bc <__aeabi_dmul+0x170>
 8002058:	9e02      	ldr	r6, [sp, #8]
 800205a:	2e02      	cmp	r6, #2
 800205c:	d100      	bne.n	8002060 <__aeabi_dmul+0x114>
 800205e:	e235      	b.n	80024cc <__aeabi_dmul+0x580>
 8002060:	2e03      	cmp	r6, #3
 8002062:	d100      	bne.n	8002066 <__aeabi_dmul+0x11a>
 8002064:	e1d2      	b.n	800240c <__aeabi_dmul+0x4c0>
 8002066:	4654      	mov	r4, sl
 8002068:	4648      	mov	r0, r9
 800206a:	2e01      	cmp	r6, #1
 800206c:	d0c1      	beq.n	8001ff2 <__aeabi_dmul+0xa6>
 800206e:	9a01      	ldr	r2, [sp, #4]
 8002070:	4b7d      	ldr	r3, [pc, #500]	@ (8002268 <__aeabi_dmul+0x31c>)
 8002072:	4694      	mov	ip, r2
 8002074:	4463      	add	r3, ip
 8002076:	2b00      	cmp	r3, #0
 8002078:	dc00      	bgt.n	800207c <__aeabi_dmul+0x130>
 800207a:	e0c0      	b.n	80021fe <__aeabi_dmul+0x2b2>
 800207c:	0742      	lsls	r2, r0, #29
 800207e:	d009      	beq.n	8002094 <__aeabi_dmul+0x148>
 8002080:	220f      	movs	r2, #15
 8002082:	4002      	ands	r2, r0
 8002084:	2a04      	cmp	r2, #4
 8002086:	d005      	beq.n	8002094 <__aeabi_dmul+0x148>
 8002088:	1d02      	adds	r2, r0, #4
 800208a:	4282      	cmp	r2, r0
 800208c:	4180      	sbcs	r0, r0
 800208e:	4240      	negs	r0, r0
 8002090:	1824      	adds	r4, r4, r0
 8002092:	0010      	movs	r0, r2
 8002094:	01e2      	lsls	r2, r4, #7
 8002096:	d506      	bpl.n	80020a6 <__aeabi_dmul+0x15a>
 8002098:	4b74      	ldr	r3, [pc, #464]	@ (800226c <__aeabi_dmul+0x320>)
 800209a:	9a01      	ldr	r2, [sp, #4]
 800209c:	401c      	ands	r4, r3
 800209e:	2380      	movs	r3, #128	@ 0x80
 80020a0:	4694      	mov	ip, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4463      	add	r3, ip
 80020a6:	4a72      	ldr	r2, [pc, #456]	@ (8002270 <__aeabi_dmul+0x324>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	dc6b      	bgt.n	8002184 <__aeabi_dmul+0x238>
 80020ac:	0762      	lsls	r2, r4, #29
 80020ae:	08c0      	lsrs	r0, r0, #3
 80020b0:	0264      	lsls	r4, r4, #9
 80020b2:	055b      	lsls	r3, r3, #21
 80020b4:	4302      	orrs	r2, r0
 80020b6:	0b24      	lsrs	r4, r4, #12
 80020b8:	0d5b      	lsrs	r3, r3, #21
 80020ba:	e79d      	b.n	8001ff8 <__aeabi_dmul+0xac>
 80020bc:	2190      	movs	r1, #144	@ 0x90
 80020be:	0089      	lsls	r1, r1, #2
 80020c0:	420f      	tst	r7, r1
 80020c2:	d163      	bne.n	800218c <__aeabi_dmul+0x240>
 80020c4:	2288      	movs	r2, #136	@ 0x88
 80020c6:	423a      	tst	r2, r7
 80020c8:	d100      	bne.n	80020cc <__aeabi_dmul+0x180>
 80020ca:	e0d7      	b.n	800227c <__aeabi_dmul+0x330>
 80020cc:	9b00      	ldr	r3, [sp, #0]
 80020ce:	46a2      	mov	sl, r4
 80020d0:	469b      	mov	fp, r3
 80020d2:	4681      	mov	r9, r0
 80020d4:	9602      	str	r6, [sp, #8]
 80020d6:	e7bf      	b.n	8002058 <__aeabi_dmul+0x10c>
 80020d8:	0023      	movs	r3, r4
 80020da:	4333      	orrs	r3, r6
 80020dc:	d100      	bne.n	80020e0 <__aeabi_dmul+0x194>
 80020de:	e07f      	b.n	80021e0 <__aeabi_dmul+0x294>
 80020e0:	2c00      	cmp	r4, #0
 80020e2:	d100      	bne.n	80020e6 <__aeabi_dmul+0x19a>
 80020e4:	e1ad      	b.n	8002442 <__aeabi_dmul+0x4f6>
 80020e6:	0020      	movs	r0, r4
 80020e8:	f000 ff10 	bl	8002f0c <__clzsi2>
 80020ec:	0002      	movs	r2, r0
 80020ee:	0003      	movs	r3, r0
 80020f0:	3a0b      	subs	r2, #11
 80020f2:	201d      	movs	r0, #29
 80020f4:	0019      	movs	r1, r3
 80020f6:	1a82      	subs	r2, r0, r2
 80020f8:	0030      	movs	r0, r6
 80020fa:	3908      	subs	r1, #8
 80020fc:	40d0      	lsrs	r0, r2
 80020fe:	408c      	lsls	r4, r1
 8002100:	4304      	orrs	r4, r0
 8002102:	0030      	movs	r0, r6
 8002104:	4088      	lsls	r0, r1
 8002106:	4a5b      	ldr	r2, [pc, #364]	@ (8002274 <__aeabi_dmul+0x328>)
 8002108:	1aeb      	subs	r3, r5, r3
 800210a:	4694      	mov	ip, r2
 800210c:	4463      	add	r3, ip
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	9201      	str	r2, [sp, #4]
 8002112:	4642      	mov	r2, r8
 8002114:	2600      	movs	r6, #0
 8002116:	2a0a      	cmp	r2, #10
 8002118:	dc00      	bgt.n	800211c <__aeabi_dmul+0x1d0>
 800211a:	e75a      	b.n	8001fd2 <__aeabi_dmul+0x86>
 800211c:	e79c      	b.n	8002058 <__aeabi_dmul+0x10c>
 800211e:	4653      	mov	r3, sl
 8002120:	4303      	orrs	r3, r0
 8002122:	4699      	mov	r9, r3
 8002124:	d054      	beq.n	80021d0 <__aeabi_dmul+0x284>
 8002126:	4653      	mov	r3, sl
 8002128:	2b00      	cmp	r3, #0
 800212a:	d100      	bne.n	800212e <__aeabi_dmul+0x1e2>
 800212c:	e177      	b.n	800241e <__aeabi_dmul+0x4d2>
 800212e:	4650      	mov	r0, sl
 8002130:	f000 feec 	bl	8002f0c <__clzsi2>
 8002134:	230b      	movs	r3, #11
 8002136:	425b      	negs	r3, r3
 8002138:	469c      	mov	ip, r3
 800213a:	0002      	movs	r2, r0
 800213c:	4484      	add	ip, r0
 800213e:	0011      	movs	r1, r2
 8002140:	4650      	mov	r0, sl
 8002142:	3908      	subs	r1, #8
 8002144:	4088      	lsls	r0, r1
 8002146:	231d      	movs	r3, #29
 8002148:	4680      	mov	r8, r0
 800214a:	4660      	mov	r0, ip
 800214c:	1a1b      	subs	r3, r3, r0
 800214e:	0020      	movs	r0, r4
 8002150:	40d8      	lsrs	r0, r3
 8002152:	0003      	movs	r3, r0
 8002154:	4640      	mov	r0, r8
 8002156:	4303      	orrs	r3, r0
 8002158:	469a      	mov	sl, r3
 800215a:	0023      	movs	r3, r4
 800215c:	408b      	lsls	r3, r1
 800215e:	4699      	mov	r9, r3
 8002160:	2300      	movs	r3, #0
 8002162:	4d44      	ldr	r5, [pc, #272]	@ (8002274 <__aeabi_dmul+0x328>)
 8002164:	4698      	mov	r8, r3
 8002166:	1aad      	subs	r5, r5, r2
 8002168:	9302      	str	r3, [sp, #8]
 800216a:	e715      	b.n	8001f98 <__aeabi_dmul+0x4c>
 800216c:	4652      	mov	r2, sl
 800216e:	4302      	orrs	r2, r0
 8002170:	4691      	mov	r9, r2
 8002172:	d126      	bne.n	80021c2 <__aeabi_dmul+0x276>
 8002174:	2200      	movs	r2, #0
 8002176:	001d      	movs	r5, r3
 8002178:	2302      	movs	r3, #2
 800217a:	4692      	mov	sl, r2
 800217c:	3208      	adds	r2, #8
 800217e:	4690      	mov	r8, r2
 8002180:	9302      	str	r3, [sp, #8]
 8002182:	e709      	b.n	8001f98 <__aeabi_dmul+0x4c>
 8002184:	2400      	movs	r4, #0
 8002186:	2200      	movs	r2, #0
 8002188:	4b35      	ldr	r3, [pc, #212]	@ (8002260 <__aeabi_dmul+0x314>)
 800218a:	e735      	b.n	8001ff8 <__aeabi_dmul+0xac>
 800218c:	2300      	movs	r3, #0
 800218e:	2480      	movs	r4, #128	@ 0x80
 8002190:	469b      	mov	fp, r3
 8002192:	0324      	lsls	r4, r4, #12
 8002194:	4b32      	ldr	r3, [pc, #200]	@ (8002260 <__aeabi_dmul+0x314>)
 8002196:	e72f      	b.n	8001ff8 <__aeabi_dmul+0xac>
 8002198:	2202      	movs	r2, #2
 800219a:	4641      	mov	r1, r8
 800219c:	4311      	orrs	r1, r2
 800219e:	2280      	movs	r2, #128	@ 0x80
 80021a0:	0112      	lsls	r2, r2, #4
 80021a2:	4694      	mov	ip, r2
 80021a4:	002a      	movs	r2, r5
 80021a6:	4462      	add	r2, ip
 80021a8:	4688      	mov	r8, r1
 80021aa:	9201      	str	r2, [sp, #4]
 80021ac:	290a      	cmp	r1, #10
 80021ae:	dd00      	ble.n	80021b2 <__aeabi_dmul+0x266>
 80021b0:	e752      	b.n	8002058 <__aeabi_dmul+0x10c>
 80021b2:	465a      	mov	r2, fp
 80021b4:	2000      	movs	r0, #0
 80021b6:	9900      	ldr	r1, [sp, #0]
 80021b8:	0004      	movs	r4, r0
 80021ba:	404a      	eors	r2, r1
 80021bc:	4693      	mov	fp, r2
 80021be:	2602      	movs	r6, #2
 80021c0:	e70b      	b.n	8001fda <__aeabi_dmul+0x8e>
 80021c2:	220c      	movs	r2, #12
 80021c4:	001d      	movs	r5, r3
 80021c6:	2303      	movs	r3, #3
 80021c8:	4681      	mov	r9, r0
 80021ca:	4690      	mov	r8, r2
 80021cc:	9302      	str	r3, [sp, #8]
 80021ce:	e6e3      	b.n	8001f98 <__aeabi_dmul+0x4c>
 80021d0:	2300      	movs	r3, #0
 80021d2:	469a      	mov	sl, r3
 80021d4:	3304      	adds	r3, #4
 80021d6:	4698      	mov	r8, r3
 80021d8:	3b03      	subs	r3, #3
 80021da:	2500      	movs	r5, #0
 80021dc:	9302      	str	r3, [sp, #8]
 80021de:	e6db      	b.n	8001f98 <__aeabi_dmul+0x4c>
 80021e0:	4642      	mov	r2, r8
 80021e2:	3301      	adds	r3, #1
 80021e4:	431a      	orrs	r2, r3
 80021e6:	002b      	movs	r3, r5
 80021e8:	4690      	mov	r8, r2
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	9201      	str	r2, [sp, #4]
 80021ee:	4642      	mov	r2, r8
 80021f0:	2400      	movs	r4, #0
 80021f2:	2000      	movs	r0, #0
 80021f4:	2601      	movs	r6, #1
 80021f6:	2a0a      	cmp	r2, #10
 80021f8:	dc00      	bgt.n	80021fc <__aeabi_dmul+0x2b0>
 80021fa:	e6ea      	b.n	8001fd2 <__aeabi_dmul+0x86>
 80021fc:	e72c      	b.n	8002058 <__aeabi_dmul+0x10c>
 80021fe:	2201      	movs	r2, #1
 8002200:	1ad2      	subs	r2, r2, r3
 8002202:	2a38      	cmp	r2, #56	@ 0x38
 8002204:	dd00      	ble.n	8002208 <__aeabi_dmul+0x2bc>
 8002206:	e6f4      	b.n	8001ff2 <__aeabi_dmul+0xa6>
 8002208:	2a1f      	cmp	r2, #31
 800220a:	dc00      	bgt.n	800220e <__aeabi_dmul+0x2c2>
 800220c:	e12a      	b.n	8002464 <__aeabi_dmul+0x518>
 800220e:	211f      	movs	r1, #31
 8002210:	4249      	negs	r1, r1
 8002212:	1acb      	subs	r3, r1, r3
 8002214:	0021      	movs	r1, r4
 8002216:	40d9      	lsrs	r1, r3
 8002218:	000b      	movs	r3, r1
 800221a:	2a20      	cmp	r2, #32
 800221c:	d005      	beq.n	800222a <__aeabi_dmul+0x2de>
 800221e:	4a16      	ldr	r2, [pc, #88]	@ (8002278 <__aeabi_dmul+0x32c>)
 8002220:	9d01      	ldr	r5, [sp, #4]
 8002222:	4694      	mov	ip, r2
 8002224:	4465      	add	r5, ip
 8002226:	40ac      	lsls	r4, r5
 8002228:	4320      	orrs	r0, r4
 800222a:	1e42      	subs	r2, r0, #1
 800222c:	4190      	sbcs	r0, r2
 800222e:	4318      	orrs	r0, r3
 8002230:	2307      	movs	r3, #7
 8002232:	0019      	movs	r1, r3
 8002234:	2400      	movs	r4, #0
 8002236:	4001      	ands	r1, r0
 8002238:	4203      	tst	r3, r0
 800223a:	d00c      	beq.n	8002256 <__aeabi_dmul+0x30a>
 800223c:	230f      	movs	r3, #15
 800223e:	4003      	ands	r3, r0
 8002240:	2b04      	cmp	r3, #4
 8002242:	d100      	bne.n	8002246 <__aeabi_dmul+0x2fa>
 8002244:	e140      	b.n	80024c8 <__aeabi_dmul+0x57c>
 8002246:	1d03      	adds	r3, r0, #4
 8002248:	4283      	cmp	r3, r0
 800224a:	41a4      	sbcs	r4, r4
 800224c:	0018      	movs	r0, r3
 800224e:	4264      	negs	r4, r4
 8002250:	0761      	lsls	r1, r4, #29
 8002252:	0264      	lsls	r4, r4, #9
 8002254:	0b24      	lsrs	r4, r4, #12
 8002256:	08c2      	lsrs	r2, r0, #3
 8002258:	2300      	movs	r3, #0
 800225a:	430a      	orrs	r2, r1
 800225c:	e6cc      	b.n	8001ff8 <__aeabi_dmul+0xac>
 800225e:	46c0      	nop			@ (mov r8, r8)
 8002260:	000007ff 	.word	0x000007ff
 8002264:	fffffc01 	.word	0xfffffc01
 8002268:	000003ff 	.word	0x000003ff
 800226c:	feffffff 	.word	0xfeffffff
 8002270:	000007fe 	.word	0x000007fe
 8002274:	fffffc0d 	.word	0xfffffc0d
 8002278:	0000043e 	.word	0x0000043e
 800227c:	4649      	mov	r1, r9
 800227e:	464a      	mov	r2, r9
 8002280:	0409      	lsls	r1, r1, #16
 8002282:	0c09      	lsrs	r1, r1, #16
 8002284:	000d      	movs	r5, r1
 8002286:	0c16      	lsrs	r6, r2, #16
 8002288:	0c02      	lsrs	r2, r0, #16
 800228a:	0400      	lsls	r0, r0, #16
 800228c:	0c00      	lsrs	r0, r0, #16
 800228e:	4345      	muls	r5, r0
 8002290:	46ac      	mov	ip, r5
 8002292:	0005      	movs	r5, r0
 8002294:	4375      	muls	r5, r6
 8002296:	46a8      	mov	r8, r5
 8002298:	0015      	movs	r5, r2
 800229a:	000f      	movs	r7, r1
 800229c:	4375      	muls	r5, r6
 800229e:	9200      	str	r2, [sp, #0]
 80022a0:	9502      	str	r5, [sp, #8]
 80022a2:	002a      	movs	r2, r5
 80022a4:	9d00      	ldr	r5, [sp, #0]
 80022a6:	436f      	muls	r7, r5
 80022a8:	4665      	mov	r5, ip
 80022aa:	0c2d      	lsrs	r5, r5, #16
 80022ac:	46a9      	mov	r9, r5
 80022ae:	4447      	add	r7, r8
 80022b0:	444f      	add	r7, r9
 80022b2:	45b8      	cmp	r8, r7
 80022b4:	d905      	bls.n	80022c2 <__aeabi_dmul+0x376>
 80022b6:	0015      	movs	r5, r2
 80022b8:	2280      	movs	r2, #128	@ 0x80
 80022ba:	0252      	lsls	r2, r2, #9
 80022bc:	4690      	mov	r8, r2
 80022be:	4445      	add	r5, r8
 80022c0:	9502      	str	r5, [sp, #8]
 80022c2:	0c3d      	lsrs	r5, r7, #16
 80022c4:	9503      	str	r5, [sp, #12]
 80022c6:	4665      	mov	r5, ip
 80022c8:	042d      	lsls	r5, r5, #16
 80022ca:	043f      	lsls	r7, r7, #16
 80022cc:	0c2d      	lsrs	r5, r5, #16
 80022ce:	46ac      	mov	ip, r5
 80022d0:	003d      	movs	r5, r7
 80022d2:	4465      	add	r5, ip
 80022d4:	9504      	str	r5, [sp, #16]
 80022d6:	0c25      	lsrs	r5, r4, #16
 80022d8:	0424      	lsls	r4, r4, #16
 80022da:	0c24      	lsrs	r4, r4, #16
 80022dc:	46ac      	mov	ip, r5
 80022de:	0025      	movs	r5, r4
 80022e0:	4375      	muls	r5, r6
 80022e2:	46a8      	mov	r8, r5
 80022e4:	4665      	mov	r5, ip
 80022e6:	000f      	movs	r7, r1
 80022e8:	4369      	muls	r1, r5
 80022ea:	4441      	add	r1, r8
 80022ec:	4689      	mov	r9, r1
 80022ee:	4367      	muls	r7, r4
 80022f0:	0c39      	lsrs	r1, r7, #16
 80022f2:	4449      	add	r1, r9
 80022f4:	436e      	muls	r6, r5
 80022f6:	4588      	cmp	r8, r1
 80022f8:	d903      	bls.n	8002302 <__aeabi_dmul+0x3b6>
 80022fa:	2280      	movs	r2, #128	@ 0x80
 80022fc:	0252      	lsls	r2, r2, #9
 80022fe:	4690      	mov	r8, r2
 8002300:	4446      	add	r6, r8
 8002302:	0c0d      	lsrs	r5, r1, #16
 8002304:	46a8      	mov	r8, r5
 8002306:	0035      	movs	r5, r6
 8002308:	4445      	add	r5, r8
 800230a:	9505      	str	r5, [sp, #20]
 800230c:	9d03      	ldr	r5, [sp, #12]
 800230e:	043f      	lsls	r7, r7, #16
 8002310:	46a8      	mov	r8, r5
 8002312:	0c3f      	lsrs	r7, r7, #16
 8002314:	0409      	lsls	r1, r1, #16
 8002316:	19c9      	adds	r1, r1, r7
 8002318:	4488      	add	r8, r1
 800231a:	4645      	mov	r5, r8
 800231c:	9503      	str	r5, [sp, #12]
 800231e:	4655      	mov	r5, sl
 8002320:	042e      	lsls	r6, r5, #16
 8002322:	0c36      	lsrs	r6, r6, #16
 8002324:	0c2f      	lsrs	r7, r5, #16
 8002326:	0035      	movs	r5, r6
 8002328:	4345      	muls	r5, r0
 800232a:	4378      	muls	r0, r7
 800232c:	4681      	mov	r9, r0
 800232e:	0038      	movs	r0, r7
 8002330:	46a8      	mov	r8, r5
 8002332:	0c2d      	lsrs	r5, r5, #16
 8002334:	46aa      	mov	sl, r5
 8002336:	9a00      	ldr	r2, [sp, #0]
 8002338:	4350      	muls	r0, r2
 800233a:	4372      	muls	r2, r6
 800233c:	444a      	add	r2, r9
 800233e:	4452      	add	r2, sl
 8002340:	4591      	cmp	r9, r2
 8002342:	d903      	bls.n	800234c <__aeabi_dmul+0x400>
 8002344:	2580      	movs	r5, #128	@ 0x80
 8002346:	026d      	lsls	r5, r5, #9
 8002348:	46a9      	mov	r9, r5
 800234a:	4448      	add	r0, r9
 800234c:	0c15      	lsrs	r5, r2, #16
 800234e:	46a9      	mov	r9, r5
 8002350:	4645      	mov	r5, r8
 8002352:	042d      	lsls	r5, r5, #16
 8002354:	0c2d      	lsrs	r5, r5, #16
 8002356:	46a8      	mov	r8, r5
 8002358:	4665      	mov	r5, ip
 800235a:	437d      	muls	r5, r7
 800235c:	0412      	lsls	r2, r2, #16
 800235e:	4448      	add	r0, r9
 8002360:	4490      	add	r8, r2
 8002362:	46a9      	mov	r9, r5
 8002364:	0032      	movs	r2, r6
 8002366:	4665      	mov	r5, ip
 8002368:	4362      	muls	r2, r4
 800236a:	436e      	muls	r6, r5
 800236c:	437c      	muls	r4, r7
 800236e:	0c17      	lsrs	r7, r2, #16
 8002370:	1936      	adds	r6, r6, r4
 8002372:	19bf      	adds	r7, r7, r6
 8002374:	42bc      	cmp	r4, r7
 8002376:	d903      	bls.n	8002380 <__aeabi_dmul+0x434>
 8002378:	2480      	movs	r4, #128	@ 0x80
 800237a:	0264      	lsls	r4, r4, #9
 800237c:	46a4      	mov	ip, r4
 800237e:	44e1      	add	r9, ip
 8002380:	9c02      	ldr	r4, [sp, #8]
 8002382:	9e03      	ldr	r6, [sp, #12]
 8002384:	46a4      	mov	ip, r4
 8002386:	9d05      	ldr	r5, [sp, #20]
 8002388:	4466      	add	r6, ip
 800238a:	428e      	cmp	r6, r1
 800238c:	4189      	sbcs	r1, r1
 800238e:	46ac      	mov	ip, r5
 8002390:	0412      	lsls	r2, r2, #16
 8002392:	043c      	lsls	r4, r7, #16
 8002394:	0c12      	lsrs	r2, r2, #16
 8002396:	18a2      	adds	r2, r4, r2
 8002398:	4462      	add	r2, ip
 800239a:	4249      	negs	r1, r1
 800239c:	1854      	adds	r4, r2, r1
 800239e:	4446      	add	r6, r8
 80023a0:	46a4      	mov	ip, r4
 80023a2:	4546      	cmp	r6, r8
 80023a4:	41a4      	sbcs	r4, r4
 80023a6:	4682      	mov	sl, r0
 80023a8:	4264      	negs	r4, r4
 80023aa:	46a0      	mov	r8, r4
 80023ac:	42aa      	cmp	r2, r5
 80023ae:	4192      	sbcs	r2, r2
 80023b0:	458c      	cmp	ip, r1
 80023b2:	4189      	sbcs	r1, r1
 80023b4:	44e2      	add	sl, ip
 80023b6:	44d0      	add	r8, sl
 80023b8:	4249      	negs	r1, r1
 80023ba:	4252      	negs	r2, r2
 80023bc:	430a      	orrs	r2, r1
 80023be:	45a0      	cmp	r8, r4
 80023c0:	41a4      	sbcs	r4, r4
 80023c2:	4582      	cmp	sl, r0
 80023c4:	4189      	sbcs	r1, r1
 80023c6:	4264      	negs	r4, r4
 80023c8:	4249      	negs	r1, r1
 80023ca:	430c      	orrs	r4, r1
 80023cc:	4641      	mov	r1, r8
 80023ce:	0c3f      	lsrs	r7, r7, #16
 80023d0:	19d2      	adds	r2, r2, r7
 80023d2:	1912      	adds	r2, r2, r4
 80023d4:	0dcc      	lsrs	r4, r1, #23
 80023d6:	9904      	ldr	r1, [sp, #16]
 80023d8:	0270      	lsls	r0, r6, #9
 80023da:	4308      	orrs	r0, r1
 80023dc:	1e41      	subs	r1, r0, #1
 80023de:	4188      	sbcs	r0, r1
 80023e0:	4641      	mov	r1, r8
 80023e2:	444a      	add	r2, r9
 80023e4:	0df6      	lsrs	r6, r6, #23
 80023e6:	0252      	lsls	r2, r2, #9
 80023e8:	4330      	orrs	r0, r6
 80023ea:	0249      	lsls	r1, r1, #9
 80023ec:	4314      	orrs	r4, r2
 80023ee:	4308      	orrs	r0, r1
 80023f0:	01d2      	lsls	r2, r2, #7
 80023f2:	d535      	bpl.n	8002460 <__aeabi_dmul+0x514>
 80023f4:	2201      	movs	r2, #1
 80023f6:	0843      	lsrs	r3, r0, #1
 80023f8:	4002      	ands	r2, r0
 80023fa:	4313      	orrs	r3, r2
 80023fc:	07e0      	lsls	r0, r4, #31
 80023fe:	4318      	orrs	r0, r3
 8002400:	0864      	lsrs	r4, r4, #1
 8002402:	e634      	b.n	800206e <__aeabi_dmul+0x122>
 8002404:	9b00      	ldr	r3, [sp, #0]
 8002406:	46a2      	mov	sl, r4
 8002408:	469b      	mov	fp, r3
 800240a:	4681      	mov	r9, r0
 800240c:	2480      	movs	r4, #128	@ 0x80
 800240e:	4653      	mov	r3, sl
 8002410:	0324      	lsls	r4, r4, #12
 8002412:	431c      	orrs	r4, r3
 8002414:	0324      	lsls	r4, r4, #12
 8002416:	464a      	mov	r2, r9
 8002418:	4b2e      	ldr	r3, [pc, #184]	@ (80024d4 <__aeabi_dmul+0x588>)
 800241a:	0b24      	lsrs	r4, r4, #12
 800241c:	e5ec      	b.n	8001ff8 <__aeabi_dmul+0xac>
 800241e:	f000 fd75 	bl	8002f0c <__clzsi2>
 8002422:	2315      	movs	r3, #21
 8002424:	469c      	mov	ip, r3
 8002426:	4484      	add	ip, r0
 8002428:	0002      	movs	r2, r0
 800242a:	4663      	mov	r3, ip
 800242c:	3220      	adds	r2, #32
 800242e:	2b1c      	cmp	r3, #28
 8002430:	dc00      	bgt.n	8002434 <__aeabi_dmul+0x4e8>
 8002432:	e684      	b.n	800213e <__aeabi_dmul+0x1f2>
 8002434:	2300      	movs	r3, #0
 8002436:	4699      	mov	r9, r3
 8002438:	0023      	movs	r3, r4
 800243a:	3808      	subs	r0, #8
 800243c:	4083      	lsls	r3, r0
 800243e:	469a      	mov	sl, r3
 8002440:	e68e      	b.n	8002160 <__aeabi_dmul+0x214>
 8002442:	f000 fd63 	bl	8002f0c <__clzsi2>
 8002446:	0002      	movs	r2, r0
 8002448:	0003      	movs	r3, r0
 800244a:	3215      	adds	r2, #21
 800244c:	3320      	adds	r3, #32
 800244e:	2a1c      	cmp	r2, #28
 8002450:	dc00      	bgt.n	8002454 <__aeabi_dmul+0x508>
 8002452:	e64e      	b.n	80020f2 <__aeabi_dmul+0x1a6>
 8002454:	0002      	movs	r2, r0
 8002456:	0034      	movs	r4, r6
 8002458:	3a08      	subs	r2, #8
 800245a:	2000      	movs	r0, #0
 800245c:	4094      	lsls	r4, r2
 800245e:	e652      	b.n	8002106 <__aeabi_dmul+0x1ba>
 8002460:	9301      	str	r3, [sp, #4]
 8002462:	e604      	b.n	800206e <__aeabi_dmul+0x122>
 8002464:	4b1c      	ldr	r3, [pc, #112]	@ (80024d8 <__aeabi_dmul+0x58c>)
 8002466:	0021      	movs	r1, r4
 8002468:	469c      	mov	ip, r3
 800246a:	0003      	movs	r3, r0
 800246c:	9d01      	ldr	r5, [sp, #4]
 800246e:	40d3      	lsrs	r3, r2
 8002470:	4465      	add	r5, ip
 8002472:	40a9      	lsls	r1, r5
 8002474:	4319      	orrs	r1, r3
 8002476:	0003      	movs	r3, r0
 8002478:	40ab      	lsls	r3, r5
 800247a:	1e58      	subs	r0, r3, #1
 800247c:	4183      	sbcs	r3, r0
 800247e:	4319      	orrs	r1, r3
 8002480:	0008      	movs	r0, r1
 8002482:	40d4      	lsrs	r4, r2
 8002484:	074b      	lsls	r3, r1, #29
 8002486:	d009      	beq.n	800249c <__aeabi_dmul+0x550>
 8002488:	230f      	movs	r3, #15
 800248a:	400b      	ands	r3, r1
 800248c:	2b04      	cmp	r3, #4
 800248e:	d005      	beq.n	800249c <__aeabi_dmul+0x550>
 8002490:	1d0b      	adds	r3, r1, #4
 8002492:	428b      	cmp	r3, r1
 8002494:	4180      	sbcs	r0, r0
 8002496:	4240      	negs	r0, r0
 8002498:	1824      	adds	r4, r4, r0
 800249a:	0018      	movs	r0, r3
 800249c:	0223      	lsls	r3, r4, #8
 800249e:	d400      	bmi.n	80024a2 <__aeabi_dmul+0x556>
 80024a0:	e6d6      	b.n	8002250 <__aeabi_dmul+0x304>
 80024a2:	2301      	movs	r3, #1
 80024a4:	2400      	movs	r4, #0
 80024a6:	2200      	movs	r2, #0
 80024a8:	e5a6      	b.n	8001ff8 <__aeabi_dmul+0xac>
 80024aa:	290f      	cmp	r1, #15
 80024ac:	d1aa      	bne.n	8002404 <__aeabi_dmul+0x4b8>
 80024ae:	2380      	movs	r3, #128	@ 0x80
 80024b0:	4652      	mov	r2, sl
 80024b2:	031b      	lsls	r3, r3, #12
 80024b4:	421a      	tst	r2, r3
 80024b6:	d0a9      	beq.n	800240c <__aeabi_dmul+0x4c0>
 80024b8:	421c      	tst	r4, r3
 80024ba:	d1a7      	bne.n	800240c <__aeabi_dmul+0x4c0>
 80024bc:	431c      	orrs	r4, r3
 80024be:	9b00      	ldr	r3, [sp, #0]
 80024c0:	0002      	movs	r2, r0
 80024c2:	469b      	mov	fp, r3
 80024c4:	4b03      	ldr	r3, [pc, #12]	@ (80024d4 <__aeabi_dmul+0x588>)
 80024c6:	e597      	b.n	8001ff8 <__aeabi_dmul+0xac>
 80024c8:	2400      	movs	r4, #0
 80024ca:	e6c1      	b.n	8002250 <__aeabi_dmul+0x304>
 80024cc:	2400      	movs	r4, #0
 80024ce:	4b01      	ldr	r3, [pc, #4]	@ (80024d4 <__aeabi_dmul+0x588>)
 80024d0:	0022      	movs	r2, r4
 80024d2:	e591      	b.n	8001ff8 <__aeabi_dmul+0xac>
 80024d4:	000007ff 	.word	0x000007ff
 80024d8:	0000041e 	.word	0x0000041e

080024dc <__aeabi_dsub>:
 80024dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024de:	464e      	mov	r6, r9
 80024e0:	4645      	mov	r5, r8
 80024e2:	46de      	mov	lr, fp
 80024e4:	4657      	mov	r7, sl
 80024e6:	b5e0      	push	{r5, r6, r7, lr}
 80024e8:	b085      	sub	sp, #20
 80024ea:	9000      	str	r0, [sp, #0]
 80024ec:	9101      	str	r1, [sp, #4]
 80024ee:	030c      	lsls	r4, r1, #12
 80024f0:	004f      	lsls	r7, r1, #1
 80024f2:	0fce      	lsrs	r6, r1, #31
 80024f4:	0a61      	lsrs	r1, r4, #9
 80024f6:	9c00      	ldr	r4, [sp, #0]
 80024f8:	46b0      	mov	r8, r6
 80024fa:	0f64      	lsrs	r4, r4, #29
 80024fc:	430c      	orrs	r4, r1
 80024fe:	9900      	ldr	r1, [sp, #0]
 8002500:	0d7f      	lsrs	r7, r7, #21
 8002502:	00c8      	lsls	r0, r1, #3
 8002504:	0011      	movs	r1, r2
 8002506:	001a      	movs	r2, r3
 8002508:	031b      	lsls	r3, r3, #12
 800250a:	469c      	mov	ip, r3
 800250c:	9100      	str	r1, [sp, #0]
 800250e:	9201      	str	r2, [sp, #4]
 8002510:	0051      	lsls	r1, r2, #1
 8002512:	0d4b      	lsrs	r3, r1, #21
 8002514:	4699      	mov	r9, r3
 8002516:	9b01      	ldr	r3, [sp, #4]
 8002518:	9d00      	ldr	r5, [sp, #0]
 800251a:	0fd9      	lsrs	r1, r3, #31
 800251c:	4663      	mov	r3, ip
 800251e:	0f6a      	lsrs	r2, r5, #29
 8002520:	0a5b      	lsrs	r3, r3, #9
 8002522:	4313      	orrs	r3, r2
 8002524:	00ea      	lsls	r2, r5, #3
 8002526:	4694      	mov	ip, r2
 8002528:	4693      	mov	fp, r2
 800252a:	4ac1      	ldr	r2, [pc, #772]	@ (8002830 <__aeabi_dsub+0x354>)
 800252c:	9003      	str	r0, [sp, #12]
 800252e:	9302      	str	r3, [sp, #8]
 8002530:	4591      	cmp	r9, r2
 8002532:	d100      	bne.n	8002536 <__aeabi_dsub+0x5a>
 8002534:	e0cd      	b.n	80026d2 <__aeabi_dsub+0x1f6>
 8002536:	2501      	movs	r5, #1
 8002538:	4069      	eors	r1, r5
 800253a:	464d      	mov	r5, r9
 800253c:	1b7d      	subs	r5, r7, r5
 800253e:	46aa      	mov	sl, r5
 8002540:	428e      	cmp	r6, r1
 8002542:	d100      	bne.n	8002546 <__aeabi_dsub+0x6a>
 8002544:	e080      	b.n	8002648 <__aeabi_dsub+0x16c>
 8002546:	2d00      	cmp	r5, #0
 8002548:	dc00      	bgt.n	800254c <__aeabi_dsub+0x70>
 800254a:	e335      	b.n	8002bb8 <__aeabi_dsub+0x6dc>
 800254c:	4649      	mov	r1, r9
 800254e:	2900      	cmp	r1, #0
 8002550:	d100      	bne.n	8002554 <__aeabi_dsub+0x78>
 8002552:	e0df      	b.n	8002714 <__aeabi_dsub+0x238>
 8002554:	4297      	cmp	r7, r2
 8002556:	d100      	bne.n	800255a <__aeabi_dsub+0x7e>
 8002558:	e194      	b.n	8002884 <__aeabi_dsub+0x3a8>
 800255a:	4652      	mov	r2, sl
 800255c:	2501      	movs	r5, #1
 800255e:	2a38      	cmp	r2, #56	@ 0x38
 8002560:	dc19      	bgt.n	8002596 <__aeabi_dsub+0xba>
 8002562:	2280      	movs	r2, #128	@ 0x80
 8002564:	9b02      	ldr	r3, [sp, #8]
 8002566:	0412      	lsls	r2, r2, #16
 8002568:	4313      	orrs	r3, r2
 800256a:	9302      	str	r3, [sp, #8]
 800256c:	4652      	mov	r2, sl
 800256e:	2a1f      	cmp	r2, #31
 8002570:	dd00      	ble.n	8002574 <__aeabi_dsub+0x98>
 8002572:	e1e3      	b.n	800293c <__aeabi_dsub+0x460>
 8002574:	4653      	mov	r3, sl
 8002576:	2220      	movs	r2, #32
 8002578:	4661      	mov	r1, ip
 800257a:	9d02      	ldr	r5, [sp, #8]
 800257c:	1ad2      	subs	r2, r2, r3
 800257e:	4095      	lsls	r5, r2
 8002580:	40d9      	lsrs	r1, r3
 8002582:	430d      	orrs	r5, r1
 8002584:	4661      	mov	r1, ip
 8002586:	4091      	lsls	r1, r2
 8002588:	000a      	movs	r2, r1
 800258a:	1e51      	subs	r1, r2, #1
 800258c:	418a      	sbcs	r2, r1
 800258e:	4315      	orrs	r5, r2
 8002590:	9a02      	ldr	r2, [sp, #8]
 8002592:	40da      	lsrs	r2, r3
 8002594:	1aa4      	subs	r4, r4, r2
 8002596:	1b45      	subs	r5, r0, r5
 8002598:	42a8      	cmp	r0, r5
 800259a:	4180      	sbcs	r0, r0
 800259c:	4240      	negs	r0, r0
 800259e:	1a24      	subs	r4, r4, r0
 80025a0:	0223      	lsls	r3, r4, #8
 80025a2:	d400      	bmi.n	80025a6 <__aeabi_dsub+0xca>
 80025a4:	e13d      	b.n	8002822 <__aeabi_dsub+0x346>
 80025a6:	0264      	lsls	r4, r4, #9
 80025a8:	0a64      	lsrs	r4, r4, #9
 80025aa:	2c00      	cmp	r4, #0
 80025ac:	d100      	bne.n	80025b0 <__aeabi_dsub+0xd4>
 80025ae:	e147      	b.n	8002840 <__aeabi_dsub+0x364>
 80025b0:	0020      	movs	r0, r4
 80025b2:	f000 fcab 	bl	8002f0c <__clzsi2>
 80025b6:	0003      	movs	r3, r0
 80025b8:	3b08      	subs	r3, #8
 80025ba:	2120      	movs	r1, #32
 80025bc:	0028      	movs	r0, r5
 80025be:	1aca      	subs	r2, r1, r3
 80025c0:	40d0      	lsrs	r0, r2
 80025c2:	409c      	lsls	r4, r3
 80025c4:	0002      	movs	r2, r0
 80025c6:	409d      	lsls	r5, r3
 80025c8:	4322      	orrs	r2, r4
 80025ca:	429f      	cmp	r7, r3
 80025cc:	dd00      	ble.n	80025d0 <__aeabi_dsub+0xf4>
 80025ce:	e177      	b.n	80028c0 <__aeabi_dsub+0x3e4>
 80025d0:	1bd8      	subs	r0, r3, r7
 80025d2:	3001      	adds	r0, #1
 80025d4:	1a09      	subs	r1, r1, r0
 80025d6:	002c      	movs	r4, r5
 80025d8:	408d      	lsls	r5, r1
 80025da:	40c4      	lsrs	r4, r0
 80025dc:	1e6b      	subs	r3, r5, #1
 80025de:	419d      	sbcs	r5, r3
 80025e0:	0013      	movs	r3, r2
 80025e2:	40c2      	lsrs	r2, r0
 80025e4:	408b      	lsls	r3, r1
 80025e6:	4325      	orrs	r5, r4
 80025e8:	2700      	movs	r7, #0
 80025ea:	0014      	movs	r4, r2
 80025ec:	431d      	orrs	r5, r3
 80025ee:	076b      	lsls	r3, r5, #29
 80025f0:	d009      	beq.n	8002606 <__aeabi_dsub+0x12a>
 80025f2:	230f      	movs	r3, #15
 80025f4:	402b      	ands	r3, r5
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d005      	beq.n	8002606 <__aeabi_dsub+0x12a>
 80025fa:	1d2b      	adds	r3, r5, #4
 80025fc:	42ab      	cmp	r3, r5
 80025fe:	41ad      	sbcs	r5, r5
 8002600:	426d      	negs	r5, r5
 8002602:	1964      	adds	r4, r4, r5
 8002604:	001d      	movs	r5, r3
 8002606:	0223      	lsls	r3, r4, #8
 8002608:	d400      	bmi.n	800260c <__aeabi_dsub+0x130>
 800260a:	e140      	b.n	800288e <__aeabi_dsub+0x3b2>
 800260c:	4a88      	ldr	r2, [pc, #544]	@ (8002830 <__aeabi_dsub+0x354>)
 800260e:	3701      	adds	r7, #1
 8002610:	4297      	cmp	r7, r2
 8002612:	d100      	bne.n	8002616 <__aeabi_dsub+0x13a>
 8002614:	e101      	b.n	800281a <__aeabi_dsub+0x33e>
 8002616:	2601      	movs	r6, #1
 8002618:	4643      	mov	r3, r8
 800261a:	4986      	ldr	r1, [pc, #536]	@ (8002834 <__aeabi_dsub+0x358>)
 800261c:	08ed      	lsrs	r5, r5, #3
 800261e:	4021      	ands	r1, r4
 8002620:	074a      	lsls	r2, r1, #29
 8002622:	432a      	orrs	r2, r5
 8002624:	057c      	lsls	r4, r7, #21
 8002626:	024d      	lsls	r5, r1, #9
 8002628:	0b2d      	lsrs	r5, r5, #12
 800262a:	0d64      	lsrs	r4, r4, #21
 800262c:	401e      	ands	r6, r3
 800262e:	0524      	lsls	r4, r4, #20
 8002630:	432c      	orrs	r4, r5
 8002632:	07f6      	lsls	r6, r6, #31
 8002634:	4334      	orrs	r4, r6
 8002636:	0010      	movs	r0, r2
 8002638:	0021      	movs	r1, r4
 800263a:	b005      	add	sp, #20
 800263c:	bcf0      	pop	{r4, r5, r6, r7}
 800263e:	46bb      	mov	fp, r7
 8002640:	46b2      	mov	sl, r6
 8002642:	46a9      	mov	r9, r5
 8002644:	46a0      	mov	r8, r4
 8002646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002648:	2d00      	cmp	r5, #0
 800264a:	dc00      	bgt.n	800264e <__aeabi_dsub+0x172>
 800264c:	e2d0      	b.n	8002bf0 <__aeabi_dsub+0x714>
 800264e:	4649      	mov	r1, r9
 8002650:	2900      	cmp	r1, #0
 8002652:	d000      	beq.n	8002656 <__aeabi_dsub+0x17a>
 8002654:	e0d4      	b.n	8002800 <__aeabi_dsub+0x324>
 8002656:	4661      	mov	r1, ip
 8002658:	9b02      	ldr	r3, [sp, #8]
 800265a:	4319      	orrs	r1, r3
 800265c:	d100      	bne.n	8002660 <__aeabi_dsub+0x184>
 800265e:	e12b      	b.n	80028b8 <__aeabi_dsub+0x3dc>
 8002660:	1e69      	subs	r1, r5, #1
 8002662:	2d01      	cmp	r5, #1
 8002664:	d100      	bne.n	8002668 <__aeabi_dsub+0x18c>
 8002666:	e1d9      	b.n	8002a1c <__aeabi_dsub+0x540>
 8002668:	4295      	cmp	r5, r2
 800266a:	d100      	bne.n	800266e <__aeabi_dsub+0x192>
 800266c:	e10a      	b.n	8002884 <__aeabi_dsub+0x3a8>
 800266e:	2501      	movs	r5, #1
 8002670:	2938      	cmp	r1, #56	@ 0x38
 8002672:	dc17      	bgt.n	80026a4 <__aeabi_dsub+0x1c8>
 8002674:	468a      	mov	sl, r1
 8002676:	4653      	mov	r3, sl
 8002678:	2b1f      	cmp	r3, #31
 800267a:	dd00      	ble.n	800267e <__aeabi_dsub+0x1a2>
 800267c:	e1e7      	b.n	8002a4e <__aeabi_dsub+0x572>
 800267e:	2220      	movs	r2, #32
 8002680:	1ad2      	subs	r2, r2, r3
 8002682:	9b02      	ldr	r3, [sp, #8]
 8002684:	4661      	mov	r1, ip
 8002686:	4093      	lsls	r3, r2
 8002688:	001d      	movs	r5, r3
 800268a:	4653      	mov	r3, sl
 800268c:	40d9      	lsrs	r1, r3
 800268e:	4663      	mov	r3, ip
 8002690:	4093      	lsls	r3, r2
 8002692:	001a      	movs	r2, r3
 8002694:	430d      	orrs	r5, r1
 8002696:	1e51      	subs	r1, r2, #1
 8002698:	418a      	sbcs	r2, r1
 800269a:	4653      	mov	r3, sl
 800269c:	4315      	orrs	r5, r2
 800269e:	9a02      	ldr	r2, [sp, #8]
 80026a0:	40da      	lsrs	r2, r3
 80026a2:	18a4      	adds	r4, r4, r2
 80026a4:	182d      	adds	r5, r5, r0
 80026a6:	4285      	cmp	r5, r0
 80026a8:	4180      	sbcs	r0, r0
 80026aa:	4240      	negs	r0, r0
 80026ac:	1824      	adds	r4, r4, r0
 80026ae:	0223      	lsls	r3, r4, #8
 80026b0:	d400      	bmi.n	80026b4 <__aeabi_dsub+0x1d8>
 80026b2:	e0b6      	b.n	8002822 <__aeabi_dsub+0x346>
 80026b4:	4b5e      	ldr	r3, [pc, #376]	@ (8002830 <__aeabi_dsub+0x354>)
 80026b6:	3701      	adds	r7, #1
 80026b8:	429f      	cmp	r7, r3
 80026ba:	d100      	bne.n	80026be <__aeabi_dsub+0x1e2>
 80026bc:	e0ad      	b.n	800281a <__aeabi_dsub+0x33e>
 80026be:	2101      	movs	r1, #1
 80026c0:	4b5c      	ldr	r3, [pc, #368]	@ (8002834 <__aeabi_dsub+0x358>)
 80026c2:	086a      	lsrs	r2, r5, #1
 80026c4:	401c      	ands	r4, r3
 80026c6:	4029      	ands	r1, r5
 80026c8:	430a      	orrs	r2, r1
 80026ca:	07e5      	lsls	r5, r4, #31
 80026cc:	4315      	orrs	r5, r2
 80026ce:	0864      	lsrs	r4, r4, #1
 80026d0:	e78d      	b.n	80025ee <__aeabi_dsub+0x112>
 80026d2:	4a59      	ldr	r2, [pc, #356]	@ (8002838 <__aeabi_dsub+0x35c>)
 80026d4:	9b02      	ldr	r3, [sp, #8]
 80026d6:	4692      	mov	sl, r2
 80026d8:	4662      	mov	r2, ip
 80026da:	44ba      	add	sl, r7
 80026dc:	431a      	orrs	r2, r3
 80026de:	d02c      	beq.n	800273a <__aeabi_dsub+0x25e>
 80026e0:	428e      	cmp	r6, r1
 80026e2:	d02e      	beq.n	8002742 <__aeabi_dsub+0x266>
 80026e4:	4652      	mov	r2, sl
 80026e6:	2a00      	cmp	r2, #0
 80026e8:	d060      	beq.n	80027ac <__aeabi_dsub+0x2d0>
 80026ea:	2f00      	cmp	r7, #0
 80026ec:	d100      	bne.n	80026f0 <__aeabi_dsub+0x214>
 80026ee:	e0db      	b.n	80028a8 <__aeabi_dsub+0x3cc>
 80026f0:	4663      	mov	r3, ip
 80026f2:	000e      	movs	r6, r1
 80026f4:	9c02      	ldr	r4, [sp, #8]
 80026f6:	08d8      	lsrs	r0, r3, #3
 80026f8:	0762      	lsls	r2, r4, #29
 80026fa:	4302      	orrs	r2, r0
 80026fc:	08e4      	lsrs	r4, r4, #3
 80026fe:	0013      	movs	r3, r2
 8002700:	4323      	orrs	r3, r4
 8002702:	d100      	bne.n	8002706 <__aeabi_dsub+0x22a>
 8002704:	e254      	b.n	8002bb0 <__aeabi_dsub+0x6d4>
 8002706:	2580      	movs	r5, #128	@ 0x80
 8002708:	032d      	lsls	r5, r5, #12
 800270a:	4325      	orrs	r5, r4
 800270c:	032d      	lsls	r5, r5, #12
 800270e:	4c48      	ldr	r4, [pc, #288]	@ (8002830 <__aeabi_dsub+0x354>)
 8002710:	0b2d      	lsrs	r5, r5, #12
 8002712:	e78c      	b.n	800262e <__aeabi_dsub+0x152>
 8002714:	4661      	mov	r1, ip
 8002716:	9b02      	ldr	r3, [sp, #8]
 8002718:	4319      	orrs	r1, r3
 800271a:	d100      	bne.n	800271e <__aeabi_dsub+0x242>
 800271c:	e0cc      	b.n	80028b8 <__aeabi_dsub+0x3dc>
 800271e:	0029      	movs	r1, r5
 8002720:	3901      	subs	r1, #1
 8002722:	2d01      	cmp	r5, #1
 8002724:	d100      	bne.n	8002728 <__aeabi_dsub+0x24c>
 8002726:	e188      	b.n	8002a3a <__aeabi_dsub+0x55e>
 8002728:	4295      	cmp	r5, r2
 800272a:	d100      	bne.n	800272e <__aeabi_dsub+0x252>
 800272c:	e0aa      	b.n	8002884 <__aeabi_dsub+0x3a8>
 800272e:	2501      	movs	r5, #1
 8002730:	2938      	cmp	r1, #56	@ 0x38
 8002732:	dd00      	ble.n	8002736 <__aeabi_dsub+0x25a>
 8002734:	e72f      	b.n	8002596 <__aeabi_dsub+0xba>
 8002736:	468a      	mov	sl, r1
 8002738:	e718      	b.n	800256c <__aeabi_dsub+0x90>
 800273a:	2201      	movs	r2, #1
 800273c:	4051      	eors	r1, r2
 800273e:	428e      	cmp	r6, r1
 8002740:	d1d0      	bne.n	80026e4 <__aeabi_dsub+0x208>
 8002742:	4653      	mov	r3, sl
 8002744:	2b00      	cmp	r3, #0
 8002746:	d100      	bne.n	800274a <__aeabi_dsub+0x26e>
 8002748:	e0be      	b.n	80028c8 <__aeabi_dsub+0x3ec>
 800274a:	2f00      	cmp	r7, #0
 800274c:	d000      	beq.n	8002750 <__aeabi_dsub+0x274>
 800274e:	e138      	b.n	80029c2 <__aeabi_dsub+0x4e6>
 8002750:	46ca      	mov	sl, r9
 8002752:	0022      	movs	r2, r4
 8002754:	4302      	orrs	r2, r0
 8002756:	d100      	bne.n	800275a <__aeabi_dsub+0x27e>
 8002758:	e1e2      	b.n	8002b20 <__aeabi_dsub+0x644>
 800275a:	4653      	mov	r3, sl
 800275c:	1e59      	subs	r1, r3, #1
 800275e:	2b01      	cmp	r3, #1
 8002760:	d100      	bne.n	8002764 <__aeabi_dsub+0x288>
 8002762:	e20d      	b.n	8002b80 <__aeabi_dsub+0x6a4>
 8002764:	4a32      	ldr	r2, [pc, #200]	@ (8002830 <__aeabi_dsub+0x354>)
 8002766:	4592      	cmp	sl, r2
 8002768:	d100      	bne.n	800276c <__aeabi_dsub+0x290>
 800276a:	e1d2      	b.n	8002b12 <__aeabi_dsub+0x636>
 800276c:	2701      	movs	r7, #1
 800276e:	2938      	cmp	r1, #56	@ 0x38
 8002770:	dc13      	bgt.n	800279a <__aeabi_dsub+0x2be>
 8002772:	291f      	cmp	r1, #31
 8002774:	dd00      	ble.n	8002778 <__aeabi_dsub+0x29c>
 8002776:	e1ee      	b.n	8002b56 <__aeabi_dsub+0x67a>
 8002778:	2220      	movs	r2, #32
 800277a:	9b02      	ldr	r3, [sp, #8]
 800277c:	1a52      	subs	r2, r2, r1
 800277e:	0025      	movs	r5, r4
 8002780:	0007      	movs	r7, r0
 8002782:	469a      	mov	sl, r3
 8002784:	40cc      	lsrs	r4, r1
 8002786:	4090      	lsls	r0, r2
 8002788:	4095      	lsls	r5, r2
 800278a:	40cf      	lsrs	r7, r1
 800278c:	44a2      	add	sl, r4
 800278e:	1e42      	subs	r2, r0, #1
 8002790:	4190      	sbcs	r0, r2
 8002792:	4653      	mov	r3, sl
 8002794:	432f      	orrs	r7, r5
 8002796:	4307      	orrs	r7, r0
 8002798:	9302      	str	r3, [sp, #8]
 800279a:	003d      	movs	r5, r7
 800279c:	4465      	add	r5, ip
 800279e:	4565      	cmp	r5, ip
 80027a0:	4192      	sbcs	r2, r2
 80027a2:	9b02      	ldr	r3, [sp, #8]
 80027a4:	4252      	negs	r2, r2
 80027a6:	464f      	mov	r7, r9
 80027a8:	18d4      	adds	r4, r2, r3
 80027aa:	e780      	b.n	80026ae <__aeabi_dsub+0x1d2>
 80027ac:	4a23      	ldr	r2, [pc, #140]	@ (800283c <__aeabi_dsub+0x360>)
 80027ae:	1c7d      	adds	r5, r7, #1
 80027b0:	4215      	tst	r5, r2
 80027b2:	d000      	beq.n	80027b6 <__aeabi_dsub+0x2da>
 80027b4:	e0aa      	b.n	800290c <__aeabi_dsub+0x430>
 80027b6:	4662      	mov	r2, ip
 80027b8:	0025      	movs	r5, r4
 80027ba:	9b02      	ldr	r3, [sp, #8]
 80027bc:	4305      	orrs	r5, r0
 80027be:	431a      	orrs	r2, r3
 80027c0:	2f00      	cmp	r7, #0
 80027c2:	d000      	beq.n	80027c6 <__aeabi_dsub+0x2ea>
 80027c4:	e0f5      	b.n	80029b2 <__aeabi_dsub+0x4d6>
 80027c6:	2d00      	cmp	r5, #0
 80027c8:	d100      	bne.n	80027cc <__aeabi_dsub+0x2f0>
 80027ca:	e16b      	b.n	8002aa4 <__aeabi_dsub+0x5c8>
 80027cc:	2a00      	cmp	r2, #0
 80027ce:	d100      	bne.n	80027d2 <__aeabi_dsub+0x2f6>
 80027d0:	e152      	b.n	8002a78 <__aeabi_dsub+0x59c>
 80027d2:	4663      	mov	r3, ip
 80027d4:	1ac5      	subs	r5, r0, r3
 80027d6:	9b02      	ldr	r3, [sp, #8]
 80027d8:	1ae2      	subs	r2, r4, r3
 80027da:	42a8      	cmp	r0, r5
 80027dc:	419b      	sbcs	r3, r3
 80027de:	425b      	negs	r3, r3
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	021a      	lsls	r2, r3, #8
 80027e4:	d400      	bmi.n	80027e8 <__aeabi_dsub+0x30c>
 80027e6:	e1d5      	b.n	8002b94 <__aeabi_dsub+0x6b8>
 80027e8:	4663      	mov	r3, ip
 80027ea:	1a1d      	subs	r5, r3, r0
 80027ec:	45ac      	cmp	ip, r5
 80027ee:	4192      	sbcs	r2, r2
 80027f0:	2601      	movs	r6, #1
 80027f2:	9b02      	ldr	r3, [sp, #8]
 80027f4:	4252      	negs	r2, r2
 80027f6:	1b1c      	subs	r4, r3, r4
 80027f8:	4688      	mov	r8, r1
 80027fa:	1aa4      	subs	r4, r4, r2
 80027fc:	400e      	ands	r6, r1
 80027fe:	e6f6      	b.n	80025ee <__aeabi_dsub+0x112>
 8002800:	4297      	cmp	r7, r2
 8002802:	d03f      	beq.n	8002884 <__aeabi_dsub+0x3a8>
 8002804:	4652      	mov	r2, sl
 8002806:	2501      	movs	r5, #1
 8002808:	2a38      	cmp	r2, #56	@ 0x38
 800280a:	dd00      	ble.n	800280e <__aeabi_dsub+0x332>
 800280c:	e74a      	b.n	80026a4 <__aeabi_dsub+0x1c8>
 800280e:	2280      	movs	r2, #128	@ 0x80
 8002810:	9b02      	ldr	r3, [sp, #8]
 8002812:	0412      	lsls	r2, r2, #16
 8002814:	4313      	orrs	r3, r2
 8002816:	9302      	str	r3, [sp, #8]
 8002818:	e72d      	b.n	8002676 <__aeabi_dsub+0x19a>
 800281a:	003c      	movs	r4, r7
 800281c:	2500      	movs	r5, #0
 800281e:	2200      	movs	r2, #0
 8002820:	e705      	b.n	800262e <__aeabi_dsub+0x152>
 8002822:	2307      	movs	r3, #7
 8002824:	402b      	ands	r3, r5
 8002826:	2b00      	cmp	r3, #0
 8002828:	d000      	beq.n	800282c <__aeabi_dsub+0x350>
 800282a:	e6e2      	b.n	80025f2 <__aeabi_dsub+0x116>
 800282c:	e06b      	b.n	8002906 <__aeabi_dsub+0x42a>
 800282e:	46c0      	nop			@ (mov r8, r8)
 8002830:	000007ff 	.word	0x000007ff
 8002834:	ff7fffff 	.word	0xff7fffff
 8002838:	fffff801 	.word	0xfffff801
 800283c:	000007fe 	.word	0x000007fe
 8002840:	0028      	movs	r0, r5
 8002842:	f000 fb63 	bl	8002f0c <__clzsi2>
 8002846:	0003      	movs	r3, r0
 8002848:	3318      	adds	r3, #24
 800284a:	2b1f      	cmp	r3, #31
 800284c:	dc00      	bgt.n	8002850 <__aeabi_dsub+0x374>
 800284e:	e6b4      	b.n	80025ba <__aeabi_dsub+0xde>
 8002850:	002a      	movs	r2, r5
 8002852:	3808      	subs	r0, #8
 8002854:	4082      	lsls	r2, r0
 8002856:	429f      	cmp	r7, r3
 8002858:	dd00      	ble.n	800285c <__aeabi_dsub+0x380>
 800285a:	e0b9      	b.n	80029d0 <__aeabi_dsub+0x4f4>
 800285c:	1bdb      	subs	r3, r3, r7
 800285e:	1c58      	adds	r0, r3, #1
 8002860:	281f      	cmp	r0, #31
 8002862:	dc00      	bgt.n	8002866 <__aeabi_dsub+0x38a>
 8002864:	e1a0      	b.n	8002ba8 <__aeabi_dsub+0x6cc>
 8002866:	0015      	movs	r5, r2
 8002868:	3b1f      	subs	r3, #31
 800286a:	40dd      	lsrs	r5, r3
 800286c:	2820      	cmp	r0, #32
 800286e:	d005      	beq.n	800287c <__aeabi_dsub+0x3a0>
 8002870:	2340      	movs	r3, #64	@ 0x40
 8002872:	1a1b      	subs	r3, r3, r0
 8002874:	409a      	lsls	r2, r3
 8002876:	1e53      	subs	r3, r2, #1
 8002878:	419a      	sbcs	r2, r3
 800287a:	4315      	orrs	r5, r2
 800287c:	2307      	movs	r3, #7
 800287e:	2700      	movs	r7, #0
 8002880:	402b      	ands	r3, r5
 8002882:	e7d0      	b.n	8002826 <__aeabi_dsub+0x34a>
 8002884:	08c0      	lsrs	r0, r0, #3
 8002886:	0762      	lsls	r2, r4, #29
 8002888:	4302      	orrs	r2, r0
 800288a:	08e4      	lsrs	r4, r4, #3
 800288c:	e737      	b.n	80026fe <__aeabi_dsub+0x222>
 800288e:	08ea      	lsrs	r2, r5, #3
 8002890:	0763      	lsls	r3, r4, #29
 8002892:	431a      	orrs	r2, r3
 8002894:	4bd3      	ldr	r3, [pc, #844]	@ (8002be4 <__aeabi_dsub+0x708>)
 8002896:	08e4      	lsrs	r4, r4, #3
 8002898:	429f      	cmp	r7, r3
 800289a:	d100      	bne.n	800289e <__aeabi_dsub+0x3c2>
 800289c:	e72f      	b.n	80026fe <__aeabi_dsub+0x222>
 800289e:	0324      	lsls	r4, r4, #12
 80028a0:	0b25      	lsrs	r5, r4, #12
 80028a2:	057c      	lsls	r4, r7, #21
 80028a4:	0d64      	lsrs	r4, r4, #21
 80028a6:	e6c2      	b.n	800262e <__aeabi_dsub+0x152>
 80028a8:	46ca      	mov	sl, r9
 80028aa:	0022      	movs	r2, r4
 80028ac:	4302      	orrs	r2, r0
 80028ae:	d158      	bne.n	8002962 <__aeabi_dsub+0x486>
 80028b0:	4663      	mov	r3, ip
 80028b2:	000e      	movs	r6, r1
 80028b4:	9c02      	ldr	r4, [sp, #8]
 80028b6:	9303      	str	r3, [sp, #12]
 80028b8:	9b03      	ldr	r3, [sp, #12]
 80028ba:	4657      	mov	r7, sl
 80028bc:	08da      	lsrs	r2, r3, #3
 80028be:	e7e7      	b.n	8002890 <__aeabi_dsub+0x3b4>
 80028c0:	4cc9      	ldr	r4, [pc, #804]	@ (8002be8 <__aeabi_dsub+0x70c>)
 80028c2:	1aff      	subs	r7, r7, r3
 80028c4:	4014      	ands	r4, r2
 80028c6:	e692      	b.n	80025ee <__aeabi_dsub+0x112>
 80028c8:	4dc8      	ldr	r5, [pc, #800]	@ (8002bec <__aeabi_dsub+0x710>)
 80028ca:	1c7a      	adds	r2, r7, #1
 80028cc:	422a      	tst	r2, r5
 80028ce:	d000      	beq.n	80028d2 <__aeabi_dsub+0x3f6>
 80028d0:	e084      	b.n	80029dc <__aeabi_dsub+0x500>
 80028d2:	0022      	movs	r2, r4
 80028d4:	4302      	orrs	r2, r0
 80028d6:	2f00      	cmp	r7, #0
 80028d8:	d000      	beq.n	80028dc <__aeabi_dsub+0x400>
 80028da:	e0ef      	b.n	8002abc <__aeabi_dsub+0x5e0>
 80028dc:	2a00      	cmp	r2, #0
 80028de:	d100      	bne.n	80028e2 <__aeabi_dsub+0x406>
 80028e0:	e0e5      	b.n	8002aae <__aeabi_dsub+0x5d2>
 80028e2:	4662      	mov	r2, ip
 80028e4:	9902      	ldr	r1, [sp, #8]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	d100      	bne.n	80028ec <__aeabi_dsub+0x410>
 80028ea:	e0c5      	b.n	8002a78 <__aeabi_dsub+0x59c>
 80028ec:	4663      	mov	r3, ip
 80028ee:	18c5      	adds	r5, r0, r3
 80028f0:	468c      	mov	ip, r1
 80028f2:	4285      	cmp	r5, r0
 80028f4:	4180      	sbcs	r0, r0
 80028f6:	4464      	add	r4, ip
 80028f8:	4240      	negs	r0, r0
 80028fa:	1824      	adds	r4, r4, r0
 80028fc:	0223      	lsls	r3, r4, #8
 80028fe:	d502      	bpl.n	8002906 <__aeabi_dsub+0x42a>
 8002900:	4bb9      	ldr	r3, [pc, #740]	@ (8002be8 <__aeabi_dsub+0x70c>)
 8002902:	3701      	adds	r7, #1
 8002904:	401c      	ands	r4, r3
 8002906:	46ba      	mov	sl, r7
 8002908:	9503      	str	r5, [sp, #12]
 800290a:	e7d5      	b.n	80028b8 <__aeabi_dsub+0x3dc>
 800290c:	4662      	mov	r2, ip
 800290e:	1a85      	subs	r5, r0, r2
 8002910:	42a8      	cmp	r0, r5
 8002912:	4192      	sbcs	r2, r2
 8002914:	4252      	negs	r2, r2
 8002916:	4691      	mov	r9, r2
 8002918:	9b02      	ldr	r3, [sp, #8]
 800291a:	1ae3      	subs	r3, r4, r3
 800291c:	001a      	movs	r2, r3
 800291e:	464b      	mov	r3, r9
 8002920:	1ad2      	subs	r2, r2, r3
 8002922:	0013      	movs	r3, r2
 8002924:	4691      	mov	r9, r2
 8002926:	021a      	lsls	r2, r3, #8
 8002928:	d46c      	bmi.n	8002a04 <__aeabi_dsub+0x528>
 800292a:	464a      	mov	r2, r9
 800292c:	464c      	mov	r4, r9
 800292e:	432a      	orrs	r2, r5
 8002930:	d000      	beq.n	8002934 <__aeabi_dsub+0x458>
 8002932:	e63a      	b.n	80025aa <__aeabi_dsub+0xce>
 8002934:	2600      	movs	r6, #0
 8002936:	2400      	movs	r4, #0
 8002938:	2500      	movs	r5, #0
 800293a:	e678      	b.n	800262e <__aeabi_dsub+0x152>
 800293c:	9902      	ldr	r1, [sp, #8]
 800293e:	4653      	mov	r3, sl
 8002940:	000d      	movs	r5, r1
 8002942:	3a20      	subs	r2, #32
 8002944:	40d5      	lsrs	r5, r2
 8002946:	2b20      	cmp	r3, #32
 8002948:	d006      	beq.n	8002958 <__aeabi_dsub+0x47c>
 800294a:	2240      	movs	r2, #64	@ 0x40
 800294c:	1ad2      	subs	r2, r2, r3
 800294e:	000b      	movs	r3, r1
 8002950:	4093      	lsls	r3, r2
 8002952:	4662      	mov	r2, ip
 8002954:	431a      	orrs	r2, r3
 8002956:	4693      	mov	fp, r2
 8002958:	465b      	mov	r3, fp
 800295a:	1e5a      	subs	r2, r3, #1
 800295c:	4193      	sbcs	r3, r2
 800295e:	431d      	orrs	r5, r3
 8002960:	e619      	b.n	8002596 <__aeabi_dsub+0xba>
 8002962:	4653      	mov	r3, sl
 8002964:	1e5a      	subs	r2, r3, #1
 8002966:	2b01      	cmp	r3, #1
 8002968:	d100      	bne.n	800296c <__aeabi_dsub+0x490>
 800296a:	e0c6      	b.n	8002afa <__aeabi_dsub+0x61e>
 800296c:	4e9d      	ldr	r6, [pc, #628]	@ (8002be4 <__aeabi_dsub+0x708>)
 800296e:	45b2      	cmp	sl, r6
 8002970:	d100      	bne.n	8002974 <__aeabi_dsub+0x498>
 8002972:	e6bd      	b.n	80026f0 <__aeabi_dsub+0x214>
 8002974:	4688      	mov	r8, r1
 8002976:	000e      	movs	r6, r1
 8002978:	2501      	movs	r5, #1
 800297a:	2a38      	cmp	r2, #56	@ 0x38
 800297c:	dc10      	bgt.n	80029a0 <__aeabi_dsub+0x4c4>
 800297e:	2a1f      	cmp	r2, #31
 8002980:	dc7f      	bgt.n	8002a82 <__aeabi_dsub+0x5a6>
 8002982:	2120      	movs	r1, #32
 8002984:	0025      	movs	r5, r4
 8002986:	1a89      	subs	r1, r1, r2
 8002988:	0007      	movs	r7, r0
 800298a:	4088      	lsls	r0, r1
 800298c:	408d      	lsls	r5, r1
 800298e:	40d7      	lsrs	r7, r2
 8002990:	40d4      	lsrs	r4, r2
 8002992:	1e41      	subs	r1, r0, #1
 8002994:	4188      	sbcs	r0, r1
 8002996:	9b02      	ldr	r3, [sp, #8]
 8002998:	433d      	orrs	r5, r7
 800299a:	1b1b      	subs	r3, r3, r4
 800299c:	4305      	orrs	r5, r0
 800299e:	9302      	str	r3, [sp, #8]
 80029a0:	4662      	mov	r2, ip
 80029a2:	1b55      	subs	r5, r2, r5
 80029a4:	45ac      	cmp	ip, r5
 80029a6:	4192      	sbcs	r2, r2
 80029a8:	9b02      	ldr	r3, [sp, #8]
 80029aa:	4252      	negs	r2, r2
 80029ac:	464f      	mov	r7, r9
 80029ae:	1a9c      	subs	r4, r3, r2
 80029b0:	e5f6      	b.n	80025a0 <__aeabi_dsub+0xc4>
 80029b2:	2d00      	cmp	r5, #0
 80029b4:	d000      	beq.n	80029b8 <__aeabi_dsub+0x4dc>
 80029b6:	e0b7      	b.n	8002b28 <__aeabi_dsub+0x64c>
 80029b8:	2a00      	cmp	r2, #0
 80029ba:	d100      	bne.n	80029be <__aeabi_dsub+0x4e2>
 80029bc:	e0f0      	b.n	8002ba0 <__aeabi_dsub+0x6c4>
 80029be:	2601      	movs	r6, #1
 80029c0:	400e      	ands	r6, r1
 80029c2:	4663      	mov	r3, ip
 80029c4:	9802      	ldr	r0, [sp, #8]
 80029c6:	08d9      	lsrs	r1, r3, #3
 80029c8:	0742      	lsls	r2, r0, #29
 80029ca:	430a      	orrs	r2, r1
 80029cc:	08c4      	lsrs	r4, r0, #3
 80029ce:	e696      	b.n	80026fe <__aeabi_dsub+0x222>
 80029d0:	4c85      	ldr	r4, [pc, #532]	@ (8002be8 <__aeabi_dsub+0x70c>)
 80029d2:	1aff      	subs	r7, r7, r3
 80029d4:	4014      	ands	r4, r2
 80029d6:	0762      	lsls	r2, r4, #29
 80029d8:	08e4      	lsrs	r4, r4, #3
 80029da:	e760      	b.n	800289e <__aeabi_dsub+0x3c2>
 80029dc:	4981      	ldr	r1, [pc, #516]	@ (8002be4 <__aeabi_dsub+0x708>)
 80029de:	428a      	cmp	r2, r1
 80029e0:	d100      	bne.n	80029e4 <__aeabi_dsub+0x508>
 80029e2:	e0c9      	b.n	8002b78 <__aeabi_dsub+0x69c>
 80029e4:	4663      	mov	r3, ip
 80029e6:	18c1      	adds	r1, r0, r3
 80029e8:	4281      	cmp	r1, r0
 80029ea:	4180      	sbcs	r0, r0
 80029ec:	9b02      	ldr	r3, [sp, #8]
 80029ee:	4240      	negs	r0, r0
 80029f0:	18e3      	adds	r3, r4, r3
 80029f2:	181b      	adds	r3, r3, r0
 80029f4:	07dd      	lsls	r5, r3, #31
 80029f6:	085c      	lsrs	r4, r3, #1
 80029f8:	2307      	movs	r3, #7
 80029fa:	0849      	lsrs	r1, r1, #1
 80029fc:	430d      	orrs	r5, r1
 80029fe:	0017      	movs	r7, r2
 8002a00:	402b      	ands	r3, r5
 8002a02:	e710      	b.n	8002826 <__aeabi_dsub+0x34a>
 8002a04:	4663      	mov	r3, ip
 8002a06:	1a1d      	subs	r5, r3, r0
 8002a08:	45ac      	cmp	ip, r5
 8002a0a:	4192      	sbcs	r2, r2
 8002a0c:	2601      	movs	r6, #1
 8002a0e:	9b02      	ldr	r3, [sp, #8]
 8002a10:	4252      	negs	r2, r2
 8002a12:	1b1c      	subs	r4, r3, r4
 8002a14:	4688      	mov	r8, r1
 8002a16:	1aa4      	subs	r4, r4, r2
 8002a18:	400e      	ands	r6, r1
 8002a1a:	e5c6      	b.n	80025aa <__aeabi_dsub+0xce>
 8002a1c:	4663      	mov	r3, ip
 8002a1e:	18c5      	adds	r5, r0, r3
 8002a20:	9b02      	ldr	r3, [sp, #8]
 8002a22:	4285      	cmp	r5, r0
 8002a24:	4180      	sbcs	r0, r0
 8002a26:	469c      	mov	ip, r3
 8002a28:	4240      	negs	r0, r0
 8002a2a:	4464      	add	r4, ip
 8002a2c:	1824      	adds	r4, r4, r0
 8002a2e:	2701      	movs	r7, #1
 8002a30:	0223      	lsls	r3, r4, #8
 8002a32:	d400      	bmi.n	8002a36 <__aeabi_dsub+0x55a>
 8002a34:	e6f5      	b.n	8002822 <__aeabi_dsub+0x346>
 8002a36:	2702      	movs	r7, #2
 8002a38:	e641      	b.n	80026be <__aeabi_dsub+0x1e2>
 8002a3a:	4663      	mov	r3, ip
 8002a3c:	1ac5      	subs	r5, r0, r3
 8002a3e:	42a8      	cmp	r0, r5
 8002a40:	4180      	sbcs	r0, r0
 8002a42:	9b02      	ldr	r3, [sp, #8]
 8002a44:	4240      	negs	r0, r0
 8002a46:	1ae4      	subs	r4, r4, r3
 8002a48:	2701      	movs	r7, #1
 8002a4a:	1a24      	subs	r4, r4, r0
 8002a4c:	e5a8      	b.n	80025a0 <__aeabi_dsub+0xc4>
 8002a4e:	9d02      	ldr	r5, [sp, #8]
 8002a50:	4652      	mov	r2, sl
 8002a52:	002b      	movs	r3, r5
 8002a54:	3a20      	subs	r2, #32
 8002a56:	40d3      	lsrs	r3, r2
 8002a58:	0019      	movs	r1, r3
 8002a5a:	4653      	mov	r3, sl
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d006      	beq.n	8002a6e <__aeabi_dsub+0x592>
 8002a60:	2240      	movs	r2, #64	@ 0x40
 8002a62:	1ad2      	subs	r2, r2, r3
 8002a64:	002b      	movs	r3, r5
 8002a66:	4093      	lsls	r3, r2
 8002a68:	4662      	mov	r2, ip
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	4693      	mov	fp, r2
 8002a6e:	465d      	mov	r5, fp
 8002a70:	1e6b      	subs	r3, r5, #1
 8002a72:	419d      	sbcs	r5, r3
 8002a74:	430d      	orrs	r5, r1
 8002a76:	e615      	b.n	80026a4 <__aeabi_dsub+0x1c8>
 8002a78:	0762      	lsls	r2, r4, #29
 8002a7a:	08c0      	lsrs	r0, r0, #3
 8002a7c:	4302      	orrs	r2, r0
 8002a7e:	08e4      	lsrs	r4, r4, #3
 8002a80:	e70d      	b.n	800289e <__aeabi_dsub+0x3c2>
 8002a82:	0011      	movs	r1, r2
 8002a84:	0027      	movs	r7, r4
 8002a86:	3920      	subs	r1, #32
 8002a88:	40cf      	lsrs	r7, r1
 8002a8a:	2a20      	cmp	r2, #32
 8002a8c:	d005      	beq.n	8002a9a <__aeabi_dsub+0x5be>
 8002a8e:	2140      	movs	r1, #64	@ 0x40
 8002a90:	1a8a      	subs	r2, r1, r2
 8002a92:	4094      	lsls	r4, r2
 8002a94:	0025      	movs	r5, r4
 8002a96:	4305      	orrs	r5, r0
 8002a98:	9503      	str	r5, [sp, #12]
 8002a9a:	9d03      	ldr	r5, [sp, #12]
 8002a9c:	1e6a      	subs	r2, r5, #1
 8002a9e:	4195      	sbcs	r5, r2
 8002aa0:	433d      	orrs	r5, r7
 8002aa2:	e77d      	b.n	80029a0 <__aeabi_dsub+0x4c4>
 8002aa4:	2a00      	cmp	r2, #0
 8002aa6:	d100      	bne.n	8002aaa <__aeabi_dsub+0x5ce>
 8002aa8:	e744      	b.n	8002934 <__aeabi_dsub+0x458>
 8002aaa:	2601      	movs	r6, #1
 8002aac:	400e      	ands	r6, r1
 8002aae:	4663      	mov	r3, ip
 8002ab0:	08d9      	lsrs	r1, r3, #3
 8002ab2:	9b02      	ldr	r3, [sp, #8]
 8002ab4:	075a      	lsls	r2, r3, #29
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	08dc      	lsrs	r4, r3, #3
 8002aba:	e6f0      	b.n	800289e <__aeabi_dsub+0x3c2>
 8002abc:	2a00      	cmp	r2, #0
 8002abe:	d028      	beq.n	8002b12 <__aeabi_dsub+0x636>
 8002ac0:	4662      	mov	r2, ip
 8002ac2:	9f02      	ldr	r7, [sp, #8]
 8002ac4:	08c0      	lsrs	r0, r0, #3
 8002ac6:	433a      	orrs	r2, r7
 8002ac8:	d100      	bne.n	8002acc <__aeabi_dsub+0x5f0>
 8002aca:	e6dc      	b.n	8002886 <__aeabi_dsub+0x3aa>
 8002acc:	0762      	lsls	r2, r4, #29
 8002ace:	4310      	orrs	r0, r2
 8002ad0:	2280      	movs	r2, #128	@ 0x80
 8002ad2:	08e4      	lsrs	r4, r4, #3
 8002ad4:	0312      	lsls	r2, r2, #12
 8002ad6:	4214      	tst	r4, r2
 8002ad8:	d009      	beq.n	8002aee <__aeabi_dsub+0x612>
 8002ada:	08fd      	lsrs	r5, r7, #3
 8002adc:	4215      	tst	r5, r2
 8002ade:	d106      	bne.n	8002aee <__aeabi_dsub+0x612>
 8002ae0:	4663      	mov	r3, ip
 8002ae2:	2601      	movs	r6, #1
 8002ae4:	002c      	movs	r4, r5
 8002ae6:	08d8      	lsrs	r0, r3, #3
 8002ae8:	077b      	lsls	r3, r7, #29
 8002aea:	4318      	orrs	r0, r3
 8002aec:	400e      	ands	r6, r1
 8002aee:	0f42      	lsrs	r2, r0, #29
 8002af0:	00c0      	lsls	r0, r0, #3
 8002af2:	08c0      	lsrs	r0, r0, #3
 8002af4:	0752      	lsls	r2, r2, #29
 8002af6:	4302      	orrs	r2, r0
 8002af8:	e601      	b.n	80026fe <__aeabi_dsub+0x222>
 8002afa:	4663      	mov	r3, ip
 8002afc:	1a1d      	subs	r5, r3, r0
 8002afe:	45ac      	cmp	ip, r5
 8002b00:	4192      	sbcs	r2, r2
 8002b02:	9b02      	ldr	r3, [sp, #8]
 8002b04:	4252      	negs	r2, r2
 8002b06:	1b1c      	subs	r4, r3, r4
 8002b08:	000e      	movs	r6, r1
 8002b0a:	4688      	mov	r8, r1
 8002b0c:	2701      	movs	r7, #1
 8002b0e:	1aa4      	subs	r4, r4, r2
 8002b10:	e546      	b.n	80025a0 <__aeabi_dsub+0xc4>
 8002b12:	4663      	mov	r3, ip
 8002b14:	08d9      	lsrs	r1, r3, #3
 8002b16:	9b02      	ldr	r3, [sp, #8]
 8002b18:	075a      	lsls	r2, r3, #29
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	08dc      	lsrs	r4, r3, #3
 8002b1e:	e5ee      	b.n	80026fe <__aeabi_dsub+0x222>
 8002b20:	4663      	mov	r3, ip
 8002b22:	9c02      	ldr	r4, [sp, #8]
 8002b24:	9303      	str	r3, [sp, #12]
 8002b26:	e6c7      	b.n	80028b8 <__aeabi_dsub+0x3dc>
 8002b28:	08c0      	lsrs	r0, r0, #3
 8002b2a:	2a00      	cmp	r2, #0
 8002b2c:	d100      	bne.n	8002b30 <__aeabi_dsub+0x654>
 8002b2e:	e6aa      	b.n	8002886 <__aeabi_dsub+0x3aa>
 8002b30:	0762      	lsls	r2, r4, #29
 8002b32:	4310      	orrs	r0, r2
 8002b34:	2280      	movs	r2, #128	@ 0x80
 8002b36:	08e4      	lsrs	r4, r4, #3
 8002b38:	0312      	lsls	r2, r2, #12
 8002b3a:	4214      	tst	r4, r2
 8002b3c:	d0d7      	beq.n	8002aee <__aeabi_dsub+0x612>
 8002b3e:	9f02      	ldr	r7, [sp, #8]
 8002b40:	08fd      	lsrs	r5, r7, #3
 8002b42:	4215      	tst	r5, r2
 8002b44:	d1d3      	bne.n	8002aee <__aeabi_dsub+0x612>
 8002b46:	4663      	mov	r3, ip
 8002b48:	2601      	movs	r6, #1
 8002b4a:	08d8      	lsrs	r0, r3, #3
 8002b4c:	077b      	lsls	r3, r7, #29
 8002b4e:	002c      	movs	r4, r5
 8002b50:	4318      	orrs	r0, r3
 8002b52:	400e      	ands	r6, r1
 8002b54:	e7cb      	b.n	8002aee <__aeabi_dsub+0x612>
 8002b56:	000a      	movs	r2, r1
 8002b58:	0027      	movs	r7, r4
 8002b5a:	3a20      	subs	r2, #32
 8002b5c:	40d7      	lsrs	r7, r2
 8002b5e:	2920      	cmp	r1, #32
 8002b60:	d005      	beq.n	8002b6e <__aeabi_dsub+0x692>
 8002b62:	2240      	movs	r2, #64	@ 0x40
 8002b64:	1a52      	subs	r2, r2, r1
 8002b66:	4094      	lsls	r4, r2
 8002b68:	0025      	movs	r5, r4
 8002b6a:	4305      	orrs	r5, r0
 8002b6c:	9503      	str	r5, [sp, #12]
 8002b6e:	9d03      	ldr	r5, [sp, #12]
 8002b70:	1e6a      	subs	r2, r5, #1
 8002b72:	4195      	sbcs	r5, r2
 8002b74:	432f      	orrs	r7, r5
 8002b76:	e610      	b.n	800279a <__aeabi_dsub+0x2be>
 8002b78:	0014      	movs	r4, r2
 8002b7a:	2500      	movs	r5, #0
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	e556      	b.n	800262e <__aeabi_dsub+0x152>
 8002b80:	9b02      	ldr	r3, [sp, #8]
 8002b82:	4460      	add	r0, ip
 8002b84:	4699      	mov	r9, r3
 8002b86:	4560      	cmp	r0, ip
 8002b88:	4192      	sbcs	r2, r2
 8002b8a:	444c      	add	r4, r9
 8002b8c:	4252      	negs	r2, r2
 8002b8e:	0005      	movs	r5, r0
 8002b90:	18a4      	adds	r4, r4, r2
 8002b92:	e74c      	b.n	8002a2e <__aeabi_dsub+0x552>
 8002b94:	001a      	movs	r2, r3
 8002b96:	001c      	movs	r4, r3
 8002b98:	432a      	orrs	r2, r5
 8002b9a:	d000      	beq.n	8002b9e <__aeabi_dsub+0x6c2>
 8002b9c:	e6b3      	b.n	8002906 <__aeabi_dsub+0x42a>
 8002b9e:	e6c9      	b.n	8002934 <__aeabi_dsub+0x458>
 8002ba0:	2480      	movs	r4, #128	@ 0x80
 8002ba2:	2600      	movs	r6, #0
 8002ba4:	0324      	lsls	r4, r4, #12
 8002ba6:	e5ae      	b.n	8002706 <__aeabi_dsub+0x22a>
 8002ba8:	2120      	movs	r1, #32
 8002baa:	2500      	movs	r5, #0
 8002bac:	1a09      	subs	r1, r1, r0
 8002bae:	e517      	b.n	80025e0 <__aeabi_dsub+0x104>
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2500      	movs	r5, #0
 8002bb4:	4c0b      	ldr	r4, [pc, #44]	@ (8002be4 <__aeabi_dsub+0x708>)
 8002bb6:	e53a      	b.n	800262e <__aeabi_dsub+0x152>
 8002bb8:	2d00      	cmp	r5, #0
 8002bba:	d100      	bne.n	8002bbe <__aeabi_dsub+0x6e2>
 8002bbc:	e5f6      	b.n	80027ac <__aeabi_dsub+0x2d0>
 8002bbe:	464b      	mov	r3, r9
 8002bc0:	1bda      	subs	r2, r3, r7
 8002bc2:	4692      	mov	sl, r2
 8002bc4:	2f00      	cmp	r7, #0
 8002bc6:	d100      	bne.n	8002bca <__aeabi_dsub+0x6ee>
 8002bc8:	e66f      	b.n	80028aa <__aeabi_dsub+0x3ce>
 8002bca:	2a38      	cmp	r2, #56	@ 0x38
 8002bcc:	dc05      	bgt.n	8002bda <__aeabi_dsub+0x6fe>
 8002bce:	2680      	movs	r6, #128	@ 0x80
 8002bd0:	0436      	lsls	r6, r6, #16
 8002bd2:	4334      	orrs	r4, r6
 8002bd4:	4688      	mov	r8, r1
 8002bd6:	000e      	movs	r6, r1
 8002bd8:	e6d1      	b.n	800297e <__aeabi_dsub+0x4a2>
 8002bda:	4688      	mov	r8, r1
 8002bdc:	000e      	movs	r6, r1
 8002bde:	2501      	movs	r5, #1
 8002be0:	e6de      	b.n	80029a0 <__aeabi_dsub+0x4c4>
 8002be2:	46c0      	nop			@ (mov r8, r8)
 8002be4:	000007ff 	.word	0x000007ff
 8002be8:	ff7fffff 	.word	0xff7fffff
 8002bec:	000007fe 	.word	0x000007fe
 8002bf0:	2d00      	cmp	r5, #0
 8002bf2:	d100      	bne.n	8002bf6 <__aeabi_dsub+0x71a>
 8002bf4:	e668      	b.n	80028c8 <__aeabi_dsub+0x3ec>
 8002bf6:	464b      	mov	r3, r9
 8002bf8:	1bd9      	subs	r1, r3, r7
 8002bfa:	2f00      	cmp	r7, #0
 8002bfc:	d101      	bne.n	8002c02 <__aeabi_dsub+0x726>
 8002bfe:	468a      	mov	sl, r1
 8002c00:	e5a7      	b.n	8002752 <__aeabi_dsub+0x276>
 8002c02:	2701      	movs	r7, #1
 8002c04:	2938      	cmp	r1, #56	@ 0x38
 8002c06:	dd00      	ble.n	8002c0a <__aeabi_dsub+0x72e>
 8002c08:	e5c7      	b.n	800279a <__aeabi_dsub+0x2be>
 8002c0a:	2280      	movs	r2, #128	@ 0x80
 8002c0c:	0412      	lsls	r2, r2, #16
 8002c0e:	4314      	orrs	r4, r2
 8002c10:	e5af      	b.n	8002772 <__aeabi_dsub+0x296>
 8002c12:	46c0      	nop			@ (mov r8, r8)

08002c14 <__aeabi_dcmpun>:
 8002c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c16:	46c6      	mov	lr, r8
 8002c18:	031e      	lsls	r6, r3, #12
 8002c1a:	0b36      	lsrs	r6, r6, #12
 8002c1c:	46b0      	mov	r8, r6
 8002c1e:	4e0d      	ldr	r6, [pc, #52]	@ (8002c54 <__aeabi_dcmpun+0x40>)
 8002c20:	030c      	lsls	r4, r1, #12
 8002c22:	004d      	lsls	r5, r1, #1
 8002c24:	005f      	lsls	r7, r3, #1
 8002c26:	b500      	push	{lr}
 8002c28:	0b24      	lsrs	r4, r4, #12
 8002c2a:	0d6d      	lsrs	r5, r5, #21
 8002c2c:	0d7f      	lsrs	r7, r7, #21
 8002c2e:	42b5      	cmp	r5, r6
 8002c30:	d00b      	beq.n	8002c4a <__aeabi_dcmpun+0x36>
 8002c32:	4908      	ldr	r1, [pc, #32]	@ (8002c54 <__aeabi_dcmpun+0x40>)
 8002c34:	2000      	movs	r0, #0
 8002c36:	428f      	cmp	r7, r1
 8002c38:	d104      	bne.n	8002c44 <__aeabi_dcmpun+0x30>
 8002c3a:	4646      	mov	r6, r8
 8002c3c:	4316      	orrs	r6, r2
 8002c3e:	0030      	movs	r0, r6
 8002c40:	1e43      	subs	r3, r0, #1
 8002c42:	4198      	sbcs	r0, r3
 8002c44:	bc80      	pop	{r7}
 8002c46:	46b8      	mov	r8, r7
 8002c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c4a:	4304      	orrs	r4, r0
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	2c00      	cmp	r4, #0
 8002c50:	d1f8      	bne.n	8002c44 <__aeabi_dcmpun+0x30>
 8002c52:	e7ee      	b.n	8002c32 <__aeabi_dcmpun+0x1e>
 8002c54:	000007ff 	.word	0x000007ff

08002c58 <__aeabi_d2iz>:
 8002c58:	000b      	movs	r3, r1
 8002c5a:	0002      	movs	r2, r0
 8002c5c:	b570      	push	{r4, r5, r6, lr}
 8002c5e:	4d16      	ldr	r5, [pc, #88]	@ (8002cb8 <__aeabi_d2iz+0x60>)
 8002c60:	030c      	lsls	r4, r1, #12
 8002c62:	b082      	sub	sp, #8
 8002c64:	0049      	lsls	r1, r1, #1
 8002c66:	2000      	movs	r0, #0
 8002c68:	9200      	str	r2, [sp, #0]
 8002c6a:	9301      	str	r3, [sp, #4]
 8002c6c:	0b24      	lsrs	r4, r4, #12
 8002c6e:	0d49      	lsrs	r1, r1, #21
 8002c70:	0fde      	lsrs	r6, r3, #31
 8002c72:	42a9      	cmp	r1, r5
 8002c74:	dd04      	ble.n	8002c80 <__aeabi_d2iz+0x28>
 8002c76:	4811      	ldr	r0, [pc, #68]	@ (8002cbc <__aeabi_d2iz+0x64>)
 8002c78:	4281      	cmp	r1, r0
 8002c7a:	dd03      	ble.n	8002c84 <__aeabi_d2iz+0x2c>
 8002c7c:	4b10      	ldr	r3, [pc, #64]	@ (8002cc0 <__aeabi_d2iz+0x68>)
 8002c7e:	18f0      	adds	r0, r6, r3
 8002c80:	b002      	add	sp, #8
 8002c82:	bd70      	pop	{r4, r5, r6, pc}
 8002c84:	2080      	movs	r0, #128	@ 0x80
 8002c86:	0340      	lsls	r0, r0, #13
 8002c88:	4320      	orrs	r0, r4
 8002c8a:	4c0e      	ldr	r4, [pc, #56]	@ (8002cc4 <__aeabi_d2iz+0x6c>)
 8002c8c:	1a64      	subs	r4, r4, r1
 8002c8e:	2c1f      	cmp	r4, #31
 8002c90:	dd08      	ble.n	8002ca4 <__aeabi_d2iz+0x4c>
 8002c92:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc8 <__aeabi_d2iz+0x70>)
 8002c94:	1a5b      	subs	r3, r3, r1
 8002c96:	40d8      	lsrs	r0, r3
 8002c98:	0003      	movs	r3, r0
 8002c9a:	4258      	negs	r0, r3
 8002c9c:	2e00      	cmp	r6, #0
 8002c9e:	d1ef      	bne.n	8002c80 <__aeabi_d2iz+0x28>
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	e7ed      	b.n	8002c80 <__aeabi_d2iz+0x28>
 8002ca4:	4b09      	ldr	r3, [pc, #36]	@ (8002ccc <__aeabi_d2iz+0x74>)
 8002ca6:	9a00      	ldr	r2, [sp, #0]
 8002ca8:	469c      	mov	ip, r3
 8002caa:	0003      	movs	r3, r0
 8002cac:	4461      	add	r1, ip
 8002cae:	408b      	lsls	r3, r1
 8002cb0:	40e2      	lsrs	r2, r4
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	e7f1      	b.n	8002c9a <__aeabi_d2iz+0x42>
 8002cb6:	46c0      	nop			@ (mov r8, r8)
 8002cb8:	000003fe 	.word	0x000003fe
 8002cbc:	0000041d 	.word	0x0000041d
 8002cc0:	7fffffff 	.word	0x7fffffff
 8002cc4:	00000433 	.word	0x00000433
 8002cc8:	00000413 	.word	0x00000413
 8002ccc:	fffffbed 	.word	0xfffffbed

08002cd0 <__aeabi_i2d>:
 8002cd0:	b570      	push	{r4, r5, r6, lr}
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	d016      	beq.n	8002d04 <__aeabi_i2d+0x34>
 8002cd6:	17c3      	asrs	r3, r0, #31
 8002cd8:	18c5      	adds	r5, r0, r3
 8002cda:	405d      	eors	r5, r3
 8002cdc:	0fc4      	lsrs	r4, r0, #31
 8002cde:	0028      	movs	r0, r5
 8002ce0:	f000 f914 	bl	8002f0c <__clzsi2>
 8002ce4:	4b10      	ldr	r3, [pc, #64]	@ (8002d28 <__aeabi_i2d+0x58>)
 8002ce6:	1a1b      	subs	r3, r3, r0
 8002ce8:	055b      	lsls	r3, r3, #21
 8002cea:	0d5b      	lsrs	r3, r3, #21
 8002cec:	280a      	cmp	r0, #10
 8002cee:	dc14      	bgt.n	8002d1a <__aeabi_i2d+0x4a>
 8002cf0:	0002      	movs	r2, r0
 8002cf2:	002e      	movs	r6, r5
 8002cf4:	3215      	adds	r2, #21
 8002cf6:	4096      	lsls	r6, r2
 8002cf8:	220b      	movs	r2, #11
 8002cfa:	1a12      	subs	r2, r2, r0
 8002cfc:	40d5      	lsrs	r5, r2
 8002cfe:	032d      	lsls	r5, r5, #12
 8002d00:	0b2d      	lsrs	r5, r5, #12
 8002d02:	e003      	b.n	8002d0c <__aeabi_i2d+0x3c>
 8002d04:	2400      	movs	r4, #0
 8002d06:	2300      	movs	r3, #0
 8002d08:	2500      	movs	r5, #0
 8002d0a:	2600      	movs	r6, #0
 8002d0c:	051b      	lsls	r3, r3, #20
 8002d0e:	432b      	orrs	r3, r5
 8002d10:	07e4      	lsls	r4, r4, #31
 8002d12:	4323      	orrs	r3, r4
 8002d14:	0030      	movs	r0, r6
 8002d16:	0019      	movs	r1, r3
 8002d18:	bd70      	pop	{r4, r5, r6, pc}
 8002d1a:	380b      	subs	r0, #11
 8002d1c:	4085      	lsls	r5, r0
 8002d1e:	032d      	lsls	r5, r5, #12
 8002d20:	2600      	movs	r6, #0
 8002d22:	0b2d      	lsrs	r5, r5, #12
 8002d24:	e7f2      	b.n	8002d0c <__aeabi_i2d+0x3c>
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	0000041e 	.word	0x0000041e

08002d2c <__aeabi_ui2d>:
 8002d2c:	b510      	push	{r4, lr}
 8002d2e:	1e04      	subs	r4, r0, #0
 8002d30:	d010      	beq.n	8002d54 <__aeabi_ui2d+0x28>
 8002d32:	f000 f8eb 	bl	8002f0c <__clzsi2>
 8002d36:	4b0e      	ldr	r3, [pc, #56]	@ (8002d70 <__aeabi_ui2d+0x44>)
 8002d38:	1a1b      	subs	r3, r3, r0
 8002d3a:	055b      	lsls	r3, r3, #21
 8002d3c:	0d5b      	lsrs	r3, r3, #21
 8002d3e:	280a      	cmp	r0, #10
 8002d40:	dc0f      	bgt.n	8002d62 <__aeabi_ui2d+0x36>
 8002d42:	220b      	movs	r2, #11
 8002d44:	0021      	movs	r1, r4
 8002d46:	1a12      	subs	r2, r2, r0
 8002d48:	40d1      	lsrs	r1, r2
 8002d4a:	3015      	adds	r0, #21
 8002d4c:	030a      	lsls	r2, r1, #12
 8002d4e:	4084      	lsls	r4, r0
 8002d50:	0b12      	lsrs	r2, r2, #12
 8002d52:	e001      	b.n	8002d58 <__aeabi_ui2d+0x2c>
 8002d54:	2300      	movs	r3, #0
 8002d56:	2200      	movs	r2, #0
 8002d58:	051b      	lsls	r3, r3, #20
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	0020      	movs	r0, r4
 8002d5e:	0019      	movs	r1, r3
 8002d60:	bd10      	pop	{r4, pc}
 8002d62:	0022      	movs	r2, r4
 8002d64:	380b      	subs	r0, #11
 8002d66:	4082      	lsls	r2, r0
 8002d68:	0312      	lsls	r2, r2, #12
 8002d6a:	2400      	movs	r4, #0
 8002d6c:	0b12      	lsrs	r2, r2, #12
 8002d6e:	e7f3      	b.n	8002d58 <__aeabi_ui2d+0x2c>
 8002d70:	0000041e 	.word	0x0000041e

08002d74 <__aeabi_f2d>:
 8002d74:	b570      	push	{r4, r5, r6, lr}
 8002d76:	0242      	lsls	r2, r0, #9
 8002d78:	0043      	lsls	r3, r0, #1
 8002d7a:	0fc4      	lsrs	r4, r0, #31
 8002d7c:	20fe      	movs	r0, #254	@ 0xfe
 8002d7e:	0e1b      	lsrs	r3, r3, #24
 8002d80:	1c59      	adds	r1, r3, #1
 8002d82:	0a55      	lsrs	r5, r2, #9
 8002d84:	4208      	tst	r0, r1
 8002d86:	d00c      	beq.n	8002da2 <__aeabi_f2d+0x2e>
 8002d88:	21e0      	movs	r1, #224	@ 0xe0
 8002d8a:	0089      	lsls	r1, r1, #2
 8002d8c:	468c      	mov	ip, r1
 8002d8e:	076d      	lsls	r5, r5, #29
 8002d90:	0b12      	lsrs	r2, r2, #12
 8002d92:	4463      	add	r3, ip
 8002d94:	051b      	lsls	r3, r3, #20
 8002d96:	4313      	orrs	r3, r2
 8002d98:	07e4      	lsls	r4, r4, #31
 8002d9a:	4323      	orrs	r3, r4
 8002d9c:	0028      	movs	r0, r5
 8002d9e:	0019      	movs	r1, r3
 8002da0:	bd70      	pop	{r4, r5, r6, pc}
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d114      	bne.n	8002dd0 <__aeabi_f2d+0x5c>
 8002da6:	2d00      	cmp	r5, #0
 8002da8:	d01b      	beq.n	8002de2 <__aeabi_f2d+0x6e>
 8002daa:	0028      	movs	r0, r5
 8002dac:	f000 f8ae 	bl	8002f0c <__clzsi2>
 8002db0:	280a      	cmp	r0, #10
 8002db2:	dc1c      	bgt.n	8002dee <__aeabi_f2d+0x7a>
 8002db4:	230b      	movs	r3, #11
 8002db6:	002a      	movs	r2, r5
 8002db8:	1a1b      	subs	r3, r3, r0
 8002dba:	40da      	lsrs	r2, r3
 8002dbc:	0003      	movs	r3, r0
 8002dbe:	3315      	adds	r3, #21
 8002dc0:	409d      	lsls	r5, r3
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002dfc <__aeabi_f2d+0x88>)
 8002dc4:	0312      	lsls	r2, r2, #12
 8002dc6:	1a1b      	subs	r3, r3, r0
 8002dc8:	055b      	lsls	r3, r3, #21
 8002dca:	0b12      	lsrs	r2, r2, #12
 8002dcc:	0d5b      	lsrs	r3, r3, #21
 8002dce:	e7e1      	b.n	8002d94 <__aeabi_f2d+0x20>
 8002dd0:	2d00      	cmp	r5, #0
 8002dd2:	d009      	beq.n	8002de8 <__aeabi_f2d+0x74>
 8002dd4:	0b13      	lsrs	r3, r2, #12
 8002dd6:	2280      	movs	r2, #128	@ 0x80
 8002dd8:	0312      	lsls	r2, r2, #12
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	076d      	lsls	r5, r5, #29
 8002dde:	4b08      	ldr	r3, [pc, #32]	@ (8002e00 <__aeabi_f2d+0x8c>)
 8002de0:	e7d8      	b.n	8002d94 <__aeabi_f2d+0x20>
 8002de2:	2300      	movs	r3, #0
 8002de4:	2200      	movs	r2, #0
 8002de6:	e7d5      	b.n	8002d94 <__aeabi_f2d+0x20>
 8002de8:	2200      	movs	r2, #0
 8002dea:	4b05      	ldr	r3, [pc, #20]	@ (8002e00 <__aeabi_f2d+0x8c>)
 8002dec:	e7d2      	b.n	8002d94 <__aeabi_f2d+0x20>
 8002dee:	0003      	movs	r3, r0
 8002df0:	002a      	movs	r2, r5
 8002df2:	3b0b      	subs	r3, #11
 8002df4:	409a      	lsls	r2, r3
 8002df6:	2500      	movs	r5, #0
 8002df8:	e7e3      	b.n	8002dc2 <__aeabi_f2d+0x4e>
 8002dfa:	46c0      	nop			@ (mov r8, r8)
 8002dfc:	00000389 	.word	0x00000389
 8002e00:	000007ff 	.word	0x000007ff

08002e04 <__aeabi_d2f>:
 8002e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e06:	004b      	lsls	r3, r1, #1
 8002e08:	030f      	lsls	r7, r1, #12
 8002e0a:	0d5b      	lsrs	r3, r3, #21
 8002e0c:	4c3b      	ldr	r4, [pc, #236]	@ (8002efc <__aeabi_d2f+0xf8>)
 8002e0e:	0f45      	lsrs	r5, r0, #29
 8002e10:	b083      	sub	sp, #12
 8002e12:	0a7f      	lsrs	r7, r7, #9
 8002e14:	1c5e      	adds	r6, r3, #1
 8002e16:	432f      	orrs	r7, r5
 8002e18:	9000      	str	r0, [sp, #0]
 8002e1a:	9101      	str	r1, [sp, #4]
 8002e1c:	0fca      	lsrs	r2, r1, #31
 8002e1e:	00c5      	lsls	r5, r0, #3
 8002e20:	4226      	tst	r6, r4
 8002e22:	d00b      	beq.n	8002e3c <__aeabi_d2f+0x38>
 8002e24:	4936      	ldr	r1, [pc, #216]	@ (8002f00 <__aeabi_d2f+0xfc>)
 8002e26:	185c      	adds	r4, r3, r1
 8002e28:	2cfe      	cmp	r4, #254	@ 0xfe
 8002e2a:	dd13      	ble.n	8002e54 <__aeabi_d2f+0x50>
 8002e2c:	20ff      	movs	r0, #255	@ 0xff
 8002e2e:	2300      	movs	r3, #0
 8002e30:	05c0      	lsls	r0, r0, #23
 8002e32:	4318      	orrs	r0, r3
 8002e34:	07d2      	lsls	r2, r2, #31
 8002e36:	4310      	orrs	r0, r2
 8002e38:	b003      	add	sp, #12
 8002e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d102      	bne.n	8002e46 <__aeabi_d2f+0x42>
 8002e40:	2000      	movs	r0, #0
 8002e42:	2300      	movs	r3, #0
 8002e44:	e7f4      	b.n	8002e30 <__aeabi_d2f+0x2c>
 8002e46:	433d      	orrs	r5, r7
 8002e48:	d0f0      	beq.n	8002e2c <__aeabi_d2f+0x28>
 8002e4a:	2380      	movs	r3, #128	@ 0x80
 8002e4c:	03db      	lsls	r3, r3, #15
 8002e4e:	20ff      	movs	r0, #255	@ 0xff
 8002e50:	433b      	orrs	r3, r7
 8002e52:	e7ed      	b.n	8002e30 <__aeabi_d2f+0x2c>
 8002e54:	2c00      	cmp	r4, #0
 8002e56:	dd14      	ble.n	8002e82 <__aeabi_d2f+0x7e>
 8002e58:	9b00      	ldr	r3, [sp, #0]
 8002e5a:	00ff      	lsls	r7, r7, #3
 8002e5c:	019b      	lsls	r3, r3, #6
 8002e5e:	1e58      	subs	r0, r3, #1
 8002e60:	4183      	sbcs	r3, r0
 8002e62:	0f69      	lsrs	r1, r5, #29
 8002e64:	433b      	orrs	r3, r7
 8002e66:	430b      	orrs	r3, r1
 8002e68:	0759      	lsls	r1, r3, #29
 8002e6a:	d041      	beq.n	8002ef0 <__aeabi_d2f+0xec>
 8002e6c:	210f      	movs	r1, #15
 8002e6e:	4019      	ands	r1, r3
 8002e70:	2904      	cmp	r1, #4
 8002e72:	d028      	beq.n	8002ec6 <__aeabi_d2f+0xc2>
 8002e74:	3304      	adds	r3, #4
 8002e76:	0159      	lsls	r1, r3, #5
 8002e78:	d525      	bpl.n	8002ec6 <__aeabi_d2f+0xc2>
 8002e7a:	3401      	adds	r4, #1
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	b2e0      	uxtb	r0, r4
 8002e80:	e7d6      	b.n	8002e30 <__aeabi_d2f+0x2c>
 8002e82:	0021      	movs	r1, r4
 8002e84:	3117      	adds	r1, #23
 8002e86:	dbdb      	blt.n	8002e40 <__aeabi_d2f+0x3c>
 8002e88:	2180      	movs	r1, #128	@ 0x80
 8002e8a:	201e      	movs	r0, #30
 8002e8c:	0409      	lsls	r1, r1, #16
 8002e8e:	4339      	orrs	r1, r7
 8002e90:	1b00      	subs	r0, r0, r4
 8002e92:	281f      	cmp	r0, #31
 8002e94:	dd1b      	ble.n	8002ece <__aeabi_d2f+0xca>
 8002e96:	2602      	movs	r6, #2
 8002e98:	4276      	negs	r6, r6
 8002e9a:	1b34      	subs	r4, r6, r4
 8002e9c:	000e      	movs	r6, r1
 8002e9e:	40e6      	lsrs	r6, r4
 8002ea0:	0034      	movs	r4, r6
 8002ea2:	2820      	cmp	r0, #32
 8002ea4:	d004      	beq.n	8002eb0 <__aeabi_d2f+0xac>
 8002ea6:	4817      	ldr	r0, [pc, #92]	@ (8002f04 <__aeabi_d2f+0x100>)
 8002ea8:	4684      	mov	ip, r0
 8002eaa:	4463      	add	r3, ip
 8002eac:	4099      	lsls	r1, r3
 8002eae:	430d      	orrs	r5, r1
 8002eb0:	002b      	movs	r3, r5
 8002eb2:	1e59      	subs	r1, r3, #1
 8002eb4:	418b      	sbcs	r3, r1
 8002eb6:	4323      	orrs	r3, r4
 8002eb8:	0759      	lsls	r1, r3, #29
 8002eba:	d015      	beq.n	8002ee8 <__aeabi_d2f+0xe4>
 8002ebc:	210f      	movs	r1, #15
 8002ebe:	2400      	movs	r4, #0
 8002ec0:	4019      	ands	r1, r3
 8002ec2:	2904      	cmp	r1, #4
 8002ec4:	d117      	bne.n	8002ef6 <__aeabi_d2f+0xf2>
 8002ec6:	019b      	lsls	r3, r3, #6
 8002ec8:	0a5b      	lsrs	r3, r3, #9
 8002eca:	b2e0      	uxtb	r0, r4
 8002ecc:	e7b0      	b.n	8002e30 <__aeabi_d2f+0x2c>
 8002ece:	4c0e      	ldr	r4, [pc, #56]	@ (8002f08 <__aeabi_d2f+0x104>)
 8002ed0:	191c      	adds	r4, r3, r4
 8002ed2:	002b      	movs	r3, r5
 8002ed4:	40a5      	lsls	r5, r4
 8002ed6:	40c3      	lsrs	r3, r0
 8002ed8:	40a1      	lsls	r1, r4
 8002eda:	1e68      	subs	r0, r5, #1
 8002edc:	4185      	sbcs	r5, r0
 8002ede:	4329      	orrs	r1, r5
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	2400      	movs	r4, #0
 8002ee4:	0759      	lsls	r1, r3, #29
 8002ee6:	d1c1      	bne.n	8002e6c <__aeabi_d2f+0x68>
 8002ee8:	019b      	lsls	r3, r3, #6
 8002eea:	2000      	movs	r0, #0
 8002eec:	0a5b      	lsrs	r3, r3, #9
 8002eee:	e79f      	b.n	8002e30 <__aeabi_d2f+0x2c>
 8002ef0:	08db      	lsrs	r3, r3, #3
 8002ef2:	b2e0      	uxtb	r0, r4
 8002ef4:	e79c      	b.n	8002e30 <__aeabi_d2f+0x2c>
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	e7e5      	b.n	8002ec6 <__aeabi_d2f+0xc2>
 8002efa:	46c0      	nop			@ (mov r8, r8)
 8002efc:	000007fe 	.word	0x000007fe
 8002f00:	fffffc80 	.word	0xfffffc80
 8002f04:	fffffca2 	.word	0xfffffca2
 8002f08:	fffffc82 	.word	0xfffffc82

08002f0c <__clzsi2>:
 8002f0c:	211c      	movs	r1, #28
 8002f0e:	2301      	movs	r3, #1
 8002f10:	041b      	lsls	r3, r3, #16
 8002f12:	4298      	cmp	r0, r3
 8002f14:	d301      	bcc.n	8002f1a <__clzsi2+0xe>
 8002f16:	0c00      	lsrs	r0, r0, #16
 8002f18:	3910      	subs	r1, #16
 8002f1a:	0a1b      	lsrs	r3, r3, #8
 8002f1c:	4298      	cmp	r0, r3
 8002f1e:	d301      	bcc.n	8002f24 <__clzsi2+0x18>
 8002f20:	0a00      	lsrs	r0, r0, #8
 8002f22:	3908      	subs	r1, #8
 8002f24:	091b      	lsrs	r3, r3, #4
 8002f26:	4298      	cmp	r0, r3
 8002f28:	d301      	bcc.n	8002f2e <__clzsi2+0x22>
 8002f2a:	0900      	lsrs	r0, r0, #4
 8002f2c:	3904      	subs	r1, #4
 8002f2e:	a202      	add	r2, pc, #8	@ (adr r2, 8002f38 <__clzsi2+0x2c>)
 8002f30:	5c10      	ldrb	r0, [r2, r0]
 8002f32:	1840      	adds	r0, r0, r1
 8002f34:	4770      	bx	lr
 8002f36:	46c0      	nop			@ (mov r8, r8)
 8002f38:	02020304 	.word	0x02020304
 8002f3c:	01010101 	.word	0x01010101
	...

08002f48 <__clzdi2>:
 8002f48:	b510      	push	{r4, lr}
 8002f4a:	2900      	cmp	r1, #0
 8002f4c:	d103      	bne.n	8002f56 <__clzdi2+0xe>
 8002f4e:	f7ff ffdd 	bl	8002f0c <__clzsi2>
 8002f52:	3020      	adds	r0, #32
 8002f54:	e002      	b.n	8002f5c <__clzdi2+0x14>
 8002f56:	0008      	movs	r0, r1
 8002f58:	f7ff ffd8 	bl	8002f0c <__clzsi2>
 8002f5c:	bd10      	pop	{r4, pc}
 8002f5e:	46c0      	nop			@ (mov r8, r8)

08002f60 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8002f68:	4b09      	ldr	r3, [pc, #36]	@ (8002f90 <I2CSensors_Init+0x30>)
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 8002f6e:	4a09      	ldr	r2, [pc, #36]	@ (8002f94 <I2CSensors_Init+0x34>)
 8002f70:	4b09      	ldr	r3, [pc, #36]	@ (8002f98 <I2CSensors_Init+0x38>)
 8002f72:	0011      	movs	r1, r2
 8002f74:	0018      	movs	r0, r3
 8002f76:	f000 f9d9 	bl	800332c <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 8002f7a:	4a06      	ldr	r2, [pc, #24]	@ (8002f94 <I2CSensors_Init+0x34>)
 8002f7c:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <I2CSensors_Init+0x38>)
 8002f7e:	0011      	movs	r1, r2
 8002f80:	0018      	movs	r0, r3
 8002f82:	f000 f8ae 	bl	80030e2 <Gas_Init>
}
 8002f86:	46c0      	nop			@ (mov r8, r8)
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b002      	add	sp, #8
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	46c0      	nop			@ (mov r8, r8)
 8002f90:	20000208 	.word	0x20000208
 8002f94:	08002ff1 	.word	0x08002ff1
 8002f98:	08002f9d 	.word	0x08002f9d

08002f9c <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8002f9c:	b5b0      	push	{r4, r5, r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6039      	str	r1, [r7, #0]
 8002fa4:	0011      	movs	r1, r2
 8002fa6:	1dfb      	adds	r3, r7, #7
 8002fa8:	1c02      	adds	r2, r0, #0
 8002faa:	701a      	strb	r2, [r3, #0]
 8002fac:	1dbb      	adds	r3, r7, #6
 8002fae:	1c0a      	adds	r2, r1, #0
 8002fb0:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8002fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8002fec <ReadI2C+0x50>)
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	1dfb      	adds	r3, r7, #7
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	18db      	adds	r3, r3, r3
 8002fbe:	b299      	uxth	r1, r3
 8002fc0:	1dbb      	adds	r3, r7, #6
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	250f      	movs	r5, #15
 8002fc8:	197c      	adds	r4, r7, r5
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	f002 fd5c 	bl	8005a88 <HAL_I2C_Master_Receive_DMA>
 8002fd0:	0003      	movs	r3, r0
 8002fd2:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8002fd4:	197b      	adds	r3, r7, r5
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <ReadI2C+0x44>
        return false;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	e000      	b.n	8002fe2 <ReadI2C+0x46>
    }
    return true;
 8002fe0:	2301      	movs	r3, #1
}
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	b004      	add	sp, #16
 8002fe8:	bdb0      	pop	{r4, r5, r7, pc}
 8002fea:	46c0      	nop			@ (mov r8, r8)
 8002fec:	20000208 	.word	0x20000208

08002ff0 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8002ff0:	b5b0      	push	{r4, r5, r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6039      	str	r1, [r7, #0]
 8002ff8:	0011      	movs	r1, r2
 8002ffa:	1dfb      	adds	r3, r7, #7
 8002ffc:	1c02      	adds	r2, r0, #0
 8002ffe:	701a      	strb	r2, [r3, #0]
 8003000:	1dbb      	adds	r3, r7, #6
 8003002:	1c0a      	adds	r2, r1, #0
 8003004:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8003006:	4b0e      	ldr	r3, [pc, #56]	@ (8003040 <WriteI2C+0x50>)
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	1dfb      	adds	r3, r7, #7
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	18db      	adds	r3, r3, r3
 8003012:	b299      	uxth	r1, r3
 8003014:	1dbb      	adds	r3, r7, #6
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	b29b      	uxth	r3, r3
 800301a:	250f      	movs	r5, #15
 800301c:	197c      	adds	r4, r7, r5
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	f002 fc2c 	bl	800587c <HAL_I2C_Master_Transmit_DMA>
 8003024:	0003      	movs	r3, r0
 8003026:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8003028:	197b      	adds	r3, r7, r5
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <WriteI2C+0x44>
        return false;
 8003030:	2300      	movs	r3, #0
 8003032:	e000      	b.n	8003036 <WriteI2C+0x46>
    }
    return true;
 8003034:	2301      	movs	r3, #1
}
 8003036:	0018      	movs	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	b004      	add	sp, #16
 800303c:	bdb0      	pop	{r4, r5, r7, pc}
 800303e:	46c0      	nop			@ (mov r8, r8)
 8003040:	20000208 	.word	0x20000208

08003044 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800304a:	4b10      	ldr	r3, [pc, #64]	@ (800308c <MX_DMA_Init+0x48>)
 800304c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800304e:	4b0f      	ldr	r3, [pc, #60]	@ (800308c <MX_DMA_Init+0x48>)
 8003050:	2101      	movs	r1, #1
 8003052:	430a      	orrs	r2, r1
 8003054:	631a      	str	r2, [r3, #48]	@ 0x30
 8003056:	4b0d      	ldr	r3, [pc, #52]	@ (800308c <MX_DMA_Init+0x48>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305a:	2201      	movs	r2, #1
 800305c:	4013      	ands	r3, r2
 800305e:	607b      	str	r3, [r7, #4]
 8003060:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8003062:	2200      	movs	r2, #0
 8003064:	2100      	movs	r1, #0
 8003066:	200a      	movs	r0, #10
 8003068:	f001 ff7c 	bl	8004f64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800306c:	200a      	movs	r0, #10
 800306e:	f001 ff8e 	bl	8004f8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8003072:	2200      	movs	r2, #0
 8003074:	2100      	movs	r1, #0
 8003076:	200b      	movs	r0, #11
 8003078:	f001 ff74 	bl	8004f64 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800307c:	200b      	movs	r0, #11
 800307e:	f001 ff86 	bl	8004f8e <HAL_NVIC_EnableIRQ>

}
 8003082:	46c0      	nop			@ (mov r8, r8)
 8003084:	46bd      	mov	sp, r7
 8003086:	b002      	add	sp, #8
 8003088:	bd80      	pop	{r7, pc}
 800308a:	46c0      	nop			@ (mov r8, r8)
 800308c:	40021000 	.word	0x40021000

08003090 <Gadget_Init>:
    .VOC_measurementEnabled = true,
    .NO_measurementEnabled = false,
    .MIC_measurementEnabled = true
};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetPower);
 800309a:	4b0a      	ldr	r3, [pc, #40]	@ (80030c4 <Gadget_Init+0x34>)
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	f000 fdad 	bl	8003bfc <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s);
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	0011      	movs	r1, r2
 80030a8:	0018      	movs	r0, r3
 80030aa:	f000 fbf3 	bl	8003894 <Meas_Init>
//  Gadget_SetSleepDuration();
  Info("Gadget initialised.");
 80030ae:	4a06      	ldr	r2, [pc, #24]	@ (80030c8 <Gadget_Init+0x38>)
 80030b0:	4b06      	ldr	r3, [pc, #24]	@ (80030cc <Gadget_Init+0x3c>)
 80030b2:	0019      	movs	r1, r3
 80030b4:	2002      	movs	r0, #2
 80030b6:	f001 fa55 	bl	8004564 <CreateLine>
}
 80030ba:	46c0      	nop			@ (mov r8, r8)
 80030bc:	46bd      	mov	sp, r7
 80030be:	b002      	add	sp, #8
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	46c0      	nop			@ (mov r8, r8)
 80030c4:	20000000 	.word	0x20000000
 80030c8:	0800c4a8 	.word	0x0800c4a8
 80030cc:	0800c4bc 	.word	0x0800c4bc

080030d0 <UpkeepGadget>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void UpkeepGadget() {
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  Meas_Upkeep();
 80030d4:	f000 fd32 	bl	8003b3c <Meas_Upkeep>
//  if(!EnoughPower){
//    if(Meas_GetState() == MEAS_STATE_INIT) {
//        Debug("Going into sleep mode.");
//      }
//  }
  if(Meas_GetState() == MEAS_STATE_PROCESS_RESULTS) {
 80030d8:	f000 fdde 	bl	8003c98 <Meas_GetState>
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 80030dc:	46c0      	nop			@ (mov r8, r8)
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	0011      	movs	r1, r2
 80030f2:	0018      	movs	r0, r3
 80030f4:	f000 fe58 	bl	8003da8 <SGP_Init>
}
 80030f8:	46c0      	nop			@ (mov r8, r8)
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b002      	add	sp, #8
 80030fe:	bd80      	pop	{r7, pc}

08003100 <Gas_DeviceConnected>:

bool Gas_GetMeasurementValues(float* vocIndex) {
  return SGP_GetMeasurementValues(vocIndex);
}

bool Gas_DeviceConnected(void) {
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 8003104:	f000 fe64 	bl	8003dd0 <SGP_DeviceConnected>
 8003108:	0003      	movs	r3, r0
}
 800310a:	0018      	movs	r0, r3
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8003110:	b590      	push	{r4, r7, lr}
 8003112:	b08b      	sub	sp, #44	@ 0x2c
 8003114:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003116:	2414      	movs	r4, #20
 8003118:	193b      	adds	r3, r7, r4
 800311a:	0018      	movs	r0, r3
 800311c:	2314      	movs	r3, #20
 800311e:	001a      	movs	r2, r3
 8003120:	2100      	movs	r1, #0
 8003122:	f007 f841 	bl	800a1a8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003126:	4b79      	ldr	r3, [pc, #484]	@ (800330c <MX_GPIO_Init+0x1fc>)
 8003128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800312a:	4b78      	ldr	r3, [pc, #480]	@ (800330c <MX_GPIO_Init+0x1fc>)
 800312c:	2104      	movs	r1, #4
 800312e:	430a      	orrs	r2, r1
 8003130:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003132:	4b76      	ldr	r3, [pc, #472]	@ (800330c <MX_GPIO_Init+0x1fc>)
 8003134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003136:	2204      	movs	r2, #4
 8003138:	4013      	ands	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800313e:	4b73      	ldr	r3, [pc, #460]	@ (800330c <MX_GPIO_Init+0x1fc>)
 8003140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003142:	4b72      	ldr	r3, [pc, #456]	@ (800330c <MX_GPIO_Init+0x1fc>)
 8003144:	2180      	movs	r1, #128	@ 0x80
 8003146:	430a      	orrs	r2, r1
 8003148:	62da      	str	r2, [r3, #44]	@ 0x2c
 800314a:	4b70      	ldr	r3, [pc, #448]	@ (800330c <MX_GPIO_Init+0x1fc>)
 800314c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314e:	2280      	movs	r2, #128	@ 0x80
 8003150:	4013      	ands	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003156:	4b6d      	ldr	r3, [pc, #436]	@ (800330c <MX_GPIO_Init+0x1fc>)
 8003158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800315a:	4b6c      	ldr	r3, [pc, #432]	@ (800330c <MX_GPIO_Init+0x1fc>)
 800315c:	2101      	movs	r1, #1
 800315e:	430a      	orrs	r2, r1
 8003160:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003162:	4b6a      	ldr	r3, [pc, #424]	@ (800330c <MX_GPIO_Init+0x1fc>)
 8003164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003166:	2201      	movs	r2, #1
 8003168:	4013      	ands	r3, r2
 800316a:	60bb      	str	r3, [r7, #8]
 800316c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800316e:	4b67      	ldr	r3, [pc, #412]	@ (800330c <MX_GPIO_Init+0x1fc>)
 8003170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003172:	4b66      	ldr	r3, [pc, #408]	@ (800330c <MX_GPIO_Init+0x1fc>)
 8003174:	2102      	movs	r1, #2
 8003176:	430a      	orrs	r2, r1
 8003178:	62da      	str	r2, [r3, #44]	@ 0x2c
 800317a:	4b64      	ldr	r3, [pc, #400]	@ (800330c <MX_GPIO_Init+0x1fc>)
 800317c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317e:	2202      	movs	r2, #2
 8003180:	4013      	ands	r3, r2
 8003182:	607b      	str	r3, [r7, #4]
 8003184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003186:	4b61      	ldr	r3, [pc, #388]	@ (800330c <MX_GPIO_Init+0x1fc>)
 8003188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800318a:	4b60      	ldr	r3, [pc, #384]	@ (800330c <MX_GPIO_Init+0x1fc>)
 800318c:	2108      	movs	r1, #8
 800318e:	430a      	orrs	r2, r1
 8003190:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003192:	4b5e      	ldr	r3, [pc, #376]	@ (800330c <MX_GPIO_Init+0x1fc>)
 8003194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003196:	2208      	movs	r2, #8
 8003198:	4013      	ands	r3, r2
 800319a:	603b      	str	r3, [r7, #0]
 800319c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
 800319e:	2380      	movs	r3, #128	@ 0x80
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	485b      	ldr	r0, [pc, #364]	@ (8003310 <MX_GPIO_Init+0x200>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	0019      	movs	r1, r3
 80031a8:	f002 fa9a 	bl	80056e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 80031ac:	2380      	movs	r3, #128	@ 0x80
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	4858      	ldr	r0, [pc, #352]	@ (8003314 <MX_GPIO_Init+0x204>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	0019      	movs	r1, r3
 80031b6:	f002 fa93 	bl	80056e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_EN_GPIO_Port, Wireless_EN_Pin, GPIO_PIN_SET);
 80031ba:	2380      	movs	r3, #128	@ 0x80
 80031bc:	0219      	lsls	r1, r3, #8
 80031be:	23a0      	movs	r3, #160	@ 0xa0
 80031c0:	05db      	lsls	r3, r3, #23
 80031c2:	2201      	movs	r2, #1
 80031c4:	0018      	movs	r0, r3
 80031c6:	f002 fa8b 	bl	80056e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC9 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 80031ca:	193b      	adds	r3, r7, r4
 80031cc:	4a52      	ldr	r2, [pc, #328]	@ (8003318 <MX_GPIO_Init+0x208>)
 80031ce:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031d0:	193b      	adds	r3, r7, r4
 80031d2:	2203      	movs	r2, #3
 80031d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d6:	193b      	adds	r3, r7, r4
 80031d8:	2200      	movs	r2, #0
 80031da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031dc:	193b      	adds	r3, r7, r4
 80031de:	4a4d      	ldr	r2, [pc, #308]	@ (8003314 <MX_GPIO_Init+0x204>)
 80031e0:	0019      	movs	r1, r3
 80031e2:	0010      	movs	r0, r2
 80031e4:	f002 f8fe 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80031e8:	193b      	adds	r3, r7, r4
 80031ea:	2203      	movs	r2, #3
 80031ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031ee:	193b      	adds	r3, r7, r4
 80031f0:	2203      	movs	r2, #3
 80031f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f4:	193b      	adds	r3, r7, r4
 80031f6:	2200      	movs	r2, #0
 80031f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80031fa:	193b      	adds	r3, r7, r4
 80031fc:	4a47      	ldr	r2, [pc, #284]	@ (800331c <MX_GPIO_Init+0x20c>)
 80031fe:	0019      	movs	r1, r3
 8003200:	0010      	movs	r0, r2
 8003202:	f002 f8ef 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 PA3 PA4
                           PA5 PA6 PA7 PA8
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8003206:	193b      	adds	r3, r7, r4
 8003208:	4a45      	ldr	r2, [pc, #276]	@ (8003320 <MX_GPIO_Init+0x210>)
 800320a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800320c:	193b      	adds	r3, r7, r4
 800320e:	2203      	movs	r2, #3
 8003210:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003212:	193b      	adds	r3, r7, r4
 8003214:	2200      	movs	r2, #0
 8003216:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003218:	193a      	adds	r2, r7, r4
 800321a:	23a0      	movs	r3, #160	@ 0xa0
 800321c:	05db      	lsls	r3, r3, #23
 800321e:	0011      	movs	r1, r2
 8003220:	0018      	movs	r0, r3
 8003222:	f002 f8df 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB11
                           PB14 PB3 PB4 PB5
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11
 8003226:	193b      	adds	r3, r7, r4
 8003228:	4a3e      	ldr	r2, [pc, #248]	@ (8003324 <MX_GPIO_Init+0x214>)
 800322a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800322c:	193b      	adds	r3, r7, r4
 800322e:	2203      	movs	r2, #3
 8003230:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003232:	193b      	adds	r3, r7, r4
 8003234:	2200      	movs	r2, #0
 8003236:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003238:	193b      	adds	r3, r7, r4
 800323a:	4a35      	ldr	r2, [pc, #212]	@ (8003310 <MX_GPIO_Init+0x200>)
 800323c:	0019      	movs	r1, r3
 800323e:	0010      	movs	r0, r2
 8003240:	f002 f8d0 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_Trigger_Pin;
 8003244:	0021      	movs	r1, r4
 8003246:	187b      	adds	r3, r7, r1
 8003248:	2280      	movs	r2, #128	@ 0x80
 800324a:	00d2      	lsls	r2, r2, #3
 800324c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800324e:	000c      	movs	r4, r1
 8003250:	193b      	adds	r3, r7, r4
 8003252:	2201      	movs	r2, #1
 8003254:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003256:	193b      	adds	r3, r7, r4
 8003258:	2200      	movs	r2, #0
 800325a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800325c:	193b      	adds	r3, r7, r4
 800325e:	2203      	movs	r2, #3
 8003260:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MIC_Trigger_GPIO_Port, &GPIO_InitStruct);
 8003262:	193b      	adds	r3, r7, r4
 8003264:	4a2a      	ldr	r2, [pc, #168]	@ (8003310 <MX_GPIO_Init+0x200>)
 8003266:	0019      	movs	r1, r3
 8003268:	0010      	movs	r0, r2
 800326a:	f002 f8bb 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 800326e:	0021      	movs	r1, r4
 8003270:	187b      	adds	r3, r7, r1
 8003272:	2280      	movs	r2, #128	@ 0x80
 8003274:	0052      	lsls	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003278:	000c      	movs	r4, r1
 800327a:	193b      	adds	r3, r7, r4
 800327c:	2201      	movs	r2, #1
 800327e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003280:	193b      	adds	r3, r7, r4
 8003282:	2200      	movs	r2, #0
 8003284:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003286:	193b      	adds	r3, r7, r4
 8003288:	2200      	movs	r2, #0
 800328a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 800328c:	193b      	adds	r3, r7, r4
 800328e:	4a21      	ldr	r2, [pc, #132]	@ (8003314 <MX_GPIO_Init+0x204>)
 8003290:	0019      	movs	r1, r3
 8003292:	0010      	movs	r0, r2
 8003294:	f002 f8a6 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Wireless_EN_Pin;
 8003298:	0021      	movs	r1, r4
 800329a:	187b      	adds	r3, r7, r1
 800329c:	2280      	movs	r2, #128	@ 0x80
 800329e:	0212      	lsls	r2, r2, #8
 80032a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032a2:	000c      	movs	r4, r1
 80032a4:	193b      	adds	r3, r7, r4
 80032a6:	2201      	movs	r2, #1
 80032a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032aa:	193b      	adds	r3, r7, r4
 80032ac:	2200      	movs	r2, #0
 80032ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b0:	193b      	adds	r3, r7, r4
 80032b2:	2200      	movs	r2, #0
 80032b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Wireless_EN_GPIO_Port, &GPIO_InitStruct);
 80032b6:	193a      	adds	r2, r7, r4
 80032b8:	23a0      	movs	r3, #160	@ 0xa0
 80032ba:	05db      	lsls	r3, r3, #23
 80032bc:	0011      	movs	r1, r2
 80032be:	0018      	movs	r0, r3
 80032c0:	f002 f890 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80032c4:	193b      	adds	r3, r7, r4
 80032c6:	2204      	movs	r2, #4
 80032c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032ca:	193b      	adds	r3, r7, r4
 80032cc:	2203      	movs	r2, #3
 80032ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d0:	193b      	adds	r3, r7, r4
 80032d2:	2200      	movs	r2, #0
 80032d4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032d6:	193b      	adds	r3, r7, r4
 80032d8:	4a13      	ldr	r2, [pc, #76]	@ (8003328 <MX_GPIO_Init+0x218>)
 80032da:	0019      	movs	r1, r3
 80032dc:	0010      	movs	r0, r2
 80032de:	f002 f881 	bl	80053e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Wireless_PG_Pin;
 80032e2:	0021      	movs	r1, r4
 80032e4:	187b      	adds	r3, r7, r1
 80032e6:	2280      	movs	r2, #128	@ 0x80
 80032e8:	0052      	lsls	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032ec:	187b      	adds	r3, r7, r1
 80032ee:	2200      	movs	r2, #0
 80032f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f2:	187b      	adds	r3, r7, r1
 80032f4:	2200      	movs	r2, #0
 80032f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Wireless_PG_GPIO_Port, &GPIO_InitStruct);
 80032f8:	187b      	adds	r3, r7, r1
 80032fa:	4a05      	ldr	r2, [pc, #20]	@ (8003310 <MX_GPIO_Init+0x200>)
 80032fc:	0019      	movs	r1, r3
 80032fe:	0010      	movs	r0, r2
 8003300:	f002 f870 	bl	80053e4 <HAL_GPIO_Init>

}
 8003304:	46c0      	nop			@ (mov r8, r8)
 8003306:	46bd      	mov	sp, r7
 8003308:	b00b      	add	sp, #44	@ 0x2c
 800330a:	bd90      	pop	{r4, r7, pc}
 800330c:	40021000 	.word	0x40021000
 8003310:	50000400 	.word	0x50000400
 8003314:	50000800 	.word	0x50000800
 8003318:	00003aff 	.word	0x00003aff
 800331c:	50001c00 	.word	0x50001c00
 8003320:	000011fd 	.word	0x000011fd
 8003324:	00004a3f 	.word	0x00004a3f
 8003328:	50000c00 	.word	0x50000c00

0800332c <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	0011      	movs	r1, r2
 800333c:	0018      	movs	r0, r3
 800333e:	f001 fa69 	bl	8004814 <HIDS_Init>
}
 8003342:	46c0      	nop			@ (mov r8, r8)
 8003344:	46bd      	mov	sp, r7
 8003346:	b002      	add	sp, #8
 8003348:	bd80      	pop	{r7, pc}

0800334a <HT_StartMeasurement>:

void HT_StartMeasurement() {
 800334a:	b580      	push	{r7, lr}
 800334c:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 800334e:	f001 fa83 	bl	8004858 <HIDS_StartMeasurement>
}
 8003352:	46c0      	nop			@ (mov r8, r8)
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	0011      	movs	r1, r2
 8003368:	0018      	movs	r0, r3
 800336a:	f001 fb59 	bl	8004a20 <HIDS_GetMeasurementValues>
 800336e:	0003      	movs	r3, r0
}
 8003370:	0018      	movs	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	b002      	add	sp, #8
 8003376:	bd80      	pop	{r7, pc}

08003378 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 800337c:	f001 faec 	bl	8004958 <HIDS_DeviceConnected>
 8003380:	0003      	movs	r3, r0
}
 8003382:	0018      	movs	r0, r3
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800338c:	4b1b      	ldr	r3, [pc, #108]	@ (80033fc <MX_I2C1_Init+0x74>)
 800338e:	4a1c      	ldr	r2, [pc, #112]	@ (8003400 <MX_I2C1_Init+0x78>)
 8003390:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8003392:	4b1a      	ldr	r3, [pc, #104]	@ (80033fc <MX_I2C1_Init+0x74>)
 8003394:	4a1b      	ldr	r2, [pc, #108]	@ (8003404 <MX_I2C1_Init+0x7c>)
 8003396:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003398:	4b18      	ldr	r3, [pc, #96]	@ (80033fc <MX_I2C1_Init+0x74>)
 800339a:	2200      	movs	r2, #0
 800339c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800339e:	4b17      	ldr	r3, [pc, #92]	@ (80033fc <MX_I2C1_Init+0x74>)
 80033a0:	2201      	movs	r2, #1
 80033a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033a4:	4b15      	ldr	r3, [pc, #84]	@ (80033fc <MX_I2C1_Init+0x74>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80033aa:	4b14      	ldr	r3, [pc, #80]	@ (80033fc <MX_I2C1_Init+0x74>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033b0:	4b12      	ldr	r3, [pc, #72]	@ (80033fc <MX_I2C1_Init+0x74>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033b6:	4b11      	ldr	r3, [pc, #68]	@ (80033fc <MX_I2C1_Init+0x74>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033bc:	4b0f      	ldr	r3, [pc, #60]	@ (80033fc <MX_I2C1_Init+0x74>)
 80033be:	2200      	movs	r2, #0
 80033c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80033c2:	4b0e      	ldr	r3, [pc, #56]	@ (80033fc <MX_I2C1_Init+0x74>)
 80033c4:	0018      	movs	r0, r3
 80033c6:	f002 f9c3 	bl	8005750 <HAL_I2C_Init>
 80033ca:	1e03      	subs	r3, r0, #0
 80033cc:	d001      	beq.n	80033d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80033ce:	f000 fa21 	bl	8003814 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033d2:	4b0a      	ldr	r3, [pc, #40]	@ (80033fc <MX_I2C1_Init+0x74>)
 80033d4:	2100      	movs	r1, #0
 80033d6:	0018      	movs	r0, r3
 80033d8:	f004 f932 	bl	8007640 <HAL_I2CEx_ConfigAnalogFilter>
 80033dc:	1e03      	subs	r3, r0, #0
 80033de:	d001      	beq.n	80033e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80033e0:	f000 fa18 	bl	8003814 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80033e4:	4b05      	ldr	r3, [pc, #20]	@ (80033fc <MX_I2C1_Init+0x74>)
 80033e6:	2100      	movs	r1, #0
 80033e8:	0018      	movs	r0, r3
 80033ea:	f004 f975 	bl	80076d8 <HAL_I2CEx_ConfigDigitalFilter>
 80033ee:	1e03      	subs	r3, r0, #0
 80033f0:	d001      	beq.n	80033f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80033f2:	f000 fa0f 	bl	8003814 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80033f6:	46c0      	nop			@ (mov r8, r8)
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	2000020c 	.word	0x2000020c
 8003400:	40005400 	.word	0x40005400
 8003404:	00303d5b 	.word	0x00303d5b

08003408 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003408:	b590      	push	{r4, r7, lr}
 800340a:	b089      	sub	sp, #36	@ 0x24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003410:	240c      	movs	r4, #12
 8003412:	193b      	adds	r3, r7, r4
 8003414:	0018      	movs	r0, r3
 8003416:	2314      	movs	r3, #20
 8003418:	001a      	movs	r2, r3
 800341a:	2100      	movs	r1, #0
 800341c:	f006 fec4 	bl	800a1a8 <memset>
  if(i2cHandle->Instance==I2C1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a45      	ldr	r2, [pc, #276]	@ (800353c <HAL_I2C_MspInit+0x134>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d000      	beq.n	800342c <HAL_I2C_MspInit+0x24>
 800342a:	e082      	b.n	8003532 <HAL_I2C_MspInit+0x12a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800342c:	4b44      	ldr	r3, [pc, #272]	@ (8003540 <HAL_I2C_MspInit+0x138>)
 800342e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003430:	4b43      	ldr	r3, [pc, #268]	@ (8003540 <HAL_I2C_MspInit+0x138>)
 8003432:	2102      	movs	r1, #2
 8003434:	430a      	orrs	r2, r1
 8003436:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003438:	4b41      	ldr	r3, [pc, #260]	@ (8003540 <HAL_I2C_MspInit+0x138>)
 800343a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800343c:	2202      	movs	r2, #2
 800343e:	4013      	ands	r3, r2
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003444:	0021      	movs	r1, r4
 8003446:	187b      	adds	r3, r7, r1
 8003448:	22c0      	movs	r2, #192	@ 0xc0
 800344a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800344c:	187b      	adds	r3, r7, r1
 800344e:	2212      	movs	r2, #18
 8003450:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003452:	187b      	adds	r3, r7, r1
 8003454:	2200      	movs	r2, #0
 8003456:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003458:	187b      	adds	r3, r7, r1
 800345a:	2203      	movs	r2, #3
 800345c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800345e:	187b      	adds	r3, r7, r1
 8003460:	2201      	movs	r2, #1
 8003462:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003464:	187b      	adds	r3, r7, r1
 8003466:	4a37      	ldr	r2, [pc, #220]	@ (8003544 <HAL_I2C_MspInit+0x13c>)
 8003468:	0019      	movs	r1, r3
 800346a:	0010      	movs	r0, r2
 800346c:	f001 ffba 	bl	80053e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003470:	4b33      	ldr	r3, [pc, #204]	@ (8003540 <HAL_I2C_MspInit+0x138>)
 8003472:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003474:	4b32      	ldr	r3, [pc, #200]	@ (8003540 <HAL_I2C_MspInit+0x138>)
 8003476:	2180      	movs	r1, #128	@ 0x80
 8003478:	0389      	lsls	r1, r1, #14
 800347a:	430a      	orrs	r2, r1
 800347c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800347e:	4b32      	ldr	r3, [pc, #200]	@ (8003548 <HAL_I2C_MspInit+0x140>)
 8003480:	4a32      	ldr	r2, [pc, #200]	@ (800354c <HAL_I2C_MspInit+0x144>)
 8003482:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8003484:	4b30      	ldr	r3, [pc, #192]	@ (8003548 <HAL_I2C_MspInit+0x140>)
 8003486:	2206      	movs	r2, #6
 8003488:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800348a:	4b2f      	ldr	r3, [pc, #188]	@ (8003548 <HAL_I2C_MspInit+0x140>)
 800348c:	2200      	movs	r2, #0
 800348e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003490:	4b2d      	ldr	r3, [pc, #180]	@ (8003548 <HAL_I2C_MspInit+0x140>)
 8003492:	2200      	movs	r2, #0
 8003494:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003496:	4b2c      	ldr	r3, [pc, #176]	@ (8003548 <HAL_I2C_MspInit+0x140>)
 8003498:	2280      	movs	r2, #128	@ 0x80
 800349a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800349c:	4b2a      	ldr	r3, [pc, #168]	@ (8003548 <HAL_I2C_MspInit+0x140>)
 800349e:	2200      	movs	r2, #0
 80034a0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034a2:	4b29      	ldr	r3, [pc, #164]	@ (8003548 <HAL_I2C_MspInit+0x140>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80034a8:	4b27      	ldr	r3, [pc, #156]	@ (8003548 <HAL_I2C_MspInit+0x140>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034ae:	4b26      	ldr	r3, [pc, #152]	@ (8003548 <HAL_I2C_MspInit+0x140>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80034b4:	4b24      	ldr	r3, [pc, #144]	@ (8003548 <HAL_I2C_MspInit+0x140>)
 80034b6:	0018      	movs	r0, r3
 80034b8:	f001 fd86 	bl	8004fc8 <HAL_DMA_Init>
 80034bc:	1e03      	subs	r3, r0, #0
 80034be:	d001      	beq.n	80034c4 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 80034c0:	f000 f9a8 	bl	8003814 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a20      	ldr	r2, [pc, #128]	@ (8003548 <HAL_I2C_MspInit+0x140>)
 80034c8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80034ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003548 <HAL_I2C_MspInit+0x140>)
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 80034d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003550 <HAL_I2C_MspInit+0x148>)
 80034d2:	4a20      	ldr	r2, [pc, #128]	@ (8003554 <HAL_I2C_MspInit+0x14c>)
 80034d4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 80034d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003550 <HAL_I2C_MspInit+0x148>)
 80034d8:	2206      	movs	r2, #6
 80034da:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003550 <HAL_I2C_MspInit+0x148>)
 80034de:	2210      	movs	r2, #16
 80034e0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003550 <HAL_I2C_MspInit+0x148>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034e8:	4b19      	ldr	r3, [pc, #100]	@ (8003550 <HAL_I2C_MspInit+0x148>)
 80034ea:	2280      	movs	r2, #128	@ 0x80
 80034ec:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034ee:	4b18      	ldr	r3, [pc, #96]	@ (8003550 <HAL_I2C_MspInit+0x148>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034f4:	4b16      	ldr	r3, [pc, #88]	@ (8003550 <HAL_I2C_MspInit+0x148>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80034fa:	4b15      	ldr	r3, [pc, #84]	@ (8003550 <HAL_I2C_MspInit+0x148>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003500:	4b13      	ldr	r3, [pc, #76]	@ (8003550 <HAL_I2C_MspInit+0x148>)
 8003502:	2200      	movs	r2, #0
 8003504:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003506:	4b12      	ldr	r3, [pc, #72]	@ (8003550 <HAL_I2C_MspInit+0x148>)
 8003508:	0018      	movs	r0, r3
 800350a:	f001 fd5d 	bl	8004fc8 <HAL_DMA_Init>
 800350e:	1e03      	subs	r3, r0, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8003512:	f000 f97f 	bl	8003814 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a0d      	ldr	r2, [pc, #52]	@ (8003550 <HAL_I2C_MspInit+0x148>)
 800351a:	639a      	str	r2, [r3, #56]	@ 0x38
 800351c:	4b0c      	ldr	r3, [pc, #48]	@ (8003550 <HAL_I2C_MspInit+0x148>)
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8003522:	2200      	movs	r2, #0
 8003524:	2100      	movs	r1, #0
 8003526:	2017      	movs	r0, #23
 8003528:	f001 fd1c 	bl	8004f64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800352c:	2017      	movs	r0, #23
 800352e:	f001 fd2e 	bl	8004f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003532:	46c0      	nop			@ (mov r8, r8)
 8003534:	46bd      	mov	sp, r7
 8003536:	b009      	add	sp, #36	@ 0x24
 8003538:	bd90      	pop	{r4, r7, pc}
 800353a:	46c0      	nop			@ (mov r8, r8)
 800353c:	40005400 	.word	0x40005400
 8003540:	40021000 	.word	0x40021000
 8003544:	50000400 	.word	0x50000400
 8003548:	20000260 	.word	0x20000260
 800354c:	40020030 	.word	0x40020030
 8003550:	200002a8 	.word	0x200002a8
 8003554:	4002001c 	.word	0x4002001c

08003558 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800355c:	4b10      	ldr	r3, [pc, #64]	@ (80035a0 <MX_I2S2_Init+0x48>)
 800355e:	4a11      	ldr	r2, [pc, #68]	@ (80035a4 <MX_I2S2_Init+0x4c>)
 8003560:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8003562:	4b0f      	ldr	r3, [pc, #60]	@ (80035a0 <MX_I2S2_Init+0x48>)
 8003564:	22c0      	movs	r2, #192	@ 0xc0
 8003566:	0092      	lsls	r2, r2, #2
 8003568:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 800356a:	4b0d      	ldr	r3, [pc, #52]	@ (80035a0 <MX_I2S2_Init+0x48>)
 800356c:	2210      	movs	r2, #16
 800356e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 8003570:	4b0b      	ldr	r3, [pc, #44]	@ (80035a0 <MX_I2S2_Init+0x48>)
 8003572:	2205      	movs	r2, #5
 8003574:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8003576:	4b0a      	ldr	r3, [pc, #40]	@ (80035a0 <MX_I2S2_Init+0x48>)
 8003578:	2200      	movs	r2, #0
 800357a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 800357c:	4b08      	ldr	r3, [pc, #32]	@ (80035a0 <MX_I2S2_Init+0x48>)
 800357e:	22fa      	movs	r2, #250	@ 0xfa
 8003580:	0152      	lsls	r2, r2, #5
 8003582:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8003584:	4b06      	ldr	r3, [pc, #24]	@ (80035a0 <MX_I2S2_Init+0x48>)
 8003586:	2208      	movs	r2, #8
 8003588:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800358a:	4b05      	ldr	r3, [pc, #20]	@ (80035a0 <MX_I2S2_Init+0x48>)
 800358c:	0018      	movs	r0, r3
 800358e:	f004 f8ef 	bl	8007770 <HAL_I2S_Init>
 8003592:	1e03      	subs	r3, r0, #0
 8003594:	d001      	beq.n	800359a <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8003596:	f000 f93d 	bl	8003814 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800359a:	46c0      	nop			@ (mov r8, r8)
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	200002f0 	.word	0x200002f0
 80035a4:	40003800 	.word	0x40003800

080035a8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80035a8:	b590      	push	{r4, r7, lr}
 80035aa:	b089      	sub	sp, #36	@ 0x24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b0:	240c      	movs	r4, #12
 80035b2:	193b      	adds	r3, r7, r4
 80035b4:	0018      	movs	r0, r3
 80035b6:	2314      	movs	r3, #20
 80035b8:	001a      	movs	r2, r3
 80035ba:	2100      	movs	r1, #0
 80035bc:	f006 fdf4 	bl	800a1a8 <memset>
  if(i2sHandle->Instance==SPI2)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a2d      	ldr	r2, [pc, #180]	@ (800367c <HAL_I2S_MspInit+0xd4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d154      	bne.n	8003674 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80035ca:	4b2d      	ldr	r3, [pc, #180]	@ (8003680 <HAL_I2S_MspInit+0xd8>)
 80035cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003680 <HAL_I2S_MspInit+0xd8>)
 80035d0:	2180      	movs	r1, #128	@ 0x80
 80035d2:	01c9      	lsls	r1, r1, #7
 80035d4:	430a      	orrs	r2, r1
 80035d6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035d8:	4b29      	ldr	r3, [pc, #164]	@ (8003680 <HAL_I2S_MspInit+0xd8>)
 80035da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035dc:	4b28      	ldr	r3, [pc, #160]	@ (8003680 <HAL_I2S_MspInit+0xd8>)
 80035de:	2102      	movs	r1, #2
 80035e0:	430a      	orrs	r2, r1
 80035e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80035e4:	4b26      	ldr	r3, [pc, #152]	@ (8003680 <HAL_I2S_MspInit+0xd8>)
 80035e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e8:	2202      	movs	r2, #2
 80035ea:	4013      	ands	r3, r2
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80035f0:	193b      	adds	r3, r7, r4
 80035f2:	22b0      	movs	r2, #176	@ 0xb0
 80035f4:	0212      	lsls	r2, r2, #8
 80035f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f8:	0021      	movs	r1, r4
 80035fa:	187b      	adds	r3, r7, r1
 80035fc:	2202      	movs	r2, #2
 80035fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003600:	187b      	adds	r3, r7, r1
 8003602:	2200      	movs	r2, #0
 8003604:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003606:	187b      	adds	r3, r7, r1
 8003608:	2200      	movs	r2, #0
 800360a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800360c:	187b      	adds	r3, r7, r1
 800360e:	2200      	movs	r2, #0
 8003610:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003612:	187b      	adds	r3, r7, r1
 8003614:	4a1b      	ldr	r2, [pc, #108]	@ (8003684 <HAL_I2S_MspInit+0xdc>)
 8003616:	0019      	movs	r1, r3
 8003618:	0010      	movs	r0, r2
 800361a:	f001 fee3 	bl	80053e4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800361e:	4b1a      	ldr	r3, [pc, #104]	@ (8003688 <HAL_I2S_MspInit+0xe0>)
 8003620:	4a1a      	ldr	r2, [pc, #104]	@ (800368c <HAL_I2S_MspInit+0xe4>)
 8003622:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8003624:	4b18      	ldr	r3, [pc, #96]	@ (8003688 <HAL_I2S_MspInit+0xe0>)
 8003626:	2202      	movs	r2, #2
 8003628:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800362a:	4b17      	ldr	r3, [pc, #92]	@ (8003688 <HAL_I2S_MspInit+0xe0>)
 800362c:	2200      	movs	r2, #0
 800362e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003630:	4b15      	ldr	r3, [pc, #84]	@ (8003688 <HAL_I2S_MspInit+0xe0>)
 8003632:	2200      	movs	r2, #0
 8003634:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003636:	4b14      	ldr	r3, [pc, #80]	@ (8003688 <HAL_I2S_MspInit+0xe0>)
 8003638:	2280      	movs	r2, #128	@ 0x80
 800363a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800363c:	4b12      	ldr	r3, [pc, #72]	@ (8003688 <HAL_I2S_MspInit+0xe0>)
 800363e:	2280      	movs	r2, #128	@ 0x80
 8003640:	0052      	lsls	r2, r2, #1
 8003642:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003644:	4b10      	ldr	r3, [pc, #64]	@ (8003688 <HAL_I2S_MspInit+0xe0>)
 8003646:	2280      	movs	r2, #128	@ 0x80
 8003648:	00d2      	lsls	r2, r2, #3
 800364a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800364c:	4b0e      	ldr	r3, [pc, #56]	@ (8003688 <HAL_I2S_MspInit+0xe0>)
 800364e:	2220      	movs	r2, #32
 8003650:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003652:	4b0d      	ldr	r3, [pc, #52]	@ (8003688 <HAL_I2S_MspInit+0xe0>)
 8003654:	2200      	movs	r2, #0
 8003656:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003658:	4b0b      	ldr	r3, [pc, #44]	@ (8003688 <HAL_I2S_MspInit+0xe0>)
 800365a:	0018      	movs	r0, r3
 800365c:	f001 fcb4 	bl	8004fc8 <HAL_DMA_Init>
 8003660:	1e03      	subs	r3, r0, #0
 8003662:	d001      	beq.n	8003668 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8003664:	f000 f8d6 	bl	8003814 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a07      	ldr	r2, [pc, #28]	@ (8003688 <HAL_I2S_MspInit+0xe0>)
 800366c:	631a      	str	r2, [r3, #48]	@ 0x30
 800366e:	4b06      	ldr	r3, [pc, #24]	@ (8003688 <HAL_I2S_MspInit+0xe0>)
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003674:	46c0      	nop			@ (mov r8, r8)
 8003676:	46bd      	mov	sp, r7
 8003678:	b009      	add	sp, #36	@ 0x24
 800367a:	bd90      	pop	{r4, r7, pc}
 800367c:	40003800 	.word	0x40003800
 8003680:	40021000 	.word	0x40021000
 8003684:	50000400 	.word	0x50000400
 8003688:	2000032c 	.word	0x2000032c
 800368c:	40020044 	.word	0x40020044

08003690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003696:	f001 fb25 	bl	8004ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800369a:	f000 f83f 	bl	800371c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800369e:	f7ff fd37 	bl	8003110 <MX_GPIO_Init>
  MX_DMA_Init();
 80036a2:	f7ff fccf 	bl	8003044 <MX_DMA_Init>
  MX_I2C1_Init();
 80036a6:	f7ff fe6f 	bl	8003388 <MX_I2C1_Init>
  MX_I2S2_Init();
 80036aa:	f7ff ff55 	bl	8003558 <MX_I2S2_Init>
  MX_USART4_UART_Init();
 80036ae:	f000 fe37 	bl	8004320 <MX_USART4_UART_Init>
  MX_USART1_UART_Init();
 80036b2:	f000 fe05 	bl	80042c0 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80036b6:	f000 faf9 	bl	8003cac <MX_RTC_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
 80036ba:	f001 fb79 	bl	8004db0 <HAL_GetTick>
 80036be:	0003      	movs	r3, r0
 80036c0:	22fa      	movs	r2, #250	@ 0xfa
 80036c2:	0092      	lsls	r2, r2, #2
 80036c4:	4694      	mov	ip, r2
 80036c6:	4463      	add	r3, ip
 80036c8:	607b      	str	r3, [r7, #4]
  SetVerboseLevel(VERBOSE_ALL);
 80036ca:	2003      	movs	r0, #3
 80036cc:	f000 ffc6 	bl	800465c <SetVerboseLevel>
  BinaryReleaseInfo();
 80036d0:	f000 ffdc 	bl	800468c <BinaryReleaseInfo>
  Gadget_Init(&hi2c1, &hi2s2);
 80036d4:	4a0e      	ldr	r2, [pc, #56]	@ (8003710 <main+0x80>)
 80036d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003714 <main+0x84>)
 80036d8:	0011      	movs	r1, r2
 80036da:	0018      	movs	r0, r3
 80036dc:	f7ff fcd8 	bl	8003090 <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    UpkeepGadget();
 80036e0:	f7ff fcf6 	bl	80030d0 <UpkeepGadget>
    if(TimestampIsReached(LedBlinkTimestamp)) {
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	0018      	movs	r0, r3
 80036e8:	f000 fee6 	bl	80044b8 <TimestampIsReached>
 80036ec:	1e03      	subs	r3, r0, #0
 80036ee:	d0f7      	beq.n	80036e0 <main+0x50>
      HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 80036f0:	2380      	movs	r3, #128	@ 0x80
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	4a08      	ldr	r2, [pc, #32]	@ (8003718 <main+0x88>)
 80036f6:	0019      	movs	r1, r3
 80036f8:	0010      	movs	r0, r2
 80036fa:	f002 f80e 	bl	800571a <HAL_GPIO_TogglePin>
      LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
 80036fe:	f001 fb57 	bl	8004db0 <HAL_GetTick>
 8003702:	0003      	movs	r3, r0
 8003704:	22fa      	movs	r2, #250	@ 0xfa
 8003706:	0092      	lsls	r2, r2, #2
 8003708:	4694      	mov	ip, r2
 800370a:	4463      	add	r3, ip
 800370c:	607b      	str	r3, [r7, #4]
    UpkeepGadget();
 800370e:	e7e7      	b.n	80036e0 <main+0x50>
 8003710:	200002f0 	.word	0x200002f0
 8003714:	2000020c 	.word	0x2000020c
 8003718:	50000800 	.word	0x50000800

0800371c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800371c:	b590      	push	{r4, r7, lr}
 800371e:	b09d      	sub	sp, #116	@ 0x74
 8003720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003722:	2438      	movs	r4, #56	@ 0x38
 8003724:	193b      	adds	r3, r7, r4
 8003726:	0018      	movs	r0, r3
 8003728:	2338      	movs	r3, #56	@ 0x38
 800372a:	001a      	movs	r2, r3
 800372c:	2100      	movs	r1, #0
 800372e:	f006 fd3b 	bl	800a1a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003732:	2324      	movs	r3, #36	@ 0x24
 8003734:	18fb      	adds	r3, r7, r3
 8003736:	0018      	movs	r0, r3
 8003738:	2314      	movs	r3, #20
 800373a:	001a      	movs	r2, r3
 800373c:	2100      	movs	r1, #0
 800373e:	f006 fd33 	bl	800a1a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003742:	003b      	movs	r3, r7
 8003744:	0018      	movs	r0, r3
 8003746:	2324      	movs	r3, #36	@ 0x24
 8003748:	001a      	movs	r2, r3
 800374a:	2100      	movs	r1, #0
 800374c:	f006 fd2c 	bl	800a1a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003750:	4b2d      	ldr	r3, [pc, #180]	@ (8003808 <SystemClock_Config+0xec>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a2d      	ldr	r2, [pc, #180]	@ (800380c <SystemClock_Config+0xf0>)
 8003756:	401a      	ands	r2, r3
 8003758:	4b2b      	ldr	r3, [pc, #172]	@ (8003808 <SystemClock_Config+0xec>)
 800375a:	2180      	movs	r1, #128	@ 0x80
 800375c:	0109      	lsls	r1, r1, #4
 800375e:	430a      	orrs	r2, r1
 8003760:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003762:	f004 f8f7 	bl	8007954 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003766:	4b2a      	ldr	r3, [pc, #168]	@ (8003810 <SystemClock_Config+0xf4>)
 8003768:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800376a:	4b29      	ldr	r3, [pc, #164]	@ (8003810 <SystemClock_Config+0xf4>)
 800376c:	4927      	ldr	r1, [pc, #156]	@ (800380c <SystemClock_Config+0xf0>)
 800376e:	400a      	ands	r2, r1
 8003770:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8003772:	193b      	adds	r3, r7, r4
 8003774:	2206      	movs	r2, #6
 8003776:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003778:	193b      	adds	r3, r7, r4
 800377a:	2280      	movs	r2, #128	@ 0x80
 800377c:	0052      	lsls	r2, r2, #1
 800377e:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003780:	193b      	adds	r3, r7, r4
 8003782:	2201      	movs	r2, #1
 8003784:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003786:	193b      	adds	r3, r7, r4
 8003788:	2210      	movs	r2, #16
 800378a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800378c:	193b      	adds	r3, r7, r4
 800378e:	2200      	movs	r2, #0
 8003790:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003792:	193b      	adds	r3, r7, r4
 8003794:	0018      	movs	r0, r3
 8003796:	f004 f8eb 	bl	8007970 <HAL_RCC_OscConfig>
 800379a:	1e03      	subs	r3, r0, #0
 800379c:	d001      	beq.n	80037a2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800379e:	f000 f839 	bl	8003814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037a2:	2124      	movs	r1, #36	@ 0x24
 80037a4:	187b      	adds	r3, r7, r1
 80037a6:	220f      	movs	r2, #15
 80037a8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80037aa:	187b      	adds	r3, r7, r1
 80037ac:	2201      	movs	r2, #1
 80037ae:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037b0:	187b      	adds	r3, r7, r1
 80037b2:	2200      	movs	r2, #0
 80037b4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037b6:	187b      	adds	r3, r7, r1
 80037b8:	2200      	movs	r2, #0
 80037ba:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037bc:	187b      	adds	r3, r7, r1
 80037be:	2200      	movs	r2, #0
 80037c0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80037c2:	187b      	adds	r3, r7, r1
 80037c4:	2100      	movs	r1, #0
 80037c6:	0018      	movs	r0, r3
 80037c8:	f004 fca6 	bl	8008118 <HAL_RCC_ClockConfig>
 80037cc:	1e03      	subs	r3, r0, #0
 80037ce:	d001      	beq.n	80037d4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80037d0:	f000 f820 	bl	8003814 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 80037d4:	003b      	movs	r3, r7
 80037d6:	2229      	movs	r2, #41	@ 0x29
 80037d8:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80037da:	003b      	movs	r3, r7
 80037dc:	2200      	movs	r2, #0
 80037de:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80037e0:	003b      	movs	r3, r7
 80037e2:	2200      	movs	r2, #0
 80037e4:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80037e6:	003b      	movs	r3, r7
 80037e8:	2280      	movs	r2, #128	@ 0x80
 80037ea:	0252      	lsls	r2, r2, #9
 80037ec:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037ee:	003b      	movs	r3, r7
 80037f0:	0018      	movs	r0, r3
 80037f2:	f004 feb5 	bl	8008560 <HAL_RCCEx_PeriphCLKConfig>
 80037f6:	1e03      	subs	r3, r0, #0
 80037f8:	d001      	beq.n	80037fe <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80037fa:	f000 f80b 	bl	8003814 <Error_Handler>
  }
}
 80037fe:	46c0      	nop			@ (mov r8, r8)
 8003800:	46bd      	mov	sp, r7
 8003802:	b01d      	add	sp, #116	@ 0x74
 8003804:	bd90      	pop	{r4, r7, pc}
 8003806:	46c0      	nop			@ (mov r8, r8)
 8003808:	40007000 	.word	0x40007000
 800380c:	ffffe7ff 	.word	0xffffe7ff
 8003810:	40021000 	.word	0x40021000

08003814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003818:	b672      	cpsid	i
}
 800381a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800381c:	46c0      	nop			@ (mov r8, r8)
 800381e:	e7fd      	b.n	800381c <Error_Handler+0x8>

08003820 <HT_StartMeasurementWrapper>:
static MeasurementParameters Measurements[MEAS_MEASUREMENT_COUNT];
static EnabledMeasurements MeasEnabled;
static MeasurementState MeasState = MEAS_STATE_INIT;
static uint8_t CurrentMeasurementIndex = 0;

static void HT_StartMeasurementWrapper(void) {
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8003824:	f7ff fd91 	bl	800334a <HT_StartMeasurement>
}
 8003828:	46c0      	nop			@ (mov r8, r8)
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8003834:	4a04      	ldr	r2, [pc, #16]	@ (8003848 <HT_IsMeasurementDoneWrapper+0x18>)
 8003836:	4b05      	ldr	r3, [pc, #20]	@ (800384c <HT_IsMeasurementDoneWrapper+0x1c>)
 8003838:	0011      	movs	r1, r2
 800383a:	0018      	movs	r0, r3
 800383c:	f7ff fd8c 	bl	8003358 <HT_GetMeasurementValues>
 8003840:	0003      	movs	r3, r0
}
 8003842:	0018      	movs	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	20000378 	.word	0x20000378
 800384c:	20000374 	.word	0x20000374

08003850 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  // TODO: Implement VOC wrapper.
}
 8003854:	46c0      	nop			@ (mov r8, r8)
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 800385a:	b580      	push	{r7, lr}
 800385c:	af00      	add	r7, sp, #0
  return true;
 800385e:	2301      	movs	r3, #1
}
 8003860:	0018      	movs	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <NO_StartMeasurementWrapper>:

static void NO_StartMeasurementWrapper(void) {
 8003866:	b580      	push	{r7, lr}
 8003868:	af00      	add	r7, sp, #0
  // TODO: Implement NO wrapper.
}
 800386a:	46c0      	nop			@ (mov r8, r8)
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <NO_IsMeasurementDoneWrapper>:

static bool NO_IsMeasurementDoneWrapper(void) {
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  return true;
 8003874:	2301      	movs	r3, #1
}
 8003876:	0018      	movs	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <MIC_StartMeasurementWrapper>:

static void MIC_StartMeasurementWrapper(void) {
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
//  MIC_Start(SAMPLE_RATE_48K, NR_SAMPLES_128);
}
 8003880:	46c0      	nop			@ (mov r8, r8)
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 8003886:	b580      	push	{r7, lr}
 8003888:	af00      	add	r7, sp, #0
    return true;
 800388a:	2301      	movs	r3, #1
}
 800388c:	0018      	movs	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <Meas_Init>:

void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {
 8003894:	b5b0      	push	{r4, r5, r7, lr}
 8003896:	b094      	sub	sp, #80	@ 0x50
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  // TODO: Add 1 duty cycle variable.
  MeasState = MEAS_STATE_INIT;
 800389e:	4b58      	ldr	r3, [pc, #352]	@ (8003a00 <Meas_Init+0x16c>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	701a      	strb	r2, [r3, #0]
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 80038a4:	4b57      	ldr	r3, [pc, #348]	@ (8003a04 <Meas_Init+0x170>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d103      	bne.n	80038b4 <Meas_Init+0x20>
 80038ac:	4b55      	ldr	r3, [pc, #340]	@ (8003a04 <Meas_Init+0x170>)
 80038ae:	785b      	ldrb	r3, [r3, #1]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d029      	beq.n	8003908 <Meas_Init+0x74>
    I2CSensors_Init(sensorI2C);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	0018      	movs	r0, r3
 80038b8:	f7ff fb52 	bl	8002f60 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 80038bc:	f7ff fd5c 	bl	8003378 <HT_DeviceConnected>
 80038c0:	0003      	movs	r3, r0
 80038c2:	001a      	movs	r2, r3
 80038c4:	2301      	movs	r3, #1
 80038c6:	4053      	eors	r3, r2
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d009      	beq.n	80038e2 <Meas_Init+0x4e>
       Error("HT device not connected!");
 80038ce:	4a4e      	ldr	r2, [pc, #312]	@ (8003a08 <Meas_Init+0x174>)
 80038d0:	4b4e      	ldr	r3, [pc, #312]	@ (8003a0c <Meas_Init+0x178>)
 80038d2:	0019      	movs	r1, r3
 80038d4:	2001      	movs	r0, #1
 80038d6:	f000 fe45 	bl	8004564 <CreateLine>
       MeasEnabled.HT_measurementEnabled = false;
 80038da:	4b4a      	ldr	r3, [pc, #296]	@ (8003a04 <Meas_Init+0x170>)
 80038dc:	2200      	movs	r2, #0
 80038de:	701a      	strb	r2, [r3, #0]
       return;
 80038e0:	e08a      	b.n	80039f8 <Meas_Init+0x164>
    }
    if(!Gas_DeviceConnected()) {
 80038e2:	f7ff fc0d 	bl	8003100 <Gas_DeviceConnected>
 80038e6:	0003      	movs	r3, r0
 80038e8:	001a      	movs	r2, r3
 80038ea:	2301      	movs	r3, #1
 80038ec:	4053      	eors	r3, r2
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d009      	beq.n	8003908 <Meas_Init+0x74>
       Error("SGP device not connected!");
 80038f4:	4a46      	ldr	r2, [pc, #280]	@ (8003a10 <Meas_Init+0x17c>)
 80038f6:	4b45      	ldr	r3, [pc, #276]	@ (8003a0c <Meas_Init+0x178>)
 80038f8:	0019      	movs	r1, r3
 80038fa:	2001      	movs	r0, #1
 80038fc:	f000 fe32 	bl	8004564 <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 8003900:	4b40      	ldr	r3, [pc, #256]	@ (8003a04 <Meas_Init+0x170>)
 8003902:	2200      	movs	r2, #0
 8003904:	705a      	strb	r2, [r3, #1]
       return;
 8003906:	e077      	b.n	80039f8 <Meas_Init+0x164>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
//    MIC_Init(micI2s);
  }
  uint8_t offset = 0;
 8003908:	254f      	movs	r5, #79	@ 0x4f
 800390a:	197b      	adds	r3, r7, r5
 800390c:	2200      	movs	r2, #0
 800390e:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 8003910:	197b      	adds	r3, r7, r5
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	197a      	adds	r2, r7, r5
 8003916:	1c59      	adds	r1, r3, #1
 8003918:	7011      	strb	r1, [r2, #0]
 800391a:	4a3a      	ldr	r2, [pc, #232]	@ (8003a04 <Meas_Init+0x170>)
 800391c:	7814      	ldrb	r4, [r2, #0]
 800391e:	4a3d      	ldr	r2, [pc, #244]	@ (8003a14 <Meas_Init+0x180>)
 8003920:	0119      	lsls	r1, r3, #4
 8003922:	483d      	ldr	r0, [pc, #244]	@ (8003a18 <Meas_Init+0x184>)
 8003924:	5088      	str	r0, [r1, r2]
 8003926:	493b      	ldr	r1, [pc, #236]	@ (8003a14 <Meas_Init+0x180>)
 8003928:	011a      	lsls	r2, r3, #4
 800392a:	188a      	adds	r2, r1, r2
 800392c:	3204      	adds	r2, #4
 800392e:	493b      	ldr	r1, [pc, #236]	@ (8003a1c <Meas_Init+0x188>)
 8003930:	6011      	str	r1, [r2, #0]
 8003932:	4938      	ldr	r1, [pc, #224]	@ (8003a14 <Meas_Init+0x180>)
 8003934:	011a      	lsls	r2, r3, #4
 8003936:	188a      	adds	r2, r1, r2
 8003938:	3208      	adds	r2, #8
 800393a:	4939      	ldr	r1, [pc, #228]	@ (8003a20 <Meas_Init+0x18c>)
 800393c:	6011      	str	r1, [r2, #0]
 800393e:	4a35      	ldr	r2, [pc, #212]	@ (8003a14 <Meas_Init+0x180>)
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	18d3      	adds	r3, r2, r3
 8003944:	330c      	adds	r3, #12
 8003946:	1c22      	adds	r2, r4, #0
 8003948:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 800394a:	197b      	adds	r3, r7, r5
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	197a      	adds	r2, r7, r5
 8003950:	1c59      	adds	r1, r3, #1
 8003952:	7011      	strb	r1, [r2, #0]
 8003954:	4a2b      	ldr	r2, [pc, #172]	@ (8003a04 <Meas_Init+0x170>)
 8003956:	7854      	ldrb	r4, [r2, #1]
 8003958:	4a2e      	ldr	r2, [pc, #184]	@ (8003a14 <Meas_Init+0x180>)
 800395a:	0119      	lsls	r1, r3, #4
 800395c:	4831      	ldr	r0, [pc, #196]	@ (8003a24 <Meas_Init+0x190>)
 800395e:	5088      	str	r0, [r1, r2]
 8003960:	492c      	ldr	r1, [pc, #176]	@ (8003a14 <Meas_Init+0x180>)
 8003962:	011a      	lsls	r2, r3, #4
 8003964:	188a      	adds	r2, r1, r2
 8003966:	3204      	adds	r2, #4
 8003968:	492f      	ldr	r1, [pc, #188]	@ (8003a28 <Meas_Init+0x194>)
 800396a:	6011      	str	r1, [r2, #0]
 800396c:	4929      	ldr	r1, [pc, #164]	@ (8003a14 <Meas_Init+0x180>)
 800396e:	011a      	lsls	r2, r3, #4
 8003970:	188a      	adds	r2, r1, r2
 8003972:	3208      	adds	r2, #8
 8003974:	492d      	ldr	r1, [pc, #180]	@ (8003a2c <Meas_Init+0x198>)
 8003976:	6011      	str	r1, [r2, #0]
 8003978:	4a26      	ldr	r2, [pc, #152]	@ (8003a14 <Meas_Init+0x180>)
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	18d3      	adds	r3, r2, r3
 800397e:	330c      	adds	r3, #12
 8003980:	1c22      	adds	r2, r4, #0
 8003982:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {NO_StartMeasurementWrapper, NO_IsMeasurementDoneWrapper, &MeasurementCtx.NO_measurementDone, MeasEnabled.NO_measurementEnabled};
 8003984:	197b      	adds	r3, r7, r5
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	197a      	adds	r2, r7, r5
 800398a:	1c59      	adds	r1, r3, #1
 800398c:	7011      	strb	r1, [r2, #0]
 800398e:	4a1d      	ldr	r2, [pc, #116]	@ (8003a04 <Meas_Init+0x170>)
 8003990:	7894      	ldrb	r4, [r2, #2]
 8003992:	4a20      	ldr	r2, [pc, #128]	@ (8003a14 <Meas_Init+0x180>)
 8003994:	0119      	lsls	r1, r3, #4
 8003996:	4826      	ldr	r0, [pc, #152]	@ (8003a30 <Meas_Init+0x19c>)
 8003998:	5088      	str	r0, [r1, r2]
 800399a:	491e      	ldr	r1, [pc, #120]	@ (8003a14 <Meas_Init+0x180>)
 800399c:	011a      	lsls	r2, r3, #4
 800399e:	188a      	adds	r2, r1, r2
 80039a0:	3204      	adds	r2, #4
 80039a2:	4924      	ldr	r1, [pc, #144]	@ (8003a34 <Meas_Init+0x1a0>)
 80039a4:	6011      	str	r1, [r2, #0]
 80039a6:	491b      	ldr	r1, [pc, #108]	@ (8003a14 <Meas_Init+0x180>)
 80039a8:	011a      	lsls	r2, r3, #4
 80039aa:	188a      	adds	r2, r1, r2
 80039ac:	3208      	adds	r2, #8
 80039ae:	4922      	ldr	r1, [pc, #136]	@ (8003a38 <Meas_Init+0x1a4>)
 80039b0:	6011      	str	r1, [r2, #0]
 80039b2:	4a18      	ldr	r2, [pc, #96]	@ (8003a14 <Meas_Init+0x180>)
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	18d3      	adds	r3, r2, r3
 80039b8:	330c      	adds	r3, #12
 80039ba:	1c22      	adds	r2, r4, #0
 80039bc:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
 80039be:	197b      	adds	r3, r7, r5
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	197a      	adds	r2, r7, r5
 80039c4:	1c59      	adds	r1, r3, #1
 80039c6:	7011      	strb	r1, [r2, #0]
 80039c8:	4a0e      	ldr	r2, [pc, #56]	@ (8003a04 <Meas_Init+0x170>)
 80039ca:	78d4      	ldrb	r4, [r2, #3]
 80039cc:	4a11      	ldr	r2, [pc, #68]	@ (8003a14 <Meas_Init+0x180>)
 80039ce:	0119      	lsls	r1, r3, #4
 80039d0:	481a      	ldr	r0, [pc, #104]	@ (8003a3c <Meas_Init+0x1a8>)
 80039d2:	5088      	str	r0, [r1, r2]
 80039d4:	490f      	ldr	r1, [pc, #60]	@ (8003a14 <Meas_Init+0x180>)
 80039d6:	011a      	lsls	r2, r3, #4
 80039d8:	188a      	adds	r2, r1, r2
 80039da:	3204      	adds	r2, #4
 80039dc:	4918      	ldr	r1, [pc, #96]	@ (8003a40 <Meas_Init+0x1ac>)
 80039de:	6011      	str	r1, [r2, #0]
 80039e0:	490c      	ldr	r1, [pc, #48]	@ (8003a14 <Meas_Init+0x180>)
 80039e2:	011a      	lsls	r2, r3, #4
 80039e4:	188a      	adds	r2, r1, r2
 80039e6:	3208      	adds	r2, #8
 80039e8:	4916      	ldr	r1, [pc, #88]	@ (8003a44 <Meas_Init+0x1b0>)
 80039ea:	6011      	str	r1, [r2, #0]
 80039ec:	4a09      	ldr	r2, [pc, #36]	@ (8003a14 <Meas_Init+0x180>)
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	18d3      	adds	r3, r2, r3
 80039f2:	330c      	adds	r3, #12
 80039f4:	1c22      	adds	r2, r4, #0
 80039f6:	701a      	strb	r2, [r3, #0]
}
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b014      	add	sp, #80	@ 0x50
 80039fc:	bdb0      	pop	{r4, r5, r7, pc}
 80039fe:	46c0      	nop			@ (mov r8, r8)
 8003a00:	200003c4 	.word	0x200003c4
 8003a04:	200003c0 	.word	0x200003c0
 8003a08:	0800c4c0 	.word	0x0800c4c0
 8003a0c:	0800c4dc 	.word	0x0800c4dc
 8003a10:	0800c4e0 	.word	0x0800c4e0
 8003a14:	20000380 	.word	0x20000380
 8003a18:	08003821 	.word	0x08003821
 8003a1c:	08003831 	.word	0x08003831
 8003a20:	2000037c 	.word	0x2000037c
 8003a24:	08003851 	.word	0x08003851
 8003a28:	0800385b 	.word	0x0800385b
 8003a2c:	2000037d 	.word	0x2000037d
 8003a30:	08003867 	.word	0x08003867
 8003a34:	08003871 	.word	0x08003871
 8003a38:	2000037e 	.word	0x2000037e
 8003a3c:	0800387d 	.word	0x0800387d
 8003a40:	08003887 	.word	0x08003887
 8003a44:	2000037f 	.word	0x2000037f

08003a48 <StartMeasurements>:

void StartMeasurements(void) {
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8003a4c:	4b10      	ldr	r3, [pc, #64]	@ (8003a90 <StartMeasurements+0x48>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	701a      	strb	r2, [r3, #0]
 8003a52:	e015      	b.n	8003a80 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8003a54:	4b0e      	ldr	r3, [pc, #56]	@ (8003a90 <StartMeasurements+0x48>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	4a0e      	ldr	r2, [pc, #56]	@ (8003a94 <StartMeasurements+0x4c>)
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	18d3      	adds	r3, r2, r3
 8003a5e:	330c      	adds	r3, #12
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d006      	beq.n	8003a74 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 8003a66:	4b0a      	ldr	r3, [pc, #40]	@ (8003a90 <StartMeasurements+0x48>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	001a      	movs	r2, r3
 8003a6c:	4b09      	ldr	r3, [pc, #36]	@ (8003a94 <StartMeasurements+0x4c>)
 8003a6e:	0112      	lsls	r2, r2, #4
 8003a70:	58d3      	ldr	r3, [r2, r3]
 8003a72:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8003a74:	4b06      	ldr	r3, [pc, #24]	@ (8003a90 <StartMeasurements+0x48>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	4b04      	ldr	r3, [pc, #16]	@ (8003a90 <StartMeasurements+0x48>)
 8003a7e:	701a      	strb	r2, [r3, #0]
 8003a80:	4b03      	ldr	r3, [pc, #12]	@ (8003a90 <StartMeasurements+0x48>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d9e5      	bls.n	8003a54 <StartMeasurements+0xc>
    }
  }
}
 8003a88:	46c0      	nop			@ (mov r8, r8)
 8003a8a:	46c0      	nop			@ (mov r8, r8)
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	200003c5 	.word	0x200003c5
 8003a94:	20000380 	.word	0x20000380

08003a98 <ResetMeasurements>:

void ResetMeasurements(void) {
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 8003a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac8 <ResetMeasurements+0x30>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 8003aa2:	4b09      	ldr	r3, [pc, #36]	@ (8003ac8 <ResetMeasurements+0x30>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	605a      	str	r2, [r3, #4]
  MeasurementCtx.HT_measurementDone = false;
 8003aa8:	4b07      	ldr	r3, [pc, #28]	@ (8003ac8 <ResetMeasurements+0x30>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	721a      	strb	r2, [r3, #8]
  MeasurementCtx.VOC_measurementDone = false;
 8003aae:	4b06      	ldr	r3, [pc, #24]	@ (8003ac8 <ResetMeasurements+0x30>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	725a      	strb	r2, [r3, #9]
  MeasurementCtx.NO_measurementDone = false;
 8003ab4:	4b04      	ldr	r3, [pc, #16]	@ (8003ac8 <ResetMeasurements+0x30>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	729a      	strb	r2, [r3, #10]
  MeasurementCtx.MIC_measurementDone = false;
 8003aba:	4b03      	ldr	r3, [pc, #12]	@ (8003ac8 <ResetMeasurements+0x30>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	72da      	strb	r2, [r3, #11]
}
 8003ac0:	46c0      	nop			@ (mov r8, r8)
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	46c0      	nop			@ (mov r8, r8)
 8003ac8:	20000374 	.word	0x20000374

08003acc <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8003ad0:	4b18      	ldr	r3, [pc, #96]	@ (8003b34 <MeasurementsCompleted+0x68>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	701a      	strb	r2, [r3, #0]
 8003ad6:	e024      	b.n	8003b22 <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8003ad8:	4b16      	ldr	r3, [pc, #88]	@ (8003b34 <MeasurementsCompleted+0x68>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	4a16      	ldr	r2, [pc, #88]	@ (8003b38 <MeasurementsCompleted+0x6c>)
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	18d3      	adds	r3, r2, r3
 8003ae2:	330c      	adds	r3, #12
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d015      	beq.n	8003b16 <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 8003aea:	4b12      	ldr	r3, [pc, #72]	@ (8003b34 <MeasurementsCompleted+0x68>)
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	4a12      	ldr	r2, [pc, #72]	@ (8003b38 <MeasurementsCompleted+0x6c>)
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	18d3      	adds	r3, r2, r3
 8003af4:	3304      	adds	r3, #4
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4798      	blx	r3
 8003afa:	1e03      	subs	r3, r0, #0
 8003afc:	d009      	beq.n	8003b12 <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8003afe:	4b0d      	ldr	r3, [pc, #52]	@ (8003b34 <MeasurementsCompleted+0x68>)
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	4a0d      	ldr	r2, [pc, #52]	@ (8003b38 <MeasurementsCompleted+0x6c>)
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	18d3      	adds	r3, r2, r3
 8003b08:	3308      	adds	r3, #8
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	701a      	strb	r2, [r3, #0]
 8003b10:	e001      	b.n	8003b16 <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8003b12:	2300      	movs	r3, #0
 8003b14:	e00a      	b.n	8003b2c <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8003b16:	4b07      	ldr	r3, [pc, #28]	@ (8003b34 <MeasurementsCompleted+0x68>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	4b05      	ldr	r3, [pc, #20]	@ (8003b34 <MeasurementsCompleted+0x68>)
 8003b20:	701a      	strb	r2, [r3, #0]
 8003b22:	4b04      	ldr	r3, [pc, #16]	@ (8003b34 <MeasurementsCompleted+0x68>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d9d6      	bls.n	8003ad8 <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 8003b2a:	2301      	movs	r3, #1
}
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	46c0      	nop			@ (mov r8, r8)
 8003b34:	200003c5 	.word	0x200003c5
 8003b38:	20000380 	.word	0x20000380

08003b3c <Meas_Upkeep>:

void Meas_Upkeep(void) {
 8003b3c:	b5b0      	push	{r4, r5, r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af04      	add	r7, sp, #16
  switch(MeasState) {
 8003b42:	4b27      	ldr	r3, [pc, #156]	@ (8003be0 <Meas_Upkeep+0xa4>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b05      	cmp	r3, #5
 8003b48:	d841      	bhi.n	8003bce <Meas_Upkeep+0x92>
 8003b4a:	009a      	lsls	r2, r3, #2
 8003b4c:	4b25      	ldr	r3, [pc, #148]	@ (8003be4 <Meas_Upkeep+0xa8>)
 8003b4e:	18d3      	adds	r3, r2, r3
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:
    Debug("Measurements are turned off.");
 8003b54:	4a24      	ldr	r2, [pc, #144]	@ (8003be8 <Meas_Upkeep+0xac>)
 8003b56:	4b25      	ldr	r3, [pc, #148]	@ (8003bec <Meas_Upkeep+0xb0>)
 8003b58:	0019      	movs	r1, r3
 8003b5a:	2003      	movs	r0, #3
 8003b5c:	f000 fd02 	bl	8004564 <CreateLine>
    break;
 8003b60:	e03a      	b.n	8003bd8 <Meas_Upkeep+0x9c>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 8003b62:	f7ff ff99 	bl	8003a98 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 8003b66:	4b1e      	ldr	r3, [pc, #120]	@ (8003be0 <Meas_Upkeep+0xa4>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	701a      	strb	r2, [r3, #0]
    break;
 8003b6c:	e034      	b.n	8003bd8 <Meas_Upkeep+0x9c>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 8003b6e:	f7ff ff6b 	bl	8003a48 <StartMeasurements>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 8003b72:	4b1b      	ldr	r3, [pc, #108]	@ (8003be0 <Meas_Upkeep+0xa4>)
 8003b74:	2202      	movs	r2, #2
 8003b76:	701a      	strb	r2, [r3, #0]
   break;
 8003b78:	e02e      	b.n	8003bd8 <Meas_Upkeep+0x9c>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 8003b7a:	f7ff ffa7 	bl	8003acc <MeasurementsCompleted>
 8003b7e:	1e03      	subs	r3, r0, #0
 8003b80:	d029      	beq.n	8003bd6 <Meas_Upkeep+0x9a>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 8003b82:	4b17      	ldr	r3, [pc, #92]	@ (8003be0 <Meas_Upkeep+0xa4>)
 8003b84:	2203      	movs	r2, #3
 8003b86:	701a      	strb	r2, [r3, #0]
    }
    break;
 8003b88:	e025      	b.n	8003bd6 <Meas_Upkeep+0x9a>

  case MEAS_STATE_PROCESS_RESULTS:
    Debug("Processing results.");
 8003b8a:	4a19      	ldr	r2, [pc, #100]	@ (8003bf0 <Meas_Upkeep+0xb4>)
 8003b8c:	4b17      	ldr	r3, [pc, #92]	@ (8003bec <Meas_Upkeep+0xb0>)
 8003b8e:	0019      	movs	r1, r3
 8003b90:	2003      	movs	r0, #3
 8003b92:	f000 fce7 	bl	8004564 <CreateLine>
    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 8003b96:	4b17      	ldr	r3, [pc, #92]	@ (8003bf4 <Meas_Upkeep+0xb8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	1c18      	adds	r0, r3, #0
 8003b9c:	f7ff f8ea 	bl	8002d74 <__aeabi_f2d>
 8003ba0:	0004      	movs	r4, r0
 8003ba2:	000d      	movs	r5, r1
 8003ba4:	4b13      	ldr	r3, [pc, #76]	@ (8003bf4 <Meas_Upkeep+0xb8>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	1c18      	adds	r0, r3, #0
 8003baa:	f7ff f8e3 	bl	8002d74 <__aeabi_f2d>
 8003bae:	0002      	movs	r2, r0
 8003bb0:	000b      	movs	r3, r1
 8003bb2:	4811      	ldr	r0, [pc, #68]	@ (8003bf8 <Meas_Upkeep+0xbc>)
 8003bb4:	490d      	ldr	r1, [pc, #52]	@ (8003bec <Meas_Upkeep+0xb0>)
 8003bb6:	9202      	str	r2, [sp, #8]
 8003bb8:	9303      	str	r3, [sp, #12]
 8003bba:	9400      	str	r4, [sp, #0]
 8003bbc:	9501      	str	r5, [sp, #4]
 8003bbe:	0002      	movs	r2, r0
 8003bc0:	2003      	movs	r0, #3
 8003bc2:	f000 fccf 	bl	8004564 <CreateLine>
    MeasState = MEAS_STATE_INIT;
 8003bc6:	4b06      	ldr	r3, [pc, #24]	@ (8003be0 <Meas_Upkeep+0xa4>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	701a      	strb	r2, [r3, #0]
    break;
 8003bcc:	e004      	b.n	8003bd8 <Meas_Upkeep+0x9c>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8003bce:	4b04      	ldr	r3, [pc, #16]	@ (8003be0 <Meas_Upkeep+0xa4>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	701a      	strb	r2, [r3, #0]
    break;
 8003bd4:	e000      	b.n	8003bd8 <Meas_Upkeep+0x9c>
    break;
 8003bd6:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003bd8:	46c0      	nop			@ (mov r8, r8)
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8003bde:	46c0      	nop			@ (mov r8, r8)
 8003be0:	200003c4 	.word	0x200003c4
 8003be4:	0800c9b4 	.word	0x0800c9b4
 8003be8:	0800c4fc 	.word	0x0800c4fc
 8003bec:	0800c51c 	.word	0x0800c51c
 8003bf0:	0800c520 	.word	0x0800c520
 8003bf4:	20000374 	.word	0x20000374
 8003bf8:	0800c534 	.word	0x0800c534

08003bfc <Meas_SetEnabledSensors>:

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 8003bfc:	b590      	push	{r4, r7, lr}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	1d3b      	adds	r3, r7, #4
 8003c04:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 8003c06:	240f      	movs	r4, #15
 8003c08:	193b      	adds	r3, r7, r4
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 8003c0e:	4b20      	ldr	r3, [pc, #128]	@ (8003c90 <Meas_SetEnabledSensors+0x94>)
 8003c10:	1d3a      	adds	r2, r7, #4
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 8003c16:	193b      	adds	r3, r7, r4
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	193a      	adds	r2, r7, r4
 8003c1c:	1c59      	adds	r1, r3, #1
 8003c1e:	7011      	strb	r1, [r2, #0]
 8003c20:	0018      	movs	r0, r3
 8003c22:	1d3b      	adds	r3, r7, #4
 8003c24:	7819      	ldrb	r1, [r3, #0]
 8003c26:	4a1b      	ldr	r2, [pc, #108]	@ (8003c94 <Meas_SetEnabledSensors+0x98>)
 8003c28:	0103      	lsls	r3, r0, #4
 8003c2a:	18d3      	adds	r3, r2, r3
 8003c2c:	330c      	adds	r3, #12
 8003c2e:	1c0a      	adds	r2, r1, #0
 8003c30:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 8003c32:	193b      	adds	r3, r7, r4
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	193a      	adds	r2, r7, r4
 8003c38:	1c59      	adds	r1, r3, #1
 8003c3a:	7011      	strb	r1, [r2, #0]
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	7859      	ldrb	r1, [r3, #1]
 8003c42:	4a14      	ldr	r2, [pc, #80]	@ (8003c94 <Meas_SetEnabledSensors+0x98>)
 8003c44:	0103      	lsls	r3, r0, #4
 8003c46:	18d3      	adds	r3, r2, r3
 8003c48:	330c      	adds	r3, #12
 8003c4a:	1c0a      	adds	r2, r1, #0
 8003c4c:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.NO_measurementEnabled;
 8003c4e:	193b      	adds	r3, r7, r4
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	193a      	adds	r2, r7, r4
 8003c54:	1c59      	adds	r1, r3, #1
 8003c56:	7011      	strb	r1, [r2, #0]
 8003c58:	0018      	movs	r0, r3
 8003c5a:	1d3b      	adds	r3, r7, #4
 8003c5c:	7899      	ldrb	r1, [r3, #2]
 8003c5e:	4a0d      	ldr	r2, [pc, #52]	@ (8003c94 <Meas_SetEnabledSensors+0x98>)
 8003c60:	0103      	lsls	r3, r0, #4
 8003c62:	18d3      	adds	r3, r2, r3
 8003c64:	330c      	adds	r3, #12
 8003c66:	1c0a      	adds	r2, r1, #0
 8003c68:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8003c6a:	193b      	adds	r3, r7, r4
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	193a      	adds	r2, r7, r4
 8003c70:	1c59      	adds	r1, r3, #1
 8003c72:	7011      	strb	r1, [r2, #0]
 8003c74:	0018      	movs	r0, r3
 8003c76:	1d3b      	adds	r3, r7, #4
 8003c78:	78d9      	ldrb	r1, [r3, #3]
 8003c7a:	4a06      	ldr	r2, [pc, #24]	@ (8003c94 <Meas_SetEnabledSensors+0x98>)
 8003c7c:	0103      	lsls	r3, r0, #4
 8003c7e:	18d3      	adds	r3, r2, r3
 8003c80:	330c      	adds	r3, #12
 8003c82:	1c0a      	adds	r2, r1, #0
 8003c84:	701a      	strb	r2, [r3, #0]
}
 8003c86:	46c0      	nop			@ (mov r8, r8)
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b005      	add	sp, #20
 8003c8c:	bd90      	pop	{r4, r7, pc}
 8003c8e:	46c0      	nop			@ (mov r8, r8)
 8003c90:	200003c0 	.word	0x200003c0
 8003c94:	20000380 	.word	0x20000380

08003c98 <Meas_GetState>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
  // TODO: Add the turning off the heater for the sgp40
}

MeasurementState Meas_GetState(void) {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
    return MeasState;
 8003c9c:	4b02      	ldr	r3, [pc, #8]	@ (8003ca8 <Meas_GetState+0x10>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
}
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	46c0      	nop			@ (mov r8, r8)
 8003ca8:	200003c4 	.word	0x200003c4

08003cac <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003cb0:	4b11      	ldr	r3, [pc, #68]	@ (8003cf8 <MX_RTC_Init+0x4c>)
 8003cb2:	4a12      	ldr	r2, [pc, #72]	@ (8003cfc <MX_RTC_Init+0x50>)
 8003cb4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003cb6:	4b10      	ldr	r3, [pc, #64]	@ (8003cf8 <MX_RTC_Init+0x4c>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf8 <MX_RTC_Init+0x4c>)
 8003cbe:	227f      	movs	r2, #127	@ 0x7f
 8003cc0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf8 <MX_RTC_Init+0x4c>)
 8003cc4:	22ff      	movs	r2, #255	@ 0xff
 8003cc6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf8 <MX_RTC_Init+0x4c>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003cce:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf8 <MX_RTC_Init+0x4c>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003cd4:	4b08      	ldr	r3, [pc, #32]	@ (8003cf8 <MX_RTC_Init+0x4c>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003cda:	4b07      	ldr	r3, [pc, #28]	@ (8003cf8 <MX_RTC_Init+0x4c>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003ce0:	4b05      	ldr	r3, [pc, #20]	@ (8003cf8 <MX_RTC_Init+0x4c>)
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f004 fd98 	bl	8008818 <HAL_RTC_Init>
 8003ce8:	1e03      	subs	r3, r0, #0
 8003cea:	d001      	beq.n	8003cf0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8003cec:	f7ff fd92 	bl	8003814 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003cf0:	46c0      	nop			@ (mov r8, r8)
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	46c0      	nop			@ (mov r8, r8)
 8003cf8:	200003c8 	.word	0x200003c8
 8003cfc:	40002800 	.word	0x40002800

08003d00 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a06      	ldr	r2, [pc, #24]	@ (8003d28 <HAL_RTC_MspInit+0x28>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d106      	bne.n	8003d20 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d12:	4b06      	ldr	r3, [pc, #24]	@ (8003d2c <HAL_RTC_MspInit+0x2c>)
 8003d14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003d16:	4b05      	ldr	r3, [pc, #20]	@ (8003d2c <HAL_RTC_MspInit+0x2c>)
 8003d18:	2180      	movs	r1, #128	@ 0x80
 8003d1a:	02c9      	lsls	r1, r1, #11
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	651a      	str	r2, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003d20:	46c0      	nop			@ (mov r8, r8)
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b002      	add	sp, #8
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40002800 	.word	0x40002800
 8003d2c:	40021000 	.word	0x40021000

08003d30 <ReadRegister>:

//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
//static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92, 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8003d30:	b590      	push	{r4, r7, lr}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6039      	str	r1, [r7, #0]
 8003d38:	0011      	movs	r1, r2
 8003d3a:	1dfb      	adds	r3, r7, #7
 8003d3c:	1c02      	adds	r2, r0, #0
 8003d3e:	701a      	strb	r2, [r3, #0]
 8003d40:	1dbb      	adds	r3, r7, #6
 8003d42:	1c0a      	adds	r2, r1, #0
 8003d44:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8003d46:	4b08      	ldr	r3, [pc, #32]	@ (8003d68 <ReadRegister+0x38>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d008      	beq.n	8003d60 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 8003d4e:	4b06      	ldr	r3, [pc, #24]	@ (8003d68 <ReadRegister+0x38>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	1dba      	adds	r2, r7, #6
 8003d54:	7814      	ldrb	r4, [r2, #0]
 8003d56:	6839      	ldr	r1, [r7, #0]
 8003d58:	1dfa      	adds	r2, r7, #7
 8003d5a:	7810      	ldrb	r0, [r2, #0]
 8003d5c:	0022      	movs	r2, r4
 8003d5e:	4798      	blx	r3
  }
}
 8003d60:	46c0      	nop			@ (mov r8, r8)
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b003      	add	sp, #12
 8003d66:	bd90      	pop	{r4, r7, pc}
 8003d68:	200003ec 	.word	0x200003ec

08003d6c <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8003d6c:	b590      	push	{r4, r7, lr}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6039      	str	r1, [r7, #0]
 8003d74:	0011      	movs	r1, r2
 8003d76:	1dfb      	adds	r3, r7, #7
 8003d78:	1c02      	adds	r2, r0, #0
 8003d7a:	701a      	strb	r2, [r3, #0]
 8003d7c:	1dbb      	adds	r3, r7, #6
 8003d7e:	1c0a      	adds	r2, r1, #0
 8003d80:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8003d82:	4b08      	ldr	r3, [pc, #32]	@ (8003da4 <WriteRegister+0x38>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d008      	beq.n	8003d9c <WriteRegister+0x30>
      WriteFunction(address, buffer, nrBytes);
 8003d8a:	4b06      	ldr	r3, [pc, #24]	@ (8003da4 <WriteRegister+0x38>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	1dba      	adds	r2, r7, #6
 8003d90:	7814      	ldrb	r4, [r2, #0]
 8003d92:	6839      	ldr	r1, [r7, #0]
 8003d94:	1dfa      	adds	r2, r7, #7
 8003d96:	7810      	ldrb	r0, [r2, #0]
 8003d98:	0022      	movs	r2, r4
 8003d9a:	4798      	blx	r3
  }
}
 8003d9c:	46c0      	nop			@ (mov r8, r8)
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b003      	add	sp, #12
 8003da2:	bd90      	pop	{r4, r7, pc}
 8003da4:	200003f0 	.word	0x200003f0

08003da8 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8003db2:	4b05      	ldr	r3, [pc, #20]	@ (8003dc8 <SGP_Init+0x20>)
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8003db8:	4b04      	ldr	r3, [pc, #16]	@ (8003dcc <SGP_Init+0x24>)
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	601a      	str	r2, [r3, #0]
}
 8003dbe:	46c0      	nop			@ (mov r8, r8)
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	b002      	add	sp, #8
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	46c0      	nop			@ (mov r8, r8)
 8003dc8:	200003ec 	.word	0x200003ec
 8003dcc:	200003f0 	.word	0x200003f0

08003dd0 <SGP_DeviceConnected>:
    }
  }
  return false;
}

bool SGP_DeviceConnected(void) {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8003dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e40 <SGP_DeviceConnected+0x70>)
 8003dd8:	2202      	movs	r2, #2
 8003dda:	0019      	movs	r1, r3
 8003ddc:	2059      	movs	r0, #89	@ 0x59
 8003dde:	f7ff ffc5 	bl	8003d6c <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 8003de2:	2001      	movs	r0, #1
 8003de4:	f000 ffee 	bl	8004dc4 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8003de8:	4b16      	ldr	r3, [pc, #88]	@ (8003e44 <SGP_DeviceConnected+0x74>)
 8003dea:	2209      	movs	r2, #9
 8003dec:	0019      	movs	r1, r3
 8003dee:	2059      	movs	r0, #89	@ 0x59
 8003df0:	f7ff ff9e 	bl	8003d30 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8003df4:	1dfb      	adds	r3, r7, #7
 8003df6:	2200      	movs	r2, #0
 8003df8:	701a      	strb	r2, [r3, #0]
 8003dfa:	e011      	b.n	8003e20 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8003dfc:	1dfb      	adds	r3, r7, #7
 8003dfe:	7818      	ldrb	r0, [r3, #0]
 8003e00:	1dfb      	adds	r3, r7, #7
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	4a0f      	ldr	r2, [pc, #60]	@ (8003e44 <SGP_DeviceConnected+0x74>)
 8003e06:	5cd3      	ldrb	r3, [r2, r3]
 8003e08:	4a0f      	ldr	r2, [pc, #60]	@ (8003e48 <SGP_DeviceConnected+0x78>)
 8003e0a:	4910      	ldr	r1, [pc, #64]	@ (8003e4c <SGP_DeviceConnected+0x7c>)
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	0003      	movs	r3, r0
 8003e10:	2002      	movs	r0, #2
 8003e12:	f000 fba7 	bl	8004564 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8003e16:	1dfb      	adds	r3, r7, #7
 8003e18:	781a      	ldrb	r2, [r3, #0]
 8003e1a:	1dfb      	adds	r3, r7, #7
 8003e1c:	3201      	adds	r2, #1
 8003e1e:	701a      	strb	r2, [r3, #0]
 8003e20:	1dfb      	adds	r3, r7, #7
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d9e9      	bls.n	8003dfc <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 8003e28:	4b06      	ldr	r3, [pc, #24]	@ (8003e44 <SGP_DeviceConnected+0x74>)
 8003e2a:	2203      	movs	r2, #3
 8003e2c:	2109      	movs	r1, #9
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f000 f80e 	bl	8003e50 <CheckCRC>
 8003e34:	0003      	movs	r3, r0
}
 8003e36:	0018      	movs	r0, r3
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b002      	add	sp, #8
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	46c0      	nop			@ (mov r8, r8)
 8003e40:	20000004 	.word	0x20000004
 8003e44:	200003f4 	.word	0x200003f4
 8003e48:	0800c628 	.word	0x0800c628
 8003e4c:	0800c604 	.word	0x0800c604

08003e50 <CheckCRC>:

static bool CheckCRC(uint8_t* data, uint8_t dataLength, uint8_t segmentSize) {
 8003e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e52:	b08f      	sub	sp, #60	@ 0x3c
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6278      	str	r0, [r7, #36]	@ 0x24
 8003e58:	0008      	movs	r0, r1
 8003e5a:	0011      	movs	r1, r2
 8003e5c:	2323      	movs	r3, #35	@ 0x23
 8003e5e:	18fb      	adds	r3, r7, r3
 8003e60:	1c02      	adds	r2, r0, #0
 8003e62:	701a      	strb	r2, [r3, #0]
 8003e64:	2322      	movs	r3, #34	@ 0x22
 8003e66:	18fb      	adds	r3, r7, r3
 8003e68:	1c0a      	adds	r2, r1, #0
 8003e6a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8003e6c:	2317      	movs	r3, #23
 8003e6e:	2220      	movs	r2, #32
 8003e70:	189b      	adds	r3, r3, r2
 8003e72:	19db      	adds	r3, r3, r7
 8003e74:	2200      	movs	r2, #0
 8003e76:	701a      	strb	r2, [r3, #0]
 8003e78:	e09f      	b.n	8003fba <CheckCRC+0x16a>
 8003e7a:	466b      	mov	r3, sp
 8003e7c:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 8003e7e:	2322      	movs	r3, #34	@ 0x22
 8003e80:	18fb      	adds	r3, r7, r3
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	001a      	movs	r2, r3
 8003e86:	3a01      	subs	r2, #1
 8003e88:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	60fa      	str	r2, [r7, #12]
 8003e90:	68b8      	ldr	r0, [r7, #8]
 8003e92:	68f9      	ldr	r1, [r7, #12]
 8003e94:	0002      	movs	r2, r0
 8003e96:	0f52      	lsrs	r2, r2, #29
 8003e98:	000c      	movs	r4, r1
 8003e9a:	00e4      	lsls	r4, r4, #3
 8003e9c:	61fc      	str	r4, [r7, #28]
 8003e9e:	69fc      	ldr	r4, [r7, #28]
 8003ea0:	4314      	orrs	r4, r2
 8003ea2:	61fc      	str	r4, [r7, #28]
 8003ea4:	0002      	movs	r2, r0
 8003ea6:	00d2      	lsls	r2, r2, #3
 8003ea8:	61ba      	str	r2, [r7, #24]
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	2200      	movs	r2, #0
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	6838      	ldr	r0, [r7, #0]
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	0002      	movs	r2, r0
 8003eb6:	0f52      	lsrs	r2, r2, #29
 8003eb8:	000c      	movs	r4, r1
 8003eba:	00e4      	lsls	r4, r4, #3
 8003ebc:	617c      	str	r4, [r7, #20]
 8003ebe:	697c      	ldr	r4, [r7, #20]
 8003ec0:	4314      	orrs	r4, r2
 8003ec2:	617c      	str	r4, [r7, #20]
 8003ec4:	0002      	movs	r2, r0
 8003ec6:	00d2      	lsls	r2, r2, #3
 8003ec8:	613a      	str	r2, [r7, #16]
 8003eca:	3307      	adds	r3, #7
 8003ecc:	08db      	lsrs	r3, r3, #3
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	466a      	mov	r2, sp
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	469d      	mov	sp, r3
 8003ed6:	466b      	mov	r3, sp
 8003ed8:	3300      	adds	r3, #0
 8003eda:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8003edc:	2316      	movs	r3, #22
 8003ede:	2220      	movs	r2, #32
 8003ee0:	189b      	adds	r3, r3, r2
 8003ee2:	19db      	adds	r3, r3, r7
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	701a      	strb	r2, [r3, #0]
 8003ee8:	e01e      	b.n	8003f28 <CheckCRC+0xd8>
        crcData[j] = data[i + j];
 8003eea:	2317      	movs	r3, #23
 8003eec:	2220      	movs	r2, #32
 8003eee:	189b      	adds	r3, r3, r2
 8003ef0:	19db      	adds	r3, r3, r7
 8003ef2:	781a      	ldrb	r2, [r3, #0]
 8003ef4:	2116      	movs	r1, #22
 8003ef6:	2320      	movs	r3, #32
 8003ef8:	18cb      	adds	r3, r1, r3
 8003efa:	19db      	adds	r3, r3, r7
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	18d3      	adds	r3, r2, r3
 8003f00:	001a      	movs	r2, r3
 8003f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f04:	189a      	adds	r2, r3, r2
 8003f06:	0008      	movs	r0, r1
 8003f08:	2320      	movs	r3, #32
 8003f0a:	18cb      	adds	r3, r1, r3
 8003f0c:	19db      	adds	r3, r3, r7
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	7811      	ldrb	r1, [r2, #0]
 8003f12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f14:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8003f16:	2320      	movs	r3, #32
 8003f18:	18c3      	adds	r3, r0, r3
 8003f1a:	19db      	adds	r3, r3, r7
 8003f1c:	781a      	ldrb	r2, [r3, #0]
 8003f1e:	2320      	movs	r3, #32
 8003f20:	18c3      	adds	r3, r0, r3
 8003f22:	19db      	adds	r3, r3, r7
 8003f24:	3201      	adds	r2, #1
 8003f26:	701a      	strb	r2, [r3, #0]
 8003f28:	2316      	movs	r3, #22
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	189b      	adds	r3, r3, r2
 8003f2e:	19da      	adds	r2, r3, r7
 8003f30:	2322      	movs	r3, #34	@ 0x22
 8003f32:	18fb      	adds	r3, r7, r3
 8003f34:	7812      	ldrb	r2, [r2, #0]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d3d6      	bcc.n	8003eea <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8003f3c:	2417      	movs	r4, #23
 8003f3e:	2320      	movs	r3, #32
 8003f40:	18e3      	adds	r3, r4, r3
 8003f42:	19db      	adds	r3, r3, r7
 8003f44:	781a      	ldrb	r2, [r3, #0]
 8003f46:	2322      	movs	r3, #34	@ 0x22
 8003f48:	18fb      	adds	r3, r7, r3
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	18d3      	adds	r3, r2, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f52:	18d2      	adds	r2, r2, r3
 8003f54:	250b      	movs	r5, #11
 8003f56:	2320      	movs	r3, #32
 8003f58:	18eb      	adds	r3, r5, r3
 8003f5a:	19db      	adds	r3, r3, r7
 8003f5c:	7812      	ldrb	r2, [r2, #0]
 8003f5e:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8003f60:	2322      	movs	r3, #34	@ 0x22
 8003f62:	18fb      	adds	r3, r7, r3
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f6c:	0011      	movs	r1, r2
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f000 f838 	bl	8003fe4 <CalculateCRC>
 8003f74:	0003      	movs	r3, r0
 8003f76:	001a      	movs	r2, r3
 8003f78:	2320      	movs	r3, #32
 8003f7a:	18eb      	adds	r3, r5, r3
 8003f7c:	19db      	adds	r3, r3, r7
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d00c      	beq.n	8003f9e <CheckCRC+0x14e>
        Error("CRC check failed for segment: %d.", i + 1);
 8003f84:	2320      	movs	r3, #32
 8003f86:	18e3      	adds	r3, r4, r3
 8003f88:	19db      	adds	r3, r3, r7
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	4a13      	ldr	r2, [pc, #76]	@ (8003fdc <CheckCRC+0x18c>)
 8003f90:	4913      	ldr	r1, [pc, #76]	@ (8003fe0 <CheckCRC+0x190>)
 8003f92:	2001      	movs	r0, #1
 8003f94:	f000 fae6 	bl	8004564 <CreateLine>
        return false;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	46b5      	mov	sp, r6
 8003f9c:	e019      	b.n	8003fd2 <CheckCRC+0x182>
 8003f9e:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8003fa0:	2217      	movs	r2, #23
 8003fa2:	2320      	movs	r3, #32
 8003fa4:	18d3      	adds	r3, r2, r3
 8003fa6:	19db      	adds	r3, r3, r7
 8003fa8:	2120      	movs	r1, #32
 8003faa:	1852      	adds	r2, r2, r1
 8003fac:	19d1      	adds	r1, r2, r7
 8003fae:	2222      	movs	r2, #34	@ 0x22
 8003fb0:	18ba      	adds	r2, r7, r2
 8003fb2:	7809      	ldrb	r1, [r1, #0]
 8003fb4:	7812      	ldrb	r2, [r2, #0]
 8003fb6:	188a      	adds	r2, r1, r2
 8003fb8:	701a      	strb	r2, [r3, #0]
 8003fba:	2317      	movs	r3, #23
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	189b      	adds	r3, r3, r2
 8003fc0:	19da      	adds	r2, r3, r7
 8003fc2:	2323      	movs	r3, #35	@ 0x23
 8003fc4:	18fb      	adds	r3, r7, r3
 8003fc6:	7812      	ldrb	r2, [r2, #0]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d200      	bcs.n	8003fd0 <CheckCRC+0x180>
 8003fce:	e754      	b.n	8003e7a <CheckCRC+0x2a>
    }
  }
  return true;
 8003fd0:	2301      	movs	r3, #1
}
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	b00f      	add	sp, #60	@ 0x3c
 8003fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fda:	46c0      	nop			@ (mov r8, r8)
 8003fdc:	0800c648 	.word	0x0800c648
 8003fe0:	0800c5e0 	.word	0x0800c5e0

08003fe4 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8003fe4:	b590      	push	{r4, r7, lr}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	000a      	movs	r2, r1
 8003fee:	1cfb      	adds	r3, r7, #3
 8003ff0:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8003ff2:	230f      	movs	r3, #15
 8003ff4:	18fb      	adds	r3, r7, r3
 8003ff6:	22ff      	movs	r2, #255	@ 0xff
 8003ff8:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8003ffa:	230e      	movs	r3, #14
 8003ffc:	18fb      	adds	r3, r7, r3
 8003ffe:	2200      	movs	r2, #0
 8004000:	701a      	strb	r2, [r3, #0]
 8004002:	e037      	b.n	8004074 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8004004:	230e      	movs	r3, #14
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	18d3      	adds	r3, r2, r3
 800400e:	7819      	ldrb	r1, [r3, #0]
 8004010:	220f      	movs	r2, #15
 8004012:	18bb      	adds	r3, r7, r2
 8004014:	18ba      	adds	r2, r7, r2
 8004016:	7812      	ldrb	r2, [r2, #0]
 8004018:	404a      	eors	r2, r1
 800401a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800401c:	230d      	movs	r3, #13
 800401e:	18fb      	adds	r3, r7, r3
 8004020:	2200      	movs	r2, #0
 8004022:	701a      	strb	r2, [r3, #0]
 8004024:	e01b      	b.n	800405e <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 8004026:	210f      	movs	r1, #15
 8004028:	187b      	adds	r3, r7, r1
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	b25b      	sxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	da09      	bge.n	8004046 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 8004032:	187b      	adds	r3, r7, r1
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	b25b      	sxtb	r3, r3
 800403a:	2231      	movs	r2, #49	@ 0x31
 800403c:	4053      	eors	r3, r2
 800403e:	b25a      	sxtb	r2, r3
 8004040:	187b      	adds	r3, r7, r1
 8004042:	701a      	strb	r2, [r3, #0]
 8004044:	e005      	b.n	8004052 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8004046:	230f      	movs	r3, #15
 8004048:	18fa      	adds	r2, r7, r3
 800404a:	18fb      	adds	r3, r7, r3
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	18db      	adds	r3, r3, r3
 8004050:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8004052:	210d      	movs	r1, #13
 8004054:	187b      	adds	r3, r7, r1
 8004056:	781a      	ldrb	r2, [r3, #0]
 8004058:	187b      	adds	r3, r7, r1
 800405a:	3201      	adds	r2, #1
 800405c:	701a      	strb	r2, [r3, #0]
 800405e:	230d      	movs	r3, #13
 8004060:	18fb      	adds	r3, r7, r3
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b07      	cmp	r3, #7
 8004066:	d9de      	bls.n	8004026 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8004068:	210e      	movs	r1, #14
 800406a:	187b      	adds	r3, r7, r1
 800406c:	781a      	ldrb	r2, [r3, #0]
 800406e:	187b      	adds	r3, r7, r1
 8004070:	3201      	adds	r2, #1
 8004072:	701a      	strb	r2, [r3, #0]
 8004074:	230e      	movs	r3, #14
 8004076:	18fa      	adds	r2, r7, r3
 8004078:	1cfb      	adds	r3, r7, #3
 800407a:	7812      	ldrb	r2, [r2, #0]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d3c0      	bcc.n	8004004 <CalculateCRC+0x20>
      }
    }
  }
  Info("SGP_CRC calculated value: 0x%X", crc);
 8004082:	240f      	movs	r4, #15
 8004084:	193b      	adds	r3, r7, r4
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	4a05      	ldr	r2, [pc, #20]	@ (80040a0 <CalculateCRC+0xbc>)
 800408a:	4906      	ldr	r1, [pc, #24]	@ (80040a4 <CalculateCRC+0xc0>)
 800408c:	2002      	movs	r0, #2
 800408e:	f000 fa69 	bl	8004564 <CreateLine>
  return crc;
 8004092:	193b      	adds	r3, r7, r4
 8004094:	781b      	ldrb	r3, [r3, #0]
}
 8004096:	0018      	movs	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	b005      	add	sp, #20
 800409c:	bd90      	pop	{r4, r7, pc}
 800409e:	46c0      	nop			@ (mov r8, r8)
 80040a0:	0800c66c 	.word	0x0800c66c
 80040a4:	0800c604 	.word	0x0800c604

080040a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ac:	4b07      	ldr	r3, [pc, #28]	@ (80040cc <HAL_MspInit+0x24>)
 80040ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040b0:	4b06      	ldr	r3, [pc, #24]	@ (80040cc <HAL_MspInit+0x24>)
 80040b2:	2101      	movs	r1, #1
 80040b4:	430a      	orrs	r2, r1
 80040b6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80040b8:	4b04      	ldr	r3, [pc, #16]	@ (80040cc <HAL_MspInit+0x24>)
 80040ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040bc:	4b03      	ldr	r3, [pc, #12]	@ (80040cc <HAL_MspInit+0x24>)
 80040be:	2180      	movs	r1, #128	@ 0x80
 80040c0:	0549      	lsls	r1, r1, #21
 80040c2:	430a      	orrs	r2, r1
 80040c4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040c6:	46c0      	nop			@ (mov r8, r8)
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40021000 	.word	0x40021000

080040d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80040d4:	46c0      	nop			@ (mov r8, r8)
 80040d6:	e7fd      	b.n	80040d4 <NMI_Handler+0x4>

080040d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040dc:	46c0      	nop			@ (mov r8, r8)
 80040de:	e7fd      	b.n	80040dc <HardFault_Handler+0x4>

080040e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80040e4:	46c0      	nop			@ (mov r8, r8)
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040ee:	46c0      	nop			@ (mov r8, r8)
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040f8:	f000 fe48 	bl	8004d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040fc:	46c0      	nop			@ (mov r8, r8)
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004108:	4b05      	ldr	r3, [pc, #20]	@ (8004120 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800410a:	0018      	movs	r0, r3
 800410c:	f001 f881 	bl	8005212 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004110:	4b04      	ldr	r3, [pc, #16]	@ (8004124 <DMA1_Channel2_3_IRQHandler+0x20>)
 8004112:	0018      	movs	r0, r3
 8004114:	f001 f87d 	bl	8005212 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004118:	46c0      	nop			@ (mov r8, r8)
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	46c0      	nop			@ (mov r8, r8)
 8004120:	200002a8 	.word	0x200002a8
 8004124:	20000260 	.word	0x20000260

08004128 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800412c:	4b03      	ldr	r3, [pc, #12]	@ (800413c <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 800412e:	0018      	movs	r0, r3
 8004130:	f001 f86f 	bl	8005212 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8004134:	46c0      	nop			@ (mov r8, r8)
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	46c0      	nop			@ (mov r8, r8)
 800413c:	2000032c 	.word	0x2000032c

08004140 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8004144:	4b09      	ldr	r3, [pc, #36]	@ (800416c <I2C1_IRQHandler+0x2c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699a      	ldr	r2, [r3, #24]
 800414a:	23e0      	movs	r3, #224	@ 0xe0
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	4013      	ands	r3, r2
 8004150:	d004      	beq.n	800415c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8004152:	4b06      	ldr	r3, [pc, #24]	@ (800416c <I2C1_IRQHandler+0x2c>)
 8004154:	0018      	movs	r0, r3
 8004156:	f001 fdb7 	bl	8005cc8 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800415a:	e003      	b.n	8004164 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800415c:	4b03      	ldr	r3, [pc, #12]	@ (800416c <I2C1_IRQHandler+0x2c>)
 800415e:	0018      	movs	r0, r3
 8004160:	f001 fd98 	bl	8005c94 <HAL_I2C_EV_IRQHandler>
}
 8004164:	46c0      	nop			@ (mov r8, r8)
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	46c0      	nop			@ (mov r8, r8)
 800416c:	2000020c 	.word	0x2000020c

08004170 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  return 1;
 8004174:	2301      	movs	r3, #1
}
 8004176:	0018      	movs	r0, r3
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <_kill>:

int _kill(int pid, int sig)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004186:	f006 f869 	bl	800a25c <__errno>
 800418a:	0003      	movs	r3, r0
 800418c:	2216      	movs	r2, #22
 800418e:	601a      	str	r2, [r3, #0]
  return -1;
 8004190:	2301      	movs	r3, #1
 8004192:	425b      	negs	r3, r3
}
 8004194:	0018      	movs	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	b002      	add	sp, #8
 800419a:	bd80      	pop	{r7, pc}

0800419c <_exit>:

void _exit (int status)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80041a4:	2301      	movs	r3, #1
 80041a6:	425a      	negs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	0011      	movs	r1, r2
 80041ac:	0018      	movs	r0, r3
 80041ae:	f7ff ffe5 	bl	800417c <_kill>
  while (1) {}    /* Make sure we hang here */
 80041b2:	46c0      	nop			@ (mov r8, r8)
 80041b4:	e7fd      	b.n	80041b2 <_exit+0x16>

080041b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b086      	sub	sp, #24
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	e00a      	b.n	80041de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80041c8:	e000      	b.n	80041cc <_read+0x16>
 80041ca:	bf00      	nop
 80041cc:	0001      	movs	r1, r0
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	60ba      	str	r2, [r7, #8]
 80041d4:	b2ca      	uxtb	r2, r1
 80041d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	3301      	adds	r3, #1
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	dbf0      	blt.n	80041c8 <_read+0x12>
  }

  return len;
 80041e6:	687b      	ldr	r3, [r7, #4]
}
 80041e8:	0018      	movs	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b006      	add	sp, #24
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80041f8:	2301      	movs	r3, #1
 80041fa:	425b      	negs	r3, r3
}
 80041fc:	0018      	movs	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	b002      	add	sp, #8
 8004202:	bd80      	pop	{r7, pc}

08004204 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2280      	movs	r2, #128	@ 0x80
 8004212:	0192      	lsls	r2, r2, #6
 8004214:	605a      	str	r2, [r3, #4]
  return 0;
 8004216:	2300      	movs	r3, #0
}
 8004218:	0018      	movs	r0, r3
 800421a:	46bd      	mov	sp, r7
 800421c:	b002      	add	sp, #8
 800421e:	bd80      	pop	{r7, pc}

08004220 <_isatty>:

int _isatty(int file)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004228:	2301      	movs	r3, #1
}
 800422a:	0018      	movs	r0, r3
 800422c:	46bd      	mov	sp, r7
 800422e:	b002      	add	sp, #8
 8004230:	bd80      	pop	{r7, pc}

08004232 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800423e:	2300      	movs	r3, #0
}
 8004240:	0018      	movs	r0, r3
 8004242:	46bd      	mov	sp, r7
 8004244:	b004      	add	sp, #16
 8004246:	bd80      	pop	{r7, pc}

08004248 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004250:	4a14      	ldr	r2, [pc, #80]	@ (80042a4 <_sbrk+0x5c>)
 8004252:	4b15      	ldr	r3, [pc, #84]	@ (80042a8 <_sbrk+0x60>)
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800425c:	4b13      	ldr	r3, [pc, #76]	@ (80042ac <_sbrk+0x64>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d102      	bne.n	800426a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004264:	4b11      	ldr	r3, [pc, #68]	@ (80042ac <_sbrk+0x64>)
 8004266:	4a12      	ldr	r2, [pc, #72]	@ (80042b0 <_sbrk+0x68>)
 8004268:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800426a:	4b10      	ldr	r3, [pc, #64]	@ (80042ac <_sbrk+0x64>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	18d3      	adds	r3, r2, r3
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	429a      	cmp	r2, r3
 8004276:	d207      	bcs.n	8004288 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004278:	f005 fff0 	bl	800a25c <__errno>
 800427c:	0003      	movs	r3, r0
 800427e:	220c      	movs	r2, #12
 8004280:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004282:	2301      	movs	r3, #1
 8004284:	425b      	negs	r3, r3
 8004286:	e009      	b.n	800429c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004288:	4b08      	ldr	r3, [pc, #32]	@ (80042ac <_sbrk+0x64>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800428e:	4b07      	ldr	r3, [pc, #28]	@ (80042ac <_sbrk+0x64>)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	18d2      	adds	r2, r2, r3
 8004296:	4b05      	ldr	r3, [pc, #20]	@ (80042ac <_sbrk+0x64>)
 8004298:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800429a:	68fb      	ldr	r3, [r7, #12]
}
 800429c:	0018      	movs	r0, r3
 800429e:	46bd      	mov	sp, r7
 80042a0:	b006      	add	sp, #24
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	20005000 	.word	0x20005000
 80042a8:	00000400 	.word	0x00000400
 80042ac:	20000400 	.word	0x20000400
 80042b0:	20000e80 	.word	0x20000e80

080042b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042b8:	46c0      	nop			@ (mov r8, r8)
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
	...

080042c0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart4;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80042c4:	4b14      	ldr	r3, [pc, #80]	@ (8004318 <MX_USART1_UART_Init+0x58>)
 80042c6:	4a15      	ldr	r2, [pc, #84]	@ (800431c <MX_USART1_UART_Init+0x5c>)
 80042c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80042ca:	4b13      	ldr	r3, [pc, #76]	@ (8004318 <MX_USART1_UART_Init+0x58>)
 80042cc:	22e1      	movs	r2, #225	@ 0xe1
 80042ce:	0252      	lsls	r2, r2, #9
 80042d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80042d2:	4b11      	ldr	r3, [pc, #68]	@ (8004318 <MX_USART1_UART_Init+0x58>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80042d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004318 <MX_USART1_UART_Init+0x58>)
 80042da:	2200      	movs	r2, #0
 80042dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80042de:	4b0e      	ldr	r3, [pc, #56]	@ (8004318 <MX_USART1_UART_Init+0x58>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80042e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004318 <MX_USART1_UART_Init+0x58>)
 80042e6:	220c      	movs	r2, #12
 80042e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004318 <MX_USART1_UART_Init+0x58>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80042f0:	4b09      	ldr	r3, [pc, #36]	@ (8004318 <MX_USART1_UART_Init+0x58>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80042f6:	4b08      	ldr	r3, [pc, #32]	@ (8004318 <MX_USART1_UART_Init+0x58>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80042fc:	4b06      	ldr	r3, [pc, #24]	@ (8004318 <MX_USART1_UART_Init+0x58>)
 80042fe:	2200      	movs	r2, #0
 8004300:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004302:	4b05      	ldr	r3, [pc, #20]	@ (8004318 <MX_USART1_UART_Init+0x58>)
 8004304:	0018      	movs	r0, r3
 8004306:	f004 fbb9 	bl	8008a7c <HAL_UART_Init>
 800430a:	1e03      	subs	r3, r0, #0
 800430c:	d001      	beq.n	8004312 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800430e:	f7ff fa81 	bl	8003814 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004312:	46c0      	nop			@ (mov r8, r8)
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	20000404 	.word	0x20000404
 800431c:	40013800 	.word	0x40013800

08004320 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8004324:	4b14      	ldr	r3, [pc, #80]	@ (8004378 <MX_USART4_UART_Init+0x58>)
 8004326:	4a15      	ldr	r2, [pc, #84]	@ (800437c <MX_USART4_UART_Init+0x5c>)
 8004328:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800432a:	4b13      	ldr	r3, [pc, #76]	@ (8004378 <MX_USART4_UART_Init+0x58>)
 800432c:	22e1      	movs	r2, #225	@ 0xe1
 800432e:	0252      	lsls	r2, r2, #9
 8004330:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004332:	4b11      	ldr	r3, [pc, #68]	@ (8004378 <MX_USART4_UART_Init+0x58>)
 8004334:	2200      	movs	r2, #0
 8004336:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004338:	4b0f      	ldr	r3, [pc, #60]	@ (8004378 <MX_USART4_UART_Init+0x58>)
 800433a:	2200      	movs	r2, #0
 800433c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800433e:	4b0e      	ldr	r3, [pc, #56]	@ (8004378 <MX_USART4_UART_Init+0x58>)
 8004340:	2200      	movs	r2, #0
 8004342:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004344:	4b0c      	ldr	r3, [pc, #48]	@ (8004378 <MX_USART4_UART_Init+0x58>)
 8004346:	220c      	movs	r2, #12
 8004348:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800434a:	4b0b      	ldr	r3, [pc, #44]	@ (8004378 <MX_USART4_UART_Init+0x58>)
 800434c:	2200      	movs	r2, #0
 800434e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004350:	4b09      	ldr	r3, [pc, #36]	@ (8004378 <MX_USART4_UART_Init+0x58>)
 8004352:	2200      	movs	r2, #0
 8004354:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004356:	4b08      	ldr	r3, [pc, #32]	@ (8004378 <MX_USART4_UART_Init+0x58>)
 8004358:	2200      	movs	r2, #0
 800435a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800435c:	4b06      	ldr	r3, [pc, #24]	@ (8004378 <MX_USART4_UART_Init+0x58>)
 800435e:	2200      	movs	r2, #0
 8004360:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004362:	4b05      	ldr	r3, [pc, #20]	@ (8004378 <MX_USART4_UART_Init+0x58>)
 8004364:	0018      	movs	r0, r3
 8004366:	f004 fb89 	bl	8008a7c <HAL_UART_Init>
 800436a:	1e03      	subs	r3, r0, #0
 800436c:	d001      	beq.n	8004372 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800436e:	f7ff fa51 	bl	8003814 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8004372:	46c0      	nop			@ (mov r8, r8)
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	2000048c 	.word	0x2000048c
 800437c:	40004c00 	.word	0x40004c00

08004380 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004380:	b590      	push	{r4, r7, lr}
 8004382:	b08b      	sub	sp, #44	@ 0x2c
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004388:	2414      	movs	r4, #20
 800438a:	193b      	adds	r3, r7, r4
 800438c:	0018      	movs	r0, r3
 800438e:	2314      	movs	r3, #20
 8004390:	001a      	movs	r2, r3
 8004392:	2100      	movs	r1, #0
 8004394:	f005 ff08 	bl	800a1a8 <memset>
  if(uartHandle->Instance==USART1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a42      	ldr	r2, [pc, #264]	@ (80044a8 <HAL_UART_MspInit+0x128>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d12b      	bne.n	80043fa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80043a2:	4b42      	ldr	r3, [pc, #264]	@ (80044ac <HAL_UART_MspInit+0x12c>)
 80043a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043a6:	4b41      	ldr	r3, [pc, #260]	@ (80044ac <HAL_UART_MspInit+0x12c>)
 80043a8:	2180      	movs	r1, #128	@ 0x80
 80043aa:	01c9      	lsls	r1, r1, #7
 80043ac:	430a      	orrs	r2, r1
 80043ae:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043b0:	4b3e      	ldr	r3, [pc, #248]	@ (80044ac <HAL_UART_MspInit+0x12c>)
 80043b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043b4:	4b3d      	ldr	r3, [pc, #244]	@ (80044ac <HAL_UART_MspInit+0x12c>)
 80043b6:	2101      	movs	r1, #1
 80043b8:	430a      	orrs	r2, r1
 80043ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80043bc:	4b3b      	ldr	r3, [pc, #236]	@ (80044ac <HAL_UART_MspInit+0x12c>)
 80043be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c0:	2201      	movs	r2, #1
 80043c2:	4013      	ands	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80043c8:	193b      	adds	r3, r7, r4
 80043ca:	22c0      	movs	r2, #192	@ 0xc0
 80043cc:	00d2      	lsls	r2, r2, #3
 80043ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d0:	0021      	movs	r1, r4
 80043d2:	187b      	adds	r3, r7, r1
 80043d4:	2202      	movs	r2, #2
 80043d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d8:	187b      	adds	r3, r7, r1
 80043da:	2200      	movs	r2, #0
 80043dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	2203      	movs	r2, #3
 80043e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80043e4:	187b      	adds	r3, r7, r1
 80043e6:	2204      	movs	r2, #4
 80043e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ea:	187a      	adds	r2, r7, r1
 80043ec:	23a0      	movs	r3, #160	@ 0xa0
 80043ee:	05db      	lsls	r3, r3, #23
 80043f0:	0011      	movs	r1, r2
 80043f2:	0018      	movs	r0, r3
 80043f4:	f000 fff6 	bl	80053e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 80043f8:	e051      	b.n	800449e <HAL_UART_MspInit+0x11e>
  else if(uartHandle->Instance==USART4)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a2c      	ldr	r2, [pc, #176]	@ (80044b0 <HAL_UART_MspInit+0x130>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d14c      	bne.n	800449e <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART4_CLK_ENABLE();
 8004404:	4b29      	ldr	r3, [pc, #164]	@ (80044ac <HAL_UART_MspInit+0x12c>)
 8004406:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004408:	4b28      	ldr	r3, [pc, #160]	@ (80044ac <HAL_UART_MspInit+0x12c>)
 800440a:	2180      	movs	r1, #128	@ 0x80
 800440c:	0309      	lsls	r1, r1, #12
 800440e:	430a      	orrs	r2, r1
 8004410:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004412:	4b26      	ldr	r3, [pc, #152]	@ (80044ac <HAL_UART_MspInit+0x12c>)
 8004414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004416:	4b25      	ldr	r3, [pc, #148]	@ (80044ac <HAL_UART_MspInit+0x12c>)
 8004418:	2101      	movs	r1, #1
 800441a:	430a      	orrs	r2, r1
 800441c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800441e:	4b23      	ldr	r3, [pc, #140]	@ (80044ac <HAL_UART_MspInit+0x12c>)
 8004420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004422:	2201      	movs	r2, #1
 8004424:	4013      	ands	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800442a:	4b20      	ldr	r3, [pc, #128]	@ (80044ac <HAL_UART_MspInit+0x12c>)
 800442c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800442e:	4b1f      	ldr	r3, [pc, #124]	@ (80044ac <HAL_UART_MspInit+0x12c>)
 8004430:	2104      	movs	r1, #4
 8004432:	430a      	orrs	r2, r1
 8004434:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004436:	4b1d      	ldr	r3, [pc, #116]	@ (80044ac <HAL_UART_MspInit+0x12c>)
 8004438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443a:	2204      	movs	r2, #4
 800443c:	4013      	ands	r3, r2
 800443e:	60bb      	str	r3, [r7, #8]
 8004440:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004442:	2414      	movs	r4, #20
 8004444:	193b      	adds	r3, r7, r4
 8004446:	2202      	movs	r2, #2
 8004448:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800444a:	193b      	adds	r3, r7, r4
 800444c:	2202      	movs	r2, #2
 800444e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004450:	193b      	adds	r3, r7, r4
 8004452:	2200      	movs	r2, #0
 8004454:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004456:	193b      	adds	r3, r7, r4
 8004458:	2203      	movs	r2, #3
 800445a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800445c:	193b      	adds	r3, r7, r4
 800445e:	2206      	movs	r2, #6
 8004460:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004462:	193a      	adds	r2, r7, r4
 8004464:	23a0      	movs	r3, #160	@ 0xa0
 8004466:	05db      	lsls	r3, r3, #23
 8004468:	0011      	movs	r1, r2
 800446a:	0018      	movs	r0, r3
 800446c:	f000 ffba 	bl	80053e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004470:	0021      	movs	r1, r4
 8004472:	187b      	adds	r3, r7, r1
 8004474:	2280      	movs	r2, #128	@ 0x80
 8004476:	00d2      	lsls	r2, r2, #3
 8004478:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447a:	187b      	adds	r3, r7, r1
 800447c:	2202      	movs	r2, #2
 800447e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004480:	187b      	adds	r3, r7, r1
 8004482:	2200      	movs	r2, #0
 8004484:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004486:	187b      	adds	r3, r7, r1
 8004488:	2203      	movs	r2, #3
 800448a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800448c:	187b      	adds	r3, r7, r1
 800448e:	2206      	movs	r2, #6
 8004490:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004492:	187b      	adds	r3, r7, r1
 8004494:	4a07      	ldr	r2, [pc, #28]	@ (80044b4 <HAL_UART_MspInit+0x134>)
 8004496:	0019      	movs	r1, r3
 8004498:	0010      	movs	r0, r2
 800449a:	f000 ffa3 	bl	80053e4 <HAL_GPIO_Init>
}
 800449e:	46c0      	nop			@ (mov r8, r8)
 80044a0:	46bd      	mov	sp, r7
 80044a2:	b00b      	add	sp, #44	@ 0x2c
 80044a4:	bd90      	pop	{r4, r7, pc}
 80044a6:	46c0      	nop			@ (mov r8, r8)
 80044a8:	40013800 	.word	0x40013800
 80044ac:	40021000 	.word	0x40021000
 80044b0:	40004c00 	.word	0x40004c00
 80044b4:	50000800 	.word	0x50000800

080044b8 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 1024

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 80044c0:	f000 fc76 	bl	8004db0 <HAL_GetTick>
 80044c4:	0003      	movs	r3, r0
 80044c6:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 80044c8:	4b1c      	ldr	r3, [pc, #112]	@ (800453c <TimestampIsReached+0x84>)
 80044ca:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d307      	bcc.n	80044e4 <TimestampIsReached+0x2c>
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d901      	bls.n	80044e4 <TimestampIsReached+0x2c>
 80044e0:	2201      	movs	r2, #1
 80044e2:	e000      	b.n	80044e6 <TimestampIsReached+0x2e>
 80044e4:	2200      	movs	r2, #0
 80044e6:	230f      	movs	r3, #15
 80044e8:	18fb      	adds	r3, r7, r3
 80044ea:	701a      	strb	r2, [r3, #0]
 80044ec:	781a      	ldrb	r2, [r3, #0]
 80044ee:	2101      	movs	r1, #1
 80044f0:	400a      	ands	r2, r1
 80044f2:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d207      	bcs.n	800450c <TimestampIsReached+0x54>
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	429a      	cmp	r2, r3
 8004506:	d201      	bcs.n	800450c <TimestampIsReached+0x54>
 8004508:	2201      	movs	r2, #1
 800450a:	e000      	b.n	800450e <TimestampIsReached+0x56>
 800450c:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800450e:	200e      	movs	r0, #14
 8004510:	183b      	adds	r3, r7, r0
 8004512:	701a      	strb	r2, [r3, #0]
 8004514:	781a      	ldrb	r2, [r3, #0]
 8004516:	2101      	movs	r1, #1
 8004518:	400a      	ands	r2, r1
 800451a:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800451c:	230f      	movs	r3, #15
 800451e:	18fb      	adds	r3, r7, r3
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d103      	bne.n	800452e <TimestampIsReached+0x76>
 8004526:	183b      	adds	r3, r7, r0
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8004532:	2300      	movs	r3, #0
}
 8004534:	0018      	movs	r0, r3
 8004536:	46bd      	mov	sp, r7
 8004538:	b006      	add	sp, #24
 800453a:	bd80      	pop	{r7, pc}
 800453c:	7fffffff 	.word	0x7fffffff

08004540 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8004548:	f000 fc32 	bl	8004db0 <HAL_GetTick>
 800454c:	0002      	movs	r2, r0
 800454e:	4904      	ldr	r1, [pc, #16]	@ (8004560 <AddTimestamp+0x20>)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	0018      	movs	r0, r3
 8004554:	f005 fd84 	bl	800a060 <siprintf>
}
 8004558:	46c0      	nop			@ (mov r8, r8)
 800455a:	46bd      	mov	sp, r7
 800455c:	b002      	add	sp, #8
 800455e:	bd80      	pop	{r7, pc}
 8004560:	0800c710 	.word	0x0800c710

08004564 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8004564:	b40c      	push	{r2, r3}
 8004566:	b5b0      	push	{r4, r5, r7, lr}
 8004568:	4c2b      	ldr	r4, [pc, #172]	@ (8004618 <CreateLine+0xb4>)
 800456a:	44a5      	add	sp, r4
 800456c:	af00      	add	r7, sp, #0
 800456e:	0002      	movs	r2, r0
 8004570:	6039      	str	r1, [r7, #0]
 8004572:	4b2a      	ldr	r3, [pc, #168]	@ (800461c <CreateLine+0xb8>)
 8004574:	2182      	movs	r1, #130	@ 0x82
 8004576:	00c9      	lsls	r1, r1, #3
 8004578:	185b      	adds	r3, r3, r1
 800457a:	19db      	adds	r3, r3, r7
 800457c:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800457e:	4b28      	ldr	r3, [pc, #160]	@ (8004620 <CreateLine+0xbc>)
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	4a26      	ldr	r2, [pc, #152]	@ (800461c <CreateLine+0xb8>)
 8004584:	1852      	adds	r2, r2, r1
 8004586:	19d2      	adds	r2, r2, r7
 8004588:	7812      	ldrb	r2, [r2, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d83b      	bhi.n	8004606 <CreateLine+0xa2>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	4924      	ldr	r1, [pc, #144]	@ (8004624 <CreateLine+0xc0>)
 8004592:	240c      	movs	r4, #12
 8004594:	193b      	adds	r3, r7, r4
 8004596:	0018      	movs	r0, r3
 8004598:	f005 fd62 	bl	800a060 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800459c:	4b20      	ldr	r3, [pc, #128]	@ (8004620 <CreateLine+0xbc>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d909      	bls.n	80045b8 <CreateLine+0x54>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 80045a4:	193b      	adds	r3, r7, r4
 80045a6:	0018      	movs	r0, r3
 80045a8:	f7fb fdae 	bl	8000108 <strlen>
 80045ac:	0002      	movs	r2, r0
 80045ae:	193b      	adds	r3, r7, r4
 80045b0:	189b      	adds	r3, r3, r2
 80045b2:	0018      	movs	r0, r3
 80045b4:	f7ff ffc4 	bl	8004540 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 80045b8:	240c      	movs	r4, #12
 80045ba:	193b      	adds	r3, r7, r4
 80045bc:	0018      	movs	r0, r3
 80045be:	f7fb fda3 	bl	8000108 <strlen>
 80045c2:	0003      	movs	r3, r0
 80045c4:	4918      	ldr	r1, [pc, #96]	@ (8004628 <CreateLine+0xc4>)
 80045c6:	187a      	adds	r2, r7, r1
 80045c8:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 80045ca:	4b18      	ldr	r3, [pc, #96]	@ (800462c <CreateLine+0xc8>)
 80045cc:	2508      	movs	r5, #8
 80045ce:	195b      	adds	r3, r3, r5
 80045d0:	19db      	adds	r3, r3, r7
 80045d2:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 80045d4:	193a      	adds	r2, r7, r4
 80045d6:	187b      	adds	r3, r7, r1
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	18d0      	adds	r0, r2, r3
 80045dc:	187b      	adds	r3, r7, r1
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2280      	movs	r2, #128	@ 0x80
 80045e2:	00d2      	lsls	r2, r2, #3
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	0019      	movs	r1, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2283      	movs	r2, #131	@ 0x83
 80045ec:	00d2      	lsls	r2, r2, #3
 80045ee:	1952      	adds	r2, r2, r5
 80045f0:	19d2      	adds	r2, r2, r7
 80045f2:	6812      	ldr	r2, [r2, #0]
 80045f4:	f005 fdcc 	bl	800a190 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 80045f8:	193a      	adds	r2, r7, r4
 80045fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004630 <CreateLine+0xcc>)
 80045fc:	0011      	movs	r1, r2
 80045fe:	0018      	movs	r0, r3
 8004600:	f005 fd1e 	bl	800a040 <iprintf>
 8004604:	e000      	b.n	8004608 <CreateLine+0xa4>
    return;
 8004606:	46c0      	nop			@ (mov r8, r8)
}
 8004608:	46bd      	mov	sp, r7
 800460a:	2382      	movs	r3, #130	@ 0x82
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	449d      	add	sp, r3
 8004610:	bcb0      	pop	{r4, r5, r7}
 8004612:	bc08      	pop	{r3}
 8004614:	b002      	add	sp, #8
 8004616:	4718      	bx	r3
 8004618:	fffffbf0 	.word	0xfffffbf0
 800461c:	fffffbf7 	.word	0xfffffbf7
 8004620:	2000000c 	.word	0x2000000c
 8004624:	0800c71c 	.word	0x0800c71c
 8004628:	0000040c 	.word	0x0000040c
 800462c:	0000041c 	.word	0x0000041c
 8004630:	0800c720 	.word	0x0800c720

08004634 <_write>:

int _write(int fd, const void *buf, size_t count) {
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	b29a      	uxth	r2, r3
 8004644:	68b9      	ldr	r1, [r7, #8]
 8004646:	4804      	ldr	r0, [pc, #16]	@ (8004658 <_write+0x24>)
 8004648:	2364      	movs	r3, #100	@ 0x64
 800464a:	f004 fa6b 	bl	8008b24 <HAL_UART_Transmit>
  return count;
 800464e:	687b      	ldr	r3, [r7, #4]
}
 8004650:	0018      	movs	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	b004      	add	sp, #16
 8004656:	bd80      	pop	{r7, pc}
 8004658:	20000404 	.word	0x20000404

0800465c <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	0002      	movs	r2, r0
 8004664:	1dfb      	adds	r3, r7, #7
 8004666:	701a      	strb	r2, [r3, #0]
 8004668:	4b03      	ldr	r3, [pc, #12]	@ (8004678 <SetVerboseLevel+0x1c>)
 800466a:	1dfa      	adds	r2, r7, #7
 800466c:	7812      	ldrb	r2, [r2, #0]
 800466e:	701a      	strb	r2, [r3, #0]
 8004670:	46c0      	nop			@ (mov r8, r8)
 8004672:	46bd      	mov	sp, r7
 8004674:	b002      	add	sp, #8
 8004676:	bd80      	pop	{r7, pc}
 8004678:	2000000c 	.word	0x2000000c

0800467c <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004680:	f000 fb96 	bl	8004db0 <HAL_GetTick>
 8004684:	0003      	movs	r3, r0
}
 8004686:	0018      	movs	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 8004692:	4a0f      	ldr	r2, [pc, #60]	@ (80046d0 <BinaryReleaseInfo+0x44>)
 8004694:	4b0f      	ldr	r3, [pc, #60]	@ (80046d4 <BinaryReleaseInfo+0x48>)
 8004696:	0019      	movs	r1, r3
 8004698:	2002      	movs	r0, #2
 800469a:	f7ff ff63 	bl	8004564 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800469e:	480e      	ldr	r0, [pc, #56]	@ (80046d8 <BinaryReleaseInfo+0x4c>)
 80046a0:	4a0e      	ldr	r2, [pc, #56]	@ (80046dc <BinaryReleaseInfo+0x50>)
 80046a2:	490c      	ldr	r1, [pc, #48]	@ (80046d4 <BinaryReleaseInfo+0x48>)
 80046a4:	4b0e      	ldr	r3, [pc, #56]	@ (80046e0 <BinaryReleaseInfo+0x54>)
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	0003      	movs	r3, r0
 80046aa:	2002      	movs	r0, #2
 80046ac:	f7ff ff5a 	bl	8004564 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w28a");
 80046b0:	4a0c      	ldr	r2, [pc, #48]	@ (80046e4 <BinaryReleaseInfo+0x58>)
 80046b2:	4b08      	ldr	r3, [pc, #32]	@ (80046d4 <BinaryReleaseInfo+0x48>)
 80046b4:	0019      	movs	r1, r3
 80046b6:	2002      	movs	r0, #2
 80046b8:	f7ff ff54 	bl	8004564 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 80046bc:	4b0a      	ldr	r3, [pc, #40]	@ (80046e8 <BinaryReleaseInfo+0x5c>)
 80046be:	4a0b      	ldr	r2, [pc, #44]	@ (80046ec <BinaryReleaseInfo+0x60>)
 80046c0:	4904      	ldr	r1, [pc, #16]	@ (80046d4 <BinaryReleaseInfo+0x48>)
 80046c2:	2002      	movs	r0, #2
 80046c4:	f7ff ff4e 	bl	8004564 <CreateLine>
}
 80046c8:	46c0      	nop			@ (mov r8, r8)
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	46c0      	nop			@ (mov r8, r8)
 80046d0:	0800c728 	.word	0x0800c728
 80046d4:	0800c754 	.word	0x0800c754
 80046d8:	0800c758 	.word	0x0800c758
 80046dc:	0800c764 	.word	0x0800c764
 80046e0:	0800c778 	.word	0x0800c778
 80046e4:	0800c784 	.word	0x0800c784
 80046e8:	0800c790 	.word	0x0800c790
 80046ec:	0800c798 	.word	0x0800c798

080046f0 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static void ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80046f0:	b590      	push	{r4, r7, lr}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6039      	str	r1, [r7, #0]
 80046f8:	0011      	movs	r1, r2
 80046fa:	1dfb      	adds	r3, r7, #7
 80046fc:	1c02      	adds	r2, r0, #0
 80046fe:	701a      	strb	r2, [r3, #0]
 8004700:	1dbb      	adds	r3, r7, #6
 8004702:	1c0a      	adds	r2, r1, #0
 8004704:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8004706:	4b08      	ldr	r3, [pc, #32]	@ (8004728 <ReadRegister+0x38>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d008      	beq.n	8004720 <ReadRegister+0x30>
		ReadFunction(address, buffer, nrBytes);
 800470e:	4b06      	ldr	r3, [pc, #24]	@ (8004728 <ReadRegister+0x38>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	1dba      	adds	r2, r7, #6
 8004714:	7814      	ldrb	r4, [r2, #0]
 8004716:	6839      	ldr	r1, [r7, #0]
 8004718:	1dfa      	adds	r2, r7, #7
 800471a:	7810      	ldrb	r0, [r2, #0]
 800471c:	0022      	movs	r2, r4
 800471e:	4798      	blx	r3
	}
}
 8004720:	46c0      	nop			@ (mov r8, r8)
 8004722:	46bd      	mov	sp, r7
 8004724:	b003      	add	sp, #12
 8004726:	bd90      	pop	{r4, r7, pc}
 8004728:	20000514 	.word	0x20000514

0800472c <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800472c:	b590      	push	{r4, r7, lr}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6039      	str	r1, [r7, #0]
 8004734:	0011      	movs	r1, r2
 8004736:	1dfb      	adds	r3, r7, #7
 8004738:	1c02      	adds	r2, r0, #0
 800473a:	701a      	strb	r2, [r3, #0]
 800473c:	1dbb      	adds	r3, r7, #6
 800473e:	1c0a      	adds	r2, r1, #0
 8004740:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8004742:	4b08      	ldr	r3, [pc, #32]	@ (8004764 <WriteRegister+0x38>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d008      	beq.n	800475c <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800474a:	4b06      	ldr	r3, [pc, #24]	@ (8004764 <WriteRegister+0x38>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	1dba      	adds	r2, r7, #6
 8004750:	7814      	ldrb	r4, [r2, #0]
 8004752:	6839      	ldr	r1, [r7, #0]
 8004754:	1dfa      	adds	r2, r7, #7
 8004756:	7810      	ldrb	r0, [r2, #0]
 8004758:	0022      	movs	r2, r4
 800475a:	4798      	blx	r3
  }
}
 800475c:	46c0      	nop			@ (mov r8, r8)
 800475e:	46bd      	mov	sp, r7
 8004760:	b003      	add	sp, #12
 8004762:	bd90      	pop	{r4, r7, pc}
 8004764:	20000518 	.word	0x20000518

08004768 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	000a      	movs	r2, r1
 8004772:	1cfb      	adds	r3, r7, #3
 8004774:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 8004776:	230f      	movs	r3, #15
 8004778:	18fb      	adds	r3, r7, r3
 800477a:	22ff      	movs	r2, #255	@ 0xff
 800477c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800477e:	230e      	movs	r3, #14
 8004780:	18fb      	adds	r3, r7, r3
 8004782:	2200      	movs	r2, #0
 8004784:	701a      	strb	r2, [r3, #0]
 8004786:	e037      	b.n	80047f8 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8004788:	230e      	movs	r3, #14
 800478a:	18fb      	adds	r3, r7, r3
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	18d3      	adds	r3, r2, r3
 8004792:	7819      	ldrb	r1, [r3, #0]
 8004794:	220f      	movs	r2, #15
 8004796:	18bb      	adds	r3, r7, r2
 8004798:	18ba      	adds	r2, r7, r2
 800479a:	7812      	ldrb	r2, [r2, #0]
 800479c:	404a      	eors	r2, r1
 800479e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 80047a0:	230d      	movs	r3, #13
 80047a2:	18fb      	adds	r3, r7, r3
 80047a4:	2200      	movs	r2, #0
 80047a6:	701a      	strb	r2, [r3, #0]
 80047a8:	e01b      	b.n	80047e2 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 80047aa:	210f      	movs	r1, #15
 80047ac:	187b      	adds	r3, r7, r1
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	b25b      	sxtb	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	da09      	bge.n	80047ca <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 80047b6:	187b      	adds	r3, r7, r1
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	b25b      	sxtb	r3, r3
 80047be:	2231      	movs	r2, #49	@ 0x31
 80047c0:	4053      	eors	r3, r2
 80047c2:	b25a      	sxtb	r2, r3
 80047c4:	187b      	adds	r3, r7, r1
 80047c6:	701a      	strb	r2, [r3, #0]
 80047c8:	e005      	b.n	80047d6 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 80047ca:	230f      	movs	r3, #15
 80047cc:	18fa      	adds	r2, r7, r3
 80047ce:	18fb      	adds	r3, r7, r3
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	18db      	adds	r3, r3, r3
 80047d4:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80047d6:	210d      	movs	r1, #13
 80047d8:	187b      	adds	r3, r7, r1
 80047da:	781a      	ldrb	r2, [r3, #0]
 80047dc:	187b      	adds	r3, r7, r1
 80047de:	3201      	adds	r2, #1
 80047e0:	701a      	strb	r2, [r3, #0]
 80047e2:	230d      	movs	r3, #13
 80047e4:	18fb      	adds	r3, r7, r3
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b07      	cmp	r3, #7
 80047ea:	d9de      	bls.n	80047aa <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80047ec:	210e      	movs	r1, #14
 80047ee:	187b      	adds	r3, r7, r1
 80047f0:	781a      	ldrb	r2, [r3, #0]
 80047f2:	187b      	adds	r3, r7, r1
 80047f4:	3201      	adds	r2, #1
 80047f6:	701a      	strb	r2, [r3, #0]
 80047f8:	230e      	movs	r3, #14
 80047fa:	18fa      	adds	r2, r7, r3
 80047fc:	1cfb      	adds	r3, r7, #3
 80047fe:	7812      	ldrb	r2, [r2, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	429a      	cmp	r2, r3
 8004804:	d3c0      	bcc.n	8004788 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8004806:	230f      	movs	r3, #15
 8004808:	18fb      	adds	r3, r7, r3
 800480a:	781b      	ldrb	r3, [r3, #0]
}
 800480c:	0018      	movs	r0, r3
 800480e:	46bd      	mov	sp, r7
 8004810:	b004      	add	sp, #16
 8004812:	bd80      	pop	{r7, pc}

08004814 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800481e:	4b0a      	ldr	r3, [pc, #40]	@ (8004848 <HIDS_Init+0x34>)
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8004824:	4b09      	ldr	r3, [pc, #36]	@ (800484c <HIDS_Init+0x38>)
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800482a:	4b09      	ldr	r3, [pc, #36]	@ (8004850 <HIDS_Init+0x3c>)
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	0018      	movs	r0, r3
 8004830:	f000 f8d0 	bl	80049d4 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8004834:	4b07      	ldr	r3, [pc, #28]	@ (8004854 <HIDS_Init+0x40>)
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	0018      	movs	r0, r3
 800483a:	f000 f82b 	bl	8004894 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800483e:	46c0      	nop			@ (mov r8, r8)
 8004840:	46bd      	mov	sp, r7
 8004842:	b002      	add	sp, #8
 8004844:	bd80      	pop	{r7, pc}
 8004846:	46c0      	nop			@ (mov r8, r8)
 8004848:	20000514 	.word	0x20000514
 800484c:	20000518 	.word	0x20000518
 8004850:	2000000e 	.word	0x2000000e
 8004854:	2000000d 	.word	0x2000000d

08004858 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 800485c:	f7ff ff0e 	bl	800467c <GetCurrentHalTicks>
 8004860:	0002      	movs	r2, r0
 8004862:	4b08      	ldr	r3, [pc, #32]	@ (8004884 <HIDS_StartMeasurement+0x2c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	18d2      	adds	r2, r2, r3
 8004868:	4b07      	ldr	r3, [pc, #28]	@ (8004888 <HIDS_StartMeasurement+0x30>)
 800486a:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800486c:	4b07      	ldr	r3, [pc, #28]	@ (800488c <HIDS_StartMeasurement+0x34>)
 800486e:	2201      	movs	r2, #1
 8004870:	0019      	movs	r1, r3
 8004872:	2044      	movs	r0, #68	@ 0x44
 8004874:	f7ff ff5a 	bl	800472c <WriteRegister>
  MeasurementDone = false;
 8004878:	4b05      	ldr	r3, [pc, #20]	@ (8004890 <HIDS_StartMeasurement+0x38>)
 800487a:	2200      	movs	r2, #0
 800487c:	701a      	strb	r2, [r3, #0]
}
 800487e:	46c0      	nop			@ (mov r8, r8)
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	20000014 	.word	0x20000014
 8004888:	20000010 	.word	0x20000010
 800488c:	2000000e 	.word	0x2000000e
 8004890:	2000052a 	.word	0x2000052a

08004894 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	0002      	movs	r2, r0
 800489c:	1dfb      	adds	r3, r7, #7
 800489e:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 80048a0:	4b03      	ldr	r3, [pc, #12]	@ (80048b0 <HIDS_SetHeaterMode+0x1c>)
 80048a2:	1dfa      	adds	r2, r7, #7
 80048a4:	7812      	ldrb	r2, [r2, #0]
 80048a6:	701a      	strb	r2, [r3, #0]
}
 80048a8:	46c0      	nop			@ (mov r8, r8)
 80048aa:	46bd      	mov	sp, r7
 80048ac:	b002      	add	sp, #8
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	2000000d 	.word	0x2000000d

080048b4 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 80048b4:	b590      	push	{r4, r7, lr}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	781a      	ldrb	r2, [r3, #0]
 80048c0:	210c      	movs	r1, #12
 80048c2:	187b      	adds	r3, r7, r1
 80048c4:	701a      	strb	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	785a      	ldrb	r2, [r3, #1]
 80048ca:	187b      	adds	r3, r7, r1
 80048cc:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 80048ce:	240f      	movs	r4, #15
 80048d0:	193b      	adds	r3, r7, r4
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	7892      	ldrb	r2, [r2, #2]
 80048d6:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 80048d8:	187b      	adds	r3, r7, r1
 80048da:	2102      	movs	r1, #2
 80048dc:	0018      	movs	r0, r3
 80048de:	f7ff ff43 	bl	8004768 <CalculateCRC>
 80048e2:	0003      	movs	r3, r0
 80048e4:	001a      	movs	r2, r3
 80048e6:	193b      	adds	r3, r7, r4
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d007      	beq.n	80048fe <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 80048ee:	4a17      	ldr	r2, [pc, #92]	@ (800494c <CheckCRC+0x98>)
 80048f0:	4b17      	ldr	r3, [pc, #92]	@ (8004950 <CheckCRC+0x9c>)
 80048f2:	0019      	movs	r1, r3
 80048f4:	2001      	movs	r0, #1
 80048f6:	f7ff fe35 	bl	8004564 <CreateLine>
		return false;
 80048fa:	2300      	movs	r3, #0
 80048fc:	e021      	b.n	8004942 <CheckCRC+0x8e>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	78da      	ldrb	r2, [r3, #3]
 8004902:	2108      	movs	r1, #8
 8004904:	187b      	adds	r3, r7, r1
 8004906:	701a      	strb	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	791a      	ldrb	r2, [r3, #4]
 800490c:	187b      	adds	r3, r7, r1
 800490e:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8004910:	240e      	movs	r4, #14
 8004912:	193b      	adds	r3, r7, r4
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	7952      	ldrb	r2, [r2, #5]
 8004918:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800491a:	187b      	adds	r3, r7, r1
 800491c:	2102      	movs	r1, #2
 800491e:	0018      	movs	r0, r3
 8004920:	f7ff ff22 	bl	8004768 <CalculateCRC>
 8004924:	0003      	movs	r3, r0
 8004926:	001a      	movs	r2, r3
 8004928:	193b      	adds	r3, r7, r4
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	4293      	cmp	r3, r2
 800492e:	d007      	beq.n	8004940 <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 8004930:	4a08      	ldr	r2, [pc, #32]	@ (8004954 <CheckCRC+0xa0>)
 8004932:	4b07      	ldr	r3, [pc, #28]	@ (8004950 <CheckCRC+0x9c>)
 8004934:	0019      	movs	r1, r3
 8004936:	2001      	movs	r0, #1
 8004938:	f7ff fe14 	bl	8004564 <CreateLine>
		return false;
 800493c:	2300      	movs	r3, #0
 800493e:	e000      	b.n	8004942 <CheckCRC+0x8e>
	}
	return true;
 8004940:	2301      	movs	r3, #1
}
 8004942:	0018      	movs	r0, r3
 8004944:	46bd      	mov	sp, r7
 8004946:	b005      	add	sp, #20
 8004948:	bd90      	pop	{r4, r7, pc}
 800494a:	46c0      	nop			@ (mov r8, r8)
 800494c:	0800c7d4 	.word	0x0800c7d4
 8004950:	0800c7fc 	.word	0x0800c7fc
 8004954:	0800c800 	.word	0x0800c800

08004958 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800495e:	1dbb      	adds	r3, r7, #6
 8004960:	2289      	movs	r2, #137	@ 0x89
 8004962:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8004964:	1dbb      	adds	r3, r7, #6
 8004966:	2201      	movs	r2, #1
 8004968:	0019      	movs	r1, r3
 800496a:	2044      	movs	r0, #68	@ 0x44
 800496c:	f7ff fede 	bl	800472c <WriteRegister>
	HAL_Delay(30);
 8004970:	201e      	movs	r0, #30
 8004972:	f000 fa27 	bl	8004dc4 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8004976:	4b14      	ldr	r3, [pc, #80]	@ (80049c8 <HIDS_DeviceConnected+0x70>)
 8004978:	2206      	movs	r2, #6
 800497a:	0019      	movs	r1, r3
 800497c:	2044      	movs	r0, #68	@ 0x44
 800497e:	f7ff feb7 	bl	80046f0 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8004982:	1dfb      	adds	r3, r7, #7
 8004984:	2200      	movs	r2, #0
 8004986:	701a      	strb	r2, [r3, #0]
 8004988:	e011      	b.n	80049ae <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800498a:	1dfb      	adds	r3, r7, #7
 800498c:	7818      	ldrb	r0, [r3, #0]
 800498e:	1dfb      	adds	r3, r7, #7
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	4a0d      	ldr	r2, [pc, #52]	@ (80049c8 <HIDS_DeviceConnected+0x70>)
 8004994:	5cd3      	ldrb	r3, [r2, r3]
 8004996:	4a0d      	ldr	r2, [pc, #52]	@ (80049cc <HIDS_DeviceConnected+0x74>)
 8004998:	490d      	ldr	r1, [pc, #52]	@ (80049d0 <HIDS_DeviceConnected+0x78>)
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	0003      	movs	r3, r0
 800499e:	2002      	movs	r0, #2
 80049a0:	f7ff fde0 	bl	8004564 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 80049a4:	1dfb      	adds	r3, r7, #7
 80049a6:	781a      	ldrb	r2, [r3, #0]
 80049a8:	1dfb      	adds	r3, r7, #7
 80049aa:	3201      	adds	r2, #1
 80049ac:	701a      	strb	r2, [r3, #0]
 80049ae:	1dfb      	adds	r3, r7, #7
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	2b05      	cmp	r3, #5
 80049b4:	d9e9      	bls.n	800498a <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 80049b6:	4b04      	ldr	r3, [pc, #16]	@ (80049c8 <HIDS_DeviceConnected+0x70>)
 80049b8:	0018      	movs	r0, r3
 80049ba:	f7ff ff7b 	bl	80048b4 <CheckCRC>
 80049be:	0003      	movs	r3, r0
}
 80049c0:	0018      	movs	r0, r3
 80049c2:	46bd      	mov	sp, r7
 80049c4:	b002      	add	sp, #8
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	2000051c 	.word	0x2000051c
 80049cc:	0800c82c 	.word	0x0800c82c
 80049d0:	0800c7d0 	.word	0x0800c7d0

080049d4 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	0002      	movs	r2, r0
 80049dc:	1dfb      	adds	r3, r7, #7
 80049de:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 80049e0:	4b03      	ldr	r3, [pc, #12]	@ (80049f0 <HIDS_SetMeasurementMode+0x1c>)
 80049e2:	1dfa      	adds	r2, r7, #7
 80049e4:	7812      	ldrb	r2, [r2, #0]
 80049e6:	701a      	strb	r2, [r3, #0]
}
 80049e8:	46c0      	nop			@ (mov r8, r8)
 80049ea:	46bd      	mov	sp, r7
 80049ec:	b002      	add	sp, #8
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	2000000e 	.word	0x2000000e

080049f4 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  if(!TimestampIsReached(HIDS_NextRunTime)) {
 80049f8:	4b08      	ldr	r3, [pc, #32]	@ (8004a1c <HIDS_MeasurementReady+0x28>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	0018      	movs	r0, r3
 80049fe:	f7ff fd5b 	bl	80044b8 <TimestampIsReached>
 8004a02:	0003      	movs	r3, r0
 8004a04:	001a      	movs	r2, r3
 8004a06:	2301      	movs	r3, #1
 8004a08:	4053      	eors	r3, r2
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <HIDS_MeasurementReady+0x20>
    return false;
 8004a10:	2300      	movs	r3, #0
 8004a12:	e000      	b.n	8004a16 <HIDS_MeasurementReady+0x22>
  }
  return true;
 8004a14:	2301      	movs	r3, #1
}
 8004a16:	0018      	movs	r0, r3
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	20000010 	.word	0x20000010

08004a20 <HIDS_GetMeasurementValues>:
void HIDS_SoftReset(void){
  uint8_t resetReg = HIDS_SOFT_RESET_REG;
  WriteRegister(HIDS_I2C_ADDRESS, &resetReg, 1);
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8004a20:	b590      	push	{r4, r7, lr}
 8004a22:	b08d      	sub	sp, #52	@ 0x34
 8004a24:	af02      	add	r7, sp, #8
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 8004a2a:	4b87      	ldr	r3, [pc, #540]	@ (8004c48 <HIDS_GetMeasurementValues+0x228>)
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <HIDS_GetMeasurementValues+0x16>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e103      	b.n	8004c3e <HIDS_GetMeasurementValues+0x21e>
  if(!HIDS_MeasurementReady()) return false;
 8004a36:	f7ff ffdd 	bl	80049f4 <HIDS_MeasurementReady>
 8004a3a:	0003      	movs	r3, r0
 8004a3c:	001a      	movs	r2, r3
 8004a3e:	2301      	movs	r3, #1
 8004a40:	4053      	eors	r3, r2
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <HIDS_GetMeasurementValues+0x2c>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	e0f8      	b.n	8004c3e <HIDS_GetMeasurementValues+0x21e>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 8004a4c:	4b7f      	ldr	r3, [pc, #508]	@ (8004c4c <HIDS_GetMeasurementValues+0x22c>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	4b7f      	ldr	r3, [pc, #508]	@ (8004c50 <HIDS_GetMeasurementValues+0x230>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	0019      	movs	r1, r3
 8004a56:	0010      	movs	r0, r2
 8004a58:	f7fb fb72 	bl	8000140 <__udivsi3>
 8004a5c:	0003      	movs	r3, r0
 8004a5e:	617b      	str	r3, [r7, #20]
  float currentTemperature;
  float currentHumidity;
  static float temperatures[HIDS_MAX_MEASUREMENTS];
  static float humidities[HIDS_MAX_MEASUREMENTS];

  Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
 8004a60:	4b7c      	ldr	r3, [pc, #496]	@ (8004c54 <HIDS_GetMeasurementValues+0x234>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	1c58      	adds	r0, r3, #1
 8004a66:	4a7c      	ldr	r2, [pc, #496]	@ (8004c58 <HIDS_GetMeasurementValues+0x238>)
 8004a68:	497c      	ldr	r1, [pc, #496]	@ (8004c5c <HIDS_GetMeasurementValues+0x23c>)
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	0003      	movs	r3, r0
 8004a70:	2003      	movs	r0, #3
 8004a72:	f7ff fd77 	bl	8004564 <CreateLine>
//  Info("=-=-=-=New values incoming.=-=-=-=");
  ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 8004a76:	4b7a      	ldr	r3, [pc, #488]	@ (8004c60 <HIDS_GetMeasurementValues+0x240>)
 8004a78:	2206      	movs	r2, #6
 8004a7a:	0019      	movs	r1, r3
 8004a7c:	2044      	movs	r0, #68	@ 0x44
 8004a7e:	f7ff fe37 	bl	80046f0 <ReadRegister>
	if(!CheckCRC(MeasureBuffer)) {
 8004a82:	4b77      	ldr	r3, [pc, #476]	@ (8004c60 <HIDS_GetMeasurementValues+0x240>)
 8004a84:	0018      	movs	r0, r3
 8004a86:	f7ff ff15 	bl	80048b4 <CheckCRC>
 8004a8a:	0003      	movs	r3, r0
 8004a8c:	001a      	movs	r2, r3
 8004a8e:	2301      	movs	r3, #1
 8004a90:	4053      	eors	r3, r2
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d02a      	beq.n	8004aee <HIDS_GetMeasurementValues+0xce>
		Error("HIDS measurements CRC check failed.");
 8004a98:	4a72      	ldr	r2, [pc, #456]	@ (8004c64 <HIDS_GetMeasurementValues+0x244>)
 8004a9a:	4b73      	ldr	r3, [pc, #460]	@ (8004c68 <HIDS_GetMeasurementValues+0x248>)
 8004a9c:	0019      	movs	r1, r3
 8004a9e:	2001      	movs	r0, #1
 8004aa0:	f7ff fd60 	bl	8004564 <CreateLine>
		Info("Measure buffer structure:");
 8004aa4:	4a71      	ldr	r2, [pc, #452]	@ (8004c6c <HIDS_GetMeasurementValues+0x24c>)
 8004aa6:	4b72      	ldr	r3, [pc, #456]	@ (8004c70 <HIDS_GetMeasurementValues+0x250>)
 8004aa8:	0019      	movs	r1, r3
 8004aaa:	2002      	movs	r0, #2
 8004aac:	f7ff fd5a 	bl	8004564 <CreateLine>
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 8004ab0:	2327      	movs	r3, #39	@ 0x27
 8004ab2:	18fb      	adds	r3, r7, r3
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	701a      	strb	r2, [r3, #0]
 8004ab8:	e012      	b.n	8004ae0 <HIDS_GetMeasurementValues+0xc0>
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
 8004aba:	2427      	movs	r4, #39	@ 0x27
 8004abc:	193b      	adds	r3, r7, r4
 8004abe:	7818      	ldrb	r0, [r3, #0]
 8004ac0:	193b      	adds	r3, r7, r4
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	4a66      	ldr	r2, [pc, #408]	@ (8004c60 <HIDS_GetMeasurementValues+0x240>)
 8004ac6:	5cd3      	ldrb	r3, [r2, r3]
 8004ac8:	4a6a      	ldr	r2, [pc, #424]	@ (8004c74 <HIDS_GetMeasurementValues+0x254>)
 8004aca:	4964      	ldr	r1, [pc, #400]	@ (8004c5c <HIDS_GetMeasurementValues+0x23c>)
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	0003      	movs	r3, r0
 8004ad0:	2003      	movs	r0, #3
 8004ad2:	f7ff fd47 	bl	8004564 <CreateLine>
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 8004ad6:	193b      	adds	r3, r7, r4
 8004ad8:	781a      	ldrb	r2, [r3, #0]
 8004ada:	193b      	adds	r3, r7, r4
 8004adc:	3201      	adds	r2, #1
 8004ade:	701a      	strb	r2, [r3, #0]
 8004ae0:	2327      	movs	r3, #39	@ 0x27
 8004ae2:	18fb      	adds	r3, r7, r3
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	2b05      	cmp	r3, #5
 8004ae8:	d9e7      	bls.n	8004aba <HIDS_GetMeasurementValues+0x9a>
		}
		return false;
 8004aea:	2300      	movs	r3, #0
 8004aec:	e0a7      	b.n	8004c3e <HIDS_GetMeasurementValues+0x21e>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * (MeasureBuffer[0] << 8) | MeasureBuffer[1])) / HIDS_POW_2_16_MINUS_1);
 8004aee:	4b5c      	ldr	r3, [pc, #368]	@ (8004c60 <HIDS_GetMeasurementValues+0x240>)
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	021b      	lsls	r3, r3, #8
 8004af4:	22af      	movs	r2, #175	@ 0xaf
 8004af6:	4353      	muls	r3, r2
 8004af8:	4a59      	ldr	r2, [pc, #356]	@ (8004c60 <HIDS_GetMeasurementValues+0x240>)
 8004afa:	7852      	ldrb	r2, [r2, #1]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	0018      	movs	r0, r3
 8004b00:	f7fe f8e6 	bl	8002cd0 <__aeabi_i2d>
 8004b04:	2200      	movs	r2, #0
 8004b06:	4b5c      	ldr	r3, [pc, #368]	@ (8004c78 <HIDS_GetMeasurementValues+0x258>)
 8004b08:	f7fc fddc 	bl	80016c4 <__aeabi_ddiv>
 8004b0c:	0002      	movs	r2, r0
 8004b0e:	000b      	movs	r3, r1
 8004b10:	0010      	movs	r0, r2
 8004b12:	0019      	movs	r1, r3
 8004b14:	f7fe f976 	bl	8002e04 <__aeabi_d2f>
 8004b18:	1c03      	adds	r3, r0, #0
 8004b1a:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 8004b1c:	4957      	ldr	r1, [pc, #348]	@ (8004c7c <HIDS_GetMeasurementValues+0x25c>)
 8004b1e:	6938      	ldr	r0, [r7, #16]
 8004b20:	f7fc f886 	bl	8000c30 <__aeabi_fsub>
 8004b24:	1c03      	adds	r3, r0, #0
 8004b26:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8004b28:	4b4d      	ldr	r3, [pc, #308]	@ (8004c60 <HIDS_GetMeasurementValues+0x240>)
 8004b2a:	78db      	ldrb	r3, [r3, #3]
 8004b2c:	021b      	lsls	r3, r3, #8
 8004b2e:	4a4c      	ldr	r2, [pc, #304]	@ (8004c60 <HIDS_GetMeasurementValues+0x240>)
 8004b30:	7912      	ldrb	r2, [r2, #4]
 8004b32:	431a      	orrs	r2, r3
 8004b34:	0013      	movs	r3, r2
 8004b36:	015b      	lsls	r3, r3, #5
 8004b38:	1a9b      	subs	r3, r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	189b      	adds	r3, r3, r2
 8004b3e:	0018      	movs	r0, r3
 8004b40:	f7fe f8c6 	bl	8002cd0 <__aeabi_i2d>
 8004b44:	2200      	movs	r2, #0
 8004b46:	4b4c      	ldr	r3, [pc, #304]	@ (8004c78 <HIDS_GetMeasurementValues+0x258>)
 8004b48:	f7fc fdbc 	bl	80016c4 <__aeabi_ddiv>
 8004b4c:	0002      	movs	r2, r0
 8004b4e:	000b      	movs	r3, r1
 8004b50:	0010      	movs	r0, r2
 8004b52:	0019      	movs	r1, r3
 8004b54:	f7fe f956 	bl	8002e04 <__aeabi_d2f>
 8004b58:	1c03      	adds	r3, r0, #0
 8004b5a:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 8004b5c:	4948      	ldr	r1, [pc, #288]	@ (8004c80 <HIDS_GetMeasurementValues+0x260>)
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f7fc f866 	bl	8000c30 <__aeabi_fsub>
 8004b64:	1c03      	adds	r3, r0, #0
 8004b66:	60fb      	str	r3, [r7, #12]

	if(measurements < amountOfMeasurements) {
 8004b68:	4b3a      	ldr	r3, [pc, #232]	@ (8004c54 <HIDS_GetMeasurementValues+0x234>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d910      	bls.n	8004b94 <HIDS_GetMeasurementValues+0x174>
	  temperatures[measurements] = currentTemperature;
 8004b72:	4b38      	ldr	r3, [pc, #224]	@ (8004c54 <HIDS_GetMeasurementValues+0x234>)
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	4b43      	ldr	r3, [pc, #268]	@ (8004c84 <HIDS_GetMeasurementValues+0x264>)
 8004b78:	0092      	lsls	r2, r2, #2
 8004b7a:	6939      	ldr	r1, [r7, #16]
 8004b7c:	50d1      	str	r1, [r2, r3]
	  humidities[measurements] = currentHumidity;
 8004b7e:	4b35      	ldr	r3, [pc, #212]	@ (8004c54 <HIDS_GetMeasurementValues+0x234>)
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	4b41      	ldr	r3, [pc, #260]	@ (8004c88 <HIDS_GetMeasurementValues+0x268>)
 8004b84:	0092      	lsls	r2, r2, #2
 8004b86:	68f9      	ldr	r1, [r7, #12]
 8004b88:	50d1      	str	r1, [r2, r3]
	  measurements++;
 8004b8a:	4b32      	ldr	r3, [pc, #200]	@ (8004c54 <HIDS_GetMeasurementValues+0x234>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	4b30      	ldr	r3, [pc, #192]	@ (8004c54 <HIDS_GetMeasurementValues+0x234>)
 8004b92:	601a      	str	r2, [r3, #0]
	}

	if (measurements >= amountOfMeasurements) {
 8004b94:	4b2f      	ldr	r3, [pc, #188]	@ (8004c54 <HIDS_GetMeasurementValues+0x234>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d84c      	bhi.n	8004c38 <HIDS_GetMeasurementValues+0x218>
	  // Measurements done, calculating average and returning it.
    float sumTemperature = 0.0;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	623b      	str	r3, [r7, #32]
    float sumHumidity = 0.0;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61bb      	str	r3, [r7, #24]
 8004baa:	e016      	b.n	8004bda <HIDS_GetMeasurementValues+0x1ba>
        sumTemperature += temperatures[i];
 8004bac:	4b35      	ldr	r3, [pc, #212]	@ (8004c84 <HIDS_GetMeasurementValues+0x264>)
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	0092      	lsls	r2, r2, #2
 8004bb2:	58d3      	ldr	r3, [r2, r3]
 8004bb4:	1c19      	adds	r1, r3, #0
 8004bb6:	6a38      	ldr	r0, [r7, #32]
 8004bb8:	f7fb fd90 	bl	80006dc <__aeabi_fadd>
 8004bbc:	1c03      	adds	r3, r0, #0
 8004bbe:	623b      	str	r3, [r7, #32]
        sumHumidity += humidities[i];
 8004bc0:	4b31      	ldr	r3, [pc, #196]	@ (8004c88 <HIDS_GetMeasurementValues+0x268>)
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	0092      	lsls	r2, r2, #2
 8004bc6:	58d3      	ldr	r3, [r2, r3]
 8004bc8:	1c19      	adds	r1, r3, #0
 8004bca:	69f8      	ldr	r0, [r7, #28]
 8004bcc:	f7fb fd86 	bl	80006dc <__aeabi_fadd>
 8004bd0:	1c03      	adds	r3, r0, #0
 8004bd2:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	61bb      	str	r3, [r7, #24]
 8004bda:	4b1e      	ldr	r3, [pc, #120]	@ (8004c54 <HIDS_GetMeasurementValues+0x234>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d3e3      	bcc.n	8004bac <HIDS_GetMeasurementValues+0x18c>
    }

    *temperature = sumTemperature / measurements;
 8004be4:	4b1b      	ldr	r3, [pc, #108]	@ (8004c54 <HIDS_GetMeasurementValues+0x234>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	0018      	movs	r0, r3
 8004bea:	f7fc f9c5 	bl	8000f78 <__aeabi_ui2f>
 8004bee:	1c03      	adds	r3, r0, #0
 8004bf0:	1c19      	adds	r1, r3, #0
 8004bf2:	6a38      	ldr	r0, [r7, #32]
 8004bf4:	f7fb fefc 	bl	80009f0 <__aeabi_fdiv>
 8004bf8:	1c03      	adds	r3, r0, #0
 8004bfa:	1c1a      	adds	r2, r3, #0
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	601a      	str	r2, [r3, #0]
    *humidity = sumHumidity / measurements;
 8004c00:	4b14      	ldr	r3, [pc, #80]	@ (8004c54 <HIDS_GetMeasurementValues+0x234>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	0018      	movs	r0, r3
 8004c06:	f7fc f9b7 	bl	8000f78 <__aeabi_ui2f>
 8004c0a:	1c03      	adds	r3, r0, #0
 8004c0c:	1c19      	adds	r1, r3, #0
 8004c0e:	69f8      	ldr	r0, [r7, #28]
 8004c10:	f7fb feee 	bl	80009f0 <__aeabi_fdiv>
 8004c14:	1c03      	adds	r3, r0, #0
 8004c16:	1c1a      	adds	r2, r3, #0
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	601a      	str	r2, [r3, #0]

    measurements = 0;
 8004c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8004c54 <HIDS_GetMeasurementValues+0x234>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	601a      	str	r2, [r3, #0]
    MeasurementDone = true;
 8004c22:	4b09      	ldr	r3, [pc, #36]	@ (8004c48 <HIDS_GetMeasurementValues+0x228>)
 8004c24:	2201      	movs	r2, #1
 8004c26:	701a      	strb	r2, [r3, #0]
    Debug("HIDS measurement is done.");
 8004c28:	4a18      	ldr	r2, [pc, #96]	@ (8004c8c <HIDS_GetMeasurementValues+0x26c>)
 8004c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004c5c <HIDS_GetMeasurementValues+0x23c>)
 8004c2c:	0019      	movs	r1, r3
 8004c2e:	2003      	movs	r0, #3
 8004c30:	f7ff fc98 	bl	8004564 <CreateLine>
    return true;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e002      	b.n	8004c3e <HIDS_GetMeasurementValues+0x21e>
	}
	// Starting another measurement, still not done with all measurements.
	HIDS_StartMeasurement();
 8004c38:	f7ff fe0e 	bl	8004858 <HIDS_StartMeasurement>
	return false;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	0018      	movs	r0, r3
 8004c40:	46bd      	mov	sp, r7
 8004c42:	b00b      	add	sp, #44	@ 0x2c
 8004c44:	bd90      	pop	{r4, r7, pc}
 8004c46:	46c0      	nop			@ (mov r8, r8)
 8004c48:	2000052a 	.word	0x2000052a
 8004c4c:	20000018 	.word	0x20000018
 8004c50:	20000014 	.word	0x20000014
 8004c54:	2000052c 	.word	0x2000052c
 8004c58:	0800c84c 	.word	0x0800c84c
 8004c5c:	0800c878 	.word	0x0800c878
 8004c60:	20000524 	.word	0x20000524
 8004c64:	0800c87c 	.word	0x0800c87c
 8004c68:	0800c7fc 	.word	0x0800c7fc
 8004c6c:	0800c8a0 	.word	0x0800c8a0
 8004c70:	0800c7d0 	.word	0x0800c7d0
 8004c74:	0800c8bc 	.word	0x0800c8bc
 8004c78:	40efffe0 	.word	0x40efffe0
 8004c7c:	42340000 	.word	0x42340000
 8004c80:	40c00000 	.word	0x40c00000
 8004c84:	20000530 	.word	0x20000530
 8004c88:	20000930 	.word	0x20000930
 8004c8c:	0800c8dc 	.word	0x0800c8dc

08004c90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004c90:	480d      	ldr	r0, [pc, #52]	@ (8004cc8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004c92:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004c94:	f7ff fb0e 	bl	80042b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c98:	480c      	ldr	r0, [pc, #48]	@ (8004ccc <LoopForever+0x6>)
  ldr r1, =_edata
 8004c9a:	490d      	ldr	r1, [pc, #52]	@ (8004cd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8004cd4 <LoopForever+0xe>)
  movs r3, #0
 8004c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ca0:	e002      	b.n	8004ca8 <LoopCopyDataInit>

08004ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ca6:	3304      	adds	r3, #4

08004ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004cac:	d3f9      	bcc.n	8004ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cae:	4a0a      	ldr	r2, [pc, #40]	@ (8004cd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004cb0:	4c0a      	ldr	r4, [pc, #40]	@ (8004cdc <LoopForever+0x16>)
  movs r3, #0
 8004cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cb4:	e001      	b.n	8004cba <LoopFillZerobss>

08004cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cb8:	3204      	adds	r2, #4

08004cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004cbc:	d3fb      	bcc.n	8004cb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004cbe:	f005 fad3 	bl	800a268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004cc2:	f7fe fce5 	bl	8003690 <main>

08004cc6 <LoopForever>:

LoopForever:
    b LoopForever
 8004cc6:	e7fe      	b.n	8004cc6 <LoopForever>
   ldr   r0, =_estack
 8004cc8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004cd0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8004cd4:	0800cdb8 	.word	0x0800cdb8
  ldr r2, =_sbss
 8004cd8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8004cdc:	20000e80 	.word	0x20000e80

08004ce0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ce0:	e7fe      	b.n	8004ce0 <ADC1_COMP_IRQHandler>
	...

08004ce4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004cea:	1dfb      	adds	r3, r7, #7
 8004cec:	2200      	movs	r2, #0
 8004cee:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8004d20 <HAL_Init+0x3c>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8004d20 <HAL_Init+0x3c>)
 8004cf6:	2140      	movs	r1, #64	@ 0x40
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004cfc:	2003      	movs	r0, #3
 8004cfe:	f000 f811 	bl	8004d24 <HAL_InitTick>
 8004d02:	1e03      	subs	r3, r0, #0
 8004d04:	d003      	beq.n	8004d0e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004d06:	1dfb      	adds	r3, r7, #7
 8004d08:	2201      	movs	r2, #1
 8004d0a:	701a      	strb	r2, [r3, #0]
 8004d0c:	e001      	b.n	8004d12 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004d0e:	f7ff f9cb 	bl	80040a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004d12:	1dfb      	adds	r3, r7, #7
 8004d14:	781b      	ldrb	r3, [r3, #0]
}
 8004d16:	0018      	movs	r0, r3
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	b002      	add	sp, #8
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	46c0      	nop			@ (mov r8, r8)
 8004d20:	40022000 	.word	0x40022000

08004d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d24:	b590      	push	{r4, r7, lr}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d2c:	4b14      	ldr	r3, [pc, #80]	@ (8004d80 <HAL_InitTick+0x5c>)
 8004d2e:	681c      	ldr	r4, [r3, #0]
 8004d30:	4b14      	ldr	r3, [pc, #80]	@ (8004d84 <HAL_InitTick+0x60>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	0019      	movs	r1, r3
 8004d36:	23fa      	movs	r3, #250	@ 0xfa
 8004d38:	0098      	lsls	r0, r3, #2
 8004d3a:	f7fb fa01 	bl	8000140 <__udivsi3>
 8004d3e:	0003      	movs	r3, r0
 8004d40:	0019      	movs	r1, r3
 8004d42:	0020      	movs	r0, r4
 8004d44:	f7fb f9fc 	bl	8000140 <__udivsi3>
 8004d48:	0003      	movs	r3, r0
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	f000 f92f 	bl	8004fae <HAL_SYSTICK_Config>
 8004d50:	1e03      	subs	r3, r0, #0
 8004d52:	d001      	beq.n	8004d58 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e00f      	b.n	8004d78 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b03      	cmp	r3, #3
 8004d5c:	d80b      	bhi.n	8004d76 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d5e:	6879      	ldr	r1, [r7, #4]
 8004d60:	2301      	movs	r3, #1
 8004d62:	425b      	negs	r3, r3
 8004d64:	2200      	movs	r2, #0
 8004d66:	0018      	movs	r0, r3
 8004d68:	f000 f8fc 	bl	8004f64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d6c:	4b06      	ldr	r3, [pc, #24]	@ (8004d88 <HAL_InitTick+0x64>)
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	e000      	b.n	8004d78 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
}
 8004d78:	0018      	movs	r0, r3
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	b003      	add	sp, #12
 8004d7e:	bd90      	pop	{r4, r7, pc}
 8004d80:	20000008 	.word	0x20000008
 8004d84:	20000020 	.word	0x20000020
 8004d88:	2000001c 	.word	0x2000001c

08004d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d90:	4b05      	ldr	r3, [pc, #20]	@ (8004da8 <HAL_IncTick+0x1c>)
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	001a      	movs	r2, r3
 8004d96:	4b05      	ldr	r3, [pc, #20]	@ (8004dac <HAL_IncTick+0x20>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	18d2      	adds	r2, r2, r3
 8004d9c:	4b03      	ldr	r3, [pc, #12]	@ (8004dac <HAL_IncTick+0x20>)
 8004d9e:	601a      	str	r2, [r3, #0]
}
 8004da0:	46c0      	nop			@ (mov r8, r8)
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	46c0      	nop			@ (mov r8, r8)
 8004da8:	20000020 	.word	0x20000020
 8004dac:	20000d30 	.word	0x20000d30

08004db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  return uwTick;
 8004db4:	4b02      	ldr	r3, [pc, #8]	@ (8004dc0 <HAL_GetTick+0x10>)
 8004db6:	681b      	ldr	r3, [r3, #0]
}
 8004db8:	0018      	movs	r0, r3
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	46c0      	nop			@ (mov r8, r8)
 8004dc0:	20000d30 	.word	0x20000d30

08004dc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004dcc:	f7ff fff0 	bl	8004db0 <HAL_GetTick>
 8004dd0:	0003      	movs	r3, r0
 8004dd2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	d005      	beq.n	8004dea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004dde:	4b0a      	ldr	r3, [pc, #40]	@ (8004e08 <HAL_Delay+0x44>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	001a      	movs	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	189b      	adds	r3, r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004dea:	46c0      	nop			@ (mov r8, r8)
 8004dec:	f7ff ffe0 	bl	8004db0 <HAL_GetTick>
 8004df0:	0002      	movs	r2, r0
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d8f7      	bhi.n	8004dec <HAL_Delay+0x28>
  {
  }
}
 8004dfc:	46c0      	nop			@ (mov r8, r8)
 8004dfe:	46c0      	nop			@ (mov r8, r8)
 8004e00:	46bd      	mov	sp, r7
 8004e02:	b004      	add	sp, #16
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	46c0      	nop			@ (mov r8, r8)
 8004e08:	20000020 	.word	0x20000020

08004e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b082      	sub	sp, #8
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	0002      	movs	r2, r0
 8004e14:	1dfb      	adds	r3, r7, #7
 8004e16:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004e18:	1dfb      	adds	r3, r7, #7
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e1e:	d809      	bhi.n	8004e34 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e20:	1dfb      	adds	r3, r7, #7
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	001a      	movs	r2, r3
 8004e26:	231f      	movs	r3, #31
 8004e28:	401a      	ands	r2, r3
 8004e2a:	4b04      	ldr	r3, [pc, #16]	@ (8004e3c <__NVIC_EnableIRQ+0x30>)
 8004e2c:	2101      	movs	r1, #1
 8004e2e:	4091      	lsls	r1, r2
 8004e30:	000a      	movs	r2, r1
 8004e32:	601a      	str	r2, [r3, #0]
  }
}
 8004e34:	46c0      	nop			@ (mov r8, r8)
 8004e36:	46bd      	mov	sp, r7
 8004e38:	b002      	add	sp, #8
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	e000e100 	.word	0xe000e100

08004e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e40:	b590      	push	{r4, r7, lr}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	0002      	movs	r2, r0
 8004e48:	6039      	str	r1, [r7, #0]
 8004e4a:	1dfb      	adds	r3, r7, #7
 8004e4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004e4e:	1dfb      	adds	r3, r7, #7
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e54:	d828      	bhi.n	8004ea8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e56:	4a2f      	ldr	r2, [pc, #188]	@ (8004f14 <__NVIC_SetPriority+0xd4>)
 8004e58:	1dfb      	adds	r3, r7, #7
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	b25b      	sxtb	r3, r3
 8004e5e:	089b      	lsrs	r3, r3, #2
 8004e60:	33c0      	adds	r3, #192	@ 0xc0
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	589b      	ldr	r3, [r3, r2]
 8004e66:	1dfa      	adds	r2, r7, #7
 8004e68:	7812      	ldrb	r2, [r2, #0]
 8004e6a:	0011      	movs	r1, r2
 8004e6c:	2203      	movs	r2, #3
 8004e6e:	400a      	ands	r2, r1
 8004e70:	00d2      	lsls	r2, r2, #3
 8004e72:	21ff      	movs	r1, #255	@ 0xff
 8004e74:	4091      	lsls	r1, r2
 8004e76:	000a      	movs	r2, r1
 8004e78:	43d2      	mvns	r2, r2
 8004e7a:	401a      	ands	r2, r3
 8004e7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	019b      	lsls	r3, r3, #6
 8004e82:	22ff      	movs	r2, #255	@ 0xff
 8004e84:	401a      	ands	r2, r3
 8004e86:	1dfb      	adds	r3, r7, #7
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	4003      	ands	r3, r0
 8004e90:	00db      	lsls	r3, r3, #3
 8004e92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e94:	481f      	ldr	r0, [pc, #124]	@ (8004f14 <__NVIC_SetPriority+0xd4>)
 8004e96:	1dfb      	adds	r3, r7, #7
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	b25b      	sxtb	r3, r3
 8004e9c:	089b      	lsrs	r3, r3, #2
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	33c0      	adds	r3, #192	@ 0xc0
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004ea6:	e031      	b.n	8004f0c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ea8:	4a1b      	ldr	r2, [pc, #108]	@ (8004f18 <__NVIC_SetPriority+0xd8>)
 8004eaa:	1dfb      	adds	r3, r7, #7
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	0019      	movs	r1, r3
 8004eb0:	230f      	movs	r3, #15
 8004eb2:	400b      	ands	r3, r1
 8004eb4:	3b08      	subs	r3, #8
 8004eb6:	089b      	lsrs	r3, r3, #2
 8004eb8:	3306      	adds	r3, #6
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	18d3      	adds	r3, r2, r3
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	1dfa      	adds	r2, r7, #7
 8004ec4:	7812      	ldrb	r2, [r2, #0]
 8004ec6:	0011      	movs	r1, r2
 8004ec8:	2203      	movs	r2, #3
 8004eca:	400a      	ands	r2, r1
 8004ecc:	00d2      	lsls	r2, r2, #3
 8004ece:	21ff      	movs	r1, #255	@ 0xff
 8004ed0:	4091      	lsls	r1, r2
 8004ed2:	000a      	movs	r2, r1
 8004ed4:	43d2      	mvns	r2, r2
 8004ed6:	401a      	ands	r2, r3
 8004ed8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	019b      	lsls	r3, r3, #6
 8004ede:	22ff      	movs	r2, #255	@ 0xff
 8004ee0:	401a      	ands	r2, r3
 8004ee2:	1dfb      	adds	r3, r7, #7
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	2303      	movs	r3, #3
 8004eea:	4003      	ands	r3, r0
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ef0:	4809      	ldr	r0, [pc, #36]	@ (8004f18 <__NVIC_SetPriority+0xd8>)
 8004ef2:	1dfb      	adds	r3, r7, #7
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	001c      	movs	r4, r3
 8004ef8:	230f      	movs	r3, #15
 8004efa:	4023      	ands	r3, r4
 8004efc:	3b08      	subs	r3, #8
 8004efe:	089b      	lsrs	r3, r3, #2
 8004f00:	430a      	orrs	r2, r1
 8004f02:	3306      	adds	r3, #6
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	18c3      	adds	r3, r0, r3
 8004f08:	3304      	adds	r3, #4
 8004f0a:	601a      	str	r2, [r3, #0]
}
 8004f0c:	46c0      	nop			@ (mov r8, r8)
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	b003      	add	sp, #12
 8004f12:	bd90      	pop	{r4, r7, pc}
 8004f14:	e000e100 	.word	0xe000e100
 8004f18:	e000ed00 	.word	0xe000ed00

08004f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	1e5a      	subs	r2, r3, #1
 8004f28:	2380      	movs	r3, #128	@ 0x80
 8004f2a:	045b      	lsls	r3, r3, #17
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d301      	bcc.n	8004f34 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f30:	2301      	movs	r3, #1
 8004f32:	e010      	b.n	8004f56 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f34:	4b0a      	ldr	r3, [pc, #40]	@ (8004f60 <SysTick_Config+0x44>)
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	3a01      	subs	r2, #1
 8004f3a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	425b      	negs	r3, r3
 8004f40:	2103      	movs	r1, #3
 8004f42:	0018      	movs	r0, r3
 8004f44:	f7ff ff7c 	bl	8004e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f48:	4b05      	ldr	r3, [pc, #20]	@ (8004f60 <SysTick_Config+0x44>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f4e:	4b04      	ldr	r3, [pc, #16]	@ (8004f60 <SysTick_Config+0x44>)
 8004f50:	2207      	movs	r2, #7
 8004f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	0018      	movs	r0, r3
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	b002      	add	sp, #8
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	46c0      	nop			@ (mov r8, r8)
 8004f60:	e000e010 	.word	0xe000e010

08004f64 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	60b9      	str	r1, [r7, #8]
 8004f6c:	607a      	str	r2, [r7, #4]
 8004f6e:	210f      	movs	r1, #15
 8004f70:	187b      	adds	r3, r7, r1
 8004f72:	1c02      	adds	r2, r0, #0
 8004f74:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	187b      	adds	r3, r7, r1
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	b25b      	sxtb	r3, r3
 8004f7e:	0011      	movs	r1, r2
 8004f80:	0018      	movs	r0, r3
 8004f82:	f7ff ff5d 	bl	8004e40 <__NVIC_SetPriority>
}
 8004f86:	46c0      	nop			@ (mov r8, r8)
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	b004      	add	sp, #16
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b082      	sub	sp, #8
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	0002      	movs	r2, r0
 8004f96:	1dfb      	adds	r3, r7, #7
 8004f98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f9a:	1dfb      	adds	r3, r7, #7
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	b25b      	sxtb	r3, r3
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	f7ff ff33 	bl	8004e0c <__NVIC_EnableIRQ>
}
 8004fa6:	46c0      	nop			@ (mov r8, r8)
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	b002      	add	sp, #8
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b082      	sub	sp, #8
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f7ff ffaf 	bl	8004f1c <SysTick_Config>
 8004fbe:	0003      	movs	r3, r0
}
 8004fc0:	0018      	movs	r0, r3
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	b002      	add	sp, #8
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e061      	b.n	800509e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a32      	ldr	r2, [pc, #200]	@ (80050a8 <HAL_DMA_Init+0xe0>)
 8004fe0:	4694      	mov	ip, r2
 8004fe2:	4463      	add	r3, ip
 8004fe4:	2114      	movs	r1, #20
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	f7fb f8aa 	bl	8000140 <__udivsi3>
 8004fec:	0003      	movs	r3, r0
 8004fee:	009a      	lsls	r2, r3, #2
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a2d      	ldr	r2, [pc, #180]	@ (80050ac <HAL_DMA_Init+0xe4>)
 8004ff8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2225      	movs	r2, #37	@ 0x25
 8004ffe:	2102      	movs	r1, #2
 8005000:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4a28      	ldr	r2, [pc, #160]	@ (80050b0 <HAL_DMA_Init+0xe8>)
 800500e:	4013      	ands	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800501a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005026:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005032:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4313      	orrs	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	2380      	movs	r3, #128	@ 0x80
 800504e:	01db      	lsls	r3, r3, #7
 8005050:	429a      	cmp	r2, r3
 8005052:	d018      	beq.n	8005086 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005054:	4b17      	ldr	r3, [pc, #92]	@ (80050b4 <HAL_DMA_Init+0xec>)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800505c:	211c      	movs	r1, #28
 800505e:	400b      	ands	r3, r1
 8005060:	210f      	movs	r1, #15
 8005062:	4099      	lsls	r1, r3
 8005064:	000b      	movs	r3, r1
 8005066:	43d9      	mvns	r1, r3
 8005068:	4b12      	ldr	r3, [pc, #72]	@ (80050b4 <HAL_DMA_Init+0xec>)
 800506a:	400a      	ands	r2, r1
 800506c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800506e:	4b11      	ldr	r3, [pc, #68]	@ (80050b4 <HAL_DMA_Init+0xec>)
 8005070:	6819      	ldr	r1, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800507a:	201c      	movs	r0, #28
 800507c:	4003      	ands	r3, r0
 800507e:	409a      	lsls	r2, r3
 8005080:	4b0c      	ldr	r3, [pc, #48]	@ (80050b4 <HAL_DMA_Init+0xec>)
 8005082:	430a      	orrs	r2, r1
 8005084:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2225      	movs	r2, #37	@ 0x25
 8005090:	2101      	movs	r1, #1
 8005092:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2224      	movs	r2, #36	@ 0x24
 8005098:	2100      	movs	r1, #0
 800509a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	0018      	movs	r0, r3
 80050a0:	46bd      	mov	sp, r7
 80050a2:	b004      	add	sp, #16
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	46c0      	nop			@ (mov r8, r8)
 80050a8:	bffdfff8 	.word	0xbffdfff8
 80050ac:	40020000 	.word	0x40020000
 80050b0:	ffff800f 	.word	0xffff800f
 80050b4:	400200a8 	.word	0x400200a8

080050b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050c6:	2317      	movs	r3, #23
 80050c8:	18fb      	adds	r3, r7, r3
 80050ca:	2200      	movs	r2, #0
 80050cc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2224      	movs	r2, #36	@ 0x24
 80050d2:	5c9b      	ldrb	r3, [r3, r2]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d101      	bne.n	80050dc <HAL_DMA_Start_IT+0x24>
 80050d8:	2302      	movs	r3, #2
 80050da:	e04f      	b.n	800517c <HAL_DMA_Start_IT+0xc4>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2224      	movs	r2, #36	@ 0x24
 80050e0:	2101      	movs	r1, #1
 80050e2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2225      	movs	r2, #37	@ 0x25
 80050e8:	5c9b      	ldrb	r3, [r3, r2]
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d13a      	bne.n	8005166 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2225      	movs	r2, #37	@ 0x25
 80050f4:	2102      	movs	r1, #2
 80050f6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2101      	movs	r1, #1
 800510a:	438a      	bics	r2, r1
 800510c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	68b9      	ldr	r1, [r7, #8]
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 f936 	bl	8005386 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511e:	2b00      	cmp	r3, #0
 8005120:	d008      	beq.n	8005134 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	210e      	movs	r1, #14
 800512e:	430a      	orrs	r2, r1
 8005130:	601a      	str	r2, [r3, #0]
 8005132:	e00f      	b.n	8005154 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2104      	movs	r1, #4
 8005140:	438a      	bics	r2, r1
 8005142:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	210a      	movs	r1, #10
 8005150:	430a      	orrs	r2, r1
 8005152:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2101      	movs	r1, #1
 8005160:	430a      	orrs	r2, r1
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	e007      	b.n	8005176 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2224      	movs	r2, #36	@ 0x24
 800516a:	2100      	movs	r1, #0
 800516c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800516e:	2317      	movs	r3, #23
 8005170:	18fb      	adds	r3, r7, r3
 8005172:	2202      	movs	r2, #2
 8005174:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8005176:	2317      	movs	r3, #23
 8005178:	18fb      	adds	r3, r7, r3
 800517a:	781b      	ldrb	r3, [r3, #0]
}
 800517c:	0018      	movs	r0, r3
 800517e:	46bd      	mov	sp, r7
 8005180:	b006      	add	sp, #24
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800518c:	210f      	movs	r1, #15
 800518e:	187b      	adds	r3, r7, r1
 8005190:	2200      	movs	r2, #0
 8005192:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2225      	movs	r2, #37	@ 0x25
 8005198:	5c9b      	ldrb	r3, [r3, r2]
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d006      	beq.n	80051ae <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2204      	movs	r2, #4
 80051a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80051a6:	187b      	adds	r3, r7, r1
 80051a8:	2201      	movs	r2, #1
 80051aa:	701a      	strb	r2, [r3, #0]
 80051ac:	e02a      	b.n	8005204 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	210e      	movs	r1, #14
 80051ba:	438a      	bics	r2, r1
 80051bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2101      	movs	r1, #1
 80051ca:	438a      	bics	r2, r1
 80051cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d2:	221c      	movs	r2, #28
 80051d4:	401a      	ands	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051da:	2101      	movs	r1, #1
 80051dc:	4091      	lsls	r1, r2
 80051de:	000a      	movs	r2, r1
 80051e0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2225      	movs	r2, #37	@ 0x25
 80051e6:	2101      	movs	r1, #1
 80051e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2224      	movs	r2, #36	@ 0x24
 80051ee:	2100      	movs	r1, #0
 80051f0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d004      	beq.n	8005204 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	0010      	movs	r0, r2
 8005202:	4798      	blx	r3
    }
  }
  return status;
 8005204:	230f      	movs	r3, #15
 8005206:	18fb      	adds	r3, r7, r3
 8005208:	781b      	ldrb	r3, [r3, #0]
}
 800520a:	0018      	movs	r0, r3
 800520c:	46bd      	mov	sp, r7
 800520e:	b004      	add	sp, #16
 8005210:	bd80      	pop	{r7, pc}

08005212 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b084      	sub	sp, #16
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800522e:	221c      	movs	r2, #28
 8005230:	4013      	ands	r3, r2
 8005232:	2204      	movs	r2, #4
 8005234:	409a      	lsls	r2, r3
 8005236:	0013      	movs	r3, r2
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4013      	ands	r3, r2
 800523c:	d026      	beq.n	800528c <HAL_DMA_IRQHandler+0x7a>
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2204      	movs	r2, #4
 8005242:	4013      	ands	r3, r2
 8005244:	d022      	beq.n	800528c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2220      	movs	r2, #32
 800524e:	4013      	ands	r3, r2
 8005250:	d107      	bne.n	8005262 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2104      	movs	r1, #4
 800525e:	438a      	bics	r2, r1
 8005260:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005266:	221c      	movs	r2, #28
 8005268:	401a      	ands	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526e:	2104      	movs	r1, #4
 8005270:	4091      	lsls	r1, r2
 8005272:	000a      	movs	r2, r1
 8005274:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800527a:	2b00      	cmp	r3, #0
 800527c:	d100      	bne.n	8005280 <HAL_DMA_IRQHandler+0x6e>
 800527e:	e071      	b.n	8005364 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	0010      	movs	r0, r2
 8005288:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800528a:	e06b      	b.n	8005364 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005290:	221c      	movs	r2, #28
 8005292:	4013      	ands	r3, r2
 8005294:	2202      	movs	r2, #2
 8005296:	409a      	lsls	r2, r3
 8005298:	0013      	movs	r3, r2
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	4013      	ands	r3, r2
 800529e:	d02d      	beq.n	80052fc <HAL_DMA_IRQHandler+0xea>
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2202      	movs	r2, #2
 80052a4:	4013      	ands	r3, r2
 80052a6:	d029      	beq.n	80052fc <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2220      	movs	r2, #32
 80052b0:	4013      	ands	r3, r2
 80052b2:	d10b      	bne.n	80052cc <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	210a      	movs	r1, #10
 80052c0:	438a      	bics	r2, r1
 80052c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2225      	movs	r2, #37	@ 0x25
 80052c8:	2101      	movs	r1, #1
 80052ca:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052d0:	221c      	movs	r2, #28
 80052d2:	401a      	ands	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d8:	2102      	movs	r1, #2
 80052da:	4091      	lsls	r1, r2
 80052dc:	000a      	movs	r2, r1
 80052de:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2224      	movs	r2, #36	@ 0x24
 80052e4:	2100      	movs	r1, #0
 80052e6:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d039      	beq.n	8005364 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	0010      	movs	r0, r2
 80052f8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80052fa:	e033      	b.n	8005364 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005300:	221c      	movs	r2, #28
 8005302:	4013      	ands	r3, r2
 8005304:	2208      	movs	r2, #8
 8005306:	409a      	lsls	r2, r3
 8005308:	0013      	movs	r3, r2
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	4013      	ands	r3, r2
 800530e:	d02a      	beq.n	8005366 <HAL_DMA_IRQHandler+0x154>
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2208      	movs	r2, #8
 8005314:	4013      	ands	r3, r2
 8005316:	d026      	beq.n	8005366 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	210e      	movs	r1, #14
 8005324:	438a      	bics	r2, r1
 8005326:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800532c:	221c      	movs	r2, #28
 800532e:	401a      	ands	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005334:	2101      	movs	r1, #1
 8005336:	4091      	lsls	r1, r2
 8005338:	000a      	movs	r2, r1
 800533a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2225      	movs	r2, #37	@ 0x25
 8005346:	2101      	movs	r1, #1
 8005348:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2224      	movs	r2, #36	@ 0x24
 800534e:	2100      	movs	r1, #0
 8005350:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005356:	2b00      	cmp	r3, #0
 8005358:	d005      	beq.n	8005366 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	0010      	movs	r0, r2
 8005362:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005364:	46c0      	nop			@ (mov r8, r8)
 8005366:	46c0      	nop			@ (mov r8, r8)
}
 8005368:	46bd      	mov	sp, r7
 800536a:	b004      	add	sp, #16
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b082      	sub	sp, #8
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2225      	movs	r2, #37	@ 0x25
 800537a:	5c9b      	ldrb	r3, [r3, r2]
 800537c:	b2db      	uxtb	r3, r3
}
 800537e:	0018      	movs	r0, r3
 8005380:	46bd      	mov	sp, r7
 8005382:	b002      	add	sp, #8
 8005384:	bd80      	pop	{r7, pc}

08005386 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b084      	sub	sp, #16
 800538a:	af00      	add	r7, sp, #0
 800538c:	60f8      	str	r0, [r7, #12]
 800538e:	60b9      	str	r1, [r7, #8]
 8005390:	607a      	str	r2, [r7, #4]
 8005392:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005398:	221c      	movs	r2, #28
 800539a:	401a      	ands	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a0:	2101      	movs	r1, #1
 80053a2:	4091      	lsls	r1, r2
 80053a4:	000a      	movs	r2, r1
 80053a6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	2b10      	cmp	r3, #16
 80053b6:	d108      	bne.n	80053ca <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80053c8:	e007      	b.n	80053da <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	60da      	str	r2, [r3, #12]
}
 80053da:	46c0      	nop			@ (mov r8, r8)
 80053dc:	46bd      	mov	sp, r7
 80053de:	b004      	add	sp, #16
 80053e0:	bd80      	pop	{r7, pc}
	...

080053e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80053fa:	e155      	b.n	80056a8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2101      	movs	r1, #1
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	4091      	lsls	r1, r2
 8005406:	000a      	movs	r2, r1
 8005408:	4013      	ands	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d100      	bne.n	8005414 <HAL_GPIO_Init+0x30>
 8005412:	e146      	b.n	80056a2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2203      	movs	r2, #3
 800541a:	4013      	ands	r3, r2
 800541c:	2b01      	cmp	r3, #1
 800541e:	d005      	beq.n	800542c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	2203      	movs	r2, #3
 8005426:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005428:	2b02      	cmp	r3, #2
 800542a:	d130      	bne.n	800548e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	2203      	movs	r2, #3
 8005438:	409a      	lsls	r2, r3
 800543a:	0013      	movs	r3, r2
 800543c:	43da      	mvns	r2, r3
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	4013      	ands	r3, r2
 8005442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	68da      	ldr	r2, [r3, #12]
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	409a      	lsls	r2, r3
 800544e:	0013      	movs	r3, r2
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	4313      	orrs	r3, r2
 8005454:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005462:	2201      	movs	r2, #1
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	409a      	lsls	r2, r3
 8005468:	0013      	movs	r3, r2
 800546a:	43da      	mvns	r2, r3
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	4013      	ands	r3, r2
 8005470:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	091b      	lsrs	r3, r3, #4
 8005478:	2201      	movs	r2, #1
 800547a:	401a      	ands	r2, r3
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	409a      	lsls	r2, r3
 8005480:	0013      	movs	r3, r2
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	4313      	orrs	r3, r2
 8005486:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2203      	movs	r2, #3
 8005494:	4013      	ands	r3, r2
 8005496:	2b03      	cmp	r3, #3
 8005498:	d017      	beq.n	80054ca <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	2203      	movs	r2, #3
 80054a6:	409a      	lsls	r2, r3
 80054a8:	0013      	movs	r3, r2
 80054aa:	43da      	mvns	r2, r3
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	4013      	ands	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	409a      	lsls	r2, r3
 80054bc:	0013      	movs	r3, r2
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	2203      	movs	r2, #3
 80054d0:	4013      	ands	r3, r2
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d123      	bne.n	800551e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	08da      	lsrs	r2, r3, #3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3208      	adds	r2, #8
 80054de:	0092      	lsls	r2, r2, #2
 80054e0:	58d3      	ldr	r3, [r2, r3]
 80054e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2207      	movs	r2, #7
 80054e8:	4013      	ands	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	220f      	movs	r2, #15
 80054ee:	409a      	lsls	r2, r3
 80054f0:	0013      	movs	r3, r2
 80054f2:	43da      	mvns	r2, r3
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	4013      	ands	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	691a      	ldr	r2, [r3, #16]
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2107      	movs	r1, #7
 8005502:	400b      	ands	r3, r1
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	409a      	lsls	r2, r3
 8005508:	0013      	movs	r3, r2
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	08da      	lsrs	r2, r3, #3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	3208      	adds	r2, #8
 8005518:	0092      	lsls	r2, r2, #2
 800551a:	6939      	ldr	r1, [r7, #16]
 800551c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	2203      	movs	r2, #3
 800552a:	409a      	lsls	r2, r3
 800552c:	0013      	movs	r3, r2
 800552e:	43da      	mvns	r2, r3
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	4013      	ands	r3, r2
 8005534:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2203      	movs	r2, #3
 800553c:	401a      	ands	r2, r3
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	409a      	lsls	r2, r3
 8005544:	0013      	movs	r3, r2
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	23c0      	movs	r3, #192	@ 0xc0
 8005558:	029b      	lsls	r3, r3, #10
 800555a:	4013      	ands	r3, r2
 800555c:	d100      	bne.n	8005560 <HAL_GPIO_Init+0x17c>
 800555e:	e0a0      	b.n	80056a2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005560:	4b57      	ldr	r3, [pc, #348]	@ (80056c0 <HAL_GPIO_Init+0x2dc>)
 8005562:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005564:	4b56      	ldr	r3, [pc, #344]	@ (80056c0 <HAL_GPIO_Init+0x2dc>)
 8005566:	2101      	movs	r1, #1
 8005568:	430a      	orrs	r2, r1
 800556a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800556c:	4a55      	ldr	r2, [pc, #340]	@ (80056c4 <HAL_GPIO_Init+0x2e0>)
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	089b      	lsrs	r3, r3, #2
 8005572:	3302      	adds	r3, #2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	589b      	ldr	r3, [r3, r2]
 8005578:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	2203      	movs	r2, #3
 800557e:	4013      	ands	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	220f      	movs	r2, #15
 8005584:	409a      	lsls	r2, r3
 8005586:	0013      	movs	r3, r2
 8005588:	43da      	mvns	r2, r3
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	4013      	ands	r3, r2
 800558e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	23a0      	movs	r3, #160	@ 0xa0
 8005594:	05db      	lsls	r3, r3, #23
 8005596:	429a      	cmp	r2, r3
 8005598:	d01f      	beq.n	80055da <HAL_GPIO_Init+0x1f6>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a4a      	ldr	r2, [pc, #296]	@ (80056c8 <HAL_GPIO_Init+0x2e4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d019      	beq.n	80055d6 <HAL_GPIO_Init+0x1f2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a49      	ldr	r2, [pc, #292]	@ (80056cc <HAL_GPIO_Init+0x2e8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d013      	beq.n	80055d2 <HAL_GPIO_Init+0x1ee>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a48      	ldr	r2, [pc, #288]	@ (80056d0 <HAL_GPIO_Init+0x2ec>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00d      	beq.n	80055ce <HAL_GPIO_Init+0x1ea>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a47      	ldr	r2, [pc, #284]	@ (80056d4 <HAL_GPIO_Init+0x2f0>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d007      	beq.n	80055ca <HAL_GPIO_Init+0x1e6>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a46      	ldr	r2, [pc, #280]	@ (80056d8 <HAL_GPIO_Init+0x2f4>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d101      	bne.n	80055c6 <HAL_GPIO_Init+0x1e2>
 80055c2:	2305      	movs	r3, #5
 80055c4:	e00a      	b.n	80055dc <HAL_GPIO_Init+0x1f8>
 80055c6:	2306      	movs	r3, #6
 80055c8:	e008      	b.n	80055dc <HAL_GPIO_Init+0x1f8>
 80055ca:	2304      	movs	r3, #4
 80055cc:	e006      	b.n	80055dc <HAL_GPIO_Init+0x1f8>
 80055ce:	2303      	movs	r3, #3
 80055d0:	e004      	b.n	80055dc <HAL_GPIO_Init+0x1f8>
 80055d2:	2302      	movs	r3, #2
 80055d4:	e002      	b.n	80055dc <HAL_GPIO_Init+0x1f8>
 80055d6:	2301      	movs	r3, #1
 80055d8:	e000      	b.n	80055dc <HAL_GPIO_Init+0x1f8>
 80055da:	2300      	movs	r3, #0
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	2103      	movs	r1, #3
 80055e0:	400a      	ands	r2, r1
 80055e2:	0092      	lsls	r2, r2, #2
 80055e4:	4093      	lsls	r3, r2
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055ec:	4935      	ldr	r1, [pc, #212]	@ (80056c4 <HAL_GPIO_Init+0x2e0>)
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	089b      	lsrs	r3, r3, #2
 80055f2:	3302      	adds	r3, #2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055fa:	4b38      	ldr	r3, [pc, #224]	@ (80056dc <HAL_GPIO_Init+0x2f8>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	43da      	mvns	r2, r3
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	4013      	ands	r3, r2
 8005608:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685a      	ldr	r2, [r3, #4]
 800560e:	2380      	movs	r3, #128	@ 0x80
 8005610:	035b      	lsls	r3, r3, #13
 8005612:	4013      	ands	r3, r2
 8005614:	d003      	beq.n	800561e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4313      	orrs	r3, r2
 800561c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800561e:	4b2f      	ldr	r3, [pc, #188]	@ (80056dc <HAL_GPIO_Init+0x2f8>)
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005624:	4b2d      	ldr	r3, [pc, #180]	@ (80056dc <HAL_GPIO_Init+0x2f8>)
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	43da      	mvns	r2, r3
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	4013      	ands	r3, r2
 8005632:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	2380      	movs	r3, #128	@ 0x80
 800563a:	039b      	lsls	r3, r3, #14
 800563c:	4013      	ands	r3, r2
 800563e:	d003      	beq.n	8005648 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	4313      	orrs	r3, r2
 8005646:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005648:	4b24      	ldr	r3, [pc, #144]	@ (80056dc <HAL_GPIO_Init+0x2f8>)
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800564e:	4b23      	ldr	r3, [pc, #140]	@ (80056dc <HAL_GPIO_Init+0x2f8>)
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	43da      	mvns	r2, r3
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	4013      	ands	r3, r2
 800565c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	2380      	movs	r3, #128	@ 0x80
 8005664:	029b      	lsls	r3, r3, #10
 8005666:	4013      	ands	r3, r2
 8005668:	d003      	beq.n	8005672 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4313      	orrs	r3, r2
 8005670:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005672:	4b1a      	ldr	r3, [pc, #104]	@ (80056dc <HAL_GPIO_Init+0x2f8>)
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005678:	4b18      	ldr	r3, [pc, #96]	@ (80056dc <HAL_GPIO_Init+0x2f8>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	43da      	mvns	r2, r3
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	4013      	ands	r3, r2
 8005686:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	2380      	movs	r3, #128	@ 0x80
 800568e:	025b      	lsls	r3, r3, #9
 8005690:	4013      	ands	r3, r2
 8005692:	d003      	beq.n	800569c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4313      	orrs	r3, r2
 800569a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800569c:	4b0f      	ldr	r3, [pc, #60]	@ (80056dc <HAL_GPIO_Init+0x2f8>)
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	3301      	adds	r3, #1
 80056a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	40da      	lsrs	r2, r3
 80056b0:	1e13      	subs	r3, r2, #0
 80056b2:	d000      	beq.n	80056b6 <HAL_GPIO_Init+0x2d2>
 80056b4:	e6a2      	b.n	80053fc <HAL_GPIO_Init+0x18>
  }
}
 80056b6:	46c0      	nop			@ (mov r8, r8)
 80056b8:	46c0      	nop			@ (mov r8, r8)
 80056ba:	46bd      	mov	sp, r7
 80056bc:	b006      	add	sp, #24
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	40021000 	.word	0x40021000
 80056c4:	40010000 	.word	0x40010000
 80056c8:	50000400 	.word	0x50000400
 80056cc:	50000800 	.word	0x50000800
 80056d0:	50000c00 	.word	0x50000c00
 80056d4:	50001000 	.word	0x50001000
 80056d8:	50001c00 	.word	0x50001c00
 80056dc:	40010400 	.word	0x40010400

080056e0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	0008      	movs	r0, r1
 80056ea:	0011      	movs	r1, r2
 80056ec:	1cbb      	adds	r3, r7, #2
 80056ee:	1c02      	adds	r2, r0, #0
 80056f0:	801a      	strh	r2, [r3, #0]
 80056f2:	1c7b      	adds	r3, r7, #1
 80056f4:	1c0a      	adds	r2, r1, #0
 80056f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80056f8:	1c7b      	adds	r3, r7, #1
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d004      	beq.n	800570a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005700:	1cbb      	adds	r3, r7, #2
 8005702:	881a      	ldrh	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005708:	e003      	b.n	8005712 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800570a:	1cbb      	adds	r3, r7, #2
 800570c:	881a      	ldrh	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005712:	46c0      	nop			@ (mov r8, r8)
 8005714:	46bd      	mov	sp, r7
 8005716:	b002      	add	sp, #8
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b084      	sub	sp, #16
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	000a      	movs	r2, r1
 8005724:	1cbb      	adds	r3, r7, #2
 8005726:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800572e:	1cbb      	adds	r3, r7, #2
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4013      	ands	r3, r2
 8005736:	041a      	lsls	r2, r3, #16
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	43db      	mvns	r3, r3
 800573c:	1cb9      	adds	r1, r7, #2
 800573e:	8809      	ldrh	r1, [r1, #0]
 8005740:	400b      	ands	r3, r1
 8005742:	431a      	orrs	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	619a      	str	r2, [r3, #24]
}
 8005748:	46c0      	nop			@ (mov r8, r8)
 800574a:	46bd      	mov	sp, r7
 800574c:	b004      	add	sp, #16
 800574e:	bd80      	pop	{r7, pc}

08005750 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e082      	b.n	8005868 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2241      	movs	r2, #65	@ 0x41
 8005766:	5c9b      	ldrb	r3, [r3, r2]
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d107      	bne.n	800577e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2240      	movs	r2, #64	@ 0x40
 8005772:	2100      	movs	r1, #0
 8005774:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	0018      	movs	r0, r3
 800577a:	f7fd fe45 	bl	8003408 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2241      	movs	r2, #65	@ 0x41
 8005782:	2124      	movs	r1, #36	@ 0x24
 8005784:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2101      	movs	r1, #1
 8005792:	438a      	bics	r2, r1
 8005794:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4934      	ldr	r1, [pc, #208]	@ (8005870 <HAL_I2C_Init+0x120>)
 80057a0:	400a      	ands	r2, r1
 80057a2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4931      	ldr	r1, [pc, #196]	@ (8005874 <HAL_I2C_Init+0x124>)
 80057b0:	400a      	ands	r2, r1
 80057b2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d108      	bne.n	80057ce <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2180      	movs	r1, #128	@ 0x80
 80057c6:	0209      	lsls	r1, r1, #8
 80057c8:	430a      	orrs	r2, r1
 80057ca:	609a      	str	r2, [r3, #8]
 80057cc:	e007      	b.n	80057de <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	689a      	ldr	r2, [r3, #8]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2184      	movs	r1, #132	@ 0x84
 80057d8:	0209      	lsls	r1, r1, #8
 80057da:	430a      	orrs	r2, r1
 80057dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d104      	bne.n	80057f0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2280      	movs	r2, #128	@ 0x80
 80057ec:	0112      	lsls	r2, r2, #4
 80057ee:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	491f      	ldr	r1, [pc, #124]	@ (8005878 <HAL_I2C_Init+0x128>)
 80057fc:	430a      	orrs	r2, r1
 80057fe:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68da      	ldr	r2, [r3, #12]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	491a      	ldr	r1, [pc, #104]	@ (8005874 <HAL_I2C_Init+0x124>)
 800580c:	400a      	ands	r2, r1
 800580e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	431a      	orrs	r2, r3
 800581a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69d9      	ldr	r1, [r3, #28]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1a      	ldr	r2, [r3, #32]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2101      	movs	r1, #1
 8005846:	430a      	orrs	r2, r1
 8005848:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2241      	movs	r2, #65	@ 0x41
 8005854:	2120      	movs	r1, #32
 8005856:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2242      	movs	r2, #66	@ 0x42
 8005862:	2100      	movs	r1, #0
 8005864:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	0018      	movs	r0, r3
 800586a:	46bd      	mov	sp, r7
 800586c:	b002      	add	sp, #8
 800586e:	bd80      	pop	{r7, pc}
 8005870:	f0ffffff 	.word	0xf0ffffff
 8005874:	ffff7fff 	.word	0xffff7fff
 8005878:	02008000 	.word	0x02008000

0800587c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800587c:	b5b0      	push	{r4, r5, r7, lr}
 800587e:	b088      	sub	sp, #32
 8005880:	af02      	add	r7, sp, #8
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	0008      	movs	r0, r1
 8005886:	607a      	str	r2, [r7, #4]
 8005888:	0019      	movs	r1, r3
 800588a:	230a      	movs	r3, #10
 800588c:	18fb      	adds	r3, r7, r3
 800588e:	1c02      	adds	r2, r0, #0
 8005890:	801a      	strh	r2, [r3, #0]
 8005892:	2308      	movs	r3, #8
 8005894:	18fb      	adds	r3, r7, r3
 8005896:	1c0a      	adds	r2, r1, #0
 8005898:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2241      	movs	r2, #65	@ 0x41
 800589e:	5c9b      	ldrb	r3, [r3, r2]
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b20      	cmp	r3, #32
 80058a4:	d000      	beq.n	80058a8 <HAL_I2C_Master_Transmit_DMA+0x2c>
 80058a6:	e0dd      	b.n	8005a64 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	699a      	ldr	r2, [r3, #24]
 80058ae:	2380      	movs	r3, #128	@ 0x80
 80058b0:	021b      	lsls	r3, r3, #8
 80058b2:	401a      	ands	r2, r3
 80058b4:	2380      	movs	r3, #128	@ 0x80
 80058b6:	021b      	lsls	r3, r3, #8
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d101      	bne.n	80058c0 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 80058bc:	2302      	movs	r3, #2
 80058be:	e0d2      	b.n	8005a66 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2240      	movs	r2, #64	@ 0x40
 80058c4:	5c9b      	ldrb	r3, [r3, r2]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d101      	bne.n	80058ce <HAL_I2C_Master_Transmit_DMA+0x52>
 80058ca:	2302      	movs	r3, #2
 80058cc:	e0cb      	b.n	8005a66 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2240      	movs	r2, #64	@ 0x40
 80058d2:	2101      	movs	r1, #1
 80058d4:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2241      	movs	r2, #65	@ 0x41
 80058da:	2121      	movs	r1, #33	@ 0x21
 80058dc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2242      	movs	r2, #66	@ 0x42
 80058e2:	2110      	movs	r1, #16
 80058e4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2208      	movs	r2, #8
 80058f6:	18ba      	adds	r2, r7, r2
 80058f8:	8812      	ldrh	r2, [r2, #0]
 80058fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4a5c      	ldr	r2, [pc, #368]	@ (8005a70 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8005900:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4a5b      	ldr	r2, [pc, #364]	@ (8005a74 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8005906:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800590c:	b29b      	uxth	r3, r3
 800590e:	2bff      	cmp	r3, #255	@ 0xff
 8005910:	d906      	bls.n	8005920 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	22ff      	movs	r2, #255	@ 0xff
 8005916:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005918:	2380      	movs	r3, #128	@ 0x80
 800591a:	045b      	lsls	r3, r3, #17
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	e007      	b.n	8005930 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005924:	b29a      	uxth	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800592a:	2380      	movs	r3, #128	@ 0x80
 800592c:	049b      	lsls	r3, r3, #18
 800592e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005934:	2b00      	cmp	r3, #0
 8005936:	d100      	bne.n	800593a <HAL_I2C_Master_Transmit_DMA+0xbe>
 8005938:	e078      	b.n	8005a2c <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800593e:	2b00      	cmp	r3, #0
 8005940:	d023      	beq.n	800598a <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005946:	4a4c      	ldr	r2, [pc, #304]	@ (8005a78 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8005948:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800594e:	4a4b      	ldr	r2, [pc, #300]	@ (8005a7c <HAL_I2C_Master_Transmit_DMA+0x200>)
 8005950:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005956:	2200      	movs	r2, #0
 8005958:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800595e:	2200      	movs	r2, #0
 8005960:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005966:	6879      	ldr	r1, [r7, #4]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3328      	adds	r3, #40	@ 0x28
 800596e:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8005974:	2513      	movs	r5, #19
 8005976:	197c      	adds	r4, r7, r5
 8005978:	f7ff fb9e 	bl	80050b8 <HAL_DMA_Start_IT>
 800597c:	0003      	movs	r3, r0
 800597e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005980:	197b      	adds	r3, r7, r5
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d13d      	bne.n	8005a04 <HAL_I2C_Master_Transmit_DMA+0x188>
 8005988:	e013      	b.n	80059b2 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2241      	movs	r2, #65	@ 0x41
 800598e:	2120      	movs	r1, #32
 8005990:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2242      	movs	r2, #66	@ 0x42
 8005996:	2100      	movs	r1, #0
 8005998:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800599e:	2280      	movs	r2, #128	@ 0x80
 80059a0:	431a      	orrs	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2240      	movs	r2, #64	@ 0x40
 80059aa:	2100      	movs	r1, #0
 80059ac:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e059      	b.n	8005a66 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	697c      	ldr	r4, [r7, #20]
 80059ba:	230a      	movs	r3, #10
 80059bc:	18fb      	adds	r3, r7, r3
 80059be:	8819      	ldrh	r1, [r3, #0]
 80059c0:	68f8      	ldr	r0, [r7, #12]
 80059c2:	4b2f      	ldr	r3, [pc, #188]	@ (8005a80 <HAL_I2C_Master_Transmit_DMA+0x204>)
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	0023      	movs	r3, r4
 80059c8:	f001 fd0e 	bl	80073e8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	b29a      	uxth	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2240      	movs	r2, #64	@ 0x40
 80059e2:	2100      	movs	r1, #0
 80059e4:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2110      	movs	r1, #16
 80059ea:	0018      	movs	r0, r3
 80059ec:	f001 fd36 	bl	800745c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2180      	movs	r1, #128	@ 0x80
 80059fc:	01c9      	lsls	r1, r1, #7
 80059fe:	430a      	orrs	r2, r1
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	e02d      	b.n	8005a60 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2241      	movs	r2, #65	@ 0x41
 8005a08:	2120      	movs	r1, #32
 8005a0a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2242      	movs	r2, #66	@ 0x42
 8005a10:	2100      	movs	r1, #0
 8005a12:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a18:	2210      	movs	r2, #16
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2240      	movs	r2, #64	@ 0x40
 8005a24:	2100      	movs	r1, #0
 8005a26:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e01c      	b.n	8005a66 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4a15      	ldr	r2, [pc, #84]	@ (8005a84 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8005a30:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	2380      	movs	r3, #128	@ 0x80
 8005a3a:	049c      	lsls	r4, r3, #18
 8005a3c:	230a      	movs	r3, #10
 8005a3e:	18fb      	adds	r3, r7, r3
 8005a40:	8819      	ldrh	r1, [r3, #0]
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	4b0e      	ldr	r3, [pc, #56]	@ (8005a80 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	0023      	movs	r3, r4
 8005a4a:	f001 fccd 	bl	80073e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2240      	movs	r2, #64	@ 0x40
 8005a52:	2100      	movs	r1, #0
 8005a54:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2101      	movs	r1, #1
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	f001 fcfe 	bl	800745c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	e000      	b.n	8005a66 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005a64:	2302      	movs	r3, #2
  }
}
 8005a66:	0018      	movs	r0, r3
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	b006      	add	sp, #24
 8005a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8005a6e:	46c0      	nop			@ (mov r8, r8)
 8005a70:	ffff0000 	.word	0xffff0000
 8005a74:	08006281 	.word	0x08006281
 8005a78:	08007239 	.word	0x08007239
 8005a7c:	08007379 	.word	0x08007379
 8005a80:	80002000 	.word	0x80002000
 8005a84:	08005e2d 	.word	0x08005e2d

08005a88 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005a88:	b5b0      	push	{r4, r5, r7, lr}
 8005a8a:	b088      	sub	sp, #32
 8005a8c:	af02      	add	r7, sp, #8
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	0008      	movs	r0, r1
 8005a92:	607a      	str	r2, [r7, #4]
 8005a94:	0019      	movs	r1, r3
 8005a96:	230a      	movs	r3, #10
 8005a98:	18fb      	adds	r3, r7, r3
 8005a9a:	1c02      	adds	r2, r0, #0
 8005a9c:	801a      	strh	r2, [r3, #0]
 8005a9e:	2308      	movs	r3, #8
 8005aa0:	18fb      	adds	r3, r7, r3
 8005aa2:	1c0a      	adds	r2, r1, #0
 8005aa4:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2241      	movs	r2, #65	@ 0x41
 8005aaa:	5c9b      	ldrb	r3, [r3, r2]
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	d000      	beq.n	8005ab4 <HAL_I2C_Master_Receive_DMA+0x2c>
 8005ab2:	e0dd      	b.n	8005c70 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	699a      	ldr	r2, [r3, #24]
 8005aba:	2380      	movs	r3, #128	@ 0x80
 8005abc:	021b      	lsls	r3, r3, #8
 8005abe:	401a      	ands	r2, r3
 8005ac0:	2380      	movs	r3, #128	@ 0x80
 8005ac2:	021b      	lsls	r3, r3, #8
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d101      	bne.n	8005acc <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8005ac8:	2302      	movs	r3, #2
 8005aca:	e0d2      	b.n	8005c72 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2240      	movs	r2, #64	@ 0x40
 8005ad0:	5c9b      	ldrb	r3, [r3, r2]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d101      	bne.n	8005ada <HAL_I2C_Master_Receive_DMA+0x52>
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	e0cb      	b.n	8005c72 <HAL_I2C_Master_Receive_DMA+0x1ea>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2240      	movs	r2, #64	@ 0x40
 8005ade:	2101      	movs	r1, #1
 8005ae0:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2241      	movs	r2, #65	@ 0x41
 8005ae6:	2122      	movs	r1, #34	@ 0x22
 8005ae8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2242      	movs	r2, #66	@ 0x42
 8005aee:	2110      	movs	r1, #16
 8005af0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2208      	movs	r2, #8
 8005b02:	18ba      	adds	r2, r7, r2
 8005b04:	8812      	ldrh	r2, [r2, #0]
 8005b06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4a5c      	ldr	r2, [pc, #368]	@ (8005c7c <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8005b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4a5b      	ldr	r2, [pc, #364]	@ (8005c80 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8005b12:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	2bff      	cmp	r3, #255	@ 0xff
 8005b1c:	d906      	bls.n	8005b2c <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	22ff      	movs	r2, #255	@ 0xff
 8005b22:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005b24:	2380      	movs	r3, #128	@ 0x80
 8005b26:	045b      	lsls	r3, r3, #17
 8005b28:	617b      	str	r3, [r7, #20]
 8005b2a:	e007      	b.n	8005b3c <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005b36:	2380      	movs	r3, #128	@ 0x80
 8005b38:	049b      	lsls	r3, r3, #18
 8005b3a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d100      	bne.n	8005b46 <HAL_I2C_Master_Receive_DMA+0xbe>
 8005b44:	e078      	b.n	8005c38 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d023      	beq.n	8005b96 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b52:	4a4c      	ldr	r2, [pc, #304]	@ (8005c84 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8005b54:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b5a:	4a4b      	ldr	r2, [pc, #300]	@ (8005c88 <HAL_I2C_Master_Receive_DMA+0x200>)
 8005b5c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b62:	2200      	movs	r2, #0
 8005b64:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3324      	adds	r3, #36	@ 0x24
 8005b78:	0019      	movs	r1, r3
 8005b7a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005b80:	2513      	movs	r5, #19
 8005b82:	197c      	adds	r4, r7, r5
 8005b84:	f7ff fa98 	bl	80050b8 <HAL_DMA_Start_IT>
 8005b88:	0003      	movs	r3, r0
 8005b8a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005b8c:	197b      	adds	r3, r7, r5
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d13d      	bne.n	8005c10 <HAL_I2C_Master_Receive_DMA+0x188>
 8005b94:	e013      	b.n	8005bbe <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2241      	movs	r2, #65	@ 0x41
 8005b9a:	2120      	movs	r1, #32
 8005b9c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2242      	movs	r2, #66	@ 0x42
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005baa:	2280      	movs	r2, #128	@ 0x80
 8005bac:	431a      	orrs	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2240      	movs	r2, #64	@ 0x40
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e059      	b.n	8005c72 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	697c      	ldr	r4, [r7, #20]
 8005bc6:	230a      	movs	r3, #10
 8005bc8:	18fb      	adds	r3, r7, r3
 8005bca:	8819      	ldrh	r1, [r3, #0]
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	4b2f      	ldr	r3, [pc, #188]	@ (8005c8c <HAL_I2C_Master_Receive_DMA+0x204>)
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	0023      	movs	r3, r4
 8005bd4:	f001 fc08 	bl	80073e8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2240      	movs	r2, #64	@ 0x40
 8005bee:	2100      	movs	r1, #0
 8005bf0:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2110      	movs	r1, #16
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f001 fc30 	bl	800745c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2180      	movs	r1, #128	@ 0x80
 8005c08:	0209      	lsls	r1, r1, #8
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	e02d      	b.n	8005c6c <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2241      	movs	r2, #65	@ 0x41
 8005c14:	2120      	movs	r1, #32
 8005c16:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2242      	movs	r2, #66	@ 0x42
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c24:	2210      	movs	r2, #16
 8005c26:	431a      	orrs	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2240      	movs	r2, #64	@ 0x40
 8005c30:	2100      	movs	r1, #0
 8005c32:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e01c      	b.n	8005c72 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4a15      	ldr	r2, [pc, #84]	@ (8005c90 <HAL_I2C_Master_Receive_DMA+0x208>)
 8005c3c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c42:	b2da      	uxtb	r2, r3
 8005c44:	2380      	movs	r3, #128	@ 0x80
 8005c46:	049c      	lsls	r4, r3, #18
 8005c48:	230a      	movs	r3, #10
 8005c4a:	18fb      	adds	r3, r7, r3
 8005c4c:	8819      	ldrh	r1, [r3, #0]
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	4b0e      	ldr	r3, [pc, #56]	@ (8005c8c <HAL_I2C_Master_Receive_DMA+0x204>)
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	0023      	movs	r3, r4
 8005c56:	f001 fbc7 	bl	80073e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2240      	movs	r2, #64	@ 0x40
 8005c5e:	2100      	movs	r1, #0
 8005c60:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2101      	movs	r1, #1
 8005c66:	0018      	movs	r0, r3
 8005c68:	f001 fbf8 	bl	800745c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	e000      	b.n	8005c72 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005c70:	2302      	movs	r3, #2
  }
}
 8005c72:	0018      	movs	r0, r3
 8005c74:	46bd      	mov	sp, r7
 8005c76:	b006      	add	sp, #24
 8005c78:	bdb0      	pop	{r4, r5, r7, pc}
 8005c7a:	46c0      	nop			@ (mov r8, r8)
 8005c7c:	ffff0000 	.word	0xffff0000
 8005c80:	08006281 	.word	0x08006281
 8005c84:	080072d9 	.word	0x080072d9
 8005c88:	08007379 	.word	0x08007379
 8005c8c:	80002400 	.word	0x80002400
 8005c90:	08005e2d 	.word	0x08005e2d

08005c94 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d005      	beq.n	8005cc0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	68f9      	ldr	r1, [r7, #12]
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	4798      	blx	r3
  }
}
 8005cc0:	46c0      	nop			@ (mov r8, r8)
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	b004      	add	sp, #16
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	2380      	movs	r3, #128	@ 0x80
 8005ce4:	005b      	lsls	r3, r3, #1
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	d00e      	beq.n	8005d08 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	2280      	movs	r2, #128	@ 0x80
 8005cee:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005cf0:	d00a      	beq.n	8005d08 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2280      	movs	r2, #128	@ 0x80
 8005d04:	0052      	lsls	r2, r2, #1
 8005d06:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	2380      	movs	r3, #128	@ 0x80
 8005d0c:	00db      	lsls	r3, r3, #3
 8005d0e:	4013      	ands	r3, r2
 8005d10:	d00e      	beq.n	8005d30 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	2280      	movs	r2, #128	@ 0x80
 8005d16:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005d18:	d00a      	beq.n	8005d30 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1e:	2208      	movs	r2, #8
 8005d20:	431a      	orrs	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2280      	movs	r2, #128	@ 0x80
 8005d2c:	00d2      	lsls	r2, r2, #3
 8005d2e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	2380      	movs	r3, #128	@ 0x80
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4013      	ands	r3, r2
 8005d38:	d00e      	beq.n	8005d58 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	2280      	movs	r2, #128	@ 0x80
 8005d3e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005d40:	d00a      	beq.n	8005d58 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d46:	2202      	movs	r2, #2
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2280      	movs	r2, #128	@ 0x80
 8005d54:	0092      	lsls	r2, r2, #2
 8005d56:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d5c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	220b      	movs	r2, #11
 8005d62:	4013      	ands	r3, r2
 8005d64:	d005      	beq.n	8005d72 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	0011      	movs	r1, r2
 8005d6c:	0018      	movs	r0, r3
 8005d6e:	f001 f915 	bl	8006f9c <I2C_ITError>
  }
}
 8005d72:	46c0      	nop			@ (mov r8, r8)
 8005d74:	46bd      	mov	sp, r7
 8005d76:	b006      	add	sp, #24
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b082      	sub	sp, #8
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005d82:	46c0      	nop			@ (mov r8, r8)
 8005d84:	46bd      	mov	sp, r7
 8005d86:	b002      	add	sp, #8
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b082      	sub	sp, #8
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005d92:	46c0      	nop			@ (mov r8, r8)
 8005d94:	46bd      	mov	sp, r7
 8005d96:	b002      	add	sp, #8
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b082      	sub	sp, #8
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005da2:	46c0      	nop			@ (mov r8, r8)
 8005da4:	46bd      	mov	sp, r7
 8005da6:	b002      	add	sp, #8
 8005da8:	bd80      	pop	{r7, pc}

08005daa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b082      	sub	sp, #8
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005db2:	46c0      	nop			@ (mov r8, r8)
 8005db4:	46bd      	mov	sp, r7
 8005db6:	b002      	add	sp, #8
 8005db8:	bd80      	pop	{r7, pc}

08005dba <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b082      	sub	sp, #8
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
 8005dc2:	0008      	movs	r0, r1
 8005dc4:	0011      	movs	r1, r2
 8005dc6:	1cfb      	adds	r3, r7, #3
 8005dc8:	1c02      	adds	r2, r0, #0
 8005dca:	701a      	strb	r2, [r3, #0]
 8005dcc:	003b      	movs	r3, r7
 8005dce:	1c0a      	adds	r2, r1, #0
 8005dd0:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005dd2:	46c0      	nop			@ (mov r8, r8)
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	b002      	add	sp, #8
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b082      	sub	sp, #8
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005de2:	46c0      	nop			@ (mov r8, r8)
 8005de4:	46bd      	mov	sp, r7
 8005de6:	b002      	add	sp, #8
 8005de8:	bd80      	pop	{r7, pc}

08005dea <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b082      	sub	sp, #8
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005df2:	46c0      	nop			@ (mov r8, r8)
 8005df4:	46bd      	mov	sp, r7
 8005df6:	b002      	add	sp, #8
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b082      	sub	sp, #8
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005e02:	46c0      	nop			@ (mov r8, r8)
 8005e04:	46bd      	mov	sp, r7
 8005e06:	b002      	add	sp, #8
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b082      	sub	sp, #8
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005e12:	46c0      	nop			@ (mov r8, r8)
 8005e14:	46bd      	mov	sp, r7
 8005e16:	b002      	add	sp, #8
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b082      	sub	sp, #8
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005e22:	46c0      	nop			@ (mov r8, r8)
 8005e24:	46bd      	mov	sp, r7
 8005e26:	b002      	add	sp, #8
 8005e28:	bd80      	pop	{r7, pc}
	...

08005e2c <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005e2c:	b590      	push	{r4, r7, lr}
 8005e2e:	b089      	sub	sp, #36	@ 0x24
 8005e30:	af02      	add	r7, sp, #8
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2240      	movs	r2, #64	@ 0x40
 8005e40:	5c9b      	ldrb	r3, [r3, r2]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d101      	bne.n	8005e4a <I2C_Master_ISR_IT+0x1e>
 8005e46:	2302      	movs	r3, #2
 8005e48:	e113      	b.n	8006072 <I2C_Master_ISR_IT+0x246>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2240      	movs	r2, #64	@ 0x40
 8005e4e:	2101      	movs	r1, #1
 8005e50:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2210      	movs	r2, #16
 8005e56:	4013      	ands	r3, r2
 8005e58:	d012      	beq.n	8005e80 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2210      	movs	r2, #16
 8005e5e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e60:	d00e      	beq.n	8005e80 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2210      	movs	r2, #16
 8005e68:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e6e:	2204      	movs	r2, #4
 8005e70:	431a      	orrs	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	0018      	movs	r0, r3
 8005e7a:	f001 f9ba 	bl	80071f2 <I2C_Flush_TXDR>
 8005e7e:	e0e5      	b.n	800604c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	2204      	movs	r2, #4
 8005e84:	4013      	ands	r3, r2
 8005e86:	d021      	beq.n	8005ecc <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2204      	movs	r2, #4
 8005e8c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005e8e:	d01d      	beq.n	8005ecc <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	2204      	movs	r2, #4
 8005e94:	4393      	bics	r3, r2
 8005e96:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005eca:	e0bf      	b.n	800604c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	d01c      	beq.n	8005f0e <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005eda:	d018      	beq.n	8005f0e <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee0:	781a      	ldrb	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	3b01      	subs	r3, #1
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f0c:	e09e      	b.n	800604c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2280      	movs	r2, #128	@ 0x80
 8005f12:	4013      	ands	r3, r2
 8005f14:	d100      	bne.n	8005f18 <I2C_Master_ISR_IT+0xec>
 8005f16:	e069      	b.n	8005fec <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2240      	movs	r2, #64	@ 0x40
 8005f1c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005f1e:	d065      	beq.n	8005fec <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d04a      	beq.n	8005fc0 <I2C_Master_ISR_IT+0x194>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d146      	bne.n	8005fc0 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	2112      	movs	r1, #18
 8005f3c:	187b      	adds	r3, r7, r1
 8005f3e:	0592      	lsls	r2, r2, #22
 8005f40:	0d92      	lsrs	r2, r2, #22
 8005f42:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	2bff      	cmp	r3, #255	@ 0xff
 8005f4c:	d910      	bls.n	8005f70 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	22ff      	movs	r2, #255	@ 0xff
 8005f52:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	2380      	movs	r3, #128	@ 0x80
 8005f5c:	045c      	lsls	r4, r3, #17
 8005f5e:	187b      	adds	r3, r7, r1
 8005f60:	8819      	ldrh	r1, [r3, #0]
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	2300      	movs	r3, #0
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	0023      	movs	r3, r4
 8005f6a:	f001 fa3d 	bl	80073e8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f6e:	e03c      	b.n	8005fea <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f7e:	4a3f      	ldr	r2, [pc, #252]	@ (800607c <I2C_Master_ISR_IT+0x250>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d00e      	beq.n	8005fa2 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f88:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005f8e:	2312      	movs	r3, #18
 8005f90:	18fb      	adds	r3, r7, r3
 8005f92:	8819      	ldrh	r1, [r3, #0]
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	2300      	movs	r3, #0
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	0023      	movs	r3, r4
 8005f9c:	f001 fa24 	bl	80073e8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fa0:	e023      	b.n	8005fea <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	2380      	movs	r3, #128	@ 0x80
 8005faa:	049c      	lsls	r4, r3, #18
 8005fac:	2312      	movs	r3, #18
 8005fae:	18fb      	adds	r3, r7, r3
 8005fb0:	8819      	ldrh	r1, [r3, #0]
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	0023      	movs	r3, r4
 8005fba:	f001 fa15 	bl	80073e8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fbe:	e014      	b.n	8005fea <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	2380      	movs	r3, #128	@ 0x80
 8005fc8:	049b      	lsls	r3, r3, #18
 8005fca:	401a      	ands	r2, r3
 8005fcc:	2380      	movs	r3, #128	@ 0x80
 8005fce:	049b      	lsls	r3, r3, #18
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d004      	beq.n	8005fde <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	0018      	movs	r0, r3
 8005fd8:	f000 fcf4 	bl	80069c4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fdc:	e036      	b.n	800604c <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2140      	movs	r1, #64	@ 0x40
 8005fe2:	0018      	movs	r0, r3
 8005fe4:	f000 ffda 	bl	8006f9c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fe8:	e030      	b.n	800604c <I2C_Master_ISR_IT+0x220>
 8005fea:	e02f      	b.n	800604c <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	2240      	movs	r2, #64	@ 0x40
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	d02b      	beq.n	800604c <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2240      	movs	r2, #64	@ 0x40
 8005ff8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005ffa:	d027      	beq.n	800604c <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006000:	b29b      	uxth	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d11d      	bne.n	8006042 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	2380      	movs	r3, #128	@ 0x80
 800600e:	049b      	lsls	r3, r3, #18
 8006010:	401a      	ands	r2, r3
 8006012:	2380      	movs	r3, #128	@ 0x80
 8006014:	049b      	lsls	r3, r3, #18
 8006016:	429a      	cmp	r2, r3
 8006018:	d018      	beq.n	800604c <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800601e:	4a17      	ldr	r2, [pc, #92]	@ (800607c <I2C_Master_ISR_IT+0x250>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d109      	bne.n	8006038 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2180      	movs	r1, #128	@ 0x80
 8006030:	01c9      	lsls	r1, r1, #7
 8006032:	430a      	orrs	r2, r1
 8006034:	605a      	str	r2, [r3, #4]
 8006036:	e009      	b.n	800604c <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	0018      	movs	r0, r3
 800603c:	f000 fcc2 	bl	80069c4 <I2C_ITMasterSeqCplt>
 8006040:	e004      	b.n	800604c <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2140      	movs	r1, #64	@ 0x40
 8006046:	0018      	movs	r0, r3
 8006048:	f000 ffa8 	bl	8006f9c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	2220      	movs	r2, #32
 8006050:	4013      	ands	r3, r2
 8006052:	d009      	beq.n	8006068 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2220      	movs	r2, #32
 8006058:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800605a:	d005      	beq.n	8006068 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	0011      	movs	r1, r2
 8006062:	0018      	movs	r0, r3
 8006064:	f000 fd54 	bl	8006b10 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2240      	movs	r2, #64	@ 0x40
 800606c:	2100      	movs	r1, #0
 800606e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	0018      	movs	r0, r3
 8006074:	46bd      	mov	sp, r7
 8006076:	b007      	add	sp, #28
 8006078:	bd90      	pop	{r4, r7, pc}
 800607a:	46c0      	nop			@ (mov r8, r8)
 800607c:	ffff0000 	.word	0xffff0000

08006080 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006090:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2240      	movs	r2, #64	@ 0x40
 800609a:	5c9b      	ldrb	r3, [r3, r2]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d101      	bne.n	80060a4 <I2C_Slave_ISR_IT+0x24>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e0e6      	b.n	8006272 <I2C_Slave_ISR_IT+0x1f2>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2240      	movs	r2, #64	@ 0x40
 80060a8:	2101      	movs	r1, #1
 80060aa:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	2220      	movs	r2, #32
 80060b0:	4013      	ands	r3, r2
 80060b2:	d009      	beq.n	80060c8 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2220      	movs	r2, #32
 80060b8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80060ba:	d005      	beq.n	80060c8 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	0011      	movs	r1, r2
 80060c2:	0018      	movs	r0, r3
 80060c4:	f000 fdf2 	bl	8006cac <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	2210      	movs	r2, #16
 80060cc:	4013      	ands	r3, r2
 80060ce:	d052      	beq.n	8006176 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2210      	movs	r2, #16
 80060d4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80060d6:	d04e      	beq.n	8006176 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060dc:	b29b      	uxth	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d12d      	bne.n	800613e <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2241      	movs	r2, #65	@ 0x41
 80060e6:	5c9b      	ldrb	r3, [r3, r2]
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b28      	cmp	r3, #40	@ 0x28
 80060ec:	d10b      	bne.n	8006106 <I2C_Slave_ISR_IT+0x86>
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	2380      	movs	r3, #128	@ 0x80
 80060f2:	049b      	lsls	r3, r3, #18
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d106      	bne.n	8006106 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	0011      	movs	r1, r2
 80060fe:	0018      	movs	r0, r3
 8006100:	f000 fef4 	bl	8006eec <I2C_ITListenCplt>
 8006104:	e036      	b.n	8006174 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2241      	movs	r2, #65	@ 0x41
 800610a:	5c9b      	ldrb	r3, [r3, r2]
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b29      	cmp	r3, #41	@ 0x29
 8006110:	d110      	bne.n	8006134 <I2C_Slave_ISR_IT+0xb4>
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	4a59      	ldr	r2, [pc, #356]	@ (800627c <I2C_Slave_ISR_IT+0x1fc>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d00c      	beq.n	8006134 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2210      	movs	r2, #16
 8006120:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	0018      	movs	r0, r3
 8006126:	f001 f864 	bl	80071f2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	0018      	movs	r0, r3
 800612e:	f000 fc8b 	bl	8006a48 <I2C_ITSlaveSeqCplt>
 8006132:	e01f      	b.n	8006174 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2210      	movs	r2, #16
 800613a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800613c:	e091      	b.n	8006262 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2210      	movs	r2, #16
 8006144:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800614a:	2204      	movs	r2, #4
 800614c:	431a      	orrs	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d005      	beq.n	8006164 <I2C_Slave_ISR_IT+0xe4>
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	2380      	movs	r3, #128	@ 0x80
 800615c:	045b      	lsls	r3, r3, #17
 800615e:	429a      	cmp	r2, r3
 8006160:	d000      	beq.n	8006164 <I2C_Slave_ISR_IT+0xe4>
 8006162:	e07e      	b.n	8006262 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	0011      	movs	r1, r2
 800616c:	0018      	movs	r0, r3
 800616e:	f000 ff15 	bl	8006f9c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006172:	e076      	b.n	8006262 <I2C_Slave_ISR_IT+0x1e2>
 8006174:	e075      	b.n	8006262 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	2204      	movs	r2, #4
 800617a:	4013      	ands	r3, r2
 800617c:	d02f      	beq.n	80061de <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2204      	movs	r2, #4
 8006182:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006184:	d02b      	beq.n	80061de <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800618a:	b29b      	uxth	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d018      	beq.n	80061c2 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619a:	b2d2      	uxtb	r2, r2
 800619c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a2:	1c5a      	adds	r2, r3, #1
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061ac:	3b01      	subs	r3, #1
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	3b01      	subs	r3, #1
 80061bc:	b29a      	uxth	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d14c      	bne.n	8006266 <I2C_Slave_ISR_IT+0x1e6>
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	4a2b      	ldr	r2, [pc, #172]	@ (800627c <I2C_Slave_ISR_IT+0x1fc>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d048      	beq.n	8006266 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	0018      	movs	r0, r3
 80061d8:	f000 fc36 	bl	8006a48 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80061dc:	e043      	b.n	8006266 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	2208      	movs	r2, #8
 80061e2:	4013      	ands	r3, r2
 80061e4:	d00a      	beq.n	80061fc <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2208      	movs	r2, #8
 80061ea:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80061ec:	d006      	beq.n	80061fc <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	0011      	movs	r1, r2
 80061f4:	0018      	movs	r0, r3
 80061f6:	f000 fb41 	bl	800687c <I2C_ITAddrCplt>
 80061fa:	e035      	b.n	8006268 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	2202      	movs	r2, #2
 8006200:	4013      	ands	r3, r2
 8006202:	d031      	beq.n	8006268 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2202      	movs	r2, #2
 8006208:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800620a:	d02d      	beq.n	8006268 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006210:	b29b      	uxth	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d018      	beq.n	8006248 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800621a:	781a      	ldrb	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006226:	1c5a      	adds	r2, r3, #1
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006230:	b29b      	uxth	r3, r3
 8006232:	3b01      	subs	r3, #1
 8006234:	b29a      	uxth	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800623e:	3b01      	subs	r3, #1
 8006240:	b29a      	uxth	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006246:	e00f      	b.n	8006268 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	2380      	movs	r3, #128	@ 0x80
 800624c:	045b      	lsls	r3, r3, #17
 800624e:	429a      	cmp	r2, r3
 8006250:	d002      	beq.n	8006258 <I2C_Slave_ISR_IT+0x1d8>
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d107      	bne.n	8006268 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	0018      	movs	r0, r3
 800625c:	f000 fbf4 	bl	8006a48 <I2C_ITSlaveSeqCplt>
 8006260:	e002      	b.n	8006268 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8006262:	46c0      	nop			@ (mov r8, r8)
 8006264:	e000      	b.n	8006268 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8006266:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2240      	movs	r2, #64	@ 0x40
 800626c:	2100      	movs	r1, #0
 800626e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	0018      	movs	r0, r3
 8006274:	46bd      	mov	sp, r7
 8006276:	b006      	add	sp, #24
 8006278:	bd80      	pop	{r7, pc}
 800627a:	46c0      	nop			@ (mov r8, r8)
 800627c:	ffff0000 	.word	0xffff0000

08006280 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8006280:	b590      	push	{r4, r7, lr}
 8006282:	b089      	sub	sp, #36	@ 0x24
 8006284:	af02      	add	r7, sp, #8
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2240      	movs	r2, #64	@ 0x40
 8006290:	5c9b      	ldrb	r3, [r3, r2]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d101      	bne.n	800629a <I2C_Master_ISR_DMA+0x1a>
 8006296:	2302      	movs	r3, #2
 8006298:	e0e7      	b.n	800646a <I2C_Master_ISR_DMA+0x1ea>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2240      	movs	r2, #64	@ 0x40
 800629e:	2101      	movs	r1, #1
 80062a0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2210      	movs	r2, #16
 80062a6:	4013      	ands	r3, r2
 80062a8:	d017      	beq.n	80062da <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2210      	movs	r2, #16
 80062ae:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80062b0:	d013      	beq.n	80062da <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2210      	movs	r2, #16
 80062b8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062be:	2204      	movs	r2, #4
 80062c0:	431a      	orrs	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2120      	movs	r1, #32
 80062ca:	0018      	movs	r0, r3
 80062cc:	f001 f8c6 	bl	800745c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	0018      	movs	r0, r3
 80062d4:	f000 ff8d 	bl	80071f2 <I2C_Flush_TXDR>
 80062d8:	e0c2      	b.n	8006460 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2280      	movs	r2, #128	@ 0x80
 80062de:	4013      	ands	r3, r2
 80062e0:	d100      	bne.n	80062e4 <I2C_Master_ISR_DMA+0x64>
 80062e2:	e07c      	b.n	80063de <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2240      	movs	r2, #64	@ 0x40
 80062e8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80062ea:	d100      	bne.n	80062ee <I2C_Master_ISR_DMA+0x6e>
 80062ec:	e077      	b.n	80063de <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2140      	movs	r1, #64	@ 0x40
 80062fa:	438a      	bics	r2, r1
 80062fc:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006302:	b29b      	uxth	r3, r3
 8006304:	2b00      	cmp	r3, #0
 8006306:	d055      	beq.n	80063b4 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	b29a      	uxth	r2, r3
 8006310:	2312      	movs	r3, #18
 8006312:	18fb      	adds	r3, r7, r3
 8006314:	0592      	lsls	r2, r2, #22
 8006316:	0d92      	lsrs	r2, r2, #22
 8006318:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800631e:	b29b      	uxth	r3, r3
 8006320:	2bff      	cmp	r3, #255	@ 0xff
 8006322:	d906      	bls.n	8006332 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	22ff      	movs	r2, #255	@ 0xff
 8006328:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800632a:	2380      	movs	r3, #128	@ 0x80
 800632c:	045b      	lsls	r3, r3, #17
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	e010      	b.n	8006354 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006336:	b29a      	uxth	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006340:	4a4c      	ldr	r2, [pc, #304]	@ (8006474 <I2C_Master_ISR_DMA+0x1f4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d003      	beq.n	800634e <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634a:	617b      	str	r3, [r7, #20]
 800634c:	e002      	b.n	8006354 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800634e:	2380      	movs	r3, #128	@ 0x80
 8006350:	049b      	lsls	r3, r3, #18
 8006352:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006358:	b2da      	uxtb	r2, r3
 800635a:	697c      	ldr	r4, [r7, #20]
 800635c:	2312      	movs	r3, #18
 800635e:	18fb      	adds	r3, r7, r3
 8006360:	8819      	ldrh	r1, [r3, #0]
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	2300      	movs	r3, #0
 8006366:	9300      	str	r3, [sp, #0]
 8006368:	0023      	movs	r3, r4
 800636a:	f001 f83d 	bl	80073e8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006372:	b29a      	uxth	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	b29a      	uxth	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2241      	movs	r2, #65	@ 0x41
 8006384:	5c9b      	ldrb	r3, [r3, r2]
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b22      	cmp	r3, #34	@ 0x22
 800638a:	d109      	bne.n	80063a0 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2180      	movs	r1, #128	@ 0x80
 8006398:	0209      	lsls	r1, r1, #8
 800639a:	430a      	orrs	r2, r1
 800639c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800639e:	e05f      	b.n	8006460 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2180      	movs	r1, #128	@ 0x80
 80063ac:	01c9      	lsls	r1, r1, #7
 80063ae:	430a      	orrs	r2, r1
 80063b0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80063b2:	e055      	b.n	8006460 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	2380      	movs	r3, #128	@ 0x80
 80063bc:	049b      	lsls	r3, r3, #18
 80063be:	401a      	ands	r2, r3
 80063c0:	2380      	movs	r3, #128	@ 0x80
 80063c2:	049b      	lsls	r3, r3, #18
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d004      	beq.n	80063d2 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	0018      	movs	r0, r3
 80063cc:	f000 fafa 	bl	80069c4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80063d0:	e046      	b.n	8006460 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2140      	movs	r1, #64	@ 0x40
 80063d6:	0018      	movs	r0, r3
 80063d8:	f000 fde0 	bl	8006f9c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80063dc:	e040      	b.n	8006460 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2240      	movs	r2, #64	@ 0x40
 80063e2:	4013      	ands	r3, r2
 80063e4:	d02c      	beq.n	8006440 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2240      	movs	r2, #64	@ 0x40
 80063ea:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80063ec:	d028      	beq.n	8006440 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d11d      	bne.n	8006434 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	2380      	movs	r3, #128	@ 0x80
 8006400:	049b      	lsls	r3, r3, #18
 8006402:	401a      	ands	r2, r3
 8006404:	2380      	movs	r3, #128	@ 0x80
 8006406:	049b      	lsls	r3, r3, #18
 8006408:	429a      	cmp	r2, r3
 800640a:	d028      	beq.n	800645e <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006410:	4a18      	ldr	r2, [pc, #96]	@ (8006474 <I2C_Master_ISR_DMA+0x1f4>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d109      	bne.n	800642a <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2180      	movs	r1, #128	@ 0x80
 8006422:	01c9      	lsls	r1, r1, #7
 8006424:	430a      	orrs	r2, r1
 8006426:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006428:	e019      	b.n	800645e <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	0018      	movs	r0, r3
 800642e:	f000 fac9 	bl	80069c4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006432:	e014      	b.n	800645e <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2140      	movs	r1, #64	@ 0x40
 8006438:	0018      	movs	r0, r3
 800643a:	f000 fdaf 	bl	8006f9c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800643e:	e00e      	b.n	800645e <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2220      	movs	r2, #32
 8006444:	4013      	ands	r3, r2
 8006446:	d00b      	beq.n	8006460 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2220      	movs	r2, #32
 800644c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800644e:	d007      	beq.n	8006460 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	0011      	movs	r1, r2
 8006456:	0018      	movs	r0, r3
 8006458:	f000 fb5a 	bl	8006b10 <I2C_ITMasterCplt>
 800645c:	e000      	b.n	8006460 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800645e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2240      	movs	r2, #64	@ 0x40
 8006464:	2100      	movs	r1, #0
 8006466:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	0018      	movs	r0, r3
 800646c:	46bd      	mov	sp, r7
 800646e:	b007      	add	sp, #28
 8006470:	bd90      	pop	{r4, r7, pc}
 8006472:	46c0      	nop			@ (mov r8, r8)
 8006474:	ffff0000 	.word	0xffff0000

08006478 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006478:	b590      	push	{r4, r7, lr}
 800647a:	b089      	sub	sp, #36	@ 0x24
 800647c:	af02      	add	r7, sp, #8
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006484:	4b88      	ldr	r3, [pc, #544]	@ (80066a8 <I2C_Mem_ISR_DMA+0x230>)
 8006486:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2240      	movs	r2, #64	@ 0x40
 800648c:	5c9b      	ldrb	r3, [r3, r2]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d101      	bne.n	8006496 <I2C_Mem_ISR_DMA+0x1e>
 8006492:	2302      	movs	r3, #2
 8006494:	e104      	b.n	80066a0 <I2C_Mem_ISR_DMA+0x228>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2240      	movs	r2, #64	@ 0x40
 800649a:	2101      	movs	r1, #1
 800649c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2210      	movs	r2, #16
 80064a2:	4013      	ands	r3, r2
 80064a4:	d017      	beq.n	80064d6 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2210      	movs	r2, #16
 80064aa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80064ac:	d013      	beq.n	80064d6 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2210      	movs	r2, #16
 80064b4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ba:	2204      	movs	r2, #4
 80064bc:	431a      	orrs	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2120      	movs	r1, #32
 80064c6:	0018      	movs	r0, r3
 80064c8:	f000 ffc8 	bl	800745c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	0018      	movs	r0, r3
 80064d0:	f000 fe8f 	bl	80071f2 <I2C_Flush_TXDR>
 80064d4:	e0df      	b.n	8006696 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2202      	movs	r2, #2
 80064da:	4013      	ands	r3, r2
 80064dc:	d00d      	beq.n	80064fa <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2202      	movs	r2, #2
 80064e2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80064e4:	d009      	beq.n	80064fa <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68fa      	ldr	r2, [r7, #12]
 80064ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80064ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2201      	movs	r2, #1
 80064f4:	4252      	negs	r2, r2
 80064f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80064f8:	e0cd      	b.n	8006696 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2280      	movs	r2, #128	@ 0x80
 80064fe:	4013      	ands	r3, r2
 8006500:	d05e      	beq.n	80065c0 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2240      	movs	r2, #64	@ 0x40
 8006506:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006508:	d05a      	beq.n	80065c0 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2110      	movs	r1, #16
 800650e:	0018      	movs	r0, r3
 8006510:	f000 ffa4 	bl	800745c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006518:	b29b      	uxth	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d04a      	beq.n	80065b4 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006522:	b29b      	uxth	r3, r3
 8006524:	2bff      	cmp	r3, #255	@ 0xff
 8006526:	d910      	bls.n	800654a <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	22ff      	movs	r2, #255	@ 0xff
 800652c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006532:	b299      	uxth	r1, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006538:	b2da      	uxtb	r2, r3
 800653a:	2380      	movs	r3, #128	@ 0x80
 800653c:	045b      	lsls	r3, r3, #17
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	2400      	movs	r4, #0
 8006542:	9400      	str	r4, [sp, #0]
 8006544:	f000 ff50 	bl	80073e8 <I2C_TransferConfig>
 8006548:	e011      	b.n	800656e <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800654e:	b29a      	uxth	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006558:	b299      	uxth	r1, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800655e:	b2da      	uxtb	r2, r3
 8006560:	2380      	movs	r3, #128	@ 0x80
 8006562:	049b      	lsls	r3, r3, #18
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	2400      	movs	r4, #0
 8006568:	9400      	str	r4, [sp, #0]
 800656a:	f000 ff3d 	bl	80073e8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006572:	b29a      	uxth	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	b29a      	uxth	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2241      	movs	r2, #65	@ 0x41
 8006584:	5c9b      	ldrb	r3, [r3, r2]
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b22      	cmp	r3, #34	@ 0x22
 800658a:	d109      	bne.n	80065a0 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2180      	movs	r1, #128	@ 0x80
 8006598:	0209      	lsls	r1, r1, #8
 800659a:	430a      	orrs	r2, r1
 800659c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800659e:	e07a      	b.n	8006696 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2180      	movs	r1, #128	@ 0x80
 80065ac:	01c9      	lsls	r1, r1, #7
 80065ae:	430a      	orrs	r2, r1
 80065b0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80065b2:	e070      	b.n	8006696 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2140      	movs	r1, #64	@ 0x40
 80065b8:	0018      	movs	r0, r3
 80065ba:	f000 fcef 	bl	8006f9c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80065be:	e06a      	b.n	8006696 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2240      	movs	r2, #64	@ 0x40
 80065c4:	4013      	ands	r3, r2
 80065c6:	d058      	beq.n	800667a <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2240      	movs	r2, #64	@ 0x40
 80065cc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80065ce:	d054      	beq.n	800667a <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2241      	movs	r2, #65	@ 0x41
 80065d4:	5c9b      	ldrb	r3, [r3, r2]
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b22      	cmp	r3, #34	@ 0x22
 80065da:	d101      	bne.n	80065e0 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 80065dc:	4b33      	ldr	r3, [pc, #204]	@ (80066ac <I2C_Mem_ISR_DMA+0x234>)
 80065de:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	2bff      	cmp	r3, #255	@ 0xff
 80065e8:	d911      	bls.n	800660e <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	22ff      	movs	r2, #255	@ 0xff
 80065ee:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065f4:	b299      	uxth	r1, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	2380      	movs	r3, #128	@ 0x80
 80065fe:	045c      	lsls	r4, r3, #17
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	0023      	movs	r3, r4
 8006608:	f000 feee 	bl	80073e8 <I2C_TransferConfig>
 800660c:	e012      	b.n	8006634 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006612:	b29a      	uxth	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800661c:	b299      	uxth	r1, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006622:	b2da      	uxtb	r2, r3
 8006624:	2380      	movs	r3, #128	@ 0x80
 8006626:	049c      	lsls	r4, r3, #18
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	0023      	movs	r3, r4
 8006630:	f000 feda 	bl	80073e8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006638:	b29a      	uxth	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	b29a      	uxth	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2241      	movs	r2, #65	@ 0x41
 800664a:	5c9b      	ldrb	r3, [r3, r2]
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b22      	cmp	r3, #34	@ 0x22
 8006650:	d109      	bne.n	8006666 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2180      	movs	r1, #128	@ 0x80
 800665e:	0209      	lsls	r1, r1, #8
 8006660:	430a      	orrs	r2, r1
 8006662:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006664:	e017      	b.n	8006696 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2180      	movs	r1, #128	@ 0x80
 8006672:	01c9      	lsls	r1, r1, #7
 8006674:	430a      	orrs	r2, r1
 8006676:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006678:	e00d      	b.n	8006696 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2220      	movs	r2, #32
 800667e:	4013      	ands	r3, r2
 8006680:	d009      	beq.n	8006696 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2220      	movs	r2, #32
 8006686:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006688:	d005      	beq.n	8006696 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	0011      	movs	r1, r2
 8006690:	0018      	movs	r0, r3
 8006692:	f000 fa3d 	bl	8006b10 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2240      	movs	r2, #64	@ 0x40
 800669a:	2100      	movs	r1, #0
 800669c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	0018      	movs	r0, r3
 80066a2:	46bd      	mov	sp, r7
 80066a4:	b007      	add	sp, #28
 80066a6:	bd90      	pop	{r4, r7, pc}
 80066a8:	80002000 	.word	0x80002000
 80066ac:	80002400 	.word	0x80002400

080066b0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b088      	sub	sp, #32
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2240      	movs	r2, #64	@ 0x40
 80066ca:	5c9b      	ldrb	r3, [r3, r2]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d101      	bne.n	80066d4 <I2C_Slave_ISR_DMA+0x24>
 80066d0:	2302      	movs	r3, #2
 80066d2:	e0cd      	b.n	8006870 <I2C_Slave_ISR_DMA+0x1c0>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2240      	movs	r2, #64	@ 0x40
 80066d8:	2101      	movs	r1, #1
 80066da:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2220      	movs	r2, #32
 80066e0:	4013      	ands	r3, r2
 80066e2:	d009      	beq.n	80066f8 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2220      	movs	r2, #32
 80066e8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066ea:	d005      	beq.n	80066f8 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	0011      	movs	r1, r2
 80066f2:	0018      	movs	r0, r3
 80066f4:	f000 fada 	bl	8006cac <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	2210      	movs	r2, #16
 80066fc:	4013      	ands	r3, r2
 80066fe:	d100      	bne.n	8006702 <I2C_Slave_ISR_DMA+0x52>
 8006700:	e0a3      	b.n	800684a <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2210      	movs	r2, #16
 8006706:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006708:	d100      	bne.n	800670c <I2C_Slave_ISR_DMA+0x5c>
 800670a:	e09e      	b.n	800684a <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	2380      	movs	r3, #128	@ 0x80
 8006710:	01db      	lsls	r3, r3, #7
 8006712:	4013      	ands	r3, r2
 8006714:	d105      	bne.n	8006722 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	2380      	movs	r3, #128	@ 0x80
 800671a:	021b      	lsls	r3, r3, #8
 800671c:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800671e:	d100      	bne.n	8006722 <I2C_Slave_ISR_DMA+0x72>
 8006720:	e08c      	b.n	800683c <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00c      	beq.n	8006744 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	2380      	movs	r3, #128	@ 0x80
 800672e:	021b      	lsls	r3, r3, #8
 8006730:	4013      	ands	r3, r2
 8006732:	d007      	beq.n	8006744 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8006740:	2301      	movs	r3, #1
 8006742:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00c      	beq.n	8006766 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	2380      	movs	r3, #128	@ 0x80
 8006750:	01db      	lsls	r3, r3, #7
 8006752:	4013      	ands	r3, r2
 8006754:	d007      	beq.n	8006766 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8006762:	2301      	movs	r3, #1
 8006764:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d12d      	bne.n	80067c8 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2241      	movs	r2, #65	@ 0x41
 8006770:	5c9b      	ldrb	r3, [r3, r2]
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b28      	cmp	r3, #40	@ 0x28
 8006776:	d10b      	bne.n	8006790 <I2C_Slave_ISR_DMA+0xe0>
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	2380      	movs	r3, #128	@ 0x80
 800677c:	049b      	lsls	r3, r3, #18
 800677e:	429a      	cmp	r2, r3
 8006780:	d106      	bne.n	8006790 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	0011      	movs	r1, r2
 8006788:	0018      	movs	r0, r3
 800678a:	f000 fbaf 	bl	8006eec <I2C_ITListenCplt>
 800678e:	e054      	b.n	800683a <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2241      	movs	r2, #65	@ 0x41
 8006794:	5c9b      	ldrb	r3, [r3, r2]
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b29      	cmp	r3, #41	@ 0x29
 800679a:	d110      	bne.n	80067be <I2C_Slave_ISR_DMA+0x10e>
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	4a36      	ldr	r2, [pc, #216]	@ (8006878 <I2C_Slave_ISR_DMA+0x1c8>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d00c      	beq.n	80067be <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2210      	movs	r2, #16
 80067aa:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	0018      	movs	r0, r3
 80067b0:	f000 fd1f 	bl	80071f2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	0018      	movs	r0, r3
 80067b8:	f000 f946 	bl	8006a48 <I2C_ITSlaveSeqCplt>
 80067bc:	e03d      	b.n	800683a <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2210      	movs	r2, #16
 80067c4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80067c6:	e03e      	b.n	8006846 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2210      	movs	r2, #16
 80067ce:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067d4:	2204      	movs	r2, #4
 80067d6:	431a      	orrs	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80067dc:	2317      	movs	r3, #23
 80067de:	18fb      	adds	r3, r7, r3
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	2141      	movs	r1, #65	@ 0x41
 80067e4:	5c52      	ldrb	r2, [r2, r1]
 80067e6:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d004      	beq.n	80067f8 <I2C_Slave_ISR_DMA+0x148>
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	2380      	movs	r3, #128	@ 0x80
 80067f2:	045b      	lsls	r3, r3, #17
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d126      	bne.n	8006846 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80067f8:	2217      	movs	r2, #23
 80067fa:	18bb      	adds	r3, r7, r2
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	2b21      	cmp	r3, #33	@ 0x21
 8006800:	d003      	beq.n	800680a <I2C_Slave_ISR_DMA+0x15a>
 8006802:	18bb      	adds	r3, r7, r2
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	2b29      	cmp	r3, #41	@ 0x29
 8006808:	d103      	bne.n	8006812 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2221      	movs	r2, #33	@ 0x21
 800680e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006810:	e00b      	b.n	800682a <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006812:	2217      	movs	r2, #23
 8006814:	18bb      	adds	r3, r7, r2
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	2b22      	cmp	r3, #34	@ 0x22
 800681a:	d003      	beq.n	8006824 <I2C_Slave_ISR_DMA+0x174>
 800681c:	18bb      	adds	r3, r7, r2
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2b2a      	cmp	r3, #42	@ 0x2a
 8006822:	d102      	bne.n	800682a <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2222      	movs	r2, #34	@ 0x22
 8006828:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	0011      	movs	r1, r2
 8006832:	0018      	movs	r0, r3
 8006834:	f000 fbb2 	bl	8006f9c <I2C_ITError>
      if (treatdmanack == 1U)
 8006838:	e005      	b.n	8006846 <I2C_Slave_ISR_DMA+0x196>
 800683a:	e004      	b.n	8006846 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2210      	movs	r2, #16
 8006842:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006844:	e00f      	b.n	8006866 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8006846:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006848:	e00d      	b.n	8006866 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	2208      	movs	r2, #8
 800684e:	4013      	ands	r3, r2
 8006850:	d009      	beq.n	8006866 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2208      	movs	r2, #8
 8006856:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006858:	d005      	beq.n	8006866 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	0011      	movs	r1, r2
 8006860:	0018      	movs	r0, r3
 8006862:	f000 f80b 	bl	800687c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2240      	movs	r2, #64	@ 0x40
 800686a:	2100      	movs	r1, #0
 800686c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	0018      	movs	r0, r3
 8006872:	46bd      	mov	sp, r7
 8006874:	b008      	add	sp, #32
 8006876:	bd80      	pop	{r7, pc}
 8006878:	ffff0000 	.word	0xffff0000

0800687c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800687c:	b5b0      	push	{r4, r5, r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2241      	movs	r2, #65	@ 0x41
 800688a:	5c9b      	ldrb	r3, [r3, r2]
 800688c:	b2db      	uxtb	r3, r3
 800688e:	001a      	movs	r2, r3
 8006890:	2328      	movs	r3, #40	@ 0x28
 8006892:	4013      	ands	r3, r2
 8006894:	2b28      	cmp	r3, #40	@ 0x28
 8006896:	d000      	beq.n	800689a <I2C_ITAddrCplt+0x1e>
 8006898:	e088      	b.n	80069ac <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	0c1b      	lsrs	r3, r3, #16
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	250f      	movs	r5, #15
 80068a6:	197b      	adds	r3, r7, r5
 80068a8:	2101      	movs	r1, #1
 80068aa:	400a      	ands	r2, r1
 80068ac:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	0c1b      	lsrs	r3, r3, #16
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	200c      	movs	r0, #12
 80068ba:	183b      	adds	r3, r7, r0
 80068bc:	21fe      	movs	r1, #254	@ 0xfe
 80068be:	400a      	ands	r2, r1
 80068c0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	240a      	movs	r4, #10
 80068cc:	193b      	adds	r3, r7, r4
 80068ce:	0592      	lsls	r2, r2, #22
 80068d0:	0d92      	lsrs	r2, r2, #22
 80068d2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	b29a      	uxth	r2, r3
 80068dc:	2308      	movs	r3, #8
 80068de:	18fb      	adds	r3, r7, r3
 80068e0:	21fe      	movs	r1, #254	@ 0xfe
 80068e2:	400a      	ands	r2, r1
 80068e4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d148      	bne.n	8006980 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80068ee:	0021      	movs	r1, r4
 80068f0:	187b      	adds	r3, r7, r1
 80068f2:	881b      	ldrh	r3, [r3, #0]
 80068f4:	09db      	lsrs	r3, r3, #7
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	183b      	adds	r3, r7, r0
 80068fa:	881b      	ldrh	r3, [r3, #0]
 80068fc:	4053      	eors	r3, r2
 80068fe:	b29b      	uxth	r3, r3
 8006900:	001a      	movs	r2, r3
 8006902:	2306      	movs	r3, #6
 8006904:	4013      	ands	r3, r2
 8006906:	d120      	bne.n	800694a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8006908:	183b      	adds	r3, r7, r0
 800690a:	187a      	adds	r2, r7, r1
 800690c:	8812      	ldrh	r2, [r2, #0]
 800690e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006914:	1c5a      	adds	r2, r3, #1
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800691e:	2b02      	cmp	r3, #2
 8006920:	d14c      	bne.n	80069bc <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2208      	movs	r2, #8
 800692e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2240      	movs	r2, #64	@ 0x40
 8006934:	2100      	movs	r1, #0
 8006936:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006938:	183b      	adds	r3, r7, r0
 800693a:	881a      	ldrh	r2, [r3, #0]
 800693c:	197b      	adds	r3, r7, r5
 800693e:	7819      	ldrb	r1, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	0018      	movs	r0, r3
 8006944:	f7ff fa39 	bl	8005dba <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006948:	e038      	b.n	80069bc <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800694a:	240c      	movs	r4, #12
 800694c:	193b      	adds	r3, r7, r4
 800694e:	2208      	movs	r2, #8
 8006950:	18ba      	adds	r2, r7, r2
 8006952:	8812      	ldrh	r2, [r2, #0]
 8006954:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006956:	2380      	movs	r3, #128	@ 0x80
 8006958:	021a      	lsls	r2, r3, #8
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	0011      	movs	r1, r2
 800695e:	0018      	movs	r0, r3
 8006960:	f000 fe0a 	bl	8007578 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2240      	movs	r2, #64	@ 0x40
 8006968:	2100      	movs	r1, #0
 800696a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800696c:	193b      	adds	r3, r7, r4
 800696e:	881a      	ldrh	r2, [r3, #0]
 8006970:	230f      	movs	r3, #15
 8006972:	18fb      	adds	r3, r7, r3
 8006974:	7819      	ldrb	r1, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	0018      	movs	r0, r3
 800697a:	f7ff fa1e 	bl	8005dba <HAL_I2C_AddrCallback>
}
 800697e:	e01d      	b.n	80069bc <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006980:	2380      	movs	r3, #128	@ 0x80
 8006982:	021a      	lsls	r2, r3, #8
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	0011      	movs	r1, r2
 8006988:	0018      	movs	r0, r3
 800698a:	f000 fdf5 	bl	8007578 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2240      	movs	r2, #64	@ 0x40
 8006992:	2100      	movs	r1, #0
 8006994:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006996:	230c      	movs	r3, #12
 8006998:	18fb      	adds	r3, r7, r3
 800699a:	881a      	ldrh	r2, [r3, #0]
 800699c:	230f      	movs	r3, #15
 800699e:	18fb      	adds	r3, r7, r3
 80069a0:	7819      	ldrb	r1, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	0018      	movs	r0, r3
 80069a6:	f7ff fa08 	bl	8005dba <HAL_I2C_AddrCallback>
}
 80069aa:	e007      	b.n	80069bc <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2208      	movs	r2, #8
 80069b2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2240      	movs	r2, #64	@ 0x40
 80069b8:	2100      	movs	r1, #0
 80069ba:	5499      	strb	r1, [r3, r2]
}
 80069bc:	46c0      	nop			@ (mov r8, r8)
 80069be:	46bd      	mov	sp, r7
 80069c0:	b004      	add	sp, #16
 80069c2:	bdb0      	pop	{r4, r5, r7, pc}

080069c4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2242      	movs	r2, #66	@ 0x42
 80069d0:	2100      	movs	r1, #0
 80069d2:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2241      	movs	r2, #65	@ 0x41
 80069d8:	5c9b      	ldrb	r3, [r3, r2]
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	2b21      	cmp	r3, #33	@ 0x21
 80069de:	d117      	bne.n	8006a10 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2241      	movs	r2, #65	@ 0x41
 80069e4:	2120      	movs	r1, #32
 80069e6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2211      	movs	r2, #17
 80069ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2101      	movs	r1, #1
 80069f8:	0018      	movs	r0, r3
 80069fa:	f000 fdbd 	bl	8007578 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2240      	movs	r2, #64	@ 0x40
 8006a02:	2100      	movs	r1, #0
 8006a04:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	0018      	movs	r0, r3
 8006a0a:	f7ff f9b6 	bl	8005d7a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a0e:	e016      	b.n	8006a3e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2241      	movs	r2, #65	@ 0x41
 8006a14:	2120      	movs	r1, #32
 8006a16:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2212      	movs	r2, #18
 8006a1c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2102      	movs	r1, #2
 8006a28:	0018      	movs	r0, r3
 8006a2a:	f000 fda5 	bl	8007578 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2240      	movs	r2, #64	@ 0x40
 8006a32:	2100      	movs	r1, #0
 8006a34:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	0018      	movs	r0, r3
 8006a3a:	f7ff f9a6 	bl	8005d8a <HAL_I2C_MasterRxCpltCallback>
}
 8006a3e:	46c0      	nop			@ (mov r8, r8)
 8006a40:	46bd      	mov	sp, r7
 8006a42:	b002      	add	sp, #8
 8006a44:	bd80      	pop	{r7, pc}
	...

08006a48 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2242      	movs	r2, #66	@ 0x42
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	2380      	movs	r3, #128	@ 0x80
 8006a64:	01db      	lsls	r3, r3, #7
 8006a66:	4013      	ands	r3, r2
 8006a68:	d008      	beq.n	8006a7c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4924      	ldr	r1, [pc, #144]	@ (8006b08 <I2C_ITSlaveSeqCplt+0xc0>)
 8006a76:	400a      	ands	r2, r1
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	e00c      	b.n	8006a96 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	2380      	movs	r3, #128	@ 0x80
 8006a80:	021b      	lsls	r3, r3, #8
 8006a82:	4013      	ands	r3, r2
 8006a84:	d007      	beq.n	8006a96 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	491e      	ldr	r1, [pc, #120]	@ (8006b0c <I2C_ITSlaveSeqCplt+0xc4>)
 8006a92:	400a      	ands	r2, r1
 8006a94:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2241      	movs	r2, #65	@ 0x41
 8006a9a:	5c9b      	ldrb	r3, [r3, r2]
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b29      	cmp	r3, #41	@ 0x29
 8006aa0:	d114      	bne.n	8006acc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2241      	movs	r2, #65	@ 0x41
 8006aa6:	2128      	movs	r1, #40	@ 0x28
 8006aa8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2221      	movs	r2, #33	@ 0x21
 8006aae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	0018      	movs	r0, r3
 8006ab6:	f000 fd5f 	bl	8007578 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2240      	movs	r2, #64	@ 0x40
 8006abe:	2100      	movs	r1, #0
 8006ac0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	0018      	movs	r0, r3
 8006ac6:	f7ff f968 	bl	8005d9a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006aca:	e019      	b.n	8006b00 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2241      	movs	r2, #65	@ 0x41
 8006ad0:	5c9b      	ldrb	r3, [r3, r2]
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ad6:	d113      	bne.n	8006b00 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2241      	movs	r2, #65	@ 0x41
 8006adc:	2128      	movs	r1, #40	@ 0x28
 8006ade:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2222      	movs	r2, #34	@ 0x22
 8006ae4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2102      	movs	r1, #2
 8006aea:	0018      	movs	r0, r3
 8006aec:	f000 fd44 	bl	8007578 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2240      	movs	r2, #64	@ 0x40
 8006af4:	2100      	movs	r1, #0
 8006af6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	0018      	movs	r0, r3
 8006afc:	f7ff f955 	bl	8005daa <HAL_I2C_SlaveRxCpltCallback>
}
 8006b00:	46c0      	nop			@ (mov r8, r8)
 8006b02:	46bd      	mov	sp, r7
 8006b04:	b004      	add	sp, #16
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	ffffbfff 	.word	0xffffbfff
 8006b0c:	ffff7fff 	.word	0xffff7fff

08006b10 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2220      	movs	r2, #32
 8006b24:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2241      	movs	r2, #65	@ 0x41
 8006b2a:	5c9b      	ldrb	r3, [r3, r2]
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b21      	cmp	r3, #33	@ 0x21
 8006b30:	d108      	bne.n	8006b44 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2101      	movs	r1, #1
 8006b36:	0018      	movs	r0, r3
 8006b38:	f000 fd1e 	bl	8007578 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2211      	movs	r2, #17
 8006b40:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b42:	e00d      	b.n	8006b60 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2241      	movs	r2, #65	@ 0x41
 8006b48:	5c9b      	ldrb	r3, [r3, r2]
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b22      	cmp	r3, #34	@ 0x22
 8006b4e:	d107      	bne.n	8006b60 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2102      	movs	r1, #2
 8006b54:	0018      	movs	r0, r3
 8006b56:	f000 fd0f 	bl	8007578 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2212      	movs	r2, #18
 8006b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	494e      	ldr	r1, [pc, #312]	@ (8006ca4 <I2C_ITMasterCplt+0x194>)
 8006b6c:	400a      	ands	r2, r1
 8006b6e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a4b      	ldr	r2, [pc, #300]	@ (8006ca8 <I2C_ITMasterCplt+0x198>)
 8006b7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	2210      	movs	r2, #16
 8006b80:	4013      	ands	r3, r2
 8006b82:	d009      	beq.n	8006b98 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2210      	movs	r2, #16
 8006b8a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b90:	2204      	movs	r2, #4
 8006b92:	431a      	orrs	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2241      	movs	r2, #65	@ 0x41
 8006b9c:	5c9b      	ldrb	r3, [r3, r2]
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2b60      	cmp	r3, #96	@ 0x60
 8006ba2:	d109      	bne.n	8006bb8 <I2C_ITMasterCplt+0xa8>
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	2204      	movs	r2, #4
 8006ba8:	4013      	ands	r3, r2
 8006baa:	d005      	beq.n	8006bb8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	0018      	movs	r0, r3
 8006bbc:	f000 fb19 	bl	80071f2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bc4:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2241      	movs	r2, #65	@ 0x41
 8006bca:	5c9b      	ldrb	r3, [r3, r2]
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b60      	cmp	r3, #96	@ 0x60
 8006bd0:	d002      	beq.n	8006bd8 <I2C_ITMasterCplt+0xc8>
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d007      	beq.n	8006be8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	0011      	movs	r1, r2
 8006be0:	0018      	movs	r0, r3
 8006be2:	f000 f9db 	bl	8006f9c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006be6:	e058      	b.n	8006c9a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2241      	movs	r2, #65	@ 0x41
 8006bec:	5c9b      	ldrb	r3, [r3, r2]
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b21      	cmp	r3, #33	@ 0x21
 8006bf2:	d126      	bne.n	8006c42 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2241      	movs	r2, #65	@ 0x41
 8006bf8:	2120      	movs	r1, #32
 8006bfa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2242      	movs	r2, #66	@ 0x42
 8006c06:	5c9b      	ldrb	r3, [r3, r2]
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b40      	cmp	r3, #64	@ 0x40
 8006c0c:	d10c      	bne.n	8006c28 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2242      	movs	r2, #66	@ 0x42
 8006c12:	2100      	movs	r1, #0
 8006c14:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2240      	movs	r2, #64	@ 0x40
 8006c1a:	2100      	movs	r1, #0
 8006c1c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	0018      	movs	r0, r3
 8006c22:	f7ff f8e2 	bl	8005dea <HAL_I2C_MemTxCpltCallback>
}
 8006c26:	e038      	b.n	8006c9a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2242      	movs	r2, #66	@ 0x42
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2240      	movs	r2, #64	@ 0x40
 8006c34:	2100      	movs	r1, #0
 8006c36:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	0018      	movs	r0, r3
 8006c3c:	f7ff f89d 	bl	8005d7a <HAL_I2C_MasterTxCpltCallback>
}
 8006c40:	e02b      	b.n	8006c9a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2241      	movs	r2, #65	@ 0x41
 8006c46:	5c9b      	ldrb	r3, [r3, r2]
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b22      	cmp	r3, #34	@ 0x22
 8006c4c:	d125      	bne.n	8006c9a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2241      	movs	r2, #65	@ 0x41
 8006c52:	2120      	movs	r1, #32
 8006c54:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2242      	movs	r2, #66	@ 0x42
 8006c60:	5c9b      	ldrb	r3, [r3, r2]
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b40      	cmp	r3, #64	@ 0x40
 8006c66:	d10c      	bne.n	8006c82 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2242      	movs	r2, #66	@ 0x42
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2240      	movs	r2, #64	@ 0x40
 8006c74:	2100      	movs	r1, #0
 8006c76:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	0018      	movs	r0, r3
 8006c7c:	f7ff f8bd 	bl	8005dfa <HAL_I2C_MemRxCpltCallback>
}
 8006c80:	e00b      	b.n	8006c9a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2242      	movs	r2, #66	@ 0x42
 8006c86:	2100      	movs	r1, #0
 8006c88:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2240      	movs	r2, #64	@ 0x40
 8006c8e:	2100      	movs	r1, #0
 8006c90:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	0018      	movs	r0, r3
 8006c96:	f7ff f878 	bl	8005d8a <HAL_I2C_MasterRxCpltCallback>
}
 8006c9a:	46c0      	nop			@ (mov r8, r8)
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	b006      	add	sp, #24
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	46c0      	nop			@ (mov r8, r8)
 8006ca4:	fe00e800 	.word	0xfe00e800
 8006ca8:	ffff0000 	.word	0xffff0000

08006cac <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006cc2:	200f      	movs	r0, #15
 8006cc4:	183b      	adds	r3, r7, r0
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	2141      	movs	r1, #65	@ 0x41
 8006cca:	5c52      	ldrb	r2, [r2, r1]
 8006ccc:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006cd6:	183b      	adds	r3, r7, r0
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	2b21      	cmp	r3, #33	@ 0x21
 8006cdc:	d003      	beq.n	8006ce6 <I2C_ITSlaveCplt+0x3a>
 8006cde:	183b      	adds	r3, r7, r0
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	2b29      	cmp	r3, #41	@ 0x29
 8006ce4:	d109      	bne.n	8006cfa <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006ce6:	4a7b      	ldr	r2, [pc, #492]	@ (8006ed4 <I2C_ITSlaveCplt+0x228>)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	0011      	movs	r1, r2
 8006cec:	0018      	movs	r0, r3
 8006cee:	f000 fc43 	bl	8007578 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2221      	movs	r2, #33	@ 0x21
 8006cf6:	631a      	str	r2, [r3, #48]	@ 0x30
 8006cf8:	e011      	b.n	8006d1e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006cfa:	220f      	movs	r2, #15
 8006cfc:	18bb      	adds	r3, r7, r2
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	2b22      	cmp	r3, #34	@ 0x22
 8006d02:	d003      	beq.n	8006d0c <I2C_ITSlaveCplt+0x60>
 8006d04:	18bb      	adds	r3, r7, r2
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d0a:	d108      	bne.n	8006d1e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006d0c:	4a72      	ldr	r2, [pc, #456]	@ (8006ed8 <I2C_ITSlaveCplt+0x22c>)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	0011      	movs	r1, r2
 8006d12:	0018      	movs	r0, r3
 8006d14:	f000 fc30 	bl	8007578 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2222      	movs	r2, #34	@ 0x22
 8006d1c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2180      	movs	r1, #128	@ 0x80
 8006d2a:	0209      	lsls	r1, r1, #8
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685a      	ldr	r2, [r3, #4]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4968      	ldr	r1, [pc, #416]	@ (8006edc <I2C_ITSlaveCplt+0x230>)
 8006d3c:	400a      	ands	r2, r1
 8006d3e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	0018      	movs	r0, r3
 8006d44:	f000 fa55 	bl	80071f2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	2380      	movs	r3, #128	@ 0x80
 8006d4c:	01db      	lsls	r3, r3, #7
 8006d4e:	4013      	ands	r3, r2
 8006d50:	d013      	beq.n	8006d7a <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4960      	ldr	r1, [pc, #384]	@ (8006ee0 <I2C_ITSlaveCplt+0x234>)
 8006d5e:	400a      	ands	r2, r1
 8006d60:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d01f      	beq.n	8006daa <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006d78:	e017      	b.n	8006daa <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	2380      	movs	r3, #128	@ 0x80
 8006d7e:	021b      	lsls	r3, r3, #8
 8006d80:	4013      	ands	r3, r2
 8006d82:	d012      	beq.n	8006daa <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4955      	ldr	r1, [pc, #340]	@ (8006ee4 <I2C_ITSlaveCplt+0x238>)
 8006d90:	400a      	ands	r2, r1
 8006d92:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d006      	beq.n	8006daa <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	2204      	movs	r2, #4
 8006dae:	4013      	ands	r3, r2
 8006db0:	d020      	beq.n	8006df4 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2204      	movs	r2, #4
 8006db6:	4393      	bics	r3, r2
 8006db8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc4:	b2d2      	uxtb	r2, r2
 8006dc6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dcc:	1c5a      	adds	r2, r3, #1
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00c      	beq.n	8006df4 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dde:	3b01      	subs	r3, #1
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	3b01      	subs	r3, #1
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d005      	beq.n	8006e0a <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e02:	2204      	movs	r2, #4
 8006e04:	431a      	orrs	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2242      	movs	r2, #66	@ 0x42
 8006e0e:	2100      	movs	r1, #0
 8006e10:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d013      	beq.n	8006e48 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	0011      	movs	r1, r2
 8006e28:	0018      	movs	r0, r3
 8006e2a:	f000 f8b7 	bl	8006f9c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2241      	movs	r2, #65	@ 0x41
 8006e32:	5c9b      	ldrb	r3, [r3, r2]
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b28      	cmp	r3, #40	@ 0x28
 8006e38:	d147      	bne.n	8006eca <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	0011      	movs	r1, r2
 8006e40:	0018      	movs	r0, r3
 8006e42:	f000 f853 	bl	8006eec <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e46:	e040      	b.n	8006eca <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e4c:	4a26      	ldr	r2, [pc, #152]	@ (8006ee8 <I2C_ITSlaveCplt+0x23c>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d016      	beq.n	8006e80 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	0018      	movs	r0, r3
 8006e56:	f7ff fdf7 	bl	8006a48 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a22      	ldr	r2, [pc, #136]	@ (8006ee8 <I2C_ITSlaveCplt+0x23c>)
 8006e5e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2241      	movs	r2, #65	@ 0x41
 8006e64:	2120      	movs	r1, #32
 8006e66:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2240      	movs	r2, #64	@ 0x40
 8006e72:	2100      	movs	r1, #0
 8006e74:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	0018      	movs	r0, r3
 8006e7a:	f7fe ffae 	bl	8005dda <HAL_I2C_ListenCpltCallback>
}
 8006e7e:	e024      	b.n	8006eca <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2241      	movs	r2, #65	@ 0x41
 8006e84:	5c9b      	ldrb	r3, [r3, r2]
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b22      	cmp	r3, #34	@ 0x22
 8006e8a:	d10f      	bne.n	8006eac <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2241      	movs	r2, #65	@ 0x41
 8006e90:	2120      	movs	r1, #32
 8006e92:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2240      	movs	r2, #64	@ 0x40
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	0018      	movs	r0, r3
 8006ea6:	f7fe ff80 	bl	8005daa <HAL_I2C_SlaveRxCpltCallback>
}
 8006eaa:	e00e      	b.n	8006eca <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2241      	movs	r2, #65	@ 0x41
 8006eb0:	2120      	movs	r1, #32
 8006eb2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2240      	movs	r2, #64	@ 0x40
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	0018      	movs	r0, r3
 8006ec6:	f7fe ff68 	bl	8005d9a <HAL_I2C_SlaveTxCpltCallback>
}
 8006eca:	46c0      	nop			@ (mov r8, r8)
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	b006      	add	sp, #24
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	46c0      	nop			@ (mov r8, r8)
 8006ed4:	00008001 	.word	0x00008001
 8006ed8:	00008002 	.word	0x00008002
 8006edc:	fe00e800 	.word	0xfe00e800
 8006ee0:	ffffbfff 	.word	0xffffbfff
 8006ee4:	ffff7fff 	.word	0xffff7fff
 8006ee8:	ffff0000 	.word	0xffff0000

08006eec <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a26      	ldr	r2, [pc, #152]	@ (8006f94 <I2C_ITListenCplt+0xa8>)
 8006efa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2241      	movs	r2, #65	@ 0x41
 8006f06:	2120      	movs	r1, #32
 8006f08:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2242      	movs	r2, #66	@ 0x42
 8006f0e:	2100      	movs	r1, #0
 8006f10:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	2204      	movs	r2, #4
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	d022      	beq.n	8006f66 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2a:	b2d2      	uxtb	r2, r2
 8006f2c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f32:	1c5a      	adds	r2, r3, #1
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d012      	beq.n	8006f66 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f44:	3b01      	subs	r3, #1
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	3b01      	subs	r3, #1
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f5e:	2204      	movs	r2, #4
 8006f60:	431a      	orrs	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006f66:	4a0c      	ldr	r2, [pc, #48]	@ (8006f98 <I2C_ITListenCplt+0xac>)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	0011      	movs	r1, r2
 8006f6c:	0018      	movs	r0, r3
 8006f6e:	f000 fb03 	bl	8007578 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2210      	movs	r2, #16
 8006f78:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2240      	movs	r2, #64	@ 0x40
 8006f7e:	2100      	movs	r1, #0
 8006f80:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	0018      	movs	r0, r3
 8006f86:	f7fe ff28 	bl	8005dda <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006f8a:	46c0      	nop			@ (mov r8, r8)
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	b002      	add	sp, #8
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	46c0      	nop			@ (mov r8, r8)
 8006f94:	ffff0000 	.word	0xffff0000
 8006f98:	00008003 	.word	0x00008003

08006f9c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006fa6:	200f      	movs	r0, #15
 8006fa8:	183b      	adds	r3, r7, r0
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	2141      	movs	r1, #65	@ 0x41
 8006fae:	5c52      	ldrb	r2, [r2, r1]
 8006fb0:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2242      	movs	r2, #66	@ 0x42
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a72      	ldr	r2, [pc, #456]	@ (8007188 <I2C_ITError+0x1ec>)
 8006fbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006fd2:	183b      	adds	r3, r7, r0
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	2b28      	cmp	r3, #40	@ 0x28
 8006fd8:	d007      	beq.n	8006fea <I2C_ITError+0x4e>
 8006fda:	183b      	adds	r3, r7, r0
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	2b29      	cmp	r3, #41	@ 0x29
 8006fe0:	d003      	beq.n	8006fea <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006fe2:	183b      	adds	r3, r7, r0
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fe8:	d10c      	bne.n	8007004 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2103      	movs	r1, #3
 8006fee:	0018      	movs	r0, r3
 8006ff0:	f000 fac2 	bl	8007578 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2241      	movs	r2, #65	@ 0x41
 8006ff8:	2128      	movs	r1, #40	@ 0x28
 8006ffa:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a63      	ldr	r2, [pc, #396]	@ (800718c <I2C_ITError+0x1f0>)
 8007000:	635a      	str	r2, [r3, #52]	@ 0x34
 8007002:	e032      	b.n	800706a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007004:	4a62      	ldr	r2, [pc, #392]	@ (8007190 <I2C_ITError+0x1f4>)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	0011      	movs	r1, r2
 800700a:	0018      	movs	r0, r3
 800700c:	f000 fab4 	bl	8007578 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	0018      	movs	r0, r3
 8007014:	f000 f8ed 	bl	80071f2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2241      	movs	r2, #65	@ 0x41
 800701c:	5c9b      	ldrb	r3, [r3, r2]
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b60      	cmp	r3, #96	@ 0x60
 8007022:	d01f      	beq.n	8007064 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2241      	movs	r2, #65	@ 0x41
 8007028:	2120      	movs	r1, #32
 800702a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	2220      	movs	r2, #32
 8007034:	4013      	ands	r3, r2
 8007036:	2b20      	cmp	r3, #32
 8007038:	d114      	bne.n	8007064 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	2210      	movs	r2, #16
 8007042:	4013      	ands	r3, r2
 8007044:	2b10      	cmp	r3, #16
 8007046:	d109      	bne.n	800705c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2210      	movs	r2, #16
 800704e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007054:	2204      	movs	r2, #4
 8007056:	431a      	orrs	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2220      	movs	r2, #32
 8007062:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800706e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007074:	2b00      	cmp	r3, #0
 8007076:	d03b      	beq.n	80070f0 <I2C_ITError+0x154>
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2b11      	cmp	r3, #17
 800707c:	d002      	beq.n	8007084 <I2C_ITError+0xe8>
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	2b21      	cmp	r3, #33	@ 0x21
 8007082:	d135      	bne.n	80070f0 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	2380      	movs	r3, #128	@ 0x80
 800708c:	01db      	lsls	r3, r3, #7
 800708e:	401a      	ands	r2, r3
 8007090:	2380      	movs	r3, #128	@ 0x80
 8007092:	01db      	lsls	r3, r3, #7
 8007094:	429a      	cmp	r2, r3
 8007096:	d107      	bne.n	80070a8 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	493c      	ldr	r1, [pc, #240]	@ (8007194 <I2C_ITError+0x1f8>)
 80070a4:	400a      	ands	r2, r1
 80070a6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ac:	0018      	movs	r0, r3
 80070ae:	f7fe f95e 	bl	800536e <HAL_DMA_GetState>
 80070b2:	0003      	movs	r3, r0
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d016      	beq.n	80070e6 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070bc:	4a36      	ldr	r2, [pc, #216]	@ (8007198 <I2C_ITError+0x1fc>)
 80070be:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2240      	movs	r2, #64	@ 0x40
 80070c4:	2100      	movs	r1, #0
 80070c6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070cc:	0018      	movs	r0, r3
 80070ce:	f7fe f859 	bl	8005184 <HAL_DMA_Abort_IT>
 80070d2:	1e03      	subs	r3, r0, #0
 80070d4:	d051      	beq.n	800717a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e0:	0018      	movs	r0, r3
 80070e2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070e4:	e049      	b.n	800717a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	0018      	movs	r0, r3
 80070ea:	f000 f859 	bl	80071a0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070ee:	e044      	b.n	800717a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d03b      	beq.n	8007170 <I2C_ITError+0x1d4>
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2b12      	cmp	r3, #18
 80070fc:	d002      	beq.n	8007104 <I2C_ITError+0x168>
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	2b22      	cmp	r3, #34	@ 0x22
 8007102:	d135      	bne.n	8007170 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	2380      	movs	r3, #128	@ 0x80
 800710c:	021b      	lsls	r3, r3, #8
 800710e:	401a      	ands	r2, r3
 8007110:	2380      	movs	r3, #128	@ 0x80
 8007112:	021b      	lsls	r3, r3, #8
 8007114:	429a      	cmp	r2, r3
 8007116:	d107      	bne.n	8007128 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	491e      	ldr	r1, [pc, #120]	@ (800719c <I2C_ITError+0x200>)
 8007124:	400a      	ands	r2, r1
 8007126:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800712c:	0018      	movs	r0, r3
 800712e:	f7fe f91e 	bl	800536e <HAL_DMA_GetState>
 8007132:	0003      	movs	r3, r0
 8007134:	2b01      	cmp	r3, #1
 8007136:	d016      	beq.n	8007166 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800713c:	4a16      	ldr	r2, [pc, #88]	@ (8007198 <I2C_ITError+0x1fc>)
 800713e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2240      	movs	r2, #64	@ 0x40
 8007144:	2100      	movs	r1, #0
 8007146:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800714c:	0018      	movs	r0, r3
 800714e:	f7fe f819 	bl	8005184 <HAL_DMA_Abort_IT>
 8007152:	1e03      	subs	r3, r0, #0
 8007154:	d013      	beq.n	800717e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800715a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007160:	0018      	movs	r0, r3
 8007162:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007164:	e00b      	b.n	800717e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	0018      	movs	r0, r3
 800716a:	f000 f819 	bl	80071a0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800716e:	e006      	b.n	800717e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	0018      	movs	r0, r3
 8007174:	f000 f814 	bl	80071a0 <I2C_TreatErrorCallback>
  }
}
 8007178:	e002      	b.n	8007180 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800717a:	46c0      	nop			@ (mov r8, r8)
 800717c:	e000      	b.n	8007180 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800717e:	46c0      	nop			@ (mov r8, r8)
}
 8007180:	46c0      	nop			@ (mov r8, r8)
 8007182:	46bd      	mov	sp, r7
 8007184:	b004      	add	sp, #16
 8007186:	bd80      	pop	{r7, pc}
 8007188:	ffff0000 	.word	0xffff0000
 800718c:	08006081 	.word	0x08006081
 8007190:	00008003 	.word	0x00008003
 8007194:	ffffbfff 	.word	0xffffbfff
 8007198:	080073ab 	.word	0x080073ab
 800719c:	ffff7fff 	.word	0xffff7fff

080071a0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2241      	movs	r2, #65	@ 0x41
 80071ac:	5c9b      	ldrb	r3, [r3, r2]
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	2b60      	cmp	r3, #96	@ 0x60
 80071b2:	d10f      	bne.n	80071d4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2241      	movs	r2, #65	@ 0x41
 80071b8:	2120      	movs	r1, #32
 80071ba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2240      	movs	r2, #64	@ 0x40
 80071c6:	2100      	movs	r1, #0
 80071c8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	0018      	movs	r0, r3
 80071ce:	f7fe fe24 	bl	8005e1a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80071d2:	e00a      	b.n	80071ea <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2240      	movs	r2, #64	@ 0x40
 80071de:	2100      	movs	r1, #0
 80071e0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	0018      	movs	r0, r3
 80071e6:	f7fe fe10 	bl	8005e0a <HAL_I2C_ErrorCallback>
}
 80071ea:	46c0      	nop			@ (mov r8, r8)
 80071ec:	46bd      	mov	sp, r7
 80071ee:	b002      	add	sp, #8
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b082      	sub	sp, #8
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	2202      	movs	r2, #2
 8007202:	4013      	ands	r3, r2
 8007204:	2b02      	cmp	r3, #2
 8007206:	d103      	bne.n	8007210 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2200      	movs	r2, #0
 800720e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	2201      	movs	r2, #1
 8007218:	4013      	ands	r3, r2
 800721a:	2b01      	cmp	r3, #1
 800721c:	d007      	beq.n	800722e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	699a      	ldr	r2, [r3, #24]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2101      	movs	r1, #1
 800722a:	430a      	orrs	r2, r1
 800722c:	619a      	str	r2, [r3, #24]
  }
}
 800722e:	46c0      	nop			@ (mov r8, r8)
 8007230:	46bd      	mov	sp, r7
 8007232:	b002      	add	sp, #8
 8007234:	bd80      	pop	{r7, pc}
	...

08007238 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007244:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4920      	ldr	r1, [pc, #128]	@ (80072d4 <I2C_DMAMasterTransmitCplt+0x9c>)
 8007252:	400a      	ands	r2, r1
 8007254:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800725a:	b29b      	uxth	r3, r3
 800725c:	2b00      	cmp	r3, #0
 800725e:	d105      	bne.n	800726c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2120      	movs	r1, #32
 8007264:	0018      	movs	r0, r3
 8007266:	f000 f8f9 	bl	800745c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800726a:	e02e      	b.n	80072ca <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007274:	189a      	adds	r2, r3, r2
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800727e:	b29b      	uxth	r3, r3
 8007280:	2bff      	cmp	r3, #255	@ 0xff
 8007282:	d903      	bls.n	800728c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	22ff      	movs	r2, #255	@ 0xff
 8007288:	851a      	strh	r2, [r3, #40]	@ 0x28
 800728a:	e004      	b.n	8007296 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007290:	b29a      	uxth	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800729e:	0019      	movs	r1, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	3328      	adds	r3, #40	@ 0x28
 80072a6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80072ac:	f7fd ff04 	bl	80050b8 <HAL_DMA_Start_IT>
 80072b0:	1e03      	subs	r3, r0, #0
 80072b2:	d005      	beq.n	80072c0 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2110      	movs	r1, #16
 80072b8:	0018      	movs	r0, r3
 80072ba:	f7ff fe6f 	bl	8006f9c <I2C_ITError>
}
 80072be:	e004      	b.n	80072ca <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2140      	movs	r1, #64	@ 0x40
 80072c4:	0018      	movs	r0, r3
 80072c6:	f000 f8c9 	bl	800745c <I2C_Enable_IRQ>
}
 80072ca:	46c0      	nop			@ (mov r8, r8)
 80072cc:	46bd      	mov	sp, r7
 80072ce:	b004      	add	sp, #16
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	46c0      	nop			@ (mov r8, r8)
 80072d4:	ffffbfff 	.word	0xffffbfff

080072d8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4920      	ldr	r1, [pc, #128]	@ (8007374 <I2C_DMAMasterReceiveCplt+0x9c>)
 80072f2:	400a      	ands	r2, r1
 80072f4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d105      	bne.n	800730c <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2120      	movs	r1, #32
 8007304:	0018      	movs	r0, r3
 8007306:	f000 f8a9 	bl	800745c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800730a:	e02e      	b.n	800736a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007314:	189a      	adds	r2, r3, r2
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800731e:	b29b      	uxth	r3, r3
 8007320:	2bff      	cmp	r3, #255	@ 0xff
 8007322:	d903      	bls.n	800732c <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	22ff      	movs	r2, #255	@ 0xff
 8007328:	851a      	strh	r2, [r3, #40]	@ 0x28
 800732a:	e004      	b.n	8007336 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007330:	b29a      	uxth	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3324      	adds	r3, #36	@ 0x24
 8007340:	0019      	movs	r1, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007346:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800734c:	f7fd feb4 	bl	80050b8 <HAL_DMA_Start_IT>
 8007350:	1e03      	subs	r3, r0, #0
 8007352:	d005      	beq.n	8007360 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2110      	movs	r1, #16
 8007358:	0018      	movs	r0, r3
 800735a:	f7ff fe1f 	bl	8006f9c <I2C_ITError>
}
 800735e:	e004      	b.n	800736a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2140      	movs	r1, #64	@ 0x40
 8007364:	0018      	movs	r0, r3
 8007366:	f000 f879 	bl	800745c <I2C_Enable_IRQ>
}
 800736a:	46c0      	nop			@ (mov r8, r8)
 800736c:	46bd      	mov	sp, r7
 800736e:	b004      	add	sp, #16
 8007370:	bd80      	pop	{r7, pc}
 8007372:	46c0      	nop			@ (mov r8, r8)
 8007374:	ffff7fff 	.word	0xffff7fff

08007378 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007384:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	685a      	ldr	r2, [r3, #4]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2180      	movs	r1, #128	@ 0x80
 8007392:	0209      	lsls	r1, r1, #8
 8007394:	430a      	orrs	r2, r1
 8007396:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2110      	movs	r1, #16
 800739c:	0018      	movs	r0, r3
 800739e:	f7ff fdfd 	bl	8006f9c <I2C_ITError>
}
 80073a2:	46c0      	nop			@ (mov r8, r8)
 80073a4:	46bd      	mov	sp, r7
 80073a6:	b004      	add	sp, #16
 80073a8:	bd80      	pop	{r7, pc}

080073aa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b084      	sub	sp, #16
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d003      	beq.n	80073c8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c4:	2200      	movs	r2, #0
 80073c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d003      	beq.n	80073d8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073d4:	2200      	movs	r2, #0
 80073d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	0018      	movs	r0, r3
 80073dc:	f7ff fee0 	bl	80071a0 <I2C_TreatErrorCallback>
}
 80073e0:	46c0      	nop			@ (mov r8, r8)
 80073e2:	46bd      	mov	sp, r7
 80073e4:	b004      	add	sp, #16
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80073e8:	b590      	push	{r4, r7, lr}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	0008      	movs	r0, r1
 80073f2:	0011      	movs	r1, r2
 80073f4:	607b      	str	r3, [r7, #4]
 80073f6:	240a      	movs	r4, #10
 80073f8:	193b      	adds	r3, r7, r4
 80073fa:	1c02      	adds	r2, r0, #0
 80073fc:	801a      	strh	r2, [r3, #0]
 80073fe:	2009      	movs	r0, #9
 8007400:	183b      	adds	r3, r7, r0
 8007402:	1c0a      	adds	r2, r1, #0
 8007404:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007406:	193b      	adds	r3, r7, r4
 8007408:	881b      	ldrh	r3, [r3, #0]
 800740a:	059b      	lsls	r3, r3, #22
 800740c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800740e:	183b      	adds	r3, r7, r0
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	0419      	lsls	r1, r3, #16
 8007414:	23ff      	movs	r3, #255	@ 0xff
 8007416:	041b      	lsls	r3, r3, #16
 8007418:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800741a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007422:	4313      	orrs	r3, r2
 8007424:	005b      	lsls	r3, r3, #1
 8007426:	085b      	lsrs	r3, r3, #1
 8007428:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007432:	0d51      	lsrs	r1, r2, #21
 8007434:	2280      	movs	r2, #128	@ 0x80
 8007436:	00d2      	lsls	r2, r2, #3
 8007438:	400a      	ands	r2, r1
 800743a:	4907      	ldr	r1, [pc, #28]	@ (8007458 <I2C_TransferConfig+0x70>)
 800743c:	430a      	orrs	r2, r1
 800743e:	43d2      	mvns	r2, r2
 8007440:	401a      	ands	r2, r3
 8007442:	0011      	movs	r1, r2
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	430a      	orrs	r2, r1
 800744c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800744e:	46c0      	nop			@ (mov r8, r8)
 8007450:	46bd      	mov	sp, r7
 8007452:	b007      	add	sp, #28
 8007454:	bd90      	pop	{r4, r7, pc}
 8007456:	46c0      	nop			@ (mov r8, r8)
 8007458:	03ff63ff 	.word	0x03ff63ff

0800745c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	000a      	movs	r2, r1
 8007466:	1cbb      	adds	r3, r7, #2
 8007468:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800746a:	2300      	movs	r3, #0
 800746c:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007472:	4b3e      	ldr	r3, [pc, #248]	@ (800756c <I2C_Enable_IRQ+0x110>)
 8007474:	429a      	cmp	r2, r3
 8007476:	d035      	beq.n	80074e4 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800747c:	4b3c      	ldr	r3, [pc, #240]	@ (8007570 <I2C_Enable_IRQ+0x114>)
 800747e:	429a      	cmp	r2, r3
 8007480:	d030      	beq.n	80074e4 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007486:	4b3b      	ldr	r3, [pc, #236]	@ (8007574 <I2C_Enable_IRQ+0x118>)
 8007488:	429a      	cmp	r2, r3
 800748a:	d02b      	beq.n	80074e4 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800748c:	1cbb      	adds	r3, r7, #2
 800748e:	2200      	movs	r2, #0
 8007490:	5e9b      	ldrsh	r3, [r3, r2]
 8007492:	2b00      	cmp	r3, #0
 8007494:	da03      	bge.n	800749e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	22b8      	movs	r2, #184	@ 0xb8
 800749a:	4313      	orrs	r3, r2
 800749c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800749e:	1cbb      	adds	r3, r7, #2
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	2201      	movs	r2, #1
 80074a4:	4013      	ands	r3, r2
 80074a6:	d003      	beq.n	80074b0 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	22f2      	movs	r2, #242	@ 0xf2
 80074ac:	4313      	orrs	r3, r2
 80074ae:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80074b0:	1cbb      	adds	r3, r7, #2
 80074b2:	881b      	ldrh	r3, [r3, #0]
 80074b4:	2202      	movs	r2, #2
 80074b6:	4013      	ands	r3, r2
 80074b8:	d003      	beq.n	80074c2 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	22f4      	movs	r2, #244	@ 0xf4
 80074be:	4313      	orrs	r3, r2
 80074c0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80074c2:	1cbb      	adds	r3, r7, #2
 80074c4:	881b      	ldrh	r3, [r3, #0]
 80074c6:	2b10      	cmp	r3, #16
 80074c8:	d103      	bne.n	80074d2 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2290      	movs	r2, #144	@ 0x90
 80074ce:	4313      	orrs	r3, r2
 80074d0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80074d2:	1cbb      	adds	r3, r7, #2
 80074d4:	881b      	ldrh	r3, [r3, #0]
 80074d6:	2b20      	cmp	r3, #32
 80074d8:	d13c      	bne.n	8007554 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2220      	movs	r2, #32
 80074de:	4313      	orrs	r3, r2
 80074e0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80074e2:	e037      	b.n	8007554 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80074e4:	1cbb      	adds	r3, r7, #2
 80074e6:	2200      	movs	r2, #0
 80074e8:	5e9b      	ldrsh	r3, [r3, r2]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	da03      	bge.n	80074f6 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	22b8      	movs	r2, #184	@ 0xb8
 80074f2:	4313      	orrs	r3, r2
 80074f4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80074f6:	1cbb      	adds	r3, r7, #2
 80074f8:	881b      	ldrh	r3, [r3, #0]
 80074fa:	2201      	movs	r2, #1
 80074fc:	4013      	ands	r3, r2
 80074fe:	d003      	beq.n	8007508 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	22f2      	movs	r2, #242	@ 0xf2
 8007504:	4313      	orrs	r3, r2
 8007506:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007508:	1cbb      	adds	r3, r7, #2
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	2202      	movs	r2, #2
 800750e:	4013      	ands	r3, r2
 8007510:	d003      	beq.n	800751a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	22f4      	movs	r2, #244	@ 0xf4
 8007516:	4313      	orrs	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800751a:	1cbb      	adds	r3, r7, #2
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	2b10      	cmp	r3, #16
 8007520:	d103      	bne.n	800752a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2290      	movs	r2, #144	@ 0x90
 8007526:	4313      	orrs	r3, r2
 8007528:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800752a:	1cbb      	adds	r3, r7, #2
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	2b20      	cmp	r3, #32
 8007530:	d103      	bne.n	800753a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2260      	movs	r2, #96	@ 0x60
 8007536:	4313      	orrs	r3, r2
 8007538:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800753e:	4b0d      	ldr	r3, [pc, #52]	@ (8007574 <I2C_Enable_IRQ+0x118>)
 8007540:	429a      	cmp	r2, r3
 8007542:	d007      	beq.n	8007554 <I2C_Enable_IRQ+0xf8>
 8007544:	1cbb      	adds	r3, r7, #2
 8007546:	881b      	ldrh	r3, [r3, #0]
 8007548:	2b40      	cmp	r3, #64	@ 0x40
 800754a:	d103      	bne.n	8007554 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2240      	movs	r2, #64	@ 0x40
 8007550:	4313      	orrs	r3, r2
 8007552:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6819      	ldr	r1, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	430a      	orrs	r2, r1
 8007562:	601a      	str	r2, [r3, #0]
}
 8007564:	46c0      	nop			@ (mov r8, r8)
 8007566:	46bd      	mov	sp, r7
 8007568:	b004      	add	sp, #16
 800756a:	bd80      	pop	{r7, pc}
 800756c:	08006281 	.word	0x08006281
 8007570:	080066b1 	.word	0x080066b1
 8007574:	08006479 	.word	0x08006479

08007578 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	000a      	movs	r2, r1
 8007582:	1cbb      	adds	r3, r7, #2
 8007584:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8007586:	2300      	movs	r3, #0
 8007588:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800758a:	1cbb      	adds	r3, r7, #2
 800758c:	881b      	ldrh	r3, [r3, #0]
 800758e:	2201      	movs	r2, #1
 8007590:	4013      	ands	r3, r2
 8007592:	d010      	beq.n	80075b6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2242      	movs	r2, #66	@ 0x42
 8007598:	4313      	orrs	r3, r2
 800759a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2241      	movs	r2, #65	@ 0x41
 80075a0:	5c9b      	ldrb	r3, [r3, r2]
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	001a      	movs	r2, r3
 80075a6:	2328      	movs	r3, #40	@ 0x28
 80075a8:	4013      	ands	r3, r2
 80075aa:	2b28      	cmp	r3, #40	@ 0x28
 80075ac:	d003      	beq.n	80075b6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	22b0      	movs	r2, #176	@ 0xb0
 80075b2:	4313      	orrs	r3, r2
 80075b4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80075b6:	1cbb      	adds	r3, r7, #2
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	2202      	movs	r2, #2
 80075bc:	4013      	ands	r3, r2
 80075be:	d010      	beq.n	80075e2 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2244      	movs	r2, #68	@ 0x44
 80075c4:	4313      	orrs	r3, r2
 80075c6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2241      	movs	r2, #65	@ 0x41
 80075cc:	5c9b      	ldrb	r3, [r3, r2]
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	001a      	movs	r2, r3
 80075d2:	2328      	movs	r3, #40	@ 0x28
 80075d4:	4013      	ands	r3, r2
 80075d6:	2b28      	cmp	r3, #40	@ 0x28
 80075d8:	d003      	beq.n	80075e2 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	22b0      	movs	r2, #176	@ 0xb0
 80075de:	4313      	orrs	r3, r2
 80075e0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80075e2:	1cbb      	adds	r3, r7, #2
 80075e4:	2200      	movs	r2, #0
 80075e6:	5e9b      	ldrsh	r3, [r3, r2]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	da03      	bge.n	80075f4 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	22b8      	movs	r2, #184	@ 0xb8
 80075f0:	4313      	orrs	r3, r2
 80075f2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80075f4:	1cbb      	adds	r3, r7, #2
 80075f6:	881b      	ldrh	r3, [r3, #0]
 80075f8:	2b10      	cmp	r3, #16
 80075fa:	d103      	bne.n	8007604 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2290      	movs	r2, #144	@ 0x90
 8007600:	4313      	orrs	r3, r2
 8007602:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007604:	1cbb      	adds	r3, r7, #2
 8007606:	881b      	ldrh	r3, [r3, #0]
 8007608:	2b20      	cmp	r3, #32
 800760a:	d103      	bne.n	8007614 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2220      	movs	r2, #32
 8007610:	4313      	orrs	r3, r2
 8007612:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007614:	1cbb      	adds	r3, r7, #2
 8007616:	881b      	ldrh	r3, [r3, #0]
 8007618:	2b40      	cmp	r3, #64	@ 0x40
 800761a:	d103      	bne.n	8007624 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2240      	movs	r2, #64	@ 0x40
 8007620:	4313      	orrs	r3, r2
 8007622:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	43d9      	mvns	r1, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	400a      	ands	r2, r1
 8007634:	601a      	str	r2, [r3, #0]
}
 8007636:	46c0      	nop			@ (mov r8, r8)
 8007638:	46bd      	mov	sp, r7
 800763a:	b004      	add	sp, #16
 800763c:	bd80      	pop	{r7, pc}
	...

08007640 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2241      	movs	r2, #65	@ 0x41
 800764e:	5c9b      	ldrb	r3, [r3, r2]
 8007650:	b2db      	uxtb	r3, r3
 8007652:	2b20      	cmp	r3, #32
 8007654:	d138      	bne.n	80076c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2240      	movs	r2, #64	@ 0x40
 800765a:	5c9b      	ldrb	r3, [r3, r2]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d101      	bne.n	8007664 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007660:	2302      	movs	r3, #2
 8007662:	e032      	b.n	80076ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2240      	movs	r2, #64	@ 0x40
 8007668:	2101      	movs	r1, #1
 800766a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2241      	movs	r2, #65	@ 0x41
 8007670:	2124      	movs	r1, #36	@ 0x24
 8007672:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2101      	movs	r1, #1
 8007680:	438a      	bics	r2, r1
 8007682:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4911      	ldr	r1, [pc, #68]	@ (80076d4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007690:	400a      	ands	r2, r1
 8007692:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6819      	ldr	r1, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	683a      	ldr	r2, [r7, #0]
 80076a0:	430a      	orrs	r2, r1
 80076a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2101      	movs	r1, #1
 80076b0:	430a      	orrs	r2, r1
 80076b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2241      	movs	r2, #65	@ 0x41
 80076b8:	2120      	movs	r1, #32
 80076ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2240      	movs	r2, #64	@ 0x40
 80076c0:	2100      	movs	r1, #0
 80076c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80076c4:	2300      	movs	r3, #0
 80076c6:	e000      	b.n	80076ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80076c8:	2302      	movs	r3, #2
  }
}
 80076ca:	0018      	movs	r0, r3
 80076cc:	46bd      	mov	sp, r7
 80076ce:	b002      	add	sp, #8
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	46c0      	nop			@ (mov r8, r8)
 80076d4:	ffffefff 	.word	0xffffefff

080076d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2241      	movs	r2, #65	@ 0x41
 80076e6:	5c9b      	ldrb	r3, [r3, r2]
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b20      	cmp	r3, #32
 80076ec:	d139      	bne.n	8007762 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2240      	movs	r2, #64	@ 0x40
 80076f2:	5c9b      	ldrb	r3, [r3, r2]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d101      	bne.n	80076fc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80076f8:	2302      	movs	r3, #2
 80076fa:	e033      	b.n	8007764 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2240      	movs	r2, #64	@ 0x40
 8007700:	2101      	movs	r1, #1
 8007702:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2241      	movs	r2, #65	@ 0x41
 8007708:	2124      	movs	r1, #36	@ 0x24
 800770a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2101      	movs	r1, #1
 8007718:	438a      	bics	r2, r1
 800771a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	4a11      	ldr	r2, [pc, #68]	@ (800776c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007728:	4013      	ands	r3, r2
 800772a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	021b      	lsls	r3, r3, #8
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	4313      	orrs	r3, r2
 8007734:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2101      	movs	r1, #1
 800774a:	430a      	orrs	r2, r1
 800774c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2241      	movs	r2, #65	@ 0x41
 8007752:	2120      	movs	r1, #32
 8007754:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2240      	movs	r2, #64	@ 0x40
 800775a:	2100      	movs	r1, #0
 800775c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	e000      	b.n	8007764 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007762:	2302      	movs	r3, #2
  }
}
 8007764:	0018      	movs	r0, r3
 8007766:	46bd      	mov	sp, r7
 8007768:	b004      	add	sp, #16
 800776a:	bd80      	pop	{r7, pc}
 800776c:	fffff0ff 	.word	0xfffff0ff

08007770 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b088      	sub	sp, #32
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e0e1      	b.n	8007946 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2235      	movs	r2, #53	@ 0x35
 8007786:	5c9b      	ldrb	r3, [r3, r2]
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b00      	cmp	r3, #0
 800778c:	d107      	bne.n	800779e <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2234      	movs	r2, #52	@ 0x34
 8007792:	2100      	movs	r1, #0
 8007794:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	0018      	movs	r0, r3
 800779a:	f7fb ff05 	bl	80035a8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2235      	movs	r2, #53	@ 0x35
 80077a2:	2102      	movs	r1, #2
 80077a4:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	69da      	ldr	r2, [r3, #28]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4967      	ldr	r1, [pc, #412]	@ (8007950 <HAL_I2S_Init+0x1e0>)
 80077b2:	400a      	ands	r2, r1
 80077b4:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2202      	movs	r2, #2
 80077bc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d073      	beq.n	80078ae <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d102      	bne.n	80077d4 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80077ce:	2310      	movs	r3, #16
 80077d0:	617b      	str	r3, [r7, #20]
 80077d2:	e001      	b.n	80077d8 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80077d4:	2320      	movs	r3, #32
 80077d6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	2b20      	cmp	r3, #32
 80077de:	d802      	bhi.n	80077e6 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	005b      	lsls	r3, r3, #1
 80077e4:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 80077e6:	f000 fddf 	bl	80083a8 <HAL_RCC_GetSysClockFreq>
 80077ea:	0003      	movs	r3, r0
 80077ec:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	691a      	ldr	r2, [r3, #16]
 80077f2:	2380      	movs	r3, #128	@ 0x80
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d131      	bne.n	800785e <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d016      	beq.n	8007830 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	0019      	movs	r1, r3
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f7f8 fc99 	bl	8000140 <__udivsi3>
 800780e:	0003      	movs	r3, r0
 8007810:	001a      	movs	r2, r3
 8007812:	0013      	movs	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	189b      	adds	r3, r3, r2
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	001a      	movs	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	695b      	ldr	r3, [r3, #20]
 8007820:	0019      	movs	r1, r3
 8007822:	0010      	movs	r0, r2
 8007824:	f7f8 fc8c 	bl	8000140 <__udivsi3>
 8007828:	0003      	movs	r3, r0
 800782a:	3305      	adds	r3, #5
 800782c:	613b      	str	r3, [r7, #16]
 800782e:	e02a      	b.n	8007886 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	00db      	lsls	r3, r3, #3
 8007834:	0019      	movs	r1, r3
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f7f8 fc82 	bl	8000140 <__udivsi3>
 800783c:	0003      	movs	r3, r0
 800783e:	001a      	movs	r2, r3
 8007840:	0013      	movs	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	189b      	adds	r3, r3, r2
 8007846:	005b      	lsls	r3, r3, #1
 8007848:	001a      	movs	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	0019      	movs	r1, r3
 8007850:	0010      	movs	r0, r2
 8007852:	f7f8 fc75 	bl	8000140 <__udivsi3>
 8007856:	0003      	movs	r3, r0
 8007858:	3305      	adds	r3, #5
 800785a:	613b      	str	r3, [r7, #16]
 800785c:	e013      	b.n	8007886 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800785e:	6979      	ldr	r1, [r7, #20]
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f7f8 fc6d 	bl	8000140 <__udivsi3>
 8007866:	0003      	movs	r3, r0
 8007868:	001a      	movs	r2, r3
 800786a:	0013      	movs	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	189b      	adds	r3, r3, r2
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	001a      	movs	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	695b      	ldr	r3, [r3, #20]
 8007878:	0019      	movs	r1, r3
 800787a:	0010      	movs	r0, r2
 800787c:	f7f8 fc60 	bl	8000140 <__udivsi3>
 8007880:	0003      	movs	r3, r0
 8007882:	3305      	adds	r3, #5
 8007884:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	210a      	movs	r1, #10
 800788a:	0018      	movs	r0, r3
 800788c:	f7f8 fc58 	bl	8000140 <__udivsi3>
 8007890:	0003      	movs	r3, r0
 8007892:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	2201      	movs	r2, #1
 8007898:	4013      	ands	r3, r2
 800789a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	085b      	lsrs	r3, r3, #1
 80078a4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	021b      	lsls	r3, r3, #8
 80078aa:	61bb      	str	r3, [r7, #24]
 80078ac:	e003      	b.n	80078b6 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80078ae:	2302      	movs	r3, #2
 80078b0:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80078b2:	2300      	movs	r3, #0
 80078b4:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d902      	bls.n	80078c2 <HAL_I2S_Init+0x152>
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	2bff      	cmp	r3, #255	@ 0xff
 80078c0:	d907      	bls.n	80078d2 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c6:	2210      	movs	r2, #16
 80078c8:	431a      	orrs	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e039      	b.n	8007946 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	691a      	ldr	r2, [r3, #16]
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	431a      	orrs	r2, r3
 80078da:	0011      	movs	r1, r2
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	69fa      	ldr	r2, [r7, #28]
 80078e2:	430a      	orrs	r2, r1
 80078e4:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	69db      	ldr	r3, [r3, #28]
 80078ec:	4a18      	ldr	r2, [pc, #96]	@ (8007950 <HAL_I2S_Init+0x1e0>)
 80078ee:	401a      	ands	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6859      	ldr	r1, [r3, #4]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	4319      	orrs	r1, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	4319      	orrs	r1, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	430b      	orrs	r3, r1
 8007906:	431a      	orrs	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2180      	movs	r1, #128	@ 0x80
 800790e:	0109      	lsls	r1, r1, #4
 8007910:	430a      	orrs	r2, r1
 8007912:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	2b30      	cmp	r3, #48	@ 0x30
 800791a:	d003      	beq.n	8007924 <HAL_I2S_Init+0x1b4>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	2bb0      	cmp	r3, #176	@ 0xb0
 8007922:	d108      	bne.n	8007936 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	69da      	ldr	r2, [r3, #28]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2180      	movs	r1, #128	@ 0x80
 8007930:	0149      	lsls	r1, r1, #5
 8007932:	430a      	orrs	r2, r1
 8007934:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2235      	movs	r2, #53	@ 0x35
 8007940:	2101      	movs	r1, #1
 8007942:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	0018      	movs	r0, r3
 8007948:	46bd      	mov	sp, r7
 800794a:	b008      	add	sp, #32
 800794c:	bd80      	pop	{r7, pc}
 800794e:	46c0      	nop			@ (mov r8, r8)
 8007950:	fffff040 	.word	0xfffff040

08007954 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8007958:	4b04      	ldr	r3, [pc, #16]	@ (800796c <HAL_PWR_EnableBkUpAccess+0x18>)
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	4b03      	ldr	r3, [pc, #12]	@ (800796c <HAL_PWR_EnableBkUpAccess+0x18>)
 800795e:	2180      	movs	r1, #128	@ 0x80
 8007960:	0049      	lsls	r1, r1, #1
 8007962:	430a      	orrs	r2, r1
 8007964:	601a      	str	r2, [r3, #0]
}
 8007966:	46c0      	nop			@ (mov r8, r8)
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	40007000 	.word	0x40007000

08007970 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007970:	b5b0      	push	{r4, r5, r7, lr}
 8007972:	b08a      	sub	sp, #40	@ 0x28
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d102      	bne.n	8007984 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	f000 fbbf 	bl	8008102 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007984:	4bc9      	ldr	r3, [pc, #804]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	220c      	movs	r2, #12
 800798a:	4013      	ands	r3, r2
 800798c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800798e:	4bc7      	ldr	r3, [pc, #796]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007990:	68da      	ldr	r2, [r3, #12]
 8007992:	2380      	movs	r3, #128	@ 0x80
 8007994:	025b      	lsls	r3, r3, #9
 8007996:	4013      	ands	r3, r2
 8007998:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2201      	movs	r2, #1
 80079a0:	4013      	ands	r3, r2
 80079a2:	d100      	bne.n	80079a6 <HAL_RCC_OscConfig+0x36>
 80079a4:	e07e      	b.n	8007aa4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	2b08      	cmp	r3, #8
 80079aa:	d007      	beq.n	80079bc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	2b0c      	cmp	r3, #12
 80079b0:	d112      	bne.n	80079d8 <HAL_RCC_OscConfig+0x68>
 80079b2:	69ba      	ldr	r2, [r7, #24]
 80079b4:	2380      	movs	r3, #128	@ 0x80
 80079b6:	025b      	lsls	r3, r3, #9
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d10d      	bne.n	80079d8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079bc:	4bbb      	ldr	r3, [pc, #748]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	2380      	movs	r3, #128	@ 0x80
 80079c2:	029b      	lsls	r3, r3, #10
 80079c4:	4013      	ands	r3, r2
 80079c6:	d100      	bne.n	80079ca <HAL_RCC_OscConfig+0x5a>
 80079c8:	e06b      	b.n	8007aa2 <HAL_RCC_OscConfig+0x132>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d167      	bne.n	8007aa2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	f000 fb95 	bl	8008102 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	2380      	movs	r3, #128	@ 0x80
 80079de:	025b      	lsls	r3, r3, #9
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d107      	bne.n	80079f4 <HAL_RCC_OscConfig+0x84>
 80079e4:	4bb1      	ldr	r3, [pc, #708]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	4bb0      	ldr	r3, [pc, #704]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 80079ea:	2180      	movs	r1, #128	@ 0x80
 80079ec:	0249      	lsls	r1, r1, #9
 80079ee:	430a      	orrs	r2, r1
 80079f0:	601a      	str	r2, [r3, #0]
 80079f2:	e027      	b.n	8007a44 <HAL_RCC_OscConfig+0xd4>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685a      	ldr	r2, [r3, #4]
 80079f8:	23a0      	movs	r3, #160	@ 0xa0
 80079fa:	02db      	lsls	r3, r3, #11
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d10e      	bne.n	8007a1e <HAL_RCC_OscConfig+0xae>
 8007a00:	4baa      	ldr	r3, [pc, #680]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	4ba9      	ldr	r3, [pc, #676]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007a06:	2180      	movs	r1, #128	@ 0x80
 8007a08:	02c9      	lsls	r1, r1, #11
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	601a      	str	r2, [r3, #0]
 8007a0e:	4ba7      	ldr	r3, [pc, #668]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	4ba6      	ldr	r3, [pc, #664]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007a14:	2180      	movs	r1, #128	@ 0x80
 8007a16:	0249      	lsls	r1, r1, #9
 8007a18:	430a      	orrs	r2, r1
 8007a1a:	601a      	str	r2, [r3, #0]
 8007a1c:	e012      	b.n	8007a44 <HAL_RCC_OscConfig+0xd4>
 8007a1e:	4ba3      	ldr	r3, [pc, #652]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	4ba2      	ldr	r3, [pc, #648]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007a24:	49a2      	ldr	r1, [pc, #648]	@ (8007cb0 <HAL_RCC_OscConfig+0x340>)
 8007a26:	400a      	ands	r2, r1
 8007a28:	601a      	str	r2, [r3, #0]
 8007a2a:	4ba0      	ldr	r3, [pc, #640]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	2380      	movs	r3, #128	@ 0x80
 8007a30:	025b      	lsls	r3, r3, #9
 8007a32:	4013      	ands	r3, r2
 8007a34:	60fb      	str	r3, [r7, #12]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	4b9c      	ldr	r3, [pc, #624]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	4b9b      	ldr	r3, [pc, #620]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007a3e:	499d      	ldr	r1, [pc, #628]	@ (8007cb4 <HAL_RCC_OscConfig+0x344>)
 8007a40:	400a      	ands	r2, r1
 8007a42:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d015      	beq.n	8007a78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a4c:	f7fd f9b0 	bl	8004db0 <HAL_GetTick>
 8007a50:	0003      	movs	r3, r0
 8007a52:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a54:	e009      	b.n	8007a6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a56:	f7fd f9ab 	bl	8004db0 <HAL_GetTick>
 8007a5a:	0002      	movs	r2, r0
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	2b64      	cmp	r3, #100	@ 0x64
 8007a62:	d902      	bls.n	8007a6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	f000 fb4c 	bl	8008102 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a6a:	4b90      	ldr	r3, [pc, #576]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	2380      	movs	r3, #128	@ 0x80
 8007a70:	029b      	lsls	r3, r3, #10
 8007a72:	4013      	ands	r3, r2
 8007a74:	d0ef      	beq.n	8007a56 <HAL_RCC_OscConfig+0xe6>
 8007a76:	e015      	b.n	8007aa4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a78:	f7fd f99a 	bl	8004db0 <HAL_GetTick>
 8007a7c:	0003      	movs	r3, r0
 8007a7e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007a80:	e008      	b.n	8007a94 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a82:	f7fd f995 	bl	8004db0 <HAL_GetTick>
 8007a86:	0002      	movs	r2, r0
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	2b64      	cmp	r3, #100	@ 0x64
 8007a8e:	d901      	bls.n	8007a94 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8007a90:	2303      	movs	r3, #3
 8007a92:	e336      	b.n	8008102 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007a94:	4b85      	ldr	r3, [pc, #532]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	2380      	movs	r3, #128	@ 0x80
 8007a9a:	029b      	lsls	r3, r3, #10
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	d1f0      	bne.n	8007a82 <HAL_RCC_OscConfig+0x112>
 8007aa0:	e000      	b.n	8007aa4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007aa2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2202      	movs	r2, #2
 8007aaa:	4013      	ands	r3, r2
 8007aac:	d100      	bne.n	8007ab0 <HAL_RCC_OscConfig+0x140>
 8007aae:	e099      	b.n	8007be4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab8:	2220      	movs	r2, #32
 8007aba:	4013      	ands	r3, r2
 8007abc:	d009      	beq.n	8007ad2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8007abe:	4b7b      	ldr	r3, [pc, #492]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	4b7a      	ldr	r3, [pc, #488]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007ac4:	2120      	movs	r1, #32
 8007ac6:	430a      	orrs	r2, r1
 8007ac8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8007aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007acc:	2220      	movs	r2, #32
 8007ace:	4393      	bics	r3, r2
 8007ad0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	2b04      	cmp	r3, #4
 8007ad6:	d005      	beq.n	8007ae4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	2b0c      	cmp	r3, #12
 8007adc:	d13e      	bne.n	8007b5c <HAL_RCC_OscConfig+0x1ec>
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d13b      	bne.n	8007b5c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8007ae4:	4b71      	ldr	r3, [pc, #452]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2204      	movs	r2, #4
 8007aea:	4013      	ands	r3, r2
 8007aec:	d004      	beq.n	8007af8 <HAL_RCC_OscConfig+0x188>
 8007aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d101      	bne.n	8007af8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e304      	b.n	8008102 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007af8:	4b6c      	ldr	r3, [pc, #432]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	4a6e      	ldr	r2, [pc, #440]	@ (8007cb8 <HAL_RCC_OscConfig+0x348>)
 8007afe:	4013      	ands	r3, r2
 8007b00:	0019      	movs	r1, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	021a      	lsls	r2, r3, #8
 8007b08:	4b68      	ldr	r3, [pc, #416]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8007b0e:	4b67      	ldr	r3, [pc, #412]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2209      	movs	r2, #9
 8007b14:	4393      	bics	r3, r2
 8007b16:	0019      	movs	r1, r3
 8007b18:	4b64      	ldr	r3, [pc, #400]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b1c:	430a      	orrs	r2, r1
 8007b1e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007b20:	f000 fc42 	bl	80083a8 <HAL_RCC_GetSysClockFreq>
 8007b24:	0001      	movs	r1, r0
 8007b26:	4b61      	ldr	r3, [pc, #388]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	091b      	lsrs	r3, r3, #4
 8007b2c:	220f      	movs	r2, #15
 8007b2e:	4013      	ands	r3, r2
 8007b30:	4a62      	ldr	r2, [pc, #392]	@ (8007cbc <HAL_RCC_OscConfig+0x34c>)
 8007b32:	5cd3      	ldrb	r3, [r2, r3]
 8007b34:	000a      	movs	r2, r1
 8007b36:	40da      	lsrs	r2, r3
 8007b38:	4b61      	ldr	r3, [pc, #388]	@ (8007cc0 <HAL_RCC_OscConfig+0x350>)
 8007b3a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8007b3c:	4b61      	ldr	r3, [pc, #388]	@ (8007cc4 <HAL_RCC_OscConfig+0x354>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2513      	movs	r5, #19
 8007b42:	197c      	adds	r4, r7, r5
 8007b44:	0018      	movs	r0, r3
 8007b46:	f7fd f8ed 	bl	8004d24 <HAL_InitTick>
 8007b4a:	0003      	movs	r3, r0
 8007b4c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8007b4e:	197b      	adds	r3, r7, r5
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d046      	beq.n	8007be4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8007b56:	197b      	adds	r3, r7, r5
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	e2d2      	b.n	8008102 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d027      	beq.n	8007bb2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8007b62:	4b52      	ldr	r3, [pc, #328]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2209      	movs	r2, #9
 8007b68:	4393      	bics	r3, r2
 8007b6a:	0019      	movs	r1, r3
 8007b6c:	4b4f      	ldr	r3, [pc, #316]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b70:	430a      	orrs	r2, r1
 8007b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b74:	f7fd f91c 	bl	8004db0 <HAL_GetTick>
 8007b78:	0003      	movs	r3, r0
 8007b7a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b7c:	e008      	b.n	8007b90 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b7e:	f7fd f917 	bl	8004db0 <HAL_GetTick>
 8007b82:	0002      	movs	r2, r0
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d901      	bls.n	8007b90 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	e2b8      	b.n	8008102 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b90:	4b46      	ldr	r3, [pc, #280]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2204      	movs	r2, #4
 8007b96:	4013      	ands	r3, r2
 8007b98:	d0f1      	beq.n	8007b7e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b9a:	4b44      	ldr	r3, [pc, #272]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	4a46      	ldr	r2, [pc, #280]	@ (8007cb8 <HAL_RCC_OscConfig+0x348>)
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	0019      	movs	r1, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	021a      	lsls	r2, r3, #8
 8007baa:	4b40      	ldr	r3, [pc, #256]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007bac:	430a      	orrs	r2, r1
 8007bae:	605a      	str	r2, [r3, #4]
 8007bb0:	e018      	b.n	8007be4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bb2:	4b3e      	ldr	r3, [pc, #248]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	4b3d      	ldr	r3, [pc, #244]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007bb8:	2101      	movs	r1, #1
 8007bba:	438a      	bics	r2, r1
 8007bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bbe:	f7fd f8f7 	bl	8004db0 <HAL_GetTick>
 8007bc2:	0003      	movs	r3, r0
 8007bc4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007bc6:	e008      	b.n	8007bda <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bc8:	f7fd f8f2 	bl	8004db0 <HAL_GetTick>
 8007bcc:	0002      	movs	r2, r0
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d901      	bls.n	8007bda <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e293      	b.n	8008102 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007bda:	4b34      	ldr	r3, [pc, #208]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2204      	movs	r2, #4
 8007be0:	4013      	ands	r3, r2
 8007be2:	d1f1      	bne.n	8007bc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2210      	movs	r2, #16
 8007bea:	4013      	ands	r3, r2
 8007bec:	d100      	bne.n	8007bf0 <HAL_RCC_OscConfig+0x280>
 8007bee:	e0a2      	b.n	8007d36 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d140      	bne.n	8007c78 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007bf6:	4b2d      	ldr	r3, [pc, #180]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	2380      	movs	r3, #128	@ 0x80
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4013      	ands	r3, r2
 8007c00:	d005      	beq.n	8007c0e <HAL_RCC_OscConfig+0x29e>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	69db      	ldr	r3, [r3, #28]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d101      	bne.n	8007c0e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e279      	b.n	8008102 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007c0e:	4b27      	ldr	r3, [pc, #156]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	4a2d      	ldr	r2, [pc, #180]	@ (8007cc8 <HAL_RCC_OscConfig+0x358>)
 8007c14:	4013      	ands	r3, r2
 8007c16:	0019      	movs	r1, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c1c:	4b23      	ldr	r3, [pc, #140]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007c22:	4b22      	ldr	r3, [pc, #136]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	021b      	lsls	r3, r3, #8
 8007c28:	0a19      	lsrs	r1, r3, #8
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	061a      	lsls	r2, r3, #24
 8007c30:	4b1e      	ldr	r3, [pc, #120]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007c32:	430a      	orrs	r2, r1
 8007c34:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c3a:	0b5b      	lsrs	r3, r3, #13
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	2280      	movs	r2, #128	@ 0x80
 8007c40:	0212      	lsls	r2, r2, #8
 8007c42:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8007c44:	4b19      	ldr	r3, [pc, #100]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	091b      	lsrs	r3, r3, #4
 8007c4a:	210f      	movs	r1, #15
 8007c4c:	400b      	ands	r3, r1
 8007c4e:	491b      	ldr	r1, [pc, #108]	@ (8007cbc <HAL_RCC_OscConfig+0x34c>)
 8007c50:	5ccb      	ldrb	r3, [r1, r3]
 8007c52:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007c54:	4b1a      	ldr	r3, [pc, #104]	@ (8007cc0 <HAL_RCC_OscConfig+0x350>)
 8007c56:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8007c58:	4b1a      	ldr	r3, [pc, #104]	@ (8007cc4 <HAL_RCC_OscConfig+0x354>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2513      	movs	r5, #19
 8007c5e:	197c      	adds	r4, r7, r5
 8007c60:	0018      	movs	r0, r3
 8007c62:	f7fd f85f 	bl	8004d24 <HAL_InitTick>
 8007c66:	0003      	movs	r3, r0
 8007c68:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8007c6a:	197b      	adds	r3, r7, r5
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d061      	beq.n	8007d36 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8007c72:	197b      	adds	r3, r7, r5
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	e244      	b.n	8008102 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	69db      	ldr	r3, [r3, #28]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d040      	beq.n	8007d02 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007c80:	4b0a      	ldr	r3, [pc, #40]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	4b09      	ldr	r3, [pc, #36]	@ (8007cac <HAL_RCC_OscConfig+0x33c>)
 8007c86:	2180      	movs	r1, #128	@ 0x80
 8007c88:	0049      	lsls	r1, r1, #1
 8007c8a:	430a      	orrs	r2, r1
 8007c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c8e:	f7fd f88f 	bl	8004db0 <HAL_GetTick>
 8007c92:	0003      	movs	r3, r0
 8007c94:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007c96:	e019      	b.n	8007ccc <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007c98:	f7fd f88a 	bl	8004db0 <HAL_GetTick>
 8007c9c:	0002      	movs	r2, r0
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d912      	bls.n	8007ccc <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e22b      	b.n	8008102 <HAL_RCC_OscConfig+0x792>
 8007caa:	46c0      	nop			@ (mov r8, r8)
 8007cac:	40021000 	.word	0x40021000
 8007cb0:	fffeffff 	.word	0xfffeffff
 8007cb4:	fffbffff 	.word	0xfffbffff
 8007cb8:	ffffe0ff 	.word	0xffffe0ff
 8007cbc:	0800c9cc 	.word	0x0800c9cc
 8007cc0:	20000008 	.word	0x20000008
 8007cc4:	2000001c 	.word	0x2000001c
 8007cc8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007ccc:	4bca      	ldr	r3, [pc, #808]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	2380      	movs	r3, #128	@ 0x80
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	d0df      	beq.n	8007c98 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007cd8:	4bc7      	ldr	r3, [pc, #796]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	4ac7      	ldr	r2, [pc, #796]	@ (8007ffc <HAL_RCC_OscConfig+0x68c>)
 8007cde:	4013      	ands	r3, r2
 8007ce0:	0019      	movs	r1, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ce6:	4bc4      	ldr	r3, [pc, #784]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007cec:	4bc2      	ldr	r3, [pc, #776]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	021b      	lsls	r3, r3, #8
 8007cf2:	0a19      	lsrs	r1, r3, #8
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a1b      	ldr	r3, [r3, #32]
 8007cf8:	061a      	lsls	r2, r3, #24
 8007cfa:	4bbf      	ldr	r3, [pc, #764]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007cfc:	430a      	orrs	r2, r1
 8007cfe:	605a      	str	r2, [r3, #4]
 8007d00:	e019      	b.n	8007d36 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007d02:	4bbd      	ldr	r3, [pc, #756]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4bbc      	ldr	r3, [pc, #752]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007d08:	49bd      	ldr	r1, [pc, #756]	@ (8008000 <HAL_RCC_OscConfig+0x690>)
 8007d0a:	400a      	ands	r2, r1
 8007d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d0e:	f7fd f84f 	bl	8004db0 <HAL_GetTick>
 8007d12:	0003      	movs	r3, r0
 8007d14:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007d16:	e008      	b.n	8007d2a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007d18:	f7fd f84a 	bl	8004db0 <HAL_GetTick>
 8007d1c:	0002      	movs	r2, r0
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d901      	bls.n	8007d2a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e1eb      	b.n	8008102 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007d2a:	4bb3      	ldr	r3, [pc, #716]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	2380      	movs	r3, #128	@ 0x80
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4013      	ands	r3, r2
 8007d34:	d1f0      	bne.n	8007d18 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2208      	movs	r2, #8
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	d036      	beq.n	8007dae <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	695b      	ldr	r3, [r3, #20]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d019      	beq.n	8007d7c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d48:	4bab      	ldr	r3, [pc, #684]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007d4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d4c:	4baa      	ldr	r3, [pc, #680]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007d4e:	2101      	movs	r1, #1
 8007d50:	430a      	orrs	r2, r1
 8007d52:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d54:	f7fd f82c 	bl	8004db0 <HAL_GetTick>
 8007d58:	0003      	movs	r3, r0
 8007d5a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d5c:	e008      	b.n	8007d70 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d5e:	f7fd f827 	bl	8004db0 <HAL_GetTick>
 8007d62:	0002      	movs	r2, r0
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d901      	bls.n	8007d70 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e1c8      	b.n	8008102 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d70:	4ba1      	ldr	r3, [pc, #644]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d74:	2202      	movs	r2, #2
 8007d76:	4013      	ands	r3, r2
 8007d78:	d0f1      	beq.n	8007d5e <HAL_RCC_OscConfig+0x3ee>
 8007d7a:	e018      	b.n	8007dae <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d7c:	4b9e      	ldr	r3, [pc, #632]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007d7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d80:	4b9d      	ldr	r3, [pc, #628]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007d82:	2101      	movs	r1, #1
 8007d84:	438a      	bics	r2, r1
 8007d86:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d88:	f7fd f812 	bl	8004db0 <HAL_GetTick>
 8007d8c:	0003      	movs	r3, r0
 8007d8e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007d90:	e008      	b.n	8007da4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d92:	f7fd f80d 	bl	8004db0 <HAL_GetTick>
 8007d96:	0002      	movs	r2, r0
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d901      	bls.n	8007da4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8007da0:	2303      	movs	r3, #3
 8007da2:	e1ae      	b.n	8008102 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007da4:	4b94      	ldr	r3, [pc, #592]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007da6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007da8:	2202      	movs	r2, #2
 8007daa:	4013      	ands	r3, r2
 8007dac:	d1f1      	bne.n	8007d92 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2204      	movs	r2, #4
 8007db4:	4013      	ands	r3, r2
 8007db6:	d100      	bne.n	8007dba <HAL_RCC_OscConfig+0x44a>
 8007db8:	e0ae      	b.n	8007f18 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007dba:	2023      	movs	r0, #35	@ 0x23
 8007dbc:	183b      	adds	r3, r7, r0
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007dc2:	4b8d      	ldr	r3, [pc, #564]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007dc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dc6:	2380      	movs	r3, #128	@ 0x80
 8007dc8:	055b      	lsls	r3, r3, #21
 8007dca:	4013      	ands	r3, r2
 8007dcc:	d109      	bne.n	8007de2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007dce:	4b8a      	ldr	r3, [pc, #552]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007dd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dd2:	4b89      	ldr	r3, [pc, #548]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007dd4:	2180      	movs	r1, #128	@ 0x80
 8007dd6:	0549      	lsls	r1, r1, #21
 8007dd8:	430a      	orrs	r2, r1
 8007dda:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8007ddc:	183b      	adds	r3, r7, r0
 8007dde:	2201      	movs	r2, #1
 8007de0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007de2:	4b88      	ldr	r3, [pc, #544]	@ (8008004 <HAL_RCC_OscConfig+0x694>)
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	2380      	movs	r3, #128	@ 0x80
 8007de8:	005b      	lsls	r3, r3, #1
 8007dea:	4013      	ands	r3, r2
 8007dec:	d11a      	bne.n	8007e24 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007dee:	4b85      	ldr	r3, [pc, #532]	@ (8008004 <HAL_RCC_OscConfig+0x694>)
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	4b84      	ldr	r3, [pc, #528]	@ (8008004 <HAL_RCC_OscConfig+0x694>)
 8007df4:	2180      	movs	r1, #128	@ 0x80
 8007df6:	0049      	lsls	r1, r1, #1
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007dfc:	f7fc ffd8 	bl	8004db0 <HAL_GetTick>
 8007e00:	0003      	movs	r3, r0
 8007e02:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e04:	e008      	b.n	8007e18 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e06:	f7fc ffd3 	bl	8004db0 <HAL_GetTick>
 8007e0a:	0002      	movs	r2, r0
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	2b64      	cmp	r3, #100	@ 0x64
 8007e12:	d901      	bls.n	8007e18 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e174      	b.n	8008102 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e18:	4b7a      	ldr	r3, [pc, #488]	@ (8008004 <HAL_RCC_OscConfig+0x694>)
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	2380      	movs	r3, #128	@ 0x80
 8007e1e:	005b      	lsls	r3, r3, #1
 8007e20:	4013      	ands	r3, r2
 8007e22:	d0f0      	beq.n	8007e06 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	689a      	ldr	r2, [r3, #8]
 8007e28:	2380      	movs	r3, #128	@ 0x80
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d107      	bne.n	8007e40 <HAL_RCC_OscConfig+0x4d0>
 8007e30:	4b71      	ldr	r3, [pc, #452]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007e32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e34:	4b70      	ldr	r3, [pc, #448]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007e36:	2180      	movs	r1, #128	@ 0x80
 8007e38:	0049      	lsls	r1, r1, #1
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	651a      	str	r2, [r3, #80]	@ 0x50
 8007e3e:	e031      	b.n	8007ea4 <HAL_RCC_OscConfig+0x534>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10c      	bne.n	8007e62 <HAL_RCC_OscConfig+0x4f2>
 8007e48:	4b6b      	ldr	r3, [pc, #428]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007e4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e4c:	4b6a      	ldr	r3, [pc, #424]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007e4e:	496c      	ldr	r1, [pc, #432]	@ (8008000 <HAL_RCC_OscConfig+0x690>)
 8007e50:	400a      	ands	r2, r1
 8007e52:	651a      	str	r2, [r3, #80]	@ 0x50
 8007e54:	4b68      	ldr	r3, [pc, #416]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007e56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e58:	4b67      	ldr	r3, [pc, #412]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007e5a:	496b      	ldr	r1, [pc, #428]	@ (8008008 <HAL_RCC_OscConfig+0x698>)
 8007e5c:	400a      	ands	r2, r1
 8007e5e:	651a      	str	r2, [r3, #80]	@ 0x50
 8007e60:	e020      	b.n	8007ea4 <HAL_RCC_OscConfig+0x534>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	689a      	ldr	r2, [r3, #8]
 8007e66:	23a0      	movs	r3, #160	@ 0xa0
 8007e68:	00db      	lsls	r3, r3, #3
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d10e      	bne.n	8007e8c <HAL_RCC_OscConfig+0x51c>
 8007e6e:	4b62      	ldr	r3, [pc, #392]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007e70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e72:	4b61      	ldr	r3, [pc, #388]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007e74:	2180      	movs	r1, #128	@ 0x80
 8007e76:	00c9      	lsls	r1, r1, #3
 8007e78:	430a      	orrs	r2, r1
 8007e7a:	651a      	str	r2, [r3, #80]	@ 0x50
 8007e7c:	4b5e      	ldr	r3, [pc, #376]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007e7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e80:	4b5d      	ldr	r3, [pc, #372]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007e82:	2180      	movs	r1, #128	@ 0x80
 8007e84:	0049      	lsls	r1, r1, #1
 8007e86:	430a      	orrs	r2, r1
 8007e88:	651a      	str	r2, [r3, #80]	@ 0x50
 8007e8a:	e00b      	b.n	8007ea4 <HAL_RCC_OscConfig+0x534>
 8007e8c:	4b5a      	ldr	r3, [pc, #360]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007e8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e90:	4b59      	ldr	r3, [pc, #356]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007e92:	495b      	ldr	r1, [pc, #364]	@ (8008000 <HAL_RCC_OscConfig+0x690>)
 8007e94:	400a      	ands	r2, r1
 8007e96:	651a      	str	r2, [r3, #80]	@ 0x50
 8007e98:	4b57      	ldr	r3, [pc, #348]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007e9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007e9c:	4b56      	ldr	r3, [pc, #344]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007e9e:	495a      	ldr	r1, [pc, #360]	@ (8008008 <HAL_RCC_OscConfig+0x698>)
 8007ea0:	400a      	ands	r2, r1
 8007ea2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d015      	beq.n	8007ed8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007eac:	f7fc ff80 	bl	8004db0 <HAL_GetTick>
 8007eb0:	0003      	movs	r3, r0
 8007eb2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007eb4:	e009      	b.n	8007eca <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007eb6:	f7fc ff7b 	bl	8004db0 <HAL_GetTick>
 8007eba:	0002      	movs	r2, r0
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	1ad3      	subs	r3, r2, r3
 8007ec0:	4a52      	ldr	r2, [pc, #328]	@ (800800c <HAL_RCC_OscConfig+0x69c>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d901      	bls.n	8007eca <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e11b      	b.n	8008102 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007eca:	4b4b      	ldr	r3, [pc, #300]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007ecc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ece:	2380      	movs	r3, #128	@ 0x80
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	d0ef      	beq.n	8007eb6 <HAL_RCC_OscConfig+0x546>
 8007ed6:	e014      	b.n	8007f02 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ed8:	f7fc ff6a 	bl	8004db0 <HAL_GetTick>
 8007edc:	0003      	movs	r3, r0
 8007ede:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007ee0:	e009      	b.n	8007ef6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ee2:	f7fc ff65 	bl	8004db0 <HAL_GetTick>
 8007ee6:	0002      	movs	r2, r0
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	1ad3      	subs	r3, r2, r3
 8007eec:	4a47      	ldr	r2, [pc, #284]	@ (800800c <HAL_RCC_OscConfig+0x69c>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d901      	bls.n	8007ef6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	e105      	b.n	8008102 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007ef6:	4b40      	ldr	r3, [pc, #256]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007ef8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007efa:	2380      	movs	r3, #128	@ 0x80
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4013      	ands	r3, r2
 8007f00:	d1ef      	bne.n	8007ee2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007f02:	2323      	movs	r3, #35	@ 0x23
 8007f04:	18fb      	adds	r3, r7, r3
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d105      	bne.n	8007f18 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f0c:	4b3a      	ldr	r3, [pc, #232]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007f0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f10:	4b39      	ldr	r3, [pc, #228]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007f12:	493f      	ldr	r1, [pc, #252]	@ (8008010 <HAL_RCC_OscConfig+0x6a0>)
 8007f14:	400a      	ands	r2, r1
 8007f16:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2220      	movs	r2, #32
 8007f1e:	4013      	ands	r3, r2
 8007f20:	d049      	beq.n	8007fb6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d026      	beq.n	8007f78 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8007f2a:	4b33      	ldr	r3, [pc, #204]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007f2c:	689a      	ldr	r2, [r3, #8]
 8007f2e:	4b32      	ldr	r3, [pc, #200]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007f30:	2101      	movs	r1, #1
 8007f32:	430a      	orrs	r2, r1
 8007f34:	609a      	str	r2, [r3, #8]
 8007f36:	4b30      	ldr	r3, [pc, #192]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007f38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f3a:	4b2f      	ldr	r3, [pc, #188]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007f3c:	2101      	movs	r1, #1
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	635a      	str	r2, [r3, #52]	@ 0x34
 8007f42:	4b34      	ldr	r3, [pc, #208]	@ (8008014 <HAL_RCC_OscConfig+0x6a4>)
 8007f44:	6a1a      	ldr	r2, [r3, #32]
 8007f46:	4b33      	ldr	r3, [pc, #204]	@ (8008014 <HAL_RCC_OscConfig+0x6a4>)
 8007f48:	2180      	movs	r1, #128	@ 0x80
 8007f4a:	0189      	lsls	r1, r1, #6
 8007f4c:	430a      	orrs	r2, r1
 8007f4e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f50:	f7fc ff2e 	bl	8004db0 <HAL_GetTick>
 8007f54:	0003      	movs	r3, r0
 8007f56:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f58:	e008      	b.n	8007f6c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f5a:	f7fc ff29 	bl	8004db0 <HAL_GetTick>
 8007f5e:	0002      	movs	r2, r0
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d901      	bls.n	8007f6c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e0ca      	b.n	8008102 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f6c:	4b22      	ldr	r3, [pc, #136]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	2202      	movs	r2, #2
 8007f72:	4013      	ands	r3, r2
 8007f74:	d0f1      	beq.n	8007f5a <HAL_RCC_OscConfig+0x5ea>
 8007f76:	e01e      	b.n	8007fb6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8007f78:	4b1f      	ldr	r3, [pc, #124]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007f7a:	689a      	ldr	r2, [r3, #8]
 8007f7c:	4b1e      	ldr	r3, [pc, #120]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007f7e:	2101      	movs	r1, #1
 8007f80:	438a      	bics	r2, r1
 8007f82:	609a      	str	r2, [r3, #8]
 8007f84:	4b23      	ldr	r3, [pc, #140]	@ (8008014 <HAL_RCC_OscConfig+0x6a4>)
 8007f86:	6a1a      	ldr	r2, [r3, #32]
 8007f88:	4b22      	ldr	r3, [pc, #136]	@ (8008014 <HAL_RCC_OscConfig+0x6a4>)
 8007f8a:	4923      	ldr	r1, [pc, #140]	@ (8008018 <HAL_RCC_OscConfig+0x6a8>)
 8007f8c:	400a      	ands	r2, r1
 8007f8e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f90:	f7fc ff0e 	bl	8004db0 <HAL_GetTick>
 8007f94:	0003      	movs	r3, r0
 8007f96:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f98:	e008      	b.n	8007fac <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f9a:	f7fc ff09 	bl	8004db0 <HAL_GetTick>
 8007f9e:	0002      	movs	r2, r0
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	d901      	bls.n	8007fac <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	e0aa      	b.n	8008102 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007fac:	4b12      	ldr	r3, [pc, #72]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	d1f1      	bne.n	8007f9a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d100      	bne.n	8007fc0 <HAL_RCC_OscConfig+0x650>
 8007fbe:	e09f      	b.n	8008100 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	2b0c      	cmp	r3, #12
 8007fc4:	d100      	bne.n	8007fc8 <HAL_RCC_OscConfig+0x658>
 8007fc6:	e078      	b.n	80080ba <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d159      	bne.n	8008084 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fd0:	4b09      	ldr	r3, [pc, #36]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	4b08      	ldr	r3, [pc, #32]	@ (8007ff8 <HAL_RCC_OscConfig+0x688>)
 8007fd6:	4911      	ldr	r1, [pc, #68]	@ (800801c <HAL_RCC_OscConfig+0x6ac>)
 8007fd8:	400a      	ands	r2, r1
 8007fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fdc:	f7fc fee8 	bl	8004db0 <HAL_GetTick>
 8007fe0:	0003      	movs	r3, r0
 8007fe2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007fe4:	e01c      	b.n	8008020 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fe6:	f7fc fee3 	bl	8004db0 <HAL_GetTick>
 8007fea:	0002      	movs	r2, r0
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d915      	bls.n	8008020 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e084      	b.n	8008102 <HAL_RCC_OscConfig+0x792>
 8007ff8:	40021000 	.word	0x40021000
 8007ffc:	ffff1fff 	.word	0xffff1fff
 8008000:	fffffeff 	.word	0xfffffeff
 8008004:	40007000 	.word	0x40007000
 8008008:	fffffbff 	.word	0xfffffbff
 800800c:	00001388 	.word	0x00001388
 8008010:	efffffff 	.word	0xefffffff
 8008014:	40010000 	.word	0x40010000
 8008018:	ffffdfff 	.word	0xffffdfff
 800801c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008020:	4b3a      	ldr	r3, [pc, #232]	@ (800810c <HAL_RCC_OscConfig+0x79c>)
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	2380      	movs	r3, #128	@ 0x80
 8008026:	049b      	lsls	r3, r3, #18
 8008028:	4013      	ands	r3, r2
 800802a:	d1dc      	bne.n	8007fe6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800802c:	4b37      	ldr	r3, [pc, #220]	@ (800810c <HAL_RCC_OscConfig+0x79c>)
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	4a37      	ldr	r2, [pc, #220]	@ (8008110 <HAL_RCC_OscConfig+0x7a0>)
 8008032:	4013      	ands	r3, r2
 8008034:	0019      	movs	r1, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800803e:	431a      	orrs	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008044:	431a      	orrs	r2, r3
 8008046:	4b31      	ldr	r3, [pc, #196]	@ (800810c <HAL_RCC_OscConfig+0x79c>)
 8008048:	430a      	orrs	r2, r1
 800804a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800804c:	4b2f      	ldr	r3, [pc, #188]	@ (800810c <HAL_RCC_OscConfig+0x79c>)
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	4b2e      	ldr	r3, [pc, #184]	@ (800810c <HAL_RCC_OscConfig+0x79c>)
 8008052:	2180      	movs	r1, #128	@ 0x80
 8008054:	0449      	lsls	r1, r1, #17
 8008056:	430a      	orrs	r2, r1
 8008058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800805a:	f7fc fea9 	bl	8004db0 <HAL_GetTick>
 800805e:	0003      	movs	r3, r0
 8008060:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8008062:	e008      	b.n	8008076 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008064:	f7fc fea4 	bl	8004db0 <HAL_GetTick>
 8008068:	0002      	movs	r2, r0
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	2b02      	cmp	r3, #2
 8008070:	d901      	bls.n	8008076 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e045      	b.n	8008102 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8008076:	4b25      	ldr	r3, [pc, #148]	@ (800810c <HAL_RCC_OscConfig+0x79c>)
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	2380      	movs	r3, #128	@ 0x80
 800807c:	049b      	lsls	r3, r3, #18
 800807e:	4013      	ands	r3, r2
 8008080:	d0f0      	beq.n	8008064 <HAL_RCC_OscConfig+0x6f4>
 8008082:	e03d      	b.n	8008100 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008084:	4b21      	ldr	r3, [pc, #132]	@ (800810c <HAL_RCC_OscConfig+0x79c>)
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	4b20      	ldr	r3, [pc, #128]	@ (800810c <HAL_RCC_OscConfig+0x79c>)
 800808a:	4922      	ldr	r1, [pc, #136]	@ (8008114 <HAL_RCC_OscConfig+0x7a4>)
 800808c:	400a      	ands	r2, r1
 800808e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008090:	f7fc fe8e 	bl	8004db0 <HAL_GetTick>
 8008094:	0003      	movs	r3, r0
 8008096:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008098:	e008      	b.n	80080ac <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800809a:	f7fc fe89 	bl	8004db0 <HAL_GetTick>
 800809e:	0002      	movs	r2, r0
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	1ad3      	subs	r3, r2, r3
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d901      	bls.n	80080ac <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e02a      	b.n	8008102 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80080ac:	4b17      	ldr	r3, [pc, #92]	@ (800810c <HAL_RCC_OscConfig+0x79c>)
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	2380      	movs	r3, #128	@ 0x80
 80080b2:	049b      	lsls	r3, r3, #18
 80080b4:	4013      	ands	r3, r2
 80080b6:	d1f0      	bne.n	800809a <HAL_RCC_OscConfig+0x72a>
 80080b8:	e022      	b.n	8008100 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d101      	bne.n	80080c6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e01d      	b.n	8008102 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80080c6:	4b11      	ldr	r3, [pc, #68]	@ (800810c <HAL_RCC_OscConfig+0x79c>)
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080cc:	69ba      	ldr	r2, [r7, #24]
 80080ce:	2380      	movs	r3, #128	@ 0x80
 80080d0:	025b      	lsls	r3, r3, #9
 80080d2:	401a      	ands	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d8:	429a      	cmp	r2, r3
 80080da:	d10f      	bne.n	80080fc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80080dc:	69ba      	ldr	r2, [r7, #24]
 80080de:	23f0      	movs	r3, #240	@ 0xf0
 80080e0:	039b      	lsls	r3, r3, #14
 80080e2:	401a      	ands	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d107      	bne.n	80080fc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80080ec:	69ba      	ldr	r2, [r7, #24]
 80080ee:	23c0      	movs	r3, #192	@ 0xc0
 80080f0:	041b      	lsls	r3, r3, #16
 80080f2:	401a      	ands	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d001      	beq.n	8008100 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e000      	b.n	8008102 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	0018      	movs	r0, r3
 8008104:	46bd      	mov	sp, r7
 8008106:	b00a      	add	sp, #40	@ 0x28
 8008108:	bdb0      	pop	{r4, r5, r7, pc}
 800810a:	46c0      	nop			@ (mov r8, r8)
 800810c:	40021000 	.word	0x40021000
 8008110:	ff02ffff 	.word	0xff02ffff
 8008114:	feffffff 	.word	0xfeffffff

08008118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008118:	b5b0      	push	{r4, r5, r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d101      	bne.n	800812c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	e128      	b.n	800837e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800812c:	4b96      	ldr	r3, [pc, #600]	@ (8008388 <HAL_RCC_ClockConfig+0x270>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2201      	movs	r2, #1
 8008132:	4013      	ands	r3, r2
 8008134:	683a      	ldr	r2, [r7, #0]
 8008136:	429a      	cmp	r2, r3
 8008138:	d91e      	bls.n	8008178 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800813a:	4b93      	ldr	r3, [pc, #588]	@ (8008388 <HAL_RCC_ClockConfig+0x270>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2201      	movs	r2, #1
 8008140:	4393      	bics	r3, r2
 8008142:	0019      	movs	r1, r3
 8008144:	4b90      	ldr	r3, [pc, #576]	@ (8008388 <HAL_RCC_ClockConfig+0x270>)
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	430a      	orrs	r2, r1
 800814a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800814c:	f7fc fe30 	bl	8004db0 <HAL_GetTick>
 8008150:	0003      	movs	r3, r0
 8008152:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008154:	e009      	b.n	800816a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008156:	f7fc fe2b 	bl	8004db0 <HAL_GetTick>
 800815a:	0002      	movs	r2, r0
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	4a8a      	ldr	r2, [pc, #552]	@ (800838c <HAL_RCC_ClockConfig+0x274>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d901      	bls.n	800816a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e109      	b.n	800837e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800816a:	4b87      	ldr	r3, [pc, #540]	@ (8008388 <HAL_RCC_ClockConfig+0x270>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2201      	movs	r2, #1
 8008170:	4013      	ands	r3, r2
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	429a      	cmp	r2, r3
 8008176:	d1ee      	bne.n	8008156 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2202      	movs	r2, #2
 800817e:	4013      	ands	r3, r2
 8008180:	d009      	beq.n	8008196 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008182:	4b83      	ldr	r3, [pc, #524]	@ (8008390 <HAL_RCC_ClockConfig+0x278>)
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	22f0      	movs	r2, #240	@ 0xf0
 8008188:	4393      	bics	r3, r2
 800818a:	0019      	movs	r1, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	689a      	ldr	r2, [r3, #8]
 8008190:	4b7f      	ldr	r3, [pc, #508]	@ (8008390 <HAL_RCC_ClockConfig+0x278>)
 8008192:	430a      	orrs	r2, r1
 8008194:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	2201      	movs	r2, #1
 800819c:	4013      	ands	r3, r2
 800819e:	d100      	bne.n	80081a2 <HAL_RCC_ClockConfig+0x8a>
 80081a0:	e089      	b.n	80082b6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d107      	bne.n	80081ba <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80081aa:	4b79      	ldr	r3, [pc, #484]	@ (8008390 <HAL_RCC_ClockConfig+0x278>)
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	2380      	movs	r3, #128	@ 0x80
 80081b0:	029b      	lsls	r3, r3, #10
 80081b2:	4013      	ands	r3, r2
 80081b4:	d120      	bne.n	80081f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e0e1      	b.n	800837e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	2b03      	cmp	r3, #3
 80081c0:	d107      	bne.n	80081d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081c2:	4b73      	ldr	r3, [pc, #460]	@ (8008390 <HAL_RCC_ClockConfig+0x278>)
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	2380      	movs	r3, #128	@ 0x80
 80081c8:	049b      	lsls	r3, r3, #18
 80081ca:	4013      	ands	r3, r2
 80081cc:	d114      	bne.n	80081f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	e0d5      	b.n	800837e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d106      	bne.n	80081e8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80081da:	4b6d      	ldr	r3, [pc, #436]	@ (8008390 <HAL_RCC_ClockConfig+0x278>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2204      	movs	r2, #4
 80081e0:	4013      	ands	r3, r2
 80081e2:	d109      	bne.n	80081f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e0ca      	b.n	800837e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80081e8:	4b69      	ldr	r3, [pc, #420]	@ (8008390 <HAL_RCC_ClockConfig+0x278>)
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	2380      	movs	r3, #128	@ 0x80
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	4013      	ands	r3, r2
 80081f2:	d101      	bne.n	80081f8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e0c2      	b.n	800837e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80081f8:	4b65      	ldr	r3, [pc, #404]	@ (8008390 <HAL_RCC_ClockConfig+0x278>)
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	2203      	movs	r2, #3
 80081fe:	4393      	bics	r3, r2
 8008200:	0019      	movs	r1, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	685a      	ldr	r2, [r3, #4]
 8008206:	4b62      	ldr	r3, [pc, #392]	@ (8008390 <HAL_RCC_ClockConfig+0x278>)
 8008208:	430a      	orrs	r2, r1
 800820a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800820c:	f7fc fdd0 	bl	8004db0 <HAL_GetTick>
 8008210:	0003      	movs	r3, r0
 8008212:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	2b02      	cmp	r3, #2
 800821a:	d111      	bne.n	8008240 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800821c:	e009      	b.n	8008232 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800821e:	f7fc fdc7 	bl	8004db0 <HAL_GetTick>
 8008222:	0002      	movs	r2, r0
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	4a58      	ldr	r2, [pc, #352]	@ (800838c <HAL_RCC_ClockConfig+0x274>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d901      	bls.n	8008232 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800822e:	2303      	movs	r3, #3
 8008230:	e0a5      	b.n	800837e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008232:	4b57      	ldr	r3, [pc, #348]	@ (8008390 <HAL_RCC_ClockConfig+0x278>)
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	220c      	movs	r2, #12
 8008238:	4013      	ands	r3, r2
 800823a:	2b08      	cmp	r3, #8
 800823c:	d1ef      	bne.n	800821e <HAL_RCC_ClockConfig+0x106>
 800823e:	e03a      	b.n	80082b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	2b03      	cmp	r3, #3
 8008246:	d111      	bne.n	800826c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008248:	e009      	b.n	800825e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800824a:	f7fc fdb1 	bl	8004db0 <HAL_GetTick>
 800824e:	0002      	movs	r2, r0
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	1ad3      	subs	r3, r2, r3
 8008254:	4a4d      	ldr	r2, [pc, #308]	@ (800838c <HAL_RCC_ClockConfig+0x274>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d901      	bls.n	800825e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	e08f      	b.n	800837e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800825e:	4b4c      	ldr	r3, [pc, #304]	@ (8008390 <HAL_RCC_ClockConfig+0x278>)
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	220c      	movs	r2, #12
 8008264:	4013      	ands	r3, r2
 8008266:	2b0c      	cmp	r3, #12
 8008268:	d1ef      	bne.n	800824a <HAL_RCC_ClockConfig+0x132>
 800826a:	e024      	b.n	80082b6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d11b      	bne.n	80082ac <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008274:	e009      	b.n	800828a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008276:	f7fc fd9b 	bl	8004db0 <HAL_GetTick>
 800827a:	0002      	movs	r2, r0
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	4a42      	ldr	r2, [pc, #264]	@ (800838c <HAL_RCC_ClockConfig+0x274>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d901      	bls.n	800828a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8008286:	2303      	movs	r3, #3
 8008288:	e079      	b.n	800837e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800828a:	4b41      	ldr	r3, [pc, #260]	@ (8008390 <HAL_RCC_ClockConfig+0x278>)
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	220c      	movs	r2, #12
 8008290:	4013      	ands	r3, r2
 8008292:	2b04      	cmp	r3, #4
 8008294:	d1ef      	bne.n	8008276 <HAL_RCC_ClockConfig+0x15e>
 8008296:	e00e      	b.n	80082b6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008298:	f7fc fd8a 	bl	8004db0 <HAL_GetTick>
 800829c:	0002      	movs	r2, r0
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	4a3a      	ldr	r2, [pc, #232]	@ (800838c <HAL_RCC_ClockConfig+0x274>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d901      	bls.n	80082ac <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80082a8:	2303      	movs	r3, #3
 80082aa:	e068      	b.n	800837e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80082ac:	4b38      	ldr	r3, [pc, #224]	@ (8008390 <HAL_RCC_ClockConfig+0x278>)
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	220c      	movs	r2, #12
 80082b2:	4013      	ands	r3, r2
 80082b4:	d1f0      	bne.n	8008298 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80082b6:	4b34      	ldr	r3, [pc, #208]	@ (8008388 <HAL_RCC_ClockConfig+0x270>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2201      	movs	r2, #1
 80082bc:	4013      	ands	r3, r2
 80082be:	683a      	ldr	r2, [r7, #0]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d21e      	bcs.n	8008302 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082c4:	4b30      	ldr	r3, [pc, #192]	@ (8008388 <HAL_RCC_ClockConfig+0x270>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2201      	movs	r2, #1
 80082ca:	4393      	bics	r3, r2
 80082cc:	0019      	movs	r1, r3
 80082ce:	4b2e      	ldr	r3, [pc, #184]	@ (8008388 <HAL_RCC_ClockConfig+0x270>)
 80082d0:	683a      	ldr	r2, [r7, #0]
 80082d2:	430a      	orrs	r2, r1
 80082d4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80082d6:	f7fc fd6b 	bl	8004db0 <HAL_GetTick>
 80082da:	0003      	movs	r3, r0
 80082dc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082de:	e009      	b.n	80082f4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082e0:	f7fc fd66 	bl	8004db0 <HAL_GetTick>
 80082e4:	0002      	movs	r2, r0
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	4a28      	ldr	r2, [pc, #160]	@ (800838c <HAL_RCC_ClockConfig+0x274>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d901      	bls.n	80082f4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80082f0:	2303      	movs	r3, #3
 80082f2:	e044      	b.n	800837e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082f4:	4b24      	ldr	r3, [pc, #144]	@ (8008388 <HAL_RCC_ClockConfig+0x270>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2201      	movs	r2, #1
 80082fa:	4013      	ands	r3, r2
 80082fc:	683a      	ldr	r2, [r7, #0]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d1ee      	bne.n	80082e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2204      	movs	r2, #4
 8008308:	4013      	ands	r3, r2
 800830a:	d009      	beq.n	8008320 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800830c:	4b20      	ldr	r3, [pc, #128]	@ (8008390 <HAL_RCC_ClockConfig+0x278>)
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	4a20      	ldr	r2, [pc, #128]	@ (8008394 <HAL_RCC_ClockConfig+0x27c>)
 8008312:	4013      	ands	r3, r2
 8008314:	0019      	movs	r1, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	68da      	ldr	r2, [r3, #12]
 800831a:	4b1d      	ldr	r3, [pc, #116]	@ (8008390 <HAL_RCC_ClockConfig+0x278>)
 800831c:	430a      	orrs	r2, r1
 800831e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2208      	movs	r2, #8
 8008326:	4013      	ands	r3, r2
 8008328:	d00a      	beq.n	8008340 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800832a:	4b19      	ldr	r3, [pc, #100]	@ (8008390 <HAL_RCC_ClockConfig+0x278>)
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	4a1a      	ldr	r2, [pc, #104]	@ (8008398 <HAL_RCC_ClockConfig+0x280>)
 8008330:	4013      	ands	r3, r2
 8008332:	0019      	movs	r1, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	00da      	lsls	r2, r3, #3
 800833a:	4b15      	ldr	r3, [pc, #84]	@ (8008390 <HAL_RCC_ClockConfig+0x278>)
 800833c:	430a      	orrs	r2, r1
 800833e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008340:	f000 f832 	bl	80083a8 <HAL_RCC_GetSysClockFreq>
 8008344:	0001      	movs	r1, r0
 8008346:	4b12      	ldr	r3, [pc, #72]	@ (8008390 <HAL_RCC_ClockConfig+0x278>)
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	091b      	lsrs	r3, r3, #4
 800834c:	220f      	movs	r2, #15
 800834e:	4013      	ands	r3, r2
 8008350:	4a12      	ldr	r2, [pc, #72]	@ (800839c <HAL_RCC_ClockConfig+0x284>)
 8008352:	5cd3      	ldrb	r3, [r2, r3]
 8008354:	000a      	movs	r2, r1
 8008356:	40da      	lsrs	r2, r3
 8008358:	4b11      	ldr	r3, [pc, #68]	@ (80083a0 <HAL_RCC_ClockConfig+0x288>)
 800835a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800835c:	4b11      	ldr	r3, [pc, #68]	@ (80083a4 <HAL_RCC_ClockConfig+0x28c>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	250b      	movs	r5, #11
 8008362:	197c      	adds	r4, r7, r5
 8008364:	0018      	movs	r0, r3
 8008366:	f7fc fcdd 	bl	8004d24 <HAL_InitTick>
 800836a:	0003      	movs	r3, r0
 800836c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800836e:	197b      	adds	r3, r7, r5
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d002      	beq.n	800837c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8008376:	197b      	adds	r3, r7, r5
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	e000      	b.n	800837e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	0018      	movs	r0, r3
 8008380:	46bd      	mov	sp, r7
 8008382:	b004      	add	sp, #16
 8008384:	bdb0      	pop	{r4, r5, r7, pc}
 8008386:	46c0      	nop			@ (mov r8, r8)
 8008388:	40022000 	.word	0x40022000
 800838c:	00001388 	.word	0x00001388
 8008390:	40021000 	.word	0x40021000
 8008394:	fffff8ff 	.word	0xfffff8ff
 8008398:	ffffc7ff 	.word	0xffffc7ff
 800839c:	0800c9cc 	.word	0x0800c9cc
 80083a0:	20000008 	.word	0x20000008
 80083a4:	2000001c 	.word	0x2000001c

080083a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083a8:	b5b0      	push	{r4, r5, r7, lr}
 80083aa:	b08e      	sub	sp, #56	@ 0x38
 80083ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80083ae:	4b4c      	ldr	r3, [pc, #304]	@ (80084e0 <HAL_RCC_GetSysClockFreq+0x138>)
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80083b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083b6:	230c      	movs	r3, #12
 80083b8:	4013      	ands	r3, r2
 80083ba:	2b0c      	cmp	r3, #12
 80083bc:	d014      	beq.n	80083e8 <HAL_RCC_GetSysClockFreq+0x40>
 80083be:	d900      	bls.n	80083c2 <HAL_RCC_GetSysClockFreq+0x1a>
 80083c0:	e07b      	b.n	80084ba <HAL_RCC_GetSysClockFreq+0x112>
 80083c2:	2b04      	cmp	r3, #4
 80083c4:	d002      	beq.n	80083cc <HAL_RCC_GetSysClockFreq+0x24>
 80083c6:	2b08      	cmp	r3, #8
 80083c8:	d00b      	beq.n	80083e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80083ca:	e076      	b.n	80084ba <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80083cc:	4b44      	ldr	r3, [pc, #272]	@ (80084e0 <HAL_RCC_GetSysClockFreq+0x138>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2210      	movs	r2, #16
 80083d2:	4013      	ands	r3, r2
 80083d4:	d002      	beq.n	80083dc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80083d6:	4b43      	ldr	r3, [pc, #268]	@ (80084e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80083d8:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80083da:	e07c      	b.n	80084d6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80083dc:	4b42      	ldr	r3, [pc, #264]	@ (80084e8 <HAL_RCC_GetSysClockFreq+0x140>)
 80083de:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80083e0:	e079      	b.n	80084d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80083e2:	4b42      	ldr	r3, [pc, #264]	@ (80084ec <HAL_RCC_GetSysClockFreq+0x144>)
 80083e4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80083e6:	e076      	b.n	80084d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80083e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ea:	0c9a      	lsrs	r2, r3, #18
 80083ec:	230f      	movs	r3, #15
 80083ee:	401a      	ands	r2, r3
 80083f0:	4b3f      	ldr	r3, [pc, #252]	@ (80084f0 <HAL_RCC_GetSysClockFreq+0x148>)
 80083f2:	5c9b      	ldrb	r3, [r3, r2]
 80083f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80083f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083f8:	0d9a      	lsrs	r2, r3, #22
 80083fa:	2303      	movs	r3, #3
 80083fc:	4013      	ands	r3, r2
 80083fe:	3301      	adds	r3, #1
 8008400:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008402:	4b37      	ldr	r3, [pc, #220]	@ (80084e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8008404:	68da      	ldr	r2, [r3, #12]
 8008406:	2380      	movs	r3, #128	@ 0x80
 8008408:	025b      	lsls	r3, r3, #9
 800840a:	4013      	ands	r3, r2
 800840c:	d01a      	beq.n	8008444 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800840e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008410:	61bb      	str	r3, [r7, #24]
 8008412:	2300      	movs	r3, #0
 8008414:	61fb      	str	r3, [r7, #28]
 8008416:	4a35      	ldr	r2, [pc, #212]	@ (80084ec <HAL_RCC_GetSysClockFreq+0x144>)
 8008418:	2300      	movs	r3, #0
 800841a:	69b8      	ldr	r0, [r7, #24]
 800841c:	69f9      	ldr	r1, [r7, #28]
 800841e:	f7f8 f863 	bl	80004e8 <__aeabi_lmul>
 8008422:	0002      	movs	r2, r0
 8008424:	000b      	movs	r3, r1
 8008426:	0010      	movs	r0, r2
 8008428:	0019      	movs	r1, r3
 800842a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800842c:	613b      	str	r3, [r7, #16]
 800842e:	2300      	movs	r3, #0
 8008430:	617b      	str	r3, [r7, #20]
 8008432:	693a      	ldr	r2, [r7, #16]
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	f7f8 f837 	bl	80004a8 <__aeabi_uldivmod>
 800843a:	0002      	movs	r2, r0
 800843c:	000b      	movs	r3, r1
 800843e:	0013      	movs	r3, r2
 8008440:	637b      	str	r3, [r7, #52]	@ 0x34
 8008442:	e037      	b.n	80084b4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008444:	4b26      	ldr	r3, [pc, #152]	@ (80084e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2210      	movs	r2, #16
 800844a:	4013      	ands	r3, r2
 800844c:	d01a      	beq.n	8008484 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800844e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008450:	60bb      	str	r3, [r7, #8]
 8008452:	2300      	movs	r3, #0
 8008454:	60fb      	str	r3, [r7, #12]
 8008456:	4a23      	ldr	r2, [pc, #140]	@ (80084e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008458:	2300      	movs	r3, #0
 800845a:	68b8      	ldr	r0, [r7, #8]
 800845c:	68f9      	ldr	r1, [r7, #12]
 800845e:	f7f8 f843 	bl	80004e8 <__aeabi_lmul>
 8008462:	0002      	movs	r2, r0
 8008464:	000b      	movs	r3, r1
 8008466:	0010      	movs	r0, r2
 8008468:	0019      	movs	r1, r3
 800846a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800846c:	603b      	str	r3, [r7, #0]
 800846e:	2300      	movs	r3, #0
 8008470:	607b      	str	r3, [r7, #4]
 8008472:	683a      	ldr	r2, [r7, #0]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f7f8 f817 	bl	80004a8 <__aeabi_uldivmod>
 800847a:	0002      	movs	r2, r0
 800847c:	000b      	movs	r3, r1
 800847e:	0013      	movs	r3, r2
 8008480:	637b      	str	r3, [r7, #52]	@ 0x34
 8008482:	e017      	b.n	80084b4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008486:	0018      	movs	r0, r3
 8008488:	2300      	movs	r3, #0
 800848a:	0019      	movs	r1, r3
 800848c:	4a16      	ldr	r2, [pc, #88]	@ (80084e8 <HAL_RCC_GetSysClockFreq+0x140>)
 800848e:	2300      	movs	r3, #0
 8008490:	f7f8 f82a 	bl	80004e8 <__aeabi_lmul>
 8008494:	0002      	movs	r2, r0
 8008496:	000b      	movs	r3, r1
 8008498:	0010      	movs	r0, r2
 800849a:	0019      	movs	r1, r3
 800849c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849e:	001c      	movs	r4, r3
 80084a0:	2300      	movs	r3, #0
 80084a2:	001d      	movs	r5, r3
 80084a4:	0022      	movs	r2, r4
 80084a6:	002b      	movs	r3, r5
 80084a8:	f7f7 fffe 	bl	80004a8 <__aeabi_uldivmod>
 80084ac:	0002      	movs	r2, r0
 80084ae:	000b      	movs	r3, r1
 80084b0:	0013      	movs	r3, r2
 80084b2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80084b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084b6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80084b8:	e00d      	b.n	80084d6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80084ba:	4b09      	ldr	r3, [pc, #36]	@ (80084e0 <HAL_RCC_GetSysClockFreq+0x138>)
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	0b5b      	lsrs	r3, r3, #13
 80084c0:	2207      	movs	r2, #7
 80084c2:	4013      	ands	r3, r2
 80084c4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80084c6:	6a3b      	ldr	r3, [r7, #32]
 80084c8:	3301      	adds	r3, #1
 80084ca:	2280      	movs	r2, #128	@ 0x80
 80084cc:	0212      	lsls	r2, r2, #8
 80084ce:	409a      	lsls	r2, r3
 80084d0:	0013      	movs	r3, r2
 80084d2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80084d4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80084d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80084d8:	0018      	movs	r0, r3
 80084da:	46bd      	mov	sp, r7
 80084dc:	b00e      	add	sp, #56	@ 0x38
 80084de:	bdb0      	pop	{r4, r5, r7, pc}
 80084e0:	40021000 	.word	0x40021000
 80084e4:	003d0900 	.word	0x003d0900
 80084e8:	00f42400 	.word	0x00f42400
 80084ec:	007a1200 	.word	0x007a1200
 80084f0:	0800c9e4 	.word	0x0800c9e4

080084f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80084f8:	4b02      	ldr	r3, [pc, #8]	@ (8008504 <HAL_RCC_GetHCLKFreq+0x10>)
 80084fa:	681b      	ldr	r3, [r3, #0]
}
 80084fc:	0018      	movs	r0, r3
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	46c0      	nop			@ (mov r8, r8)
 8008504:	20000008 	.word	0x20000008

08008508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800850c:	f7ff fff2 	bl	80084f4 <HAL_RCC_GetHCLKFreq>
 8008510:	0001      	movs	r1, r0
 8008512:	4b06      	ldr	r3, [pc, #24]	@ (800852c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	0a1b      	lsrs	r3, r3, #8
 8008518:	2207      	movs	r2, #7
 800851a:	4013      	ands	r3, r2
 800851c:	4a04      	ldr	r2, [pc, #16]	@ (8008530 <HAL_RCC_GetPCLK1Freq+0x28>)
 800851e:	5cd3      	ldrb	r3, [r2, r3]
 8008520:	40d9      	lsrs	r1, r3
 8008522:	000b      	movs	r3, r1
}
 8008524:	0018      	movs	r0, r3
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	46c0      	nop			@ (mov r8, r8)
 800852c:	40021000 	.word	0x40021000
 8008530:	0800c9dc 	.word	0x0800c9dc

08008534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008538:	f7ff ffdc 	bl	80084f4 <HAL_RCC_GetHCLKFreq>
 800853c:	0001      	movs	r1, r0
 800853e:	4b06      	ldr	r3, [pc, #24]	@ (8008558 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	0adb      	lsrs	r3, r3, #11
 8008544:	2207      	movs	r2, #7
 8008546:	4013      	ands	r3, r2
 8008548:	4a04      	ldr	r2, [pc, #16]	@ (800855c <HAL_RCC_GetPCLK2Freq+0x28>)
 800854a:	5cd3      	ldrb	r3, [r2, r3]
 800854c:	40d9      	lsrs	r1, r3
 800854e:	000b      	movs	r3, r1
}
 8008550:	0018      	movs	r0, r3
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	46c0      	nop			@ (mov r8, r8)
 8008558:	40021000 	.word	0x40021000
 800855c:	0800c9dc 	.word	0x0800c9dc

08008560 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8008568:	2017      	movs	r0, #23
 800856a:	183b      	adds	r3, r7, r0
 800856c:	2200      	movs	r2, #0
 800856e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2220      	movs	r2, #32
 8008576:	4013      	ands	r3, r2
 8008578:	d100      	bne.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800857a:	e0c7      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800857c:	4b9b      	ldr	r3, [pc, #620]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800857e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008580:	2380      	movs	r3, #128	@ 0x80
 8008582:	055b      	lsls	r3, r3, #21
 8008584:	4013      	ands	r3, r2
 8008586:	d109      	bne.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008588:	4b98      	ldr	r3, [pc, #608]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800858a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800858c:	4b97      	ldr	r3, [pc, #604]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800858e:	2180      	movs	r1, #128	@ 0x80
 8008590:	0549      	lsls	r1, r1, #21
 8008592:	430a      	orrs	r2, r1
 8008594:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8008596:	183b      	adds	r3, r7, r0
 8008598:	2201      	movs	r2, #1
 800859a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800859c:	4b94      	ldr	r3, [pc, #592]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	2380      	movs	r3, #128	@ 0x80
 80085a2:	005b      	lsls	r3, r3, #1
 80085a4:	4013      	ands	r3, r2
 80085a6:	d11a      	bne.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80085a8:	4b91      	ldr	r3, [pc, #580]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	4b90      	ldr	r3, [pc, #576]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80085ae:	2180      	movs	r1, #128	@ 0x80
 80085b0:	0049      	lsls	r1, r1, #1
 80085b2:	430a      	orrs	r2, r1
 80085b4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085b6:	f7fc fbfb 	bl	8004db0 <HAL_GetTick>
 80085ba:	0003      	movs	r3, r0
 80085bc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085be:	e008      	b.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085c0:	f7fc fbf6 	bl	8004db0 <HAL_GetTick>
 80085c4:	0002      	movs	r2, r0
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	2b64      	cmp	r3, #100	@ 0x64
 80085cc:	d901      	bls.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80085ce:	2303      	movs	r3, #3
 80085d0:	e107      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085d2:	4b87      	ldr	r3, [pc, #540]	@ (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	2380      	movs	r3, #128	@ 0x80
 80085d8:	005b      	lsls	r3, r3, #1
 80085da:	4013      	ands	r3, r2
 80085dc:	d0f0      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80085de:	4b83      	ldr	r3, [pc, #524]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	23c0      	movs	r3, #192	@ 0xc0
 80085e4:	039b      	lsls	r3, r3, #14
 80085e6:	4013      	ands	r3, r2
 80085e8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685a      	ldr	r2, [r3, #4]
 80085ee:	23c0      	movs	r3, #192	@ 0xc0
 80085f0:	039b      	lsls	r3, r3, #14
 80085f2:	4013      	ands	r3, r2
 80085f4:	68fa      	ldr	r2, [r7, #12]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d013      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	685a      	ldr	r2, [r3, #4]
 80085fe:	23c0      	movs	r3, #192	@ 0xc0
 8008600:	029b      	lsls	r3, r3, #10
 8008602:	401a      	ands	r2, r3
 8008604:	23c0      	movs	r3, #192	@ 0xc0
 8008606:	029b      	lsls	r3, r3, #10
 8008608:	429a      	cmp	r2, r3
 800860a:	d10a      	bne.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800860c:	4b77      	ldr	r3, [pc, #476]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	2380      	movs	r3, #128	@ 0x80
 8008612:	029b      	lsls	r3, r3, #10
 8008614:	401a      	ands	r2, r3
 8008616:	2380      	movs	r3, #128	@ 0x80
 8008618:	029b      	lsls	r3, r3, #10
 800861a:	429a      	cmp	r2, r3
 800861c:	d101      	bne.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e0df      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8008622:	4b72      	ldr	r3, [pc, #456]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008624:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008626:	23c0      	movs	r3, #192	@ 0xc0
 8008628:	029b      	lsls	r3, r3, #10
 800862a:	4013      	ands	r3, r2
 800862c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d03b      	beq.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685a      	ldr	r2, [r3, #4]
 8008638:	23c0      	movs	r3, #192	@ 0xc0
 800863a:	029b      	lsls	r3, r3, #10
 800863c:	4013      	ands	r3, r2
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	429a      	cmp	r2, r3
 8008642:	d033      	beq.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2220      	movs	r2, #32
 800864a:	4013      	ands	r3, r2
 800864c:	d02e      	beq.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800864e:	4b67      	ldr	r3, [pc, #412]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008652:	4a68      	ldr	r2, [pc, #416]	@ (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008654:	4013      	ands	r3, r2
 8008656:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008658:	4b64      	ldr	r3, [pc, #400]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800865a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800865c:	4b63      	ldr	r3, [pc, #396]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800865e:	2180      	movs	r1, #128	@ 0x80
 8008660:	0309      	lsls	r1, r1, #12
 8008662:	430a      	orrs	r2, r1
 8008664:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008666:	4b61      	ldr	r3, [pc, #388]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008668:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800866a:	4b60      	ldr	r3, [pc, #384]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800866c:	4962      	ldr	r1, [pc, #392]	@ (80087f8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800866e:	400a      	ands	r2, r1
 8008670:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8008672:	4b5e      	ldr	r3, [pc, #376]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	2380      	movs	r3, #128	@ 0x80
 800867c:	005b      	lsls	r3, r3, #1
 800867e:	4013      	ands	r3, r2
 8008680:	d014      	beq.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008682:	f7fc fb95 	bl	8004db0 <HAL_GetTick>
 8008686:	0003      	movs	r3, r0
 8008688:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800868a:	e009      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800868c:	f7fc fb90 	bl	8004db0 <HAL_GetTick>
 8008690:	0002      	movs	r2, r0
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	4a59      	ldr	r2, [pc, #356]	@ (80087fc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d901      	bls.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	e0a0      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80086a0:	4b52      	ldr	r3, [pc, #328]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80086a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80086a4:	2380      	movs	r3, #128	@ 0x80
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	4013      	ands	r3, r2
 80086aa:	d0ef      	beq.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2220      	movs	r2, #32
 80086b2:	4013      	ands	r3, r2
 80086b4:	d01f      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	685a      	ldr	r2, [r3, #4]
 80086ba:	23c0      	movs	r3, #192	@ 0xc0
 80086bc:	029b      	lsls	r3, r3, #10
 80086be:	401a      	ands	r2, r3
 80086c0:	23c0      	movs	r3, #192	@ 0xc0
 80086c2:	029b      	lsls	r3, r3, #10
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d10c      	bne.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80086c8:	4b48      	ldr	r3, [pc, #288]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a4c      	ldr	r2, [pc, #304]	@ (8008800 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80086ce:	4013      	ands	r3, r2
 80086d0:	0019      	movs	r1, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	685a      	ldr	r2, [r3, #4]
 80086d6:	23c0      	movs	r3, #192	@ 0xc0
 80086d8:	039b      	lsls	r3, r3, #14
 80086da:	401a      	ands	r2, r3
 80086dc:	4b43      	ldr	r3, [pc, #268]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80086de:	430a      	orrs	r2, r1
 80086e0:	601a      	str	r2, [r3, #0]
 80086e2:	4b42      	ldr	r3, [pc, #264]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80086e4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	685a      	ldr	r2, [r3, #4]
 80086ea:	23c0      	movs	r3, #192	@ 0xc0
 80086ec:	029b      	lsls	r3, r3, #10
 80086ee:	401a      	ands	r2, r3
 80086f0:	4b3e      	ldr	r3, [pc, #248]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80086f2:	430a      	orrs	r2, r1
 80086f4:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80086f6:	2317      	movs	r3, #23
 80086f8:	18fb      	adds	r3, r7, r3
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d105      	bne.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008700:	4b3a      	ldr	r3, [pc, #232]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008702:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008704:	4b39      	ldr	r3, [pc, #228]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008706:	493f      	ldr	r1, [pc, #252]	@ (8008804 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8008708:	400a      	ands	r2, r1
 800870a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2201      	movs	r2, #1
 8008712:	4013      	ands	r3, r2
 8008714:	d009      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008716:	4b35      	ldr	r3, [pc, #212]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800871a:	2203      	movs	r2, #3
 800871c:	4393      	bics	r3, r2
 800871e:	0019      	movs	r1, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	689a      	ldr	r2, [r3, #8]
 8008724:	4b31      	ldr	r3, [pc, #196]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008726:	430a      	orrs	r2, r1
 8008728:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2202      	movs	r2, #2
 8008730:	4013      	ands	r3, r2
 8008732:	d009      	beq.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008734:	4b2d      	ldr	r3, [pc, #180]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008738:	220c      	movs	r2, #12
 800873a:	4393      	bics	r3, r2
 800873c:	0019      	movs	r1, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68da      	ldr	r2, [r3, #12]
 8008742:	4b2a      	ldr	r3, [pc, #168]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008744:	430a      	orrs	r2, r1
 8008746:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2204      	movs	r2, #4
 800874e:	4013      	ands	r3, r2
 8008750:	d009      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008752:	4b26      	ldr	r3, [pc, #152]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008756:	4a2c      	ldr	r2, [pc, #176]	@ (8008808 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8008758:	4013      	ands	r3, r2
 800875a:	0019      	movs	r1, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	691a      	ldr	r2, [r3, #16]
 8008760:	4b22      	ldr	r3, [pc, #136]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008762:	430a      	orrs	r2, r1
 8008764:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2208      	movs	r2, #8
 800876c:	4013      	ands	r3, r2
 800876e:	d009      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008770:	4b1e      	ldr	r3, [pc, #120]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008774:	4a25      	ldr	r2, [pc, #148]	@ (800880c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8008776:	4013      	ands	r3, r2
 8008778:	0019      	movs	r1, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	695a      	ldr	r2, [r3, #20]
 800877e:	4b1b      	ldr	r3, [pc, #108]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008780:	430a      	orrs	r2, r1
 8008782:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	2380      	movs	r3, #128	@ 0x80
 800878a:	005b      	lsls	r3, r3, #1
 800878c:	4013      	ands	r3, r2
 800878e:	d009      	beq.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008790:	4b16      	ldr	r3, [pc, #88]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8008792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008794:	4a17      	ldr	r2, [pc, #92]	@ (80087f4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008796:	4013      	ands	r3, r2
 8008798:	0019      	movs	r1, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	699a      	ldr	r2, [r3, #24]
 800879e:	4b13      	ldr	r3, [pc, #76]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80087a0:	430a      	orrs	r2, r1
 80087a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2240      	movs	r2, #64	@ 0x40
 80087aa:	4013      	ands	r3, r2
 80087ac:	d009      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80087ae:	4b0f      	ldr	r3, [pc, #60]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80087b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087b2:	4a17      	ldr	r2, [pc, #92]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80087b4:	4013      	ands	r3, r2
 80087b6:	0019      	movs	r1, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6a1a      	ldr	r2, [r3, #32]
 80087bc:	4b0b      	ldr	r3, [pc, #44]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80087be:	430a      	orrs	r2, r1
 80087c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2280      	movs	r2, #128	@ 0x80
 80087c8:	4013      	ands	r3, r2
 80087ca:	d009      	beq.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80087cc:	4b07      	ldr	r3, [pc, #28]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80087ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087d0:	4a10      	ldr	r2, [pc, #64]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80087d2:	4013      	ands	r3, r2
 80087d4:	0019      	movs	r1, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	69da      	ldr	r2, [r3, #28]
 80087da:	4b04      	ldr	r3, [pc, #16]	@ (80087ec <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80087dc:	430a      	orrs	r2, r1
 80087de:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	0018      	movs	r0, r3
 80087e4:	46bd      	mov	sp, r7
 80087e6:	b006      	add	sp, #24
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	46c0      	nop			@ (mov r8, r8)
 80087ec:	40021000 	.word	0x40021000
 80087f0:	40007000 	.word	0x40007000
 80087f4:	fffcffff 	.word	0xfffcffff
 80087f8:	fff7ffff 	.word	0xfff7ffff
 80087fc:	00001388 	.word	0x00001388
 8008800:	ffcfffff 	.word	0xffcfffff
 8008804:	efffffff 	.word	0xefffffff
 8008808:	fffff3ff 	.word	0xfffff3ff
 800880c:	ffffcfff 	.word	0xffffcfff
 8008810:	fbffffff 	.word	0xfbffffff
 8008814:	fff3ffff 	.word	0xfff3ffff

08008818 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008818:	b5b0      	push	{r4, r5, r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008820:	230f      	movs	r3, #15
 8008822:	18fb      	adds	r3, r7, r3
 8008824:	2201      	movs	r2, #1
 8008826:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d101      	bne.n	8008832 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e088      	b.n	8008944 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2221      	movs	r2, #33	@ 0x21
 8008836:	5c9b      	ldrb	r3, [r3, r2]
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d107      	bne.n	800884e <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2220      	movs	r2, #32
 8008842:	2100      	movs	r1, #0
 8008844:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	0018      	movs	r0, r3
 800884a:	f7fb fa59 	bl	8003d00 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2221      	movs	r2, #33	@ 0x21
 8008852:	2102      	movs	r1, #2
 8008854:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	2210      	movs	r2, #16
 800885e:	4013      	ands	r3, r2
 8008860:	2b10      	cmp	r3, #16
 8008862:	d05f      	beq.n	8008924 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	22ca      	movs	r2, #202	@ 0xca
 800886a:	625a      	str	r2, [r3, #36]	@ 0x24
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2253      	movs	r2, #83	@ 0x53
 8008872:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008874:	250f      	movs	r5, #15
 8008876:	197c      	adds	r4, r7, r5
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	0018      	movs	r0, r3
 800887c:	f000 f890 	bl	80089a0 <RTC_EnterInitMode>
 8008880:	0003      	movs	r3, r0
 8008882:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8008884:	0028      	movs	r0, r5
 8008886:	183b      	adds	r3, r7, r0
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d12c      	bne.n	80088e8 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	689a      	ldr	r2, [r3, #8]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	492c      	ldr	r1, [pc, #176]	@ (800894c <HAL_RTC_Init+0x134>)
 800889a:	400a      	ands	r2, r1
 800889c:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	6899      	ldr	r1, [r3, #8]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685a      	ldr	r2, [r3, #4]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	431a      	orrs	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	431a      	orrs	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	430a      	orrs	r2, r1
 80088ba:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	68d2      	ldr	r2, [r2, #12]
 80088c4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	6919      	ldr	r1, [r3, #16]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	041a      	lsls	r2, r3, #16
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	430a      	orrs	r2, r1
 80088d8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80088da:	183c      	adds	r4, r7, r0
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	0018      	movs	r0, r3
 80088e0:	f000 f8a2 	bl	8008a28 <RTC_ExitInitMode>
 80088e4:	0003      	movs	r3, r0
 80088e6:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80088e8:	230f      	movs	r3, #15
 80088ea:	18fb      	adds	r3, r7, r3
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d113      	bne.n	800891a <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2103      	movs	r1, #3
 80088fe:	438a      	bics	r2, r1
 8008900:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	69da      	ldr	r2, [r3, #28]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	695b      	ldr	r3, [r3, #20]
 8008910:	431a      	orrs	r2, r3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	430a      	orrs	r2, r1
 8008918:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	22ff      	movs	r2, #255	@ 0xff
 8008920:	625a      	str	r2, [r3, #36]	@ 0x24
 8008922:	e003      	b.n	800892c <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008924:	230f      	movs	r3, #15
 8008926:	18fb      	adds	r3, r7, r3
 8008928:	2200      	movs	r2, #0
 800892a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 800892c:	230f      	movs	r3, #15
 800892e:	18fb      	adds	r3, r7, r3
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d103      	bne.n	800893e <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2221      	movs	r2, #33	@ 0x21
 800893a:	2101      	movs	r1, #1
 800893c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800893e:	230f      	movs	r3, #15
 8008940:	18fb      	adds	r3, r7, r3
 8008942:	781b      	ldrb	r3, [r3, #0]
}
 8008944:	0018      	movs	r0, r3
 8008946:	46bd      	mov	sp, r7
 8008948:	b004      	add	sp, #16
 800894a:	bdb0      	pop	{r4, r5, r7, pc}
 800894c:	ff8fffbf 	.word	0xff8fffbf

08008950 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008958:	2300      	movs	r3, #0
 800895a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a0e      	ldr	r2, [pc, #56]	@ (800899c <HAL_RTC_WaitForSynchro+0x4c>)
 8008962:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008964:	f7fc fa24 	bl	8004db0 <HAL_GetTick>
 8008968:	0003      	movs	r3, r0
 800896a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800896c:	e00a      	b.n	8008984 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800896e:	f7fc fa1f 	bl	8004db0 <HAL_GetTick>
 8008972:	0002      	movs	r2, r0
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	1ad2      	subs	r2, r2, r3
 8008978:	23fa      	movs	r3, #250	@ 0xfa
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	429a      	cmp	r2, r3
 800897e:	d901      	bls.n	8008984 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008980:	2303      	movs	r3, #3
 8008982:	e006      	b.n	8008992 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	2220      	movs	r2, #32
 800898c:	4013      	ands	r3, r2
 800898e:	d0ee      	beq.n	800896e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	0018      	movs	r0, r3
 8008994:	46bd      	mov	sp, r7
 8008996:	b004      	add	sp, #16
 8008998:	bd80      	pop	{r7, pc}
 800899a:	46c0      	nop			@ (mov r8, r8)
 800899c:	0001ff5f 	.word	0x0001ff5f

080089a0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80089a8:	2300      	movs	r3, #0
 80089aa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80089ac:	230f      	movs	r3, #15
 80089ae:	18fb      	adds	r3, r7, r3
 80089b0:	2200      	movs	r2, #0
 80089b2:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	2240      	movs	r2, #64	@ 0x40
 80089bc:	4013      	ands	r3, r2
 80089be:	d12c      	bne.n	8008a1a <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68da      	ldr	r2, [r3, #12]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2180      	movs	r1, #128	@ 0x80
 80089cc:	430a      	orrs	r2, r1
 80089ce:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80089d0:	f7fc f9ee 	bl	8004db0 <HAL_GetTick>
 80089d4:	0003      	movs	r3, r0
 80089d6:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80089d8:	e014      	b.n	8008a04 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80089da:	f7fc f9e9 	bl	8004db0 <HAL_GetTick>
 80089de:	0002      	movs	r2, r0
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	1ad2      	subs	r2, r2, r3
 80089e4:	200f      	movs	r0, #15
 80089e6:	183b      	adds	r3, r7, r0
 80089e8:	1839      	adds	r1, r7, r0
 80089ea:	7809      	ldrb	r1, [r1, #0]
 80089ec:	7019      	strb	r1, [r3, #0]
 80089ee:	23fa      	movs	r3, #250	@ 0xfa
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d906      	bls.n	8008a04 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2221      	movs	r2, #33	@ 0x21
 80089fa:	2104      	movs	r1, #4
 80089fc:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80089fe:	183b      	adds	r3, r7, r0
 8008a00:	2201      	movs	r2, #1
 8008a02:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	2240      	movs	r2, #64	@ 0x40
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	d104      	bne.n	8008a1a <RTC_EnterInitMode+0x7a>
 8008a10:	230f      	movs	r3, #15
 8008a12:	18fb      	adds	r3, r7, r3
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d1df      	bne.n	80089da <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8008a1a:	230f      	movs	r3, #15
 8008a1c:	18fb      	adds	r3, r7, r3
 8008a1e:	781b      	ldrb	r3, [r3, #0]
}
 8008a20:	0018      	movs	r0, r3
 8008a22:	46bd      	mov	sp, r7
 8008a24:	b004      	add	sp, #16
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008a28:	b590      	push	{r4, r7, lr}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a30:	240f      	movs	r4, #15
 8008a32:	193b      	adds	r3, r7, r4
 8008a34:	2200      	movs	r2, #0
 8008a36:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	68da      	ldr	r2, [r3, #12]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2180      	movs	r1, #128	@ 0x80
 8008a44:	438a      	bics	r2, r1
 8008a46:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	2220      	movs	r2, #32
 8008a50:	4013      	ands	r3, r2
 8008a52:	d10c      	bne.n	8008a6e <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	0018      	movs	r0, r3
 8008a58:	f7ff ff7a 	bl	8008950 <HAL_RTC_WaitForSynchro>
 8008a5c:	1e03      	subs	r3, r0, #0
 8008a5e:	d006      	beq.n	8008a6e <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2221      	movs	r2, #33	@ 0x21
 8008a64:	2104      	movs	r1, #4
 8008a66:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8008a68:	193b      	adds	r3, r7, r4
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8008a6e:	230f      	movs	r3, #15
 8008a70:	18fb      	adds	r3, r7, r3
 8008a72:	781b      	ldrb	r3, [r3, #0]
}
 8008a74:	0018      	movs	r0, r3
 8008a76:	46bd      	mov	sp, r7
 8008a78:	b005      	add	sp, #20
 8008a7a:	bd90      	pop	{r4, r7, pc}

08008a7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d101      	bne.n	8008a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e044      	b.n	8008b18 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d107      	bne.n	8008aa6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2278      	movs	r2, #120	@ 0x78
 8008a9a:	2100      	movs	r1, #0
 8008a9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	0018      	movs	r0, r3
 8008aa2:	f7fb fc6d 	bl	8004380 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2224      	movs	r2, #36	@ 0x24
 8008aaa:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2101      	movs	r1, #1
 8008ab8:	438a      	bics	r2, r1
 8008aba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	0018      	movs	r0, r3
 8008ac0:	f000 f8d0 	bl	8008c64 <UART_SetConfig>
 8008ac4:	0003      	movs	r3, r0
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d101      	bne.n	8008ace <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	e024      	b.n	8008b18 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d003      	beq.n	8008ade <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	0018      	movs	r0, r3
 8008ada:	f000 fb61 	bl	80091a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	685a      	ldr	r2, [r3, #4]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	490d      	ldr	r1, [pc, #52]	@ (8008b20 <HAL_UART_Init+0xa4>)
 8008aea:	400a      	ands	r2, r1
 8008aec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	689a      	ldr	r2, [r3, #8]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	212a      	movs	r1, #42	@ 0x2a
 8008afa:	438a      	bics	r2, r1
 8008afc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2101      	movs	r1, #1
 8008b0a:	430a      	orrs	r2, r1
 8008b0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	0018      	movs	r0, r3
 8008b12:	f000 fbf9 	bl	8009308 <UART_CheckIdleState>
 8008b16:	0003      	movs	r3, r0
}
 8008b18:	0018      	movs	r0, r3
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	b002      	add	sp, #8
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	ffffb7ff 	.word	0xffffb7ff

08008b24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b08a      	sub	sp, #40	@ 0x28
 8008b28:	af02      	add	r7, sp, #8
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	603b      	str	r3, [r7, #0]
 8008b30:	1dbb      	adds	r3, r7, #6
 8008b32:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b38:	2b20      	cmp	r3, #32
 8008b3a:	d000      	beq.n	8008b3e <HAL_UART_Transmit+0x1a>
 8008b3c:	e08c      	b.n	8008c58 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d003      	beq.n	8008b4c <HAL_UART_Transmit+0x28>
 8008b44:	1dbb      	adds	r3, r7, #6
 8008b46:	881b      	ldrh	r3, [r3, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d101      	bne.n	8008b50 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e084      	b.n	8008c5a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	689a      	ldr	r2, [r3, #8]
 8008b54:	2380      	movs	r3, #128	@ 0x80
 8008b56:	015b      	lsls	r3, r3, #5
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d109      	bne.n	8008b70 <HAL_UART_Transmit+0x4c>
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d105      	bne.n	8008b70 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	2201      	movs	r2, #1
 8008b68:	4013      	ands	r3, r2
 8008b6a:	d001      	beq.n	8008b70 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e074      	b.n	8008c5a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2284      	movs	r2, #132	@ 0x84
 8008b74:	2100      	movs	r1, #0
 8008b76:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2221      	movs	r2, #33	@ 0x21
 8008b7c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b7e:	f7fc f917 	bl	8004db0 <HAL_GetTick>
 8008b82:	0003      	movs	r3, r0
 8008b84:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	1dba      	adds	r2, r7, #6
 8008b8a:	2150      	movs	r1, #80	@ 0x50
 8008b8c:	8812      	ldrh	r2, [r2, #0]
 8008b8e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	1dba      	adds	r2, r7, #6
 8008b94:	2152      	movs	r1, #82	@ 0x52
 8008b96:	8812      	ldrh	r2, [r2, #0]
 8008b98:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	689a      	ldr	r2, [r3, #8]
 8008b9e:	2380      	movs	r3, #128	@ 0x80
 8008ba0:	015b      	lsls	r3, r3, #5
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d108      	bne.n	8008bb8 <HAL_UART_Transmit+0x94>
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d104      	bne.n	8008bb8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	61bb      	str	r3, [r7, #24]
 8008bb6:	e003      	b.n	8008bc0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008bc0:	e02f      	b.n	8008c22 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bc2:	697a      	ldr	r2, [r7, #20]
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	0013      	movs	r3, r2
 8008bcc:	2200      	movs	r2, #0
 8008bce:	2180      	movs	r1, #128	@ 0x80
 8008bd0:	f000 fc42 	bl	8009458 <UART_WaitOnFlagUntilTimeout>
 8008bd4:	1e03      	subs	r3, r0, #0
 8008bd6:	d004      	beq.n	8008be2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2220      	movs	r2, #32
 8008bdc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008bde:	2303      	movs	r3, #3
 8008be0:	e03b      	b.n	8008c5a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d10b      	bne.n	8008c00 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	881b      	ldrh	r3, [r3, #0]
 8008bec:	001a      	movs	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	05d2      	lsls	r2, r2, #23
 8008bf4:	0dd2      	lsrs	r2, r2, #23
 8008bf6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	3302      	adds	r3, #2
 8008bfc:	61bb      	str	r3, [r7, #24]
 8008bfe:	e007      	b.n	8008c10 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	781a      	ldrb	r2, [r3, #0]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2252      	movs	r2, #82	@ 0x52
 8008c14:	5a9b      	ldrh	r3, [r3, r2]
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	b299      	uxth	r1, r3
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2252      	movs	r2, #82	@ 0x52
 8008c20:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2252      	movs	r2, #82	@ 0x52
 8008c26:	5a9b      	ldrh	r3, [r3, r2]
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1c9      	bne.n	8008bc2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c2e:	697a      	ldr	r2, [r7, #20]
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	0013      	movs	r3, r2
 8008c38:	2200      	movs	r2, #0
 8008c3a:	2140      	movs	r1, #64	@ 0x40
 8008c3c:	f000 fc0c 	bl	8009458 <UART_WaitOnFlagUntilTimeout>
 8008c40:	1e03      	subs	r3, r0, #0
 8008c42:	d004      	beq.n	8008c4e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2220      	movs	r2, #32
 8008c48:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	e005      	b.n	8008c5a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2220      	movs	r2, #32
 8008c52:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008c54:	2300      	movs	r3, #0
 8008c56:	e000      	b.n	8008c5a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8008c58:	2302      	movs	r3, #2
  }
}
 8008c5a:	0018      	movs	r0, r3
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	b008      	add	sp, #32
 8008c60:	bd80      	pop	{r7, pc}
	...

08008c64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c64:	b5b0      	push	{r4, r5, r7, lr}
 8008c66:	b08e      	sub	sp, #56	@ 0x38
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c6c:	231a      	movs	r3, #26
 8008c6e:	2218      	movs	r2, #24
 8008c70:	189b      	adds	r3, r3, r2
 8008c72:	19db      	adds	r3, r3, r7
 8008c74:	2200      	movs	r2, #0
 8008c76:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	689a      	ldr	r2, [r3, #8]
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	431a      	orrs	r2, r3
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	695b      	ldr	r3, [r3, #20]
 8008c86:	431a      	orrs	r2, r3
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	69db      	ldr	r3, [r3, #28]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4ac3      	ldr	r2, [pc, #780]	@ (8008fa4 <UART_SetConfig+0x340>)
 8008c98:	4013      	ands	r3, r2
 8008c9a:	0019      	movs	r1, r3
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ca2:	430a      	orrs	r2, r1
 8008ca4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	4abe      	ldr	r2, [pc, #760]	@ (8008fa8 <UART_SetConfig+0x344>)
 8008cae:	4013      	ands	r3, r2
 8008cb0:	0019      	movs	r1, r3
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	68da      	ldr	r2, [r3, #12]
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	430a      	orrs	r2, r1
 8008cbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4ab8      	ldr	r2, [pc, #736]	@ (8008fac <UART_SetConfig+0x348>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d004      	beq.n	8008cd8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	4ab4      	ldr	r2, [pc, #720]	@ (8008fb0 <UART_SetConfig+0x34c>)
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	0019      	movs	r1, r3
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008cea:	430a      	orrs	r2, r1
 8008cec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4ab0      	ldr	r2, [pc, #704]	@ (8008fb4 <UART_SetConfig+0x350>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d131      	bne.n	8008d5c <UART_SetConfig+0xf8>
 8008cf8:	4baf      	ldr	r3, [pc, #700]	@ (8008fb8 <UART_SetConfig+0x354>)
 8008cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cfc:	2203      	movs	r2, #3
 8008cfe:	4013      	ands	r3, r2
 8008d00:	2b03      	cmp	r3, #3
 8008d02:	d01d      	beq.n	8008d40 <UART_SetConfig+0xdc>
 8008d04:	d823      	bhi.n	8008d4e <UART_SetConfig+0xea>
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d00c      	beq.n	8008d24 <UART_SetConfig+0xc0>
 8008d0a:	d820      	bhi.n	8008d4e <UART_SetConfig+0xea>
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d002      	beq.n	8008d16 <UART_SetConfig+0xb2>
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d00e      	beq.n	8008d32 <UART_SetConfig+0xce>
 8008d14:	e01b      	b.n	8008d4e <UART_SetConfig+0xea>
 8008d16:	231b      	movs	r3, #27
 8008d18:	2218      	movs	r2, #24
 8008d1a:	189b      	adds	r3, r3, r2
 8008d1c:	19db      	adds	r3, r3, r7
 8008d1e:	2201      	movs	r2, #1
 8008d20:	701a      	strb	r2, [r3, #0]
 8008d22:	e0b4      	b.n	8008e8e <UART_SetConfig+0x22a>
 8008d24:	231b      	movs	r3, #27
 8008d26:	2218      	movs	r2, #24
 8008d28:	189b      	adds	r3, r3, r2
 8008d2a:	19db      	adds	r3, r3, r7
 8008d2c:	2202      	movs	r2, #2
 8008d2e:	701a      	strb	r2, [r3, #0]
 8008d30:	e0ad      	b.n	8008e8e <UART_SetConfig+0x22a>
 8008d32:	231b      	movs	r3, #27
 8008d34:	2218      	movs	r2, #24
 8008d36:	189b      	adds	r3, r3, r2
 8008d38:	19db      	adds	r3, r3, r7
 8008d3a:	2204      	movs	r2, #4
 8008d3c:	701a      	strb	r2, [r3, #0]
 8008d3e:	e0a6      	b.n	8008e8e <UART_SetConfig+0x22a>
 8008d40:	231b      	movs	r3, #27
 8008d42:	2218      	movs	r2, #24
 8008d44:	189b      	adds	r3, r3, r2
 8008d46:	19db      	adds	r3, r3, r7
 8008d48:	2208      	movs	r2, #8
 8008d4a:	701a      	strb	r2, [r3, #0]
 8008d4c:	e09f      	b.n	8008e8e <UART_SetConfig+0x22a>
 8008d4e:	231b      	movs	r3, #27
 8008d50:	2218      	movs	r2, #24
 8008d52:	189b      	adds	r3, r3, r2
 8008d54:	19db      	adds	r3, r3, r7
 8008d56:	2210      	movs	r2, #16
 8008d58:	701a      	strb	r2, [r3, #0]
 8008d5a:	e098      	b.n	8008e8e <UART_SetConfig+0x22a>
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a96      	ldr	r2, [pc, #600]	@ (8008fbc <UART_SetConfig+0x358>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d131      	bne.n	8008dca <UART_SetConfig+0x166>
 8008d66:	4b94      	ldr	r3, [pc, #592]	@ (8008fb8 <UART_SetConfig+0x354>)
 8008d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d6a:	220c      	movs	r2, #12
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	2b0c      	cmp	r3, #12
 8008d70:	d01d      	beq.n	8008dae <UART_SetConfig+0x14a>
 8008d72:	d823      	bhi.n	8008dbc <UART_SetConfig+0x158>
 8008d74:	2b08      	cmp	r3, #8
 8008d76:	d00c      	beq.n	8008d92 <UART_SetConfig+0x12e>
 8008d78:	d820      	bhi.n	8008dbc <UART_SetConfig+0x158>
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d002      	beq.n	8008d84 <UART_SetConfig+0x120>
 8008d7e:	2b04      	cmp	r3, #4
 8008d80:	d00e      	beq.n	8008da0 <UART_SetConfig+0x13c>
 8008d82:	e01b      	b.n	8008dbc <UART_SetConfig+0x158>
 8008d84:	231b      	movs	r3, #27
 8008d86:	2218      	movs	r2, #24
 8008d88:	189b      	adds	r3, r3, r2
 8008d8a:	19db      	adds	r3, r3, r7
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	701a      	strb	r2, [r3, #0]
 8008d90:	e07d      	b.n	8008e8e <UART_SetConfig+0x22a>
 8008d92:	231b      	movs	r3, #27
 8008d94:	2218      	movs	r2, #24
 8008d96:	189b      	adds	r3, r3, r2
 8008d98:	19db      	adds	r3, r3, r7
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	701a      	strb	r2, [r3, #0]
 8008d9e:	e076      	b.n	8008e8e <UART_SetConfig+0x22a>
 8008da0:	231b      	movs	r3, #27
 8008da2:	2218      	movs	r2, #24
 8008da4:	189b      	adds	r3, r3, r2
 8008da6:	19db      	adds	r3, r3, r7
 8008da8:	2204      	movs	r2, #4
 8008daa:	701a      	strb	r2, [r3, #0]
 8008dac:	e06f      	b.n	8008e8e <UART_SetConfig+0x22a>
 8008dae:	231b      	movs	r3, #27
 8008db0:	2218      	movs	r2, #24
 8008db2:	189b      	adds	r3, r3, r2
 8008db4:	19db      	adds	r3, r3, r7
 8008db6:	2208      	movs	r2, #8
 8008db8:	701a      	strb	r2, [r3, #0]
 8008dba:	e068      	b.n	8008e8e <UART_SetConfig+0x22a>
 8008dbc:	231b      	movs	r3, #27
 8008dbe:	2218      	movs	r2, #24
 8008dc0:	189b      	adds	r3, r3, r2
 8008dc2:	19db      	adds	r3, r3, r7
 8008dc4:	2210      	movs	r2, #16
 8008dc6:	701a      	strb	r2, [r3, #0]
 8008dc8:	e061      	b.n	8008e8e <UART_SetConfig+0x22a>
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a7c      	ldr	r2, [pc, #496]	@ (8008fc0 <UART_SetConfig+0x35c>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d106      	bne.n	8008de2 <UART_SetConfig+0x17e>
 8008dd4:	231b      	movs	r3, #27
 8008dd6:	2218      	movs	r2, #24
 8008dd8:	189b      	adds	r3, r3, r2
 8008dda:	19db      	adds	r3, r3, r7
 8008ddc:	2200      	movs	r2, #0
 8008dde:	701a      	strb	r2, [r3, #0]
 8008de0:	e055      	b.n	8008e8e <UART_SetConfig+0x22a>
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a77      	ldr	r2, [pc, #476]	@ (8008fc4 <UART_SetConfig+0x360>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d106      	bne.n	8008dfa <UART_SetConfig+0x196>
 8008dec:	231b      	movs	r3, #27
 8008dee:	2218      	movs	r2, #24
 8008df0:	189b      	adds	r3, r3, r2
 8008df2:	19db      	adds	r3, r3, r7
 8008df4:	2200      	movs	r2, #0
 8008df6:	701a      	strb	r2, [r3, #0]
 8008df8:	e049      	b.n	8008e8e <UART_SetConfig+0x22a>
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a6b      	ldr	r2, [pc, #428]	@ (8008fac <UART_SetConfig+0x348>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d13e      	bne.n	8008e82 <UART_SetConfig+0x21e>
 8008e04:	4b6c      	ldr	r3, [pc, #432]	@ (8008fb8 <UART_SetConfig+0x354>)
 8008e06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e08:	23c0      	movs	r3, #192	@ 0xc0
 8008e0a:	011b      	lsls	r3, r3, #4
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	22c0      	movs	r2, #192	@ 0xc0
 8008e10:	0112      	lsls	r2, r2, #4
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d027      	beq.n	8008e66 <UART_SetConfig+0x202>
 8008e16:	22c0      	movs	r2, #192	@ 0xc0
 8008e18:	0112      	lsls	r2, r2, #4
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d82a      	bhi.n	8008e74 <UART_SetConfig+0x210>
 8008e1e:	2280      	movs	r2, #128	@ 0x80
 8008e20:	0112      	lsls	r2, r2, #4
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d011      	beq.n	8008e4a <UART_SetConfig+0x1e6>
 8008e26:	2280      	movs	r2, #128	@ 0x80
 8008e28:	0112      	lsls	r2, r2, #4
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d822      	bhi.n	8008e74 <UART_SetConfig+0x210>
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d004      	beq.n	8008e3c <UART_SetConfig+0x1d8>
 8008e32:	2280      	movs	r2, #128	@ 0x80
 8008e34:	00d2      	lsls	r2, r2, #3
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d00e      	beq.n	8008e58 <UART_SetConfig+0x1f4>
 8008e3a:	e01b      	b.n	8008e74 <UART_SetConfig+0x210>
 8008e3c:	231b      	movs	r3, #27
 8008e3e:	2218      	movs	r2, #24
 8008e40:	189b      	adds	r3, r3, r2
 8008e42:	19db      	adds	r3, r3, r7
 8008e44:	2200      	movs	r2, #0
 8008e46:	701a      	strb	r2, [r3, #0]
 8008e48:	e021      	b.n	8008e8e <UART_SetConfig+0x22a>
 8008e4a:	231b      	movs	r3, #27
 8008e4c:	2218      	movs	r2, #24
 8008e4e:	189b      	adds	r3, r3, r2
 8008e50:	19db      	adds	r3, r3, r7
 8008e52:	2202      	movs	r2, #2
 8008e54:	701a      	strb	r2, [r3, #0]
 8008e56:	e01a      	b.n	8008e8e <UART_SetConfig+0x22a>
 8008e58:	231b      	movs	r3, #27
 8008e5a:	2218      	movs	r2, #24
 8008e5c:	189b      	adds	r3, r3, r2
 8008e5e:	19db      	adds	r3, r3, r7
 8008e60:	2204      	movs	r2, #4
 8008e62:	701a      	strb	r2, [r3, #0]
 8008e64:	e013      	b.n	8008e8e <UART_SetConfig+0x22a>
 8008e66:	231b      	movs	r3, #27
 8008e68:	2218      	movs	r2, #24
 8008e6a:	189b      	adds	r3, r3, r2
 8008e6c:	19db      	adds	r3, r3, r7
 8008e6e:	2208      	movs	r2, #8
 8008e70:	701a      	strb	r2, [r3, #0]
 8008e72:	e00c      	b.n	8008e8e <UART_SetConfig+0x22a>
 8008e74:	231b      	movs	r3, #27
 8008e76:	2218      	movs	r2, #24
 8008e78:	189b      	adds	r3, r3, r2
 8008e7a:	19db      	adds	r3, r3, r7
 8008e7c:	2210      	movs	r2, #16
 8008e7e:	701a      	strb	r2, [r3, #0]
 8008e80:	e005      	b.n	8008e8e <UART_SetConfig+0x22a>
 8008e82:	231b      	movs	r3, #27
 8008e84:	2218      	movs	r2, #24
 8008e86:	189b      	adds	r3, r3, r2
 8008e88:	19db      	adds	r3, r3, r7
 8008e8a:	2210      	movs	r2, #16
 8008e8c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a46      	ldr	r2, [pc, #280]	@ (8008fac <UART_SetConfig+0x348>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d000      	beq.n	8008e9a <UART_SetConfig+0x236>
 8008e98:	e09a      	b.n	8008fd0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008e9a:	231b      	movs	r3, #27
 8008e9c:	2218      	movs	r2, #24
 8008e9e:	189b      	adds	r3, r3, r2
 8008ea0:	19db      	adds	r3, r3, r7
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	2b08      	cmp	r3, #8
 8008ea6:	d01d      	beq.n	8008ee4 <UART_SetConfig+0x280>
 8008ea8:	dc20      	bgt.n	8008eec <UART_SetConfig+0x288>
 8008eaa:	2b04      	cmp	r3, #4
 8008eac:	d015      	beq.n	8008eda <UART_SetConfig+0x276>
 8008eae:	dc1d      	bgt.n	8008eec <UART_SetConfig+0x288>
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d002      	beq.n	8008eba <UART_SetConfig+0x256>
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d005      	beq.n	8008ec4 <UART_SetConfig+0x260>
 8008eb8:	e018      	b.n	8008eec <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008eba:	f7ff fb25 	bl	8008508 <HAL_RCC_GetPCLK1Freq>
 8008ebe:	0003      	movs	r3, r0
 8008ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008ec2:	e01c      	b.n	8008efe <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ec4:	4b3c      	ldr	r3, [pc, #240]	@ (8008fb8 <UART_SetConfig+0x354>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2210      	movs	r2, #16
 8008eca:	4013      	ands	r3, r2
 8008ecc:	d002      	beq.n	8008ed4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8008ece:	4b3e      	ldr	r3, [pc, #248]	@ (8008fc8 <UART_SetConfig+0x364>)
 8008ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008ed2:	e014      	b.n	8008efe <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8008ed4:	4b3d      	ldr	r3, [pc, #244]	@ (8008fcc <UART_SetConfig+0x368>)
 8008ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008ed8:	e011      	b.n	8008efe <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008eda:	f7ff fa65 	bl	80083a8 <HAL_RCC_GetSysClockFreq>
 8008ede:	0003      	movs	r3, r0
 8008ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008ee2:	e00c      	b.n	8008efe <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ee4:	2380      	movs	r3, #128	@ 0x80
 8008ee6:	021b      	lsls	r3, r3, #8
 8008ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008eea:	e008      	b.n	8008efe <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8008eec:	2300      	movs	r3, #0
 8008eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8008ef0:	231a      	movs	r3, #26
 8008ef2:	2218      	movs	r2, #24
 8008ef4:	189b      	adds	r3, r3, r2
 8008ef6:	19db      	adds	r3, r3, r7
 8008ef8:	2201      	movs	r2, #1
 8008efa:	701a      	strb	r2, [r3, #0]
        break;
 8008efc:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d100      	bne.n	8008f06 <UART_SetConfig+0x2a2>
 8008f04:	e133      	b.n	800916e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	685a      	ldr	r2, [r3, #4]
 8008f0a:	0013      	movs	r3, r2
 8008f0c:	005b      	lsls	r3, r3, #1
 8008f0e:	189b      	adds	r3, r3, r2
 8008f10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d305      	bcc.n	8008f22 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008f1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d906      	bls.n	8008f30 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8008f22:	231a      	movs	r3, #26
 8008f24:	2218      	movs	r2, #24
 8008f26:	189b      	adds	r3, r3, r2
 8008f28:	19db      	adds	r3, r3, r7
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	701a      	strb	r2, [r3, #0]
 8008f2e:	e11e      	b.n	800916e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f32:	613b      	str	r3, [r7, #16]
 8008f34:	2300      	movs	r3, #0
 8008f36:	617b      	str	r3, [r7, #20]
 8008f38:	6939      	ldr	r1, [r7, #16]
 8008f3a:	697a      	ldr	r2, [r7, #20]
 8008f3c:	000b      	movs	r3, r1
 8008f3e:	0e1b      	lsrs	r3, r3, #24
 8008f40:	0010      	movs	r0, r2
 8008f42:	0205      	lsls	r5, r0, #8
 8008f44:	431d      	orrs	r5, r3
 8008f46:	000b      	movs	r3, r1
 8008f48:	021c      	lsls	r4, r3, #8
 8008f4a:	69fb      	ldr	r3, [r7, #28]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	085b      	lsrs	r3, r3, #1
 8008f50:	60bb      	str	r3, [r7, #8]
 8008f52:	2300      	movs	r3, #0
 8008f54:	60fb      	str	r3, [r7, #12]
 8008f56:	68b8      	ldr	r0, [r7, #8]
 8008f58:	68f9      	ldr	r1, [r7, #12]
 8008f5a:	1900      	adds	r0, r0, r4
 8008f5c:	4169      	adcs	r1, r5
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	603b      	str	r3, [r7, #0]
 8008f64:	2300      	movs	r3, #0
 8008f66:	607b      	str	r3, [r7, #4]
 8008f68:	683a      	ldr	r2, [r7, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f7f7 fa9c 	bl	80004a8 <__aeabi_uldivmod>
 8008f70:	0002      	movs	r2, r0
 8008f72:	000b      	movs	r3, r1
 8008f74:	0013      	movs	r3, r2
 8008f76:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f7a:	23c0      	movs	r3, #192	@ 0xc0
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d309      	bcc.n	8008f96 <UART_SetConfig+0x332>
 8008f82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f84:	2380      	movs	r3, #128	@ 0x80
 8008f86:	035b      	lsls	r3, r3, #13
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d204      	bcs.n	8008f96 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f92:	60da      	str	r2, [r3, #12]
 8008f94:	e0eb      	b.n	800916e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8008f96:	231a      	movs	r3, #26
 8008f98:	2218      	movs	r2, #24
 8008f9a:	189b      	adds	r3, r3, r2
 8008f9c:	19db      	adds	r3, r3, r7
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	701a      	strb	r2, [r3, #0]
 8008fa2:	e0e4      	b.n	800916e <UART_SetConfig+0x50a>
 8008fa4:	efff69f3 	.word	0xefff69f3
 8008fa8:	ffffcfff 	.word	0xffffcfff
 8008fac:	40004800 	.word	0x40004800
 8008fb0:	fffff4ff 	.word	0xfffff4ff
 8008fb4:	40013800 	.word	0x40013800
 8008fb8:	40021000 	.word	0x40021000
 8008fbc:	40004400 	.word	0x40004400
 8008fc0:	40004c00 	.word	0x40004c00
 8008fc4:	40005000 	.word	0x40005000
 8008fc8:	003d0900 	.word	0x003d0900
 8008fcc:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	69da      	ldr	r2, [r3, #28]
 8008fd4:	2380      	movs	r3, #128	@ 0x80
 8008fd6:	021b      	lsls	r3, r3, #8
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d000      	beq.n	8008fde <UART_SetConfig+0x37a>
 8008fdc:	e070      	b.n	80090c0 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8008fde:	231b      	movs	r3, #27
 8008fe0:	2218      	movs	r2, #24
 8008fe2:	189b      	adds	r3, r3, r2
 8008fe4:	19db      	adds	r3, r3, r7
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	2b08      	cmp	r3, #8
 8008fea:	d822      	bhi.n	8009032 <UART_SetConfig+0x3ce>
 8008fec:	009a      	lsls	r2, r3, #2
 8008fee:	4b67      	ldr	r3, [pc, #412]	@ (800918c <UART_SetConfig+0x528>)
 8008ff0:	18d3      	adds	r3, r2, r3
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ff6:	f7ff fa87 	bl	8008508 <HAL_RCC_GetPCLK1Freq>
 8008ffa:	0003      	movs	r3, r0
 8008ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008ffe:	e021      	b.n	8009044 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009000:	f7ff fa98 	bl	8008534 <HAL_RCC_GetPCLK2Freq>
 8009004:	0003      	movs	r3, r0
 8009006:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009008:	e01c      	b.n	8009044 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800900a:	4b61      	ldr	r3, [pc, #388]	@ (8009190 <UART_SetConfig+0x52c>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2210      	movs	r2, #16
 8009010:	4013      	ands	r3, r2
 8009012:	d002      	beq.n	800901a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8009014:	4b5f      	ldr	r3, [pc, #380]	@ (8009194 <UART_SetConfig+0x530>)
 8009016:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009018:	e014      	b.n	8009044 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800901a:	4b5f      	ldr	r3, [pc, #380]	@ (8009198 <UART_SetConfig+0x534>)
 800901c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800901e:	e011      	b.n	8009044 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009020:	f7ff f9c2 	bl	80083a8 <HAL_RCC_GetSysClockFreq>
 8009024:	0003      	movs	r3, r0
 8009026:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009028:	e00c      	b.n	8009044 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800902a:	2380      	movs	r3, #128	@ 0x80
 800902c:	021b      	lsls	r3, r3, #8
 800902e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009030:	e008      	b.n	8009044 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8009032:	2300      	movs	r3, #0
 8009034:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8009036:	231a      	movs	r3, #26
 8009038:	2218      	movs	r2, #24
 800903a:	189b      	adds	r3, r3, r2
 800903c:	19db      	adds	r3, r3, r7
 800903e:	2201      	movs	r2, #1
 8009040:	701a      	strb	r2, [r3, #0]
        break;
 8009042:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009046:	2b00      	cmp	r3, #0
 8009048:	d100      	bne.n	800904c <UART_SetConfig+0x3e8>
 800904a:	e090      	b.n	800916e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800904c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800904e:	005a      	lsls	r2, r3, #1
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	085b      	lsrs	r3, r3, #1
 8009056:	18d2      	adds	r2, r2, r3
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	0019      	movs	r1, r3
 800905e:	0010      	movs	r0, r2
 8009060:	f7f7 f86e 	bl	8000140 <__udivsi3>
 8009064:	0003      	movs	r3, r0
 8009066:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800906a:	2b0f      	cmp	r3, #15
 800906c:	d921      	bls.n	80090b2 <UART_SetConfig+0x44e>
 800906e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009070:	2380      	movs	r3, #128	@ 0x80
 8009072:	025b      	lsls	r3, r3, #9
 8009074:	429a      	cmp	r2, r3
 8009076:	d21c      	bcs.n	80090b2 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800907a:	b29a      	uxth	r2, r3
 800907c:	200e      	movs	r0, #14
 800907e:	2418      	movs	r4, #24
 8009080:	1903      	adds	r3, r0, r4
 8009082:	19db      	adds	r3, r3, r7
 8009084:	210f      	movs	r1, #15
 8009086:	438a      	bics	r2, r1
 8009088:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800908a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800908c:	085b      	lsrs	r3, r3, #1
 800908e:	b29b      	uxth	r3, r3
 8009090:	2207      	movs	r2, #7
 8009092:	4013      	ands	r3, r2
 8009094:	b299      	uxth	r1, r3
 8009096:	1903      	adds	r3, r0, r4
 8009098:	19db      	adds	r3, r3, r7
 800909a:	1902      	adds	r2, r0, r4
 800909c:	19d2      	adds	r2, r2, r7
 800909e:	8812      	ldrh	r2, [r2, #0]
 80090a0:	430a      	orrs	r2, r1
 80090a2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	1902      	adds	r2, r0, r4
 80090aa:	19d2      	adds	r2, r2, r7
 80090ac:	8812      	ldrh	r2, [r2, #0]
 80090ae:	60da      	str	r2, [r3, #12]
 80090b0:	e05d      	b.n	800916e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80090b2:	231a      	movs	r3, #26
 80090b4:	2218      	movs	r2, #24
 80090b6:	189b      	adds	r3, r3, r2
 80090b8:	19db      	adds	r3, r3, r7
 80090ba:	2201      	movs	r2, #1
 80090bc:	701a      	strb	r2, [r3, #0]
 80090be:	e056      	b.n	800916e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80090c0:	231b      	movs	r3, #27
 80090c2:	2218      	movs	r2, #24
 80090c4:	189b      	adds	r3, r3, r2
 80090c6:	19db      	adds	r3, r3, r7
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	2b08      	cmp	r3, #8
 80090cc:	d822      	bhi.n	8009114 <UART_SetConfig+0x4b0>
 80090ce:	009a      	lsls	r2, r3, #2
 80090d0:	4b32      	ldr	r3, [pc, #200]	@ (800919c <UART_SetConfig+0x538>)
 80090d2:	18d3      	adds	r3, r2, r3
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090d8:	f7ff fa16 	bl	8008508 <HAL_RCC_GetPCLK1Freq>
 80090dc:	0003      	movs	r3, r0
 80090de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80090e0:	e021      	b.n	8009126 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090e2:	f7ff fa27 	bl	8008534 <HAL_RCC_GetPCLK2Freq>
 80090e6:	0003      	movs	r3, r0
 80090e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80090ea:	e01c      	b.n	8009126 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090ec:	4b28      	ldr	r3, [pc, #160]	@ (8009190 <UART_SetConfig+0x52c>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2210      	movs	r2, #16
 80090f2:	4013      	ands	r3, r2
 80090f4:	d002      	beq.n	80090fc <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80090f6:	4b27      	ldr	r3, [pc, #156]	@ (8009194 <UART_SetConfig+0x530>)
 80090f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80090fa:	e014      	b.n	8009126 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80090fc:	4b26      	ldr	r3, [pc, #152]	@ (8009198 <UART_SetConfig+0x534>)
 80090fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009100:	e011      	b.n	8009126 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009102:	f7ff f951 	bl	80083a8 <HAL_RCC_GetSysClockFreq>
 8009106:	0003      	movs	r3, r0
 8009108:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800910a:	e00c      	b.n	8009126 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800910c:	2380      	movs	r3, #128	@ 0x80
 800910e:	021b      	lsls	r3, r3, #8
 8009110:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8009112:	e008      	b.n	8009126 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8009114:	2300      	movs	r3, #0
 8009116:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8009118:	231a      	movs	r3, #26
 800911a:	2218      	movs	r2, #24
 800911c:	189b      	adds	r3, r3, r2
 800911e:	19db      	adds	r3, r3, r7
 8009120:	2201      	movs	r2, #1
 8009122:	701a      	strb	r2, [r3, #0]
        break;
 8009124:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8009126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009128:	2b00      	cmp	r3, #0
 800912a:	d020      	beq.n	800916e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	085a      	lsrs	r2, r3, #1
 8009132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009134:	18d2      	adds	r2, r2, r3
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	0019      	movs	r1, r3
 800913c:	0010      	movs	r0, r2
 800913e:	f7f6 ffff 	bl	8000140 <__udivsi3>
 8009142:	0003      	movs	r3, r0
 8009144:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009148:	2b0f      	cmp	r3, #15
 800914a:	d90a      	bls.n	8009162 <UART_SetConfig+0x4fe>
 800914c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800914e:	2380      	movs	r3, #128	@ 0x80
 8009150:	025b      	lsls	r3, r3, #9
 8009152:	429a      	cmp	r2, r3
 8009154:	d205      	bcs.n	8009162 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009158:	b29a      	uxth	r2, r3
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	60da      	str	r2, [r3, #12]
 8009160:	e005      	b.n	800916e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8009162:	231a      	movs	r3, #26
 8009164:	2218      	movs	r2, #24
 8009166:	189b      	adds	r3, r3, r2
 8009168:	19db      	adds	r3, r3, r7
 800916a:	2201      	movs	r2, #1
 800916c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	2200      	movs	r2, #0
 8009172:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	2200      	movs	r2, #0
 8009178:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800917a:	231a      	movs	r3, #26
 800917c:	2218      	movs	r2, #24
 800917e:	189b      	adds	r3, r3, r2
 8009180:	19db      	adds	r3, r3, r7
 8009182:	781b      	ldrb	r3, [r3, #0]
}
 8009184:	0018      	movs	r0, r3
 8009186:	46bd      	mov	sp, r7
 8009188:	b00e      	add	sp, #56	@ 0x38
 800918a:	bdb0      	pop	{r4, r5, r7, pc}
 800918c:	0800c9f0 	.word	0x0800c9f0
 8009190:	40021000 	.word	0x40021000
 8009194:	003d0900 	.word	0x003d0900
 8009198:	00f42400 	.word	0x00f42400
 800919c:	0800ca14 	.word	0x0800ca14

080091a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b082      	sub	sp, #8
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ac:	2201      	movs	r2, #1
 80091ae:	4013      	ands	r3, r2
 80091b0:	d00b      	beq.n	80091ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	4a4a      	ldr	r2, [pc, #296]	@ (80092e4 <UART_AdvFeatureConfig+0x144>)
 80091ba:	4013      	ands	r3, r2
 80091bc:	0019      	movs	r1, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	430a      	orrs	r2, r1
 80091c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ce:	2202      	movs	r2, #2
 80091d0:	4013      	ands	r3, r2
 80091d2:	d00b      	beq.n	80091ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	4a43      	ldr	r2, [pc, #268]	@ (80092e8 <UART_AdvFeatureConfig+0x148>)
 80091dc:	4013      	ands	r3, r2
 80091de:	0019      	movs	r1, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	430a      	orrs	r2, r1
 80091ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091f0:	2204      	movs	r2, #4
 80091f2:	4013      	ands	r3, r2
 80091f4:	d00b      	beq.n	800920e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	4a3b      	ldr	r2, [pc, #236]	@ (80092ec <UART_AdvFeatureConfig+0x14c>)
 80091fe:	4013      	ands	r3, r2
 8009200:	0019      	movs	r1, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	430a      	orrs	r2, r1
 800920c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009212:	2208      	movs	r2, #8
 8009214:	4013      	ands	r3, r2
 8009216:	d00b      	beq.n	8009230 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	4a34      	ldr	r2, [pc, #208]	@ (80092f0 <UART_AdvFeatureConfig+0x150>)
 8009220:	4013      	ands	r3, r2
 8009222:	0019      	movs	r1, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	430a      	orrs	r2, r1
 800922e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009234:	2210      	movs	r2, #16
 8009236:	4013      	ands	r3, r2
 8009238:	d00b      	beq.n	8009252 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	4a2c      	ldr	r2, [pc, #176]	@ (80092f4 <UART_AdvFeatureConfig+0x154>)
 8009242:	4013      	ands	r3, r2
 8009244:	0019      	movs	r1, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	430a      	orrs	r2, r1
 8009250:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009256:	2220      	movs	r2, #32
 8009258:	4013      	ands	r3, r2
 800925a:	d00b      	beq.n	8009274 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	4a25      	ldr	r2, [pc, #148]	@ (80092f8 <UART_AdvFeatureConfig+0x158>)
 8009264:	4013      	ands	r3, r2
 8009266:	0019      	movs	r1, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	430a      	orrs	r2, r1
 8009272:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009278:	2240      	movs	r2, #64	@ 0x40
 800927a:	4013      	ands	r3, r2
 800927c:	d01d      	beq.n	80092ba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	4a1d      	ldr	r2, [pc, #116]	@ (80092fc <UART_AdvFeatureConfig+0x15c>)
 8009286:	4013      	ands	r3, r2
 8009288:	0019      	movs	r1, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	430a      	orrs	r2, r1
 8009294:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800929a:	2380      	movs	r3, #128	@ 0x80
 800929c:	035b      	lsls	r3, r3, #13
 800929e:	429a      	cmp	r2, r3
 80092a0:	d10b      	bne.n	80092ba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	4a15      	ldr	r2, [pc, #84]	@ (8009300 <UART_AdvFeatureConfig+0x160>)
 80092aa:	4013      	ands	r3, r2
 80092ac:	0019      	movs	r1, r3
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	430a      	orrs	r2, r1
 80092b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092be:	2280      	movs	r2, #128	@ 0x80
 80092c0:	4013      	ands	r3, r2
 80092c2:	d00b      	beq.n	80092dc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	4a0e      	ldr	r2, [pc, #56]	@ (8009304 <UART_AdvFeatureConfig+0x164>)
 80092cc:	4013      	ands	r3, r2
 80092ce:	0019      	movs	r1, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	430a      	orrs	r2, r1
 80092da:	605a      	str	r2, [r3, #4]
  }
}
 80092dc:	46c0      	nop			@ (mov r8, r8)
 80092de:	46bd      	mov	sp, r7
 80092e0:	b002      	add	sp, #8
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	fffdffff 	.word	0xfffdffff
 80092e8:	fffeffff 	.word	0xfffeffff
 80092ec:	fffbffff 	.word	0xfffbffff
 80092f0:	ffff7fff 	.word	0xffff7fff
 80092f4:	ffffefff 	.word	0xffffefff
 80092f8:	ffffdfff 	.word	0xffffdfff
 80092fc:	ffefffff 	.word	0xffefffff
 8009300:	ff9fffff 	.word	0xff9fffff
 8009304:	fff7ffff 	.word	0xfff7ffff

08009308 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b092      	sub	sp, #72	@ 0x48
 800930c:	af02      	add	r7, sp, #8
 800930e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2284      	movs	r2, #132	@ 0x84
 8009314:	2100      	movs	r1, #0
 8009316:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009318:	f7fb fd4a 	bl	8004db0 <HAL_GetTick>
 800931c:	0003      	movs	r3, r0
 800931e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2208      	movs	r2, #8
 8009328:	4013      	ands	r3, r2
 800932a:	2b08      	cmp	r3, #8
 800932c:	d12c      	bne.n	8009388 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800932e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009330:	2280      	movs	r2, #128	@ 0x80
 8009332:	0391      	lsls	r1, r2, #14
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	4a46      	ldr	r2, [pc, #280]	@ (8009450 <UART_CheckIdleState+0x148>)
 8009338:	9200      	str	r2, [sp, #0]
 800933a:	2200      	movs	r2, #0
 800933c:	f000 f88c 	bl	8009458 <UART_WaitOnFlagUntilTimeout>
 8009340:	1e03      	subs	r3, r0, #0
 8009342:	d021      	beq.n	8009388 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009344:	f3ef 8310 	mrs	r3, PRIMASK
 8009348:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800934a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800934c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800934e:	2301      	movs	r3, #1
 8009350:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009354:	f383 8810 	msr	PRIMASK, r3
}
 8009358:	46c0      	nop			@ (mov r8, r8)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2180      	movs	r1, #128	@ 0x80
 8009366:	438a      	bics	r2, r1
 8009368:	601a      	str	r2, [r3, #0]
 800936a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800936e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009370:	f383 8810 	msr	PRIMASK, r3
}
 8009374:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2220      	movs	r2, #32
 800937a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2278      	movs	r2, #120	@ 0x78
 8009380:	2100      	movs	r1, #0
 8009382:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009384:	2303      	movs	r3, #3
 8009386:	e05f      	b.n	8009448 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2204      	movs	r2, #4
 8009390:	4013      	ands	r3, r2
 8009392:	2b04      	cmp	r3, #4
 8009394:	d146      	bne.n	8009424 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009398:	2280      	movs	r2, #128	@ 0x80
 800939a:	03d1      	lsls	r1, r2, #15
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	4a2c      	ldr	r2, [pc, #176]	@ (8009450 <UART_CheckIdleState+0x148>)
 80093a0:	9200      	str	r2, [sp, #0]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f000 f858 	bl	8009458 <UART_WaitOnFlagUntilTimeout>
 80093a8:	1e03      	subs	r3, r0, #0
 80093aa:	d03b      	beq.n	8009424 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093ac:	f3ef 8310 	mrs	r3, PRIMASK
 80093b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80093b2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80093b6:	2301      	movs	r3, #1
 80093b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	f383 8810 	msr	PRIMASK, r3
}
 80093c0:	46c0      	nop			@ (mov r8, r8)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4921      	ldr	r1, [pc, #132]	@ (8009454 <UART_CheckIdleState+0x14c>)
 80093ce:	400a      	ands	r2, r1
 80093d0:	601a      	str	r2, [r3, #0]
 80093d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	f383 8810 	msr	PRIMASK, r3
}
 80093dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093de:	f3ef 8310 	mrs	r3, PRIMASK
 80093e2:	61bb      	str	r3, [r7, #24]
  return(result);
 80093e4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80093e8:	2301      	movs	r3, #1
 80093ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	f383 8810 	msr	PRIMASK, r3
}
 80093f2:	46c0      	nop			@ (mov r8, r8)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	689a      	ldr	r2, [r3, #8]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2101      	movs	r1, #1
 8009400:	438a      	bics	r2, r1
 8009402:	609a      	str	r2, [r3, #8]
 8009404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009406:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009408:	6a3b      	ldr	r3, [r7, #32]
 800940a:	f383 8810 	msr	PRIMASK, r3
}
 800940e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2280      	movs	r2, #128	@ 0x80
 8009414:	2120      	movs	r1, #32
 8009416:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2278      	movs	r2, #120	@ 0x78
 800941c:	2100      	movs	r1, #0
 800941e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009420:	2303      	movs	r3, #3
 8009422:	e011      	b.n	8009448 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2220      	movs	r2, #32
 8009428:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2280      	movs	r2, #128	@ 0x80
 800942e:	2120      	movs	r1, #32
 8009430:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2278      	movs	r2, #120	@ 0x78
 8009442:	2100      	movs	r1, #0
 8009444:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	0018      	movs	r0, r3
 800944a:	46bd      	mov	sp, r7
 800944c:	b010      	add	sp, #64	@ 0x40
 800944e:	bd80      	pop	{r7, pc}
 8009450:	01ffffff 	.word	0x01ffffff
 8009454:	fffffedf 	.word	0xfffffedf

08009458 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	603b      	str	r3, [r7, #0]
 8009464:	1dfb      	adds	r3, r7, #7
 8009466:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009468:	e04b      	b.n	8009502 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800946a:	69bb      	ldr	r3, [r7, #24]
 800946c:	3301      	adds	r3, #1
 800946e:	d048      	beq.n	8009502 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009470:	f7fb fc9e 	bl	8004db0 <HAL_GetTick>
 8009474:	0002      	movs	r2, r0
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	1ad3      	subs	r3, r2, r3
 800947a:	69ba      	ldr	r2, [r7, #24]
 800947c:	429a      	cmp	r2, r3
 800947e:	d302      	bcc.n	8009486 <UART_WaitOnFlagUntilTimeout+0x2e>
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d101      	bne.n	800948a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8009486:	2303      	movs	r3, #3
 8009488:	e04b      	b.n	8009522 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2204      	movs	r2, #4
 8009492:	4013      	ands	r3, r2
 8009494:	d035      	beq.n	8009502 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	69db      	ldr	r3, [r3, #28]
 800949c:	2208      	movs	r2, #8
 800949e:	4013      	ands	r3, r2
 80094a0:	2b08      	cmp	r3, #8
 80094a2:	d111      	bne.n	80094c8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2208      	movs	r2, #8
 80094aa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	0018      	movs	r0, r3
 80094b0:	f000 f83c 	bl	800952c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2284      	movs	r2, #132	@ 0x84
 80094b8:	2108      	movs	r1, #8
 80094ba:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2278      	movs	r2, #120	@ 0x78
 80094c0:	2100      	movs	r1, #0
 80094c2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	e02c      	b.n	8009522 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	69da      	ldr	r2, [r3, #28]
 80094ce:	2380      	movs	r3, #128	@ 0x80
 80094d0:	011b      	lsls	r3, r3, #4
 80094d2:	401a      	ands	r2, r3
 80094d4:	2380      	movs	r3, #128	@ 0x80
 80094d6:	011b      	lsls	r3, r3, #4
 80094d8:	429a      	cmp	r2, r3
 80094da:	d112      	bne.n	8009502 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2280      	movs	r2, #128	@ 0x80
 80094e2:	0112      	lsls	r2, r2, #4
 80094e4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	0018      	movs	r0, r3
 80094ea:	f000 f81f 	bl	800952c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2284      	movs	r2, #132	@ 0x84
 80094f2:	2120      	movs	r1, #32
 80094f4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2278      	movs	r2, #120	@ 0x78
 80094fa:	2100      	movs	r1, #0
 80094fc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80094fe:	2303      	movs	r3, #3
 8009500:	e00f      	b.n	8009522 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	69db      	ldr	r3, [r3, #28]
 8009508:	68ba      	ldr	r2, [r7, #8]
 800950a:	4013      	ands	r3, r2
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	1ad3      	subs	r3, r2, r3
 8009510:	425a      	negs	r2, r3
 8009512:	4153      	adcs	r3, r2
 8009514:	b2db      	uxtb	r3, r3
 8009516:	001a      	movs	r2, r3
 8009518:	1dfb      	adds	r3, r7, #7
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	429a      	cmp	r2, r3
 800951e:	d0a4      	beq.n	800946a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	0018      	movs	r0, r3
 8009524:	46bd      	mov	sp, r7
 8009526:	b004      	add	sp, #16
 8009528:	bd80      	pop	{r7, pc}
	...

0800952c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b08e      	sub	sp, #56	@ 0x38
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009534:	f3ef 8310 	mrs	r3, PRIMASK
 8009538:	617b      	str	r3, [r7, #20]
  return(result);
 800953a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800953c:	637b      	str	r3, [r7, #52]	@ 0x34
 800953e:	2301      	movs	r3, #1
 8009540:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	f383 8810 	msr	PRIMASK, r3
}
 8009548:	46c0      	nop			@ (mov r8, r8)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4926      	ldr	r1, [pc, #152]	@ (80095f0 <UART_EndRxTransfer+0xc4>)
 8009556:	400a      	ands	r2, r1
 8009558:	601a      	str	r2, [r3, #0]
 800955a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800955c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	f383 8810 	msr	PRIMASK, r3
}
 8009564:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009566:	f3ef 8310 	mrs	r3, PRIMASK
 800956a:	623b      	str	r3, [r7, #32]
  return(result);
 800956c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800956e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009570:	2301      	movs	r3, #1
 8009572:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009576:	f383 8810 	msr	PRIMASK, r3
}
 800957a:	46c0      	nop			@ (mov r8, r8)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	689a      	ldr	r2, [r3, #8]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2101      	movs	r1, #1
 8009588:	438a      	bics	r2, r1
 800958a:	609a      	str	r2, [r3, #8]
 800958c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800958e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009592:	f383 8810 	msr	PRIMASK, r3
}
 8009596:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800959c:	2b01      	cmp	r3, #1
 800959e:	d118      	bne.n	80095d2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095a0:	f3ef 8310 	mrs	r3, PRIMASK
 80095a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80095a6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095aa:	2301      	movs	r3, #1
 80095ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f383 8810 	msr	PRIMASK, r3
}
 80095b4:	46c0      	nop			@ (mov r8, r8)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2110      	movs	r1, #16
 80095c2:	438a      	bics	r2, r1
 80095c4:	601a      	str	r2, [r3, #0]
 80095c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	f383 8810 	msr	PRIMASK, r3
}
 80095d0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2280      	movs	r2, #128	@ 0x80
 80095d6:	2120      	movs	r1, #32
 80095d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80095e6:	46c0      	nop			@ (mov r8, r8)
 80095e8:	46bd      	mov	sp, r7
 80095ea:	b00e      	add	sp, #56	@ 0x38
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	46c0      	nop			@ (mov r8, r8)
 80095f0:	fffffedf 	.word	0xfffffedf

080095f4 <__cvt>:
 80095f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095f6:	001f      	movs	r7, r3
 80095f8:	2300      	movs	r3, #0
 80095fa:	0016      	movs	r6, r2
 80095fc:	b08b      	sub	sp, #44	@ 0x2c
 80095fe:	429f      	cmp	r7, r3
 8009600:	da04      	bge.n	800960c <__cvt+0x18>
 8009602:	2180      	movs	r1, #128	@ 0x80
 8009604:	0609      	lsls	r1, r1, #24
 8009606:	187b      	adds	r3, r7, r1
 8009608:	001f      	movs	r7, r3
 800960a:	232d      	movs	r3, #45	@ 0x2d
 800960c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800960e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8009610:	7013      	strb	r3, [r2, #0]
 8009612:	2320      	movs	r3, #32
 8009614:	2203      	movs	r2, #3
 8009616:	439d      	bics	r5, r3
 8009618:	2d46      	cmp	r5, #70	@ 0x46
 800961a:	d007      	beq.n	800962c <__cvt+0x38>
 800961c:	002b      	movs	r3, r5
 800961e:	3b45      	subs	r3, #69	@ 0x45
 8009620:	4259      	negs	r1, r3
 8009622:	414b      	adcs	r3, r1
 8009624:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8009626:	3a01      	subs	r2, #1
 8009628:	18cb      	adds	r3, r1, r3
 800962a:	9310      	str	r3, [sp, #64]	@ 0x40
 800962c:	ab09      	add	r3, sp, #36	@ 0x24
 800962e:	9304      	str	r3, [sp, #16]
 8009630:	ab08      	add	r3, sp, #32
 8009632:	9303      	str	r3, [sp, #12]
 8009634:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009636:	9200      	str	r2, [sp, #0]
 8009638:	9302      	str	r3, [sp, #8]
 800963a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800963c:	0032      	movs	r2, r6
 800963e:	9301      	str	r3, [sp, #4]
 8009640:	003b      	movs	r3, r7
 8009642:	f000 fed1 	bl	800a3e8 <_dtoa_r>
 8009646:	0004      	movs	r4, r0
 8009648:	2d47      	cmp	r5, #71	@ 0x47
 800964a:	d11b      	bne.n	8009684 <__cvt+0x90>
 800964c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800964e:	07db      	lsls	r3, r3, #31
 8009650:	d511      	bpl.n	8009676 <__cvt+0x82>
 8009652:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009654:	18c3      	adds	r3, r0, r3
 8009656:	9307      	str	r3, [sp, #28]
 8009658:	2200      	movs	r2, #0
 800965a:	2300      	movs	r3, #0
 800965c:	0030      	movs	r0, r6
 800965e:	0039      	movs	r1, r7
 8009660:	f7f6 fef4 	bl	800044c <__aeabi_dcmpeq>
 8009664:	2800      	cmp	r0, #0
 8009666:	d001      	beq.n	800966c <__cvt+0x78>
 8009668:	9b07      	ldr	r3, [sp, #28]
 800966a:	9309      	str	r3, [sp, #36]	@ 0x24
 800966c:	2230      	movs	r2, #48	@ 0x30
 800966e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009670:	9907      	ldr	r1, [sp, #28]
 8009672:	428b      	cmp	r3, r1
 8009674:	d320      	bcc.n	80096b8 <__cvt+0xc4>
 8009676:	0020      	movs	r0, r4
 8009678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800967a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800967c:	1b1b      	subs	r3, r3, r4
 800967e:	6013      	str	r3, [r2, #0]
 8009680:	b00b      	add	sp, #44	@ 0x2c
 8009682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009684:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009686:	18c3      	adds	r3, r0, r3
 8009688:	9307      	str	r3, [sp, #28]
 800968a:	2d46      	cmp	r5, #70	@ 0x46
 800968c:	d1e4      	bne.n	8009658 <__cvt+0x64>
 800968e:	7803      	ldrb	r3, [r0, #0]
 8009690:	2b30      	cmp	r3, #48	@ 0x30
 8009692:	d10c      	bne.n	80096ae <__cvt+0xba>
 8009694:	2200      	movs	r2, #0
 8009696:	2300      	movs	r3, #0
 8009698:	0030      	movs	r0, r6
 800969a:	0039      	movs	r1, r7
 800969c:	f7f6 fed6 	bl	800044c <__aeabi_dcmpeq>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d104      	bne.n	80096ae <__cvt+0xba>
 80096a4:	2301      	movs	r3, #1
 80096a6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80096a8:	1a9b      	subs	r3, r3, r2
 80096aa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80096ac:	6013      	str	r3, [r2, #0]
 80096ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80096b0:	9a07      	ldr	r2, [sp, #28]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	18d3      	adds	r3, r2, r3
 80096b6:	e7ce      	b.n	8009656 <__cvt+0x62>
 80096b8:	1c59      	adds	r1, r3, #1
 80096ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80096bc:	701a      	strb	r2, [r3, #0]
 80096be:	e7d6      	b.n	800966e <__cvt+0x7a>

080096c0 <__exponent>:
 80096c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096c2:	232b      	movs	r3, #43	@ 0x2b
 80096c4:	0005      	movs	r5, r0
 80096c6:	000c      	movs	r4, r1
 80096c8:	b085      	sub	sp, #20
 80096ca:	7002      	strb	r2, [r0, #0]
 80096cc:	2900      	cmp	r1, #0
 80096ce:	da01      	bge.n	80096d4 <__exponent+0x14>
 80096d0:	424c      	negs	r4, r1
 80096d2:	3302      	adds	r3, #2
 80096d4:	706b      	strb	r3, [r5, #1]
 80096d6:	2c09      	cmp	r4, #9
 80096d8:	dd2c      	ble.n	8009734 <__exponent+0x74>
 80096da:	ab02      	add	r3, sp, #8
 80096dc:	1dde      	adds	r6, r3, #7
 80096de:	0020      	movs	r0, r4
 80096e0:	210a      	movs	r1, #10
 80096e2:	f7f6 fe9d 	bl	8000420 <__aeabi_idivmod>
 80096e6:	0037      	movs	r7, r6
 80096e8:	3130      	adds	r1, #48	@ 0x30
 80096ea:	3e01      	subs	r6, #1
 80096ec:	0020      	movs	r0, r4
 80096ee:	7031      	strb	r1, [r6, #0]
 80096f0:	210a      	movs	r1, #10
 80096f2:	9401      	str	r4, [sp, #4]
 80096f4:	f7f6 fdae 	bl	8000254 <__divsi3>
 80096f8:	9b01      	ldr	r3, [sp, #4]
 80096fa:	0004      	movs	r4, r0
 80096fc:	2b63      	cmp	r3, #99	@ 0x63
 80096fe:	dcee      	bgt.n	80096de <__exponent+0x1e>
 8009700:	1eba      	subs	r2, r7, #2
 8009702:	1ca8      	adds	r0, r5, #2
 8009704:	0001      	movs	r1, r0
 8009706:	0013      	movs	r3, r2
 8009708:	3430      	adds	r4, #48	@ 0x30
 800970a:	7014      	strb	r4, [r2, #0]
 800970c:	ac02      	add	r4, sp, #8
 800970e:	3407      	adds	r4, #7
 8009710:	429c      	cmp	r4, r3
 8009712:	d80a      	bhi.n	800972a <__exponent+0x6a>
 8009714:	2300      	movs	r3, #0
 8009716:	42a2      	cmp	r2, r4
 8009718:	d803      	bhi.n	8009722 <__exponent+0x62>
 800971a:	3309      	adds	r3, #9
 800971c:	aa02      	add	r2, sp, #8
 800971e:	189b      	adds	r3, r3, r2
 8009720:	1bdb      	subs	r3, r3, r7
 8009722:	18c0      	adds	r0, r0, r3
 8009724:	1b40      	subs	r0, r0, r5
 8009726:	b005      	add	sp, #20
 8009728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800972a:	781c      	ldrb	r4, [r3, #0]
 800972c:	3301      	adds	r3, #1
 800972e:	700c      	strb	r4, [r1, #0]
 8009730:	3101      	adds	r1, #1
 8009732:	e7eb      	b.n	800970c <__exponent+0x4c>
 8009734:	2330      	movs	r3, #48	@ 0x30
 8009736:	18e4      	adds	r4, r4, r3
 8009738:	70ab      	strb	r3, [r5, #2]
 800973a:	1d28      	adds	r0, r5, #4
 800973c:	70ec      	strb	r4, [r5, #3]
 800973e:	e7f1      	b.n	8009724 <__exponent+0x64>

08009740 <_printf_float>:
 8009740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009742:	b097      	sub	sp, #92	@ 0x5c
 8009744:	000d      	movs	r5, r1
 8009746:	920a      	str	r2, [sp, #40]	@ 0x28
 8009748:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800974a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800974c:	9009      	str	r0, [sp, #36]	@ 0x24
 800974e:	f000 fd33 	bl	800a1b8 <_localeconv_r>
 8009752:	6803      	ldr	r3, [r0, #0]
 8009754:	0018      	movs	r0, r3
 8009756:	930d      	str	r3, [sp, #52]	@ 0x34
 8009758:	f7f6 fcd6 	bl	8000108 <strlen>
 800975c:	2300      	movs	r3, #0
 800975e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009760:	9314      	str	r3, [sp, #80]	@ 0x50
 8009762:	7e2b      	ldrb	r3, [r5, #24]
 8009764:	2207      	movs	r2, #7
 8009766:	930c      	str	r3, [sp, #48]	@ 0x30
 8009768:	682b      	ldr	r3, [r5, #0]
 800976a:	930e      	str	r3, [sp, #56]	@ 0x38
 800976c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800976e:	6823      	ldr	r3, [r4, #0]
 8009770:	05c9      	lsls	r1, r1, #23
 8009772:	d545      	bpl.n	8009800 <_printf_float+0xc0>
 8009774:	189b      	adds	r3, r3, r2
 8009776:	4393      	bics	r3, r2
 8009778:	001a      	movs	r2, r3
 800977a:	3208      	adds	r2, #8
 800977c:	6022      	str	r2, [r4, #0]
 800977e:	2201      	movs	r2, #1
 8009780:	681e      	ldr	r6, [r3, #0]
 8009782:	685f      	ldr	r7, [r3, #4]
 8009784:	007b      	lsls	r3, r7, #1
 8009786:	085b      	lsrs	r3, r3, #1
 8009788:	9311      	str	r3, [sp, #68]	@ 0x44
 800978a:	9610      	str	r6, [sp, #64]	@ 0x40
 800978c:	64ae      	str	r6, [r5, #72]	@ 0x48
 800978e:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8009790:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009792:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009794:	4ba7      	ldr	r3, [pc, #668]	@ (8009a34 <_printf_float+0x2f4>)
 8009796:	4252      	negs	r2, r2
 8009798:	f7f9 fa3c 	bl	8002c14 <__aeabi_dcmpun>
 800979c:	2800      	cmp	r0, #0
 800979e:	d131      	bne.n	8009804 <_printf_float+0xc4>
 80097a0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80097a2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80097a4:	2201      	movs	r2, #1
 80097a6:	4ba3      	ldr	r3, [pc, #652]	@ (8009a34 <_printf_float+0x2f4>)
 80097a8:	4252      	negs	r2, r2
 80097aa:	f7f6 fe5f 	bl	800046c <__aeabi_dcmple>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	d128      	bne.n	8009804 <_printf_float+0xc4>
 80097b2:	2200      	movs	r2, #0
 80097b4:	2300      	movs	r3, #0
 80097b6:	0030      	movs	r0, r6
 80097b8:	0039      	movs	r1, r7
 80097ba:	f7f6 fe4d 	bl	8000458 <__aeabi_dcmplt>
 80097be:	2800      	cmp	r0, #0
 80097c0:	d003      	beq.n	80097ca <_printf_float+0x8a>
 80097c2:	002b      	movs	r3, r5
 80097c4:	222d      	movs	r2, #45	@ 0x2d
 80097c6:	3343      	adds	r3, #67	@ 0x43
 80097c8:	701a      	strb	r2, [r3, #0]
 80097ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097cc:	4f9a      	ldr	r7, [pc, #616]	@ (8009a38 <_printf_float+0x2f8>)
 80097ce:	2b47      	cmp	r3, #71	@ 0x47
 80097d0:	d900      	bls.n	80097d4 <_printf_float+0x94>
 80097d2:	4f9a      	ldr	r7, [pc, #616]	@ (8009a3c <_printf_float+0x2fc>)
 80097d4:	2303      	movs	r3, #3
 80097d6:	2400      	movs	r4, #0
 80097d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097da:	612b      	str	r3, [r5, #16]
 80097dc:	3301      	adds	r3, #1
 80097de:	439a      	bics	r2, r3
 80097e0:	602a      	str	r2, [r5, #0]
 80097e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097e4:	0029      	movs	r1, r5
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097ec:	aa15      	add	r2, sp, #84	@ 0x54
 80097ee:	f000 f9e5 	bl	8009bbc <_printf_common>
 80097f2:	3001      	adds	r0, #1
 80097f4:	d000      	beq.n	80097f8 <_printf_float+0xb8>
 80097f6:	e09f      	b.n	8009938 <_printf_float+0x1f8>
 80097f8:	2001      	movs	r0, #1
 80097fa:	4240      	negs	r0, r0
 80097fc:	b017      	add	sp, #92	@ 0x5c
 80097fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009800:	3307      	adds	r3, #7
 8009802:	e7b8      	b.n	8009776 <_printf_float+0x36>
 8009804:	0032      	movs	r2, r6
 8009806:	003b      	movs	r3, r7
 8009808:	0030      	movs	r0, r6
 800980a:	0039      	movs	r1, r7
 800980c:	f7f9 fa02 	bl	8002c14 <__aeabi_dcmpun>
 8009810:	2800      	cmp	r0, #0
 8009812:	d00b      	beq.n	800982c <_printf_float+0xec>
 8009814:	2f00      	cmp	r7, #0
 8009816:	da03      	bge.n	8009820 <_printf_float+0xe0>
 8009818:	002b      	movs	r3, r5
 800981a:	222d      	movs	r2, #45	@ 0x2d
 800981c:	3343      	adds	r3, #67	@ 0x43
 800981e:	701a      	strb	r2, [r3, #0]
 8009820:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009822:	4f87      	ldr	r7, [pc, #540]	@ (8009a40 <_printf_float+0x300>)
 8009824:	2b47      	cmp	r3, #71	@ 0x47
 8009826:	d9d5      	bls.n	80097d4 <_printf_float+0x94>
 8009828:	4f86      	ldr	r7, [pc, #536]	@ (8009a44 <_printf_float+0x304>)
 800982a:	e7d3      	b.n	80097d4 <_printf_float+0x94>
 800982c:	2220      	movs	r2, #32
 800982e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8009830:	686b      	ldr	r3, [r5, #4]
 8009832:	4394      	bics	r4, r2
 8009834:	1c5a      	adds	r2, r3, #1
 8009836:	d146      	bne.n	80098c6 <_printf_float+0x186>
 8009838:	3307      	adds	r3, #7
 800983a:	606b      	str	r3, [r5, #4]
 800983c:	2380      	movs	r3, #128	@ 0x80
 800983e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009840:	00db      	lsls	r3, r3, #3
 8009842:	4313      	orrs	r3, r2
 8009844:	2200      	movs	r2, #0
 8009846:	602b      	str	r3, [r5, #0]
 8009848:	9206      	str	r2, [sp, #24]
 800984a:	aa14      	add	r2, sp, #80	@ 0x50
 800984c:	9205      	str	r2, [sp, #20]
 800984e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009850:	a90a      	add	r1, sp, #40	@ 0x28
 8009852:	9204      	str	r2, [sp, #16]
 8009854:	aa13      	add	r2, sp, #76	@ 0x4c
 8009856:	9203      	str	r2, [sp, #12]
 8009858:	2223      	movs	r2, #35	@ 0x23
 800985a:	1852      	adds	r2, r2, r1
 800985c:	9202      	str	r2, [sp, #8]
 800985e:	9301      	str	r3, [sp, #4]
 8009860:	686b      	ldr	r3, [r5, #4]
 8009862:	0032      	movs	r2, r6
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009868:	003b      	movs	r3, r7
 800986a:	f7ff fec3 	bl	80095f4 <__cvt>
 800986e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009870:	0007      	movs	r7, r0
 8009872:	2c47      	cmp	r4, #71	@ 0x47
 8009874:	d12d      	bne.n	80098d2 <_printf_float+0x192>
 8009876:	1cd3      	adds	r3, r2, #3
 8009878:	db02      	blt.n	8009880 <_printf_float+0x140>
 800987a:	686b      	ldr	r3, [r5, #4]
 800987c:	429a      	cmp	r2, r3
 800987e:	dd48      	ble.n	8009912 <_printf_float+0x1d2>
 8009880:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009882:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009884:	3b02      	subs	r3, #2
 8009886:	b2db      	uxtb	r3, r3
 8009888:	930c      	str	r3, [sp, #48]	@ 0x30
 800988a:	0028      	movs	r0, r5
 800988c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800988e:	3901      	subs	r1, #1
 8009890:	3050      	adds	r0, #80	@ 0x50
 8009892:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009894:	f7ff ff14 	bl	80096c0 <__exponent>
 8009898:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800989a:	0004      	movs	r4, r0
 800989c:	1813      	adds	r3, r2, r0
 800989e:	612b      	str	r3, [r5, #16]
 80098a0:	2a01      	cmp	r2, #1
 80098a2:	dc02      	bgt.n	80098aa <_printf_float+0x16a>
 80098a4:	682a      	ldr	r2, [r5, #0]
 80098a6:	07d2      	lsls	r2, r2, #31
 80098a8:	d501      	bpl.n	80098ae <_printf_float+0x16e>
 80098aa:	3301      	adds	r3, #1
 80098ac:	612b      	str	r3, [r5, #16]
 80098ae:	2323      	movs	r3, #35	@ 0x23
 80098b0:	aa0a      	add	r2, sp, #40	@ 0x28
 80098b2:	189b      	adds	r3, r3, r2
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d100      	bne.n	80098bc <_printf_float+0x17c>
 80098ba:	e792      	b.n	80097e2 <_printf_float+0xa2>
 80098bc:	002b      	movs	r3, r5
 80098be:	222d      	movs	r2, #45	@ 0x2d
 80098c0:	3343      	adds	r3, #67	@ 0x43
 80098c2:	701a      	strb	r2, [r3, #0]
 80098c4:	e78d      	b.n	80097e2 <_printf_float+0xa2>
 80098c6:	2c47      	cmp	r4, #71	@ 0x47
 80098c8:	d1b8      	bne.n	800983c <_printf_float+0xfc>
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1b6      	bne.n	800983c <_printf_float+0xfc>
 80098ce:	3301      	adds	r3, #1
 80098d0:	e7b3      	b.n	800983a <_printf_float+0xfa>
 80098d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098d4:	0011      	movs	r1, r2
 80098d6:	2b65      	cmp	r3, #101	@ 0x65
 80098d8:	d9d7      	bls.n	800988a <_printf_float+0x14a>
 80098da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098dc:	2b66      	cmp	r3, #102	@ 0x66
 80098de:	d11a      	bne.n	8009916 <_printf_float+0x1d6>
 80098e0:	686b      	ldr	r3, [r5, #4]
 80098e2:	2a00      	cmp	r2, #0
 80098e4:	dd09      	ble.n	80098fa <_printf_float+0x1ba>
 80098e6:	612a      	str	r2, [r5, #16]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d102      	bne.n	80098f2 <_printf_float+0x1b2>
 80098ec:	6829      	ldr	r1, [r5, #0]
 80098ee:	07c9      	lsls	r1, r1, #31
 80098f0:	d50b      	bpl.n	800990a <_printf_float+0x1ca>
 80098f2:	3301      	adds	r3, #1
 80098f4:	189b      	adds	r3, r3, r2
 80098f6:	612b      	str	r3, [r5, #16]
 80098f8:	e007      	b.n	800990a <_printf_float+0x1ca>
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d103      	bne.n	8009906 <_printf_float+0x1c6>
 80098fe:	2201      	movs	r2, #1
 8009900:	6829      	ldr	r1, [r5, #0]
 8009902:	4211      	tst	r1, r2
 8009904:	d000      	beq.n	8009908 <_printf_float+0x1c8>
 8009906:	1c9a      	adds	r2, r3, #2
 8009908:	612a      	str	r2, [r5, #16]
 800990a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800990c:	2400      	movs	r4, #0
 800990e:	65ab      	str	r3, [r5, #88]	@ 0x58
 8009910:	e7cd      	b.n	80098ae <_printf_float+0x16e>
 8009912:	2367      	movs	r3, #103	@ 0x67
 8009914:	930c      	str	r3, [sp, #48]	@ 0x30
 8009916:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009918:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800991a:	4299      	cmp	r1, r3
 800991c:	db06      	blt.n	800992c <_printf_float+0x1ec>
 800991e:	682b      	ldr	r3, [r5, #0]
 8009920:	6129      	str	r1, [r5, #16]
 8009922:	07db      	lsls	r3, r3, #31
 8009924:	d5f1      	bpl.n	800990a <_printf_float+0x1ca>
 8009926:	3101      	adds	r1, #1
 8009928:	6129      	str	r1, [r5, #16]
 800992a:	e7ee      	b.n	800990a <_printf_float+0x1ca>
 800992c:	2201      	movs	r2, #1
 800992e:	2900      	cmp	r1, #0
 8009930:	dce0      	bgt.n	80098f4 <_printf_float+0x1b4>
 8009932:	1892      	adds	r2, r2, r2
 8009934:	1a52      	subs	r2, r2, r1
 8009936:	e7dd      	b.n	80098f4 <_printf_float+0x1b4>
 8009938:	682a      	ldr	r2, [r5, #0]
 800993a:	0553      	lsls	r3, r2, #21
 800993c:	d408      	bmi.n	8009950 <_printf_float+0x210>
 800993e:	692b      	ldr	r3, [r5, #16]
 8009940:	003a      	movs	r2, r7
 8009942:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009944:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009946:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009948:	47a0      	blx	r4
 800994a:	3001      	adds	r0, #1
 800994c:	d129      	bne.n	80099a2 <_printf_float+0x262>
 800994e:	e753      	b.n	80097f8 <_printf_float+0xb8>
 8009950:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009952:	2b65      	cmp	r3, #101	@ 0x65
 8009954:	d800      	bhi.n	8009958 <_printf_float+0x218>
 8009956:	e0da      	b.n	8009b0e <_printf_float+0x3ce>
 8009958:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800995a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800995c:	2200      	movs	r2, #0
 800995e:	2300      	movs	r3, #0
 8009960:	f7f6 fd74 	bl	800044c <__aeabi_dcmpeq>
 8009964:	2800      	cmp	r0, #0
 8009966:	d033      	beq.n	80099d0 <_printf_float+0x290>
 8009968:	2301      	movs	r3, #1
 800996a:	4a37      	ldr	r2, [pc, #220]	@ (8009a48 <_printf_float+0x308>)
 800996c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800996e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009970:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009972:	47a0      	blx	r4
 8009974:	3001      	adds	r0, #1
 8009976:	d100      	bne.n	800997a <_printf_float+0x23a>
 8009978:	e73e      	b.n	80097f8 <_printf_float+0xb8>
 800997a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800997c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800997e:	42b3      	cmp	r3, r6
 8009980:	db02      	blt.n	8009988 <_printf_float+0x248>
 8009982:	682b      	ldr	r3, [r5, #0]
 8009984:	07db      	lsls	r3, r3, #31
 8009986:	d50c      	bpl.n	80099a2 <_printf_float+0x262>
 8009988:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800998a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800998c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800998e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009990:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009992:	47a0      	blx	r4
 8009994:	2400      	movs	r4, #0
 8009996:	3001      	adds	r0, #1
 8009998:	d100      	bne.n	800999c <_printf_float+0x25c>
 800999a:	e72d      	b.n	80097f8 <_printf_float+0xb8>
 800999c:	1e73      	subs	r3, r6, #1
 800999e:	42a3      	cmp	r3, r4
 80099a0:	dc0a      	bgt.n	80099b8 <_printf_float+0x278>
 80099a2:	682b      	ldr	r3, [r5, #0]
 80099a4:	079b      	lsls	r3, r3, #30
 80099a6:	d500      	bpl.n	80099aa <_printf_float+0x26a>
 80099a8:	e105      	b.n	8009bb6 <_printf_float+0x476>
 80099aa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80099ac:	68e8      	ldr	r0, [r5, #12]
 80099ae:	4298      	cmp	r0, r3
 80099b0:	db00      	blt.n	80099b4 <_printf_float+0x274>
 80099b2:	e723      	b.n	80097fc <_printf_float+0xbc>
 80099b4:	0018      	movs	r0, r3
 80099b6:	e721      	b.n	80097fc <_printf_float+0xbc>
 80099b8:	002a      	movs	r2, r5
 80099ba:	2301      	movs	r3, #1
 80099bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80099be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099c0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80099c2:	321a      	adds	r2, #26
 80099c4:	47b8      	blx	r7
 80099c6:	3001      	adds	r0, #1
 80099c8:	d100      	bne.n	80099cc <_printf_float+0x28c>
 80099ca:	e715      	b.n	80097f8 <_printf_float+0xb8>
 80099cc:	3401      	adds	r4, #1
 80099ce:	e7e5      	b.n	800999c <_printf_float+0x25c>
 80099d0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	dc3a      	bgt.n	8009a4c <_printf_float+0x30c>
 80099d6:	2301      	movs	r3, #1
 80099d8:	4a1b      	ldr	r2, [pc, #108]	@ (8009a48 <_printf_float+0x308>)
 80099da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80099dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099de:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80099e0:	47a0      	blx	r4
 80099e2:	3001      	adds	r0, #1
 80099e4:	d100      	bne.n	80099e8 <_printf_float+0x2a8>
 80099e6:	e707      	b.n	80097f8 <_printf_float+0xb8>
 80099e8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80099ea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80099ec:	4333      	orrs	r3, r6
 80099ee:	d102      	bne.n	80099f6 <_printf_float+0x2b6>
 80099f0:	682b      	ldr	r3, [r5, #0]
 80099f2:	07db      	lsls	r3, r3, #31
 80099f4:	d5d5      	bpl.n	80099a2 <_printf_float+0x262>
 80099f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80099fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80099fc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099fe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009a00:	47a0      	blx	r4
 8009a02:	2300      	movs	r3, #0
 8009a04:	3001      	adds	r0, #1
 8009a06:	d100      	bne.n	8009a0a <_printf_float+0x2ca>
 8009a08:	e6f6      	b.n	80097f8 <_printf_float+0xb8>
 8009a0a:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a0e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009a10:	425b      	negs	r3, r3
 8009a12:	4293      	cmp	r3, r2
 8009a14:	dc01      	bgt.n	8009a1a <_printf_float+0x2da>
 8009a16:	0033      	movs	r3, r6
 8009a18:	e792      	b.n	8009940 <_printf_float+0x200>
 8009a1a:	002a      	movs	r2, r5
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009a20:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a22:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009a24:	321a      	adds	r2, #26
 8009a26:	47a0      	blx	r4
 8009a28:	3001      	adds	r0, #1
 8009a2a:	d100      	bne.n	8009a2e <_printf_float+0x2ee>
 8009a2c:	e6e4      	b.n	80097f8 <_printf_float+0xb8>
 8009a2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a30:	3301      	adds	r3, #1
 8009a32:	e7ea      	b.n	8009a0a <_printf_float+0x2ca>
 8009a34:	7fefffff 	.word	0x7fefffff
 8009a38:	0800ca38 	.word	0x0800ca38
 8009a3c:	0800ca3c 	.word	0x0800ca3c
 8009a40:	0800ca40 	.word	0x0800ca40
 8009a44:	0800ca44 	.word	0x0800ca44
 8009a48:	0800ca48 	.word	0x0800ca48
 8009a4c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009a4e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8009a50:	930c      	str	r3, [sp, #48]	@ 0x30
 8009a52:	429e      	cmp	r6, r3
 8009a54:	dd00      	ble.n	8009a58 <_printf_float+0x318>
 8009a56:	001e      	movs	r6, r3
 8009a58:	2e00      	cmp	r6, #0
 8009a5a:	dc31      	bgt.n	8009ac0 <_printf_float+0x380>
 8009a5c:	43f3      	mvns	r3, r6
 8009a5e:	2400      	movs	r4, #0
 8009a60:	17db      	asrs	r3, r3, #31
 8009a62:	4033      	ands	r3, r6
 8009a64:	930e      	str	r3, [sp, #56]	@ 0x38
 8009a66:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8009a68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a6a:	1af3      	subs	r3, r6, r3
 8009a6c:	42a3      	cmp	r3, r4
 8009a6e:	dc30      	bgt.n	8009ad2 <_printf_float+0x392>
 8009a70:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a72:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009a74:	429a      	cmp	r2, r3
 8009a76:	dc38      	bgt.n	8009aea <_printf_float+0x3aa>
 8009a78:	682b      	ldr	r3, [r5, #0]
 8009a7a:	07db      	lsls	r3, r3, #31
 8009a7c:	d435      	bmi.n	8009aea <_printf_float+0x3aa>
 8009a7e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8009a80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a82:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009a84:	1b9b      	subs	r3, r3, r6
 8009a86:	1b14      	subs	r4, r2, r4
 8009a88:	429c      	cmp	r4, r3
 8009a8a:	dd00      	ble.n	8009a8e <_printf_float+0x34e>
 8009a8c:	001c      	movs	r4, r3
 8009a8e:	2c00      	cmp	r4, #0
 8009a90:	dc34      	bgt.n	8009afc <_printf_float+0x3bc>
 8009a92:	43e3      	mvns	r3, r4
 8009a94:	2600      	movs	r6, #0
 8009a96:	17db      	asrs	r3, r3, #31
 8009a98:	401c      	ands	r4, r3
 8009a9a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a9c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009a9e:	1ad3      	subs	r3, r2, r3
 8009aa0:	1b1b      	subs	r3, r3, r4
 8009aa2:	42b3      	cmp	r3, r6
 8009aa4:	dc00      	bgt.n	8009aa8 <_printf_float+0x368>
 8009aa6:	e77c      	b.n	80099a2 <_printf_float+0x262>
 8009aa8:	002a      	movs	r2, r5
 8009aaa:	2301      	movs	r3, #1
 8009aac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009aae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ab0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009ab2:	321a      	adds	r2, #26
 8009ab4:	47b8      	blx	r7
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	d100      	bne.n	8009abc <_printf_float+0x37c>
 8009aba:	e69d      	b.n	80097f8 <_printf_float+0xb8>
 8009abc:	3601      	adds	r6, #1
 8009abe:	e7ec      	b.n	8009a9a <_printf_float+0x35a>
 8009ac0:	0033      	movs	r3, r6
 8009ac2:	003a      	movs	r2, r7
 8009ac4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009ac6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ac8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009aca:	47a0      	blx	r4
 8009acc:	3001      	adds	r0, #1
 8009ace:	d1c5      	bne.n	8009a5c <_printf_float+0x31c>
 8009ad0:	e692      	b.n	80097f8 <_printf_float+0xb8>
 8009ad2:	002a      	movs	r2, r5
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009ad8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ada:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009adc:	321a      	adds	r2, #26
 8009ade:	47b0      	blx	r6
 8009ae0:	3001      	adds	r0, #1
 8009ae2:	d100      	bne.n	8009ae6 <_printf_float+0x3a6>
 8009ae4:	e688      	b.n	80097f8 <_printf_float+0xb8>
 8009ae6:	3401      	adds	r4, #1
 8009ae8:	e7bd      	b.n	8009a66 <_printf_float+0x326>
 8009aea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009aec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009aee:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009af0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009af2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009af4:	47a0      	blx	r4
 8009af6:	3001      	adds	r0, #1
 8009af8:	d1c1      	bne.n	8009a7e <_printf_float+0x33e>
 8009afa:	e67d      	b.n	80097f8 <_printf_float+0xb8>
 8009afc:	19ba      	adds	r2, r7, r6
 8009afe:	0023      	movs	r3, r4
 8009b00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b04:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009b06:	47b0      	blx	r6
 8009b08:	3001      	adds	r0, #1
 8009b0a:	d1c2      	bne.n	8009a92 <_printf_float+0x352>
 8009b0c:	e674      	b.n	80097f8 <_printf_float+0xb8>
 8009b0e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009b10:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	dc02      	bgt.n	8009b1c <_printf_float+0x3dc>
 8009b16:	2301      	movs	r3, #1
 8009b18:	421a      	tst	r2, r3
 8009b1a:	d039      	beq.n	8009b90 <_printf_float+0x450>
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	003a      	movs	r2, r7
 8009b20:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b24:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009b26:	47b0      	blx	r6
 8009b28:	3001      	adds	r0, #1
 8009b2a:	d100      	bne.n	8009b2e <_printf_float+0x3ee>
 8009b2c:	e664      	b.n	80097f8 <_printf_float+0xb8>
 8009b2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b32:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b34:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b36:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009b38:	47b0      	blx	r6
 8009b3a:	3001      	adds	r0, #1
 8009b3c:	d100      	bne.n	8009b40 <_printf_float+0x400>
 8009b3e:	e65b      	b.n	80097f8 <_printf_float+0xb8>
 8009b40:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8009b42:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8009b44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b46:	2200      	movs	r2, #0
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	f7f6 fc7d 	bl	800044c <__aeabi_dcmpeq>
 8009b52:	2800      	cmp	r0, #0
 8009b54:	d11a      	bne.n	8009b8c <_printf_float+0x44c>
 8009b56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b58:	1c7a      	adds	r2, r7, #1
 8009b5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b5c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b5e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009b60:	47b0      	blx	r6
 8009b62:	3001      	adds	r0, #1
 8009b64:	d10e      	bne.n	8009b84 <_printf_float+0x444>
 8009b66:	e647      	b.n	80097f8 <_printf_float+0xb8>
 8009b68:	002a      	movs	r2, r5
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b70:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009b72:	321a      	adds	r2, #26
 8009b74:	47b8      	blx	r7
 8009b76:	3001      	adds	r0, #1
 8009b78:	d100      	bne.n	8009b7c <_printf_float+0x43c>
 8009b7a:	e63d      	b.n	80097f8 <_printf_float+0xb8>
 8009b7c:	3601      	adds	r6, #1
 8009b7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b80:	429e      	cmp	r6, r3
 8009b82:	dbf1      	blt.n	8009b68 <_printf_float+0x428>
 8009b84:	002a      	movs	r2, r5
 8009b86:	0023      	movs	r3, r4
 8009b88:	3250      	adds	r2, #80	@ 0x50
 8009b8a:	e6da      	b.n	8009942 <_printf_float+0x202>
 8009b8c:	2600      	movs	r6, #0
 8009b8e:	e7f6      	b.n	8009b7e <_printf_float+0x43e>
 8009b90:	003a      	movs	r2, r7
 8009b92:	e7e2      	b.n	8009b5a <_printf_float+0x41a>
 8009b94:	002a      	movs	r2, r5
 8009b96:	2301      	movs	r3, #1
 8009b98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b9c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009b9e:	3219      	adds	r2, #25
 8009ba0:	47b0      	blx	r6
 8009ba2:	3001      	adds	r0, #1
 8009ba4:	d100      	bne.n	8009ba8 <_printf_float+0x468>
 8009ba6:	e627      	b.n	80097f8 <_printf_float+0xb8>
 8009ba8:	3401      	adds	r4, #1
 8009baa:	68eb      	ldr	r3, [r5, #12]
 8009bac:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009bae:	1a9b      	subs	r3, r3, r2
 8009bb0:	42a3      	cmp	r3, r4
 8009bb2:	dcef      	bgt.n	8009b94 <_printf_float+0x454>
 8009bb4:	e6f9      	b.n	80099aa <_printf_float+0x26a>
 8009bb6:	2400      	movs	r4, #0
 8009bb8:	e7f7      	b.n	8009baa <_printf_float+0x46a>
 8009bba:	46c0      	nop			@ (mov r8, r8)

08009bbc <_printf_common>:
 8009bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bbe:	0016      	movs	r6, r2
 8009bc0:	9301      	str	r3, [sp, #4]
 8009bc2:	688a      	ldr	r2, [r1, #8]
 8009bc4:	690b      	ldr	r3, [r1, #16]
 8009bc6:	000c      	movs	r4, r1
 8009bc8:	9000      	str	r0, [sp, #0]
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	da00      	bge.n	8009bd0 <_printf_common+0x14>
 8009bce:	0013      	movs	r3, r2
 8009bd0:	0022      	movs	r2, r4
 8009bd2:	6033      	str	r3, [r6, #0]
 8009bd4:	3243      	adds	r2, #67	@ 0x43
 8009bd6:	7812      	ldrb	r2, [r2, #0]
 8009bd8:	2a00      	cmp	r2, #0
 8009bda:	d001      	beq.n	8009be0 <_printf_common+0x24>
 8009bdc:	3301      	adds	r3, #1
 8009bde:	6033      	str	r3, [r6, #0]
 8009be0:	6823      	ldr	r3, [r4, #0]
 8009be2:	069b      	lsls	r3, r3, #26
 8009be4:	d502      	bpl.n	8009bec <_printf_common+0x30>
 8009be6:	6833      	ldr	r3, [r6, #0]
 8009be8:	3302      	adds	r3, #2
 8009bea:	6033      	str	r3, [r6, #0]
 8009bec:	6822      	ldr	r2, [r4, #0]
 8009bee:	2306      	movs	r3, #6
 8009bf0:	0015      	movs	r5, r2
 8009bf2:	401d      	ands	r5, r3
 8009bf4:	421a      	tst	r2, r3
 8009bf6:	d027      	beq.n	8009c48 <_printf_common+0x8c>
 8009bf8:	0023      	movs	r3, r4
 8009bfa:	3343      	adds	r3, #67	@ 0x43
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	1e5a      	subs	r2, r3, #1
 8009c00:	4193      	sbcs	r3, r2
 8009c02:	6822      	ldr	r2, [r4, #0]
 8009c04:	0692      	lsls	r2, r2, #26
 8009c06:	d430      	bmi.n	8009c6a <_printf_common+0xae>
 8009c08:	0022      	movs	r2, r4
 8009c0a:	9901      	ldr	r1, [sp, #4]
 8009c0c:	9800      	ldr	r0, [sp, #0]
 8009c0e:	9d08      	ldr	r5, [sp, #32]
 8009c10:	3243      	adds	r2, #67	@ 0x43
 8009c12:	47a8      	blx	r5
 8009c14:	3001      	adds	r0, #1
 8009c16:	d025      	beq.n	8009c64 <_printf_common+0xa8>
 8009c18:	2206      	movs	r2, #6
 8009c1a:	6823      	ldr	r3, [r4, #0]
 8009c1c:	2500      	movs	r5, #0
 8009c1e:	4013      	ands	r3, r2
 8009c20:	2b04      	cmp	r3, #4
 8009c22:	d105      	bne.n	8009c30 <_printf_common+0x74>
 8009c24:	6833      	ldr	r3, [r6, #0]
 8009c26:	68e5      	ldr	r5, [r4, #12]
 8009c28:	1aed      	subs	r5, r5, r3
 8009c2a:	43eb      	mvns	r3, r5
 8009c2c:	17db      	asrs	r3, r3, #31
 8009c2e:	401d      	ands	r5, r3
 8009c30:	68a3      	ldr	r3, [r4, #8]
 8009c32:	6922      	ldr	r2, [r4, #16]
 8009c34:	4293      	cmp	r3, r2
 8009c36:	dd01      	ble.n	8009c3c <_printf_common+0x80>
 8009c38:	1a9b      	subs	r3, r3, r2
 8009c3a:	18ed      	adds	r5, r5, r3
 8009c3c:	2600      	movs	r6, #0
 8009c3e:	42b5      	cmp	r5, r6
 8009c40:	d120      	bne.n	8009c84 <_printf_common+0xc8>
 8009c42:	2000      	movs	r0, #0
 8009c44:	e010      	b.n	8009c68 <_printf_common+0xac>
 8009c46:	3501      	adds	r5, #1
 8009c48:	68e3      	ldr	r3, [r4, #12]
 8009c4a:	6832      	ldr	r2, [r6, #0]
 8009c4c:	1a9b      	subs	r3, r3, r2
 8009c4e:	42ab      	cmp	r3, r5
 8009c50:	ddd2      	ble.n	8009bf8 <_printf_common+0x3c>
 8009c52:	0022      	movs	r2, r4
 8009c54:	2301      	movs	r3, #1
 8009c56:	9901      	ldr	r1, [sp, #4]
 8009c58:	9800      	ldr	r0, [sp, #0]
 8009c5a:	9f08      	ldr	r7, [sp, #32]
 8009c5c:	3219      	adds	r2, #25
 8009c5e:	47b8      	blx	r7
 8009c60:	3001      	adds	r0, #1
 8009c62:	d1f0      	bne.n	8009c46 <_printf_common+0x8a>
 8009c64:	2001      	movs	r0, #1
 8009c66:	4240      	negs	r0, r0
 8009c68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c6a:	2030      	movs	r0, #48	@ 0x30
 8009c6c:	18e1      	adds	r1, r4, r3
 8009c6e:	3143      	adds	r1, #67	@ 0x43
 8009c70:	7008      	strb	r0, [r1, #0]
 8009c72:	0021      	movs	r1, r4
 8009c74:	1c5a      	adds	r2, r3, #1
 8009c76:	3145      	adds	r1, #69	@ 0x45
 8009c78:	7809      	ldrb	r1, [r1, #0]
 8009c7a:	18a2      	adds	r2, r4, r2
 8009c7c:	3243      	adds	r2, #67	@ 0x43
 8009c7e:	3302      	adds	r3, #2
 8009c80:	7011      	strb	r1, [r2, #0]
 8009c82:	e7c1      	b.n	8009c08 <_printf_common+0x4c>
 8009c84:	0022      	movs	r2, r4
 8009c86:	2301      	movs	r3, #1
 8009c88:	9901      	ldr	r1, [sp, #4]
 8009c8a:	9800      	ldr	r0, [sp, #0]
 8009c8c:	9f08      	ldr	r7, [sp, #32]
 8009c8e:	321a      	adds	r2, #26
 8009c90:	47b8      	blx	r7
 8009c92:	3001      	adds	r0, #1
 8009c94:	d0e6      	beq.n	8009c64 <_printf_common+0xa8>
 8009c96:	3601      	adds	r6, #1
 8009c98:	e7d1      	b.n	8009c3e <_printf_common+0x82>
	...

08009c9c <_printf_i>:
 8009c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c9e:	b08b      	sub	sp, #44	@ 0x2c
 8009ca0:	9206      	str	r2, [sp, #24]
 8009ca2:	000a      	movs	r2, r1
 8009ca4:	3243      	adds	r2, #67	@ 0x43
 8009ca6:	9307      	str	r3, [sp, #28]
 8009ca8:	9005      	str	r0, [sp, #20]
 8009caa:	9203      	str	r2, [sp, #12]
 8009cac:	7e0a      	ldrb	r2, [r1, #24]
 8009cae:	000c      	movs	r4, r1
 8009cb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009cb2:	2a78      	cmp	r2, #120	@ 0x78
 8009cb4:	d809      	bhi.n	8009cca <_printf_i+0x2e>
 8009cb6:	2a62      	cmp	r2, #98	@ 0x62
 8009cb8:	d80b      	bhi.n	8009cd2 <_printf_i+0x36>
 8009cba:	2a00      	cmp	r2, #0
 8009cbc:	d100      	bne.n	8009cc0 <_printf_i+0x24>
 8009cbe:	e0bc      	b.n	8009e3a <_printf_i+0x19e>
 8009cc0:	497b      	ldr	r1, [pc, #492]	@ (8009eb0 <_printf_i+0x214>)
 8009cc2:	9104      	str	r1, [sp, #16]
 8009cc4:	2a58      	cmp	r2, #88	@ 0x58
 8009cc6:	d100      	bne.n	8009cca <_printf_i+0x2e>
 8009cc8:	e090      	b.n	8009dec <_printf_i+0x150>
 8009cca:	0025      	movs	r5, r4
 8009ccc:	3542      	adds	r5, #66	@ 0x42
 8009cce:	702a      	strb	r2, [r5, #0]
 8009cd0:	e022      	b.n	8009d18 <_printf_i+0x7c>
 8009cd2:	0010      	movs	r0, r2
 8009cd4:	3863      	subs	r0, #99	@ 0x63
 8009cd6:	2815      	cmp	r0, #21
 8009cd8:	d8f7      	bhi.n	8009cca <_printf_i+0x2e>
 8009cda:	f7f6 fa27 	bl	800012c <__gnu_thumb1_case_shi>
 8009cde:	0016      	.short	0x0016
 8009ce0:	fff6001f 	.word	0xfff6001f
 8009ce4:	fff6fff6 	.word	0xfff6fff6
 8009ce8:	001ffff6 	.word	0x001ffff6
 8009cec:	fff6fff6 	.word	0xfff6fff6
 8009cf0:	fff6fff6 	.word	0xfff6fff6
 8009cf4:	003600a1 	.word	0x003600a1
 8009cf8:	fff60080 	.word	0xfff60080
 8009cfc:	00b2fff6 	.word	0x00b2fff6
 8009d00:	0036fff6 	.word	0x0036fff6
 8009d04:	fff6fff6 	.word	0xfff6fff6
 8009d08:	0084      	.short	0x0084
 8009d0a:	0025      	movs	r5, r4
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	3542      	adds	r5, #66	@ 0x42
 8009d10:	1d11      	adds	r1, r2, #4
 8009d12:	6019      	str	r1, [r3, #0]
 8009d14:	6813      	ldr	r3, [r2, #0]
 8009d16:	702b      	strb	r3, [r5, #0]
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e0a0      	b.n	8009e5e <_printf_i+0x1c2>
 8009d1c:	6818      	ldr	r0, [r3, #0]
 8009d1e:	6809      	ldr	r1, [r1, #0]
 8009d20:	1d02      	adds	r2, r0, #4
 8009d22:	060d      	lsls	r5, r1, #24
 8009d24:	d50b      	bpl.n	8009d3e <_printf_i+0xa2>
 8009d26:	6806      	ldr	r6, [r0, #0]
 8009d28:	601a      	str	r2, [r3, #0]
 8009d2a:	2e00      	cmp	r6, #0
 8009d2c:	da03      	bge.n	8009d36 <_printf_i+0x9a>
 8009d2e:	232d      	movs	r3, #45	@ 0x2d
 8009d30:	9a03      	ldr	r2, [sp, #12]
 8009d32:	4276      	negs	r6, r6
 8009d34:	7013      	strb	r3, [r2, #0]
 8009d36:	4b5e      	ldr	r3, [pc, #376]	@ (8009eb0 <_printf_i+0x214>)
 8009d38:	270a      	movs	r7, #10
 8009d3a:	9304      	str	r3, [sp, #16]
 8009d3c:	e018      	b.n	8009d70 <_printf_i+0xd4>
 8009d3e:	6806      	ldr	r6, [r0, #0]
 8009d40:	601a      	str	r2, [r3, #0]
 8009d42:	0649      	lsls	r1, r1, #25
 8009d44:	d5f1      	bpl.n	8009d2a <_printf_i+0x8e>
 8009d46:	b236      	sxth	r6, r6
 8009d48:	e7ef      	b.n	8009d2a <_printf_i+0x8e>
 8009d4a:	6808      	ldr	r0, [r1, #0]
 8009d4c:	6819      	ldr	r1, [r3, #0]
 8009d4e:	c940      	ldmia	r1!, {r6}
 8009d50:	0605      	lsls	r5, r0, #24
 8009d52:	d402      	bmi.n	8009d5a <_printf_i+0xbe>
 8009d54:	0640      	lsls	r0, r0, #25
 8009d56:	d500      	bpl.n	8009d5a <_printf_i+0xbe>
 8009d58:	b2b6      	uxth	r6, r6
 8009d5a:	6019      	str	r1, [r3, #0]
 8009d5c:	4b54      	ldr	r3, [pc, #336]	@ (8009eb0 <_printf_i+0x214>)
 8009d5e:	270a      	movs	r7, #10
 8009d60:	9304      	str	r3, [sp, #16]
 8009d62:	2a6f      	cmp	r2, #111	@ 0x6f
 8009d64:	d100      	bne.n	8009d68 <_printf_i+0xcc>
 8009d66:	3f02      	subs	r7, #2
 8009d68:	0023      	movs	r3, r4
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	3343      	adds	r3, #67	@ 0x43
 8009d6e:	701a      	strb	r2, [r3, #0]
 8009d70:	6863      	ldr	r3, [r4, #4]
 8009d72:	60a3      	str	r3, [r4, #8]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	db03      	blt.n	8009d80 <_printf_i+0xe4>
 8009d78:	2104      	movs	r1, #4
 8009d7a:	6822      	ldr	r2, [r4, #0]
 8009d7c:	438a      	bics	r2, r1
 8009d7e:	6022      	str	r2, [r4, #0]
 8009d80:	2e00      	cmp	r6, #0
 8009d82:	d102      	bne.n	8009d8a <_printf_i+0xee>
 8009d84:	9d03      	ldr	r5, [sp, #12]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00c      	beq.n	8009da4 <_printf_i+0x108>
 8009d8a:	9d03      	ldr	r5, [sp, #12]
 8009d8c:	0030      	movs	r0, r6
 8009d8e:	0039      	movs	r1, r7
 8009d90:	f7f6 fa5c 	bl	800024c <__aeabi_uidivmod>
 8009d94:	9b04      	ldr	r3, [sp, #16]
 8009d96:	3d01      	subs	r5, #1
 8009d98:	5c5b      	ldrb	r3, [r3, r1]
 8009d9a:	702b      	strb	r3, [r5, #0]
 8009d9c:	0033      	movs	r3, r6
 8009d9e:	0006      	movs	r6, r0
 8009da0:	429f      	cmp	r7, r3
 8009da2:	d9f3      	bls.n	8009d8c <_printf_i+0xf0>
 8009da4:	2f08      	cmp	r7, #8
 8009da6:	d109      	bne.n	8009dbc <_printf_i+0x120>
 8009da8:	6823      	ldr	r3, [r4, #0]
 8009daa:	07db      	lsls	r3, r3, #31
 8009dac:	d506      	bpl.n	8009dbc <_printf_i+0x120>
 8009dae:	6862      	ldr	r2, [r4, #4]
 8009db0:	6923      	ldr	r3, [r4, #16]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	dc02      	bgt.n	8009dbc <_printf_i+0x120>
 8009db6:	2330      	movs	r3, #48	@ 0x30
 8009db8:	3d01      	subs	r5, #1
 8009dba:	702b      	strb	r3, [r5, #0]
 8009dbc:	9b03      	ldr	r3, [sp, #12]
 8009dbe:	1b5b      	subs	r3, r3, r5
 8009dc0:	6123      	str	r3, [r4, #16]
 8009dc2:	9b07      	ldr	r3, [sp, #28]
 8009dc4:	0021      	movs	r1, r4
 8009dc6:	9300      	str	r3, [sp, #0]
 8009dc8:	9805      	ldr	r0, [sp, #20]
 8009dca:	9b06      	ldr	r3, [sp, #24]
 8009dcc:	aa09      	add	r2, sp, #36	@ 0x24
 8009dce:	f7ff fef5 	bl	8009bbc <_printf_common>
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	d148      	bne.n	8009e68 <_printf_i+0x1cc>
 8009dd6:	2001      	movs	r0, #1
 8009dd8:	4240      	negs	r0, r0
 8009dda:	b00b      	add	sp, #44	@ 0x2c
 8009ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dde:	2220      	movs	r2, #32
 8009de0:	6809      	ldr	r1, [r1, #0]
 8009de2:	430a      	orrs	r2, r1
 8009de4:	6022      	str	r2, [r4, #0]
 8009de6:	2278      	movs	r2, #120	@ 0x78
 8009de8:	4932      	ldr	r1, [pc, #200]	@ (8009eb4 <_printf_i+0x218>)
 8009dea:	9104      	str	r1, [sp, #16]
 8009dec:	0021      	movs	r1, r4
 8009dee:	3145      	adds	r1, #69	@ 0x45
 8009df0:	700a      	strb	r2, [r1, #0]
 8009df2:	6819      	ldr	r1, [r3, #0]
 8009df4:	6822      	ldr	r2, [r4, #0]
 8009df6:	c940      	ldmia	r1!, {r6}
 8009df8:	0610      	lsls	r0, r2, #24
 8009dfa:	d402      	bmi.n	8009e02 <_printf_i+0x166>
 8009dfc:	0650      	lsls	r0, r2, #25
 8009dfe:	d500      	bpl.n	8009e02 <_printf_i+0x166>
 8009e00:	b2b6      	uxth	r6, r6
 8009e02:	6019      	str	r1, [r3, #0]
 8009e04:	07d3      	lsls	r3, r2, #31
 8009e06:	d502      	bpl.n	8009e0e <_printf_i+0x172>
 8009e08:	2320      	movs	r3, #32
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	6023      	str	r3, [r4, #0]
 8009e0e:	2e00      	cmp	r6, #0
 8009e10:	d001      	beq.n	8009e16 <_printf_i+0x17a>
 8009e12:	2710      	movs	r7, #16
 8009e14:	e7a8      	b.n	8009d68 <_printf_i+0xcc>
 8009e16:	2220      	movs	r2, #32
 8009e18:	6823      	ldr	r3, [r4, #0]
 8009e1a:	4393      	bics	r3, r2
 8009e1c:	6023      	str	r3, [r4, #0]
 8009e1e:	e7f8      	b.n	8009e12 <_printf_i+0x176>
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	680d      	ldr	r5, [r1, #0]
 8009e24:	1d10      	adds	r0, r2, #4
 8009e26:	6949      	ldr	r1, [r1, #20]
 8009e28:	6018      	str	r0, [r3, #0]
 8009e2a:	6813      	ldr	r3, [r2, #0]
 8009e2c:	062e      	lsls	r6, r5, #24
 8009e2e:	d501      	bpl.n	8009e34 <_printf_i+0x198>
 8009e30:	6019      	str	r1, [r3, #0]
 8009e32:	e002      	b.n	8009e3a <_printf_i+0x19e>
 8009e34:	066d      	lsls	r5, r5, #25
 8009e36:	d5fb      	bpl.n	8009e30 <_printf_i+0x194>
 8009e38:	8019      	strh	r1, [r3, #0]
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	9d03      	ldr	r5, [sp, #12]
 8009e3e:	6123      	str	r3, [r4, #16]
 8009e40:	e7bf      	b.n	8009dc2 <_printf_i+0x126>
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	1d11      	adds	r1, r2, #4
 8009e46:	6019      	str	r1, [r3, #0]
 8009e48:	6815      	ldr	r5, [r2, #0]
 8009e4a:	2100      	movs	r1, #0
 8009e4c:	0028      	movs	r0, r5
 8009e4e:	6862      	ldr	r2, [r4, #4]
 8009e50:	f000 fa31 	bl	800a2b6 <memchr>
 8009e54:	2800      	cmp	r0, #0
 8009e56:	d001      	beq.n	8009e5c <_printf_i+0x1c0>
 8009e58:	1b40      	subs	r0, r0, r5
 8009e5a:	6060      	str	r0, [r4, #4]
 8009e5c:	6863      	ldr	r3, [r4, #4]
 8009e5e:	6123      	str	r3, [r4, #16]
 8009e60:	2300      	movs	r3, #0
 8009e62:	9a03      	ldr	r2, [sp, #12]
 8009e64:	7013      	strb	r3, [r2, #0]
 8009e66:	e7ac      	b.n	8009dc2 <_printf_i+0x126>
 8009e68:	002a      	movs	r2, r5
 8009e6a:	6923      	ldr	r3, [r4, #16]
 8009e6c:	9906      	ldr	r1, [sp, #24]
 8009e6e:	9805      	ldr	r0, [sp, #20]
 8009e70:	9d07      	ldr	r5, [sp, #28]
 8009e72:	47a8      	blx	r5
 8009e74:	3001      	adds	r0, #1
 8009e76:	d0ae      	beq.n	8009dd6 <_printf_i+0x13a>
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	079b      	lsls	r3, r3, #30
 8009e7c:	d415      	bmi.n	8009eaa <_printf_i+0x20e>
 8009e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e80:	68e0      	ldr	r0, [r4, #12]
 8009e82:	4298      	cmp	r0, r3
 8009e84:	daa9      	bge.n	8009dda <_printf_i+0x13e>
 8009e86:	0018      	movs	r0, r3
 8009e88:	e7a7      	b.n	8009dda <_printf_i+0x13e>
 8009e8a:	0022      	movs	r2, r4
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	9906      	ldr	r1, [sp, #24]
 8009e90:	9805      	ldr	r0, [sp, #20]
 8009e92:	9e07      	ldr	r6, [sp, #28]
 8009e94:	3219      	adds	r2, #25
 8009e96:	47b0      	blx	r6
 8009e98:	3001      	adds	r0, #1
 8009e9a:	d09c      	beq.n	8009dd6 <_printf_i+0x13a>
 8009e9c:	3501      	adds	r5, #1
 8009e9e:	68e3      	ldr	r3, [r4, #12]
 8009ea0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ea2:	1a9b      	subs	r3, r3, r2
 8009ea4:	42ab      	cmp	r3, r5
 8009ea6:	dcf0      	bgt.n	8009e8a <_printf_i+0x1ee>
 8009ea8:	e7e9      	b.n	8009e7e <_printf_i+0x1e2>
 8009eaa:	2500      	movs	r5, #0
 8009eac:	e7f7      	b.n	8009e9e <_printf_i+0x202>
 8009eae:	46c0      	nop			@ (mov r8, r8)
 8009eb0:	0800ca4a 	.word	0x0800ca4a
 8009eb4:	0800ca5b 	.word	0x0800ca5b

08009eb8 <std>:
 8009eb8:	2300      	movs	r3, #0
 8009eba:	b510      	push	{r4, lr}
 8009ebc:	0004      	movs	r4, r0
 8009ebe:	6003      	str	r3, [r0, #0]
 8009ec0:	6043      	str	r3, [r0, #4]
 8009ec2:	6083      	str	r3, [r0, #8]
 8009ec4:	8181      	strh	r1, [r0, #12]
 8009ec6:	6643      	str	r3, [r0, #100]	@ 0x64
 8009ec8:	81c2      	strh	r2, [r0, #14]
 8009eca:	6103      	str	r3, [r0, #16]
 8009ecc:	6143      	str	r3, [r0, #20]
 8009ece:	6183      	str	r3, [r0, #24]
 8009ed0:	0019      	movs	r1, r3
 8009ed2:	2208      	movs	r2, #8
 8009ed4:	305c      	adds	r0, #92	@ 0x5c
 8009ed6:	f000 f967 	bl	800a1a8 <memset>
 8009eda:	4b0b      	ldr	r3, [pc, #44]	@ (8009f08 <std+0x50>)
 8009edc:	6224      	str	r4, [r4, #32]
 8009ede:	6263      	str	r3, [r4, #36]	@ 0x24
 8009ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8009f0c <std+0x54>)
 8009ee2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8009f10 <std+0x58>)
 8009ee6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8009f14 <std+0x5c>)
 8009eea:	6323      	str	r3, [r4, #48]	@ 0x30
 8009eec:	4b0a      	ldr	r3, [pc, #40]	@ (8009f18 <std+0x60>)
 8009eee:	429c      	cmp	r4, r3
 8009ef0:	d005      	beq.n	8009efe <std+0x46>
 8009ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8009f1c <std+0x64>)
 8009ef4:	429c      	cmp	r4, r3
 8009ef6:	d002      	beq.n	8009efe <std+0x46>
 8009ef8:	4b09      	ldr	r3, [pc, #36]	@ (8009f20 <std+0x68>)
 8009efa:	429c      	cmp	r4, r3
 8009efc:	d103      	bne.n	8009f06 <std+0x4e>
 8009efe:	0020      	movs	r0, r4
 8009f00:	3058      	adds	r0, #88	@ 0x58
 8009f02:	f000 f9d5 	bl	800a2b0 <__retarget_lock_init_recursive>
 8009f06:	bd10      	pop	{r4, pc}
 8009f08:	0800a0a1 	.word	0x0800a0a1
 8009f0c:	0800a0c9 	.word	0x0800a0c9
 8009f10:	0800a101 	.word	0x0800a101
 8009f14:	0800a12d 	.word	0x0800a12d
 8009f18:	20000d34 	.word	0x20000d34
 8009f1c:	20000d9c 	.word	0x20000d9c
 8009f20:	20000e04 	.word	0x20000e04

08009f24 <stdio_exit_handler>:
 8009f24:	b510      	push	{r4, lr}
 8009f26:	4a03      	ldr	r2, [pc, #12]	@ (8009f34 <stdio_exit_handler+0x10>)
 8009f28:	4903      	ldr	r1, [pc, #12]	@ (8009f38 <stdio_exit_handler+0x14>)
 8009f2a:	4804      	ldr	r0, [pc, #16]	@ (8009f3c <stdio_exit_handler+0x18>)
 8009f2c:	f000 f86c 	bl	800a008 <_fwalk_sglue>
 8009f30:	bd10      	pop	{r4, pc}
 8009f32:	46c0      	nop			@ (mov r8, r8)
 8009f34:	20000024 	.word	0x20000024
 8009f38:	0800bf75 	.word	0x0800bf75
 8009f3c:	20000034 	.word	0x20000034

08009f40 <cleanup_stdio>:
 8009f40:	6841      	ldr	r1, [r0, #4]
 8009f42:	4b0b      	ldr	r3, [pc, #44]	@ (8009f70 <cleanup_stdio+0x30>)
 8009f44:	b510      	push	{r4, lr}
 8009f46:	0004      	movs	r4, r0
 8009f48:	4299      	cmp	r1, r3
 8009f4a:	d001      	beq.n	8009f50 <cleanup_stdio+0x10>
 8009f4c:	f002 f812 	bl	800bf74 <_fflush_r>
 8009f50:	68a1      	ldr	r1, [r4, #8]
 8009f52:	4b08      	ldr	r3, [pc, #32]	@ (8009f74 <cleanup_stdio+0x34>)
 8009f54:	4299      	cmp	r1, r3
 8009f56:	d002      	beq.n	8009f5e <cleanup_stdio+0x1e>
 8009f58:	0020      	movs	r0, r4
 8009f5a:	f002 f80b 	bl	800bf74 <_fflush_r>
 8009f5e:	68e1      	ldr	r1, [r4, #12]
 8009f60:	4b05      	ldr	r3, [pc, #20]	@ (8009f78 <cleanup_stdio+0x38>)
 8009f62:	4299      	cmp	r1, r3
 8009f64:	d002      	beq.n	8009f6c <cleanup_stdio+0x2c>
 8009f66:	0020      	movs	r0, r4
 8009f68:	f002 f804 	bl	800bf74 <_fflush_r>
 8009f6c:	bd10      	pop	{r4, pc}
 8009f6e:	46c0      	nop			@ (mov r8, r8)
 8009f70:	20000d34 	.word	0x20000d34
 8009f74:	20000d9c 	.word	0x20000d9c
 8009f78:	20000e04 	.word	0x20000e04

08009f7c <global_stdio_init.part.0>:
 8009f7c:	b510      	push	{r4, lr}
 8009f7e:	4b09      	ldr	r3, [pc, #36]	@ (8009fa4 <global_stdio_init.part.0+0x28>)
 8009f80:	4a09      	ldr	r2, [pc, #36]	@ (8009fa8 <global_stdio_init.part.0+0x2c>)
 8009f82:	2104      	movs	r1, #4
 8009f84:	601a      	str	r2, [r3, #0]
 8009f86:	4809      	ldr	r0, [pc, #36]	@ (8009fac <global_stdio_init.part.0+0x30>)
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f7ff ff95 	bl	8009eb8 <std>
 8009f8e:	2201      	movs	r2, #1
 8009f90:	2109      	movs	r1, #9
 8009f92:	4807      	ldr	r0, [pc, #28]	@ (8009fb0 <global_stdio_init.part.0+0x34>)
 8009f94:	f7ff ff90 	bl	8009eb8 <std>
 8009f98:	2202      	movs	r2, #2
 8009f9a:	2112      	movs	r1, #18
 8009f9c:	4805      	ldr	r0, [pc, #20]	@ (8009fb4 <global_stdio_init.part.0+0x38>)
 8009f9e:	f7ff ff8b 	bl	8009eb8 <std>
 8009fa2:	bd10      	pop	{r4, pc}
 8009fa4:	20000e6c 	.word	0x20000e6c
 8009fa8:	08009f25 	.word	0x08009f25
 8009fac:	20000d34 	.word	0x20000d34
 8009fb0:	20000d9c 	.word	0x20000d9c
 8009fb4:	20000e04 	.word	0x20000e04

08009fb8 <__sfp_lock_acquire>:
 8009fb8:	b510      	push	{r4, lr}
 8009fba:	4802      	ldr	r0, [pc, #8]	@ (8009fc4 <__sfp_lock_acquire+0xc>)
 8009fbc:	f000 f979 	bl	800a2b2 <__retarget_lock_acquire_recursive>
 8009fc0:	bd10      	pop	{r4, pc}
 8009fc2:	46c0      	nop			@ (mov r8, r8)
 8009fc4:	20000e75 	.word	0x20000e75

08009fc8 <__sfp_lock_release>:
 8009fc8:	b510      	push	{r4, lr}
 8009fca:	4802      	ldr	r0, [pc, #8]	@ (8009fd4 <__sfp_lock_release+0xc>)
 8009fcc:	f000 f972 	bl	800a2b4 <__retarget_lock_release_recursive>
 8009fd0:	bd10      	pop	{r4, pc}
 8009fd2:	46c0      	nop			@ (mov r8, r8)
 8009fd4:	20000e75 	.word	0x20000e75

08009fd8 <__sinit>:
 8009fd8:	b510      	push	{r4, lr}
 8009fda:	0004      	movs	r4, r0
 8009fdc:	f7ff ffec 	bl	8009fb8 <__sfp_lock_acquire>
 8009fe0:	6a23      	ldr	r3, [r4, #32]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d002      	beq.n	8009fec <__sinit+0x14>
 8009fe6:	f7ff ffef 	bl	8009fc8 <__sfp_lock_release>
 8009fea:	bd10      	pop	{r4, pc}
 8009fec:	4b04      	ldr	r3, [pc, #16]	@ (800a000 <__sinit+0x28>)
 8009fee:	6223      	str	r3, [r4, #32]
 8009ff0:	4b04      	ldr	r3, [pc, #16]	@ (800a004 <__sinit+0x2c>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1f6      	bne.n	8009fe6 <__sinit+0xe>
 8009ff8:	f7ff ffc0 	bl	8009f7c <global_stdio_init.part.0>
 8009ffc:	e7f3      	b.n	8009fe6 <__sinit+0xe>
 8009ffe:	46c0      	nop			@ (mov r8, r8)
 800a000:	08009f41 	.word	0x08009f41
 800a004:	20000e6c 	.word	0x20000e6c

0800a008 <_fwalk_sglue>:
 800a008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a00a:	0014      	movs	r4, r2
 800a00c:	2600      	movs	r6, #0
 800a00e:	9000      	str	r0, [sp, #0]
 800a010:	9101      	str	r1, [sp, #4]
 800a012:	68a5      	ldr	r5, [r4, #8]
 800a014:	6867      	ldr	r7, [r4, #4]
 800a016:	3f01      	subs	r7, #1
 800a018:	d504      	bpl.n	800a024 <_fwalk_sglue+0x1c>
 800a01a:	6824      	ldr	r4, [r4, #0]
 800a01c:	2c00      	cmp	r4, #0
 800a01e:	d1f8      	bne.n	800a012 <_fwalk_sglue+0xa>
 800a020:	0030      	movs	r0, r6
 800a022:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a024:	89ab      	ldrh	r3, [r5, #12]
 800a026:	2b01      	cmp	r3, #1
 800a028:	d908      	bls.n	800a03c <_fwalk_sglue+0x34>
 800a02a:	220e      	movs	r2, #14
 800a02c:	5eab      	ldrsh	r3, [r5, r2]
 800a02e:	3301      	adds	r3, #1
 800a030:	d004      	beq.n	800a03c <_fwalk_sglue+0x34>
 800a032:	0029      	movs	r1, r5
 800a034:	9800      	ldr	r0, [sp, #0]
 800a036:	9b01      	ldr	r3, [sp, #4]
 800a038:	4798      	blx	r3
 800a03a:	4306      	orrs	r6, r0
 800a03c:	3568      	adds	r5, #104	@ 0x68
 800a03e:	e7ea      	b.n	800a016 <_fwalk_sglue+0xe>

0800a040 <iprintf>:
 800a040:	b40f      	push	{r0, r1, r2, r3}
 800a042:	b507      	push	{r0, r1, r2, lr}
 800a044:	4905      	ldr	r1, [pc, #20]	@ (800a05c <iprintf+0x1c>)
 800a046:	ab04      	add	r3, sp, #16
 800a048:	6808      	ldr	r0, [r1, #0]
 800a04a:	cb04      	ldmia	r3!, {r2}
 800a04c:	6881      	ldr	r1, [r0, #8]
 800a04e:	9301      	str	r3, [sp, #4]
 800a050:	f001 fdee 	bl	800bc30 <_vfiprintf_r>
 800a054:	b003      	add	sp, #12
 800a056:	bc08      	pop	{r3}
 800a058:	b004      	add	sp, #16
 800a05a:	4718      	bx	r3
 800a05c:	20000030 	.word	0x20000030

0800a060 <siprintf>:
 800a060:	b40e      	push	{r1, r2, r3}
 800a062:	b500      	push	{lr}
 800a064:	490b      	ldr	r1, [pc, #44]	@ (800a094 <siprintf+0x34>)
 800a066:	b09c      	sub	sp, #112	@ 0x70
 800a068:	ab1d      	add	r3, sp, #116	@ 0x74
 800a06a:	9002      	str	r0, [sp, #8]
 800a06c:	9006      	str	r0, [sp, #24]
 800a06e:	9107      	str	r1, [sp, #28]
 800a070:	9104      	str	r1, [sp, #16]
 800a072:	4809      	ldr	r0, [pc, #36]	@ (800a098 <siprintf+0x38>)
 800a074:	4909      	ldr	r1, [pc, #36]	@ (800a09c <siprintf+0x3c>)
 800a076:	cb04      	ldmia	r3!, {r2}
 800a078:	9105      	str	r1, [sp, #20]
 800a07a:	6800      	ldr	r0, [r0, #0]
 800a07c:	a902      	add	r1, sp, #8
 800a07e:	9301      	str	r3, [sp, #4]
 800a080:	f001 fcb0 	bl	800b9e4 <_svfiprintf_r>
 800a084:	2200      	movs	r2, #0
 800a086:	9b02      	ldr	r3, [sp, #8]
 800a088:	701a      	strb	r2, [r3, #0]
 800a08a:	b01c      	add	sp, #112	@ 0x70
 800a08c:	bc08      	pop	{r3}
 800a08e:	b003      	add	sp, #12
 800a090:	4718      	bx	r3
 800a092:	46c0      	nop			@ (mov r8, r8)
 800a094:	7fffffff 	.word	0x7fffffff
 800a098:	20000030 	.word	0x20000030
 800a09c:	ffff0208 	.word	0xffff0208

0800a0a0 <__sread>:
 800a0a0:	b570      	push	{r4, r5, r6, lr}
 800a0a2:	000c      	movs	r4, r1
 800a0a4:	250e      	movs	r5, #14
 800a0a6:	5f49      	ldrsh	r1, [r1, r5]
 800a0a8:	f000 f8b0 	bl	800a20c <_read_r>
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	db03      	blt.n	800a0b8 <__sread+0x18>
 800a0b0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a0b2:	181b      	adds	r3, r3, r0
 800a0b4:	6563      	str	r3, [r4, #84]	@ 0x54
 800a0b6:	bd70      	pop	{r4, r5, r6, pc}
 800a0b8:	89a3      	ldrh	r3, [r4, #12]
 800a0ba:	4a02      	ldr	r2, [pc, #8]	@ (800a0c4 <__sread+0x24>)
 800a0bc:	4013      	ands	r3, r2
 800a0be:	81a3      	strh	r3, [r4, #12]
 800a0c0:	e7f9      	b.n	800a0b6 <__sread+0x16>
 800a0c2:	46c0      	nop			@ (mov r8, r8)
 800a0c4:	ffffefff 	.word	0xffffefff

0800a0c8 <__swrite>:
 800a0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ca:	001f      	movs	r7, r3
 800a0cc:	898b      	ldrh	r3, [r1, #12]
 800a0ce:	0005      	movs	r5, r0
 800a0d0:	000c      	movs	r4, r1
 800a0d2:	0016      	movs	r6, r2
 800a0d4:	05db      	lsls	r3, r3, #23
 800a0d6:	d505      	bpl.n	800a0e4 <__swrite+0x1c>
 800a0d8:	230e      	movs	r3, #14
 800a0da:	5ec9      	ldrsh	r1, [r1, r3]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	2302      	movs	r3, #2
 800a0e0:	f000 f880 	bl	800a1e4 <_lseek_r>
 800a0e4:	89a3      	ldrh	r3, [r4, #12]
 800a0e6:	4a05      	ldr	r2, [pc, #20]	@ (800a0fc <__swrite+0x34>)
 800a0e8:	0028      	movs	r0, r5
 800a0ea:	4013      	ands	r3, r2
 800a0ec:	81a3      	strh	r3, [r4, #12]
 800a0ee:	0032      	movs	r2, r6
 800a0f0:	230e      	movs	r3, #14
 800a0f2:	5ee1      	ldrsh	r1, [r4, r3]
 800a0f4:	003b      	movs	r3, r7
 800a0f6:	f000 f89d 	bl	800a234 <_write_r>
 800a0fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0fc:	ffffefff 	.word	0xffffefff

0800a100 <__sseek>:
 800a100:	b570      	push	{r4, r5, r6, lr}
 800a102:	000c      	movs	r4, r1
 800a104:	250e      	movs	r5, #14
 800a106:	5f49      	ldrsh	r1, [r1, r5]
 800a108:	f000 f86c 	bl	800a1e4 <_lseek_r>
 800a10c:	89a3      	ldrh	r3, [r4, #12]
 800a10e:	1c42      	adds	r2, r0, #1
 800a110:	d103      	bne.n	800a11a <__sseek+0x1a>
 800a112:	4a05      	ldr	r2, [pc, #20]	@ (800a128 <__sseek+0x28>)
 800a114:	4013      	ands	r3, r2
 800a116:	81a3      	strh	r3, [r4, #12]
 800a118:	bd70      	pop	{r4, r5, r6, pc}
 800a11a:	2280      	movs	r2, #128	@ 0x80
 800a11c:	0152      	lsls	r2, r2, #5
 800a11e:	4313      	orrs	r3, r2
 800a120:	81a3      	strh	r3, [r4, #12]
 800a122:	6560      	str	r0, [r4, #84]	@ 0x54
 800a124:	e7f8      	b.n	800a118 <__sseek+0x18>
 800a126:	46c0      	nop			@ (mov r8, r8)
 800a128:	ffffefff 	.word	0xffffefff

0800a12c <__sclose>:
 800a12c:	b510      	push	{r4, lr}
 800a12e:	230e      	movs	r3, #14
 800a130:	5ec9      	ldrsh	r1, [r1, r3]
 800a132:	f000 f845 	bl	800a1c0 <_close_r>
 800a136:	bd10      	pop	{r4, pc}

0800a138 <_vsniprintf_r>:
 800a138:	b530      	push	{r4, r5, lr}
 800a13a:	0014      	movs	r4, r2
 800a13c:	0005      	movs	r5, r0
 800a13e:	001a      	movs	r2, r3
 800a140:	b09b      	sub	sp, #108	@ 0x6c
 800a142:	2c00      	cmp	r4, #0
 800a144:	da05      	bge.n	800a152 <_vsniprintf_r+0x1a>
 800a146:	238b      	movs	r3, #139	@ 0x8b
 800a148:	6003      	str	r3, [r0, #0]
 800a14a:	2001      	movs	r0, #1
 800a14c:	4240      	negs	r0, r0
 800a14e:	b01b      	add	sp, #108	@ 0x6c
 800a150:	bd30      	pop	{r4, r5, pc}
 800a152:	2382      	movs	r3, #130	@ 0x82
 800a154:	4668      	mov	r0, sp
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	8183      	strh	r3, [r0, #12]
 800a15a:	2300      	movs	r3, #0
 800a15c:	9100      	str	r1, [sp, #0]
 800a15e:	9104      	str	r1, [sp, #16]
 800a160:	429c      	cmp	r4, r3
 800a162:	d000      	beq.n	800a166 <_vsniprintf_r+0x2e>
 800a164:	1e63      	subs	r3, r4, #1
 800a166:	9302      	str	r3, [sp, #8]
 800a168:	9305      	str	r3, [sp, #20]
 800a16a:	2301      	movs	r3, #1
 800a16c:	4669      	mov	r1, sp
 800a16e:	425b      	negs	r3, r3
 800a170:	81cb      	strh	r3, [r1, #14]
 800a172:	0028      	movs	r0, r5
 800a174:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800a176:	f001 fc35 	bl	800b9e4 <_svfiprintf_r>
 800a17a:	1c43      	adds	r3, r0, #1
 800a17c:	da01      	bge.n	800a182 <_vsniprintf_r+0x4a>
 800a17e:	238b      	movs	r3, #139	@ 0x8b
 800a180:	602b      	str	r3, [r5, #0]
 800a182:	2c00      	cmp	r4, #0
 800a184:	d0e3      	beq.n	800a14e <_vsniprintf_r+0x16>
 800a186:	2200      	movs	r2, #0
 800a188:	9b00      	ldr	r3, [sp, #0]
 800a18a:	701a      	strb	r2, [r3, #0]
 800a18c:	e7df      	b.n	800a14e <_vsniprintf_r+0x16>
	...

0800a190 <vsniprintf>:
 800a190:	b513      	push	{r0, r1, r4, lr}
 800a192:	4c04      	ldr	r4, [pc, #16]	@ (800a1a4 <vsniprintf+0x14>)
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	0013      	movs	r3, r2
 800a198:	000a      	movs	r2, r1
 800a19a:	0001      	movs	r1, r0
 800a19c:	6820      	ldr	r0, [r4, #0]
 800a19e:	f7ff ffcb 	bl	800a138 <_vsniprintf_r>
 800a1a2:	bd16      	pop	{r1, r2, r4, pc}
 800a1a4:	20000030 	.word	0x20000030

0800a1a8 <memset>:
 800a1a8:	0003      	movs	r3, r0
 800a1aa:	1882      	adds	r2, r0, r2
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d100      	bne.n	800a1b2 <memset+0xa>
 800a1b0:	4770      	bx	lr
 800a1b2:	7019      	strb	r1, [r3, #0]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	e7f9      	b.n	800a1ac <memset+0x4>

0800a1b8 <_localeconv_r>:
 800a1b8:	4800      	ldr	r0, [pc, #0]	@ (800a1bc <_localeconv_r+0x4>)
 800a1ba:	4770      	bx	lr
 800a1bc:	20000170 	.word	0x20000170

0800a1c0 <_close_r>:
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	b570      	push	{r4, r5, r6, lr}
 800a1c4:	4d06      	ldr	r5, [pc, #24]	@ (800a1e0 <_close_r+0x20>)
 800a1c6:	0004      	movs	r4, r0
 800a1c8:	0008      	movs	r0, r1
 800a1ca:	602b      	str	r3, [r5, #0]
 800a1cc:	f7fa f810 	bl	80041f0 <_close>
 800a1d0:	1c43      	adds	r3, r0, #1
 800a1d2:	d103      	bne.n	800a1dc <_close_r+0x1c>
 800a1d4:	682b      	ldr	r3, [r5, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d000      	beq.n	800a1dc <_close_r+0x1c>
 800a1da:	6023      	str	r3, [r4, #0]
 800a1dc:	bd70      	pop	{r4, r5, r6, pc}
 800a1de:	46c0      	nop			@ (mov r8, r8)
 800a1e0:	20000e70 	.word	0x20000e70

0800a1e4 <_lseek_r>:
 800a1e4:	b570      	push	{r4, r5, r6, lr}
 800a1e6:	0004      	movs	r4, r0
 800a1e8:	0008      	movs	r0, r1
 800a1ea:	0011      	movs	r1, r2
 800a1ec:	001a      	movs	r2, r3
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	4d05      	ldr	r5, [pc, #20]	@ (800a208 <_lseek_r+0x24>)
 800a1f2:	602b      	str	r3, [r5, #0]
 800a1f4:	f7fa f81d 	bl	8004232 <_lseek>
 800a1f8:	1c43      	adds	r3, r0, #1
 800a1fa:	d103      	bne.n	800a204 <_lseek_r+0x20>
 800a1fc:	682b      	ldr	r3, [r5, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d000      	beq.n	800a204 <_lseek_r+0x20>
 800a202:	6023      	str	r3, [r4, #0]
 800a204:	bd70      	pop	{r4, r5, r6, pc}
 800a206:	46c0      	nop			@ (mov r8, r8)
 800a208:	20000e70 	.word	0x20000e70

0800a20c <_read_r>:
 800a20c:	b570      	push	{r4, r5, r6, lr}
 800a20e:	0004      	movs	r4, r0
 800a210:	0008      	movs	r0, r1
 800a212:	0011      	movs	r1, r2
 800a214:	001a      	movs	r2, r3
 800a216:	2300      	movs	r3, #0
 800a218:	4d05      	ldr	r5, [pc, #20]	@ (800a230 <_read_r+0x24>)
 800a21a:	602b      	str	r3, [r5, #0]
 800a21c:	f7f9 ffcb 	bl	80041b6 <_read>
 800a220:	1c43      	adds	r3, r0, #1
 800a222:	d103      	bne.n	800a22c <_read_r+0x20>
 800a224:	682b      	ldr	r3, [r5, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d000      	beq.n	800a22c <_read_r+0x20>
 800a22a:	6023      	str	r3, [r4, #0]
 800a22c:	bd70      	pop	{r4, r5, r6, pc}
 800a22e:	46c0      	nop			@ (mov r8, r8)
 800a230:	20000e70 	.word	0x20000e70

0800a234 <_write_r>:
 800a234:	b570      	push	{r4, r5, r6, lr}
 800a236:	0004      	movs	r4, r0
 800a238:	0008      	movs	r0, r1
 800a23a:	0011      	movs	r1, r2
 800a23c:	001a      	movs	r2, r3
 800a23e:	2300      	movs	r3, #0
 800a240:	4d05      	ldr	r5, [pc, #20]	@ (800a258 <_write_r+0x24>)
 800a242:	602b      	str	r3, [r5, #0]
 800a244:	f7fa f9f6 	bl	8004634 <_write>
 800a248:	1c43      	adds	r3, r0, #1
 800a24a:	d103      	bne.n	800a254 <_write_r+0x20>
 800a24c:	682b      	ldr	r3, [r5, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d000      	beq.n	800a254 <_write_r+0x20>
 800a252:	6023      	str	r3, [r4, #0]
 800a254:	bd70      	pop	{r4, r5, r6, pc}
 800a256:	46c0      	nop			@ (mov r8, r8)
 800a258:	20000e70 	.word	0x20000e70

0800a25c <__errno>:
 800a25c:	4b01      	ldr	r3, [pc, #4]	@ (800a264 <__errno+0x8>)
 800a25e:	6818      	ldr	r0, [r3, #0]
 800a260:	4770      	bx	lr
 800a262:	46c0      	nop			@ (mov r8, r8)
 800a264:	20000030 	.word	0x20000030

0800a268 <__libc_init_array>:
 800a268:	b570      	push	{r4, r5, r6, lr}
 800a26a:	2600      	movs	r6, #0
 800a26c:	4c0c      	ldr	r4, [pc, #48]	@ (800a2a0 <__libc_init_array+0x38>)
 800a26e:	4d0d      	ldr	r5, [pc, #52]	@ (800a2a4 <__libc_init_array+0x3c>)
 800a270:	1b64      	subs	r4, r4, r5
 800a272:	10a4      	asrs	r4, r4, #2
 800a274:	42a6      	cmp	r6, r4
 800a276:	d109      	bne.n	800a28c <__libc_init_array+0x24>
 800a278:	2600      	movs	r6, #0
 800a27a:	f002 f909 	bl	800c490 <_init>
 800a27e:	4c0a      	ldr	r4, [pc, #40]	@ (800a2a8 <__libc_init_array+0x40>)
 800a280:	4d0a      	ldr	r5, [pc, #40]	@ (800a2ac <__libc_init_array+0x44>)
 800a282:	1b64      	subs	r4, r4, r5
 800a284:	10a4      	asrs	r4, r4, #2
 800a286:	42a6      	cmp	r6, r4
 800a288:	d105      	bne.n	800a296 <__libc_init_array+0x2e>
 800a28a:	bd70      	pop	{r4, r5, r6, pc}
 800a28c:	00b3      	lsls	r3, r6, #2
 800a28e:	58eb      	ldr	r3, [r5, r3]
 800a290:	4798      	blx	r3
 800a292:	3601      	adds	r6, #1
 800a294:	e7ee      	b.n	800a274 <__libc_init_array+0xc>
 800a296:	00b3      	lsls	r3, r6, #2
 800a298:	58eb      	ldr	r3, [r5, r3]
 800a29a:	4798      	blx	r3
 800a29c:	3601      	adds	r6, #1
 800a29e:	e7f2      	b.n	800a286 <__libc_init_array+0x1e>
 800a2a0:	0800cdb0 	.word	0x0800cdb0
 800a2a4:	0800cdb0 	.word	0x0800cdb0
 800a2a8:	0800cdb4 	.word	0x0800cdb4
 800a2ac:	0800cdb0 	.word	0x0800cdb0

0800a2b0 <__retarget_lock_init_recursive>:
 800a2b0:	4770      	bx	lr

0800a2b2 <__retarget_lock_acquire_recursive>:
 800a2b2:	4770      	bx	lr

0800a2b4 <__retarget_lock_release_recursive>:
 800a2b4:	4770      	bx	lr

0800a2b6 <memchr>:
 800a2b6:	b2c9      	uxtb	r1, r1
 800a2b8:	1882      	adds	r2, r0, r2
 800a2ba:	4290      	cmp	r0, r2
 800a2bc:	d101      	bne.n	800a2c2 <memchr+0xc>
 800a2be:	2000      	movs	r0, #0
 800a2c0:	4770      	bx	lr
 800a2c2:	7803      	ldrb	r3, [r0, #0]
 800a2c4:	428b      	cmp	r3, r1
 800a2c6:	d0fb      	beq.n	800a2c0 <memchr+0xa>
 800a2c8:	3001      	adds	r0, #1
 800a2ca:	e7f6      	b.n	800a2ba <memchr+0x4>

0800a2cc <quorem>:
 800a2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2ce:	6902      	ldr	r2, [r0, #16]
 800a2d0:	690f      	ldr	r7, [r1, #16]
 800a2d2:	b087      	sub	sp, #28
 800a2d4:	0006      	movs	r6, r0
 800a2d6:	000b      	movs	r3, r1
 800a2d8:	2000      	movs	r0, #0
 800a2da:	9102      	str	r1, [sp, #8]
 800a2dc:	42ba      	cmp	r2, r7
 800a2de:	db6d      	blt.n	800a3bc <quorem+0xf0>
 800a2e0:	3f01      	subs	r7, #1
 800a2e2:	00bc      	lsls	r4, r7, #2
 800a2e4:	3314      	adds	r3, #20
 800a2e6:	9305      	str	r3, [sp, #20]
 800a2e8:	191b      	adds	r3, r3, r4
 800a2ea:	9303      	str	r3, [sp, #12]
 800a2ec:	0033      	movs	r3, r6
 800a2ee:	3314      	adds	r3, #20
 800a2f0:	191c      	adds	r4, r3, r4
 800a2f2:	9301      	str	r3, [sp, #4]
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	9304      	str	r3, [sp, #16]
 800a2f8:	9b03      	ldr	r3, [sp, #12]
 800a2fa:	9804      	ldr	r0, [sp, #16]
 800a2fc:	681d      	ldr	r5, [r3, #0]
 800a2fe:	3501      	adds	r5, #1
 800a300:	0029      	movs	r1, r5
 800a302:	f7f5 ff1d 	bl	8000140 <__udivsi3>
 800a306:	9b04      	ldr	r3, [sp, #16]
 800a308:	9000      	str	r0, [sp, #0]
 800a30a:	42ab      	cmp	r3, r5
 800a30c:	d32b      	bcc.n	800a366 <quorem+0x9a>
 800a30e:	9b05      	ldr	r3, [sp, #20]
 800a310:	9d01      	ldr	r5, [sp, #4]
 800a312:	469c      	mov	ip, r3
 800a314:	2300      	movs	r3, #0
 800a316:	9305      	str	r3, [sp, #20]
 800a318:	9304      	str	r3, [sp, #16]
 800a31a:	4662      	mov	r2, ip
 800a31c:	ca08      	ldmia	r2!, {r3}
 800a31e:	6828      	ldr	r0, [r5, #0]
 800a320:	4694      	mov	ip, r2
 800a322:	9a00      	ldr	r2, [sp, #0]
 800a324:	b299      	uxth	r1, r3
 800a326:	4351      	muls	r1, r2
 800a328:	9a05      	ldr	r2, [sp, #20]
 800a32a:	0c1b      	lsrs	r3, r3, #16
 800a32c:	1889      	adds	r1, r1, r2
 800a32e:	9a00      	ldr	r2, [sp, #0]
 800a330:	4353      	muls	r3, r2
 800a332:	0c0a      	lsrs	r2, r1, #16
 800a334:	189b      	adds	r3, r3, r2
 800a336:	0c1a      	lsrs	r2, r3, #16
 800a338:	b289      	uxth	r1, r1
 800a33a:	9205      	str	r2, [sp, #20]
 800a33c:	b282      	uxth	r2, r0
 800a33e:	1a52      	subs	r2, r2, r1
 800a340:	9904      	ldr	r1, [sp, #16]
 800a342:	0c00      	lsrs	r0, r0, #16
 800a344:	1852      	adds	r2, r2, r1
 800a346:	b29b      	uxth	r3, r3
 800a348:	1411      	asrs	r1, r2, #16
 800a34a:	1ac3      	subs	r3, r0, r3
 800a34c:	185b      	adds	r3, r3, r1
 800a34e:	1419      	asrs	r1, r3, #16
 800a350:	b292      	uxth	r2, r2
 800a352:	041b      	lsls	r3, r3, #16
 800a354:	431a      	orrs	r2, r3
 800a356:	9b03      	ldr	r3, [sp, #12]
 800a358:	9104      	str	r1, [sp, #16]
 800a35a:	c504      	stmia	r5!, {r2}
 800a35c:	4563      	cmp	r3, ip
 800a35e:	d2dc      	bcs.n	800a31a <quorem+0x4e>
 800a360:	6823      	ldr	r3, [r4, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d030      	beq.n	800a3c8 <quorem+0xfc>
 800a366:	0030      	movs	r0, r6
 800a368:	9902      	ldr	r1, [sp, #8]
 800a36a:	f001 f9c5 	bl	800b6f8 <__mcmp>
 800a36e:	2800      	cmp	r0, #0
 800a370:	db23      	blt.n	800a3ba <quorem+0xee>
 800a372:	0034      	movs	r4, r6
 800a374:	2500      	movs	r5, #0
 800a376:	9902      	ldr	r1, [sp, #8]
 800a378:	3414      	adds	r4, #20
 800a37a:	3114      	adds	r1, #20
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	c901      	ldmia	r1!, {r0}
 800a380:	9302      	str	r3, [sp, #8]
 800a382:	466b      	mov	r3, sp
 800a384:	891b      	ldrh	r3, [r3, #8]
 800a386:	b282      	uxth	r2, r0
 800a388:	1a9a      	subs	r2, r3, r2
 800a38a:	9b02      	ldr	r3, [sp, #8]
 800a38c:	1952      	adds	r2, r2, r5
 800a38e:	0c00      	lsrs	r0, r0, #16
 800a390:	0c1b      	lsrs	r3, r3, #16
 800a392:	1a1b      	subs	r3, r3, r0
 800a394:	1410      	asrs	r0, r2, #16
 800a396:	181b      	adds	r3, r3, r0
 800a398:	141d      	asrs	r5, r3, #16
 800a39a:	b292      	uxth	r2, r2
 800a39c:	041b      	lsls	r3, r3, #16
 800a39e:	431a      	orrs	r2, r3
 800a3a0:	9b03      	ldr	r3, [sp, #12]
 800a3a2:	c404      	stmia	r4!, {r2}
 800a3a4:	428b      	cmp	r3, r1
 800a3a6:	d2e9      	bcs.n	800a37c <quorem+0xb0>
 800a3a8:	9a01      	ldr	r2, [sp, #4]
 800a3aa:	00bb      	lsls	r3, r7, #2
 800a3ac:	18d3      	adds	r3, r2, r3
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	2a00      	cmp	r2, #0
 800a3b2:	d013      	beq.n	800a3dc <quorem+0x110>
 800a3b4:	9b00      	ldr	r3, [sp, #0]
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	9300      	str	r3, [sp, #0]
 800a3ba:	9800      	ldr	r0, [sp, #0]
 800a3bc:	b007      	add	sp, #28
 800a3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3c0:	6823      	ldr	r3, [r4, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d104      	bne.n	800a3d0 <quorem+0x104>
 800a3c6:	3f01      	subs	r7, #1
 800a3c8:	9b01      	ldr	r3, [sp, #4]
 800a3ca:	3c04      	subs	r4, #4
 800a3cc:	42a3      	cmp	r3, r4
 800a3ce:	d3f7      	bcc.n	800a3c0 <quorem+0xf4>
 800a3d0:	6137      	str	r7, [r6, #16]
 800a3d2:	e7c8      	b.n	800a366 <quorem+0x9a>
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	2a00      	cmp	r2, #0
 800a3d8:	d104      	bne.n	800a3e4 <quorem+0x118>
 800a3da:	3f01      	subs	r7, #1
 800a3dc:	9a01      	ldr	r2, [sp, #4]
 800a3de:	3b04      	subs	r3, #4
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d3f7      	bcc.n	800a3d4 <quorem+0x108>
 800a3e4:	6137      	str	r7, [r6, #16]
 800a3e6:	e7e5      	b.n	800a3b4 <quorem+0xe8>

0800a3e8 <_dtoa_r>:
 800a3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3ea:	0014      	movs	r4, r2
 800a3ec:	001d      	movs	r5, r3
 800a3ee:	69c6      	ldr	r6, [r0, #28]
 800a3f0:	b09d      	sub	sp, #116	@ 0x74
 800a3f2:	940a      	str	r4, [sp, #40]	@ 0x28
 800a3f4:	950b      	str	r5, [sp, #44]	@ 0x2c
 800a3f6:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800a3f8:	9003      	str	r0, [sp, #12]
 800a3fa:	2e00      	cmp	r6, #0
 800a3fc:	d10f      	bne.n	800a41e <_dtoa_r+0x36>
 800a3fe:	2010      	movs	r0, #16
 800a400:	f000 fe30 	bl	800b064 <malloc>
 800a404:	9b03      	ldr	r3, [sp, #12]
 800a406:	1e02      	subs	r2, r0, #0
 800a408:	61d8      	str	r0, [r3, #28]
 800a40a:	d104      	bne.n	800a416 <_dtoa_r+0x2e>
 800a40c:	21ef      	movs	r1, #239	@ 0xef
 800a40e:	4bc7      	ldr	r3, [pc, #796]	@ (800a72c <_dtoa_r+0x344>)
 800a410:	48c7      	ldr	r0, [pc, #796]	@ (800a730 <_dtoa_r+0x348>)
 800a412:	f001 feab 	bl	800c16c <__assert_func>
 800a416:	6046      	str	r6, [r0, #4]
 800a418:	6086      	str	r6, [r0, #8]
 800a41a:	6006      	str	r6, [r0, #0]
 800a41c:	60c6      	str	r6, [r0, #12]
 800a41e:	9b03      	ldr	r3, [sp, #12]
 800a420:	69db      	ldr	r3, [r3, #28]
 800a422:	6819      	ldr	r1, [r3, #0]
 800a424:	2900      	cmp	r1, #0
 800a426:	d00b      	beq.n	800a440 <_dtoa_r+0x58>
 800a428:	685a      	ldr	r2, [r3, #4]
 800a42a:	2301      	movs	r3, #1
 800a42c:	4093      	lsls	r3, r2
 800a42e:	604a      	str	r2, [r1, #4]
 800a430:	608b      	str	r3, [r1, #8]
 800a432:	9803      	ldr	r0, [sp, #12]
 800a434:	f000 ff16 	bl	800b264 <_Bfree>
 800a438:	2200      	movs	r2, #0
 800a43a:	9b03      	ldr	r3, [sp, #12]
 800a43c:	69db      	ldr	r3, [r3, #28]
 800a43e:	601a      	str	r2, [r3, #0]
 800a440:	2d00      	cmp	r5, #0
 800a442:	da1e      	bge.n	800a482 <_dtoa_r+0x9a>
 800a444:	2301      	movs	r3, #1
 800a446:	603b      	str	r3, [r7, #0]
 800a448:	006b      	lsls	r3, r5, #1
 800a44a:	085b      	lsrs	r3, r3, #1
 800a44c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a44e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a450:	4bb8      	ldr	r3, [pc, #736]	@ (800a734 <_dtoa_r+0x34c>)
 800a452:	4ab8      	ldr	r2, [pc, #736]	@ (800a734 <_dtoa_r+0x34c>)
 800a454:	403b      	ands	r3, r7
 800a456:	4293      	cmp	r3, r2
 800a458:	d116      	bne.n	800a488 <_dtoa_r+0xa0>
 800a45a:	4bb7      	ldr	r3, [pc, #732]	@ (800a738 <_dtoa_r+0x350>)
 800a45c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a45e:	6013      	str	r3, [r2, #0]
 800a460:	033b      	lsls	r3, r7, #12
 800a462:	0b1b      	lsrs	r3, r3, #12
 800a464:	4323      	orrs	r3, r4
 800a466:	d101      	bne.n	800a46c <_dtoa_r+0x84>
 800a468:	f000 fd83 	bl	800af72 <_dtoa_r+0xb8a>
 800a46c:	4bb3      	ldr	r3, [pc, #716]	@ (800a73c <_dtoa_r+0x354>)
 800a46e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a470:	9308      	str	r3, [sp, #32]
 800a472:	2a00      	cmp	r2, #0
 800a474:	d002      	beq.n	800a47c <_dtoa_r+0x94>
 800a476:	4bb2      	ldr	r3, [pc, #712]	@ (800a740 <_dtoa_r+0x358>)
 800a478:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a47a:	6013      	str	r3, [r2, #0]
 800a47c:	9808      	ldr	r0, [sp, #32]
 800a47e:	b01d      	add	sp, #116	@ 0x74
 800a480:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a482:	2300      	movs	r3, #0
 800a484:	603b      	str	r3, [r7, #0]
 800a486:	e7e2      	b.n	800a44e <_dtoa_r+0x66>
 800a488:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a48a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a48c:	9212      	str	r2, [sp, #72]	@ 0x48
 800a48e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a490:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a492:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a494:	2200      	movs	r2, #0
 800a496:	2300      	movs	r3, #0
 800a498:	f7f5 ffd8 	bl	800044c <__aeabi_dcmpeq>
 800a49c:	1e06      	subs	r6, r0, #0
 800a49e:	d00b      	beq.n	800a4b8 <_dtoa_r+0xd0>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a4a4:	6013      	str	r3, [r2, #0]
 800a4a6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d002      	beq.n	800a4b2 <_dtoa_r+0xca>
 800a4ac:	4ba5      	ldr	r3, [pc, #660]	@ (800a744 <_dtoa_r+0x35c>)
 800a4ae:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a4b0:	6013      	str	r3, [r2, #0]
 800a4b2:	4ba5      	ldr	r3, [pc, #660]	@ (800a748 <_dtoa_r+0x360>)
 800a4b4:	9308      	str	r3, [sp, #32]
 800a4b6:	e7e1      	b.n	800a47c <_dtoa_r+0x94>
 800a4b8:	ab1a      	add	r3, sp, #104	@ 0x68
 800a4ba:	9301      	str	r3, [sp, #4]
 800a4bc:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a4be:	9300      	str	r3, [sp, #0]
 800a4c0:	9803      	ldr	r0, [sp, #12]
 800a4c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a4c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a4c6:	f001 f9cd 	bl	800b864 <__d2b>
 800a4ca:	007a      	lsls	r2, r7, #1
 800a4cc:	9005      	str	r0, [sp, #20]
 800a4ce:	0d52      	lsrs	r2, r2, #21
 800a4d0:	d100      	bne.n	800a4d4 <_dtoa_r+0xec>
 800a4d2:	e07b      	b.n	800a5cc <_dtoa_r+0x1e4>
 800a4d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a4d6:	9618      	str	r6, [sp, #96]	@ 0x60
 800a4d8:	0319      	lsls	r1, r3, #12
 800a4da:	4b9c      	ldr	r3, [pc, #624]	@ (800a74c <_dtoa_r+0x364>)
 800a4dc:	0b09      	lsrs	r1, r1, #12
 800a4de:	430b      	orrs	r3, r1
 800a4e0:	499b      	ldr	r1, [pc, #620]	@ (800a750 <_dtoa_r+0x368>)
 800a4e2:	1857      	adds	r7, r2, r1
 800a4e4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a4e6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a4e8:	0019      	movs	r1, r3
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	4b99      	ldr	r3, [pc, #612]	@ (800a754 <_dtoa_r+0x36c>)
 800a4ee:	f7f7 fff5 	bl	80024dc <__aeabi_dsub>
 800a4f2:	4a99      	ldr	r2, [pc, #612]	@ (800a758 <_dtoa_r+0x370>)
 800a4f4:	4b99      	ldr	r3, [pc, #612]	@ (800a75c <_dtoa_r+0x374>)
 800a4f6:	f7f7 fd29 	bl	8001f4c <__aeabi_dmul>
 800a4fa:	4a99      	ldr	r2, [pc, #612]	@ (800a760 <_dtoa_r+0x378>)
 800a4fc:	4b99      	ldr	r3, [pc, #612]	@ (800a764 <_dtoa_r+0x37c>)
 800a4fe:	f7f6 fd7d 	bl	8000ffc <__aeabi_dadd>
 800a502:	0004      	movs	r4, r0
 800a504:	0038      	movs	r0, r7
 800a506:	000d      	movs	r5, r1
 800a508:	f7f8 fbe2 	bl	8002cd0 <__aeabi_i2d>
 800a50c:	4a96      	ldr	r2, [pc, #600]	@ (800a768 <_dtoa_r+0x380>)
 800a50e:	4b97      	ldr	r3, [pc, #604]	@ (800a76c <_dtoa_r+0x384>)
 800a510:	f7f7 fd1c 	bl	8001f4c <__aeabi_dmul>
 800a514:	0002      	movs	r2, r0
 800a516:	000b      	movs	r3, r1
 800a518:	0020      	movs	r0, r4
 800a51a:	0029      	movs	r1, r5
 800a51c:	f7f6 fd6e 	bl	8000ffc <__aeabi_dadd>
 800a520:	0004      	movs	r4, r0
 800a522:	000d      	movs	r5, r1
 800a524:	f7f8 fb98 	bl	8002c58 <__aeabi_d2iz>
 800a528:	2200      	movs	r2, #0
 800a52a:	9004      	str	r0, [sp, #16]
 800a52c:	2300      	movs	r3, #0
 800a52e:	0020      	movs	r0, r4
 800a530:	0029      	movs	r1, r5
 800a532:	f7f5 ff91 	bl	8000458 <__aeabi_dcmplt>
 800a536:	2800      	cmp	r0, #0
 800a538:	d00b      	beq.n	800a552 <_dtoa_r+0x16a>
 800a53a:	9804      	ldr	r0, [sp, #16]
 800a53c:	f7f8 fbc8 	bl	8002cd0 <__aeabi_i2d>
 800a540:	002b      	movs	r3, r5
 800a542:	0022      	movs	r2, r4
 800a544:	f7f5 ff82 	bl	800044c <__aeabi_dcmpeq>
 800a548:	4243      	negs	r3, r0
 800a54a:	4158      	adcs	r0, r3
 800a54c:	9b04      	ldr	r3, [sp, #16]
 800a54e:	1a1b      	subs	r3, r3, r0
 800a550:	9304      	str	r3, [sp, #16]
 800a552:	2301      	movs	r3, #1
 800a554:	9315      	str	r3, [sp, #84]	@ 0x54
 800a556:	9b04      	ldr	r3, [sp, #16]
 800a558:	2b16      	cmp	r3, #22
 800a55a:	d810      	bhi.n	800a57e <_dtoa_r+0x196>
 800a55c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a55e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a560:	9a04      	ldr	r2, [sp, #16]
 800a562:	4b83      	ldr	r3, [pc, #524]	@ (800a770 <_dtoa_r+0x388>)
 800a564:	00d2      	lsls	r2, r2, #3
 800a566:	189b      	adds	r3, r3, r2
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	f7f5 ff74 	bl	8000458 <__aeabi_dcmplt>
 800a570:	2800      	cmp	r0, #0
 800a572:	d047      	beq.n	800a604 <_dtoa_r+0x21c>
 800a574:	9b04      	ldr	r3, [sp, #16]
 800a576:	3b01      	subs	r3, #1
 800a578:	9304      	str	r3, [sp, #16]
 800a57a:	2300      	movs	r3, #0
 800a57c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a57e:	2200      	movs	r2, #0
 800a580:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800a582:	9206      	str	r2, [sp, #24]
 800a584:	1bdb      	subs	r3, r3, r7
 800a586:	1e5a      	subs	r2, r3, #1
 800a588:	d53e      	bpl.n	800a608 <_dtoa_r+0x220>
 800a58a:	2201      	movs	r2, #1
 800a58c:	1ad3      	subs	r3, r2, r3
 800a58e:	9306      	str	r3, [sp, #24]
 800a590:	2300      	movs	r3, #0
 800a592:	930d      	str	r3, [sp, #52]	@ 0x34
 800a594:	9b04      	ldr	r3, [sp, #16]
 800a596:	2b00      	cmp	r3, #0
 800a598:	db38      	blt.n	800a60c <_dtoa_r+0x224>
 800a59a:	9a04      	ldr	r2, [sp, #16]
 800a59c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a59e:	4694      	mov	ip, r2
 800a5a0:	4463      	add	r3, ip
 800a5a2:	930d      	str	r3, [sp, #52]	@ 0x34
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	9214      	str	r2, [sp, #80]	@ 0x50
 800a5a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a5aa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a5ac:	2401      	movs	r4, #1
 800a5ae:	2b09      	cmp	r3, #9
 800a5b0:	d867      	bhi.n	800a682 <_dtoa_r+0x29a>
 800a5b2:	2b05      	cmp	r3, #5
 800a5b4:	dd02      	ble.n	800a5bc <_dtoa_r+0x1d4>
 800a5b6:	2400      	movs	r4, #0
 800a5b8:	3b04      	subs	r3, #4
 800a5ba:	9322      	str	r3, [sp, #136]	@ 0x88
 800a5bc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a5be:	1e98      	subs	r0, r3, #2
 800a5c0:	2803      	cmp	r0, #3
 800a5c2:	d867      	bhi.n	800a694 <_dtoa_r+0x2ac>
 800a5c4:	f7f5 fda8 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a5c8:	5b383a2b 	.word	0x5b383a2b
 800a5cc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a5ce:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800a5d0:	18f6      	adds	r6, r6, r3
 800a5d2:	4b68      	ldr	r3, [pc, #416]	@ (800a774 <_dtoa_r+0x38c>)
 800a5d4:	18f2      	adds	r2, r6, r3
 800a5d6:	2a20      	cmp	r2, #32
 800a5d8:	dd0f      	ble.n	800a5fa <_dtoa_r+0x212>
 800a5da:	2340      	movs	r3, #64	@ 0x40
 800a5dc:	1a9b      	subs	r3, r3, r2
 800a5de:	409f      	lsls	r7, r3
 800a5e0:	4b65      	ldr	r3, [pc, #404]	@ (800a778 <_dtoa_r+0x390>)
 800a5e2:	0038      	movs	r0, r7
 800a5e4:	18f3      	adds	r3, r6, r3
 800a5e6:	40dc      	lsrs	r4, r3
 800a5e8:	4320      	orrs	r0, r4
 800a5ea:	f7f8 fb9f 	bl	8002d2c <__aeabi_ui2d>
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	4b62      	ldr	r3, [pc, #392]	@ (800a77c <_dtoa_r+0x394>)
 800a5f2:	1e77      	subs	r7, r6, #1
 800a5f4:	18cb      	adds	r3, r1, r3
 800a5f6:	9218      	str	r2, [sp, #96]	@ 0x60
 800a5f8:	e776      	b.n	800a4e8 <_dtoa_r+0x100>
 800a5fa:	2320      	movs	r3, #32
 800a5fc:	0020      	movs	r0, r4
 800a5fe:	1a9b      	subs	r3, r3, r2
 800a600:	4098      	lsls	r0, r3
 800a602:	e7f2      	b.n	800a5ea <_dtoa_r+0x202>
 800a604:	9015      	str	r0, [sp, #84]	@ 0x54
 800a606:	e7ba      	b.n	800a57e <_dtoa_r+0x196>
 800a608:	920d      	str	r2, [sp, #52]	@ 0x34
 800a60a:	e7c3      	b.n	800a594 <_dtoa_r+0x1ac>
 800a60c:	9b06      	ldr	r3, [sp, #24]
 800a60e:	9a04      	ldr	r2, [sp, #16]
 800a610:	1a9b      	subs	r3, r3, r2
 800a612:	9306      	str	r3, [sp, #24]
 800a614:	4253      	negs	r3, r2
 800a616:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a618:	2300      	movs	r3, #0
 800a61a:	9314      	str	r3, [sp, #80]	@ 0x50
 800a61c:	e7c5      	b.n	800a5aa <_dtoa_r+0x1c2>
 800a61e:	2300      	movs	r3, #0
 800a620:	9310      	str	r3, [sp, #64]	@ 0x40
 800a622:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a624:	930e      	str	r3, [sp, #56]	@ 0x38
 800a626:	9309      	str	r3, [sp, #36]	@ 0x24
 800a628:	2b00      	cmp	r3, #0
 800a62a:	dc13      	bgt.n	800a654 <_dtoa_r+0x26c>
 800a62c:	2301      	movs	r3, #1
 800a62e:	001a      	movs	r2, r3
 800a630:	930e      	str	r3, [sp, #56]	@ 0x38
 800a632:	9309      	str	r3, [sp, #36]	@ 0x24
 800a634:	9223      	str	r2, [sp, #140]	@ 0x8c
 800a636:	e00d      	b.n	800a654 <_dtoa_r+0x26c>
 800a638:	2301      	movs	r3, #1
 800a63a:	e7f1      	b.n	800a620 <_dtoa_r+0x238>
 800a63c:	2300      	movs	r3, #0
 800a63e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a640:	9310      	str	r3, [sp, #64]	@ 0x40
 800a642:	4694      	mov	ip, r2
 800a644:	9b04      	ldr	r3, [sp, #16]
 800a646:	4463      	add	r3, ip
 800a648:	930e      	str	r3, [sp, #56]	@ 0x38
 800a64a:	3301      	adds	r3, #1
 800a64c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a64e:	2b00      	cmp	r3, #0
 800a650:	dc00      	bgt.n	800a654 <_dtoa_r+0x26c>
 800a652:	2301      	movs	r3, #1
 800a654:	9a03      	ldr	r2, [sp, #12]
 800a656:	2100      	movs	r1, #0
 800a658:	69d0      	ldr	r0, [r2, #28]
 800a65a:	2204      	movs	r2, #4
 800a65c:	0015      	movs	r5, r2
 800a65e:	3514      	adds	r5, #20
 800a660:	429d      	cmp	r5, r3
 800a662:	d91b      	bls.n	800a69c <_dtoa_r+0x2b4>
 800a664:	6041      	str	r1, [r0, #4]
 800a666:	9803      	ldr	r0, [sp, #12]
 800a668:	f000 fdb8 	bl	800b1dc <_Balloc>
 800a66c:	9008      	str	r0, [sp, #32]
 800a66e:	2800      	cmp	r0, #0
 800a670:	d117      	bne.n	800a6a2 <_dtoa_r+0x2ba>
 800a672:	21b0      	movs	r1, #176	@ 0xb0
 800a674:	4b42      	ldr	r3, [pc, #264]	@ (800a780 <_dtoa_r+0x398>)
 800a676:	482e      	ldr	r0, [pc, #184]	@ (800a730 <_dtoa_r+0x348>)
 800a678:	9a08      	ldr	r2, [sp, #32]
 800a67a:	31ff      	adds	r1, #255	@ 0xff
 800a67c:	e6c9      	b.n	800a412 <_dtoa_r+0x2a>
 800a67e:	2301      	movs	r3, #1
 800a680:	e7dd      	b.n	800a63e <_dtoa_r+0x256>
 800a682:	2300      	movs	r3, #0
 800a684:	9410      	str	r4, [sp, #64]	@ 0x40
 800a686:	9322      	str	r3, [sp, #136]	@ 0x88
 800a688:	3b01      	subs	r3, #1
 800a68a:	930e      	str	r3, [sp, #56]	@ 0x38
 800a68c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a68e:	2200      	movs	r2, #0
 800a690:	3313      	adds	r3, #19
 800a692:	e7cf      	b.n	800a634 <_dtoa_r+0x24c>
 800a694:	2301      	movs	r3, #1
 800a696:	9310      	str	r3, [sp, #64]	@ 0x40
 800a698:	3b02      	subs	r3, #2
 800a69a:	e7f6      	b.n	800a68a <_dtoa_r+0x2a2>
 800a69c:	3101      	adds	r1, #1
 800a69e:	0052      	lsls	r2, r2, #1
 800a6a0:	e7dc      	b.n	800a65c <_dtoa_r+0x274>
 800a6a2:	9b03      	ldr	r3, [sp, #12]
 800a6a4:	9a08      	ldr	r2, [sp, #32]
 800a6a6:	69db      	ldr	r3, [r3, #28]
 800a6a8:	601a      	str	r2, [r3, #0]
 800a6aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6ac:	2b0e      	cmp	r3, #14
 800a6ae:	d900      	bls.n	800a6b2 <_dtoa_r+0x2ca>
 800a6b0:	e0d9      	b.n	800a866 <_dtoa_r+0x47e>
 800a6b2:	2c00      	cmp	r4, #0
 800a6b4:	d100      	bne.n	800a6b8 <_dtoa_r+0x2d0>
 800a6b6:	e0d6      	b.n	800a866 <_dtoa_r+0x47e>
 800a6b8:	9b04      	ldr	r3, [sp, #16]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	dd64      	ble.n	800a788 <_dtoa_r+0x3a0>
 800a6be:	210f      	movs	r1, #15
 800a6c0:	9a04      	ldr	r2, [sp, #16]
 800a6c2:	4b2b      	ldr	r3, [pc, #172]	@ (800a770 <_dtoa_r+0x388>)
 800a6c4:	400a      	ands	r2, r1
 800a6c6:	00d2      	lsls	r2, r2, #3
 800a6c8:	189b      	adds	r3, r3, r2
 800a6ca:	681e      	ldr	r6, [r3, #0]
 800a6cc:	685f      	ldr	r7, [r3, #4]
 800a6ce:	9b04      	ldr	r3, [sp, #16]
 800a6d0:	2402      	movs	r4, #2
 800a6d2:	111d      	asrs	r5, r3, #4
 800a6d4:	05db      	lsls	r3, r3, #23
 800a6d6:	d50a      	bpl.n	800a6ee <_dtoa_r+0x306>
 800a6d8:	4b2a      	ldr	r3, [pc, #168]	@ (800a784 <_dtoa_r+0x39c>)
 800a6da:	400d      	ands	r5, r1
 800a6dc:	6a1a      	ldr	r2, [r3, #32]
 800a6de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6e0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a6e2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a6e4:	f7f6 ffee 	bl	80016c4 <__aeabi_ddiv>
 800a6e8:	900a      	str	r0, [sp, #40]	@ 0x28
 800a6ea:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a6ec:	3401      	adds	r4, #1
 800a6ee:	4b25      	ldr	r3, [pc, #148]	@ (800a784 <_dtoa_r+0x39c>)
 800a6f0:	930c      	str	r3, [sp, #48]	@ 0x30
 800a6f2:	2d00      	cmp	r5, #0
 800a6f4:	d108      	bne.n	800a708 <_dtoa_r+0x320>
 800a6f6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a6f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a6fa:	0032      	movs	r2, r6
 800a6fc:	003b      	movs	r3, r7
 800a6fe:	f7f6 ffe1 	bl	80016c4 <__aeabi_ddiv>
 800a702:	900a      	str	r0, [sp, #40]	@ 0x28
 800a704:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a706:	e05a      	b.n	800a7be <_dtoa_r+0x3d6>
 800a708:	2301      	movs	r3, #1
 800a70a:	421d      	tst	r5, r3
 800a70c:	d009      	beq.n	800a722 <_dtoa_r+0x33a>
 800a70e:	18e4      	adds	r4, r4, r3
 800a710:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a712:	0030      	movs	r0, r6
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	0039      	movs	r1, r7
 800a71a:	f7f7 fc17 	bl	8001f4c <__aeabi_dmul>
 800a71e:	0006      	movs	r6, r0
 800a720:	000f      	movs	r7, r1
 800a722:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a724:	106d      	asrs	r5, r5, #1
 800a726:	3308      	adds	r3, #8
 800a728:	e7e2      	b.n	800a6f0 <_dtoa_r+0x308>
 800a72a:	46c0      	nop			@ (mov r8, r8)
 800a72c:	0800ca79 	.word	0x0800ca79
 800a730:	0800ca90 	.word	0x0800ca90
 800a734:	7ff00000 	.word	0x7ff00000
 800a738:	0000270f 	.word	0x0000270f
 800a73c:	0800ca75 	.word	0x0800ca75
 800a740:	0800ca78 	.word	0x0800ca78
 800a744:	0800ca49 	.word	0x0800ca49
 800a748:	0800ca48 	.word	0x0800ca48
 800a74c:	3ff00000 	.word	0x3ff00000
 800a750:	fffffc01 	.word	0xfffffc01
 800a754:	3ff80000 	.word	0x3ff80000
 800a758:	636f4361 	.word	0x636f4361
 800a75c:	3fd287a7 	.word	0x3fd287a7
 800a760:	8b60c8b3 	.word	0x8b60c8b3
 800a764:	3fc68a28 	.word	0x3fc68a28
 800a768:	509f79fb 	.word	0x509f79fb
 800a76c:	3fd34413 	.word	0x3fd34413
 800a770:	0800cb88 	.word	0x0800cb88
 800a774:	00000432 	.word	0x00000432
 800a778:	00000412 	.word	0x00000412
 800a77c:	fe100000 	.word	0xfe100000
 800a780:	0800cae8 	.word	0x0800cae8
 800a784:	0800cb60 	.word	0x0800cb60
 800a788:	9b04      	ldr	r3, [sp, #16]
 800a78a:	2402      	movs	r4, #2
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d016      	beq.n	800a7be <_dtoa_r+0x3d6>
 800a790:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a792:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a794:	220f      	movs	r2, #15
 800a796:	425d      	negs	r5, r3
 800a798:	402a      	ands	r2, r5
 800a79a:	4bd7      	ldr	r3, [pc, #860]	@ (800aaf8 <_dtoa_r+0x710>)
 800a79c:	00d2      	lsls	r2, r2, #3
 800a79e:	189b      	adds	r3, r3, r2
 800a7a0:	681a      	ldr	r2, [r3, #0]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	f7f7 fbd2 	bl	8001f4c <__aeabi_dmul>
 800a7a8:	2701      	movs	r7, #1
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	900a      	str	r0, [sp, #40]	@ 0x28
 800a7ae:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a7b0:	4ed2      	ldr	r6, [pc, #840]	@ (800aafc <_dtoa_r+0x714>)
 800a7b2:	112d      	asrs	r5, r5, #4
 800a7b4:	2d00      	cmp	r5, #0
 800a7b6:	d000      	beq.n	800a7ba <_dtoa_r+0x3d2>
 800a7b8:	e0ba      	b.n	800a930 <_dtoa_r+0x548>
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d1a1      	bne.n	800a702 <_dtoa_r+0x31a>
 800a7be:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a7c0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a7c2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d100      	bne.n	800a7ca <_dtoa_r+0x3e2>
 800a7c8:	e0bd      	b.n	800a946 <_dtoa_r+0x55e>
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	0030      	movs	r0, r6
 800a7ce:	0039      	movs	r1, r7
 800a7d0:	4bcb      	ldr	r3, [pc, #812]	@ (800ab00 <_dtoa_r+0x718>)
 800a7d2:	f7f5 fe41 	bl	8000458 <__aeabi_dcmplt>
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	d100      	bne.n	800a7dc <_dtoa_r+0x3f4>
 800a7da:	e0b4      	b.n	800a946 <_dtoa_r+0x55e>
 800a7dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d100      	bne.n	800a7e4 <_dtoa_r+0x3fc>
 800a7e2:	e0b0      	b.n	800a946 <_dtoa_r+0x55e>
 800a7e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	dd39      	ble.n	800a85e <_dtoa_r+0x476>
 800a7ea:	9b04      	ldr	r3, [sp, #16]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	3b01      	subs	r3, #1
 800a7f0:	930c      	str	r3, [sp, #48]	@ 0x30
 800a7f2:	0030      	movs	r0, r6
 800a7f4:	4bc3      	ldr	r3, [pc, #780]	@ (800ab04 <_dtoa_r+0x71c>)
 800a7f6:	0039      	movs	r1, r7
 800a7f8:	f7f7 fba8 	bl	8001f4c <__aeabi_dmul>
 800a7fc:	900a      	str	r0, [sp, #40]	@ 0x28
 800a7fe:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a800:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a802:	3401      	adds	r4, #1
 800a804:	0020      	movs	r0, r4
 800a806:	9311      	str	r3, [sp, #68]	@ 0x44
 800a808:	f7f8 fa62 	bl	8002cd0 <__aeabi_i2d>
 800a80c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a80e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a810:	f7f7 fb9c 	bl	8001f4c <__aeabi_dmul>
 800a814:	4bbc      	ldr	r3, [pc, #752]	@ (800ab08 <_dtoa_r+0x720>)
 800a816:	2200      	movs	r2, #0
 800a818:	f7f6 fbf0 	bl	8000ffc <__aeabi_dadd>
 800a81c:	4bbb      	ldr	r3, [pc, #748]	@ (800ab0c <_dtoa_r+0x724>)
 800a81e:	0006      	movs	r6, r0
 800a820:	18cf      	adds	r7, r1, r3
 800a822:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a824:	2b00      	cmp	r3, #0
 800a826:	d000      	beq.n	800a82a <_dtoa_r+0x442>
 800a828:	e091      	b.n	800a94e <_dtoa_r+0x566>
 800a82a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a82c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a82e:	2200      	movs	r2, #0
 800a830:	4bb7      	ldr	r3, [pc, #732]	@ (800ab10 <_dtoa_r+0x728>)
 800a832:	f7f7 fe53 	bl	80024dc <__aeabi_dsub>
 800a836:	0032      	movs	r2, r6
 800a838:	003b      	movs	r3, r7
 800a83a:	0004      	movs	r4, r0
 800a83c:	000d      	movs	r5, r1
 800a83e:	f7f5 fe1f 	bl	8000480 <__aeabi_dcmpgt>
 800a842:	2800      	cmp	r0, #0
 800a844:	d000      	beq.n	800a848 <_dtoa_r+0x460>
 800a846:	e29d      	b.n	800ad84 <_dtoa_r+0x99c>
 800a848:	2180      	movs	r1, #128	@ 0x80
 800a84a:	0609      	lsls	r1, r1, #24
 800a84c:	187b      	adds	r3, r7, r1
 800a84e:	0032      	movs	r2, r6
 800a850:	0020      	movs	r0, r4
 800a852:	0029      	movs	r1, r5
 800a854:	f7f5 fe00 	bl	8000458 <__aeabi_dcmplt>
 800a858:	2800      	cmp	r0, #0
 800a85a:	d000      	beq.n	800a85e <_dtoa_r+0x476>
 800a85c:	e130      	b.n	800aac0 <_dtoa_r+0x6d8>
 800a85e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a860:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800a862:	930a      	str	r3, [sp, #40]	@ 0x28
 800a864:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a866:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a868:	2b00      	cmp	r3, #0
 800a86a:	da00      	bge.n	800a86e <_dtoa_r+0x486>
 800a86c:	e177      	b.n	800ab5e <_dtoa_r+0x776>
 800a86e:	9a04      	ldr	r2, [sp, #16]
 800a870:	2a0e      	cmp	r2, #14
 800a872:	dd00      	ble.n	800a876 <_dtoa_r+0x48e>
 800a874:	e173      	b.n	800ab5e <_dtoa_r+0x776>
 800a876:	4ba0      	ldr	r3, [pc, #640]	@ (800aaf8 <_dtoa_r+0x710>)
 800a878:	00d2      	lsls	r2, r2, #3
 800a87a:	189b      	adds	r3, r3, r2
 800a87c:	685c      	ldr	r4, [r3, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	9306      	str	r3, [sp, #24]
 800a882:	9407      	str	r4, [sp, #28]
 800a884:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a886:	2b00      	cmp	r3, #0
 800a888:	da03      	bge.n	800a892 <_dtoa_r+0x4aa>
 800a88a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	dc00      	bgt.n	800a892 <_dtoa_r+0x4aa>
 800a890:	e106      	b.n	800aaa0 <_dtoa_r+0x6b8>
 800a892:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a894:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a898:	9d08      	ldr	r5, [sp, #32]
 800a89a:	3b01      	subs	r3, #1
 800a89c:	195b      	adds	r3, r3, r5
 800a89e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a8a0:	9a06      	ldr	r2, [sp, #24]
 800a8a2:	9b07      	ldr	r3, [sp, #28]
 800a8a4:	0030      	movs	r0, r6
 800a8a6:	0039      	movs	r1, r7
 800a8a8:	f7f6 ff0c 	bl	80016c4 <__aeabi_ddiv>
 800a8ac:	f7f8 f9d4 	bl	8002c58 <__aeabi_d2iz>
 800a8b0:	9009      	str	r0, [sp, #36]	@ 0x24
 800a8b2:	f7f8 fa0d 	bl	8002cd0 <__aeabi_i2d>
 800a8b6:	9a06      	ldr	r2, [sp, #24]
 800a8b8:	9b07      	ldr	r3, [sp, #28]
 800a8ba:	f7f7 fb47 	bl	8001f4c <__aeabi_dmul>
 800a8be:	0002      	movs	r2, r0
 800a8c0:	000b      	movs	r3, r1
 800a8c2:	0030      	movs	r0, r6
 800a8c4:	0039      	movs	r1, r7
 800a8c6:	f7f7 fe09 	bl	80024dc <__aeabi_dsub>
 800a8ca:	002b      	movs	r3, r5
 800a8cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8ce:	3501      	adds	r5, #1
 800a8d0:	3230      	adds	r2, #48	@ 0x30
 800a8d2:	701a      	strb	r2, [r3, #0]
 800a8d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a8d6:	002c      	movs	r4, r5
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d000      	beq.n	800a8de <_dtoa_r+0x4f6>
 800a8dc:	e131      	b.n	800ab42 <_dtoa_r+0x75a>
 800a8de:	0002      	movs	r2, r0
 800a8e0:	000b      	movs	r3, r1
 800a8e2:	f7f6 fb8b 	bl	8000ffc <__aeabi_dadd>
 800a8e6:	9a06      	ldr	r2, [sp, #24]
 800a8e8:	9b07      	ldr	r3, [sp, #28]
 800a8ea:	0006      	movs	r6, r0
 800a8ec:	000f      	movs	r7, r1
 800a8ee:	f7f5 fdc7 	bl	8000480 <__aeabi_dcmpgt>
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	d000      	beq.n	800a8f8 <_dtoa_r+0x510>
 800a8f6:	e10f      	b.n	800ab18 <_dtoa_r+0x730>
 800a8f8:	9a06      	ldr	r2, [sp, #24]
 800a8fa:	9b07      	ldr	r3, [sp, #28]
 800a8fc:	0030      	movs	r0, r6
 800a8fe:	0039      	movs	r1, r7
 800a900:	f7f5 fda4 	bl	800044c <__aeabi_dcmpeq>
 800a904:	2800      	cmp	r0, #0
 800a906:	d003      	beq.n	800a910 <_dtoa_r+0x528>
 800a908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a90a:	07dd      	lsls	r5, r3, #31
 800a90c:	d500      	bpl.n	800a910 <_dtoa_r+0x528>
 800a90e:	e103      	b.n	800ab18 <_dtoa_r+0x730>
 800a910:	9905      	ldr	r1, [sp, #20]
 800a912:	9803      	ldr	r0, [sp, #12]
 800a914:	f000 fca6 	bl	800b264 <_Bfree>
 800a918:	2300      	movs	r3, #0
 800a91a:	7023      	strb	r3, [r4, #0]
 800a91c:	9b04      	ldr	r3, [sp, #16]
 800a91e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a920:	3301      	adds	r3, #1
 800a922:	6013      	str	r3, [r2, #0]
 800a924:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800a926:	2b00      	cmp	r3, #0
 800a928:	d100      	bne.n	800a92c <_dtoa_r+0x544>
 800a92a:	e5a7      	b.n	800a47c <_dtoa_r+0x94>
 800a92c:	601c      	str	r4, [r3, #0]
 800a92e:	e5a5      	b.n	800a47c <_dtoa_r+0x94>
 800a930:	423d      	tst	r5, r7
 800a932:	d005      	beq.n	800a940 <_dtoa_r+0x558>
 800a934:	6832      	ldr	r2, [r6, #0]
 800a936:	6873      	ldr	r3, [r6, #4]
 800a938:	f7f7 fb08 	bl	8001f4c <__aeabi_dmul>
 800a93c:	003b      	movs	r3, r7
 800a93e:	3401      	adds	r4, #1
 800a940:	106d      	asrs	r5, r5, #1
 800a942:	3608      	adds	r6, #8
 800a944:	e736      	b.n	800a7b4 <_dtoa_r+0x3cc>
 800a946:	9b04      	ldr	r3, [sp, #16]
 800a948:	930c      	str	r3, [sp, #48]	@ 0x30
 800a94a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a94c:	e75a      	b.n	800a804 <_dtoa_r+0x41c>
 800a94e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a950:	4b69      	ldr	r3, [pc, #420]	@ (800aaf8 <_dtoa_r+0x710>)
 800a952:	3a01      	subs	r2, #1
 800a954:	00d2      	lsls	r2, r2, #3
 800a956:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800a958:	189b      	adds	r3, r3, r2
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	2900      	cmp	r1, #0
 800a960:	d04c      	beq.n	800a9fc <_dtoa_r+0x614>
 800a962:	2000      	movs	r0, #0
 800a964:	496b      	ldr	r1, [pc, #428]	@ (800ab14 <_dtoa_r+0x72c>)
 800a966:	f7f6 fead 	bl	80016c4 <__aeabi_ddiv>
 800a96a:	0032      	movs	r2, r6
 800a96c:	003b      	movs	r3, r7
 800a96e:	f7f7 fdb5 	bl	80024dc <__aeabi_dsub>
 800a972:	9a08      	ldr	r2, [sp, #32]
 800a974:	0006      	movs	r6, r0
 800a976:	4694      	mov	ip, r2
 800a978:	000f      	movs	r7, r1
 800a97a:	9b08      	ldr	r3, [sp, #32]
 800a97c:	9316      	str	r3, [sp, #88]	@ 0x58
 800a97e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a980:	4463      	add	r3, ip
 800a982:	9311      	str	r3, [sp, #68]	@ 0x44
 800a984:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a986:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a988:	f7f8 f966 	bl	8002c58 <__aeabi_d2iz>
 800a98c:	0005      	movs	r5, r0
 800a98e:	f7f8 f99f 	bl	8002cd0 <__aeabi_i2d>
 800a992:	0002      	movs	r2, r0
 800a994:	000b      	movs	r3, r1
 800a996:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a998:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a99a:	f7f7 fd9f 	bl	80024dc <__aeabi_dsub>
 800a99e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a9a0:	3530      	adds	r5, #48	@ 0x30
 800a9a2:	1c5c      	adds	r4, r3, #1
 800a9a4:	701d      	strb	r5, [r3, #0]
 800a9a6:	0032      	movs	r2, r6
 800a9a8:	003b      	movs	r3, r7
 800a9aa:	900a      	str	r0, [sp, #40]	@ 0x28
 800a9ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a9ae:	f7f5 fd53 	bl	8000458 <__aeabi_dcmplt>
 800a9b2:	2800      	cmp	r0, #0
 800a9b4:	d16a      	bne.n	800aa8c <_dtoa_r+0x6a4>
 800a9b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a9b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9ba:	2000      	movs	r0, #0
 800a9bc:	4950      	ldr	r1, [pc, #320]	@ (800ab00 <_dtoa_r+0x718>)
 800a9be:	f7f7 fd8d 	bl	80024dc <__aeabi_dsub>
 800a9c2:	0032      	movs	r2, r6
 800a9c4:	003b      	movs	r3, r7
 800a9c6:	f7f5 fd47 	bl	8000458 <__aeabi_dcmplt>
 800a9ca:	2800      	cmp	r0, #0
 800a9cc:	d000      	beq.n	800a9d0 <_dtoa_r+0x5e8>
 800a9ce:	e0a5      	b.n	800ab1c <_dtoa_r+0x734>
 800a9d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a9d2:	42a3      	cmp	r3, r4
 800a9d4:	d100      	bne.n	800a9d8 <_dtoa_r+0x5f0>
 800a9d6:	e742      	b.n	800a85e <_dtoa_r+0x476>
 800a9d8:	2200      	movs	r2, #0
 800a9da:	0030      	movs	r0, r6
 800a9dc:	0039      	movs	r1, r7
 800a9de:	4b49      	ldr	r3, [pc, #292]	@ (800ab04 <_dtoa_r+0x71c>)
 800a9e0:	f7f7 fab4 	bl	8001f4c <__aeabi_dmul>
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	0006      	movs	r6, r0
 800a9e8:	000f      	movs	r7, r1
 800a9ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a9ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a9ee:	4b45      	ldr	r3, [pc, #276]	@ (800ab04 <_dtoa_r+0x71c>)
 800a9f0:	f7f7 faac 	bl	8001f4c <__aeabi_dmul>
 800a9f4:	9416      	str	r4, [sp, #88]	@ 0x58
 800a9f6:	900a      	str	r0, [sp, #40]	@ 0x28
 800a9f8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a9fa:	e7c3      	b.n	800a984 <_dtoa_r+0x59c>
 800a9fc:	0030      	movs	r0, r6
 800a9fe:	0039      	movs	r1, r7
 800aa00:	f7f7 faa4 	bl	8001f4c <__aeabi_dmul>
 800aa04:	9d08      	ldr	r5, [sp, #32]
 800aa06:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aa08:	002b      	movs	r3, r5
 800aa0a:	4694      	mov	ip, r2
 800aa0c:	9016      	str	r0, [sp, #88]	@ 0x58
 800aa0e:	9117      	str	r1, [sp, #92]	@ 0x5c
 800aa10:	4463      	add	r3, ip
 800aa12:	9319      	str	r3, [sp, #100]	@ 0x64
 800aa14:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aa16:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aa18:	f7f8 f91e 	bl	8002c58 <__aeabi_d2iz>
 800aa1c:	0004      	movs	r4, r0
 800aa1e:	f7f8 f957 	bl	8002cd0 <__aeabi_i2d>
 800aa22:	000b      	movs	r3, r1
 800aa24:	0002      	movs	r2, r0
 800aa26:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aa28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aa2a:	f7f7 fd57 	bl	80024dc <__aeabi_dsub>
 800aa2e:	3430      	adds	r4, #48	@ 0x30
 800aa30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa32:	702c      	strb	r4, [r5, #0]
 800aa34:	3501      	adds	r5, #1
 800aa36:	0006      	movs	r6, r0
 800aa38:	000f      	movs	r7, r1
 800aa3a:	42ab      	cmp	r3, r5
 800aa3c:	d129      	bne.n	800aa92 <_dtoa_r+0x6aa>
 800aa3e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800aa40:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800aa42:	9b08      	ldr	r3, [sp, #32]
 800aa44:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800aa46:	469c      	mov	ip, r3
 800aa48:	2200      	movs	r2, #0
 800aa4a:	4b32      	ldr	r3, [pc, #200]	@ (800ab14 <_dtoa_r+0x72c>)
 800aa4c:	4464      	add	r4, ip
 800aa4e:	f7f6 fad5 	bl	8000ffc <__aeabi_dadd>
 800aa52:	0002      	movs	r2, r0
 800aa54:	000b      	movs	r3, r1
 800aa56:	0030      	movs	r0, r6
 800aa58:	0039      	movs	r1, r7
 800aa5a:	f7f5 fd11 	bl	8000480 <__aeabi_dcmpgt>
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	d15c      	bne.n	800ab1c <_dtoa_r+0x734>
 800aa62:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800aa64:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa66:	2000      	movs	r0, #0
 800aa68:	492a      	ldr	r1, [pc, #168]	@ (800ab14 <_dtoa_r+0x72c>)
 800aa6a:	f7f7 fd37 	bl	80024dc <__aeabi_dsub>
 800aa6e:	0002      	movs	r2, r0
 800aa70:	000b      	movs	r3, r1
 800aa72:	0030      	movs	r0, r6
 800aa74:	0039      	movs	r1, r7
 800aa76:	f7f5 fcef 	bl	8000458 <__aeabi_dcmplt>
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	d100      	bne.n	800aa80 <_dtoa_r+0x698>
 800aa7e:	e6ee      	b.n	800a85e <_dtoa_r+0x476>
 800aa80:	0023      	movs	r3, r4
 800aa82:	3c01      	subs	r4, #1
 800aa84:	7822      	ldrb	r2, [r4, #0]
 800aa86:	2a30      	cmp	r2, #48	@ 0x30
 800aa88:	d0fa      	beq.n	800aa80 <_dtoa_r+0x698>
 800aa8a:	001c      	movs	r4, r3
 800aa8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa8e:	9304      	str	r3, [sp, #16]
 800aa90:	e73e      	b.n	800a910 <_dtoa_r+0x528>
 800aa92:	2200      	movs	r2, #0
 800aa94:	4b1b      	ldr	r3, [pc, #108]	@ (800ab04 <_dtoa_r+0x71c>)
 800aa96:	f7f7 fa59 	bl	8001f4c <__aeabi_dmul>
 800aa9a:	900a      	str	r0, [sp, #40]	@ 0x28
 800aa9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aa9e:	e7b9      	b.n	800aa14 <_dtoa_r+0x62c>
 800aaa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d10c      	bne.n	800aac0 <_dtoa_r+0x6d8>
 800aaa6:	9806      	ldr	r0, [sp, #24]
 800aaa8:	9907      	ldr	r1, [sp, #28]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	4b18      	ldr	r3, [pc, #96]	@ (800ab10 <_dtoa_r+0x728>)
 800aaae:	f7f7 fa4d 	bl	8001f4c <__aeabi_dmul>
 800aab2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aab4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aab6:	f7f5 fced 	bl	8000494 <__aeabi_dcmpge>
 800aaba:	2800      	cmp	r0, #0
 800aabc:	d100      	bne.n	800aac0 <_dtoa_r+0x6d8>
 800aabe:	e164      	b.n	800ad8a <_dtoa_r+0x9a2>
 800aac0:	2600      	movs	r6, #0
 800aac2:	0037      	movs	r7, r6
 800aac4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aac6:	9c08      	ldr	r4, [sp, #32]
 800aac8:	43db      	mvns	r3, r3
 800aaca:	930c      	str	r3, [sp, #48]	@ 0x30
 800aacc:	2300      	movs	r3, #0
 800aace:	9304      	str	r3, [sp, #16]
 800aad0:	0031      	movs	r1, r6
 800aad2:	9803      	ldr	r0, [sp, #12]
 800aad4:	f000 fbc6 	bl	800b264 <_Bfree>
 800aad8:	2f00      	cmp	r7, #0
 800aada:	d0d7      	beq.n	800aa8c <_dtoa_r+0x6a4>
 800aadc:	9b04      	ldr	r3, [sp, #16]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d005      	beq.n	800aaee <_dtoa_r+0x706>
 800aae2:	42bb      	cmp	r3, r7
 800aae4:	d003      	beq.n	800aaee <_dtoa_r+0x706>
 800aae6:	0019      	movs	r1, r3
 800aae8:	9803      	ldr	r0, [sp, #12]
 800aaea:	f000 fbbb 	bl	800b264 <_Bfree>
 800aaee:	0039      	movs	r1, r7
 800aaf0:	9803      	ldr	r0, [sp, #12]
 800aaf2:	f000 fbb7 	bl	800b264 <_Bfree>
 800aaf6:	e7c9      	b.n	800aa8c <_dtoa_r+0x6a4>
 800aaf8:	0800cb88 	.word	0x0800cb88
 800aafc:	0800cb60 	.word	0x0800cb60
 800ab00:	3ff00000 	.word	0x3ff00000
 800ab04:	40240000 	.word	0x40240000
 800ab08:	401c0000 	.word	0x401c0000
 800ab0c:	fcc00000 	.word	0xfcc00000
 800ab10:	40140000 	.word	0x40140000
 800ab14:	3fe00000 	.word	0x3fe00000
 800ab18:	9b04      	ldr	r3, [sp, #16]
 800ab1a:	930c      	str	r3, [sp, #48]	@ 0x30
 800ab1c:	0023      	movs	r3, r4
 800ab1e:	001c      	movs	r4, r3
 800ab20:	3b01      	subs	r3, #1
 800ab22:	781a      	ldrb	r2, [r3, #0]
 800ab24:	2a39      	cmp	r2, #57	@ 0x39
 800ab26:	d108      	bne.n	800ab3a <_dtoa_r+0x752>
 800ab28:	9a08      	ldr	r2, [sp, #32]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d1f7      	bne.n	800ab1e <_dtoa_r+0x736>
 800ab2e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ab30:	9908      	ldr	r1, [sp, #32]
 800ab32:	3201      	adds	r2, #1
 800ab34:	920c      	str	r2, [sp, #48]	@ 0x30
 800ab36:	2230      	movs	r2, #48	@ 0x30
 800ab38:	700a      	strb	r2, [r1, #0]
 800ab3a:	781a      	ldrb	r2, [r3, #0]
 800ab3c:	3201      	adds	r2, #1
 800ab3e:	701a      	strb	r2, [r3, #0]
 800ab40:	e7a4      	b.n	800aa8c <_dtoa_r+0x6a4>
 800ab42:	2200      	movs	r2, #0
 800ab44:	4bc6      	ldr	r3, [pc, #792]	@ (800ae60 <_dtoa_r+0xa78>)
 800ab46:	f7f7 fa01 	bl	8001f4c <__aeabi_dmul>
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	0006      	movs	r6, r0
 800ab50:	000f      	movs	r7, r1
 800ab52:	f7f5 fc7b 	bl	800044c <__aeabi_dcmpeq>
 800ab56:	2800      	cmp	r0, #0
 800ab58:	d100      	bne.n	800ab5c <_dtoa_r+0x774>
 800ab5a:	e6a1      	b.n	800a8a0 <_dtoa_r+0x4b8>
 800ab5c:	e6d8      	b.n	800a910 <_dtoa_r+0x528>
 800ab5e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800ab60:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800ab62:	9c06      	ldr	r4, [sp, #24]
 800ab64:	2f00      	cmp	r7, #0
 800ab66:	d014      	beq.n	800ab92 <_dtoa_r+0x7aa>
 800ab68:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ab6a:	2a01      	cmp	r2, #1
 800ab6c:	dd00      	ble.n	800ab70 <_dtoa_r+0x788>
 800ab6e:	e0c8      	b.n	800ad02 <_dtoa_r+0x91a>
 800ab70:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800ab72:	2a00      	cmp	r2, #0
 800ab74:	d100      	bne.n	800ab78 <_dtoa_r+0x790>
 800ab76:	e0be      	b.n	800acf6 <_dtoa_r+0x90e>
 800ab78:	4aba      	ldr	r2, [pc, #744]	@ (800ae64 <_dtoa_r+0xa7c>)
 800ab7a:	189b      	adds	r3, r3, r2
 800ab7c:	9a06      	ldr	r2, [sp, #24]
 800ab7e:	2101      	movs	r1, #1
 800ab80:	18d2      	adds	r2, r2, r3
 800ab82:	9206      	str	r2, [sp, #24]
 800ab84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ab86:	9803      	ldr	r0, [sp, #12]
 800ab88:	18d3      	adds	r3, r2, r3
 800ab8a:	930d      	str	r3, [sp, #52]	@ 0x34
 800ab8c:	f000 fc22 	bl	800b3d4 <__i2b>
 800ab90:	0007      	movs	r7, r0
 800ab92:	2c00      	cmp	r4, #0
 800ab94:	d00e      	beq.n	800abb4 <_dtoa_r+0x7cc>
 800ab96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	dd0b      	ble.n	800abb4 <_dtoa_r+0x7cc>
 800ab9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ab9e:	0023      	movs	r3, r4
 800aba0:	4294      	cmp	r4, r2
 800aba2:	dd00      	ble.n	800aba6 <_dtoa_r+0x7be>
 800aba4:	0013      	movs	r3, r2
 800aba6:	9a06      	ldr	r2, [sp, #24]
 800aba8:	1ae4      	subs	r4, r4, r3
 800abaa:	1ad2      	subs	r2, r2, r3
 800abac:	9206      	str	r2, [sp, #24]
 800abae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800abb0:	1ad3      	subs	r3, r2, r3
 800abb2:	930d      	str	r3, [sp, #52]	@ 0x34
 800abb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d01f      	beq.n	800abfa <_dtoa_r+0x812>
 800abba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d100      	bne.n	800abc2 <_dtoa_r+0x7da>
 800abc0:	e0b5      	b.n	800ad2e <_dtoa_r+0x946>
 800abc2:	2d00      	cmp	r5, #0
 800abc4:	d010      	beq.n	800abe8 <_dtoa_r+0x800>
 800abc6:	0039      	movs	r1, r7
 800abc8:	002a      	movs	r2, r5
 800abca:	9803      	ldr	r0, [sp, #12]
 800abcc:	f000 fccc 	bl	800b568 <__pow5mult>
 800abd0:	9a05      	ldr	r2, [sp, #20]
 800abd2:	0001      	movs	r1, r0
 800abd4:	0007      	movs	r7, r0
 800abd6:	9803      	ldr	r0, [sp, #12]
 800abd8:	f000 fc14 	bl	800b404 <__multiply>
 800abdc:	0006      	movs	r6, r0
 800abde:	9905      	ldr	r1, [sp, #20]
 800abe0:	9803      	ldr	r0, [sp, #12]
 800abe2:	f000 fb3f 	bl	800b264 <_Bfree>
 800abe6:	9605      	str	r6, [sp, #20]
 800abe8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abea:	1b5a      	subs	r2, r3, r5
 800abec:	42ab      	cmp	r3, r5
 800abee:	d004      	beq.n	800abfa <_dtoa_r+0x812>
 800abf0:	9905      	ldr	r1, [sp, #20]
 800abf2:	9803      	ldr	r0, [sp, #12]
 800abf4:	f000 fcb8 	bl	800b568 <__pow5mult>
 800abf8:	9005      	str	r0, [sp, #20]
 800abfa:	2101      	movs	r1, #1
 800abfc:	9803      	ldr	r0, [sp, #12]
 800abfe:	f000 fbe9 	bl	800b3d4 <__i2b>
 800ac02:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ac04:	0006      	movs	r6, r0
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d100      	bne.n	800ac0c <_dtoa_r+0x824>
 800ac0a:	e1bc      	b.n	800af86 <_dtoa_r+0xb9e>
 800ac0c:	001a      	movs	r2, r3
 800ac0e:	0001      	movs	r1, r0
 800ac10:	9803      	ldr	r0, [sp, #12]
 800ac12:	f000 fca9 	bl	800b568 <__pow5mult>
 800ac16:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ac18:	0006      	movs	r6, r0
 800ac1a:	2500      	movs	r5, #0
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	dc16      	bgt.n	800ac4e <_dtoa_r+0x866>
 800ac20:	2500      	movs	r5, #0
 800ac22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac24:	42ab      	cmp	r3, r5
 800ac26:	d10e      	bne.n	800ac46 <_dtoa_r+0x85e>
 800ac28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac2a:	031b      	lsls	r3, r3, #12
 800ac2c:	42ab      	cmp	r3, r5
 800ac2e:	d10a      	bne.n	800ac46 <_dtoa_r+0x85e>
 800ac30:	4b8d      	ldr	r3, [pc, #564]	@ (800ae68 <_dtoa_r+0xa80>)
 800ac32:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ac34:	4213      	tst	r3, r2
 800ac36:	d006      	beq.n	800ac46 <_dtoa_r+0x85e>
 800ac38:	9b06      	ldr	r3, [sp, #24]
 800ac3a:	3501      	adds	r5, #1
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	9306      	str	r3, [sp, #24]
 800ac40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac42:	3301      	adds	r3, #1
 800ac44:	930d      	str	r3, [sp, #52]	@ 0x34
 800ac46:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ac48:	2001      	movs	r0, #1
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d008      	beq.n	800ac60 <_dtoa_r+0x878>
 800ac4e:	6933      	ldr	r3, [r6, #16]
 800ac50:	3303      	adds	r3, #3
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	18f3      	adds	r3, r6, r3
 800ac56:	6858      	ldr	r0, [r3, #4]
 800ac58:	f000 fb6c 	bl	800b334 <__hi0bits>
 800ac5c:	2320      	movs	r3, #32
 800ac5e:	1a18      	subs	r0, r3, r0
 800ac60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac62:	1818      	adds	r0, r3, r0
 800ac64:	0002      	movs	r2, r0
 800ac66:	231f      	movs	r3, #31
 800ac68:	401a      	ands	r2, r3
 800ac6a:	4218      	tst	r0, r3
 800ac6c:	d065      	beq.n	800ad3a <_dtoa_r+0x952>
 800ac6e:	3301      	adds	r3, #1
 800ac70:	1a9b      	subs	r3, r3, r2
 800ac72:	2b04      	cmp	r3, #4
 800ac74:	dd5d      	ble.n	800ad32 <_dtoa_r+0x94a>
 800ac76:	231c      	movs	r3, #28
 800ac78:	1a9b      	subs	r3, r3, r2
 800ac7a:	9a06      	ldr	r2, [sp, #24]
 800ac7c:	18e4      	adds	r4, r4, r3
 800ac7e:	18d2      	adds	r2, r2, r3
 800ac80:	9206      	str	r2, [sp, #24]
 800ac82:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ac84:	18d3      	adds	r3, r2, r3
 800ac86:	930d      	str	r3, [sp, #52]	@ 0x34
 800ac88:	9b06      	ldr	r3, [sp, #24]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	dd05      	ble.n	800ac9a <_dtoa_r+0x8b2>
 800ac8e:	001a      	movs	r2, r3
 800ac90:	9905      	ldr	r1, [sp, #20]
 800ac92:	9803      	ldr	r0, [sp, #12]
 800ac94:	f000 fcc4 	bl	800b620 <__lshift>
 800ac98:	9005      	str	r0, [sp, #20]
 800ac9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	dd05      	ble.n	800acac <_dtoa_r+0x8c4>
 800aca0:	0031      	movs	r1, r6
 800aca2:	001a      	movs	r2, r3
 800aca4:	9803      	ldr	r0, [sp, #12]
 800aca6:	f000 fcbb 	bl	800b620 <__lshift>
 800acaa:	0006      	movs	r6, r0
 800acac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d045      	beq.n	800ad3e <_dtoa_r+0x956>
 800acb2:	0031      	movs	r1, r6
 800acb4:	9805      	ldr	r0, [sp, #20]
 800acb6:	f000 fd1f 	bl	800b6f8 <__mcmp>
 800acba:	2800      	cmp	r0, #0
 800acbc:	da3f      	bge.n	800ad3e <_dtoa_r+0x956>
 800acbe:	9b04      	ldr	r3, [sp, #16]
 800acc0:	220a      	movs	r2, #10
 800acc2:	3b01      	subs	r3, #1
 800acc4:	930c      	str	r3, [sp, #48]	@ 0x30
 800acc6:	9905      	ldr	r1, [sp, #20]
 800acc8:	2300      	movs	r3, #0
 800acca:	9803      	ldr	r0, [sp, #12]
 800accc:	f000 faee 	bl	800b2ac <__multadd>
 800acd0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800acd2:	9005      	str	r0, [sp, #20]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d100      	bne.n	800acda <_dtoa_r+0x8f2>
 800acd8:	e15c      	b.n	800af94 <_dtoa_r+0xbac>
 800acda:	2300      	movs	r3, #0
 800acdc:	0039      	movs	r1, r7
 800acde:	220a      	movs	r2, #10
 800ace0:	9803      	ldr	r0, [sp, #12]
 800ace2:	f000 fae3 	bl	800b2ac <__multadd>
 800ace6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ace8:	0007      	movs	r7, r0
 800acea:	2b00      	cmp	r3, #0
 800acec:	dc55      	bgt.n	800ad9a <_dtoa_r+0x9b2>
 800acee:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800acf0:	2b02      	cmp	r3, #2
 800acf2:	dc2d      	bgt.n	800ad50 <_dtoa_r+0x968>
 800acf4:	e051      	b.n	800ad9a <_dtoa_r+0x9b2>
 800acf6:	2336      	movs	r3, #54	@ 0x36
 800acf8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800acfa:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800acfc:	9c06      	ldr	r4, [sp, #24]
 800acfe:	1a9b      	subs	r3, r3, r2
 800ad00:	e73c      	b.n	800ab7c <_dtoa_r+0x794>
 800ad02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad04:	1e5d      	subs	r5, r3, #1
 800ad06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad08:	42ab      	cmp	r3, r5
 800ad0a:	db08      	blt.n	800ad1e <_dtoa_r+0x936>
 800ad0c:	1b5d      	subs	r5, r3, r5
 800ad0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad10:	9c06      	ldr	r4, [sp, #24]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	db00      	blt.n	800ad18 <_dtoa_r+0x930>
 800ad16:	e731      	b.n	800ab7c <_dtoa_r+0x794>
 800ad18:	1ae4      	subs	r4, r4, r3
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	e72e      	b.n	800ab7c <_dtoa_r+0x794>
 800ad1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad20:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ad22:	1aeb      	subs	r3, r5, r3
 800ad24:	18d3      	adds	r3, r2, r3
 800ad26:	950f      	str	r5, [sp, #60]	@ 0x3c
 800ad28:	9314      	str	r3, [sp, #80]	@ 0x50
 800ad2a:	2500      	movs	r5, #0
 800ad2c:	e7ef      	b.n	800ad0e <_dtoa_r+0x926>
 800ad2e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ad30:	e75e      	b.n	800abf0 <_dtoa_r+0x808>
 800ad32:	2b04      	cmp	r3, #4
 800ad34:	d0a8      	beq.n	800ac88 <_dtoa_r+0x8a0>
 800ad36:	331c      	adds	r3, #28
 800ad38:	e79f      	b.n	800ac7a <_dtoa_r+0x892>
 800ad3a:	0013      	movs	r3, r2
 800ad3c:	e7fb      	b.n	800ad36 <_dtoa_r+0x94e>
 800ad3e:	9b04      	ldr	r3, [sp, #16]
 800ad40:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad44:	930e      	str	r3, [sp, #56]	@ 0x38
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	dc23      	bgt.n	800ad92 <_dtoa_r+0x9aa>
 800ad4a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ad4c:	2b02      	cmp	r3, #2
 800ad4e:	dd20      	ble.n	800ad92 <_dtoa_r+0x9aa>
 800ad50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d000      	beq.n	800ad58 <_dtoa_r+0x970>
 800ad56:	e6b5      	b.n	800aac4 <_dtoa_r+0x6dc>
 800ad58:	0031      	movs	r1, r6
 800ad5a:	2205      	movs	r2, #5
 800ad5c:	9803      	ldr	r0, [sp, #12]
 800ad5e:	f000 faa5 	bl	800b2ac <__multadd>
 800ad62:	0006      	movs	r6, r0
 800ad64:	0001      	movs	r1, r0
 800ad66:	9805      	ldr	r0, [sp, #20]
 800ad68:	f000 fcc6 	bl	800b6f8 <__mcmp>
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	dc00      	bgt.n	800ad72 <_dtoa_r+0x98a>
 800ad70:	e6a8      	b.n	800aac4 <_dtoa_r+0x6dc>
 800ad72:	9b08      	ldr	r3, [sp, #32]
 800ad74:	9a08      	ldr	r2, [sp, #32]
 800ad76:	1c5c      	adds	r4, r3, #1
 800ad78:	2331      	movs	r3, #49	@ 0x31
 800ad7a:	7013      	strb	r3, [r2, #0]
 800ad7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad7e:	3301      	adds	r3, #1
 800ad80:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad82:	e6a3      	b.n	800aacc <_dtoa_r+0x6e4>
 800ad84:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800ad86:	0037      	movs	r7, r6
 800ad88:	e7f3      	b.n	800ad72 <_dtoa_r+0x98a>
 800ad8a:	9b04      	ldr	r3, [sp, #16]
 800ad8c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800ad8e:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad90:	e7f9      	b.n	800ad86 <_dtoa_r+0x99e>
 800ad92:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d100      	bne.n	800ad9a <_dtoa_r+0x9b2>
 800ad98:	e100      	b.n	800af9c <_dtoa_r+0xbb4>
 800ad9a:	2c00      	cmp	r4, #0
 800ad9c:	dd05      	ble.n	800adaa <_dtoa_r+0x9c2>
 800ad9e:	0039      	movs	r1, r7
 800ada0:	0022      	movs	r2, r4
 800ada2:	9803      	ldr	r0, [sp, #12]
 800ada4:	f000 fc3c 	bl	800b620 <__lshift>
 800ada8:	0007      	movs	r7, r0
 800adaa:	0038      	movs	r0, r7
 800adac:	2d00      	cmp	r5, #0
 800adae:	d018      	beq.n	800ade2 <_dtoa_r+0x9fa>
 800adb0:	6879      	ldr	r1, [r7, #4]
 800adb2:	9803      	ldr	r0, [sp, #12]
 800adb4:	f000 fa12 	bl	800b1dc <_Balloc>
 800adb8:	1e04      	subs	r4, r0, #0
 800adba:	d105      	bne.n	800adc8 <_dtoa_r+0x9e0>
 800adbc:	0022      	movs	r2, r4
 800adbe:	4b2b      	ldr	r3, [pc, #172]	@ (800ae6c <_dtoa_r+0xa84>)
 800adc0:	482b      	ldr	r0, [pc, #172]	@ (800ae70 <_dtoa_r+0xa88>)
 800adc2:	492c      	ldr	r1, [pc, #176]	@ (800ae74 <_dtoa_r+0xa8c>)
 800adc4:	f7ff fb25 	bl	800a412 <_dtoa_r+0x2a>
 800adc8:	0039      	movs	r1, r7
 800adca:	693a      	ldr	r2, [r7, #16]
 800adcc:	310c      	adds	r1, #12
 800adce:	3202      	adds	r2, #2
 800add0:	0092      	lsls	r2, r2, #2
 800add2:	300c      	adds	r0, #12
 800add4:	f001 f9c0 	bl	800c158 <memcpy>
 800add8:	2201      	movs	r2, #1
 800adda:	0021      	movs	r1, r4
 800addc:	9803      	ldr	r0, [sp, #12]
 800adde:	f000 fc1f 	bl	800b620 <__lshift>
 800ade2:	9b08      	ldr	r3, [sp, #32]
 800ade4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ade6:	9306      	str	r3, [sp, #24]
 800ade8:	3b01      	subs	r3, #1
 800adea:	189b      	adds	r3, r3, r2
 800adec:	2201      	movs	r2, #1
 800adee:	9704      	str	r7, [sp, #16]
 800adf0:	0007      	movs	r7, r0
 800adf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800adf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adf6:	4013      	ands	r3, r2
 800adf8:	930e      	str	r3, [sp, #56]	@ 0x38
 800adfa:	0031      	movs	r1, r6
 800adfc:	9805      	ldr	r0, [sp, #20]
 800adfe:	f7ff fa65 	bl	800a2cc <quorem>
 800ae02:	9904      	ldr	r1, [sp, #16]
 800ae04:	0005      	movs	r5, r0
 800ae06:	900a      	str	r0, [sp, #40]	@ 0x28
 800ae08:	9805      	ldr	r0, [sp, #20]
 800ae0a:	f000 fc75 	bl	800b6f8 <__mcmp>
 800ae0e:	003a      	movs	r2, r7
 800ae10:	900d      	str	r0, [sp, #52]	@ 0x34
 800ae12:	0031      	movs	r1, r6
 800ae14:	9803      	ldr	r0, [sp, #12]
 800ae16:	f000 fc8b 	bl	800b730 <__mdiff>
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	68c3      	ldr	r3, [r0, #12]
 800ae1e:	0004      	movs	r4, r0
 800ae20:	3530      	adds	r5, #48	@ 0x30
 800ae22:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d104      	bne.n	800ae32 <_dtoa_r+0xa4a>
 800ae28:	0001      	movs	r1, r0
 800ae2a:	9805      	ldr	r0, [sp, #20]
 800ae2c:	f000 fc64 	bl	800b6f8 <__mcmp>
 800ae30:	9009      	str	r0, [sp, #36]	@ 0x24
 800ae32:	0021      	movs	r1, r4
 800ae34:	9803      	ldr	r0, [sp, #12]
 800ae36:	f000 fa15 	bl	800b264 <_Bfree>
 800ae3a:	9b06      	ldr	r3, [sp, #24]
 800ae3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae3e:	1c5c      	adds	r4, r3, #1
 800ae40:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ae42:	4313      	orrs	r3, r2
 800ae44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae46:	4313      	orrs	r3, r2
 800ae48:	d116      	bne.n	800ae78 <_dtoa_r+0xa90>
 800ae4a:	2d39      	cmp	r5, #57	@ 0x39
 800ae4c:	d02f      	beq.n	800aeae <_dtoa_r+0xac6>
 800ae4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	dd01      	ble.n	800ae58 <_dtoa_r+0xa70>
 800ae54:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800ae56:	3531      	adds	r5, #49	@ 0x31
 800ae58:	9b06      	ldr	r3, [sp, #24]
 800ae5a:	701d      	strb	r5, [r3, #0]
 800ae5c:	e638      	b.n	800aad0 <_dtoa_r+0x6e8>
 800ae5e:	46c0      	nop			@ (mov r8, r8)
 800ae60:	40240000 	.word	0x40240000
 800ae64:	00000433 	.word	0x00000433
 800ae68:	7ff00000 	.word	0x7ff00000
 800ae6c:	0800cae8 	.word	0x0800cae8
 800ae70:	0800ca90 	.word	0x0800ca90
 800ae74:	000002ef 	.word	0x000002ef
 800ae78:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	db04      	blt.n	800ae88 <_dtoa_r+0xaa0>
 800ae7e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ae80:	4313      	orrs	r3, r2
 800ae82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae84:	4313      	orrs	r3, r2
 800ae86:	d11e      	bne.n	800aec6 <_dtoa_r+0xade>
 800ae88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	dde4      	ble.n	800ae58 <_dtoa_r+0xa70>
 800ae8e:	9905      	ldr	r1, [sp, #20]
 800ae90:	2201      	movs	r2, #1
 800ae92:	9803      	ldr	r0, [sp, #12]
 800ae94:	f000 fbc4 	bl	800b620 <__lshift>
 800ae98:	0031      	movs	r1, r6
 800ae9a:	9005      	str	r0, [sp, #20]
 800ae9c:	f000 fc2c 	bl	800b6f8 <__mcmp>
 800aea0:	2800      	cmp	r0, #0
 800aea2:	dc02      	bgt.n	800aeaa <_dtoa_r+0xac2>
 800aea4:	d1d8      	bne.n	800ae58 <_dtoa_r+0xa70>
 800aea6:	07eb      	lsls	r3, r5, #31
 800aea8:	d5d6      	bpl.n	800ae58 <_dtoa_r+0xa70>
 800aeaa:	2d39      	cmp	r5, #57	@ 0x39
 800aeac:	d1d2      	bne.n	800ae54 <_dtoa_r+0xa6c>
 800aeae:	2339      	movs	r3, #57	@ 0x39
 800aeb0:	9a06      	ldr	r2, [sp, #24]
 800aeb2:	7013      	strb	r3, [r2, #0]
 800aeb4:	0023      	movs	r3, r4
 800aeb6:	001c      	movs	r4, r3
 800aeb8:	3b01      	subs	r3, #1
 800aeba:	781a      	ldrb	r2, [r3, #0]
 800aebc:	2a39      	cmp	r2, #57	@ 0x39
 800aebe:	d04f      	beq.n	800af60 <_dtoa_r+0xb78>
 800aec0:	3201      	adds	r2, #1
 800aec2:	701a      	strb	r2, [r3, #0]
 800aec4:	e604      	b.n	800aad0 <_dtoa_r+0x6e8>
 800aec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	dd03      	ble.n	800aed4 <_dtoa_r+0xaec>
 800aecc:	2d39      	cmp	r5, #57	@ 0x39
 800aece:	d0ee      	beq.n	800aeae <_dtoa_r+0xac6>
 800aed0:	3501      	adds	r5, #1
 800aed2:	e7c1      	b.n	800ae58 <_dtoa_r+0xa70>
 800aed4:	9b06      	ldr	r3, [sp, #24]
 800aed6:	9a06      	ldr	r2, [sp, #24]
 800aed8:	701d      	strb	r5, [r3, #0]
 800aeda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aedc:	4293      	cmp	r3, r2
 800aede:	d02a      	beq.n	800af36 <_dtoa_r+0xb4e>
 800aee0:	2300      	movs	r3, #0
 800aee2:	220a      	movs	r2, #10
 800aee4:	9905      	ldr	r1, [sp, #20]
 800aee6:	9803      	ldr	r0, [sp, #12]
 800aee8:	f000 f9e0 	bl	800b2ac <__multadd>
 800aeec:	9b04      	ldr	r3, [sp, #16]
 800aeee:	9005      	str	r0, [sp, #20]
 800aef0:	42bb      	cmp	r3, r7
 800aef2:	d109      	bne.n	800af08 <_dtoa_r+0xb20>
 800aef4:	2300      	movs	r3, #0
 800aef6:	220a      	movs	r2, #10
 800aef8:	9904      	ldr	r1, [sp, #16]
 800aefa:	9803      	ldr	r0, [sp, #12]
 800aefc:	f000 f9d6 	bl	800b2ac <__multadd>
 800af00:	9004      	str	r0, [sp, #16]
 800af02:	0007      	movs	r7, r0
 800af04:	9406      	str	r4, [sp, #24]
 800af06:	e778      	b.n	800adfa <_dtoa_r+0xa12>
 800af08:	9904      	ldr	r1, [sp, #16]
 800af0a:	2300      	movs	r3, #0
 800af0c:	220a      	movs	r2, #10
 800af0e:	9803      	ldr	r0, [sp, #12]
 800af10:	f000 f9cc 	bl	800b2ac <__multadd>
 800af14:	2300      	movs	r3, #0
 800af16:	9004      	str	r0, [sp, #16]
 800af18:	220a      	movs	r2, #10
 800af1a:	0039      	movs	r1, r7
 800af1c:	9803      	ldr	r0, [sp, #12]
 800af1e:	f000 f9c5 	bl	800b2ac <__multadd>
 800af22:	e7ee      	b.n	800af02 <_dtoa_r+0xb1a>
 800af24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af26:	2401      	movs	r4, #1
 800af28:	2b00      	cmp	r3, #0
 800af2a:	dd00      	ble.n	800af2e <_dtoa_r+0xb46>
 800af2c:	001c      	movs	r4, r3
 800af2e:	9b08      	ldr	r3, [sp, #32]
 800af30:	191c      	adds	r4, r3, r4
 800af32:	2300      	movs	r3, #0
 800af34:	9304      	str	r3, [sp, #16]
 800af36:	9905      	ldr	r1, [sp, #20]
 800af38:	2201      	movs	r2, #1
 800af3a:	9803      	ldr	r0, [sp, #12]
 800af3c:	f000 fb70 	bl	800b620 <__lshift>
 800af40:	0031      	movs	r1, r6
 800af42:	9005      	str	r0, [sp, #20]
 800af44:	f000 fbd8 	bl	800b6f8 <__mcmp>
 800af48:	2800      	cmp	r0, #0
 800af4a:	dcb3      	bgt.n	800aeb4 <_dtoa_r+0xacc>
 800af4c:	d101      	bne.n	800af52 <_dtoa_r+0xb6a>
 800af4e:	07ed      	lsls	r5, r5, #31
 800af50:	d4b0      	bmi.n	800aeb4 <_dtoa_r+0xacc>
 800af52:	0023      	movs	r3, r4
 800af54:	001c      	movs	r4, r3
 800af56:	3b01      	subs	r3, #1
 800af58:	781a      	ldrb	r2, [r3, #0]
 800af5a:	2a30      	cmp	r2, #48	@ 0x30
 800af5c:	d0fa      	beq.n	800af54 <_dtoa_r+0xb6c>
 800af5e:	e5b7      	b.n	800aad0 <_dtoa_r+0x6e8>
 800af60:	9a08      	ldr	r2, [sp, #32]
 800af62:	429a      	cmp	r2, r3
 800af64:	d1a7      	bne.n	800aeb6 <_dtoa_r+0xace>
 800af66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af68:	3301      	adds	r3, #1
 800af6a:	930c      	str	r3, [sp, #48]	@ 0x30
 800af6c:	2331      	movs	r3, #49	@ 0x31
 800af6e:	7013      	strb	r3, [r2, #0]
 800af70:	e5ae      	b.n	800aad0 <_dtoa_r+0x6e8>
 800af72:	4b15      	ldr	r3, [pc, #84]	@ (800afc8 <_dtoa_r+0xbe0>)
 800af74:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800af76:	9308      	str	r3, [sp, #32]
 800af78:	4b14      	ldr	r3, [pc, #80]	@ (800afcc <_dtoa_r+0xbe4>)
 800af7a:	2a00      	cmp	r2, #0
 800af7c:	d001      	beq.n	800af82 <_dtoa_r+0xb9a>
 800af7e:	f7ff fa7b 	bl	800a478 <_dtoa_r+0x90>
 800af82:	f7ff fa7b 	bl	800a47c <_dtoa_r+0x94>
 800af86:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800af88:	2b01      	cmp	r3, #1
 800af8a:	dc00      	bgt.n	800af8e <_dtoa_r+0xba6>
 800af8c:	e648      	b.n	800ac20 <_dtoa_r+0x838>
 800af8e:	2001      	movs	r0, #1
 800af90:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800af92:	e665      	b.n	800ac60 <_dtoa_r+0x878>
 800af94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af96:	2b00      	cmp	r3, #0
 800af98:	dc00      	bgt.n	800af9c <_dtoa_r+0xbb4>
 800af9a:	e6d6      	b.n	800ad4a <_dtoa_r+0x962>
 800af9c:	2400      	movs	r4, #0
 800af9e:	0031      	movs	r1, r6
 800afa0:	9805      	ldr	r0, [sp, #20]
 800afa2:	f7ff f993 	bl	800a2cc <quorem>
 800afa6:	9b08      	ldr	r3, [sp, #32]
 800afa8:	3030      	adds	r0, #48	@ 0x30
 800afaa:	5518      	strb	r0, [r3, r4]
 800afac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afae:	3401      	adds	r4, #1
 800afb0:	0005      	movs	r5, r0
 800afb2:	429c      	cmp	r4, r3
 800afb4:	dab6      	bge.n	800af24 <_dtoa_r+0xb3c>
 800afb6:	2300      	movs	r3, #0
 800afb8:	220a      	movs	r2, #10
 800afba:	9905      	ldr	r1, [sp, #20]
 800afbc:	9803      	ldr	r0, [sp, #12]
 800afbe:	f000 f975 	bl	800b2ac <__multadd>
 800afc2:	9005      	str	r0, [sp, #20]
 800afc4:	e7eb      	b.n	800af9e <_dtoa_r+0xbb6>
 800afc6:	46c0      	nop			@ (mov r8, r8)
 800afc8:	0800ca6c 	.word	0x0800ca6c
 800afcc:	0800ca74 	.word	0x0800ca74

0800afd0 <_free_r>:
 800afd0:	b570      	push	{r4, r5, r6, lr}
 800afd2:	0005      	movs	r5, r0
 800afd4:	1e0c      	subs	r4, r1, #0
 800afd6:	d010      	beq.n	800affa <_free_r+0x2a>
 800afd8:	3c04      	subs	r4, #4
 800afda:	6823      	ldr	r3, [r4, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	da00      	bge.n	800afe2 <_free_r+0x12>
 800afe0:	18e4      	adds	r4, r4, r3
 800afe2:	0028      	movs	r0, r5
 800afe4:	f000 f8ea 	bl	800b1bc <__malloc_lock>
 800afe8:	4a1d      	ldr	r2, [pc, #116]	@ (800b060 <_free_r+0x90>)
 800afea:	6813      	ldr	r3, [r2, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d105      	bne.n	800affc <_free_r+0x2c>
 800aff0:	6063      	str	r3, [r4, #4]
 800aff2:	6014      	str	r4, [r2, #0]
 800aff4:	0028      	movs	r0, r5
 800aff6:	f000 f8e9 	bl	800b1cc <__malloc_unlock>
 800affa:	bd70      	pop	{r4, r5, r6, pc}
 800affc:	42a3      	cmp	r3, r4
 800affe:	d908      	bls.n	800b012 <_free_r+0x42>
 800b000:	6820      	ldr	r0, [r4, #0]
 800b002:	1821      	adds	r1, r4, r0
 800b004:	428b      	cmp	r3, r1
 800b006:	d1f3      	bne.n	800aff0 <_free_r+0x20>
 800b008:	6819      	ldr	r1, [r3, #0]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	1809      	adds	r1, r1, r0
 800b00e:	6021      	str	r1, [r4, #0]
 800b010:	e7ee      	b.n	800aff0 <_free_r+0x20>
 800b012:	001a      	movs	r2, r3
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d001      	beq.n	800b01e <_free_r+0x4e>
 800b01a:	42a3      	cmp	r3, r4
 800b01c:	d9f9      	bls.n	800b012 <_free_r+0x42>
 800b01e:	6811      	ldr	r1, [r2, #0]
 800b020:	1850      	adds	r0, r2, r1
 800b022:	42a0      	cmp	r0, r4
 800b024:	d10b      	bne.n	800b03e <_free_r+0x6e>
 800b026:	6820      	ldr	r0, [r4, #0]
 800b028:	1809      	adds	r1, r1, r0
 800b02a:	1850      	adds	r0, r2, r1
 800b02c:	6011      	str	r1, [r2, #0]
 800b02e:	4283      	cmp	r3, r0
 800b030:	d1e0      	bne.n	800aff4 <_free_r+0x24>
 800b032:	6818      	ldr	r0, [r3, #0]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	1841      	adds	r1, r0, r1
 800b038:	6011      	str	r1, [r2, #0]
 800b03a:	6053      	str	r3, [r2, #4]
 800b03c:	e7da      	b.n	800aff4 <_free_r+0x24>
 800b03e:	42a0      	cmp	r0, r4
 800b040:	d902      	bls.n	800b048 <_free_r+0x78>
 800b042:	230c      	movs	r3, #12
 800b044:	602b      	str	r3, [r5, #0]
 800b046:	e7d5      	b.n	800aff4 <_free_r+0x24>
 800b048:	6820      	ldr	r0, [r4, #0]
 800b04a:	1821      	adds	r1, r4, r0
 800b04c:	428b      	cmp	r3, r1
 800b04e:	d103      	bne.n	800b058 <_free_r+0x88>
 800b050:	6819      	ldr	r1, [r3, #0]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	1809      	adds	r1, r1, r0
 800b056:	6021      	str	r1, [r4, #0]
 800b058:	6063      	str	r3, [r4, #4]
 800b05a:	6054      	str	r4, [r2, #4]
 800b05c:	e7ca      	b.n	800aff4 <_free_r+0x24>
 800b05e:	46c0      	nop			@ (mov r8, r8)
 800b060:	20000e7c 	.word	0x20000e7c

0800b064 <malloc>:
 800b064:	b510      	push	{r4, lr}
 800b066:	4b03      	ldr	r3, [pc, #12]	@ (800b074 <malloc+0x10>)
 800b068:	0001      	movs	r1, r0
 800b06a:	6818      	ldr	r0, [r3, #0]
 800b06c:	f000 f826 	bl	800b0bc <_malloc_r>
 800b070:	bd10      	pop	{r4, pc}
 800b072:	46c0      	nop			@ (mov r8, r8)
 800b074:	20000030 	.word	0x20000030

0800b078 <sbrk_aligned>:
 800b078:	b570      	push	{r4, r5, r6, lr}
 800b07a:	4e0f      	ldr	r6, [pc, #60]	@ (800b0b8 <sbrk_aligned+0x40>)
 800b07c:	000d      	movs	r5, r1
 800b07e:	6831      	ldr	r1, [r6, #0]
 800b080:	0004      	movs	r4, r0
 800b082:	2900      	cmp	r1, #0
 800b084:	d102      	bne.n	800b08c <sbrk_aligned+0x14>
 800b086:	f001 f855 	bl	800c134 <_sbrk_r>
 800b08a:	6030      	str	r0, [r6, #0]
 800b08c:	0029      	movs	r1, r5
 800b08e:	0020      	movs	r0, r4
 800b090:	f001 f850 	bl	800c134 <_sbrk_r>
 800b094:	1c43      	adds	r3, r0, #1
 800b096:	d103      	bne.n	800b0a0 <sbrk_aligned+0x28>
 800b098:	2501      	movs	r5, #1
 800b09a:	426d      	negs	r5, r5
 800b09c:	0028      	movs	r0, r5
 800b09e:	bd70      	pop	{r4, r5, r6, pc}
 800b0a0:	2303      	movs	r3, #3
 800b0a2:	1cc5      	adds	r5, r0, #3
 800b0a4:	439d      	bics	r5, r3
 800b0a6:	42a8      	cmp	r0, r5
 800b0a8:	d0f8      	beq.n	800b09c <sbrk_aligned+0x24>
 800b0aa:	1a29      	subs	r1, r5, r0
 800b0ac:	0020      	movs	r0, r4
 800b0ae:	f001 f841 	bl	800c134 <_sbrk_r>
 800b0b2:	3001      	adds	r0, #1
 800b0b4:	d1f2      	bne.n	800b09c <sbrk_aligned+0x24>
 800b0b6:	e7ef      	b.n	800b098 <sbrk_aligned+0x20>
 800b0b8:	20000e78 	.word	0x20000e78

0800b0bc <_malloc_r>:
 800b0bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0be:	2203      	movs	r2, #3
 800b0c0:	1ccb      	adds	r3, r1, #3
 800b0c2:	4393      	bics	r3, r2
 800b0c4:	3308      	adds	r3, #8
 800b0c6:	0005      	movs	r5, r0
 800b0c8:	001f      	movs	r7, r3
 800b0ca:	2b0c      	cmp	r3, #12
 800b0cc:	d234      	bcs.n	800b138 <_malloc_r+0x7c>
 800b0ce:	270c      	movs	r7, #12
 800b0d0:	42b9      	cmp	r1, r7
 800b0d2:	d833      	bhi.n	800b13c <_malloc_r+0x80>
 800b0d4:	0028      	movs	r0, r5
 800b0d6:	f000 f871 	bl	800b1bc <__malloc_lock>
 800b0da:	4e37      	ldr	r6, [pc, #220]	@ (800b1b8 <_malloc_r+0xfc>)
 800b0dc:	6833      	ldr	r3, [r6, #0]
 800b0de:	001c      	movs	r4, r3
 800b0e0:	2c00      	cmp	r4, #0
 800b0e2:	d12f      	bne.n	800b144 <_malloc_r+0x88>
 800b0e4:	0039      	movs	r1, r7
 800b0e6:	0028      	movs	r0, r5
 800b0e8:	f7ff ffc6 	bl	800b078 <sbrk_aligned>
 800b0ec:	0004      	movs	r4, r0
 800b0ee:	1c43      	adds	r3, r0, #1
 800b0f0:	d15f      	bne.n	800b1b2 <_malloc_r+0xf6>
 800b0f2:	6834      	ldr	r4, [r6, #0]
 800b0f4:	9400      	str	r4, [sp, #0]
 800b0f6:	9b00      	ldr	r3, [sp, #0]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d14a      	bne.n	800b192 <_malloc_r+0xd6>
 800b0fc:	2c00      	cmp	r4, #0
 800b0fe:	d052      	beq.n	800b1a6 <_malloc_r+0xea>
 800b100:	6823      	ldr	r3, [r4, #0]
 800b102:	0028      	movs	r0, r5
 800b104:	18e3      	adds	r3, r4, r3
 800b106:	9900      	ldr	r1, [sp, #0]
 800b108:	9301      	str	r3, [sp, #4]
 800b10a:	f001 f813 	bl	800c134 <_sbrk_r>
 800b10e:	9b01      	ldr	r3, [sp, #4]
 800b110:	4283      	cmp	r3, r0
 800b112:	d148      	bne.n	800b1a6 <_malloc_r+0xea>
 800b114:	6823      	ldr	r3, [r4, #0]
 800b116:	0028      	movs	r0, r5
 800b118:	1aff      	subs	r7, r7, r3
 800b11a:	0039      	movs	r1, r7
 800b11c:	f7ff ffac 	bl	800b078 <sbrk_aligned>
 800b120:	3001      	adds	r0, #1
 800b122:	d040      	beq.n	800b1a6 <_malloc_r+0xea>
 800b124:	6823      	ldr	r3, [r4, #0]
 800b126:	19db      	adds	r3, r3, r7
 800b128:	6023      	str	r3, [r4, #0]
 800b12a:	6833      	ldr	r3, [r6, #0]
 800b12c:	685a      	ldr	r2, [r3, #4]
 800b12e:	2a00      	cmp	r2, #0
 800b130:	d133      	bne.n	800b19a <_malloc_r+0xde>
 800b132:	9b00      	ldr	r3, [sp, #0]
 800b134:	6033      	str	r3, [r6, #0]
 800b136:	e019      	b.n	800b16c <_malloc_r+0xb0>
 800b138:	2b00      	cmp	r3, #0
 800b13a:	dac9      	bge.n	800b0d0 <_malloc_r+0x14>
 800b13c:	230c      	movs	r3, #12
 800b13e:	602b      	str	r3, [r5, #0]
 800b140:	2000      	movs	r0, #0
 800b142:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b144:	6821      	ldr	r1, [r4, #0]
 800b146:	1bc9      	subs	r1, r1, r7
 800b148:	d420      	bmi.n	800b18c <_malloc_r+0xd0>
 800b14a:	290b      	cmp	r1, #11
 800b14c:	d90a      	bls.n	800b164 <_malloc_r+0xa8>
 800b14e:	19e2      	adds	r2, r4, r7
 800b150:	6027      	str	r7, [r4, #0]
 800b152:	42a3      	cmp	r3, r4
 800b154:	d104      	bne.n	800b160 <_malloc_r+0xa4>
 800b156:	6032      	str	r2, [r6, #0]
 800b158:	6863      	ldr	r3, [r4, #4]
 800b15a:	6011      	str	r1, [r2, #0]
 800b15c:	6053      	str	r3, [r2, #4]
 800b15e:	e005      	b.n	800b16c <_malloc_r+0xb0>
 800b160:	605a      	str	r2, [r3, #4]
 800b162:	e7f9      	b.n	800b158 <_malloc_r+0x9c>
 800b164:	6862      	ldr	r2, [r4, #4]
 800b166:	42a3      	cmp	r3, r4
 800b168:	d10e      	bne.n	800b188 <_malloc_r+0xcc>
 800b16a:	6032      	str	r2, [r6, #0]
 800b16c:	0028      	movs	r0, r5
 800b16e:	f000 f82d 	bl	800b1cc <__malloc_unlock>
 800b172:	0020      	movs	r0, r4
 800b174:	2207      	movs	r2, #7
 800b176:	300b      	adds	r0, #11
 800b178:	1d23      	adds	r3, r4, #4
 800b17a:	4390      	bics	r0, r2
 800b17c:	1ac2      	subs	r2, r0, r3
 800b17e:	4298      	cmp	r0, r3
 800b180:	d0df      	beq.n	800b142 <_malloc_r+0x86>
 800b182:	1a1b      	subs	r3, r3, r0
 800b184:	50a3      	str	r3, [r4, r2]
 800b186:	e7dc      	b.n	800b142 <_malloc_r+0x86>
 800b188:	605a      	str	r2, [r3, #4]
 800b18a:	e7ef      	b.n	800b16c <_malloc_r+0xb0>
 800b18c:	0023      	movs	r3, r4
 800b18e:	6864      	ldr	r4, [r4, #4]
 800b190:	e7a6      	b.n	800b0e0 <_malloc_r+0x24>
 800b192:	9c00      	ldr	r4, [sp, #0]
 800b194:	6863      	ldr	r3, [r4, #4]
 800b196:	9300      	str	r3, [sp, #0]
 800b198:	e7ad      	b.n	800b0f6 <_malloc_r+0x3a>
 800b19a:	001a      	movs	r2, r3
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	42a3      	cmp	r3, r4
 800b1a0:	d1fb      	bne.n	800b19a <_malloc_r+0xde>
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	e7da      	b.n	800b15c <_malloc_r+0xa0>
 800b1a6:	230c      	movs	r3, #12
 800b1a8:	0028      	movs	r0, r5
 800b1aa:	602b      	str	r3, [r5, #0]
 800b1ac:	f000 f80e 	bl	800b1cc <__malloc_unlock>
 800b1b0:	e7c6      	b.n	800b140 <_malloc_r+0x84>
 800b1b2:	6007      	str	r7, [r0, #0]
 800b1b4:	e7da      	b.n	800b16c <_malloc_r+0xb0>
 800b1b6:	46c0      	nop			@ (mov r8, r8)
 800b1b8:	20000e7c 	.word	0x20000e7c

0800b1bc <__malloc_lock>:
 800b1bc:	b510      	push	{r4, lr}
 800b1be:	4802      	ldr	r0, [pc, #8]	@ (800b1c8 <__malloc_lock+0xc>)
 800b1c0:	f7ff f877 	bl	800a2b2 <__retarget_lock_acquire_recursive>
 800b1c4:	bd10      	pop	{r4, pc}
 800b1c6:	46c0      	nop			@ (mov r8, r8)
 800b1c8:	20000e74 	.word	0x20000e74

0800b1cc <__malloc_unlock>:
 800b1cc:	b510      	push	{r4, lr}
 800b1ce:	4802      	ldr	r0, [pc, #8]	@ (800b1d8 <__malloc_unlock+0xc>)
 800b1d0:	f7ff f870 	bl	800a2b4 <__retarget_lock_release_recursive>
 800b1d4:	bd10      	pop	{r4, pc}
 800b1d6:	46c0      	nop			@ (mov r8, r8)
 800b1d8:	20000e74 	.word	0x20000e74

0800b1dc <_Balloc>:
 800b1dc:	b570      	push	{r4, r5, r6, lr}
 800b1de:	69c5      	ldr	r5, [r0, #28]
 800b1e0:	0006      	movs	r6, r0
 800b1e2:	000c      	movs	r4, r1
 800b1e4:	2d00      	cmp	r5, #0
 800b1e6:	d10e      	bne.n	800b206 <_Balloc+0x2a>
 800b1e8:	2010      	movs	r0, #16
 800b1ea:	f7ff ff3b 	bl	800b064 <malloc>
 800b1ee:	1e02      	subs	r2, r0, #0
 800b1f0:	61f0      	str	r0, [r6, #28]
 800b1f2:	d104      	bne.n	800b1fe <_Balloc+0x22>
 800b1f4:	216b      	movs	r1, #107	@ 0x6b
 800b1f6:	4b19      	ldr	r3, [pc, #100]	@ (800b25c <_Balloc+0x80>)
 800b1f8:	4819      	ldr	r0, [pc, #100]	@ (800b260 <_Balloc+0x84>)
 800b1fa:	f000 ffb7 	bl	800c16c <__assert_func>
 800b1fe:	6045      	str	r5, [r0, #4]
 800b200:	6085      	str	r5, [r0, #8]
 800b202:	6005      	str	r5, [r0, #0]
 800b204:	60c5      	str	r5, [r0, #12]
 800b206:	69f5      	ldr	r5, [r6, #28]
 800b208:	68eb      	ldr	r3, [r5, #12]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d013      	beq.n	800b236 <_Balloc+0x5a>
 800b20e:	69f3      	ldr	r3, [r6, #28]
 800b210:	00a2      	lsls	r2, r4, #2
 800b212:	68db      	ldr	r3, [r3, #12]
 800b214:	189b      	adds	r3, r3, r2
 800b216:	6818      	ldr	r0, [r3, #0]
 800b218:	2800      	cmp	r0, #0
 800b21a:	d118      	bne.n	800b24e <_Balloc+0x72>
 800b21c:	2101      	movs	r1, #1
 800b21e:	000d      	movs	r5, r1
 800b220:	40a5      	lsls	r5, r4
 800b222:	1d6a      	adds	r2, r5, #5
 800b224:	0030      	movs	r0, r6
 800b226:	0092      	lsls	r2, r2, #2
 800b228:	f000 ffbe 	bl	800c1a8 <_calloc_r>
 800b22c:	2800      	cmp	r0, #0
 800b22e:	d00c      	beq.n	800b24a <_Balloc+0x6e>
 800b230:	6044      	str	r4, [r0, #4]
 800b232:	6085      	str	r5, [r0, #8]
 800b234:	e00d      	b.n	800b252 <_Balloc+0x76>
 800b236:	2221      	movs	r2, #33	@ 0x21
 800b238:	2104      	movs	r1, #4
 800b23a:	0030      	movs	r0, r6
 800b23c:	f000 ffb4 	bl	800c1a8 <_calloc_r>
 800b240:	69f3      	ldr	r3, [r6, #28]
 800b242:	60e8      	str	r0, [r5, #12]
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d1e1      	bne.n	800b20e <_Balloc+0x32>
 800b24a:	2000      	movs	r0, #0
 800b24c:	bd70      	pop	{r4, r5, r6, pc}
 800b24e:	6802      	ldr	r2, [r0, #0]
 800b250:	601a      	str	r2, [r3, #0]
 800b252:	2300      	movs	r3, #0
 800b254:	6103      	str	r3, [r0, #16]
 800b256:	60c3      	str	r3, [r0, #12]
 800b258:	e7f8      	b.n	800b24c <_Balloc+0x70>
 800b25a:	46c0      	nop			@ (mov r8, r8)
 800b25c:	0800ca79 	.word	0x0800ca79
 800b260:	0800caf9 	.word	0x0800caf9

0800b264 <_Bfree>:
 800b264:	b570      	push	{r4, r5, r6, lr}
 800b266:	69c6      	ldr	r6, [r0, #28]
 800b268:	0005      	movs	r5, r0
 800b26a:	000c      	movs	r4, r1
 800b26c:	2e00      	cmp	r6, #0
 800b26e:	d10e      	bne.n	800b28e <_Bfree+0x2a>
 800b270:	2010      	movs	r0, #16
 800b272:	f7ff fef7 	bl	800b064 <malloc>
 800b276:	1e02      	subs	r2, r0, #0
 800b278:	61e8      	str	r0, [r5, #28]
 800b27a:	d104      	bne.n	800b286 <_Bfree+0x22>
 800b27c:	218f      	movs	r1, #143	@ 0x8f
 800b27e:	4b09      	ldr	r3, [pc, #36]	@ (800b2a4 <_Bfree+0x40>)
 800b280:	4809      	ldr	r0, [pc, #36]	@ (800b2a8 <_Bfree+0x44>)
 800b282:	f000 ff73 	bl	800c16c <__assert_func>
 800b286:	6046      	str	r6, [r0, #4]
 800b288:	6086      	str	r6, [r0, #8]
 800b28a:	6006      	str	r6, [r0, #0]
 800b28c:	60c6      	str	r6, [r0, #12]
 800b28e:	2c00      	cmp	r4, #0
 800b290:	d007      	beq.n	800b2a2 <_Bfree+0x3e>
 800b292:	69eb      	ldr	r3, [r5, #28]
 800b294:	6862      	ldr	r2, [r4, #4]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	0092      	lsls	r2, r2, #2
 800b29a:	189b      	adds	r3, r3, r2
 800b29c:	681a      	ldr	r2, [r3, #0]
 800b29e:	6022      	str	r2, [r4, #0]
 800b2a0:	601c      	str	r4, [r3, #0]
 800b2a2:	bd70      	pop	{r4, r5, r6, pc}
 800b2a4:	0800ca79 	.word	0x0800ca79
 800b2a8:	0800caf9 	.word	0x0800caf9

0800b2ac <__multadd>:
 800b2ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2ae:	000f      	movs	r7, r1
 800b2b0:	9001      	str	r0, [sp, #4]
 800b2b2:	000c      	movs	r4, r1
 800b2b4:	001e      	movs	r6, r3
 800b2b6:	2000      	movs	r0, #0
 800b2b8:	690d      	ldr	r5, [r1, #16]
 800b2ba:	3714      	adds	r7, #20
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	3001      	adds	r0, #1
 800b2c0:	b299      	uxth	r1, r3
 800b2c2:	4351      	muls	r1, r2
 800b2c4:	0c1b      	lsrs	r3, r3, #16
 800b2c6:	4353      	muls	r3, r2
 800b2c8:	1989      	adds	r1, r1, r6
 800b2ca:	0c0e      	lsrs	r6, r1, #16
 800b2cc:	199b      	adds	r3, r3, r6
 800b2ce:	0c1e      	lsrs	r6, r3, #16
 800b2d0:	b289      	uxth	r1, r1
 800b2d2:	041b      	lsls	r3, r3, #16
 800b2d4:	185b      	adds	r3, r3, r1
 800b2d6:	c708      	stmia	r7!, {r3}
 800b2d8:	4285      	cmp	r5, r0
 800b2da:	dcef      	bgt.n	800b2bc <__multadd+0x10>
 800b2dc:	2e00      	cmp	r6, #0
 800b2de:	d022      	beq.n	800b326 <__multadd+0x7a>
 800b2e0:	68a3      	ldr	r3, [r4, #8]
 800b2e2:	42ab      	cmp	r3, r5
 800b2e4:	dc19      	bgt.n	800b31a <__multadd+0x6e>
 800b2e6:	6861      	ldr	r1, [r4, #4]
 800b2e8:	9801      	ldr	r0, [sp, #4]
 800b2ea:	3101      	adds	r1, #1
 800b2ec:	f7ff ff76 	bl	800b1dc <_Balloc>
 800b2f0:	1e07      	subs	r7, r0, #0
 800b2f2:	d105      	bne.n	800b300 <__multadd+0x54>
 800b2f4:	003a      	movs	r2, r7
 800b2f6:	21ba      	movs	r1, #186	@ 0xba
 800b2f8:	4b0c      	ldr	r3, [pc, #48]	@ (800b32c <__multadd+0x80>)
 800b2fa:	480d      	ldr	r0, [pc, #52]	@ (800b330 <__multadd+0x84>)
 800b2fc:	f000 ff36 	bl	800c16c <__assert_func>
 800b300:	0021      	movs	r1, r4
 800b302:	6922      	ldr	r2, [r4, #16]
 800b304:	310c      	adds	r1, #12
 800b306:	3202      	adds	r2, #2
 800b308:	0092      	lsls	r2, r2, #2
 800b30a:	300c      	adds	r0, #12
 800b30c:	f000 ff24 	bl	800c158 <memcpy>
 800b310:	0021      	movs	r1, r4
 800b312:	9801      	ldr	r0, [sp, #4]
 800b314:	f7ff ffa6 	bl	800b264 <_Bfree>
 800b318:	003c      	movs	r4, r7
 800b31a:	1d2b      	adds	r3, r5, #4
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	18e3      	adds	r3, r4, r3
 800b320:	3501      	adds	r5, #1
 800b322:	605e      	str	r6, [r3, #4]
 800b324:	6125      	str	r5, [r4, #16]
 800b326:	0020      	movs	r0, r4
 800b328:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b32a:	46c0      	nop			@ (mov r8, r8)
 800b32c:	0800cae8 	.word	0x0800cae8
 800b330:	0800caf9 	.word	0x0800caf9

0800b334 <__hi0bits>:
 800b334:	2280      	movs	r2, #128	@ 0x80
 800b336:	0003      	movs	r3, r0
 800b338:	0252      	lsls	r2, r2, #9
 800b33a:	2000      	movs	r0, #0
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d201      	bcs.n	800b344 <__hi0bits+0x10>
 800b340:	041b      	lsls	r3, r3, #16
 800b342:	3010      	adds	r0, #16
 800b344:	2280      	movs	r2, #128	@ 0x80
 800b346:	0452      	lsls	r2, r2, #17
 800b348:	4293      	cmp	r3, r2
 800b34a:	d201      	bcs.n	800b350 <__hi0bits+0x1c>
 800b34c:	3008      	adds	r0, #8
 800b34e:	021b      	lsls	r3, r3, #8
 800b350:	2280      	movs	r2, #128	@ 0x80
 800b352:	0552      	lsls	r2, r2, #21
 800b354:	4293      	cmp	r3, r2
 800b356:	d201      	bcs.n	800b35c <__hi0bits+0x28>
 800b358:	3004      	adds	r0, #4
 800b35a:	011b      	lsls	r3, r3, #4
 800b35c:	2280      	movs	r2, #128	@ 0x80
 800b35e:	05d2      	lsls	r2, r2, #23
 800b360:	4293      	cmp	r3, r2
 800b362:	d201      	bcs.n	800b368 <__hi0bits+0x34>
 800b364:	3002      	adds	r0, #2
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	2b00      	cmp	r3, #0
 800b36a:	db03      	blt.n	800b374 <__hi0bits+0x40>
 800b36c:	3001      	adds	r0, #1
 800b36e:	4213      	tst	r3, r2
 800b370:	d100      	bne.n	800b374 <__hi0bits+0x40>
 800b372:	2020      	movs	r0, #32
 800b374:	4770      	bx	lr

0800b376 <__lo0bits>:
 800b376:	6803      	ldr	r3, [r0, #0]
 800b378:	0001      	movs	r1, r0
 800b37a:	2207      	movs	r2, #7
 800b37c:	0018      	movs	r0, r3
 800b37e:	4010      	ands	r0, r2
 800b380:	4213      	tst	r3, r2
 800b382:	d00d      	beq.n	800b3a0 <__lo0bits+0x2a>
 800b384:	3a06      	subs	r2, #6
 800b386:	2000      	movs	r0, #0
 800b388:	4213      	tst	r3, r2
 800b38a:	d105      	bne.n	800b398 <__lo0bits+0x22>
 800b38c:	3002      	adds	r0, #2
 800b38e:	4203      	tst	r3, r0
 800b390:	d003      	beq.n	800b39a <__lo0bits+0x24>
 800b392:	40d3      	lsrs	r3, r2
 800b394:	0010      	movs	r0, r2
 800b396:	600b      	str	r3, [r1, #0]
 800b398:	4770      	bx	lr
 800b39a:	089b      	lsrs	r3, r3, #2
 800b39c:	600b      	str	r3, [r1, #0]
 800b39e:	e7fb      	b.n	800b398 <__lo0bits+0x22>
 800b3a0:	b29a      	uxth	r2, r3
 800b3a2:	2a00      	cmp	r2, #0
 800b3a4:	d101      	bne.n	800b3aa <__lo0bits+0x34>
 800b3a6:	2010      	movs	r0, #16
 800b3a8:	0c1b      	lsrs	r3, r3, #16
 800b3aa:	b2da      	uxtb	r2, r3
 800b3ac:	2a00      	cmp	r2, #0
 800b3ae:	d101      	bne.n	800b3b4 <__lo0bits+0x3e>
 800b3b0:	3008      	adds	r0, #8
 800b3b2:	0a1b      	lsrs	r3, r3, #8
 800b3b4:	071a      	lsls	r2, r3, #28
 800b3b6:	d101      	bne.n	800b3bc <__lo0bits+0x46>
 800b3b8:	3004      	adds	r0, #4
 800b3ba:	091b      	lsrs	r3, r3, #4
 800b3bc:	079a      	lsls	r2, r3, #30
 800b3be:	d101      	bne.n	800b3c4 <__lo0bits+0x4e>
 800b3c0:	3002      	adds	r0, #2
 800b3c2:	089b      	lsrs	r3, r3, #2
 800b3c4:	07da      	lsls	r2, r3, #31
 800b3c6:	d4e9      	bmi.n	800b39c <__lo0bits+0x26>
 800b3c8:	3001      	adds	r0, #1
 800b3ca:	085b      	lsrs	r3, r3, #1
 800b3cc:	d1e6      	bne.n	800b39c <__lo0bits+0x26>
 800b3ce:	2020      	movs	r0, #32
 800b3d0:	e7e2      	b.n	800b398 <__lo0bits+0x22>
	...

0800b3d4 <__i2b>:
 800b3d4:	b510      	push	{r4, lr}
 800b3d6:	000c      	movs	r4, r1
 800b3d8:	2101      	movs	r1, #1
 800b3da:	f7ff feff 	bl	800b1dc <_Balloc>
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	d107      	bne.n	800b3f2 <__i2b+0x1e>
 800b3e2:	2146      	movs	r1, #70	@ 0x46
 800b3e4:	4c05      	ldr	r4, [pc, #20]	@ (800b3fc <__i2b+0x28>)
 800b3e6:	0002      	movs	r2, r0
 800b3e8:	4b05      	ldr	r3, [pc, #20]	@ (800b400 <__i2b+0x2c>)
 800b3ea:	0020      	movs	r0, r4
 800b3ec:	31ff      	adds	r1, #255	@ 0xff
 800b3ee:	f000 febd 	bl	800c16c <__assert_func>
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	6144      	str	r4, [r0, #20]
 800b3f6:	6103      	str	r3, [r0, #16]
 800b3f8:	bd10      	pop	{r4, pc}
 800b3fa:	46c0      	nop			@ (mov r8, r8)
 800b3fc:	0800caf9 	.word	0x0800caf9
 800b400:	0800cae8 	.word	0x0800cae8

0800b404 <__multiply>:
 800b404:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b406:	0014      	movs	r4, r2
 800b408:	690a      	ldr	r2, [r1, #16]
 800b40a:	6923      	ldr	r3, [r4, #16]
 800b40c:	000d      	movs	r5, r1
 800b40e:	b08b      	sub	sp, #44	@ 0x2c
 800b410:	429a      	cmp	r2, r3
 800b412:	db02      	blt.n	800b41a <__multiply+0x16>
 800b414:	0023      	movs	r3, r4
 800b416:	000c      	movs	r4, r1
 800b418:	001d      	movs	r5, r3
 800b41a:	6927      	ldr	r7, [r4, #16]
 800b41c:	692e      	ldr	r6, [r5, #16]
 800b41e:	6861      	ldr	r1, [r4, #4]
 800b420:	19bb      	adds	r3, r7, r6
 800b422:	9303      	str	r3, [sp, #12]
 800b424:	68a3      	ldr	r3, [r4, #8]
 800b426:	19ba      	adds	r2, r7, r6
 800b428:	4293      	cmp	r3, r2
 800b42a:	da00      	bge.n	800b42e <__multiply+0x2a>
 800b42c:	3101      	adds	r1, #1
 800b42e:	f7ff fed5 	bl	800b1dc <_Balloc>
 800b432:	9002      	str	r0, [sp, #8]
 800b434:	2800      	cmp	r0, #0
 800b436:	d106      	bne.n	800b446 <__multiply+0x42>
 800b438:	21b1      	movs	r1, #177	@ 0xb1
 800b43a:	4b49      	ldr	r3, [pc, #292]	@ (800b560 <__multiply+0x15c>)
 800b43c:	4849      	ldr	r0, [pc, #292]	@ (800b564 <__multiply+0x160>)
 800b43e:	9a02      	ldr	r2, [sp, #8]
 800b440:	0049      	lsls	r1, r1, #1
 800b442:	f000 fe93 	bl	800c16c <__assert_func>
 800b446:	9b02      	ldr	r3, [sp, #8]
 800b448:	2200      	movs	r2, #0
 800b44a:	3314      	adds	r3, #20
 800b44c:	469c      	mov	ip, r3
 800b44e:	19bb      	adds	r3, r7, r6
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	4463      	add	r3, ip
 800b454:	9304      	str	r3, [sp, #16]
 800b456:	4663      	mov	r3, ip
 800b458:	9904      	ldr	r1, [sp, #16]
 800b45a:	428b      	cmp	r3, r1
 800b45c:	d32a      	bcc.n	800b4b4 <__multiply+0xb0>
 800b45e:	0023      	movs	r3, r4
 800b460:	00bf      	lsls	r7, r7, #2
 800b462:	3314      	adds	r3, #20
 800b464:	3514      	adds	r5, #20
 800b466:	9308      	str	r3, [sp, #32]
 800b468:	00b6      	lsls	r6, r6, #2
 800b46a:	19db      	adds	r3, r3, r7
 800b46c:	9305      	str	r3, [sp, #20]
 800b46e:	19ab      	adds	r3, r5, r6
 800b470:	9309      	str	r3, [sp, #36]	@ 0x24
 800b472:	2304      	movs	r3, #4
 800b474:	9306      	str	r3, [sp, #24]
 800b476:	0023      	movs	r3, r4
 800b478:	9a05      	ldr	r2, [sp, #20]
 800b47a:	3315      	adds	r3, #21
 800b47c:	9501      	str	r5, [sp, #4]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d305      	bcc.n	800b48e <__multiply+0x8a>
 800b482:	1b13      	subs	r3, r2, r4
 800b484:	3b15      	subs	r3, #21
 800b486:	089b      	lsrs	r3, r3, #2
 800b488:	3301      	adds	r3, #1
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	9306      	str	r3, [sp, #24]
 800b48e:	9b01      	ldr	r3, [sp, #4]
 800b490:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b492:	4293      	cmp	r3, r2
 800b494:	d310      	bcc.n	800b4b8 <__multiply+0xb4>
 800b496:	9b03      	ldr	r3, [sp, #12]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	dd05      	ble.n	800b4a8 <__multiply+0xa4>
 800b49c:	9b04      	ldr	r3, [sp, #16]
 800b49e:	3b04      	subs	r3, #4
 800b4a0:	9304      	str	r3, [sp, #16]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d056      	beq.n	800b556 <__multiply+0x152>
 800b4a8:	9b02      	ldr	r3, [sp, #8]
 800b4aa:	9a03      	ldr	r2, [sp, #12]
 800b4ac:	0018      	movs	r0, r3
 800b4ae:	611a      	str	r2, [r3, #16]
 800b4b0:	b00b      	add	sp, #44	@ 0x2c
 800b4b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4b4:	c304      	stmia	r3!, {r2}
 800b4b6:	e7cf      	b.n	800b458 <__multiply+0x54>
 800b4b8:	9b01      	ldr	r3, [sp, #4]
 800b4ba:	6818      	ldr	r0, [r3, #0]
 800b4bc:	b280      	uxth	r0, r0
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	d01e      	beq.n	800b500 <__multiply+0xfc>
 800b4c2:	4667      	mov	r7, ip
 800b4c4:	2500      	movs	r5, #0
 800b4c6:	9e08      	ldr	r6, [sp, #32]
 800b4c8:	ce02      	ldmia	r6!, {r1}
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	9307      	str	r3, [sp, #28]
 800b4ce:	b28b      	uxth	r3, r1
 800b4d0:	4343      	muls	r3, r0
 800b4d2:	001a      	movs	r2, r3
 800b4d4:	466b      	mov	r3, sp
 800b4d6:	0c09      	lsrs	r1, r1, #16
 800b4d8:	8b9b      	ldrh	r3, [r3, #28]
 800b4da:	4341      	muls	r1, r0
 800b4dc:	18d3      	adds	r3, r2, r3
 800b4de:	9a07      	ldr	r2, [sp, #28]
 800b4e0:	195b      	adds	r3, r3, r5
 800b4e2:	0c12      	lsrs	r2, r2, #16
 800b4e4:	1889      	adds	r1, r1, r2
 800b4e6:	0c1a      	lsrs	r2, r3, #16
 800b4e8:	188a      	adds	r2, r1, r2
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	0c15      	lsrs	r5, r2, #16
 800b4ee:	0412      	lsls	r2, r2, #16
 800b4f0:	431a      	orrs	r2, r3
 800b4f2:	9b05      	ldr	r3, [sp, #20]
 800b4f4:	c704      	stmia	r7!, {r2}
 800b4f6:	42b3      	cmp	r3, r6
 800b4f8:	d8e6      	bhi.n	800b4c8 <__multiply+0xc4>
 800b4fa:	4663      	mov	r3, ip
 800b4fc:	9a06      	ldr	r2, [sp, #24]
 800b4fe:	509d      	str	r5, [r3, r2]
 800b500:	9b01      	ldr	r3, [sp, #4]
 800b502:	6818      	ldr	r0, [r3, #0]
 800b504:	0c00      	lsrs	r0, r0, #16
 800b506:	d020      	beq.n	800b54a <__multiply+0x146>
 800b508:	4663      	mov	r3, ip
 800b50a:	0025      	movs	r5, r4
 800b50c:	4661      	mov	r1, ip
 800b50e:	2700      	movs	r7, #0
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	3514      	adds	r5, #20
 800b514:	682a      	ldr	r2, [r5, #0]
 800b516:	680e      	ldr	r6, [r1, #0]
 800b518:	b292      	uxth	r2, r2
 800b51a:	4342      	muls	r2, r0
 800b51c:	0c36      	lsrs	r6, r6, #16
 800b51e:	1992      	adds	r2, r2, r6
 800b520:	19d2      	adds	r2, r2, r7
 800b522:	0416      	lsls	r6, r2, #16
 800b524:	b29b      	uxth	r3, r3
 800b526:	431e      	orrs	r6, r3
 800b528:	600e      	str	r6, [r1, #0]
 800b52a:	cd40      	ldmia	r5!, {r6}
 800b52c:	684b      	ldr	r3, [r1, #4]
 800b52e:	0c36      	lsrs	r6, r6, #16
 800b530:	4346      	muls	r6, r0
 800b532:	b29b      	uxth	r3, r3
 800b534:	0c12      	lsrs	r2, r2, #16
 800b536:	18f3      	adds	r3, r6, r3
 800b538:	189b      	adds	r3, r3, r2
 800b53a:	9a05      	ldr	r2, [sp, #20]
 800b53c:	0c1f      	lsrs	r7, r3, #16
 800b53e:	3104      	adds	r1, #4
 800b540:	42aa      	cmp	r2, r5
 800b542:	d8e7      	bhi.n	800b514 <__multiply+0x110>
 800b544:	4662      	mov	r2, ip
 800b546:	9906      	ldr	r1, [sp, #24]
 800b548:	5053      	str	r3, [r2, r1]
 800b54a:	9b01      	ldr	r3, [sp, #4]
 800b54c:	3304      	adds	r3, #4
 800b54e:	9301      	str	r3, [sp, #4]
 800b550:	2304      	movs	r3, #4
 800b552:	449c      	add	ip, r3
 800b554:	e79b      	b.n	800b48e <__multiply+0x8a>
 800b556:	9b03      	ldr	r3, [sp, #12]
 800b558:	3b01      	subs	r3, #1
 800b55a:	9303      	str	r3, [sp, #12]
 800b55c:	e79b      	b.n	800b496 <__multiply+0x92>
 800b55e:	46c0      	nop			@ (mov r8, r8)
 800b560:	0800cae8 	.word	0x0800cae8
 800b564:	0800caf9 	.word	0x0800caf9

0800b568 <__pow5mult>:
 800b568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b56a:	2303      	movs	r3, #3
 800b56c:	0015      	movs	r5, r2
 800b56e:	0007      	movs	r7, r0
 800b570:	000e      	movs	r6, r1
 800b572:	401a      	ands	r2, r3
 800b574:	421d      	tst	r5, r3
 800b576:	d008      	beq.n	800b58a <__pow5mult+0x22>
 800b578:	4925      	ldr	r1, [pc, #148]	@ (800b610 <__pow5mult+0xa8>)
 800b57a:	3a01      	subs	r2, #1
 800b57c:	0092      	lsls	r2, r2, #2
 800b57e:	5852      	ldr	r2, [r2, r1]
 800b580:	2300      	movs	r3, #0
 800b582:	0031      	movs	r1, r6
 800b584:	f7ff fe92 	bl	800b2ac <__multadd>
 800b588:	0006      	movs	r6, r0
 800b58a:	10ad      	asrs	r5, r5, #2
 800b58c:	d03d      	beq.n	800b60a <__pow5mult+0xa2>
 800b58e:	69fc      	ldr	r4, [r7, #28]
 800b590:	2c00      	cmp	r4, #0
 800b592:	d10f      	bne.n	800b5b4 <__pow5mult+0x4c>
 800b594:	2010      	movs	r0, #16
 800b596:	f7ff fd65 	bl	800b064 <malloc>
 800b59a:	1e02      	subs	r2, r0, #0
 800b59c:	61f8      	str	r0, [r7, #28]
 800b59e:	d105      	bne.n	800b5ac <__pow5mult+0x44>
 800b5a0:	21b4      	movs	r1, #180	@ 0xb4
 800b5a2:	4b1c      	ldr	r3, [pc, #112]	@ (800b614 <__pow5mult+0xac>)
 800b5a4:	481c      	ldr	r0, [pc, #112]	@ (800b618 <__pow5mult+0xb0>)
 800b5a6:	31ff      	adds	r1, #255	@ 0xff
 800b5a8:	f000 fde0 	bl	800c16c <__assert_func>
 800b5ac:	6044      	str	r4, [r0, #4]
 800b5ae:	6084      	str	r4, [r0, #8]
 800b5b0:	6004      	str	r4, [r0, #0]
 800b5b2:	60c4      	str	r4, [r0, #12]
 800b5b4:	69fb      	ldr	r3, [r7, #28]
 800b5b6:	689c      	ldr	r4, [r3, #8]
 800b5b8:	9301      	str	r3, [sp, #4]
 800b5ba:	2c00      	cmp	r4, #0
 800b5bc:	d108      	bne.n	800b5d0 <__pow5mult+0x68>
 800b5be:	0038      	movs	r0, r7
 800b5c0:	4916      	ldr	r1, [pc, #88]	@ (800b61c <__pow5mult+0xb4>)
 800b5c2:	f7ff ff07 	bl	800b3d4 <__i2b>
 800b5c6:	9b01      	ldr	r3, [sp, #4]
 800b5c8:	0004      	movs	r4, r0
 800b5ca:	6098      	str	r0, [r3, #8]
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	6003      	str	r3, [r0, #0]
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	421d      	tst	r5, r3
 800b5d4:	d00a      	beq.n	800b5ec <__pow5mult+0x84>
 800b5d6:	0031      	movs	r1, r6
 800b5d8:	0022      	movs	r2, r4
 800b5da:	0038      	movs	r0, r7
 800b5dc:	f7ff ff12 	bl	800b404 <__multiply>
 800b5e0:	0031      	movs	r1, r6
 800b5e2:	9001      	str	r0, [sp, #4]
 800b5e4:	0038      	movs	r0, r7
 800b5e6:	f7ff fe3d 	bl	800b264 <_Bfree>
 800b5ea:	9e01      	ldr	r6, [sp, #4]
 800b5ec:	106d      	asrs	r5, r5, #1
 800b5ee:	d00c      	beq.n	800b60a <__pow5mult+0xa2>
 800b5f0:	6820      	ldr	r0, [r4, #0]
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	d107      	bne.n	800b606 <__pow5mult+0x9e>
 800b5f6:	0022      	movs	r2, r4
 800b5f8:	0021      	movs	r1, r4
 800b5fa:	0038      	movs	r0, r7
 800b5fc:	f7ff ff02 	bl	800b404 <__multiply>
 800b600:	2300      	movs	r3, #0
 800b602:	6020      	str	r0, [r4, #0]
 800b604:	6003      	str	r3, [r0, #0]
 800b606:	0004      	movs	r4, r0
 800b608:	e7e2      	b.n	800b5d0 <__pow5mult+0x68>
 800b60a:	0030      	movs	r0, r6
 800b60c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b60e:	46c0      	nop			@ (mov r8, r8)
 800b610:	0800cb54 	.word	0x0800cb54
 800b614:	0800ca79 	.word	0x0800ca79
 800b618:	0800caf9 	.word	0x0800caf9
 800b61c:	00000271 	.word	0x00000271

0800b620 <__lshift>:
 800b620:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b622:	000c      	movs	r4, r1
 800b624:	0016      	movs	r6, r2
 800b626:	6923      	ldr	r3, [r4, #16]
 800b628:	1157      	asrs	r7, r2, #5
 800b62a:	b085      	sub	sp, #20
 800b62c:	18fb      	adds	r3, r7, r3
 800b62e:	9301      	str	r3, [sp, #4]
 800b630:	3301      	adds	r3, #1
 800b632:	9300      	str	r3, [sp, #0]
 800b634:	6849      	ldr	r1, [r1, #4]
 800b636:	68a3      	ldr	r3, [r4, #8]
 800b638:	9002      	str	r0, [sp, #8]
 800b63a:	9a00      	ldr	r2, [sp, #0]
 800b63c:	4293      	cmp	r3, r2
 800b63e:	db10      	blt.n	800b662 <__lshift+0x42>
 800b640:	9802      	ldr	r0, [sp, #8]
 800b642:	f7ff fdcb 	bl	800b1dc <_Balloc>
 800b646:	2300      	movs	r3, #0
 800b648:	0001      	movs	r1, r0
 800b64a:	0005      	movs	r5, r0
 800b64c:	001a      	movs	r2, r3
 800b64e:	3114      	adds	r1, #20
 800b650:	4298      	cmp	r0, r3
 800b652:	d10c      	bne.n	800b66e <__lshift+0x4e>
 800b654:	21ef      	movs	r1, #239	@ 0xef
 800b656:	002a      	movs	r2, r5
 800b658:	4b25      	ldr	r3, [pc, #148]	@ (800b6f0 <__lshift+0xd0>)
 800b65a:	4826      	ldr	r0, [pc, #152]	@ (800b6f4 <__lshift+0xd4>)
 800b65c:	0049      	lsls	r1, r1, #1
 800b65e:	f000 fd85 	bl	800c16c <__assert_func>
 800b662:	3101      	adds	r1, #1
 800b664:	005b      	lsls	r3, r3, #1
 800b666:	e7e8      	b.n	800b63a <__lshift+0x1a>
 800b668:	0098      	lsls	r0, r3, #2
 800b66a:	500a      	str	r2, [r1, r0]
 800b66c:	3301      	adds	r3, #1
 800b66e:	42bb      	cmp	r3, r7
 800b670:	dbfa      	blt.n	800b668 <__lshift+0x48>
 800b672:	43fb      	mvns	r3, r7
 800b674:	17db      	asrs	r3, r3, #31
 800b676:	401f      	ands	r7, r3
 800b678:	00bf      	lsls	r7, r7, #2
 800b67a:	0023      	movs	r3, r4
 800b67c:	201f      	movs	r0, #31
 800b67e:	19c9      	adds	r1, r1, r7
 800b680:	0037      	movs	r7, r6
 800b682:	6922      	ldr	r2, [r4, #16]
 800b684:	3314      	adds	r3, #20
 800b686:	0092      	lsls	r2, r2, #2
 800b688:	189a      	adds	r2, r3, r2
 800b68a:	4007      	ands	r7, r0
 800b68c:	4206      	tst	r6, r0
 800b68e:	d029      	beq.n	800b6e4 <__lshift+0xc4>
 800b690:	3001      	adds	r0, #1
 800b692:	1bc0      	subs	r0, r0, r7
 800b694:	9003      	str	r0, [sp, #12]
 800b696:	468c      	mov	ip, r1
 800b698:	2000      	movs	r0, #0
 800b69a:	681e      	ldr	r6, [r3, #0]
 800b69c:	40be      	lsls	r6, r7
 800b69e:	4306      	orrs	r6, r0
 800b6a0:	4660      	mov	r0, ip
 800b6a2:	c040      	stmia	r0!, {r6}
 800b6a4:	4684      	mov	ip, r0
 800b6a6:	9e03      	ldr	r6, [sp, #12]
 800b6a8:	cb01      	ldmia	r3!, {r0}
 800b6aa:	40f0      	lsrs	r0, r6
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d8f4      	bhi.n	800b69a <__lshift+0x7a>
 800b6b0:	0026      	movs	r6, r4
 800b6b2:	3615      	adds	r6, #21
 800b6b4:	2304      	movs	r3, #4
 800b6b6:	42b2      	cmp	r2, r6
 800b6b8:	d304      	bcc.n	800b6c4 <__lshift+0xa4>
 800b6ba:	1b13      	subs	r3, r2, r4
 800b6bc:	3b15      	subs	r3, #21
 800b6be:	089b      	lsrs	r3, r3, #2
 800b6c0:	3301      	adds	r3, #1
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	50c8      	str	r0, [r1, r3]
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	d002      	beq.n	800b6d0 <__lshift+0xb0>
 800b6ca:	9b01      	ldr	r3, [sp, #4]
 800b6cc:	3302      	adds	r3, #2
 800b6ce:	9300      	str	r3, [sp, #0]
 800b6d0:	9b00      	ldr	r3, [sp, #0]
 800b6d2:	9802      	ldr	r0, [sp, #8]
 800b6d4:	3b01      	subs	r3, #1
 800b6d6:	0021      	movs	r1, r4
 800b6d8:	612b      	str	r3, [r5, #16]
 800b6da:	f7ff fdc3 	bl	800b264 <_Bfree>
 800b6de:	0028      	movs	r0, r5
 800b6e0:	b005      	add	sp, #20
 800b6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6e4:	cb01      	ldmia	r3!, {r0}
 800b6e6:	c101      	stmia	r1!, {r0}
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d8fb      	bhi.n	800b6e4 <__lshift+0xc4>
 800b6ec:	e7f0      	b.n	800b6d0 <__lshift+0xb0>
 800b6ee:	46c0      	nop			@ (mov r8, r8)
 800b6f0:	0800cae8 	.word	0x0800cae8
 800b6f4:	0800caf9 	.word	0x0800caf9

0800b6f8 <__mcmp>:
 800b6f8:	b530      	push	{r4, r5, lr}
 800b6fa:	690b      	ldr	r3, [r1, #16]
 800b6fc:	6904      	ldr	r4, [r0, #16]
 800b6fe:	0002      	movs	r2, r0
 800b700:	1ae0      	subs	r0, r4, r3
 800b702:	429c      	cmp	r4, r3
 800b704:	d10f      	bne.n	800b726 <__mcmp+0x2e>
 800b706:	3214      	adds	r2, #20
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	3114      	adds	r1, #20
 800b70c:	0014      	movs	r4, r2
 800b70e:	18c9      	adds	r1, r1, r3
 800b710:	18d2      	adds	r2, r2, r3
 800b712:	3a04      	subs	r2, #4
 800b714:	3904      	subs	r1, #4
 800b716:	6815      	ldr	r5, [r2, #0]
 800b718:	680b      	ldr	r3, [r1, #0]
 800b71a:	429d      	cmp	r5, r3
 800b71c:	d004      	beq.n	800b728 <__mcmp+0x30>
 800b71e:	2001      	movs	r0, #1
 800b720:	429d      	cmp	r5, r3
 800b722:	d200      	bcs.n	800b726 <__mcmp+0x2e>
 800b724:	3802      	subs	r0, #2
 800b726:	bd30      	pop	{r4, r5, pc}
 800b728:	4294      	cmp	r4, r2
 800b72a:	d3f2      	bcc.n	800b712 <__mcmp+0x1a>
 800b72c:	e7fb      	b.n	800b726 <__mcmp+0x2e>
	...

0800b730 <__mdiff>:
 800b730:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b732:	000c      	movs	r4, r1
 800b734:	b087      	sub	sp, #28
 800b736:	9000      	str	r0, [sp, #0]
 800b738:	0011      	movs	r1, r2
 800b73a:	0020      	movs	r0, r4
 800b73c:	0017      	movs	r7, r2
 800b73e:	f7ff ffdb 	bl	800b6f8 <__mcmp>
 800b742:	1e05      	subs	r5, r0, #0
 800b744:	d110      	bne.n	800b768 <__mdiff+0x38>
 800b746:	0001      	movs	r1, r0
 800b748:	9800      	ldr	r0, [sp, #0]
 800b74a:	f7ff fd47 	bl	800b1dc <_Balloc>
 800b74e:	1e02      	subs	r2, r0, #0
 800b750:	d104      	bne.n	800b75c <__mdiff+0x2c>
 800b752:	4b40      	ldr	r3, [pc, #256]	@ (800b854 <__mdiff+0x124>)
 800b754:	4840      	ldr	r0, [pc, #256]	@ (800b858 <__mdiff+0x128>)
 800b756:	4941      	ldr	r1, [pc, #260]	@ (800b85c <__mdiff+0x12c>)
 800b758:	f000 fd08 	bl	800c16c <__assert_func>
 800b75c:	2301      	movs	r3, #1
 800b75e:	6145      	str	r5, [r0, #20]
 800b760:	6103      	str	r3, [r0, #16]
 800b762:	0010      	movs	r0, r2
 800b764:	b007      	add	sp, #28
 800b766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b768:	2600      	movs	r6, #0
 800b76a:	42b0      	cmp	r0, r6
 800b76c:	da03      	bge.n	800b776 <__mdiff+0x46>
 800b76e:	0023      	movs	r3, r4
 800b770:	003c      	movs	r4, r7
 800b772:	001f      	movs	r7, r3
 800b774:	3601      	adds	r6, #1
 800b776:	6861      	ldr	r1, [r4, #4]
 800b778:	9800      	ldr	r0, [sp, #0]
 800b77a:	f7ff fd2f 	bl	800b1dc <_Balloc>
 800b77e:	1e02      	subs	r2, r0, #0
 800b780:	d103      	bne.n	800b78a <__mdiff+0x5a>
 800b782:	4b34      	ldr	r3, [pc, #208]	@ (800b854 <__mdiff+0x124>)
 800b784:	4834      	ldr	r0, [pc, #208]	@ (800b858 <__mdiff+0x128>)
 800b786:	4936      	ldr	r1, [pc, #216]	@ (800b860 <__mdiff+0x130>)
 800b788:	e7e6      	b.n	800b758 <__mdiff+0x28>
 800b78a:	6923      	ldr	r3, [r4, #16]
 800b78c:	3414      	adds	r4, #20
 800b78e:	9300      	str	r3, [sp, #0]
 800b790:	009b      	lsls	r3, r3, #2
 800b792:	18e3      	adds	r3, r4, r3
 800b794:	0021      	movs	r1, r4
 800b796:	9401      	str	r4, [sp, #4]
 800b798:	003c      	movs	r4, r7
 800b79a:	9302      	str	r3, [sp, #8]
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	3414      	adds	r4, #20
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	18e3      	adds	r3, r4, r3
 800b7a4:	9303      	str	r3, [sp, #12]
 800b7a6:	0003      	movs	r3, r0
 800b7a8:	60c6      	str	r6, [r0, #12]
 800b7aa:	468c      	mov	ip, r1
 800b7ac:	2000      	movs	r0, #0
 800b7ae:	3314      	adds	r3, #20
 800b7b0:	9304      	str	r3, [sp, #16]
 800b7b2:	9305      	str	r3, [sp, #20]
 800b7b4:	4663      	mov	r3, ip
 800b7b6:	cb20      	ldmia	r3!, {r5}
 800b7b8:	b2a9      	uxth	r1, r5
 800b7ba:	000e      	movs	r6, r1
 800b7bc:	469c      	mov	ip, r3
 800b7be:	cc08      	ldmia	r4!, {r3}
 800b7c0:	0c2d      	lsrs	r5, r5, #16
 800b7c2:	b299      	uxth	r1, r3
 800b7c4:	1a71      	subs	r1, r6, r1
 800b7c6:	1809      	adds	r1, r1, r0
 800b7c8:	0c1b      	lsrs	r3, r3, #16
 800b7ca:	1408      	asrs	r0, r1, #16
 800b7cc:	1aeb      	subs	r3, r5, r3
 800b7ce:	181b      	adds	r3, r3, r0
 800b7d0:	1418      	asrs	r0, r3, #16
 800b7d2:	b289      	uxth	r1, r1
 800b7d4:	041b      	lsls	r3, r3, #16
 800b7d6:	4319      	orrs	r1, r3
 800b7d8:	9b05      	ldr	r3, [sp, #20]
 800b7da:	c302      	stmia	r3!, {r1}
 800b7dc:	9305      	str	r3, [sp, #20]
 800b7de:	9b03      	ldr	r3, [sp, #12]
 800b7e0:	42a3      	cmp	r3, r4
 800b7e2:	d8e7      	bhi.n	800b7b4 <__mdiff+0x84>
 800b7e4:	0039      	movs	r1, r7
 800b7e6:	9c03      	ldr	r4, [sp, #12]
 800b7e8:	3115      	adds	r1, #21
 800b7ea:	2304      	movs	r3, #4
 800b7ec:	428c      	cmp	r4, r1
 800b7ee:	d304      	bcc.n	800b7fa <__mdiff+0xca>
 800b7f0:	1be3      	subs	r3, r4, r7
 800b7f2:	3b15      	subs	r3, #21
 800b7f4:	089b      	lsrs	r3, r3, #2
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	009b      	lsls	r3, r3, #2
 800b7fa:	9901      	ldr	r1, [sp, #4]
 800b7fc:	18cd      	adds	r5, r1, r3
 800b7fe:	9904      	ldr	r1, [sp, #16]
 800b800:	002e      	movs	r6, r5
 800b802:	18cb      	adds	r3, r1, r3
 800b804:	001f      	movs	r7, r3
 800b806:	9902      	ldr	r1, [sp, #8]
 800b808:	428e      	cmp	r6, r1
 800b80a:	d311      	bcc.n	800b830 <__mdiff+0x100>
 800b80c:	9c02      	ldr	r4, [sp, #8]
 800b80e:	1ee9      	subs	r1, r5, #3
 800b810:	2000      	movs	r0, #0
 800b812:	428c      	cmp	r4, r1
 800b814:	d304      	bcc.n	800b820 <__mdiff+0xf0>
 800b816:	0021      	movs	r1, r4
 800b818:	3103      	adds	r1, #3
 800b81a:	1b49      	subs	r1, r1, r5
 800b81c:	0889      	lsrs	r1, r1, #2
 800b81e:	0088      	lsls	r0, r1, #2
 800b820:	181b      	adds	r3, r3, r0
 800b822:	3b04      	subs	r3, #4
 800b824:	6819      	ldr	r1, [r3, #0]
 800b826:	2900      	cmp	r1, #0
 800b828:	d010      	beq.n	800b84c <__mdiff+0x11c>
 800b82a:	9b00      	ldr	r3, [sp, #0]
 800b82c:	6113      	str	r3, [r2, #16]
 800b82e:	e798      	b.n	800b762 <__mdiff+0x32>
 800b830:	4684      	mov	ip, r0
 800b832:	ce02      	ldmia	r6!, {r1}
 800b834:	b288      	uxth	r0, r1
 800b836:	4460      	add	r0, ip
 800b838:	1400      	asrs	r0, r0, #16
 800b83a:	0c0c      	lsrs	r4, r1, #16
 800b83c:	1904      	adds	r4, r0, r4
 800b83e:	4461      	add	r1, ip
 800b840:	1420      	asrs	r0, r4, #16
 800b842:	b289      	uxth	r1, r1
 800b844:	0424      	lsls	r4, r4, #16
 800b846:	4321      	orrs	r1, r4
 800b848:	c702      	stmia	r7!, {r1}
 800b84a:	e7dc      	b.n	800b806 <__mdiff+0xd6>
 800b84c:	9900      	ldr	r1, [sp, #0]
 800b84e:	3901      	subs	r1, #1
 800b850:	9100      	str	r1, [sp, #0]
 800b852:	e7e6      	b.n	800b822 <__mdiff+0xf2>
 800b854:	0800cae8 	.word	0x0800cae8
 800b858:	0800caf9 	.word	0x0800caf9
 800b85c:	00000237 	.word	0x00000237
 800b860:	00000245 	.word	0x00000245

0800b864 <__d2b>:
 800b864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b866:	2101      	movs	r1, #1
 800b868:	0016      	movs	r6, r2
 800b86a:	001f      	movs	r7, r3
 800b86c:	f7ff fcb6 	bl	800b1dc <_Balloc>
 800b870:	1e04      	subs	r4, r0, #0
 800b872:	d105      	bne.n	800b880 <__d2b+0x1c>
 800b874:	0022      	movs	r2, r4
 800b876:	4b25      	ldr	r3, [pc, #148]	@ (800b90c <__d2b+0xa8>)
 800b878:	4825      	ldr	r0, [pc, #148]	@ (800b910 <__d2b+0xac>)
 800b87a:	4926      	ldr	r1, [pc, #152]	@ (800b914 <__d2b+0xb0>)
 800b87c:	f000 fc76 	bl	800c16c <__assert_func>
 800b880:	033b      	lsls	r3, r7, #12
 800b882:	007d      	lsls	r5, r7, #1
 800b884:	0b1b      	lsrs	r3, r3, #12
 800b886:	0d6d      	lsrs	r5, r5, #21
 800b888:	d002      	beq.n	800b890 <__d2b+0x2c>
 800b88a:	2280      	movs	r2, #128	@ 0x80
 800b88c:	0352      	lsls	r2, r2, #13
 800b88e:	4313      	orrs	r3, r2
 800b890:	9301      	str	r3, [sp, #4]
 800b892:	2e00      	cmp	r6, #0
 800b894:	d025      	beq.n	800b8e2 <__d2b+0x7e>
 800b896:	4668      	mov	r0, sp
 800b898:	9600      	str	r6, [sp, #0]
 800b89a:	f7ff fd6c 	bl	800b376 <__lo0bits>
 800b89e:	9b01      	ldr	r3, [sp, #4]
 800b8a0:	9900      	ldr	r1, [sp, #0]
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	d01b      	beq.n	800b8de <__d2b+0x7a>
 800b8a6:	2220      	movs	r2, #32
 800b8a8:	001e      	movs	r6, r3
 800b8aa:	1a12      	subs	r2, r2, r0
 800b8ac:	4096      	lsls	r6, r2
 800b8ae:	0032      	movs	r2, r6
 800b8b0:	40c3      	lsrs	r3, r0
 800b8b2:	430a      	orrs	r2, r1
 800b8b4:	6162      	str	r2, [r4, #20]
 800b8b6:	9301      	str	r3, [sp, #4]
 800b8b8:	9e01      	ldr	r6, [sp, #4]
 800b8ba:	61a6      	str	r6, [r4, #24]
 800b8bc:	1e73      	subs	r3, r6, #1
 800b8be:	419e      	sbcs	r6, r3
 800b8c0:	3601      	adds	r6, #1
 800b8c2:	6126      	str	r6, [r4, #16]
 800b8c4:	2d00      	cmp	r5, #0
 800b8c6:	d014      	beq.n	800b8f2 <__d2b+0x8e>
 800b8c8:	2635      	movs	r6, #53	@ 0x35
 800b8ca:	4b13      	ldr	r3, [pc, #76]	@ (800b918 <__d2b+0xb4>)
 800b8cc:	18ed      	adds	r5, r5, r3
 800b8ce:	9b08      	ldr	r3, [sp, #32]
 800b8d0:	182d      	adds	r5, r5, r0
 800b8d2:	601d      	str	r5, [r3, #0]
 800b8d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8d6:	1a36      	subs	r6, r6, r0
 800b8d8:	601e      	str	r6, [r3, #0]
 800b8da:	0020      	movs	r0, r4
 800b8dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b8de:	6161      	str	r1, [r4, #20]
 800b8e0:	e7ea      	b.n	800b8b8 <__d2b+0x54>
 800b8e2:	a801      	add	r0, sp, #4
 800b8e4:	f7ff fd47 	bl	800b376 <__lo0bits>
 800b8e8:	9b01      	ldr	r3, [sp, #4]
 800b8ea:	2601      	movs	r6, #1
 800b8ec:	6163      	str	r3, [r4, #20]
 800b8ee:	3020      	adds	r0, #32
 800b8f0:	e7e7      	b.n	800b8c2 <__d2b+0x5e>
 800b8f2:	4b0a      	ldr	r3, [pc, #40]	@ (800b91c <__d2b+0xb8>)
 800b8f4:	18c0      	adds	r0, r0, r3
 800b8f6:	9b08      	ldr	r3, [sp, #32]
 800b8f8:	6018      	str	r0, [r3, #0]
 800b8fa:	4b09      	ldr	r3, [pc, #36]	@ (800b920 <__d2b+0xbc>)
 800b8fc:	18f3      	adds	r3, r6, r3
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	18e3      	adds	r3, r4, r3
 800b902:	6958      	ldr	r0, [r3, #20]
 800b904:	f7ff fd16 	bl	800b334 <__hi0bits>
 800b908:	0176      	lsls	r6, r6, #5
 800b90a:	e7e3      	b.n	800b8d4 <__d2b+0x70>
 800b90c:	0800cae8 	.word	0x0800cae8
 800b910:	0800caf9 	.word	0x0800caf9
 800b914:	0000030f 	.word	0x0000030f
 800b918:	fffffbcd 	.word	0xfffffbcd
 800b91c:	fffffbce 	.word	0xfffffbce
 800b920:	3fffffff 	.word	0x3fffffff

0800b924 <__ssputs_r>:
 800b924:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b926:	688e      	ldr	r6, [r1, #8]
 800b928:	b085      	sub	sp, #20
 800b92a:	001f      	movs	r7, r3
 800b92c:	000c      	movs	r4, r1
 800b92e:	680b      	ldr	r3, [r1, #0]
 800b930:	9002      	str	r0, [sp, #8]
 800b932:	9203      	str	r2, [sp, #12]
 800b934:	42be      	cmp	r6, r7
 800b936:	d830      	bhi.n	800b99a <__ssputs_r+0x76>
 800b938:	210c      	movs	r1, #12
 800b93a:	5e62      	ldrsh	r2, [r4, r1]
 800b93c:	2190      	movs	r1, #144	@ 0x90
 800b93e:	00c9      	lsls	r1, r1, #3
 800b940:	420a      	tst	r2, r1
 800b942:	d028      	beq.n	800b996 <__ssputs_r+0x72>
 800b944:	2003      	movs	r0, #3
 800b946:	6921      	ldr	r1, [r4, #16]
 800b948:	1a5b      	subs	r3, r3, r1
 800b94a:	9301      	str	r3, [sp, #4]
 800b94c:	6963      	ldr	r3, [r4, #20]
 800b94e:	4343      	muls	r3, r0
 800b950:	9801      	ldr	r0, [sp, #4]
 800b952:	0fdd      	lsrs	r5, r3, #31
 800b954:	18ed      	adds	r5, r5, r3
 800b956:	1c7b      	adds	r3, r7, #1
 800b958:	181b      	adds	r3, r3, r0
 800b95a:	106d      	asrs	r5, r5, #1
 800b95c:	42ab      	cmp	r3, r5
 800b95e:	d900      	bls.n	800b962 <__ssputs_r+0x3e>
 800b960:	001d      	movs	r5, r3
 800b962:	0552      	lsls	r2, r2, #21
 800b964:	d528      	bpl.n	800b9b8 <__ssputs_r+0x94>
 800b966:	0029      	movs	r1, r5
 800b968:	9802      	ldr	r0, [sp, #8]
 800b96a:	f7ff fba7 	bl	800b0bc <_malloc_r>
 800b96e:	1e06      	subs	r6, r0, #0
 800b970:	d02c      	beq.n	800b9cc <__ssputs_r+0xa8>
 800b972:	9a01      	ldr	r2, [sp, #4]
 800b974:	6921      	ldr	r1, [r4, #16]
 800b976:	f000 fbef 	bl	800c158 <memcpy>
 800b97a:	89a2      	ldrh	r2, [r4, #12]
 800b97c:	4b18      	ldr	r3, [pc, #96]	@ (800b9e0 <__ssputs_r+0xbc>)
 800b97e:	401a      	ands	r2, r3
 800b980:	2380      	movs	r3, #128	@ 0x80
 800b982:	4313      	orrs	r3, r2
 800b984:	81a3      	strh	r3, [r4, #12]
 800b986:	9b01      	ldr	r3, [sp, #4]
 800b988:	6126      	str	r6, [r4, #16]
 800b98a:	18f6      	adds	r6, r6, r3
 800b98c:	6026      	str	r6, [r4, #0]
 800b98e:	003e      	movs	r6, r7
 800b990:	6165      	str	r5, [r4, #20]
 800b992:	1aed      	subs	r5, r5, r3
 800b994:	60a5      	str	r5, [r4, #8]
 800b996:	42be      	cmp	r6, r7
 800b998:	d900      	bls.n	800b99c <__ssputs_r+0x78>
 800b99a:	003e      	movs	r6, r7
 800b99c:	0032      	movs	r2, r6
 800b99e:	9903      	ldr	r1, [sp, #12]
 800b9a0:	6820      	ldr	r0, [r4, #0]
 800b9a2:	f000 fbb3 	bl	800c10c <memmove>
 800b9a6:	2000      	movs	r0, #0
 800b9a8:	68a3      	ldr	r3, [r4, #8]
 800b9aa:	1b9b      	subs	r3, r3, r6
 800b9ac:	60a3      	str	r3, [r4, #8]
 800b9ae:	6823      	ldr	r3, [r4, #0]
 800b9b0:	199b      	adds	r3, r3, r6
 800b9b2:	6023      	str	r3, [r4, #0]
 800b9b4:	b005      	add	sp, #20
 800b9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9b8:	002a      	movs	r2, r5
 800b9ba:	9802      	ldr	r0, [sp, #8]
 800b9bc:	f000 fc33 	bl	800c226 <_realloc_r>
 800b9c0:	1e06      	subs	r6, r0, #0
 800b9c2:	d1e0      	bne.n	800b986 <__ssputs_r+0x62>
 800b9c4:	6921      	ldr	r1, [r4, #16]
 800b9c6:	9802      	ldr	r0, [sp, #8]
 800b9c8:	f7ff fb02 	bl	800afd0 <_free_r>
 800b9cc:	230c      	movs	r3, #12
 800b9ce:	2001      	movs	r0, #1
 800b9d0:	9a02      	ldr	r2, [sp, #8]
 800b9d2:	4240      	negs	r0, r0
 800b9d4:	6013      	str	r3, [r2, #0]
 800b9d6:	89a2      	ldrh	r2, [r4, #12]
 800b9d8:	3334      	adds	r3, #52	@ 0x34
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	81a3      	strh	r3, [r4, #12]
 800b9de:	e7e9      	b.n	800b9b4 <__ssputs_r+0x90>
 800b9e0:	fffffb7f 	.word	0xfffffb7f

0800b9e4 <_svfiprintf_r>:
 800b9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9e6:	b0a1      	sub	sp, #132	@ 0x84
 800b9e8:	9003      	str	r0, [sp, #12]
 800b9ea:	001d      	movs	r5, r3
 800b9ec:	898b      	ldrh	r3, [r1, #12]
 800b9ee:	000f      	movs	r7, r1
 800b9f0:	0016      	movs	r6, r2
 800b9f2:	061b      	lsls	r3, r3, #24
 800b9f4:	d511      	bpl.n	800ba1a <_svfiprintf_r+0x36>
 800b9f6:	690b      	ldr	r3, [r1, #16]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d10e      	bne.n	800ba1a <_svfiprintf_r+0x36>
 800b9fc:	2140      	movs	r1, #64	@ 0x40
 800b9fe:	f7ff fb5d 	bl	800b0bc <_malloc_r>
 800ba02:	6038      	str	r0, [r7, #0]
 800ba04:	6138      	str	r0, [r7, #16]
 800ba06:	2800      	cmp	r0, #0
 800ba08:	d105      	bne.n	800ba16 <_svfiprintf_r+0x32>
 800ba0a:	230c      	movs	r3, #12
 800ba0c:	9a03      	ldr	r2, [sp, #12]
 800ba0e:	6013      	str	r3, [r2, #0]
 800ba10:	2001      	movs	r0, #1
 800ba12:	4240      	negs	r0, r0
 800ba14:	e0cf      	b.n	800bbb6 <_svfiprintf_r+0x1d2>
 800ba16:	2340      	movs	r3, #64	@ 0x40
 800ba18:	617b      	str	r3, [r7, #20]
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	ac08      	add	r4, sp, #32
 800ba1e:	6163      	str	r3, [r4, #20]
 800ba20:	3320      	adds	r3, #32
 800ba22:	7663      	strb	r3, [r4, #25]
 800ba24:	3310      	adds	r3, #16
 800ba26:	76a3      	strb	r3, [r4, #26]
 800ba28:	9507      	str	r5, [sp, #28]
 800ba2a:	0035      	movs	r5, r6
 800ba2c:	782b      	ldrb	r3, [r5, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d001      	beq.n	800ba36 <_svfiprintf_r+0x52>
 800ba32:	2b25      	cmp	r3, #37	@ 0x25
 800ba34:	d148      	bne.n	800bac8 <_svfiprintf_r+0xe4>
 800ba36:	1bab      	subs	r3, r5, r6
 800ba38:	9305      	str	r3, [sp, #20]
 800ba3a:	42b5      	cmp	r5, r6
 800ba3c:	d00b      	beq.n	800ba56 <_svfiprintf_r+0x72>
 800ba3e:	0032      	movs	r2, r6
 800ba40:	0039      	movs	r1, r7
 800ba42:	9803      	ldr	r0, [sp, #12]
 800ba44:	f7ff ff6e 	bl	800b924 <__ssputs_r>
 800ba48:	3001      	adds	r0, #1
 800ba4a:	d100      	bne.n	800ba4e <_svfiprintf_r+0x6a>
 800ba4c:	e0ae      	b.n	800bbac <_svfiprintf_r+0x1c8>
 800ba4e:	6963      	ldr	r3, [r4, #20]
 800ba50:	9a05      	ldr	r2, [sp, #20]
 800ba52:	189b      	adds	r3, r3, r2
 800ba54:	6163      	str	r3, [r4, #20]
 800ba56:	782b      	ldrb	r3, [r5, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d100      	bne.n	800ba5e <_svfiprintf_r+0x7a>
 800ba5c:	e0a6      	b.n	800bbac <_svfiprintf_r+0x1c8>
 800ba5e:	2201      	movs	r2, #1
 800ba60:	2300      	movs	r3, #0
 800ba62:	4252      	negs	r2, r2
 800ba64:	6062      	str	r2, [r4, #4]
 800ba66:	a904      	add	r1, sp, #16
 800ba68:	3254      	adds	r2, #84	@ 0x54
 800ba6a:	1852      	adds	r2, r2, r1
 800ba6c:	1c6e      	adds	r6, r5, #1
 800ba6e:	6023      	str	r3, [r4, #0]
 800ba70:	60e3      	str	r3, [r4, #12]
 800ba72:	60a3      	str	r3, [r4, #8]
 800ba74:	7013      	strb	r3, [r2, #0]
 800ba76:	65a3      	str	r3, [r4, #88]	@ 0x58
 800ba78:	4b54      	ldr	r3, [pc, #336]	@ (800bbcc <_svfiprintf_r+0x1e8>)
 800ba7a:	2205      	movs	r2, #5
 800ba7c:	0018      	movs	r0, r3
 800ba7e:	7831      	ldrb	r1, [r6, #0]
 800ba80:	9305      	str	r3, [sp, #20]
 800ba82:	f7fe fc18 	bl	800a2b6 <memchr>
 800ba86:	1c75      	adds	r5, r6, #1
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	d11f      	bne.n	800bacc <_svfiprintf_r+0xe8>
 800ba8c:	6822      	ldr	r2, [r4, #0]
 800ba8e:	06d3      	lsls	r3, r2, #27
 800ba90:	d504      	bpl.n	800ba9c <_svfiprintf_r+0xb8>
 800ba92:	2353      	movs	r3, #83	@ 0x53
 800ba94:	a904      	add	r1, sp, #16
 800ba96:	185b      	adds	r3, r3, r1
 800ba98:	2120      	movs	r1, #32
 800ba9a:	7019      	strb	r1, [r3, #0]
 800ba9c:	0713      	lsls	r3, r2, #28
 800ba9e:	d504      	bpl.n	800baaa <_svfiprintf_r+0xc6>
 800baa0:	2353      	movs	r3, #83	@ 0x53
 800baa2:	a904      	add	r1, sp, #16
 800baa4:	185b      	adds	r3, r3, r1
 800baa6:	212b      	movs	r1, #43	@ 0x2b
 800baa8:	7019      	strb	r1, [r3, #0]
 800baaa:	7833      	ldrb	r3, [r6, #0]
 800baac:	2b2a      	cmp	r3, #42	@ 0x2a
 800baae:	d016      	beq.n	800bade <_svfiprintf_r+0xfa>
 800bab0:	0035      	movs	r5, r6
 800bab2:	2100      	movs	r1, #0
 800bab4:	200a      	movs	r0, #10
 800bab6:	68e3      	ldr	r3, [r4, #12]
 800bab8:	782a      	ldrb	r2, [r5, #0]
 800baba:	1c6e      	adds	r6, r5, #1
 800babc:	3a30      	subs	r2, #48	@ 0x30
 800babe:	2a09      	cmp	r2, #9
 800bac0:	d950      	bls.n	800bb64 <_svfiprintf_r+0x180>
 800bac2:	2900      	cmp	r1, #0
 800bac4:	d111      	bne.n	800baea <_svfiprintf_r+0x106>
 800bac6:	e017      	b.n	800baf8 <_svfiprintf_r+0x114>
 800bac8:	3501      	adds	r5, #1
 800baca:	e7af      	b.n	800ba2c <_svfiprintf_r+0x48>
 800bacc:	9b05      	ldr	r3, [sp, #20]
 800bace:	6822      	ldr	r2, [r4, #0]
 800bad0:	1ac0      	subs	r0, r0, r3
 800bad2:	2301      	movs	r3, #1
 800bad4:	4083      	lsls	r3, r0
 800bad6:	4313      	orrs	r3, r2
 800bad8:	002e      	movs	r6, r5
 800bada:	6023      	str	r3, [r4, #0]
 800badc:	e7cc      	b.n	800ba78 <_svfiprintf_r+0x94>
 800bade:	9b07      	ldr	r3, [sp, #28]
 800bae0:	1d19      	adds	r1, r3, #4
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	9107      	str	r1, [sp, #28]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	db01      	blt.n	800baee <_svfiprintf_r+0x10a>
 800baea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800baec:	e004      	b.n	800baf8 <_svfiprintf_r+0x114>
 800baee:	425b      	negs	r3, r3
 800baf0:	60e3      	str	r3, [r4, #12]
 800baf2:	2302      	movs	r3, #2
 800baf4:	4313      	orrs	r3, r2
 800baf6:	6023      	str	r3, [r4, #0]
 800baf8:	782b      	ldrb	r3, [r5, #0]
 800bafa:	2b2e      	cmp	r3, #46	@ 0x2e
 800bafc:	d10c      	bne.n	800bb18 <_svfiprintf_r+0x134>
 800bafe:	786b      	ldrb	r3, [r5, #1]
 800bb00:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb02:	d134      	bne.n	800bb6e <_svfiprintf_r+0x18a>
 800bb04:	9b07      	ldr	r3, [sp, #28]
 800bb06:	3502      	adds	r5, #2
 800bb08:	1d1a      	adds	r2, r3, #4
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	9207      	str	r2, [sp, #28]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	da01      	bge.n	800bb16 <_svfiprintf_r+0x132>
 800bb12:	2301      	movs	r3, #1
 800bb14:	425b      	negs	r3, r3
 800bb16:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb18:	4e2d      	ldr	r6, [pc, #180]	@ (800bbd0 <_svfiprintf_r+0x1ec>)
 800bb1a:	2203      	movs	r2, #3
 800bb1c:	0030      	movs	r0, r6
 800bb1e:	7829      	ldrb	r1, [r5, #0]
 800bb20:	f7fe fbc9 	bl	800a2b6 <memchr>
 800bb24:	2800      	cmp	r0, #0
 800bb26:	d006      	beq.n	800bb36 <_svfiprintf_r+0x152>
 800bb28:	2340      	movs	r3, #64	@ 0x40
 800bb2a:	1b80      	subs	r0, r0, r6
 800bb2c:	4083      	lsls	r3, r0
 800bb2e:	6822      	ldr	r2, [r4, #0]
 800bb30:	3501      	adds	r5, #1
 800bb32:	4313      	orrs	r3, r2
 800bb34:	6023      	str	r3, [r4, #0]
 800bb36:	7829      	ldrb	r1, [r5, #0]
 800bb38:	2206      	movs	r2, #6
 800bb3a:	4826      	ldr	r0, [pc, #152]	@ (800bbd4 <_svfiprintf_r+0x1f0>)
 800bb3c:	1c6e      	adds	r6, r5, #1
 800bb3e:	7621      	strb	r1, [r4, #24]
 800bb40:	f7fe fbb9 	bl	800a2b6 <memchr>
 800bb44:	2800      	cmp	r0, #0
 800bb46:	d038      	beq.n	800bbba <_svfiprintf_r+0x1d6>
 800bb48:	4b23      	ldr	r3, [pc, #140]	@ (800bbd8 <_svfiprintf_r+0x1f4>)
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d122      	bne.n	800bb94 <_svfiprintf_r+0x1b0>
 800bb4e:	2207      	movs	r2, #7
 800bb50:	9b07      	ldr	r3, [sp, #28]
 800bb52:	3307      	adds	r3, #7
 800bb54:	4393      	bics	r3, r2
 800bb56:	3308      	adds	r3, #8
 800bb58:	9307      	str	r3, [sp, #28]
 800bb5a:	6963      	ldr	r3, [r4, #20]
 800bb5c:	9a04      	ldr	r2, [sp, #16]
 800bb5e:	189b      	adds	r3, r3, r2
 800bb60:	6163      	str	r3, [r4, #20]
 800bb62:	e762      	b.n	800ba2a <_svfiprintf_r+0x46>
 800bb64:	4343      	muls	r3, r0
 800bb66:	0035      	movs	r5, r6
 800bb68:	2101      	movs	r1, #1
 800bb6a:	189b      	adds	r3, r3, r2
 800bb6c:	e7a4      	b.n	800bab8 <_svfiprintf_r+0xd4>
 800bb6e:	2300      	movs	r3, #0
 800bb70:	200a      	movs	r0, #10
 800bb72:	0019      	movs	r1, r3
 800bb74:	3501      	adds	r5, #1
 800bb76:	6063      	str	r3, [r4, #4]
 800bb78:	782a      	ldrb	r2, [r5, #0]
 800bb7a:	1c6e      	adds	r6, r5, #1
 800bb7c:	3a30      	subs	r2, #48	@ 0x30
 800bb7e:	2a09      	cmp	r2, #9
 800bb80:	d903      	bls.n	800bb8a <_svfiprintf_r+0x1a6>
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d0c8      	beq.n	800bb18 <_svfiprintf_r+0x134>
 800bb86:	9109      	str	r1, [sp, #36]	@ 0x24
 800bb88:	e7c6      	b.n	800bb18 <_svfiprintf_r+0x134>
 800bb8a:	4341      	muls	r1, r0
 800bb8c:	0035      	movs	r5, r6
 800bb8e:	2301      	movs	r3, #1
 800bb90:	1889      	adds	r1, r1, r2
 800bb92:	e7f1      	b.n	800bb78 <_svfiprintf_r+0x194>
 800bb94:	aa07      	add	r2, sp, #28
 800bb96:	9200      	str	r2, [sp, #0]
 800bb98:	0021      	movs	r1, r4
 800bb9a:	003a      	movs	r2, r7
 800bb9c:	4b0f      	ldr	r3, [pc, #60]	@ (800bbdc <_svfiprintf_r+0x1f8>)
 800bb9e:	9803      	ldr	r0, [sp, #12]
 800bba0:	f7fd fdce 	bl	8009740 <_printf_float>
 800bba4:	9004      	str	r0, [sp, #16]
 800bba6:	9b04      	ldr	r3, [sp, #16]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	d1d6      	bne.n	800bb5a <_svfiprintf_r+0x176>
 800bbac:	89bb      	ldrh	r3, [r7, #12]
 800bbae:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800bbb0:	065b      	lsls	r3, r3, #25
 800bbb2:	d500      	bpl.n	800bbb6 <_svfiprintf_r+0x1d2>
 800bbb4:	e72c      	b.n	800ba10 <_svfiprintf_r+0x2c>
 800bbb6:	b021      	add	sp, #132	@ 0x84
 800bbb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbba:	aa07      	add	r2, sp, #28
 800bbbc:	9200      	str	r2, [sp, #0]
 800bbbe:	0021      	movs	r1, r4
 800bbc0:	003a      	movs	r2, r7
 800bbc2:	4b06      	ldr	r3, [pc, #24]	@ (800bbdc <_svfiprintf_r+0x1f8>)
 800bbc4:	9803      	ldr	r0, [sp, #12]
 800bbc6:	f7fe f869 	bl	8009c9c <_printf_i>
 800bbca:	e7eb      	b.n	800bba4 <_svfiprintf_r+0x1c0>
 800bbcc:	0800cc50 	.word	0x0800cc50
 800bbd0:	0800cc56 	.word	0x0800cc56
 800bbd4:	0800cc5a 	.word	0x0800cc5a
 800bbd8:	08009741 	.word	0x08009741
 800bbdc:	0800b925 	.word	0x0800b925

0800bbe0 <__sfputc_r>:
 800bbe0:	6893      	ldr	r3, [r2, #8]
 800bbe2:	b510      	push	{r4, lr}
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	6093      	str	r3, [r2, #8]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	da04      	bge.n	800bbf6 <__sfputc_r+0x16>
 800bbec:	6994      	ldr	r4, [r2, #24]
 800bbee:	42a3      	cmp	r3, r4
 800bbf0:	db07      	blt.n	800bc02 <__sfputc_r+0x22>
 800bbf2:	290a      	cmp	r1, #10
 800bbf4:	d005      	beq.n	800bc02 <__sfputc_r+0x22>
 800bbf6:	6813      	ldr	r3, [r2, #0]
 800bbf8:	1c58      	adds	r0, r3, #1
 800bbfa:	6010      	str	r0, [r2, #0]
 800bbfc:	7019      	strb	r1, [r3, #0]
 800bbfe:	0008      	movs	r0, r1
 800bc00:	bd10      	pop	{r4, pc}
 800bc02:	f000 f9e2 	bl	800bfca <__swbuf_r>
 800bc06:	0001      	movs	r1, r0
 800bc08:	e7f9      	b.n	800bbfe <__sfputc_r+0x1e>

0800bc0a <__sfputs_r>:
 800bc0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc0c:	0006      	movs	r6, r0
 800bc0e:	000f      	movs	r7, r1
 800bc10:	0014      	movs	r4, r2
 800bc12:	18d5      	adds	r5, r2, r3
 800bc14:	42ac      	cmp	r4, r5
 800bc16:	d101      	bne.n	800bc1c <__sfputs_r+0x12>
 800bc18:	2000      	movs	r0, #0
 800bc1a:	e007      	b.n	800bc2c <__sfputs_r+0x22>
 800bc1c:	7821      	ldrb	r1, [r4, #0]
 800bc1e:	003a      	movs	r2, r7
 800bc20:	0030      	movs	r0, r6
 800bc22:	f7ff ffdd 	bl	800bbe0 <__sfputc_r>
 800bc26:	3401      	adds	r4, #1
 800bc28:	1c43      	adds	r3, r0, #1
 800bc2a:	d1f3      	bne.n	800bc14 <__sfputs_r+0xa>
 800bc2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc30 <_vfiprintf_r>:
 800bc30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc32:	b0a1      	sub	sp, #132	@ 0x84
 800bc34:	000f      	movs	r7, r1
 800bc36:	0015      	movs	r5, r2
 800bc38:	001e      	movs	r6, r3
 800bc3a:	9003      	str	r0, [sp, #12]
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	d004      	beq.n	800bc4a <_vfiprintf_r+0x1a>
 800bc40:	6a03      	ldr	r3, [r0, #32]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d101      	bne.n	800bc4a <_vfiprintf_r+0x1a>
 800bc46:	f7fe f9c7 	bl	8009fd8 <__sinit>
 800bc4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc4c:	07db      	lsls	r3, r3, #31
 800bc4e:	d405      	bmi.n	800bc5c <_vfiprintf_r+0x2c>
 800bc50:	89bb      	ldrh	r3, [r7, #12]
 800bc52:	059b      	lsls	r3, r3, #22
 800bc54:	d402      	bmi.n	800bc5c <_vfiprintf_r+0x2c>
 800bc56:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800bc58:	f7fe fb2b 	bl	800a2b2 <__retarget_lock_acquire_recursive>
 800bc5c:	89bb      	ldrh	r3, [r7, #12]
 800bc5e:	071b      	lsls	r3, r3, #28
 800bc60:	d502      	bpl.n	800bc68 <_vfiprintf_r+0x38>
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d113      	bne.n	800bc90 <_vfiprintf_r+0x60>
 800bc68:	0039      	movs	r1, r7
 800bc6a:	9803      	ldr	r0, [sp, #12]
 800bc6c:	f000 f9f0 	bl	800c050 <__swsetup_r>
 800bc70:	2800      	cmp	r0, #0
 800bc72:	d00d      	beq.n	800bc90 <_vfiprintf_r+0x60>
 800bc74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc76:	07db      	lsls	r3, r3, #31
 800bc78:	d503      	bpl.n	800bc82 <_vfiprintf_r+0x52>
 800bc7a:	2001      	movs	r0, #1
 800bc7c:	4240      	negs	r0, r0
 800bc7e:	b021      	add	sp, #132	@ 0x84
 800bc80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc82:	89bb      	ldrh	r3, [r7, #12]
 800bc84:	059b      	lsls	r3, r3, #22
 800bc86:	d4f8      	bmi.n	800bc7a <_vfiprintf_r+0x4a>
 800bc88:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800bc8a:	f7fe fb13 	bl	800a2b4 <__retarget_lock_release_recursive>
 800bc8e:	e7f4      	b.n	800bc7a <_vfiprintf_r+0x4a>
 800bc90:	2300      	movs	r3, #0
 800bc92:	ac08      	add	r4, sp, #32
 800bc94:	6163      	str	r3, [r4, #20]
 800bc96:	3320      	adds	r3, #32
 800bc98:	7663      	strb	r3, [r4, #25]
 800bc9a:	3310      	adds	r3, #16
 800bc9c:	76a3      	strb	r3, [r4, #26]
 800bc9e:	9607      	str	r6, [sp, #28]
 800bca0:	002e      	movs	r6, r5
 800bca2:	7833      	ldrb	r3, [r6, #0]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d001      	beq.n	800bcac <_vfiprintf_r+0x7c>
 800bca8:	2b25      	cmp	r3, #37	@ 0x25
 800bcaa:	d148      	bne.n	800bd3e <_vfiprintf_r+0x10e>
 800bcac:	1b73      	subs	r3, r6, r5
 800bcae:	9305      	str	r3, [sp, #20]
 800bcb0:	42ae      	cmp	r6, r5
 800bcb2:	d00b      	beq.n	800bccc <_vfiprintf_r+0x9c>
 800bcb4:	002a      	movs	r2, r5
 800bcb6:	0039      	movs	r1, r7
 800bcb8:	9803      	ldr	r0, [sp, #12]
 800bcba:	f7ff ffa6 	bl	800bc0a <__sfputs_r>
 800bcbe:	3001      	adds	r0, #1
 800bcc0:	d100      	bne.n	800bcc4 <_vfiprintf_r+0x94>
 800bcc2:	e0ae      	b.n	800be22 <_vfiprintf_r+0x1f2>
 800bcc4:	6963      	ldr	r3, [r4, #20]
 800bcc6:	9a05      	ldr	r2, [sp, #20]
 800bcc8:	189b      	adds	r3, r3, r2
 800bcca:	6163      	str	r3, [r4, #20]
 800bccc:	7833      	ldrb	r3, [r6, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d100      	bne.n	800bcd4 <_vfiprintf_r+0xa4>
 800bcd2:	e0a6      	b.n	800be22 <_vfiprintf_r+0x1f2>
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	4252      	negs	r2, r2
 800bcda:	6062      	str	r2, [r4, #4]
 800bcdc:	a904      	add	r1, sp, #16
 800bcde:	3254      	adds	r2, #84	@ 0x54
 800bce0:	1852      	adds	r2, r2, r1
 800bce2:	1c75      	adds	r5, r6, #1
 800bce4:	6023      	str	r3, [r4, #0]
 800bce6:	60e3      	str	r3, [r4, #12]
 800bce8:	60a3      	str	r3, [r4, #8]
 800bcea:	7013      	strb	r3, [r2, #0]
 800bcec:	65a3      	str	r3, [r4, #88]	@ 0x58
 800bcee:	4b59      	ldr	r3, [pc, #356]	@ (800be54 <_vfiprintf_r+0x224>)
 800bcf0:	2205      	movs	r2, #5
 800bcf2:	0018      	movs	r0, r3
 800bcf4:	7829      	ldrb	r1, [r5, #0]
 800bcf6:	9305      	str	r3, [sp, #20]
 800bcf8:	f7fe fadd 	bl	800a2b6 <memchr>
 800bcfc:	1c6e      	adds	r6, r5, #1
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	d11f      	bne.n	800bd42 <_vfiprintf_r+0x112>
 800bd02:	6822      	ldr	r2, [r4, #0]
 800bd04:	06d3      	lsls	r3, r2, #27
 800bd06:	d504      	bpl.n	800bd12 <_vfiprintf_r+0xe2>
 800bd08:	2353      	movs	r3, #83	@ 0x53
 800bd0a:	a904      	add	r1, sp, #16
 800bd0c:	185b      	adds	r3, r3, r1
 800bd0e:	2120      	movs	r1, #32
 800bd10:	7019      	strb	r1, [r3, #0]
 800bd12:	0713      	lsls	r3, r2, #28
 800bd14:	d504      	bpl.n	800bd20 <_vfiprintf_r+0xf0>
 800bd16:	2353      	movs	r3, #83	@ 0x53
 800bd18:	a904      	add	r1, sp, #16
 800bd1a:	185b      	adds	r3, r3, r1
 800bd1c:	212b      	movs	r1, #43	@ 0x2b
 800bd1e:	7019      	strb	r1, [r3, #0]
 800bd20:	782b      	ldrb	r3, [r5, #0]
 800bd22:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd24:	d016      	beq.n	800bd54 <_vfiprintf_r+0x124>
 800bd26:	002e      	movs	r6, r5
 800bd28:	2100      	movs	r1, #0
 800bd2a:	200a      	movs	r0, #10
 800bd2c:	68e3      	ldr	r3, [r4, #12]
 800bd2e:	7832      	ldrb	r2, [r6, #0]
 800bd30:	1c75      	adds	r5, r6, #1
 800bd32:	3a30      	subs	r2, #48	@ 0x30
 800bd34:	2a09      	cmp	r2, #9
 800bd36:	d950      	bls.n	800bdda <_vfiprintf_r+0x1aa>
 800bd38:	2900      	cmp	r1, #0
 800bd3a:	d111      	bne.n	800bd60 <_vfiprintf_r+0x130>
 800bd3c:	e017      	b.n	800bd6e <_vfiprintf_r+0x13e>
 800bd3e:	3601      	adds	r6, #1
 800bd40:	e7af      	b.n	800bca2 <_vfiprintf_r+0x72>
 800bd42:	9b05      	ldr	r3, [sp, #20]
 800bd44:	6822      	ldr	r2, [r4, #0]
 800bd46:	1ac0      	subs	r0, r0, r3
 800bd48:	2301      	movs	r3, #1
 800bd4a:	4083      	lsls	r3, r0
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	0035      	movs	r5, r6
 800bd50:	6023      	str	r3, [r4, #0]
 800bd52:	e7cc      	b.n	800bcee <_vfiprintf_r+0xbe>
 800bd54:	9b07      	ldr	r3, [sp, #28]
 800bd56:	1d19      	adds	r1, r3, #4
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	9107      	str	r1, [sp, #28]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	db01      	blt.n	800bd64 <_vfiprintf_r+0x134>
 800bd60:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd62:	e004      	b.n	800bd6e <_vfiprintf_r+0x13e>
 800bd64:	425b      	negs	r3, r3
 800bd66:	60e3      	str	r3, [r4, #12]
 800bd68:	2302      	movs	r3, #2
 800bd6a:	4313      	orrs	r3, r2
 800bd6c:	6023      	str	r3, [r4, #0]
 800bd6e:	7833      	ldrb	r3, [r6, #0]
 800bd70:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd72:	d10c      	bne.n	800bd8e <_vfiprintf_r+0x15e>
 800bd74:	7873      	ldrb	r3, [r6, #1]
 800bd76:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd78:	d134      	bne.n	800bde4 <_vfiprintf_r+0x1b4>
 800bd7a:	9b07      	ldr	r3, [sp, #28]
 800bd7c:	3602      	adds	r6, #2
 800bd7e:	1d1a      	adds	r2, r3, #4
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	9207      	str	r2, [sp, #28]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	da01      	bge.n	800bd8c <_vfiprintf_r+0x15c>
 800bd88:	2301      	movs	r3, #1
 800bd8a:	425b      	negs	r3, r3
 800bd8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd8e:	4d32      	ldr	r5, [pc, #200]	@ (800be58 <_vfiprintf_r+0x228>)
 800bd90:	2203      	movs	r2, #3
 800bd92:	0028      	movs	r0, r5
 800bd94:	7831      	ldrb	r1, [r6, #0]
 800bd96:	f7fe fa8e 	bl	800a2b6 <memchr>
 800bd9a:	2800      	cmp	r0, #0
 800bd9c:	d006      	beq.n	800bdac <_vfiprintf_r+0x17c>
 800bd9e:	2340      	movs	r3, #64	@ 0x40
 800bda0:	1b40      	subs	r0, r0, r5
 800bda2:	4083      	lsls	r3, r0
 800bda4:	6822      	ldr	r2, [r4, #0]
 800bda6:	3601      	adds	r6, #1
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	6023      	str	r3, [r4, #0]
 800bdac:	7831      	ldrb	r1, [r6, #0]
 800bdae:	2206      	movs	r2, #6
 800bdb0:	482a      	ldr	r0, [pc, #168]	@ (800be5c <_vfiprintf_r+0x22c>)
 800bdb2:	1c75      	adds	r5, r6, #1
 800bdb4:	7621      	strb	r1, [r4, #24]
 800bdb6:	f7fe fa7e 	bl	800a2b6 <memchr>
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	d040      	beq.n	800be40 <_vfiprintf_r+0x210>
 800bdbe:	4b28      	ldr	r3, [pc, #160]	@ (800be60 <_vfiprintf_r+0x230>)
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d122      	bne.n	800be0a <_vfiprintf_r+0x1da>
 800bdc4:	2207      	movs	r2, #7
 800bdc6:	9b07      	ldr	r3, [sp, #28]
 800bdc8:	3307      	adds	r3, #7
 800bdca:	4393      	bics	r3, r2
 800bdcc:	3308      	adds	r3, #8
 800bdce:	9307      	str	r3, [sp, #28]
 800bdd0:	6963      	ldr	r3, [r4, #20]
 800bdd2:	9a04      	ldr	r2, [sp, #16]
 800bdd4:	189b      	adds	r3, r3, r2
 800bdd6:	6163      	str	r3, [r4, #20]
 800bdd8:	e762      	b.n	800bca0 <_vfiprintf_r+0x70>
 800bdda:	4343      	muls	r3, r0
 800bddc:	002e      	movs	r6, r5
 800bdde:	2101      	movs	r1, #1
 800bde0:	189b      	adds	r3, r3, r2
 800bde2:	e7a4      	b.n	800bd2e <_vfiprintf_r+0xfe>
 800bde4:	2300      	movs	r3, #0
 800bde6:	200a      	movs	r0, #10
 800bde8:	0019      	movs	r1, r3
 800bdea:	3601      	adds	r6, #1
 800bdec:	6063      	str	r3, [r4, #4]
 800bdee:	7832      	ldrb	r2, [r6, #0]
 800bdf0:	1c75      	adds	r5, r6, #1
 800bdf2:	3a30      	subs	r2, #48	@ 0x30
 800bdf4:	2a09      	cmp	r2, #9
 800bdf6:	d903      	bls.n	800be00 <_vfiprintf_r+0x1d0>
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d0c8      	beq.n	800bd8e <_vfiprintf_r+0x15e>
 800bdfc:	9109      	str	r1, [sp, #36]	@ 0x24
 800bdfe:	e7c6      	b.n	800bd8e <_vfiprintf_r+0x15e>
 800be00:	4341      	muls	r1, r0
 800be02:	002e      	movs	r6, r5
 800be04:	2301      	movs	r3, #1
 800be06:	1889      	adds	r1, r1, r2
 800be08:	e7f1      	b.n	800bdee <_vfiprintf_r+0x1be>
 800be0a:	aa07      	add	r2, sp, #28
 800be0c:	9200      	str	r2, [sp, #0]
 800be0e:	0021      	movs	r1, r4
 800be10:	003a      	movs	r2, r7
 800be12:	4b14      	ldr	r3, [pc, #80]	@ (800be64 <_vfiprintf_r+0x234>)
 800be14:	9803      	ldr	r0, [sp, #12]
 800be16:	f7fd fc93 	bl	8009740 <_printf_float>
 800be1a:	9004      	str	r0, [sp, #16]
 800be1c:	9b04      	ldr	r3, [sp, #16]
 800be1e:	3301      	adds	r3, #1
 800be20:	d1d6      	bne.n	800bdd0 <_vfiprintf_r+0x1a0>
 800be22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800be24:	07db      	lsls	r3, r3, #31
 800be26:	d405      	bmi.n	800be34 <_vfiprintf_r+0x204>
 800be28:	89bb      	ldrh	r3, [r7, #12]
 800be2a:	059b      	lsls	r3, r3, #22
 800be2c:	d402      	bmi.n	800be34 <_vfiprintf_r+0x204>
 800be2e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800be30:	f7fe fa40 	bl	800a2b4 <__retarget_lock_release_recursive>
 800be34:	89bb      	ldrh	r3, [r7, #12]
 800be36:	065b      	lsls	r3, r3, #25
 800be38:	d500      	bpl.n	800be3c <_vfiprintf_r+0x20c>
 800be3a:	e71e      	b.n	800bc7a <_vfiprintf_r+0x4a>
 800be3c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800be3e:	e71e      	b.n	800bc7e <_vfiprintf_r+0x4e>
 800be40:	aa07      	add	r2, sp, #28
 800be42:	9200      	str	r2, [sp, #0]
 800be44:	0021      	movs	r1, r4
 800be46:	003a      	movs	r2, r7
 800be48:	4b06      	ldr	r3, [pc, #24]	@ (800be64 <_vfiprintf_r+0x234>)
 800be4a:	9803      	ldr	r0, [sp, #12]
 800be4c:	f7fd ff26 	bl	8009c9c <_printf_i>
 800be50:	e7e3      	b.n	800be1a <_vfiprintf_r+0x1ea>
 800be52:	46c0      	nop			@ (mov r8, r8)
 800be54:	0800cc50 	.word	0x0800cc50
 800be58:	0800cc56 	.word	0x0800cc56
 800be5c:	0800cc5a 	.word	0x0800cc5a
 800be60:	08009741 	.word	0x08009741
 800be64:	0800bc0b 	.word	0x0800bc0b

0800be68 <__sflush_r>:
 800be68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be6a:	220c      	movs	r2, #12
 800be6c:	5e8b      	ldrsh	r3, [r1, r2]
 800be6e:	0005      	movs	r5, r0
 800be70:	000c      	movs	r4, r1
 800be72:	071a      	lsls	r2, r3, #28
 800be74:	d456      	bmi.n	800bf24 <__sflush_r+0xbc>
 800be76:	684a      	ldr	r2, [r1, #4]
 800be78:	2a00      	cmp	r2, #0
 800be7a:	dc02      	bgt.n	800be82 <__sflush_r+0x1a>
 800be7c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800be7e:	2a00      	cmp	r2, #0
 800be80:	dd4e      	ble.n	800bf20 <__sflush_r+0xb8>
 800be82:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800be84:	2f00      	cmp	r7, #0
 800be86:	d04b      	beq.n	800bf20 <__sflush_r+0xb8>
 800be88:	2200      	movs	r2, #0
 800be8a:	2080      	movs	r0, #128	@ 0x80
 800be8c:	682e      	ldr	r6, [r5, #0]
 800be8e:	602a      	str	r2, [r5, #0]
 800be90:	001a      	movs	r2, r3
 800be92:	0140      	lsls	r0, r0, #5
 800be94:	6a21      	ldr	r1, [r4, #32]
 800be96:	4002      	ands	r2, r0
 800be98:	4203      	tst	r3, r0
 800be9a:	d033      	beq.n	800bf04 <__sflush_r+0x9c>
 800be9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be9e:	89a3      	ldrh	r3, [r4, #12]
 800bea0:	075b      	lsls	r3, r3, #29
 800bea2:	d506      	bpl.n	800beb2 <__sflush_r+0x4a>
 800bea4:	6863      	ldr	r3, [r4, #4]
 800bea6:	1ad2      	subs	r2, r2, r3
 800bea8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d001      	beq.n	800beb2 <__sflush_r+0x4a>
 800beae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800beb0:	1ad2      	subs	r2, r2, r3
 800beb2:	2300      	movs	r3, #0
 800beb4:	0028      	movs	r0, r5
 800beb6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800beb8:	6a21      	ldr	r1, [r4, #32]
 800beba:	47b8      	blx	r7
 800bebc:	89a2      	ldrh	r2, [r4, #12]
 800bebe:	1c43      	adds	r3, r0, #1
 800bec0:	d106      	bne.n	800bed0 <__sflush_r+0x68>
 800bec2:	6829      	ldr	r1, [r5, #0]
 800bec4:	291d      	cmp	r1, #29
 800bec6:	d846      	bhi.n	800bf56 <__sflush_r+0xee>
 800bec8:	4b29      	ldr	r3, [pc, #164]	@ (800bf70 <__sflush_r+0x108>)
 800beca:	410b      	asrs	r3, r1
 800becc:	07db      	lsls	r3, r3, #31
 800bece:	d442      	bmi.n	800bf56 <__sflush_r+0xee>
 800bed0:	2300      	movs	r3, #0
 800bed2:	6063      	str	r3, [r4, #4]
 800bed4:	6923      	ldr	r3, [r4, #16]
 800bed6:	6023      	str	r3, [r4, #0]
 800bed8:	04d2      	lsls	r2, r2, #19
 800beda:	d505      	bpl.n	800bee8 <__sflush_r+0x80>
 800bedc:	1c43      	adds	r3, r0, #1
 800bede:	d102      	bne.n	800bee6 <__sflush_r+0x7e>
 800bee0:	682b      	ldr	r3, [r5, #0]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d100      	bne.n	800bee8 <__sflush_r+0x80>
 800bee6:	6560      	str	r0, [r4, #84]	@ 0x54
 800bee8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800beea:	602e      	str	r6, [r5, #0]
 800beec:	2900      	cmp	r1, #0
 800beee:	d017      	beq.n	800bf20 <__sflush_r+0xb8>
 800bef0:	0023      	movs	r3, r4
 800bef2:	3344      	adds	r3, #68	@ 0x44
 800bef4:	4299      	cmp	r1, r3
 800bef6:	d002      	beq.n	800befe <__sflush_r+0x96>
 800bef8:	0028      	movs	r0, r5
 800befa:	f7ff f869 	bl	800afd0 <_free_r>
 800befe:	2300      	movs	r3, #0
 800bf00:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf02:	e00d      	b.n	800bf20 <__sflush_r+0xb8>
 800bf04:	2301      	movs	r3, #1
 800bf06:	0028      	movs	r0, r5
 800bf08:	47b8      	blx	r7
 800bf0a:	0002      	movs	r2, r0
 800bf0c:	1c43      	adds	r3, r0, #1
 800bf0e:	d1c6      	bne.n	800be9e <__sflush_r+0x36>
 800bf10:	682b      	ldr	r3, [r5, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d0c3      	beq.n	800be9e <__sflush_r+0x36>
 800bf16:	2b1d      	cmp	r3, #29
 800bf18:	d001      	beq.n	800bf1e <__sflush_r+0xb6>
 800bf1a:	2b16      	cmp	r3, #22
 800bf1c:	d11a      	bne.n	800bf54 <__sflush_r+0xec>
 800bf1e:	602e      	str	r6, [r5, #0]
 800bf20:	2000      	movs	r0, #0
 800bf22:	e01e      	b.n	800bf62 <__sflush_r+0xfa>
 800bf24:	690e      	ldr	r6, [r1, #16]
 800bf26:	2e00      	cmp	r6, #0
 800bf28:	d0fa      	beq.n	800bf20 <__sflush_r+0xb8>
 800bf2a:	680f      	ldr	r7, [r1, #0]
 800bf2c:	600e      	str	r6, [r1, #0]
 800bf2e:	1bba      	subs	r2, r7, r6
 800bf30:	9201      	str	r2, [sp, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	079b      	lsls	r3, r3, #30
 800bf36:	d100      	bne.n	800bf3a <__sflush_r+0xd2>
 800bf38:	694a      	ldr	r2, [r1, #20]
 800bf3a:	60a2      	str	r2, [r4, #8]
 800bf3c:	9b01      	ldr	r3, [sp, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	ddee      	ble.n	800bf20 <__sflush_r+0xb8>
 800bf42:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800bf44:	0032      	movs	r2, r6
 800bf46:	001f      	movs	r7, r3
 800bf48:	0028      	movs	r0, r5
 800bf4a:	9b01      	ldr	r3, [sp, #4]
 800bf4c:	6a21      	ldr	r1, [r4, #32]
 800bf4e:	47b8      	blx	r7
 800bf50:	2800      	cmp	r0, #0
 800bf52:	dc07      	bgt.n	800bf64 <__sflush_r+0xfc>
 800bf54:	89a2      	ldrh	r2, [r4, #12]
 800bf56:	2340      	movs	r3, #64	@ 0x40
 800bf58:	2001      	movs	r0, #1
 800bf5a:	4313      	orrs	r3, r2
 800bf5c:	b21b      	sxth	r3, r3
 800bf5e:	81a3      	strh	r3, [r4, #12]
 800bf60:	4240      	negs	r0, r0
 800bf62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bf64:	9b01      	ldr	r3, [sp, #4]
 800bf66:	1836      	adds	r6, r6, r0
 800bf68:	1a1b      	subs	r3, r3, r0
 800bf6a:	9301      	str	r3, [sp, #4]
 800bf6c:	e7e6      	b.n	800bf3c <__sflush_r+0xd4>
 800bf6e:	46c0      	nop			@ (mov r8, r8)
 800bf70:	dfbffffe 	.word	0xdfbffffe

0800bf74 <_fflush_r>:
 800bf74:	690b      	ldr	r3, [r1, #16]
 800bf76:	b570      	push	{r4, r5, r6, lr}
 800bf78:	0005      	movs	r5, r0
 800bf7a:	000c      	movs	r4, r1
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d102      	bne.n	800bf86 <_fflush_r+0x12>
 800bf80:	2500      	movs	r5, #0
 800bf82:	0028      	movs	r0, r5
 800bf84:	bd70      	pop	{r4, r5, r6, pc}
 800bf86:	2800      	cmp	r0, #0
 800bf88:	d004      	beq.n	800bf94 <_fflush_r+0x20>
 800bf8a:	6a03      	ldr	r3, [r0, #32]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d101      	bne.n	800bf94 <_fflush_r+0x20>
 800bf90:	f7fe f822 	bl	8009fd8 <__sinit>
 800bf94:	220c      	movs	r2, #12
 800bf96:	5ea3      	ldrsh	r3, [r4, r2]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d0f1      	beq.n	800bf80 <_fflush_r+0xc>
 800bf9c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bf9e:	07d2      	lsls	r2, r2, #31
 800bfa0:	d404      	bmi.n	800bfac <_fflush_r+0x38>
 800bfa2:	059b      	lsls	r3, r3, #22
 800bfa4:	d402      	bmi.n	800bfac <_fflush_r+0x38>
 800bfa6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfa8:	f7fe f983 	bl	800a2b2 <__retarget_lock_acquire_recursive>
 800bfac:	0028      	movs	r0, r5
 800bfae:	0021      	movs	r1, r4
 800bfb0:	f7ff ff5a 	bl	800be68 <__sflush_r>
 800bfb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bfb6:	0005      	movs	r5, r0
 800bfb8:	07db      	lsls	r3, r3, #31
 800bfba:	d4e2      	bmi.n	800bf82 <_fflush_r+0xe>
 800bfbc:	89a3      	ldrh	r3, [r4, #12]
 800bfbe:	059b      	lsls	r3, r3, #22
 800bfc0:	d4df      	bmi.n	800bf82 <_fflush_r+0xe>
 800bfc2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfc4:	f7fe f976 	bl	800a2b4 <__retarget_lock_release_recursive>
 800bfc8:	e7db      	b.n	800bf82 <_fflush_r+0xe>

0800bfca <__swbuf_r>:
 800bfca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfcc:	0006      	movs	r6, r0
 800bfce:	000d      	movs	r5, r1
 800bfd0:	0014      	movs	r4, r2
 800bfd2:	2800      	cmp	r0, #0
 800bfd4:	d004      	beq.n	800bfe0 <__swbuf_r+0x16>
 800bfd6:	6a03      	ldr	r3, [r0, #32]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d101      	bne.n	800bfe0 <__swbuf_r+0x16>
 800bfdc:	f7fd fffc 	bl	8009fd8 <__sinit>
 800bfe0:	69a3      	ldr	r3, [r4, #24]
 800bfe2:	60a3      	str	r3, [r4, #8]
 800bfe4:	89a3      	ldrh	r3, [r4, #12]
 800bfe6:	071b      	lsls	r3, r3, #28
 800bfe8:	d502      	bpl.n	800bff0 <__swbuf_r+0x26>
 800bfea:	6923      	ldr	r3, [r4, #16]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d109      	bne.n	800c004 <__swbuf_r+0x3a>
 800bff0:	0021      	movs	r1, r4
 800bff2:	0030      	movs	r0, r6
 800bff4:	f000 f82c 	bl	800c050 <__swsetup_r>
 800bff8:	2800      	cmp	r0, #0
 800bffa:	d003      	beq.n	800c004 <__swbuf_r+0x3a>
 800bffc:	2501      	movs	r5, #1
 800bffe:	426d      	negs	r5, r5
 800c000:	0028      	movs	r0, r5
 800c002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c004:	6923      	ldr	r3, [r4, #16]
 800c006:	6820      	ldr	r0, [r4, #0]
 800c008:	b2ef      	uxtb	r7, r5
 800c00a:	1ac0      	subs	r0, r0, r3
 800c00c:	6963      	ldr	r3, [r4, #20]
 800c00e:	b2ed      	uxtb	r5, r5
 800c010:	4283      	cmp	r3, r0
 800c012:	dc05      	bgt.n	800c020 <__swbuf_r+0x56>
 800c014:	0021      	movs	r1, r4
 800c016:	0030      	movs	r0, r6
 800c018:	f7ff ffac 	bl	800bf74 <_fflush_r>
 800c01c:	2800      	cmp	r0, #0
 800c01e:	d1ed      	bne.n	800bffc <__swbuf_r+0x32>
 800c020:	68a3      	ldr	r3, [r4, #8]
 800c022:	3001      	adds	r0, #1
 800c024:	3b01      	subs	r3, #1
 800c026:	60a3      	str	r3, [r4, #8]
 800c028:	6823      	ldr	r3, [r4, #0]
 800c02a:	1c5a      	adds	r2, r3, #1
 800c02c:	6022      	str	r2, [r4, #0]
 800c02e:	701f      	strb	r7, [r3, #0]
 800c030:	6963      	ldr	r3, [r4, #20]
 800c032:	4283      	cmp	r3, r0
 800c034:	d004      	beq.n	800c040 <__swbuf_r+0x76>
 800c036:	89a3      	ldrh	r3, [r4, #12]
 800c038:	07db      	lsls	r3, r3, #31
 800c03a:	d5e1      	bpl.n	800c000 <__swbuf_r+0x36>
 800c03c:	2d0a      	cmp	r5, #10
 800c03e:	d1df      	bne.n	800c000 <__swbuf_r+0x36>
 800c040:	0021      	movs	r1, r4
 800c042:	0030      	movs	r0, r6
 800c044:	f7ff ff96 	bl	800bf74 <_fflush_r>
 800c048:	2800      	cmp	r0, #0
 800c04a:	d0d9      	beq.n	800c000 <__swbuf_r+0x36>
 800c04c:	e7d6      	b.n	800bffc <__swbuf_r+0x32>
	...

0800c050 <__swsetup_r>:
 800c050:	4b2d      	ldr	r3, [pc, #180]	@ (800c108 <__swsetup_r+0xb8>)
 800c052:	b570      	push	{r4, r5, r6, lr}
 800c054:	0005      	movs	r5, r0
 800c056:	6818      	ldr	r0, [r3, #0]
 800c058:	000c      	movs	r4, r1
 800c05a:	2800      	cmp	r0, #0
 800c05c:	d004      	beq.n	800c068 <__swsetup_r+0x18>
 800c05e:	6a03      	ldr	r3, [r0, #32]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d101      	bne.n	800c068 <__swsetup_r+0x18>
 800c064:	f7fd ffb8 	bl	8009fd8 <__sinit>
 800c068:	230c      	movs	r3, #12
 800c06a:	5ee2      	ldrsh	r2, [r4, r3]
 800c06c:	0713      	lsls	r3, r2, #28
 800c06e:	d423      	bmi.n	800c0b8 <__swsetup_r+0x68>
 800c070:	06d3      	lsls	r3, r2, #27
 800c072:	d407      	bmi.n	800c084 <__swsetup_r+0x34>
 800c074:	2309      	movs	r3, #9
 800c076:	602b      	str	r3, [r5, #0]
 800c078:	2340      	movs	r3, #64	@ 0x40
 800c07a:	2001      	movs	r0, #1
 800c07c:	4313      	orrs	r3, r2
 800c07e:	81a3      	strh	r3, [r4, #12]
 800c080:	4240      	negs	r0, r0
 800c082:	e03a      	b.n	800c0fa <__swsetup_r+0xaa>
 800c084:	0752      	lsls	r2, r2, #29
 800c086:	d513      	bpl.n	800c0b0 <__swsetup_r+0x60>
 800c088:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c08a:	2900      	cmp	r1, #0
 800c08c:	d008      	beq.n	800c0a0 <__swsetup_r+0x50>
 800c08e:	0023      	movs	r3, r4
 800c090:	3344      	adds	r3, #68	@ 0x44
 800c092:	4299      	cmp	r1, r3
 800c094:	d002      	beq.n	800c09c <__swsetup_r+0x4c>
 800c096:	0028      	movs	r0, r5
 800c098:	f7fe ff9a 	bl	800afd0 <_free_r>
 800c09c:	2300      	movs	r3, #0
 800c09e:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0a0:	2224      	movs	r2, #36	@ 0x24
 800c0a2:	89a3      	ldrh	r3, [r4, #12]
 800c0a4:	4393      	bics	r3, r2
 800c0a6:	81a3      	strh	r3, [r4, #12]
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	6063      	str	r3, [r4, #4]
 800c0ac:	6923      	ldr	r3, [r4, #16]
 800c0ae:	6023      	str	r3, [r4, #0]
 800c0b0:	2308      	movs	r3, #8
 800c0b2:	89a2      	ldrh	r2, [r4, #12]
 800c0b4:	4313      	orrs	r3, r2
 800c0b6:	81a3      	strh	r3, [r4, #12]
 800c0b8:	6923      	ldr	r3, [r4, #16]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d10b      	bne.n	800c0d6 <__swsetup_r+0x86>
 800c0be:	21a0      	movs	r1, #160	@ 0xa0
 800c0c0:	2280      	movs	r2, #128	@ 0x80
 800c0c2:	89a3      	ldrh	r3, [r4, #12]
 800c0c4:	0089      	lsls	r1, r1, #2
 800c0c6:	0092      	lsls	r2, r2, #2
 800c0c8:	400b      	ands	r3, r1
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d003      	beq.n	800c0d6 <__swsetup_r+0x86>
 800c0ce:	0021      	movs	r1, r4
 800c0d0:	0028      	movs	r0, r5
 800c0d2:	f000 f91f 	bl	800c314 <__smakebuf_r>
 800c0d6:	230c      	movs	r3, #12
 800c0d8:	5ee2      	ldrsh	r2, [r4, r3]
 800c0da:	2101      	movs	r1, #1
 800c0dc:	0013      	movs	r3, r2
 800c0de:	400b      	ands	r3, r1
 800c0e0:	420a      	tst	r2, r1
 800c0e2:	d00b      	beq.n	800c0fc <__swsetup_r+0xac>
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	60a3      	str	r3, [r4, #8]
 800c0e8:	6963      	ldr	r3, [r4, #20]
 800c0ea:	425b      	negs	r3, r3
 800c0ec:	61a3      	str	r3, [r4, #24]
 800c0ee:	2000      	movs	r0, #0
 800c0f0:	6923      	ldr	r3, [r4, #16]
 800c0f2:	4283      	cmp	r3, r0
 800c0f4:	d101      	bne.n	800c0fa <__swsetup_r+0xaa>
 800c0f6:	0613      	lsls	r3, r2, #24
 800c0f8:	d4be      	bmi.n	800c078 <__swsetup_r+0x28>
 800c0fa:	bd70      	pop	{r4, r5, r6, pc}
 800c0fc:	0791      	lsls	r1, r2, #30
 800c0fe:	d400      	bmi.n	800c102 <__swsetup_r+0xb2>
 800c100:	6963      	ldr	r3, [r4, #20]
 800c102:	60a3      	str	r3, [r4, #8]
 800c104:	e7f3      	b.n	800c0ee <__swsetup_r+0x9e>
 800c106:	46c0      	nop			@ (mov r8, r8)
 800c108:	20000030 	.word	0x20000030

0800c10c <memmove>:
 800c10c:	b510      	push	{r4, lr}
 800c10e:	4288      	cmp	r0, r1
 800c110:	d806      	bhi.n	800c120 <memmove+0x14>
 800c112:	2300      	movs	r3, #0
 800c114:	429a      	cmp	r2, r3
 800c116:	d008      	beq.n	800c12a <memmove+0x1e>
 800c118:	5ccc      	ldrb	r4, [r1, r3]
 800c11a:	54c4      	strb	r4, [r0, r3]
 800c11c:	3301      	adds	r3, #1
 800c11e:	e7f9      	b.n	800c114 <memmove+0x8>
 800c120:	188b      	adds	r3, r1, r2
 800c122:	4298      	cmp	r0, r3
 800c124:	d2f5      	bcs.n	800c112 <memmove+0x6>
 800c126:	3a01      	subs	r2, #1
 800c128:	d200      	bcs.n	800c12c <memmove+0x20>
 800c12a:	bd10      	pop	{r4, pc}
 800c12c:	5c8b      	ldrb	r3, [r1, r2]
 800c12e:	5483      	strb	r3, [r0, r2]
 800c130:	e7f9      	b.n	800c126 <memmove+0x1a>
	...

0800c134 <_sbrk_r>:
 800c134:	2300      	movs	r3, #0
 800c136:	b570      	push	{r4, r5, r6, lr}
 800c138:	4d06      	ldr	r5, [pc, #24]	@ (800c154 <_sbrk_r+0x20>)
 800c13a:	0004      	movs	r4, r0
 800c13c:	0008      	movs	r0, r1
 800c13e:	602b      	str	r3, [r5, #0]
 800c140:	f7f8 f882 	bl	8004248 <_sbrk>
 800c144:	1c43      	adds	r3, r0, #1
 800c146:	d103      	bne.n	800c150 <_sbrk_r+0x1c>
 800c148:	682b      	ldr	r3, [r5, #0]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d000      	beq.n	800c150 <_sbrk_r+0x1c>
 800c14e:	6023      	str	r3, [r4, #0]
 800c150:	bd70      	pop	{r4, r5, r6, pc}
 800c152:	46c0      	nop			@ (mov r8, r8)
 800c154:	20000e70 	.word	0x20000e70

0800c158 <memcpy>:
 800c158:	2300      	movs	r3, #0
 800c15a:	b510      	push	{r4, lr}
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d100      	bne.n	800c162 <memcpy+0xa>
 800c160:	bd10      	pop	{r4, pc}
 800c162:	5ccc      	ldrb	r4, [r1, r3]
 800c164:	54c4      	strb	r4, [r0, r3]
 800c166:	3301      	adds	r3, #1
 800c168:	e7f8      	b.n	800c15c <memcpy+0x4>
	...

0800c16c <__assert_func>:
 800c16c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c16e:	0014      	movs	r4, r2
 800c170:	001a      	movs	r2, r3
 800c172:	4b09      	ldr	r3, [pc, #36]	@ (800c198 <__assert_func+0x2c>)
 800c174:	0005      	movs	r5, r0
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	000e      	movs	r6, r1
 800c17a:	68d8      	ldr	r0, [r3, #12]
 800c17c:	4b07      	ldr	r3, [pc, #28]	@ (800c19c <__assert_func+0x30>)
 800c17e:	2c00      	cmp	r4, #0
 800c180:	d101      	bne.n	800c186 <__assert_func+0x1a>
 800c182:	4b07      	ldr	r3, [pc, #28]	@ (800c1a0 <__assert_func+0x34>)
 800c184:	001c      	movs	r4, r3
 800c186:	4907      	ldr	r1, [pc, #28]	@ (800c1a4 <__assert_func+0x38>)
 800c188:	9301      	str	r3, [sp, #4]
 800c18a:	9402      	str	r4, [sp, #8]
 800c18c:	002b      	movs	r3, r5
 800c18e:	9600      	str	r6, [sp, #0]
 800c190:	f000 f886 	bl	800c2a0 <fiprintf>
 800c194:	f000 f924 	bl	800c3e0 <abort>
 800c198:	20000030 	.word	0x20000030
 800c19c:	0800cc6b 	.word	0x0800cc6b
 800c1a0:	0800cca6 	.word	0x0800cca6
 800c1a4:	0800cc78 	.word	0x0800cc78

0800c1a8 <_calloc_r>:
 800c1a8:	b570      	push	{r4, r5, r6, lr}
 800c1aa:	0c0b      	lsrs	r3, r1, #16
 800c1ac:	0c15      	lsrs	r5, r2, #16
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d11e      	bne.n	800c1f0 <_calloc_r+0x48>
 800c1b2:	2d00      	cmp	r5, #0
 800c1b4:	d10c      	bne.n	800c1d0 <_calloc_r+0x28>
 800c1b6:	b289      	uxth	r1, r1
 800c1b8:	b294      	uxth	r4, r2
 800c1ba:	434c      	muls	r4, r1
 800c1bc:	0021      	movs	r1, r4
 800c1be:	f7fe ff7d 	bl	800b0bc <_malloc_r>
 800c1c2:	1e05      	subs	r5, r0, #0
 800c1c4:	d01a      	beq.n	800c1fc <_calloc_r+0x54>
 800c1c6:	0022      	movs	r2, r4
 800c1c8:	2100      	movs	r1, #0
 800c1ca:	f7fd ffed 	bl	800a1a8 <memset>
 800c1ce:	e016      	b.n	800c1fe <_calloc_r+0x56>
 800c1d0:	1c2b      	adds	r3, r5, #0
 800c1d2:	1c0c      	adds	r4, r1, #0
 800c1d4:	b289      	uxth	r1, r1
 800c1d6:	b292      	uxth	r2, r2
 800c1d8:	434a      	muls	r2, r1
 800c1da:	b29b      	uxth	r3, r3
 800c1dc:	b2a1      	uxth	r1, r4
 800c1de:	4359      	muls	r1, r3
 800c1e0:	0c14      	lsrs	r4, r2, #16
 800c1e2:	190c      	adds	r4, r1, r4
 800c1e4:	0c23      	lsrs	r3, r4, #16
 800c1e6:	d107      	bne.n	800c1f8 <_calloc_r+0x50>
 800c1e8:	0424      	lsls	r4, r4, #16
 800c1ea:	b292      	uxth	r2, r2
 800c1ec:	4314      	orrs	r4, r2
 800c1ee:	e7e5      	b.n	800c1bc <_calloc_r+0x14>
 800c1f0:	2d00      	cmp	r5, #0
 800c1f2:	d101      	bne.n	800c1f8 <_calloc_r+0x50>
 800c1f4:	1c14      	adds	r4, r2, #0
 800c1f6:	e7ed      	b.n	800c1d4 <_calloc_r+0x2c>
 800c1f8:	230c      	movs	r3, #12
 800c1fa:	6003      	str	r3, [r0, #0]
 800c1fc:	2500      	movs	r5, #0
 800c1fe:	0028      	movs	r0, r5
 800c200:	bd70      	pop	{r4, r5, r6, pc}

0800c202 <__ascii_mbtowc>:
 800c202:	b082      	sub	sp, #8
 800c204:	2900      	cmp	r1, #0
 800c206:	d100      	bne.n	800c20a <__ascii_mbtowc+0x8>
 800c208:	a901      	add	r1, sp, #4
 800c20a:	1e10      	subs	r0, r2, #0
 800c20c:	d006      	beq.n	800c21c <__ascii_mbtowc+0x1a>
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d006      	beq.n	800c220 <__ascii_mbtowc+0x1e>
 800c212:	7813      	ldrb	r3, [r2, #0]
 800c214:	600b      	str	r3, [r1, #0]
 800c216:	7810      	ldrb	r0, [r2, #0]
 800c218:	1e43      	subs	r3, r0, #1
 800c21a:	4198      	sbcs	r0, r3
 800c21c:	b002      	add	sp, #8
 800c21e:	4770      	bx	lr
 800c220:	2002      	movs	r0, #2
 800c222:	4240      	negs	r0, r0
 800c224:	e7fa      	b.n	800c21c <__ascii_mbtowc+0x1a>

0800c226 <_realloc_r>:
 800c226:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c228:	0006      	movs	r6, r0
 800c22a:	000c      	movs	r4, r1
 800c22c:	0015      	movs	r5, r2
 800c22e:	2900      	cmp	r1, #0
 800c230:	d105      	bne.n	800c23e <_realloc_r+0x18>
 800c232:	0011      	movs	r1, r2
 800c234:	f7fe ff42 	bl	800b0bc <_malloc_r>
 800c238:	0004      	movs	r4, r0
 800c23a:	0020      	movs	r0, r4
 800c23c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c23e:	2a00      	cmp	r2, #0
 800c240:	d103      	bne.n	800c24a <_realloc_r+0x24>
 800c242:	f7fe fec5 	bl	800afd0 <_free_r>
 800c246:	2400      	movs	r4, #0
 800c248:	e7f7      	b.n	800c23a <_realloc_r+0x14>
 800c24a:	f000 f8d0 	bl	800c3ee <_malloc_usable_size_r>
 800c24e:	0007      	movs	r7, r0
 800c250:	4285      	cmp	r5, r0
 800c252:	d802      	bhi.n	800c25a <_realloc_r+0x34>
 800c254:	0843      	lsrs	r3, r0, #1
 800c256:	42ab      	cmp	r3, r5
 800c258:	d3ef      	bcc.n	800c23a <_realloc_r+0x14>
 800c25a:	0029      	movs	r1, r5
 800c25c:	0030      	movs	r0, r6
 800c25e:	f7fe ff2d 	bl	800b0bc <_malloc_r>
 800c262:	9001      	str	r0, [sp, #4]
 800c264:	2800      	cmp	r0, #0
 800c266:	d0ee      	beq.n	800c246 <_realloc_r+0x20>
 800c268:	002a      	movs	r2, r5
 800c26a:	42bd      	cmp	r5, r7
 800c26c:	d900      	bls.n	800c270 <_realloc_r+0x4a>
 800c26e:	003a      	movs	r2, r7
 800c270:	0021      	movs	r1, r4
 800c272:	9801      	ldr	r0, [sp, #4]
 800c274:	f7ff ff70 	bl	800c158 <memcpy>
 800c278:	0021      	movs	r1, r4
 800c27a:	0030      	movs	r0, r6
 800c27c:	f7fe fea8 	bl	800afd0 <_free_r>
 800c280:	9c01      	ldr	r4, [sp, #4]
 800c282:	e7da      	b.n	800c23a <_realloc_r+0x14>

0800c284 <__ascii_wctomb>:
 800c284:	0003      	movs	r3, r0
 800c286:	1e08      	subs	r0, r1, #0
 800c288:	d005      	beq.n	800c296 <__ascii_wctomb+0x12>
 800c28a:	2aff      	cmp	r2, #255	@ 0xff
 800c28c:	d904      	bls.n	800c298 <__ascii_wctomb+0x14>
 800c28e:	228a      	movs	r2, #138	@ 0x8a
 800c290:	2001      	movs	r0, #1
 800c292:	601a      	str	r2, [r3, #0]
 800c294:	4240      	negs	r0, r0
 800c296:	4770      	bx	lr
 800c298:	2001      	movs	r0, #1
 800c29a:	700a      	strb	r2, [r1, #0]
 800c29c:	e7fb      	b.n	800c296 <__ascii_wctomb+0x12>
	...

0800c2a0 <fiprintf>:
 800c2a0:	b40e      	push	{r1, r2, r3}
 800c2a2:	b517      	push	{r0, r1, r2, r4, lr}
 800c2a4:	4c05      	ldr	r4, [pc, #20]	@ (800c2bc <fiprintf+0x1c>)
 800c2a6:	ab05      	add	r3, sp, #20
 800c2a8:	cb04      	ldmia	r3!, {r2}
 800c2aa:	0001      	movs	r1, r0
 800c2ac:	6820      	ldr	r0, [r4, #0]
 800c2ae:	9301      	str	r3, [sp, #4]
 800c2b0:	f7ff fcbe 	bl	800bc30 <_vfiprintf_r>
 800c2b4:	bc1e      	pop	{r1, r2, r3, r4}
 800c2b6:	bc08      	pop	{r3}
 800c2b8:	b003      	add	sp, #12
 800c2ba:	4718      	bx	r3
 800c2bc:	20000030 	.word	0x20000030

0800c2c0 <__swhatbuf_r>:
 800c2c0:	b570      	push	{r4, r5, r6, lr}
 800c2c2:	000e      	movs	r6, r1
 800c2c4:	001d      	movs	r5, r3
 800c2c6:	230e      	movs	r3, #14
 800c2c8:	5ec9      	ldrsh	r1, [r1, r3]
 800c2ca:	0014      	movs	r4, r2
 800c2cc:	b096      	sub	sp, #88	@ 0x58
 800c2ce:	2900      	cmp	r1, #0
 800c2d0:	da0c      	bge.n	800c2ec <__swhatbuf_r+0x2c>
 800c2d2:	89b2      	ldrh	r2, [r6, #12]
 800c2d4:	2380      	movs	r3, #128	@ 0x80
 800c2d6:	0011      	movs	r1, r2
 800c2d8:	4019      	ands	r1, r3
 800c2da:	421a      	tst	r2, r3
 800c2dc:	d114      	bne.n	800c308 <__swhatbuf_r+0x48>
 800c2de:	2380      	movs	r3, #128	@ 0x80
 800c2e0:	00db      	lsls	r3, r3, #3
 800c2e2:	2000      	movs	r0, #0
 800c2e4:	6029      	str	r1, [r5, #0]
 800c2e6:	6023      	str	r3, [r4, #0]
 800c2e8:	b016      	add	sp, #88	@ 0x58
 800c2ea:	bd70      	pop	{r4, r5, r6, pc}
 800c2ec:	466a      	mov	r2, sp
 800c2ee:	f000 f853 	bl	800c398 <_fstat_r>
 800c2f2:	2800      	cmp	r0, #0
 800c2f4:	dbed      	blt.n	800c2d2 <__swhatbuf_r+0x12>
 800c2f6:	23f0      	movs	r3, #240	@ 0xf0
 800c2f8:	9901      	ldr	r1, [sp, #4]
 800c2fa:	021b      	lsls	r3, r3, #8
 800c2fc:	4019      	ands	r1, r3
 800c2fe:	4b04      	ldr	r3, [pc, #16]	@ (800c310 <__swhatbuf_r+0x50>)
 800c300:	18c9      	adds	r1, r1, r3
 800c302:	424b      	negs	r3, r1
 800c304:	4159      	adcs	r1, r3
 800c306:	e7ea      	b.n	800c2de <__swhatbuf_r+0x1e>
 800c308:	2100      	movs	r1, #0
 800c30a:	2340      	movs	r3, #64	@ 0x40
 800c30c:	e7e9      	b.n	800c2e2 <__swhatbuf_r+0x22>
 800c30e:	46c0      	nop			@ (mov r8, r8)
 800c310:	ffffe000 	.word	0xffffe000

0800c314 <__smakebuf_r>:
 800c314:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c316:	2602      	movs	r6, #2
 800c318:	898b      	ldrh	r3, [r1, #12]
 800c31a:	0005      	movs	r5, r0
 800c31c:	000c      	movs	r4, r1
 800c31e:	b085      	sub	sp, #20
 800c320:	4233      	tst	r3, r6
 800c322:	d007      	beq.n	800c334 <__smakebuf_r+0x20>
 800c324:	0023      	movs	r3, r4
 800c326:	3347      	adds	r3, #71	@ 0x47
 800c328:	6023      	str	r3, [r4, #0]
 800c32a:	6123      	str	r3, [r4, #16]
 800c32c:	2301      	movs	r3, #1
 800c32e:	6163      	str	r3, [r4, #20]
 800c330:	b005      	add	sp, #20
 800c332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c334:	ab03      	add	r3, sp, #12
 800c336:	aa02      	add	r2, sp, #8
 800c338:	f7ff ffc2 	bl	800c2c0 <__swhatbuf_r>
 800c33c:	9f02      	ldr	r7, [sp, #8]
 800c33e:	9001      	str	r0, [sp, #4]
 800c340:	0039      	movs	r1, r7
 800c342:	0028      	movs	r0, r5
 800c344:	f7fe feba 	bl	800b0bc <_malloc_r>
 800c348:	2800      	cmp	r0, #0
 800c34a:	d108      	bne.n	800c35e <__smakebuf_r+0x4a>
 800c34c:	220c      	movs	r2, #12
 800c34e:	5ea3      	ldrsh	r3, [r4, r2]
 800c350:	059a      	lsls	r2, r3, #22
 800c352:	d4ed      	bmi.n	800c330 <__smakebuf_r+0x1c>
 800c354:	2203      	movs	r2, #3
 800c356:	4393      	bics	r3, r2
 800c358:	431e      	orrs	r6, r3
 800c35a:	81a6      	strh	r6, [r4, #12]
 800c35c:	e7e2      	b.n	800c324 <__smakebuf_r+0x10>
 800c35e:	2380      	movs	r3, #128	@ 0x80
 800c360:	89a2      	ldrh	r2, [r4, #12]
 800c362:	6020      	str	r0, [r4, #0]
 800c364:	4313      	orrs	r3, r2
 800c366:	81a3      	strh	r3, [r4, #12]
 800c368:	9b03      	ldr	r3, [sp, #12]
 800c36a:	6120      	str	r0, [r4, #16]
 800c36c:	6167      	str	r7, [r4, #20]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d00c      	beq.n	800c38c <__smakebuf_r+0x78>
 800c372:	0028      	movs	r0, r5
 800c374:	230e      	movs	r3, #14
 800c376:	5ee1      	ldrsh	r1, [r4, r3]
 800c378:	f000 f820 	bl	800c3bc <_isatty_r>
 800c37c:	2800      	cmp	r0, #0
 800c37e:	d005      	beq.n	800c38c <__smakebuf_r+0x78>
 800c380:	2303      	movs	r3, #3
 800c382:	89a2      	ldrh	r2, [r4, #12]
 800c384:	439a      	bics	r2, r3
 800c386:	3b02      	subs	r3, #2
 800c388:	4313      	orrs	r3, r2
 800c38a:	81a3      	strh	r3, [r4, #12]
 800c38c:	89a3      	ldrh	r3, [r4, #12]
 800c38e:	9a01      	ldr	r2, [sp, #4]
 800c390:	4313      	orrs	r3, r2
 800c392:	81a3      	strh	r3, [r4, #12]
 800c394:	e7cc      	b.n	800c330 <__smakebuf_r+0x1c>
	...

0800c398 <_fstat_r>:
 800c398:	2300      	movs	r3, #0
 800c39a:	b570      	push	{r4, r5, r6, lr}
 800c39c:	4d06      	ldr	r5, [pc, #24]	@ (800c3b8 <_fstat_r+0x20>)
 800c39e:	0004      	movs	r4, r0
 800c3a0:	0008      	movs	r0, r1
 800c3a2:	0011      	movs	r1, r2
 800c3a4:	602b      	str	r3, [r5, #0]
 800c3a6:	f7f7 ff2d 	bl	8004204 <_fstat>
 800c3aa:	1c43      	adds	r3, r0, #1
 800c3ac:	d103      	bne.n	800c3b6 <_fstat_r+0x1e>
 800c3ae:	682b      	ldr	r3, [r5, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d000      	beq.n	800c3b6 <_fstat_r+0x1e>
 800c3b4:	6023      	str	r3, [r4, #0]
 800c3b6:	bd70      	pop	{r4, r5, r6, pc}
 800c3b8:	20000e70 	.word	0x20000e70

0800c3bc <_isatty_r>:
 800c3bc:	2300      	movs	r3, #0
 800c3be:	b570      	push	{r4, r5, r6, lr}
 800c3c0:	4d06      	ldr	r5, [pc, #24]	@ (800c3dc <_isatty_r+0x20>)
 800c3c2:	0004      	movs	r4, r0
 800c3c4:	0008      	movs	r0, r1
 800c3c6:	602b      	str	r3, [r5, #0]
 800c3c8:	f7f7 ff2a 	bl	8004220 <_isatty>
 800c3cc:	1c43      	adds	r3, r0, #1
 800c3ce:	d103      	bne.n	800c3d8 <_isatty_r+0x1c>
 800c3d0:	682b      	ldr	r3, [r5, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d000      	beq.n	800c3d8 <_isatty_r+0x1c>
 800c3d6:	6023      	str	r3, [r4, #0]
 800c3d8:	bd70      	pop	{r4, r5, r6, pc}
 800c3da:	46c0      	nop			@ (mov r8, r8)
 800c3dc:	20000e70 	.word	0x20000e70

0800c3e0 <abort>:
 800c3e0:	2006      	movs	r0, #6
 800c3e2:	b510      	push	{r4, lr}
 800c3e4:	f000 f834 	bl	800c450 <raise>
 800c3e8:	2001      	movs	r0, #1
 800c3ea:	f7f7 fed7 	bl	800419c <_exit>

0800c3ee <_malloc_usable_size_r>:
 800c3ee:	1f0b      	subs	r3, r1, #4
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	1f18      	subs	r0, r3, #4
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	da01      	bge.n	800c3fc <_malloc_usable_size_r+0xe>
 800c3f8:	580b      	ldr	r3, [r1, r0]
 800c3fa:	18c0      	adds	r0, r0, r3
 800c3fc:	4770      	bx	lr

0800c3fe <_raise_r>:
 800c3fe:	b570      	push	{r4, r5, r6, lr}
 800c400:	0004      	movs	r4, r0
 800c402:	000d      	movs	r5, r1
 800c404:	291f      	cmp	r1, #31
 800c406:	d904      	bls.n	800c412 <_raise_r+0x14>
 800c408:	2316      	movs	r3, #22
 800c40a:	6003      	str	r3, [r0, #0]
 800c40c:	2001      	movs	r0, #1
 800c40e:	4240      	negs	r0, r0
 800c410:	bd70      	pop	{r4, r5, r6, pc}
 800c412:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800c414:	2b00      	cmp	r3, #0
 800c416:	d004      	beq.n	800c422 <_raise_r+0x24>
 800c418:	008a      	lsls	r2, r1, #2
 800c41a:	189b      	adds	r3, r3, r2
 800c41c:	681a      	ldr	r2, [r3, #0]
 800c41e:	2a00      	cmp	r2, #0
 800c420:	d108      	bne.n	800c434 <_raise_r+0x36>
 800c422:	0020      	movs	r0, r4
 800c424:	f000 f830 	bl	800c488 <_getpid_r>
 800c428:	002a      	movs	r2, r5
 800c42a:	0001      	movs	r1, r0
 800c42c:	0020      	movs	r0, r4
 800c42e:	f000 f819 	bl	800c464 <_kill_r>
 800c432:	e7ed      	b.n	800c410 <_raise_r+0x12>
 800c434:	2a01      	cmp	r2, #1
 800c436:	d009      	beq.n	800c44c <_raise_r+0x4e>
 800c438:	1c51      	adds	r1, r2, #1
 800c43a:	d103      	bne.n	800c444 <_raise_r+0x46>
 800c43c:	2316      	movs	r3, #22
 800c43e:	6003      	str	r3, [r0, #0]
 800c440:	2001      	movs	r0, #1
 800c442:	e7e5      	b.n	800c410 <_raise_r+0x12>
 800c444:	2100      	movs	r1, #0
 800c446:	0028      	movs	r0, r5
 800c448:	6019      	str	r1, [r3, #0]
 800c44a:	4790      	blx	r2
 800c44c:	2000      	movs	r0, #0
 800c44e:	e7df      	b.n	800c410 <_raise_r+0x12>

0800c450 <raise>:
 800c450:	b510      	push	{r4, lr}
 800c452:	4b03      	ldr	r3, [pc, #12]	@ (800c460 <raise+0x10>)
 800c454:	0001      	movs	r1, r0
 800c456:	6818      	ldr	r0, [r3, #0]
 800c458:	f7ff ffd1 	bl	800c3fe <_raise_r>
 800c45c:	bd10      	pop	{r4, pc}
 800c45e:	46c0      	nop			@ (mov r8, r8)
 800c460:	20000030 	.word	0x20000030

0800c464 <_kill_r>:
 800c464:	2300      	movs	r3, #0
 800c466:	b570      	push	{r4, r5, r6, lr}
 800c468:	4d06      	ldr	r5, [pc, #24]	@ (800c484 <_kill_r+0x20>)
 800c46a:	0004      	movs	r4, r0
 800c46c:	0008      	movs	r0, r1
 800c46e:	0011      	movs	r1, r2
 800c470:	602b      	str	r3, [r5, #0]
 800c472:	f7f7 fe83 	bl	800417c <_kill>
 800c476:	1c43      	adds	r3, r0, #1
 800c478:	d103      	bne.n	800c482 <_kill_r+0x1e>
 800c47a:	682b      	ldr	r3, [r5, #0]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d000      	beq.n	800c482 <_kill_r+0x1e>
 800c480:	6023      	str	r3, [r4, #0]
 800c482:	bd70      	pop	{r4, r5, r6, pc}
 800c484:	20000e70 	.word	0x20000e70

0800c488 <_getpid_r>:
 800c488:	b510      	push	{r4, lr}
 800c48a:	f7f7 fe71 	bl	8004170 <_getpid>
 800c48e:	bd10      	pop	{r4, pc}

0800c490 <_init>:
 800c490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c492:	46c0      	nop			@ (mov r8, r8)
 800c494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c496:	bc08      	pop	{r3}
 800c498:	469e      	mov	lr, r3
 800c49a:	4770      	bx	lr

0800c49c <_fini>:
 800c49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49e:	46c0      	nop			@ (mov r8, r8)
 800c4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4a2:	bc08      	pop	{r3}
 800c4a4:	469e      	mov	lr, r3
 800c4a6:	4770      	bx	lr
