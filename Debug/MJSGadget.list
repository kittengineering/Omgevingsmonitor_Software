
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1f4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  0800a2b8  0800a2b8  0000b2b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a818  0800a818  0000c1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a818  0800a818  0000b818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a820  0800a820  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a820  0800a820  0000b820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a824  0800a824  0000b824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800a828  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e0  200001d8  0800aa00  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20000ab8  0800aa00  0000cab8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144e8  00000000  00000000  0000c200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037e0  00000000  00000000  000206e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  00023ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c89  00000000  00000000  00024f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177e7  00000000  00000000  00025bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a06a  00000000  00000000  0003d3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000841e8  00000000  00000000  0005740a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db5f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a68  00000000  00000000  000db638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000e00a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a29c 	.word	0x0800a29c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	0800a29c 	.word	0x0800a29c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f883 	bl	8001548 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ffc3 	bl	80013d8 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f875 	bl	8001548 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f86b 	bl	8001548 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ffed 	bl	8001460 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ffe3 	bl	8001460 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	@ (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f834 	bl	8000544 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			@ (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4699      	mov	r9, r3
 80004ee:	0c03      	lsrs	r3, r0, #16
 80004f0:	469c      	mov	ip, r3
 80004f2:	0413      	lsls	r3, r2, #16
 80004f4:	4647      	mov	r7, r8
 80004f6:	0c1b      	lsrs	r3, r3, #16
 80004f8:	001d      	movs	r5, r3
 80004fa:	000e      	movs	r6, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	0404      	lsls	r4, r0, #16
 8000500:	0c24      	lsrs	r4, r4, #16
 8000502:	b580      	push	{r7, lr}
 8000504:	0007      	movs	r7, r0
 8000506:	0c10      	lsrs	r0, r2, #16
 8000508:	434b      	muls	r3, r1
 800050a:	4365      	muls	r5, r4
 800050c:	4341      	muls	r1, r0
 800050e:	4360      	muls	r0, r4
 8000510:	0c2c      	lsrs	r4, r5, #16
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	1824      	adds	r4, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	42a3      	cmp	r3, r4
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	@ 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4356      	muls	r6, r2
 800052a:	0c23      	lsrs	r3, r4, #16
 800052c:	042d      	lsls	r5, r5, #16
 800052e:	0c2d      	lsrs	r5, r5, #16
 8000530:	1989      	adds	r1, r1, r6
 8000532:	4463      	add	r3, ip
 8000534:	0424      	lsls	r4, r4, #16
 8000536:	1960      	adds	r0, r4, r5
 8000538:	18c9      	adds	r1, r1, r3
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__udivmoddi4>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	4657      	mov	r7, sl
 8000548:	464e      	mov	r6, r9
 800054a:	4645      	mov	r5, r8
 800054c:	46de      	mov	lr, fp
 800054e:	b5e0      	push	{r5, r6, r7, lr}
 8000550:	0004      	movs	r4, r0
 8000552:	000d      	movs	r5, r1
 8000554:	4692      	mov	sl, r2
 8000556:	4699      	mov	r9, r3
 8000558:	b083      	sub	sp, #12
 800055a:	428b      	cmp	r3, r1
 800055c:	d830      	bhi.n	80005c0 <__udivmoddi4+0x7c>
 800055e:	d02d      	beq.n	80005bc <__udivmoddi4+0x78>
 8000560:	4649      	mov	r1, r9
 8000562:	4650      	mov	r0, sl
 8000564:	f001 ff94 	bl	8002490 <__clzdi2>
 8000568:	0029      	movs	r1, r5
 800056a:	0006      	movs	r6, r0
 800056c:	0020      	movs	r0, r4
 800056e:	f001 ff8f 	bl	8002490 <__clzdi2>
 8000572:	1a33      	subs	r3, r6, r0
 8000574:	4698      	mov	r8, r3
 8000576:	3b20      	subs	r3, #32
 8000578:	d434      	bmi.n	80005e4 <__udivmoddi4+0xa0>
 800057a:	469b      	mov	fp, r3
 800057c:	4653      	mov	r3, sl
 800057e:	465a      	mov	r2, fp
 8000580:	4093      	lsls	r3, r2
 8000582:	4642      	mov	r2, r8
 8000584:	001f      	movs	r7, r3
 8000586:	4653      	mov	r3, sl
 8000588:	4093      	lsls	r3, r2
 800058a:	001e      	movs	r6, r3
 800058c:	42af      	cmp	r7, r5
 800058e:	d83b      	bhi.n	8000608 <__udivmoddi4+0xc4>
 8000590:	42af      	cmp	r7, r5
 8000592:	d100      	bne.n	8000596 <__udivmoddi4+0x52>
 8000594:	e079      	b.n	800068a <__udivmoddi4+0x146>
 8000596:	465b      	mov	r3, fp
 8000598:	1ba4      	subs	r4, r4, r6
 800059a:	41bd      	sbcs	r5, r7
 800059c:	2b00      	cmp	r3, #0
 800059e:	da00      	bge.n	80005a2 <__udivmoddi4+0x5e>
 80005a0:	e076      	b.n	8000690 <__udivmoddi4+0x14c>
 80005a2:	2200      	movs	r2, #0
 80005a4:	2300      	movs	r3, #0
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	465a      	mov	r2, fp
 80005ae:	4093      	lsls	r3, r2
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	4642      	mov	r2, r8
 80005b6:	4093      	lsls	r3, r2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	e029      	b.n	8000610 <__udivmoddi4+0xcc>
 80005bc:	4282      	cmp	r2, r0
 80005be:	d9cf      	bls.n	8000560 <__udivmoddi4+0x1c>
 80005c0:	2200      	movs	r2, #0
 80005c2:	2300      	movs	r3, #0
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <__udivmoddi4+0x8e>
 80005ce:	601c      	str	r4, [r3, #0]
 80005d0:	605d      	str	r5, [r3, #4]
 80005d2:	9800      	ldr	r0, [sp, #0]
 80005d4:	9901      	ldr	r1, [sp, #4]
 80005d6:	b003      	add	sp, #12
 80005d8:	bcf0      	pop	{r4, r5, r6, r7}
 80005da:	46bb      	mov	fp, r7
 80005dc:	46b2      	mov	sl, r6
 80005de:	46a9      	mov	r9, r5
 80005e0:	46a0      	mov	r8, r4
 80005e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e4:	4642      	mov	r2, r8
 80005e6:	469b      	mov	fp, r3
 80005e8:	2320      	movs	r3, #32
 80005ea:	1a9b      	subs	r3, r3, r2
 80005ec:	4652      	mov	r2, sl
 80005ee:	40da      	lsrs	r2, r3
 80005f0:	4641      	mov	r1, r8
 80005f2:	0013      	movs	r3, r2
 80005f4:	464a      	mov	r2, r9
 80005f6:	408a      	lsls	r2, r1
 80005f8:	0017      	movs	r7, r2
 80005fa:	4642      	mov	r2, r8
 80005fc:	431f      	orrs	r7, r3
 80005fe:	4653      	mov	r3, sl
 8000600:	4093      	lsls	r3, r2
 8000602:	001e      	movs	r6, r3
 8000604:	42af      	cmp	r7, r5
 8000606:	d9c3      	bls.n	8000590 <__udivmoddi4+0x4c>
 8000608:	2200      	movs	r2, #0
 800060a:	2300      	movs	r3, #0
 800060c:	9200      	str	r2, [sp, #0]
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	4643      	mov	r3, r8
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0d8      	beq.n	80005c8 <__udivmoddi4+0x84>
 8000616:	07fb      	lsls	r3, r7, #31
 8000618:	0872      	lsrs	r2, r6, #1
 800061a:	431a      	orrs	r2, r3
 800061c:	4646      	mov	r6, r8
 800061e:	087b      	lsrs	r3, r7, #1
 8000620:	e00e      	b.n	8000640 <__udivmoddi4+0xfc>
 8000622:	42ab      	cmp	r3, r5
 8000624:	d101      	bne.n	800062a <__udivmoddi4+0xe6>
 8000626:	42a2      	cmp	r2, r4
 8000628:	d80c      	bhi.n	8000644 <__udivmoddi4+0x100>
 800062a:	1aa4      	subs	r4, r4, r2
 800062c:	419d      	sbcs	r5, r3
 800062e:	2001      	movs	r0, #1
 8000630:	1924      	adds	r4, r4, r4
 8000632:	416d      	adcs	r5, r5
 8000634:	2100      	movs	r1, #0
 8000636:	3e01      	subs	r6, #1
 8000638:	1824      	adds	r4, r4, r0
 800063a:	414d      	adcs	r5, r1
 800063c:	2e00      	cmp	r6, #0
 800063e:	d006      	beq.n	800064e <__udivmoddi4+0x10a>
 8000640:	42ab      	cmp	r3, r5
 8000642:	d9ee      	bls.n	8000622 <__udivmoddi4+0xde>
 8000644:	3e01      	subs	r6, #1
 8000646:	1924      	adds	r4, r4, r4
 8000648:	416d      	adcs	r5, r5
 800064a:	2e00      	cmp	r6, #0
 800064c:	d1f8      	bne.n	8000640 <__udivmoddi4+0xfc>
 800064e:	9800      	ldr	r0, [sp, #0]
 8000650:	9901      	ldr	r1, [sp, #4]
 8000652:	465b      	mov	r3, fp
 8000654:	1900      	adds	r0, r0, r4
 8000656:	4169      	adcs	r1, r5
 8000658:	2b00      	cmp	r3, #0
 800065a:	db24      	blt.n	80006a6 <__udivmoddi4+0x162>
 800065c:	002b      	movs	r3, r5
 800065e:	465a      	mov	r2, fp
 8000660:	4644      	mov	r4, r8
 8000662:	40d3      	lsrs	r3, r2
 8000664:	002a      	movs	r2, r5
 8000666:	40e2      	lsrs	r2, r4
 8000668:	001c      	movs	r4, r3
 800066a:	465b      	mov	r3, fp
 800066c:	0015      	movs	r5, r2
 800066e:	2b00      	cmp	r3, #0
 8000670:	db2a      	blt.n	80006c8 <__udivmoddi4+0x184>
 8000672:	0026      	movs	r6, r4
 8000674:	409e      	lsls	r6, r3
 8000676:	0033      	movs	r3, r6
 8000678:	0026      	movs	r6, r4
 800067a:	4647      	mov	r7, r8
 800067c:	40be      	lsls	r6, r7
 800067e:	0032      	movs	r2, r6
 8000680:	1a80      	subs	r0, r0, r2
 8000682:	4199      	sbcs	r1, r3
 8000684:	9000      	str	r0, [sp, #0]
 8000686:	9101      	str	r1, [sp, #4]
 8000688:	e79e      	b.n	80005c8 <__udivmoddi4+0x84>
 800068a:	42a3      	cmp	r3, r4
 800068c:	d8bc      	bhi.n	8000608 <__udivmoddi4+0xc4>
 800068e:	e782      	b.n	8000596 <__udivmoddi4+0x52>
 8000690:	4642      	mov	r2, r8
 8000692:	2320      	movs	r3, #32
 8000694:	2100      	movs	r1, #0
 8000696:	1a9b      	subs	r3, r3, r2
 8000698:	2200      	movs	r2, #0
 800069a:	9100      	str	r1, [sp, #0]
 800069c:	9201      	str	r2, [sp, #4]
 800069e:	2201      	movs	r2, #1
 80006a0:	40da      	lsrs	r2, r3
 80006a2:	9201      	str	r2, [sp, #4]
 80006a4:	e785      	b.n	80005b2 <__udivmoddi4+0x6e>
 80006a6:	4642      	mov	r2, r8
 80006a8:	2320      	movs	r3, #32
 80006aa:	1a9b      	subs	r3, r3, r2
 80006ac:	002a      	movs	r2, r5
 80006ae:	4646      	mov	r6, r8
 80006b0:	409a      	lsls	r2, r3
 80006b2:	0023      	movs	r3, r4
 80006b4:	40f3      	lsrs	r3, r6
 80006b6:	4644      	mov	r4, r8
 80006b8:	4313      	orrs	r3, r2
 80006ba:	002a      	movs	r2, r5
 80006bc:	40e2      	lsrs	r2, r4
 80006be:	001c      	movs	r4, r3
 80006c0:	465b      	mov	r3, fp
 80006c2:	0015      	movs	r5, r2
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	dad4      	bge.n	8000672 <__udivmoddi4+0x12e>
 80006c8:	4642      	mov	r2, r8
 80006ca:	002f      	movs	r7, r5
 80006cc:	2320      	movs	r3, #32
 80006ce:	0026      	movs	r6, r4
 80006d0:	4097      	lsls	r7, r2
 80006d2:	1a9b      	subs	r3, r3, r2
 80006d4:	40de      	lsrs	r6, r3
 80006d6:	003b      	movs	r3, r7
 80006d8:	4333      	orrs	r3, r6
 80006da:	e7cd      	b.n	8000678 <__udivmoddi4+0x134>

080006dc <__aeabi_dadd>:
 80006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006de:	4657      	mov	r7, sl
 80006e0:	464e      	mov	r6, r9
 80006e2:	4645      	mov	r5, r8
 80006e4:	46de      	mov	lr, fp
 80006e6:	b5e0      	push	{r5, r6, r7, lr}
 80006e8:	b083      	sub	sp, #12
 80006ea:	9000      	str	r0, [sp, #0]
 80006ec:	9101      	str	r1, [sp, #4]
 80006ee:	030c      	lsls	r4, r1, #12
 80006f0:	004f      	lsls	r7, r1, #1
 80006f2:	0fce      	lsrs	r6, r1, #31
 80006f4:	0a61      	lsrs	r1, r4, #9
 80006f6:	9c00      	ldr	r4, [sp, #0]
 80006f8:	031d      	lsls	r5, r3, #12
 80006fa:	0f64      	lsrs	r4, r4, #29
 80006fc:	430c      	orrs	r4, r1
 80006fe:	9900      	ldr	r1, [sp, #0]
 8000700:	9200      	str	r2, [sp, #0]
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	00c8      	lsls	r0, r1, #3
 8000706:	0059      	lsls	r1, r3, #1
 8000708:	0d4b      	lsrs	r3, r1, #21
 800070a:	4699      	mov	r9, r3
 800070c:	9a00      	ldr	r2, [sp, #0]
 800070e:	9b01      	ldr	r3, [sp, #4]
 8000710:	0a6d      	lsrs	r5, r5, #9
 8000712:	0fd9      	lsrs	r1, r3, #31
 8000714:	0f53      	lsrs	r3, r2, #29
 8000716:	432b      	orrs	r3, r5
 8000718:	469a      	mov	sl, r3
 800071a:	9b00      	ldr	r3, [sp, #0]
 800071c:	0d7f      	lsrs	r7, r7, #21
 800071e:	00da      	lsls	r2, r3, #3
 8000720:	4694      	mov	ip, r2
 8000722:	464a      	mov	r2, r9
 8000724:	46b0      	mov	r8, r6
 8000726:	1aba      	subs	r2, r7, r2
 8000728:	428e      	cmp	r6, r1
 800072a:	d100      	bne.n	800072e <__aeabi_dadd+0x52>
 800072c:	e0b0      	b.n	8000890 <__aeabi_dadd+0x1b4>
 800072e:	2a00      	cmp	r2, #0
 8000730:	dc00      	bgt.n	8000734 <__aeabi_dadd+0x58>
 8000732:	e078      	b.n	8000826 <__aeabi_dadd+0x14a>
 8000734:	4649      	mov	r1, r9
 8000736:	2900      	cmp	r1, #0
 8000738:	d100      	bne.n	800073c <__aeabi_dadd+0x60>
 800073a:	e0e9      	b.n	8000910 <__aeabi_dadd+0x234>
 800073c:	49c9      	ldr	r1, [pc, #804]	@ (8000a64 <__aeabi_dadd+0x388>)
 800073e:	428f      	cmp	r7, r1
 8000740:	d100      	bne.n	8000744 <__aeabi_dadd+0x68>
 8000742:	e195      	b.n	8000a70 <__aeabi_dadd+0x394>
 8000744:	2501      	movs	r5, #1
 8000746:	2a38      	cmp	r2, #56	@ 0x38
 8000748:	dc16      	bgt.n	8000778 <__aeabi_dadd+0x9c>
 800074a:	2180      	movs	r1, #128	@ 0x80
 800074c:	4653      	mov	r3, sl
 800074e:	0409      	lsls	r1, r1, #16
 8000750:	430b      	orrs	r3, r1
 8000752:	469a      	mov	sl, r3
 8000754:	2a1f      	cmp	r2, #31
 8000756:	dd00      	ble.n	800075a <__aeabi_dadd+0x7e>
 8000758:	e1e7      	b.n	8000b2a <__aeabi_dadd+0x44e>
 800075a:	2120      	movs	r1, #32
 800075c:	4655      	mov	r5, sl
 800075e:	1a8b      	subs	r3, r1, r2
 8000760:	4661      	mov	r1, ip
 8000762:	409d      	lsls	r5, r3
 8000764:	40d1      	lsrs	r1, r2
 8000766:	430d      	orrs	r5, r1
 8000768:	4661      	mov	r1, ip
 800076a:	4099      	lsls	r1, r3
 800076c:	1e4b      	subs	r3, r1, #1
 800076e:	4199      	sbcs	r1, r3
 8000770:	4653      	mov	r3, sl
 8000772:	40d3      	lsrs	r3, r2
 8000774:	430d      	orrs	r5, r1
 8000776:	1ae4      	subs	r4, r4, r3
 8000778:	1b45      	subs	r5, r0, r5
 800077a:	42a8      	cmp	r0, r5
 800077c:	4180      	sbcs	r0, r0
 800077e:	4240      	negs	r0, r0
 8000780:	1a24      	subs	r4, r4, r0
 8000782:	0223      	lsls	r3, r4, #8
 8000784:	d400      	bmi.n	8000788 <__aeabi_dadd+0xac>
 8000786:	e10f      	b.n	80009a8 <__aeabi_dadd+0x2cc>
 8000788:	0264      	lsls	r4, r4, #9
 800078a:	0a64      	lsrs	r4, r4, #9
 800078c:	2c00      	cmp	r4, #0
 800078e:	d100      	bne.n	8000792 <__aeabi_dadd+0xb6>
 8000790:	e139      	b.n	8000a06 <__aeabi_dadd+0x32a>
 8000792:	0020      	movs	r0, r4
 8000794:	f001 fe5e 	bl	8002454 <__clzsi2>
 8000798:	0003      	movs	r3, r0
 800079a:	3b08      	subs	r3, #8
 800079c:	2120      	movs	r1, #32
 800079e:	0028      	movs	r0, r5
 80007a0:	1aca      	subs	r2, r1, r3
 80007a2:	40d0      	lsrs	r0, r2
 80007a4:	409c      	lsls	r4, r3
 80007a6:	0002      	movs	r2, r0
 80007a8:	409d      	lsls	r5, r3
 80007aa:	4322      	orrs	r2, r4
 80007ac:	429f      	cmp	r7, r3
 80007ae:	dd00      	ble.n	80007b2 <__aeabi_dadd+0xd6>
 80007b0:	e173      	b.n	8000a9a <__aeabi_dadd+0x3be>
 80007b2:	1bd8      	subs	r0, r3, r7
 80007b4:	3001      	adds	r0, #1
 80007b6:	1a09      	subs	r1, r1, r0
 80007b8:	002c      	movs	r4, r5
 80007ba:	408d      	lsls	r5, r1
 80007bc:	40c4      	lsrs	r4, r0
 80007be:	1e6b      	subs	r3, r5, #1
 80007c0:	419d      	sbcs	r5, r3
 80007c2:	0013      	movs	r3, r2
 80007c4:	40c2      	lsrs	r2, r0
 80007c6:	408b      	lsls	r3, r1
 80007c8:	4325      	orrs	r5, r4
 80007ca:	2700      	movs	r7, #0
 80007cc:	0014      	movs	r4, r2
 80007ce:	431d      	orrs	r5, r3
 80007d0:	076b      	lsls	r3, r5, #29
 80007d2:	d009      	beq.n	80007e8 <__aeabi_dadd+0x10c>
 80007d4:	230f      	movs	r3, #15
 80007d6:	402b      	ands	r3, r5
 80007d8:	2b04      	cmp	r3, #4
 80007da:	d005      	beq.n	80007e8 <__aeabi_dadd+0x10c>
 80007dc:	1d2b      	adds	r3, r5, #4
 80007de:	42ab      	cmp	r3, r5
 80007e0:	41ad      	sbcs	r5, r5
 80007e2:	426d      	negs	r5, r5
 80007e4:	1964      	adds	r4, r4, r5
 80007e6:	001d      	movs	r5, r3
 80007e8:	0223      	lsls	r3, r4, #8
 80007ea:	d400      	bmi.n	80007ee <__aeabi_dadd+0x112>
 80007ec:	e12d      	b.n	8000a4a <__aeabi_dadd+0x36e>
 80007ee:	4a9d      	ldr	r2, [pc, #628]	@ (8000a64 <__aeabi_dadd+0x388>)
 80007f0:	3701      	adds	r7, #1
 80007f2:	4297      	cmp	r7, r2
 80007f4:	d100      	bne.n	80007f8 <__aeabi_dadd+0x11c>
 80007f6:	e0d3      	b.n	80009a0 <__aeabi_dadd+0x2c4>
 80007f8:	4646      	mov	r6, r8
 80007fa:	499b      	ldr	r1, [pc, #620]	@ (8000a68 <__aeabi_dadd+0x38c>)
 80007fc:	08ed      	lsrs	r5, r5, #3
 80007fe:	4021      	ands	r1, r4
 8000800:	074a      	lsls	r2, r1, #29
 8000802:	432a      	orrs	r2, r5
 8000804:	057c      	lsls	r4, r7, #21
 8000806:	024d      	lsls	r5, r1, #9
 8000808:	0b2d      	lsrs	r5, r5, #12
 800080a:	0d64      	lsrs	r4, r4, #21
 800080c:	0524      	lsls	r4, r4, #20
 800080e:	432c      	orrs	r4, r5
 8000810:	07f6      	lsls	r6, r6, #31
 8000812:	4334      	orrs	r4, r6
 8000814:	0010      	movs	r0, r2
 8000816:	0021      	movs	r1, r4
 8000818:	b003      	add	sp, #12
 800081a:	bcf0      	pop	{r4, r5, r6, r7}
 800081c:	46bb      	mov	fp, r7
 800081e:	46b2      	mov	sl, r6
 8000820:	46a9      	mov	r9, r5
 8000822:	46a0      	mov	r8, r4
 8000824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000826:	2a00      	cmp	r2, #0
 8000828:	d100      	bne.n	800082c <__aeabi_dadd+0x150>
 800082a:	e084      	b.n	8000936 <__aeabi_dadd+0x25a>
 800082c:	464a      	mov	r2, r9
 800082e:	1bd2      	subs	r2, r2, r7
 8000830:	2f00      	cmp	r7, #0
 8000832:	d000      	beq.n	8000836 <__aeabi_dadd+0x15a>
 8000834:	e16d      	b.n	8000b12 <__aeabi_dadd+0x436>
 8000836:	0025      	movs	r5, r4
 8000838:	4305      	orrs	r5, r0
 800083a:	d100      	bne.n	800083e <__aeabi_dadd+0x162>
 800083c:	e127      	b.n	8000a8e <__aeabi_dadd+0x3b2>
 800083e:	1e56      	subs	r6, r2, #1
 8000840:	2a01      	cmp	r2, #1
 8000842:	d100      	bne.n	8000846 <__aeabi_dadd+0x16a>
 8000844:	e23b      	b.n	8000cbe <__aeabi_dadd+0x5e2>
 8000846:	4d87      	ldr	r5, [pc, #540]	@ (8000a64 <__aeabi_dadd+0x388>)
 8000848:	42aa      	cmp	r2, r5
 800084a:	d100      	bne.n	800084e <__aeabi_dadd+0x172>
 800084c:	e26a      	b.n	8000d24 <__aeabi_dadd+0x648>
 800084e:	2501      	movs	r5, #1
 8000850:	2e38      	cmp	r6, #56	@ 0x38
 8000852:	dc12      	bgt.n	800087a <__aeabi_dadd+0x19e>
 8000854:	0032      	movs	r2, r6
 8000856:	2a1f      	cmp	r2, #31
 8000858:	dd00      	ble.n	800085c <__aeabi_dadd+0x180>
 800085a:	e1f8      	b.n	8000c4e <__aeabi_dadd+0x572>
 800085c:	2620      	movs	r6, #32
 800085e:	0025      	movs	r5, r4
 8000860:	1ab6      	subs	r6, r6, r2
 8000862:	0007      	movs	r7, r0
 8000864:	4653      	mov	r3, sl
 8000866:	40b0      	lsls	r0, r6
 8000868:	40d4      	lsrs	r4, r2
 800086a:	40b5      	lsls	r5, r6
 800086c:	40d7      	lsrs	r7, r2
 800086e:	1e46      	subs	r6, r0, #1
 8000870:	41b0      	sbcs	r0, r6
 8000872:	1b1b      	subs	r3, r3, r4
 8000874:	469a      	mov	sl, r3
 8000876:	433d      	orrs	r5, r7
 8000878:	4305      	orrs	r5, r0
 800087a:	4662      	mov	r2, ip
 800087c:	1b55      	subs	r5, r2, r5
 800087e:	45ac      	cmp	ip, r5
 8000880:	4192      	sbcs	r2, r2
 8000882:	4653      	mov	r3, sl
 8000884:	4252      	negs	r2, r2
 8000886:	000e      	movs	r6, r1
 8000888:	464f      	mov	r7, r9
 800088a:	4688      	mov	r8, r1
 800088c:	1a9c      	subs	r4, r3, r2
 800088e:	e778      	b.n	8000782 <__aeabi_dadd+0xa6>
 8000890:	2a00      	cmp	r2, #0
 8000892:	dc00      	bgt.n	8000896 <__aeabi_dadd+0x1ba>
 8000894:	e08e      	b.n	80009b4 <__aeabi_dadd+0x2d8>
 8000896:	4649      	mov	r1, r9
 8000898:	2900      	cmp	r1, #0
 800089a:	d175      	bne.n	8000988 <__aeabi_dadd+0x2ac>
 800089c:	4661      	mov	r1, ip
 800089e:	4653      	mov	r3, sl
 80008a0:	4319      	orrs	r1, r3
 80008a2:	d100      	bne.n	80008a6 <__aeabi_dadd+0x1ca>
 80008a4:	e0f6      	b.n	8000a94 <__aeabi_dadd+0x3b8>
 80008a6:	1e51      	subs	r1, r2, #1
 80008a8:	2a01      	cmp	r2, #1
 80008aa:	d100      	bne.n	80008ae <__aeabi_dadd+0x1d2>
 80008ac:	e191      	b.n	8000bd2 <__aeabi_dadd+0x4f6>
 80008ae:	4d6d      	ldr	r5, [pc, #436]	@ (8000a64 <__aeabi_dadd+0x388>)
 80008b0:	42aa      	cmp	r2, r5
 80008b2:	d100      	bne.n	80008b6 <__aeabi_dadd+0x1da>
 80008b4:	e0dc      	b.n	8000a70 <__aeabi_dadd+0x394>
 80008b6:	2501      	movs	r5, #1
 80008b8:	2938      	cmp	r1, #56	@ 0x38
 80008ba:	dc14      	bgt.n	80008e6 <__aeabi_dadd+0x20a>
 80008bc:	000a      	movs	r2, r1
 80008be:	2a1f      	cmp	r2, #31
 80008c0:	dd00      	ble.n	80008c4 <__aeabi_dadd+0x1e8>
 80008c2:	e1a2      	b.n	8000c0a <__aeabi_dadd+0x52e>
 80008c4:	2120      	movs	r1, #32
 80008c6:	4653      	mov	r3, sl
 80008c8:	1a89      	subs	r1, r1, r2
 80008ca:	408b      	lsls	r3, r1
 80008cc:	001d      	movs	r5, r3
 80008ce:	4663      	mov	r3, ip
 80008d0:	40d3      	lsrs	r3, r2
 80008d2:	431d      	orrs	r5, r3
 80008d4:	4663      	mov	r3, ip
 80008d6:	408b      	lsls	r3, r1
 80008d8:	0019      	movs	r1, r3
 80008da:	1e4b      	subs	r3, r1, #1
 80008dc:	4199      	sbcs	r1, r3
 80008de:	4653      	mov	r3, sl
 80008e0:	40d3      	lsrs	r3, r2
 80008e2:	430d      	orrs	r5, r1
 80008e4:	18e4      	adds	r4, r4, r3
 80008e6:	182d      	adds	r5, r5, r0
 80008e8:	4285      	cmp	r5, r0
 80008ea:	4180      	sbcs	r0, r0
 80008ec:	4240      	negs	r0, r0
 80008ee:	1824      	adds	r4, r4, r0
 80008f0:	0223      	lsls	r3, r4, #8
 80008f2:	d559      	bpl.n	80009a8 <__aeabi_dadd+0x2cc>
 80008f4:	4b5b      	ldr	r3, [pc, #364]	@ (8000a64 <__aeabi_dadd+0x388>)
 80008f6:	3701      	adds	r7, #1
 80008f8:	429f      	cmp	r7, r3
 80008fa:	d051      	beq.n	80009a0 <__aeabi_dadd+0x2c4>
 80008fc:	2101      	movs	r1, #1
 80008fe:	4b5a      	ldr	r3, [pc, #360]	@ (8000a68 <__aeabi_dadd+0x38c>)
 8000900:	086a      	lsrs	r2, r5, #1
 8000902:	401c      	ands	r4, r3
 8000904:	4029      	ands	r1, r5
 8000906:	430a      	orrs	r2, r1
 8000908:	07e5      	lsls	r5, r4, #31
 800090a:	4315      	orrs	r5, r2
 800090c:	0864      	lsrs	r4, r4, #1
 800090e:	e75f      	b.n	80007d0 <__aeabi_dadd+0xf4>
 8000910:	4661      	mov	r1, ip
 8000912:	4653      	mov	r3, sl
 8000914:	4319      	orrs	r1, r3
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0x23e>
 8000918:	e0bc      	b.n	8000a94 <__aeabi_dadd+0x3b8>
 800091a:	1e51      	subs	r1, r2, #1
 800091c:	2a01      	cmp	r2, #1
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x246>
 8000920:	e164      	b.n	8000bec <__aeabi_dadd+0x510>
 8000922:	4d50      	ldr	r5, [pc, #320]	@ (8000a64 <__aeabi_dadd+0x388>)
 8000924:	42aa      	cmp	r2, r5
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x24e>
 8000928:	e16a      	b.n	8000c00 <__aeabi_dadd+0x524>
 800092a:	2501      	movs	r5, #1
 800092c:	2938      	cmp	r1, #56	@ 0x38
 800092e:	dd00      	ble.n	8000932 <__aeabi_dadd+0x256>
 8000930:	e722      	b.n	8000778 <__aeabi_dadd+0x9c>
 8000932:	000a      	movs	r2, r1
 8000934:	e70e      	b.n	8000754 <__aeabi_dadd+0x78>
 8000936:	4a4d      	ldr	r2, [pc, #308]	@ (8000a6c <__aeabi_dadd+0x390>)
 8000938:	1c7d      	adds	r5, r7, #1
 800093a:	4215      	tst	r5, r2
 800093c:	d000      	beq.n	8000940 <__aeabi_dadd+0x264>
 800093e:	e0d0      	b.n	8000ae2 <__aeabi_dadd+0x406>
 8000940:	0025      	movs	r5, r4
 8000942:	4662      	mov	r2, ip
 8000944:	4653      	mov	r3, sl
 8000946:	4305      	orrs	r5, r0
 8000948:	431a      	orrs	r2, r3
 800094a:	2f00      	cmp	r7, #0
 800094c:	d000      	beq.n	8000950 <__aeabi_dadd+0x274>
 800094e:	e137      	b.n	8000bc0 <__aeabi_dadd+0x4e4>
 8000950:	2d00      	cmp	r5, #0
 8000952:	d100      	bne.n	8000956 <__aeabi_dadd+0x27a>
 8000954:	e1a8      	b.n	8000ca8 <__aeabi_dadd+0x5cc>
 8000956:	2a00      	cmp	r2, #0
 8000958:	d100      	bne.n	800095c <__aeabi_dadd+0x280>
 800095a:	e16a      	b.n	8000c32 <__aeabi_dadd+0x556>
 800095c:	4663      	mov	r3, ip
 800095e:	1ac5      	subs	r5, r0, r3
 8000960:	4653      	mov	r3, sl
 8000962:	1ae2      	subs	r2, r4, r3
 8000964:	42a8      	cmp	r0, r5
 8000966:	419b      	sbcs	r3, r3
 8000968:	425b      	negs	r3, r3
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	021a      	lsls	r2, r3, #8
 800096e:	d400      	bmi.n	8000972 <__aeabi_dadd+0x296>
 8000970:	e203      	b.n	8000d7a <__aeabi_dadd+0x69e>
 8000972:	4663      	mov	r3, ip
 8000974:	1a1d      	subs	r5, r3, r0
 8000976:	45ac      	cmp	ip, r5
 8000978:	4192      	sbcs	r2, r2
 800097a:	4653      	mov	r3, sl
 800097c:	4252      	negs	r2, r2
 800097e:	1b1c      	subs	r4, r3, r4
 8000980:	000e      	movs	r6, r1
 8000982:	4688      	mov	r8, r1
 8000984:	1aa4      	subs	r4, r4, r2
 8000986:	e723      	b.n	80007d0 <__aeabi_dadd+0xf4>
 8000988:	4936      	ldr	r1, [pc, #216]	@ (8000a64 <__aeabi_dadd+0x388>)
 800098a:	428f      	cmp	r7, r1
 800098c:	d070      	beq.n	8000a70 <__aeabi_dadd+0x394>
 800098e:	2501      	movs	r5, #1
 8000990:	2a38      	cmp	r2, #56	@ 0x38
 8000992:	dca8      	bgt.n	80008e6 <__aeabi_dadd+0x20a>
 8000994:	2180      	movs	r1, #128	@ 0x80
 8000996:	4653      	mov	r3, sl
 8000998:	0409      	lsls	r1, r1, #16
 800099a:	430b      	orrs	r3, r1
 800099c:	469a      	mov	sl, r3
 800099e:	e78e      	b.n	80008be <__aeabi_dadd+0x1e2>
 80009a0:	003c      	movs	r4, r7
 80009a2:	2500      	movs	r5, #0
 80009a4:	2200      	movs	r2, #0
 80009a6:	e731      	b.n	800080c <__aeabi_dadd+0x130>
 80009a8:	2307      	movs	r3, #7
 80009aa:	402b      	ands	r3, r5
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d000      	beq.n	80009b2 <__aeabi_dadd+0x2d6>
 80009b0:	e710      	b.n	80007d4 <__aeabi_dadd+0xf8>
 80009b2:	e093      	b.n	8000adc <__aeabi_dadd+0x400>
 80009b4:	2a00      	cmp	r2, #0
 80009b6:	d074      	beq.n	8000aa2 <__aeabi_dadd+0x3c6>
 80009b8:	464a      	mov	r2, r9
 80009ba:	1bd2      	subs	r2, r2, r7
 80009bc:	2f00      	cmp	r7, #0
 80009be:	d100      	bne.n	80009c2 <__aeabi_dadd+0x2e6>
 80009c0:	e0c7      	b.n	8000b52 <__aeabi_dadd+0x476>
 80009c2:	4928      	ldr	r1, [pc, #160]	@ (8000a64 <__aeabi_dadd+0x388>)
 80009c4:	4589      	cmp	r9, r1
 80009c6:	d100      	bne.n	80009ca <__aeabi_dadd+0x2ee>
 80009c8:	e185      	b.n	8000cd6 <__aeabi_dadd+0x5fa>
 80009ca:	2501      	movs	r5, #1
 80009cc:	2a38      	cmp	r2, #56	@ 0x38
 80009ce:	dc12      	bgt.n	80009f6 <__aeabi_dadd+0x31a>
 80009d0:	2180      	movs	r1, #128	@ 0x80
 80009d2:	0409      	lsls	r1, r1, #16
 80009d4:	430c      	orrs	r4, r1
 80009d6:	2a1f      	cmp	r2, #31
 80009d8:	dd00      	ble.n	80009dc <__aeabi_dadd+0x300>
 80009da:	e1ab      	b.n	8000d34 <__aeabi_dadd+0x658>
 80009dc:	2120      	movs	r1, #32
 80009de:	0025      	movs	r5, r4
 80009e0:	1a89      	subs	r1, r1, r2
 80009e2:	0007      	movs	r7, r0
 80009e4:	4088      	lsls	r0, r1
 80009e6:	408d      	lsls	r5, r1
 80009e8:	40d7      	lsrs	r7, r2
 80009ea:	1e41      	subs	r1, r0, #1
 80009ec:	4188      	sbcs	r0, r1
 80009ee:	40d4      	lsrs	r4, r2
 80009f0:	433d      	orrs	r5, r7
 80009f2:	4305      	orrs	r5, r0
 80009f4:	44a2      	add	sl, r4
 80009f6:	4465      	add	r5, ip
 80009f8:	4565      	cmp	r5, ip
 80009fa:	4192      	sbcs	r2, r2
 80009fc:	4252      	negs	r2, r2
 80009fe:	4452      	add	r2, sl
 8000a00:	0014      	movs	r4, r2
 8000a02:	464f      	mov	r7, r9
 8000a04:	e774      	b.n	80008f0 <__aeabi_dadd+0x214>
 8000a06:	0028      	movs	r0, r5
 8000a08:	f001 fd24 	bl	8002454 <__clzsi2>
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	3318      	adds	r3, #24
 8000a10:	2b1f      	cmp	r3, #31
 8000a12:	dc00      	bgt.n	8000a16 <__aeabi_dadd+0x33a>
 8000a14:	e6c2      	b.n	800079c <__aeabi_dadd+0xc0>
 8000a16:	002a      	movs	r2, r5
 8000a18:	3808      	subs	r0, #8
 8000a1a:	4082      	lsls	r2, r0
 8000a1c:	429f      	cmp	r7, r3
 8000a1e:	dd00      	ble.n	8000a22 <__aeabi_dadd+0x346>
 8000a20:	e0a9      	b.n	8000b76 <__aeabi_dadd+0x49a>
 8000a22:	1bdb      	subs	r3, r3, r7
 8000a24:	1c58      	adds	r0, r3, #1
 8000a26:	281f      	cmp	r0, #31
 8000a28:	dc00      	bgt.n	8000a2c <__aeabi_dadd+0x350>
 8000a2a:	e1ac      	b.n	8000d86 <__aeabi_dadd+0x6aa>
 8000a2c:	0015      	movs	r5, r2
 8000a2e:	3b1f      	subs	r3, #31
 8000a30:	40dd      	lsrs	r5, r3
 8000a32:	2820      	cmp	r0, #32
 8000a34:	d005      	beq.n	8000a42 <__aeabi_dadd+0x366>
 8000a36:	2340      	movs	r3, #64	@ 0x40
 8000a38:	1a1b      	subs	r3, r3, r0
 8000a3a:	409a      	lsls	r2, r3
 8000a3c:	1e53      	subs	r3, r2, #1
 8000a3e:	419a      	sbcs	r2, r3
 8000a40:	4315      	orrs	r5, r2
 8000a42:	2307      	movs	r3, #7
 8000a44:	2700      	movs	r7, #0
 8000a46:	402b      	ands	r3, r5
 8000a48:	e7b0      	b.n	80009ac <__aeabi_dadd+0x2d0>
 8000a4a:	08ed      	lsrs	r5, r5, #3
 8000a4c:	4b05      	ldr	r3, [pc, #20]	@ (8000a64 <__aeabi_dadd+0x388>)
 8000a4e:	0762      	lsls	r2, r4, #29
 8000a50:	432a      	orrs	r2, r5
 8000a52:	08e4      	lsrs	r4, r4, #3
 8000a54:	429f      	cmp	r7, r3
 8000a56:	d00f      	beq.n	8000a78 <__aeabi_dadd+0x39c>
 8000a58:	0324      	lsls	r4, r4, #12
 8000a5a:	0b25      	lsrs	r5, r4, #12
 8000a5c:	057c      	lsls	r4, r7, #21
 8000a5e:	0d64      	lsrs	r4, r4, #21
 8000a60:	e6d4      	b.n	800080c <__aeabi_dadd+0x130>
 8000a62:	46c0      	nop			@ (mov r8, r8)
 8000a64:	000007ff 	.word	0x000007ff
 8000a68:	ff7fffff 	.word	0xff7fffff
 8000a6c:	000007fe 	.word	0x000007fe
 8000a70:	08c0      	lsrs	r0, r0, #3
 8000a72:	0762      	lsls	r2, r4, #29
 8000a74:	4302      	orrs	r2, r0
 8000a76:	08e4      	lsrs	r4, r4, #3
 8000a78:	0013      	movs	r3, r2
 8000a7a:	4323      	orrs	r3, r4
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_dadd+0x3a4>
 8000a7e:	e186      	b.n	8000d8e <__aeabi_dadd+0x6b2>
 8000a80:	2580      	movs	r5, #128	@ 0x80
 8000a82:	032d      	lsls	r5, r5, #12
 8000a84:	4325      	orrs	r5, r4
 8000a86:	032d      	lsls	r5, r5, #12
 8000a88:	4cc3      	ldr	r4, [pc, #780]	@ (8000d98 <__aeabi_dadd+0x6bc>)
 8000a8a:	0b2d      	lsrs	r5, r5, #12
 8000a8c:	e6be      	b.n	800080c <__aeabi_dadd+0x130>
 8000a8e:	4660      	mov	r0, ip
 8000a90:	4654      	mov	r4, sl
 8000a92:	000e      	movs	r6, r1
 8000a94:	0017      	movs	r7, r2
 8000a96:	08c5      	lsrs	r5, r0, #3
 8000a98:	e7d8      	b.n	8000a4c <__aeabi_dadd+0x370>
 8000a9a:	4cc0      	ldr	r4, [pc, #768]	@ (8000d9c <__aeabi_dadd+0x6c0>)
 8000a9c:	1aff      	subs	r7, r7, r3
 8000a9e:	4014      	ands	r4, r2
 8000aa0:	e696      	b.n	80007d0 <__aeabi_dadd+0xf4>
 8000aa2:	4abf      	ldr	r2, [pc, #764]	@ (8000da0 <__aeabi_dadd+0x6c4>)
 8000aa4:	1c79      	adds	r1, r7, #1
 8000aa6:	4211      	tst	r1, r2
 8000aa8:	d16b      	bne.n	8000b82 <__aeabi_dadd+0x4a6>
 8000aaa:	0022      	movs	r2, r4
 8000aac:	4302      	orrs	r2, r0
 8000aae:	2f00      	cmp	r7, #0
 8000ab0:	d000      	beq.n	8000ab4 <__aeabi_dadd+0x3d8>
 8000ab2:	e0db      	b.n	8000c6c <__aeabi_dadd+0x590>
 8000ab4:	2a00      	cmp	r2, #0
 8000ab6:	d100      	bne.n	8000aba <__aeabi_dadd+0x3de>
 8000ab8:	e12d      	b.n	8000d16 <__aeabi_dadd+0x63a>
 8000aba:	4662      	mov	r2, ip
 8000abc:	4653      	mov	r3, sl
 8000abe:	431a      	orrs	r2, r3
 8000ac0:	d100      	bne.n	8000ac4 <__aeabi_dadd+0x3e8>
 8000ac2:	e0b6      	b.n	8000c32 <__aeabi_dadd+0x556>
 8000ac4:	4663      	mov	r3, ip
 8000ac6:	18c5      	adds	r5, r0, r3
 8000ac8:	4285      	cmp	r5, r0
 8000aca:	4180      	sbcs	r0, r0
 8000acc:	4454      	add	r4, sl
 8000ace:	4240      	negs	r0, r0
 8000ad0:	1824      	adds	r4, r4, r0
 8000ad2:	0223      	lsls	r3, r4, #8
 8000ad4:	d502      	bpl.n	8000adc <__aeabi_dadd+0x400>
 8000ad6:	000f      	movs	r7, r1
 8000ad8:	4bb0      	ldr	r3, [pc, #704]	@ (8000d9c <__aeabi_dadd+0x6c0>)
 8000ada:	401c      	ands	r4, r3
 8000adc:	003a      	movs	r2, r7
 8000ade:	0028      	movs	r0, r5
 8000ae0:	e7d8      	b.n	8000a94 <__aeabi_dadd+0x3b8>
 8000ae2:	4662      	mov	r2, ip
 8000ae4:	1a85      	subs	r5, r0, r2
 8000ae6:	42a8      	cmp	r0, r5
 8000ae8:	4192      	sbcs	r2, r2
 8000aea:	4653      	mov	r3, sl
 8000aec:	4252      	negs	r2, r2
 8000aee:	4691      	mov	r9, r2
 8000af0:	1ae3      	subs	r3, r4, r3
 8000af2:	001a      	movs	r2, r3
 8000af4:	464b      	mov	r3, r9
 8000af6:	1ad2      	subs	r2, r2, r3
 8000af8:	0013      	movs	r3, r2
 8000afa:	4691      	mov	r9, r2
 8000afc:	021a      	lsls	r2, r3, #8
 8000afe:	d454      	bmi.n	8000baa <__aeabi_dadd+0x4ce>
 8000b00:	464a      	mov	r2, r9
 8000b02:	464c      	mov	r4, r9
 8000b04:	432a      	orrs	r2, r5
 8000b06:	d000      	beq.n	8000b0a <__aeabi_dadd+0x42e>
 8000b08:	e640      	b.n	800078c <__aeabi_dadd+0xb0>
 8000b0a:	2600      	movs	r6, #0
 8000b0c:	2400      	movs	r4, #0
 8000b0e:	2500      	movs	r5, #0
 8000b10:	e67c      	b.n	800080c <__aeabi_dadd+0x130>
 8000b12:	4da1      	ldr	r5, [pc, #644]	@ (8000d98 <__aeabi_dadd+0x6bc>)
 8000b14:	45a9      	cmp	r9, r5
 8000b16:	d100      	bne.n	8000b1a <__aeabi_dadd+0x43e>
 8000b18:	e090      	b.n	8000c3c <__aeabi_dadd+0x560>
 8000b1a:	2501      	movs	r5, #1
 8000b1c:	2a38      	cmp	r2, #56	@ 0x38
 8000b1e:	dd00      	ble.n	8000b22 <__aeabi_dadd+0x446>
 8000b20:	e6ab      	b.n	800087a <__aeabi_dadd+0x19e>
 8000b22:	2580      	movs	r5, #128	@ 0x80
 8000b24:	042d      	lsls	r5, r5, #16
 8000b26:	432c      	orrs	r4, r5
 8000b28:	e695      	b.n	8000856 <__aeabi_dadd+0x17a>
 8000b2a:	0011      	movs	r1, r2
 8000b2c:	4655      	mov	r5, sl
 8000b2e:	3920      	subs	r1, #32
 8000b30:	40cd      	lsrs	r5, r1
 8000b32:	46a9      	mov	r9, r5
 8000b34:	2a20      	cmp	r2, #32
 8000b36:	d006      	beq.n	8000b46 <__aeabi_dadd+0x46a>
 8000b38:	2140      	movs	r1, #64	@ 0x40
 8000b3a:	4653      	mov	r3, sl
 8000b3c:	1a8a      	subs	r2, r1, r2
 8000b3e:	4093      	lsls	r3, r2
 8000b40:	4662      	mov	r2, ip
 8000b42:	431a      	orrs	r2, r3
 8000b44:	4694      	mov	ip, r2
 8000b46:	4665      	mov	r5, ip
 8000b48:	1e6b      	subs	r3, r5, #1
 8000b4a:	419d      	sbcs	r5, r3
 8000b4c:	464b      	mov	r3, r9
 8000b4e:	431d      	orrs	r5, r3
 8000b50:	e612      	b.n	8000778 <__aeabi_dadd+0x9c>
 8000b52:	0021      	movs	r1, r4
 8000b54:	4301      	orrs	r1, r0
 8000b56:	d100      	bne.n	8000b5a <__aeabi_dadd+0x47e>
 8000b58:	e0c4      	b.n	8000ce4 <__aeabi_dadd+0x608>
 8000b5a:	1e51      	subs	r1, r2, #1
 8000b5c:	2a01      	cmp	r2, #1
 8000b5e:	d100      	bne.n	8000b62 <__aeabi_dadd+0x486>
 8000b60:	e0fb      	b.n	8000d5a <__aeabi_dadd+0x67e>
 8000b62:	4d8d      	ldr	r5, [pc, #564]	@ (8000d98 <__aeabi_dadd+0x6bc>)
 8000b64:	42aa      	cmp	r2, r5
 8000b66:	d100      	bne.n	8000b6a <__aeabi_dadd+0x48e>
 8000b68:	e0b5      	b.n	8000cd6 <__aeabi_dadd+0x5fa>
 8000b6a:	2501      	movs	r5, #1
 8000b6c:	2938      	cmp	r1, #56	@ 0x38
 8000b6e:	dd00      	ble.n	8000b72 <__aeabi_dadd+0x496>
 8000b70:	e741      	b.n	80009f6 <__aeabi_dadd+0x31a>
 8000b72:	000a      	movs	r2, r1
 8000b74:	e72f      	b.n	80009d6 <__aeabi_dadd+0x2fa>
 8000b76:	4c89      	ldr	r4, [pc, #548]	@ (8000d9c <__aeabi_dadd+0x6c0>)
 8000b78:	1aff      	subs	r7, r7, r3
 8000b7a:	4014      	ands	r4, r2
 8000b7c:	0762      	lsls	r2, r4, #29
 8000b7e:	08e4      	lsrs	r4, r4, #3
 8000b80:	e76a      	b.n	8000a58 <__aeabi_dadd+0x37c>
 8000b82:	4a85      	ldr	r2, [pc, #532]	@ (8000d98 <__aeabi_dadd+0x6bc>)
 8000b84:	4291      	cmp	r1, r2
 8000b86:	d100      	bne.n	8000b8a <__aeabi_dadd+0x4ae>
 8000b88:	e0e3      	b.n	8000d52 <__aeabi_dadd+0x676>
 8000b8a:	4663      	mov	r3, ip
 8000b8c:	18c2      	adds	r2, r0, r3
 8000b8e:	4282      	cmp	r2, r0
 8000b90:	4180      	sbcs	r0, r0
 8000b92:	0023      	movs	r3, r4
 8000b94:	4240      	negs	r0, r0
 8000b96:	4453      	add	r3, sl
 8000b98:	181b      	adds	r3, r3, r0
 8000b9a:	07dd      	lsls	r5, r3, #31
 8000b9c:	085c      	lsrs	r4, r3, #1
 8000b9e:	2307      	movs	r3, #7
 8000ba0:	0852      	lsrs	r2, r2, #1
 8000ba2:	4315      	orrs	r5, r2
 8000ba4:	000f      	movs	r7, r1
 8000ba6:	402b      	ands	r3, r5
 8000ba8:	e700      	b.n	80009ac <__aeabi_dadd+0x2d0>
 8000baa:	4663      	mov	r3, ip
 8000bac:	1a1d      	subs	r5, r3, r0
 8000bae:	45ac      	cmp	ip, r5
 8000bb0:	4192      	sbcs	r2, r2
 8000bb2:	4653      	mov	r3, sl
 8000bb4:	4252      	negs	r2, r2
 8000bb6:	1b1c      	subs	r4, r3, r4
 8000bb8:	000e      	movs	r6, r1
 8000bba:	4688      	mov	r8, r1
 8000bbc:	1aa4      	subs	r4, r4, r2
 8000bbe:	e5e5      	b.n	800078c <__aeabi_dadd+0xb0>
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d000      	beq.n	8000bc6 <__aeabi_dadd+0x4ea>
 8000bc4:	e091      	b.n	8000cea <__aeabi_dadd+0x60e>
 8000bc6:	2a00      	cmp	r2, #0
 8000bc8:	d138      	bne.n	8000c3c <__aeabi_dadd+0x560>
 8000bca:	2480      	movs	r4, #128	@ 0x80
 8000bcc:	2600      	movs	r6, #0
 8000bce:	0324      	lsls	r4, r4, #12
 8000bd0:	e756      	b.n	8000a80 <__aeabi_dadd+0x3a4>
 8000bd2:	4663      	mov	r3, ip
 8000bd4:	18c5      	adds	r5, r0, r3
 8000bd6:	4285      	cmp	r5, r0
 8000bd8:	4180      	sbcs	r0, r0
 8000bda:	4454      	add	r4, sl
 8000bdc:	4240      	negs	r0, r0
 8000bde:	1824      	adds	r4, r4, r0
 8000be0:	2701      	movs	r7, #1
 8000be2:	0223      	lsls	r3, r4, #8
 8000be4:	d400      	bmi.n	8000be8 <__aeabi_dadd+0x50c>
 8000be6:	e6df      	b.n	80009a8 <__aeabi_dadd+0x2cc>
 8000be8:	2702      	movs	r7, #2
 8000bea:	e687      	b.n	80008fc <__aeabi_dadd+0x220>
 8000bec:	4663      	mov	r3, ip
 8000bee:	1ac5      	subs	r5, r0, r3
 8000bf0:	42a8      	cmp	r0, r5
 8000bf2:	4180      	sbcs	r0, r0
 8000bf4:	4653      	mov	r3, sl
 8000bf6:	4240      	negs	r0, r0
 8000bf8:	1ae4      	subs	r4, r4, r3
 8000bfa:	2701      	movs	r7, #1
 8000bfc:	1a24      	subs	r4, r4, r0
 8000bfe:	e5c0      	b.n	8000782 <__aeabi_dadd+0xa6>
 8000c00:	0762      	lsls	r2, r4, #29
 8000c02:	08c0      	lsrs	r0, r0, #3
 8000c04:	4302      	orrs	r2, r0
 8000c06:	08e4      	lsrs	r4, r4, #3
 8000c08:	e736      	b.n	8000a78 <__aeabi_dadd+0x39c>
 8000c0a:	0011      	movs	r1, r2
 8000c0c:	4653      	mov	r3, sl
 8000c0e:	3920      	subs	r1, #32
 8000c10:	40cb      	lsrs	r3, r1
 8000c12:	4699      	mov	r9, r3
 8000c14:	2a20      	cmp	r2, #32
 8000c16:	d006      	beq.n	8000c26 <__aeabi_dadd+0x54a>
 8000c18:	2140      	movs	r1, #64	@ 0x40
 8000c1a:	4653      	mov	r3, sl
 8000c1c:	1a8a      	subs	r2, r1, r2
 8000c1e:	4093      	lsls	r3, r2
 8000c20:	4662      	mov	r2, ip
 8000c22:	431a      	orrs	r2, r3
 8000c24:	4694      	mov	ip, r2
 8000c26:	4665      	mov	r5, ip
 8000c28:	1e6b      	subs	r3, r5, #1
 8000c2a:	419d      	sbcs	r5, r3
 8000c2c:	464b      	mov	r3, r9
 8000c2e:	431d      	orrs	r5, r3
 8000c30:	e659      	b.n	80008e6 <__aeabi_dadd+0x20a>
 8000c32:	0762      	lsls	r2, r4, #29
 8000c34:	08c0      	lsrs	r0, r0, #3
 8000c36:	4302      	orrs	r2, r0
 8000c38:	08e4      	lsrs	r4, r4, #3
 8000c3a:	e70d      	b.n	8000a58 <__aeabi_dadd+0x37c>
 8000c3c:	4653      	mov	r3, sl
 8000c3e:	075a      	lsls	r2, r3, #29
 8000c40:	4663      	mov	r3, ip
 8000c42:	08d8      	lsrs	r0, r3, #3
 8000c44:	4653      	mov	r3, sl
 8000c46:	000e      	movs	r6, r1
 8000c48:	4302      	orrs	r2, r0
 8000c4a:	08dc      	lsrs	r4, r3, #3
 8000c4c:	e714      	b.n	8000a78 <__aeabi_dadd+0x39c>
 8000c4e:	0015      	movs	r5, r2
 8000c50:	0026      	movs	r6, r4
 8000c52:	3d20      	subs	r5, #32
 8000c54:	40ee      	lsrs	r6, r5
 8000c56:	2a20      	cmp	r2, #32
 8000c58:	d003      	beq.n	8000c62 <__aeabi_dadd+0x586>
 8000c5a:	2540      	movs	r5, #64	@ 0x40
 8000c5c:	1aaa      	subs	r2, r5, r2
 8000c5e:	4094      	lsls	r4, r2
 8000c60:	4320      	orrs	r0, r4
 8000c62:	1e42      	subs	r2, r0, #1
 8000c64:	4190      	sbcs	r0, r2
 8000c66:	0005      	movs	r5, r0
 8000c68:	4335      	orrs	r5, r6
 8000c6a:	e606      	b.n	800087a <__aeabi_dadd+0x19e>
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	d07c      	beq.n	8000d6a <__aeabi_dadd+0x68e>
 8000c70:	4662      	mov	r2, ip
 8000c72:	4653      	mov	r3, sl
 8000c74:	08c0      	lsrs	r0, r0, #3
 8000c76:	431a      	orrs	r2, r3
 8000c78:	d100      	bne.n	8000c7c <__aeabi_dadd+0x5a0>
 8000c7a:	e6fa      	b.n	8000a72 <__aeabi_dadd+0x396>
 8000c7c:	0762      	lsls	r2, r4, #29
 8000c7e:	4310      	orrs	r0, r2
 8000c80:	2280      	movs	r2, #128	@ 0x80
 8000c82:	08e4      	lsrs	r4, r4, #3
 8000c84:	0312      	lsls	r2, r2, #12
 8000c86:	4214      	tst	r4, r2
 8000c88:	d008      	beq.n	8000c9c <__aeabi_dadd+0x5c0>
 8000c8a:	08d9      	lsrs	r1, r3, #3
 8000c8c:	4211      	tst	r1, r2
 8000c8e:	d105      	bne.n	8000c9c <__aeabi_dadd+0x5c0>
 8000c90:	4663      	mov	r3, ip
 8000c92:	08d8      	lsrs	r0, r3, #3
 8000c94:	4653      	mov	r3, sl
 8000c96:	000c      	movs	r4, r1
 8000c98:	075b      	lsls	r3, r3, #29
 8000c9a:	4318      	orrs	r0, r3
 8000c9c:	0f42      	lsrs	r2, r0, #29
 8000c9e:	00c0      	lsls	r0, r0, #3
 8000ca0:	08c0      	lsrs	r0, r0, #3
 8000ca2:	0752      	lsls	r2, r2, #29
 8000ca4:	4302      	orrs	r2, r0
 8000ca6:	e6e7      	b.n	8000a78 <__aeabi_dadd+0x39c>
 8000ca8:	2a00      	cmp	r2, #0
 8000caa:	d100      	bne.n	8000cae <__aeabi_dadd+0x5d2>
 8000cac:	e72d      	b.n	8000b0a <__aeabi_dadd+0x42e>
 8000cae:	4663      	mov	r3, ip
 8000cb0:	08d8      	lsrs	r0, r3, #3
 8000cb2:	4653      	mov	r3, sl
 8000cb4:	075a      	lsls	r2, r3, #29
 8000cb6:	000e      	movs	r6, r1
 8000cb8:	4302      	orrs	r2, r0
 8000cba:	08dc      	lsrs	r4, r3, #3
 8000cbc:	e6cc      	b.n	8000a58 <__aeabi_dadd+0x37c>
 8000cbe:	4663      	mov	r3, ip
 8000cc0:	1a1d      	subs	r5, r3, r0
 8000cc2:	45ac      	cmp	ip, r5
 8000cc4:	4192      	sbcs	r2, r2
 8000cc6:	4653      	mov	r3, sl
 8000cc8:	4252      	negs	r2, r2
 8000cca:	1b1c      	subs	r4, r3, r4
 8000ccc:	000e      	movs	r6, r1
 8000cce:	4688      	mov	r8, r1
 8000cd0:	1aa4      	subs	r4, r4, r2
 8000cd2:	3701      	adds	r7, #1
 8000cd4:	e555      	b.n	8000782 <__aeabi_dadd+0xa6>
 8000cd6:	4663      	mov	r3, ip
 8000cd8:	08d9      	lsrs	r1, r3, #3
 8000cda:	4653      	mov	r3, sl
 8000cdc:	075a      	lsls	r2, r3, #29
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	08dc      	lsrs	r4, r3, #3
 8000ce2:	e6c9      	b.n	8000a78 <__aeabi_dadd+0x39c>
 8000ce4:	4660      	mov	r0, ip
 8000ce6:	4654      	mov	r4, sl
 8000ce8:	e6d4      	b.n	8000a94 <__aeabi_dadd+0x3b8>
 8000cea:	08c0      	lsrs	r0, r0, #3
 8000cec:	2a00      	cmp	r2, #0
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_dadd+0x616>
 8000cf0:	e6bf      	b.n	8000a72 <__aeabi_dadd+0x396>
 8000cf2:	0762      	lsls	r2, r4, #29
 8000cf4:	4310      	orrs	r0, r2
 8000cf6:	2280      	movs	r2, #128	@ 0x80
 8000cf8:	08e4      	lsrs	r4, r4, #3
 8000cfa:	0312      	lsls	r2, r2, #12
 8000cfc:	4214      	tst	r4, r2
 8000cfe:	d0cd      	beq.n	8000c9c <__aeabi_dadd+0x5c0>
 8000d00:	08dd      	lsrs	r5, r3, #3
 8000d02:	4215      	tst	r5, r2
 8000d04:	d1ca      	bne.n	8000c9c <__aeabi_dadd+0x5c0>
 8000d06:	4663      	mov	r3, ip
 8000d08:	08d8      	lsrs	r0, r3, #3
 8000d0a:	4653      	mov	r3, sl
 8000d0c:	075b      	lsls	r3, r3, #29
 8000d0e:	000e      	movs	r6, r1
 8000d10:	002c      	movs	r4, r5
 8000d12:	4318      	orrs	r0, r3
 8000d14:	e7c2      	b.n	8000c9c <__aeabi_dadd+0x5c0>
 8000d16:	4663      	mov	r3, ip
 8000d18:	08d9      	lsrs	r1, r3, #3
 8000d1a:	4653      	mov	r3, sl
 8000d1c:	075a      	lsls	r2, r3, #29
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	08dc      	lsrs	r4, r3, #3
 8000d22:	e699      	b.n	8000a58 <__aeabi_dadd+0x37c>
 8000d24:	4663      	mov	r3, ip
 8000d26:	08d8      	lsrs	r0, r3, #3
 8000d28:	4653      	mov	r3, sl
 8000d2a:	075a      	lsls	r2, r3, #29
 8000d2c:	000e      	movs	r6, r1
 8000d2e:	4302      	orrs	r2, r0
 8000d30:	08dc      	lsrs	r4, r3, #3
 8000d32:	e6a1      	b.n	8000a78 <__aeabi_dadd+0x39c>
 8000d34:	0011      	movs	r1, r2
 8000d36:	0027      	movs	r7, r4
 8000d38:	3920      	subs	r1, #32
 8000d3a:	40cf      	lsrs	r7, r1
 8000d3c:	2a20      	cmp	r2, #32
 8000d3e:	d003      	beq.n	8000d48 <__aeabi_dadd+0x66c>
 8000d40:	2140      	movs	r1, #64	@ 0x40
 8000d42:	1a8a      	subs	r2, r1, r2
 8000d44:	4094      	lsls	r4, r2
 8000d46:	4320      	orrs	r0, r4
 8000d48:	1e42      	subs	r2, r0, #1
 8000d4a:	4190      	sbcs	r0, r2
 8000d4c:	0005      	movs	r5, r0
 8000d4e:	433d      	orrs	r5, r7
 8000d50:	e651      	b.n	80009f6 <__aeabi_dadd+0x31a>
 8000d52:	000c      	movs	r4, r1
 8000d54:	2500      	movs	r5, #0
 8000d56:	2200      	movs	r2, #0
 8000d58:	e558      	b.n	800080c <__aeabi_dadd+0x130>
 8000d5a:	4460      	add	r0, ip
 8000d5c:	4560      	cmp	r0, ip
 8000d5e:	4192      	sbcs	r2, r2
 8000d60:	4454      	add	r4, sl
 8000d62:	4252      	negs	r2, r2
 8000d64:	0005      	movs	r5, r0
 8000d66:	18a4      	adds	r4, r4, r2
 8000d68:	e73a      	b.n	8000be0 <__aeabi_dadd+0x504>
 8000d6a:	4653      	mov	r3, sl
 8000d6c:	075a      	lsls	r2, r3, #29
 8000d6e:	4663      	mov	r3, ip
 8000d70:	08d9      	lsrs	r1, r3, #3
 8000d72:	4653      	mov	r3, sl
 8000d74:	430a      	orrs	r2, r1
 8000d76:	08dc      	lsrs	r4, r3, #3
 8000d78:	e67e      	b.n	8000a78 <__aeabi_dadd+0x39c>
 8000d7a:	001a      	movs	r2, r3
 8000d7c:	001c      	movs	r4, r3
 8000d7e:	432a      	orrs	r2, r5
 8000d80:	d000      	beq.n	8000d84 <__aeabi_dadd+0x6a8>
 8000d82:	e6ab      	b.n	8000adc <__aeabi_dadd+0x400>
 8000d84:	e6c1      	b.n	8000b0a <__aeabi_dadd+0x42e>
 8000d86:	2120      	movs	r1, #32
 8000d88:	2500      	movs	r5, #0
 8000d8a:	1a09      	subs	r1, r1, r0
 8000d8c:	e519      	b.n	80007c2 <__aeabi_dadd+0xe6>
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2500      	movs	r5, #0
 8000d92:	4c01      	ldr	r4, [pc, #4]	@ (8000d98 <__aeabi_dadd+0x6bc>)
 8000d94:	e53a      	b.n	800080c <__aeabi_dadd+0x130>
 8000d96:	46c0      	nop			@ (mov r8, r8)
 8000d98:	000007ff 	.word	0x000007ff
 8000d9c:	ff7fffff 	.word	0xff7fffff
 8000da0:	000007fe 	.word	0x000007fe

08000da4 <__aeabi_ddiv>:
 8000da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000da6:	46de      	mov	lr, fp
 8000da8:	4645      	mov	r5, r8
 8000daa:	4657      	mov	r7, sl
 8000dac:	464e      	mov	r6, r9
 8000dae:	b5e0      	push	{r5, r6, r7, lr}
 8000db0:	b087      	sub	sp, #28
 8000db2:	9200      	str	r2, [sp, #0]
 8000db4:	9301      	str	r3, [sp, #4]
 8000db6:	030b      	lsls	r3, r1, #12
 8000db8:	0b1b      	lsrs	r3, r3, #12
 8000dba:	469b      	mov	fp, r3
 8000dbc:	0fca      	lsrs	r2, r1, #31
 8000dbe:	004b      	lsls	r3, r1, #1
 8000dc0:	0004      	movs	r4, r0
 8000dc2:	4680      	mov	r8, r0
 8000dc4:	0d5b      	lsrs	r3, r3, #21
 8000dc6:	9202      	str	r2, [sp, #8]
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_ddiv+0x28>
 8000dca:	e16a      	b.n	80010a2 <__aeabi_ddiv+0x2fe>
 8000dcc:	4ad4      	ldr	r2, [pc, #848]	@ (8001120 <__aeabi_ddiv+0x37c>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_ddiv+0x30>
 8000dd2:	e18c      	b.n	80010ee <__aeabi_ddiv+0x34a>
 8000dd4:	4659      	mov	r1, fp
 8000dd6:	0f42      	lsrs	r2, r0, #29
 8000dd8:	00c9      	lsls	r1, r1, #3
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	2180      	movs	r1, #128	@ 0x80
 8000dde:	0409      	lsls	r1, r1, #16
 8000de0:	4311      	orrs	r1, r2
 8000de2:	00c2      	lsls	r2, r0, #3
 8000de4:	4690      	mov	r8, r2
 8000de6:	4acf      	ldr	r2, [pc, #828]	@ (8001124 <__aeabi_ddiv+0x380>)
 8000de8:	4689      	mov	r9, r1
 8000dea:	4692      	mov	sl, r2
 8000dec:	449a      	add	sl, r3
 8000dee:	2300      	movs	r3, #0
 8000df0:	2400      	movs	r4, #0
 8000df2:	9303      	str	r3, [sp, #12]
 8000df4:	9e00      	ldr	r6, [sp, #0]
 8000df6:	9f01      	ldr	r7, [sp, #4]
 8000df8:	033b      	lsls	r3, r7, #12
 8000dfa:	0b1b      	lsrs	r3, r3, #12
 8000dfc:	469b      	mov	fp, r3
 8000dfe:	007b      	lsls	r3, r7, #1
 8000e00:	0030      	movs	r0, r6
 8000e02:	0d5b      	lsrs	r3, r3, #21
 8000e04:	0ffd      	lsrs	r5, r7, #31
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d100      	bne.n	8000e0c <__aeabi_ddiv+0x68>
 8000e0a:	e128      	b.n	800105e <__aeabi_ddiv+0x2ba>
 8000e0c:	4ac4      	ldr	r2, [pc, #784]	@ (8001120 <__aeabi_ddiv+0x37c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d100      	bne.n	8000e14 <__aeabi_ddiv+0x70>
 8000e12:	e177      	b.n	8001104 <__aeabi_ddiv+0x360>
 8000e14:	4659      	mov	r1, fp
 8000e16:	0f72      	lsrs	r2, r6, #29
 8000e18:	00c9      	lsls	r1, r1, #3
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	2180      	movs	r1, #128	@ 0x80
 8000e1e:	0409      	lsls	r1, r1, #16
 8000e20:	4311      	orrs	r1, r2
 8000e22:	468b      	mov	fp, r1
 8000e24:	49bf      	ldr	r1, [pc, #764]	@ (8001124 <__aeabi_ddiv+0x380>)
 8000e26:	00f2      	lsls	r2, r6, #3
 8000e28:	468c      	mov	ip, r1
 8000e2a:	4651      	mov	r1, sl
 8000e2c:	4463      	add	r3, ip
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	469a      	mov	sl, r3
 8000e32:	2300      	movs	r3, #0
 8000e34:	9e02      	ldr	r6, [sp, #8]
 8000e36:	406e      	eors	r6, r5
 8000e38:	2c0f      	cmp	r4, #15
 8000e3a:	d827      	bhi.n	8000e8c <__aeabi_ddiv+0xe8>
 8000e3c:	49ba      	ldr	r1, [pc, #744]	@ (8001128 <__aeabi_ddiv+0x384>)
 8000e3e:	00a4      	lsls	r4, r4, #2
 8000e40:	5909      	ldr	r1, [r1, r4]
 8000e42:	468f      	mov	pc, r1
 8000e44:	46cb      	mov	fp, r9
 8000e46:	4642      	mov	r2, r8
 8000e48:	9e02      	ldr	r6, [sp, #8]
 8000e4a:	9b03      	ldr	r3, [sp, #12]
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d016      	beq.n	8000e7e <__aeabi_ddiv+0xda>
 8000e50:	2b03      	cmp	r3, #3
 8000e52:	d100      	bne.n	8000e56 <__aeabi_ddiv+0xb2>
 8000e54:	e2a6      	b.n	80013a4 <__aeabi_ddiv+0x600>
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d000      	beq.n	8000e5c <__aeabi_ddiv+0xb8>
 8000e5a:	e0df      	b.n	800101c <__aeabi_ddiv+0x278>
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2300      	movs	r3, #0
 8000e60:	2400      	movs	r4, #0
 8000e62:	4690      	mov	r8, r2
 8000e64:	051b      	lsls	r3, r3, #20
 8000e66:	4323      	orrs	r3, r4
 8000e68:	07f6      	lsls	r6, r6, #31
 8000e6a:	4333      	orrs	r3, r6
 8000e6c:	4640      	mov	r0, r8
 8000e6e:	0019      	movs	r1, r3
 8000e70:	b007      	add	sp, #28
 8000e72:	bcf0      	pop	{r4, r5, r6, r7}
 8000e74:	46bb      	mov	fp, r7
 8000e76:	46b2      	mov	sl, r6
 8000e78:	46a9      	mov	r9, r5
 8000e7a:	46a0      	mov	r8, r4
 8000e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2400      	movs	r4, #0
 8000e82:	4690      	mov	r8, r2
 8000e84:	4ba6      	ldr	r3, [pc, #664]	@ (8001120 <__aeabi_ddiv+0x37c>)
 8000e86:	e7ed      	b.n	8000e64 <__aeabi_ddiv+0xc0>
 8000e88:	002e      	movs	r6, r5
 8000e8a:	e7df      	b.n	8000e4c <__aeabi_ddiv+0xa8>
 8000e8c:	45cb      	cmp	fp, r9
 8000e8e:	d200      	bcs.n	8000e92 <__aeabi_ddiv+0xee>
 8000e90:	e1d4      	b.n	800123c <__aeabi_ddiv+0x498>
 8000e92:	d100      	bne.n	8000e96 <__aeabi_ddiv+0xf2>
 8000e94:	e1cf      	b.n	8001236 <__aeabi_ddiv+0x492>
 8000e96:	2301      	movs	r3, #1
 8000e98:	425b      	negs	r3, r3
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	4644      	mov	r4, r8
 8000e9e:	4648      	mov	r0, r9
 8000ea0:	2700      	movs	r7, #0
 8000ea2:	44e2      	add	sl, ip
 8000ea4:	465b      	mov	r3, fp
 8000ea6:	0e15      	lsrs	r5, r2, #24
 8000ea8:	021b      	lsls	r3, r3, #8
 8000eaa:	431d      	orrs	r5, r3
 8000eac:	0c19      	lsrs	r1, r3, #16
 8000eae:	042b      	lsls	r3, r5, #16
 8000eb0:	0212      	lsls	r2, r2, #8
 8000eb2:	9500      	str	r5, [sp, #0]
 8000eb4:	0c1d      	lsrs	r5, r3, #16
 8000eb6:	4691      	mov	r9, r2
 8000eb8:	9102      	str	r1, [sp, #8]
 8000eba:	9503      	str	r5, [sp, #12]
 8000ebc:	f7ff f9c6 	bl	800024c <__aeabi_uidivmod>
 8000ec0:	0002      	movs	r2, r0
 8000ec2:	436a      	muls	r2, r5
 8000ec4:	040b      	lsls	r3, r1, #16
 8000ec6:	0c21      	lsrs	r1, r4, #16
 8000ec8:	4680      	mov	r8, r0
 8000eca:	4319      	orrs	r1, r3
 8000ecc:	428a      	cmp	r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__aeabi_ddiv+0x140>
 8000ed0:	9d00      	ldr	r5, [sp, #0]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	46ac      	mov	ip, r5
 8000ed6:	425b      	negs	r3, r3
 8000ed8:	4461      	add	r1, ip
 8000eda:	469c      	mov	ip, r3
 8000edc:	44e0      	add	r8, ip
 8000ede:	428d      	cmp	r5, r1
 8000ee0:	d800      	bhi.n	8000ee4 <__aeabi_ddiv+0x140>
 8000ee2:	e1fb      	b.n	80012dc <__aeabi_ddiv+0x538>
 8000ee4:	1a88      	subs	r0, r1, r2
 8000ee6:	9902      	ldr	r1, [sp, #8]
 8000ee8:	f7ff f9b0 	bl	800024c <__aeabi_uidivmod>
 8000eec:	9a03      	ldr	r2, [sp, #12]
 8000eee:	0424      	lsls	r4, r4, #16
 8000ef0:	4342      	muls	r2, r0
 8000ef2:	0409      	lsls	r1, r1, #16
 8000ef4:	0c24      	lsrs	r4, r4, #16
 8000ef6:	0003      	movs	r3, r0
 8000ef8:	430c      	orrs	r4, r1
 8000efa:	42a2      	cmp	r2, r4
 8000efc:	d906      	bls.n	8000f0c <__aeabi_ddiv+0x168>
 8000efe:	9900      	ldr	r1, [sp, #0]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	468c      	mov	ip, r1
 8000f04:	4464      	add	r4, ip
 8000f06:	42a1      	cmp	r1, r4
 8000f08:	d800      	bhi.n	8000f0c <__aeabi_ddiv+0x168>
 8000f0a:	e1e1      	b.n	80012d0 <__aeabi_ddiv+0x52c>
 8000f0c:	1aa0      	subs	r0, r4, r2
 8000f0e:	4642      	mov	r2, r8
 8000f10:	0412      	lsls	r2, r2, #16
 8000f12:	431a      	orrs	r2, r3
 8000f14:	4693      	mov	fp, r2
 8000f16:	464b      	mov	r3, r9
 8000f18:	4659      	mov	r1, fp
 8000f1a:	0c1b      	lsrs	r3, r3, #16
 8000f1c:	001d      	movs	r5, r3
 8000f1e:	9304      	str	r3, [sp, #16]
 8000f20:	040b      	lsls	r3, r1, #16
 8000f22:	4649      	mov	r1, r9
 8000f24:	0409      	lsls	r1, r1, #16
 8000f26:	0c09      	lsrs	r1, r1, #16
 8000f28:	000c      	movs	r4, r1
 8000f2a:	0c1b      	lsrs	r3, r3, #16
 8000f2c:	435c      	muls	r4, r3
 8000f2e:	0c12      	lsrs	r2, r2, #16
 8000f30:	436b      	muls	r3, r5
 8000f32:	4688      	mov	r8, r1
 8000f34:	4351      	muls	r1, r2
 8000f36:	436a      	muls	r2, r5
 8000f38:	0c25      	lsrs	r5, r4, #16
 8000f3a:	46ac      	mov	ip, r5
 8000f3c:	185b      	adds	r3, r3, r1
 8000f3e:	4463      	add	r3, ip
 8000f40:	4299      	cmp	r1, r3
 8000f42:	d903      	bls.n	8000f4c <__aeabi_ddiv+0x1a8>
 8000f44:	2180      	movs	r1, #128	@ 0x80
 8000f46:	0249      	lsls	r1, r1, #9
 8000f48:	468c      	mov	ip, r1
 8000f4a:	4462      	add	r2, ip
 8000f4c:	0c19      	lsrs	r1, r3, #16
 8000f4e:	0424      	lsls	r4, r4, #16
 8000f50:	041b      	lsls	r3, r3, #16
 8000f52:	0c24      	lsrs	r4, r4, #16
 8000f54:	188a      	adds	r2, r1, r2
 8000f56:	191c      	adds	r4, r3, r4
 8000f58:	4290      	cmp	r0, r2
 8000f5a:	d302      	bcc.n	8000f62 <__aeabi_ddiv+0x1be>
 8000f5c:	d116      	bne.n	8000f8c <__aeabi_ddiv+0x1e8>
 8000f5e:	42a7      	cmp	r7, r4
 8000f60:	d214      	bcs.n	8000f8c <__aeabi_ddiv+0x1e8>
 8000f62:	465b      	mov	r3, fp
 8000f64:	9d00      	ldr	r5, [sp, #0]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	444f      	add	r7, r9
 8000f6a:	9305      	str	r3, [sp, #20]
 8000f6c:	454f      	cmp	r7, r9
 8000f6e:	419b      	sbcs	r3, r3
 8000f70:	46ac      	mov	ip, r5
 8000f72:	425b      	negs	r3, r3
 8000f74:	4463      	add	r3, ip
 8000f76:	18c0      	adds	r0, r0, r3
 8000f78:	4285      	cmp	r5, r0
 8000f7a:	d300      	bcc.n	8000f7e <__aeabi_ddiv+0x1da>
 8000f7c:	e1a1      	b.n	80012c2 <__aeabi_ddiv+0x51e>
 8000f7e:	4282      	cmp	r2, r0
 8000f80:	d900      	bls.n	8000f84 <__aeabi_ddiv+0x1e0>
 8000f82:	e1f6      	b.n	8001372 <__aeabi_ddiv+0x5ce>
 8000f84:	d100      	bne.n	8000f88 <__aeabi_ddiv+0x1e4>
 8000f86:	e1f1      	b.n	800136c <__aeabi_ddiv+0x5c8>
 8000f88:	9b05      	ldr	r3, [sp, #20]
 8000f8a:	469b      	mov	fp, r3
 8000f8c:	1b3c      	subs	r4, r7, r4
 8000f8e:	42a7      	cmp	r7, r4
 8000f90:	41bf      	sbcs	r7, r7
 8000f92:	9d00      	ldr	r5, [sp, #0]
 8000f94:	1a80      	subs	r0, r0, r2
 8000f96:	427f      	negs	r7, r7
 8000f98:	1bc0      	subs	r0, r0, r7
 8000f9a:	4285      	cmp	r5, r0
 8000f9c:	d100      	bne.n	8000fa0 <__aeabi_ddiv+0x1fc>
 8000f9e:	e1d0      	b.n	8001342 <__aeabi_ddiv+0x59e>
 8000fa0:	9902      	ldr	r1, [sp, #8]
 8000fa2:	f7ff f953 	bl	800024c <__aeabi_uidivmod>
 8000fa6:	9a03      	ldr	r2, [sp, #12]
 8000fa8:	040b      	lsls	r3, r1, #16
 8000faa:	4342      	muls	r2, r0
 8000fac:	0c21      	lsrs	r1, r4, #16
 8000fae:	0007      	movs	r7, r0
 8000fb0:	4319      	orrs	r1, r3
 8000fb2:	428a      	cmp	r2, r1
 8000fb4:	d900      	bls.n	8000fb8 <__aeabi_ddiv+0x214>
 8000fb6:	e178      	b.n	80012aa <__aeabi_ddiv+0x506>
 8000fb8:	1a88      	subs	r0, r1, r2
 8000fba:	9902      	ldr	r1, [sp, #8]
 8000fbc:	f7ff f946 	bl	800024c <__aeabi_uidivmod>
 8000fc0:	9a03      	ldr	r2, [sp, #12]
 8000fc2:	0424      	lsls	r4, r4, #16
 8000fc4:	4342      	muls	r2, r0
 8000fc6:	0409      	lsls	r1, r1, #16
 8000fc8:	0c24      	lsrs	r4, r4, #16
 8000fca:	0003      	movs	r3, r0
 8000fcc:	430c      	orrs	r4, r1
 8000fce:	42a2      	cmp	r2, r4
 8000fd0:	d900      	bls.n	8000fd4 <__aeabi_ddiv+0x230>
 8000fd2:	e15d      	b.n	8001290 <__aeabi_ddiv+0x4ec>
 8000fd4:	4641      	mov	r1, r8
 8000fd6:	1aa4      	subs	r4, r4, r2
 8000fd8:	043a      	lsls	r2, r7, #16
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	9d04      	ldr	r5, [sp, #16]
 8000fde:	0413      	lsls	r3, r2, #16
 8000fe0:	0c1b      	lsrs	r3, r3, #16
 8000fe2:	4359      	muls	r1, r3
 8000fe4:	4647      	mov	r7, r8
 8000fe6:	436b      	muls	r3, r5
 8000fe8:	469c      	mov	ip, r3
 8000fea:	0c10      	lsrs	r0, r2, #16
 8000fec:	4347      	muls	r7, r0
 8000fee:	0c0b      	lsrs	r3, r1, #16
 8000ff0:	44bc      	add	ip, r7
 8000ff2:	4463      	add	r3, ip
 8000ff4:	4368      	muls	r0, r5
 8000ff6:	429f      	cmp	r7, r3
 8000ff8:	d903      	bls.n	8001002 <__aeabi_ddiv+0x25e>
 8000ffa:	2580      	movs	r5, #128	@ 0x80
 8000ffc:	026d      	lsls	r5, r5, #9
 8000ffe:	46ac      	mov	ip, r5
 8001000:	4460      	add	r0, ip
 8001002:	0c1f      	lsrs	r7, r3, #16
 8001004:	0409      	lsls	r1, r1, #16
 8001006:	041b      	lsls	r3, r3, #16
 8001008:	0c09      	lsrs	r1, r1, #16
 800100a:	183f      	adds	r7, r7, r0
 800100c:	185b      	adds	r3, r3, r1
 800100e:	42bc      	cmp	r4, r7
 8001010:	d200      	bcs.n	8001014 <__aeabi_ddiv+0x270>
 8001012:	e102      	b.n	800121a <__aeabi_ddiv+0x476>
 8001014:	d100      	bne.n	8001018 <__aeabi_ddiv+0x274>
 8001016:	e0fd      	b.n	8001214 <__aeabi_ddiv+0x470>
 8001018:	2301      	movs	r3, #1
 800101a:	431a      	orrs	r2, r3
 800101c:	4b43      	ldr	r3, [pc, #268]	@ (800112c <__aeabi_ddiv+0x388>)
 800101e:	4453      	add	r3, sl
 8001020:	2b00      	cmp	r3, #0
 8001022:	dc00      	bgt.n	8001026 <__aeabi_ddiv+0x282>
 8001024:	e0ae      	b.n	8001184 <__aeabi_ddiv+0x3e0>
 8001026:	0751      	lsls	r1, r2, #29
 8001028:	d000      	beq.n	800102c <__aeabi_ddiv+0x288>
 800102a:	e198      	b.n	800135e <__aeabi_ddiv+0x5ba>
 800102c:	4659      	mov	r1, fp
 800102e:	01c9      	lsls	r1, r1, #7
 8001030:	d506      	bpl.n	8001040 <__aeabi_ddiv+0x29c>
 8001032:	4659      	mov	r1, fp
 8001034:	4b3e      	ldr	r3, [pc, #248]	@ (8001130 <__aeabi_ddiv+0x38c>)
 8001036:	4019      	ands	r1, r3
 8001038:	2380      	movs	r3, #128	@ 0x80
 800103a:	468b      	mov	fp, r1
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	4453      	add	r3, sl
 8001040:	493c      	ldr	r1, [pc, #240]	@ (8001134 <__aeabi_ddiv+0x390>)
 8001042:	428b      	cmp	r3, r1
 8001044:	dd00      	ble.n	8001048 <__aeabi_ddiv+0x2a4>
 8001046:	e71a      	b.n	8000e7e <__aeabi_ddiv+0xda>
 8001048:	4659      	mov	r1, fp
 800104a:	08d2      	lsrs	r2, r2, #3
 800104c:	0749      	lsls	r1, r1, #29
 800104e:	4311      	orrs	r1, r2
 8001050:	465a      	mov	r2, fp
 8001052:	055b      	lsls	r3, r3, #21
 8001054:	0254      	lsls	r4, r2, #9
 8001056:	4688      	mov	r8, r1
 8001058:	0b24      	lsrs	r4, r4, #12
 800105a:	0d5b      	lsrs	r3, r3, #21
 800105c:	e702      	b.n	8000e64 <__aeabi_ddiv+0xc0>
 800105e:	465a      	mov	r2, fp
 8001060:	9b00      	ldr	r3, [sp, #0]
 8001062:	431a      	orrs	r2, r3
 8001064:	d100      	bne.n	8001068 <__aeabi_ddiv+0x2c4>
 8001066:	e07e      	b.n	8001166 <__aeabi_ddiv+0x3c2>
 8001068:	465b      	mov	r3, fp
 800106a:	2b00      	cmp	r3, #0
 800106c:	d100      	bne.n	8001070 <__aeabi_ddiv+0x2cc>
 800106e:	e100      	b.n	8001272 <__aeabi_ddiv+0x4ce>
 8001070:	4658      	mov	r0, fp
 8001072:	f001 f9ef 	bl	8002454 <__clzsi2>
 8001076:	0002      	movs	r2, r0
 8001078:	0003      	movs	r3, r0
 800107a:	3a0b      	subs	r2, #11
 800107c:	271d      	movs	r7, #29
 800107e:	9e00      	ldr	r6, [sp, #0]
 8001080:	1aba      	subs	r2, r7, r2
 8001082:	0019      	movs	r1, r3
 8001084:	4658      	mov	r0, fp
 8001086:	40d6      	lsrs	r6, r2
 8001088:	3908      	subs	r1, #8
 800108a:	4088      	lsls	r0, r1
 800108c:	0032      	movs	r2, r6
 800108e:	4302      	orrs	r2, r0
 8001090:	4693      	mov	fp, r2
 8001092:	9a00      	ldr	r2, [sp, #0]
 8001094:	408a      	lsls	r2, r1
 8001096:	4928      	ldr	r1, [pc, #160]	@ (8001138 <__aeabi_ddiv+0x394>)
 8001098:	4453      	add	r3, sl
 800109a:	468a      	mov	sl, r1
 800109c:	449a      	add	sl, r3
 800109e:	2300      	movs	r3, #0
 80010a0:	e6c8      	b.n	8000e34 <__aeabi_ddiv+0x90>
 80010a2:	465b      	mov	r3, fp
 80010a4:	4303      	orrs	r3, r0
 80010a6:	4699      	mov	r9, r3
 80010a8:	d056      	beq.n	8001158 <__aeabi_ddiv+0x3b4>
 80010aa:	465b      	mov	r3, fp
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d100      	bne.n	80010b2 <__aeabi_ddiv+0x30e>
 80010b0:	e0cd      	b.n	800124e <__aeabi_ddiv+0x4aa>
 80010b2:	4658      	mov	r0, fp
 80010b4:	f001 f9ce 	bl	8002454 <__clzsi2>
 80010b8:	230b      	movs	r3, #11
 80010ba:	425b      	negs	r3, r3
 80010bc:	469c      	mov	ip, r3
 80010be:	0002      	movs	r2, r0
 80010c0:	4484      	add	ip, r0
 80010c2:	4666      	mov	r6, ip
 80010c4:	231d      	movs	r3, #29
 80010c6:	1b9b      	subs	r3, r3, r6
 80010c8:	0026      	movs	r6, r4
 80010ca:	0011      	movs	r1, r2
 80010cc:	4658      	mov	r0, fp
 80010ce:	40de      	lsrs	r6, r3
 80010d0:	3908      	subs	r1, #8
 80010d2:	4088      	lsls	r0, r1
 80010d4:	0033      	movs	r3, r6
 80010d6:	4303      	orrs	r3, r0
 80010d8:	4699      	mov	r9, r3
 80010da:	0023      	movs	r3, r4
 80010dc:	408b      	lsls	r3, r1
 80010de:	4698      	mov	r8, r3
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <__aeabi_ddiv+0x398>)
 80010e2:	2400      	movs	r4, #0
 80010e4:	1a9b      	subs	r3, r3, r2
 80010e6:	469a      	mov	sl, r3
 80010e8:	2300      	movs	r3, #0
 80010ea:	9303      	str	r3, [sp, #12]
 80010ec:	e682      	b.n	8000df4 <__aeabi_ddiv+0x50>
 80010ee:	465a      	mov	r2, fp
 80010f0:	4302      	orrs	r2, r0
 80010f2:	4691      	mov	r9, r2
 80010f4:	d12a      	bne.n	800114c <__aeabi_ddiv+0x3a8>
 80010f6:	2200      	movs	r2, #0
 80010f8:	469a      	mov	sl, r3
 80010fa:	2302      	movs	r3, #2
 80010fc:	4690      	mov	r8, r2
 80010fe:	2408      	movs	r4, #8
 8001100:	9303      	str	r3, [sp, #12]
 8001102:	e677      	b.n	8000df4 <__aeabi_ddiv+0x50>
 8001104:	465a      	mov	r2, fp
 8001106:	9b00      	ldr	r3, [sp, #0]
 8001108:	431a      	orrs	r2, r3
 800110a:	4b0d      	ldr	r3, [pc, #52]	@ (8001140 <__aeabi_ddiv+0x39c>)
 800110c:	469c      	mov	ip, r3
 800110e:	44e2      	add	sl, ip
 8001110:	2a00      	cmp	r2, #0
 8001112:	d117      	bne.n	8001144 <__aeabi_ddiv+0x3a0>
 8001114:	2302      	movs	r3, #2
 8001116:	431c      	orrs	r4, r3
 8001118:	2300      	movs	r3, #0
 800111a:	469b      	mov	fp, r3
 800111c:	3302      	adds	r3, #2
 800111e:	e689      	b.n	8000e34 <__aeabi_ddiv+0x90>
 8001120:	000007ff 	.word	0x000007ff
 8001124:	fffffc01 	.word	0xfffffc01
 8001128:	0800a3fc 	.word	0x0800a3fc
 800112c:	000003ff 	.word	0x000003ff
 8001130:	feffffff 	.word	0xfeffffff
 8001134:	000007fe 	.word	0x000007fe
 8001138:	000003f3 	.word	0x000003f3
 800113c:	fffffc0d 	.word	0xfffffc0d
 8001140:	fffff801 	.word	0xfffff801
 8001144:	2303      	movs	r3, #3
 8001146:	0032      	movs	r2, r6
 8001148:	431c      	orrs	r4, r3
 800114a:	e673      	b.n	8000e34 <__aeabi_ddiv+0x90>
 800114c:	469a      	mov	sl, r3
 800114e:	2303      	movs	r3, #3
 8001150:	46d9      	mov	r9, fp
 8001152:	240c      	movs	r4, #12
 8001154:	9303      	str	r3, [sp, #12]
 8001156:	e64d      	b.n	8000df4 <__aeabi_ddiv+0x50>
 8001158:	2300      	movs	r3, #0
 800115a:	4698      	mov	r8, r3
 800115c:	469a      	mov	sl, r3
 800115e:	3301      	adds	r3, #1
 8001160:	2404      	movs	r4, #4
 8001162:	9303      	str	r3, [sp, #12]
 8001164:	e646      	b.n	8000df4 <__aeabi_ddiv+0x50>
 8001166:	2301      	movs	r3, #1
 8001168:	431c      	orrs	r4, r3
 800116a:	2300      	movs	r3, #0
 800116c:	469b      	mov	fp, r3
 800116e:	3301      	adds	r3, #1
 8001170:	e660      	b.n	8000e34 <__aeabi_ddiv+0x90>
 8001172:	2300      	movs	r3, #0
 8001174:	2480      	movs	r4, #128	@ 0x80
 8001176:	4698      	mov	r8, r3
 8001178:	2600      	movs	r6, #0
 800117a:	4b92      	ldr	r3, [pc, #584]	@ (80013c4 <__aeabi_ddiv+0x620>)
 800117c:	0324      	lsls	r4, r4, #12
 800117e:	e671      	b.n	8000e64 <__aeabi_ddiv+0xc0>
 8001180:	2201      	movs	r2, #1
 8001182:	4252      	negs	r2, r2
 8001184:	2101      	movs	r1, #1
 8001186:	1ac9      	subs	r1, r1, r3
 8001188:	2938      	cmp	r1, #56	@ 0x38
 800118a:	dd00      	ble.n	800118e <__aeabi_ddiv+0x3ea>
 800118c:	e666      	b.n	8000e5c <__aeabi_ddiv+0xb8>
 800118e:	291f      	cmp	r1, #31
 8001190:	dc00      	bgt.n	8001194 <__aeabi_ddiv+0x3f0>
 8001192:	e0ab      	b.n	80012ec <__aeabi_ddiv+0x548>
 8001194:	201f      	movs	r0, #31
 8001196:	4240      	negs	r0, r0
 8001198:	1ac3      	subs	r3, r0, r3
 800119a:	4658      	mov	r0, fp
 800119c:	40d8      	lsrs	r0, r3
 800119e:	0003      	movs	r3, r0
 80011a0:	2920      	cmp	r1, #32
 80011a2:	d004      	beq.n	80011ae <__aeabi_ddiv+0x40a>
 80011a4:	4658      	mov	r0, fp
 80011a6:	4988      	ldr	r1, [pc, #544]	@ (80013c8 <__aeabi_ddiv+0x624>)
 80011a8:	4451      	add	r1, sl
 80011aa:	4088      	lsls	r0, r1
 80011ac:	4302      	orrs	r2, r0
 80011ae:	1e51      	subs	r1, r2, #1
 80011b0:	418a      	sbcs	r2, r1
 80011b2:	431a      	orrs	r2, r3
 80011b4:	2307      	movs	r3, #7
 80011b6:	0019      	movs	r1, r3
 80011b8:	2400      	movs	r4, #0
 80011ba:	4011      	ands	r1, r2
 80011bc:	4213      	tst	r3, r2
 80011be:	d00c      	beq.n	80011da <__aeabi_ddiv+0x436>
 80011c0:	230f      	movs	r3, #15
 80011c2:	4013      	ands	r3, r2
 80011c4:	2b04      	cmp	r3, #4
 80011c6:	d100      	bne.n	80011ca <__aeabi_ddiv+0x426>
 80011c8:	e0f9      	b.n	80013be <__aeabi_ddiv+0x61a>
 80011ca:	1d11      	adds	r1, r2, #4
 80011cc:	4291      	cmp	r1, r2
 80011ce:	419b      	sbcs	r3, r3
 80011d0:	000a      	movs	r2, r1
 80011d2:	425b      	negs	r3, r3
 80011d4:	0759      	lsls	r1, r3, #29
 80011d6:	025b      	lsls	r3, r3, #9
 80011d8:	0b1c      	lsrs	r4, r3, #12
 80011da:	08d2      	lsrs	r2, r2, #3
 80011dc:	430a      	orrs	r2, r1
 80011de:	4690      	mov	r8, r2
 80011e0:	2300      	movs	r3, #0
 80011e2:	e63f      	b.n	8000e64 <__aeabi_ddiv+0xc0>
 80011e4:	2480      	movs	r4, #128	@ 0x80
 80011e6:	464b      	mov	r3, r9
 80011e8:	0324      	lsls	r4, r4, #12
 80011ea:	4223      	tst	r3, r4
 80011ec:	d009      	beq.n	8001202 <__aeabi_ddiv+0x45e>
 80011ee:	465b      	mov	r3, fp
 80011f0:	4223      	tst	r3, r4
 80011f2:	d106      	bne.n	8001202 <__aeabi_ddiv+0x45e>
 80011f4:	431c      	orrs	r4, r3
 80011f6:	0324      	lsls	r4, r4, #12
 80011f8:	002e      	movs	r6, r5
 80011fa:	4690      	mov	r8, r2
 80011fc:	4b71      	ldr	r3, [pc, #452]	@ (80013c4 <__aeabi_ddiv+0x620>)
 80011fe:	0b24      	lsrs	r4, r4, #12
 8001200:	e630      	b.n	8000e64 <__aeabi_ddiv+0xc0>
 8001202:	2480      	movs	r4, #128	@ 0x80
 8001204:	464b      	mov	r3, r9
 8001206:	0324      	lsls	r4, r4, #12
 8001208:	431c      	orrs	r4, r3
 800120a:	0324      	lsls	r4, r4, #12
 800120c:	9e02      	ldr	r6, [sp, #8]
 800120e:	4b6d      	ldr	r3, [pc, #436]	@ (80013c4 <__aeabi_ddiv+0x620>)
 8001210:	0b24      	lsrs	r4, r4, #12
 8001212:	e627      	b.n	8000e64 <__aeabi_ddiv+0xc0>
 8001214:	2b00      	cmp	r3, #0
 8001216:	d100      	bne.n	800121a <__aeabi_ddiv+0x476>
 8001218:	e700      	b.n	800101c <__aeabi_ddiv+0x278>
 800121a:	9800      	ldr	r0, [sp, #0]
 800121c:	1e51      	subs	r1, r2, #1
 800121e:	4684      	mov	ip, r0
 8001220:	4464      	add	r4, ip
 8001222:	4284      	cmp	r4, r0
 8001224:	d200      	bcs.n	8001228 <__aeabi_ddiv+0x484>
 8001226:	e084      	b.n	8001332 <__aeabi_ddiv+0x58e>
 8001228:	42bc      	cmp	r4, r7
 800122a:	d200      	bcs.n	800122e <__aeabi_ddiv+0x48a>
 800122c:	e0ae      	b.n	800138c <__aeabi_ddiv+0x5e8>
 800122e:	d100      	bne.n	8001232 <__aeabi_ddiv+0x48e>
 8001230:	e0c1      	b.n	80013b6 <__aeabi_ddiv+0x612>
 8001232:	000a      	movs	r2, r1
 8001234:	e6f0      	b.n	8001018 <__aeabi_ddiv+0x274>
 8001236:	4542      	cmp	r2, r8
 8001238:	d900      	bls.n	800123c <__aeabi_ddiv+0x498>
 800123a:	e62c      	b.n	8000e96 <__aeabi_ddiv+0xf2>
 800123c:	464b      	mov	r3, r9
 800123e:	07dc      	lsls	r4, r3, #31
 8001240:	0858      	lsrs	r0, r3, #1
 8001242:	4643      	mov	r3, r8
 8001244:	085b      	lsrs	r3, r3, #1
 8001246:	431c      	orrs	r4, r3
 8001248:	4643      	mov	r3, r8
 800124a:	07df      	lsls	r7, r3, #31
 800124c:	e62a      	b.n	8000ea4 <__aeabi_ddiv+0x100>
 800124e:	f001 f901 	bl	8002454 <__clzsi2>
 8001252:	2315      	movs	r3, #21
 8001254:	469c      	mov	ip, r3
 8001256:	4484      	add	ip, r0
 8001258:	0002      	movs	r2, r0
 800125a:	4663      	mov	r3, ip
 800125c:	3220      	adds	r2, #32
 800125e:	2b1c      	cmp	r3, #28
 8001260:	dc00      	bgt.n	8001264 <__aeabi_ddiv+0x4c0>
 8001262:	e72e      	b.n	80010c2 <__aeabi_ddiv+0x31e>
 8001264:	0023      	movs	r3, r4
 8001266:	3808      	subs	r0, #8
 8001268:	4083      	lsls	r3, r0
 800126a:	4699      	mov	r9, r3
 800126c:	2300      	movs	r3, #0
 800126e:	4698      	mov	r8, r3
 8001270:	e736      	b.n	80010e0 <__aeabi_ddiv+0x33c>
 8001272:	f001 f8ef 	bl	8002454 <__clzsi2>
 8001276:	0002      	movs	r2, r0
 8001278:	0003      	movs	r3, r0
 800127a:	3215      	adds	r2, #21
 800127c:	3320      	adds	r3, #32
 800127e:	2a1c      	cmp	r2, #28
 8001280:	dc00      	bgt.n	8001284 <__aeabi_ddiv+0x4e0>
 8001282:	e6fb      	b.n	800107c <__aeabi_ddiv+0x2d8>
 8001284:	9900      	ldr	r1, [sp, #0]
 8001286:	3808      	subs	r0, #8
 8001288:	4081      	lsls	r1, r0
 800128a:	2200      	movs	r2, #0
 800128c:	468b      	mov	fp, r1
 800128e:	e702      	b.n	8001096 <__aeabi_ddiv+0x2f2>
 8001290:	9900      	ldr	r1, [sp, #0]
 8001292:	3b01      	subs	r3, #1
 8001294:	468c      	mov	ip, r1
 8001296:	4464      	add	r4, ip
 8001298:	42a1      	cmp	r1, r4
 800129a:	d900      	bls.n	800129e <__aeabi_ddiv+0x4fa>
 800129c:	e69a      	b.n	8000fd4 <__aeabi_ddiv+0x230>
 800129e:	42a2      	cmp	r2, r4
 80012a0:	d800      	bhi.n	80012a4 <__aeabi_ddiv+0x500>
 80012a2:	e697      	b.n	8000fd4 <__aeabi_ddiv+0x230>
 80012a4:	1e83      	subs	r3, r0, #2
 80012a6:	4464      	add	r4, ip
 80012a8:	e694      	b.n	8000fd4 <__aeabi_ddiv+0x230>
 80012aa:	46ac      	mov	ip, r5
 80012ac:	4461      	add	r1, ip
 80012ae:	3f01      	subs	r7, #1
 80012b0:	428d      	cmp	r5, r1
 80012b2:	d900      	bls.n	80012b6 <__aeabi_ddiv+0x512>
 80012b4:	e680      	b.n	8000fb8 <__aeabi_ddiv+0x214>
 80012b6:	428a      	cmp	r2, r1
 80012b8:	d800      	bhi.n	80012bc <__aeabi_ddiv+0x518>
 80012ba:	e67d      	b.n	8000fb8 <__aeabi_ddiv+0x214>
 80012bc:	1e87      	subs	r7, r0, #2
 80012be:	4461      	add	r1, ip
 80012c0:	e67a      	b.n	8000fb8 <__aeabi_ddiv+0x214>
 80012c2:	4285      	cmp	r5, r0
 80012c4:	d000      	beq.n	80012c8 <__aeabi_ddiv+0x524>
 80012c6:	e65f      	b.n	8000f88 <__aeabi_ddiv+0x1e4>
 80012c8:	45b9      	cmp	r9, r7
 80012ca:	d900      	bls.n	80012ce <__aeabi_ddiv+0x52a>
 80012cc:	e65c      	b.n	8000f88 <__aeabi_ddiv+0x1e4>
 80012ce:	e656      	b.n	8000f7e <__aeabi_ddiv+0x1da>
 80012d0:	42a2      	cmp	r2, r4
 80012d2:	d800      	bhi.n	80012d6 <__aeabi_ddiv+0x532>
 80012d4:	e61a      	b.n	8000f0c <__aeabi_ddiv+0x168>
 80012d6:	1e83      	subs	r3, r0, #2
 80012d8:	4464      	add	r4, ip
 80012da:	e617      	b.n	8000f0c <__aeabi_ddiv+0x168>
 80012dc:	428a      	cmp	r2, r1
 80012de:	d800      	bhi.n	80012e2 <__aeabi_ddiv+0x53e>
 80012e0:	e600      	b.n	8000ee4 <__aeabi_ddiv+0x140>
 80012e2:	46ac      	mov	ip, r5
 80012e4:	1e83      	subs	r3, r0, #2
 80012e6:	4698      	mov	r8, r3
 80012e8:	4461      	add	r1, ip
 80012ea:	e5fb      	b.n	8000ee4 <__aeabi_ddiv+0x140>
 80012ec:	4837      	ldr	r0, [pc, #220]	@ (80013cc <__aeabi_ddiv+0x628>)
 80012ee:	0014      	movs	r4, r2
 80012f0:	4450      	add	r0, sl
 80012f2:	4082      	lsls	r2, r0
 80012f4:	465b      	mov	r3, fp
 80012f6:	0017      	movs	r7, r2
 80012f8:	4083      	lsls	r3, r0
 80012fa:	40cc      	lsrs	r4, r1
 80012fc:	1e7a      	subs	r2, r7, #1
 80012fe:	4197      	sbcs	r7, r2
 8001300:	4323      	orrs	r3, r4
 8001302:	433b      	orrs	r3, r7
 8001304:	001a      	movs	r2, r3
 8001306:	465b      	mov	r3, fp
 8001308:	40cb      	lsrs	r3, r1
 800130a:	0751      	lsls	r1, r2, #29
 800130c:	d009      	beq.n	8001322 <__aeabi_ddiv+0x57e>
 800130e:	210f      	movs	r1, #15
 8001310:	4011      	ands	r1, r2
 8001312:	2904      	cmp	r1, #4
 8001314:	d005      	beq.n	8001322 <__aeabi_ddiv+0x57e>
 8001316:	1d11      	adds	r1, r2, #4
 8001318:	4291      	cmp	r1, r2
 800131a:	4192      	sbcs	r2, r2
 800131c:	4252      	negs	r2, r2
 800131e:	189b      	adds	r3, r3, r2
 8001320:	000a      	movs	r2, r1
 8001322:	0219      	lsls	r1, r3, #8
 8001324:	d400      	bmi.n	8001328 <__aeabi_ddiv+0x584>
 8001326:	e755      	b.n	80011d4 <__aeabi_ddiv+0x430>
 8001328:	2200      	movs	r2, #0
 800132a:	2301      	movs	r3, #1
 800132c:	2400      	movs	r4, #0
 800132e:	4690      	mov	r8, r2
 8001330:	e598      	b.n	8000e64 <__aeabi_ddiv+0xc0>
 8001332:	000a      	movs	r2, r1
 8001334:	42bc      	cmp	r4, r7
 8001336:	d000      	beq.n	800133a <__aeabi_ddiv+0x596>
 8001338:	e66e      	b.n	8001018 <__aeabi_ddiv+0x274>
 800133a:	454b      	cmp	r3, r9
 800133c:	d000      	beq.n	8001340 <__aeabi_ddiv+0x59c>
 800133e:	e66b      	b.n	8001018 <__aeabi_ddiv+0x274>
 8001340:	e66c      	b.n	800101c <__aeabi_ddiv+0x278>
 8001342:	4b23      	ldr	r3, [pc, #140]	@ (80013d0 <__aeabi_ddiv+0x62c>)
 8001344:	4a23      	ldr	r2, [pc, #140]	@ (80013d4 <__aeabi_ddiv+0x630>)
 8001346:	4453      	add	r3, sl
 8001348:	4592      	cmp	sl, r2
 800134a:	da00      	bge.n	800134e <__aeabi_ddiv+0x5aa>
 800134c:	e718      	b.n	8001180 <__aeabi_ddiv+0x3dc>
 800134e:	2101      	movs	r1, #1
 8001350:	4249      	negs	r1, r1
 8001352:	1d0a      	adds	r2, r1, #4
 8001354:	428a      	cmp	r2, r1
 8001356:	4189      	sbcs	r1, r1
 8001358:	4249      	negs	r1, r1
 800135a:	448b      	add	fp, r1
 800135c:	e666      	b.n	800102c <__aeabi_ddiv+0x288>
 800135e:	210f      	movs	r1, #15
 8001360:	4011      	ands	r1, r2
 8001362:	2904      	cmp	r1, #4
 8001364:	d100      	bne.n	8001368 <__aeabi_ddiv+0x5c4>
 8001366:	e661      	b.n	800102c <__aeabi_ddiv+0x288>
 8001368:	0011      	movs	r1, r2
 800136a:	e7f2      	b.n	8001352 <__aeabi_ddiv+0x5ae>
 800136c:	42bc      	cmp	r4, r7
 800136e:	d800      	bhi.n	8001372 <__aeabi_ddiv+0x5ce>
 8001370:	e60a      	b.n	8000f88 <__aeabi_ddiv+0x1e4>
 8001372:	2302      	movs	r3, #2
 8001374:	425b      	negs	r3, r3
 8001376:	469c      	mov	ip, r3
 8001378:	9900      	ldr	r1, [sp, #0]
 800137a:	444f      	add	r7, r9
 800137c:	454f      	cmp	r7, r9
 800137e:	419b      	sbcs	r3, r3
 8001380:	44e3      	add	fp, ip
 8001382:	468c      	mov	ip, r1
 8001384:	425b      	negs	r3, r3
 8001386:	4463      	add	r3, ip
 8001388:	18c0      	adds	r0, r0, r3
 800138a:	e5ff      	b.n	8000f8c <__aeabi_ddiv+0x1e8>
 800138c:	4649      	mov	r1, r9
 800138e:	9d00      	ldr	r5, [sp, #0]
 8001390:	0048      	lsls	r0, r1, #1
 8001392:	4548      	cmp	r0, r9
 8001394:	4189      	sbcs	r1, r1
 8001396:	46ac      	mov	ip, r5
 8001398:	4249      	negs	r1, r1
 800139a:	4461      	add	r1, ip
 800139c:	4681      	mov	r9, r0
 800139e:	3a02      	subs	r2, #2
 80013a0:	1864      	adds	r4, r4, r1
 80013a2:	e7c7      	b.n	8001334 <__aeabi_ddiv+0x590>
 80013a4:	2480      	movs	r4, #128	@ 0x80
 80013a6:	465b      	mov	r3, fp
 80013a8:	0324      	lsls	r4, r4, #12
 80013aa:	431c      	orrs	r4, r3
 80013ac:	0324      	lsls	r4, r4, #12
 80013ae:	4690      	mov	r8, r2
 80013b0:	4b04      	ldr	r3, [pc, #16]	@ (80013c4 <__aeabi_ddiv+0x620>)
 80013b2:	0b24      	lsrs	r4, r4, #12
 80013b4:	e556      	b.n	8000e64 <__aeabi_ddiv+0xc0>
 80013b6:	4599      	cmp	r9, r3
 80013b8:	d3e8      	bcc.n	800138c <__aeabi_ddiv+0x5e8>
 80013ba:	000a      	movs	r2, r1
 80013bc:	e7bd      	b.n	800133a <__aeabi_ddiv+0x596>
 80013be:	2300      	movs	r3, #0
 80013c0:	e708      	b.n	80011d4 <__aeabi_ddiv+0x430>
 80013c2:	46c0      	nop			@ (mov r8, r8)
 80013c4:	000007ff 	.word	0x000007ff
 80013c8:	0000043e 	.word	0x0000043e
 80013cc:	0000041e 	.word	0x0000041e
 80013d0:	000003ff 	.word	0x000003ff
 80013d4:	fffffc02 	.word	0xfffffc02

080013d8 <__eqdf2>:
 80013d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013da:	4657      	mov	r7, sl
 80013dc:	46de      	mov	lr, fp
 80013de:	464e      	mov	r6, r9
 80013e0:	4645      	mov	r5, r8
 80013e2:	b5e0      	push	{r5, r6, r7, lr}
 80013e4:	000d      	movs	r5, r1
 80013e6:	0004      	movs	r4, r0
 80013e8:	0fe8      	lsrs	r0, r5, #31
 80013ea:	4683      	mov	fp, r0
 80013ec:	0309      	lsls	r1, r1, #12
 80013ee:	0fd8      	lsrs	r0, r3, #31
 80013f0:	0b09      	lsrs	r1, r1, #12
 80013f2:	4682      	mov	sl, r0
 80013f4:	4819      	ldr	r0, [pc, #100]	@ (800145c <__eqdf2+0x84>)
 80013f6:	468c      	mov	ip, r1
 80013f8:	031f      	lsls	r7, r3, #12
 80013fa:	0069      	lsls	r1, r5, #1
 80013fc:	005e      	lsls	r6, r3, #1
 80013fe:	0d49      	lsrs	r1, r1, #21
 8001400:	0b3f      	lsrs	r7, r7, #12
 8001402:	0d76      	lsrs	r6, r6, #21
 8001404:	4281      	cmp	r1, r0
 8001406:	d018      	beq.n	800143a <__eqdf2+0x62>
 8001408:	4286      	cmp	r6, r0
 800140a:	d00f      	beq.n	800142c <__eqdf2+0x54>
 800140c:	2001      	movs	r0, #1
 800140e:	42b1      	cmp	r1, r6
 8001410:	d10d      	bne.n	800142e <__eqdf2+0x56>
 8001412:	45bc      	cmp	ip, r7
 8001414:	d10b      	bne.n	800142e <__eqdf2+0x56>
 8001416:	4294      	cmp	r4, r2
 8001418:	d109      	bne.n	800142e <__eqdf2+0x56>
 800141a:	45d3      	cmp	fp, sl
 800141c:	d01c      	beq.n	8001458 <__eqdf2+0x80>
 800141e:	2900      	cmp	r1, #0
 8001420:	d105      	bne.n	800142e <__eqdf2+0x56>
 8001422:	4660      	mov	r0, ip
 8001424:	4320      	orrs	r0, r4
 8001426:	1e43      	subs	r3, r0, #1
 8001428:	4198      	sbcs	r0, r3
 800142a:	e000      	b.n	800142e <__eqdf2+0x56>
 800142c:	2001      	movs	r0, #1
 800142e:	bcf0      	pop	{r4, r5, r6, r7}
 8001430:	46bb      	mov	fp, r7
 8001432:	46b2      	mov	sl, r6
 8001434:	46a9      	mov	r9, r5
 8001436:	46a0      	mov	r8, r4
 8001438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800143a:	2001      	movs	r0, #1
 800143c:	428e      	cmp	r6, r1
 800143e:	d1f6      	bne.n	800142e <__eqdf2+0x56>
 8001440:	4661      	mov	r1, ip
 8001442:	4339      	orrs	r1, r7
 8001444:	000f      	movs	r7, r1
 8001446:	4317      	orrs	r7, r2
 8001448:	4327      	orrs	r7, r4
 800144a:	d1f0      	bne.n	800142e <__eqdf2+0x56>
 800144c:	465b      	mov	r3, fp
 800144e:	4652      	mov	r2, sl
 8001450:	1a98      	subs	r0, r3, r2
 8001452:	1e43      	subs	r3, r0, #1
 8001454:	4198      	sbcs	r0, r3
 8001456:	e7ea      	b.n	800142e <__eqdf2+0x56>
 8001458:	2000      	movs	r0, #0
 800145a:	e7e8      	b.n	800142e <__eqdf2+0x56>
 800145c:	000007ff 	.word	0x000007ff

08001460 <__gedf2>:
 8001460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001462:	4657      	mov	r7, sl
 8001464:	464e      	mov	r6, r9
 8001466:	4645      	mov	r5, r8
 8001468:	46de      	mov	lr, fp
 800146a:	b5e0      	push	{r5, r6, r7, lr}
 800146c:	000d      	movs	r5, r1
 800146e:	030f      	lsls	r7, r1, #12
 8001470:	0b39      	lsrs	r1, r7, #12
 8001472:	b083      	sub	sp, #12
 8001474:	0004      	movs	r4, r0
 8001476:	4680      	mov	r8, r0
 8001478:	9101      	str	r1, [sp, #4]
 800147a:	0058      	lsls	r0, r3, #1
 800147c:	0fe9      	lsrs	r1, r5, #31
 800147e:	4f31      	ldr	r7, [pc, #196]	@ (8001544 <__gedf2+0xe4>)
 8001480:	0d40      	lsrs	r0, r0, #21
 8001482:	468c      	mov	ip, r1
 8001484:	006e      	lsls	r6, r5, #1
 8001486:	0319      	lsls	r1, r3, #12
 8001488:	4682      	mov	sl, r0
 800148a:	4691      	mov	r9, r2
 800148c:	0d76      	lsrs	r6, r6, #21
 800148e:	0b09      	lsrs	r1, r1, #12
 8001490:	0fd8      	lsrs	r0, r3, #31
 8001492:	42be      	cmp	r6, r7
 8001494:	d01f      	beq.n	80014d6 <__gedf2+0x76>
 8001496:	45ba      	cmp	sl, r7
 8001498:	d00f      	beq.n	80014ba <__gedf2+0x5a>
 800149a:	2e00      	cmp	r6, #0
 800149c:	d12f      	bne.n	80014fe <__gedf2+0x9e>
 800149e:	4655      	mov	r5, sl
 80014a0:	9e01      	ldr	r6, [sp, #4]
 80014a2:	4334      	orrs	r4, r6
 80014a4:	2d00      	cmp	r5, #0
 80014a6:	d127      	bne.n	80014f8 <__gedf2+0x98>
 80014a8:	430a      	orrs	r2, r1
 80014aa:	d03a      	beq.n	8001522 <__gedf2+0xc2>
 80014ac:	2c00      	cmp	r4, #0
 80014ae:	d145      	bne.n	800153c <__gedf2+0xdc>
 80014b0:	2800      	cmp	r0, #0
 80014b2:	d11a      	bne.n	80014ea <__gedf2+0x8a>
 80014b4:	2001      	movs	r0, #1
 80014b6:	4240      	negs	r0, r0
 80014b8:	e017      	b.n	80014ea <__gedf2+0x8a>
 80014ba:	4311      	orrs	r1, r2
 80014bc:	d13b      	bne.n	8001536 <__gedf2+0xd6>
 80014be:	2e00      	cmp	r6, #0
 80014c0:	d102      	bne.n	80014c8 <__gedf2+0x68>
 80014c2:	9f01      	ldr	r7, [sp, #4]
 80014c4:	4327      	orrs	r7, r4
 80014c6:	d0f3      	beq.n	80014b0 <__gedf2+0x50>
 80014c8:	4584      	cmp	ip, r0
 80014ca:	d109      	bne.n	80014e0 <__gedf2+0x80>
 80014cc:	4663      	mov	r3, ip
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f0      	beq.n	80014b4 <__gedf2+0x54>
 80014d2:	4660      	mov	r0, ip
 80014d4:	e009      	b.n	80014ea <__gedf2+0x8a>
 80014d6:	9f01      	ldr	r7, [sp, #4]
 80014d8:	4327      	orrs	r7, r4
 80014da:	d12c      	bne.n	8001536 <__gedf2+0xd6>
 80014dc:	45b2      	cmp	sl, r6
 80014de:	d024      	beq.n	800152a <__gedf2+0xca>
 80014e0:	4663      	mov	r3, ip
 80014e2:	2002      	movs	r0, #2
 80014e4:	3b01      	subs	r3, #1
 80014e6:	4018      	ands	r0, r3
 80014e8:	3801      	subs	r0, #1
 80014ea:	b003      	add	sp, #12
 80014ec:	bcf0      	pop	{r4, r5, r6, r7}
 80014ee:	46bb      	mov	fp, r7
 80014f0:	46b2      	mov	sl, r6
 80014f2:	46a9      	mov	r9, r5
 80014f4:	46a0      	mov	r8, r4
 80014f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014f8:	2c00      	cmp	r4, #0
 80014fa:	d0d9      	beq.n	80014b0 <__gedf2+0x50>
 80014fc:	e7e4      	b.n	80014c8 <__gedf2+0x68>
 80014fe:	4654      	mov	r4, sl
 8001500:	2c00      	cmp	r4, #0
 8001502:	d0ed      	beq.n	80014e0 <__gedf2+0x80>
 8001504:	4584      	cmp	ip, r0
 8001506:	d1eb      	bne.n	80014e0 <__gedf2+0x80>
 8001508:	4556      	cmp	r6, sl
 800150a:	dce9      	bgt.n	80014e0 <__gedf2+0x80>
 800150c:	dbde      	blt.n	80014cc <__gedf2+0x6c>
 800150e:	9b01      	ldr	r3, [sp, #4]
 8001510:	428b      	cmp	r3, r1
 8001512:	d8e5      	bhi.n	80014e0 <__gedf2+0x80>
 8001514:	d1da      	bne.n	80014cc <__gedf2+0x6c>
 8001516:	45c8      	cmp	r8, r9
 8001518:	d8e2      	bhi.n	80014e0 <__gedf2+0x80>
 800151a:	2000      	movs	r0, #0
 800151c:	45c8      	cmp	r8, r9
 800151e:	d2e4      	bcs.n	80014ea <__gedf2+0x8a>
 8001520:	e7d4      	b.n	80014cc <__gedf2+0x6c>
 8001522:	2000      	movs	r0, #0
 8001524:	2c00      	cmp	r4, #0
 8001526:	d0e0      	beq.n	80014ea <__gedf2+0x8a>
 8001528:	e7da      	b.n	80014e0 <__gedf2+0x80>
 800152a:	4311      	orrs	r1, r2
 800152c:	d103      	bne.n	8001536 <__gedf2+0xd6>
 800152e:	4584      	cmp	ip, r0
 8001530:	d1d6      	bne.n	80014e0 <__gedf2+0x80>
 8001532:	2000      	movs	r0, #0
 8001534:	e7d9      	b.n	80014ea <__gedf2+0x8a>
 8001536:	2002      	movs	r0, #2
 8001538:	4240      	negs	r0, r0
 800153a:	e7d6      	b.n	80014ea <__gedf2+0x8a>
 800153c:	4584      	cmp	ip, r0
 800153e:	d0e6      	beq.n	800150e <__gedf2+0xae>
 8001540:	e7ce      	b.n	80014e0 <__gedf2+0x80>
 8001542:	46c0      	nop			@ (mov r8, r8)
 8001544:	000007ff 	.word	0x000007ff

08001548 <__ledf2>:
 8001548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154a:	4657      	mov	r7, sl
 800154c:	464e      	mov	r6, r9
 800154e:	4645      	mov	r5, r8
 8001550:	46de      	mov	lr, fp
 8001552:	b5e0      	push	{r5, r6, r7, lr}
 8001554:	000d      	movs	r5, r1
 8001556:	030f      	lsls	r7, r1, #12
 8001558:	0004      	movs	r4, r0
 800155a:	4680      	mov	r8, r0
 800155c:	0fe8      	lsrs	r0, r5, #31
 800155e:	0b39      	lsrs	r1, r7, #12
 8001560:	4684      	mov	ip, r0
 8001562:	b083      	sub	sp, #12
 8001564:	0058      	lsls	r0, r3, #1
 8001566:	4f30      	ldr	r7, [pc, #192]	@ (8001628 <__ledf2+0xe0>)
 8001568:	0d40      	lsrs	r0, r0, #21
 800156a:	9101      	str	r1, [sp, #4]
 800156c:	031e      	lsls	r6, r3, #12
 800156e:	0069      	lsls	r1, r5, #1
 8001570:	4682      	mov	sl, r0
 8001572:	4691      	mov	r9, r2
 8001574:	0d49      	lsrs	r1, r1, #21
 8001576:	0b36      	lsrs	r6, r6, #12
 8001578:	0fd8      	lsrs	r0, r3, #31
 800157a:	42b9      	cmp	r1, r7
 800157c:	d020      	beq.n	80015c0 <__ledf2+0x78>
 800157e:	45ba      	cmp	sl, r7
 8001580:	d00f      	beq.n	80015a2 <__ledf2+0x5a>
 8001582:	2900      	cmp	r1, #0
 8001584:	d12b      	bne.n	80015de <__ledf2+0x96>
 8001586:	9901      	ldr	r1, [sp, #4]
 8001588:	430c      	orrs	r4, r1
 800158a:	4651      	mov	r1, sl
 800158c:	2900      	cmp	r1, #0
 800158e:	d137      	bne.n	8001600 <__ledf2+0xb8>
 8001590:	4332      	orrs	r2, r6
 8001592:	d038      	beq.n	8001606 <__ledf2+0xbe>
 8001594:	2c00      	cmp	r4, #0
 8001596:	d144      	bne.n	8001622 <__ledf2+0xda>
 8001598:	2800      	cmp	r0, #0
 800159a:	d119      	bne.n	80015d0 <__ledf2+0x88>
 800159c:	2001      	movs	r0, #1
 800159e:	4240      	negs	r0, r0
 80015a0:	e016      	b.n	80015d0 <__ledf2+0x88>
 80015a2:	4316      	orrs	r6, r2
 80015a4:	d113      	bne.n	80015ce <__ledf2+0x86>
 80015a6:	2900      	cmp	r1, #0
 80015a8:	d102      	bne.n	80015b0 <__ledf2+0x68>
 80015aa:	9f01      	ldr	r7, [sp, #4]
 80015ac:	4327      	orrs	r7, r4
 80015ae:	d0f3      	beq.n	8001598 <__ledf2+0x50>
 80015b0:	4584      	cmp	ip, r0
 80015b2:	d020      	beq.n	80015f6 <__ledf2+0xae>
 80015b4:	4663      	mov	r3, ip
 80015b6:	2002      	movs	r0, #2
 80015b8:	3b01      	subs	r3, #1
 80015ba:	4018      	ands	r0, r3
 80015bc:	3801      	subs	r0, #1
 80015be:	e007      	b.n	80015d0 <__ledf2+0x88>
 80015c0:	9f01      	ldr	r7, [sp, #4]
 80015c2:	4327      	orrs	r7, r4
 80015c4:	d103      	bne.n	80015ce <__ledf2+0x86>
 80015c6:	458a      	cmp	sl, r1
 80015c8:	d1f4      	bne.n	80015b4 <__ledf2+0x6c>
 80015ca:	4316      	orrs	r6, r2
 80015cc:	d01f      	beq.n	800160e <__ledf2+0xc6>
 80015ce:	2002      	movs	r0, #2
 80015d0:	b003      	add	sp, #12
 80015d2:	bcf0      	pop	{r4, r5, r6, r7}
 80015d4:	46bb      	mov	fp, r7
 80015d6:	46b2      	mov	sl, r6
 80015d8:	46a9      	mov	r9, r5
 80015da:	46a0      	mov	r8, r4
 80015dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015de:	4654      	mov	r4, sl
 80015e0:	2c00      	cmp	r4, #0
 80015e2:	d0e7      	beq.n	80015b4 <__ledf2+0x6c>
 80015e4:	4584      	cmp	ip, r0
 80015e6:	d1e5      	bne.n	80015b4 <__ledf2+0x6c>
 80015e8:	4551      	cmp	r1, sl
 80015ea:	dce3      	bgt.n	80015b4 <__ledf2+0x6c>
 80015ec:	db03      	blt.n	80015f6 <__ledf2+0xae>
 80015ee:	9b01      	ldr	r3, [sp, #4]
 80015f0:	42b3      	cmp	r3, r6
 80015f2:	d8df      	bhi.n	80015b4 <__ledf2+0x6c>
 80015f4:	d00f      	beq.n	8001616 <__ledf2+0xce>
 80015f6:	4663      	mov	r3, ip
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0cf      	beq.n	800159c <__ledf2+0x54>
 80015fc:	4660      	mov	r0, ip
 80015fe:	e7e7      	b.n	80015d0 <__ledf2+0x88>
 8001600:	2c00      	cmp	r4, #0
 8001602:	d0c9      	beq.n	8001598 <__ledf2+0x50>
 8001604:	e7d4      	b.n	80015b0 <__ledf2+0x68>
 8001606:	2000      	movs	r0, #0
 8001608:	2c00      	cmp	r4, #0
 800160a:	d0e1      	beq.n	80015d0 <__ledf2+0x88>
 800160c:	e7d2      	b.n	80015b4 <__ledf2+0x6c>
 800160e:	4584      	cmp	ip, r0
 8001610:	d1d0      	bne.n	80015b4 <__ledf2+0x6c>
 8001612:	2000      	movs	r0, #0
 8001614:	e7dc      	b.n	80015d0 <__ledf2+0x88>
 8001616:	45c8      	cmp	r8, r9
 8001618:	d8cc      	bhi.n	80015b4 <__ledf2+0x6c>
 800161a:	2000      	movs	r0, #0
 800161c:	45c8      	cmp	r8, r9
 800161e:	d2d7      	bcs.n	80015d0 <__ledf2+0x88>
 8001620:	e7e9      	b.n	80015f6 <__ledf2+0xae>
 8001622:	4584      	cmp	ip, r0
 8001624:	d0e3      	beq.n	80015ee <__ledf2+0xa6>
 8001626:	e7c5      	b.n	80015b4 <__ledf2+0x6c>
 8001628:	000007ff 	.word	0x000007ff

0800162c <__aeabi_dmul>:
 800162c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162e:	4657      	mov	r7, sl
 8001630:	46de      	mov	lr, fp
 8001632:	464e      	mov	r6, r9
 8001634:	4645      	mov	r5, r8
 8001636:	b5e0      	push	{r5, r6, r7, lr}
 8001638:	001f      	movs	r7, r3
 800163a:	030b      	lsls	r3, r1, #12
 800163c:	0b1b      	lsrs	r3, r3, #12
 800163e:	0016      	movs	r6, r2
 8001640:	469a      	mov	sl, r3
 8001642:	0fca      	lsrs	r2, r1, #31
 8001644:	004b      	lsls	r3, r1, #1
 8001646:	0004      	movs	r4, r0
 8001648:	4693      	mov	fp, r2
 800164a:	b087      	sub	sp, #28
 800164c:	0d5b      	lsrs	r3, r3, #21
 800164e:	d100      	bne.n	8001652 <__aeabi_dmul+0x26>
 8001650:	e0d5      	b.n	80017fe <__aeabi_dmul+0x1d2>
 8001652:	4abb      	ldr	r2, [pc, #748]	@ (8001940 <__aeabi_dmul+0x314>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d100      	bne.n	800165a <__aeabi_dmul+0x2e>
 8001658:	e0f8      	b.n	800184c <__aeabi_dmul+0x220>
 800165a:	4651      	mov	r1, sl
 800165c:	0f42      	lsrs	r2, r0, #29
 800165e:	00c9      	lsls	r1, r1, #3
 8001660:	430a      	orrs	r2, r1
 8001662:	2180      	movs	r1, #128	@ 0x80
 8001664:	0409      	lsls	r1, r1, #16
 8001666:	4311      	orrs	r1, r2
 8001668:	00c2      	lsls	r2, r0, #3
 800166a:	4691      	mov	r9, r2
 800166c:	4ab5      	ldr	r2, [pc, #724]	@ (8001944 <__aeabi_dmul+0x318>)
 800166e:	468a      	mov	sl, r1
 8001670:	189d      	adds	r5, r3, r2
 8001672:	2300      	movs	r3, #0
 8001674:	4698      	mov	r8, r3
 8001676:	9302      	str	r3, [sp, #8]
 8001678:	033c      	lsls	r4, r7, #12
 800167a:	007b      	lsls	r3, r7, #1
 800167c:	0ffa      	lsrs	r2, r7, #31
 800167e:	0030      	movs	r0, r6
 8001680:	0b24      	lsrs	r4, r4, #12
 8001682:	0d5b      	lsrs	r3, r3, #21
 8001684:	9200      	str	r2, [sp, #0]
 8001686:	d100      	bne.n	800168a <__aeabi_dmul+0x5e>
 8001688:	e096      	b.n	80017b8 <__aeabi_dmul+0x18c>
 800168a:	4aad      	ldr	r2, [pc, #692]	@ (8001940 <__aeabi_dmul+0x314>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d031      	beq.n	80016f4 <__aeabi_dmul+0xc8>
 8001690:	0f72      	lsrs	r2, r6, #29
 8001692:	00e4      	lsls	r4, r4, #3
 8001694:	4322      	orrs	r2, r4
 8001696:	2480      	movs	r4, #128	@ 0x80
 8001698:	0424      	lsls	r4, r4, #16
 800169a:	4314      	orrs	r4, r2
 800169c:	4aa9      	ldr	r2, [pc, #676]	@ (8001944 <__aeabi_dmul+0x318>)
 800169e:	00f0      	lsls	r0, r6, #3
 80016a0:	4694      	mov	ip, r2
 80016a2:	4463      	add	r3, ip
 80016a4:	195b      	adds	r3, r3, r5
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	9201      	str	r2, [sp, #4]
 80016aa:	4642      	mov	r2, r8
 80016ac:	2600      	movs	r6, #0
 80016ae:	2a0a      	cmp	r2, #10
 80016b0:	dc42      	bgt.n	8001738 <__aeabi_dmul+0x10c>
 80016b2:	465a      	mov	r2, fp
 80016b4:	9900      	ldr	r1, [sp, #0]
 80016b6:	404a      	eors	r2, r1
 80016b8:	4693      	mov	fp, r2
 80016ba:	4642      	mov	r2, r8
 80016bc:	2a02      	cmp	r2, #2
 80016be:	dc32      	bgt.n	8001726 <__aeabi_dmul+0xfa>
 80016c0:	3a01      	subs	r2, #1
 80016c2:	2a01      	cmp	r2, #1
 80016c4:	d900      	bls.n	80016c8 <__aeabi_dmul+0x9c>
 80016c6:	e149      	b.n	800195c <__aeabi_dmul+0x330>
 80016c8:	2e02      	cmp	r6, #2
 80016ca:	d100      	bne.n	80016ce <__aeabi_dmul+0xa2>
 80016cc:	e0ca      	b.n	8001864 <__aeabi_dmul+0x238>
 80016ce:	2e01      	cmp	r6, #1
 80016d0:	d13d      	bne.n	800174e <__aeabi_dmul+0x122>
 80016d2:	2300      	movs	r3, #0
 80016d4:	2400      	movs	r4, #0
 80016d6:	2200      	movs	r2, #0
 80016d8:	0010      	movs	r0, r2
 80016da:	465a      	mov	r2, fp
 80016dc:	051b      	lsls	r3, r3, #20
 80016de:	4323      	orrs	r3, r4
 80016e0:	07d2      	lsls	r2, r2, #31
 80016e2:	4313      	orrs	r3, r2
 80016e4:	0019      	movs	r1, r3
 80016e6:	b007      	add	sp, #28
 80016e8:	bcf0      	pop	{r4, r5, r6, r7}
 80016ea:	46bb      	mov	fp, r7
 80016ec:	46b2      	mov	sl, r6
 80016ee:	46a9      	mov	r9, r5
 80016f0:	46a0      	mov	r8, r4
 80016f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f4:	4b92      	ldr	r3, [pc, #584]	@ (8001940 <__aeabi_dmul+0x314>)
 80016f6:	4326      	orrs	r6, r4
 80016f8:	18eb      	adds	r3, r5, r3
 80016fa:	2e00      	cmp	r6, #0
 80016fc:	d100      	bne.n	8001700 <__aeabi_dmul+0xd4>
 80016fe:	e0bb      	b.n	8001878 <__aeabi_dmul+0x24c>
 8001700:	2203      	movs	r2, #3
 8001702:	4641      	mov	r1, r8
 8001704:	4311      	orrs	r1, r2
 8001706:	465a      	mov	r2, fp
 8001708:	4688      	mov	r8, r1
 800170a:	9900      	ldr	r1, [sp, #0]
 800170c:	404a      	eors	r2, r1
 800170e:	2180      	movs	r1, #128	@ 0x80
 8001710:	0109      	lsls	r1, r1, #4
 8001712:	468c      	mov	ip, r1
 8001714:	0029      	movs	r1, r5
 8001716:	4461      	add	r1, ip
 8001718:	9101      	str	r1, [sp, #4]
 800171a:	4641      	mov	r1, r8
 800171c:	290a      	cmp	r1, #10
 800171e:	dd00      	ble.n	8001722 <__aeabi_dmul+0xf6>
 8001720:	e233      	b.n	8001b8a <__aeabi_dmul+0x55e>
 8001722:	4693      	mov	fp, r2
 8001724:	2603      	movs	r6, #3
 8001726:	4642      	mov	r2, r8
 8001728:	2701      	movs	r7, #1
 800172a:	4097      	lsls	r7, r2
 800172c:	21a6      	movs	r1, #166	@ 0xa6
 800172e:	003a      	movs	r2, r7
 8001730:	00c9      	lsls	r1, r1, #3
 8001732:	400a      	ands	r2, r1
 8001734:	420f      	tst	r7, r1
 8001736:	d031      	beq.n	800179c <__aeabi_dmul+0x170>
 8001738:	9e02      	ldr	r6, [sp, #8]
 800173a:	2e02      	cmp	r6, #2
 800173c:	d100      	bne.n	8001740 <__aeabi_dmul+0x114>
 800173e:	e235      	b.n	8001bac <__aeabi_dmul+0x580>
 8001740:	2e03      	cmp	r6, #3
 8001742:	d100      	bne.n	8001746 <__aeabi_dmul+0x11a>
 8001744:	e1d2      	b.n	8001aec <__aeabi_dmul+0x4c0>
 8001746:	4654      	mov	r4, sl
 8001748:	4648      	mov	r0, r9
 800174a:	2e01      	cmp	r6, #1
 800174c:	d0c1      	beq.n	80016d2 <__aeabi_dmul+0xa6>
 800174e:	9a01      	ldr	r2, [sp, #4]
 8001750:	4b7d      	ldr	r3, [pc, #500]	@ (8001948 <__aeabi_dmul+0x31c>)
 8001752:	4694      	mov	ip, r2
 8001754:	4463      	add	r3, ip
 8001756:	2b00      	cmp	r3, #0
 8001758:	dc00      	bgt.n	800175c <__aeabi_dmul+0x130>
 800175a:	e0c0      	b.n	80018de <__aeabi_dmul+0x2b2>
 800175c:	0742      	lsls	r2, r0, #29
 800175e:	d009      	beq.n	8001774 <__aeabi_dmul+0x148>
 8001760:	220f      	movs	r2, #15
 8001762:	4002      	ands	r2, r0
 8001764:	2a04      	cmp	r2, #4
 8001766:	d005      	beq.n	8001774 <__aeabi_dmul+0x148>
 8001768:	1d02      	adds	r2, r0, #4
 800176a:	4282      	cmp	r2, r0
 800176c:	4180      	sbcs	r0, r0
 800176e:	4240      	negs	r0, r0
 8001770:	1824      	adds	r4, r4, r0
 8001772:	0010      	movs	r0, r2
 8001774:	01e2      	lsls	r2, r4, #7
 8001776:	d506      	bpl.n	8001786 <__aeabi_dmul+0x15a>
 8001778:	4b74      	ldr	r3, [pc, #464]	@ (800194c <__aeabi_dmul+0x320>)
 800177a:	9a01      	ldr	r2, [sp, #4]
 800177c:	401c      	ands	r4, r3
 800177e:	2380      	movs	r3, #128	@ 0x80
 8001780:	4694      	mov	ip, r2
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	4463      	add	r3, ip
 8001786:	4a72      	ldr	r2, [pc, #456]	@ (8001950 <__aeabi_dmul+0x324>)
 8001788:	4293      	cmp	r3, r2
 800178a:	dc6b      	bgt.n	8001864 <__aeabi_dmul+0x238>
 800178c:	0762      	lsls	r2, r4, #29
 800178e:	08c0      	lsrs	r0, r0, #3
 8001790:	0264      	lsls	r4, r4, #9
 8001792:	055b      	lsls	r3, r3, #21
 8001794:	4302      	orrs	r2, r0
 8001796:	0b24      	lsrs	r4, r4, #12
 8001798:	0d5b      	lsrs	r3, r3, #21
 800179a:	e79d      	b.n	80016d8 <__aeabi_dmul+0xac>
 800179c:	2190      	movs	r1, #144	@ 0x90
 800179e:	0089      	lsls	r1, r1, #2
 80017a0:	420f      	tst	r7, r1
 80017a2:	d163      	bne.n	800186c <__aeabi_dmul+0x240>
 80017a4:	2288      	movs	r2, #136	@ 0x88
 80017a6:	423a      	tst	r2, r7
 80017a8:	d100      	bne.n	80017ac <__aeabi_dmul+0x180>
 80017aa:	e0d7      	b.n	800195c <__aeabi_dmul+0x330>
 80017ac:	9b00      	ldr	r3, [sp, #0]
 80017ae:	46a2      	mov	sl, r4
 80017b0:	469b      	mov	fp, r3
 80017b2:	4681      	mov	r9, r0
 80017b4:	9602      	str	r6, [sp, #8]
 80017b6:	e7bf      	b.n	8001738 <__aeabi_dmul+0x10c>
 80017b8:	0023      	movs	r3, r4
 80017ba:	4333      	orrs	r3, r6
 80017bc:	d100      	bne.n	80017c0 <__aeabi_dmul+0x194>
 80017be:	e07f      	b.n	80018c0 <__aeabi_dmul+0x294>
 80017c0:	2c00      	cmp	r4, #0
 80017c2:	d100      	bne.n	80017c6 <__aeabi_dmul+0x19a>
 80017c4:	e1ad      	b.n	8001b22 <__aeabi_dmul+0x4f6>
 80017c6:	0020      	movs	r0, r4
 80017c8:	f000 fe44 	bl	8002454 <__clzsi2>
 80017cc:	0002      	movs	r2, r0
 80017ce:	0003      	movs	r3, r0
 80017d0:	3a0b      	subs	r2, #11
 80017d2:	201d      	movs	r0, #29
 80017d4:	0019      	movs	r1, r3
 80017d6:	1a82      	subs	r2, r0, r2
 80017d8:	0030      	movs	r0, r6
 80017da:	3908      	subs	r1, #8
 80017dc:	40d0      	lsrs	r0, r2
 80017de:	408c      	lsls	r4, r1
 80017e0:	4304      	orrs	r4, r0
 80017e2:	0030      	movs	r0, r6
 80017e4:	4088      	lsls	r0, r1
 80017e6:	4a5b      	ldr	r2, [pc, #364]	@ (8001954 <__aeabi_dmul+0x328>)
 80017e8:	1aeb      	subs	r3, r5, r3
 80017ea:	4694      	mov	ip, r2
 80017ec:	4463      	add	r3, ip
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	9201      	str	r2, [sp, #4]
 80017f2:	4642      	mov	r2, r8
 80017f4:	2600      	movs	r6, #0
 80017f6:	2a0a      	cmp	r2, #10
 80017f8:	dc00      	bgt.n	80017fc <__aeabi_dmul+0x1d0>
 80017fa:	e75a      	b.n	80016b2 <__aeabi_dmul+0x86>
 80017fc:	e79c      	b.n	8001738 <__aeabi_dmul+0x10c>
 80017fe:	4653      	mov	r3, sl
 8001800:	4303      	orrs	r3, r0
 8001802:	4699      	mov	r9, r3
 8001804:	d054      	beq.n	80018b0 <__aeabi_dmul+0x284>
 8001806:	4653      	mov	r3, sl
 8001808:	2b00      	cmp	r3, #0
 800180a:	d100      	bne.n	800180e <__aeabi_dmul+0x1e2>
 800180c:	e177      	b.n	8001afe <__aeabi_dmul+0x4d2>
 800180e:	4650      	mov	r0, sl
 8001810:	f000 fe20 	bl	8002454 <__clzsi2>
 8001814:	230b      	movs	r3, #11
 8001816:	425b      	negs	r3, r3
 8001818:	469c      	mov	ip, r3
 800181a:	0002      	movs	r2, r0
 800181c:	4484      	add	ip, r0
 800181e:	0011      	movs	r1, r2
 8001820:	4650      	mov	r0, sl
 8001822:	3908      	subs	r1, #8
 8001824:	4088      	lsls	r0, r1
 8001826:	231d      	movs	r3, #29
 8001828:	4680      	mov	r8, r0
 800182a:	4660      	mov	r0, ip
 800182c:	1a1b      	subs	r3, r3, r0
 800182e:	0020      	movs	r0, r4
 8001830:	40d8      	lsrs	r0, r3
 8001832:	0003      	movs	r3, r0
 8001834:	4640      	mov	r0, r8
 8001836:	4303      	orrs	r3, r0
 8001838:	469a      	mov	sl, r3
 800183a:	0023      	movs	r3, r4
 800183c:	408b      	lsls	r3, r1
 800183e:	4699      	mov	r9, r3
 8001840:	2300      	movs	r3, #0
 8001842:	4d44      	ldr	r5, [pc, #272]	@ (8001954 <__aeabi_dmul+0x328>)
 8001844:	4698      	mov	r8, r3
 8001846:	1aad      	subs	r5, r5, r2
 8001848:	9302      	str	r3, [sp, #8]
 800184a:	e715      	b.n	8001678 <__aeabi_dmul+0x4c>
 800184c:	4652      	mov	r2, sl
 800184e:	4302      	orrs	r2, r0
 8001850:	4691      	mov	r9, r2
 8001852:	d126      	bne.n	80018a2 <__aeabi_dmul+0x276>
 8001854:	2200      	movs	r2, #0
 8001856:	001d      	movs	r5, r3
 8001858:	2302      	movs	r3, #2
 800185a:	4692      	mov	sl, r2
 800185c:	3208      	adds	r2, #8
 800185e:	4690      	mov	r8, r2
 8001860:	9302      	str	r3, [sp, #8]
 8001862:	e709      	b.n	8001678 <__aeabi_dmul+0x4c>
 8001864:	2400      	movs	r4, #0
 8001866:	2200      	movs	r2, #0
 8001868:	4b35      	ldr	r3, [pc, #212]	@ (8001940 <__aeabi_dmul+0x314>)
 800186a:	e735      	b.n	80016d8 <__aeabi_dmul+0xac>
 800186c:	2300      	movs	r3, #0
 800186e:	2480      	movs	r4, #128	@ 0x80
 8001870:	469b      	mov	fp, r3
 8001872:	0324      	lsls	r4, r4, #12
 8001874:	4b32      	ldr	r3, [pc, #200]	@ (8001940 <__aeabi_dmul+0x314>)
 8001876:	e72f      	b.n	80016d8 <__aeabi_dmul+0xac>
 8001878:	2202      	movs	r2, #2
 800187a:	4641      	mov	r1, r8
 800187c:	4311      	orrs	r1, r2
 800187e:	2280      	movs	r2, #128	@ 0x80
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	4694      	mov	ip, r2
 8001884:	002a      	movs	r2, r5
 8001886:	4462      	add	r2, ip
 8001888:	4688      	mov	r8, r1
 800188a:	9201      	str	r2, [sp, #4]
 800188c:	290a      	cmp	r1, #10
 800188e:	dd00      	ble.n	8001892 <__aeabi_dmul+0x266>
 8001890:	e752      	b.n	8001738 <__aeabi_dmul+0x10c>
 8001892:	465a      	mov	r2, fp
 8001894:	2000      	movs	r0, #0
 8001896:	9900      	ldr	r1, [sp, #0]
 8001898:	0004      	movs	r4, r0
 800189a:	404a      	eors	r2, r1
 800189c:	4693      	mov	fp, r2
 800189e:	2602      	movs	r6, #2
 80018a0:	e70b      	b.n	80016ba <__aeabi_dmul+0x8e>
 80018a2:	220c      	movs	r2, #12
 80018a4:	001d      	movs	r5, r3
 80018a6:	2303      	movs	r3, #3
 80018a8:	4681      	mov	r9, r0
 80018aa:	4690      	mov	r8, r2
 80018ac:	9302      	str	r3, [sp, #8]
 80018ae:	e6e3      	b.n	8001678 <__aeabi_dmul+0x4c>
 80018b0:	2300      	movs	r3, #0
 80018b2:	469a      	mov	sl, r3
 80018b4:	3304      	adds	r3, #4
 80018b6:	4698      	mov	r8, r3
 80018b8:	3b03      	subs	r3, #3
 80018ba:	2500      	movs	r5, #0
 80018bc:	9302      	str	r3, [sp, #8]
 80018be:	e6db      	b.n	8001678 <__aeabi_dmul+0x4c>
 80018c0:	4642      	mov	r2, r8
 80018c2:	3301      	adds	r3, #1
 80018c4:	431a      	orrs	r2, r3
 80018c6:	002b      	movs	r3, r5
 80018c8:	4690      	mov	r8, r2
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	9201      	str	r2, [sp, #4]
 80018ce:	4642      	mov	r2, r8
 80018d0:	2400      	movs	r4, #0
 80018d2:	2000      	movs	r0, #0
 80018d4:	2601      	movs	r6, #1
 80018d6:	2a0a      	cmp	r2, #10
 80018d8:	dc00      	bgt.n	80018dc <__aeabi_dmul+0x2b0>
 80018da:	e6ea      	b.n	80016b2 <__aeabi_dmul+0x86>
 80018dc:	e72c      	b.n	8001738 <__aeabi_dmul+0x10c>
 80018de:	2201      	movs	r2, #1
 80018e0:	1ad2      	subs	r2, r2, r3
 80018e2:	2a38      	cmp	r2, #56	@ 0x38
 80018e4:	dd00      	ble.n	80018e8 <__aeabi_dmul+0x2bc>
 80018e6:	e6f4      	b.n	80016d2 <__aeabi_dmul+0xa6>
 80018e8:	2a1f      	cmp	r2, #31
 80018ea:	dc00      	bgt.n	80018ee <__aeabi_dmul+0x2c2>
 80018ec:	e12a      	b.n	8001b44 <__aeabi_dmul+0x518>
 80018ee:	211f      	movs	r1, #31
 80018f0:	4249      	negs	r1, r1
 80018f2:	1acb      	subs	r3, r1, r3
 80018f4:	0021      	movs	r1, r4
 80018f6:	40d9      	lsrs	r1, r3
 80018f8:	000b      	movs	r3, r1
 80018fa:	2a20      	cmp	r2, #32
 80018fc:	d005      	beq.n	800190a <__aeabi_dmul+0x2de>
 80018fe:	4a16      	ldr	r2, [pc, #88]	@ (8001958 <__aeabi_dmul+0x32c>)
 8001900:	9d01      	ldr	r5, [sp, #4]
 8001902:	4694      	mov	ip, r2
 8001904:	4465      	add	r5, ip
 8001906:	40ac      	lsls	r4, r5
 8001908:	4320      	orrs	r0, r4
 800190a:	1e42      	subs	r2, r0, #1
 800190c:	4190      	sbcs	r0, r2
 800190e:	4318      	orrs	r0, r3
 8001910:	2307      	movs	r3, #7
 8001912:	0019      	movs	r1, r3
 8001914:	2400      	movs	r4, #0
 8001916:	4001      	ands	r1, r0
 8001918:	4203      	tst	r3, r0
 800191a:	d00c      	beq.n	8001936 <__aeabi_dmul+0x30a>
 800191c:	230f      	movs	r3, #15
 800191e:	4003      	ands	r3, r0
 8001920:	2b04      	cmp	r3, #4
 8001922:	d100      	bne.n	8001926 <__aeabi_dmul+0x2fa>
 8001924:	e140      	b.n	8001ba8 <__aeabi_dmul+0x57c>
 8001926:	1d03      	adds	r3, r0, #4
 8001928:	4283      	cmp	r3, r0
 800192a:	41a4      	sbcs	r4, r4
 800192c:	0018      	movs	r0, r3
 800192e:	4264      	negs	r4, r4
 8001930:	0761      	lsls	r1, r4, #29
 8001932:	0264      	lsls	r4, r4, #9
 8001934:	0b24      	lsrs	r4, r4, #12
 8001936:	08c2      	lsrs	r2, r0, #3
 8001938:	2300      	movs	r3, #0
 800193a:	430a      	orrs	r2, r1
 800193c:	e6cc      	b.n	80016d8 <__aeabi_dmul+0xac>
 800193e:	46c0      	nop			@ (mov r8, r8)
 8001940:	000007ff 	.word	0x000007ff
 8001944:	fffffc01 	.word	0xfffffc01
 8001948:	000003ff 	.word	0x000003ff
 800194c:	feffffff 	.word	0xfeffffff
 8001950:	000007fe 	.word	0x000007fe
 8001954:	fffffc0d 	.word	0xfffffc0d
 8001958:	0000043e 	.word	0x0000043e
 800195c:	4649      	mov	r1, r9
 800195e:	464a      	mov	r2, r9
 8001960:	0409      	lsls	r1, r1, #16
 8001962:	0c09      	lsrs	r1, r1, #16
 8001964:	000d      	movs	r5, r1
 8001966:	0c16      	lsrs	r6, r2, #16
 8001968:	0c02      	lsrs	r2, r0, #16
 800196a:	0400      	lsls	r0, r0, #16
 800196c:	0c00      	lsrs	r0, r0, #16
 800196e:	4345      	muls	r5, r0
 8001970:	46ac      	mov	ip, r5
 8001972:	0005      	movs	r5, r0
 8001974:	4375      	muls	r5, r6
 8001976:	46a8      	mov	r8, r5
 8001978:	0015      	movs	r5, r2
 800197a:	000f      	movs	r7, r1
 800197c:	4375      	muls	r5, r6
 800197e:	9200      	str	r2, [sp, #0]
 8001980:	9502      	str	r5, [sp, #8]
 8001982:	002a      	movs	r2, r5
 8001984:	9d00      	ldr	r5, [sp, #0]
 8001986:	436f      	muls	r7, r5
 8001988:	4665      	mov	r5, ip
 800198a:	0c2d      	lsrs	r5, r5, #16
 800198c:	46a9      	mov	r9, r5
 800198e:	4447      	add	r7, r8
 8001990:	444f      	add	r7, r9
 8001992:	45b8      	cmp	r8, r7
 8001994:	d905      	bls.n	80019a2 <__aeabi_dmul+0x376>
 8001996:	0015      	movs	r5, r2
 8001998:	2280      	movs	r2, #128	@ 0x80
 800199a:	0252      	lsls	r2, r2, #9
 800199c:	4690      	mov	r8, r2
 800199e:	4445      	add	r5, r8
 80019a0:	9502      	str	r5, [sp, #8]
 80019a2:	0c3d      	lsrs	r5, r7, #16
 80019a4:	9503      	str	r5, [sp, #12]
 80019a6:	4665      	mov	r5, ip
 80019a8:	042d      	lsls	r5, r5, #16
 80019aa:	043f      	lsls	r7, r7, #16
 80019ac:	0c2d      	lsrs	r5, r5, #16
 80019ae:	46ac      	mov	ip, r5
 80019b0:	003d      	movs	r5, r7
 80019b2:	4465      	add	r5, ip
 80019b4:	9504      	str	r5, [sp, #16]
 80019b6:	0c25      	lsrs	r5, r4, #16
 80019b8:	0424      	lsls	r4, r4, #16
 80019ba:	0c24      	lsrs	r4, r4, #16
 80019bc:	46ac      	mov	ip, r5
 80019be:	0025      	movs	r5, r4
 80019c0:	4375      	muls	r5, r6
 80019c2:	46a8      	mov	r8, r5
 80019c4:	4665      	mov	r5, ip
 80019c6:	000f      	movs	r7, r1
 80019c8:	4369      	muls	r1, r5
 80019ca:	4441      	add	r1, r8
 80019cc:	4689      	mov	r9, r1
 80019ce:	4367      	muls	r7, r4
 80019d0:	0c39      	lsrs	r1, r7, #16
 80019d2:	4449      	add	r1, r9
 80019d4:	436e      	muls	r6, r5
 80019d6:	4588      	cmp	r8, r1
 80019d8:	d903      	bls.n	80019e2 <__aeabi_dmul+0x3b6>
 80019da:	2280      	movs	r2, #128	@ 0x80
 80019dc:	0252      	lsls	r2, r2, #9
 80019de:	4690      	mov	r8, r2
 80019e0:	4446      	add	r6, r8
 80019e2:	0c0d      	lsrs	r5, r1, #16
 80019e4:	46a8      	mov	r8, r5
 80019e6:	0035      	movs	r5, r6
 80019e8:	4445      	add	r5, r8
 80019ea:	9505      	str	r5, [sp, #20]
 80019ec:	9d03      	ldr	r5, [sp, #12]
 80019ee:	043f      	lsls	r7, r7, #16
 80019f0:	46a8      	mov	r8, r5
 80019f2:	0c3f      	lsrs	r7, r7, #16
 80019f4:	0409      	lsls	r1, r1, #16
 80019f6:	19c9      	adds	r1, r1, r7
 80019f8:	4488      	add	r8, r1
 80019fa:	4645      	mov	r5, r8
 80019fc:	9503      	str	r5, [sp, #12]
 80019fe:	4655      	mov	r5, sl
 8001a00:	042e      	lsls	r6, r5, #16
 8001a02:	0c36      	lsrs	r6, r6, #16
 8001a04:	0c2f      	lsrs	r7, r5, #16
 8001a06:	0035      	movs	r5, r6
 8001a08:	4345      	muls	r5, r0
 8001a0a:	4378      	muls	r0, r7
 8001a0c:	4681      	mov	r9, r0
 8001a0e:	0038      	movs	r0, r7
 8001a10:	46a8      	mov	r8, r5
 8001a12:	0c2d      	lsrs	r5, r5, #16
 8001a14:	46aa      	mov	sl, r5
 8001a16:	9a00      	ldr	r2, [sp, #0]
 8001a18:	4350      	muls	r0, r2
 8001a1a:	4372      	muls	r2, r6
 8001a1c:	444a      	add	r2, r9
 8001a1e:	4452      	add	r2, sl
 8001a20:	4591      	cmp	r9, r2
 8001a22:	d903      	bls.n	8001a2c <__aeabi_dmul+0x400>
 8001a24:	2580      	movs	r5, #128	@ 0x80
 8001a26:	026d      	lsls	r5, r5, #9
 8001a28:	46a9      	mov	r9, r5
 8001a2a:	4448      	add	r0, r9
 8001a2c:	0c15      	lsrs	r5, r2, #16
 8001a2e:	46a9      	mov	r9, r5
 8001a30:	4645      	mov	r5, r8
 8001a32:	042d      	lsls	r5, r5, #16
 8001a34:	0c2d      	lsrs	r5, r5, #16
 8001a36:	46a8      	mov	r8, r5
 8001a38:	4665      	mov	r5, ip
 8001a3a:	437d      	muls	r5, r7
 8001a3c:	0412      	lsls	r2, r2, #16
 8001a3e:	4448      	add	r0, r9
 8001a40:	4490      	add	r8, r2
 8001a42:	46a9      	mov	r9, r5
 8001a44:	0032      	movs	r2, r6
 8001a46:	4665      	mov	r5, ip
 8001a48:	4362      	muls	r2, r4
 8001a4a:	436e      	muls	r6, r5
 8001a4c:	437c      	muls	r4, r7
 8001a4e:	0c17      	lsrs	r7, r2, #16
 8001a50:	1936      	adds	r6, r6, r4
 8001a52:	19bf      	adds	r7, r7, r6
 8001a54:	42bc      	cmp	r4, r7
 8001a56:	d903      	bls.n	8001a60 <__aeabi_dmul+0x434>
 8001a58:	2480      	movs	r4, #128	@ 0x80
 8001a5a:	0264      	lsls	r4, r4, #9
 8001a5c:	46a4      	mov	ip, r4
 8001a5e:	44e1      	add	r9, ip
 8001a60:	9c02      	ldr	r4, [sp, #8]
 8001a62:	9e03      	ldr	r6, [sp, #12]
 8001a64:	46a4      	mov	ip, r4
 8001a66:	9d05      	ldr	r5, [sp, #20]
 8001a68:	4466      	add	r6, ip
 8001a6a:	428e      	cmp	r6, r1
 8001a6c:	4189      	sbcs	r1, r1
 8001a6e:	46ac      	mov	ip, r5
 8001a70:	0412      	lsls	r2, r2, #16
 8001a72:	043c      	lsls	r4, r7, #16
 8001a74:	0c12      	lsrs	r2, r2, #16
 8001a76:	18a2      	adds	r2, r4, r2
 8001a78:	4462      	add	r2, ip
 8001a7a:	4249      	negs	r1, r1
 8001a7c:	1854      	adds	r4, r2, r1
 8001a7e:	4446      	add	r6, r8
 8001a80:	46a4      	mov	ip, r4
 8001a82:	4546      	cmp	r6, r8
 8001a84:	41a4      	sbcs	r4, r4
 8001a86:	4682      	mov	sl, r0
 8001a88:	4264      	negs	r4, r4
 8001a8a:	46a0      	mov	r8, r4
 8001a8c:	42aa      	cmp	r2, r5
 8001a8e:	4192      	sbcs	r2, r2
 8001a90:	458c      	cmp	ip, r1
 8001a92:	4189      	sbcs	r1, r1
 8001a94:	44e2      	add	sl, ip
 8001a96:	44d0      	add	r8, sl
 8001a98:	4249      	negs	r1, r1
 8001a9a:	4252      	negs	r2, r2
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	45a0      	cmp	r8, r4
 8001aa0:	41a4      	sbcs	r4, r4
 8001aa2:	4582      	cmp	sl, r0
 8001aa4:	4189      	sbcs	r1, r1
 8001aa6:	4264      	negs	r4, r4
 8001aa8:	4249      	negs	r1, r1
 8001aaa:	430c      	orrs	r4, r1
 8001aac:	4641      	mov	r1, r8
 8001aae:	0c3f      	lsrs	r7, r7, #16
 8001ab0:	19d2      	adds	r2, r2, r7
 8001ab2:	1912      	adds	r2, r2, r4
 8001ab4:	0dcc      	lsrs	r4, r1, #23
 8001ab6:	9904      	ldr	r1, [sp, #16]
 8001ab8:	0270      	lsls	r0, r6, #9
 8001aba:	4308      	orrs	r0, r1
 8001abc:	1e41      	subs	r1, r0, #1
 8001abe:	4188      	sbcs	r0, r1
 8001ac0:	4641      	mov	r1, r8
 8001ac2:	444a      	add	r2, r9
 8001ac4:	0df6      	lsrs	r6, r6, #23
 8001ac6:	0252      	lsls	r2, r2, #9
 8001ac8:	4330      	orrs	r0, r6
 8001aca:	0249      	lsls	r1, r1, #9
 8001acc:	4314      	orrs	r4, r2
 8001ace:	4308      	orrs	r0, r1
 8001ad0:	01d2      	lsls	r2, r2, #7
 8001ad2:	d535      	bpl.n	8001b40 <__aeabi_dmul+0x514>
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	0843      	lsrs	r3, r0, #1
 8001ad8:	4002      	ands	r2, r0
 8001ada:	4313      	orrs	r3, r2
 8001adc:	07e0      	lsls	r0, r4, #31
 8001ade:	4318      	orrs	r0, r3
 8001ae0:	0864      	lsrs	r4, r4, #1
 8001ae2:	e634      	b.n	800174e <__aeabi_dmul+0x122>
 8001ae4:	9b00      	ldr	r3, [sp, #0]
 8001ae6:	46a2      	mov	sl, r4
 8001ae8:	469b      	mov	fp, r3
 8001aea:	4681      	mov	r9, r0
 8001aec:	2480      	movs	r4, #128	@ 0x80
 8001aee:	4653      	mov	r3, sl
 8001af0:	0324      	lsls	r4, r4, #12
 8001af2:	431c      	orrs	r4, r3
 8001af4:	0324      	lsls	r4, r4, #12
 8001af6:	464a      	mov	r2, r9
 8001af8:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb4 <__aeabi_dmul+0x588>)
 8001afa:	0b24      	lsrs	r4, r4, #12
 8001afc:	e5ec      	b.n	80016d8 <__aeabi_dmul+0xac>
 8001afe:	f000 fca9 	bl	8002454 <__clzsi2>
 8001b02:	2315      	movs	r3, #21
 8001b04:	469c      	mov	ip, r3
 8001b06:	4484      	add	ip, r0
 8001b08:	0002      	movs	r2, r0
 8001b0a:	4663      	mov	r3, ip
 8001b0c:	3220      	adds	r2, #32
 8001b0e:	2b1c      	cmp	r3, #28
 8001b10:	dc00      	bgt.n	8001b14 <__aeabi_dmul+0x4e8>
 8001b12:	e684      	b.n	800181e <__aeabi_dmul+0x1f2>
 8001b14:	2300      	movs	r3, #0
 8001b16:	4699      	mov	r9, r3
 8001b18:	0023      	movs	r3, r4
 8001b1a:	3808      	subs	r0, #8
 8001b1c:	4083      	lsls	r3, r0
 8001b1e:	469a      	mov	sl, r3
 8001b20:	e68e      	b.n	8001840 <__aeabi_dmul+0x214>
 8001b22:	f000 fc97 	bl	8002454 <__clzsi2>
 8001b26:	0002      	movs	r2, r0
 8001b28:	0003      	movs	r3, r0
 8001b2a:	3215      	adds	r2, #21
 8001b2c:	3320      	adds	r3, #32
 8001b2e:	2a1c      	cmp	r2, #28
 8001b30:	dc00      	bgt.n	8001b34 <__aeabi_dmul+0x508>
 8001b32:	e64e      	b.n	80017d2 <__aeabi_dmul+0x1a6>
 8001b34:	0002      	movs	r2, r0
 8001b36:	0034      	movs	r4, r6
 8001b38:	3a08      	subs	r2, #8
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	4094      	lsls	r4, r2
 8001b3e:	e652      	b.n	80017e6 <__aeabi_dmul+0x1ba>
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	e604      	b.n	800174e <__aeabi_dmul+0x122>
 8001b44:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb8 <__aeabi_dmul+0x58c>)
 8001b46:	0021      	movs	r1, r4
 8001b48:	469c      	mov	ip, r3
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	9d01      	ldr	r5, [sp, #4]
 8001b4e:	40d3      	lsrs	r3, r2
 8001b50:	4465      	add	r5, ip
 8001b52:	40a9      	lsls	r1, r5
 8001b54:	4319      	orrs	r1, r3
 8001b56:	0003      	movs	r3, r0
 8001b58:	40ab      	lsls	r3, r5
 8001b5a:	1e58      	subs	r0, r3, #1
 8001b5c:	4183      	sbcs	r3, r0
 8001b5e:	4319      	orrs	r1, r3
 8001b60:	0008      	movs	r0, r1
 8001b62:	40d4      	lsrs	r4, r2
 8001b64:	074b      	lsls	r3, r1, #29
 8001b66:	d009      	beq.n	8001b7c <__aeabi_dmul+0x550>
 8001b68:	230f      	movs	r3, #15
 8001b6a:	400b      	ands	r3, r1
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d005      	beq.n	8001b7c <__aeabi_dmul+0x550>
 8001b70:	1d0b      	adds	r3, r1, #4
 8001b72:	428b      	cmp	r3, r1
 8001b74:	4180      	sbcs	r0, r0
 8001b76:	4240      	negs	r0, r0
 8001b78:	1824      	adds	r4, r4, r0
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	0223      	lsls	r3, r4, #8
 8001b7e:	d400      	bmi.n	8001b82 <__aeabi_dmul+0x556>
 8001b80:	e6d6      	b.n	8001930 <__aeabi_dmul+0x304>
 8001b82:	2301      	movs	r3, #1
 8001b84:	2400      	movs	r4, #0
 8001b86:	2200      	movs	r2, #0
 8001b88:	e5a6      	b.n	80016d8 <__aeabi_dmul+0xac>
 8001b8a:	290f      	cmp	r1, #15
 8001b8c:	d1aa      	bne.n	8001ae4 <__aeabi_dmul+0x4b8>
 8001b8e:	2380      	movs	r3, #128	@ 0x80
 8001b90:	4652      	mov	r2, sl
 8001b92:	031b      	lsls	r3, r3, #12
 8001b94:	421a      	tst	r2, r3
 8001b96:	d0a9      	beq.n	8001aec <__aeabi_dmul+0x4c0>
 8001b98:	421c      	tst	r4, r3
 8001b9a:	d1a7      	bne.n	8001aec <__aeabi_dmul+0x4c0>
 8001b9c:	431c      	orrs	r4, r3
 8001b9e:	9b00      	ldr	r3, [sp, #0]
 8001ba0:	0002      	movs	r2, r0
 8001ba2:	469b      	mov	fp, r3
 8001ba4:	4b03      	ldr	r3, [pc, #12]	@ (8001bb4 <__aeabi_dmul+0x588>)
 8001ba6:	e597      	b.n	80016d8 <__aeabi_dmul+0xac>
 8001ba8:	2400      	movs	r4, #0
 8001baa:	e6c1      	b.n	8001930 <__aeabi_dmul+0x304>
 8001bac:	2400      	movs	r4, #0
 8001bae:	4b01      	ldr	r3, [pc, #4]	@ (8001bb4 <__aeabi_dmul+0x588>)
 8001bb0:	0022      	movs	r2, r4
 8001bb2:	e591      	b.n	80016d8 <__aeabi_dmul+0xac>
 8001bb4:	000007ff 	.word	0x000007ff
 8001bb8:	0000041e 	.word	0x0000041e

08001bbc <__aeabi_dsub>:
 8001bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bbe:	464e      	mov	r6, r9
 8001bc0:	4645      	mov	r5, r8
 8001bc2:	46de      	mov	lr, fp
 8001bc4:	4657      	mov	r7, sl
 8001bc6:	b5e0      	push	{r5, r6, r7, lr}
 8001bc8:	b085      	sub	sp, #20
 8001bca:	9000      	str	r0, [sp, #0]
 8001bcc:	9101      	str	r1, [sp, #4]
 8001bce:	030c      	lsls	r4, r1, #12
 8001bd0:	004f      	lsls	r7, r1, #1
 8001bd2:	0fce      	lsrs	r6, r1, #31
 8001bd4:	0a61      	lsrs	r1, r4, #9
 8001bd6:	9c00      	ldr	r4, [sp, #0]
 8001bd8:	46b0      	mov	r8, r6
 8001bda:	0f64      	lsrs	r4, r4, #29
 8001bdc:	430c      	orrs	r4, r1
 8001bde:	9900      	ldr	r1, [sp, #0]
 8001be0:	0d7f      	lsrs	r7, r7, #21
 8001be2:	00c8      	lsls	r0, r1, #3
 8001be4:	0011      	movs	r1, r2
 8001be6:	001a      	movs	r2, r3
 8001be8:	031b      	lsls	r3, r3, #12
 8001bea:	469c      	mov	ip, r3
 8001bec:	9100      	str	r1, [sp, #0]
 8001bee:	9201      	str	r2, [sp, #4]
 8001bf0:	0051      	lsls	r1, r2, #1
 8001bf2:	0d4b      	lsrs	r3, r1, #21
 8001bf4:	4699      	mov	r9, r3
 8001bf6:	9b01      	ldr	r3, [sp, #4]
 8001bf8:	9d00      	ldr	r5, [sp, #0]
 8001bfa:	0fd9      	lsrs	r1, r3, #31
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	0f6a      	lsrs	r2, r5, #29
 8001c00:	0a5b      	lsrs	r3, r3, #9
 8001c02:	4313      	orrs	r3, r2
 8001c04:	00ea      	lsls	r2, r5, #3
 8001c06:	4694      	mov	ip, r2
 8001c08:	4693      	mov	fp, r2
 8001c0a:	4ac1      	ldr	r2, [pc, #772]	@ (8001f10 <__aeabi_dsub+0x354>)
 8001c0c:	9003      	str	r0, [sp, #12]
 8001c0e:	9302      	str	r3, [sp, #8]
 8001c10:	4591      	cmp	r9, r2
 8001c12:	d100      	bne.n	8001c16 <__aeabi_dsub+0x5a>
 8001c14:	e0cd      	b.n	8001db2 <__aeabi_dsub+0x1f6>
 8001c16:	2501      	movs	r5, #1
 8001c18:	4069      	eors	r1, r5
 8001c1a:	464d      	mov	r5, r9
 8001c1c:	1b7d      	subs	r5, r7, r5
 8001c1e:	46aa      	mov	sl, r5
 8001c20:	428e      	cmp	r6, r1
 8001c22:	d100      	bne.n	8001c26 <__aeabi_dsub+0x6a>
 8001c24:	e080      	b.n	8001d28 <__aeabi_dsub+0x16c>
 8001c26:	2d00      	cmp	r5, #0
 8001c28:	dc00      	bgt.n	8001c2c <__aeabi_dsub+0x70>
 8001c2a:	e335      	b.n	8002298 <__aeabi_dsub+0x6dc>
 8001c2c:	4649      	mov	r1, r9
 8001c2e:	2900      	cmp	r1, #0
 8001c30:	d100      	bne.n	8001c34 <__aeabi_dsub+0x78>
 8001c32:	e0df      	b.n	8001df4 <__aeabi_dsub+0x238>
 8001c34:	4297      	cmp	r7, r2
 8001c36:	d100      	bne.n	8001c3a <__aeabi_dsub+0x7e>
 8001c38:	e194      	b.n	8001f64 <__aeabi_dsub+0x3a8>
 8001c3a:	4652      	mov	r2, sl
 8001c3c:	2501      	movs	r5, #1
 8001c3e:	2a38      	cmp	r2, #56	@ 0x38
 8001c40:	dc19      	bgt.n	8001c76 <__aeabi_dsub+0xba>
 8001c42:	2280      	movs	r2, #128	@ 0x80
 8001c44:	9b02      	ldr	r3, [sp, #8]
 8001c46:	0412      	lsls	r2, r2, #16
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	9302      	str	r3, [sp, #8]
 8001c4c:	4652      	mov	r2, sl
 8001c4e:	2a1f      	cmp	r2, #31
 8001c50:	dd00      	ble.n	8001c54 <__aeabi_dsub+0x98>
 8001c52:	e1e3      	b.n	800201c <__aeabi_dsub+0x460>
 8001c54:	4653      	mov	r3, sl
 8001c56:	2220      	movs	r2, #32
 8001c58:	4661      	mov	r1, ip
 8001c5a:	9d02      	ldr	r5, [sp, #8]
 8001c5c:	1ad2      	subs	r2, r2, r3
 8001c5e:	4095      	lsls	r5, r2
 8001c60:	40d9      	lsrs	r1, r3
 8001c62:	430d      	orrs	r5, r1
 8001c64:	4661      	mov	r1, ip
 8001c66:	4091      	lsls	r1, r2
 8001c68:	000a      	movs	r2, r1
 8001c6a:	1e51      	subs	r1, r2, #1
 8001c6c:	418a      	sbcs	r2, r1
 8001c6e:	4315      	orrs	r5, r2
 8001c70:	9a02      	ldr	r2, [sp, #8]
 8001c72:	40da      	lsrs	r2, r3
 8001c74:	1aa4      	subs	r4, r4, r2
 8001c76:	1b45      	subs	r5, r0, r5
 8001c78:	42a8      	cmp	r0, r5
 8001c7a:	4180      	sbcs	r0, r0
 8001c7c:	4240      	negs	r0, r0
 8001c7e:	1a24      	subs	r4, r4, r0
 8001c80:	0223      	lsls	r3, r4, #8
 8001c82:	d400      	bmi.n	8001c86 <__aeabi_dsub+0xca>
 8001c84:	e13d      	b.n	8001f02 <__aeabi_dsub+0x346>
 8001c86:	0264      	lsls	r4, r4, #9
 8001c88:	0a64      	lsrs	r4, r4, #9
 8001c8a:	2c00      	cmp	r4, #0
 8001c8c:	d100      	bne.n	8001c90 <__aeabi_dsub+0xd4>
 8001c8e:	e147      	b.n	8001f20 <__aeabi_dsub+0x364>
 8001c90:	0020      	movs	r0, r4
 8001c92:	f000 fbdf 	bl	8002454 <__clzsi2>
 8001c96:	0003      	movs	r3, r0
 8001c98:	3b08      	subs	r3, #8
 8001c9a:	2120      	movs	r1, #32
 8001c9c:	0028      	movs	r0, r5
 8001c9e:	1aca      	subs	r2, r1, r3
 8001ca0:	40d0      	lsrs	r0, r2
 8001ca2:	409c      	lsls	r4, r3
 8001ca4:	0002      	movs	r2, r0
 8001ca6:	409d      	lsls	r5, r3
 8001ca8:	4322      	orrs	r2, r4
 8001caa:	429f      	cmp	r7, r3
 8001cac:	dd00      	ble.n	8001cb0 <__aeabi_dsub+0xf4>
 8001cae:	e177      	b.n	8001fa0 <__aeabi_dsub+0x3e4>
 8001cb0:	1bd8      	subs	r0, r3, r7
 8001cb2:	3001      	adds	r0, #1
 8001cb4:	1a09      	subs	r1, r1, r0
 8001cb6:	002c      	movs	r4, r5
 8001cb8:	408d      	lsls	r5, r1
 8001cba:	40c4      	lsrs	r4, r0
 8001cbc:	1e6b      	subs	r3, r5, #1
 8001cbe:	419d      	sbcs	r5, r3
 8001cc0:	0013      	movs	r3, r2
 8001cc2:	40c2      	lsrs	r2, r0
 8001cc4:	408b      	lsls	r3, r1
 8001cc6:	4325      	orrs	r5, r4
 8001cc8:	2700      	movs	r7, #0
 8001cca:	0014      	movs	r4, r2
 8001ccc:	431d      	orrs	r5, r3
 8001cce:	076b      	lsls	r3, r5, #29
 8001cd0:	d009      	beq.n	8001ce6 <__aeabi_dsub+0x12a>
 8001cd2:	230f      	movs	r3, #15
 8001cd4:	402b      	ands	r3, r5
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d005      	beq.n	8001ce6 <__aeabi_dsub+0x12a>
 8001cda:	1d2b      	adds	r3, r5, #4
 8001cdc:	42ab      	cmp	r3, r5
 8001cde:	41ad      	sbcs	r5, r5
 8001ce0:	426d      	negs	r5, r5
 8001ce2:	1964      	adds	r4, r4, r5
 8001ce4:	001d      	movs	r5, r3
 8001ce6:	0223      	lsls	r3, r4, #8
 8001ce8:	d400      	bmi.n	8001cec <__aeabi_dsub+0x130>
 8001cea:	e140      	b.n	8001f6e <__aeabi_dsub+0x3b2>
 8001cec:	4a88      	ldr	r2, [pc, #544]	@ (8001f10 <__aeabi_dsub+0x354>)
 8001cee:	3701      	adds	r7, #1
 8001cf0:	4297      	cmp	r7, r2
 8001cf2:	d100      	bne.n	8001cf6 <__aeabi_dsub+0x13a>
 8001cf4:	e101      	b.n	8001efa <__aeabi_dsub+0x33e>
 8001cf6:	2601      	movs	r6, #1
 8001cf8:	4643      	mov	r3, r8
 8001cfa:	4986      	ldr	r1, [pc, #536]	@ (8001f14 <__aeabi_dsub+0x358>)
 8001cfc:	08ed      	lsrs	r5, r5, #3
 8001cfe:	4021      	ands	r1, r4
 8001d00:	074a      	lsls	r2, r1, #29
 8001d02:	432a      	orrs	r2, r5
 8001d04:	057c      	lsls	r4, r7, #21
 8001d06:	024d      	lsls	r5, r1, #9
 8001d08:	0b2d      	lsrs	r5, r5, #12
 8001d0a:	0d64      	lsrs	r4, r4, #21
 8001d0c:	401e      	ands	r6, r3
 8001d0e:	0524      	lsls	r4, r4, #20
 8001d10:	432c      	orrs	r4, r5
 8001d12:	07f6      	lsls	r6, r6, #31
 8001d14:	4334      	orrs	r4, r6
 8001d16:	0010      	movs	r0, r2
 8001d18:	0021      	movs	r1, r4
 8001d1a:	b005      	add	sp, #20
 8001d1c:	bcf0      	pop	{r4, r5, r6, r7}
 8001d1e:	46bb      	mov	fp, r7
 8001d20:	46b2      	mov	sl, r6
 8001d22:	46a9      	mov	r9, r5
 8001d24:	46a0      	mov	r8, r4
 8001d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d28:	2d00      	cmp	r5, #0
 8001d2a:	dc00      	bgt.n	8001d2e <__aeabi_dsub+0x172>
 8001d2c:	e2d0      	b.n	80022d0 <__aeabi_dsub+0x714>
 8001d2e:	4649      	mov	r1, r9
 8001d30:	2900      	cmp	r1, #0
 8001d32:	d000      	beq.n	8001d36 <__aeabi_dsub+0x17a>
 8001d34:	e0d4      	b.n	8001ee0 <__aeabi_dsub+0x324>
 8001d36:	4661      	mov	r1, ip
 8001d38:	9b02      	ldr	r3, [sp, #8]
 8001d3a:	4319      	orrs	r1, r3
 8001d3c:	d100      	bne.n	8001d40 <__aeabi_dsub+0x184>
 8001d3e:	e12b      	b.n	8001f98 <__aeabi_dsub+0x3dc>
 8001d40:	1e69      	subs	r1, r5, #1
 8001d42:	2d01      	cmp	r5, #1
 8001d44:	d100      	bne.n	8001d48 <__aeabi_dsub+0x18c>
 8001d46:	e1d9      	b.n	80020fc <__aeabi_dsub+0x540>
 8001d48:	4295      	cmp	r5, r2
 8001d4a:	d100      	bne.n	8001d4e <__aeabi_dsub+0x192>
 8001d4c:	e10a      	b.n	8001f64 <__aeabi_dsub+0x3a8>
 8001d4e:	2501      	movs	r5, #1
 8001d50:	2938      	cmp	r1, #56	@ 0x38
 8001d52:	dc17      	bgt.n	8001d84 <__aeabi_dsub+0x1c8>
 8001d54:	468a      	mov	sl, r1
 8001d56:	4653      	mov	r3, sl
 8001d58:	2b1f      	cmp	r3, #31
 8001d5a:	dd00      	ble.n	8001d5e <__aeabi_dsub+0x1a2>
 8001d5c:	e1e7      	b.n	800212e <__aeabi_dsub+0x572>
 8001d5e:	2220      	movs	r2, #32
 8001d60:	1ad2      	subs	r2, r2, r3
 8001d62:	9b02      	ldr	r3, [sp, #8]
 8001d64:	4661      	mov	r1, ip
 8001d66:	4093      	lsls	r3, r2
 8001d68:	001d      	movs	r5, r3
 8001d6a:	4653      	mov	r3, sl
 8001d6c:	40d9      	lsrs	r1, r3
 8001d6e:	4663      	mov	r3, ip
 8001d70:	4093      	lsls	r3, r2
 8001d72:	001a      	movs	r2, r3
 8001d74:	430d      	orrs	r5, r1
 8001d76:	1e51      	subs	r1, r2, #1
 8001d78:	418a      	sbcs	r2, r1
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	4315      	orrs	r5, r2
 8001d7e:	9a02      	ldr	r2, [sp, #8]
 8001d80:	40da      	lsrs	r2, r3
 8001d82:	18a4      	adds	r4, r4, r2
 8001d84:	182d      	adds	r5, r5, r0
 8001d86:	4285      	cmp	r5, r0
 8001d88:	4180      	sbcs	r0, r0
 8001d8a:	4240      	negs	r0, r0
 8001d8c:	1824      	adds	r4, r4, r0
 8001d8e:	0223      	lsls	r3, r4, #8
 8001d90:	d400      	bmi.n	8001d94 <__aeabi_dsub+0x1d8>
 8001d92:	e0b6      	b.n	8001f02 <__aeabi_dsub+0x346>
 8001d94:	4b5e      	ldr	r3, [pc, #376]	@ (8001f10 <__aeabi_dsub+0x354>)
 8001d96:	3701      	adds	r7, #1
 8001d98:	429f      	cmp	r7, r3
 8001d9a:	d100      	bne.n	8001d9e <__aeabi_dsub+0x1e2>
 8001d9c:	e0ad      	b.n	8001efa <__aeabi_dsub+0x33e>
 8001d9e:	2101      	movs	r1, #1
 8001da0:	4b5c      	ldr	r3, [pc, #368]	@ (8001f14 <__aeabi_dsub+0x358>)
 8001da2:	086a      	lsrs	r2, r5, #1
 8001da4:	401c      	ands	r4, r3
 8001da6:	4029      	ands	r1, r5
 8001da8:	430a      	orrs	r2, r1
 8001daa:	07e5      	lsls	r5, r4, #31
 8001dac:	4315      	orrs	r5, r2
 8001dae:	0864      	lsrs	r4, r4, #1
 8001db0:	e78d      	b.n	8001cce <__aeabi_dsub+0x112>
 8001db2:	4a59      	ldr	r2, [pc, #356]	@ (8001f18 <__aeabi_dsub+0x35c>)
 8001db4:	9b02      	ldr	r3, [sp, #8]
 8001db6:	4692      	mov	sl, r2
 8001db8:	4662      	mov	r2, ip
 8001dba:	44ba      	add	sl, r7
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	d02c      	beq.n	8001e1a <__aeabi_dsub+0x25e>
 8001dc0:	428e      	cmp	r6, r1
 8001dc2:	d02e      	beq.n	8001e22 <__aeabi_dsub+0x266>
 8001dc4:	4652      	mov	r2, sl
 8001dc6:	2a00      	cmp	r2, #0
 8001dc8:	d060      	beq.n	8001e8c <__aeabi_dsub+0x2d0>
 8001dca:	2f00      	cmp	r7, #0
 8001dcc:	d100      	bne.n	8001dd0 <__aeabi_dsub+0x214>
 8001dce:	e0db      	b.n	8001f88 <__aeabi_dsub+0x3cc>
 8001dd0:	4663      	mov	r3, ip
 8001dd2:	000e      	movs	r6, r1
 8001dd4:	9c02      	ldr	r4, [sp, #8]
 8001dd6:	08d8      	lsrs	r0, r3, #3
 8001dd8:	0762      	lsls	r2, r4, #29
 8001dda:	4302      	orrs	r2, r0
 8001ddc:	08e4      	lsrs	r4, r4, #3
 8001dde:	0013      	movs	r3, r2
 8001de0:	4323      	orrs	r3, r4
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x22a>
 8001de4:	e254      	b.n	8002290 <__aeabi_dsub+0x6d4>
 8001de6:	2580      	movs	r5, #128	@ 0x80
 8001de8:	032d      	lsls	r5, r5, #12
 8001dea:	4325      	orrs	r5, r4
 8001dec:	032d      	lsls	r5, r5, #12
 8001dee:	4c48      	ldr	r4, [pc, #288]	@ (8001f10 <__aeabi_dsub+0x354>)
 8001df0:	0b2d      	lsrs	r5, r5, #12
 8001df2:	e78c      	b.n	8001d0e <__aeabi_dsub+0x152>
 8001df4:	4661      	mov	r1, ip
 8001df6:	9b02      	ldr	r3, [sp, #8]
 8001df8:	4319      	orrs	r1, r3
 8001dfa:	d100      	bne.n	8001dfe <__aeabi_dsub+0x242>
 8001dfc:	e0cc      	b.n	8001f98 <__aeabi_dsub+0x3dc>
 8001dfe:	0029      	movs	r1, r5
 8001e00:	3901      	subs	r1, #1
 8001e02:	2d01      	cmp	r5, #1
 8001e04:	d100      	bne.n	8001e08 <__aeabi_dsub+0x24c>
 8001e06:	e188      	b.n	800211a <__aeabi_dsub+0x55e>
 8001e08:	4295      	cmp	r5, r2
 8001e0a:	d100      	bne.n	8001e0e <__aeabi_dsub+0x252>
 8001e0c:	e0aa      	b.n	8001f64 <__aeabi_dsub+0x3a8>
 8001e0e:	2501      	movs	r5, #1
 8001e10:	2938      	cmp	r1, #56	@ 0x38
 8001e12:	dd00      	ble.n	8001e16 <__aeabi_dsub+0x25a>
 8001e14:	e72f      	b.n	8001c76 <__aeabi_dsub+0xba>
 8001e16:	468a      	mov	sl, r1
 8001e18:	e718      	b.n	8001c4c <__aeabi_dsub+0x90>
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	4051      	eors	r1, r2
 8001e1e:	428e      	cmp	r6, r1
 8001e20:	d1d0      	bne.n	8001dc4 <__aeabi_dsub+0x208>
 8001e22:	4653      	mov	r3, sl
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d100      	bne.n	8001e2a <__aeabi_dsub+0x26e>
 8001e28:	e0be      	b.n	8001fa8 <__aeabi_dsub+0x3ec>
 8001e2a:	2f00      	cmp	r7, #0
 8001e2c:	d000      	beq.n	8001e30 <__aeabi_dsub+0x274>
 8001e2e:	e138      	b.n	80020a2 <__aeabi_dsub+0x4e6>
 8001e30:	46ca      	mov	sl, r9
 8001e32:	0022      	movs	r2, r4
 8001e34:	4302      	orrs	r2, r0
 8001e36:	d100      	bne.n	8001e3a <__aeabi_dsub+0x27e>
 8001e38:	e1e2      	b.n	8002200 <__aeabi_dsub+0x644>
 8001e3a:	4653      	mov	r3, sl
 8001e3c:	1e59      	subs	r1, r3, #1
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d100      	bne.n	8001e44 <__aeabi_dsub+0x288>
 8001e42:	e20d      	b.n	8002260 <__aeabi_dsub+0x6a4>
 8001e44:	4a32      	ldr	r2, [pc, #200]	@ (8001f10 <__aeabi_dsub+0x354>)
 8001e46:	4592      	cmp	sl, r2
 8001e48:	d100      	bne.n	8001e4c <__aeabi_dsub+0x290>
 8001e4a:	e1d2      	b.n	80021f2 <__aeabi_dsub+0x636>
 8001e4c:	2701      	movs	r7, #1
 8001e4e:	2938      	cmp	r1, #56	@ 0x38
 8001e50:	dc13      	bgt.n	8001e7a <__aeabi_dsub+0x2be>
 8001e52:	291f      	cmp	r1, #31
 8001e54:	dd00      	ble.n	8001e58 <__aeabi_dsub+0x29c>
 8001e56:	e1ee      	b.n	8002236 <__aeabi_dsub+0x67a>
 8001e58:	2220      	movs	r2, #32
 8001e5a:	9b02      	ldr	r3, [sp, #8]
 8001e5c:	1a52      	subs	r2, r2, r1
 8001e5e:	0025      	movs	r5, r4
 8001e60:	0007      	movs	r7, r0
 8001e62:	469a      	mov	sl, r3
 8001e64:	40cc      	lsrs	r4, r1
 8001e66:	4090      	lsls	r0, r2
 8001e68:	4095      	lsls	r5, r2
 8001e6a:	40cf      	lsrs	r7, r1
 8001e6c:	44a2      	add	sl, r4
 8001e6e:	1e42      	subs	r2, r0, #1
 8001e70:	4190      	sbcs	r0, r2
 8001e72:	4653      	mov	r3, sl
 8001e74:	432f      	orrs	r7, r5
 8001e76:	4307      	orrs	r7, r0
 8001e78:	9302      	str	r3, [sp, #8]
 8001e7a:	003d      	movs	r5, r7
 8001e7c:	4465      	add	r5, ip
 8001e7e:	4565      	cmp	r5, ip
 8001e80:	4192      	sbcs	r2, r2
 8001e82:	9b02      	ldr	r3, [sp, #8]
 8001e84:	4252      	negs	r2, r2
 8001e86:	464f      	mov	r7, r9
 8001e88:	18d4      	adds	r4, r2, r3
 8001e8a:	e780      	b.n	8001d8e <__aeabi_dsub+0x1d2>
 8001e8c:	4a23      	ldr	r2, [pc, #140]	@ (8001f1c <__aeabi_dsub+0x360>)
 8001e8e:	1c7d      	adds	r5, r7, #1
 8001e90:	4215      	tst	r5, r2
 8001e92:	d000      	beq.n	8001e96 <__aeabi_dsub+0x2da>
 8001e94:	e0aa      	b.n	8001fec <__aeabi_dsub+0x430>
 8001e96:	4662      	mov	r2, ip
 8001e98:	0025      	movs	r5, r4
 8001e9a:	9b02      	ldr	r3, [sp, #8]
 8001e9c:	4305      	orrs	r5, r0
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	2f00      	cmp	r7, #0
 8001ea2:	d000      	beq.n	8001ea6 <__aeabi_dsub+0x2ea>
 8001ea4:	e0f5      	b.n	8002092 <__aeabi_dsub+0x4d6>
 8001ea6:	2d00      	cmp	r5, #0
 8001ea8:	d100      	bne.n	8001eac <__aeabi_dsub+0x2f0>
 8001eaa:	e16b      	b.n	8002184 <__aeabi_dsub+0x5c8>
 8001eac:	2a00      	cmp	r2, #0
 8001eae:	d100      	bne.n	8001eb2 <__aeabi_dsub+0x2f6>
 8001eb0:	e152      	b.n	8002158 <__aeabi_dsub+0x59c>
 8001eb2:	4663      	mov	r3, ip
 8001eb4:	1ac5      	subs	r5, r0, r3
 8001eb6:	9b02      	ldr	r3, [sp, #8]
 8001eb8:	1ae2      	subs	r2, r4, r3
 8001eba:	42a8      	cmp	r0, r5
 8001ebc:	419b      	sbcs	r3, r3
 8001ebe:	425b      	negs	r3, r3
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	021a      	lsls	r2, r3, #8
 8001ec4:	d400      	bmi.n	8001ec8 <__aeabi_dsub+0x30c>
 8001ec6:	e1d5      	b.n	8002274 <__aeabi_dsub+0x6b8>
 8001ec8:	4663      	mov	r3, ip
 8001eca:	1a1d      	subs	r5, r3, r0
 8001ecc:	45ac      	cmp	ip, r5
 8001ece:	4192      	sbcs	r2, r2
 8001ed0:	2601      	movs	r6, #1
 8001ed2:	9b02      	ldr	r3, [sp, #8]
 8001ed4:	4252      	negs	r2, r2
 8001ed6:	1b1c      	subs	r4, r3, r4
 8001ed8:	4688      	mov	r8, r1
 8001eda:	1aa4      	subs	r4, r4, r2
 8001edc:	400e      	ands	r6, r1
 8001ede:	e6f6      	b.n	8001cce <__aeabi_dsub+0x112>
 8001ee0:	4297      	cmp	r7, r2
 8001ee2:	d03f      	beq.n	8001f64 <__aeabi_dsub+0x3a8>
 8001ee4:	4652      	mov	r2, sl
 8001ee6:	2501      	movs	r5, #1
 8001ee8:	2a38      	cmp	r2, #56	@ 0x38
 8001eea:	dd00      	ble.n	8001eee <__aeabi_dsub+0x332>
 8001eec:	e74a      	b.n	8001d84 <__aeabi_dsub+0x1c8>
 8001eee:	2280      	movs	r2, #128	@ 0x80
 8001ef0:	9b02      	ldr	r3, [sp, #8]
 8001ef2:	0412      	lsls	r2, r2, #16
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	9302      	str	r3, [sp, #8]
 8001ef8:	e72d      	b.n	8001d56 <__aeabi_dsub+0x19a>
 8001efa:	003c      	movs	r4, r7
 8001efc:	2500      	movs	r5, #0
 8001efe:	2200      	movs	r2, #0
 8001f00:	e705      	b.n	8001d0e <__aeabi_dsub+0x152>
 8001f02:	2307      	movs	r3, #7
 8001f04:	402b      	ands	r3, r5
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d000      	beq.n	8001f0c <__aeabi_dsub+0x350>
 8001f0a:	e6e2      	b.n	8001cd2 <__aeabi_dsub+0x116>
 8001f0c:	e06b      	b.n	8001fe6 <__aeabi_dsub+0x42a>
 8001f0e:	46c0      	nop			@ (mov r8, r8)
 8001f10:	000007ff 	.word	0x000007ff
 8001f14:	ff7fffff 	.word	0xff7fffff
 8001f18:	fffff801 	.word	0xfffff801
 8001f1c:	000007fe 	.word	0x000007fe
 8001f20:	0028      	movs	r0, r5
 8001f22:	f000 fa97 	bl	8002454 <__clzsi2>
 8001f26:	0003      	movs	r3, r0
 8001f28:	3318      	adds	r3, #24
 8001f2a:	2b1f      	cmp	r3, #31
 8001f2c:	dc00      	bgt.n	8001f30 <__aeabi_dsub+0x374>
 8001f2e:	e6b4      	b.n	8001c9a <__aeabi_dsub+0xde>
 8001f30:	002a      	movs	r2, r5
 8001f32:	3808      	subs	r0, #8
 8001f34:	4082      	lsls	r2, r0
 8001f36:	429f      	cmp	r7, r3
 8001f38:	dd00      	ble.n	8001f3c <__aeabi_dsub+0x380>
 8001f3a:	e0b9      	b.n	80020b0 <__aeabi_dsub+0x4f4>
 8001f3c:	1bdb      	subs	r3, r3, r7
 8001f3e:	1c58      	adds	r0, r3, #1
 8001f40:	281f      	cmp	r0, #31
 8001f42:	dc00      	bgt.n	8001f46 <__aeabi_dsub+0x38a>
 8001f44:	e1a0      	b.n	8002288 <__aeabi_dsub+0x6cc>
 8001f46:	0015      	movs	r5, r2
 8001f48:	3b1f      	subs	r3, #31
 8001f4a:	40dd      	lsrs	r5, r3
 8001f4c:	2820      	cmp	r0, #32
 8001f4e:	d005      	beq.n	8001f5c <__aeabi_dsub+0x3a0>
 8001f50:	2340      	movs	r3, #64	@ 0x40
 8001f52:	1a1b      	subs	r3, r3, r0
 8001f54:	409a      	lsls	r2, r3
 8001f56:	1e53      	subs	r3, r2, #1
 8001f58:	419a      	sbcs	r2, r3
 8001f5a:	4315      	orrs	r5, r2
 8001f5c:	2307      	movs	r3, #7
 8001f5e:	2700      	movs	r7, #0
 8001f60:	402b      	ands	r3, r5
 8001f62:	e7d0      	b.n	8001f06 <__aeabi_dsub+0x34a>
 8001f64:	08c0      	lsrs	r0, r0, #3
 8001f66:	0762      	lsls	r2, r4, #29
 8001f68:	4302      	orrs	r2, r0
 8001f6a:	08e4      	lsrs	r4, r4, #3
 8001f6c:	e737      	b.n	8001dde <__aeabi_dsub+0x222>
 8001f6e:	08ea      	lsrs	r2, r5, #3
 8001f70:	0763      	lsls	r3, r4, #29
 8001f72:	431a      	orrs	r2, r3
 8001f74:	4bd3      	ldr	r3, [pc, #844]	@ (80022c4 <__aeabi_dsub+0x708>)
 8001f76:	08e4      	lsrs	r4, r4, #3
 8001f78:	429f      	cmp	r7, r3
 8001f7a:	d100      	bne.n	8001f7e <__aeabi_dsub+0x3c2>
 8001f7c:	e72f      	b.n	8001dde <__aeabi_dsub+0x222>
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	0b25      	lsrs	r5, r4, #12
 8001f82:	057c      	lsls	r4, r7, #21
 8001f84:	0d64      	lsrs	r4, r4, #21
 8001f86:	e6c2      	b.n	8001d0e <__aeabi_dsub+0x152>
 8001f88:	46ca      	mov	sl, r9
 8001f8a:	0022      	movs	r2, r4
 8001f8c:	4302      	orrs	r2, r0
 8001f8e:	d158      	bne.n	8002042 <__aeabi_dsub+0x486>
 8001f90:	4663      	mov	r3, ip
 8001f92:	000e      	movs	r6, r1
 8001f94:	9c02      	ldr	r4, [sp, #8]
 8001f96:	9303      	str	r3, [sp, #12]
 8001f98:	9b03      	ldr	r3, [sp, #12]
 8001f9a:	4657      	mov	r7, sl
 8001f9c:	08da      	lsrs	r2, r3, #3
 8001f9e:	e7e7      	b.n	8001f70 <__aeabi_dsub+0x3b4>
 8001fa0:	4cc9      	ldr	r4, [pc, #804]	@ (80022c8 <__aeabi_dsub+0x70c>)
 8001fa2:	1aff      	subs	r7, r7, r3
 8001fa4:	4014      	ands	r4, r2
 8001fa6:	e692      	b.n	8001cce <__aeabi_dsub+0x112>
 8001fa8:	4dc8      	ldr	r5, [pc, #800]	@ (80022cc <__aeabi_dsub+0x710>)
 8001faa:	1c7a      	adds	r2, r7, #1
 8001fac:	422a      	tst	r2, r5
 8001fae:	d000      	beq.n	8001fb2 <__aeabi_dsub+0x3f6>
 8001fb0:	e084      	b.n	80020bc <__aeabi_dsub+0x500>
 8001fb2:	0022      	movs	r2, r4
 8001fb4:	4302      	orrs	r2, r0
 8001fb6:	2f00      	cmp	r7, #0
 8001fb8:	d000      	beq.n	8001fbc <__aeabi_dsub+0x400>
 8001fba:	e0ef      	b.n	800219c <__aeabi_dsub+0x5e0>
 8001fbc:	2a00      	cmp	r2, #0
 8001fbe:	d100      	bne.n	8001fc2 <__aeabi_dsub+0x406>
 8001fc0:	e0e5      	b.n	800218e <__aeabi_dsub+0x5d2>
 8001fc2:	4662      	mov	r2, ip
 8001fc4:	9902      	ldr	r1, [sp, #8]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	d100      	bne.n	8001fcc <__aeabi_dsub+0x410>
 8001fca:	e0c5      	b.n	8002158 <__aeabi_dsub+0x59c>
 8001fcc:	4663      	mov	r3, ip
 8001fce:	18c5      	adds	r5, r0, r3
 8001fd0:	468c      	mov	ip, r1
 8001fd2:	4285      	cmp	r5, r0
 8001fd4:	4180      	sbcs	r0, r0
 8001fd6:	4464      	add	r4, ip
 8001fd8:	4240      	negs	r0, r0
 8001fda:	1824      	adds	r4, r4, r0
 8001fdc:	0223      	lsls	r3, r4, #8
 8001fde:	d502      	bpl.n	8001fe6 <__aeabi_dsub+0x42a>
 8001fe0:	4bb9      	ldr	r3, [pc, #740]	@ (80022c8 <__aeabi_dsub+0x70c>)
 8001fe2:	3701      	adds	r7, #1
 8001fe4:	401c      	ands	r4, r3
 8001fe6:	46ba      	mov	sl, r7
 8001fe8:	9503      	str	r5, [sp, #12]
 8001fea:	e7d5      	b.n	8001f98 <__aeabi_dsub+0x3dc>
 8001fec:	4662      	mov	r2, ip
 8001fee:	1a85      	subs	r5, r0, r2
 8001ff0:	42a8      	cmp	r0, r5
 8001ff2:	4192      	sbcs	r2, r2
 8001ff4:	4252      	negs	r2, r2
 8001ff6:	4691      	mov	r9, r2
 8001ff8:	9b02      	ldr	r3, [sp, #8]
 8001ffa:	1ae3      	subs	r3, r4, r3
 8001ffc:	001a      	movs	r2, r3
 8001ffe:	464b      	mov	r3, r9
 8002000:	1ad2      	subs	r2, r2, r3
 8002002:	0013      	movs	r3, r2
 8002004:	4691      	mov	r9, r2
 8002006:	021a      	lsls	r2, r3, #8
 8002008:	d46c      	bmi.n	80020e4 <__aeabi_dsub+0x528>
 800200a:	464a      	mov	r2, r9
 800200c:	464c      	mov	r4, r9
 800200e:	432a      	orrs	r2, r5
 8002010:	d000      	beq.n	8002014 <__aeabi_dsub+0x458>
 8002012:	e63a      	b.n	8001c8a <__aeabi_dsub+0xce>
 8002014:	2600      	movs	r6, #0
 8002016:	2400      	movs	r4, #0
 8002018:	2500      	movs	r5, #0
 800201a:	e678      	b.n	8001d0e <__aeabi_dsub+0x152>
 800201c:	9902      	ldr	r1, [sp, #8]
 800201e:	4653      	mov	r3, sl
 8002020:	000d      	movs	r5, r1
 8002022:	3a20      	subs	r2, #32
 8002024:	40d5      	lsrs	r5, r2
 8002026:	2b20      	cmp	r3, #32
 8002028:	d006      	beq.n	8002038 <__aeabi_dsub+0x47c>
 800202a:	2240      	movs	r2, #64	@ 0x40
 800202c:	1ad2      	subs	r2, r2, r3
 800202e:	000b      	movs	r3, r1
 8002030:	4093      	lsls	r3, r2
 8002032:	4662      	mov	r2, ip
 8002034:	431a      	orrs	r2, r3
 8002036:	4693      	mov	fp, r2
 8002038:	465b      	mov	r3, fp
 800203a:	1e5a      	subs	r2, r3, #1
 800203c:	4193      	sbcs	r3, r2
 800203e:	431d      	orrs	r5, r3
 8002040:	e619      	b.n	8001c76 <__aeabi_dsub+0xba>
 8002042:	4653      	mov	r3, sl
 8002044:	1e5a      	subs	r2, r3, #1
 8002046:	2b01      	cmp	r3, #1
 8002048:	d100      	bne.n	800204c <__aeabi_dsub+0x490>
 800204a:	e0c6      	b.n	80021da <__aeabi_dsub+0x61e>
 800204c:	4e9d      	ldr	r6, [pc, #628]	@ (80022c4 <__aeabi_dsub+0x708>)
 800204e:	45b2      	cmp	sl, r6
 8002050:	d100      	bne.n	8002054 <__aeabi_dsub+0x498>
 8002052:	e6bd      	b.n	8001dd0 <__aeabi_dsub+0x214>
 8002054:	4688      	mov	r8, r1
 8002056:	000e      	movs	r6, r1
 8002058:	2501      	movs	r5, #1
 800205a:	2a38      	cmp	r2, #56	@ 0x38
 800205c:	dc10      	bgt.n	8002080 <__aeabi_dsub+0x4c4>
 800205e:	2a1f      	cmp	r2, #31
 8002060:	dc7f      	bgt.n	8002162 <__aeabi_dsub+0x5a6>
 8002062:	2120      	movs	r1, #32
 8002064:	0025      	movs	r5, r4
 8002066:	1a89      	subs	r1, r1, r2
 8002068:	0007      	movs	r7, r0
 800206a:	4088      	lsls	r0, r1
 800206c:	408d      	lsls	r5, r1
 800206e:	40d7      	lsrs	r7, r2
 8002070:	40d4      	lsrs	r4, r2
 8002072:	1e41      	subs	r1, r0, #1
 8002074:	4188      	sbcs	r0, r1
 8002076:	9b02      	ldr	r3, [sp, #8]
 8002078:	433d      	orrs	r5, r7
 800207a:	1b1b      	subs	r3, r3, r4
 800207c:	4305      	orrs	r5, r0
 800207e:	9302      	str	r3, [sp, #8]
 8002080:	4662      	mov	r2, ip
 8002082:	1b55      	subs	r5, r2, r5
 8002084:	45ac      	cmp	ip, r5
 8002086:	4192      	sbcs	r2, r2
 8002088:	9b02      	ldr	r3, [sp, #8]
 800208a:	4252      	negs	r2, r2
 800208c:	464f      	mov	r7, r9
 800208e:	1a9c      	subs	r4, r3, r2
 8002090:	e5f6      	b.n	8001c80 <__aeabi_dsub+0xc4>
 8002092:	2d00      	cmp	r5, #0
 8002094:	d000      	beq.n	8002098 <__aeabi_dsub+0x4dc>
 8002096:	e0b7      	b.n	8002208 <__aeabi_dsub+0x64c>
 8002098:	2a00      	cmp	r2, #0
 800209a:	d100      	bne.n	800209e <__aeabi_dsub+0x4e2>
 800209c:	e0f0      	b.n	8002280 <__aeabi_dsub+0x6c4>
 800209e:	2601      	movs	r6, #1
 80020a0:	400e      	ands	r6, r1
 80020a2:	4663      	mov	r3, ip
 80020a4:	9802      	ldr	r0, [sp, #8]
 80020a6:	08d9      	lsrs	r1, r3, #3
 80020a8:	0742      	lsls	r2, r0, #29
 80020aa:	430a      	orrs	r2, r1
 80020ac:	08c4      	lsrs	r4, r0, #3
 80020ae:	e696      	b.n	8001dde <__aeabi_dsub+0x222>
 80020b0:	4c85      	ldr	r4, [pc, #532]	@ (80022c8 <__aeabi_dsub+0x70c>)
 80020b2:	1aff      	subs	r7, r7, r3
 80020b4:	4014      	ands	r4, r2
 80020b6:	0762      	lsls	r2, r4, #29
 80020b8:	08e4      	lsrs	r4, r4, #3
 80020ba:	e760      	b.n	8001f7e <__aeabi_dsub+0x3c2>
 80020bc:	4981      	ldr	r1, [pc, #516]	@ (80022c4 <__aeabi_dsub+0x708>)
 80020be:	428a      	cmp	r2, r1
 80020c0:	d100      	bne.n	80020c4 <__aeabi_dsub+0x508>
 80020c2:	e0c9      	b.n	8002258 <__aeabi_dsub+0x69c>
 80020c4:	4663      	mov	r3, ip
 80020c6:	18c1      	adds	r1, r0, r3
 80020c8:	4281      	cmp	r1, r0
 80020ca:	4180      	sbcs	r0, r0
 80020cc:	9b02      	ldr	r3, [sp, #8]
 80020ce:	4240      	negs	r0, r0
 80020d0:	18e3      	adds	r3, r4, r3
 80020d2:	181b      	adds	r3, r3, r0
 80020d4:	07dd      	lsls	r5, r3, #31
 80020d6:	085c      	lsrs	r4, r3, #1
 80020d8:	2307      	movs	r3, #7
 80020da:	0849      	lsrs	r1, r1, #1
 80020dc:	430d      	orrs	r5, r1
 80020de:	0017      	movs	r7, r2
 80020e0:	402b      	ands	r3, r5
 80020e2:	e710      	b.n	8001f06 <__aeabi_dsub+0x34a>
 80020e4:	4663      	mov	r3, ip
 80020e6:	1a1d      	subs	r5, r3, r0
 80020e8:	45ac      	cmp	ip, r5
 80020ea:	4192      	sbcs	r2, r2
 80020ec:	2601      	movs	r6, #1
 80020ee:	9b02      	ldr	r3, [sp, #8]
 80020f0:	4252      	negs	r2, r2
 80020f2:	1b1c      	subs	r4, r3, r4
 80020f4:	4688      	mov	r8, r1
 80020f6:	1aa4      	subs	r4, r4, r2
 80020f8:	400e      	ands	r6, r1
 80020fa:	e5c6      	b.n	8001c8a <__aeabi_dsub+0xce>
 80020fc:	4663      	mov	r3, ip
 80020fe:	18c5      	adds	r5, r0, r3
 8002100:	9b02      	ldr	r3, [sp, #8]
 8002102:	4285      	cmp	r5, r0
 8002104:	4180      	sbcs	r0, r0
 8002106:	469c      	mov	ip, r3
 8002108:	4240      	negs	r0, r0
 800210a:	4464      	add	r4, ip
 800210c:	1824      	adds	r4, r4, r0
 800210e:	2701      	movs	r7, #1
 8002110:	0223      	lsls	r3, r4, #8
 8002112:	d400      	bmi.n	8002116 <__aeabi_dsub+0x55a>
 8002114:	e6f5      	b.n	8001f02 <__aeabi_dsub+0x346>
 8002116:	2702      	movs	r7, #2
 8002118:	e641      	b.n	8001d9e <__aeabi_dsub+0x1e2>
 800211a:	4663      	mov	r3, ip
 800211c:	1ac5      	subs	r5, r0, r3
 800211e:	42a8      	cmp	r0, r5
 8002120:	4180      	sbcs	r0, r0
 8002122:	9b02      	ldr	r3, [sp, #8]
 8002124:	4240      	negs	r0, r0
 8002126:	1ae4      	subs	r4, r4, r3
 8002128:	2701      	movs	r7, #1
 800212a:	1a24      	subs	r4, r4, r0
 800212c:	e5a8      	b.n	8001c80 <__aeabi_dsub+0xc4>
 800212e:	9d02      	ldr	r5, [sp, #8]
 8002130:	4652      	mov	r2, sl
 8002132:	002b      	movs	r3, r5
 8002134:	3a20      	subs	r2, #32
 8002136:	40d3      	lsrs	r3, r2
 8002138:	0019      	movs	r1, r3
 800213a:	4653      	mov	r3, sl
 800213c:	2b20      	cmp	r3, #32
 800213e:	d006      	beq.n	800214e <__aeabi_dsub+0x592>
 8002140:	2240      	movs	r2, #64	@ 0x40
 8002142:	1ad2      	subs	r2, r2, r3
 8002144:	002b      	movs	r3, r5
 8002146:	4093      	lsls	r3, r2
 8002148:	4662      	mov	r2, ip
 800214a:	431a      	orrs	r2, r3
 800214c:	4693      	mov	fp, r2
 800214e:	465d      	mov	r5, fp
 8002150:	1e6b      	subs	r3, r5, #1
 8002152:	419d      	sbcs	r5, r3
 8002154:	430d      	orrs	r5, r1
 8002156:	e615      	b.n	8001d84 <__aeabi_dsub+0x1c8>
 8002158:	0762      	lsls	r2, r4, #29
 800215a:	08c0      	lsrs	r0, r0, #3
 800215c:	4302      	orrs	r2, r0
 800215e:	08e4      	lsrs	r4, r4, #3
 8002160:	e70d      	b.n	8001f7e <__aeabi_dsub+0x3c2>
 8002162:	0011      	movs	r1, r2
 8002164:	0027      	movs	r7, r4
 8002166:	3920      	subs	r1, #32
 8002168:	40cf      	lsrs	r7, r1
 800216a:	2a20      	cmp	r2, #32
 800216c:	d005      	beq.n	800217a <__aeabi_dsub+0x5be>
 800216e:	2140      	movs	r1, #64	@ 0x40
 8002170:	1a8a      	subs	r2, r1, r2
 8002172:	4094      	lsls	r4, r2
 8002174:	0025      	movs	r5, r4
 8002176:	4305      	orrs	r5, r0
 8002178:	9503      	str	r5, [sp, #12]
 800217a:	9d03      	ldr	r5, [sp, #12]
 800217c:	1e6a      	subs	r2, r5, #1
 800217e:	4195      	sbcs	r5, r2
 8002180:	433d      	orrs	r5, r7
 8002182:	e77d      	b.n	8002080 <__aeabi_dsub+0x4c4>
 8002184:	2a00      	cmp	r2, #0
 8002186:	d100      	bne.n	800218a <__aeabi_dsub+0x5ce>
 8002188:	e744      	b.n	8002014 <__aeabi_dsub+0x458>
 800218a:	2601      	movs	r6, #1
 800218c:	400e      	ands	r6, r1
 800218e:	4663      	mov	r3, ip
 8002190:	08d9      	lsrs	r1, r3, #3
 8002192:	9b02      	ldr	r3, [sp, #8]
 8002194:	075a      	lsls	r2, r3, #29
 8002196:	430a      	orrs	r2, r1
 8002198:	08dc      	lsrs	r4, r3, #3
 800219a:	e6f0      	b.n	8001f7e <__aeabi_dsub+0x3c2>
 800219c:	2a00      	cmp	r2, #0
 800219e:	d028      	beq.n	80021f2 <__aeabi_dsub+0x636>
 80021a0:	4662      	mov	r2, ip
 80021a2:	9f02      	ldr	r7, [sp, #8]
 80021a4:	08c0      	lsrs	r0, r0, #3
 80021a6:	433a      	orrs	r2, r7
 80021a8:	d100      	bne.n	80021ac <__aeabi_dsub+0x5f0>
 80021aa:	e6dc      	b.n	8001f66 <__aeabi_dsub+0x3aa>
 80021ac:	0762      	lsls	r2, r4, #29
 80021ae:	4310      	orrs	r0, r2
 80021b0:	2280      	movs	r2, #128	@ 0x80
 80021b2:	08e4      	lsrs	r4, r4, #3
 80021b4:	0312      	lsls	r2, r2, #12
 80021b6:	4214      	tst	r4, r2
 80021b8:	d009      	beq.n	80021ce <__aeabi_dsub+0x612>
 80021ba:	08fd      	lsrs	r5, r7, #3
 80021bc:	4215      	tst	r5, r2
 80021be:	d106      	bne.n	80021ce <__aeabi_dsub+0x612>
 80021c0:	4663      	mov	r3, ip
 80021c2:	2601      	movs	r6, #1
 80021c4:	002c      	movs	r4, r5
 80021c6:	08d8      	lsrs	r0, r3, #3
 80021c8:	077b      	lsls	r3, r7, #29
 80021ca:	4318      	orrs	r0, r3
 80021cc:	400e      	ands	r6, r1
 80021ce:	0f42      	lsrs	r2, r0, #29
 80021d0:	00c0      	lsls	r0, r0, #3
 80021d2:	08c0      	lsrs	r0, r0, #3
 80021d4:	0752      	lsls	r2, r2, #29
 80021d6:	4302      	orrs	r2, r0
 80021d8:	e601      	b.n	8001dde <__aeabi_dsub+0x222>
 80021da:	4663      	mov	r3, ip
 80021dc:	1a1d      	subs	r5, r3, r0
 80021de:	45ac      	cmp	ip, r5
 80021e0:	4192      	sbcs	r2, r2
 80021e2:	9b02      	ldr	r3, [sp, #8]
 80021e4:	4252      	negs	r2, r2
 80021e6:	1b1c      	subs	r4, r3, r4
 80021e8:	000e      	movs	r6, r1
 80021ea:	4688      	mov	r8, r1
 80021ec:	2701      	movs	r7, #1
 80021ee:	1aa4      	subs	r4, r4, r2
 80021f0:	e546      	b.n	8001c80 <__aeabi_dsub+0xc4>
 80021f2:	4663      	mov	r3, ip
 80021f4:	08d9      	lsrs	r1, r3, #3
 80021f6:	9b02      	ldr	r3, [sp, #8]
 80021f8:	075a      	lsls	r2, r3, #29
 80021fa:	430a      	orrs	r2, r1
 80021fc:	08dc      	lsrs	r4, r3, #3
 80021fe:	e5ee      	b.n	8001dde <__aeabi_dsub+0x222>
 8002200:	4663      	mov	r3, ip
 8002202:	9c02      	ldr	r4, [sp, #8]
 8002204:	9303      	str	r3, [sp, #12]
 8002206:	e6c7      	b.n	8001f98 <__aeabi_dsub+0x3dc>
 8002208:	08c0      	lsrs	r0, r0, #3
 800220a:	2a00      	cmp	r2, #0
 800220c:	d100      	bne.n	8002210 <__aeabi_dsub+0x654>
 800220e:	e6aa      	b.n	8001f66 <__aeabi_dsub+0x3aa>
 8002210:	0762      	lsls	r2, r4, #29
 8002212:	4310      	orrs	r0, r2
 8002214:	2280      	movs	r2, #128	@ 0x80
 8002216:	08e4      	lsrs	r4, r4, #3
 8002218:	0312      	lsls	r2, r2, #12
 800221a:	4214      	tst	r4, r2
 800221c:	d0d7      	beq.n	80021ce <__aeabi_dsub+0x612>
 800221e:	9f02      	ldr	r7, [sp, #8]
 8002220:	08fd      	lsrs	r5, r7, #3
 8002222:	4215      	tst	r5, r2
 8002224:	d1d3      	bne.n	80021ce <__aeabi_dsub+0x612>
 8002226:	4663      	mov	r3, ip
 8002228:	2601      	movs	r6, #1
 800222a:	08d8      	lsrs	r0, r3, #3
 800222c:	077b      	lsls	r3, r7, #29
 800222e:	002c      	movs	r4, r5
 8002230:	4318      	orrs	r0, r3
 8002232:	400e      	ands	r6, r1
 8002234:	e7cb      	b.n	80021ce <__aeabi_dsub+0x612>
 8002236:	000a      	movs	r2, r1
 8002238:	0027      	movs	r7, r4
 800223a:	3a20      	subs	r2, #32
 800223c:	40d7      	lsrs	r7, r2
 800223e:	2920      	cmp	r1, #32
 8002240:	d005      	beq.n	800224e <__aeabi_dsub+0x692>
 8002242:	2240      	movs	r2, #64	@ 0x40
 8002244:	1a52      	subs	r2, r2, r1
 8002246:	4094      	lsls	r4, r2
 8002248:	0025      	movs	r5, r4
 800224a:	4305      	orrs	r5, r0
 800224c:	9503      	str	r5, [sp, #12]
 800224e:	9d03      	ldr	r5, [sp, #12]
 8002250:	1e6a      	subs	r2, r5, #1
 8002252:	4195      	sbcs	r5, r2
 8002254:	432f      	orrs	r7, r5
 8002256:	e610      	b.n	8001e7a <__aeabi_dsub+0x2be>
 8002258:	0014      	movs	r4, r2
 800225a:	2500      	movs	r5, #0
 800225c:	2200      	movs	r2, #0
 800225e:	e556      	b.n	8001d0e <__aeabi_dsub+0x152>
 8002260:	9b02      	ldr	r3, [sp, #8]
 8002262:	4460      	add	r0, ip
 8002264:	4699      	mov	r9, r3
 8002266:	4560      	cmp	r0, ip
 8002268:	4192      	sbcs	r2, r2
 800226a:	444c      	add	r4, r9
 800226c:	4252      	negs	r2, r2
 800226e:	0005      	movs	r5, r0
 8002270:	18a4      	adds	r4, r4, r2
 8002272:	e74c      	b.n	800210e <__aeabi_dsub+0x552>
 8002274:	001a      	movs	r2, r3
 8002276:	001c      	movs	r4, r3
 8002278:	432a      	orrs	r2, r5
 800227a:	d000      	beq.n	800227e <__aeabi_dsub+0x6c2>
 800227c:	e6b3      	b.n	8001fe6 <__aeabi_dsub+0x42a>
 800227e:	e6c9      	b.n	8002014 <__aeabi_dsub+0x458>
 8002280:	2480      	movs	r4, #128	@ 0x80
 8002282:	2600      	movs	r6, #0
 8002284:	0324      	lsls	r4, r4, #12
 8002286:	e5ae      	b.n	8001de6 <__aeabi_dsub+0x22a>
 8002288:	2120      	movs	r1, #32
 800228a:	2500      	movs	r5, #0
 800228c:	1a09      	subs	r1, r1, r0
 800228e:	e517      	b.n	8001cc0 <__aeabi_dsub+0x104>
 8002290:	2200      	movs	r2, #0
 8002292:	2500      	movs	r5, #0
 8002294:	4c0b      	ldr	r4, [pc, #44]	@ (80022c4 <__aeabi_dsub+0x708>)
 8002296:	e53a      	b.n	8001d0e <__aeabi_dsub+0x152>
 8002298:	2d00      	cmp	r5, #0
 800229a:	d100      	bne.n	800229e <__aeabi_dsub+0x6e2>
 800229c:	e5f6      	b.n	8001e8c <__aeabi_dsub+0x2d0>
 800229e:	464b      	mov	r3, r9
 80022a0:	1bda      	subs	r2, r3, r7
 80022a2:	4692      	mov	sl, r2
 80022a4:	2f00      	cmp	r7, #0
 80022a6:	d100      	bne.n	80022aa <__aeabi_dsub+0x6ee>
 80022a8:	e66f      	b.n	8001f8a <__aeabi_dsub+0x3ce>
 80022aa:	2a38      	cmp	r2, #56	@ 0x38
 80022ac:	dc05      	bgt.n	80022ba <__aeabi_dsub+0x6fe>
 80022ae:	2680      	movs	r6, #128	@ 0x80
 80022b0:	0436      	lsls	r6, r6, #16
 80022b2:	4334      	orrs	r4, r6
 80022b4:	4688      	mov	r8, r1
 80022b6:	000e      	movs	r6, r1
 80022b8:	e6d1      	b.n	800205e <__aeabi_dsub+0x4a2>
 80022ba:	4688      	mov	r8, r1
 80022bc:	000e      	movs	r6, r1
 80022be:	2501      	movs	r5, #1
 80022c0:	e6de      	b.n	8002080 <__aeabi_dsub+0x4c4>
 80022c2:	46c0      	nop			@ (mov r8, r8)
 80022c4:	000007ff 	.word	0x000007ff
 80022c8:	ff7fffff 	.word	0xff7fffff
 80022cc:	000007fe 	.word	0x000007fe
 80022d0:	2d00      	cmp	r5, #0
 80022d2:	d100      	bne.n	80022d6 <__aeabi_dsub+0x71a>
 80022d4:	e668      	b.n	8001fa8 <__aeabi_dsub+0x3ec>
 80022d6:	464b      	mov	r3, r9
 80022d8:	1bd9      	subs	r1, r3, r7
 80022da:	2f00      	cmp	r7, #0
 80022dc:	d101      	bne.n	80022e2 <__aeabi_dsub+0x726>
 80022de:	468a      	mov	sl, r1
 80022e0:	e5a7      	b.n	8001e32 <__aeabi_dsub+0x276>
 80022e2:	2701      	movs	r7, #1
 80022e4:	2938      	cmp	r1, #56	@ 0x38
 80022e6:	dd00      	ble.n	80022ea <__aeabi_dsub+0x72e>
 80022e8:	e5c7      	b.n	8001e7a <__aeabi_dsub+0x2be>
 80022ea:	2280      	movs	r2, #128	@ 0x80
 80022ec:	0412      	lsls	r2, r2, #16
 80022ee:	4314      	orrs	r4, r2
 80022f0:	e5af      	b.n	8001e52 <__aeabi_dsub+0x296>
 80022f2:	46c0      	nop			@ (mov r8, r8)

080022f4 <__aeabi_dcmpun>:
 80022f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022f6:	46c6      	mov	lr, r8
 80022f8:	031e      	lsls	r6, r3, #12
 80022fa:	0b36      	lsrs	r6, r6, #12
 80022fc:	46b0      	mov	r8, r6
 80022fe:	4e0d      	ldr	r6, [pc, #52]	@ (8002334 <__aeabi_dcmpun+0x40>)
 8002300:	030c      	lsls	r4, r1, #12
 8002302:	004d      	lsls	r5, r1, #1
 8002304:	005f      	lsls	r7, r3, #1
 8002306:	b500      	push	{lr}
 8002308:	0b24      	lsrs	r4, r4, #12
 800230a:	0d6d      	lsrs	r5, r5, #21
 800230c:	0d7f      	lsrs	r7, r7, #21
 800230e:	42b5      	cmp	r5, r6
 8002310:	d00b      	beq.n	800232a <__aeabi_dcmpun+0x36>
 8002312:	4908      	ldr	r1, [pc, #32]	@ (8002334 <__aeabi_dcmpun+0x40>)
 8002314:	2000      	movs	r0, #0
 8002316:	428f      	cmp	r7, r1
 8002318:	d104      	bne.n	8002324 <__aeabi_dcmpun+0x30>
 800231a:	4646      	mov	r6, r8
 800231c:	4316      	orrs	r6, r2
 800231e:	0030      	movs	r0, r6
 8002320:	1e43      	subs	r3, r0, #1
 8002322:	4198      	sbcs	r0, r3
 8002324:	bc80      	pop	{r7}
 8002326:	46b8      	mov	r8, r7
 8002328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800232a:	4304      	orrs	r4, r0
 800232c:	2001      	movs	r0, #1
 800232e:	2c00      	cmp	r4, #0
 8002330:	d1f8      	bne.n	8002324 <__aeabi_dcmpun+0x30>
 8002332:	e7ee      	b.n	8002312 <__aeabi_dcmpun+0x1e>
 8002334:	000007ff 	.word	0x000007ff

08002338 <__aeabi_d2iz>:
 8002338:	000b      	movs	r3, r1
 800233a:	0002      	movs	r2, r0
 800233c:	b570      	push	{r4, r5, r6, lr}
 800233e:	4d16      	ldr	r5, [pc, #88]	@ (8002398 <__aeabi_d2iz+0x60>)
 8002340:	030c      	lsls	r4, r1, #12
 8002342:	b082      	sub	sp, #8
 8002344:	0049      	lsls	r1, r1, #1
 8002346:	2000      	movs	r0, #0
 8002348:	9200      	str	r2, [sp, #0]
 800234a:	9301      	str	r3, [sp, #4]
 800234c:	0b24      	lsrs	r4, r4, #12
 800234e:	0d49      	lsrs	r1, r1, #21
 8002350:	0fde      	lsrs	r6, r3, #31
 8002352:	42a9      	cmp	r1, r5
 8002354:	dd04      	ble.n	8002360 <__aeabi_d2iz+0x28>
 8002356:	4811      	ldr	r0, [pc, #68]	@ (800239c <__aeabi_d2iz+0x64>)
 8002358:	4281      	cmp	r1, r0
 800235a:	dd03      	ble.n	8002364 <__aeabi_d2iz+0x2c>
 800235c:	4b10      	ldr	r3, [pc, #64]	@ (80023a0 <__aeabi_d2iz+0x68>)
 800235e:	18f0      	adds	r0, r6, r3
 8002360:	b002      	add	sp, #8
 8002362:	bd70      	pop	{r4, r5, r6, pc}
 8002364:	2080      	movs	r0, #128	@ 0x80
 8002366:	0340      	lsls	r0, r0, #13
 8002368:	4320      	orrs	r0, r4
 800236a:	4c0e      	ldr	r4, [pc, #56]	@ (80023a4 <__aeabi_d2iz+0x6c>)
 800236c:	1a64      	subs	r4, r4, r1
 800236e:	2c1f      	cmp	r4, #31
 8002370:	dd08      	ble.n	8002384 <__aeabi_d2iz+0x4c>
 8002372:	4b0d      	ldr	r3, [pc, #52]	@ (80023a8 <__aeabi_d2iz+0x70>)
 8002374:	1a5b      	subs	r3, r3, r1
 8002376:	40d8      	lsrs	r0, r3
 8002378:	0003      	movs	r3, r0
 800237a:	4258      	negs	r0, r3
 800237c:	2e00      	cmp	r6, #0
 800237e:	d1ef      	bne.n	8002360 <__aeabi_d2iz+0x28>
 8002380:	0018      	movs	r0, r3
 8002382:	e7ed      	b.n	8002360 <__aeabi_d2iz+0x28>
 8002384:	4b09      	ldr	r3, [pc, #36]	@ (80023ac <__aeabi_d2iz+0x74>)
 8002386:	9a00      	ldr	r2, [sp, #0]
 8002388:	469c      	mov	ip, r3
 800238a:	0003      	movs	r3, r0
 800238c:	4461      	add	r1, ip
 800238e:	408b      	lsls	r3, r1
 8002390:	40e2      	lsrs	r2, r4
 8002392:	4313      	orrs	r3, r2
 8002394:	e7f1      	b.n	800237a <__aeabi_d2iz+0x42>
 8002396:	46c0      	nop			@ (mov r8, r8)
 8002398:	000003fe 	.word	0x000003fe
 800239c:	0000041d 	.word	0x0000041d
 80023a0:	7fffffff 	.word	0x7fffffff
 80023a4:	00000433 	.word	0x00000433
 80023a8:	00000413 	.word	0x00000413
 80023ac:	fffffbed 	.word	0xfffffbed

080023b0 <__aeabi_i2d>:
 80023b0:	b570      	push	{r4, r5, r6, lr}
 80023b2:	2800      	cmp	r0, #0
 80023b4:	d016      	beq.n	80023e4 <__aeabi_i2d+0x34>
 80023b6:	17c3      	asrs	r3, r0, #31
 80023b8:	18c5      	adds	r5, r0, r3
 80023ba:	405d      	eors	r5, r3
 80023bc:	0fc4      	lsrs	r4, r0, #31
 80023be:	0028      	movs	r0, r5
 80023c0:	f000 f848 	bl	8002454 <__clzsi2>
 80023c4:	4b10      	ldr	r3, [pc, #64]	@ (8002408 <__aeabi_i2d+0x58>)
 80023c6:	1a1b      	subs	r3, r3, r0
 80023c8:	055b      	lsls	r3, r3, #21
 80023ca:	0d5b      	lsrs	r3, r3, #21
 80023cc:	280a      	cmp	r0, #10
 80023ce:	dc14      	bgt.n	80023fa <__aeabi_i2d+0x4a>
 80023d0:	0002      	movs	r2, r0
 80023d2:	002e      	movs	r6, r5
 80023d4:	3215      	adds	r2, #21
 80023d6:	4096      	lsls	r6, r2
 80023d8:	220b      	movs	r2, #11
 80023da:	1a12      	subs	r2, r2, r0
 80023dc:	40d5      	lsrs	r5, r2
 80023de:	032d      	lsls	r5, r5, #12
 80023e0:	0b2d      	lsrs	r5, r5, #12
 80023e2:	e003      	b.n	80023ec <__aeabi_i2d+0x3c>
 80023e4:	2400      	movs	r4, #0
 80023e6:	2300      	movs	r3, #0
 80023e8:	2500      	movs	r5, #0
 80023ea:	2600      	movs	r6, #0
 80023ec:	051b      	lsls	r3, r3, #20
 80023ee:	432b      	orrs	r3, r5
 80023f0:	07e4      	lsls	r4, r4, #31
 80023f2:	4323      	orrs	r3, r4
 80023f4:	0030      	movs	r0, r6
 80023f6:	0019      	movs	r1, r3
 80023f8:	bd70      	pop	{r4, r5, r6, pc}
 80023fa:	380b      	subs	r0, #11
 80023fc:	4085      	lsls	r5, r0
 80023fe:	032d      	lsls	r5, r5, #12
 8002400:	2600      	movs	r6, #0
 8002402:	0b2d      	lsrs	r5, r5, #12
 8002404:	e7f2      	b.n	80023ec <__aeabi_i2d+0x3c>
 8002406:	46c0      	nop			@ (mov r8, r8)
 8002408:	0000041e 	.word	0x0000041e

0800240c <__aeabi_ui2d>:
 800240c:	b510      	push	{r4, lr}
 800240e:	1e04      	subs	r4, r0, #0
 8002410:	d010      	beq.n	8002434 <__aeabi_ui2d+0x28>
 8002412:	f000 f81f 	bl	8002454 <__clzsi2>
 8002416:	4b0e      	ldr	r3, [pc, #56]	@ (8002450 <__aeabi_ui2d+0x44>)
 8002418:	1a1b      	subs	r3, r3, r0
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	0d5b      	lsrs	r3, r3, #21
 800241e:	280a      	cmp	r0, #10
 8002420:	dc0f      	bgt.n	8002442 <__aeabi_ui2d+0x36>
 8002422:	220b      	movs	r2, #11
 8002424:	0021      	movs	r1, r4
 8002426:	1a12      	subs	r2, r2, r0
 8002428:	40d1      	lsrs	r1, r2
 800242a:	3015      	adds	r0, #21
 800242c:	030a      	lsls	r2, r1, #12
 800242e:	4084      	lsls	r4, r0
 8002430:	0b12      	lsrs	r2, r2, #12
 8002432:	e001      	b.n	8002438 <__aeabi_ui2d+0x2c>
 8002434:	2300      	movs	r3, #0
 8002436:	2200      	movs	r2, #0
 8002438:	051b      	lsls	r3, r3, #20
 800243a:	4313      	orrs	r3, r2
 800243c:	0020      	movs	r0, r4
 800243e:	0019      	movs	r1, r3
 8002440:	bd10      	pop	{r4, pc}
 8002442:	0022      	movs	r2, r4
 8002444:	380b      	subs	r0, #11
 8002446:	4082      	lsls	r2, r0
 8002448:	0312      	lsls	r2, r2, #12
 800244a:	2400      	movs	r4, #0
 800244c:	0b12      	lsrs	r2, r2, #12
 800244e:	e7f3      	b.n	8002438 <__aeabi_ui2d+0x2c>
 8002450:	0000041e 	.word	0x0000041e

08002454 <__clzsi2>:
 8002454:	211c      	movs	r1, #28
 8002456:	2301      	movs	r3, #1
 8002458:	041b      	lsls	r3, r3, #16
 800245a:	4298      	cmp	r0, r3
 800245c:	d301      	bcc.n	8002462 <__clzsi2+0xe>
 800245e:	0c00      	lsrs	r0, r0, #16
 8002460:	3910      	subs	r1, #16
 8002462:	0a1b      	lsrs	r3, r3, #8
 8002464:	4298      	cmp	r0, r3
 8002466:	d301      	bcc.n	800246c <__clzsi2+0x18>
 8002468:	0a00      	lsrs	r0, r0, #8
 800246a:	3908      	subs	r1, #8
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	4298      	cmp	r0, r3
 8002470:	d301      	bcc.n	8002476 <__clzsi2+0x22>
 8002472:	0900      	lsrs	r0, r0, #4
 8002474:	3904      	subs	r1, #4
 8002476:	a202      	add	r2, pc, #8	@ (adr r2, 8002480 <__clzsi2+0x2c>)
 8002478:	5c10      	ldrb	r0, [r2, r0]
 800247a:	1840      	adds	r0, r0, r1
 800247c:	4770      	bx	lr
 800247e:	46c0      	nop			@ (mov r8, r8)
 8002480:	02020304 	.word	0x02020304
 8002484:	01010101 	.word	0x01010101
	...

08002490 <__clzdi2>:
 8002490:	b510      	push	{r4, lr}
 8002492:	2900      	cmp	r1, #0
 8002494:	d103      	bne.n	800249e <__clzdi2+0xe>
 8002496:	f7ff ffdd 	bl	8002454 <__clzsi2>
 800249a:	3020      	adds	r0, #32
 800249c:	e002      	b.n	80024a4 <__clzdi2+0x14>
 800249e:	0008      	movs	r0, r1
 80024a0:	f7ff ffd8 	bl	8002454 <__clzsi2>
 80024a4:	bd10      	pop	{r4, pc}
 80024a6:	46c0      	nop			@ (mov r8, r8)

080024a8 <HAL_UART_RxCpltCallback>:
  }
  return true;
}

// Callback for reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 80024b0:	4b08      	ldr	r3, [pc, #32]	@ (80024d4 <HAL_UART_RxCpltCallback+0x2c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d108      	bne.n	80024cc <HAL_UART_RxCpltCallback+0x24>
    RxComplete = true;
 80024ba:	4b07      	ldr	r3, [pc, #28]	@ (80024d8 <HAL_UART_RxCpltCallback+0x30>)
 80024bc:	2201      	movs	r2, #1
 80024be:	701a      	strb	r2, [r3, #0]
    Debug("RxComplete");
 80024c0:	4a06      	ldr	r2, [pc, #24]	@ (80024dc <HAL_UART_RxCpltCallback+0x34>)
 80024c2:	4b07      	ldr	r3, [pc, #28]	@ (80024e0 <HAL_UART_RxCpltCallback+0x38>)
 80024c4:	0019      	movs	r1, r3
 80024c6:	2003      	movs	r0, #3
 80024c8:	f000 ff90 	bl	80033ec <CreateLine>

  }
}
 80024cc:	46c0      	nop			@ (mov r8, r8)
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b002      	add	sp, #8
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	200001f4 	.word	0x200001f4
 80024d8:	200001f8 	.word	0x200001f8
 80024dc:	0800a2fc 	.word	0x0800a2fc
 80024e0:	0800a2d8 	.word	0x0800a2d8

080024e4 <HAL_UART_ErrorCallback>:

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 80024ec:	4b05      	ldr	r3, [pc, #20]	@ (8002504 <HAL_UART_ErrorCallback+0x20>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d102      	bne.n	80024fc <HAL_UART_ErrorCallback+0x18>
    // Handle error
    EspState = ESP_STATE_ERROR;
 80024f6:	4b04      	ldr	r3, [pc, #16]	@ (8002508 <HAL_UART_ErrorCallback+0x24>)
 80024f8:	2208      	movs	r2, #8
 80024fa:	701a      	strb	r2, [r3, #0]
  }
}
 80024fc:	46c0      	nop			@ (mov r8, r8)
 80024fe:	46bd      	mov	sp, r7
 8002500:	b002      	add	sp, #8
 8002502:	bd80      	pop	{r7, pc}
 8002504:	200001f4 	.word	0x200001f4
 8002508:	200001f9 	.word	0x200001f9

0800250c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002512:	4b10      	ldr	r3, [pc, #64]	@ (8002554 <MX_DMA_Init+0x48>)
 8002514:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002516:	4b0f      	ldr	r3, [pc, #60]	@ (8002554 <MX_DMA_Init+0x48>)
 8002518:	2101      	movs	r1, #1
 800251a:	430a      	orrs	r2, r1
 800251c:	631a      	str	r2, [r3, #48]	@ 0x30
 800251e:	4b0d      	ldr	r3, [pc, #52]	@ (8002554 <MX_DMA_Init+0x48>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	2201      	movs	r2, #1
 8002524:	4013      	ands	r3, r2
 8002526:	607b      	str	r3, [r7, #4]
 8002528:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	2100      	movs	r1, #0
 800252e:	200a      	movs	r0, #10
 8002530:	f001 f960 	bl	80037f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002534:	200a      	movs	r0, #10
 8002536:	f001 f972 	bl	800381e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2103      	movs	r1, #3
 800253e:	200b      	movs	r0, #11
 8002540:	f001 f958 	bl	80037f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8002544:	200b      	movs	r0, #11
 8002546:	f001 f96a 	bl	800381e <HAL_NVIC_EnableIRQ>

}
 800254a:	46c0      	nop			@ (mov r8, r8)
 800254c:	46bd      	mov	sp, r7
 800254e:	b002      	add	sp, #8
 8002550:	bd80      	pop	{r7, pc}
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	40021000 	.word	0x40021000

08002558 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8002558:	b590      	push	{r4, r7, lr}
 800255a:	b08b      	sub	sp, #44	@ 0x2c
 800255c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255e:	2414      	movs	r4, #20
 8002560:	193b      	adds	r3, r7, r4
 8002562:	0018      	movs	r0, r3
 8002564:	2314      	movs	r3, #20
 8002566:	001a      	movs	r2, r3
 8002568:	2100      	movs	r1, #0
 800256a:	f005 fd23 	bl	8007fb4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800256e:	4b7a      	ldr	r3, [pc, #488]	@ (8002758 <MX_GPIO_Init+0x200>)
 8002570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002572:	4b79      	ldr	r3, [pc, #484]	@ (8002758 <MX_GPIO_Init+0x200>)
 8002574:	2104      	movs	r1, #4
 8002576:	430a      	orrs	r2, r1
 8002578:	62da      	str	r2, [r3, #44]	@ 0x2c
 800257a:	4b77      	ldr	r3, [pc, #476]	@ (8002758 <MX_GPIO_Init+0x200>)
 800257c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257e:	2204      	movs	r2, #4
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002586:	4b74      	ldr	r3, [pc, #464]	@ (8002758 <MX_GPIO_Init+0x200>)
 8002588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800258a:	4b73      	ldr	r3, [pc, #460]	@ (8002758 <MX_GPIO_Init+0x200>)
 800258c:	2180      	movs	r1, #128	@ 0x80
 800258e:	430a      	orrs	r2, r1
 8002590:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002592:	4b71      	ldr	r3, [pc, #452]	@ (8002758 <MX_GPIO_Init+0x200>)
 8002594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002596:	2280      	movs	r2, #128	@ 0x80
 8002598:	4013      	ands	r3, r2
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800259e:	4b6e      	ldr	r3, [pc, #440]	@ (8002758 <MX_GPIO_Init+0x200>)
 80025a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002758 <MX_GPIO_Init+0x200>)
 80025a4:	2101      	movs	r1, #1
 80025a6:	430a      	orrs	r2, r1
 80025a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80025aa:	4b6b      	ldr	r3, [pc, #428]	@ (8002758 <MX_GPIO_Init+0x200>)
 80025ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ae:	2201      	movs	r2, #1
 80025b0:	4013      	ands	r3, r2
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b6:	4b68      	ldr	r3, [pc, #416]	@ (8002758 <MX_GPIO_Init+0x200>)
 80025b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025ba:	4b67      	ldr	r3, [pc, #412]	@ (8002758 <MX_GPIO_Init+0x200>)
 80025bc:	2102      	movs	r1, #2
 80025be:	430a      	orrs	r2, r1
 80025c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80025c2:	4b65      	ldr	r3, [pc, #404]	@ (8002758 <MX_GPIO_Init+0x200>)
 80025c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c6:	2202      	movs	r2, #2
 80025c8:	4013      	ands	r3, r2
 80025ca:	607b      	str	r3, [r7, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ce:	4b62      	ldr	r3, [pc, #392]	@ (8002758 <MX_GPIO_Init+0x200>)
 80025d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025d2:	4b61      	ldr	r3, [pc, #388]	@ (8002758 <MX_GPIO_Init+0x200>)
 80025d4:	2108      	movs	r1, #8
 80025d6:	430a      	orrs	r2, r1
 80025d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80025da:	4b5f      	ldr	r3, [pc, #380]	@ (8002758 <MX_GPIO_Init+0x200>)
 80025dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025de:	2208      	movs	r2, #8
 80025e0:	4013      	ands	r3, r2
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, ESP32_EN_Pin|ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80025e6:	4b5d      	ldr	r3, [pc, #372]	@ (800275c <MX_GPIO_Init+0x204>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	2103      	movs	r1, #3
 80025ec:	0018      	movs	r0, r3
 80025ee:	f001 fc6b 	bl	8003ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin, GPIO_PIN_RESET);
 80025f2:	23a0      	movs	r3, #160	@ 0xa0
 80025f4:	05db      	lsls	r3, r3, #23
 80025f6:	2200      	movs	r2, #0
 80025f8:	210d      	movs	r1, #13
 80025fa:	0018      	movs	r0, r3
 80025fc:	f001 fc64 	bl	8003ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8002600:	4957      	ldr	r1, [pc, #348]	@ (8002760 <MX_GPIO_Init+0x208>)
 8002602:	4b58      	ldr	r3, [pc, #352]	@ (8002764 <MX_GPIO_Init+0x20c>)
 8002604:	2201      	movs	r2, #1
 8002606:	0018      	movs	r0, r3
 8002608:	f001 fc5e 	bl	8003ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin, GPIO_PIN_SET);
 800260c:	23e0      	movs	r3, #224	@ 0xe0
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	4855      	ldr	r0, [pc, #340]	@ (8002768 <MX_GPIO_Init+0x210>)
 8002612:	2201      	movs	r2, #1
 8002614:	0019      	movs	r1, r3
 8002616:	f001 fc57 	bl	8003ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 PC4
                           PC5 PC9 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800261a:	193b      	adds	r3, r7, r4
 800261c:	4a53      	ldr	r2, [pc, #332]	@ (800276c <MX_GPIO_Init+0x214>)
 800261e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002620:	193b      	adds	r3, r7, r4
 8002622:	2203      	movs	r2, #3
 8002624:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	193b      	adds	r3, r7, r4
 8002628:	2200      	movs	r2, #0
 800262a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800262c:	193b      	adds	r3, r7, r4
 800262e:	4a4e      	ldr	r2, [pc, #312]	@ (8002768 <MX_GPIO_Init+0x210>)
 8002630:	0019      	movs	r1, r3
 8002632:	0010      	movs	r0, r2
 8002634:	f001 faca 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8002638:	193b      	adds	r3, r7, r4
 800263a:	2203      	movs	r2, #3
 800263c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800263e:	193b      	adds	r3, r7, r4
 8002640:	2201      	movs	r2, #1
 8002642:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	193b      	adds	r3, r7, r4
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264a:	193b      	adds	r3, r7, r4
 800264c:	2200      	movs	r2, #0
 800264e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002650:	193b      	adds	r3, r7, r4
 8002652:	4a42      	ldr	r2, [pc, #264]	@ (800275c <MX_GPIO_Init+0x204>)
 8002654:	0019      	movs	r1, r3
 8002656:	0010      	movs	r0, r2
 8002658:	f001 fab8 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800265c:	193b      	adds	r3, r7, r4
 800265e:	220d      	movs	r2, #13
 8002660:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002662:	193b      	adds	r3, r7, r4
 8002664:	2201      	movs	r2, #1
 8002666:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	193b      	adds	r3, r7, r4
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266e:	193b      	adds	r3, r7, r4
 8002670:	2200      	movs	r2, #0
 8002672:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002674:	193a      	adds	r2, r7, r4
 8002676:	23a0      	movs	r3, #160	@ 0xa0
 8002678:	05db      	lsls	r3, r3, #23
 800267a:	0011      	movs	r1, r2
 800267c:	0018      	movs	r0, r3
 800267e:	f001 faa5 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8002682:	193b      	adds	r3, r7, r4
 8002684:	4a3a      	ldr	r2, [pc, #232]	@ (8002770 <MX_GPIO_Init+0x218>)
 8002686:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002688:	193b      	adds	r3, r7, r4
 800268a:	2203      	movs	r2, #3
 800268c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	193b      	adds	r3, r7, r4
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002694:	193a      	adds	r2, r7, r4
 8002696:	23a0      	movs	r3, #160	@ 0xa0
 8002698:	05db      	lsls	r3, r3, #23
 800269a:	0011      	movs	r1, r2
 800269c:	0018      	movs	r0, r3
 800269e:	f001 fa95 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 80026a2:	193b      	adds	r3, r7, r4
 80026a4:	22c0      	movs	r2, #192	@ 0xc0
 80026a6:	0052      	lsls	r2, r2, #1
 80026a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026aa:	193b      	adds	r3, r7, r4
 80026ac:	2200      	movs	r2, #0
 80026ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b0:	193b      	adds	r3, r7, r4
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b6:	193a      	adds	r2, r7, r4
 80026b8:	23a0      	movs	r3, #160	@ 0xa0
 80026ba:	05db      	lsls	r3, r3, #23
 80026bc:	0011      	movs	r1, r2
 80026be:	0018      	movs	r0, r3
 80026c0:	f001 fa84 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 80026c4:	193b      	adds	r3, r7, r4
 80026c6:	4a26      	ldr	r2, [pc, #152]	@ (8002760 <MX_GPIO_Init+0x208>)
 80026c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ca:	193b      	adds	r3, r7, r4
 80026cc:	2201      	movs	r2, #1
 80026ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	193b      	adds	r3, r7, r4
 80026d2:	2200      	movs	r2, #0
 80026d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d6:	193b      	adds	r3, r7, r4
 80026d8:	2200      	movs	r2, #0
 80026da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026dc:	193b      	adds	r3, r7, r4
 80026de:	4a21      	ldr	r2, [pc, #132]	@ (8002764 <MX_GPIO_Init+0x20c>)
 80026e0:	0019      	movs	r1, r3
 80026e2:	0010      	movs	r0, r2
 80026e4:	f001 fa72 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 80026e8:	193b      	adds	r3, r7, r4
 80026ea:	4a22      	ldr	r2, [pc, #136]	@ (8002774 <MX_GPIO_Init+0x21c>)
 80026ec:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026ee:	193b      	adds	r3, r7, r4
 80026f0:	2203      	movs	r2, #3
 80026f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	193b      	adds	r3, r7, r4
 80026f6:	2200      	movs	r2, #0
 80026f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fa:	193b      	adds	r3, r7, r4
 80026fc:	4a19      	ldr	r2, [pc, #100]	@ (8002764 <MX_GPIO_Init+0x20c>)
 80026fe:	0019      	movs	r1, r3
 8002700:	0010      	movs	r0, r2
 8002702:	f001 fa63 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 8002706:	0021      	movs	r1, r4
 8002708:	187b      	adds	r3, r7, r1
 800270a:	22e0      	movs	r2, #224	@ 0xe0
 800270c:	0052      	lsls	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002710:	000c      	movs	r4, r1
 8002712:	193b      	adds	r3, r7, r4
 8002714:	2201      	movs	r2, #1
 8002716:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	193b      	adds	r3, r7, r4
 800271a:	2200      	movs	r2, #0
 800271c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271e:	193b      	adds	r3, r7, r4
 8002720:	2200      	movs	r2, #0
 8002722:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002724:	193b      	adds	r3, r7, r4
 8002726:	4a10      	ldr	r2, [pc, #64]	@ (8002768 <MX_GPIO_Init+0x210>)
 8002728:	0019      	movs	r1, r3
 800272a:	0010      	movs	r0, r2
 800272c:	f001 fa4e 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8002730:	0021      	movs	r1, r4
 8002732:	187b      	adds	r3, r7, r1
 8002734:	2204      	movs	r2, #4
 8002736:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002738:	187b      	adds	r3, r7, r1
 800273a:	2200      	movs	r2, #0
 800273c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	187b      	adds	r3, r7, r1
 8002740:	2200      	movs	r2, #0
 8002742:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8002744:	187b      	adds	r3, r7, r1
 8002746:	4a0c      	ldr	r2, [pc, #48]	@ (8002778 <MX_GPIO_Init+0x220>)
 8002748:	0019      	movs	r1, r3
 800274a:	0010      	movs	r0, r2
 800274c:	f001 fa3e 	bl	8003bcc <HAL_GPIO_Init>

}
 8002750:	46c0      	nop			@ (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	b00b      	add	sp, #44	@ 0x2c
 8002756:	bd90      	pop	{r4, r7, pc}
 8002758:	40021000 	.word	0x40021000
 800275c:	50001c00 	.word	0x50001c00
 8002760:	00000301 	.word	0x00000301
 8002764:	50000400 	.word	0x50000400
 8002768:	50000800 	.word	0x50000800
 800276c:	00003a3c 	.word	0x00003a3c
 8002770:	00008070 	.word	0x00008070
 8002774:	0000403e 	.word	0x0000403e
 8002778:	50000c00 	.word	0x50000c00

0800277c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002780:	4b1b      	ldr	r3, [pc, #108]	@ (80027f0 <MX_I2C1_Init+0x74>)
 8002782:	4a1c      	ldr	r2, [pc, #112]	@ (80027f4 <MX_I2C1_Init+0x78>)
 8002784:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8002786:	4b1a      	ldr	r3, [pc, #104]	@ (80027f0 <MX_I2C1_Init+0x74>)
 8002788:	4a1b      	ldr	r2, [pc, #108]	@ (80027f8 <MX_I2C1_Init+0x7c>)
 800278a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800278c:	4b18      	ldr	r3, [pc, #96]	@ (80027f0 <MX_I2C1_Init+0x74>)
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002792:	4b17      	ldr	r3, [pc, #92]	@ (80027f0 <MX_I2C1_Init+0x74>)
 8002794:	2201      	movs	r2, #1
 8002796:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002798:	4b15      	ldr	r3, [pc, #84]	@ (80027f0 <MX_I2C1_Init+0x74>)
 800279a:	2200      	movs	r2, #0
 800279c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800279e:	4b14      	ldr	r3, [pc, #80]	@ (80027f0 <MX_I2C1_Init+0x74>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027a4:	4b12      	ldr	r3, [pc, #72]	@ (80027f0 <MX_I2C1_Init+0x74>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027aa:	4b11      	ldr	r3, [pc, #68]	@ (80027f0 <MX_I2C1_Init+0x74>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027b0:	4b0f      	ldr	r3, [pc, #60]	@ (80027f0 <MX_I2C1_Init+0x74>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027b6:	4b0e      	ldr	r3, [pc, #56]	@ (80027f0 <MX_I2C1_Init+0x74>)
 80027b8:	0018      	movs	r0, r3
 80027ba:	f001 fbbd 	bl	8003f38 <HAL_I2C_Init>
 80027be:	1e03      	subs	r3, r0, #0
 80027c0:	d001      	beq.n	80027c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80027c2:	f000 fa8f 	bl	8002ce4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027c6:	4b0a      	ldr	r3, [pc, #40]	@ (80027f0 <MX_I2C1_Init+0x74>)
 80027c8:	2100      	movs	r1, #0
 80027ca:	0018      	movs	r0, r3
 80027cc:	f002 fa46 	bl	8004c5c <HAL_I2CEx_ConfigAnalogFilter>
 80027d0:	1e03      	subs	r3, r0, #0
 80027d2:	d001      	beq.n	80027d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80027d4:	f000 fa86 	bl	8002ce4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80027d8:	4b05      	ldr	r3, [pc, #20]	@ (80027f0 <MX_I2C1_Init+0x74>)
 80027da:	2100      	movs	r1, #0
 80027dc:	0018      	movs	r0, r3
 80027de:	f002 fa89 	bl	8004cf4 <HAL_I2CEx_ConfigDigitalFilter>
 80027e2:	1e03      	subs	r3, r0, #0
 80027e4:	d001      	beq.n	80027ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80027e6:	f000 fa7d 	bl	8002ce4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027ea:	46c0      	nop			@ (mov r8, r8)
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	200001fc 	.word	0x200001fc
 80027f4:	40005400 	.word	0x40005400
 80027f8:	00503d58 	.word	0x00503d58

080027fc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002800:	4b1b      	ldr	r3, [pc, #108]	@ (8002870 <MX_I2C2_Init+0x74>)
 8002802:	4a1c      	ldr	r2, [pc, #112]	@ (8002874 <MX_I2C2_Init+0x78>)
 8002804:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8002806:	4b1a      	ldr	r3, [pc, #104]	@ (8002870 <MX_I2C2_Init+0x74>)
 8002808:	4a1b      	ldr	r2, [pc, #108]	@ (8002878 <MX_I2C2_Init+0x7c>)
 800280a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800280c:	4b18      	ldr	r3, [pc, #96]	@ (8002870 <MX_I2C2_Init+0x74>)
 800280e:	2200      	movs	r2, #0
 8002810:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002812:	4b17      	ldr	r3, [pc, #92]	@ (8002870 <MX_I2C2_Init+0x74>)
 8002814:	2201      	movs	r2, #1
 8002816:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002818:	4b15      	ldr	r3, [pc, #84]	@ (8002870 <MX_I2C2_Init+0x74>)
 800281a:	2200      	movs	r2, #0
 800281c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800281e:	4b14      	ldr	r3, [pc, #80]	@ (8002870 <MX_I2C2_Init+0x74>)
 8002820:	2200      	movs	r2, #0
 8002822:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002824:	4b12      	ldr	r3, [pc, #72]	@ (8002870 <MX_I2C2_Init+0x74>)
 8002826:	2200      	movs	r2, #0
 8002828:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800282a:	4b11      	ldr	r3, [pc, #68]	@ (8002870 <MX_I2C2_Init+0x74>)
 800282c:	2200      	movs	r2, #0
 800282e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002830:	4b0f      	ldr	r3, [pc, #60]	@ (8002870 <MX_I2C2_Init+0x74>)
 8002832:	2200      	movs	r2, #0
 8002834:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002836:	4b0e      	ldr	r3, [pc, #56]	@ (8002870 <MX_I2C2_Init+0x74>)
 8002838:	0018      	movs	r0, r3
 800283a:	f001 fb7d 	bl	8003f38 <HAL_I2C_Init>
 800283e:	1e03      	subs	r3, r0, #0
 8002840:	d001      	beq.n	8002846 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002842:	f000 fa4f 	bl	8002ce4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002846:	4b0a      	ldr	r3, [pc, #40]	@ (8002870 <MX_I2C2_Init+0x74>)
 8002848:	2100      	movs	r1, #0
 800284a:	0018      	movs	r0, r3
 800284c:	f002 fa06 	bl	8004c5c <HAL_I2CEx_ConfigAnalogFilter>
 8002850:	1e03      	subs	r3, r0, #0
 8002852:	d001      	beq.n	8002858 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002854:	f000 fa46 	bl	8002ce4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002858:	4b05      	ldr	r3, [pc, #20]	@ (8002870 <MX_I2C2_Init+0x74>)
 800285a:	2100      	movs	r1, #0
 800285c:	0018      	movs	r0, r3
 800285e:	f002 fa49 	bl	8004cf4 <HAL_I2CEx_ConfigDigitalFilter>
 8002862:	1e03      	subs	r3, r0, #0
 8002864:	d001      	beq.n	800286a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002866:	f000 fa3d 	bl	8002ce4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800286a:	46c0      	nop			@ (mov r8, r8)
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20000250 	.word	0x20000250
 8002874:	40005800 	.word	0x40005800
 8002878:	00503d58 	.word	0x00503d58

0800287c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800287c:	b590      	push	{r4, r7, lr}
 800287e:	b08b      	sub	sp, #44	@ 0x2c
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002884:	2414      	movs	r4, #20
 8002886:	193b      	adds	r3, r7, r4
 8002888:	0018      	movs	r0, r3
 800288a:	2314      	movs	r3, #20
 800288c:	001a      	movs	r2, r3
 800288e:	2100      	movs	r1, #0
 8002890:	f005 fb90 	bl	8007fb4 <memset>
  if(i2cHandle->Instance==I2C1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a5d      	ldr	r2, [pc, #372]	@ (8002a10 <HAL_I2C_MspInit+0x194>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d000      	beq.n	80028a0 <HAL_I2C_MspInit+0x24>
 800289e:	e083      	b.n	80029a8 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a0:	4b5c      	ldr	r3, [pc, #368]	@ (8002a14 <HAL_I2C_MspInit+0x198>)
 80028a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028a4:	4b5b      	ldr	r3, [pc, #364]	@ (8002a14 <HAL_I2C_MspInit+0x198>)
 80028a6:	2102      	movs	r1, #2
 80028a8:	430a      	orrs	r2, r1
 80028aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80028ac:	4b59      	ldr	r3, [pc, #356]	@ (8002a14 <HAL_I2C_MspInit+0x198>)
 80028ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b0:	2202      	movs	r2, #2
 80028b2:	4013      	ands	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028b8:	0021      	movs	r1, r4
 80028ba:	187b      	adds	r3, r7, r1
 80028bc:	22c0      	movs	r2, #192	@ 0xc0
 80028be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028c0:	187b      	adds	r3, r7, r1
 80028c2:	2212      	movs	r2, #18
 80028c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c6:	187b      	adds	r3, r7, r1
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028cc:	187b      	adds	r3, r7, r1
 80028ce:	2203      	movs	r2, #3
 80028d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80028d2:	187b      	adds	r3, r7, r1
 80028d4:	2201      	movs	r2, #1
 80028d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d8:	187b      	adds	r3, r7, r1
 80028da:	4a4f      	ldr	r2, [pc, #316]	@ (8002a18 <HAL_I2C_MspInit+0x19c>)
 80028dc:	0019      	movs	r1, r3
 80028de:	0010      	movs	r0, r2
 80028e0:	f001 f974 	bl	8003bcc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002a14 <HAL_I2C_MspInit+0x198>)
 80028e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028e8:	4b4a      	ldr	r3, [pc, #296]	@ (8002a14 <HAL_I2C_MspInit+0x198>)
 80028ea:	2180      	movs	r1, #128	@ 0x80
 80028ec:	0389      	lsls	r1, r1, #14
 80028ee:	430a      	orrs	r2, r1
 80028f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 80028f2:	4b4a      	ldr	r3, [pc, #296]	@ (8002a1c <HAL_I2C_MspInit+0x1a0>)
 80028f4:	4a4a      	ldr	r2, [pc, #296]	@ (8002a20 <HAL_I2C_MspInit+0x1a4>)
 80028f6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 80028f8:	4b48      	ldr	r3, [pc, #288]	@ (8002a1c <HAL_I2C_MspInit+0x1a0>)
 80028fa:	2206      	movs	r2, #6
 80028fc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028fe:	4b47      	ldr	r3, [pc, #284]	@ (8002a1c <HAL_I2C_MspInit+0x1a0>)
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002904:	4b45      	ldr	r3, [pc, #276]	@ (8002a1c <HAL_I2C_MspInit+0x1a0>)
 8002906:	2200      	movs	r2, #0
 8002908:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800290a:	4b44      	ldr	r3, [pc, #272]	@ (8002a1c <HAL_I2C_MspInit+0x1a0>)
 800290c:	2280      	movs	r2, #128	@ 0x80
 800290e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002910:	4b42      	ldr	r3, [pc, #264]	@ (8002a1c <HAL_I2C_MspInit+0x1a0>)
 8002912:	2200      	movs	r2, #0
 8002914:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002916:	4b41      	ldr	r3, [pc, #260]	@ (8002a1c <HAL_I2C_MspInit+0x1a0>)
 8002918:	2200      	movs	r2, #0
 800291a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800291c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a1c <HAL_I2C_MspInit+0x1a0>)
 800291e:	2200      	movs	r2, #0
 8002920:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002922:	4b3e      	ldr	r3, [pc, #248]	@ (8002a1c <HAL_I2C_MspInit+0x1a0>)
 8002924:	2200      	movs	r2, #0
 8002926:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002928:	4b3c      	ldr	r3, [pc, #240]	@ (8002a1c <HAL_I2C_MspInit+0x1a0>)
 800292a:	0018      	movs	r0, r3
 800292c:	f000 ff94 	bl	8003858 <HAL_DMA_Init>
 8002930:	1e03      	subs	r3, r0, #0
 8002932:	d001      	beq.n	8002938 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8002934:	f000 f9d6 	bl	8002ce4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a38      	ldr	r2, [pc, #224]	@ (8002a1c <HAL_I2C_MspInit+0x1a0>)
 800293c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800293e:	4b37      	ldr	r3, [pc, #220]	@ (8002a1c <HAL_I2C_MspInit+0x1a0>)
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8002944:	4b37      	ldr	r3, [pc, #220]	@ (8002a24 <HAL_I2C_MspInit+0x1a8>)
 8002946:	4a38      	ldr	r2, [pc, #224]	@ (8002a28 <HAL_I2C_MspInit+0x1ac>)
 8002948:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800294a:	4b36      	ldr	r3, [pc, #216]	@ (8002a24 <HAL_I2C_MspInit+0x1a8>)
 800294c:	2206      	movs	r2, #6
 800294e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002950:	4b34      	ldr	r3, [pc, #208]	@ (8002a24 <HAL_I2C_MspInit+0x1a8>)
 8002952:	2210      	movs	r2, #16
 8002954:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002956:	4b33      	ldr	r3, [pc, #204]	@ (8002a24 <HAL_I2C_MspInit+0x1a8>)
 8002958:	2200      	movs	r2, #0
 800295a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800295c:	4b31      	ldr	r3, [pc, #196]	@ (8002a24 <HAL_I2C_MspInit+0x1a8>)
 800295e:	2280      	movs	r2, #128	@ 0x80
 8002960:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002962:	4b30      	ldr	r3, [pc, #192]	@ (8002a24 <HAL_I2C_MspInit+0x1a8>)
 8002964:	2200      	movs	r2, #0
 8002966:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002968:	4b2e      	ldr	r3, [pc, #184]	@ (8002a24 <HAL_I2C_MspInit+0x1a8>)
 800296a:	2200      	movs	r2, #0
 800296c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800296e:	4b2d      	ldr	r3, [pc, #180]	@ (8002a24 <HAL_I2C_MspInit+0x1a8>)
 8002970:	2200      	movs	r2, #0
 8002972:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002974:	4b2b      	ldr	r3, [pc, #172]	@ (8002a24 <HAL_I2C_MspInit+0x1a8>)
 8002976:	2200      	movs	r2, #0
 8002978:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800297a:	4b2a      	ldr	r3, [pc, #168]	@ (8002a24 <HAL_I2C_MspInit+0x1a8>)
 800297c:	0018      	movs	r0, r3
 800297e:	f000 ff6b 	bl	8003858 <HAL_DMA_Init>
 8002982:	1e03      	subs	r3, r0, #0
 8002984:	d001      	beq.n	800298a <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8002986:	f000 f9ad 	bl	8002ce4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a25      	ldr	r2, [pc, #148]	@ (8002a24 <HAL_I2C_MspInit+0x1a8>)
 800298e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002990:	4b24      	ldr	r3, [pc, #144]	@ (8002a24 <HAL_I2C_MspInit+0x1a8>)
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8002996:	2200      	movs	r2, #0
 8002998:	2100      	movs	r1, #0
 800299a:	2017      	movs	r0, #23
 800299c:	f000 ff2a 	bl	80037f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80029a0:	2017      	movs	r0, #23
 80029a2:	f000 ff3c 	bl	800381e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80029a6:	e02e      	b.n	8002a06 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1f      	ldr	r2, [pc, #124]	@ (8002a2c <HAL_I2C_MspInit+0x1b0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d129      	bne.n	8002a06 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b2:	4b18      	ldr	r3, [pc, #96]	@ (8002a14 <HAL_I2C_MspInit+0x198>)
 80029b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029b6:	4b17      	ldr	r3, [pc, #92]	@ (8002a14 <HAL_I2C_MspInit+0x198>)
 80029b8:	2102      	movs	r1, #2
 80029ba:	430a      	orrs	r2, r1
 80029bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80029be:	4b15      	ldr	r3, [pc, #84]	@ (8002a14 <HAL_I2C_MspInit+0x198>)
 80029c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c2:	2202      	movs	r2, #2
 80029c4:	4013      	ands	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80029ca:	2114      	movs	r1, #20
 80029cc:	187b      	adds	r3, r7, r1
 80029ce:	22c0      	movs	r2, #192	@ 0xc0
 80029d0:	0112      	lsls	r2, r2, #4
 80029d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029d4:	187b      	adds	r3, r7, r1
 80029d6:	2212      	movs	r2, #18
 80029d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029da:	187b      	adds	r3, r7, r1
 80029dc:	2200      	movs	r2, #0
 80029de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e0:	187b      	adds	r3, r7, r1
 80029e2:	2203      	movs	r2, #3
 80029e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80029e6:	187b      	adds	r3, r7, r1
 80029e8:	2206      	movs	r2, #6
 80029ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ec:	187b      	adds	r3, r7, r1
 80029ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002a18 <HAL_I2C_MspInit+0x19c>)
 80029f0:	0019      	movs	r1, r3
 80029f2:	0010      	movs	r0, r2
 80029f4:	f001 f8ea 	bl	8003bcc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80029f8:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <HAL_I2C_MspInit+0x198>)
 80029fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029fc:	4b05      	ldr	r3, [pc, #20]	@ (8002a14 <HAL_I2C_MspInit+0x198>)
 80029fe:	2180      	movs	r1, #128	@ 0x80
 8002a00:	03c9      	lsls	r1, r1, #15
 8002a02:	430a      	orrs	r2, r1
 8002a04:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002a06:	46c0      	nop			@ (mov r8, r8)
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	b00b      	add	sp, #44	@ 0x2c
 8002a0c:	bd90      	pop	{r4, r7, pc}
 8002a0e:	46c0      	nop			@ (mov r8, r8)
 8002a10:	40005400 	.word	0x40005400
 8002a14:	40021000 	.word	0x40021000
 8002a18:	50000400 	.word	0x50000400
 8002a1c:	200002a4 	.word	0x200002a4
 8002a20:	40020030 	.word	0x40020030
 8002a24:	200002ec 	.word	0x200002ec
 8002a28:	4002001c 	.word	0x4002001c
 8002a2c:	40005800 	.word	0x40005800

08002a30 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8002a34:	4b10      	ldr	r3, [pc, #64]	@ (8002a78 <MX_I2S2_Init+0x48>)
 8002a36:	4a11      	ldr	r2, [pc, #68]	@ (8002a7c <MX_I2S2_Init+0x4c>)
 8002a38:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8002a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a78 <MX_I2S2_Init+0x48>)
 8002a3c:	22c0      	movs	r2, #192	@ 0xc0
 8002a3e:	0092      	lsls	r2, r2, #2
 8002a40:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8002a42:	4b0d      	ldr	r3, [pc, #52]	@ (8002a78 <MX_I2S2_Init+0x48>)
 8002a44:	2210      	movs	r2, #16
 8002a46:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 8002a48:	4b0b      	ldr	r3, [pc, #44]	@ (8002a78 <MX_I2S2_Init+0x48>)
 8002a4a:	2205      	movs	r2, #5
 8002a4c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8002a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a78 <MX_I2S2_Init+0x48>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8002a54:	4b08      	ldr	r3, [pc, #32]	@ (8002a78 <MX_I2S2_Init+0x48>)
 8002a56:	22fa      	movs	r2, #250	@ 0xfa
 8002a58:	0152      	lsls	r2, r2, #5
 8002a5a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8002a5c:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <MX_I2S2_Init+0x48>)
 8002a5e:	2208      	movs	r2, #8
 8002a60:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8002a62:	4b05      	ldr	r3, [pc, #20]	@ (8002a78 <MX_I2S2_Init+0x48>)
 8002a64:	0018      	movs	r0, r3
 8002a66:	f002 f991 	bl	8004d8c <HAL_I2S_Init>
 8002a6a:	1e03      	subs	r3, r0, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8002a6e:	f000 f939 	bl	8002ce4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8002a72:	46c0      	nop			@ (mov r8, r8)
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000334 	.word	0x20000334
 8002a7c:	40003800 	.word	0x40003800

08002a80 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8002a80:	b590      	push	{r4, r7, lr}
 8002a82:	b089      	sub	sp, #36	@ 0x24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a88:	240c      	movs	r4, #12
 8002a8a:	193b      	adds	r3, r7, r4
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	2314      	movs	r3, #20
 8002a90:	001a      	movs	r2, r3
 8002a92:	2100      	movs	r1, #0
 8002a94:	f005 fa8e 	bl	8007fb4 <memset>
  if(i2sHandle->Instance==SPI2)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a2d      	ldr	r2, [pc, #180]	@ (8002b54 <HAL_I2S_MspInit+0xd4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d154      	bne.n	8002b4c <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8002b58 <HAL_I2S_MspInit+0xd8>)
 8002aa4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002aa6:	4b2c      	ldr	r3, [pc, #176]	@ (8002b58 <HAL_I2S_MspInit+0xd8>)
 8002aa8:	2180      	movs	r1, #128	@ 0x80
 8002aaa:	01c9      	lsls	r1, r1, #7
 8002aac:	430a      	orrs	r2, r1
 8002aae:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab0:	4b29      	ldr	r3, [pc, #164]	@ (8002b58 <HAL_I2S_MspInit+0xd8>)
 8002ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ab4:	4b28      	ldr	r3, [pc, #160]	@ (8002b58 <HAL_I2S_MspInit+0xd8>)
 8002ab6:	2102      	movs	r1, #2
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002abc:	4b26      	ldr	r3, [pc, #152]	@ (8002b58 <HAL_I2S_MspInit+0xd8>)
 8002abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002ac8:	193b      	adds	r3, r7, r4
 8002aca:	22b0      	movs	r2, #176	@ 0xb0
 8002acc:	0212      	lsls	r2, r2, #8
 8002ace:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad0:	0021      	movs	r1, r4
 8002ad2:	187b      	adds	r3, r7, r1
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	187b      	adds	r3, r7, r1
 8002ada:	2200      	movs	r2, #0
 8002adc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ade:	187b      	adds	r3, r7, r1
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002ae4:	187b      	adds	r3, r7, r1
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aea:	187b      	adds	r3, r7, r1
 8002aec:	4a1b      	ldr	r2, [pc, #108]	@ (8002b5c <HAL_I2S_MspInit+0xdc>)
 8002aee:	0019      	movs	r1, r3
 8002af0:	0010      	movs	r0, r2
 8002af2:	f001 f86b 	bl	8003bcc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8002af6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b60 <HAL_I2S_MspInit+0xe0>)
 8002af8:	4a1a      	ldr	r2, [pc, #104]	@ (8002b64 <HAL_I2S_MspInit+0xe4>)
 8002afa:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8002afc:	4b18      	ldr	r3, [pc, #96]	@ (8002b60 <HAL_I2S_MspInit+0xe0>)
 8002afe:	2202      	movs	r2, #2
 8002b00:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b02:	4b17      	ldr	r3, [pc, #92]	@ (8002b60 <HAL_I2S_MspInit+0xe0>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b08:	4b15      	ldr	r3, [pc, #84]	@ (8002b60 <HAL_I2S_MspInit+0xe0>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b0e:	4b14      	ldr	r3, [pc, #80]	@ (8002b60 <HAL_I2S_MspInit+0xe0>)
 8002b10:	2280      	movs	r2, #128	@ 0x80
 8002b12:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b14:	4b12      	ldr	r3, [pc, #72]	@ (8002b60 <HAL_I2S_MspInit+0xe0>)
 8002b16:	2280      	movs	r2, #128	@ 0x80
 8002b18:	0052      	lsls	r2, r2, #1
 8002b1a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b1c:	4b10      	ldr	r3, [pc, #64]	@ (8002b60 <HAL_I2S_MspInit+0xe0>)
 8002b1e:	2280      	movs	r2, #128	@ 0x80
 8002b20:	00d2      	lsls	r2, r2, #3
 8002b22:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8002b24:	4b0e      	ldr	r3, [pc, #56]	@ (8002b60 <HAL_I2S_MspInit+0xe0>)
 8002b26:	2220      	movs	r2, #32
 8002b28:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b60 <HAL_I2S_MspInit+0xe0>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002b30:	4b0b      	ldr	r3, [pc, #44]	@ (8002b60 <HAL_I2S_MspInit+0xe0>)
 8002b32:	0018      	movs	r0, r3
 8002b34:	f000 fe90 	bl	8003858 <HAL_DMA_Init>
 8002b38:	1e03      	subs	r3, r0, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8002b3c:	f000 f8d2 	bl	8002ce4 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a07      	ldr	r2, [pc, #28]	@ (8002b60 <HAL_I2S_MspInit+0xe0>)
 8002b44:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b46:	4b06      	ldr	r3, [pc, #24]	@ (8002b60 <HAL_I2S_MspInit+0xe0>)
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002b4c:	46c0      	nop			@ (mov r8, r8)
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	b009      	add	sp, #36	@ 0x24
 8002b52:	bd90      	pop	{r4, r7, pc}
 8002b54:	40003800 	.word	0x40003800
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	50000400 	.word	0x50000400
 8002b60:	20000370 	.word	0x20000370
 8002b64:	40020044 	.word	0x40020044

08002b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b6e:	f000 fd25 	bl	80035bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b72:	f000 f843 	bl	8002bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b76:	f7ff fcef 	bl	8002558 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b7a:	f7ff fcc7 	bl	800250c <MX_DMA_Init>
  MX_I2C1_Init();
 8002b7e:	f7ff fdfd 	bl	800277c <MX_I2C1_Init>
  MX_I2S2_Init();
 8002b82:	f7ff ff55 	bl	8002a30 <MX_I2S2_Init>
  MX_USART4_UART_Init();
 8002b86:	f000 fa3d 	bl	8003004 <MX_USART4_UART_Init>
  MX_USART1_UART_Init();
 8002b8a:	f000 fa07 	bl	8002f9c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8002b8e:	f7ff fe35 	bl	80027fc <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 8002b92:	f000 f9d1 	bl	8002f38 <MX_LPUART1_UART_Init>
  MX_USB_PCD_Init();
 8002b96:	f000 fb95 	bl	80032c4 <MX_USB_PCD_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
 8002b9a:	f000 fd75 	bl	8003688 <HAL_GetTick>
 8002b9e:	0003      	movs	r3, r0
 8002ba0:	22fa      	movs	r2, #250	@ 0xfa
 8002ba2:	0092      	lsls	r2, r2, #2
 8002ba4:	4694      	mov	ip, r2
 8002ba6:	4463      	add	r3, ip
 8002ba8:	607b      	str	r3, [r7, #4]
  SetVerboseLevel(VERBOSE_ALL);
 8002baa:	2003      	movs	r0, #3
 8002bac:	f000 fc9a 	bl	80034e4 <SetVerboseLevel>
  BinaryReleaseInfo();
 8002bb0:	f000 fca8 	bl	8003504 <BinaryReleaseInfo>
  while (1) {
	  // Upkeep gadget
//    UpkeepGadget();
//    ESP_Upkeep();
//    Info("Hello?");
    if(TimestampIsReached(LedBlinkTimestamp)) {
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f000 fbc2 	bl	8003340 <TimestampIsReached>
 8002bbc:	1e03      	subs	r3, r0, #0
 8002bbe:	d0f9      	beq.n	8002bb4 <main+0x4c>
      // Red LED
      HAL_GPIO_TogglePin(MCU_LED_B_R_GPIO_Port, MCU_LED_B_R_Pin);
 8002bc0:	23a0      	movs	r3, #160	@ 0xa0
 8002bc2:	05db      	lsls	r3, r3, #23
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f001 f99b 	bl	8003f02 <HAL_GPIO_TogglePin>
      HAL_GPIO_WritePin(MCU_LED_B_G_GPIO_Port, MCU_LED_B_G_Pin, 1);
 8002bcc:	23a0      	movs	r3, #160	@ 0xa0
 8002bce:	05db      	lsls	r3, r3, #23
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	2104      	movs	r1, #4
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f001 f977 	bl	8003ec8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_B_B_GPIO_Port, MCU_LED_B_B_Pin, 1);
 8002bda:	23a0      	movs	r3, #160	@ 0xa0
 8002bdc:	05db      	lsls	r3, r3, #23
 8002bde:	2201      	movs	r2, #1
 8002be0:	2108      	movs	r1, #8
 8002be2:	0018      	movs	r0, r3
 8002be4:	f001 f970 	bl	8003ec8 <HAL_GPIO_WritePin>
      LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
 8002be8:	f000 fd4e 	bl	8003688 <HAL_GetTick>
 8002bec:	0003      	movs	r3, r0
 8002bee:	22fa      	movs	r2, #250	@ 0xfa
 8002bf0:	0092      	lsls	r2, r2, #2
 8002bf2:	4694      	mov	ip, r2
 8002bf4:	4463      	add	r3, ip
 8002bf6:	607b      	str	r3, [r7, #4]
    if(TimestampIsReached(LedBlinkTimestamp)) {
 8002bf8:	e7dc      	b.n	8002bb4 <main+0x4c>
	...

08002bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bfc:	b590      	push	{r4, r7, lr}
 8002bfe:	b09d      	sub	sp, #116	@ 0x74
 8002c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c02:	2438      	movs	r4, #56	@ 0x38
 8002c04:	193b      	adds	r3, r7, r4
 8002c06:	0018      	movs	r0, r3
 8002c08:	2338      	movs	r3, #56	@ 0x38
 8002c0a:	001a      	movs	r2, r3
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	f005 f9d1 	bl	8007fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c12:	2324      	movs	r3, #36	@ 0x24
 8002c14:	18fb      	adds	r3, r7, r3
 8002c16:	0018      	movs	r0, r3
 8002c18:	2314      	movs	r3, #20
 8002c1a:	001a      	movs	r2, r3
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	f005 f9c9 	bl	8007fb4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c22:	003b      	movs	r3, r7
 8002c24:	0018      	movs	r0, r3
 8002c26:	2324      	movs	r3, #36	@ 0x24
 8002c28:	001a      	movs	r2, r3
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	f005 f9c2 	bl	8007fb4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c30:	4b2a      	ldr	r3, [pc, #168]	@ (8002cdc <SystemClock_Config+0xe0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a2a      	ldr	r2, [pc, #168]	@ (8002ce0 <SystemClock_Config+0xe4>)
 8002c36:	401a      	ands	r2, r3
 8002c38:	4b28      	ldr	r3, [pc, #160]	@ (8002cdc <SystemClock_Config+0xe0>)
 8002c3a:	2180      	movs	r1, #128	@ 0x80
 8002c3c:	0109      	lsls	r1, r1, #4
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8002c42:	0021      	movs	r1, r4
 8002c44:	187b      	adds	r3, r7, r1
 8002c46:	2222      	movs	r2, #34	@ 0x22
 8002c48:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c4a:	187b      	adds	r3, r7, r1
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c50:	187b      	adds	r3, r7, r1
 8002c52:	2210      	movs	r2, #16
 8002c54:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002c56:	187b      	adds	r3, r7, r1
 8002c58:	2201      	movs	r2, #1
 8002c5a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002c5c:	187b      	adds	r3, r7, r1
 8002c5e:	2200      	movs	r2, #0
 8002c60:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c62:	187b      	adds	r3, r7, r1
 8002c64:	0018      	movs	r0, r3
 8002c66:	f002 faad 	bl	80051c4 <HAL_RCC_OscConfig>
 8002c6a:	1e03      	subs	r3, r0, #0
 8002c6c:	d001      	beq.n	8002c72 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8002c6e:	f000 f839 	bl	8002ce4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c72:	2124      	movs	r1, #36	@ 0x24
 8002c74:	187b      	adds	r3, r7, r1
 8002c76:	220f      	movs	r2, #15
 8002c78:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002c7a:	187b      	adds	r3, r7, r1
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c80:	187b      	adds	r3, r7, r1
 8002c82:	2200      	movs	r2, #0
 8002c84:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c86:	187b      	adds	r3, r7, r1
 8002c88:	2200      	movs	r2, #0
 8002c8a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c8c:	187b      	adds	r3, r7, r1
 8002c8e:	2200      	movs	r2, #0
 8002c90:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002c92:	187b      	adds	r3, r7, r1
 8002c94:	2100      	movs	r1, #0
 8002c96:	0018      	movs	r0, r3
 8002c98:	f002 fe68 	bl	800596c <HAL_RCC_ClockConfig>
 8002c9c:	1e03      	subs	r3, r0, #0
 8002c9e:	d001      	beq.n	8002ca4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002ca0:	f000 f820 	bl	8002ce4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8002ca4:	003b      	movs	r3, r7
 8002ca6:	224d      	movs	r2, #77	@ 0x4d
 8002ca8:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002caa:	003b      	movs	r3, r7
 8002cac:	2200      	movs	r2, #0
 8002cae:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002cb0:	003b      	movs	r3, r7
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002cb6:	003b      	movs	r3, r7
 8002cb8:	2200      	movs	r2, #0
 8002cba:	615a      	str	r2, [r3, #20]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002cbc:	003b      	movs	r3, r7
 8002cbe:	2280      	movs	r2, #128	@ 0x80
 8002cc0:	04d2      	lsls	r2, r2, #19
 8002cc2:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cc4:	003b      	movs	r3, r7
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f003 f874 	bl	8005db4 <HAL_RCCEx_PeriphCLKConfig>
 8002ccc:	1e03      	subs	r3, r0, #0
 8002cce:	d001      	beq.n	8002cd4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8002cd0:	f000 f808 	bl	8002ce4 <Error_Handler>
  }
}
 8002cd4:	46c0      	nop			@ (mov r8, r8)
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b01d      	add	sp, #116	@ 0x74
 8002cda:	bd90      	pop	{r4, r7, pc}
 8002cdc:	40007000 	.word	0x40007000
 8002ce0:	ffffe7ff 	.word	0xffffe7ff

08002ce4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ce8:	b672      	cpsid	i
}
 8002cea:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cec:	46c0      	nop			@ (mov r8, r8)
 8002cee:	e7fd      	b.n	8002cec <Error_Handler+0x8>

08002cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cf4:	4b07      	ldr	r3, [pc, #28]	@ (8002d14 <HAL_MspInit+0x24>)
 8002cf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cf8:	4b06      	ldr	r3, [pc, #24]	@ (8002d14 <HAL_MspInit+0x24>)
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d00:	4b04      	ldr	r3, [pc, #16]	@ (8002d14 <HAL_MspInit+0x24>)
 8002d02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d04:	4b03      	ldr	r3, [pc, #12]	@ (8002d14 <HAL_MspInit+0x24>)
 8002d06:	2180      	movs	r1, #128	@ 0x80
 8002d08:	0549      	lsls	r1, r1, #21
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d0e:	46c0      	nop			@ (mov r8, r8)
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40021000 	.word	0x40021000

08002d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d1c:	46c0      	nop			@ (mov r8, r8)
 8002d1e:	e7fd      	b.n	8002d1c <NMI_Handler+0x4>

08002d20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d24:	46c0      	nop			@ (mov r8, r8)
 8002d26:	e7fd      	b.n	8002d24 <HardFault_Handler+0x4>

08002d28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002d2c:	46c0      	nop			@ (mov r8, r8)
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d36:	46c0      	nop			@ (mov r8, r8)
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d40:	f000 fc90 	bl	8003664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d44:	46c0      	nop			@ (mov r8, r8)
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002d50:	4b05      	ldr	r3, [pc, #20]	@ (8002d68 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8002d52:	0018      	movs	r0, r3
 8002d54:	f000 fe7f 	bl	8003a56 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002d58:	4b04      	ldr	r3, [pc, #16]	@ (8002d6c <DMA1_Channel2_3_IRQHandler+0x20>)
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f000 fe7b 	bl	8003a56 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002d60:	46c0      	nop			@ (mov r8, r8)
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	46c0      	nop			@ (mov r8, r8)
 8002d68:	200002ec 	.word	0x200002ec
 8002d6c:	200002a4 	.word	0x200002a4

08002d70 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002d74:	4b07      	ldr	r3, [pc, #28]	@ (8002d94 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 8002d76:	0018      	movs	r0, r3
 8002d78:	f000 fe6d 	bl	8003a56 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8002d7c:	4b06      	ldr	r3, [pc, #24]	@ (8002d98 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f000 fe69 	bl	8003a56 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8002d84:	4b05      	ldr	r3, [pc, #20]	@ (8002d9c <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8002d86:	0018      	movs	r0, r3
 8002d88:	f000 fe65 	bl	8003a56 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8002d8c:	46c0      	nop			@ (mov r8, r8)
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	46c0      	nop			@ (mov r8, r8)
 8002d94:	20000370 	.word	0x20000370
 8002d98:	200005e4 	.word	0x200005e4
 8002d9c:	2000062c 	.word	0x2000062c

08002da0 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002da4:	4b03      	ldr	r3, [pc, #12]	@ (8002db4 <USART4_5_IRQHandler+0x14>)
 8002da6:	0018      	movs	r0, r3
 8002da8:	f003 fa66 	bl	8006278 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8002dac:	46c0      	nop			@ (mov r8, r8)
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	46c0      	nop			@ (mov r8, r8)
 8002db4:	2000052c 	.word	0x2000052c

08002db8 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8002dbc:	4b09      	ldr	r3, [pc, #36]	@ (8002de4 <I2C1_IRQHandler+0x2c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699a      	ldr	r2, [r3, #24]
 8002dc2:	23e0      	movs	r3, #224	@ 0xe0
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d004      	beq.n	8002dd4 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8002dca:	4b06      	ldr	r3, [pc, #24]	@ (8002de4 <I2C1_IRQHandler+0x2c>)
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f001 f963 	bl	8004098 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8002dd2:	e003      	b.n	8002ddc <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8002dd4:	4b03      	ldr	r3, [pc, #12]	@ (8002de4 <I2C1_IRQHandler+0x2c>)
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	f001 f944 	bl	8004064 <HAL_I2C_EV_IRQHandler>
}
 8002ddc:	46c0      	nop			@ (mov r8, r8)
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	46c0      	nop			@ (mov r8, r8)
 8002de4:	200001fc 	.word	0x200001fc

08002de8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  return 1;
 8002dec:	2301      	movs	r3, #1
}
 8002dee:	0018      	movs	r0, r3
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <_kill>:

int _kill(int pid, int sig)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002dfe:	f005 f933 	bl	8008068 <__errno>
 8002e02:	0003      	movs	r3, r0
 8002e04:	2216      	movs	r2, #22
 8002e06:	601a      	str	r2, [r3, #0]
  return -1;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	425b      	negs	r3, r3
}
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b002      	add	sp, #8
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <_exit>:

void _exit (int status)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	425a      	negs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	0011      	movs	r1, r2
 8002e24:	0018      	movs	r0, r3
 8002e26:	f7ff ffe5 	bl	8002df4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e2a:	46c0      	nop			@ (mov r8, r8)
 8002e2c:	e7fd      	b.n	8002e2a <_exit+0x16>

08002e2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b086      	sub	sp, #24
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	e00a      	b.n	8002e56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e40:	e000      	b.n	8002e44 <_read+0x16>
 8002e42:	bf00      	nop
 8002e44:	0001      	movs	r1, r0
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	60ba      	str	r2, [r7, #8]
 8002e4c:	b2ca      	uxtb	r2, r1
 8002e4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	3301      	adds	r3, #1
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	dbf0      	blt.n	8002e40 <_read+0x12>
  }

  return len;
 8002e5e:	687b      	ldr	r3, [r7, #4]
}
 8002e60:	0018      	movs	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b006      	add	sp, #24
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e70:	2301      	movs	r3, #1
 8002e72:	425b      	negs	r3, r3
}
 8002e74:	0018      	movs	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b002      	add	sp, #8
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2280      	movs	r2, #128	@ 0x80
 8002e8a:	0192      	lsls	r2, r2, #6
 8002e8c:	605a      	str	r2, [r3, #4]
  return 0;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	0018      	movs	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b002      	add	sp, #8
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <_isatty>:

int _isatty(int file)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ea0:	2301      	movs	r3, #1
}
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b002      	add	sp, #8
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b084      	sub	sp, #16
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	0018      	movs	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b004      	add	sp, #16
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ec8:	4a14      	ldr	r2, [pc, #80]	@ (8002f1c <_sbrk+0x5c>)
 8002eca:	4b15      	ldr	r3, [pc, #84]	@ (8002f20 <_sbrk+0x60>)
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ed4:	4b13      	ldr	r3, [pc, #76]	@ (8002f24 <_sbrk+0x64>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d102      	bne.n	8002ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002edc:	4b11      	ldr	r3, [pc, #68]	@ (8002f24 <_sbrk+0x64>)
 8002ede:	4a12      	ldr	r2, [pc, #72]	@ (8002f28 <_sbrk+0x68>)
 8002ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ee2:	4b10      	ldr	r3, [pc, #64]	@ (8002f24 <_sbrk+0x64>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	18d3      	adds	r3, r2, r3
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d207      	bcs.n	8002f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ef0:	f005 f8ba 	bl	8008068 <__errno>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	220c      	movs	r2, #12
 8002ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002efa:	2301      	movs	r3, #1
 8002efc:	425b      	negs	r3, r3
 8002efe:	e009      	b.n	8002f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f00:	4b08      	ldr	r3, [pc, #32]	@ (8002f24 <_sbrk+0x64>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f06:	4b07      	ldr	r3, [pc, #28]	@ (8002f24 <_sbrk+0x64>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	18d2      	adds	r2, r2, r3
 8002f0e:	4b05      	ldr	r3, [pc, #20]	@ (8002f24 <_sbrk+0x64>)
 8002f10:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002f12:	68fb      	ldr	r3, [r7, #12]
}
 8002f14:	0018      	movs	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b006      	add	sp, #24
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20005000 	.word	0x20005000
 8002f20:	00000400 	.word	0x00000400
 8002f24:	200003b8 	.word	0x200003b8
 8002f28:	20000ab8 	.word	0x20000ab8

08002f2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f30:	46c0      	nop			@ (mov r8, r8)
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002f3c:	4b15      	ldr	r3, [pc, #84]	@ (8002f94 <MX_LPUART1_UART_Init+0x5c>)
 8002f3e:	4a16      	ldr	r2, [pc, #88]	@ (8002f98 <MX_LPUART1_UART_Init+0x60>)
 8002f40:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002f42:	4b14      	ldr	r3, [pc, #80]	@ (8002f94 <MX_LPUART1_UART_Init+0x5c>)
 8002f44:	22e1      	movs	r2, #225	@ 0xe1
 8002f46:	0252      	lsls	r2, r2, #9
 8002f48:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f4a:	4b12      	ldr	r3, [pc, #72]	@ (8002f94 <MX_LPUART1_UART_Init+0x5c>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002f50:	4b10      	ldr	r3, [pc, #64]	@ (8002f94 <MX_LPUART1_UART_Init+0x5c>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002f56:	4b0f      	ldr	r3, [pc, #60]	@ (8002f94 <MX_LPUART1_UART_Init+0x5c>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8002f94 <MX_LPUART1_UART_Init+0x5c>)
 8002f5e:	220c      	movs	r2, #12
 8002f60:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f62:	4b0c      	ldr	r3, [pc, #48]	@ (8002f94 <MX_LPUART1_UART_Init+0x5c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f68:	4b0a      	ldr	r3, [pc, #40]	@ (8002f94 <MX_LPUART1_UART_Init+0x5c>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8002f6e:	4b09      	ldr	r3, [pc, #36]	@ (8002f94 <MX_LPUART1_UART_Init+0x5c>)
 8002f70:	2208      	movs	r2, #8
 8002f72:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8002f74:	4b07      	ldr	r3, [pc, #28]	@ (8002f94 <MX_LPUART1_UART_Init+0x5c>)
 8002f76:	2280      	movs	r2, #128	@ 0x80
 8002f78:	0212      	lsls	r2, r2, #8
 8002f7a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002f7c:	4b05      	ldr	r3, [pc, #20]	@ (8002f94 <MX_LPUART1_UART_Init+0x5c>)
 8002f7e:	0018      	movs	r0, r3
 8002f80:	f003 f874 	bl	800606c <HAL_UART_Init>
 8002f84:	1e03      	subs	r3, r0, #0
 8002f86:	d001      	beq.n	8002f8c <MX_LPUART1_UART_Init+0x54>
  {
    Error_Handler();
 8002f88:	f7ff feac 	bl	8002ce4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002f8c:	46c0      	nop			@ (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	46c0      	nop			@ (mov r8, r8)
 8002f94:	200003bc 	.word	0x200003bc
 8002f98:	40004800 	.word	0x40004800

08002f9c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fa0:	4b16      	ldr	r3, [pc, #88]	@ (8002ffc <MX_USART1_UART_Init+0x60>)
 8002fa2:	4a17      	ldr	r2, [pc, #92]	@ (8003000 <MX_USART1_UART_Init+0x64>)
 8002fa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fa6:	4b15      	ldr	r3, [pc, #84]	@ (8002ffc <MX_USART1_UART_Init+0x60>)
 8002fa8:	22e1      	movs	r2, #225	@ 0xe1
 8002faa:	0252      	lsls	r2, r2, #9
 8002fac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fae:	4b13      	ldr	r3, [pc, #76]	@ (8002ffc <MX_USART1_UART_Init+0x60>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fb4:	4b11      	ldr	r3, [pc, #68]	@ (8002ffc <MX_USART1_UART_Init+0x60>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fba:	4b10      	ldr	r3, [pc, #64]	@ (8002ffc <MX_USART1_UART_Init+0x60>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8002ffc <MX_USART1_UART_Init+0x60>)
 8002fc2:	220c      	movs	r2, #12
 8002fc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002ffc <MX_USART1_UART_Init+0x60>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002ffc <MX_USART1_UART_Init+0x60>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ffc <MX_USART1_UART_Init+0x60>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8002fd8:	4b08      	ldr	r3, [pc, #32]	@ (8002ffc <MX_USART1_UART_Init+0x60>)
 8002fda:	2208      	movs	r2, #8
 8002fdc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8002fde:	4b07      	ldr	r3, [pc, #28]	@ (8002ffc <MX_USART1_UART_Init+0x60>)
 8002fe0:	2280      	movs	r2, #128	@ 0x80
 8002fe2:	0212      	lsls	r2, r2, #8
 8002fe4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002fe6:	4b05      	ldr	r3, [pc, #20]	@ (8002ffc <MX_USART1_UART_Init+0x60>)
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f003 f83f 	bl	800606c <HAL_UART_Init>
 8002fee:	1e03      	subs	r3, r0, #0
 8002ff0:	d001      	beq.n	8002ff6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002ff2:	f7ff fe77 	bl	8002ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ff6:	46c0      	nop			@ (mov r8, r8)
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	20000474 	.word	0x20000474
 8003000:	40013800 	.word	0x40013800

08003004 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8003008:	4b14      	ldr	r3, [pc, #80]	@ (800305c <MX_USART4_UART_Init+0x58>)
 800300a:	4a15      	ldr	r2, [pc, #84]	@ (8003060 <MX_USART4_UART_Init+0x5c>)
 800300c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800300e:	4b13      	ldr	r3, [pc, #76]	@ (800305c <MX_USART4_UART_Init+0x58>)
 8003010:	22e1      	movs	r2, #225	@ 0xe1
 8003012:	0252      	lsls	r2, r2, #9
 8003014:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003016:	4b11      	ldr	r3, [pc, #68]	@ (800305c <MX_USART4_UART_Init+0x58>)
 8003018:	2200      	movs	r2, #0
 800301a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800301c:	4b0f      	ldr	r3, [pc, #60]	@ (800305c <MX_USART4_UART_Init+0x58>)
 800301e:	2200      	movs	r2, #0
 8003020:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003022:	4b0e      	ldr	r3, [pc, #56]	@ (800305c <MX_USART4_UART_Init+0x58>)
 8003024:	2200      	movs	r2, #0
 8003026:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003028:	4b0c      	ldr	r3, [pc, #48]	@ (800305c <MX_USART4_UART_Init+0x58>)
 800302a:	220c      	movs	r2, #12
 800302c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800302e:	4b0b      	ldr	r3, [pc, #44]	@ (800305c <MX_USART4_UART_Init+0x58>)
 8003030:	2200      	movs	r2, #0
 8003032:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003034:	4b09      	ldr	r3, [pc, #36]	@ (800305c <MX_USART4_UART_Init+0x58>)
 8003036:	2200      	movs	r2, #0
 8003038:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800303a:	4b08      	ldr	r3, [pc, #32]	@ (800305c <MX_USART4_UART_Init+0x58>)
 800303c:	2200      	movs	r2, #0
 800303e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003040:	4b06      	ldr	r3, [pc, #24]	@ (800305c <MX_USART4_UART_Init+0x58>)
 8003042:	2200      	movs	r2, #0
 8003044:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003046:	4b05      	ldr	r3, [pc, #20]	@ (800305c <MX_USART4_UART_Init+0x58>)
 8003048:	0018      	movs	r0, r3
 800304a:	f003 f80f 	bl	800606c <HAL_UART_Init>
 800304e:	1e03      	subs	r3, r0, #0
 8003050:	d001      	beq.n	8003056 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8003052:	f7ff fe47 	bl	8002ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8003056:	46c0      	nop			@ (mov r8, r8)
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	2000052c 	.word	0x2000052c
 8003060:	40004c00 	.word	0x40004c00

08003064 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003064:	b590      	push	{r4, r7, lr}
 8003066:	b08d      	sub	sp, #52	@ 0x34
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800306c:	241c      	movs	r4, #28
 800306e:	193b      	adds	r3, r7, r4
 8003070:	0018      	movs	r0, r3
 8003072:	2314      	movs	r3, #20
 8003074:	001a      	movs	r2, r3
 8003076:	2100      	movs	r1, #0
 8003078:	f004 ff9c 	bl	8007fb4 <memset>
  if(uartHandle->Instance==LPUART1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a87      	ldr	r2, [pc, #540]	@ (80032a0 <HAL_UART_MspInit+0x23c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d129      	bne.n	80030da <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003086:	4b87      	ldr	r3, [pc, #540]	@ (80032a4 <HAL_UART_MspInit+0x240>)
 8003088:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800308a:	4b86      	ldr	r3, [pc, #536]	@ (80032a4 <HAL_UART_MspInit+0x240>)
 800308c:	2180      	movs	r1, #128	@ 0x80
 800308e:	02c9      	lsls	r1, r1, #11
 8003090:	430a      	orrs	r2, r1
 8003092:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003094:	4b83      	ldr	r3, [pc, #524]	@ (80032a4 <HAL_UART_MspInit+0x240>)
 8003096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003098:	4b82      	ldr	r3, [pc, #520]	@ (80032a4 <HAL_UART_MspInit+0x240>)
 800309a:	2104      	movs	r1, #4
 800309c:	430a      	orrs	r2, r1
 800309e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80030a0:	4b80      	ldr	r3, [pc, #512]	@ (80032a4 <HAL_UART_MspInit+0x240>)
 80030a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a4:	2204      	movs	r2, #4
 80030a6:	4013      	ands	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
 80030aa:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80030ac:	0021      	movs	r1, r4
 80030ae:	187b      	adds	r3, r7, r1
 80030b0:	2203      	movs	r2, #3
 80030b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b4:	187b      	adds	r3, r7, r1
 80030b6:	2202      	movs	r2, #2
 80030b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ba:	187b      	adds	r3, r7, r1
 80030bc:	2200      	movs	r2, #0
 80030be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c0:	187b      	adds	r3, r7, r1
 80030c2:	2203      	movs	r2, #3
 80030c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80030c6:	187b      	adds	r3, r7, r1
 80030c8:	2206      	movs	r2, #6
 80030ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030cc:	187b      	adds	r3, r7, r1
 80030ce:	4a76      	ldr	r2, [pc, #472]	@ (80032a8 <HAL_UART_MspInit+0x244>)
 80030d0:	0019      	movs	r1, r3
 80030d2:	0010      	movs	r0, r2
 80030d4:	f000 fd7a 	bl	8003bcc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 80030d8:	e0dd      	b.n	8003296 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART1)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a73      	ldr	r2, [pc, #460]	@ (80032ac <HAL_UART_MspInit+0x248>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d12b      	bne.n	800313c <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART1_CLK_ENABLE();
 80030e4:	4b6f      	ldr	r3, [pc, #444]	@ (80032a4 <HAL_UART_MspInit+0x240>)
 80030e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030e8:	4b6e      	ldr	r3, [pc, #440]	@ (80032a4 <HAL_UART_MspInit+0x240>)
 80030ea:	2180      	movs	r1, #128	@ 0x80
 80030ec:	01c9      	lsls	r1, r1, #7
 80030ee:	430a      	orrs	r2, r1
 80030f0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f2:	4b6c      	ldr	r3, [pc, #432]	@ (80032a4 <HAL_UART_MspInit+0x240>)
 80030f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030f6:	4b6b      	ldr	r3, [pc, #428]	@ (80032a4 <HAL_UART_MspInit+0x240>)
 80030f8:	2101      	movs	r1, #1
 80030fa:	430a      	orrs	r2, r1
 80030fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80030fe:	4b69      	ldr	r3, [pc, #420]	@ (80032a4 <HAL_UART_MspInit+0x240>)
 8003100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003102:	2201      	movs	r2, #1
 8003104:	4013      	ands	r3, r2
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800310a:	211c      	movs	r1, #28
 800310c:	187b      	adds	r3, r7, r1
 800310e:	22c0      	movs	r2, #192	@ 0xc0
 8003110:	00d2      	lsls	r2, r2, #3
 8003112:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003114:	187b      	adds	r3, r7, r1
 8003116:	2202      	movs	r2, #2
 8003118:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311a:	187b      	adds	r3, r7, r1
 800311c:	2200      	movs	r2, #0
 800311e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003120:	187b      	adds	r3, r7, r1
 8003122:	2203      	movs	r2, #3
 8003124:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003126:	187b      	adds	r3, r7, r1
 8003128:	2204      	movs	r2, #4
 800312a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800312c:	187a      	adds	r2, r7, r1
 800312e:	23a0      	movs	r3, #160	@ 0xa0
 8003130:	05db      	lsls	r3, r3, #23
 8003132:	0011      	movs	r1, r2
 8003134:	0018      	movs	r0, r3
 8003136:	f000 fd49 	bl	8003bcc <HAL_GPIO_Init>
}
 800313a:	e0ac      	b.n	8003296 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART4)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a5b      	ldr	r2, [pc, #364]	@ (80032b0 <HAL_UART_MspInit+0x24c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d000      	beq.n	8003148 <HAL_UART_MspInit+0xe4>
 8003146:	e0a6      	b.n	8003296 <HAL_UART_MspInit+0x232>
    __HAL_RCC_USART4_CLK_ENABLE();
 8003148:	4b56      	ldr	r3, [pc, #344]	@ (80032a4 <HAL_UART_MspInit+0x240>)
 800314a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800314c:	4b55      	ldr	r3, [pc, #340]	@ (80032a4 <HAL_UART_MspInit+0x240>)
 800314e:	2180      	movs	r1, #128	@ 0x80
 8003150:	0309      	lsls	r1, r1, #12
 8003152:	430a      	orrs	r2, r1
 8003154:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003156:	4b53      	ldr	r3, [pc, #332]	@ (80032a4 <HAL_UART_MspInit+0x240>)
 8003158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800315a:	4b52      	ldr	r3, [pc, #328]	@ (80032a4 <HAL_UART_MspInit+0x240>)
 800315c:	2101      	movs	r1, #1
 800315e:	430a      	orrs	r2, r1
 8003160:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003162:	4b50      	ldr	r3, [pc, #320]	@ (80032a4 <HAL_UART_MspInit+0x240>)
 8003164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003166:	2201      	movs	r2, #1
 8003168:	4013      	ands	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800316e:	4b4d      	ldr	r3, [pc, #308]	@ (80032a4 <HAL_UART_MspInit+0x240>)
 8003170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003172:	4b4c      	ldr	r3, [pc, #304]	@ (80032a4 <HAL_UART_MspInit+0x240>)
 8003174:	2104      	movs	r1, #4
 8003176:	430a      	orrs	r2, r1
 8003178:	62da      	str	r2, [r3, #44]	@ 0x2c
 800317a:	4b4a      	ldr	r3, [pc, #296]	@ (80032a4 <HAL_UART_MspInit+0x240>)
 800317c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317e:	2204      	movs	r2, #4
 8003180:	4013      	ands	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003186:	241c      	movs	r4, #28
 8003188:	193b      	adds	r3, r7, r4
 800318a:	2202      	movs	r2, #2
 800318c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800318e:	193b      	adds	r3, r7, r4
 8003190:	2202      	movs	r2, #2
 8003192:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003194:	193b      	adds	r3, r7, r4
 8003196:	2200      	movs	r2, #0
 8003198:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800319a:	193b      	adds	r3, r7, r4
 800319c:	2203      	movs	r2, #3
 800319e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80031a0:	193b      	adds	r3, r7, r4
 80031a2:	2206      	movs	r2, #6
 80031a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a6:	193a      	adds	r2, r7, r4
 80031a8:	23a0      	movs	r3, #160	@ 0xa0
 80031aa:	05db      	lsls	r3, r3, #23
 80031ac:	0011      	movs	r1, r2
 80031ae:	0018      	movs	r0, r3
 80031b0:	f000 fd0c 	bl	8003bcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031b4:	0021      	movs	r1, r4
 80031b6:	187b      	adds	r3, r7, r1
 80031b8:	2280      	movs	r2, #128	@ 0x80
 80031ba:	00d2      	lsls	r2, r2, #3
 80031bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031be:	187b      	adds	r3, r7, r1
 80031c0:	2202      	movs	r2, #2
 80031c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c4:	187b      	adds	r3, r7, r1
 80031c6:	2200      	movs	r2, #0
 80031c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ca:	187b      	adds	r3, r7, r1
 80031cc:	2203      	movs	r2, #3
 80031ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80031d0:	187b      	adds	r3, r7, r1
 80031d2:	2206      	movs	r2, #6
 80031d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031d6:	187b      	adds	r3, r7, r1
 80031d8:	4a33      	ldr	r2, [pc, #204]	@ (80032a8 <HAL_UART_MspInit+0x244>)
 80031da:	0019      	movs	r1, r3
 80031dc:	0010      	movs	r0, r2
 80031de:	f000 fcf5 	bl	8003bcc <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 80031e2:	4b34      	ldr	r3, [pc, #208]	@ (80032b4 <HAL_UART_MspInit+0x250>)
 80031e4:	4a34      	ldr	r2, [pc, #208]	@ (80032b8 <HAL_UART_MspInit+0x254>)
 80031e6:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 80031e8:	4b32      	ldr	r3, [pc, #200]	@ (80032b4 <HAL_UART_MspInit+0x250>)
 80031ea:	220c      	movs	r2, #12
 80031ec:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031ee:	4b31      	ldr	r3, [pc, #196]	@ (80032b4 <HAL_UART_MspInit+0x250>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031f4:	4b2f      	ldr	r3, [pc, #188]	@ (80032b4 <HAL_UART_MspInit+0x250>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80031fa:	4b2e      	ldr	r3, [pc, #184]	@ (80032b4 <HAL_UART_MspInit+0x250>)
 80031fc:	2280      	movs	r2, #128	@ 0x80
 80031fe:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003200:	4b2c      	ldr	r3, [pc, #176]	@ (80032b4 <HAL_UART_MspInit+0x250>)
 8003202:	2200      	movs	r2, #0
 8003204:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003206:	4b2b      	ldr	r3, [pc, #172]	@ (80032b4 <HAL_UART_MspInit+0x250>)
 8003208:	2200      	movs	r2, #0
 800320a:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 800320c:	4b29      	ldr	r3, [pc, #164]	@ (80032b4 <HAL_UART_MspInit+0x250>)
 800320e:	2200      	movs	r2, #0
 8003210:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003212:	4b28      	ldr	r3, [pc, #160]	@ (80032b4 <HAL_UART_MspInit+0x250>)
 8003214:	2200      	movs	r2, #0
 8003216:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8003218:	4b26      	ldr	r3, [pc, #152]	@ (80032b4 <HAL_UART_MspInit+0x250>)
 800321a:	0018      	movs	r0, r3
 800321c:	f000 fb1c 	bl	8003858 <HAL_DMA_Init>
 8003220:	1e03      	subs	r3, r0, #0
 8003222:	d001      	beq.n	8003228 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 8003224:	f7ff fd5e 	bl	8002ce4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a22      	ldr	r2, [pc, #136]	@ (80032b4 <HAL_UART_MspInit+0x250>)
 800322c:	675a      	str	r2, [r3, #116]	@ 0x74
 800322e:	4b21      	ldr	r3, [pc, #132]	@ (80032b4 <HAL_UART_MspInit+0x250>)
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8003234:	4b21      	ldr	r3, [pc, #132]	@ (80032bc <HAL_UART_MspInit+0x258>)
 8003236:	4a22      	ldr	r2, [pc, #136]	@ (80032c0 <HAL_UART_MspInit+0x25c>)
 8003238:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800323a:	4b20      	ldr	r3, [pc, #128]	@ (80032bc <HAL_UART_MspInit+0x258>)
 800323c:	220c      	movs	r2, #12
 800323e:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003240:	4b1e      	ldr	r3, [pc, #120]	@ (80032bc <HAL_UART_MspInit+0x258>)
 8003242:	2210      	movs	r2, #16
 8003244:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003246:	4b1d      	ldr	r3, [pc, #116]	@ (80032bc <HAL_UART_MspInit+0x258>)
 8003248:	2200      	movs	r2, #0
 800324a:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800324c:	4b1b      	ldr	r3, [pc, #108]	@ (80032bc <HAL_UART_MspInit+0x258>)
 800324e:	2280      	movs	r2, #128	@ 0x80
 8003250:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003252:	4b1a      	ldr	r3, [pc, #104]	@ (80032bc <HAL_UART_MspInit+0x258>)
 8003254:	2200      	movs	r2, #0
 8003256:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003258:	4b18      	ldr	r3, [pc, #96]	@ (80032bc <HAL_UART_MspInit+0x258>)
 800325a:	2200      	movs	r2, #0
 800325c:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800325e:	4b17      	ldr	r3, [pc, #92]	@ (80032bc <HAL_UART_MspInit+0x258>)
 8003260:	2200      	movs	r2, #0
 8003262:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003264:	4b15      	ldr	r3, [pc, #84]	@ (80032bc <HAL_UART_MspInit+0x258>)
 8003266:	2200      	movs	r2, #0
 8003268:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800326a:	4b14      	ldr	r3, [pc, #80]	@ (80032bc <HAL_UART_MspInit+0x258>)
 800326c:	0018      	movs	r0, r3
 800326e:	f000 faf3 	bl	8003858 <HAL_DMA_Init>
 8003272:	1e03      	subs	r3, r0, #0
 8003274:	d001      	beq.n	800327a <HAL_UART_MspInit+0x216>
      Error_Handler();
 8003276:	f7ff fd35 	bl	8002ce4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a0f      	ldr	r2, [pc, #60]	@ (80032bc <HAL_UART_MspInit+0x258>)
 800327e:	671a      	str	r2, [r3, #112]	@ 0x70
 8003280:	4b0e      	ldr	r3, [pc, #56]	@ (80032bc <HAL_UART_MspInit+0x258>)
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8003286:	2200      	movs	r2, #0
 8003288:	2100      	movs	r1, #0
 800328a:	200e      	movs	r0, #14
 800328c:	f000 fab2 	bl	80037f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8003290:	200e      	movs	r0, #14
 8003292:	f000 fac4 	bl	800381e <HAL_NVIC_EnableIRQ>
}
 8003296:	46c0      	nop			@ (mov r8, r8)
 8003298:	46bd      	mov	sp, r7
 800329a:	b00d      	add	sp, #52	@ 0x34
 800329c:	bd90      	pop	{r4, r7, pc}
 800329e:	46c0      	nop			@ (mov r8, r8)
 80032a0:	40004800 	.word	0x40004800
 80032a4:	40021000 	.word	0x40021000
 80032a8:	50000800 	.word	0x50000800
 80032ac:	40013800 	.word	0x40013800
 80032b0:	40004c00 	.word	0x40004c00
 80032b4:	200005e4 	.word	0x200005e4
 80032b8:	4002006c 	.word	0x4002006c
 80032bc:	2000062c 	.word	0x2000062c
 80032c0:	40020080 	.word	0x40020080

080032c4 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80032c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003308 <MX_USB_PCD_Init+0x44>)
 80032ca:	4a10      	ldr	r2, [pc, #64]	@ (800330c <MX_USB_PCD_Init+0x48>)
 80032cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80032ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003308 <MX_USB_PCD_Init+0x44>)
 80032d0:	2208      	movs	r2, #8
 80032d2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80032d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003308 <MX_USB_PCD_Init+0x44>)
 80032d6:	2202      	movs	r2, #2
 80032d8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80032da:	4b0b      	ldr	r3, [pc, #44]	@ (8003308 <MX_USB_PCD_Init+0x44>)
 80032dc:	2202      	movs	r2, #2
 80032de:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80032e0:	4b09      	ldr	r3, [pc, #36]	@ (8003308 <MX_USB_PCD_Init+0x44>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80032e6:	4b08      	ldr	r3, [pc, #32]	@ (8003308 <MX_USB_PCD_Init+0x44>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80032ec:	4b06      	ldr	r3, [pc, #24]	@ (8003308 <MX_USB_PCD_Init+0x44>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80032f2:	4b05      	ldr	r3, [pc, #20]	@ (8003308 <MX_USB_PCD_Init+0x44>)
 80032f4:	0018      	movs	r0, r3
 80032f6:	f001 fe3b 	bl	8004f70 <HAL_PCD_Init>
 80032fa:	1e03      	subs	r3, r0, #0
 80032fc:	d001      	beq.n	8003302 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80032fe:	f7ff fcf1 	bl	8002ce4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8003302:	46c0      	nop			@ (mov r8, r8)
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20000674 	.word	0x20000674
 800330c:	40005c00 	.word	0x40005c00

08003310 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a06      	ldr	r2, [pc, #24]	@ (8003338 <HAL_PCD_MspInit+0x28>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d106      	bne.n	8003330 <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003322:	4b06      	ldr	r3, [pc, #24]	@ (800333c <HAL_PCD_MspInit+0x2c>)
 8003324:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003326:	4b05      	ldr	r3, [pc, #20]	@ (800333c <HAL_PCD_MspInit+0x2c>)
 8003328:	2180      	movs	r1, #128	@ 0x80
 800332a:	0409      	lsls	r1, r1, #16
 800332c:	430a      	orrs	r2, r1
 800332e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003330:	46c0      	nop			@ (mov r8, r8)
 8003332:	46bd      	mov	sp, r7
 8003334:	b002      	add	sp, #8
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40005c00 	.word	0x40005c00
 800333c:	40021000 	.word	0x40021000

08003340 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 1024

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8003348:	f000 f99e 	bl	8003688 <HAL_GetTick>
 800334c:	0003      	movs	r3, r0
 800334e:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8003350:	4b1c      	ldr	r3, [pc, #112]	@ (80033c4 <TimestampIsReached+0x84>)
 8003352:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	429a      	cmp	r2, r3
 800335a:	d307      	bcc.n	800336c <TimestampIsReached+0x2c>
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	429a      	cmp	r2, r3
 8003366:	d901      	bls.n	800336c <TimestampIsReached+0x2c>
 8003368:	2201      	movs	r2, #1
 800336a:	e000      	b.n	800336e <TimestampIsReached+0x2e>
 800336c:	2200      	movs	r2, #0
 800336e:	230f      	movs	r3, #15
 8003370:	18fb      	adds	r3, r7, r3
 8003372:	701a      	strb	r2, [r3, #0]
 8003374:	781a      	ldrb	r2, [r3, #0]
 8003376:	2101      	movs	r1, #1
 8003378:	400a      	ands	r2, r1
 800337a:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	429a      	cmp	r2, r3
 8003382:	d207      	bcs.n	8003394 <TimestampIsReached+0x54>
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	429a      	cmp	r2, r3
 800338e:	d201      	bcs.n	8003394 <TimestampIsReached+0x54>
 8003390:	2201      	movs	r2, #1
 8003392:	e000      	b.n	8003396 <TimestampIsReached+0x56>
 8003394:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8003396:	200e      	movs	r0, #14
 8003398:	183b      	adds	r3, r7, r0
 800339a:	701a      	strb	r2, [r3, #0]
 800339c:	781a      	ldrb	r2, [r3, #0]
 800339e:	2101      	movs	r1, #1
 80033a0:	400a      	ands	r2, r1
 80033a2:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 80033a4:	230f      	movs	r3, #15
 80033a6:	18fb      	adds	r3, r7, r3
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d103      	bne.n	80033b6 <TimestampIsReached+0x76>
 80033ae:	183b      	adds	r3, r7, r0
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	0018      	movs	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	b006      	add	sp, #24
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	7fffffff 	.word	0x7fffffff

080033c8 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 80033d0:	f000 f95a 	bl	8003688 <HAL_GetTick>
 80033d4:	0002      	movs	r2, r0
 80033d6:	4904      	ldr	r1, [pc, #16]	@ (80033e8 <AddTimestamp+0x20>)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	0018      	movs	r0, r3
 80033dc:	f004 fd46 	bl	8007e6c <siprintf>
}
 80033e0:	46c0      	nop			@ (mov r8, r8)
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b002      	add	sp, #8
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	0800a35c 	.word	0x0800a35c

080033ec <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 80033ec:	b40c      	push	{r2, r3}
 80033ee:	b5b0      	push	{r4, r5, r7, lr}
 80033f0:	4c2b      	ldr	r4, [pc, #172]	@ (80034a0 <CreateLine+0xb4>)
 80033f2:	44a5      	add	sp, r4
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	0002      	movs	r2, r0
 80033f8:	6039      	str	r1, [r7, #0]
 80033fa:	4b2a      	ldr	r3, [pc, #168]	@ (80034a4 <CreateLine+0xb8>)
 80033fc:	2182      	movs	r1, #130	@ 0x82
 80033fe:	00c9      	lsls	r1, r1, #3
 8003400:	185b      	adds	r3, r3, r1
 8003402:	19db      	adds	r3, r3, r7
 8003404:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8003406:	4b28      	ldr	r3, [pc, #160]	@ (80034a8 <CreateLine+0xbc>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	4a26      	ldr	r2, [pc, #152]	@ (80034a4 <CreateLine+0xb8>)
 800340c:	1852      	adds	r2, r2, r1
 800340e:	19d2      	adds	r2, r2, r7
 8003410:	7812      	ldrb	r2, [r2, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d83b      	bhi.n	800348e <CreateLine+0xa2>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	4924      	ldr	r1, [pc, #144]	@ (80034ac <CreateLine+0xc0>)
 800341a:	240c      	movs	r4, #12
 800341c:	193b      	adds	r3, r7, r4
 800341e:	0018      	movs	r0, r3
 8003420:	f004 fd24 	bl	8007e6c <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8003424:	4b20      	ldr	r3, [pc, #128]	@ (80034a8 <CreateLine+0xbc>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d909      	bls.n	8003440 <CreateLine+0x54>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800342c:	193b      	adds	r3, r7, r4
 800342e:	0018      	movs	r0, r3
 8003430:	f7fc fe6a 	bl	8000108 <strlen>
 8003434:	0002      	movs	r2, r0
 8003436:	193b      	adds	r3, r7, r4
 8003438:	189b      	adds	r3, r3, r2
 800343a:	0018      	movs	r0, r3
 800343c:	f7ff ffc4 	bl	80033c8 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8003440:	240c      	movs	r4, #12
 8003442:	193b      	adds	r3, r7, r4
 8003444:	0018      	movs	r0, r3
 8003446:	f7fc fe5f 	bl	8000108 <strlen>
 800344a:	0003      	movs	r3, r0
 800344c:	4918      	ldr	r1, [pc, #96]	@ (80034b0 <CreateLine+0xc4>)
 800344e:	187a      	adds	r2, r7, r1
 8003450:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8003452:	4b18      	ldr	r3, [pc, #96]	@ (80034b4 <CreateLine+0xc8>)
 8003454:	2508      	movs	r5, #8
 8003456:	195b      	adds	r3, r3, r5
 8003458:	19db      	adds	r3, r3, r7
 800345a:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800345c:	193a      	adds	r2, r7, r4
 800345e:	187b      	adds	r3, r7, r1
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	18d0      	adds	r0, r2, r3
 8003464:	187b      	adds	r3, r7, r1
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2280      	movs	r2, #128	@ 0x80
 800346a:	00d2      	lsls	r2, r2, #3
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	0019      	movs	r1, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2283      	movs	r2, #131	@ 0x83
 8003474:	00d2      	lsls	r2, r2, #3
 8003476:	1952      	adds	r2, r2, r5
 8003478:	19d2      	adds	r2, r2, r7
 800347a:	6812      	ldr	r2, [r2, #0]
 800347c:	f004 fd8e 	bl	8007f9c <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 8003480:	193a      	adds	r2, r7, r4
 8003482:	4b0d      	ldr	r3, [pc, #52]	@ (80034b8 <CreateLine+0xcc>)
 8003484:	0011      	movs	r1, r2
 8003486:	0018      	movs	r0, r3
 8003488:	f004 fce0 	bl	8007e4c <iprintf>
 800348c:	e000      	b.n	8003490 <CreateLine+0xa4>
    return;
 800348e:	46c0      	nop			@ (mov r8, r8)
}
 8003490:	46bd      	mov	sp, r7
 8003492:	2382      	movs	r3, #130	@ 0x82
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	449d      	add	sp, r3
 8003498:	bcb0      	pop	{r4, r5, r7}
 800349a:	bc08      	pop	{r3}
 800349c:	b002      	add	sp, #8
 800349e:	4718      	bx	r3
 80034a0:	fffffbf0 	.word	0xfffffbf0
 80034a4:	fffffbf7 	.word	0xfffffbf7
 80034a8:	20000004 	.word	0x20000004
 80034ac:	0800a368 	.word	0x0800a368
 80034b0:	0000040c 	.word	0x0000040c
 80034b4:	0000041c 	.word	0x0000041c
 80034b8:	0800a36c 	.word	0x0800a36c

080034bc <_write>:

int _write(int fd, const void *buf, size_t count) {
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	4804      	ldr	r0, [pc, #16]	@ (80034e0 <_write+0x24>)
 80034d0:	2364      	movs	r3, #100	@ 0x64
 80034d2:	f002 fe31 	bl	8006138 <HAL_UART_Transmit>
  return count;
 80034d6:	687b      	ldr	r3, [r7, #4]
}
 80034d8:	0018      	movs	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	b004      	add	sp, #16
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20000474 	.word	0x20000474

080034e4 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	0002      	movs	r2, r0
 80034ec:	1dfb      	adds	r3, r7, #7
 80034ee:	701a      	strb	r2, [r3, #0]
 80034f0:	4b03      	ldr	r3, [pc, #12]	@ (8003500 <SetVerboseLevel+0x1c>)
 80034f2:	1dfa      	adds	r2, r7, #7
 80034f4:	7812      	ldrb	r2, [r2, #0]
 80034f6:	701a      	strb	r2, [r3, #0]
 80034f8:	46c0      	nop			@ (mov r8, r8)
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b002      	add	sp, #8
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	20000004 	.word	0x20000004

08003504 <BinaryReleaseInfo>:

uint32_t GetCurrentHalTicks(void) {
  return HAL_GetTick();
}

void BinaryReleaseInfo() {
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800350a:	4a0f      	ldr	r2, [pc, #60]	@ (8003548 <BinaryReleaseInfo+0x44>)
 800350c:	4b0f      	ldr	r3, [pc, #60]	@ (800354c <BinaryReleaseInfo+0x48>)
 800350e:	0019      	movs	r1, r3
 8003510:	2002      	movs	r0, #2
 8003512:	f7ff ff6b 	bl	80033ec <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8003516:	480e      	ldr	r0, [pc, #56]	@ (8003550 <BinaryReleaseInfo+0x4c>)
 8003518:	4a0e      	ldr	r2, [pc, #56]	@ (8003554 <BinaryReleaseInfo+0x50>)
 800351a:	490c      	ldr	r1, [pc, #48]	@ (800354c <BinaryReleaseInfo+0x48>)
 800351c:	4b0e      	ldr	r3, [pc, #56]	@ (8003558 <BinaryReleaseInfo+0x54>)
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	0003      	movs	r3, r0
 8003522:	2002      	movs	r0, #2
 8003524:	f7ff ff62 	bl	80033ec <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w28a");
 8003528:	4a0c      	ldr	r2, [pc, #48]	@ (800355c <BinaryReleaseInfo+0x58>)
 800352a:	4b08      	ldr	r3, [pc, #32]	@ (800354c <BinaryReleaseInfo+0x48>)
 800352c:	0019      	movs	r1, r3
 800352e:	2002      	movs	r0, #2
 8003530:	f7ff ff5c 	bl	80033ec <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 8003534:	4b0a      	ldr	r3, [pc, #40]	@ (8003560 <BinaryReleaseInfo+0x5c>)
 8003536:	4a0b      	ldr	r2, [pc, #44]	@ (8003564 <BinaryReleaseInfo+0x60>)
 8003538:	4904      	ldr	r1, [pc, #16]	@ (800354c <BinaryReleaseInfo+0x48>)
 800353a:	2002      	movs	r0, #2
 800353c:	f7ff ff56 	bl	80033ec <CreateLine>
}
 8003540:	46c0      	nop			@ (mov r8, r8)
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	46c0      	nop			@ (mov r8, r8)
 8003548:	0800a374 	.word	0x0800a374
 800354c:	0800a3a0 	.word	0x0800a3a0
 8003550:	0800a3a4 	.word	0x0800a3a4
 8003554:	0800a3b0 	.word	0x0800a3b0
 8003558:	0800a3c4 	.word	0x0800a3c4
 800355c:	0800a3d0 	.word	0x0800a3d0
 8003560:	0800a3dc 	.word	0x0800a3dc
 8003564:	0800a3e4 	.word	0x0800a3e4

08003568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003568:	480d      	ldr	r0, [pc, #52]	@ (80035a0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800356a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800356c:	f7ff fcde 	bl	8002f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003570:	480c      	ldr	r0, [pc, #48]	@ (80035a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003572:	490d      	ldr	r1, [pc, #52]	@ (80035a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003574:	4a0d      	ldr	r2, [pc, #52]	@ (80035ac <LoopForever+0xe>)
  movs r3, #0
 8003576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003578:	e002      	b.n	8003580 <LoopCopyDataInit>

0800357a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800357a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800357c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800357e:	3304      	adds	r3, #4

08003580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003584:	d3f9      	bcc.n	800357a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003586:	4a0a      	ldr	r2, [pc, #40]	@ (80035b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003588:	4c0a      	ldr	r4, [pc, #40]	@ (80035b4 <LoopForever+0x16>)
  movs r3, #0
 800358a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800358c:	e001      	b.n	8003592 <LoopFillZerobss>

0800358e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800358e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003590:	3204      	adds	r2, #4

08003592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003594:	d3fb      	bcc.n	800358e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003596:	f004 fd6d 	bl	8008074 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800359a:	f7ff fae5 	bl	8002b68 <main>

0800359e <LoopForever>:

LoopForever:
    b LoopForever
 800359e:	e7fe      	b.n	800359e <LoopForever>
   ldr   r0, =_estack
 80035a0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80035a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035a8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80035ac:	0800a828 	.word	0x0800a828
  ldr r2, =_sbss
 80035b0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80035b4:	20000ab8 	.word	0x20000ab8

080035b8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035b8:	e7fe      	b.n	80035b8 <ADC1_COMP_IRQHandler>
	...

080035bc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80035c2:	1dfb      	adds	r3, r7, #7
 80035c4:	2200      	movs	r2, #0
 80035c6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80035c8:	4b0b      	ldr	r3, [pc, #44]	@ (80035f8 <HAL_Init+0x3c>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	4b0a      	ldr	r3, [pc, #40]	@ (80035f8 <HAL_Init+0x3c>)
 80035ce:	2140      	movs	r1, #64	@ 0x40
 80035d0:	430a      	orrs	r2, r1
 80035d2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035d4:	2003      	movs	r0, #3
 80035d6:	f000 f811 	bl	80035fc <HAL_InitTick>
 80035da:	1e03      	subs	r3, r0, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80035de:	1dfb      	adds	r3, r7, #7
 80035e0:	2201      	movs	r2, #1
 80035e2:	701a      	strb	r2, [r3, #0]
 80035e4:	e001      	b.n	80035ea <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80035e6:	f7ff fb83 	bl	8002cf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035ea:	1dfb      	adds	r3, r7, #7
 80035ec:	781b      	ldrb	r3, [r3, #0]
}
 80035ee:	0018      	movs	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b002      	add	sp, #8
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	46c0      	nop			@ (mov r8, r8)
 80035f8:	40022000 	.word	0x40022000

080035fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035fc:	b590      	push	{r4, r7, lr}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003604:	4b14      	ldr	r3, [pc, #80]	@ (8003658 <HAL_InitTick+0x5c>)
 8003606:	681c      	ldr	r4, [r3, #0]
 8003608:	4b14      	ldr	r3, [pc, #80]	@ (800365c <HAL_InitTick+0x60>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	0019      	movs	r1, r3
 800360e:	23fa      	movs	r3, #250	@ 0xfa
 8003610:	0098      	lsls	r0, r3, #2
 8003612:	f7fc fd95 	bl	8000140 <__udivsi3>
 8003616:	0003      	movs	r3, r0
 8003618:	0019      	movs	r1, r3
 800361a:	0020      	movs	r0, r4
 800361c:	f7fc fd90 	bl	8000140 <__udivsi3>
 8003620:	0003      	movs	r3, r0
 8003622:	0018      	movs	r0, r3
 8003624:	f000 f90b 	bl	800383e <HAL_SYSTICK_Config>
 8003628:	1e03      	subs	r3, r0, #0
 800362a:	d001      	beq.n	8003630 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e00f      	b.n	8003650 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b03      	cmp	r3, #3
 8003634:	d80b      	bhi.n	800364e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	2301      	movs	r3, #1
 800363a:	425b      	negs	r3, r3
 800363c:	2200      	movs	r2, #0
 800363e:	0018      	movs	r0, r3
 8003640:	f000 f8d8 	bl	80037f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003644:	4b06      	ldr	r3, [pc, #24]	@ (8003660 <HAL_InitTick+0x64>)
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	e000      	b.n	8003650 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
}
 8003650:	0018      	movs	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	b003      	add	sp, #12
 8003656:	bd90      	pop	{r4, r7, pc}
 8003658:	20000000 	.word	0x20000000
 800365c:	2000000c 	.word	0x2000000c
 8003660:	20000008 	.word	0x20000008

08003664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003668:	4b05      	ldr	r3, [pc, #20]	@ (8003680 <HAL_IncTick+0x1c>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	001a      	movs	r2, r3
 800366e:	4b05      	ldr	r3, [pc, #20]	@ (8003684 <HAL_IncTick+0x20>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	18d2      	adds	r2, r2, r3
 8003674:	4b03      	ldr	r3, [pc, #12]	@ (8003684 <HAL_IncTick+0x20>)
 8003676:	601a      	str	r2, [r3, #0]
}
 8003678:	46c0      	nop			@ (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	46c0      	nop			@ (mov r8, r8)
 8003680:	2000000c 	.word	0x2000000c
 8003684:	20000968 	.word	0x20000968

08003688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  return uwTick;
 800368c:	4b02      	ldr	r3, [pc, #8]	@ (8003698 <HAL_GetTick+0x10>)
 800368e:	681b      	ldr	r3, [r3, #0]
}
 8003690:	0018      	movs	r0, r3
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	46c0      	nop			@ (mov r8, r8)
 8003698:	20000968 	.word	0x20000968

0800369c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	0002      	movs	r2, r0
 80036a4:	1dfb      	adds	r3, r7, #7
 80036a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80036a8:	1dfb      	adds	r3, r7, #7
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80036ae:	d809      	bhi.n	80036c4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036b0:	1dfb      	adds	r3, r7, #7
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	001a      	movs	r2, r3
 80036b6:	231f      	movs	r3, #31
 80036b8:	401a      	ands	r2, r3
 80036ba:	4b04      	ldr	r3, [pc, #16]	@ (80036cc <__NVIC_EnableIRQ+0x30>)
 80036bc:	2101      	movs	r1, #1
 80036be:	4091      	lsls	r1, r2
 80036c0:	000a      	movs	r2, r1
 80036c2:	601a      	str	r2, [r3, #0]
  }
}
 80036c4:	46c0      	nop			@ (mov r8, r8)
 80036c6:	46bd      	mov	sp, r7
 80036c8:	b002      	add	sp, #8
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	e000e100 	.word	0xe000e100

080036d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036d0:	b590      	push	{r4, r7, lr}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	0002      	movs	r2, r0
 80036d8:	6039      	str	r1, [r7, #0]
 80036da:	1dfb      	adds	r3, r7, #7
 80036dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80036de:	1dfb      	adds	r3, r7, #7
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80036e4:	d828      	bhi.n	8003738 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036e6:	4a2f      	ldr	r2, [pc, #188]	@ (80037a4 <__NVIC_SetPriority+0xd4>)
 80036e8:	1dfb      	adds	r3, r7, #7
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	b25b      	sxtb	r3, r3
 80036ee:	089b      	lsrs	r3, r3, #2
 80036f0:	33c0      	adds	r3, #192	@ 0xc0
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	589b      	ldr	r3, [r3, r2]
 80036f6:	1dfa      	adds	r2, r7, #7
 80036f8:	7812      	ldrb	r2, [r2, #0]
 80036fa:	0011      	movs	r1, r2
 80036fc:	2203      	movs	r2, #3
 80036fe:	400a      	ands	r2, r1
 8003700:	00d2      	lsls	r2, r2, #3
 8003702:	21ff      	movs	r1, #255	@ 0xff
 8003704:	4091      	lsls	r1, r2
 8003706:	000a      	movs	r2, r1
 8003708:	43d2      	mvns	r2, r2
 800370a:	401a      	ands	r2, r3
 800370c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	019b      	lsls	r3, r3, #6
 8003712:	22ff      	movs	r2, #255	@ 0xff
 8003714:	401a      	ands	r2, r3
 8003716:	1dfb      	adds	r3, r7, #7
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	0018      	movs	r0, r3
 800371c:	2303      	movs	r3, #3
 800371e:	4003      	ands	r3, r0
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003724:	481f      	ldr	r0, [pc, #124]	@ (80037a4 <__NVIC_SetPriority+0xd4>)
 8003726:	1dfb      	adds	r3, r7, #7
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	b25b      	sxtb	r3, r3
 800372c:	089b      	lsrs	r3, r3, #2
 800372e:	430a      	orrs	r2, r1
 8003730:	33c0      	adds	r3, #192	@ 0xc0
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003736:	e031      	b.n	800379c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003738:	4a1b      	ldr	r2, [pc, #108]	@ (80037a8 <__NVIC_SetPriority+0xd8>)
 800373a:	1dfb      	adds	r3, r7, #7
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	0019      	movs	r1, r3
 8003740:	230f      	movs	r3, #15
 8003742:	400b      	ands	r3, r1
 8003744:	3b08      	subs	r3, #8
 8003746:	089b      	lsrs	r3, r3, #2
 8003748:	3306      	adds	r3, #6
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	18d3      	adds	r3, r2, r3
 800374e:	3304      	adds	r3, #4
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	1dfa      	adds	r2, r7, #7
 8003754:	7812      	ldrb	r2, [r2, #0]
 8003756:	0011      	movs	r1, r2
 8003758:	2203      	movs	r2, #3
 800375a:	400a      	ands	r2, r1
 800375c:	00d2      	lsls	r2, r2, #3
 800375e:	21ff      	movs	r1, #255	@ 0xff
 8003760:	4091      	lsls	r1, r2
 8003762:	000a      	movs	r2, r1
 8003764:	43d2      	mvns	r2, r2
 8003766:	401a      	ands	r2, r3
 8003768:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	019b      	lsls	r3, r3, #6
 800376e:	22ff      	movs	r2, #255	@ 0xff
 8003770:	401a      	ands	r2, r3
 8003772:	1dfb      	adds	r3, r7, #7
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	0018      	movs	r0, r3
 8003778:	2303      	movs	r3, #3
 800377a:	4003      	ands	r3, r0
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003780:	4809      	ldr	r0, [pc, #36]	@ (80037a8 <__NVIC_SetPriority+0xd8>)
 8003782:	1dfb      	adds	r3, r7, #7
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	001c      	movs	r4, r3
 8003788:	230f      	movs	r3, #15
 800378a:	4023      	ands	r3, r4
 800378c:	3b08      	subs	r3, #8
 800378e:	089b      	lsrs	r3, r3, #2
 8003790:	430a      	orrs	r2, r1
 8003792:	3306      	adds	r3, #6
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	18c3      	adds	r3, r0, r3
 8003798:	3304      	adds	r3, #4
 800379a:	601a      	str	r2, [r3, #0]
}
 800379c:	46c0      	nop			@ (mov r8, r8)
 800379e:	46bd      	mov	sp, r7
 80037a0:	b003      	add	sp, #12
 80037a2:	bd90      	pop	{r4, r7, pc}
 80037a4:	e000e100 	.word	0xe000e100
 80037a8:	e000ed00 	.word	0xe000ed00

080037ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	1e5a      	subs	r2, r3, #1
 80037b8:	2380      	movs	r3, #128	@ 0x80
 80037ba:	045b      	lsls	r3, r3, #17
 80037bc:	429a      	cmp	r2, r3
 80037be:	d301      	bcc.n	80037c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037c0:	2301      	movs	r3, #1
 80037c2:	e010      	b.n	80037e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037c4:	4b0a      	ldr	r3, [pc, #40]	@ (80037f0 <SysTick_Config+0x44>)
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	3a01      	subs	r2, #1
 80037ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037cc:	2301      	movs	r3, #1
 80037ce:	425b      	negs	r3, r3
 80037d0:	2103      	movs	r1, #3
 80037d2:	0018      	movs	r0, r3
 80037d4:	f7ff ff7c 	bl	80036d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037d8:	4b05      	ldr	r3, [pc, #20]	@ (80037f0 <SysTick_Config+0x44>)
 80037da:	2200      	movs	r2, #0
 80037dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037de:	4b04      	ldr	r3, [pc, #16]	@ (80037f0 <SysTick_Config+0x44>)
 80037e0:	2207      	movs	r2, #7
 80037e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	0018      	movs	r0, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	b002      	add	sp, #8
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	46c0      	nop			@ (mov r8, r8)
 80037f0:	e000e010 	.word	0xe000e010

080037f4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	607a      	str	r2, [r7, #4]
 80037fe:	210f      	movs	r1, #15
 8003800:	187b      	adds	r3, r7, r1
 8003802:	1c02      	adds	r2, r0, #0
 8003804:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	187b      	adds	r3, r7, r1
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	b25b      	sxtb	r3, r3
 800380e:	0011      	movs	r1, r2
 8003810:	0018      	movs	r0, r3
 8003812:	f7ff ff5d 	bl	80036d0 <__NVIC_SetPriority>
}
 8003816:	46c0      	nop			@ (mov r8, r8)
 8003818:	46bd      	mov	sp, r7
 800381a:	b004      	add	sp, #16
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b082      	sub	sp, #8
 8003822:	af00      	add	r7, sp, #0
 8003824:	0002      	movs	r2, r0
 8003826:	1dfb      	adds	r3, r7, #7
 8003828:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800382a:	1dfb      	adds	r3, r7, #7
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	b25b      	sxtb	r3, r3
 8003830:	0018      	movs	r0, r3
 8003832:	f7ff ff33 	bl	800369c <__NVIC_EnableIRQ>
}
 8003836:	46c0      	nop			@ (mov r8, r8)
 8003838:	46bd      	mov	sp, r7
 800383a:	b002      	add	sp, #8
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	0018      	movs	r0, r3
 800384a:	f7ff ffaf 	bl	80037ac <SysTick_Config>
 800384e:	0003      	movs	r3, r0
}
 8003850:	0018      	movs	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	b002      	add	sp, #8
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e061      	b.n	800392e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a32      	ldr	r2, [pc, #200]	@ (8003938 <HAL_DMA_Init+0xe0>)
 8003870:	4694      	mov	ip, r2
 8003872:	4463      	add	r3, ip
 8003874:	2114      	movs	r1, #20
 8003876:	0018      	movs	r0, r3
 8003878:	f7fc fc62 	bl	8000140 <__udivsi3>
 800387c:	0003      	movs	r3, r0
 800387e:	009a      	lsls	r2, r3, #2
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a2d      	ldr	r2, [pc, #180]	@ (800393c <HAL_DMA_Init+0xe4>)
 8003888:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2225      	movs	r2, #37	@ 0x25
 800388e:	2102      	movs	r1, #2
 8003890:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4a28      	ldr	r2, [pc, #160]	@ (8003940 <HAL_DMA_Init+0xe8>)
 800389e:	4013      	ands	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80038aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	2380      	movs	r3, #128	@ 0x80
 80038de:	01db      	lsls	r3, r3, #7
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d018      	beq.n	8003916 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80038e4:	4b17      	ldr	r3, [pc, #92]	@ (8003944 <HAL_DMA_Init+0xec>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ec:	211c      	movs	r1, #28
 80038ee:	400b      	ands	r3, r1
 80038f0:	210f      	movs	r1, #15
 80038f2:	4099      	lsls	r1, r3
 80038f4:	000b      	movs	r3, r1
 80038f6:	43d9      	mvns	r1, r3
 80038f8:	4b12      	ldr	r3, [pc, #72]	@ (8003944 <HAL_DMA_Init+0xec>)
 80038fa:	400a      	ands	r2, r1
 80038fc:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80038fe:	4b11      	ldr	r3, [pc, #68]	@ (8003944 <HAL_DMA_Init+0xec>)
 8003900:	6819      	ldr	r1, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390a:	201c      	movs	r0, #28
 800390c:	4003      	ands	r3, r0
 800390e:	409a      	lsls	r2, r3
 8003910:	4b0c      	ldr	r3, [pc, #48]	@ (8003944 <HAL_DMA_Init+0xec>)
 8003912:	430a      	orrs	r2, r1
 8003914:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2225      	movs	r2, #37	@ 0x25
 8003920:	2101      	movs	r1, #1
 8003922:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2224      	movs	r2, #36	@ 0x24
 8003928:	2100      	movs	r1, #0
 800392a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	0018      	movs	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	b004      	add	sp, #16
 8003934:	bd80      	pop	{r7, pc}
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	bffdfff8 	.word	0xbffdfff8
 800393c:	40020000 	.word	0x40020000
 8003940:	ffff800f 	.word	0xffff800f
 8003944:	400200a8 	.word	0x400200a8

08003948 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003950:	230f      	movs	r3, #15
 8003952:	18fb      	adds	r3, r7, r3
 8003954:	2200      	movs	r2, #0
 8003956:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2225      	movs	r2, #37	@ 0x25
 800395c:	5c9b      	ldrb	r3, [r3, r2]
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d008      	beq.n	8003976 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2204      	movs	r2, #4
 8003968:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2224      	movs	r2, #36	@ 0x24
 800396e:	2100      	movs	r1, #0
 8003970:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e024      	b.n	80039c0 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	210e      	movs	r1, #14
 8003982:	438a      	bics	r2, r1
 8003984:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2101      	movs	r1, #1
 8003992:	438a      	bics	r2, r1
 8003994:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399a:	221c      	movs	r2, #28
 800399c:	401a      	ands	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a2:	2101      	movs	r1, #1
 80039a4:	4091      	lsls	r1, r2
 80039a6:	000a      	movs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2225      	movs	r2, #37	@ 0x25
 80039ae:	2101      	movs	r1, #1
 80039b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2224      	movs	r2, #36	@ 0x24
 80039b6:	2100      	movs	r1, #0
 80039b8:	5499      	strb	r1, [r3, r2]

    return status;
 80039ba:	230f      	movs	r3, #15
 80039bc:	18fb      	adds	r3, r7, r3
 80039be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80039c0:	0018      	movs	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b004      	add	sp, #16
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039d0:	210f      	movs	r1, #15
 80039d2:	187b      	adds	r3, r7, r1
 80039d4:	2200      	movs	r2, #0
 80039d6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2225      	movs	r2, #37	@ 0x25
 80039dc:	5c9b      	ldrb	r3, [r3, r2]
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d006      	beq.n	80039f2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2204      	movs	r2, #4
 80039e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80039ea:	187b      	adds	r3, r7, r1
 80039ec:	2201      	movs	r2, #1
 80039ee:	701a      	strb	r2, [r3, #0]
 80039f0:	e02a      	b.n	8003a48 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	210e      	movs	r1, #14
 80039fe:	438a      	bics	r2, r1
 8003a00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	438a      	bics	r2, r1
 8003a10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a16:	221c      	movs	r2, #28
 8003a18:	401a      	ands	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1e:	2101      	movs	r1, #1
 8003a20:	4091      	lsls	r1, r2
 8003a22:	000a      	movs	r2, r1
 8003a24:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2225      	movs	r2, #37	@ 0x25
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2224      	movs	r2, #36	@ 0x24
 8003a32:	2100      	movs	r1, #0
 8003a34:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d004      	beq.n	8003a48 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	0010      	movs	r0, r2
 8003a46:	4798      	blx	r3
    }
  }
  return status;
 8003a48:	230f      	movs	r3, #15
 8003a4a:	18fb      	adds	r3, r7, r3
 8003a4c:	781b      	ldrb	r3, [r3, #0]
}
 8003a4e:	0018      	movs	r0, r3
 8003a50:	46bd      	mov	sp, r7
 8003a52:	b004      	add	sp, #16
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b084      	sub	sp, #16
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a72:	221c      	movs	r2, #28
 8003a74:	4013      	ands	r3, r2
 8003a76:	2204      	movs	r2, #4
 8003a78:	409a      	lsls	r2, r3
 8003a7a:	0013      	movs	r3, r2
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d026      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x7a>
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2204      	movs	r2, #4
 8003a86:	4013      	ands	r3, r2
 8003a88:	d022      	beq.n	8003ad0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2220      	movs	r2, #32
 8003a92:	4013      	ands	r3, r2
 8003a94:	d107      	bne.n	8003aa6 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2104      	movs	r1, #4
 8003aa2:	438a      	bics	r2, r1
 8003aa4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aaa:	221c      	movs	r2, #28
 8003aac:	401a      	ands	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	2104      	movs	r1, #4
 8003ab4:	4091      	lsls	r1, r2
 8003ab6:	000a      	movs	r2, r1
 8003ab8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d100      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0x6e>
 8003ac2:	e071      	b.n	8003ba8 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	0010      	movs	r0, r2
 8003acc:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8003ace:	e06b      	b.n	8003ba8 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad4:	221c      	movs	r2, #28
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2202      	movs	r2, #2
 8003ada:	409a      	lsls	r2, r3
 8003adc:	0013      	movs	r3, r2
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	d02d      	beq.n	8003b40 <HAL_DMA_IRQHandler+0xea>
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d029      	beq.n	8003b40 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2220      	movs	r2, #32
 8003af4:	4013      	ands	r3, r2
 8003af6:	d10b      	bne.n	8003b10 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	210a      	movs	r1, #10
 8003b04:	438a      	bics	r2, r1
 8003b06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2225      	movs	r2, #37	@ 0x25
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b14:	221c      	movs	r2, #28
 8003b16:	401a      	ands	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1c:	2102      	movs	r1, #2
 8003b1e:	4091      	lsls	r1, r2
 8003b20:	000a      	movs	r2, r1
 8003b22:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2224      	movs	r2, #36	@ 0x24
 8003b28:	2100      	movs	r1, #0
 8003b2a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d039      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	0010      	movs	r0, r2
 8003b3c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003b3e:	e033      	b.n	8003ba8 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b44:	221c      	movs	r2, #28
 8003b46:	4013      	ands	r3, r2
 8003b48:	2208      	movs	r2, #8
 8003b4a:	409a      	lsls	r2, r3
 8003b4c:	0013      	movs	r3, r2
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4013      	ands	r3, r2
 8003b52:	d02a      	beq.n	8003baa <HAL_DMA_IRQHandler+0x154>
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2208      	movs	r2, #8
 8003b58:	4013      	ands	r3, r2
 8003b5a:	d026      	beq.n	8003baa <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	210e      	movs	r1, #14
 8003b68:	438a      	bics	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b70:	221c      	movs	r2, #28
 8003b72:	401a      	ands	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b78:	2101      	movs	r1, #1
 8003b7a:	4091      	lsls	r1, r2
 8003b7c:	000a      	movs	r2, r1
 8003b7e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2225      	movs	r2, #37	@ 0x25
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2224      	movs	r2, #36	@ 0x24
 8003b92:	2100      	movs	r1, #0
 8003b94:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d005      	beq.n	8003baa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	0010      	movs	r0, r2
 8003ba6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ba8:	46c0      	nop			@ (mov r8, r8)
 8003baa:	46c0      	nop			@ (mov r8, r8)
}
 8003bac:	46bd      	mov	sp, r7
 8003bae:	b004      	add	sp, #16
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2225      	movs	r2, #37	@ 0x25
 8003bbe:	5c9b      	ldrb	r3, [r3, r2]
 8003bc0:	b2db      	uxtb	r3, r3
}
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b002      	add	sp, #8
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003be2:	e155      	b.n	8003e90 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2101      	movs	r1, #1
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4091      	lsls	r1, r2
 8003bee:	000a      	movs	r2, r1
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d100      	bne.n	8003bfc <HAL_GPIO_Init+0x30>
 8003bfa:	e146      	b.n	8003e8a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	2203      	movs	r2, #3
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d005      	beq.n	8003c14 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2203      	movs	r2, #3
 8003c0e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d130      	bne.n	8003c76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	2203      	movs	r2, #3
 8003c20:	409a      	lsls	r2, r3
 8003c22:	0013      	movs	r3, r2
 8003c24:	43da      	mvns	r2, r3
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	409a      	lsls	r2, r3
 8003c36:	0013      	movs	r3, r2
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	409a      	lsls	r2, r3
 8003c50:	0013      	movs	r3, r2
 8003c52:	43da      	mvns	r2, r3
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4013      	ands	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	091b      	lsrs	r3, r3, #4
 8003c60:	2201      	movs	r2, #1
 8003c62:	401a      	ands	r2, r3
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	409a      	lsls	r2, r3
 8003c68:	0013      	movs	r3, r2
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b03      	cmp	r3, #3
 8003c80:	d017      	beq.n	8003cb2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	2203      	movs	r2, #3
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	0013      	movs	r3, r2
 8003c92:	43da      	mvns	r2, r3
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	4013      	ands	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	409a      	lsls	r2, r3
 8003ca4:	0013      	movs	r3, r2
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2203      	movs	r2, #3
 8003cb8:	4013      	ands	r3, r2
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d123      	bne.n	8003d06 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	08da      	lsrs	r2, r3, #3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3208      	adds	r2, #8
 8003cc6:	0092      	lsls	r2, r2, #2
 8003cc8:	58d3      	ldr	r3, [r2, r3]
 8003cca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	2207      	movs	r2, #7
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	220f      	movs	r2, #15
 8003cd6:	409a      	lsls	r2, r3
 8003cd8:	0013      	movs	r3, r2
 8003cda:	43da      	mvns	r2, r3
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	691a      	ldr	r2, [r3, #16]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2107      	movs	r1, #7
 8003cea:	400b      	ands	r3, r1
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	0013      	movs	r3, r2
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	08da      	lsrs	r2, r3, #3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3208      	adds	r2, #8
 8003d00:	0092      	lsls	r2, r2, #2
 8003d02:	6939      	ldr	r1, [r7, #16]
 8003d04:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	2203      	movs	r2, #3
 8003d12:	409a      	lsls	r2, r3
 8003d14:	0013      	movs	r3, r2
 8003d16:	43da      	mvns	r2, r3
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2203      	movs	r2, #3
 8003d24:	401a      	ands	r2, r3
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	409a      	lsls	r2, r3
 8003d2c:	0013      	movs	r3, r2
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	23c0      	movs	r3, #192	@ 0xc0
 8003d40:	029b      	lsls	r3, r3, #10
 8003d42:	4013      	ands	r3, r2
 8003d44:	d100      	bne.n	8003d48 <HAL_GPIO_Init+0x17c>
 8003d46:	e0a0      	b.n	8003e8a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d48:	4b57      	ldr	r3, [pc, #348]	@ (8003ea8 <HAL_GPIO_Init+0x2dc>)
 8003d4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d4c:	4b56      	ldr	r3, [pc, #344]	@ (8003ea8 <HAL_GPIO_Init+0x2dc>)
 8003d4e:	2101      	movs	r1, #1
 8003d50:	430a      	orrs	r2, r1
 8003d52:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d54:	4a55      	ldr	r2, [pc, #340]	@ (8003eac <HAL_GPIO_Init+0x2e0>)
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	089b      	lsrs	r3, r3, #2
 8003d5a:	3302      	adds	r3, #2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	589b      	ldr	r3, [r3, r2]
 8003d60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2203      	movs	r2, #3
 8003d66:	4013      	ands	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	220f      	movs	r2, #15
 8003d6c:	409a      	lsls	r2, r3
 8003d6e:	0013      	movs	r3, r2
 8003d70:	43da      	mvns	r2, r3
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	4013      	ands	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	23a0      	movs	r3, #160	@ 0xa0
 8003d7c:	05db      	lsls	r3, r3, #23
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d01f      	beq.n	8003dc2 <HAL_GPIO_Init+0x1f6>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a4a      	ldr	r2, [pc, #296]	@ (8003eb0 <HAL_GPIO_Init+0x2e4>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d019      	beq.n	8003dbe <HAL_GPIO_Init+0x1f2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a49      	ldr	r2, [pc, #292]	@ (8003eb4 <HAL_GPIO_Init+0x2e8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d013      	beq.n	8003dba <HAL_GPIO_Init+0x1ee>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a48      	ldr	r2, [pc, #288]	@ (8003eb8 <HAL_GPIO_Init+0x2ec>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00d      	beq.n	8003db6 <HAL_GPIO_Init+0x1ea>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a47      	ldr	r2, [pc, #284]	@ (8003ebc <HAL_GPIO_Init+0x2f0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d007      	beq.n	8003db2 <HAL_GPIO_Init+0x1e6>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a46      	ldr	r2, [pc, #280]	@ (8003ec0 <HAL_GPIO_Init+0x2f4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d101      	bne.n	8003dae <HAL_GPIO_Init+0x1e2>
 8003daa:	2305      	movs	r3, #5
 8003dac:	e00a      	b.n	8003dc4 <HAL_GPIO_Init+0x1f8>
 8003dae:	2306      	movs	r3, #6
 8003db0:	e008      	b.n	8003dc4 <HAL_GPIO_Init+0x1f8>
 8003db2:	2304      	movs	r3, #4
 8003db4:	e006      	b.n	8003dc4 <HAL_GPIO_Init+0x1f8>
 8003db6:	2303      	movs	r3, #3
 8003db8:	e004      	b.n	8003dc4 <HAL_GPIO_Init+0x1f8>
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e002      	b.n	8003dc4 <HAL_GPIO_Init+0x1f8>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <HAL_GPIO_Init+0x1f8>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	2103      	movs	r1, #3
 8003dc8:	400a      	ands	r2, r1
 8003dca:	0092      	lsls	r2, r2, #2
 8003dcc:	4093      	lsls	r3, r2
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dd4:	4935      	ldr	r1, [pc, #212]	@ (8003eac <HAL_GPIO_Init+0x2e0>)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	089b      	lsrs	r3, r3, #2
 8003dda:	3302      	adds	r3, #2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003de2:	4b38      	ldr	r3, [pc, #224]	@ (8003ec4 <HAL_GPIO_Init+0x2f8>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	43da      	mvns	r2, r3
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	4013      	ands	r3, r2
 8003df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	2380      	movs	r3, #128	@ 0x80
 8003df8:	035b      	lsls	r3, r3, #13
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d003      	beq.n	8003e06 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003e06:	4b2f      	ldr	r3, [pc, #188]	@ (8003ec4 <HAL_GPIO_Init+0x2f8>)
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003e0c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ec4 <HAL_GPIO_Init+0x2f8>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	43da      	mvns	r2, r3
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	2380      	movs	r3, #128	@ 0x80
 8003e22:	039b      	lsls	r3, r3, #14
 8003e24:	4013      	ands	r3, r2
 8003e26:	d003      	beq.n	8003e30 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003e30:	4b24      	ldr	r3, [pc, #144]	@ (8003ec4 <HAL_GPIO_Init+0x2f8>)
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8003e36:	4b23      	ldr	r3, [pc, #140]	@ (8003ec4 <HAL_GPIO_Init+0x2f8>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	43da      	mvns	r2, r3
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	4013      	ands	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	2380      	movs	r3, #128	@ 0x80
 8003e4c:	029b      	lsls	r3, r3, #10
 8003e4e:	4013      	ands	r3, r2
 8003e50:	d003      	beq.n	8003e5a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ec4 <HAL_GPIO_Init+0x2f8>)
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e60:	4b18      	ldr	r3, [pc, #96]	@ (8003ec4 <HAL_GPIO_Init+0x2f8>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	43da      	mvns	r2, r3
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	2380      	movs	r3, #128	@ 0x80
 8003e76:	025b      	lsls	r3, r3, #9
 8003e78:	4013      	ands	r3, r2
 8003e7a:	d003      	beq.n	8003e84 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e84:	4b0f      	ldr	r3, [pc, #60]	@ (8003ec4 <HAL_GPIO_Init+0x2f8>)
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	40da      	lsrs	r2, r3
 8003e98:	1e13      	subs	r3, r2, #0
 8003e9a:	d000      	beq.n	8003e9e <HAL_GPIO_Init+0x2d2>
 8003e9c:	e6a2      	b.n	8003be4 <HAL_GPIO_Init+0x18>
  }
}
 8003e9e:	46c0      	nop			@ (mov r8, r8)
 8003ea0:	46c0      	nop			@ (mov r8, r8)
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b006      	add	sp, #24
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	40010000 	.word	0x40010000
 8003eb0:	50000400 	.word	0x50000400
 8003eb4:	50000800 	.word	0x50000800
 8003eb8:	50000c00 	.word	0x50000c00
 8003ebc:	50001000 	.word	0x50001000
 8003ec0:	50001c00 	.word	0x50001c00
 8003ec4:	40010400 	.word	0x40010400

08003ec8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	0008      	movs	r0, r1
 8003ed2:	0011      	movs	r1, r2
 8003ed4:	1cbb      	adds	r3, r7, #2
 8003ed6:	1c02      	adds	r2, r0, #0
 8003ed8:	801a      	strh	r2, [r3, #0]
 8003eda:	1c7b      	adds	r3, r7, #1
 8003edc:	1c0a      	adds	r2, r1, #0
 8003ede:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ee0:	1c7b      	adds	r3, r7, #1
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d004      	beq.n	8003ef2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ee8:	1cbb      	adds	r3, r7, #2
 8003eea:	881a      	ldrh	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003ef0:	e003      	b.n	8003efa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003ef2:	1cbb      	adds	r3, r7, #2
 8003ef4:	881a      	ldrh	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003efa:	46c0      	nop			@ (mov r8, r8)
 8003efc:	46bd      	mov	sp, r7
 8003efe:	b002      	add	sp, #8
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b084      	sub	sp, #16
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
 8003f0a:	000a      	movs	r2, r1
 8003f0c:	1cbb      	adds	r3, r7, #2
 8003f0e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f16:	1cbb      	adds	r3, r7, #2
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	041a      	lsls	r2, r3, #16
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	43db      	mvns	r3, r3
 8003f24:	1cb9      	adds	r1, r7, #2
 8003f26:	8809      	ldrh	r1, [r1, #0]
 8003f28:	400b      	ands	r3, r1
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	619a      	str	r2, [r3, #24]
}
 8003f30:	46c0      	nop			@ (mov r8, r8)
 8003f32:	46bd      	mov	sp, r7
 8003f34:	b004      	add	sp, #16
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e082      	b.n	8004050 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2241      	movs	r2, #65	@ 0x41
 8003f4e:	5c9b      	ldrb	r3, [r3, r2]
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d107      	bne.n	8003f66 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2240      	movs	r2, #64	@ 0x40
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	0018      	movs	r0, r3
 8003f62:	f7fe fc8b 	bl	800287c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2241      	movs	r2, #65	@ 0x41
 8003f6a:	2124      	movs	r1, #36	@ 0x24
 8003f6c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2101      	movs	r1, #1
 8003f7a:	438a      	bics	r2, r1
 8003f7c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4934      	ldr	r1, [pc, #208]	@ (8004058 <HAL_I2C_Init+0x120>)
 8003f88:	400a      	ands	r2, r1
 8003f8a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4931      	ldr	r1, [pc, #196]	@ (800405c <HAL_I2C_Init+0x124>)
 8003f98:	400a      	ands	r2, r1
 8003f9a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d108      	bne.n	8003fb6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2180      	movs	r1, #128	@ 0x80
 8003fae:	0209      	lsls	r1, r1, #8
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	e007      	b.n	8003fc6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2184      	movs	r1, #132	@ 0x84
 8003fc0:	0209      	lsls	r1, r1, #8
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d104      	bne.n	8003fd8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2280      	movs	r2, #128	@ 0x80
 8003fd4:	0112      	lsls	r2, r2, #4
 8003fd6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	491f      	ldr	r1, [pc, #124]	@ (8004060 <HAL_I2C_Init+0x128>)
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	491a      	ldr	r1, [pc, #104]	@ (800405c <HAL_I2C_Init+0x124>)
 8003ff4:	400a      	ands	r2, r1
 8003ff6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	431a      	orrs	r2, r3
 8004002:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69d9      	ldr	r1, [r3, #28]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1a      	ldr	r2, [r3, #32]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2101      	movs	r1, #1
 800402e:	430a      	orrs	r2, r1
 8004030:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2241      	movs	r2, #65	@ 0x41
 800403c:	2120      	movs	r1, #32
 800403e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2242      	movs	r2, #66	@ 0x42
 800404a:	2100      	movs	r1, #0
 800404c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	0018      	movs	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	b002      	add	sp, #8
 8004056:	bd80      	pop	{r7, pc}
 8004058:	f0ffffff 	.word	0xf0ffffff
 800405c:	ffff7fff 	.word	0xffff7fff
 8004060:	02008000 	.word	0x02008000

08004064 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004080:	2b00      	cmp	r3, #0
 8004082:	d005      	beq.n	8004090 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	68f9      	ldr	r1, [r7, #12]
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	4798      	blx	r3
  }
}
 8004090:	46c0      	nop			@ (mov r8, r8)
 8004092:	46bd      	mov	sp, r7
 8004094:	b004      	add	sp, #16
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	2380      	movs	r3, #128	@ 0x80
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	4013      	ands	r3, r2
 80040b8:	d00e      	beq.n	80040d8 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	2280      	movs	r2, #128	@ 0x80
 80040be:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80040c0:	d00a      	beq.n	80040d8 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c6:	2201      	movs	r2, #1
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2280      	movs	r2, #128	@ 0x80
 80040d4:	0052      	lsls	r2, r2, #1
 80040d6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	2380      	movs	r3, #128	@ 0x80
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	4013      	ands	r3, r2
 80040e0:	d00e      	beq.n	8004100 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	2280      	movs	r2, #128	@ 0x80
 80040e6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80040e8:	d00a      	beq.n	8004100 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ee:	2208      	movs	r2, #8
 80040f0:	431a      	orrs	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2280      	movs	r2, #128	@ 0x80
 80040fc:	00d2      	lsls	r2, r2, #3
 80040fe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	2380      	movs	r3, #128	@ 0x80
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4013      	ands	r3, r2
 8004108:	d00e      	beq.n	8004128 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	2280      	movs	r2, #128	@ 0x80
 800410e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004110:	d00a      	beq.n	8004128 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004116:	2202      	movs	r2, #2
 8004118:	431a      	orrs	r2, r3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2280      	movs	r2, #128	@ 0x80
 8004124:	0092      	lsls	r2, r2, #2
 8004126:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	220b      	movs	r2, #11
 8004132:	4013      	ands	r3, r2
 8004134:	d005      	beq.n	8004142 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	0011      	movs	r1, r2
 800413c:	0018      	movs	r0, r3
 800413e:	f000 fbbd 	bl	80048bc <I2C_ITError>
  }
}
 8004142:	46c0      	nop			@ (mov r8, r8)
 8004144:	46bd      	mov	sp, r7
 8004146:	b006      	add	sp, #24
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b082      	sub	sp, #8
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004152:	46c0      	nop			@ (mov r8, r8)
 8004154:	46bd      	mov	sp, r7
 8004156:	b002      	add	sp, #8
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b082      	sub	sp, #8
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004162:	46c0      	nop			@ (mov r8, r8)
 8004164:	46bd      	mov	sp, r7
 8004166:	b002      	add	sp, #8
 8004168:	bd80      	pop	{r7, pc}

0800416a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b082      	sub	sp, #8
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	0008      	movs	r0, r1
 8004174:	0011      	movs	r1, r2
 8004176:	1cfb      	adds	r3, r7, #3
 8004178:	1c02      	adds	r2, r0, #0
 800417a:	701a      	strb	r2, [r3, #0]
 800417c:	003b      	movs	r3, r7
 800417e:	1c0a      	adds	r2, r1, #0
 8004180:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004182:	46c0      	nop			@ (mov r8, r8)
 8004184:	46bd      	mov	sp, r7
 8004186:	b002      	add	sp, #8
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b082      	sub	sp, #8
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004192:	46c0      	nop			@ (mov r8, r8)
 8004194:	46bd      	mov	sp, r7
 8004196:	b002      	add	sp, #8
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b082      	sub	sp, #8
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80041a2:	46c0      	nop			@ (mov r8, r8)
 80041a4:	46bd      	mov	sp, r7
 80041a6:	b002      	add	sp, #8
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b082      	sub	sp, #8
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80041b2:	46c0      	nop			@ (mov r8, r8)
 80041b4:	46bd      	mov	sp, r7
 80041b6:	b002      	add	sp, #8
 80041b8:	bd80      	pop	{r7, pc}
	...

080041bc <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2240      	movs	r2, #64	@ 0x40
 80041d6:	5c9b      	ldrb	r3, [r3, r2]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <I2C_Slave_ISR_IT+0x24>
 80041dc:	2302      	movs	r3, #2
 80041de:	e0e6      	b.n	80043ae <I2C_Slave_ISR_IT+0x1f2>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2240      	movs	r2, #64	@ 0x40
 80041e4:	2101      	movs	r1, #1
 80041e6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	2220      	movs	r2, #32
 80041ec:	4013      	ands	r3, r2
 80041ee:	d009      	beq.n	8004204 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80041f6:	d005      	beq.n	8004204 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	0011      	movs	r1, r2
 80041fe:	0018      	movs	r0, r3
 8004200:	f000 f9e4 	bl	80045cc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	2210      	movs	r2, #16
 8004208:	4013      	ands	r3, r2
 800420a:	d052      	beq.n	80042b2 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2210      	movs	r2, #16
 8004210:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004212:	d04e      	beq.n	80042b2 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004218:	b29b      	uxth	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d12d      	bne.n	800427a <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2241      	movs	r2, #65	@ 0x41
 8004222:	5c9b      	ldrb	r3, [r3, r2]
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b28      	cmp	r3, #40	@ 0x28
 8004228:	d10b      	bne.n	8004242 <I2C_Slave_ISR_IT+0x86>
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	2380      	movs	r3, #128	@ 0x80
 800422e:	049b      	lsls	r3, r3, #18
 8004230:	429a      	cmp	r2, r3
 8004232:	d106      	bne.n	8004242 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	0011      	movs	r1, r2
 800423a:	0018      	movs	r0, r3
 800423c:	f000 fae6 	bl	800480c <I2C_ITListenCplt>
 8004240:	e036      	b.n	80042b0 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2241      	movs	r2, #65	@ 0x41
 8004246:	5c9b      	ldrb	r3, [r3, r2]
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b29      	cmp	r3, #41	@ 0x29
 800424c:	d110      	bne.n	8004270 <I2C_Slave_ISR_IT+0xb4>
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	4a59      	ldr	r2, [pc, #356]	@ (80043b8 <I2C_Slave_ISR_IT+0x1fc>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d00c      	beq.n	8004270 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2210      	movs	r2, #16
 800425c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	0018      	movs	r0, r3
 8004262:	f000 fc56 	bl	8004b12 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	0018      	movs	r0, r3
 800426a:	f000 f94b 	bl	8004504 <I2C_ITSlaveSeqCplt>
 800426e:	e01f      	b.n	80042b0 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2210      	movs	r2, #16
 8004276:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004278:	e091      	b.n	800439e <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2210      	movs	r2, #16
 8004280:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004286:	2204      	movs	r2, #4
 8004288:	431a      	orrs	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d005      	beq.n	80042a0 <I2C_Slave_ISR_IT+0xe4>
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	2380      	movs	r3, #128	@ 0x80
 8004298:	045b      	lsls	r3, r3, #17
 800429a:	429a      	cmp	r2, r3
 800429c:	d000      	beq.n	80042a0 <I2C_Slave_ISR_IT+0xe4>
 800429e:	e07e      	b.n	800439e <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	0011      	movs	r1, r2
 80042a8:	0018      	movs	r0, r3
 80042aa:	f000 fb07 	bl	80048bc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80042ae:	e076      	b.n	800439e <I2C_Slave_ISR_IT+0x1e2>
 80042b0:	e075      	b.n	800439e <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	2204      	movs	r2, #4
 80042b6:	4013      	ands	r3, r2
 80042b8:	d02f      	beq.n	800431a <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2204      	movs	r2, #4
 80042be:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80042c0:	d02b      	beq.n	800431a <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d018      	beq.n	80042fe <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	3b01      	subs	r3, #1
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004302:	b29b      	uxth	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d14c      	bne.n	80043a2 <I2C_Slave_ISR_IT+0x1e6>
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	4a2b      	ldr	r2, [pc, #172]	@ (80043b8 <I2C_Slave_ISR_IT+0x1fc>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d048      	beq.n	80043a2 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	0018      	movs	r0, r3
 8004314:	f000 f8f6 	bl	8004504 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004318:	e043      	b.n	80043a2 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	2208      	movs	r2, #8
 800431e:	4013      	ands	r3, r2
 8004320:	d00a      	beq.n	8004338 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2208      	movs	r2, #8
 8004326:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004328:	d006      	beq.n	8004338 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	0011      	movs	r1, r2
 8004330:	0018      	movs	r0, r3
 8004332:	f000 f843 	bl	80043bc <I2C_ITAddrCplt>
 8004336:	e035      	b.n	80043a4 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	2202      	movs	r2, #2
 800433c:	4013      	ands	r3, r2
 800433e:	d031      	beq.n	80043a4 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004346:	d02d      	beq.n	80043a4 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434c:	b29b      	uxth	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d018      	beq.n	8004384 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004356:	781a      	ldrb	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004382:	e00f      	b.n	80043a4 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	2380      	movs	r3, #128	@ 0x80
 8004388:	045b      	lsls	r3, r3, #17
 800438a:	429a      	cmp	r2, r3
 800438c:	d002      	beq.n	8004394 <I2C_Slave_ISR_IT+0x1d8>
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d107      	bne.n	80043a4 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	0018      	movs	r0, r3
 8004398:	f000 f8b4 	bl	8004504 <I2C_ITSlaveSeqCplt>
 800439c:	e002      	b.n	80043a4 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800439e:	46c0      	nop			@ (mov r8, r8)
 80043a0:	e000      	b.n	80043a4 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 80043a2:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2240      	movs	r2, #64	@ 0x40
 80043a8:	2100      	movs	r1, #0
 80043aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	0018      	movs	r0, r3
 80043b0:	46bd      	mov	sp, r7
 80043b2:	b006      	add	sp, #24
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	46c0      	nop			@ (mov r8, r8)
 80043b8:	ffff0000 	.word	0xffff0000

080043bc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80043bc:	b5b0      	push	{r4, r5, r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2241      	movs	r2, #65	@ 0x41
 80043ca:	5c9b      	ldrb	r3, [r3, r2]
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	001a      	movs	r2, r3
 80043d0:	2328      	movs	r3, #40	@ 0x28
 80043d2:	4013      	ands	r3, r2
 80043d4:	2b28      	cmp	r3, #40	@ 0x28
 80043d6:	d000      	beq.n	80043da <I2C_ITAddrCplt+0x1e>
 80043d8:	e088      	b.n	80044ec <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	0c1b      	lsrs	r3, r3, #16
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	250f      	movs	r5, #15
 80043e6:	197b      	adds	r3, r7, r5
 80043e8:	2101      	movs	r1, #1
 80043ea:	400a      	ands	r2, r1
 80043ec:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	0c1b      	lsrs	r3, r3, #16
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	200c      	movs	r0, #12
 80043fa:	183b      	adds	r3, r7, r0
 80043fc:	21fe      	movs	r1, #254	@ 0xfe
 80043fe:	400a      	ands	r2, r1
 8004400:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	b29a      	uxth	r2, r3
 800440a:	240a      	movs	r4, #10
 800440c:	193b      	adds	r3, r7, r4
 800440e:	0592      	lsls	r2, r2, #22
 8004410:	0d92      	lsrs	r2, r2, #22
 8004412:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	b29a      	uxth	r2, r3
 800441c:	2308      	movs	r3, #8
 800441e:	18fb      	adds	r3, r7, r3
 8004420:	21fe      	movs	r1, #254	@ 0xfe
 8004422:	400a      	ands	r2, r1
 8004424:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d148      	bne.n	80044c0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800442e:	0021      	movs	r1, r4
 8004430:	187b      	adds	r3, r7, r1
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	09db      	lsrs	r3, r3, #7
 8004436:	b29a      	uxth	r2, r3
 8004438:	183b      	adds	r3, r7, r0
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	4053      	eors	r3, r2
 800443e:	b29b      	uxth	r3, r3
 8004440:	001a      	movs	r2, r3
 8004442:	2306      	movs	r3, #6
 8004444:	4013      	ands	r3, r2
 8004446:	d120      	bne.n	800448a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8004448:	183b      	adds	r3, r7, r0
 800444a:	187a      	adds	r2, r7, r1
 800444c:	8812      	ldrh	r2, [r2, #0]
 800444e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800445e:	2b02      	cmp	r3, #2
 8004460:	d14c      	bne.n	80044fc <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2208      	movs	r2, #8
 800446e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2240      	movs	r2, #64	@ 0x40
 8004474:	2100      	movs	r1, #0
 8004476:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004478:	183b      	adds	r3, r7, r0
 800447a:	881a      	ldrh	r2, [r3, #0]
 800447c:	197b      	adds	r3, r7, r5
 800447e:	7819      	ldrb	r1, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	0018      	movs	r0, r3
 8004484:	f7ff fe71 	bl	800416a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004488:	e038      	b.n	80044fc <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800448a:	240c      	movs	r4, #12
 800448c:	193b      	adds	r3, r7, r4
 800448e:	2208      	movs	r2, #8
 8004490:	18ba      	adds	r2, r7, r2
 8004492:	8812      	ldrh	r2, [r2, #0]
 8004494:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004496:	2380      	movs	r3, #128	@ 0x80
 8004498:	021a      	lsls	r2, r3, #8
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	0011      	movs	r1, r2
 800449e:	0018      	movs	r0, r3
 80044a0:	f000 fb78 	bl	8004b94 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2240      	movs	r2, #64	@ 0x40
 80044a8:	2100      	movs	r1, #0
 80044aa:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80044ac:	193b      	adds	r3, r7, r4
 80044ae:	881a      	ldrh	r2, [r3, #0]
 80044b0:	230f      	movs	r3, #15
 80044b2:	18fb      	adds	r3, r7, r3
 80044b4:	7819      	ldrb	r1, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	0018      	movs	r0, r3
 80044ba:	f7ff fe56 	bl	800416a <HAL_I2C_AddrCallback>
}
 80044be:	e01d      	b.n	80044fc <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80044c0:	2380      	movs	r3, #128	@ 0x80
 80044c2:	021a      	lsls	r2, r3, #8
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	0011      	movs	r1, r2
 80044c8:	0018      	movs	r0, r3
 80044ca:	f000 fb63 	bl	8004b94 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2240      	movs	r2, #64	@ 0x40
 80044d2:	2100      	movs	r1, #0
 80044d4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80044d6:	230c      	movs	r3, #12
 80044d8:	18fb      	adds	r3, r7, r3
 80044da:	881a      	ldrh	r2, [r3, #0]
 80044dc:	230f      	movs	r3, #15
 80044de:	18fb      	adds	r3, r7, r3
 80044e0:	7819      	ldrb	r1, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	0018      	movs	r0, r3
 80044e6:	f7ff fe40 	bl	800416a <HAL_I2C_AddrCallback>
}
 80044ea:	e007      	b.n	80044fc <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2208      	movs	r2, #8
 80044f2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2240      	movs	r2, #64	@ 0x40
 80044f8:	2100      	movs	r1, #0
 80044fa:	5499      	strb	r1, [r3, r2]
}
 80044fc:	46c0      	nop			@ (mov r8, r8)
 80044fe:	46bd      	mov	sp, r7
 8004500:	b004      	add	sp, #16
 8004502:	bdb0      	pop	{r4, r5, r7, pc}

08004504 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2242      	movs	r2, #66	@ 0x42
 8004518:	2100      	movs	r1, #0
 800451a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	2380      	movs	r3, #128	@ 0x80
 8004520:	01db      	lsls	r3, r3, #7
 8004522:	4013      	ands	r3, r2
 8004524:	d008      	beq.n	8004538 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4924      	ldr	r1, [pc, #144]	@ (80045c4 <I2C_ITSlaveSeqCplt+0xc0>)
 8004532:	400a      	ands	r2, r1
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	e00c      	b.n	8004552 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	2380      	movs	r3, #128	@ 0x80
 800453c:	021b      	lsls	r3, r3, #8
 800453e:	4013      	ands	r3, r2
 8004540:	d007      	beq.n	8004552 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	491e      	ldr	r1, [pc, #120]	@ (80045c8 <I2C_ITSlaveSeqCplt+0xc4>)
 800454e:	400a      	ands	r2, r1
 8004550:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2241      	movs	r2, #65	@ 0x41
 8004556:	5c9b      	ldrb	r3, [r3, r2]
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b29      	cmp	r3, #41	@ 0x29
 800455c:	d114      	bne.n	8004588 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2241      	movs	r2, #65	@ 0x41
 8004562:	2128      	movs	r1, #40	@ 0x28
 8004564:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2221      	movs	r2, #33	@ 0x21
 800456a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2101      	movs	r1, #1
 8004570:	0018      	movs	r0, r3
 8004572:	f000 fb0f 	bl	8004b94 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2240      	movs	r2, #64	@ 0x40
 800457a:	2100      	movs	r1, #0
 800457c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	0018      	movs	r0, r3
 8004582:	f7ff fde2 	bl	800414a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004586:	e019      	b.n	80045bc <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2241      	movs	r2, #65	@ 0x41
 800458c:	5c9b      	ldrb	r3, [r3, r2]
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b2a      	cmp	r3, #42	@ 0x2a
 8004592:	d113      	bne.n	80045bc <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2241      	movs	r2, #65	@ 0x41
 8004598:	2128      	movs	r1, #40	@ 0x28
 800459a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2222      	movs	r2, #34	@ 0x22
 80045a0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2102      	movs	r1, #2
 80045a6:	0018      	movs	r0, r3
 80045a8:	f000 faf4 	bl	8004b94 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2240      	movs	r2, #64	@ 0x40
 80045b0:	2100      	movs	r1, #0
 80045b2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	0018      	movs	r0, r3
 80045b8:	f7ff fdcf 	bl	800415a <HAL_I2C_SlaveRxCpltCallback>
}
 80045bc:	46c0      	nop			@ (mov r8, r8)
 80045be:	46bd      	mov	sp, r7
 80045c0:	b004      	add	sp, #16
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	ffffbfff 	.word	0xffffbfff
 80045c8:	ffff7fff 	.word	0xffff7fff

080045cc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80045e2:	200f      	movs	r0, #15
 80045e4:	183b      	adds	r3, r7, r0
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	2141      	movs	r1, #65	@ 0x41
 80045ea:	5c52      	ldrb	r2, [r2, r1]
 80045ec:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2220      	movs	r2, #32
 80045f4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80045f6:	183b      	adds	r3, r7, r0
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b21      	cmp	r3, #33	@ 0x21
 80045fc:	d003      	beq.n	8004606 <I2C_ITSlaveCplt+0x3a>
 80045fe:	183b      	adds	r3, r7, r0
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	2b29      	cmp	r3, #41	@ 0x29
 8004604:	d109      	bne.n	800461a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004606:	4a7b      	ldr	r2, [pc, #492]	@ (80047f4 <I2C_ITSlaveCplt+0x228>)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	0011      	movs	r1, r2
 800460c:	0018      	movs	r0, r3
 800460e:	f000 fac1 	bl	8004b94 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2221      	movs	r2, #33	@ 0x21
 8004616:	631a      	str	r2, [r3, #48]	@ 0x30
 8004618:	e011      	b.n	800463e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800461a:	220f      	movs	r2, #15
 800461c:	18bb      	adds	r3, r7, r2
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b22      	cmp	r3, #34	@ 0x22
 8004622:	d003      	beq.n	800462c <I2C_ITSlaveCplt+0x60>
 8004624:	18bb      	adds	r3, r7, r2
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b2a      	cmp	r3, #42	@ 0x2a
 800462a:	d108      	bne.n	800463e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800462c:	4a72      	ldr	r2, [pc, #456]	@ (80047f8 <I2C_ITSlaveCplt+0x22c>)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	0011      	movs	r1, r2
 8004632:	0018      	movs	r0, r3
 8004634:	f000 faae 	bl	8004b94 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2222      	movs	r2, #34	@ 0x22
 800463c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2180      	movs	r1, #128	@ 0x80
 800464a:	0209      	lsls	r1, r1, #8
 800464c:	430a      	orrs	r2, r1
 800464e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4968      	ldr	r1, [pc, #416]	@ (80047fc <I2C_ITSlaveCplt+0x230>)
 800465c:	400a      	ands	r2, r1
 800465e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	0018      	movs	r0, r3
 8004664:	f000 fa55 	bl	8004b12 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	2380      	movs	r3, #128	@ 0x80
 800466c:	01db      	lsls	r3, r3, #7
 800466e:	4013      	ands	r3, r2
 8004670:	d013      	beq.n	800469a <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4960      	ldr	r1, [pc, #384]	@ (8004800 <I2C_ITSlaveCplt+0x234>)
 800467e:	400a      	ands	r2, r1
 8004680:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004686:	2b00      	cmp	r3, #0
 8004688:	d01f      	beq.n	80046ca <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	b29a      	uxth	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004698:	e017      	b.n	80046ca <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	2380      	movs	r3, #128	@ 0x80
 800469e:	021b      	lsls	r3, r3, #8
 80046a0:	4013      	ands	r3, r2
 80046a2:	d012      	beq.n	80046ca <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4955      	ldr	r1, [pc, #340]	@ (8004804 <I2C_ITSlaveCplt+0x238>)
 80046b0:	400a      	ands	r2, r1
 80046b2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d006      	beq.n	80046ca <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2204      	movs	r2, #4
 80046ce:	4013      	ands	r3, r2
 80046d0:	d020      	beq.n	8004714 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2204      	movs	r2, #4
 80046d6:	4393      	bics	r3, r2
 80046d8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e4:	b2d2      	uxtb	r2, r2
 80046e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00c      	beq.n	8004714 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800470a:	b29b      	uxth	r3, r3
 800470c:	3b01      	subs	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d005      	beq.n	800472a <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004722:	2204      	movs	r2, #4
 8004724:	431a      	orrs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2242      	movs	r2, #66	@ 0x42
 800472e:	2100      	movs	r1, #0
 8004730:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800473c:	2b00      	cmp	r3, #0
 800473e:	d013      	beq.n	8004768 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	0011      	movs	r1, r2
 8004748:	0018      	movs	r0, r3
 800474a:	f000 f8b7 	bl	80048bc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2241      	movs	r2, #65	@ 0x41
 8004752:	5c9b      	ldrb	r3, [r3, r2]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b28      	cmp	r3, #40	@ 0x28
 8004758:	d147      	bne.n	80047ea <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	0011      	movs	r1, r2
 8004760:	0018      	movs	r0, r3
 8004762:	f000 f853 	bl	800480c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004766:	e040      	b.n	80047ea <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476c:	4a26      	ldr	r2, [pc, #152]	@ (8004808 <I2C_ITSlaveCplt+0x23c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d016      	beq.n	80047a0 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	0018      	movs	r0, r3
 8004776:	f7ff fec5 	bl	8004504 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a22      	ldr	r2, [pc, #136]	@ (8004808 <I2C_ITSlaveCplt+0x23c>)
 800477e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2241      	movs	r2, #65	@ 0x41
 8004784:	2120      	movs	r1, #32
 8004786:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2240      	movs	r2, #64	@ 0x40
 8004792:	2100      	movs	r1, #0
 8004794:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	0018      	movs	r0, r3
 800479a:	f7ff fcf6 	bl	800418a <HAL_I2C_ListenCpltCallback>
}
 800479e:	e024      	b.n	80047ea <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2241      	movs	r2, #65	@ 0x41
 80047a4:	5c9b      	ldrb	r3, [r3, r2]
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b22      	cmp	r3, #34	@ 0x22
 80047aa:	d10f      	bne.n	80047cc <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2241      	movs	r2, #65	@ 0x41
 80047b0:	2120      	movs	r1, #32
 80047b2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2240      	movs	r2, #64	@ 0x40
 80047be:	2100      	movs	r1, #0
 80047c0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	0018      	movs	r0, r3
 80047c6:	f7ff fcc8 	bl	800415a <HAL_I2C_SlaveRxCpltCallback>
}
 80047ca:	e00e      	b.n	80047ea <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2241      	movs	r2, #65	@ 0x41
 80047d0:	2120      	movs	r1, #32
 80047d2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2240      	movs	r2, #64	@ 0x40
 80047de:	2100      	movs	r1, #0
 80047e0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	0018      	movs	r0, r3
 80047e6:	f7ff fcb0 	bl	800414a <HAL_I2C_SlaveTxCpltCallback>
}
 80047ea:	46c0      	nop			@ (mov r8, r8)
 80047ec:	46bd      	mov	sp, r7
 80047ee:	b006      	add	sp, #24
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	46c0      	nop			@ (mov r8, r8)
 80047f4:	00008001 	.word	0x00008001
 80047f8:	00008002 	.word	0x00008002
 80047fc:	fe00e800 	.word	0xfe00e800
 8004800:	ffffbfff 	.word	0xffffbfff
 8004804:	ffff7fff 	.word	0xffff7fff
 8004808:	ffff0000 	.word	0xffff0000

0800480c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a26      	ldr	r2, [pc, #152]	@ (80048b4 <I2C_ITListenCplt+0xa8>)
 800481a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2241      	movs	r2, #65	@ 0x41
 8004826:	2120      	movs	r1, #32
 8004828:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2242      	movs	r2, #66	@ 0x42
 800482e:	2100      	movs	r1, #0
 8004830:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	2204      	movs	r2, #4
 800483c:	4013      	ands	r3, r2
 800483e:	d022      	beq.n	8004886 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800485c:	2b00      	cmp	r3, #0
 800485e:	d012      	beq.n	8004886 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004870:	b29b      	uxth	r3, r3
 8004872:	3b01      	subs	r3, #1
 8004874:	b29a      	uxth	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800487e:	2204      	movs	r2, #4
 8004880:	431a      	orrs	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004886:	4a0c      	ldr	r2, [pc, #48]	@ (80048b8 <I2C_ITListenCplt+0xac>)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	0011      	movs	r1, r2
 800488c:	0018      	movs	r0, r3
 800488e:	f000 f981 	bl	8004b94 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2210      	movs	r2, #16
 8004898:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2240      	movs	r2, #64	@ 0x40
 800489e:	2100      	movs	r1, #0
 80048a0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	0018      	movs	r0, r3
 80048a6:	f7ff fc70 	bl	800418a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80048aa:	46c0      	nop			@ (mov r8, r8)
 80048ac:	46bd      	mov	sp, r7
 80048ae:	b002      	add	sp, #8
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	46c0      	nop			@ (mov r8, r8)
 80048b4:	ffff0000 	.word	0xffff0000
 80048b8:	00008003 	.word	0x00008003

080048bc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80048c6:	200f      	movs	r0, #15
 80048c8:	183b      	adds	r3, r7, r0
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	2141      	movs	r1, #65	@ 0x41
 80048ce:	5c52      	ldrb	r2, [r2, r1]
 80048d0:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2242      	movs	r2, #66	@ 0x42
 80048d6:	2100      	movs	r1, #0
 80048d8:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a72      	ldr	r2, [pc, #456]	@ (8004aa8 <I2C_ITError+0x1ec>)
 80048de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	431a      	orrs	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80048f2:	183b      	adds	r3, r7, r0
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	2b28      	cmp	r3, #40	@ 0x28
 80048f8:	d007      	beq.n	800490a <I2C_ITError+0x4e>
 80048fa:	183b      	adds	r3, r7, r0
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b29      	cmp	r3, #41	@ 0x29
 8004900:	d003      	beq.n	800490a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004902:	183b      	adds	r3, r7, r0
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	2b2a      	cmp	r3, #42	@ 0x2a
 8004908:	d10c      	bne.n	8004924 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2103      	movs	r1, #3
 800490e:	0018      	movs	r0, r3
 8004910:	f000 f940 	bl	8004b94 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2241      	movs	r2, #65	@ 0x41
 8004918:	2128      	movs	r1, #40	@ 0x28
 800491a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a63      	ldr	r2, [pc, #396]	@ (8004aac <I2C_ITError+0x1f0>)
 8004920:	635a      	str	r2, [r3, #52]	@ 0x34
 8004922:	e032      	b.n	800498a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004924:	4a62      	ldr	r2, [pc, #392]	@ (8004ab0 <I2C_ITError+0x1f4>)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	0011      	movs	r1, r2
 800492a:	0018      	movs	r0, r3
 800492c:	f000 f932 	bl	8004b94 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	0018      	movs	r0, r3
 8004934:	f000 f8ed 	bl	8004b12 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2241      	movs	r2, #65	@ 0x41
 800493c:	5c9b      	ldrb	r3, [r3, r2]
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b60      	cmp	r3, #96	@ 0x60
 8004942:	d01f      	beq.n	8004984 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2241      	movs	r2, #65	@ 0x41
 8004948:	2120      	movs	r1, #32
 800494a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	2220      	movs	r2, #32
 8004954:	4013      	ands	r3, r2
 8004956:	2b20      	cmp	r3, #32
 8004958:	d114      	bne.n	8004984 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	2210      	movs	r2, #16
 8004962:	4013      	ands	r3, r2
 8004964:	2b10      	cmp	r3, #16
 8004966:	d109      	bne.n	800497c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2210      	movs	r2, #16
 800496e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004974:	2204      	movs	r2, #4
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2220      	movs	r2, #32
 8004982:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800498e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004994:	2b00      	cmp	r3, #0
 8004996:	d03b      	beq.n	8004a10 <I2C_ITError+0x154>
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b11      	cmp	r3, #17
 800499c:	d002      	beq.n	80049a4 <I2C_ITError+0xe8>
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b21      	cmp	r3, #33	@ 0x21
 80049a2:	d135      	bne.n	8004a10 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	2380      	movs	r3, #128	@ 0x80
 80049ac:	01db      	lsls	r3, r3, #7
 80049ae:	401a      	ands	r2, r3
 80049b0:	2380      	movs	r3, #128	@ 0x80
 80049b2:	01db      	lsls	r3, r3, #7
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d107      	bne.n	80049c8 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	493c      	ldr	r1, [pc, #240]	@ (8004ab4 <I2C_ITError+0x1f8>)
 80049c4:	400a      	ands	r2, r1
 80049c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049cc:	0018      	movs	r0, r3
 80049ce:	f7ff f8f0 	bl	8003bb2 <HAL_DMA_GetState>
 80049d2:	0003      	movs	r3, r0
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d016      	beq.n	8004a06 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049dc:	4a36      	ldr	r2, [pc, #216]	@ (8004ab8 <I2C_ITError+0x1fc>)
 80049de:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2240      	movs	r2, #64	@ 0x40
 80049e4:	2100      	movs	r1, #0
 80049e6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ec:	0018      	movs	r0, r3
 80049ee:	f7fe ffeb 	bl	80039c8 <HAL_DMA_Abort_IT>
 80049f2:	1e03      	subs	r3, r0, #0
 80049f4:	d051      	beq.n	8004a9a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a00:	0018      	movs	r0, r3
 8004a02:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a04:	e049      	b.n	8004a9a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	0018      	movs	r0, r3
 8004a0a:	f000 f859 	bl	8004ac0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a0e:	e044      	b.n	8004a9a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d03b      	beq.n	8004a90 <I2C_ITError+0x1d4>
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	2b12      	cmp	r3, #18
 8004a1c:	d002      	beq.n	8004a24 <I2C_ITError+0x168>
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	2b22      	cmp	r3, #34	@ 0x22
 8004a22:	d135      	bne.n	8004a90 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	2380      	movs	r3, #128	@ 0x80
 8004a2c:	021b      	lsls	r3, r3, #8
 8004a2e:	401a      	ands	r2, r3
 8004a30:	2380      	movs	r3, #128	@ 0x80
 8004a32:	021b      	lsls	r3, r3, #8
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d107      	bne.n	8004a48 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	491e      	ldr	r1, [pc, #120]	@ (8004abc <I2C_ITError+0x200>)
 8004a44:	400a      	ands	r2, r1
 8004a46:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f7ff f8b0 	bl	8003bb2 <HAL_DMA_GetState>
 8004a52:	0003      	movs	r3, r0
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d016      	beq.n	8004a86 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a5c:	4a16      	ldr	r2, [pc, #88]	@ (8004ab8 <I2C_ITError+0x1fc>)
 8004a5e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2240      	movs	r2, #64	@ 0x40
 8004a64:	2100      	movs	r1, #0
 8004a66:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f7fe ffab 	bl	80039c8 <HAL_DMA_Abort_IT>
 8004a72:	1e03      	subs	r3, r0, #0
 8004a74:	d013      	beq.n	8004a9e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a80:	0018      	movs	r0, r3
 8004a82:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a84:	e00b      	b.n	8004a9e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f000 f819 	bl	8004ac0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a8e:	e006      	b.n	8004a9e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	0018      	movs	r0, r3
 8004a94:	f000 f814 	bl	8004ac0 <I2C_TreatErrorCallback>
  }
}
 8004a98:	e002      	b.n	8004aa0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a9a:	46c0      	nop			@ (mov r8, r8)
 8004a9c:	e000      	b.n	8004aa0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a9e:	46c0      	nop			@ (mov r8, r8)
}
 8004aa0:	46c0      	nop			@ (mov r8, r8)
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	b004      	add	sp, #16
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	ffff0000 	.word	0xffff0000
 8004aac:	080041bd 	.word	0x080041bd
 8004ab0:	00008003 	.word	0x00008003
 8004ab4:	ffffbfff 	.word	0xffffbfff
 8004ab8:	08004b57 	.word	0x08004b57
 8004abc:	ffff7fff 	.word	0xffff7fff

08004ac0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2241      	movs	r2, #65	@ 0x41
 8004acc:	5c9b      	ldrb	r3, [r3, r2]
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b60      	cmp	r3, #96	@ 0x60
 8004ad2:	d10f      	bne.n	8004af4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2241      	movs	r2, #65	@ 0x41
 8004ad8:	2120      	movs	r1, #32
 8004ada:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2240      	movs	r2, #64	@ 0x40
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	0018      	movs	r0, r3
 8004aee:	f7ff fb5c 	bl	80041aa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004af2:	e00a      	b.n	8004b0a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2240      	movs	r2, #64	@ 0x40
 8004afe:	2100      	movs	r1, #0
 8004b00:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	0018      	movs	r0, r3
 8004b06:	f7ff fb48 	bl	800419a <HAL_I2C_ErrorCallback>
}
 8004b0a:	46c0      	nop			@ (mov r8, r8)
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	b002      	add	sp, #8
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b082      	sub	sp, #8
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	699b      	ldr	r3, [r3, #24]
 8004b20:	2202      	movs	r2, #2
 8004b22:	4013      	ands	r3, r2
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d103      	bne.n	8004b30 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	2201      	movs	r2, #1
 8004b38:	4013      	ands	r3, r2
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d007      	beq.n	8004b4e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	699a      	ldr	r2, [r3, #24]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2101      	movs	r1, #1
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	619a      	str	r2, [r3, #24]
  }
}
 8004b4e:	46c0      	nop			@ (mov r8, r8)
 8004b50:	46bd      	mov	sp, r7
 8004b52:	b002      	add	sp, #8
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b084      	sub	sp, #16
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b70:	2200      	movs	r2, #0
 8004b72:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b80:	2200      	movs	r2, #0
 8004b82:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	0018      	movs	r0, r3
 8004b88:	f7ff ff9a 	bl	8004ac0 <I2C_TreatErrorCallback>
}
 8004b8c:	46c0      	nop			@ (mov r8, r8)
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b004      	add	sp, #16
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	000a      	movs	r2, r1
 8004b9e:	1cbb      	adds	r3, r7, #2
 8004ba0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004ba6:	1cbb      	adds	r3, r7, #2
 8004ba8:	881b      	ldrh	r3, [r3, #0]
 8004baa:	2201      	movs	r2, #1
 8004bac:	4013      	ands	r3, r2
 8004bae:	d010      	beq.n	8004bd2 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2242      	movs	r2, #66	@ 0x42
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2241      	movs	r2, #65	@ 0x41
 8004bbc:	5c9b      	ldrb	r3, [r3, r2]
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	001a      	movs	r2, r3
 8004bc2:	2328      	movs	r3, #40	@ 0x28
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	2b28      	cmp	r3, #40	@ 0x28
 8004bc8:	d003      	beq.n	8004bd2 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	22b0      	movs	r2, #176	@ 0xb0
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004bd2:	1cbb      	adds	r3, r7, #2
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	4013      	ands	r3, r2
 8004bda:	d010      	beq.n	8004bfe <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2244      	movs	r2, #68	@ 0x44
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2241      	movs	r2, #65	@ 0x41
 8004be8:	5c9b      	ldrb	r3, [r3, r2]
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	001a      	movs	r2, r3
 8004bee:	2328      	movs	r3, #40	@ 0x28
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	2b28      	cmp	r3, #40	@ 0x28
 8004bf4:	d003      	beq.n	8004bfe <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	22b0      	movs	r2, #176	@ 0xb0
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004bfe:	1cbb      	adds	r3, r7, #2
 8004c00:	2200      	movs	r2, #0
 8004c02:	5e9b      	ldrsh	r3, [r3, r2]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	da03      	bge.n	8004c10 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	22b8      	movs	r2, #184	@ 0xb8
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004c10:	1cbb      	adds	r3, r7, #2
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	2b10      	cmp	r3, #16
 8004c16:	d103      	bne.n	8004c20 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2290      	movs	r2, #144	@ 0x90
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004c20:	1cbb      	adds	r3, r7, #2
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	2b20      	cmp	r3, #32
 8004c26:	d103      	bne.n	8004c30 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004c30:	1cbb      	adds	r3, r7, #2
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	2b40      	cmp	r3, #64	@ 0x40
 8004c36:	d103      	bne.n	8004c40 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2240      	movs	r2, #64	@ 0x40
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	43d9      	mvns	r1, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	400a      	ands	r2, r1
 8004c50:	601a      	str	r2, [r3, #0]
}
 8004c52:	46c0      	nop			@ (mov r8, r8)
 8004c54:	46bd      	mov	sp, r7
 8004c56:	b004      	add	sp, #16
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2241      	movs	r2, #65	@ 0x41
 8004c6a:	5c9b      	ldrb	r3, [r3, r2]
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2b20      	cmp	r3, #32
 8004c70:	d138      	bne.n	8004ce4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2240      	movs	r2, #64	@ 0x40
 8004c76:	5c9b      	ldrb	r3, [r3, r2]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e032      	b.n	8004ce6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2240      	movs	r2, #64	@ 0x40
 8004c84:	2101      	movs	r1, #1
 8004c86:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2241      	movs	r2, #65	@ 0x41
 8004c8c:	2124      	movs	r1, #36	@ 0x24
 8004c8e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	438a      	bics	r2, r1
 8004c9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4911      	ldr	r1, [pc, #68]	@ (8004cf0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004cac:	400a      	ands	r2, r1
 8004cae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6819      	ldr	r1, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2101      	movs	r1, #1
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2241      	movs	r2, #65	@ 0x41
 8004cd4:	2120      	movs	r1, #32
 8004cd6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2240      	movs	r2, #64	@ 0x40
 8004cdc:	2100      	movs	r1, #0
 8004cde:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	e000      	b.n	8004ce6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ce4:	2302      	movs	r3, #2
  }
}
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	b002      	add	sp, #8
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	46c0      	nop			@ (mov r8, r8)
 8004cf0:	ffffefff 	.word	0xffffefff

08004cf4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2241      	movs	r2, #65	@ 0x41
 8004d02:	5c9b      	ldrb	r3, [r3, r2]
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b20      	cmp	r3, #32
 8004d08:	d139      	bne.n	8004d7e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2240      	movs	r2, #64	@ 0x40
 8004d0e:	5c9b      	ldrb	r3, [r3, r2]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d101      	bne.n	8004d18 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e033      	b.n	8004d80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2240      	movs	r2, #64	@ 0x40
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2241      	movs	r2, #65	@ 0x41
 8004d24:	2124      	movs	r1, #36	@ 0x24
 8004d26:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2101      	movs	r1, #1
 8004d34:	438a      	bics	r2, r1
 8004d36:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4a11      	ldr	r2, [pc, #68]	@ (8004d88 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004d44:	4013      	ands	r3, r2
 8004d46:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	021b      	lsls	r3, r3, #8
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2101      	movs	r1, #1
 8004d66:	430a      	orrs	r2, r1
 8004d68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2241      	movs	r2, #65	@ 0x41
 8004d6e:	2120      	movs	r1, #32
 8004d70:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2240      	movs	r2, #64	@ 0x40
 8004d76:	2100      	movs	r1, #0
 8004d78:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	e000      	b.n	8004d80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d7e:	2302      	movs	r3, #2
  }
}
 8004d80:	0018      	movs	r0, r3
 8004d82:	46bd      	mov	sp, r7
 8004d84:	b004      	add	sp, #16
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	fffff0ff 	.word	0xfffff0ff

08004d8c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b088      	sub	sp, #32
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e0e1      	b.n	8004f62 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2235      	movs	r2, #53	@ 0x35
 8004da2:	5c9b      	ldrb	r3, [r3, r2]
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d107      	bne.n	8004dba <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2234      	movs	r2, #52	@ 0x34
 8004dae:	2100      	movs	r1, #0
 8004db0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	0018      	movs	r0, r3
 8004db6:	f7fd fe63 	bl	8002a80 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2235      	movs	r2, #53	@ 0x35
 8004dbe:	2102      	movs	r1, #2
 8004dc0:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	69da      	ldr	r2, [r3, #28]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4967      	ldr	r1, [pc, #412]	@ (8004f6c <HAL_I2S_Init+0x1e0>)
 8004dce:	400a      	ands	r2, r1
 8004dd0:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d073      	beq.n	8004eca <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d102      	bne.n	8004df0 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004dea:	2310      	movs	r3, #16
 8004dec:	617b      	str	r3, [r7, #20]
 8004dee:	e001      	b.n	8004df4 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004df0:	2320      	movs	r3, #32
 8004df2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d802      	bhi.n	8004e02 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8004e02:	f000 fefb 	bl	8005bfc <HAL_RCC_GetSysClockFreq>
 8004e06:	0003      	movs	r3, r0
 8004e08:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691a      	ldr	r2, [r3, #16]
 8004e0e:	2380      	movs	r3, #128	@ 0x80
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d131      	bne.n	8004e7a <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d016      	beq.n	8004e4c <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	0019      	movs	r1, r3
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f7fb f98b 	bl	8000140 <__udivsi3>
 8004e2a:	0003      	movs	r3, r0
 8004e2c:	001a      	movs	r2, r3
 8004e2e:	0013      	movs	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	189b      	adds	r3, r3, r2
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	001a      	movs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	0019      	movs	r1, r3
 8004e3e:	0010      	movs	r0, r2
 8004e40:	f7fb f97e 	bl	8000140 <__udivsi3>
 8004e44:	0003      	movs	r3, r0
 8004e46:	3305      	adds	r3, #5
 8004e48:	613b      	str	r3, [r7, #16]
 8004e4a:	e02a      	b.n	8004ea2 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	0019      	movs	r1, r3
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f7fb f974 	bl	8000140 <__udivsi3>
 8004e58:	0003      	movs	r3, r0
 8004e5a:	001a      	movs	r2, r3
 8004e5c:	0013      	movs	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	189b      	adds	r3, r3, r2
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	001a      	movs	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	0019      	movs	r1, r3
 8004e6c:	0010      	movs	r0, r2
 8004e6e:	f7fb f967 	bl	8000140 <__udivsi3>
 8004e72:	0003      	movs	r3, r0
 8004e74:	3305      	adds	r3, #5
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	e013      	b.n	8004ea2 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e7a:	6979      	ldr	r1, [r7, #20]
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f7fb f95f 	bl	8000140 <__udivsi3>
 8004e82:	0003      	movs	r3, r0
 8004e84:	001a      	movs	r2, r3
 8004e86:	0013      	movs	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	189b      	adds	r3, r3, r2
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	001a      	movs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	695b      	ldr	r3, [r3, #20]
 8004e94:	0019      	movs	r1, r3
 8004e96:	0010      	movs	r0, r2
 8004e98:	f7fb f952 	bl	8000140 <__udivsi3>
 8004e9c:	0003      	movs	r3, r0
 8004e9e:	3305      	adds	r3, #5
 8004ea0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	210a      	movs	r1, #10
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	f7fb f94a 	bl	8000140 <__udivsi3>
 8004eac:	0003      	movs	r3, r0
 8004eae:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	085b      	lsrs	r3, r3, #1
 8004ec0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	021b      	lsls	r3, r3, #8
 8004ec6:	61bb      	str	r3, [r7, #24]
 8004ec8:	e003      	b.n	8004ed2 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004eca:	2302      	movs	r3, #2
 8004ecc:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d902      	bls.n	8004ede <HAL_I2S_Init+0x152>
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	2bff      	cmp	r3, #255	@ 0xff
 8004edc:	d907      	bls.n	8004eee <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee2:	2210      	movs	r2, #16
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e039      	b.n	8004f62 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691a      	ldr	r2, [r3, #16]
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	0011      	movs	r1, r2
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	69fa      	ldr	r2, [r7, #28]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	4a18      	ldr	r2, [pc, #96]	@ (8004f6c <HAL_I2S_Init+0x1e0>)
 8004f0a:	401a      	ands	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6859      	ldr	r1, [r3, #4]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	4319      	orrs	r1, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	4319      	orrs	r1, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	430b      	orrs	r3, r1
 8004f22:	431a      	orrs	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2180      	movs	r1, #128	@ 0x80
 8004f2a:	0109      	lsls	r1, r1, #4
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2b30      	cmp	r3, #48	@ 0x30
 8004f36:	d003      	beq.n	8004f40 <HAL_I2S_Init+0x1b4>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	2bb0      	cmp	r3, #176	@ 0xb0
 8004f3e:	d108      	bne.n	8004f52 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	69da      	ldr	r2, [r3, #28]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2180      	movs	r1, #128	@ 0x80
 8004f4c:	0149      	lsls	r1, r1, #5
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2235      	movs	r2, #53	@ 0x35
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	0018      	movs	r0, r3
 8004f64:	46bd      	mov	sp, r7
 8004f66:	b008      	add	sp, #32
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	46c0      	nop			@ (mov r8, r8)
 8004f6c:	fffff040 	.word	0xfffff040

08004f70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f72:	b08b      	sub	sp, #44	@ 0x2c
 8004f74:	af06      	add	r7, sp, #24
 8004f76:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e0f0      	b.n	8005164 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a79      	ldr	r2, [pc, #484]	@ (800516c <HAL_PCD_Init+0x1fc>)
 8004f86:	5c9b      	ldrb	r3, [r3, r2]
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d108      	bne.n	8004fa0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	23aa      	movs	r3, #170	@ 0xaa
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	2100      	movs	r1, #0
 8004f96:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	f7fe f9b8 	bl	8003310 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a72      	ldr	r2, [pc, #456]	@ (800516c <HAL_PCD_Init+0x1fc>)
 8004fa4:	2103      	movs	r1, #3
 8004fa6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	0018      	movs	r0, r3
 8004fae:	f002 f9e5 	bl	800737c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fb2:	230f      	movs	r3, #15
 8004fb4:	18fb      	adds	r3, r7, r3
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	701a      	strb	r2, [r3, #0]
 8004fba:	e049      	b.n	8005050 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004fbc:	200f      	movs	r0, #15
 8004fbe:	183b      	adds	r3, r7, r0
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	0013      	movs	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	189b      	adds	r3, r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	18cb      	adds	r3, r1, r3
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004fd6:	183b      	adds	r3, r7, r0
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	0013      	movs	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	189b      	adds	r3, r3, r2
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	183a      	adds	r2, r7, r0
 8004fe8:	7812      	ldrb	r2, [r2, #0]
 8004fea:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004fec:	183b      	adds	r3, r7, r0
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	6879      	ldr	r1, [r7, #4]
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	0013      	movs	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	189b      	adds	r3, r3, r2
 8004ffa:	00db      	lsls	r3, r3, #3
 8004ffc:	18cb      	adds	r3, r1, r3
 8004ffe:	3303      	adds	r3, #3
 8005000:	2200      	movs	r2, #0
 8005002:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005004:	183b      	adds	r3, r7, r0
 8005006:	781a      	ldrb	r2, [r3, #0]
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	0013      	movs	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	189b      	adds	r3, r3, r2
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	18cb      	adds	r3, r1, r3
 8005014:	3338      	adds	r3, #56	@ 0x38
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800501a:	183b      	adds	r3, r7, r0
 800501c:	781a      	ldrb	r2, [r3, #0]
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	0013      	movs	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	189b      	adds	r3, r3, r2
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	18cb      	adds	r3, r1, r3
 800502a:	333c      	adds	r3, #60	@ 0x3c
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005030:	183b      	adds	r3, r7, r0
 8005032:	781a      	ldrb	r2, [r3, #0]
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	0013      	movs	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	189b      	adds	r3, r3, r2
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	18cb      	adds	r3, r1, r3
 8005040:	3340      	adds	r3, #64	@ 0x40
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005046:	183b      	adds	r3, r7, r0
 8005048:	781a      	ldrb	r2, [r3, #0]
 800504a:	183b      	adds	r3, r7, r0
 800504c:	3201      	adds	r2, #1
 800504e:	701a      	strb	r2, [r3, #0]
 8005050:	210f      	movs	r1, #15
 8005052:	187b      	adds	r3, r7, r1
 8005054:	781a      	ldrb	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	429a      	cmp	r2, r3
 800505c:	d3ae      	bcc.n	8004fbc <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800505e:	187b      	adds	r3, r7, r1
 8005060:	2200      	movs	r2, #0
 8005062:	701a      	strb	r2, [r3, #0]
 8005064:	e056      	b.n	8005114 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005066:	240f      	movs	r4, #15
 8005068:	193b      	adds	r3, r7, r4
 800506a:	781a      	ldrb	r2, [r3, #0]
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	236a      	movs	r3, #106	@ 0x6a
 8005070:	33ff      	adds	r3, #255	@ 0xff
 8005072:	0019      	movs	r1, r3
 8005074:	0013      	movs	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	189b      	adds	r3, r3, r2
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	18c3      	adds	r3, r0, r3
 800507e:	185b      	adds	r3, r3, r1
 8005080:	2200      	movs	r2, #0
 8005082:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005084:	193b      	adds	r3, r7, r4
 8005086:	781a      	ldrb	r2, [r3, #0]
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	23b4      	movs	r3, #180	@ 0xb4
 800508c:	0059      	lsls	r1, r3, #1
 800508e:	0013      	movs	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	189b      	adds	r3, r3, r2
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	18c3      	adds	r3, r0, r3
 8005098:	185b      	adds	r3, r3, r1
 800509a:	193a      	adds	r2, r7, r4
 800509c:	7812      	ldrb	r2, [r2, #0]
 800509e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80050a0:	193b      	adds	r3, r7, r4
 80050a2:	781a      	ldrb	r2, [r3, #0]
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	236c      	movs	r3, #108	@ 0x6c
 80050a8:	33ff      	adds	r3, #255	@ 0xff
 80050aa:	0019      	movs	r1, r3
 80050ac:	0013      	movs	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	189b      	adds	r3, r3, r2
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	18c3      	adds	r3, r0, r3
 80050b6:	185b      	adds	r3, r3, r1
 80050b8:	2200      	movs	r2, #0
 80050ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80050bc:	193b      	adds	r3, r7, r4
 80050be:	781a      	ldrb	r2, [r3, #0]
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	23bc      	movs	r3, #188	@ 0xbc
 80050c4:	0059      	lsls	r1, r3, #1
 80050c6:	0013      	movs	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	189b      	adds	r3, r3, r2
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	18c3      	adds	r3, r0, r3
 80050d0:	185b      	adds	r3, r3, r1
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80050d6:	193b      	adds	r3, r7, r4
 80050d8:	781a      	ldrb	r2, [r3, #0]
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	23be      	movs	r3, #190	@ 0xbe
 80050de:	0059      	lsls	r1, r3, #1
 80050e0:	0013      	movs	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	189b      	adds	r3, r3, r2
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	18c3      	adds	r3, r0, r3
 80050ea:	185b      	adds	r3, r3, r1
 80050ec:	2200      	movs	r2, #0
 80050ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80050f0:	193b      	adds	r3, r7, r4
 80050f2:	781a      	ldrb	r2, [r3, #0]
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	23c0      	movs	r3, #192	@ 0xc0
 80050f8:	0059      	lsls	r1, r3, #1
 80050fa:	0013      	movs	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	189b      	adds	r3, r3, r2
 8005100:	00db      	lsls	r3, r3, #3
 8005102:	18c3      	adds	r3, r0, r3
 8005104:	185b      	adds	r3, r3, r1
 8005106:	2200      	movs	r2, #0
 8005108:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800510a:	193b      	adds	r3, r7, r4
 800510c:	781a      	ldrb	r2, [r3, #0]
 800510e:	193b      	adds	r3, r7, r4
 8005110:	3201      	adds	r2, #1
 8005112:	701a      	strb	r2, [r3, #0]
 8005114:	230f      	movs	r3, #15
 8005116:	18fb      	adds	r3, r7, r3
 8005118:	781a      	ldrb	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	429a      	cmp	r2, r3
 8005120:	d3a1      	bcc.n	8005066 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	466a      	mov	r2, sp
 800512a:	0011      	movs	r1, r2
 800512c:	001a      	movs	r2, r3
 800512e:	3210      	adds	r2, #16
 8005130:	ca70      	ldmia	r2!, {r4, r5, r6}
 8005132:	c170      	stmia	r1!, {r4, r5, r6}
 8005134:	ca30      	ldmia	r2!, {r4, r5}
 8005136:	c130      	stmia	r1!, {r4, r5}
 8005138:	6859      	ldr	r1, [r3, #4]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f002 f937 	bl	80073b0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2224      	movs	r2, #36	@ 0x24
 8005146:	2100      	movs	r1, #0
 8005148:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a07      	ldr	r2, [pc, #28]	@ (800516c <HAL_PCD_Init+0x1fc>)
 800514e:	2101      	movs	r1, #1
 8005150:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d103      	bne.n	8005162 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	0018      	movs	r0, r3
 800515e:	f000 f807 	bl	8005170 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	0018      	movs	r0, r3
 8005166:	46bd      	mov	sp, r7
 8005168:	b005      	add	sp, #20
 800516a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800516c:	000002a9 	.word	0x000002a9

08005170 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	23ba      	movs	r3, #186	@ 0xba
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	2101      	movs	r1, #1
 8005186:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	23b8      	movs	r3, #184	@ 0xb8
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	2100      	movs	r1, #0
 8005190:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2254      	movs	r2, #84	@ 0x54
 8005196:	5a9b      	ldrh	r3, [r3, r2]
 8005198:	b29b      	uxth	r3, r3
 800519a:	2201      	movs	r2, #1
 800519c:	4313      	orrs	r3, r2
 800519e:	b299      	uxth	r1, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2254      	movs	r2, #84	@ 0x54
 80051a4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2254      	movs	r2, #84	@ 0x54
 80051aa:	5a9b      	ldrh	r3, [r3, r2]
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2202      	movs	r2, #2
 80051b0:	4313      	orrs	r3, r2
 80051b2:	b299      	uxth	r1, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2254      	movs	r2, #84	@ 0x54
 80051b8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	0018      	movs	r0, r3
 80051be:	46bd      	mov	sp, r7
 80051c0:	b004      	add	sp, #16
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051c4:	b5b0      	push	{r4, r5, r7, lr}
 80051c6:	b08a      	sub	sp, #40	@ 0x28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d102      	bne.n	80051d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	f000 fbbf 	bl	8005956 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051d8:	4bc9      	ldr	r3, [pc, #804]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	220c      	movs	r2, #12
 80051de:	4013      	ands	r3, r2
 80051e0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051e2:	4bc7      	ldr	r3, [pc, #796]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	2380      	movs	r3, #128	@ 0x80
 80051e8:	025b      	lsls	r3, r3, #9
 80051ea:	4013      	ands	r3, r2
 80051ec:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2201      	movs	r2, #1
 80051f4:	4013      	ands	r3, r2
 80051f6:	d100      	bne.n	80051fa <HAL_RCC_OscConfig+0x36>
 80051f8:	e07e      	b.n	80052f8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d007      	beq.n	8005210 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	2b0c      	cmp	r3, #12
 8005204:	d112      	bne.n	800522c <HAL_RCC_OscConfig+0x68>
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	2380      	movs	r3, #128	@ 0x80
 800520a:	025b      	lsls	r3, r3, #9
 800520c:	429a      	cmp	r2, r3
 800520e:	d10d      	bne.n	800522c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005210:	4bbb      	ldr	r3, [pc, #748]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	2380      	movs	r3, #128	@ 0x80
 8005216:	029b      	lsls	r3, r3, #10
 8005218:	4013      	ands	r3, r2
 800521a:	d100      	bne.n	800521e <HAL_RCC_OscConfig+0x5a>
 800521c:	e06b      	b.n	80052f6 <HAL_RCC_OscConfig+0x132>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d167      	bne.n	80052f6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	f000 fb95 	bl	8005956 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	2380      	movs	r3, #128	@ 0x80
 8005232:	025b      	lsls	r3, r3, #9
 8005234:	429a      	cmp	r2, r3
 8005236:	d107      	bne.n	8005248 <HAL_RCC_OscConfig+0x84>
 8005238:	4bb1      	ldr	r3, [pc, #708]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	4bb0      	ldr	r3, [pc, #704]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 800523e:	2180      	movs	r1, #128	@ 0x80
 8005240:	0249      	lsls	r1, r1, #9
 8005242:	430a      	orrs	r2, r1
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	e027      	b.n	8005298 <HAL_RCC_OscConfig+0xd4>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	23a0      	movs	r3, #160	@ 0xa0
 800524e:	02db      	lsls	r3, r3, #11
 8005250:	429a      	cmp	r2, r3
 8005252:	d10e      	bne.n	8005272 <HAL_RCC_OscConfig+0xae>
 8005254:	4baa      	ldr	r3, [pc, #680]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	4ba9      	ldr	r3, [pc, #676]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 800525a:	2180      	movs	r1, #128	@ 0x80
 800525c:	02c9      	lsls	r1, r1, #11
 800525e:	430a      	orrs	r2, r1
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	4ba7      	ldr	r3, [pc, #668]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	4ba6      	ldr	r3, [pc, #664]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 8005268:	2180      	movs	r1, #128	@ 0x80
 800526a:	0249      	lsls	r1, r1, #9
 800526c:	430a      	orrs	r2, r1
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	e012      	b.n	8005298 <HAL_RCC_OscConfig+0xd4>
 8005272:	4ba3      	ldr	r3, [pc, #652]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	4ba2      	ldr	r3, [pc, #648]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 8005278:	49a2      	ldr	r1, [pc, #648]	@ (8005504 <HAL_RCC_OscConfig+0x340>)
 800527a:	400a      	ands	r2, r1
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	4ba0      	ldr	r3, [pc, #640]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	2380      	movs	r3, #128	@ 0x80
 8005284:	025b      	lsls	r3, r3, #9
 8005286:	4013      	ands	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4b9c      	ldr	r3, [pc, #624]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	4b9b      	ldr	r3, [pc, #620]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 8005292:	499d      	ldr	r1, [pc, #628]	@ (8005508 <HAL_RCC_OscConfig+0x344>)
 8005294:	400a      	ands	r2, r1
 8005296:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d015      	beq.n	80052cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a0:	f7fe f9f2 	bl	8003688 <HAL_GetTick>
 80052a4:	0003      	movs	r3, r0
 80052a6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052a8:	e009      	b.n	80052be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052aa:	f7fe f9ed 	bl	8003688 <HAL_GetTick>
 80052ae:	0002      	movs	r2, r0
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b64      	cmp	r3, #100	@ 0x64
 80052b6:	d902      	bls.n	80052be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	f000 fb4c 	bl	8005956 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052be:	4b90      	ldr	r3, [pc, #576]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	2380      	movs	r3, #128	@ 0x80
 80052c4:	029b      	lsls	r3, r3, #10
 80052c6:	4013      	ands	r3, r2
 80052c8:	d0ef      	beq.n	80052aa <HAL_RCC_OscConfig+0xe6>
 80052ca:	e015      	b.n	80052f8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052cc:	f7fe f9dc 	bl	8003688 <HAL_GetTick>
 80052d0:	0003      	movs	r3, r0
 80052d2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052d4:	e008      	b.n	80052e8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052d6:	f7fe f9d7 	bl	8003688 <HAL_GetTick>
 80052da:	0002      	movs	r2, r0
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b64      	cmp	r3, #100	@ 0x64
 80052e2:	d901      	bls.n	80052e8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e336      	b.n	8005956 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052e8:	4b85      	ldr	r3, [pc, #532]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	2380      	movs	r3, #128	@ 0x80
 80052ee:	029b      	lsls	r3, r3, #10
 80052f0:	4013      	ands	r3, r2
 80052f2:	d1f0      	bne.n	80052d6 <HAL_RCC_OscConfig+0x112>
 80052f4:	e000      	b.n	80052f8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2202      	movs	r2, #2
 80052fe:	4013      	ands	r3, r2
 8005300:	d100      	bne.n	8005304 <HAL_RCC_OscConfig+0x140>
 8005302:	e099      	b.n	8005438 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800530a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530c:	2220      	movs	r2, #32
 800530e:	4013      	ands	r3, r2
 8005310:	d009      	beq.n	8005326 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005312:	4b7b      	ldr	r3, [pc, #492]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	4b7a      	ldr	r3, [pc, #488]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 8005318:	2120      	movs	r1, #32
 800531a:	430a      	orrs	r2, r1
 800531c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800531e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005320:	2220      	movs	r2, #32
 8005322:	4393      	bics	r3, r2
 8005324:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	2b04      	cmp	r3, #4
 800532a:	d005      	beq.n	8005338 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	2b0c      	cmp	r3, #12
 8005330:	d13e      	bne.n	80053b0 <HAL_RCC_OscConfig+0x1ec>
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d13b      	bne.n	80053b0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005338:	4b71      	ldr	r3, [pc, #452]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2204      	movs	r2, #4
 800533e:	4013      	ands	r3, r2
 8005340:	d004      	beq.n	800534c <HAL_RCC_OscConfig+0x188>
 8005342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e304      	b.n	8005956 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800534c:	4b6c      	ldr	r3, [pc, #432]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	4a6e      	ldr	r2, [pc, #440]	@ (800550c <HAL_RCC_OscConfig+0x348>)
 8005352:	4013      	ands	r3, r2
 8005354:	0019      	movs	r1, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	021a      	lsls	r2, r3, #8
 800535c:	4b68      	ldr	r3, [pc, #416]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 800535e:	430a      	orrs	r2, r1
 8005360:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005362:	4b67      	ldr	r3, [pc, #412]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2209      	movs	r2, #9
 8005368:	4393      	bics	r3, r2
 800536a:	0019      	movs	r1, r3
 800536c:	4b64      	ldr	r3, [pc, #400]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 800536e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005370:	430a      	orrs	r2, r1
 8005372:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005374:	f000 fc42 	bl	8005bfc <HAL_RCC_GetSysClockFreq>
 8005378:	0001      	movs	r1, r0
 800537a:	4b61      	ldr	r3, [pc, #388]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	091b      	lsrs	r3, r3, #4
 8005380:	220f      	movs	r2, #15
 8005382:	4013      	ands	r3, r2
 8005384:	4a62      	ldr	r2, [pc, #392]	@ (8005510 <HAL_RCC_OscConfig+0x34c>)
 8005386:	5cd3      	ldrb	r3, [r2, r3]
 8005388:	000a      	movs	r2, r1
 800538a:	40da      	lsrs	r2, r3
 800538c:	4b61      	ldr	r3, [pc, #388]	@ (8005514 <HAL_RCC_OscConfig+0x350>)
 800538e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005390:	4b61      	ldr	r3, [pc, #388]	@ (8005518 <HAL_RCC_OscConfig+0x354>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2513      	movs	r5, #19
 8005396:	197c      	adds	r4, r7, r5
 8005398:	0018      	movs	r0, r3
 800539a:	f7fe f92f 	bl	80035fc <HAL_InitTick>
 800539e:	0003      	movs	r3, r0
 80053a0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80053a2:	197b      	adds	r3, r7, r5
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d046      	beq.n	8005438 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80053aa:	197b      	adds	r3, r7, r5
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	e2d2      	b.n	8005956 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80053b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d027      	beq.n	8005406 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80053b6:	4b52      	ldr	r3, [pc, #328]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2209      	movs	r2, #9
 80053bc:	4393      	bics	r3, r2
 80053be:	0019      	movs	r1, r3
 80053c0:	4b4f      	ldr	r3, [pc, #316]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 80053c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053c4:	430a      	orrs	r2, r1
 80053c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c8:	f7fe f95e 	bl	8003688 <HAL_GetTick>
 80053cc:	0003      	movs	r3, r0
 80053ce:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053d0:	e008      	b.n	80053e4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053d2:	f7fe f959 	bl	8003688 <HAL_GetTick>
 80053d6:	0002      	movs	r2, r0
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e2b8      	b.n	8005956 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053e4:	4b46      	ldr	r3, [pc, #280]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2204      	movs	r2, #4
 80053ea:	4013      	ands	r3, r2
 80053ec:	d0f1      	beq.n	80053d2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ee:	4b44      	ldr	r3, [pc, #272]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	4a46      	ldr	r2, [pc, #280]	@ (800550c <HAL_RCC_OscConfig+0x348>)
 80053f4:	4013      	ands	r3, r2
 80053f6:	0019      	movs	r1, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	021a      	lsls	r2, r3, #8
 80053fe:	4b40      	ldr	r3, [pc, #256]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 8005400:	430a      	orrs	r2, r1
 8005402:	605a      	str	r2, [r3, #4]
 8005404:	e018      	b.n	8005438 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005406:	4b3e      	ldr	r3, [pc, #248]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	4b3d      	ldr	r3, [pc, #244]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 800540c:	2101      	movs	r1, #1
 800540e:	438a      	bics	r2, r1
 8005410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005412:	f7fe f939 	bl	8003688 <HAL_GetTick>
 8005416:	0003      	movs	r3, r0
 8005418:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800541c:	f7fe f934 	bl	8003688 <HAL_GetTick>
 8005420:	0002      	movs	r2, r0
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e293      	b.n	8005956 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800542e:	4b34      	ldr	r3, [pc, #208]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2204      	movs	r2, #4
 8005434:	4013      	ands	r3, r2
 8005436:	d1f1      	bne.n	800541c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2210      	movs	r2, #16
 800543e:	4013      	ands	r3, r2
 8005440:	d100      	bne.n	8005444 <HAL_RCC_OscConfig+0x280>
 8005442:	e0a2      	b.n	800558a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d140      	bne.n	80054cc <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800544a:	4b2d      	ldr	r3, [pc, #180]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	2380      	movs	r3, #128	@ 0x80
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4013      	ands	r3, r2
 8005454:	d005      	beq.n	8005462 <HAL_RCC_OscConfig+0x29e>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e279      	b.n	8005956 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005462:	4b27      	ldr	r3, [pc, #156]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	4a2d      	ldr	r2, [pc, #180]	@ (800551c <HAL_RCC_OscConfig+0x358>)
 8005468:	4013      	ands	r3, r2
 800546a:	0019      	movs	r1, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005470:	4b23      	ldr	r3, [pc, #140]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 8005472:	430a      	orrs	r2, r1
 8005474:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005476:	4b22      	ldr	r3, [pc, #136]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	021b      	lsls	r3, r3, #8
 800547c:	0a19      	lsrs	r1, r3, #8
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	061a      	lsls	r2, r3, #24
 8005484:	4b1e      	ldr	r3, [pc, #120]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 8005486:	430a      	orrs	r2, r1
 8005488:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548e:	0b5b      	lsrs	r3, r3, #13
 8005490:	3301      	adds	r3, #1
 8005492:	2280      	movs	r2, #128	@ 0x80
 8005494:	0212      	lsls	r2, r2, #8
 8005496:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005498:	4b19      	ldr	r3, [pc, #100]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	091b      	lsrs	r3, r3, #4
 800549e:	210f      	movs	r1, #15
 80054a0:	400b      	ands	r3, r1
 80054a2:	491b      	ldr	r1, [pc, #108]	@ (8005510 <HAL_RCC_OscConfig+0x34c>)
 80054a4:	5ccb      	ldrb	r3, [r1, r3]
 80054a6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80054a8:	4b1a      	ldr	r3, [pc, #104]	@ (8005514 <HAL_RCC_OscConfig+0x350>)
 80054aa:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80054ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005518 <HAL_RCC_OscConfig+0x354>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2513      	movs	r5, #19
 80054b2:	197c      	adds	r4, r7, r5
 80054b4:	0018      	movs	r0, r3
 80054b6:	f7fe f8a1 	bl	80035fc <HAL_InitTick>
 80054ba:	0003      	movs	r3, r0
 80054bc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80054be:	197b      	adds	r3, r7, r5
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d061      	beq.n	800558a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80054c6:	197b      	adds	r3, r7, r5
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	e244      	b.n	8005956 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d040      	beq.n	8005556 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80054d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	4b09      	ldr	r3, [pc, #36]	@ (8005500 <HAL_RCC_OscConfig+0x33c>)
 80054da:	2180      	movs	r1, #128	@ 0x80
 80054dc:	0049      	lsls	r1, r1, #1
 80054de:	430a      	orrs	r2, r1
 80054e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e2:	f7fe f8d1 	bl	8003688 <HAL_GetTick>
 80054e6:	0003      	movs	r3, r0
 80054e8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80054ea:	e019      	b.n	8005520 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054ec:	f7fe f8cc 	bl	8003688 <HAL_GetTick>
 80054f0:	0002      	movs	r2, r0
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d912      	bls.n	8005520 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e22b      	b.n	8005956 <HAL_RCC_OscConfig+0x792>
 80054fe:	46c0      	nop			@ (mov r8, r8)
 8005500:	40021000 	.word	0x40021000
 8005504:	fffeffff 	.word	0xfffeffff
 8005508:	fffbffff 	.word	0xfffbffff
 800550c:	ffffe0ff 	.word	0xffffe0ff
 8005510:	0800a43c 	.word	0x0800a43c
 8005514:	20000000 	.word	0x20000000
 8005518:	20000008 	.word	0x20000008
 800551c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005520:	4bca      	ldr	r3, [pc, #808]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	2380      	movs	r3, #128	@ 0x80
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4013      	ands	r3, r2
 800552a:	d0df      	beq.n	80054ec <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800552c:	4bc7      	ldr	r3, [pc, #796]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	4ac7      	ldr	r2, [pc, #796]	@ (8005850 <HAL_RCC_OscConfig+0x68c>)
 8005532:	4013      	ands	r3, r2
 8005534:	0019      	movs	r1, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800553a:	4bc4      	ldr	r3, [pc, #784]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 800553c:	430a      	orrs	r2, r1
 800553e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005540:	4bc2      	ldr	r3, [pc, #776]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	021b      	lsls	r3, r3, #8
 8005546:	0a19      	lsrs	r1, r3, #8
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	061a      	lsls	r2, r3, #24
 800554e:	4bbf      	ldr	r3, [pc, #764]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 8005550:	430a      	orrs	r2, r1
 8005552:	605a      	str	r2, [r3, #4]
 8005554:	e019      	b.n	800558a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005556:	4bbd      	ldr	r3, [pc, #756]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	4bbc      	ldr	r3, [pc, #752]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 800555c:	49bd      	ldr	r1, [pc, #756]	@ (8005854 <HAL_RCC_OscConfig+0x690>)
 800555e:	400a      	ands	r2, r1
 8005560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005562:	f7fe f891 	bl	8003688 <HAL_GetTick>
 8005566:	0003      	movs	r3, r0
 8005568:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800556a:	e008      	b.n	800557e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800556c:	f7fe f88c 	bl	8003688 <HAL_GetTick>
 8005570:	0002      	movs	r2, r0
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e1eb      	b.n	8005956 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800557e:	4bb3      	ldr	r3, [pc, #716]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	2380      	movs	r3, #128	@ 0x80
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4013      	ands	r3, r2
 8005588:	d1f0      	bne.n	800556c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2208      	movs	r2, #8
 8005590:	4013      	ands	r3, r2
 8005592:	d036      	beq.n	8005602 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d019      	beq.n	80055d0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800559c:	4bab      	ldr	r3, [pc, #684]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 800559e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055a0:	4baa      	ldr	r3, [pc, #680]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 80055a2:	2101      	movs	r1, #1
 80055a4:	430a      	orrs	r2, r1
 80055a6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055a8:	f7fe f86e 	bl	8003688 <HAL_GetTick>
 80055ac:	0003      	movs	r3, r0
 80055ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055b0:	e008      	b.n	80055c4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055b2:	f7fe f869 	bl	8003688 <HAL_GetTick>
 80055b6:	0002      	movs	r2, r0
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d901      	bls.n	80055c4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e1c8      	b.n	8005956 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80055c4:	4ba1      	ldr	r3, [pc, #644]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 80055c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055c8:	2202      	movs	r2, #2
 80055ca:	4013      	ands	r3, r2
 80055cc:	d0f1      	beq.n	80055b2 <HAL_RCC_OscConfig+0x3ee>
 80055ce:	e018      	b.n	8005602 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055d0:	4b9e      	ldr	r3, [pc, #632]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 80055d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055d4:	4b9d      	ldr	r3, [pc, #628]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 80055d6:	2101      	movs	r1, #1
 80055d8:	438a      	bics	r2, r1
 80055da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055dc:	f7fe f854 	bl	8003688 <HAL_GetTick>
 80055e0:	0003      	movs	r3, r0
 80055e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055e4:	e008      	b.n	80055f8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055e6:	f7fe f84f 	bl	8003688 <HAL_GetTick>
 80055ea:	0002      	movs	r2, r0
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d901      	bls.n	80055f8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e1ae      	b.n	8005956 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055f8:	4b94      	ldr	r3, [pc, #592]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 80055fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055fc:	2202      	movs	r2, #2
 80055fe:	4013      	ands	r3, r2
 8005600:	d1f1      	bne.n	80055e6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2204      	movs	r2, #4
 8005608:	4013      	ands	r3, r2
 800560a:	d100      	bne.n	800560e <HAL_RCC_OscConfig+0x44a>
 800560c:	e0ae      	b.n	800576c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800560e:	2023      	movs	r0, #35	@ 0x23
 8005610:	183b      	adds	r3, r7, r0
 8005612:	2200      	movs	r2, #0
 8005614:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005616:	4b8d      	ldr	r3, [pc, #564]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 8005618:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800561a:	2380      	movs	r3, #128	@ 0x80
 800561c:	055b      	lsls	r3, r3, #21
 800561e:	4013      	ands	r3, r2
 8005620:	d109      	bne.n	8005636 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005622:	4b8a      	ldr	r3, [pc, #552]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 8005624:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005626:	4b89      	ldr	r3, [pc, #548]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 8005628:	2180      	movs	r1, #128	@ 0x80
 800562a:	0549      	lsls	r1, r1, #21
 800562c:	430a      	orrs	r2, r1
 800562e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8005630:	183b      	adds	r3, r7, r0
 8005632:	2201      	movs	r2, #1
 8005634:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005636:	4b88      	ldr	r3, [pc, #544]	@ (8005858 <HAL_RCC_OscConfig+0x694>)
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	2380      	movs	r3, #128	@ 0x80
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	4013      	ands	r3, r2
 8005640:	d11a      	bne.n	8005678 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005642:	4b85      	ldr	r3, [pc, #532]	@ (8005858 <HAL_RCC_OscConfig+0x694>)
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	4b84      	ldr	r3, [pc, #528]	@ (8005858 <HAL_RCC_OscConfig+0x694>)
 8005648:	2180      	movs	r1, #128	@ 0x80
 800564a:	0049      	lsls	r1, r1, #1
 800564c:	430a      	orrs	r2, r1
 800564e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005650:	f7fe f81a 	bl	8003688 <HAL_GetTick>
 8005654:	0003      	movs	r3, r0
 8005656:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005658:	e008      	b.n	800566c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800565a:	f7fe f815 	bl	8003688 <HAL_GetTick>
 800565e:	0002      	movs	r2, r0
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b64      	cmp	r3, #100	@ 0x64
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e174      	b.n	8005956 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800566c:	4b7a      	ldr	r3, [pc, #488]	@ (8005858 <HAL_RCC_OscConfig+0x694>)
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	2380      	movs	r3, #128	@ 0x80
 8005672:	005b      	lsls	r3, r3, #1
 8005674:	4013      	ands	r3, r2
 8005676:	d0f0      	beq.n	800565a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	2380      	movs	r3, #128	@ 0x80
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	429a      	cmp	r2, r3
 8005682:	d107      	bne.n	8005694 <HAL_RCC_OscConfig+0x4d0>
 8005684:	4b71      	ldr	r3, [pc, #452]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 8005686:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005688:	4b70      	ldr	r3, [pc, #448]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 800568a:	2180      	movs	r1, #128	@ 0x80
 800568c:	0049      	lsls	r1, r1, #1
 800568e:	430a      	orrs	r2, r1
 8005690:	651a      	str	r2, [r3, #80]	@ 0x50
 8005692:	e031      	b.n	80056f8 <HAL_RCC_OscConfig+0x534>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10c      	bne.n	80056b6 <HAL_RCC_OscConfig+0x4f2>
 800569c:	4b6b      	ldr	r3, [pc, #428]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 800569e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056a0:	4b6a      	ldr	r3, [pc, #424]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 80056a2:	496c      	ldr	r1, [pc, #432]	@ (8005854 <HAL_RCC_OscConfig+0x690>)
 80056a4:	400a      	ands	r2, r1
 80056a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80056a8:	4b68      	ldr	r3, [pc, #416]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 80056aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056ac:	4b67      	ldr	r3, [pc, #412]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 80056ae:	496b      	ldr	r1, [pc, #428]	@ (800585c <HAL_RCC_OscConfig+0x698>)
 80056b0:	400a      	ands	r2, r1
 80056b2:	651a      	str	r2, [r3, #80]	@ 0x50
 80056b4:	e020      	b.n	80056f8 <HAL_RCC_OscConfig+0x534>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689a      	ldr	r2, [r3, #8]
 80056ba:	23a0      	movs	r3, #160	@ 0xa0
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	429a      	cmp	r2, r3
 80056c0:	d10e      	bne.n	80056e0 <HAL_RCC_OscConfig+0x51c>
 80056c2:	4b62      	ldr	r3, [pc, #392]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 80056c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056c6:	4b61      	ldr	r3, [pc, #388]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 80056c8:	2180      	movs	r1, #128	@ 0x80
 80056ca:	00c9      	lsls	r1, r1, #3
 80056cc:	430a      	orrs	r2, r1
 80056ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80056d0:	4b5e      	ldr	r3, [pc, #376]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 80056d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056d4:	4b5d      	ldr	r3, [pc, #372]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 80056d6:	2180      	movs	r1, #128	@ 0x80
 80056d8:	0049      	lsls	r1, r1, #1
 80056da:	430a      	orrs	r2, r1
 80056dc:	651a      	str	r2, [r3, #80]	@ 0x50
 80056de:	e00b      	b.n	80056f8 <HAL_RCC_OscConfig+0x534>
 80056e0:	4b5a      	ldr	r3, [pc, #360]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 80056e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056e4:	4b59      	ldr	r3, [pc, #356]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 80056e6:	495b      	ldr	r1, [pc, #364]	@ (8005854 <HAL_RCC_OscConfig+0x690>)
 80056e8:	400a      	ands	r2, r1
 80056ea:	651a      	str	r2, [r3, #80]	@ 0x50
 80056ec:	4b57      	ldr	r3, [pc, #348]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 80056ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80056f0:	4b56      	ldr	r3, [pc, #344]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 80056f2:	495a      	ldr	r1, [pc, #360]	@ (800585c <HAL_RCC_OscConfig+0x698>)
 80056f4:	400a      	ands	r2, r1
 80056f6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d015      	beq.n	800572c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005700:	f7fd ffc2 	bl	8003688 <HAL_GetTick>
 8005704:	0003      	movs	r3, r0
 8005706:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005708:	e009      	b.n	800571e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800570a:	f7fd ffbd 	bl	8003688 <HAL_GetTick>
 800570e:	0002      	movs	r2, r0
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	4a52      	ldr	r2, [pc, #328]	@ (8005860 <HAL_RCC_OscConfig+0x69c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e11b      	b.n	8005956 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800571e:	4b4b      	ldr	r3, [pc, #300]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 8005720:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005722:	2380      	movs	r3, #128	@ 0x80
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4013      	ands	r3, r2
 8005728:	d0ef      	beq.n	800570a <HAL_RCC_OscConfig+0x546>
 800572a:	e014      	b.n	8005756 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800572c:	f7fd ffac 	bl	8003688 <HAL_GetTick>
 8005730:	0003      	movs	r3, r0
 8005732:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005734:	e009      	b.n	800574a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005736:	f7fd ffa7 	bl	8003688 <HAL_GetTick>
 800573a:	0002      	movs	r2, r0
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	4a47      	ldr	r2, [pc, #284]	@ (8005860 <HAL_RCC_OscConfig+0x69c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e105      	b.n	8005956 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800574a:	4b40      	ldr	r3, [pc, #256]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 800574c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800574e:	2380      	movs	r3, #128	@ 0x80
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4013      	ands	r3, r2
 8005754:	d1ef      	bne.n	8005736 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005756:	2323      	movs	r3, #35	@ 0x23
 8005758:	18fb      	adds	r3, r7, r3
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d105      	bne.n	800576c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005760:	4b3a      	ldr	r3, [pc, #232]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 8005762:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005764:	4b39      	ldr	r3, [pc, #228]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 8005766:	493f      	ldr	r1, [pc, #252]	@ (8005864 <HAL_RCC_OscConfig+0x6a0>)
 8005768:	400a      	ands	r2, r1
 800576a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2220      	movs	r2, #32
 8005772:	4013      	ands	r3, r2
 8005774:	d049      	beq.n	800580a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d026      	beq.n	80057cc <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800577e:	4b33      	ldr	r3, [pc, #204]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 8005780:	689a      	ldr	r2, [r3, #8]
 8005782:	4b32      	ldr	r3, [pc, #200]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 8005784:	2101      	movs	r1, #1
 8005786:	430a      	orrs	r2, r1
 8005788:	609a      	str	r2, [r3, #8]
 800578a:	4b30      	ldr	r3, [pc, #192]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 800578c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800578e:	4b2f      	ldr	r3, [pc, #188]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 8005790:	2101      	movs	r1, #1
 8005792:	430a      	orrs	r2, r1
 8005794:	635a      	str	r2, [r3, #52]	@ 0x34
 8005796:	4b34      	ldr	r3, [pc, #208]	@ (8005868 <HAL_RCC_OscConfig+0x6a4>)
 8005798:	6a1a      	ldr	r2, [r3, #32]
 800579a:	4b33      	ldr	r3, [pc, #204]	@ (8005868 <HAL_RCC_OscConfig+0x6a4>)
 800579c:	2180      	movs	r1, #128	@ 0x80
 800579e:	0189      	lsls	r1, r1, #6
 80057a0:	430a      	orrs	r2, r1
 80057a2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a4:	f7fd ff70 	bl	8003688 <HAL_GetTick>
 80057a8:	0003      	movs	r3, r0
 80057aa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057ac:	e008      	b.n	80057c0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057ae:	f7fd ff6b 	bl	8003688 <HAL_GetTick>
 80057b2:	0002      	movs	r2, r0
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e0ca      	b.n	8005956 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057c0:	4b22      	ldr	r3, [pc, #136]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	2202      	movs	r2, #2
 80057c6:	4013      	ands	r3, r2
 80057c8:	d0f1      	beq.n	80057ae <HAL_RCC_OscConfig+0x5ea>
 80057ca:	e01e      	b.n	800580a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80057cc:	4b1f      	ldr	r3, [pc, #124]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	4b1e      	ldr	r3, [pc, #120]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 80057d2:	2101      	movs	r1, #1
 80057d4:	438a      	bics	r2, r1
 80057d6:	609a      	str	r2, [r3, #8]
 80057d8:	4b23      	ldr	r3, [pc, #140]	@ (8005868 <HAL_RCC_OscConfig+0x6a4>)
 80057da:	6a1a      	ldr	r2, [r3, #32]
 80057dc:	4b22      	ldr	r3, [pc, #136]	@ (8005868 <HAL_RCC_OscConfig+0x6a4>)
 80057de:	4923      	ldr	r1, [pc, #140]	@ (800586c <HAL_RCC_OscConfig+0x6a8>)
 80057e0:	400a      	ands	r2, r1
 80057e2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e4:	f7fd ff50 	bl	8003688 <HAL_GetTick>
 80057e8:	0003      	movs	r3, r0
 80057ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057ec:	e008      	b.n	8005800 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057ee:	f7fd ff4b 	bl	8003688 <HAL_GetTick>
 80057f2:	0002      	movs	r2, r0
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d901      	bls.n	8005800 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e0aa      	b.n	8005956 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005800:	4b12      	ldr	r3, [pc, #72]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	2202      	movs	r2, #2
 8005806:	4013      	ands	r3, r2
 8005808:	d1f1      	bne.n	80057ee <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580e:	2b00      	cmp	r3, #0
 8005810:	d100      	bne.n	8005814 <HAL_RCC_OscConfig+0x650>
 8005812:	e09f      	b.n	8005954 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	2b0c      	cmp	r3, #12
 8005818:	d100      	bne.n	800581c <HAL_RCC_OscConfig+0x658>
 800581a:	e078      	b.n	800590e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005820:	2b02      	cmp	r3, #2
 8005822:	d159      	bne.n	80058d8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005824:	4b09      	ldr	r3, [pc, #36]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	4b08      	ldr	r3, [pc, #32]	@ (800584c <HAL_RCC_OscConfig+0x688>)
 800582a:	4911      	ldr	r1, [pc, #68]	@ (8005870 <HAL_RCC_OscConfig+0x6ac>)
 800582c:	400a      	ands	r2, r1
 800582e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005830:	f7fd ff2a 	bl	8003688 <HAL_GetTick>
 8005834:	0003      	movs	r3, r0
 8005836:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005838:	e01c      	b.n	8005874 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800583a:	f7fd ff25 	bl	8003688 <HAL_GetTick>
 800583e:	0002      	movs	r2, r0
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b02      	cmp	r3, #2
 8005846:	d915      	bls.n	8005874 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e084      	b.n	8005956 <HAL_RCC_OscConfig+0x792>
 800584c:	40021000 	.word	0x40021000
 8005850:	ffff1fff 	.word	0xffff1fff
 8005854:	fffffeff 	.word	0xfffffeff
 8005858:	40007000 	.word	0x40007000
 800585c:	fffffbff 	.word	0xfffffbff
 8005860:	00001388 	.word	0x00001388
 8005864:	efffffff 	.word	0xefffffff
 8005868:	40010000 	.word	0x40010000
 800586c:	ffffdfff 	.word	0xffffdfff
 8005870:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005874:	4b3a      	ldr	r3, [pc, #232]	@ (8005960 <HAL_RCC_OscConfig+0x79c>)
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	2380      	movs	r3, #128	@ 0x80
 800587a:	049b      	lsls	r3, r3, #18
 800587c:	4013      	ands	r3, r2
 800587e:	d1dc      	bne.n	800583a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005880:	4b37      	ldr	r3, [pc, #220]	@ (8005960 <HAL_RCC_OscConfig+0x79c>)
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	4a37      	ldr	r2, [pc, #220]	@ (8005964 <HAL_RCC_OscConfig+0x7a0>)
 8005886:	4013      	ands	r3, r2
 8005888:	0019      	movs	r1, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005898:	431a      	orrs	r2, r3
 800589a:	4b31      	ldr	r3, [pc, #196]	@ (8005960 <HAL_RCC_OscConfig+0x79c>)
 800589c:	430a      	orrs	r2, r1
 800589e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058a0:	4b2f      	ldr	r3, [pc, #188]	@ (8005960 <HAL_RCC_OscConfig+0x79c>)
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	4b2e      	ldr	r3, [pc, #184]	@ (8005960 <HAL_RCC_OscConfig+0x79c>)
 80058a6:	2180      	movs	r1, #128	@ 0x80
 80058a8:	0449      	lsls	r1, r1, #17
 80058aa:	430a      	orrs	r2, r1
 80058ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ae:	f7fd feeb 	bl	8003688 <HAL_GetTick>
 80058b2:	0003      	movs	r3, r0
 80058b4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80058b6:	e008      	b.n	80058ca <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058b8:	f7fd fee6 	bl	8003688 <HAL_GetTick>
 80058bc:	0002      	movs	r2, r0
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e045      	b.n	8005956 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80058ca:	4b25      	ldr	r3, [pc, #148]	@ (8005960 <HAL_RCC_OscConfig+0x79c>)
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	2380      	movs	r3, #128	@ 0x80
 80058d0:	049b      	lsls	r3, r3, #18
 80058d2:	4013      	ands	r3, r2
 80058d4:	d0f0      	beq.n	80058b8 <HAL_RCC_OscConfig+0x6f4>
 80058d6:	e03d      	b.n	8005954 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058d8:	4b21      	ldr	r3, [pc, #132]	@ (8005960 <HAL_RCC_OscConfig+0x79c>)
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	4b20      	ldr	r3, [pc, #128]	@ (8005960 <HAL_RCC_OscConfig+0x79c>)
 80058de:	4922      	ldr	r1, [pc, #136]	@ (8005968 <HAL_RCC_OscConfig+0x7a4>)
 80058e0:	400a      	ands	r2, r1
 80058e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e4:	f7fd fed0 	bl	8003688 <HAL_GetTick>
 80058e8:	0003      	movs	r3, r0
 80058ea:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80058ec:	e008      	b.n	8005900 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058ee:	f7fd fecb 	bl	8003688 <HAL_GetTick>
 80058f2:	0002      	movs	r2, r0
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d901      	bls.n	8005900 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e02a      	b.n	8005956 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005900:	4b17      	ldr	r3, [pc, #92]	@ (8005960 <HAL_RCC_OscConfig+0x79c>)
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	2380      	movs	r3, #128	@ 0x80
 8005906:	049b      	lsls	r3, r3, #18
 8005908:	4013      	ands	r3, r2
 800590a:	d1f0      	bne.n	80058ee <HAL_RCC_OscConfig+0x72a>
 800590c:	e022      	b.n	8005954 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005912:	2b01      	cmp	r3, #1
 8005914:	d101      	bne.n	800591a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e01d      	b.n	8005956 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800591a:	4b11      	ldr	r3, [pc, #68]	@ (8005960 <HAL_RCC_OscConfig+0x79c>)
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	2380      	movs	r3, #128	@ 0x80
 8005924:	025b      	lsls	r3, r3, #9
 8005926:	401a      	ands	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592c:	429a      	cmp	r2, r3
 800592e:	d10f      	bne.n	8005950 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	23f0      	movs	r3, #240	@ 0xf0
 8005934:	039b      	lsls	r3, r3, #14
 8005936:	401a      	ands	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800593c:	429a      	cmp	r2, r3
 800593e:	d107      	bne.n	8005950 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	23c0      	movs	r3, #192	@ 0xc0
 8005944:	041b      	lsls	r3, r3, #16
 8005946:	401a      	ands	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800594c:	429a      	cmp	r2, r3
 800594e:	d001      	beq.n	8005954 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e000      	b.n	8005956 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	0018      	movs	r0, r3
 8005958:	46bd      	mov	sp, r7
 800595a:	b00a      	add	sp, #40	@ 0x28
 800595c:	bdb0      	pop	{r4, r5, r7, pc}
 800595e:	46c0      	nop			@ (mov r8, r8)
 8005960:	40021000 	.word	0x40021000
 8005964:	ff02ffff 	.word	0xff02ffff
 8005968:	feffffff 	.word	0xfeffffff

0800596c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800596c:	b5b0      	push	{r4, r5, r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e128      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005980:	4b96      	ldr	r3, [pc, #600]	@ (8005bdc <HAL_RCC_ClockConfig+0x270>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2201      	movs	r2, #1
 8005986:	4013      	ands	r3, r2
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	d91e      	bls.n	80059cc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800598e:	4b93      	ldr	r3, [pc, #588]	@ (8005bdc <HAL_RCC_ClockConfig+0x270>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2201      	movs	r2, #1
 8005994:	4393      	bics	r3, r2
 8005996:	0019      	movs	r1, r3
 8005998:	4b90      	ldr	r3, [pc, #576]	@ (8005bdc <HAL_RCC_ClockConfig+0x270>)
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80059a0:	f7fd fe72 	bl	8003688 <HAL_GetTick>
 80059a4:	0003      	movs	r3, r0
 80059a6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a8:	e009      	b.n	80059be <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059aa:	f7fd fe6d 	bl	8003688 <HAL_GetTick>
 80059ae:	0002      	movs	r2, r0
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	4a8a      	ldr	r2, [pc, #552]	@ (8005be0 <HAL_RCC_ClockConfig+0x274>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e109      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059be:	4b87      	ldr	r3, [pc, #540]	@ (8005bdc <HAL_RCC_ClockConfig+0x270>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2201      	movs	r2, #1
 80059c4:	4013      	ands	r3, r2
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d1ee      	bne.n	80059aa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2202      	movs	r2, #2
 80059d2:	4013      	ands	r3, r2
 80059d4:	d009      	beq.n	80059ea <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059d6:	4b83      	ldr	r3, [pc, #524]	@ (8005be4 <HAL_RCC_ClockConfig+0x278>)
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	22f0      	movs	r2, #240	@ 0xf0
 80059dc:	4393      	bics	r3, r2
 80059de:	0019      	movs	r1, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	4b7f      	ldr	r3, [pc, #508]	@ (8005be4 <HAL_RCC_ClockConfig+0x278>)
 80059e6:	430a      	orrs	r2, r1
 80059e8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2201      	movs	r2, #1
 80059f0:	4013      	ands	r3, r2
 80059f2:	d100      	bne.n	80059f6 <HAL_RCC_ClockConfig+0x8a>
 80059f4:	e089      	b.n	8005b0a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d107      	bne.n	8005a0e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059fe:	4b79      	ldr	r3, [pc, #484]	@ (8005be4 <HAL_RCC_ClockConfig+0x278>)
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	2380      	movs	r3, #128	@ 0x80
 8005a04:	029b      	lsls	r3, r3, #10
 8005a06:	4013      	ands	r3, r2
 8005a08:	d120      	bne.n	8005a4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e0e1      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	2b03      	cmp	r3, #3
 8005a14:	d107      	bne.n	8005a26 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a16:	4b73      	ldr	r3, [pc, #460]	@ (8005be4 <HAL_RCC_ClockConfig+0x278>)
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	2380      	movs	r3, #128	@ 0x80
 8005a1c:	049b      	lsls	r3, r3, #18
 8005a1e:	4013      	ands	r3, r2
 8005a20:	d114      	bne.n	8005a4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e0d5      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d106      	bne.n	8005a3c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a2e:	4b6d      	ldr	r3, [pc, #436]	@ (8005be4 <HAL_RCC_ClockConfig+0x278>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2204      	movs	r2, #4
 8005a34:	4013      	ands	r3, r2
 8005a36:	d109      	bne.n	8005a4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e0ca      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005a3c:	4b69      	ldr	r3, [pc, #420]	@ (8005be4 <HAL_RCC_ClockConfig+0x278>)
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	2380      	movs	r3, #128	@ 0x80
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4013      	ands	r3, r2
 8005a46:	d101      	bne.n	8005a4c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e0c2      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a4c:	4b65      	ldr	r3, [pc, #404]	@ (8005be4 <HAL_RCC_ClockConfig+0x278>)
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	2203      	movs	r2, #3
 8005a52:	4393      	bics	r3, r2
 8005a54:	0019      	movs	r1, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	4b62      	ldr	r3, [pc, #392]	@ (8005be4 <HAL_RCC_ClockConfig+0x278>)
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a60:	f7fd fe12 	bl	8003688 <HAL_GetTick>
 8005a64:	0003      	movs	r3, r0
 8005a66:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d111      	bne.n	8005a94 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a70:	e009      	b.n	8005a86 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a72:	f7fd fe09 	bl	8003688 <HAL_GetTick>
 8005a76:	0002      	movs	r2, r0
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	4a58      	ldr	r2, [pc, #352]	@ (8005be0 <HAL_RCC_ClockConfig+0x274>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e0a5      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a86:	4b57      	ldr	r3, [pc, #348]	@ (8005be4 <HAL_RCC_ClockConfig+0x278>)
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	220c      	movs	r2, #12
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	2b08      	cmp	r3, #8
 8005a90:	d1ef      	bne.n	8005a72 <HAL_RCC_ClockConfig+0x106>
 8005a92:	e03a      	b.n	8005b0a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	2b03      	cmp	r3, #3
 8005a9a:	d111      	bne.n	8005ac0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a9c:	e009      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a9e:	f7fd fdf3 	bl	8003688 <HAL_GetTick>
 8005aa2:	0002      	movs	r2, r0
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	4a4d      	ldr	r2, [pc, #308]	@ (8005be0 <HAL_RCC_ClockConfig+0x274>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e08f      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ab2:	4b4c      	ldr	r3, [pc, #304]	@ (8005be4 <HAL_RCC_ClockConfig+0x278>)
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	220c      	movs	r2, #12
 8005ab8:	4013      	ands	r3, r2
 8005aba:	2b0c      	cmp	r3, #12
 8005abc:	d1ef      	bne.n	8005a9e <HAL_RCC_ClockConfig+0x132>
 8005abe:	e024      	b.n	8005b0a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d11b      	bne.n	8005b00 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ac8:	e009      	b.n	8005ade <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aca:	f7fd fddd 	bl	8003688 <HAL_GetTick>
 8005ace:	0002      	movs	r2, r0
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	4a42      	ldr	r2, [pc, #264]	@ (8005be0 <HAL_RCC_ClockConfig+0x274>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e079      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ade:	4b41      	ldr	r3, [pc, #260]	@ (8005be4 <HAL_RCC_ClockConfig+0x278>)
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	220c      	movs	r2, #12
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	d1ef      	bne.n	8005aca <HAL_RCC_ClockConfig+0x15e>
 8005aea:	e00e      	b.n	8005b0a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aec:	f7fd fdcc 	bl	8003688 <HAL_GetTick>
 8005af0:	0002      	movs	r2, r0
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	4a3a      	ldr	r2, [pc, #232]	@ (8005be0 <HAL_RCC_ClockConfig+0x274>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d901      	bls.n	8005b00 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	e068      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b00:	4b38      	ldr	r3, [pc, #224]	@ (8005be4 <HAL_RCC_ClockConfig+0x278>)
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	220c      	movs	r2, #12
 8005b06:	4013      	ands	r3, r2
 8005b08:	d1f0      	bne.n	8005aec <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b0a:	4b34      	ldr	r3, [pc, #208]	@ (8005bdc <HAL_RCC_ClockConfig+0x270>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	4013      	ands	r3, r2
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d21e      	bcs.n	8005b56 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b18:	4b30      	ldr	r3, [pc, #192]	@ (8005bdc <HAL_RCC_ClockConfig+0x270>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	4393      	bics	r3, r2
 8005b20:	0019      	movs	r1, r3
 8005b22:	4b2e      	ldr	r3, [pc, #184]	@ (8005bdc <HAL_RCC_ClockConfig+0x270>)
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b2a:	f7fd fdad 	bl	8003688 <HAL_GetTick>
 8005b2e:	0003      	movs	r3, r0
 8005b30:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b32:	e009      	b.n	8005b48 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b34:	f7fd fda8 	bl	8003688 <HAL_GetTick>
 8005b38:	0002      	movs	r2, r0
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	4a28      	ldr	r2, [pc, #160]	@ (8005be0 <HAL_RCC_ClockConfig+0x274>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d901      	bls.n	8005b48 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e044      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b48:	4b24      	ldr	r3, [pc, #144]	@ (8005bdc <HAL_RCC_ClockConfig+0x270>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	4013      	ands	r3, r2
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d1ee      	bne.n	8005b34 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2204      	movs	r2, #4
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	d009      	beq.n	8005b74 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b60:	4b20      	ldr	r3, [pc, #128]	@ (8005be4 <HAL_RCC_ClockConfig+0x278>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	4a20      	ldr	r2, [pc, #128]	@ (8005be8 <HAL_RCC_ClockConfig+0x27c>)
 8005b66:	4013      	ands	r3, r2
 8005b68:	0019      	movs	r1, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68da      	ldr	r2, [r3, #12]
 8005b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8005be4 <HAL_RCC_ClockConfig+0x278>)
 8005b70:	430a      	orrs	r2, r1
 8005b72:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2208      	movs	r2, #8
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	d00a      	beq.n	8005b94 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b7e:	4b19      	ldr	r3, [pc, #100]	@ (8005be4 <HAL_RCC_ClockConfig+0x278>)
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	4a1a      	ldr	r2, [pc, #104]	@ (8005bec <HAL_RCC_ClockConfig+0x280>)
 8005b84:	4013      	ands	r3, r2
 8005b86:	0019      	movs	r1, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	00da      	lsls	r2, r3, #3
 8005b8e:	4b15      	ldr	r3, [pc, #84]	@ (8005be4 <HAL_RCC_ClockConfig+0x278>)
 8005b90:	430a      	orrs	r2, r1
 8005b92:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b94:	f000 f832 	bl	8005bfc <HAL_RCC_GetSysClockFreq>
 8005b98:	0001      	movs	r1, r0
 8005b9a:	4b12      	ldr	r3, [pc, #72]	@ (8005be4 <HAL_RCC_ClockConfig+0x278>)
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	091b      	lsrs	r3, r3, #4
 8005ba0:	220f      	movs	r2, #15
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	4a12      	ldr	r2, [pc, #72]	@ (8005bf0 <HAL_RCC_ClockConfig+0x284>)
 8005ba6:	5cd3      	ldrb	r3, [r2, r3]
 8005ba8:	000a      	movs	r2, r1
 8005baa:	40da      	lsrs	r2, r3
 8005bac:	4b11      	ldr	r3, [pc, #68]	@ (8005bf4 <HAL_RCC_ClockConfig+0x288>)
 8005bae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005bb0:	4b11      	ldr	r3, [pc, #68]	@ (8005bf8 <HAL_RCC_ClockConfig+0x28c>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	250b      	movs	r5, #11
 8005bb6:	197c      	adds	r4, r7, r5
 8005bb8:	0018      	movs	r0, r3
 8005bba:	f7fd fd1f 	bl	80035fc <HAL_InitTick>
 8005bbe:	0003      	movs	r3, r0
 8005bc0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005bc2:	197b      	adds	r3, r7, r5
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005bca:	197b      	adds	r3, r7, r5
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	e000      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	0018      	movs	r0, r3
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	b004      	add	sp, #16
 8005bd8:	bdb0      	pop	{r4, r5, r7, pc}
 8005bda:	46c0      	nop			@ (mov r8, r8)
 8005bdc:	40022000 	.word	0x40022000
 8005be0:	00001388 	.word	0x00001388
 8005be4:	40021000 	.word	0x40021000
 8005be8:	fffff8ff 	.word	0xfffff8ff
 8005bec:	ffffc7ff 	.word	0xffffc7ff
 8005bf0:	0800a43c 	.word	0x0800a43c
 8005bf4:	20000000 	.word	0x20000000
 8005bf8:	20000008 	.word	0x20000008

08005bfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bfc:	b5b0      	push	{r4, r5, r7, lr}
 8005bfe:	b08e      	sub	sp, #56	@ 0x38
 8005c00:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005c02:	4b4c      	ldr	r3, [pc, #304]	@ (8005d34 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c0a:	230c      	movs	r3, #12
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	2b0c      	cmp	r3, #12
 8005c10:	d014      	beq.n	8005c3c <HAL_RCC_GetSysClockFreq+0x40>
 8005c12:	d900      	bls.n	8005c16 <HAL_RCC_GetSysClockFreq+0x1a>
 8005c14:	e07b      	b.n	8005d0e <HAL_RCC_GetSysClockFreq+0x112>
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	d002      	beq.n	8005c20 <HAL_RCC_GetSysClockFreq+0x24>
 8005c1a:	2b08      	cmp	r3, #8
 8005c1c:	d00b      	beq.n	8005c36 <HAL_RCC_GetSysClockFreq+0x3a>
 8005c1e:	e076      	b.n	8005d0e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005c20:	4b44      	ldr	r3, [pc, #272]	@ (8005d34 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2210      	movs	r2, #16
 8005c26:	4013      	ands	r3, r2
 8005c28:	d002      	beq.n	8005c30 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005c2a:	4b43      	ldr	r3, [pc, #268]	@ (8005d38 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005c2c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005c2e:	e07c      	b.n	8005d2a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005c30:	4b42      	ldr	r3, [pc, #264]	@ (8005d3c <HAL_RCC_GetSysClockFreq+0x140>)
 8005c32:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8005c34:	e079      	b.n	8005d2a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c36:	4b42      	ldr	r3, [pc, #264]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x144>)
 8005c38:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8005c3a:	e076      	b.n	8005d2a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c3e:	0c9a      	lsrs	r2, r3, #18
 8005c40:	230f      	movs	r3, #15
 8005c42:	401a      	ands	r2, r3
 8005c44:	4b3f      	ldr	r3, [pc, #252]	@ (8005d44 <HAL_RCC_GetSysClockFreq+0x148>)
 8005c46:	5c9b      	ldrb	r3, [r3, r2]
 8005c48:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c4c:	0d9a      	lsrs	r2, r3, #22
 8005c4e:	2303      	movs	r3, #3
 8005c50:	4013      	ands	r3, r2
 8005c52:	3301      	adds	r3, #1
 8005c54:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c56:	4b37      	ldr	r3, [pc, #220]	@ (8005d34 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	2380      	movs	r3, #128	@ 0x80
 8005c5c:	025b      	lsls	r3, r3, #9
 8005c5e:	4013      	ands	r3, r2
 8005c60:	d01a      	beq.n	8005c98 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c64:	61bb      	str	r3, [r7, #24]
 8005c66:	2300      	movs	r3, #0
 8005c68:	61fb      	str	r3, [r7, #28]
 8005c6a:	4a35      	ldr	r2, [pc, #212]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x144>)
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	69b8      	ldr	r0, [r7, #24]
 8005c70:	69f9      	ldr	r1, [r7, #28]
 8005c72:	f7fa fc39 	bl	80004e8 <__aeabi_lmul>
 8005c76:	0002      	movs	r2, r0
 8005c78:	000b      	movs	r3, r1
 8005c7a:	0010      	movs	r0, r2
 8005c7c:	0019      	movs	r1, r3
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c80:	613b      	str	r3, [r7, #16]
 8005c82:	2300      	movs	r3, #0
 8005c84:	617b      	str	r3, [r7, #20]
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f7fa fc0d 	bl	80004a8 <__aeabi_uldivmod>
 8005c8e:	0002      	movs	r2, r0
 8005c90:	000b      	movs	r3, r1
 8005c92:	0013      	movs	r3, r2
 8005c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c96:	e037      	b.n	8005d08 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005c98:	4b26      	ldr	r3, [pc, #152]	@ (8005d34 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2210      	movs	r2, #16
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	d01a      	beq.n	8005cd8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca4:	60bb      	str	r3, [r7, #8]
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	4a23      	ldr	r2, [pc, #140]	@ (8005d38 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005cac:	2300      	movs	r3, #0
 8005cae:	68b8      	ldr	r0, [r7, #8]
 8005cb0:	68f9      	ldr	r1, [r7, #12]
 8005cb2:	f7fa fc19 	bl	80004e8 <__aeabi_lmul>
 8005cb6:	0002      	movs	r2, r0
 8005cb8:	000b      	movs	r3, r1
 8005cba:	0010      	movs	r0, r2
 8005cbc:	0019      	movs	r1, r3
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc0:	603b      	str	r3, [r7, #0]
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	607b      	str	r3, [r7, #4]
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f7fa fbed 	bl	80004a8 <__aeabi_uldivmod>
 8005cce:	0002      	movs	r2, r0
 8005cd0:	000b      	movs	r3, r1
 8005cd2:	0013      	movs	r3, r2
 8005cd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cd6:	e017      	b.n	8005d08 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cda:	0018      	movs	r0, r3
 8005cdc:	2300      	movs	r3, #0
 8005cde:	0019      	movs	r1, r3
 8005ce0:	4a16      	ldr	r2, [pc, #88]	@ (8005d3c <HAL_RCC_GetSysClockFreq+0x140>)
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	f7fa fc00 	bl	80004e8 <__aeabi_lmul>
 8005ce8:	0002      	movs	r2, r0
 8005cea:	000b      	movs	r3, r1
 8005cec:	0010      	movs	r0, r2
 8005cee:	0019      	movs	r1, r3
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf2:	001c      	movs	r4, r3
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	001d      	movs	r5, r3
 8005cf8:	0022      	movs	r2, r4
 8005cfa:	002b      	movs	r3, r5
 8005cfc:	f7fa fbd4 	bl	80004a8 <__aeabi_uldivmod>
 8005d00:	0002      	movs	r2, r0
 8005d02:	000b      	movs	r3, r1
 8005d04:	0013      	movs	r3, r2
 8005d06:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8005d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d0a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8005d0c:	e00d      	b.n	8005d2a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005d0e:	4b09      	ldr	r3, [pc, #36]	@ (8005d34 <HAL_RCC_GetSysClockFreq+0x138>)
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	0b5b      	lsrs	r3, r3, #13
 8005d14:	2207      	movs	r2, #7
 8005d16:	4013      	ands	r3, r2
 8005d18:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	2280      	movs	r2, #128	@ 0x80
 8005d20:	0212      	lsls	r2, r2, #8
 8005d22:	409a      	lsls	r2, r3
 8005d24:	0013      	movs	r3, r2
 8005d26:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8005d28:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	b00e      	add	sp, #56	@ 0x38
 8005d32:	bdb0      	pop	{r4, r5, r7, pc}
 8005d34:	40021000 	.word	0x40021000
 8005d38:	003d0900 	.word	0x003d0900
 8005d3c:	00f42400 	.word	0x00f42400
 8005d40:	007a1200 	.word	0x007a1200
 8005d44:	0800a454 	.word	0x0800a454

08005d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d4c:	4b02      	ldr	r3, [pc, #8]	@ (8005d58 <HAL_RCC_GetHCLKFreq+0x10>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
}
 8005d50:	0018      	movs	r0, r3
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	46c0      	nop			@ (mov r8, r8)
 8005d58:	20000000 	.word	0x20000000

08005d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d60:	f7ff fff2 	bl	8005d48 <HAL_RCC_GetHCLKFreq>
 8005d64:	0001      	movs	r1, r0
 8005d66:	4b06      	ldr	r3, [pc, #24]	@ (8005d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	0a1b      	lsrs	r3, r3, #8
 8005d6c:	2207      	movs	r2, #7
 8005d6e:	4013      	ands	r3, r2
 8005d70:	4a04      	ldr	r2, [pc, #16]	@ (8005d84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d72:	5cd3      	ldrb	r3, [r2, r3]
 8005d74:	40d9      	lsrs	r1, r3
 8005d76:	000b      	movs	r3, r1
}
 8005d78:	0018      	movs	r0, r3
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	46c0      	nop			@ (mov r8, r8)
 8005d80:	40021000 	.word	0x40021000
 8005d84:	0800a44c 	.word	0x0800a44c

08005d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d8c:	f7ff ffdc 	bl	8005d48 <HAL_RCC_GetHCLKFreq>
 8005d90:	0001      	movs	r1, r0
 8005d92:	4b06      	ldr	r3, [pc, #24]	@ (8005dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	0adb      	lsrs	r3, r3, #11
 8005d98:	2207      	movs	r2, #7
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	4a04      	ldr	r2, [pc, #16]	@ (8005db0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d9e:	5cd3      	ldrb	r3, [r2, r3]
 8005da0:	40d9      	lsrs	r1, r3
 8005da2:	000b      	movs	r3, r1
}
 8005da4:	0018      	movs	r0, r3
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	46c0      	nop			@ (mov r8, r8)
 8005dac:	40021000 	.word	0x40021000
 8005db0:	0800a44c 	.word	0x0800a44c

08005db4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005dbc:	2017      	movs	r0, #23
 8005dbe:	183b      	adds	r3, r7, r0
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	4013      	ands	r3, r2
 8005dcc:	d100      	bne.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8005dce:	e0c7      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dd0:	4b9b      	ldr	r3, [pc, #620]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005dd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dd4:	2380      	movs	r3, #128	@ 0x80
 8005dd6:	055b      	lsls	r3, r3, #21
 8005dd8:	4013      	ands	r3, r2
 8005dda:	d109      	bne.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ddc:	4b98      	ldr	r3, [pc, #608]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005dde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005de0:	4b97      	ldr	r3, [pc, #604]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005de2:	2180      	movs	r1, #128	@ 0x80
 8005de4:	0549      	lsls	r1, r1, #21
 8005de6:	430a      	orrs	r2, r1
 8005de8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8005dea:	183b      	adds	r3, r7, r0
 8005dec:	2201      	movs	r2, #1
 8005dee:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005df0:	4b94      	ldr	r3, [pc, #592]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	2380      	movs	r3, #128	@ 0x80
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	4013      	ands	r3, r2
 8005dfa:	d11a      	bne.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dfc:	4b91      	ldr	r3, [pc, #580]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	4b90      	ldr	r3, [pc, #576]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005e02:	2180      	movs	r1, #128	@ 0x80
 8005e04:	0049      	lsls	r1, r1, #1
 8005e06:	430a      	orrs	r2, r1
 8005e08:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e0a:	f7fd fc3d 	bl	8003688 <HAL_GetTick>
 8005e0e:	0003      	movs	r3, r0
 8005e10:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e12:	e008      	b.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e14:	f7fd fc38 	bl	8003688 <HAL_GetTick>
 8005e18:	0002      	movs	r2, r0
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b64      	cmp	r3, #100	@ 0x64
 8005e20:	d901      	bls.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e107      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e26:	4b87      	ldr	r3, [pc, #540]	@ (8006044 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	2380      	movs	r3, #128	@ 0x80
 8005e2c:	005b      	lsls	r3, r3, #1
 8005e2e:	4013      	ands	r3, r2
 8005e30:	d0f0      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005e32:	4b83      	ldr	r3, [pc, #524]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	23c0      	movs	r3, #192	@ 0xc0
 8005e38:	039b      	lsls	r3, r3, #14
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	23c0      	movs	r3, #192	@ 0xc0
 8005e44:	039b      	lsls	r3, r3, #14
 8005e46:	4013      	ands	r3, r2
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d013      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	23c0      	movs	r3, #192	@ 0xc0
 8005e54:	029b      	lsls	r3, r3, #10
 8005e56:	401a      	ands	r2, r3
 8005e58:	23c0      	movs	r3, #192	@ 0xc0
 8005e5a:	029b      	lsls	r3, r3, #10
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d10a      	bne.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e60:	4b77      	ldr	r3, [pc, #476]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	2380      	movs	r3, #128	@ 0x80
 8005e66:	029b      	lsls	r3, r3, #10
 8005e68:	401a      	ands	r2, r3
 8005e6a:	2380      	movs	r3, #128	@ 0x80
 8005e6c:	029b      	lsls	r3, r3, #10
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d101      	bne.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e0df      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005e76:	4b72      	ldr	r3, [pc, #456]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005e78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e7a:	23c0      	movs	r3, #192	@ 0xc0
 8005e7c:	029b      	lsls	r3, r3, #10
 8005e7e:	4013      	ands	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d03b      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	23c0      	movs	r3, #192	@ 0xc0
 8005e8e:	029b      	lsls	r3, r3, #10
 8005e90:	4013      	ands	r3, r2
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d033      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	d02e      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005ea2:	4b67      	ldr	r3, [pc, #412]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005ea4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ea6:	4a68      	ldr	r2, [pc, #416]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005eac:	4b64      	ldr	r3, [pc, #400]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005eae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005eb0:	4b63      	ldr	r3, [pc, #396]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005eb2:	2180      	movs	r1, #128	@ 0x80
 8005eb4:	0309      	lsls	r1, r1, #12
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005eba:	4b61      	ldr	r3, [pc, #388]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005ebc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ebe:	4b60      	ldr	r3, [pc, #384]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005ec0:	4962      	ldr	r1, [pc, #392]	@ (800604c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8005ec2:	400a      	ands	r2, r1
 8005ec4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005ec6:	4b5e      	ldr	r3, [pc, #376]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	2380      	movs	r3, #128	@ 0x80
 8005ed0:	005b      	lsls	r3, r3, #1
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	d014      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed6:	f7fd fbd7 	bl	8003688 <HAL_GetTick>
 8005eda:	0003      	movs	r3, r0
 8005edc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ede:	e009      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ee0:	f7fd fbd2 	bl	8003688 <HAL_GetTick>
 8005ee4:	0002      	movs	r2, r0
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	4a59      	ldr	r2, [pc, #356]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e0a0      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ef4:	4b52      	ldr	r3, [pc, #328]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005ef6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ef8:	2380      	movs	r3, #128	@ 0x80
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4013      	ands	r3, r2
 8005efe:	d0ef      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2220      	movs	r2, #32
 8005f06:	4013      	ands	r3, r2
 8005f08:	d01f      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	23c0      	movs	r3, #192	@ 0xc0
 8005f10:	029b      	lsls	r3, r3, #10
 8005f12:	401a      	ands	r2, r3
 8005f14:	23c0      	movs	r3, #192	@ 0xc0
 8005f16:	029b      	lsls	r3, r3, #10
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d10c      	bne.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8005f1c:	4b48      	ldr	r3, [pc, #288]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a4c      	ldr	r2, [pc, #304]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005f22:	4013      	ands	r3, r2
 8005f24:	0019      	movs	r1, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685a      	ldr	r2, [r3, #4]
 8005f2a:	23c0      	movs	r3, #192	@ 0xc0
 8005f2c:	039b      	lsls	r3, r3, #14
 8005f2e:	401a      	ands	r2, r3
 8005f30:	4b43      	ldr	r3, [pc, #268]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005f32:	430a      	orrs	r2, r1
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	4b42      	ldr	r3, [pc, #264]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005f38:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	23c0      	movs	r3, #192	@ 0xc0
 8005f40:	029b      	lsls	r3, r3, #10
 8005f42:	401a      	ands	r2, r3
 8005f44:	4b3e      	ldr	r3, [pc, #248]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005f46:	430a      	orrs	r2, r1
 8005f48:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f4a:	2317      	movs	r3, #23
 8005f4c:	18fb      	adds	r3, r7, r3
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d105      	bne.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f54:	4b3a      	ldr	r3, [pc, #232]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005f56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f58:	4b39      	ldr	r3, [pc, #228]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005f5a:	493f      	ldr	r1, [pc, #252]	@ (8006058 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005f5c:	400a      	ands	r2, r1
 8005f5e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2201      	movs	r2, #1
 8005f66:	4013      	ands	r3, r2
 8005f68:	d009      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f6a:	4b35      	ldr	r3, [pc, #212]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f6e:	2203      	movs	r2, #3
 8005f70:	4393      	bics	r3, r2
 8005f72:	0019      	movs	r1, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	4b31      	ldr	r3, [pc, #196]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2202      	movs	r2, #2
 8005f84:	4013      	ands	r3, r2
 8005f86:	d009      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f88:	4b2d      	ldr	r3, [pc, #180]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f8c:	220c      	movs	r2, #12
 8005f8e:	4393      	bics	r3, r2
 8005f90:	0019      	movs	r1, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	4b2a      	ldr	r3, [pc, #168]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2204      	movs	r2, #4
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	d009      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fa6:	4b26      	ldr	r3, [pc, #152]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005faa:	4a2c      	ldr	r2, [pc, #176]	@ (800605c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005fac:	4013      	ands	r3, r2
 8005fae:	0019      	movs	r1, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	691a      	ldr	r2, [r3, #16]
 8005fb4:	4b22      	ldr	r3, [pc, #136]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2208      	movs	r2, #8
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	d009      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fc4:	4b1e      	ldr	r3, [pc, #120]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fc8:	4a25      	ldr	r2, [pc, #148]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005fca:	4013      	ands	r3, r2
 8005fcc:	0019      	movs	r1, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	695a      	ldr	r2, [r3, #20]
 8005fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	2380      	movs	r3, #128	@ 0x80
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	d009      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005fe4:	4b16      	ldr	r3, [pc, #88]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fe8:	4a17      	ldr	r2, [pc, #92]	@ (8006048 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8005fea:	4013      	ands	r3, r2
 8005fec:	0019      	movs	r1, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	699a      	ldr	r2, [r3, #24]
 8005ff2:	4b13      	ldr	r3, [pc, #76]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2240      	movs	r2, #64	@ 0x40
 8005ffe:	4013      	ands	r3, r2
 8006000:	d009      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006002:	4b0f      	ldr	r3, [pc, #60]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006006:	4a17      	ldr	r2, [pc, #92]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8006008:	4013      	ands	r3, r2
 800600a:	0019      	movs	r1, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6a1a      	ldr	r2, [r3, #32]
 8006010:	4b0b      	ldr	r3, [pc, #44]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006012:	430a      	orrs	r2, r1
 8006014:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2280      	movs	r2, #128	@ 0x80
 800601c:	4013      	ands	r3, r2
 800601e:	d009      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006020:	4b07      	ldr	r3, [pc, #28]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006024:	4a10      	ldr	r2, [pc, #64]	@ (8006068 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8006026:	4013      	ands	r3, r2
 8006028:	0019      	movs	r1, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	69da      	ldr	r2, [r3, #28]
 800602e:	4b04      	ldr	r3, [pc, #16]	@ (8006040 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8006030:	430a      	orrs	r2, r1
 8006032:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	0018      	movs	r0, r3
 8006038:	46bd      	mov	sp, r7
 800603a:	b006      	add	sp, #24
 800603c:	bd80      	pop	{r7, pc}
 800603e:	46c0      	nop			@ (mov r8, r8)
 8006040:	40021000 	.word	0x40021000
 8006044:	40007000 	.word	0x40007000
 8006048:	fffcffff 	.word	0xfffcffff
 800604c:	fff7ffff 	.word	0xfff7ffff
 8006050:	00001388 	.word	0x00001388
 8006054:	ffcfffff 	.word	0xffcfffff
 8006058:	efffffff 	.word	0xefffffff
 800605c:	fffff3ff 	.word	0xfffff3ff
 8006060:	ffffcfff 	.word	0xffffcfff
 8006064:	fbffffff 	.word	0xfbffffff
 8006068:	fff3ffff 	.word	0xfff3ffff

0800606c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e053      	b.n	8006126 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006082:	2b00      	cmp	r3, #0
 8006084:	d116      	bne.n	80060b4 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2278      	movs	r2, #120	@ 0x78
 800608a:	2100      	movs	r1, #0
 800608c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	0018      	movs	r0, r3
 8006092:	f000 fc19 	bl	80068c8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	22b0      	movs	r2, #176	@ 0xb0
 800609a:	589b      	ldr	r3, [r3, r2]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d103      	bne.n	80060a8 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	21b0      	movs	r1, #176	@ 0xb0
 80060a4:	4a22      	ldr	r2, [pc, #136]	@ (8006130 <HAL_UART_Init+0xc4>)
 80060a6:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	22b0      	movs	r2, #176	@ 0xb0
 80060ac:	589b      	ldr	r3, [r3, r2]
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	0010      	movs	r0, r2
 80060b2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2224      	movs	r2, #36	@ 0x24
 80060b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2101      	movs	r1, #1
 80060c6:	438a      	bics	r2, r1
 80060c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	0018      	movs	r0, r3
 80060ce:	f000 fc3f 	bl	8006950 <UART_SetConfig>
 80060d2:	0003      	movs	r3, r0
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d101      	bne.n	80060dc <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e024      	b.n	8006126 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d003      	beq.n	80060ec <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	0018      	movs	r0, r3
 80060e8:	f000 fed0 	bl	8006e8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	490f      	ldr	r1, [pc, #60]	@ (8006134 <HAL_UART_Init+0xc8>)
 80060f8:	400a      	ands	r2, r1
 80060fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689a      	ldr	r2, [r3, #8]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	212a      	movs	r1, #42	@ 0x2a
 8006108:	438a      	bics	r2, r1
 800610a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2101      	movs	r1, #1
 8006118:	430a      	orrs	r2, r1
 800611a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	0018      	movs	r0, r3
 8006120:	f000 ff68 	bl	8006ff4 <UART_CheckIdleState>
 8006124:	0003      	movs	r3, r0
}
 8006126:	0018      	movs	r0, r3
 8006128:	46bd      	mov	sp, r7
 800612a:	b002      	add	sp, #8
 800612c:	bd80      	pop	{r7, pc}
 800612e:	46c0      	nop			@ (mov r8, r8)
 8006130:	08003065 	.word	0x08003065
 8006134:	ffffb7ff 	.word	0xffffb7ff

08006138 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b08a      	sub	sp, #40	@ 0x28
 800613c:	af02      	add	r7, sp, #8
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	603b      	str	r3, [r7, #0]
 8006144:	1dbb      	adds	r3, r7, #6
 8006146:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800614c:	2b20      	cmp	r3, #32
 800614e:	d000      	beq.n	8006152 <HAL_UART_Transmit+0x1a>
 8006150:	e08c      	b.n	800626c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d003      	beq.n	8006160 <HAL_UART_Transmit+0x28>
 8006158:	1dbb      	adds	r3, r7, #6
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e084      	b.n	800626e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	2380      	movs	r3, #128	@ 0x80
 800616a:	015b      	lsls	r3, r3, #5
 800616c:	429a      	cmp	r2, r3
 800616e:	d109      	bne.n	8006184 <HAL_UART_Transmit+0x4c>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d105      	bne.n	8006184 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	2201      	movs	r2, #1
 800617c:	4013      	ands	r3, r2
 800617e:	d001      	beq.n	8006184 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e074      	b.n	800626e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2284      	movs	r2, #132	@ 0x84
 8006188:	2100      	movs	r1, #0
 800618a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2221      	movs	r2, #33	@ 0x21
 8006190:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006192:	f7fd fa79 	bl	8003688 <HAL_GetTick>
 8006196:	0003      	movs	r3, r0
 8006198:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	1dba      	adds	r2, r7, #6
 800619e:	2150      	movs	r1, #80	@ 0x50
 80061a0:	8812      	ldrh	r2, [r2, #0]
 80061a2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	1dba      	adds	r2, r7, #6
 80061a8:	2152      	movs	r1, #82	@ 0x52
 80061aa:	8812      	ldrh	r2, [r2, #0]
 80061ac:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	689a      	ldr	r2, [r3, #8]
 80061b2:	2380      	movs	r3, #128	@ 0x80
 80061b4:	015b      	lsls	r3, r3, #5
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d108      	bne.n	80061cc <HAL_UART_Transmit+0x94>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d104      	bne.n	80061cc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80061c2:	2300      	movs	r3, #0
 80061c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	61bb      	str	r3, [r7, #24]
 80061ca:	e003      	b.n	80061d4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061d0:	2300      	movs	r3, #0
 80061d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061d4:	e02f      	b.n	8006236 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	0013      	movs	r3, r2
 80061e0:	2200      	movs	r2, #0
 80061e2:	2180      	movs	r1, #128	@ 0x80
 80061e4:	f000 ffae 	bl	8007144 <UART_WaitOnFlagUntilTimeout>
 80061e8:	1e03      	subs	r3, r0, #0
 80061ea:	d004      	beq.n	80061f6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2220      	movs	r2, #32
 80061f0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e03b      	b.n	800626e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10b      	bne.n	8006214 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	881b      	ldrh	r3, [r3, #0]
 8006200:	001a      	movs	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	05d2      	lsls	r2, r2, #23
 8006208:	0dd2      	lsrs	r2, r2, #23
 800620a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	3302      	adds	r3, #2
 8006210:	61bb      	str	r3, [r7, #24]
 8006212:	e007      	b.n	8006224 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	781a      	ldrb	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	3301      	adds	r3, #1
 8006222:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2252      	movs	r2, #82	@ 0x52
 8006228:	5a9b      	ldrh	r3, [r3, r2]
 800622a:	b29b      	uxth	r3, r3
 800622c:	3b01      	subs	r3, #1
 800622e:	b299      	uxth	r1, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2252      	movs	r2, #82	@ 0x52
 8006234:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2252      	movs	r2, #82	@ 0x52
 800623a:	5a9b      	ldrh	r3, [r3, r2]
 800623c:	b29b      	uxth	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1c9      	bne.n	80061d6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	0013      	movs	r3, r2
 800624c:	2200      	movs	r2, #0
 800624e:	2140      	movs	r1, #64	@ 0x40
 8006250:	f000 ff78 	bl	8007144 <UART_WaitOnFlagUntilTimeout>
 8006254:	1e03      	subs	r3, r0, #0
 8006256:	d004      	beq.n	8006262 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2220      	movs	r2, #32
 800625c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e005      	b.n	800626e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2220      	movs	r2, #32
 8006266:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006268:	2300      	movs	r3, #0
 800626a:	e000      	b.n	800626e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800626c:	2302      	movs	r3, #2
  }
}
 800626e:	0018      	movs	r0, r3
 8006270:	46bd      	mov	sp, r7
 8006272:	b008      	add	sp, #32
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006278:	b590      	push	{r4, r7, lr}
 800627a:	b0ab      	sub	sp, #172	@ 0xac
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	22a4      	movs	r2, #164	@ 0xa4
 8006288:	18b9      	adds	r1, r7, r2
 800628a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	20a0      	movs	r0, #160	@ 0xa0
 8006294:	1839      	adds	r1, r7, r0
 8006296:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	219c      	movs	r1, #156	@ 0x9c
 80062a0:	1879      	adds	r1, r7, r1
 80062a2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80062a4:	0011      	movs	r1, r2
 80062a6:	18bb      	adds	r3, r7, r2
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a9c      	ldr	r2, [pc, #624]	@ (800651c <HAL_UART_IRQHandler+0x2a4>)
 80062ac:	4013      	ands	r3, r2
 80062ae:	2298      	movs	r2, #152	@ 0x98
 80062b0:	18bc      	adds	r4, r7, r2
 80062b2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80062b4:	18bb      	adds	r3, r7, r2
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d114      	bne.n	80062e6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80062bc:	187b      	adds	r3, r7, r1
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2220      	movs	r2, #32
 80062c2:	4013      	ands	r3, r2
 80062c4:	d00f      	beq.n	80062e6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062c6:	183b      	adds	r3, r7, r0
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2220      	movs	r2, #32
 80062cc:	4013      	ands	r3, r2
 80062ce:	d00a      	beq.n	80062e6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d100      	bne.n	80062da <HAL_UART_IRQHandler+0x62>
 80062d8:	e2aa      	b.n	8006830 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	0010      	movs	r0, r2
 80062e2:	4798      	blx	r3
      }
      return;
 80062e4:	e2a4      	b.n	8006830 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80062e6:	2398      	movs	r3, #152	@ 0x98
 80062e8:	18fb      	adds	r3, r7, r3
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d100      	bne.n	80062f2 <HAL_UART_IRQHandler+0x7a>
 80062f0:	e11a      	b.n	8006528 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80062f2:	239c      	movs	r3, #156	@ 0x9c
 80062f4:	18fb      	adds	r3, r7, r3
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2201      	movs	r2, #1
 80062fa:	4013      	ands	r3, r2
 80062fc:	d106      	bne.n	800630c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80062fe:	23a0      	movs	r3, #160	@ 0xa0
 8006300:	18fb      	adds	r3, r7, r3
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a86      	ldr	r2, [pc, #536]	@ (8006520 <HAL_UART_IRQHandler+0x2a8>)
 8006306:	4013      	ands	r3, r2
 8006308:	d100      	bne.n	800630c <HAL_UART_IRQHandler+0x94>
 800630a:	e10d      	b.n	8006528 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800630c:	23a4      	movs	r3, #164	@ 0xa4
 800630e:	18fb      	adds	r3, r7, r3
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2201      	movs	r2, #1
 8006314:	4013      	ands	r3, r2
 8006316:	d012      	beq.n	800633e <HAL_UART_IRQHandler+0xc6>
 8006318:	23a0      	movs	r3, #160	@ 0xa0
 800631a:	18fb      	adds	r3, r7, r3
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	2380      	movs	r3, #128	@ 0x80
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	4013      	ands	r3, r2
 8006324:	d00b      	beq.n	800633e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2201      	movs	r2, #1
 800632c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2284      	movs	r2, #132	@ 0x84
 8006332:	589b      	ldr	r3, [r3, r2]
 8006334:	2201      	movs	r2, #1
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2184      	movs	r1, #132	@ 0x84
 800633c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800633e:	23a4      	movs	r3, #164	@ 0xa4
 8006340:	18fb      	adds	r3, r7, r3
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2202      	movs	r2, #2
 8006346:	4013      	ands	r3, r2
 8006348:	d011      	beq.n	800636e <HAL_UART_IRQHandler+0xf6>
 800634a:	239c      	movs	r3, #156	@ 0x9c
 800634c:	18fb      	adds	r3, r7, r3
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2201      	movs	r2, #1
 8006352:	4013      	ands	r3, r2
 8006354:	d00b      	beq.n	800636e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2202      	movs	r2, #2
 800635c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2284      	movs	r2, #132	@ 0x84
 8006362:	589b      	ldr	r3, [r3, r2]
 8006364:	2204      	movs	r2, #4
 8006366:	431a      	orrs	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2184      	movs	r1, #132	@ 0x84
 800636c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800636e:	23a4      	movs	r3, #164	@ 0xa4
 8006370:	18fb      	adds	r3, r7, r3
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2204      	movs	r2, #4
 8006376:	4013      	ands	r3, r2
 8006378:	d011      	beq.n	800639e <HAL_UART_IRQHandler+0x126>
 800637a:	239c      	movs	r3, #156	@ 0x9c
 800637c:	18fb      	adds	r3, r7, r3
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2201      	movs	r2, #1
 8006382:	4013      	ands	r3, r2
 8006384:	d00b      	beq.n	800639e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2204      	movs	r2, #4
 800638c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2284      	movs	r2, #132	@ 0x84
 8006392:	589b      	ldr	r3, [r3, r2]
 8006394:	2202      	movs	r2, #2
 8006396:	431a      	orrs	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2184      	movs	r1, #132	@ 0x84
 800639c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800639e:	23a4      	movs	r3, #164	@ 0xa4
 80063a0:	18fb      	adds	r3, r7, r3
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2208      	movs	r2, #8
 80063a6:	4013      	ands	r3, r2
 80063a8:	d017      	beq.n	80063da <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063aa:	23a0      	movs	r3, #160	@ 0xa0
 80063ac:	18fb      	adds	r3, r7, r3
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2220      	movs	r2, #32
 80063b2:	4013      	ands	r3, r2
 80063b4:	d105      	bne.n	80063c2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80063b6:	239c      	movs	r3, #156	@ 0x9c
 80063b8:	18fb      	adds	r3, r7, r3
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2201      	movs	r2, #1
 80063be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80063c0:	d00b      	beq.n	80063da <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2208      	movs	r2, #8
 80063c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2284      	movs	r2, #132	@ 0x84
 80063ce:	589b      	ldr	r3, [r3, r2]
 80063d0:	2208      	movs	r2, #8
 80063d2:	431a      	orrs	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2184      	movs	r1, #132	@ 0x84
 80063d8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80063da:	23a4      	movs	r3, #164	@ 0xa4
 80063dc:	18fb      	adds	r3, r7, r3
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	2380      	movs	r3, #128	@ 0x80
 80063e2:	011b      	lsls	r3, r3, #4
 80063e4:	4013      	ands	r3, r2
 80063e6:	d013      	beq.n	8006410 <HAL_UART_IRQHandler+0x198>
 80063e8:	23a0      	movs	r3, #160	@ 0xa0
 80063ea:	18fb      	adds	r3, r7, r3
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	2380      	movs	r3, #128	@ 0x80
 80063f0:	04db      	lsls	r3, r3, #19
 80063f2:	4013      	ands	r3, r2
 80063f4:	d00c      	beq.n	8006410 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2280      	movs	r2, #128	@ 0x80
 80063fc:	0112      	lsls	r2, r2, #4
 80063fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2284      	movs	r2, #132	@ 0x84
 8006404:	589b      	ldr	r3, [r3, r2]
 8006406:	2220      	movs	r2, #32
 8006408:	431a      	orrs	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2184      	movs	r1, #132	@ 0x84
 800640e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2284      	movs	r2, #132	@ 0x84
 8006414:	589b      	ldr	r3, [r3, r2]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d100      	bne.n	800641c <HAL_UART_IRQHandler+0x1a4>
 800641a:	e20b      	b.n	8006834 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800641c:	23a4      	movs	r3, #164	@ 0xa4
 800641e:	18fb      	adds	r3, r7, r3
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2220      	movs	r2, #32
 8006424:	4013      	ands	r3, r2
 8006426:	d00e      	beq.n	8006446 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006428:	23a0      	movs	r3, #160	@ 0xa0
 800642a:	18fb      	adds	r3, r7, r3
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2220      	movs	r2, #32
 8006430:	4013      	ands	r3, r2
 8006432:	d008      	beq.n	8006446 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006438:	2b00      	cmp	r3, #0
 800643a:	d004      	beq.n	8006446 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	0010      	movs	r0, r2
 8006444:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2284      	movs	r2, #132	@ 0x84
 800644a:	589b      	ldr	r3, [r3, r2]
 800644c:	2194      	movs	r1, #148	@ 0x94
 800644e:	187a      	adds	r2, r7, r1
 8006450:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	2240      	movs	r2, #64	@ 0x40
 800645a:	4013      	ands	r3, r2
 800645c:	2b40      	cmp	r3, #64	@ 0x40
 800645e:	d004      	beq.n	800646a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006460:	187b      	adds	r3, r7, r1
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2228      	movs	r2, #40	@ 0x28
 8006466:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006468:	d04b      	beq.n	8006502 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	0018      	movs	r0, r3
 800646e:	f000 fed3 	bl	8007218 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	2240      	movs	r2, #64	@ 0x40
 800647a:	4013      	ands	r3, r2
 800647c:	2b40      	cmp	r3, #64	@ 0x40
 800647e:	d139      	bne.n	80064f4 <HAL_UART_IRQHandler+0x27c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006480:	f3ef 8310 	mrs	r3, PRIMASK
 8006484:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8006486:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006488:	2090      	movs	r0, #144	@ 0x90
 800648a:	183a      	adds	r2, r7, r0
 800648c:	6013      	str	r3, [r2, #0]
 800648e:	2301      	movs	r3, #1
 8006490:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006492:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006494:	f383 8810 	msr	PRIMASK, r3
}
 8006498:	46c0      	nop			@ (mov r8, r8)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2140      	movs	r1, #64	@ 0x40
 80064a6:	438a      	bics	r2, r1
 80064a8:	609a      	str	r2, [r3, #8]
 80064aa:	183b      	adds	r3, r7, r0
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80064b2:	f383 8810 	msr	PRIMASK, r3
}
 80064b6:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d012      	beq.n	80064e6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064c4:	4a17      	ldr	r2, [pc, #92]	@ (8006524 <HAL_UART_IRQHandler+0x2ac>)
 80064c6:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064cc:	0018      	movs	r0, r3
 80064ce:	f7fd fa7b 	bl	80039c8 <HAL_DMA_Abort_IT>
 80064d2:	1e03      	subs	r3, r0, #0
 80064d4:	d020      	beq.n	8006518 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064e0:	0018      	movs	r0, r3
 80064e2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064e4:	e018      	b.n	8006518 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2298      	movs	r2, #152	@ 0x98
 80064ea:	589b      	ldr	r3, [r3, r2]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	0010      	movs	r0, r2
 80064f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f2:	e011      	b.n	8006518 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2298      	movs	r2, #152	@ 0x98
 80064f8:	589b      	ldr	r3, [r3, r2]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	0010      	movs	r0, r2
 80064fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006500:	e00a      	b.n	8006518 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2298      	movs	r2, #152	@ 0x98
 8006506:	589b      	ldr	r3, [r3, r2]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	0010      	movs	r0, r2
 800650c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2284      	movs	r2, #132	@ 0x84
 8006512:	2100      	movs	r1, #0
 8006514:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006516:	e18d      	b.n	8006834 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006518:	46c0      	nop			@ (mov r8, r8)
    return;
 800651a:	e18b      	b.n	8006834 <HAL_UART_IRQHandler+0x5bc>
 800651c:	0000080f 	.word	0x0000080f
 8006520:	04000120 	.word	0x04000120
 8006524:	080072e1 	.word	0x080072e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800652c:	2b01      	cmp	r3, #1
 800652e:	d000      	beq.n	8006532 <HAL_UART_IRQHandler+0x2ba>
 8006530:	e13d      	b.n	80067ae <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006532:	23a4      	movs	r3, #164	@ 0xa4
 8006534:	18fb      	adds	r3, r7, r3
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2210      	movs	r2, #16
 800653a:	4013      	ands	r3, r2
 800653c:	d100      	bne.n	8006540 <HAL_UART_IRQHandler+0x2c8>
 800653e:	e136      	b.n	80067ae <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006540:	23a0      	movs	r3, #160	@ 0xa0
 8006542:	18fb      	adds	r3, r7, r3
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2210      	movs	r2, #16
 8006548:	4013      	ands	r3, r2
 800654a:	d100      	bne.n	800654e <HAL_UART_IRQHandler+0x2d6>
 800654c:	e12f      	b.n	80067ae <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2210      	movs	r2, #16
 8006554:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	2240      	movs	r2, #64	@ 0x40
 800655e:	4013      	ands	r3, r2
 8006560:	2b40      	cmp	r3, #64	@ 0x40
 8006562:	d000      	beq.n	8006566 <HAL_UART_IRQHandler+0x2ee>
 8006564:	e0a2      	b.n	80066ac <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	217e      	movs	r1, #126	@ 0x7e
 8006570:	187b      	adds	r3, r7, r1
 8006572:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006574:	187b      	adds	r3, r7, r1
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d100      	bne.n	800657e <HAL_UART_IRQHandler+0x306>
 800657c:	e15c      	b.n	8006838 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2258      	movs	r2, #88	@ 0x58
 8006582:	5a9b      	ldrh	r3, [r3, r2]
 8006584:	187a      	adds	r2, r7, r1
 8006586:	8812      	ldrh	r2, [r2, #0]
 8006588:	429a      	cmp	r2, r3
 800658a:	d300      	bcc.n	800658e <HAL_UART_IRQHandler+0x316>
 800658c:	e154      	b.n	8006838 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	187a      	adds	r2, r7, r1
 8006592:	215a      	movs	r1, #90	@ 0x5a
 8006594:	8812      	ldrh	r2, [r2, #0]
 8006596:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2220      	movs	r2, #32
 80065a2:	4013      	ands	r3, r2
 80065a4:	d16f      	bne.n	8006686 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065a6:	f3ef 8310 	mrs	r3, PRIMASK
 80065aa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80065ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80065b0:	2301      	movs	r3, #1
 80065b2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065b6:	f383 8810 	msr	PRIMASK, r3
}
 80065ba:	46c0      	nop			@ (mov r8, r8)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	49a0      	ldr	r1, [pc, #640]	@ (8006848 <HAL_UART_IRQHandler+0x5d0>)
 80065c8:	400a      	ands	r2, r1
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d2:	f383 8810 	msr	PRIMASK, r3
}
 80065d6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065d8:	f3ef 8310 	mrs	r3, PRIMASK
 80065dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80065de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e0:	677b      	str	r3, [r7, #116]	@ 0x74
 80065e2:	2301      	movs	r3, #1
 80065e4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065e8:	f383 8810 	msr	PRIMASK, r3
}
 80065ec:	46c0      	nop			@ (mov r8, r8)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2101      	movs	r1, #1
 80065fa:	438a      	bics	r2, r1
 80065fc:	609a      	str	r2, [r3, #8]
 80065fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006600:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006602:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006604:	f383 8810 	msr	PRIMASK, r3
}
 8006608:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800660a:	f3ef 8310 	mrs	r3, PRIMASK
 800660e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8006610:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006612:	673b      	str	r3, [r7, #112]	@ 0x70
 8006614:	2301      	movs	r3, #1
 8006616:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006618:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800661a:	f383 8810 	msr	PRIMASK, r3
}
 800661e:	46c0      	nop			@ (mov r8, r8)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689a      	ldr	r2, [r3, #8]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2140      	movs	r1, #64	@ 0x40
 800662c:	438a      	bics	r2, r1
 800662e:	609a      	str	r2, [r3, #8]
 8006630:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006632:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006634:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006636:	f383 8810 	msr	PRIMASK, r3
}
 800663a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2280      	movs	r2, #128	@ 0x80
 8006640:	2120      	movs	r1, #32
 8006642:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800664a:	f3ef 8310 	mrs	r3, PRIMASK
 800664e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8006650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006652:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006654:	2301      	movs	r3, #1
 8006656:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006658:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800665a:	f383 8810 	msr	PRIMASK, r3
}
 800665e:	46c0      	nop			@ (mov r8, r8)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2110      	movs	r1, #16
 800666c:	438a      	bics	r2, r1
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006672:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006674:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006676:	f383 8810 	msr	PRIMASK, r3
}
 800667a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006680:	0018      	movs	r0, r3
 8006682:	f7fd f961 	bl	8003948 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2202      	movs	r2, #2
 800668a:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	22ac      	movs	r2, #172	@ 0xac
 8006690:	589b      	ldr	r3, [r3, r2]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	2158      	movs	r1, #88	@ 0x58
 8006696:	5a51      	ldrh	r1, [r2, r1]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	205a      	movs	r0, #90	@ 0x5a
 800669c:	5a12      	ldrh	r2, [r2, r0]
 800669e:	b292      	uxth	r2, r2
 80066a0:	1a8a      	subs	r2, r1, r2
 80066a2:	b291      	uxth	r1, r2
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	0010      	movs	r0, r2
 80066a8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80066aa:	e0c5      	b.n	8006838 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2258      	movs	r2, #88	@ 0x58
 80066b0:	5a99      	ldrh	r1, [r3, r2]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	225a      	movs	r2, #90	@ 0x5a
 80066b6:	5a9b      	ldrh	r3, [r3, r2]
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	208e      	movs	r0, #142	@ 0x8e
 80066bc:	183b      	adds	r3, r7, r0
 80066be:	1a8a      	subs	r2, r1, r2
 80066c0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	225a      	movs	r2, #90	@ 0x5a
 80066c6:	5a9b      	ldrh	r3, [r3, r2]
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d100      	bne.n	80066d0 <HAL_UART_IRQHandler+0x458>
 80066ce:	e0b5      	b.n	800683c <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 80066d0:	183b      	adds	r3, r7, r0
 80066d2:	881b      	ldrh	r3, [r3, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d100      	bne.n	80066da <HAL_UART_IRQHandler+0x462>
 80066d8:	e0b0      	b.n	800683c <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066da:	f3ef 8310 	mrs	r3, PRIMASK
 80066de:	60fb      	str	r3, [r7, #12]
  return(result);
 80066e0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066e2:	2488      	movs	r4, #136	@ 0x88
 80066e4:	193a      	adds	r2, r7, r4
 80066e6:	6013      	str	r3, [r2, #0]
 80066e8:	2301      	movs	r3, #1
 80066ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	f383 8810 	msr	PRIMASK, r3
}
 80066f2:	46c0      	nop			@ (mov r8, r8)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4953      	ldr	r1, [pc, #332]	@ (800684c <HAL_UART_IRQHandler+0x5d4>)
 8006700:	400a      	ands	r2, r1
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	193b      	adds	r3, r7, r4
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f383 8810 	msr	PRIMASK, r3
}
 8006710:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006712:	f3ef 8310 	mrs	r3, PRIMASK
 8006716:	61bb      	str	r3, [r7, #24]
  return(result);
 8006718:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800671a:	2484      	movs	r4, #132	@ 0x84
 800671c:	193a      	adds	r2, r7, r4
 800671e:	6013      	str	r3, [r2, #0]
 8006720:	2301      	movs	r3, #1
 8006722:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	f383 8810 	msr	PRIMASK, r3
}
 800672a:	46c0      	nop			@ (mov r8, r8)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689a      	ldr	r2, [r3, #8]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2101      	movs	r1, #1
 8006738:	438a      	bics	r2, r1
 800673a:	609a      	str	r2, [r3, #8]
 800673c:	193b      	adds	r3, r7, r4
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006742:	6a3b      	ldr	r3, [r7, #32]
 8006744:	f383 8810 	msr	PRIMASK, r3
}
 8006748:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2280      	movs	r2, #128	@ 0x80
 800674e:	2120      	movs	r1, #32
 8006750:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800675e:	f3ef 8310 	mrs	r3, PRIMASK
 8006762:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006766:	2480      	movs	r4, #128	@ 0x80
 8006768:	193a      	adds	r2, r7, r4
 800676a:	6013      	str	r3, [r2, #0]
 800676c:	2301      	movs	r3, #1
 800676e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006772:	f383 8810 	msr	PRIMASK, r3
}
 8006776:	46c0      	nop			@ (mov r8, r8)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2110      	movs	r1, #16
 8006784:	438a      	bics	r2, r1
 8006786:	601a      	str	r2, [r3, #0]
 8006788:	193b      	adds	r3, r7, r4
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800678e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006790:	f383 8810 	msr	PRIMASK, r3
}
 8006794:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2202      	movs	r2, #2
 800679a:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	22ac      	movs	r2, #172	@ 0xac
 80067a0:	589b      	ldr	r3, [r3, r2]
 80067a2:	183a      	adds	r2, r7, r0
 80067a4:	8811      	ldrh	r1, [r2, #0]
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	0010      	movs	r0, r2
 80067aa:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067ac:	e046      	b.n	800683c <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80067ae:	23a4      	movs	r3, #164	@ 0xa4
 80067b0:	18fb      	adds	r3, r7, r3
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	2380      	movs	r3, #128	@ 0x80
 80067b6:	035b      	lsls	r3, r3, #13
 80067b8:	4013      	ands	r3, r2
 80067ba:	d012      	beq.n	80067e2 <HAL_UART_IRQHandler+0x56a>
 80067bc:	239c      	movs	r3, #156	@ 0x9c
 80067be:	18fb      	adds	r3, r7, r3
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	2380      	movs	r3, #128	@ 0x80
 80067c4:	03db      	lsls	r3, r3, #15
 80067c6:	4013      	ands	r3, r2
 80067c8:	d00b      	beq.n	80067e2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2280      	movs	r2, #128	@ 0x80
 80067d0:	0352      	lsls	r2, r2, #13
 80067d2:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	22a8      	movs	r2, #168	@ 0xa8
 80067d8:	589b      	ldr	r3, [r3, r2]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	0010      	movs	r0, r2
 80067de:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80067e0:	e02f      	b.n	8006842 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80067e2:	23a4      	movs	r3, #164	@ 0xa4
 80067e4:	18fb      	adds	r3, r7, r3
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2280      	movs	r2, #128	@ 0x80
 80067ea:	4013      	ands	r3, r2
 80067ec:	d00f      	beq.n	800680e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80067ee:	23a0      	movs	r3, #160	@ 0xa0
 80067f0:	18fb      	adds	r3, r7, r3
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2280      	movs	r2, #128	@ 0x80
 80067f6:	4013      	ands	r3, r2
 80067f8:	d009      	beq.n	800680e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d01e      	beq.n	8006840 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	0010      	movs	r0, r2
 800680a:	4798      	blx	r3
    }
    return;
 800680c:	e018      	b.n	8006840 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800680e:	23a4      	movs	r3, #164	@ 0xa4
 8006810:	18fb      	adds	r3, r7, r3
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2240      	movs	r2, #64	@ 0x40
 8006816:	4013      	ands	r3, r2
 8006818:	d013      	beq.n	8006842 <HAL_UART_IRQHandler+0x5ca>
 800681a:	23a0      	movs	r3, #160	@ 0xa0
 800681c:	18fb      	adds	r3, r7, r3
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2240      	movs	r2, #64	@ 0x40
 8006822:	4013      	ands	r3, r2
 8006824:	d00d      	beq.n	8006842 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	0018      	movs	r0, r3
 800682a:	f000 fd72 	bl	8007312 <UART_EndTransmit_IT>
    return;
 800682e:	e008      	b.n	8006842 <HAL_UART_IRQHandler+0x5ca>
      return;
 8006830:	46c0      	nop			@ (mov r8, r8)
 8006832:	e006      	b.n	8006842 <HAL_UART_IRQHandler+0x5ca>
    return;
 8006834:	46c0      	nop			@ (mov r8, r8)
 8006836:	e004      	b.n	8006842 <HAL_UART_IRQHandler+0x5ca>
      return;
 8006838:	46c0      	nop			@ (mov r8, r8)
 800683a:	e002      	b.n	8006842 <HAL_UART_IRQHandler+0x5ca>
      return;
 800683c:	46c0      	nop			@ (mov r8, r8)
 800683e:	e000      	b.n	8006842 <HAL_UART_IRQHandler+0x5ca>
    return;
 8006840:	46c0      	nop			@ (mov r8, r8)
  }

}
 8006842:	46bd      	mov	sp, r7
 8006844:	b02b      	add	sp, #172	@ 0xac
 8006846:	bd90      	pop	{r4, r7, pc}
 8006848:	fffffeff 	.word	0xfffffeff
 800684c:	fffffedf 	.word	0xfffffedf

08006850 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006858:	46c0      	nop			@ (mov r8, r8)
 800685a:	46bd      	mov	sp, r7
 800685c:	b002      	add	sp, #8
 800685e:	bd80      	pop	{r7, pc}

08006860 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006868:	46c0      	nop			@ (mov r8, r8)
 800686a:	46bd      	mov	sp, r7
 800686c:	b002      	add	sp, #8
 800686e:	bd80      	pop	{r7, pc}

08006870 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006878:	46c0      	nop			@ (mov r8, r8)
 800687a:	46bd      	mov	sp, r7
 800687c:	b002      	add	sp, #8
 800687e:	bd80      	pop	{r7, pc}

08006880 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006888:	46c0      	nop			@ (mov r8, r8)
 800688a:	46bd      	mov	sp, r7
 800688c:	b002      	add	sp, #8
 800688e:	bd80      	pop	{r7, pc}

08006890 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8006898:	46c0      	nop			@ (mov r8, r8)
 800689a:	46bd      	mov	sp, r7
 800689c:	b002      	add	sp, #8
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80068a8:	46c0      	nop			@ (mov r8, r8)
 80068aa:	46bd      	mov	sp, r7
 80068ac:	b002      	add	sp, #8
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	000a      	movs	r2, r1
 80068ba:	1cbb      	adds	r3, r7, #2
 80068bc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068be:	46c0      	nop			@ (mov r8, r8)
 80068c0:	46bd      	mov	sp, r7
 80068c2:	b002      	add	sp, #8
 80068c4:	bd80      	pop	{r7, pc}
	...

080068c8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2188      	movs	r1, #136	@ 0x88
 80068d4:	4a14      	ldr	r2, [pc, #80]	@ (8006928 <UART_InitCallbacksToDefault+0x60>)
 80068d6:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	218c      	movs	r1, #140	@ 0x8c
 80068dc:	4a13      	ldr	r2, [pc, #76]	@ (800692c <UART_InitCallbacksToDefault+0x64>)
 80068de:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2190      	movs	r1, #144	@ 0x90
 80068e4:	4a12      	ldr	r2, [pc, #72]	@ (8006930 <UART_InitCallbacksToDefault+0x68>)
 80068e6:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2194      	movs	r1, #148	@ 0x94
 80068ec:	4a11      	ldr	r2, [pc, #68]	@ (8006934 <UART_InitCallbacksToDefault+0x6c>)
 80068ee:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2198      	movs	r1, #152	@ 0x98
 80068f4:	4a10      	ldr	r2, [pc, #64]	@ (8006938 <UART_InitCallbacksToDefault+0x70>)
 80068f6:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	219c      	movs	r1, #156	@ 0x9c
 80068fc:	4a0f      	ldr	r2, [pc, #60]	@ (800693c <UART_InitCallbacksToDefault+0x74>)
 80068fe:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	21a0      	movs	r1, #160	@ 0xa0
 8006904:	4a0e      	ldr	r2, [pc, #56]	@ (8006940 <UART_InitCallbacksToDefault+0x78>)
 8006906:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	21a4      	movs	r1, #164	@ 0xa4
 800690c:	4a0d      	ldr	r2, [pc, #52]	@ (8006944 <UART_InitCallbacksToDefault+0x7c>)
 800690e:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	21a8      	movs	r1, #168	@ 0xa8
 8006914:	4a0c      	ldr	r2, [pc, #48]	@ (8006948 <UART_InitCallbacksToDefault+0x80>)
 8006916:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	21ac      	movs	r1, #172	@ 0xac
 800691c:	4a0b      	ldr	r2, [pc, #44]	@ (800694c <UART_InitCallbacksToDefault+0x84>)
 800691e:	505a      	str	r2, [r3, r1]

}
 8006920:	46c0      	nop			@ (mov r8, r8)
 8006922:	46bd      	mov	sp, r7
 8006924:	b002      	add	sp, #8
 8006926:	bd80      	pop	{r7, pc}
 8006928:	08006861 	.word	0x08006861
 800692c:	08006851 	.word	0x08006851
 8006930:	08006871 	.word	0x08006871
 8006934:	080024a9 	.word	0x080024a9
 8006938:	080024e5 	.word	0x080024e5
 800693c:	08006881 	.word	0x08006881
 8006940:	08006891 	.word	0x08006891
 8006944:	080068a1 	.word	0x080068a1
 8006948:	0800736d 	.word	0x0800736d
 800694c:	080068b1 	.word	0x080068b1

08006950 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006950:	b5b0      	push	{r4, r5, r7, lr}
 8006952:	b08e      	sub	sp, #56	@ 0x38
 8006954:	af00      	add	r7, sp, #0
 8006956:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006958:	231a      	movs	r3, #26
 800695a:	2218      	movs	r2, #24
 800695c:	189b      	adds	r3, r3, r2
 800695e:	19db      	adds	r3, r3, r7
 8006960:	2200      	movs	r2, #0
 8006962:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	689a      	ldr	r2, [r3, #8]
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	431a      	orrs	r2, r3
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	431a      	orrs	r2, r3
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	4313      	orrs	r3, r2
 800697a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4ac3      	ldr	r2, [pc, #780]	@ (8006c90 <UART_SetConfig+0x340>)
 8006984:	4013      	ands	r3, r2
 8006986:	0019      	movs	r1, r3
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800698e:	430a      	orrs	r2, r1
 8006990:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	4abe      	ldr	r2, [pc, #760]	@ (8006c94 <UART_SetConfig+0x344>)
 800699a:	4013      	ands	r3, r2
 800699c:	0019      	movs	r1, r3
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	68da      	ldr	r2, [r3, #12]
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4ab8      	ldr	r2, [pc, #736]	@ (8006c98 <UART_SetConfig+0x348>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d004      	beq.n	80069c4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069c0:	4313      	orrs	r3, r2
 80069c2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	4ab4      	ldr	r2, [pc, #720]	@ (8006c9c <UART_SetConfig+0x34c>)
 80069cc:	4013      	ands	r3, r2
 80069ce:	0019      	movs	r1, r3
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069d6:	430a      	orrs	r2, r1
 80069d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4ab0      	ldr	r2, [pc, #704]	@ (8006ca0 <UART_SetConfig+0x350>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d131      	bne.n	8006a48 <UART_SetConfig+0xf8>
 80069e4:	4baf      	ldr	r3, [pc, #700]	@ (8006ca4 <UART_SetConfig+0x354>)
 80069e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069e8:	2203      	movs	r2, #3
 80069ea:	4013      	ands	r3, r2
 80069ec:	2b03      	cmp	r3, #3
 80069ee:	d01d      	beq.n	8006a2c <UART_SetConfig+0xdc>
 80069f0:	d823      	bhi.n	8006a3a <UART_SetConfig+0xea>
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d00c      	beq.n	8006a10 <UART_SetConfig+0xc0>
 80069f6:	d820      	bhi.n	8006a3a <UART_SetConfig+0xea>
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d002      	beq.n	8006a02 <UART_SetConfig+0xb2>
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d00e      	beq.n	8006a1e <UART_SetConfig+0xce>
 8006a00:	e01b      	b.n	8006a3a <UART_SetConfig+0xea>
 8006a02:	231b      	movs	r3, #27
 8006a04:	2218      	movs	r2, #24
 8006a06:	189b      	adds	r3, r3, r2
 8006a08:	19db      	adds	r3, r3, r7
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	701a      	strb	r2, [r3, #0]
 8006a0e:	e0b4      	b.n	8006b7a <UART_SetConfig+0x22a>
 8006a10:	231b      	movs	r3, #27
 8006a12:	2218      	movs	r2, #24
 8006a14:	189b      	adds	r3, r3, r2
 8006a16:	19db      	adds	r3, r3, r7
 8006a18:	2202      	movs	r2, #2
 8006a1a:	701a      	strb	r2, [r3, #0]
 8006a1c:	e0ad      	b.n	8006b7a <UART_SetConfig+0x22a>
 8006a1e:	231b      	movs	r3, #27
 8006a20:	2218      	movs	r2, #24
 8006a22:	189b      	adds	r3, r3, r2
 8006a24:	19db      	adds	r3, r3, r7
 8006a26:	2204      	movs	r2, #4
 8006a28:	701a      	strb	r2, [r3, #0]
 8006a2a:	e0a6      	b.n	8006b7a <UART_SetConfig+0x22a>
 8006a2c:	231b      	movs	r3, #27
 8006a2e:	2218      	movs	r2, #24
 8006a30:	189b      	adds	r3, r3, r2
 8006a32:	19db      	adds	r3, r3, r7
 8006a34:	2208      	movs	r2, #8
 8006a36:	701a      	strb	r2, [r3, #0]
 8006a38:	e09f      	b.n	8006b7a <UART_SetConfig+0x22a>
 8006a3a:	231b      	movs	r3, #27
 8006a3c:	2218      	movs	r2, #24
 8006a3e:	189b      	adds	r3, r3, r2
 8006a40:	19db      	adds	r3, r3, r7
 8006a42:	2210      	movs	r2, #16
 8006a44:	701a      	strb	r2, [r3, #0]
 8006a46:	e098      	b.n	8006b7a <UART_SetConfig+0x22a>
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a96      	ldr	r2, [pc, #600]	@ (8006ca8 <UART_SetConfig+0x358>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d131      	bne.n	8006ab6 <UART_SetConfig+0x166>
 8006a52:	4b94      	ldr	r3, [pc, #592]	@ (8006ca4 <UART_SetConfig+0x354>)
 8006a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a56:	220c      	movs	r2, #12
 8006a58:	4013      	ands	r3, r2
 8006a5a:	2b0c      	cmp	r3, #12
 8006a5c:	d01d      	beq.n	8006a9a <UART_SetConfig+0x14a>
 8006a5e:	d823      	bhi.n	8006aa8 <UART_SetConfig+0x158>
 8006a60:	2b08      	cmp	r3, #8
 8006a62:	d00c      	beq.n	8006a7e <UART_SetConfig+0x12e>
 8006a64:	d820      	bhi.n	8006aa8 <UART_SetConfig+0x158>
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d002      	beq.n	8006a70 <UART_SetConfig+0x120>
 8006a6a:	2b04      	cmp	r3, #4
 8006a6c:	d00e      	beq.n	8006a8c <UART_SetConfig+0x13c>
 8006a6e:	e01b      	b.n	8006aa8 <UART_SetConfig+0x158>
 8006a70:	231b      	movs	r3, #27
 8006a72:	2218      	movs	r2, #24
 8006a74:	189b      	adds	r3, r3, r2
 8006a76:	19db      	adds	r3, r3, r7
 8006a78:	2200      	movs	r2, #0
 8006a7a:	701a      	strb	r2, [r3, #0]
 8006a7c:	e07d      	b.n	8006b7a <UART_SetConfig+0x22a>
 8006a7e:	231b      	movs	r3, #27
 8006a80:	2218      	movs	r2, #24
 8006a82:	189b      	adds	r3, r3, r2
 8006a84:	19db      	adds	r3, r3, r7
 8006a86:	2202      	movs	r2, #2
 8006a88:	701a      	strb	r2, [r3, #0]
 8006a8a:	e076      	b.n	8006b7a <UART_SetConfig+0x22a>
 8006a8c:	231b      	movs	r3, #27
 8006a8e:	2218      	movs	r2, #24
 8006a90:	189b      	adds	r3, r3, r2
 8006a92:	19db      	adds	r3, r3, r7
 8006a94:	2204      	movs	r2, #4
 8006a96:	701a      	strb	r2, [r3, #0]
 8006a98:	e06f      	b.n	8006b7a <UART_SetConfig+0x22a>
 8006a9a:	231b      	movs	r3, #27
 8006a9c:	2218      	movs	r2, #24
 8006a9e:	189b      	adds	r3, r3, r2
 8006aa0:	19db      	adds	r3, r3, r7
 8006aa2:	2208      	movs	r2, #8
 8006aa4:	701a      	strb	r2, [r3, #0]
 8006aa6:	e068      	b.n	8006b7a <UART_SetConfig+0x22a>
 8006aa8:	231b      	movs	r3, #27
 8006aaa:	2218      	movs	r2, #24
 8006aac:	189b      	adds	r3, r3, r2
 8006aae:	19db      	adds	r3, r3, r7
 8006ab0:	2210      	movs	r2, #16
 8006ab2:	701a      	strb	r2, [r3, #0]
 8006ab4:	e061      	b.n	8006b7a <UART_SetConfig+0x22a>
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a7c      	ldr	r2, [pc, #496]	@ (8006cac <UART_SetConfig+0x35c>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d106      	bne.n	8006ace <UART_SetConfig+0x17e>
 8006ac0:	231b      	movs	r3, #27
 8006ac2:	2218      	movs	r2, #24
 8006ac4:	189b      	adds	r3, r3, r2
 8006ac6:	19db      	adds	r3, r3, r7
 8006ac8:	2200      	movs	r2, #0
 8006aca:	701a      	strb	r2, [r3, #0]
 8006acc:	e055      	b.n	8006b7a <UART_SetConfig+0x22a>
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a77      	ldr	r2, [pc, #476]	@ (8006cb0 <UART_SetConfig+0x360>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d106      	bne.n	8006ae6 <UART_SetConfig+0x196>
 8006ad8:	231b      	movs	r3, #27
 8006ada:	2218      	movs	r2, #24
 8006adc:	189b      	adds	r3, r3, r2
 8006ade:	19db      	adds	r3, r3, r7
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	701a      	strb	r2, [r3, #0]
 8006ae4:	e049      	b.n	8006b7a <UART_SetConfig+0x22a>
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a6b      	ldr	r2, [pc, #428]	@ (8006c98 <UART_SetConfig+0x348>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d13e      	bne.n	8006b6e <UART_SetConfig+0x21e>
 8006af0:	4b6c      	ldr	r3, [pc, #432]	@ (8006ca4 <UART_SetConfig+0x354>)
 8006af2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006af4:	23c0      	movs	r3, #192	@ 0xc0
 8006af6:	011b      	lsls	r3, r3, #4
 8006af8:	4013      	ands	r3, r2
 8006afa:	22c0      	movs	r2, #192	@ 0xc0
 8006afc:	0112      	lsls	r2, r2, #4
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d027      	beq.n	8006b52 <UART_SetConfig+0x202>
 8006b02:	22c0      	movs	r2, #192	@ 0xc0
 8006b04:	0112      	lsls	r2, r2, #4
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d82a      	bhi.n	8006b60 <UART_SetConfig+0x210>
 8006b0a:	2280      	movs	r2, #128	@ 0x80
 8006b0c:	0112      	lsls	r2, r2, #4
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d011      	beq.n	8006b36 <UART_SetConfig+0x1e6>
 8006b12:	2280      	movs	r2, #128	@ 0x80
 8006b14:	0112      	lsls	r2, r2, #4
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d822      	bhi.n	8006b60 <UART_SetConfig+0x210>
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d004      	beq.n	8006b28 <UART_SetConfig+0x1d8>
 8006b1e:	2280      	movs	r2, #128	@ 0x80
 8006b20:	00d2      	lsls	r2, r2, #3
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d00e      	beq.n	8006b44 <UART_SetConfig+0x1f4>
 8006b26:	e01b      	b.n	8006b60 <UART_SetConfig+0x210>
 8006b28:	231b      	movs	r3, #27
 8006b2a:	2218      	movs	r2, #24
 8006b2c:	189b      	adds	r3, r3, r2
 8006b2e:	19db      	adds	r3, r3, r7
 8006b30:	2200      	movs	r2, #0
 8006b32:	701a      	strb	r2, [r3, #0]
 8006b34:	e021      	b.n	8006b7a <UART_SetConfig+0x22a>
 8006b36:	231b      	movs	r3, #27
 8006b38:	2218      	movs	r2, #24
 8006b3a:	189b      	adds	r3, r3, r2
 8006b3c:	19db      	adds	r3, r3, r7
 8006b3e:	2202      	movs	r2, #2
 8006b40:	701a      	strb	r2, [r3, #0]
 8006b42:	e01a      	b.n	8006b7a <UART_SetConfig+0x22a>
 8006b44:	231b      	movs	r3, #27
 8006b46:	2218      	movs	r2, #24
 8006b48:	189b      	adds	r3, r3, r2
 8006b4a:	19db      	adds	r3, r3, r7
 8006b4c:	2204      	movs	r2, #4
 8006b4e:	701a      	strb	r2, [r3, #0]
 8006b50:	e013      	b.n	8006b7a <UART_SetConfig+0x22a>
 8006b52:	231b      	movs	r3, #27
 8006b54:	2218      	movs	r2, #24
 8006b56:	189b      	adds	r3, r3, r2
 8006b58:	19db      	adds	r3, r3, r7
 8006b5a:	2208      	movs	r2, #8
 8006b5c:	701a      	strb	r2, [r3, #0]
 8006b5e:	e00c      	b.n	8006b7a <UART_SetConfig+0x22a>
 8006b60:	231b      	movs	r3, #27
 8006b62:	2218      	movs	r2, #24
 8006b64:	189b      	adds	r3, r3, r2
 8006b66:	19db      	adds	r3, r3, r7
 8006b68:	2210      	movs	r2, #16
 8006b6a:	701a      	strb	r2, [r3, #0]
 8006b6c:	e005      	b.n	8006b7a <UART_SetConfig+0x22a>
 8006b6e:	231b      	movs	r3, #27
 8006b70:	2218      	movs	r2, #24
 8006b72:	189b      	adds	r3, r3, r2
 8006b74:	19db      	adds	r3, r3, r7
 8006b76:	2210      	movs	r2, #16
 8006b78:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a46      	ldr	r2, [pc, #280]	@ (8006c98 <UART_SetConfig+0x348>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d000      	beq.n	8006b86 <UART_SetConfig+0x236>
 8006b84:	e09a      	b.n	8006cbc <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b86:	231b      	movs	r3, #27
 8006b88:	2218      	movs	r2, #24
 8006b8a:	189b      	adds	r3, r3, r2
 8006b8c:	19db      	adds	r3, r3, r7
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	2b08      	cmp	r3, #8
 8006b92:	d01d      	beq.n	8006bd0 <UART_SetConfig+0x280>
 8006b94:	dc20      	bgt.n	8006bd8 <UART_SetConfig+0x288>
 8006b96:	2b04      	cmp	r3, #4
 8006b98:	d015      	beq.n	8006bc6 <UART_SetConfig+0x276>
 8006b9a:	dc1d      	bgt.n	8006bd8 <UART_SetConfig+0x288>
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <UART_SetConfig+0x256>
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d005      	beq.n	8006bb0 <UART_SetConfig+0x260>
 8006ba4:	e018      	b.n	8006bd8 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ba6:	f7ff f8d9 	bl	8005d5c <HAL_RCC_GetPCLK1Freq>
 8006baa:	0003      	movs	r3, r0
 8006bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006bae:	e01c      	b.n	8006bea <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bb0:	4b3c      	ldr	r3, [pc, #240]	@ (8006ca4 <UART_SetConfig+0x354>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2210      	movs	r2, #16
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	d002      	beq.n	8006bc0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006bba:	4b3e      	ldr	r3, [pc, #248]	@ (8006cb4 <UART_SetConfig+0x364>)
 8006bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006bbe:	e014      	b.n	8006bea <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8006bc0:	4b3d      	ldr	r3, [pc, #244]	@ (8006cb8 <UART_SetConfig+0x368>)
 8006bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006bc4:	e011      	b.n	8006bea <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bc6:	f7ff f819 	bl	8005bfc <HAL_RCC_GetSysClockFreq>
 8006bca:	0003      	movs	r3, r0
 8006bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006bce:	e00c      	b.n	8006bea <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bd0:	2380      	movs	r3, #128	@ 0x80
 8006bd2:	021b      	lsls	r3, r3, #8
 8006bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006bd6:	e008      	b.n	8006bea <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8006bdc:	231a      	movs	r3, #26
 8006bde:	2218      	movs	r2, #24
 8006be0:	189b      	adds	r3, r3, r2
 8006be2:	19db      	adds	r3, r3, r7
 8006be4:	2201      	movs	r2, #1
 8006be6:	701a      	strb	r2, [r3, #0]
        break;
 8006be8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d100      	bne.n	8006bf2 <UART_SetConfig+0x2a2>
 8006bf0:	e133      	b.n	8006e5a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	0013      	movs	r3, r2
 8006bf8:	005b      	lsls	r3, r3, #1
 8006bfa:	189b      	adds	r3, r3, r2
 8006bfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d305      	bcc.n	8006c0e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d906      	bls.n	8006c1c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8006c0e:	231a      	movs	r3, #26
 8006c10:	2218      	movs	r2, #24
 8006c12:	189b      	adds	r3, r3, r2
 8006c14:	19db      	adds	r3, r3, r7
 8006c16:	2201      	movs	r2, #1
 8006c18:	701a      	strb	r2, [r3, #0]
 8006c1a:	e11e      	b.n	8006e5a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c1e:	613b      	str	r3, [r7, #16]
 8006c20:	2300      	movs	r3, #0
 8006c22:	617b      	str	r3, [r7, #20]
 8006c24:	6939      	ldr	r1, [r7, #16]
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	000b      	movs	r3, r1
 8006c2a:	0e1b      	lsrs	r3, r3, #24
 8006c2c:	0010      	movs	r0, r2
 8006c2e:	0205      	lsls	r5, r0, #8
 8006c30:	431d      	orrs	r5, r3
 8006c32:	000b      	movs	r3, r1
 8006c34:	021c      	lsls	r4, r3, #8
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	085b      	lsrs	r3, r3, #1
 8006c3c:	60bb      	str	r3, [r7, #8]
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60fb      	str	r3, [r7, #12]
 8006c42:	68b8      	ldr	r0, [r7, #8]
 8006c44:	68f9      	ldr	r1, [r7, #12]
 8006c46:	1900      	adds	r0, r0, r4
 8006c48:	4169      	adcs	r1, r5
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	603b      	str	r3, [r7, #0]
 8006c50:	2300      	movs	r3, #0
 8006c52:	607b      	str	r3, [r7, #4]
 8006c54:	683a      	ldr	r2, [r7, #0]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f7f9 fc26 	bl	80004a8 <__aeabi_uldivmod>
 8006c5c:	0002      	movs	r2, r0
 8006c5e:	000b      	movs	r3, r1
 8006c60:	0013      	movs	r3, r2
 8006c62:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c66:	23c0      	movs	r3, #192	@ 0xc0
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d309      	bcc.n	8006c82 <UART_SetConfig+0x332>
 8006c6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c70:	2380      	movs	r3, #128	@ 0x80
 8006c72:	035b      	lsls	r3, r3, #13
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d204      	bcs.n	8006c82 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c7e:	60da      	str	r2, [r3, #12]
 8006c80:	e0eb      	b.n	8006e5a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8006c82:	231a      	movs	r3, #26
 8006c84:	2218      	movs	r2, #24
 8006c86:	189b      	adds	r3, r3, r2
 8006c88:	19db      	adds	r3, r3, r7
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	701a      	strb	r2, [r3, #0]
 8006c8e:	e0e4      	b.n	8006e5a <UART_SetConfig+0x50a>
 8006c90:	efff69f3 	.word	0xefff69f3
 8006c94:	ffffcfff 	.word	0xffffcfff
 8006c98:	40004800 	.word	0x40004800
 8006c9c:	fffff4ff 	.word	0xfffff4ff
 8006ca0:	40013800 	.word	0x40013800
 8006ca4:	40021000 	.word	0x40021000
 8006ca8:	40004400 	.word	0x40004400
 8006cac:	40004c00 	.word	0x40004c00
 8006cb0:	40005000 	.word	0x40005000
 8006cb4:	003d0900 	.word	0x003d0900
 8006cb8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	69da      	ldr	r2, [r3, #28]
 8006cc0:	2380      	movs	r3, #128	@ 0x80
 8006cc2:	021b      	lsls	r3, r3, #8
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d000      	beq.n	8006cca <UART_SetConfig+0x37a>
 8006cc8:	e070      	b.n	8006dac <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8006cca:	231b      	movs	r3, #27
 8006ccc:	2218      	movs	r2, #24
 8006cce:	189b      	adds	r3, r3, r2
 8006cd0:	19db      	adds	r3, r3, r7
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	2b08      	cmp	r3, #8
 8006cd6:	d822      	bhi.n	8006d1e <UART_SetConfig+0x3ce>
 8006cd8:	009a      	lsls	r2, r3, #2
 8006cda:	4b67      	ldr	r3, [pc, #412]	@ (8006e78 <UART_SetConfig+0x528>)
 8006cdc:	18d3      	adds	r3, r2, r3
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ce2:	f7ff f83b 	bl	8005d5c <HAL_RCC_GetPCLK1Freq>
 8006ce6:	0003      	movs	r3, r0
 8006ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006cea:	e021      	b.n	8006d30 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cec:	f7ff f84c 	bl	8005d88 <HAL_RCC_GetPCLK2Freq>
 8006cf0:	0003      	movs	r3, r0
 8006cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006cf4:	e01c      	b.n	8006d30 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cf6:	4b61      	ldr	r3, [pc, #388]	@ (8006e7c <UART_SetConfig+0x52c>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2210      	movs	r2, #16
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	d002      	beq.n	8006d06 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006d00:	4b5f      	ldr	r3, [pc, #380]	@ (8006e80 <UART_SetConfig+0x530>)
 8006d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d04:	e014      	b.n	8006d30 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8006d06:	4b5f      	ldr	r3, [pc, #380]	@ (8006e84 <UART_SetConfig+0x534>)
 8006d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006d0a:	e011      	b.n	8006d30 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d0c:	f7fe ff76 	bl	8005bfc <HAL_RCC_GetSysClockFreq>
 8006d10:	0003      	movs	r3, r0
 8006d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006d14:	e00c      	b.n	8006d30 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d16:	2380      	movs	r3, #128	@ 0x80
 8006d18:	021b      	lsls	r3, r3, #8
 8006d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006d1c:	e008      	b.n	8006d30 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8006d22:	231a      	movs	r3, #26
 8006d24:	2218      	movs	r2, #24
 8006d26:	189b      	adds	r3, r3, r2
 8006d28:	19db      	adds	r3, r3, r7
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	701a      	strb	r2, [r3, #0]
        break;
 8006d2e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d100      	bne.n	8006d38 <UART_SetConfig+0x3e8>
 8006d36:	e090      	b.n	8006e5a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d3a:	005a      	lsls	r2, r3, #1
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	085b      	lsrs	r3, r3, #1
 8006d42:	18d2      	adds	r2, r2, r3
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	0019      	movs	r1, r3
 8006d4a:	0010      	movs	r0, r2
 8006d4c:	f7f9 f9f8 	bl	8000140 <__udivsi3>
 8006d50:	0003      	movs	r3, r0
 8006d52:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d56:	2b0f      	cmp	r3, #15
 8006d58:	d921      	bls.n	8006d9e <UART_SetConfig+0x44e>
 8006d5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d5c:	2380      	movs	r3, #128	@ 0x80
 8006d5e:	025b      	lsls	r3, r3, #9
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d21c      	bcs.n	8006d9e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	200e      	movs	r0, #14
 8006d6a:	2418      	movs	r4, #24
 8006d6c:	1903      	adds	r3, r0, r4
 8006d6e:	19db      	adds	r3, r3, r7
 8006d70:	210f      	movs	r1, #15
 8006d72:	438a      	bics	r2, r1
 8006d74:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d78:	085b      	lsrs	r3, r3, #1
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	2207      	movs	r2, #7
 8006d7e:	4013      	ands	r3, r2
 8006d80:	b299      	uxth	r1, r3
 8006d82:	1903      	adds	r3, r0, r4
 8006d84:	19db      	adds	r3, r3, r7
 8006d86:	1902      	adds	r2, r0, r4
 8006d88:	19d2      	adds	r2, r2, r7
 8006d8a:	8812      	ldrh	r2, [r2, #0]
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	1902      	adds	r2, r0, r4
 8006d96:	19d2      	adds	r2, r2, r7
 8006d98:	8812      	ldrh	r2, [r2, #0]
 8006d9a:	60da      	str	r2, [r3, #12]
 8006d9c:	e05d      	b.n	8006e5a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006d9e:	231a      	movs	r3, #26
 8006da0:	2218      	movs	r2, #24
 8006da2:	189b      	adds	r3, r3, r2
 8006da4:	19db      	adds	r3, r3, r7
 8006da6:	2201      	movs	r2, #1
 8006da8:	701a      	strb	r2, [r3, #0]
 8006daa:	e056      	b.n	8006e5a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006dac:	231b      	movs	r3, #27
 8006dae:	2218      	movs	r2, #24
 8006db0:	189b      	adds	r3, r3, r2
 8006db2:	19db      	adds	r3, r3, r7
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2b08      	cmp	r3, #8
 8006db8:	d822      	bhi.n	8006e00 <UART_SetConfig+0x4b0>
 8006dba:	009a      	lsls	r2, r3, #2
 8006dbc:	4b32      	ldr	r3, [pc, #200]	@ (8006e88 <UART_SetConfig+0x538>)
 8006dbe:	18d3      	adds	r3, r2, r3
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dc4:	f7fe ffca 	bl	8005d5c <HAL_RCC_GetPCLK1Freq>
 8006dc8:	0003      	movs	r3, r0
 8006dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006dcc:	e021      	b.n	8006e12 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dce:	f7fe ffdb 	bl	8005d88 <HAL_RCC_GetPCLK2Freq>
 8006dd2:	0003      	movs	r3, r0
 8006dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006dd6:	e01c      	b.n	8006e12 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dd8:	4b28      	ldr	r3, [pc, #160]	@ (8006e7c <UART_SetConfig+0x52c>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2210      	movs	r2, #16
 8006dde:	4013      	ands	r3, r2
 8006de0:	d002      	beq.n	8006de8 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006de2:	4b27      	ldr	r3, [pc, #156]	@ (8006e80 <UART_SetConfig+0x530>)
 8006de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006de6:	e014      	b.n	8006e12 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8006de8:	4b26      	ldr	r3, [pc, #152]	@ (8006e84 <UART_SetConfig+0x534>)
 8006dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006dec:	e011      	b.n	8006e12 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dee:	f7fe ff05 	bl	8005bfc <HAL_RCC_GetSysClockFreq>
 8006df2:	0003      	movs	r3, r0
 8006df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006df6:	e00c      	b.n	8006e12 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006df8:	2380      	movs	r3, #128	@ 0x80
 8006dfa:	021b      	lsls	r3, r3, #8
 8006dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006dfe:	e008      	b.n	8006e12 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8006e04:	231a      	movs	r3, #26
 8006e06:	2218      	movs	r2, #24
 8006e08:	189b      	adds	r3, r3, r2
 8006e0a:	19db      	adds	r3, r3, r7
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	701a      	strb	r2, [r3, #0]
        break;
 8006e10:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d020      	beq.n	8006e5a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	085a      	lsrs	r2, r3, #1
 8006e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e20:	18d2      	adds	r2, r2, r3
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	0019      	movs	r1, r3
 8006e28:	0010      	movs	r0, r2
 8006e2a:	f7f9 f989 	bl	8000140 <__udivsi3>
 8006e2e:	0003      	movs	r3, r0
 8006e30:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e34:	2b0f      	cmp	r3, #15
 8006e36:	d90a      	bls.n	8006e4e <UART_SetConfig+0x4fe>
 8006e38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e3a:	2380      	movs	r3, #128	@ 0x80
 8006e3c:	025b      	lsls	r3, r3, #9
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d205      	bcs.n	8006e4e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e44:	b29a      	uxth	r2, r3
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	60da      	str	r2, [r3, #12]
 8006e4c:	e005      	b.n	8006e5a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006e4e:	231a      	movs	r3, #26
 8006e50:	2218      	movs	r2, #24
 8006e52:	189b      	adds	r3, r3, r2
 8006e54:	19db      	adds	r3, r3, r7
 8006e56:	2201      	movs	r2, #1
 8006e58:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	2200      	movs	r2, #0
 8006e64:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006e66:	231a      	movs	r3, #26
 8006e68:	2218      	movs	r2, #24
 8006e6a:	189b      	adds	r3, r3, r2
 8006e6c:	19db      	adds	r3, r3, r7
 8006e6e:	781b      	ldrb	r3, [r3, #0]
}
 8006e70:	0018      	movs	r0, r3
 8006e72:	46bd      	mov	sp, r7
 8006e74:	b00e      	add	sp, #56	@ 0x38
 8006e76:	bdb0      	pop	{r4, r5, r7, pc}
 8006e78:	0800a460 	.word	0x0800a460
 8006e7c:	40021000 	.word	0x40021000
 8006e80:	003d0900 	.word	0x003d0900
 8006e84:	00f42400 	.word	0x00f42400
 8006e88:	0800a484 	.word	0x0800a484

08006e8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e98:	2201      	movs	r2, #1
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	d00b      	beq.n	8006eb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	4a4a      	ldr	r2, [pc, #296]	@ (8006fd0 <UART_AdvFeatureConfig+0x144>)
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	0019      	movs	r1, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eba:	2202      	movs	r2, #2
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	d00b      	beq.n	8006ed8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	4a43      	ldr	r2, [pc, #268]	@ (8006fd4 <UART_AdvFeatureConfig+0x148>)
 8006ec8:	4013      	ands	r3, r2
 8006eca:	0019      	movs	r1, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006edc:	2204      	movs	r2, #4
 8006ede:	4013      	ands	r3, r2
 8006ee0:	d00b      	beq.n	8006efa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	4a3b      	ldr	r2, [pc, #236]	@ (8006fd8 <UART_AdvFeatureConfig+0x14c>)
 8006eea:	4013      	ands	r3, r2
 8006eec:	0019      	movs	r1, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006efe:	2208      	movs	r2, #8
 8006f00:	4013      	ands	r3, r2
 8006f02:	d00b      	beq.n	8006f1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	4a34      	ldr	r2, [pc, #208]	@ (8006fdc <UART_AdvFeatureConfig+0x150>)
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	0019      	movs	r1, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	430a      	orrs	r2, r1
 8006f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f20:	2210      	movs	r2, #16
 8006f22:	4013      	ands	r3, r2
 8006f24:	d00b      	beq.n	8006f3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	4a2c      	ldr	r2, [pc, #176]	@ (8006fe0 <UART_AdvFeatureConfig+0x154>)
 8006f2e:	4013      	ands	r3, r2
 8006f30:	0019      	movs	r1, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f42:	2220      	movs	r2, #32
 8006f44:	4013      	ands	r3, r2
 8006f46:	d00b      	beq.n	8006f60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	4a25      	ldr	r2, [pc, #148]	@ (8006fe4 <UART_AdvFeatureConfig+0x158>)
 8006f50:	4013      	ands	r3, r2
 8006f52:	0019      	movs	r1, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f64:	2240      	movs	r2, #64	@ 0x40
 8006f66:	4013      	ands	r3, r2
 8006f68:	d01d      	beq.n	8006fa6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	4a1d      	ldr	r2, [pc, #116]	@ (8006fe8 <UART_AdvFeatureConfig+0x15c>)
 8006f72:	4013      	ands	r3, r2
 8006f74:	0019      	movs	r1, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f86:	2380      	movs	r3, #128	@ 0x80
 8006f88:	035b      	lsls	r3, r3, #13
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d10b      	bne.n	8006fa6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	4a15      	ldr	r2, [pc, #84]	@ (8006fec <UART_AdvFeatureConfig+0x160>)
 8006f96:	4013      	ands	r3, r2
 8006f98:	0019      	movs	r1, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006faa:	2280      	movs	r2, #128	@ 0x80
 8006fac:	4013      	ands	r3, r2
 8006fae:	d00b      	beq.n	8006fc8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	4a0e      	ldr	r2, [pc, #56]	@ (8006ff0 <UART_AdvFeatureConfig+0x164>)
 8006fb8:	4013      	ands	r3, r2
 8006fba:	0019      	movs	r1, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	605a      	str	r2, [r3, #4]
  }
}
 8006fc8:	46c0      	nop			@ (mov r8, r8)
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	b002      	add	sp, #8
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	fffdffff 	.word	0xfffdffff
 8006fd4:	fffeffff 	.word	0xfffeffff
 8006fd8:	fffbffff 	.word	0xfffbffff
 8006fdc:	ffff7fff 	.word	0xffff7fff
 8006fe0:	ffffefff 	.word	0xffffefff
 8006fe4:	ffffdfff 	.word	0xffffdfff
 8006fe8:	ffefffff 	.word	0xffefffff
 8006fec:	ff9fffff 	.word	0xff9fffff
 8006ff0:	fff7ffff 	.word	0xfff7ffff

08006ff4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b092      	sub	sp, #72	@ 0x48
 8006ff8:	af02      	add	r7, sp, #8
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2284      	movs	r2, #132	@ 0x84
 8007000:	2100      	movs	r1, #0
 8007002:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007004:	f7fc fb40 	bl	8003688 <HAL_GetTick>
 8007008:	0003      	movs	r3, r0
 800700a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2208      	movs	r2, #8
 8007014:	4013      	ands	r3, r2
 8007016:	2b08      	cmp	r3, #8
 8007018:	d12c      	bne.n	8007074 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800701a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800701c:	2280      	movs	r2, #128	@ 0x80
 800701e:	0391      	lsls	r1, r2, #14
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	4a46      	ldr	r2, [pc, #280]	@ (800713c <UART_CheckIdleState+0x148>)
 8007024:	9200      	str	r2, [sp, #0]
 8007026:	2200      	movs	r2, #0
 8007028:	f000 f88c 	bl	8007144 <UART_WaitOnFlagUntilTimeout>
 800702c:	1e03      	subs	r3, r0, #0
 800702e:	d021      	beq.n	8007074 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007030:	f3ef 8310 	mrs	r3, PRIMASK
 8007034:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007038:	63bb      	str	r3, [r7, #56]	@ 0x38
 800703a:	2301      	movs	r3, #1
 800703c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800703e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007040:	f383 8810 	msr	PRIMASK, r3
}
 8007044:	46c0      	nop			@ (mov r8, r8)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2180      	movs	r1, #128	@ 0x80
 8007052:	438a      	bics	r2, r1
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007058:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800705a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705c:	f383 8810 	msr	PRIMASK, r3
}
 8007060:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2220      	movs	r2, #32
 8007066:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2278      	movs	r2, #120	@ 0x78
 800706c:	2100      	movs	r1, #0
 800706e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e05f      	b.n	8007134 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2204      	movs	r2, #4
 800707c:	4013      	ands	r3, r2
 800707e:	2b04      	cmp	r3, #4
 8007080:	d146      	bne.n	8007110 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007084:	2280      	movs	r2, #128	@ 0x80
 8007086:	03d1      	lsls	r1, r2, #15
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	4a2c      	ldr	r2, [pc, #176]	@ (800713c <UART_CheckIdleState+0x148>)
 800708c:	9200      	str	r2, [sp, #0]
 800708e:	2200      	movs	r2, #0
 8007090:	f000 f858 	bl	8007144 <UART_WaitOnFlagUntilTimeout>
 8007094:	1e03      	subs	r3, r0, #0
 8007096:	d03b      	beq.n	8007110 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007098:	f3ef 8310 	mrs	r3, PRIMASK
 800709c:	60fb      	str	r3, [r7, #12]
  return(result);
 800709e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80070a2:	2301      	movs	r3, #1
 80070a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	f383 8810 	msr	PRIMASK, r3
}
 80070ac:	46c0      	nop			@ (mov r8, r8)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4921      	ldr	r1, [pc, #132]	@ (8007140 <UART_CheckIdleState+0x14c>)
 80070ba:	400a      	ands	r2, r1
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	f383 8810 	msr	PRIMASK, r3
}
 80070c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070ca:	f3ef 8310 	mrs	r3, PRIMASK
 80070ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80070d0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80070d4:	2301      	movs	r3, #1
 80070d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	f383 8810 	msr	PRIMASK, r3
}
 80070de:	46c0      	nop			@ (mov r8, r8)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689a      	ldr	r2, [r3, #8]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2101      	movs	r1, #1
 80070ec:	438a      	bics	r2, r1
 80070ee:	609a      	str	r2, [r3, #8]
 80070f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	f383 8810 	msr	PRIMASK, r3
}
 80070fa:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2280      	movs	r2, #128	@ 0x80
 8007100:	2120      	movs	r1, #32
 8007102:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2278      	movs	r2, #120	@ 0x78
 8007108:	2100      	movs	r1, #0
 800710a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800710c:	2303      	movs	r3, #3
 800710e:	e011      	b.n	8007134 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2220      	movs	r2, #32
 8007114:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2280      	movs	r2, #128	@ 0x80
 800711a:	2120      	movs	r1, #32
 800711c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2278      	movs	r2, #120	@ 0x78
 800712e:	2100      	movs	r1, #0
 8007130:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	0018      	movs	r0, r3
 8007136:	46bd      	mov	sp, r7
 8007138:	b010      	add	sp, #64	@ 0x40
 800713a:	bd80      	pop	{r7, pc}
 800713c:	01ffffff 	.word	0x01ffffff
 8007140:	fffffedf 	.word	0xfffffedf

08007144 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	603b      	str	r3, [r7, #0]
 8007150:	1dfb      	adds	r3, r7, #7
 8007152:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007154:	e04b      	b.n	80071ee <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	3301      	adds	r3, #1
 800715a:	d048      	beq.n	80071ee <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800715c:	f7fc fa94 	bl	8003688 <HAL_GetTick>
 8007160:	0002      	movs	r2, r0
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	69ba      	ldr	r2, [r7, #24]
 8007168:	429a      	cmp	r2, r3
 800716a:	d302      	bcc.n	8007172 <UART_WaitOnFlagUntilTimeout+0x2e>
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e04b      	b.n	800720e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2204      	movs	r2, #4
 800717e:	4013      	ands	r3, r2
 8007180:	d035      	beq.n	80071ee <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	69db      	ldr	r3, [r3, #28]
 8007188:	2208      	movs	r2, #8
 800718a:	4013      	ands	r3, r2
 800718c:	2b08      	cmp	r3, #8
 800718e:	d111      	bne.n	80071b4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2208      	movs	r2, #8
 8007196:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	0018      	movs	r0, r3
 800719c:	f000 f83c 	bl	8007218 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2284      	movs	r2, #132	@ 0x84
 80071a4:	2108      	movs	r1, #8
 80071a6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2278      	movs	r2, #120	@ 0x78
 80071ac:	2100      	movs	r1, #0
 80071ae:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e02c      	b.n	800720e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	69da      	ldr	r2, [r3, #28]
 80071ba:	2380      	movs	r3, #128	@ 0x80
 80071bc:	011b      	lsls	r3, r3, #4
 80071be:	401a      	ands	r2, r3
 80071c0:	2380      	movs	r3, #128	@ 0x80
 80071c2:	011b      	lsls	r3, r3, #4
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d112      	bne.n	80071ee <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2280      	movs	r2, #128	@ 0x80
 80071ce:	0112      	lsls	r2, r2, #4
 80071d0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	0018      	movs	r0, r3
 80071d6:	f000 f81f 	bl	8007218 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2284      	movs	r2, #132	@ 0x84
 80071de:	2120      	movs	r1, #32
 80071e0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2278      	movs	r2, #120	@ 0x78
 80071e6:	2100      	movs	r1, #0
 80071e8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80071ea:	2303      	movs	r3, #3
 80071ec:	e00f      	b.n	800720e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	69db      	ldr	r3, [r3, #28]
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	4013      	ands	r3, r2
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	425a      	negs	r2, r3
 80071fe:	4153      	adcs	r3, r2
 8007200:	b2db      	uxtb	r3, r3
 8007202:	001a      	movs	r2, r3
 8007204:	1dfb      	adds	r3, r7, #7
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	429a      	cmp	r2, r3
 800720a:	d0a4      	beq.n	8007156 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	0018      	movs	r0, r3
 8007210:	46bd      	mov	sp, r7
 8007212:	b004      	add	sp, #16
 8007214:	bd80      	pop	{r7, pc}
	...

08007218 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b08e      	sub	sp, #56	@ 0x38
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007220:	f3ef 8310 	mrs	r3, PRIMASK
 8007224:	617b      	str	r3, [r7, #20]
  return(result);
 8007226:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007228:	637b      	str	r3, [r7, #52]	@ 0x34
 800722a:	2301      	movs	r3, #1
 800722c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	f383 8810 	msr	PRIMASK, r3
}
 8007234:	46c0      	nop			@ (mov r8, r8)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4926      	ldr	r1, [pc, #152]	@ (80072dc <UART_EndRxTransfer+0xc4>)
 8007242:	400a      	ands	r2, r1
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007248:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	f383 8810 	msr	PRIMASK, r3
}
 8007250:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007252:	f3ef 8310 	mrs	r3, PRIMASK
 8007256:	623b      	str	r3, [r7, #32]
  return(result);
 8007258:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800725a:	633b      	str	r3, [r7, #48]	@ 0x30
 800725c:	2301      	movs	r3, #1
 800725e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007262:	f383 8810 	msr	PRIMASK, r3
}
 8007266:	46c0      	nop			@ (mov r8, r8)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	689a      	ldr	r2, [r3, #8]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2101      	movs	r1, #1
 8007274:	438a      	bics	r2, r1
 8007276:	609a      	str	r2, [r3, #8]
 8007278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800727a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800727c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727e:	f383 8810 	msr	PRIMASK, r3
}
 8007282:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007288:	2b01      	cmp	r3, #1
 800728a:	d118      	bne.n	80072be <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800728c:	f3ef 8310 	mrs	r3, PRIMASK
 8007290:	60bb      	str	r3, [r7, #8]
  return(result);
 8007292:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007294:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007296:	2301      	movs	r3, #1
 8007298:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f383 8810 	msr	PRIMASK, r3
}
 80072a0:	46c0      	nop			@ (mov r8, r8)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2110      	movs	r1, #16
 80072ae:	438a      	bics	r2, r1
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	f383 8810 	msr	PRIMASK, r3
}
 80072bc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2280      	movs	r2, #128	@ 0x80
 80072c2:	2120      	movs	r1, #32
 80072c4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80072d2:	46c0      	nop			@ (mov r8, r8)
 80072d4:	46bd      	mov	sp, r7
 80072d6:	b00e      	add	sp, #56	@ 0x38
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	46c0      	nop			@ (mov r8, r8)
 80072dc:	fffffedf 	.word	0xfffffedf

080072e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	225a      	movs	r2, #90	@ 0x5a
 80072f2:	2100      	movs	r1, #0
 80072f4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2252      	movs	r2, #82	@ 0x52
 80072fa:	2100      	movs	r1, #0
 80072fc:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2298      	movs	r2, #152	@ 0x98
 8007302:	589b      	ldr	r3, [r3, r2]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	0010      	movs	r0, r2
 8007308:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800730a:	46c0      	nop			@ (mov r8, r8)
 800730c:	46bd      	mov	sp, r7
 800730e:	b004      	add	sp, #16
 8007310:	bd80      	pop	{r7, pc}

08007312 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b086      	sub	sp, #24
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800731a:	f3ef 8310 	mrs	r3, PRIMASK
 800731e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007320:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007322:	617b      	str	r3, [r7, #20]
 8007324:	2301      	movs	r3, #1
 8007326:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f383 8810 	msr	PRIMASK, r3
}
 800732e:	46c0      	nop			@ (mov r8, r8)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2140      	movs	r1, #64	@ 0x40
 800733c:	438a      	bics	r2, r1
 800733e:	601a      	str	r2, [r3, #0]
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	f383 8810 	msr	PRIMASK, r3
}
 800734a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2220      	movs	r2, #32
 8007350:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	228c      	movs	r2, #140	@ 0x8c
 800735c:	589b      	ldr	r3, [r3, r2]
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	0010      	movs	r0, r2
 8007362:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007364:	46c0      	nop			@ (mov r8, r8)
 8007366:	46bd      	mov	sp, r7
 8007368:	b006      	add	sp, #24
 800736a:	bd80      	pop	{r7, pc}

0800736c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007374:	46c0      	nop			@ (mov r8, r8)
 8007376:	46bd      	mov	sp, r7
 8007378:	b002      	add	sp, #8
 800737a:	bd80      	pop	{r7, pc}

0800737c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007384:	4b09      	ldr	r3, [pc, #36]	@ (80073ac <USB_DisableGlobalInt+0x30>)
 8007386:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2240      	movs	r2, #64	@ 0x40
 800738c:	5a9b      	ldrh	r3, [r3, r2]
 800738e:	b29b      	uxth	r3, r3
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	b292      	uxth	r2, r2
 8007394:	43d2      	mvns	r2, r2
 8007396:	b292      	uxth	r2, r2
 8007398:	4013      	ands	r3, r2
 800739a:	b299      	uxth	r1, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2240      	movs	r2, #64	@ 0x40
 80073a0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	0018      	movs	r0, r3
 80073a6:	46bd      	mov	sp, r7
 80073a8:	b004      	add	sp, #16
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	0000bf80 	.word	0x0000bf80

080073b0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80073b0:	b084      	sub	sp, #16
 80073b2:	b590      	push	{r4, r7, lr}
 80073b4:	b083      	sub	sp, #12
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	2004      	movs	r0, #4
 80073bc:	2410      	movs	r4, #16
 80073be:	1900      	adds	r0, r0, r4
 80073c0:	2408      	movs	r4, #8
 80073c2:	46a4      	mov	ip, r4
 80073c4:	44bc      	add	ip, r7
 80073c6:	4460      	add	r0, ip
 80073c8:	6001      	str	r1, [r0, #0]
 80073ca:	6042      	str	r2, [r0, #4]
 80073cc:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2240      	movs	r2, #64	@ 0x40
 80073d2:	2101      	movs	r1, #1
 80073d4:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2240      	movs	r2, #64	@ 0x40
 80073da:	2100      	movs	r1, #0
 80073dc:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2244      	movs	r2, #68	@ 0x44
 80073e2:	2100      	movs	r1, #0
 80073e4:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2250      	movs	r2, #80	@ 0x50
 80073ea:	2100      	movs	r1, #0
 80073ec:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	0018      	movs	r0, r3
 80073f2:	46bd      	mov	sp, r7
 80073f4:	b003      	add	sp, #12
 80073f6:	bc90      	pop	{r4, r7}
 80073f8:	bc08      	pop	{r3}
 80073fa:	b004      	add	sp, #16
 80073fc:	4718      	bx	r3

080073fe <__cvt>:
 80073fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007400:	001f      	movs	r7, r3
 8007402:	2300      	movs	r3, #0
 8007404:	0016      	movs	r6, r2
 8007406:	b08b      	sub	sp, #44	@ 0x2c
 8007408:	429f      	cmp	r7, r3
 800740a:	da04      	bge.n	8007416 <__cvt+0x18>
 800740c:	2180      	movs	r1, #128	@ 0x80
 800740e:	0609      	lsls	r1, r1, #24
 8007410:	187b      	adds	r3, r7, r1
 8007412:	001f      	movs	r7, r3
 8007414:	232d      	movs	r3, #45	@ 0x2d
 8007416:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007418:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800741a:	7013      	strb	r3, [r2, #0]
 800741c:	2320      	movs	r3, #32
 800741e:	2203      	movs	r2, #3
 8007420:	439d      	bics	r5, r3
 8007422:	2d46      	cmp	r5, #70	@ 0x46
 8007424:	d007      	beq.n	8007436 <__cvt+0x38>
 8007426:	002b      	movs	r3, r5
 8007428:	3b45      	subs	r3, #69	@ 0x45
 800742a:	4259      	negs	r1, r3
 800742c:	414b      	adcs	r3, r1
 800742e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8007430:	3a01      	subs	r2, #1
 8007432:	18cb      	adds	r3, r1, r3
 8007434:	9310      	str	r3, [sp, #64]	@ 0x40
 8007436:	ab09      	add	r3, sp, #36	@ 0x24
 8007438:	9304      	str	r3, [sp, #16]
 800743a:	ab08      	add	r3, sp, #32
 800743c:	9303      	str	r3, [sp, #12]
 800743e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007440:	9200      	str	r2, [sp, #0]
 8007442:	9302      	str	r3, [sp, #8]
 8007444:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007446:	0032      	movs	r2, r6
 8007448:	9301      	str	r3, [sp, #4]
 800744a:	003b      	movs	r3, r7
 800744c:	f000 fed2 	bl	80081f4 <_dtoa_r>
 8007450:	0004      	movs	r4, r0
 8007452:	2d47      	cmp	r5, #71	@ 0x47
 8007454:	d11b      	bne.n	800748e <__cvt+0x90>
 8007456:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007458:	07db      	lsls	r3, r3, #31
 800745a:	d511      	bpl.n	8007480 <__cvt+0x82>
 800745c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800745e:	18c3      	adds	r3, r0, r3
 8007460:	9307      	str	r3, [sp, #28]
 8007462:	2200      	movs	r2, #0
 8007464:	2300      	movs	r3, #0
 8007466:	0030      	movs	r0, r6
 8007468:	0039      	movs	r1, r7
 800746a:	f7f8 ffef 	bl	800044c <__aeabi_dcmpeq>
 800746e:	2800      	cmp	r0, #0
 8007470:	d001      	beq.n	8007476 <__cvt+0x78>
 8007472:	9b07      	ldr	r3, [sp, #28]
 8007474:	9309      	str	r3, [sp, #36]	@ 0x24
 8007476:	2230      	movs	r2, #48	@ 0x30
 8007478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800747a:	9907      	ldr	r1, [sp, #28]
 800747c:	428b      	cmp	r3, r1
 800747e:	d320      	bcc.n	80074c2 <__cvt+0xc4>
 8007480:	0020      	movs	r0, r4
 8007482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007484:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007486:	1b1b      	subs	r3, r3, r4
 8007488:	6013      	str	r3, [r2, #0]
 800748a:	b00b      	add	sp, #44	@ 0x2c
 800748c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800748e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007490:	18c3      	adds	r3, r0, r3
 8007492:	9307      	str	r3, [sp, #28]
 8007494:	2d46      	cmp	r5, #70	@ 0x46
 8007496:	d1e4      	bne.n	8007462 <__cvt+0x64>
 8007498:	7803      	ldrb	r3, [r0, #0]
 800749a:	2b30      	cmp	r3, #48	@ 0x30
 800749c:	d10c      	bne.n	80074b8 <__cvt+0xba>
 800749e:	2200      	movs	r2, #0
 80074a0:	2300      	movs	r3, #0
 80074a2:	0030      	movs	r0, r6
 80074a4:	0039      	movs	r1, r7
 80074a6:	f7f8 ffd1 	bl	800044c <__aeabi_dcmpeq>
 80074aa:	2800      	cmp	r0, #0
 80074ac:	d104      	bne.n	80074b8 <__cvt+0xba>
 80074ae:	2301      	movs	r3, #1
 80074b0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80074b2:	1a9b      	subs	r3, r3, r2
 80074b4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80074b6:	6013      	str	r3, [r2, #0]
 80074b8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80074ba:	9a07      	ldr	r2, [sp, #28]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	18d3      	adds	r3, r2, r3
 80074c0:	e7ce      	b.n	8007460 <__cvt+0x62>
 80074c2:	1c59      	adds	r1, r3, #1
 80074c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80074c6:	701a      	strb	r2, [r3, #0]
 80074c8:	e7d6      	b.n	8007478 <__cvt+0x7a>

080074ca <__exponent>:
 80074ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074cc:	232b      	movs	r3, #43	@ 0x2b
 80074ce:	0005      	movs	r5, r0
 80074d0:	000c      	movs	r4, r1
 80074d2:	b085      	sub	sp, #20
 80074d4:	7002      	strb	r2, [r0, #0]
 80074d6:	2900      	cmp	r1, #0
 80074d8:	da01      	bge.n	80074de <__exponent+0x14>
 80074da:	424c      	negs	r4, r1
 80074dc:	3302      	adds	r3, #2
 80074de:	706b      	strb	r3, [r5, #1]
 80074e0:	2c09      	cmp	r4, #9
 80074e2:	dd2c      	ble.n	800753e <__exponent+0x74>
 80074e4:	ab02      	add	r3, sp, #8
 80074e6:	1dde      	adds	r6, r3, #7
 80074e8:	0020      	movs	r0, r4
 80074ea:	210a      	movs	r1, #10
 80074ec:	f7f8 ff98 	bl	8000420 <__aeabi_idivmod>
 80074f0:	0037      	movs	r7, r6
 80074f2:	3130      	adds	r1, #48	@ 0x30
 80074f4:	3e01      	subs	r6, #1
 80074f6:	0020      	movs	r0, r4
 80074f8:	7031      	strb	r1, [r6, #0]
 80074fa:	210a      	movs	r1, #10
 80074fc:	9401      	str	r4, [sp, #4]
 80074fe:	f7f8 fea9 	bl	8000254 <__divsi3>
 8007502:	9b01      	ldr	r3, [sp, #4]
 8007504:	0004      	movs	r4, r0
 8007506:	2b63      	cmp	r3, #99	@ 0x63
 8007508:	dcee      	bgt.n	80074e8 <__exponent+0x1e>
 800750a:	1eba      	subs	r2, r7, #2
 800750c:	1ca8      	adds	r0, r5, #2
 800750e:	0001      	movs	r1, r0
 8007510:	0013      	movs	r3, r2
 8007512:	3430      	adds	r4, #48	@ 0x30
 8007514:	7014      	strb	r4, [r2, #0]
 8007516:	ac02      	add	r4, sp, #8
 8007518:	3407      	adds	r4, #7
 800751a:	429c      	cmp	r4, r3
 800751c:	d80a      	bhi.n	8007534 <__exponent+0x6a>
 800751e:	2300      	movs	r3, #0
 8007520:	42a2      	cmp	r2, r4
 8007522:	d803      	bhi.n	800752c <__exponent+0x62>
 8007524:	3309      	adds	r3, #9
 8007526:	aa02      	add	r2, sp, #8
 8007528:	189b      	adds	r3, r3, r2
 800752a:	1bdb      	subs	r3, r3, r7
 800752c:	18c0      	adds	r0, r0, r3
 800752e:	1b40      	subs	r0, r0, r5
 8007530:	b005      	add	sp, #20
 8007532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007534:	781c      	ldrb	r4, [r3, #0]
 8007536:	3301      	adds	r3, #1
 8007538:	700c      	strb	r4, [r1, #0]
 800753a:	3101      	adds	r1, #1
 800753c:	e7eb      	b.n	8007516 <__exponent+0x4c>
 800753e:	2330      	movs	r3, #48	@ 0x30
 8007540:	18e4      	adds	r4, r4, r3
 8007542:	70ab      	strb	r3, [r5, #2]
 8007544:	1d28      	adds	r0, r5, #4
 8007546:	70ec      	strb	r4, [r5, #3]
 8007548:	e7f1      	b.n	800752e <__exponent+0x64>
	...

0800754c <_printf_float>:
 800754c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800754e:	b097      	sub	sp, #92	@ 0x5c
 8007550:	000d      	movs	r5, r1
 8007552:	920a      	str	r2, [sp, #40]	@ 0x28
 8007554:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8007556:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007558:	9009      	str	r0, [sp, #36]	@ 0x24
 800755a:	f000 fd33 	bl	8007fc4 <_localeconv_r>
 800755e:	6803      	ldr	r3, [r0, #0]
 8007560:	0018      	movs	r0, r3
 8007562:	930d      	str	r3, [sp, #52]	@ 0x34
 8007564:	f7f8 fdd0 	bl	8000108 <strlen>
 8007568:	2300      	movs	r3, #0
 800756a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800756c:	9314      	str	r3, [sp, #80]	@ 0x50
 800756e:	7e2b      	ldrb	r3, [r5, #24]
 8007570:	2207      	movs	r2, #7
 8007572:	930c      	str	r3, [sp, #48]	@ 0x30
 8007574:	682b      	ldr	r3, [r5, #0]
 8007576:	930e      	str	r3, [sp, #56]	@ 0x38
 8007578:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800757a:	6823      	ldr	r3, [r4, #0]
 800757c:	05c9      	lsls	r1, r1, #23
 800757e:	d545      	bpl.n	800760c <_printf_float+0xc0>
 8007580:	189b      	adds	r3, r3, r2
 8007582:	4393      	bics	r3, r2
 8007584:	001a      	movs	r2, r3
 8007586:	3208      	adds	r2, #8
 8007588:	6022      	str	r2, [r4, #0]
 800758a:	2201      	movs	r2, #1
 800758c:	681e      	ldr	r6, [r3, #0]
 800758e:	685f      	ldr	r7, [r3, #4]
 8007590:	007b      	lsls	r3, r7, #1
 8007592:	085b      	lsrs	r3, r3, #1
 8007594:	9311      	str	r3, [sp, #68]	@ 0x44
 8007596:	9610      	str	r6, [sp, #64]	@ 0x40
 8007598:	64ae      	str	r6, [r5, #72]	@ 0x48
 800759a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800759c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800759e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80075a0:	4ba7      	ldr	r3, [pc, #668]	@ (8007840 <_printf_float+0x2f4>)
 80075a2:	4252      	negs	r2, r2
 80075a4:	f7fa fea6 	bl	80022f4 <__aeabi_dcmpun>
 80075a8:	2800      	cmp	r0, #0
 80075aa:	d131      	bne.n	8007610 <_printf_float+0xc4>
 80075ac:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80075ae:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80075b0:	2201      	movs	r2, #1
 80075b2:	4ba3      	ldr	r3, [pc, #652]	@ (8007840 <_printf_float+0x2f4>)
 80075b4:	4252      	negs	r2, r2
 80075b6:	f7f8 ff59 	bl	800046c <__aeabi_dcmple>
 80075ba:	2800      	cmp	r0, #0
 80075bc:	d128      	bne.n	8007610 <_printf_float+0xc4>
 80075be:	2200      	movs	r2, #0
 80075c0:	2300      	movs	r3, #0
 80075c2:	0030      	movs	r0, r6
 80075c4:	0039      	movs	r1, r7
 80075c6:	f7f8 ff47 	bl	8000458 <__aeabi_dcmplt>
 80075ca:	2800      	cmp	r0, #0
 80075cc:	d003      	beq.n	80075d6 <_printf_float+0x8a>
 80075ce:	002b      	movs	r3, r5
 80075d0:	222d      	movs	r2, #45	@ 0x2d
 80075d2:	3343      	adds	r3, #67	@ 0x43
 80075d4:	701a      	strb	r2, [r3, #0]
 80075d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075d8:	4f9a      	ldr	r7, [pc, #616]	@ (8007844 <_printf_float+0x2f8>)
 80075da:	2b47      	cmp	r3, #71	@ 0x47
 80075dc:	d900      	bls.n	80075e0 <_printf_float+0x94>
 80075de:	4f9a      	ldr	r7, [pc, #616]	@ (8007848 <_printf_float+0x2fc>)
 80075e0:	2303      	movs	r3, #3
 80075e2:	2400      	movs	r4, #0
 80075e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075e6:	612b      	str	r3, [r5, #16]
 80075e8:	3301      	adds	r3, #1
 80075ea:	439a      	bics	r2, r3
 80075ec:	602a      	str	r2, [r5, #0]
 80075ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075f0:	0029      	movs	r1, r5
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075f8:	aa15      	add	r2, sp, #84	@ 0x54
 80075fa:	f000 f9e5 	bl	80079c8 <_printf_common>
 80075fe:	3001      	adds	r0, #1
 8007600:	d000      	beq.n	8007604 <_printf_float+0xb8>
 8007602:	e09f      	b.n	8007744 <_printf_float+0x1f8>
 8007604:	2001      	movs	r0, #1
 8007606:	4240      	negs	r0, r0
 8007608:	b017      	add	sp, #92	@ 0x5c
 800760a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800760c:	3307      	adds	r3, #7
 800760e:	e7b8      	b.n	8007582 <_printf_float+0x36>
 8007610:	0032      	movs	r2, r6
 8007612:	003b      	movs	r3, r7
 8007614:	0030      	movs	r0, r6
 8007616:	0039      	movs	r1, r7
 8007618:	f7fa fe6c 	bl	80022f4 <__aeabi_dcmpun>
 800761c:	2800      	cmp	r0, #0
 800761e:	d00b      	beq.n	8007638 <_printf_float+0xec>
 8007620:	2f00      	cmp	r7, #0
 8007622:	da03      	bge.n	800762c <_printf_float+0xe0>
 8007624:	002b      	movs	r3, r5
 8007626:	222d      	movs	r2, #45	@ 0x2d
 8007628:	3343      	adds	r3, #67	@ 0x43
 800762a:	701a      	strb	r2, [r3, #0]
 800762c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800762e:	4f87      	ldr	r7, [pc, #540]	@ (800784c <_printf_float+0x300>)
 8007630:	2b47      	cmp	r3, #71	@ 0x47
 8007632:	d9d5      	bls.n	80075e0 <_printf_float+0x94>
 8007634:	4f86      	ldr	r7, [pc, #536]	@ (8007850 <_printf_float+0x304>)
 8007636:	e7d3      	b.n	80075e0 <_printf_float+0x94>
 8007638:	2220      	movs	r2, #32
 800763a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800763c:	686b      	ldr	r3, [r5, #4]
 800763e:	4394      	bics	r4, r2
 8007640:	1c5a      	adds	r2, r3, #1
 8007642:	d146      	bne.n	80076d2 <_printf_float+0x186>
 8007644:	3307      	adds	r3, #7
 8007646:	606b      	str	r3, [r5, #4]
 8007648:	2380      	movs	r3, #128	@ 0x80
 800764a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800764c:	00db      	lsls	r3, r3, #3
 800764e:	4313      	orrs	r3, r2
 8007650:	2200      	movs	r2, #0
 8007652:	602b      	str	r3, [r5, #0]
 8007654:	9206      	str	r2, [sp, #24]
 8007656:	aa14      	add	r2, sp, #80	@ 0x50
 8007658:	9205      	str	r2, [sp, #20]
 800765a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800765c:	a90a      	add	r1, sp, #40	@ 0x28
 800765e:	9204      	str	r2, [sp, #16]
 8007660:	aa13      	add	r2, sp, #76	@ 0x4c
 8007662:	9203      	str	r2, [sp, #12]
 8007664:	2223      	movs	r2, #35	@ 0x23
 8007666:	1852      	adds	r2, r2, r1
 8007668:	9202      	str	r2, [sp, #8]
 800766a:	9301      	str	r3, [sp, #4]
 800766c:	686b      	ldr	r3, [r5, #4]
 800766e:	0032      	movs	r2, r6
 8007670:	9300      	str	r3, [sp, #0]
 8007672:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007674:	003b      	movs	r3, r7
 8007676:	f7ff fec2 	bl	80073fe <__cvt>
 800767a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800767c:	0007      	movs	r7, r0
 800767e:	2c47      	cmp	r4, #71	@ 0x47
 8007680:	d12d      	bne.n	80076de <_printf_float+0x192>
 8007682:	1cd3      	adds	r3, r2, #3
 8007684:	db02      	blt.n	800768c <_printf_float+0x140>
 8007686:	686b      	ldr	r3, [r5, #4]
 8007688:	429a      	cmp	r2, r3
 800768a:	dd48      	ble.n	800771e <_printf_float+0x1d2>
 800768c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800768e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007690:	3b02      	subs	r3, #2
 8007692:	b2db      	uxtb	r3, r3
 8007694:	930c      	str	r3, [sp, #48]	@ 0x30
 8007696:	0028      	movs	r0, r5
 8007698:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800769a:	3901      	subs	r1, #1
 800769c:	3050      	adds	r0, #80	@ 0x50
 800769e:	9113      	str	r1, [sp, #76]	@ 0x4c
 80076a0:	f7ff ff13 	bl	80074ca <__exponent>
 80076a4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80076a6:	0004      	movs	r4, r0
 80076a8:	1813      	adds	r3, r2, r0
 80076aa:	612b      	str	r3, [r5, #16]
 80076ac:	2a01      	cmp	r2, #1
 80076ae:	dc02      	bgt.n	80076b6 <_printf_float+0x16a>
 80076b0:	682a      	ldr	r2, [r5, #0]
 80076b2:	07d2      	lsls	r2, r2, #31
 80076b4:	d501      	bpl.n	80076ba <_printf_float+0x16e>
 80076b6:	3301      	adds	r3, #1
 80076b8:	612b      	str	r3, [r5, #16]
 80076ba:	2323      	movs	r3, #35	@ 0x23
 80076bc:	aa0a      	add	r2, sp, #40	@ 0x28
 80076be:	189b      	adds	r3, r3, r2
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d100      	bne.n	80076c8 <_printf_float+0x17c>
 80076c6:	e792      	b.n	80075ee <_printf_float+0xa2>
 80076c8:	002b      	movs	r3, r5
 80076ca:	222d      	movs	r2, #45	@ 0x2d
 80076cc:	3343      	adds	r3, #67	@ 0x43
 80076ce:	701a      	strb	r2, [r3, #0]
 80076d0:	e78d      	b.n	80075ee <_printf_float+0xa2>
 80076d2:	2c47      	cmp	r4, #71	@ 0x47
 80076d4:	d1b8      	bne.n	8007648 <_printf_float+0xfc>
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1b6      	bne.n	8007648 <_printf_float+0xfc>
 80076da:	3301      	adds	r3, #1
 80076dc:	e7b3      	b.n	8007646 <_printf_float+0xfa>
 80076de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80076e0:	0011      	movs	r1, r2
 80076e2:	2b65      	cmp	r3, #101	@ 0x65
 80076e4:	d9d7      	bls.n	8007696 <_printf_float+0x14a>
 80076e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80076e8:	2b66      	cmp	r3, #102	@ 0x66
 80076ea:	d11a      	bne.n	8007722 <_printf_float+0x1d6>
 80076ec:	686b      	ldr	r3, [r5, #4]
 80076ee:	2a00      	cmp	r2, #0
 80076f0:	dd09      	ble.n	8007706 <_printf_float+0x1ba>
 80076f2:	612a      	str	r2, [r5, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d102      	bne.n	80076fe <_printf_float+0x1b2>
 80076f8:	6829      	ldr	r1, [r5, #0]
 80076fa:	07c9      	lsls	r1, r1, #31
 80076fc:	d50b      	bpl.n	8007716 <_printf_float+0x1ca>
 80076fe:	3301      	adds	r3, #1
 8007700:	189b      	adds	r3, r3, r2
 8007702:	612b      	str	r3, [r5, #16]
 8007704:	e007      	b.n	8007716 <_printf_float+0x1ca>
 8007706:	2b00      	cmp	r3, #0
 8007708:	d103      	bne.n	8007712 <_printf_float+0x1c6>
 800770a:	2201      	movs	r2, #1
 800770c:	6829      	ldr	r1, [r5, #0]
 800770e:	4211      	tst	r1, r2
 8007710:	d000      	beq.n	8007714 <_printf_float+0x1c8>
 8007712:	1c9a      	adds	r2, r3, #2
 8007714:	612a      	str	r2, [r5, #16]
 8007716:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007718:	2400      	movs	r4, #0
 800771a:	65ab      	str	r3, [r5, #88]	@ 0x58
 800771c:	e7cd      	b.n	80076ba <_printf_float+0x16e>
 800771e:	2367      	movs	r3, #103	@ 0x67
 8007720:	930c      	str	r3, [sp, #48]	@ 0x30
 8007722:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007724:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007726:	4299      	cmp	r1, r3
 8007728:	db06      	blt.n	8007738 <_printf_float+0x1ec>
 800772a:	682b      	ldr	r3, [r5, #0]
 800772c:	6129      	str	r1, [r5, #16]
 800772e:	07db      	lsls	r3, r3, #31
 8007730:	d5f1      	bpl.n	8007716 <_printf_float+0x1ca>
 8007732:	3101      	adds	r1, #1
 8007734:	6129      	str	r1, [r5, #16]
 8007736:	e7ee      	b.n	8007716 <_printf_float+0x1ca>
 8007738:	2201      	movs	r2, #1
 800773a:	2900      	cmp	r1, #0
 800773c:	dce0      	bgt.n	8007700 <_printf_float+0x1b4>
 800773e:	1892      	adds	r2, r2, r2
 8007740:	1a52      	subs	r2, r2, r1
 8007742:	e7dd      	b.n	8007700 <_printf_float+0x1b4>
 8007744:	682a      	ldr	r2, [r5, #0]
 8007746:	0553      	lsls	r3, r2, #21
 8007748:	d408      	bmi.n	800775c <_printf_float+0x210>
 800774a:	692b      	ldr	r3, [r5, #16]
 800774c:	003a      	movs	r2, r7
 800774e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007750:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007752:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007754:	47a0      	blx	r4
 8007756:	3001      	adds	r0, #1
 8007758:	d129      	bne.n	80077ae <_printf_float+0x262>
 800775a:	e753      	b.n	8007604 <_printf_float+0xb8>
 800775c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800775e:	2b65      	cmp	r3, #101	@ 0x65
 8007760:	d800      	bhi.n	8007764 <_printf_float+0x218>
 8007762:	e0da      	b.n	800791a <_printf_float+0x3ce>
 8007764:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8007766:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8007768:	2200      	movs	r2, #0
 800776a:	2300      	movs	r3, #0
 800776c:	f7f8 fe6e 	bl	800044c <__aeabi_dcmpeq>
 8007770:	2800      	cmp	r0, #0
 8007772:	d033      	beq.n	80077dc <_printf_float+0x290>
 8007774:	2301      	movs	r3, #1
 8007776:	4a37      	ldr	r2, [pc, #220]	@ (8007854 <_printf_float+0x308>)
 8007778:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800777a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800777c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800777e:	47a0      	blx	r4
 8007780:	3001      	adds	r0, #1
 8007782:	d100      	bne.n	8007786 <_printf_float+0x23a>
 8007784:	e73e      	b.n	8007604 <_printf_float+0xb8>
 8007786:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8007788:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800778a:	42b3      	cmp	r3, r6
 800778c:	db02      	blt.n	8007794 <_printf_float+0x248>
 800778e:	682b      	ldr	r3, [r5, #0]
 8007790:	07db      	lsls	r3, r3, #31
 8007792:	d50c      	bpl.n	80077ae <_printf_float+0x262>
 8007794:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007796:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007798:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800779a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800779c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800779e:	47a0      	blx	r4
 80077a0:	2400      	movs	r4, #0
 80077a2:	3001      	adds	r0, #1
 80077a4:	d100      	bne.n	80077a8 <_printf_float+0x25c>
 80077a6:	e72d      	b.n	8007604 <_printf_float+0xb8>
 80077a8:	1e73      	subs	r3, r6, #1
 80077aa:	42a3      	cmp	r3, r4
 80077ac:	dc0a      	bgt.n	80077c4 <_printf_float+0x278>
 80077ae:	682b      	ldr	r3, [r5, #0]
 80077b0:	079b      	lsls	r3, r3, #30
 80077b2:	d500      	bpl.n	80077b6 <_printf_float+0x26a>
 80077b4:	e105      	b.n	80079c2 <_printf_float+0x476>
 80077b6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80077b8:	68e8      	ldr	r0, [r5, #12]
 80077ba:	4298      	cmp	r0, r3
 80077bc:	db00      	blt.n	80077c0 <_printf_float+0x274>
 80077be:	e723      	b.n	8007608 <_printf_float+0xbc>
 80077c0:	0018      	movs	r0, r3
 80077c2:	e721      	b.n	8007608 <_printf_float+0xbc>
 80077c4:	002a      	movs	r2, r5
 80077c6:	2301      	movs	r3, #1
 80077c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80077ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077cc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80077ce:	321a      	adds	r2, #26
 80077d0:	47b8      	blx	r7
 80077d2:	3001      	adds	r0, #1
 80077d4:	d100      	bne.n	80077d8 <_printf_float+0x28c>
 80077d6:	e715      	b.n	8007604 <_printf_float+0xb8>
 80077d8:	3401      	adds	r4, #1
 80077da:	e7e5      	b.n	80077a8 <_printf_float+0x25c>
 80077dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80077de:	2b00      	cmp	r3, #0
 80077e0:	dc3a      	bgt.n	8007858 <_printf_float+0x30c>
 80077e2:	2301      	movs	r3, #1
 80077e4:	4a1b      	ldr	r2, [pc, #108]	@ (8007854 <_printf_float+0x308>)
 80077e6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80077e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077ea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80077ec:	47a0      	blx	r4
 80077ee:	3001      	adds	r0, #1
 80077f0:	d100      	bne.n	80077f4 <_printf_float+0x2a8>
 80077f2:	e707      	b.n	8007604 <_printf_float+0xb8>
 80077f4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80077f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80077f8:	4333      	orrs	r3, r6
 80077fa:	d102      	bne.n	8007802 <_printf_float+0x2b6>
 80077fc:	682b      	ldr	r3, [r5, #0]
 80077fe:	07db      	lsls	r3, r3, #31
 8007800:	d5d5      	bpl.n	80077ae <_printf_float+0x262>
 8007802:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007804:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007806:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007808:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800780a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800780c:	47a0      	blx	r4
 800780e:	2300      	movs	r3, #0
 8007810:	3001      	adds	r0, #1
 8007812:	d100      	bne.n	8007816 <_printf_float+0x2ca>
 8007814:	e6f6      	b.n	8007604 <_printf_float+0xb8>
 8007816:	930c      	str	r3, [sp, #48]	@ 0x30
 8007818:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800781a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800781c:	425b      	negs	r3, r3
 800781e:	4293      	cmp	r3, r2
 8007820:	dc01      	bgt.n	8007826 <_printf_float+0x2da>
 8007822:	0033      	movs	r3, r6
 8007824:	e792      	b.n	800774c <_printf_float+0x200>
 8007826:	002a      	movs	r2, r5
 8007828:	2301      	movs	r3, #1
 800782a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800782c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800782e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007830:	321a      	adds	r2, #26
 8007832:	47a0      	blx	r4
 8007834:	3001      	adds	r0, #1
 8007836:	d100      	bne.n	800783a <_printf_float+0x2ee>
 8007838:	e6e4      	b.n	8007604 <_printf_float+0xb8>
 800783a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800783c:	3301      	adds	r3, #1
 800783e:	e7ea      	b.n	8007816 <_printf_float+0x2ca>
 8007840:	7fefffff 	.word	0x7fefffff
 8007844:	0800a4a8 	.word	0x0800a4a8
 8007848:	0800a4ac 	.word	0x0800a4ac
 800784c:	0800a4b0 	.word	0x0800a4b0
 8007850:	0800a4b4 	.word	0x0800a4b4
 8007854:	0800a4b8 	.word	0x0800a4b8
 8007858:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800785a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800785c:	930c      	str	r3, [sp, #48]	@ 0x30
 800785e:	429e      	cmp	r6, r3
 8007860:	dd00      	ble.n	8007864 <_printf_float+0x318>
 8007862:	001e      	movs	r6, r3
 8007864:	2e00      	cmp	r6, #0
 8007866:	dc31      	bgt.n	80078cc <_printf_float+0x380>
 8007868:	43f3      	mvns	r3, r6
 800786a:	2400      	movs	r4, #0
 800786c:	17db      	asrs	r3, r3, #31
 800786e:	4033      	ands	r3, r6
 8007870:	930e      	str	r3, [sp, #56]	@ 0x38
 8007872:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8007874:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007876:	1af3      	subs	r3, r6, r3
 8007878:	42a3      	cmp	r3, r4
 800787a:	dc30      	bgt.n	80078de <_printf_float+0x392>
 800787c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800787e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007880:	429a      	cmp	r2, r3
 8007882:	dc38      	bgt.n	80078f6 <_printf_float+0x3aa>
 8007884:	682b      	ldr	r3, [r5, #0]
 8007886:	07db      	lsls	r3, r3, #31
 8007888:	d435      	bmi.n	80078f6 <_printf_float+0x3aa>
 800788a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800788c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800788e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007890:	1b9b      	subs	r3, r3, r6
 8007892:	1b14      	subs	r4, r2, r4
 8007894:	429c      	cmp	r4, r3
 8007896:	dd00      	ble.n	800789a <_printf_float+0x34e>
 8007898:	001c      	movs	r4, r3
 800789a:	2c00      	cmp	r4, #0
 800789c:	dc34      	bgt.n	8007908 <_printf_float+0x3bc>
 800789e:	43e3      	mvns	r3, r4
 80078a0:	2600      	movs	r6, #0
 80078a2:	17db      	asrs	r3, r3, #31
 80078a4:	401c      	ands	r4, r3
 80078a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80078a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	1b1b      	subs	r3, r3, r4
 80078ae:	42b3      	cmp	r3, r6
 80078b0:	dc00      	bgt.n	80078b4 <_printf_float+0x368>
 80078b2:	e77c      	b.n	80077ae <_printf_float+0x262>
 80078b4:	002a      	movs	r2, r5
 80078b6:	2301      	movs	r3, #1
 80078b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80078ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078bc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80078be:	321a      	adds	r2, #26
 80078c0:	47b8      	blx	r7
 80078c2:	3001      	adds	r0, #1
 80078c4:	d100      	bne.n	80078c8 <_printf_float+0x37c>
 80078c6:	e69d      	b.n	8007604 <_printf_float+0xb8>
 80078c8:	3601      	adds	r6, #1
 80078ca:	e7ec      	b.n	80078a6 <_printf_float+0x35a>
 80078cc:	0033      	movs	r3, r6
 80078ce:	003a      	movs	r2, r7
 80078d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80078d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078d4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80078d6:	47a0      	blx	r4
 80078d8:	3001      	adds	r0, #1
 80078da:	d1c5      	bne.n	8007868 <_printf_float+0x31c>
 80078dc:	e692      	b.n	8007604 <_printf_float+0xb8>
 80078de:	002a      	movs	r2, r5
 80078e0:	2301      	movs	r3, #1
 80078e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80078e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078e6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80078e8:	321a      	adds	r2, #26
 80078ea:	47b0      	blx	r6
 80078ec:	3001      	adds	r0, #1
 80078ee:	d100      	bne.n	80078f2 <_printf_float+0x3a6>
 80078f0:	e688      	b.n	8007604 <_printf_float+0xb8>
 80078f2:	3401      	adds	r4, #1
 80078f4:	e7bd      	b.n	8007872 <_printf_float+0x326>
 80078f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80078fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80078fc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078fe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8007900:	47a0      	blx	r4
 8007902:	3001      	adds	r0, #1
 8007904:	d1c1      	bne.n	800788a <_printf_float+0x33e>
 8007906:	e67d      	b.n	8007604 <_printf_float+0xb8>
 8007908:	19ba      	adds	r2, r7, r6
 800790a:	0023      	movs	r3, r4
 800790c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800790e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007910:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007912:	47b0      	blx	r6
 8007914:	3001      	adds	r0, #1
 8007916:	d1c2      	bne.n	800789e <_printf_float+0x352>
 8007918:	e674      	b.n	8007604 <_printf_float+0xb8>
 800791a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800791c:	930c      	str	r3, [sp, #48]	@ 0x30
 800791e:	2b01      	cmp	r3, #1
 8007920:	dc02      	bgt.n	8007928 <_printf_float+0x3dc>
 8007922:	2301      	movs	r3, #1
 8007924:	421a      	tst	r2, r3
 8007926:	d039      	beq.n	800799c <_printf_float+0x450>
 8007928:	2301      	movs	r3, #1
 800792a:	003a      	movs	r2, r7
 800792c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800792e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007930:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007932:	47b0      	blx	r6
 8007934:	3001      	adds	r0, #1
 8007936:	d100      	bne.n	800793a <_printf_float+0x3ee>
 8007938:	e664      	b.n	8007604 <_printf_float+0xb8>
 800793a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800793c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800793e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007940:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007942:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007944:	47b0      	blx	r6
 8007946:	3001      	adds	r0, #1
 8007948:	d100      	bne.n	800794c <_printf_float+0x400>
 800794a:	e65b      	b.n	8007604 <_printf_float+0xb8>
 800794c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800794e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8007950:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007952:	2200      	movs	r2, #0
 8007954:	3b01      	subs	r3, #1
 8007956:	930c      	str	r3, [sp, #48]	@ 0x30
 8007958:	2300      	movs	r3, #0
 800795a:	f7f8 fd77 	bl	800044c <__aeabi_dcmpeq>
 800795e:	2800      	cmp	r0, #0
 8007960:	d11a      	bne.n	8007998 <_printf_float+0x44c>
 8007962:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007964:	1c7a      	adds	r2, r7, #1
 8007966:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007968:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800796a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800796c:	47b0      	blx	r6
 800796e:	3001      	adds	r0, #1
 8007970:	d10e      	bne.n	8007990 <_printf_float+0x444>
 8007972:	e647      	b.n	8007604 <_printf_float+0xb8>
 8007974:	002a      	movs	r2, r5
 8007976:	2301      	movs	r3, #1
 8007978:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800797a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800797c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800797e:	321a      	adds	r2, #26
 8007980:	47b8      	blx	r7
 8007982:	3001      	adds	r0, #1
 8007984:	d100      	bne.n	8007988 <_printf_float+0x43c>
 8007986:	e63d      	b.n	8007604 <_printf_float+0xb8>
 8007988:	3601      	adds	r6, #1
 800798a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800798c:	429e      	cmp	r6, r3
 800798e:	dbf1      	blt.n	8007974 <_printf_float+0x428>
 8007990:	002a      	movs	r2, r5
 8007992:	0023      	movs	r3, r4
 8007994:	3250      	adds	r2, #80	@ 0x50
 8007996:	e6da      	b.n	800774e <_printf_float+0x202>
 8007998:	2600      	movs	r6, #0
 800799a:	e7f6      	b.n	800798a <_printf_float+0x43e>
 800799c:	003a      	movs	r2, r7
 800799e:	e7e2      	b.n	8007966 <_printf_float+0x41a>
 80079a0:	002a      	movs	r2, r5
 80079a2:	2301      	movs	r3, #1
 80079a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80079a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079a8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80079aa:	3219      	adds	r2, #25
 80079ac:	47b0      	blx	r6
 80079ae:	3001      	adds	r0, #1
 80079b0:	d100      	bne.n	80079b4 <_printf_float+0x468>
 80079b2:	e627      	b.n	8007604 <_printf_float+0xb8>
 80079b4:	3401      	adds	r4, #1
 80079b6:	68eb      	ldr	r3, [r5, #12]
 80079b8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80079ba:	1a9b      	subs	r3, r3, r2
 80079bc:	42a3      	cmp	r3, r4
 80079be:	dcef      	bgt.n	80079a0 <_printf_float+0x454>
 80079c0:	e6f9      	b.n	80077b6 <_printf_float+0x26a>
 80079c2:	2400      	movs	r4, #0
 80079c4:	e7f7      	b.n	80079b6 <_printf_float+0x46a>
 80079c6:	46c0      	nop			@ (mov r8, r8)

080079c8 <_printf_common>:
 80079c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079ca:	0016      	movs	r6, r2
 80079cc:	9301      	str	r3, [sp, #4]
 80079ce:	688a      	ldr	r2, [r1, #8]
 80079d0:	690b      	ldr	r3, [r1, #16]
 80079d2:	000c      	movs	r4, r1
 80079d4:	9000      	str	r0, [sp, #0]
 80079d6:	4293      	cmp	r3, r2
 80079d8:	da00      	bge.n	80079dc <_printf_common+0x14>
 80079da:	0013      	movs	r3, r2
 80079dc:	0022      	movs	r2, r4
 80079de:	6033      	str	r3, [r6, #0]
 80079e0:	3243      	adds	r2, #67	@ 0x43
 80079e2:	7812      	ldrb	r2, [r2, #0]
 80079e4:	2a00      	cmp	r2, #0
 80079e6:	d001      	beq.n	80079ec <_printf_common+0x24>
 80079e8:	3301      	adds	r3, #1
 80079ea:	6033      	str	r3, [r6, #0]
 80079ec:	6823      	ldr	r3, [r4, #0]
 80079ee:	069b      	lsls	r3, r3, #26
 80079f0:	d502      	bpl.n	80079f8 <_printf_common+0x30>
 80079f2:	6833      	ldr	r3, [r6, #0]
 80079f4:	3302      	adds	r3, #2
 80079f6:	6033      	str	r3, [r6, #0]
 80079f8:	6822      	ldr	r2, [r4, #0]
 80079fa:	2306      	movs	r3, #6
 80079fc:	0015      	movs	r5, r2
 80079fe:	401d      	ands	r5, r3
 8007a00:	421a      	tst	r2, r3
 8007a02:	d027      	beq.n	8007a54 <_printf_common+0x8c>
 8007a04:	0023      	movs	r3, r4
 8007a06:	3343      	adds	r3, #67	@ 0x43
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	1e5a      	subs	r2, r3, #1
 8007a0c:	4193      	sbcs	r3, r2
 8007a0e:	6822      	ldr	r2, [r4, #0]
 8007a10:	0692      	lsls	r2, r2, #26
 8007a12:	d430      	bmi.n	8007a76 <_printf_common+0xae>
 8007a14:	0022      	movs	r2, r4
 8007a16:	9901      	ldr	r1, [sp, #4]
 8007a18:	9800      	ldr	r0, [sp, #0]
 8007a1a:	9d08      	ldr	r5, [sp, #32]
 8007a1c:	3243      	adds	r2, #67	@ 0x43
 8007a1e:	47a8      	blx	r5
 8007a20:	3001      	adds	r0, #1
 8007a22:	d025      	beq.n	8007a70 <_printf_common+0xa8>
 8007a24:	2206      	movs	r2, #6
 8007a26:	6823      	ldr	r3, [r4, #0]
 8007a28:	2500      	movs	r5, #0
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	2b04      	cmp	r3, #4
 8007a2e:	d105      	bne.n	8007a3c <_printf_common+0x74>
 8007a30:	6833      	ldr	r3, [r6, #0]
 8007a32:	68e5      	ldr	r5, [r4, #12]
 8007a34:	1aed      	subs	r5, r5, r3
 8007a36:	43eb      	mvns	r3, r5
 8007a38:	17db      	asrs	r3, r3, #31
 8007a3a:	401d      	ands	r5, r3
 8007a3c:	68a3      	ldr	r3, [r4, #8]
 8007a3e:	6922      	ldr	r2, [r4, #16]
 8007a40:	4293      	cmp	r3, r2
 8007a42:	dd01      	ble.n	8007a48 <_printf_common+0x80>
 8007a44:	1a9b      	subs	r3, r3, r2
 8007a46:	18ed      	adds	r5, r5, r3
 8007a48:	2600      	movs	r6, #0
 8007a4a:	42b5      	cmp	r5, r6
 8007a4c:	d120      	bne.n	8007a90 <_printf_common+0xc8>
 8007a4e:	2000      	movs	r0, #0
 8007a50:	e010      	b.n	8007a74 <_printf_common+0xac>
 8007a52:	3501      	adds	r5, #1
 8007a54:	68e3      	ldr	r3, [r4, #12]
 8007a56:	6832      	ldr	r2, [r6, #0]
 8007a58:	1a9b      	subs	r3, r3, r2
 8007a5a:	42ab      	cmp	r3, r5
 8007a5c:	ddd2      	ble.n	8007a04 <_printf_common+0x3c>
 8007a5e:	0022      	movs	r2, r4
 8007a60:	2301      	movs	r3, #1
 8007a62:	9901      	ldr	r1, [sp, #4]
 8007a64:	9800      	ldr	r0, [sp, #0]
 8007a66:	9f08      	ldr	r7, [sp, #32]
 8007a68:	3219      	adds	r2, #25
 8007a6a:	47b8      	blx	r7
 8007a6c:	3001      	adds	r0, #1
 8007a6e:	d1f0      	bne.n	8007a52 <_printf_common+0x8a>
 8007a70:	2001      	movs	r0, #1
 8007a72:	4240      	negs	r0, r0
 8007a74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007a76:	2030      	movs	r0, #48	@ 0x30
 8007a78:	18e1      	adds	r1, r4, r3
 8007a7a:	3143      	adds	r1, #67	@ 0x43
 8007a7c:	7008      	strb	r0, [r1, #0]
 8007a7e:	0021      	movs	r1, r4
 8007a80:	1c5a      	adds	r2, r3, #1
 8007a82:	3145      	adds	r1, #69	@ 0x45
 8007a84:	7809      	ldrb	r1, [r1, #0]
 8007a86:	18a2      	adds	r2, r4, r2
 8007a88:	3243      	adds	r2, #67	@ 0x43
 8007a8a:	3302      	adds	r3, #2
 8007a8c:	7011      	strb	r1, [r2, #0]
 8007a8e:	e7c1      	b.n	8007a14 <_printf_common+0x4c>
 8007a90:	0022      	movs	r2, r4
 8007a92:	2301      	movs	r3, #1
 8007a94:	9901      	ldr	r1, [sp, #4]
 8007a96:	9800      	ldr	r0, [sp, #0]
 8007a98:	9f08      	ldr	r7, [sp, #32]
 8007a9a:	321a      	adds	r2, #26
 8007a9c:	47b8      	blx	r7
 8007a9e:	3001      	adds	r0, #1
 8007aa0:	d0e6      	beq.n	8007a70 <_printf_common+0xa8>
 8007aa2:	3601      	adds	r6, #1
 8007aa4:	e7d1      	b.n	8007a4a <_printf_common+0x82>
	...

08007aa8 <_printf_i>:
 8007aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aaa:	b08b      	sub	sp, #44	@ 0x2c
 8007aac:	9206      	str	r2, [sp, #24]
 8007aae:	000a      	movs	r2, r1
 8007ab0:	3243      	adds	r2, #67	@ 0x43
 8007ab2:	9307      	str	r3, [sp, #28]
 8007ab4:	9005      	str	r0, [sp, #20]
 8007ab6:	9203      	str	r2, [sp, #12]
 8007ab8:	7e0a      	ldrb	r2, [r1, #24]
 8007aba:	000c      	movs	r4, r1
 8007abc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007abe:	2a78      	cmp	r2, #120	@ 0x78
 8007ac0:	d809      	bhi.n	8007ad6 <_printf_i+0x2e>
 8007ac2:	2a62      	cmp	r2, #98	@ 0x62
 8007ac4:	d80b      	bhi.n	8007ade <_printf_i+0x36>
 8007ac6:	2a00      	cmp	r2, #0
 8007ac8:	d100      	bne.n	8007acc <_printf_i+0x24>
 8007aca:	e0bc      	b.n	8007c46 <_printf_i+0x19e>
 8007acc:	497b      	ldr	r1, [pc, #492]	@ (8007cbc <_printf_i+0x214>)
 8007ace:	9104      	str	r1, [sp, #16]
 8007ad0:	2a58      	cmp	r2, #88	@ 0x58
 8007ad2:	d100      	bne.n	8007ad6 <_printf_i+0x2e>
 8007ad4:	e090      	b.n	8007bf8 <_printf_i+0x150>
 8007ad6:	0025      	movs	r5, r4
 8007ad8:	3542      	adds	r5, #66	@ 0x42
 8007ada:	702a      	strb	r2, [r5, #0]
 8007adc:	e022      	b.n	8007b24 <_printf_i+0x7c>
 8007ade:	0010      	movs	r0, r2
 8007ae0:	3863      	subs	r0, #99	@ 0x63
 8007ae2:	2815      	cmp	r0, #21
 8007ae4:	d8f7      	bhi.n	8007ad6 <_printf_i+0x2e>
 8007ae6:	f7f8 fb21 	bl	800012c <__gnu_thumb1_case_shi>
 8007aea:	0016      	.short	0x0016
 8007aec:	fff6001f 	.word	0xfff6001f
 8007af0:	fff6fff6 	.word	0xfff6fff6
 8007af4:	001ffff6 	.word	0x001ffff6
 8007af8:	fff6fff6 	.word	0xfff6fff6
 8007afc:	fff6fff6 	.word	0xfff6fff6
 8007b00:	003600a1 	.word	0x003600a1
 8007b04:	fff60080 	.word	0xfff60080
 8007b08:	00b2fff6 	.word	0x00b2fff6
 8007b0c:	0036fff6 	.word	0x0036fff6
 8007b10:	fff6fff6 	.word	0xfff6fff6
 8007b14:	0084      	.short	0x0084
 8007b16:	0025      	movs	r5, r4
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	3542      	adds	r5, #66	@ 0x42
 8007b1c:	1d11      	adds	r1, r2, #4
 8007b1e:	6019      	str	r1, [r3, #0]
 8007b20:	6813      	ldr	r3, [r2, #0]
 8007b22:	702b      	strb	r3, [r5, #0]
 8007b24:	2301      	movs	r3, #1
 8007b26:	e0a0      	b.n	8007c6a <_printf_i+0x1c2>
 8007b28:	6818      	ldr	r0, [r3, #0]
 8007b2a:	6809      	ldr	r1, [r1, #0]
 8007b2c:	1d02      	adds	r2, r0, #4
 8007b2e:	060d      	lsls	r5, r1, #24
 8007b30:	d50b      	bpl.n	8007b4a <_printf_i+0xa2>
 8007b32:	6806      	ldr	r6, [r0, #0]
 8007b34:	601a      	str	r2, [r3, #0]
 8007b36:	2e00      	cmp	r6, #0
 8007b38:	da03      	bge.n	8007b42 <_printf_i+0x9a>
 8007b3a:	232d      	movs	r3, #45	@ 0x2d
 8007b3c:	9a03      	ldr	r2, [sp, #12]
 8007b3e:	4276      	negs	r6, r6
 8007b40:	7013      	strb	r3, [r2, #0]
 8007b42:	4b5e      	ldr	r3, [pc, #376]	@ (8007cbc <_printf_i+0x214>)
 8007b44:	270a      	movs	r7, #10
 8007b46:	9304      	str	r3, [sp, #16]
 8007b48:	e018      	b.n	8007b7c <_printf_i+0xd4>
 8007b4a:	6806      	ldr	r6, [r0, #0]
 8007b4c:	601a      	str	r2, [r3, #0]
 8007b4e:	0649      	lsls	r1, r1, #25
 8007b50:	d5f1      	bpl.n	8007b36 <_printf_i+0x8e>
 8007b52:	b236      	sxth	r6, r6
 8007b54:	e7ef      	b.n	8007b36 <_printf_i+0x8e>
 8007b56:	6808      	ldr	r0, [r1, #0]
 8007b58:	6819      	ldr	r1, [r3, #0]
 8007b5a:	c940      	ldmia	r1!, {r6}
 8007b5c:	0605      	lsls	r5, r0, #24
 8007b5e:	d402      	bmi.n	8007b66 <_printf_i+0xbe>
 8007b60:	0640      	lsls	r0, r0, #25
 8007b62:	d500      	bpl.n	8007b66 <_printf_i+0xbe>
 8007b64:	b2b6      	uxth	r6, r6
 8007b66:	6019      	str	r1, [r3, #0]
 8007b68:	4b54      	ldr	r3, [pc, #336]	@ (8007cbc <_printf_i+0x214>)
 8007b6a:	270a      	movs	r7, #10
 8007b6c:	9304      	str	r3, [sp, #16]
 8007b6e:	2a6f      	cmp	r2, #111	@ 0x6f
 8007b70:	d100      	bne.n	8007b74 <_printf_i+0xcc>
 8007b72:	3f02      	subs	r7, #2
 8007b74:	0023      	movs	r3, r4
 8007b76:	2200      	movs	r2, #0
 8007b78:	3343      	adds	r3, #67	@ 0x43
 8007b7a:	701a      	strb	r2, [r3, #0]
 8007b7c:	6863      	ldr	r3, [r4, #4]
 8007b7e:	60a3      	str	r3, [r4, #8]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	db03      	blt.n	8007b8c <_printf_i+0xe4>
 8007b84:	2104      	movs	r1, #4
 8007b86:	6822      	ldr	r2, [r4, #0]
 8007b88:	438a      	bics	r2, r1
 8007b8a:	6022      	str	r2, [r4, #0]
 8007b8c:	2e00      	cmp	r6, #0
 8007b8e:	d102      	bne.n	8007b96 <_printf_i+0xee>
 8007b90:	9d03      	ldr	r5, [sp, #12]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00c      	beq.n	8007bb0 <_printf_i+0x108>
 8007b96:	9d03      	ldr	r5, [sp, #12]
 8007b98:	0030      	movs	r0, r6
 8007b9a:	0039      	movs	r1, r7
 8007b9c:	f7f8 fb56 	bl	800024c <__aeabi_uidivmod>
 8007ba0:	9b04      	ldr	r3, [sp, #16]
 8007ba2:	3d01      	subs	r5, #1
 8007ba4:	5c5b      	ldrb	r3, [r3, r1]
 8007ba6:	702b      	strb	r3, [r5, #0]
 8007ba8:	0033      	movs	r3, r6
 8007baa:	0006      	movs	r6, r0
 8007bac:	429f      	cmp	r7, r3
 8007bae:	d9f3      	bls.n	8007b98 <_printf_i+0xf0>
 8007bb0:	2f08      	cmp	r7, #8
 8007bb2:	d109      	bne.n	8007bc8 <_printf_i+0x120>
 8007bb4:	6823      	ldr	r3, [r4, #0]
 8007bb6:	07db      	lsls	r3, r3, #31
 8007bb8:	d506      	bpl.n	8007bc8 <_printf_i+0x120>
 8007bba:	6862      	ldr	r2, [r4, #4]
 8007bbc:	6923      	ldr	r3, [r4, #16]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	dc02      	bgt.n	8007bc8 <_printf_i+0x120>
 8007bc2:	2330      	movs	r3, #48	@ 0x30
 8007bc4:	3d01      	subs	r5, #1
 8007bc6:	702b      	strb	r3, [r5, #0]
 8007bc8:	9b03      	ldr	r3, [sp, #12]
 8007bca:	1b5b      	subs	r3, r3, r5
 8007bcc:	6123      	str	r3, [r4, #16]
 8007bce:	9b07      	ldr	r3, [sp, #28]
 8007bd0:	0021      	movs	r1, r4
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	9805      	ldr	r0, [sp, #20]
 8007bd6:	9b06      	ldr	r3, [sp, #24]
 8007bd8:	aa09      	add	r2, sp, #36	@ 0x24
 8007bda:	f7ff fef5 	bl	80079c8 <_printf_common>
 8007bde:	3001      	adds	r0, #1
 8007be0:	d148      	bne.n	8007c74 <_printf_i+0x1cc>
 8007be2:	2001      	movs	r0, #1
 8007be4:	4240      	negs	r0, r0
 8007be6:	b00b      	add	sp, #44	@ 0x2c
 8007be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bea:	2220      	movs	r2, #32
 8007bec:	6809      	ldr	r1, [r1, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	6022      	str	r2, [r4, #0]
 8007bf2:	2278      	movs	r2, #120	@ 0x78
 8007bf4:	4932      	ldr	r1, [pc, #200]	@ (8007cc0 <_printf_i+0x218>)
 8007bf6:	9104      	str	r1, [sp, #16]
 8007bf8:	0021      	movs	r1, r4
 8007bfa:	3145      	adds	r1, #69	@ 0x45
 8007bfc:	700a      	strb	r2, [r1, #0]
 8007bfe:	6819      	ldr	r1, [r3, #0]
 8007c00:	6822      	ldr	r2, [r4, #0]
 8007c02:	c940      	ldmia	r1!, {r6}
 8007c04:	0610      	lsls	r0, r2, #24
 8007c06:	d402      	bmi.n	8007c0e <_printf_i+0x166>
 8007c08:	0650      	lsls	r0, r2, #25
 8007c0a:	d500      	bpl.n	8007c0e <_printf_i+0x166>
 8007c0c:	b2b6      	uxth	r6, r6
 8007c0e:	6019      	str	r1, [r3, #0]
 8007c10:	07d3      	lsls	r3, r2, #31
 8007c12:	d502      	bpl.n	8007c1a <_printf_i+0x172>
 8007c14:	2320      	movs	r3, #32
 8007c16:	4313      	orrs	r3, r2
 8007c18:	6023      	str	r3, [r4, #0]
 8007c1a:	2e00      	cmp	r6, #0
 8007c1c:	d001      	beq.n	8007c22 <_printf_i+0x17a>
 8007c1e:	2710      	movs	r7, #16
 8007c20:	e7a8      	b.n	8007b74 <_printf_i+0xcc>
 8007c22:	2220      	movs	r2, #32
 8007c24:	6823      	ldr	r3, [r4, #0]
 8007c26:	4393      	bics	r3, r2
 8007c28:	6023      	str	r3, [r4, #0]
 8007c2a:	e7f8      	b.n	8007c1e <_printf_i+0x176>
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	680d      	ldr	r5, [r1, #0]
 8007c30:	1d10      	adds	r0, r2, #4
 8007c32:	6949      	ldr	r1, [r1, #20]
 8007c34:	6018      	str	r0, [r3, #0]
 8007c36:	6813      	ldr	r3, [r2, #0]
 8007c38:	062e      	lsls	r6, r5, #24
 8007c3a:	d501      	bpl.n	8007c40 <_printf_i+0x198>
 8007c3c:	6019      	str	r1, [r3, #0]
 8007c3e:	e002      	b.n	8007c46 <_printf_i+0x19e>
 8007c40:	066d      	lsls	r5, r5, #25
 8007c42:	d5fb      	bpl.n	8007c3c <_printf_i+0x194>
 8007c44:	8019      	strh	r1, [r3, #0]
 8007c46:	2300      	movs	r3, #0
 8007c48:	9d03      	ldr	r5, [sp, #12]
 8007c4a:	6123      	str	r3, [r4, #16]
 8007c4c:	e7bf      	b.n	8007bce <_printf_i+0x126>
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	1d11      	adds	r1, r2, #4
 8007c52:	6019      	str	r1, [r3, #0]
 8007c54:	6815      	ldr	r5, [r2, #0]
 8007c56:	2100      	movs	r1, #0
 8007c58:	0028      	movs	r0, r5
 8007c5a:	6862      	ldr	r2, [r4, #4]
 8007c5c:	f000 fa31 	bl	80080c2 <memchr>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d001      	beq.n	8007c68 <_printf_i+0x1c0>
 8007c64:	1b40      	subs	r0, r0, r5
 8007c66:	6060      	str	r0, [r4, #4]
 8007c68:	6863      	ldr	r3, [r4, #4]
 8007c6a:	6123      	str	r3, [r4, #16]
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	9a03      	ldr	r2, [sp, #12]
 8007c70:	7013      	strb	r3, [r2, #0]
 8007c72:	e7ac      	b.n	8007bce <_printf_i+0x126>
 8007c74:	002a      	movs	r2, r5
 8007c76:	6923      	ldr	r3, [r4, #16]
 8007c78:	9906      	ldr	r1, [sp, #24]
 8007c7a:	9805      	ldr	r0, [sp, #20]
 8007c7c:	9d07      	ldr	r5, [sp, #28]
 8007c7e:	47a8      	blx	r5
 8007c80:	3001      	adds	r0, #1
 8007c82:	d0ae      	beq.n	8007be2 <_printf_i+0x13a>
 8007c84:	6823      	ldr	r3, [r4, #0]
 8007c86:	079b      	lsls	r3, r3, #30
 8007c88:	d415      	bmi.n	8007cb6 <_printf_i+0x20e>
 8007c8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c8c:	68e0      	ldr	r0, [r4, #12]
 8007c8e:	4298      	cmp	r0, r3
 8007c90:	daa9      	bge.n	8007be6 <_printf_i+0x13e>
 8007c92:	0018      	movs	r0, r3
 8007c94:	e7a7      	b.n	8007be6 <_printf_i+0x13e>
 8007c96:	0022      	movs	r2, r4
 8007c98:	2301      	movs	r3, #1
 8007c9a:	9906      	ldr	r1, [sp, #24]
 8007c9c:	9805      	ldr	r0, [sp, #20]
 8007c9e:	9e07      	ldr	r6, [sp, #28]
 8007ca0:	3219      	adds	r2, #25
 8007ca2:	47b0      	blx	r6
 8007ca4:	3001      	adds	r0, #1
 8007ca6:	d09c      	beq.n	8007be2 <_printf_i+0x13a>
 8007ca8:	3501      	adds	r5, #1
 8007caa:	68e3      	ldr	r3, [r4, #12]
 8007cac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cae:	1a9b      	subs	r3, r3, r2
 8007cb0:	42ab      	cmp	r3, r5
 8007cb2:	dcf0      	bgt.n	8007c96 <_printf_i+0x1ee>
 8007cb4:	e7e9      	b.n	8007c8a <_printf_i+0x1e2>
 8007cb6:	2500      	movs	r5, #0
 8007cb8:	e7f7      	b.n	8007caa <_printf_i+0x202>
 8007cba:	46c0      	nop			@ (mov r8, r8)
 8007cbc:	0800a4ba 	.word	0x0800a4ba
 8007cc0:	0800a4cb 	.word	0x0800a4cb

08007cc4 <std>:
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	b510      	push	{r4, lr}
 8007cc8:	0004      	movs	r4, r0
 8007cca:	6003      	str	r3, [r0, #0]
 8007ccc:	6043      	str	r3, [r0, #4]
 8007cce:	6083      	str	r3, [r0, #8]
 8007cd0:	8181      	strh	r1, [r0, #12]
 8007cd2:	6643      	str	r3, [r0, #100]	@ 0x64
 8007cd4:	81c2      	strh	r2, [r0, #14]
 8007cd6:	6103      	str	r3, [r0, #16]
 8007cd8:	6143      	str	r3, [r0, #20]
 8007cda:	6183      	str	r3, [r0, #24]
 8007cdc:	0019      	movs	r1, r3
 8007cde:	2208      	movs	r2, #8
 8007ce0:	305c      	adds	r0, #92	@ 0x5c
 8007ce2:	f000 f967 	bl	8007fb4 <memset>
 8007ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8007d14 <std+0x50>)
 8007ce8:	6224      	str	r4, [r4, #32]
 8007cea:	6263      	str	r3, [r4, #36]	@ 0x24
 8007cec:	4b0a      	ldr	r3, [pc, #40]	@ (8007d18 <std+0x54>)
 8007cee:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8007d1c <std+0x58>)
 8007cf2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8007d20 <std+0x5c>)
 8007cf6:	6323      	str	r3, [r4, #48]	@ 0x30
 8007cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8007d24 <std+0x60>)
 8007cfa:	429c      	cmp	r4, r3
 8007cfc:	d005      	beq.n	8007d0a <std+0x46>
 8007cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8007d28 <std+0x64>)
 8007d00:	429c      	cmp	r4, r3
 8007d02:	d002      	beq.n	8007d0a <std+0x46>
 8007d04:	4b09      	ldr	r3, [pc, #36]	@ (8007d2c <std+0x68>)
 8007d06:	429c      	cmp	r4, r3
 8007d08:	d103      	bne.n	8007d12 <std+0x4e>
 8007d0a:	0020      	movs	r0, r4
 8007d0c:	3058      	adds	r0, #88	@ 0x58
 8007d0e:	f000 f9d5 	bl	80080bc <__retarget_lock_init_recursive>
 8007d12:	bd10      	pop	{r4, pc}
 8007d14:	08007ead 	.word	0x08007ead
 8007d18:	08007ed5 	.word	0x08007ed5
 8007d1c:	08007f0d 	.word	0x08007f0d
 8007d20:	08007f39 	.word	0x08007f39
 8007d24:	2000096c 	.word	0x2000096c
 8007d28:	200009d4 	.word	0x200009d4
 8007d2c:	20000a3c 	.word	0x20000a3c

08007d30 <stdio_exit_handler>:
 8007d30:	b510      	push	{r4, lr}
 8007d32:	4a03      	ldr	r2, [pc, #12]	@ (8007d40 <stdio_exit_handler+0x10>)
 8007d34:	4903      	ldr	r1, [pc, #12]	@ (8007d44 <stdio_exit_handler+0x14>)
 8007d36:	4804      	ldr	r0, [pc, #16]	@ (8007d48 <stdio_exit_handler+0x18>)
 8007d38:	f000 f86c 	bl	8007e14 <_fwalk_sglue>
 8007d3c:	bd10      	pop	{r4, pc}
 8007d3e:	46c0      	nop			@ (mov r8, r8)
 8007d40:	20000010 	.word	0x20000010
 8007d44:	08009d81 	.word	0x08009d81
 8007d48:	20000020 	.word	0x20000020

08007d4c <cleanup_stdio>:
 8007d4c:	6841      	ldr	r1, [r0, #4]
 8007d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8007d7c <cleanup_stdio+0x30>)
 8007d50:	b510      	push	{r4, lr}
 8007d52:	0004      	movs	r4, r0
 8007d54:	4299      	cmp	r1, r3
 8007d56:	d001      	beq.n	8007d5c <cleanup_stdio+0x10>
 8007d58:	f002 f812 	bl	8009d80 <_fflush_r>
 8007d5c:	68a1      	ldr	r1, [r4, #8]
 8007d5e:	4b08      	ldr	r3, [pc, #32]	@ (8007d80 <cleanup_stdio+0x34>)
 8007d60:	4299      	cmp	r1, r3
 8007d62:	d002      	beq.n	8007d6a <cleanup_stdio+0x1e>
 8007d64:	0020      	movs	r0, r4
 8007d66:	f002 f80b 	bl	8009d80 <_fflush_r>
 8007d6a:	68e1      	ldr	r1, [r4, #12]
 8007d6c:	4b05      	ldr	r3, [pc, #20]	@ (8007d84 <cleanup_stdio+0x38>)
 8007d6e:	4299      	cmp	r1, r3
 8007d70:	d002      	beq.n	8007d78 <cleanup_stdio+0x2c>
 8007d72:	0020      	movs	r0, r4
 8007d74:	f002 f804 	bl	8009d80 <_fflush_r>
 8007d78:	bd10      	pop	{r4, pc}
 8007d7a:	46c0      	nop			@ (mov r8, r8)
 8007d7c:	2000096c 	.word	0x2000096c
 8007d80:	200009d4 	.word	0x200009d4
 8007d84:	20000a3c 	.word	0x20000a3c

08007d88 <global_stdio_init.part.0>:
 8007d88:	b510      	push	{r4, lr}
 8007d8a:	4b09      	ldr	r3, [pc, #36]	@ (8007db0 <global_stdio_init.part.0+0x28>)
 8007d8c:	4a09      	ldr	r2, [pc, #36]	@ (8007db4 <global_stdio_init.part.0+0x2c>)
 8007d8e:	2104      	movs	r1, #4
 8007d90:	601a      	str	r2, [r3, #0]
 8007d92:	4809      	ldr	r0, [pc, #36]	@ (8007db8 <global_stdio_init.part.0+0x30>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	f7ff ff95 	bl	8007cc4 <std>
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	2109      	movs	r1, #9
 8007d9e:	4807      	ldr	r0, [pc, #28]	@ (8007dbc <global_stdio_init.part.0+0x34>)
 8007da0:	f7ff ff90 	bl	8007cc4 <std>
 8007da4:	2202      	movs	r2, #2
 8007da6:	2112      	movs	r1, #18
 8007da8:	4805      	ldr	r0, [pc, #20]	@ (8007dc0 <global_stdio_init.part.0+0x38>)
 8007daa:	f7ff ff8b 	bl	8007cc4 <std>
 8007dae:	bd10      	pop	{r4, pc}
 8007db0:	20000aa4 	.word	0x20000aa4
 8007db4:	08007d31 	.word	0x08007d31
 8007db8:	2000096c 	.word	0x2000096c
 8007dbc:	200009d4 	.word	0x200009d4
 8007dc0:	20000a3c 	.word	0x20000a3c

08007dc4 <__sfp_lock_acquire>:
 8007dc4:	b510      	push	{r4, lr}
 8007dc6:	4802      	ldr	r0, [pc, #8]	@ (8007dd0 <__sfp_lock_acquire+0xc>)
 8007dc8:	f000 f979 	bl	80080be <__retarget_lock_acquire_recursive>
 8007dcc:	bd10      	pop	{r4, pc}
 8007dce:	46c0      	nop			@ (mov r8, r8)
 8007dd0:	20000aad 	.word	0x20000aad

08007dd4 <__sfp_lock_release>:
 8007dd4:	b510      	push	{r4, lr}
 8007dd6:	4802      	ldr	r0, [pc, #8]	@ (8007de0 <__sfp_lock_release+0xc>)
 8007dd8:	f000 f972 	bl	80080c0 <__retarget_lock_release_recursive>
 8007ddc:	bd10      	pop	{r4, pc}
 8007dde:	46c0      	nop			@ (mov r8, r8)
 8007de0:	20000aad 	.word	0x20000aad

08007de4 <__sinit>:
 8007de4:	b510      	push	{r4, lr}
 8007de6:	0004      	movs	r4, r0
 8007de8:	f7ff ffec 	bl	8007dc4 <__sfp_lock_acquire>
 8007dec:	6a23      	ldr	r3, [r4, #32]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d002      	beq.n	8007df8 <__sinit+0x14>
 8007df2:	f7ff ffef 	bl	8007dd4 <__sfp_lock_release>
 8007df6:	bd10      	pop	{r4, pc}
 8007df8:	4b04      	ldr	r3, [pc, #16]	@ (8007e0c <__sinit+0x28>)
 8007dfa:	6223      	str	r3, [r4, #32]
 8007dfc:	4b04      	ldr	r3, [pc, #16]	@ (8007e10 <__sinit+0x2c>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1f6      	bne.n	8007df2 <__sinit+0xe>
 8007e04:	f7ff ffc0 	bl	8007d88 <global_stdio_init.part.0>
 8007e08:	e7f3      	b.n	8007df2 <__sinit+0xe>
 8007e0a:	46c0      	nop			@ (mov r8, r8)
 8007e0c:	08007d4d 	.word	0x08007d4d
 8007e10:	20000aa4 	.word	0x20000aa4

08007e14 <_fwalk_sglue>:
 8007e14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e16:	0014      	movs	r4, r2
 8007e18:	2600      	movs	r6, #0
 8007e1a:	9000      	str	r0, [sp, #0]
 8007e1c:	9101      	str	r1, [sp, #4]
 8007e1e:	68a5      	ldr	r5, [r4, #8]
 8007e20:	6867      	ldr	r7, [r4, #4]
 8007e22:	3f01      	subs	r7, #1
 8007e24:	d504      	bpl.n	8007e30 <_fwalk_sglue+0x1c>
 8007e26:	6824      	ldr	r4, [r4, #0]
 8007e28:	2c00      	cmp	r4, #0
 8007e2a:	d1f8      	bne.n	8007e1e <_fwalk_sglue+0xa>
 8007e2c:	0030      	movs	r0, r6
 8007e2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e30:	89ab      	ldrh	r3, [r5, #12]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d908      	bls.n	8007e48 <_fwalk_sglue+0x34>
 8007e36:	220e      	movs	r2, #14
 8007e38:	5eab      	ldrsh	r3, [r5, r2]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	d004      	beq.n	8007e48 <_fwalk_sglue+0x34>
 8007e3e:	0029      	movs	r1, r5
 8007e40:	9800      	ldr	r0, [sp, #0]
 8007e42:	9b01      	ldr	r3, [sp, #4]
 8007e44:	4798      	blx	r3
 8007e46:	4306      	orrs	r6, r0
 8007e48:	3568      	adds	r5, #104	@ 0x68
 8007e4a:	e7ea      	b.n	8007e22 <_fwalk_sglue+0xe>

08007e4c <iprintf>:
 8007e4c:	b40f      	push	{r0, r1, r2, r3}
 8007e4e:	b507      	push	{r0, r1, r2, lr}
 8007e50:	4905      	ldr	r1, [pc, #20]	@ (8007e68 <iprintf+0x1c>)
 8007e52:	ab04      	add	r3, sp, #16
 8007e54:	6808      	ldr	r0, [r1, #0]
 8007e56:	cb04      	ldmia	r3!, {r2}
 8007e58:	6881      	ldr	r1, [r0, #8]
 8007e5a:	9301      	str	r3, [sp, #4]
 8007e5c:	f001 fdee 	bl	8009a3c <_vfiprintf_r>
 8007e60:	b003      	add	sp, #12
 8007e62:	bc08      	pop	{r3}
 8007e64:	b004      	add	sp, #16
 8007e66:	4718      	bx	r3
 8007e68:	2000001c 	.word	0x2000001c

08007e6c <siprintf>:
 8007e6c:	b40e      	push	{r1, r2, r3}
 8007e6e:	b500      	push	{lr}
 8007e70:	490b      	ldr	r1, [pc, #44]	@ (8007ea0 <siprintf+0x34>)
 8007e72:	b09c      	sub	sp, #112	@ 0x70
 8007e74:	ab1d      	add	r3, sp, #116	@ 0x74
 8007e76:	9002      	str	r0, [sp, #8]
 8007e78:	9006      	str	r0, [sp, #24]
 8007e7a:	9107      	str	r1, [sp, #28]
 8007e7c:	9104      	str	r1, [sp, #16]
 8007e7e:	4809      	ldr	r0, [pc, #36]	@ (8007ea4 <siprintf+0x38>)
 8007e80:	4909      	ldr	r1, [pc, #36]	@ (8007ea8 <siprintf+0x3c>)
 8007e82:	cb04      	ldmia	r3!, {r2}
 8007e84:	9105      	str	r1, [sp, #20]
 8007e86:	6800      	ldr	r0, [r0, #0]
 8007e88:	a902      	add	r1, sp, #8
 8007e8a:	9301      	str	r3, [sp, #4]
 8007e8c:	f001 fcb0 	bl	80097f0 <_svfiprintf_r>
 8007e90:	2200      	movs	r2, #0
 8007e92:	9b02      	ldr	r3, [sp, #8]
 8007e94:	701a      	strb	r2, [r3, #0]
 8007e96:	b01c      	add	sp, #112	@ 0x70
 8007e98:	bc08      	pop	{r3}
 8007e9a:	b003      	add	sp, #12
 8007e9c:	4718      	bx	r3
 8007e9e:	46c0      	nop			@ (mov r8, r8)
 8007ea0:	7fffffff 	.word	0x7fffffff
 8007ea4:	2000001c 	.word	0x2000001c
 8007ea8:	ffff0208 	.word	0xffff0208

08007eac <__sread>:
 8007eac:	b570      	push	{r4, r5, r6, lr}
 8007eae:	000c      	movs	r4, r1
 8007eb0:	250e      	movs	r5, #14
 8007eb2:	5f49      	ldrsh	r1, [r1, r5]
 8007eb4:	f000 f8b0 	bl	8008018 <_read_r>
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	db03      	blt.n	8007ec4 <__sread+0x18>
 8007ebc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007ebe:	181b      	adds	r3, r3, r0
 8007ec0:	6563      	str	r3, [r4, #84]	@ 0x54
 8007ec2:	bd70      	pop	{r4, r5, r6, pc}
 8007ec4:	89a3      	ldrh	r3, [r4, #12]
 8007ec6:	4a02      	ldr	r2, [pc, #8]	@ (8007ed0 <__sread+0x24>)
 8007ec8:	4013      	ands	r3, r2
 8007eca:	81a3      	strh	r3, [r4, #12]
 8007ecc:	e7f9      	b.n	8007ec2 <__sread+0x16>
 8007ece:	46c0      	nop			@ (mov r8, r8)
 8007ed0:	ffffefff 	.word	0xffffefff

08007ed4 <__swrite>:
 8007ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed6:	001f      	movs	r7, r3
 8007ed8:	898b      	ldrh	r3, [r1, #12]
 8007eda:	0005      	movs	r5, r0
 8007edc:	000c      	movs	r4, r1
 8007ede:	0016      	movs	r6, r2
 8007ee0:	05db      	lsls	r3, r3, #23
 8007ee2:	d505      	bpl.n	8007ef0 <__swrite+0x1c>
 8007ee4:	230e      	movs	r3, #14
 8007ee6:	5ec9      	ldrsh	r1, [r1, r3]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	2302      	movs	r3, #2
 8007eec:	f000 f880 	bl	8007ff0 <_lseek_r>
 8007ef0:	89a3      	ldrh	r3, [r4, #12]
 8007ef2:	4a05      	ldr	r2, [pc, #20]	@ (8007f08 <__swrite+0x34>)
 8007ef4:	0028      	movs	r0, r5
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	81a3      	strh	r3, [r4, #12]
 8007efa:	0032      	movs	r2, r6
 8007efc:	230e      	movs	r3, #14
 8007efe:	5ee1      	ldrsh	r1, [r4, r3]
 8007f00:	003b      	movs	r3, r7
 8007f02:	f000 f89d 	bl	8008040 <_write_r>
 8007f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f08:	ffffefff 	.word	0xffffefff

08007f0c <__sseek>:
 8007f0c:	b570      	push	{r4, r5, r6, lr}
 8007f0e:	000c      	movs	r4, r1
 8007f10:	250e      	movs	r5, #14
 8007f12:	5f49      	ldrsh	r1, [r1, r5]
 8007f14:	f000 f86c 	bl	8007ff0 <_lseek_r>
 8007f18:	89a3      	ldrh	r3, [r4, #12]
 8007f1a:	1c42      	adds	r2, r0, #1
 8007f1c:	d103      	bne.n	8007f26 <__sseek+0x1a>
 8007f1e:	4a05      	ldr	r2, [pc, #20]	@ (8007f34 <__sseek+0x28>)
 8007f20:	4013      	ands	r3, r2
 8007f22:	81a3      	strh	r3, [r4, #12]
 8007f24:	bd70      	pop	{r4, r5, r6, pc}
 8007f26:	2280      	movs	r2, #128	@ 0x80
 8007f28:	0152      	lsls	r2, r2, #5
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	81a3      	strh	r3, [r4, #12]
 8007f2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007f30:	e7f8      	b.n	8007f24 <__sseek+0x18>
 8007f32:	46c0      	nop			@ (mov r8, r8)
 8007f34:	ffffefff 	.word	0xffffefff

08007f38 <__sclose>:
 8007f38:	b510      	push	{r4, lr}
 8007f3a:	230e      	movs	r3, #14
 8007f3c:	5ec9      	ldrsh	r1, [r1, r3]
 8007f3e:	f000 f845 	bl	8007fcc <_close_r>
 8007f42:	bd10      	pop	{r4, pc}

08007f44 <_vsniprintf_r>:
 8007f44:	b530      	push	{r4, r5, lr}
 8007f46:	0014      	movs	r4, r2
 8007f48:	0005      	movs	r5, r0
 8007f4a:	001a      	movs	r2, r3
 8007f4c:	b09b      	sub	sp, #108	@ 0x6c
 8007f4e:	2c00      	cmp	r4, #0
 8007f50:	da05      	bge.n	8007f5e <_vsniprintf_r+0x1a>
 8007f52:	238b      	movs	r3, #139	@ 0x8b
 8007f54:	6003      	str	r3, [r0, #0]
 8007f56:	2001      	movs	r0, #1
 8007f58:	4240      	negs	r0, r0
 8007f5a:	b01b      	add	sp, #108	@ 0x6c
 8007f5c:	bd30      	pop	{r4, r5, pc}
 8007f5e:	2382      	movs	r3, #130	@ 0x82
 8007f60:	4668      	mov	r0, sp
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	8183      	strh	r3, [r0, #12]
 8007f66:	2300      	movs	r3, #0
 8007f68:	9100      	str	r1, [sp, #0]
 8007f6a:	9104      	str	r1, [sp, #16]
 8007f6c:	429c      	cmp	r4, r3
 8007f6e:	d000      	beq.n	8007f72 <_vsniprintf_r+0x2e>
 8007f70:	1e63      	subs	r3, r4, #1
 8007f72:	9302      	str	r3, [sp, #8]
 8007f74:	9305      	str	r3, [sp, #20]
 8007f76:	2301      	movs	r3, #1
 8007f78:	4669      	mov	r1, sp
 8007f7a:	425b      	negs	r3, r3
 8007f7c:	81cb      	strh	r3, [r1, #14]
 8007f7e:	0028      	movs	r0, r5
 8007f80:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007f82:	f001 fc35 	bl	80097f0 <_svfiprintf_r>
 8007f86:	1c43      	adds	r3, r0, #1
 8007f88:	da01      	bge.n	8007f8e <_vsniprintf_r+0x4a>
 8007f8a:	238b      	movs	r3, #139	@ 0x8b
 8007f8c:	602b      	str	r3, [r5, #0]
 8007f8e:	2c00      	cmp	r4, #0
 8007f90:	d0e3      	beq.n	8007f5a <_vsniprintf_r+0x16>
 8007f92:	2200      	movs	r2, #0
 8007f94:	9b00      	ldr	r3, [sp, #0]
 8007f96:	701a      	strb	r2, [r3, #0]
 8007f98:	e7df      	b.n	8007f5a <_vsniprintf_r+0x16>
	...

08007f9c <vsniprintf>:
 8007f9c:	b513      	push	{r0, r1, r4, lr}
 8007f9e:	4c04      	ldr	r4, [pc, #16]	@ (8007fb0 <vsniprintf+0x14>)
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	0013      	movs	r3, r2
 8007fa4:	000a      	movs	r2, r1
 8007fa6:	0001      	movs	r1, r0
 8007fa8:	6820      	ldr	r0, [r4, #0]
 8007faa:	f7ff ffcb 	bl	8007f44 <_vsniprintf_r>
 8007fae:	bd16      	pop	{r1, r2, r4, pc}
 8007fb0:	2000001c 	.word	0x2000001c

08007fb4 <memset>:
 8007fb4:	0003      	movs	r3, r0
 8007fb6:	1882      	adds	r2, r0, r2
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d100      	bne.n	8007fbe <memset+0xa>
 8007fbc:	4770      	bx	lr
 8007fbe:	7019      	strb	r1, [r3, #0]
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	e7f9      	b.n	8007fb8 <memset+0x4>

08007fc4 <_localeconv_r>:
 8007fc4:	4800      	ldr	r0, [pc, #0]	@ (8007fc8 <_localeconv_r+0x4>)
 8007fc6:	4770      	bx	lr
 8007fc8:	2000015c 	.word	0x2000015c

08007fcc <_close_r>:
 8007fcc:	2300      	movs	r3, #0
 8007fce:	b570      	push	{r4, r5, r6, lr}
 8007fd0:	4d06      	ldr	r5, [pc, #24]	@ (8007fec <_close_r+0x20>)
 8007fd2:	0004      	movs	r4, r0
 8007fd4:	0008      	movs	r0, r1
 8007fd6:	602b      	str	r3, [r5, #0]
 8007fd8:	f7fa ff46 	bl	8002e68 <_close>
 8007fdc:	1c43      	adds	r3, r0, #1
 8007fde:	d103      	bne.n	8007fe8 <_close_r+0x1c>
 8007fe0:	682b      	ldr	r3, [r5, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d000      	beq.n	8007fe8 <_close_r+0x1c>
 8007fe6:	6023      	str	r3, [r4, #0]
 8007fe8:	bd70      	pop	{r4, r5, r6, pc}
 8007fea:	46c0      	nop			@ (mov r8, r8)
 8007fec:	20000aa8 	.word	0x20000aa8

08007ff0 <_lseek_r>:
 8007ff0:	b570      	push	{r4, r5, r6, lr}
 8007ff2:	0004      	movs	r4, r0
 8007ff4:	0008      	movs	r0, r1
 8007ff6:	0011      	movs	r1, r2
 8007ff8:	001a      	movs	r2, r3
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	4d05      	ldr	r5, [pc, #20]	@ (8008014 <_lseek_r+0x24>)
 8007ffe:	602b      	str	r3, [r5, #0]
 8008000:	f7fa ff53 	bl	8002eaa <_lseek>
 8008004:	1c43      	adds	r3, r0, #1
 8008006:	d103      	bne.n	8008010 <_lseek_r+0x20>
 8008008:	682b      	ldr	r3, [r5, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d000      	beq.n	8008010 <_lseek_r+0x20>
 800800e:	6023      	str	r3, [r4, #0]
 8008010:	bd70      	pop	{r4, r5, r6, pc}
 8008012:	46c0      	nop			@ (mov r8, r8)
 8008014:	20000aa8 	.word	0x20000aa8

08008018 <_read_r>:
 8008018:	b570      	push	{r4, r5, r6, lr}
 800801a:	0004      	movs	r4, r0
 800801c:	0008      	movs	r0, r1
 800801e:	0011      	movs	r1, r2
 8008020:	001a      	movs	r2, r3
 8008022:	2300      	movs	r3, #0
 8008024:	4d05      	ldr	r5, [pc, #20]	@ (800803c <_read_r+0x24>)
 8008026:	602b      	str	r3, [r5, #0]
 8008028:	f7fa ff01 	bl	8002e2e <_read>
 800802c:	1c43      	adds	r3, r0, #1
 800802e:	d103      	bne.n	8008038 <_read_r+0x20>
 8008030:	682b      	ldr	r3, [r5, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d000      	beq.n	8008038 <_read_r+0x20>
 8008036:	6023      	str	r3, [r4, #0]
 8008038:	bd70      	pop	{r4, r5, r6, pc}
 800803a:	46c0      	nop			@ (mov r8, r8)
 800803c:	20000aa8 	.word	0x20000aa8

08008040 <_write_r>:
 8008040:	b570      	push	{r4, r5, r6, lr}
 8008042:	0004      	movs	r4, r0
 8008044:	0008      	movs	r0, r1
 8008046:	0011      	movs	r1, r2
 8008048:	001a      	movs	r2, r3
 800804a:	2300      	movs	r3, #0
 800804c:	4d05      	ldr	r5, [pc, #20]	@ (8008064 <_write_r+0x24>)
 800804e:	602b      	str	r3, [r5, #0]
 8008050:	f7fb fa34 	bl	80034bc <_write>
 8008054:	1c43      	adds	r3, r0, #1
 8008056:	d103      	bne.n	8008060 <_write_r+0x20>
 8008058:	682b      	ldr	r3, [r5, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d000      	beq.n	8008060 <_write_r+0x20>
 800805e:	6023      	str	r3, [r4, #0]
 8008060:	bd70      	pop	{r4, r5, r6, pc}
 8008062:	46c0      	nop			@ (mov r8, r8)
 8008064:	20000aa8 	.word	0x20000aa8

08008068 <__errno>:
 8008068:	4b01      	ldr	r3, [pc, #4]	@ (8008070 <__errno+0x8>)
 800806a:	6818      	ldr	r0, [r3, #0]
 800806c:	4770      	bx	lr
 800806e:	46c0      	nop			@ (mov r8, r8)
 8008070:	2000001c 	.word	0x2000001c

08008074 <__libc_init_array>:
 8008074:	b570      	push	{r4, r5, r6, lr}
 8008076:	2600      	movs	r6, #0
 8008078:	4c0c      	ldr	r4, [pc, #48]	@ (80080ac <__libc_init_array+0x38>)
 800807a:	4d0d      	ldr	r5, [pc, #52]	@ (80080b0 <__libc_init_array+0x3c>)
 800807c:	1b64      	subs	r4, r4, r5
 800807e:	10a4      	asrs	r4, r4, #2
 8008080:	42a6      	cmp	r6, r4
 8008082:	d109      	bne.n	8008098 <__libc_init_array+0x24>
 8008084:	2600      	movs	r6, #0
 8008086:	f002 f909 	bl	800a29c <_init>
 800808a:	4c0a      	ldr	r4, [pc, #40]	@ (80080b4 <__libc_init_array+0x40>)
 800808c:	4d0a      	ldr	r5, [pc, #40]	@ (80080b8 <__libc_init_array+0x44>)
 800808e:	1b64      	subs	r4, r4, r5
 8008090:	10a4      	asrs	r4, r4, #2
 8008092:	42a6      	cmp	r6, r4
 8008094:	d105      	bne.n	80080a2 <__libc_init_array+0x2e>
 8008096:	bd70      	pop	{r4, r5, r6, pc}
 8008098:	00b3      	lsls	r3, r6, #2
 800809a:	58eb      	ldr	r3, [r5, r3]
 800809c:	4798      	blx	r3
 800809e:	3601      	adds	r6, #1
 80080a0:	e7ee      	b.n	8008080 <__libc_init_array+0xc>
 80080a2:	00b3      	lsls	r3, r6, #2
 80080a4:	58eb      	ldr	r3, [r5, r3]
 80080a6:	4798      	blx	r3
 80080a8:	3601      	adds	r6, #1
 80080aa:	e7f2      	b.n	8008092 <__libc_init_array+0x1e>
 80080ac:	0800a820 	.word	0x0800a820
 80080b0:	0800a820 	.word	0x0800a820
 80080b4:	0800a824 	.word	0x0800a824
 80080b8:	0800a820 	.word	0x0800a820

080080bc <__retarget_lock_init_recursive>:
 80080bc:	4770      	bx	lr

080080be <__retarget_lock_acquire_recursive>:
 80080be:	4770      	bx	lr

080080c0 <__retarget_lock_release_recursive>:
 80080c0:	4770      	bx	lr

080080c2 <memchr>:
 80080c2:	b2c9      	uxtb	r1, r1
 80080c4:	1882      	adds	r2, r0, r2
 80080c6:	4290      	cmp	r0, r2
 80080c8:	d101      	bne.n	80080ce <memchr+0xc>
 80080ca:	2000      	movs	r0, #0
 80080cc:	4770      	bx	lr
 80080ce:	7803      	ldrb	r3, [r0, #0]
 80080d0:	428b      	cmp	r3, r1
 80080d2:	d0fb      	beq.n	80080cc <memchr+0xa>
 80080d4:	3001      	adds	r0, #1
 80080d6:	e7f6      	b.n	80080c6 <memchr+0x4>

080080d8 <quorem>:
 80080d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080da:	6902      	ldr	r2, [r0, #16]
 80080dc:	690f      	ldr	r7, [r1, #16]
 80080de:	b087      	sub	sp, #28
 80080e0:	0006      	movs	r6, r0
 80080e2:	000b      	movs	r3, r1
 80080e4:	2000      	movs	r0, #0
 80080e6:	9102      	str	r1, [sp, #8]
 80080e8:	42ba      	cmp	r2, r7
 80080ea:	db6d      	blt.n	80081c8 <quorem+0xf0>
 80080ec:	3f01      	subs	r7, #1
 80080ee:	00bc      	lsls	r4, r7, #2
 80080f0:	3314      	adds	r3, #20
 80080f2:	9305      	str	r3, [sp, #20]
 80080f4:	191b      	adds	r3, r3, r4
 80080f6:	9303      	str	r3, [sp, #12]
 80080f8:	0033      	movs	r3, r6
 80080fa:	3314      	adds	r3, #20
 80080fc:	191c      	adds	r4, r3, r4
 80080fe:	9301      	str	r3, [sp, #4]
 8008100:	6823      	ldr	r3, [r4, #0]
 8008102:	9304      	str	r3, [sp, #16]
 8008104:	9b03      	ldr	r3, [sp, #12]
 8008106:	9804      	ldr	r0, [sp, #16]
 8008108:	681d      	ldr	r5, [r3, #0]
 800810a:	3501      	adds	r5, #1
 800810c:	0029      	movs	r1, r5
 800810e:	f7f8 f817 	bl	8000140 <__udivsi3>
 8008112:	9b04      	ldr	r3, [sp, #16]
 8008114:	9000      	str	r0, [sp, #0]
 8008116:	42ab      	cmp	r3, r5
 8008118:	d32b      	bcc.n	8008172 <quorem+0x9a>
 800811a:	9b05      	ldr	r3, [sp, #20]
 800811c:	9d01      	ldr	r5, [sp, #4]
 800811e:	469c      	mov	ip, r3
 8008120:	2300      	movs	r3, #0
 8008122:	9305      	str	r3, [sp, #20]
 8008124:	9304      	str	r3, [sp, #16]
 8008126:	4662      	mov	r2, ip
 8008128:	ca08      	ldmia	r2!, {r3}
 800812a:	6828      	ldr	r0, [r5, #0]
 800812c:	4694      	mov	ip, r2
 800812e:	9a00      	ldr	r2, [sp, #0]
 8008130:	b299      	uxth	r1, r3
 8008132:	4351      	muls	r1, r2
 8008134:	9a05      	ldr	r2, [sp, #20]
 8008136:	0c1b      	lsrs	r3, r3, #16
 8008138:	1889      	adds	r1, r1, r2
 800813a:	9a00      	ldr	r2, [sp, #0]
 800813c:	4353      	muls	r3, r2
 800813e:	0c0a      	lsrs	r2, r1, #16
 8008140:	189b      	adds	r3, r3, r2
 8008142:	0c1a      	lsrs	r2, r3, #16
 8008144:	b289      	uxth	r1, r1
 8008146:	9205      	str	r2, [sp, #20]
 8008148:	b282      	uxth	r2, r0
 800814a:	1a52      	subs	r2, r2, r1
 800814c:	9904      	ldr	r1, [sp, #16]
 800814e:	0c00      	lsrs	r0, r0, #16
 8008150:	1852      	adds	r2, r2, r1
 8008152:	b29b      	uxth	r3, r3
 8008154:	1411      	asrs	r1, r2, #16
 8008156:	1ac3      	subs	r3, r0, r3
 8008158:	185b      	adds	r3, r3, r1
 800815a:	1419      	asrs	r1, r3, #16
 800815c:	b292      	uxth	r2, r2
 800815e:	041b      	lsls	r3, r3, #16
 8008160:	431a      	orrs	r2, r3
 8008162:	9b03      	ldr	r3, [sp, #12]
 8008164:	9104      	str	r1, [sp, #16]
 8008166:	c504      	stmia	r5!, {r2}
 8008168:	4563      	cmp	r3, ip
 800816a:	d2dc      	bcs.n	8008126 <quorem+0x4e>
 800816c:	6823      	ldr	r3, [r4, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d030      	beq.n	80081d4 <quorem+0xfc>
 8008172:	0030      	movs	r0, r6
 8008174:	9902      	ldr	r1, [sp, #8]
 8008176:	f001 f9c5 	bl	8009504 <__mcmp>
 800817a:	2800      	cmp	r0, #0
 800817c:	db23      	blt.n	80081c6 <quorem+0xee>
 800817e:	0034      	movs	r4, r6
 8008180:	2500      	movs	r5, #0
 8008182:	9902      	ldr	r1, [sp, #8]
 8008184:	3414      	adds	r4, #20
 8008186:	3114      	adds	r1, #20
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	c901      	ldmia	r1!, {r0}
 800818c:	9302      	str	r3, [sp, #8]
 800818e:	466b      	mov	r3, sp
 8008190:	891b      	ldrh	r3, [r3, #8]
 8008192:	b282      	uxth	r2, r0
 8008194:	1a9a      	subs	r2, r3, r2
 8008196:	9b02      	ldr	r3, [sp, #8]
 8008198:	1952      	adds	r2, r2, r5
 800819a:	0c00      	lsrs	r0, r0, #16
 800819c:	0c1b      	lsrs	r3, r3, #16
 800819e:	1a1b      	subs	r3, r3, r0
 80081a0:	1410      	asrs	r0, r2, #16
 80081a2:	181b      	adds	r3, r3, r0
 80081a4:	141d      	asrs	r5, r3, #16
 80081a6:	b292      	uxth	r2, r2
 80081a8:	041b      	lsls	r3, r3, #16
 80081aa:	431a      	orrs	r2, r3
 80081ac:	9b03      	ldr	r3, [sp, #12]
 80081ae:	c404      	stmia	r4!, {r2}
 80081b0:	428b      	cmp	r3, r1
 80081b2:	d2e9      	bcs.n	8008188 <quorem+0xb0>
 80081b4:	9a01      	ldr	r2, [sp, #4]
 80081b6:	00bb      	lsls	r3, r7, #2
 80081b8:	18d3      	adds	r3, r2, r3
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	2a00      	cmp	r2, #0
 80081be:	d013      	beq.n	80081e8 <quorem+0x110>
 80081c0:	9b00      	ldr	r3, [sp, #0]
 80081c2:	3301      	adds	r3, #1
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	9800      	ldr	r0, [sp, #0]
 80081c8:	b007      	add	sp, #28
 80081ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081cc:	6823      	ldr	r3, [r4, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d104      	bne.n	80081dc <quorem+0x104>
 80081d2:	3f01      	subs	r7, #1
 80081d4:	9b01      	ldr	r3, [sp, #4]
 80081d6:	3c04      	subs	r4, #4
 80081d8:	42a3      	cmp	r3, r4
 80081da:	d3f7      	bcc.n	80081cc <quorem+0xf4>
 80081dc:	6137      	str	r7, [r6, #16]
 80081de:	e7c8      	b.n	8008172 <quorem+0x9a>
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	2a00      	cmp	r2, #0
 80081e4:	d104      	bne.n	80081f0 <quorem+0x118>
 80081e6:	3f01      	subs	r7, #1
 80081e8:	9a01      	ldr	r2, [sp, #4]
 80081ea:	3b04      	subs	r3, #4
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d3f7      	bcc.n	80081e0 <quorem+0x108>
 80081f0:	6137      	str	r7, [r6, #16]
 80081f2:	e7e5      	b.n	80081c0 <quorem+0xe8>

080081f4 <_dtoa_r>:
 80081f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081f6:	0014      	movs	r4, r2
 80081f8:	001d      	movs	r5, r3
 80081fa:	69c6      	ldr	r6, [r0, #28]
 80081fc:	b09d      	sub	sp, #116	@ 0x74
 80081fe:	940a      	str	r4, [sp, #40]	@ 0x28
 8008200:	950b      	str	r5, [sp, #44]	@ 0x2c
 8008202:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8008204:	9003      	str	r0, [sp, #12]
 8008206:	2e00      	cmp	r6, #0
 8008208:	d10f      	bne.n	800822a <_dtoa_r+0x36>
 800820a:	2010      	movs	r0, #16
 800820c:	f000 fe30 	bl	8008e70 <malloc>
 8008210:	9b03      	ldr	r3, [sp, #12]
 8008212:	1e02      	subs	r2, r0, #0
 8008214:	61d8      	str	r0, [r3, #28]
 8008216:	d104      	bne.n	8008222 <_dtoa_r+0x2e>
 8008218:	21ef      	movs	r1, #239	@ 0xef
 800821a:	4bc7      	ldr	r3, [pc, #796]	@ (8008538 <_dtoa_r+0x344>)
 800821c:	48c7      	ldr	r0, [pc, #796]	@ (800853c <_dtoa_r+0x348>)
 800821e:	f001 feab 	bl	8009f78 <__assert_func>
 8008222:	6046      	str	r6, [r0, #4]
 8008224:	6086      	str	r6, [r0, #8]
 8008226:	6006      	str	r6, [r0, #0]
 8008228:	60c6      	str	r6, [r0, #12]
 800822a:	9b03      	ldr	r3, [sp, #12]
 800822c:	69db      	ldr	r3, [r3, #28]
 800822e:	6819      	ldr	r1, [r3, #0]
 8008230:	2900      	cmp	r1, #0
 8008232:	d00b      	beq.n	800824c <_dtoa_r+0x58>
 8008234:	685a      	ldr	r2, [r3, #4]
 8008236:	2301      	movs	r3, #1
 8008238:	4093      	lsls	r3, r2
 800823a:	604a      	str	r2, [r1, #4]
 800823c:	608b      	str	r3, [r1, #8]
 800823e:	9803      	ldr	r0, [sp, #12]
 8008240:	f000 ff16 	bl	8009070 <_Bfree>
 8008244:	2200      	movs	r2, #0
 8008246:	9b03      	ldr	r3, [sp, #12]
 8008248:	69db      	ldr	r3, [r3, #28]
 800824a:	601a      	str	r2, [r3, #0]
 800824c:	2d00      	cmp	r5, #0
 800824e:	da1e      	bge.n	800828e <_dtoa_r+0x9a>
 8008250:	2301      	movs	r3, #1
 8008252:	603b      	str	r3, [r7, #0]
 8008254:	006b      	lsls	r3, r5, #1
 8008256:	085b      	lsrs	r3, r3, #1
 8008258:	930b      	str	r3, [sp, #44]	@ 0x2c
 800825a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800825c:	4bb8      	ldr	r3, [pc, #736]	@ (8008540 <_dtoa_r+0x34c>)
 800825e:	4ab8      	ldr	r2, [pc, #736]	@ (8008540 <_dtoa_r+0x34c>)
 8008260:	403b      	ands	r3, r7
 8008262:	4293      	cmp	r3, r2
 8008264:	d116      	bne.n	8008294 <_dtoa_r+0xa0>
 8008266:	4bb7      	ldr	r3, [pc, #732]	@ (8008544 <_dtoa_r+0x350>)
 8008268:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800826a:	6013      	str	r3, [r2, #0]
 800826c:	033b      	lsls	r3, r7, #12
 800826e:	0b1b      	lsrs	r3, r3, #12
 8008270:	4323      	orrs	r3, r4
 8008272:	d101      	bne.n	8008278 <_dtoa_r+0x84>
 8008274:	f000 fd83 	bl	8008d7e <_dtoa_r+0xb8a>
 8008278:	4bb3      	ldr	r3, [pc, #716]	@ (8008548 <_dtoa_r+0x354>)
 800827a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800827c:	9308      	str	r3, [sp, #32]
 800827e:	2a00      	cmp	r2, #0
 8008280:	d002      	beq.n	8008288 <_dtoa_r+0x94>
 8008282:	4bb2      	ldr	r3, [pc, #712]	@ (800854c <_dtoa_r+0x358>)
 8008284:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008286:	6013      	str	r3, [r2, #0]
 8008288:	9808      	ldr	r0, [sp, #32]
 800828a:	b01d      	add	sp, #116	@ 0x74
 800828c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800828e:	2300      	movs	r3, #0
 8008290:	603b      	str	r3, [r7, #0]
 8008292:	e7e2      	b.n	800825a <_dtoa_r+0x66>
 8008294:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008296:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008298:	9212      	str	r2, [sp, #72]	@ 0x48
 800829a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800829c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800829e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80082a0:	2200      	movs	r2, #0
 80082a2:	2300      	movs	r3, #0
 80082a4:	f7f8 f8d2 	bl	800044c <__aeabi_dcmpeq>
 80082a8:	1e06      	subs	r6, r0, #0
 80082aa:	d00b      	beq.n	80082c4 <_dtoa_r+0xd0>
 80082ac:	2301      	movs	r3, #1
 80082ae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80082b0:	6013      	str	r3, [r2, #0]
 80082b2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d002      	beq.n	80082be <_dtoa_r+0xca>
 80082b8:	4ba5      	ldr	r3, [pc, #660]	@ (8008550 <_dtoa_r+0x35c>)
 80082ba:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80082bc:	6013      	str	r3, [r2, #0]
 80082be:	4ba5      	ldr	r3, [pc, #660]	@ (8008554 <_dtoa_r+0x360>)
 80082c0:	9308      	str	r3, [sp, #32]
 80082c2:	e7e1      	b.n	8008288 <_dtoa_r+0x94>
 80082c4:	ab1a      	add	r3, sp, #104	@ 0x68
 80082c6:	9301      	str	r3, [sp, #4]
 80082c8:	ab1b      	add	r3, sp, #108	@ 0x6c
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	9803      	ldr	r0, [sp, #12]
 80082ce:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80082d0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80082d2:	f001 f9cd 	bl	8009670 <__d2b>
 80082d6:	007a      	lsls	r2, r7, #1
 80082d8:	9005      	str	r0, [sp, #20]
 80082da:	0d52      	lsrs	r2, r2, #21
 80082dc:	d100      	bne.n	80082e0 <_dtoa_r+0xec>
 80082de:	e07b      	b.n	80083d8 <_dtoa_r+0x1e4>
 80082e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80082e2:	9618      	str	r6, [sp, #96]	@ 0x60
 80082e4:	0319      	lsls	r1, r3, #12
 80082e6:	4b9c      	ldr	r3, [pc, #624]	@ (8008558 <_dtoa_r+0x364>)
 80082e8:	0b09      	lsrs	r1, r1, #12
 80082ea:	430b      	orrs	r3, r1
 80082ec:	499b      	ldr	r1, [pc, #620]	@ (800855c <_dtoa_r+0x368>)
 80082ee:	1857      	adds	r7, r2, r1
 80082f0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80082f2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80082f4:	0019      	movs	r1, r3
 80082f6:	2200      	movs	r2, #0
 80082f8:	4b99      	ldr	r3, [pc, #612]	@ (8008560 <_dtoa_r+0x36c>)
 80082fa:	f7f9 fc5f 	bl	8001bbc <__aeabi_dsub>
 80082fe:	4a99      	ldr	r2, [pc, #612]	@ (8008564 <_dtoa_r+0x370>)
 8008300:	4b99      	ldr	r3, [pc, #612]	@ (8008568 <_dtoa_r+0x374>)
 8008302:	f7f9 f993 	bl	800162c <__aeabi_dmul>
 8008306:	4a99      	ldr	r2, [pc, #612]	@ (800856c <_dtoa_r+0x378>)
 8008308:	4b99      	ldr	r3, [pc, #612]	@ (8008570 <_dtoa_r+0x37c>)
 800830a:	f7f8 f9e7 	bl	80006dc <__aeabi_dadd>
 800830e:	0004      	movs	r4, r0
 8008310:	0038      	movs	r0, r7
 8008312:	000d      	movs	r5, r1
 8008314:	f7fa f84c 	bl	80023b0 <__aeabi_i2d>
 8008318:	4a96      	ldr	r2, [pc, #600]	@ (8008574 <_dtoa_r+0x380>)
 800831a:	4b97      	ldr	r3, [pc, #604]	@ (8008578 <_dtoa_r+0x384>)
 800831c:	f7f9 f986 	bl	800162c <__aeabi_dmul>
 8008320:	0002      	movs	r2, r0
 8008322:	000b      	movs	r3, r1
 8008324:	0020      	movs	r0, r4
 8008326:	0029      	movs	r1, r5
 8008328:	f7f8 f9d8 	bl	80006dc <__aeabi_dadd>
 800832c:	0004      	movs	r4, r0
 800832e:	000d      	movs	r5, r1
 8008330:	f7fa f802 	bl	8002338 <__aeabi_d2iz>
 8008334:	2200      	movs	r2, #0
 8008336:	9004      	str	r0, [sp, #16]
 8008338:	2300      	movs	r3, #0
 800833a:	0020      	movs	r0, r4
 800833c:	0029      	movs	r1, r5
 800833e:	f7f8 f88b 	bl	8000458 <__aeabi_dcmplt>
 8008342:	2800      	cmp	r0, #0
 8008344:	d00b      	beq.n	800835e <_dtoa_r+0x16a>
 8008346:	9804      	ldr	r0, [sp, #16]
 8008348:	f7fa f832 	bl	80023b0 <__aeabi_i2d>
 800834c:	002b      	movs	r3, r5
 800834e:	0022      	movs	r2, r4
 8008350:	f7f8 f87c 	bl	800044c <__aeabi_dcmpeq>
 8008354:	4243      	negs	r3, r0
 8008356:	4158      	adcs	r0, r3
 8008358:	9b04      	ldr	r3, [sp, #16]
 800835a:	1a1b      	subs	r3, r3, r0
 800835c:	9304      	str	r3, [sp, #16]
 800835e:	2301      	movs	r3, #1
 8008360:	9315      	str	r3, [sp, #84]	@ 0x54
 8008362:	9b04      	ldr	r3, [sp, #16]
 8008364:	2b16      	cmp	r3, #22
 8008366:	d810      	bhi.n	800838a <_dtoa_r+0x196>
 8008368:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800836a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800836c:	9a04      	ldr	r2, [sp, #16]
 800836e:	4b83      	ldr	r3, [pc, #524]	@ (800857c <_dtoa_r+0x388>)
 8008370:	00d2      	lsls	r2, r2, #3
 8008372:	189b      	adds	r3, r3, r2
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	f7f8 f86e 	bl	8000458 <__aeabi_dcmplt>
 800837c:	2800      	cmp	r0, #0
 800837e:	d047      	beq.n	8008410 <_dtoa_r+0x21c>
 8008380:	9b04      	ldr	r3, [sp, #16]
 8008382:	3b01      	subs	r3, #1
 8008384:	9304      	str	r3, [sp, #16]
 8008386:	2300      	movs	r3, #0
 8008388:	9315      	str	r3, [sp, #84]	@ 0x54
 800838a:	2200      	movs	r2, #0
 800838c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800838e:	9206      	str	r2, [sp, #24]
 8008390:	1bdb      	subs	r3, r3, r7
 8008392:	1e5a      	subs	r2, r3, #1
 8008394:	d53e      	bpl.n	8008414 <_dtoa_r+0x220>
 8008396:	2201      	movs	r2, #1
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	9306      	str	r3, [sp, #24]
 800839c:	2300      	movs	r3, #0
 800839e:	930d      	str	r3, [sp, #52]	@ 0x34
 80083a0:	9b04      	ldr	r3, [sp, #16]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	db38      	blt.n	8008418 <_dtoa_r+0x224>
 80083a6:	9a04      	ldr	r2, [sp, #16]
 80083a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083aa:	4694      	mov	ip, r2
 80083ac:	4463      	add	r3, ip
 80083ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80083b0:	2300      	movs	r3, #0
 80083b2:	9214      	str	r2, [sp, #80]	@ 0x50
 80083b4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80083b6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80083b8:	2401      	movs	r4, #1
 80083ba:	2b09      	cmp	r3, #9
 80083bc:	d867      	bhi.n	800848e <_dtoa_r+0x29a>
 80083be:	2b05      	cmp	r3, #5
 80083c0:	dd02      	ble.n	80083c8 <_dtoa_r+0x1d4>
 80083c2:	2400      	movs	r4, #0
 80083c4:	3b04      	subs	r3, #4
 80083c6:	9322      	str	r3, [sp, #136]	@ 0x88
 80083c8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80083ca:	1e98      	subs	r0, r3, #2
 80083cc:	2803      	cmp	r0, #3
 80083ce:	d867      	bhi.n	80084a0 <_dtoa_r+0x2ac>
 80083d0:	f7f7 fea2 	bl	8000118 <__gnu_thumb1_case_uqi>
 80083d4:	5b383a2b 	.word	0x5b383a2b
 80083d8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80083da:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80083dc:	18f6      	adds	r6, r6, r3
 80083de:	4b68      	ldr	r3, [pc, #416]	@ (8008580 <_dtoa_r+0x38c>)
 80083e0:	18f2      	adds	r2, r6, r3
 80083e2:	2a20      	cmp	r2, #32
 80083e4:	dd0f      	ble.n	8008406 <_dtoa_r+0x212>
 80083e6:	2340      	movs	r3, #64	@ 0x40
 80083e8:	1a9b      	subs	r3, r3, r2
 80083ea:	409f      	lsls	r7, r3
 80083ec:	4b65      	ldr	r3, [pc, #404]	@ (8008584 <_dtoa_r+0x390>)
 80083ee:	0038      	movs	r0, r7
 80083f0:	18f3      	adds	r3, r6, r3
 80083f2:	40dc      	lsrs	r4, r3
 80083f4:	4320      	orrs	r0, r4
 80083f6:	f7fa f809 	bl	800240c <__aeabi_ui2d>
 80083fa:	2201      	movs	r2, #1
 80083fc:	4b62      	ldr	r3, [pc, #392]	@ (8008588 <_dtoa_r+0x394>)
 80083fe:	1e77      	subs	r7, r6, #1
 8008400:	18cb      	adds	r3, r1, r3
 8008402:	9218      	str	r2, [sp, #96]	@ 0x60
 8008404:	e776      	b.n	80082f4 <_dtoa_r+0x100>
 8008406:	2320      	movs	r3, #32
 8008408:	0020      	movs	r0, r4
 800840a:	1a9b      	subs	r3, r3, r2
 800840c:	4098      	lsls	r0, r3
 800840e:	e7f2      	b.n	80083f6 <_dtoa_r+0x202>
 8008410:	9015      	str	r0, [sp, #84]	@ 0x54
 8008412:	e7ba      	b.n	800838a <_dtoa_r+0x196>
 8008414:	920d      	str	r2, [sp, #52]	@ 0x34
 8008416:	e7c3      	b.n	80083a0 <_dtoa_r+0x1ac>
 8008418:	9b06      	ldr	r3, [sp, #24]
 800841a:	9a04      	ldr	r2, [sp, #16]
 800841c:	1a9b      	subs	r3, r3, r2
 800841e:	9306      	str	r3, [sp, #24]
 8008420:	4253      	negs	r3, r2
 8008422:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008424:	2300      	movs	r3, #0
 8008426:	9314      	str	r3, [sp, #80]	@ 0x50
 8008428:	e7c5      	b.n	80083b6 <_dtoa_r+0x1c2>
 800842a:	2300      	movs	r3, #0
 800842c:	9310      	str	r3, [sp, #64]	@ 0x40
 800842e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008430:	930e      	str	r3, [sp, #56]	@ 0x38
 8008432:	9309      	str	r3, [sp, #36]	@ 0x24
 8008434:	2b00      	cmp	r3, #0
 8008436:	dc13      	bgt.n	8008460 <_dtoa_r+0x26c>
 8008438:	2301      	movs	r3, #1
 800843a:	001a      	movs	r2, r3
 800843c:	930e      	str	r3, [sp, #56]	@ 0x38
 800843e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008440:	9223      	str	r2, [sp, #140]	@ 0x8c
 8008442:	e00d      	b.n	8008460 <_dtoa_r+0x26c>
 8008444:	2301      	movs	r3, #1
 8008446:	e7f1      	b.n	800842c <_dtoa_r+0x238>
 8008448:	2300      	movs	r3, #0
 800844a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800844c:	9310      	str	r3, [sp, #64]	@ 0x40
 800844e:	4694      	mov	ip, r2
 8008450:	9b04      	ldr	r3, [sp, #16]
 8008452:	4463      	add	r3, ip
 8008454:	930e      	str	r3, [sp, #56]	@ 0x38
 8008456:	3301      	adds	r3, #1
 8008458:	9309      	str	r3, [sp, #36]	@ 0x24
 800845a:	2b00      	cmp	r3, #0
 800845c:	dc00      	bgt.n	8008460 <_dtoa_r+0x26c>
 800845e:	2301      	movs	r3, #1
 8008460:	9a03      	ldr	r2, [sp, #12]
 8008462:	2100      	movs	r1, #0
 8008464:	69d0      	ldr	r0, [r2, #28]
 8008466:	2204      	movs	r2, #4
 8008468:	0015      	movs	r5, r2
 800846a:	3514      	adds	r5, #20
 800846c:	429d      	cmp	r5, r3
 800846e:	d91b      	bls.n	80084a8 <_dtoa_r+0x2b4>
 8008470:	6041      	str	r1, [r0, #4]
 8008472:	9803      	ldr	r0, [sp, #12]
 8008474:	f000 fdb8 	bl	8008fe8 <_Balloc>
 8008478:	9008      	str	r0, [sp, #32]
 800847a:	2800      	cmp	r0, #0
 800847c:	d117      	bne.n	80084ae <_dtoa_r+0x2ba>
 800847e:	21b0      	movs	r1, #176	@ 0xb0
 8008480:	4b42      	ldr	r3, [pc, #264]	@ (800858c <_dtoa_r+0x398>)
 8008482:	482e      	ldr	r0, [pc, #184]	@ (800853c <_dtoa_r+0x348>)
 8008484:	9a08      	ldr	r2, [sp, #32]
 8008486:	31ff      	adds	r1, #255	@ 0xff
 8008488:	e6c9      	b.n	800821e <_dtoa_r+0x2a>
 800848a:	2301      	movs	r3, #1
 800848c:	e7dd      	b.n	800844a <_dtoa_r+0x256>
 800848e:	2300      	movs	r3, #0
 8008490:	9410      	str	r4, [sp, #64]	@ 0x40
 8008492:	9322      	str	r3, [sp, #136]	@ 0x88
 8008494:	3b01      	subs	r3, #1
 8008496:	930e      	str	r3, [sp, #56]	@ 0x38
 8008498:	9309      	str	r3, [sp, #36]	@ 0x24
 800849a:	2200      	movs	r2, #0
 800849c:	3313      	adds	r3, #19
 800849e:	e7cf      	b.n	8008440 <_dtoa_r+0x24c>
 80084a0:	2301      	movs	r3, #1
 80084a2:	9310      	str	r3, [sp, #64]	@ 0x40
 80084a4:	3b02      	subs	r3, #2
 80084a6:	e7f6      	b.n	8008496 <_dtoa_r+0x2a2>
 80084a8:	3101      	adds	r1, #1
 80084aa:	0052      	lsls	r2, r2, #1
 80084ac:	e7dc      	b.n	8008468 <_dtoa_r+0x274>
 80084ae:	9b03      	ldr	r3, [sp, #12]
 80084b0:	9a08      	ldr	r2, [sp, #32]
 80084b2:	69db      	ldr	r3, [r3, #28]
 80084b4:	601a      	str	r2, [r3, #0]
 80084b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084b8:	2b0e      	cmp	r3, #14
 80084ba:	d900      	bls.n	80084be <_dtoa_r+0x2ca>
 80084bc:	e0d9      	b.n	8008672 <_dtoa_r+0x47e>
 80084be:	2c00      	cmp	r4, #0
 80084c0:	d100      	bne.n	80084c4 <_dtoa_r+0x2d0>
 80084c2:	e0d6      	b.n	8008672 <_dtoa_r+0x47e>
 80084c4:	9b04      	ldr	r3, [sp, #16]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	dd64      	ble.n	8008594 <_dtoa_r+0x3a0>
 80084ca:	210f      	movs	r1, #15
 80084cc:	9a04      	ldr	r2, [sp, #16]
 80084ce:	4b2b      	ldr	r3, [pc, #172]	@ (800857c <_dtoa_r+0x388>)
 80084d0:	400a      	ands	r2, r1
 80084d2:	00d2      	lsls	r2, r2, #3
 80084d4:	189b      	adds	r3, r3, r2
 80084d6:	681e      	ldr	r6, [r3, #0]
 80084d8:	685f      	ldr	r7, [r3, #4]
 80084da:	9b04      	ldr	r3, [sp, #16]
 80084dc:	2402      	movs	r4, #2
 80084de:	111d      	asrs	r5, r3, #4
 80084e0:	05db      	lsls	r3, r3, #23
 80084e2:	d50a      	bpl.n	80084fa <_dtoa_r+0x306>
 80084e4:	4b2a      	ldr	r3, [pc, #168]	@ (8008590 <_dtoa_r+0x39c>)
 80084e6:	400d      	ands	r5, r1
 80084e8:	6a1a      	ldr	r2, [r3, #32]
 80084ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ec:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80084ee:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80084f0:	f7f8 fc58 	bl	8000da4 <__aeabi_ddiv>
 80084f4:	900a      	str	r0, [sp, #40]	@ 0x28
 80084f6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80084f8:	3401      	adds	r4, #1
 80084fa:	4b25      	ldr	r3, [pc, #148]	@ (8008590 <_dtoa_r+0x39c>)
 80084fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80084fe:	2d00      	cmp	r5, #0
 8008500:	d108      	bne.n	8008514 <_dtoa_r+0x320>
 8008502:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008504:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008506:	0032      	movs	r2, r6
 8008508:	003b      	movs	r3, r7
 800850a:	f7f8 fc4b 	bl	8000da4 <__aeabi_ddiv>
 800850e:	900a      	str	r0, [sp, #40]	@ 0x28
 8008510:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008512:	e05a      	b.n	80085ca <_dtoa_r+0x3d6>
 8008514:	2301      	movs	r3, #1
 8008516:	421d      	tst	r5, r3
 8008518:	d009      	beq.n	800852e <_dtoa_r+0x33a>
 800851a:	18e4      	adds	r4, r4, r3
 800851c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800851e:	0030      	movs	r0, r6
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	0039      	movs	r1, r7
 8008526:	f7f9 f881 	bl	800162c <__aeabi_dmul>
 800852a:	0006      	movs	r6, r0
 800852c:	000f      	movs	r7, r1
 800852e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008530:	106d      	asrs	r5, r5, #1
 8008532:	3308      	adds	r3, #8
 8008534:	e7e2      	b.n	80084fc <_dtoa_r+0x308>
 8008536:	46c0      	nop			@ (mov r8, r8)
 8008538:	0800a4e9 	.word	0x0800a4e9
 800853c:	0800a500 	.word	0x0800a500
 8008540:	7ff00000 	.word	0x7ff00000
 8008544:	0000270f 	.word	0x0000270f
 8008548:	0800a4e5 	.word	0x0800a4e5
 800854c:	0800a4e8 	.word	0x0800a4e8
 8008550:	0800a4b9 	.word	0x0800a4b9
 8008554:	0800a4b8 	.word	0x0800a4b8
 8008558:	3ff00000 	.word	0x3ff00000
 800855c:	fffffc01 	.word	0xfffffc01
 8008560:	3ff80000 	.word	0x3ff80000
 8008564:	636f4361 	.word	0x636f4361
 8008568:	3fd287a7 	.word	0x3fd287a7
 800856c:	8b60c8b3 	.word	0x8b60c8b3
 8008570:	3fc68a28 	.word	0x3fc68a28
 8008574:	509f79fb 	.word	0x509f79fb
 8008578:	3fd34413 	.word	0x3fd34413
 800857c:	0800a5f8 	.word	0x0800a5f8
 8008580:	00000432 	.word	0x00000432
 8008584:	00000412 	.word	0x00000412
 8008588:	fe100000 	.word	0xfe100000
 800858c:	0800a558 	.word	0x0800a558
 8008590:	0800a5d0 	.word	0x0800a5d0
 8008594:	9b04      	ldr	r3, [sp, #16]
 8008596:	2402      	movs	r4, #2
 8008598:	2b00      	cmp	r3, #0
 800859a:	d016      	beq.n	80085ca <_dtoa_r+0x3d6>
 800859c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800859e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80085a0:	220f      	movs	r2, #15
 80085a2:	425d      	negs	r5, r3
 80085a4:	402a      	ands	r2, r5
 80085a6:	4bd7      	ldr	r3, [pc, #860]	@ (8008904 <_dtoa_r+0x710>)
 80085a8:	00d2      	lsls	r2, r2, #3
 80085aa:	189b      	adds	r3, r3, r2
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	f7f9 f83c 	bl	800162c <__aeabi_dmul>
 80085b4:	2701      	movs	r7, #1
 80085b6:	2300      	movs	r3, #0
 80085b8:	900a      	str	r0, [sp, #40]	@ 0x28
 80085ba:	910b      	str	r1, [sp, #44]	@ 0x2c
 80085bc:	4ed2      	ldr	r6, [pc, #840]	@ (8008908 <_dtoa_r+0x714>)
 80085be:	112d      	asrs	r5, r5, #4
 80085c0:	2d00      	cmp	r5, #0
 80085c2:	d000      	beq.n	80085c6 <_dtoa_r+0x3d2>
 80085c4:	e0ba      	b.n	800873c <_dtoa_r+0x548>
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1a1      	bne.n	800850e <_dtoa_r+0x31a>
 80085ca:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80085cc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80085ce:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d100      	bne.n	80085d6 <_dtoa_r+0x3e2>
 80085d4:	e0bd      	b.n	8008752 <_dtoa_r+0x55e>
 80085d6:	2200      	movs	r2, #0
 80085d8:	0030      	movs	r0, r6
 80085da:	0039      	movs	r1, r7
 80085dc:	4bcb      	ldr	r3, [pc, #812]	@ (800890c <_dtoa_r+0x718>)
 80085de:	f7f7 ff3b 	bl	8000458 <__aeabi_dcmplt>
 80085e2:	2800      	cmp	r0, #0
 80085e4:	d100      	bne.n	80085e8 <_dtoa_r+0x3f4>
 80085e6:	e0b4      	b.n	8008752 <_dtoa_r+0x55e>
 80085e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d100      	bne.n	80085f0 <_dtoa_r+0x3fc>
 80085ee:	e0b0      	b.n	8008752 <_dtoa_r+0x55e>
 80085f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	dd39      	ble.n	800866a <_dtoa_r+0x476>
 80085f6:	9b04      	ldr	r3, [sp, #16]
 80085f8:	2200      	movs	r2, #0
 80085fa:	3b01      	subs	r3, #1
 80085fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80085fe:	0030      	movs	r0, r6
 8008600:	4bc3      	ldr	r3, [pc, #780]	@ (8008910 <_dtoa_r+0x71c>)
 8008602:	0039      	movs	r1, r7
 8008604:	f7f9 f812 	bl	800162c <__aeabi_dmul>
 8008608:	900a      	str	r0, [sp, #40]	@ 0x28
 800860a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800860c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800860e:	3401      	adds	r4, #1
 8008610:	0020      	movs	r0, r4
 8008612:	9311      	str	r3, [sp, #68]	@ 0x44
 8008614:	f7f9 fecc 	bl	80023b0 <__aeabi_i2d>
 8008618:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800861a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800861c:	f7f9 f806 	bl	800162c <__aeabi_dmul>
 8008620:	4bbc      	ldr	r3, [pc, #752]	@ (8008914 <_dtoa_r+0x720>)
 8008622:	2200      	movs	r2, #0
 8008624:	f7f8 f85a 	bl	80006dc <__aeabi_dadd>
 8008628:	4bbb      	ldr	r3, [pc, #748]	@ (8008918 <_dtoa_r+0x724>)
 800862a:	0006      	movs	r6, r0
 800862c:	18cf      	adds	r7, r1, r3
 800862e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008630:	2b00      	cmp	r3, #0
 8008632:	d000      	beq.n	8008636 <_dtoa_r+0x442>
 8008634:	e091      	b.n	800875a <_dtoa_r+0x566>
 8008636:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008638:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800863a:	2200      	movs	r2, #0
 800863c:	4bb7      	ldr	r3, [pc, #732]	@ (800891c <_dtoa_r+0x728>)
 800863e:	f7f9 fabd 	bl	8001bbc <__aeabi_dsub>
 8008642:	0032      	movs	r2, r6
 8008644:	003b      	movs	r3, r7
 8008646:	0004      	movs	r4, r0
 8008648:	000d      	movs	r5, r1
 800864a:	f7f7 ff19 	bl	8000480 <__aeabi_dcmpgt>
 800864e:	2800      	cmp	r0, #0
 8008650:	d000      	beq.n	8008654 <_dtoa_r+0x460>
 8008652:	e29d      	b.n	8008b90 <_dtoa_r+0x99c>
 8008654:	2180      	movs	r1, #128	@ 0x80
 8008656:	0609      	lsls	r1, r1, #24
 8008658:	187b      	adds	r3, r7, r1
 800865a:	0032      	movs	r2, r6
 800865c:	0020      	movs	r0, r4
 800865e:	0029      	movs	r1, r5
 8008660:	f7f7 fefa 	bl	8000458 <__aeabi_dcmplt>
 8008664:	2800      	cmp	r0, #0
 8008666:	d000      	beq.n	800866a <_dtoa_r+0x476>
 8008668:	e130      	b.n	80088cc <_dtoa_r+0x6d8>
 800866a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800866c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800866e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008670:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008672:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008674:	2b00      	cmp	r3, #0
 8008676:	da00      	bge.n	800867a <_dtoa_r+0x486>
 8008678:	e177      	b.n	800896a <_dtoa_r+0x776>
 800867a:	9a04      	ldr	r2, [sp, #16]
 800867c:	2a0e      	cmp	r2, #14
 800867e:	dd00      	ble.n	8008682 <_dtoa_r+0x48e>
 8008680:	e173      	b.n	800896a <_dtoa_r+0x776>
 8008682:	4ba0      	ldr	r3, [pc, #640]	@ (8008904 <_dtoa_r+0x710>)
 8008684:	00d2      	lsls	r2, r2, #3
 8008686:	189b      	adds	r3, r3, r2
 8008688:	685c      	ldr	r4, [r3, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	9306      	str	r3, [sp, #24]
 800868e:	9407      	str	r4, [sp, #28]
 8008690:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008692:	2b00      	cmp	r3, #0
 8008694:	da03      	bge.n	800869e <_dtoa_r+0x4aa>
 8008696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008698:	2b00      	cmp	r3, #0
 800869a:	dc00      	bgt.n	800869e <_dtoa_r+0x4aa>
 800869c:	e106      	b.n	80088ac <_dtoa_r+0x6b8>
 800869e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80086a0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80086a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086a4:	9d08      	ldr	r5, [sp, #32]
 80086a6:	3b01      	subs	r3, #1
 80086a8:	195b      	adds	r3, r3, r5
 80086aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80086ac:	9a06      	ldr	r2, [sp, #24]
 80086ae:	9b07      	ldr	r3, [sp, #28]
 80086b0:	0030      	movs	r0, r6
 80086b2:	0039      	movs	r1, r7
 80086b4:	f7f8 fb76 	bl	8000da4 <__aeabi_ddiv>
 80086b8:	f7f9 fe3e 	bl	8002338 <__aeabi_d2iz>
 80086bc:	9009      	str	r0, [sp, #36]	@ 0x24
 80086be:	f7f9 fe77 	bl	80023b0 <__aeabi_i2d>
 80086c2:	9a06      	ldr	r2, [sp, #24]
 80086c4:	9b07      	ldr	r3, [sp, #28]
 80086c6:	f7f8 ffb1 	bl	800162c <__aeabi_dmul>
 80086ca:	0002      	movs	r2, r0
 80086cc:	000b      	movs	r3, r1
 80086ce:	0030      	movs	r0, r6
 80086d0:	0039      	movs	r1, r7
 80086d2:	f7f9 fa73 	bl	8001bbc <__aeabi_dsub>
 80086d6:	002b      	movs	r3, r5
 80086d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086da:	3501      	adds	r5, #1
 80086dc:	3230      	adds	r2, #48	@ 0x30
 80086de:	701a      	strb	r2, [r3, #0]
 80086e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80086e2:	002c      	movs	r4, r5
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d000      	beq.n	80086ea <_dtoa_r+0x4f6>
 80086e8:	e131      	b.n	800894e <_dtoa_r+0x75a>
 80086ea:	0002      	movs	r2, r0
 80086ec:	000b      	movs	r3, r1
 80086ee:	f7f7 fff5 	bl	80006dc <__aeabi_dadd>
 80086f2:	9a06      	ldr	r2, [sp, #24]
 80086f4:	9b07      	ldr	r3, [sp, #28]
 80086f6:	0006      	movs	r6, r0
 80086f8:	000f      	movs	r7, r1
 80086fa:	f7f7 fec1 	bl	8000480 <__aeabi_dcmpgt>
 80086fe:	2800      	cmp	r0, #0
 8008700:	d000      	beq.n	8008704 <_dtoa_r+0x510>
 8008702:	e10f      	b.n	8008924 <_dtoa_r+0x730>
 8008704:	9a06      	ldr	r2, [sp, #24]
 8008706:	9b07      	ldr	r3, [sp, #28]
 8008708:	0030      	movs	r0, r6
 800870a:	0039      	movs	r1, r7
 800870c:	f7f7 fe9e 	bl	800044c <__aeabi_dcmpeq>
 8008710:	2800      	cmp	r0, #0
 8008712:	d003      	beq.n	800871c <_dtoa_r+0x528>
 8008714:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008716:	07dd      	lsls	r5, r3, #31
 8008718:	d500      	bpl.n	800871c <_dtoa_r+0x528>
 800871a:	e103      	b.n	8008924 <_dtoa_r+0x730>
 800871c:	9905      	ldr	r1, [sp, #20]
 800871e:	9803      	ldr	r0, [sp, #12]
 8008720:	f000 fca6 	bl	8009070 <_Bfree>
 8008724:	2300      	movs	r3, #0
 8008726:	7023      	strb	r3, [r4, #0]
 8008728:	9b04      	ldr	r3, [sp, #16]
 800872a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800872c:	3301      	adds	r3, #1
 800872e:	6013      	str	r3, [r2, #0]
 8008730:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8008732:	2b00      	cmp	r3, #0
 8008734:	d100      	bne.n	8008738 <_dtoa_r+0x544>
 8008736:	e5a7      	b.n	8008288 <_dtoa_r+0x94>
 8008738:	601c      	str	r4, [r3, #0]
 800873a:	e5a5      	b.n	8008288 <_dtoa_r+0x94>
 800873c:	423d      	tst	r5, r7
 800873e:	d005      	beq.n	800874c <_dtoa_r+0x558>
 8008740:	6832      	ldr	r2, [r6, #0]
 8008742:	6873      	ldr	r3, [r6, #4]
 8008744:	f7f8 ff72 	bl	800162c <__aeabi_dmul>
 8008748:	003b      	movs	r3, r7
 800874a:	3401      	adds	r4, #1
 800874c:	106d      	asrs	r5, r5, #1
 800874e:	3608      	adds	r6, #8
 8008750:	e736      	b.n	80085c0 <_dtoa_r+0x3cc>
 8008752:	9b04      	ldr	r3, [sp, #16]
 8008754:	930c      	str	r3, [sp, #48]	@ 0x30
 8008756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008758:	e75a      	b.n	8008610 <_dtoa_r+0x41c>
 800875a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800875c:	4b69      	ldr	r3, [pc, #420]	@ (8008904 <_dtoa_r+0x710>)
 800875e:	3a01      	subs	r2, #1
 8008760:	00d2      	lsls	r2, r2, #3
 8008762:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8008764:	189b      	adds	r3, r3, r2
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	2900      	cmp	r1, #0
 800876c:	d04c      	beq.n	8008808 <_dtoa_r+0x614>
 800876e:	2000      	movs	r0, #0
 8008770:	496b      	ldr	r1, [pc, #428]	@ (8008920 <_dtoa_r+0x72c>)
 8008772:	f7f8 fb17 	bl	8000da4 <__aeabi_ddiv>
 8008776:	0032      	movs	r2, r6
 8008778:	003b      	movs	r3, r7
 800877a:	f7f9 fa1f 	bl	8001bbc <__aeabi_dsub>
 800877e:	9a08      	ldr	r2, [sp, #32]
 8008780:	0006      	movs	r6, r0
 8008782:	4694      	mov	ip, r2
 8008784:	000f      	movs	r7, r1
 8008786:	9b08      	ldr	r3, [sp, #32]
 8008788:	9316      	str	r3, [sp, #88]	@ 0x58
 800878a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800878c:	4463      	add	r3, ip
 800878e:	9311      	str	r3, [sp, #68]	@ 0x44
 8008790:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008792:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008794:	f7f9 fdd0 	bl	8002338 <__aeabi_d2iz>
 8008798:	0005      	movs	r5, r0
 800879a:	f7f9 fe09 	bl	80023b0 <__aeabi_i2d>
 800879e:	0002      	movs	r2, r0
 80087a0:	000b      	movs	r3, r1
 80087a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80087a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80087a6:	f7f9 fa09 	bl	8001bbc <__aeabi_dsub>
 80087aa:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80087ac:	3530      	adds	r5, #48	@ 0x30
 80087ae:	1c5c      	adds	r4, r3, #1
 80087b0:	701d      	strb	r5, [r3, #0]
 80087b2:	0032      	movs	r2, r6
 80087b4:	003b      	movs	r3, r7
 80087b6:	900a      	str	r0, [sp, #40]	@ 0x28
 80087b8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80087ba:	f7f7 fe4d 	bl	8000458 <__aeabi_dcmplt>
 80087be:	2800      	cmp	r0, #0
 80087c0:	d16a      	bne.n	8008898 <_dtoa_r+0x6a4>
 80087c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80087c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087c6:	2000      	movs	r0, #0
 80087c8:	4950      	ldr	r1, [pc, #320]	@ (800890c <_dtoa_r+0x718>)
 80087ca:	f7f9 f9f7 	bl	8001bbc <__aeabi_dsub>
 80087ce:	0032      	movs	r2, r6
 80087d0:	003b      	movs	r3, r7
 80087d2:	f7f7 fe41 	bl	8000458 <__aeabi_dcmplt>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	d000      	beq.n	80087dc <_dtoa_r+0x5e8>
 80087da:	e0a5      	b.n	8008928 <_dtoa_r+0x734>
 80087dc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80087de:	42a3      	cmp	r3, r4
 80087e0:	d100      	bne.n	80087e4 <_dtoa_r+0x5f0>
 80087e2:	e742      	b.n	800866a <_dtoa_r+0x476>
 80087e4:	2200      	movs	r2, #0
 80087e6:	0030      	movs	r0, r6
 80087e8:	0039      	movs	r1, r7
 80087ea:	4b49      	ldr	r3, [pc, #292]	@ (8008910 <_dtoa_r+0x71c>)
 80087ec:	f7f8 ff1e 	bl	800162c <__aeabi_dmul>
 80087f0:	2200      	movs	r2, #0
 80087f2:	0006      	movs	r6, r0
 80087f4:	000f      	movs	r7, r1
 80087f6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80087f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80087fa:	4b45      	ldr	r3, [pc, #276]	@ (8008910 <_dtoa_r+0x71c>)
 80087fc:	f7f8 ff16 	bl	800162c <__aeabi_dmul>
 8008800:	9416      	str	r4, [sp, #88]	@ 0x58
 8008802:	900a      	str	r0, [sp, #40]	@ 0x28
 8008804:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008806:	e7c3      	b.n	8008790 <_dtoa_r+0x59c>
 8008808:	0030      	movs	r0, r6
 800880a:	0039      	movs	r1, r7
 800880c:	f7f8 ff0e 	bl	800162c <__aeabi_dmul>
 8008810:	9d08      	ldr	r5, [sp, #32]
 8008812:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008814:	002b      	movs	r3, r5
 8008816:	4694      	mov	ip, r2
 8008818:	9016      	str	r0, [sp, #88]	@ 0x58
 800881a:	9117      	str	r1, [sp, #92]	@ 0x5c
 800881c:	4463      	add	r3, ip
 800881e:	9319      	str	r3, [sp, #100]	@ 0x64
 8008820:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008822:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008824:	f7f9 fd88 	bl	8002338 <__aeabi_d2iz>
 8008828:	0004      	movs	r4, r0
 800882a:	f7f9 fdc1 	bl	80023b0 <__aeabi_i2d>
 800882e:	000b      	movs	r3, r1
 8008830:	0002      	movs	r2, r0
 8008832:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008834:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008836:	f7f9 f9c1 	bl	8001bbc <__aeabi_dsub>
 800883a:	3430      	adds	r4, #48	@ 0x30
 800883c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800883e:	702c      	strb	r4, [r5, #0]
 8008840:	3501      	adds	r5, #1
 8008842:	0006      	movs	r6, r0
 8008844:	000f      	movs	r7, r1
 8008846:	42ab      	cmp	r3, r5
 8008848:	d129      	bne.n	800889e <_dtoa_r+0x6aa>
 800884a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800884c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800884e:	9b08      	ldr	r3, [sp, #32]
 8008850:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8008852:	469c      	mov	ip, r3
 8008854:	2200      	movs	r2, #0
 8008856:	4b32      	ldr	r3, [pc, #200]	@ (8008920 <_dtoa_r+0x72c>)
 8008858:	4464      	add	r4, ip
 800885a:	f7f7 ff3f 	bl	80006dc <__aeabi_dadd>
 800885e:	0002      	movs	r2, r0
 8008860:	000b      	movs	r3, r1
 8008862:	0030      	movs	r0, r6
 8008864:	0039      	movs	r1, r7
 8008866:	f7f7 fe0b 	bl	8000480 <__aeabi_dcmpgt>
 800886a:	2800      	cmp	r0, #0
 800886c:	d15c      	bne.n	8008928 <_dtoa_r+0x734>
 800886e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008870:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008872:	2000      	movs	r0, #0
 8008874:	492a      	ldr	r1, [pc, #168]	@ (8008920 <_dtoa_r+0x72c>)
 8008876:	f7f9 f9a1 	bl	8001bbc <__aeabi_dsub>
 800887a:	0002      	movs	r2, r0
 800887c:	000b      	movs	r3, r1
 800887e:	0030      	movs	r0, r6
 8008880:	0039      	movs	r1, r7
 8008882:	f7f7 fde9 	bl	8000458 <__aeabi_dcmplt>
 8008886:	2800      	cmp	r0, #0
 8008888:	d100      	bne.n	800888c <_dtoa_r+0x698>
 800888a:	e6ee      	b.n	800866a <_dtoa_r+0x476>
 800888c:	0023      	movs	r3, r4
 800888e:	3c01      	subs	r4, #1
 8008890:	7822      	ldrb	r2, [r4, #0]
 8008892:	2a30      	cmp	r2, #48	@ 0x30
 8008894:	d0fa      	beq.n	800888c <_dtoa_r+0x698>
 8008896:	001c      	movs	r4, r3
 8008898:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800889a:	9304      	str	r3, [sp, #16]
 800889c:	e73e      	b.n	800871c <_dtoa_r+0x528>
 800889e:	2200      	movs	r2, #0
 80088a0:	4b1b      	ldr	r3, [pc, #108]	@ (8008910 <_dtoa_r+0x71c>)
 80088a2:	f7f8 fec3 	bl	800162c <__aeabi_dmul>
 80088a6:	900a      	str	r0, [sp, #40]	@ 0x28
 80088a8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80088aa:	e7b9      	b.n	8008820 <_dtoa_r+0x62c>
 80088ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d10c      	bne.n	80088cc <_dtoa_r+0x6d8>
 80088b2:	9806      	ldr	r0, [sp, #24]
 80088b4:	9907      	ldr	r1, [sp, #28]
 80088b6:	2200      	movs	r2, #0
 80088b8:	4b18      	ldr	r3, [pc, #96]	@ (800891c <_dtoa_r+0x728>)
 80088ba:	f7f8 feb7 	bl	800162c <__aeabi_dmul>
 80088be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80088c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088c2:	f7f7 fde7 	bl	8000494 <__aeabi_dcmpge>
 80088c6:	2800      	cmp	r0, #0
 80088c8:	d100      	bne.n	80088cc <_dtoa_r+0x6d8>
 80088ca:	e164      	b.n	8008b96 <_dtoa_r+0x9a2>
 80088cc:	2600      	movs	r6, #0
 80088ce:	0037      	movs	r7, r6
 80088d0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80088d2:	9c08      	ldr	r4, [sp, #32]
 80088d4:	43db      	mvns	r3, r3
 80088d6:	930c      	str	r3, [sp, #48]	@ 0x30
 80088d8:	2300      	movs	r3, #0
 80088da:	9304      	str	r3, [sp, #16]
 80088dc:	0031      	movs	r1, r6
 80088de:	9803      	ldr	r0, [sp, #12]
 80088e0:	f000 fbc6 	bl	8009070 <_Bfree>
 80088e4:	2f00      	cmp	r7, #0
 80088e6:	d0d7      	beq.n	8008898 <_dtoa_r+0x6a4>
 80088e8:	9b04      	ldr	r3, [sp, #16]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d005      	beq.n	80088fa <_dtoa_r+0x706>
 80088ee:	42bb      	cmp	r3, r7
 80088f0:	d003      	beq.n	80088fa <_dtoa_r+0x706>
 80088f2:	0019      	movs	r1, r3
 80088f4:	9803      	ldr	r0, [sp, #12]
 80088f6:	f000 fbbb 	bl	8009070 <_Bfree>
 80088fa:	0039      	movs	r1, r7
 80088fc:	9803      	ldr	r0, [sp, #12]
 80088fe:	f000 fbb7 	bl	8009070 <_Bfree>
 8008902:	e7c9      	b.n	8008898 <_dtoa_r+0x6a4>
 8008904:	0800a5f8 	.word	0x0800a5f8
 8008908:	0800a5d0 	.word	0x0800a5d0
 800890c:	3ff00000 	.word	0x3ff00000
 8008910:	40240000 	.word	0x40240000
 8008914:	401c0000 	.word	0x401c0000
 8008918:	fcc00000 	.word	0xfcc00000
 800891c:	40140000 	.word	0x40140000
 8008920:	3fe00000 	.word	0x3fe00000
 8008924:	9b04      	ldr	r3, [sp, #16]
 8008926:	930c      	str	r3, [sp, #48]	@ 0x30
 8008928:	0023      	movs	r3, r4
 800892a:	001c      	movs	r4, r3
 800892c:	3b01      	subs	r3, #1
 800892e:	781a      	ldrb	r2, [r3, #0]
 8008930:	2a39      	cmp	r2, #57	@ 0x39
 8008932:	d108      	bne.n	8008946 <_dtoa_r+0x752>
 8008934:	9a08      	ldr	r2, [sp, #32]
 8008936:	429a      	cmp	r2, r3
 8008938:	d1f7      	bne.n	800892a <_dtoa_r+0x736>
 800893a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800893c:	9908      	ldr	r1, [sp, #32]
 800893e:	3201      	adds	r2, #1
 8008940:	920c      	str	r2, [sp, #48]	@ 0x30
 8008942:	2230      	movs	r2, #48	@ 0x30
 8008944:	700a      	strb	r2, [r1, #0]
 8008946:	781a      	ldrb	r2, [r3, #0]
 8008948:	3201      	adds	r2, #1
 800894a:	701a      	strb	r2, [r3, #0]
 800894c:	e7a4      	b.n	8008898 <_dtoa_r+0x6a4>
 800894e:	2200      	movs	r2, #0
 8008950:	4bc6      	ldr	r3, [pc, #792]	@ (8008c6c <_dtoa_r+0xa78>)
 8008952:	f7f8 fe6b 	bl	800162c <__aeabi_dmul>
 8008956:	2200      	movs	r2, #0
 8008958:	2300      	movs	r3, #0
 800895a:	0006      	movs	r6, r0
 800895c:	000f      	movs	r7, r1
 800895e:	f7f7 fd75 	bl	800044c <__aeabi_dcmpeq>
 8008962:	2800      	cmp	r0, #0
 8008964:	d100      	bne.n	8008968 <_dtoa_r+0x774>
 8008966:	e6a1      	b.n	80086ac <_dtoa_r+0x4b8>
 8008968:	e6d8      	b.n	800871c <_dtoa_r+0x528>
 800896a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800896c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800896e:	9c06      	ldr	r4, [sp, #24]
 8008970:	2f00      	cmp	r7, #0
 8008972:	d014      	beq.n	800899e <_dtoa_r+0x7aa>
 8008974:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008976:	2a01      	cmp	r2, #1
 8008978:	dd00      	ble.n	800897c <_dtoa_r+0x788>
 800897a:	e0c8      	b.n	8008b0e <_dtoa_r+0x91a>
 800897c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800897e:	2a00      	cmp	r2, #0
 8008980:	d100      	bne.n	8008984 <_dtoa_r+0x790>
 8008982:	e0be      	b.n	8008b02 <_dtoa_r+0x90e>
 8008984:	4aba      	ldr	r2, [pc, #744]	@ (8008c70 <_dtoa_r+0xa7c>)
 8008986:	189b      	adds	r3, r3, r2
 8008988:	9a06      	ldr	r2, [sp, #24]
 800898a:	2101      	movs	r1, #1
 800898c:	18d2      	adds	r2, r2, r3
 800898e:	9206      	str	r2, [sp, #24]
 8008990:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008992:	9803      	ldr	r0, [sp, #12]
 8008994:	18d3      	adds	r3, r2, r3
 8008996:	930d      	str	r3, [sp, #52]	@ 0x34
 8008998:	f000 fc22 	bl	80091e0 <__i2b>
 800899c:	0007      	movs	r7, r0
 800899e:	2c00      	cmp	r4, #0
 80089a0:	d00e      	beq.n	80089c0 <_dtoa_r+0x7cc>
 80089a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	dd0b      	ble.n	80089c0 <_dtoa_r+0x7cc>
 80089a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80089aa:	0023      	movs	r3, r4
 80089ac:	4294      	cmp	r4, r2
 80089ae:	dd00      	ble.n	80089b2 <_dtoa_r+0x7be>
 80089b0:	0013      	movs	r3, r2
 80089b2:	9a06      	ldr	r2, [sp, #24]
 80089b4:	1ae4      	subs	r4, r4, r3
 80089b6:	1ad2      	subs	r2, r2, r3
 80089b8:	9206      	str	r2, [sp, #24]
 80089ba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	930d      	str	r3, [sp, #52]	@ 0x34
 80089c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d01f      	beq.n	8008a06 <_dtoa_r+0x812>
 80089c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d100      	bne.n	80089ce <_dtoa_r+0x7da>
 80089cc:	e0b5      	b.n	8008b3a <_dtoa_r+0x946>
 80089ce:	2d00      	cmp	r5, #0
 80089d0:	d010      	beq.n	80089f4 <_dtoa_r+0x800>
 80089d2:	0039      	movs	r1, r7
 80089d4:	002a      	movs	r2, r5
 80089d6:	9803      	ldr	r0, [sp, #12]
 80089d8:	f000 fccc 	bl	8009374 <__pow5mult>
 80089dc:	9a05      	ldr	r2, [sp, #20]
 80089de:	0001      	movs	r1, r0
 80089e0:	0007      	movs	r7, r0
 80089e2:	9803      	ldr	r0, [sp, #12]
 80089e4:	f000 fc14 	bl	8009210 <__multiply>
 80089e8:	0006      	movs	r6, r0
 80089ea:	9905      	ldr	r1, [sp, #20]
 80089ec:	9803      	ldr	r0, [sp, #12]
 80089ee:	f000 fb3f 	bl	8009070 <_Bfree>
 80089f2:	9605      	str	r6, [sp, #20]
 80089f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089f6:	1b5a      	subs	r2, r3, r5
 80089f8:	42ab      	cmp	r3, r5
 80089fa:	d004      	beq.n	8008a06 <_dtoa_r+0x812>
 80089fc:	9905      	ldr	r1, [sp, #20]
 80089fe:	9803      	ldr	r0, [sp, #12]
 8008a00:	f000 fcb8 	bl	8009374 <__pow5mult>
 8008a04:	9005      	str	r0, [sp, #20]
 8008a06:	2101      	movs	r1, #1
 8008a08:	9803      	ldr	r0, [sp, #12]
 8008a0a:	f000 fbe9 	bl	80091e0 <__i2b>
 8008a0e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008a10:	0006      	movs	r6, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d100      	bne.n	8008a18 <_dtoa_r+0x824>
 8008a16:	e1bc      	b.n	8008d92 <_dtoa_r+0xb9e>
 8008a18:	001a      	movs	r2, r3
 8008a1a:	0001      	movs	r1, r0
 8008a1c:	9803      	ldr	r0, [sp, #12]
 8008a1e:	f000 fca9 	bl	8009374 <__pow5mult>
 8008a22:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008a24:	0006      	movs	r6, r0
 8008a26:	2500      	movs	r5, #0
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	dc16      	bgt.n	8008a5a <_dtoa_r+0x866>
 8008a2c:	2500      	movs	r5, #0
 8008a2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a30:	42ab      	cmp	r3, r5
 8008a32:	d10e      	bne.n	8008a52 <_dtoa_r+0x85e>
 8008a34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a36:	031b      	lsls	r3, r3, #12
 8008a38:	42ab      	cmp	r3, r5
 8008a3a:	d10a      	bne.n	8008a52 <_dtoa_r+0x85e>
 8008a3c:	4b8d      	ldr	r3, [pc, #564]	@ (8008c74 <_dtoa_r+0xa80>)
 8008a3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008a40:	4213      	tst	r3, r2
 8008a42:	d006      	beq.n	8008a52 <_dtoa_r+0x85e>
 8008a44:	9b06      	ldr	r3, [sp, #24]
 8008a46:	3501      	adds	r5, #1
 8008a48:	3301      	adds	r3, #1
 8008a4a:	9306      	str	r3, [sp, #24]
 8008a4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a4e:	3301      	adds	r3, #1
 8008a50:	930d      	str	r3, [sp, #52]	@ 0x34
 8008a52:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008a54:	2001      	movs	r0, #1
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d008      	beq.n	8008a6c <_dtoa_r+0x878>
 8008a5a:	6933      	ldr	r3, [r6, #16]
 8008a5c:	3303      	adds	r3, #3
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	18f3      	adds	r3, r6, r3
 8008a62:	6858      	ldr	r0, [r3, #4]
 8008a64:	f000 fb6c 	bl	8009140 <__hi0bits>
 8008a68:	2320      	movs	r3, #32
 8008a6a:	1a18      	subs	r0, r3, r0
 8008a6c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a6e:	1818      	adds	r0, r3, r0
 8008a70:	0002      	movs	r2, r0
 8008a72:	231f      	movs	r3, #31
 8008a74:	401a      	ands	r2, r3
 8008a76:	4218      	tst	r0, r3
 8008a78:	d065      	beq.n	8008b46 <_dtoa_r+0x952>
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	1a9b      	subs	r3, r3, r2
 8008a7e:	2b04      	cmp	r3, #4
 8008a80:	dd5d      	ble.n	8008b3e <_dtoa_r+0x94a>
 8008a82:	231c      	movs	r3, #28
 8008a84:	1a9b      	subs	r3, r3, r2
 8008a86:	9a06      	ldr	r2, [sp, #24]
 8008a88:	18e4      	adds	r4, r4, r3
 8008a8a:	18d2      	adds	r2, r2, r3
 8008a8c:	9206      	str	r2, [sp, #24]
 8008a8e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008a90:	18d3      	adds	r3, r2, r3
 8008a92:	930d      	str	r3, [sp, #52]	@ 0x34
 8008a94:	9b06      	ldr	r3, [sp, #24]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	dd05      	ble.n	8008aa6 <_dtoa_r+0x8b2>
 8008a9a:	001a      	movs	r2, r3
 8008a9c:	9905      	ldr	r1, [sp, #20]
 8008a9e:	9803      	ldr	r0, [sp, #12]
 8008aa0:	f000 fcc4 	bl	800942c <__lshift>
 8008aa4:	9005      	str	r0, [sp, #20]
 8008aa6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	dd05      	ble.n	8008ab8 <_dtoa_r+0x8c4>
 8008aac:	0031      	movs	r1, r6
 8008aae:	001a      	movs	r2, r3
 8008ab0:	9803      	ldr	r0, [sp, #12]
 8008ab2:	f000 fcbb 	bl	800942c <__lshift>
 8008ab6:	0006      	movs	r6, r0
 8008ab8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d045      	beq.n	8008b4a <_dtoa_r+0x956>
 8008abe:	0031      	movs	r1, r6
 8008ac0:	9805      	ldr	r0, [sp, #20]
 8008ac2:	f000 fd1f 	bl	8009504 <__mcmp>
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	da3f      	bge.n	8008b4a <_dtoa_r+0x956>
 8008aca:	9b04      	ldr	r3, [sp, #16]
 8008acc:	220a      	movs	r2, #10
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	930c      	str	r3, [sp, #48]	@ 0x30
 8008ad2:	9905      	ldr	r1, [sp, #20]
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	9803      	ldr	r0, [sp, #12]
 8008ad8:	f000 faee 	bl	80090b8 <__multadd>
 8008adc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008ade:	9005      	str	r0, [sp, #20]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d100      	bne.n	8008ae6 <_dtoa_r+0x8f2>
 8008ae4:	e15c      	b.n	8008da0 <_dtoa_r+0xbac>
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	0039      	movs	r1, r7
 8008aea:	220a      	movs	r2, #10
 8008aec:	9803      	ldr	r0, [sp, #12]
 8008aee:	f000 fae3 	bl	80090b8 <__multadd>
 8008af2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008af4:	0007      	movs	r7, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	dc55      	bgt.n	8008ba6 <_dtoa_r+0x9b2>
 8008afa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	dc2d      	bgt.n	8008b5c <_dtoa_r+0x968>
 8008b00:	e051      	b.n	8008ba6 <_dtoa_r+0x9b2>
 8008b02:	2336      	movs	r3, #54	@ 0x36
 8008b04:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008b06:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8008b08:	9c06      	ldr	r4, [sp, #24]
 8008b0a:	1a9b      	subs	r3, r3, r2
 8008b0c:	e73c      	b.n	8008988 <_dtoa_r+0x794>
 8008b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b10:	1e5d      	subs	r5, r3, #1
 8008b12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b14:	42ab      	cmp	r3, r5
 8008b16:	db08      	blt.n	8008b2a <_dtoa_r+0x936>
 8008b18:	1b5d      	subs	r5, r3, r5
 8008b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b1c:	9c06      	ldr	r4, [sp, #24]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	db00      	blt.n	8008b24 <_dtoa_r+0x930>
 8008b22:	e731      	b.n	8008988 <_dtoa_r+0x794>
 8008b24:	1ae4      	subs	r4, r4, r3
 8008b26:	2300      	movs	r3, #0
 8008b28:	e72e      	b.n	8008988 <_dtoa_r+0x794>
 8008b2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b2c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008b2e:	1aeb      	subs	r3, r5, r3
 8008b30:	18d3      	adds	r3, r2, r3
 8008b32:	950f      	str	r5, [sp, #60]	@ 0x3c
 8008b34:	9314      	str	r3, [sp, #80]	@ 0x50
 8008b36:	2500      	movs	r5, #0
 8008b38:	e7ef      	b.n	8008b1a <_dtoa_r+0x926>
 8008b3a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008b3c:	e75e      	b.n	80089fc <_dtoa_r+0x808>
 8008b3e:	2b04      	cmp	r3, #4
 8008b40:	d0a8      	beq.n	8008a94 <_dtoa_r+0x8a0>
 8008b42:	331c      	adds	r3, #28
 8008b44:	e79f      	b.n	8008a86 <_dtoa_r+0x892>
 8008b46:	0013      	movs	r3, r2
 8008b48:	e7fb      	b.n	8008b42 <_dtoa_r+0x94e>
 8008b4a:	9b04      	ldr	r3, [sp, #16]
 8008b4c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b50:	930e      	str	r3, [sp, #56]	@ 0x38
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	dc23      	bgt.n	8008b9e <_dtoa_r+0x9aa>
 8008b56:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	dd20      	ble.n	8008b9e <_dtoa_r+0x9aa>
 8008b5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d000      	beq.n	8008b64 <_dtoa_r+0x970>
 8008b62:	e6b5      	b.n	80088d0 <_dtoa_r+0x6dc>
 8008b64:	0031      	movs	r1, r6
 8008b66:	2205      	movs	r2, #5
 8008b68:	9803      	ldr	r0, [sp, #12]
 8008b6a:	f000 faa5 	bl	80090b8 <__multadd>
 8008b6e:	0006      	movs	r6, r0
 8008b70:	0001      	movs	r1, r0
 8008b72:	9805      	ldr	r0, [sp, #20]
 8008b74:	f000 fcc6 	bl	8009504 <__mcmp>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	dc00      	bgt.n	8008b7e <_dtoa_r+0x98a>
 8008b7c:	e6a8      	b.n	80088d0 <_dtoa_r+0x6dc>
 8008b7e:	9b08      	ldr	r3, [sp, #32]
 8008b80:	9a08      	ldr	r2, [sp, #32]
 8008b82:	1c5c      	adds	r4, r3, #1
 8008b84:	2331      	movs	r3, #49	@ 0x31
 8008b86:	7013      	strb	r3, [r2, #0]
 8008b88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b8e:	e6a3      	b.n	80088d8 <_dtoa_r+0x6e4>
 8008b90:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8008b92:	0037      	movs	r7, r6
 8008b94:	e7f3      	b.n	8008b7e <_dtoa_r+0x98a>
 8008b96:	9b04      	ldr	r3, [sp, #16]
 8008b98:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8008b9a:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b9c:	e7f9      	b.n	8008b92 <_dtoa_r+0x99e>
 8008b9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d100      	bne.n	8008ba6 <_dtoa_r+0x9b2>
 8008ba4:	e100      	b.n	8008da8 <_dtoa_r+0xbb4>
 8008ba6:	2c00      	cmp	r4, #0
 8008ba8:	dd05      	ble.n	8008bb6 <_dtoa_r+0x9c2>
 8008baa:	0039      	movs	r1, r7
 8008bac:	0022      	movs	r2, r4
 8008bae:	9803      	ldr	r0, [sp, #12]
 8008bb0:	f000 fc3c 	bl	800942c <__lshift>
 8008bb4:	0007      	movs	r7, r0
 8008bb6:	0038      	movs	r0, r7
 8008bb8:	2d00      	cmp	r5, #0
 8008bba:	d018      	beq.n	8008bee <_dtoa_r+0x9fa>
 8008bbc:	6879      	ldr	r1, [r7, #4]
 8008bbe:	9803      	ldr	r0, [sp, #12]
 8008bc0:	f000 fa12 	bl	8008fe8 <_Balloc>
 8008bc4:	1e04      	subs	r4, r0, #0
 8008bc6:	d105      	bne.n	8008bd4 <_dtoa_r+0x9e0>
 8008bc8:	0022      	movs	r2, r4
 8008bca:	4b2b      	ldr	r3, [pc, #172]	@ (8008c78 <_dtoa_r+0xa84>)
 8008bcc:	482b      	ldr	r0, [pc, #172]	@ (8008c7c <_dtoa_r+0xa88>)
 8008bce:	492c      	ldr	r1, [pc, #176]	@ (8008c80 <_dtoa_r+0xa8c>)
 8008bd0:	f7ff fb25 	bl	800821e <_dtoa_r+0x2a>
 8008bd4:	0039      	movs	r1, r7
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	310c      	adds	r1, #12
 8008bda:	3202      	adds	r2, #2
 8008bdc:	0092      	lsls	r2, r2, #2
 8008bde:	300c      	adds	r0, #12
 8008be0:	f001 f9c0 	bl	8009f64 <memcpy>
 8008be4:	2201      	movs	r2, #1
 8008be6:	0021      	movs	r1, r4
 8008be8:	9803      	ldr	r0, [sp, #12]
 8008bea:	f000 fc1f 	bl	800942c <__lshift>
 8008bee:	9b08      	ldr	r3, [sp, #32]
 8008bf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008bf2:	9306      	str	r3, [sp, #24]
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	189b      	adds	r3, r3, r2
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	9704      	str	r7, [sp, #16]
 8008bfc:	0007      	movs	r7, r0
 8008bfe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008c00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c02:	4013      	ands	r3, r2
 8008c04:	930e      	str	r3, [sp, #56]	@ 0x38
 8008c06:	0031      	movs	r1, r6
 8008c08:	9805      	ldr	r0, [sp, #20]
 8008c0a:	f7ff fa65 	bl	80080d8 <quorem>
 8008c0e:	9904      	ldr	r1, [sp, #16]
 8008c10:	0005      	movs	r5, r0
 8008c12:	900a      	str	r0, [sp, #40]	@ 0x28
 8008c14:	9805      	ldr	r0, [sp, #20]
 8008c16:	f000 fc75 	bl	8009504 <__mcmp>
 8008c1a:	003a      	movs	r2, r7
 8008c1c:	900d      	str	r0, [sp, #52]	@ 0x34
 8008c1e:	0031      	movs	r1, r6
 8008c20:	9803      	ldr	r0, [sp, #12]
 8008c22:	f000 fc8b 	bl	800953c <__mdiff>
 8008c26:	2201      	movs	r2, #1
 8008c28:	68c3      	ldr	r3, [r0, #12]
 8008c2a:	0004      	movs	r4, r0
 8008c2c:	3530      	adds	r5, #48	@ 0x30
 8008c2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d104      	bne.n	8008c3e <_dtoa_r+0xa4a>
 8008c34:	0001      	movs	r1, r0
 8008c36:	9805      	ldr	r0, [sp, #20]
 8008c38:	f000 fc64 	bl	8009504 <__mcmp>
 8008c3c:	9009      	str	r0, [sp, #36]	@ 0x24
 8008c3e:	0021      	movs	r1, r4
 8008c40:	9803      	ldr	r0, [sp, #12]
 8008c42:	f000 fa15 	bl	8009070 <_Bfree>
 8008c46:	9b06      	ldr	r3, [sp, #24]
 8008c48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c4a:	1c5c      	adds	r4, r3, #1
 8008c4c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c52:	4313      	orrs	r3, r2
 8008c54:	d116      	bne.n	8008c84 <_dtoa_r+0xa90>
 8008c56:	2d39      	cmp	r5, #57	@ 0x39
 8008c58:	d02f      	beq.n	8008cba <_dtoa_r+0xac6>
 8008c5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	dd01      	ble.n	8008c64 <_dtoa_r+0xa70>
 8008c60:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008c62:	3531      	adds	r5, #49	@ 0x31
 8008c64:	9b06      	ldr	r3, [sp, #24]
 8008c66:	701d      	strb	r5, [r3, #0]
 8008c68:	e638      	b.n	80088dc <_dtoa_r+0x6e8>
 8008c6a:	46c0      	nop			@ (mov r8, r8)
 8008c6c:	40240000 	.word	0x40240000
 8008c70:	00000433 	.word	0x00000433
 8008c74:	7ff00000 	.word	0x7ff00000
 8008c78:	0800a558 	.word	0x0800a558
 8008c7c:	0800a500 	.word	0x0800a500
 8008c80:	000002ef 	.word	0x000002ef
 8008c84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	db04      	blt.n	8008c94 <_dtoa_r+0xaa0>
 8008c8a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c90:	4313      	orrs	r3, r2
 8008c92:	d11e      	bne.n	8008cd2 <_dtoa_r+0xade>
 8008c94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	dde4      	ble.n	8008c64 <_dtoa_r+0xa70>
 8008c9a:	9905      	ldr	r1, [sp, #20]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	9803      	ldr	r0, [sp, #12]
 8008ca0:	f000 fbc4 	bl	800942c <__lshift>
 8008ca4:	0031      	movs	r1, r6
 8008ca6:	9005      	str	r0, [sp, #20]
 8008ca8:	f000 fc2c 	bl	8009504 <__mcmp>
 8008cac:	2800      	cmp	r0, #0
 8008cae:	dc02      	bgt.n	8008cb6 <_dtoa_r+0xac2>
 8008cb0:	d1d8      	bne.n	8008c64 <_dtoa_r+0xa70>
 8008cb2:	07eb      	lsls	r3, r5, #31
 8008cb4:	d5d6      	bpl.n	8008c64 <_dtoa_r+0xa70>
 8008cb6:	2d39      	cmp	r5, #57	@ 0x39
 8008cb8:	d1d2      	bne.n	8008c60 <_dtoa_r+0xa6c>
 8008cba:	2339      	movs	r3, #57	@ 0x39
 8008cbc:	9a06      	ldr	r2, [sp, #24]
 8008cbe:	7013      	strb	r3, [r2, #0]
 8008cc0:	0023      	movs	r3, r4
 8008cc2:	001c      	movs	r4, r3
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	781a      	ldrb	r2, [r3, #0]
 8008cc8:	2a39      	cmp	r2, #57	@ 0x39
 8008cca:	d04f      	beq.n	8008d6c <_dtoa_r+0xb78>
 8008ccc:	3201      	adds	r2, #1
 8008cce:	701a      	strb	r2, [r3, #0]
 8008cd0:	e604      	b.n	80088dc <_dtoa_r+0x6e8>
 8008cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	dd03      	ble.n	8008ce0 <_dtoa_r+0xaec>
 8008cd8:	2d39      	cmp	r5, #57	@ 0x39
 8008cda:	d0ee      	beq.n	8008cba <_dtoa_r+0xac6>
 8008cdc:	3501      	adds	r5, #1
 8008cde:	e7c1      	b.n	8008c64 <_dtoa_r+0xa70>
 8008ce0:	9b06      	ldr	r3, [sp, #24]
 8008ce2:	9a06      	ldr	r2, [sp, #24]
 8008ce4:	701d      	strb	r5, [r3, #0]
 8008ce6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d02a      	beq.n	8008d42 <_dtoa_r+0xb4e>
 8008cec:	2300      	movs	r3, #0
 8008cee:	220a      	movs	r2, #10
 8008cf0:	9905      	ldr	r1, [sp, #20]
 8008cf2:	9803      	ldr	r0, [sp, #12]
 8008cf4:	f000 f9e0 	bl	80090b8 <__multadd>
 8008cf8:	9b04      	ldr	r3, [sp, #16]
 8008cfa:	9005      	str	r0, [sp, #20]
 8008cfc:	42bb      	cmp	r3, r7
 8008cfe:	d109      	bne.n	8008d14 <_dtoa_r+0xb20>
 8008d00:	2300      	movs	r3, #0
 8008d02:	220a      	movs	r2, #10
 8008d04:	9904      	ldr	r1, [sp, #16]
 8008d06:	9803      	ldr	r0, [sp, #12]
 8008d08:	f000 f9d6 	bl	80090b8 <__multadd>
 8008d0c:	9004      	str	r0, [sp, #16]
 8008d0e:	0007      	movs	r7, r0
 8008d10:	9406      	str	r4, [sp, #24]
 8008d12:	e778      	b.n	8008c06 <_dtoa_r+0xa12>
 8008d14:	9904      	ldr	r1, [sp, #16]
 8008d16:	2300      	movs	r3, #0
 8008d18:	220a      	movs	r2, #10
 8008d1a:	9803      	ldr	r0, [sp, #12]
 8008d1c:	f000 f9cc 	bl	80090b8 <__multadd>
 8008d20:	2300      	movs	r3, #0
 8008d22:	9004      	str	r0, [sp, #16]
 8008d24:	220a      	movs	r2, #10
 8008d26:	0039      	movs	r1, r7
 8008d28:	9803      	ldr	r0, [sp, #12]
 8008d2a:	f000 f9c5 	bl	80090b8 <__multadd>
 8008d2e:	e7ee      	b.n	8008d0e <_dtoa_r+0xb1a>
 8008d30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d32:	2401      	movs	r4, #1
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	dd00      	ble.n	8008d3a <_dtoa_r+0xb46>
 8008d38:	001c      	movs	r4, r3
 8008d3a:	9b08      	ldr	r3, [sp, #32]
 8008d3c:	191c      	adds	r4, r3, r4
 8008d3e:	2300      	movs	r3, #0
 8008d40:	9304      	str	r3, [sp, #16]
 8008d42:	9905      	ldr	r1, [sp, #20]
 8008d44:	2201      	movs	r2, #1
 8008d46:	9803      	ldr	r0, [sp, #12]
 8008d48:	f000 fb70 	bl	800942c <__lshift>
 8008d4c:	0031      	movs	r1, r6
 8008d4e:	9005      	str	r0, [sp, #20]
 8008d50:	f000 fbd8 	bl	8009504 <__mcmp>
 8008d54:	2800      	cmp	r0, #0
 8008d56:	dcb3      	bgt.n	8008cc0 <_dtoa_r+0xacc>
 8008d58:	d101      	bne.n	8008d5e <_dtoa_r+0xb6a>
 8008d5a:	07ed      	lsls	r5, r5, #31
 8008d5c:	d4b0      	bmi.n	8008cc0 <_dtoa_r+0xacc>
 8008d5e:	0023      	movs	r3, r4
 8008d60:	001c      	movs	r4, r3
 8008d62:	3b01      	subs	r3, #1
 8008d64:	781a      	ldrb	r2, [r3, #0]
 8008d66:	2a30      	cmp	r2, #48	@ 0x30
 8008d68:	d0fa      	beq.n	8008d60 <_dtoa_r+0xb6c>
 8008d6a:	e5b7      	b.n	80088dc <_dtoa_r+0x6e8>
 8008d6c:	9a08      	ldr	r2, [sp, #32]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d1a7      	bne.n	8008cc2 <_dtoa_r+0xace>
 8008d72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008d74:	3301      	adds	r3, #1
 8008d76:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d78:	2331      	movs	r3, #49	@ 0x31
 8008d7a:	7013      	strb	r3, [r2, #0]
 8008d7c:	e5ae      	b.n	80088dc <_dtoa_r+0x6e8>
 8008d7e:	4b15      	ldr	r3, [pc, #84]	@ (8008dd4 <_dtoa_r+0xbe0>)
 8008d80:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008d82:	9308      	str	r3, [sp, #32]
 8008d84:	4b14      	ldr	r3, [pc, #80]	@ (8008dd8 <_dtoa_r+0xbe4>)
 8008d86:	2a00      	cmp	r2, #0
 8008d88:	d001      	beq.n	8008d8e <_dtoa_r+0xb9a>
 8008d8a:	f7ff fa7b 	bl	8008284 <_dtoa_r+0x90>
 8008d8e:	f7ff fa7b 	bl	8008288 <_dtoa_r+0x94>
 8008d92:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	dc00      	bgt.n	8008d9a <_dtoa_r+0xba6>
 8008d98:	e648      	b.n	8008a2c <_dtoa_r+0x838>
 8008d9a:	2001      	movs	r0, #1
 8008d9c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8008d9e:	e665      	b.n	8008a6c <_dtoa_r+0x878>
 8008da0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	dc00      	bgt.n	8008da8 <_dtoa_r+0xbb4>
 8008da6:	e6d6      	b.n	8008b56 <_dtoa_r+0x962>
 8008da8:	2400      	movs	r4, #0
 8008daa:	0031      	movs	r1, r6
 8008dac:	9805      	ldr	r0, [sp, #20]
 8008dae:	f7ff f993 	bl	80080d8 <quorem>
 8008db2:	9b08      	ldr	r3, [sp, #32]
 8008db4:	3030      	adds	r0, #48	@ 0x30
 8008db6:	5518      	strb	r0, [r3, r4]
 8008db8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dba:	3401      	adds	r4, #1
 8008dbc:	0005      	movs	r5, r0
 8008dbe:	429c      	cmp	r4, r3
 8008dc0:	dab6      	bge.n	8008d30 <_dtoa_r+0xb3c>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	220a      	movs	r2, #10
 8008dc6:	9905      	ldr	r1, [sp, #20]
 8008dc8:	9803      	ldr	r0, [sp, #12]
 8008dca:	f000 f975 	bl	80090b8 <__multadd>
 8008dce:	9005      	str	r0, [sp, #20]
 8008dd0:	e7eb      	b.n	8008daa <_dtoa_r+0xbb6>
 8008dd2:	46c0      	nop			@ (mov r8, r8)
 8008dd4:	0800a4dc 	.word	0x0800a4dc
 8008dd8:	0800a4e4 	.word	0x0800a4e4

08008ddc <_free_r>:
 8008ddc:	b570      	push	{r4, r5, r6, lr}
 8008dde:	0005      	movs	r5, r0
 8008de0:	1e0c      	subs	r4, r1, #0
 8008de2:	d010      	beq.n	8008e06 <_free_r+0x2a>
 8008de4:	3c04      	subs	r4, #4
 8008de6:	6823      	ldr	r3, [r4, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	da00      	bge.n	8008dee <_free_r+0x12>
 8008dec:	18e4      	adds	r4, r4, r3
 8008dee:	0028      	movs	r0, r5
 8008df0:	f000 f8ea 	bl	8008fc8 <__malloc_lock>
 8008df4:	4a1d      	ldr	r2, [pc, #116]	@ (8008e6c <_free_r+0x90>)
 8008df6:	6813      	ldr	r3, [r2, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d105      	bne.n	8008e08 <_free_r+0x2c>
 8008dfc:	6063      	str	r3, [r4, #4]
 8008dfe:	6014      	str	r4, [r2, #0]
 8008e00:	0028      	movs	r0, r5
 8008e02:	f000 f8e9 	bl	8008fd8 <__malloc_unlock>
 8008e06:	bd70      	pop	{r4, r5, r6, pc}
 8008e08:	42a3      	cmp	r3, r4
 8008e0a:	d908      	bls.n	8008e1e <_free_r+0x42>
 8008e0c:	6820      	ldr	r0, [r4, #0]
 8008e0e:	1821      	adds	r1, r4, r0
 8008e10:	428b      	cmp	r3, r1
 8008e12:	d1f3      	bne.n	8008dfc <_free_r+0x20>
 8008e14:	6819      	ldr	r1, [r3, #0]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	1809      	adds	r1, r1, r0
 8008e1a:	6021      	str	r1, [r4, #0]
 8008e1c:	e7ee      	b.n	8008dfc <_free_r+0x20>
 8008e1e:	001a      	movs	r2, r3
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <_free_r+0x4e>
 8008e26:	42a3      	cmp	r3, r4
 8008e28:	d9f9      	bls.n	8008e1e <_free_r+0x42>
 8008e2a:	6811      	ldr	r1, [r2, #0]
 8008e2c:	1850      	adds	r0, r2, r1
 8008e2e:	42a0      	cmp	r0, r4
 8008e30:	d10b      	bne.n	8008e4a <_free_r+0x6e>
 8008e32:	6820      	ldr	r0, [r4, #0]
 8008e34:	1809      	adds	r1, r1, r0
 8008e36:	1850      	adds	r0, r2, r1
 8008e38:	6011      	str	r1, [r2, #0]
 8008e3a:	4283      	cmp	r3, r0
 8008e3c:	d1e0      	bne.n	8008e00 <_free_r+0x24>
 8008e3e:	6818      	ldr	r0, [r3, #0]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	1841      	adds	r1, r0, r1
 8008e44:	6011      	str	r1, [r2, #0]
 8008e46:	6053      	str	r3, [r2, #4]
 8008e48:	e7da      	b.n	8008e00 <_free_r+0x24>
 8008e4a:	42a0      	cmp	r0, r4
 8008e4c:	d902      	bls.n	8008e54 <_free_r+0x78>
 8008e4e:	230c      	movs	r3, #12
 8008e50:	602b      	str	r3, [r5, #0]
 8008e52:	e7d5      	b.n	8008e00 <_free_r+0x24>
 8008e54:	6820      	ldr	r0, [r4, #0]
 8008e56:	1821      	adds	r1, r4, r0
 8008e58:	428b      	cmp	r3, r1
 8008e5a:	d103      	bne.n	8008e64 <_free_r+0x88>
 8008e5c:	6819      	ldr	r1, [r3, #0]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	1809      	adds	r1, r1, r0
 8008e62:	6021      	str	r1, [r4, #0]
 8008e64:	6063      	str	r3, [r4, #4]
 8008e66:	6054      	str	r4, [r2, #4]
 8008e68:	e7ca      	b.n	8008e00 <_free_r+0x24>
 8008e6a:	46c0      	nop			@ (mov r8, r8)
 8008e6c:	20000ab4 	.word	0x20000ab4

08008e70 <malloc>:
 8008e70:	b510      	push	{r4, lr}
 8008e72:	4b03      	ldr	r3, [pc, #12]	@ (8008e80 <malloc+0x10>)
 8008e74:	0001      	movs	r1, r0
 8008e76:	6818      	ldr	r0, [r3, #0]
 8008e78:	f000 f826 	bl	8008ec8 <_malloc_r>
 8008e7c:	bd10      	pop	{r4, pc}
 8008e7e:	46c0      	nop			@ (mov r8, r8)
 8008e80:	2000001c 	.word	0x2000001c

08008e84 <sbrk_aligned>:
 8008e84:	b570      	push	{r4, r5, r6, lr}
 8008e86:	4e0f      	ldr	r6, [pc, #60]	@ (8008ec4 <sbrk_aligned+0x40>)
 8008e88:	000d      	movs	r5, r1
 8008e8a:	6831      	ldr	r1, [r6, #0]
 8008e8c:	0004      	movs	r4, r0
 8008e8e:	2900      	cmp	r1, #0
 8008e90:	d102      	bne.n	8008e98 <sbrk_aligned+0x14>
 8008e92:	f001 f855 	bl	8009f40 <_sbrk_r>
 8008e96:	6030      	str	r0, [r6, #0]
 8008e98:	0029      	movs	r1, r5
 8008e9a:	0020      	movs	r0, r4
 8008e9c:	f001 f850 	bl	8009f40 <_sbrk_r>
 8008ea0:	1c43      	adds	r3, r0, #1
 8008ea2:	d103      	bne.n	8008eac <sbrk_aligned+0x28>
 8008ea4:	2501      	movs	r5, #1
 8008ea6:	426d      	negs	r5, r5
 8008ea8:	0028      	movs	r0, r5
 8008eaa:	bd70      	pop	{r4, r5, r6, pc}
 8008eac:	2303      	movs	r3, #3
 8008eae:	1cc5      	adds	r5, r0, #3
 8008eb0:	439d      	bics	r5, r3
 8008eb2:	42a8      	cmp	r0, r5
 8008eb4:	d0f8      	beq.n	8008ea8 <sbrk_aligned+0x24>
 8008eb6:	1a29      	subs	r1, r5, r0
 8008eb8:	0020      	movs	r0, r4
 8008eba:	f001 f841 	bl	8009f40 <_sbrk_r>
 8008ebe:	3001      	adds	r0, #1
 8008ec0:	d1f2      	bne.n	8008ea8 <sbrk_aligned+0x24>
 8008ec2:	e7ef      	b.n	8008ea4 <sbrk_aligned+0x20>
 8008ec4:	20000ab0 	.word	0x20000ab0

08008ec8 <_malloc_r>:
 8008ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008eca:	2203      	movs	r2, #3
 8008ecc:	1ccb      	adds	r3, r1, #3
 8008ece:	4393      	bics	r3, r2
 8008ed0:	3308      	adds	r3, #8
 8008ed2:	0005      	movs	r5, r0
 8008ed4:	001f      	movs	r7, r3
 8008ed6:	2b0c      	cmp	r3, #12
 8008ed8:	d234      	bcs.n	8008f44 <_malloc_r+0x7c>
 8008eda:	270c      	movs	r7, #12
 8008edc:	42b9      	cmp	r1, r7
 8008ede:	d833      	bhi.n	8008f48 <_malloc_r+0x80>
 8008ee0:	0028      	movs	r0, r5
 8008ee2:	f000 f871 	bl	8008fc8 <__malloc_lock>
 8008ee6:	4e37      	ldr	r6, [pc, #220]	@ (8008fc4 <_malloc_r+0xfc>)
 8008ee8:	6833      	ldr	r3, [r6, #0]
 8008eea:	001c      	movs	r4, r3
 8008eec:	2c00      	cmp	r4, #0
 8008eee:	d12f      	bne.n	8008f50 <_malloc_r+0x88>
 8008ef0:	0039      	movs	r1, r7
 8008ef2:	0028      	movs	r0, r5
 8008ef4:	f7ff ffc6 	bl	8008e84 <sbrk_aligned>
 8008ef8:	0004      	movs	r4, r0
 8008efa:	1c43      	adds	r3, r0, #1
 8008efc:	d15f      	bne.n	8008fbe <_malloc_r+0xf6>
 8008efe:	6834      	ldr	r4, [r6, #0]
 8008f00:	9400      	str	r4, [sp, #0]
 8008f02:	9b00      	ldr	r3, [sp, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d14a      	bne.n	8008f9e <_malloc_r+0xd6>
 8008f08:	2c00      	cmp	r4, #0
 8008f0a:	d052      	beq.n	8008fb2 <_malloc_r+0xea>
 8008f0c:	6823      	ldr	r3, [r4, #0]
 8008f0e:	0028      	movs	r0, r5
 8008f10:	18e3      	adds	r3, r4, r3
 8008f12:	9900      	ldr	r1, [sp, #0]
 8008f14:	9301      	str	r3, [sp, #4]
 8008f16:	f001 f813 	bl	8009f40 <_sbrk_r>
 8008f1a:	9b01      	ldr	r3, [sp, #4]
 8008f1c:	4283      	cmp	r3, r0
 8008f1e:	d148      	bne.n	8008fb2 <_malloc_r+0xea>
 8008f20:	6823      	ldr	r3, [r4, #0]
 8008f22:	0028      	movs	r0, r5
 8008f24:	1aff      	subs	r7, r7, r3
 8008f26:	0039      	movs	r1, r7
 8008f28:	f7ff ffac 	bl	8008e84 <sbrk_aligned>
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	d040      	beq.n	8008fb2 <_malloc_r+0xea>
 8008f30:	6823      	ldr	r3, [r4, #0]
 8008f32:	19db      	adds	r3, r3, r7
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	6833      	ldr	r3, [r6, #0]
 8008f38:	685a      	ldr	r2, [r3, #4]
 8008f3a:	2a00      	cmp	r2, #0
 8008f3c:	d133      	bne.n	8008fa6 <_malloc_r+0xde>
 8008f3e:	9b00      	ldr	r3, [sp, #0]
 8008f40:	6033      	str	r3, [r6, #0]
 8008f42:	e019      	b.n	8008f78 <_malloc_r+0xb0>
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	dac9      	bge.n	8008edc <_malloc_r+0x14>
 8008f48:	230c      	movs	r3, #12
 8008f4a:	602b      	str	r3, [r5, #0]
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f50:	6821      	ldr	r1, [r4, #0]
 8008f52:	1bc9      	subs	r1, r1, r7
 8008f54:	d420      	bmi.n	8008f98 <_malloc_r+0xd0>
 8008f56:	290b      	cmp	r1, #11
 8008f58:	d90a      	bls.n	8008f70 <_malloc_r+0xa8>
 8008f5a:	19e2      	adds	r2, r4, r7
 8008f5c:	6027      	str	r7, [r4, #0]
 8008f5e:	42a3      	cmp	r3, r4
 8008f60:	d104      	bne.n	8008f6c <_malloc_r+0xa4>
 8008f62:	6032      	str	r2, [r6, #0]
 8008f64:	6863      	ldr	r3, [r4, #4]
 8008f66:	6011      	str	r1, [r2, #0]
 8008f68:	6053      	str	r3, [r2, #4]
 8008f6a:	e005      	b.n	8008f78 <_malloc_r+0xb0>
 8008f6c:	605a      	str	r2, [r3, #4]
 8008f6e:	e7f9      	b.n	8008f64 <_malloc_r+0x9c>
 8008f70:	6862      	ldr	r2, [r4, #4]
 8008f72:	42a3      	cmp	r3, r4
 8008f74:	d10e      	bne.n	8008f94 <_malloc_r+0xcc>
 8008f76:	6032      	str	r2, [r6, #0]
 8008f78:	0028      	movs	r0, r5
 8008f7a:	f000 f82d 	bl	8008fd8 <__malloc_unlock>
 8008f7e:	0020      	movs	r0, r4
 8008f80:	2207      	movs	r2, #7
 8008f82:	300b      	adds	r0, #11
 8008f84:	1d23      	adds	r3, r4, #4
 8008f86:	4390      	bics	r0, r2
 8008f88:	1ac2      	subs	r2, r0, r3
 8008f8a:	4298      	cmp	r0, r3
 8008f8c:	d0df      	beq.n	8008f4e <_malloc_r+0x86>
 8008f8e:	1a1b      	subs	r3, r3, r0
 8008f90:	50a3      	str	r3, [r4, r2]
 8008f92:	e7dc      	b.n	8008f4e <_malloc_r+0x86>
 8008f94:	605a      	str	r2, [r3, #4]
 8008f96:	e7ef      	b.n	8008f78 <_malloc_r+0xb0>
 8008f98:	0023      	movs	r3, r4
 8008f9a:	6864      	ldr	r4, [r4, #4]
 8008f9c:	e7a6      	b.n	8008eec <_malloc_r+0x24>
 8008f9e:	9c00      	ldr	r4, [sp, #0]
 8008fa0:	6863      	ldr	r3, [r4, #4]
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	e7ad      	b.n	8008f02 <_malloc_r+0x3a>
 8008fa6:	001a      	movs	r2, r3
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	42a3      	cmp	r3, r4
 8008fac:	d1fb      	bne.n	8008fa6 <_malloc_r+0xde>
 8008fae:	2300      	movs	r3, #0
 8008fb0:	e7da      	b.n	8008f68 <_malloc_r+0xa0>
 8008fb2:	230c      	movs	r3, #12
 8008fb4:	0028      	movs	r0, r5
 8008fb6:	602b      	str	r3, [r5, #0]
 8008fb8:	f000 f80e 	bl	8008fd8 <__malloc_unlock>
 8008fbc:	e7c6      	b.n	8008f4c <_malloc_r+0x84>
 8008fbe:	6007      	str	r7, [r0, #0]
 8008fc0:	e7da      	b.n	8008f78 <_malloc_r+0xb0>
 8008fc2:	46c0      	nop			@ (mov r8, r8)
 8008fc4:	20000ab4 	.word	0x20000ab4

08008fc8 <__malloc_lock>:
 8008fc8:	b510      	push	{r4, lr}
 8008fca:	4802      	ldr	r0, [pc, #8]	@ (8008fd4 <__malloc_lock+0xc>)
 8008fcc:	f7ff f877 	bl	80080be <__retarget_lock_acquire_recursive>
 8008fd0:	bd10      	pop	{r4, pc}
 8008fd2:	46c0      	nop			@ (mov r8, r8)
 8008fd4:	20000aac 	.word	0x20000aac

08008fd8 <__malloc_unlock>:
 8008fd8:	b510      	push	{r4, lr}
 8008fda:	4802      	ldr	r0, [pc, #8]	@ (8008fe4 <__malloc_unlock+0xc>)
 8008fdc:	f7ff f870 	bl	80080c0 <__retarget_lock_release_recursive>
 8008fe0:	bd10      	pop	{r4, pc}
 8008fe2:	46c0      	nop			@ (mov r8, r8)
 8008fe4:	20000aac 	.word	0x20000aac

08008fe8 <_Balloc>:
 8008fe8:	b570      	push	{r4, r5, r6, lr}
 8008fea:	69c5      	ldr	r5, [r0, #28]
 8008fec:	0006      	movs	r6, r0
 8008fee:	000c      	movs	r4, r1
 8008ff0:	2d00      	cmp	r5, #0
 8008ff2:	d10e      	bne.n	8009012 <_Balloc+0x2a>
 8008ff4:	2010      	movs	r0, #16
 8008ff6:	f7ff ff3b 	bl	8008e70 <malloc>
 8008ffa:	1e02      	subs	r2, r0, #0
 8008ffc:	61f0      	str	r0, [r6, #28]
 8008ffe:	d104      	bne.n	800900a <_Balloc+0x22>
 8009000:	216b      	movs	r1, #107	@ 0x6b
 8009002:	4b19      	ldr	r3, [pc, #100]	@ (8009068 <_Balloc+0x80>)
 8009004:	4819      	ldr	r0, [pc, #100]	@ (800906c <_Balloc+0x84>)
 8009006:	f000 ffb7 	bl	8009f78 <__assert_func>
 800900a:	6045      	str	r5, [r0, #4]
 800900c:	6085      	str	r5, [r0, #8]
 800900e:	6005      	str	r5, [r0, #0]
 8009010:	60c5      	str	r5, [r0, #12]
 8009012:	69f5      	ldr	r5, [r6, #28]
 8009014:	68eb      	ldr	r3, [r5, #12]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d013      	beq.n	8009042 <_Balloc+0x5a>
 800901a:	69f3      	ldr	r3, [r6, #28]
 800901c:	00a2      	lsls	r2, r4, #2
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	189b      	adds	r3, r3, r2
 8009022:	6818      	ldr	r0, [r3, #0]
 8009024:	2800      	cmp	r0, #0
 8009026:	d118      	bne.n	800905a <_Balloc+0x72>
 8009028:	2101      	movs	r1, #1
 800902a:	000d      	movs	r5, r1
 800902c:	40a5      	lsls	r5, r4
 800902e:	1d6a      	adds	r2, r5, #5
 8009030:	0030      	movs	r0, r6
 8009032:	0092      	lsls	r2, r2, #2
 8009034:	f000 ffbe 	bl	8009fb4 <_calloc_r>
 8009038:	2800      	cmp	r0, #0
 800903a:	d00c      	beq.n	8009056 <_Balloc+0x6e>
 800903c:	6044      	str	r4, [r0, #4]
 800903e:	6085      	str	r5, [r0, #8]
 8009040:	e00d      	b.n	800905e <_Balloc+0x76>
 8009042:	2221      	movs	r2, #33	@ 0x21
 8009044:	2104      	movs	r1, #4
 8009046:	0030      	movs	r0, r6
 8009048:	f000 ffb4 	bl	8009fb4 <_calloc_r>
 800904c:	69f3      	ldr	r3, [r6, #28]
 800904e:	60e8      	str	r0, [r5, #12]
 8009050:	68db      	ldr	r3, [r3, #12]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d1e1      	bne.n	800901a <_Balloc+0x32>
 8009056:	2000      	movs	r0, #0
 8009058:	bd70      	pop	{r4, r5, r6, pc}
 800905a:	6802      	ldr	r2, [r0, #0]
 800905c:	601a      	str	r2, [r3, #0]
 800905e:	2300      	movs	r3, #0
 8009060:	6103      	str	r3, [r0, #16]
 8009062:	60c3      	str	r3, [r0, #12]
 8009064:	e7f8      	b.n	8009058 <_Balloc+0x70>
 8009066:	46c0      	nop			@ (mov r8, r8)
 8009068:	0800a4e9 	.word	0x0800a4e9
 800906c:	0800a569 	.word	0x0800a569

08009070 <_Bfree>:
 8009070:	b570      	push	{r4, r5, r6, lr}
 8009072:	69c6      	ldr	r6, [r0, #28]
 8009074:	0005      	movs	r5, r0
 8009076:	000c      	movs	r4, r1
 8009078:	2e00      	cmp	r6, #0
 800907a:	d10e      	bne.n	800909a <_Bfree+0x2a>
 800907c:	2010      	movs	r0, #16
 800907e:	f7ff fef7 	bl	8008e70 <malloc>
 8009082:	1e02      	subs	r2, r0, #0
 8009084:	61e8      	str	r0, [r5, #28]
 8009086:	d104      	bne.n	8009092 <_Bfree+0x22>
 8009088:	218f      	movs	r1, #143	@ 0x8f
 800908a:	4b09      	ldr	r3, [pc, #36]	@ (80090b0 <_Bfree+0x40>)
 800908c:	4809      	ldr	r0, [pc, #36]	@ (80090b4 <_Bfree+0x44>)
 800908e:	f000 ff73 	bl	8009f78 <__assert_func>
 8009092:	6046      	str	r6, [r0, #4]
 8009094:	6086      	str	r6, [r0, #8]
 8009096:	6006      	str	r6, [r0, #0]
 8009098:	60c6      	str	r6, [r0, #12]
 800909a:	2c00      	cmp	r4, #0
 800909c:	d007      	beq.n	80090ae <_Bfree+0x3e>
 800909e:	69eb      	ldr	r3, [r5, #28]
 80090a0:	6862      	ldr	r2, [r4, #4]
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	0092      	lsls	r2, r2, #2
 80090a6:	189b      	adds	r3, r3, r2
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	6022      	str	r2, [r4, #0]
 80090ac:	601c      	str	r4, [r3, #0]
 80090ae:	bd70      	pop	{r4, r5, r6, pc}
 80090b0:	0800a4e9 	.word	0x0800a4e9
 80090b4:	0800a569 	.word	0x0800a569

080090b8 <__multadd>:
 80090b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ba:	000f      	movs	r7, r1
 80090bc:	9001      	str	r0, [sp, #4]
 80090be:	000c      	movs	r4, r1
 80090c0:	001e      	movs	r6, r3
 80090c2:	2000      	movs	r0, #0
 80090c4:	690d      	ldr	r5, [r1, #16]
 80090c6:	3714      	adds	r7, #20
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	3001      	adds	r0, #1
 80090cc:	b299      	uxth	r1, r3
 80090ce:	4351      	muls	r1, r2
 80090d0:	0c1b      	lsrs	r3, r3, #16
 80090d2:	4353      	muls	r3, r2
 80090d4:	1989      	adds	r1, r1, r6
 80090d6:	0c0e      	lsrs	r6, r1, #16
 80090d8:	199b      	adds	r3, r3, r6
 80090da:	0c1e      	lsrs	r6, r3, #16
 80090dc:	b289      	uxth	r1, r1
 80090de:	041b      	lsls	r3, r3, #16
 80090e0:	185b      	adds	r3, r3, r1
 80090e2:	c708      	stmia	r7!, {r3}
 80090e4:	4285      	cmp	r5, r0
 80090e6:	dcef      	bgt.n	80090c8 <__multadd+0x10>
 80090e8:	2e00      	cmp	r6, #0
 80090ea:	d022      	beq.n	8009132 <__multadd+0x7a>
 80090ec:	68a3      	ldr	r3, [r4, #8]
 80090ee:	42ab      	cmp	r3, r5
 80090f0:	dc19      	bgt.n	8009126 <__multadd+0x6e>
 80090f2:	6861      	ldr	r1, [r4, #4]
 80090f4:	9801      	ldr	r0, [sp, #4]
 80090f6:	3101      	adds	r1, #1
 80090f8:	f7ff ff76 	bl	8008fe8 <_Balloc>
 80090fc:	1e07      	subs	r7, r0, #0
 80090fe:	d105      	bne.n	800910c <__multadd+0x54>
 8009100:	003a      	movs	r2, r7
 8009102:	21ba      	movs	r1, #186	@ 0xba
 8009104:	4b0c      	ldr	r3, [pc, #48]	@ (8009138 <__multadd+0x80>)
 8009106:	480d      	ldr	r0, [pc, #52]	@ (800913c <__multadd+0x84>)
 8009108:	f000 ff36 	bl	8009f78 <__assert_func>
 800910c:	0021      	movs	r1, r4
 800910e:	6922      	ldr	r2, [r4, #16]
 8009110:	310c      	adds	r1, #12
 8009112:	3202      	adds	r2, #2
 8009114:	0092      	lsls	r2, r2, #2
 8009116:	300c      	adds	r0, #12
 8009118:	f000 ff24 	bl	8009f64 <memcpy>
 800911c:	0021      	movs	r1, r4
 800911e:	9801      	ldr	r0, [sp, #4]
 8009120:	f7ff ffa6 	bl	8009070 <_Bfree>
 8009124:	003c      	movs	r4, r7
 8009126:	1d2b      	adds	r3, r5, #4
 8009128:	009b      	lsls	r3, r3, #2
 800912a:	18e3      	adds	r3, r4, r3
 800912c:	3501      	adds	r5, #1
 800912e:	605e      	str	r6, [r3, #4]
 8009130:	6125      	str	r5, [r4, #16]
 8009132:	0020      	movs	r0, r4
 8009134:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009136:	46c0      	nop			@ (mov r8, r8)
 8009138:	0800a558 	.word	0x0800a558
 800913c:	0800a569 	.word	0x0800a569

08009140 <__hi0bits>:
 8009140:	2280      	movs	r2, #128	@ 0x80
 8009142:	0003      	movs	r3, r0
 8009144:	0252      	lsls	r2, r2, #9
 8009146:	2000      	movs	r0, #0
 8009148:	4293      	cmp	r3, r2
 800914a:	d201      	bcs.n	8009150 <__hi0bits+0x10>
 800914c:	041b      	lsls	r3, r3, #16
 800914e:	3010      	adds	r0, #16
 8009150:	2280      	movs	r2, #128	@ 0x80
 8009152:	0452      	lsls	r2, r2, #17
 8009154:	4293      	cmp	r3, r2
 8009156:	d201      	bcs.n	800915c <__hi0bits+0x1c>
 8009158:	3008      	adds	r0, #8
 800915a:	021b      	lsls	r3, r3, #8
 800915c:	2280      	movs	r2, #128	@ 0x80
 800915e:	0552      	lsls	r2, r2, #21
 8009160:	4293      	cmp	r3, r2
 8009162:	d201      	bcs.n	8009168 <__hi0bits+0x28>
 8009164:	3004      	adds	r0, #4
 8009166:	011b      	lsls	r3, r3, #4
 8009168:	2280      	movs	r2, #128	@ 0x80
 800916a:	05d2      	lsls	r2, r2, #23
 800916c:	4293      	cmp	r3, r2
 800916e:	d201      	bcs.n	8009174 <__hi0bits+0x34>
 8009170:	3002      	adds	r0, #2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	2b00      	cmp	r3, #0
 8009176:	db03      	blt.n	8009180 <__hi0bits+0x40>
 8009178:	3001      	adds	r0, #1
 800917a:	4213      	tst	r3, r2
 800917c:	d100      	bne.n	8009180 <__hi0bits+0x40>
 800917e:	2020      	movs	r0, #32
 8009180:	4770      	bx	lr

08009182 <__lo0bits>:
 8009182:	6803      	ldr	r3, [r0, #0]
 8009184:	0001      	movs	r1, r0
 8009186:	2207      	movs	r2, #7
 8009188:	0018      	movs	r0, r3
 800918a:	4010      	ands	r0, r2
 800918c:	4213      	tst	r3, r2
 800918e:	d00d      	beq.n	80091ac <__lo0bits+0x2a>
 8009190:	3a06      	subs	r2, #6
 8009192:	2000      	movs	r0, #0
 8009194:	4213      	tst	r3, r2
 8009196:	d105      	bne.n	80091a4 <__lo0bits+0x22>
 8009198:	3002      	adds	r0, #2
 800919a:	4203      	tst	r3, r0
 800919c:	d003      	beq.n	80091a6 <__lo0bits+0x24>
 800919e:	40d3      	lsrs	r3, r2
 80091a0:	0010      	movs	r0, r2
 80091a2:	600b      	str	r3, [r1, #0]
 80091a4:	4770      	bx	lr
 80091a6:	089b      	lsrs	r3, r3, #2
 80091a8:	600b      	str	r3, [r1, #0]
 80091aa:	e7fb      	b.n	80091a4 <__lo0bits+0x22>
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	2a00      	cmp	r2, #0
 80091b0:	d101      	bne.n	80091b6 <__lo0bits+0x34>
 80091b2:	2010      	movs	r0, #16
 80091b4:	0c1b      	lsrs	r3, r3, #16
 80091b6:	b2da      	uxtb	r2, r3
 80091b8:	2a00      	cmp	r2, #0
 80091ba:	d101      	bne.n	80091c0 <__lo0bits+0x3e>
 80091bc:	3008      	adds	r0, #8
 80091be:	0a1b      	lsrs	r3, r3, #8
 80091c0:	071a      	lsls	r2, r3, #28
 80091c2:	d101      	bne.n	80091c8 <__lo0bits+0x46>
 80091c4:	3004      	adds	r0, #4
 80091c6:	091b      	lsrs	r3, r3, #4
 80091c8:	079a      	lsls	r2, r3, #30
 80091ca:	d101      	bne.n	80091d0 <__lo0bits+0x4e>
 80091cc:	3002      	adds	r0, #2
 80091ce:	089b      	lsrs	r3, r3, #2
 80091d0:	07da      	lsls	r2, r3, #31
 80091d2:	d4e9      	bmi.n	80091a8 <__lo0bits+0x26>
 80091d4:	3001      	adds	r0, #1
 80091d6:	085b      	lsrs	r3, r3, #1
 80091d8:	d1e6      	bne.n	80091a8 <__lo0bits+0x26>
 80091da:	2020      	movs	r0, #32
 80091dc:	e7e2      	b.n	80091a4 <__lo0bits+0x22>
	...

080091e0 <__i2b>:
 80091e0:	b510      	push	{r4, lr}
 80091e2:	000c      	movs	r4, r1
 80091e4:	2101      	movs	r1, #1
 80091e6:	f7ff feff 	bl	8008fe8 <_Balloc>
 80091ea:	2800      	cmp	r0, #0
 80091ec:	d107      	bne.n	80091fe <__i2b+0x1e>
 80091ee:	2146      	movs	r1, #70	@ 0x46
 80091f0:	4c05      	ldr	r4, [pc, #20]	@ (8009208 <__i2b+0x28>)
 80091f2:	0002      	movs	r2, r0
 80091f4:	4b05      	ldr	r3, [pc, #20]	@ (800920c <__i2b+0x2c>)
 80091f6:	0020      	movs	r0, r4
 80091f8:	31ff      	adds	r1, #255	@ 0xff
 80091fa:	f000 febd 	bl	8009f78 <__assert_func>
 80091fe:	2301      	movs	r3, #1
 8009200:	6144      	str	r4, [r0, #20]
 8009202:	6103      	str	r3, [r0, #16]
 8009204:	bd10      	pop	{r4, pc}
 8009206:	46c0      	nop			@ (mov r8, r8)
 8009208:	0800a569 	.word	0x0800a569
 800920c:	0800a558 	.word	0x0800a558

08009210 <__multiply>:
 8009210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009212:	0014      	movs	r4, r2
 8009214:	690a      	ldr	r2, [r1, #16]
 8009216:	6923      	ldr	r3, [r4, #16]
 8009218:	000d      	movs	r5, r1
 800921a:	b08b      	sub	sp, #44	@ 0x2c
 800921c:	429a      	cmp	r2, r3
 800921e:	db02      	blt.n	8009226 <__multiply+0x16>
 8009220:	0023      	movs	r3, r4
 8009222:	000c      	movs	r4, r1
 8009224:	001d      	movs	r5, r3
 8009226:	6927      	ldr	r7, [r4, #16]
 8009228:	692e      	ldr	r6, [r5, #16]
 800922a:	6861      	ldr	r1, [r4, #4]
 800922c:	19bb      	adds	r3, r7, r6
 800922e:	9303      	str	r3, [sp, #12]
 8009230:	68a3      	ldr	r3, [r4, #8]
 8009232:	19ba      	adds	r2, r7, r6
 8009234:	4293      	cmp	r3, r2
 8009236:	da00      	bge.n	800923a <__multiply+0x2a>
 8009238:	3101      	adds	r1, #1
 800923a:	f7ff fed5 	bl	8008fe8 <_Balloc>
 800923e:	9002      	str	r0, [sp, #8]
 8009240:	2800      	cmp	r0, #0
 8009242:	d106      	bne.n	8009252 <__multiply+0x42>
 8009244:	21b1      	movs	r1, #177	@ 0xb1
 8009246:	4b49      	ldr	r3, [pc, #292]	@ (800936c <__multiply+0x15c>)
 8009248:	4849      	ldr	r0, [pc, #292]	@ (8009370 <__multiply+0x160>)
 800924a:	9a02      	ldr	r2, [sp, #8]
 800924c:	0049      	lsls	r1, r1, #1
 800924e:	f000 fe93 	bl	8009f78 <__assert_func>
 8009252:	9b02      	ldr	r3, [sp, #8]
 8009254:	2200      	movs	r2, #0
 8009256:	3314      	adds	r3, #20
 8009258:	469c      	mov	ip, r3
 800925a:	19bb      	adds	r3, r7, r6
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	4463      	add	r3, ip
 8009260:	9304      	str	r3, [sp, #16]
 8009262:	4663      	mov	r3, ip
 8009264:	9904      	ldr	r1, [sp, #16]
 8009266:	428b      	cmp	r3, r1
 8009268:	d32a      	bcc.n	80092c0 <__multiply+0xb0>
 800926a:	0023      	movs	r3, r4
 800926c:	00bf      	lsls	r7, r7, #2
 800926e:	3314      	adds	r3, #20
 8009270:	3514      	adds	r5, #20
 8009272:	9308      	str	r3, [sp, #32]
 8009274:	00b6      	lsls	r6, r6, #2
 8009276:	19db      	adds	r3, r3, r7
 8009278:	9305      	str	r3, [sp, #20]
 800927a:	19ab      	adds	r3, r5, r6
 800927c:	9309      	str	r3, [sp, #36]	@ 0x24
 800927e:	2304      	movs	r3, #4
 8009280:	9306      	str	r3, [sp, #24]
 8009282:	0023      	movs	r3, r4
 8009284:	9a05      	ldr	r2, [sp, #20]
 8009286:	3315      	adds	r3, #21
 8009288:	9501      	str	r5, [sp, #4]
 800928a:	429a      	cmp	r2, r3
 800928c:	d305      	bcc.n	800929a <__multiply+0x8a>
 800928e:	1b13      	subs	r3, r2, r4
 8009290:	3b15      	subs	r3, #21
 8009292:	089b      	lsrs	r3, r3, #2
 8009294:	3301      	adds	r3, #1
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	9306      	str	r3, [sp, #24]
 800929a:	9b01      	ldr	r3, [sp, #4]
 800929c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800929e:	4293      	cmp	r3, r2
 80092a0:	d310      	bcc.n	80092c4 <__multiply+0xb4>
 80092a2:	9b03      	ldr	r3, [sp, #12]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	dd05      	ble.n	80092b4 <__multiply+0xa4>
 80092a8:	9b04      	ldr	r3, [sp, #16]
 80092aa:	3b04      	subs	r3, #4
 80092ac:	9304      	str	r3, [sp, #16]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d056      	beq.n	8009362 <__multiply+0x152>
 80092b4:	9b02      	ldr	r3, [sp, #8]
 80092b6:	9a03      	ldr	r2, [sp, #12]
 80092b8:	0018      	movs	r0, r3
 80092ba:	611a      	str	r2, [r3, #16]
 80092bc:	b00b      	add	sp, #44	@ 0x2c
 80092be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092c0:	c304      	stmia	r3!, {r2}
 80092c2:	e7cf      	b.n	8009264 <__multiply+0x54>
 80092c4:	9b01      	ldr	r3, [sp, #4]
 80092c6:	6818      	ldr	r0, [r3, #0]
 80092c8:	b280      	uxth	r0, r0
 80092ca:	2800      	cmp	r0, #0
 80092cc:	d01e      	beq.n	800930c <__multiply+0xfc>
 80092ce:	4667      	mov	r7, ip
 80092d0:	2500      	movs	r5, #0
 80092d2:	9e08      	ldr	r6, [sp, #32]
 80092d4:	ce02      	ldmia	r6!, {r1}
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	9307      	str	r3, [sp, #28]
 80092da:	b28b      	uxth	r3, r1
 80092dc:	4343      	muls	r3, r0
 80092de:	001a      	movs	r2, r3
 80092e0:	466b      	mov	r3, sp
 80092e2:	0c09      	lsrs	r1, r1, #16
 80092e4:	8b9b      	ldrh	r3, [r3, #28]
 80092e6:	4341      	muls	r1, r0
 80092e8:	18d3      	adds	r3, r2, r3
 80092ea:	9a07      	ldr	r2, [sp, #28]
 80092ec:	195b      	adds	r3, r3, r5
 80092ee:	0c12      	lsrs	r2, r2, #16
 80092f0:	1889      	adds	r1, r1, r2
 80092f2:	0c1a      	lsrs	r2, r3, #16
 80092f4:	188a      	adds	r2, r1, r2
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	0c15      	lsrs	r5, r2, #16
 80092fa:	0412      	lsls	r2, r2, #16
 80092fc:	431a      	orrs	r2, r3
 80092fe:	9b05      	ldr	r3, [sp, #20]
 8009300:	c704      	stmia	r7!, {r2}
 8009302:	42b3      	cmp	r3, r6
 8009304:	d8e6      	bhi.n	80092d4 <__multiply+0xc4>
 8009306:	4663      	mov	r3, ip
 8009308:	9a06      	ldr	r2, [sp, #24]
 800930a:	509d      	str	r5, [r3, r2]
 800930c:	9b01      	ldr	r3, [sp, #4]
 800930e:	6818      	ldr	r0, [r3, #0]
 8009310:	0c00      	lsrs	r0, r0, #16
 8009312:	d020      	beq.n	8009356 <__multiply+0x146>
 8009314:	4663      	mov	r3, ip
 8009316:	0025      	movs	r5, r4
 8009318:	4661      	mov	r1, ip
 800931a:	2700      	movs	r7, #0
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	3514      	adds	r5, #20
 8009320:	682a      	ldr	r2, [r5, #0]
 8009322:	680e      	ldr	r6, [r1, #0]
 8009324:	b292      	uxth	r2, r2
 8009326:	4342      	muls	r2, r0
 8009328:	0c36      	lsrs	r6, r6, #16
 800932a:	1992      	adds	r2, r2, r6
 800932c:	19d2      	adds	r2, r2, r7
 800932e:	0416      	lsls	r6, r2, #16
 8009330:	b29b      	uxth	r3, r3
 8009332:	431e      	orrs	r6, r3
 8009334:	600e      	str	r6, [r1, #0]
 8009336:	cd40      	ldmia	r5!, {r6}
 8009338:	684b      	ldr	r3, [r1, #4]
 800933a:	0c36      	lsrs	r6, r6, #16
 800933c:	4346      	muls	r6, r0
 800933e:	b29b      	uxth	r3, r3
 8009340:	0c12      	lsrs	r2, r2, #16
 8009342:	18f3      	adds	r3, r6, r3
 8009344:	189b      	adds	r3, r3, r2
 8009346:	9a05      	ldr	r2, [sp, #20]
 8009348:	0c1f      	lsrs	r7, r3, #16
 800934a:	3104      	adds	r1, #4
 800934c:	42aa      	cmp	r2, r5
 800934e:	d8e7      	bhi.n	8009320 <__multiply+0x110>
 8009350:	4662      	mov	r2, ip
 8009352:	9906      	ldr	r1, [sp, #24]
 8009354:	5053      	str	r3, [r2, r1]
 8009356:	9b01      	ldr	r3, [sp, #4]
 8009358:	3304      	adds	r3, #4
 800935a:	9301      	str	r3, [sp, #4]
 800935c:	2304      	movs	r3, #4
 800935e:	449c      	add	ip, r3
 8009360:	e79b      	b.n	800929a <__multiply+0x8a>
 8009362:	9b03      	ldr	r3, [sp, #12]
 8009364:	3b01      	subs	r3, #1
 8009366:	9303      	str	r3, [sp, #12]
 8009368:	e79b      	b.n	80092a2 <__multiply+0x92>
 800936a:	46c0      	nop			@ (mov r8, r8)
 800936c:	0800a558 	.word	0x0800a558
 8009370:	0800a569 	.word	0x0800a569

08009374 <__pow5mult>:
 8009374:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009376:	2303      	movs	r3, #3
 8009378:	0015      	movs	r5, r2
 800937a:	0007      	movs	r7, r0
 800937c:	000e      	movs	r6, r1
 800937e:	401a      	ands	r2, r3
 8009380:	421d      	tst	r5, r3
 8009382:	d008      	beq.n	8009396 <__pow5mult+0x22>
 8009384:	4925      	ldr	r1, [pc, #148]	@ (800941c <__pow5mult+0xa8>)
 8009386:	3a01      	subs	r2, #1
 8009388:	0092      	lsls	r2, r2, #2
 800938a:	5852      	ldr	r2, [r2, r1]
 800938c:	2300      	movs	r3, #0
 800938e:	0031      	movs	r1, r6
 8009390:	f7ff fe92 	bl	80090b8 <__multadd>
 8009394:	0006      	movs	r6, r0
 8009396:	10ad      	asrs	r5, r5, #2
 8009398:	d03d      	beq.n	8009416 <__pow5mult+0xa2>
 800939a:	69fc      	ldr	r4, [r7, #28]
 800939c:	2c00      	cmp	r4, #0
 800939e:	d10f      	bne.n	80093c0 <__pow5mult+0x4c>
 80093a0:	2010      	movs	r0, #16
 80093a2:	f7ff fd65 	bl	8008e70 <malloc>
 80093a6:	1e02      	subs	r2, r0, #0
 80093a8:	61f8      	str	r0, [r7, #28]
 80093aa:	d105      	bne.n	80093b8 <__pow5mult+0x44>
 80093ac:	21b4      	movs	r1, #180	@ 0xb4
 80093ae:	4b1c      	ldr	r3, [pc, #112]	@ (8009420 <__pow5mult+0xac>)
 80093b0:	481c      	ldr	r0, [pc, #112]	@ (8009424 <__pow5mult+0xb0>)
 80093b2:	31ff      	adds	r1, #255	@ 0xff
 80093b4:	f000 fde0 	bl	8009f78 <__assert_func>
 80093b8:	6044      	str	r4, [r0, #4]
 80093ba:	6084      	str	r4, [r0, #8]
 80093bc:	6004      	str	r4, [r0, #0]
 80093be:	60c4      	str	r4, [r0, #12]
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	689c      	ldr	r4, [r3, #8]
 80093c4:	9301      	str	r3, [sp, #4]
 80093c6:	2c00      	cmp	r4, #0
 80093c8:	d108      	bne.n	80093dc <__pow5mult+0x68>
 80093ca:	0038      	movs	r0, r7
 80093cc:	4916      	ldr	r1, [pc, #88]	@ (8009428 <__pow5mult+0xb4>)
 80093ce:	f7ff ff07 	bl	80091e0 <__i2b>
 80093d2:	9b01      	ldr	r3, [sp, #4]
 80093d4:	0004      	movs	r4, r0
 80093d6:	6098      	str	r0, [r3, #8]
 80093d8:	2300      	movs	r3, #0
 80093da:	6003      	str	r3, [r0, #0]
 80093dc:	2301      	movs	r3, #1
 80093de:	421d      	tst	r5, r3
 80093e0:	d00a      	beq.n	80093f8 <__pow5mult+0x84>
 80093e2:	0031      	movs	r1, r6
 80093e4:	0022      	movs	r2, r4
 80093e6:	0038      	movs	r0, r7
 80093e8:	f7ff ff12 	bl	8009210 <__multiply>
 80093ec:	0031      	movs	r1, r6
 80093ee:	9001      	str	r0, [sp, #4]
 80093f0:	0038      	movs	r0, r7
 80093f2:	f7ff fe3d 	bl	8009070 <_Bfree>
 80093f6:	9e01      	ldr	r6, [sp, #4]
 80093f8:	106d      	asrs	r5, r5, #1
 80093fa:	d00c      	beq.n	8009416 <__pow5mult+0xa2>
 80093fc:	6820      	ldr	r0, [r4, #0]
 80093fe:	2800      	cmp	r0, #0
 8009400:	d107      	bne.n	8009412 <__pow5mult+0x9e>
 8009402:	0022      	movs	r2, r4
 8009404:	0021      	movs	r1, r4
 8009406:	0038      	movs	r0, r7
 8009408:	f7ff ff02 	bl	8009210 <__multiply>
 800940c:	2300      	movs	r3, #0
 800940e:	6020      	str	r0, [r4, #0]
 8009410:	6003      	str	r3, [r0, #0]
 8009412:	0004      	movs	r4, r0
 8009414:	e7e2      	b.n	80093dc <__pow5mult+0x68>
 8009416:	0030      	movs	r0, r6
 8009418:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800941a:	46c0      	nop			@ (mov r8, r8)
 800941c:	0800a5c4 	.word	0x0800a5c4
 8009420:	0800a4e9 	.word	0x0800a4e9
 8009424:	0800a569 	.word	0x0800a569
 8009428:	00000271 	.word	0x00000271

0800942c <__lshift>:
 800942c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800942e:	000c      	movs	r4, r1
 8009430:	0016      	movs	r6, r2
 8009432:	6923      	ldr	r3, [r4, #16]
 8009434:	1157      	asrs	r7, r2, #5
 8009436:	b085      	sub	sp, #20
 8009438:	18fb      	adds	r3, r7, r3
 800943a:	9301      	str	r3, [sp, #4]
 800943c:	3301      	adds	r3, #1
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	6849      	ldr	r1, [r1, #4]
 8009442:	68a3      	ldr	r3, [r4, #8]
 8009444:	9002      	str	r0, [sp, #8]
 8009446:	9a00      	ldr	r2, [sp, #0]
 8009448:	4293      	cmp	r3, r2
 800944a:	db10      	blt.n	800946e <__lshift+0x42>
 800944c:	9802      	ldr	r0, [sp, #8]
 800944e:	f7ff fdcb 	bl	8008fe8 <_Balloc>
 8009452:	2300      	movs	r3, #0
 8009454:	0001      	movs	r1, r0
 8009456:	0005      	movs	r5, r0
 8009458:	001a      	movs	r2, r3
 800945a:	3114      	adds	r1, #20
 800945c:	4298      	cmp	r0, r3
 800945e:	d10c      	bne.n	800947a <__lshift+0x4e>
 8009460:	21ef      	movs	r1, #239	@ 0xef
 8009462:	002a      	movs	r2, r5
 8009464:	4b25      	ldr	r3, [pc, #148]	@ (80094fc <__lshift+0xd0>)
 8009466:	4826      	ldr	r0, [pc, #152]	@ (8009500 <__lshift+0xd4>)
 8009468:	0049      	lsls	r1, r1, #1
 800946a:	f000 fd85 	bl	8009f78 <__assert_func>
 800946e:	3101      	adds	r1, #1
 8009470:	005b      	lsls	r3, r3, #1
 8009472:	e7e8      	b.n	8009446 <__lshift+0x1a>
 8009474:	0098      	lsls	r0, r3, #2
 8009476:	500a      	str	r2, [r1, r0]
 8009478:	3301      	adds	r3, #1
 800947a:	42bb      	cmp	r3, r7
 800947c:	dbfa      	blt.n	8009474 <__lshift+0x48>
 800947e:	43fb      	mvns	r3, r7
 8009480:	17db      	asrs	r3, r3, #31
 8009482:	401f      	ands	r7, r3
 8009484:	00bf      	lsls	r7, r7, #2
 8009486:	0023      	movs	r3, r4
 8009488:	201f      	movs	r0, #31
 800948a:	19c9      	adds	r1, r1, r7
 800948c:	0037      	movs	r7, r6
 800948e:	6922      	ldr	r2, [r4, #16]
 8009490:	3314      	adds	r3, #20
 8009492:	0092      	lsls	r2, r2, #2
 8009494:	189a      	adds	r2, r3, r2
 8009496:	4007      	ands	r7, r0
 8009498:	4206      	tst	r6, r0
 800949a:	d029      	beq.n	80094f0 <__lshift+0xc4>
 800949c:	3001      	adds	r0, #1
 800949e:	1bc0      	subs	r0, r0, r7
 80094a0:	9003      	str	r0, [sp, #12]
 80094a2:	468c      	mov	ip, r1
 80094a4:	2000      	movs	r0, #0
 80094a6:	681e      	ldr	r6, [r3, #0]
 80094a8:	40be      	lsls	r6, r7
 80094aa:	4306      	orrs	r6, r0
 80094ac:	4660      	mov	r0, ip
 80094ae:	c040      	stmia	r0!, {r6}
 80094b0:	4684      	mov	ip, r0
 80094b2:	9e03      	ldr	r6, [sp, #12]
 80094b4:	cb01      	ldmia	r3!, {r0}
 80094b6:	40f0      	lsrs	r0, r6
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d8f4      	bhi.n	80094a6 <__lshift+0x7a>
 80094bc:	0026      	movs	r6, r4
 80094be:	3615      	adds	r6, #21
 80094c0:	2304      	movs	r3, #4
 80094c2:	42b2      	cmp	r2, r6
 80094c4:	d304      	bcc.n	80094d0 <__lshift+0xa4>
 80094c6:	1b13      	subs	r3, r2, r4
 80094c8:	3b15      	subs	r3, #21
 80094ca:	089b      	lsrs	r3, r3, #2
 80094cc:	3301      	adds	r3, #1
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	50c8      	str	r0, [r1, r3]
 80094d2:	2800      	cmp	r0, #0
 80094d4:	d002      	beq.n	80094dc <__lshift+0xb0>
 80094d6:	9b01      	ldr	r3, [sp, #4]
 80094d8:	3302      	adds	r3, #2
 80094da:	9300      	str	r3, [sp, #0]
 80094dc:	9b00      	ldr	r3, [sp, #0]
 80094de:	9802      	ldr	r0, [sp, #8]
 80094e0:	3b01      	subs	r3, #1
 80094e2:	0021      	movs	r1, r4
 80094e4:	612b      	str	r3, [r5, #16]
 80094e6:	f7ff fdc3 	bl	8009070 <_Bfree>
 80094ea:	0028      	movs	r0, r5
 80094ec:	b005      	add	sp, #20
 80094ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094f0:	cb01      	ldmia	r3!, {r0}
 80094f2:	c101      	stmia	r1!, {r0}
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d8fb      	bhi.n	80094f0 <__lshift+0xc4>
 80094f8:	e7f0      	b.n	80094dc <__lshift+0xb0>
 80094fa:	46c0      	nop			@ (mov r8, r8)
 80094fc:	0800a558 	.word	0x0800a558
 8009500:	0800a569 	.word	0x0800a569

08009504 <__mcmp>:
 8009504:	b530      	push	{r4, r5, lr}
 8009506:	690b      	ldr	r3, [r1, #16]
 8009508:	6904      	ldr	r4, [r0, #16]
 800950a:	0002      	movs	r2, r0
 800950c:	1ae0      	subs	r0, r4, r3
 800950e:	429c      	cmp	r4, r3
 8009510:	d10f      	bne.n	8009532 <__mcmp+0x2e>
 8009512:	3214      	adds	r2, #20
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	3114      	adds	r1, #20
 8009518:	0014      	movs	r4, r2
 800951a:	18c9      	adds	r1, r1, r3
 800951c:	18d2      	adds	r2, r2, r3
 800951e:	3a04      	subs	r2, #4
 8009520:	3904      	subs	r1, #4
 8009522:	6815      	ldr	r5, [r2, #0]
 8009524:	680b      	ldr	r3, [r1, #0]
 8009526:	429d      	cmp	r5, r3
 8009528:	d004      	beq.n	8009534 <__mcmp+0x30>
 800952a:	2001      	movs	r0, #1
 800952c:	429d      	cmp	r5, r3
 800952e:	d200      	bcs.n	8009532 <__mcmp+0x2e>
 8009530:	3802      	subs	r0, #2
 8009532:	bd30      	pop	{r4, r5, pc}
 8009534:	4294      	cmp	r4, r2
 8009536:	d3f2      	bcc.n	800951e <__mcmp+0x1a>
 8009538:	e7fb      	b.n	8009532 <__mcmp+0x2e>
	...

0800953c <__mdiff>:
 800953c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800953e:	000c      	movs	r4, r1
 8009540:	b087      	sub	sp, #28
 8009542:	9000      	str	r0, [sp, #0]
 8009544:	0011      	movs	r1, r2
 8009546:	0020      	movs	r0, r4
 8009548:	0017      	movs	r7, r2
 800954a:	f7ff ffdb 	bl	8009504 <__mcmp>
 800954e:	1e05      	subs	r5, r0, #0
 8009550:	d110      	bne.n	8009574 <__mdiff+0x38>
 8009552:	0001      	movs	r1, r0
 8009554:	9800      	ldr	r0, [sp, #0]
 8009556:	f7ff fd47 	bl	8008fe8 <_Balloc>
 800955a:	1e02      	subs	r2, r0, #0
 800955c:	d104      	bne.n	8009568 <__mdiff+0x2c>
 800955e:	4b40      	ldr	r3, [pc, #256]	@ (8009660 <__mdiff+0x124>)
 8009560:	4840      	ldr	r0, [pc, #256]	@ (8009664 <__mdiff+0x128>)
 8009562:	4941      	ldr	r1, [pc, #260]	@ (8009668 <__mdiff+0x12c>)
 8009564:	f000 fd08 	bl	8009f78 <__assert_func>
 8009568:	2301      	movs	r3, #1
 800956a:	6145      	str	r5, [r0, #20]
 800956c:	6103      	str	r3, [r0, #16]
 800956e:	0010      	movs	r0, r2
 8009570:	b007      	add	sp, #28
 8009572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009574:	2600      	movs	r6, #0
 8009576:	42b0      	cmp	r0, r6
 8009578:	da03      	bge.n	8009582 <__mdiff+0x46>
 800957a:	0023      	movs	r3, r4
 800957c:	003c      	movs	r4, r7
 800957e:	001f      	movs	r7, r3
 8009580:	3601      	adds	r6, #1
 8009582:	6861      	ldr	r1, [r4, #4]
 8009584:	9800      	ldr	r0, [sp, #0]
 8009586:	f7ff fd2f 	bl	8008fe8 <_Balloc>
 800958a:	1e02      	subs	r2, r0, #0
 800958c:	d103      	bne.n	8009596 <__mdiff+0x5a>
 800958e:	4b34      	ldr	r3, [pc, #208]	@ (8009660 <__mdiff+0x124>)
 8009590:	4834      	ldr	r0, [pc, #208]	@ (8009664 <__mdiff+0x128>)
 8009592:	4936      	ldr	r1, [pc, #216]	@ (800966c <__mdiff+0x130>)
 8009594:	e7e6      	b.n	8009564 <__mdiff+0x28>
 8009596:	6923      	ldr	r3, [r4, #16]
 8009598:	3414      	adds	r4, #20
 800959a:	9300      	str	r3, [sp, #0]
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	18e3      	adds	r3, r4, r3
 80095a0:	0021      	movs	r1, r4
 80095a2:	9401      	str	r4, [sp, #4]
 80095a4:	003c      	movs	r4, r7
 80095a6:	9302      	str	r3, [sp, #8]
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	3414      	adds	r4, #20
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	18e3      	adds	r3, r4, r3
 80095b0:	9303      	str	r3, [sp, #12]
 80095b2:	0003      	movs	r3, r0
 80095b4:	60c6      	str	r6, [r0, #12]
 80095b6:	468c      	mov	ip, r1
 80095b8:	2000      	movs	r0, #0
 80095ba:	3314      	adds	r3, #20
 80095bc:	9304      	str	r3, [sp, #16]
 80095be:	9305      	str	r3, [sp, #20]
 80095c0:	4663      	mov	r3, ip
 80095c2:	cb20      	ldmia	r3!, {r5}
 80095c4:	b2a9      	uxth	r1, r5
 80095c6:	000e      	movs	r6, r1
 80095c8:	469c      	mov	ip, r3
 80095ca:	cc08      	ldmia	r4!, {r3}
 80095cc:	0c2d      	lsrs	r5, r5, #16
 80095ce:	b299      	uxth	r1, r3
 80095d0:	1a71      	subs	r1, r6, r1
 80095d2:	1809      	adds	r1, r1, r0
 80095d4:	0c1b      	lsrs	r3, r3, #16
 80095d6:	1408      	asrs	r0, r1, #16
 80095d8:	1aeb      	subs	r3, r5, r3
 80095da:	181b      	adds	r3, r3, r0
 80095dc:	1418      	asrs	r0, r3, #16
 80095de:	b289      	uxth	r1, r1
 80095e0:	041b      	lsls	r3, r3, #16
 80095e2:	4319      	orrs	r1, r3
 80095e4:	9b05      	ldr	r3, [sp, #20]
 80095e6:	c302      	stmia	r3!, {r1}
 80095e8:	9305      	str	r3, [sp, #20]
 80095ea:	9b03      	ldr	r3, [sp, #12]
 80095ec:	42a3      	cmp	r3, r4
 80095ee:	d8e7      	bhi.n	80095c0 <__mdiff+0x84>
 80095f0:	0039      	movs	r1, r7
 80095f2:	9c03      	ldr	r4, [sp, #12]
 80095f4:	3115      	adds	r1, #21
 80095f6:	2304      	movs	r3, #4
 80095f8:	428c      	cmp	r4, r1
 80095fa:	d304      	bcc.n	8009606 <__mdiff+0xca>
 80095fc:	1be3      	subs	r3, r4, r7
 80095fe:	3b15      	subs	r3, #21
 8009600:	089b      	lsrs	r3, r3, #2
 8009602:	3301      	adds	r3, #1
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	9901      	ldr	r1, [sp, #4]
 8009608:	18cd      	adds	r5, r1, r3
 800960a:	9904      	ldr	r1, [sp, #16]
 800960c:	002e      	movs	r6, r5
 800960e:	18cb      	adds	r3, r1, r3
 8009610:	001f      	movs	r7, r3
 8009612:	9902      	ldr	r1, [sp, #8]
 8009614:	428e      	cmp	r6, r1
 8009616:	d311      	bcc.n	800963c <__mdiff+0x100>
 8009618:	9c02      	ldr	r4, [sp, #8]
 800961a:	1ee9      	subs	r1, r5, #3
 800961c:	2000      	movs	r0, #0
 800961e:	428c      	cmp	r4, r1
 8009620:	d304      	bcc.n	800962c <__mdiff+0xf0>
 8009622:	0021      	movs	r1, r4
 8009624:	3103      	adds	r1, #3
 8009626:	1b49      	subs	r1, r1, r5
 8009628:	0889      	lsrs	r1, r1, #2
 800962a:	0088      	lsls	r0, r1, #2
 800962c:	181b      	adds	r3, r3, r0
 800962e:	3b04      	subs	r3, #4
 8009630:	6819      	ldr	r1, [r3, #0]
 8009632:	2900      	cmp	r1, #0
 8009634:	d010      	beq.n	8009658 <__mdiff+0x11c>
 8009636:	9b00      	ldr	r3, [sp, #0]
 8009638:	6113      	str	r3, [r2, #16]
 800963a:	e798      	b.n	800956e <__mdiff+0x32>
 800963c:	4684      	mov	ip, r0
 800963e:	ce02      	ldmia	r6!, {r1}
 8009640:	b288      	uxth	r0, r1
 8009642:	4460      	add	r0, ip
 8009644:	1400      	asrs	r0, r0, #16
 8009646:	0c0c      	lsrs	r4, r1, #16
 8009648:	1904      	adds	r4, r0, r4
 800964a:	4461      	add	r1, ip
 800964c:	1420      	asrs	r0, r4, #16
 800964e:	b289      	uxth	r1, r1
 8009650:	0424      	lsls	r4, r4, #16
 8009652:	4321      	orrs	r1, r4
 8009654:	c702      	stmia	r7!, {r1}
 8009656:	e7dc      	b.n	8009612 <__mdiff+0xd6>
 8009658:	9900      	ldr	r1, [sp, #0]
 800965a:	3901      	subs	r1, #1
 800965c:	9100      	str	r1, [sp, #0]
 800965e:	e7e6      	b.n	800962e <__mdiff+0xf2>
 8009660:	0800a558 	.word	0x0800a558
 8009664:	0800a569 	.word	0x0800a569
 8009668:	00000237 	.word	0x00000237
 800966c:	00000245 	.word	0x00000245

08009670 <__d2b>:
 8009670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009672:	2101      	movs	r1, #1
 8009674:	0016      	movs	r6, r2
 8009676:	001f      	movs	r7, r3
 8009678:	f7ff fcb6 	bl	8008fe8 <_Balloc>
 800967c:	1e04      	subs	r4, r0, #0
 800967e:	d105      	bne.n	800968c <__d2b+0x1c>
 8009680:	0022      	movs	r2, r4
 8009682:	4b25      	ldr	r3, [pc, #148]	@ (8009718 <__d2b+0xa8>)
 8009684:	4825      	ldr	r0, [pc, #148]	@ (800971c <__d2b+0xac>)
 8009686:	4926      	ldr	r1, [pc, #152]	@ (8009720 <__d2b+0xb0>)
 8009688:	f000 fc76 	bl	8009f78 <__assert_func>
 800968c:	033b      	lsls	r3, r7, #12
 800968e:	007d      	lsls	r5, r7, #1
 8009690:	0b1b      	lsrs	r3, r3, #12
 8009692:	0d6d      	lsrs	r5, r5, #21
 8009694:	d002      	beq.n	800969c <__d2b+0x2c>
 8009696:	2280      	movs	r2, #128	@ 0x80
 8009698:	0352      	lsls	r2, r2, #13
 800969a:	4313      	orrs	r3, r2
 800969c:	9301      	str	r3, [sp, #4]
 800969e:	2e00      	cmp	r6, #0
 80096a0:	d025      	beq.n	80096ee <__d2b+0x7e>
 80096a2:	4668      	mov	r0, sp
 80096a4:	9600      	str	r6, [sp, #0]
 80096a6:	f7ff fd6c 	bl	8009182 <__lo0bits>
 80096aa:	9b01      	ldr	r3, [sp, #4]
 80096ac:	9900      	ldr	r1, [sp, #0]
 80096ae:	2800      	cmp	r0, #0
 80096b0:	d01b      	beq.n	80096ea <__d2b+0x7a>
 80096b2:	2220      	movs	r2, #32
 80096b4:	001e      	movs	r6, r3
 80096b6:	1a12      	subs	r2, r2, r0
 80096b8:	4096      	lsls	r6, r2
 80096ba:	0032      	movs	r2, r6
 80096bc:	40c3      	lsrs	r3, r0
 80096be:	430a      	orrs	r2, r1
 80096c0:	6162      	str	r2, [r4, #20]
 80096c2:	9301      	str	r3, [sp, #4]
 80096c4:	9e01      	ldr	r6, [sp, #4]
 80096c6:	61a6      	str	r6, [r4, #24]
 80096c8:	1e73      	subs	r3, r6, #1
 80096ca:	419e      	sbcs	r6, r3
 80096cc:	3601      	adds	r6, #1
 80096ce:	6126      	str	r6, [r4, #16]
 80096d0:	2d00      	cmp	r5, #0
 80096d2:	d014      	beq.n	80096fe <__d2b+0x8e>
 80096d4:	2635      	movs	r6, #53	@ 0x35
 80096d6:	4b13      	ldr	r3, [pc, #76]	@ (8009724 <__d2b+0xb4>)
 80096d8:	18ed      	adds	r5, r5, r3
 80096da:	9b08      	ldr	r3, [sp, #32]
 80096dc:	182d      	adds	r5, r5, r0
 80096de:	601d      	str	r5, [r3, #0]
 80096e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096e2:	1a36      	subs	r6, r6, r0
 80096e4:	601e      	str	r6, [r3, #0]
 80096e6:	0020      	movs	r0, r4
 80096e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80096ea:	6161      	str	r1, [r4, #20]
 80096ec:	e7ea      	b.n	80096c4 <__d2b+0x54>
 80096ee:	a801      	add	r0, sp, #4
 80096f0:	f7ff fd47 	bl	8009182 <__lo0bits>
 80096f4:	9b01      	ldr	r3, [sp, #4]
 80096f6:	2601      	movs	r6, #1
 80096f8:	6163      	str	r3, [r4, #20]
 80096fa:	3020      	adds	r0, #32
 80096fc:	e7e7      	b.n	80096ce <__d2b+0x5e>
 80096fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009728 <__d2b+0xb8>)
 8009700:	18c0      	adds	r0, r0, r3
 8009702:	9b08      	ldr	r3, [sp, #32]
 8009704:	6018      	str	r0, [r3, #0]
 8009706:	4b09      	ldr	r3, [pc, #36]	@ (800972c <__d2b+0xbc>)
 8009708:	18f3      	adds	r3, r6, r3
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	18e3      	adds	r3, r4, r3
 800970e:	6958      	ldr	r0, [r3, #20]
 8009710:	f7ff fd16 	bl	8009140 <__hi0bits>
 8009714:	0176      	lsls	r6, r6, #5
 8009716:	e7e3      	b.n	80096e0 <__d2b+0x70>
 8009718:	0800a558 	.word	0x0800a558
 800971c:	0800a569 	.word	0x0800a569
 8009720:	0000030f 	.word	0x0000030f
 8009724:	fffffbcd 	.word	0xfffffbcd
 8009728:	fffffbce 	.word	0xfffffbce
 800972c:	3fffffff 	.word	0x3fffffff

08009730 <__ssputs_r>:
 8009730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009732:	688e      	ldr	r6, [r1, #8]
 8009734:	b085      	sub	sp, #20
 8009736:	001f      	movs	r7, r3
 8009738:	000c      	movs	r4, r1
 800973a:	680b      	ldr	r3, [r1, #0]
 800973c:	9002      	str	r0, [sp, #8]
 800973e:	9203      	str	r2, [sp, #12]
 8009740:	42be      	cmp	r6, r7
 8009742:	d830      	bhi.n	80097a6 <__ssputs_r+0x76>
 8009744:	210c      	movs	r1, #12
 8009746:	5e62      	ldrsh	r2, [r4, r1]
 8009748:	2190      	movs	r1, #144	@ 0x90
 800974a:	00c9      	lsls	r1, r1, #3
 800974c:	420a      	tst	r2, r1
 800974e:	d028      	beq.n	80097a2 <__ssputs_r+0x72>
 8009750:	2003      	movs	r0, #3
 8009752:	6921      	ldr	r1, [r4, #16]
 8009754:	1a5b      	subs	r3, r3, r1
 8009756:	9301      	str	r3, [sp, #4]
 8009758:	6963      	ldr	r3, [r4, #20]
 800975a:	4343      	muls	r3, r0
 800975c:	9801      	ldr	r0, [sp, #4]
 800975e:	0fdd      	lsrs	r5, r3, #31
 8009760:	18ed      	adds	r5, r5, r3
 8009762:	1c7b      	adds	r3, r7, #1
 8009764:	181b      	adds	r3, r3, r0
 8009766:	106d      	asrs	r5, r5, #1
 8009768:	42ab      	cmp	r3, r5
 800976a:	d900      	bls.n	800976e <__ssputs_r+0x3e>
 800976c:	001d      	movs	r5, r3
 800976e:	0552      	lsls	r2, r2, #21
 8009770:	d528      	bpl.n	80097c4 <__ssputs_r+0x94>
 8009772:	0029      	movs	r1, r5
 8009774:	9802      	ldr	r0, [sp, #8]
 8009776:	f7ff fba7 	bl	8008ec8 <_malloc_r>
 800977a:	1e06      	subs	r6, r0, #0
 800977c:	d02c      	beq.n	80097d8 <__ssputs_r+0xa8>
 800977e:	9a01      	ldr	r2, [sp, #4]
 8009780:	6921      	ldr	r1, [r4, #16]
 8009782:	f000 fbef 	bl	8009f64 <memcpy>
 8009786:	89a2      	ldrh	r2, [r4, #12]
 8009788:	4b18      	ldr	r3, [pc, #96]	@ (80097ec <__ssputs_r+0xbc>)
 800978a:	401a      	ands	r2, r3
 800978c:	2380      	movs	r3, #128	@ 0x80
 800978e:	4313      	orrs	r3, r2
 8009790:	81a3      	strh	r3, [r4, #12]
 8009792:	9b01      	ldr	r3, [sp, #4]
 8009794:	6126      	str	r6, [r4, #16]
 8009796:	18f6      	adds	r6, r6, r3
 8009798:	6026      	str	r6, [r4, #0]
 800979a:	003e      	movs	r6, r7
 800979c:	6165      	str	r5, [r4, #20]
 800979e:	1aed      	subs	r5, r5, r3
 80097a0:	60a5      	str	r5, [r4, #8]
 80097a2:	42be      	cmp	r6, r7
 80097a4:	d900      	bls.n	80097a8 <__ssputs_r+0x78>
 80097a6:	003e      	movs	r6, r7
 80097a8:	0032      	movs	r2, r6
 80097aa:	9903      	ldr	r1, [sp, #12]
 80097ac:	6820      	ldr	r0, [r4, #0]
 80097ae:	f000 fbb3 	bl	8009f18 <memmove>
 80097b2:	2000      	movs	r0, #0
 80097b4:	68a3      	ldr	r3, [r4, #8]
 80097b6:	1b9b      	subs	r3, r3, r6
 80097b8:	60a3      	str	r3, [r4, #8]
 80097ba:	6823      	ldr	r3, [r4, #0]
 80097bc:	199b      	adds	r3, r3, r6
 80097be:	6023      	str	r3, [r4, #0]
 80097c0:	b005      	add	sp, #20
 80097c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097c4:	002a      	movs	r2, r5
 80097c6:	9802      	ldr	r0, [sp, #8]
 80097c8:	f000 fc33 	bl	800a032 <_realloc_r>
 80097cc:	1e06      	subs	r6, r0, #0
 80097ce:	d1e0      	bne.n	8009792 <__ssputs_r+0x62>
 80097d0:	6921      	ldr	r1, [r4, #16]
 80097d2:	9802      	ldr	r0, [sp, #8]
 80097d4:	f7ff fb02 	bl	8008ddc <_free_r>
 80097d8:	230c      	movs	r3, #12
 80097da:	2001      	movs	r0, #1
 80097dc:	9a02      	ldr	r2, [sp, #8]
 80097de:	4240      	negs	r0, r0
 80097e0:	6013      	str	r3, [r2, #0]
 80097e2:	89a2      	ldrh	r2, [r4, #12]
 80097e4:	3334      	adds	r3, #52	@ 0x34
 80097e6:	4313      	orrs	r3, r2
 80097e8:	81a3      	strh	r3, [r4, #12]
 80097ea:	e7e9      	b.n	80097c0 <__ssputs_r+0x90>
 80097ec:	fffffb7f 	.word	0xfffffb7f

080097f0 <_svfiprintf_r>:
 80097f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097f2:	b0a1      	sub	sp, #132	@ 0x84
 80097f4:	9003      	str	r0, [sp, #12]
 80097f6:	001d      	movs	r5, r3
 80097f8:	898b      	ldrh	r3, [r1, #12]
 80097fa:	000f      	movs	r7, r1
 80097fc:	0016      	movs	r6, r2
 80097fe:	061b      	lsls	r3, r3, #24
 8009800:	d511      	bpl.n	8009826 <_svfiprintf_r+0x36>
 8009802:	690b      	ldr	r3, [r1, #16]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10e      	bne.n	8009826 <_svfiprintf_r+0x36>
 8009808:	2140      	movs	r1, #64	@ 0x40
 800980a:	f7ff fb5d 	bl	8008ec8 <_malloc_r>
 800980e:	6038      	str	r0, [r7, #0]
 8009810:	6138      	str	r0, [r7, #16]
 8009812:	2800      	cmp	r0, #0
 8009814:	d105      	bne.n	8009822 <_svfiprintf_r+0x32>
 8009816:	230c      	movs	r3, #12
 8009818:	9a03      	ldr	r2, [sp, #12]
 800981a:	6013      	str	r3, [r2, #0]
 800981c:	2001      	movs	r0, #1
 800981e:	4240      	negs	r0, r0
 8009820:	e0cf      	b.n	80099c2 <_svfiprintf_r+0x1d2>
 8009822:	2340      	movs	r3, #64	@ 0x40
 8009824:	617b      	str	r3, [r7, #20]
 8009826:	2300      	movs	r3, #0
 8009828:	ac08      	add	r4, sp, #32
 800982a:	6163      	str	r3, [r4, #20]
 800982c:	3320      	adds	r3, #32
 800982e:	7663      	strb	r3, [r4, #25]
 8009830:	3310      	adds	r3, #16
 8009832:	76a3      	strb	r3, [r4, #26]
 8009834:	9507      	str	r5, [sp, #28]
 8009836:	0035      	movs	r5, r6
 8009838:	782b      	ldrb	r3, [r5, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <_svfiprintf_r+0x52>
 800983e:	2b25      	cmp	r3, #37	@ 0x25
 8009840:	d148      	bne.n	80098d4 <_svfiprintf_r+0xe4>
 8009842:	1bab      	subs	r3, r5, r6
 8009844:	9305      	str	r3, [sp, #20]
 8009846:	42b5      	cmp	r5, r6
 8009848:	d00b      	beq.n	8009862 <_svfiprintf_r+0x72>
 800984a:	0032      	movs	r2, r6
 800984c:	0039      	movs	r1, r7
 800984e:	9803      	ldr	r0, [sp, #12]
 8009850:	f7ff ff6e 	bl	8009730 <__ssputs_r>
 8009854:	3001      	adds	r0, #1
 8009856:	d100      	bne.n	800985a <_svfiprintf_r+0x6a>
 8009858:	e0ae      	b.n	80099b8 <_svfiprintf_r+0x1c8>
 800985a:	6963      	ldr	r3, [r4, #20]
 800985c:	9a05      	ldr	r2, [sp, #20]
 800985e:	189b      	adds	r3, r3, r2
 8009860:	6163      	str	r3, [r4, #20]
 8009862:	782b      	ldrb	r3, [r5, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d100      	bne.n	800986a <_svfiprintf_r+0x7a>
 8009868:	e0a6      	b.n	80099b8 <_svfiprintf_r+0x1c8>
 800986a:	2201      	movs	r2, #1
 800986c:	2300      	movs	r3, #0
 800986e:	4252      	negs	r2, r2
 8009870:	6062      	str	r2, [r4, #4]
 8009872:	a904      	add	r1, sp, #16
 8009874:	3254      	adds	r2, #84	@ 0x54
 8009876:	1852      	adds	r2, r2, r1
 8009878:	1c6e      	adds	r6, r5, #1
 800987a:	6023      	str	r3, [r4, #0]
 800987c:	60e3      	str	r3, [r4, #12]
 800987e:	60a3      	str	r3, [r4, #8]
 8009880:	7013      	strb	r3, [r2, #0]
 8009882:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009884:	4b54      	ldr	r3, [pc, #336]	@ (80099d8 <_svfiprintf_r+0x1e8>)
 8009886:	2205      	movs	r2, #5
 8009888:	0018      	movs	r0, r3
 800988a:	7831      	ldrb	r1, [r6, #0]
 800988c:	9305      	str	r3, [sp, #20]
 800988e:	f7fe fc18 	bl	80080c2 <memchr>
 8009892:	1c75      	adds	r5, r6, #1
 8009894:	2800      	cmp	r0, #0
 8009896:	d11f      	bne.n	80098d8 <_svfiprintf_r+0xe8>
 8009898:	6822      	ldr	r2, [r4, #0]
 800989a:	06d3      	lsls	r3, r2, #27
 800989c:	d504      	bpl.n	80098a8 <_svfiprintf_r+0xb8>
 800989e:	2353      	movs	r3, #83	@ 0x53
 80098a0:	a904      	add	r1, sp, #16
 80098a2:	185b      	adds	r3, r3, r1
 80098a4:	2120      	movs	r1, #32
 80098a6:	7019      	strb	r1, [r3, #0]
 80098a8:	0713      	lsls	r3, r2, #28
 80098aa:	d504      	bpl.n	80098b6 <_svfiprintf_r+0xc6>
 80098ac:	2353      	movs	r3, #83	@ 0x53
 80098ae:	a904      	add	r1, sp, #16
 80098b0:	185b      	adds	r3, r3, r1
 80098b2:	212b      	movs	r1, #43	@ 0x2b
 80098b4:	7019      	strb	r1, [r3, #0]
 80098b6:	7833      	ldrb	r3, [r6, #0]
 80098b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80098ba:	d016      	beq.n	80098ea <_svfiprintf_r+0xfa>
 80098bc:	0035      	movs	r5, r6
 80098be:	2100      	movs	r1, #0
 80098c0:	200a      	movs	r0, #10
 80098c2:	68e3      	ldr	r3, [r4, #12]
 80098c4:	782a      	ldrb	r2, [r5, #0]
 80098c6:	1c6e      	adds	r6, r5, #1
 80098c8:	3a30      	subs	r2, #48	@ 0x30
 80098ca:	2a09      	cmp	r2, #9
 80098cc:	d950      	bls.n	8009970 <_svfiprintf_r+0x180>
 80098ce:	2900      	cmp	r1, #0
 80098d0:	d111      	bne.n	80098f6 <_svfiprintf_r+0x106>
 80098d2:	e017      	b.n	8009904 <_svfiprintf_r+0x114>
 80098d4:	3501      	adds	r5, #1
 80098d6:	e7af      	b.n	8009838 <_svfiprintf_r+0x48>
 80098d8:	9b05      	ldr	r3, [sp, #20]
 80098da:	6822      	ldr	r2, [r4, #0]
 80098dc:	1ac0      	subs	r0, r0, r3
 80098de:	2301      	movs	r3, #1
 80098e0:	4083      	lsls	r3, r0
 80098e2:	4313      	orrs	r3, r2
 80098e4:	002e      	movs	r6, r5
 80098e6:	6023      	str	r3, [r4, #0]
 80098e8:	e7cc      	b.n	8009884 <_svfiprintf_r+0x94>
 80098ea:	9b07      	ldr	r3, [sp, #28]
 80098ec:	1d19      	adds	r1, r3, #4
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	9107      	str	r1, [sp, #28]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	db01      	blt.n	80098fa <_svfiprintf_r+0x10a>
 80098f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098f8:	e004      	b.n	8009904 <_svfiprintf_r+0x114>
 80098fa:	425b      	negs	r3, r3
 80098fc:	60e3      	str	r3, [r4, #12]
 80098fe:	2302      	movs	r3, #2
 8009900:	4313      	orrs	r3, r2
 8009902:	6023      	str	r3, [r4, #0]
 8009904:	782b      	ldrb	r3, [r5, #0]
 8009906:	2b2e      	cmp	r3, #46	@ 0x2e
 8009908:	d10c      	bne.n	8009924 <_svfiprintf_r+0x134>
 800990a:	786b      	ldrb	r3, [r5, #1]
 800990c:	2b2a      	cmp	r3, #42	@ 0x2a
 800990e:	d134      	bne.n	800997a <_svfiprintf_r+0x18a>
 8009910:	9b07      	ldr	r3, [sp, #28]
 8009912:	3502      	adds	r5, #2
 8009914:	1d1a      	adds	r2, r3, #4
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	9207      	str	r2, [sp, #28]
 800991a:	2b00      	cmp	r3, #0
 800991c:	da01      	bge.n	8009922 <_svfiprintf_r+0x132>
 800991e:	2301      	movs	r3, #1
 8009920:	425b      	negs	r3, r3
 8009922:	9309      	str	r3, [sp, #36]	@ 0x24
 8009924:	4e2d      	ldr	r6, [pc, #180]	@ (80099dc <_svfiprintf_r+0x1ec>)
 8009926:	2203      	movs	r2, #3
 8009928:	0030      	movs	r0, r6
 800992a:	7829      	ldrb	r1, [r5, #0]
 800992c:	f7fe fbc9 	bl	80080c2 <memchr>
 8009930:	2800      	cmp	r0, #0
 8009932:	d006      	beq.n	8009942 <_svfiprintf_r+0x152>
 8009934:	2340      	movs	r3, #64	@ 0x40
 8009936:	1b80      	subs	r0, r0, r6
 8009938:	4083      	lsls	r3, r0
 800993a:	6822      	ldr	r2, [r4, #0]
 800993c:	3501      	adds	r5, #1
 800993e:	4313      	orrs	r3, r2
 8009940:	6023      	str	r3, [r4, #0]
 8009942:	7829      	ldrb	r1, [r5, #0]
 8009944:	2206      	movs	r2, #6
 8009946:	4826      	ldr	r0, [pc, #152]	@ (80099e0 <_svfiprintf_r+0x1f0>)
 8009948:	1c6e      	adds	r6, r5, #1
 800994a:	7621      	strb	r1, [r4, #24]
 800994c:	f7fe fbb9 	bl	80080c2 <memchr>
 8009950:	2800      	cmp	r0, #0
 8009952:	d038      	beq.n	80099c6 <_svfiprintf_r+0x1d6>
 8009954:	4b23      	ldr	r3, [pc, #140]	@ (80099e4 <_svfiprintf_r+0x1f4>)
 8009956:	2b00      	cmp	r3, #0
 8009958:	d122      	bne.n	80099a0 <_svfiprintf_r+0x1b0>
 800995a:	2207      	movs	r2, #7
 800995c:	9b07      	ldr	r3, [sp, #28]
 800995e:	3307      	adds	r3, #7
 8009960:	4393      	bics	r3, r2
 8009962:	3308      	adds	r3, #8
 8009964:	9307      	str	r3, [sp, #28]
 8009966:	6963      	ldr	r3, [r4, #20]
 8009968:	9a04      	ldr	r2, [sp, #16]
 800996a:	189b      	adds	r3, r3, r2
 800996c:	6163      	str	r3, [r4, #20]
 800996e:	e762      	b.n	8009836 <_svfiprintf_r+0x46>
 8009970:	4343      	muls	r3, r0
 8009972:	0035      	movs	r5, r6
 8009974:	2101      	movs	r1, #1
 8009976:	189b      	adds	r3, r3, r2
 8009978:	e7a4      	b.n	80098c4 <_svfiprintf_r+0xd4>
 800997a:	2300      	movs	r3, #0
 800997c:	200a      	movs	r0, #10
 800997e:	0019      	movs	r1, r3
 8009980:	3501      	adds	r5, #1
 8009982:	6063      	str	r3, [r4, #4]
 8009984:	782a      	ldrb	r2, [r5, #0]
 8009986:	1c6e      	adds	r6, r5, #1
 8009988:	3a30      	subs	r2, #48	@ 0x30
 800998a:	2a09      	cmp	r2, #9
 800998c:	d903      	bls.n	8009996 <_svfiprintf_r+0x1a6>
 800998e:	2b00      	cmp	r3, #0
 8009990:	d0c8      	beq.n	8009924 <_svfiprintf_r+0x134>
 8009992:	9109      	str	r1, [sp, #36]	@ 0x24
 8009994:	e7c6      	b.n	8009924 <_svfiprintf_r+0x134>
 8009996:	4341      	muls	r1, r0
 8009998:	0035      	movs	r5, r6
 800999a:	2301      	movs	r3, #1
 800999c:	1889      	adds	r1, r1, r2
 800999e:	e7f1      	b.n	8009984 <_svfiprintf_r+0x194>
 80099a0:	aa07      	add	r2, sp, #28
 80099a2:	9200      	str	r2, [sp, #0]
 80099a4:	0021      	movs	r1, r4
 80099a6:	003a      	movs	r2, r7
 80099a8:	4b0f      	ldr	r3, [pc, #60]	@ (80099e8 <_svfiprintf_r+0x1f8>)
 80099aa:	9803      	ldr	r0, [sp, #12]
 80099ac:	f7fd fdce 	bl	800754c <_printf_float>
 80099b0:	9004      	str	r0, [sp, #16]
 80099b2:	9b04      	ldr	r3, [sp, #16]
 80099b4:	3301      	adds	r3, #1
 80099b6:	d1d6      	bne.n	8009966 <_svfiprintf_r+0x176>
 80099b8:	89bb      	ldrh	r3, [r7, #12]
 80099ba:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80099bc:	065b      	lsls	r3, r3, #25
 80099be:	d500      	bpl.n	80099c2 <_svfiprintf_r+0x1d2>
 80099c0:	e72c      	b.n	800981c <_svfiprintf_r+0x2c>
 80099c2:	b021      	add	sp, #132	@ 0x84
 80099c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099c6:	aa07      	add	r2, sp, #28
 80099c8:	9200      	str	r2, [sp, #0]
 80099ca:	0021      	movs	r1, r4
 80099cc:	003a      	movs	r2, r7
 80099ce:	4b06      	ldr	r3, [pc, #24]	@ (80099e8 <_svfiprintf_r+0x1f8>)
 80099d0:	9803      	ldr	r0, [sp, #12]
 80099d2:	f7fe f869 	bl	8007aa8 <_printf_i>
 80099d6:	e7eb      	b.n	80099b0 <_svfiprintf_r+0x1c0>
 80099d8:	0800a6c0 	.word	0x0800a6c0
 80099dc:	0800a6c6 	.word	0x0800a6c6
 80099e0:	0800a6ca 	.word	0x0800a6ca
 80099e4:	0800754d 	.word	0x0800754d
 80099e8:	08009731 	.word	0x08009731

080099ec <__sfputc_r>:
 80099ec:	6893      	ldr	r3, [r2, #8]
 80099ee:	b510      	push	{r4, lr}
 80099f0:	3b01      	subs	r3, #1
 80099f2:	6093      	str	r3, [r2, #8]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	da04      	bge.n	8009a02 <__sfputc_r+0x16>
 80099f8:	6994      	ldr	r4, [r2, #24]
 80099fa:	42a3      	cmp	r3, r4
 80099fc:	db07      	blt.n	8009a0e <__sfputc_r+0x22>
 80099fe:	290a      	cmp	r1, #10
 8009a00:	d005      	beq.n	8009a0e <__sfputc_r+0x22>
 8009a02:	6813      	ldr	r3, [r2, #0]
 8009a04:	1c58      	adds	r0, r3, #1
 8009a06:	6010      	str	r0, [r2, #0]
 8009a08:	7019      	strb	r1, [r3, #0]
 8009a0a:	0008      	movs	r0, r1
 8009a0c:	bd10      	pop	{r4, pc}
 8009a0e:	f000 f9e2 	bl	8009dd6 <__swbuf_r>
 8009a12:	0001      	movs	r1, r0
 8009a14:	e7f9      	b.n	8009a0a <__sfputc_r+0x1e>

08009a16 <__sfputs_r>:
 8009a16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a18:	0006      	movs	r6, r0
 8009a1a:	000f      	movs	r7, r1
 8009a1c:	0014      	movs	r4, r2
 8009a1e:	18d5      	adds	r5, r2, r3
 8009a20:	42ac      	cmp	r4, r5
 8009a22:	d101      	bne.n	8009a28 <__sfputs_r+0x12>
 8009a24:	2000      	movs	r0, #0
 8009a26:	e007      	b.n	8009a38 <__sfputs_r+0x22>
 8009a28:	7821      	ldrb	r1, [r4, #0]
 8009a2a:	003a      	movs	r2, r7
 8009a2c:	0030      	movs	r0, r6
 8009a2e:	f7ff ffdd 	bl	80099ec <__sfputc_r>
 8009a32:	3401      	adds	r4, #1
 8009a34:	1c43      	adds	r3, r0, #1
 8009a36:	d1f3      	bne.n	8009a20 <__sfputs_r+0xa>
 8009a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a3c <_vfiprintf_r>:
 8009a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a3e:	b0a1      	sub	sp, #132	@ 0x84
 8009a40:	000f      	movs	r7, r1
 8009a42:	0015      	movs	r5, r2
 8009a44:	001e      	movs	r6, r3
 8009a46:	9003      	str	r0, [sp, #12]
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	d004      	beq.n	8009a56 <_vfiprintf_r+0x1a>
 8009a4c:	6a03      	ldr	r3, [r0, #32]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d101      	bne.n	8009a56 <_vfiprintf_r+0x1a>
 8009a52:	f7fe f9c7 	bl	8007de4 <__sinit>
 8009a56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a58:	07db      	lsls	r3, r3, #31
 8009a5a:	d405      	bmi.n	8009a68 <_vfiprintf_r+0x2c>
 8009a5c:	89bb      	ldrh	r3, [r7, #12]
 8009a5e:	059b      	lsls	r3, r3, #22
 8009a60:	d402      	bmi.n	8009a68 <_vfiprintf_r+0x2c>
 8009a62:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009a64:	f7fe fb2b 	bl	80080be <__retarget_lock_acquire_recursive>
 8009a68:	89bb      	ldrh	r3, [r7, #12]
 8009a6a:	071b      	lsls	r3, r3, #28
 8009a6c:	d502      	bpl.n	8009a74 <_vfiprintf_r+0x38>
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d113      	bne.n	8009a9c <_vfiprintf_r+0x60>
 8009a74:	0039      	movs	r1, r7
 8009a76:	9803      	ldr	r0, [sp, #12]
 8009a78:	f000 f9f0 	bl	8009e5c <__swsetup_r>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	d00d      	beq.n	8009a9c <_vfiprintf_r+0x60>
 8009a80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a82:	07db      	lsls	r3, r3, #31
 8009a84:	d503      	bpl.n	8009a8e <_vfiprintf_r+0x52>
 8009a86:	2001      	movs	r0, #1
 8009a88:	4240      	negs	r0, r0
 8009a8a:	b021      	add	sp, #132	@ 0x84
 8009a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a8e:	89bb      	ldrh	r3, [r7, #12]
 8009a90:	059b      	lsls	r3, r3, #22
 8009a92:	d4f8      	bmi.n	8009a86 <_vfiprintf_r+0x4a>
 8009a94:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009a96:	f7fe fb13 	bl	80080c0 <__retarget_lock_release_recursive>
 8009a9a:	e7f4      	b.n	8009a86 <_vfiprintf_r+0x4a>
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	ac08      	add	r4, sp, #32
 8009aa0:	6163      	str	r3, [r4, #20]
 8009aa2:	3320      	adds	r3, #32
 8009aa4:	7663      	strb	r3, [r4, #25]
 8009aa6:	3310      	adds	r3, #16
 8009aa8:	76a3      	strb	r3, [r4, #26]
 8009aaa:	9607      	str	r6, [sp, #28]
 8009aac:	002e      	movs	r6, r5
 8009aae:	7833      	ldrb	r3, [r6, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d001      	beq.n	8009ab8 <_vfiprintf_r+0x7c>
 8009ab4:	2b25      	cmp	r3, #37	@ 0x25
 8009ab6:	d148      	bne.n	8009b4a <_vfiprintf_r+0x10e>
 8009ab8:	1b73      	subs	r3, r6, r5
 8009aba:	9305      	str	r3, [sp, #20]
 8009abc:	42ae      	cmp	r6, r5
 8009abe:	d00b      	beq.n	8009ad8 <_vfiprintf_r+0x9c>
 8009ac0:	002a      	movs	r2, r5
 8009ac2:	0039      	movs	r1, r7
 8009ac4:	9803      	ldr	r0, [sp, #12]
 8009ac6:	f7ff ffa6 	bl	8009a16 <__sfputs_r>
 8009aca:	3001      	adds	r0, #1
 8009acc:	d100      	bne.n	8009ad0 <_vfiprintf_r+0x94>
 8009ace:	e0ae      	b.n	8009c2e <_vfiprintf_r+0x1f2>
 8009ad0:	6963      	ldr	r3, [r4, #20]
 8009ad2:	9a05      	ldr	r2, [sp, #20]
 8009ad4:	189b      	adds	r3, r3, r2
 8009ad6:	6163      	str	r3, [r4, #20]
 8009ad8:	7833      	ldrb	r3, [r6, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d100      	bne.n	8009ae0 <_vfiprintf_r+0xa4>
 8009ade:	e0a6      	b.n	8009c2e <_vfiprintf_r+0x1f2>
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	4252      	negs	r2, r2
 8009ae6:	6062      	str	r2, [r4, #4]
 8009ae8:	a904      	add	r1, sp, #16
 8009aea:	3254      	adds	r2, #84	@ 0x54
 8009aec:	1852      	adds	r2, r2, r1
 8009aee:	1c75      	adds	r5, r6, #1
 8009af0:	6023      	str	r3, [r4, #0]
 8009af2:	60e3      	str	r3, [r4, #12]
 8009af4:	60a3      	str	r3, [r4, #8]
 8009af6:	7013      	strb	r3, [r2, #0]
 8009af8:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009afa:	4b59      	ldr	r3, [pc, #356]	@ (8009c60 <_vfiprintf_r+0x224>)
 8009afc:	2205      	movs	r2, #5
 8009afe:	0018      	movs	r0, r3
 8009b00:	7829      	ldrb	r1, [r5, #0]
 8009b02:	9305      	str	r3, [sp, #20]
 8009b04:	f7fe fadd 	bl	80080c2 <memchr>
 8009b08:	1c6e      	adds	r6, r5, #1
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	d11f      	bne.n	8009b4e <_vfiprintf_r+0x112>
 8009b0e:	6822      	ldr	r2, [r4, #0]
 8009b10:	06d3      	lsls	r3, r2, #27
 8009b12:	d504      	bpl.n	8009b1e <_vfiprintf_r+0xe2>
 8009b14:	2353      	movs	r3, #83	@ 0x53
 8009b16:	a904      	add	r1, sp, #16
 8009b18:	185b      	adds	r3, r3, r1
 8009b1a:	2120      	movs	r1, #32
 8009b1c:	7019      	strb	r1, [r3, #0]
 8009b1e:	0713      	lsls	r3, r2, #28
 8009b20:	d504      	bpl.n	8009b2c <_vfiprintf_r+0xf0>
 8009b22:	2353      	movs	r3, #83	@ 0x53
 8009b24:	a904      	add	r1, sp, #16
 8009b26:	185b      	adds	r3, r3, r1
 8009b28:	212b      	movs	r1, #43	@ 0x2b
 8009b2a:	7019      	strb	r1, [r3, #0]
 8009b2c:	782b      	ldrb	r3, [r5, #0]
 8009b2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b30:	d016      	beq.n	8009b60 <_vfiprintf_r+0x124>
 8009b32:	002e      	movs	r6, r5
 8009b34:	2100      	movs	r1, #0
 8009b36:	200a      	movs	r0, #10
 8009b38:	68e3      	ldr	r3, [r4, #12]
 8009b3a:	7832      	ldrb	r2, [r6, #0]
 8009b3c:	1c75      	adds	r5, r6, #1
 8009b3e:	3a30      	subs	r2, #48	@ 0x30
 8009b40:	2a09      	cmp	r2, #9
 8009b42:	d950      	bls.n	8009be6 <_vfiprintf_r+0x1aa>
 8009b44:	2900      	cmp	r1, #0
 8009b46:	d111      	bne.n	8009b6c <_vfiprintf_r+0x130>
 8009b48:	e017      	b.n	8009b7a <_vfiprintf_r+0x13e>
 8009b4a:	3601      	adds	r6, #1
 8009b4c:	e7af      	b.n	8009aae <_vfiprintf_r+0x72>
 8009b4e:	9b05      	ldr	r3, [sp, #20]
 8009b50:	6822      	ldr	r2, [r4, #0]
 8009b52:	1ac0      	subs	r0, r0, r3
 8009b54:	2301      	movs	r3, #1
 8009b56:	4083      	lsls	r3, r0
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	0035      	movs	r5, r6
 8009b5c:	6023      	str	r3, [r4, #0]
 8009b5e:	e7cc      	b.n	8009afa <_vfiprintf_r+0xbe>
 8009b60:	9b07      	ldr	r3, [sp, #28]
 8009b62:	1d19      	adds	r1, r3, #4
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	9107      	str	r1, [sp, #28]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	db01      	blt.n	8009b70 <_vfiprintf_r+0x134>
 8009b6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b6e:	e004      	b.n	8009b7a <_vfiprintf_r+0x13e>
 8009b70:	425b      	negs	r3, r3
 8009b72:	60e3      	str	r3, [r4, #12]
 8009b74:	2302      	movs	r3, #2
 8009b76:	4313      	orrs	r3, r2
 8009b78:	6023      	str	r3, [r4, #0]
 8009b7a:	7833      	ldrb	r3, [r6, #0]
 8009b7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b7e:	d10c      	bne.n	8009b9a <_vfiprintf_r+0x15e>
 8009b80:	7873      	ldrb	r3, [r6, #1]
 8009b82:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b84:	d134      	bne.n	8009bf0 <_vfiprintf_r+0x1b4>
 8009b86:	9b07      	ldr	r3, [sp, #28]
 8009b88:	3602      	adds	r6, #2
 8009b8a:	1d1a      	adds	r2, r3, #4
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	9207      	str	r2, [sp, #28]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	da01      	bge.n	8009b98 <_vfiprintf_r+0x15c>
 8009b94:	2301      	movs	r3, #1
 8009b96:	425b      	negs	r3, r3
 8009b98:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b9a:	4d32      	ldr	r5, [pc, #200]	@ (8009c64 <_vfiprintf_r+0x228>)
 8009b9c:	2203      	movs	r2, #3
 8009b9e:	0028      	movs	r0, r5
 8009ba0:	7831      	ldrb	r1, [r6, #0]
 8009ba2:	f7fe fa8e 	bl	80080c2 <memchr>
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	d006      	beq.n	8009bb8 <_vfiprintf_r+0x17c>
 8009baa:	2340      	movs	r3, #64	@ 0x40
 8009bac:	1b40      	subs	r0, r0, r5
 8009bae:	4083      	lsls	r3, r0
 8009bb0:	6822      	ldr	r2, [r4, #0]
 8009bb2:	3601      	adds	r6, #1
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	6023      	str	r3, [r4, #0]
 8009bb8:	7831      	ldrb	r1, [r6, #0]
 8009bba:	2206      	movs	r2, #6
 8009bbc:	482a      	ldr	r0, [pc, #168]	@ (8009c68 <_vfiprintf_r+0x22c>)
 8009bbe:	1c75      	adds	r5, r6, #1
 8009bc0:	7621      	strb	r1, [r4, #24]
 8009bc2:	f7fe fa7e 	bl	80080c2 <memchr>
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	d040      	beq.n	8009c4c <_vfiprintf_r+0x210>
 8009bca:	4b28      	ldr	r3, [pc, #160]	@ (8009c6c <_vfiprintf_r+0x230>)
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d122      	bne.n	8009c16 <_vfiprintf_r+0x1da>
 8009bd0:	2207      	movs	r2, #7
 8009bd2:	9b07      	ldr	r3, [sp, #28]
 8009bd4:	3307      	adds	r3, #7
 8009bd6:	4393      	bics	r3, r2
 8009bd8:	3308      	adds	r3, #8
 8009bda:	9307      	str	r3, [sp, #28]
 8009bdc:	6963      	ldr	r3, [r4, #20]
 8009bde:	9a04      	ldr	r2, [sp, #16]
 8009be0:	189b      	adds	r3, r3, r2
 8009be2:	6163      	str	r3, [r4, #20]
 8009be4:	e762      	b.n	8009aac <_vfiprintf_r+0x70>
 8009be6:	4343      	muls	r3, r0
 8009be8:	002e      	movs	r6, r5
 8009bea:	2101      	movs	r1, #1
 8009bec:	189b      	adds	r3, r3, r2
 8009bee:	e7a4      	b.n	8009b3a <_vfiprintf_r+0xfe>
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	200a      	movs	r0, #10
 8009bf4:	0019      	movs	r1, r3
 8009bf6:	3601      	adds	r6, #1
 8009bf8:	6063      	str	r3, [r4, #4]
 8009bfa:	7832      	ldrb	r2, [r6, #0]
 8009bfc:	1c75      	adds	r5, r6, #1
 8009bfe:	3a30      	subs	r2, #48	@ 0x30
 8009c00:	2a09      	cmp	r2, #9
 8009c02:	d903      	bls.n	8009c0c <_vfiprintf_r+0x1d0>
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d0c8      	beq.n	8009b9a <_vfiprintf_r+0x15e>
 8009c08:	9109      	str	r1, [sp, #36]	@ 0x24
 8009c0a:	e7c6      	b.n	8009b9a <_vfiprintf_r+0x15e>
 8009c0c:	4341      	muls	r1, r0
 8009c0e:	002e      	movs	r6, r5
 8009c10:	2301      	movs	r3, #1
 8009c12:	1889      	adds	r1, r1, r2
 8009c14:	e7f1      	b.n	8009bfa <_vfiprintf_r+0x1be>
 8009c16:	aa07      	add	r2, sp, #28
 8009c18:	9200      	str	r2, [sp, #0]
 8009c1a:	0021      	movs	r1, r4
 8009c1c:	003a      	movs	r2, r7
 8009c1e:	4b14      	ldr	r3, [pc, #80]	@ (8009c70 <_vfiprintf_r+0x234>)
 8009c20:	9803      	ldr	r0, [sp, #12]
 8009c22:	f7fd fc93 	bl	800754c <_printf_float>
 8009c26:	9004      	str	r0, [sp, #16]
 8009c28:	9b04      	ldr	r3, [sp, #16]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	d1d6      	bne.n	8009bdc <_vfiprintf_r+0x1a0>
 8009c2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c30:	07db      	lsls	r3, r3, #31
 8009c32:	d405      	bmi.n	8009c40 <_vfiprintf_r+0x204>
 8009c34:	89bb      	ldrh	r3, [r7, #12]
 8009c36:	059b      	lsls	r3, r3, #22
 8009c38:	d402      	bmi.n	8009c40 <_vfiprintf_r+0x204>
 8009c3a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009c3c:	f7fe fa40 	bl	80080c0 <__retarget_lock_release_recursive>
 8009c40:	89bb      	ldrh	r3, [r7, #12]
 8009c42:	065b      	lsls	r3, r3, #25
 8009c44:	d500      	bpl.n	8009c48 <_vfiprintf_r+0x20c>
 8009c46:	e71e      	b.n	8009a86 <_vfiprintf_r+0x4a>
 8009c48:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009c4a:	e71e      	b.n	8009a8a <_vfiprintf_r+0x4e>
 8009c4c:	aa07      	add	r2, sp, #28
 8009c4e:	9200      	str	r2, [sp, #0]
 8009c50:	0021      	movs	r1, r4
 8009c52:	003a      	movs	r2, r7
 8009c54:	4b06      	ldr	r3, [pc, #24]	@ (8009c70 <_vfiprintf_r+0x234>)
 8009c56:	9803      	ldr	r0, [sp, #12]
 8009c58:	f7fd ff26 	bl	8007aa8 <_printf_i>
 8009c5c:	e7e3      	b.n	8009c26 <_vfiprintf_r+0x1ea>
 8009c5e:	46c0      	nop			@ (mov r8, r8)
 8009c60:	0800a6c0 	.word	0x0800a6c0
 8009c64:	0800a6c6 	.word	0x0800a6c6
 8009c68:	0800a6ca 	.word	0x0800a6ca
 8009c6c:	0800754d 	.word	0x0800754d
 8009c70:	08009a17 	.word	0x08009a17

08009c74 <__sflush_r>:
 8009c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c76:	220c      	movs	r2, #12
 8009c78:	5e8b      	ldrsh	r3, [r1, r2]
 8009c7a:	0005      	movs	r5, r0
 8009c7c:	000c      	movs	r4, r1
 8009c7e:	071a      	lsls	r2, r3, #28
 8009c80:	d456      	bmi.n	8009d30 <__sflush_r+0xbc>
 8009c82:	684a      	ldr	r2, [r1, #4]
 8009c84:	2a00      	cmp	r2, #0
 8009c86:	dc02      	bgt.n	8009c8e <__sflush_r+0x1a>
 8009c88:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8009c8a:	2a00      	cmp	r2, #0
 8009c8c:	dd4e      	ble.n	8009d2c <__sflush_r+0xb8>
 8009c8e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8009c90:	2f00      	cmp	r7, #0
 8009c92:	d04b      	beq.n	8009d2c <__sflush_r+0xb8>
 8009c94:	2200      	movs	r2, #0
 8009c96:	2080      	movs	r0, #128	@ 0x80
 8009c98:	682e      	ldr	r6, [r5, #0]
 8009c9a:	602a      	str	r2, [r5, #0]
 8009c9c:	001a      	movs	r2, r3
 8009c9e:	0140      	lsls	r0, r0, #5
 8009ca0:	6a21      	ldr	r1, [r4, #32]
 8009ca2:	4002      	ands	r2, r0
 8009ca4:	4203      	tst	r3, r0
 8009ca6:	d033      	beq.n	8009d10 <__sflush_r+0x9c>
 8009ca8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009caa:	89a3      	ldrh	r3, [r4, #12]
 8009cac:	075b      	lsls	r3, r3, #29
 8009cae:	d506      	bpl.n	8009cbe <__sflush_r+0x4a>
 8009cb0:	6863      	ldr	r3, [r4, #4]
 8009cb2:	1ad2      	subs	r2, r2, r3
 8009cb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d001      	beq.n	8009cbe <__sflush_r+0x4a>
 8009cba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009cbc:	1ad2      	subs	r2, r2, r3
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	0028      	movs	r0, r5
 8009cc2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8009cc4:	6a21      	ldr	r1, [r4, #32]
 8009cc6:	47b8      	blx	r7
 8009cc8:	89a2      	ldrh	r2, [r4, #12]
 8009cca:	1c43      	adds	r3, r0, #1
 8009ccc:	d106      	bne.n	8009cdc <__sflush_r+0x68>
 8009cce:	6829      	ldr	r1, [r5, #0]
 8009cd0:	291d      	cmp	r1, #29
 8009cd2:	d846      	bhi.n	8009d62 <__sflush_r+0xee>
 8009cd4:	4b29      	ldr	r3, [pc, #164]	@ (8009d7c <__sflush_r+0x108>)
 8009cd6:	410b      	asrs	r3, r1
 8009cd8:	07db      	lsls	r3, r3, #31
 8009cda:	d442      	bmi.n	8009d62 <__sflush_r+0xee>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	6063      	str	r3, [r4, #4]
 8009ce0:	6923      	ldr	r3, [r4, #16]
 8009ce2:	6023      	str	r3, [r4, #0]
 8009ce4:	04d2      	lsls	r2, r2, #19
 8009ce6:	d505      	bpl.n	8009cf4 <__sflush_r+0x80>
 8009ce8:	1c43      	adds	r3, r0, #1
 8009cea:	d102      	bne.n	8009cf2 <__sflush_r+0x7e>
 8009cec:	682b      	ldr	r3, [r5, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d100      	bne.n	8009cf4 <__sflush_r+0x80>
 8009cf2:	6560      	str	r0, [r4, #84]	@ 0x54
 8009cf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009cf6:	602e      	str	r6, [r5, #0]
 8009cf8:	2900      	cmp	r1, #0
 8009cfa:	d017      	beq.n	8009d2c <__sflush_r+0xb8>
 8009cfc:	0023      	movs	r3, r4
 8009cfe:	3344      	adds	r3, #68	@ 0x44
 8009d00:	4299      	cmp	r1, r3
 8009d02:	d002      	beq.n	8009d0a <__sflush_r+0x96>
 8009d04:	0028      	movs	r0, r5
 8009d06:	f7ff f869 	bl	8008ddc <_free_r>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d0e:	e00d      	b.n	8009d2c <__sflush_r+0xb8>
 8009d10:	2301      	movs	r3, #1
 8009d12:	0028      	movs	r0, r5
 8009d14:	47b8      	blx	r7
 8009d16:	0002      	movs	r2, r0
 8009d18:	1c43      	adds	r3, r0, #1
 8009d1a:	d1c6      	bne.n	8009caa <__sflush_r+0x36>
 8009d1c:	682b      	ldr	r3, [r5, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d0c3      	beq.n	8009caa <__sflush_r+0x36>
 8009d22:	2b1d      	cmp	r3, #29
 8009d24:	d001      	beq.n	8009d2a <__sflush_r+0xb6>
 8009d26:	2b16      	cmp	r3, #22
 8009d28:	d11a      	bne.n	8009d60 <__sflush_r+0xec>
 8009d2a:	602e      	str	r6, [r5, #0]
 8009d2c:	2000      	movs	r0, #0
 8009d2e:	e01e      	b.n	8009d6e <__sflush_r+0xfa>
 8009d30:	690e      	ldr	r6, [r1, #16]
 8009d32:	2e00      	cmp	r6, #0
 8009d34:	d0fa      	beq.n	8009d2c <__sflush_r+0xb8>
 8009d36:	680f      	ldr	r7, [r1, #0]
 8009d38:	600e      	str	r6, [r1, #0]
 8009d3a:	1bba      	subs	r2, r7, r6
 8009d3c:	9201      	str	r2, [sp, #4]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	079b      	lsls	r3, r3, #30
 8009d42:	d100      	bne.n	8009d46 <__sflush_r+0xd2>
 8009d44:	694a      	ldr	r2, [r1, #20]
 8009d46:	60a2      	str	r2, [r4, #8]
 8009d48:	9b01      	ldr	r3, [sp, #4]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	ddee      	ble.n	8009d2c <__sflush_r+0xb8>
 8009d4e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009d50:	0032      	movs	r2, r6
 8009d52:	001f      	movs	r7, r3
 8009d54:	0028      	movs	r0, r5
 8009d56:	9b01      	ldr	r3, [sp, #4]
 8009d58:	6a21      	ldr	r1, [r4, #32]
 8009d5a:	47b8      	blx	r7
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	dc07      	bgt.n	8009d70 <__sflush_r+0xfc>
 8009d60:	89a2      	ldrh	r2, [r4, #12]
 8009d62:	2340      	movs	r3, #64	@ 0x40
 8009d64:	2001      	movs	r0, #1
 8009d66:	4313      	orrs	r3, r2
 8009d68:	b21b      	sxth	r3, r3
 8009d6a:	81a3      	strh	r3, [r4, #12]
 8009d6c:	4240      	negs	r0, r0
 8009d6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009d70:	9b01      	ldr	r3, [sp, #4]
 8009d72:	1836      	adds	r6, r6, r0
 8009d74:	1a1b      	subs	r3, r3, r0
 8009d76:	9301      	str	r3, [sp, #4]
 8009d78:	e7e6      	b.n	8009d48 <__sflush_r+0xd4>
 8009d7a:	46c0      	nop			@ (mov r8, r8)
 8009d7c:	dfbffffe 	.word	0xdfbffffe

08009d80 <_fflush_r>:
 8009d80:	690b      	ldr	r3, [r1, #16]
 8009d82:	b570      	push	{r4, r5, r6, lr}
 8009d84:	0005      	movs	r5, r0
 8009d86:	000c      	movs	r4, r1
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d102      	bne.n	8009d92 <_fflush_r+0x12>
 8009d8c:	2500      	movs	r5, #0
 8009d8e:	0028      	movs	r0, r5
 8009d90:	bd70      	pop	{r4, r5, r6, pc}
 8009d92:	2800      	cmp	r0, #0
 8009d94:	d004      	beq.n	8009da0 <_fflush_r+0x20>
 8009d96:	6a03      	ldr	r3, [r0, #32]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d101      	bne.n	8009da0 <_fflush_r+0x20>
 8009d9c:	f7fe f822 	bl	8007de4 <__sinit>
 8009da0:	220c      	movs	r2, #12
 8009da2:	5ea3      	ldrsh	r3, [r4, r2]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d0f1      	beq.n	8009d8c <_fflush_r+0xc>
 8009da8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009daa:	07d2      	lsls	r2, r2, #31
 8009dac:	d404      	bmi.n	8009db8 <_fflush_r+0x38>
 8009dae:	059b      	lsls	r3, r3, #22
 8009db0:	d402      	bmi.n	8009db8 <_fflush_r+0x38>
 8009db2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009db4:	f7fe f983 	bl	80080be <__retarget_lock_acquire_recursive>
 8009db8:	0028      	movs	r0, r5
 8009dba:	0021      	movs	r1, r4
 8009dbc:	f7ff ff5a 	bl	8009c74 <__sflush_r>
 8009dc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009dc2:	0005      	movs	r5, r0
 8009dc4:	07db      	lsls	r3, r3, #31
 8009dc6:	d4e2      	bmi.n	8009d8e <_fflush_r+0xe>
 8009dc8:	89a3      	ldrh	r3, [r4, #12]
 8009dca:	059b      	lsls	r3, r3, #22
 8009dcc:	d4df      	bmi.n	8009d8e <_fflush_r+0xe>
 8009dce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009dd0:	f7fe f976 	bl	80080c0 <__retarget_lock_release_recursive>
 8009dd4:	e7db      	b.n	8009d8e <_fflush_r+0xe>

08009dd6 <__swbuf_r>:
 8009dd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd8:	0006      	movs	r6, r0
 8009dda:	000d      	movs	r5, r1
 8009ddc:	0014      	movs	r4, r2
 8009dde:	2800      	cmp	r0, #0
 8009de0:	d004      	beq.n	8009dec <__swbuf_r+0x16>
 8009de2:	6a03      	ldr	r3, [r0, #32]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d101      	bne.n	8009dec <__swbuf_r+0x16>
 8009de8:	f7fd fffc 	bl	8007de4 <__sinit>
 8009dec:	69a3      	ldr	r3, [r4, #24]
 8009dee:	60a3      	str	r3, [r4, #8]
 8009df0:	89a3      	ldrh	r3, [r4, #12]
 8009df2:	071b      	lsls	r3, r3, #28
 8009df4:	d502      	bpl.n	8009dfc <__swbuf_r+0x26>
 8009df6:	6923      	ldr	r3, [r4, #16]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d109      	bne.n	8009e10 <__swbuf_r+0x3a>
 8009dfc:	0021      	movs	r1, r4
 8009dfe:	0030      	movs	r0, r6
 8009e00:	f000 f82c 	bl	8009e5c <__swsetup_r>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	d003      	beq.n	8009e10 <__swbuf_r+0x3a>
 8009e08:	2501      	movs	r5, #1
 8009e0a:	426d      	negs	r5, r5
 8009e0c:	0028      	movs	r0, r5
 8009e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e10:	6923      	ldr	r3, [r4, #16]
 8009e12:	6820      	ldr	r0, [r4, #0]
 8009e14:	b2ef      	uxtb	r7, r5
 8009e16:	1ac0      	subs	r0, r0, r3
 8009e18:	6963      	ldr	r3, [r4, #20]
 8009e1a:	b2ed      	uxtb	r5, r5
 8009e1c:	4283      	cmp	r3, r0
 8009e1e:	dc05      	bgt.n	8009e2c <__swbuf_r+0x56>
 8009e20:	0021      	movs	r1, r4
 8009e22:	0030      	movs	r0, r6
 8009e24:	f7ff ffac 	bl	8009d80 <_fflush_r>
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	d1ed      	bne.n	8009e08 <__swbuf_r+0x32>
 8009e2c:	68a3      	ldr	r3, [r4, #8]
 8009e2e:	3001      	adds	r0, #1
 8009e30:	3b01      	subs	r3, #1
 8009e32:	60a3      	str	r3, [r4, #8]
 8009e34:	6823      	ldr	r3, [r4, #0]
 8009e36:	1c5a      	adds	r2, r3, #1
 8009e38:	6022      	str	r2, [r4, #0]
 8009e3a:	701f      	strb	r7, [r3, #0]
 8009e3c:	6963      	ldr	r3, [r4, #20]
 8009e3e:	4283      	cmp	r3, r0
 8009e40:	d004      	beq.n	8009e4c <__swbuf_r+0x76>
 8009e42:	89a3      	ldrh	r3, [r4, #12]
 8009e44:	07db      	lsls	r3, r3, #31
 8009e46:	d5e1      	bpl.n	8009e0c <__swbuf_r+0x36>
 8009e48:	2d0a      	cmp	r5, #10
 8009e4a:	d1df      	bne.n	8009e0c <__swbuf_r+0x36>
 8009e4c:	0021      	movs	r1, r4
 8009e4e:	0030      	movs	r0, r6
 8009e50:	f7ff ff96 	bl	8009d80 <_fflush_r>
 8009e54:	2800      	cmp	r0, #0
 8009e56:	d0d9      	beq.n	8009e0c <__swbuf_r+0x36>
 8009e58:	e7d6      	b.n	8009e08 <__swbuf_r+0x32>
	...

08009e5c <__swsetup_r>:
 8009e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8009f14 <__swsetup_r+0xb8>)
 8009e5e:	b570      	push	{r4, r5, r6, lr}
 8009e60:	0005      	movs	r5, r0
 8009e62:	6818      	ldr	r0, [r3, #0]
 8009e64:	000c      	movs	r4, r1
 8009e66:	2800      	cmp	r0, #0
 8009e68:	d004      	beq.n	8009e74 <__swsetup_r+0x18>
 8009e6a:	6a03      	ldr	r3, [r0, #32]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d101      	bne.n	8009e74 <__swsetup_r+0x18>
 8009e70:	f7fd ffb8 	bl	8007de4 <__sinit>
 8009e74:	230c      	movs	r3, #12
 8009e76:	5ee2      	ldrsh	r2, [r4, r3]
 8009e78:	0713      	lsls	r3, r2, #28
 8009e7a:	d423      	bmi.n	8009ec4 <__swsetup_r+0x68>
 8009e7c:	06d3      	lsls	r3, r2, #27
 8009e7e:	d407      	bmi.n	8009e90 <__swsetup_r+0x34>
 8009e80:	2309      	movs	r3, #9
 8009e82:	602b      	str	r3, [r5, #0]
 8009e84:	2340      	movs	r3, #64	@ 0x40
 8009e86:	2001      	movs	r0, #1
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	81a3      	strh	r3, [r4, #12]
 8009e8c:	4240      	negs	r0, r0
 8009e8e:	e03a      	b.n	8009f06 <__swsetup_r+0xaa>
 8009e90:	0752      	lsls	r2, r2, #29
 8009e92:	d513      	bpl.n	8009ebc <__swsetup_r+0x60>
 8009e94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e96:	2900      	cmp	r1, #0
 8009e98:	d008      	beq.n	8009eac <__swsetup_r+0x50>
 8009e9a:	0023      	movs	r3, r4
 8009e9c:	3344      	adds	r3, #68	@ 0x44
 8009e9e:	4299      	cmp	r1, r3
 8009ea0:	d002      	beq.n	8009ea8 <__swsetup_r+0x4c>
 8009ea2:	0028      	movs	r0, r5
 8009ea4:	f7fe ff9a 	bl	8008ddc <_free_r>
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	6363      	str	r3, [r4, #52]	@ 0x34
 8009eac:	2224      	movs	r2, #36	@ 0x24
 8009eae:	89a3      	ldrh	r3, [r4, #12]
 8009eb0:	4393      	bics	r3, r2
 8009eb2:	81a3      	strh	r3, [r4, #12]
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	6063      	str	r3, [r4, #4]
 8009eb8:	6923      	ldr	r3, [r4, #16]
 8009eba:	6023      	str	r3, [r4, #0]
 8009ebc:	2308      	movs	r3, #8
 8009ebe:	89a2      	ldrh	r2, [r4, #12]
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	81a3      	strh	r3, [r4, #12]
 8009ec4:	6923      	ldr	r3, [r4, #16]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d10b      	bne.n	8009ee2 <__swsetup_r+0x86>
 8009eca:	21a0      	movs	r1, #160	@ 0xa0
 8009ecc:	2280      	movs	r2, #128	@ 0x80
 8009ece:	89a3      	ldrh	r3, [r4, #12]
 8009ed0:	0089      	lsls	r1, r1, #2
 8009ed2:	0092      	lsls	r2, r2, #2
 8009ed4:	400b      	ands	r3, r1
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d003      	beq.n	8009ee2 <__swsetup_r+0x86>
 8009eda:	0021      	movs	r1, r4
 8009edc:	0028      	movs	r0, r5
 8009ede:	f000 f91f 	bl	800a120 <__smakebuf_r>
 8009ee2:	230c      	movs	r3, #12
 8009ee4:	5ee2      	ldrsh	r2, [r4, r3]
 8009ee6:	2101      	movs	r1, #1
 8009ee8:	0013      	movs	r3, r2
 8009eea:	400b      	ands	r3, r1
 8009eec:	420a      	tst	r2, r1
 8009eee:	d00b      	beq.n	8009f08 <__swsetup_r+0xac>
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	60a3      	str	r3, [r4, #8]
 8009ef4:	6963      	ldr	r3, [r4, #20]
 8009ef6:	425b      	negs	r3, r3
 8009ef8:	61a3      	str	r3, [r4, #24]
 8009efa:	2000      	movs	r0, #0
 8009efc:	6923      	ldr	r3, [r4, #16]
 8009efe:	4283      	cmp	r3, r0
 8009f00:	d101      	bne.n	8009f06 <__swsetup_r+0xaa>
 8009f02:	0613      	lsls	r3, r2, #24
 8009f04:	d4be      	bmi.n	8009e84 <__swsetup_r+0x28>
 8009f06:	bd70      	pop	{r4, r5, r6, pc}
 8009f08:	0791      	lsls	r1, r2, #30
 8009f0a:	d400      	bmi.n	8009f0e <__swsetup_r+0xb2>
 8009f0c:	6963      	ldr	r3, [r4, #20]
 8009f0e:	60a3      	str	r3, [r4, #8]
 8009f10:	e7f3      	b.n	8009efa <__swsetup_r+0x9e>
 8009f12:	46c0      	nop			@ (mov r8, r8)
 8009f14:	2000001c 	.word	0x2000001c

08009f18 <memmove>:
 8009f18:	b510      	push	{r4, lr}
 8009f1a:	4288      	cmp	r0, r1
 8009f1c:	d806      	bhi.n	8009f2c <memmove+0x14>
 8009f1e:	2300      	movs	r3, #0
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d008      	beq.n	8009f36 <memmove+0x1e>
 8009f24:	5ccc      	ldrb	r4, [r1, r3]
 8009f26:	54c4      	strb	r4, [r0, r3]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	e7f9      	b.n	8009f20 <memmove+0x8>
 8009f2c:	188b      	adds	r3, r1, r2
 8009f2e:	4298      	cmp	r0, r3
 8009f30:	d2f5      	bcs.n	8009f1e <memmove+0x6>
 8009f32:	3a01      	subs	r2, #1
 8009f34:	d200      	bcs.n	8009f38 <memmove+0x20>
 8009f36:	bd10      	pop	{r4, pc}
 8009f38:	5c8b      	ldrb	r3, [r1, r2]
 8009f3a:	5483      	strb	r3, [r0, r2]
 8009f3c:	e7f9      	b.n	8009f32 <memmove+0x1a>
	...

08009f40 <_sbrk_r>:
 8009f40:	2300      	movs	r3, #0
 8009f42:	b570      	push	{r4, r5, r6, lr}
 8009f44:	4d06      	ldr	r5, [pc, #24]	@ (8009f60 <_sbrk_r+0x20>)
 8009f46:	0004      	movs	r4, r0
 8009f48:	0008      	movs	r0, r1
 8009f4a:	602b      	str	r3, [r5, #0]
 8009f4c:	f7f8 ffb8 	bl	8002ec0 <_sbrk>
 8009f50:	1c43      	adds	r3, r0, #1
 8009f52:	d103      	bne.n	8009f5c <_sbrk_r+0x1c>
 8009f54:	682b      	ldr	r3, [r5, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d000      	beq.n	8009f5c <_sbrk_r+0x1c>
 8009f5a:	6023      	str	r3, [r4, #0]
 8009f5c:	bd70      	pop	{r4, r5, r6, pc}
 8009f5e:	46c0      	nop			@ (mov r8, r8)
 8009f60:	20000aa8 	.word	0x20000aa8

08009f64 <memcpy>:
 8009f64:	2300      	movs	r3, #0
 8009f66:	b510      	push	{r4, lr}
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d100      	bne.n	8009f6e <memcpy+0xa>
 8009f6c:	bd10      	pop	{r4, pc}
 8009f6e:	5ccc      	ldrb	r4, [r1, r3]
 8009f70:	54c4      	strb	r4, [r0, r3]
 8009f72:	3301      	adds	r3, #1
 8009f74:	e7f8      	b.n	8009f68 <memcpy+0x4>
	...

08009f78 <__assert_func>:
 8009f78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009f7a:	0014      	movs	r4, r2
 8009f7c:	001a      	movs	r2, r3
 8009f7e:	4b09      	ldr	r3, [pc, #36]	@ (8009fa4 <__assert_func+0x2c>)
 8009f80:	0005      	movs	r5, r0
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	000e      	movs	r6, r1
 8009f86:	68d8      	ldr	r0, [r3, #12]
 8009f88:	4b07      	ldr	r3, [pc, #28]	@ (8009fa8 <__assert_func+0x30>)
 8009f8a:	2c00      	cmp	r4, #0
 8009f8c:	d101      	bne.n	8009f92 <__assert_func+0x1a>
 8009f8e:	4b07      	ldr	r3, [pc, #28]	@ (8009fac <__assert_func+0x34>)
 8009f90:	001c      	movs	r4, r3
 8009f92:	4907      	ldr	r1, [pc, #28]	@ (8009fb0 <__assert_func+0x38>)
 8009f94:	9301      	str	r3, [sp, #4]
 8009f96:	9402      	str	r4, [sp, #8]
 8009f98:	002b      	movs	r3, r5
 8009f9a:	9600      	str	r6, [sp, #0]
 8009f9c:	f000 f886 	bl	800a0ac <fiprintf>
 8009fa0:	f000 f924 	bl	800a1ec <abort>
 8009fa4:	2000001c 	.word	0x2000001c
 8009fa8:	0800a6db 	.word	0x0800a6db
 8009fac:	0800a716 	.word	0x0800a716
 8009fb0:	0800a6e8 	.word	0x0800a6e8

08009fb4 <_calloc_r>:
 8009fb4:	b570      	push	{r4, r5, r6, lr}
 8009fb6:	0c0b      	lsrs	r3, r1, #16
 8009fb8:	0c15      	lsrs	r5, r2, #16
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d11e      	bne.n	8009ffc <_calloc_r+0x48>
 8009fbe:	2d00      	cmp	r5, #0
 8009fc0:	d10c      	bne.n	8009fdc <_calloc_r+0x28>
 8009fc2:	b289      	uxth	r1, r1
 8009fc4:	b294      	uxth	r4, r2
 8009fc6:	434c      	muls	r4, r1
 8009fc8:	0021      	movs	r1, r4
 8009fca:	f7fe ff7d 	bl	8008ec8 <_malloc_r>
 8009fce:	1e05      	subs	r5, r0, #0
 8009fd0:	d01a      	beq.n	800a008 <_calloc_r+0x54>
 8009fd2:	0022      	movs	r2, r4
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	f7fd ffed 	bl	8007fb4 <memset>
 8009fda:	e016      	b.n	800a00a <_calloc_r+0x56>
 8009fdc:	1c2b      	adds	r3, r5, #0
 8009fde:	1c0c      	adds	r4, r1, #0
 8009fe0:	b289      	uxth	r1, r1
 8009fe2:	b292      	uxth	r2, r2
 8009fe4:	434a      	muls	r2, r1
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	b2a1      	uxth	r1, r4
 8009fea:	4359      	muls	r1, r3
 8009fec:	0c14      	lsrs	r4, r2, #16
 8009fee:	190c      	adds	r4, r1, r4
 8009ff0:	0c23      	lsrs	r3, r4, #16
 8009ff2:	d107      	bne.n	800a004 <_calloc_r+0x50>
 8009ff4:	0424      	lsls	r4, r4, #16
 8009ff6:	b292      	uxth	r2, r2
 8009ff8:	4314      	orrs	r4, r2
 8009ffa:	e7e5      	b.n	8009fc8 <_calloc_r+0x14>
 8009ffc:	2d00      	cmp	r5, #0
 8009ffe:	d101      	bne.n	800a004 <_calloc_r+0x50>
 800a000:	1c14      	adds	r4, r2, #0
 800a002:	e7ed      	b.n	8009fe0 <_calloc_r+0x2c>
 800a004:	230c      	movs	r3, #12
 800a006:	6003      	str	r3, [r0, #0]
 800a008:	2500      	movs	r5, #0
 800a00a:	0028      	movs	r0, r5
 800a00c:	bd70      	pop	{r4, r5, r6, pc}

0800a00e <__ascii_mbtowc>:
 800a00e:	b082      	sub	sp, #8
 800a010:	2900      	cmp	r1, #0
 800a012:	d100      	bne.n	800a016 <__ascii_mbtowc+0x8>
 800a014:	a901      	add	r1, sp, #4
 800a016:	1e10      	subs	r0, r2, #0
 800a018:	d006      	beq.n	800a028 <__ascii_mbtowc+0x1a>
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d006      	beq.n	800a02c <__ascii_mbtowc+0x1e>
 800a01e:	7813      	ldrb	r3, [r2, #0]
 800a020:	600b      	str	r3, [r1, #0]
 800a022:	7810      	ldrb	r0, [r2, #0]
 800a024:	1e43      	subs	r3, r0, #1
 800a026:	4198      	sbcs	r0, r3
 800a028:	b002      	add	sp, #8
 800a02a:	4770      	bx	lr
 800a02c:	2002      	movs	r0, #2
 800a02e:	4240      	negs	r0, r0
 800a030:	e7fa      	b.n	800a028 <__ascii_mbtowc+0x1a>

0800a032 <_realloc_r>:
 800a032:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a034:	0006      	movs	r6, r0
 800a036:	000c      	movs	r4, r1
 800a038:	0015      	movs	r5, r2
 800a03a:	2900      	cmp	r1, #0
 800a03c:	d105      	bne.n	800a04a <_realloc_r+0x18>
 800a03e:	0011      	movs	r1, r2
 800a040:	f7fe ff42 	bl	8008ec8 <_malloc_r>
 800a044:	0004      	movs	r4, r0
 800a046:	0020      	movs	r0, r4
 800a048:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a04a:	2a00      	cmp	r2, #0
 800a04c:	d103      	bne.n	800a056 <_realloc_r+0x24>
 800a04e:	f7fe fec5 	bl	8008ddc <_free_r>
 800a052:	2400      	movs	r4, #0
 800a054:	e7f7      	b.n	800a046 <_realloc_r+0x14>
 800a056:	f000 f8d0 	bl	800a1fa <_malloc_usable_size_r>
 800a05a:	0007      	movs	r7, r0
 800a05c:	4285      	cmp	r5, r0
 800a05e:	d802      	bhi.n	800a066 <_realloc_r+0x34>
 800a060:	0843      	lsrs	r3, r0, #1
 800a062:	42ab      	cmp	r3, r5
 800a064:	d3ef      	bcc.n	800a046 <_realloc_r+0x14>
 800a066:	0029      	movs	r1, r5
 800a068:	0030      	movs	r0, r6
 800a06a:	f7fe ff2d 	bl	8008ec8 <_malloc_r>
 800a06e:	9001      	str	r0, [sp, #4]
 800a070:	2800      	cmp	r0, #0
 800a072:	d0ee      	beq.n	800a052 <_realloc_r+0x20>
 800a074:	002a      	movs	r2, r5
 800a076:	42bd      	cmp	r5, r7
 800a078:	d900      	bls.n	800a07c <_realloc_r+0x4a>
 800a07a:	003a      	movs	r2, r7
 800a07c:	0021      	movs	r1, r4
 800a07e:	9801      	ldr	r0, [sp, #4]
 800a080:	f7ff ff70 	bl	8009f64 <memcpy>
 800a084:	0021      	movs	r1, r4
 800a086:	0030      	movs	r0, r6
 800a088:	f7fe fea8 	bl	8008ddc <_free_r>
 800a08c:	9c01      	ldr	r4, [sp, #4]
 800a08e:	e7da      	b.n	800a046 <_realloc_r+0x14>

0800a090 <__ascii_wctomb>:
 800a090:	0003      	movs	r3, r0
 800a092:	1e08      	subs	r0, r1, #0
 800a094:	d005      	beq.n	800a0a2 <__ascii_wctomb+0x12>
 800a096:	2aff      	cmp	r2, #255	@ 0xff
 800a098:	d904      	bls.n	800a0a4 <__ascii_wctomb+0x14>
 800a09a:	228a      	movs	r2, #138	@ 0x8a
 800a09c:	2001      	movs	r0, #1
 800a09e:	601a      	str	r2, [r3, #0]
 800a0a0:	4240      	negs	r0, r0
 800a0a2:	4770      	bx	lr
 800a0a4:	2001      	movs	r0, #1
 800a0a6:	700a      	strb	r2, [r1, #0]
 800a0a8:	e7fb      	b.n	800a0a2 <__ascii_wctomb+0x12>
	...

0800a0ac <fiprintf>:
 800a0ac:	b40e      	push	{r1, r2, r3}
 800a0ae:	b517      	push	{r0, r1, r2, r4, lr}
 800a0b0:	4c05      	ldr	r4, [pc, #20]	@ (800a0c8 <fiprintf+0x1c>)
 800a0b2:	ab05      	add	r3, sp, #20
 800a0b4:	cb04      	ldmia	r3!, {r2}
 800a0b6:	0001      	movs	r1, r0
 800a0b8:	6820      	ldr	r0, [r4, #0]
 800a0ba:	9301      	str	r3, [sp, #4]
 800a0bc:	f7ff fcbe 	bl	8009a3c <_vfiprintf_r>
 800a0c0:	bc1e      	pop	{r1, r2, r3, r4}
 800a0c2:	bc08      	pop	{r3}
 800a0c4:	b003      	add	sp, #12
 800a0c6:	4718      	bx	r3
 800a0c8:	2000001c 	.word	0x2000001c

0800a0cc <__swhatbuf_r>:
 800a0cc:	b570      	push	{r4, r5, r6, lr}
 800a0ce:	000e      	movs	r6, r1
 800a0d0:	001d      	movs	r5, r3
 800a0d2:	230e      	movs	r3, #14
 800a0d4:	5ec9      	ldrsh	r1, [r1, r3]
 800a0d6:	0014      	movs	r4, r2
 800a0d8:	b096      	sub	sp, #88	@ 0x58
 800a0da:	2900      	cmp	r1, #0
 800a0dc:	da0c      	bge.n	800a0f8 <__swhatbuf_r+0x2c>
 800a0de:	89b2      	ldrh	r2, [r6, #12]
 800a0e0:	2380      	movs	r3, #128	@ 0x80
 800a0e2:	0011      	movs	r1, r2
 800a0e4:	4019      	ands	r1, r3
 800a0e6:	421a      	tst	r2, r3
 800a0e8:	d114      	bne.n	800a114 <__swhatbuf_r+0x48>
 800a0ea:	2380      	movs	r3, #128	@ 0x80
 800a0ec:	00db      	lsls	r3, r3, #3
 800a0ee:	2000      	movs	r0, #0
 800a0f0:	6029      	str	r1, [r5, #0]
 800a0f2:	6023      	str	r3, [r4, #0]
 800a0f4:	b016      	add	sp, #88	@ 0x58
 800a0f6:	bd70      	pop	{r4, r5, r6, pc}
 800a0f8:	466a      	mov	r2, sp
 800a0fa:	f000 f853 	bl	800a1a4 <_fstat_r>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	dbed      	blt.n	800a0de <__swhatbuf_r+0x12>
 800a102:	23f0      	movs	r3, #240	@ 0xf0
 800a104:	9901      	ldr	r1, [sp, #4]
 800a106:	021b      	lsls	r3, r3, #8
 800a108:	4019      	ands	r1, r3
 800a10a:	4b04      	ldr	r3, [pc, #16]	@ (800a11c <__swhatbuf_r+0x50>)
 800a10c:	18c9      	adds	r1, r1, r3
 800a10e:	424b      	negs	r3, r1
 800a110:	4159      	adcs	r1, r3
 800a112:	e7ea      	b.n	800a0ea <__swhatbuf_r+0x1e>
 800a114:	2100      	movs	r1, #0
 800a116:	2340      	movs	r3, #64	@ 0x40
 800a118:	e7e9      	b.n	800a0ee <__swhatbuf_r+0x22>
 800a11a:	46c0      	nop			@ (mov r8, r8)
 800a11c:	ffffe000 	.word	0xffffe000

0800a120 <__smakebuf_r>:
 800a120:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a122:	2602      	movs	r6, #2
 800a124:	898b      	ldrh	r3, [r1, #12]
 800a126:	0005      	movs	r5, r0
 800a128:	000c      	movs	r4, r1
 800a12a:	b085      	sub	sp, #20
 800a12c:	4233      	tst	r3, r6
 800a12e:	d007      	beq.n	800a140 <__smakebuf_r+0x20>
 800a130:	0023      	movs	r3, r4
 800a132:	3347      	adds	r3, #71	@ 0x47
 800a134:	6023      	str	r3, [r4, #0]
 800a136:	6123      	str	r3, [r4, #16]
 800a138:	2301      	movs	r3, #1
 800a13a:	6163      	str	r3, [r4, #20]
 800a13c:	b005      	add	sp, #20
 800a13e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a140:	ab03      	add	r3, sp, #12
 800a142:	aa02      	add	r2, sp, #8
 800a144:	f7ff ffc2 	bl	800a0cc <__swhatbuf_r>
 800a148:	9f02      	ldr	r7, [sp, #8]
 800a14a:	9001      	str	r0, [sp, #4]
 800a14c:	0039      	movs	r1, r7
 800a14e:	0028      	movs	r0, r5
 800a150:	f7fe feba 	bl	8008ec8 <_malloc_r>
 800a154:	2800      	cmp	r0, #0
 800a156:	d108      	bne.n	800a16a <__smakebuf_r+0x4a>
 800a158:	220c      	movs	r2, #12
 800a15a:	5ea3      	ldrsh	r3, [r4, r2]
 800a15c:	059a      	lsls	r2, r3, #22
 800a15e:	d4ed      	bmi.n	800a13c <__smakebuf_r+0x1c>
 800a160:	2203      	movs	r2, #3
 800a162:	4393      	bics	r3, r2
 800a164:	431e      	orrs	r6, r3
 800a166:	81a6      	strh	r6, [r4, #12]
 800a168:	e7e2      	b.n	800a130 <__smakebuf_r+0x10>
 800a16a:	2380      	movs	r3, #128	@ 0x80
 800a16c:	89a2      	ldrh	r2, [r4, #12]
 800a16e:	6020      	str	r0, [r4, #0]
 800a170:	4313      	orrs	r3, r2
 800a172:	81a3      	strh	r3, [r4, #12]
 800a174:	9b03      	ldr	r3, [sp, #12]
 800a176:	6120      	str	r0, [r4, #16]
 800a178:	6167      	str	r7, [r4, #20]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00c      	beq.n	800a198 <__smakebuf_r+0x78>
 800a17e:	0028      	movs	r0, r5
 800a180:	230e      	movs	r3, #14
 800a182:	5ee1      	ldrsh	r1, [r4, r3]
 800a184:	f000 f820 	bl	800a1c8 <_isatty_r>
 800a188:	2800      	cmp	r0, #0
 800a18a:	d005      	beq.n	800a198 <__smakebuf_r+0x78>
 800a18c:	2303      	movs	r3, #3
 800a18e:	89a2      	ldrh	r2, [r4, #12]
 800a190:	439a      	bics	r2, r3
 800a192:	3b02      	subs	r3, #2
 800a194:	4313      	orrs	r3, r2
 800a196:	81a3      	strh	r3, [r4, #12]
 800a198:	89a3      	ldrh	r3, [r4, #12]
 800a19a:	9a01      	ldr	r2, [sp, #4]
 800a19c:	4313      	orrs	r3, r2
 800a19e:	81a3      	strh	r3, [r4, #12]
 800a1a0:	e7cc      	b.n	800a13c <__smakebuf_r+0x1c>
	...

0800a1a4 <_fstat_r>:
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	b570      	push	{r4, r5, r6, lr}
 800a1a8:	4d06      	ldr	r5, [pc, #24]	@ (800a1c4 <_fstat_r+0x20>)
 800a1aa:	0004      	movs	r4, r0
 800a1ac:	0008      	movs	r0, r1
 800a1ae:	0011      	movs	r1, r2
 800a1b0:	602b      	str	r3, [r5, #0]
 800a1b2:	f7f8 fe63 	bl	8002e7c <_fstat>
 800a1b6:	1c43      	adds	r3, r0, #1
 800a1b8:	d103      	bne.n	800a1c2 <_fstat_r+0x1e>
 800a1ba:	682b      	ldr	r3, [r5, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d000      	beq.n	800a1c2 <_fstat_r+0x1e>
 800a1c0:	6023      	str	r3, [r4, #0]
 800a1c2:	bd70      	pop	{r4, r5, r6, pc}
 800a1c4:	20000aa8 	.word	0x20000aa8

0800a1c8 <_isatty_r>:
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	b570      	push	{r4, r5, r6, lr}
 800a1cc:	4d06      	ldr	r5, [pc, #24]	@ (800a1e8 <_isatty_r+0x20>)
 800a1ce:	0004      	movs	r4, r0
 800a1d0:	0008      	movs	r0, r1
 800a1d2:	602b      	str	r3, [r5, #0]
 800a1d4:	f7f8 fe60 	bl	8002e98 <_isatty>
 800a1d8:	1c43      	adds	r3, r0, #1
 800a1da:	d103      	bne.n	800a1e4 <_isatty_r+0x1c>
 800a1dc:	682b      	ldr	r3, [r5, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d000      	beq.n	800a1e4 <_isatty_r+0x1c>
 800a1e2:	6023      	str	r3, [r4, #0]
 800a1e4:	bd70      	pop	{r4, r5, r6, pc}
 800a1e6:	46c0      	nop			@ (mov r8, r8)
 800a1e8:	20000aa8 	.word	0x20000aa8

0800a1ec <abort>:
 800a1ec:	2006      	movs	r0, #6
 800a1ee:	b510      	push	{r4, lr}
 800a1f0:	f000 f834 	bl	800a25c <raise>
 800a1f4:	2001      	movs	r0, #1
 800a1f6:	f7f8 fe0d 	bl	8002e14 <_exit>

0800a1fa <_malloc_usable_size_r>:
 800a1fa:	1f0b      	subs	r3, r1, #4
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	1f18      	subs	r0, r3, #4
 800a200:	2b00      	cmp	r3, #0
 800a202:	da01      	bge.n	800a208 <_malloc_usable_size_r+0xe>
 800a204:	580b      	ldr	r3, [r1, r0]
 800a206:	18c0      	adds	r0, r0, r3
 800a208:	4770      	bx	lr

0800a20a <_raise_r>:
 800a20a:	b570      	push	{r4, r5, r6, lr}
 800a20c:	0004      	movs	r4, r0
 800a20e:	000d      	movs	r5, r1
 800a210:	291f      	cmp	r1, #31
 800a212:	d904      	bls.n	800a21e <_raise_r+0x14>
 800a214:	2316      	movs	r3, #22
 800a216:	6003      	str	r3, [r0, #0]
 800a218:	2001      	movs	r0, #1
 800a21a:	4240      	negs	r0, r0
 800a21c:	bd70      	pop	{r4, r5, r6, pc}
 800a21e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800a220:	2b00      	cmp	r3, #0
 800a222:	d004      	beq.n	800a22e <_raise_r+0x24>
 800a224:	008a      	lsls	r2, r1, #2
 800a226:	189b      	adds	r3, r3, r2
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	2a00      	cmp	r2, #0
 800a22c:	d108      	bne.n	800a240 <_raise_r+0x36>
 800a22e:	0020      	movs	r0, r4
 800a230:	f000 f830 	bl	800a294 <_getpid_r>
 800a234:	002a      	movs	r2, r5
 800a236:	0001      	movs	r1, r0
 800a238:	0020      	movs	r0, r4
 800a23a:	f000 f819 	bl	800a270 <_kill_r>
 800a23e:	e7ed      	b.n	800a21c <_raise_r+0x12>
 800a240:	2a01      	cmp	r2, #1
 800a242:	d009      	beq.n	800a258 <_raise_r+0x4e>
 800a244:	1c51      	adds	r1, r2, #1
 800a246:	d103      	bne.n	800a250 <_raise_r+0x46>
 800a248:	2316      	movs	r3, #22
 800a24a:	6003      	str	r3, [r0, #0]
 800a24c:	2001      	movs	r0, #1
 800a24e:	e7e5      	b.n	800a21c <_raise_r+0x12>
 800a250:	2100      	movs	r1, #0
 800a252:	0028      	movs	r0, r5
 800a254:	6019      	str	r1, [r3, #0]
 800a256:	4790      	blx	r2
 800a258:	2000      	movs	r0, #0
 800a25a:	e7df      	b.n	800a21c <_raise_r+0x12>

0800a25c <raise>:
 800a25c:	b510      	push	{r4, lr}
 800a25e:	4b03      	ldr	r3, [pc, #12]	@ (800a26c <raise+0x10>)
 800a260:	0001      	movs	r1, r0
 800a262:	6818      	ldr	r0, [r3, #0]
 800a264:	f7ff ffd1 	bl	800a20a <_raise_r>
 800a268:	bd10      	pop	{r4, pc}
 800a26a:	46c0      	nop			@ (mov r8, r8)
 800a26c:	2000001c 	.word	0x2000001c

0800a270 <_kill_r>:
 800a270:	2300      	movs	r3, #0
 800a272:	b570      	push	{r4, r5, r6, lr}
 800a274:	4d06      	ldr	r5, [pc, #24]	@ (800a290 <_kill_r+0x20>)
 800a276:	0004      	movs	r4, r0
 800a278:	0008      	movs	r0, r1
 800a27a:	0011      	movs	r1, r2
 800a27c:	602b      	str	r3, [r5, #0]
 800a27e:	f7f8 fdb9 	bl	8002df4 <_kill>
 800a282:	1c43      	adds	r3, r0, #1
 800a284:	d103      	bne.n	800a28e <_kill_r+0x1e>
 800a286:	682b      	ldr	r3, [r5, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d000      	beq.n	800a28e <_kill_r+0x1e>
 800a28c:	6023      	str	r3, [r4, #0]
 800a28e:	bd70      	pop	{r4, r5, r6, pc}
 800a290:	20000aa8 	.word	0x20000aa8

0800a294 <_getpid_r>:
 800a294:	b510      	push	{r4, lr}
 800a296:	f7f8 fda7 	bl	8002de8 <_getpid>
 800a29a:	bd10      	pop	{r4, pc}

0800a29c <_init>:
 800a29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a29e:	46c0      	nop			@ (mov r8, r8)
 800a2a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2a2:	bc08      	pop	{r3}
 800a2a4:	469e      	mov	lr, r3
 800a2a6:	4770      	bx	lr

0800a2a8 <_fini>:
 800a2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2aa:	46c0      	nop			@ (mov r8, r8)
 800a2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ae:	bc08      	pop	{r3}
 800a2b0:	469e      	mov	lr, r3
 800a2b2:	4770      	bx	lr
