
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000196e4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001070  080197a8  080197a8  0001a7a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a818  0801a818  0001c4a8  2**0
                  CONTENTS
  4 .ARM          00000008  0801a818  0801a818  0001b818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a820  0801a820  0001c4a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a820  0801a820  0001b820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a824  0801a824  0001b824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004a8  20000000  0801a828  0001c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f38  200004a8  0801acd0  0001c4a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  200043e0  0801acd0  0001d3e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001c4a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000269c7  00000000  00000000  0001c4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006bd4  00000000  00000000  00042e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ef8  00000000  00000000  00049a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000178c  00000000  00000000  0004b968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dea8  00000000  00000000  0004d0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030240  00000000  00000000  0006af9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095b03  00000000  00000000  0009b1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130cdf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008370  00000000  00000000  00130d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00139094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200004a8 	.word	0x200004a8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801978c 	.word	0x0801978c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200004ac 	.word	0x200004ac
 8000104:	0801978c 	.word	0x0801978c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f809 	bl	8002454 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff49 	bl	80022e4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fffb 	bl	8002454 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fff1 	bl	8002454 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff73 	bl	800236c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff69 	bl	800236c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fca5 	bl	8000e00 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc25 	bl	8000d10 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc97 	bl	8000e00 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc8d 	bl	8000e00 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc33 	bl	8000d60 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc29 	bl	8000d60 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f86a 	bl	8000624 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__aeabi_f2uiz>:
 80005b8:	219e      	movs	r1, #158	@ 0x9e
 80005ba:	b510      	push	{r4, lr}
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	1c04      	adds	r4, r0, #0
 80005c0:	f7ff ffa2 	bl	8000508 <__aeabi_fcmpge>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d103      	bne.n	80005d0 <__aeabi_f2uiz+0x18>
 80005c8:	1c20      	adds	r0, r4, #0
 80005ca:	f000 ff5f 	bl	800148c <__aeabi_f2iz>
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	219e      	movs	r1, #158	@ 0x9e
 80005d2:	1c20      	adds	r0, r4, #0
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	f000 fd9f 	bl	8001118 <__aeabi_fsub>
 80005da:	f000 ff57 	bl	800148c <__aeabi_f2iz>
 80005de:	2380      	movs	r3, #128	@ 0x80
 80005e0:	061b      	lsls	r3, r3, #24
 80005e2:	469c      	mov	ip, r3
 80005e4:	4460      	add	r0, ip
 80005e6:	e7f2      	b.n	80005ce <__aeabi_f2uiz+0x16>

080005e8 <__aeabi_d2uiz>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	2200      	movs	r2, #0
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <__aeabi_d2uiz+0x38>)
 80005ee:	0004      	movs	r4, r0
 80005f0:	000d      	movs	r5, r1
 80005f2:	f7ff ff4f 	bl	8000494 <__aeabi_dcmpge>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d104      	bne.n	8000604 <__aeabi_d2uiz+0x1c>
 80005fa:	0020      	movs	r0, r4
 80005fc:	0029      	movs	r1, r5
 80005fe:	f002 fe21 	bl	8003244 <__aeabi_d2iz>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <__aeabi_d2uiz+0x38>)
 8000606:	2200      	movs	r2, #0
 8000608:	0020      	movs	r0, r4
 800060a:	0029      	movs	r1, r5
 800060c:	f002 fa5c 	bl	8002ac8 <__aeabi_dsub>
 8000610:	f002 fe18 	bl	8003244 <__aeabi_d2iz>
 8000614:	2380      	movs	r3, #128	@ 0x80
 8000616:	061b      	lsls	r3, r3, #24
 8000618:	469c      	mov	ip, r3
 800061a:	4460      	add	r0, ip
 800061c:	e7f1      	b.n	8000602 <__aeabi_d2uiz+0x1a>
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	41e00000 	.word	0x41e00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 ff76 	bl	8003534 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 ff71 	bl	8003534 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fadd>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	46ce      	mov	lr, r9
 80007c0:	4647      	mov	r7, r8
 80007c2:	0243      	lsls	r3, r0, #9
 80007c4:	0a5a      	lsrs	r2, r3, #9
 80007c6:	024e      	lsls	r6, r1, #9
 80007c8:	0045      	lsls	r5, r0, #1
 80007ca:	0fc4      	lsrs	r4, r0, #31
 80007cc:	0048      	lsls	r0, r1, #1
 80007ce:	4691      	mov	r9, r2
 80007d0:	0e2d      	lsrs	r5, r5, #24
 80007d2:	0a72      	lsrs	r2, r6, #9
 80007d4:	0e00      	lsrs	r0, r0, #24
 80007d6:	4694      	mov	ip, r2
 80007d8:	b580      	push	{r7, lr}
 80007da:	099b      	lsrs	r3, r3, #6
 80007dc:	0fc9      	lsrs	r1, r1, #31
 80007de:	09b6      	lsrs	r6, r6, #6
 80007e0:	1a2a      	subs	r2, r5, r0
 80007e2:	428c      	cmp	r4, r1
 80007e4:	d021      	beq.n	800082a <__aeabi_fadd+0x6e>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	dd0d      	ble.n	8000806 <__aeabi_fadd+0x4a>
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d12d      	bne.n	800084a <__aeabi_fadd+0x8e>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x38>
 80007f2:	e08d      	b.n	8000910 <__aeabi_fadd+0x154>
 80007f4:	1e51      	subs	r1, r2, #1
 80007f6:	2a01      	cmp	r2, #1
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x40>
 80007fa:	e11d      	b.n	8000a38 <__aeabi_fadd+0x27c>
 80007fc:	2aff      	cmp	r2, #255	@ 0xff
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x46>
 8000800:	e0ab      	b.n	800095a <__aeabi_fadd+0x19e>
 8000802:	000a      	movs	r2, r1
 8000804:	e027      	b.n	8000856 <__aeabi_fadd+0x9a>
 8000806:	2a00      	cmp	r2, #0
 8000808:	d04d      	beq.n	80008a6 <__aeabi_fadd+0xea>
 800080a:	1b42      	subs	r2, r0, r5
 800080c:	2d00      	cmp	r5, #0
 800080e:	d000      	beq.n	8000812 <__aeabi_fadd+0x56>
 8000810:	e0cc      	b.n	80009ac <__aeabi_fadd+0x1f0>
 8000812:	2b00      	cmp	r3, #0
 8000814:	d100      	bne.n	8000818 <__aeabi_fadd+0x5c>
 8000816:	e079      	b.n	800090c <__aeabi_fadd+0x150>
 8000818:	1e54      	subs	r4, r2, #1
 800081a:	2a01      	cmp	r2, #1
 800081c:	d100      	bne.n	8000820 <__aeabi_fadd+0x64>
 800081e:	e128      	b.n	8000a72 <__aeabi_fadd+0x2b6>
 8000820:	2aff      	cmp	r2, #255	@ 0xff
 8000822:	d100      	bne.n	8000826 <__aeabi_fadd+0x6a>
 8000824:	e097      	b.n	8000956 <__aeabi_fadd+0x19a>
 8000826:	0022      	movs	r2, r4
 8000828:	e0c5      	b.n	80009b6 <__aeabi_fadd+0x1fa>
 800082a:	2a00      	cmp	r2, #0
 800082c:	dc00      	bgt.n	8000830 <__aeabi_fadd+0x74>
 800082e:	e096      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000830:	2800      	cmp	r0, #0
 8000832:	d04f      	beq.n	80008d4 <__aeabi_fadd+0x118>
 8000834:	2dff      	cmp	r5, #255	@ 0xff
 8000836:	d100      	bne.n	800083a <__aeabi_fadd+0x7e>
 8000838:	e08f      	b.n	800095a <__aeabi_fadd+0x19e>
 800083a:	2180      	movs	r1, #128	@ 0x80
 800083c:	04c9      	lsls	r1, r1, #19
 800083e:	430e      	orrs	r6, r1
 8000840:	2a1b      	cmp	r2, #27
 8000842:	dd51      	ble.n	80008e8 <__aeabi_fadd+0x12c>
 8000844:	002a      	movs	r2, r5
 8000846:	3301      	adds	r3, #1
 8000848:	e018      	b.n	800087c <__aeabi_fadd+0xc0>
 800084a:	2dff      	cmp	r5, #255	@ 0xff
 800084c:	d100      	bne.n	8000850 <__aeabi_fadd+0x94>
 800084e:	e084      	b.n	800095a <__aeabi_fadd+0x19e>
 8000850:	2180      	movs	r1, #128	@ 0x80
 8000852:	04c9      	lsls	r1, r1, #19
 8000854:	430e      	orrs	r6, r1
 8000856:	2101      	movs	r1, #1
 8000858:	2a1b      	cmp	r2, #27
 800085a:	dc08      	bgt.n	800086e <__aeabi_fadd+0xb2>
 800085c:	0031      	movs	r1, r6
 800085e:	2020      	movs	r0, #32
 8000860:	40d1      	lsrs	r1, r2
 8000862:	1a82      	subs	r2, r0, r2
 8000864:	4096      	lsls	r6, r2
 8000866:	0032      	movs	r2, r6
 8000868:	1e50      	subs	r0, r2, #1
 800086a:	4182      	sbcs	r2, r0
 800086c:	4311      	orrs	r1, r2
 800086e:	1a5b      	subs	r3, r3, r1
 8000870:	015a      	lsls	r2, r3, #5
 8000872:	d459      	bmi.n	8000928 <__aeabi_fadd+0x16c>
 8000874:	2107      	movs	r1, #7
 8000876:	002a      	movs	r2, r5
 8000878:	4019      	ands	r1, r3
 800087a:	d049      	beq.n	8000910 <__aeabi_fadd+0x154>
 800087c:	210f      	movs	r1, #15
 800087e:	4019      	ands	r1, r3
 8000880:	2904      	cmp	r1, #4
 8000882:	d000      	beq.n	8000886 <__aeabi_fadd+0xca>
 8000884:	3304      	adds	r3, #4
 8000886:	0159      	lsls	r1, r3, #5
 8000888:	d542      	bpl.n	8000910 <__aeabi_fadd+0x154>
 800088a:	1c50      	adds	r0, r2, #1
 800088c:	2afe      	cmp	r2, #254	@ 0xfe
 800088e:	d03a      	beq.n	8000906 <__aeabi_fadd+0x14a>
 8000890:	019b      	lsls	r3, r3, #6
 8000892:	b2c0      	uxtb	r0, r0
 8000894:	0a5b      	lsrs	r3, r3, #9
 8000896:	05c0      	lsls	r0, r0, #23
 8000898:	4318      	orrs	r0, r3
 800089a:	07e4      	lsls	r4, r4, #31
 800089c:	4320      	orrs	r0, r4
 800089e:	bcc0      	pop	{r6, r7}
 80008a0:	46b9      	mov	r9, r7
 80008a2:	46b0      	mov	r8, r6
 80008a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a6:	20fe      	movs	r0, #254	@ 0xfe
 80008a8:	4680      	mov	r8, r0
 80008aa:	1c6f      	adds	r7, r5, #1
 80008ac:	0038      	movs	r0, r7
 80008ae:	4647      	mov	r7, r8
 80008b0:	4207      	tst	r7, r0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_fadd+0xfa>
 80008b4:	e08e      	b.n	80009d4 <__aeabi_fadd+0x218>
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d000      	beq.n	80008bc <__aeabi_fadd+0x100>
 80008ba:	e0b4      	b.n	8000a26 <__aeabi_fadd+0x26a>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fadd+0x106>
 80008c0:	e0db      	b.n	8000a7a <__aeabi_fadd+0x2be>
 80008c2:	2e00      	cmp	r6, #0
 80008c4:	d06c      	beq.n	80009a0 <__aeabi_fadd+0x1e4>
 80008c6:	1b98      	subs	r0, r3, r6
 80008c8:	0145      	lsls	r5, r0, #5
 80008ca:	d400      	bmi.n	80008ce <__aeabi_fadd+0x112>
 80008cc:	e0f7      	b.n	8000abe <__aeabi_fadd+0x302>
 80008ce:	000c      	movs	r4, r1
 80008d0:	1af3      	subs	r3, r6, r3
 80008d2:	e03d      	b.n	8000950 <__aeabi_fadd+0x194>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d01b      	beq.n	8000910 <__aeabi_fadd+0x154>
 80008d8:	1e51      	subs	r1, r2, #1
 80008da:	2a01      	cmp	r2, #1
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fadd+0x124>
 80008de:	e082      	b.n	80009e6 <__aeabi_fadd+0x22a>
 80008e0:	2aff      	cmp	r2, #255	@ 0xff
 80008e2:	d03a      	beq.n	800095a <__aeabi_fadd+0x19e>
 80008e4:	000a      	movs	r2, r1
 80008e6:	e7ab      	b.n	8000840 <__aeabi_fadd+0x84>
 80008e8:	0031      	movs	r1, r6
 80008ea:	2020      	movs	r0, #32
 80008ec:	40d1      	lsrs	r1, r2
 80008ee:	1a82      	subs	r2, r0, r2
 80008f0:	4096      	lsls	r6, r2
 80008f2:	0032      	movs	r2, r6
 80008f4:	1e50      	subs	r0, r2, #1
 80008f6:	4182      	sbcs	r2, r0
 80008f8:	430a      	orrs	r2, r1
 80008fa:	189b      	adds	r3, r3, r2
 80008fc:	015a      	lsls	r2, r3, #5
 80008fe:	d5b9      	bpl.n	8000874 <__aeabi_fadd+0xb8>
 8000900:	1c6a      	adds	r2, r5, #1
 8000902:	2dfe      	cmp	r5, #254	@ 0xfe
 8000904:	d175      	bne.n	80009f2 <__aeabi_fadd+0x236>
 8000906:	20ff      	movs	r0, #255	@ 0xff
 8000908:	2300      	movs	r3, #0
 800090a:	e7c4      	b.n	8000896 <__aeabi_fadd+0xda>
 800090c:	000c      	movs	r4, r1
 800090e:	0033      	movs	r3, r6
 8000910:	08db      	lsrs	r3, r3, #3
 8000912:	2aff      	cmp	r2, #255	@ 0xff
 8000914:	d146      	bne.n	80009a4 <__aeabi_fadd+0x1e8>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f5      	beq.n	8000906 <__aeabi_fadd+0x14a>
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	4313      	orrs	r3, r2
 8000920:	025b      	lsls	r3, r3, #9
 8000922:	20ff      	movs	r0, #255	@ 0xff
 8000924:	0a5b      	lsrs	r3, r3, #9
 8000926:	e7b6      	b.n	8000896 <__aeabi_fadd+0xda>
 8000928:	019f      	lsls	r7, r3, #6
 800092a:	09bf      	lsrs	r7, r7, #6
 800092c:	0038      	movs	r0, r7
 800092e:	f002 fde3 	bl	80034f8 <__clzsi2>
 8000932:	3805      	subs	r0, #5
 8000934:	4087      	lsls	r7, r0
 8000936:	4285      	cmp	r5, r0
 8000938:	dc24      	bgt.n	8000984 <__aeabi_fadd+0x1c8>
 800093a:	003b      	movs	r3, r7
 800093c:	2120      	movs	r1, #32
 800093e:	1b42      	subs	r2, r0, r5
 8000940:	3201      	adds	r2, #1
 8000942:	40d3      	lsrs	r3, r2
 8000944:	1a8a      	subs	r2, r1, r2
 8000946:	4097      	lsls	r7, r2
 8000948:	1e7a      	subs	r2, r7, #1
 800094a:	4197      	sbcs	r7, r2
 800094c:	2200      	movs	r2, #0
 800094e:	433b      	orrs	r3, r7
 8000950:	0759      	lsls	r1, r3, #29
 8000952:	d193      	bne.n	800087c <__aeabi_fadd+0xc0>
 8000954:	e797      	b.n	8000886 <__aeabi_fadd+0xca>
 8000956:	000c      	movs	r4, r1
 8000958:	0033      	movs	r3, r6
 800095a:	08db      	lsrs	r3, r3, #3
 800095c:	e7db      	b.n	8000916 <__aeabi_fadd+0x15a>
 800095e:	2a00      	cmp	r2, #0
 8000960:	d014      	beq.n	800098c <__aeabi_fadd+0x1d0>
 8000962:	1b42      	subs	r2, r0, r5
 8000964:	2d00      	cmp	r5, #0
 8000966:	d14b      	bne.n	8000a00 <__aeabi_fadd+0x244>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0d0      	beq.n	800090e <__aeabi_fadd+0x152>
 800096c:	1e51      	subs	r1, r2, #1
 800096e:	2a01      	cmp	r2, #1
 8000970:	d100      	bne.n	8000974 <__aeabi_fadd+0x1b8>
 8000972:	e09e      	b.n	8000ab2 <__aeabi_fadd+0x2f6>
 8000974:	2aff      	cmp	r2, #255	@ 0xff
 8000976:	d0ef      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000978:	000a      	movs	r2, r1
 800097a:	2a1b      	cmp	r2, #27
 800097c:	dd5f      	ble.n	8000a3e <__aeabi_fadd+0x282>
 800097e:	0002      	movs	r2, r0
 8000980:	1c73      	adds	r3, r6, #1
 8000982:	e77b      	b.n	800087c <__aeabi_fadd+0xc0>
 8000984:	4b50      	ldr	r3, [pc, #320]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000986:	1a2a      	subs	r2, r5, r0
 8000988:	403b      	ands	r3, r7
 800098a:	e7e1      	b.n	8000950 <__aeabi_fadd+0x194>
 800098c:	21fe      	movs	r1, #254	@ 0xfe
 800098e:	1c6a      	adds	r2, r5, #1
 8000990:	4211      	tst	r1, r2
 8000992:	d13b      	bne.n	8000a0c <__aeabi_fadd+0x250>
 8000994:	2d00      	cmp	r5, #0
 8000996:	d15d      	bne.n	8000a54 <__aeabi_fadd+0x298>
 8000998:	2b00      	cmp	r3, #0
 800099a:	d07f      	beq.n	8000a9c <__aeabi_fadd+0x2e0>
 800099c:	2e00      	cmp	r6, #0
 800099e:	d17f      	bne.n	8000aa0 <__aeabi_fadd+0x2e4>
 80009a0:	2200      	movs	r2, #0
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	025b      	lsls	r3, r3, #9
 80009a6:	0a5b      	lsrs	r3, r3, #9
 80009a8:	b2d0      	uxtb	r0, r2
 80009aa:	e774      	b.n	8000896 <__aeabi_fadd+0xda>
 80009ac:	28ff      	cmp	r0, #255	@ 0xff
 80009ae:	d0d2      	beq.n	8000956 <__aeabi_fadd+0x19a>
 80009b0:	2480      	movs	r4, #128	@ 0x80
 80009b2:	04e4      	lsls	r4, r4, #19
 80009b4:	4323      	orrs	r3, r4
 80009b6:	2401      	movs	r4, #1
 80009b8:	2a1b      	cmp	r2, #27
 80009ba:	dc07      	bgt.n	80009cc <__aeabi_fadd+0x210>
 80009bc:	001c      	movs	r4, r3
 80009be:	2520      	movs	r5, #32
 80009c0:	40d4      	lsrs	r4, r2
 80009c2:	1aaa      	subs	r2, r5, r2
 80009c4:	4093      	lsls	r3, r2
 80009c6:	1e5a      	subs	r2, r3, #1
 80009c8:	4193      	sbcs	r3, r2
 80009ca:	431c      	orrs	r4, r3
 80009cc:	1b33      	subs	r3, r6, r4
 80009ce:	0005      	movs	r5, r0
 80009d0:	000c      	movs	r4, r1
 80009d2:	e74d      	b.n	8000870 <__aeabi_fadd+0xb4>
 80009d4:	1b9f      	subs	r7, r3, r6
 80009d6:	017a      	lsls	r2, r7, #5
 80009d8:	d422      	bmi.n	8000a20 <__aeabi_fadd+0x264>
 80009da:	2f00      	cmp	r7, #0
 80009dc:	d1a6      	bne.n	800092c <__aeabi_fadd+0x170>
 80009de:	2400      	movs	r4, #0
 80009e0:	2000      	movs	r0, #0
 80009e2:	2300      	movs	r3, #0
 80009e4:	e757      	b.n	8000896 <__aeabi_fadd+0xda>
 80009e6:	199b      	adds	r3, r3, r6
 80009e8:	2501      	movs	r5, #1
 80009ea:	3201      	adds	r2, #1
 80009ec:	0159      	lsls	r1, r3, #5
 80009ee:	d400      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 80009f0:	e740      	b.n	8000874 <__aeabi_fadd+0xb8>
 80009f2:	2101      	movs	r1, #1
 80009f4:	4835      	ldr	r0, [pc, #212]	@ (8000acc <__aeabi_fadd+0x310>)
 80009f6:	4019      	ands	r1, r3
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	4003      	ands	r3, r0
 80009fc:	430b      	orrs	r3, r1
 80009fe:	e7a7      	b.n	8000950 <__aeabi_fadd+0x194>
 8000a00:	28ff      	cmp	r0, #255	@ 0xff
 8000a02:	d0a9      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000a04:	2180      	movs	r1, #128	@ 0x80
 8000a06:	04c9      	lsls	r1, r1, #19
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	e7b6      	b.n	800097a <__aeabi_fadd+0x1be>
 8000a0c:	2aff      	cmp	r2, #255	@ 0xff
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_fadd+0x256>
 8000a10:	e779      	b.n	8000906 <__aeabi_fadd+0x14a>
 8000a12:	199b      	adds	r3, r3, r6
 8000a14:	085b      	lsrs	r3, r3, #1
 8000a16:	0759      	lsls	r1, r3, #29
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fadd+0x260>
 8000a1a:	e72f      	b.n	800087c <__aeabi_fadd+0xc0>
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	e7c1      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000a20:	000c      	movs	r4, r1
 8000a22:	1af7      	subs	r7, r6, r3
 8000a24:	e782      	b.n	800092c <__aeabi_fadd+0x170>
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d12c      	bne.n	8000a84 <__aeabi_fadd+0x2c8>
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d193      	bne.n	8000956 <__aeabi_fadd+0x19a>
 8000a2e:	2380      	movs	r3, #128	@ 0x80
 8000a30:	2400      	movs	r4, #0
 8000a32:	20ff      	movs	r0, #255	@ 0xff
 8000a34:	03db      	lsls	r3, r3, #15
 8000a36:	e72e      	b.n	8000896 <__aeabi_fadd+0xda>
 8000a38:	2501      	movs	r5, #1
 8000a3a:	1b9b      	subs	r3, r3, r6
 8000a3c:	e718      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a3e:	0019      	movs	r1, r3
 8000a40:	2520      	movs	r5, #32
 8000a42:	40d1      	lsrs	r1, r2
 8000a44:	1aaa      	subs	r2, r5, r2
 8000a46:	4093      	lsls	r3, r2
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	4193      	sbcs	r3, r2
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	0005      	movs	r5, r0
 8000a50:	199b      	adds	r3, r3, r6
 8000a52:	e753      	b.n	80008fc <__aeabi_fadd+0x140>
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_fadd+0x29e>
 8000a58:	e77e      	b.n	8000958 <__aeabi_fadd+0x19c>
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fadd+0x2a4>
 8000a5e:	e77c      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	03d2      	lsls	r2, r2, #15
 8000a64:	4591      	cmp	r9, r2
 8000a66:	d302      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a68:	4594      	cmp	ip, r2
 8000a6a:	d200      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a6c:	0033      	movs	r3, r6
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	e753      	b.n	800091a <__aeabi_fadd+0x15e>
 8000a72:	000c      	movs	r4, r1
 8000a74:	1af3      	subs	r3, r6, r3
 8000a76:	3501      	adds	r5, #1
 8000a78:	e6fa      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d0af      	beq.n	80009de <__aeabi_fadd+0x222>
 8000a7e:	000c      	movs	r4, r1
 8000a80:	0033      	movs	r3, r6
 8000a82:	e78d      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fadd+0x2ce>
 8000a88:	e767      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a8a:	2280      	movs	r2, #128	@ 0x80
 8000a8c:	03d2      	lsls	r2, r2, #15
 8000a8e:	4591      	cmp	r9, r2
 8000a90:	d3ed      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a92:	4594      	cmp	ip, r2
 8000a94:	d2eb      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a96:	000c      	movs	r4, r1
 8000a98:	0033      	movs	r3, r6
 8000a9a:	e7e8      	b.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a9c:	0033      	movs	r3, r6
 8000a9e:	e77f      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000aa0:	199b      	adds	r3, r3, r6
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	0159      	lsls	r1, r3, #5
 8000aa6:	d5b9      	bpl.n	8000a1c <__aeabi_fadd+0x260>
 8000aa8:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	08db      	lsrs	r3, r3, #3
 8000aae:	2201      	movs	r2, #1
 8000ab0:	e778      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ab2:	199b      	adds	r3, r3, r6
 8000ab4:	3201      	adds	r2, #1
 8000ab6:	3501      	adds	r5, #1
 8000ab8:	0159      	lsls	r1, r3, #5
 8000aba:	d49a      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 8000abc:	e6da      	b.n	8000874 <__aeabi_fadd+0xb8>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d08d      	beq.n	80009de <__aeabi_fadd+0x222>
 8000ac2:	08db      	lsrs	r3, r3, #3
 8000ac4:	e76e      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	fbffffff 	.word	0xfbffffff
 8000acc:	7dffffff 	.word	0x7dffffff

08000ad0 <__aeabi_fdiv>:
 8000ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad2:	464f      	mov	r7, r9
 8000ad4:	4646      	mov	r6, r8
 8000ad6:	46d6      	mov	lr, sl
 8000ad8:	0244      	lsls	r4, r0, #9
 8000ada:	b5c0      	push	{r6, r7, lr}
 8000adc:	0047      	lsls	r7, r0, #1
 8000ade:	1c0e      	adds	r6, r1, #0
 8000ae0:	0a64      	lsrs	r4, r4, #9
 8000ae2:	0e3f      	lsrs	r7, r7, #24
 8000ae4:	0fc5      	lsrs	r5, r0, #31
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d03c      	beq.n	8000b64 <__aeabi_fdiv+0x94>
 8000aea:	2fff      	cmp	r7, #255	@ 0xff
 8000aec:	d042      	beq.n	8000b74 <__aeabi_fdiv+0xa4>
 8000aee:	2300      	movs	r3, #0
 8000af0:	2280      	movs	r2, #128	@ 0x80
 8000af2:	4699      	mov	r9, r3
 8000af4:	469a      	mov	sl, r3
 8000af6:	00e4      	lsls	r4, r4, #3
 8000af8:	04d2      	lsls	r2, r2, #19
 8000afa:	4314      	orrs	r4, r2
 8000afc:	3f7f      	subs	r7, #127	@ 0x7f
 8000afe:	0273      	lsls	r3, r6, #9
 8000b00:	0a5b      	lsrs	r3, r3, #9
 8000b02:	4698      	mov	r8, r3
 8000b04:	0073      	lsls	r3, r6, #1
 8000b06:	0e1b      	lsrs	r3, r3, #24
 8000b08:	0ff6      	lsrs	r6, r6, #31
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d01b      	beq.n	8000b46 <__aeabi_fdiv+0x76>
 8000b0e:	2bff      	cmp	r3, #255	@ 0xff
 8000b10:	d013      	beq.n	8000b3a <__aeabi_fdiv+0x6a>
 8000b12:	4642      	mov	r2, r8
 8000b14:	2180      	movs	r1, #128	@ 0x80
 8000b16:	00d2      	lsls	r2, r2, #3
 8000b18:	04c9      	lsls	r1, r1, #19
 8000b1a:	4311      	orrs	r1, r2
 8000b1c:	4688      	mov	r8, r1
 8000b1e:	2000      	movs	r0, #0
 8000b20:	3b7f      	subs	r3, #127	@ 0x7f
 8000b22:	0029      	movs	r1, r5
 8000b24:	1aff      	subs	r7, r7, r3
 8000b26:	464b      	mov	r3, r9
 8000b28:	4071      	eors	r1, r6
 8000b2a:	b2c9      	uxtb	r1, r1
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d900      	bls.n	8000b32 <__aeabi_fdiv+0x62>
 8000b30:	e0b5      	b.n	8000c9e <__aeabi_fdiv+0x1ce>
 8000b32:	4a74      	ldr	r2, [pc, #464]	@ (8000d04 <__aeabi_fdiv+0x234>)
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	58d3      	ldr	r3, [r2, r3]
 8000b38:	469f      	mov	pc, r3
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d13f      	bne.n	8000bc0 <__aeabi_fdiv+0xf0>
 8000b40:	3fff      	subs	r7, #255	@ 0xff
 8000b42:	3302      	adds	r3, #2
 8000b44:	e003      	b.n	8000b4e <__aeabi_fdiv+0x7e>
 8000b46:	4643      	mov	r3, r8
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d12d      	bne.n	8000ba8 <__aeabi_fdiv+0xd8>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	0029      	movs	r1, r5
 8000b50:	464a      	mov	r2, r9
 8000b52:	4071      	eors	r1, r6
 8000b54:	b2c9      	uxtb	r1, r1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	2a0e      	cmp	r2, #14
 8000b5a:	d838      	bhi.n	8000bce <__aeabi_fdiv+0xfe>
 8000b5c:	486a      	ldr	r0, [pc, #424]	@ (8000d08 <__aeabi_fdiv+0x238>)
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	5882      	ldr	r2, [r0, r2]
 8000b62:	4697      	mov	pc, r2
 8000b64:	2c00      	cmp	r4, #0
 8000b66:	d113      	bne.n	8000b90 <__aeabi_fdiv+0xc0>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	4699      	mov	r9, r3
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	2700      	movs	r7, #0
 8000b70:	469a      	mov	sl, r3
 8000b72:	e7c4      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	d105      	bne.n	8000b84 <__aeabi_fdiv+0xb4>
 8000b78:	2308      	movs	r3, #8
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	3b06      	subs	r3, #6
 8000b7e:	27ff      	movs	r7, #255	@ 0xff
 8000b80:	469a      	mov	sl, r3
 8000b82:	e7bc      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b84:	230c      	movs	r3, #12
 8000b86:	4699      	mov	r9, r3
 8000b88:	3b09      	subs	r3, #9
 8000b8a:	27ff      	movs	r7, #255	@ 0xff
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	e7b6      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b90:	0020      	movs	r0, r4
 8000b92:	f002 fcb1 	bl	80034f8 <__clzsi2>
 8000b96:	2776      	movs	r7, #118	@ 0x76
 8000b98:	1f43      	subs	r3, r0, #5
 8000b9a:	409c      	lsls	r4, r3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	427f      	negs	r7, r7
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	469a      	mov	sl, r3
 8000ba4:	1a3f      	subs	r7, r7, r0
 8000ba6:	e7aa      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000ba8:	4640      	mov	r0, r8
 8000baa:	f002 fca5 	bl	80034f8 <__clzsi2>
 8000bae:	4642      	mov	r2, r8
 8000bb0:	1f43      	subs	r3, r0, #5
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	2376      	movs	r3, #118	@ 0x76
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	1a1b      	subs	r3, r3, r0
 8000bba:	4690      	mov	r8, r2
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e7b0      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	464a      	mov	r2, r9
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	4691      	mov	r9, r2
 8000bc8:	2003      	movs	r0, #3
 8000bca:	33fc      	adds	r3, #252	@ 0xfc
 8000bcc:	e7a9      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bce:	000d      	movs	r5, r1
 8000bd0:	20ff      	movs	r0, #255	@ 0xff
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	05c0      	lsls	r0, r0, #23
 8000bd6:	07ed      	lsls	r5, r5, #31
 8000bd8:	4310      	orrs	r0, r2
 8000bda:	4328      	orrs	r0, r5
 8000bdc:	bce0      	pop	{r5, r6, r7}
 8000bde:	46ba      	mov	sl, r7
 8000be0:	46b1      	mov	r9, r6
 8000be2:	46a8      	mov	r8, r5
 8000be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be6:	000d      	movs	r5, r1
 8000be8:	2000      	movs	r0, #0
 8000bea:	2200      	movs	r2, #0
 8000bec:	e7f2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000bee:	4653      	mov	r3, sl
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d0ed      	beq.n	8000bd0 <__aeabi_fdiv+0x100>
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d033      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000bf8:	46a0      	mov	r8, r4
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d105      	bne.n	8000c0a <__aeabi_fdiv+0x13a>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	2200      	movs	r2, #0
 8000c02:	e7e7      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c04:	0035      	movs	r5, r6
 8000c06:	2803      	cmp	r0, #3
 8000c08:	d07a      	beq.n	8000d00 <__aeabi_fdiv+0x230>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	337f      	adds	r3, #127	@ 0x7f
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	dd2d      	ble.n	8000c6e <__aeabi_fdiv+0x19e>
 8000c12:	4642      	mov	r2, r8
 8000c14:	0752      	lsls	r2, r2, #29
 8000c16:	d007      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c18:	220f      	movs	r2, #15
 8000c1a:	4641      	mov	r1, r8
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	2a04      	cmp	r2, #4
 8000c20:	d002      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c22:	2204      	movs	r2, #4
 8000c24:	4694      	mov	ip, r2
 8000c26:	44e0      	add	r8, ip
 8000c28:	4642      	mov	r2, r8
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	d505      	bpl.n	8000c3a <__aeabi_fdiv+0x16a>
 8000c2e:	4642      	mov	r2, r8
 8000c30:	4b36      	ldr	r3, [pc, #216]	@ (8000d0c <__aeabi_fdiv+0x23c>)
 8000c32:	401a      	ands	r2, r3
 8000c34:	003b      	movs	r3, r7
 8000c36:	4690      	mov	r8, r2
 8000c38:	3380      	adds	r3, #128	@ 0x80
 8000c3a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c3c:	dcc8      	bgt.n	8000bd0 <__aeabi_fdiv+0x100>
 8000c3e:	4642      	mov	r2, r8
 8000c40:	0192      	lsls	r2, r2, #6
 8000c42:	0a52      	lsrs	r2, r2, #9
 8000c44:	b2d8      	uxtb	r0, r3
 8000c46:	e7c5      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c48:	2280      	movs	r2, #128	@ 0x80
 8000c4a:	2500      	movs	r5, #0
 8000c4c:	20ff      	movs	r0, #255	@ 0xff
 8000c4e:	03d2      	lsls	r2, r2, #15
 8000c50:	e7c0      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	03d2      	lsls	r2, r2, #15
 8000c56:	4214      	tst	r4, r2
 8000c58:	d002      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000c5a:	4643      	mov	r3, r8
 8000c5c:	4213      	tst	r3, r2
 8000c5e:	d049      	beq.n	8000cf4 <__aeabi_fdiv+0x224>
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	03d2      	lsls	r2, r2, #15
 8000c64:	4322      	orrs	r2, r4
 8000c66:	0252      	lsls	r2, r2, #9
 8000c68:	20ff      	movs	r0, #255	@ 0xff
 8000c6a:	0a52      	lsrs	r2, r2, #9
 8000c6c:	e7b2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c6e:	2201      	movs	r2, #1
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b1b      	cmp	r3, #27
 8000c74:	dcc3      	bgt.n	8000bfe <__aeabi_fdiv+0x12e>
 8000c76:	4642      	mov	r2, r8
 8000c78:	40da      	lsrs	r2, r3
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	379e      	adds	r7, #158	@ 0x9e
 8000c7e:	40bb      	lsls	r3, r7
 8000c80:	1e59      	subs	r1, r3, #1
 8000c82:	418b      	sbcs	r3, r1
 8000c84:	431a      	orrs	r2, r3
 8000c86:	0753      	lsls	r3, r2, #29
 8000c88:	d004      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d000      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c92:	3204      	adds	r2, #4
 8000c94:	0153      	lsls	r3, r2, #5
 8000c96:	d529      	bpl.n	8000cec <__aeabi_fdiv+0x21c>
 8000c98:	2001      	movs	r0, #1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e79a      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	0163      	lsls	r3, r4, #5
 8000ca2:	0155      	lsls	r5, r2, #5
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	d215      	bcs.n	8000cd4 <__aeabi_fdiv+0x204>
 8000ca8:	201b      	movs	r0, #27
 8000caa:	2200      	movs	r2, #0
 8000cac:	3f01      	subs	r7, #1
 8000cae:	2601      	movs	r6, #1
 8000cb0:	001c      	movs	r4, r3
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2c00      	cmp	r4, #0
 8000cb8:	db01      	blt.n	8000cbe <__aeabi_fdiv+0x1ee>
 8000cba:	429d      	cmp	r5, r3
 8000cbc:	d801      	bhi.n	8000cc2 <__aeabi_fdiv+0x1f2>
 8000cbe:	1b5b      	subs	r3, r3, r5
 8000cc0:	4332      	orrs	r2, r6
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d1f3      	bne.n	8000cb0 <__aeabi_fdiv+0x1e0>
 8000cc8:	1e58      	subs	r0, r3, #1
 8000cca:	4183      	sbcs	r3, r0
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	4698      	mov	r8, r3
 8000cd0:	000d      	movs	r5, r1
 8000cd2:	e79a      	b.n	8000c0a <__aeabi_fdiv+0x13a>
 8000cd4:	201a      	movs	r0, #26
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	1b5b      	subs	r3, r3, r5
 8000cda:	e7e8      	b.n	8000cae <__aeabi_fdiv+0x1de>
 8000cdc:	3b02      	subs	r3, #2
 8000cde:	425a      	negs	r2, r3
 8000ce0:	4153      	adcs	r3, r2
 8000ce2:	425b      	negs	r3, r3
 8000ce4:	0035      	movs	r5, r6
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	b2d8      	uxtb	r0, r3
 8000cea:	e773      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cec:	0192      	lsls	r2, r2, #6
 8000cee:	2000      	movs	r0, #0
 8000cf0:	0a52      	lsrs	r2, r2, #9
 8000cf2:	e76f      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	0252      	lsls	r2, r2, #9
 8000cf8:	0035      	movs	r5, r6
 8000cfa:	20ff      	movs	r0, #255	@ 0xff
 8000cfc:	0a52      	lsrs	r2, r2, #9
 8000cfe:	e769      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000d00:	4644      	mov	r4, r8
 8000d02:	e7ad      	b.n	8000c60 <__aeabi_fdiv+0x190>
 8000d04:	0801a1d8 	.word	0x0801a1d8
 8000d08:	0801a218 	.word	0x0801a218
 8000d0c:	f7ffffff 	.word	0xf7ffffff

08000d10 <__eqsf2>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	0042      	lsls	r2, r0, #1
 8000d14:	024e      	lsls	r6, r1, #9
 8000d16:	004c      	lsls	r4, r1, #1
 8000d18:	0245      	lsls	r5, r0, #9
 8000d1a:	0a6d      	lsrs	r5, r5, #9
 8000d1c:	0e12      	lsrs	r2, r2, #24
 8000d1e:	0fc3      	lsrs	r3, r0, #31
 8000d20:	0a76      	lsrs	r6, r6, #9
 8000d22:	0e24      	lsrs	r4, r4, #24
 8000d24:	0fc9      	lsrs	r1, r1, #31
 8000d26:	2aff      	cmp	r2, #255	@ 0xff
 8000d28:	d010      	beq.n	8000d4c <__eqsf2+0x3c>
 8000d2a:	2cff      	cmp	r4, #255	@ 0xff
 8000d2c:	d00c      	beq.n	8000d48 <__eqsf2+0x38>
 8000d2e:	2001      	movs	r0, #1
 8000d30:	42a2      	cmp	r2, r4
 8000d32:	d10a      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d34:	42b5      	cmp	r5, r6
 8000d36:	d108      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d00f      	beq.n	8000d5c <__eqsf2+0x4c>
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d104      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d40:	0028      	movs	r0, r5
 8000d42:	1e43      	subs	r3, r0, #1
 8000d44:	4198      	sbcs	r0, r3
 8000d46:	e000      	b.n	8000d4a <__eqsf2+0x3a>
 8000d48:	2001      	movs	r0, #1
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	2cff      	cmp	r4, #255	@ 0xff
 8000d50:	d1fb      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d52:	4335      	orrs	r5, r6
 8000d54:	d1f9      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d56:	404b      	eors	r3, r1
 8000d58:	0018      	movs	r0, r3
 8000d5a:	e7f6      	b.n	8000d4a <__eqsf2+0x3a>
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	e7f4      	b.n	8000d4a <__eqsf2+0x3a>

08000d60 <__gesf2>:
 8000d60:	b530      	push	{r4, r5, lr}
 8000d62:	0042      	lsls	r2, r0, #1
 8000d64:	0244      	lsls	r4, r0, #9
 8000d66:	024d      	lsls	r5, r1, #9
 8000d68:	0fc3      	lsrs	r3, r0, #31
 8000d6a:	0048      	lsls	r0, r1, #1
 8000d6c:	0a64      	lsrs	r4, r4, #9
 8000d6e:	0e12      	lsrs	r2, r2, #24
 8000d70:	0a6d      	lsrs	r5, r5, #9
 8000d72:	0e00      	lsrs	r0, r0, #24
 8000d74:	0fc9      	lsrs	r1, r1, #31
 8000d76:	2aff      	cmp	r2, #255	@ 0xff
 8000d78:	d019      	beq.n	8000dae <__gesf2+0x4e>
 8000d7a:	28ff      	cmp	r0, #255	@ 0xff
 8000d7c:	d00b      	beq.n	8000d96 <__gesf2+0x36>
 8000d7e:	2a00      	cmp	r2, #0
 8000d80:	d11e      	bne.n	8000dc0 <__gesf2+0x60>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d10b      	bne.n	8000d9e <__gesf2+0x3e>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d027      	beq.n	8000dda <__gesf2+0x7a>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d134      	bne.n	8000df8 <__gesf2+0x98>
 8000d8e:	2900      	cmp	r1, #0
 8000d90:	d02f      	beq.n	8000df2 <__gesf2+0x92>
 8000d92:	0008      	movs	r0, r1
 8000d94:	bd30      	pop	{r4, r5, pc}
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d128      	bne.n	8000dec <__gesf2+0x8c>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	d101      	bne.n	8000da2 <__gesf2+0x42>
 8000d9e:	2c00      	cmp	r4, #0
 8000da0:	d0f5      	beq.n	8000d8e <__gesf2+0x2e>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d107      	bne.n	8000db6 <__gesf2+0x56>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d023      	beq.n	8000df2 <__gesf2+0x92>
 8000daa:	0018      	movs	r0, r3
 8000dac:	e7f2      	b.n	8000d94 <__gesf2+0x34>
 8000dae:	2c00      	cmp	r4, #0
 8000db0:	d11c      	bne.n	8000dec <__gesf2+0x8c>
 8000db2:	28ff      	cmp	r0, #255	@ 0xff
 8000db4:	d014      	beq.n	8000de0 <__gesf2+0x80>
 8000db6:	1e58      	subs	r0, r3, #1
 8000db8:	2302      	movs	r3, #2
 8000dba:	4018      	ands	r0, r3
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	e7e9      	b.n	8000d94 <__gesf2+0x34>
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	d0f8      	beq.n	8000db6 <__gesf2+0x56>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d1f6      	bne.n	8000db6 <__gesf2+0x56>
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	dcf4      	bgt.n	8000db6 <__gesf2+0x56>
 8000dcc:	dbeb      	blt.n	8000da6 <__gesf2+0x46>
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	d8f1      	bhi.n	8000db6 <__gesf2+0x56>
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	42ac      	cmp	r4, r5
 8000dd6:	d2dd      	bcs.n	8000d94 <__gesf2+0x34>
 8000dd8:	e7e5      	b.n	8000da6 <__gesf2+0x46>
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	d0da      	beq.n	8000d94 <__gesf2+0x34>
 8000dde:	e7ea      	b.n	8000db6 <__gesf2+0x56>
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d103      	bne.n	8000dec <__gesf2+0x8c>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d1e6      	bne.n	8000db6 <__gesf2+0x56>
 8000de8:	2000      	movs	r0, #0
 8000dea:	e7d3      	b.n	8000d94 <__gesf2+0x34>
 8000dec:	2002      	movs	r0, #2
 8000dee:	4240      	negs	r0, r0
 8000df0:	e7d0      	b.n	8000d94 <__gesf2+0x34>
 8000df2:	2001      	movs	r0, #1
 8000df4:	4240      	negs	r0, r0
 8000df6:	e7cd      	b.n	8000d94 <__gesf2+0x34>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d0e8      	beq.n	8000dce <__gesf2+0x6e>
 8000dfc:	e7db      	b.n	8000db6 <__gesf2+0x56>
 8000dfe:	46c0      	nop			@ (mov r8, r8)

08000e00 <__lesf2>:
 8000e00:	b530      	push	{r4, r5, lr}
 8000e02:	0042      	lsls	r2, r0, #1
 8000e04:	0244      	lsls	r4, r0, #9
 8000e06:	024d      	lsls	r5, r1, #9
 8000e08:	0fc3      	lsrs	r3, r0, #31
 8000e0a:	0048      	lsls	r0, r1, #1
 8000e0c:	0a64      	lsrs	r4, r4, #9
 8000e0e:	0e12      	lsrs	r2, r2, #24
 8000e10:	0a6d      	lsrs	r5, r5, #9
 8000e12:	0e00      	lsrs	r0, r0, #24
 8000e14:	0fc9      	lsrs	r1, r1, #31
 8000e16:	2aff      	cmp	r2, #255	@ 0xff
 8000e18:	d01a      	beq.n	8000e50 <__lesf2+0x50>
 8000e1a:	28ff      	cmp	r0, #255	@ 0xff
 8000e1c:	d00e      	beq.n	8000e3c <__lesf2+0x3c>
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d11e      	bne.n	8000e60 <__lesf2+0x60>
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d10e      	bne.n	8000e44 <__lesf2+0x44>
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d02a      	beq.n	8000e80 <__lesf2+0x80>
 8000e2a:	2c00      	cmp	r4, #0
 8000e2c:	d00c      	beq.n	8000e48 <__lesf2+0x48>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d01d      	beq.n	8000e6e <__lesf2+0x6e>
 8000e32:	1e58      	subs	r0, r3, #1
 8000e34:	2302      	movs	r3, #2
 8000e36:	4018      	ands	r0, r3
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e010      	b.n	8000e5e <__lesf2+0x5e>
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	d10d      	bne.n	8000e5c <__lesf2+0x5c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d120      	bne.n	8000e86 <__lesf2+0x86>
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	d11e      	bne.n	8000e86 <__lesf2+0x86>
 8000e48:	2900      	cmp	r1, #0
 8000e4a:	d023      	beq.n	8000e94 <__lesf2+0x94>
 8000e4c:	0008      	movs	r0, r1
 8000e4e:	e006      	b.n	8000e5e <__lesf2+0x5e>
 8000e50:	2c00      	cmp	r4, #0
 8000e52:	d103      	bne.n	8000e5c <__lesf2+0x5c>
 8000e54:	28ff      	cmp	r0, #255	@ 0xff
 8000e56:	d1ec      	bne.n	8000e32 <__lesf2+0x32>
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d017      	beq.n	8000e8c <__lesf2+0x8c>
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	bd30      	pop	{r4, r5, pc}
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d0e6      	beq.n	8000e32 <__lesf2+0x32>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d1e4      	bne.n	8000e32 <__lesf2+0x32>
 8000e68:	4282      	cmp	r2, r0
 8000e6a:	dce2      	bgt.n	8000e32 <__lesf2+0x32>
 8000e6c:	db04      	blt.n	8000e78 <__lesf2+0x78>
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	d8df      	bhi.n	8000e32 <__lesf2+0x32>
 8000e72:	2000      	movs	r0, #0
 8000e74:	42ac      	cmp	r4, r5
 8000e76:	d2f2      	bcs.n	8000e5e <__lesf2+0x5e>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00b      	beq.n	8000e94 <__lesf2+0x94>
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	e7ee      	b.n	8000e5e <__lesf2+0x5e>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d0ec      	beq.n	8000e5e <__lesf2+0x5e>
 8000e84:	e7d5      	b.n	8000e32 <__lesf2+0x32>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d1d3      	bne.n	8000e32 <__lesf2+0x32>
 8000e8a:	e7f5      	b.n	8000e78 <__lesf2+0x78>
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d0e5      	beq.n	8000e5e <__lesf2+0x5e>
 8000e92:	e7ce      	b.n	8000e32 <__lesf2+0x32>
 8000e94:	2001      	movs	r0, #1
 8000e96:	4240      	negs	r0, r0
 8000e98:	e7e1      	b.n	8000e5e <__lesf2+0x5e>
 8000e9a:	46c0      	nop			@ (mov r8, r8)

08000e9c <__aeabi_fmul>:
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	464f      	mov	r7, r9
 8000ea0:	4646      	mov	r6, r8
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	0243      	lsls	r3, r0, #9
 8000ea6:	0a5b      	lsrs	r3, r3, #9
 8000ea8:	0045      	lsls	r5, r0, #1
 8000eaa:	b5c0      	push	{r6, r7, lr}
 8000eac:	4699      	mov	r9, r3
 8000eae:	1c0f      	adds	r7, r1, #0
 8000eb0:	0e2d      	lsrs	r5, r5, #24
 8000eb2:	0fc6      	lsrs	r6, r0, #31
 8000eb4:	2d00      	cmp	r5, #0
 8000eb6:	d100      	bne.n	8000eba <__aeabi_fmul+0x1e>
 8000eb8:	e088      	b.n	8000fcc <__aeabi_fmul+0x130>
 8000eba:	2dff      	cmp	r5, #255	@ 0xff
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_fmul+0x24>
 8000ebe:	e08d      	b.n	8000fdc <__aeabi_fmul+0x140>
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	04d2      	lsls	r2, r2, #19
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4691      	mov	r9, r2
 8000ecc:	4698      	mov	r8, r3
 8000ece:	469a      	mov	sl, r3
 8000ed0:	3d7f      	subs	r5, #127	@ 0x7f
 8000ed2:	027c      	lsls	r4, r7, #9
 8000ed4:	007b      	lsls	r3, r7, #1
 8000ed6:	0a64      	lsrs	r4, r4, #9
 8000ed8:	0e1b      	lsrs	r3, r3, #24
 8000eda:	0fff      	lsrs	r7, r7, #31
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d068      	beq.n	8000fb2 <__aeabi_fmul+0x116>
 8000ee0:	2bff      	cmp	r3, #255	@ 0xff
 8000ee2:	d021      	beq.n	8000f28 <__aeabi_fmul+0x8c>
 8000ee4:	2280      	movs	r2, #128	@ 0x80
 8000ee6:	00e4      	lsls	r4, r4, #3
 8000ee8:	04d2      	lsls	r2, r2, #19
 8000eea:	4314      	orrs	r4, r2
 8000eec:	4642      	mov	r2, r8
 8000eee:	3b7f      	subs	r3, #127	@ 0x7f
 8000ef0:	195b      	adds	r3, r3, r5
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	1c5d      	adds	r5, r3, #1
 8000ef6:	2a0a      	cmp	r2, #10
 8000ef8:	dc2e      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 8000efa:	407e      	eors	r6, r7
 8000efc:	4642      	mov	r2, r8
 8000efe:	2a02      	cmp	r2, #2
 8000f00:	dc23      	bgt.n	8000f4a <__aeabi_fmul+0xae>
 8000f02:	3a01      	subs	r2, #1
 8000f04:	2a01      	cmp	r2, #1
 8000f06:	d900      	bls.n	8000f0a <__aeabi_fmul+0x6e>
 8000f08:	e0bd      	b.n	8001086 <__aeabi_fmul+0x1ea>
 8000f0a:	2902      	cmp	r1, #2
 8000f0c:	d06e      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f0e:	2901      	cmp	r1, #1
 8000f10:	d12c      	bne.n	8000f6c <__aeabi_fmul+0xd0>
 8000f12:	2000      	movs	r0, #0
 8000f14:	2200      	movs	r2, #0
 8000f16:	05c0      	lsls	r0, r0, #23
 8000f18:	07f6      	lsls	r6, r6, #31
 8000f1a:	4310      	orrs	r0, r2
 8000f1c:	4330      	orrs	r0, r6
 8000f1e:	bce0      	pop	{r5, r6, r7}
 8000f20:	46ba      	mov	sl, r7
 8000f22:	46b1      	mov	r9, r6
 8000f24:	46a8      	mov	r8, r5
 8000f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f28:	002b      	movs	r3, r5
 8000f2a:	33ff      	adds	r3, #255	@ 0xff
 8000f2c:	2c00      	cmp	r4, #0
 8000f2e:	d065      	beq.n	8000ffc <__aeabi_fmul+0x160>
 8000f30:	2203      	movs	r2, #3
 8000f32:	4641      	mov	r1, r8
 8000f34:	4311      	orrs	r1, r2
 8000f36:	0032      	movs	r2, r6
 8000f38:	3501      	adds	r5, #1
 8000f3a:	4688      	mov	r8, r1
 8000f3c:	407a      	eors	r2, r7
 8000f3e:	35ff      	adds	r5, #255	@ 0xff
 8000f40:	290a      	cmp	r1, #10
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_fmul+0xaa>
 8000f44:	e0d8      	b.n	80010f8 <__aeabi_fmul+0x25c>
 8000f46:	0016      	movs	r6, r2
 8000f48:	2103      	movs	r1, #3
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4082      	lsls	r2, r0
 8000f50:	20a6      	movs	r0, #166	@ 0xa6
 8000f52:	00c0      	lsls	r0, r0, #3
 8000f54:	4202      	tst	r2, r0
 8000f56:	d020      	beq.n	8000f9a <__aeabi_fmul+0xfe>
 8000f58:	4653      	mov	r3, sl
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d046      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fmul+0xc8>
 8000f62:	e0bb      	b.n	80010dc <__aeabi_fmul+0x240>
 8000f64:	4651      	mov	r1, sl
 8000f66:	464c      	mov	r4, r9
 8000f68:	2901      	cmp	r1, #1
 8000f6a:	d0d2      	beq.n	8000f12 <__aeabi_fmul+0x76>
 8000f6c:	002b      	movs	r3, r5
 8000f6e:	337f      	adds	r3, #127	@ 0x7f
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	dd70      	ble.n	8001056 <__aeabi_fmul+0x1ba>
 8000f74:	0762      	lsls	r2, r4, #29
 8000f76:	d004      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f78:	220f      	movs	r2, #15
 8000f7a:	4022      	ands	r2, r4
 8000f7c:	2a04      	cmp	r2, #4
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f80:	3404      	adds	r4, #4
 8000f82:	0122      	lsls	r2, r4, #4
 8000f84:	d503      	bpl.n	8000f8e <__aeabi_fmul+0xf2>
 8000f86:	4b63      	ldr	r3, [pc, #396]	@ (8001114 <__aeabi_fmul+0x278>)
 8000f88:	401c      	ands	r4, r3
 8000f8a:	002b      	movs	r3, r5
 8000f8c:	3380      	adds	r3, #128	@ 0x80
 8000f8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f90:	dc2c      	bgt.n	8000fec <__aeabi_fmul+0x150>
 8000f92:	01a2      	lsls	r2, r4, #6
 8000f94:	0a52      	lsrs	r2, r2, #9
 8000f96:	b2d8      	uxtb	r0, r3
 8000f98:	e7bd      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000f9a:	2090      	movs	r0, #144	@ 0x90
 8000f9c:	0080      	lsls	r0, r0, #2
 8000f9e:	4202      	tst	r2, r0
 8000fa0:	d127      	bne.n	8000ff2 <__aeabi_fmul+0x156>
 8000fa2:	38b9      	subs	r0, #185	@ 0xb9
 8000fa4:	38ff      	subs	r0, #255	@ 0xff
 8000fa6:	4210      	tst	r0, r2
 8000fa8:	d06d      	beq.n	8001086 <__aeabi_fmul+0x1ea>
 8000faa:	003e      	movs	r6, r7
 8000fac:	46a1      	mov	r9, r4
 8000fae:	468a      	mov	sl, r1
 8000fb0:	e7d2      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fb2:	2c00      	cmp	r4, #0
 8000fb4:	d141      	bne.n	800103a <__aeabi_fmul+0x19e>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	4642      	mov	r2, r8
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	4690      	mov	r8, r2
 8000fbe:	002b      	movs	r3, r5
 8000fc0:	4642      	mov	r2, r8
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	1c5d      	adds	r5, r3, #1
 8000fc6:	2a0a      	cmp	r2, #10
 8000fc8:	dd97      	ble.n	8000efa <__aeabi_fmul+0x5e>
 8000fca:	e7c5      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d126      	bne.n	800101e <__aeabi_fmul+0x182>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	4698      	mov	r8, r3
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	469a      	mov	sl, r3
 8000fda:	e77a      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d118      	bne.n	8001012 <__aeabi_fmul+0x176>
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	4698      	mov	r8, r3
 8000fe4:	3b06      	subs	r3, #6
 8000fe6:	25ff      	movs	r5, #255	@ 0xff
 8000fe8:	469a      	mov	sl, r3
 8000fea:	e772      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fec:	20ff      	movs	r0, #255	@ 0xff
 8000fee:	2200      	movs	r2, #0
 8000ff0:	e791      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ff2:	2280      	movs	r2, #128	@ 0x80
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	20ff      	movs	r0, #255	@ 0xff
 8000ff8:	03d2      	lsls	r2, r2, #15
 8000ffa:	e78c      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ffc:	4641      	mov	r1, r8
 8000ffe:	2202      	movs	r2, #2
 8001000:	3501      	adds	r5, #1
 8001002:	4311      	orrs	r1, r2
 8001004:	4688      	mov	r8, r1
 8001006:	35ff      	adds	r5, #255	@ 0xff
 8001008:	290a      	cmp	r1, #10
 800100a:	dca5      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 800100c:	2102      	movs	r1, #2
 800100e:	407e      	eors	r6, r7
 8001010:	e774      	b.n	8000efc <__aeabi_fmul+0x60>
 8001012:	230c      	movs	r3, #12
 8001014:	4698      	mov	r8, r3
 8001016:	3b09      	subs	r3, #9
 8001018:	25ff      	movs	r5, #255	@ 0xff
 800101a:	469a      	mov	sl, r3
 800101c:	e759      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800101e:	0018      	movs	r0, r3
 8001020:	f002 fa6a 	bl	80034f8 <__clzsi2>
 8001024:	464a      	mov	r2, r9
 8001026:	1f43      	subs	r3, r0, #5
 8001028:	2576      	movs	r5, #118	@ 0x76
 800102a:	409a      	lsls	r2, r3
 800102c:	2300      	movs	r3, #0
 800102e:	426d      	negs	r5, r5
 8001030:	4691      	mov	r9, r2
 8001032:	4698      	mov	r8, r3
 8001034:	469a      	mov	sl, r3
 8001036:	1a2d      	subs	r5, r5, r0
 8001038:	e74b      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800103a:	0020      	movs	r0, r4
 800103c:	f002 fa5c 	bl	80034f8 <__clzsi2>
 8001040:	4642      	mov	r2, r8
 8001042:	1f43      	subs	r3, r0, #5
 8001044:	409c      	lsls	r4, r3
 8001046:	1a2b      	subs	r3, r5, r0
 8001048:	3b76      	subs	r3, #118	@ 0x76
 800104a:	2100      	movs	r1, #0
 800104c:	1c5d      	adds	r5, r3, #1
 800104e:	2a0a      	cmp	r2, #10
 8001050:	dc00      	bgt.n	8001054 <__aeabi_fmul+0x1b8>
 8001052:	e752      	b.n	8000efa <__aeabi_fmul+0x5e>
 8001054:	e780      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8001056:	2201      	movs	r2, #1
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b1b      	cmp	r3, #27
 800105c:	dd00      	ble.n	8001060 <__aeabi_fmul+0x1c4>
 800105e:	e758      	b.n	8000f12 <__aeabi_fmul+0x76>
 8001060:	359e      	adds	r5, #158	@ 0x9e
 8001062:	0022      	movs	r2, r4
 8001064:	40ac      	lsls	r4, r5
 8001066:	40da      	lsrs	r2, r3
 8001068:	1e63      	subs	r3, r4, #1
 800106a:	419c      	sbcs	r4, r3
 800106c:	4322      	orrs	r2, r4
 800106e:	0753      	lsls	r3, r2, #29
 8001070:	d004      	beq.n	800107c <__aeabi_fmul+0x1e0>
 8001072:	230f      	movs	r3, #15
 8001074:	4013      	ands	r3, r2
 8001076:	2b04      	cmp	r3, #4
 8001078:	d000      	beq.n	800107c <__aeabi_fmul+0x1e0>
 800107a:	3204      	adds	r2, #4
 800107c:	0153      	lsls	r3, r2, #5
 800107e:	d537      	bpl.n	80010f0 <__aeabi_fmul+0x254>
 8001080:	2001      	movs	r0, #1
 8001082:	2200      	movs	r2, #0
 8001084:	e747      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001086:	0c21      	lsrs	r1, r4, #16
 8001088:	464a      	mov	r2, r9
 800108a:	0424      	lsls	r4, r4, #16
 800108c:	0c24      	lsrs	r4, r4, #16
 800108e:	0027      	movs	r7, r4
 8001090:	0c10      	lsrs	r0, r2, #16
 8001092:	0412      	lsls	r2, r2, #16
 8001094:	0c12      	lsrs	r2, r2, #16
 8001096:	4344      	muls	r4, r0
 8001098:	4357      	muls	r7, r2
 800109a:	4348      	muls	r0, r1
 800109c:	4351      	muls	r1, r2
 800109e:	0c3a      	lsrs	r2, r7, #16
 80010a0:	1909      	adds	r1, r1, r4
 80010a2:	1852      	adds	r2, r2, r1
 80010a4:	4294      	cmp	r4, r2
 80010a6:	d903      	bls.n	80010b0 <__aeabi_fmul+0x214>
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	0249      	lsls	r1, r1, #9
 80010ac:	468c      	mov	ip, r1
 80010ae:	4460      	add	r0, ip
 80010b0:	043f      	lsls	r7, r7, #16
 80010b2:	0411      	lsls	r1, r2, #16
 80010b4:	0c3f      	lsrs	r7, r7, #16
 80010b6:	19c9      	adds	r1, r1, r7
 80010b8:	018c      	lsls	r4, r1, #6
 80010ba:	1e67      	subs	r7, r4, #1
 80010bc:	41bc      	sbcs	r4, r7
 80010be:	0c12      	lsrs	r2, r2, #16
 80010c0:	0e89      	lsrs	r1, r1, #26
 80010c2:	1812      	adds	r2, r2, r0
 80010c4:	430c      	orrs	r4, r1
 80010c6:	0192      	lsls	r2, r2, #6
 80010c8:	4314      	orrs	r4, r2
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	d50e      	bpl.n	80010ec <__aeabi_fmul+0x250>
 80010ce:	2301      	movs	r3, #1
 80010d0:	0862      	lsrs	r2, r4, #1
 80010d2:	401c      	ands	r4, r3
 80010d4:	4314      	orrs	r4, r2
 80010d6:	e749      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010d8:	003e      	movs	r6, r7
 80010da:	46a1      	mov	r9, r4
 80010dc:	2280      	movs	r2, #128	@ 0x80
 80010de:	464b      	mov	r3, r9
 80010e0:	03d2      	lsls	r2, r2, #15
 80010e2:	431a      	orrs	r2, r3
 80010e4:	0252      	lsls	r2, r2, #9
 80010e6:	20ff      	movs	r0, #255	@ 0xff
 80010e8:	0a52      	lsrs	r2, r2, #9
 80010ea:	e714      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010ec:	001d      	movs	r5, r3
 80010ee:	e73d      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010f0:	0192      	lsls	r2, r2, #6
 80010f2:	2000      	movs	r0, #0
 80010f4:	0a52      	lsrs	r2, r2, #9
 80010f6:	e70e      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010f8:	290f      	cmp	r1, #15
 80010fa:	d1ed      	bne.n	80010d8 <__aeabi_fmul+0x23c>
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	464b      	mov	r3, r9
 8001100:	03d2      	lsls	r2, r2, #15
 8001102:	4213      	tst	r3, r2
 8001104:	d0ea      	beq.n	80010dc <__aeabi_fmul+0x240>
 8001106:	4214      	tst	r4, r2
 8001108:	d1e8      	bne.n	80010dc <__aeabi_fmul+0x240>
 800110a:	003e      	movs	r6, r7
 800110c:	20ff      	movs	r0, #255	@ 0xff
 800110e:	4322      	orrs	r2, r4
 8001110:	e701      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	f7ffffff 	.word	0xf7ffffff

08001118 <__aeabi_fsub>:
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	4647      	mov	r7, r8
 800111c:	46ce      	mov	lr, r9
 800111e:	024e      	lsls	r6, r1, #9
 8001120:	0243      	lsls	r3, r0, #9
 8001122:	0045      	lsls	r5, r0, #1
 8001124:	0a72      	lsrs	r2, r6, #9
 8001126:	0fc4      	lsrs	r4, r0, #31
 8001128:	0048      	lsls	r0, r1, #1
 800112a:	b580      	push	{r7, lr}
 800112c:	4694      	mov	ip, r2
 800112e:	0a5f      	lsrs	r7, r3, #9
 8001130:	0e2d      	lsrs	r5, r5, #24
 8001132:	099b      	lsrs	r3, r3, #6
 8001134:	0e00      	lsrs	r0, r0, #24
 8001136:	0fc9      	lsrs	r1, r1, #31
 8001138:	09b6      	lsrs	r6, r6, #6
 800113a:	28ff      	cmp	r0, #255	@ 0xff
 800113c:	d024      	beq.n	8001188 <__aeabi_fsub+0x70>
 800113e:	2201      	movs	r2, #1
 8001140:	4051      	eors	r1, r2
 8001142:	1a2a      	subs	r2, r5, r0
 8001144:	428c      	cmp	r4, r1
 8001146:	d00f      	beq.n	8001168 <__aeabi_fsub+0x50>
 8001148:	2a00      	cmp	r2, #0
 800114a:	dc00      	bgt.n	800114e <__aeabi_fsub+0x36>
 800114c:	e16a      	b.n	8001424 <__aeabi_fsub+0x30c>
 800114e:	2800      	cmp	r0, #0
 8001150:	d135      	bne.n	80011be <__aeabi_fsub+0xa6>
 8001152:	2e00      	cmp	r6, #0
 8001154:	d100      	bne.n	8001158 <__aeabi_fsub+0x40>
 8001156:	e0a2      	b.n	800129e <__aeabi_fsub+0x186>
 8001158:	1e51      	subs	r1, r2, #1
 800115a:	2a01      	cmp	r2, #1
 800115c:	d100      	bne.n	8001160 <__aeabi_fsub+0x48>
 800115e:	e124      	b.n	80013aa <__aeabi_fsub+0x292>
 8001160:	2aff      	cmp	r2, #255	@ 0xff
 8001162:	d021      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001164:	000a      	movs	r2, r1
 8001166:	e02f      	b.n	80011c8 <__aeabi_fsub+0xb0>
 8001168:	2a00      	cmp	r2, #0
 800116a:	dc00      	bgt.n	800116e <__aeabi_fsub+0x56>
 800116c:	e167      	b.n	800143e <__aeabi_fsub+0x326>
 800116e:	2800      	cmp	r0, #0
 8001170:	d05e      	beq.n	8001230 <__aeabi_fsub+0x118>
 8001172:	2dff      	cmp	r5, #255	@ 0xff
 8001174:	d018      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	04c9      	lsls	r1, r1, #19
 800117a:	430e      	orrs	r6, r1
 800117c:	2a1b      	cmp	r2, #27
 800117e:	dc00      	bgt.n	8001182 <__aeabi_fsub+0x6a>
 8001180:	e076      	b.n	8001270 <__aeabi_fsub+0x158>
 8001182:	002a      	movs	r2, r5
 8001184:	3301      	adds	r3, #1
 8001186:	e032      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001188:	002a      	movs	r2, r5
 800118a:	3aff      	subs	r2, #255	@ 0xff
 800118c:	4691      	mov	r9, r2
 800118e:	2e00      	cmp	r6, #0
 8001190:	d042      	beq.n	8001218 <__aeabi_fsub+0x100>
 8001192:	428c      	cmp	r4, r1
 8001194:	d055      	beq.n	8001242 <__aeabi_fsub+0x12a>
 8001196:	464a      	mov	r2, r9
 8001198:	2a00      	cmp	r2, #0
 800119a:	d100      	bne.n	800119e <__aeabi_fsub+0x86>
 800119c:	e09c      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800119e:	2d00      	cmp	r5, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x8c>
 80011a2:	e077      	b.n	8001294 <__aeabi_fsub+0x17c>
 80011a4:	000c      	movs	r4, r1
 80011a6:	0033      	movs	r3, r6
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x98>
 80011ae:	e06e      	b.n	800128e <__aeabi_fsub+0x176>
 80011b0:	2280      	movs	r2, #128	@ 0x80
 80011b2:	03d2      	lsls	r2, r2, #15
 80011b4:	4313      	orrs	r3, r2
 80011b6:	025b      	lsls	r3, r3, #9
 80011b8:	20ff      	movs	r0, #255	@ 0xff
 80011ba:	0a5b      	lsrs	r3, r3, #9
 80011bc:	e024      	b.n	8001208 <__aeabi_fsub+0xf0>
 80011be:	2dff      	cmp	r5, #255	@ 0xff
 80011c0:	d0f2      	beq.n	80011a8 <__aeabi_fsub+0x90>
 80011c2:	2180      	movs	r1, #128	@ 0x80
 80011c4:	04c9      	lsls	r1, r1, #19
 80011c6:	430e      	orrs	r6, r1
 80011c8:	2101      	movs	r1, #1
 80011ca:	2a1b      	cmp	r2, #27
 80011cc:	dc08      	bgt.n	80011e0 <__aeabi_fsub+0xc8>
 80011ce:	0031      	movs	r1, r6
 80011d0:	2020      	movs	r0, #32
 80011d2:	40d1      	lsrs	r1, r2
 80011d4:	1a82      	subs	r2, r0, r2
 80011d6:	4096      	lsls	r6, r2
 80011d8:	0032      	movs	r2, r6
 80011da:	1e50      	subs	r0, r2, #1
 80011dc:	4182      	sbcs	r2, r0
 80011de:	4311      	orrs	r1, r2
 80011e0:	1a5b      	subs	r3, r3, r1
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	d460      	bmi.n	80012a8 <__aeabi_fsub+0x190>
 80011e6:	2107      	movs	r1, #7
 80011e8:	002a      	movs	r2, r5
 80011ea:	4019      	ands	r1, r3
 80011ec:	d057      	beq.n	800129e <__aeabi_fsub+0x186>
 80011ee:	210f      	movs	r1, #15
 80011f0:	4019      	ands	r1, r3
 80011f2:	2904      	cmp	r1, #4
 80011f4:	d000      	beq.n	80011f8 <__aeabi_fsub+0xe0>
 80011f6:	3304      	adds	r3, #4
 80011f8:	0159      	lsls	r1, r3, #5
 80011fa:	d550      	bpl.n	800129e <__aeabi_fsub+0x186>
 80011fc:	1c50      	adds	r0, r2, #1
 80011fe:	2afe      	cmp	r2, #254	@ 0xfe
 8001200:	d045      	beq.n	800128e <__aeabi_fsub+0x176>
 8001202:	019b      	lsls	r3, r3, #6
 8001204:	b2c0      	uxtb	r0, r0
 8001206:	0a5b      	lsrs	r3, r3, #9
 8001208:	05c0      	lsls	r0, r0, #23
 800120a:	4318      	orrs	r0, r3
 800120c:	07e4      	lsls	r4, r4, #31
 800120e:	4320      	orrs	r0, r4
 8001210:	bcc0      	pop	{r6, r7}
 8001212:	46b9      	mov	r9, r7
 8001214:	46b0      	mov	r8, r6
 8001216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001218:	2201      	movs	r2, #1
 800121a:	4051      	eors	r1, r2
 800121c:	428c      	cmp	r4, r1
 800121e:	d1ba      	bne.n	8001196 <__aeabi_fsub+0x7e>
 8001220:	464a      	mov	r2, r9
 8001222:	2a00      	cmp	r2, #0
 8001224:	d010      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001226:	2d00      	cmp	r5, #0
 8001228:	d100      	bne.n	800122c <__aeabi_fsub+0x114>
 800122a:	e098      	b.n	800135e <__aeabi_fsub+0x246>
 800122c:	2300      	movs	r3, #0
 800122e:	e7bb      	b.n	80011a8 <__aeabi_fsub+0x90>
 8001230:	2e00      	cmp	r6, #0
 8001232:	d034      	beq.n	800129e <__aeabi_fsub+0x186>
 8001234:	1e51      	subs	r1, r2, #1
 8001236:	2a01      	cmp	r2, #1
 8001238:	d06e      	beq.n	8001318 <__aeabi_fsub+0x200>
 800123a:	2aff      	cmp	r2, #255	@ 0xff
 800123c:	d0b4      	beq.n	80011a8 <__aeabi_fsub+0x90>
 800123e:	000a      	movs	r2, r1
 8001240:	e79c      	b.n	800117c <__aeabi_fsub+0x64>
 8001242:	2a00      	cmp	r2, #0
 8001244:	d000      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001246:	e088      	b.n	800135a <__aeabi_fsub+0x242>
 8001248:	20fe      	movs	r0, #254	@ 0xfe
 800124a:	1c6a      	adds	r2, r5, #1
 800124c:	4210      	tst	r0, r2
 800124e:	d000      	beq.n	8001252 <__aeabi_fsub+0x13a>
 8001250:	e092      	b.n	8001378 <__aeabi_fsub+0x260>
 8001252:	2d00      	cmp	r5, #0
 8001254:	d000      	beq.n	8001258 <__aeabi_fsub+0x140>
 8001256:	e0a4      	b.n	80013a2 <__aeabi_fsub+0x28a>
 8001258:	2b00      	cmp	r3, #0
 800125a:	d100      	bne.n	800125e <__aeabi_fsub+0x146>
 800125c:	e0cb      	b.n	80013f6 <__aeabi_fsub+0x2de>
 800125e:	2e00      	cmp	r6, #0
 8001260:	d000      	beq.n	8001264 <__aeabi_fsub+0x14c>
 8001262:	e0ca      	b.n	80013fa <__aeabi_fsub+0x2e2>
 8001264:	2200      	movs	r2, #0
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	025b      	lsls	r3, r3, #9
 800126a:	0a5b      	lsrs	r3, r3, #9
 800126c:	b2d0      	uxtb	r0, r2
 800126e:	e7cb      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001270:	0031      	movs	r1, r6
 8001272:	2020      	movs	r0, #32
 8001274:	40d1      	lsrs	r1, r2
 8001276:	1a82      	subs	r2, r0, r2
 8001278:	4096      	lsls	r6, r2
 800127a:	0032      	movs	r2, r6
 800127c:	1e50      	subs	r0, r2, #1
 800127e:	4182      	sbcs	r2, r0
 8001280:	430a      	orrs	r2, r1
 8001282:	189b      	adds	r3, r3, r2
 8001284:	015a      	lsls	r2, r3, #5
 8001286:	d5ae      	bpl.n	80011e6 <__aeabi_fsub+0xce>
 8001288:	1c6a      	adds	r2, r5, #1
 800128a:	2dfe      	cmp	r5, #254	@ 0xfe
 800128c:	d14a      	bne.n	8001324 <__aeabi_fsub+0x20c>
 800128e:	20ff      	movs	r0, #255	@ 0xff
 8001290:	2300      	movs	r3, #0
 8001292:	e7b9      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001294:	22ff      	movs	r2, #255	@ 0xff
 8001296:	2b00      	cmp	r3, #0
 8001298:	d14b      	bne.n	8001332 <__aeabi_fsub+0x21a>
 800129a:	000c      	movs	r4, r1
 800129c:	0033      	movs	r3, r6
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	2aff      	cmp	r2, #255	@ 0xff
 80012a2:	d100      	bne.n	80012a6 <__aeabi_fsub+0x18e>
 80012a4:	e781      	b.n	80011aa <__aeabi_fsub+0x92>
 80012a6:	e7df      	b.n	8001268 <__aeabi_fsub+0x150>
 80012a8:	019f      	lsls	r7, r3, #6
 80012aa:	09bf      	lsrs	r7, r7, #6
 80012ac:	0038      	movs	r0, r7
 80012ae:	f002 f923 	bl	80034f8 <__clzsi2>
 80012b2:	3805      	subs	r0, #5
 80012b4:	4087      	lsls	r7, r0
 80012b6:	4285      	cmp	r5, r0
 80012b8:	dc21      	bgt.n	80012fe <__aeabi_fsub+0x1e6>
 80012ba:	003b      	movs	r3, r7
 80012bc:	2120      	movs	r1, #32
 80012be:	1b42      	subs	r2, r0, r5
 80012c0:	3201      	adds	r2, #1
 80012c2:	40d3      	lsrs	r3, r2
 80012c4:	1a8a      	subs	r2, r1, r2
 80012c6:	4097      	lsls	r7, r2
 80012c8:	1e7a      	subs	r2, r7, #1
 80012ca:	4197      	sbcs	r7, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	433b      	orrs	r3, r7
 80012d0:	0759      	lsls	r1, r3, #29
 80012d2:	d000      	beq.n	80012d6 <__aeabi_fsub+0x1be>
 80012d4:	e78b      	b.n	80011ee <__aeabi_fsub+0xd6>
 80012d6:	e78f      	b.n	80011f8 <__aeabi_fsub+0xe0>
 80012d8:	20fe      	movs	r0, #254	@ 0xfe
 80012da:	1c6a      	adds	r2, r5, #1
 80012dc:	4210      	tst	r0, r2
 80012de:	d112      	bne.n	8001306 <__aeabi_fsub+0x1ee>
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d152      	bne.n	800138a <__aeabi_fsub+0x272>
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d07c      	beq.n	80013e2 <__aeabi_fsub+0x2ca>
 80012e8:	2e00      	cmp	r6, #0
 80012ea:	d0bb      	beq.n	8001264 <__aeabi_fsub+0x14c>
 80012ec:	1b9a      	subs	r2, r3, r6
 80012ee:	0150      	lsls	r0, r2, #5
 80012f0:	d400      	bmi.n	80012f4 <__aeabi_fsub+0x1dc>
 80012f2:	e08b      	b.n	800140c <__aeabi_fsub+0x2f4>
 80012f4:	2401      	movs	r4, #1
 80012f6:	2200      	movs	r2, #0
 80012f8:	1af3      	subs	r3, r6, r3
 80012fa:	400c      	ands	r4, r1
 80012fc:	e7e8      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 80012fe:	4b56      	ldr	r3, [pc, #344]	@ (8001458 <__aeabi_fsub+0x340>)
 8001300:	1a2a      	subs	r2, r5, r0
 8001302:	403b      	ands	r3, r7
 8001304:	e7e4      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001306:	1b9f      	subs	r7, r3, r6
 8001308:	017a      	lsls	r2, r7, #5
 800130a:	d446      	bmi.n	800139a <__aeabi_fsub+0x282>
 800130c:	2f00      	cmp	r7, #0
 800130e:	d1cd      	bne.n	80012ac <__aeabi_fsub+0x194>
 8001310:	2400      	movs	r4, #0
 8001312:	2000      	movs	r0, #0
 8001314:	2300      	movs	r3, #0
 8001316:	e777      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001318:	199b      	adds	r3, r3, r6
 800131a:	2501      	movs	r5, #1
 800131c:	3201      	adds	r2, #1
 800131e:	0159      	lsls	r1, r3, #5
 8001320:	d400      	bmi.n	8001324 <__aeabi_fsub+0x20c>
 8001322:	e760      	b.n	80011e6 <__aeabi_fsub+0xce>
 8001324:	2101      	movs	r1, #1
 8001326:	484d      	ldr	r0, [pc, #308]	@ (800145c <__aeabi_fsub+0x344>)
 8001328:	4019      	ands	r1, r3
 800132a:	085b      	lsrs	r3, r3, #1
 800132c:	4003      	ands	r3, r0
 800132e:	430b      	orrs	r3, r1
 8001330:	e7ce      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001332:	1e57      	subs	r7, r2, #1
 8001334:	2a01      	cmp	r2, #1
 8001336:	d05a      	beq.n	80013ee <__aeabi_fsub+0x2d6>
 8001338:	000c      	movs	r4, r1
 800133a:	2aff      	cmp	r2, #255	@ 0xff
 800133c:	d033      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800133e:	2201      	movs	r2, #1
 8001340:	2f1b      	cmp	r7, #27
 8001342:	dc07      	bgt.n	8001354 <__aeabi_fsub+0x23c>
 8001344:	2120      	movs	r1, #32
 8001346:	1bc9      	subs	r1, r1, r7
 8001348:	001a      	movs	r2, r3
 800134a:	408b      	lsls	r3, r1
 800134c:	40fa      	lsrs	r2, r7
 800134e:	1e59      	subs	r1, r3, #1
 8001350:	418b      	sbcs	r3, r1
 8001352:	431a      	orrs	r2, r3
 8001354:	0005      	movs	r5, r0
 8001356:	1ab3      	subs	r3, r6, r2
 8001358:	e743      	b.n	80011e2 <__aeabi_fsub+0xca>
 800135a:	2d00      	cmp	r5, #0
 800135c:	d123      	bne.n	80013a6 <__aeabi_fsub+0x28e>
 800135e:	22ff      	movs	r2, #255	@ 0xff
 8001360:	2b00      	cmp	r3, #0
 8001362:	d09b      	beq.n	800129c <__aeabi_fsub+0x184>
 8001364:	1e51      	subs	r1, r2, #1
 8001366:	2a01      	cmp	r2, #1
 8001368:	d0d6      	beq.n	8001318 <__aeabi_fsub+0x200>
 800136a:	2aff      	cmp	r2, #255	@ 0xff
 800136c:	d01b      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800136e:	291b      	cmp	r1, #27
 8001370:	dd2c      	ble.n	80013cc <__aeabi_fsub+0x2b4>
 8001372:	0002      	movs	r2, r0
 8001374:	1c73      	adds	r3, r6, #1
 8001376:	e73a      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001378:	2aff      	cmp	r2, #255	@ 0xff
 800137a:	d088      	beq.n	800128e <__aeabi_fsub+0x176>
 800137c:	199b      	adds	r3, r3, r6
 800137e:	085b      	lsrs	r3, r3, #1
 8001380:	0759      	lsls	r1, r3, #29
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x26e>
 8001384:	e733      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001386:	08db      	lsrs	r3, r3, #3
 8001388:	e76e      	b.n	8001268 <__aeabi_fsub+0x150>
 800138a:	2b00      	cmp	r3, #0
 800138c:	d110      	bne.n	80013b0 <__aeabi_fsub+0x298>
 800138e:	2e00      	cmp	r6, #0
 8001390:	d043      	beq.n	800141a <__aeabi_fsub+0x302>
 8001392:	2401      	movs	r4, #1
 8001394:	0033      	movs	r3, r6
 8001396:	400c      	ands	r4, r1
 8001398:	e706      	b.n	80011a8 <__aeabi_fsub+0x90>
 800139a:	2401      	movs	r4, #1
 800139c:	1af7      	subs	r7, r6, r3
 800139e:	400c      	ands	r4, r1
 80013a0:	e784      	b.n	80012ac <__aeabi_fsub+0x194>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d104      	bne.n	80013b0 <__aeabi_fsub+0x298>
 80013a6:	0033      	movs	r3, r6
 80013a8:	e6fe      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013aa:	2501      	movs	r5, #1
 80013ac:	1b9b      	subs	r3, r3, r6
 80013ae:	e718      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013b0:	2e00      	cmp	r6, #0
 80013b2:	d100      	bne.n	80013b6 <__aeabi_fsub+0x29e>
 80013b4:	e6f8      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013b6:	2280      	movs	r2, #128	@ 0x80
 80013b8:	03d2      	lsls	r2, r2, #15
 80013ba:	4297      	cmp	r7, r2
 80013bc:	d304      	bcc.n	80013c8 <__aeabi_fsub+0x2b0>
 80013be:	4594      	cmp	ip, r2
 80013c0:	d202      	bcs.n	80013c8 <__aeabi_fsub+0x2b0>
 80013c2:	2401      	movs	r4, #1
 80013c4:	0033      	movs	r3, r6
 80013c6:	400c      	ands	r4, r1
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	e6f1      	b.n	80011b0 <__aeabi_fsub+0x98>
 80013cc:	001a      	movs	r2, r3
 80013ce:	2520      	movs	r5, #32
 80013d0:	40ca      	lsrs	r2, r1
 80013d2:	1a69      	subs	r1, r5, r1
 80013d4:	408b      	lsls	r3, r1
 80013d6:	1e59      	subs	r1, r3, #1
 80013d8:	418b      	sbcs	r3, r1
 80013da:	4313      	orrs	r3, r2
 80013dc:	0005      	movs	r5, r0
 80013de:	199b      	adds	r3, r3, r6
 80013e0:	e750      	b.n	8001284 <__aeabi_fsub+0x16c>
 80013e2:	2e00      	cmp	r6, #0
 80013e4:	d094      	beq.n	8001310 <__aeabi_fsub+0x1f8>
 80013e6:	2401      	movs	r4, #1
 80013e8:	0033      	movs	r3, r6
 80013ea:	400c      	ands	r4, r1
 80013ec:	e73a      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013ee:	000c      	movs	r4, r1
 80013f0:	2501      	movs	r5, #1
 80013f2:	1af3      	subs	r3, r6, r3
 80013f4:	e6f5      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013f6:	0033      	movs	r3, r6
 80013f8:	e734      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013fa:	199b      	adds	r3, r3, r6
 80013fc:	2200      	movs	r2, #0
 80013fe:	0159      	lsls	r1, r3, #5
 8001400:	d5c1      	bpl.n	8001386 <__aeabi_fsub+0x26e>
 8001402:	4a15      	ldr	r2, [pc, #84]	@ (8001458 <__aeabi_fsub+0x340>)
 8001404:	4013      	ands	r3, r2
 8001406:	08db      	lsrs	r3, r3, #3
 8001408:	2201      	movs	r2, #1
 800140a:	e72d      	b.n	8001268 <__aeabi_fsub+0x150>
 800140c:	2a00      	cmp	r2, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_fsub+0x2fa>
 8001410:	e77e      	b.n	8001310 <__aeabi_fsub+0x1f8>
 8001412:	0013      	movs	r3, r2
 8001414:	2200      	movs	r2, #0
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	e726      	b.n	8001268 <__aeabi_fsub+0x150>
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	2400      	movs	r4, #0
 800141e:	20ff      	movs	r0, #255	@ 0xff
 8001420:	03db      	lsls	r3, r3, #15
 8001422:	e6f1      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d100      	bne.n	800142a <__aeabi_fsub+0x312>
 8001428:	e756      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800142a:	1b47      	subs	r7, r0, r5
 800142c:	003a      	movs	r2, r7
 800142e:	2d00      	cmp	r5, #0
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x31c>
 8001432:	e730      	b.n	8001296 <__aeabi_fsub+0x17e>
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	04d2      	lsls	r2, r2, #19
 8001438:	000c      	movs	r4, r1
 800143a:	4313      	orrs	r3, r2
 800143c:	e77f      	b.n	800133e <__aeabi_fsub+0x226>
 800143e:	2a00      	cmp	r2, #0
 8001440:	d100      	bne.n	8001444 <__aeabi_fsub+0x32c>
 8001442:	e701      	b.n	8001248 <__aeabi_fsub+0x130>
 8001444:	1b41      	subs	r1, r0, r5
 8001446:	2d00      	cmp	r5, #0
 8001448:	d101      	bne.n	800144e <__aeabi_fsub+0x336>
 800144a:	000a      	movs	r2, r1
 800144c:	e788      	b.n	8001360 <__aeabi_fsub+0x248>
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	04d2      	lsls	r2, r2, #19
 8001452:	4313      	orrs	r3, r2
 8001454:	e78b      	b.n	800136e <__aeabi_fsub+0x256>
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	fbffffff 	.word	0xfbffffff
 800145c:	7dffffff 	.word	0x7dffffff

08001460 <__aeabi_fcmpun>:
 8001460:	0243      	lsls	r3, r0, #9
 8001462:	024a      	lsls	r2, r1, #9
 8001464:	0040      	lsls	r0, r0, #1
 8001466:	0049      	lsls	r1, r1, #1
 8001468:	0a5b      	lsrs	r3, r3, #9
 800146a:	0a52      	lsrs	r2, r2, #9
 800146c:	0e09      	lsrs	r1, r1, #24
 800146e:	0e00      	lsrs	r0, r0, #24
 8001470:	28ff      	cmp	r0, #255	@ 0xff
 8001472:	d006      	beq.n	8001482 <__aeabi_fcmpun+0x22>
 8001474:	2000      	movs	r0, #0
 8001476:	29ff      	cmp	r1, #255	@ 0xff
 8001478:	d102      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 800147a:	1e53      	subs	r3, r2, #1
 800147c:	419a      	sbcs	r2, r3
 800147e:	0010      	movs	r0, r2
 8001480:	4770      	bx	lr
 8001482:	38fe      	subs	r0, #254	@ 0xfe
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1fb      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 8001488:	e7f4      	b.n	8001474 <__aeabi_fcmpun+0x14>
 800148a:	46c0      	nop			@ (mov r8, r8)

0800148c <__aeabi_f2iz>:
 800148c:	0241      	lsls	r1, r0, #9
 800148e:	0042      	lsls	r2, r0, #1
 8001490:	0fc3      	lsrs	r3, r0, #31
 8001492:	0a49      	lsrs	r1, r1, #9
 8001494:	2000      	movs	r0, #0
 8001496:	0e12      	lsrs	r2, r2, #24
 8001498:	2a7e      	cmp	r2, #126	@ 0x7e
 800149a:	dd03      	ble.n	80014a4 <__aeabi_f2iz+0x18>
 800149c:	2a9d      	cmp	r2, #157	@ 0x9d
 800149e:	dd02      	ble.n	80014a6 <__aeabi_f2iz+0x1a>
 80014a0:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <__aeabi_f2iz+0x3c>)
 80014a2:	1898      	adds	r0, r3, r2
 80014a4:	4770      	bx	lr
 80014a6:	2080      	movs	r0, #128	@ 0x80
 80014a8:	0400      	lsls	r0, r0, #16
 80014aa:	4301      	orrs	r1, r0
 80014ac:	2a95      	cmp	r2, #149	@ 0x95
 80014ae:	dc07      	bgt.n	80014c0 <__aeabi_f2iz+0x34>
 80014b0:	2096      	movs	r0, #150	@ 0x96
 80014b2:	1a82      	subs	r2, r0, r2
 80014b4:	40d1      	lsrs	r1, r2
 80014b6:	4248      	negs	r0, r1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f3      	bne.n	80014a4 <__aeabi_f2iz+0x18>
 80014bc:	0008      	movs	r0, r1
 80014be:	e7f1      	b.n	80014a4 <__aeabi_f2iz+0x18>
 80014c0:	3a96      	subs	r2, #150	@ 0x96
 80014c2:	4091      	lsls	r1, r2
 80014c4:	e7f7      	b.n	80014b6 <__aeabi_f2iz+0x2a>
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	7fffffff 	.word	0x7fffffff

080014cc <__aeabi_i2f>:
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d013      	beq.n	80014fa <__aeabi_i2f+0x2e>
 80014d2:	17c3      	asrs	r3, r0, #31
 80014d4:	18c5      	adds	r5, r0, r3
 80014d6:	405d      	eors	r5, r3
 80014d8:	0fc4      	lsrs	r4, r0, #31
 80014da:	0028      	movs	r0, r5
 80014dc:	f002 f80c 	bl	80034f8 <__clzsi2>
 80014e0:	239e      	movs	r3, #158	@ 0x9e
 80014e2:	0001      	movs	r1, r0
 80014e4:	1a1b      	subs	r3, r3, r0
 80014e6:	2b96      	cmp	r3, #150	@ 0x96
 80014e8:	dc0f      	bgt.n	800150a <__aeabi_i2f+0x3e>
 80014ea:	2808      	cmp	r0, #8
 80014ec:	d034      	beq.n	8001558 <__aeabi_i2f+0x8c>
 80014ee:	3908      	subs	r1, #8
 80014f0:	408d      	lsls	r5, r1
 80014f2:	026d      	lsls	r5, r5, #9
 80014f4:	0a6d      	lsrs	r5, r5, #9
 80014f6:	b2d8      	uxtb	r0, r3
 80014f8:	e002      	b.n	8001500 <__aeabi_i2f+0x34>
 80014fa:	2400      	movs	r4, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	2500      	movs	r5, #0
 8001500:	05c0      	lsls	r0, r0, #23
 8001502:	4328      	orrs	r0, r5
 8001504:	07e4      	lsls	r4, r4, #31
 8001506:	4320      	orrs	r0, r4
 8001508:	bd70      	pop	{r4, r5, r6, pc}
 800150a:	2b99      	cmp	r3, #153	@ 0x99
 800150c:	dc16      	bgt.n	800153c <__aeabi_i2f+0x70>
 800150e:	1f42      	subs	r2, r0, #5
 8001510:	2805      	cmp	r0, #5
 8001512:	d000      	beq.n	8001516 <__aeabi_i2f+0x4a>
 8001514:	4095      	lsls	r5, r2
 8001516:	002a      	movs	r2, r5
 8001518:	4811      	ldr	r0, [pc, #68]	@ (8001560 <__aeabi_i2f+0x94>)
 800151a:	4002      	ands	r2, r0
 800151c:	076e      	lsls	r6, r5, #29
 800151e:	d009      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001520:	260f      	movs	r6, #15
 8001522:	4035      	ands	r5, r6
 8001524:	2d04      	cmp	r5, #4
 8001526:	d005      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001528:	3204      	adds	r2, #4
 800152a:	0155      	lsls	r5, r2, #5
 800152c:	d502      	bpl.n	8001534 <__aeabi_i2f+0x68>
 800152e:	239f      	movs	r3, #159	@ 0x9f
 8001530:	4002      	ands	r2, r0
 8001532:	1a5b      	subs	r3, r3, r1
 8001534:	0192      	lsls	r2, r2, #6
 8001536:	0a55      	lsrs	r5, r2, #9
 8001538:	b2d8      	uxtb	r0, r3
 800153a:	e7e1      	b.n	8001500 <__aeabi_i2f+0x34>
 800153c:	2205      	movs	r2, #5
 800153e:	1a12      	subs	r2, r2, r0
 8001540:	0028      	movs	r0, r5
 8001542:	40d0      	lsrs	r0, r2
 8001544:	0002      	movs	r2, r0
 8001546:	0008      	movs	r0, r1
 8001548:	301b      	adds	r0, #27
 800154a:	4085      	lsls	r5, r0
 800154c:	0028      	movs	r0, r5
 800154e:	1e45      	subs	r5, r0, #1
 8001550:	41a8      	sbcs	r0, r5
 8001552:	4302      	orrs	r2, r0
 8001554:	0015      	movs	r5, r2
 8001556:	e7de      	b.n	8001516 <__aeabi_i2f+0x4a>
 8001558:	026d      	lsls	r5, r5, #9
 800155a:	2096      	movs	r0, #150	@ 0x96
 800155c:	0a6d      	lsrs	r5, r5, #9
 800155e:	e7cf      	b.n	8001500 <__aeabi_i2f+0x34>
 8001560:	fbffffff 	.word	0xfbffffff

08001564 <__aeabi_ui2f>:
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	1e04      	subs	r4, r0, #0
 8001568:	d00e      	beq.n	8001588 <__aeabi_ui2f+0x24>
 800156a:	f001 ffc5 	bl	80034f8 <__clzsi2>
 800156e:	239e      	movs	r3, #158	@ 0x9e
 8001570:	0001      	movs	r1, r0
 8001572:	1a1b      	subs	r3, r3, r0
 8001574:	2b96      	cmp	r3, #150	@ 0x96
 8001576:	dc0c      	bgt.n	8001592 <__aeabi_ui2f+0x2e>
 8001578:	2808      	cmp	r0, #8
 800157a:	d02f      	beq.n	80015dc <__aeabi_ui2f+0x78>
 800157c:	3908      	subs	r1, #8
 800157e:	408c      	lsls	r4, r1
 8001580:	0264      	lsls	r4, r4, #9
 8001582:	0a64      	lsrs	r4, r4, #9
 8001584:	b2d8      	uxtb	r0, r3
 8001586:	e001      	b.n	800158c <__aeabi_ui2f+0x28>
 8001588:	2000      	movs	r0, #0
 800158a:	2400      	movs	r4, #0
 800158c:	05c0      	lsls	r0, r0, #23
 800158e:	4320      	orrs	r0, r4
 8001590:	bd70      	pop	{r4, r5, r6, pc}
 8001592:	2b99      	cmp	r3, #153	@ 0x99
 8001594:	dc16      	bgt.n	80015c4 <__aeabi_ui2f+0x60>
 8001596:	1f42      	subs	r2, r0, #5
 8001598:	2805      	cmp	r0, #5
 800159a:	d000      	beq.n	800159e <__aeabi_ui2f+0x3a>
 800159c:	4094      	lsls	r4, r2
 800159e:	0022      	movs	r2, r4
 80015a0:	4810      	ldr	r0, [pc, #64]	@ (80015e4 <__aeabi_ui2f+0x80>)
 80015a2:	4002      	ands	r2, r0
 80015a4:	0765      	lsls	r5, r4, #29
 80015a6:	d009      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015a8:	250f      	movs	r5, #15
 80015aa:	402c      	ands	r4, r5
 80015ac:	2c04      	cmp	r4, #4
 80015ae:	d005      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015b0:	3204      	adds	r2, #4
 80015b2:	0154      	lsls	r4, r2, #5
 80015b4:	d502      	bpl.n	80015bc <__aeabi_ui2f+0x58>
 80015b6:	239f      	movs	r3, #159	@ 0x9f
 80015b8:	4002      	ands	r2, r0
 80015ba:	1a5b      	subs	r3, r3, r1
 80015bc:	0192      	lsls	r2, r2, #6
 80015be:	0a54      	lsrs	r4, r2, #9
 80015c0:	b2d8      	uxtb	r0, r3
 80015c2:	e7e3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015c4:	0002      	movs	r2, r0
 80015c6:	0020      	movs	r0, r4
 80015c8:	321b      	adds	r2, #27
 80015ca:	4090      	lsls	r0, r2
 80015cc:	0002      	movs	r2, r0
 80015ce:	1e50      	subs	r0, r2, #1
 80015d0:	4182      	sbcs	r2, r0
 80015d2:	2005      	movs	r0, #5
 80015d4:	1a40      	subs	r0, r0, r1
 80015d6:	40c4      	lsrs	r4, r0
 80015d8:	4314      	orrs	r4, r2
 80015da:	e7e0      	b.n	800159e <__aeabi_ui2f+0x3a>
 80015dc:	0264      	lsls	r4, r4, #9
 80015de:	2096      	movs	r0, #150	@ 0x96
 80015e0:	0a64      	lsrs	r4, r4, #9
 80015e2:	e7d3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015e4:	fbffffff 	.word	0xfbffffff

080015e8 <__aeabi_dadd>:
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	4657      	mov	r7, sl
 80015ec:	464e      	mov	r6, r9
 80015ee:	4645      	mov	r5, r8
 80015f0:	46de      	mov	lr, fp
 80015f2:	b5e0      	push	{r5, r6, r7, lr}
 80015f4:	b083      	sub	sp, #12
 80015f6:	9000      	str	r0, [sp, #0]
 80015f8:	9101      	str	r1, [sp, #4]
 80015fa:	030c      	lsls	r4, r1, #12
 80015fc:	004f      	lsls	r7, r1, #1
 80015fe:	0fce      	lsrs	r6, r1, #31
 8001600:	0a61      	lsrs	r1, r4, #9
 8001602:	9c00      	ldr	r4, [sp, #0]
 8001604:	031d      	lsls	r5, r3, #12
 8001606:	0f64      	lsrs	r4, r4, #29
 8001608:	430c      	orrs	r4, r1
 800160a:	9900      	ldr	r1, [sp, #0]
 800160c:	9200      	str	r2, [sp, #0]
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	00c8      	lsls	r0, r1, #3
 8001612:	0059      	lsls	r1, r3, #1
 8001614:	0d4b      	lsrs	r3, r1, #21
 8001616:	4699      	mov	r9, r3
 8001618:	9a00      	ldr	r2, [sp, #0]
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	0a6d      	lsrs	r5, r5, #9
 800161e:	0fd9      	lsrs	r1, r3, #31
 8001620:	0f53      	lsrs	r3, r2, #29
 8001622:	432b      	orrs	r3, r5
 8001624:	469a      	mov	sl, r3
 8001626:	9b00      	ldr	r3, [sp, #0]
 8001628:	0d7f      	lsrs	r7, r7, #21
 800162a:	00da      	lsls	r2, r3, #3
 800162c:	4694      	mov	ip, r2
 800162e:	464a      	mov	r2, r9
 8001630:	46b0      	mov	r8, r6
 8001632:	1aba      	subs	r2, r7, r2
 8001634:	428e      	cmp	r6, r1
 8001636:	d100      	bne.n	800163a <__aeabi_dadd+0x52>
 8001638:	e0b0      	b.n	800179c <__aeabi_dadd+0x1b4>
 800163a:	2a00      	cmp	r2, #0
 800163c:	dc00      	bgt.n	8001640 <__aeabi_dadd+0x58>
 800163e:	e078      	b.n	8001732 <__aeabi_dadd+0x14a>
 8001640:	4649      	mov	r1, r9
 8001642:	2900      	cmp	r1, #0
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x60>
 8001646:	e0e9      	b.n	800181c <__aeabi_dadd+0x234>
 8001648:	49c9      	ldr	r1, [pc, #804]	@ (8001970 <__aeabi_dadd+0x388>)
 800164a:	428f      	cmp	r7, r1
 800164c:	d100      	bne.n	8001650 <__aeabi_dadd+0x68>
 800164e:	e195      	b.n	800197c <__aeabi_dadd+0x394>
 8001650:	2501      	movs	r5, #1
 8001652:	2a38      	cmp	r2, #56	@ 0x38
 8001654:	dc16      	bgt.n	8001684 <__aeabi_dadd+0x9c>
 8001656:	2180      	movs	r1, #128	@ 0x80
 8001658:	4653      	mov	r3, sl
 800165a:	0409      	lsls	r1, r1, #16
 800165c:	430b      	orrs	r3, r1
 800165e:	469a      	mov	sl, r3
 8001660:	2a1f      	cmp	r2, #31
 8001662:	dd00      	ble.n	8001666 <__aeabi_dadd+0x7e>
 8001664:	e1e7      	b.n	8001a36 <__aeabi_dadd+0x44e>
 8001666:	2120      	movs	r1, #32
 8001668:	4655      	mov	r5, sl
 800166a:	1a8b      	subs	r3, r1, r2
 800166c:	4661      	mov	r1, ip
 800166e:	409d      	lsls	r5, r3
 8001670:	40d1      	lsrs	r1, r2
 8001672:	430d      	orrs	r5, r1
 8001674:	4661      	mov	r1, ip
 8001676:	4099      	lsls	r1, r3
 8001678:	1e4b      	subs	r3, r1, #1
 800167a:	4199      	sbcs	r1, r3
 800167c:	4653      	mov	r3, sl
 800167e:	40d3      	lsrs	r3, r2
 8001680:	430d      	orrs	r5, r1
 8001682:	1ae4      	subs	r4, r4, r3
 8001684:	1b45      	subs	r5, r0, r5
 8001686:	42a8      	cmp	r0, r5
 8001688:	4180      	sbcs	r0, r0
 800168a:	4240      	negs	r0, r0
 800168c:	1a24      	subs	r4, r4, r0
 800168e:	0223      	lsls	r3, r4, #8
 8001690:	d400      	bmi.n	8001694 <__aeabi_dadd+0xac>
 8001692:	e10f      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001694:	0264      	lsls	r4, r4, #9
 8001696:	0a64      	lsrs	r4, r4, #9
 8001698:	2c00      	cmp	r4, #0
 800169a:	d100      	bne.n	800169e <__aeabi_dadd+0xb6>
 800169c:	e139      	b.n	8001912 <__aeabi_dadd+0x32a>
 800169e:	0020      	movs	r0, r4
 80016a0:	f001 ff2a 	bl	80034f8 <__clzsi2>
 80016a4:	0003      	movs	r3, r0
 80016a6:	3b08      	subs	r3, #8
 80016a8:	2120      	movs	r1, #32
 80016aa:	0028      	movs	r0, r5
 80016ac:	1aca      	subs	r2, r1, r3
 80016ae:	40d0      	lsrs	r0, r2
 80016b0:	409c      	lsls	r4, r3
 80016b2:	0002      	movs	r2, r0
 80016b4:	409d      	lsls	r5, r3
 80016b6:	4322      	orrs	r2, r4
 80016b8:	429f      	cmp	r7, r3
 80016ba:	dd00      	ble.n	80016be <__aeabi_dadd+0xd6>
 80016bc:	e173      	b.n	80019a6 <__aeabi_dadd+0x3be>
 80016be:	1bd8      	subs	r0, r3, r7
 80016c0:	3001      	adds	r0, #1
 80016c2:	1a09      	subs	r1, r1, r0
 80016c4:	002c      	movs	r4, r5
 80016c6:	408d      	lsls	r5, r1
 80016c8:	40c4      	lsrs	r4, r0
 80016ca:	1e6b      	subs	r3, r5, #1
 80016cc:	419d      	sbcs	r5, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	40c2      	lsrs	r2, r0
 80016d2:	408b      	lsls	r3, r1
 80016d4:	4325      	orrs	r5, r4
 80016d6:	2700      	movs	r7, #0
 80016d8:	0014      	movs	r4, r2
 80016da:	431d      	orrs	r5, r3
 80016dc:	076b      	lsls	r3, r5, #29
 80016de:	d009      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e0:	230f      	movs	r3, #15
 80016e2:	402b      	ands	r3, r5
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d005      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e8:	1d2b      	adds	r3, r5, #4
 80016ea:	42ab      	cmp	r3, r5
 80016ec:	41ad      	sbcs	r5, r5
 80016ee:	426d      	negs	r5, r5
 80016f0:	1964      	adds	r4, r4, r5
 80016f2:	001d      	movs	r5, r3
 80016f4:	0223      	lsls	r3, r4, #8
 80016f6:	d400      	bmi.n	80016fa <__aeabi_dadd+0x112>
 80016f8:	e12d      	b.n	8001956 <__aeabi_dadd+0x36e>
 80016fa:	4a9d      	ldr	r2, [pc, #628]	@ (8001970 <__aeabi_dadd+0x388>)
 80016fc:	3701      	adds	r7, #1
 80016fe:	4297      	cmp	r7, r2
 8001700:	d100      	bne.n	8001704 <__aeabi_dadd+0x11c>
 8001702:	e0d3      	b.n	80018ac <__aeabi_dadd+0x2c4>
 8001704:	4646      	mov	r6, r8
 8001706:	499b      	ldr	r1, [pc, #620]	@ (8001974 <__aeabi_dadd+0x38c>)
 8001708:	08ed      	lsrs	r5, r5, #3
 800170a:	4021      	ands	r1, r4
 800170c:	074a      	lsls	r2, r1, #29
 800170e:	432a      	orrs	r2, r5
 8001710:	057c      	lsls	r4, r7, #21
 8001712:	024d      	lsls	r5, r1, #9
 8001714:	0b2d      	lsrs	r5, r5, #12
 8001716:	0d64      	lsrs	r4, r4, #21
 8001718:	0524      	lsls	r4, r4, #20
 800171a:	432c      	orrs	r4, r5
 800171c:	07f6      	lsls	r6, r6, #31
 800171e:	4334      	orrs	r4, r6
 8001720:	0010      	movs	r0, r2
 8001722:	0021      	movs	r1, r4
 8001724:	b003      	add	sp, #12
 8001726:	bcf0      	pop	{r4, r5, r6, r7}
 8001728:	46bb      	mov	fp, r7
 800172a:	46b2      	mov	sl, r6
 800172c:	46a9      	mov	r9, r5
 800172e:	46a0      	mov	r8, r4
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001732:	2a00      	cmp	r2, #0
 8001734:	d100      	bne.n	8001738 <__aeabi_dadd+0x150>
 8001736:	e084      	b.n	8001842 <__aeabi_dadd+0x25a>
 8001738:	464a      	mov	r2, r9
 800173a:	1bd2      	subs	r2, r2, r7
 800173c:	2f00      	cmp	r7, #0
 800173e:	d000      	beq.n	8001742 <__aeabi_dadd+0x15a>
 8001740:	e16d      	b.n	8001a1e <__aeabi_dadd+0x436>
 8001742:	0025      	movs	r5, r4
 8001744:	4305      	orrs	r5, r0
 8001746:	d100      	bne.n	800174a <__aeabi_dadd+0x162>
 8001748:	e127      	b.n	800199a <__aeabi_dadd+0x3b2>
 800174a:	1e56      	subs	r6, r2, #1
 800174c:	2a01      	cmp	r2, #1
 800174e:	d100      	bne.n	8001752 <__aeabi_dadd+0x16a>
 8001750:	e23b      	b.n	8001bca <__aeabi_dadd+0x5e2>
 8001752:	4d87      	ldr	r5, [pc, #540]	@ (8001970 <__aeabi_dadd+0x388>)
 8001754:	42aa      	cmp	r2, r5
 8001756:	d100      	bne.n	800175a <__aeabi_dadd+0x172>
 8001758:	e26a      	b.n	8001c30 <__aeabi_dadd+0x648>
 800175a:	2501      	movs	r5, #1
 800175c:	2e38      	cmp	r6, #56	@ 0x38
 800175e:	dc12      	bgt.n	8001786 <__aeabi_dadd+0x19e>
 8001760:	0032      	movs	r2, r6
 8001762:	2a1f      	cmp	r2, #31
 8001764:	dd00      	ble.n	8001768 <__aeabi_dadd+0x180>
 8001766:	e1f8      	b.n	8001b5a <__aeabi_dadd+0x572>
 8001768:	2620      	movs	r6, #32
 800176a:	0025      	movs	r5, r4
 800176c:	1ab6      	subs	r6, r6, r2
 800176e:	0007      	movs	r7, r0
 8001770:	4653      	mov	r3, sl
 8001772:	40b0      	lsls	r0, r6
 8001774:	40d4      	lsrs	r4, r2
 8001776:	40b5      	lsls	r5, r6
 8001778:	40d7      	lsrs	r7, r2
 800177a:	1e46      	subs	r6, r0, #1
 800177c:	41b0      	sbcs	r0, r6
 800177e:	1b1b      	subs	r3, r3, r4
 8001780:	469a      	mov	sl, r3
 8001782:	433d      	orrs	r5, r7
 8001784:	4305      	orrs	r5, r0
 8001786:	4662      	mov	r2, ip
 8001788:	1b55      	subs	r5, r2, r5
 800178a:	45ac      	cmp	ip, r5
 800178c:	4192      	sbcs	r2, r2
 800178e:	4653      	mov	r3, sl
 8001790:	4252      	negs	r2, r2
 8001792:	000e      	movs	r6, r1
 8001794:	464f      	mov	r7, r9
 8001796:	4688      	mov	r8, r1
 8001798:	1a9c      	subs	r4, r3, r2
 800179a:	e778      	b.n	800168e <__aeabi_dadd+0xa6>
 800179c:	2a00      	cmp	r2, #0
 800179e:	dc00      	bgt.n	80017a2 <__aeabi_dadd+0x1ba>
 80017a0:	e08e      	b.n	80018c0 <__aeabi_dadd+0x2d8>
 80017a2:	4649      	mov	r1, r9
 80017a4:	2900      	cmp	r1, #0
 80017a6:	d175      	bne.n	8001894 <__aeabi_dadd+0x2ac>
 80017a8:	4661      	mov	r1, ip
 80017aa:	4653      	mov	r3, sl
 80017ac:	4319      	orrs	r1, r3
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dadd+0x1ca>
 80017b0:	e0f6      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80017b2:	1e51      	subs	r1, r2, #1
 80017b4:	2a01      	cmp	r2, #1
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x1d2>
 80017b8:	e191      	b.n	8001ade <__aeabi_dadd+0x4f6>
 80017ba:	4d6d      	ldr	r5, [pc, #436]	@ (8001970 <__aeabi_dadd+0x388>)
 80017bc:	42aa      	cmp	r2, r5
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x1da>
 80017c0:	e0dc      	b.n	800197c <__aeabi_dadd+0x394>
 80017c2:	2501      	movs	r5, #1
 80017c4:	2938      	cmp	r1, #56	@ 0x38
 80017c6:	dc14      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80017c8:	000a      	movs	r2, r1
 80017ca:	2a1f      	cmp	r2, #31
 80017cc:	dd00      	ble.n	80017d0 <__aeabi_dadd+0x1e8>
 80017ce:	e1a2      	b.n	8001b16 <__aeabi_dadd+0x52e>
 80017d0:	2120      	movs	r1, #32
 80017d2:	4653      	mov	r3, sl
 80017d4:	1a89      	subs	r1, r1, r2
 80017d6:	408b      	lsls	r3, r1
 80017d8:	001d      	movs	r5, r3
 80017da:	4663      	mov	r3, ip
 80017dc:	40d3      	lsrs	r3, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	4663      	mov	r3, ip
 80017e2:	408b      	lsls	r3, r1
 80017e4:	0019      	movs	r1, r3
 80017e6:	1e4b      	subs	r3, r1, #1
 80017e8:	4199      	sbcs	r1, r3
 80017ea:	4653      	mov	r3, sl
 80017ec:	40d3      	lsrs	r3, r2
 80017ee:	430d      	orrs	r5, r1
 80017f0:	18e4      	adds	r4, r4, r3
 80017f2:	182d      	adds	r5, r5, r0
 80017f4:	4285      	cmp	r5, r0
 80017f6:	4180      	sbcs	r0, r0
 80017f8:	4240      	negs	r0, r0
 80017fa:	1824      	adds	r4, r4, r0
 80017fc:	0223      	lsls	r3, r4, #8
 80017fe:	d559      	bpl.n	80018b4 <__aeabi_dadd+0x2cc>
 8001800:	4b5b      	ldr	r3, [pc, #364]	@ (8001970 <__aeabi_dadd+0x388>)
 8001802:	3701      	adds	r7, #1
 8001804:	429f      	cmp	r7, r3
 8001806:	d051      	beq.n	80018ac <__aeabi_dadd+0x2c4>
 8001808:	2101      	movs	r1, #1
 800180a:	4b5a      	ldr	r3, [pc, #360]	@ (8001974 <__aeabi_dadd+0x38c>)
 800180c:	086a      	lsrs	r2, r5, #1
 800180e:	401c      	ands	r4, r3
 8001810:	4029      	ands	r1, r5
 8001812:	430a      	orrs	r2, r1
 8001814:	07e5      	lsls	r5, r4, #31
 8001816:	4315      	orrs	r5, r2
 8001818:	0864      	lsrs	r4, r4, #1
 800181a:	e75f      	b.n	80016dc <__aeabi_dadd+0xf4>
 800181c:	4661      	mov	r1, ip
 800181e:	4653      	mov	r3, sl
 8001820:	4319      	orrs	r1, r3
 8001822:	d100      	bne.n	8001826 <__aeabi_dadd+0x23e>
 8001824:	e0bc      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001826:	1e51      	subs	r1, r2, #1
 8001828:	2a01      	cmp	r2, #1
 800182a:	d100      	bne.n	800182e <__aeabi_dadd+0x246>
 800182c:	e164      	b.n	8001af8 <__aeabi_dadd+0x510>
 800182e:	4d50      	ldr	r5, [pc, #320]	@ (8001970 <__aeabi_dadd+0x388>)
 8001830:	42aa      	cmp	r2, r5
 8001832:	d100      	bne.n	8001836 <__aeabi_dadd+0x24e>
 8001834:	e16a      	b.n	8001b0c <__aeabi_dadd+0x524>
 8001836:	2501      	movs	r5, #1
 8001838:	2938      	cmp	r1, #56	@ 0x38
 800183a:	dd00      	ble.n	800183e <__aeabi_dadd+0x256>
 800183c:	e722      	b.n	8001684 <__aeabi_dadd+0x9c>
 800183e:	000a      	movs	r2, r1
 8001840:	e70e      	b.n	8001660 <__aeabi_dadd+0x78>
 8001842:	4a4d      	ldr	r2, [pc, #308]	@ (8001978 <__aeabi_dadd+0x390>)
 8001844:	1c7d      	adds	r5, r7, #1
 8001846:	4215      	tst	r5, r2
 8001848:	d000      	beq.n	800184c <__aeabi_dadd+0x264>
 800184a:	e0d0      	b.n	80019ee <__aeabi_dadd+0x406>
 800184c:	0025      	movs	r5, r4
 800184e:	4662      	mov	r2, ip
 8001850:	4653      	mov	r3, sl
 8001852:	4305      	orrs	r5, r0
 8001854:	431a      	orrs	r2, r3
 8001856:	2f00      	cmp	r7, #0
 8001858:	d000      	beq.n	800185c <__aeabi_dadd+0x274>
 800185a:	e137      	b.n	8001acc <__aeabi_dadd+0x4e4>
 800185c:	2d00      	cmp	r5, #0
 800185e:	d100      	bne.n	8001862 <__aeabi_dadd+0x27a>
 8001860:	e1a8      	b.n	8001bb4 <__aeabi_dadd+0x5cc>
 8001862:	2a00      	cmp	r2, #0
 8001864:	d100      	bne.n	8001868 <__aeabi_dadd+0x280>
 8001866:	e16a      	b.n	8001b3e <__aeabi_dadd+0x556>
 8001868:	4663      	mov	r3, ip
 800186a:	1ac5      	subs	r5, r0, r3
 800186c:	4653      	mov	r3, sl
 800186e:	1ae2      	subs	r2, r4, r3
 8001870:	42a8      	cmp	r0, r5
 8001872:	419b      	sbcs	r3, r3
 8001874:	425b      	negs	r3, r3
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	021a      	lsls	r2, r3, #8
 800187a:	d400      	bmi.n	800187e <__aeabi_dadd+0x296>
 800187c:	e203      	b.n	8001c86 <__aeabi_dadd+0x69e>
 800187e:	4663      	mov	r3, ip
 8001880:	1a1d      	subs	r5, r3, r0
 8001882:	45ac      	cmp	ip, r5
 8001884:	4192      	sbcs	r2, r2
 8001886:	4653      	mov	r3, sl
 8001888:	4252      	negs	r2, r2
 800188a:	1b1c      	subs	r4, r3, r4
 800188c:	000e      	movs	r6, r1
 800188e:	4688      	mov	r8, r1
 8001890:	1aa4      	subs	r4, r4, r2
 8001892:	e723      	b.n	80016dc <__aeabi_dadd+0xf4>
 8001894:	4936      	ldr	r1, [pc, #216]	@ (8001970 <__aeabi_dadd+0x388>)
 8001896:	428f      	cmp	r7, r1
 8001898:	d070      	beq.n	800197c <__aeabi_dadd+0x394>
 800189a:	2501      	movs	r5, #1
 800189c:	2a38      	cmp	r2, #56	@ 0x38
 800189e:	dca8      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80018a0:	2180      	movs	r1, #128	@ 0x80
 80018a2:	4653      	mov	r3, sl
 80018a4:	0409      	lsls	r1, r1, #16
 80018a6:	430b      	orrs	r3, r1
 80018a8:	469a      	mov	sl, r3
 80018aa:	e78e      	b.n	80017ca <__aeabi_dadd+0x1e2>
 80018ac:	003c      	movs	r4, r7
 80018ae:	2500      	movs	r5, #0
 80018b0:	2200      	movs	r2, #0
 80018b2:	e731      	b.n	8001718 <__aeabi_dadd+0x130>
 80018b4:	2307      	movs	r3, #7
 80018b6:	402b      	ands	r3, r5
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d000      	beq.n	80018be <__aeabi_dadd+0x2d6>
 80018bc:	e710      	b.n	80016e0 <__aeabi_dadd+0xf8>
 80018be:	e093      	b.n	80019e8 <__aeabi_dadd+0x400>
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	d074      	beq.n	80019ae <__aeabi_dadd+0x3c6>
 80018c4:	464a      	mov	r2, r9
 80018c6:	1bd2      	subs	r2, r2, r7
 80018c8:	2f00      	cmp	r7, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_dadd+0x2e6>
 80018cc:	e0c7      	b.n	8001a5e <__aeabi_dadd+0x476>
 80018ce:	4928      	ldr	r1, [pc, #160]	@ (8001970 <__aeabi_dadd+0x388>)
 80018d0:	4589      	cmp	r9, r1
 80018d2:	d100      	bne.n	80018d6 <__aeabi_dadd+0x2ee>
 80018d4:	e185      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 80018d6:	2501      	movs	r5, #1
 80018d8:	2a38      	cmp	r2, #56	@ 0x38
 80018da:	dc12      	bgt.n	8001902 <__aeabi_dadd+0x31a>
 80018dc:	2180      	movs	r1, #128	@ 0x80
 80018de:	0409      	lsls	r1, r1, #16
 80018e0:	430c      	orrs	r4, r1
 80018e2:	2a1f      	cmp	r2, #31
 80018e4:	dd00      	ble.n	80018e8 <__aeabi_dadd+0x300>
 80018e6:	e1ab      	b.n	8001c40 <__aeabi_dadd+0x658>
 80018e8:	2120      	movs	r1, #32
 80018ea:	0025      	movs	r5, r4
 80018ec:	1a89      	subs	r1, r1, r2
 80018ee:	0007      	movs	r7, r0
 80018f0:	4088      	lsls	r0, r1
 80018f2:	408d      	lsls	r5, r1
 80018f4:	40d7      	lsrs	r7, r2
 80018f6:	1e41      	subs	r1, r0, #1
 80018f8:	4188      	sbcs	r0, r1
 80018fa:	40d4      	lsrs	r4, r2
 80018fc:	433d      	orrs	r5, r7
 80018fe:	4305      	orrs	r5, r0
 8001900:	44a2      	add	sl, r4
 8001902:	4465      	add	r5, ip
 8001904:	4565      	cmp	r5, ip
 8001906:	4192      	sbcs	r2, r2
 8001908:	4252      	negs	r2, r2
 800190a:	4452      	add	r2, sl
 800190c:	0014      	movs	r4, r2
 800190e:	464f      	mov	r7, r9
 8001910:	e774      	b.n	80017fc <__aeabi_dadd+0x214>
 8001912:	0028      	movs	r0, r5
 8001914:	f001 fdf0 	bl	80034f8 <__clzsi2>
 8001918:	0003      	movs	r3, r0
 800191a:	3318      	adds	r3, #24
 800191c:	2b1f      	cmp	r3, #31
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dadd+0x33a>
 8001920:	e6c2      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001922:	002a      	movs	r2, r5
 8001924:	3808      	subs	r0, #8
 8001926:	4082      	lsls	r2, r0
 8001928:	429f      	cmp	r7, r3
 800192a:	dd00      	ble.n	800192e <__aeabi_dadd+0x346>
 800192c:	e0a9      	b.n	8001a82 <__aeabi_dadd+0x49a>
 800192e:	1bdb      	subs	r3, r3, r7
 8001930:	1c58      	adds	r0, r3, #1
 8001932:	281f      	cmp	r0, #31
 8001934:	dc00      	bgt.n	8001938 <__aeabi_dadd+0x350>
 8001936:	e1ac      	b.n	8001c92 <__aeabi_dadd+0x6aa>
 8001938:	0015      	movs	r5, r2
 800193a:	3b1f      	subs	r3, #31
 800193c:	40dd      	lsrs	r5, r3
 800193e:	2820      	cmp	r0, #32
 8001940:	d005      	beq.n	800194e <__aeabi_dadd+0x366>
 8001942:	2340      	movs	r3, #64	@ 0x40
 8001944:	1a1b      	subs	r3, r3, r0
 8001946:	409a      	lsls	r2, r3
 8001948:	1e53      	subs	r3, r2, #1
 800194a:	419a      	sbcs	r2, r3
 800194c:	4315      	orrs	r5, r2
 800194e:	2307      	movs	r3, #7
 8001950:	2700      	movs	r7, #0
 8001952:	402b      	ands	r3, r5
 8001954:	e7b0      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001956:	08ed      	lsrs	r5, r5, #3
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <__aeabi_dadd+0x388>)
 800195a:	0762      	lsls	r2, r4, #29
 800195c:	432a      	orrs	r2, r5
 800195e:	08e4      	lsrs	r4, r4, #3
 8001960:	429f      	cmp	r7, r3
 8001962:	d00f      	beq.n	8001984 <__aeabi_dadd+0x39c>
 8001964:	0324      	lsls	r4, r4, #12
 8001966:	0b25      	lsrs	r5, r4, #12
 8001968:	057c      	lsls	r4, r7, #21
 800196a:	0d64      	lsrs	r4, r4, #21
 800196c:	e6d4      	b.n	8001718 <__aeabi_dadd+0x130>
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	000007ff 	.word	0x000007ff
 8001974:	ff7fffff 	.word	0xff7fffff
 8001978:	000007fe 	.word	0x000007fe
 800197c:	08c0      	lsrs	r0, r0, #3
 800197e:	0762      	lsls	r2, r4, #29
 8001980:	4302      	orrs	r2, r0
 8001982:	08e4      	lsrs	r4, r4, #3
 8001984:	0013      	movs	r3, r2
 8001986:	4323      	orrs	r3, r4
 8001988:	d100      	bne.n	800198c <__aeabi_dadd+0x3a4>
 800198a:	e186      	b.n	8001c9a <__aeabi_dadd+0x6b2>
 800198c:	2580      	movs	r5, #128	@ 0x80
 800198e:	032d      	lsls	r5, r5, #12
 8001990:	4325      	orrs	r5, r4
 8001992:	032d      	lsls	r5, r5, #12
 8001994:	4cc3      	ldr	r4, [pc, #780]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001996:	0b2d      	lsrs	r5, r5, #12
 8001998:	e6be      	b.n	8001718 <__aeabi_dadd+0x130>
 800199a:	4660      	mov	r0, ip
 800199c:	4654      	mov	r4, sl
 800199e:	000e      	movs	r6, r1
 80019a0:	0017      	movs	r7, r2
 80019a2:	08c5      	lsrs	r5, r0, #3
 80019a4:	e7d8      	b.n	8001958 <__aeabi_dadd+0x370>
 80019a6:	4cc0      	ldr	r4, [pc, #768]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019a8:	1aff      	subs	r7, r7, r3
 80019aa:	4014      	ands	r4, r2
 80019ac:	e696      	b.n	80016dc <__aeabi_dadd+0xf4>
 80019ae:	4abf      	ldr	r2, [pc, #764]	@ (8001cac <__aeabi_dadd+0x6c4>)
 80019b0:	1c79      	adds	r1, r7, #1
 80019b2:	4211      	tst	r1, r2
 80019b4:	d16b      	bne.n	8001a8e <__aeabi_dadd+0x4a6>
 80019b6:	0022      	movs	r2, r4
 80019b8:	4302      	orrs	r2, r0
 80019ba:	2f00      	cmp	r7, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dadd+0x3d8>
 80019be:	e0db      	b.n	8001b78 <__aeabi_dadd+0x590>
 80019c0:	2a00      	cmp	r2, #0
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dadd+0x3de>
 80019c4:	e12d      	b.n	8001c22 <__aeabi_dadd+0x63a>
 80019c6:	4662      	mov	r2, ip
 80019c8:	4653      	mov	r3, sl
 80019ca:	431a      	orrs	r2, r3
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dadd+0x3e8>
 80019ce:	e0b6      	b.n	8001b3e <__aeabi_dadd+0x556>
 80019d0:	4663      	mov	r3, ip
 80019d2:	18c5      	adds	r5, r0, r3
 80019d4:	4285      	cmp	r5, r0
 80019d6:	4180      	sbcs	r0, r0
 80019d8:	4454      	add	r4, sl
 80019da:	4240      	negs	r0, r0
 80019dc:	1824      	adds	r4, r4, r0
 80019de:	0223      	lsls	r3, r4, #8
 80019e0:	d502      	bpl.n	80019e8 <__aeabi_dadd+0x400>
 80019e2:	000f      	movs	r7, r1
 80019e4:	4bb0      	ldr	r3, [pc, #704]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019e6:	401c      	ands	r4, r3
 80019e8:	003a      	movs	r2, r7
 80019ea:	0028      	movs	r0, r5
 80019ec:	e7d8      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80019ee:	4662      	mov	r2, ip
 80019f0:	1a85      	subs	r5, r0, r2
 80019f2:	42a8      	cmp	r0, r5
 80019f4:	4192      	sbcs	r2, r2
 80019f6:	4653      	mov	r3, sl
 80019f8:	4252      	negs	r2, r2
 80019fa:	4691      	mov	r9, r2
 80019fc:	1ae3      	subs	r3, r4, r3
 80019fe:	001a      	movs	r2, r3
 8001a00:	464b      	mov	r3, r9
 8001a02:	1ad2      	subs	r2, r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	4691      	mov	r9, r2
 8001a08:	021a      	lsls	r2, r3, #8
 8001a0a:	d454      	bmi.n	8001ab6 <__aeabi_dadd+0x4ce>
 8001a0c:	464a      	mov	r2, r9
 8001a0e:	464c      	mov	r4, r9
 8001a10:	432a      	orrs	r2, r5
 8001a12:	d000      	beq.n	8001a16 <__aeabi_dadd+0x42e>
 8001a14:	e640      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001a16:	2600      	movs	r6, #0
 8001a18:	2400      	movs	r4, #0
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	e67c      	b.n	8001718 <__aeabi_dadd+0x130>
 8001a1e:	4da1      	ldr	r5, [pc, #644]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a20:	45a9      	cmp	r9, r5
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dadd+0x43e>
 8001a24:	e090      	b.n	8001b48 <__aeabi_dadd+0x560>
 8001a26:	2501      	movs	r5, #1
 8001a28:	2a38      	cmp	r2, #56	@ 0x38
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dadd+0x446>
 8001a2c:	e6ab      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001a2e:	2580      	movs	r5, #128	@ 0x80
 8001a30:	042d      	lsls	r5, r5, #16
 8001a32:	432c      	orrs	r4, r5
 8001a34:	e695      	b.n	8001762 <__aeabi_dadd+0x17a>
 8001a36:	0011      	movs	r1, r2
 8001a38:	4655      	mov	r5, sl
 8001a3a:	3920      	subs	r1, #32
 8001a3c:	40cd      	lsrs	r5, r1
 8001a3e:	46a9      	mov	r9, r5
 8001a40:	2a20      	cmp	r2, #32
 8001a42:	d006      	beq.n	8001a52 <__aeabi_dadd+0x46a>
 8001a44:	2140      	movs	r1, #64	@ 0x40
 8001a46:	4653      	mov	r3, sl
 8001a48:	1a8a      	subs	r2, r1, r2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	4662      	mov	r2, ip
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	4694      	mov	ip, r2
 8001a52:	4665      	mov	r5, ip
 8001a54:	1e6b      	subs	r3, r5, #1
 8001a56:	419d      	sbcs	r5, r3
 8001a58:	464b      	mov	r3, r9
 8001a5a:	431d      	orrs	r5, r3
 8001a5c:	e612      	b.n	8001684 <__aeabi_dadd+0x9c>
 8001a5e:	0021      	movs	r1, r4
 8001a60:	4301      	orrs	r1, r0
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dadd+0x47e>
 8001a64:	e0c4      	b.n	8001bf0 <__aeabi_dadd+0x608>
 8001a66:	1e51      	subs	r1, r2, #1
 8001a68:	2a01      	cmp	r2, #1
 8001a6a:	d100      	bne.n	8001a6e <__aeabi_dadd+0x486>
 8001a6c:	e0fb      	b.n	8001c66 <__aeabi_dadd+0x67e>
 8001a6e:	4d8d      	ldr	r5, [pc, #564]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a70:	42aa      	cmp	r2, r5
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dadd+0x48e>
 8001a74:	e0b5      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 8001a76:	2501      	movs	r5, #1
 8001a78:	2938      	cmp	r1, #56	@ 0x38
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_dadd+0x496>
 8001a7c:	e741      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001a7e:	000a      	movs	r2, r1
 8001a80:	e72f      	b.n	80018e2 <__aeabi_dadd+0x2fa>
 8001a82:	4c89      	ldr	r4, [pc, #548]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 8001a84:	1aff      	subs	r7, r7, r3
 8001a86:	4014      	ands	r4, r2
 8001a88:	0762      	lsls	r2, r4, #29
 8001a8a:	08e4      	lsrs	r4, r4, #3
 8001a8c:	e76a      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001a8e:	4a85      	ldr	r2, [pc, #532]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a90:	4291      	cmp	r1, r2
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dadd+0x4ae>
 8001a94:	e0e3      	b.n	8001c5e <__aeabi_dadd+0x676>
 8001a96:	4663      	mov	r3, ip
 8001a98:	18c2      	adds	r2, r0, r3
 8001a9a:	4282      	cmp	r2, r0
 8001a9c:	4180      	sbcs	r0, r0
 8001a9e:	0023      	movs	r3, r4
 8001aa0:	4240      	negs	r0, r0
 8001aa2:	4453      	add	r3, sl
 8001aa4:	181b      	adds	r3, r3, r0
 8001aa6:	07dd      	lsls	r5, r3, #31
 8001aa8:	085c      	lsrs	r4, r3, #1
 8001aaa:	2307      	movs	r3, #7
 8001aac:	0852      	lsrs	r2, r2, #1
 8001aae:	4315      	orrs	r5, r2
 8001ab0:	000f      	movs	r7, r1
 8001ab2:	402b      	ands	r3, r5
 8001ab4:	e700      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001ab6:	4663      	mov	r3, ip
 8001ab8:	1a1d      	subs	r5, r3, r0
 8001aba:	45ac      	cmp	ip, r5
 8001abc:	4192      	sbcs	r2, r2
 8001abe:	4653      	mov	r3, sl
 8001ac0:	4252      	negs	r2, r2
 8001ac2:	1b1c      	subs	r4, r3, r4
 8001ac4:	000e      	movs	r6, r1
 8001ac6:	4688      	mov	r8, r1
 8001ac8:	1aa4      	subs	r4, r4, r2
 8001aca:	e5e5      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001acc:	2d00      	cmp	r5, #0
 8001ace:	d000      	beq.n	8001ad2 <__aeabi_dadd+0x4ea>
 8001ad0:	e091      	b.n	8001bf6 <__aeabi_dadd+0x60e>
 8001ad2:	2a00      	cmp	r2, #0
 8001ad4:	d138      	bne.n	8001b48 <__aeabi_dadd+0x560>
 8001ad6:	2480      	movs	r4, #128	@ 0x80
 8001ad8:	2600      	movs	r6, #0
 8001ada:	0324      	lsls	r4, r4, #12
 8001adc:	e756      	b.n	800198c <__aeabi_dadd+0x3a4>
 8001ade:	4663      	mov	r3, ip
 8001ae0:	18c5      	adds	r5, r0, r3
 8001ae2:	4285      	cmp	r5, r0
 8001ae4:	4180      	sbcs	r0, r0
 8001ae6:	4454      	add	r4, sl
 8001ae8:	4240      	negs	r0, r0
 8001aea:	1824      	adds	r4, r4, r0
 8001aec:	2701      	movs	r7, #1
 8001aee:	0223      	lsls	r3, r4, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dadd+0x50c>
 8001af2:	e6df      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001af4:	2702      	movs	r7, #2
 8001af6:	e687      	b.n	8001808 <__aeabi_dadd+0x220>
 8001af8:	4663      	mov	r3, ip
 8001afa:	1ac5      	subs	r5, r0, r3
 8001afc:	42a8      	cmp	r0, r5
 8001afe:	4180      	sbcs	r0, r0
 8001b00:	4653      	mov	r3, sl
 8001b02:	4240      	negs	r0, r0
 8001b04:	1ae4      	subs	r4, r4, r3
 8001b06:	2701      	movs	r7, #1
 8001b08:	1a24      	subs	r4, r4, r0
 8001b0a:	e5c0      	b.n	800168e <__aeabi_dadd+0xa6>
 8001b0c:	0762      	lsls	r2, r4, #29
 8001b0e:	08c0      	lsrs	r0, r0, #3
 8001b10:	4302      	orrs	r2, r0
 8001b12:	08e4      	lsrs	r4, r4, #3
 8001b14:	e736      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b16:	0011      	movs	r1, r2
 8001b18:	4653      	mov	r3, sl
 8001b1a:	3920      	subs	r1, #32
 8001b1c:	40cb      	lsrs	r3, r1
 8001b1e:	4699      	mov	r9, r3
 8001b20:	2a20      	cmp	r2, #32
 8001b22:	d006      	beq.n	8001b32 <__aeabi_dadd+0x54a>
 8001b24:	2140      	movs	r1, #64	@ 0x40
 8001b26:	4653      	mov	r3, sl
 8001b28:	1a8a      	subs	r2, r1, r2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	4662      	mov	r2, ip
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	4694      	mov	ip, r2
 8001b32:	4665      	mov	r5, ip
 8001b34:	1e6b      	subs	r3, r5, #1
 8001b36:	419d      	sbcs	r5, r3
 8001b38:	464b      	mov	r3, r9
 8001b3a:	431d      	orrs	r5, r3
 8001b3c:	e659      	b.n	80017f2 <__aeabi_dadd+0x20a>
 8001b3e:	0762      	lsls	r2, r4, #29
 8001b40:	08c0      	lsrs	r0, r0, #3
 8001b42:	4302      	orrs	r2, r0
 8001b44:	08e4      	lsrs	r4, r4, #3
 8001b46:	e70d      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001b48:	4653      	mov	r3, sl
 8001b4a:	075a      	lsls	r2, r3, #29
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	08d8      	lsrs	r0, r3, #3
 8001b50:	4653      	mov	r3, sl
 8001b52:	000e      	movs	r6, r1
 8001b54:	4302      	orrs	r2, r0
 8001b56:	08dc      	lsrs	r4, r3, #3
 8001b58:	e714      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b5a:	0015      	movs	r5, r2
 8001b5c:	0026      	movs	r6, r4
 8001b5e:	3d20      	subs	r5, #32
 8001b60:	40ee      	lsrs	r6, r5
 8001b62:	2a20      	cmp	r2, #32
 8001b64:	d003      	beq.n	8001b6e <__aeabi_dadd+0x586>
 8001b66:	2540      	movs	r5, #64	@ 0x40
 8001b68:	1aaa      	subs	r2, r5, r2
 8001b6a:	4094      	lsls	r4, r2
 8001b6c:	4320      	orrs	r0, r4
 8001b6e:	1e42      	subs	r2, r0, #1
 8001b70:	4190      	sbcs	r0, r2
 8001b72:	0005      	movs	r5, r0
 8001b74:	4335      	orrs	r5, r6
 8001b76:	e606      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d07c      	beq.n	8001c76 <__aeabi_dadd+0x68e>
 8001b7c:	4662      	mov	r2, ip
 8001b7e:	4653      	mov	r3, sl
 8001b80:	08c0      	lsrs	r0, r0, #3
 8001b82:	431a      	orrs	r2, r3
 8001b84:	d100      	bne.n	8001b88 <__aeabi_dadd+0x5a0>
 8001b86:	e6fa      	b.n	800197e <__aeabi_dadd+0x396>
 8001b88:	0762      	lsls	r2, r4, #29
 8001b8a:	4310      	orrs	r0, r2
 8001b8c:	2280      	movs	r2, #128	@ 0x80
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	0312      	lsls	r2, r2, #12
 8001b92:	4214      	tst	r4, r2
 8001b94:	d008      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b96:	08d9      	lsrs	r1, r3, #3
 8001b98:	4211      	tst	r1, r2
 8001b9a:	d105      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	08d8      	lsrs	r0, r3, #3
 8001ba0:	4653      	mov	r3, sl
 8001ba2:	000c      	movs	r4, r1
 8001ba4:	075b      	lsls	r3, r3, #29
 8001ba6:	4318      	orrs	r0, r3
 8001ba8:	0f42      	lsrs	r2, r0, #29
 8001baa:	00c0      	lsls	r0, r0, #3
 8001bac:	08c0      	lsrs	r0, r0, #3
 8001bae:	0752      	lsls	r2, r2, #29
 8001bb0:	4302      	orrs	r2, r0
 8001bb2:	e6e7      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dadd+0x5d2>
 8001bb8:	e72d      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	08d8      	lsrs	r0, r3, #3
 8001bbe:	4653      	mov	r3, sl
 8001bc0:	075a      	lsls	r2, r3, #29
 8001bc2:	000e      	movs	r6, r1
 8001bc4:	4302      	orrs	r2, r0
 8001bc6:	08dc      	lsrs	r4, r3, #3
 8001bc8:	e6cc      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001bca:	4663      	mov	r3, ip
 8001bcc:	1a1d      	subs	r5, r3, r0
 8001bce:	45ac      	cmp	ip, r5
 8001bd0:	4192      	sbcs	r2, r2
 8001bd2:	4653      	mov	r3, sl
 8001bd4:	4252      	negs	r2, r2
 8001bd6:	1b1c      	subs	r4, r3, r4
 8001bd8:	000e      	movs	r6, r1
 8001bda:	4688      	mov	r8, r1
 8001bdc:	1aa4      	subs	r4, r4, r2
 8001bde:	3701      	adds	r7, #1
 8001be0:	e555      	b.n	800168e <__aeabi_dadd+0xa6>
 8001be2:	4663      	mov	r3, ip
 8001be4:	08d9      	lsrs	r1, r3, #3
 8001be6:	4653      	mov	r3, sl
 8001be8:	075a      	lsls	r2, r3, #29
 8001bea:	430a      	orrs	r2, r1
 8001bec:	08dc      	lsrs	r4, r3, #3
 8001bee:	e6c9      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bf0:	4660      	mov	r0, ip
 8001bf2:	4654      	mov	r4, sl
 8001bf4:	e6d4      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001bf6:	08c0      	lsrs	r0, r0, #3
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dadd+0x616>
 8001bfc:	e6bf      	b.n	800197e <__aeabi_dadd+0x396>
 8001bfe:	0762      	lsls	r2, r4, #29
 8001c00:	4310      	orrs	r0, r2
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	08e4      	lsrs	r4, r4, #3
 8001c06:	0312      	lsls	r2, r2, #12
 8001c08:	4214      	tst	r4, r2
 8001c0a:	d0cd      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c0c:	08dd      	lsrs	r5, r3, #3
 8001c0e:	4215      	tst	r5, r2
 8001c10:	d1ca      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c12:	4663      	mov	r3, ip
 8001c14:	08d8      	lsrs	r0, r3, #3
 8001c16:	4653      	mov	r3, sl
 8001c18:	075b      	lsls	r3, r3, #29
 8001c1a:	000e      	movs	r6, r1
 8001c1c:	002c      	movs	r4, r5
 8001c1e:	4318      	orrs	r0, r3
 8001c20:	e7c2      	b.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c22:	4663      	mov	r3, ip
 8001c24:	08d9      	lsrs	r1, r3, #3
 8001c26:	4653      	mov	r3, sl
 8001c28:	075a      	lsls	r2, r3, #29
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	08dc      	lsrs	r4, r3, #3
 8001c2e:	e699      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001c30:	4663      	mov	r3, ip
 8001c32:	08d8      	lsrs	r0, r3, #3
 8001c34:	4653      	mov	r3, sl
 8001c36:	075a      	lsls	r2, r3, #29
 8001c38:	000e      	movs	r6, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	08dc      	lsrs	r4, r3, #3
 8001c3e:	e6a1      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c40:	0011      	movs	r1, r2
 8001c42:	0027      	movs	r7, r4
 8001c44:	3920      	subs	r1, #32
 8001c46:	40cf      	lsrs	r7, r1
 8001c48:	2a20      	cmp	r2, #32
 8001c4a:	d003      	beq.n	8001c54 <__aeabi_dadd+0x66c>
 8001c4c:	2140      	movs	r1, #64	@ 0x40
 8001c4e:	1a8a      	subs	r2, r1, r2
 8001c50:	4094      	lsls	r4, r2
 8001c52:	4320      	orrs	r0, r4
 8001c54:	1e42      	subs	r2, r0, #1
 8001c56:	4190      	sbcs	r0, r2
 8001c58:	0005      	movs	r5, r0
 8001c5a:	433d      	orrs	r5, r7
 8001c5c:	e651      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001c5e:	000c      	movs	r4, r1
 8001c60:	2500      	movs	r5, #0
 8001c62:	2200      	movs	r2, #0
 8001c64:	e558      	b.n	8001718 <__aeabi_dadd+0x130>
 8001c66:	4460      	add	r0, ip
 8001c68:	4560      	cmp	r0, ip
 8001c6a:	4192      	sbcs	r2, r2
 8001c6c:	4454      	add	r4, sl
 8001c6e:	4252      	negs	r2, r2
 8001c70:	0005      	movs	r5, r0
 8001c72:	18a4      	adds	r4, r4, r2
 8001c74:	e73a      	b.n	8001aec <__aeabi_dadd+0x504>
 8001c76:	4653      	mov	r3, sl
 8001c78:	075a      	lsls	r2, r3, #29
 8001c7a:	4663      	mov	r3, ip
 8001c7c:	08d9      	lsrs	r1, r3, #3
 8001c7e:	4653      	mov	r3, sl
 8001c80:	430a      	orrs	r2, r1
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	e67e      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c86:	001a      	movs	r2, r3
 8001c88:	001c      	movs	r4, r3
 8001c8a:	432a      	orrs	r2, r5
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dadd+0x6a8>
 8001c8e:	e6ab      	b.n	80019e8 <__aeabi_dadd+0x400>
 8001c90:	e6c1      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001c92:	2120      	movs	r1, #32
 8001c94:	2500      	movs	r5, #0
 8001c96:	1a09      	subs	r1, r1, r0
 8001c98:	e519      	b.n	80016ce <__aeabi_dadd+0xe6>
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2500      	movs	r5, #0
 8001c9e:	4c01      	ldr	r4, [pc, #4]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001ca0:	e53a      	b.n	8001718 <__aeabi_dadd+0x130>
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	000007ff 	.word	0x000007ff
 8001ca8:	ff7fffff 	.word	0xff7fffff
 8001cac:	000007fe 	.word	0x000007fe

08001cb0 <__aeabi_ddiv>:
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	46de      	mov	lr, fp
 8001cb4:	4645      	mov	r5, r8
 8001cb6:	4657      	mov	r7, sl
 8001cb8:	464e      	mov	r6, r9
 8001cba:	b5e0      	push	{r5, r6, r7, lr}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	9200      	str	r2, [sp, #0]
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	030b      	lsls	r3, r1, #12
 8001cc4:	0b1b      	lsrs	r3, r3, #12
 8001cc6:	469b      	mov	fp, r3
 8001cc8:	0fca      	lsrs	r2, r1, #31
 8001cca:	004b      	lsls	r3, r1, #1
 8001ccc:	0004      	movs	r4, r0
 8001cce:	4680      	mov	r8, r0
 8001cd0:	0d5b      	lsrs	r3, r3, #21
 8001cd2:	9202      	str	r2, [sp, #8]
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_ddiv+0x28>
 8001cd6:	e16a      	b.n	8001fae <__aeabi_ddiv+0x2fe>
 8001cd8:	4ad4      	ldr	r2, [pc, #848]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_ddiv+0x30>
 8001cde:	e18c      	b.n	8001ffa <__aeabi_ddiv+0x34a>
 8001ce0:	4659      	mov	r1, fp
 8001ce2:	0f42      	lsrs	r2, r0, #29
 8001ce4:	00c9      	lsls	r1, r1, #3
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	2180      	movs	r1, #128	@ 0x80
 8001cea:	0409      	lsls	r1, r1, #16
 8001cec:	4311      	orrs	r1, r2
 8001cee:	00c2      	lsls	r2, r0, #3
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4acf      	ldr	r2, [pc, #828]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001cf4:	4689      	mov	r9, r1
 8001cf6:	4692      	mov	sl, r2
 8001cf8:	449a      	add	sl, r3
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2400      	movs	r4, #0
 8001cfe:	9303      	str	r3, [sp, #12]
 8001d00:	9e00      	ldr	r6, [sp, #0]
 8001d02:	9f01      	ldr	r7, [sp, #4]
 8001d04:	033b      	lsls	r3, r7, #12
 8001d06:	0b1b      	lsrs	r3, r3, #12
 8001d08:	469b      	mov	fp, r3
 8001d0a:	007b      	lsls	r3, r7, #1
 8001d0c:	0030      	movs	r0, r6
 8001d0e:	0d5b      	lsrs	r3, r3, #21
 8001d10:	0ffd      	lsrs	r5, r7, #31
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d100      	bne.n	8001d18 <__aeabi_ddiv+0x68>
 8001d16:	e128      	b.n	8001f6a <__aeabi_ddiv+0x2ba>
 8001d18:	4ac4      	ldr	r2, [pc, #784]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_ddiv+0x70>
 8001d1e:	e177      	b.n	8002010 <__aeabi_ddiv+0x360>
 8001d20:	4659      	mov	r1, fp
 8001d22:	0f72      	lsrs	r2, r6, #29
 8001d24:	00c9      	lsls	r1, r1, #3
 8001d26:	430a      	orrs	r2, r1
 8001d28:	2180      	movs	r1, #128	@ 0x80
 8001d2a:	0409      	lsls	r1, r1, #16
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	468b      	mov	fp, r1
 8001d30:	49bf      	ldr	r1, [pc, #764]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001d32:	00f2      	lsls	r2, r6, #3
 8001d34:	468c      	mov	ip, r1
 8001d36:	4651      	mov	r1, sl
 8001d38:	4463      	add	r3, ip
 8001d3a:	1acb      	subs	r3, r1, r3
 8001d3c:	469a      	mov	sl, r3
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9e02      	ldr	r6, [sp, #8]
 8001d42:	406e      	eors	r6, r5
 8001d44:	2c0f      	cmp	r4, #15
 8001d46:	d827      	bhi.n	8001d98 <__aeabi_ddiv+0xe8>
 8001d48:	49ba      	ldr	r1, [pc, #744]	@ (8002034 <__aeabi_ddiv+0x384>)
 8001d4a:	00a4      	lsls	r4, r4, #2
 8001d4c:	5909      	ldr	r1, [r1, r4]
 8001d4e:	468f      	mov	pc, r1
 8001d50:	46cb      	mov	fp, r9
 8001d52:	4642      	mov	r2, r8
 8001d54:	9e02      	ldr	r6, [sp, #8]
 8001d56:	9b03      	ldr	r3, [sp, #12]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d016      	beq.n	8001d8a <__aeabi_ddiv+0xda>
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0xb2>
 8001d60:	e2a6      	b.n	80022b0 <__aeabi_ddiv+0x600>
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d000      	beq.n	8001d68 <__aeabi_ddiv+0xb8>
 8001d66:	e0df      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	4690      	mov	r8, r2
 8001d70:	051b      	lsls	r3, r3, #20
 8001d72:	4323      	orrs	r3, r4
 8001d74:	07f6      	lsls	r6, r6, #31
 8001d76:	4333      	orrs	r3, r6
 8001d78:	4640      	mov	r0, r8
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	b007      	add	sp, #28
 8001d7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d80:	46bb      	mov	fp, r7
 8001d82:	46b2      	mov	sl, r6
 8001d84:	46a9      	mov	r9, r5
 8001d86:	46a0      	mov	r8, r4
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2400      	movs	r4, #0
 8001d8e:	4690      	mov	r8, r2
 8001d90:	4ba6      	ldr	r3, [pc, #664]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d92:	e7ed      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001d94:	002e      	movs	r6, r5
 8001d96:	e7df      	b.n	8001d58 <__aeabi_ddiv+0xa8>
 8001d98:	45cb      	cmp	fp, r9
 8001d9a:	d200      	bcs.n	8001d9e <__aeabi_ddiv+0xee>
 8001d9c:	e1d4      	b.n	8002148 <__aeabi_ddiv+0x498>
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_ddiv+0xf2>
 8001da0:	e1cf      	b.n	8002142 <__aeabi_ddiv+0x492>
 8001da2:	2301      	movs	r3, #1
 8001da4:	425b      	negs	r3, r3
 8001da6:	469c      	mov	ip, r3
 8001da8:	4644      	mov	r4, r8
 8001daa:	4648      	mov	r0, r9
 8001dac:	2700      	movs	r7, #0
 8001dae:	44e2      	add	sl, ip
 8001db0:	465b      	mov	r3, fp
 8001db2:	0e15      	lsrs	r5, r2, #24
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	431d      	orrs	r5, r3
 8001db8:	0c19      	lsrs	r1, r3, #16
 8001dba:	042b      	lsls	r3, r5, #16
 8001dbc:	0212      	lsls	r2, r2, #8
 8001dbe:	9500      	str	r5, [sp, #0]
 8001dc0:	0c1d      	lsrs	r5, r3, #16
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9102      	str	r1, [sp, #8]
 8001dc6:	9503      	str	r5, [sp, #12]
 8001dc8:	f7fe fa40 	bl	800024c <__aeabi_uidivmod>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	436a      	muls	r2, r5
 8001dd0:	040b      	lsls	r3, r1, #16
 8001dd2:	0c21      	lsrs	r1, r4, #16
 8001dd4:	4680      	mov	r8, r0
 8001dd6:	4319      	orrs	r1, r3
 8001dd8:	428a      	cmp	r2, r1
 8001dda:	d909      	bls.n	8001df0 <__aeabi_ddiv+0x140>
 8001ddc:	9d00      	ldr	r5, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	46ac      	mov	ip, r5
 8001de2:	425b      	negs	r3, r3
 8001de4:	4461      	add	r1, ip
 8001de6:	469c      	mov	ip, r3
 8001de8:	44e0      	add	r8, ip
 8001dea:	428d      	cmp	r5, r1
 8001dec:	d800      	bhi.n	8001df0 <__aeabi_ddiv+0x140>
 8001dee:	e1fb      	b.n	80021e8 <__aeabi_ddiv+0x538>
 8001df0:	1a88      	subs	r0, r1, r2
 8001df2:	9902      	ldr	r1, [sp, #8]
 8001df4:	f7fe fa2a 	bl	800024c <__aeabi_uidivmod>
 8001df8:	9a03      	ldr	r2, [sp, #12]
 8001dfa:	0424      	lsls	r4, r4, #16
 8001dfc:	4342      	muls	r2, r0
 8001dfe:	0409      	lsls	r1, r1, #16
 8001e00:	0c24      	lsrs	r4, r4, #16
 8001e02:	0003      	movs	r3, r0
 8001e04:	430c      	orrs	r4, r1
 8001e06:	42a2      	cmp	r2, r4
 8001e08:	d906      	bls.n	8001e18 <__aeabi_ddiv+0x168>
 8001e0a:	9900      	ldr	r1, [sp, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	468c      	mov	ip, r1
 8001e10:	4464      	add	r4, ip
 8001e12:	42a1      	cmp	r1, r4
 8001e14:	d800      	bhi.n	8001e18 <__aeabi_ddiv+0x168>
 8001e16:	e1e1      	b.n	80021dc <__aeabi_ddiv+0x52c>
 8001e18:	1aa0      	subs	r0, r4, r2
 8001e1a:	4642      	mov	r2, r8
 8001e1c:	0412      	lsls	r2, r2, #16
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	4693      	mov	fp, r2
 8001e22:	464b      	mov	r3, r9
 8001e24:	4659      	mov	r1, fp
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	001d      	movs	r5, r3
 8001e2a:	9304      	str	r3, [sp, #16]
 8001e2c:	040b      	lsls	r3, r1, #16
 8001e2e:	4649      	mov	r1, r9
 8001e30:	0409      	lsls	r1, r1, #16
 8001e32:	0c09      	lsrs	r1, r1, #16
 8001e34:	000c      	movs	r4, r1
 8001e36:	0c1b      	lsrs	r3, r3, #16
 8001e38:	435c      	muls	r4, r3
 8001e3a:	0c12      	lsrs	r2, r2, #16
 8001e3c:	436b      	muls	r3, r5
 8001e3e:	4688      	mov	r8, r1
 8001e40:	4351      	muls	r1, r2
 8001e42:	436a      	muls	r2, r5
 8001e44:	0c25      	lsrs	r5, r4, #16
 8001e46:	46ac      	mov	ip, r5
 8001e48:	185b      	adds	r3, r3, r1
 8001e4a:	4463      	add	r3, ip
 8001e4c:	4299      	cmp	r1, r3
 8001e4e:	d903      	bls.n	8001e58 <__aeabi_ddiv+0x1a8>
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	0249      	lsls	r1, r1, #9
 8001e54:	468c      	mov	ip, r1
 8001e56:	4462      	add	r2, ip
 8001e58:	0c19      	lsrs	r1, r3, #16
 8001e5a:	0424      	lsls	r4, r4, #16
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	0c24      	lsrs	r4, r4, #16
 8001e60:	188a      	adds	r2, r1, r2
 8001e62:	191c      	adds	r4, r3, r4
 8001e64:	4290      	cmp	r0, r2
 8001e66:	d302      	bcc.n	8001e6e <__aeabi_ddiv+0x1be>
 8001e68:	d116      	bne.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6a:	42a7      	cmp	r7, r4
 8001e6c:	d214      	bcs.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6e:	465b      	mov	r3, fp
 8001e70:	9d00      	ldr	r5, [sp, #0]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	444f      	add	r7, r9
 8001e76:	9305      	str	r3, [sp, #20]
 8001e78:	454f      	cmp	r7, r9
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	46ac      	mov	ip, r5
 8001e7e:	425b      	negs	r3, r3
 8001e80:	4463      	add	r3, ip
 8001e82:	18c0      	adds	r0, r0, r3
 8001e84:	4285      	cmp	r5, r0
 8001e86:	d300      	bcc.n	8001e8a <__aeabi_ddiv+0x1da>
 8001e88:	e1a1      	b.n	80021ce <__aeabi_ddiv+0x51e>
 8001e8a:	4282      	cmp	r2, r0
 8001e8c:	d900      	bls.n	8001e90 <__aeabi_ddiv+0x1e0>
 8001e8e:	e1f6      	b.n	800227e <__aeabi_ddiv+0x5ce>
 8001e90:	d100      	bne.n	8001e94 <__aeabi_ddiv+0x1e4>
 8001e92:	e1f1      	b.n	8002278 <__aeabi_ddiv+0x5c8>
 8001e94:	9b05      	ldr	r3, [sp, #20]
 8001e96:	469b      	mov	fp, r3
 8001e98:	1b3c      	subs	r4, r7, r4
 8001e9a:	42a7      	cmp	r7, r4
 8001e9c:	41bf      	sbcs	r7, r7
 8001e9e:	9d00      	ldr	r5, [sp, #0]
 8001ea0:	1a80      	subs	r0, r0, r2
 8001ea2:	427f      	negs	r7, r7
 8001ea4:	1bc0      	subs	r0, r0, r7
 8001ea6:	4285      	cmp	r5, r0
 8001ea8:	d100      	bne.n	8001eac <__aeabi_ddiv+0x1fc>
 8001eaa:	e1d0      	b.n	800224e <__aeabi_ddiv+0x59e>
 8001eac:	9902      	ldr	r1, [sp, #8]
 8001eae:	f7fe f9cd 	bl	800024c <__aeabi_uidivmod>
 8001eb2:	9a03      	ldr	r2, [sp, #12]
 8001eb4:	040b      	lsls	r3, r1, #16
 8001eb6:	4342      	muls	r2, r0
 8001eb8:	0c21      	lsrs	r1, r4, #16
 8001eba:	0007      	movs	r7, r0
 8001ebc:	4319      	orrs	r1, r3
 8001ebe:	428a      	cmp	r2, r1
 8001ec0:	d900      	bls.n	8001ec4 <__aeabi_ddiv+0x214>
 8001ec2:	e178      	b.n	80021b6 <__aeabi_ddiv+0x506>
 8001ec4:	1a88      	subs	r0, r1, r2
 8001ec6:	9902      	ldr	r1, [sp, #8]
 8001ec8:	f7fe f9c0 	bl	800024c <__aeabi_uidivmod>
 8001ecc:	9a03      	ldr	r2, [sp, #12]
 8001ece:	0424      	lsls	r4, r4, #16
 8001ed0:	4342      	muls	r2, r0
 8001ed2:	0409      	lsls	r1, r1, #16
 8001ed4:	0c24      	lsrs	r4, r4, #16
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	430c      	orrs	r4, r1
 8001eda:	42a2      	cmp	r2, r4
 8001edc:	d900      	bls.n	8001ee0 <__aeabi_ddiv+0x230>
 8001ede:	e15d      	b.n	800219c <__aeabi_ddiv+0x4ec>
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	1aa4      	subs	r4, r4, r2
 8001ee4:	043a      	lsls	r2, r7, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	9d04      	ldr	r5, [sp, #16]
 8001eea:	0413      	lsls	r3, r2, #16
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	4359      	muls	r1, r3
 8001ef0:	4647      	mov	r7, r8
 8001ef2:	436b      	muls	r3, r5
 8001ef4:	469c      	mov	ip, r3
 8001ef6:	0c10      	lsrs	r0, r2, #16
 8001ef8:	4347      	muls	r7, r0
 8001efa:	0c0b      	lsrs	r3, r1, #16
 8001efc:	44bc      	add	ip, r7
 8001efe:	4463      	add	r3, ip
 8001f00:	4368      	muls	r0, r5
 8001f02:	429f      	cmp	r7, r3
 8001f04:	d903      	bls.n	8001f0e <__aeabi_ddiv+0x25e>
 8001f06:	2580      	movs	r5, #128	@ 0x80
 8001f08:	026d      	lsls	r5, r5, #9
 8001f0a:	46ac      	mov	ip, r5
 8001f0c:	4460      	add	r0, ip
 8001f0e:	0c1f      	lsrs	r7, r3, #16
 8001f10:	0409      	lsls	r1, r1, #16
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	0c09      	lsrs	r1, r1, #16
 8001f16:	183f      	adds	r7, r7, r0
 8001f18:	185b      	adds	r3, r3, r1
 8001f1a:	42bc      	cmp	r4, r7
 8001f1c:	d200      	bcs.n	8001f20 <__aeabi_ddiv+0x270>
 8001f1e:	e102      	b.n	8002126 <__aeabi_ddiv+0x476>
 8001f20:	d100      	bne.n	8001f24 <__aeabi_ddiv+0x274>
 8001f22:	e0fd      	b.n	8002120 <__aeabi_ddiv+0x470>
 8001f24:	2301      	movs	r3, #1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	4b43      	ldr	r3, [pc, #268]	@ (8002038 <__aeabi_ddiv+0x388>)
 8001f2a:	4453      	add	r3, sl
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	dc00      	bgt.n	8001f32 <__aeabi_ddiv+0x282>
 8001f30:	e0ae      	b.n	8002090 <__aeabi_ddiv+0x3e0>
 8001f32:	0751      	lsls	r1, r2, #29
 8001f34:	d000      	beq.n	8001f38 <__aeabi_ddiv+0x288>
 8001f36:	e198      	b.n	800226a <__aeabi_ddiv+0x5ba>
 8001f38:	4659      	mov	r1, fp
 8001f3a:	01c9      	lsls	r1, r1, #7
 8001f3c:	d506      	bpl.n	8001f4c <__aeabi_ddiv+0x29c>
 8001f3e:	4659      	mov	r1, fp
 8001f40:	4b3e      	ldr	r3, [pc, #248]	@ (800203c <__aeabi_ddiv+0x38c>)
 8001f42:	4019      	ands	r1, r3
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	468b      	mov	fp, r1
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4453      	add	r3, sl
 8001f4c:	493c      	ldr	r1, [pc, #240]	@ (8002040 <__aeabi_ddiv+0x390>)
 8001f4e:	428b      	cmp	r3, r1
 8001f50:	dd00      	ble.n	8001f54 <__aeabi_ddiv+0x2a4>
 8001f52:	e71a      	b.n	8001d8a <__aeabi_ddiv+0xda>
 8001f54:	4659      	mov	r1, fp
 8001f56:	08d2      	lsrs	r2, r2, #3
 8001f58:	0749      	lsls	r1, r1, #29
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	465a      	mov	r2, fp
 8001f5e:	055b      	lsls	r3, r3, #21
 8001f60:	0254      	lsls	r4, r2, #9
 8001f62:	4688      	mov	r8, r1
 8001f64:	0b24      	lsrs	r4, r4, #12
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	e702      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001f6a:	465a      	mov	r2, fp
 8001f6c:	9b00      	ldr	r3, [sp, #0]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	d100      	bne.n	8001f74 <__aeabi_ddiv+0x2c4>
 8001f72:	e07e      	b.n	8002072 <__aeabi_ddiv+0x3c2>
 8001f74:	465b      	mov	r3, fp
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d100      	bne.n	8001f7c <__aeabi_ddiv+0x2cc>
 8001f7a:	e100      	b.n	800217e <__aeabi_ddiv+0x4ce>
 8001f7c:	4658      	mov	r0, fp
 8001f7e:	f001 fabb 	bl	80034f8 <__clzsi2>
 8001f82:	0002      	movs	r2, r0
 8001f84:	0003      	movs	r3, r0
 8001f86:	3a0b      	subs	r2, #11
 8001f88:	271d      	movs	r7, #29
 8001f8a:	9e00      	ldr	r6, [sp, #0]
 8001f8c:	1aba      	subs	r2, r7, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	4658      	mov	r0, fp
 8001f92:	40d6      	lsrs	r6, r2
 8001f94:	3908      	subs	r1, #8
 8001f96:	4088      	lsls	r0, r1
 8001f98:	0032      	movs	r2, r6
 8001f9a:	4302      	orrs	r2, r0
 8001f9c:	4693      	mov	fp, r2
 8001f9e:	9a00      	ldr	r2, [sp, #0]
 8001fa0:	408a      	lsls	r2, r1
 8001fa2:	4928      	ldr	r1, [pc, #160]	@ (8002044 <__aeabi_ddiv+0x394>)
 8001fa4:	4453      	add	r3, sl
 8001fa6:	468a      	mov	sl, r1
 8001fa8:	449a      	add	sl, r3
 8001faa:	2300      	movs	r3, #0
 8001fac:	e6c8      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8001fae:	465b      	mov	r3, fp
 8001fb0:	4303      	orrs	r3, r0
 8001fb2:	4699      	mov	r9, r3
 8001fb4:	d056      	beq.n	8002064 <__aeabi_ddiv+0x3b4>
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d100      	bne.n	8001fbe <__aeabi_ddiv+0x30e>
 8001fbc:	e0cd      	b.n	800215a <__aeabi_ddiv+0x4aa>
 8001fbe:	4658      	mov	r0, fp
 8001fc0:	f001 fa9a 	bl	80034f8 <__clzsi2>
 8001fc4:	230b      	movs	r3, #11
 8001fc6:	425b      	negs	r3, r3
 8001fc8:	469c      	mov	ip, r3
 8001fca:	0002      	movs	r2, r0
 8001fcc:	4484      	add	ip, r0
 8001fce:	4666      	mov	r6, ip
 8001fd0:	231d      	movs	r3, #29
 8001fd2:	1b9b      	subs	r3, r3, r6
 8001fd4:	0026      	movs	r6, r4
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	4658      	mov	r0, fp
 8001fda:	40de      	lsrs	r6, r3
 8001fdc:	3908      	subs	r1, #8
 8001fde:	4088      	lsls	r0, r1
 8001fe0:	0033      	movs	r3, r6
 8001fe2:	4303      	orrs	r3, r0
 8001fe4:	4699      	mov	r9, r3
 8001fe6:	0023      	movs	r3, r4
 8001fe8:	408b      	lsls	r3, r1
 8001fea:	4698      	mov	r8, r3
 8001fec:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <__aeabi_ddiv+0x398>)
 8001fee:	2400      	movs	r4, #0
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	469a      	mov	sl, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9303      	str	r3, [sp, #12]
 8001ff8:	e682      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8001ffa:	465a      	mov	r2, fp
 8001ffc:	4302      	orrs	r2, r0
 8001ffe:	4691      	mov	r9, r2
 8002000:	d12a      	bne.n	8002058 <__aeabi_ddiv+0x3a8>
 8002002:	2200      	movs	r2, #0
 8002004:	469a      	mov	sl, r3
 8002006:	2302      	movs	r3, #2
 8002008:	4690      	mov	r8, r2
 800200a:	2408      	movs	r4, #8
 800200c:	9303      	str	r3, [sp, #12]
 800200e:	e677      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002010:	465a      	mov	r2, fp
 8002012:	9b00      	ldr	r3, [sp, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <__aeabi_ddiv+0x39c>)
 8002018:	469c      	mov	ip, r3
 800201a:	44e2      	add	sl, ip
 800201c:	2a00      	cmp	r2, #0
 800201e:	d117      	bne.n	8002050 <__aeabi_ddiv+0x3a0>
 8002020:	2302      	movs	r3, #2
 8002022:	431c      	orrs	r4, r3
 8002024:	2300      	movs	r3, #0
 8002026:	469b      	mov	fp, r3
 8002028:	3302      	adds	r3, #2
 800202a:	e689      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800202c:	000007ff 	.word	0x000007ff
 8002030:	fffffc01 	.word	0xfffffc01
 8002034:	0801a254 	.word	0x0801a254
 8002038:	000003ff 	.word	0x000003ff
 800203c:	feffffff 	.word	0xfeffffff
 8002040:	000007fe 	.word	0x000007fe
 8002044:	000003f3 	.word	0x000003f3
 8002048:	fffffc0d 	.word	0xfffffc0d
 800204c:	fffff801 	.word	0xfffff801
 8002050:	2303      	movs	r3, #3
 8002052:	0032      	movs	r2, r6
 8002054:	431c      	orrs	r4, r3
 8002056:	e673      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8002058:	469a      	mov	sl, r3
 800205a:	2303      	movs	r3, #3
 800205c:	46d9      	mov	r9, fp
 800205e:	240c      	movs	r4, #12
 8002060:	9303      	str	r3, [sp, #12]
 8002062:	e64d      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002064:	2300      	movs	r3, #0
 8002066:	4698      	mov	r8, r3
 8002068:	469a      	mov	sl, r3
 800206a:	3301      	adds	r3, #1
 800206c:	2404      	movs	r4, #4
 800206e:	9303      	str	r3, [sp, #12]
 8002070:	e646      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002072:	2301      	movs	r3, #1
 8002074:	431c      	orrs	r4, r3
 8002076:	2300      	movs	r3, #0
 8002078:	469b      	mov	fp, r3
 800207a:	3301      	adds	r3, #1
 800207c:	e660      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800207e:	2300      	movs	r3, #0
 8002080:	2480      	movs	r4, #128	@ 0x80
 8002082:	4698      	mov	r8, r3
 8002084:	2600      	movs	r6, #0
 8002086:	4b92      	ldr	r3, [pc, #584]	@ (80022d0 <__aeabi_ddiv+0x620>)
 8002088:	0324      	lsls	r4, r4, #12
 800208a:	e671      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800208c:	2201      	movs	r2, #1
 800208e:	4252      	negs	r2, r2
 8002090:	2101      	movs	r1, #1
 8002092:	1ac9      	subs	r1, r1, r3
 8002094:	2938      	cmp	r1, #56	@ 0x38
 8002096:	dd00      	ble.n	800209a <__aeabi_ddiv+0x3ea>
 8002098:	e666      	b.n	8001d68 <__aeabi_ddiv+0xb8>
 800209a:	291f      	cmp	r1, #31
 800209c:	dc00      	bgt.n	80020a0 <__aeabi_ddiv+0x3f0>
 800209e:	e0ab      	b.n	80021f8 <__aeabi_ddiv+0x548>
 80020a0:	201f      	movs	r0, #31
 80020a2:	4240      	negs	r0, r0
 80020a4:	1ac3      	subs	r3, r0, r3
 80020a6:	4658      	mov	r0, fp
 80020a8:	40d8      	lsrs	r0, r3
 80020aa:	0003      	movs	r3, r0
 80020ac:	2920      	cmp	r1, #32
 80020ae:	d004      	beq.n	80020ba <__aeabi_ddiv+0x40a>
 80020b0:	4658      	mov	r0, fp
 80020b2:	4988      	ldr	r1, [pc, #544]	@ (80022d4 <__aeabi_ddiv+0x624>)
 80020b4:	4451      	add	r1, sl
 80020b6:	4088      	lsls	r0, r1
 80020b8:	4302      	orrs	r2, r0
 80020ba:	1e51      	subs	r1, r2, #1
 80020bc:	418a      	sbcs	r2, r1
 80020be:	431a      	orrs	r2, r3
 80020c0:	2307      	movs	r3, #7
 80020c2:	0019      	movs	r1, r3
 80020c4:	2400      	movs	r4, #0
 80020c6:	4011      	ands	r1, r2
 80020c8:	4213      	tst	r3, r2
 80020ca:	d00c      	beq.n	80020e6 <__aeabi_ddiv+0x436>
 80020cc:	230f      	movs	r3, #15
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d100      	bne.n	80020d6 <__aeabi_ddiv+0x426>
 80020d4:	e0f9      	b.n	80022ca <__aeabi_ddiv+0x61a>
 80020d6:	1d11      	adds	r1, r2, #4
 80020d8:	4291      	cmp	r1, r2
 80020da:	419b      	sbcs	r3, r3
 80020dc:	000a      	movs	r2, r1
 80020de:	425b      	negs	r3, r3
 80020e0:	0759      	lsls	r1, r3, #29
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	0b1c      	lsrs	r4, r3, #12
 80020e6:	08d2      	lsrs	r2, r2, #3
 80020e8:	430a      	orrs	r2, r1
 80020ea:	4690      	mov	r8, r2
 80020ec:	2300      	movs	r3, #0
 80020ee:	e63f      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80020f0:	2480      	movs	r4, #128	@ 0x80
 80020f2:	464b      	mov	r3, r9
 80020f4:	0324      	lsls	r4, r4, #12
 80020f6:	4223      	tst	r3, r4
 80020f8:	d009      	beq.n	800210e <__aeabi_ddiv+0x45e>
 80020fa:	465b      	mov	r3, fp
 80020fc:	4223      	tst	r3, r4
 80020fe:	d106      	bne.n	800210e <__aeabi_ddiv+0x45e>
 8002100:	431c      	orrs	r4, r3
 8002102:	0324      	lsls	r4, r4, #12
 8002104:	002e      	movs	r6, r5
 8002106:	4690      	mov	r8, r2
 8002108:	4b71      	ldr	r3, [pc, #452]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800210a:	0b24      	lsrs	r4, r4, #12
 800210c:	e630      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800210e:	2480      	movs	r4, #128	@ 0x80
 8002110:	464b      	mov	r3, r9
 8002112:	0324      	lsls	r4, r4, #12
 8002114:	431c      	orrs	r4, r3
 8002116:	0324      	lsls	r4, r4, #12
 8002118:	9e02      	ldr	r6, [sp, #8]
 800211a:	4b6d      	ldr	r3, [pc, #436]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800211c:	0b24      	lsrs	r4, r4, #12
 800211e:	e627      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d100      	bne.n	8002126 <__aeabi_ddiv+0x476>
 8002124:	e700      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8002126:	9800      	ldr	r0, [sp, #0]
 8002128:	1e51      	subs	r1, r2, #1
 800212a:	4684      	mov	ip, r0
 800212c:	4464      	add	r4, ip
 800212e:	4284      	cmp	r4, r0
 8002130:	d200      	bcs.n	8002134 <__aeabi_ddiv+0x484>
 8002132:	e084      	b.n	800223e <__aeabi_ddiv+0x58e>
 8002134:	42bc      	cmp	r4, r7
 8002136:	d200      	bcs.n	800213a <__aeabi_ddiv+0x48a>
 8002138:	e0ae      	b.n	8002298 <__aeabi_ddiv+0x5e8>
 800213a:	d100      	bne.n	800213e <__aeabi_ddiv+0x48e>
 800213c:	e0c1      	b.n	80022c2 <__aeabi_ddiv+0x612>
 800213e:	000a      	movs	r2, r1
 8002140:	e6f0      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002142:	4542      	cmp	r2, r8
 8002144:	d900      	bls.n	8002148 <__aeabi_ddiv+0x498>
 8002146:	e62c      	b.n	8001da2 <__aeabi_ddiv+0xf2>
 8002148:	464b      	mov	r3, r9
 800214a:	07dc      	lsls	r4, r3, #31
 800214c:	0858      	lsrs	r0, r3, #1
 800214e:	4643      	mov	r3, r8
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	431c      	orrs	r4, r3
 8002154:	4643      	mov	r3, r8
 8002156:	07df      	lsls	r7, r3, #31
 8002158:	e62a      	b.n	8001db0 <__aeabi_ddiv+0x100>
 800215a:	f001 f9cd 	bl	80034f8 <__clzsi2>
 800215e:	2315      	movs	r3, #21
 8002160:	469c      	mov	ip, r3
 8002162:	4484      	add	ip, r0
 8002164:	0002      	movs	r2, r0
 8002166:	4663      	mov	r3, ip
 8002168:	3220      	adds	r2, #32
 800216a:	2b1c      	cmp	r3, #28
 800216c:	dc00      	bgt.n	8002170 <__aeabi_ddiv+0x4c0>
 800216e:	e72e      	b.n	8001fce <__aeabi_ddiv+0x31e>
 8002170:	0023      	movs	r3, r4
 8002172:	3808      	subs	r0, #8
 8002174:	4083      	lsls	r3, r0
 8002176:	4699      	mov	r9, r3
 8002178:	2300      	movs	r3, #0
 800217a:	4698      	mov	r8, r3
 800217c:	e736      	b.n	8001fec <__aeabi_ddiv+0x33c>
 800217e:	f001 f9bb 	bl	80034f8 <__clzsi2>
 8002182:	0002      	movs	r2, r0
 8002184:	0003      	movs	r3, r0
 8002186:	3215      	adds	r2, #21
 8002188:	3320      	adds	r3, #32
 800218a:	2a1c      	cmp	r2, #28
 800218c:	dc00      	bgt.n	8002190 <__aeabi_ddiv+0x4e0>
 800218e:	e6fb      	b.n	8001f88 <__aeabi_ddiv+0x2d8>
 8002190:	9900      	ldr	r1, [sp, #0]
 8002192:	3808      	subs	r0, #8
 8002194:	4081      	lsls	r1, r0
 8002196:	2200      	movs	r2, #0
 8002198:	468b      	mov	fp, r1
 800219a:	e702      	b.n	8001fa2 <__aeabi_ddiv+0x2f2>
 800219c:	9900      	ldr	r1, [sp, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	468c      	mov	ip, r1
 80021a2:	4464      	add	r4, ip
 80021a4:	42a1      	cmp	r1, r4
 80021a6:	d900      	bls.n	80021aa <__aeabi_ddiv+0x4fa>
 80021a8:	e69a      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021aa:	42a2      	cmp	r2, r4
 80021ac:	d800      	bhi.n	80021b0 <__aeabi_ddiv+0x500>
 80021ae:	e697      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b0:	1e83      	subs	r3, r0, #2
 80021b2:	4464      	add	r4, ip
 80021b4:	e694      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b6:	46ac      	mov	ip, r5
 80021b8:	4461      	add	r1, ip
 80021ba:	3f01      	subs	r7, #1
 80021bc:	428d      	cmp	r5, r1
 80021be:	d900      	bls.n	80021c2 <__aeabi_ddiv+0x512>
 80021c0:	e680      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c2:	428a      	cmp	r2, r1
 80021c4:	d800      	bhi.n	80021c8 <__aeabi_ddiv+0x518>
 80021c6:	e67d      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c8:	1e87      	subs	r7, r0, #2
 80021ca:	4461      	add	r1, ip
 80021cc:	e67a      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021ce:	4285      	cmp	r5, r0
 80021d0:	d000      	beq.n	80021d4 <__aeabi_ddiv+0x524>
 80021d2:	e65f      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021d4:	45b9      	cmp	r9, r7
 80021d6:	d900      	bls.n	80021da <__aeabi_ddiv+0x52a>
 80021d8:	e65c      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021da:	e656      	b.n	8001e8a <__aeabi_ddiv+0x1da>
 80021dc:	42a2      	cmp	r2, r4
 80021de:	d800      	bhi.n	80021e2 <__aeabi_ddiv+0x532>
 80021e0:	e61a      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e2:	1e83      	subs	r3, r0, #2
 80021e4:	4464      	add	r4, ip
 80021e6:	e617      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e8:	428a      	cmp	r2, r1
 80021ea:	d800      	bhi.n	80021ee <__aeabi_ddiv+0x53e>
 80021ec:	e600      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021ee:	46ac      	mov	ip, r5
 80021f0:	1e83      	subs	r3, r0, #2
 80021f2:	4698      	mov	r8, r3
 80021f4:	4461      	add	r1, ip
 80021f6:	e5fb      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021f8:	4837      	ldr	r0, [pc, #220]	@ (80022d8 <__aeabi_ddiv+0x628>)
 80021fa:	0014      	movs	r4, r2
 80021fc:	4450      	add	r0, sl
 80021fe:	4082      	lsls	r2, r0
 8002200:	465b      	mov	r3, fp
 8002202:	0017      	movs	r7, r2
 8002204:	4083      	lsls	r3, r0
 8002206:	40cc      	lsrs	r4, r1
 8002208:	1e7a      	subs	r2, r7, #1
 800220a:	4197      	sbcs	r7, r2
 800220c:	4323      	orrs	r3, r4
 800220e:	433b      	orrs	r3, r7
 8002210:	001a      	movs	r2, r3
 8002212:	465b      	mov	r3, fp
 8002214:	40cb      	lsrs	r3, r1
 8002216:	0751      	lsls	r1, r2, #29
 8002218:	d009      	beq.n	800222e <__aeabi_ddiv+0x57e>
 800221a:	210f      	movs	r1, #15
 800221c:	4011      	ands	r1, r2
 800221e:	2904      	cmp	r1, #4
 8002220:	d005      	beq.n	800222e <__aeabi_ddiv+0x57e>
 8002222:	1d11      	adds	r1, r2, #4
 8002224:	4291      	cmp	r1, r2
 8002226:	4192      	sbcs	r2, r2
 8002228:	4252      	negs	r2, r2
 800222a:	189b      	adds	r3, r3, r2
 800222c:	000a      	movs	r2, r1
 800222e:	0219      	lsls	r1, r3, #8
 8002230:	d400      	bmi.n	8002234 <__aeabi_ddiv+0x584>
 8002232:	e755      	b.n	80020e0 <__aeabi_ddiv+0x430>
 8002234:	2200      	movs	r2, #0
 8002236:	2301      	movs	r3, #1
 8002238:	2400      	movs	r4, #0
 800223a:	4690      	mov	r8, r2
 800223c:	e598      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800223e:	000a      	movs	r2, r1
 8002240:	42bc      	cmp	r4, r7
 8002242:	d000      	beq.n	8002246 <__aeabi_ddiv+0x596>
 8002244:	e66e      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002246:	454b      	cmp	r3, r9
 8002248:	d000      	beq.n	800224c <__aeabi_ddiv+0x59c>
 800224a:	e66b      	b.n	8001f24 <__aeabi_ddiv+0x274>
 800224c:	e66c      	b.n	8001f28 <__aeabi_ddiv+0x278>
 800224e:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <__aeabi_ddiv+0x62c>)
 8002250:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <__aeabi_ddiv+0x630>)
 8002252:	4453      	add	r3, sl
 8002254:	4592      	cmp	sl, r2
 8002256:	da00      	bge.n	800225a <__aeabi_ddiv+0x5aa>
 8002258:	e718      	b.n	800208c <__aeabi_ddiv+0x3dc>
 800225a:	2101      	movs	r1, #1
 800225c:	4249      	negs	r1, r1
 800225e:	1d0a      	adds	r2, r1, #4
 8002260:	428a      	cmp	r2, r1
 8002262:	4189      	sbcs	r1, r1
 8002264:	4249      	negs	r1, r1
 8002266:	448b      	add	fp, r1
 8002268:	e666      	b.n	8001f38 <__aeabi_ddiv+0x288>
 800226a:	210f      	movs	r1, #15
 800226c:	4011      	ands	r1, r2
 800226e:	2904      	cmp	r1, #4
 8002270:	d100      	bne.n	8002274 <__aeabi_ddiv+0x5c4>
 8002272:	e661      	b.n	8001f38 <__aeabi_ddiv+0x288>
 8002274:	0011      	movs	r1, r2
 8002276:	e7f2      	b.n	800225e <__aeabi_ddiv+0x5ae>
 8002278:	42bc      	cmp	r4, r7
 800227a:	d800      	bhi.n	800227e <__aeabi_ddiv+0x5ce>
 800227c:	e60a      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 800227e:	2302      	movs	r3, #2
 8002280:	425b      	negs	r3, r3
 8002282:	469c      	mov	ip, r3
 8002284:	9900      	ldr	r1, [sp, #0]
 8002286:	444f      	add	r7, r9
 8002288:	454f      	cmp	r7, r9
 800228a:	419b      	sbcs	r3, r3
 800228c:	44e3      	add	fp, ip
 800228e:	468c      	mov	ip, r1
 8002290:	425b      	negs	r3, r3
 8002292:	4463      	add	r3, ip
 8002294:	18c0      	adds	r0, r0, r3
 8002296:	e5ff      	b.n	8001e98 <__aeabi_ddiv+0x1e8>
 8002298:	4649      	mov	r1, r9
 800229a:	9d00      	ldr	r5, [sp, #0]
 800229c:	0048      	lsls	r0, r1, #1
 800229e:	4548      	cmp	r0, r9
 80022a0:	4189      	sbcs	r1, r1
 80022a2:	46ac      	mov	ip, r5
 80022a4:	4249      	negs	r1, r1
 80022a6:	4461      	add	r1, ip
 80022a8:	4681      	mov	r9, r0
 80022aa:	3a02      	subs	r2, #2
 80022ac:	1864      	adds	r4, r4, r1
 80022ae:	e7c7      	b.n	8002240 <__aeabi_ddiv+0x590>
 80022b0:	2480      	movs	r4, #128	@ 0x80
 80022b2:	465b      	mov	r3, fp
 80022b4:	0324      	lsls	r4, r4, #12
 80022b6:	431c      	orrs	r4, r3
 80022b8:	0324      	lsls	r4, r4, #12
 80022ba:	4690      	mov	r8, r2
 80022bc:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <__aeabi_ddiv+0x620>)
 80022be:	0b24      	lsrs	r4, r4, #12
 80022c0:	e556      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80022c2:	4599      	cmp	r9, r3
 80022c4:	d3e8      	bcc.n	8002298 <__aeabi_ddiv+0x5e8>
 80022c6:	000a      	movs	r2, r1
 80022c8:	e7bd      	b.n	8002246 <__aeabi_ddiv+0x596>
 80022ca:	2300      	movs	r3, #0
 80022cc:	e708      	b.n	80020e0 <__aeabi_ddiv+0x430>
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	000007ff 	.word	0x000007ff
 80022d4:	0000043e 	.word	0x0000043e
 80022d8:	0000041e 	.word	0x0000041e
 80022dc:	000003ff 	.word	0x000003ff
 80022e0:	fffffc02 	.word	0xfffffc02

080022e4 <__eqdf2>:
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e6:	4657      	mov	r7, sl
 80022e8:	46de      	mov	lr, fp
 80022ea:	464e      	mov	r6, r9
 80022ec:	4645      	mov	r5, r8
 80022ee:	b5e0      	push	{r5, r6, r7, lr}
 80022f0:	000d      	movs	r5, r1
 80022f2:	0004      	movs	r4, r0
 80022f4:	0fe8      	lsrs	r0, r5, #31
 80022f6:	4683      	mov	fp, r0
 80022f8:	0309      	lsls	r1, r1, #12
 80022fa:	0fd8      	lsrs	r0, r3, #31
 80022fc:	0b09      	lsrs	r1, r1, #12
 80022fe:	4682      	mov	sl, r0
 8002300:	4819      	ldr	r0, [pc, #100]	@ (8002368 <__eqdf2+0x84>)
 8002302:	468c      	mov	ip, r1
 8002304:	031f      	lsls	r7, r3, #12
 8002306:	0069      	lsls	r1, r5, #1
 8002308:	005e      	lsls	r6, r3, #1
 800230a:	0d49      	lsrs	r1, r1, #21
 800230c:	0b3f      	lsrs	r7, r7, #12
 800230e:	0d76      	lsrs	r6, r6, #21
 8002310:	4281      	cmp	r1, r0
 8002312:	d018      	beq.n	8002346 <__eqdf2+0x62>
 8002314:	4286      	cmp	r6, r0
 8002316:	d00f      	beq.n	8002338 <__eqdf2+0x54>
 8002318:	2001      	movs	r0, #1
 800231a:	42b1      	cmp	r1, r6
 800231c:	d10d      	bne.n	800233a <__eqdf2+0x56>
 800231e:	45bc      	cmp	ip, r7
 8002320:	d10b      	bne.n	800233a <__eqdf2+0x56>
 8002322:	4294      	cmp	r4, r2
 8002324:	d109      	bne.n	800233a <__eqdf2+0x56>
 8002326:	45d3      	cmp	fp, sl
 8002328:	d01c      	beq.n	8002364 <__eqdf2+0x80>
 800232a:	2900      	cmp	r1, #0
 800232c:	d105      	bne.n	800233a <__eqdf2+0x56>
 800232e:	4660      	mov	r0, ip
 8002330:	4320      	orrs	r0, r4
 8002332:	1e43      	subs	r3, r0, #1
 8002334:	4198      	sbcs	r0, r3
 8002336:	e000      	b.n	800233a <__eqdf2+0x56>
 8002338:	2001      	movs	r0, #1
 800233a:	bcf0      	pop	{r4, r5, r6, r7}
 800233c:	46bb      	mov	fp, r7
 800233e:	46b2      	mov	sl, r6
 8002340:	46a9      	mov	r9, r5
 8002342:	46a0      	mov	r8, r4
 8002344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002346:	2001      	movs	r0, #1
 8002348:	428e      	cmp	r6, r1
 800234a:	d1f6      	bne.n	800233a <__eqdf2+0x56>
 800234c:	4661      	mov	r1, ip
 800234e:	4339      	orrs	r1, r7
 8002350:	000f      	movs	r7, r1
 8002352:	4317      	orrs	r7, r2
 8002354:	4327      	orrs	r7, r4
 8002356:	d1f0      	bne.n	800233a <__eqdf2+0x56>
 8002358:	465b      	mov	r3, fp
 800235a:	4652      	mov	r2, sl
 800235c:	1a98      	subs	r0, r3, r2
 800235e:	1e43      	subs	r3, r0, #1
 8002360:	4198      	sbcs	r0, r3
 8002362:	e7ea      	b.n	800233a <__eqdf2+0x56>
 8002364:	2000      	movs	r0, #0
 8002366:	e7e8      	b.n	800233a <__eqdf2+0x56>
 8002368:	000007ff 	.word	0x000007ff

0800236c <__gedf2>:
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	4657      	mov	r7, sl
 8002370:	464e      	mov	r6, r9
 8002372:	4645      	mov	r5, r8
 8002374:	46de      	mov	lr, fp
 8002376:	b5e0      	push	{r5, r6, r7, lr}
 8002378:	000d      	movs	r5, r1
 800237a:	030f      	lsls	r7, r1, #12
 800237c:	0b39      	lsrs	r1, r7, #12
 800237e:	b083      	sub	sp, #12
 8002380:	0004      	movs	r4, r0
 8002382:	4680      	mov	r8, r0
 8002384:	9101      	str	r1, [sp, #4]
 8002386:	0058      	lsls	r0, r3, #1
 8002388:	0fe9      	lsrs	r1, r5, #31
 800238a:	4f31      	ldr	r7, [pc, #196]	@ (8002450 <__gedf2+0xe4>)
 800238c:	0d40      	lsrs	r0, r0, #21
 800238e:	468c      	mov	ip, r1
 8002390:	006e      	lsls	r6, r5, #1
 8002392:	0319      	lsls	r1, r3, #12
 8002394:	4682      	mov	sl, r0
 8002396:	4691      	mov	r9, r2
 8002398:	0d76      	lsrs	r6, r6, #21
 800239a:	0b09      	lsrs	r1, r1, #12
 800239c:	0fd8      	lsrs	r0, r3, #31
 800239e:	42be      	cmp	r6, r7
 80023a0:	d01f      	beq.n	80023e2 <__gedf2+0x76>
 80023a2:	45ba      	cmp	sl, r7
 80023a4:	d00f      	beq.n	80023c6 <__gedf2+0x5a>
 80023a6:	2e00      	cmp	r6, #0
 80023a8:	d12f      	bne.n	800240a <__gedf2+0x9e>
 80023aa:	4655      	mov	r5, sl
 80023ac:	9e01      	ldr	r6, [sp, #4]
 80023ae:	4334      	orrs	r4, r6
 80023b0:	2d00      	cmp	r5, #0
 80023b2:	d127      	bne.n	8002404 <__gedf2+0x98>
 80023b4:	430a      	orrs	r2, r1
 80023b6:	d03a      	beq.n	800242e <__gedf2+0xc2>
 80023b8:	2c00      	cmp	r4, #0
 80023ba:	d145      	bne.n	8002448 <__gedf2+0xdc>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d11a      	bne.n	80023f6 <__gedf2+0x8a>
 80023c0:	2001      	movs	r0, #1
 80023c2:	4240      	negs	r0, r0
 80023c4:	e017      	b.n	80023f6 <__gedf2+0x8a>
 80023c6:	4311      	orrs	r1, r2
 80023c8:	d13b      	bne.n	8002442 <__gedf2+0xd6>
 80023ca:	2e00      	cmp	r6, #0
 80023cc:	d102      	bne.n	80023d4 <__gedf2+0x68>
 80023ce:	9f01      	ldr	r7, [sp, #4]
 80023d0:	4327      	orrs	r7, r4
 80023d2:	d0f3      	beq.n	80023bc <__gedf2+0x50>
 80023d4:	4584      	cmp	ip, r0
 80023d6:	d109      	bne.n	80023ec <__gedf2+0x80>
 80023d8:	4663      	mov	r3, ip
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <__gedf2+0x54>
 80023de:	4660      	mov	r0, ip
 80023e0:	e009      	b.n	80023f6 <__gedf2+0x8a>
 80023e2:	9f01      	ldr	r7, [sp, #4]
 80023e4:	4327      	orrs	r7, r4
 80023e6:	d12c      	bne.n	8002442 <__gedf2+0xd6>
 80023e8:	45b2      	cmp	sl, r6
 80023ea:	d024      	beq.n	8002436 <__gedf2+0xca>
 80023ec:	4663      	mov	r3, ip
 80023ee:	2002      	movs	r0, #2
 80023f0:	3b01      	subs	r3, #1
 80023f2:	4018      	ands	r0, r3
 80023f4:	3801      	subs	r0, #1
 80023f6:	b003      	add	sp, #12
 80023f8:	bcf0      	pop	{r4, r5, r6, r7}
 80023fa:	46bb      	mov	fp, r7
 80023fc:	46b2      	mov	sl, r6
 80023fe:	46a9      	mov	r9, r5
 8002400:	46a0      	mov	r8, r4
 8002402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002404:	2c00      	cmp	r4, #0
 8002406:	d0d9      	beq.n	80023bc <__gedf2+0x50>
 8002408:	e7e4      	b.n	80023d4 <__gedf2+0x68>
 800240a:	4654      	mov	r4, sl
 800240c:	2c00      	cmp	r4, #0
 800240e:	d0ed      	beq.n	80023ec <__gedf2+0x80>
 8002410:	4584      	cmp	ip, r0
 8002412:	d1eb      	bne.n	80023ec <__gedf2+0x80>
 8002414:	4556      	cmp	r6, sl
 8002416:	dce9      	bgt.n	80023ec <__gedf2+0x80>
 8002418:	dbde      	blt.n	80023d8 <__gedf2+0x6c>
 800241a:	9b01      	ldr	r3, [sp, #4]
 800241c:	428b      	cmp	r3, r1
 800241e:	d8e5      	bhi.n	80023ec <__gedf2+0x80>
 8002420:	d1da      	bne.n	80023d8 <__gedf2+0x6c>
 8002422:	45c8      	cmp	r8, r9
 8002424:	d8e2      	bhi.n	80023ec <__gedf2+0x80>
 8002426:	2000      	movs	r0, #0
 8002428:	45c8      	cmp	r8, r9
 800242a:	d2e4      	bcs.n	80023f6 <__gedf2+0x8a>
 800242c:	e7d4      	b.n	80023d8 <__gedf2+0x6c>
 800242e:	2000      	movs	r0, #0
 8002430:	2c00      	cmp	r4, #0
 8002432:	d0e0      	beq.n	80023f6 <__gedf2+0x8a>
 8002434:	e7da      	b.n	80023ec <__gedf2+0x80>
 8002436:	4311      	orrs	r1, r2
 8002438:	d103      	bne.n	8002442 <__gedf2+0xd6>
 800243a:	4584      	cmp	ip, r0
 800243c:	d1d6      	bne.n	80023ec <__gedf2+0x80>
 800243e:	2000      	movs	r0, #0
 8002440:	e7d9      	b.n	80023f6 <__gedf2+0x8a>
 8002442:	2002      	movs	r0, #2
 8002444:	4240      	negs	r0, r0
 8002446:	e7d6      	b.n	80023f6 <__gedf2+0x8a>
 8002448:	4584      	cmp	ip, r0
 800244a:	d0e6      	beq.n	800241a <__gedf2+0xae>
 800244c:	e7ce      	b.n	80023ec <__gedf2+0x80>
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	000007ff 	.word	0x000007ff

08002454 <__ledf2>:
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	4657      	mov	r7, sl
 8002458:	464e      	mov	r6, r9
 800245a:	4645      	mov	r5, r8
 800245c:	46de      	mov	lr, fp
 800245e:	b5e0      	push	{r5, r6, r7, lr}
 8002460:	000d      	movs	r5, r1
 8002462:	030f      	lsls	r7, r1, #12
 8002464:	0004      	movs	r4, r0
 8002466:	4680      	mov	r8, r0
 8002468:	0fe8      	lsrs	r0, r5, #31
 800246a:	0b39      	lsrs	r1, r7, #12
 800246c:	4684      	mov	ip, r0
 800246e:	b083      	sub	sp, #12
 8002470:	0058      	lsls	r0, r3, #1
 8002472:	4f30      	ldr	r7, [pc, #192]	@ (8002534 <__ledf2+0xe0>)
 8002474:	0d40      	lsrs	r0, r0, #21
 8002476:	9101      	str	r1, [sp, #4]
 8002478:	031e      	lsls	r6, r3, #12
 800247a:	0069      	lsls	r1, r5, #1
 800247c:	4682      	mov	sl, r0
 800247e:	4691      	mov	r9, r2
 8002480:	0d49      	lsrs	r1, r1, #21
 8002482:	0b36      	lsrs	r6, r6, #12
 8002484:	0fd8      	lsrs	r0, r3, #31
 8002486:	42b9      	cmp	r1, r7
 8002488:	d020      	beq.n	80024cc <__ledf2+0x78>
 800248a:	45ba      	cmp	sl, r7
 800248c:	d00f      	beq.n	80024ae <__ledf2+0x5a>
 800248e:	2900      	cmp	r1, #0
 8002490:	d12b      	bne.n	80024ea <__ledf2+0x96>
 8002492:	9901      	ldr	r1, [sp, #4]
 8002494:	430c      	orrs	r4, r1
 8002496:	4651      	mov	r1, sl
 8002498:	2900      	cmp	r1, #0
 800249a:	d137      	bne.n	800250c <__ledf2+0xb8>
 800249c:	4332      	orrs	r2, r6
 800249e:	d038      	beq.n	8002512 <__ledf2+0xbe>
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	d144      	bne.n	800252e <__ledf2+0xda>
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d119      	bne.n	80024dc <__ledf2+0x88>
 80024a8:	2001      	movs	r0, #1
 80024aa:	4240      	negs	r0, r0
 80024ac:	e016      	b.n	80024dc <__ledf2+0x88>
 80024ae:	4316      	orrs	r6, r2
 80024b0:	d113      	bne.n	80024da <__ledf2+0x86>
 80024b2:	2900      	cmp	r1, #0
 80024b4:	d102      	bne.n	80024bc <__ledf2+0x68>
 80024b6:	9f01      	ldr	r7, [sp, #4]
 80024b8:	4327      	orrs	r7, r4
 80024ba:	d0f3      	beq.n	80024a4 <__ledf2+0x50>
 80024bc:	4584      	cmp	ip, r0
 80024be:	d020      	beq.n	8002502 <__ledf2+0xae>
 80024c0:	4663      	mov	r3, ip
 80024c2:	2002      	movs	r0, #2
 80024c4:	3b01      	subs	r3, #1
 80024c6:	4018      	ands	r0, r3
 80024c8:	3801      	subs	r0, #1
 80024ca:	e007      	b.n	80024dc <__ledf2+0x88>
 80024cc:	9f01      	ldr	r7, [sp, #4]
 80024ce:	4327      	orrs	r7, r4
 80024d0:	d103      	bne.n	80024da <__ledf2+0x86>
 80024d2:	458a      	cmp	sl, r1
 80024d4:	d1f4      	bne.n	80024c0 <__ledf2+0x6c>
 80024d6:	4316      	orrs	r6, r2
 80024d8:	d01f      	beq.n	800251a <__ledf2+0xc6>
 80024da:	2002      	movs	r0, #2
 80024dc:	b003      	add	sp, #12
 80024de:	bcf0      	pop	{r4, r5, r6, r7}
 80024e0:	46bb      	mov	fp, r7
 80024e2:	46b2      	mov	sl, r6
 80024e4:	46a9      	mov	r9, r5
 80024e6:	46a0      	mov	r8, r4
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ea:	4654      	mov	r4, sl
 80024ec:	2c00      	cmp	r4, #0
 80024ee:	d0e7      	beq.n	80024c0 <__ledf2+0x6c>
 80024f0:	4584      	cmp	ip, r0
 80024f2:	d1e5      	bne.n	80024c0 <__ledf2+0x6c>
 80024f4:	4551      	cmp	r1, sl
 80024f6:	dce3      	bgt.n	80024c0 <__ledf2+0x6c>
 80024f8:	db03      	blt.n	8002502 <__ledf2+0xae>
 80024fa:	9b01      	ldr	r3, [sp, #4]
 80024fc:	42b3      	cmp	r3, r6
 80024fe:	d8df      	bhi.n	80024c0 <__ledf2+0x6c>
 8002500:	d00f      	beq.n	8002522 <__ledf2+0xce>
 8002502:	4663      	mov	r3, ip
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0cf      	beq.n	80024a8 <__ledf2+0x54>
 8002508:	4660      	mov	r0, ip
 800250a:	e7e7      	b.n	80024dc <__ledf2+0x88>
 800250c:	2c00      	cmp	r4, #0
 800250e:	d0c9      	beq.n	80024a4 <__ledf2+0x50>
 8002510:	e7d4      	b.n	80024bc <__ledf2+0x68>
 8002512:	2000      	movs	r0, #0
 8002514:	2c00      	cmp	r4, #0
 8002516:	d0e1      	beq.n	80024dc <__ledf2+0x88>
 8002518:	e7d2      	b.n	80024c0 <__ledf2+0x6c>
 800251a:	4584      	cmp	ip, r0
 800251c:	d1d0      	bne.n	80024c0 <__ledf2+0x6c>
 800251e:	2000      	movs	r0, #0
 8002520:	e7dc      	b.n	80024dc <__ledf2+0x88>
 8002522:	45c8      	cmp	r8, r9
 8002524:	d8cc      	bhi.n	80024c0 <__ledf2+0x6c>
 8002526:	2000      	movs	r0, #0
 8002528:	45c8      	cmp	r8, r9
 800252a:	d2d7      	bcs.n	80024dc <__ledf2+0x88>
 800252c:	e7e9      	b.n	8002502 <__ledf2+0xae>
 800252e:	4584      	cmp	ip, r0
 8002530:	d0e3      	beq.n	80024fa <__ledf2+0xa6>
 8002532:	e7c5      	b.n	80024c0 <__ledf2+0x6c>
 8002534:	000007ff 	.word	0x000007ff

08002538 <__aeabi_dmul>:
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253a:	4657      	mov	r7, sl
 800253c:	46de      	mov	lr, fp
 800253e:	464e      	mov	r6, r9
 8002540:	4645      	mov	r5, r8
 8002542:	b5e0      	push	{r5, r6, r7, lr}
 8002544:	001f      	movs	r7, r3
 8002546:	030b      	lsls	r3, r1, #12
 8002548:	0b1b      	lsrs	r3, r3, #12
 800254a:	0016      	movs	r6, r2
 800254c:	469a      	mov	sl, r3
 800254e:	0fca      	lsrs	r2, r1, #31
 8002550:	004b      	lsls	r3, r1, #1
 8002552:	0004      	movs	r4, r0
 8002554:	4693      	mov	fp, r2
 8002556:	b087      	sub	sp, #28
 8002558:	0d5b      	lsrs	r3, r3, #21
 800255a:	d100      	bne.n	800255e <__aeabi_dmul+0x26>
 800255c:	e0d5      	b.n	800270a <__aeabi_dmul+0x1d2>
 800255e:	4abb      	ldr	r2, [pc, #748]	@ (800284c <__aeabi_dmul+0x314>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d100      	bne.n	8002566 <__aeabi_dmul+0x2e>
 8002564:	e0f8      	b.n	8002758 <__aeabi_dmul+0x220>
 8002566:	4651      	mov	r1, sl
 8002568:	0f42      	lsrs	r2, r0, #29
 800256a:	00c9      	lsls	r1, r1, #3
 800256c:	430a      	orrs	r2, r1
 800256e:	2180      	movs	r1, #128	@ 0x80
 8002570:	0409      	lsls	r1, r1, #16
 8002572:	4311      	orrs	r1, r2
 8002574:	00c2      	lsls	r2, r0, #3
 8002576:	4691      	mov	r9, r2
 8002578:	4ab5      	ldr	r2, [pc, #724]	@ (8002850 <__aeabi_dmul+0x318>)
 800257a:	468a      	mov	sl, r1
 800257c:	189d      	adds	r5, r3, r2
 800257e:	2300      	movs	r3, #0
 8002580:	4698      	mov	r8, r3
 8002582:	9302      	str	r3, [sp, #8]
 8002584:	033c      	lsls	r4, r7, #12
 8002586:	007b      	lsls	r3, r7, #1
 8002588:	0ffa      	lsrs	r2, r7, #31
 800258a:	0030      	movs	r0, r6
 800258c:	0b24      	lsrs	r4, r4, #12
 800258e:	0d5b      	lsrs	r3, r3, #21
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	d100      	bne.n	8002596 <__aeabi_dmul+0x5e>
 8002594:	e096      	b.n	80026c4 <__aeabi_dmul+0x18c>
 8002596:	4aad      	ldr	r2, [pc, #692]	@ (800284c <__aeabi_dmul+0x314>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d031      	beq.n	8002600 <__aeabi_dmul+0xc8>
 800259c:	0f72      	lsrs	r2, r6, #29
 800259e:	00e4      	lsls	r4, r4, #3
 80025a0:	4322      	orrs	r2, r4
 80025a2:	2480      	movs	r4, #128	@ 0x80
 80025a4:	0424      	lsls	r4, r4, #16
 80025a6:	4314      	orrs	r4, r2
 80025a8:	4aa9      	ldr	r2, [pc, #676]	@ (8002850 <__aeabi_dmul+0x318>)
 80025aa:	00f0      	lsls	r0, r6, #3
 80025ac:	4694      	mov	ip, r2
 80025ae:	4463      	add	r3, ip
 80025b0:	195b      	adds	r3, r3, r5
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	9201      	str	r2, [sp, #4]
 80025b6:	4642      	mov	r2, r8
 80025b8:	2600      	movs	r6, #0
 80025ba:	2a0a      	cmp	r2, #10
 80025bc:	dc42      	bgt.n	8002644 <__aeabi_dmul+0x10c>
 80025be:	465a      	mov	r2, fp
 80025c0:	9900      	ldr	r1, [sp, #0]
 80025c2:	404a      	eors	r2, r1
 80025c4:	4693      	mov	fp, r2
 80025c6:	4642      	mov	r2, r8
 80025c8:	2a02      	cmp	r2, #2
 80025ca:	dc32      	bgt.n	8002632 <__aeabi_dmul+0xfa>
 80025cc:	3a01      	subs	r2, #1
 80025ce:	2a01      	cmp	r2, #1
 80025d0:	d900      	bls.n	80025d4 <__aeabi_dmul+0x9c>
 80025d2:	e149      	b.n	8002868 <__aeabi_dmul+0x330>
 80025d4:	2e02      	cmp	r6, #2
 80025d6:	d100      	bne.n	80025da <__aeabi_dmul+0xa2>
 80025d8:	e0ca      	b.n	8002770 <__aeabi_dmul+0x238>
 80025da:	2e01      	cmp	r6, #1
 80025dc:	d13d      	bne.n	800265a <__aeabi_dmul+0x122>
 80025de:	2300      	movs	r3, #0
 80025e0:	2400      	movs	r4, #0
 80025e2:	2200      	movs	r2, #0
 80025e4:	0010      	movs	r0, r2
 80025e6:	465a      	mov	r2, fp
 80025e8:	051b      	lsls	r3, r3, #20
 80025ea:	4323      	orrs	r3, r4
 80025ec:	07d2      	lsls	r2, r2, #31
 80025ee:	4313      	orrs	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	b007      	add	sp, #28
 80025f4:	bcf0      	pop	{r4, r5, r6, r7}
 80025f6:	46bb      	mov	fp, r7
 80025f8:	46b2      	mov	sl, r6
 80025fa:	46a9      	mov	r9, r5
 80025fc:	46a0      	mov	r8, r4
 80025fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002600:	4b92      	ldr	r3, [pc, #584]	@ (800284c <__aeabi_dmul+0x314>)
 8002602:	4326      	orrs	r6, r4
 8002604:	18eb      	adds	r3, r5, r3
 8002606:	2e00      	cmp	r6, #0
 8002608:	d100      	bne.n	800260c <__aeabi_dmul+0xd4>
 800260a:	e0bb      	b.n	8002784 <__aeabi_dmul+0x24c>
 800260c:	2203      	movs	r2, #3
 800260e:	4641      	mov	r1, r8
 8002610:	4311      	orrs	r1, r2
 8002612:	465a      	mov	r2, fp
 8002614:	4688      	mov	r8, r1
 8002616:	9900      	ldr	r1, [sp, #0]
 8002618:	404a      	eors	r2, r1
 800261a:	2180      	movs	r1, #128	@ 0x80
 800261c:	0109      	lsls	r1, r1, #4
 800261e:	468c      	mov	ip, r1
 8002620:	0029      	movs	r1, r5
 8002622:	4461      	add	r1, ip
 8002624:	9101      	str	r1, [sp, #4]
 8002626:	4641      	mov	r1, r8
 8002628:	290a      	cmp	r1, #10
 800262a:	dd00      	ble.n	800262e <__aeabi_dmul+0xf6>
 800262c:	e233      	b.n	8002a96 <__aeabi_dmul+0x55e>
 800262e:	4693      	mov	fp, r2
 8002630:	2603      	movs	r6, #3
 8002632:	4642      	mov	r2, r8
 8002634:	2701      	movs	r7, #1
 8002636:	4097      	lsls	r7, r2
 8002638:	21a6      	movs	r1, #166	@ 0xa6
 800263a:	003a      	movs	r2, r7
 800263c:	00c9      	lsls	r1, r1, #3
 800263e:	400a      	ands	r2, r1
 8002640:	420f      	tst	r7, r1
 8002642:	d031      	beq.n	80026a8 <__aeabi_dmul+0x170>
 8002644:	9e02      	ldr	r6, [sp, #8]
 8002646:	2e02      	cmp	r6, #2
 8002648:	d100      	bne.n	800264c <__aeabi_dmul+0x114>
 800264a:	e235      	b.n	8002ab8 <__aeabi_dmul+0x580>
 800264c:	2e03      	cmp	r6, #3
 800264e:	d100      	bne.n	8002652 <__aeabi_dmul+0x11a>
 8002650:	e1d2      	b.n	80029f8 <__aeabi_dmul+0x4c0>
 8002652:	4654      	mov	r4, sl
 8002654:	4648      	mov	r0, r9
 8002656:	2e01      	cmp	r6, #1
 8002658:	d0c1      	beq.n	80025de <__aeabi_dmul+0xa6>
 800265a:	9a01      	ldr	r2, [sp, #4]
 800265c:	4b7d      	ldr	r3, [pc, #500]	@ (8002854 <__aeabi_dmul+0x31c>)
 800265e:	4694      	mov	ip, r2
 8002660:	4463      	add	r3, ip
 8002662:	2b00      	cmp	r3, #0
 8002664:	dc00      	bgt.n	8002668 <__aeabi_dmul+0x130>
 8002666:	e0c0      	b.n	80027ea <__aeabi_dmul+0x2b2>
 8002668:	0742      	lsls	r2, r0, #29
 800266a:	d009      	beq.n	8002680 <__aeabi_dmul+0x148>
 800266c:	220f      	movs	r2, #15
 800266e:	4002      	ands	r2, r0
 8002670:	2a04      	cmp	r2, #4
 8002672:	d005      	beq.n	8002680 <__aeabi_dmul+0x148>
 8002674:	1d02      	adds	r2, r0, #4
 8002676:	4282      	cmp	r2, r0
 8002678:	4180      	sbcs	r0, r0
 800267a:	4240      	negs	r0, r0
 800267c:	1824      	adds	r4, r4, r0
 800267e:	0010      	movs	r0, r2
 8002680:	01e2      	lsls	r2, r4, #7
 8002682:	d506      	bpl.n	8002692 <__aeabi_dmul+0x15a>
 8002684:	4b74      	ldr	r3, [pc, #464]	@ (8002858 <__aeabi_dmul+0x320>)
 8002686:	9a01      	ldr	r2, [sp, #4]
 8002688:	401c      	ands	r4, r3
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	4694      	mov	ip, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4463      	add	r3, ip
 8002692:	4a72      	ldr	r2, [pc, #456]	@ (800285c <__aeabi_dmul+0x324>)
 8002694:	4293      	cmp	r3, r2
 8002696:	dc6b      	bgt.n	8002770 <__aeabi_dmul+0x238>
 8002698:	0762      	lsls	r2, r4, #29
 800269a:	08c0      	lsrs	r0, r0, #3
 800269c:	0264      	lsls	r4, r4, #9
 800269e:	055b      	lsls	r3, r3, #21
 80026a0:	4302      	orrs	r2, r0
 80026a2:	0b24      	lsrs	r4, r4, #12
 80026a4:	0d5b      	lsrs	r3, r3, #21
 80026a6:	e79d      	b.n	80025e4 <__aeabi_dmul+0xac>
 80026a8:	2190      	movs	r1, #144	@ 0x90
 80026aa:	0089      	lsls	r1, r1, #2
 80026ac:	420f      	tst	r7, r1
 80026ae:	d163      	bne.n	8002778 <__aeabi_dmul+0x240>
 80026b0:	2288      	movs	r2, #136	@ 0x88
 80026b2:	423a      	tst	r2, r7
 80026b4:	d100      	bne.n	80026b8 <__aeabi_dmul+0x180>
 80026b6:	e0d7      	b.n	8002868 <__aeabi_dmul+0x330>
 80026b8:	9b00      	ldr	r3, [sp, #0]
 80026ba:	46a2      	mov	sl, r4
 80026bc:	469b      	mov	fp, r3
 80026be:	4681      	mov	r9, r0
 80026c0:	9602      	str	r6, [sp, #8]
 80026c2:	e7bf      	b.n	8002644 <__aeabi_dmul+0x10c>
 80026c4:	0023      	movs	r3, r4
 80026c6:	4333      	orrs	r3, r6
 80026c8:	d100      	bne.n	80026cc <__aeabi_dmul+0x194>
 80026ca:	e07f      	b.n	80027cc <__aeabi_dmul+0x294>
 80026cc:	2c00      	cmp	r4, #0
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dmul+0x19a>
 80026d0:	e1ad      	b.n	8002a2e <__aeabi_dmul+0x4f6>
 80026d2:	0020      	movs	r0, r4
 80026d4:	f000 ff10 	bl	80034f8 <__clzsi2>
 80026d8:	0002      	movs	r2, r0
 80026da:	0003      	movs	r3, r0
 80026dc:	3a0b      	subs	r2, #11
 80026de:	201d      	movs	r0, #29
 80026e0:	0019      	movs	r1, r3
 80026e2:	1a82      	subs	r2, r0, r2
 80026e4:	0030      	movs	r0, r6
 80026e6:	3908      	subs	r1, #8
 80026e8:	40d0      	lsrs	r0, r2
 80026ea:	408c      	lsls	r4, r1
 80026ec:	4304      	orrs	r4, r0
 80026ee:	0030      	movs	r0, r6
 80026f0:	4088      	lsls	r0, r1
 80026f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002860 <__aeabi_dmul+0x328>)
 80026f4:	1aeb      	subs	r3, r5, r3
 80026f6:	4694      	mov	ip, r2
 80026f8:	4463      	add	r3, ip
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	9201      	str	r2, [sp, #4]
 80026fe:	4642      	mov	r2, r8
 8002700:	2600      	movs	r6, #0
 8002702:	2a0a      	cmp	r2, #10
 8002704:	dc00      	bgt.n	8002708 <__aeabi_dmul+0x1d0>
 8002706:	e75a      	b.n	80025be <__aeabi_dmul+0x86>
 8002708:	e79c      	b.n	8002644 <__aeabi_dmul+0x10c>
 800270a:	4653      	mov	r3, sl
 800270c:	4303      	orrs	r3, r0
 800270e:	4699      	mov	r9, r3
 8002710:	d054      	beq.n	80027bc <__aeabi_dmul+0x284>
 8002712:	4653      	mov	r3, sl
 8002714:	2b00      	cmp	r3, #0
 8002716:	d100      	bne.n	800271a <__aeabi_dmul+0x1e2>
 8002718:	e177      	b.n	8002a0a <__aeabi_dmul+0x4d2>
 800271a:	4650      	mov	r0, sl
 800271c:	f000 feec 	bl	80034f8 <__clzsi2>
 8002720:	230b      	movs	r3, #11
 8002722:	425b      	negs	r3, r3
 8002724:	469c      	mov	ip, r3
 8002726:	0002      	movs	r2, r0
 8002728:	4484      	add	ip, r0
 800272a:	0011      	movs	r1, r2
 800272c:	4650      	mov	r0, sl
 800272e:	3908      	subs	r1, #8
 8002730:	4088      	lsls	r0, r1
 8002732:	231d      	movs	r3, #29
 8002734:	4680      	mov	r8, r0
 8002736:	4660      	mov	r0, ip
 8002738:	1a1b      	subs	r3, r3, r0
 800273a:	0020      	movs	r0, r4
 800273c:	40d8      	lsrs	r0, r3
 800273e:	0003      	movs	r3, r0
 8002740:	4640      	mov	r0, r8
 8002742:	4303      	orrs	r3, r0
 8002744:	469a      	mov	sl, r3
 8002746:	0023      	movs	r3, r4
 8002748:	408b      	lsls	r3, r1
 800274a:	4699      	mov	r9, r3
 800274c:	2300      	movs	r3, #0
 800274e:	4d44      	ldr	r5, [pc, #272]	@ (8002860 <__aeabi_dmul+0x328>)
 8002750:	4698      	mov	r8, r3
 8002752:	1aad      	subs	r5, r5, r2
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	e715      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002758:	4652      	mov	r2, sl
 800275a:	4302      	orrs	r2, r0
 800275c:	4691      	mov	r9, r2
 800275e:	d126      	bne.n	80027ae <__aeabi_dmul+0x276>
 8002760:	2200      	movs	r2, #0
 8002762:	001d      	movs	r5, r3
 8002764:	2302      	movs	r3, #2
 8002766:	4692      	mov	sl, r2
 8002768:	3208      	adds	r2, #8
 800276a:	4690      	mov	r8, r2
 800276c:	9302      	str	r3, [sp, #8]
 800276e:	e709      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002770:	2400      	movs	r4, #0
 8002772:	2200      	movs	r2, #0
 8002774:	4b35      	ldr	r3, [pc, #212]	@ (800284c <__aeabi_dmul+0x314>)
 8002776:	e735      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002778:	2300      	movs	r3, #0
 800277a:	2480      	movs	r4, #128	@ 0x80
 800277c:	469b      	mov	fp, r3
 800277e:	0324      	lsls	r4, r4, #12
 8002780:	4b32      	ldr	r3, [pc, #200]	@ (800284c <__aeabi_dmul+0x314>)
 8002782:	e72f      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002784:	2202      	movs	r2, #2
 8002786:	4641      	mov	r1, r8
 8002788:	4311      	orrs	r1, r2
 800278a:	2280      	movs	r2, #128	@ 0x80
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	4694      	mov	ip, r2
 8002790:	002a      	movs	r2, r5
 8002792:	4462      	add	r2, ip
 8002794:	4688      	mov	r8, r1
 8002796:	9201      	str	r2, [sp, #4]
 8002798:	290a      	cmp	r1, #10
 800279a:	dd00      	ble.n	800279e <__aeabi_dmul+0x266>
 800279c:	e752      	b.n	8002644 <__aeabi_dmul+0x10c>
 800279e:	465a      	mov	r2, fp
 80027a0:	2000      	movs	r0, #0
 80027a2:	9900      	ldr	r1, [sp, #0]
 80027a4:	0004      	movs	r4, r0
 80027a6:	404a      	eors	r2, r1
 80027a8:	4693      	mov	fp, r2
 80027aa:	2602      	movs	r6, #2
 80027ac:	e70b      	b.n	80025c6 <__aeabi_dmul+0x8e>
 80027ae:	220c      	movs	r2, #12
 80027b0:	001d      	movs	r5, r3
 80027b2:	2303      	movs	r3, #3
 80027b4:	4681      	mov	r9, r0
 80027b6:	4690      	mov	r8, r2
 80027b8:	9302      	str	r3, [sp, #8]
 80027ba:	e6e3      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027bc:	2300      	movs	r3, #0
 80027be:	469a      	mov	sl, r3
 80027c0:	3304      	adds	r3, #4
 80027c2:	4698      	mov	r8, r3
 80027c4:	3b03      	subs	r3, #3
 80027c6:	2500      	movs	r5, #0
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	e6db      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027cc:	4642      	mov	r2, r8
 80027ce:	3301      	adds	r3, #1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	002b      	movs	r3, r5
 80027d4:	4690      	mov	r8, r2
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	9201      	str	r2, [sp, #4]
 80027da:	4642      	mov	r2, r8
 80027dc:	2400      	movs	r4, #0
 80027de:	2000      	movs	r0, #0
 80027e0:	2601      	movs	r6, #1
 80027e2:	2a0a      	cmp	r2, #10
 80027e4:	dc00      	bgt.n	80027e8 <__aeabi_dmul+0x2b0>
 80027e6:	e6ea      	b.n	80025be <__aeabi_dmul+0x86>
 80027e8:	e72c      	b.n	8002644 <__aeabi_dmul+0x10c>
 80027ea:	2201      	movs	r2, #1
 80027ec:	1ad2      	subs	r2, r2, r3
 80027ee:	2a38      	cmp	r2, #56	@ 0x38
 80027f0:	dd00      	ble.n	80027f4 <__aeabi_dmul+0x2bc>
 80027f2:	e6f4      	b.n	80025de <__aeabi_dmul+0xa6>
 80027f4:	2a1f      	cmp	r2, #31
 80027f6:	dc00      	bgt.n	80027fa <__aeabi_dmul+0x2c2>
 80027f8:	e12a      	b.n	8002a50 <__aeabi_dmul+0x518>
 80027fa:	211f      	movs	r1, #31
 80027fc:	4249      	negs	r1, r1
 80027fe:	1acb      	subs	r3, r1, r3
 8002800:	0021      	movs	r1, r4
 8002802:	40d9      	lsrs	r1, r3
 8002804:	000b      	movs	r3, r1
 8002806:	2a20      	cmp	r2, #32
 8002808:	d005      	beq.n	8002816 <__aeabi_dmul+0x2de>
 800280a:	4a16      	ldr	r2, [pc, #88]	@ (8002864 <__aeabi_dmul+0x32c>)
 800280c:	9d01      	ldr	r5, [sp, #4]
 800280e:	4694      	mov	ip, r2
 8002810:	4465      	add	r5, ip
 8002812:	40ac      	lsls	r4, r5
 8002814:	4320      	orrs	r0, r4
 8002816:	1e42      	subs	r2, r0, #1
 8002818:	4190      	sbcs	r0, r2
 800281a:	4318      	orrs	r0, r3
 800281c:	2307      	movs	r3, #7
 800281e:	0019      	movs	r1, r3
 8002820:	2400      	movs	r4, #0
 8002822:	4001      	ands	r1, r0
 8002824:	4203      	tst	r3, r0
 8002826:	d00c      	beq.n	8002842 <__aeabi_dmul+0x30a>
 8002828:	230f      	movs	r3, #15
 800282a:	4003      	ands	r3, r0
 800282c:	2b04      	cmp	r3, #4
 800282e:	d100      	bne.n	8002832 <__aeabi_dmul+0x2fa>
 8002830:	e140      	b.n	8002ab4 <__aeabi_dmul+0x57c>
 8002832:	1d03      	adds	r3, r0, #4
 8002834:	4283      	cmp	r3, r0
 8002836:	41a4      	sbcs	r4, r4
 8002838:	0018      	movs	r0, r3
 800283a:	4264      	negs	r4, r4
 800283c:	0761      	lsls	r1, r4, #29
 800283e:	0264      	lsls	r4, r4, #9
 8002840:	0b24      	lsrs	r4, r4, #12
 8002842:	08c2      	lsrs	r2, r0, #3
 8002844:	2300      	movs	r3, #0
 8002846:	430a      	orrs	r2, r1
 8002848:	e6cc      	b.n	80025e4 <__aeabi_dmul+0xac>
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	000007ff 	.word	0x000007ff
 8002850:	fffffc01 	.word	0xfffffc01
 8002854:	000003ff 	.word	0x000003ff
 8002858:	feffffff 	.word	0xfeffffff
 800285c:	000007fe 	.word	0x000007fe
 8002860:	fffffc0d 	.word	0xfffffc0d
 8002864:	0000043e 	.word	0x0000043e
 8002868:	4649      	mov	r1, r9
 800286a:	464a      	mov	r2, r9
 800286c:	0409      	lsls	r1, r1, #16
 800286e:	0c09      	lsrs	r1, r1, #16
 8002870:	000d      	movs	r5, r1
 8002872:	0c16      	lsrs	r6, r2, #16
 8002874:	0c02      	lsrs	r2, r0, #16
 8002876:	0400      	lsls	r0, r0, #16
 8002878:	0c00      	lsrs	r0, r0, #16
 800287a:	4345      	muls	r5, r0
 800287c:	46ac      	mov	ip, r5
 800287e:	0005      	movs	r5, r0
 8002880:	4375      	muls	r5, r6
 8002882:	46a8      	mov	r8, r5
 8002884:	0015      	movs	r5, r2
 8002886:	000f      	movs	r7, r1
 8002888:	4375      	muls	r5, r6
 800288a:	9200      	str	r2, [sp, #0]
 800288c:	9502      	str	r5, [sp, #8]
 800288e:	002a      	movs	r2, r5
 8002890:	9d00      	ldr	r5, [sp, #0]
 8002892:	436f      	muls	r7, r5
 8002894:	4665      	mov	r5, ip
 8002896:	0c2d      	lsrs	r5, r5, #16
 8002898:	46a9      	mov	r9, r5
 800289a:	4447      	add	r7, r8
 800289c:	444f      	add	r7, r9
 800289e:	45b8      	cmp	r8, r7
 80028a0:	d905      	bls.n	80028ae <__aeabi_dmul+0x376>
 80028a2:	0015      	movs	r5, r2
 80028a4:	2280      	movs	r2, #128	@ 0x80
 80028a6:	0252      	lsls	r2, r2, #9
 80028a8:	4690      	mov	r8, r2
 80028aa:	4445      	add	r5, r8
 80028ac:	9502      	str	r5, [sp, #8]
 80028ae:	0c3d      	lsrs	r5, r7, #16
 80028b0:	9503      	str	r5, [sp, #12]
 80028b2:	4665      	mov	r5, ip
 80028b4:	042d      	lsls	r5, r5, #16
 80028b6:	043f      	lsls	r7, r7, #16
 80028b8:	0c2d      	lsrs	r5, r5, #16
 80028ba:	46ac      	mov	ip, r5
 80028bc:	003d      	movs	r5, r7
 80028be:	4465      	add	r5, ip
 80028c0:	9504      	str	r5, [sp, #16]
 80028c2:	0c25      	lsrs	r5, r4, #16
 80028c4:	0424      	lsls	r4, r4, #16
 80028c6:	0c24      	lsrs	r4, r4, #16
 80028c8:	46ac      	mov	ip, r5
 80028ca:	0025      	movs	r5, r4
 80028cc:	4375      	muls	r5, r6
 80028ce:	46a8      	mov	r8, r5
 80028d0:	4665      	mov	r5, ip
 80028d2:	000f      	movs	r7, r1
 80028d4:	4369      	muls	r1, r5
 80028d6:	4441      	add	r1, r8
 80028d8:	4689      	mov	r9, r1
 80028da:	4367      	muls	r7, r4
 80028dc:	0c39      	lsrs	r1, r7, #16
 80028de:	4449      	add	r1, r9
 80028e0:	436e      	muls	r6, r5
 80028e2:	4588      	cmp	r8, r1
 80028e4:	d903      	bls.n	80028ee <__aeabi_dmul+0x3b6>
 80028e6:	2280      	movs	r2, #128	@ 0x80
 80028e8:	0252      	lsls	r2, r2, #9
 80028ea:	4690      	mov	r8, r2
 80028ec:	4446      	add	r6, r8
 80028ee:	0c0d      	lsrs	r5, r1, #16
 80028f0:	46a8      	mov	r8, r5
 80028f2:	0035      	movs	r5, r6
 80028f4:	4445      	add	r5, r8
 80028f6:	9505      	str	r5, [sp, #20]
 80028f8:	9d03      	ldr	r5, [sp, #12]
 80028fa:	043f      	lsls	r7, r7, #16
 80028fc:	46a8      	mov	r8, r5
 80028fe:	0c3f      	lsrs	r7, r7, #16
 8002900:	0409      	lsls	r1, r1, #16
 8002902:	19c9      	adds	r1, r1, r7
 8002904:	4488      	add	r8, r1
 8002906:	4645      	mov	r5, r8
 8002908:	9503      	str	r5, [sp, #12]
 800290a:	4655      	mov	r5, sl
 800290c:	042e      	lsls	r6, r5, #16
 800290e:	0c36      	lsrs	r6, r6, #16
 8002910:	0c2f      	lsrs	r7, r5, #16
 8002912:	0035      	movs	r5, r6
 8002914:	4345      	muls	r5, r0
 8002916:	4378      	muls	r0, r7
 8002918:	4681      	mov	r9, r0
 800291a:	0038      	movs	r0, r7
 800291c:	46a8      	mov	r8, r5
 800291e:	0c2d      	lsrs	r5, r5, #16
 8002920:	46aa      	mov	sl, r5
 8002922:	9a00      	ldr	r2, [sp, #0]
 8002924:	4350      	muls	r0, r2
 8002926:	4372      	muls	r2, r6
 8002928:	444a      	add	r2, r9
 800292a:	4452      	add	r2, sl
 800292c:	4591      	cmp	r9, r2
 800292e:	d903      	bls.n	8002938 <__aeabi_dmul+0x400>
 8002930:	2580      	movs	r5, #128	@ 0x80
 8002932:	026d      	lsls	r5, r5, #9
 8002934:	46a9      	mov	r9, r5
 8002936:	4448      	add	r0, r9
 8002938:	0c15      	lsrs	r5, r2, #16
 800293a:	46a9      	mov	r9, r5
 800293c:	4645      	mov	r5, r8
 800293e:	042d      	lsls	r5, r5, #16
 8002940:	0c2d      	lsrs	r5, r5, #16
 8002942:	46a8      	mov	r8, r5
 8002944:	4665      	mov	r5, ip
 8002946:	437d      	muls	r5, r7
 8002948:	0412      	lsls	r2, r2, #16
 800294a:	4448      	add	r0, r9
 800294c:	4490      	add	r8, r2
 800294e:	46a9      	mov	r9, r5
 8002950:	0032      	movs	r2, r6
 8002952:	4665      	mov	r5, ip
 8002954:	4362      	muls	r2, r4
 8002956:	436e      	muls	r6, r5
 8002958:	437c      	muls	r4, r7
 800295a:	0c17      	lsrs	r7, r2, #16
 800295c:	1936      	adds	r6, r6, r4
 800295e:	19bf      	adds	r7, r7, r6
 8002960:	42bc      	cmp	r4, r7
 8002962:	d903      	bls.n	800296c <__aeabi_dmul+0x434>
 8002964:	2480      	movs	r4, #128	@ 0x80
 8002966:	0264      	lsls	r4, r4, #9
 8002968:	46a4      	mov	ip, r4
 800296a:	44e1      	add	r9, ip
 800296c:	9c02      	ldr	r4, [sp, #8]
 800296e:	9e03      	ldr	r6, [sp, #12]
 8002970:	46a4      	mov	ip, r4
 8002972:	9d05      	ldr	r5, [sp, #20]
 8002974:	4466      	add	r6, ip
 8002976:	428e      	cmp	r6, r1
 8002978:	4189      	sbcs	r1, r1
 800297a:	46ac      	mov	ip, r5
 800297c:	0412      	lsls	r2, r2, #16
 800297e:	043c      	lsls	r4, r7, #16
 8002980:	0c12      	lsrs	r2, r2, #16
 8002982:	18a2      	adds	r2, r4, r2
 8002984:	4462      	add	r2, ip
 8002986:	4249      	negs	r1, r1
 8002988:	1854      	adds	r4, r2, r1
 800298a:	4446      	add	r6, r8
 800298c:	46a4      	mov	ip, r4
 800298e:	4546      	cmp	r6, r8
 8002990:	41a4      	sbcs	r4, r4
 8002992:	4682      	mov	sl, r0
 8002994:	4264      	negs	r4, r4
 8002996:	46a0      	mov	r8, r4
 8002998:	42aa      	cmp	r2, r5
 800299a:	4192      	sbcs	r2, r2
 800299c:	458c      	cmp	ip, r1
 800299e:	4189      	sbcs	r1, r1
 80029a0:	44e2      	add	sl, ip
 80029a2:	44d0      	add	r8, sl
 80029a4:	4249      	negs	r1, r1
 80029a6:	4252      	negs	r2, r2
 80029a8:	430a      	orrs	r2, r1
 80029aa:	45a0      	cmp	r8, r4
 80029ac:	41a4      	sbcs	r4, r4
 80029ae:	4582      	cmp	sl, r0
 80029b0:	4189      	sbcs	r1, r1
 80029b2:	4264      	negs	r4, r4
 80029b4:	4249      	negs	r1, r1
 80029b6:	430c      	orrs	r4, r1
 80029b8:	4641      	mov	r1, r8
 80029ba:	0c3f      	lsrs	r7, r7, #16
 80029bc:	19d2      	adds	r2, r2, r7
 80029be:	1912      	adds	r2, r2, r4
 80029c0:	0dcc      	lsrs	r4, r1, #23
 80029c2:	9904      	ldr	r1, [sp, #16]
 80029c4:	0270      	lsls	r0, r6, #9
 80029c6:	4308      	orrs	r0, r1
 80029c8:	1e41      	subs	r1, r0, #1
 80029ca:	4188      	sbcs	r0, r1
 80029cc:	4641      	mov	r1, r8
 80029ce:	444a      	add	r2, r9
 80029d0:	0df6      	lsrs	r6, r6, #23
 80029d2:	0252      	lsls	r2, r2, #9
 80029d4:	4330      	orrs	r0, r6
 80029d6:	0249      	lsls	r1, r1, #9
 80029d8:	4314      	orrs	r4, r2
 80029da:	4308      	orrs	r0, r1
 80029dc:	01d2      	lsls	r2, r2, #7
 80029de:	d535      	bpl.n	8002a4c <__aeabi_dmul+0x514>
 80029e0:	2201      	movs	r2, #1
 80029e2:	0843      	lsrs	r3, r0, #1
 80029e4:	4002      	ands	r2, r0
 80029e6:	4313      	orrs	r3, r2
 80029e8:	07e0      	lsls	r0, r4, #31
 80029ea:	4318      	orrs	r0, r3
 80029ec:	0864      	lsrs	r4, r4, #1
 80029ee:	e634      	b.n	800265a <__aeabi_dmul+0x122>
 80029f0:	9b00      	ldr	r3, [sp, #0]
 80029f2:	46a2      	mov	sl, r4
 80029f4:	469b      	mov	fp, r3
 80029f6:	4681      	mov	r9, r0
 80029f8:	2480      	movs	r4, #128	@ 0x80
 80029fa:	4653      	mov	r3, sl
 80029fc:	0324      	lsls	r4, r4, #12
 80029fe:	431c      	orrs	r4, r3
 8002a00:	0324      	lsls	r4, r4, #12
 8002a02:	464a      	mov	r2, r9
 8002a04:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002a06:	0b24      	lsrs	r4, r4, #12
 8002a08:	e5ec      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a0a:	f000 fd75 	bl	80034f8 <__clzsi2>
 8002a0e:	2315      	movs	r3, #21
 8002a10:	469c      	mov	ip, r3
 8002a12:	4484      	add	ip, r0
 8002a14:	0002      	movs	r2, r0
 8002a16:	4663      	mov	r3, ip
 8002a18:	3220      	adds	r2, #32
 8002a1a:	2b1c      	cmp	r3, #28
 8002a1c:	dc00      	bgt.n	8002a20 <__aeabi_dmul+0x4e8>
 8002a1e:	e684      	b.n	800272a <__aeabi_dmul+0x1f2>
 8002a20:	2300      	movs	r3, #0
 8002a22:	4699      	mov	r9, r3
 8002a24:	0023      	movs	r3, r4
 8002a26:	3808      	subs	r0, #8
 8002a28:	4083      	lsls	r3, r0
 8002a2a:	469a      	mov	sl, r3
 8002a2c:	e68e      	b.n	800274c <__aeabi_dmul+0x214>
 8002a2e:	f000 fd63 	bl	80034f8 <__clzsi2>
 8002a32:	0002      	movs	r2, r0
 8002a34:	0003      	movs	r3, r0
 8002a36:	3215      	adds	r2, #21
 8002a38:	3320      	adds	r3, #32
 8002a3a:	2a1c      	cmp	r2, #28
 8002a3c:	dc00      	bgt.n	8002a40 <__aeabi_dmul+0x508>
 8002a3e:	e64e      	b.n	80026de <__aeabi_dmul+0x1a6>
 8002a40:	0002      	movs	r2, r0
 8002a42:	0034      	movs	r4, r6
 8002a44:	3a08      	subs	r2, #8
 8002a46:	2000      	movs	r0, #0
 8002a48:	4094      	lsls	r4, r2
 8002a4a:	e652      	b.n	80026f2 <__aeabi_dmul+0x1ba>
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	e604      	b.n	800265a <__aeabi_dmul+0x122>
 8002a50:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac4 <__aeabi_dmul+0x58c>)
 8002a52:	0021      	movs	r1, r4
 8002a54:	469c      	mov	ip, r3
 8002a56:	0003      	movs	r3, r0
 8002a58:	9d01      	ldr	r5, [sp, #4]
 8002a5a:	40d3      	lsrs	r3, r2
 8002a5c:	4465      	add	r5, ip
 8002a5e:	40a9      	lsls	r1, r5
 8002a60:	4319      	orrs	r1, r3
 8002a62:	0003      	movs	r3, r0
 8002a64:	40ab      	lsls	r3, r5
 8002a66:	1e58      	subs	r0, r3, #1
 8002a68:	4183      	sbcs	r3, r0
 8002a6a:	4319      	orrs	r1, r3
 8002a6c:	0008      	movs	r0, r1
 8002a6e:	40d4      	lsrs	r4, r2
 8002a70:	074b      	lsls	r3, r1, #29
 8002a72:	d009      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a74:	230f      	movs	r3, #15
 8002a76:	400b      	ands	r3, r1
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d005      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a7c:	1d0b      	adds	r3, r1, #4
 8002a7e:	428b      	cmp	r3, r1
 8002a80:	4180      	sbcs	r0, r0
 8002a82:	4240      	negs	r0, r0
 8002a84:	1824      	adds	r4, r4, r0
 8002a86:	0018      	movs	r0, r3
 8002a88:	0223      	lsls	r3, r4, #8
 8002a8a:	d400      	bmi.n	8002a8e <__aeabi_dmul+0x556>
 8002a8c:	e6d6      	b.n	800283c <__aeabi_dmul+0x304>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	2400      	movs	r4, #0
 8002a92:	2200      	movs	r2, #0
 8002a94:	e5a6      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a96:	290f      	cmp	r1, #15
 8002a98:	d1aa      	bne.n	80029f0 <__aeabi_dmul+0x4b8>
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	4652      	mov	r2, sl
 8002a9e:	031b      	lsls	r3, r3, #12
 8002aa0:	421a      	tst	r2, r3
 8002aa2:	d0a9      	beq.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa4:	421c      	tst	r4, r3
 8002aa6:	d1a7      	bne.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa8:	431c      	orrs	r4, r3
 8002aaa:	9b00      	ldr	r3, [sp, #0]
 8002aac:	0002      	movs	r2, r0
 8002aae:	469b      	mov	fp, r3
 8002ab0:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002ab2:	e597      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ab4:	2400      	movs	r4, #0
 8002ab6:	e6c1      	b.n	800283c <__aeabi_dmul+0x304>
 8002ab8:	2400      	movs	r4, #0
 8002aba:	4b01      	ldr	r3, [pc, #4]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002abc:	0022      	movs	r2, r4
 8002abe:	e591      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ac0:	000007ff 	.word	0x000007ff
 8002ac4:	0000041e 	.word	0x0000041e

08002ac8 <__aeabi_dsub>:
 8002ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aca:	464e      	mov	r6, r9
 8002acc:	4645      	mov	r5, r8
 8002ace:	46de      	mov	lr, fp
 8002ad0:	4657      	mov	r7, sl
 8002ad2:	b5e0      	push	{r5, r6, r7, lr}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	9000      	str	r0, [sp, #0]
 8002ad8:	9101      	str	r1, [sp, #4]
 8002ada:	030c      	lsls	r4, r1, #12
 8002adc:	004f      	lsls	r7, r1, #1
 8002ade:	0fce      	lsrs	r6, r1, #31
 8002ae0:	0a61      	lsrs	r1, r4, #9
 8002ae2:	9c00      	ldr	r4, [sp, #0]
 8002ae4:	46b0      	mov	r8, r6
 8002ae6:	0f64      	lsrs	r4, r4, #29
 8002ae8:	430c      	orrs	r4, r1
 8002aea:	9900      	ldr	r1, [sp, #0]
 8002aec:	0d7f      	lsrs	r7, r7, #21
 8002aee:	00c8      	lsls	r0, r1, #3
 8002af0:	0011      	movs	r1, r2
 8002af2:	001a      	movs	r2, r3
 8002af4:	031b      	lsls	r3, r3, #12
 8002af6:	469c      	mov	ip, r3
 8002af8:	9100      	str	r1, [sp, #0]
 8002afa:	9201      	str	r2, [sp, #4]
 8002afc:	0051      	lsls	r1, r2, #1
 8002afe:	0d4b      	lsrs	r3, r1, #21
 8002b00:	4699      	mov	r9, r3
 8002b02:	9b01      	ldr	r3, [sp, #4]
 8002b04:	9d00      	ldr	r5, [sp, #0]
 8002b06:	0fd9      	lsrs	r1, r3, #31
 8002b08:	4663      	mov	r3, ip
 8002b0a:	0f6a      	lsrs	r2, r5, #29
 8002b0c:	0a5b      	lsrs	r3, r3, #9
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	00ea      	lsls	r2, r5, #3
 8002b12:	4694      	mov	ip, r2
 8002b14:	4693      	mov	fp, r2
 8002b16:	4ac1      	ldr	r2, [pc, #772]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002b18:	9003      	str	r0, [sp, #12]
 8002b1a:	9302      	str	r3, [sp, #8]
 8002b1c:	4591      	cmp	r9, r2
 8002b1e:	d100      	bne.n	8002b22 <__aeabi_dsub+0x5a>
 8002b20:	e0cd      	b.n	8002cbe <__aeabi_dsub+0x1f6>
 8002b22:	2501      	movs	r5, #1
 8002b24:	4069      	eors	r1, r5
 8002b26:	464d      	mov	r5, r9
 8002b28:	1b7d      	subs	r5, r7, r5
 8002b2a:	46aa      	mov	sl, r5
 8002b2c:	428e      	cmp	r6, r1
 8002b2e:	d100      	bne.n	8002b32 <__aeabi_dsub+0x6a>
 8002b30:	e080      	b.n	8002c34 <__aeabi_dsub+0x16c>
 8002b32:	2d00      	cmp	r5, #0
 8002b34:	dc00      	bgt.n	8002b38 <__aeabi_dsub+0x70>
 8002b36:	e335      	b.n	80031a4 <__aeabi_dsub+0x6dc>
 8002b38:	4649      	mov	r1, r9
 8002b3a:	2900      	cmp	r1, #0
 8002b3c:	d100      	bne.n	8002b40 <__aeabi_dsub+0x78>
 8002b3e:	e0df      	b.n	8002d00 <__aeabi_dsub+0x238>
 8002b40:	4297      	cmp	r7, r2
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x7e>
 8002b44:	e194      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002b46:	4652      	mov	r2, sl
 8002b48:	2501      	movs	r5, #1
 8002b4a:	2a38      	cmp	r2, #56	@ 0x38
 8002b4c:	dc19      	bgt.n	8002b82 <__aeabi_dsub+0xba>
 8002b4e:	2280      	movs	r2, #128	@ 0x80
 8002b50:	9b02      	ldr	r3, [sp, #8]
 8002b52:	0412      	lsls	r2, r2, #16
 8002b54:	4313      	orrs	r3, r2
 8002b56:	9302      	str	r3, [sp, #8]
 8002b58:	4652      	mov	r2, sl
 8002b5a:	2a1f      	cmp	r2, #31
 8002b5c:	dd00      	ble.n	8002b60 <__aeabi_dsub+0x98>
 8002b5e:	e1e3      	b.n	8002f28 <__aeabi_dsub+0x460>
 8002b60:	4653      	mov	r3, sl
 8002b62:	2220      	movs	r2, #32
 8002b64:	4661      	mov	r1, ip
 8002b66:	9d02      	ldr	r5, [sp, #8]
 8002b68:	1ad2      	subs	r2, r2, r3
 8002b6a:	4095      	lsls	r5, r2
 8002b6c:	40d9      	lsrs	r1, r3
 8002b6e:	430d      	orrs	r5, r1
 8002b70:	4661      	mov	r1, ip
 8002b72:	4091      	lsls	r1, r2
 8002b74:	000a      	movs	r2, r1
 8002b76:	1e51      	subs	r1, r2, #1
 8002b78:	418a      	sbcs	r2, r1
 8002b7a:	4315      	orrs	r5, r2
 8002b7c:	9a02      	ldr	r2, [sp, #8]
 8002b7e:	40da      	lsrs	r2, r3
 8002b80:	1aa4      	subs	r4, r4, r2
 8002b82:	1b45      	subs	r5, r0, r5
 8002b84:	42a8      	cmp	r0, r5
 8002b86:	4180      	sbcs	r0, r0
 8002b88:	4240      	negs	r0, r0
 8002b8a:	1a24      	subs	r4, r4, r0
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dsub+0xca>
 8002b90:	e13d      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002b92:	0264      	lsls	r4, r4, #9
 8002b94:	0a64      	lsrs	r4, r4, #9
 8002b96:	2c00      	cmp	r4, #0
 8002b98:	d100      	bne.n	8002b9c <__aeabi_dsub+0xd4>
 8002b9a:	e147      	b.n	8002e2c <__aeabi_dsub+0x364>
 8002b9c:	0020      	movs	r0, r4
 8002b9e:	f000 fcab 	bl	80034f8 <__clzsi2>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	3b08      	subs	r3, #8
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	0028      	movs	r0, r5
 8002baa:	1aca      	subs	r2, r1, r3
 8002bac:	40d0      	lsrs	r0, r2
 8002bae:	409c      	lsls	r4, r3
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	409d      	lsls	r5, r3
 8002bb4:	4322      	orrs	r2, r4
 8002bb6:	429f      	cmp	r7, r3
 8002bb8:	dd00      	ble.n	8002bbc <__aeabi_dsub+0xf4>
 8002bba:	e177      	b.n	8002eac <__aeabi_dsub+0x3e4>
 8002bbc:	1bd8      	subs	r0, r3, r7
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	1a09      	subs	r1, r1, r0
 8002bc2:	002c      	movs	r4, r5
 8002bc4:	408d      	lsls	r5, r1
 8002bc6:	40c4      	lsrs	r4, r0
 8002bc8:	1e6b      	subs	r3, r5, #1
 8002bca:	419d      	sbcs	r5, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	40c2      	lsrs	r2, r0
 8002bd0:	408b      	lsls	r3, r1
 8002bd2:	4325      	orrs	r5, r4
 8002bd4:	2700      	movs	r7, #0
 8002bd6:	0014      	movs	r4, r2
 8002bd8:	431d      	orrs	r5, r3
 8002bda:	076b      	lsls	r3, r5, #29
 8002bdc:	d009      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002bde:	230f      	movs	r3, #15
 8002be0:	402b      	ands	r3, r5
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d005      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002be6:	1d2b      	adds	r3, r5, #4
 8002be8:	42ab      	cmp	r3, r5
 8002bea:	41ad      	sbcs	r5, r5
 8002bec:	426d      	negs	r5, r5
 8002bee:	1964      	adds	r4, r4, r5
 8002bf0:	001d      	movs	r5, r3
 8002bf2:	0223      	lsls	r3, r4, #8
 8002bf4:	d400      	bmi.n	8002bf8 <__aeabi_dsub+0x130>
 8002bf6:	e140      	b.n	8002e7a <__aeabi_dsub+0x3b2>
 8002bf8:	4a88      	ldr	r2, [pc, #544]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002bfa:	3701      	adds	r7, #1
 8002bfc:	4297      	cmp	r7, r2
 8002bfe:	d100      	bne.n	8002c02 <__aeabi_dsub+0x13a>
 8002c00:	e101      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002c02:	2601      	movs	r6, #1
 8002c04:	4643      	mov	r3, r8
 8002c06:	4986      	ldr	r1, [pc, #536]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002c08:	08ed      	lsrs	r5, r5, #3
 8002c0a:	4021      	ands	r1, r4
 8002c0c:	074a      	lsls	r2, r1, #29
 8002c0e:	432a      	orrs	r2, r5
 8002c10:	057c      	lsls	r4, r7, #21
 8002c12:	024d      	lsls	r5, r1, #9
 8002c14:	0b2d      	lsrs	r5, r5, #12
 8002c16:	0d64      	lsrs	r4, r4, #21
 8002c18:	401e      	ands	r6, r3
 8002c1a:	0524      	lsls	r4, r4, #20
 8002c1c:	432c      	orrs	r4, r5
 8002c1e:	07f6      	lsls	r6, r6, #31
 8002c20:	4334      	orrs	r4, r6
 8002c22:	0010      	movs	r0, r2
 8002c24:	0021      	movs	r1, r4
 8002c26:	b005      	add	sp, #20
 8002c28:	bcf0      	pop	{r4, r5, r6, r7}
 8002c2a:	46bb      	mov	fp, r7
 8002c2c:	46b2      	mov	sl, r6
 8002c2e:	46a9      	mov	r9, r5
 8002c30:	46a0      	mov	r8, r4
 8002c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c34:	2d00      	cmp	r5, #0
 8002c36:	dc00      	bgt.n	8002c3a <__aeabi_dsub+0x172>
 8002c38:	e2d0      	b.n	80031dc <__aeabi_dsub+0x714>
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	2900      	cmp	r1, #0
 8002c3e:	d000      	beq.n	8002c42 <__aeabi_dsub+0x17a>
 8002c40:	e0d4      	b.n	8002dec <__aeabi_dsub+0x324>
 8002c42:	4661      	mov	r1, ip
 8002c44:	9b02      	ldr	r3, [sp, #8]
 8002c46:	4319      	orrs	r1, r3
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x184>
 8002c4a:	e12b      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002c4c:	1e69      	subs	r1, r5, #1
 8002c4e:	2d01      	cmp	r5, #1
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x18c>
 8002c52:	e1d9      	b.n	8003008 <__aeabi_dsub+0x540>
 8002c54:	4295      	cmp	r5, r2
 8002c56:	d100      	bne.n	8002c5a <__aeabi_dsub+0x192>
 8002c58:	e10a      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002c5a:	2501      	movs	r5, #1
 8002c5c:	2938      	cmp	r1, #56	@ 0x38
 8002c5e:	dc17      	bgt.n	8002c90 <__aeabi_dsub+0x1c8>
 8002c60:	468a      	mov	sl, r1
 8002c62:	4653      	mov	r3, sl
 8002c64:	2b1f      	cmp	r3, #31
 8002c66:	dd00      	ble.n	8002c6a <__aeabi_dsub+0x1a2>
 8002c68:	e1e7      	b.n	800303a <__aeabi_dsub+0x572>
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	9b02      	ldr	r3, [sp, #8]
 8002c70:	4661      	mov	r1, ip
 8002c72:	4093      	lsls	r3, r2
 8002c74:	001d      	movs	r5, r3
 8002c76:	4653      	mov	r3, sl
 8002c78:	40d9      	lsrs	r1, r3
 8002c7a:	4663      	mov	r3, ip
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	001a      	movs	r2, r3
 8002c80:	430d      	orrs	r5, r1
 8002c82:	1e51      	subs	r1, r2, #1
 8002c84:	418a      	sbcs	r2, r1
 8002c86:	4653      	mov	r3, sl
 8002c88:	4315      	orrs	r5, r2
 8002c8a:	9a02      	ldr	r2, [sp, #8]
 8002c8c:	40da      	lsrs	r2, r3
 8002c8e:	18a4      	adds	r4, r4, r2
 8002c90:	182d      	adds	r5, r5, r0
 8002c92:	4285      	cmp	r5, r0
 8002c94:	4180      	sbcs	r0, r0
 8002c96:	4240      	negs	r0, r0
 8002c98:	1824      	adds	r4, r4, r0
 8002c9a:	0223      	lsls	r3, r4, #8
 8002c9c:	d400      	bmi.n	8002ca0 <__aeabi_dsub+0x1d8>
 8002c9e:	e0b6      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002ca2:	3701      	adds	r7, #1
 8002ca4:	429f      	cmp	r7, r3
 8002ca6:	d100      	bne.n	8002caa <__aeabi_dsub+0x1e2>
 8002ca8:	e0ad      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002caa:	2101      	movs	r1, #1
 8002cac:	4b5c      	ldr	r3, [pc, #368]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002cae:	086a      	lsrs	r2, r5, #1
 8002cb0:	401c      	ands	r4, r3
 8002cb2:	4029      	ands	r1, r5
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	07e5      	lsls	r5, r4, #31
 8002cb8:	4315      	orrs	r5, r2
 8002cba:	0864      	lsrs	r4, r4, #1
 8002cbc:	e78d      	b.n	8002bda <__aeabi_dsub+0x112>
 8002cbe:	4a59      	ldr	r2, [pc, #356]	@ (8002e24 <__aeabi_dsub+0x35c>)
 8002cc0:	9b02      	ldr	r3, [sp, #8]
 8002cc2:	4692      	mov	sl, r2
 8002cc4:	4662      	mov	r2, ip
 8002cc6:	44ba      	add	sl, r7
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	d02c      	beq.n	8002d26 <__aeabi_dsub+0x25e>
 8002ccc:	428e      	cmp	r6, r1
 8002cce:	d02e      	beq.n	8002d2e <__aeabi_dsub+0x266>
 8002cd0:	4652      	mov	r2, sl
 8002cd2:	2a00      	cmp	r2, #0
 8002cd4:	d060      	beq.n	8002d98 <__aeabi_dsub+0x2d0>
 8002cd6:	2f00      	cmp	r7, #0
 8002cd8:	d100      	bne.n	8002cdc <__aeabi_dsub+0x214>
 8002cda:	e0db      	b.n	8002e94 <__aeabi_dsub+0x3cc>
 8002cdc:	4663      	mov	r3, ip
 8002cde:	000e      	movs	r6, r1
 8002ce0:	9c02      	ldr	r4, [sp, #8]
 8002ce2:	08d8      	lsrs	r0, r3, #3
 8002ce4:	0762      	lsls	r2, r4, #29
 8002ce6:	4302      	orrs	r2, r0
 8002ce8:	08e4      	lsrs	r4, r4, #3
 8002cea:	0013      	movs	r3, r2
 8002cec:	4323      	orrs	r3, r4
 8002cee:	d100      	bne.n	8002cf2 <__aeabi_dsub+0x22a>
 8002cf0:	e254      	b.n	800319c <__aeabi_dsub+0x6d4>
 8002cf2:	2580      	movs	r5, #128	@ 0x80
 8002cf4:	032d      	lsls	r5, r5, #12
 8002cf6:	4325      	orrs	r5, r4
 8002cf8:	032d      	lsls	r5, r5, #12
 8002cfa:	4c48      	ldr	r4, [pc, #288]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002cfc:	0b2d      	lsrs	r5, r5, #12
 8002cfe:	e78c      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002d00:	4661      	mov	r1, ip
 8002d02:	9b02      	ldr	r3, [sp, #8]
 8002d04:	4319      	orrs	r1, r3
 8002d06:	d100      	bne.n	8002d0a <__aeabi_dsub+0x242>
 8002d08:	e0cc      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002d0a:	0029      	movs	r1, r5
 8002d0c:	3901      	subs	r1, #1
 8002d0e:	2d01      	cmp	r5, #1
 8002d10:	d100      	bne.n	8002d14 <__aeabi_dsub+0x24c>
 8002d12:	e188      	b.n	8003026 <__aeabi_dsub+0x55e>
 8002d14:	4295      	cmp	r5, r2
 8002d16:	d100      	bne.n	8002d1a <__aeabi_dsub+0x252>
 8002d18:	e0aa      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002d1a:	2501      	movs	r5, #1
 8002d1c:	2938      	cmp	r1, #56	@ 0x38
 8002d1e:	dd00      	ble.n	8002d22 <__aeabi_dsub+0x25a>
 8002d20:	e72f      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002d22:	468a      	mov	sl, r1
 8002d24:	e718      	b.n	8002b58 <__aeabi_dsub+0x90>
 8002d26:	2201      	movs	r2, #1
 8002d28:	4051      	eors	r1, r2
 8002d2a:	428e      	cmp	r6, r1
 8002d2c:	d1d0      	bne.n	8002cd0 <__aeabi_dsub+0x208>
 8002d2e:	4653      	mov	r3, sl
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x26e>
 8002d34:	e0be      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 8002d36:	2f00      	cmp	r7, #0
 8002d38:	d000      	beq.n	8002d3c <__aeabi_dsub+0x274>
 8002d3a:	e138      	b.n	8002fae <__aeabi_dsub+0x4e6>
 8002d3c:	46ca      	mov	sl, r9
 8002d3e:	0022      	movs	r2, r4
 8002d40:	4302      	orrs	r2, r0
 8002d42:	d100      	bne.n	8002d46 <__aeabi_dsub+0x27e>
 8002d44:	e1e2      	b.n	800310c <__aeabi_dsub+0x644>
 8002d46:	4653      	mov	r3, sl
 8002d48:	1e59      	subs	r1, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x288>
 8002d4e:	e20d      	b.n	800316c <__aeabi_dsub+0x6a4>
 8002d50:	4a32      	ldr	r2, [pc, #200]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002d52:	4592      	cmp	sl, r2
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x290>
 8002d56:	e1d2      	b.n	80030fe <__aeabi_dsub+0x636>
 8002d58:	2701      	movs	r7, #1
 8002d5a:	2938      	cmp	r1, #56	@ 0x38
 8002d5c:	dc13      	bgt.n	8002d86 <__aeabi_dsub+0x2be>
 8002d5e:	291f      	cmp	r1, #31
 8002d60:	dd00      	ble.n	8002d64 <__aeabi_dsub+0x29c>
 8002d62:	e1ee      	b.n	8003142 <__aeabi_dsub+0x67a>
 8002d64:	2220      	movs	r2, #32
 8002d66:	9b02      	ldr	r3, [sp, #8]
 8002d68:	1a52      	subs	r2, r2, r1
 8002d6a:	0025      	movs	r5, r4
 8002d6c:	0007      	movs	r7, r0
 8002d6e:	469a      	mov	sl, r3
 8002d70:	40cc      	lsrs	r4, r1
 8002d72:	4090      	lsls	r0, r2
 8002d74:	4095      	lsls	r5, r2
 8002d76:	40cf      	lsrs	r7, r1
 8002d78:	44a2      	add	sl, r4
 8002d7a:	1e42      	subs	r2, r0, #1
 8002d7c:	4190      	sbcs	r0, r2
 8002d7e:	4653      	mov	r3, sl
 8002d80:	432f      	orrs	r7, r5
 8002d82:	4307      	orrs	r7, r0
 8002d84:	9302      	str	r3, [sp, #8]
 8002d86:	003d      	movs	r5, r7
 8002d88:	4465      	add	r5, ip
 8002d8a:	4565      	cmp	r5, ip
 8002d8c:	4192      	sbcs	r2, r2
 8002d8e:	9b02      	ldr	r3, [sp, #8]
 8002d90:	4252      	negs	r2, r2
 8002d92:	464f      	mov	r7, r9
 8002d94:	18d4      	adds	r4, r2, r3
 8002d96:	e780      	b.n	8002c9a <__aeabi_dsub+0x1d2>
 8002d98:	4a23      	ldr	r2, [pc, #140]	@ (8002e28 <__aeabi_dsub+0x360>)
 8002d9a:	1c7d      	adds	r5, r7, #1
 8002d9c:	4215      	tst	r5, r2
 8002d9e:	d000      	beq.n	8002da2 <__aeabi_dsub+0x2da>
 8002da0:	e0aa      	b.n	8002ef8 <__aeabi_dsub+0x430>
 8002da2:	4662      	mov	r2, ip
 8002da4:	0025      	movs	r5, r4
 8002da6:	9b02      	ldr	r3, [sp, #8]
 8002da8:	4305      	orrs	r5, r0
 8002daa:	431a      	orrs	r2, r3
 8002dac:	2f00      	cmp	r7, #0
 8002dae:	d000      	beq.n	8002db2 <__aeabi_dsub+0x2ea>
 8002db0:	e0f5      	b.n	8002f9e <__aeabi_dsub+0x4d6>
 8002db2:	2d00      	cmp	r5, #0
 8002db4:	d100      	bne.n	8002db8 <__aeabi_dsub+0x2f0>
 8002db6:	e16b      	b.n	8003090 <__aeabi_dsub+0x5c8>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d100      	bne.n	8002dbe <__aeabi_dsub+0x2f6>
 8002dbc:	e152      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002dbe:	4663      	mov	r3, ip
 8002dc0:	1ac5      	subs	r5, r0, r3
 8002dc2:	9b02      	ldr	r3, [sp, #8]
 8002dc4:	1ae2      	subs	r2, r4, r3
 8002dc6:	42a8      	cmp	r0, r5
 8002dc8:	419b      	sbcs	r3, r3
 8002dca:	425b      	negs	r3, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	d400      	bmi.n	8002dd4 <__aeabi_dsub+0x30c>
 8002dd2:	e1d5      	b.n	8003180 <__aeabi_dsub+0x6b8>
 8002dd4:	4663      	mov	r3, ip
 8002dd6:	1a1d      	subs	r5, r3, r0
 8002dd8:	45ac      	cmp	ip, r5
 8002dda:	4192      	sbcs	r2, r2
 8002ddc:	2601      	movs	r6, #1
 8002dde:	9b02      	ldr	r3, [sp, #8]
 8002de0:	4252      	negs	r2, r2
 8002de2:	1b1c      	subs	r4, r3, r4
 8002de4:	4688      	mov	r8, r1
 8002de6:	1aa4      	subs	r4, r4, r2
 8002de8:	400e      	ands	r6, r1
 8002dea:	e6f6      	b.n	8002bda <__aeabi_dsub+0x112>
 8002dec:	4297      	cmp	r7, r2
 8002dee:	d03f      	beq.n	8002e70 <__aeabi_dsub+0x3a8>
 8002df0:	4652      	mov	r2, sl
 8002df2:	2501      	movs	r5, #1
 8002df4:	2a38      	cmp	r2, #56	@ 0x38
 8002df6:	dd00      	ble.n	8002dfa <__aeabi_dsub+0x332>
 8002df8:	e74a      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8002dfa:	2280      	movs	r2, #128	@ 0x80
 8002dfc:	9b02      	ldr	r3, [sp, #8]
 8002dfe:	0412      	lsls	r2, r2, #16
 8002e00:	4313      	orrs	r3, r2
 8002e02:	9302      	str	r3, [sp, #8]
 8002e04:	e72d      	b.n	8002c62 <__aeabi_dsub+0x19a>
 8002e06:	003c      	movs	r4, r7
 8002e08:	2500      	movs	r5, #0
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	e705      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e0e:	2307      	movs	r3, #7
 8002e10:	402b      	ands	r3, r5
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d000      	beq.n	8002e18 <__aeabi_dsub+0x350>
 8002e16:	e6e2      	b.n	8002bde <__aeabi_dsub+0x116>
 8002e18:	e06b      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	000007ff 	.word	0x000007ff
 8002e20:	ff7fffff 	.word	0xff7fffff
 8002e24:	fffff801 	.word	0xfffff801
 8002e28:	000007fe 	.word	0x000007fe
 8002e2c:	0028      	movs	r0, r5
 8002e2e:	f000 fb63 	bl	80034f8 <__clzsi2>
 8002e32:	0003      	movs	r3, r0
 8002e34:	3318      	adds	r3, #24
 8002e36:	2b1f      	cmp	r3, #31
 8002e38:	dc00      	bgt.n	8002e3c <__aeabi_dsub+0x374>
 8002e3a:	e6b4      	b.n	8002ba6 <__aeabi_dsub+0xde>
 8002e3c:	002a      	movs	r2, r5
 8002e3e:	3808      	subs	r0, #8
 8002e40:	4082      	lsls	r2, r0
 8002e42:	429f      	cmp	r7, r3
 8002e44:	dd00      	ble.n	8002e48 <__aeabi_dsub+0x380>
 8002e46:	e0b9      	b.n	8002fbc <__aeabi_dsub+0x4f4>
 8002e48:	1bdb      	subs	r3, r3, r7
 8002e4a:	1c58      	adds	r0, r3, #1
 8002e4c:	281f      	cmp	r0, #31
 8002e4e:	dc00      	bgt.n	8002e52 <__aeabi_dsub+0x38a>
 8002e50:	e1a0      	b.n	8003194 <__aeabi_dsub+0x6cc>
 8002e52:	0015      	movs	r5, r2
 8002e54:	3b1f      	subs	r3, #31
 8002e56:	40dd      	lsrs	r5, r3
 8002e58:	2820      	cmp	r0, #32
 8002e5a:	d005      	beq.n	8002e68 <__aeabi_dsub+0x3a0>
 8002e5c:	2340      	movs	r3, #64	@ 0x40
 8002e5e:	1a1b      	subs	r3, r3, r0
 8002e60:	409a      	lsls	r2, r3
 8002e62:	1e53      	subs	r3, r2, #1
 8002e64:	419a      	sbcs	r2, r3
 8002e66:	4315      	orrs	r5, r2
 8002e68:	2307      	movs	r3, #7
 8002e6a:	2700      	movs	r7, #0
 8002e6c:	402b      	ands	r3, r5
 8002e6e:	e7d0      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002e70:	08c0      	lsrs	r0, r0, #3
 8002e72:	0762      	lsls	r2, r4, #29
 8002e74:	4302      	orrs	r2, r0
 8002e76:	08e4      	lsrs	r4, r4, #3
 8002e78:	e737      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e7a:	08ea      	lsrs	r2, r5, #3
 8002e7c:	0763      	lsls	r3, r4, #29
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	4bd3      	ldr	r3, [pc, #844]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002e82:	08e4      	lsrs	r4, r4, #3
 8002e84:	429f      	cmp	r7, r3
 8002e86:	d100      	bne.n	8002e8a <__aeabi_dsub+0x3c2>
 8002e88:	e72f      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e8a:	0324      	lsls	r4, r4, #12
 8002e8c:	0b25      	lsrs	r5, r4, #12
 8002e8e:	057c      	lsls	r4, r7, #21
 8002e90:	0d64      	lsrs	r4, r4, #21
 8002e92:	e6c2      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e94:	46ca      	mov	sl, r9
 8002e96:	0022      	movs	r2, r4
 8002e98:	4302      	orrs	r2, r0
 8002e9a:	d158      	bne.n	8002f4e <__aeabi_dsub+0x486>
 8002e9c:	4663      	mov	r3, ip
 8002e9e:	000e      	movs	r6, r1
 8002ea0:	9c02      	ldr	r4, [sp, #8]
 8002ea2:	9303      	str	r3, [sp, #12]
 8002ea4:	9b03      	ldr	r3, [sp, #12]
 8002ea6:	4657      	mov	r7, sl
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	e7e7      	b.n	8002e7c <__aeabi_dsub+0x3b4>
 8002eac:	4cc9      	ldr	r4, [pc, #804]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eae:	1aff      	subs	r7, r7, r3
 8002eb0:	4014      	ands	r4, r2
 8002eb2:	e692      	b.n	8002bda <__aeabi_dsub+0x112>
 8002eb4:	4dc8      	ldr	r5, [pc, #800]	@ (80031d8 <__aeabi_dsub+0x710>)
 8002eb6:	1c7a      	adds	r2, r7, #1
 8002eb8:	422a      	tst	r2, r5
 8002eba:	d000      	beq.n	8002ebe <__aeabi_dsub+0x3f6>
 8002ebc:	e084      	b.n	8002fc8 <__aeabi_dsub+0x500>
 8002ebe:	0022      	movs	r2, r4
 8002ec0:	4302      	orrs	r2, r0
 8002ec2:	2f00      	cmp	r7, #0
 8002ec4:	d000      	beq.n	8002ec8 <__aeabi_dsub+0x400>
 8002ec6:	e0ef      	b.n	80030a8 <__aeabi_dsub+0x5e0>
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	d100      	bne.n	8002ece <__aeabi_dsub+0x406>
 8002ecc:	e0e5      	b.n	800309a <__aeabi_dsub+0x5d2>
 8002ece:	4662      	mov	r2, ip
 8002ed0:	9902      	ldr	r1, [sp, #8]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x410>
 8002ed6:	e0c5      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	18c5      	adds	r5, r0, r3
 8002edc:	468c      	mov	ip, r1
 8002ede:	4285      	cmp	r5, r0
 8002ee0:	4180      	sbcs	r0, r0
 8002ee2:	4464      	add	r4, ip
 8002ee4:	4240      	negs	r0, r0
 8002ee6:	1824      	adds	r4, r4, r0
 8002ee8:	0223      	lsls	r3, r4, #8
 8002eea:	d502      	bpl.n	8002ef2 <__aeabi_dsub+0x42a>
 8002eec:	4bb9      	ldr	r3, [pc, #740]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eee:	3701      	adds	r7, #1
 8002ef0:	401c      	ands	r4, r3
 8002ef2:	46ba      	mov	sl, r7
 8002ef4:	9503      	str	r5, [sp, #12]
 8002ef6:	e7d5      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002ef8:	4662      	mov	r2, ip
 8002efa:	1a85      	subs	r5, r0, r2
 8002efc:	42a8      	cmp	r0, r5
 8002efe:	4192      	sbcs	r2, r2
 8002f00:	4252      	negs	r2, r2
 8002f02:	4691      	mov	r9, r2
 8002f04:	9b02      	ldr	r3, [sp, #8]
 8002f06:	1ae3      	subs	r3, r4, r3
 8002f08:	001a      	movs	r2, r3
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	1ad2      	subs	r2, r2, r3
 8002f0e:	0013      	movs	r3, r2
 8002f10:	4691      	mov	r9, r2
 8002f12:	021a      	lsls	r2, r3, #8
 8002f14:	d46c      	bmi.n	8002ff0 <__aeabi_dsub+0x528>
 8002f16:	464a      	mov	r2, r9
 8002f18:	464c      	mov	r4, r9
 8002f1a:	432a      	orrs	r2, r5
 8002f1c:	d000      	beq.n	8002f20 <__aeabi_dsub+0x458>
 8002f1e:	e63a      	b.n	8002b96 <__aeabi_dsub+0xce>
 8002f20:	2600      	movs	r6, #0
 8002f22:	2400      	movs	r4, #0
 8002f24:	2500      	movs	r5, #0
 8002f26:	e678      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002f28:	9902      	ldr	r1, [sp, #8]
 8002f2a:	4653      	mov	r3, sl
 8002f2c:	000d      	movs	r5, r1
 8002f2e:	3a20      	subs	r2, #32
 8002f30:	40d5      	lsrs	r5, r2
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d006      	beq.n	8002f44 <__aeabi_dsub+0x47c>
 8002f36:	2240      	movs	r2, #64	@ 0x40
 8002f38:	1ad2      	subs	r2, r2, r3
 8002f3a:	000b      	movs	r3, r1
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	4662      	mov	r2, ip
 8002f40:	431a      	orrs	r2, r3
 8002f42:	4693      	mov	fp, r2
 8002f44:	465b      	mov	r3, fp
 8002f46:	1e5a      	subs	r2, r3, #1
 8002f48:	4193      	sbcs	r3, r2
 8002f4a:	431d      	orrs	r5, r3
 8002f4c:	e619      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002f4e:	4653      	mov	r3, sl
 8002f50:	1e5a      	subs	r2, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d100      	bne.n	8002f58 <__aeabi_dsub+0x490>
 8002f56:	e0c6      	b.n	80030e6 <__aeabi_dsub+0x61e>
 8002f58:	4e9d      	ldr	r6, [pc, #628]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002f5a:	45b2      	cmp	sl, r6
 8002f5c:	d100      	bne.n	8002f60 <__aeabi_dsub+0x498>
 8002f5e:	e6bd      	b.n	8002cdc <__aeabi_dsub+0x214>
 8002f60:	4688      	mov	r8, r1
 8002f62:	000e      	movs	r6, r1
 8002f64:	2501      	movs	r5, #1
 8002f66:	2a38      	cmp	r2, #56	@ 0x38
 8002f68:	dc10      	bgt.n	8002f8c <__aeabi_dsub+0x4c4>
 8002f6a:	2a1f      	cmp	r2, #31
 8002f6c:	dc7f      	bgt.n	800306e <__aeabi_dsub+0x5a6>
 8002f6e:	2120      	movs	r1, #32
 8002f70:	0025      	movs	r5, r4
 8002f72:	1a89      	subs	r1, r1, r2
 8002f74:	0007      	movs	r7, r0
 8002f76:	4088      	lsls	r0, r1
 8002f78:	408d      	lsls	r5, r1
 8002f7a:	40d7      	lsrs	r7, r2
 8002f7c:	40d4      	lsrs	r4, r2
 8002f7e:	1e41      	subs	r1, r0, #1
 8002f80:	4188      	sbcs	r0, r1
 8002f82:	9b02      	ldr	r3, [sp, #8]
 8002f84:	433d      	orrs	r5, r7
 8002f86:	1b1b      	subs	r3, r3, r4
 8002f88:	4305      	orrs	r5, r0
 8002f8a:	9302      	str	r3, [sp, #8]
 8002f8c:	4662      	mov	r2, ip
 8002f8e:	1b55      	subs	r5, r2, r5
 8002f90:	45ac      	cmp	ip, r5
 8002f92:	4192      	sbcs	r2, r2
 8002f94:	9b02      	ldr	r3, [sp, #8]
 8002f96:	4252      	negs	r2, r2
 8002f98:	464f      	mov	r7, r9
 8002f9a:	1a9c      	subs	r4, r3, r2
 8002f9c:	e5f6      	b.n	8002b8c <__aeabi_dsub+0xc4>
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	d000      	beq.n	8002fa4 <__aeabi_dsub+0x4dc>
 8002fa2:	e0b7      	b.n	8003114 <__aeabi_dsub+0x64c>
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d100      	bne.n	8002faa <__aeabi_dsub+0x4e2>
 8002fa8:	e0f0      	b.n	800318c <__aeabi_dsub+0x6c4>
 8002faa:	2601      	movs	r6, #1
 8002fac:	400e      	ands	r6, r1
 8002fae:	4663      	mov	r3, ip
 8002fb0:	9802      	ldr	r0, [sp, #8]
 8002fb2:	08d9      	lsrs	r1, r3, #3
 8002fb4:	0742      	lsls	r2, r0, #29
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	08c4      	lsrs	r4, r0, #3
 8002fba:	e696      	b.n	8002cea <__aeabi_dsub+0x222>
 8002fbc:	4c85      	ldr	r4, [pc, #532]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002fbe:	1aff      	subs	r7, r7, r3
 8002fc0:	4014      	ands	r4, r2
 8002fc2:	0762      	lsls	r2, r4, #29
 8002fc4:	08e4      	lsrs	r4, r4, #3
 8002fc6:	e760      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 8002fc8:	4981      	ldr	r1, [pc, #516]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002fca:	428a      	cmp	r2, r1
 8002fcc:	d100      	bne.n	8002fd0 <__aeabi_dsub+0x508>
 8002fce:	e0c9      	b.n	8003164 <__aeabi_dsub+0x69c>
 8002fd0:	4663      	mov	r3, ip
 8002fd2:	18c1      	adds	r1, r0, r3
 8002fd4:	4281      	cmp	r1, r0
 8002fd6:	4180      	sbcs	r0, r0
 8002fd8:	9b02      	ldr	r3, [sp, #8]
 8002fda:	4240      	negs	r0, r0
 8002fdc:	18e3      	adds	r3, r4, r3
 8002fde:	181b      	adds	r3, r3, r0
 8002fe0:	07dd      	lsls	r5, r3, #31
 8002fe2:	085c      	lsrs	r4, r3, #1
 8002fe4:	2307      	movs	r3, #7
 8002fe6:	0849      	lsrs	r1, r1, #1
 8002fe8:	430d      	orrs	r5, r1
 8002fea:	0017      	movs	r7, r2
 8002fec:	402b      	ands	r3, r5
 8002fee:	e710      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002ff0:	4663      	mov	r3, ip
 8002ff2:	1a1d      	subs	r5, r3, r0
 8002ff4:	45ac      	cmp	ip, r5
 8002ff6:	4192      	sbcs	r2, r2
 8002ff8:	2601      	movs	r6, #1
 8002ffa:	9b02      	ldr	r3, [sp, #8]
 8002ffc:	4252      	negs	r2, r2
 8002ffe:	1b1c      	subs	r4, r3, r4
 8003000:	4688      	mov	r8, r1
 8003002:	1aa4      	subs	r4, r4, r2
 8003004:	400e      	ands	r6, r1
 8003006:	e5c6      	b.n	8002b96 <__aeabi_dsub+0xce>
 8003008:	4663      	mov	r3, ip
 800300a:	18c5      	adds	r5, r0, r3
 800300c:	9b02      	ldr	r3, [sp, #8]
 800300e:	4285      	cmp	r5, r0
 8003010:	4180      	sbcs	r0, r0
 8003012:	469c      	mov	ip, r3
 8003014:	4240      	negs	r0, r0
 8003016:	4464      	add	r4, ip
 8003018:	1824      	adds	r4, r4, r0
 800301a:	2701      	movs	r7, #1
 800301c:	0223      	lsls	r3, r4, #8
 800301e:	d400      	bmi.n	8003022 <__aeabi_dsub+0x55a>
 8003020:	e6f5      	b.n	8002e0e <__aeabi_dsub+0x346>
 8003022:	2702      	movs	r7, #2
 8003024:	e641      	b.n	8002caa <__aeabi_dsub+0x1e2>
 8003026:	4663      	mov	r3, ip
 8003028:	1ac5      	subs	r5, r0, r3
 800302a:	42a8      	cmp	r0, r5
 800302c:	4180      	sbcs	r0, r0
 800302e:	9b02      	ldr	r3, [sp, #8]
 8003030:	4240      	negs	r0, r0
 8003032:	1ae4      	subs	r4, r4, r3
 8003034:	2701      	movs	r7, #1
 8003036:	1a24      	subs	r4, r4, r0
 8003038:	e5a8      	b.n	8002b8c <__aeabi_dsub+0xc4>
 800303a:	9d02      	ldr	r5, [sp, #8]
 800303c:	4652      	mov	r2, sl
 800303e:	002b      	movs	r3, r5
 8003040:	3a20      	subs	r2, #32
 8003042:	40d3      	lsrs	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	4653      	mov	r3, sl
 8003048:	2b20      	cmp	r3, #32
 800304a:	d006      	beq.n	800305a <__aeabi_dsub+0x592>
 800304c:	2240      	movs	r2, #64	@ 0x40
 800304e:	1ad2      	subs	r2, r2, r3
 8003050:	002b      	movs	r3, r5
 8003052:	4093      	lsls	r3, r2
 8003054:	4662      	mov	r2, ip
 8003056:	431a      	orrs	r2, r3
 8003058:	4693      	mov	fp, r2
 800305a:	465d      	mov	r5, fp
 800305c:	1e6b      	subs	r3, r5, #1
 800305e:	419d      	sbcs	r5, r3
 8003060:	430d      	orrs	r5, r1
 8003062:	e615      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8003064:	0762      	lsls	r2, r4, #29
 8003066:	08c0      	lsrs	r0, r0, #3
 8003068:	4302      	orrs	r2, r0
 800306a:	08e4      	lsrs	r4, r4, #3
 800306c:	e70d      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 800306e:	0011      	movs	r1, r2
 8003070:	0027      	movs	r7, r4
 8003072:	3920      	subs	r1, #32
 8003074:	40cf      	lsrs	r7, r1
 8003076:	2a20      	cmp	r2, #32
 8003078:	d005      	beq.n	8003086 <__aeabi_dsub+0x5be>
 800307a:	2140      	movs	r1, #64	@ 0x40
 800307c:	1a8a      	subs	r2, r1, r2
 800307e:	4094      	lsls	r4, r2
 8003080:	0025      	movs	r5, r4
 8003082:	4305      	orrs	r5, r0
 8003084:	9503      	str	r5, [sp, #12]
 8003086:	9d03      	ldr	r5, [sp, #12]
 8003088:	1e6a      	subs	r2, r5, #1
 800308a:	4195      	sbcs	r5, r2
 800308c:	433d      	orrs	r5, r7
 800308e:	e77d      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 8003090:	2a00      	cmp	r2, #0
 8003092:	d100      	bne.n	8003096 <__aeabi_dsub+0x5ce>
 8003094:	e744      	b.n	8002f20 <__aeabi_dsub+0x458>
 8003096:	2601      	movs	r6, #1
 8003098:	400e      	ands	r6, r1
 800309a:	4663      	mov	r3, ip
 800309c:	08d9      	lsrs	r1, r3, #3
 800309e:	9b02      	ldr	r3, [sp, #8]
 80030a0:	075a      	lsls	r2, r3, #29
 80030a2:	430a      	orrs	r2, r1
 80030a4:	08dc      	lsrs	r4, r3, #3
 80030a6:	e6f0      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d028      	beq.n	80030fe <__aeabi_dsub+0x636>
 80030ac:	4662      	mov	r2, ip
 80030ae:	9f02      	ldr	r7, [sp, #8]
 80030b0:	08c0      	lsrs	r0, r0, #3
 80030b2:	433a      	orrs	r2, r7
 80030b4:	d100      	bne.n	80030b8 <__aeabi_dsub+0x5f0>
 80030b6:	e6dc      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 80030b8:	0762      	lsls	r2, r4, #29
 80030ba:	4310      	orrs	r0, r2
 80030bc:	2280      	movs	r2, #128	@ 0x80
 80030be:	08e4      	lsrs	r4, r4, #3
 80030c0:	0312      	lsls	r2, r2, #12
 80030c2:	4214      	tst	r4, r2
 80030c4:	d009      	beq.n	80030da <__aeabi_dsub+0x612>
 80030c6:	08fd      	lsrs	r5, r7, #3
 80030c8:	4215      	tst	r5, r2
 80030ca:	d106      	bne.n	80030da <__aeabi_dsub+0x612>
 80030cc:	4663      	mov	r3, ip
 80030ce:	2601      	movs	r6, #1
 80030d0:	002c      	movs	r4, r5
 80030d2:	08d8      	lsrs	r0, r3, #3
 80030d4:	077b      	lsls	r3, r7, #29
 80030d6:	4318      	orrs	r0, r3
 80030d8:	400e      	ands	r6, r1
 80030da:	0f42      	lsrs	r2, r0, #29
 80030dc:	00c0      	lsls	r0, r0, #3
 80030de:	08c0      	lsrs	r0, r0, #3
 80030e0:	0752      	lsls	r2, r2, #29
 80030e2:	4302      	orrs	r2, r0
 80030e4:	e601      	b.n	8002cea <__aeabi_dsub+0x222>
 80030e6:	4663      	mov	r3, ip
 80030e8:	1a1d      	subs	r5, r3, r0
 80030ea:	45ac      	cmp	ip, r5
 80030ec:	4192      	sbcs	r2, r2
 80030ee:	9b02      	ldr	r3, [sp, #8]
 80030f0:	4252      	negs	r2, r2
 80030f2:	1b1c      	subs	r4, r3, r4
 80030f4:	000e      	movs	r6, r1
 80030f6:	4688      	mov	r8, r1
 80030f8:	2701      	movs	r7, #1
 80030fa:	1aa4      	subs	r4, r4, r2
 80030fc:	e546      	b.n	8002b8c <__aeabi_dsub+0xc4>
 80030fe:	4663      	mov	r3, ip
 8003100:	08d9      	lsrs	r1, r3, #3
 8003102:	9b02      	ldr	r3, [sp, #8]
 8003104:	075a      	lsls	r2, r3, #29
 8003106:	430a      	orrs	r2, r1
 8003108:	08dc      	lsrs	r4, r3, #3
 800310a:	e5ee      	b.n	8002cea <__aeabi_dsub+0x222>
 800310c:	4663      	mov	r3, ip
 800310e:	9c02      	ldr	r4, [sp, #8]
 8003110:	9303      	str	r3, [sp, #12]
 8003112:	e6c7      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8003114:	08c0      	lsrs	r0, r0, #3
 8003116:	2a00      	cmp	r2, #0
 8003118:	d100      	bne.n	800311c <__aeabi_dsub+0x654>
 800311a:	e6aa      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 800311c:	0762      	lsls	r2, r4, #29
 800311e:	4310      	orrs	r0, r2
 8003120:	2280      	movs	r2, #128	@ 0x80
 8003122:	08e4      	lsrs	r4, r4, #3
 8003124:	0312      	lsls	r2, r2, #12
 8003126:	4214      	tst	r4, r2
 8003128:	d0d7      	beq.n	80030da <__aeabi_dsub+0x612>
 800312a:	9f02      	ldr	r7, [sp, #8]
 800312c:	08fd      	lsrs	r5, r7, #3
 800312e:	4215      	tst	r5, r2
 8003130:	d1d3      	bne.n	80030da <__aeabi_dsub+0x612>
 8003132:	4663      	mov	r3, ip
 8003134:	2601      	movs	r6, #1
 8003136:	08d8      	lsrs	r0, r3, #3
 8003138:	077b      	lsls	r3, r7, #29
 800313a:	002c      	movs	r4, r5
 800313c:	4318      	orrs	r0, r3
 800313e:	400e      	ands	r6, r1
 8003140:	e7cb      	b.n	80030da <__aeabi_dsub+0x612>
 8003142:	000a      	movs	r2, r1
 8003144:	0027      	movs	r7, r4
 8003146:	3a20      	subs	r2, #32
 8003148:	40d7      	lsrs	r7, r2
 800314a:	2920      	cmp	r1, #32
 800314c:	d005      	beq.n	800315a <__aeabi_dsub+0x692>
 800314e:	2240      	movs	r2, #64	@ 0x40
 8003150:	1a52      	subs	r2, r2, r1
 8003152:	4094      	lsls	r4, r2
 8003154:	0025      	movs	r5, r4
 8003156:	4305      	orrs	r5, r0
 8003158:	9503      	str	r5, [sp, #12]
 800315a:	9d03      	ldr	r5, [sp, #12]
 800315c:	1e6a      	subs	r2, r5, #1
 800315e:	4195      	sbcs	r5, r2
 8003160:	432f      	orrs	r7, r5
 8003162:	e610      	b.n	8002d86 <__aeabi_dsub+0x2be>
 8003164:	0014      	movs	r4, r2
 8003166:	2500      	movs	r5, #0
 8003168:	2200      	movs	r2, #0
 800316a:	e556      	b.n	8002c1a <__aeabi_dsub+0x152>
 800316c:	9b02      	ldr	r3, [sp, #8]
 800316e:	4460      	add	r0, ip
 8003170:	4699      	mov	r9, r3
 8003172:	4560      	cmp	r0, ip
 8003174:	4192      	sbcs	r2, r2
 8003176:	444c      	add	r4, r9
 8003178:	4252      	negs	r2, r2
 800317a:	0005      	movs	r5, r0
 800317c:	18a4      	adds	r4, r4, r2
 800317e:	e74c      	b.n	800301a <__aeabi_dsub+0x552>
 8003180:	001a      	movs	r2, r3
 8003182:	001c      	movs	r4, r3
 8003184:	432a      	orrs	r2, r5
 8003186:	d000      	beq.n	800318a <__aeabi_dsub+0x6c2>
 8003188:	e6b3      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 800318a:	e6c9      	b.n	8002f20 <__aeabi_dsub+0x458>
 800318c:	2480      	movs	r4, #128	@ 0x80
 800318e:	2600      	movs	r6, #0
 8003190:	0324      	lsls	r4, r4, #12
 8003192:	e5ae      	b.n	8002cf2 <__aeabi_dsub+0x22a>
 8003194:	2120      	movs	r1, #32
 8003196:	2500      	movs	r5, #0
 8003198:	1a09      	subs	r1, r1, r0
 800319a:	e517      	b.n	8002bcc <__aeabi_dsub+0x104>
 800319c:	2200      	movs	r2, #0
 800319e:	2500      	movs	r5, #0
 80031a0:	4c0b      	ldr	r4, [pc, #44]	@ (80031d0 <__aeabi_dsub+0x708>)
 80031a2:	e53a      	b.n	8002c1a <__aeabi_dsub+0x152>
 80031a4:	2d00      	cmp	r5, #0
 80031a6:	d100      	bne.n	80031aa <__aeabi_dsub+0x6e2>
 80031a8:	e5f6      	b.n	8002d98 <__aeabi_dsub+0x2d0>
 80031aa:	464b      	mov	r3, r9
 80031ac:	1bda      	subs	r2, r3, r7
 80031ae:	4692      	mov	sl, r2
 80031b0:	2f00      	cmp	r7, #0
 80031b2:	d100      	bne.n	80031b6 <__aeabi_dsub+0x6ee>
 80031b4:	e66f      	b.n	8002e96 <__aeabi_dsub+0x3ce>
 80031b6:	2a38      	cmp	r2, #56	@ 0x38
 80031b8:	dc05      	bgt.n	80031c6 <__aeabi_dsub+0x6fe>
 80031ba:	2680      	movs	r6, #128	@ 0x80
 80031bc:	0436      	lsls	r6, r6, #16
 80031be:	4334      	orrs	r4, r6
 80031c0:	4688      	mov	r8, r1
 80031c2:	000e      	movs	r6, r1
 80031c4:	e6d1      	b.n	8002f6a <__aeabi_dsub+0x4a2>
 80031c6:	4688      	mov	r8, r1
 80031c8:	000e      	movs	r6, r1
 80031ca:	2501      	movs	r5, #1
 80031cc:	e6de      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	000007ff 	.word	0x000007ff
 80031d4:	ff7fffff 	.word	0xff7fffff
 80031d8:	000007fe 	.word	0x000007fe
 80031dc:	2d00      	cmp	r5, #0
 80031de:	d100      	bne.n	80031e2 <__aeabi_dsub+0x71a>
 80031e0:	e668      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 80031e2:	464b      	mov	r3, r9
 80031e4:	1bd9      	subs	r1, r3, r7
 80031e6:	2f00      	cmp	r7, #0
 80031e8:	d101      	bne.n	80031ee <__aeabi_dsub+0x726>
 80031ea:	468a      	mov	sl, r1
 80031ec:	e5a7      	b.n	8002d3e <__aeabi_dsub+0x276>
 80031ee:	2701      	movs	r7, #1
 80031f0:	2938      	cmp	r1, #56	@ 0x38
 80031f2:	dd00      	ble.n	80031f6 <__aeabi_dsub+0x72e>
 80031f4:	e5c7      	b.n	8002d86 <__aeabi_dsub+0x2be>
 80031f6:	2280      	movs	r2, #128	@ 0x80
 80031f8:	0412      	lsls	r2, r2, #16
 80031fa:	4314      	orrs	r4, r2
 80031fc:	e5af      	b.n	8002d5e <__aeabi_dsub+0x296>
 80031fe:	46c0      	nop			@ (mov r8, r8)

08003200 <__aeabi_dcmpun>:
 8003200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003202:	46c6      	mov	lr, r8
 8003204:	031e      	lsls	r6, r3, #12
 8003206:	0b36      	lsrs	r6, r6, #12
 8003208:	46b0      	mov	r8, r6
 800320a:	4e0d      	ldr	r6, [pc, #52]	@ (8003240 <__aeabi_dcmpun+0x40>)
 800320c:	030c      	lsls	r4, r1, #12
 800320e:	004d      	lsls	r5, r1, #1
 8003210:	005f      	lsls	r7, r3, #1
 8003212:	b500      	push	{lr}
 8003214:	0b24      	lsrs	r4, r4, #12
 8003216:	0d6d      	lsrs	r5, r5, #21
 8003218:	0d7f      	lsrs	r7, r7, #21
 800321a:	42b5      	cmp	r5, r6
 800321c:	d00b      	beq.n	8003236 <__aeabi_dcmpun+0x36>
 800321e:	4908      	ldr	r1, [pc, #32]	@ (8003240 <__aeabi_dcmpun+0x40>)
 8003220:	2000      	movs	r0, #0
 8003222:	428f      	cmp	r7, r1
 8003224:	d104      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 8003226:	4646      	mov	r6, r8
 8003228:	4316      	orrs	r6, r2
 800322a:	0030      	movs	r0, r6
 800322c:	1e43      	subs	r3, r0, #1
 800322e:	4198      	sbcs	r0, r3
 8003230:	bc80      	pop	{r7}
 8003232:	46b8      	mov	r8, r7
 8003234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003236:	4304      	orrs	r4, r0
 8003238:	2001      	movs	r0, #1
 800323a:	2c00      	cmp	r4, #0
 800323c:	d1f8      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 800323e:	e7ee      	b.n	800321e <__aeabi_dcmpun+0x1e>
 8003240:	000007ff 	.word	0x000007ff

08003244 <__aeabi_d2iz>:
 8003244:	000b      	movs	r3, r1
 8003246:	0002      	movs	r2, r0
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	4d16      	ldr	r5, [pc, #88]	@ (80032a4 <__aeabi_d2iz+0x60>)
 800324c:	030c      	lsls	r4, r1, #12
 800324e:	b082      	sub	sp, #8
 8003250:	0049      	lsls	r1, r1, #1
 8003252:	2000      	movs	r0, #0
 8003254:	9200      	str	r2, [sp, #0]
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	0b24      	lsrs	r4, r4, #12
 800325a:	0d49      	lsrs	r1, r1, #21
 800325c:	0fde      	lsrs	r6, r3, #31
 800325e:	42a9      	cmp	r1, r5
 8003260:	dd04      	ble.n	800326c <__aeabi_d2iz+0x28>
 8003262:	4811      	ldr	r0, [pc, #68]	@ (80032a8 <__aeabi_d2iz+0x64>)
 8003264:	4281      	cmp	r1, r0
 8003266:	dd03      	ble.n	8003270 <__aeabi_d2iz+0x2c>
 8003268:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <__aeabi_d2iz+0x68>)
 800326a:	18f0      	adds	r0, r6, r3
 800326c:	b002      	add	sp, #8
 800326e:	bd70      	pop	{r4, r5, r6, pc}
 8003270:	2080      	movs	r0, #128	@ 0x80
 8003272:	0340      	lsls	r0, r0, #13
 8003274:	4320      	orrs	r0, r4
 8003276:	4c0e      	ldr	r4, [pc, #56]	@ (80032b0 <__aeabi_d2iz+0x6c>)
 8003278:	1a64      	subs	r4, r4, r1
 800327a:	2c1f      	cmp	r4, #31
 800327c:	dd08      	ble.n	8003290 <__aeabi_d2iz+0x4c>
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <__aeabi_d2iz+0x70>)
 8003280:	1a5b      	subs	r3, r3, r1
 8003282:	40d8      	lsrs	r0, r3
 8003284:	0003      	movs	r3, r0
 8003286:	4258      	negs	r0, r3
 8003288:	2e00      	cmp	r6, #0
 800328a:	d1ef      	bne.n	800326c <__aeabi_d2iz+0x28>
 800328c:	0018      	movs	r0, r3
 800328e:	e7ed      	b.n	800326c <__aeabi_d2iz+0x28>
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <__aeabi_d2iz+0x74>)
 8003292:	9a00      	ldr	r2, [sp, #0]
 8003294:	469c      	mov	ip, r3
 8003296:	0003      	movs	r3, r0
 8003298:	4461      	add	r1, ip
 800329a:	408b      	lsls	r3, r1
 800329c:	40e2      	lsrs	r2, r4
 800329e:	4313      	orrs	r3, r2
 80032a0:	e7f1      	b.n	8003286 <__aeabi_d2iz+0x42>
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	000003fe 	.word	0x000003fe
 80032a8:	0000041d 	.word	0x0000041d
 80032ac:	7fffffff 	.word	0x7fffffff
 80032b0:	00000433 	.word	0x00000433
 80032b4:	00000413 	.word	0x00000413
 80032b8:	fffffbed 	.word	0xfffffbed

080032bc <__aeabi_i2d>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	2800      	cmp	r0, #0
 80032c0:	d016      	beq.n	80032f0 <__aeabi_i2d+0x34>
 80032c2:	17c3      	asrs	r3, r0, #31
 80032c4:	18c5      	adds	r5, r0, r3
 80032c6:	405d      	eors	r5, r3
 80032c8:	0fc4      	lsrs	r4, r0, #31
 80032ca:	0028      	movs	r0, r5
 80032cc:	f000 f914 	bl	80034f8 <__clzsi2>
 80032d0:	4b10      	ldr	r3, [pc, #64]	@ (8003314 <__aeabi_i2d+0x58>)
 80032d2:	1a1b      	subs	r3, r3, r0
 80032d4:	055b      	lsls	r3, r3, #21
 80032d6:	0d5b      	lsrs	r3, r3, #21
 80032d8:	280a      	cmp	r0, #10
 80032da:	dc14      	bgt.n	8003306 <__aeabi_i2d+0x4a>
 80032dc:	0002      	movs	r2, r0
 80032de:	002e      	movs	r6, r5
 80032e0:	3215      	adds	r2, #21
 80032e2:	4096      	lsls	r6, r2
 80032e4:	220b      	movs	r2, #11
 80032e6:	1a12      	subs	r2, r2, r0
 80032e8:	40d5      	lsrs	r5, r2
 80032ea:	032d      	lsls	r5, r5, #12
 80032ec:	0b2d      	lsrs	r5, r5, #12
 80032ee:	e003      	b.n	80032f8 <__aeabi_i2d+0x3c>
 80032f0:	2400      	movs	r4, #0
 80032f2:	2300      	movs	r3, #0
 80032f4:	2500      	movs	r5, #0
 80032f6:	2600      	movs	r6, #0
 80032f8:	051b      	lsls	r3, r3, #20
 80032fa:	432b      	orrs	r3, r5
 80032fc:	07e4      	lsls	r4, r4, #31
 80032fe:	4323      	orrs	r3, r4
 8003300:	0030      	movs	r0, r6
 8003302:	0019      	movs	r1, r3
 8003304:	bd70      	pop	{r4, r5, r6, pc}
 8003306:	380b      	subs	r0, #11
 8003308:	4085      	lsls	r5, r0
 800330a:	032d      	lsls	r5, r5, #12
 800330c:	2600      	movs	r6, #0
 800330e:	0b2d      	lsrs	r5, r5, #12
 8003310:	e7f2      	b.n	80032f8 <__aeabi_i2d+0x3c>
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	0000041e 	.word	0x0000041e

08003318 <__aeabi_ui2d>:
 8003318:	b510      	push	{r4, lr}
 800331a:	1e04      	subs	r4, r0, #0
 800331c:	d010      	beq.n	8003340 <__aeabi_ui2d+0x28>
 800331e:	f000 f8eb 	bl	80034f8 <__clzsi2>
 8003322:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <__aeabi_ui2d+0x44>)
 8003324:	1a1b      	subs	r3, r3, r0
 8003326:	055b      	lsls	r3, r3, #21
 8003328:	0d5b      	lsrs	r3, r3, #21
 800332a:	280a      	cmp	r0, #10
 800332c:	dc0f      	bgt.n	800334e <__aeabi_ui2d+0x36>
 800332e:	220b      	movs	r2, #11
 8003330:	0021      	movs	r1, r4
 8003332:	1a12      	subs	r2, r2, r0
 8003334:	40d1      	lsrs	r1, r2
 8003336:	3015      	adds	r0, #21
 8003338:	030a      	lsls	r2, r1, #12
 800333a:	4084      	lsls	r4, r0
 800333c:	0b12      	lsrs	r2, r2, #12
 800333e:	e001      	b.n	8003344 <__aeabi_ui2d+0x2c>
 8003340:	2300      	movs	r3, #0
 8003342:	2200      	movs	r2, #0
 8003344:	051b      	lsls	r3, r3, #20
 8003346:	4313      	orrs	r3, r2
 8003348:	0020      	movs	r0, r4
 800334a:	0019      	movs	r1, r3
 800334c:	bd10      	pop	{r4, pc}
 800334e:	0022      	movs	r2, r4
 8003350:	380b      	subs	r0, #11
 8003352:	4082      	lsls	r2, r0
 8003354:	0312      	lsls	r2, r2, #12
 8003356:	2400      	movs	r4, #0
 8003358:	0b12      	lsrs	r2, r2, #12
 800335a:	e7f3      	b.n	8003344 <__aeabi_ui2d+0x2c>
 800335c:	0000041e 	.word	0x0000041e

08003360 <__aeabi_f2d>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	0242      	lsls	r2, r0, #9
 8003364:	0043      	lsls	r3, r0, #1
 8003366:	0fc4      	lsrs	r4, r0, #31
 8003368:	20fe      	movs	r0, #254	@ 0xfe
 800336a:	0e1b      	lsrs	r3, r3, #24
 800336c:	1c59      	adds	r1, r3, #1
 800336e:	0a55      	lsrs	r5, r2, #9
 8003370:	4208      	tst	r0, r1
 8003372:	d00c      	beq.n	800338e <__aeabi_f2d+0x2e>
 8003374:	21e0      	movs	r1, #224	@ 0xe0
 8003376:	0089      	lsls	r1, r1, #2
 8003378:	468c      	mov	ip, r1
 800337a:	076d      	lsls	r5, r5, #29
 800337c:	0b12      	lsrs	r2, r2, #12
 800337e:	4463      	add	r3, ip
 8003380:	051b      	lsls	r3, r3, #20
 8003382:	4313      	orrs	r3, r2
 8003384:	07e4      	lsls	r4, r4, #31
 8003386:	4323      	orrs	r3, r4
 8003388:	0028      	movs	r0, r5
 800338a:	0019      	movs	r1, r3
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	2b00      	cmp	r3, #0
 8003390:	d114      	bne.n	80033bc <__aeabi_f2d+0x5c>
 8003392:	2d00      	cmp	r5, #0
 8003394:	d01b      	beq.n	80033ce <__aeabi_f2d+0x6e>
 8003396:	0028      	movs	r0, r5
 8003398:	f000 f8ae 	bl	80034f8 <__clzsi2>
 800339c:	280a      	cmp	r0, #10
 800339e:	dc1c      	bgt.n	80033da <__aeabi_f2d+0x7a>
 80033a0:	230b      	movs	r3, #11
 80033a2:	002a      	movs	r2, r5
 80033a4:	1a1b      	subs	r3, r3, r0
 80033a6:	40da      	lsrs	r2, r3
 80033a8:	0003      	movs	r3, r0
 80033aa:	3315      	adds	r3, #21
 80033ac:	409d      	lsls	r5, r3
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <__aeabi_f2d+0x88>)
 80033b0:	0312      	lsls	r2, r2, #12
 80033b2:	1a1b      	subs	r3, r3, r0
 80033b4:	055b      	lsls	r3, r3, #21
 80033b6:	0b12      	lsrs	r2, r2, #12
 80033b8:	0d5b      	lsrs	r3, r3, #21
 80033ba:	e7e1      	b.n	8003380 <__aeabi_f2d+0x20>
 80033bc:	2d00      	cmp	r5, #0
 80033be:	d009      	beq.n	80033d4 <__aeabi_f2d+0x74>
 80033c0:	0b13      	lsrs	r3, r2, #12
 80033c2:	2280      	movs	r2, #128	@ 0x80
 80033c4:	0312      	lsls	r2, r2, #12
 80033c6:	431a      	orrs	r2, r3
 80033c8:	076d      	lsls	r5, r5, #29
 80033ca:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033cc:	e7d8      	b.n	8003380 <__aeabi_f2d+0x20>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2200      	movs	r2, #0
 80033d2:	e7d5      	b.n	8003380 <__aeabi_f2d+0x20>
 80033d4:	2200      	movs	r2, #0
 80033d6:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033d8:	e7d2      	b.n	8003380 <__aeabi_f2d+0x20>
 80033da:	0003      	movs	r3, r0
 80033dc:	002a      	movs	r2, r5
 80033de:	3b0b      	subs	r3, #11
 80033e0:	409a      	lsls	r2, r3
 80033e2:	2500      	movs	r5, #0
 80033e4:	e7e3      	b.n	80033ae <__aeabi_f2d+0x4e>
 80033e6:	46c0      	nop			@ (mov r8, r8)
 80033e8:	00000389 	.word	0x00000389
 80033ec:	000007ff 	.word	0x000007ff

080033f0 <__aeabi_d2f>:
 80033f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f2:	004b      	lsls	r3, r1, #1
 80033f4:	030f      	lsls	r7, r1, #12
 80033f6:	0d5b      	lsrs	r3, r3, #21
 80033f8:	4c3b      	ldr	r4, [pc, #236]	@ (80034e8 <__aeabi_d2f+0xf8>)
 80033fa:	0f45      	lsrs	r5, r0, #29
 80033fc:	b083      	sub	sp, #12
 80033fe:	0a7f      	lsrs	r7, r7, #9
 8003400:	1c5e      	adds	r6, r3, #1
 8003402:	432f      	orrs	r7, r5
 8003404:	9000      	str	r0, [sp, #0]
 8003406:	9101      	str	r1, [sp, #4]
 8003408:	0fca      	lsrs	r2, r1, #31
 800340a:	00c5      	lsls	r5, r0, #3
 800340c:	4226      	tst	r6, r4
 800340e:	d00b      	beq.n	8003428 <__aeabi_d2f+0x38>
 8003410:	4936      	ldr	r1, [pc, #216]	@ (80034ec <__aeabi_d2f+0xfc>)
 8003412:	185c      	adds	r4, r3, r1
 8003414:	2cfe      	cmp	r4, #254	@ 0xfe
 8003416:	dd13      	ble.n	8003440 <__aeabi_d2f+0x50>
 8003418:	20ff      	movs	r0, #255	@ 0xff
 800341a:	2300      	movs	r3, #0
 800341c:	05c0      	lsls	r0, r0, #23
 800341e:	4318      	orrs	r0, r3
 8003420:	07d2      	lsls	r2, r2, #31
 8003422:	4310      	orrs	r0, r2
 8003424:	b003      	add	sp, #12
 8003426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <__aeabi_d2f+0x42>
 800342c:	2000      	movs	r0, #0
 800342e:	2300      	movs	r3, #0
 8003430:	e7f4      	b.n	800341c <__aeabi_d2f+0x2c>
 8003432:	433d      	orrs	r5, r7
 8003434:	d0f0      	beq.n	8003418 <__aeabi_d2f+0x28>
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	03db      	lsls	r3, r3, #15
 800343a:	20ff      	movs	r0, #255	@ 0xff
 800343c:	433b      	orrs	r3, r7
 800343e:	e7ed      	b.n	800341c <__aeabi_d2f+0x2c>
 8003440:	2c00      	cmp	r4, #0
 8003442:	dd14      	ble.n	800346e <__aeabi_d2f+0x7e>
 8003444:	9b00      	ldr	r3, [sp, #0]
 8003446:	00ff      	lsls	r7, r7, #3
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	4183      	sbcs	r3, r0
 800344e:	0f69      	lsrs	r1, r5, #29
 8003450:	433b      	orrs	r3, r7
 8003452:	430b      	orrs	r3, r1
 8003454:	0759      	lsls	r1, r3, #29
 8003456:	d041      	beq.n	80034dc <__aeabi_d2f+0xec>
 8003458:	210f      	movs	r1, #15
 800345a:	4019      	ands	r1, r3
 800345c:	2904      	cmp	r1, #4
 800345e:	d028      	beq.n	80034b2 <__aeabi_d2f+0xc2>
 8003460:	3304      	adds	r3, #4
 8003462:	0159      	lsls	r1, r3, #5
 8003464:	d525      	bpl.n	80034b2 <__aeabi_d2f+0xc2>
 8003466:	3401      	adds	r4, #1
 8003468:	2300      	movs	r3, #0
 800346a:	b2e0      	uxtb	r0, r4
 800346c:	e7d6      	b.n	800341c <__aeabi_d2f+0x2c>
 800346e:	0021      	movs	r1, r4
 8003470:	3117      	adds	r1, #23
 8003472:	dbdb      	blt.n	800342c <__aeabi_d2f+0x3c>
 8003474:	2180      	movs	r1, #128	@ 0x80
 8003476:	201e      	movs	r0, #30
 8003478:	0409      	lsls	r1, r1, #16
 800347a:	4339      	orrs	r1, r7
 800347c:	1b00      	subs	r0, r0, r4
 800347e:	281f      	cmp	r0, #31
 8003480:	dd1b      	ble.n	80034ba <__aeabi_d2f+0xca>
 8003482:	2602      	movs	r6, #2
 8003484:	4276      	negs	r6, r6
 8003486:	1b34      	subs	r4, r6, r4
 8003488:	000e      	movs	r6, r1
 800348a:	40e6      	lsrs	r6, r4
 800348c:	0034      	movs	r4, r6
 800348e:	2820      	cmp	r0, #32
 8003490:	d004      	beq.n	800349c <__aeabi_d2f+0xac>
 8003492:	4817      	ldr	r0, [pc, #92]	@ (80034f0 <__aeabi_d2f+0x100>)
 8003494:	4684      	mov	ip, r0
 8003496:	4463      	add	r3, ip
 8003498:	4099      	lsls	r1, r3
 800349a:	430d      	orrs	r5, r1
 800349c:	002b      	movs	r3, r5
 800349e:	1e59      	subs	r1, r3, #1
 80034a0:	418b      	sbcs	r3, r1
 80034a2:	4323      	orrs	r3, r4
 80034a4:	0759      	lsls	r1, r3, #29
 80034a6:	d015      	beq.n	80034d4 <__aeabi_d2f+0xe4>
 80034a8:	210f      	movs	r1, #15
 80034aa:	2400      	movs	r4, #0
 80034ac:	4019      	ands	r1, r3
 80034ae:	2904      	cmp	r1, #4
 80034b0:	d117      	bne.n	80034e2 <__aeabi_d2f+0xf2>
 80034b2:	019b      	lsls	r3, r3, #6
 80034b4:	0a5b      	lsrs	r3, r3, #9
 80034b6:	b2e0      	uxtb	r0, r4
 80034b8:	e7b0      	b.n	800341c <__aeabi_d2f+0x2c>
 80034ba:	4c0e      	ldr	r4, [pc, #56]	@ (80034f4 <__aeabi_d2f+0x104>)
 80034bc:	191c      	adds	r4, r3, r4
 80034be:	002b      	movs	r3, r5
 80034c0:	40a5      	lsls	r5, r4
 80034c2:	40c3      	lsrs	r3, r0
 80034c4:	40a1      	lsls	r1, r4
 80034c6:	1e68      	subs	r0, r5, #1
 80034c8:	4185      	sbcs	r5, r0
 80034ca:	4329      	orrs	r1, r5
 80034cc:	430b      	orrs	r3, r1
 80034ce:	2400      	movs	r4, #0
 80034d0:	0759      	lsls	r1, r3, #29
 80034d2:	d1c1      	bne.n	8003458 <__aeabi_d2f+0x68>
 80034d4:	019b      	lsls	r3, r3, #6
 80034d6:	2000      	movs	r0, #0
 80034d8:	0a5b      	lsrs	r3, r3, #9
 80034da:	e79f      	b.n	800341c <__aeabi_d2f+0x2c>
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	b2e0      	uxtb	r0, r4
 80034e0:	e79c      	b.n	800341c <__aeabi_d2f+0x2c>
 80034e2:	3304      	adds	r3, #4
 80034e4:	e7e5      	b.n	80034b2 <__aeabi_d2f+0xc2>
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	000007fe 	.word	0x000007fe
 80034ec:	fffffc80 	.word	0xfffffc80
 80034f0:	fffffca2 	.word	0xfffffca2
 80034f4:	fffffc82 	.word	0xfffffc82

080034f8 <__clzsi2>:
 80034f8:	211c      	movs	r1, #28
 80034fa:	2301      	movs	r3, #1
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	4298      	cmp	r0, r3
 8003500:	d301      	bcc.n	8003506 <__clzsi2+0xe>
 8003502:	0c00      	lsrs	r0, r0, #16
 8003504:	3910      	subs	r1, #16
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	4298      	cmp	r0, r3
 800350a:	d301      	bcc.n	8003510 <__clzsi2+0x18>
 800350c:	0a00      	lsrs	r0, r0, #8
 800350e:	3908      	subs	r1, #8
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	4298      	cmp	r0, r3
 8003514:	d301      	bcc.n	800351a <__clzsi2+0x22>
 8003516:	0900      	lsrs	r0, r0, #4
 8003518:	3904      	subs	r1, #4
 800351a:	a202      	add	r2, pc, #8	@ (adr r2, 8003524 <__clzsi2+0x2c>)
 800351c:	5c10      	ldrb	r0, [r2, r0]
 800351e:	1840      	adds	r0, r0, r1
 8003520:	4770      	bx	lr
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	02020304 	.word	0x02020304
 8003528:	01010101 	.word	0x01010101
	...

08003534 <__clzdi2>:
 8003534:	b510      	push	{r4, lr}
 8003536:	2900      	cmp	r1, #0
 8003538:	d103      	bne.n	8003542 <__clzdi2+0xe>
 800353a:	f7ff ffdd 	bl	80034f8 <__clzsi2>
 800353e:	3020      	adds	r0, #32
 8003540:	e002      	b.n	8003548 <__clzdi2+0x14>
 8003542:	0008      	movs	r0, r1
 8003544:	f7ff ffd8 	bl	80034f8 <__clzsi2>
 8003548:	bd10      	pop	{r4, pc}
 800354a:	46c0      	nop			@ (mov r8, r8)

0800354c <batteryInit>:
static ADC_HandleTypeDef* ADC_Handler = NULL;
float Charge = 0;
float Solar = 0;
uint16_t Vref = 3;

void batteryInit(ADC_HandleTypeDef* ADC_HANDLER){
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  ADC_Handler = ADC_HANDLER;
 8003554:	4b03      	ldr	r3, [pc, #12]	@ (8003564 <batteryInit+0x18>)
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	601a      	str	r2, [r3, #0]
}
 800355a:	46c0      	nop			@ (mov r8, r8)
 800355c:	46bd      	mov	sp, r7
 800355e:	b002      	add	sp, #8
 8003560:	bd80      	pop	{r7, pc}
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	200004c4 	.word	0x200004c4

08003568 <checkCharges>:

void checkCharges(){
 8003568:	b5b0      	push	{r4, r5, r7, lr}
 800356a:	af00      	add	r7, sp, #0
  HAL_ADC_Start(ADC_Handler);
 800356c:	4b41      	ldr	r3, [pc, #260]	@ (8003674 <checkCharges+0x10c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	0018      	movs	r0, r3
 8003572:	f006 f817 	bl	80095a4 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(ADC_Handler, 1);
 8003576:	4b3f      	ldr	r3, [pc, #252]	@ (8003674 <checkCharges+0x10c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2101      	movs	r1, #1
 800357c:	0018      	movs	r0, r3
 800357e:	f006 f865 	bl	800964c <HAL_ADC_PollForConversion>
  Charge = ((float)HAL_ADC_GetValue(ADC_Handler)/4095.0)*Vref*2;
 8003582:	4b3c      	ldr	r3, [pc, #240]	@ (8003674 <checkCharges+0x10c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	0018      	movs	r0, r3
 8003588:	f006 f8fc 	bl	8009784 <HAL_ADC_GetValue>
 800358c:	0003      	movs	r3, r0
 800358e:	0018      	movs	r0, r3
 8003590:	f7fd ffe8 	bl	8001564 <__aeabi_ui2f>
 8003594:	1c03      	adds	r3, r0, #0
 8003596:	1c18      	adds	r0, r3, #0
 8003598:	f7ff fee2 	bl	8003360 <__aeabi_f2d>
 800359c:	2200      	movs	r2, #0
 800359e:	4b36      	ldr	r3, [pc, #216]	@ (8003678 <checkCharges+0x110>)
 80035a0:	f7fe fb86 	bl	8001cb0 <__aeabi_ddiv>
 80035a4:	0002      	movs	r2, r0
 80035a6:	000b      	movs	r3, r1
 80035a8:	0014      	movs	r4, r2
 80035aa:	001d      	movs	r5, r3
 80035ac:	4b33      	ldr	r3, [pc, #204]	@ (800367c <checkCharges+0x114>)
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	0018      	movs	r0, r3
 80035b2:	f7ff fe83 	bl	80032bc <__aeabi_i2d>
 80035b6:	0002      	movs	r2, r0
 80035b8:	000b      	movs	r3, r1
 80035ba:	0020      	movs	r0, r4
 80035bc:	0029      	movs	r1, r5
 80035be:	f7fe ffbb 	bl	8002538 <__aeabi_dmul>
 80035c2:	0002      	movs	r2, r0
 80035c4:	000b      	movs	r3, r1
 80035c6:	0010      	movs	r0, r2
 80035c8:	0019      	movs	r1, r3
 80035ca:	0002      	movs	r2, r0
 80035cc:	000b      	movs	r3, r1
 80035ce:	f7fe f80b 	bl	80015e8 <__aeabi_dadd>
 80035d2:	0002      	movs	r2, r0
 80035d4:	000b      	movs	r3, r1
 80035d6:	0010      	movs	r0, r2
 80035d8:	0019      	movs	r1, r3
 80035da:	f7ff ff09 	bl	80033f0 <__aeabi_d2f>
 80035de:	1c02      	adds	r2, r0, #0
 80035e0:	4b27      	ldr	r3, [pc, #156]	@ (8003680 <checkCharges+0x118>)
 80035e2:	601a      	str	r2, [r3, #0]
  HAL_ADC_Start(ADC_Handler);
 80035e4:	4b23      	ldr	r3, [pc, #140]	@ (8003674 <checkCharges+0x10c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	0018      	movs	r0, r3
 80035ea:	f005 ffdb 	bl	80095a4 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(ADC_Handler, 1);
 80035ee:	4b21      	ldr	r3, [pc, #132]	@ (8003674 <checkCharges+0x10c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2101      	movs	r1, #1
 80035f4:	0018      	movs	r0, r3
 80035f6:	f006 f829 	bl	800964c <HAL_ADC_PollForConversion>
  Solar = ((float)HAL_ADC_GetValue(ADC_Handler)/4095.0)*Vref*2;
 80035fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003674 <checkCharges+0x10c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	0018      	movs	r0, r3
 8003600:	f006 f8c0 	bl	8009784 <HAL_ADC_GetValue>
 8003604:	0003      	movs	r3, r0
 8003606:	0018      	movs	r0, r3
 8003608:	f7fd ffac 	bl	8001564 <__aeabi_ui2f>
 800360c:	1c03      	adds	r3, r0, #0
 800360e:	1c18      	adds	r0, r3, #0
 8003610:	f7ff fea6 	bl	8003360 <__aeabi_f2d>
 8003614:	2200      	movs	r2, #0
 8003616:	4b18      	ldr	r3, [pc, #96]	@ (8003678 <checkCharges+0x110>)
 8003618:	f7fe fb4a 	bl	8001cb0 <__aeabi_ddiv>
 800361c:	0002      	movs	r2, r0
 800361e:	000b      	movs	r3, r1
 8003620:	0014      	movs	r4, r2
 8003622:	001d      	movs	r5, r3
 8003624:	4b15      	ldr	r3, [pc, #84]	@ (800367c <checkCharges+0x114>)
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	0018      	movs	r0, r3
 800362a:	f7ff fe47 	bl	80032bc <__aeabi_i2d>
 800362e:	0002      	movs	r2, r0
 8003630:	000b      	movs	r3, r1
 8003632:	0020      	movs	r0, r4
 8003634:	0029      	movs	r1, r5
 8003636:	f7fe ff7f 	bl	8002538 <__aeabi_dmul>
 800363a:	0002      	movs	r2, r0
 800363c:	000b      	movs	r3, r1
 800363e:	0010      	movs	r0, r2
 8003640:	0019      	movs	r1, r3
 8003642:	0002      	movs	r2, r0
 8003644:	000b      	movs	r3, r1
 8003646:	f7fd ffcf 	bl	80015e8 <__aeabi_dadd>
 800364a:	0002      	movs	r2, r0
 800364c:	000b      	movs	r3, r1
 800364e:	0010      	movs	r0, r2
 8003650:	0019      	movs	r1, r3
 8003652:	f7ff fecd 	bl	80033f0 <__aeabi_d2f>
 8003656:	1c02      	adds	r2, r0, #0
 8003658:	4b0a      	ldr	r3, [pc, #40]	@ (8003684 <checkCharges+0x11c>)
 800365a:	601a      	str	r2, [r3, #0]
  setCharges(Charge, Solar);
 800365c:	4b08      	ldr	r3, [pc, #32]	@ (8003680 <checkCharges+0x118>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4b08      	ldr	r3, [pc, #32]	@ (8003684 <checkCharges+0x11c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	1c19      	adds	r1, r3, #0
 8003666:	1c10      	adds	r0, r2, #0
 8003668:	f000 f80e 	bl	8003688 <setCharges>
}
 800366c:	46c0      	nop			@ (mov r8, r8)
 800366e:	46bd      	mov	sp, r7
 8003670:	bdb0      	pop	{r4, r5, r7, pc}
 8003672:	46c0      	nop			@ (mov r8, r8)
 8003674:	200004c4 	.word	0x200004c4
 8003678:	40affe00 	.word	0x40affe00
 800367c:	20000000 	.word	0x20000000
 8003680:	200004c8 	.word	0x200004c8
 8003684:	200004cc 	.word	0x200004cc

08003688 <setCharges>:

typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;
void setCharges(float battery, float solar){
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  batteryCharge = battery;
 8003692:	4b05      	ldr	r3, [pc, #20]	@ (80036a8 <setCharges+0x20>)
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	601a      	str	r2, [r3, #0]
  solarCharge = solar;
 8003698:	4b04      	ldr	r3, [pc, #16]	@ (80036ac <setCharges+0x24>)
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	601a      	str	r2, [r3, #0]
}
 800369e:	46c0      	nop			@ (mov r8, r8)
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b002      	add	sp, #8
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	46c0      	nop			@ (mov r8, r8)
 80036a8:	200005e4 	.word	0x200005e4
 80036ac:	200005e8 	.word	0x200005e8

080036b0 <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	1dbb      	adds	r3, r7, #6
 80036bc:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 80036be:	4b07      	ldr	r3, [pc, #28]	@ (80036dc <setMeasurement+0x2c>)
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80036c4:	4b06      	ldr	r3, [pc, #24]	@ (80036e0 <setMeasurement+0x30>)
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 80036ca:	4b06      	ldr	r3, [pc, #24]	@ (80036e4 <setMeasurement+0x34>)
 80036cc:	1dba      	adds	r2, r7, #6
 80036ce:	8812      	ldrh	r2, [r2, #0]
 80036d0:	801a      	strh	r2, [r3, #0]
}
 80036d2:	46c0      	nop			@ (mov r8, r8)
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b004      	add	sp, #16
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	46c0      	nop			@ (mov r8, r8)
 80036dc:	200005dc 	.word	0x200005dc
 80036e0:	200005e0 	.word	0x200005e0
 80036e4:	200005ec 	.word	0x200005ec

080036e8 <setMic>:
void setMic(float dB){
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  dBC = dB;
 80036f0:	4b03      	ldr	r3, [pc, #12]	@ (8003700 <setMic+0x18>)
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	601a      	str	r2, [r3, #0]
}
 80036f6:	46c0      	nop			@ (mov r8, r8)
 80036f8:	46bd      	mov	sp, r7
 80036fa:	b002      	add	sp, #8
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	46c0      	nop			@ (mov r8, r8)
 8003700:	200005f0 	.word	0x200005f0

08003704 <ESP_Init>:
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.


void ESP_Init(UART_HandleTypeDef* espUart) {
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 800370c:	4b04      	ldr	r3, [pc, #16]	@ (8003720 <ESP_Init+0x1c>)
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003712:	4b04      	ldr	r3, [pc, #16]	@ (8003724 <ESP_Init+0x20>)
 8003714:	2202      	movs	r2, #2
 8003716:	701a      	strb	r2, [r3, #0]
}
 8003718:	46c0      	nop			@ (mov r8, r8)
 800371a:	46bd      	mov	sp, r7
 800371c:	b002      	add	sp, #8
 800371e:	bd80      	pop	{r7, pc}
 8003720:	200004d0 	.word	0x200004d0
 8003724:	20000102 	.word	0x20000102

08003728 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003728:	b5b0      	push	{r4, r5, r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	000a      	movs	r2, r1
 8003732:	1cbb      	adds	r3, r7, #2
 8003734:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003736:	4b0e      	ldr	r3, [pc, #56]	@ (8003770 <ESP_Send+0x48>)
 8003738:	6818      	ldr	r0, [r3, #0]
 800373a:	250f      	movs	r5, #15
 800373c:	197c      	adds	r4, r7, r5
 800373e:	1cbb      	adds	r3, r7, #2
 8003740:	881a      	ldrh	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	0019      	movs	r1, r3
 8003746:	f00c fce3 	bl	8010110 <HAL_UART_Transmit_DMA>
 800374a:	0003      	movs	r3, r0
 800374c:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 800374e:	197b      	adds	r3, r7, r5
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d007      	beq.n	8003766 <ESP_Send+0x3e>
    Debug("Error in HAL_UART_Transmit_DMA");
 8003756:	4a07      	ldr	r2, [pc, #28]	@ (8003774 <ESP_Send+0x4c>)
 8003758:	4b07      	ldr	r3, [pc, #28]	@ (8003778 <ESP_Send+0x50>)
 800375a:	0019      	movs	r1, r3
 800375c:	2003      	movs	r0, #3
 800375e:	f005 f987 	bl	8008a70 <CreateLine>
    return false;
 8003762:	2300      	movs	r3, #0
 8003764:	e000      	b.n	8003768 <ESP_Send+0x40>
  }
  return true;
 8003766:	2301      	movs	r3, #1
}
 8003768:	0018      	movs	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	b004      	add	sp, #16
 800376e:	bdb0      	pop	{r4, r5, r7, pc}
 8003770:	200004d0 	.word	0x200004d0
 8003774:	080197a8 	.word	0x080197a8
 8003778:	080197c8 	.word	0x080197c8

0800377c <ESP_Receive>:

static bool ESP_Receive(uint8_t* reply, uint8_t length) {
 800377c:	b5b0      	push	{r4, r5, r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	000a      	movs	r2, r1
 8003786:	1cfb      	adds	r3, r7, #3
 8003788:	701a      	strb	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 800378a:	4b12      	ldr	r3, [pc, #72]	@ (80037d4 <ESP_Receive+0x58>)
 800378c:	2200      	movs	r2, #0
 800378e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003790:	4b11      	ldr	r3, [pc, #68]	@ (80037d8 <ESP_Receive+0x5c>)
 8003792:	6818      	ldr	r0, [r3, #0]
 8003794:	1cfb      	adds	r3, r7, #3
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	b29a      	uxth	r2, r3
 800379a:	250f      	movs	r5, #15
 800379c:	197c      	adds	r4, r7, r5
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	0019      	movs	r1, r3
 80037a2:	f00c fd45 	bl	8010230 <HAL_UART_Receive_DMA>
 80037a6:	0003      	movs	r3, r0
 80037a8:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80037aa:	197b      	adds	r3, r7, r5
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <ESP_Receive+0x4c>
    Debug("Error in HAL_UART_Receive_DMA.");
 80037b2:	4a0a      	ldr	r2, [pc, #40]	@ (80037dc <ESP_Receive+0x60>)
 80037b4:	4b0a      	ldr	r3, [pc, #40]	@ (80037e0 <ESP_Receive+0x64>)
 80037b6:	0019      	movs	r1, r3
 80037b8:	2003      	movs	r0, #3
 80037ba:	f005 f959 	bl	8008a70 <CreateLine>
    RxComplete = true;
 80037be:	4b05      	ldr	r3, [pc, #20]	@ (80037d4 <ESP_Receive+0x58>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	701a      	strb	r2, [r3, #0]
    return false;
 80037c4:	2300      	movs	r3, #0
 80037c6:	e000      	b.n	80037ca <ESP_Receive+0x4e>
  }
  return true;
 80037c8:	2301      	movs	r3, #1
}
 80037ca:	0018      	movs	r0, r3
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b004      	add	sp, #16
 80037d0:	bdb0      	pop	{r4, r5, r7, pc}
 80037d2:	46c0      	nop			@ (mov r8, r8)
 80037d4:	200004d4 	.word	0x200004d4
 80037d8:	200004d0 	.word	0x200004d0
 80037dc:	080197cc 	.word	0x080197cc
 80037e0:	080197c8 	.word	0x080197c8

080037e4 <HAL_UART_RxCpltCallback>:

// Callback for reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 80037ec:	4b08      	ldr	r3, [pc, #32]	@ (8003810 <HAL_UART_RxCpltCallback+0x2c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d108      	bne.n	8003808 <HAL_UART_RxCpltCallback+0x24>
    RxComplete = true;
 80037f6:	4b07      	ldr	r3, [pc, #28]	@ (8003814 <HAL_UART_RxCpltCallback+0x30>)
 80037f8:	2201      	movs	r2, #1
 80037fa:	701a      	strb	r2, [r3, #0]
    Debug("RxComplete");
 80037fc:	4a06      	ldr	r2, [pc, #24]	@ (8003818 <HAL_UART_RxCpltCallback+0x34>)
 80037fe:	4b07      	ldr	r3, [pc, #28]	@ (800381c <HAL_UART_RxCpltCallback+0x38>)
 8003800:	0019      	movs	r1, r3
 8003802:	2003      	movs	r0, #3
 8003804:	f005 f934 	bl	8008a70 <CreateLine>
  }
}
 8003808:	46c0      	nop			@ (mov r8, r8)
 800380a:	46bd      	mov	sp, r7
 800380c:	b002      	add	sp, #8
 800380e:	bd80      	pop	{r7, pc}
 8003810:	200004d0 	.word	0x200004d0
 8003814:	200004d4 	.word	0x200004d4
 8003818:	080197ec 	.word	0x080197ec
 800381c:	080197c8 	.word	0x080197c8

08003820 <HAL_UART_ErrorCallback>:

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003828:	4b05      	ldr	r3, [pc, #20]	@ (8003840 <HAL_UART_ErrorCallback+0x20>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	429a      	cmp	r2, r3
 8003830:	d102      	bne.n	8003838 <HAL_UART_ErrorCallback+0x18>
    // Handle error
    EspState = ESP_STATE_ERROR;
 8003832:	4b04      	ldr	r3, [pc, #16]	@ (8003844 <HAL_UART_ErrorCallback+0x24>)
 8003834:	2207      	movs	r2, #7
 8003836:	701a      	strb	r2, [r3, #0]
  }
}
 8003838:	46c0      	nop			@ (mov r8, r8)
 800383a:	46bd      	mov	sp, r7
 800383c:	b002      	add	sp, #8
 800383e:	bd80      	pop	{r7, pc}
 8003840:	200004d0 	.word	0x200004d0
 8003844:	20000102 	.word	0x20000102

08003848 <CreateMessage>:
uint16_t CreateMessage(){
 8003848:	b590      	push	{r4, r7, lr}
 800384a:	b085      	sub	sp, #20
 800384c:	af02      	add	r7, sp, #8
  uint16_t messageLength = 0;
 800384e:	1dbb      	adds	r3, r7, #6
 8003850:	2200      	movs	r2, #0
 8003852:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart1, "\"name\":\"temp\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"graden\"", sensorID1, Temperature);
 8003854:	4b42      	ldr	r3, [pc, #264]	@ (8003960 <CreateMessage+0x118>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	1c18      	adds	r0, r3, #0
 800385a:	f7ff fd81 	bl	8003360 <__aeabi_f2d>
 800385e:	0002      	movs	r2, r0
 8003860:	000b      	movs	r3, r1
 8003862:	4c40      	ldr	r4, [pc, #256]	@ (8003964 <CreateMessage+0x11c>)
 8003864:	4940      	ldr	r1, [pc, #256]	@ (8003968 <CreateMessage+0x120>)
 8003866:	4841      	ldr	r0, [pc, #260]	@ (800396c <CreateMessage+0x124>)
 8003868:	9200      	str	r2, [sp, #0]
 800386a:	9301      	str	r3, [sp, #4]
 800386c:	0022      	movs	r2, r4
 800386e:	f012 fffd 	bl	801686c <siprintf>
  messageLength += strlen(messagePart1);
 8003872:	4b3e      	ldr	r3, [pc, #248]	@ (800396c <CreateMessage+0x124>)
 8003874:	0018      	movs	r0, r3
 8003876:	f7fc fc47 	bl	8000108 <strlen>
 800387a:	0003      	movs	r3, r0
 800387c:	b299      	uxth	r1, r3
 800387e:	1dbb      	adds	r3, r7, #6
 8003880:	1dba      	adds	r2, r7, #6
 8003882:	8812      	ldrh	r2, [r2, #0]
 8003884:	188a      	adds	r2, r1, r2
 8003886:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart2, "\"name\":\"humid\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"%%\"", sensorID2, Humidity);
 8003888:	4b39      	ldr	r3, [pc, #228]	@ (8003970 <CreateMessage+0x128>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	1c18      	adds	r0, r3, #0
 800388e:	f7ff fd67 	bl	8003360 <__aeabi_f2d>
 8003892:	0002      	movs	r2, r0
 8003894:	000b      	movs	r3, r1
 8003896:	4c37      	ldr	r4, [pc, #220]	@ (8003974 <CreateMessage+0x12c>)
 8003898:	4937      	ldr	r1, [pc, #220]	@ (8003978 <CreateMessage+0x130>)
 800389a:	4838      	ldr	r0, [pc, #224]	@ (800397c <CreateMessage+0x134>)
 800389c:	9200      	str	r2, [sp, #0]
 800389e:	9301      	str	r3, [sp, #4]
 80038a0:	0022      	movs	r2, r4
 80038a2:	f012 ffe3 	bl	801686c <siprintf>
  messageLength += strlen(messagePart2);
 80038a6:	4b35      	ldr	r3, [pc, #212]	@ (800397c <CreateMessage+0x134>)
 80038a8:	0018      	movs	r0, r3
 80038aa:	f7fc fc2d 	bl	8000108 <strlen>
 80038ae:	0003      	movs	r3, r0
 80038b0:	b299      	uxth	r1, r3
 80038b2:	1dbb      	adds	r3, r7, #6
 80038b4:	1dba      	adds	r2, r7, #6
 80038b6:	8812      	ldrh	r2, [r2, #0]
 80038b8:	188a      	adds	r2, r1, r2
 80038ba:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart3, "\"name\":\"Sound\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"dBC\"", sensorID3, dBC);
 80038bc:	4b30      	ldr	r3, [pc, #192]	@ (8003980 <CreateMessage+0x138>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	1c18      	adds	r0, r3, #0
 80038c2:	f7ff fd4d 	bl	8003360 <__aeabi_f2d>
 80038c6:	0002      	movs	r2, r0
 80038c8:	000b      	movs	r3, r1
 80038ca:	4c2e      	ldr	r4, [pc, #184]	@ (8003984 <CreateMessage+0x13c>)
 80038cc:	492e      	ldr	r1, [pc, #184]	@ (8003988 <CreateMessage+0x140>)
 80038ce:	482f      	ldr	r0, [pc, #188]	@ (800398c <CreateMessage+0x144>)
 80038d0:	9200      	str	r2, [sp, #0]
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	0022      	movs	r2, r4
 80038d6:	f012 ffc9 	bl	801686c <siprintf>
  messageLength += strlen(messagePart3);
 80038da:	4b2c      	ldr	r3, [pc, #176]	@ (800398c <CreateMessage+0x144>)
 80038dc:	0018      	movs	r0, r3
 80038de:	f7fc fc13 	bl	8000108 <strlen>
 80038e2:	0003      	movs	r3, r0
 80038e4:	b299      	uxth	r1, r3
 80038e6:	1dbb      	adds	r3, r7, #6
 80038e8:	1dba      	adds	r2, r7, #6
 80038ea:	8812      	ldrh	r2, [r2, #0]
 80038ec:	188a      	adds	r2, r1, r2
 80038ee:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart4, "\"name\":\"voc\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%d, \"unit\": \"VOC index\"", sensorID4, VOCIndex);
 80038f0:	4b27      	ldr	r3, [pc, #156]	@ (8003990 <CreateMessage+0x148>)
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	4a27      	ldr	r2, [pc, #156]	@ (8003994 <CreateMessage+0x14c>)
 80038f6:	4928      	ldr	r1, [pc, #160]	@ (8003998 <CreateMessage+0x150>)
 80038f8:	4828      	ldr	r0, [pc, #160]	@ (800399c <CreateMessage+0x154>)
 80038fa:	f012 ffb7 	bl	801686c <siprintf>
  messageLength += strlen(messagePart4);
 80038fe:	4b27      	ldr	r3, [pc, #156]	@ (800399c <CreateMessage+0x154>)
 8003900:	0018      	movs	r0, r3
 8003902:	f7fc fc01 	bl	8000108 <strlen>
 8003906:	0003      	movs	r3, r0
 8003908:	b299      	uxth	r1, r3
 800390a:	1dbb      	adds	r3, r7, #6
 800390c:	1dba      	adds	r2, r7, #6
 800390e:	8812      	ldrh	r2, [r2, #0]
 8003910:	188a      	adds	r2, r1, r2
 8003912:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart5, "\"name\":\"battery\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%3.2f, \"unit\": \"Volt\"", sensorID5, batteryCharge);
 8003914:	4b22      	ldr	r3, [pc, #136]	@ (80039a0 <CreateMessage+0x158>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	1c18      	adds	r0, r3, #0
 800391a:	f7ff fd21 	bl	8003360 <__aeabi_f2d>
 800391e:	0002      	movs	r2, r0
 8003920:	000b      	movs	r3, r1
 8003922:	4c20      	ldr	r4, [pc, #128]	@ (80039a4 <CreateMessage+0x15c>)
 8003924:	4920      	ldr	r1, [pc, #128]	@ (80039a8 <CreateMessage+0x160>)
 8003926:	4821      	ldr	r0, [pc, #132]	@ (80039ac <CreateMessage+0x164>)
 8003928:	9200      	str	r2, [sp, #0]
 800392a:	9301      	str	r3, [sp, #4]
 800392c:	0022      	movs	r2, r4
 800392e:	f012 ff9d 	bl	801686c <siprintf>
  messageLength += strlen(messagePart5);
 8003932:	4b1e      	ldr	r3, [pc, #120]	@ (80039ac <CreateMessage+0x164>)
 8003934:	0018      	movs	r0, r3
 8003936:	f7fc fbe7 	bl	8000108 <strlen>
 800393a:	0003      	movs	r3, r0
 800393c:	b299      	uxth	r1, r3
 800393e:	1dbb      	adds	r3, r7, #6
 8003940:	1dba      	adds	r2, r7, #6
 8003942:	8812      	ldrh	r2, [r2, #0]
 8003944:	188a      	adds	r2, r1, r2
 8003946:	801a      	strh	r2, [r3, #0]
  messageLength += 20;
 8003948:	1dbb      	adds	r3, r7, #6
 800394a:	1dba      	adds	r2, r7, #6
 800394c:	8812      	ldrh	r2, [r2, #0]
 800394e:	3214      	adds	r2, #20
 8003950:	801a      	strh	r2, [r3, #0]
  return(messageLength);
 8003952:	1dbb      	adds	r3, r7, #6
 8003954:	881b      	ldrh	r3, [r3, #0]
}
 8003956:	0018      	movs	r0, r3
 8003958:	46bd      	mov	sp, r7
 800395a:	b003      	add	sp, #12
 800395c:	bd90      	pop	{r4, r7, pc}
 800395e:	46c0      	nop			@ (mov r8, r8)
 8003960:	200005dc 	.word	0x200005dc
 8003964:	20000064 	.word	0x20000064
 8003968:	080197f8 	.word	0x080197f8
 800396c:	200005f4 	.word	0x200005f4
 8003970:	200005e0 	.word	0x200005e0
 8003974:	20000080 	.word	0x20000080
 8003978:	08019850 	.word	0x08019850
 800397c:	20000674 	.word	0x20000674
 8003980:	200005f0 	.word	0x200005f0
 8003984:	2000009c 	.word	0x2000009c
 8003988:	080198a4 	.word	0x080198a4
 800398c:	200006f4 	.word	0x200006f4
 8003990:	200005ec 	.word	0x200005ec
 8003994:	200000b8 	.word	0x200000b8
 8003998:	080198fc 	.word	0x080198fc
 800399c:	20000774 	.word	0x20000774
 80039a0:	200005e4 	.word	0x200005e4
 80039a4:	200000d4 	.word	0x200000d4
 80039a8:	08019954 	.word	0x08019954
 80039ac:	200007f4 	.word	0x200007f4

080039b0 <SetCommandBuffer>:

void SetCommandBuffer(const char* command) {
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
 80039b8:	2380      	movs	r3, #128	@ 0x80
 80039ba:	009a      	lsls	r2, r3, #2
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4b05      	ldr	r3, [pc, #20]	@ (80039d4 <SetCommandBuffer+0x24>)
 80039c0:	0018      	movs	r0, r3
 80039c2:	f012 ffff 	bl	80169c4 <strncpy>
    CommandEchoed = false; // Reset the flag when a new command is sent
 80039c6:	4b04      	ldr	r3, [pc, #16]	@ (80039d8 <SetCommandBuffer+0x28>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	701a      	strb	r2, [r3, #0]
}
 80039cc:	46c0      	nop			@ (mov r8, r8)
 80039ce:	46bd      	mov	sp, r7
 80039d0:	b002      	add	sp, #8
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	20000888 	.word	0x20000888
 80039d8:	20000a88 	.word	0x20000a88

080039dc <StartProg>:
void StartProg(){
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  HAL_Delay(1000);
 80039e0:	23fa      	movs	r3, #250	@ 0xfa
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	0018      	movs	r0, r3
 80039e6:	f005 fc45 	bl	8009274 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80039ea:	4b15      	ldr	r3, [pc, #84]	@ (8003a40 <StartProg+0x64>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	2101      	movs	r1, #1
 80039f0:	0018      	movs	r0, r3
 80039f2:	f006 fdcb 	bl	800a58c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80039f6:	2064      	movs	r0, #100	@ 0x64
 80039f8:	f005 fc3c 	bl	8009274 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80039fc:	4b10      	ldr	r3, [pc, #64]	@ (8003a40 <StartProg+0x64>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	2102      	movs	r1, #2
 8003a02:	0018      	movs	r0, r3
 8003a04:	f006 fdc2 	bl	800a58c <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003a08:	23fa      	movs	r3, #250	@ 0xfa
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f005 fc31 	bl	8009274 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003a12:	4b0b      	ldr	r3, [pc, #44]	@ (8003a40 <StartProg+0x64>)
 8003a14:	2201      	movs	r2, #1
 8003a16:	2101      	movs	r1, #1
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f006 fdb7 	bl	800a58c <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003a1e:	23fa      	movs	r3, #250	@ 0xfa
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	0018      	movs	r0, r3
 8003a24:	f005 fc26 	bl	8009274 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8003a28:	4b05      	ldr	r3, [pc, #20]	@ (8003a40 <StartProg+0x64>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	2102      	movs	r1, #2
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f006 fdac 	bl	800a58c <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8003a34:	2028      	movs	r0, #40	@ 0x28
 8003a36:	f005 fc1d 	bl	8009274 <HAL_Delay>
}
 8003a3a:	46c0      	nop			@ (mov r8, r8)
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	50001c00 	.word	0x50001c00

08003a44 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8003a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a46:	46c6      	mov	lr, r8
 8003a48:	b500      	push	{lr}
 8003a4a:	b09a      	sub	sp, #104	@ 0x68
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	61f8      	str	r0, [r7, #28]
 8003a50:	0008      	movs	r0, r1
 8003a52:	0011      	movs	r1, r2
 8003a54:	261a      	movs	r6, #26
 8003a56:	19bb      	adds	r3, r7, r6
 8003a58:	1c02      	adds	r2, r0, #0
 8003a5a:	801a      	strh	r2, [r3, #0]
 8003a5c:	2319      	movs	r3, #25
 8003a5e:	18fb      	adds	r3, r7, r3
 8003a60:	1c0a      	adds	r2, r1, #0
 8003a62:	701a      	strb	r2, [r3, #0]
 8003a64:	466b      	mov	r3, sp
 8003a66:	4698      	mov	r8, r3
  char tempBuf[len+1];
 8003a68:	19bb      	adds	r3, r7, r6
 8003a6a:	881b      	ldrh	r3, [r3, #0]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	1e5a      	subs	r2, r3, #1
 8003a70:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003a72:	001a      	movs	r2, r3
 8003a74:	60ba      	str	r2, [r7, #8]
 8003a76:	2200      	movs	r2, #0
 8003a78:	60fa      	str	r2, [r7, #12]
 8003a7a:	68b8      	ldr	r0, [r7, #8]
 8003a7c:	68f9      	ldr	r1, [r7, #12]
 8003a7e:	0002      	movs	r2, r0
 8003a80:	0f52      	lsrs	r2, r2, #29
 8003a82:	000e      	movs	r6, r1
 8003a84:	00f6      	lsls	r6, r6, #3
 8003a86:	617e      	str	r6, [r7, #20]
 8003a88:	697e      	ldr	r6, [r7, #20]
 8003a8a:	4316      	orrs	r6, r2
 8003a8c:	617e      	str	r6, [r7, #20]
 8003a8e:	0002      	movs	r2, r0
 8003a90:	00d2      	lsls	r2, r2, #3
 8003a92:	613a      	str	r2, [r7, #16]
 8003a94:	001a      	movs	r2, r3
 8003a96:	603a      	str	r2, [r7, #0]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	6838      	ldr	r0, [r7, #0]
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	0002      	movs	r2, r0
 8003aa2:	0f52      	lsrs	r2, r2, #29
 8003aa4:	000e      	movs	r6, r1
 8003aa6:	00f5      	lsls	r5, r6, #3
 8003aa8:	4315      	orrs	r5, r2
 8003aaa:	0002      	movs	r2, r0
 8003aac:	00d4      	lsls	r4, r2, #3
 8003aae:	3307      	adds	r3, #7
 8003ab0:	08db      	lsrs	r3, r3, #3
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	466a      	mov	r2, sp
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	469d      	mov	sp, r3
 8003aba:	466b      	mov	r3, sp
 8003abc:	3300      	adds	r3, #0
 8003abe:	65bb      	str	r3, [r7, #88]	@ 0x58
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003ac0:	234f      	movs	r3, #79	@ 0x4f
 8003ac2:	2118      	movs	r1, #24
 8003ac4:	185b      	adds	r3, r3, r1
 8003ac6:	19db      	adds	r3, r3, r7
 8003ac8:	2203      	movs	r2, #3
 8003aca:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003acc:	234c      	movs	r3, #76	@ 0x4c
 8003ace:	185b      	adds	r3, r3, r1
 8003ad0:	19db      	adds	r3, r3, r7
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	801a      	strh	r2, [r3, #0]
 8003ad6:	e013      	b.n	8003b00 <ParseBuffer+0xbc>
    tempBuf[i] = (char)buffer[i];
 8003ad8:	204c      	movs	r0, #76	@ 0x4c
 8003ada:	2418      	movs	r4, #24
 8003adc:	1903      	adds	r3, r0, r4
 8003ade:	19db      	adds	r3, r3, r7
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	69fa      	ldr	r2, [r7, #28]
 8003ae4:	18d2      	adds	r2, r2, r3
 8003ae6:	1903      	adds	r3, r0, r4
 8003ae8:	19db      	adds	r3, r3, r7
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	7811      	ldrb	r1, [r2, #0]
 8003aee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003af0:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8003af2:	1903      	adds	r3, r0, r4
 8003af4:	19db      	adds	r3, r3, r7
 8003af6:	881a      	ldrh	r2, [r3, #0]
 8003af8:	1903      	adds	r3, r0, r4
 8003afa:	19db      	adds	r3, r3, r7
 8003afc:	3201      	adds	r2, #1
 8003afe:	801a      	strh	r2, [r3, #0]
 8003b00:	234c      	movs	r3, #76	@ 0x4c
 8003b02:	2018      	movs	r0, #24
 8003b04:	181b      	adds	r3, r3, r0
 8003b06:	19da      	adds	r2, r3, r7
 8003b08:	211a      	movs	r1, #26
 8003b0a:	187b      	adds	r3, r7, r1
 8003b0c:	8812      	ldrh	r2, [r2, #0]
 8003b0e:	881b      	ldrh	r3, [r3, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d3e1      	bcc.n	8003ad8 <ParseBuffer+0x94>
  }
  tempBuf[len] = '\0';
 8003b14:	187b      	adds	r3, r7, r1
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	54d1      	strb	r1, [r2, r3]
  char TestChar = 'N';
 8003b1e:	233f      	movs	r3, #63	@ 0x3f
 8003b20:	0006      	movs	r6, r0
 8003b22:	199b      	adds	r3, r3, r6
 8003b24:	19db      	adds	r3, r3, r7
 8003b26:	224e      	movs	r2, #78	@ 0x4e
 8003b28:	701a      	strb	r2, [r3, #0]
  char * ParsePoint;
  char * ParsePoint2;
  char * ParsePoint3;
  const char OK[] = AT_RESPONSE_OK;
 8003b2a:	2530      	movs	r5, #48	@ 0x30
 8003b2c:	19ab      	adds	r3, r5, r6
 8003b2e:	19db      	adds	r3, r3, r7
 8003b30:	4a60      	ldr	r2, [pc, #384]	@ (8003cb4 <ParseBuffer+0x270>)
 8003b32:	8811      	ldrh	r1, [r2, #0]
 8003b34:	8019      	strh	r1, [r3, #0]
 8003b36:	7892      	ldrb	r2, [r2, #2]
 8003b38:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8003b3a:	2328      	movs	r3, #40	@ 0x28
 8003b3c:	199b      	adds	r3, r3, r6
 8003b3e:	19db      	adds	r3, r3, r7
 8003b40:	4a5d      	ldr	r2, [pc, #372]	@ (8003cb8 <ParseBuffer+0x274>)
 8003b42:	6811      	ldr	r1, [r2, #0]
 8003b44:	6019      	str	r1, [r3, #0]
 8003b46:	8892      	ldrh	r2, [r2, #4]
 8003b48:	809a      	strh	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8003b4a:	2320      	movs	r3, #32
 8003b4c:	199b      	adds	r3, r3, r6
 8003b4e:	19db      	adds	r3, r3, r7
 8003b50:	4a5a      	ldr	r2, [pc, #360]	@ (8003cbc <ParseBuffer+0x278>)
 8003b52:	6811      	ldr	r1, [r2, #0]
 8003b54:	6019      	str	r1, [r3, #0]
 8003b56:	8892      	ldrh	r2, [r2, #4]
 8003b58:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8003b5a:	231c      	movs	r3, #28
 8003b5c:	199b      	adds	r3, r3, r6
 8003b5e:	19db      	adds	r3, r3, r7
 8003b60:	223e      	movs	r2, #62	@ 0x3e
 8003b62:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8003b64:	230c      	movs	r3, #12
 8003b66:	199b      	adds	r3, r3, r6
 8003b68:	19db      	adds	r3, r3, r7
 8003b6a:	4a55      	ldr	r2, [pc, #340]	@ (8003cc0 <ParseBuffer+0x27c>)
 8003b6c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003b6e:	c313      	stmia	r3!, {r0, r1, r4}
 8003b70:	8811      	ldrh	r1, [r2, #0]
 8003b72:	8019      	strh	r1, [r3, #0]
 8003b74:	7892      	ldrb	r2, [r2, #2]
 8003b76:	709a      	strb	r2, [r3, #2]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8003b78:	2319      	movs	r3, #25
 8003b7a:	18fb      	adds	r3, r7, r3
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d108      	bne.n	8003b94 <ParseBuffer+0x150>
    ParsePoint = strstr(tempBuf, OK);
 8003b82:	19ab      	adds	r3, r5, r6
 8003b84:	19da      	adds	r2, r3, r7
 8003b86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b88:	0011      	movs	r1, r2
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f012 ff2e 	bl	80169ec <strstr>
 8003b90:	0003      	movs	r3, r0
 8003b92:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8003b94:	2319      	movs	r3, #25
 8003b96:	18fb      	adds	r3, r7, r3
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d10a      	bne.n	8003bb4 <ParseBuffer+0x170>
    ParsePoint = strstr(tempBuf, ready);
 8003b9e:	2320      	movs	r3, #32
 8003ba0:	2218      	movs	r2, #24
 8003ba2:	189b      	adds	r3, r3, r2
 8003ba4:	19da      	adds	r2, r3, r7
 8003ba6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ba8:	0011      	movs	r1, r2
 8003baa:	0018      	movs	r0, r3
 8003bac:	f012 ff1e 	bl	80169ec <strstr>
 8003bb0:	0003      	movs	r3, r0
 8003bb2:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8003bb4:	2319      	movs	r3, #25
 8003bb6:	18fb      	adds	r3, r7, r3
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d10a      	bne.n	8003bd4 <ParseBuffer+0x190>
    ParsePoint = strstr(tempBuf, start);
 8003bbe:	231c      	movs	r3, #28
 8003bc0:	2218      	movs	r2, #24
 8003bc2:	189b      	adds	r3, r3, r2
 8003bc4:	19da      	adds	r2, r3, r7
 8003bc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bc8:	0011      	movs	r1, r2
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f012 ff0e 	bl	80169ec <strstr>
 8003bd0:	0003      	movs	r3, r0
 8003bd2:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  ParsePoint2 = strstr(tempBuf, ERROR);
 8003bd4:	2328      	movs	r3, #40	@ 0x28
 8003bd6:	2418      	movs	r4, #24
 8003bd8:	191b      	adds	r3, r3, r4
 8003bda:	19da      	adds	r2, r3, r7
 8003bdc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bde:	0011      	movs	r1, r2
 8003be0:	0018      	movs	r0, r3
 8003be2:	f012 ff03 	bl	80169ec <strstr>
 8003be6:	0003      	movs	r3, r0
 8003be8:	653b      	str	r3, [r7, #80]	@ 0x50
  ParsePoint3 = strstr(tempBuf, WIFI);
 8003bea:	230c      	movs	r3, #12
 8003bec:	191b      	adds	r3, r3, r4
 8003bee:	19da      	adds	r2, r3, r7
 8003bf0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bf2:	0011      	movs	r1, r2
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f012 fef9 	bl	80169ec <strstr>
 8003bfa:	0003      	movs	r3, r0
 8003bfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if(len > 1 ){
 8003bfe:	231a      	movs	r3, #26
 8003c00:	18fb      	adds	r3, r7, r3
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d948      	bls.n	8003c9a <ParseBuffer+0x256>
    TestChar = *ParsePoint;
 8003c08:	213f      	movs	r1, #63	@ 0x3f
 8003c0a:	190b      	adds	r3, r1, r4
 8003c0c:	19db      	adds	r3, r3, r7
 8003c0e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003c10:	7812      	ldrb	r2, [r2, #0]
 8003c12:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'O'){
 8003c14:	190b      	adds	r3, r1, r4
 8003c16:	19db      	adds	r3, r3, r7
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b4f      	cmp	r3, #79	@ 0x4f
 8003c1c:	d104      	bne.n	8003c28 <ParseBuffer+0x1e4>
      status = RECEIVE_STATUS_OK;
 8003c1e:	234f      	movs	r3, #79	@ 0x4f
 8003c20:	191b      	adds	r3, r3, r4
 8003c22:	19db      	adds	r3, r3, r7
 8003c24:	2200      	movs	r2, #0
 8003c26:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == 'r'){
 8003c28:	233f      	movs	r3, #63	@ 0x3f
 8003c2a:	2218      	movs	r2, #24
 8003c2c:	189b      	adds	r3, r3, r2
 8003c2e:	19db      	adds	r3, r3, r7
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b72      	cmp	r3, #114	@ 0x72
 8003c34:	d104      	bne.n	8003c40 <ParseBuffer+0x1fc>
      status = RECEIVE_STATUS_READY;
 8003c36:	234f      	movs	r3, #79	@ 0x4f
 8003c38:	189b      	adds	r3, r3, r2
 8003c3a:	19db      	adds	r3, r3, r7
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == '>'){
 8003c40:	233f      	movs	r3, #63	@ 0x3f
 8003c42:	2218      	movs	r2, #24
 8003c44:	189b      	adds	r3, r3, r2
 8003c46:	19db      	adds	r3, r3, r7
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c4c:	d104      	bne.n	8003c58 <ParseBuffer+0x214>
      status = RECEIVE_STATUS_START;
 8003c4e:	234f      	movs	r3, #79	@ 0x4f
 8003c50:	189b      	adds	r3, r3, r2
 8003c52:	19db      	adds	r3, r3, r7
 8003c54:	2205      	movs	r2, #5
 8003c56:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint2;
 8003c58:	213f      	movs	r1, #63	@ 0x3f
 8003c5a:	2018      	movs	r0, #24
 8003c5c:	180b      	adds	r3, r1, r0
 8003c5e:	19db      	adds	r3, r3, r7
 8003c60:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003c62:	7812      	ldrb	r2, [r2, #0]
 8003c64:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'E'){
 8003c66:	0002      	movs	r2, r0
 8003c68:	188b      	adds	r3, r1, r2
 8003c6a:	19db      	adds	r3, r3, r7
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b45      	cmp	r3, #69	@ 0x45
 8003c70:	d104      	bne.n	8003c7c <ParseBuffer+0x238>
      status = RECEIVE_STATUS_ERROR;
 8003c72:	234f      	movs	r3, #79	@ 0x4f
 8003c74:	189b      	adds	r3, r3, r2
 8003c76:	19db      	adds	r3, r3, r7
 8003c78:	2201      	movs	r2, #1
 8003c7a:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint3;
 8003c7c:	213f      	movs	r1, #63	@ 0x3f
 8003c7e:	2018      	movs	r0, #24
 8003c80:	180b      	adds	r3, r1, r0
 8003c82:	19db      	adds	r3, r3, r7
 8003c84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c86:	7812      	ldrb	r2, [r2, #0]
 8003c88:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'W'){
 8003c8a:	180b      	adds	r3, r1, r0
 8003c8c:	19db      	adds	r3, r3, r7
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b57      	cmp	r3, #87	@ 0x57
 8003c92:	d102      	bne.n	8003c9a <ParseBuffer+0x256>
      ConnectionMade = true;
 8003c94:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc4 <ParseBuffer+0x280>)
 8003c96:	2201      	movs	r2, #1
 8003c98:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8003c9a:	234f      	movs	r3, #79	@ 0x4f
 8003c9c:	2218      	movs	r2, #24
 8003c9e:	189b      	adds	r3, r3, r2
 8003ca0:	19db      	adds	r3, r3, r7
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	46c5      	mov	sp, r8

}
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b01a      	add	sp, #104	@ 0x68
 8003cac:	bc80      	pop	{r7}
 8003cae:	46b8      	mov	r8, r7
 8003cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cb2:	46c0      	nop			@ (mov r8, r8)
 8003cb4:	080199ac 	.word	0x080199ac
 8003cb8:	080199b0 	.word	0x080199b0
 8003cbc:	080199b8 	.word	0x080199b8
 8003cc0:	080199c0 	.word	0x080199c0
 8003cc4:	200005da 	.word	0x200005da

08003cc8 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8003cce:	4b0d      	ldr	r3, [pc, #52]	@ (8003d04 <PollAwake+0x3c>)
 8003cd0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f7ff fe6b 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f7fc fa13 	bl	8000108 <strlen>
 8003ce2:	0003      	movs	r3, r0
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	0011      	movs	r1, r2
 8003cea:	0018      	movs	r0, r3
 8003cec:	f7ff fd1c 	bl	8003728 <ESP_Send>
 8003cf0:	1e03      	subs	r3, r0, #0
 8003cf2:	d001      	beq.n	8003cf8 <PollAwake+0x30>
    return true;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <PollAwake+0x32>
  }
  else{
    return false;
 8003cf8:	2300      	movs	r3, #0
  }
}
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	b002      	add	sp, #8
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	46c0      	nop			@ (mov r8, r8)
 8003d04:	080199d0 	.word	0x080199d0

08003d08 <RFPower>:
bool RFPower(){
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8003d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d44 <RFPower+0x3c>)
 8003d10:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	0018      	movs	r0, r3
 8003d16:	f7ff fe4b 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	f7fc f9f3 	bl	8000108 <strlen>
 8003d22:	0003      	movs	r3, r0
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	0011      	movs	r1, r2
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f7ff fcfc 	bl	8003728 <ESP_Send>
 8003d30:	1e03      	subs	r3, r0, #0
 8003d32:	d001      	beq.n	8003d38 <RFPower+0x30>
    return true;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <RFPower+0x32>
  }
  else{
    return false;
 8003d38:	2300      	movs	r3, #0
  }
}
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	b002      	add	sp, #8
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	46c0      	nop			@ (mov r8, r8)
 8003d44:	080199d8 	.word	0x080199d8

08003d48 <CheckRFPower>:
bool CheckRFPower(){
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8003d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d84 <CheckRFPower+0x3c>)
 8003d50:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	0018      	movs	r0, r3
 8003d56:	f7ff fe2b 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	f7fc f9d3 	bl	8000108 <strlen>
 8003d62:	0003      	movs	r3, r0
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	0011      	movs	r1, r2
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f7ff fcdc 	bl	8003728 <ESP_Send>
 8003d70:	1e03      	subs	r3, r0, #0
 8003d72:	d001      	beq.n	8003d78 <CheckRFPower+0x30>
    return true;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <CheckRFPower+0x32>
  }
  else{
    return false;
 8003d78:	2300      	movs	r3, #0
  }
}
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	b002      	add	sp, #8
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	46c0      	nop			@ (mov r8, r8)
 8003d84:	080199e8 	.word	0x080199e8

08003d88 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8003d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc4 <ATRestore+0x3c>)
 8003d90:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	0018      	movs	r0, r3
 8003d96:	f7ff fe0b 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f7fc f9b3 	bl	8000108 <strlen>
 8003da2:	0003      	movs	r3, r0
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	0011      	movs	r1, r2
 8003daa:	0018      	movs	r0, r3
 8003dac:	f7ff fcbc 	bl	8003728 <ESP_Send>
 8003db0:	1e03      	subs	r3, r0, #0
 8003db2:	d001      	beq.n	8003db8 <ATRestore+0x30>
    return true;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e000      	b.n	8003dba <ATRestore+0x32>
  }
  else{
    return false;
 8003db8:	2300      	movs	r3, #0
  }
}
 8003dba:	0018      	movs	r0, r3
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	b002      	add	sp, #8
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	46c0      	nop			@ (mov r8, r8)
 8003dc4:	080199f8 	.word	0x080199f8

08003dc8 <CWINIT>:
bool CWINIT(){
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8003dce:	4b0d      	ldr	r3, [pc, #52]	@ (8003e04 <CWINIT+0x3c>)
 8003dd0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f7ff fdeb 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f7fc f993 	bl	8000108 <strlen>
 8003de2:	0003      	movs	r3, r0
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	0011      	movs	r1, r2
 8003dea:	0018      	movs	r0, r3
 8003dec:	f7ff fc9c 	bl	8003728 <ESP_Send>
 8003df0:	1e03      	subs	r3, r0, #0
 8003df2:	d001      	beq.n	8003df8 <CWINIT+0x30>
    return true;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e000      	b.n	8003dfa <CWINIT+0x32>
  }
  else{
    return false;
 8003df8:	2300      	movs	r3, #0
  }
}
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b002      	add	sp, #8
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	46c0      	nop			@ (mov r8, r8)
 8003e04:	08019a08 	.word	0x08019a08

08003e08 <CWMODE1>:
bool CWMODE1(){
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8003e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e44 <CWMODE1+0x3c>)
 8003e10:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	0018      	movs	r0, r3
 8003e16:	f7ff fdcb 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	f7fc f973 	bl	8000108 <strlen>
 8003e22:	0003      	movs	r3, r0
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	0011      	movs	r1, r2
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f7ff fc7c 	bl	8003728 <ESP_Send>
 8003e30:	1e03      	subs	r3, r0, #0
 8003e32:	d001      	beq.n	8003e38 <CWMODE1+0x30>
    return true;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e000      	b.n	8003e3a <CWMODE1+0x32>
  }
  else{
    return false;
 8003e38:	2300      	movs	r3, #0
  }
}
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	b002      	add	sp, #8
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	46c0      	nop			@ (mov r8, r8)
 8003e44:	08019a18 	.word	0x08019a18

08003e48 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8003e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e84 <CWAUTOCONN+0x3c>)
 8003e50:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	0018      	movs	r0, r3
 8003e56:	f7ff fdab 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f7fc f953 	bl	8000108 <strlen>
 8003e62:	0003      	movs	r3, r0
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	0011      	movs	r1, r2
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	f7ff fc5c 	bl	8003728 <ESP_Send>
 8003e70:	1e03      	subs	r3, r0, #0
 8003e72:	d001      	beq.n	8003e78 <CWAUTOCONN+0x30>
    return true;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e000      	b.n	8003e7a <CWAUTOCONN+0x32>
  }
  else{
    return false;
 8003e78:	2300      	movs	r3, #0
  }
}
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b002      	add	sp, #8
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	46c0      	nop			@ (mov r8, r8)
 8003e84:	08019a28 	.word	0x08019a28

08003e88 <CWJAP>:
bool CWJAP(){
 8003e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e8a:	46c6      	mov	lr, r8
 8003e8c:	b500      	push	{lr}
 8003e8e:	b0a2      	sub	sp, #136	@ 0x88
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	466b      	mov	r3, sp
 8003e94:	4698      	mov	r8, r3
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8003e96:	2618      	movs	r6, #24
 8003e98:	19bb      	adds	r3, r7, r6
 8003e9a:	2264      	movs	r2, #100	@ 0x64
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f012 fd88 	bl	80169b4 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8003ea4:	4b35      	ldr	r3, [pc, #212]	@ (8003f7c <CWJAP+0xf4>)
 8003ea6:	4a36      	ldr	r2, [pc, #216]	@ (8003f80 <CWJAP+0xf8>)
 8003ea8:	4936      	ldr	r1, [pc, #216]	@ (8003f84 <CWJAP+0xfc>)
 8003eaa:	19b8      	adds	r0, r7, r6
 8003eac:	f012 fcde 	bl	801686c <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8003eb0:	19bb      	adds	r3, r7, r6
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	f7fc f928 	bl	8000108 <strlen>
 8003eb8:	0002      	movs	r2, r0
 8003eba:	216f      	movs	r1, #111	@ 0x6f
 8003ebc:	0030      	movs	r0, r6
 8003ebe:	180b      	adds	r3, r1, r0
 8003ec0:	19db      	adds	r3, r3, r7
 8003ec2:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8003ec4:	180b      	adds	r3, r1, r0
 8003ec6:	19db      	adds	r3, r3, r7
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	1e5a      	subs	r2, r3, #1
 8003ece:	2180      	movs	r1, #128	@ 0x80
 8003ed0:	1879      	adds	r1, r7, r1
 8003ed2:	600a      	str	r2, [r1, #0]
 8003ed4:	001a      	movs	r2, r3
 8003ed6:	60ba      	str	r2, [r7, #8]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	60fa      	str	r2, [r7, #12]
 8003edc:	68b8      	ldr	r0, [r7, #8]
 8003ede:	68f9      	ldr	r1, [r7, #12]
 8003ee0:	0002      	movs	r2, r0
 8003ee2:	0f52      	lsrs	r2, r2, #29
 8003ee4:	000e      	movs	r6, r1
 8003ee6:	00f6      	lsls	r6, r6, #3
 8003ee8:	617e      	str	r6, [r7, #20]
 8003eea:	697e      	ldr	r6, [r7, #20]
 8003eec:	4316      	orrs	r6, r2
 8003eee:	617e      	str	r6, [r7, #20]
 8003ef0:	0002      	movs	r2, r0
 8003ef2:	00d2      	lsls	r2, r2, #3
 8003ef4:	613a      	str	r2, [r7, #16]
 8003ef6:	001a      	movs	r2, r3
 8003ef8:	603a      	str	r2, [r7, #0]
 8003efa:	2200      	movs	r2, #0
 8003efc:	607a      	str	r2, [r7, #4]
 8003efe:	6838      	ldr	r0, [r7, #0]
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	0002      	movs	r2, r0
 8003f04:	0f52      	lsrs	r2, r2, #29
 8003f06:	000e      	movs	r6, r1
 8003f08:	00f5      	lsls	r5, r6, #3
 8003f0a:	4315      	orrs	r5, r2
 8003f0c:	0002      	movs	r2, r0
 8003f0e:	00d4      	lsls	r4, r2, #3
 8003f10:	3307      	adds	r3, #7
 8003f12:	08db      	lsrs	r3, r3, #3
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	466a      	mov	r2, sp
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	469d      	mov	sp, r3
 8003f1c:	466b      	mov	r3, sp
 8003f1e:	3300      	adds	r3, #0
 8003f20:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8003f22:	246f      	movs	r4, #111	@ 0x6f
 8003f24:	2518      	movs	r5, #24
 8003f26:	1963      	adds	r3, r4, r5
 8003f28:	19db      	adds	r3, r3, r7
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	001a      	movs	r2, r3
 8003f30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f32:	2100      	movs	r1, #0
 8003f34:	0018      	movs	r0, r3
 8003f36:	f012 fd3d 	bl	80169b4 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8003f3a:	1963      	adds	r3, r4, r5
 8003f3c:	19db      	adds	r3, r3, r7
 8003f3e:	781a      	ldrb	r2, [r3, #0]
 8003f40:	1979      	adds	r1, r7, r5
 8003f42:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f44:	0018      	movs	r0, r3
 8003f46:	f012 fd3d 	bl	80169c4 <strncpy>
  SetCommandBuffer(atCommand);
 8003f4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f7ff fd2f 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8003f52:	1963      	adds	r3, r4, r5
 8003f54:	19db      	adds	r3, r3, r7
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f5c:	0011      	movs	r1, r2
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f7ff fbe2 	bl	8003728 <ESP_Send>
 8003f64:	1e03      	subs	r3, r0, #0
 8003f66:	d001      	beq.n	8003f6c <CWJAP+0xe4>
    return true;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <CWJAP+0xe6>
  }
  else{
    return false;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	46c5      	mov	sp, r8
  }
}
 8003f70:	0018      	movs	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b022      	add	sp, #136	@ 0x88
 8003f76:	bc80      	pop	{r7}
 8003f78:	46b8      	mov	r8, r7
 8003f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f7c:	20000010 	.word	0x20000010
 8003f80:	20000004 	.word	0x20000004
 8003f84:	08019a3c 	.word	0x08019a3c

08003f88 <CWMODE3>:
bool CWMODE3(){
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8003f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fc4 <CWMODE3+0x3c>)
 8003f90:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	0018      	movs	r0, r3
 8003f96:	f7ff fd0b 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f7fc f8b3 	bl	8000108 <strlen>
 8003fa2:	0003      	movs	r3, r0
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	0011      	movs	r1, r2
 8003faa:	0018      	movs	r0, r3
 8003fac:	f7ff fbbc 	bl	8003728 <ESP_Send>
 8003fb0:	1e03      	subs	r3, r0, #0
 8003fb2:	d001      	beq.n	8003fb8 <CWMODE3+0x30>
    return true;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e000      	b.n	8003fba <CWMODE3+0x32>
  }
  else{
    return false;
 8003fb8:	2300      	movs	r3, #0
  }
}
 8003fba:	0018      	movs	r0, r3
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	b002      	add	sp, #8
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	46c0      	nop			@ (mov r8, r8)
 8003fc4:	08019a54 	.word	0x08019a54

08003fc8 <CWSAP>:
bool CWSAP(){
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8003fce:	4b0d      	ldr	r3, [pc, #52]	@ (8004004 <CWSAP+0x3c>)
 8003fd0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f7ff fceb 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f7fc f893 	bl	8000108 <strlen>
 8003fe2:	0003      	movs	r3, r0
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	0011      	movs	r1, r2
 8003fea:	0018      	movs	r0, r3
 8003fec:	f7ff fb9c 	bl	8003728 <ESP_Send>
 8003ff0:	1e03      	subs	r3, r0, #0
 8003ff2:	d001      	beq.n	8003ff8 <CWSAP+0x30>
    return true;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e000      	b.n	8003ffa <CWSAP+0x32>
  }
  else{
    return false;
 8003ff8:	2300      	movs	r3, #0
  }
}
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	b002      	add	sp, #8
 8004000:	bd80      	pop	{r7, pc}
 8004002:	46c0      	nop			@ (mov r8, r8)
 8004004:	08019a64 	.word	0x08019a64

08004008 <CIPMUX>:
bool CIPMUX(){
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 800400e:	4b0d      	ldr	r3, [pc, #52]	@ (8004044 <CIPMUX+0x3c>)
 8004010:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	0018      	movs	r0, r3
 8004016:	f7ff fccb 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	0018      	movs	r0, r3
 800401e:	f7fc f873 	bl	8000108 <strlen>
 8004022:	0003      	movs	r3, r0
 8004024:	b29a      	uxth	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	0011      	movs	r1, r2
 800402a:	0018      	movs	r0, r3
 800402c:	f7ff fb7c 	bl	8003728 <ESP_Send>
 8004030:	1e03      	subs	r3, r0, #0
 8004032:	d001      	beq.n	8004038 <CIPMUX+0x30>
    return true;
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <CIPMUX+0x32>
  }
  else{
    return false;
 8004038:	2300      	movs	r3, #0
  }
}
 800403a:	0018      	movs	r0, r3
 800403c:	46bd      	mov	sp, r7
 800403e:	b002      	add	sp, #8
 8004040:	bd80      	pop	{r7, pc}
 8004042:	46c0      	nop			@ (mov r8, r8)
 8004044:	08019a88 	.word	0x08019a88

08004048 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 800404e:	4b0d      	ldr	r3, [pc, #52]	@ (8004084 <WEBSERVER+0x3c>)
 8004050:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	0018      	movs	r0, r3
 8004056:	f7ff fcab 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	0018      	movs	r0, r3
 800405e:	f7fc f853 	bl	8000108 <strlen>
 8004062:	0003      	movs	r3, r0
 8004064:	b29a      	uxth	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	0011      	movs	r1, r2
 800406a:	0018      	movs	r0, r3
 800406c:	f7ff fb5c 	bl	8003728 <ESP_Send>
 8004070:	1e03      	subs	r3, r0, #0
 8004072:	d001      	beq.n	8004078 <WEBSERVER+0x30>
    return true;
 8004074:	2301      	movs	r3, #1
 8004076:	e000      	b.n	800407a <WEBSERVER+0x32>
  }
  else{
    return false;
 8004078:	2300      	movs	r3, #0
  }
}
 800407a:	0018      	movs	r0, r3
 800407c:	46bd      	mov	sp, r7
 800407e:	b002      	add	sp, #8
 8004080:	bd80      	pop	{r7, pc}
 8004082:	46c0      	nop			@ (mov r8, r8)
 8004084:	08019a98 	.word	0x08019a98

08004088 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800408a:	46c6      	mov	lr, r8
 800408c:	b500      	push	{lr}
 800408e:	4c47      	ldr	r4, [pc, #284]	@ (80041ac <HTTPCPOST+0x124>)
 8004090:	44a5      	add	sp, r4
 8004092:	af00      	add	r7, sp, #0
 8004094:	466b      	mov	r3, sp
 8004096:	4698      	mov	r8, r3
  char atCommandBuff[600];
  uint16_t length = CreateMessage();
 8004098:	4b45      	ldr	r3, [pc, #276]	@ (80041b0 <HTTPCPOST+0x128>)
 800409a:	2218      	movs	r2, #24
 800409c:	189b      	adds	r3, r3, r2
 800409e:	19dc      	adds	r4, r3, r7
 80040a0:	f7ff fbd2 	bl	8003848 <CreateMessage>
 80040a4:	0003      	movs	r3, r0
 80040a6:	8023      	strh	r3, [r4, #0]
  sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 80040a8:	4b41      	ldr	r3, [pc, #260]	@ (80041b0 <HTTPCPOST+0x128>)
 80040aa:	2218      	movs	r2, #24
 80040ac:	189b      	adds	r3, r3, r2
 80040ae:	19db      	adds	r3, r3, r7
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	4a40      	ldr	r2, [pc, #256]	@ (80041b4 <HTTPCPOST+0x12c>)
 80040b4:	4940      	ldr	r1, [pc, #256]	@ (80041b8 <HTTPCPOST+0x130>)
 80040b6:	201c      	movs	r0, #28
 80040b8:	1838      	adds	r0, r7, r0
 80040ba:	f012 fbd7 	bl	801686c <siprintf>
  uint8_t len = strlen(atCommandBuff);
 80040be:	231c      	movs	r3, #28
 80040c0:	18fb      	adds	r3, r7, r3
 80040c2:	0018      	movs	r0, r3
 80040c4:	f7fc f820 	bl	8000108 <strlen>
 80040c8:	0002      	movs	r2, r0
 80040ca:	4c3c      	ldr	r4, [pc, #240]	@ (80041bc <HTTPCPOST+0x134>)
 80040cc:	2318      	movs	r3, #24
 80040ce:	18e3      	adds	r3, r4, r3
 80040d0:	19db      	adds	r3, r3, r7
 80040d2:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 80040d4:	2318      	movs	r3, #24
 80040d6:	18e3      	adds	r3, r4, r3
 80040d8:	19db      	adds	r3, r3, r7
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	3301      	adds	r3, #1
 80040de:	1e5a      	subs	r2, r3, #1
 80040e0:	2198      	movs	r1, #152	@ 0x98
 80040e2:	0089      	lsls	r1, r1, #2
 80040e4:	2018      	movs	r0, #24
 80040e6:	1809      	adds	r1, r1, r0
 80040e8:	19c9      	adds	r1, r1, r7
 80040ea:	600a      	str	r2, [r1, #0]
 80040ec:	001a      	movs	r2, r3
 80040ee:	0015      	movs	r5, r2
 80040f0:	2200      	movs	r2, #0
 80040f2:	0016      	movs	r6, r2
 80040f4:	0028      	movs	r0, r5
 80040f6:	0031      	movs	r1, r6
 80040f8:	0002      	movs	r2, r0
 80040fa:	0f52      	lsrs	r2, r2, #29
 80040fc:	000d      	movs	r5, r1
 80040fe:	00ed      	lsls	r5, r5, #3
 8004100:	617d      	str	r5, [r7, #20]
 8004102:	697d      	ldr	r5, [r7, #20]
 8004104:	4315      	orrs	r5, r2
 8004106:	617d      	str	r5, [r7, #20]
 8004108:	0002      	movs	r2, r0
 800410a:	00d2      	lsls	r2, r2, #3
 800410c:	613a      	str	r2, [r7, #16]
 800410e:	001a      	movs	r2, r3
 8004110:	603a      	str	r2, [r7, #0]
 8004112:	2200      	movs	r2, #0
 8004114:	607a      	str	r2, [r7, #4]
 8004116:	6838      	ldr	r0, [r7, #0]
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	0002      	movs	r2, r0
 800411c:	0f52      	lsrs	r2, r2, #29
 800411e:	000d      	movs	r5, r1
 8004120:	00ed      	lsls	r5, r5, #3
 8004122:	60fd      	str	r5, [r7, #12]
 8004124:	68fd      	ldr	r5, [r7, #12]
 8004126:	4315      	orrs	r5, r2
 8004128:	60fd      	str	r5, [r7, #12]
 800412a:	0002      	movs	r2, r0
 800412c:	00d2      	lsls	r2, r2, #3
 800412e:	60ba      	str	r2, [r7, #8]
 8004130:	3307      	adds	r3, #7
 8004132:	08db      	lsrs	r3, r3, #3
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	466a      	mov	r2, sp
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	469d      	mov	sp, r3
 800413c:	466b      	mov	r3, sp
 800413e:	3300      	adds	r3, #0
 8004140:	2597      	movs	r5, #151	@ 0x97
 8004142:	00ad      	lsls	r5, r5, #2
 8004144:	2218      	movs	r2, #24
 8004146:	18aa      	adds	r2, r5, r2
 8004148:	19d2      	adds	r2, r2, r7
 800414a:	6013      	str	r3, [r2, #0]
  strncpy(atCommand, atCommandBuff, len);
 800414c:	2318      	movs	r3, #24
 800414e:	18e3      	adds	r3, r4, r3
 8004150:	19db      	adds	r3, r3, r7
 8004152:	781a      	ldrb	r2, [r3, #0]
 8004154:	231c      	movs	r3, #28
 8004156:	18f9      	adds	r1, r7, r3
 8004158:	2318      	movs	r3, #24
 800415a:	18eb      	adds	r3, r5, r3
 800415c:	19db      	adds	r3, r3, r7
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	0018      	movs	r0, r3
 8004162:	f012 fc2f 	bl	80169c4 <strncpy>
  SetCommandBuffer(atCommand);
 8004166:	2318      	movs	r3, #24
 8004168:	18eb      	adds	r3, r5, r3
 800416a:	19db      	adds	r3, r3, r7
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	0018      	movs	r0, r3
 8004170:	f7ff fc1e 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)){
 8004174:	2318      	movs	r3, #24
 8004176:	18e3      	adds	r3, r4, r3
 8004178:	19db      	adds	r3, r3, r7
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	b29a      	uxth	r2, r3
 800417e:	2318      	movs	r3, #24
 8004180:	18eb      	adds	r3, r5, r3
 8004182:	19db      	adds	r3, r3, r7
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	0011      	movs	r1, r2
 8004188:	0018      	movs	r0, r3
 800418a:	f7ff facd 	bl	8003728 <ESP_Send>
 800418e:	1e03      	subs	r3, r0, #0
 8004190:	d001      	beq.n	8004196 <HTTPCPOST+0x10e>
    return true;
 8004192:	2301      	movs	r3, #1
 8004194:	e000      	b.n	8004198 <HTTPCPOST+0x110>
  }
  else{
    return false;
 8004196:	2300      	movs	r3, #0
 8004198:	46c5      	mov	sp, r8
  }
}
 800419a:	0018      	movs	r0, r3
 800419c:	46bd      	mov	sp, r7
 800419e:	23a0      	movs	r3, #160	@ 0xa0
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	449d      	add	sp, r3
 80041a4:	bc80      	pop	{r7}
 80041a6:	46b8      	mov	r8, r7
 80041a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041aa:	46c0      	nop			@ (mov r8, r8)
 80041ac:	fffffd80 	.word	0xfffffd80
 80041b0:	00000266 	.word	0x00000266
 80041b4:	20000028 	.word	0x20000028
 80041b8:	08019ab0 	.word	0x08019ab0
 80041bc:	00000265 	.word	0x00000265

080041c0 <SENDDATA>:
bool SENDDATA(){
 80041c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041c2:	46c6      	mov	lr, r8
 80041c4:	b500      	push	{lr}
 80041c6:	4c4c      	ldr	r4, [pc, #304]	@ (80042f8 <SENDDATA+0x138>)
 80041c8:	44a5      	add	sp, r4
 80041ca:	af04      	add	r7, sp, #16
 80041cc:	466b      	mov	r3, sp
 80041ce:	4698      	mov	r8, r3
  char atCommandBuff[656];
  memset(atCommandBuff, '\0', 656);
 80041d0:	23a4      	movs	r3, #164	@ 0xa4
 80041d2:	009a      	lsls	r2, r3, #2
 80041d4:	261c      	movs	r6, #28
 80041d6:	19bb      	adds	r3, r7, r6
 80041d8:	2100      	movs	r1, #0
 80041da:	0018      	movs	r0, r3
 80041dc:	f012 fbea 	bl	80169b4 <memset>
  sprintf(atCommandBuff,"[{%s}, {%s}, {%s}, {%s}, {%s}]", messagePart1, messagePart2, messagePart3, messagePart4, messagePart5);
 80041e0:	4a46      	ldr	r2, [pc, #280]	@ (80042fc <SENDDATA+0x13c>)
 80041e2:	4947      	ldr	r1, [pc, #284]	@ (8004300 <SENDDATA+0x140>)
 80041e4:	4847      	ldr	r0, [pc, #284]	@ (8004304 <SENDDATA+0x144>)
 80041e6:	19be      	adds	r6, r7, r6
 80041e8:	4b47      	ldr	r3, [pc, #284]	@ (8004308 <SENDDATA+0x148>)
 80041ea:	9302      	str	r3, [sp, #8]
 80041ec:	4b47      	ldr	r3, [pc, #284]	@ (800430c <SENDDATA+0x14c>)
 80041ee:	9301      	str	r3, [sp, #4]
 80041f0:	4b47      	ldr	r3, [pc, #284]	@ (8004310 <SENDDATA+0x150>)
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	0013      	movs	r3, r2
 80041f6:	000a      	movs	r2, r1
 80041f8:	0001      	movs	r1, r0
 80041fa:	0030      	movs	r0, r6
 80041fc:	f012 fb36 	bl	801686c <siprintf>
  uint16_t len = strlen(atCommandBuff);
 8004200:	231c      	movs	r3, #28
 8004202:	18fb      	adds	r3, r7, r3
 8004204:	0018      	movs	r0, r3
 8004206:	f7fb ff7f 	bl	8000108 <strlen>
 800420a:	0002      	movs	r2, r0
 800420c:	4e41      	ldr	r6, [pc, #260]	@ (8004314 <SENDDATA+0x154>)
 800420e:	2018      	movs	r0, #24
 8004210:	1831      	adds	r1, r6, r0
 8004212:	19cb      	adds	r3, r1, r7
 8004214:	801a      	strh	r2, [r3, #0]
  char atCommand[len+1];
 8004216:	1832      	adds	r2, r6, r0
 8004218:	19d3      	adds	r3, r2, r7
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	3301      	adds	r3, #1
 800421e:	1e5a      	subs	r2, r3, #1
 8004220:	21a6      	movs	r1, #166	@ 0xa6
 8004222:	0089      	lsls	r1, r1, #2
 8004224:	1809      	adds	r1, r1, r0
 8004226:	19c9      	adds	r1, r1, r7
 8004228:	600a      	str	r2, [r1, #0]
 800422a:	001a      	movs	r2, r3
 800422c:	60ba      	str	r2, [r7, #8]
 800422e:	2200      	movs	r2, #0
 8004230:	60fa      	str	r2, [r7, #12]
 8004232:	68b8      	ldr	r0, [r7, #8]
 8004234:	68f9      	ldr	r1, [r7, #12]
 8004236:	0002      	movs	r2, r0
 8004238:	0f52      	lsrs	r2, r2, #29
 800423a:	000e      	movs	r6, r1
 800423c:	00f6      	lsls	r6, r6, #3
 800423e:	617e      	str	r6, [r7, #20]
 8004240:	697e      	ldr	r6, [r7, #20]
 8004242:	4316      	orrs	r6, r2
 8004244:	617e      	str	r6, [r7, #20]
 8004246:	0002      	movs	r2, r0
 8004248:	00d2      	lsls	r2, r2, #3
 800424a:	613a      	str	r2, [r7, #16]
 800424c:	001a      	movs	r2, r3
 800424e:	603a      	str	r2, [r7, #0]
 8004250:	2200      	movs	r2, #0
 8004252:	607a      	str	r2, [r7, #4]
 8004254:	6838      	ldr	r0, [r7, #0]
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	0002      	movs	r2, r0
 800425a:	0f52      	lsrs	r2, r2, #29
 800425c:	000e      	movs	r6, r1
 800425e:	00f5      	lsls	r5, r6, #3
 8004260:	4315      	orrs	r5, r2
 8004262:	0002      	movs	r2, r0
 8004264:	00d4      	lsls	r4, r2, #3
 8004266:	3307      	adds	r3, #7
 8004268:	08db      	lsrs	r3, r3, #3
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	466a      	mov	r2, sp
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	469d      	mov	sp, r3
 8004272:	ab04      	add	r3, sp, #16
 8004274:	3300      	adds	r3, #0
 8004276:	21a5      	movs	r1, #165	@ 0xa5
 8004278:	0089      	lsls	r1, r1, #2
 800427a:	2018      	movs	r0, #24
 800427c:	180a      	adds	r2, r1, r0
 800427e:	19d2      	adds	r2, r2, r7
 8004280:	6013      	str	r3, [r2, #0]
  memset(atCommand, '\0', len+1);
 8004282:	4e24      	ldr	r6, [pc, #144]	@ (8004314 <SENDDATA+0x154>)
 8004284:	1832      	adds	r2, r6, r0
 8004286:	19d3      	adds	r3, r2, r7
 8004288:	881b      	ldrh	r3, [r3, #0]
 800428a:	3301      	adds	r3, #1
 800428c:	001a      	movs	r2, r3
 800428e:	000c      	movs	r4, r1
 8004290:	0005      	movs	r5, r0
 8004292:	1821      	adds	r1, r4, r0
 8004294:	19cb      	adds	r3, r1, r7
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2100      	movs	r1, #0
 800429a:	0018      	movs	r0, r3
 800429c:	f012 fb8a 	bl	80169b4 <memset>
  strncpy(atCommand, atCommandBuff, len);
 80042a0:	0028      	movs	r0, r5
 80042a2:	1832      	adds	r2, r6, r0
 80042a4:	19d3      	adds	r3, r2, r7
 80042a6:	881a      	ldrh	r2, [r3, #0]
 80042a8:	231c      	movs	r3, #28
 80042aa:	18f9      	adds	r1, r7, r3
 80042ac:	0005      	movs	r5, r0
 80042ae:	1963      	adds	r3, r4, r5
 80042b0:	19db      	adds	r3, r3, r7
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	0018      	movs	r0, r3
 80042b6:	f012 fb85 	bl	80169c4 <strncpy>
  SetCommandBuffer(atCommand);
 80042ba:	1963      	adds	r3, r4, r5
 80042bc:	19db      	adds	r3, r3, r7
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	0018      	movs	r0, r3
 80042c2:	f7ff fb75 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 80042c6:	0028      	movs	r0, r5
 80042c8:	1833      	adds	r3, r6, r0
 80042ca:	19db      	adds	r3, r3, r7
 80042cc:	881a      	ldrh	r2, [r3, #0]
 80042ce:	1823      	adds	r3, r4, r0
 80042d0:	19db      	adds	r3, r3, r7
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	0011      	movs	r1, r2
 80042d6:	0018      	movs	r0, r3
 80042d8:	f7ff fa26 	bl	8003728 <ESP_Send>
 80042dc:	1e03      	subs	r3, r0, #0
 80042de:	d001      	beq.n	80042e4 <SENDDATA+0x124>
    return true;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e000      	b.n	80042e6 <SENDDATA+0x126>
  }
  else{
    return false;
 80042e4:	2300      	movs	r3, #0
 80042e6:	46c5      	mov	sp, r8
  }
}
 80042e8:	0018      	movs	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	23ae      	movs	r3, #174	@ 0xae
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	449d      	add	sp, r3
 80042f2:	bc80      	pop	{r7}
 80042f4:	46b8      	mov	r8, r7
 80042f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042f8:	fffffd38 	.word	0xfffffd38
 80042fc:	20000674 	.word	0x20000674
 8004300:	200005f4 	.word	0x200005f4
 8004304:	08019ae8 	.word	0x08019ae8
 8004308:	200007f4 	.word	0x200007f4
 800430c:	20000774 	.word	0x20000774
 8004310:	200006f4 	.word	0x200006f4
 8004314:	0000029e 	.word	0x0000029e

08004318 <SLEEP>:
bool SLEEP(){
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 800431e:	4b0d      	ldr	r3, [pc, #52]	@ (8004354 <SLEEP+0x3c>)
 8004320:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	0018      	movs	r0, r3
 8004326:	f7ff fb43 	bl	80039b0 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	0018      	movs	r0, r3
 800432e:	f7fb feeb 	bl	8000108 <strlen>
 8004332:	0003      	movs	r3, r0
 8004334:	b29a      	uxth	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	0011      	movs	r1, r2
 800433a:	0018      	movs	r0, r3
 800433c:	f7ff f9f4 	bl	8003728 <ESP_Send>
 8004340:	1e03      	subs	r3, r0, #0
 8004342:	d001      	beq.n	8004348 <SLEEP+0x30>
    return true;
 8004344:	2301      	movs	r3, #1
 8004346:	e000      	b.n	800434a <SLEEP+0x32>
  }
  else{
    return false;
 8004348:	2300      	movs	r3, #0
  }
}
 800434a:	0018      	movs	r0, r3
 800434c:	46bd      	mov	sp, r7
 800434e:	b002      	add	sp, #8
 8004350:	bd80      	pop	{r7, pc}
 8004352:	46c0      	nop			@ (mov r8, r8)
 8004354:	08019b08 	.word	0x08019b08

08004358 <DMA_ProcessBuffer>:

uint8_t DMA_ProcessBuffer(uint8_t expectation) {
 8004358:	b5b0      	push	{r4, r5, r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	0002      	movs	r2, r0
 8004360:	1dfb      	adds	r3, r7, #7
 8004362:	701a      	strb	r2, [r3, #0]
    uint8_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004364:	4b4c      	ldr	r3, [pc, #304]	@ (8004498 <DMA_ProcessBuffer+0x140>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	b2da      	uxtb	r2, r3
 800436c:	210e      	movs	r1, #14
 800436e:	187b      	adds	r3, r7, r1
 8004370:	43d2      	mvns	r2, r2
 8004372:	701a      	strb	r2, [r3, #0]
    uint8_t status = RECEIVE_STATUS_INCOMPLETE;
 8004374:	200f      	movs	r0, #15
 8004376:	183b      	adds	r3, r7, r0
 8004378:	2203      	movs	r2, #3
 800437a:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
      pos = ESP_MAX_BUFFER_SIZE;
    }
    if(pos == OldPos){
 800437c:	4b47      	ldr	r3, [pc, #284]	@ (800449c <DMA_ProcessBuffer+0x144>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	187a      	adds	r2, r7, r1
 8004384:	7812      	ldrb	r2, [r2, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d129      	bne.n	80043de <DMA_ProcessBuffer+0x86>
      if(retry >4){
 800438a:	4b45      	ldr	r3, [pc, #276]	@ (80044a0 <DMA_ProcessBuffer+0x148>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2b04      	cmp	r3, #4
 8004390:	d913      	bls.n	80043ba <DMA_ProcessBuffer+0x62>
        retry = 0;
 8004392:	4b43      	ldr	r3, [pc, #268]	@ (80044a0 <DMA_ProcessBuffer+0x148>)
 8004394:	2200      	movs	r2, #0
 8004396:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004398:	4b42      	ldr	r3, [pc, #264]	@ (80044a4 <DMA_ProcessBuffer+0x14c>)
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d107      	bne.n	80043b0 <DMA_ProcessBuffer+0x58>
 80043a0:	4b41      	ldr	r3, [pc, #260]	@ (80044a8 <DMA_ProcessBuffer+0x150>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <DMA_ProcessBuffer+0x58>
          status = RECEIVE_STATUS_UNPROGGED;
 80043a8:	183b      	adds	r3, r7, r0
 80043aa:	2207      	movs	r2, #7
 80043ac:	701a      	strb	r2, [r3, #0]
 80043ae:	e016      	b.n	80043de <DMA_ProcessBuffer+0x86>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 80043b0:	230f      	movs	r3, #15
 80043b2:	18fb      	adds	r3, r7, r3
 80043b4:	2206      	movs	r2, #6
 80043b6:	701a      	strb	r2, [r3, #0]
 80043b8:	e011      	b.n	80043de <DMA_ProcessBuffer+0x86>
        }
      }
     else{
       retry ++;
 80043ba:	4b39      	ldr	r3, [pc, #228]	@ (80044a0 <DMA_ProcessBuffer+0x148>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	3301      	adds	r3, #1
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	4b37      	ldr	r3, [pc, #220]	@ (80044a0 <DMA_ProcessBuffer+0x148>)
 80043c4:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80043c6:	f004 ff4b 	bl	8009260 <HAL_GetTick>
 80043ca:	0003      	movs	r3, r0
 80043cc:	33f5      	adds	r3, #245	@ 0xf5
 80043ce:	33ff      	adds	r3, #255	@ 0xff
 80043d0:	001a      	movs	r2, r3
 80043d2:	4b36      	ldr	r3, [pc, #216]	@ (80044ac <DMA_ProcessBuffer+0x154>)
 80043d4:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 80043d6:	230f      	movs	r3, #15
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	2204      	movs	r2, #4
 80043dc:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 80043de:	4b2f      	ldr	r3, [pc, #188]	@ (800449c <DMA_ProcessBuffer+0x144>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	210e      	movs	r1, #14
 80043e6:	187a      	adds	r2, r7, r1
 80043e8:	7812      	ldrb	r2, [r2, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d048      	beq.n	8004480 <DMA_ProcessBuffer+0x128>
      retry = 0;
 80043ee:	4b2c      	ldr	r3, [pc, #176]	@ (80044a0 <DMA_ProcessBuffer+0x148>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	701a      	strb	r2, [r3, #0]
        if (pos > OldPos) {
 80043f4:	4b29      	ldr	r3, [pc, #164]	@ (800449c <DMA_ProcessBuffer+0x144>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	187a      	adds	r2, r7, r1
 80043fc:	7812      	ldrb	r2, [r2, #0]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d917      	bls.n	8004432 <DMA_ProcessBuffer+0xda>
            // Direct parsing
            status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004402:	4b26      	ldr	r3, [pc, #152]	@ (800449c <DMA_ProcessBuffer+0x144>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	001a      	movs	r2, r3
 800440a:	4b29      	ldr	r3, [pc, #164]	@ (80044b0 <DMA_ProcessBuffer+0x158>)
 800440c:	18d0      	adds	r0, r2, r3
 800440e:	187b      	adds	r3, r7, r1
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	b29b      	uxth	r3, r3
 8004414:	4a21      	ldr	r2, [pc, #132]	@ (800449c <DMA_ProcessBuffer+0x144>)
 8004416:	7812      	ldrb	r2, [r2, #0]
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	b299      	uxth	r1, r3
 800441e:	230f      	movs	r3, #15
 8004420:	18fc      	adds	r4, r7, r3
 8004422:	1dfb      	adds	r3, r7, #7
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	001a      	movs	r2, r3
 8004428:	f7ff fb0c 	bl	8003a44 <ParseBuffer>
 800442c:	0003      	movs	r3, r0
 800442e:	7023      	strb	r3, [r4, #0]
 8004430:	e026      	b.n	8004480 <DMA_ProcessBuffer+0x128>
              //memset(RxBuffer, 0, ESP_MAX_BUFFER_SIZE);
              //pos = 0;
            }
        } else {
            // Buffer wrap-around
            status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004432:	4b1a      	ldr	r3, [pc, #104]	@ (800449c <DMA_ProcessBuffer+0x144>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	001a      	movs	r2, r3
 800443a:	4b1d      	ldr	r3, [pc, #116]	@ (80044b0 <DMA_ProcessBuffer+0x158>)
 800443c:	18d0      	adds	r0, r2, r3
 800443e:	4b17      	ldr	r3, [pc, #92]	@ (800449c <DMA_ProcessBuffer+0x144>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	b2db      	uxtb	r3, r3
 8004444:	001a      	movs	r2, r3
 8004446:	23ff      	movs	r3, #255	@ 0xff
 8004448:	1a9b      	subs	r3, r3, r2
 800444a:	b299      	uxth	r1, r3
 800444c:	250f      	movs	r5, #15
 800444e:	197c      	adds	r4, r7, r5
 8004450:	1dfb      	adds	r3, r7, #7
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	001a      	movs	r2, r3
 8004456:	f7ff faf5 	bl	8003a44 <ParseBuffer>
 800445a:	0003      	movs	r3, r0
 800445c:	7023      	strb	r3, [r4, #0]
            if (pos > 0) {
 800445e:	220e      	movs	r2, #14
 8004460:	18bb      	adds	r3, r7, r2
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00b      	beq.n	8004480 <DMA_ProcessBuffer+0x128>
                status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004468:	18bb      	adds	r3, r7, r2
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	b299      	uxth	r1, r3
 800446e:	197c      	adds	r4, r7, r5
 8004470:	1dfb      	adds	r3, r7, #7
 8004472:	781a      	ldrb	r2, [r3, #0]
 8004474:	4b0e      	ldr	r3, [pc, #56]	@ (80044b0 <DMA_ProcessBuffer+0x158>)
 8004476:	0018      	movs	r0, r3
 8004478:	f7ff fae4 	bl	8003a44 <ParseBuffer>
 800447c:	0003      	movs	r3, r0
 800447e:	7023      	strb	r3, [r4, #0]
            }
        }
    }
    OldPos = pos;
 8004480:	4b06      	ldr	r3, [pc, #24]	@ (800449c <DMA_ProcessBuffer+0x144>)
 8004482:	220e      	movs	r2, #14
 8004484:	18ba      	adds	r2, r7, r2
 8004486:	7812      	ldrb	r2, [r2, #0]
 8004488:	701a      	strb	r2, [r3, #0]
    return status;
 800448a:	230f      	movs	r3, #15
 800448c:	18fb      	adds	r3, r7, r3
 800448e:	781b      	ldrb	r3, [r3, #0]
}
 8004490:	0018      	movs	r0, r3
 8004492:	46bd      	mov	sp, r7
 8004494:	b004      	add	sp, #16
 8004496:	bdb0      	pop	{r4, r5, r7, pc}
 8004498:	20002808 	.word	0x20002808
 800449c:	2000087f 	.word	0x2000087f
 80044a0:	20000884 	.word	0x20000884
 80044a4:	20000a8a 	.word	0x20000a8a
 80044a8:	20000002 	.word	0x20000002
 80044ac:	20000880 	.word	0x20000880
 80044b0:	200004d8 	.word	0x200004d8

080044b4 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	0002      	movs	r2, r0
 80044bc:	1dfb      	adds	r3, r7, #7
 80044be:	701a      	strb	r2, [r3, #0]
 80044c0:	1dbb      	adds	r3, r7, #6
 80044c2:	1c0a      	adds	r2, r1, #0
 80044c4:	701a      	strb	r2, [r3, #0]
  bool value = false;
 80044c6:	210f      	movs	r1, #15
 80044c8:	187b      	adds	r3, r7, r1
 80044ca:	2200      	movs	r2, #0
 80044cc:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 80044ce:	1dbb      	adds	r3, r7, #6
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d105      	bne.n	80044e2 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 80044d6:	187b      	adds	r3, r7, r1
 80044d8:	1dfa      	adds	r2, r7, #7
 80044da:	7812      	ldrb	r2, [r2, #0]
 80044dc:	4251      	negs	r1, r2
 80044de:	414a      	adcs	r2, r1
 80044e0:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 80044e2:	1dbb      	adds	r3, r7, #6
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d107      	bne.n	80044fa <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 80044ea:	230f      	movs	r3, #15
 80044ec:	18fb      	adds	r3, r7, r3
 80044ee:	1dfa      	adds	r2, r7, #7
 80044f0:	7812      	ldrb	r2, [r2, #0]
 80044f2:	3a02      	subs	r2, #2
 80044f4:	4251      	negs	r1, r2
 80044f6:	414a      	adcs	r2, r1
 80044f8:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 80044fa:	1dbb      	adds	r3, r7, #6
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d107      	bne.n	8004512 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004502:	230f      	movs	r3, #15
 8004504:	18fb      	adds	r3, r7, r3
 8004506:	1dfa      	adds	r2, r7, #7
 8004508:	7812      	ldrb	r2, [r2, #0]
 800450a:	3a05      	subs	r2, #5
 800450c:	4251      	negs	r1, r2
 800450e:	414a      	adcs	r2, r1
 8004510:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004512:	230f      	movs	r3, #15
 8004514:	18fb      	adds	r3, r7, r3
 8004516:	781b      	ldrb	r3, [r3, #0]
}
 8004518:	0018      	movs	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	b004      	add	sp, #16
 800451e:	bd80      	pop	{r7, pc}

08004520 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004520:	b590      	push	{r4, r7, lr}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	0002      	movs	r2, r0
 8004528:	1dfb      	adds	r3, r7, #7
 800452a:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 800452c:	230f      	movs	r3, #15
 800452e:	18fb      	adds	r3, r7, r3
 8004530:	2200      	movs	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004534:	1dfb      	adds	r3, r7, #7
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b0e      	cmp	r3, #14
 800453a:	d900      	bls.n	800453e <AT_Send+0x1e>
 800453c:	e136      	b.n	80047ac <AT_Send+0x28c>
 800453e:	009a      	lsls	r2, r3, #2
 8004540:	4b9e      	ldr	r3, [pc, #632]	@ (80047bc <AT_Send+0x29c>)
 8004542:	18d3      	adds	r3, r2, r3
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004548:	4b9d      	ldr	r3, [pc, #628]	@ (80047c0 <AT_Send+0x2a0>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	0018      	movs	r0, r3
 800454e:	f004 fa39 	bl	80089c4 <TimestampIsReached>
 8004552:	1e03      	subs	r3, r0, #0
 8004554:	d100      	bne.n	8004558 <AT_Send+0x38>
 8004556:	e128      	b.n	80047aa <AT_Send+0x28a>
    ATCommandSend = PollAwake();
 8004558:	230f      	movs	r3, #15
 800455a:	18fc      	adds	r4, r7, r3
 800455c:	f7ff fbb4 	bl	8003cc8 <PollAwake>
 8004560:	0003      	movs	r3, r0
 8004562:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004564:	f004 fe7c 	bl	8009260 <HAL_GetTick>
 8004568:	0003      	movs	r3, r0
 800456a:	3332      	adds	r3, #50	@ 0x32
 800456c:	001a      	movs	r2, r3
 800456e:	4b94      	ldr	r3, [pc, #592]	@ (80047c0 <AT_Send+0x2a0>)
 8004570:	601a      	str	r2, [r3, #0]
  }
  break;
 8004572:	e11a      	b.n	80047aa <AT_Send+0x28a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004574:	4a93      	ldr	r2, [pc, #588]	@ (80047c4 <AT_Send+0x2a4>)
 8004576:	4b94      	ldr	r3, [pc, #592]	@ (80047c8 <AT_Send+0x2a8>)
 8004578:	0019      	movs	r1, r3
 800457a:	2003      	movs	r0, #3
 800457c:	f004 fa78 	bl	8008a70 <CreateLine>
    ATCommandSend = RFPower();
 8004580:	230f      	movs	r3, #15
 8004582:	18fc      	adds	r4, r7, r3
 8004584:	f7ff fbc0 	bl	8003d08 <RFPower>
 8004588:	0003      	movs	r3, r0
 800458a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800458c:	f004 fe68 	bl	8009260 <HAL_GetTick>
 8004590:	0003      	movs	r3, r0
 8004592:	330a      	adds	r3, #10
 8004594:	001a      	movs	r2, r3
 8004596:	4b8a      	ldr	r3, [pc, #552]	@ (80047c0 <AT_Send+0x2a0>)
 8004598:	601a      	str	r2, [r3, #0]
    break;
 800459a:	e107      	b.n	80047ac <AT_Send+0x28c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 800459c:	4a8b      	ldr	r2, [pc, #556]	@ (80047cc <AT_Send+0x2ac>)
 800459e:	4b8a      	ldr	r3, [pc, #552]	@ (80047c8 <AT_Send+0x2a8>)
 80045a0:	0019      	movs	r1, r3
 80045a2:	2003      	movs	r0, #3
 80045a4:	f004 fa64 	bl	8008a70 <CreateLine>
    ATCommandSend = CheckRFPower();
 80045a8:	230f      	movs	r3, #15
 80045aa:	18fc      	adds	r4, r7, r3
 80045ac:	f7ff fbcc 	bl	8003d48 <CheckRFPower>
 80045b0:	0003      	movs	r3, r0
 80045b2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80045b4:	f004 fe54 	bl	8009260 <HAL_GetTick>
 80045b8:	0003      	movs	r3, r0
 80045ba:	330a      	adds	r3, #10
 80045bc:	001a      	movs	r2, r3
 80045be:	4b80      	ldr	r3, [pc, #512]	@ (80047c0 <AT_Send+0x2a0>)
 80045c0:	601a      	str	r2, [r3, #0]
    break;
 80045c2:	e0f3      	b.n	80047ac <AT_Send+0x28c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 80045c4:	4a82      	ldr	r2, [pc, #520]	@ (80047d0 <AT_Send+0x2b0>)
 80045c6:	4b80      	ldr	r3, [pc, #512]	@ (80047c8 <AT_Send+0x2a8>)
 80045c8:	0019      	movs	r1, r3
 80045ca:	2003      	movs	r0, #3
 80045cc:	f004 fa50 	bl	8008a70 <CreateLine>
    ATCommandSend = ATRestore();
 80045d0:	230f      	movs	r3, #15
 80045d2:	18fc      	adds	r4, r7, r3
 80045d4:	f7ff fbd8 	bl	8003d88 <ATRestore>
 80045d8:	0003      	movs	r3, r0
 80045da:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80045dc:	f004 fe40 	bl	8009260 <HAL_GetTick>
 80045e0:	0003      	movs	r3, r0
 80045e2:	3332      	adds	r3, #50	@ 0x32
 80045e4:	001a      	movs	r2, r3
 80045e6:	4b76      	ldr	r3, [pc, #472]	@ (80047c0 <AT_Send+0x2a0>)
 80045e8:	601a      	str	r2, [r3, #0]
    break;
 80045ea:	e0df      	b.n	80047ac <AT_Send+0x28c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 80045ec:	4a79      	ldr	r2, [pc, #484]	@ (80047d4 <AT_Send+0x2b4>)
 80045ee:	4b76      	ldr	r3, [pc, #472]	@ (80047c8 <AT_Send+0x2a8>)
 80045f0:	0019      	movs	r1, r3
 80045f2:	2003      	movs	r0, #3
 80045f4:	f004 fa3c 	bl	8008a70 <CreateLine>
    ATCommandSend = CWINIT();
 80045f8:	230f      	movs	r3, #15
 80045fa:	18fc      	adds	r4, r7, r3
 80045fc:	f7ff fbe4 	bl	8003dc8 <CWINIT>
 8004600:	0003      	movs	r3, r0
 8004602:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004604:	f004 fe2c 	bl	8009260 <HAL_GetTick>
 8004608:	0003      	movs	r3, r0
 800460a:	33f5      	adds	r3, #245	@ 0xf5
 800460c:	33ff      	adds	r3, #255	@ 0xff
 800460e:	001a      	movs	r2, r3
 8004610:	4b6b      	ldr	r3, [pc, #428]	@ (80047c0 <AT_Send+0x2a0>)
 8004612:	601a      	str	r2, [r3, #0]
    break;
 8004614:	e0ca      	b.n	80047ac <AT_Send+0x28c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004616:	4a70      	ldr	r2, [pc, #448]	@ (80047d8 <AT_Send+0x2b8>)
 8004618:	4b6b      	ldr	r3, [pc, #428]	@ (80047c8 <AT_Send+0x2a8>)
 800461a:	0019      	movs	r1, r3
 800461c:	2003      	movs	r0, #3
 800461e:	f004 fa27 	bl	8008a70 <CreateLine>
    ATCommandSend = CWMODE1();
 8004622:	230f      	movs	r3, #15
 8004624:	18fc      	adds	r4, r7, r3
 8004626:	f7ff fbef 	bl	8003e08 <CWMODE1>
 800462a:	0003      	movs	r3, r0
 800462c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800462e:	f004 fe17 	bl	8009260 <HAL_GetTick>
 8004632:	0003      	movs	r3, r0
 8004634:	330a      	adds	r3, #10
 8004636:	001a      	movs	r2, r3
 8004638:	4b61      	ldr	r3, [pc, #388]	@ (80047c0 <AT_Send+0x2a0>)
 800463a:	601a      	str	r2, [r3, #0]
    break;
 800463c:	e0b6      	b.n	80047ac <AT_Send+0x28c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 800463e:	4a67      	ldr	r2, [pc, #412]	@ (80047dc <AT_Send+0x2bc>)
 8004640:	4b61      	ldr	r3, [pc, #388]	@ (80047c8 <AT_Send+0x2a8>)
 8004642:	0019      	movs	r1, r3
 8004644:	2003      	movs	r0, #3
 8004646:	f004 fa13 	bl	8008a70 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 800464a:	230f      	movs	r3, #15
 800464c:	18fc      	adds	r4, r7, r3
 800464e:	f7ff fbfb 	bl	8003e48 <CWAUTOCONN>
 8004652:	0003      	movs	r3, r0
 8004654:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004656:	f004 fe03 	bl	8009260 <HAL_GetTick>
 800465a:	0003      	movs	r3, r0
 800465c:	330a      	adds	r3, #10
 800465e:	001a      	movs	r2, r3
 8004660:	4b57      	ldr	r3, [pc, #348]	@ (80047c0 <AT_Send+0x2a0>)
 8004662:	601a      	str	r2, [r3, #0]
    break;
 8004664:	e0a2      	b.n	80047ac <AT_Send+0x28c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004666:	4a5e      	ldr	r2, [pc, #376]	@ (80047e0 <AT_Send+0x2c0>)
 8004668:	4b57      	ldr	r3, [pc, #348]	@ (80047c8 <AT_Send+0x2a8>)
 800466a:	0019      	movs	r1, r3
 800466c:	2003      	movs	r0, #3
 800466e:	f004 f9ff 	bl	8008a70 <CreateLine>
    ATCommandSend = CWJAP();
 8004672:	230f      	movs	r3, #15
 8004674:	18fc      	adds	r4, r7, r3
 8004676:	f7ff fc07 	bl	8003e88 <CWJAP>
 800467a:	0003      	movs	r3, r0
 800467c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800467e:	f004 fdef 	bl	8009260 <HAL_GetTick>
 8004682:	0003      	movs	r3, r0
 8004684:	3332      	adds	r3, #50	@ 0x32
 8004686:	001a      	movs	r2, r3
 8004688:	4b4d      	ldr	r3, [pc, #308]	@ (80047c0 <AT_Send+0x2a0>)
 800468a:	601a      	str	r2, [r3, #0]
    break;
 800468c:	e08e      	b.n	80047ac <AT_Send+0x28c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 800468e:	4a55      	ldr	r2, [pc, #340]	@ (80047e4 <AT_Send+0x2c4>)
 8004690:	4b4d      	ldr	r3, [pc, #308]	@ (80047c8 <AT_Send+0x2a8>)
 8004692:	0019      	movs	r1, r3
 8004694:	2003      	movs	r0, #3
 8004696:	f004 f9eb 	bl	8008a70 <CreateLine>
    ATCommandSend = CWMODE3();
 800469a:	230f      	movs	r3, #15
 800469c:	18fc      	adds	r4, r7, r3
 800469e:	f7ff fc73 	bl	8003f88 <CWMODE3>
 80046a2:	0003      	movs	r3, r0
 80046a4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80046a6:	f004 fddb 	bl	8009260 <HAL_GetTick>
 80046aa:	0003      	movs	r3, r0
 80046ac:	330a      	adds	r3, #10
 80046ae:	001a      	movs	r2, r3
 80046b0:	4b43      	ldr	r3, [pc, #268]	@ (80047c0 <AT_Send+0x2a0>)
 80046b2:	601a      	str	r2, [r3, #0]
    break;
 80046b4:	e07a      	b.n	80047ac <AT_Send+0x28c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 80046b6:	4a4c      	ldr	r2, [pc, #304]	@ (80047e8 <AT_Send+0x2c8>)
 80046b8:	4b43      	ldr	r3, [pc, #268]	@ (80047c8 <AT_Send+0x2a8>)
 80046ba:	0019      	movs	r1, r3
 80046bc:	2003      	movs	r0, #3
 80046be:	f004 f9d7 	bl	8008a70 <CreateLine>
    ATCommandSend = CWSAP();
 80046c2:	230f      	movs	r3, #15
 80046c4:	18fc      	adds	r4, r7, r3
 80046c6:	f7ff fc7f 	bl	8003fc8 <CWSAP>
 80046ca:	0003      	movs	r3, r0
 80046cc:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80046ce:	f004 fdc7 	bl	8009260 <HAL_GetTick>
 80046d2:	0003      	movs	r3, r0
 80046d4:	330a      	adds	r3, #10
 80046d6:	001a      	movs	r2, r3
 80046d8:	4b39      	ldr	r3, [pc, #228]	@ (80047c0 <AT_Send+0x2a0>)
 80046da:	601a      	str	r2, [r3, #0]
    break;
 80046dc:	e066      	b.n	80047ac <AT_Send+0x28c>

  case AT_CIPMUX:
    Debug("SET multiple communication channels");
 80046de:	4a43      	ldr	r2, [pc, #268]	@ (80047ec <AT_Send+0x2cc>)
 80046e0:	4b39      	ldr	r3, [pc, #228]	@ (80047c8 <AT_Send+0x2a8>)
 80046e2:	0019      	movs	r1, r3
 80046e4:	2003      	movs	r0, #3
 80046e6:	f004 f9c3 	bl	8008a70 <CreateLine>
    ATCommandSend = CIPMUX();
 80046ea:	230f      	movs	r3, #15
 80046ec:	18fc      	adds	r4, r7, r3
 80046ee:	f7ff fc8b 	bl	8004008 <CIPMUX>
 80046f2:	0003      	movs	r3, r0
 80046f4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80046f6:	f004 fdb3 	bl	8009260 <HAL_GetTick>
 80046fa:	0003      	movs	r3, r0
 80046fc:	330a      	adds	r3, #10
 80046fe:	001a      	movs	r2, r3
 8004700:	4b2f      	ldr	r3, [pc, #188]	@ (80047c0 <AT_Send+0x2a0>)
 8004702:	601a      	str	r2, [r3, #0]
    break;
 8004704:	e052      	b.n	80047ac <AT_Send+0x28c>

  case AT_WEBSERVER:
    Debug("SET in station/soft-ap mode");
 8004706:	4a37      	ldr	r2, [pc, #220]	@ (80047e4 <AT_Send+0x2c4>)
 8004708:	4b2f      	ldr	r3, [pc, #188]	@ (80047c8 <AT_Send+0x2a8>)
 800470a:	0019      	movs	r1, r3
 800470c:	2003      	movs	r0, #3
 800470e:	f004 f9af 	bl	8008a70 <CreateLine>
    ATCommandSend = WEBSERVER();
 8004712:	230f      	movs	r3, #15
 8004714:	18fc      	adds	r4, r7, r3
 8004716:	f7ff fc97 	bl	8004048 <WEBSERVER>
 800471a:	0003      	movs	r3, r0
 800471c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800471e:	f004 fd9f 	bl	8009260 <HAL_GetTick>
 8004722:	0003      	movs	r3, r0
 8004724:	330a      	adds	r3, #10
 8004726:	001a      	movs	r2, r3
 8004728:	4b25      	ldr	r3, [pc, #148]	@ (80047c0 <AT_Send+0x2a0>)
 800472a:	601a      	str	r2, [r3, #0]
    break;
 800472c:	e03e      	b.n	80047ac <AT_Send+0x28c>

  case AT_HTTPCPOST:
    Debug("SET in station/soft-ap mode");
 800472e:	4a2d      	ldr	r2, [pc, #180]	@ (80047e4 <AT_Send+0x2c4>)
 8004730:	4b25      	ldr	r3, [pc, #148]	@ (80047c8 <AT_Send+0x2a8>)
 8004732:	0019      	movs	r1, r3
 8004734:	2003      	movs	r0, #3
 8004736:	f004 f99b 	bl	8008a70 <CreateLine>
    ATCommandSend = HTTPCPOST();
 800473a:	230f      	movs	r3, #15
 800473c:	18fc      	adds	r4, r7, r3
 800473e:	f7ff fca3 	bl	8004088 <HTTPCPOST>
 8004742:	0003      	movs	r3, r0
 8004744:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004746:	f004 fd8b 	bl	8009260 <HAL_GetTick>
 800474a:	0003      	movs	r3, r0
 800474c:	33f5      	adds	r3, #245	@ 0xf5
 800474e:	33ff      	adds	r3, #255	@ 0xff
 8004750:	001a      	movs	r2, r3
 8004752:	4b1b      	ldr	r3, [pc, #108]	@ (80047c0 <AT_Send+0x2a0>)
 8004754:	601a      	str	r2, [r3, #0]
    break;
 8004756:	e029      	b.n	80047ac <AT_Send+0x28c>

  case AT_SENDDATA:
    Debug("Send the data");
 8004758:	4a25      	ldr	r2, [pc, #148]	@ (80047f0 <AT_Send+0x2d0>)
 800475a:	4b1b      	ldr	r3, [pc, #108]	@ (80047c8 <AT_Send+0x2a8>)
 800475c:	0019      	movs	r1, r3
 800475e:	2003      	movs	r0, #3
 8004760:	f004 f986 	bl	8008a70 <CreateLine>
    ATCommandSend = SENDDATA();
 8004764:	230f      	movs	r3, #15
 8004766:	18fc      	adds	r4, r7, r3
 8004768:	f7ff fd2a 	bl	80041c0 <SENDDATA>
 800476c:	0003      	movs	r3, r0
 800476e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004770:	f004 fd76 	bl	8009260 <HAL_GetTick>
 8004774:	0003      	movs	r3, r0
 8004776:	33f5      	adds	r3, #245	@ 0xf5
 8004778:	33ff      	adds	r3, #255	@ 0xff
 800477a:	001a      	movs	r2, r3
 800477c:	4b10      	ldr	r3, [pc, #64]	@ (80047c0 <AT_Send+0x2a0>)
 800477e:	601a      	str	r2, [r3, #0]
    break;
 8004780:	e014      	b.n	80047ac <AT_Send+0x28c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8004782:	4a1c      	ldr	r2, [pc, #112]	@ (80047f4 <AT_Send+0x2d4>)
 8004784:	4b10      	ldr	r3, [pc, #64]	@ (80047c8 <AT_Send+0x2a8>)
 8004786:	0019      	movs	r1, r3
 8004788:	2003      	movs	r0, #3
 800478a:	f004 f971 	bl	8008a70 <CreateLine>
    ATCommandSend = SLEEP();
 800478e:	230f      	movs	r3, #15
 8004790:	18fc      	adds	r4, r7, r3
 8004792:	f7ff fdc1 	bl	8004318 <SLEEP>
 8004796:	0003      	movs	r3, r0
 8004798:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800479a:	f004 fd61 	bl	8009260 <HAL_GetTick>
 800479e:	0003      	movs	r3, r0
 80047a0:	330a      	adds	r3, #10
 80047a2:	001a      	movs	r2, r3
 80047a4:	4b06      	ldr	r3, [pc, #24]	@ (80047c0 <AT_Send+0x2a0>)
 80047a6:	601a      	str	r2, [r3, #0]
    break;
 80047a8:	e000      	b.n	80047ac <AT_Send+0x28c>
  break;
 80047aa:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 80047ac:	230f      	movs	r3, #15
 80047ae:	18fb      	adds	r3, r7, r3
 80047b0:	781b      	ldrb	r3, [r3, #0]
}
 80047b2:	0018      	movs	r0, r3
 80047b4:	46bd      	mov	sp, r7
 80047b6:	b005      	add	sp, #20
 80047b8:	bd90      	pop	{r4, r7, pc}
 80047ba:	46c0      	nop			@ (mov r8, r8)
 80047bc:	0801a294 	.word	0x0801a294
 80047c0:	20000880 	.word	0x20000880
 80047c4:	08019b18 	.word	0x08019b18
 80047c8:	080197c8 	.word	0x080197c8
 80047cc:	08019b2c 	.word	0x08019b2c
 80047d0:	08019b40 	.word	0x08019b40
 80047d4:	08019b50 	.word	0x08019b50
 80047d8:	08019b64 	.word	0x08019b64
 80047dc:	08019b7c 	.word	0x08019b7c
 80047e0:	08019b94 	.word	0x08019b94
 80047e4:	08019ba8 	.word	0x08019ba8
 80047e8:	08019bc4 	.word	0x08019bc4
 80047ec:	08019be0 	.word	0x08019be0
 80047f0:	08019c04 	.word	0x08019c04
 80047f4:	08019c14 	.word	0x08019c14

080047f8 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 80047f8:	b590      	push	{r4, r7, lr}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
  bool ATSend = false;
 80047fe:	1dfb      	adds	r3, r7, #7
 8004800:	2200      	movs	r2, #0
 8004802:	701a      	strb	r2, [r3, #0]
  static RECEIVE_STATUS ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8004804:	4b79      	ldr	r3, [pc, #484]	@ (80049ec <ESP_WakeTest+0x1f4>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	2b05      	cmp	r3, #5
 800480a:	d900      	bls.n	800480e <ESP_WakeTest+0x16>
 800480c:	e0e9      	b.n	80049e2 <ESP_WakeTest+0x1ea>
 800480e:	009a      	lsls	r2, r3, #2
 8004810:	4b77      	ldr	r3, [pc, #476]	@ (80049f0 <ESP_WakeTest+0x1f8>)
 8004812:	18d3      	adds	r3, r2, r3
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8004818:	4b76      	ldr	r3, [pc, #472]	@ (80049f4 <ESP_WakeTest+0x1fc>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2201      	movs	r2, #1
 800481e:	4053      	eors	r3, r2
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d03a      	beq.n	800489c <ESP_WakeTest+0xa4>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004826:	2380      	movs	r3, #128	@ 0x80
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	4873      	ldr	r0, [pc, #460]	@ (80049f8 <ESP_WakeTest+0x200>)
 800482c:	2200      	movs	r2, #0
 800482e:	0019      	movs	r1, r3
 8004830:	f005 feac 	bl	800a58c <HAL_GPIO_WritePin>
        HAL_Delay(500);
 8004834:	23fa      	movs	r3, #250	@ 0xfa
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	0018      	movs	r0, r3
 800483a:	f004 fd1b 	bl	8009274 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800483e:	2380      	movs	r3, #128	@ 0x80
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	486d      	ldr	r0, [pc, #436]	@ (80049f8 <ESP_WakeTest+0x200>)
 8004844:	2201      	movs	r2, #1
 8004846:	0019      	movs	r1, r3
 8004848:	f005 fea0 	bl	800a58c <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 800484c:	23fa      	movs	r3, #250	@ 0xfa
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	0018      	movs	r0, r3
 8004852:	f004 fd0f 	bl	8009274 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004856:	4b69      	ldr	r3, [pc, #420]	@ (80049fc <ESP_WakeTest+0x204>)
 8004858:	2200      	movs	r2, #0
 800485a:	2101      	movs	r1, #1
 800485c:	0018      	movs	r0, r3
 800485e:	f005 fe95 	bl	800a58c <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8004862:	2064      	movs	r0, #100	@ 0x64
 8004864:	f004 fd06 	bl	8009274 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004868:	4b64      	ldr	r3, [pc, #400]	@ (80049fc <ESP_WakeTest+0x204>)
 800486a:	2201      	movs	r2, #1
 800486c:	2102      	movs	r1, #2
 800486e:	0018      	movs	r0, r3
 8004870:	f005 fe8c 	bl	800a58c <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8004874:	2064      	movs	r0, #100	@ 0x64
 8004876:	f004 fcfd 	bl	8009274 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800487a:	4b60      	ldr	r3, [pc, #384]	@ (80049fc <ESP_WakeTest+0x204>)
 800487c:	2201      	movs	r2, #1
 800487e:	2101      	movs	r1, #1
 8004880:	0018      	movs	r0, r3
 8004882:	f005 fe83 	bl	800a58c <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004886:	f004 fceb 	bl	8009260 <HAL_GetTick>
 800488a:	0003      	movs	r3, r0
 800488c:	22af      	movs	r2, #175	@ 0xaf
 800488e:	0092      	lsls	r2, r2, #2
 8004890:	189a      	adds	r2, r3, r2
 8004892:	4b5b      	ldr	r3, [pc, #364]	@ (8004a00 <ESP_WakeTest+0x208>)
 8004894:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004896:	4b57      	ldr	r3, [pc, #348]	@ (80049f4 <ESP_WakeTest+0x1fc>)
 8004898:	2201      	movs	r2, #1
 800489a:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800489c:	4b59      	ldr	r3, [pc, #356]	@ (8004a04 <ESP_WakeTest+0x20c>)
 800489e:	21ff      	movs	r1, #255	@ 0xff
 80048a0:	0018      	movs	r0, r3
 80048a2:	f7fe ff6b 	bl	800377c <ESP_Receive>
 80048a6:	1e03      	subs	r3, r0, #0
 80048a8:	d100      	bne.n	80048ac <ESP_WakeTest+0xb4>
 80048aa:	e095      	b.n	80049d8 <ESP_WakeTest+0x1e0>
        TestState = ESP_TEST_SEND;
 80048ac:	4b4f      	ldr	r3, [pc, #316]	@ (80049ec <ESP_WakeTest+0x1f4>)
 80048ae:	2201      	movs	r2, #1
 80048b0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80048b2:	e091      	b.n	80049d8 <ESP_WakeTest+0x1e0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 80048b4:	4b52      	ldr	r3, [pc, #328]	@ (8004a00 <ESP_WakeTest+0x208>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	0018      	movs	r0, r3
 80048ba:	f004 f883 	bl	80089c4 <TimestampIsReached>
 80048be:	1e03      	subs	r3, r0, #0
 80048c0:	d100      	bne.n	80048c4 <ESP_WakeTest+0xcc>
 80048c2:	e08b      	b.n	80049dc <ESP_WakeTest+0x1e4>
        ATSend = AT_Send(ATCommand);
 80048c4:	4b50      	ldr	r3, [pc, #320]	@ (8004a08 <ESP_WakeTest+0x210>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	1dfc      	adds	r4, r7, #7
 80048ca:	0018      	movs	r0, r3
 80048cc:	f7ff fe28 	bl	8004520 <AT_Send>
 80048d0:	0003      	movs	r3, r0
 80048d2:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80048d4:	1dfb      	adds	r3, r7, #7
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d100      	bne.n	80048de <ESP_WakeTest+0xe6>
 80048dc:	e07e      	b.n	80049dc <ESP_WakeTest+0x1e4>
          TestState = ESP_TEST_RECEIVE;
 80048de:	4b43      	ldr	r3, [pc, #268]	@ (80049ec <ESP_WakeTest+0x1f4>)
 80048e0:	2202      	movs	r2, #2
 80048e2:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80048e4:	e07a      	b.n	80049dc <ESP_WakeTest+0x1e4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 80048e6:	4b46      	ldr	r3, [pc, #280]	@ (8004a00 <ESP_WakeTest+0x208>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	0018      	movs	r0, r3
 80048ec:	f004 f86a 	bl	80089c4 <TimestampIsReached>
 80048f0:	1e03      	subs	r3, r0, #0
 80048f2:	d100      	bne.n	80048f6 <ESP_WakeTest+0xfe>
 80048f4:	e074      	b.n	80049e0 <ESP_WakeTest+0x1e8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80048f6:	4b45      	ldr	r3, [pc, #276]	@ (8004a0c <ESP_WakeTest+0x214>)
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	0018      	movs	r0, r3
 80048fc:	f7ff fd2c 	bl	8004358 <DMA_ProcessBuffer>
 8004900:	0003      	movs	r3, r0
 8004902:	001a      	movs	r2, r3
 8004904:	4b42      	ldr	r3, [pc, #264]	@ (8004a10 <ESP_WakeTest+0x218>)
 8004906:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004908:	4b41      	ldr	r3, [pc, #260]	@ (8004a10 <ESP_WakeTest+0x218>)
 800490a:	781a      	ldrb	r2, [r3, #0]
 800490c:	4b3f      	ldr	r3, [pc, #252]	@ (8004a0c <ESP_WakeTest+0x214>)
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	1dbc      	adds	r4, r7, #6
 8004912:	0019      	movs	r1, r3
 8004914:	0010      	movs	r0, r2
 8004916:	f7ff fdcd 	bl	80044b4 <ATCompare>
 800491a:	0003      	movs	r3, r0
 800491c:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 800491e:	4b3c      	ldr	r3, [pc, #240]	@ (8004a10 <ESP_WakeTest+0x218>)
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d102      	bne.n	800492c <ESP_WakeTest+0x134>
          TestState = ESP_TEST_SEND;
 8004926:	4b31      	ldr	r3, [pc, #196]	@ (80049ec <ESP_WakeTest+0x1f4>)
 8004928:	2201      	movs	r2, #1
 800492a:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 800492c:	4b38      	ldr	r3, [pc, #224]	@ (8004a10 <ESP_WakeTest+0x218>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b07      	cmp	r3, #7
 8004932:	d104      	bne.n	800493e <ESP_WakeTest+0x146>
          StartProg();
 8004934:	f7ff f852 	bl	80039dc <StartProg>
          TestState = ESP_TEST_BOOT;
 8004938:	4b2c      	ldr	r3, [pc, #176]	@ (80049ec <ESP_WakeTest+0x1f4>)
 800493a:	2205      	movs	r2, #5
 800493c:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 800493e:	4b34      	ldr	r3, [pc, #208]	@ (8004a10 <ESP_WakeTest+0x218>)
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	2b03      	cmp	r3, #3
 8004944:	d109      	bne.n	800495a <ESP_WakeTest+0x162>
          ESPTimeStamp = HAL_GetTick() + 50;
 8004946:	f004 fc8b 	bl	8009260 <HAL_GetTick>
 800494a:	0003      	movs	r3, r0
 800494c:	3332      	adds	r3, #50	@ 0x32
 800494e:	001a      	movs	r2, r3
 8004950:	4b2b      	ldr	r3, [pc, #172]	@ (8004a00 <ESP_WakeTest+0x208>)
 8004952:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8004954:	4b25      	ldr	r3, [pc, #148]	@ (80049ec <ESP_WakeTest+0x1f4>)
 8004956:	2201      	movs	r2, #1
 8004958:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 800495a:	1dbb      	adds	r3, r7, #6
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d03e      	beq.n	80049e0 <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_VALIDATE;
 8004962:	4b22      	ldr	r3, [pc, #136]	@ (80049ec <ESP_WakeTest+0x1f4>)
 8004964:	2203      	movs	r2, #3
 8004966:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004968:	e03a      	b.n	80049e0 <ESP_WakeTest+0x1e8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = 4000;
 800496a:	4b2a      	ldr	r3, [pc, #168]	@ (8004a14 <ESP_WakeTest+0x21c>)
 800496c:	22fa      	movs	r2, #250	@ 0xfa
 800496e:	0112      	lsls	r2, r2, #4
 8004970:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 0;
 8004972:	4b28      	ldr	r3, [pc, #160]	@ (8004a14 <ESP_WakeTest+0x21c>)
 8004974:	2200      	movs	r2, #0
 8004976:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 4000;
 8004978:	4b26      	ldr	r3, [pc, #152]	@ (8004a14 <ESP_WakeTest+0x21c>)
 800497a:	22fa      	movs	r2, #250	@ 0xfa
 800497c:	0112      	lsls	r2, r2, #4
 800497e:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8004980:	4b1a      	ldr	r3, [pc, #104]	@ (80049ec <ESP_WakeTest+0x1f4>)
 8004982:	2204      	movs	r2, #4
 8004984:	701a      	strb	r2, [r3, #0]

      break;
 8004986:	e02c      	b.n	80049e2 <ESP_WakeTest+0x1ea>

    case ESP_TEST_DEINIT:
      testRound = false;
 8004988:	4b23      	ldr	r3, [pc, #140]	@ (8004a18 <ESP_WakeTest+0x220>)
 800498a:	2200      	movs	r2, #0
 800498c:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 800498e:	4b19      	ldr	r3, [pc, #100]	@ (80049f4 <ESP_WakeTest+0x1fc>)
 8004990:	2200      	movs	r2, #0
 8004992:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004994:	4b19      	ldr	r3, [pc, #100]	@ (80049fc <ESP_WakeTest+0x204>)
 8004996:	2200      	movs	r2, #0
 8004998:	2101      	movs	r1, #1
 800499a:	0018      	movs	r0, r3
 800499c:	f005 fdf6 	bl	800a58c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80049a0:	2380      	movs	r3, #128	@ 0x80
 80049a2:	011b      	lsls	r3, r3, #4
 80049a4:	4814      	ldr	r0, [pc, #80]	@ (80049f8 <ESP_WakeTest+0x200>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	0019      	movs	r1, r3
 80049aa:	f005 fdef 	bl	800a58c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80049ae:	4b13      	ldr	r3, [pc, #76]	@ (80049fc <ESP_WakeTest+0x204>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	2102      	movs	r1, #2
 80049b4:	0018      	movs	r0, r3
 80049b6:	f005 fde9 	bl	800a58c <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 80049ba:	f001 fc11 	bl	80061e0 <SetESPMeasurementDone>

      break;
 80049be:	e010      	b.n	80049e2 <ESP_WakeTest+0x1ea>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 80049c0:	4b14      	ldr	r3, [pc, #80]	@ (8004a14 <ESP_WakeTest+0x21c>)
 80049c2:	22fa      	movs	r2, #250	@ 0xfa
 80049c4:	0112      	lsls	r2, r2, #4
 80049c6:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 80049c8:	4b12      	ldr	r3, [pc, #72]	@ (8004a14 <ESP_WakeTest+0x21c>)
 80049ca:	22fa      	movs	r2, #250	@ 0xfa
 80049cc:	0112      	lsls	r2, r2, #4
 80049ce:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 80049d0:	4b10      	ldr	r3, [pc, #64]	@ (8004a14 <ESP_WakeTest+0x21c>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 80049d6:	e004      	b.n	80049e2 <ESP_WakeTest+0x1ea>
      break;
 80049d8:	46c0      	nop			@ (mov r8, r8)
 80049da:	e002      	b.n	80049e2 <ESP_WakeTest+0x1ea>
      break;
 80049dc:	46c0      	nop			@ (mov r8, r8)
 80049de:	e000      	b.n	80049e2 <ESP_WakeTest+0x1ea>
      break;
 80049e0:	46c0      	nop			@ (mov r8, r8)
  }
}
 80049e2:	46c0      	nop			@ (mov r8, r8)
 80049e4:	46bd      	mov	sp, r7
 80049e6:	b003      	add	sp, #12
 80049e8:	bd90      	pop	{r4, r7, pc}
 80049ea:	46c0      	nop			@ (mov r8, r8)
 80049ec:	20000a8c 	.word	0x20000a8c
 80049f0:	0801a2d0 	.word	0x0801a2d0
 80049f4:	200005d7 	.word	0x200005d7
 80049f8:	50000800 	.word	0x50000800
 80049fc:	50001c00 	.word	0x50001c00
 8004a00:	20000880 	.word	0x20000880
 8004a04:	200004d8 	.word	0x200004d8
 8004a08:	20000a8a 	.word	0x20000a8a
 8004a0c:	20000a89 	.word	0x20000a89
 8004a10:	20000103 	.word	0x20000103
 8004a14:	40000400 	.word	0x40000400
 8004a18:	20000002 	.word	0x20000002

08004a1c <ESP_Upkeep>:

void ESP_Upkeep(void) {
 8004a1c:	b590      	push	{r4, r7, lr}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004a22:	1dfb      	adds	r3, r7, #7
 8004a24:	2200      	movs	r2, #0
 8004a26:	701a      	strb	r2, [r3, #0]
  static RECEIVE_STATUS ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (EspState) {
 8004a28:	4be0      	ldr	r3, [pc, #896]	@ (8004dac <ESP_Upkeep+0x390>)
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b0b      	cmp	r3, #11
 8004a2e:	d900      	bls.n	8004a32 <ESP_Upkeep+0x16>
 8004a30:	e1b5      	b.n	8004d9e <ESP_Upkeep+0x382>
 8004a32:	009a      	lsls	r2, r3, #2
 8004a34:	4bde      	ldr	r3, [pc, #888]	@ (8004db0 <ESP_Upkeep+0x394>)
 8004a36:	18d3      	adds	r3, r2, r3
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8004a3c:	4bdb      	ldr	r3, [pc, #876]	@ (8004dac <ESP_Upkeep+0x390>)
 8004a3e:	2201      	movs	r2, #1
 8004a40:	701a      	strb	r2, [r3, #0]
      break;
 8004a42:	e1ee      	b.n	8004e22 <ESP_Upkeep+0x406>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 8004a44:	4bdb      	ldr	r3, [pc, #876]	@ (8004db4 <ESP_Upkeep+0x398>)
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	4053      	eors	r3, r2
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d03a      	beq.n	8004ac8 <ESP_Upkeep+0xac>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004a52:	2380      	movs	r3, #128	@ 0x80
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	48d8      	ldr	r0, [pc, #864]	@ (8004db8 <ESP_Upkeep+0x39c>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	0019      	movs	r1, r3
 8004a5c:	f005 fd96 	bl	800a58c <HAL_GPIO_WritePin>
        HAL_Delay(500);
 8004a60:	23fa      	movs	r3, #250	@ 0xfa
 8004a62:	005b      	lsls	r3, r3, #1
 8004a64:	0018      	movs	r0, r3
 8004a66:	f004 fc05 	bl	8009274 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004a6a:	2380      	movs	r3, #128	@ 0x80
 8004a6c:	011b      	lsls	r3, r3, #4
 8004a6e:	48d2      	ldr	r0, [pc, #840]	@ (8004db8 <ESP_Upkeep+0x39c>)
 8004a70:	2201      	movs	r2, #1
 8004a72:	0019      	movs	r1, r3
 8004a74:	f005 fd8a 	bl	800a58c <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 8004a78:	23fa      	movs	r3, #250	@ 0xfa
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f004 fbf9 	bl	8009274 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004a82:	4bce      	ldr	r3, [pc, #824]	@ (8004dbc <ESP_Upkeep+0x3a0>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	2101      	movs	r1, #1
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f005 fd7f 	bl	800a58c <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8004a8e:	2064      	movs	r0, #100	@ 0x64
 8004a90:	f004 fbf0 	bl	8009274 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004a94:	4bc9      	ldr	r3, [pc, #804]	@ (8004dbc <ESP_Upkeep+0x3a0>)
 8004a96:	2201      	movs	r2, #1
 8004a98:	2102      	movs	r1, #2
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	f005 fd76 	bl	800a58c <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8004aa0:	2064      	movs	r0, #100	@ 0x64
 8004aa2:	f004 fbe7 	bl	8009274 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004aa6:	4bc5      	ldr	r3, [pc, #788]	@ (8004dbc <ESP_Upkeep+0x3a0>)
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	2101      	movs	r1, #1
 8004aac:	0018      	movs	r0, r3
 8004aae:	f005 fd6d 	bl	800a58c <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004ab2:	f004 fbd5 	bl	8009260 <HAL_GetTick>
 8004ab6:	0003      	movs	r3, r0
 8004ab8:	22af      	movs	r2, #175	@ 0xaf
 8004aba:	0092      	lsls	r2, r2, #2
 8004abc:	189a      	adds	r2, r3, r2
 8004abe:	4bc0      	ldr	r3, [pc, #768]	@ (8004dc0 <ESP_Upkeep+0x3a4>)
 8004ac0:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004ac2:	4bbc      	ldr	r3, [pc, #752]	@ (8004db4 <ESP_Upkeep+0x398>)
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004ac8:	4bbe      	ldr	r3, [pc, #760]	@ (8004dc4 <ESP_Upkeep+0x3a8>)
 8004aca:	21ff      	movs	r1, #255	@ 0xff
 8004acc:	0018      	movs	r0, r3
 8004ace:	f7fe fe55 	bl	800377c <ESP_Receive>
 8004ad2:	1e03      	subs	r3, r0, #0
 8004ad4:	d100      	bne.n	8004ad8 <ESP_Upkeep+0xbc>
 8004ad6:	e199      	b.n	8004e0c <ESP_Upkeep+0x3f0>
        EspState = ESP_STATE_MODE_SELECT;
 8004ad8:	4bb4      	ldr	r3, [pc, #720]	@ (8004dac <ESP_Upkeep+0x390>)
 8004ada:	220b      	movs	r2, #11
 8004adc:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004ade:	e195      	b.n	8004e0c <ESP_Upkeep+0x3f0>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 10);
 8004ae0:	4bb9      	ldr	r3, [pc, #740]	@ (8004dc8 <ESP_Upkeep+0x3ac>)
 8004ae2:	220a      	movs	r2, #10
 8004ae4:	210f      	movs	r1, #15
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	f011 ff64 	bl	80169b4 <memset>
      if(!InitIsDone || WifiReset){
 8004aec:	4bb7      	ldr	r3, [pc, #732]	@ (8004dcc <ESP_Upkeep+0x3b0>)
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2201      	movs	r2, #1
 8004af2:	4053      	eors	r3, r2
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d103      	bne.n	8004b02 <ESP_Upkeep+0xe6>
 8004afa:	4bb5      	ldr	r3, [pc, #724]	@ (8004dd0 <ESP_Upkeep+0x3b4>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d016      	beq.n	8004b30 <ESP_Upkeep+0x114>
        memcpy(ATCommandArray, AT_INIT, 8);
 8004b02:	4bb1      	ldr	r3, [pc, #708]	@ (8004dc8 <ESP_Upkeep+0x3ac>)
 8004b04:	4ab3      	ldr	r2, [pc, #716]	@ (8004dd4 <ESP_Upkeep+0x3b8>)
 8004b06:	ca03      	ldmia	r2!, {r0, r1}
 8004b08:	c303      	stmia	r3!, {r0, r1}
        EspState = ESP_STATE_SEND;
 8004b0a:	4ba8      	ldr	r3, [pc, #672]	@ (8004dac <ESP_Upkeep+0x390>)
 8004b0c:	2204      	movs	r2, #4
 8004b0e:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004b10:	4bb1      	ldr	r3, [pc, #708]	@ (8004dd8 <ESP_Upkeep+0x3bc>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8004b16:	4bb1      	ldr	r3, [pc, #708]	@ (8004ddc <ESP_Upkeep+0x3c0>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004b1c:	4bae      	ldr	r3, [pc, #696]	@ (8004dd8 <ESP_Upkeep+0x3bc>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	001a      	movs	r2, r3
 8004b22:	4ba9      	ldr	r3, [pc, #676]	@ (8004dc8 <ESP_Upkeep+0x3ac>)
 8004b24:	5c9a      	ldrb	r2, [r3, r2]
 8004b26:	4bae      	ldr	r3, [pc, #696]	@ (8004de0 <ESP_Upkeep+0x3c4>)
 8004b28:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004b2a:	4bae      	ldr	r3, [pc, #696]	@ (8004de4 <ESP_Upkeep+0x3c8>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8004b30:	4ba6      	ldr	r3, [pc, #664]	@ (8004dcc <ESP_Upkeep+0x3b0>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01f      	beq.n	8004b78 <ESP_Upkeep+0x15c>
 8004b38:	4bab      	ldr	r3, [pc, #684]	@ (8004de8 <ESP_Upkeep+0x3cc>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	4053      	eors	r3, r2
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d018      	beq.n	8004b78 <ESP_Upkeep+0x15c>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8004b46:	4ba0      	ldr	r3, [pc, #640]	@ (8004dc8 <ESP_Upkeep+0x3ac>)
 8004b48:	4aa8      	ldr	r2, [pc, #672]	@ (8004dec <ESP_Upkeep+0x3d0>)
 8004b4a:	6811      	ldr	r1, [r2, #0]
 8004b4c:	6019      	str	r1, [r3, #0]
 8004b4e:	8892      	ldrh	r2, [r2, #4]
 8004b50:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8004b52:	4b96      	ldr	r3, [pc, #600]	@ (8004dac <ESP_Upkeep+0x390>)
 8004b54:	2204      	movs	r2, #4
 8004b56:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004b58:	4b9f      	ldr	r3, [pc, #636]	@ (8004dd8 <ESP_Upkeep+0x3bc>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8004b5e:	4b9f      	ldr	r3, [pc, #636]	@ (8004ddc <ESP_Upkeep+0x3c0>)
 8004b60:	2201      	movs	r2, #1
 8004b62:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004b64:	4b9c      	ldr	r3, [pc, #624]	@ (8004dd8 <ESP_Upkeep+0x3bc>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	001a      	movs	r2, r3
 8004b6a:	4b97      	ldr	r3, [pc, #604]	@ (8004dc8 <ESP_Upkeep+0x3ac>)
 8004b6c:	5c9a      	ldrb	r2, [r3, r2]
 8004b6e:	4b9c      	ldr	r3, [pc, #624]	@ (8004de0 <ESP_Upkeep+0x3c4>)
 8004b70:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004b72:	4b9c      	ldr	r3, [pc, #624]	@ (8004de4 <ESP_Upkeep+0x3c8>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !WifiReset){
 8004b78:	4b94      	ldr	r3, [pc, #592]	@ (8004dcc <ESP_Upkeep+0x3b0>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d100      	bne.n	8004b82 <ESP_Upkeep+0x166>
 8004b80:	e146      	b.n	8004e10 <ESP_Upkeep+0x3f4>
 8004b82:	4b99      	ldr	r3, [pc, #612]	@ (8004de8 <ESP_Upkeep+0x3cc>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d100      	bne.n	8004b8c <ESP_Upkeep+0x170>
 8004b8a:	e141      	b.n	8004e10 <ESP_Upkeep+0x3f4>
 8004b8c:	4b90      	ldr	r3, [pc, #576]	@ (8004dd0 <ESP_Upkeep+0x3b4>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	2201      	movs	r2, #1
 8004b92:	4053      	eors	r3, r2
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d100      	bne.n	8004b9c <ESP_Upkeep+0x180>
 8004b9a:	e139      	b.n	8004e10 <ESP_Upkeep+0x3f4>
        memcpy(ATCommandArray, AT_SEND, 3);
 8004b9c:	4b8a      	ldr	r3, [pc, #552]	@ (8004dc8 <ESP_Upkeep+0x3ac>)
 8004b9e:	4a94      	ldr	r2, [pc, #592]	@ (8004df0 <ESP_Upkeep+0x3d4>)
 8004ba0:	8811      	ldrh	r1, [r2, #0]
 8004ba2:	8019      	strh	r1, [r3, #0]
 8004ba4:	7892      	ldrb	r2, [r2, #2]
 8004ba6:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8004ba8:	4b80      	ldr	r3, [pc, #512]	@ (8004dac <ESP_Upkeep+0x390>)
 8004baa:	2204      	movs	r2, #4
 8004bac:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004bae:	4b8a      	ldr	r3, [pc, #552]	@ (8004dd8 <ESP_Upkeep+0x3bc>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8004bb4:	4b89      	ldr	r3, [pc, #548]	@ (8004ddc <ESP_Upkeep+0x3c0>)
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	701a      	strb	r2, [r3, #0]
        TIM2 -> CCR1 = 40000;
 8004bba:	2380      	movs	r3, #128	@ 0x80
 8004bbc:	05db      	lsls	r3, r3, #23
 8004bbe:	4a8d      	ldr	r2, [pc, #564]	@ (8004df4 <ESP_Upkeep+0x3d8>)
 8004bc0:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM2 -> CCR3 = 40000;
 8004bc2:	2380      	movs	r3, #128	@ 0x80
 8004bc4:	05db      	lsls	r3, r3, #23
 8004bc6:	4a8b      	ldr	r2, [pc, #556]	@ (8004df4 <ESP_Upkeep+0x3d8>)
 8004bc8:	63da      	str	r2, [r3, #60]	@ 0x3c
        TIM2 -> CCR4 = 20000;
 8004bca:	2380      	movs	r3, #128	@ 0x80
 8004bcc:	05db      	lsls	r3, r3, #23
 8004bce:	4a8a      	ldr	r2, [pc, #552]	@ (8004df8 <ESP_Upkeep+0x3dc>)
 8004bd0:	641a      	str	r2, [r3, #64]	@ 0x40
        ATCommand = ATCommandArray[ATCounter];
 8004bd2:	4b81      	ldr	r3, [pc, #516]	@ (8004dd8 <ESP_Upkeep+0x3bc>)
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	001a      	movs	r2, r3
 8004bd8:	4b7b      	ldr	r3, [pc, #492]	@ (8004dc8 <ESP_Upkeep+0x3ac>)
 8004bda:	5c9a      	ldrb	r2, [r3, r2]
 8004bdc:	4b80      	ldr	r3, [pc, #512]	@ (8004de0 <ESP_Upkeep+0x3c4>)
 8004bde:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004be0:	4b80      	ldr	r3, [pc, #512]	@ (8004de4 <ESP_Upkeep+0x3c8>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	701a      	strb	r2, [r3, #0]
      }

    break;
 8004be6:	e113      	b.n	8004e10 <ESP_Upkeep+0x3f4>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 8004be8:	4b7d      	ldr	r3, [pc, #500]	@ (8004de0 <ESP_Upkeep+0x3c4>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	1dfc      	adds	r4, r7, #7
 8004bee:	0018      	movs	r0, r3
 8004bf0:	f7ff fc96 	bl	8004520 <AT_Send>
 8004bf4:	0003      	movs	r3, r0
 8004bf6:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004bf8:	1dfb      	adds	r3, r7, #7
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d100      	bne.n	8004c02 <ESP_Upkeep+0x1e6>
 8004c00:	e108      	b.n	8004e14 <ESP_Upkeep+0x3f8>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8004c02:	4b6a      	ldr	r3, [pc, #424]	@ (8004dac <ESP_Upkeep+0x390>)
 8004c04:	2203      	movs	r2, #3
 8004c06:	701a      	strb	r2, [r3, #0]
        }
         break;
 8004c08:	e104      	b.n	8004e14 <ESP_Upkeep+0x3f8>


    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 8004c0a:	4b6d      	ldr	r3, [pc, #436]	@ (8004dc0 <ESP_Upkeep+0x3a4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	0018      	movs	r0, r3
 8004c10:	f003 fed8 	bl	80089c4 <TimestampIsReached>
 8004c14:	1e03      	subs	r3, r0, #0
 8004c16:	d100      	bne.n	8004c1a <ESP_Upkeep+0x1fe>
 8004c18:	e0fe      	b.n	8004e18 <ESP_Upkeep+0x3fc>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004c1a:	4b72      	ldr	r3, [pc, #456]	@ (8004de4 <ESP_Upkeep+0x3c8>)
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f7ff fb9a 	bl	8004358 <DMA_ProcessBuffer>
 8004c24:	0003      	movs	r3, r0
 8004c26:	001a      	movs	r2, r3
 8004c28:	4b74      	ldr	r3, [pc, #464]	@ (8004dfc <ESP_Upkeep+0x3e0>)
 8004c2a:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004c2c:	4b73      	ldr	r3, [pc, #460]	@ (8004dfc <ESP_Upkeep+0x3e0>)
 8004c2e:	781a      	ldrb	r2, [r3, #0]
 8004c30:	4b6c      	ldr	r3, [pc, #432]	@ (8004de4 <ESP_Upkeep+0x3c8>)
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	1dbc      	adds	r4, r7, #6
 8004c36:	0019      	movs	r1, r3
 8004c38:	0010      	movs	r0, r2
 8004c3a:	f7ff fc3b 	bl	80044b4 <ATCompare>
 8004c3e:	0003      	movs	r3, r0
 8004c40:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004c42:	4b6e      	ldr	r3, [pc, #440]	@ (8004dfc <ESP_Upkeep+0x3e0>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d102      	bne.n	8004c50 <ESP_Upkeep+0x234>
          EspState = ESP_STATE_SEND;
 8004c4a:	4b58      	ldr	r3, [pc, #352]	@ (8004dac <ESP_Upkeep+0x390>)
 8004c4c:	2204      	movs	r2, #4
 8004c4e:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004c50:	4b6a      	ldr	r3, [pc, #424]	@ (8004dfc <ESP_Upkeep+0x3e0>)
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2b03      	cmp	r3, #3
 8004c56:	d106      	bne.n	8004c66 <ESP_Upkeep+0x24a>
          ESPTimeStamp = HAL_GetTick() + 10;
 8004c58:	f004 fb02 	bl	8009260 <HAL_GetTick>
 8004c5c:	0003      	movs	r3, r0
 8004c5e:	330a      	adds	r3, #10
 8004c60:	001a      	movs	r2, r3
 8004c62:	4b57      	ldr	r3, [pc, #348]	@ (8004dc0 <ESP_Upkeep+0x3a4>)
 8004c64:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8004c66:	4b65      	ldr	r3, [pc, #404]	@ (8004dfc <ESP_Upkeep+0x3e0>)
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	2b06      	cmp	r3, #6
 8004c6c:	d116      	bne.n	8004c9c <ESP_Upkeep+0x280>
          if(ATCommand != AT_SENDDATA){
 8004c6e:	4b5c      	ldr	r3, [pc, #368]	@ (8004de0 <ESP_Upkeep+0x3c4>)
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	2b0d      	cmp	r3, #13
 8004c74:	d003      	beq.n	8004c7e <ESP_Upkeep+0x262>
            EspState = ESP_STATE_SEND;
 8004c76:	4b4d      	ldr	r3, [pc, #308]	@ (8004dac <ESP_Upkeep+0x390>)
 8004c78:	2204      	movs	r2, #4
 8004c7a:	701a      	strb	r2, [r3, #0]
 8004c7c:	e00e      	b.n	8004c9c <ESP_Upkeep+0x280>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8004c7e:	4b58      	ldr	r3, [pc, #352]	@ (8004de0 <ESP_Upkeep+0x3c4>)
 8004c80:	220c      	movs	r2, #12
 8004c82:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8004c84:	4b54      	ldr	r3, [pc, #336]	@ (8004dd8 <ESP_Upkeep+0x3bc>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	4b52      	ldr	r3, [pc, #328]	@ (8004dd8 <ESP_Upkeep+0x3bc>)
 8004c8e:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8004c90:	4b54      	ldr	r3, [pc, #336]	@ (8004de4 <ESP_Upkeep+0x3c8>)
 8004c92:	2202      	movs	r2, #2
 8004c94:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8004c96:	4b45      	ldr	r3, [pc, #276]	@ (8004dac <ESP_Upkeep+0x390>)
 8004c98:	2204      	movs	r2, #4
 8004c9a:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8004c9c:	1dbb      	adds	r3, r7, #6
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d100      	bne.n	8004ca6 <ESP_Upkeep+0x28a>
 8004ca4:	e0b8      	b.n	8004e18 <ESP_Upkeep+0x3fc>
          EspState = ESP_STATE_NEXT_AT;
 8004ca6:	4b41      	ldr	r3, [pc, #260]	@ (8004dac <ESP_Upkeep+0x390>)
 8004ca8:	2205      	movs	r2, #5
 8004caa:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004cac:	e0b4      	b.n	8004e18 <ESP_Upkeep+0x3fc>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8004cae:	4b4a      	ldr	r3, [pc, #296]	@ (8004dd8 <ESP_Upkeep+0x3bc>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	4b48      	ldr	r3, [pc, #288]	@ (8004dd8 <ESP_Upkeep+0x3bc>)
 8004cb8:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8004cba:	4b47      	ldr	r3, [pc, #284]	@ (8004dd8 <ESP_Upkeep+0x3bc>)
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	001a      	movs	r2, r3
 8004cc0:	4b41      	ldr	r3, [pc, #260]	@ (8004dc8 <ESP_Upkeep+0x3ac>)
 8004cc2:	5c9a      	ldrb	r2, [r3, r2]
 8004cc4:	4b46      	ldr	r3, [pc, #280]	@ (8004de0 <ESP_Upkeep+0x3c4>)
 8004cc6:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8004cc8:	4b45      	ldr	r3, [pc, #276]	@ (8004de0 <ESP_Upkeep+0x3c4>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b03      	cmp	r3, #3
 8004cce:	d102      	bne.n	8004cd6 <ESP_Upkeep+0x2ba>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8004cd0:	4b44      	ldr	r3, [pc, #272]	@ (8004de4 <ESP_Upkeep+0x3c8>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8004cd6:	4b42      	ldr	r3, [pc, #264]	@ (8004de0 <ESP_Upkeep+0x3c4>)
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	2b0c      	cmp	r3, #12
 8004cdc:	d102      	bne.n	8004ce4 <ESP_Upkeep+0x2c8>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8004cde:	4b41      	ldr	r3, [pc, #260]	@ (8004de4 <ESP_Upkeep+0x3c8>)
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8004ce4:	4b3e      	ldr	r3, [pc, #248]	@ (8004de0 <ESP_Upkeep+0x3c4>)
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b0c      	cmp	r3, #12
 8004cea:	d006      	beq.n	8004cfa <ESP_Upkeep+0x2de>
 8004cec:	4b3c      	ldr	r3, [pc, #240]	@ (8004de0 <ESP_Upkeep+0x3c4>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b03      	cmp	r3, #3
 8004cf2:	d002      	beq.n	8004cfa <ESP_Upkeep+0x2de>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8004de4 <ESP_Upkeep+0x3c8>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8004cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8004dac <ESP_Upkeep+0x390>)
 8004cfc:	2204      	movs	r2, #4
 8004cfe:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8004d00:	4b37      	ldr	r3, [pc, #220]	@ (8004de0 <ESP_Upkeep+0x3c4>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	2b0f      	cmp	r3, #15
 8004d06:	d000      	beq.n	8004d0a <ESP_Upkeep+0x2ee>
 8004d08:	e088      	b.n	8004e1c <ESP_Upkeep+0x400>
        if(Mode == AT_MODE_SEND){
 8004d0a:	4b34      	ldr	r3, [pc, #208]	@ (8004ddc <ESP_Upkeep+0x3c0>)
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d112      	bne.n	8004d38 <ESP_Upkeep+0x31c>
          ESPTimeStamp = HAL_GetTick() + 300000;
 8004d12:	f004 faa5 	bl	8009260 <HAL_GetTick>
 8004d16:	0003      	movs	r3, r0
 8004d18:	4a39      	ldr	r2, [pc, #228]	@ (8004e00 <ESP_Upkeep+0x3e4>)
 8004d1a:	189a      	adds	r2, r3, r2
 8004d1c:	4b28      	ldr	r3, [pc, #160]	@ (8004dc0 <ESP_Upkeep+0x3a4>)
 8004d1e:	601a      	str	r2, [r3, #0]
          TIM2 -> CCR1 = 40000;
 8004d20:	2380      	movs	r3, #128	@ 0x80
 8004d22:	05db      	lsls	r3, r3, #23
 8004d24:	4a33      	ldr	r2, [pc, #204]	@ (8004df4 <ESP_Upkeep+0x3d8>)
 8004d26:	635a      	str	r2, [r3, #52]	@ 0x34
          TIM2 -> CCR3 = 0;
 8004d28:	2380      	movs	r3, #128	@ 0x80
 8004d2a:	05db      	lsls	r3, r3, #23
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	63da      	str	r2, [r3, #60]	@ 0x3c
          TIM2 -> CCR4 = 40000;
 8004d30:	2380      	movs	r3, #128	@ 0x80
 8004d32:	05db      	lsls	r3, r3, #23
 8004d34:	4a2f      	ldr	r2, [pc, #188]	@ (8004df4 <ESP_Upkeep+0x3d8>)
 8004d36:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        EspState = ESP_STATE_RESET;
 8004d38:	4b1c      	ldr	r3, [pc, #112]	@ (8004dac <ESP_Upkeep+0x390>)
 8004d3a:	2209      	movs	r2, #9
 8004d3c:	701a      	strb	r2, [r3, #0]
      }
    break;
 8004d3e:	e06d      	b.n	8004e1c <ESP_Upkeep+0x400>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp)){
 8004d40:	4b1f      	ldr	r3, [pc, #124]	@ (8004dc0 <ESP_Upkeep+0x3a4>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	0018      	movs	r0, r3
 8004d46:	f003 fe3d 	bl	80089c4 <TimestampIsReached>
 8004d4a:	1e03      	subs	r3, r0, #0
 8004d4c:	d068      	beq.n	8004e20 <ESP_Upkeep+0x404>
        if(Mode == AT_MODE_INIT){
 8004d4e:	4b23      	ldr	r3, [pc, #140]	@ (8004ddc <ESP_Upkeep+0x3c0>)
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d102      	bne.n	8004d5c <ESP_Upkeep+0x340>
          InitIsDone = true;
 8004d56:	4b1d      	ldr	r3, [pc, #116]	@ (8004dcc <ESP_Upkeep+0x3b0>)
 8004d58:	2201      	movs	r2, #1
 8004d5a:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8004d5c:	4b1f      	ldr	r3, [pc, #124]	@ (8004ddc <ESP_Upkeep+0x3c0>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d102      	bne.n	8004d6a <ESP_Upkeep+0x34e>
          ConnectionMade = true;
 8004d64:	4b20      	ldr	r3, [pc, #128]	@ (8004de8 <ESP_Upkeep+0x3cc>)
 8004d66:	2201      	movs	r2, #1
 8004d68:	701a      	strb	r2, [r3, #0]
        }
        TIM2 -> CCR1 = 40000;
 8004d6a:	2380      	movs	r3, #128	@ 0x80
 8004d6c:	05db      	lsls	r3, r3, #23
 8004d6e:	4a21      	ldr	r2, [pc, #132]	@ (8004df4 <ESP_Upkeep+0x3d8>)
 8004d70:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM2 -> CCR3 = 40000;
 8004d72:	2380      	movs	r3, #128	@ 0x80
 8004d74:	05db      	lsls	r3, r3, #23
 8004d76:	4a1f      	ldr	r2, [pc, #124]	@ (8004df4 <ESP_Upkeep+0x3d8>)
 8004d78:	63da      	str	r2, [r3, #60]	@ 0x3c
        TIM2 -> CCR4 = 40000;
 8004d7a:	2380      	movs	r3, #128	@ 0x80
 8004d7c:	05db      	lsls	r3, r3, #23
 8004d7e:	4a1d      	ldr	r2, [pc, #116]	@ (8004df4 <ESP_Upkeep+0x3d8>)
 8004d80:	641a      	str	r2, [r3, #64]	@ 0x40
        EspState = ESP_STATE_MODE_SELECT;
 8004d82:	4b0a      	ldr	r3, [pc, #40]	@ (8004dac <ESP_Upkeep+0x390>)
 8004d84:	220b      	movs	r2, #11
 8004d86:	701a      	strb	r2, [r3, #0]
      }

      break;
 8004d88:	e04a      	b.n	8004e20 <ESP_Upkeep+0x404>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 8004d8a:	4a1e      	ldr	r2, [pc, #120]	@ (8004e04 <ESP_Upkeep+0x3e8>)
 8004d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8004e08 <ESP_Upkeep+0x3ec>)
 8004d8e:	0019      	movs	r1, r3
 8004d90:	2003      	movs	r0, #3
 8004d92:	f003 fe6d 	bl	8008a70 <CreateLine>
      EspState = ESP_STATE_INIT;
 8004d96:	4b05      	ldr	r3, [pc, #20]	@ (8004dac <ESP_Upkeep+0x390>)
 8004d98:	2202      	movs	r2, #2
 8004d9a:	701a      	strb	r2, [r3, #0]
      break;
 8004d9c:	e041      	b.n	8004e22 <ESP_Upkeep+0x406>

    default:
      // Handle unexpected state
      EspState = ESP_STATE_ERROR;
 8004d9e:	4b03      	ldr	r3, [pc, #12]	@ (8004dac <ESP_Upkeep+0x390>)
 8004da0:	2207      	movs	r2, #7
 8004da2:	701a      	strb	r2, [r3, #0]
      break;
 8004da4:	e03d      	b.n	8004e22 <ESP_Upkeep+0x406>
      break;
 8004da6:	46c0      	nop			@ (mov r8, r8)
 8004da8:	e03b      	b.n	8004e22 <ESP_Upkeep+0x406>
 8004daa:	46c0      	nop			@ (mov r8, r8)
 8004dac:	20000102 	.word	0x20000102
 8004db0:	0801a2e8 	.word	0x0801a2e8
 8004db4:	200005d7 	.word	0x200005d7
 8004db8:	50000800 	.word	0x50000800
 8004dbc:	50001c00 	.word	0x50001c00
 8004dc0:	20000880 	.word	0x20000880
 8004dc4:	200004d8 	.word	0x200004d8
 8004dc8:	20000874 	.word	0x20000874
 8004dcc:	200005d8 	.word	0x200005d8
 8004dd0:	200005d9 	.word	0x200005d9
 8004dd4:	200000f0 	.word	0x200000f0
 8004dd8:	2000087e 	.word	0x2000087e
 8004ddc:	20000a8b 	.word	0x20000a8b
 8004de0:	20000a8a 	.word	0x20000a8a
 8004de4:	20000a89 	.word	0x20000a89
 8004de8:	200005da 	.word	0x200005da
 8004dec:	200000fc 	.word	0x200000fc
 8004df0:	200000f8 	.word	0x200000f8
 8004df4:	00009c40 	.word	0x00009c40
 8004df8:	00004e20 	.word	0x00004e20
 8004dfc:	20000104 	.word	0x20000104
 8004e00:	000493e0 	.word	0x000493e0
 8004e04:	08019c38 	.word	0x08019c38
 8004e08:	080197c8 	.word	0x080197c8
      break;
 8004e0c:	46c0      	nop			@ (mov r8, r8)
 8004e0e:	e008      	b.n	8004e22 <ESP_Upkeep+0x406>
    break;
 8004e10:	46c0      	nop			@ (mov r8, r8)
 8004e12:	e006      	b.n	8004e22 <ESP_Upkeep+0x406>
         break;
 8004e14:	46c0      	nop			@ (mov r8, r8)
 8004e16:	e004      	b.n	8004e22 <ESP_Upkeep+0x406>
      break;
 8004e18:	46c0      	nop			@ (mov r8, r8)
 8004e1a:	e002      	b.n	8004e22 <ESP_Upkeep+0x406>
    break;
 8004e1c:	46c0      	nop			@ (mov r8, r8)
 8004e1e:	e000      	b.n	8004e22 <ESP_Upkeep+0x406>
      break;
 8004e20:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004e22:	46c0      	nop			@ (mov r8, r8)
 8004e24:	46bd      	mov	sp, r7
 8004e26:	b003      	add	sp, #12
 8004e28:	bd90      	pop	{r4, r7, pc}
 8004e2a:	46c0      	nop			@ (mov r8, r8)

08004e2c <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8004e34:	4b09      	ldr	r3, [pc, #36]	@ (8004e5c <I2CSensors_Init+0x30>)
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 8004e3a:	4a09      	ldr	r2, [pc, #36]	@ (8004e60 <I2CSensors_Init+0x34>)
 8004e3c:	4b09      	ldr	r3, [pc, #36]	@ (8004e64 <I2CSensors_Init+0x38>)
 8004e3e:	0011      	movs	r1, r2
 8004e40:	0018      	movs	r0, r3
 8004e42:	f000 fae7 	bl	8005414 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 8004e46:	4a06      	ldr	r2, [pc, #24]	@ (8004e60 <I2CSensors_Init+0x34>)
 8004e48:	4b06      	ldr	r3, [pc, #24]	@ (8004e64 <I2CSensors_Init+0x38>)
 8004e4a:	0011      	movs	r1, r2
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	f000 f96b 	bl	8005128 <Gas_Init>
}
 8004e52:	46c0      	nop			@ (mov r8, r8)
 8004e54:	46bd      	mov	sp, r7
 8004e56:	b002      	add	sp, #8
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	46c0      	nop			@ (mov r8, r8)
 8004e5c:	20000a90 	.word	0x20000a90
 8004e60:	08004ebd 	.word	0x08004ebd
 8004e64:	08004e69 	.word	0x08004e69

08004e68 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8004e68:	b5b0      	push	{r4, r5, r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6039      	str	r1, [r7, #0]
 8004e70:	0011      	movs	r1, r2
 8004e72:	1dfb      	adds	r3, r7, #7
 8004e74:	1c02      	adds	r2, r0, #0
 8004e76:	701a      	strb	r2, [r3, #0]
 8004e78:	1dbb      	adds	r3, r7, #6
 8004e7a:	1c0a      	adds	r2, r1, #0
 8004e7c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8004e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8004eb8 <ReadI2C+0x50>)
 8004e80:	6818      	ldr	r0, [r3, #0]
 8004e82:	1dfb      	adds	r3, r7, #7
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	18db      	adds	r3, r3, r3
 8004e8a:	b299      	uxth	r1, r3
 8004e8c:	1dbb      	adds	r3, r7, #6
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	250f      	movs	r5, #15
 8004e94:	197c      	adds	r4, r7, r5
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	f005 fd32 	bl	800a900 <HAL_I2C_Master_Receive_DMA>
 8004e9c:	0003      	movs	r3, r0
 8004e9e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8004ea0:	197b      	adds	r3, r7, r5
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <ReadI2C+0x44>
        return false;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	e000      	b.n	8004eae <ReadI2C+0x46>
    }
    return true;
 8004eac:	2301      	movs	r3, #1
}
 8004eae:	0018      	movs	r0, r3
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	b004      	add	sp, #16
 8004eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8004eb6:	46c0      	nop			@ (mov r8, r8)
 8004eb8:	20000a90 	.word	0x20000a90

08004ebc <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8004ebc:	b5b0      	push	{r4, r5, r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6039      	str	r1, [r7, #0]
 8004ec4:	0011      	movs	r1, r2
 8004ec6:	1dfb      	adds	r3, r7, #7
 8004ec8:	1c02      	adds	r2, r0, #0
 8004eca:	701a      	strb	r2, [r3, #0]
 8004ecc:	1dbb      	adds	r3, r7, #6
 8004ece:	1c0a      	adds	r2, r1, #0
 8004ed0:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8004ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8004f0c <WriteI2C+0x50>)
 8004ed4:	6818      	ldr	r0, [r3, #0]
 8004ed6:	1dfb      	adds	r3, r7, #7
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	18db      	adds	r3, r3, r3
 8004ede:	b299      	uxth	r1, r3
 8004ee0:	1dbb      	adds	r3, r7, #6
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	250f      	movs	r5, #15
 8004ee8:	197c      	adds	r4, r7, r5
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	f005 fc02 	bl	800a6f4 <HAL_I2C_Master_Transmit_DMA>
 8004ef0:	0003      	movs	r3, r0
 8004ef2:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8004ef4:	197b      	adds	r3, r7, r5
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <WriteI2C+0x44>
        return false;
 8004efc:	2300      	movs	r3, #0
 8004efe:	e000      	b.n	8004f02 <WriteI2C+0x46>
    }
    return true;
 8004f00:	2301      	movs	r3, #1
}
 8004f02:	0018      	movs	r0, r3
 8004f04:	46bd      	mov	sp, r7
 8004f06:	b004      	add	sp, #16
 8004f08:	bdb0      	pop	{r4, r5, r7, pc}
 8004f0a:	46c0      	nop			@ (mov r8, r8)
 8004f0c:	20000a90 	.word	0x20000a90

08004f10 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004f16:	003b      	movs	r3, r7
 8004f18:	0018      	movs	r0, r3
 8004f1a:	2308      	movs	r3, #8
 8004f1c:	001a      	movs	r2, r3
 8004f1e:	2100      	movs	r1, #0
 8004f20:	f011 fd48 	bl	80169b4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8004f24:	4b30      	ldr	r3, [pc, #192]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f26:	4a31      	ldr	r2, [pc, #196]	@ (8004fec <MX_ADC_Init+0xdc>)
 8004f28:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8004f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8004f30:	4b2d      	ldr	r3, [pc, #180]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f32:	22c0      	movs	r2, #192	@ 0xc0
 8004f34:	0612      	lsls	r2, r2, #24
 8004f36:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004f38:	4b2b      	ldr	r3, [pc, #172]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f40:	2200      	movs	r2, #0
 8004f42:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004f44:	4b28      	ldr	r3, [pc, #160]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f46:	2201      	movs	r2, #1
 8004f48:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004f4a:	4b27      	ldr	r3, [pc, #156]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004f50:	4b25      	ldr	r3, [pc, #148]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f52:	2220      	movs	r2, #32
 8004f54:	2100      	movs	r1, #0
 8004f56:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8004f58:	4b23      	ldr	r3, [pc, #140]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f5a:	2221      	movs	r2, #33	@ 0x21
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004f60:	4b21      	ldr	r3, [pc, #132]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004f66:	4b20      	ldr	r3, [pc, #128]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f68:	22c2      	movs	r2, #194	@ 0xc2
 8004f6a:	32ff      	adds	r2, #255	@ 0xff
 8004f6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8004f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f70:	222c      	movs	r2, #44	@ 0x2c
 8004f72:	2100      	movs	r1, #0
 8004f74:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004f76:	4b1c      	ldr	r3, [pc, #112]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f78:	2204      	movs	r2, #4
 8004f7a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004f82:	4b19      	ldr	r3, [pc, #100]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8004f88:	4b17      	ldr	r3, [pc, #92]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004f8e:	4b16      	ldr	r3, [pc, #88]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004f94:	4b14      	ldr	r3, [pc, #80]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004f96:	0018      	movs	r0, r3
 8004f98:	f004 f990 	bl	80092bc <HAL_ADC_Init>
 8004f9c:	1e03      	subs	r3, r0, #0
 8004f9e:	d001      	beq.n	8004fa4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8004fa0:	f000 fdb8 	bl	8005b14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8004fa4:	003b      	movs	r3, r7
 8004fa6:	4a12      	ldr	r2, [pc, #72]	@ (8004ff0 <MX_ADC_Init+0xe0>)
 8004fa8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004faa:	003b      	movs	r3, r7
 8004fac:	2280      	movs	r2, #128	@ 0x80
 8004fae:	0152      	lsls	r2, r2, #5
 8004fb0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004fb2:	003a      	movs	r2, r7
 8004fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004fb6:	0011      	movs	r1, r2
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f004 fbef 	bl	800979c <HAL_ADC_ConfigChannel>
 8004fbe:	1e03      	subs	r3, r0, #0
 8004fc0:	d001      	beq.n	8004fc6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8004fc2:	f000 fda7 	bl	8005b14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8004fc6:	003b      	movs	r3, r7
 8004fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8004ff4 <MX_ADC_Init+0xe4>)
 8004fca:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004fcc:	003a      	movs	r2, r7
 8004fce:	4b06      	ldr	r3, [pc, #24]	@ (8004fe8 <MX_ADC_Init+0xd8>)
 8004fd0:	0011      	movs	r1, r2
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f004 fbe2 	bl	800979c <HAL_ADC_ConfigChannel>
 8004fd8:	1e03      	subs	r3, r0, #0
 8004fda:	d001      	beq.n	8004fe0 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8004fdc:	f000 fd9a 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8004fe0:	46c0      	nop			@ (mov r8, r8)
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	b002      	add	sp, #8
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	20000a94 	.word	0x20000a94
 8004fec:	40012400 	.word	0x40012400
 8004ff0:	38004000 	.word	0x38004000
 8004ff4:	3c008000 	.word	0x3c008000

08004ff8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004ff8:	b590      	push	{r4, r7, lr}
 8004ffa:	b089      	sub	sp, #36	@ 0x24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005000:	240c      	movs	r4, #12
 8005002:	193b      	adds	r3, r7, r4
 8005004:	0018      	movs	r0, r3
 8005006:	2314      	movs	r3, #20
 8005008:	001a      	movs	r2, r3
 800500a:	2100      	movs	r1, #0
 800500c:	f011 fcd2 	bl	80169b4 <memset>
  if(adcHandle->Instance==ADC1)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a14      	ldr	r2, [pc, #80]	@ (8005068 <HAL_ADC_MspInit+0x70>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d121      	bne.n	800505e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800501a:	4b14      	ldr	r3, [pc, #80]	@ (800506c <HAL_ADC_MspInit+0x74>)
 800501c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800501e:	4b13      	ldr	r3, [pc, #76]	@ (800506c <HAL_ADC_MspInit+0x74>)
 8005020:	2180      	movs	r1, #128	@ 0x80
 8005022:	0089      	lsls	r1, r1, #2
 8005024:	430a      	orrs	r2, r1
 8005026:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005028:	4b10      	ldr	r3, [pc, #64]	@ (800506c <HAL_ADC_MspInit+0x74>)
 800502a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800502c:	4b0f      	ldr	r3, [pc, #60]	@ (800506c <HAL_ADC_MspInit+0x74>)
 800502e:	2104      	movs	r1, #4
 8005030:	430a      	orrs	r2, r1
 8005032:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005034:	4b0d      	ldr	r3, [pc, #52]	@ (800506c <HAL_ADC_MspInit+0x74>)
 8005036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005038:	2204      	movs	r2, #4
 800503a:	4013      	ands	r3, r2
 800503c:	60bb      	str	r3, [r7, #8]
 800503e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8005040:	193b      	adds	r3, r7, r4
 8005042:	2230      	movs	r2, #48	@ 0x30
 8005044:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005046:	193b      	adds	r3, r7, r4
 8005048:	2203      	movs	r2, #3
 800504a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800504c:	193b      	adds	r3, r7, r4
 800504e:	2200      	movs	r2, #0
 8005050:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005052:	193b      	adds	r3, r7, r4
 8005054:	4a06      	ldr	r2, [pc, #24]	@ (8005070 <HAL_ADC_MspInit+0x78>)
 8005056:	0019      	movs	r1, r3
 8005058:	0010      	movs	r0, r2
 800505a:	f005 f837 	bl	800a0cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800505e:	46c0      	nop			@ (mov r8, r8)
 8005060:	46bd      	mov	sp, r7
 8005062:	b009      	add	sp, #36	@ 0x24
 8005064:	bd90      	pop	{r4, r7, pc}
 8005066:	46c0      	nop			@ (mov r8, r8)
 8005068:	40012400 	.word	0x40012400
 800506c:	40021000 	.word	0x40021000
 8005070:	50000800 	.word	0x50000800

08005074 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800507a:	4b10      	ldr	r3, [pc, #64]	@ (80050bc <MX_DMA_Init+0x48>)
 800507c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800507e:	4b0f      	ldr	r3, [pc, #60]	@ (80050bc <MX_DMA_Init+0x48>)
 8005080:	2101      	movs	r1, #1
 8005082:	430a      	orrs	r2, r1
 8005084:	631a      	str	r2, [r3, #48]	@ 0x30
 8005086:	4b0d      	ldr	r3, [pc, #52]	@ (80050bc <MX_DMA_Init+0x48>)
 8005088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508a:	2201      	movs	r2, #1
 800508c:	4013      	ands	r3, r2
 800508e:	607b      	str	r3, [r7, #4]
 8005090:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8005092:	2200      	movs	r2, #0
 8005094:	2100      	movs	r1, #0
 8005096:	200a      	movs	r0, #10
 8005098:	f004 fd3a 	bl	8009b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800509c:	200a      	movs	r0, #10
 800509e:	f004 fd4c 	bl	8009b3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 80050a2:	2200      	movs	r2, #0
 80050a4:	2103      	movs	r1, #3
 80050a6:	200b      	movs	r0, #11
 80050a8:	f004 fd32 	bl	8009b10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80050ac:	200b      	movs	r0, #11
 80050ae:	f004 fd44 	bl	8009b3a <HAL_NVIC_EnableIRQ>

}
 80050b2:	46c0      	nop			@ (mov r8, r8)
 80050b4:	46bd      	mov	sp, r7
 80050b6:	b002      	add	sp, #8
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	46c0      	nop			@ (mov r8, r8)
 80050bc:	40021000 	.word	0x40021000

080050c0 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 80050ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005100 <Gadget_Init+0x40>)
 80050d0:	6818      	ldr	r0, [r3, #0]
 80050d2:	f000 ffe1 	bl	8006098 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	68b9      	ldr	r1, [r7, #8]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	0018      	movs	r0, r3
 80050de:	f000 fd8d 	bl	8005bfc <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	0018      	movs	r0, r3
 80050e6:	f7fe fb0d 	bl	8003704 <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 80050ea:	4a06      	ldr	r2, [pc, #24]	@ (8005104 <Gadget_Init+0x44>)
 80050ec:	4b06      	ldr	r3, [pc, #24]	@ (8005108 <Gadget_Init+0x48>)
 80050ee:	0019      	movs	r1, r3
 80050f0:	2003      	movs	r0, #3
 80050f2:	f003 fcbd 	bl	8008a70 <CreateLine>
}
 80050f6:	46c0      	nop			@ (mov r8, r8)
 80050f8:	46bd      	mov	sp, r7
 80050fa:	b004      	add	sp, #16
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	46c0      	nop			@ (mov r8, r8)
 8005100:	20000108 	.word	0x20000108
 8005104:	08019c4c 	.word	0x08019c4c
 8005108:	08019c60 	.word	0x08019c60

0800510c <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  Meas_Test();
 8005110:	f001 f810 	bl	8006134 <Meas_Test>
}
 8005114:	46c0      	nop			@ (mov r8, r8)
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <UpkeepGadget>:

void UpkeepGadget() {
 800511a:	b580      	push	{r7, lr}
 800511c:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  Meas_Upkeep();
 800511e:	f000 ff27 	bl	8005f70 <Meas_Upkeep>
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8005122:	46c0      	nop			@ (mov r8, r8)
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	0011      	movs	r1, r2
 8005138:	0018      	movs	r0, r3
 800513a:	f002 fba7 	bl	800788c <SGP_Init>
}
 800513e:	46c0      	nop			@ (mov r8, r8)
 8005140:	46bd      	mov	sp, r7
 8005142:	b002      	add	sp, #8
 8005144:	bd80      	pop	{r7, pc}

08005146 <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 8005146:	b580      	push	{r7, lr}
 8005148:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 800514a:	f002 fbb9 	bl	80078c0 <SGP_StartMeasurement>
}
 800514e:	46c0      	nop			@ (mov r8, r8)
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	0018      	movs	r0, r3
 8005160:	f002 fc1e 	bl	80079a0 <SGP_GetMeasurementValues>
 8005164:	0003      	movs	r3, r0
}
 8005166:	0018      	movs	r0, r3
 8005168:	46bd      	mov	sp, r7
 800516a:	b002      	add	sp, #8
 800516c:	bd80      	pop	{r7, pc}

0800516e <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 800516e:	b580      	push	{r7, lr}
 8005170:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 8005172:	f002 fe33 	bl	8007ddc <SGP_DeviceConnected>
 8005176:	0003      	movs	r3, r0
}
 8005178:	0018      	movs	r0, r3
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
	...

08005180 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8005180:	b590      	push	{r4, r7, lr}
 8005182:	b08b      	sub	sp, #44	@ 0x2c
 8005184:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005186:	2414      	movs	r4, #20
 8005188:	193b      	adds	r3, r7, r4
 800518a:	0018      	movs	r0, r3
 800518c:	2314      	movs	r3, #20
 800518e:	001a      	movs	r2, r3
 8005190:	2100      	movs	r1, #0
 8005192:	f011 fc0f 	bl	80169b4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005196:	4b70      	ldr	r3, [pc, #448]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 8005198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800519a:	4b6f      	ldr	r3, [pc, #444]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 800519c:	2104      	movs	r1, #4
 800519e:	430a      	orrs	r2, r1
 80051a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80051a2:	4b6d      	ldr	r3, [pc, #436]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 80051a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a6:	2204      	movs	r2, #4
 80051a8:	4013      	ands	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]
 80051ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80051ae:	4b6a      	ldr	r3, [pc, #424]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 80051b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051b2:	4b69      	ldr	r3, [pc, #420]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 80051b4:	2180      	movs	r1, #128	@ 0x80
 80051b6:	430a      	orrs	r2, r1
 80051b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80051ba:	4b67      	ldr	r3, [pc, #412]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 80051bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051be:	2280      	movs	r2, #128	@ 0x80
 80051c0:	4013      	ands	r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80051c6:	4b64      	ldr	r3, [pc, #400]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 80051c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ca:	4b63      	ldr	r3, [pc, #396]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 80051cc:	2101      	movs	r1, #1
 80051ce:	430a      	orrs	r2, r1
 80051d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80051d2:	4b61      	ldr	r3, [pc, #388]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 80051d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d6:	2201      	movs	r2, #1
 80051d8:	4013      	ands	r3, r2
 80051da:	60bb      	str	r3, [r7, #8]
 80051dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80051de:	4b5e      	ldr	r3, [pc, #376]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 80051e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051e2:	4b5d      	ldr	r3, [pc, #372]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 80051e4:	2102      	movs	r1, #2
 80051e6:	430a      	orrs	r2, r1
 80051e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80051ea:	4b5b      	ldr	r3, [pc, #364]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 80051ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ee:	2202      	movs	r2, #2
 80051f0:	4013      	ands	r3, r2
 80051f2:	607b      	str	r3, [r7, #4]
 80051f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80051f6:	4b58      	ldr	r3, [pc, #352]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 80051f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051fa:	4b57      	ldr	r3, [pc, #348]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 80051fc:	2108      	movs	r1, #8
 80051fe:	430a      	orrs	r2, r1
 8005200:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005202:	4b55      	ldr	r3, [pc, #340]	@ (8005358 <MX_GPIO_Init+0x1d8>)
 8005204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005206:	2208      	movs	r2, #8
 8005208:	4013      	ands	r3, r2
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800520e:	4b53      	ldr	r3, [pc, #332]	@ (800535c <MX_GPIO_Init+0x1dc>)
 8005210:	2201      	movs	r2, #1
 8005212:	2101      	movs	r1, #1
 8005214:	0018      	movs	r0, r3
 8005216:	f005 f9b9 	bl	800a58c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800521a:	4b50      	ldr	r3, [pc, #320]	@ (800535c <MX_GPIO_Init+0x1dc>)
 800521c:	2200      	movs	r2, #0
 800521e:	2102      	movs	r1, #2
 8005220:	0018      	movs	r0, r3
 8005222:	f005 f9b3 	bl	800a58c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8005226:	494e      	ldr	r1, [pc, #312]	@ (8005360 <MX_GPIO_Init+0x1e0>)
 8005228:	4b4e      	ldr	r3, [pc, #312]	@ (8005364 <MX_GPIO_Init+0x1e4>)
 800522a:	2201      	movs	r2, #1
 800522c:	0018      	movs	r0, r3
 800522e:	f005 f9ad 	bl	800a58c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005232:	2380      	movs	r3, #128	@ 0x80
 8005234:	011b      	lsls	r3, r3, #4
 8005236:	484c      	ldr	r0, [pc, #304]	@ (8005368 <MX_GPIO_Init+0x1e8>)
 8005238:	2201      	movs	r2, #1
 800523a:	0019      	movs	r1, r3
 800523c:	f005 f9a6 	bl	800a58c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8005240:	193b      	adds	r3, r7, r4
 8005242:	4a4a      	ldr	r2, [pc, #296]	@ (800536c <MX_GPIO_Init+0x1ec>)
 8005244:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005246:	193b      	adds	r3, r7, r4
 8005248:	2203      	movs	r2, #3
 800524a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800524c:	193b      	adds	r3, r7, r4
 800524e:	2200      	movs	r2, #0
 8005250:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005252:	193b      	adds	r3, r7, r4
 8005254:	4a44      	ldr	r2, [pc, #272]	@ (8005368 <MX_GPIO_Init+0x1e8>)
 8005256:	0019      	movs	r1, r3
 8005258:	0010      	movs	r0, r2
 800525a:	f004 ff37 	bl	800a0cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800525e:	193b      	adds	r3, r7, r4
 8005260:	2203      	movs	r2, #3
 8005262:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005264:	193b      	adds	r3, r7, r4
 8005266:	2201      	movs	r2, #1
 8005268:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800526a:	193b      	adds	r3, r7, r4
 800526c:	2200      	movs	r2, #0
 800526e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005270:	193b      	adds	r3, r7, r4
 8005272:	2200      	movs	r2, #0
 8005274:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005276:	193b      	adds	r3, r7, r4
 8005278:	4a38      	ldr	r2, [pc, #224]	@ (800535c <MX_GPIO_Init+0x1dc>)
 800527a:	0019      	movs	r1, r3
 800527c:	0010      	movs	r0, r2
 800527e:	f004 ff25 	bl	800a0cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8005282:	193b      	adds	r3, r7, r4
 8005284:	4a3a      	ldr	r2, [pc, #232]	@ (8005370 <MX_GPIO_Init+0x1f0>)
 8005286:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005288:	193b      	adds	r3, r7, r4
 800528a:	2203      	movs	r2, #3
 800528c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528e:	193b      	adds	r3, r7, r4
 8005290:	2200      	movs	r2, #0
 8005292:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005294:	193a      	adds	r2, r7, r4
 8005296:	23a0      	movs	r3, #160	@ 0xa0
 8005298:	05db      	lsls	r3, r3, #23
 800529a:	0011      	movs	r1, r2
 800529c:	0018      	movs	r0, r3
 800529e:	f004 ff15 	bl	800a0cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 80052a2:	193b      	adds	r3, r7, r4
 80052a4:	22c0      	movs	r2, #192	@ 0xc0
 80052a6:	0052      	lsls	r2, r2, #1
 80052a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052aa:	193b      	adds	r3, r7, r4
 80052ac:	2200      	movs	r2, #0
 80052ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b0:	193b      	adds	r3, r7, r4
 80052b2:	2200      	movs	r2, #0
 80052b4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052b6:	193a      	adds	r2, r7, r4
 80052b8:	23a0      	movs	r3, #160	@ 0xa0
 80052ba:	05db      	lsls	r3, r3, #23
 80052bc:	0011      	movs	r1, r2
 80052be:	0018      	movs	r0, r3
 80052c0:	f004 ff04 	bl	800a0cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 80052c4:	193b      	adds	r3, r7, r4
 80052c6:	4a26      	ldr	r2, [pc, #152]	@ (8005360 <MX_GPIO_Init+0x1e0>)
 80052c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052ca:	193b      	adds	r3, r7, r4
 80052cc:	2201      	movs	r2, #1
 80052ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d0:	193b      	adds	r3, r7, r4
 80052d2:	2200      	movs	r2, #0
 80052d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052d6:	193b      	adds	r3, r7, r4
 80052d8:	2200      	movs	r2, #0
 80052da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052dc:	193b      	adds	r3, r7, r4
 80052de:	4a21      	ldr	r2, [pc, #132]	@ (8005364 <MX_GPIO_Init+0x1e4>)
 80052e0:	0019      	movs	r1, r3
 80052e2:	0010      	movs	r0, r2
 80052e4:	f004 fef2 	bl	800a0cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 80052e8:	193b      	adds	r3, r7, r4
 80052ea:	4a22      	ldr	r2, [pc, #136]	@ (8005374 <MX_GPIO_Init+0x1f4>)
 80052ec:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80052ee:	193b      	adds	r3, r7, r4
 80052f0:	2203      	movs	r2, #3
 80052f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f4:	193b      	adds	r3, r7, r4
 80052f6:	2200      	movs	r2, #0
 80052f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052fa:	193b      	adds	r3, r7, r4
 80052fc:	4a19      	ldr	r2, [pc, #100]	@ (8005364 <MX_GPIO_Init+0x1e4>)
 80052fe:	0019      	movs	r1, r3
 8005300:	0010      	movs	r0, r2
 8005302:	f004 fee3 	bl	800a0cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin;
 8005306:	0021      	movs	r1, r4
 8005308:	187b      	adds	r3, r7, r1
 800530a:	2280      	movs	r2, #128	@ 0x80
 800530c:	0112      	lsls	r2, r2, #4
 800530e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005310:	000c      	movs	r4, r1
 8005312:	193b      	adds	r3, r7, r4
 8005314:	2201      	movs	r2, #1
 8005316:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005318:	193b      	adds	r3, r7, r4
 800531a:	2200      	movs	r2, #0
 800531c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800531e:	193b      	adds	r3, r7, r4
 8005320:	2200      	movs	r2, #0
 8005322:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Wireless_PSU_EN_GPIO_Port, &GPIO_InitStruct);
 8005324:	193b      	adds	r3, r7, r4
 8005326:	4a10      	ldr	r2, [pc, #64]	@ (8005368 <MX_GPIO_Init+0x1e8>)
 8005328:	0019      	movs	r1, r3
 800532a:	0010      	movs	r0, r2
 800532c:	f004 fece 	bl	800a0cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8005330:	0021      	movs	r1, r4
 8005332:	187b      	adds	r3, r7, r1
 8005334:	2204      	movs	r2, #4
 8005336:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005338:	187b      	adds	r3, r7, r1
 800533a:	2200      	movs	r2, #0
 800533c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800533e:	187b      	adds	r3, r7, r1
 8005340:	2200      	movs	r2, #0
 8005342:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8005344:	187b      	adds	r3, r7, r1
 8005346:	4a0c      	ldr	r2, [pc, #48]	@ (8005378 <MX_GPIO_Init+0x1f8>)
 8005348:	0019      	movs	r1, r3
 800534a:	0010      	movs	r0, r2
 800534c:	f004 febe 	bl	800a0cc <HAL_GPIO_Init>

}
 8005350:	46c0      	nop			@ (mov r8, r8)
 8005352:	46bd      	mov	sp, r7
 8005354:	b00b      	add	sp, #44	@ 0x2c
 8005356:	bd90      	pop	{r4, r7, pc}
 8005358:	40021000 	.word	0x40021000
 800535c:	50001c00 	.word	0x50001c00
 8005360:	00000301 	.word	0x00000301
 8005364:	50000400 	.word	0x50000400
 8005368:	50000800 	.word	0x50000800
 800536c:	0000320f 	.word	0x0000320f
 8005370:	00008070 	.word	0x00008070
 8005374:	0000403e 	.word	0x0000403e
 8005378:	50000c00 	.word	0x50000c00

0800537c <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2100      	movs	r1, #0
 800538a:	0018      	movs	r0, r3
 800538c:	f00a fa60 	bl	800f850 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2108      	movs	r1, #8
 8005394:	0018      	movs	r0, r3
 8005396:	f00a fa5b 	bl	800f850 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	210c      	movs	r1, #12
 800539e:	0018      	movs	r0, r3
 80053a0:	f00a fa56 	bl	800f850 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 40000;
 80053a4:	2380      	movs	r3, #128	@ 0x80
 80053a6:	05db      	lsls	r3, r3, #23
 80053a8:	4a18      	ldr	r2, [pc, #96]	@ (800540c <GPIO_InitPWMLEDs+0x90>)
 80053aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 40000;
 80053ac:	2380      	movs	r3, #128	@ 0x80
 80053ae:	05db      	lsls	r3, r3, #23
 80053b0:	4a16      	ldr	r2, [pc, #88]	@ (800540c <GPIO_InitPWMLEDs+0x90>)
 80053b2:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 40000;
 80053b4:	2380      	movs	r3, #128	@ 0x80
 80053b6:	05db      	lsls	r3, r3, #23
 80053b8:	4a14      	ldr	r2, [pc, #80]	@ (800540c <GPIO_InitPWMLEDs+0x90>)
 80053ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 40000;
 80053bc:	2380      	movs	r3, #128	@ 0x80
 80053be:	05db      	lsls	r3, r3, #23
 80053c0:	4a12      	ldr	r2, [pc, #72]	@ (800540c <GPIO_InitPWMLEDs+0x90>)
 80053c2:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	2100      	movs	r1, #0
 80053c8:	0018      	movs	r0, r3
 80053ca:	f00a fa41 	bl	800f850 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2104      	movs	r1, #4
 80053d2:	0018      	movs	r0, r3
 80053d4:	f00a fa3c 	bl	800f850 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	2108      	movs	r1, #8
 80053dc:	0018      	movs	r0, r3
 80053de:	f00a fa37 	bl	800f850 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 80053e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005410 <GPIO_InitPWMLEDs+0x94>)
 80053e4:	22fa      	movs	r2, #250	@ 0xfa
 80053e6:	0112      	lsls	r2, r2, #4
 80053e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 80053ea:	4b09      	ldr	r3, [pc, #36]	@ (8005410 <GPIO_InitPWMLEDs+0x94>)
 80053ec:	22fa      	movs	r2, #250	@ 0xfa
 80053ee:	0112      	lsls	r2, r2, #4
 80053f0:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 80053f2:	4b07      	ldr	r3, [pc, #28]	@ (8005410 <GPIO_InitPWMLEDs+0x94>)
 80053f4:	22fa      	movs	r2, #250	@ 0xfa
 80053f6:	0112      	lsls	r2, r2, #4
 80053f8:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 80053fa:	4b05      	ldr	r3, [pc, #20]	@ (8005410 <GPIO_InitPWMLEDs+0x94>)
 80053fc:	22fa      	movs	r2, #250	@ 0xfa
 80053fe:	0112      	lsls	r2, r2, #4
 8005400:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8005402:	46c0      	nop			@ (mov r8, r8)
 8005404:	46bd      	mov	sp, r7
 8005406:	b002      	add	sp, #8
 8005408:	bd80      	pop	{r7, pc}
 800540a:	46c0      	nop			@ (mov r8, r8)
 800540c:	00009c40 	.word	0x00009c40
 8005410:	40000400 	.word	0x40000400

08005414 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	0011      	movs	r1, r2
 8005424:	0018      	movs	r0, r3
 8005426:	f003 fc7b 	bl	8008d20 <HIDS_Init>
}
 800542a:	46c0      	nop			@ (mov r8, r8)
 800542c:	46bd      	mov	sp, r7
 800542e:	b002      	add	sp, #8
 8005430:	bd80      	pop	{r7, pc}

08005432 <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8005432:	b580      	push	{r7, lr}
 8005434:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8005436:	f003 fc95 	bl	8008d64 <HIDS_StartMeasurement>
}
 800543a:	46c0      	nop			@ (mov r8, r8)
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	0011      	movs	r1, r2
 8005450:	0018      	movs	r0, r3
 8005452:	f003 fd63 	bl	8008f1c <HIDS_GetMeasurementValues>
 8005456:	0003      	movs	r3, r0
}
 8005458:	0018      	movs	r0, r3
 800545a:	46bd      	mov	sp, r7
 800545c:	b002      	add	sp, #8
 800545e:	bd80      	pop	{r7, pc}

08005460 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8005460:	b580      	push	{r7, lr}
 8005462:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8005464:	f003 fcfe 	bl	8008e64 <HIDS_DeviceConnected>
 8005468:	0003      	movs	r3, r0
}
 800546a:	0018      	movs	r0, r3
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005474:	4b1b      	ldr	r3, [pc, #108]	@ (80054e4 <MX_I2C1_Init+0x74>)
 8005476:	4a1c      	ldr	r2, [pc, #112]	@ (80054e8 <MX_I2C1_Init+0x78>)
 8005478:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800547a:	4b1a      	ldr	r3, [pc, #104]	@ (80054e4 <MX_I2C1_Init+0x74>)
 800547c:	4a1b      	ldr	r2, [pc, #108]	@ (80054ec <MX_I2C1_Init+0x7c>)
 800547e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005480:	4b18      	ldr	r3, [pc, #96]	@ (80054e4 <MX_I2C1_Init+0x74>)
 8005482:	2200      	movs	r2, #0
 8005484:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005486:	4b17      	ldr	r3, [pc, #92]	@ (80054e4 <MX_I2C1_Init+0x74>)
 8005488:	2201      	movs	r2, #1
 800548a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800548c:	4b15      	ldr	r3, [pc, #84]	@ (80054e4 <MX_I2C1_Init+0x74>)
 800548e:	2200      	movs	r2, #0
 8005490:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005492:	4b14      	ldr	r3, [pc, #80]	@ (80054e4 <MX_I2C1_Init+0x74>)
 8005494:	2200      	movs	r2, #0
 8005496:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005498:	4b12      	ldr	r3, [pc, #72]	@ (80054e4 <MX_I2C1_Init+0x74>)
 800549a:	2200      	movs	r2, #0
 800549c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800549e:	4b11      	ldr	r3, [pc, #68]	@ (80054e4 <MX_I2C1_Init+0x74>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80054a4:	4b0f      	ldr	r3, [pc, #60]	@ (80054e4 <MX_I2C1_Init+0x74>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80054aa:	4b0e      	ldr	r3, [pc, #56]	@ (80054e4 <MX_I2C1_Init+0x74>)
 80054ac:	0018      	movs	r0, r3
 80054ae:	f005 f88b 	bl	800a5c8 <HAL_I2C_Init>
 80054b2:	1e03      	subs	r3, r0, #0
 80054b4:	d001      	beq.n	80054ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80054b6:	f000 fb2d 	bl	8005b14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80054ba:	4b0a      	ldr	r3, [pc, #40]	@ (80054e4 <MX_I2C1_Init+0x74>)
 80054bc:	2100      	movs	r1, #0
 80054be:	0018      	movs	r0, r3
 80054c0:	f006 fffa 	bl	800c4b8 <HAL_I2CEx_ConfigAnalogFilter>
 80054c4:	1e03      	subs	r3, r0, #0
 80054c6:	d001      	beq.n	80054cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80054c8:	f000 fb24 	bl	8005b14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80054cc:	4b05      	ldr	r3, [pc, #20]	@ (80054e4 <MX_I2C1_Init+0x74>)
 80054ce:	2100      	movs	r1, #0
 80054d0:	0018      	movs	r0, r3
 80054d2:	f007 f83d 	bl	800c550 <HAL_I2CEx_ConfigDigitalFilter>
 80054d6:	1e03      	subs	r3, r0, #0
 80054d8:	d001      	beq.n	80054de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80054da:	f000 fb1b 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80054de:	46c0      	nop			@ (mov r8, r8)
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	20000af0 	.word	0x20000af0
 80054e8:	40005400 	.word	0x40005400
 80054ec:	00503d58 	.word	0x00503d58

080054f0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80054f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005564 <MX_I2C2_Init+0x74>)
 80054f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005568 <MX_I2C2_Init+0x78>)
 80054f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 80054fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005564 <MX_I2C2_Init+0x74>)
 80054fc:	4a1b      	ldr	r2, [pc, #108]	@ (800556c <MX_I2C2_Init+0x7c>)
 80054fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005500:	4b18      	ldr	r3, [pc, #96]	@ (8005564 <MX_I2C2_Init+0x74>)
 8005502:	2200      	movs	r2, #0
 8005504:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005506:	4b17      	ldr	r3, [pc, #92]	@ (8005564 <MX_I2C2_Init+0x74>)
 8005508:	2201      	movs	r2, #1
 800550a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800550c:	4b15      	ldr	r3, [pc, #84]	@ (8005564 <MX_I2C2_Init+0x74>)
 800550e:	2200      	movs	r2, #0
 8005510:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8005512:	4b14      	ldr	r3, [pc, #80]	@ (8005564 <MX_I2C2_Init+0x74>)
 8005514:	2200      	movs	r2, #0
 8005516:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005518:	4b12      	ldr	r3, [pc, #72]	@ (8005564 <MX_I2C2_Init+0x74>)
 800551a:	2200      	movs	r2, #0
 800551c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800551e:	4b11      	ldr	r3, [pc, #68]	@ (8005564 <MX_I2C2_Init+0x74>)
 8005520:	2200      	movs	r2, #0
 8005522:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005524:	4b0f      	ldr	r3, [pc, #60]	@ (8005564 <MX_I2C2_Init+0x74>)
 8005526:	2200      	movs	r2, #0
 8005528:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800552a:	4b0e      	ldr	r3, [pc, #56]	@ (8005564 <MX_I2C2_Init+0x74>)
 800552c:	0018      	movs	r0, r3
 800552e:	f005 f84b 	bl	800a5c8 <HAL_I2C_Init>
 8005532:	1e03      	subs	r3, r0, #0
 8005534:	d001      	beq.n	800553a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8005536:	f000 faed 	bl	8005b14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800553a:	4b0a      	ldr	r3, [pc, #40]	@ (8005564 <MX_I2C2_Init+0x74>)
 800553c:	2100      	movs	r1, #0
 800553e:	0018      	movs	r0, r3
 8005540:	f006 ffba 	bl	800c4b8 <HAL_I2CEx_ConfigAnalogFilter>
 8005544:	1e03      	subs	r3, r0, #0
 8005546:	d001      	beq.n	800554c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005548:	f000 fae4 	bl	8005b14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800554c:	4b05      	ldr	r3, [pc, #20]	@ (8005564 <MX_I2C2_Init+0x74>)
 800554e:	2100      	movs	r1, #0
 8005550:	0018      	movs	r0, r3
 8005552:	f006 fffd 	bl	800c550 <HAL_I2CEx_ConfigDigitalFilter>
 8005556:	1e03      	subs	r3, r0, #0
 8005558:	d001      	beq.n	800555e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800555a:	f000 fadb 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800555e:	46c0      	nop			@ (mov r8, r8)
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	20000b44 	.word	0x20000b44
 8005568:	40005800 	.word	0x40005800
 800556c:	00503d58 	.word	0x00503d58

08005570 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005570:	b590      	push	{r4, r7, lr}
 8005572:	b08b      	sub	sp, #44	@ 0x2c
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005578:	2414      	movs	r4, #20
 800557a:	193b      	adds	r3, r7, r4
 800557c:	0018      	movs	r0, r3
 800557e:	2314      	movs	r3, #20
 8005580:	001a      	movs	r2, r3
 8005582:	2100      	movs	r1, #0
 8005584:	f011 fa16 	bl	80169b4 <memset>
  if(i2cHandle->Instance==I2C1)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a5d      	ldr	r2, [pc, #372]	@ (8005704 <HAL_I2C_MspInit+0x194>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d000      	beq.n	8005594 <HAL_I2C_MspInit+0x24>
 8005592:	e083      	b.n	800569c <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005594:	4b5c      	ldr	r3, [pc, #368]	@ (8005708 <HAL_I2C_MspInit+0x198>)
 8005596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005598:	4b5b      	ldr	r3, [pc, #364]	@ (8005708 <HAL_I2C_MspInit+0x198>)
 800559a:	2102      	movs	r1, #2
 800559c:	430a      	orrs	r2, r1
 800559e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80055a0:	4b59      	ldr	r3, [pc, #356]	@ (8005708 <HAL_I2C_MspInit+0x198>)
 80055a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a4:	2202      	movs	r2, #2
 80055a6:	4013      	ands	r3, r2
 80055a8:	613b      	str	r3, [r7, #16]
 80055aa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80055ac:	0021      	movs	r1, r4
 80055ae:	187b      	adds	r3, r7, r1
 80055b0:	22c0      	movs	r2, #192	@ 0xc0
 80055b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80055b4:	187b      	adds	r3, r7, r1
 80055b6:	2212      	movs	r2, #18
 80055b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ba:	187b      	adds	r3, r7, r1
 80055bc:	2200      	movs	r2, #0
 80055be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055c0:	187b      	adds	r3, r7, r1
 80055c2:	2203      	movs	r2, #3
 80055c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80055c6:	187b      	adds	r3, r7, r1
 80055c8:	2201      	movs	r2, #1
 80055ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055cc:	187b      	adds	r3, r7, r1
 80055ce:	4a4f      	ldr	r2, [pc, #316]	@ (800570c <HAL_I2C_MspInit+0x19c>)
 80055d0:	0019      	movs	r1, r3
 80055d2:	0010      	movs	r0, r2
 80055d4:	f004 fd7a 	bl	800a0cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80055d8:	4b4b      	ldr	r3, [pc, #300]	@ (8005708 <HAL_I2C_MspInit+0x198>)
 80055da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055dc:	4b4a      	ldr	r3, [pc, #296]	@ (8005708 <HAL_I2C_MspInit+0x198>)
 80055de:	2180      	movs	r1, #128	@ 0x80
 80055e0:	0389      	lsls	r1, r1, #14
 80055e2:	430a      	orrs	r2, r1
 80055e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 80055e6:	4b4a      	ldr	r3, [pc, #296]	@ (8005710 <HAL_I2C_MspInit+0x1a0>)
 80055e8:	4a4a      	ldr	r2, [pc, #296]	@ (8005714 <HAL_I2C_MspInit+0x1a4>)
 80055ea:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 80055ec:	4b48      	ldr	r3, [pc, #288]	@ (8005710 <HAL_I2C_MspInit+0x1a0>)
 80055ee:	2206      	movs	r2, #6
 80055f0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80055f2:	4b47      	ldr	r3, [pc, #284]	@ (8005710 <HAL_I2C_MspInit+0x1a0>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055f8:	4b45      	ldr	r3, [pc, #276]	@ (8005710 <HAL_I2C_MspInit+0x1a0>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80055fe:	4b44      	ldr	r3, [pc, #272]	@ (8005710 <HAL_I2C_MspInit+0x1a0>)
 8005600:	2280      	movs	r2, #128	@ 0x80
 8005602:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005604:	4b42      	ldr	r3, [pc, #264]	@ (8005710 <HAL_I2C_MspInit+0x1a0>)
 8005606:	2200      	movs	r2, #0
 8005608:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800560a:	4b41      	ldr	r3, [pc, #260]	@ (8005710 <HAL_I2C_MspInit+0x1a0>)
 800560c:	2200      	movs	r2, #0
 800560e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005610:	4b3f      	ldr	r3, [pc, #252]	@ (8005710 <HAL_I2C_MspInit+0x1a0>)
 8005612:	2200      	movs	r2, #0
 8005614:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005616:	4b3e      	ldr	r3, [pc, #248]	@ (8005710 <HAL_I2C_MspInit+0x1a0>)
 8005618:	2200      	movs	r2, #0
 800561a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800561c:	4b3c      	ldr	r3, [pc, #240]	@ (8005710 <HAL_I2C_MspInit+0x1a0>)
 800561e:	0018      	movs	r0, r3
 8005620:	f004 faa8 	bl	8009b74 <HAL_DMA_Init>
 8005624:	1e03      	subs	r3, r0, #0
 8005626:	d001      	beq.n	800562c <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8005628:	f000 fa74 	bl	8005b14 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a38      	ldr	r2, [pc, #224]	@ (8005710 <HAL_I2C_MspInit+0x1a0>)
 8005630:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005632:	4b37      	ldr	r3, [pc, #220]	@ (8005710 <HAL_I2C_MspInit+0x1a0>)
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8005638:	4b37      	ldr	r3, [pc, #220]	@ (8005718 <HAL_I2C_MspInit+0x1a8>)
 800563a:	4a38      	ldr	r2, [pc, #224]	@ (800571c <HAL_I2C_MspInit+0x1ac>)
 800563c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800563e:	4b36      	ldr	r3, [pc, #216]	@ (8005718 <HAL_I2C_MspInit+0x1a8>)
 8005640:	2206      	movs	r2, #6
 8005642:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005644:	4b34      	ldr	r3, [pc, #208]	@ (8005718 <HAL_I2C_MspInit+0x1a8>)
 8005646:	2210      	movs	r2, #16
 8005648:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800564a:	4b33      	ldr	r3, [pc, #204]	@ (8005718 <HAL_I2C_MspInit+0x1a8>)
 800564c:	2200      	movs	r2, #0
 800564e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005650:	4b31      	ldr	r3, [pc, #196]	@ (8005718 <HAL_I2C_MspInit+0x1a8>)
 8005652:	2280      	movs	r2, #128	@ 0x80
 8005654:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005656:	4b30      	ldr	r3, [pc, #192]	@ (8005718 <HAL_I2C_MspInit+0x1a8>)
 8005658:	2200      	movs	r2, #0
 800565a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800565c:	4b2e      	ldr	r3, [pc, #184]	@ (8005718 <HAL_I2C_MspInit+0x1a8>)
 800565e:	2200      	movs	r2, #0
 8005660:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005662:	4b2d      	ldr	r3, [pc, #180]	@ (8005718 <HAL_I2C_MspInit+0x1a8>)
 8005664:	2200      	movs	r2, #0
 8005666:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005668:	4b2b      	ldr	r3, [pc, #172]	@ (8005718 <HAL_I2C_MspInit+0x1a8>)
 800566a:	2200      	movs	r2, #0
 800566c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800566e:	4b2a      	ldr	r3, [pc, #168]	@ (8005718 <HAL_I2C_MspInit+0x1a8>)
 8005670:	0018      	movs	r0, r3
 8005672:	f004 fa7f 	bl	8009b74 <HAL_DMA_Init>
 8005676:	1e03      	subs	r3, r0, #0
 8005678:	d001      	beq.n	800567e <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800567a:	f000 fa4b 	bl	8005b14 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a25      	ldr	r2, [pc, #148]	@ (8005718 <HAL_I2C_MspInit+0x1a8>)
 8005682:	639a      	str	r2, [r3, #56]	@ 0x38
 8005684:	4b24      	ldr	r3, [pc, #144]	@ (8005718 <HAL_I2C_MspInit+0x1a8>)
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800568a:	2200      	movs	r2, #0
 800568c:	2100      	movs	r1, #0
 800568e:	2017      	movs	r0, #23
 8005690:	f004 fa3e 	bl	8009b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8005694:	2017      	movs	r0, #23
 8005696:	f004 fa50 	bl	8009b3a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800569a:	e02e      	b.n	80056fa <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005720 <HAL_I2C_MspInit+0x1b0>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d129      	bne.n	80056fa <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056a6:	4b18      	ldr	r3, [pc, #96]	@ (8005708 <HAL_I2C_MspInit+0x198>)
 80056a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056aa:	4b17      	ldr	r3, [pc, #92]	@ (8005708 <HAL_I2C_MspInit+0x198>)
 80056ac:	2102      	movs	r1, #2
 80056ae:	430a      	orrs	r2, r1
 80056b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80056b2:	4b15      	ldr	r3, [pc, #84]	@ (8005708 <HAL_I2C_MspInit+0x198>)
 80056b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b6:	2202      	movs	r2, #2
 80056b8:	4013      	ands	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80056be:	2114      	movs	r1, #20
 80056c0:	187b      	adds	r3, r7, r1
 80056c2:	22c0      	movs	r2, #192	@ 0xc0
 80056c4:	0112      	lsls	r2, r2, #4
 80056c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80056c8:	187b      	adds	r3, r7, r1
 80056ca:	2212      	movs	r2, #18
 80056cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ce:	187b      	adds	r3, r7, r1
 80056d0:	2200      	movs	r2, #0
 80056d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056d4:	187b      	adds	r3, r7, r1
 80056d6:	2203      	movs	r2, #3
 80056d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80056da:	187b      	adds	r3, r7, r1
 80056dc:	2206      	movs	r2, #6
 80056de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056e0:	187b      	adds	r3, r7, r1
 80056e2:	4a0a      	ldr	r2, [pc, #40]	@ (800570c <HAL_I2C_MspInit+0x19c>)
 80056e4:	0019      	movs	r1, r3
 80056e6:	0010      	movs	r0, r2
 80056e8:	f004 fcf0 	bl	800a0cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80056ec:	4b06      	ldr	r3, [pc, #24]	@ (8005708 <HAL_I2C_MspInit+0x198>)
 80056ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056f0:	4b05      	ldr	r3, [pc, #20]	@ (8005708 <HAL_I2C_MspInit+0x198>)
 80056f2:	2180      	movs	r1, #128	@ 0x80
 80056f4:	03c9      	lsls	r1, r1, #15
 80056f6:	430a      	orrs	r2, r1
 80056f8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80056fa:	46c0      	nop			@ (mov r8, r8)
 80056fc:	46bd      	mov	sp, r7
 80056fe:	b00b      	add	sp, #44	@ 0x2c
 8005700:	bd90      	pop	{r4, r7, pc}
 8005702:	46c0      	nop			@ (mov r8, r8)
 8005704:	40005400 	.word	0x40005400
 8005708:	40021000 	.word	0x40021000
 800570c:	50000400 	.word	0x50000400
 8005710:	20000b98 	.word	0x20000b98
 8005714:	40020030 	.word	0x40020030
 8005718:	20000be0 	.word	0x20000be0
 800571c:	4002001c 	.word	0x4002001c
 8005720:	40005800 	.word	0x40005800

08005724 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8005728:	4b10      	ldr	r3, [pc, #64]	@ (800576c <MX_I2S2_Init+0x48>)
 800572a:	4a11      	ldr	r2, [pc, #68]	@ (8005770 <MX_I2S2_Init+0x4c>)
 800572c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800572e:	4b0f      	ldr	r3, [pc, #60]	@ (800576c <MX_I2S2_Init+0x48>)
 8005730:	22c0      	movs	r2, #192	@ 0xc0
 8005732:	0092      	lsls	r2, r2, #2
 8005734:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8005736:	4b0d      	ldr	r3, [pc, #52]	@ (800576c <MX_I2S2_Init+0x48>)
 8005738:	2210      	movs	r2, #16
 800573a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 800573c:	4b0b      	ldr	r3, [pc, #44]	@ (800576c <MX_I2S2_Init+0x48>)
 800573e:	2205      	movs	r2, #5
 8005740:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8005742:	4b0a      	ldr	r3, [pc, #40]	@ (800576c <MX_I2S2_Init+0x48>)
 8005744:	2200      	movs	r2, #0
 8005746:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8005748:	4b08      	ldr	r3, [pc, #32]	@ (800576c <MX_I2S2_Init+0x48>)
 800574a:	22fa      	movs	r2, #250	@ 0xfa
 800574c:	0152      	lsls	r2, r2, #5
 800574e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8005750:	4b06      	ldr	r3, [pc, #24]	@ (800576c <MX_I2S2_Init+0x48>)
 8005752:	2208      	movs	r2, #8
 8005754:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8005756:	4b05      	ldr	r3, [pc, #20]	@ (800576c <MX_I2S2_Init+0x48>)
 8005758:	0018      	movs	r0, r3
 800575a:	f006 ff45 	bl	800c5e8 <HAL_I2S_Init>
 800575e:	1e03      	subs	r3, r0, #0
 8005760:	d001      	beq.n	8005766 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8005762:	f000 f9d7 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8005766:	46c0      	nop			@ (mov r8, r8)
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	20000c28 	.word	0x20000c28
 8005770:	40003800 	.word	0x40003800

08005774 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8005774:	b590      	push	{r4, r7, lr}
 8005776:	b089      	sub	sp, #36	@ 0x24
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800577c:	240c      	movs	r4, #12
 800577e:	193b      	adds	r3, r7, r4
 8005780:	0018      	movs	r0, r3
 8005782:	2314      	movs	r3, #20
 8005784:	001a      	movs	r2, r3
 8005786:	2100      	movs	r1, #0
 8005788:	f011 f914 	bl	80169b4 <memset>
  if(i2sHandle->Instance==SPI2)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a2d      	ldr	r2, [pc, #180]	@ (8005848 <HAL_I2S_MspInit+0xd4>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d154      	bne.n	8005840 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005796:	4b2d      	ldr	r3, [pc, #180]	@ (800584c <HAL_I2S_MspInit+0xd8>)
 8005798:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800579a:	4b2c      	ldr	r3, [pc, #176]	@ (800584c <HAL_I2S_MspInit+0xd8>)
 800579c:	2180      	movs	r1, #128	@ 0x80
 800579e:	01c9      	lsls	r1, r1, #7
 80057a0:	430a      	orrs	r2, r1
 80057a2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057a4:	4b29      	ldr	r3, [pc, #164]	@ (800584c <HAL_I2S_MspInit+0xd8>)
 80057a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057a8:	4b28      	ldr	r3, [pc, #160]	@ (800584c <HAL_I2S_MspInit+0xd8>)
 80057aa:	2102      	movs	r1, #2
 80057ac:	430a      	orrs	r2, r1
 80057ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80057b0:	4b26      	ldr	r3, [pc, #152]	@ (800584c <HAL_I2S_MspInit+0xd8>)
 80057b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b4:	2202      	movs	r2, #2
 80057b6:	4013      	ands	r3, r2
 80057b8:	60bb      	str	r3, [r7, #8]
 80057ba:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80057bc:	193b      	adds	r3, r7, r4
 80057be:	22b0      	movs	r2, #176	@ 0xb0
 80057c0:	0212      	lsls	r2, r2, #8
 80057c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057c4:	0021      	movs	r1, r4
 80057c6:	187b      	adds	r3, r7, r1
 80057c8:	2202      	movs	r2, #2
 80057ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057cc:	187b      	adds	r3, r7, r1
 80057ce:	2200      	movs	r2, #0
 80057d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057d2:	187b      	adds	r3, r7, r1
 80057d4:	2200      	movs	r2, #0
 80057d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80057d8:	187b      	adds	r3, r7, r1
 80057da:	2200      	movs	r2, #0
 80057dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057de:	187b      	adds	r3, r7, r1
 80057e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005850 <HAL_I2S_MspInit+0xdc>)
 80057e2:	0019      	movs	r1, r3
 80057e4:	0010      	movs	r0, r2
 80057e6:	f004 fc71 	bl	800a0cc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80057ea:	4b1a      	ldr	r3, [pc, #104]	@ (8005854 <HAL_I2S_MspInit+0xe0>)
 80057ec:	4a1a      	ldr	r2, [pc, #104]	@ (8005858 <HAL_I2S_MspInit+0xe4>)
 80057ee:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 80057f0:	4b18      	ldr	r3, [pc, #96]	@ (8005854 <HAL_I2S_MspInit+0xe0>)
 80057f2:	2202      	movs	r2, #2
 80057f4:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057f6:	4b17      	ldr	r3, [pc, #92]	@ (8005854 <HAL_I2S_MspInit+0xe0>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057fc:	4b15      	ldr	r3, [pc, #84]	@ (8005854 <HAL_I2S_MspInit+0xe0>)
 80057fe:	2200      	movs	r2, #0
 8005800:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005802:	4b14      	ldr	r3, [pc, #80]	@ (8005854 <HAL_I2S_MspInit+0xe0>)
 8005804:	2280      	movs	r2, #128	@ 0x80
 8005806:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005808:	4b12      	ldr	r3, [pc, #72]	@ (8005854 <HAL_I2S_MspInit+0xe0>)
 800580a:	2280      	movs	r2, #128	@ 0x80
 800580c:	0052      	lsls	r2, r2, #1
 800580e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005810:	4b10      	ldr	r3, [pc, #64]	@ (8005854 <HAL_I2S_MspInit+0xe0>)
 8005812:	2280      	movs	r2, #128	@ 0x80
 8005814:	00d2      	lsls	r2, r2, #3
 8005816:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8005818:	4b0e      	ldr	r3, [pc, #56]	@ (8005854 <HAL_I2S_MspInit+0xe0>)
 800581a:	2220      	movs	r2, #32
 800581c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800581e:	4b0d      	ldr	r3, [pc, #52]	@ (8005854 <HAL_I2S_MspInit+0xe0>)
 8005820:	2200      	movs	r2, #0
 8005822:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005824:	4b0b      	ldr	r3, [pc, #44]	@ (8005854 <HAL_I2S_MspInit+0xe0>)
 8005826:	0018      	movs	r0, r3
 8005828:	f004 f9a4 	bl	8009b74 <HAL_DMA_Init>
 800582c:	1e03      	subs	r3, r0, #0
 800582e:	d001      	beq.n	8005834 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8005830:	f000 f970 	bl	8005b14 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a07      	ldr	r2, [pc, #28]	@ (8005854 <HAL_I2S_MspInit+0xe0>)
 8005838:	631a      	str	r2, [r3, #48]	@ 0x30
 800583a:	4b06      	ldr	r3, [pc, #24]	@ (8005854 <HAL_I2S_MspInit+0xe0>)
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8005840:	46c0      	nop			@ (mov r8, r8)
 8005842:	46bd      	mov	sp, r7
 8005844:	b009      	add	sp, #36	@ 0x24
 8005846:	bd90      	pop	{r4, r7, pc}
 8005848:	40003800 	.word	0x40003800
 800584c:	40021000 	.word	0x40021000
 8005850:	50000400 	.word	0x50000400
 8005854:	20000c64 	.word	0x20000c64
 8005858:	40020044 	.word	0x40020044

0800585c <HAL_I2S_MspDeInit>:

void HAL_I2S_MspDeInit(I2S_HandleTypeDef* i2sHandle)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]

  if(i2sHandle->Instance==SPI2)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a0c      	ldr	r2, [pc, #48]	@ (800589c <HAL_I2S_MspDeInit+0x40>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d111      	bne.n	8005892 <HAL_I2S_MspDeInit+0x36>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 800586e:	4b0c      	ldr	r3, [pc, #48]	@ (80058a0 <HAL_I2S_MspDeInit+0x44>)
 8005870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005872:	4b0b      	ldr	r3, [pc, #44]	@ (80058a0 <HAL_I2S_MspDeInit+0x44>)
 8005874:	490b      	ldr	r1, [pc, #44]	@ (80058a4 <HAL_I2S_MspDeInit+0x48>)
 8005876:	400a      	ands	r2, r1
 8005878:	639a      	str	r2, [r3, #56]	@ 0x38
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
 800587a:	23b0      	movs	r3, #176	@ 0xb0
 800587c:	021b      	lsls	r3, r3, #8
 800587e:	4a0a      	ldr	r2, [pc, #40]	@ (80058a8 <HAL_I2S_MspDeInit+0x4c>)
 8005880:	0019      	movs	r1, r3
 8005882:	0010      	movs	r0, r2
 8005884:	f004 fda0 	bl	800a3c8 <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(i2sHandle->hdmarx);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588c:	0018      	movs	r0, r3
 800588e:	f004 f9e9 	bl	8009c64 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 8005892:	46c0      	nop			@ (mov r8, r8)
 8005894:	46bd      	mov	sp, r7
 8005896:	b002      	add	sp, #8
 8005898:	bd80      	pop	{r7, pc}
 800589a:	46c0      	nop			@ (mov r8, r8)
 800589c:	40003800 	.word	0x40003800
 80058a0:	40021000 	.word	0x40021000
 80058a4:	ffffbfff 	.word	0xffffbfff
 80058a8:	50000400 	.word	0x50000400

080058ac <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 80058ac:	b580      	push	{r7, lr}
 80058ae:	af00      	add	r7, sp, #0
  testDone = true;
 80058b0:	4b33      	ldr	r3, [pc, #204]	@ (8005980 <SetTestDone+0xd4>)
 80058b2:	2201      	movs	r2, #1
 80058b4:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1000);
 80058b6:	23fa      	movs	r3, #250	@ 0xfa
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	0018      	movs	r0, r3
 80058bc:	f003 fcda 	bl	8009274 <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 80058c0:	4b30      	ldr	r3, [pc, #192]	@ (8005984 <SetTestDone+0xd8>)
 80058c2:	2201      	movs	r2, #1
 80058c4:	2101      	movs	r1, #1
 80058c6:	0018      	movs	r0, r3
 80058c8:	f004 fe60 	bl	800a58c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 80058cc:	2380      	movs	r3, #128	@ 0x80
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	482c      	ldr	r0, [pc, #176]	@ (8005984 <SetTestDone+0xd8>)
 80058d2:	2201      	movs	r2, #1
 80058d4:	0019      	movs	r1, r3
 80058d6:	f004 fe59 	bl	800a58c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 80058da:	2380      	movs	r3, #128	@ 0x80
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4829      	ldr	r0, [pc, #164]	@ (8005984 <SetTestDone+0xd8>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	0019      	movs	r1, r3
 80058e4:	f004 fe52 	bl	800a58c <HAL_GPIO_WritePin>
  TIM2 -> CCR1 = 40000;
 80058e8:	2380      	movs	r3, #128	@ 0x80
 80058ea:	05db      	lsls	r3, r3, #23
 80058ec:	4a26      	ldr	r2, [pc, #152]	@ (8005988 <SetTestDone+0xdc>)
 80058ee:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 40000;
 80058f0:	2380      	movs	r3, #128	@ 0x80
 80058f2:	05db      	lsls	r3, r3, #23
 80058f4:	4a24      	ldr	r2, [pc, #144]	@ (8005988 <SetTestDone+0xdc>)
 80058f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 0;
 80058f8:	2380      	movs	r3, #128	@ 0x80
 80058fa:	05db      	lsls	r3, r3, #23
 80058fc:	2200      	movs	r2, #0
 80058fe:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 4000;
 8005900:	4b22      	ldr	r3, [pc, #136]	@ (800598c <SetTestDone+0xe0>)
 8005902:	22fa      	movs	r2, #250	@ 0xfa
 8005904:	0112      	lsls	r2, r2, #4
 8005906:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8005908:	4b20      	ldr	r3, [pc, #128]	@ (800598c <SetTestDone+0xe0>)
 800590a:	22fa      	movs	r2, #250	@ 0xfa
 800590c:	0112      	lsls	r2, r2, #4
 800590e:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 0;
 8005910:	4b1e      	ldr	r3, [pc, #120]	@ (800598c <SetTestDone+0xe0>)
 8005912:	2200      	movs	r2, #0
 8005914:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_Delay(1000);
 8005916:	23fa      	movs	r3, #250	@ 0xfa
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	0018      	movs	r0, r3
 800591c:	f003 fcaa 	bl	8009274 <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8005920:	4b18      	ldr	r3, [pc, #96]	@ (8005984 <SetTestDone+0xd8>)
 8005922:	2201      	movs	r2, #1
 8005924:	2101      	movs	r1, #1
 8005926:	0018      	movs	r0, r3
 8005928:	f004 fe30 	bl	800a58c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800592c:	2380      	movs	r3, #128	@ 0x80
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	4814      	ldr	r0, [pc, #80]	@ (8005984 <SetTestDone+0xd8>)
 8005932:	2201      	movs	r2, #1
 8005934:	0019      	movs	r1, r3
 8005936:	f004 fe29 	bl	800a58c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800593a:	2380      	movs	r3, #128	@ 0x80
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4811      	ldr	r0, [pc, #68]	@ (8005984 <SetTestDone+0xd8>)
 8005940:	2201      	movs	r2, #1
 8005942:	0019      	movs	r1, r3
 8005944:	f004 fe22 	bl	800a58c <HAL_GPIO_WritePin>
  TIM2 -> CCR1 = 40000;
 8005948:	2380      	movs	r3, #128	@ 0x80
 800594a:	05db      	lsls	r3, r3, #23
 800594c:	4a0e      	ldr	r2, [pc, #56]	@ (8005988 <SetTestDone+0xdc>)
 800594e:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 40000;
 8005950:	2380      	movs	r3, #128	@ 0x80
 8005952:	05db      	lsls	r3, r3, #23
 8005954:	4a0c      	ldr	r2, [pc, #48]	@ (8005988 <SetTestDone+0xdc>)
 8005956:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 40000;
 8005958:	2380      	movs	r3, #128	@ 0x80
 800595a:	05db      	lsls	r3, r3, #23
 800595c:	4a0a      	ldr	r2, [pc, #40]	@ (8005988 <SetTestDone+0xdc>)
 800595e:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 4000;
 8005960:	4b0a      	ldr	r3, [pc, #40]	@ (800598c <SetTestDone+0xe0>)
 8005962:	22fa      	movs	r2, #250	@ 0xfa
 8005964:	0112      	lsls	r2, r2, #4
 8005966:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8005968:	4b08      	ldr	r3, [pc, #32]	@ (800598c <SetTestDone+0xe0>)
 800596a:	22fa      	movs	r2, #250	@ 0xfa
 800596c:	0112      	lsls	r2, r2, #4
 800596e:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8005970:	4b06      	ldr	r3, [pc, #24]	@ (800598c <SetTestDone+0xe0>)
 8005972:	22fa      	movs	r2, #250	@ 0xfa
 8005974:	0112      	lsls	r2, r2, #4
 8005976:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 8005978:	46c0      	nop			@ (mov r8, r8)
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	46c0      	nop			@ (mov r8, r8)
 8005980:	20000cac 	.word	0x20000cac
 8005984:	50000400 	.word	0x50000400
 8005988:	00009c40 	.word	0x00009c40
 800598c:	40000400 	.word	0x40000400

08005990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005996:	f003 fbfd 	bl	8009194 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800599a:	f000 f849 	bl	8005a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800599e:	f7ff fbef 	bl	8005180 <MX_GPIO_Init>
  MX_DMA_Init();
 80059a2:	f7ff fb67 	bl	8005074 <MX_DMA_Init>
  MX_I2C1_Init();
 80059a6:	f7ff fd63 	bl	8005470 <MX_I2C1_Init>
  MX_I2S2_Init();
 80059aa:	f7ff febb 	bl	8005724 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 80059ae:	f002 fea7 	bl	8008700 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80059b2:	f7ff fd9d 	bl	80054f0 <MX_I2C2_Init>
  MX_TIM2_Init();
 80059b6:	f002 fd25 	bl	8008404 <MX_TIM2_Init>
  MX_TIM3_Init();
 80059ba:	f002 fd97 	bl	80084ec <MX_TIM3_Init>
  MX_USART4_UART_Init();
 80059be:	f002 fed3 	bl	8008768 <MX_USART4_UART_Init>
  MX_ADC_Init();
 80059c2:	f7ff faa5 	bl	8004f10 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 80059c6:	f00f fd13 	bl	80153f0 <MX_USB_DEVICE_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 80059ca:	4a12      	ldr	r2, [pc, #72]	@ (8005a14 <main+0x84>)
 80059cc:	4b12      	ldr	r3, [pc, #72]	@ (8005a18 <main+0x88>)
 80059ce:	0011      	movs	r1, r2
 80059d0:	0018      	movs	r0, r3
 80059d2:	f7ff fcd3 	bl	800537c <GPIO_InitPWMLEDs>
  uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
 80059d6:	f003 fc43 	bl	8009260 <HAL_GetTick>
 80059da:	0003      	movs	r3, r0
 80059dc:	22fa      	movs	r2, #250	@ 0xfa
 80059de:	0092      	lsls	r2, r2, #2
 80059e0:	4694      	mov	ip, r2
 80059e2:	4463      	add	r3, ip
 80059e4:	607b      	str	r3, [r7, #4]
  SetVerboseLevel(VERBOSE_ALL);
 80059e6:	2003      	movs	r0, #3
 80059e8:	f003 f8be 	bl	8008b68 <SetVerboseLevel>
  BinaryReleaseInfo();
 80059ec:	f003 f8d4 	bl	8008b98 <BinaryReleaseInfo>
  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 80059f0:	4b0a      	ldr	r3, [pc, #40]	@ (8005a1c <main+0x8c>)
 80059f2:	4a0b      	ldr	r2, [pc, #44]	@ (8005a20 <main+0x90>)
 80059f4:	490b      	ldr	r1, [pc, #44]	@ (8005a24 <main+0x94>)
 80059f6:	480c      	ldr	r0, [pc, #48]	@ (8005a28 <main+0x98>)
 80059f8:	f7ff fb62 	bl	80050c0 <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone){
 80059fc:	4b0b      	ldr	r3, [pc, #44]	@ (8005a2c <main+0x9c>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d004      	beq.n	8005a0e <main+0x7e>
      UpkeepGadget();
 8005a04:	f7ff fb89 	bl	800511a <UpkeepGadget>
      ESP_Upkeep();
 8005a08:	f7ff f808 	bl	8004a1c <ESP_Upkeep>
 8005a0c:	e7f6      	b.n	80059fc <main+0x6c>
    }
    else{
      Gadget_Test();
 8005a0e:	f7ff fb7d 	bl	800510c <Gadget_Test>
    if(testDone){
 8005a12:	e7f3      	b.n	80059fc <main+0x6c>
 8005a14:	20002658 	.word	0x20002658
 8005a18:	20002618 	.word	0x20002618
 8005a1c:	20000a94 	.word	0x20000a94
 8005a20:	20002750 	.word	0x20002750
 8005a24:	20000c28 	.word	0x20000c28
 8005a28:	20000af0 	.word	0x20000af0
 8005a2c:	20000cac 	.word	0x20000cac

08005a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005a30:	b590      	push	{r4, r7, lr}
 8005a32:	b09d      	sub	sp, #116	@ 0x74
 8005a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005a36:	2438      	movs	r4, #56	@ 0x38
 8005a38:	193b      	adds	r3, r7, r4
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	2338      	movs	r3, #56	@ 0x38
 8005a3e:	001a      	movs	r2, r3
 8005a40:	2100      	movs	r1, #0
 8005a42:	f010 ffb7 	bl	80169b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005a46:	2324      	movs	r3, #36	@ 0x24
 8005a48:	18fb      	adds	r3, r7, r3
 8005a4a:	0018      	movs	r0, r3
 8005a4c:	2314      	movs	r3, #20
 8005a4e:	001a      	movs	r2, r3
 8005a50:	2100      	movs	r1, #0
 8005a52:	f010 ffaf 	bl	80169b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005a56:	003b      	movs	r3, r7
 8005a58:	0018      	movs	r0, r3
 8005a5a:	2324      	movs	r3, #36	@ 0x24
 8005a5c:	001a      	movs	r2, r3
 8005a5e:	2100      	movs	r1, #0
 8005a60:	f010 ffa8 	bl	80169b4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a64:	4b29      	ldr	r3, [pc, #164]	@ (8005b0c <SystemClock_Config+0xdc>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a29      	ldr	r2, [pc, #164]	@ (8005b10 <SystemClock_Config+0xe0>)
 8005a6a:	401a      	ands	r2, r3
 8005a6c:	4b27      	ldr	r3, [pc, #156]	@ (8005b0c <SystemClock_Config+0xdc>)
 8005a6e:	2180      	movs	r1, #128	@ 0x80
 8005a70:	0109      	lsls	r1, r1, #4
 8005a72:	430a      	orrs	r2, r1
 8005a74:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8005a76:	0021      	movs	r1, r4
 8005a78:	187b      	adds	r3, r7, r1
 8005a7a:	2222      	movs	r2, #34	@ 0x22
 8005a7c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005a7e:	187b      	adds	r3, r7, r1
 8005a80:	2201      	movs	r2, #1
 8005a82:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005a84:	187b      	adds	r3, r7, r1
 8005a86:	2210      	movs	r2, #16
 8005a88:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005a8a:	187b      	adds	r3, r7, r1
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005a90:	187b      	adds	r3, r7, r1
 8005a92:	2200      	movs	r2, #0
 8005a94:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a96:	187b      	adds	r3, r7, r1
 8005a98:	0018      	movs	r0, r3
 8005a9a:	f008 ff45 	bl	800e928 <HAL_RCC_OscConfig>
 8005a9e:	1e03      	subs	r3, r0, #0
 8005aa0:	d001      	beq.n	8005aa6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8005aa2:	f000 f837 	bl	8005b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005aa6:	2124      	movs	r1, #36	@ 0x24
 8005aa8:	187b      	adds	r3, r7, r1
 8005aaa:	220f      	movs	r2, #15
 8005aac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8005aae:	187b      	adds	r3, r7, r1
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ab4:	187b      	adds	r3, r7, r1
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005aba:	187b      	adds	r3, r7, r1
 8005abc:	2200      	movs	r2, #0
 8005abe:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005ac0:	187b      	adds	r3, r7, r1
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005ac6:	187b      	adds	r3, r7, r1
 8005ac8:	2100      	movs	r1, #0
 8005aca:	0018      	movs	r0, r3
 8005acc:	f009 fb00 	bl	800f0d0 <HAL_RCC_ClockConfig>
 8005ad0:	1e03      	subs	r3, r0, #0
 8005ad2:	d001      	beq.n	8005ad8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8005ad4:	f000 f81e 	bl	8005b14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8005ad8:	003b      	movs	r3, r7
 8005ada:	2249      	movs	r2, #73	@ 0x49
 8005adc:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005ade:	003b      	movs	r3, r7
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005ae4:	003b      	movs	r3, r7
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	615a      	str	r2, [r3, #20]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8005aea:	003b      	movs	r3, r7
 8005aec:	2280      	movs	r2, #128	@ 0x80
 8005aee:	04d2      	lsls	r2, r2, #19
 8005af0:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005af2:	003b      	movs	r3, r7
 8005af4:	0018      	movs	r0, r3
 8005af6:	f009 fd0f 	bl	800f518 <HAL_RCCEx_PeriphCLKConfig>
 8005afa:	1e03      	subs	r3, r0, #0
 8005afc:	d001      	beq.n	8005b02 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8005afe:	f000 f809 	bl	8005b14 <Error_Handler>
  }
}
 8005b02:	46c0      	nop			@ (mov r8, r8)
 8005b04:	46bd      	mov	sp, r7
 8005b06:	b01d      	add	sp, #116	@ 0x74
 8005b08:	bd90      	pop	{r4, r7, pc}
 8005b0a:	46c0      	nop			@ (mov r8, r8)
 8005b0c:	40007000 	.word	0x40007000
 8005b10:	ffffe7ff 	.word	0xffffe7ff

08005b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005b18:	b672      	cpsid	i
}
 8005b1a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005b1c:	46c0      	nop			@ (mov r8, r8)
 8005b1e:	e7fd      	b.n	8005b1c <Error_Handler+0x8>

08005b20 <HT_StartMeasurementWrapper>:
static MeasurementTested MeasTest;
static MeasurementState MeasState = MEAS_STATE_INIT;
static uint8_t CurrentMeasurementIndex = 0;
static uint32_t MeasStamp;

static void HT_StartMeasurementWrapper(void) {
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8005b24:	f7ff fc85 	bl	8005432 <HT_StartMeasurement>
}
 8005b28:	46c0      	nop			@ (mov r8, r8)
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
	...

08005b30 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8005b34:	4a04      	ldr	r2, [pc, #16]	@ (8005b48 <HT_IsMeasurementDoneWrapper+0x18>)
 8005b36:	4b05      	ldr	r3, [pc, #20]	@ (8005b4c <HT_IsMeasurementDoneWrapper+0x1c>)
 8005b38:	0011      	movs	r1, r2
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	f7ff fc80 	bl	8005440 <HT_GetMeasurementValues>
 8005b40:	0003      	movs	r3, r0
}
 8005b42:	0018      	movs	r0, r3
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	20000cb4 	.word	0x20000cb4
 8005b4c:	20000cb0 	.word	0x20000cb0

08005b50 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8005b54:	f7ff faf7 	bl	8005146 <Gas_StartMeasurement>
}
 8005b58:	46c0      	nop			@ (mov r8, r8)
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
	...

08005b60 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8005b64:	4b03      	ldr	r3, [pc, #12]	@ (8005b74 <VOC_IsMeasurementDoneWrapper+0x14>)
 8005b66:	0018      	movs	r0, r3
 8005b68:	f7ff faf4 	bl	8005154 <Gas_GetMeasurementValues>
 8005b6c:	0003      	movs	r3, r0
}
 8005b6e:	0018      	movs	r0, r3
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	20000cb8 	.word	0x20000cb8

08005b78 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
}
 8005b7c:	46c0      	nop			@ (mov r8, r8)
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 8005b82:	b580      	push	{r7, lr}
 8005b84:	af00      	add	r7, sp, #0
  return true;
 8005b86:	2301      	movs	r3, #1
}
 8005b88:	0018      	movs	r0, r3
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <MIC_StartMeasurementWrapper>:

static void MIC_StartMeasurementWrapper(void) {
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	af00      	add	r7, sp, #0
  MIC_Start(SAMPLE_RATE_8K, NR_SAMPLES_128); // Dont init like this.
 8005b92:	23fa      	movs	r3, #250	@ 0xfa
 8005b94:	015b      	lsls	r3, r3, #5
 8005b96:	2180      	movs	r1, #128	@ 0x80
 8005b98:	0018      	movs	r0, r3
 8005b9a:	f000 fb9f 	bl	80062dc <MIC_Start>
}
 8005b9e:	46c0      	nop			@ (mov r8, r8)
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
  return MIC_MeasurementDone();
 8005ba8:	f000 fe78 	bl	800689c <MIC_MeasurementDone>
 8005bac:	0003      	movs	r3, r0
}
 8005bae:	0018      	movs	r0, r3
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <Meas_TestStart>:
void Meas_TestStart(){
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	af00      	add	r7, sp, #0
  MIC_StartMeasurementWrapper();
 8005bb8:	f7ff ffe9 	bl	8005b8e <MIC_StartMeasurementWrapper>
}
 8005bbc:	46c0      	nop			@ (mov r8, r8)
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <MIC_IsTestMeasurementDoneWrapper>:
static bool MIC_IsTestMeasurementDoneWrapper(void) {
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 8005bc6:	f000 fe87 	bl	80068d8 <MIC_TestMeasurementDone>
 8005bca:	0003      	movs	r3, r0
}
 8005bcc:	0018      	movs	r0, r3
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <testInit>:
void testInit(){
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 8005bd8:	4b07      	ldr	r3, [pc, #28]	@ (8005bf8 <testInit+0x24>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 8005bde:	4b06      	ldr	r3, [pc, #24]	@ (8005bf8 <testInit+0x24>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	709a      	strb	r2, [r3, #2]
  MeasTest.HT_Tested = false;
 8005be4:	4b04      	ldr	r3, [pc, #16]	@ (8005bf8 <testInit+0x24>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 8005bea:	4b03      	ldr	r3, [pc, #12]	@ (8005bf8 <testInit+0x24>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	705a      	strb	r2, [r3, #1]
}
 8005bf0:	46c0      	nop			@ (mov r8, r8)
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	46c0      	nop			@ (mov r8, r8)
 8005bf8:	20000d04 	.word	0x20000d04

08005bfc <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 8005bfc:	b5b0      	push	{r4, r5, r7, lr}
 8005bfe:	b096      	sub	sp, #88	@ 0x58
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
  MeasState = MEAS_STATE_INIT;
 8005c08:	4b84      	ldr	r3, [pc, #528]	@ (8005e1c <Meas_Init+0x220>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	701a      	strb	r2, [r3, #0]
  testInit();
 8005c0e:	f7ff ffe1 	bl	8005bd4 <testInit>
  batteryInit(ADC_HANDLER);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	0018      	movs	r0, r3
 8005c16:	f7fd fc99 	bl	800354c <batteryInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 8005c1a:	4b81      	ldr	r3, [pc, #516]	@ (8005e20 <Meas_Init+0x224>)
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d103      	bne.n	8005c2a <Meas_Init+0x2e>
 8005c22:	4b7f      	ldr	r3, [pc, #508]	@ (8005e20 <Meas_Init+0x224>)
 8005c24:	785b      	ldrb	r3, [r3, #1]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d072      	beq.n	8005d10 <Meas_Init+0x114>
    I2CSensors_Init(sensorI2C);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	f7ff f8fd 	bl	8004e2c <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 8005c32:	f7ff fc15 	bl	8005460 <HT_DeviceConnected>
 8005c36:	0003      	movs	r3, r0
 8005c38:	001a      	movs	r2, r3
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	4053      	eors	r3, r2
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00c      	beq.n	8005c5e <Meas_Init+0x62>
       Error("Humidity / Temperature sensor NOT connected!");
 8005c44:	4a77      	ldr	r2, [pc, #476]	@ (8005e24 <Meas_Init+0x228>)
 8005c46:	4b78      	ldr	r3, [pc, #480]	@ (8005e28 <Meas_Init+0x22c>)
 8005c48:	0019      	movs	r1, r3
 8005c4a:	2001      	movs	r0, #1
 8005c4c:	f002 ff10 	bl	8008a70 <CreateLine>
       MeasTest.HT_Tested = false;
 8005c50:	4b76      	ldr	r3, [pc, #472]	@ (8005e2c <Meas_Init+0x230>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 8005c56:	4b72      	ldr	r3, [pc, #456]	@ (8005e20 <Meas_Init+0x224>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	701a      	strb	r2, [r3, #0]
 8005c5c:	e008      	b.n	8005c70 <Meas_Init+0x74>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
      MeasTest.HT_Tested = true;
 8005c5e:	4b73      	ldr	r3, [pc, #460]	@ (8005e2c <Meas_Init+0x230>)
 8005c60:	2201      	movs	r2, #1
 8005c62:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 8005c64:	4a72      	ldr	r2, [pc, #456]	@ (8005e30 <Meas_Init+0x234>)
 8005c66:	4b73      	ldr	r3, [pc, #460]	@ (8005e34 <Meas_Init+0x238>)
 8005c68:	0019      	movs	r1, r3
 8005c6a:	2003      	movs	r0, #3
 8005c6c:	f002 ff00 	bl	8008a70 <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 8005c70:	f7ff fa7d 	bl	800516e <Gas_DeviceConnected>
 8005c74:	0003      	movs	r3, r0
 8005c76:	001a      	movs	r2, r3
 8005c78:	2301      	movs	r3, #1
 8005c7a:	4053      	eors	r3, r2
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00c      	beq.n	8005c9c <Meas_Init+0xa0>
      MeasTest.VOC_Tested = false;
 8005c82:	4b6a      	ldr	r3, [pc, #424]	@ (8005e2c <Meas_Init+0x230>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 8005c88:	4a6b      	ldr	r2, [pc, #428]	@ (8005e38 <Meas_Init+0x23c>)
 8005c8a:	4b67      	ldr	r3, [pc, #412]	@ (8005e28 <Meas_Init+0x22c>)
 8005c8c:	0019      	movs	r1, r3
 8005c8e:	2001      	movs	r0, #1
 8005c90:	f002 feee 	bl	8008a70 <CreateLine>
       // SGP Device is NOT connected, turning led on RED.
//       HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
//       HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//       HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
       MeasEnabled.VOC_measurementEnabled = false;
 8005c94:	4b62      	ldr	r3, [pc, #392]	@ (8005e20 <Meas_Init+0x224>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	705a      	strb	r2, [r3, #1]
 8005c9a:	e008      	b.n	8005cae <Meas_Init+0xb2>
    }else{
      MeasTest.VOC_Tested = true;
 8005c9c:	4b63      	ldr	r3, [pc, #396]	@ (8005e2c <Meas_Init+0x230>)
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 8005ca2:	4a66      	ldr	r2, [pc, #408]	@ (8005e3c <Meas_Init+0x240>)
 8005ca4:	4b63      	ldr	r3, [pc, #396]	@ (8005e34 <Meas_Init+0x238>)
 8005ca6:	0019      	movs	r1, r3
 8005ca8:	2003      	movs	r0, #3
 8005caa:	f002 fee1 	bl	8008a70 <CreateLine>
      // HT Device is connected, turning led on GREEN.
//      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
//      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 8005cae:	4b5f      	ldr	r3, [pc, #380]	@ (8005e2c <Meas_Init+0x230>)
 8005cb0:	785b      	ldrb	r3, [r3, #1]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d018      	beq.n	8005ce8 <Meas_Init+0xec>
 8005cb6:	4b5d      	ldr	r3, [pc, #372]	@ (8005e2c <Meas_Init+0x230>)
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d014      	beq.n	8005ce8 <Meas_Init+0xec>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8005cbe:	4b60      	ldr	r3, [pc, #384]	@ (8005e40 <Meas_Init+0x244>)
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	0018      	movs	r0, r3
 8005cc6:	f004 fc61 	bl	800a58c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8005cca:	2380      	movs	r3, #128	@ 0x80
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	485c      	ldr	r0, [pc, #368]	@ (8005e40 <Meas_Init+0x244>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	0019      	movs	r1, r3
 8005cd4:	f004 fc5a 	bl	800a58c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8005cd8:	2380      	movs	r3, #128	@ 0x80
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4858      	ldr	r0, [pc, #352]	@ (8005e40 <Meas_Init+0x244>)
 8005cde:	2201      	movs	r2, #1
 8005ce0:	0019      	movs	r1, r3
 8005ce2:	f004 fc53 	bl	800a58c <HAL_GPIO_WritePin>
 8005ce6:	e013      	b.n	8005d10 <Meas_Init+0x114>
    }
    else{
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8005ce8:	4b55      	ldr	r3, [pc, #340]	@ (8005e40 <Meas_Init+0x244>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	2101      	movs	r1, #1
 8005cee:	0018      	movs	r0, r3
 8005cf0:	f004 fc4c 	bl	800a58c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8005cf4:	2380      	movs	r3, #128	@ 0x80
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	4851      	ldr	r0, [pc, #324]	@ (8005e40 <Meas_Init+0x244>)
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	0019      	movs	r1, r3
 8005cfe:	f004 fc45 	bl	800a58c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8005d02:	2380      	movs	r3, #128	@ 0x80
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	484e      	ldr	r0, [pc, #312]	@ (8005e40 <Meas_Init+0x244>)
 8005d08:	2201      	movs	r2, #1
 8005d0a:	0019      	movs	r1, r3
 8005d0c:	f004 fc3e 	bl	800a58c <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 8005d10:	4b43      	ldr	r3, [pc, #268]	@ (8005e20 <Meas_Init+0x224>)
 8005d12:	78db      	ldrb	r3, [r3, #3]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <Meas_Init+0x128>
    MIC_Init(micI2s);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	f000 fa6a 	bl	80061f4 <MIC_Init>
    Meas_TestStart();
 8005d20:	f7ff ff48 	bl	8005bb4 <Meas_TestStart>
  }
  uint8_t offset = 0;
 8005d24:	2557      	movs	r5, #87	@ 0x57
 8005d26:	197b      	adds	r3, r7, r5
 8005d28:	2200      	movs	r2, #0
 8005d2a:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 8005d2c:	197b      	adds	r3, r7, r5
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	197a      	adds	r2, r7, r5
 8005d32:	1c59      	adds	r1, r3, #1
 8005d34:	7011      	strb	r1, [r2, #0]
 8005d36:	4a3a      	ldr	r2, [pc, #232]	@ (8005e20 <Meas_Init+0x224>)
 8005d38:	7814      	ldrb	r4, [r2, #0]
 8005d3a:	4a42      	ldr	r2, [pc, #264]	@ (8005e44 <Meas_Init+0x248>)
 8005d3c:	0119      	lsls	r1, r3, #4
 8005d3e:	4842      	ldr	r0, [pc, #264]	@ (8005e48 <Meas_Init+0x24c>)
 8005d40:	5088      	str	r0, [r1, r2]
 8005d42:	4940      	ldr	r1, [pc, #256]	@ (8005e44 <Meas_Init+0x248>)
 8005d44:	011a      	lsls	r2, r3, #4
 8005d46:	188a      	adds	r2, r1, r2
 8005d48:	3204      	adds	r2, #4
 8005d4a:	4940      	ldr	r1, [pc, #256]	@ (8005e4c <Meas_Init+0x250>)
 8005d4c:	6011      	str	r1, [r2, #0]
 8005d4e:	493d      	ldr	r1, [pc, #244]	@ (8005e44 <Meas_Init+0x248>)
 8005d50:	011a      	lsls	r2, r3, #4
 8005d52:	188a      	adds	r2, r1, r2
 8005d54:	3208      	adds	r2, #8
 8005d56:	493e      	ldr	r1, [pc, #248]	@ (8005e50 <Meas_Init+0x254>)
 8005d58:	6011      	str	r1, [r2, #0]
 8005d5a:	4a3a      	ldr	r2, [pc, #232]	@ (8005e44 <Meas_Init+0x248>)
 8005d5c:	011b      	lsls	r3, r3, #4
 8005d5e:	18d3      	adds	r3, r2, r3
 8005d60:	330c      	adds	r3, #12
 8005d62:	1c22      	adds	r2, r4, #0
 8005d64:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 8005d66:	197b      	adds	r3, r7, r5
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	197a      	adds	r2, r7, r5
 8005d6c:	1c59      	adds	r1, r3, #1
 8005d6e:	7011      	strb	r1, [r2, #0]
 8005d70:	4a2b      	ldr	r2, [pc, #172]	@ (8005e20 <Meas_Init+0x224>)
 8005d72:	7854      	ldrb	r4, [r2, #1]
 8005d74:	4a33      	ldr	r2, [pc, #204]	@ (8005e44 <Meas_Init+0x248>)
 8005d76:	0119      	lsls	r1, r3, #4
 8005d78:	4836      	ldr	r0, [pc, #216]	@ (8005e54 <Meas_Init+0x258>)
 8005d7a:	5088      	str	r0, [r1, r2]
 8005d7c:	4931      	ldr	r1, [pc, #196]	@ (8005e44 <Meas_Init+0x248>)
 8005d7e:	011a      	lsls	r2, r3, #4
 8005d80:	188a      	adds	r2, r1, r2
 8005d82:	3204      	adds	r2, #4
 8005d84:	4934      	ldr	r1, [pc, #208]	@ (8005e58 <Meas_Init+0x25c>)
 8005d86:	6011      	str	r1, [r2, #0]
 8005d88:	492e      	ldr	r1, [pc, #184]	@ (8005e44 <Meas_Init+0x248>)
 8005d8a:	011a      	lsls	r2, r3, #4
 8005d8c:	188a      	adds	r2, r1, r2
 8005d8e:	3208      	adds	r2, #8
 8005d90:	4932      	ldr	r1, [pc, #200]	@ (8005e5c <Meas_Init+0x260>)
 8005d92:	6011      	str	r1, [r2, #0]
 8005d94:	4a2b      	ldr	r2, [pc, #172]	@ (8005e44 <Meas_Init+0x248>)
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	18d3      	adds	r3, r2, r3
 8005d9a:	330c      	adds	r3, #12
 8005d9c:	1c22      	adds	r2, r4, #0
 8005d9e:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 8005da0:	197b      	adds	r3, r7, r5
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	197a      	adds	r2, r7, r5
 8005da6:	1c59      	adds	r1, r3, #1
 8005da8:	7011      	strb	r1, [r2, #0]
 8005daa:	4a1d      	ldr	r2, [pc, #116]	@ (8005e20 <Meas_Init+0x224>)
 8005dac:	7894      	ldrb	r4, [r2, #2]
 8005dae:	4a25      	ldr	r2, [pc, #148]	@ (8005e44 <Meas_Init+0x248>)
 8005db0:	0119      	lsls	r1, r3, #4
 8005db2:	482b      	ldr	r0, [pc, #172]	@ (8005e60 <Meas_Init+0x264>)
 8005db4:	5088      	str	r0, [r1, r2]
 8005db6:	4923      	ldr	r1, [pc, #140]	@ (8005e44 <Meas_Init+0x248>)
 8005db8:	011a      	lsls	r2, r3, #4
 8005dba:	188a      	adds	r2, r1, r2
 8005dbc:	3204      	adds	r2, #4
 8005dbe:	4929      	ldr	r1, [pc, #164]	@ (8005e64 <Meas_Init+0x268>)
 8005dc0:	6011      	str	r1, [r2, #0]
 8005dc2:	4920      	ldr	r1, [pc, #128]	@ (8005e44 <Meas_Init+0x248>)
 8005dc4:	011a      	lsls	r2, r3, #4
 8005dc6:	188a      	adds	r2, r1, r2
 8005dc8:	3208      	adds	r2, #8
 8005dca:	4927      	ldr	r1, [pc, #156]	@ (8005e68 <Meas_Init+0x26c>)
 8005dcc:	6011      	str	r1, [r2, #0]
 8005dce:	4a1d      	ldr	r2, [pc, #116]	@ (8005e44 <Meas_Init+0x248>)
 8005dd0:	011b      	lsls	r3, r3, #4
 8005dd2:	18d3      	adds	r3, r2, r3
 8005dd4:	330c      	adds	r3, #12
 8005dd6:	1c22      	adds	r2, r4, #0
 8005dd8:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
 8005dda:	197b      	adds	r3, r7, r5
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	197a      	adds	r2, r7, r5
 8005de0:	1c59      	adds	r1, r3, #1
 8005de2:	7011      	strb	r1, [r2, #0]
 8005de4:	4a0e      	ldr	r2, [pc, #56]	@ (8005e20 <Meas_Init+0x224>)
 8005de6:	78d4      	ldrb	r4, [r2, #3]
 8005de8:	4a16      	ldr	r2, [pc, #88]	@ (8005e44 <Meas_Init+0x248>)
 8005dea:	0119      	lsls	r1, r3, #4
 8005dec:	481f      	ldr	r0, [pc, #124]	@ (8005e6c <Meas_Init+0x270>)
 8005dee:	5088      	str	r0, [r1, r2]
 8005df0:	4914      	ldr	r1, [pc, #80]	@ (8005e44 <Meas_Init+0x248>)
 8005df2:	011a      	lsls	r2, r3, #4
 8005df4:	188a      	adds	r2, r1, r2
 8005df6:	3204      	adds	r2, #4
 8005df8:	491d      	ldr	r1, [pc, #116]	@ (8005e70 <Meas_Init+0x274>)
 8005dfa:	6011      	str	r1, [r2, #0]
 8005dfc:	4911      	ldr	r1, [pc, #68]	@ (8005e44 <Meas_Init+0x248>)
 8005dfe:	011a      	lsls	r2, r3, #4
 8005e00:	188a      	adds	r2, r1, r2
 8005e02:	3208      	adds	r2, #8
 8005e04:	491b      	ldr	r1, [pc, #108]	@ (8005e74 <Meas_Init+0x278>)
 8005e06:	6011      	str	r1, [r2, #0]
 8005e08:	4a0e      	ldr	r2, [pc, #56]	@ (8005e44 <Meas_Init+0x248>)
 8005e0a:	011b      	lsls	r3, r3, #4
 8005e0c:	18d3      	adds	r3, r2, r3
 8005e0e:	330c      	adds	r3, #12
 8005e10:	1c22      	adds	r2, r4, #0
 8005e12:	701a      	strb	r2, [r3, #0]
}
 8005e14:	46c0      	nop			@ (mov r8, r8)
 8005e16:	46bd      	mov	sp, r7
 8005e18:	b016      	add	sp, #88	@ 0x58
 8005e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8005e1c:	20000d08 	.word	0x20000d08
 8005e20:	20000d00 	.word	0x20000d00
 8005e24:	08019c64 	.word	0x08019c64
 8005e28:	08019c94 	.word	0x08019c94
 8005e2c:	20000d04 	.word	0x20000d04
 8005e30:	08019c98 	.word	0x08019c98
 8005e34:	08019cc4 	.word	0x08019cc4
 8005e38:	08019cc8 	.word	0x08019cc8
 8005e3c:	08019ce4 	.word	0x08019ce4
 8005e40:	50000400 	.word	0x50000400
 8005e44:	20000cc0 	.word	0x20000cc0
 8005e48:	08005b21 	.word	0x08005b21
 8005e4c:	08005b31 	.word	0x08005b31
 8005e50:	20000cbc 	.word	0x20000cbc
 8005e54:	08005b51 	.word	0x08005b51
 8005e58:	08005b61 	.word	0x08005b61
 8005e5c:	20000cbd 	.word	0x20000cbd
 8005e60:	08005b79 	.word	0x08005b79
 8005e64:	08005b83 	.word	0x08005b83
 8005e68:	20000cbe 	.word	0x20000cbe
 8005e6c:	08005b8f 	.word	0x08005b8f
 8005e70:	08005ba5 	.word	0x08005ba5
 8005e74:	20000cbf 	.word	0x20000cbf

08005e78 <StartMeasurements>:

void StartMeasurements(void) {
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005e7c:	4b10      	ldr	r3, [pc, #64]	@ (8005ec0 <StartMeasurements+0x48>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	701a      	strb	r2, [r3, #0]
 8005e82:	e015      	b.n	8005eb0 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8005e84:	4b0e      	ldr	r3, [pc, #56]	@ (8005ec0 <StartMeasurements+0x48>)
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	4a0e      	ldr	r2, [pc, #56]	@ (8005ec4 <StartMeasurements+0x4c>)
 8005e8a:	011b      	lsls	r3, r3, #4
 8005e8c:	18d3      	adds	r3, r2, r3
 8005e8e:	330c      	adds	r3, #12
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d006      	beq.n	8005ea4 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 8005e96:	4b0a      	ldr	r3, [pc, #40]	@ (8005ec0 <StartMeasurements+0x48>)
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	001a      	movs	r2, r3
 8005e9c:	4b09      	ldr	r3, [pc, #36]	@ (8005ec4 <StartMeasurements+0x4c>)
 8005e9e:	0112      	lsls	r2, r2, #4
 8005ea0:	58d3      	ldr	r3, [r2, r3]
 8005ea2:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005ea4:	4b06      	ldr	r3, [pc, #24]	@ (8005ec0 <StartMeasurements+0x48>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	4b04      	ldr	r3, [pc, #16]	@ (8005ec0 <StartMeasurements+0x48>)
 8005eae:	701a      	strb	r2, [r3, #0]
 8005eb0:	4b03      	ldr	r3, [pc, #12]	@ (8005ec0 <StartMeasurements+0x48>)
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	2b03      	cmp	r3, #3
 8005eb6:	d9e5      	bls.n	8005e84 <StartMeasurements+0xc>
    }
  }
}
 8005eb8:	46c0      	nop			@ (mov r8, r8)
 8005eba:	46c0      	nop			@ (mov r8, r8)
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	20000d09 	.word	0x20000d09
 8005ec4:	20000cc0 	.word	0x20000cc0

08005ec8 <ResetMeasurements>:

void ResetMeasurements(void) {
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 8005ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8005efc <ResetMeasurements+0x34>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 8005ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8005efc <ResetMeasurements+0x34>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 8005ed8:	4b08      	ldr	r3, [pc, #32]	@ (8005efc <ResetMeasurements+0x34>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 8005ede:	4b07      	ldr	r3, [pc, #28]	@ (8005efc <ResetMeasurements+0x34>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8005ee4:	4b05      	ldr	r3, [pc, #20]	@ (8005efc <ResetMeasurements+0x34>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 8005eea:	4b04      	ldr	r3, [pc, #16]	@ (8005efc <ResetMeasurements+0x34>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 8005ef0:	4b02      	ldr	r3, [pc, #8]	@ (8005efc <ResetMeasurements+0x34>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	73da      	strb	r2, [r3, #15]
}
 8005ef6:	46c0      	nop			@ (mov r8, r8)
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	20000cb0 	.word	0x20000cb0

08005f00 <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005f04:	4b18      	ldr	r3, [pc, #96]	@ (8005f68 <MeasurementsCompleted+0x68>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	701a      	strb	r2, [r3, #0]
 8005f0a:	e024      	b.n	8005f56 <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8005f0c:	4b16      	ldr	r3, [pc, #88]	@ (8005f68 <MeasurementsCompleted+0x68>)
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	4a16      	ldr	r2, [pc, #88]	@ (8005f6c <MeasurementsCompleted+0x6c>)
 8005f12:	011b      	lsls	r3, r3, #4
 8005f14:	18d3      	adds	r3, r2, r3
 8005f16:	330c      	adds	r3, #12
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d015      	beq.n	8005f4a <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 8005f1e:	4b12      	ldr	r3, [pc, #72]	@ (8005f68 <MeasurementsCompleted+0x68>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	4a12      	ldr	r2, [pc, #72]	@ (8005f6c <MeasurementsCompleted+0x6c>)
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	18d3      	adds	r3, r2, r3
 8005f28:	3304      	adds	r3, #4
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4798      	blx	r3
 8005f2e:	1e03      	subs	r3, r0, #0
 8005f30:	d009      	beq.n	8005f46 <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8005f32:	4b0d      	ldr	r3, [pc, #52]	@ (8005f68 <MeasurementsCompleted+0x68>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	4a0d      	ldr	r2, [pc, #52]	@ (8005f6c <MeasurementsCompleted+0x6c>)
 8005f38:	011b      	lsls	r3, r3, #4
 8005f3a:	18d3      	adds	r3, r2, r3
 8005f3c:	3308      	adds	r3, #8
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2201      	movs	r2, #1
 8005f42:	701a      	strb	r2, [r3, #0]
 8005f44:	e001      	b.n	8005f4a <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8005f46:	2300      	movs	r3, #0
 8005f48:	e00a      	b.n	8005f60 <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005f4a:	4b07      	ldr	r3, [pc, #28]	@ (8005f68 <MeasurementsCompleted+0x68>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	4b05      	ldr	r3, [pc, #20]	@ (8005f68 <MeasurementsCompleted+0x68>)
 8005f54:	701a      	strb	r2, [r3, #0]
 8005f56:	4b04      	ldr	r3, [pc, #16]	@ (8005f68 <MeasurementsCompleted+0x68>)
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	2b03      	cmp	r3, #3
 8005f5c:	d9d6      	bls.n	8005f0c <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 8005f5e:	2301      	movs	r3, #1
}
 8005f60:	0018      	movs	r0, r3
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	46c0      	nop			@ (mov r8, r8)
 8005f68:	20000d09 	.word	0x20000d09
 8005f6c:	20000cc0 	.word	0x20000cc0

08005f70 <Meas_Upkeep>:

void Meas_Upkeep(void) {
 8005f70:	b5b0      	push	{r4, r5, r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af04      	add	r7, sp, #16
  switch(MeasState) {
 8005f76:	4b3d      	ldr	r3, [pc, #244]	@ (800606c <Meas_Upkeep+0xfc>)
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	2b06      	cmp	r3, #6
 8005f7c:	d86c      	bhi.n	8006058 <Meas_Upkeep+0xe8>
 8005f7e:	009a      	lsls	r2, r3, #2
 8005f80:	4b3b      	ldr	r3, [pc, #236]	@ (8006070 <Meas_Upkeep+0x100>)
 8005f82:	18d3      	adds	r3, r2, r3
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:
    Debug("Measurements are turned off.");
 8005f88:	4a3a      	ldr	r2, [pc, #232]	@ (8006074 <Meas_Upkeep+0x104>)
 8005f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8006078 <Meas_Upkeep+0x108>)
 8005f8c:	0019      	movs	r1, r3
 8005f8e:	2003      	movs	r0, #3
 8005f90:	f002 fd6e 	bl	8008a70 <CreateLine>
    break;
 8005f94:	e067      	b.n	8006066 <Meas_Upkeep+0xf6>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 8005f96:	f7ff ff97 	bl	8005ec8 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 8005f9a:	4b34      	ldr	r3, [pc, #208]	@ (800606c <Meas_Upkeep+0xfc>)
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	701a      	strb	r2, [r3, #0]
    break;
 8005fa0:	e061      	b.n	8006066 <Meas_Upkeep+0xf6>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 8005fa2:	f7ff ff69 	bl	8005e78 <StartMeasurements>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 8005fa6:	4b31      	ldr	r3, [pc, #196]	@ (800606c <Meas_Upkeep+0xfc>)
 8005fa8:	2202      	movs	r2, #2
 8005faa:	701a      	strb	r2, [r3, #0]
   break;
 8005fac:	e05b      	b.n	8006066 <Meas_Upkeep+0xf6>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 8005fae:	f7ff ffa7 	bl	8005f00 <MeasurementsCompleted>
 8005fb2:	1e03      	subs	r3, r0, #0
 8005fb4:	d054      	beq.n	8006060 <Meas_Upkeep+0xf0>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 8005fb6:	4b2d      	ldr	r3, [pc, #180]	@ (800606c <Meas_Upkeep+0xfc>)
 8005fb8:	2203      	movs	r2, #3
 8005fba:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005fbc:	e050      	b.n	8006060 <Meas_Upkeep+0xf0>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 8005fbe:	4a2f      	ldr	r2, [pc, #188]	@ (800607c <Meas_Upkeep+0x10c>)
 8005fc0:	4b2d      	ldr	r3, [pc, #180]	@ (8006078 <Meas_Upkeep+0x108>)
 8005fc2:	0019      	movs	r1, r3
 8005fc4:	2003      	movs	r0, #3
 8005fc6:	f002 fd53 	bl	8008a70 <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 8005fca:	4b2d      	ldr	r3, [pc, #180]	@ (8006080 <Meas_Upkeep+0x110>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	4a2d      	ldr	r2, [pc, #180]	@ (8006084 <Meas_Upkeep+0x114>)
 8005fd0:	4929      	ldr	r1, [pc, #164]	@ (8006078 <Meas_Upkeep+0x108>)
 8005fd2:	2003      	movs	r0, #3
 8005fd4:	f002 fd4c 	bl	8008a70 <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 8005fd8:	4b29      	ldr	r3, [pc, #164]	@ (8006080 <Meas_Upkeep+0x110>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	1c18      	adds	r0, r3, #0
 8005fde:	f7fd f9bf 	bl	8003360 <__aeabi_f2d>
 8005fe2:	0004      	movs	r4, r0
 8005fe4:	000d      	movs	r5, r1
 8005fe6:	4b26      	ldr	r3, [pc, #152]	@ (8006080 <Meas_Upkeep+0x110>)
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	1c18      	adds	r0, r3, #0
 8005fec:	f7fd f9b8 	bl	8003360 <__aeabi_f2d>
 8005ff0:	0002      	movs	r2, r0
 8005ff2:	000b      	movs	r3, r1
 8005ff4:	4824      	ldr	r0, [pc, #144]	@ (8006088 <Meas_Upkeep+0x118>)
 8005ff6:	4920      	ldr	r1, [pc, #128]	@ (8006078 <Meas_Upkeep+0x108>)
 8005ff8:	9202      	str	r2, [sp, #8]
 8005ffa:	9303      	str	r3, [sp, #12]
 8005ffc:	9400      	str	r4, [sp, #0]
 8005ffe:	9501      	str	r5, [sp, #4]
 8006000:	0002      	movs	r2, r0
 8006002:	2003      	movs	r0, #3
 8006004:	f002 fd34 	bl	8008a70 <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 8006008:	4b1d      	ldr	r3, [pc, #116]	@ (8006080 <Meas_Upkeep+0x110>)
 800600a:	6858      	ldr	r0, [r3, #4]
 800600c:	4b1c      	ldr	r3, [pc, #112]	@ (8006080 <Meas_Upkeep+0x110>)
 800600e:	6819      	ldr	r1, [r3, #0]
 8006010:	4b1b      	ldr	r3, [pc, #108]	@ (8006080 <Meas_Upkeep+0x110>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	b29b      	uxth	r3, r3
 8006016:	001a      	movs	r2, r3
 8006018:	f7fd fb4a 	bl	80036b0 <setMeasurement>
    checkCharges();
 800601c:	f7fd faa4 	bl	8003568 <checkCharges>
    MeasStamp = HAL_GetTick() + 10000;
 8006020:	f003 f91e 	bl	8009260 <HAL_GetTick>
 8006024:	0003      	movs	r3, r0
 8006026:	4a19      	ldr	r2, [pc, #100]	@ (800608c <Meas_Upkeep+0x11c>)
 8006028:	189a      	adds	r2, r3, r2
 800602a:	4b19      	ldr	r3, [pc, #100]	@ (8006090 <Meas_Upkeep+0x120>)
 800602c:	601a      	str	r2, [r3, #0]
    MeasState = MEAS_STATE_WAIT;
 800602e:	4b0f      	ldr	r3, [pc, #60]	@ (800606c <Meas_Upkeep+0xfc>)
 8006030:	2206      	movs	r2, #6
 8006032:	701a      	strb	r2, [r3, #0]
    break;
 8006034:	e017      	b.n	8006066 <Meas_Upkeep+0xf6>

  case MEAS_STATE_WAIT:
    Debug("Waiting until next loop");
 8006036:	4a17      	ldr	r2, [pc, #92]	@ (8006094 <Meas_Upkeep+0x124>)
 8006038:	4b0f      	ldr	r3, [pc, #60]	@ (8006078 <Meas_Upkeep+0x108>)
 800603a:	0019      	movs	r1, r3
 800603c:	2003      	movs	r0, #3
 800603e:	f002 fd17 	bl	8008a70 <CreateLine>
    if(TimestampIsReached(MeasStamp)){
 8006042:	4b13      	ldr	r3, [pc, #76]	@ (8006090 <Meas_Upkeep+0x120>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	0018      	movs	r0, r3
 8006048:	f002 fcbc 	bl	80089c4 <TimestampIsReached>
 800604c:	1e03      	subs	r3, r0, #0
 800604e:	d009      	beq.n	8006064 <Meas_Upkeep+0xf4>
      MeasState = MEAS_STATE_INIT;
 8006050:	4b06      	ldr	r3, [pc, #24]	@ (800606c <Meas_Upkeep+0xfc>)
 8006052:	2200      	movs	r2, #0
 8006054:	701a      	strb	r2, [r3, #0]
    }

    break;
 8006056:	e005      	b.n	8006064 <Meas_Upkeep+0xf4>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8006058:	4b04      	ldr	r3, [pc, #16]	@ (800606c <Meas_Upkeep+0xfc>)
 800605a:	2200      	movs	r2, #0
 800605c:	701a      	strb	r2, [r3, #0]
    break;
 800605e:	e002      	b.n	8006066 <Meas_Upkeep+0xf6>
    break;
 8006060:	46c0      	nop			@ (mov r8, r8)
 8006062:	e000      	b.n	8006066 <Meas_Upkeep+0xf6>
    break;
 8006064:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006066:	46c0      	nop			@ (mov r8, r8)
 8006068:	46bd      	mov	sp, r7
 800606a:	bdb0      	pop	{r4, r5, r7, pc}
 800606c:	20000d08 	.word	0x20000d08
 8006070:	0801a318 	.word	0x0801a318
 8006074:	08019cfc 	.word	0x08019cfc
 8006078:	08019cc4 	.word	0x08019cc4
 800607c:	08019d1c 	.word	0x08019d1c
 8006080:	20000cb0 	.word	0x20000cb0
 8006084:	08019d30 	.word	0x08019d30
 8006088:	08019d48 	.word	0x08019d48
 800608c:	00002710 	.word	0x00002710
 8006090:	20000d0c 	.word	0x20000d0c
 8006094:	08019d7c 	.word	0x08019d7c

08006098 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 8006098:	b590      	push	{r4, r7, lr}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	1d3b      	adds	r3, r7, #4
 80060a0:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 80060a2:	240f      	movs	r4, #15
 80060a4:	193b      	adds	r3, r7, r4
 80060a6:	2200      	movs	r2, #0
 80060a8:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 80060aa:	4b20      	ldr	r3, [pc, #128]	@ (800612c <Meas_SetEnabledSensors+0x94>)
 80060ac:	1d3a      	adds	r2, r7, #4
 80060ae:	6812      	ldr	r2, [r2, #0]
 80060b0:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 80060b2:	193b      	adds	r3, r7, r4
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	193a      	adds	r2, r7, r4
 80060b8:	1c59      	adds	r1, r3, #1
 80060ba:	7011      	strb	r1, [r2, #0]
 80060bc:	0018      	movs	r0, r3
 80060be:	1d3b      	adds	r3, r7, #4
 80060c0:	7819      	ldrb	r1, [r3, #0]
 80060c2:	4a1b      	ldr	r2, [pc, #108]	@ (8006130 <Meas_SetEnabledSensors+0x98>)
 80060c4:	0103      	lsls	r3, r0, #4
 80060c6:	18d3      	adds	r3, r2, r3
 80060c8:	330c      	adds	r3, #12
 80060ca:	1c0a      	adds	r2, r1, #0
 80060cc:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 80060ce:	193b      	adds	r3, r7, r4
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	193a      	adds	r2, r7, r4
 80060d4:	1c59      	adds	r1, r3, #1
 80060d6:	7011      	strb	r1, [r2, #0]
 80060d8:	0018      	movs	r0, r3
 80060da:	1d3b      	adds	r3, r7, #4
 80060dc:	7859      	ldrb	r1, [r3, #1]
 80060de:	4a14      	ldr	r2, [pc, #80]	@ (8006130 <Meas_SetEnabledSensors+0x98>)
 80060e0:	0103      	lsls	r3, r0, #4
 80060e2:	18d3      	adds	r3, r2, r3
 80060e4:	330c      	adds	r3, #12
 80060e6:	1c0a      	adds	r2, r1, #0
 80060e8:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 80060ea:	193b      	adds	r3, r7, r4
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	193a      	adds	r2, r7, r4
 80060f0:	1c59      	adds	r1, r3, #1
 80060f2:	7011      	strb	r1, [r2, #0]
 80060f4:	0018      	movs	r0, r3
 80060f6:	1d3b      	adds	r3, r7, #4
 80060f8:	7899      	ldrb	r1, [r3, #2]
 80060fa:	4a0d      	ldr	r2, [pc, #52]	@ (8006130 <Meas_SetEnabledSensors+0x98>)
 80060fc:	0103      	lsls	r3, r0, #4
 80060fe:	18d3      	adds	r3, r2, r3
 8006100:	330c      	adds	r3, #12
 8006102:	1c0a      	adds	r2, r1, #0
 8006104:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8006106:	193b      	adds	r3, r7, r4
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	193a      	adds	r2, r7, r4
 800610c:	1c59      	adds	r1, r3, #1
 800610e:	7011      	strb	r1, [r2, #0]
 8006110:	0018      	movs	r0, r3
 8006112:	1d3b      	adds	r3, r7, #4
 8006114:	78d9      	ldrb	r1, [r3, #3]
 8006116:	4a06      	ldr	r2, [pc, #24]	@ (8006130 <Meas_SetEnabledSensors+0x98>)
 8006118:	0103      	lsls	r3, r0, #4
 800611a:	18d3      	adds	r3, r2, r3
 800611c:	330c      	adds	r3, #12
 800611e:	1c0a      	adds	r2, r1, #0
 8006120:	701a      	strb	r2, [r3, #0]
}
 8006122:	46c0      	nop			@ (mov r8, r8)
 8006124:	46bd      	mov	sp, r7
 8006126:	b005      	add	sp, #20
 8006128:	bd90      	pop	{r4, r7, pc}
 800612a:	46c0      	nop			@ (mov r8, r8)
 800612c:	20000d00 	.word	0x20000d00
 8006130:	20000cc0 	.word	0x20000cc0

08006134 <Meas_Test>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}


void Meas_Test(){
 8006134:	b580      	push	{r7, lr}
 8006136:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 8006138:	4b25      	ldr	r3, [pc, #148]	@ (80061d0 <Meas_Test+0x9c>)
 800613a:	78db      	ldrb	r3, [r3, #3]
 800613c:	2201      	movs	r2, #1
 800613e:	4053      	eors	r3, r2
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <Meas_Test+0x16>
    ESP_WakeTest();
 8006146:	f7fe fb57 	bl	80047f8 <ESP_WakeTest>
  }
  if(!MeasTest.MIC_Tested){
 800614a:	4b21      	ldr	r3, [pc, #132]	@ (80061d0 <Meas_Test+0x9c>)
 800614c:	789b      	ldrb	r3, [r3, #2]
 800614e:	2201      	movs	r2, #1
 8006150:	4053      	eors	r3, r2
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b00      	cmp	r3, #0
 8006156:	d01f      	beq.n	8006198 <Meas_Test+0x64>
    if(MIC_IsTestMeasurementDoneWrapper()){
 8006158:	f7ff fd33 	bl	8005bc2 <MIC_IsTestMeasurementDoneWrapper>
 800615c:	1e03      	subs	r3, r0, #0
 800615e:	d00f      	beq.n	8006180 <Meas_Test+0x4c>
      MeasTest.MIC_Tested = true;
 8006160:	4b1b      	ldr	r3, [pc, #108]	@ (80061d0 <Meas_Test+0x9c>)
 8006162:	2201      	movs	r2, #1
 8006164:	709a      	strb	r2, [r3, #2]
      TIM2 -> CCR1 = 40000;
 8006166:	2380      	movs	r3, #128	@ 0x80
 8006168:	05db      	lsls	r3, r3, #23
 800616a:	4a1a      	ldr	r2, [pc, #104]	@ (80061d4 <Meas_Test+0xa0>)
 800616c:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 0;
 800616e:	2380      	movs	r3, #128	@ 0x80
 8006170:	05db      	lsls	r3, r3, #23
 8006172:	2200      	movs	r2, #0
 8006174:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 40000;
 8006176:	2380      	movs	r3, #128	@ 0x80
 8006178:	05db      	lsls	r3, r3, #23
 800617a:	4a16      	ldr	r2, [pc, #88]	@ (80061d4 <Meas_Test+0xa0>)
 800617c:	641a      	str	r2, [r3, #64]	@ 0x40
 800617e:	e00b      	b.n	8006198 <Meas_Test+0x64>
    }
    else{
      TIM2 -> CCR1 = 0;
 8006180:	2380      	movs	r3, #128	@ 0x80
 8006182:	05db      	lsls	r3, r3, #23
 8006184:	2200      	movs	r2, #0
 8006186:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 40000;
 8006188:	2380      	movs	r3, #128	@ 0x80
 800618a:	05db      	lsls	r3, r3, #23
 800618c:	4a11      	ldr	r2, [pc, #68]	@ (80061d4 <Meas_Test+0xa0>)
 800618e:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 40000;
 8006190:	2380      	movs	r3, #128	@ 0x80
 8006192:	05db      	lsls	r3, r3, #23
 8006194:	4a0f      	ldr	r2, [pc, #60]	@ (80061d4 <Meas_Test+0xa0>)
 8006196:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 8006198:	4b0d      	ldr	r3, [pc, #52]	@ (80061d0 <Meas_Test+0x9c>)
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d013      	beq.n	80061c8 <Meas_Test+0x94>
 80061a0:	4b0b      	ldr	r3, [pc, #44]	@ (80061d0 <Meas_Test+0x9c>)
 80061a2:	785b      	ldrb	r3, [r3, #1]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00f      	beq.n	80061c8 <Meas_Test+0x94>
 80061a8:	4b09      	ldr	r3, [pc, #36]	@ (80061d0 <Meas_Test+0x9c>)
 80061aa:	78db      	ldrb	r3, [r3, #3]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00b      	beq.n	80061c8 <Meas_Test+0x94>
 80061b0:	4b07      	ldr	r3, [pc, #28]	@ (80061d0 <Meas_Test+0x9c>)
 80061b2:	789b      	ldrb	r3, [r3, #2]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d007      	beq.n	80061c8 <Meas_Test+0x94>
    Debug("Test completed");
 80061b8:	4a07      	ldr	r2, [pc, #28]	@ (80061d8 <Meas_Test+0xa4>)
 80061ba:	4b08      	ldr	r3, [pc, #32]	@ (80061dc <Meas_Test+0xa8>)
 80061bc:	0019      	movs	r1, r3
 80061be:	2003      	movs	r0, #3
 80061c0:	f002 fc56 	bl	8008a70 <CreateLine>
    SetTestDone();
 80061c4:	f7ff fb72 	bl	80058ac <SetTestDone>
  }
}
 80061c8:	46c0      	nop			@ (mov r8, r8)
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	46c0      	nop			@ (mov r8, r8)
 80061d0:	20000d04 	.word	0x20000d04
 80061d4:	00009c40 	.word	0x00009c40
 80061d8:	08019d94 	.word	0x08019d94
 80061dc:	08019cc4 	.word	0x08019cc4

080061e0 <SetESPMeasurementDone>:

void SetESPMeasurementDone(){
 80061e0:	b580      	push	{r7, lr}
 80061e2:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 80061e4:	4b02      	ldr	r3, [pc, #8]	@ (80061f0 <SetESPMeasurementDone+0x10>)
 80061e6:	2201      	movs	r2, #1
 80061e8:	70da      	strb	r2, [r3, #3]
}
 80061ea:	46c0      	nop			@ (mov r8, r8)
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	20000d04 	.word	0x20000d04

080061f4 <MIC_Init>:
float sample[NUMBER_OF_SAMPLES];




void MIC_Init(I2S_HandleTypeDef* i2SHandle) { I2SHandle = i2SHandle; }
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	4b03      	ldr	r3, [pc, #12]	@ (800620c <MIC_Init+0x18>)
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	601a      	str	r2, [r3, #0]
 8006202:	46c0      	nop			@ (mov r8, r8)
 8006204:	46bd      	mov	sp, r7
 8006206:	b002      	add	sp, #8
 8006208:	bd80      	pop	{r7, pc}
 800620a:	46c0      	nop			@ (mov r8, r8)
 800620c:	20000d10 	.word	0x20000d10

08006210 <UpdateSampleRate>:
//  for(uint8_t i = 0;i < NR_SAMPLES_128; i++) {
//    FFTResult[i] *= energyCorrectionFactor;
//  }
//}

static void UpdateSampleRate(uint32_t sampleRate) {
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  if (I2SHandle->Init.AudioFreq == sampleRate) {
 8006218:	4b0c      	ldr	r3, [pc, #48]	@ (800624c <UpdateSampleRate+0x3c>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	429a      	cmp	r2, r3
 8006222:	d00e      	beq.n	8006242 <UpdateSampleRate+0x32>
    return;
  }

  HAL_I2S_DeInit(I2SHandle);
 8006224:	4b09      	ldr	r3, [pc, #36]	@ (800624c <UpdateSampleRate+0x3c>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	0018      	movs	r0, r3
 800622a:	f006 facf 	bl	800c7cc <HAL_I2S_DeInit>
  I2SHandle->Init.AudioFreq = sampleRate;
 800622e:	4b07      	ldr	r3, [pc, #28]	@ (800624c <UpdateSampleRate+0x3c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	615a      	str	r2, [r3, #20]
  HAL_I2S_Init(I2SHandle);
 8006236:	4b05      	ldr	r3, [pc, #20]	@ (800624c <UpdateSampleRate+0x3c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	0018      	movs	r0, r3
 800623c:	f006 f9d4 	bl	800c5e8 <HAL_I2S_Init>
 8006240:	e000      	b.n	8006244 <UpdateSampleRate+0x34>
    return;
 8006242:	46c0      	nop			@ (mov r8, r8)
}
 8006244:	46bd      	mov	sp, r7
 8006246:	b002      	add	sp, #8
 8006248:	bd80      	pop	{r7, pc}
 800624a:	46c0      	nop			@ (mov r8, r8)
 800624c:	20000d10 	.word	0x20000d10

08006250 <ConvertAudio>:

static float ConvertAudio(uint16_t* data) {
 8006250:	b580      	push	{r7, lr}
 8006252:	b08a      	sub	sp, #40	@ 0x28
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t MSP;
  uint32_t LSP;
  int32_t signedAudioValue;
  float Division = 8388607.0; //Reference?
 8006258:	4b1e      	ldr	r3, [pc, #120]	@ (80062d4 <ConvertAudio+0x84>)
 800625a:	623b      	str	r3, [r7, #32]
  float adjustedAudioValue = 0;
 800625c:	2300      	movs	r3, #0
 800625e:	61fb      	str	r3, [r7, #28]
  uint32_t audioValue = 0;
 8006260:	2300      	movs	r3, #0
 8006262:	627b      	str	r3, [r7, #36]	@ 0x24

  int32_t value = 12345;
 8006264:	4b1c      	ldr	r3, [pc, #112]	@ (80062d8 <ConvertAudio+0x88>)
 8006266:	61bb      	str	r3, [r7, #24]
  uint16_t msb=(value & 0x0FFFFFF)>>9;
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	125b      	asrs	r3, r3, #9
 800626c:	b29a      	uxth	r2, r3
 800626e:	2316      	movs	r3, #22
 8006270:	18fb      	adds	r3, r7, r3
 8006272:	0452      	lsls	r2, r2, #17
 8006274:	0c52      	lsrs	r2, r2, #17
 8006276:	801a      	strh	r2, [r3, #0]
  uint16_t lsb=(value & 0x1FF)<<7;
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	01da      	lsls	r2, r3, #7
 800627c:	2314      	movs	r3, #20
 800627e:	18fb      	adds	r3, r7, r3
 8006280:	801a      	strh	r2, [r3, #0]
  MSP = data[0]<<9;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	025b      	lsls	r3, r3, #9
 8006288:	613b      	str	r3, [r7, #16]
  LSP = (data[1]&0xFF80)>>7;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	3302      	adds	r3, #2
 800628e:	881b      	ldrh	r3, [r3, #0]
 8006290:	09db      	lsrs	r3, r3, #7
 8006292:	b29b      	uxth	r3, r3
 8006294:	60fb      	str	r3, [r7, #12]
  audioValue = MSP | LSP;
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	4313      	orrs	r3, r2
 800629c:	627b      	str	r3, [r7, #36]	@ 0x24
  if((0x800000 & audioValue) != 0){
 800629e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062a0:	2380      	movs	r3, #128	@ 0x80
 80062a2:	041b      	lsls	r3, r3, #16
 80062a4:	4013      	ands	r3, r2
 80062a6:	d004      	beq.n	80062b2 <ConvertAudio+0x62>
    audioValue = 0xFF000000 | audioValue;
 80062a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062aa:	22ff      	movs	r2, #255	@ 0xff
 80062ac:	0612      	lsls	r2, r2, #24
 80062ae:	4313      	orrs	r3, r2
 80062b0:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  signedAudioValue = (int32_t)audioValue;
 80062b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b4:	60bb      	str	r3, [r7, #8]
  adjustedAudioValue = ((float)signedAudioValue/Division);
 80062b6:	68b8      	ldr	r0, [r7, #8]
 80062b8:	f7fb f908 	bl	80014cc <__aeabi_i2f>
 80062bc:	1c03      	adds	r3, r0, #0
 80062be:	6a39      	ldr	r1, [r7, #32]
 80062c0:	1c18      	adds	r0, r3, #0
 80062c2:	f7fa fc05 	bl	8000ad0 <__aeabi_fdiv>
 80062c6:	1c03      	adds	r3, r0, #0
 80062c8:	61fb      	str	r3, [r7, #28]
//  if(audioValue < 0){
//    audioValue = 0xFFFFFFFF-audioValue;
//  }
//  dB = 20 * log10(audioValue / Division);

  return adjustedAudioValue;
 80062ca:	69fb      	ldr	r3, [r7, #28]
}
 80062cc:	1c18      	adds	r0, r3, #0
 80062ce:	46bd      	mov	sp, r7
 80062d0:	b00a      	add	sp, #40	@ 0x28
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	4afffffe 	.word	0x4afffffe
 80062d8:	00003039 	.word	0x00003039

080062dc <MIC_Start>:
//  arm_rfft_q15(&fft_instance, sample, output);
//  arm_abs_q15(output, output, NUMBER_OF_SAMPLES);
//  GetAllOctaves();
//}

void MIC_Start(uint32_t sampleRate, uint16_t nrSamples) {
 80062dc:	b5b0      	push	{r4, r5, r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	000a      	movs	r2, r1
 80062e6:	1cbb      	adds	r3, r7, #2
 80062e8:	801a      	strh	r2, [r3, #0]
  if (I2SHandle == NULL) {
 80062ea:	4b1e      	ldr	r3, [pc, #120]	@ (8006364 <MIC_Start+0x88>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d106      	bne.n	8006300 <MIC_Start+0x24>
    Error("Microphone is not initialised.");
 80062f2:	4a1d      	ldr	r2, [pc, #116]	@ (8006368 <MIC_Start+0x8c>)
 80062f4:	4b1d      	ldr	r3, [pc, #116]	@ (800636c <MIC_Start+0x90>)
 80062f6:	0019      	movs	r1, r3
 80062f8:	2001      	movs	r0, #1
 80062fa:	f002 fbb9 	bl	8008a70 <CreateLine>
    return;
 80062fe:	e02d      	b.n	800635c <MIC_Start+0x80>
  }
  Debug("In mic start");
 8006300:	4a1b      	ldr	r2, [pc, #108]	@ (8006370 <MIC_Start+0x94>)
 8006302:	4b1c      	ldr	r3, [pc, #112]	@ (8006374 <MIC_Start+0x98>)
 8006304:	0019      	movs	r1, r3
 8006306:	2003      	movs	r0, #3
 8006308:	f002 fbb2 	bl	8008a70 <CreateLine>
  UpdateSampleRate(sampleRate);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	0018      	movs	r0, r3
 8006310:	f7ff ff7e 	bl	8006210 <UpdateSampleRate>
  Samples = (NrOfSamples)nrSamples;
 8006314:	4b18      	ldr	r3, [pc, #96]	@ (8006378 <MIC_Start+0x9c>)
 8006316:	1cba      	adds	r2, r7, #2
 8006318:	8812      	ldrh	r2, [r2, #0]
 800631a:	801a      	strh	r2, [r3, #0]

  //StartTime = GetCurrentHalTicks();
  StartupDoneTime = HAL_GetTick() + 20;
 800631c:	f002 ffa0 	bl	8009260 <HAL_GetTick>
 8006320:	0003      	movs	r3, r0
 8006322:	3314      	adds	r3, #20
 8006324:	001a      	movs	r2, r3
 8006326:	4b15      	ldr	r3, [pc, #84]	@ (800637c <MIC_Start+0xa0>)
 8006328:	601a      	str	r2, [r3, #0]
  StartUpDone = false;
 800632a:	4b15      	ldr	r3, [pc, #84]	@ (8006380 <MIC_Start+0xa4>)
 800632c:	2200      	movs	r2, #0
 800632e:	701a      	strb	r2, [r3, #0]
  DataReady = false;
 8006330:	4b14      	ldr	r3, [pc, #80]	@ (8006384 <MIC_Start+0xa8>)
 8006332:	2200      	movs	r2, #0
 8006334:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, NUMBER_OF_SAMPLES*2);
 8006336:	4b0b      	ldr	r3, [pc, #44]	@ (8006364 <MIC_Start+0x88>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	250f      	movs	r5, #15
 800633c:	197c      	adds	r4, r7, r5
 800633e:	2280      	movs	r2, #128	@ 0x80
 8006340:	00d2      	lsls	r2, r2, #3
 8006342:	4911      	ldr	r1, [pc, #68]	@ (8006388 <MIC_Start+0xac>)
 8006344:	0018      	movs	r0, r3
 8006346:	f006 fa6d 	bl	800c824 <HAL_I2S_Receive_DMA>
 800634a:	0003      	movs	r3, r0
 800634c:	7023      	strb	r3, [r4, #0]
//      HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer,
//          Samples >> 1); //>>1 because reading half word

  Info("Status %d", status);
 800634e:	197b      	adds	r3, r7, r5
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	4a0e      	ldr	r2, [pc, #56]	@ (800638c <MIC_Start+0xb0>)
 8006354:	490e      	ldr	r1, [pc, #56]	@ (8006390 <MIC_Start+0xb4>)
 8006356:	2002      	movs	r0, #2
 8006358:	f002 fb8a 	bl	8008a70 <CreateLine>
}
 800635c:	46bd      	mov	sp, r7
 800635e:	b004      	add	sp, #16
 8006360:	bdb0      	pop	{r4, r5, r7, pc}
 8006362:	46c0      	nop			@ (mov r8, r8)
 8006364:	20000d10 	.word	0x20000d10
 8006368:	08019da4 	.word	0x08019da4
 800636c:	08019dc4 	.word	0x08019dc4
 8006370:	08019dc8 	.word	0x08019dc8
 8006374:	08019dd8 	.word	0x08019dd8
 8006378:	2000010c 	.word	0x2000010c
 800637c:	20001d14 	.word	0x20001d14
 8006380:	20001d18 	.word	0x20001d18
 8006384:	20001d19 	.word	0x20001d19
 8006388:	20000d14 	.word	0x20000d14
 800638c:	08019ddc 	.word	0x08019ddc
 8006390:	08019de8 	.word	0x08019de8

08006394 <MinimalValue>:

float MinimalValue(uint16_t length){
 8006394:	b590      	push	{r4, r7, lr}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	0002      	movs	r2, r0
 800639c:	1dbb      	adds	r3, r7, #6
 800639e:	801a      	strh	r2, [r3, #0]
  float MinVal = 1;
 80063a0:	23fe      	movs	r3, #254	@ 0xfe
 80063a2:	059b      	lsls	r3, r3, #22
 80063a4:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 80063a6:	230a      	movs	r3, #10
 80063a8:	18fb      	adds	r3, r7, r3
 80063aa:	2200      	movs	r2, #0
 80063ac:	801a      	strh	r2, [r3, #0]
 80063ae:	e01c      	b.n	80063ea <MinimalValue+0x56>
    if(sample[i] < MinVal){
 80063b0:	240a      	movs	r4, #10
 80063b2:	193b      	adds	r3, r7, r4
 80063b4:	2200      	movs	r2, #0
 80063b6:	5e9a      	ldrsh	r2, [r3, r2]
 80063b8:	4b12      	ldr	r3, [pc, #72]	@ (8006404 <MinimalValue+0x70>)
 80063ba:	0092      	lsls	r2, r2, #2
 80063bc:	58d3      	ldr	r3, [r2, r3]
 80063be:	1c19      	adds	r1, r3, #0
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f7fa f897 	bl	80004f4 <__aeabi_fcmpgt>
 80063c6:	1e03      	subs	r3, r0, #0
 80063c8:	d006      	beq.n	80063d8 <MinimalValue+0x44>
      MinVal = sample[i];
 80063ca:	193b      	adds	r3, r7, r4
 80063cc:	2200      	movs	r2, #0
 80063ce:	5e9a      	ldrsh	r2, [r3, r2]
 80063d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006404 <MinimalValue+0x70>)
 80063d2:	0092      	lsls	r2, r2, #2
 80063d4:	58d3      	ldr	r3, [r2, r3]
 80063d6:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 80063d8:	210a      	movs	r1, #10
 80063da:	187b      	adds	r3, r7, r1
 80063dc:	2200      	movs	r2, #0
 80063de:	5e9b      	ldrsh	r3, [r3, r2]
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	3301      	adds	r3, #1
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	187b      	adds	r3, r7, r1
 80063e8:	801a      	strh	r2, [r3, #0]
 80063ea:	230a      	movs	r3, #10
 80063ec:	18fb      	adds	r3, r7, r3
 80063ee:	2200      	movs	r2, #0
 80063f0:	5e9a      	ldrsh	r2, [r3, r2]
 80063f2:	1dbb      	adds	r3, r7, #6
 80063f4:	881b      	ldrh	r3, [r3, #0]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	dbda      	blt.n	80063b0 <MinimalValue+0x1c>
    }
  }
  return(MinVal);
 80063fa:	68fb      	ldr	r3, [r7, #12]
}
 80063fc:	1c18      	adds	r0, r3, #0
 80063fe:	46bd      	mov	sp, r7
 8006400:	b005      	add	sp, #20
 8006402:	bd90      	pop	{r4, r7, pc}
 8006404:	20001d50 	.word	0x20001d50

08006408 <MaximalValue>:

float MaximalValue(uint16_t length){
 8006408:	b590      	push	{r4, r7, lr}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	0002      	movs	r2, r0
 8006410:	1dbb      	adds	r3, r7, #6
 8006412:	801a      	strh	r2, [r3, #0]
  float MaxVal = -1;
 8006414:	4b18      	ldr	r3, [pc, #96]	@ (8006478 <MaximalValue+0x70>)
 8006416:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 8006418:	230a      	movs	r3, #10
 800641a:	18fb      	adds	r3, r7, r3
 800641c:	2200      	movs	r2, #0
 800641e:	801a      	strh	r2, [r3, #0]
 8006420:	e01c      	b.n	800645c <MaximalValue+0x54>
    if(sample[i] > MaxVal){
 8006422:	240a      	movs	r4, #10
 8006424:	193b      	adds	r3, r7, r4
 8006426:	2200      	movs	r2, #0
 8006428:	5e9a      	ldrsh	r2, [r3, r2]
 800642a:	4b14      	ldr	r3, [pc, #80]	@ (800647c <MaximalValue+0x74>)
 800642c:	0092      	lsls	r2, r2, #2
 800642e:	58d3      	ldr	r3, [r2, r3]
 8006430:	1c19      	adds	r1, r3, #0
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f7fa f84a 	bl	80004cc <__aeabi_fcmplt>
 8006438:	1e03      	subs	r3, r0, #0
 800643a:	d006      	beq.n	800644a <MaximalValue+0x42>
      MaxVal = sample[i];
 800643c:	193b      	adds	r3, r7, r4
 800643e:	2200      	movs	r2, #0
 8006440:	5e9a      	ldrsh	r2, [r3, r2]
 8006442:	4b0e      	ldr	r3, [pc, #56]	@ (800647c <MaximalValue+0x74>)
 8006444:	0092      	lsls	r2, r2, #2
 8006446:	58d3      	ldr	r3, [r2, r3]
 8006448:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 800644a:	210a      	movs	r1, #10
 800644c:	187b      	adds	r3, r7, r1
 800644e:	2200      	movs	r2, #0
 8006450:	5e9b      	ldrsh	r3, [r3, r2]
 8006452:	b29b      	uxth	r3, r3
 8006454:	3301      	adds	r3, #1
 8006456:	b29a      	uxth	r2, r3
 8006458:	187b      	adds	r3, r7, r1
 800645a:	801a      	strh	r2, [r3, #0]
 800645c:	230a      	movs	r3, #10
 800645e:	18fb      	adds	r3, r7, r3
 8006460:	2200      	movs	r2, #0
 8006462:	5e9a      	ldrsh	r2, [r3, r2]
 8006464:	1dbb      	adds	r3, r7, #6
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	429a      	cmp	r2, r3
 800646a:	dbda      	blt.n	8006422 <MaximalValue+0x1a>
    }
  }
  return(MaxVal);
 800646c:	68fb      	ldr	r3, [r7, #12]
}
 800646e:	1c18      	adds	r0, r3, #0
 8006470:	46bd      	mov	sp, r7
 8006472:	b005      	add	sp, #20
 8006474:	bd90      	pop	{r4, r7, pc}
 8006476:	46c0      	nop			@ (mov r8, r8)
 8006478:	bf800000 	.word	0xbf800000
 800647c:	20001d50 	.word	0x20001d50

08006480 <MIC_Check>:
bool MIC_Check(void) {
 8006480:	b5b0      	push	{r4, r5, r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
  float Max;
  float Min;
  Info("New samples");
 8006486:	4a25      	ldr	r2, [pc, #148]	@ (800651c <MIC_Check+0x9c>)
 8006488:	4b25      	ldr	r3, [pc, #148]	@ (8006520 <MIC_Check+0xa0>)
 800648a:	0019      	movs	r1, r3
 800648c:	2002      	movs	r0, #2
 800648e:	f002 faef 	bl	8008a70 <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006492:	230e      	movs	r3, #14
 8006494:	18fb      	adds	r3, r7, r3
 8006496:	2200      	movs	r2, #0
 8006498:	801a      	strh	r2, [r3, #0]
 800649a:	e016      	b.n	80064ca <MIC_Check+0x4a>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 800649c:	210e      	movs	r1, #14
 800649e:	187b      	adds	r3, r7, r1
 80064a0:	881b      	ldrh	r3, [r3, #0]
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	3302      	adds	r3, #2
 80064a6:	005a      	lsls	r2, r3, #1
 80064a8:	4b1e      	ldr	r3, [pc, #120]	@ (8006524 <MIC_Check+0xa4>)
 80064aa:	18d2      	adds	r2, r2, r3
 80064ac:	000d      	movs	r5, r1
 80064ae:	187b      	adds	r3, r7, r1
 80064b0:	881c      	ldrh	r4, [r3, #0]
 80064b2:	0010      	movs	r0, r2
 80064b4:	f7ff fecc 	bl	8006250 <ConvertAudio>
 80064b8:	1c01      	adds	r1, r0, #0
 80064ba:	4b1b      	ldr	r3, [pc, #108]	@ (8006528 <MIC_Check+0xa8>)
 80064bc:	00a2      	lsls	r2, r4, #2
 80064be:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 80064c0:	197b      	adds	r3, r7, r5
 80064c2:	197a      	adds	r2, r7, r5
 80064c4:	8812      	ldrh	r2, [r2, #0]
 80064c6:	3201      	adds	r2, #1
 80064c8:	801a      	strh	r2, [r3, #0]
 80064ca:	230e      	movs	r3, #14
 80064cc:	18fb      	adds	r3, r7, r3
 80064ce:	881a      	ldrh	r2, [r3, #0]
 80064d0:	2380      	movs	r3, #128	@ 0x80
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d3e1      	bcc.n	800649c <MIC_Check+0x1c>
    //Info("0x%08x", sample);
  }
  Max = MaximalValue(NUMBER_OF_SAMPLES);
 80064d8:	2380      	movs	r3, #128	@ 0x80
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	0018      	movs	r0, r3
 80064de:	f7ff ff93 	bl	8006408 <MaximalValue>
 80064e2:	1c03      	adds	r3, r0, #0
 80064e4:	60bb      	str	r3, [r7, #8]
  Min = MinimalValue(NUMBER_OF_SAMPLES);
 80064e6:	2380      	movs	r3, #128	@ 0x80
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	0018      	movs	r0, r3
 80064ec:	f7ff ff52 	bl	8006394 <MinimalValue>
 80064f0:	1c03      	adds	r3, r0, #0
 80064f2:	607b      	str	r3, [r7, #4]
  if(Max > 0.0 || Min < 0.0){
 80064f4:	2100      	movs	r1, #0
 80064f6:	68b8      	ldr	r0, [r7, #8]
 80064f8:	f7f9 fffc 	bl	80004f4 <__aeabi_fcmpgt>
 80064fc:	1e03      	subs	r3, r0, #0
 80064fe:	d105      	bne.n	800650c <MIC_Check+0x8c>
 8006500:	2100      	movs	r1, #0
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7f9 ffe2 	bl	80004cc <__aeabi_fcmplt>
 8006508:	1e03      	subs	r3, r0, #0
 800650a:	d001      	beq.n	8006510 <MIC_Check+0x90>
    return(true);
 800650c:	2301      	movs	r3, #1
 800650e:	e000      	b.n	8006512 <MIC_Check+0x92>
  }
  return(false);
 8006510:	2300      	movs	r3, #0
}
 8006512:	0018      	movs	r0, r3
 8006514:	46bd      	mov	sp, r7
 8006516:	b004      	add	sp, #16
 8006518:	bdb0      	pop	{r4, r5, r7, pc}
 800651a:	46c0      	nop			@ (mov r8, r8)
 800651c:	08019dec 	.word	0x08019dec
 8006520:	08019de8 	.word	0x08019de8
 8006524:	20000d14 	.word	0x20000d14
 8006528:	20001d50 	.word	0x20001d50

0800652c <MIC_Print>:
void MIC_Print(void) {
 800652c:	b5b0      	push	{r4, r5, r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
  float Max;
  float Min;
  Info("New samples");
 8006532:	4ac9      	ldr	r2, [pc, #804]	@ (8006858 <MIC_Print+0x32c>)
 8006534:	4bc9      	ldr	r3, [pc, #804]	@ (800685c <MIC_Print+0x330>)
 8006536:	0019      	movs	r1, r3
 8006538:	2002      	movs	r0, #2
 800653a:	f002 fa99 	bl	8008a70 <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 800653e:	230e      	movs	r3, #14
 8006540:	18fb      	adds	r3, r7, r3
 8006542:	2200      	movs	r2, #0
 8006544:	801a      	strh	r2, [r3, #0]
 8006546:	e016      	b.n	8006576 <MIC_Print+0x4a>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 8006548:	210e      	movs	r1, #14
 800654a:	187b      	adds	r3, r7, r1
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	3302      	adds	r3, #2
 8006552:	005a      	lsls	r2, r3, #1
 8006554:	4bc2      	ldr	r3, [pc, #776]	@ (8006860 <MIC_Print+0x334>)
 8006556:	18d2      	adds	r2, r2, r3
 8006558:	000d      	movs	r5, r1
 800655a:	187b      	adds	r3, r7, r1
 800655c:	881c      	ldrh	r4, [r3, #0]
 800655e:	0010      	movs	r0, r2
 8006560:	f7ff fe76 	bl	8006250 <ConvertAudio>
 8006564:	1c01      	adds	r1, r0, #0
 8006566:	4bbf      	ldr	r3, [pc, #764]	@ (8006864 <MIC_Print+0x338>)
 8006568:	00a2      	lsls	r2, r4, #2
 800656a:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 800656c:	197b      	adds	r3, r7, r5
 800656e:	197a      	adds	r2, r7, r5
 8006570:	8812      	ldrh	r2, [r2, #0]
 8006572:	3201      	adds	r2, #1
 8006574:	801a      	strh	r2, [r3, #0]
 8006576:	230e      	movs	r3, #14
 8006578:	18fb      	adds	r3, r7, r3
 800657a:	881a      	ldrh	r2, [r3, #0]
 800657c:	2380      	movs	r3, #128	@ 0x80
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	429a      	cmp	r2, r3
 8006582:	d3e1      	bcc.n	8006548 <MIC_Print+0x1c>
    //Info("0x%08x", sample);
  }
  //filter();
  Min = MinimalValue(NUMBER_OF_SAMPLES);
 8006584:	2380      	movs	r3, #128	@ 0x80
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	0018      	movs	r0, r3
 800658a:	f7ff ff03 	bl	8006394 <MinimalValue>
 800658e:	1c03      	adds	r3, r0, #0
 8006590:	60bb      	str	r3, [r7, #8]
  Max = MaximalValue(NUMBER_OF_SAMPLES);
 8006592:	2380      	movs	r3, #128	@ 0x80
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	0018      	movs	r0, r3
 8006598:	f7ff ff36 	bl	8006408 <MaximalValue>
 800659c:	1c03      	adds	r3, r0, #0
 800659e:	607b      	str	r3, [r7, #4]
  dBc = MIC_GetDB();
 80065a0:	f000 f9e0 	bl	8006964 <MIC_GetDB>
 80065a4:	1c02      	adds	r2, r0, #0
 80065a6:	4bb0      	ldr	r3, [pc, #704]	@ (8006868 <MIC_Print+0x33c>)
 80065a8:	601a      	str	r2, [r3, #0]
  if(counter < 10){
 80065aa:	4bb0      	ldr	r3, [pc, #704]	@ (800686c <MIC_Print+0x340>)
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	2b09      	cmp	r3, #9
 80065b0:	d80e      	bhi.n	80065d0 <MIC_Print+0xa4>
    dBcSamples[counter] = dBc;
 80065b2:	4bae      	ldr	r3, [pc, #696]	@ (800686c <MIC_Print+0x340>)
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	001a      	movs	r2, r3
 80065b8:	4bab      	ldr	r3, [pc, #684]	@ (8006868 <MIC_Print+0x33c>)
 80065ba:	6819      	ldr	r1, [r3, #0]
 80065bc:	4bac      	ldr	r3, [pc, #688]	@ (8006870 <MIC_Print+0x344>)
 80065be:	0092      	lsls	r2, r2, #2
 80065c0:	50d1      	str	r1, [r2, r3]
    counter += 1;
 80065c2:	4baa      	ldr	r3, [pc, #680]	@ (800686c <MIC_Print+0x340>)
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	3301      	adds	r3, #1
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	4ba8      	ldr	r3, [pc, #672]	@ (800686c <MIC_Print+0x340>)
 80065cc:	701a      	strb	r2, [r3, #0]
 80065ce:	e013      	b.n	80065f8 <MIC_Print+0xcc>
  }
  else{
    counter = 0;
 80065d0:	4ba6      	ldr	r3, [pc, #664]	@ (800686c <MIC_Print+0x340>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	701a      	strb	r2, [r3, #0]
    dBcSamples[counter] = dBc;
 80065d6:	4ba5      	ldr	r3, [pc, #660]	@ (800686c <MIC_Print+0x340>)
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	001a      	movs	r2, r3
 80065dc:	4ba2      	ldr	r3, [pc, #648]	@ (8006868 <MIC_Print+0x33c>)
 80065de:	6819      	ldr	r1, [r3, #0]
 80065e0:	4ba3      	ldr	r3, [pc, #652]	@ (8006870 <MIC_Print+0x344>)
 80065e2:	0092      	lsls	r2, r2, #2
 80065e4:	50d1      	str	r1, [r2, r3]
    counter += 1;
 80065e6:	4ba1      	ldr	r3, [pc, #644]	@ (800686c <MIC_Print+0x340>)
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	3301      	adds	r3, #1
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	4b9f      	ldr	r3, [pc, #636]	@ (800686c <MIC_Print+0x340>)
 80065f0:	701a      	strb	r2, [r3, #0]
    averageReached = true;
 80065f2:	4ba0      	ldr	r3, [pc, #640]	@ (8006874 <MIC_Print+0x348>)
 80065f4:	2201      	movs	r2, #1
 80065f6:	701a      	strb	r2, [r3, #0]
  }
  if(!averageReached){
 80065f8:	4b9e      	ldr	r3, [pc, #632]	@ (8006874 <MIC_Print+0x348>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2201      	movs	r2, #1
 80065fe:	4053      	eors	r3, r2
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d005      	beq.n	8006612 <MIC_Print+0xe6>
    setMic(dBc);
 8006606:	4b98      	ldr	r3, [pc, #608]	@ (8006868 <MIC_Print+0x33c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	1c18      	adds	r0, r3, #0
 800660c:	f7fd f86c 	bl	80036e8 <setMic>
 8006610:	e030      	b.n	8006674 <MIC_Print+0x148>
  }
  else{
    dBcAverage = 0;
 8006612:	4b99      	ldr	r3, [pc, #612]	@ (8006878 <MIC_Print+0x34c>)
 8006614:	2200      	movs	r2, #0
 8006616:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++){
 8006618:	230d      	movs	r3, #13
 800661a:	18fb      	adds	r3, r7, r3
 800661c:	2200      	movs	r2, #0
 800661e:	701a      	strb	r2, [r3, #0]
 8006620:	e014      	b.n	800664c <MIC_Print+0x120>
      dBcAverage += dBcSamples[i];
 8006622:	240d      	movs	r4, #13
 8006624:	193b      	adds	r3, r7, r4
 8006626:	781a      	ldrb	r2, [r3, #0]
 8006628:	4b91      	ldr	r3, [pc, #580]	@ (8006870 <MIC_Print+0x344>)
 800662a:	0092      	lsls	r2, r2, #2
 800662c:	58d2      	ldr	r2, [r2, r3]
 800662e:	4b92      	ldr	r3, [pc, #584]	@ (8006878 <MIC_Print+0x34c>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	1c19      	adds	r1, r3, #0
 8006634:	1c10      	adds	r0, r2, #0
 8006636:	f7fa f8c1 	bl	80007bc <__aeabi_fadd>
 800663a:	1c03      	adds	r3, r0, #0
 800663c:	1c1a      	adds	r2, r3, #0
 800663e:	4b8e      	ldr	r3, [pc, #568]	@ (8006878 <MIC_Print+0x34c>)
 8006640:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++){
 8006642:	193b      	adds	r3, r7, r4
 8006644:	781a      	ldrb	r2, [r3, #0]
 8006646:	193b      	adds	r3, r7, r4
 8006648:	3201      	adds	r2, #1
 800664a:	701a      	strb	r2, [r3, #0]
 800664c:	230d      	movs	r3, #13
 800664e:	18fb      	adds	r3, r7, r3
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	2b09      	cmp	r3, #9
 8006654:	d9e5      	bls.n	8006622 <MIC_Print+0xf6>
    }
    dBcAverage = dBcAverage/10;
 8006656:	4b88      	ldr	r3, [pc, #544]	@ (8006878 <MIC_Print+0x34c>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4988      	ldr	r1, [pc, #544]	@ (800687c <MIC_Print+0x350>)
 800665c:	1c18      	adds	r0, r3, #0
 800665e:	f7fa fa37 	bl	8000ad0 <__aeabi_fdiv>
 8006662:	1c03      	adds	r3, r0, #0
 8006664:	1c1a      	adds	r2, r3, #0
 8006666:	4b84      	ldr	r3, [pc, #528]	@ (8006878 <MIC_Print+0x34c>)
 8006668:	601a      	str	r2, [r3, #0]
    setMic(dBcAverage);
 800666a:	4b83      	ldr	r3, [pc, #524]	@ (8006878 <MIC_Print+0x34c>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	1c18      	adds	r0, r3, #0
 8006670:	f7fd f83a 	bl	80036e8 <setMic>
  }
  //Currently is set as the individual dBc, should be set to average.
//  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
  if(dBc > 85){ //white
 8006674:	4b7c      	ldr	r3, [pc, #496]	@ (8006868 <MIC_Print+0x33c>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4981      	ldr	r1, [pc, #516]	@ (8006880 <MIC_Print+0x354>)
 800667a:	1c18      	adds	r0, r3, #0
 800667c:	f7f9 ff3a 	bl	80004f4 <__aeabi_fcmpgt>
 8006680:	1e03      	subs	r3, r0, #0
 8006682:	d013      	beq.n	80066ac <MIC_Print+0x180>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8006684:	4b7f      	ldr	r3, [pc, #508]	@ (8006884 <MIC_Print+0x358>)
 8006686:	2200      	movs	r2, #0
 8006688:	2101      	movs	r1, #1
 800668a:	0018      	movs	r0, r3
 800668c:	f003 ff7e 	bl	800a58c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8006690:	2380      	movs	r3, #128	@ 0x80
 8006692:	005b      	lsls	r3, r3, #1
 8006694:	487b      	ldr	r0, [pc, #492]	@ (8006884 <MIC_Print+0x358>)
 8006696:	2200      	movs	r2, #0
 8006698:	0019      	movs	r1, r3
 800669a:	f003 ff77 	bl	800a58c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 800669e:	2380      	movs	r3, #128	@ 0x80
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4878      	ldr	r0, [pc, #480]	@ (8006884 <MIC_Print+0x358>)
 80066a4:	2200      	movs	r2, #0
 80066a6:	0019      	movs	r1, r3
 80066a8:	f003 ff70 	bl	800a58c <HAL_GPIO_WritePin>
  }
  if(dBc < 85 && dBc >= 80){ //red
 80066ac:	4b6e      	ldr	r3, [pc, #440]	@ (8006868 <MIC_Print+0x33c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4973      	ldr	r1, [pc, #460]	@ (8006880 <MIC_Print+0x354>)
 80066b2:	1c18      	adds	r0, r3, #0
 80066b4:	f7f9 ff0a 	bl	80004cc <__aeabi_fcmplt>
 80066b8:	1e03      	subs	r3, r0, #0
 80066ba:	d01b      	beq.n	80066f4 <MIC_Print+0x1c8>
 80066bc:	4b6a      	ldr	r3, [pc, #424]	@ (8006868 <MIC_Print+0x33c>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4971      	ldr	r1, [pc, #452]	@ (8006888 <MIC_Print+0x35c>)
 80066c2:	1c18      	adds	r0, r3, #0
 80066c4:	f7f9 ff20 	bl	8000508 <__aeabi_fcmpge>
 80066c8:	1e03      	subs	r3, r0, #0
 80066ca:	d013      	beq.n	80066f4 <MIC_Print+0x1c8>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 80066cc:	4b6d      	ldr	r3, [pc, #436]	@ (8006884 <MIC_Print+0x358>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	2101      	movs	r1, #1
 80066d2:	0018      	movs	r0, r3
 80066d4:	f003 ff5a 	bl	800a58c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 80066d8:	2380      	movs	r3, #128	@ 0x80
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	4869      	ldr	r0, [pc, #420]	@ (8006884 <MIC_Print+0x358>)
 80066de:	2201      	movs	r2, #1
 80066e0:	0019      	movs	r1, r3
 80066e2:	f003 ff53 	bl	800a58c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80066e6:	2380      	movs	r3, #128	@ 0x80
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4866      	ldr	r0, [pc, #408]	@ (8006884 <MIC_Print+0x358>)
 80066ec:	2201      	movs	r2, #1
 80066ee:	0019      	movs	r1, r3
 80066f0:	f003 ff4c 	bl	800a58c <HAL_GPIO_WritePin>
  }
  if(dBc < 80 && dBc >= 75){//purple
 80066f4:	4b5c      	ldr	r3, [pc, #368]	@ (8006868 <MIC_Print+0x33c>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4963      	ldr	r1, [pc, #396]	@ (8006888 <MIC_Print+0x35c>)
 80066fa:	1c18      	adds	r0, r3, #0
 80066fc:	f7f9 fee6 	bl	80004cc <__aeabi_fcmplt>
 8006700:	1e03      	subs	r3, r0, #0
 8006702:	d01b      	beq.n	800673c <MIC_Print+0x210>
 8006704:	4b58      	ldr	r3, [pc, #352]	@ (8006868 <MIC_Print+0x33c>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4960      	ldr	r1, [pc, #384]	@ (800688c <MIC_Print+0x360>)
 800670a:	1c18      	adds	r0, r3, #0
 800670c:	f7f9 fefc 	bl	8000508 <__aeabi_fcmpge>
 8006710:	1e03      	subs	r3, r0, #0
 8006712:	d013      	beq.n	800673c <MIC_Print+0x210>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8006714:	4b5b      	ldr	r3, [pc, #364]	@ (8006884 <MIC_Print+0x358>)
 8006716:	2200      	movs	r2, #0
 8006718:	2101      	movs	r1, #1
 800671a:	0018      	movs	r0, r3
 800671c:	f003 ff36 	bl	800a58c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8006720:	2380      	movs	r3, #128	@ 0x80
 8006722:	005b      	lsls	r3, r3, #1
 8006724:	4857      	ldr	r0, [pc, #348]	@ (8006884 <MIC_Print+0x358>)
 8006726:	2201      	movs	r2, #1
 8006728:	0019      	movs	r1, r3
 800672a:	f003 ff2f 	bl	800a58c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 800672e:	2380      	movs	r3, #128	@ 0x80
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4854      	ldr	r0, [pc, #336]	@ (8006884 <MIC_Print+0x358>)
 8006734:	2200      	movs	r2, #0
 8006736:	0019      	movs	r1, r3
 8006738:	f003 ff28 	bl	800a58c <HAL_GPIO_WritePin>
  }
  if(dBc < 75 && dBc >= 70){//yellow
 800673c:	4b4a      	ldr	r3, [pc, #296]	@ (8006868 <MIC_Print+0x33c>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4952      	ldr	r1, [pc, #328]	@ (800688c <MIC_Print+0x360>)
 8006742:	1c18      	adds	r0, r3, #0
 8006744:	f7f9 fec2 	bl	80004cc <__aeabi_fcmplt>
 8006748:	1e03      	subs	r3, r0, #0
 800674a:	d01b      	beq.n	8006784 <MIC_Print+0x258>
 800674c:	4b46      	ldr	r3, [pc, #280]	@ (8006868 <MIC_Print+0x33c>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	494f      	ldr	r1, [pc, #316]	@ (8006890 <MIC_Print+0x364>)
 8006752:	1c18      	adds	r0, r3, #0
 8006754:	f7f9 fed8 	bl	8000508 <__aeabi_fcmpge>
 8006758:	1e03      	subs	r3, r0, #0
 800675a:	d013      	beq.n	8006784 <MIC_Print+0x258>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800675c:	4b49      	ldr	r3, [pc, #292]	@ (8006884 <MIC_Print+0x358>)
 800675e:	2200      	movs	r2, #0
 8006760:	2101      	movs	r1, #1
 8006762:	0018      	movs	r0, r3
 8006764:	f003 ff12 	bl	800a58c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8006768:	2380      	movs	r3, #128	@ 0x80
 800676a:	005b      	lsls	r3, r3, #1
 800676c:	4845      	ldr	r0, [pc, #276]	@ (8006884 <MIC_Print+0x358>)
 800676e:	2200      	movs	r2, #0
 8006770:	0019      	movs	r1, r3
 8006772:	f003 ff0b 	bl	800a58c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8006776:	2380      	movs	r3, #128	@ 0x80
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4842      	ldr	r0, [pc, #264]	@ (8006884 <MIC_Print+0x358>)
 800677c:	2201      	movs	r2, #1
 800677e:	0019      	movs	r1, r3
 8006780:	f003 ff04 	bl	800a58c <HAL_GPIO_WritePin>
  }
  if(dBc < 70 && dBc >= 65){//Green
 8006784:	4b38      	ldr	r3, [pc, #224]	@ (8006868 <MIC_Print+0x33c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4941      	ldr	r1, [pc, #260]	@ (8006890 <MIC_Print+0x364>)
 800678a:	1c18      	adds	r0, r3, #0
 800678c:	f7f9 fe9e 	bl	80004cc <__aeabi_fcmplt>
 8006790:	1e03      	subs	r3, r0, #0
 8006792:	d01b      	beq.n	80067cc <MIC_Print+0x2a0>
 8006794:	4b34      	ldr	r3, [pc, #208]	@ (8006868 <MIC_Print+0x33c>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	493e      	ldr	r1, [pc, #248]	@ (8006894 <MIC_Print+0x368>)
 800679a:	1c18      	adds	r0, r3, #0
 800679c:	f7f9 feb4 	bl	8000508 <__aeabi_fcmpge>
 80067a0:	1e03      	subs	r3, r0, #0
 80067a2:	d013      	beq.n	80067cc <MIC_Print+0x2a0>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 80067a4:	4b37      	ldr	r3, [pc, #220]	@ (8006884 <MIC_Print+0x358>)
 80067a6:	2201      	movs	r2, #1
 80067a8:	2101      	movs	r1, #1
 80067aa:	0018      	movs	r0, r3
 80067ac:	f003 feee 	bl	800a58c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 80067b0:	2380      	movs	r3, #128	@ 0x80
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	4833      	ldr	r0, [pc, #204]	@ (8006884 <MIC_Print+0x358>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	0019      	movs	r1, r3
 80067ba:	f003 fee7 	bl	800a58c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80067be:	2380      	movs	r3, #128	@ 0x80
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4830      	ldr	r0, [pc, #192]	@ (8006884 <MIC_Print+0x358>)
 80067c4:	2201      	movs	r2, #1
 80067c6:	0019      	movs	r1, r3
 80067c8:	f003 fee0 	bl	800a58c <HAL_GPIO_WritePin>
  }
  if(dBc < 65 && dBc >= 60){//blue
 80067cc:	4b26      	ldr	r3, [pc, #152]	@ (8006868 <MIC_Print+0x33c>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4930      	ldr	r1, [pc, #192]	@ (8006894 <MIC_Print+0x368>)
 80067d2:	1c18      	adds	r0, r3, #0
 80067d4:	f7f9 fe7a 	bl	80004cc <__aeabi_fcmplt>
 80067d8:	1e03      	subs	r3, r0, #0
 80067da:	d01b      	beq.n	8006814 <MIC_Print+0x2e8>
 80067dc:	4b22      	ldr	r3, [pc, #136]	@ (8006868 <MIC_Print+0x33c>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	492d      	ldr	r1, [pc, #180]	@ (8006898 <MIC_Print+0x36c>)
 80067e2:	1c18      	adds	r0, r3, #0
 80067e4:	f7f9 fe90 	bl	8000508 <__aeabi_fcmpge>
 80067e8:	1e03      	subs	r3, r0, #0
 80067ea:	d013      	beq.n	8006814 <MIC_Print+0x2e8>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 80067ec:	4b25      	ldr	r3, [pc, #148]	@ (8006884 <MIC_Print+0x358>)
 80067ee:	2201      	movs	r2, #1
 80067f0:	2101      	movs	r1, #1
 80067f2:	0018      	movs	r0, r3
 80067f4:	f003 feca 	bl	800a58c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 80067f8:	2380      	movs	r3, #128	@ 0x80
 80067fa:	005b      	lsls	r3, r3, #1
 80067fc:	4821      	ldr	r0, [pc, #132]	@ (8006884 <MIC_Print+0x358>)
 80067fe:	2201      	movs	r2, #1
 8006800:	0019      	movs	r1, r3
 8006802:	f003 fec3 	bl	800a58c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8006806:	2380      	movs	r3, #128	@ 0x80
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	481e      	ldr	r0, [pc, #120]	@ (8006884 <MIC_Print+0x358>)
 800680c:	2200      	movs	r2, #0
 800680e:	0019      	movs	r1, r3
 8006810:	f003 febc 	bl	800a58c <HAL_GPIO_WritePin>
  }
  if(dBc < 60){//light blue
 8006814:	4b14      	ldr	r3, [pc, #80]	@ (8006868 <MIC_Print+0x33c>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	491f      	ldr	r1, [pc, #124]	@ (8006898 <MIC_Print+0x36c>)
 800681a:	1c18      	adds	r0, r3, #0
 800681c:	f7f9 fe56 	bl	80004cc <__aeabi_fcmplt>
 8006820:	1e03      	subs	r3, r0, #0
 8006822:	d100      	bne.n	8006826 <MIC_Print+0x2fa>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
  }


  //FFT();
}
 8006824:	e013      	b.n	800684e <MIC_Print+0x322>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8006826:	4b17      	ldr	r3, [pc, #92]	@ (8006884 <MIC_Print+0x358>)
 8006828:	2201      	movs	r2, #1
 800682a:	2101      	movs	r1, #1
 800682c:	0018      	movs	r0, r3
 800682e:	f003 fead 	bl	800a58c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8006832:	2380      	movs	r3, #128	@ 0x80
 8006834:	005b      	lsls	r3, r3, #1
 8006836:	4813      	ldr	r0, [pc, #76]	@ (8006884 <MIC_Print+0x358>)
 8006838:	2200      	movs	r2, #0
 800683a:	0019      	movs	r1, r3
 800683c:	f003 fea6 	bl	800a58c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 8006840:	2380      	movs	r3, #128	@ 0x80
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	480f      	ldr	r0, [pc, #60]	@ (8006884 <MIC_Print+0x358>)
 8006846:	2200      	movs	r2, #0
 8006848:	0019      	movs	r1, r3
 800684a:	f003 fe9f 	bl	800a58c <HAL_GPIO_WritePin>
}
 800684e:	46c0      	nop			@ (mov r8, r8)
 8006850:	46bd      	mov	sp, r7
 8006852:	b004      	add	sp, #16
 8006854:	bdb0      	pop	{r4, r5, r7, pc}
 8006856:	46c0      	nop			@ (mov r8, r8)
 8006858:	08019dec 	.word	0x08019dec
 800685c:	08019de8 	.word	0x08019de8
 8006860:	20000d14 	.word	0x20000d14
 8006864:	20001d50 	.word	0x20001d50
 8006868:	20001d1c 	.word	0x20001d1c
 800686c:	20001d4c 	.word	0x20001d4c
 8006870:	20001d20 	.word	0x20001d20
 8006874:	20001d4d 	.word	0x20001d4d
 8006878:	20001d48 	.word	0x20001d48
 800687c:	41200000 	.word	0x41200000
 8006880:	42aa0000 	.word	0x42aa0000
 8006884:	50000400 	.word	0x50000400
 8006888:	42a00000 	.word	0x42a00000
 800688c:	42960000 	.word	0x42960000
 8006890:	428c0000 	.word	0x428c0000
 8006894:	42820000 	.word	0x42820000
 8006898:	42700000 	.word	0x42700000

0800689c <MIC_MeasurementDone>:

bool MIC_MeasurementDone(void) {
 800689c:	b580      	push	{r7, lr}
 800689e:	af00      	add	r7, sp, #0
  if(DataReady) {
 80068a0:	4b09      	ldr	r3, [pc, #36]	@ (80068c8 <MIC_MeasurementDone+0x2c>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <MIC_MeasurementDone+0x24>
    MIC_Print();
 80068aa:	f7ff fe3f 	bl	800652c <MIC_Print>
    Debug("MIC measurement is done with %i samples.", Samples);
 80068ae:	4b07      	ldr	r3, [pc, #28]	@ (80068cc <MIC_MeasurementDone+0x30>)
 80068b0:	881b      	ldrh	r3, [r3, #0]
 80068b2:	4a07      	ldr	r2, [pc, #28]	@ (80068d0 <MIC_MeasurementDone+0x34>)
 80068b4:	4907      	ldr	r1, [pc, #28]	@ (80068d4 <MIC_MeasurementDone+0x38>)
 80068b6:	2003      	movs	r0, #3
 80068b8:	f002 f8da 	bl	8008a70 <CreateLine>
    return true;
 80068bc:	2301      	movs	r3, #1
 80068be:	e000      	b.n	80068c2 <MIC_MeasurementDone+0x26>
  }
  return false;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	0018      	movs	r0, r3
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	20001d19 	.word	0x20001d19
 80068cc:	2000010c 	.word	0x2000010c
 80068d0:	08019df8 	.word	0x08019df8
 80068d4:	08019dd8 	.word	0x08019dd8

080068d8 <MIC_TestMeasurementDone>:
bool MIC_TestMeasurementDone(void) {
 80068d8:	b590      	push	{r4, r7, lr}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
  bool Check;
  if(DataReady) {
 80068de:	4b09      	ldr	r3, [pc, #36]	@ (8006904 <MIC_TestMeasurementDone+0x2c>)
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d007      	beq.n	80068f8 <MIC_TestMeasurementDone+0x20>
    Check = MIC_Check();
 80068e8:	1dfc      	adds	r4, r7, #7
 80068ea:	f7ff fdc9 	bl	8006480 <MIC_Check>
 80068ee:	0003      	movs	r3, r0
 80068f0:	7023      	strb	r3, [r4, #0]
    return Check;
 80068f2:	1dfb      	adds	r3, r7, #7
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	e000      	b.n	80068fa <MIC_TestMeasurementDone+0x22>
  }
  return false;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	0018      	movs	r0, r3
 80068fc:	46bd      	mov	sp, r7
 80068fe:	b003      	add	sp, #12
 8006900:	bd90      	pop	{r4, r7, pc}
 8006902:	46c0      	nop			@ (mov r8, r8)
 8006904:	20001d19 	.word	0x20001d19

08006908 <HAL_I2S_RxCpltCallback>:


// #TODO Also include half full callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef* hi2s) {
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  if (hi2s != I2SHandle)
 8006910:	4b10      	ldr	r3, [pc, #64]	@ (8006954 <HAL_I2S_RxCpltCallback+0x4c>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	429a      	cmp	r2, r3
 8006918:	d118      	bne.n	800694c <HAL_I2S_RxCpltCallback+0x44>
    return;

  if (StartUpDone) {
 800691a:	4b0f      	ldr	r3, [pc, #60]	@ (8006958 <HAL_I2S_RxCpltCallback+0x50>)
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b00      	cmp	r3, #0
 8006922:	d008      	beq.n	8006936 <HAL_I2S_RxCpltCallback+0x2e>
    HAL_I2S_DMAStop(I2SHandle);
 8006924:	4b0b      	ldr	r3, [pc, #44]	@ (8006954 <HAL_I2S_RxCpltCallback+0x4c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	0018      	movs	r0, r3
 800692a:	f006 f83d 	bl	800c9a8 <HAL_I2S_DMAStop>
    DataReady = true;
 800692e:	4b0b      	ldr	r3, [pc, #44]	@ (800695c <HAL_I2S_RxCpltCallback+0x54>)
 8006930:	2201      	movs	r2, #1
 8006932:	701a      	strb	r2, [r3, #0]
 8006934:	e00b      	b.n	800694e <HAL_I2S_RxCpltCallback+0x46>
    // MIC trigger pin is used to debug when the measurement has started.
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
    // TODO: Use different pin for MIC_Trigger.
  } else if (TimestampIsReached(StartupDoneTime)) {
 8006936:	4b0a      	ldr	r3, [pc, #40]	@ (8006960 <HAL_I2S_RxCpltCallback+0x58>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	0018      	movs	r0, r3
 800693c:	f002 f842 	bl	80089c4 <TimestampIsReached>
 8006940:	1e03      	subs	r3, r0, #0
 8006942:	d004      	beq.n	800694e <HAL_I2S_RxCpltCallback+0x46>
    StartUpDone = true;
 8006944:	4b04      	ldr	r3, [pc, #16]	@ (8006958 <HAL_I2S_RxCpltCallback+0x50>)
 8006946:	2201      	movs	r2, #1
 8006948:	701a      	strb	r2, [r3, #0]
 800694a:	e000      	b.n	800694e <HAL_I2S_RxCpltCallback+0x46>
    return;
 800694c:	46c0      	nop			@ (mov r8, r8)
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_SET);
  }
}
 800694e:	46bd      	mov	sp, r7
 8006950:	b002      	add	sp, #8
 8006952:	bd80      	pop	{r7, pc}
 8006954:	20000d10 	.word	0x20000d10
 8006958:	20001d18 	.word	0x20001d18
 800695c:	20001d19 	.word	0x20001d19
 8006960:	20001d14 	.word	0x20001d14

08006964 <MIC_GetDB>:

float MIC_GetDB(void) {
 8006964:	b590      	push	{r4, r7, lr}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
    float sum = 0.0f;
 800696a:	2300      	movs	r3, #0
 800696c:	60fb      	str	r3, [r7, #12]
    float dBValue = 0.0f;
 800696e:	2300      	movs	r3, #0
 8006970:	607b      	str	r3, [r7, #4]

    // Calculate the sum of the magnitudes in FFTResult
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 8006972:	230a      	movs	r3, #10
 8006974:	18fb      	adds	r3, r7, r3
 8006976:	2280      	movs	r2, #128	@ 0x80
 8006978:	0052      	lsls	r2, r2, #1
 800697a:	801a      	strh	r2, [r3, #0]
 800697c:	e019      	b.n	80069b2 <MIC_GetDB+0x4e>
      // Sum of squares of magnitudes
      sum += sample[i]*sample[i];
 800697e:	240a      	movs	r4, #10
 8006980:	193b      	adds	r3, r7, r4
 8006982:	881a      	ldrh	r2, [r3, #0]
 8006984:	4b2b      	ldr	r3, [pc, #172]	@ (8006a34 <MIC_GetDB+0xd0>)
 8006986:	0092      	lsls	r2, r2, #2
 8006988:	58d0      	ldr	r0, [r2, r3]
 800698a:	193b      	adds	r3, r7, r4
 800698c:	881a      	ldrh	r2, [r3, #0]
 800698e:	4b29      	ldr	r3, [pc, #164]	@ (8006a34 <MIC_GetDB+0xd0>)
 8006990:	0092      	lsls	r2, r2, #2
 8006992:	58d3      	ldr	r3, [r2, r3]
 8006994:	1c19      	adds	r1, r3, #0
 8006996:	f7fa fa81 	bl	8000e9c <__aeabi_fmul>
 800699a:	1c03      	adds	r3, r0, #0
 800699c:	1c19      	adds	r1, r3, #0
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f7f9 ff0c 	bl	80007bc <__aeabi_fadd>
 80069a4:	1c03      	adds	r3, r0, #0
 80069a6:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 80069a8:	193b      	adds	r3, r7, r4
 80069aa:	881a      	ldrh	r2, [r3, #0]
 80069ac:	193b      	adds	r3, r7, r4
 80069ae:	3201      	adds	r2, #1
 80069b0:	801a      	strh	r2, [r3, #0]
 80069b2:	230a      	movs	r3, #10
 80069b4:	18fb      	adds	r3, r7, r3
 80069b6:	881a      	ldrh	r2, [r3, #0]
 80069b8:	2380      	movs	r3, #128	@ 0x80
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	429a      	cmp	r2, r3
 80069be:	d3de      	bcc.n	800697e <MIC_GetDB+0x1a>
    }

    // Calculate the root mean square (RMS)
    float rms = sqrt(sum/(float)(NUMBER_OF_SAMPLES/2));
 80069c0:	2187      	movs	r1, #135	@ 0x87
 80069c2:	05c9      	lsls	r1, r1, #23
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f7fa f883 	bl	8000ad0 <__aeabi_fdiv>
 80069ca:	1c03      	adds	r3, r0, #0
 80069cc:	1c18      	adds	r0, r3, #0
 80069ce:	f7fc fcc7 	bl	8003360 <__aeabi_f2d>
 80069d2:	0002      	movs	r2, r0
 80069d4:	000b      	movs	r3, r1
 80069d6:	0010      	movs	r0, r2
 80069d8:	0019      	movs	r1, r3
 80069da:	f012 f9bf 	bl	8018d5c <sqrt>
 80069de:	0002      	movs	r2, r0
 80069e0:	000b      	movs	r3, r1
 80069e2:	0010      	movs	r0, r2
 80069e4:	0019      	movs	r1, r3
 80069e6:	f7fc fd03 	bl	80033f0 <__aeabi_d2f>
 80069ea:	1c03      	adds	r3, r0, #0
 80069ec:	603b      	str	r3, [r7, #0]

    // Convert the RMS value to dB
    dBValue = 20.0f * log10(rms) +120.0;
 80069ee:	6838      	ldr	r0, [r7, #0]
 80069f0:	f7fc fcb6 	bl	8003360 <__aeabi_f2d>
 80069f4:	0002      	movs	r2, r0
 80069f6:	000b      	movs	r3, r1
 80069f8:	0010      	movs	r0, r2
 80069fa:	0019      	movs	r1, r3
 80069fc:	f012 f978 	bl	8018cf0 <log10>
 8006a00:	2200      	movs	r2, #0
 8006a02:	4b0d      	ldr	r3, [pc, #52]	@ (8006a38 <MIC_GetDB+0xd4>)
 8006a04:	f7fb fd98 	bl	8002538 <__aeabi_dmul>
 8006a08:	0002      	movs	r2, r0
 8006a0a:	000b      	movs	r3, r1
 8006a0c:	0010      	movs	r0, r2
 8006a0e:	0019      	movs	r1, r3
 8006a10:	2200      	movs	r2, #0
 8006a12:	4b0a      	ldr	r3, [pc, #40]	@ (8006a3c <MIC_GetDB+0xd8>)
 8006a14:	f7fa fde8 	bl	80015e8 <__aeabi_dadd>
 8006a18:	0002      	movs	r2, r0
 8006a1a:	000b      	movs	r3, r1
 8006a1c:	0010      	movs	r0, r2
 8006a1e:	0019      	movs	r1, r3
 8006a20:	f7fc fce6 	bl	80033f0 <__aeabi_d2f>
 8006a24:	1c03      	adds	r3, r0, #0
 8006a26:	607b      	str	r3, [r7, #4]

    return dBValue;
 8006a28:	687b      	ldr	r3, [r7, #4]
}
 8006a2a:	1c18      	adds	r0, r3, #0
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	b005      	add	sp, #20
 8006a30:	bd90      	pop	{r4, r7, pc}
 8006a32:	46c0      	nop			@ (mov r8, r8)
 8006a34:	20001d50 	.word	0x20001d50
 8006a38:	40340000 	.word	0x40340000
 8006a3c:	405e0000 	.word	0x405e0000

08006a40 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d113      	bne.n	8006a86 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	22fe      	movs	r2, #254	@ 0xfe
 8006a62:	0592      	lsls	r2, r2, #22
 8006a64:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4a1a      	ldr	r2, [pc, #104]	@ (8006ad4 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8006a6a:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8006ad8 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8006a70:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	4a19      	ldr	r2, [pc, #100]	@ (8006adc <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 8006a76:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4a19      	ldr	r2, [pc, #100]	@ (8006ae0 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8006a7c:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	4a18      	ldr	r2, [pc, #96]	@ (8006ae4 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 8006a82:	61da      	str	r2, [r3, #28]
 8006a84:	e011      	b.n	8006aaa <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	4a17      	ldr	r2, [pc, #92]	@ (8006ae8 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8006a8a:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4a17      	ldr	r2, [pc, #92]	@ (8006aec <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8006a90:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	4a16      	ldr	r2, [pc, #88]	@ (8006af0 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 8006a96:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	4a16      	ldr	r2, [pc, #88]	@ (8006af4 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8006a9c:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	4a15      	ldr	r2, [pc, #84]	@ (8006af8 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 8006aa2:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	4a15      	ldr	r2, [pc, #84]	@ (8006afc <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8006aa8:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	4a14      	ldr	r2, [pc, #80]	@ (8006b00 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 8006aae:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4a14      	ldr	r2, [pc, #80]	@ (8006b04 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8006ab4:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	4a12      	ldr	r2, [pc, #72]	@ (8006b04 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8006aba:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4a12      	ldr	r2, [pc, #72]	@ (8006b08 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8006ac0:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	0018      	movs	r0, r3
 8006ac6:	f000 f831 	bl	8006b2c <GasIndexAlgorithm_reset>
}
 8006aca:	46c0      	nop			@ (mov r8, r8)
 8006acc:	46bd      	mov	sp, r7
 8006ace:	b004      	add	sp, #16
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	46c0      	nop			@ (mov r8, r8)
 8006ad4:	00002710 	.word	0x00002710
 8006ad8:	44340000 	.word	0x44340000
 8006adc:	46859800 	.word	0x46859800
 8006ae0:	46a05000 	.word	0x46a05000
 8006ae4:	41f00000 	.word	0x41f00000
 8006ae8:	42c80000 	.word	0x42c80000
 8006aec:	00004e20 	.word	0x00004e20
 8006af0:	43340000 	.word	0x43340000
 8006af4:	4528c000 	.word	0x4528c000
 8006af8:	45a32000 	.word	0x45a32000
 8006afc:	43aa0000 	.word	0x43aa0000
 8006b00:	43660000 	.word	0x43660000
 8006b04:	41400000 	.word	0x41400000
 8006b08:	42480000 	.word	0x42480000

08006b0c <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 8006b16:	22fe      	movs	r2, #254	@ 0xfe
 8006b18:	0592      	lsls	r2, r2, #22
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	0018      	movs	r0, r3
 8006b20:	f7ff ff8e 	bl	8006a40 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 8006b24:	46c0      	nop			@ (mov r8, r8)
 8006b26:	46bd      	mov	sp, r7
 8006b28:	b002      	add	sp, #8
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	0018      	movs	r0, r3
 8006b4a:	f000 f805 	bl	8006b58 <GasIndexAlgorithm__init_instances>
}
 8006b4e:	46c0      	nop			@ (mov r8, r8)
 8006b50:	46bd      	mov	sp, r7
 8006b52:	b002      	add	sp, #8
 8006b54:	bd80      	pop	{r7, pc}
	...

08006b58 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8006b58:	b590      	push	{r4, r7, lr}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	0018      	movs	r0, r3
 8006b64:	f000 f8e8 	bl	8006d38 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	0018      	movs	r0, r3
 8006b6c:	f000 f9a6 	bl	8006ebc <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8006b70:	1c04      	adds	r4, r0, #0
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	0018      	movs	r0, r3
 8006b76:	f000 f9ab 	bl	8006ed0 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8006b7a:	1c02      	adds	r2, r0, #0
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	1c21      	adds	r1, r4, #0
 8006b80:	0018      	movs	r0, r3
 8006b82:	f000 fc3b 	bl	80073fc <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d107      	bne.n	8006b9e <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8006b8e:	23fe      	movs	r3, #254	@ 0xfe
 8006b90:	059b      	lsls	r3, r3, #22
 8006b92:	4a0a      	ldr	r2, [pc, #40]	@ (8006bbc <GasIndexAlgorithm__init_instances+0x64>)
 8006b94:	490a      	ldr	r1, [pc, #40]	@ (8006bc0 <GasIndexAlgorithm__init_instances+0x68>)
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fc86 	bl	80074a8 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 8006b9c:	e005      	b.n	8006baa <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8006b9e:	4b09      	ldr	r3, [pc, #36]	@ (8006bc4 <GasIndexAlgorithm__init_instances+0x6c>)
 8006ba0:	4a09      	ldr	r2, [pc, #36]	@ (8006bc8 <GasIndexAlgorithm__init_instances+0x70>)
 8006ba2:	490a      	ldr	r1, [pc, #40]	@ (8006bcc <GasIndexAlgorithm__init_instances+0x74>)
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fc7f 	bl	80074a8 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	0018      	movs	r0, r3
 8006bae:	f000 fd35 	bl	800761c <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 8006bb2:	46c0      	nop			@ (mov r8, r8)
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	b003      	add	sp, #12
 8006bb8:	bd90      	pop	{r4, r7, pc}
 8006bba:	46c0      	nop			@ (mov r8, r8)
 8006bbc:	bc257a78 	.word	0xbc257a78
 8006bc0:	44198000 	.word	0x44198000
 8006bc4:	42c80000 	.word	0x42c80000
 8006bc8:	bbd4fdf4 	.word	0xbbd4fdf4
 8006bcc:	43550000 	.word	0x43550000

08006bd0 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 8006bd0:	b590      	push	{r4, r7, lr}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006be0:	4952      	ldr	r1, [pc, #328]	@ (8006d2c <GasIndexAlgorithm_process+0x15c>)
 8006be2:	1c18      	adds	r0, r3, #0
 8006be4:	f7f9 fc7c 	bl	80004e0 <__aeabi_fcmple>
 8006be8:	1e03      	subs	r3, r0, #0
 8006bea:	d00c      	beq.n	8006c06 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	1c19      	adds	r1, r3, #0
 8006bf6:	1c10      	adds	r0, r2, #0
 8006bf8:	f7f9 fde0 	bl	80007bc <__aeabi_fadd>
 8006bfc:	1c03      	adds	r3, r0, #0
 8006bfe:	1c1a      	adds	r2, r3, #0
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c04:	e080      	b.n	8006d08 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	dd25      	ble.n	8006c58 <GasIndexAlgorithm_process+0x88>
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	4a48      	ldr	r2, [pc, #288]	@ (8006d30 <GasIndexAlgorithm_process+0x160>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	dc21      	bgt.n	8006c58 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	dc04      	bgt.n	8006c28 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	3301      	adds	r3, #1
 8006c24:	60bb      	str	r3, [r7, #8]
 8006c26:	e00d      	b.n	8006c44 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	4a41      	ldr	r2, [pc, #260]	@ (8006d34 <GasIndexAlgorithm_process+0x164>)
 8006c2e:	4694      	mov	ip, r2
 8006c30:	4463      	add	r3, ip
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	dd05      	ble.n	8006c44 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	4a3d      	ldr	r2, [pc, #244]	@ (8006d34 <GasIndexAlgorithm_process+0x164>)
 8006c3e:	4694      	mov	ip, r2
 8006c40:	4463      	add	r3, ip
 8006c42:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	0018      	movs	r0, r3
 8006c4e:	f7fa fc3d 	bl	80014cc <__aeabi_i2f>
 8006c52:	1c02      	adds	r2, r0, #0
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d005      	beq.n	8006c6c <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	0018      	movs	r0, r3
 8006c64:	f000 f945 	bl	8006ef2 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 8006c68:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 8006c6a:	d014      	beq.n	8006c96 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	1c11      	adds	r1, r2, #0
 8006c74:	0018      	movs	r0, r3
 8006c76:	f000 fbd1 	bl	800741c <GasIndexAlgorithm__mox_model__process>
 8006c7a:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	1c11      	adds	r1, r2, #0
 8006c88:	0018      	movs	r0, r3
 8006c8a:	f000 fc25 	bl	80074d8 <GasIndexAlgorithm__sigmoid_scaled__process>
 8006c8e:	1c02      	adds	r2, r0, #0
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c94:	e003      	b.n	8006c9e <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	689a      	ldr	r2, [r3, #8]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	1c11      	adds	r1, r2, #0
 8006ca6:	0018      	movs	r0, r3
 8006ca8:	f000 fcec 	bl	8007684 <GasIndexAlgorithm__adaptive_lowpass__process>
 8006cac:	1c02      	adds	r2, r0, #0
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cb6:	21fc      	movs	r1, #252	@ 0xfc
 8006cb8:	0589      	lsls	r1, r1, #22
 8006cba:	1c18      	adds	r0, r3, #0
 8006cbc:	f7f9 fc06 	bl	80004cc <__aeabi_fcmplt>
 8006cc0:	1e03      	subs	r3, r0, #0
 8006cc2:	d003      	beq.n	8006ccc <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	22fc      	movs	r2, #252	@ 0xfc
 8006cc8:	0592      	lsls	r2, r2, #22
 8006cca:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	1c18      	adds	r0, r3, #0
 8006cd4:	f7f9 fc0e 	bl	80004f4 <__aeabi_fcmpgt>
 8006cd8:	1e03      	subs	r3, r0, #0
 8006cda:	d015      	beq.n	8006d08 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	1c11      	adds	r1, r2, #0
 8006ce4:	0018      	movs	r0, r3
 8006ce6:	f000 fa4f 	bl	8007188 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	0018      	movs	r0, r3
 8006cee:	f000 f8e5 	bl	8006ebc <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8006cf2:	1c04      	adds	r4, r0, #0
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	0018      	movs	r0, r3
 8006cf8:	f000 f8ea 	bl	8006ed0 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8006cfc:	1c02      	adds	r2, r0, #0
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	1c21      	adds	r1, r4, #0
 8006d02:	0018      	movs	r0, r3
 8006d04:	f000 fb7a 	bl	80073fc <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d0c:	21fc      	movs	r1, #252	@ 0xfc
 8006d0e:	0589      	lsls	r1, r1, #22
 8006d10:	1c18      	adds	r0, r3, #0
 8006d12:	f7f9 fd53 	bl	80007bc <__aeabi_fadd>
 8006d16:	1c03      	adds	r3, r0, #0
 8006d18:	1c18      	adds	r0, r3, #0
 8006d1a:	f7fa fbb7 	bl	800148c <__aeabi_f2iz>
 8006d1e:	0002      	movs	r2, r0
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	601a      	str	r2, [r3, #0]
    return;
 8006d24:	46c0      	nop			@ (mov r8, r8)
}
 8006d26:	46bd      	mov	sp, r7
 8006d28:	b005      	add	sp, #20
 8006d2a:	bd90      	pop	{r4, r7, pc}
 8006d2c:	42340000 	.word	0x42340000
 8006d30:	0000fde7 	.word	0x0000fde7
 8006d34:	00007fff 	.word	0x00007fff

08006d38 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 8006d38:	b5b0      	push	{r4, r5, r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	223c      	movs	r2, #60	@ 0x3c
 8006d44:	2100      	movs	r1, #0
 8006d46:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	4952      	ldr	r1, [pc, #328]	@ (8006eac <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006d62:	1c18      	adds	r0, r3, #0
 8006d64:	f7f9 feb4 	bl	8000ad0 <__aeabi_fdiv>
 8006d68:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8006d6a:	2188      	movs	r1, #136	@ 0x88
 8006d6c:	05c9      	lsls	r1, r1, #23
 8006d6e:	1c18      	adds	r0, r3, #0
 8006d70:	f7fa f894 	bl	8000e9c <__aeabi_fmul>
 8006d74:	1c03      	adds	r3, r0, #0
 8006d76:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	494a      	ldr	r1, [pc, #296]	@ (8006eac <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006d82:	1c18      	adds	r0, r3, #0
 8006d84:	f7f9 fea4 	bl	8000ad0 <__aeabi_fdiv>
 8006d88:	1c03      	adds	r3, r0, #0
 8006d8a:	1c19      	adds	r1, r3, #0
 8006d8c:	1c20      	adds	r0, r4, #0
 8006d8e:	f7f9 fd15 	bl	80007bc <__aeabi_fadd>
 8006d92:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8006d94:	1c19      	adds	r1, r3, #0
 8006d96:	1c28      	adds	r0, r5, #0
 8006d98:	f7f9 fe9a 	bl	8000ad0 <__aeabi_fdiv>
 8006d9c:	1c03      	adds	r3, r0, #0
 8006d9e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	4940      	ldr	r1, [pc, #256]	@ (8006eac <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006daa:	1c18      	adds	r0, r3, #0
 8006dac:	f7f9 fe90 	bl	8000ad0 <__aeabi_fdiv>
 8006db0:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8006db2:	2185      	movs	r1, #133	@ 0x85
 8006db4:	05c9      	lsls	r1, r1, #23
 8006db6:	1c18      	adds	r0, r3, #0
 8006db8:	f7fa f870 	bl	8000e9c <__aeabi_fmul>
 8006dbc:	1c03      	adds	r3, r0, #0
 8006dbe:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	4938      	ldr	r1, [pc, #224]	@ (8006eac <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006dca:	1c18      	adds	r0, r3, #0
 8006dcc:	f7f9 fe80 	bl	8000ad0 <__aeabi_fdiv>
 8006dd0:	1c03      	adds	r3, r0, #0
 8006dd2:	1c19      	adds	r1, r3, #0
 8006dd4:	1c20      	adds	r0, r4, #0
 8006dd6:	f7f9 fcf1 	bl	80007bc <__aeabi_fadd>
 8006dda:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8006ddc:	1c19      	adds	r1, r3, #0
 8006dde:	1c28      	adds	r0, r5, #0
 8006de0:	f7f9 fe76 	bl	8000ad0 <__aeabi_fdiv>
 8006de4:	1c03      	adds	r3, r0, #0
 8006de6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d118      	bne.n	8006e26 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8006df8:	2188      	movs	r1, #136	@ 0x88
 8006dfa:	05c9      	lsls	r1, r1, #23
 8006dfc:	1c18      	adds	r0, r3, #0
 8006dfe:	f7fa f84d 	bl	8000e9c <__aeabi_fmul>
 8006e02:	1c03      	adds	r3, r0, #0
 8006e04:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 8006e0a:	4929      	ldr	r1, [pc, #164]	@ (8006eb0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8006e0c:	1c18      	adds	r0, r3, #0
 8006e0e:	f7f9 fcd5 	bl	80007bc <__aeabi_fadd>
 8006e12:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8006e14:	1c19      	adds	r1, r3, #0
 8006e16:	1c20      	adds	r0, r4, #0
 8006e18:	f7f9 fe5a 	bl	8000ad0 <__aeabi_fdiv>
 8006e1c:	1c03      	adds	r3, r0, #0
 8006e1e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	655a      	str	r2, [r3, #84]	@ 0x54
 8006e24:	e017      	b.n	8006e56 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8006e2a:	2188      	movs	r1, #136	@ 0x88
 8006e2c:	05c9      	lsls	r1, r1, #23
 8006e2e:	1c18      	adds	r0, r3, #0
 8006e30:	f7fa f834 	bl	8000e9c <__aeabi_fmul>
 8006e34:	1c03      	adds	r3, r0, #0
 8006e36:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8006e3c:	491d      	ldr	r1, [pc, #116]	@ (8006eb4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 8006e3e:	1c18      	adds	r0, r3, #0
 8006e40:	f7f9 fcbc 	bl	80007bc <__aeabi_fadd>
 8006e44:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8006e46:	1c19      	adds	r1, r3, #0
 8006e48:	1c20      	adds	r0, r4, #0
 8006e4a:	f7f9 fe41 	bl	8000ad0 <__aeabi_fdiv>
 8006e4e:	1c03      	adds	r3, r0, #0
 8006e50:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8006e5a:	2185      	movs	r1, #133	@ 0x85
 8006e5c:	05c9      	lsls	r1, r1, #23
 8006e5e:	1c18      	adds	r0, r3, #0
 8006e60:	f7fa f81c 	bl	8000e9c <__aeabi_fmul>
 8006e64:	1c03      	adds	r3, r0, #0
 8006e66:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	4912      	ldr	r1, [pc, #72]	@ (8006eb8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 8006e6e:	1c18      	adds	r0, r3, #0
 8006e70:	f7f9 fca4 	bl	80007bc <__aeabi_fadd>
 8006e74:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 8006e76:	1c19      	adds	r1, r3, #0
 8006e78:	1c20      	adds	r0, r4, #0
 8006e7a:	f7f9 fe29 	bl	8000ad0 <__aeabi_fdiv>
 8006e7e:	1c03      	adds	r3, r0, #0
 8006e80:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8006ea4:	46c0      	nop			@ (mov r8, r8)
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	b002      	add	sp, #8
 8006eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8006eac:	45610000 	.word	0x45610000
 8006eb0:	44960000 	.word	0x44960000
 8006eb4:	41a00000 	.word	0x41a00000
 8006eb8:	451c4000 	.word	0x451c4000

08006ebc <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8006ec8:	1c18      	adds	r0, r3, #0
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	b002      	add	sp, #8
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8006ee0:	1c19      	adds	r1, r3, #0
 8006ee2:	1c10      	adds	r0, r2, #0
 8006ee4:	f7f9 fc6a 	bl	80007bc <__aeabi_fadd>
 8006ee8:	1c03      	adds	r3, r0, #0
}
 8006eea:	1c18      	adds	r0, r3, #0
 8006eec:	46bd      	mov	sp, r7
 8006eee:	b002      	add	sp, #8
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b082      	sub	sp, #8
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	223c      	movs	r2, #60	@ 0x3c
 8006efe:	5c9b      	ldrb	r3, [r3, r2]
}
 8006f00:	0018      	movs	r0, r3
 8006f02:	46bd      	mov	sp, r7
 8006f04:	b002      	add	sp, #8
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8006f08:	b5b0      	push	{r4, r5, r7, lr}
 8006f0a:	b08c      	sub	sp, #48	@ 0x30
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8006f14:	1c19      	adds	r1, r3, #0
 8006f16:	4895      	ldr	r0, [pc, #596]	@ (800716c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8006f18:	f7fa f8fe 	bl	8001118 <__aeabi_fsub>
 8006f1c:	1c03      	adds	r3, r0, #0
 8006f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f24:	1c19      	adds	r1, r3, #0
 8006f26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f28:	f7f9 fae4 	bl	80004f4 <__aeabi_fcmpgt>
 8006f2c:	1e03      	subs	r3, r0, #0
 8006f2e:	d00b      	beq.n	8006f48 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8006f38:	1c19      	adds	r1, r3, #0
 8006f3a:	1c10      	adds	r0, r2, #0
 8006f3c:	f7f9 fc3e 	bl	80007bc <__aeabi_fadd>
 8006f40:	1c03      	adds	r3, r0, #0
 8006f42:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f4c:	1c19      	adds	r1, r3, #0
 8006f4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f50:	f7f9 fad0 	bl	80004f4 <__aeabi_fcmpgt>
 8006f54:	1e03      	subs	r3, r0, #0
 8006f56:	d00b      	beq.n	8006f70 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8006f60:	1c19      	adds	r1, r3, #0
 8006f62:	1c10      	adds	r0, r2, #0
 8006f64:	f7f9 fc2a 	bl	80007bc <__aeabi_fadd>
 8006f68:	1c03      	adds	r3, r0, #0
 8006f6a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6959      	ldr	r1, [r3, #20]
 8006f74:	4a7e      	ldr	r2, [pc, #504]	@ (8007170 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	0018      	movs	r0, r3
 8006f7a:	f000 f9f1 	bl	8007360 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	1c11      	adds	r1, r2, #0
 8006f86:	0018      	movs	r0, r3
 8006f88:	f000 f9fa 	bl	8007380 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006f8c:	1c03      	adds	r3, r0, #0
 8006f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8006f9c:	1c19      	adds	r1, r3, #0
 8006f9e:	1c10      	adds	r0, r2, #0
 8006fa0:	f7fa f8ba 	bl	8001118 <__aeabi_fsub>
 8006fa4:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8006fa6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fa8:	1c18      	adds	r0, r3, #0
 8006faa:	f7f9 ff77 	bl	8000e9c <__aeabi_fmul>
 8006fae:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8006fb0:	1c19      	adds	r1, r3, #0
 8006fb2:	1c20      	adds	r0, r4, #0
 8006fb4:	f7f9 fc02 	bl	80007bc <__aeabi_fadd>
 8006fb8:	1c03      	adds	r3, r0, #0
 8006fba:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8006fc4:	1c19      	adds	r1, r3, #0
 8006fc6:	486b      	ldr	r0, [pc, #428]	@ (8007174 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8006fc8:	f7fa f8a6 	bl	8001118 <__aeabi_fsub>
 8006fcc:	1c03      	adds	r3, r0, #0
 8006fce:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	1c11      	adds	r1, r2, #0
 8006fd8:	0018      	movs	r0, r3
 8006fda:	f000 f9d1 	bl	8007380 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006fde:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8006fe0:	1c19      	adds	r1, r3, #0
 8006fe2:	1c28      	adds	r0, r5, #0
 8006fe4:	f7f9 ff5a 	bl	8000e9c <__aeabi_fmul>
 8006fe8:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8006fea:	1c19      	adds	r1, r3, #0
 8006fec:	1c20      	adds	r0, r4, #0
 8006fee:	f7f9 fbe5 	bl	80007bc <__aeabi_fadd>
 8006ff2:	1c03      	adds	r3, r0, #0
 8006ff4:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8006ff6:	4a60      	ldr	r2, [pc, #384]	@ (8007178 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8006ff8:	6a39      	ldr	r1, [r7, #32]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	0018      	movs	r0, r3
 8006ffe:	f000 f9af 	bl	8007360 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	1c11      	adds	r1, r2, #0
 800700a:	0018      	movs	r0, r3
 800700c:	f000 f9b8 	bl	8007380 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007010:	1c03      	adds	r3, r0, #0
 8007012:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8007014:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007016:	69f8      	ldr	r0, [r7, #28]
 8007018:	f7f9 ff40 	bl	8000e9c <__aeabi_fmul>
 800701c:	1c03      	adds	r3, r0, #0
 800701e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6999      	ldr	r1, [r3, #24]
 8007028:	4a51      	ldr	r2, [pc, #324]	@ (8007170 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	0018      	movs	r0, r3
 800702e:	f000 f997 	bl	8007360 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	1c11      	adds	r1, r2, #0
 800703a:	0018      	movs	r0, r3
 800703c:	f000 f9a0 	bl	8007380 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007040:	1c03      	adds	r3, r0, #0
 8007042:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8007050:	1c19      	adds	r1, r3, #0
 8007052:	1c10      	adds	r0, r2, #0
 8007054:	f7fa f860 	bl	8001118 <__aeabi_fsub>
 8007058:	1c03      	adds	r3, r0, #0
 800705a:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800705c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800705e:	69b8      	ldr	r0, [r7, #24]
 8007060:	f7fa f85a 	bl	8001118 <__aeabi_fsub>
 8007064:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8007066:	1c19      	adds	r1, r3, #0
 8007068:	1c28      	adds	r0, r5, #0
 800706a:	f7f9 ff17 	bl	8000e9c <__aeabi_fmul>
 800706e:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8007070:	1c19      	adds	r1, r3, #0
 8007072:	1c20      	adds	r0, r4, #0
 8007074:	f7f9 fba2 	bl	80007bc <__aeabi_fadd>
 8007078:	1c03      	adds	r3, r0, #0
 800707a:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8007084:	1c19      	adds	r1, r3, #0
 8007086:	483b      	ldr	r0, [pc, #236]	@ (8007174 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8007088:	f7fa f846 	bl	8001118 <__aeabi_fsub>
 800708c:	1c03      	adds	r3, r0, #0
 800708e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	1c11      	adds	r1, r2, #0
 8007098:	0018      	movs	r0, r3
 800709a:	f000 f971 	bl	8007380 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800709e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 80070a0:	1c19      	adds	r1, r3, #0
 80070a2:	1c28      	adds	r0, r5, #0
 80070a4:	f7f9 fefa 	bl	8000e9c <__aeabi_fmul>
 80070a8:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 80070aa:	1c19      	adds	r1, r3, #0
 80070ac:	1c20      	adds	r0, r4, #0
 80070ae:	f7f9 fb85 	bl	80007bc <__aeabi_fadd>
 80070b2:	1c03      	adds	r3, r0, #0
 80070b4:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80070b6:	4a30      	ldr	r2, [pc, #192]	@ (8007178 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 80070b8:	6939      	ldr	r1, [r7, #16]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	0018      	movs	r0, r3
 80070be:	f000 f94f 	bl	8007360 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	1c11      	adds	r1, r2, #0
 80070ca:	0018      	movs	r0, r3
 80070cc:	f000 f958 	bl	8007380 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80070d0:	1c03      	adds	r3, r0, #0
 80070d2:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 80070d4:	6979      	ldr	r1, [r7, #20]
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f7f9 fee0 	bl	8000e9c <__aeabi_fmul>
 80070dc:	1c03      	adds	r3, r0, #0
 80070de:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	4923      	ldr	r1, [pc, #140]	@ (800717c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 80070ee:	1c18      	adds	r0, r3, #0
 80070f0:	f7f9 fcee 	bl	8000ad0 <__aeabi_fdiv>
 80070f4:	1c03      	adds	r3, r0, #0
 80070f6:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 80070f8:	69f9      	ldr	r1, [r7, #28]
 80070fa:	20fe      	movs	r0, #254	@ 0xfe
 80070fc:	0580      	lsls	r0, r0, #22
 80070fe:	f7fa f80b 	bl	8001118 <__aeabi_fsub>
 8007102:	1c03      	adds	r3, r0, #0
 8007104:	491e      	ldr	r1, [pc, #120]	@ (8007180 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 8007106:	1c18      	adds	r0, r3, #0
 8007108:	f7f9 fec8 	bl	8000e9c <__aeabi_fmul>
 800710c:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800710e:	491d      	ldr	r1, [pc, #116]	@ (8007184 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8007110:	1c18      	adds	r0, r3, #0
 8007112:	f7fa f801 	bl	8001118 <__aeabi_fsub>
 8007116:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8007118:	1c19      	adds	r1, r3, #0
 800711a:	1c28      	adds	r0, r5, #0
 800711c:	f7f9 febe 	bl	8000e9c <__aeabi_fmul>
 8007120:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8007122:	1c19      	adds	r1, r3, #0
 8007124:	1c20      	adds	r0, r4, #0
 8007126:	f7f9 fb49 	bl	80007bc <__aeabi_fadd>
 800712a:	1c03      	adds	r3, r0, #0
 800712c:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007136:	2100      	movs	r1, #0
 8007138:	1c18      	adds	r0, r3, #0
 800713a:	f7f9 f9c7 	bl	80004cc <__aeabi_fcmplt>
 800713e:	1e03      	subs	r3, r0, #0
 8007140:	d002      	beq.n	8007148 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8007150:	1c19      	adds	r1, r3, #0
 8007152:	1c10      	adds	r0, r2, #0
 8007154:	f7f9 f9ce 	bl	80004f4 <__aeabi_fcmpgt>
 8007158:	1e03      	subs	r3, r0, #0
 800715a:	d100      	bne.n	800715e <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800715c:	e002      	b.n	8007164 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007164:	46c0      	nop			@ (mov r8, r8)
 8007166:	46bd      	mov	sp, r7
 8007168:	b00c      	add	sp, #48	@ 0x30
 800716a:	bdb0      	pop	{r4, r5, r7, pc}
 800716c:	46fffe00 	.word	0x46fffe00
 8007170:	3c23d70a 	.word	0x3c23d70a
 8007174:	43ff0000 	.word	0x43ff0000
 8007178:	3db851ec 	.word	0x3db851ec
 800717c:	42700000 	.word	0x42700000
 8007180:	3fa66666 	.word	0x3fa66666
 8007184:	3e99999a 	.word	0x3e99999a

08007188 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8007188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	223c      	movs	r2, #60	@ 0x3c
 8007196:	5c9b      	ldrb	r3, [r3, r2]
 8007198:	2201      	movs	r2, #1
 800719a:	4053      	eors	r3, r2
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00a      	beq.n	80071b8 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	223c      	movs	r2, #60	@ 0x3c
 80071a6:	2101      	movs	r1, #1
 80071a8:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 80071b6:	e0c8      	b.n	800734a <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071bc:	4965      	ldr	r1, [pc, #404]	@ (8007354 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 80071be:	1c18      	adds	r0, r3, #0
 80071c0:	f7f9 f9a2 	bl	8000508 <__aeabi_fcmpge>
 80071c4:	1e03      	subs	r3, r0, #0
 80071c6:	d107      	bne.n	80071d8 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 80071cc:	4962      	ldr	r1, [pc, #392]	@ (8007358 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 80071ce:	1c18      	adds	r0, r3, #0
 80071d0:	f7f9 f986 	bl	80004e0 <__aeabi_fcmple>
 80071d4:	1e03      	subs	r3, r0, #0
 80071d6:	d00e      	beq.n	80071f6 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 80071e0:	1c19      	adds	r1, r3, #0
 80071e2:	1c10      	adds	r0, r2, #0
 80071e4:	f7f9 faea 	bl	80007bc <__aeabi_fadd>
 80071e8:	1c03      	adds	r3, r0, #0
 80071ea:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071fa:	1c19      	adds	r1, r3, #0
 80071fc:	6838      	ldr	r0, [r7, #0]
 80071fe:	f7f9 ff8b 	bl	8001118 <__aeabi_fsub>
 8007202:	1c03      	adds	r3, r0, #0
 8007204:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	0018      	movs	r0, r3
 800720a:	f7ff fe7d 	bl	8006f08 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007212:	1c19      	adds	r1, r3, #0
 8007214:	6838      	ldr	r0, [r7, #0]
 8007216:	f7f9 ff7f 	bl	8001118 <__aeabi_fsub>
 800721a:	1c03      	adds	r3, r0, #0
 800721c:	2185      	movs	r1, #133	@ 0x85
 800721e:	05c9      	lsls	r1, r1, #23
 8007220:	1c18      	adds	r0, r3, #0
 8007222:	f7f9 fc55 	bl	8000ad0 <__aeabi_fdiv>
 8007226:	1c03      	adds	r3, r0, #0
 8007228:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800722a:	2100      	movs	r1, #0
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f7f9 f94d 	bl	80004cc <__aeabi_fcmplt>
 8007232:	1e03      	subs	r3, r0, #0
 8007234:	d008      	beq.n	8007248 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800723a:	68f9      	ldr	r1, [r7, #12]
 800723c:	1c18      	adds	r0, r3, #0
 800723e:	f7f9 ff6b 	bl	8001118 <__aeabi_fsub>
 8007242:	1c03      	adds	r3, r0, #0
 8007244:	617b      	str	r3, [r7, #20]
 8007246:	e007      	b.n	8007258 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800724c:	1c19      	adds	r1, r3, #0
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f7f9 fab4 	bl	80007bc <__aeabi_fadd>
 8007254:	1c03      	adds	r3, r0, #0
 8007256:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 8007258:	23fe      	movs	r3, #254	@ 0xfe
 800725a:	059b      	lsls	r3, r3, #22
 800725c:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800725e:	493f      	ldr	r1, [pc, #252]	@ (800735c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007260:	6978      	ldr	r0, [r7, #20]
 8007262:	f7f9 f947 	bl	80004f4 <__aeabi_fcmpgt>
 8007266:	1e03      	subs	r3, r0, #0
 8007268:	d010      	beq.n	800728c <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800726a:	493c      	ldr	r1, [pc, #240]	@ (800735c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800726c:	6978      	ldr	r0, [r7, #20]
 800726e:	f7f9 fc2f 	bl	8000ad0 <__aeabi_fdiv>
 8007272:	1c03      	adds	r3, r0, #0
 8007274:	1c1c      	adds	r4, r3, #0
 8007276:	4939      	ldr	r1, [pc, #228]	@ (800735c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007278:	6978      	ldr	r0, [r7, #20]
 800727a:	f7f9 fc29 	bl	8000ad0 <__aeabi_fdiv>
 800727e:	1c03      	adds	r3, r0, #0
 8007280:	1c19      	adds	r1, r3, #0
 8007282:	1c20      	adds	r0, r4, #0
 8007284:	f7f9 fe0a 	bl	8000e9c <__aeabi_fmul>
 8007288:	1c03      	adds	r3, r0, #0
 800728a:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8007290:	1c19      	adds	r1, r3, #0
 8007292:	2085      	movs	r0, #133	@ 0x85
 8007294:	05c0      	lsls	r0, r0, #23
 8007296:	f7f9 ff3f 	bl	8001118 <__aeabi_fsub>
 800729a:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800729c:	6939      	ldr	r1, [r7, #16]
 800729e:	1c18      	adds	r0, r3, #0
 80072a0:	f7f9 fdfc 	bl	8000e9c <__aeabi_fmul>
 80072a4:	1c03      	adds	r3, r0, #0
 80072a6:	1c18      	adds	r0, r3, #0
 80072a8:	f011 fda6 	bl	8018df8 <sqrtf>
 80072ac:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80072b6:	2185      	movs	r1, #133	@ 0x85
 80072b8:	05c9      	lsls	r1, r1, #23
 80072ba:	6938      	ldr	r0, [r7, #16]
 80072bc:	f7f9 fdee 	bl	8000e9c <__aeabi_fmul>
 80072c0:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 80072c2:	1c19      	adds	r1, r3, #0
 80072c4:	1c28      	adds	r0, r5, #0
 80072c6:	f7f9 fc03 	bl	8000ad0 <__aeabi_fdiv>
 80072ca:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 80072cc:	1c19      	adds	r1, r3, #0
 80072ce:	1c20      	adds	r0, r4, #0
 80072d0:	f7f9 fde4 	bl	8000e9c <__aeabi_fmul>
 80072d4:	1c03      	adds	r3, r0, #0
 80072d6:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072dc:	68f9      	ldr	r1, [r7, #12]
 80072de:	1c18      	adds	r0, r3, #0
 80072e0:	f7f9 fddc 	bl	8000e9c <__aeabi_fmul>
 80072e4:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 80072e6:	6939      	ldr	r1, [r7, #16]
 80072e8:	1c18      	adds	r0, r3, #0
 80072ea:	f7f9 fbf1 	bl	8000ad0 <__aeabi_fdiv>
 80072ee:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 80072f0:	68f9      	ldr	r1, [r7, #12]
 80072f2:	1c18      	adds	r0, r3, #0
 80072f4:	f7f9 fdd2 	bl	8000e9c <__aeabi_fmul>
 80072f8:	1c03      	adds	r3, r0, #0
             sqrtf(
 80072fa:	1c19      	adds	r1, r3, #0
 80072fc:	1c20      	adds	r0, r4, #0
 80072fe:	f7f9 fa5d 	bl	80007bc <__aeabi_fadd>
 8007302:	1c03      	adds	r3, r0, #0
 8007304:	1c18      	adds	r0, r3, #0
 8007306:	f011 fd77 	bl	8018df8 <sqrtf>
 800730a:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800730c:	1c19      	adds	r1, r3, #0
 800730e:	1c30      	adds	r0, r6, #0
 8007310:	f7f9 fdc4 	bl	8000e9c <__aeabi_fmul>
 8007314:	1c03      	adds	r3, r0, #0
 8007316:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007324:	68f9      	ldr	r1, [r7, #12]
 8007326:	1c18      	adds	r0, r3, #0
 8007328:	f7f9 fdb8 	bl	8000e9c <__aeabi_fmul>
 800732c:	1c03      	adds	r3, r0, #0
 800732e:	2182      	movs	r1, #130	@ 0x82
 8007330:	05c9      	lsls	r1, r1, #23
 8007332:	1c18      	adds	r0, r3, #0
 8007334:	f7f9 fbcc 	bl	8000ad0 <__aeabi_fdiv>
 8007338:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800733a:	1c19      	adds	r1, r3, #0
 800733c:	1c20      	adds	r0, r4, #0
 800733e:	f7f9 fa3d 	bl	80007bc <__aeabi_fadd>
 8007342:	1c03      	adds	r3, r0, #0
 8007344:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800734a:	46c0      	nop			@ (mov r8, r8)
 800734c:	46bd      	mov	sp, r7
 800734e:	b007      	add	sp, #28
 8007350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007352:	46c0      	nop			@ (mov r8, r8)
 8007354:	42c80000 	.word	0x42c80000
 8007358:	c2c80000 	.word	0xc2c80000
 800735c:	44b40000 	.word	0x44b40000

08007360 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007378:	46c0      	nop			@ (mov r8, r8)
 800737a:	46bd      	mov	sp, r7
 800737c:	b004      	add	sp, #16
 800737e:	bd80      	pop	{r7, pc}

08007380 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8007380:	b590      	push	{r4, r7, lr}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007392:	1c19      	adds	r1, r3, #0
 8007394:	6838      	ldr	r0, [r7, #0]
 8007396:	f7f9 febf 	bl	8001118 <__aeabi_fsub>
 800739a:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800739c:	1c19      	adds	r1, r3, #0
 800739e:	1c20      	adds	r0, r4, #0
 80073a0:	f7f9 fd7c 	bl	8000e9c <__aeabi_fmul>
 80073a4:	1c03      	adds	r3, r0, #0
 80073a6:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 80073a8:	4912      	ldr	r1, [pc, #72]	@ (80073f4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f7f9 f88e 	bl	80004cc <__aeabi_fcmplt>
 80073b0:	1e03      	subs	r3, r0, #0
 80073b2:	d002      	beq.n	80073ba <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 80073b4:	23fe      	movs	r3, #254	@ 0xfe
 80073b6:	059b      	lsls	r3, r3, #22
 80073b8:	e018      	b.n	80073ec <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 80073ba:	490f      	ldr	r1, [pc, #60]	@ (80073f8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f7f9 f899 	bl	80004f4 <__aeabi_fcmpgt>
 80073c2:	1e03      	subs	r3, r0, #0
 80073c4:	d001      	beq.n	80073ca <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 80073c6:	2300      	movs	r3, #0
 80073c8:	e010      	b.n	80073ec <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	1c18      	adds	r0, r3, #0
 80073ce:	f011 fceb 	bl	8018da8 <expf>
 80073d2:	1c03      	adds	r3, r0, #0
 80073d4:	21fe      	movs	r1, #254	@ 0xfe
 80073d6:	0589      	lsls	r1, r1, #22
 80073d8:	1c18      	adds	r0, r3, #0
 80073da:	f7f9 f9ef 	bl	80007bc <__aeabi_fadd>
 80073de:	1c03      	adds	r3, r0, #0
 80073e0:	1c19      	adds	r1, r3, #0
 80073e2:	20fe      	movs	r0, #254	@ 0xfe
 80073e4:	0580      	lsls	r0, r0, #22
 80073e6:	f7f9 fb73 	bl	8000ad0 <__aeabi_fdiv>
 80073ea:	1c03      	adds	r3, r0, #0
    }
}
 80073ec:	1c18      	adds	r0, r3, #0
 80073ee:	46bd      	mov	sp, r7
 80073f0:	b005      	add	sp, #20
 80073f2:	bd90      	pop	{r4, r7, pc}
 80073f4:	c2480000 	.word	0xc2480000
 80073f8:	42480000 	.word	0x42480000

080073fc <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007414:	46c0      	nop			@ (mov r8, r8)
 8007416:	46bd      	mov	sp, r7
 8007418:	b004      	add	sp, #16
 800741a:	bd80      	pop	{r7, pc}

0800741c <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800741c:	b590      	push	{r4, r7, lr}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d114      	bne.n	8007458 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007432:	1c19      	adds	r1, r3, #0
 8007434:	6838      	ldr	r0, [r7, #0]
 8007436:	f7f9 fe6f 	bl	8001118 <__aeabi_fsub>
 800743a:	1c03      	adds	r3, r0, #0
 800743c:	4918      	ldr	r1, [pc, #96]	@ (80074a0 <GasIndexAlgorithm__mox_model__process+0x84>)
 800743e:	1c18      	adds	r0, r3, #0
 8007440:	f7f9 fb46 	bl	8000ad0 <__aeabi_fdiv>
 8007444:	1c03      	adds	r3, r0, #0
 8007446:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800744c:	1c19      	adds	r1, r3, #0
 800744e:	1c10      	adds	r0, r2, #0
 8007450:	f7f9 fd24 	bl	8000e9c <__aeabi_fmul>
 8007454:	1c03      	adds	r3, r0, #0
 8007456:	e01f      	b.n	8007498 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800745c:	1c19      	adds	r1, r3, #0
 800745e:	6838      	ldr	r0, [r7, #0]
 8007460:	f7f9 fe5a 	bl	8001118 <__aeabi_fsub>
 8007464:	1c03      	adds	r3, r0, #0
 8007466:	1c1a      	adds	r2, r3, #0
 8007468:	2380      	movs	r3, #128	@ 0x80
 800746a:	061b      	lsls	r3, r3, #24
 800746c:	4053      	eors	r3, r2
 800746e:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007474:	490b      	ldr	r1, [pc, #44]	@ (80074a4 <GasIndexAlgorithm__mox_model__process+0x88>)
 8007476:	1c18      	adds	r0, r3, #0
 8007478:	f7f9 f9a0 	bl	80007bc <__aeabi_fadd>
 800747c:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800747e:	1c19      	adds	r1, r3, #0
 8007480:	1c20      	adds	r0, r4, #0
 8007482:	f7f9 fb25 	bl	8000ad0 <__aeabi_fdiv>
 8007486:	1c03      	adds	r3, r0, #0
 8007488:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800748e:	1c19      	adds	r1, r3, #0
 8007490:	1c10      	adds	r0, r2, #0
 8007492:	f7f9 fd03 	bl	8000e9c <__aeabi_fmul>
 8007496:	1c03      	adds	r3, r0, #0
    }
}
 8007498:	1c18      	adds	r0, r3, #0
 800749a:	46bd      	mov	sp, r7
 800749c:	b003      	add	sp, #12
 800749e:	bd90      	pop	{r4, r7, pc}
 80074a0:	44fa0000 	.word	0x44fa0000
 80074a4:	435c0000 	.word	0x435c0000

080074a8 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
 80074b4:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2180      	movs	r1, #128	@ 0x80
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2184      	movs	r1, #132	@ 0x84
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2188      	movs	r1, #136	@ 0x88
 80074ca:	683a      	ldr	r2, [r7, #0]
 80074cc:	505a      	str	r2, [r3, r1]
}
 80074ce:	46c0      	nop			@ (mov r8, r8)
 80074d0:	46bd      	mov	sp, r7
 80074d2:	b004      	add	sp, #16
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 80074d8:	b590      	push	{r4, r7, lr}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2280      	movs	r2, #128	@ 0x80
 80074e6:	589c      	ldr	r4, [r3, r2]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2284      	movs	r2, #132	@ 0x84
 80074ec:	589b      	ldr	r3, [r3, r2]
 80074ee:	1c19      	adds	r1, r3, #0
 80074f0:	6838      	ldr	r0, [r7, #0]
 80074f2:	f7f9 fe11 	bl	8001118 <__aeabi_fsub>
 80074f6:	1c03      	adds	r3, r0, #0
 80074f8:	1c19      	adds	r1, r3, #0
 80074fa:	1c20      	adds	r0, r4, #0
 80074fc:	f7f9 fcce 	bl	8000e9c <__aeabi_fmul>
 8007500:	1c03      	adds	r3, r0, #0
 8007502:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8007504:	4940      	ldr	r1, [pc, #256]	@ (8007608 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8007506:	68b8      	ldr	r0, [r7, #8]
 8007508:	f7f8 ffe0 	bl	80004cc <__aeabi_fcmplt>
 800750c:	1e03      	subs	r3, r0, #0
 800750e:	d001      	beq.n	8007514 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8007510:	4b3e      	ldr	r3, [pc, #248]	@ (800760c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007512:	e075      	b.n	8007600 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8007514:	493e      	ldr	r1, [pc, #248]	@ (8007610 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 8007516:	68b8      	ldr	r0, [r7, #8]
 8007518:	f7f8 ffec 	bl	80004f4 <__aeabi_fcmpgt>
 800751c:	1e03      	subs	r3, r0, #0
 800751e:	d001      	beq.n	8007524 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8007520:	2300      	movs	r3, #0
 8007522:	e06d      	b.n	8007600 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 8007524:	2100      	movs	r1, #0
 8007526:	6838      	ldr	r0, [r7, #0]
 8007528:	f7f8 ffee 	bl	8000508 <__aeabi_fcmpge>
 800752c:	1e03      	subs	r3, r0, #0
 800752e:	d047      	beq.n	80075c0 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2288      	movs	r2, #136	@ 0x88
 8007534:	589b      	ldr	r3, [r3, r2]
 8007536:	21fe      	movs	r1, #254	@ 0xfe
 8007538:	0589      	lsls	r1, r1, #22
 800753a:	1c18      	adds	r0, r3, #0
 800753c:	f7f8 ffc0 	bl	80004c0 <__aeabi_fcmpeq>
 8007540:	1e03      	subs	r3, r0, #0
 8007542:	d00e      	beq.n	8007562 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	1c19      	adds	r1, r3, #0
 800754a:	20fe      	movs	r0, #254	@ 0xfe
 800754c:	0580      	lsls	r0, r0, #22
 800754e:	f7f9 fde3 	bl	8001118 <__aeabi_fsub>
 8007552:	1c03      	adds	r3, r0, #0
 8007554:	492f      	ldr	r1, [pc, #188]	@ (8007614 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 8007556:	1c18      	adds	r0, r3, #0
 8007558:	f7f9 fca0 	bl	8000e9c <__aeabi_fmul>
 800755c:	1c03      	adds	r3, r0, #0
 800755e:	60fb      	str	r3, [r7, #12]
 8007560:	e012      	b.n	8007588 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	492c      	ldr	r1, [pc, #176]	@ (8007618 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8007568:	1c18      	adds	r0, r3, #0
 800756a:	f7f9 fc97 	bl	8000e9c <__aeabi_fmul>
 800756e:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8007570:	1c19      	adds	r1, r3, #0
 8007572:	4826      	ldr	r0, [pc, #152]	@ (800760c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007574:	f7f9 fdd0 	bl	8001118 <__aeabi_fsub>
 8007578:	1c03      	adds	r3, r0, #0
 800757a:	2181      	movs	r1, #129	@ 0x81
 800757c:	05c9      	lsls	r1, r1, #23
 800757e:	1c18      	adds	r0, r3, #0
 8007580:	f7f9 faa6 	bl	8000ad0 <__aeabi_fdiv>
 8007584:	1c03      	adds	r3, r0, #0
 8007586:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8007588:	4920      	ldr	r1, [pc, #128]	@ (800760c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f7f9 f916 	bl	80007bc <__aeabi_fadd>
 8007590:	1c03      	adds	r3, r0, #0
 8007592:	1c1c      	adds	r4, r3, #0
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	1c18      	adds	r0, r3, #0
 8007598:	f011 fc06 	bl	8018da8 <expf>
 800759c:	1c03      	adds	r3, r0, #0
 800759e:	21fe      	movs	r1, #254	@ 0xfe
 80075a0:	0589      	lsls	r1, r1, #22
 80075a2:	1c18      	adds	r0, r3, #0
 80075a4:	f7f9 f90a 	bl	80007bc <__aeabi_fadd>
 80075a8:	1c03      	adds	r3, r0, #0
 80075aa:	1c19      	adds	r1, r3, #0
 80075ac:	1c20      	adds	r0, r4, #0
 80075ae:	f7f9 fa8f 	bl	8000ad0 <__aeabi_fdiv>
 80075b2:	1c03      	adds	r3, r0, #0
 80075b4:	68f9      	ldr	r1, [r7, #12]
 80075b6:	1c18      	adds	r0, r3, #0
 80075b8:	f7f9 fdae 	bl	8001118 <__aeabi_fsub>
 80075bc:	1c03      	adds	r3, r0, #0
 80075be:	e01f      	b.n	8007600 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2188      	movs	r1, #136	@ 0x88
 80075c8:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 80075ca:	1c19      	adds	r1, r3, #0
 80075cc:	1c10      	adds	r0, r2, #0
 80075ce:	f7f9 fa7f 	bl	8000ad0 <__aeabi_fdiv>
 80075d2:	1c03      	adds	r3, r0, #0
 80075d4:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	1c18      	adds	r0, r3, #0
 80075da:	f011 fbe5 	bl	8018da8 <expf>
 80075de:	1c03      	adds	r3, r0, #0
 80075e0:	21fe      	movs	r1, #254	@ 0xfe
 80075e2:	0589      	lsls	r1, r1, #22
 80075e4:	1c18      	adds	r0, r3, #0
 80075e6:	f7f9 f8e9 	bl	80007bc <__aeabi_fadd>
 80075ea:	1c03      	adds	r3, r0, #0
 80075ec:	1c19      	adds	r1, r3, #0
 80075ee:	4807      	ldr	r0, [pc, #28]	@ (800760c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80075f0:	f7f9 fa6e 	bl	8000ad0 <__aeabi_fdiv>
 80075f4:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 80075f6:	1c19      	adds	r1, r3, #0
 80075f8:	1c20      	adds	r0, r4, #0
 80075fa:	f7f9 fc4f 	bl	8000e9c <__aeabi_fmul>
 80075fe:	1c03      	adds	r3, r0, #0
        }
    }
}
 8007600:	1c18      	adds	r0, r3, #0
 8007602:	46bd      	mov	sp, r7
 8007604:	b005      	add	sp, #20
 8007606:	bd90      	pop	{r4, r7, pc}
 8007608:	c2480000 	.word	0xc2480000
 800760c:	43fa0000 	.word	0x43fa0000
 8007610:	42480000 	.word	0x42480000
 8007614:	3f8041ab 	.word	0x3f8041ab
 8007618:	40a00000 	.word	0x40a00000

0800761c <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800761c:	b590      	push	{r4, r7, lr}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	4913      	ldr	r1, [pc, #76]	@ (800767c <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800762e:	1c18      	adds	r0, r3, #0
 8007630:	f7f9 f8c4 	bl	80007bc <__aeabi_fadd>
 8007634:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8007636:	1c19      	adds	r1, r3, #0
 8007638:	1c20      	adds	r0, r4, #0
 800763a:	f7f9 fa49 	bl	8000ad0 <__aeabi_fdiv>
 800763e:	1c03      	adds	r3, r0, #0
 8007640:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	228c      	movs	r2, #140	@ 0x8c
 8007646:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	490b      	ldr	r1, [pc, #44]	@ (8007680 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 8007652:	1c18      	adds	r0, r3, #0
 8007654:	f7f9 f8b2 	bl	80007bc <__aeabi_fadd>
 8007658:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800765a:	1c19      	adds	r1, r3, #0
 800765c:	1c20      	adds	r0, r4, #0
 800765e:	f7f9 fa37 	bl	8000ad0 <__aeabi_fdiv>
 8007662:	1c03      	adds	r3, r0, #0
 8007664:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2290      	movs	r2, #144	@ 0x90
 800766a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2294      	movs	r2, #148	@ 0x94
 8007670:	2100      	movs	r1, #0
 8007672:	5499      	strb	r1, [r3, r2]
}
 8007674:	46c0      	nop			@ (mov r8, r8)
 8007676:	46bd      	mov	sp, r7
 8007678:	b003      	add	sp, #12
 800767a:	bd90      	pop	{r4, r7, pc}
 800767c:	41a00000 	.word	0x41a00000
 8007680:	43fa0000 	.word	0x43fa0000

08007684 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8007684:	b590      	push	{r4, r7, lr}
 8007686:	b087      	sub	sp, #28
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2294      	movs	r2, #148	@ 0x94
 8007692:	5c9b      	ldrb	r3, [r3, r2]
 8007694:	2201      	movs	r2, #1
 8007696:	4053      	eors	r3, r2
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00f      	beq.n	80076be <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2198      	movs	r1, #152	@ 0x98
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	219c      	movs	r1, #156	@ 0x9c
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	21a0      	movs	r1, #160	@ 0xa0
 80076b2:	683a      	ldr	r2, [r7, #0]
 80076b4:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2294      	movs	r2, #148	@ 0x94
 80076ba:	2101      	movs	r1, #1
 80076bc:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	228c      	movs	r2, #140	@ 0x8c
 80076c2:	589b      	ldr	r3, [r3, r2]
 80076c4:	1c19      	adds	r1, r3, #0
 80076c6:	20fe      	movs	r0, #254	@ 0xfe
 80076c8:	0580      	lsls	r0, r0, #22
 80076ca:	f7f9 fd25 	bl	8001118 <__aeabi_fsub>
 80076ce:	1c03      	adds	r3, r0, #0
 80076d0:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2298      	movs	r2, #152	@ 0x98
 80076d6:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 80076d8:	1c19      	adds	r1, r3, #0
 80076da:	f7f9 fbdf 	bl	8000e9c <__aeabi_fmul>
 80076de:	1c03      	adds	r3, r0, #0
 80076e0:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	228c      	movs	r2, #140	@ 0x8c
 80076e6:	589b      	ldr	r3, [r3, r2]
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	1c18      	adds	r0, r3, #0
 80076ec:	f7f9 fbd6 	bl	8000e9c <__aeabi_fmul>
 80076f0:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 80076f2:	1c19      	adds	r1, r3, #0
 80076f4:	1c20      	adds	r0, r4, #0
 80076f6:	f7f9 f861 	bl	80007bc <__aeabi_fadd>
 80076fa:	1c03      	adds	r3, r0, #0
 80076fc:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2298      	movs	r2, #152	@ 0x98
 8007702:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2290      	movs	r2, #144	@ 0x90
 8007708:	589b      	ldr	r3, [r3, r2]
 800770a:	1c19      	adds	r1, r3, #0
 800770c:	20fe      	movs	r0, #254	@ 0xfe
 800770e:	0580      	lsls	r0, r0, #22
 8007710:	f7f9 fd02 	bl	8001118 <__aeabi_fsub>
 8007714:	1c03      	adds	r3, r0, #0
 8007716:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	229c      	movs	r2, #156	@ 0x9c
 800771c:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800771e:	1c19      	adds	r1, r3, #0
 8007720:	f7f9 fbbc 	bl	8000e9c <__aeabi_fmul>
 8007724:	1c03      	adds	r3, r0, #0
 8007726:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2290      	movs	r2, #144	@ 0x90
 800772c:	589b      	ldr	r3, [r3, r2]
 800772e:	6839      	ldr	r1, [r7, #0]
 8007730:	1c18      	adds	r0, r3, #0
 8007732:	f7f9 fbb3 	bl	8000e9c <__aeabi_fmul>
 8007736:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8007738:	1c19      	adds	r1, r3, #0
 800773a:	1c20      	adds	r0, r4, #0
 800773c:	f7f9 f83e 	bl	80007bc <__aeabi_fadd>
 8007740:	1c03      	adds	r3, r0, #0
 8007742:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	229c      	movs	r2, #156	@ 0x9c
 8007748:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2298      	movs	r2, #152	@ 0x98
 800774e:	589a      	ldr	r2, [r3, r2]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	219c      	movs	r1, #156	@ 0x9c
 8007754:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 8007756:	1c19      	adds	r1, r3, #0
 8007758:	1c10      	adds	r0, r2, #0
 800775a:	f7f9 fcdd 	bl	8001118 <__aeabi_fsub>
 800775e:	1c03      	adds	r3, r0, #0
 8007760:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 8007762:	2100      	movs	r1, #0
 8007764:	6978      	ldr	r0, [r7, #20]
 8007766:	f7f8 feb1 	bl	80004cc <__aeabi_fcmplt>
 800776a:	1e03      	subs	r3, r0, #0
 800776c:	d004      	beq.n	8007778 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	2280      	movs	r2, #128	@ 0x80
 8007772:	0612      	lsls	r2, r2, #24
 8007774:	4053      	eors	r3, r2
 8007776:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8007778:	4923      	ldr	r1, [pc, #140]	@ (8007808 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800777a:	6978      	ldr	r0, [r7, #20]
 800777c:	f7f9 fb8e 	bl	8000e9c <__aeabi_fmul>
 8007780:	1c03      	adds	r3, r0, #0
 8007782:	1c18      	adds	r0, r3, #0
 8007784:	f011 fb10 	bl	8018da8 <expf>
 8007788:	1c03      	adds	r3, r0, #0
 800778a:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800778c:	491f      	ldr	r1, [pc, #124]	@ (800780c <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800778e:	6938      	ldr	r0, [r7, #16]
 8007790:	f7f9 fb84 	bl	8000e9c <__aeabi_fmul>
 8007794:	1c03      	adds	r3, r0, #0
 8007796:	491e      	ldr	r1, [pc, #120]	@ (8007810 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8007798:	1c18      	adds	r0, r3, #0
 800779a:	f7f9 f80f 	bl	80007bc <__aeabi_fadd>
 800779e:	1c03      	adds	r3, r0, #0
 80077a0:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	685c      	ldr	r4, [r3, #4]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	68f9      	ldr	r1, [r7, #12]
 80077ac:	1c18      	adds	r0, r3, #0
 80077ae:	f7f9 f805 	bl	80007bc <__aeabi_fadd>
 80077b2:	1c03      	adds	r3, r0, #0
 80077b4:	1c19      	adds	r1, r3, #0
 80077b6:	1c20      	adds	r0, r4, #0
 80077b8:	f7f9 f98a 	bl	8000ad0 <__aeabi_fdiv>
 80077bc:	1c03      	adds	r3, r0, #0
 80077be:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 80077c0:	68b9      	ldr	r1, [r7, #8]
 80077c2:	20fe      	movs	r0, #254	@ 0xfe
 80077c4:	0580      	lsls	r0, r0, #22
 80077c6:	f7f9 fca7 	bl	8001118 <__aeabi_fsub>
 80077ca:	1c03      	adds	r3, r0, #0
 80077cc:	1c18      	adds	r0, r3, #0
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	22a0      	movs	r2, #160	@ 0xa0
 80077d2:	589b      	ldr	r3, [r3, r2]
 80077d4:	1c19      	adds	r1, r3, #0
 80077d6:	f7f9 fb61 	bl	8000e9c <__aeabi_fmul>
 80077da:	1c03      	adds	r3, r0, #0
 80077dc:	1c1c      	adds	r4, r3, #0
 80077de:	6839      	ldr	r1, [r7, #0]
 80077e0:	68b8      	ldr	r0, [r7, #8]
 80077e2:	f7f9 fb5b 	bl	8000e9c <__aeabi_fmul>
 80077e6:	1c03      	adds	r3, r0, #0
 80077e8:	1c19      	adds	r1, r3, #0
 80077ea:	1c20      	adds	r0, r4, #0
 80077ec:	f7f8 ffe6 	bl	80007bc <__aeabi_fadd>
 80077f0:	1c03      	adds	r3, r0, #0
 80077f2:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	22a0      	movs	r2, #160	@ 0xa0
 80077f8:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	22a0      	movs	r2, #160	@ 0xa0
 80077fe:	589b      	ldr	r3, [r3, r2]
}
 8007800:	1c18      	adds	r0, r3, #0
 8007802:	46bd      	mov	sp, r7
 8007804:	b007      	add	sp, #28
 8007806:	bd90      	pop	{r4, r7, pc}
 8007808:	be4ccccd 	.word	0xbe4ccccd
 800780c:	43f00000 	.word	0x43f00000
 8007810:	41a00000 	.word	0x41a00000

08007814 <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8007814:	b590      	push	{r4, r7, lr}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6039      	str	r1, [r7, #0]
 800781c:	0011      	movs	r1, r2
 800781e:	1dfb      	adds	r3, r7, #7
 8007820:	1c02      	adds	r2, r0, #0
 8007822:	701a      	strb	r2, [r3, #0]
 8007824:	1dbb      	adds	r3, r7, #6
 8007826:	1c0a      	adds	r2, r1, #0
 8007828:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800782a:	4b08      	ldr	r3, [pc, #32]	@ (800784c <ReadRegister+0x38>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d008      	beq.n	8007844 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 8007832:	4b06      	ldr	r3, [pc, #24]	@ (800784c <ReadRegister+0x38>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	1dba      	adds	r2, r7, #6
 8007838:	7814      	ldrb	r4, [r2, #0]
 800783a:	6839      	ldr	r1, [r7, #0]
 800783c:	1dfa      	adds	r2, r7, #7
 800783e:	7810      	ldrb	r0, [r2, #0]
 8007840:	0022      	movs	r2, r4
 8007842:	4798      	blx	r3
  }
}
 8007844:	46c0      	nop			@ (mov r8, r8)
 8007846:	46bd      	mov	sp, r7
 8007848:	b003      	add	sp, #12
 800784a:	bd90      	pop	{r4, r7, pc}
 800784c:	20002550 	.word	0x20002550

08007850 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8007850:	b590      	push	{r4, r7, lr}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
 8007856:	6039      	str	r1, [r7, #0]
 8007858:	0011      	movs	r1, r2
 800785a:	1dfb      	adds	r3, r7, #7
 800785c:	1c02      	adds	r2, r0, #0
 800785e:	701a      	strb	r2, [r3, #0]
 8007860:	1dbb      	adds	r3, r7, #6
 8007862:	1c0a      	adds	r2, r1, #0
 8007864:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8007866:	4b08      	ldr	r3, [pc, #32]	@ (8007888 <WriteRegister+0x38>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d008      	beq.n	8007880 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800786e:	4b06      	ldr	r3, [pc, #24]	@ (8007888 <WriteRegister+0x38>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	1dba      	adds	r2, r7, #6
 8007874:	7814      	ldrb	r4, [r2, #0]
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	1dfa      	adds	r2, r7, #7
 800787a:	7810      	ldrb	r0, [r2, #0]
 800787c:	0022      	movs	r2, r4
 800787e:	4798      	blx	r3
  }
}
 8007880:	46c0      	nop			@ (mov r8, r8)
 8007882:	46bd      	mov	sp, r7
 8007884:	b003      	add	sp, #12
 8007886:	bd90      	pop	{r4, r7, pc}
 8007888:	20002554 	.word	0x20002554

0800788c <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8007896:	4b07      	ldr	r3, [pc, #28]	@ (80078b4 <SGP_Init+0x28>)
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800789c:	4b06      	ldr	r3, [pc, #24]	@ (80078b8 <SGP_Init+0x2c>)
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 80078a2:	4b06      	ldr	r3, [pc, #24]	@ (80078bc <SGP_Init+0x30>)
 80078a4:	2100      	movs	r1, #0
 80078a6:	0018      	movs	r0, r3
 80078a8:	f7ff f930 	bl	8006b0c <GasIndexAlgorithm_init>
}
 80078ac:	46c0      	nop			@ (mov r8, r8)
 80078ae:	46bd      	mov	sp, r7
 80078b0:	b002      	add	sp, #8
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	20002550 	.word	0x20002550
 80078b8:	20002554 	.word	0x20002554
 80078bc:	20002564 	.word	0x20002564

080078c0 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 80078c0:	b580      	push	{r7, lr}
 80078c2:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 80078c4:	4b13      	ldr	r3, [pc, #76]	@ (8007914 <SGP_StartMeasurement+0x54>)
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00d      	beq.n	80078e8 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80078cc:	4b12      	ldr	r3, [pc, #72]	@ (8007918 <SGP_StartMeasurement+0x58>)
 80078ce:	2208      	movs	r2, #8
 80078d0:	0019      	movs	r1, r3
 80078d2:	2059      	movs	r0, #89	@ 0x59
 80078d4:	f7ff ffbc 	bl	8007850 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80078d8:	f001 f956 	bl	8008b88 <GetCurrentHalTicks>
 80078dc:	0003      	movs	r3, r0
 80078de:	331e      	adds	r3, #30
 80078e0:	001a      	movs	r2, r3
 80078e2:	4b0e      	ldr	r3, [pc, #56]	@ (800791c <SGP_StartMeasurement+0x5c>)
 80078e4:	601a      	str	r2, [r3, #0]
 80078e6:	e00c      	b.n	8007902 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80078e8:	4b0d      	ldr	r3, [pc, #52]	@ (8007920 <SGP_StartMeasurement+0x60>)
 80078ea:	2208      	movs	r2, #8
 80078ec:	0019      	movs	r1, r3
 80078ee:	2059      	movs	r0, #89	@ 0x59
 80078f0:	f7ff ffae 	bl	8007850 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 80078f4:	f001 f948 	bl	8008b88 <GetCurrentHalTicks>
 80078f8:	0003      	movs	r3, r0
 80078fa:	33aa      	adds	r3, #170	@ 0xaa
 80078fc:	001a      	movs	r2, r3
 80078fe:	4b09      	ldr	r3, [pc, #36]	@ (8007924 <SGP_StartMeasurement+0x64>)
 8007900:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 8007902:	4b09      	ldr	r3, [pc, #36]	@ (8007928 <SGP_StartMeasurement+0x68>)
 8007904:	2200      	movs	r2, #0
 8007906:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8007908:	4b08      	ldr	r3, [pc, #32]	@ (800792c <SGP_StartMeasurement+0x6c>)
 800790a:	2200      	movs	r2, #0
 800790c:	701a      	strb	r2, [r3, #0]
}
 800790e:	46c0      	nop			@ (mov r8, r8)
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	2000260c 	.word	0x2000260c
 8007918:	20000120 	.word	0x20000120
 800791c:	20000134 	.word	0x20000134
 8007920:	20000118 	.word	0x20000118
 8007924:	2000012c 	.word	0x2000012c
 8007928:	20002562 	.word	0x20002562
 800792c:	20002563 	.word	0x20002563

08007930 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 8007930:	b580      	push	{r7, lr}
 8007932:	af00      	add	r7, sp, #0
 8007934:	4b04      	ldr	r3, [pc, #16]	@ (8007948 <SGP_HeatedUp+0x18>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	0018      	movs	r0, r3
 800793a:	f001 f843 	bl	80089c4 <TimestampIsReached>
 800793e:	0003      	movs	r3, r0
 8007940:	0018      	movs	r0, r3
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	46c0      	nop			@ (mov r8, r8)
 8007948:	2000012c 	.word	0x2000012c

0800794c <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800794c:	b580      	push	{r7, lr}
 800794e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8007950:	4b04      	ldr	r3, [pc, #16]	@ (8007964 <SGP_MeasurementReady+0x18>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	0018      	movs	r0, r3
 8007956:	f001 f835 	bl	80089c4 <TimestampIsReached>
 800795a:	0003      	movs	r3, r0
}
 800795c:	0018      	movs	r0, r3
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	46c0      	nop			@ (mov r8, r8)
 8007964:	20000134 	.word	0x20000134

08007968 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8007968:	b580      	push	{r7, lr}
 800796a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800796c:	4b04      	ldr	r3, [pc, #16]	@ (8007980 <SGP_MeasurementDone+0x18>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	0018      	movs	r0, r3
 8007972:	f001 f827 	bl	80089c4 <TimestampIsReached>
 8007976:	0003      	movs	r3, r0
}
 8007978:	0018      	movs	r0, r3
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	46c0      	nop			@ (mov r8, r8)
 8007980:	20000130 	.word	0x20000130

08007984 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 8007984:	b580      	push	{r7, lr}
 8007986:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8007988:	4b04      	ldr	r3, [pc, #16]	@ (800799c <SGP_TurnHeaterOff+0x18>)
 800798a:	2202      	movs	r2, #2
 800798c:	0019      	movs	r1, r3
 800798e:	2059      	movs	r0, #89	@ 0x59
 8007990:	f7ff ff5e 	bl	8007850 <WriteRegister>
}
 8007994:	46c0      	nop			@ (mov r8, r8)
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	46c0      	nop			@ (mov r8, r8)
 800799c:	20000110 	.word	0x20000110

080079a0 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 80079a0:	b5b0      	push	{r4, r5, r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af02      	add	r7, sp, #8
 80079a6:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 80079a8:	f7ff ffc2 	bl	8007930 <SGP_HeatedUp>
 80079ac:	1e03      	subs	r3, r0, #0
 80079ae:	d038      	beq.n	8007a22 <SGP_GetMeasurementValues+0x82>
 80079b0:	4bd8      	ldr	r3, [pc, #864]	@ (8007d14 <SGP_GetMeasurementValues+0x374>)
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	2201      	movs	r2, #1
 80079b6:	4053      	eors	r3, r2
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d031      	beq.n	8007a22 <SGP_GetMeasurementValues+0x82>
 80079be:	4bd6      	ldr	r3, [pc, #856]	@ (8007d18 <SGP_GetMeasurementValues+0x378>)
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	2201      	movs	r2, #1
 80079c4:	4053      	eors	r3, r2
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d02a      	beq.n	8007a22 <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 80079cc:	4ad3      	ldr	r2, [pc, #844]	@ (8007d1c <SGP_GetMeasurementValues+0x37c>)
 80079ce:	4bd4      	ldr	r3, [pc, #848]	@ (8007d20 <SGP_GetMeasurementValues+0x380>)
 80079d0:	0019      	movs	r1, r3
 80079d2:	2003      	movs	r0, #3
 80079d4:	f001 f84c 	bl	8008a70 <CreateLine>
    HeatUpIsDone = true;
 80079d8:	4bce      	ldr	r3, [pc, #824]	@ (8007d14 <SGP_GetMeasurementValues+0x374>)
 80079da:	2201      	movs	r2, #1
 80079dc:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 80079de:	4bd1      	ldr	r3, [pc, #836]	@ (8007d24 <SGP_GetMeasurementValues+0x384>)
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00d      	beq.n	8007a02 <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80079e6:	4bd0      	ldr	r3, [pc, #832]	@ (8007d28 <SGP_GetMeasurementValues+0x388>)
 80079e8:	2208      	movs	r2, #8
 80079ea:	0019      	movs	r1, r3
 80079ec:	2059      	movs	r0, #89	@ 0x59
 80079ee:	f7ff ff2f 	bl	8007850 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80079f2:	f001 f8c9 	bl	8008b88 <GetCurrentHalTicks>
 80079f6:	0003      	movs	r3, r0
 80079f8:	331e      	adds	r3, #30
 80079fa:	001a      	movs	r2, r3
 80079fc:	4bcb      	ldr	r3, [pc, #812]	@ (8007d2c <SGP_GetMeasurementValues+0x38c>)
 80079fe:	601a      	str	r2, [r3, #0]
 8007a00:	e00c      	b.n	8007a1c <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8007a02:	4bcb      	ldr	r3, [pc, #812]	@ (8007d30 <SGP_GetMeasurementValues+0x390>)
 8007a04:	2208      	movs	r2, #8
 8007a06:	0019      	movs	r1, r3
 8007a08:	2059      	movs	r0, #89	@ 0x59
 8007a0a:	f7ff ff21 	bl	8007850 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8007a0e:	f001 f8bb 	bl	8008b88 <GetCurrentHalTicks>
 8007a12:	0003      	movs	r3, r0
 8007a14:	331e      	adds	r3, #30
 8007a16:	001a      	movs	r2, r3
 8007a18:	4bc4      	ldr	r3, [pc, #784]	@ (8007d2c <SGP_GetMeasurementValues+0x38c>)
 8007a1a:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8007a1c:	4bbe      	ldr	r3, [pc, #760]	@ (8007d18 <SGP_GetMeasurementValues+0x378>)
 8007a1e:	2201      	movs	r2, #1
 8007a20:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 8007a22:	4bbc      	ldr	r3, [pc, #752]	@ (8007d14 <SGP_GetMeasurementValues+0x374>)
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d100      	bne.n	8007a2c <SGP_GetMeasurementValues+0x8c>
 8007a2a:	e1b1      	b.n	8007d90 <SGP_GetMeasurementValues+0x3f0>
 8007a2c:	f7ff ff8e 	bl	800794c <SGP_MeasurementReady>
 8007a30:	1e03      	subs	r3, r0, #0
 8007a32:	d100      	bne.n	8007a36 <SGP_GetMeasurementValues+0x96>
 8007a34:	e1ac      	b.n	8007d90 <SGP_GetMeasurementValues+0x3f0>
 8007a36:	4bbf      	ldr	r3, [pc, #764]	@ (8007d34 <SGP_GetMeasurementValues+0x394>)
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	4053      	eors	r3, r2
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d100      	bne.n	8007a46 <SGP_GetMeasurementValues+0xa6>
 8007a44:	e1a4      	b.n	8007d90 <SGP_GetMeasurementValues+0x3f0>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 8007a46:	4bbc      	ldr	r3, [pc, #752]	@ (8007d38 <SGP_GetMeasurementValues+0x398>)
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	4abb      	ldr	r2, [pc, #748]	@ (8007d3c <SGP_GetMeasurementValues+0x39c>)
 8007a4e:	49b4      	ldr	r1, [pc, #720]	@ (8007d20 <SGP_GetMeasurementValues+0x380>)
 8007a50:	2003      	movs	r0, #3
 8007a52:	f001 f80d 	bl	8008a70 <CreateLine>
    MeasurementIsReady = true;
 8007a56:	4bb7      	ldr	r3, [pc, #732]	@ (8007d34 <SGP_GetMeasurementValues+0x394>)
 8007a58:	2201      	movs	r2, #1
 8007a5a:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8007a5c:	4bb8      	ldr	r3, [pc, #736]	@ (8007d40 <SGP_GetMeasurementValues+0x3a0>)
 8007a5e:	2203      	movs	r2, #3
 8007a60:	0019      	movs	r1, r3
 8007a62:	2059      	movs	r0, #89	@ 0x59
 8007a64:	f7ff fed6 	bl	8007814 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8007a68:	4bb5      	ldr	r3, [pc, #724]	@ (8007d40 <SGP_GetMeasurementValues+0x3a0>)
 8007a6a:	2203      	movs	r2, #3
 8007a6c:	2103      	movs	r1, #3
 8007a6e:	0018      	movs	r0, r3
 8007a70:	f000 f9f4 	bl	8007e5c <CheckCRC>
 8007a74:	0003      	movs	r3, r0
 8007a76:	001a      	movs	r2, r3
 8007a78:	2301      	movs	r3, #1
 8007a7a:	4053      	eors	r3, r2
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d02a      	beq.n	8007ad8 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 8007a82:	4ab0      	ldr	r2, [pc, #704]	@ (8007d44 <SGP_GetMeasurementValues+0x3a4>)
 8007a84:	4bb0      	ldr	r3, [pc, #704]	@ (8007d48 <SGP_GetMeasurementValues+0x3a8>)
 8007a86:	0019      	movs	r1, r3
 8007a88:	2001      	movs	r0, #1
 8007a8a:	f000 fff1 	bl	8008a70 <CreateLine>
      Info("SGP_Measure buffer structure:");
 8007a8e:	4aaf      	ldr	r2, [pc, #700]	@ (8007d4c <SGP_GetMeasurementValues+0x3ac>)
 8007a90:	4baf      	ldr	r3, [pc, #700]	@ (8007d50 <SGP_GetMeasurementValues+0x3b0>)
 8007a92:	0019      	movs	r1, r3
 8007a94:	2002      	movs	r0, #2
 8007a96:	f000 ffeb 	bl	8008a70 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8007a9a:	230f      	movs	r3, #15
 8007a9c:	18fb      	adds	r3, r7, r3
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	701a      	strb	r2, [r3, #0]
 8007aa2:	e012      	b.n	8007aca <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8007aa4:	240f      	movs	r4, #15
 8007aa6:	193b      	adds	r3, r7, r4
 8007aa8:	7818      	ldrb	r0, [r3, #0]
 8007aaa:	193b      	adds	r3, r7, r4
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	4aa4      	ldr	r2, [pc, #656]	@ (8007d40 <SGP_GetMeasurementValues+0x3a0>)
 8007ab0:	5cd3      	ldrb	r3, [r2, r3]
 8007ab2:	4aa8      	ldr	r2, [pc, #672]	@ (8007d54 <SGP_GetMeasurementValues+0x3b4>)
 8007ab4:	499a      	ldr	r1, [pc, #616]	@ (8007d20 <SGP_GetMeasurementValues+0x380>)
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	0003      	movs	r3, r0
 8007aba:	2003      	movs	r0, #3
 8007abc:	f000 ffd8 	bl	8008a70 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8007ac0:	193b      	adds	r3, r7, r4
 8007ac2:	781a      	ldrb	r2, [r3, #0]
 8007ac4:	193b      	adds	r3, r7, r4
 8007ac6:	3201      	adds	r2, #1
 8007ac8:	701a      	strb	r2, [r3, #0]
 8007aca:	230f      	movs	r3, #15
 8007acc:	18fb      	adds	r3, r7, r3
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d9e7      	bls.n	8007aa4 <SGP_GetMeasurementValues+0x104>
      }
      return false;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	e173      	b.n	8007dc0 <SGP_GetMeasurementValues+0x420>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 8007ad8:	f001 f856 	bl	8008b88 <GetCurrentHalTicks>
 8007adc:	0003      	movs	r3, r0
 8007ade:	22fa      	movs	r2, #250	@ 0xfa
 8007ae0:	0092      	lsls	r2, r2, #2
 8007ae2:	189a      	adds	r2, r3, r2
 8007ae4:	4b9c      	ldr	r3, [pc, #624]	@ (8007d58 <SGP_GetMeasurementValues+0x3b8>)
 8007ae6:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 8007ae8:	f7ff ff4c 	bl	8007984 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 8007aec:	4b92      	ldr	r3, [pc, #584]	@ (8007d38 <SGP_GetMeasurementValues+0x398>)
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	3301      	adds	r3, #1
 8007af2:	b2da      	uxtb	r2, r3
 8007af4:	4b90      	ldr	r3, [pc, #576]	@ (8007d38 <SGP_GetMeasurementValues+0x398>)
 8007af6:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8007af8:	4b8f      	ldr	r3, [pc, #572]	@ (8007d38 <SGP_GetMeasurementValues+0x398>)
 8007afa:	781a      	ldrb	r2, [r3, #0]
 8007afc:	4b97      	ldr	r3, [pc, #604]	@ (8007d5c <SGP_GetMeasurementValues+0x3bc>)
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d200      	bcs.n	8007b06 <SGP_GetMeasurementValues+0x166>
 8007b04:	e144      	b.n	8007d90 <SGP_GetMeasurementValues+0x3f0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 8007b06:	4b8e      	ldr	r3, [pc, #568]	@ (8007d40 <SGP_GetMeasurementValues+0x3a0>)
 8007b08:	785b      	ldrb	r3, [r3, #1]
 8007b0a:	021b      	lsls	r3, r3, #8
 8007b0c:	b21a      	sxth	r2, r3
 8007b0e:	4b8c      	ldr	r3, [pc, #560]	@ (8007d40 <SGP_GetMeasurementValues+0x3a0>)
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	b21b      	sxth	r3, r3
 8007b14:	4313      	orrs	r3, r2
 8007b16:	b21a      	sxth	r2, r3
 8007b18:	240c      	movs	r4, #12
 8007b1a:	193b      	adds	r3, r7, r4
 8007b1c:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 8007b1e:	193b      	adds	r3, r7, r4
 8007b20:	881b      	ldrh	r3, [r3, #0]
 8007b22:	4a8f      	ldr	r2, [pc, #572]	@ (8007d60 <SGP_GetMeasurementValues+0x3c0>)
 8007b24:	497e      	ldr	r1, [pc, #504]	@ (8007d20 <SGP_GetMeasurementValues+0x380>)
 8007b26:	2003      	movs	r0, #3
 8007b28:	f000 ffa2 	bl	8008a70 <CreateLine>
      int32_t tempVocIndex = 0;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8007b30:	193b      	adds	r3, r7, r4
 8007b32:	8819      	ldrh	r1, [r3, #0]
 8007b34:	2308      	movs	r3, #8
 8007b36:	18fa      	adds	r2, r7, r3
 8007b38:	4b8a      	ldr	r3, [pc, #552]	@ (8007d64 <SGP_GetMeasurementValues+0x3c4>)
 8007b3a:	0018      	movs	r0, r3
 8007b3c:	f7ff f848 	bl	8006bd0 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	4a89      	ldr	r2, [pc, #548]	@ (8007d68 <SGP_GetMeasurementValues+0x3c8>)
 8007b44:	4976      	ldr	r1, [pc, #472]	@ (8007d20 <SGP_GetMeasurementValues+0x380>)
 8007b46:	2003      	movs	r0, #3
 8007b48:	f000 ff92 	bl	8008a70 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	dd5d      	ble.n	8007c16 <SGP_GetMeasurementValues+0x276>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b64      	cmp	r3, #100	@ 0x64
 8007b60:	dc59      	bgt.n	8007c16 <SGP_GetMeasurementValues+0x276>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	0018      	movs	r0, r3
 8007b68:	f7fb fba8 	bl	80032bc <__aeabi_i2d>
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	4b7f      	ldr	r3, [pc, #508]	@ (8007d6c <SGP_GetMeasurementValues+0x3cc>)
 8007b70:	f7fa f89e 	bl	8001cb0 <__aeabi_ddiv>
 8007b74:	0002      	movs	r2, r0
 8007b76:	000b      	movs	r3, r1
 8007b78:	2000      	movs	r0, #0
 8007b7a:	497d      	ldr	r1, [pc, #500]	@ (8007d70 <SGP_GetMeasurementValues+0x3d0>)
 8007b7c:	f7fa ffa4 	bl	8002ac8 <__aeabi_dsub>
 8007b80:	0002      	movs	r2, r0
 8007b82:	000b      	movs	r3, r1
 8007b84:	0014      	movs	r4, r2
 8007b86:	001d      	movs	r5, r3
 8007b88:	4b7a      	ldr	r3, [pc, #488]	@ (8007d74 <SGP_GetMeasurementValues+0x3d4>)
 8007b8a:	881b      	ldrh	r3, [r3, #0]
 8007b8c:	0018      	movs	r0, r3
 8007b8e:	f7fb fb95 	bl	80032bc <__aeabi_i2d>
 8007b92:	0002      	movs	r2, r0
 8007b94:	000b      	movs	r3, r1
 8007b96:	0020      	movs	r0, r4
 8007b98:	0029      	movs	r1, r5
 8007b9a:	f7fa fccd 	bl	8002538 <__aeabi_dmul>
 8007b9e:	0002      	movs	r2, r0
 8007ba0:	000b      	movs	r3, r1
 8007ba2:	0010      	movs	r0, r2
 8007ba4:	0019      	movs	r1, r3
 8007ba6:	f7f8 fd1f 	bl	80005e8 <__aeabi_d2uiz>
 8007baa:	0003      	movs	r3, r0
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	4b72      	ldr	r3, [pc, #456]	@ (8007d78 <SGP_GetMeasurementValues+0x3d8>)
 8007bb0:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	0018      	movs	r0, r3
 8007bb8:	f7fb fb80 	bl	80032bc <__aeabi_i2d>
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	4b6b      	ldr	r3, [pc, #428]	@ (8007d6c <SGP_GetMeasurementValues+0x3cc>)
 8007bc0:	f7fa f876 	bl	8001cb0 <__aeabi_ddiv>
 8007bc4:	0002      	movs	r2, r0
 8007bc6:	000b      	movs	r3, r1
 8007bc8:	0014      	movs	r4, r2
 8007bca:	001d      	movs	r5, r3
 8007bcc:	4b69      	ldr	r3, [pc, #420]	@ (8007d74 <SGP_GetMeasurementValues+0x3d4>)
 8007bce:	881b      	ldrh	r3, [r3, #0]
 8007bd0:	0018      	movs	r0, r3
 8007bd2:	f7fb fb73 	bl	80032bc <__aeabi_i2d>
 8007bd6:	0002      	movs	r2, r0
 8007bd8:	000b      	movs	r3, r1
 8007bda:	0020      	movs	r0, r4
 8007bdc:	0029      	movs	r1, r5
 8007bde:	f7fa fcab 	bl	8002538 <__aeabi_dmul>
 8007be2:	0002      	movs	r2, r0
 8007be4:	000b      	movs	r3, r1
 8007be6:	0010      	movs	r0, r2
 8007be8:	0019      	movs	r1, r3
 8007bea:	f7f8 fcfd 	bl	80005e8 <__aeabi_d2uiz>
 8007bee:	0003      	movs	r3, r0
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	4b62      	ldr	r3, [pc, #392]	@ (8007d7c <SGP_GetMeasurementValues+0x3dc>)
 8007bf4:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 8007bf6:	4b5f      	ldr	r3, [pc, #380]	@ (8007d74 <SGP_GetMeasurementValues+0x3d4>)
 8007bf8:	881a      	ldrh	r2, [r3, #0]
 8007bfa:	4b61      	ldr	r3, [pc, #388]	@ (8007d80 <SGP_GetMeasurementValues+0x3e0>)
 8007bfc:	801a      	strh	r2, [r3, #0]
      TIM3->CCR1 = Red;
 8007bfe:	4b60      	ldr	r3, [pc, #384]	@ (8007d80 <SGP_GetMeasurementValues+0x3e0>)
 8007c00:	881a      	ldrh	r2, [r3, #0]
 8007c02:	4b60      	ldr	r3, [pc, #384]	@ (8007d84 <SGP_GetMeasurementValues+0x3e4>)
 8007c04:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3->CCR2 = Green;
 8007c06:	4b5c      	ldr	r3, [pc, #368]	@ (8007d78 <SGP_GetMeasurementValues+0x3d8>)
 8007c08:	881a      	ldrh	r2, [r3, #0]
 8007c0a:	4b5e      	ldr	r3, [pc, #376]	@ (8007d84 <SGP_GetMeasurementValues+0x3e4>)
 8007c0c:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3->CCR3 = Blue;
 8007c0e:	4b5b      	ldr	r3, [pc, #364]	@ (8007d7c <SGP_GetMeasurementValues+0x3dc>)
 8007c10:	881a      	ldrh	r2, [r3, #0]
 8007c12:	4b5c      	ldr	r3, [pc, #368]	@ (8007d84 <SGP_GetMeasurementValues+0x3e4>)
 8007c14:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
      if(*vocIndex > 100){
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2b64      	cmp	r3, #100	@ 0x64
 8007c1c:	dd69      	ble.n	8007cf2 <SGP_GetMeasurementValues+0x352>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	0018      	movs	r0, r3
 8007c24:	f7fb fb4a 	bl	80032bc <__aeabi_i2d>
 8007c28:	2200      	movs	r2, #0
 8007c2a:	4b50      	ldr	r3, [pc, #320]	@ (8007d6c <SGP_GetMeasurementValues+0x3cc>)
 8007c2c:	f7fa ff4c 	bl	8002ac8 <__aeabi_dsub>
 8007c30:	0002      	movs	r2, r0
 8007c32:	000b      	movs	r3, r1
 8007c34:	0010      	movs	r0, r2
 8007c36:	0019      	movs	r1, r3
 8007c38:	2200      	movs	r2, #0
 8007c3a:	4b53      	ldr	r3, [pc, #332]	@ (8007d88 <SGP_GetMeasurementValues+0x3e8>)
 8007c3c:	f7fa f838 	bl	8001cb0 <__aeabi_ddiv>
 8007c40:	0002      	movs	r2, r0
 8007c42:	000b      	movs	r3, r1
 8007c44:	0014      	movs	r4, r2
 8007c46:	001d      	movs	r5, r3
 8007c48:	4b4a      	ldr	r3, [pc, #296]	@ (8007d74 <SGP_GetMeasurementValues+0x3d4>)
 8007c4a:	881b      	ldrh	r3, [r3, #0]
 8007c4c:	0018      	movs	r0, r3
 8007c4e:	f7fb fb35 	bl	80032bc <__aeabi_i2d>
 8007c52:	0002      	movs	r2, r0
 8007c54:	000b      	movs	r3, r1
 8007c56:	0020      	movs	r0, r4
 8007c58:	0029      	movs	r1, r5
 8007c5a:	f7fa fc6d 	bl	8002538 <__aeabi_dmul>
 8007c5e:	0002      	movs	r2, r0
 8007c60:	000b      	movs	r3, r1
 8007c62:	0010      	movs	r0, r2
 8007c64:	0019      	movs	r1, r3
 8007c66:	f7f8 fcbf 	bl	80005e8 <__aeabi_d2uiz>
 8007c6a:	0003      	movs	r3, r0
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	4b42      	ldr	r3, [pc, #264]	@ (8007d78 <SGP_GetMeasurementValues+0x3d8>)
 8007c70:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	0018      	movs	r0, r3
 8007c78:	f7fb fb20 	bl	80032bc <__aeabi_i2d>
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	4b3b      	ldr	r3, [pc, #236]	@ (8007d6c <SGP_GetMeasurementValues+0x3cc>)
 8007c80:	f7fa ff22 	bl	8002ac8 <__aeabi_dsub>
 8007c84:	0002      	movs	r2, r0
 8007c86:	000b      	movs	r3, r1
 8007c88:	0010      	movs	r0, r2
 8007c8a:	0019      	movs	r1, r3
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	4b3e      	ldr	r3, [pc, #248]	@ (8007d88 <SGP_GetMeasurementValues+0x3e8>)
 8007c90:	f7fa f80e 	bl	8001cb0 <__aeabi_ddiv>
 8007c94:	0002      	movs	r2, r0
 8007c96:	000b      	movs	r3, r1
 8007c98:	2000      	movs	r0, #0
 8007c9a:	4935      	ldr	r1, [pc, #212]	@ (8007d70 <SGP_GetMeasurementValues+0x3d0>)
 8007c9c:	f7fa ff14 	bl	8002ac8 <__aeabi_dsub>
 8007ca0:	0002      	movs	r2, r0
 8007ca2:	000b      	movs	r3, r1
 8007ca4:	0014      	movs	r4, r2
 8007ca6:	001d      	movs	r5, r3
 8007ca8:	4b32      	ldr	r3, [pc, #200]	@ (8007d74 <SGP_GetMeasurementValues+0x3d4>)
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	0018      	movs	r0, r3
 8007cae:	f7fb fb05 	bl	80032bc <__aeabi_i2d>
 8007cb2:	0002      	movs	r2, r0
 8007cb4:	000b      	movs	r3, r1
 8007cb6:	0020      	movs	r0, r4
 8007cb8:	0029      	movs	r1, r5
 8007cba:	f7fa fc3d 	bl	8002538 <__aeabi_dmul>
 8007cbe:	0002      	movs	r2, r0
 8007cc0:	000b      	movs	r3, r1
 8007cc2:	0010      	movs	r0, r2
 8007cc4:	0019      	movs	r1, r3
 8007cc6:	f7f8 fc8f 	bl	80005e8 <__aeabi_d2uiz>
 8007cca:	0003      	movs	r3, r0
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	4b2c      	ldr	r3, [pc, #176]	@ (8007d80 <SGP_GetMeasurementValues+0x3e0>)
 8007cd0:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 8007cd2:	4b28      	ldr	r3, [pc, #160]	@ (8007d74 <SGP_GetMeasurementValues+0x3d4>)
 8007cd4:	881a      	ldrh	r2, [r3, #0]
 8007cd6:	4b29      	ldr	r3, [pc, #164]	@ (8007d7c <SGP_GetMeasurementValues+0x3dc>)
 8007cd8:	801a      	strh	r2, [r3, #0]
        TIM3->CCR1 = Red;
 8007cda:	4b29      	ldr	r3, [pc, #164]	@ (8007d80 <SGP_GetMeasurementValues+0x3e0>)
 8007cdc:	881a      	ldrh	r2, [r3, #0]
 8007cde:	4b29      	ldr	r3, [pc, #164]	@ (8007d84 <SGP_GetMeasurementValues+0x3e4>)
 8007ce0:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3->CCR2 = Green;
 8007ce2:	4b25      	ldr	r3, [pc, #148]	@ (8007d78 <SGP_GetMeasurementValues+0x3d8>)
 8007ce4:	881a      	ldrh	r2, [r3, #0]
 8007ce6:	4b27      	ldr	r3, [pc, #156]	@ (8007d84 <SGP_GetMeasurementValues+0x3e4>)
 8007ce8:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3->CCR3 = Blue;
 8007cea:	4b24      	ldr	r3, [pc, #144]	@ (8007d7c <SGP_GetMeasurementValues+0x3dc>)
 8007cec:	881a      	ldrh	r2, [r3, #0]
 8007cee:	4b25      	ldr	r3, [pc, #148]	@ (8007d84 <SGP_GetMeasurementValues+0x3e4>)
 8007cf0:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
      SGP_AmountOfSamplesDone = 0;
 8007cf2:	4b11      	ldr	r3, [pc, #68]	@ (8007d38 <SGP_GetMeasurementValues+0x398>)
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 8007cf8:	4a24      	ldr	r2, [pc, #144]	@ (8007d8c <SGP_GetMeasurementValues+0x3ec>)
 8007cfa:	4b09      	ldr	r3, [pc, #36]	@ (8007d20 <SGP_GetMeasurementValues+0x380>)
 8007cfc:	0019      	movs	r1, r3
 8007cfe:	2003      	movs	r0, #3
 8007d00:	f000 feb6 	bl	8008a70 <CreateLine>
      HT_MeasurementReceived = false;
 8007d04:	4b07      	ldr	r3, [pc, #28]	@ (8007d24 <SGP_GetMeasurementValues+0x384>)
 8007d06:	2200      	movs	r2, #0
 8007d08:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 8007d0a:	4b03      	ldr	r3, [pc, #12]	@ (8007d18 <SGP_GetMeasurementValues+0x378>)
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e055      	b.n	8007dc0 <SGP_GetMeasurementValues+0x420>
 8007d14:	20002562 	.word	0x20002562
 8007d18:	2000260d 	.word	0x2000260d
 8007d1c:	08019e24 	.word	0x08019e24
 8007d20:	08019e50 	.word	0x08019e50
 8007d24:	2000260c 	.word	0x2000260c
 8007d28:	20000120 	.word	0x20000120
 8007d2c:	20000134 	.word	0x20000134
 8007d30:	20000118 	.word	0x20000118
 8007d34:	20002563 	.word	0x20002563
 8007d38:	20002561 	.word	0x20002561
 8007d3c:	08019e54 	.word	0x08019e54
 8007d40:	20002558 	.word	0x20002558
 8007d44:	08019e84 	.word	0x08019e84
 8007d48:	08019ea8 	.word	0x08019ea8
 8007d4c:	08019eac 	.word	0x08019eac
 8007d50:	08019ecc 	.word	0x08019ecc
 8007d54:	08019ed0 	.word	0x08019ed0
 8007d58:	20000130 	.word	0x20000130
 8007d5c:	20000128 	.word	0x20000128
 8007d60:	08019ef0 	.word	0x08019ef0
 8007d64:	20002564 	.word	0x20002564
 8007d68:	08019f04 	.word	0x08019f04
 8007d6c:	40590000 	.word	0x40590000
 8007d70:	3ff00000 	.word	0x3ff00000
 8007d74:	20000138 	.word	0x20000138
 8007d78:	20002612 	.word	0x20002612
 8007d7c:	20002610 	.word	0x20002610
 8007d80:	2000260e 	.word	0x2000260e
 8007d84:	40000400 	.word	0x40000400
 8007d88:	40790000 	.word	0x40790000
 8007d8c:	08019f18 	.word	0x08019f18
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 8007d90:	f7ff fdea 	bl	8007968 <SGP_MeasurementDone>
 8007d94:	1e03      	subs	r3, r0, #0
 8007d96:	d012      	beq.n	8007dbe <SGP_GetMeasurementValues+0x41e>
 8007d98:	4b0b      	ldr	r3, [pc, #44]	@ (8007dc8 <SGP_GetMeasurementValues+0x428>)
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00e      	beq.n	8007dbe <SGP_GetMeasurementValues+0x41e>
 8007da0:	4b0a      	ldr	r3, [pc, #40]	@ (8007dcc <SGP_GetMeasurementValues+0x42c>)
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00a      	beq.n	8007dbe <SGP_GetMeasurementValues+0x41e>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 8007da8:	4a09      	ldr	r2, [pc, #36]	@ (8007dd0 <SGP_GetMeasurementValues+0x430>)
 8007daa:	4b0a      	ldr	r3, [pc, #40]	@ (8007dd4 <SGP_GetMeasurementValues+0x434>)
 8007dac:	0019      	movs	r1, r3
 8007dae:	2003      	movs	r0, #3
 8007db0:	f000 fe5e 	bl	8008a70 <CreateLine>
    SGP_StartMeasurement();
 8007db4:	f7ff fd84 	bl	80078c0 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 8007db8:	4b07      	ldr	r3, [pc, #28]	@ (8007dd8 <SGP_GetMeasurementValues+0x438>)
 8007dba:	2200      	movs	r2, #0
 8007dbc:	701a      	strb	r2, [r3, #0]
  }
  return false;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	0018      	movs	r0, r3
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	b004      	add	sp, #16
 8007dc6:	bdb0      	pop	{r4, r5, r7, pc}
 8007dc8:	20002562 	.word	0x20002562
 8007dcc:	20002563 	.word	0x20002563
 8007dd0:	08019f3c 	.word	0x08019f3c
 8007dd4:	08019e50 	.word	0x08019e50
 8007dd8:	2000260d 	.word	0x2000260d

08007ddc <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8007de2:	4b1a      	ldr	r3, [pc, #104]	@ (8007e4c <SGP_DeviceConnected+0x70>)
 8007de4:	2202      	movs	r2, #2
 8007de6:	0019      	movs	r1, r3
 8007de8:	2059      	movs	r0, #89	@ 0x59
 8007dea:	f7ff fd31 	bl	8007850 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 8007dee:	2001      	movs	r0, #1
 8007df0:	f001 fa40 	bl	8009274 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8007df4:	4b16      	ldr	r3, [pc, #88]	@ (8007e50 <SGP_DeviceConnected+0x74>)
 8007df6:	2209      	movs	r2, #9
 8007df8:	0019      	movs	r1, r3
 8007dfa:	2059      	movs	r0, #89	@ 0x59
 8007dfc:	f7ff fd0a 	bl	8007814 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8007e00:	1dfb      	adds	r3, r7, #7
 8007e02:	2200      	movs	r2, #0
 8007e04:	701a      	strb	r2, [r3, #0]
 8007e06:	e011      	b.n	8007e2c <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8007e08:	1dfb      	adds	r3, r7, #7
 8007e0a:	7818      	ldrb	r0, [r3, #0]
 8007e0c:	1dfb      	adds	r3, r7, #7
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	4a0f      	ldr	r2, [pc, #60]	@ (8007e50 <SGP_DeviceConnected+0x74>)
 8007e12:	5cd3      	ldrb	r3, [r2, r3]
 8007e14:	4a0f      	ldr	r2, [pc, #60]	@ (8007e54 <SGP_DeviceConnected+0x78>)
 8007e16:	4910      	ldr	r1, [pc, #64]	@ (8007e58 <SGP_DeviceConnected+0x7c>)
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	0003      	movs	r3, r0
 8007e1c:	2002      	movs	r0, #2
 8007e1e:	f000 fe27 	bl	8008a70 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8007e22:	1dfb      	adds	r3, r7, #7
 8007e24:	781a      	ldrb	r2, [r3, #0]
 8007e26:	1dfb      	adds	r3, r7, #7
 8007e28:	3201      	adds	r2, #1
 8007e2a:	701a      	strb	r2, [r3, #0]
 8007e2c:	1dfb      	adds	r3, r7, #7
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	2b08      	cmp	r3, #8
 8007e32:	d9e9      	bls.n	8007e08 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 8007e34:	4b06      	ldr	r3, [pc, #24]	@ (8007e50 <SGP_DeviceConnected+0x74>)
 8007e36:	2203      	movs	r2, #3
 8007e38:	2109      	movs	r1, #9
 8007e3a:	0018      	movs	r0, r3
 8007e3c:	f000 f80e 	bl	8007e5c <CheckCRC>
 8007e40:	0003      	movs	r3, r0
}
 8007e42:	0018      	movs	r0, r3
 8007e44:	46bd      	mov	sp, r7
 8007e46:	b002      	add	sp, #8
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	46c0      	nop			@ (mov r8, r8)
 8007e4c:	20000114 	.word	0x20000114
 8007e50:	20002558 	.word	0x20002558
 8007e54:	08019f5c 	.word	0x08019f5c
 8007e58:	08019ecc 	.word	0x08019ecc

08007e5c <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 8007e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e5e:	b08f      	sub	sp, #60	@ 0x3c
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e64:	0008      	movs	r0, r1
 8007e66:	0011      	movs	r1, r2
 8007e68:	2323      	movs	r3, #35	@ 0x23
 8007e6a:	18fb      	adds	r3, r7, r3
 8007e6c:	1c02      	adds	r2, r0, #0
 8007e6e:	701a      	strb	r2, [r3, #0]
 8007e70:	2322      	movs	r3, #34	@ 0x22
 8007e72:	18fb      	adds	r3, r7, r3
 8007e74:	1c0a      	adds	r2, r1, #0
 8007e76:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8007e78:	2317      	movs	r3, #23
 8007e7a:	2220      	movs	r2, #32
 8007e7c:	189b      	adds	r3, r3, r2
 8007e7e:	19db      	adds	r3, r3, r7
 8007e80:	2200      	movs	r2, #0
 8007e82:	701a      	strb	r2, [r3, #0]
 8007e84:	e09f      	b.n	8007fc6 <CheckCRC+0x16a>
 8007e86:	466b      	mov	r3, sp
 8007e88:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 8007e8a:	2322      	movs	r3, #34	@ 0x22
 8007e8c:	18fb      	adds	r3, r7, r3
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	001a      	movs	r2, r3
 8007e92:	3a01      	subs	r2, #1
 8007e94:	633a      	str	r2, [r7, #48]	@ 0x30
 8007e96:	60bb      	str	r3, [r7, #8]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	60fa      	str	r2, [r7, #12]
 8007e9c:	68b8      	ldr	r0, [r7, #8]
 8007e9e:	68f9      	ldr	r1, [r7, #12]
 8007ea0:	0002      	movs	r2, r0
 8007ea2:	0f52      	lsrs	r2, r2, #29
 8007ea4:	000c      	movs	r4, r1
 8007ea6:	00e4      	lsls	r4, r4, #3
 8007ea8:	61fc      	str	r4, [r7, #28]
 8007eaa:	69fc      	ldr	r4, [r7, #28]
 8007eac:	4314      	orrs	r4, r2
 8007eae:	61fc      	str	r4, [r7, #28]
 8007eb0:	0002      	movs	r2, r0
 8007eb2:	00d2      	lsls	r2, r2, #3
 8007eb4:	61ba      	str	r2, [r7, #24]
 8007eb6:	603b      	str	r3, [r7, #0]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	607a      	str	r2, [r7, #4]
 8007ebc:	6838      	ldr	r0, [r7, #0]
 8007ebe:	6879      	ldr	r1, [r7, #4]
 8007ec0:	0002      	movs	r2, r0
 8007ec2:	0f52      	lsrs	r2, r2, #29
 8007ec4:	000c      	movs	r4, r1
 8007ec6:	00e4      	lsls	r4, r4, #3
 8007ec8:	617c      	str	r4, [r7, #20]
 8007eca:	697c      	ldr	r4, [r7, #20]
 8007ecc:	4314      	orrs	r4, r2
 8007ece:	617c      	str	r4, [r7, #20]
 8007ed0:	0002      	movs	r2, r0
 8007ed2:	00d2      	lsls	r2, r2, #3
 8007ed4:	613a      	str	r2, [r7, #16]
 8007ed6:	3307      	adds	r3, #7
 8007ed8:	08db      	lsrs	r3, r3, #3
 8007eda:	00db      	lsls	r3, r3, #3
 8007edc:	466a      	mov	r2, sp
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	469d      	mov	sp, r3
 8007ee2:	466b      	mov	r3, sp
 8007ee4:	3300      	adds	r3, #0
 8007ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8007ee8:	2316      	movs	r3, #22
 8007eea:	2220      	movs	r2, #32
 8007eec:	189b      	adds	r3, r3, r2
 8007eee:	19db      	adds	r3, r3, r7
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	701a      	strb	r2, [r3, #0]
 8007ef4:	e01e      	b.n	8007f34 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 8007ef6:	2317      	movs	r3, #23
 8007ef8:	2220      	movs	r2, #32
 8007efa:	189b      	adds	r3, r3, r2
 8007efc:	19db      	adds	r3, r3, r7
 8007efe:	781a      	ldrb	r2, [r3, #0]
 8007f00:	2116      	movs	r1, #22
 8007f02:	2320      	movs	r3, #32
 8007f04:	18cb      	adds	r3, r1, r3
 8007f06:	19db      	adds	r3, r3, r7
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	18d3      	adds	r3, r2, r3
 8007f0c:	001a      	movs	r2, r3
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f10:	189a      	adds	r2, r3, r2
 8007f12:	0008      	movs	r0, r1
 8007f14:	2320      	movs	r3, #32
 8007f16:	18cb      	adds	r3, r1, r3
 8007f18:	19db      	adds	r3, r3, r7
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	7811      	ldrb	r1, [r2, #0]
 8007f1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f20:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8007f22:	2320      	movs	r3, #32
 8007f24:	18c3      	adds	r3, r0, r3
 8007f26:	19db      	adds	r3, r3, r7
 8007f28:	781a      	ldrb	r2, [r3, #0]
 8007f2a:	2320      	movs	r3, #32
 8007f2c:	18c3      	adds	r3, r0, r3
 8007f2e:	19db      	adds	r3, r3, r7
 8007f30:	3201      	adds	r2, #1
 8007f32:	701a      	strb	r2, [r3, #0]
 8007f34:	2316      	movs	r3, #22
 8007f36:	2220      	movs	r2, #32
 8007f38:	189b      	adds	r3, r3, r2
 8007f3a:	19da      	adds	r2, r3, r7
 8007f3c:	2322      	movs	r3, #34	@ 0x22
 8007f3e:	18fb      	adds	r3, r7, r3
 8007f40:	7812      	ldrb	r2, [r2, #0]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d3d6      	bcc.n	8007ef6 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8007f48:	2417      	movs	r4, #23
 8007f4a:	2320      	movs	r3, #32
 8007f4c:	18e3      	adds	r3, r4, r3
 8007f4e:	19db      	adds	r3, r3, r7
 8007f50:	781a      	ldrb	r2, [r3, #0]
 8007f52:	2322      	movs	r3, #34	@ 0x22
 8007f54:	18fb      	adds	r3, r7, r3
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	18d3      	adds	r3, r2, r3
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f5e:	18d2      	adds	r2, r2, r3
 8007f60:	250b      	movs	r5, #11
 8007f62:	2320      	movs	r3, #32
 8007f64:	18eb      	adds	r3, r5, r3
 8007f66:	19db      	adds	r3, r3, r7
 8007f68:	7812      	ldrb	r2, [r2, #0]
 8007f6a:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8007f6c:	2322      	movs	r3, #34	@ 0x22
 8007f6e:	18fb      	adds	r3, r7, r3
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	3b01      	subs	r3, #1
 8007f74:	b2da      	uxtb	r2, r3
 8007f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f78:	0011      	movs	r1, r2
 8007f7a:	0018      	movs	r0, r3
 8007f7c:	f000 f838 	bl	8007ff0 <CalculateCRC>
 8007f80:	0003      	movs	r3, r0
 8007f82:	001a      	movs	r2, r3
 8007f84:	2320      	movs	r3, #32
 8007f86:	18eb      	adds	r3, r5, r3
 8007f88:	19db      	adds	r3, r3, r7
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d00c      	beq.n	8007faa <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8007f90:	2320      	movs	r3, #32
 8007f92:	18e3      	adds	r3, r4, r3
 8007f94:	19db      	adds	r3, r3, r7
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	4a13      	ldr	r2, [pc, #76]	@ (8007fe8 <CheckCRC+0x18c>)
 8007f9c:	4913      	ldr	r1, [pc, #76]	@ (8007fec <CheckCRC+0x190>)
 8007f9e:	2001      	movs	r0, #1
 8007fa0:	f000 fd66 	bl	8008a70 <CreateLine>
      return false;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	46b5      	mov	sp, r6
 8007fa8:	e019      	b.n	8007fde <CheckCRC+0x182>
 8007faa:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8007fac:	2217      	movs	r2, #23
 8007fae:	2320      	movs	r3, #32
 8007fb0:	18d3      	adds	r3, r2, r3
 8007fb2:	19db      	adds	r3, r3, r7
 8007fb4:	2120      	movs	r1, #32
 8007fb6:	1852      	adds	r2, r2, r1
 8007fb8:	19d1      	adds	r1, r2, r7
 8007fba:	2222      	movs	r2, #34	@ 0x22
 8007fbc:	18ba      	adds	r2, r7, r2
 8007fbe:	7809      	ldrb	r1, [r1, #0]
 8007fc0:	7812      	ldrb	r2, [r2, #0]
 8007fc2:	188a      	adds	r2, r1, r2
 8007fc4:	701a      	strb	r2, [r3, #0]
 8007fc6:	2317      	movs	r3, #23
 8007fc8:	2220      	movs	r2, #32
 8007fca:	189b      	adds	r3, r3, r2
 8007fcc:	19da      	adds	r2, r3, r7
 8007fce:	2323      	movs	r3, #35	@ 0x23
 8007fd0:	18fb      	adds	r3, r7, r3
 8007fd2:	7812      	ldrb	r2, [r2, #0]
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d200      	bcs.n	8007fdc <CheckCRC+0x180>
 8007fda:	e754      	b.n	8007e86 <CheckCRC+0x2a>
    }
  }
  return true;
 8007fdc:	2301      	movs	r3, #1
}
 8007fde:	0018      	movs	r0, r3
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	b00f      	add	sp, #60	@ 0x3c
 8007fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fe6:	46c0      	nop			@ (mov r8, r8)
 8007fe8:	08019f7c 	.word	0x08019f7c
 8007fec:	08019ea8 	.word	0x08019ea8

08007ff0 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	000a      	movs	r2, r1
 8007ffa:	1cfb      	adds	r3, r7, #3
 8007ffc:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8007ffe:	230f      	movs	r3, #15
 8008000:	18fb      	adds	r3, r7, r3
 8008002:	22ff      	movs	r2, #255	@ 0xff
 8008004:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8008006:	230e      	movs	r3, #14
 8008008:	18fb      	adds	r3, r7, r3
 800800a:	2200      	movs	r2, #0
 800800c:	701a      	strb	r2, [r3, #0]
 800800e:	e037      	b.n	8008080 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8008010:	230e      	movs	r3, #14
 8008012:	18fb      	adds	r3, r7, r3
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	18d3      	adds	r3, r2, r3
 800801a:	7819      	ldrb	r1, [r3, #0]
 800801c:	220f      	movs	r2, #15
 800801e:	18bb      	adds	r3, r7, r2
 8008020:	18ba      	adds	r2, r7, r2
 8008022:	7812      	ldrb	r2, [r2, #0]
 8008024:	404a      	eors	r2, r1
 8008026:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8008028:	230d      	movs	r3, #13
 800802a:	18fb      	adds	r3, r7, r3
 800802c:	2200      	movs	r2, #0
 800802e:	701a      	strb	r2, [r3, #0]
 8008030:	e01b      	b.n	800806a <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 8008032:	210f      	movs	r1, #15
 8008034:	187b      	adds	r3, r7, r1
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	b25b      	sxtb	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	da09      	bge.n	8008052 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800803e:	187b      	adds	r3, r7, r1
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	005b      	lsls	r3, r3, #1
 8008044:	b25b      	sxtb	r3, r3
 8008046:	2231      	movs	r2, #49	@ 0x31
 8008048:	4053      	eors	r3, r2
 800804a:	b25a      	sxtb	r2, r3
 800804c:	187b      	adds	r3, r7, r1
 800804e:	701a      	strb	r2, [r3, #0]
 8008050:	e005      	b.n	800805e <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 8008052:	230f      	movs	r3, #15
 8008054:	18fa      	adds	r2, r7, r3
 8008056:	18fb      	adds	r3, r7, r3
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	18db      	adds	r3, r3, r3
 800805c:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800805e:	210d      	movs	r1, #13
 8008060:	187b      	adds	r3, r7, r1
 8008062:	781a      	ldrb	r2, [r3, #0]
 8008064:	187b      	adds	r3, r7, r1
 8008066:	3201      	adds	r2, #1
 8008068:	701a      	strb	r2, [r3, #0]
 800806a:	230d      	movs	r3, #13
 800806c:	18fb      	adds	r3, r7, r3
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	2b07      	cmp	r3, #7
 8008072:	d9de      	bls.n	8008032 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8008074:	210e      	movs	r1, #14
 8008076:	187b      	adds	r3, r7, r1
 8008078:	781a      	ldrb	r2, [r3, #0]
 800807a:	187b      	adds	r3, r7, r1
 800807c:	3201      	adds	r2, #1
 800807e:	701a      	strb	r2, [r3, #0]
 8008080:	230e      	movs	r3, #14
 8008082:	18fa      	adds	r2, r7, r3
 8008084:	1cfb      	adds	r3, r7, #3
 8008086:	7812      	ldrb	r2, [r2, #0]
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	429a      	cmp	r2, r3
 800808c:	d3c0      	bcc.n	8008010 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800808e:	230f      	movs	r3, #15
 8008090:	18fb      	adds	r3, r7, r3
 8008092:	781b      	ldrb	r3, [r3, #0]
}
 8008094:	0018      	movs	r0, r3
 8008096:	46bd      	mov	sp, r7
 8008098:	b004      	add	sp, #16
 800809a:	bd80      	pop	{r7, pc}

0800809c <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4936      	ldr	r1, [pc, #216]	@ (8008184 <SGP_GetHT+0xe8>)
 80080ac:	1c18      	adds	r0, r3, #0
 80080ae:	f7f8 fb85 	bl	80007bc <__aeabi_fadd>
 80080b2:	1c03      	adds	r3, r0, #0
 80080b4:	4934      	ldr	r1, [pc, #208]	@ (8008188 <SGP_GetHT+0xec>)
 80080b6:	1c18      	adds	r0, r3, #0
 80080b8:	f7f8 fd0a 	bl	8000ad0 <__aeabi_fdiv>
 80080bc:	1c03      	adds	r3, r0, #0
 80080be:	4933      	ldr	r1, [pc, #204]	@ (800818c <SGP_GetHT+0xf0>)
 80080c0:	1c18      	adds	r0, r3, #0
 80080c2:	f7f8 feeb 	bl	8000e9c <__aeabi_fmul>
 80080c6:	1c03      	adds	r3, r0, #0
 80080c8:	1c18      	adds	r0, r3, #0
 80080ca:	f7f8 fa75 	bl	80005b8 <__aeabi_f2uiz>
 80080ce:	0003      	movs	r3, r0
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	4b2f      	ldr	r3, [pc, #188]	@ (8008190 <SGP_GetHT+0xf4>)
 80080d4:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	492e      	ldr	r1, [pc, #184]	@ (8008194 <SGP_GetHT+0xf8>)
 80080dc:	1c18      	adds	r0, r3, #0
 80080de:	f7f8 fcf7 	bl	8000ad0 <__aeabi_fdiv>
 80080e2:	1c03      	adds	r3, r0, #0
 80080e4:	4929      	ldr	r1, [pc, #164]	@ (800818c <SGP_GetHT+0xf0>)
 80080e6:	1c18      	adds	r0, r3, #0
 80080e8:	f7f8 fed8 	bl	8000e9c <__aeabi_fmul>
 80080ec:	1c03      	adds	r3, r0, #0
 80080ee:	1c18      	adds	r0, r3, #0
 80080f0:	f7f8 fa62 	bl	80005b8 <__aeabi_f2uiz>
 80080f4:	0003      	movs	r3, r0
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	4b27      	ldr	r3, [pc, #156]	@ (8008198 <SGP_GetHT+0xfc>)
 80080fa:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 80080fc:	4b26      	ldr	r3, [pc, #152]	@ (8008198 <SGP_GetHT+0xfc>)
 80080fe:	881b      	ldrh	r3, [r3, #0]
 8008100:	0a1b      	lsrs	r3, r3, #8
 8008102:	b29b      	uxth	r3, r3
 8008104:	b2da      	uxtb	r2, r3
 8008106:	4b25      	ldr	r3, [pc, #148]	@ (800819c <SGP_GetHT+0x100>)
 8008108:	709a      	strb	r2, [r3, #2]
 800810a:	4b24      	ldr	r3, [pc, #144]	@ (800819c <SGP_GetHT+0x100>)
 800810c:	789a      	ldrb	r2, [r3, #2]
 800810e:	210c      	movs	r1, #12
 8008110:	187b      	adds	r3, r7, r1
 8008112:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8008114:	4b20      	ldr	r3, [pc, #128]	@ (8008198 <SGP_GetHT+0xfc>)
 8008116:	881b      	ldrh	r3, [r3, #0]
 8008118:	b2da      	uxtb	r2, r3
 800811a:	4b20      	ldr	r3, [pc, #128]	@ (800819c <SGP_GetHT+0x100>)
 800811c:	70da      	strb	r2, [r3, #3]
 800811e:	4b1f      	ldr	r3, [pc, #124]	@ (800819c <SGP_GetHT+0x100>)
 8008120:	78da      	ldrb	r2, [r3, #3]
 8008122:	187b      	adds	r3, r7, r1
 8008124:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 8008126:	187b      	adds	r3, r7, r1
 8008128:	2102      	movs	r1, #2
 800812a:	0018      	movs	r0, r3
 800812c:	f7ff ff60 	bl	8007ff0 <CalculateCRC>
 8008130:	0003      	movs	r3, r0
 8008132:	001a      	movs	r2, r3
 8008134:	4b19      	ldr	r3, [pc, #100]	@ (800819c <SGP_GetHT+0x100>)
 8008136:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 8008138:	4b15      	ldr	r3, [pc, #84]	@ (8008190 <SGP_GetHT+0xf4>)
 800813a:	881b      	ldrh	r3, [r3, #0]
 800813c:	0a1b      	lsrs	r3, r3, #8
 800813e:	b29b      	uxth	r3, r3
 8008140:	b2da      	uxtb	r2, r3
 8008142:	4b16      	ldr	r3, [pc, #88]	@ (800819c <SGP_GetHT+0x100>)
 8008144:	715a      	strb	r2, [r3, #5]
 8008146:	4b15      	ldr	r3, [pc, #84]	@ (800819c <SGP_GetHT+0x100>)
 8008148:	795a      	ldrb	r2, [r3, #5]
 800814a:	2108      	movs	r1, #8
 800814c:	187b      	adds	r3, r7, r1
 800814e:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 8008150:	4b0f      	ldr	r3, [pc, #60]	@ (8008190 <SGP_GetHT+0xf4>)
 8008152:	881b      	ldrh	r3, [r3, #0]
 8008154:	b2da      	uxtb	r2, r3
 8008156:	4b11      	ldr	r3, [pc, #68]	@ (800819c <SGP_GetHT+0x100>)
 8008158:	719a      	strb	r2, [r3, #6]
 800815a:	4b10      	ldr	r3, [pc, #64]	@ (800819c <SGP_GetHT+0x100>)
 800815c:	799a      	ldrb	r2, [r3, #6]
 800815e:	187b      	adds	r3, r7, r1
 8008160:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 8008162:	187b      	adds	r3, r7, r1
 8008164:	2102      	movs	r1, #2
 8008166:	0018      	movs	r0, r3
 8008168:	f7ff ff42 	bl	8007ff0 <CalculateCRC>
 800816c:	0003      	movs	r3, r0
 800816e:	001a      	movs	r2, r3
 8008170:	4b0a      	ldr	r3, [pc, #40]	@ (800819c <SGP_GetHT+0x100>)
 8008172:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 8008174:	4b0a      	ldr	r3, [pc, #40]	@ (80081a0 <SGP_GetHT+0x104>)
 8008176:	2201      	movs	r2, #1
 8008178:	701a      	strb	r2, [r3, #0]
}
 800817a:	46c0      	nop			@ (mov r8, r8)
 800817c:	46bd      	mov	sp, r7
 800817e:	b004      	add	sp, #16
 8008180:	bd80      	pop	{r7, pc}
 8008182:	46c0      	nop			@ (mov r8, r8)
 8008184:	42340000 	.word	0x42340000
 8008188:	432f0000 	.word	0x432f0000
 800818c:	477fff00 	.word	0x477fff00
 8008190:	2000260a 	.word	0x2000260a
 8008194:	42c80000 	.word	0x42c80000
 8008198:	20002608 	.word	0x20002608
 800819c:	20000120 	.word	0x20000120
 80081a0:	2000260c 	.word	0x2000260c

080081a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80081a8:	4b07      	ldr	r3, [pc, #28]	@ (80081c8 <HAL_MspInit+0x24>)
 80081aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081ac:	4b06      	ldr	r3, [pc, #24]	@ (80081c8 <HAL_MspInit+0x24>)
 80081ae:	2101      	movs	r1, #1
 80081b0:	430a      	orrs	r2, r1
 80081b2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80081b4:	4b04      	ldr	r3, [pc, #16]	@ (80081c8 <HAL_MspInit+0x24>)
 80081b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081b8:	4b03      	ldr	r3, [pc, #12]	@ (80081c8 <HAL_MspInit+0x24>)
 80081ba:	2180      	movs	r1, #128	@ 0x80
 80081bc:	0549      	lsls	r1, r1, #21
 80081be:	430a      	orrs	r2, r1
 80081c0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80081c2:	46c0      	nop			@ (mov r8, r8)
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	40021000 	.word	0x40021000

080081cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80081d0:	46c0      	nop			@ (mov r8, r8)
 80081d2:	e7fd      	b.n	80081d0 <NMI_Handler+0x4>

080081d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80081d8:	46c0      	nop			@ (mov r8, r8)
 80081da:	e7fd      	b.n	80081d8 <HardFault_Handler+0x4>

080081dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80081e0:	46c0      	nop			@ (mov r8, r8)
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80081ea:	46c0      	nop			@ (mov r8, r8)
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80081f4:	f001 f822 	bl	800923c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80081f8:	46c0      	nop			@ (mov r8, r8)
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
	...

08008200 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8008204:	4b05      	ldr	r3, [pc, #20]	@ (800821c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8008206:	0018      	movs	r0, r3
 8008208:	f001 fe77 	bl	8009efa <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800820c:	4b04      	ldr	r3, [pc, #16]	@ (8008220 <DMA1_Channel2_3_IRQHandler+0x20>)
 800820e:	0018      	movs	r0, r3
 8008210:	f001 fe73 	bl	8009efa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8008214:	46c0      	nop			@ (mov r8, r8)
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	46c0      	nop			@ (mov r8, r8)
 800821c:	20000be0 	.word	0x20000be0
 8008220:	20000b98 	.word	0x20000b98

08008224 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8008228:	4b07      	ldr	r3, [pc, #28]	@ (8008248 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800822a:	0018      	movs	r0, r3
 800822c:	f001 fe65 	bl	8009efa <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8008230:	4b06      	ldr	r3, [pc, #24]	@ (800824c <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 8008232:	0018      	movs	r0, r3
 8008234:	f001 fe61 	bl	8009efa <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8008238:	4b05      	ldr	r3, [pc, #20]	@ (8008250 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800823a:	0018      	movs	r0, r3
 800823c:	f001 fe5d 	bl	8009efa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8008240:	46c0      	nop			@ (mov r8, r8)
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
 8008246:	46c0      	nop			@ (mov r8, r8)
 8008248:	20000c64 	.word	0x20000c64
 800824c:	20002808 	.word	0x20002808
 8008250:	20002850 	.word	0x20002850

08008254 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8008258:	4b03      	ldr	r3, [pc, #12]	@ (8008268 <USART4_5_IRQHandler+0x14>)
 800825a:	0018      	movs	r0, r3
 800825c:	f008 f846 	bl	80102ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8008260:	46c0      	nop			@ (mov r8, r8)
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	46c0      	nop			@ (mov r8, r8)
 8008268:	20002750 	.word	0x20002750

0800826c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8008270:	4b09      	ldr	r3, [pc, #36]	@ (8008298 <I2C1_IRQHandler+0x2c>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	699a      	ldr	r2, [r3, #24]
 8008276:	23e0      	movs	r3, #224	@ 0xe0
 8008278:	00db      	lsls	r3, r3, #3
 800827a:	4013      	ands	r3, r2
 800827c:	d004      	beq.n	8008288 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800827e:	4b06      	ldr	r3, [pc, #24]	@ (8008298 <I2C1_IRQHandler+0x2c>)
 8008280:	0018      	movs	r0, r3
 8008282:	f002 fc5d 	bl	800ab40 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8008286:	e003      	b.n	8008290 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8008288:	4b03      	ldr	r3, [pc, #12]	@ (8008298 <I2C1_IRQHandler+0x2c>)
 800828a:	0018      	movs	r0, r3
 800828c:	f002 fc3e 	bl	800ab0c <HAL_I2C_EV_IRQHandler>
}
 8008290:	46c0      	nop			@ (mov r8, r8)
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	46c0      	nop			@ (mov r8, r8)
 8008298:	20000af0 	.word	0x20000af0

0800829c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80082a0:	4b03      	ldr	r3, [pc, #12]	@ (80082b0 <USB_IRQHandler+0x14>)
 80082a2:	0018      	movs	r0, r3
 80082a4:	f004 fe14 	bl	800ced0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80082a8:	46c0      	nop			@ (mov r8, r8)
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	46c0      	nop			@ (mov r8, r8)
 80082b0:	20003d80 	.word	0x20003d80

080082b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	af00      	add	r7, sp, #0
  return 1;
 80082b8:	2301      	movs	r3, #1
}
 80082ba:	0018      	movs	r0, r3
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <_kill>:

int _kill(int pid, int sig)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80082ca:	f00e fbf7 	bl	8016abc <__errno>
 80082ce:	0003      	movs	r3, r0
 80082d0:	2216      	movs	r2, #22
 80082d2:	601a      	str	r2, [r3, #0]
  return -1;
 80082d4:	2301      	movs	r3, #1
 80082d6:	425b      	negs	r3, r3
}
 80082d8:	0018      	movs	r0, r3
 80082da:	46bd      	mov	sp, r7
 80082dc:	b002      	add	sp, #8
 80082de:	bd80      	pop	{r7, pc}

080082e0 <_exit>:

void _exit (int status)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80082e8:	2301      	movs	r3, #1
 80082ea:	425a      	negs	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	0011      	movs	r1, r2
 80082f0:	0018      	movs	r0, r3
 80082f2:	f7ff ffe5 	bl	80082c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80082f6:	46c0      	nop			@ (mov r8, r8)
 80082f8:	e7fd      	b.n	80082f6 <_exit+0x16>

080082fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80082fa:	b580      	push	{r7, lr}
 80082fc:	b086      	sub	sp, #24
 80082fe:	af00      	add	r7, sp, #0
 8008300:	60f8      	str	r0, [r7, #12]
 8008302:	60b9      	str	r1, [r7, #8]
 8008304:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008306:	2300      	movs	r3, #0
 8008308:	617b      	str	r3, [r7, #20]
 800830a:	e00a      	b.n	8008322 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800830c:	e000      	b.n	8008310 <_read+0x16>
 800830e:	bf00      	nop
 8008310:	0001      	movs	r1, r0
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	1c5a      	adds	r2, r3, #1
 8008316:	60ba      	str	r2, [r7, #8]
 8008318:	b2ca      	uxtb	r2, r1
 800831a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	3301      	adds	r3, #1
 8008320:	617b      	str	r3, [r7, #20]
 8008322:	697a      	ldr	r2, [r7, #20]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	429a      	cmp	r2, r3
 8008328:	dbf0      	blt.n	800830c <_read+0x12>
  }

  return len;
 800832a:	687b      	ldr	r3, [r7, #4]
}
 800832c:	0018      	movs	r0, r3
 800832e:	46bd      	mov	sp, r7
 8008330:	b006      	add	sp, #24
 8008332:	bd80      	pop	{r7, pc}

08008334 <_close>:
  }
  return len;
}

int _close(int file)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800833c:	2301      	movs	r3, #1
 800833e:	425b      	negs	r3, r3
}
 8008340:	0018      	movs	r0, r3
 8008342:	46bd      	mov	sp, r7
 8008344:	b002      	add	sp, #8
 8008346:	bd80      	pop	{r7, pc}

08008348 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	2280      	movs	r2, #128	@ 0x80
 8008356:	0192      	lsls	r2, r2, #6
 8008358:	605a      	str	r2, [r3, #4]
  return 0;
 800835a:	2300      	movs	r3, #0
}
 800835c:	0018      	movs	r0, r3
 800835e:	46bd      	mov	sp, r7
 8008360:	b002      	add	sp, #8
 8008362:	bd80      	pop	{r7, pc}

08008364 <_isatty>:

int _isatty(int file)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800836c:	2301      	movs	r3, #1
}
 800836e:	0018      	movs	r0, r3
 8008370:	46bd      	mov	sp, r7
 8008372:	b002      	add	sp, #8
 8008374:	bd80      	pop	{r7, pc}

08008376 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b084      	sub	sp, #16
 800837a:	af00      	add	r7, sp, #0
 800837c:	60f8      	str	r0, [r7, #12]
 800837e:	60b9      	str	r1, [r7, #8]
 8008380:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008382:	2300      	movs	r3, #0
}
 8008384:	0018      	movs	r0, r3
 8008386:	46bd      	mov	sp, r7
 8008388:	b004      	add	sp, #16
 800838a:	bd80      	pop	{r7, pc}

0800838c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b086      	sub	sp, #24
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008394:	4a14      	ldr	r2, [pc, #80]	@ (80083e8 <_sbrk+0x5c>)
 8008396:	4b15      	ldr	r3, [pc, #84]	@ (80083ec <_sbrk+0x60>)
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80083a0:	4b13      	ldr	r3, [pc, #76]	@ (80083f0 <_sbrk+0x64>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d102      	bne.n	80083ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80083a8:	4b11      	ldr	r3, [pc, #68]	@ (80083f0 <_sbrk+0x64>)
 80083aa:	4a12      	ldr	r2, [pc, #72]	@ (80083f4 <_sbrk+0x68>)
 80083ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80083ae:	4b10      	ldr	r3, [pc, #64]	@ (80083f0 <_sbrk+0x64>)
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	18d3      	adds	r3, r2, r3
 80083b6:	693a      	ldr	r2, [r7, #16]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d207      	bcs.n	80083cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80083bc:	f00e fb7e 	bl	8016abc <__errno>
 80083c0:	0003      	movs	r3, r0
 80083c2:	220c      	movs	r2, #12
 80083c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80083c6:	2301      	movs	r3, #1
 80083c8:	425b      	negs	r3, r3
 80083ca:	e009      	b.n	80083e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80083cc:	4b08      	ldr	r3, [pc, #32]	@ (80083f0 <_sbrk+0x64>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80083d2:	4b07      	ldr	r3, [pc, #28]	@ (80083f0 <_sbrk+0x64>)
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	18d2      	adds	r2, r2, r3
 80083da:	4b05      	ldr	r3, [pc, #20]	@ (80083f0 <_sbrk+0x64>)
 80083dc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80083de:	68fb      	ldr	r3, [r7, #12]
}
 80083e0:	0018      	movs	r0, r3
 80083e2:	46bd      	mov	sp, r7
 80083e4:	b006      	add	sp, #24
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	20005000 	.word	0x20005000
 80083ec:	00000400 	.word	0x00000400
 80083f0:	20002614 	.word	0x20002614
 80083f4:	200043e0 	.word	0x200043e0

080083f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80083fc:	46c0      	nop			@ (mov r8, r8)
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
	...

08008404 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b086      	sub	sp, #24
 8008408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800840a:	2310      	movs	r3, #16
 800840c:	18fb      	adds	r3, r7, r3
 800840e:	0018      	movs	r0, r3
 8008410:	2308      	movs	r3, #8
 8008412:	001a      	movs	r2, r3
 8008414:	2100      	movs	r1, #0
 8008416:	f00e facd 	bl	80169b4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800841a:	003b      	movs	r3, r7
 800841c:	0018      	movs	r0, r3
 800841e:	2310      	movs	r3, #16
 8008420:	001a      	movs	r2, r3
 8008422:	2100      	movs	r1, #0
 8008424:	f00e fac6 	bl	80169b4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008428:	4b2e      	ldr	r3, [pc, #184]	@ (80084e4 <MX_TIM2_Init+0xe0>)
 800842a:	2280      	movs	r2, #128	@ 0x80
 800842c:	05d2      	lsls	r2, r2, #23
 800842e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8008430:	4b2c      	ldr	r3, [pc, #176]	@ (80084e4 <MX_TIM2_Init+0xe0>)
 8008432:	2200      	movs	r2, #0
 8008434:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008436:	4b2b      	ldr	r3, [pc, #172]	@ (80084e4 <MX_TIM2_Init+0xe0>)
 8008438:	2200      	movs	r2, #0
 800843a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800843c:	4b29      	ldr	r3, [pc, #164]	@ (80084e4 <MX_TIM2_Init+0xe0>)
 800843e:	4a2a      	ldr	r2, [pc, #168]	@ (80084e8 <MX_TIM2_Init+0xe4>)
 8008440:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008442:	4b28      	ldr	r3, [pc, #160]	@ (80084e4 <MX_TIM2_Init+0xe0>)
 8008444:	2200      	movs	r2, #0
 8008446:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008448:	4b26      	ldr	r3, [pc, #152]	@ (80084e4 <MX_TIM2_Init+0xe0>)
 800844a:	2200      	movs	r2, #0
 800844c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800844e:	4b25      	ldr	r3, [pc, #148]	@ (80084e4 <MX_TIM2_Init+0xe0>)
 8008450:	0018      	movs	r0, r3
 8008452:	f007 f9bd 	bl	800f7d0 <HAL_TIM_PWM_Init>
 8008456:	1e03      	subs	r3, r0, #0
 8008458:	d001      	beq.n	800845e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800845a:	f7fd fb5b 	bl	8005b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800845e:	2110      	movs	r1, #16
 8008460:	187b      	adds	r3, r7, r1
 8008462:	2200      	movs	r2, #0
 8008464:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008466:	187b      	adds	r3, r7, r1
 8008468:	2200      	movs	r2, #0
 800846a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800846c:	187a      	adds	r2, r7, r1
 800846e:	4b1d      	ldr	r3, [pc, #116]	@ (80084e4 <MX_TIM2_Init+0xe0>)
 8008470:	0011      	movs	r1, r2
 8008472:	0018      	movs	r0, r3
 8008474:	f007 fcca 	bl	800fe0c <HAL_TIMEx_MasterConfigSynchronization>
 8008478:	1e03      	subs	r3, r0, #0
 800847a:	d001      	beq.n	8008480 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800847c:	f7fd fb4a 	bl	8005b14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008480:	003b      	movs	r3, r7
 8008482:	2260      	movs	r2, #96	@ 0x60
 8008484:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8008486:	003b      	movs	r3, r7
 8008488:	2200      	movs	r2, #0
 800848a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800848c:	003b      	movs	r3, r7
 800848e:	2200      	movs	r2, #0
 8008490:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008492:	003b      	movs	r3, r7
 8008494:	2200      	movs	r2, #0
 8008496:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008498:	0039      	movs	r1, r7
 800849a:	4b12      	ldr	r3, [pc, #72]	@ (80084e4 <MX_TIM2_Init+0xe0>)
 800849c:	2200      	movs	r2, #0
 800849e:	0018      	movs	r0, r3
 80084a0:	f007 fa68 	bl	800f974 <HAL_TIM_PWM_ConfigChannel>
 80084a4:	1e03      	subs	r3, r0, #0
 80084a6:	d001      	beq.n	80084ac <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80084a8:	f7fd fb34 	bl	8005b14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80084ac:	0039      	movs	r1, r7
 80084ae:	4b0d      	ldr	r3, [pc, #52]	@ (80084e4 <MX_TIM2_Init+0xe0>)
 80084b0:	2208      	movs	r2, #8
 80084b2:	0018      	movs	r0, r3
 80084b4:	f007 fa5e 	bl	800f974 <HAL_TIM_PWM_ConfigChannel>
 80084b8:	1e03      	subs	r3, r0, #0
 80084ba:	d001      	beq.n	80084c0 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80084bc:	f7fd fb2a 	bl	8005b14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80084c0:	0039      	movs	r1, r7
 80084c2:	4b08      	ldr	r3, [pc, #32]	@ (80084e4 <MX_TIM2_Init+0xe0>)
 80084c4:	220c      	movs	r2, #12
 80084c6:	0018      	movs	r0, r3
 80084c8:	f007 fa54 	bl	800f974 <HAL_TIM_PWM_ConfigChannel>
 80084cc:	1e03      	subs	r3, r0, #0
 80084ce:	d001      	beq.n	80084d4 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 80084d0:	f7fd fb20 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80084d4:	4b03      	ldr	r3, [pc, #12]	@ (80084e4 <MX_TIM2_Init+0xe0>)
 80084d6:	0018      	movs	r0, r3
 80084d8:	f000 f8aa 	bl	8008630 <HAL_TIM_MspPostInit>

}
 80084dc:	46c0      	nop			@ (mov r8, r8)
 80084de:	46bd      	mov	sp, r7
 80084e0:	b006      	add	sp, #24
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	20002618 	.word	0x20002618
 80084e8:	0000ffff 	.word	0x0000ffff

080084ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b086      	sub	sp, #24
 80084f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80084f2:	2310      	movs	r3, #16
 80084f4:	18fb      	adds	r3, r7, r3
 80084f6:	0018      	movs	r0, r3
 80084f8:	2308      	movs	r3, #8
 80084fa:	001a      	movs	r2, r3
 80084fc:	2100      	movs	r1, #0
 80084fe:	f00e fa59 	bl	80169b4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008502:	003b      	movs	r3, r7
 8008504:	0018      	movs	r0, r3
 8008506:	2310      	movs	r3, #16
 8008508:	001a      	movs	r2, r3
 800850a:	2100      	movs	r1, #0
 800850c:	f00e fa52 	bl	80169b4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008510:	4b32      	ldr	r3, [pc, #200]	@ (80085dc <MX_TIM3_Init+0xf0>)
 8008512:	4a33      	ldr	r2, [pc, #204]	@ (80085e0 <MX_TIM3_Init+0xf4>)
 8008514:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008516:	4b31      	ldr	r3, [pc, #196]	@ (80085dc <MX_TIM3_Init+0xf0>)
 8008518:	2200      	movs	r2, #0
 800851a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800851c:	4b2f      	ldr	r3, [pc, #188]	@ (80085dc <MX_TIM3_Init+0xf0>)
 800851e:	2200      	movs	r2, #0
 8008520:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8008522:	4b2e      	ldr	r3, [pc, #184]	@ (80085dc <MX_TIM3_Init+0xf0>)
 8008524:	4a2f      	ldr	r2, [pc, #188]	@ (80085e4 <MX_TIM3_Init+0xf8>)
 8008526:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008528:	4b2c      	ldr	r3, [pc, #176]	@ (80085dc <MX_TIM3_Init+0xf0>)
 800852a:	2200      	movs	r2, #0
 800852c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800852e:	4b2b      	ldr	r3, [pc, #172]	@ (80085dc <MX_TIM3_Init+0xf0>)
 8008530:	2200      	movs	r2, #0
 8008532:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008534:	4b29      	ldr	r3, [pc, #164]	@ (80085dc <MX_TIM3_Init+0xf0>)
 8008536:	0018      	movs	r0, r3
 8008538:	f007 f94a 	bl	800f7d0 <HAL_TIM_PWM_Init>
 800853c:	1e03      	subs	r3, r0, #0
 800853e:	d001      	beq.n	8008544 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8008540:	f7fd fae8 	bl	8005b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008544:	2110      	movs	r1, #16
 8008546:	187b      	adds	r3, r7, r1
 8008548:	2200      	movs	r2, #0
 800854a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800854c:	187b      	adds	r3, r7, r1
 800854e:	2200      	movs	r2, #0
 8008550:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008552:	187a      	adds	r2, r7, r1
 8008554:	4b21      	ldr	r3, [pc, #132]	@ (80085dc <MX_TIM3_Init+0xf0>)
 8008556:	0011      	movs	r1, r2
 8008558:	0018      	movs	r0, r3
 800855a:	f007 fc57 	bl	800fe0c <HAL_TIMEx_MasterConfigSynchronization>
 800855e:	1e03      	subs	r3, r0, #0
 8008560:	d001      	beq.n	8008566 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8008562:	f7fd fad7 	bl	8005b14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008566:	003b      	movs	r3, r7
 8008568:	2260      	movs	r2, #96	@ 0x60
 800856a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800856c:	003b      	movs	r3, r7
 800856e:	2200      	movs	r2, #0
 8008570:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008572:	003b      	movs	r3, r7
 8008574:	2200      	movs	r2, #0
 8008576:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008578:	003b      	movs	r3, r7
 800857a:	2200      	movs	r2, #0
 800857c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800857e:	0039      	movs	r1, r7
 8008580:	4b16      	ldr	r3, [pc, #88]	@ (80085dc <MX_TIM3_Init+0xf0>)
 8008582:	2200      	movs	r2, #0
 8008584:	0018      	movs	r0, r3
 8008586:	f007 f9f5 	bl	800f974 <HAL_TIM_PWM_ConfigChannel>
 800858a:	1e03      	subs	r3, r0, #0
 800858c:	d001      	beq.n	8008592 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800858e:	f7fd fac1 	bl	8005b14 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8008592:	4b12      	ldr	r3, [pc, #72]	@ (80085dc <MX_TIM3_Init+0xf0>)
 8008594:	2104      	movs	r1, #4
 8008596:	0018      	movs	r0, r3
 8008598:	f007 fc96 	bl	800fec8 <HAL_TIMEx_RemapConfig>
 800859c:	1e03      	subs	r3, r0, #0
 800859e:	d001      	beq.n	80085a4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80085a0:	f7fd fab8 	bl	8005b14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80085a4:	0039      	movs	r1, r7
 80085a6:	4b0d      	ldr	r3, [pc, #52]	@ (80085dc <MX_TIM3_Init+0xf0>)
 80085a8:	2204      	movs	r2, #4
 80085aa:	0018      	movs	r0, r3
 80085ac:	f007 f9e2 	bl	800f974 <HAL_TIM_PWM_ConfigChannel>
 80085b0:	1e03      	subs	r3, r0, #0
 80085b2:	d001      	beq.n	80085b8 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 80085b4:	f7fd faae 	bl	8005b14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80085b8:	0039      	movs	r1, r7
 80085ba:	4b08      	ldr	r3, [pc, #32]	@ (80085dc <MX_TIM3_Init+0xf0>)
 80085bc:	2208      	movs	r2, #8
 80085be:	0018      	movs	r0, r3
 80085c0:	f007 f9d8 	bl	800f974 <HAL_TIM_PWM_ConfigChannel>
 80085c4:	1e03      	subs	r3, r0, #0
 80085c6:	d001      	beq.n	80085cc <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80085c8:	f7fd faa4 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80085cc:	4b03      	ldr	r3, [pc, #12]	@ (80085dc <MX_TIM3_Init+0xf0>)
 80085ce:	0018      	movs	r0, r3
 80085d0:	f000 f82e 	bl	8008630 <HAL_TIM_MspPostInit>

}
 80085d4:	46c0      	nop			@ (mov r8, r8)
 80085d6:	46bd      	mov	sp, r7
 80085d8:	b006      	add	sp, #24
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	20002658 	.word	0x20002658
 80085e0:	40000400 	.word	0x40000400
 80085e4:	0000ffff 	.word	0x0000ffff

080085e8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	2380      	movs	r3, #128	@ 0x80
 80085f6:	05db      	lsls	r3, r3, #23
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d106      	bne.n	800860a <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80085fc:	4b0a      	ldr	r3, [pc, #40]	@ (8008628 <HAL_TIM_PWM_MspInit+0x40>)
 80085fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008600:	4b09      	ldr	r3, [pc, #36]	@ (8008628 <HAL_TIM_PWM_MspInit+0x40>)
 8008602:	2101      	movs	r1, #1
 8008604:	430a      	orrs	r2, r1
 8008606:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8008608:	e00a      	b.n	8008620 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a07      	ldr	r2, [pc, #28]	@ (800862c <HAL_TIM_PWM_MspInit+0x44>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d105      	bne.n	8008620 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008614:	4b04      	ldr	r3, [pc, #16]	@ (8008628 <HAL_TIM_PWM_MspInit+0x40>)
 8008616:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008618:	4b03      	ldr	r3, [pc, #12]	@ (8008628 <HAL_TIM_PWM_MspInit+0x40>)
 800861a:	2102      	movs	r1, #2
 800861c:	430a      	orrs	r2, r1
 800861e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8008620:	46c0      	nop			@ (mov r8, r8)
 8008622:	46bd      	mov	sp, r7
 8008624:	b002      	add	sp, #8
 8008626:	bd80      	pop	{r7, pc}
 8008628:	40021000 	.word	0x40021000
 800862c:	40000400 	.word	0x40000400

08008630 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008630:	b590      	push	{r4, r7, lr}
 8008632:	b08b      	sub	sp, #44	@ 0x2c
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008638:	2414      	movs	r4, #20
 800863a:	193b      	adds	r3, r7, r4
 800863c:	0018      	movs	r0, r3
 800863e:	2314      	movs	r3, #20
 8008640:	001a      	movs	r2, r3
 8008642:	2100      	movs	r1, #0
 8008644:	f00e f9b6 	bl	80169b4 <memset>
  if(timHandle->Instance==TIM2)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	2380      	movs	r3, #128	@ 0x80
 800864e:	05db      	lsls	r3, r3, #23
 8008650:	429a      	cmp	r2, r3
 8008652:	d123      	bne.n	800869c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008654:	4b27      	ldr	r3, [pc, #156]	@ (80086f4 <HAL_TIM_MspPostInit+0xc4>)
 8008656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008658:	4b26      	ldr	r3, [pc, #152]	@ (80086f4 <HAL_TIM_MspPostInit+0xc4>)
 800865a:	2101      	movs	r1, #1
 800865c:	430a      	orrs	r2, r1
 800865e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008660:	4b24      	ldr	r3, [pc, #144]	@ (80086f4 <HAL_TIM_MspPostInit+0xc4>)
 8008662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008664:	2201      	movs	r2, #1
 8008666:	4013      	ands	r3, r2
 8008668:	613b      	str	r3, [r7, #16]
 800866a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800866c:	0021      	movs	r1, r4
 800866e:	187b      	adds	r3, r7, r1
 8008670:	220d      	movs	r2, #13
 8008672:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008674:	187b      	adds	r3, r7, r1
 8008676:	2202      	movs	r2, #2
 8008678:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800867a:	187b      	adds	r3, r7, r1
 800867c:	2200      	movs	r2, #0
 800867e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008680:	187b      	adds	r3, r7, r1
 8008682:	2200      	movs	r2, #0
 8008684:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8008686:	187b      	adds	r3, r7, r1
 8008688:	2202      	movs	r2, #2
 800868a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800868c:	187a      	adds	r2, r7, r1
 800868e:	23a0      	movs	r3, #160	@ 0xa0
 8008690:	05db      	lsls	r3, r3, #23
 8008692:	0011      	movs	r1, r2
 8008694:	0018      	movs	r0, r3
 8008696:	f001 fd19 	bl	800a0cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800869a:	e027      	b.n	80086ec <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a15      	ldr	r2, [pc, #84]	@ (80086f8 <HAL_TIM_MspPostInit+0xc8>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d122      	bne.n	80086ec <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80086a6:	4b13      	ldr	r3, [pc, #76]	@ (80086f4 <HAL_TIM_MspPostInit+0xc4>)
 80086a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086aa:	4b12      	ldr	r3, [pc, #72]	@ (80086f4 <HAL_TIM_MspPostInit+0xc4>)
 80086ac:	2104      	movs	r1, #4
 80086ae:	430a      	orrs	r2, r1
 80086b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80086b2:	4b10      	ldr	r3, [pc, #64]	@ (80086f4 <HAL_TIM_MspPostInit+0xc4>)
 80086b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086b6:	2204      	movs	r2, #4
 80086b8:	4013      	ands	r3, r2
 80086ba:	60fb      	str	r3, [r7, #12]
 80086bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 80086be:	2114      	movs	r1, #20
 80086c0:	187b      	adds	r3, r7, r1
 80086c2:	22e0      	movs	r2, #224	@ 0xe0
 80086c4:	0052      	lsls	r2, r2, #1
 80086c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086c8:	187b      	adds	r3, r7, r1
 80086ca:	2202      	movs	r2, #2
 80086cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ce:	187b      	adds	r3, r7, r1
 80086d0:	2200      	movs	r2, #0
 80086d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086d4:	187b      	adds	r3, r7, r1
 80086d6:	2200      	movs	r2, #0
 80086d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80086da:	187b      	adds	r3, r7, r1
 80086dc:	2202      	movs	r2, #2
 80086de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80086e0:	187b      	adds	r3, r7, r1
 80086e2:	4a06      	ldr	r2, [pc, #24]	@ (80086fc <HAL_TIM_MspPostInit+0xcc>)
 80086e4:	0019      	movs	r1, r3
 80086e6:	0010      	movs	r0, r2
 80086e8:	f001 fcf0 	bl	800a0cc <HAL_GPIO_Init>
}
 80086ec:	46c0      	nop			@ (mov r8, r8)
 80086ee:	46bd      	mov	sp, r7
 80086f0:	b00b      	add	sp, #44	@ 0x2c
 80086f2:	bd90      	pop	{r4, r7, pc}
 80086f4:	40021000 	.word	0x40021000
 80086f8:	40000400 	.word	0x40000400
 80086fc:	50000800 	.word	0x50000800

08008700 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008704:	4b16      	ldr	r3, [pc, #88]	@ (8008760 <MX_USART1_UART_Init+0x60>)
 8008706:	4a17      	ldr	r2, [pc, #92]	@ (8008764 <MX_USART1_UART_Init+0x64>)
 8008708:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800870a:	4b15      	ldr	r3, [pc, #84]	@ (8008760 <MX_USART1_UART_Init+0x60>)
 800870c:	22e1      	movs	r2, #225	@ 0xe1
 800870e:	0252      	lsls	r2, r2, #9
 8008710:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008712:	4b13      	ldr	r3, [pc, #76]	@ (8008760 <MX_USART1_UART_Init+0x60>)
 8008714:	2200      	movs	r2, #0
 8008716:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008718:	4b11      	ldr	r3, [pc, #68]	@ (8008760 <MX_USART1_UART_Init+0x60>)
 800871a:	2200      	movs	r2, #0
 800871c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800871e:	4b10      	ldr	r3, [pc, #64]	@ (8008760 <MX_USART1_UART_Init+0x60>)
 8008720:	2200      	movs	r2, #0
 8008722:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008724:	4b0e      	ldr	r3, [pc, #56]	@ (8008760 <MX_USART1_UART_Init+0x60>)
 8008726:	220c      	movs	r2, #12
 8008728:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800872a:	4b0d      	ldr	r3, [pc, #52]	@ (8008760 <MX_USART1_UART_Init+0x60>)
 800872c:	2200      	movs	r2, #0
 800872e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008730:	4b0b      	ldr	r3, [pc, #44]	@ (8008760 <MX_USART1_UART_Init+0x60>)
 8008732:	2200      	movs	r2, #0
 8008734:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008736:	4b0a      	ldr	r3, [pc, #40]	@ (8008760 <MX_USART1_UART_Init+0x60>)
 8008738:	2200      	movs	r2, #0
 800873a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800873c:	4b08      	ldr	r3, [pc, #32]	@ (8008760 <MX_USART1_UART_Init+0x60>)
 800873e:	2208      	movs	r2, #8
 8008740:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8008742:	4b07      	ldr	r3, [pc, #28]	@ (8008760 <MX_USART1_UART_Init+0x60>)
 8008744:	2280      	movs	r2, #128	@ 0x80
 8008746:	0212      	lsls	r2, r2, #8
 8008748:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800874a:	4b05      	ldr	r3, [pc, #20]	@ (8008760 <MX_USART1_UART_Init+0x60>)
 800874c:	0018      	movs	r0, r3
 800874e:	f007 fbd9 	bl	800ff04 <HAL_UART_Init>
 8008752:	1e03      	subs	r3, r0, #0
 8008754:	d001      	beq.n	800875a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8008756:	f7fd f9dd 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800875a:	46c0      	nop			@ (mov r8, r8)
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	20002698 	.word	0x20002698
 8008764:	40013800 	.word	0x40013800

08008768 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800876c:	4b14      	ldr	r3, [pc, #80]	@ (80087c0 <MX_USART4_UART_Init+0x58>)
 800876e:	4a15      	ldr	r2, [pc, #84]	@ (80087c4 <MX_USART4_UART_Init+0x5c>)
 8008770:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8008772:	4b13      	ldr	r3, [pc, #76]	@ (80087c0 <MX_USART4_UART_Init+0x58>)
 8008774:	22e1      	movs	r2, #225	@ 0xe1
 8008776:	0252      	lsls	r2, r2, #9
 8008778:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800877a:	4b11      	ldr	r3, [pc, #68]	@ (80087c0 <MX_USART4_UART_Init+0x58>)
 800877c:	2200      	movs	r2, #0
 800877e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8008780:	4b0f      	ldr	r3, [pc, #60]	@ (80087c0 <MX_USART4_UART_Init+0x58>)
 8008782:	2200      	movs	r2, #0
 8008784:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8008786:	4b0e      	ldr	r3, [pc, #56]	@ (80087c0 <MX_USART4_UART_Init+0x58>)
 8008788:	2200      	movs	r2, #0
 800878a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800878c:	4b0c      	ldr	r3, [pc, #48]	@ (80087c0 <MX_USART4_UART_Init+0x58>)
 800878e:	220c      	movs	r2, #12
 8008790:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008792:	4b0b      	ldr	r3, [pc, #44]	@ (80087c0 <MX_USART4_UART_Init+0x58>)
 8008794:	2200      	movs	r2, #0
 8008796:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8008798:	4b09      	ldr	r3, [pc, #36]	@ (80087c0 <MX_USART4_UART_Init+0x58>)
 800879a:	2200      	movs	r2, #0
 800879c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800879e:	4b08      	ldr	r3, [pc, #32]	@ (80087c0 <MX_USART4_UART_Init+0x58>)
 80087a0:	2200      	movs	r2, #0
 80087a2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80087a4:	4b06      	ldr	r3, [pc, #24]	@ (80087c0 <MX_USART4_UART_Init+0x58>)
 80087a6:	2200      	movs	r2, #0
 80087a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80087aa:	4b05      	ldr	r3, [pc, #20]	@ (80087c0 <MX_USART4_UART_Init+0x58>)
 80087ac:	0018      	movs	r0, r3
 80087ae:	f007 fba9 	bl	800ff04 <HAL_UART_Init>
 80087b2:	1e03      	subs	r3, r0, #0
 80087b4:	d001      	beq.n	80087ba <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 80087b6:	f7fd f9ad 	bl	8005b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80087ba:	46c0      	nop			@ (mov r8, r8)
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	20002750 	.word	0x20002750
 80087c4:	40004c00 	.word	0x40004c00

080087c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80087c8:	b590      	push	{r4, r7, lr}
 80087ca:	b08b      	sub	sp, #44	@ 0x2c
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087d0:	2414      	movs	r4, #20
 80087d2:	193b      	adds	r3, r7, r4
 80087d4:	0018      	movs	r0, r3
 80087d6:	2314      	movs	r3, #20
 80087d8:	001a      	movs	r2, r3
 80087da:	2100      	movs	r1, #0
 80087dc:	f00e f8ea 	bl	80169b4 <memset>
  if(uartHandle->Instance==USART1)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a6f      	ldr	r2, [pc, #444]	@ (80089a4 <HAL_UART_MspInit+0x1dc>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d12b      	bne.n	8008842 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80087ea:	4b6f      	ldr	r3, [pc, #444]	@ (80089a8 <HAL_UART_MspInit+0x1e0>)
 80087ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087ee:	4b6e      	ldr	r3, [pc, #440]	@ (80089a8 <HAL_UART_MspInit+0x1e0>)
 80087f0:	2180      	movs	r1, #128	@ 0x80
 80087f2:	01c9      	lsls	r1, r1, #7
 80087f4:	430a      	orrs	r2, r1
 80087f6:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087f8:	4b6b      	ldr	r3, [pc, #428]	@ (80089a8 <HAL_UART_MspInit+0x1e0>)
 80087fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087fc:	4b6a      	ldr	r3, [pc, #424]	@ (80089a8 <HAL_UART_MspInit+0x1e0>)
 80087fe:	2101      	movs	r1, #1
 8008800:	430a      	orrs	r2, r1
 8008802:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008804:	4b68      	ldr	r3, [pc, #416]	@ (80089a8 <HAL_UART_MspInit+0x1e0>)
 8008806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008808:	2201      	movs	r2, #1
 800880a:	4013      	ands	r3, r2
 800880c:	613b      	str	r3, [r7, #16]
 800880e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008810:	193b      	adds	r3, r7, r4
 8008812:	22c0      	movs	r2, #192	@ 0xc0
 8008814:	00d2      	lsls	r2, r2, #3
 8008816:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008818:	0021      	movs	r1, r4
 800881a:	187b      	adds	r3, r7, r1
 800881c:	2202      	movs	r2, #2
 800881e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008820:	187b      	adds	r3, r7, r1
 8008822:	2200      	movs	r2, #0
 8008824:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008826:	187b      	adds	r3, r7, r1
 8008828:	2203      	movs	r2, #3
 800882a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800882c:	187b      	adds	r3, r7, r1
 800882e:	2204      	movs	r2, #4
 8008830:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008832:	187a      	adds	r2, r7, r1
 8008834:	23a0      	movs	r3, #160	@ 0xa0
 8008836:	05db      	lsls	r3, r3, #23
 8008838:	0011      	movs	r1, r2
 800883a:	0018      	movs	r0, r3
 800883c:	f001 fc46 	bl	800a0cc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8008840:	e0ac      	b.n	800899c <HAL_UART_MspInit+0x1d4>
  else if(uartHandle->Instance==USART4)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a59      	ldr	r2, [pc, #356]	@ (80089ac <HAL_UART_MspInit+0x1e4>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d000      	beq.n	800884e <HAL_UART_MspInit+0x86>
 800884c:	e0a6      	b.n	800899c <HAL_UART_MspInit+0x1d4>
    __HAL_RCC_USART4_CLK_ENABLE();
 800884e:	4b56      	ldr	r3, [pc, #344]	@ (80089a8 <HAL_UART_MspInit+0x1e0>)
 8008850:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008852:	4b55      	ldr	r3, [pc, #340]	@ (80089a8 <HAL_UART_MspInit+0x1e0>)
 8008854:	2180      	movs	r1, #128	@ 0x80
 8008856:	0309      	lsls	r1, r1, #12
 8008858:	430a      	orrs	r2, r1
 800885a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800885c:	4b52      	ldr	r3, [pc, #328]	@ (80089a8 <HAL_UART_MspInit+0x1e0>)
 800885e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008860:	4b51      	ldr	r3, [pc, #324]	@ (80089a8 <HAL_UART_MspInit+0x1e0>)
 8008862:	2101      	movs	r1, #1
 8008864:	430a      	orrs	r2, r1
 8008866:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008868:	4b4f      	ldr	r3, [pc, #316]	@ (80089a8 <HAL_UART_MspInit+0x1e0>)
 800886a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800886c:	2201      	movs	r2, #1
 800886e:	4013      	ands	r3, r2
 8008870:	60fb      	str	r3, [r7, #12]
 8008872:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008874:	4b4c      	ldr	r3, [pc, #304]	@ (80089a8 <HAL_UART_MspInit+0x1e0>)
 8008876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008878:	4b4b      	ldr	r3, [pc, #300]	@ (80089a8 <HAL_UART_MspInit+0x1e0>)
 800887a:	2104      	movs	r1, #4
 800887c:	430a      	orrs	r2, r1
 800887e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008880:	4b49      	ldr	r3, [pc, #292]	@ (80089a8 <HAL_UART_MspInit+0x1e0>)
 8008882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008884:	2204      	movs	r2, #4
 8008886:	4013      	ands	r3, r2
 8008888:	60bb      	str	r3, [r7, #8]
 800888a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800888c:	2414      	movs	r4, #20
 800888e:	193b      	adds	r3, r7, r4
 8008890:	2202      	movs	r2, #2
 8008892:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008894:	193b      	adds	r3, r7, r4
 8008896:	2202      	movs	r2, #2
 8008898:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800889a:	193b      	adds	r3, r7, r4
 800889c:	2200      	movs	r2, #0
 800889e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088a0:	193b      	adds	r3, r7, r4
 80088a2:	2203      	movs	r2, #3
 80088a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80088a6:	193b      	adds	r3, r7, r4
 80088a8:	2206      	movs	r2, #6
 80088aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088ac:	193a      	adds	r2, r7, r4
 80088ae:	23a0      	movs	r3, #160	@ 0xa0
 80088b0:	05db      	lsls	r3, r3, #23
 80088b2:	0011      	movs	r1, r2
 80088b4:	0018      	movs	r0, r3
 80088b6:	f001 fc09 	bl	800a0cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80088ba:	0021      	movs	r1, r4
 80088bc:	187b      	adds	r3, r7, r1
 80088be:	2280      	movs	r2, #128	@ 0x80
 80088c0:	00d2      	lsls	r2, r2, #3
 80088c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088c4:	187b      	adds	r3, r7, r1
 80088c6:	2202      	movs	r2, #2
 80088c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088ca:	187b      	adds	r3, r7, r1
 80088cc:	2200      	movs	r2, #0
 80088ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088d0:	187b      	adds	r3, r7, r1
 80088d2:	2203      	movs	r2, #3
 80088d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80088d6:	187b      	adds	r3, r7, r1
 80088d8:	2206      	movs	r2, #6
 80088da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80088dc:	187b      	adds	r3, r7, r1
 80088de:	4a34      	ldr	r2, [pc, #208]	@ (80089b0 <HAL_UART_MspInit+0x1e8>)
 80088e0:	0019      	movs	r1, r3
 80088e2:	0010      	movs	r0, r2
 80088e4:	f001 fbf2 	bl	800a0cc <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 80088e8:	4b32      	ldr	r3, [pc, #200]	@ (80089b4 <HAL_UART_MspInit+0x1ec>)
 80088ea:	4a33      	ldr	r2, [pc, #204]	@ (80089b8 <HAL_UART_MspInit+0x1f0>)
 80088ec:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 80088ee:	4b31      	ldr	r3, [pc, #196]	@ (80089b4 <HAL_UART_MspInit+0x1ec>)
 80088f0:	220c      	movs	r2, #12
 80088f2:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80088f4:	4b2f      	ldr	r3, [pc, #188]	@ (80089b4 <HAL_UART_MspInit+0x1ec>)
 80088f6:	2200      	movs	r2, #0
 80088f8:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80088fa:	4b2e      	ldr	r3, [pc, #184]	@ (80089b4 <HAL_UART_MspInit+0x1ec>)
 80088fc:	2200      	movs	r2, #0
 80088fe:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008900:	4b2c      	ldr	r3, [pc, #176]	@ (80089b4 <HAL_UART_MspInit+0x1ec>)
 8008902:	2280      	movs	r2, #128	@ 0x80
 8008904:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008906:	4b2b      	ldr	r3, [pc, #172]	@ (80089b4 <HAL_UART_MspInit+0x1ec>)
 8008908:	2200      	movs	r2, #0
 800890a:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800890c:	4b29      	ldr	r3, [pc, #164]	@ (80089b4 <HAL_UART_MspInit+0x1ec>)
 800890e:	2200      	movs	r2, #0
 8008910:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8008912:	4b28      	ldr	r3, [pc, #160]	@ (80089b4 <HAL_UART_MspInit+0x1ec>)
 8008914:	2220      	movs	r2, #32
 8008916:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008918:	4b26      	ldr	r3, [pc, #152]	@ (80089b4 <HAL_UART_MspInit+0x1ec>)
 800891a:	2200      	movs	r2, #0
 800891c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800891e:	4b25      	ldr	r3, [pc, #148]	@ (80089b4 <HAL_UART_MspInit+0x1ec>)
 8008920:	0018      	movs	r0, r3
 8008922:	f001 f927 	bl	8009b74 <HAL_DMA_Init>
 8008926:	1e03      	subs	r3, r0, #0
 8008928:	d001      	beq.n	800892e <HAL_UART_MspInit+0x166>
      Error_Handler();
 800892a:	f7fd f8f3 	bl	8005b14 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a20      	ldr	r2, [pc, #128]	@ (80089b4 <HAL_UART_MspInit+0x1ec>)
 8008932:	675a      	str	r2, [r3, #116]	@ 0x74
 8008934:	4b1f      	ldr	r3, [pc, #124]	@ (80089b4 <HAL_UART_MspInit+0x1ec>)
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800893a:	4b20      	ldr	r3, [pc, #128]	@ (80089bc <HAL_UART_MspInit+0x1f4>)
 800893c:	4a20      	ldr	r2, [pc, #128]	@ (80089c0 <HAL_UART_MspInit+0x1f8>)
 800893e:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8008940:	4b1e      	ldr	r3, [pc, #120]	@ (80089bc <HAL_UART_MspInit+0x1f4>)
 8008942:	220c      	movs	r2, #12
 8008944:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008946:	4b1d      	ldr	r3, [pc, #116]	@ (80089bc <HAL_UART_MspInit+0x1f4>)
 8008948:	2210      	movs	r2, #16
 800894a:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800894c:	4b1b      	ldr	r3, [pc, #108]	@ (80089bc <HAL_UART_MspInit+0x1f4>)
 800894e:	2200      	movs	r2, #0
 8008950:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008952:	4b1a      	ldr	r3, [pc, #104]	@ (80089bc <HAL_UART_MspInit+0x1f4>)
 8008954:	2280      	movs	r2, #128	@ 0x80
 8008956:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008958:	4b18      	ldr	r3, [pc, #96]	@ (80089bc <HAL_UART_MspInit+0x1f4>)
 800895a:	2200      	movs	r2, #0
 800895c:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800895e:	4b17      	ldr	r3, [pc, #92]	@ (80089bc <HAL_UART_MspInit+0x1f4>)
 8008960:	2200      	movs	r2, #0
 8008962:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8008964:	4b15      	ldr	r3, [pc, #84]	@ (80089bc <HAL_UART_MspInit+0x1f4>)
 8008966:	2200      	movs	r2, #0
 8008968:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800896a:	4b14      	ldr	r3, [pc, #80]	@ (80089bc <HAL_UART_MspInit+0x1f4>)
 800896c:	2200      	movs	r2, #0
 800896e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8008970:	4b12      	ldr	r3, [pc, #72]	@ (80089bc <HAL_UART_MspInit+0x1f4>)
 8008972:	0018      	movs	r0, r3
 8008974:	f001 f8fe 	bl	8009b74 <HAL_DMA_Init>
 8008978:	1e03      	subs	r3, r0, #0
 800897a:	d001      	beq.n	8008980 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 800897c:	f7fd f8ca 	bl	8005b14 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a0e      	ldr	r2, [pc, #56]	@ (80089bc <HAL_UART_MspInit+0x1f4>)
 8008984:	671a      	str	r2, [r3, #112]	@ 0x70
 8008986:	4b0d      	ldr	r3, [pc, #52]	@ (80089bc <HAL_UART_MspInit+0x1f4>)
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800898c:	2200      	movs	r2, #0
 800898e:	2100      	movs	r1, #0
 8008990:	200e      	movs	r0, #14
 8008992:	f001 f8bd 	bl	8009b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8008996:	200e      	movs	r0, #14
 8008998:	f001 f8cf 	bl	8009b3a <HAL_NVIC_EnableIRQ>
}
 800899c:	46c0      	nop			@ (mov r8, r8)
 800899e:	46bd      	mov	sp, r7
 80089a0:	b00b      	add	sp, #44	@ 0x2c
 80089a2:	bd90      	pop	{r4, r7, pc}
 80089a4:	40013800 	.word	0x40013800
 80089a8:	40021000 	.word	0x40021000
 80089ac:	40004c00 	.word	0x40004c00
 80089b0:	50000800 	.word	0x50000800
 80089b4:	20002808 	.word	0x20002808
 80089b8:	4002006c 	.word	0x4002006c
 80089bc:	20002850 	.word	0x20002850
 80089c0:	40020080 	.word	0x40020080

080089c4 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 1024

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b086      	sub	sp, #24
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 80089cc:	f000 fc48 	bl	8009260 <HAL_GetTick>
 80089d0:	0003      	movs	r3, r0
 80089d2:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 80089d4:	4b1c      	ldr	r3, [pc, #112]	@ (8008a48 <TimestampIsReached+0x84>)
 80089d6:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 80089d8:	697a      	ldr	r2, [r7, #20]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d307      	bcc.n	80089f0 <TimestampIsReached+0x2c>
 80089e0:	697a      	ldr	r2, [r7, #20]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d901      	bls.n	80089f0 <TimestampIsReached+0x2c>
 80089ec:	2201      	movs	r2, #1
 80089ee:	e000      	b.n	80089f2 <TimestampIsReached+0x2e>
 80089f0:	2200      	movs	r2, #0
 80089f2:	230f      	movs	r3, #15
 80089f4:	18fb      	adds	r3, r7, r3
 80089f6:	701a      	strb	r2, [r3, #0]
 80089f8:	781a      	ldrb	r2, [r3, #0]
 80089fa:	2101      	movs	r1, #1
 80089fc:	400a      	ands	r2, r1
 80089fe:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8008a00:	697a      	ldr	r2, [r7, #20]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d207      	bcs.n	8008a18 <TimestampIsReached+0x54>
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	693a      	ldr	r2, [r7, #16]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d201      	bcs.n	8008a18 <TimestampIsReached+0x54>
 8008a14:	2201      	movs	r2, #1
 8008a16:	e000      	b.n	8008a1a <TimestampIsReached+0x56>
 8008a18:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8008a1a:	200e      	movs	r0, #14
 8008a1c:	183b      	adds	r3, r7, r0
 8008a1e:	701a      	strb	r2, [r3, #0]
 8008a20:	781a      	ldrb	r2, [r3, #0]
 8008a22:	2101      	movs	r1, #1
 8008a24:	400a      	ands	r2, r1
 8008a26:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8008a28:	230f      	movs	r3, #15
 8008a2a:	18fb      	adds	r3, r7, r3
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d103      	bne.n	8008a3a <TimestampIsReached+0x76>
 8008a32:	183b      	adds	r3, r7, r0
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d001      	beq.n	8008a3e <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e000      	b.n	8008a40 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	0018      	movs	r0, r3
 8008a42:	46bd      	mov	sp, r7
 8008a44:	b006      	add	sp, #24
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	7fffffff 	.word	0x7fffffff

08008a4c <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8008a54:	f000 fc04 	bl	8009260 <HAL_GetTick>
 8008a58:	0002      	movs	r2, r0
 8008a5a:	4904      	ldr	r1, [pc, #16]	@ (8008a6c <AddTimestamp+0x20>)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	0018      	movs	r0, r3
 8008a60:	f00d ff04 	bl	801686c <siprintf>
}
 8008a64:	46c0      	nop			@ (mov r8, r8)
 8008a66:	46bd      	mov	sp, r7
 8008a68:	b002      	add	sp, #8
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	0801a024 	.word	0x0801a024

08008a70 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8008a70:	b40c      	push	{r2, r3}
 8008a72:	b5b0      	push	{r4, r5, r7, lr}
 8008a74:	4c2b      	ldr	r4, [pc, #172]	@ (8008b24 <CreateLine+0xb4>)
 8008a76:	44a5      	add	sp, r4
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	0002      	movs	r2, r0
 8008a7c:	6039      	str	r1, [r7, #0]
 8008a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8008b28 <CreateLine+0xb8>)
 8008a80:	2182      	movs	r1, #130	@ 0x82
 8008a82:	00c9      	lsls	r1, r1, #3
 8008a84:	185b      	adds	r3, r3, r1
 8008a86:	19db      	adds	r3, r3, r7
 8008a88:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8008a8a:	4b28      	ldr	r3, [pc, #160]	@ (8008b2c <CreateLine+0xbc>)
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	4a26      	ldr	r2, [pc, #152]	@ (8008b28 <CreateLine+0xb8>)
 8008a90:	1852      	adds	r2, r2, r1
 8008a92:	19d2      	adds	r2, r2, r7
 8008a94:	7812      	ldrb	r2, [r2, #0]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d83b      	bhi.n	8008b12 <CreateLine+0xa2>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8008a9a:	683a      	ldr	r2, [r7, #0]
 8008a9c:	4924      	ldr	r1, [pc, #144]	@ (8008b30 <CreateLine+0xc0>)
 8008a9e:	240c      	movs	r4, #12
 8008aa0:	193b      	adds	r3, r7, r4
 8008aa2:	0018      	movs	r0, r3
 8008aa4:	f00d fee2 	bl	801686c <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8008aa8:	4b20      	ldr	r3, [pc, #128]	@ (8008b2c <CreateLine+0xbc>)
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d909      	bls.n	8008ac4 <CreateLine+0x54>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8008ab0:	193b      	adds	r3, r7, r4
 8008ab2:	0018      	movs	r0, r3
 8008ab4:	f7f7 fb28 	bl	8000108 <strlen>
 8008ab8:	0002      	movs	r2, r0
 8008aba:	193b      	adds	r3, r7, r4
 8008abc:	189b      	adds	r3, r3, r2
 8008abe:	0018      	movs	r0, r3
 8008ac0:	f7ff ffc4 	bl	8008a4c <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8008ac4:	240c      	movs	r4, #12
 8008ac6:	193b      	adds	r3, r7, r4
 8008ac8:	0018      	movs	r0, r3
 8008aca:	f7f7 fb1d 	bl	8000108 <strlen>
 8008ace:	0003      	movs	r3, r0
 8008ad0:	4918      	ldr	r1, [pc, #96]	@ (8008b34 <CreateLine+0xc4>)
 8008ad2:	187a      	adds	r2, r7, r1
 8008ad4:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8008ad6:	4b18      	ldr	r3, [pc, #96]	@ (8008b38 <CreateLine+0xc8>)
 8008ad8:	2508      	movs	r5, #8
 8008ada:	195b      	adds	r3, r3, r5
 8008adc:	19db      	adds	r3, r3, r7
 8008ade:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 8008ae0:	193a      	adds	r2, r7, r4
 8008ae2:	187b      	adds	r3, r7, r1
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	18d0      	adds	r0, r2, r3
 8008ae8:	187b      	adds	r3, r7, r1
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2280      	movs	r2, #128	@ 0x80
 8008aee:	00d2      	lsls	r2, r2, #3
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	0019      	movs	r1, r3
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	2283      	movs	r2, #131	@ 0x83
 8008af8:	00d2      	lsls	r2, r2, #3
 8008afa:	1952      	adds	r2, r2, r5
 8008afc:	19d2      	adds	r2, r2, r7
 8008afe:	6812      	ldr	r2, [r2, #0]
 8008b00:	f00d ff4c 	bl	801699c <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 8008b04:	193a      	adds	r2, r7, r4
 8008b06:	4b0d      	ldr	r3, [pc, #52]	@ (8008b3c <CreateLine+0xcc>)
 8008b08:	0011      	movs	r1, r2
 8008b0a:	0018      	movs	r0, r3
 8008b0c:	f00d fe9e 	bl	801684c <iprintf>
 8008b10:	e000      	b.n	8008b14 <CreateLine+0xa4>
    return;
 8008b12:	46c0      	nop			@ (mov r8, r8)
}
 8008b14:	46bd      	mov	sp, r7
 8008b16:	2382      	movs	r3, #130	@ 0x82
 8008b18:	00db      	lsls	r3, r3, #3
 8008b1a:	449d      	add	sp, r3
 8008b1c:	bcb0      	pop	{r4, r5, r7}
 8008b1e:	bc08      	pop	{r3}
 8008b20:	b002      	add	sp, #8
 8008b22:	4718      	bx	r3
 8008b24:	fffffbf0 	.word	0xfffffbf0
 8008b28:	fffffbf7 	.word	0xfffffbf7
 8008b2c:	20000140 	.word	0x20000140
 8008b30:	0801a030 	.word	0x0801a030
 8008b34:	0000040c 	.word	0x0000040c
 8008b38:	0000041c 	.word	0x0000041c
 8008b3c:	0801a034 	.word	0x0801a034

08008b40 <_write>:

int _write(int fd, const void *buf, size_t count) {
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	68b9      	ldr	r1, [r7, #8]
 8008b52:	4804      	ldr	r0, [pc, #16]	@ (8008b64 <_write+0x24>)
 8008b54:	2364      	movs	r3, #100	@ 0x64
 8008b56:	f007 fa3b 	bl	800ffd0 <HAL_UART_Transmit>
  return count;
 8008b5a:	687b      	ldr	r3, [r7, #4]
}
 8008b5c:	0018      	movs	r0, r3
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	b004      	add	sp, #16
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	20002698 	.word	0x20002698

08008b68 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b082      	sub	sp, #8
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	0002      	movs	r2, r0
 8008b70:	1dfb      	adds	r3, r7, #7
 8008b72:	701a      	strb	r2, [r3, #0]
 8008b74:	4b03      	ldr	r3, [pc, #12]	@ (8008b84 <SetVerboseLevel+0x1c>)
 8008b76:	1dfa      	adds	r2, r7, #7
 8008b78:	7812      	ldrb	r2, [r2, #0]
 8008b7a:	701a      	strb	r2, [r3, #0]
 8008b7c:	46c0      	nop			@ (mov r8, r8)
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	b002      	add	sp, #8
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	20000140 	.word	0x20000140

08008b88 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008b8c:	f000 fb68 	bl	8009260 <HAL_GetTick>
 8008b90:	0003      	movs	r3, r0
}
 8008b92:	0018      	movs	r0, r3
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 8008b9e:	4a0f      	ldr	r2, [pc, #60]	@ (8008bdc <BinaryReleaseInfo+0x44>)
 8008ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8008be0 <BinaryReleaseInfo+0x48>)
 8008ba2:	0019      	movs	r1, r3
 8008ba4:	2002      	movs	r0, #2
 8008ba6:	f7ff ff63 	bl	8008a70 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8008baa:	480e      	ldr	r0, [pc, #56]	@ (8008be4 <BinaryReleaseInfo+0x4c>)
 8008bac:	4a0e      	ldr	r2, [pc, #56]	@ (8008be8 <BinaryReleaseInfo+0x50>)
 8008bae:	490c      	ldr	r1, [pc, #48]	@ (8008be0 <BinaryReleaseInfo+0x48>)
 8008bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8008bec <BinaryReleaseInfo+0x54>)
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	0003      	movs	r3, r0
 8008bb6:	2002      	movs	r0, #2
 8008bb8:	f7ff ff5a 	bl	8008a70 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w33a");
 8008bbc:	4a0c      	ldr	r2, [pc, #48]	@ (8008bf0 <BinaryReleaseInfo+0x58>)
 8008bbe:	4b08      	ldr	r3, [pc, #32]	@ (8008be0 <BinaryReleaseInfo+0x48>)
 8008bc0:	0019      	movs	r1, r3
 8008bc2:	2002      	movs	r0, #2
 8008bc4:	f7ff ff54 	bl	8008a70 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 8008bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8008bf4 <BinaryReleaseInfo+0x5c>)
 8008bca:	4a0b      	ldr	r2, [pc, #44]	@ (8008bf8 <BinaryReleaseInfo+0x60>)
 8008bcc:	4904      	ldr	r1, [pc, #16]	@ (8008be0 <BinaryReleaseInfo+0x48>)
 8008bce:	2002      	movs	r0, #2
 8008bd0:	f7ff ff4e 	bl	8008a70 <CreateLine>
}
 8008bd4:	46c0      	nop			@ (mov r8, r8)
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	46c0      	nop			@ (mov r8, r8)
 8008bdc:	0801a03c 	.word	0x0801a03c
 8008be0:	0801a068 	.word	0x0801a068
 8008be4:	0801a06c 	.word	0x0801a06c
 8008be8:	0801a078 	.word	0x0801a078
 8008bec:	0801a08c 	.word	0x0801a08c
 8008bf0:	0801a098 	.word	0x0801a098
 8008bf4:	0801a0a4 	.word	0x0801a0a4
 8008bf8:	0801a0ac 	.word	0x0801a0ac

08008bfc <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static void ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008bfc:	b590      	push	{r4, r7, lr}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6039      	str	r1, [r7, #0]
 8008c04:	0011      	movs	r1, r2
 8008c06:	1dfb      	adds	r3, r7, #7
 8008c08:	1c02      	adds	r2, r0, #0
 8008c0a:	701a      	strb	r2, [r3, #0]
 8008c0c:	1dbb      	adds	r3, r7, #6
 8008c0e:	1c0a      	adds	r2, r1, #0
 8008c10:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8008c12:	4b08      	ldr	r3, [pc, #32]	@ (8008c34 <ReadRegister+0x38>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d008      	beq.n	8008c2c <ReadRegister+0x30>
		ReadFunction(address, buffer, nrBytes);
 8008c1a:	4b06      	ldr	r3, [pc, #24]	@ (8008c34 <ReadRegister+0x38>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	1dba      	adds	r2, r7, #6
 8008c20:	7814      	ldrb	r4, [r2, #0]
 8008c22:	6839      	ldr	r1, [r7, #0]
 8008c24:	1dfa      	adds	r2, r7, #7
 8008c26:	7810      	ldrb	r0, [r2, #0]
 8008c28:	0022      	movs	r2, r4
 8008c2a:	4798      	blx	r3
	}
}
 8008c2c:	46c0      	nop			@ (mov r8, r8)
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	b003      	add	sp, #12
 8008c32:	bd90      	pop	{r4, r7, pc}
 8008c34:	20002898 	.word	0x20002898

08008c38 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008c38:	b590      	push	{r4, r7, lr}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6039      	str	r1, [r7, #0]
 8008c40:	0011      	movs	r1, r2
 8008c42:	1dfb      	adds	r3, r7, #7
 8008c44:	1c02      	adds	r2, r0, #0
 8008c46:	701a      	strb	r2, [r3, #0]
 8008c48:	1dbb      	adds	r3, r7, #6
 8008c4a:	1c0a      	adds	r2, r1, #0
 8008c4c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8008c4e:	4b08      	ldr	r3, [pc, #32]	@ (8008c70 <WriteRegister+0x38>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d008      	beq.n	8008c68 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8008c56:	4b06      	ldr	r3, [pc, #24]	@ (8008c70 <WriteRegister+0x38>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	1dba      	adds	r2, r7, #6
 8008c5c:	7814      	ldrb	r4, [r2, #0]
 8008c5e:	6839      	ldr	r1, [r7, #0]
 8008c60:	1dfa      	adds	r2, r7, #7
 8008c62:	7810      	ldrb	r0, [r2, #0]
 8008c64:	0022      	movs	r2, r4
 8008c66:	4798      	blx	r3
  }
}
 8008c68:	46c0      	nop			@ (mov r8, r8)
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	b003      	add	sp, #12
 8008c6e:	bd90      	pop	{r4, r7, pc}
 8008c70:	2000289c 	.word	0x2000289c

08008c74 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	000a      	movs	r2, r1
 8008c7e:	1cfb      	adds	r3, r7, #3
 8008c80:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 8008c82:	230f      	movs	r3, #15
 8008c84:	18fb      	adds	r3, r7, r3
 8008c86:	22ff      	movs	r2, #255	@ 0xff
 8008c88:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8008c8a:	230e      	movs	r3, #14
 8008c8c:	18fb      	adds	r3, r7, r3
 8008c8e:	2200      	movs	r2, #0
 8008c90:	701a      	strb	r2, [r3, #0]
 8008c92:	e037      	b.n	8008d04 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8008c94:	230e      	movs	r3, #14
 8008c96:	18fb      	adds	r3, r7, r3
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	18d3      	adds	r3, r2, r3
 8008c9e:	7819      	ldrb	r1, [r3, #0]
 8008ca0:	220f      	movs	r2, #15
 8008ca2:	18bb      	adds	r3, r7, r2
 8008ca4:	18ba      	adds	r2, r7, r2
 8008ca6:	7812      	ldrb	r2, [r2, #0]
 8008ca8:	404a      	eors	r2, r1
 8008caa:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8008cac:	230d      	movs	r3, #13
 8008cae:	18fb      	adds	r3, r7, r3
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	701a      	strb	r2, [r3, #0]
 8008cb4:	e01b      	b.n	8008cee <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8008cb6:	210f      	movs	r1, #15
 8008cb8:	187b      	adds	r3, r7, r1
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	b25b      	sxtb	r3, r3
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	da09      	bge.n	8008cd6 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8008cc2:	187b      	adds	r3, r7, r1
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	005b      	lsls	r3, r3, #1
 8008cc8:	b25b      	sxtb	r3, r3
 8008cca:	2231      	movs	r2, #49	@ 0x31
 8008ccc:	4053      	eors	r3, r2
 8008cce:	b25a      	sxtb	r2, r3
 8008cd0:	187b      	adds	r3, r7, r1
 8008cd2:	701a      	strb	r2, [r3, #0]
 8008cd4:	e005      	b.n	8008ce2 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8008cd6:	230f      	movs	r3, #15
 8008cd8:	18fa      	adds	r2, r7, r3
 8008cda:	18fb      	adds	r3, r7, r3
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	18db      	adds	r3, r3, r3
 8008ce0:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8008ce2:	210d      	movs	r1, #13
 8008ce4:	187b      	adds	r3, r7, r1
 8008ce6:	781a      	ldrb	r2, [r3, #0]
 8008ce8:	187b      	adds	r3, r7, r1
 8008cea:	3201      	adds	r2, #1
 8008cec:	701a      	strb	r2, [r3, #0]
 8008cee:	230d      	movs	r3, #13
 8008cf0:	18fb      	adds	r3, r7, r3
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	2b07      	cmp	r3, #7
 8008cf6:	d9de      	bls.n	8008cb6 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8008cf8:	210e      	movs	r1, #14
 8008cfa:	187b      	adds	r3, r7, r1
 8008cfc:	781a      	ldrb	r2, [r3, #0]
 8008cfe:	187b      	adds	r3, r7, r1
 8008d00:	3201      	adds	r2, #1
 8008d02:	701a      	strb	r2, [r3, #0]
 8008d04:	230e      	movs	r3, #14
 8008d06:	18fa      	adds	r2, r7, r3
 8008d08:	1cfb      	adds	r3, r7, #3
 8008d0a:	7812      	ldrb	r2, [r2, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d3c0      	bcc.n	8008c94 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8008d12:	230f      	movs	r3, #15
 8008d14:	18fb      	adds	r3, r7, r3
 8008d16:	781b      	ldrb	r3, [r3, #0]
}
 8008d18:	0018      	movs	r0, r3
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	b004      	add	sp, #16
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8008d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8008d54 <HIDS_Init+0x34>)
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8008d30:	4b09      	ldr	r3, [pc, #36]	@ (8008d58 <HIDS_Init+0x38>)
 8008d32:	683a      	ldr	r2, [r7, #0]
 8008d34:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8008d36:	4b09      	ldr	r3, [pc, #36]	@ (8008d5c <HIDS_Init+0x3c>)
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	0018      	movs	r0, r3
 8008d3c:	f000 f8d0 	bl	8008ee0 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8008d40:	4b07      	ldr	r3, [pc, #28]	@ (8008d60 <HIDS_Init+0x40>)
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	0018      	movs	r0, r3
 8008d46:	f000 f82b 	bl	8008da0 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8008d4a:	46c0      	nop			@ (mov r8, r8)
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	b002      	add	sp, #8
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	46c0      	nop			@ (mov r8, r8)
 8008d54:	20002898 	.word	0x20002898
 8008d58:	2000289c 	.word	0x2000289c
 8008d5c:	20000142 	.word	0x20000142
 8008d60:	20000141 	.word	0x20000141

08008d64 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8008d64:	b580      	push	{r7, lr}
 8008d66:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 8008d68:	f7ff ff0e 	bl	8008b88 <GetCurrentHalTicks>
 8008d6c:	0002      	movs	r2, r0
 8008d6e:	4b08      	ldr	r3, [pc, #32]	@ (8008d90 <HIDS_StartMeasurement+0x2c>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	18d2      	adds	r2, r2, r3
 8008d74:	4b07      	ldr	r3, [pc, #28]	@ (8008d94 <HIDS_StartMeasurement+0x30>)
 8008d76:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8008d78:	4b07      	ldr	r3, [pc, #28]	@ (8008d98 <HIDS_StartMeasurement+0x34>)
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	0019      	movs	r1, r3
 8008d7e:	2044      	movs	r0, #68	@ 0x44
 8008d80:	f7ff ff5a 	bl	8008c38 <WriteRegister>
  MeasurementDone = false;
 8008d84:	4b05      	ldr	r3, [pc, #20]	@ (8008d9c <HIDS_StartMeasurement+0x38>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	701a      	strb	r2, [r3, #0]
}
 8008d8a:	46c0      	nop			@ (mov r8, r8)
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	20000148 	.word	0x20000148
 8008d94:	20000144 	.word	0x20000144
 8008d98:	20000142 	.word	0x20000142
 8008d9c:	200028ae 	.word	0x200028ae

08008da0 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	0002      	movs	r2, r0
 8008da8:	1dfb      	adds	r3, r7, #7
 8008daa:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8008dac:	4b03      	ldr	r3, [pc, #12]	@ (8008dbc <HIDS_SetHeaterMode+0x1c>)
 8008dae:	1dfa      	adds	r2, r7, #7
 8008db0:	7812      	ldrb	r2, [r2, #0]
 8008db2:	701a      	strb	r2, [r3, #0]
}
 8008db4:	46c0      	nop			@ (mov r8, r8)
 8008db6:	46bd      	mov	sp, r7
 8008db8:	b002      	add	sp, #8
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	20000141 	.word	0x20000141

08008dc0 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8008dc0:	b590      	push	{r4, r7, lr}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	781a      	ldrb	r2, [r3, #0]
 8008dcc:	210c      	movs	r1, #12
 8008dce:	187b      	adds	r3, r7, r1
 8008dd0:	701a      	strb	r2, [r3, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	785a      	ldrb	r2, [r3, #1]
 8008dd6:	187b      	adds	r3, r7, r1
 8008dd8:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8008dda:	240f      	movs	r4, #15
 8008ddc:	193b      	adds	r3, r7, r4
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	7892      	ldrb	r2, [r2, #2]
 8008de2:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8008de4:	187b      	adds	r3, r7, r1
 8008de6:	2102      	movs	r1, #2
 8008de8:	0018      	movs	r0, r3
 8008dea:	f7ff ff43 	bl	8008c74 <CalculateCRC>
 8008dee:	0003      	movs	r3, r0
 8008df0:	001a      	movs	r2, r3
 8008df2:	193b      	adds	r3, r7, r4
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d007      	beq.n	8008e0a <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8008dfa:	4a17      	ldr	r2, [pc, #92]	@ (8008e58 <CheckCRC+0x98>)
 8008dfc:	4b17      	ldr	r3, [pc, #92]	@ (8008e5c <CheckCRC+0x9c>)
 8008dfe:	0019      	movs	r1, r3
 8008e00:	2001      	movs	r0, #1
 8008e02:	f7ff fe35 	bl	8008a70 <CreateLine>
		return false;
 8008e06:	2300      	movs	r3, #0
 8008e08:	e021      	b.n	8008e4e <CheckCRC+0x8e>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	78da      	ldrb	r2, [r3, #3]
 8008e0e:	2108      	movs	r1, #8
 8008e10:	187b      	adds	r3, r7, r1
 8008e12:	701a      	strb	r2, [r3, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	791a      	ldrb	r2, [r3, #4]
 8008e18:	187b      	adds	r3, r7, r1
 8008e1a:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8008e1c:	240e      	movs	r4, #14
 8008e1e:	193b      	adds	r3, r7, r4
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	7952      	ldrb	r2, [r2, #5]
 8008e24:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8008e26:	187b      	adds	r3, r7, r1
 8008e28:	2102      	movs	r1, #2
 8008e2a:	0018      	movs	r0, r3
 8008e2c:	f7ff ff22 	bl	8008c74 <CalculateCRC>
 8008e30:	0003      	movs	r3, r0
 8008e32:	001a      	movs	r2, r3
 8008e34:	193b      	adds	r3, r7, r4
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d007      	beq.n	8008e4c <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 8008e3c:	4a08      	ldr	r2, [pc, #32]	@ (8008e60 <CheckCRC+0xa0>)
 8008e3e:	4b07      	ldr	r3, [pc, #28]	@ (8008e5c <CheckCRC+0x9c>)
 8008e40:	0019      	movs	r1, r3
 8008e42:	2001      	movs	r0, #1
 8008e44:	f7ff fe14 	bl	8008a70 <CreateLine>
		return false;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	e000      	b.n	8008e4e <CheckCRC+0x8e>
	}
	return true;
 8008e4c:	2301      	movs	r3, #1
}
 8008e4e:	0018      	movs	r0, r3
 8008e50:	46bd      	mov	sp, r7
 8008e52:	b005      	add	sp, #20
 8008e54:	bd90      	pop	{r4, r7, pc}
 8008e56:	46c0      	nop			@ (mov r8, r8)
 8008e58:	0801a0e8 	.word	0x0801a0e8
 8008e5c:	0801a110 	.word	0x0801a110
 8008e60:	0801a114 	.word	0x0801a114

08008e64 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8008e6a:	1dbb      	adds	r3, r7, #6
 8008e6c:	2289      	movs	r2, #137	@ 0x89
 8008e6e:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8008e70:	1dbb      	adds	r3, r7, #6
 8008e72:	2201      	movs	r2, #1
 8008e74:	0019      	movs	r1, r3
 8008e76:	2044      	movs	r0, #68	@ 0x44
 8008e78:	f7ff fede 	bl	8008c38 <WriteRegister>
	HAL_Delay(30);
 8008e7c:	201e      	movs	r0, #30
 8008e7e:	f000 f9f9 	bl	8009274 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8008e82:	4b14      	ldr	r3, [pc, #80]	@ (8008ed4 <HIDS_DeviceConnected+0x70>)
 8008e84:	2206      	movs	r2, #6
 8008e86:	0019      	movs	r1, r3
 8008e88:	2044      	movs	r0, #68	@ 0x44
 8008e8a:	f7ff feb7 	bl	8008bfc <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8008e8e:	1dfb      	adds	r3, r7, #7
 8008e90:	2200      	movs	r2, #0
 8008e92:	701a      	strb	r2, [r3, #0]
 8008e94:	e011      	b.n	8008eba <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8008e96:	1dfb      	adds	r3, r7, #7
 8008e98:	7818      	ldrb	r0, [r3, #0]
 8008e9a:	1dfb      	adds	r3, r7, #7
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	4a0d      	ldr	r2, [pc, #52]	@ (8008ed4 <HIDS_DeviceConnected+0x70>)
 8008ea0:	5cd3      	ldrb	r3, [r2, r3]
 8008ea2:	4a0d      	ldr	r2, [pc, #52]	@ (8008ed8 <HIDS_DeviceConnected+0x74>)
 8008ea4:	490d      	ldr	r1, [pc, #52]	@ (8008edc <HIDS_DeviceConnected+0x78>)
 8008ea6:	9300      	str	r3, [sp, #0]
 8008ea8:	0003      	movs	r3, r0
 8008eaa:	2002      	movs	r0, #2
 8008eac:	f7ff fde0 	bl	8008a70 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8008eb0:	1dfb      	adds	r3, r7, #7
 8008eb2:	781a      	ldrb	r2, [r3, #0]
 8008eb4:	1dfb      	adds	r3, r7, #7
 8008eb6:	3201      	adds	r2, #1
 8008eb8:	701a      	strb	r2, [r3, #0]
 8008eba:	1dfb      	adds	r3, r7, #7
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	2b05      	cmp	r3, #5
 8008ec0:	d9e9      	bls.n	8008e96 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8008ec2:	4b04      	ldr	r3, [pc, #16]	@ (8008ed4 <HIDS_DeviceConnected+0x70>)
 8008ec4:	0018      	movs	r0, r3
 8008ec6:	f7ff ff7b 	bl	8008dc0 <CheckCRC>
 8008eca:	0003      	movs	r3, r0
}
 8008ecc:	0018      	movs	r0, r3
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	b002      	add	sp, #8
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	200028a0 	.word	0x200028a0
 8008ed8:	0801a140 	.word	0x0801a140
 8008edc:	0801a0e4 	.word	0x0801a0e4

08008ee0 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	0002      	movs	r2, r0
 8008ee8:	1dfb      	adds	r3, r7, #7
 8008eea:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 8008eec:	4b03      	ldr	r3, [pc, #12]	@ (8008efc <HIDS_SetMeasurementMode+0x1c>)
 8008eee:	1dfa      	adds	r2, r7, #7
 8008ef0:	7812      	ldrb	r2, [r2, #0]
 8008ef2:	701a      	strb	r2, [r3, #0]
}
 8008ef4:	46c0      	nop			@ (mov r8, r8)
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	b002      	add	sp, #8
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	20000142 	.word	0x20000142

08008f00 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8008f00:	b580      	push	{r7, lr}
 8008f02:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8008f04:	4b04      	ldr	r3, [pc, #16]	@ (8008f18 <HIDS_MeasurementReady+0x18>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	0018      	movs	r0, r3
 8008f0a:	f7ff fd5b 	bl	80089c4 <TimestampIsReached>
 8008f0e:	0003      	movs	r3, r0
}
 8008f10:	0018      	movs	r0, r3
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	46c0      	nop			@ (mov r8, r8)
 8008f18:	20000144 	.word	0x20000144

08008f1c <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b08c      	sub	sp, #48	@ 0x30
 8008f20:	af02      	add	r7, sp, #8
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 8008f26:	4b7a      	ldr	r3, [pc, #488]	@ (8009110 <HIDS_GetMeasurementValues+0x1f4>)
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d001      	beq.n	8008f32 <HIDS_GetMeasurementValues+0x16>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e0ea      	b.n	8009108 <HIDS_GetMeasurementValues+0x1ec>
  if(!HIDS_MeasurementReady()) return false;
 8008f32:	f7ff ffe5 	bl	8008f00 <HIDS_MeasurementReady>
 8008f36:	0003      	movs	r3, r0
 8008f38:	001a      	movs	r2, r3
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	4053      	eors	r3, r2
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d001      	beq.n	8008f48 <HIDS_GetMeasurementValues+0x2c>
 8008f44:	2300      	movs	r3, #0
 8008f46:	e0df      	b.n	8009108 <HIDS_GetMeasurementValues+0x1ec>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 8008f48:	4b72      	ldr	r3, [pc, #456]	@ (8009114 <HIDS_GetMeasurementValues+0x1f8>)
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	4b72      	ldr	r3, [pc, #456]	@ (8009118 <HIDS_GetMeasurementValues+0x1fc>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	0019      	movs	r1, r3
 8008f52:	0010      	movs	r0, r2
 8008f54:	f7f7 f8f4 	bl	8000140 <__udivsi3>
 8008f58:	0003      	movs	r3, r0
 8008f5a:	617b      	str	r3, [r7, #20]
  float currentTemperature;
  float currentHumidity;
  static float temperatures[HIDS_MAX_MEASUREMENTS];
  static float humidities[HIDS_MAX_MEASUREMENTS];

  Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
 8008f5c:	4b6f      	ldr	r3, [pc, #444]	@ (800911c <HIDS_GetMeasurementValues+0x200>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	1c58      	adds	r0, r3, #1
 8008f62:	4a6f      	ldr	r2, [pc, #444]	@ (8009120 <HIDS_GetMeasurementValues+0x204>)
 8008f64:	496f      	ldr	r1, [pc, #444]	@ (8009124 <HIDS_GetMeasurementValues+0x208>)
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	0003      	movs	r3, r0
 8008f6c:	2003      	movs	r0, #3
 8008f6e:	f7ff fd7f 	bl	8008a70 <CreateLine>
  ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 8008f72:	4b6d      	ldr	r3, [pc, #436]	@ (8009128 <HIDS_GetMeasurementValues+0x20c>)
 8008f74:	2206      	movs	r2, #6
 8008f76:	0019      	movs	r1, r3
 8008f78:	2044      	movs	r0, #68	@ 0x44
 8008f7a:	f7ff fe3f 	bl	8008bfc <ReadRegister>
	if(!CheckCRC(MeasureBuffer)) {
 8008f7e:	4b6a      	ldr	r3, [pc, #424]	@ (8009128 <HIDS_GetMeasurementValues+0x20c>)
 8008f80:	0018      	movs	r0, r3
 8008f82:	f7ff ff1d 	bl	8008dc0 <CheckCRC>
 8008f86:	0003      	movs	r3, r0
 8008f88:	001a      	movs	r2, r3
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	4053      	eors	r3, r2
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d011      	beq.n	8008fb8 <HIDS_GetMeasurementValues+0x9c>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 8008f94:	2327      	movs	r3, #39	@ 0x27
 8008f96:	18fb      	adds	r3, r7, r3
 8008f98:	2200      	movs	r2, #0
 8008f9a:	701a      	strb	r2, [r3, #0]
 8008f9c:	e005      	b.n	8008faa <HIDS_GetMeasurementValues+0x8e>
 8008f9e:	2127      	movs	r1, #39	@ 0x27
 8008fa0:	187b      	adds	r3, r7, r1
 8008fa2:	781a      	ldrb	r2, [r3, #0]
 8008fa4:	187b      	adds	r3, r7, r1
 8008fa6:	3201      	adds	r2, #1
 8008fa8:	701a      	strb	r2, [r3, #0]
 8008faa:	2327      	movs	r3, #39	@ 0x27
 8008fac:	18fb      	adds	r3, r7, r3
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	2b05      	cmp	r3, #5
 8008fb2:	d9f4      	bls.n	8008f9e <HIDS_GetMeasurementValues+0x82>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	e0a7      	b.n	8009108 <HIDS_GetMeasurementValues+0x1ec>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * (MeasureBuffer[0] << 8) | MeasureBuffer[1])) / HIDS_POW_2_16_MINUS_1);
 8008fb8:	4b5b      	ldr	r3, [pc, #364]	@ (8009128 <HIDS_GetMeasurementValues+0x20c>)
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	021b      	lsls	r3, r3, #8
 8008fbe:	22af      	movs	r2, #175	@ 0xaf
 8008fc0:	4353      	muls	r3, r2
 8008fc2:	4a59      	ldr	r2, [pc, #356]	@ (8009128 <HIDS_GetMeasurementValues+0x20c>)
 8008fc4:	7852      	ldrb	r2, [r2, #1]
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	0018      	movs	r0, r3
 8008fca:	f7fa f977 	bl	80032bc <__aeabi_i2d>
 8008fce:	2200      	movs	r2, #0
 8008fd0:	4b56      	ldr	r3, [pc, #344]	@ (800912c <HIDS_GetMeasurementValues+0x210>)
 8008fd2:	f7f8 fe6d 	bl	8001cb0 <__aeabi_ddiv>
 8008fd6:	0002      	movs	r2, r0
 8008fd8:	000b      	movs	r3, r1
 8008fda:	0010      	movs	r0, r2
 8008fdc:	0019      	movs	r1, r3
 8008fde:	f7fa fa07 	bl	80033f0 <__aeabi_d2f>
 8008fe2:	1c03      	adds	r3, r0, #0
 8008fe4:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 8008fe6:	4952      	ldr	r1, [pc, #328]	@ (8009130 <HIDS_GetMeasurementValues+0x214>)
 8008fe8:	6938      	ldr	r0, [r7, #16]
 8008fea:	f7f8 f895 	bl	8001118 <__aeabi_fsub>
 8008fee:	1c03      	adds	r3, r0, #0
 8008ff0:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8008ff2:	4b4d      	ldr	r3, [pc, #308]	@ (8009128 <HIDS_GetMeasurementValues+0x20c>)
 8008ff4:	78db      	ldrb	r3, [r3, #3]
 8008ff6:	021b      	lsls	r3, r3, #8
 8008ff8:	4a4b      	ldr	r2, [pc, #300]	@ (8009128 <HIDS_GetMeasurementValues+0x20c>)
 8008ffa:	7912      	ldrb	r2, [r2, #4]
 8008ffc:	431a      	orrs	r2, r3
 8008ffe:	0013      	movs	r3, r2
 8009000:	015b      	lsls	r3, r3, #5
 8009002:	1a9b      	subs	r3, r3, r2
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	189b      	adds	r3, r3, r2
 8009008:	0018      	movs	r0, r3
 800900a:	f7fa f957 	bl	80032bc <__aeabi_i2d>
 800900e:	2200      	movs	r2, #0
 8009010:	4b46      	ldr	r3, [pc, #280]	@ (800912c <HIDS_GetMeasurementValues+0x210>)
 8009012:	f7f8 fe4d 	bl	8001cb0 <__aeabi_ddiv>
 8009016:	0002      	movs	r2, r0
 8009018:	000b      	movs	r3, r1
 800901a:	0010      	movs	r0, r2
 800901c:	0019      	movs	r1, r3
 800901e:	f7fa f9e7 	bl	80033f0 <__aeabi_d2f>
 8009022:	1c03      	adds	r3, r0, #0
 8009024:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 8009026:	4943      	ldr	r1, [pc, #268]	@ (8009134 <HIDS_GetMeasurementValues+0x218>)
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f7f8 f875 	bl	8001118 <__aeabi_fsub>
 800902e:	1c03      	adds	r3, r0, #0
 8009030:	60fb      	str	r3, [r7, #12]

	if(measurements < amountOfMeasurements) {
 8009032:	4b3a      	ldr	r3, [pc, #232]	@ (800911c <HIDS_GetMeasurementValues+0x200>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	697a      	ldr	r2, [r7, #20]
 8009038:	429a      	cmp	r2, r3
 800903a:	d910      	bls.n	800905e <HIDS_GetMeasurementValues+0x142>
	  temperatures[measurements] = currentTemperature;
 800903c:	4b37      	ldr	r3, [pc, #220]	@ (800911c <HIDS_GetMeasurementValues+0x200>)
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	4b3d      	ldr	r3, [pc, #244]	@ (8009138 <HIDS_GetMeasurementValues+0x21c>)
 8009042:	0092      	lsls	r2, r2, #2
 8009044:	6939      	ldr	r1, [r7, #16]
 8009046:	50d1      	str	r1, [r2, r3]
	  humidities[measurements] = currentHumidity;
 8009048:	4b34      	ldr	r3, [pc, #208]	@ (800911c <HIDS_GetMeasurementValues+0x200>)
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	4b3b      	ldr	r3, [pc, #236]	@ (800913c <HIDS_GetMeasurementValues+0x220>)
 800904e:	0092      	lsls	r2, r2, #2
 8009050:	68f9      	ldr	r1, [r7, #12]
 8009052:	50d1      	str	r1, [r2, r3]
	  measurements++;
 8009054:	4b31      	ldr	r3, [pc, #196]	@ (800911c <HIDS_GetMeasurementValues+0x200>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	1c5a      	adds	r2, r3, #1
 800905a:	4b30      	ldr	r3, [pc, #192]	@ (800911c <HIDS_GetMeasurementValues+0x200>)
 800905c:	601a      	str	r2, [r3, #0]
	}

	if (measurements >= amountOfMeasurements) {
 800905e:	4b2f      	ldr	r3, [pc, #188]	@ (800911c <HIDS_GetMeasurementValues+0x200>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	697a      	ldr	r2, [r7, #20]
 8009064:	429a      	cmp	r2, r3
 8009066:	d84c      	bhi.n	8009102 <HIDS_GetMeasurementValues+0x1e6>
	  // Measurements done, calculating average and returning it.
    float sumTemperature = 0.0;
 8009068:	2300      	movs	r3, #0
 800906a:	623b      	str	r3, [r7, #32]
    float sumHumidity = 0.0;
 800906c:	2300      	movs	r3, #0
 800906e:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 8009070:	2300      	movs	r3, #0
 8009072:	61bb      	str	r3, [r7, #24]
 8009074:	e016      	b.n	80090a4 <HIDS_GetMeasurementValues+0x188>
        sumTemperature += temperatures[i];
 8009076:	4b30      	ldr	r3, [pc, #192]	@ (8009138 <HIDS_GetMeasurementValues+0x21c>)
 8009078:	69ba      	ldr	r2, [r7, #24]
 800907a:	0092      	lsls	r2, r2, #2
 800907c:	58d3      	ldr	r3, [r2, r3]
 800907e:	1c19      	adds	r1, r3, #0
 8009080:	6a38      	ldr	r0, [r7, #32]
 8009082:	f7f7 fb9b 	bl	80007bc <__aeabi_fadd>
 8009086:	1c03      	adds	r3, r0, #0
 8009088:	623b      	str	r3, [r7, #32]
        sumHumidity += humidities[i];
 800908a:	4b2c      	ldr	r3, [pc, #176]	@ (800913c <HIDS_GetMeasurementValues+0x220>)
 800908c:	69ba      	ldr	r2, [r7, #24]
 800908e:	0092      	lsls	r2, r2, #2
 8009090:	58d3      	ldr	r3, [r2, r3]
 8009092:	1c19      	adds	r1, r3, #0
 8009094:	69f8      	ldr	r0, [r7, #28]
 8009096:	f7f7 fb91 	bl	80007bc <__aeabi_fadd>
 800909a:	1c03      	adds	r3, r0, #0
 800909c:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 800909e:	69bb      	ldr	r3, [r7, #24]
 80090a0:	3301      	adds	r3, #1
 80090a2:	61bb      	str	r3, [r7, #24]
 80090a4:	4b1d      	ldr	r3, [pc, #116]	@ (800911c <HIDS_GetMeasurementValues+0x200>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	69ba      	ldr	r2, [r7, #24]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d3e3      	bcc.n	8009076 <HIDS_GetMeasurementValues+0x15a>
    }

    *temperature = sumTemperature / measurements;
 80090ae:	4b1b      	ldr	r3, [pc, #108]	@ (800911c <HIDS_GetMeasurementValues+0x200>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	0018      	movs	r0, r3
 80090b4:	f7f8 fa56 	bl	8001564 <__aeabi_ui2f>
 80090b8:	1c03      	adds	r3, r0, #0
 80090ba:	1c19      	adds	r1, r3, #0
 80090bc:	6a38      	ldr	r0, [r7, #32]
 80090be:	f7f7 fd07 	bl	8000ad0 <__aeabi_fdiv>
 80090c2:	1c03      	adds	r3, r0, #0
 80090c4:	1c1a      	adds	r2, r3, #0
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	601a      	str	r2, [r3, #0]
    *humidity = sumHumidity / measurements;
 80090ca:	4b14      	ldr	r3, [pc, #80]	@ (800911c <HIDS_GetMeasurementValues+0x200>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	0018      	movs	r0, r3
 80090d0:	f7f8 fa48 	bl	8001564 <__aeabi_ui2f>
 80090d4:	1c03      	adds	r3, r0, #0
 80090d6:	1c19      	adds	r1, r3, #0
 80090d8:	69f8      	ldr	r0, [r7, #28]
 80090da:	f7f7 fcf9 	bl	8000ad0 <__aeabi_fdiv>
 80090de:	1c03      	adds	r3, r0, #0
 80090e0:	1c1a      	adds	r2, r3, #0
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	601a      	str	r2, [r3, #0]

    SGP_GetHT(temperature, humidity);
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	0011      	movs	r1, r2
 80090ec:	0018      	movs	r0, r3
 80090ee:	f7fe ffd5 	bl	800809c <SGP_GetHT>

    measurements = 0;
 80090f2:	4b0a      	ldr	r3, [pc, #40]	@ (800911c <HIDS_GetMeasurementValues+0x200>)
 80090f4:	2200      	movs	r2, #0
 80090f6:	601a      	str	r2, [r3, #0]
    MeasurementDone = true;
 80090f8:	4b05      	ldr	r3, [pc, #20]	@ (8009110 <HIDS_GetMeasurementValues+0x1f4>)
 80090fa:	2201      	movs	r2, #1
 80090fc:	701a      	strb	r2, [r3, #0]
    //Debug("HIDS measurement is done.");
    return true;
 80090fe:	2301      	movs	r3, #1
 8009100:	e002      	b.n	8009108 <HIDS_GetMeasurementValues+0x1ec>
	}
	// Starting another measurement, still not done with all measurements.
	HIDS_StartMeasurement();
 8009102:	f7ff fe2f 	bl	8008d64 <HIDS_StartMeasurement>
	return false;
 8009106:	2300      	movs	r3, #0
}
 8009108:	0018      	movs	r0, r3
 800910a:	46bd      	mov	sp, r7
 800910c:	b00a      	add	sp, #40	@ 0x28
 800910e:	bd80      	pop	{r7, pc}
 8009110:	200028ae 	.word	0x200028ae
 8009114:	2000014c 	.word	0x2000014c
 8009118:	20000148 	.word	0x20000148
 800911c:	200028b0 	.word	0x200028b0
 8009120:	0801a160 	.word	0x0801a160
 8009124:	0801a18c 	.word	0x0801a18c
 8009128:	200028a8 	.word	0x200028a8
 800912c:	40efffe0 	.word	0x40efffe0
 8009130:	42340000 	.word	0x42340000
 8009134:	40c00000 	.word	0x40c00000
 8009138:	200028b4 	.word	0x200028b4
 800913c:	20002cb4 	.word	0x20002cb4

08009140 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8009140:	480d      	ldr	r0, [pc, #52]	@ (8009178 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8009142:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8009144:	f7ff f958 	bl	80083f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009148:	480c      	ldr	r0, [pc, #48]	@ (800917c <LoopForever+0x6>)
  ldr r1, =_edata
 800914a:	490d      	ldr	r1, [pc, #52]	@ (8009180 <LoopForever+0xa>)
  ldr r2, =_sidata
 800914c:	4a0d      	ldr	r2, [pc, #52]	@ (8009184 <LoopForever+0xe>)
  movs r3, #0
 800914e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009150:	e002      	b.n	8009158 <LoopCopyDataInit>

08009152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009156:	3304      	adds	r3, #4

08009158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800915a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800915c:	d3f9      	bcc.n	8009152 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800915e:	4a0a      	ldr	r2, [pc, #40]	@ (8009188 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009160:	4c0a      	ldr	r4, [pc, #40]	@ (800918c <LoopForever+0x16>)
  movs r3, #0
 8009162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009164:	e001      	b.n	800916a <LoopFillZerobss>

08009166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009168:	3204      	adds	r2, #4

0800916a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800916a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800916c:	d3fb      	bcc.n	8009166 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800916e:	f00d fcab 	bl	8016ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009172:	f7fc fc0d 	bl	8005990 <main>

08009176 <LoopForever>:

LoopForever:
    b LoopForever
 8009176:	e7fe      	b.n	8009176 <LoopForever>
   ldr   r0, =_estack
 8009178:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800917c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009180:	200004a8 	.word	0x200004a8
  ldr r2, =_sidata
 8009184:	0801a828 	.word	0x0801a828
  ldr r2, =_sbss
 8009188:	200004a8 	.word	0x200004a8
  ldr r4, =_ebss
 800918c:	200043e0 	.word	0x200043e0

08009190 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009190:	e7fe      	b.n	8009190 <ADC1_COMP_IRQHandler>
	...

08009194 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800919a:	1dfb      	adds	r3, r7, #7
 800919c:	2200      	movs	r2, #0
 800919e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80091a0:	4b0b      	ldr	r3, [pc, #44]	@ (80091d0 <HAL_Init+0x3c>)
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	4b0a      	ldr	r3, [pc, #40]	@ (80091d0 <HAL_Init+0x3c>)
 80091a6:	2140      	movs	r1, #64	@ 0x40
 80091a8:	430a      	orrs	r2, r1
 80091aa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80091ac:	2003      	movs	r0, #3
 80091ae:	f000 f811 	bl	80091d4 <HAL_InitTick>
 80091b2:	1e03      	subs	r3, r0, #0
 80091b4:	d003      	beq.n	80091be <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80091b6:	1dfb      	adds	r3, r7, #7
 80091b8:	2201      	movs	r2, #1
 80091ba:	701a      	strb	r2, [r3, #0]
 80091bc:	e001      	b.n	80091c2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80091be:	f7fe fff1 	bl	80081a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80091c2:	1dfb      	adds	r3, r7, #7
 80091c4:	781b      	ldrb	r3, [r3, #0]
}
 80091c6:	0018      	movs	r0, r3
 80091c8:	46bd      	mov	sp, r7
 80091ca:	b002      	add	sp, #8
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	46c0      	nop			@ (mov r8, r8)
 80091d0:	40022000 	.word	0x40022000

080091d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80091d4:	b590      	push	{r4, r7, lr}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80091dc:	4b14      	ldr	r3, [pc, #80]	@ (8009230 <HAL_InitTick+0x5c>)
 80091de:	681c      	ldr	r4, [r3, #0]
 80091e0:	4b14      	ldr	r3, [pc, #80]	@ (8009234 <HAL_InitTick+0x60>)
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	0019      	movs	r1, r3
 80091e6:	23fa      	movs	r3, #250	@ 0xfa
 80091e8:	0098      	lsls	r0, r3, #2
 80091ea:	f7f6 ffa9 	bl	8000140 <__udivsi3>
 80091ee:	0003      	movs	r3, r0
 80091f0:	0019      	movs	r1, r3
 80091f2:	0020      	movs	r0, r4
 80091f4:	f7f6 ffa4 	bl	8000140 <__udivsi3>
 80091f8:	0003      	movs	r3, r0
 80091fa:	0018      	movs	r0, r3
 80091fc:	f000 fcad 	bl	8009b5a <HAL_SYSTICK_Config>
 8009200:	1e03      	subs	r3, r0, #0
 8009202:	d001      	beq.n	8009208 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	e00f      	b.n	8009228 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2b03      	cmp	r3, #3
 800920c:	d80b      	bhi.n	8009226 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800920e:	6879      	ldr	r1, [r7, #4]
 8009210:	2301      	movs	r3, #1
 8009212:	425b      	negs	r3, r3
 8009214:	2200      	movs	r2, #0
 8009216:	0018      	movs	r0, r3
 8009218:	f000 fc7a 	bl	8009b10 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800921c:	4b06      	ldr	r3, [pc, #24]	@ (8009238 <HAL_InitTick+0x64>)
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009222:	2300      	movs	r3, #0
 8009224:	e000      	b.n	8009228 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
}
 8009228:	0018      	movs	r0, r3
 800922a:	46bd      	mov	sp, r7
 800922c:	b003      	add	sp, #12
 800922e:	bd90      	pop	{r4, r7, pc}
 8009230:	2000013c 	.word	0x2000013c
 8009234:	20000154 	.word	0x20000154
 8009238:	20000150 	.word	0x20000150

0800923c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009240:	4b05      	ldr	r3, [pc, #20]	@ (8009258 <HAL_IncTick+0x1c>)
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	001a      	movs	r2, r3
 8009246:	4b05      	ldr	r3, [pc, #20]	@ (800925c <HAL_IncTick+0x20>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	18d2      	adds	r2, r2, r3
 800924c:	4b03      	ldr	r3, [pc, #12]	@ (800925c <HAL_IncTick+0x20>)
 800924e:	601a      	str	r2, [r3, #0]
}
 8009250:	46c0      	nop			@ (mov r8, r8)
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	46c0      	nop			@ (mov r8, r8)
 8009258:	20000154 	.word	0x20000154
 800925c:	200030b4 	.word	0x200030b4

08009260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	af00      	add	r7, sp, #0
  return uwTick;
 8009264:	4b02      	ldr	r3, [pc, #8]	@ (8009270 <HAL_GetTick+0x10>)
 8009266:	681b      	ldr	r3, [r3, #0]
}
 8009268:	0018      	movs	r0, r3
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	46c0      	nop			@ (mov r8, r8)
 8009270:	200030b4 	.word	0x200030b4

08009274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800927c:	f7ff fff0 	bl	8009260 <HAL_GetTick>
 8009280:	0003      	movs	r3, r0
 8009282:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	3301      	adds	r3, #1
 800928c:	d005      	beq.n	800929a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800928e:	4b0a      	ldr	r3, [pc, #40]	@ (80092b8 <HAL_Delay+0x44>)
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	001a      	movs	r2, r3
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	189b      	adds	r3, r3, r2
 8009298:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800929a:	46c0      	nop			@ (mov r8, r8)
 800929c:	f7ff ffe0 	bl	8009260 <HAL_GetTick>
 80092a0:	0002      	movs	r2, r0
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d8f7      	bhi.n	800929c <HAL_Delay+0x28>
  {
  }
}
 80092ac:	46c0      	nop			@ (mov r8, r8)
 80092ae:	46c0      	nop			@ (mov r8, r8)
 80092b0:	46bd      	mov	sp, r7
 80092b2:	b004      	add	sp, #16
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	46c0      	nop			@ (mov r8, r8)
 80092b8:	20000154 	.word	0x20000154

080092bc <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d101      	bne.n	80092ce <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e159      	b.n	8009582 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10a      	bne.n	80092ec <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2250      	movs	r2, #80	@ 0x50
 80092e0:	2100      	movs	r1, #0
 80092e2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	0018      	movs	r0, r3
 80092e8:	f7fb fe86 	bl	8004ff8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092f0:	2210      	movs	r2, #16
 80092f2:	4013      	ands	r3, r2
 80092f4:	2b10      	cmp	r3, #16
 80092f6:	d005      	beq.n	8009304 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	2204      	movs	r2, #4
 8009300:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8009302:	d00b      	beq.n	800931c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009308:	2210      	movs	r2, #16
 800930a:	431a      	orrs	r2, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2250      	movs	r2, #80	@ 0x50
 8009314:	2100      	movs	r1, #0
 8009316:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	e132      	b.n	8009582 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009320:	4a9a      	ldr	r2, [pc, #616]	@ (800958c <HAL_ADC_Init+0x2d0>)
 8009322:	4013      	ands	r3, r2
 8009324:	2202      	movs	r2, #2
 8009326:	431a      	orrs	r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	2203      	movs	r2, #3
 8009334:	4013      	ands	r3, r2
 8009336:	2b01      	cmp	r3, #1
 8009338:	d108      	bne.n	800934c <HAL_ADC_Init+0x90>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2201      	movs	r2, #1
 8009342:	4013      	ands	r3, r2
 8009344:	2b01      	cmp	r3, #1
 8009346:	d101      	bne.n	800934c <HAL_ADC_Init+0x90>
 8009348:	2301      	movs	r3, #1
 800934a:	e000      	b.n	800934e <HAL_ADC_Init+0x92>
 800934c:	2300      	movs	r3, #0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d149      	bne.n	80093e6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	685a      	ldr	r2, [r3, #4]
 8009356:	23c0      	movs	r3, #192	@ 0xc0
 8009358:	061b      	lsls	r3, r3, #24
 800935a:	429a      	cmp	r2, r3
 800935c:	d00b      	beq.n	8009376 <HAL_ADC_Init+0xba>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	685a      	ldr	r2, [r3, #4]
 8009362:	2380      	movs	r3, #128	@ 0x80
 8009364:	05db      	lsls	r3, r3, #23
 8009366:	429a      	cmp	r2, r3
 8009368:	d005      	beq.n	8009376 <HAL_ADC_Init+0xba>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	2380      	movs	r3, #128	@ 0x80
 8009370:	061b      	lsls	r3, r3, #24
 8009372:	429a      	cmp	r2, r3
 8009374:	d111      	bne.n	800939a <HAL_ADC_Init+0xde>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	691a      	ldr	r2, [r3, #16]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	0092      	lsls	r2, r2, #2
 8009382:	0892      	lsrs	r2, r2, #2
 8009384:	611a      	str	r2, [r3, #16]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	6919      	ldr	r1, [r3, #16]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	685a      	ldr	r2, [r3, #4]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	430a      	orrs	r2, r1
 8009396:	611a      	str	r2, [r3, #16]
 8009398:	e014      	b.n	80093c4 <HAL_ADC_Init+0x108>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	691a      	ldr	r2, [r3, #16]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	0092      	lsls	r2, r2, #2
 80093a6:	0892      	lsrs	r2, r2, #2
 80093a8:	611a      	str	r2, [r3, #16]
 80093aa:	4b79      	ldr	r3, [pc, #484]	@ (8009590 <HAL_ADC_Init+0x2d4>)
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	4b78      	ldr	r3, [pc, #480]	@ (8009590 <HAL_ADC_Init+0x2d4>)
 80093b0:	4978      	ldr	r1, [pc, #480]	@ (8009594 <HAL_ADC_Init+0x2d8>)
 80093b2:	400a      	ands	r2, r1
 80093b4:	601a      	str	r2, [r3, #0]
 80093b6:	4b76      	ldr	r3, [pc, #472]	@ (8009590 <HAL_ADC_Init+0x2d4>)
 80093b8:	6819      	ldr	r1, [r3, #0]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	685a      	ldr	r2, [r3, #4]
 80093be:	4b74      	ldr	r3, [pc, #464]	@ (8009590 <HAL_ADC_Init+0x2d4>)
 80093c0:	430a      	orrs	r2, r1
 80093c2:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	68da      	ldr	r2, [r3, #12]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2118      	movs	r1, #24
 80093d0:	438a      	bics	r2, r1
 80093d2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	68d9      	ldr	r1, [r3, #12]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	689a      	ldr	r2, [r3, #8]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	430a      	orrs	r2, r1
 80093e4:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80093e6:	4b6a      	ldr	r3, [pc, #424]	@ (8009590 <HAL_ADC_Init+0x2d4>)
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	4b69      	ldr	r3, [pc, #420]	@ (8009590 <HAL_ADC_Init+0x2d4>)
 80093ec:	496a      	ldr	r1, [pc, #424]	@ (8009598 <HAL_ADC_Init+0x2dc>)
 80093ee:	400a      	ands	r2, r1
 80093f0:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80093f2:	4b67      	ldr	r3, [pc, #412]	@ (8009590 <HAL_ADC_Init+0x2d4>)
 80093f4:	6819      	ldr	r1, [r3, #0]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093fa:	065a      	lsls	r2, r3, #25
 80093fc:	4b64      	ldr	r3, [pc, #400]	@ (8009590 <HAL_ADC_Init+0x2d4>)
 80093fe:	430a      	orrs	r2, r1
 8009400:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	689a      	ldr	r2, [r3, #8]
 8009408:	2380      	movs	r3, #128	@ 0x80
 800940a:	055b      	lsls	r3, r3, #21
 800940c:	4013      	ands	r3, r2
 800940e:	d108      	bne.n	8009422 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	689a      	ldr	r2, [r3, #8]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2180      	movs	r1, #128	@ 0x80
 800941c:	0549      	lsls	r1, r1, #21
 800941e:	430a      	orrs	r2, r1
 8009420:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	68da      	ldr	r2, [r3, #12]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	495b      	ldr	r1, [pc, #364]	@ (800959c <HAL_ADC_Init+0x2e0>)
 800942e:	400a      	ands	r2, r1
 8009430:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68d9      	ldr	r1, [r3, #12]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	2b02      	cmp	r3, #2
 8009442:	d101      	bne.n	8009448 <HAL_ADC_Init+0x18c>
 8009444:	2304      	movs	r3, #4
 8009446:	e000      	b.n	800944a <HAL_ADC_Init+0x18e>
 8009448:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800944a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2020      	movs	r0, #32
 8009450:	5c1b      	ldrb	r3, [r3, r0]
 8009452:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8009454:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	202c      	movs	r0, #44	@ 0x2c
 800945a:	5c1b      	ldrb	r3, [r3, r0]
 800945c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800945e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8009464:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	699b      	ldr	r3, [r3, #24]
 800946a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800946c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	69db      	ldr	r3, [r3, #28]
 8009472:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8009474:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	430a      	orrs	r2, r1
 800947c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009482:	23c2      	movs	r3, #194	@ 0xc2
 8009484:	33ff      	adds	r3, #255	@ 0xff
 8009486:	429a      	cmp	r2, r3
 8009488:	d00b      	beq.n	80094a2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68d9      	ldr	r1, [r3, #12]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8009498:	431a      	orrs	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	430a      	orrs	r2, r1
 80094a0:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2221      	movs	r2, #33	@ 0x21
 80094a6:	5c9b      	ldrb	r3, [r3, r2]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d11a      	bne.n	80094e2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2220      	movs	r2, #32
 80094b0:	5c9b      	ldrb	r3, [r3, r2]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d109      	bne.n	80094ca <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	68da      	ldr	r2, [r3, #12]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2180      	movs	r1, #128	@ 0x80
 80094c2:	0249      	lsls	r1, r1, #9
 80094c4:	430a      	orrs	r2, r1
 80094c6:	60da      	str	r2, [r3, #12]
 80094c8:	e00b      	b.n	80094e2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094ce:	2220      	movs	r2, #32
 80094d0:	431a      	orrs	r2, r3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094da:	2201      	movs	r2, #1
 80094dc:	431a      	orrs	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d11f      	bne.n	800952a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	691a      	ldr	r2, [r3, #16]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	492a      	ldr	r1, [pc, #168]	@ (80095a0 <HAL_ADC_Init+0x2e4>)
 80094f6:	400a      	ands	r2, r1
 80094f8:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	6919      	ldr	r1, [r3, #16]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8009508:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800950e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	430a      	orrs	r2, r1
 8009516:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	691a      	ldr	r2, [r3, #16]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2101      	movs	r1, #1
 8009524:	430a      	orrs	r2, r1
 8009526:	611a      	str	r2, [r3, #16]
 8009528:	e00e      	b.n	8009548 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	2201      	movs	r2, #1
 8009532:	4013      	ands	r3, r2
 8009534:	2b01      	cmp	r3, #1
 8009536:	d107      	bne.n	8009548 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	691a      	ldr	r2, [r3, #16]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	2101      	movs	r1, #1
 8009544:	438a      	bics	r2, r1
 8009546:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	695a      	ldr	r2, [r3, #20]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2107      	movs	r1, #7
 8009554:	438a      	bics	r2, r1
 8009556:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	6959      	ldr	r1, [r3, #20]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	430a      	orrs	r2, r1
 8009568:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009574:	2203      	movs	r2, #3
 8009576:	4393      	bics	r3, r2
 8009578:	2201      	movs	r2, #1
 800957a:	431a      	orrs	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	0018      	movs	r0, r3
 8009584:	46bd      	mov	sp, r7
 8009586:	b002      	add	sp, #8
 8009588:	bd80      	pop	{r7, pc}
 800958a:	46c0      	nop			@ (mov r8, r8)
 800958c:	fffffefd 	.word	0xfffffefd
 8009590:	40012708 	.word	0x40012708
 8009594:	ffc3ffff 	.word	0xffc3ffff
 8009598:	fdffffff 	.word	0xfdffffff
 800959c:	fffe0219 	.word	0xfffe0219
 80095a0:	fffffc03 	.word	0xfffffc03

080095a4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80095a4:	b590      	push	{r4, r7, lr}
 80095a6:	b085      	sub	sp, #20
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80095ac:	230f      	movs	r3, #15
 80095ae:	18fb      	adds	r3, r7, r3
 80095b0:	2200      	movs	r2, #0
 80095b2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	2204      	movs	r2, #4
 80095bc:	4013      	ands	r3, r2
 80095be:	d138      	bne.n	8009632 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2250      	movs	r2, #80	@ 0x50
 80095c4:	5c9b      	ldrb	r3, [r3, r2]
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d101      	bne.n	80095ce <HAL_ADC_Start+0x2a>
 80095ca:	2302      	movs	r3, #2
 80095cc:	e038      	b.n	8009640 <HAL_ADC_Start+0x9c>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2250      	movs	r2, #80	@ 0x50
 80095d2:	2101      	movs	r1, #1
 80095d4:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	69db      	ldr	r3, [r3, #28]
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d007      	beq.n	80095ee <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80095de:	230f      	movs	r3, #15
 80095e0:	18fc      	adds	r4, r7, r3
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	0018      	movs	r0, r3
 80095e6:	f000 f95f 	bl	80098a8 <ADC_Enable>
 80095ea:	0003      	movs	r3, r0
 80095ec:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80095ee:	230f      	movs	r3, #15
 80095f0:	18fb      	adds	r3, r7, r3
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d120      	bne.n	800963a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095fc:	4a12      	ldr	r2, [pc, #72]	@ (8009648 <HAL_ADC_Start+0xa4>)
 80095fe:	4013      	ands	r3, r2
 8009600:	2280      	movs	r2, #128	@ 0x80
 8009602:	0052      	lsls	r2, r2, #1
 8009604:	431a      	orrs	r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2250      	movs	r2, #80	@ 0x50
 8009614:	2100      	movs	r1, #0
 8009616:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	221c      	movs	r2, #28
 800961e:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	689a      	ldr	r2, [r3, #8]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2104      	movs	r1, #4
 800962c:	430a      	orrs	r2, r1
 800962e:	609a      	str	r2, [r3, #8]
 8009630:	e003      	b.n	800963a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009632:	230f      	movs	r3, #15
 8009634:	18fb      	adds	r3, r7, r3
 8009636:	2202      	movs	r2, #2
 8009638:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800963a:	230f      	movs	r3, #15
 800963c:	18fb      	adds	r3, r7, r3
 800963e:	781b      	ldrb	r3, [r3, #0]
}
 8009640:	0018      	movs	r0, r3
 8009642:	46bd      	mov	sp, r7
 8009644:	b005      	add	sp, #20
 8009646:	bd90      	pop	{r4, r7, pc}
 8009648:	fffff0fe 	.word	0xfffff0fe

0800964c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8009656:	2300      	movs	r3, #0
 8009658:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800965a:	2300      	movs	r3, #0
 800965c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	695b      	ldr	r3, [r3, #20]
 8009662:	2b08      	cmp	r3, #8
 8009664:	d102      	bne.n	800966c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8009666:	2308      	movs	r3, #8
 8009668:	60fb      	str	r3, [r7, #12]
 800966a:	e014      	b.n	8009696 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	2201      	movs	r2, #1
 8009674:	4013      	ands	r3, r2
 8009676:	2b01      	cmp	r3, #1
 8009678:	d10b      	bne.n	8009692 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800967e:	2220      	movs	r2, #32
 8009680:	431a      	orrs	r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2250      	movs	r2, #80	@ 0x50
 800968a:	2100      	movs	r1, #0
 800968c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	e072      	b.n	8009778 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8009692:	230c      	movs	r3, #12
 8009694:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8009696:	f7ff fde3 	bl	8009260 <HAL_GetTick>
 800969a:	0003      	movs	r3, r0
 800969c:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800969e:	e01f      	b.n	80096e0 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	3301      	adds	r3, #1
 80096a4:	d01c      	beq.n	80096e0 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d007      	beq.n	80096bc <HAL_ADC_PollForConversion+0x70>
 80096ac:	f7ff fdd8 	bl	8009260 <HAL_GetTick>
 80096b0:	0002      	movs	r2, r0
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	1ad3      	subs	r3, r2, r3
 80096b6:	683a      	ldr	r2, [r7, #0]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d211      	bcs.n	80096e0 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	4013      	ands	r3, r2
 80096c6:	d10b      	bne.n	80096e0 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096cc:	2204      	movs	r2, #4
 80096ce:	431a      	orrs	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2250      	movs	r2, #80	@ 0x50
 80096d8:	2100      	movs	r1, #0
 80096da:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80096dc:	2303      	movs	r3, #3
 80096de:	e04b      	b.n	8009778 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68fa      	ldr	r2, [r7, #12]
 80096e8:	4013      	ands	r3, r2
 80096ea:	d0d9      	beq.n	80096a0 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096f0:	2280      	movs	r2, #128	@ 0x80
 80096f2:	0092      	lsls	r2, r2, #2
 80096f4:	431a      	orrs	r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	68da      	ldr	r2, [r3, #12]
 8009700:	23c0      	movs	r3, #192	@ 0xc0
 8009702:	011b      	lsls	r3, r3, #4
 8009704:	4013      	ands	r3, r2
 8009706:	d12e      	bne.n	8009766 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2220      	movs	r2, #32
 800970c:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800970e:	2b00      	cmp	r3, #0
 8009710:	d129      	bne.n	8009766 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2208      	movs	r2, #8
 800971a:	4013      	ands	r3, r2
 800971c:	2b08      	cmp	r3, #8
 800971e:	d122      	bne.n	8009766 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	2204      	movs	r2, #4
 8009728:	4013      	ands	r3, r2
 800972a:	d110      	bne.n	800974e <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	685a      	ldr	r2, [r3, #4]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	210c      	movs	r1, #12
 8009738:	438a      	bics	r2, r1
 800973a:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009740:	4a0f      	ldr	r2, [pc, #60]	@ (8009780 <HAL_ADC_PollForConversion+0x134>)
 8009742:	4013      	ands	r3, r2
 8009744:	2201      	movs	r2, #1
 8009746:	431a      	orrs	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	655a      	str	r2, [r3, #84]	@ 0x54
 800974c:	e00b      	b.n	8009766 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009752:	2220      	movs	r2, #32
 8009754:	431a      	orrs	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800975e:	2201      	movs	r2, #1
 8009760:	431a      	orrs	r2, r3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	699b      	ldr	r3, [r3, #24]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d103      	bne.n	8009776 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	220c      	movs	r2, #12
 8009774:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	0018      	movs	r0, r3
 800977a:	46bd      	mov	sp, r7
 800977c:	b004      	add	sp, #16
 800977e:	bd80      	pop	{r7, pc}
 8009780:	fffffefe 	.word	0xfffffefe

08009784 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8009792:	0018      	movs	r0, r3
 8009794:	46bd      	mov	sp, r7
 8009796:	b002      	add	sp, #8
 8009798:	bd80      	pop	{r7, pc}
	...

0800979c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2250      	movs	r2, #80	@ 0x50
 80097aa:	5c9b      	ldrb	r3, [r3, r2]
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d101      	bne.n	80097b4 <HAL_ADC_ConfigChannel+0x18>
 80097b0:	2302      	movs	r3, #2
 80097b2:	e06c      	b.n	800988e <HAL_ADC_ConfigChannel+0xf2>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2250      	movs	r2, #80	@ 0x50
 80097b8:	2101      	movs	r1, #1
 80097ba:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	2204      	movs	r2, #4
 80097c4:	4013      	ands	r3, r2
 80097c6:	d00b      	beq.n	80097e0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097cc:	2220      	movs	r2, #32
 80097ce:	431a      	orrs	r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2250      	movs	r2, #80	@ 0x50
 80097d8:	2100      	movs	r1, #0
 80097da:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	e056      	b.n	800988e <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	4a2c      	ldr	r2, [pc, #176]	@ (8009898 <HAL_ADC_ConfigChannel+0xfc>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d028      	beq.n	800983c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	035b      	lsls	r3, r3, #13
 80097f6:	0b5a      	lsrs	r2, r3, #13
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	430a      	orrs	r2, r1
 80097fe:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	2380      	movs	r3, #128	@ 0x80
 8009806:	02db      	lsls	r3, r3, #11
 8009808:	4013      	ands	r3, r2
 800980a:	d009      	beq.n	8009820 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800980c:	4b23      	ldr	r3, [pc, #140]	@ (800989c <HAL_ADC_ConfigChannel+0x100>)
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	4b22      	ldr	r3, [pc, #136]	@ (800989c <HAL_ADC_ConfigChannel+0x100>)
 8009812:	2180      	movs	r1, #128	@ 0x80
 8009814:	0409      	lsls	r1, r1, #16
 8009816:	430a      	orrs	r2, r1
 8009818:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800981a:	200a      	movs	r0, #10
 800981c:	f000 f8ac 	bl	8009978 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	2380      	movs	r3, #128	@ 0x80
 8009826:	029b      	lsls	r3, r3, #10
 8009828:	4013      	ands	r3, r2
 800982a:	d02b      	beq.n	8009884 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800982c:	4b1b      	ldr	r3, [pc, #108]	@ (800989c <HAL_ADC_ConfigChannel+0x100>)
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	4b1a      	ldr	r3, [pc, #104]	@ (800989c <HAL_ADC_ConfigChannel+0x100>)
 8009832:	2180      	movs	r1, #128	@ 0x80
 8009834:	03c9      	lsls	r1, r1, #15
 8009836:	430a      	orrs	r2, r1
 8009838:	601a      	str	r2, [r3, #0]
 800983a:	e023      	b.n	8009884 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	035b      	lsls	r3, r3, #13
 8009848:	0b5b      	lsrs	r3, r3, #13
 800984a:	43d9      	mvns	r1, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	400a      	ands	r2, r1
 8009852:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	2380      	movs	r3, #128	@ 0x80
 800985a:	02db      	lsls	r3, r3, #11
 800985c:	4013      	ands	r3, r2
 800985e:	d005      	beq.n	800986c <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8009860:	4b0e      	ldr	r3, [pc, #56]	@ (800989c <HAL_ADC_ConfigChannel+0x100>)
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	4b0d      	ldr	r3, [pc, #52]	@ (800989c <HAL_ADC_ConfigChannel+0x100>)
 8009866:	490e      	ldr	r1, [pc, #56]	@ (80098a0 <HAL_ADC_ConfigChannel+0x104>)
 8009868:	400a      	ands	r2, r1
 800986a:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	2380      	movs	r3, #128	@ 0x80
 8009872:	029b      	lsls	r3, r3, #10
 8009874:	4013      	ands	r3, r2
 8009876:	d005      	beq.n	8009884 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8009878:	4b08      	ldr	r3, [pc, #32]	@ (800989c <HAL_ADC_ConfigChannel+0x100>)
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	4b07      	ldr	r3, [pc, #28]	@ (800989c <HAL_ADC_ConfigChannel+0x100>)
 800987e:	4909      	ldr	r1, [pc, #36]	@ (80098a4 <HAL_ADC_ConfigChannel+0x108>)
 8009880:	400a      	ands	r2, r1
 8009882:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2250      	movs	r2, #80	@ 0x50
 8009888:	2100      	movs	r1, #0
 800988a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	0018      	movs	r0, r3
 8009890:	46bd      	mov	sp, r7
 8009892:	b002      	add	sp, #8
 8009894:	bd80      	pop	{r7, pc}
 8009896:	46c0      	nop			@ (mov r8, r8)
 8009898:	00001001 	.word	0x00001001
 800989c:	40012708 	.word	0x40012708
 80098a0:	ff7fffff 	.word	0xff7fffff
 80098a4:	ffbfffff 	.word	0xffbfffff

080098a8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b084      	sub	sp, #16
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80098b0:	2300      	movs	r3, #0
 80098b2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	2203      	movs	r2, #3
 80098bc:	4013      	ands	r3, r2
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d108      	bne.n	80098d4 <ADC_Enable+0x2c>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2201      	movs	r2, #1
 80098ca:	4013      	ands	r3, r2
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d101      	bne.n	80098d4 <ADC_Enable+0x2c>
 80098d0:	2301      	movs	r3, #1
 80098d2:	e000      	b.n	80098d6 <ADC_Enable+0x2e>
 80098d4:	2300      	movs	r3, #0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d146      	bne.n	8009968 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	4a24      	ldr	r2, [pc, #144]	@ (8009974 <ADC_Enable+0xcc>)
 80098e2:	4013      	ands	r3, r2
 80098e4:	d00d      	beq.n	8009902 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ea:	2210      	movs	r2, #16
 80098ec:	431a      	orrs	r2, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098f6:	2201      	movs	r2, #1
 80098f8:	431a      	orrs	r2, r3
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80098fe:	2301      	movs	r3, #1
 8009900:	e033      	b.n	800996a <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	689a      	ldr	r2, [r3, #8]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2101      	movs	r1, #1
 800990e:	430a      	orrs	r2, r1
 8009910:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8009912:	2001      	movs	r0, #1
 8009914:	f000 f830 	bl	8009978 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8009918:	f7ff fca2 	bl	8009260 <HAL_GetTick>
 800991c:	0003      	movs	r3, r0
 800991e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8009920:	e01b      	b.n	800995a <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8009922:	f7ff fc9d 	bl	8009260 <HAL_GetTick>
 8009926:	0002      	movs	r2, r0
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	2b0a      	cmp	r3, #10
 800992e:	d914      	bls.n	800995a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2201      	movs	r2, #1
 8009938:	4013      	ands	r3, r2
 800993a:	2b01      	cmp	r3, #1
 800993c:	d00d      	beq.n	800995a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009942:	2210      	movs	r2, #16
 8009944:	431a      	orrs	r2, r3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800994e:	2201      	movs	r2, #1
 8009950:	431a      	orrs	r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e007      	b.n	800996a <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2201      	movs	r2, #1
 8009962:	4013      	ands	r3, r2
 8009964:	2b01      	cmp	r3, #1
 8009966:	d1dc      	bne.n	8009922 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	0018      	movs	r0, r3
 800996c:	46bd      	mov	sp, r7
 800996e:	b004      	add	sp, #16
 8009970:	bd80      	pop	{r7, pc}
 8009972:	46c0      	nop			@ (mov r8, r8)
 8009974:	80000017 	.word	0x80000017

08009978 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8009980:	4b0b      	ldr	r3, [pc, #44]	@ (80099b0 <ADC_DelayMicroSecond+0x38>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	490b      	ldr	r1, [pc, #44]	@ (80099b4 <ADC_DelayMicroSecond+0x3c>)
 8009986:	0018      	movs	r0, r3
 8009988:	f7f6 fbda 	bl	8000140 <__udivsi3>
 800998c:	0003      	movs	r3, r0
 800998e:	001a      	movs	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4353      	muls	r3, r2
 8009994:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8009996:	e002      	b.n	800999e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	3b01      	subs	r3, #1
 800999c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1f9      	bne.n	8009998 <ADC_DelayMicroSecond+0x20>
  }
}
 80099a4:	46c0      	nop			@ (mov r8, r8)
 80099a6:	46c0      	nop			@ (mov r8, r8)
 80099a8:	46bd      	mov	sp, r7
 80099aa:	b004      	add	sp, #16
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	46c0      	nop			@ (mov r8, r8)
 80099b0:	2000013c 	.word	0x2000013c
 80099b4:	000f4240 	.word	0x000f4240

080099b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	0002      	movs	r2, r0
 80099c0:	1dfb      	adds	r3, r7, #7
 80099c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80099c4:	1dfb      	adds	r3, r7, #7
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80099ca:	d809      	bhi.n	80099e0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80099cc:	1dfb      	adds	r3, r7, #7
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	001a      	movs	r2, r3
 80099d2:	231f      	movs	r3, #31
 80099d4:	401a      	ands	r2, r3
 80099d6:	4b04      	ldr	r3, [pc, #16]	@ (80099e8 <__NVIC_EnableIRQ+0x30>)
 80099d8:	2101      	movs	r1, #1
 80099da:	4091      	lsls	r1, r2
 80099dc:	000a      	movs	r2, r1
 80099de:	601a      	str	r2, [r3, #0]
  }
}
 80099e0:	46c0      	nop			@ (mov r8, r8)
 80099e2:	46bd      	mov	sp, r7
 80099e4:	b002      	add	sp, #8
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	e000e100 	.word	0xe000e100

080099ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80099ec:	b590      	push	{r4, r7, lr}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	0002      	movs	r2, r0
 80099f4:	6039      	str	r1, [r7, #0]
 80099f6:	1dfb      	adds	r3, r7, #7
 80099f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80099fa:	1dfb      	adds	r3, r7, #7
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8009a00:	d828      	bhi.n	8009a54 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009a02:	4a2f      	ldr	r2, [pc, #188]	@ (8009ac0 <__NVIC_SetPriority+0xd4>)
 8009a04:	1dfb      	adds	r3, r7, #7
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	b25b      	sxtb	r3, r3
 8009a0a:	089b      	lsrs	r3, r3, #2
 8009a0c:	33c0      	adds	r3, #192	@ 0xc0
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	589b      	ldr	r3, [r3, r2]
 8009a12:	1dfa      	adds	r2, r7, #7
 8009a14:	7812      	ldrb	r2, [r2, #0]
 8009a16:	0011      	movs	r1, r2
 8009a18:	2203      	movs	r2, #3
 8009a1a:	400a      	ands	r2, r1
 8009a1c:	00d2      	lsls	r2, r2, #3
 8009a1e:	21ff      	movs	r1, #255	@ 0xff
 8009a20:	4091      	lsls	r1, r2
 8009a22:	000a      	movs	r2, r1
 8009a24:	43d2      	mvns	r2, r2
 8009a26:	401a      	ands	r2, r3
 8009a28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	019b      	lsls	r3, r3, #6
 8009a2e:	22ff      	movs	r2, #255	@ 0xff
 8009a30:	401a      	ands	r2, r3
 8009a32:	1dfb      	adds	r3, r7, #7
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	0018      	movs	r0, r3
 8009a38:	2303      	movs	r3, #3
 8009a3a:	4003      	ands	r3, r0
 8009a3c:	00db      	lsls	r3, r3, #3
 8009a3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009a40:	481f      	ldr	r0, [pc, #124]	@ (8009ac0 <__NVIC_SetPriority+0xd4>)
 8009a42:	1dfb      	adds	r3, r7, #7
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	b25b      	sxtb	r3, r3
 8009a48:	089b      	lsrs	r3, r3, #2
 8009a4a:	430a      	orrs	r2, r1
 8009a4c:	33c0      	adds	r3, #192	@ 0xc0
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8009a52:	e031      	b.n	8009ab8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009a54:	4a1b      	ldr	r2, [pc, #108]	@ (8009ac4 <__NVIC_SetPriority+0xd8>)
 8009a56:	1dfb      	adds	r3, r7, #7
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	0019      	movs	r1, r3
 8009a5c:	230f      	movs	r3, #15
 8009a5e:	400b      	ands	r3, r1
 8009a60:	3b08      	subs	r3, #8
 8009a62:	089b      	lsrs	r3, r3, #2
 8009a64:	3306      	adds	r3, #6
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	18d3      	adds	r3, r2, r3
 8009a6a:	3304      	adds	r3, #4
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	1dfa      	adds	r2, r7, #7
 8009a70:	7812      	ldrb	r2, [r2, #0]
 8009a72:	0011      	movs	r1, r2
 8009a74:	2203      	movs	r2, #3
 8009a76:	400a      	ands	r2, r1
 8009a78:	00d2      	lsls	r2, r2, #3
 8009a7a:	21ff      	movs	r1, #255	@ 0xff
 8009a7c:	4091      	lsls	r1, r2
 8009a7e:	000a      	movs	r2, r1
 8009a80:	43d2      	mvns	r2, r2
 8009a82:	401a      	ands	r2, r3
 8009a84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	019b      	lsls	r3, r3, #6
 8009a8a:	22ff      	movs	r2, #255	@ 0xff
 8009a8c:	401a      	ands	r2, r3
 8009a8e:	1dfb      	adds	r3, r7, #7
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	0018      	movs	r0, r3
 8009a94:	2303      	movs	r3, #3
 8009a96:	4003      	ands	r3, r0
 8009a98:	00db      	lsls	r3, r3, #3
 8009a9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009a9c:	4809      	ldr	r0, [pc, #36]	@ (8009ac4 <__NVIC_SetPriority+0xd8>)
 8009a9e:	1dfb      	adds	r3, r7, #7
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	001c      	movs	r4, r3
 8009aa4:	230f      	movs	r3, #15
 8009aa6:	4023      	ands	r3, r4
 8009aa8:	3b08      	subs	r3, #8
 8009aaa:	089b      	lsrs	r3, r3, #2
 8009aac:	430a      	orrs	r2, r1
 8009aae:	3306      	adds	r3, #6
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	18c3      	adds	r3, r0, r3
 8009ab4:	3304      	adds	r3, #4
 8009ab6:	601a      	str	r2, [r3, #0]
}
 8009ab8:	46c0      	nop			@ (mov r8, r8)
 8009aba:	46bd      	mov	sp, r7
 8009abc:	b003      	add	sp, #12
 8009abe:	bd90      	pop	{r4, r7, pc}
 8009ac0:	e000e100 	.word	0xe000e100
 8009ac4:	e000ed00 	.word	0xe000ed00

08009ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	1e5a      	subs	r2, r3, #1
 8009ad4:	2380      	movs	r3, #128	@ 0x80
 8009ad6:	045b      	lsls	r3, r3, #17
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d301      	bcc.n	8009ae0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009adc:	2301      	movs	r3, #1
 8009ade:	e010      	b.n	8009b02 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8009b0c <SysTick_Config+0x44>)
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	3a01      	subs	r2, #1
 8009ae6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009ae8:	2301      	movs	r3, #1
 8009aea:	425b      	negs	r3, r3
 8009aec:	2103      	movs	r1, #3
 8009aee:	0018      	movs	r0, r3
 8009af0:	f7ff ff7c 	bl	80099ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009af4:	4b05      	ldr	r3, [pc, #20]	@ (8009b0c <SysTick_Config+0x44>)
 8009af6:	2200      	movs	r2, #0
 8009af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009afa:	4b04      	ldr	r3, [pc, #16]	@ (8009b0c <SysTick_Config+0x44>)
 8009afc:	2207      	movs	r2, #7
 8009afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	0018      	movs	r0, r3
 8009b04:	46bd      	mov	sp, r7
 8009b06:	b002      	add	sp, #8
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	46c0      	nop			@ (mov r8, r8)
 8009b0c:	e000e010 	.word	0xe000e010

08009b10 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60b9      	str	r1, [r7, #8]
 8009b18:	607a      	str	r2, [r7, #4]
 8009b1a:	210f      	movs	r1, #15
 8009b1c:	187b      	adds	r3, r7, r1
 8009b1e:	1c02      	adds	r2, r0, #0
 8009b20:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8009b22:	68ba      	ldr	r2, [r7, #8]
 8009b24:	187b      	adds	r3, r7, r1
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	b25b      	sxtb	r3, r3
 8009b2a:	0011      	movs	r1, r2
 8009b2c:	0018      	movs	r0, r3
 8009b2e:	f7ff ff5d 	bl	80099ec <__NVIC_SetPriority>
}
 8009b32:	46c0      	nop			@ (mov r8, r8)
 8009b34:	46bd      	mov	sp, r7
 8009b36:	b004      	add	sp, #16
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b082      	sub	sp, #8
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	0002      	movs	r2, r0
 8009b42:	1dfb      	adds	r3, r7, #7
 8009b44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009b46:	1dfb      	adds	r3, r7, #7
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	b25b      	sxtb	r3, r3
 8009b4c:	0018      	movs	r0, r3
 8009b4e:	f7ff ff33 	bl	80099b8 <__NVIC_EnableIRQ>
}
 8009b52:	46c0      	nop			@ (mov r8, r8)
 8009b54:	46bd      	mov	sp, r7
 8009b56:	b002      	add	sp, #8
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b082      	sub	sp, #8
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	0018      	movs	r0, r3
 8009b66:	f7ff ffaf 	bl	8009ac8 <SysTick_Config>
 8009b6a:	0003      	movs	r3, r0
}
 8009b6c:	0018      	movs	r0, r3
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	b002      	add	sp, #8
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d101      	bne.n	8009b86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	e061      	b.n	8009c4a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a32      	ldr	r2, [pc, #200]	@ (8009c54 <HAL_DMA_Init+0xe0>)
 8009b8c:	4694      	mov	ip, r2
 8009b8e:	4463      	add	r3, ip
 8009b90:	2114      	movs	r1, #20
 8009b92:	0018      	movs	r0, r3
 8009b94:	f7f6 fad4 	bl	8000140 <__udivsi3>
 8009b98:	0003      	movs	r3, r0
 8009b9a:	009a      	lsls	r2, r3, #2
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4a2d      	ldr	r2, [pc, #180]	@ (8009c58 <HAL_DMA_Init+0xe4>)
 8009ba4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2225      	movs	r2, #37	@ 0x25
 8009baa:	2102      	movs	r1, #2
 8009bac:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	4a28      	ldr	r2, [pc, #160]	@ (8009c5c <HAL_DMA_Init+0xe8>)
 8009bba:	4013      	ands	r3, r2
 8009bbc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009bc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	691b      	ldr	r3, [r3, #16]
 8009bcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009bd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	699b      	ldr	r3, [r3, #24]
 8009bd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009bde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6a1b      	ldr	r3, [r3, #32]
 8009be4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	4313      	orrs	r3, r2
 8009bea:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	689a      	ldr	r2, [r3, #8]
 8009bf8:	2380      	movs	r3, #128	@ 0x80
 8009bfa:	01db      	lsls	r3, r3, #7
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d018      	beq.n	8009c32 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009c00:	4b17      	ldr	r3, [pc, #92]	@ (8009c60 <HAL_DMA_Init+0xec>)
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c08:	211c      	movs	r1, #28
 8009c0a:	400b      	ands	r3, r1
 8009c0c:	210f      	movs	r1, #15
 8009c0e:	4099      	lsls	r1, r3
 8009c10:	000b      	movs	r3, r1
 8009c12:	43d9      	mvns	r1, r3
 8009c14:	4b12      	ldr	r3, [pc, #72]	@ (8009c60 <HAL_DMA_Init+0xec>)
 8009c16:	400a      	ands	r2, r1
 8009c18:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009c1a:	4b11      	ldr	r3, [pc, #68]	@ (8009c60 <HAL_DMA_Init+0xec>)
 8009c1c:	6819      	ldr	r1, [r3, #0]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	685a      	ldr	r2, [r3, #4]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c26:	201c      	movs	r0, #28
 8009c28:	4003      	ands	r3, r0
 8009c2a:	409a      	lsls	r2, r3
 8009c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8009c60 <HAL_DMA_Init+0xec>)
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2225      	movs	r2, #37	@ 0x25
 8009c3c:	2101      	movs	r1, #1
 8009c3e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2224      	movs	r2, #36	@ 0x24
 8009c44:	2100      	movs	r1, #0
 8009c46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	0018      	movs	r0, r3
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	b004      	add	sp, #16
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	46c0      	nop			@ (mov r8, r8)
 8009c54:	bffdfff8 	.word	0xbffdfff8
 8009c58:	40020000 	.word	0x40020000
 8009c5c:	ffff800f 	.word	0xffff800f
 8009c60:	400200a8 	.word	0x400200a8

08009c64 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d101      	bne.n	8009c76 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8009c72:	2301      	movs	r3, #1
 8009c74:	e04a      	b.n	8009d0c <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2101      	movs	r1, #1
 8009c82:	438a      	bics	r2, r1
 8009c84:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a22      	ldr	r2, [pc, #136]	@ (8009d14 <HAL_DMA_DeInit+0xb0>)
 8009c8c:	4694      	mov	ip, r2
 8009c8e:	4463      	add	r3, ip
 8009c90:	2114      	movs	r1, #20
 8009c92:	0018      	movs	r0, r3
 8009c94:	f7f6 fa54 	bl	8000140 <__udivsi3>
 8009c98:	0003      	movs	r3, r0
 8009c9a:	009a      	lsls	r2, r3, #2
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4a1d      	ldr	r2, [pc, #116]	@ (8009d18 <HAL_DMA_DeInit+0xb4>)
 8009ca4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2200      	movs	r2, #0
 8009cac:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cb2:	221c      	movs	r2, #28
 8009cb4:	401a      	ands	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cba:	2101      	movs	r1, #1
 8009cbc:	4091      	lsls	r1, r2
 8009cbe:	000a      	movs	r2, r1
 8009cc0:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009cc2:	4b16      	ldr	r3, [pc, #88]	@ (8009d1c <HAL_DMA_DeInit+0xb8>)
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cca:	211c      	movs	r1, #28
 8009ccc:	400b      	ands	r3, r1
 8009cce:	210f      	movs	r1, #15
 8009cd0:	4099      	lsls	r1, r3
 8009cd2:	000b      	movs	r3, r1
 8009cd4:	43d9      	mvns	r1, r3
 8009cd6:	4b11      	ldr	r3, [pc, #68]	@ (8009d1c <HAL_DMA_DeInit+0xb8>)
 8009cd8:	400a      	ands	r2, r1
 8009cda:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2225      	movs	r2, #37	@ 0x25
 8009cfe:	2100      	movs	r1, #0
 8009d00:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2224      	movs	r2, #36	@ 0x24
 8009d06:	2100      	movs	r1, #0
 8009d08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009d0a:	2300      	movs	r3, #0
}
 8009d0c:	0018      	movs	r0, r3
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	b002      	add	sp, #8
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	bffdfff8 	.word	0xbffdfff8
 8009d18:	40020000 	.word	0x40020000
 8009d1c:	400200a8 	.word	0x400200a8

08009d20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b086      	sub	sp, #24
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
 8009d2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d2e:	2317      	movs	r3, #23
 8009d30:	18fb      	adds	r3, r7, r3
 8009d32:	2200      	movs	r2, #0
 8009d34:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2224      	movs	r2, #36	@ 0x24
 8009d3a:	5c9b      	ldrb	r3, [r3, r2]
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d101      	bne.n	8009d44 <HAL_DMA_Start_IT+0x24>
 8009d40:	2302      	movs	r3, #2
 8009d42:	e04f      	b.n	8009de4 <HAL_DMA_Start_IT+0xc4>
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2224      	movs	r2, #36	@ 0x24
 8009d48:	2101      	movs	r1, #1
 8009d4a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2225      	movs	r2, #37	@ 0x25
 8009d50:	5c9b      	ldrb	r3, [r3, r2]
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d13a      	bne.n	8009dce <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2225      	movs	r2, #37	@ 0x25
 8009d5c:	2102      	movs	r1, #2
 8009d5e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2200      	movs	r2, #0
 8009d64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2101      	movs	r1, #1
 8009d72:	438a      	bics	r2, r1
 8009d74:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	68b9      	ldr	r1, [r7, #8]
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f000 f976 	bl	800a06e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d008      	beq.n	8009d9c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	210e      	movs	r1, #14
 8009d96:	430a      	orrs	r2, r1
 8009d98:	601a      	str	r2, [r3, #0]
 8009d9a:	e00f      	b.n	8009dbc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2104      	movs	r1, #4
 8009da8:	438a      	bics	r2, r1
 8009daa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	210a      	movs	r1, #10
 8009db8:	430a      	orrs	r2, r1
 8009dba:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	2101      	movs	r1, #1
 8009dc8:	430a      	orrs	r2, r1
 8009dca:	601a      	str	r2, [r3, #0]
 8009dcc:	e007      	b.n	8009dde <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2224      	movs	r2, #36	@ 0x24
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8009dd6:	2317      	movs	r3, #23
 8009dd8:	18fb      	adds	r3, r7, r3
 8009dda:	2202      	movs	r2, #2
 8009ddc:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8009dde:	2317      	movs	r3, #23
 8009de0:	18fb      	adds	r3, r7, r3
 8009de2:	781b      	ldrb	r3, [r3, #0]
}
 8009de4:	0018      	movs	r0, r3
 8009de6:	46bd      	mov	sp, r7
 8009de8:	b006      	add	sp, #24
 8009dea:	bd80      	pop	{r7, pc}

08009dec <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009df4:	230f      	movs	r3, #15
 8009df6:	18fb      	adds	r3, r7, r3
 8009df8:	2200      	movs	r2, #0
 8009dfa:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2225      	movs	r2, #37	@ 0x25
 8009e00:	5c9b      	ldrb	r3, [r3, r2]
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	2b02      	cmp	r3, #2
 8009e06:	d008      	beq.n	8009e1a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2204      	movs	r2, #4
 8009e0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2224      	movs	r2, #36	@ 0x24
 8009e12:	2100      	movs	r1, #0
 8009e14:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e024      	b.n	8009e64 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	210e      	movs	r1, #14
 8009e26:	438a      	bics	r2, r1
 8009e28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2101      	movs	r1, #1
 8009e36:	438a      	bics	r2, r1
 8009e38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e3e:	221c      	movs	r2, #28
 8009e40:	401a      	ands	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e46:	2101      	movs	r1, #1
 8009e48:	4091      	lsls	r1, r2
 8009e4a:	000a      	movs	r2, r1
 8009e4c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2225      	movs	r2, #37	@ 0x25
 8009e52:	2101      	movs	r1, #1
 8009e54:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2224      	movs	r2, #36	@ 0x24
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	5499      	strb	r1, [r3, r2]

    return status;
 8009e5e:	230f      	movs	r3, #15
 8009e60:	18fb      	adds	r3, r7, r3
 8009e62:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009e64:	0018      	movs	r0, r3
 8009e66:	46bd      	mov	sp, r7
 8009e68:	b004      	add	sp, #16
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e74:	210f      	movs	r1, #15
 8009e76:	187b      	adds	r3, r7, r1
 8009e78:	2200      	movs	r2, #0
 8009e7a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2225      	movs	r2, #37	@ 0x25
 8009e80:	5c9b      	ldrb	r3, [r3, r2]
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	2b02      	cmp	r3, #2
 8009e86:	d006      	beq.n	8009e96 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2204      	movs	r2, #4
 8009e8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8009e8e:	187b      	adds	r3, r7, r1
 8009e90:	2201      	movs	r2, #1
 8009e92:	701a      	strb	r2, [r3, #0]
 8009e94:	e02a      	b.n	8009eec <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	210e      	movs	r1, #14
 8009ea2:	438a      	bics	r2, r1
 8009ea4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2101      	movs	r1, #1
 8009eb2:	438a      	bics	r2, r1
 8009eb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eba:	221c      	movs	r2, #28
 8009ebc:	401a      	ands	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ec2:	2101      	movs	r1, #1
 8009ec4:	4091      	lsls	r1, r2
 8009ec6:	000a      	movs	r2, r1
 8009ec8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2225      	movs	r2, #37	@ 0x25
 8009ece:	2101      	movs	r1, #1
 8009ed0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2224      	movs	r2, #36	@ 0x24
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d004      	beq.n	8009eec <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	0010      	movs	r0, r2
 8009eea:	4798      	blx	r3
    }
  }
  return status;
 8009eec:	230f      	movs	r3, #15
 8009eee:	18fb      	adds	r3, r7, r3
 8009ef0:	781b      	ldrb	r3, [r3, #0]
}
 8009ef2:	0018      	movs	r0, r3
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	b004      	add	sp, #16
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b084      	sub	sp, #16
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f16:	221c      	movs	r2, #28
 8009f18:	4013      	ands	r3, r2
 8009f1a:	2204      	movs	r2, #4
 8009f1c:	409a      	lsls	r2, r3
 8009f1e:	0013      	movs	r3, r2
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	4013      	ands	r3, r2
 8009f24:	d026      	beq.n	8009f74 <HAL_DMA_IRQHandler+0x7a>
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	2204      	movs	r2, #4
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	d022      	beq.n	8009f74 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	2220      	movs	r2, #32
 8009f36:	4013      	ands	r3, r2
 8009f38:	d107      	bne.n	8009f4a <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	681a      	ldr	r2, [r3, #0]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2104      	movs	r1, #4
 8009f46:	438a      	bics	r2, r1
 8009f48:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f4e:	221c      	movs	r2, #28
 8009f50:	401a      	ands	r2, r3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f56:	2104      	movs	r1, #4
 8009f58:	4091      	lsls	r1, r2
 8009f5a:	000a      	movs	r2, r1
 8009f5c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d100      	bne.n	8009f68 <HAL_DMA_IRQHandler+0x6e>
 8009f66:	e071      	b.n	800a04c <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	0010      	movs	r0, r2
 8009f70:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8009f72:	e06b      	b.n	800a04c <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f78:	221c      	movs	r2, #28
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	2202      	movs	r2, #2
 8009f7e:	409a      	lsls	r2, r3
 8009f80:	0013      	movs	r3, r2
 8009f82:	68fa      	ldr	r2, [r7, #12]
 8009f84:	4013      	ands	r3, r2
 8009f86:	d02d      	beq.n	8009fe4 <HAL_DMA_IRQHandler+0xea>
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	2202      	movs	r2, #2
 8009f8c:	4013      	ands	r3, r2
 8009f8e:	d029      	beq.n	8009fe4 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	2220      	movs	r2, #32
 8009f98:	4013      	ands	r3, r2
 8009f9a:	d10b      	bne.n	8009fb4 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	210a      	movs	r1, #10
 8009fa8:	438a      	bics	r2, r1
 8009faa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2225      	movs	r2, #37	@ 0x25
 8009fb0:	2101      	movs	r1, #1
 8009fb2:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fb8:	221c      	movs	r2, #28
 8009fba:	401a      	ands	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fc0:	2102      	movs	r1, #2
 8009fc2:	4091      	lsls	r1, r2
 8009fc4:	000a      	movs	r2, r1
 8009fc6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2224      	movs	r2, #36	@ 0x24
 8009fcc:	2100      	movs	r1, #0
 8009fce:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d039      	beq.n	800a04c <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	0010      	movs	r0, r2
 8009fe0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8009fe2:	e033      	b.n	800a04c <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fe8:	221c      	movs	r2, #28
 8009fea:	4013      	ands	r3, r2
 8009fec:	2208      	movs	r2, #8
 8009fee:	409a      	lsls	r2, r3
 8009ff0:	0013      	movs	r3, r2
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	4013      	ands	r3, r2
 8009ff6:	d02a      	beq.n	800a04e <HAL_DMA_IRQHandler+0x154>
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	2208      	movs	r2, #8
 8009ffc:	4013      	ands	r3, r2
 8009ffe:	d026      	beq.n	800a04e <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	210e      	movs	r1, #14
 800a00c:	438a      	bics	r2, r1
 800a00e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a014:	221c      	movs	r2, #28
 800a016:	401a      	ands	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a01c:	2101      	movs	r1, #1
 800a01e:	4091      	lsls	r1, r2
 800a020:	000a      	movs	r2, r1
 800a022:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2225      	movs	r2, #37	@ 0x25
 800a02e:	2101      	movs	r1, #1
 800a030:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2224      	movs	r2, #36	@ 0x24
 800a036:	2100      	movs	r1, #0
 800a038:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d005      	beq.n	800a04e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	0010      	movs	r0, r2
 800a04a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a04c:	46c0      	nop			@ (mov r8, r8)
 800a04e:	46c0      	nop			@ (mov r8, r8)
}
 800a050:	46bd      	mov	sp, r7
 800a052:	b004      	add	sp, #16
 800a054:	bd80      	pop	{r7, pc}

0800a056 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b082      	sub	sp, #8
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2225      	movs	r2, #37	@ 0x25
 800a062:	5c9b      	ldrb	r3, [r3, r2]
 800a064:	b2db      	uxtb	r3, r3
}
 800a066:	0018      	movs	r0, r3
 800a068:	46bd      	mov	sp, r7
 800a06a:	b002      	add	sp, #8
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a06e:	b580      	push	{r7, lr}
 800a070:	b084      	sub	sp, #16
 800a072:	af00      	add	r7, sp, #0
 800a074:	60f8      	str	r0, [r7, #12]
 800a076:	60b9      	str	r1, [r7, #8]
 800a078:	607a      	str	r2, [r7, #4]
 800a07a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a080:	221c      	movs	r2, #28
 800a082:	401a      	ands	r2, r3
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a088:	2101      	movs	r1, #1
 800a08a:	4091      	lsls	r1, r2
 800a08c:	000a      	movs	r2, r1
 800a08e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	683a      	ldr	r2, [r7, #0]
 800a096:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	2b10      	cmp	r3, #16
 800a09e:	d108      	bne.n	800a0b2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	68ba      	ldr	r2, [r7, #8]
 800a0ae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a0b0:	e007      	b.n	800a0c2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	68ba      	ldr	r2, [r7, #8]
 800a0b8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	60da      	str	r2, [r3, #12]
}
 800a0c2:	46c0      	nop			@ (mov r8, r8)
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	b004      	add	sp, #16
 800a0c8:	bd80      	pop	{r7, pc}
	...

0800a0cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b086      	sub	sp, #24
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800a0e2:	e155      	b.n	800a390 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	2101      	movs	r1, #1
 800a0ea:	697a      	ldr	r2, [r7, #20]
 800a0ec:	4091      	lsls	r1, r2
 800a0ee:	000a      	movs	r2, r1
 800a0f0:	4013      	ands	r3, r2
 800a0f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d100      	bne.n	800a0fc <HAL_GPIO_Init+0x30>
 800a0fa:	e146      	b.n	800a38a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	2203      	movs	r2, #3
 800a102:	4013      	ands	r3, r2
 800a104:	2b01      	cmp	r3, #1
 800a106:	d005      	beq.n	800a114 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	2203      	movs	r2, #3
 800a10e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a110:	2b02      	cmp	r3, #2
 800a112:	d130      	bne.n	800a176 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	005b      	lsls	r3, r3, #1
 800a11e:	2203      	movs	r2, #3
 800a120:	409a      	lsls	r2, r3
 800a122:	0013      	movs	r3, r2
 800a124:	43da      	mvns	r2, r3
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	4013      	ands	r3, r2
 800a12a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	68da      	ldr	r2, [r3, #12]
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	005b      	lsls	r3, r3, #1
 800a134:	409a      	lsls	r2, r3
 800a136:	0013      	movs	r3, r2
 800a138:	693a      	ldr	r2, [r7, #16]
 800a13a:	4313      	orrs	r3, r2
 800a13c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a14a:	2201      	movs	r2, #1
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	409a      	lsls	r2, r3
 800a150:	0013      	movs	r3, r2
 800a152:	43da      	mvns	r2, r3
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	4013      	ands	r3, r2
 800a158:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	091b      	lsrs	r3, r3, #4
 800a160:	2201      	movs	r2, #1
 800a162:	401a      	ands	r2, r3
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	409a      	lsls	r2, r3
 800a168:	0013      	movs	r3, r2
 800a16a:	693a      	ldr	r2, [r7, #16]
 800a16c:	4313      	orrs	r3, r2
 800a16e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	693a      	ldr	r2, [r7, #16]
 800a174:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	2203      	movs	r2, #3
 800a17c:	4013      	ands	r3, r2
 800a17e:	2b03      	cmp	r3, #3
 800a180:	d017      	beq.n	800a1b2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	005b      	lsls	r3, r3, #1
 800a18c:	2203      	movs	r2, #3
 800a18e:	409a      	lsls	r2, r3
 800a190:	0013      	movs	r3, r2
 800a192:	43da      	mvns	r2, r3
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	4013      	ands	r3, r2
 800a198:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	689a      	ldr	r2, [r3, #8]
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	005b      	lsls	r3, r3, #1
 800a1a2:	409a      	lsls	r2, r3
 800a1a4:	0013      	movs	r3, r2
 800a1a6:	693a      	ldr	r2, [r7, #16]
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	693a      	ldr	r2, [r7, #16]
 800a1b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	2203      	movs	r2, #3
 800a1b8:	4013      	ands	r3, r2
 800a1ba:	2b02      	cmp	r3, #2
 800a1bc:	d123      	bne.n	800a206 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	08da      	lsrs	r2, r3, #3
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	3208      	adds	r2, #8
 800a1c6:	0092      	lsls	r2, r2, #2
 800a1c8:	58d3      	ldr	r3, [r2, r3]
 800a1ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	2207      	movs	r2, #7
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	220f      	movs	r2, #15
 800a1d6:	409a      	lsls	r2, r3
 800a1d8:	0013      	movs	r3, r2
 800a1da:	43da      	mvns	r2, r3
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	4013      	ands	r3, r2
 800a1e0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	691a      	ldr	r2, [r3, #16]
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	2107      	movs	r1, #7
 800a1ea:	400b      	ands	r3, r1
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	409a      	lsls	r2, r3
 800a1f0:	0013      	movs	r3, r2
 800a1f2:	693a      	ldr	r2, [r7, #16]
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	08da      	lsrs	r2, r3, #3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	3208      	adds	r2, #8
 800a200:	0092      	lsls	r2, r2, #2
 800a202:	6939      	ldr	r1, [r7, #16]
 800a204:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	005b      	lsls	r3, r3, #1
 800a210:	2203      	movs	r2, #3
 800a212:	409a      	lsls	r2, r3
 800a214:	0013      	movs	r3, r2
 800a216:	43da      	mvns	r2, r3
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	4013      	ands	r3, r2
 800a21c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	2203      	movs	r2, #3
 800a224:	401a      	ands	r2, r3
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	005b      	lsls	r3, r3, #1
 800a22a:	409a      	lsls	r2, r3
 800a22c:	0013      	movs	r3, r2
 800a22e:	693a      	ldr	r2, [r7, #16]
 800a230:	4313      	orrs	r3, r2
 800a232:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	693a      	ldr	r2, [r7, #16]
 800a238:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	685a      	ldr	r2, [r3, #4]
 800a23e:	23c0      	movs	r3, #192	@ 0xc0
 800a240:	029b      	lsls	r3, r3, #10
 800a242:	4013      	ands	r3, r2
 800a244:	d100      	bne.n	800a248 <HAL_GPIO_Init+0x17c>
 800a246:	e0a0      	b.n	800a38a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a248:	4b57      	ldr	r3, [pc, #348]	@ (800a3a8 <HAL_GPIO_Init+0x2dc>)
 800a24a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a24c:	4b56      	ldr	r3, [pc, #344]	@ (800a3a8 <HAL_GPIO_Init+0x2dc>)
 800a24e:	2101      	movs	r1, #1
 800a250:	430a      	orrs	r2, r1
 800a252:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800a254:	4a55      	ldr	r2, [pc, #340]	@ (800a3ac <HAL_GPIO_Init+0x2e0>)
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	089b      	lsrs	r3, r3, #2
 800a25a:	3302      	adds	r3, #2
 800a25c:	009b      	lsls	r3, r3, #2
 800a25e:	589b      	ldr	r3, [r3, r2]
 800a260:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	2203      	movs	r2, #3
 800a266:	4013      	ands	r3, r2
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	220f      	movs	r2, #15
 800a26c:	409a      	lsls	r2, r3
 800a26e:	0013      	movs	r3, r2
 800a270:	43da      	mvns	r2, r3
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	4013      	ands	r3, r2
 800a276:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	23a0      	movs	r3, #160	@ 0xa0
 800a27c:	05db      	lsls	r3, r3, #23
 800a27e:	429a      	cmp	r2, r3
 800a280:	d01f      	beq.n	800a2c2 <HAL_GPIO_Init+0x1f6>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a4a      	ldr	r2, [pc, #296]	@ (800a3b0 <HAL_GPIO_Init+0x2e4>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d019      	beq.n	800a2be <HAL_GPIO_Init+0x1f2>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4a49      	ldr	r2, [pc, #292]	@ (800a3b4 <HAL_GPIO_Init+0x2e8>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d013      	beq.n	800a2ba <HAL_GPIO_Init+0x1ee>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4a48      	ldr	r2, [pc, #288]	@ (800a3b8 <HAL_GPIO_Init+0x2ec>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d00d      	beq.n	800a2b6 <HAL_GPIO_Init+0x1ea>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	4a47      	ldr	r2, [pc, #284]	@ (800a3bc <HAL_GPIO_Init+0x2f0>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d007      	beq.n	800a2b2 <HAL_GPIO_Init+0x1e6>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4a46      	ldr	r2, [pc, #280]	@ (800a3c0 <HAL_GPIO_Init+0x2f4>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d101      	bne.n	800a2ae <HAL_GPIO_Init+0x1e2>
 800a2aa:	2305      	movs	r3, #5
 800a2ac:	e00a      	b.n	800a2c4 <HAL_GPIO_Init+0x1f8>
 800a2ae:	2306      	movs	r3, #6
 800a2b0:	e008      	b.n	800a2c4 <HAL_GPIO_Init+0x1f8>
 800a2b2:	2304      	movs	r3, #4
 800a2b4:	e006      	b.n	800a2c4 <HAL_GPIO_Init+0x1f8>
 800a2b6:	2303      	movs	r3, #3
 800a2b8:	e004      	b.n	800a2c4 <HAL_GPIO_Init+0x1f8>
 800a2ba:	2302      	movs	r3, #2
 800a2bc:	e002      	b.n	800a2c4 <HAL_GPIO_Init+0x1f8>
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e000      	b.n	800a2c4 <HAL_GPIO_Init+0x1f8>
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	697a      	ldr	r2, [r7, #20]
 800a2c6:	2103      	movs	r1, #3
 800a2c8:	400a      	ands	r2, r1
 800a2ca:	0092      	lsls	r2, r2, #2
 800a2cc:	4093      	lsls	r3, r2
 800a2ce:	693a      	ldr	r2, [r7, #16]
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a2d4:	4935      	ldr	r1, [pc, #212]	@ (800a3ac <HAL_GPIO_Init+0x2e0>)
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	089b      	lsrs	r3, r3, #2
 800a2da:	3302      	adds	r3, #2
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	693a      	ldr	r2, [r7, #16]
 800a2e0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a2e2:	4b38      	ldr	r3, [pc, #224]	@ (800a3c4 <HAL_GPIO_Init+0x2f8>)
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	43da      	mvns	r2, r3
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	4013      	ands	r3, r2
 800a2f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	685a      	ldr	r2, [r3, #4]
 800a2f6:	2380      	movs	r3, #128	@ 0x80
 800a2f8:	035b      	lsls	r3, r3, #13
 800a2fa:	4013      	ands	r3, r2
 800a2fc:	d003      	beq.n	800a306 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800a2fe:	693a      	ldr	r2, [r7, #16]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	4313      	orrs	r3, r2
 800a304:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800a306:	4b2f      	ldr	r3, [pc, #188]	@ (800a3c4 <HAL_GPIO_Init+0x2f8>)
 800a308:	693a      	ldr	r2, [r7, #16]
 800a30a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800a30c:	4b2d      	ldr	r3, [pc, #180]	@ (800a3c4 <HAL_GPIO_Init+0x2f8>)
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	43da      	mvns	r2, r3
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	4013      	ands	r3, r2
 800a31a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	685a      	ldr	r2, [r3, #4]
 800a320:	2380      	movs	r3, #128	@ 0x80
 800a322:	039b      	lsls	r3, r3, #14
 800a324:	4013      	ands	r3, r2
 800a326:	d003      	beq.n	800a330 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800a328:	693a      	ldr	r2, [r7, #16]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	4313      	orrs	r3, r2
 800a32e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800a330:	4b24      	ldr	r3, [pc, #144]	@ (800a3c4 <HAL_GPIO_Init+0x2f8>)
 800a332:	693a      	ldr	r2, [r7, #16]
 800a334:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800a336:	4b23      	ldr	r3, [pc, #140]	@ (800a3c4 <HAL_GPIO_Init+0x2f8>)
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	43da      	mvns	r2, r3
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	4013      	ands	r3, r2
 800a344:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	685a      	ldr	r2, [r3, #4]
 800a34a:	2380      	movs	r3, #128	@ 0x80
 800a34c:	029b      	lsls	r3, r3, #10
 800a34e:	4013      	ands	r3, r2
 800a350:	d003      	beq.n	800a35a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800a352:	693a      	ldr	r2, [r7, #16]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	4313      	orrs	r3, r2
 800a358:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800a35a:	4b1a      	ldr	r3, [pc, #104]	@ (800a3c4 <HAL_GPIO_Init+0x2f8>)
 800a35c:	693a      	ldr	r2, [r7, #16]
 800a35e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a360:	4b18      	ldr	r3, [pc, #96]	@ (800a3c4 <HAL_GPIO_Init+0x2f8>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	43da      	mvns	r2, r3
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	4013      	ands	r3, r2
 800a36e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	685a      	ldr	r2, [r3, #4]
 800a374:	2380      	movs	r3, #128	@ 0x80
 800a376:	025b      	lsls	r3, r3, #9
 800a378:	4013      	ands	r3, r2
 800a37a:	d003      	beq.n	800a384 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800a37c:	693a      	ldr	r2, [r7, #16]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	4313      	orrs	r3, r2
 800a382:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800a384:	4b0f      	ldr	r3, [pc, #60]	@ (800a3c4 <HAL_GPIO_Init+0x2f8>)
 800a386:	693a      	ldr	r2, [r7, #16]
 800a388:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	3301      	adds	r3, #1
 800a38e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	40da      	lsrs	r2, r3
 800a398:	1e13      	subs	r3, r2, #0
 800a39a:	d000      	beq.n	800a39e <HAL_GPIO_Init+0x2d2>
 800a39c:	e6a2      	b.n	800a0e4 <HAL_GPIO_Init+0x18>
  }
}
 800a39e:	46c0      	nop			@ (mov r8, r8)
 800a3a0:	46c0      	nop			@ (mov r8, r8)
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	b006      	add	sp, #24
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	40021000 	.word	0x40021000
 800a3ac:	40010000 	.word	0x40010000
 800a3b0:	50000400 	.word	0x50000400
 800a3b4:	50000800 	.word	0x50000800
 800a3b8:	50000c00 	.word	0x50000c00
 800a3bc:	50001000 	.word	0x50001000
 800a3c0:	50001c00 	.word	0x50001c00
 800a3c4:	40010400 	.word	0x40010400

0800a3c8 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b086      	sub	sp, #24
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800a3de:	e0bc      	b.n	800a55a <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	409a      	lsls	r2, r3
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d100      	bne.n	800a3f4 <HAL_GPIO_DeInit+0x2c>
 800a3f2:	e0af      	b.n	800a554 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800a3f4:	4a5e      	ldr	r2, [pc, #376]	@ (800a570 <HAL_GPIO_DeInit+0x1a8>)
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	089b      	lsrs	r3, r3, #2
 800a3fa:	3302      	adds	r3, #2
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	589b      	ldr	r3, [r3, r2]
 800a400:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	2203      	movs	r2, #3
 800a406:	4013      	ands	r3, r2
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	220f      	movs	r2, #15
 800a40c:	409a      	lsls	r2, r3
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	4013      	ands	r3, r2
 800a412:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	23a0      	movs	r3, #160	@ 0xa0
 800a418:	05db      	lsls	r3, r3, #23
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d01f      	beq.n	800a45e <HAL_GPIO_DeInit+0x96>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a54      	ldr	r2, [pc, #336]	@ (800a574 <HAL_GPIO_DeInit+0x1ac>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d019      	beq.n	800a45a <HAL_GPIO_DeInit+0x92>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a53      	ldr	r2, [pc, #332]	@ (800a578 <HAL_GPIO_DeInit+0x1b0>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d013      	beq.n	800a456 <HAL_GPIO_DeInit+0x8e>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a52      	ldr	r2, [pc, #328]	@ (800a57c <HAL_GPIO_DeInit+0x1b4>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d00d      	beq.n	800a452 <HAL_GPIO_DeInit+0x8a>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a51      	ldr	r2, [pc, #324]	@ (800a580 <HAL_GPIO_DeInit+0x1b8>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d007      	beq.n	800a44e <HAL_GPIO_DeInit+0x86>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a50      	ldr	r2, [pc, #320]	@ (800a584 <HAL_GPIO_DeInit+0x1bc>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d101      	bne.n	800a44a <HAL_GPIO_DeInit+0x82>
 800a446:	2305      	movs	r3, #5
 800a448:	e00a      	b.n	800a460 <HAL_GPIO_DeInit+0x98>
 800a44a:	2306      	movs	r3, #6
 800a44c:	e008      	b.n	800a460 <HAL_GPIO_DeInit+0x98>
 800a44e:	2304      	movs	r3, #4
 800a450:	e006      	b.n	800a460 <HAL_GPIO_DeInit+0x98>
 800a452:	2303      	movs	r3, #3
 800a454:	e004      	b.n	800a460 <HAL_GPIO_DeInit+0x98>
 800a456:	2302      	movs	r3, #2
 800a458:	e002      	b.n	800a460 <HAL_GPIO_DeInit+0x98>
 800a45a:	2301      	movs	r3, #1
 800a45c:	e000      	b.n	800a460 <HAL_GPIO_DeInit+0x98>
 800a45e:	2300      	movs	r3, #0
 800a460:	697a      	ldr	r2, [r7, #20]
 800a462:	2103      	movs	r1, #3
 800a464:	400a      	ands	r2, r1
 800a466:	0092      	lsls	r2, r2, #2
 800a468:	4093      	lsls	r3, r2
 800a46a:	68fa      	ldr	r2, [r7, #12]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d132      	bne.n	800a4d6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a470:	4b45      	ldr	r3, [pc, #276]	@ (800a588 <HAL_GPIO_DeInit+0x1c0>)
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	43d9      	mvns	r1, r3
 800a478:	4b43      	ldr	r3, [pc, #268]	@ (800a588 <HAL_GPIO_DeInit+0x1c0>)
 800a47a:	400a      	ands	r2, r1
 800a47c:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a47e:	4b42      	ldr	r3, [pc, #264]	@ (800a588 <HAL_GPIO_DeInit+0x1c0>)
 800a480:	685a      	ldr	r2, [r3, #4]
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	43d9      	mvns	r1, r3
 800a486:	4b40      	ldr	r3, [pc, #256]	@ (800a588 <HAL_GPIO_DeInit+0x1c0>)
 800a488:	400a      	ands	r2, r1
 800a48a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a48c:	4b3e      	ldr	r3, [pc, #248]	@ (800a588 <HAL_GPIO_DeInit+0x1c0>)
 800a48e:	68da      	ldr	r2, [r3, #12]
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	43d9      	mvns	r1, r3
 800a494:	4b3c      	ldr	r3, [pc, #240]	@ (800a588 <HAL_GPIO_DeInit+0x1c0>)
 800a496:	400a      	ands	r2, r1
 800a498:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a49a:	4b3b      	ldr	r3, [pc, #236]	@ (800a588 <HAL_GPIO_DeInit+0x1c0>)
 800a49c:	689a      	ldr	r2, [r3, #8]
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	43d9      	mvns	r1, r3
 800a4a2:	4b39      	ldr	r3, [pc, #228]	@ (800a588 <HAL_GPIO_DeInit+0x1c0>)
 800a4a4:	400a      	ands	r2, r1
 800a4a6:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	2203      	movs	r2, #3
 800a4ac:	4013      	ands	r3, r2
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	220f      	movs	r2, #15
 800a4b2:	409a      	lsls	r2, r3
 800a4b4:	0013      	movs	r3, r2
 800a4b6:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a4b8:	4a2d      	ldr	r2, [pc, #180]	@ (800a570 <HAL_GPIO_DeInit+0x1a8>)
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	089b      	lsrs	r3, r3, #2
 800a4be:	3302      	adds	r3, #2
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	589a      	ldr	r2, [r3, r2]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	43d9      	mvns	r1, r3
 800a4c8:	4829      	ldr	r0, [pc, #164]	@ (800a570 <HAL_GPIO_DeInit+0x1a8>)
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	089b      	lsrs	r3, r3, #2
 800a4ce:	400a      	ands	r2, r1
 800a4d0:	3302      	adds	r3, #2
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	005b      	lsls	r3, r3, #1
 800a4de:	2103      	movs	r1, #3
 800a4e0:	4099      	lsls	r1, r3
 800a4e2:	000b      	movs	r3, r1
 800a4e4:	431a      	orrs	r2, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	08da      	lsrs	r2, r3, #3
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	3208      	adds	r2, #8
 800a4f2:	0092      	lsls	r2, r2, #2
 800a4f4:	58d3      	ldr	r3, [r2, r3]
 800a4f6:	697a      	ldr	r2, [r7, #20]
 800a4f8:	2107      	movs	r1, #7
 800a4fa:	400a      	ands	r2, r1
 800a4fc:	0092      	lsls	r2, r2, #2
 800a4fe:	210f      	movs	r1, #15
 800a500:	4091      	lsls	r1, r2
 800a502:	000a      	movs	r2, r1
 800a504:	43d1      	mvns	r1, r2
 800a506:	697a      	ldr	r2, [r7, #20]
 800a508:	08d2      	lsrs	r2, r2, #3
 800a50a:	4019      	ands	r1, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	3208      	adds	r2, #8
 800a510:	0092      	lsls	r2, r2, #2
 800a512:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	697a      	ldr	r2, [r7, #20]
 800a51a:	0052      	lsls	r2, r2, #1
 800a51c:	2103      	movs	r1, #3
 800a51e:	4091      	lsls	r1, r2
 800a520:	000a      	movs	r2, r1
 800a522:	43d2      	mvns	r2, r2
 800a524:	401a      	ands	r2, r3
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	2101      	movs	r1, #1
 800a530:	697a      	ldr	r2, [r7, #20]
 800a532:	4091      	lsls	r1, r2
 800a534:	000a      	movs	r2, r1
 800a536:	43d2      	mvns	r2, r2
 800a538:	401a      	ands	r2, r3
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	697a      	ldr	r2, [r7, #20]
 800a544:	0052      	lsls	r2, r2, #1
 800a546:	2103      	movs	r1, #3
 800a548:	4091      	lsls	r1, r2
 800a54a:	000a      	movs	r2, r1
 800a54c:	43d2      	mvns	r2, r2
 800a54e:	401a      	ands	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	609a      	str	r2, [r3, #8]
    }
    position++;
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	3301      	adds	r3, #1
 800a558:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800a55a:	683a      	ldr	r2, [r7, #0]
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	40da      	lsrs	r2, r3
 800a560:	1e13      	subs	r3, r2, #0
 800a562:	d000      	beq.n	800a566 <HAL_GPIO_DeInit+0x19e>
 800a564:	e73c      	b.n	800a3e0 <HAL_GPIO_DeInit+0x18>
  }
}
 800a566:	46c0      	nop			@ (mov r8, r8)
 800a568:	46c0      	nop			@ (mov r8, r8)
 800a56a:	46bd      	mov	sp, r7
 800a56c:	b006      	add	sp, #24
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	40010000 	.word	0x40010000
 800a574:	50000400 	.word	0x50000400
 800a578:	50000800 	.word	0x50000800
 800a57c:	50000c00 	.word	0x50000c00
 800a580:	50001000 	.word	0x50001000
 800a584:	50001c00 	.word	0x50001c00
 800a588:	40010400 	.word	0x40010400

0800a58c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	0008      	movs	r0, r1
 800a596:	0011      	movs	r1, r2
 800a598:	1cbb      	adds	r3, r7, #2
 800a59a:	1c02      	adds	r2, r0, #0
 800a59c:	801a      	strh	r2, [r3, #0]
 800a59e:	1c7b      	adds	r3, r7, #1
 800a5a0:	1c0a      	adds	r2, r1, #0
 800a5a2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a5a4:	1c7b      	adds	r3, r7, #1
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d004      	beq.n	800a5b6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a5ac:	1cbb      	adds	r3, r7, #2
 800a5ae:	881a      	ldrh	r2, [r3, #0]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800a5b4:	e003      	b.n	800a5be <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800a5b6:	1cbb      	adds	r3, r7, #2
 800a5b8:	881a      	ldrh	r2, [r3, #0]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a5be:	46c0      	nop			@ (mov r8, r8)
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	b002      	add	sp, #8
 800a5c4:	bd80      	pop	{r7, pc}
	...

0800a5c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b082      	sub	sp, #8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d101      	bne.n	800a5da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e082      	b.n	800a6e0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2241      	movs	r2, #65	@ 0x41
 800a5de:	5c9b      	ldrb	r3, [r3, r2]
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d107      	bne.n	800a5f6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2240      	movs	r2, #64	@ 0x40
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	0018      	movs	r0, r3
 800a5f2:	f7fa ffbd 	bl	8005570 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2241      	movs	r2, #65	@ 0x41
 800a5fa:	2124      	movs	r1, #36	@ 0x24
 800a5fc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2101      	movs	r1, #1
 800a60a:	438a      	bics	r2, r1
 800a60c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	685a      	ldr	r2, [r3, #4]
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4934      	ldr	r1, [pc, #208]	@ (800a6e8 <HAL_I2C_Init+0x120>)
 800a618:	400a      	ands	r2, r1
 800a61a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	689a      	ldr	r2, [r3, #8]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4931      	ldr	r1, [pc, #196]	@ (800a6ec <HAL_I2C_Init+0x124>)
 800a628:	400a      	ands	r2, r1
 800a62a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	2b01      	cmp	r3, #1
 800a632:	d108      	bne.n	800a646 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	689a      	ldr	r2, [r3, #8]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2180      	movs	r1, #128	@ 0x80
 800a63e:	0209      	lsls	r1, r1, #8
 800a640:	430a      	orrs	r2, r1
 800a642:	609a      	str	r2, [r3, #8]
 800a644:	e007      	b.n	800a656 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	689a      	ldr	r2, [r3, #8]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	2184      	movs	r1, #132	@ 0x84
 800a650:	0209      	lsls	r1, r1, #8
 800a652:	430a      	orrs	r2, r1
 800a654:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	68db      	ldr	r3, [r3, #12]
 800a65a:	2b02      	cmp	r3, #2
 800a65c:	d104      	bne.n	800a668 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2280      	movs	r2, #128	@ 0x80
 800a664:	0112      	lsls	r2, r2, #4
 800a666:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	685a      	ldr	r2, [r3, #4]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	491f      	ldr	r1, [pc, #124]	@ (800a6f0 <HAL_I2C_Init+0x128>)
 800a674:	430a      	orrs	r2, r1
 800a676:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	68da      	ldr	r2, [r3, #12]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	491a      	ldr	r1, [pc, #104]	@ (800a6ec <HAL_I2C_Init+0x124>)
 800a684:	400a      	ands	r2, r1
 800a686:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	691a      	ldr	r2, [r3, #16]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	695b      	ldr	r3, [r3, #20]
 800a690:	431a      	orrs	r2, r3
 800a692:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	699b      	ldr	r3, [r3, #24]
 800a698:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	430a      	orrs	r2, r1
 800a6a0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	69d9      	ldr	r1, [r3, #28]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6a1a      	ldr	r2, [r3, #32]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	430a      	orrs	r2, r1
 800a6b0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2101      	movs	r1, #1
 800a6be:	430a      	orrs	r2, r1
 800a6c0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2241      	movs	r2, #65	@ 0x41
 800a6cc:	2120      	movs	r1, #32
 800a6ce:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2242      	movs	r2, #66	@ 0x42
 800a6da:	2100      	movs	r1, #0
 800a6dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a6de:	2300      	movs	r3, #0
}
 800a6e0:	0018      	movs	r0, r3
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	b002      	add	sp, #8
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	f0ffffff 	.word	0xf0ffffff
 800a6ec:	ffff7fff 	.word	0xffff7fff
 800a6f0:	02008000 	.word	0x02008000

0800a6f4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800a6f4:	b5b0      	push	{r4, r5, r7, lr}
 800a6f6:	b088      	sub	sp, #32
 800a6f8:	af02      	add	r7, sp, #8
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	0008      	movs	r0, r1
 800a6fe:	607a      	str	r2, [r7, #4]
 800a700:	0019      	movs	r1, r3
 800a702:	230a      	movs	r3, #10
 800a704:	18fb      	adds	r3, r7, r3
 800a706:	1c02      	adds	r2, r0, #0
 800a708:	801a      	strh	r2, [r3, #0]
 800a70a:	2308      	movs	r3, #8
 800a70c:	18fb      	adds	r3, r7, r3
 800a70e:	1c0a      	adds	r2, r1, #0
 800a710:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2241      	movs	r2, #65	@ 0x41
 800a716:	5c9b      	ldrb	r3, [r3, r2]
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	2b20      	cmp	r3, #32
 800a71c:	d000      	beq.n	800a720 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800a71e:	e0dd      	b.n	800a8dc <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	699a      	ldr	r2, [r3, #24]
 800a726:	2380      	movs	r3, #128	@ 0x80
 800a728:	021b      	lsls	r3, r3, #8
 800a72a:	401a      	ands	r2, r3
 800a72c:	2380      	movs	r3, #128	@ 0x80
 800a72e:	021b      	lsls	r3, r3, #8
 800a730:	429a      	cmp	r2, r3
 800a732:	d101      	bne.n	800a738 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800a734:	2302      	movs	r3, #2
 800a736:	e0d2      	b.n	800a8de <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2240      	movs	r2, #64	@ 0x40
 800a73c:	5c9b      	ldrb	r3, [r3, r2]
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d101      	bne.n	800a746 <HAL_I2C_Master_Transmit_DMA+0x52>
 800a742:	2302      	movs	r3, #2
 800a744:	e0cb      	b.n	800a8de <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2240      	movs	r2, #64	@ 0x40
 800a74a:	2101      	movs	r1, #1
 800a74c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2241      	movs	r2, #65	@ 0x41
 800a752:	2121      	movs	r1, #33	@ 0x21
 800a754:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2242      	movs	r2, #66	@ 0x42
 800a75a:	2110      	movs	r1, #16
 800a75c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2200      	movs	r2, #0
 800a762:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2208      	movs	r2, #8
 800a76e:	18ba      	adds	r2, r7, r2
 800a770:	8812      	ldrh	r2, [r2, #0]
 800a772:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	4a5c      	ldr	r2, [pc, #368]	@ (800a8e8 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800a778:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	4a5b      	ldr	r2, [pc, #364]	@ (800a8ec <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800a77e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a784:	b29b      	uxth	r3, r3
 800a786:	2bff      	cmp	r3, #255	@ 0xff
 800a788:	d906      	bls.n	800a798 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	22ff      	movs	r2, #255	@ 0xff
 800a78e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800a790:	2380      	movs	r3, #128	@ 0x80
 800a792:	045b      	lsls	r3, r3, #17
 800a794:	617b      	str	r3, [r7, #20]
 800a796:	e007      	b.n	800a7a8 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a79c:	b29a      	uxth	r2, r3
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a7a2:	2380      	movs	r3, #128	@ 0x80
 800a7a4:	049b      	lsls	r3, r3, #18
 800a7a6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d100      	bne.n	800a7b2 <HAL_I2C_Master_Transmit_DMA+0xbe>
 800a7b0:	e078      	b.n	800a8a4 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d023      	beq.n	800a802 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7be:	4a4c      	ldr	r2, [pc, #304]	@ (800a8f0 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800a7c0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7c6:	4a4b      	ldr	r2, [pc, #300]	@ (800a8f4 <HAL_I2C_Master_Transmit_DMA+0x200>)
 800a7c8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a7de:	6879      	ldr	r1, [r7, #4]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	3328      	adds	r3, #40	@ 0x28
 800a7e6:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800a7ec:	2513      	movs	r5, #19
 800a7ee:	197c      	adds	r4, r7, r5
 800a7f0:	f7ff fa96 	bl	8009d20 <HAL_DMA_Start_IT>
 800a7f4:	0003      	movs	r3, r0
 800a7f6:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800a7f8:	197b      	adds	r3, r7, r5
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d13d      	bne.n	800a87c <HAL_I2C_Master_Transmit_DMA+0x188>
 800a800:	e013      	b.n	800a82a <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2241      	movs	r2, #65	@ 0x41
 800a806:	2120      	movs	r1, #32
 800a808:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2242      	movs	r2, #66	@ 0x42
 800a80e:	2100      	movs	r1, #0
 800a810:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a816:	2280      	movs	r2, #128	@ 0x80
 800a818:	431a      	orrs	r2, r3
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2240      	movs	r2, #64	@ 0x40
 800a822:	2100      	movs	r1, #0
 800a824:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800a826:	2301      	movs	r3, #1
 800a828:	e059      	b.n	800a8de <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a82e:	b2da      	uxtb	r2, r3
 800a830:	697c      	ldr	r4, [r7, #20]
 800a832:	230a      	movs	r3, #10
 800a834:	18fb      	adds	r3, r7, r3
 800a836:	8819      	ldrh	r1, [r3, #0]
 800a838:	68f8      	ldr	r0, [r7, #12]
 800a83a:	4b2f      	ldr	r3, [pc, #188]	@ (800a8f8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800a83c:	9300      	str	r3, [sp, #0]
 800a83e:	0023      	movs	r3, r4
 800a840:	f001 fd0e 	bl	800c260 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a848:	b29a      	uxth	r2, r3
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a84e:	1ad3      	subs	r3, r2, r3
 800a850:	b29a      	uxth	r2, r3
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2240      	movs	r2, #64	@ 0x40
 800a85a:	2100      	movs	r1, #0
 800a85c:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2110      	movs	r1, #16
 800a862:	0018      	movs	r0, r3
 800a864:	f001 fd36 	bl	800c2d4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2180      	movs	r1, #128	@ 0x80
 800a874:	01c9      	lsls	r1, r1, #7
 800a876:	430a      	orrs	r2, r1
 800a878:	601a      	str	r2, [r3, #0]
 800a87a:	e02d      	b.n	800a8d8 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2241      	movs	r2, #65	@ 0x41
 800a880:	2120      	movs	r1, #32
 800a882:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2242      	movs	r2, #66	@ 0x42
 800a888:	2100      	movs	r1, #0
 800a88a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a890:	2210      	movs	r2, #16
 800a892:	431a      	orrs	r2, r3
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2240      	movs	r2, #64	@ 0x40
 800a89c:	2100      	movs	r1, #0
 800a89e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	e01c      	b.n	800a8de <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	4a15      	ldr	r2, [pc, #84]	@ (800a8fc <HAL_I2C_Master_Transmit_DMA+0x208>)
 800a8a8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8ae:	b2da      	uxtb	r2, r3
 800a8b0:	2380      	movs	r3, #128	@ 0x80
 800a8b2:	049c      	lsls	r4, r3, #18
 800a8b4:	230a      	movs	r3, #10
 800a8b6:	18fb      	adds	r3, r7, r3
 800a8b8:	8819      	ldrh	r1, [r3, #0]
 800a8ba:	68f8      	ldr	r0, [r7, #12]
 800a8bc:	4b0e      	ldr	r3, [pc, #56]	@ (800a8f8 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800a8be:	9300      	str	r3, [sp, #0]
 800a8c0:	0023      	movs	r3, r4
 800a8c2:	f001 fccd 	bl	800c260 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2240      	movs	r2, #64	@ 0x40
 800a8ca:	2100      	movs	r1, #0
 800a8cc:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2101      	movs	r1, #1
 800a8d2:	0018      	movs	r0, r3
 800a8d4:	f001 fcfe 	bl	800c2d4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	e000      	b.n	800a8de <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a8dc:	2302      	movs	r3, #2
  }
}
 800a8de:	0018      	movs	r0, r3
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	b006      	add	sp, #24
 800a8e4:	bdb0      	pop	{r4, r5, r7, pc}
 800a8e6:	46c0      	nop			@ (mov r8, r8)
 800a8e8:	ffff0000 	.word	0xffff0000
 800a8ec:	0800b0f9 	.word	0x0800b0f9
 800a8f0:	0800c0b1 	.word	0x0800c0b1
 800a8f4:	0800c1f1 	.word	0x0800c1f1
 800a8f8:	80002000 	.word	0x80002000
 800a8fc:	0800aca5 	.word	0x0800aca5

0800a900 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800a900:	b5b0      	push	{r4, r5, r7, lr}
 800a902:	b088      	sub	sp, #32
 800a904:	af02      	add	r7, sp, #8
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	0008      	movs	r0, r1
 800a90a:	607a      	str	r2, [r7, #4]
 800a90c:	0019      	movs	r1, r3
 800a90e:	230a      	movs	r3, #10
 800a910:	18fb      	adds	r3, r7, r3
 800a912:	1c02      	adds	r2, r0, #0
 800a914:	801a      	strh	r2, [r3, #0]
 800a916:	2308      	movs	r3, #8
 800a918:	18fb      	adds	r3, r7, r3
 800a91a:	1c0a      	adds	r2, r1, #0
 800a91c:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2241      	movs	r2, #65	@ 0x41
 800a922:	5c9b      	ldrb	r3, [r3, r2]
 800a924:	b2db      	uxtb	r3, r3
 800a926:	2b20      	cmp	r3, #32
 800a928:	d000      	beq.n	800a92c <HAL_I2C_Master_Receive_DMA+0x2c>
 800a92a:	e0dd      	b.n	800aae8 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	699a      	ldr	r2, [r3, #24]
 800a932:	2380      	movs	r3, #128	@ 0x80
 800a934:	021b      	lsls	r3, r3, #8
 800a936:	401a      	ands	r2, r3
 800a938:	2380      	movs	r3, #128	@ 0x80
 800a93a:	021b      	lsls	r3, r3, #8
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d101      	bne.n	800a944 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800a940:	2302      	movs	r3, #2
 800a942:	e0d2      	b.n	800aaea <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2240      	movs	r2, #64	@ 0x40
 800a948:	5c9b      	ldrb	r3, [r3, r2]
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	d101      	bne.n	800a952 <HAL_I2C_Master_Receive_DMA+0x52>
 800a94e:	2302      	movs	r3, #2
 800a950:	e0cb      	b.n	800aaea <HAL_I2C_Master_Receive_DMA+0x1ea>
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2240      	movs	r2, #64	@ 0x40
 800a956:	2101      	movs	r1, #1
 800a958:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2241      	movs	r2, #65	@ 0x41
 800a95e:	2122      	movs	r1, #34	@ 0x22
 800a960:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2242      	movs	r2, #66	@ 0x42
 800a966:	2110      	movs	r1, #16
 800a968:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2200      	movs	r2, #0
 800a96e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2208      	movs	r2, #8
 800a97a:	18ba      	adds	r2, r7, r2
 800a97c:	8812      	ldrh	r2, [r2, #0]
 800a97e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	4a5c      	ldr	r2, [pc, #368]	@ (800aaf4 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800a984:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	4a5b      	ldr	r2, [pc, #364]	@ (800aaf8 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800a98a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a990:	b29b      	uxth	r3, r3
 800a992:	2bff      	cmp	r3, #255	@ 0xff
 800a994:	d906      	bls.n	800a9a4 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	22ff      	movs	r2, #255	@ 0xff
 800a99a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800a99c:	2380      	movs	r3, #128	@ 0x80
 800a99e:	045b      	lsls	r3, r3, #17
 800a9a0:	617b      	str	r3, [r7, #20]
 800a9a2:	e007      	b.n	800a9b4 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9a8:	b29a      	uxth	r2, r3
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a9ae:	2380      	movs	r3, #128	@ 0x80
 800a9b0:	049b      	lsls	r3, r3, #18
 800a9b2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d100      	bne.n	800a9be <HAL_I2C_Master_Receive_DMA+0xbe>
 800a9bc:	e078      	b.n	800aab0 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d023      	beq.n	800aa0e <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9ca:	4a4c      	ldr	r2, [pc, #304]	@ (800aafc <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800a9cc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9d2:	4a4b      	ldr	r2, [pc, #300]	@ (800ab00 <HAL_I2C_Master_Receive_DMA+0x200>)
 800a9d4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9da:	2200      	movs	r2, #0
 800a9dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	3324      	adds	r3, #36	@ 0x24
 800a9f0:	0019      	movs	r1, r3
 800a9f2:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800a9f8:	2513      	movs	r5, #19
 800a9fa:	197c      	adds	r4, r7, r5
 800a9fc:	f7ff f990 	bl	8009d20 <HAL_DMA_Start_IT>
 800aa00:	0003      	movs	r3, r0
 800aa02:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800aa04:	197b      	adds	r3, r7, r5
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d13d      	bne.n	800aa88 <HAL_I2C_Master_Receive_DMA+0x188>
 800aa0c:	e013      	b.n	800aa36 <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2241      	movs	r2, #65	@ 0x41
 800aa12:	2120      	movs	r1, #32
 800aa14:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2242      	movs	r2, #66	@ 0x42
 800aa1a:	2100      	movs	r1, #0
 800aa1c:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa22:	2280      	movs	r2, #128	@ 0x80
 800aa24:	431a      	orrs	r2, r3
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2240      	movs	r2, #64	@ 0x40
 800aa2e:	2100      	movs	r1, #0
 800aa30:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800aa32:	2301      	movs	r3, #1
 800aa34:	e059      	b.n	800aaea <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa3a:	b2da      	uxtb	r2, r3
 800aa3c:	697c      	ldr	r4, [r7, #20]
 800aa3e:	230a      	movs	r3, #10
 800aa40:	18fb      	adds	r3, r7, r3
 800aa42:	8819      	ldrh	r1, [r3, #0]
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	4b2f      	ldr	r3, [pc, #188]	@ (800ab04 <HAL_I2C_Master_Receive_DMA+0x204>)
 800aa48:	9300      	str	r3, [sp, #0]
 800aa4a:	0023      	movs	r3, r4
 800aa4c:	f001 fc08 	bl	800c260 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa54:	b29a      	uxth	r2, r3
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa5a:	1ad3      	subs	r3, r2, r3
 800aa5c:	b29a      	uxth	r2, r3
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2240      	movs	r2, #64	@ 0x40
 800aa66:	2100      	movs	r1, #0
 800aa68:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2110      	movs	r1, #16
 800aa6e:	0018      	movs	r0, r3
 800aa70:	f001 fc30 	bl	800c2d4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2180      	movs	r1, #128	@ 0x80
 800aa80:	0209      	lsls	r1, r1, #8
 800aa82:	430a      	orrs	r2, r1
 800aa84:	601a      	str	r2, [r3, #0]
 800aa86:	e02d      	b.n	800aae4 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2241      	movs	r2, #65	@ 0x41
 800aa8c:	2120      	movs	r1, #32
 800aa8e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2242      	movs	r2, #66	@ 0x42
 800aa94:	2100      	movs	r1, #0
 800aa96:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa9c:	2210      	movs	r2, #16
 800aa9e:	431a      	orrs	r2, r3
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2240      	movs	r2, #64	@ 0x40
 800aaa8:	2100      	movs	r1, #0
 800aaaa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800aaac:	2301      	movs	r3, #1
 800aaae:	e01c      	b.n	800aaea <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	4a15      	ldr	r2, [pc, #84]	@ (800ab08 <HAL_I2C_Master_Receive_DMA+0x208>)
 800aab4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aaba:	b2da      	uxtb	r2, r3
 800aabc:	2380      	movs	r3, #128	@ 0x80
 800aabe:	049c      	lsls	r4, r3, #18
 800aac0:	230a      	movs	r3, #10
 800aac2:	18fb      	adds	r3, r7, r3
 800aac4:	8819      	ldrh	r1, [r3, #0]
 800aac6:	68f8      	ldr	r0, [r7, #12]
 800aac8:	4b0e      	ldr	r3, [pc, #56]	@ (800ab04 <HAL_I2C_Master_Receive_DMA+0x204>)
 800aaca:	9300      	str	r3, [sp, #0]
 800aacc:	0023      	movs	r3, r4
 800aace:	f001 fbc7 	bl	800c260 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2240      	movs	r2, #64	@ 0x40
 800aad6:	2100      	movs	r1, #0
 800aad8:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2101      	movs	r1, #1
 800aade:	0018      	movs	r0, r3
 800aae0:	f001 fbf8 	bl	800c2d4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800aae4:	2300      	movs	r3, #0
 800aae6:	e000      	b.n	800aaea <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800aae8:	2302      	movs	r3, #2
  }
}
 800aaea:	0018      	movs	r0, r3
 800aaec:	46bd      	mov	sp, r7
 800aaee:	b006      	add	sp, #24
 800aaf0:	bdb0      	pop	{r4, r5, r7, pc}
 800aaf2:	46c0      	nop			@ (mov r8, r8)
 800aaf4:	ffff0000 	.word	0xffff0000
 800aaf8:	0800b0f9 	.word	0x0800b0f9
 800aafc:	0800c151 	.word	0x0800c151
 800ab00:	0800c1f1 	.word	0x0800c1f1
 800ab04:	80002400 	.word	0x80002400
 800ab08:	0800aca5 	.word	0x0800aca5

0800ab0c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	699b      	ldr	r3, [r3, #24]
 800ab1a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d005      	beq.n	800ab38 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab30:	68ba      	ldr	r2, [r7, #8]
 800ab32:	68f9      	ldr	r1, [r7, #12]
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	4798      	blx	r3
  }
}
 800ab38:	46c0      	nop			@ (mov r8, r8)
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	b004      	add	sp, #16
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b086      	sub	sp, #24
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	699b      	ldr	r3, [r3, #24]
 800ab4e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800ab58:	697a      	ldr	r2, [r7, #20]
 800ab5a:	2380      	movs	r3, #128	@ 0x80
 800ab5c:	005b      	lsls	r3, r3, #1
 800ab5e:	4013      	ands	r3, r2
 800ab60:	d00e      	beq.n	800ab80 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	2280      	movs	r2, #128	@ 0x80
 800ab66:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800ab68:	d00a      	beq.n	800ab80 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab6e:	2201      	movs	r2, #1
 800ab70:	431a      	orrs	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	2280      	movs	r2, #128	@ 0x80
 800ab7c:	0052      	lsls	r2, r2, #1
 800ab7e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800ab80:	697a      	ldr	r2, [r7, #20]
 800ab82:	2380      	movs	r3, #128	@ 0x80
 800ab84:	00db      	lsls	r3, r3, #3
 800ab86:	4013      	ands	r3, r2
 800ab88:	d00e      	beq.n	800aba8 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	2280      	movs	r2, #128	@ 0x80
 800ab8e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800ab90:	d00a      	beq.n	800aba8 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab96:	2208      	movs	r2, #8
 800ab98:	431a      	orrs	r2, r3
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	2280      	movs	r2, #128	@ 0x80
 800aba4:	00d2      	lsls	r2, r2, #3
 800aba6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800aba8:	697a      	ldr	r2, [r7, #20]
 800abaa:	2380      	movs	r3, #128	@ 0x80
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	4013      	ands	r3, r2
 800abb0:	d00e      	beq.n	800abd0 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	2280      	movs	r2, #128	@ 0x80
 800abb6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800abb8:	d00a      	beq.n	800abd0 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abbe:	2202      	movs	r2, #2
 800abc0:	431a      	orrs	r2, r3
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	2280      	movs	r2, #128	@ 0x80
 800abcc:	0092      	lsls	r2, r2, #2
 800abce:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abd4:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	220b      	movs	r2, #11
 800abda:	4013      	ands	r3, r2
 800abdc:	d005      	beq.n	800abea <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800abde:	68fa      	ldr	r2, [r7, #12]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	0011      	movs	r1, r2
 800abe4:	0018      	movs	r0, r3
 800abe6:	f001 f915 	bl	800be14 <I2C_ITError>
  }
}
 800abea:	46c0      	nop			@ (mov r8, r8)
 800abec:	46bd      	mov	sp, r7
 800abee:	b006      	add	sp, #24
 800abf0:	bd80      	pop	{r7, pc}

0800abf2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b082      	sub	sp, #8
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800abfa:	46c0      	nop			@ (mov r8, r8)
 800abfc:	46bd      	mov	sp, r7
 800abfe:	b002      	add	sp, #8
 800ac00:	bd80      	pop	{r7, pc}

0800ac02 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b082      	sub	sp, #8
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800ac0a:	46c0      	nop			@ (mov r8, r8)
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	b002      	add	sp, #8
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ac12:	b580      	push	{r7, lr}
 800ac14:	b082      	sub	sp, #8
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800ac1a:	46c0      	nop			@ (mov r8, r8)
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	b002      	add	sp, #8
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ac22:	b580      	push	{r7, lr}
 800ac24:	b082      	sub	sp, #8
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800ac2a:	46c0      	nop			@ (mov r8, r8)
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	b002      	add	sp, #8
 800ac30:	bd80      	pop	{r7, pc}

0800ac32 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ac32:	b580      	push	{r7, lr}
 800ac34:	b082      	sub	sp, #8
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
 800ac3a:	0008      	movs	r0, r1
 800ac3c:	0011      	movs	r1, r2
 800ac3e:	1cfb      	adds	r3, r7, #3
 800ac40:	1c02      	adds	r2, r0, #0
 800ac42:	701a      	strb	r2, [r3, #0]
 800ac44:	003b      	movs	r3, r7
 800ac46:	1c0a      	adds	r2, r1, #0
 800ac48:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800ac4a:	46c0      	nop			@ (mov r8, r8)
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	b002      	add	sp, #8
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b082      	sub	sp, #8
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800ac5a:	46c0      	nop			@ (mov r8, r8)
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	b002      	add	sp, #8
 800ac60:	bd80      	pop	{r7, pc}

0800ac62 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ac62:	b580      	push	{r7, lr}
 800ac64:	b082      	sub	sp, #8
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800ac6a:	46c0      	nop			@ (mov r8, r8)
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	b002      	add	sp, #8
 800ac70:	bd80      	pop	{r7, pc}

0800ac72 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b082      	sub	sp, #8
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800ac7a:	46c0      	nop			@ (mov r8, r8)
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	b002      	add	sp, #8
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b082      	sub	sp, #8
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800ac8a:	46c0      	nop			@ (mov r8, r8)
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	b002      	add	sp, #8
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b082      	sub	sp, #8
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800ac9a:	46c0      	nop			@ (mov r8, r8)
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	b002      	add	sp, #8
 800aca0:	bd80      	pop	{r7, pc}
	...

0800aca4 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800aca4:	b590      	push	{r4, r7, lr}
 800aca6:	b089      	sub	sp, #36	@ 0x24
 800aca8:	af02      	add	r7, sp, #8
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2240      	movs	r2, #64	@ 0x40
 800acb8:	5c9b      	ldrb	r3, [r3, r2]
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d101      	bne.n	800acc2 <I2C_Master_ISR_IT+0x1e>
 800acbe:	2302      	movs	r3, #2
 800acc0:	e113      	b.n	800aeea <I2C_Master_ISR_IT+0x246>
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2240      	movs	r2, #64	@ 0x40
 800acc6:	2101      	movs	r1, #1
 800acc8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	2210      	movs	r2, #16
 800acce:	4013      	ands	r3, r2
 800acd0:	d012      	beq.n	800acf8 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2210      	movs	r2, #16
 800acd6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800acd8:	d00e      	beq.n	800acf8 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2210      	movs	r2, #16
 800ace0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ace6:	2204      	movs	r2, #4
 800ace8:	431a      	orrs	r2, r3
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	0018      	movs	r0, r3
 800acf2:	f001 f9ba 	bl	800c06a <I2C_Flush_TXDR>
 800acf6:	e0e5      	b.n	800aec4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	2204      	movs	r2, #4
 800acfc:	4013      	ands	r3, r2
 800acfe:	d021      	beq.n	800ad44 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2204      	movs	r2, #4
 800ad04:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ad06:	d01d      	beq.n	800ad44 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	2204      	movs	r2, #4
 800ad0c:	4393      	bics	r3, r2
 800ad0e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad1a:	b2d2      	uxtb	r2, r2
 800ad1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad22:	1c5a      	adds	r2, r3, #1
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	b29a      	uxth	r2, r3
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	b29a      	uxth	r2, r3
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ad42:	e0bf      	b.n	800aec4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	2202      	movs	r2, #2
 800ad48:	4013      	ands	r3, r2
 800ad4a:	d01c      	beq.n	800ad86 <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2202      	movs	r2, #2
 800ad50:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ad52:	d018      	beq.n	800ad86 <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad58:	781a      	ldrb	r2, [r3, #0]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad64:	1c5a      	adds	r2, r3, #1
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	b29a      	uxth	r2, r3
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	b29a      	uxth	r2, r3
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ad84:	e09e      	b.n	800aec4 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	2280      	movs	r2, #128	@ 0x80
 800ad8a:	4013      	ands	r3, r2
 800ad8c:	d100      	bne.n	800ad90 <I2C_Master_ISR_IT+0xec>
 800ad8e:	e069      	b.n	800ae64 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2240      	movs	r2, #64	@ 0x40
 800ad94:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ad96:	d065      	beq.n	800ae64 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d04a      	beq.n	800ae38 <I2C_Master_ISR_IT+0x194>
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d146      	bne.n	800ae38 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	b29a      	uxth	r2, r3
 800adb2:	2112      	movs	r1, #18
 800adb4:	187b      	adds	r3, r7, r1
 800adb6:	0592      	lsls	r2, r2, #22
 800adb8:	0d92      	lsrs	r2, r2, #22
 800adba:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	2bff      	cmp	r3, #255	@ 0xff
 800adc4:	d910      	bls.n	800ade8 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	22ff      	movs	r2, #255	@ 0xff
 800adca:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800add0:	b2da      	uxtb	r2, r3
 800add2:	2380      	movs	r3, #128	@ 0x80
 800add4:	045c      	lsls	r4, r3, #17
 800add6:	187b      	adds	r3, r7, r1
 800add8:	8819      	ldrh	r1, [r3, #0]
 800adda:	68f8      	ldr	r0, [r7, #12]
 800addc:	2300      	movs	r3, #0
 800adde:	9300      	str	r3, [sp, #0]
 800ade0:	0023      	movs	r3, r4
 800ade2:	f001 fa3d 	bl	800c260 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ade6:	e03c      	b.n	800ae62 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adec:	b29a      	uxth	r2, r3
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adf6:	4a3f      	ldr	r2, [pc, #252]	@ (800aef4 <I2C_Master_ISR_IT+0x250>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d00e      	beq.n	800ae1a <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae00:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800ae06:	2312      	movs	r3, #18
 800ae08:	18fb      	adds	r3, r7, r3
 800ae0a:	8819      	ldrh	r1, [r3, #0]
 800ae0c:	68f8      	ldr	r0, [r7, #12]
 800ae0e:	2300      	movs	r3, #0
 800ae10:	9300      	str	r3, [sp, #0]
 800ae12:	0023      	movs	r3, r4
 800ae14:	f001 fa24 	bl	800c260 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ae18:	e023      	b.n	800ae62 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae1e:	b2da      	uxtb	r2, r3
 800ae20:	2380      	movs	r3, #128	@ 0x80
 800ae22:	049c      	lsls	r4, r3, #18
 800ae24:	2312      	movs	r3, #18
 800ae26:	18fb      	adds	r3, r7, r3
 800ae28:	8819      	ldrh	r1, [r3, #0]
 800ae2a:	68f8      	ldr	r0, [r7, #12]
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	9300      	str	r3, [sp, #0]
 800ae30:	0023      	movs	r3, r4
 800ae32:	f001 fa15 	bl	800c260 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ae36:	e014      	b.n	800ae62 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	685a      	ldr	r2, [r3, #4]
 800ae3e:	2380      	movs	r3, #128	@ 0x80
 800ae40:	049b      	lsls	r3, r3, #18
 800ae42:	401a      	ands	r2, r3
 800ae44:	2380      	movs	r3, #128	@ 0x80
 800ae46:	049b      	lsls	r3, r3, #18
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d004      	beq.n	800ae56 <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	0018      	movs	r0, r3
 800ae50:	f000 fcf4 	bl	800b83c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ae54:	e036      	b.n	800aec4 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2140      	movs	r1, #64	@ 0x40
 800ae5a:	0018      	movs	r0, r3
 800ae5c:	f000 ffda 	bl	800be14 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ae60:	e030      	b.n	800aec4 <I2C_Master_ISR_IT+0x220>
 800ae62:	e02f      	b.n	800aec4 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	2240      	movs	r2, #64	@ 0x40
 800ae68:	4013      	ands	r3, r2
 800ae6a:	d02b      	beq.n	800aec4 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2240      	movs	r2, #64	@ 0x40
 800ae70:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800ae72:	d027      	beq.n	800aec4 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d11d      	bne.n	800aeba <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	685a      	ldr	r2, [r3, #4]
 800ae84:	2380      	movs	r3, #128	@ 0x80
 800ae86:	049b      	lsls	r3, r3, #18
 800ae88:	401a      	ands	r2, r3
 800ae8a:	2380      	movs	r3, #128	@ 0x80
 800ae8c:	049b      	lsls	r3, r3, #18
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d018      	beq.n	800aec4 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae96:	4a17      	ldr	r2, [pc, #92]	@ (800aef4 <I2C_Master_ISR_IT+0x250>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d109      	bne.n	800aeb0 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	685a      	ldr	r2, [r3, #4]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2180      	movs	r1, #128	@ 0x80
 800aea8:	01c9      	lsls	r1, r1, #7
 800aeaa:	430a      	orrs	r2, r1
 800aeac:	605a      	str	r2, [r3, #4]
 800aeae:	e009      	b.n	800aec4 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	0018      	movs	r0, r3
 800aeb4:	f000 fcc2 	bl	800b83c <I2C_ITMasterSeqCplt>
 800aeb8:	e004      	b.n	800aec4 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2140      	movs	r1, #64	@ 0x40
 800aebe:	0018      	movs	r0, r3
 800aec0:	f000 ffa8 	bl	800be14 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	2220      	movs	r2, #32
 800aec8:	4013      	ands	r3, r2
 800aeca:	d009      	beq.n	800aee0 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2220      	movs	r2, #32
 800aed0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800aed2:	d005      	beq.n	800aee0 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800aed4:	697a      	ldr	r2, [r7, #20]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	0011      	movs	r1, r2
 800aeda:	0018      	movs	r0, r3
 800aedc:	f000 fd54 	bl	800b988 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2240      	movs	r2, #64	@ 0x40
 800aee4:	2100      	movs	r1, #0
 800aee6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aee8:	2300      	movs	r3, #0
}
 800aeea:	0018      	movs	r0, r3
 800aeec:	46bd      	mov	sp, r7
 800aeee:	b007      	add	sp, #28
 800aef0:	bd90      	pop	{r4, r7, pc}
 800aef2:	46c0      	nop			@ (mov r8, r8)
 800aef4:	ffff0000 	.word	0xffff0000

0800aef8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b086      	sub	sp, #24
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af08:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2240      	movs	r2, #64	@ 0x40
 800af12:	5c9b      	ldrb	r3, [r3, r2]
 800af14:	2b01      	cmp	r3, #1
 800af16:	d101      	bne.n	800af1c <I2C_Slave_ISR_IT+0x24>
 800af18:	2302      	movs	r3, #2
 800af1a:	e0e6      	b.n	800b0ea <I2C_Slave_ISR_IT+0x1f2>
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2240      	movs	r2, #64	@ 0x40
 800af20:	2101      	movs	r1, #1
 800af22:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	2220      	movs	r2, #32
 800af28:	4013      	ands	r3, r2
 800af2a:	d009      	beq.n	800af40 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2220      	movs	r2, #32
 800af30:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800af32:	d005      	beq.n	800af40 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800af34:	693a      	ldr	r2, [r7, #16]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	0011      	movs	r1, r2
 800af3a:	0018      	movs	r0, r3
 800af3c:	f000 fdf2 	bl	800bb24 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	2210      	movs	r2, #16
 800af44:	4013      	ands	r3, r2
 800af46:	d052      	beq.n	800afee <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2210      	movs	r2, #16
 800af4c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800af4e:	d04e      	beq.n	800afee <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af54:	b29b      	uxth	r3, r3
 800af56:	2b00      	cmp	r3, #0
 800af58:	d12d      	bne.n	800afb6 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2241      	movs	r2, #65	@ 0x41
 800af5e:	5c9b      	ldrb	r3, [r3, r2]
 800af60:	b2db      	uxtb	r3, r3
 800af62:	2b28      	cmp	r3, #40	@ 0x28
 800af64:	d10b      	bne.n	800af7e <I2C_Slave_ISR_IT+0x86>
 800af66:	697a      	ldr	r2, [r7, #20]
 800af68:	2380      	movs	r3, #128	@ 0x80
 800af6a:	049b      	lsls	r3, r3, #18
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d106      	bne.n	800af7e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800af70:	693a      	ldr	r2, [r7, #16]
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	0011      	movs	r1, r2
 800af76:	0018      	movs	r0, r3
 800af78:	f000 fef4 	bl	800bd64 <I2C_ITListenCplt>
 800af7c:	e036      	b.n	800afec <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2241      	movs	r2, #65	@ 0x41
 800af82:	5c9b      	ldrb	r3, [r3, r2]
 800af84:	b2db      	uxtb	r3, r3
 800af86:	2b29      	cmp	r3, #41	@ 0x29
 800af88:	d110      	bne.n	800afac <I2C_Slave_ISR_IT+0xb4>
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	4a59      	ldr	r2, [pc, #356]	@ (800b0f4 <I2C_Slave_ISR_IT+0x1fc>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d00c      	beq.n	800afac <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2210      	movs	r2, #16
 800af98:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	0018      	movs	r0, r3
 800af9e:	f001 f864 	bl	800c06a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	0018      	movs	r0, r3
 800afa6:	f000 fc8b 	bl	800b8c0 <I2C_ITSlaveSeqCplt>
 800afaa:	e01f      	b.n	800afec <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2210      	movs	r2, #16
 800afb2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800afb4:	e091      	b.n	800b0da <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2210      	movs	r2, #16
 800afbc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afc2:	2204      	movs	r2, #4
 800afc4:	431a      	orrs	r2, r3
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d005      	beq.n	800afdc <I2C_Slave_ISR_IT+0xe4>
 800afd0:	697a      	ldr	r2, [r7, #20]
 800afd2:	2380      	movs	r3, #128	@ 0x80
 800afd4:	045b      	lsls	r3, r3, #17
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d000      	beq.n	800afdc <I2C_Slave_ISR_IT+0xe4>
 800afda:	e07e      	b.n	800b0da <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	0011      	movs	r1, r2
 800afe4:	0018      	movs	r0, r3
 800afe6:	f000 ff15 	bl	800be14 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800afea:	e076      	b.n	800b0da <I2C_Slave_ISR_IT+0x1e2>
 800afec:	e075      	b.n	800b0da <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	2204      	movs	r2, #4
 800aff2:	4013      	ands	r3, r2
 800aff4:	d02f      	beq.n	800b056 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2204      	movs	r2, #4
 800affa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800affc:	d02b      	beq.n	800b056 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b002:	b29b      	uxth	r3, r3
 800b004:	2b00      	cmp	r3, #0
 800b006:	d018      	beq.n	800b03a <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b012:	b2d2      	uxtb	r2, r2
 800b014:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b01a:	1c5a      	adds	r2, r3, #1
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b024:	3b01      	subs	r3, #1
 800b026:	b29a      	uxth	r2, r3
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b030:	b29b      	uxth	r3, r3
 800b032:	3b01      	subs	r3, #1
 800b034:	b29a      	uxth	r2, r3
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b03e:	b29b      	uxth	r3, r3
 800b040:	2b00      	cmp	r3, #0
 800b042:	d14c      	bne.n	800b0de <I2C_Slave_ISR_IT+0x1e6>
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	4a2b      	ldr	r2, [pc, #172]	@ (800b0f4 <I2C_Slave_ISR_IT+0x1fc>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d048      	beq.n	800b0de <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	0018      	movs	r0, r3
 800b050:	f000 fc36 	bl	800b8c0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800b054:	e043      	b.n	800b0de <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	2208      	movs	r2, #8
 800b05a:	4013      	ands	r3, r2
 800b05c:	d00a      	beq.n	800b074 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2208      	movs	r2, #8
 800b062:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b064:	d006      	beq.n	800b074 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800b066:	693a      	ldr	r2, [r7, #16]
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	0011      	movs	r1, r2
 800b06c:	0018      	movs	r0, r3
 800b06e:	f000 fb41 	bl	800b6f4 <I2C_ITAddrCplt>
 800b072:	e035      	b.n	800b0e0 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	2202      	movs	r2, #2
 800b078:	4013      	ands	r3, r2
 800b07a:	d031      	beq.n	800b0e0 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2202      	movs	r2, #2
 800b080:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b082:	d02d      	beq.n	800b0e0 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b088:	b29b      	uxth	r3, r3
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d018      	beq.n	800b0c0 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b092:	781a      	ldrb	r2, [r3, #0]
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b09e:	1c5a      	adds	r2, r3, #1
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	b29a      	uxth	r2, r3
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0b6:	3b01      	subs	r3, #1
 800b0b8:	b29a      	uxth	r2, r3
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b0be:	e00f      	b.n	800b0e0 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800b0c0:	697a      	ldr	r2, [r7, #20]
 800b0c2:	2380      	movs	r3, #128	@ 0x80
 800b0c4:	045b      	lsls	r3, r3, #17
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d002      	beq.n	800b0d0 <I2C_Slave_ISR_IT+0x1d8>
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d107      	bne.n	800b0e0 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	0018      	movs	r0, r3
 800b0d4:	f000 fbf4 	bl	800b8c0 <I2C_ITSlaveSeqCplt>
 800b0d8:	e002      	b.n	800b0e0 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800b0da:	46c0      	nop			@ (mov r8, r8)
 800b0dc:	e000      	b.n	800b0e0 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800b0de:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2240      	movs	r2, #64	@ 0x40
 800b0e4:	2100      	movs	r1, #0
 800b0e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b0e8:	2300      	movs	r3, #0
}
 800b0ea:	0018      	movs	r0, r3
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	b006      	add	sp, #24
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	46c0      	nop			@ (mov r8, r8)
 800b0f4:	ffff0000 	.word	0xffff0000

0800b0f8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800b0f8:	b590      	push	{r4, r7, lr}
 800b0fa:	b089      	sub	sp, #36	@ 0x24
 800b0fc:	af02      	add	r7, sp, #8
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2240      	movs	r2, #64	@ 0x40
 800b108:	5c9b      	ldrb	r3, [r3, r2]
 800b10a:	2b01      	cmp	r3, #1
 800b10c:	d101      	bne.n	800b112 <I2C_Master_ISR_DMA+0x1a>
 800b10e:	2302      	movs	r3, #2
 800b110:	e0e7      	b.n	800b2e2 <I2C_Master_ISR_DMA+0x1ea>
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2240      	movs	r2, #64	@ 0x40
 800b116:	2101      	movs	r1, #1
 800b118:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	2210      	movs	r2, #16
 800b11e:	4013      	ands	r3, r2
 800b120:	d017      	beq.n	800b152 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2210      	movs	r2, #16
 800b126:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b128:	d013      	beq.n	800b152 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	2210      	movs	r2, #16
 800b130:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b136:	2204      	movs	r2, #4
 800b138:	431a      	orrs	r2, r3
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2120      	movs	r1, #32
 800b142:	0018      	movs	r0, r3
 800b144:	f001 f8c6 	bl	800c2d4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	0018      	movs	r0, r3
 800b14c:	f000 ff8d 	bl	800c06a <I2C_Flush_TXDR>
 800b150:	e0c2      	b.n	800b2d8 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	2280      	movs	r2, #128	@ 0x80
 800b156:	4013      	ands	r3, r2
 800b158:	d100      	bne.n	800b15c <I2C_Master_ISR_DMA+0x64>
 800b15a:	e07c      	b.n	800b256 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2240      	movs	r2, #64	@ 0x40
 800b160:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b162:	d100      	bne.n	800b166 <I2C_Master_ISR_DMA+0x6e>
 800b164:	e077      	b.n	800b256 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	2140      	movs	r1, #64	@ 0x40
 800b172:	438a      	bics	r2, r1
 800b174:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d055      	beq.n	800b22c <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	b29a      	uxth	r2, r3
 800b188:	2312      	movs	r3, #18
 800b18a:	18fb      	adds	r3, r7, r3
 800b18c:	0592      	lsls	r2, r2, #22
 800b18e:	0d92      	lsrs	r2, r2, #22
 800b190:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b196:	b29b      	uxth	r3, r3
 800b198:	2bff      	cmp	r3, #255	@ 0xff
 800b19a:	d906      	bls.n	800b1aa <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	22ff      	movs	r2, #255	@ 0xff
 800b1a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800b1a2:	2380      	movs	r3, #128	@ 0x80
 800b1a4:	045b      	lsls	r3, r3, #17
 800b1a6:	617b      	str	r3, [r7, #20]
 800b1a8:	e010      	b.n	800b1cc <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1ae:	b29a      	uxth	r2, r3
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1b8:	4a4c      	ldr	r2, [pc, #304]	@ (800b2ec <I2C_Master_ISR_DMA+0x1f4>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d003      	beq.n	800b1c6 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1c2:	617b      	str	r3, [r7, #20]
 800b1c4:	e002      	b.n	800b1cc <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800b1c6:	2380      	movs	r3, #128	@ 0x80
 800b1c8:	049b      	lsls	r3, r3, #18
 800b1ca:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1d0:	b2da      	uxtb	r2, r3
 800b1d2:	697c      	ldr	r4, [r7, #20]
 800b1d4:	2312      	movs	r3, #18
 800b1d6:	18fb      	adds	r3, r7, r3
 800b1d8:	8819      	ldrh	r1, [r3, #0]
 800b1da:	68f8      	ldr	r0, [r7, #12]
 800b1dc:	2300      	movs	r3, #0
 800b1de:	9300      	str	r3, [sp, #0]
 800b1e0:	0023      	movs	r3, r4
 800b1e2:	f001 f83d 	bl	800c260 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1ea:	b29a      	uxth	r2, r3
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1f0:	1ad3      	subs	r3, r2, r3
 800b1f2:	b29a      	uxth	r2, r3
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2241      	movs	r2, #65	@ 0x41
 800b1fc:	5c9b      	ldrb	r3, [r3, r2]
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	2b22      	cmp	r3, #34	@ 0x22
 800b202:	d109      	bne.n	800b218 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	681a      	ldr	r2, [r3, #0]
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2180      	movs	r1, #128	@ 0x80
 800b210:	0209      	lsls	r1, r1, #8
 800b212:	430a      	orrs	r2, r1
 800b214:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b216:	e05f      	b.n	800b2d8 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	2180      	movs	r1, #128	@ 0x80
 800b224:	01c9      	lsls	r1, r1, #7
 800b226:	430a      	orrs	r2, r1
 800b228:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b22a:	e055      	b.n	800b2d8 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	685a      	ldr	r2, [r3, #4]
 800b232:	2380      	movs	r3, #128	@ 0x80
 800b234:	049b      	lsls	r3, r3, #18
 800b236:	401a      	ands	r2, r3
 800b238:	2380      	movs	r3, #128	@ 0x80
 800b23a:	049b      	lsls	r3, r3, #18
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d004      	beq.n	800b24a <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	0018      	movs	r0, r3
 800b244:	f000 fafa 	bl	800b83c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800b248:	e046      	b.n	800b2d8 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2140      	movs	r1, #64	@ 0x40
 800b24e:	0018      	movs	r0, r3
 800b250:	f000 fde0 	bl	800be14 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800b254:	e040      	b.n	800b2d8 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	2240      	movs	r2, #64	@ 0x40
 800b25a:	4013      	ands	r3, r2
 800b25c:	d02c      	beq.n	800b2b8 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2240      	movs	r2, #64	@ 0x40
 800b262:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b264:	d028      	beq.n	800b2b8 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d11d      	bne.n	800b2ac <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	685a      	ldr	r2, [r3, #4]
 800b276:	2380      	movs	r3, #128	@ 0x80
 800b278:	049b      	lsls	r3, r3, #18
 800b27a:	401a      	ands	r2, r3
 800b27c:	2380      	movs	r3, #128	@ 0x80
 800b27e:	049b      	lsls	r3, r3, #18
 800b280:	429a      	cmp	r2, r3
 800b282:	d028      	beq.n	800b2d6 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b288:	4a18      	ldr	r2, [pc, #96]	@ (800b2ec <I2C_Master_ISR_DMA+0x1f4>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d109      	bne.n	800b2a2 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	685a      	ldr	r2, [r3, #4]
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2180      	movs	r1, #128	@ 0x80
 800b29a:	01c9      	lsls	r1, r1, #7
 800b29c:	430a      	orrs	r2, r1
 800b29e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800b2a0:	e019      	b.n	800b2d6 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	0018      	movs	r0, r3
 800b2a6:	f000 fac9 	bl	800b83c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800b2aa:	e014      	b.n	800b2d6 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	2140      	movs	r1, #64	@ 0x40
 800b2b0:	0018      	movs	r0, r3
 800b2b2:	f000 fdaf 	bl	800be14 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b2b6:	e00e      	b.n	800b2d6 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	2220      	movs	r2, #32
 800b2bc:	4013      	ands	r3, r2
 800b2be:	d00b      	beq.n	800b2d8 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2220      	movs	r2, #32
 800b2c4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b2c6:	d007      	beq.n	800b2d8 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800b2c8:	68ba      	ldr	r2, [r7, #8]
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	0011      	movs	r1, r2
 800b2ce:	0018      	movs	r0, r3
 800b2d0:	f000 fb5a 	bl	800b988 <I2C_ITMasterCplt>
 800b2d4:	e000      	b.n	800b2d8 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800b2d6:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2240      	movs	r2, #64	@ 0x40
 800b2dc:	2100      	movs	r1, #0
 800b2de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b2e0:	2300      	movs	r3, #0
}
 800b2e2:	0018      	movs	r0, r3
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	b007      	add	sp, #28
 800b2e8:	bd90      	pop	{r4, r7, pc}
 800b2ea:	46c0      	nop			@ (mov r8, r8)
 800b2ec:	ffff0000 	.word	0xffff0000

0800b2f0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800b2f0:	b590      	push	{r4, r7, lr}
 800b2f2:	b089      	sub	sp, #36	@ 0x24
 800b2f4:	af02      	add	r7, sp, #8
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800b2fc:	4b88      	ldr	r3, [pc, #544]	@ (800b520 <I2C_Mem_ISR_DMA+0x230>)
 800b2fe:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2240      	movs	r2, #64	@ 0x40
 800b304:	5c9b      	ldrb	r3, [r3, r2]
 800b306:	2b01      	cmp	r3, #1
 800b308:	d101      	bne.n	800b30e <I2C_Mem_ISR_DMA+0x1e>
 800b30a:	2302      	movs	r3, #2
 800b30c:	e104      	b.n	800b518 <I2C_Mem_ISR_DMA+0x228>
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2240      	movs	r2, #64	@ 0x40
 800b312:	2101      	movs	r1, #1
 800b314:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	2210      	movs	r2, #16
 800b31a:	4013      	ands	r3, r2
 800b31c:	d017      	beq.n	800b34e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2210      	movs	r2, #16
 800b322:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b324:	d013      	beq.n	800b34e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2210      	movs	r2, #16
 800b32c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b332:	2204      	movs	r2, #4
 800b334:	431a      	orrs	r2, r3
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2120      	movs	r1, #32
 800b33e:	0018      	movs	r0, r3
 800b340:	f000 ffc8 	bl	800c2d4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	0018      	movs	r0, r3
 800b348:	f000 fe8f 	bl	800c06a <I2C_Flush_TXDR>
 800b34c:	e0df      	b.n	800b50e <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	2202      	movs	r2, #2
 800b352:	4013      	ands	r3, r2
 800b354:	d00d      	beq.n	800b372 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2202      	movs	r2, #2
 800b35a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b35c:	d009      	beq.n	800b372 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	68fa      	ldr	r2, [r7, #12]
 800b364:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800b366:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2201      	movs	r2, #1
 800b36c:	4252      	negs	r2, r2
 800b36e:	651a      	str	r2, [r3, #80]	@ 0x50
 800b370:	e0cd      	b.n	800b50e <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	2280      	movs	r2, #128	@ 0x80
 800b376:	4013      	ands	r3, r2
 800b378:	d05e      	beq.n	800b438 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2240      	movs	r2, #64	@ 0x40
 800b37e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b380:	d05a      	beq.n	800b438 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2110      	movs	r1, #16
 800b386:	0018      	movs	r0, r3
 800b388:	f000 ffa4 	bl	800c2d4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b390:	b29b      	uxth	r3, r3
 800b392:	2b00      	cmp	r3, #0
 800b394:	d04a      	beq.n	800b42c <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	2bff      	cmp	r3, #255	@ 0xff
 800b39e:	d910      	bls.n	800b3c2 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	22ff      	movs	r2, #255	@ 0xff
 800b3a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b3aa:	b299      	uxth	r1, r3
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b3b0:	b2da      	uxtb	r2, r3
 800b3b2:	2380      	movs	r3, #128	@ 0x80
 800b3b4:	045b      	lsls	r3, r3, #17
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	2400      	movs	r4, #0
 800b3ba:	9400      	str	r4, [sp, #0]
 800b3bc:	f000 ff50 	bl	800c260 <I2C_TransferConfig>
 800b3c0:	e011      	b.n	800b3e6 <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3c6:	b29a      	uxth	r2, r3
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b3d0:	b299      	uxth	r1, r3
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b3d6:	b2da      	uxtb	r2, r3
 800b3d8:	2380      	movs	r3, #128	@ 0x80
 800b3da:	049b      	lsls	r3, r3, #18
 800b3dc:	68f8      	ldr	r0, [r7, #12]
 800b3de:	2400      	movs	r4, #0
 800b3e0:	9400      	str	r4, [sp, #0]
 800b3e2:	f000 ff3d 	bl	800c260 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3ea:	b29a      	uxth	r2, r3
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b3f0:	1ad3      	subs	r3, r2, r3
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2241      	movs	r2, #65	@ 0x41
 800b3fc:	5c9b      	ldrb	r3, [r3, r2]
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	2b22      	cmp	r3, #34	@ 0x22
 800b402:	d109      	bne.n	800b418 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	2180      	movs	r1, #128	@ 0x80
 800b410:	0209      	lsls	r1, r1, #8
 800b412:	430a      	orrs	r2, r1
 800b414:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b416:	e07a      	b.n	800b50e <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	2180      	movs	r1, #128	@ 0x80
 800b424:	01c9      	lsls	r1, r1, #7
 800b426:	430a      	orrs	r2, r1
 800b428:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b42a:	e070      	b.n	800b50e <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2140      	movs	r1, #64	@ 0x40
 800b430:	0018      	movs	r0, r3
 800b432:	f000 fcef 	bl	800be14 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800b436:	e06a      	b.n	800b50e <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	2240      	movs	r2, #64	@ 0x40
 800b43c:	4013      	ands	r3, r2
 800b43e:	d058      	beq.n	800b4f2 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2240      	movs	r2, #64	@ 0x40
 800b444:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b446:	d054      	beq.n	800b4f2 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2241      	movs	r2, #65	@ 0x41
 800b44c:	5c9b      	ldrb	r3, [r3, r2]
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	2b22      	cmp	r3, #34	@ 0x22
 800b452:	d101      	bne.n	800b458 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800b454:	4b33      	ldr	r3, [pc, #204]	@ (800b524 <I2C_Mem_ISR_DMA+0x234>)
 800b456:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	2bff      	cmp	r3, #255	@ 0xff
 800b460:	d911      	bls.n	800b486 <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	22ff      	movs	r2, #255	@ 0xff
 800b466:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b46c:	b299      	uxth	r1, r3
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b472:	b2da      	uxtb	r2, r3
 800b474:	2380      	movs	r3, #128	@ 0x80
 800b476:	045c      	lsls	r4, r3, #17
 800b478:	68f8      	ldr	r0, [r7, #12]
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	9300      	str	r3, [sp, #0]
 800b47e:	0023      	movs	r3, r4
 800b480:	f000 feee 	bl	800c260 <I2C_TransferConfig>
 800b484:	e012      	b.n	800b4ac <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b48a:	b29a      	uxth	r2, r3
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b494:	b299      	uxth	r1, r3
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b49a:	b2da      	uxtb	r2, r3
 800b49c:	2380      	movs	r3, #128	@ 0x80
 800b49e:	049c      	lsls	r4, r3, #18
 800b4a0:	68f8      	ldr	r0, [r7, #12]
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	9300      	str	r3, [sp, #0]
 800b4a6:	0023      	movs	r3, r4
 800b4a8:	f000 feda 	bl	800c260 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4b0:	b29a      	uxth	r2, r3
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4b6:	1ad3      	subs	r3, r2, r3
 800b4b8:	b29a      	uxth	r2, r3
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2241      	movs	r2, #65	@ 0x41
 800b4c2:	5c9b      	ldrb	r3, [r3, r2]
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	2b22      	cmp	r3, #34	@ 0x22
 800b4c8:	d109      	bne.n	800b4de <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	681a      	ldr	r2, [r3, #0]
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2180      	movs	r1, #128	@ 0x80
 800b4d6:	0209      	lsls	r1, r1, #8
 800b4d8:	430a      	orrs	r2, r1
 800b4da:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b4dc:	e017      	b.n	800b50e <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	2180      	movs	r1, #128	@ 0x80
 800b4ea:	01c9      	lsls	r1, r1, #7
 800b4ec:	430a      	orrs	r2, r1
 800b4ee:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b4f0:	e00d      	b.n	800b50e <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	2220      	movs	r2, #32
 800b4f6:	4013      	ands	r3, r2
 800b4f8:	d009      	beq.n	800b50e <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2220      	movs	r2, #32
 800b4fe:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b500:	d005      	beq.n	800b50e <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800b502:	68ba      	ldr	r2, [r7, #8]
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	0011      	movs	r1, r2
 800b508:	0018      	movs	r0, r3
 800b50a:	f000 fa3d 	bl	800b988 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	2240      	movs	r2, #64	@ 0x40
 800b512:	2100      	movs	r1, #0
 800b514:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b516:	2300      	movs	r3, #0
}
 800b518:	0018      	movs	r0, r3
 800b51a:	46bd      	mov	sp, r7
 800b51c:	b007      	add	sp, #28
 800b51e:	bd90      	pop	{r4, r7, pc}
 800b520:	80002000 	.word	0x80002000
 800b524:	80002400 	.word	0x80002400

0800b528 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b088      	sub	sp, #32
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	60b9      	str	r1, [r7, #8]
 800b532:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b538:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800b53a:	2300      	movs	r3, #0
 800b53c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2240      	movs	r2, #64	@ 0x40
 800b542:	5c9b      	ldrb	r3, [r3, r2]
 800b544:	2b01      	cmp	r3, #1
 800b546:	d101      	bne.n	800b54c <I2C_Slave_ISR_DMA+0x24>
 800b548:	2302      	movs	r3, #2
 800b54a:	e0cd      	b.n	800b6e8 <I2C_Slave_ISR_DMA+0x1c0>
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2240      	movs	r2, #64	@ 0x40
 800b550:	2101      	movs	r1, #1
 800b552:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	2220      	movs	r2, #32
 800b558:	4013      	ands	r3, r2
 800b55a:	d009      	beq.n	800b570 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2220      	movs	r2, #32
 800b560:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b562:	d005      	beq.n	800b570 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800b564:	68ba      	ldr	r2, [r7, #8]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	0011      	movs	r1, r2
 800b56a:	0018      	movs	r0, r3
 800b56c:	f000 fada 	bl	800bb24 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	2210      	movs	r2, #16
 800b574:	4013      	ands	r3, r2
 800b576:	d100      	bne.n	800b57a <I2C_Slave_ISR_DMA+0x52>
 800b578:	e0a3      	b.n	800b6c2 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2210      	movs	r2, #16
 800b57e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b580:	d100      	bne.n	800b584 <I2C_Slave_ISR_DMA+0x5c>
 800b582:	e09e      	b.n	800b6c2 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	2380      	movs	r3, #128	@ 0x80
 800b588:	01db      	lsls	r3, r3, #7
 800b58a:	4013      	ands	r3, r2
 800b58c:	d105      	bne.n	800b59a <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	2380      	movs	r3, #128	@ 0x80
 800b592:	021b      	lsls	r3, r3, #8
 800b594:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b596:	d100      	bne.n	800b59a <I2C_Slave_ISR_DMA+0x72>
 800b598:	e08c      	b.n	800b6b4 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00c      	beq.n	800b5bc <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	2380      	movs	r3, #128	@ 0x80
 800b5a6:	021b      	lsls	r3, r3, #8
 800b5a8:	4013      	ands	r3, r2
 800b5aa:	d007      	beq.n	800b5bc <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d101      	bne.n	800b5bc <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d00c      	beq.n	800b5de <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800b5c4:	687a      	ldr	r2, [r7, #4]
 800b5c6:	2380      	movs	r3, #128	@ 0x80
 800b5c8:	01db      	lsls	r3, r3, #7
 800b5ca:	4013      	ands	r3, r2
 800b5cc:	d007      	beq.n	800b5de <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d101      	bne.n	800b5de <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800b5de:	69fb      	ldr	r3, [r7, #28]
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d12d      	bne.n	800b640 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2241      	movs	r2, #65	@ 0x41
 800b5e8:	5c9b      	ldrb	r3, [r3, r2]
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	2b28      	cmp	r3, #40	@ 0x28
 800b5ee:	d10b      	bne.n	800b608 <I2C_Slave_ISR_DMA+0xe0>
 800b5f0:	69ba      	ldr	r2, [r7, #24]
 800b5f2:	2380      	movs	r3, #128	@ 0x80
 800b5f4:	049b      	lsls	r3, r3, #18
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d106      	bne.n	800b608 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800b5fa:	68ba      	ldr	r2, [r7, #8]
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	0011      	movs	r1, r2
 800b600:	0018      	movs	r0, r3
 800b602:	f000 fbaf 	bl	800bd64 <I2C_ITListenCplt>
 800b606:	e054      	b.n	800b6b2 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	2241      	movs	r2, #65	@ 0x41
 800b60c:	5c9b      	ldrb	r3, [r3, r2]
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	2b29      	cmp	r3, #41	@ 0x29
 800b612:	d110      	bne.n	800b636 <I2C_Slave_ISR_DMA+0x10e>
 800b614:	69bb      	ldr	r3, [r7, #24]
 800b616:	4a36      	ldr	r2, [pc, #216]	@ (800b6f0 <I2C_Slave_ISR_DMA+0x1c8>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d00c      	beq.n	800b636 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	2210      	movs	r2, #16
 800b622:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	0018      	movs	r0, r3
 800b628:	f000 fd1f 	bl	800c06a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	0018      	movs	r0, r3
 800b630:	f000 f946 	bl	800b8c0 <I2C_ITSlaveSeqCplt>
 800b634:	e03d      	b.n	800b6b2 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	2210      	movs	r2, #16
 800b63c:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800b63e:	e03e      	b.n	800b6be <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	2210      	movs	r2, #16
 800b646:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b64c:	2204      	movs	r2, #4
 800b64e:	431a      	orrs	r2, r3
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800b654:	2317      	movs	r3, #23
 800b656:	18fb      	adds	r3, r7, r3
 800b658:	68fa      	ldr	r2, [r7, #12]
 800b65a:	2141      	movs	r1, #65	@ 0x41
 800b65c:	5c52      	ldrb	r2, [r2, r1]
 800b65e:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b660:	69bb      	ldr	r3, [r7, #24]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d004      	beq.n	800b670 <I2C_Slave_ISR_DMA+0x148>
 800b666:	69ba      	ldr	r2, [r7, #24]
 800b668:	2380      	movs	r3, #128	@ 0x80
 800b66a:	045b      	lsls	r3, r3, #17
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d126      	bne.n	800b6be <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b670:	2217      	movs	r2, #23
 800b672:	18bb      	adds	r3, r7, r2
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	2b21      	cmp	r3, #33	@ 0x21
 800b678:	d003      	beq.n	800b682 <I2C_Slave_ISR_DMA+0x15a>
 800b67a:	18bb      	adds	r3, r7, r2
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	2b29      	cmp	r3, #41	@ 0x29
 800b680:	d103      	bne.n	800b68a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2221      	movs	r2, #33	@ 0x21
 800b686:	631a      	str	r2, [r3, #48]	@ 0x30
 800b688:	e00b      	b.n	800b6a2 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b68a:	2217      	movs	r2, #23
 800b68c:	18bb      	adds	r3, r7, r2
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	2b22      	cmp	r3, #34	@ 0x22
 800b692:	d003      	beq.n	800b69c <I2C_Slave_ISR_DMA+0x174>
 800b694:	18bb      	adds	r3, r7, r2
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	2b2a      	cmp	r3, #42	@ 0x2a
 800b69a:	d102      	bne.n	800b6a2 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2222      	movs	r2, #34	@ 0x22
 800b6a0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	0011      	movs	r1, r2
 800b6aa:	0018      	movs	r0, r3
 800b6ac:	f000 fbb2 	bl	800be14 <I2C_ITError>
      if (treatdmanack == 1U)
 800b6b0:	e005      	b.n	800b6be <I2C_Slave_ISR_DMA+0x196>
 800b6b2:	e004      	b.n	800b6be <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	2210      	movs	r2, #16
 800b6ba:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b6bc:	e00f      	b.n	800b6de <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800b6be:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b6c0:	e00d      	b.n	800b6de <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	2208      	movs	r2, #8
 800b6c6:	4013      	ands	r3, r2
 800b6c8:	d009      	beq.n	800b6de <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2208      	movs	r2, #8
 800b6ce:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b6d0:	d005      	beq.n	800b6de <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800b6d2:	68ba      	ldr	r2, [r7, #8]
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	0011      	movs	r1, r2
 800b6d8:	0018      	movs	r0, r3
 800b6da:	f000 f80b 	bl	800b6f4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2240      	movs	r2, #64	@ 0x40
 800b6e2:	2100      	movs	r1, #0
 800b6e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b6e6:	2300      	movs	r3, #0
}
 800b6e8:	0018      	movs	r0, r3
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	b008      	add	sp, #32
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	ffff0000 	.word	0xffff0000

0800b6f4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b6f4:	b5b0      	push	{r4, r5, r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2241      	movs	r2, #65	@ 0x41
 800b702:	5c9b      	ldrb	r3, [r3, r2]
 800b704:	b2db      	uxtb	r3, r3
 800b706:	001a      	movs	r2, r3
 800b708:	2328      	movs	r3, #40	@ 0x28
 800b70a:	4013      	ands	r3, r2
 800b70c:	2b28      	cmp	r3, #40	@ 0x28
 800b70e:	d000      	beq.n	800b712 <I2C_ITAddrCplt+0x1e>
 800b710:	e088      	b.n	800b824 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	699b      	ldr	r3, [r3, #24]
 800b718:	0c1b      	lsrs	r3, r3, #16
 800b71a:	b2da      	uxtb	r2, r3
 800b71c:	250f      	movs	r5, #15
 800b71e:	197b      	adds	r3, r7, r5
 800b720:	2101      	movs	r1, #1
 800b722:	400a      	ands	r2, r1
 800b724:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	699b      	ldr	r3, [r3, #24]
 800b72c:	0c1b      	lsrs	r3, r3, #16
 800b72e:	b29a      	uxth	r2, r3
 800b730:	200c      	movs	r0, #12
 800b732:	183b      	adds	r3, r7, r0
 800b734:	21fe      	movs	r1, #254	@ 0xfe
 800b736:	400a      	ands	r2, r1
 800b738:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	b29a      	uxth	r2, r3
 800b742:	240a      	movs	r4, #10
 800b744:	193b      	adds	r3, r7, r4
 800b746:	0592      	lsls	r2, r2, #22
 800b748:	0d92      	lsrs	r2, r2, #22
 800b74a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	68db      	ldr	r3, [r3, #12]
 800b752:	b29a      	uxth	r2, r3
 800b754:	2308      	movs	r3, #8
 800b756:	18fb      	adds	r3, r7, r3
 800b758:	21fe      	movs	r1, #254	@ 0xfe
 800b75a:	400a      	ands	r2, r1
 800b75c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	68db      	ldr	r3, [r3, #12]
 800b762:	2b02      	cmp	r3, #2
 800b764:	d148      	bne.n	800b7f8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800b766:	0021      	movs	r1, r4
 800b768:	187b      	adds	r3, r7, r1
 800b76a:	881b      	ldrh	r3, [r3, #0]
 800b76c:	09db      	lsrs	r3, r3, #7
 800b76e:	b29a      	uxth	r2, r3
 800b770:	183b      	adds	r3, r7, r0
 800b772:	881b      	ldrh	r3, [r3, #0]
 800b774:	4053      	eors	r3, r2
 800b776:	b29b      	uxth	r3, r3
 800b778:	001a      	movs	r2, r3
 800b77a:	2306      	movs	r3, #6
 800b77c:	4013      	ands	r3, r2
 800b77e:	d120      	bne.n	800b7c2 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800b780:	183b      	adds	r3, r7, r0
 800b782:	187a      	adds	r2, r7, r1
 800b784:	8812      	ldrh	r2, [r2, #0]
 800b786:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b78c:	1c5a      	adds	r2, r3, #1
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b796:	2b02      	cmp	r3, #2
 800b798:	d14c      	bne.n	800b834 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2200      	movs	r2, #0
 800b79e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	2208      	movs	r2, #8
 800b7a6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2240      	movs	r2, #64	@ 0x40
 800b7ac:	2100      	movs	r1, #0
 800b7ae:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b7b0:	183b      	adds	r3, r7, r0
 800b7b2:	881a      	ldrh	r2, [r3, #0]
 800b7b4:	197b      	adds	r3, r7, r5
 800b7b6:	7819      	ldrb	r1, [r3, #0]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	0018      	movs	r0, r3
 800b7bc:	f7ff fa39 	bl	800ac32 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b7c0:	e038      	b.n	800b834 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800b7c2:	240c      	movs	r4, #12
 800b7c4:	193b      	adds	r3, r7, r4
 800b7c6:	2208      	movs	r2, #8
 800b7c8:	18ba      	adds	r2, r7, r2
 800b7ca:	8812      	ldrh	r2, [r2, #0]
 800b7cc:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b7ce:	2380      	movs	r3, #128	@ 0x80
 800b7d0:	021a      	lsls	r2, r3, #8
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	0011      	movs	r1, r2
 800b7d6:	0018      	movs	r0, r3
 800b7d8:	f000 fe0a 	bl	800c3f0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2240      	movs	r2, #64	@ 0x40
 800b7e0:	2100      	movs	r1, #0
 800b7e2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b7e4:	193b      	adds	r3, r7, r4
 800b7e6:	881a      	ldrh	r2, [r3, #0]
 800b7e8:	230f      	movs	r3, #15
 800b7ea:	18fb      	adds	r3, r7, r3
 800b7ec:	7819      	ldrb	r1, [r3, #0]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	0018      	movs	r0, r3
 800b7f2:	f7ff fa1e 	bl	800ac32 <HAL_I2C_AddrCallback>
}
 800b7f6:	e01d      	b.n	800b834 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b7f8:	2380      	movs	r3, #128	@ 0x80
 800b7fa:	021a      	lsls	r2, r3, #8
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	0011      	movs	r1, r2
 800b800:	0018      	movs	r0, r3
 800b802:	f000 fdf5 	bl	800c3f0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2240      	movs	r2, #64	@ 0x40
 800b80a:	2100      	movs	r1, #0
 800b80c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b80e:	230c      	movs	r3, #12
 800b810:	18fb      	adds	r3, r7, r3
 800b812:	881a      	ldrh	r2, [r3, #0]
 800b814:	230f      	movs	r3, #15
 800b816:	18fb      	adds	r3, r7, r3
 800b818:	7819      	ldrb	r1, [r3, #0]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	0018      	movs	r0, r3
 800b81e:	f7ff fa08 	bl	800ac32 <HAL_I2C_AddrCallback>
}
 800b822:	e007      	b.n	800b834 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2208      	movs	r2, #8
 800b82a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2240      	movs	r2, #64	@ 0x40
 800b830:	2100      	movs	r1, #0
 800b832:	5499      	strb	r1, [r3, r2]
}
 800b834:	46c0      	nop			@ (mov r8, r8)
 800b836:	46bd      	mov	sp, r7
 800b838:	b004      	add	sp, #16
 800b83a:	bdb0      	pop	{r4, r5, r7, pc}

0800b83c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b082      	sub	sp, #8
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2242      	movs	r2, #66	@ 0x42
 800b848:	2100      	movs	r1, #0
 800b84a:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2241      	movs	r2, #65	@ 0x41
 800b850:	5c9b      	ldrb	r3, [r3, r2]
 800b852:	b2db      	uxtb	r3, r3
 800b854:	2b21      	cmp	r3, #33	@ 0x21
 800b856:	d117      	bne.n	800b888 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2241      	movs	r2, #65	@ 0x41
 800b85c:	2120      	movs	r1, #32
 800b85e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2211      	movs	r2, #17
 800b864:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2200      	movs	r2, #0
 800b86a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2101      	movs	r1, #1
 800b870:	0018      	movs	r0, r3
 800b872:	f000 fdbd 	bl	800c3f0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2240      	movs	r2, #64	@ 0x40
 800b87a:	2100      	movs	r1, #0
 800b87c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	0018      	movs	r0, r3
 800b882:	f7ff f9b6 	bl	800abf2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b886:	e016      	b.n	800b8b6 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2241      	movs	r2, #65	@ 0x41
 800b88c:	2120      	movs	r1, #32
 800b88e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2212      	movs	r2, #18
 800b894:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2102      	movs	r1, #2
 800b8a0:	0018      	movs	r0, r3
 800b8a2:	f000 fda5 	bl	800c3f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2240      	movs	r2, #64	@ 0x40
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	0018      	movs	r0, r3
 800b8b2:	f7ff f9a6 	bl	800ac02 <HAL_I2C_MasterRxCpltCallback>
}
 800b8b6:	46c0      	nop			@ (mov r8, r8)
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	b002      	add	sp, #8
 800b8bc:	bd80      	pop	{r7, pc}
	...

0800b8c0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2242      	movs	r2, #66	@ 0x42
 800b8d4:	2100      	movs	r1, #0
 800b8d6:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b8d8:	68fa      	ldr	r2, [r7, #12]
 800b8da:	2380      	movs	r3, #128	@ 0x80
 800b8dc:	01db      	lsls	r3, r3, #7
 800b8de:	4013      	ands	r3, r2
 800b8e0:	d008      	beq.n	800b8f4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4924      	ldr	r1, [pc, #144]	@ (800b980 <I2C_ITSlaveSeqCplt+0xc0>)
 800b8ee:	400a      	ands	r2, r1
 800b8f0:	601a      	str	r2, [r3, #0]
 800b8f2:	e00c      	b.n	800b90e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b8f4:	68fa      	ldr	r2, [r7, #12]
 800b8f6:	2380      	movs	r3, #128	@ 0x80
 800b8f8:	021b      	lsls	r3, r3, #8
 800b8fa:	4013      	ands	r3, r2
 800b8fc:	d007      	beq.n	800b90e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	491e      	ldr	r1, [pc, #120]	@ (800b984 <I2C_ITSlaveSeqCplt+0xc4>)
 800b90a:	400a      	ands	r2, r1
 800b90c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2241      	movs	r2, #65	@ 0x41
 800b912:	5c9b      	ldrb	r3, [r3, r2]
 800b914:	b2db      	uxtb	r3, r3
 800b916:	2b29      	cmp	r3, #41	@ 0x29
 800b918:	d114      	bne.n	800b944 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2241      	movs	r2, #65	@ 0x41
 800b91e:	2128      	movs	r1, #40	@ 0x28
 800b920:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2221      	movs	r2, #33	@ 0x21
 800b926:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2101      	movs	r1, #1
 800b92c:	0018      	movs	r0, r3
 800b92e:	f000 fd5f 	bl	800c3f0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2240      	movs	r2, #64	@ 0x40
 800b936:	2100      	movs	r1, #0
 800b938:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	0018      	movs	r0, r3
 800b93e:	f7ff f968 	bl	800ac12 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b942:	e019      	b.n	800b978 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2241      	movs	r2, #65	@ 0x41
 800b948:	5c9b      	ldrb	r3, [r3, r2]
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b94e:	d113      	bne.n	800b978 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2241      	movs	r2, #65	@ 0x41
 800b954:	2128      	movs	r1, #40	@ 0x28
 800b956:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2222      	movs	r2, #34	@ 0x22
 800b95c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2102      	movs	r1, #2
 800b962:	0018      	movs	r0, r3
 800b964:	f000 fd44 	bl	800c3f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2240      	movs	r2, #64	@ 0x40
 800b96c:	2100      	movs	r1, #0
 800b96e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	0018      	movs	r0, r3
 800b974:	f7ff f955 	bl	800ac22 <HAL_I2C_SlaveRxCpltCallback>
}
 800b978:	46c0      	nop			@ (mov r8, r8)
 800b97a:	46bd      	mov	sp, r7
 800b97c:	b004      	add	sp, #16
 800b97e:	bd80      	pop	{r7, pc}
 800b980:	ffffbfff 	.word	0xffffbfff
 800b984:	ffff7fff 	.word	0xffff7fff

0800b988 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b086      	sub	sp, #24
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2220      	movs	r2, #32
 800b99c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2241      	movs	r2, #65	@ 0x41
 800b9a2:	5c9b      	ldrb	r3, [r3, r2]
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	2b21      	cmp	r3, #33	@ 0x21
 800b9a8:	d108      	bne.n	800b9bc <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2101      	movs	r1, #1
 800b9ae:	0018      	movs	r0, r3
 800b9b0:	f000 fd1e 	bl	800c3f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2211      	movs	r2, #17
 800b9b8:	631a      	str	r2, [r3, #48]	@ 0x30
 800b9ba:	e00d      	b.n	800b9d8 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2241      	movs	r2, #65	@ 0x41
 800b9c0:	5c9b      	ldrb	r3, [r3, r2]
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	2b22      	cmp	r3, #34	@ 0x22
 800b9c6:	d107      	bne.n	800b9d8 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2102      	movs	r1, #2
 800b9cc:	0018      	movs	r0, r3
 800b9ce:	f000 fd0f 	bl	800c3f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2212      	movs	r2, #18
 800b9d6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	685a      	ldr	r2, [r3, #4]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	494e      	ldr	r1, [pc, #312]	@ (800bb1c <I2C_ITMasterCplt+0x194>)
 800b9e4:	400a      	ands	r2, r1
 800b9e6:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	4a4b      	ldr	r2, [pc, #300]	@ (800bb20 <I2C_ITMasterCplt+0x198>)
 800b9f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	2210      	movs	r2, #16
 800b9f8:	4013      	ands	r3, r2
 800b9fa:	d009      	beq.n	800ba10 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2210      	movs	r2, #16
 800ba02:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba08:	2204      	movs	r2, #4
 800ba0a:	431a      	orrs	r2, r3
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2241      	movs	r2, #65	@ 0x41
 800ba14:	5c9b      	ldrb	r3, [r3, r2]
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	2b60      	cmp	r3, #96	@ 0x60
 800ba1a:	d109      	bne.n	800ba30 <I2C_ITMasterCplt+0xa8>
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	2204      	movs	r2, #4
 800ba20:	4013      	ands	r3, r2
 800ba22:	d005      	beq.n	800ba30 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	0018      	movs	r0, r3
 800ba34:	f000 fb19 	bl	800c06a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba3c:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2241      	movs	r2, #65	@ 0x41
 800ba42:	5c9b      	ldrb	r3, [r3, r2]
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	2b60      	cmp	r3, #96	@ 0x60
 800ba48:	d002      	beq.n	800ba50 <I2C_ITMasterCplt+0xc8>
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d007      	beq.n	800ba60 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	0011      	movs	r1, r2
 800ba58:	0018      	movs	r0, r3
 800ba5a:	f000 f9db 	bl	800be14 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ba5e:	e058      	b.n	800bb12 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2241      	movs	r2, #65	@ 0x41
 800ba64:	5c9b      	ldrb	r3, [r3, r2]
 800ba66:	b2db      	uxtb	r3, r3
 800ba68:	2b21      	cmp	r3, #33	@ 0x21
 800ba6a:	d126      	bne.n	800baba <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2241      	movs	r2, #65	@ 0x41
 800ba70:	2120      	movs	r1, #32
 800ba72:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2200      	movs	r2, #0
 800ba78:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2242      	movs	r2, #66	@ 0x42
 800ba7e:	5c9b      	ldrb	r3, [r3, r2]
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	2b40      	cmp	r3, #64	@ 0x40
 800ba84:	d10c      	bne.n	800baa0 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2242      	movs	r2, #66	@ 0x42
 800ba8a:	2100      	movs	r1, #0
 800ba8c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2240      	movs	r2, #64	@ 0x40
 800ba92:	2100      	movs	r1, #0
 800ba94:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	0018      	movs	r0, r3
 800ba9a:	f7ff f8e2 	bl	800ac62 <HAL_I2C_MemTxCpltCallback>
}
 800ba9e:	e038      	b.n	800bb12 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2242      	movs	r2, #66	@ 0x42
 800baa4:	2100      	movs	r1, #0
 800baa6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2240      	movs	r2, #64	@ 0x40
 800baac:	2100      	movs	r1, #0
 800baae:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	0018      	movs	r0, r3
 800bab4:	f7ff f89d 	bl	800abf2 <HAL_I2C_MasterTxCpltCallback>
}
 800bab8:	e02b      	b.n	800bb12 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2241      	movs	r2, #65	@ 0x41
 800babe:	5c9b      	ldrb	r3, [r3, r2]
 800bac0:	b2db      	uxtb	r3, r3
 800bac2:	2b22      	cmp	r3, #34	@ 0x22
 800bac4:	d125      	bne.n	800bb12 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2241      	movs	r2, #65	@ 0x41
 800baca:	2120      	movs	r1, #32
 800bacc:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2242      	movs	r2, #66	@ 0x42
 800bad8:	5c9b      	ldrb	r3, [r3, r2]
 800bada:	b2db      	uxtb	r3, r3
 800badc:	2b40      	cmp	r3, #64	@ 0x40
 800bade:	d10c      	bne.n	800bafa <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2242      	movs	r2, #66	@ 0x42
 800bae4:	2100      	movs	r1, #0
 800bae6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2240      	movs	r2, #64	@ 0x40
 800baec:	2100      	movs	r1, #0
 800baee:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	0018      	movs	r0, r3
 800baf4:	f7ff f8bd 	bl	800ac72 <HAL_I2C_MemRxCpltCallback>
}
 800baf8:	e00b      	b.n	800bb12 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2242      	movs	r2, #66	@ 0x42
 800bafe:	2100      	movs	r1, #0
 800bb00:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2240      	movs	r2, #64	@ 0x40
 800bb06:	2100      	movs	r1, #0
 800bb08:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	0018      	movs	r0, r3
 800bb0e:	f7ff f878 	bl	800ac02 <HAL_I2C_MasterRxCpltCallback>
}
 800bb12:	46c0      	nop			@ (mov r8, r8)
 800bb14:	46bd      	mov	sp, r7
 800bb16:	b006      	add	sp, #24
 800bb18:	bd80      	pop	{r7, pc}
 800bb1a:	46c0      	nop			@ (mov r8, r8)
 800bb1c:	fe00e800 	.word	0xfe00e800
 800bb20:	ffff0000 	.word	0xffff0000

0800bb24 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b086      	sub	sp, #24
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800bb3a:	200f      	movs	r0, #15
 800bb3c:	183b      	adds	r3, r7, r0
 800bb3e:	687a      	ldr	r2, [r7, #4]
 800bb40:	2141      	movs	r1, #65	@ 0x41
 800bb42:	5c52      	ldrb	r2, [r2, r1]
 800bb44:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	2220      	movs	r2, #32
 800bb4c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800bb4e:	183b      	adds	r3, r7, r0
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	2b21      	cmp	r3, #33	@ 0x21
 800bb54:	d003      	beq.n	800bb5e <I2C_ITSlaveCplt+0x3a>
 800bb56:	183b      	adds	r3, r7, r0
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	2b29      	cmp	r3, #41	@ 0x29
 800bb5c:	d109      	bne.n	800bb72 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800bb5e:	4a7b      	ldr	r2, [pc, #492]	@ (800bd4c <I2C_ITSlaveCplt+0x228>)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	0011      	movs	r1, r2
 800bb64:	0018      	movs	r0, r3
 800bb66:	f000 fc43 	bl	800c3f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2221      	movs	r2, #33	@ 0x21
 800bb6e:	631a      	str	r2, [r3, #48]	@ 0x30
 800bb70:	e011      	b.n	800bb96 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800bb72:	220f      	movs	r2, #15
 800bb74:	18bb      	adds	r3, r7, r2
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	2b22      	cmp	r3, #34	@ 0x22
 800bb7a:	d003      	beq.n	800bb84 <I2C_ITSlaveCplt+0x60>
 800bb7c:	18bb      	adds	r3, r7, r2
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb82:	d108      	bne.n	800bb96 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800bb84:	4a72      	ldr	r2, [pc, #456]	@ (800bd50 <I2C_ITSlaveCplt+0x22c>)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	0011      	movs	r1, r2
 800bb8a:	0018      	movs	r0, r3
 800bb8c:	f000 fc30 	bl	800c3f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2222      	movs	r2, #34	@ 0x22
 800bb94:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	685a      	ldr	r2, [r3, #4]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2180      	movs	r1, #128	@ 0x80
 800bba2:	0209      	lsls	r1, r1, #8
 800bba4:	430a      	orrs	r2, r1
 800bba6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	685a      	ldr	r2, [r3, #4]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	4968      	ldr	r1, [pc, #416]	@ (800bd54 <I2C_ITSlaveCplt+0x230>)
 800bbb4:	400a      	ands	r2, r1
 800bbb6:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	0018      	movs	r0, r3
 800bbbc:	f000 fa55 	bl	800c06a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800bbc0:	693a      	ldr	r2, [r7, #16]
 800bbc2:	2380      	movs	r3, #128	@ 0x80
 800bbc4:	01db      	lsls	r3, r3, #7
 800bbc6:	4013      	ands	r3, r2
 800bbc8:	d013      	beq.n	800bbf2 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4960      	ldr	r1, [pc, #384]	@ (800bd58 <I2C_ITSlaveCplt+0x234>)
 800bbd6:	400a      	ands	r2, r1
 800bbd8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d01f      	beq.n	800bc22 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	b29a      	uxth	r2, r3
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bbf0:	e017      	b.n	800bc22 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800bbf2:	693a      	ldr	r2, [r7, #16]
 800bbf4:	2380      	movs	r3, #128	@ 0x80
 800bbf6:	021b      	lsls	r3, r3, #8
 800bbf8:	4013      	ands	r3, r2
 800bbfa:	d012      	beq.n	800bc22 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	681a      	ldr	r2, [r3, #0]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4955      	ldr	r1, [pc, #340]	@ (800bd5c <I2C_ITSlaveCplt+0x238>)
 800bc08:	400a      	ands	r2, r1
 800bc0a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d006      	beq.n	800bc22 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	b29a      	uxth	r2, r3
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	2204      	movs	r2, #4
 800bc26:	4013      	ands	r3, r2
 800bc28:	d020      	beq.n	800bc6c <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	2204      	movs	r2, #4
 800bc2e:	4393      	bics	r3, r2
 800bc30:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc3c:	b2d2      	uxtb	r2, r2
 800bc3e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc44:	1c5a      	adds	r2, r3, #1
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d00c      	beq.n	800bc6c <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc56:	3b01      	subs	r3, #1
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	3b01      	subs	r3, #1
 800bc66:	b29a      	uxth	r2, r3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d005      	beq.n	800bc82 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc7a:	2204      	movs	r2, #4
 800bc7c:	431a      	orrs	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2242      	movs	r2, #66	@ 0x42
 800bc86:	2100      	movs	r1, #0
 800bc88:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d013      	beq.n	800bcc0 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	0011      	movs	r1, r2
 800bca0:	0018      	movs	r0, r3
 800bca2:	f000 f8b7 	bl	800be14 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2241      	movs	r2, #65	@ 0x41
 800bcaa:	5c9b      	ldrb	r3, [r3, r2]
 800bcac:	b2db      	uxtb	r3, r3
 800bcae:	2b28      	cmp	r3, #40	@ 0x28
 800bcb0:	d147      	bne.n	800bd42 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800bcb2:	697a      	ldr	r2, [r7, #20]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	0011      	movs	r1, r2
 800bcb8:	0018      	movs	r0, r3
 800bcba:	f000 f853 	bl	800bd64 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bcbe:	e040      	b.n	800bd42 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcc4:	4a26      	ldr	r2, [pc, #152]	@ (800bd60 <I2C_ITSlaveCplt+0x23c>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d016      	beq.n	800bcf8 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	0018      	movs	r0, r3
 800bcce:	f7ff fdf7 	bl	800b8c0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	4a22      	ldr	r2, [pc, #136]	@ (800bd60 <I2C_ITSlaveCplt+0x23c>)
 800bcd6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2241      	movs	r2, #65	@ 0x41
 800bcdc:	2120      	movs	r1, #32
 800bcde:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2200      	movs	r2, #0
 800bce4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2240      	movs	r2, #64	@ 0x40
 800bcea:	2100      	movs	r1, #0
 800bcec:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	0018      	movs	r0, r3
 800bcf2:	f7fe ffae 	bl	800ac52 <HAL_I2C_ListenCpltCallback>
}
 800bcf6:	e024      	b.n	800bd42 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2241      	movs	r2, #65	@ 0x41
 800bcfc:	5c9b      	ldrb	r3, [r3, r2]
 800bcfe:	b2db      	uxtb	r3, r3
 800bd00:	2b22      	cmp	r3, #34	@ 0x22
 800bd02:	d10f      	bne.n	800bd24 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2241      	movs	r2, #65	@ 0x41
 800bd08:	2120      	movs	r1, #32
 800bd0a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2240      	movs	r2, #64	@ 0x40
 800bd16:	2100      	movs	r1, #0
 800bd18:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	0018      	movs	r0, r3
 800bd1e:	f7fe ff80 	bl	800ac22 <HAL_I2C_SlaveRxCpltCallback>
}
 800bd22:	e00e      	b.n	800bd42 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2241      	movs	r2, #65	@ 0x41
 800bd28:	2120      	movs	r1, #32
 800bd2a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2240      	movs	r2, #64	@ 0x40
 800bd36:	2100      	movs	r1, #0
 800bd38:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	0018      	movs	r0, r3
 800bd3e:	f7fe ff68 	bl	800ac12 <HAL_I2C_SlaveTxCpltCallback>
}
 800bd42:	46c0      	nop			@ (mov r8, r8)
 800bd44:	46bd      	mov	sp, r7
 800bd46:	b006      	add	sp, #24
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	46c0      	nop			@ (mov r8, r8)
 800bd4c:	00008001 	.word	0x00008001
 800bd50:	00008002 	.word	0x00008002
 800bd54:	fe00e800 	.word	0xfe00e800
 800bd58:	ffffbfff 	.word	0xffffbfff
 800bd5c:	ffff7fff 	.word	0xffff7fff
 800bd60:	ffff0000 	.word	0xffff0000

0800bd64 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	4a26      	ldr	r2, [pc, #152]	@ (800be0c <I2C_ITListenCplt+0xa8>)
 800bd72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2200      	movs	r2, #0
 800bd78:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2241      	movs	r2, #65	@ 0x41
 800bd7e:	2120      	movs	r1, #32
 800bd80:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2242      	movs	r2, #66	@ 0x42
 800bd86:	2100      	movs	r1, #0
 800bd88:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	2204      	movs	r2, #4
 800bd94:	4013      	ands	r3, r2
 800bd96:	d022      	beq.n	800bdde <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bda2:	b2d2      	uxtb	r2, r2
 800bda4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdaa:	1c5a      	adds	r2, r3, #1
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d012      	beq.n	800bdde <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bdbc:	3b01      	subs	r3, #1
 800bdbe:	b29a      	uxth	r2, r3
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	3b01      	subs	r3, #1
 800bdcc:	b29a      	uxth	r2, r3
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdd6:	2204      	movs	r2, #4
 800bdd8:	431a      	orrs	r2, r3
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bdde:	4a0c      	ldr	r2, [pc, #48]	@ (800be10 <I2C_ITListenCplt+0xac>)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	0011      	movs	r1, r2
 800bde4:	0018      	movs	r0, r3
 800bde6:	f000 fb03 	bl	800c3f0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2210      	movs	r2, #16
 800bdf0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2240      	movs	r2, #64	@ 0x40
 800bdf6:	2100      	movs	r1, #0
 800bdf8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	0018      	movs	r0, r3
 800bdfe:	f7fe ff28 	bl	800ac52 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800be02:	46c0      	nop			@ (mov r8, r8)
 800be04:	46bd      	mov	sp, r7
 800be06:	b002      	add	sp, #8
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	46c0      	nop			@ (mov r8, r8)
 800be0c:	ffff0000 	.word	0xffff0000
 800be10:	00008003 	.word	0x00008003

0800be14 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800be1e:	200f      	movs	r0, #15
 800be20:	183b      	adds	r3, r7, r0
 800be22:	687a      	ldr	r2, [r7, #4]
 800be24:	2141      	movs	r1, #65	@ 0x41
 800be26:	5c52      	ldrb	r2, [r2, r1]
 800be28:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2242      	movs	r2, #66	@ 0x42
 800be2e:	2100      	movs	r1, #0
 800be30:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	4a72      	ldr	r2, [pc, #456]	@ (800c000 <I2C_ITError+0x1ec>)
 800be36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2200      	movs	r2, #0
 800be3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	431a      	orrs	r2, r3
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800be4a:	183b      	adds	r3, r7, r0
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	2b28      	cmp	r3, #40	@ 0x28
 800be50:	d007      	beq.n	800be62 <I2C_ITError+0x4e>
 800be52:	183b      	adds	r3, r7, r0
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	2b29      	cmp	r3, #41	@ 0x29
 800be58:	d003      	beq.n	800be62 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800be5a:	183b      	adds	r3, r7, r0
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800be60:	d10c      	bne.n	800be7c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2103      	movs	r1, #3
 800be66:	0018      	movs	r0, r3
 800be68:	f000 fac2 	bl	800c3f0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2241      	movs	r2, #65	@ 0x41
 800be70:	2128      	movs	r1, #40	@ 0x28
 800be72:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	4a63      	ldr	r2, [pc, #396]	@ (800c004 <I2C_ITError+0x1f0>)
 800be78:	635a      	str	r2, [r3, #52]	@ 0x34
 800be7a:	e032      	b.n	800bee2 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800be7c:	4a62      	ldr	r2, [pc, #392]	@ (800c008 <I2C_ITError+0x1f4>)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	0011      	movs	r1, r2
 800be82:	0018      	movs	r0, r3
 800be84:	f000 fab4 	bl	800c3f0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	0018      	movs	r0, r3
 800be8c:	f000 f8ed 	bl	800c06a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2241      	movs	r2, #65	@ 0x41
 800be94:	5c9b      	ldrb	r3, [r3, r2]
 800be96:	b2db      	uxtb	r3, r3
 800be98:	2b60      	cmp	r3, #96	@ 0x60
 800be9a:	d01f      	beq.n	800bedc <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2241      	movs	r2, #65	@ 0x41
 800bea0:	2120      	movs	r1, #32
 800bea2:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	699b      	ldr	r3, [r3, #24]
 800beaa:	2220      	movs	r2, #32
 800beac:	4013      	ands	r3, r2
 800beae:	2b20      	cmp	r3, #32
 800beb0:	d114      	bne.n	800bedc <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	699b      	ldr	r3, [r3, #24]
 800beb8:	2210      	movs	r2, #16
 800beba:	4013      	ands	r3, r2
 800bebc:	2b10      	cmp	r3, #16
 800bebe:	d109      	bne.n	800bed4 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2210      	movs	r2, #16
 800bec6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800becc:	2204      	movs	r2, #4
 800bece:	431a      	orrs	r2, r3
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	2220      	movs	r2, #32
 800beda:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2200      	movs	r2, #0
 800bee0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bee6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800beec:	2b00      	cmp	r3, #0
 800beee:	d03b      	beq.n	800bf68 <I2C_ITError+0x154>
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	2b11      	cmp	r3, #17
 800bef4:	d002      	beq.n	800befc <I2C_ITError+0xe8>
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	2b21      	cmp	r3, #33	@ 0x21
 800befa:	d135      	bne.n	800bf68 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	681a      	ldr	r2, [r3, #0]
 800bf02:	2380      	movs	r3, #128	@ 0x80
 800bf04:	01db      	lsls	r3, r3, #7
 800bf06:	401a      	ands	r2, r3
 800bf08:	2380      	movs	r3, #128	@ 0x80
 800bf0a:	01db      	lsls	r3, r3, #7
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d107      	bne.n	800bf20 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	681a      	ldr	r2, [r3, #0]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	493c      	ldr	r1, [pc, #240]	@ (800c00c <I2C_ITError+0x1f8>)
 800bf1c:	400a      	ands	r2, r1
 800bf1e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf24:	0018      	movs	r0, r3
 800bf26:	f7fe f896 	bl	800a056 <HAL_DMA_GetState>
 800bf2a:	0003      	movs	r3, r0
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d016      	beq.n	800bf5e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf34:	4a36      	ldr	r2, [pc, #216]	@ (800c010 <I2C_ITError+0x1fc>)
 800bf36:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2240      	movs	r2, #64	@ 0x40
 800bf3c:	2100      	movs	r1, #0
 800bf3e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf44:	0018      	movs	r0, r3
 800bf46:	f7fd ff91 	bl	8009e6c <HAL_DMA_Abort_IT>
 800bf4a:	1e03      	subs	r3, r0, #0
 800bf4c:	d051      	beq.n	800bff2 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf58:	0018      	movs	r0, r3
 800bf5a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bf5c:	e049      	b.n	800bff2 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	0018      	movs	r0, r3
 800bf62:	f000 f859 	bl	800c018 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bf66:	e044      	b.n	800bff2 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d03b      	beq.n	800bfe8 <I2C_ITError+0x1d4>
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	2b12      	cmp	r3, #18
 800bf74:	d002      	beq.n	800bf7c <I2C_ITError+0x168>
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	2b22      	cmp	r3, #34	@ 0x22
 800bf7a:	d135      	bne.n	800bfe8 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	681a      	ldr	r2, [r3, #0]
 800bf82:	2380      	movs	r3, #128	@ 0x80
 800bf84:	021b      	lsls	r3, r3, #8
 800bf86:	401a      	ands	r2, r3
 800bf88:	2380      	movs	r3, #128	@ 0x80
 800bf8a:	021b      	lsls	r3, r3, #8
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d107      	bne.n	800bfa0 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	681a      	ldr	r2, [r3, #0]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	491e      	ldr	r1, [pc, #120]	@ (800c014 <I2C_ITError+0x200>)
 800bf9c:	400a      	ands	r2, r1
 800bf9e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfa4:	0018      	movs	r0, r3
 800bfa6:	f7fe f856 	bl	800a056 <HAL_DMA_GetState>
 800bfaa:	0003      	movs	r3, r0
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d016      	beq.n	800bfde <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfb4:	4a16      	ldr	r2, [pc, #88]	@ (800c010 <I2C_ITError+0x1fc>)
 800bfb6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2240      	movs	r2, #64	@ 0x40
 800bfbc:	2100      	movs	r1, #0
 800bfbe:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfc4:	0018      	movs	r0, r3
 800bfc6:	f7fd ff51 	bl	8009e6c <HAL_DMA_Abort_IT>
 800bfca:	1e03      	subs	r3, r0, #0
 800bfcc:	d013      	beq.n	800bff6 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfd8:	0018      	movs	r0, r3
 800bfda:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bfdc:	e00b      	b.n	800bff6 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	0018      	movs	r0, r3
 800bfe2:	f000 f819 	bl	800c018 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bfe6:	e006      	b.n	800bff6 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	0018      	movs	r0, r3
 800bfec:	f000 f814 	bl	800c018 <I2C_TreatErrorCallback>
  }
}
 800bff0:	e002      	b.n	800bff8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bff2:	46c0      	nop			@ (mov r8, r8)
 800bff4:	e000      	b.n	800bff8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bff6:	46c0      	nop			@ (mov r8, r8)
}
 800bff8:	46c0      	nop			@ (mov r8, r8)
 800bffa:	46bd      	mov	sp, r7
 800bffc:	b004      	add	sp, #16
 800bffe:	bd80      	pop	{r7, pc}
 800c000:	ffff0000 	.word	0xffff0000
 800c004:	0800aef9 	.word	0x0800aef9
 800c008:	00008003 	.word	0x00008003
 800c00c:	ffffbfff 	.word	0xffffbfff
 800c010:	0800c223 	.word	0x0800c223
 800c014:	ffff7fff 	.word	0xffff7fff

0800c018 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2241      	movs	r2, #65	@ 0x41
 800c024:	5c9b      	ldrb	r3, [r3, r2]
 800c026:	b2db      	uxtb	r3, r3
 800c028:	2b60      	cmp	r3, #96	@ 0x60
 800c02a:	d10f      	bne.n	800c04c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2241      	movs	r2, #65	@ 0x41
 800c030:	2120      	movs	r1, #32
 800c032:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2240      	movs	r2, #64	@ 0x40
 800c03e:	2100      	movs	r1, #0
 800c040:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	0018      	movs	r0, r3
 800c046:	f7fe fe24 	bl	800ac92 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c04a:	e00a      	b.n	800c062 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2200      	movs	r2, #0
 800c050:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2240      	movs	r2, #64	@ 0x40
 800c056:	2100      	movs	r1, #0
 800c058:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	0018      	movs	r0, r3
 800c05e:	f7fe fe10 	bl	800ac82 <HAL_I2C_ErrorCallback>
}
 800c062:	46c0      	nop			@ (mov r8, r8)
 800c064:	46bd      	mov	sp, r7
 800c066:	b002      	add	sp, #8
 800c068:	bd80      	pop	{r7, pc}

0800c06a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c06a:	b580      	push	{r7, lr}
 800c06c:	b082      	sub	sp, #8
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	699b      	ldr	r3, [r3, #24]
 800c078:	2202      	movs	r2, #2
 800c07a:	4013      	ands	r3, r2
 800c07c:	2b02      	cmp	r3, #2
 800c07e:	d103      	bne.n	800c088 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2200      	movs	r2, #0
 800c086:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	699b      	ldr	r3, [r3, #24]
 800c08e:	2201      	movs	r2, #1
 800c090:	4013      	ands	r3, r2
 800c092:	2b01      	cmp	r3, #1
 800c094:	d007      	beq.n	800c0a6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	699a      	ldr	r2, [r3, #24]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	2101      	movs	r1, #1
 800c0a2:	430a      	orrs	r2, r1
 800c0a4:	619a      	str	r2, [r3, #24]
  }
}
 800c0a6:	46c0      	nop			@ (mov r8, r8)
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	b002      	add	sp, #8
 800c0ac:	bd80      	pop	{r7, pc}
	...

0800c0b0 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0bc:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	681a      	ldr	r2, [r3, #0]
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4920      	ldr	r1, [pc, #128]	@ (800c14c <I2C_DMAMasterTransmitCplt+0x9c>)
 800c0ca:	400a      	ands	r2, r1
 800c0cc:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0d2:	b29b      	uxth	r3, r3
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d105      	bne.n	800c0e4 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2120      	movs	r1, #32
 800c0dc:	0018      	movs	r0, r3
 800c0de:	f000 f8f9 	bl	800c2d4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800c0e2:	e02e      	b.n	800c142 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0e8:	68fa      	ldr	r2, [r7, #12]
 800c0ea:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800c0ec:	189a      	adds	r2, r3, r2
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0f6:	b29b      	uxth	r3, r3
 800c0f8:	2bff      	cmp	r3, #255	@ 0xff
 800c0fa:	d903      	bls.n	800c104 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	22ff      	movs	r2, #255	@ 0xff
 800c100:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c102:	e004      	b.n	800c10e <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c108:	b29a      	uxth	r2, r3
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c116:	0019      	movs	r1, r3
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	3328      	adds	r3, #40	@ 0x28
 800c11e:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800c124:	f7fd fdfc 	bl	8009d20 <HAL_DMA_Start_IT>
 800c128:	1e03      	subs	r3, r0, #0
 800c12a:	d005      	beq.n	800c138 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2110      	movs	r1, #16
 800c130:	0018      	movs	r0, r3
 800c132:	f7ff fe6f 	bl	800be14 <I2C_ITError>
}
 800c136:	e004      	b.n	800c142 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2140      	movs	r1, #64	@ 0x40
 800c13c:	0018      	movs	r0, r3
 800c13e:	f000 f8c9 	bl	800c2d4 <I2C_Enable_IRQ>
}
 800c142:	46c0      	nop			@ (mov r8, r8)
 800c144:	46bd      	mov	sp, r7
 800c146:	b004      	add	sp, #16
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	46c0      	nop			@ (mov r8, r8)
 800c14c:	ffffbfff 	.word	0xffffbfff

0800c150 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c15c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	681a      	ldr	r2, [r3, #0]
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	4920      	ldr	r1, [pc, #128]	@ (800c1ec <I2C_DMAMasterReceiveCplt+0x9c>)
 800c16a:	400a      	ands	r2, r1
 800c16c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c172:	b29b      	uxth	r3, r3
 800c174:	2b00      	cmp	r3, #0
 800c176:	d105      	bne.n	800c184 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2120      	movs	r1, #32
 800c17c:	0018      	movs	r0, r3
 800c17e:	f000 f8a9 	bl	800c2d4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800c182:	e02e      	b.n	800c1e2 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c188:	68fa      	ldr	r2, [r7, #12]
 800c18a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800c18c:	189a      	adds	r2, r3, r2
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c196:	b29b      	uxth	r3, r3
 800c198:	2bff      	cmp	r3, #255	@ 0xff
 800c19a:	d903      	bls.n	800c1a4 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	22ff      	movs	r2, #255	@ 0xff
 800c1a0:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c1a2:	e004      	b.n	800c1ae <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c1a8:	b29a      	uxth	r2, r3
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	3324      	adds	r3, #36	@ 0x24
 800c1b8:	0019      	movs	r1, r3
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1be:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800c1c4:	f7fd fdac 	bl	8009d20 <HAL_DMA_Start_IT>
 800c1c8:	1e03      	subs	r3, r0, #0
 800c1ca:	d005      	beq.n	800c1d8 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2110      	movs	r1, #16
 800c1d0:	0018      	movs	r0, r3
 800c1d2:	f7ff fe1f 	bl	800be14 <I2C_ITError>
}
 800c1d6:	e004      	b.n	800c1e2 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	2140      	movs	r1, #64	@ 0x40
 800c1dc:	0018      	movs	r0, r3
 800c1de:	f000 f879 	bl	800c2d4 <I2C_Enable_IRQ>
}
 800c1e2:	46c0      	nop			@ (mov r8, r8)
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	b004      	add	sp, #16
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	46c0      	nop			@ (mov r8, r8)
 800c1ec:	ffff7fff 	.word	0xffff7fff

0800c1f0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1fc:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	685a      	ldr	r2, [r3, #4]
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	2180      	movs	r1, #128	@ 0x80
 800c20a:	0209      	lsls	r1, r1, #8
 800c20c:	430a      	orrs	r2, r1
 800c20e:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2110      	movs	r1, #16
 800c214:	0018      	movs	r0, r3
 800c216:	f7ff fdfd 	bl	800be14 <I2C_ITError>
}
 800c21a:	46c0      	nop			@ (mov r8, r8)
 800c21c:	46bd      	mov	sp, r7
 800c21e:	b004      	add	sp, #16
 800c220:	bd80      	pop	{r7, pc}

0800c222 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800c222:	b580      	push	{r7, lr}
 800c224:	b084      	sub	sp, #16
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c22e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c234:	2b00      	cmp	r3, #0
 800c236:	d003      	beq.n	800c240 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c23c:	2200      	movs	r2, #0
 800c23e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c244:	2b00      	cmp	r3, #0
 800c246:	d003      	beq.n	800c250 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c24c:	2200      	movs	r2, #0
 800c24e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	0018      	movs	r0, r3
 800c254:	f7ff fee0 	bl	800c018 <I2C_TreatErrorCallback>
}
 800c258:	46c0      	nop			@ (mov r8, r8)
 800c25a:	46bd      	mov	sp, r7
 800c25c:	b004      	add	sp, #16
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c260:	b590      	push	{r4, r7, lr}
 800c262:	b087      	sub	sp, #28
 800c264:	af00      	add	r7, sp, #0
 800c266:	60f8      	str	r0, [r7, #12]
 800c268:	0008      	movs	r0, r1
 800c26a:	0011      	movs	r1, r2
 800c26c:	607b      	str	r3, [r7, #4]
 800c26e:	240a      	movs	r4, #10
 800c270:	193b      	adds	r3, r7, r4
 800c272:	1c02      	adds	r2, r0, #0
 800c274:	801a      	strh	r2, [r3, #0]
 800c276:	2009      	movs	r0, #9
 800c278:	183b      	adds	r3, r7, r0
 800c27a:	1c0a      	adds	r2, r1, #0
 800c27c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c27e:	193b      	adds	r3, r7, r4
 800c280:	881b      	ldrh	r3, [r3, #0]
 800c282:	059b      	lsls	r3, r3, #22
 800c284:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c286:	183b      	adds	r3, r7, r0
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	0419      	lsls	r1, r3, #16
 800c28c:	23ff      	movs	r3, #255	@ 0xff
 800c28e:	041b      	lsls	r3, r3, #16
 800c290:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c292:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c29a:	4313      	orrs	r3, r2
 800c29c:	005b      	lsls	r3, r3, #1
 800c29e:	085b      	lsrs	r3, r3, #1
 800c2a0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c2aa:	0d51      	lsrs	r1, r2, #21
 800c2ac:	2280      	movs	r2, #128	@ 0x80
 800c2ae:	00d2      	lsls	r2, r2, #3
 800c2b0:	400a      	ands	r2, r1
 800c2b2:	4907      	ldr	r1, [pc, #28]	@ (800c2d0 <I2C_TransferConfig+0x70>)
 800c2b4:	430a      	orrs	r2, r1
 800c2b6:	43d2      	mvns	r2, r2
 800c2b8:	401a      	ands	r2, r3
 800c2ba:	0011      	movs	r1, r2
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	697a      	ldr	r2, [r7, #20]
 800c2c2:	430a      	orrs	r2, r1
 800c2c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c2c6:	46c0      	nop			@ (mov r8, r8)
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	b007      	add	sp, #28
 800c2cc:	bd90      	pop	{r4, r7, pc}
 800c2ce:	46c0      	nop			@ (mov r8, r8)
 800c2d0:	03ff63ff 	.word	0x03ff63ff

0800c2d4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	000a      	movs	r2, r1
 800c2de:	1cbb      	adds	r3, r7, #2
 800c2e0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c2ea:	4b3e      	ldr	r3, [pc, #248]	@ (800c3e4 <I2C_Enable_IRQ+0x110>)
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d035      	beq.n	800c35c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800c2f4:	4b3c      	ldr	r3, [pc, #240]	@ (800c3e8 <I2C_Enable_IRQ+0x114>)
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d030      	beq.n	800c35c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800c2fe:	4b3b      	ldr	r3, [pc, #236]	@ (800c3ec <I2C_Enable_IRQ+0x118>)
 800c300:	429a      	cmp	r2, r3
 800c302:	d02b      	beq.n	800c35c <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c304:	1cbb      	adds	r3, r7, #2
 800c306:	2200      	movs	r2, #0
 800c308:	5e9b      	ldrsh	r3, [r3, r2]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	da03      	bge.n	800c316 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	22b8      	movs	r2, #184	@ 0xb8
 800c312:	4313      	orrs	r3, r2
 800c314:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c316:	1cbb      	adds	r3, r7, #2
 800c318:	881b      	ldrh	r3, [r3, #0]
 800c31a:	2201      	movs	r2, #1
 800c31c:	4013      	ands	r3, r2
 800c31e:	d003      	beq.n	800c328 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	22f2      	movs	r2, #242	@ 0xf2
 800c324:	4313      	orrs	r3, r2
 800c326:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c328:	1cbb      	adds	r3, r7, #2
 800c32a:	881b      	ldrh	r3, [r3, #0]
 800c32c:	2202      	movs	r2, #2
 800c32e:	4013      	ands	r3, r2
 800c330:	d003      	beq.n	800c33a <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	22f4      	movs	r2, #244	@ 0xf4
 800c336:	4313      	orrs	r3, r2
 800c338:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c33a:	1cbb      	adds	r3, r7, #2
 800c33c:	881b      	ldrh	r3, [r3, #0]
 800c33e:	2b10      	cmp	r3, #16
 800c340:	d103      	bne.n	800c34a <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2290      	movs	r2, #144	@ 0x90
 800c346:	4313      	orrs	r3, r2
 800c348:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c34a:	1cbb      	adds	r3, r7, #2
 800c34c:	881b      	ldrh	r3, [r3, #0]
 800c34e:	2b20      	cmp	r3, #32
 800c350:	d13c      	bne.n	800c3cc <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	2220      	movs	r2, #32
 800c356:	4313      	orrs	r3, r2
 800c358:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c35a:	e037      	b.n	800c3cc <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c35c:	1cbb      	adds	r3, r7, #2
 800c35e:	2200      	movs	r2, #0
 800c360:	5e9b      	ldrsh	r3, [r3, r2]
 800c362:	2b00      	cmp	r3, #0
 800c364:	da03      	bge.n	800c36e <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	22b8      	movs	r2, #184	@ 0xb8
 800c36a:	4313      	orrs	r3, r2
 800c36c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c36e:	1cbb      	adds	r3, r7, #2
 800c370:	881b      	ldrh	r3, [r3, #0]
 800c372:	2201      	movs	r2, #1
 800c374:	4013      	ands	r3, r2
 800c376:	d003      	beq.n	800c380 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	22f2      	movs	r2, #242	@ 0xf2
 800c37c:	4313      	orrs	r3, r2
 800c37e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c380:	1cbb      	adds	r3, r7, #2
 800c382:	881b      	ldrh	r3, [r3, #0]
 800c384:	2202      	movs	r2, #2
 800c386:	4013      	ands	r3, r2
 800c388:	d003      	beq.n	800c392 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	22f4      	movs	r2, #244	@ 0xf4
 800c38e:	4313      	orrs	r3, r2
 800c390:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c392:	1cbb      	adds	r3, r7, #2
 800c394:	881b      	ldrh	r3, [r3, #0]
 800c396:	2b10      	cmp	r3, #16
 800c398:	d103      	bne.n	800c3a2 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	2290      	movs	r2, #144	@ 0x90
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c3a2:	1cbb      	adds	r3, r7, #2
 800c3a4:	881b      	ldrh	r3, [r3, #0]
 800c3a6:	2b20      	cmp	r3, #32
 800c3a8:	d103      	bne.n	800c3b2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2260      	movs	r2, #96	@ 0x60
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c3b6:	4b0d      	ldr	r3, [pc, #52]	@ (800c3ec <I2C_Enable_IRQ+0x118>)
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d007      	beq.n	800c3cc <I2C_Enable_IRQ+0xf8>
 800c3bc:	1cbb      	adds	r3, r7, #2
 800c3be:	881b      	ldrh	r3, [r3, #0]
 800c3c0:	2b40      	cmp	r3, #64	@ 0x40
 800c3c2:	d103      	bne.n	800c3cc <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2240      	movs	r2, #64	@ 0x40
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	6819      	ldr	r1, [r3, #0]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	68fa      	ldr	r2, [r7, #12]
 800c3d8:	430a      	orrs	r2, r1
 800c3da:	601a      	str	r2, [r3, #0]
}
 800c3dc:	46c0      	nop			@ (mov r8, r8)
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	b004      	add	sp, #16
 800c3e2:	bd80      	pop	{r7, pc}
 800c3e4:	0800b0f9 	.word	0x0800b0f9
 800c3e8:	0800b529 	.word	0x0800b529
 800c3ec:	0800b2f1 	.word	0x0800b2f1

0800c3f0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	000a      	movs	r2, r1
 800c3fa:	1cbb      	adds	r3, r7, #2
 800c3fc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800c3fe:	2300      	movs	r3, #0
 800c400:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c402:	1cbb      	adds	r3, r7, #2
 800c404:	881b      	ldrh	r3, [r3, #0]
 800c406:	2201      	movs	r2, #1
 800c408:	4013      	ands	r3, r2
 800c40a:	d010      	beq.n	800c42e <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2242      	movs	r2, #66	@ 0x42
 800c410:	4313      	orrs	r3, r2
 800c412:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2241      	movs	r2, #65	@ 0x41
 800c418:	5c9b      	ldrb	r3, [r3, r2]
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	001a      	movs	r2, r3
 800c41e:	2328      	movs	r3, #40	@ 0x28
 800c420:	4013      	ands	r3, r2
 800c422:	2b28      	cmp	r3, #40	@ 0x28
 800c424:	d003      	beq.n	800c42e <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	22b0      	movs	r2, #176	@ 0xb0
 800c42a:	4313      	orrs	r3, r2
 800c42c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c42e:	1cbb      	adds	r3, r7, #2
 800c430:	881b      	ldrh	r3, [r3, #0]
 800c432:	2202      	movs	r2, #2
 800c434:	4013      	ands	r3, r2
 800c436:	d010      	beq.n	800c45a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2244      	movs	r2, #68	@ 0x44
 800c43c:	4313      	orrs	r3, r2
 800c43e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2241      	movs	r2, #65	@ 0x41
 800c444:	5c9b      	ldrb	r3, [r3, r2]
 800c446:	b2db      	uxtb	r3, r3
 800c448:	001a      	movs	r2, r3
 800c44a:	2328      	movs	r3, #40	@ 0x28
 800c44c:	4013      	ands	r3, r2
 800c44e:	2b28      	cmp	r3, #40	@ 0x28
 800c450:	d003      	beq.n	800c45a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	22b0      	movs	r2, #176	@ 0xb0
 800c456:	4313      	orrs	r3, r2
 800c458:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c45a:	1cbb      	adds	r3, r7, #2
 800c45c:	2200      	movs	r2, #0
 800c45e:	5e9b      	ldrsh	r3, [r3, r2]
 800c460:	2b00      	cmp	r3, #0
 800c462:	da03      	bge.n	800c46c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	22b8      	movs	r2, #184	@ 0xb8
 800c468:	4313      	orrs	r3, r2
 800c46a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c46c:	1cbb      	adds	r3, r7, #2
 800c46e:	881b      	ldrh	r3, [r3, #0]
 800c470:	2b10      	cmp	r3, #16
 800c472:	d103      	bne.n	800c47c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	2290      	movs	r2, #144	@ 0x90
 800c478:	4313      	orrs	r3, r2
 800c47a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c47c:	1cbb      	adds	r3, r7, #2
 800c47e:	881b      	ldrh	r3, [r3, #0]
 800c480:	2b20      	cmp	r3, #32
 800c482:	d103      	bne.n	800c48c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	2220      	movs	r2, #32
 800c488:	4313      	orrs	r3, r2
 800c48a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800c48c:	1cbb      	adds	r3, r7, #2
 800c48e:	881b      	ldrh	r3, [r3, #0]
 800c490:	2b40      	cmp	r3, #64	@ 0x40
 800c492:	d103      	bne.n	800c49c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	2240      	movs	r2, #64	@ 0x40
 800c498:	4313      	orrs	r3, r2
 800c49a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	681a      	ldr	r2, [r3, #0]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	43d9      	mvns	r1, r3
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	400a      	ands	r2, r1
 800c4ac:	601a      	str	r2, [r3, #0]
}
 800c4ae:	46c0      	nop			@ (mov r8, r8)
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	b004      	add	sp, #16
 800c4b4:	bd80      	pop	{r7, pc}
	...

0800c4b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2241      	movs	r2, #65	@ 0x41
 800c4c6:	5c9b      	ldrb	r3, [r3, r2]
 800c4c8:	b2db      	uxtb	r3, r3
 800c4ca:	2b20      	cmp	r3, #32
 800c4cc:	d138      	bne.n	800c540 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2240      	movs	r2, #64	@ 0x40
 800c4d2:	5c9b      	ldrb	r3, [r3, r2]
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d101      	bne.n	800c4dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c4d8:	2302      	movs	r3, #2
 800c4da:	e032      	b.n	800c542 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2240      	movs	r2, #64	@ 0x40
 800c4e0:	2101      	movs	r1, #1
 800c4e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2241      	movs	r2, #65	@ 0x41
 800c4e8:	2124      	movs	r1, #36	@ 0x24
 800c4ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	681a      	ldr	r2, [r3, #0]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	2101      	movs	r1, #1
 800c4f8:	438a      	bics	r2, r1
 800c4fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4911      	ldr	r1, [pc, #68]	@ (800c54c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800c508:	400a      	ands	r2, r1
 800c50a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	6819      	ldr	r1, [r3, #0]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	683a      	ldr	r2, [r7, #0]
 800c518:	430a      	orrs	r2, r1
 800c51a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	681a      	ldr	r2, [r3, #0]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	2101      	movs	r1, #1
 800c528:	430a      	orrs	r2, r1
 800c52a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2241      	movs	r2, #65	@ 0x41
 800c530:	2120      	movs	r1, #32
 800c532:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2240      	movs	r2, #64	@ 0x40
 800c538:	2100      	movs	r1, #0
 800c53a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800c53c:	2300      	movs	r3, #0
 800c53e:	e000      	b.n	800c542 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c540:	2302      	movs	r3, #2
  }
}
 800c542:	0018      	movs	r0, r3
 800c544:	46bd      	mov	sp, r7
 800c546:	b002      	add	sp, #8
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	46c0      	nop			@ (mov r8, r8)
 800c54c:	ffffefff 	.word	0xffffefff

0800c550 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2241      	movs	r2, #65	@ 0x41
 800c55e:	5c9b      	ldrb	r3, [r3, r2]
 800c560:	b2db      	uxtb	r3, r3
 800c562:	2b20      	cmp	r3, #32
 800c564:	d139      	bne.n	800c5da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2240      	movs	r2, #64	@ 0x40
 800c56a:	5c9b      	ldrb	r3, [r3, r2]
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	d101      	bne.n	800c574 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c570:	2302      	movs	r3, #2
 800c572:	e033      	b.n	800c5dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2240      	movs	r2, #64	@ 0x40
 800c578:	2101      	movs	r1, #1
 800c57a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2241      	movs	r2, #65	@ 0x41
 800c580:	2124      	movs	r1, #36	@ 0x24
 800c582:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	681a      	ldr	r2, [r3, #0]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	2101      	movs	r1, #1
 800c590:	438a      	bics	r2, r1
 800c592:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	4a11      	ldr	r2, [pc, #68]	@ (800c5e4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800c5a0:	4013      	ands	r3, r2
 800c5a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	021b      	lsls	r3, r3, #8
 800c5a8:	68fa      	ldr	r2, [r7, #12]
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	68fa      	ldr	r2, [r7, #12]
 800c5b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	2101      	movs	r1, #1
 800c5c2:	430a      	orrs	r2, r1
 800c5c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2241      	movs	r2, #65	@ 0x41
 800c5ca:	2120      	movs	r1, #32
 800c5cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2240      	movs	r2, #64	@ 0x40
 800c5d2:	2100      	movs	r1, #0
 800c5d4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	e000      	b.n	800c5dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c5da:	2302      	movs	r3, #2
  }
}
 800c5dc:	0018      	movs	r0, r3
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	b004      	add	sp, #16
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	fffff0ff 	.word	0xfffff0ff

0800c5e8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b088      	sub	sp, #32
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d101      	bne.n	800c5fa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	e0e1      	b.n	800c7be <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2235      	movs	r2, #53	@ 0x35
 800c5fe:	5c9b      	ldrb	r3, [r3, r2]
 800c600:	b2db      	uxtb	r3, r3
 800c602:	2b00      	cmp	r3, #0
 800c604:	d107      	bne.n	800c616 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2234      	movs	r2, #52	@ 0x34
 800c60a:	2100      	movs	r1, #0
 800c60c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	0018      	movs	r0, r3
 800c612:	f7f9 f8af 	bl	8005774 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2235      	movs	r2, #53	@ 0x35
 800c61a:	2102      	movs	r1, #2
 800c61c:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	69da      	ldr	r2, [r3, #28]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4967      	ldr	r1, [pc, #412]	@ (800c7c8 <HAL_I2S_Init+0x1e0>)
 800c62a:	400a      	ands	r2, r1
 800c62c:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	2202      	movs	r2, #2
 800c634:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	695b      	ldr	r3, [r3, #20]
 800c63a:	2b02      	cmp	r3, #2
 800c63c:	d073      	beq.n	800c726 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	68db      	ldr	r3, [r3, #12]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d102      	bne.n	800c64c <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800c646:	2310      	movs	r3, #16
 800c648:	617b      	str	r3, [r7, #20]
 800c64a:	e001      	b.n	800c650 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800c64c:	2320      	movs	r3, #32
 800c64e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	2b20      	cmp	r3, #32
 800c656:	d802      	bhi.n	800c65e <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	005b      	lsls	r3, r3, #1
 800c65c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800c65e:	f002 fe7f 	bl	800f360 <HAL_RCC_GetSysClockFreq>
 800c662:	0003      	movs	r3, r0
 800c664:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	691a      	ldr	r2, [r3, #16]
 800c66a:	2380      	movs	r3, #128	@ 0x80
 800c66c:	009b      	lsls	r3, r3, #2
 800c66e:	429a      	cmp	r2, r3
 800c670:	d131      	bne.n	800c6d6 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d016      	beq.n	800c6a8 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	009b      	lsls	r3, r3, #2
 800c67e:	0019      	movs	r1, r3
 800c680:	68f8      	ldr	r0, [r7, #12]
 800c682:	f7f3 fd5d 	bl	8000140 <__udivsi3>
 800c686:	0003      	movs	r3, r0
 800c688:	001a      	movs	r2, r3
 800c68a:	0013      	movs	r3, r2
 800c68c:	009b      	lsls	r3, r3, #2
 800c68e:	189b      	adds	r3, r3, r2
 800c690:	005b      	lsls	r3, r3, #1
 800c692:	001a      	movs	r2, r3
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	695b      	ldr	r3, [r3, #20]
 800c698:	0019      	movs	r1, r3
 800c69a:	0010      	movs	r0, r2
 800c69c:	f7f3 fd50 	bl	8000140 <__udivsi3>
 800c6a0:	0003      	movs	r3, r0
 800c6a2:	3305      	adds	r3, #5
 800c6a4:	613b      	str	r3, [r7, #16]
 800c6a6:	e02a      	b.n	800c6fe <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	00db      	lsls	r3, r3, #3
 800c6ac:	0019      	movs	r1, r3
 800c6ae:	68f8      	ldr	r0, [r7, #12]
 800c6b0:	f7f3 fd46 	bl	8000140 <__udivsi3>
 800c6b4:	0003      	movs	r3, r0
 800c6b6:	001a      	movs	r2, r3
 800c6b8:	0013      	movs	r3, r2
 800c6ba:	009b      	lsls	r3, r3, #2
 800c6bc:	189b      	adds	r3, r3, r2
 800c6be:	005b      	lsls	r3, r3, #1
 800c6c0:	001a      	movs	r2, r3
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	695b      	ldr	r3, [r3, #20]
 800c6c6:	0019      	movs	r1, r3
 800c6c8:	0010      	movs	r0, r2
 800c6ca:	f7f3 fd39 	bl	8000140 <__udivsi3>
 800c6ce:	0003      	movs	r3, r0
 800c6d0:	3305      	adds	r3, #5
 800c6d2:	613b      	str	r3, [r7, #16]
 800c6d4:	e013      	b.n	800c6fe <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800c6d6:	6979      	ldr	r1, [r7, #20]
 800c6d8:	68f8      	ldr	r0, [r7, #12]
 800c6da:	f7f3 fd31 	bl	8000140 <__udivsi3>
 800c6de:	0003      	movs	r3, r0
 800c6e0:	001a      	movs	r2, r3
 800c6e2:	0013      	movs	r3, r2
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	189b      	adds	r3, r3, r2
 800c6e8:	005b      	lsls	r3, r3, #1
 800c6ea:	001a      	movs	r2, r3
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	695b      	ldr	r3, [r3, #20]
 800c6f0:	0019      	movs	r1, r3
 800c6f2:	0010      	movs	r0, r2
 800c6f4:	f7f3 fd24 	bl	8000140 <__udivsi3>
 800c6f8:	0003      	movs	r3, r0
 800c6fa:	3305      	adds	r3, #5
 800c6fc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	210a      	movs	r1, #10
 800c702:	0018      	movs	r0, r3
 800c704:	f7f3 fd1c 	bl	8000140 <__udivsi3>
 800c708:	0003      	movs	r3, r0
 800c70a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	2201      	movs	r2, #1
 800c710:	4013      	ands	r3, r2
 800c712:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800c714:	693a      	ldr	r2, [r7, #16]
 800c716:	69bb      	ldr	r3, [r7, #24]
 800c718:	1ad3      	subs	r3, r2, r3
 800c71a:	085b      	lsrs	r3, r3, #1
 800c71c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800c71e:	69bb      	ldr	r3, [r7, #24]
 800c720:	021b      	lsls	r3, r3, #8
 800c722:	61bb      	str	r3, [r7, #24]
 800c724:	e003      	b.n	800c72e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800c726:	2302      	movs	r3, #2
 800c728:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800c72a:	2300      	movs	r3, #0
 800c72c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800c72e:	69fb      	ldr	r3, [r7, #28]
 800c730:	2b01      	cmp	r3, #1
 800c732:	d902      	bls.n	800c73a <HAL_I2S_Init+0x152>
 800c734:	69fb      	ldr	r3, [r7, #28]
 800c736:	2bff      	cmp	r3, #255	@ 0xff
 800c738:	d907      	bls.n	800c74a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c73e:	2210      	movs	r2, #16
 800c740:	431a      	orrs	r2, r3
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800c746:	2301      	movs	r3, #1
 800c748:	e039      	b.n	800c7be <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	691a      	ldr	r2, [r3, #16]
 800c74e:	69bb      	ldr	r3, [r7, #24]
 800c750:	431a      	orrs	r2, r3
 800c752:	0011      	movs	r1, r2
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	69fa      	ldr	r2, [r7, #28]
 800c75a:	430a      	orrs	r2, r1
 800c75c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	69db      	ldr	r3, [r3, #28]
 800c764:	4a18      	ldr	r2, [pc, #96]	@ (800c7c8 <HAL_I2S_Init+0x1e0>)
 800c766:	401a      	ands	r2, r3
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6859      	ldr	r1, [r3, #4]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	689b      	ldr	r3, [r3, #8]
 800c770:	4319      	orrs	r1, r3
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	68db      	ldr	r3, [r3, #12]
 800c776:	4319      	orrs	r1, r3
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	699b      	ldr	r3, [r3, #24]
 800c77c:	430b      	orrs	r3, r1
 800c77e:	431a      	orrs	r2, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	2180      	movs	r1, #128	@ 0x80
 800c786:	0109      	lsls	r1, r1, #4
 800c788:	430a      	orrs	r2, r1
 800c78a:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	689b      	ldr	r3, [r3, #8]
 800c790:	2b30      	cmp	r3, #48	@ 0x30
 800c792:	d003      	beq.n	800c79c <HAL_I2S_Init+0x1b4>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	2bb0      	cmp	r3, #176	@ 0xb0
 800c79a:	d108      	bne.n	800c7ae <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	69da      	ldr	r2, [r3, #28]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2180      	movs	r1, #128	@ 0x80
 800c7a8:	0149      	lsls	r1, r1, #5
 800c7aa:	430a      	orrs	r2, r1
 800c7ac:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2235      	movs	r2, #53	@ 0x35
 800c7b8:	2101      	movs	r1, #1
 800c7ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c7bc:	2300      	movs	r3, #0
}
 800c7be:	0018      	movs	r0, r3
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	b008      	add	sp, #32
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	46c0      	nop			@ (mov r8, r8)
 800c7c8:	fffff040 	.word	0xfffff040

0800c7cc <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d101      	bne.n	800c7de <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 800c7da:	2301      	movs	r3, #1
 800c7dc:	e01b      	b.n	800c816 <HAL_I2S_DeInit+0x4a>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2235      	movs	r2, #53	@ 0x35
 800c7e2:	2102      	movs	r1, #2
 800c7e4:	5499      	strb	r1, [r3, r2]

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	69da      	ldr	r2, [r3, #28]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	490b      	ldr	r1, [pc, #44]	@ (800c820 <HAL_I2S_DeInit+0x54>)
 800c7f2:	400a      	ands	r2, r1
 800c7f4:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	0018      	movs	r0, r3
 800c7fa:	f7f9 f82f 	bl	800585c <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2200      	movs	r2, #0
 800c802:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2235      	movs	r2, #53	@ 0x35
 800c808:	2100      	movs	r1, #0
 800c80a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2234      	movs	r2, #52	@ 0x34
 800c810:	2100      	movs	r1, #0
 800c812:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c814:	2300      	movs	r3, #0
}
 800c816:	0018      	movs	r0, r3
 800c818:	46bd      	mov	sp, r7
 800c81a:	b002      	add	sp, #8
 800c81c:	bd80      	pop	{r7, pc}
 800c81e:	46c0      	nop			@ (mov r8, r8)
 800c820:	fffffbff 	.word	0xfffffbff

0800c824 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b086      	sub	sp, #24
 800c828:	af00      	add	r7, sp, #0
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	60b9      	str	r1, [r7, #8]
 800c82e:	1dbb      	adds	r3, r7, #6
 800c830:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d003      	beq.n	800c840 <HAL_I2S_Receive_DMA+0x1c>
 800c838:	1dbb      	adds	r3, r7, #6
 800c83a:	881b      	ldrh	r3, [r3, #0]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d101      	bne.n	800c844 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800c840:	2301      	movs	r3, #1
 800c842:	e0a6      	b.n	800c992 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2234      	movs	r2, #52	@ 0x34
 800c848:	5c9b      	ldrb	r3, [r3, r2]
 800c84a:	b2db      	uxtb	r3, r3
 800c84c:	2b01      	cmp	r3, #1
 800c84e:	d101      	bne.n	800c854 <HAL_I2S_Receive_DMA+0x30>
 800c850:	2302      	movs	r3, #2
 800c852:	e09e      	b.n	800c992 <HAL_I2S_Receive_DMA+0x16e>
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	2234      	movs	r2, #52	@ 0x34
 800c858:	2101      	movs	r1, #1
 800c85a:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2235      	movs	r2, #53	@ 0x35
 800c860:	5c9b      	ldrb	r3, [r3, r2]
 800c862:	b2db      	uxtb	r3, r3
 800c864:	2b01      	cmp	r3, #1
 800c866:	d005      	beq.n	800c874 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2234      	movs	r2, #52	@ 0x34
 800c86c:	2100      	movs	r1, #0
 800c86e:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800c870:	2302      	movs	r3, #2
 800c872:	e08e      	b.n	800c992 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2235      	movs	r2, #53	@ 0x35
 800c878:	2104      	movs	r1, #4
 800c87a:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2200      	movs	r2, #0
 800c880:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	68ba      	ldr	r2, [r7, #8]
 800c886:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	69db      	ldr	r3, [r3, #28]
 800c88e:	2207      	movs	r2, #7
 800c890:	4013      	ands	r3, r2
 800c892:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	2b03      	cmp	r3, #3
 800c898:	d002      	beq.n	800c8a0 <HAL_I2S_Receive_DMA+0x7c>
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	2b05      	cmp	r3, #5
 800c89e:	d10c      	bne.n	800c8ba <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800c8a0:	1dbb      	adds	r3, r7, #6
 800c8a2:	881b      	ldrh	r3, [r3, #0]
 800c8a4:	18db      	adds	r3, r3, r3
 800c8a6:	b29a      	uxth	r2, r3
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800c8ac:	1dbb      	adds	r3, r7, #6
 800c8ae:	881b      	ldrh	r3, [r3, #0]
 800c8b0:	18db      	adds	r3, r3, r3
 800c8b2:	b29a      	uxth	r2, r3
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c8b8:	e007      	b.n	800c8ca <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	1dba      	adds	r2, r7, #6
 800c8be:	8812      	ldrh	r2, [r2, #0]
 800c8c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	1dba      	adds	r2, r7, #6
 800c8c6:	8812      	ldrh	r2, [r2, #0]
 800c8c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8ce:	4a33      	ldr	r2, [pc, #204]	@ (800c99c <HAL_I2S_Receive_DMA+0x178>)
 800c8d0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8d6:	4a32      	ldr	r2, [pc, #200]	@ (800c9a0 <HAL_I2S_Receive_DMA+0x17c>)
 800c8d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8de:	4a31      	ldr	r2, [pc, #196]	@ (800c9a4 <HAL_I2S_Receive_DMA+0x180>)
 800c8e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	69da      	ldr	r2, [r3, #28]
 800c8e8:	23c0      	movs	r3, #192	@ 0xc0
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	401a      	ands	r2, r3
 800c8ee:	23c0      	movs	r3, #192	@ 0xc0
 800c8f0:	009b      	lsls	r3, r3, #2
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d10a      	bne.n	800c90c <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	613b      	str	r3, [r7, #16]
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	68db      	ldr	r3, [r3, #12]
 800c900:	613b      	str	r3, [r7, #16]
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	689b      	ldr	r3, [r3, #8]
 800c908:	613b      	str	r3, [r7, #16]
 800c90a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	330c      	adds	r3, #12
 800c916:	0019      	movs	r1, r3
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c91c:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c922:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800c924:	f7fd f9fc 	bl	8009d20 <HAL_DMA_Start_IT>
 800c928:	1e03      	subs	r3, r0, #0
 800c92a:	d00f      	beq.n	800c94c <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c930:	2208      	movs	r2, #8
 800c932:	431a      	orrs	r2, r3
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2235      	movs	r2, #53	@ 0x35
 800c93c:	2101      	movs	r1, #1
 800c93e:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	2234      	movs	r2, #52	@ 0x34
 800c944:	2100      	movs	r1, #0
 800c946:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800c948:	2301      	movs	r3, #1
 800c94a:	e022      	b.n	800c992 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	69da      	ldr	r2, [r3, #28]
 800c952:	2380      	movs	r3, #128	@ 0x80
 800c954:	00db      	lsls	r3, r3, #3
 800c956:	4013      	ands	r3, r2
 800c958:	d108      	bne.n	800c96c <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	69da      	ldr	r2, [r3, #28]
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	2180      	movs	r1, #128	@ 0x80
 800c966:	00c9      	lsls	r1, r1, #3
 800c968:	430a      	orrs	r2, r1
 800c96a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	685b      	ldr	r3, [r3, #4]
 800c972:	2201      	movs	r2, #1
 800c974:	4013      	ands	r3, r2
 800c976:	d107      	bne.n	800c988 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	685a      	ldr	r2, [r3, #4]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	2101      	movs	r1, #1
 800c984:	430a      	orrs	r2, r1
 800c986:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	2234      	movs	r2, #52	@ 0x34
 800c98c:	2100      	movs	r1, #0
 800c98e:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800c990:	2300      	movs	r3, #0
}
 800c992:	0018      	movs	r0, r3
 800c994:	46bd      	mov	sp, r7
 800c996:	b006      	add	sp, #24
 800c998:	bd80      	pop	{r7, pc}
 800c99a:	46c0      	nop			@ (mov r8, r8)
 800c99c:	0800cba5 	.word	0x0800cba5
 800c9a0:	0800cb61 	.word	0x0800cb61
 800c9a4:	0800cbc3 	.word	0x0800cbc3

0800c9a8 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b086      	sub	sp, #24
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c9b0:	2317      	movs	r3, #23
 800c9b2:	18fb      	adds	r3, r7, r3
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	685a      	ldr	r2, [r3, #4]
 800c9bc:	2380      	movs	r3, #128	@ 0x80
 800c9be:	009b      	lsls	r3, r3, #2
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d003      	beq.n	800c9cc <HAL_I2S_DMAStop+0x24>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d158      	bne.n	800ca7e <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d010      	beq.n	800c9f6 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9d8:	0018      	movs	r0, r3
 800c9da:	f7fd fa07 	bl	8009dec <HAL_DMA_Abort>
 800c9de:	1e03      	subs	r3, r0, #0
 800c9e0:	d009      	beq.n	800c9f6 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9e6:	2208      	movs	r2, #8
 800c9e8:	431a      	orrs	r2, r3
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800c9ee:	2317      	movs	r3, #23
 800c9f0:	18fb      	adds	r3, r7, r3
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	2364      	movs	r3, #100	@ 0x64
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	2102      	movs	r1, #2
 800c9fe:	f000 f907 	bl	800cc10 <I2S_WaitFlagStateUntilTimeout>
 800ca02:	1e03      	subs	r3, r0, #0
 800ca04:	d00d      	beq.n	800ca22 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	431a      	orrs	r2, r3
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2235      	movs	r2, #53	@ 0x35
 800ca16:	2101      	movs	r1, #1
 800ca18:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800ca1a:	2317      	movs	r3, #23
 800ca1c:	18fb      	adds	r3, r7, r3
 800ca1e:	2201      	movs	r2, #1
 800ca20:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	2364      	movs	r3, #100	@ 0x64
 800ca26:	2200      	movs	r2, #0
 800ca28:	2180      	movs	r1, #128	@ 0x80
 800ca2a:	f000 f8f1 	bl	800cc10 <I2S_WaitFlagStateUntilTimeout>
 800ca2e:	1e03      	subs	r3, r0, #0
 800ca30:	d00d      	beq.n	800ca4e <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca36:	2201      	movs	r2, #1
 800ca38:	431a      	orrs	r2, r3
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2235      	movs	r2, #53	@ 0x35
 800ca42:	2101      	movs	r1, #1
 800ca44:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800ca46:	2317      	movs	r3, #23
 800ca48:	18fb      	adds	r3, r7, r3
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	69da      	ldr	r2, [r3, #28]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	4938      	ldr	r1, [pc, #224]	@ (800cb3c <HAL_I2S_DMAStop+0x194>)
 800ca5a:	400a      	ands	r2, r1
 800ca5c:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800ca5e:	2300      	movs	r3, #0
 800ca60:	613b      	str	r3, [r7, #16]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	689b      	ldr	r3, [r3, #8]
 800ca68:	613b      	str	r3, [r7, #16]
 800ca6a:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	685a      	ldr	r2, [r3, #4]
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	2102      	movs	r1, #2
 800ca78:	438a      	bics	r2, r1
 800ca7a:	605a      	str	r2, [r3, #4]
 800ca7c:	e053      	b.n	800cb26 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	685a      	ldr	r2, [r3, #4]
 800ca82:	23c0      	movs	r3, #192	@ 0xc0
 800ca84:	009b      	lsls	r3, r3, #2
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d005      	beq.n	800ca96 <HAL_I2S_DMAStop+0xee>
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	685a      	ldr	r2, [r3, #4]
 800ca8e:	2380      	movs	r3, #128	@ 0x80
 800ca90:	005b      	lsls	r3, r3, #1
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d147      	bne.n	800cb26 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d010      	beq.n	800cac0 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800caa2:	0018      	movs	r0, r3
 800caa4:	f7fd f9a2 	bl	8009dec <HAL_DMA_Abort>
 800caa8:	1e03      	subs	r3, r0, #0
 800caaa:	d009      	beq.n	800cac0 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cab0:	2208      	movs	r2, #8
 800cab2:	431a      	orrs	r2, r3
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800cab8:	2317      	movs	r3, #23
 800caba:	18fb      	adds	r3, r7, r3
 800cabc:	2201      	movs	r2, #1
 800cabe:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	69da      	ldr	r2, [r3, #28]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	491c      	ldr	r1, [pc, #112]	@ (800cb3c <HAL_I2S_DMAStop+0x194>)
 800cacc:	400a      	ands	r2, r1
 800cace:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800cad0:	2300      	movs	r3, #0
 800cad2:	60fb      	str	r3, [r7, #12]
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	68db      	ldr	r3, [r3, #12]
 800cada:	60fb      	str	r3, [r7, #12]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	689b      	ldr	r3, [r3, #8]
 800cae2:	60fb      	str	r3, [r7, #12]
 800cae4:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	685a      	ldr	r2, [r3, #4]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	2101      	movs	r1, #1
 800caf2:	438a      	bics	r2, r1
 800caf4:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	685a      	ldr	r2, [r3, #4]
 800cafa:	2380      	movs	r3, #128	@ 0x80
 800cafc:	005b      	lsls	r3, r3, #1
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d10e      	bne.n	800cb20 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb06:	2240      	movs	r2, #64	@ 0x40
 800cb08:	431a      	orrs	r2, r3
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2235      	movs	r2, #53	@ 0x35
 800cb12:	2101      	movs	r1, #1
 800cb14:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800cb16:	2317      	movs	r3, #23
 800cb18:	18fb      	adds	r3, r7, r3
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	701a      	strb	r2, [r3, #0]
 800cb1e:	e002      	b.n	800cb26 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2235      	movs	r2, #53	@ 0x35
 800cb2a:	2101      	movs	r1, #1
 800cb2c:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800cb2e:	2317      	movs	r3, #23
 800cb30:	18fb      	adds	r3, r7, r3
 800cb32:	781b      	ldrb	r3, [r3, #0]
}
 800cb34:	0018      	movs	r0, r3
 800cb36:	46bd      	mov	sp, r7
 800cb38:	b006      	add	sp, #24
 800cb3a:	bd80      	pop	{r7, pc}
 800cb3c:	fffffbff 	.word	0xfffffbff

0800cb40 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b082      	sub	sp, #8
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800cb48:	46c0      	nop			@ (mov r8, r8)
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	b002      	add	sp, #8
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800cb58:	46c0      	nop			@ (mov r8, r8)
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	b002      	add	sp, #8
 800cb5e:	bd80      	pop	{r7, pc}

0800cb60 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b084      	sub	sp, #16
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb6c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	69db      	ldr	r3, [r3, #28]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d10e      	bne.n	800cb94 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	685a      	ldr	r2, [r3, #4]
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2101      	movs	r1, #1
 800cb82:	438a      	bics	r2, r1
 800cb84:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2200      	movs	r2, #0
 800cb8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2235      	movs	r2, #53	@ 0x35
 800cb90:	2101      	movs	r1, #1
 800cb92:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	0018      	movs	r0, r3
 800cb98:	f7f9 feb6 	bl	8006908 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800cb9c:	46c0      	nop			@ (mov r8, r8)
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	b004      	add	sp, #16
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b084      	sub	sp, #16
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbb0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	0018      	movs	r0, r3
 800cbb6:	f7ff ffc3 	bl	800cb40 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800cbba:	46c0      	nop			@ (mov r8, r8)
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	b004      	add	sp, #16
 800cbc0:	bd80      	pop	{r7, pc}

0800cbc2 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800cbc2:	b580      	push	{r7, lr}
 800cbc4:	b084      	sub	sp, #16
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbce:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	685a      	ldr	r2, [r3, #4]
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	2103      	movs	r1, #3
 800cbdc:	438a      	bics	r2, r1
 800cbde:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	2235      	movs	r2, #53	@ 0x35
 800cbf0:	2101      	movs	r1, #1
 800cbf2:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbf8:	2208      	movs	r2, #8
 800cbfa:	431a      	orrs	r2, r3
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	0018      	movs	r0, r3
 800cc04:	f7ff ffa4 	bl	800cb50 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800cc08:	46c0      	nop			@ (mov r8, r8)
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	b004      	add	sp, #16
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b086      	sub	sp, #24
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	60f8      	str	r0, [r7, #12]
 800cc18:	60b9      	str	r1, [r7, #8]
 800cc1a:	603b      	str	r3, [r7, #0]
 800cc1c:	1dfb      	adds	r3, r7, #7
 800cc1e:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800cc20:	f7fc fb1e 	bl	8009260 <HAL_GetTick>
 800cc24:	0003      	movs	r3, r0
 800cc26:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800cc28:	e017      	b.n	800cc5a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	d014      	beq.n	800cc5a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800cc30:	f7fc fb16 	bl	8009260 <HAL_GetTick>
 800cc34:	0002      	movs	r2, r0
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	1ad3      	subs	r3, r2, r3
 800cc3a:	683a      	ldr	r2, [r7, #0]
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d902      	bls.n	800cc46 <I2S_WaitFlagStateUntilTimeout+0x36>
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d109      	bne.n	800cc5a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	2235      	movs	r2, #53	@ 0x35
 800cc4a:	2101      	movs	r1, #1
 800cc4c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2234      	movs	r2, #52	@ 0x34
 800cc52:	2100      	movs	r1, #0
 800cc54:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800cc56:	2303      	movs	r3, #3
 800cc58:	e00f      	b.n	800cc7a <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	689b      	ldr	r3, [r3, #8]
 800cc60:	68ba      	ldr	r2, [r7, #8]
 800cc62:	4013      	ands	r3, r2
 800cc64:	68ba      	ldr	r2, [r7, #8]
 800cc66:	1ad3      	subs	r3, r2, r3
 800cc68:	425a      	negs	r2, r3
 800cc6a:	4153      	adcs	r3, r2
 800cc6c:	b2db      	uxtb	r3, r3
 800cc6e:	001a      	movs	r2, r3
 800cc70:	1dfb      	adds	r3, r7, #7
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d1d8      	bne.n	800cc2a <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800cc78:	2300      	movs	r3, #0
}
 800cc7a:	0018      	movs	r0, r3
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	b006      	add	sp, #24
 800cc80:	bd80      	pop	{r7, pc}
	...

0800cc84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800cc84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc86:	b08b      	sub	sp, #44	@ 0x2c
 800cc88:	af06      	add	r7, sp, #24
 800cc8a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d101      	bne.n	800cc96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800cc92:	2301      	movs	r3, #1
 800cc94:	e0f0      	b.n	800ce78 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	4a79      	ldr	r2, [pc, #484]	@ (800ce80 <HAL_PCD_Init+0x1fc>)
 800cc9a:	5c9b      	ldrb	r3, [r3, r2]
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d108      	bne.n	800ccb4 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	23aa      	movs	r3, #170	@ 0xaa
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	2100      	movs	r1, #0
 800ccaa:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	0018      	movs	r0, r3
 800ccb0:	f008 fd50 	bl	8015754 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	4a72      	ldr	r2, [pc, #456]	@ (800ce80 <HAL_PCD_Init+0x1fc>)
 800ccb8:	2103      	movs	r1, #3
 800ccba:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	0018      	movs	r0, r3
 800ccc2:	f004 fdd1 	bl	8011868 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ccc6:	230f      	movs	r3, #15
 800ccc8:	18fb      	adds	r3, r7, r3
 800ccca:	2200      	movs	r2, #0
 800cccc:	701a      	strb	r2, [r3, #0]
 800ccce:	e049      	b.n	800cd64 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ccd0:	200f      	movs	r0, #15
 800ccd2:	183b      	adds	r3, r7, r0
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	6879      	ldr	r1, [r7, #4]
 800ccd8:	1c5a      	adds	r2, r3, #1
 800ccda:	0013      	movs	r3, r2
 800ccdc:	009b      	lsls	r3, r3, #2
 800ccde:	189b      	adds	r3, r3, r2
 800cce0:	00db      	lsls	r3, r3, #3
 800cce2:	18cb      	adds	r3, r1, r3
 800cce4:	3301      	adds	r3, #1
 800cce6:	2201      	movs	r2, #1
 800cce8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ccea:	183b      	adds	r3, r7, r0
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	6879      	ldr	r1, [r7, #4]
 800ccf0:	1c5a      	adds	r2, r3, #1
 800ccf2:	0013      	movs	r3, r2
 800ccf4:	009b      	lsls	r3, r3, #2
 800ccf6:	189b      	adds	r3, r3, r2
 800ccf8:	00db      	lsls	r3, r3, #3
 800ccfa:	183a      	adds	r2, r7, r0
 800ccfc:	7812      	ldrb	r2, [r2, #0]
 800ccfe:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800cd00:	183b      	adds	r3, r7, r0
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	6879      	ldr	r1, [r7, #4]
 800cd06:	1c5a      	adds	r2, r3, #1
 800cd08:	0013      	movs	r3, r2
 800cd0a:	009b      	lsls	r3, r3, #2
 800cd0c:	189b      	adds	r3, r3, r2
 800cd0e:	00db      	lsls	r3, r3, #3
 800cd10:	18cb      	adds	r3, r1, r3
 800cd12:	3303      	adds	r3, #3
 800cd14:	2200      	movs	r2, #0
 800cd16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800cd18:	183b      	adds	r3, r7, r0
 800cd1a:	781a      	ldrb	r2, [r3, #0]
 800cd1c:	6879      	ldr	r1, [r7, #4]
 800cd1e:	0013      	movs	r3, r2
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	189b      	adds	r3, r3, r2
 800cd24:	00db      	lsls	r3, r3, #3
 800cd26:	18cb      	adds	r3, r1, r3
 800cd28:	3338      	adds	r3, #56	@ 0x38
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800cd2e:	183b      	adds	r3, r7, r0
 800cd30:	781a      	ldrb	r2, [r3, #0]
 800cd32:	6879      	ldr	r1, [r7, #4]
 800cd34:	0013      	movs	r3, r2
 800cd36:	009b      	lsls	r3, r3, #2
 800cd38:	189b      	adds	r3, r3, r2
 800cd3a:	00db      	lsls	r3, r3, #3
 800cd3c:	18cb      	adds	r3, r1, r3
 800cd3e:	333c      	adds	r3, #60	@ 0x3c
 800cd40:	2200      	movs	r2, #0
 800cd42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800cd44:	183b      	adds	r3, r7, r0
 800cd46:	781a      	ldrb	r2, [r3, #0]
 800cd48:	6879      	ldr	r1, [r7, #4]
 800cd4a:	0013      	movs	r3, r2
 800cd4c:	009b      	lsls	r3, r3, #2
 800cd4e:	189b      	adds	r3, r3, r2
 800cd50:	00db      	lsls	r3, r3, #3
 800cd52:	18cb      	adds	r3, r1, r3
 800cd54:	3340      	adds	r3, #64	@ 0x40
 800cd56:	2200      	movs	r2, #0
 800cd58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cd5a:	183b      	adds	r3, r7, r0
 800cd5c:	781a      	ldrb	r2, [r3, #0]
 800cd5e:	183b      	adds	r3, r7, r0
 800cd60:	3201      	adds	r2, #1
 800cd62:	701a      	strb	r2, [r3, #0]
 800cd64:	210f      	movs	r1, #15
 800cd66:	187b      	adds	r3, r7, r1
 800cd68:	781a      	ldrb	r2, [r3, #0]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	685b      	ldr	r3, [r3, #4]
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d3ae      	bcc.n	800ccd0 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cd72:	187b      	adds	r3, r7, r1
 800cd74:	2200      	movs	r2, #0
 800cd76:	701a      	strb	r2, [r3, #0]
 800cd78:	e056      	b.n	800ce28 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800cd7a:	240f      	movs	r4, #15
 800cd7c:	193b      	adds	r3, r7, r4
 800cd7e:	781a      	ldrb	r2, [r3, #0]
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	236a      	movs	r3, #106	@ 0x6a
 800cd84:	33ff      	adds	r3, #255	@ 0xff
 800cd86:	0019      	movs	r1, r3
 800cd88:	0013      	movs	r3, r2
 800cd8a:	009b      	lsls	r3, r3, #2
 800cd8c:	189b      	adds	r3, r3, r2
 800cd8e:	00db      	lsls	r3, r3, #3
 800cd90:	18c3      	adds	r3, r0, r3
 800cd92:	185b      	adds	r3, r3, r1
 800cd94:	2200      	movs	r2, #0
 800cd96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800cd98:	193b      	adds	r3, r7, r4
 800cd9a:	781a      	ldrb	r2, [r3, #0]
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	23b4      	movs	r3, #180	@ 0xb4
 800cda0:	0059      	lsls	r1, r3, #1
 800cda2:	0013      	movs	r3, r2
 800cda4:	009b      	lsls	r3, r3, #2
 800cda6:	189b      	adds	r3, r3, r2
 800cda8:	00db      	lsls	r3, r3, #3
 800cdaa:	18c3      	adds	r3, r0, r3
 800cdac:	185b      	adds	r3, r3, r1
 800cdae:	193a      	adds	r2, r7, r4
 800cdb0:	7812      	ldrb	r2, [r2, #0]
 800cdb2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800cdb4:	193b      	adds	r3, r7, r4
 800cdb6:	781a      	ldrb	r2, [r3, #0]
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	236c      	movs	r3, #108	@ 0x6c
 800cdbc:	33ff      	adds	r3, #255	@ 0xff
 800cdbe:	0019      	movs	r1, r3
 800cdc0:	0013      	movs	r3, r2
 800cdc2:	009b      	lsls	r3, r3, #2
 800cdc4:	189b      	adds	r3, r3, r2
 800cdc6:	00db      	lsls	r3, r3, #3
 800cdc8:	18c3      	adds	r3, r0, r3
 800cdca:	185b      	adds	r3, r3, r1
 800cdcc:	2200      	movs	r2, #0
 800cdce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800cdd0:	193b      	adds	r3, r7, r4
 800cdd2:	781a      	ldrb	r2, [r3, #0]
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	23bc      	movs	r3, #188	@ 0xbc
 800cdd8:	0059      	lsls	r1, r3, #1
 800cdda:	0013      	movs	r3, r2
 800cddc:	009b      	lsls	r3, r3, #2
 800cdde:	189b      	adds	r3, r3, r2
 800cde0:	00db      	lsls	r3, r3, #3
 800cde2:	18c3      	adds	r3, r0, r3
 800cde4:	185b      	adds	r3, r3, r1
 800cde6:	2200      	movs	r2, #0
 800cde8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800cdea:	193b      	adds	r3, r7, r4
 800cdec:	781a      	ldrb	r2, [r3, #0]
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	23be      	movs	r3, #190	@ 0xbe
 800cdf2:	0059      	lsls	r1, r3, #1
 800cdf4:	0013      	movs	r3, r2
 800cdf6:	009b      	lsls	r3, r3, #2
 800cdf8:	189b      	adds	r3, r3, r2
 800cdfa:	00db      	lsls	r3, r3, #3
 800cdfc:	18c3      	adds	r3, r0, r3
 800cdfe:	185b      	adds	r3, r3, r1
 800ce00:	2200      	movs	r2, #0
 800ce02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ce04:	193b      	adds	r3, r7, r4
 800ce06:	781a      	ldrb	r2, [r3, #0]
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	23c0      	movs	r3, #192	@ 0xc0
 800ce0c:	0059      	lsls	r1, r3, #1
 800ce0e:	0013      	movs	r3, r2
 800ce10:	009b      	lsls	r3, r3, #2
 800ce12:	189b      	adds	r3, r3, r2
 800ce14:	00db      	lsls	r3, r3, #3
 800ce16:	18c3      	adds	r3, r0, r3
 800ce18:	185b      	adds	r3, r3, r1
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ce1e:	193b      	adds	r3, r7, r4
 800ce20:	781a      	ldrb	r2, [r3, #0]
 800ce22:	193b      	adds	r3, r7, r4
 800ce24:	3201      	adds	r2, #1
 800ce26:	701a      	strb	r2, [r3, #0]
 800ce28:	230f      	movs	r3, #15
 800ce2a:	18fb      	adds	r3, r7, r3
 800ce2c:	781a      	ldrb	r2, [r3, #0]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d3a1      	bcc.n	800cd7a <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6818      	ldr	r0, [r3, #0]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	466a      	mov	r2, sp
 800ce3e:	0011      	movs	r1, r2
 800ce40:	001a      	movs	r2, r3
 800ce42:	3210      	adds	r2, #16
 800ce44:	ca70      	ldmia	r2!, {r4, r5, r6}
 800ce46:	c170      	stmia	r1!, {r4, r5, r6}
 800ce48:	ca30      	ldmia	r2!, {r4, r5}
 800ce4a:	c130      	stmia	r1!, {r4, r5}
 800ce4c:	6859      	ldr	r1, [r3, #4]
 800ce4e:	689a      	ldr	r2, [r3, #8]
 800ce50:	68db      	ldr	r3, [r3, #12]
 800ce52:	f004 fd23 	bl	801189c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2224      	movs	r2, #36	@ 0x24
 800ce5a:	2100      	movs	r1, #0
 800ce5c:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	4a07      	ldr	r2, [pc, #28]	@ (800ce80 <HAL_PCD_Init+0x1fc>)
 800ce62:	2101      	movs	r1, #1
 800ce64:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	69db      	ldr	r3, [r3, #28]
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d103      	bne.n	800ce76 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	0018      	movs	r0, r3
 800ce72:	f001 fd23 	bl	800e8bc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800ce76:	2300      	movs	r3, #0
}
 800ce78:	0018      	movs	r0, r3
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	b005      	add	sp, #20
 800ce7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce80:	000002a9 	.word	0x000002a9

0800ce84 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b082      	sub	sp, #8
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800ce8c:	687a      	ldr	r2, [r7, #4]
 800ce8e:	23aa      	movs	r3, #170	@ 0xaa
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	5cd3      	ldrb	r3, [r2, r3]
 800ce94:	2b01      	cmp	r3, #1
 800ce96:	d101      	bne.n	800ce9c <HAL_PCD_Start+0x18>
 800ce98:	2302      	movs	r3, #2
 800ce9a:	e014      	b.n	800cec6 <HAL_PCD_Start+0x42>
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	23aa      	movs	r3, #170	@ 0xaa
 800cea0:	009b      	lsls	r3, r3, #2
 800cea2:	2101      	movs	r1, #1
 800cea4:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	0018      	movs	r0, r3
 800ceac:	f004 fcc6 	bl	801183c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	0018      	movs	r0, r3
 800ceb6:	f006 fcc9 	bl	801384c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	23aa      	movs	r3, #170	@ 0xaa
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	2100      	movs	r1, #0
 800cec2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800cec4:	2300      	movs	r3, #0
}
 800cec6:	0018      	movs	r0, r3
 800cec8:	46bd      	mov	sp, r7
 800ceca:	b002      	add	sp, #8
 800cecc:	bd80      	pop	{r7, pc}
	...

0800ced0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	0018      	movs	r0, r3
 800cede:	f006 fccb 	bl	8013878 <USB_ReadInterrupts>
 800cee2:	0003      	movs	r3, r0
 800cee4:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800cee6:	68fa      	ldr	r2, [r7, #12]
 800cee8:	2380      	movs	r3, #128	@ 0x80
 800ceea:	021b      	lsls	r3, r3, #8
 800ceec:	4013      	ands	r3, r2
 800ceee:	d004      	beq.n	800cefa <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	0018      	movs	r0, r3
 800cef4:	f000 fb62 	bl	800d5bc <PCD_EP_ISR_Handler>

    return;
 800cef8:	e11d      	b.n	800d136 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800cefa:	68fa      	ldr	r2, [r7, #12]
 800cefc:	2380      	movs	r3, #128	@ 0x80
 800cefe:	00db      	lsls	r3, r3, #3
 800cf00:	4013      	ands	r3, r2
 800cf02:	d015      	beq.n	800cf30 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	2244      	movs	r2, #68	@ 0x44
 800cf0a:	5a9b      	ldrh	r3, [r3, r2]
 800cf0c:	b29a      	uxth	r2, r3
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	498a      	ldr	r1, [pc, #552]	@ (800d13c <HAL_PCD_IRQHandler+0x26c>)
 800cf14:	400a      	ands	r2, r1
 800cf16:	b291      	uxth	r1, r2
 800cf18:	2244      	movs	r2, #68	@ 0x44
 800cf1a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	0018      	movs	r0, r3
 800cf20:	f008 fc9b 	bl	801585a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2100      	movs	r1, #0
 800cf28:	0018      	movs	r0, r3
 800cf2a:	f000 f915 	bl	800d158 <HAL_PCD_SetAddress>

    return;
 800cf2e:	e102      	b.n	800d136 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800cf30:	68fa      	ldr	r2, [r7, #12]
 800cf32:	2380      	movs	r3, #128	@ 0x80
 800cf34:	01db      	lsls	r3, r3, #7
 800cf36:	4013      	ands	r3, r2
 800cf38:	d00c      	beq.n	800cf54 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	2244      	movs	r2, #68	@ 0x44
 800cf40:	5a9b      	ldrh	r3, [r3, r2]
 800cf42:	b29a      	uxth	r2, r3
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	497d      	ldr	r1, [pc, #500]	@ (800d140 <HAL_PCD_IRQHandler+0x270>)
 800cf4a:	400a      	ands	r2, r1
 800cf4c:	b291      	uxth	r1, r2
 800cf4e:	2244      	movs	r2, #68	@ 0x44
 800cf50:	5299      	strh	r1, [r3, r2]

    return;
 800cf52:	e0f0      	b.n	800d136 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800cf54:	68fa      	ldr	r2, [r7, #12]
 800cf56:	2380      	movs	r3, #128	@ 0x80
 800cf58:	019b      	lsls	r3, r3, #6
 800cf5a:	4013      	ands	r3, r2
 800cf5c:	d00c      	beq.n	800cf78 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	2244      	movs	r2, #68	@ 0x44
 800cf64:	5a9b      	ldrh	r3, [r3, r2]
 800cf66:	b29a      	uxth	r2, r3
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	4975      	ldr	r1, [pc, #468]	@ (800d144 <HAL_PCD_IRQHandler+0x274>)
 800cf6e:	400a      	ands	r2, r1
 800cf70:	b291      	uxth	r1, r2
 800cf72:	2244      	movs	r2, #68	@ 0x44
 800cf74:	5299      	strh	r1, [r3, r2]

    return;
 800cf76:	e0de      	b.n	800d136 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800cf78:	68fa      	ldr	r2, [r7, #12]
 800cf7a:	2380      	movs	r3, #128	@ 0x80
 800cf7c:	015b      	lsls	r3, r3, #5
 800cf7e:	4013      	ands	r3, r2
 800cf80:	d038      	beq.n	800cff4 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	2240      	movs	r2, #64	@ 0x40
 800cf88:	5a9b      	ldrh	r3, [r3, r2]
 800cf8a:	b29a      	uxth	r2, r3
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	2104      	movs	r1, #4
 800cf92:	438a      	bics	r2, r1
 800cf94:	b291      	uxth	r1, r2
 800cf96:	2240      	movs	r2, #64	@ 0x40
 800cf98:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	2240      	movs	r2, #64	@ 0x40
 800cfa0:	5a9b      	ldrh	r3, [r3, r2]
 800cfa2:	b29a      	uxth	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2108      	movs	r1, #8
 800cfaa:	438a      	bics	r2, r1
 800cfac:	b291      	uxth	r1, r2
 800cfae:	2240      	movs	r2, #64	@ 0x40
 800cfb0:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800cfb2:	687a      	ldr	r2, [r7, #4]
 800cfb4:	23b8      	movs	r3, #184	@ 0xb8
 800cfb6:	009b      	lsls	r3, r3, #2
 800cfb8:	5cd3      	ldrb	r3, [r2, r3]
 800cfba:	2b01      	cmp	r3, #1
 800cfbc:	d109      	bne.n	800cfd2 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800cfbe:	687a      	ldr	r2, [r7, #4]
 800cfc0:	23b8      	movs	r3, #184	@ 0xb8
 800cfc2:	009b      	lsls	r3, r3, #2
 800cfc4:	2100      	movs	r1, #0
 800cfc6:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2100      	movs	r1, #0
 800cfcc:	0018      	movs	r0, r3
 800cfce:	f001 fc9f 	bl	800e910 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	0018      	movs	r0, r3
 800cfd6:	f008 fc81 	bl	80158dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	2244      	movs	r2, #68	@ 0x44
 800cfe0:	5a9b      	ldrh	r3, [r3, r2]
 800cfe2:	b29a      	uxth	r2, r3
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	4957      	ldr	r1, [pc, #348]	@ (800d148 <HAL_PCD_IRQHandler+0x278>)
 800cfea:	400a      	ands	r2, r1
 800cfec:	b291      	uxth	r1, r2
 800cfee:	2244      	movs	r2, #68	@ 0x44
 800cff0:	5299      	strh	r1, [r3, r2]

    return;
 800cff2:	e0a0      	b.n	800d136 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800cff4:	68fa      	ldr	r2, [r7, #12]
 800cff6:	2380      	movs	r3, #128	@ 0x80
 800cff8:	011b      	lsls	r3, r3, #4
 800cffa:	4013      	ands	r3, r2
 800cffc:	d028      	beq.n	800d050 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	2240      	movs	r2, #64	@ 0x40
 800d004:	5a9b      	ldrh	r3, [r3, r2]
 800d006:	b29a      	uxth	r2, r3
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	2108      	movs	r1, #8
 800d00e:	430a      	orrs	r2, r1
 800d010:	b291      	uxth	r1, r2
 800d012:	2240      	movs	r2, #64	@ 0x40
 800d014:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	2244      	movs	r2, #68	@ 0x44
 800d01c:	5a9b      	ldrh	r3, [r3, r2]
 800d01e:	b29a      	uxth	r2, r3
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4949      	ldr	r1, [pc, #292]	@ (800d14c <HAL_PCD_IRQHandler+0x27c>)
 800d026:	400a      	ands	r2, r1
 800d028:	b291      	uxth	r1, r2
 800d02a:	2244      	movs	r2, #68	@ 0x44
 800d02c:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	2240      	movs	r2, #64	@ 0x40
 800d034:	5a9b      	ldrh	r3, [r3, r2]
 800d036:	b29a      	uxth	r2, r3
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2104      	movs	r1, #4
 800d03e:	430a      	orrs	r2, r1
 800d040:	b291      	uxth	r1, r2
 800d042:	2240      	movs	r2, #64	@ 0x40
 800d044:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	0018      	movs	r0, r3
 800d04a:	f008 fc2b 	bl	80158a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800d04e:	e072      	b.n	800d136 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	2280      	movs	r2, #128	@ 0x80
 800d054:	4013      	ands	r3, r2
 800d056:	d046      	beq.n	800d0e6 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	2244      	movs	r2, #68	@ 0x44
 800d05e:	5a9b      	ldrh	r3, [r3, r2]
 800d060:	b29a      	uxth	r2, r3
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	2180      	movs	r1, #128	@ 0x80
 800d068:	438a      	bics	r2, r1
 800d06a:	b291      	uxth	r1, r2
 800d06c:	2244      	movs	r2, #68	@ 0x44
 800d06e:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800d070:	687a      	ldr	r2, [r7, #4]
 800d072:	23b8      	movs	r3, #184	@ 0xb8
 800d074:	009b      	lsls	r3, r3, #2
 800d076:	5cd3      	ldrb	r3, [r2, r3]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d12f      	bne.n	800d0dc <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	2240      	movs	r2, #64	@ 0x40
 800d082:	5a9b      	ldrh	r3, [r3, r2]
 800d084:	b29a      	uxth	r2, r3
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	2104      	movs	r1, #4
 800d08c:	430a      	orrs	r2, r1
 800d08e:	b291      	uxth	r1, r2
 800d090:	2240      	movs	r2, #64	@ 0x40
 800d092:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	2240      	movs	r2, #64	@ 0x40
 800d09a:	5a9b      	ldrh	r3, [r3, r2]
 800d09c:	b29a      	uxth	r2, r3
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	2108      	movs	r1, #8
 800d0a4:	430a      	orrs	r2, r1
 800d0a6:	b291      	uxth	r1, r2
 800d0a8:	2240      	movs	r2, #64	@ 0x40
 800d0aa:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	23b8      	movs	r3, #184	@ 0xb8
 800d0b0:	009b      	lsls	r3, r3, #2
 800d0b2:	2101      	movs	r1, #1
 800d0b4:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	2254      	movs	r2, #84	@ 0x54
 800d0bc:	5a9b      	ldrh	r3, [r3, r2]
 800d0be:	b29b      	uxth	r3, r3
 800d0c0:	089b      	lsrs	r3, r3, #2
 800d0c2:	223c      	movs	r2, #60	@ 0x3c
 800d0c4:	4013      	ands	r3, r2
 800d0c6:	0019      	movs	r1, r3
 800d0c8:	687a      	ldr	r2, [r7, #4]
 800d0ca:	23b9      	movs	r3, #185	@ 0xb9
 800d0cc:	009b      	lsls	r3, r3, #2
 800d0ce:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2101      	movs	r1, #1
 800d0d4:	0018      	movs	r0, r3
 800d0d6:	f001 fc1b 	bl	800e910 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800d0da:	e02c      	b.n	800d136 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	0018      	movs	r0, r3
 800d0e0:	f008 fbe0 	bl	80158a4 <HAL_PCD_SuspendCallback>
    return;
 800d0e4:	e027      	b.n	800d136 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800d0e6:	68fa      	ldr	r2, [r7, #12]
 800d0e8:	2380      	movs	r3, #128	@ 0x80
 800d0ea:	009b      	lsls	r3, r3, #2
 800d0ec:	4013      	ands	r3, r2
 800d0ee:	d010      	beq.n	800d112 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	2244      	movs	r2, #68	@ 0x44
 800d0f6:	5a9b      	ldrh	r3, [r3, r2]
 800d0f8:	b29a      	uxth	r2, r3
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	4914      	ldr	r1, [pc, #80]	@ (800d150 <HAL_PCD_IRQHandler+0x280>)
 800d100:	400a      	ands	r2, r1
 800d102:	b291      	uxth	r1, r2
 800d104:	2244      	movs	r2, #68	@ 0x44
 800d106:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	0018      	movs	r0, r3
 800d10c:	f008 fb96 	bl	801583c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800d110:	e011      	b.n	800d136 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800d112:	68fa      	ldr	r2, [r7, #12]
 800d114:	2380      	movs	r3, #128	@ 0x80
 800d116:	005b      	lsls	r3, r3, #1
 800d118:	4013      	ands	r3, r2
 800d11a:	d00c      	beq.n	800d136 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	2244      	movs	r2, #68	@ 0x44
 800d122:	5a9b      	ldrh	r3, [r3, r2]
 800d124:	b29a      	uxth	r2, r3
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	490a      	ldr	r1, [pc, #40]	@ (800d154 <HAL_PCD_IRQHandler+0x284>)
 800d12c:	400a      	ands	r2, r1
 800d12e:	b291      	uxth	r1, r2
 800d130:	2244      	movs	r2, #68	@ 0x44
 800d132:	5299      	strh	r1, [r3, r2]

    return;
 800d134:	46c0      	nop			@ (mov r8, r8)
  }
}
 800d136:	46bd      	mov	sp, r7
 800d138:	b004      	add	sp, #16
 800d13a:	bd80      	pop	{r7, pc}
 800d13c:	fffffbff 	.word	0xfffffbff
 800d140:	ffffbfff 	.word	0xffffbfff
 800d144:	ffffdfff 	.word	0xffffdfff
 800d148:	ffffefff 	.word	0xffffefff
 800d14c:	fffff7ff 	.word	0xfffff7ff
 800d150:	fffffdff 	.word	0xfffffdff
 800d154:	fffffeff 	.word	0xfffffeff

0800d158 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	000a      	movs	r2, r1
 800d162:	1cfb      	adds	r3, r7, #3
 800d164:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800d166:	687a      	ldr	r2, [r7, #4]
 800d168:	23aa      	movs	r3, #170	@ 0xaa
 800d16a:	009b      	lsls	r3, r3, #2
 800d16c:	5cd3      	ldrb	r3, [r2, r3]
 800d16e:	2b01      	cmp	r3, #1
 800d170:	d101      	bne.n	800d176 <HAL_PCD_SetAddress+0x1e>
 800d172:	2302      	movs	r3, #2
 800d174:	e017      	b.n	800d1a6 <HAL_PCD_SetAddress+0x4e>
 800d176:	687a      	ldr	r2, [r7, #4]
 800d178:	23aa      	movs	r3, #170	@ 0xaa
 800d17a:	009b      	lsls	r3, r3, #2
 800d17c:	2101      	movs	r1, #1
 800d17e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	1cfa      	adds	r2, r7, #3
 800d184:	2124      	movs	r1, #36	@ 0x24
 800d186:	7812      	ldrb	r2, [r2, #0]
 800d188:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681a      	ldr	r2, [r3, #0]
 800d18e:	1cfb      	adds	r3, r7, #3
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	0019      	movs	r1, r3
 800d194:	0010      	movs	r0, r2
 800d196:	f006 fb45 	bl	8013824 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800d19a:	687a      	ldr	r2, [r7, #4]
 800d19c:	23aa      	movs	r3, #170	@ 0xaa
 800d19e:	009b      	lsls	r3, r3, #2
 800d1a0:	2100      	movs	r1, #0
 800d1a2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800d1a4:	2300      	movs	r3, #0
}
 800d1a6:	0018      	movs	r0, r3
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	b002      	add	sp, #8
 800d1ac:	bd80      	pop	{r7, pc}

0800d1ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800d1ae:	b590      	push	{r4, r7, lr}
 800d1b0:	b085      	sub	sp, #20
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	6078      	str	r0, [r7, #4]
 800d1b6:	000c      	movs	r4, r1
 800d1b8:	0010      	movs	r0, r2
 800d1ba:	0019      	movs	r1, r3
 800d1bc:	1cfb      	adds	r3, r7, #3
 800d1be:	1c22      	adds	r2, r4, #0
 800d1c0:	701a      	strb	r2, [r3, #0]
 800d1c2:	003b      	movs	r3, r7
 800d1c4:	1c02      	adds	r2, r0, #0
 800d1c6:	801a      	strh	r2, [r3, #0]
 800d1c8:	1cbb      	adds	r3, r7, #2
 800d1ca:	1c0a      	adds	r2, r1, #0
 800d1cc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800d1ce:	230b      	movs	r3, #11
 800d1d0:	18fb      	adds	r3, r7, r3
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d1d6:	1cfb      	adds	r3, r7, #3
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	b25b      	sxtb	r3, r3
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	da0f      	bge.n	800d200 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d1e0:	1cfb      	adds	r3, r7, #3
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	2207      	movs	r2, #7
 800d1e6:	4013      	ands	r3, r2
 800d1e8:	1c5a      	adds	r2, r3, #1
 800d1ea:	0013      	movs	r3, r2
 800d1ec:	009b      	lsls	r3, r3, #2
 800d1ee:	189b      	adds	r3, r3, r2
 800d1f0:	00db      	lsls	r3, r3, #3
 800d1f2:	687a      	ldr	r2, [r7, #4]
 800d1f4:	18d3      	adds	r3, r2, r3
 800d1f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	705a      	strb	r2, [r3, #1]
 800d1fe:	e00f      	b.n	800d220 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d200:	1cfb      	adds	r3, r7, #3
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	2207      	movs	r2, #7
 800d206:	401a      	ands	r2, r3
 800d208:	0013      	movs	r3, r2
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	189b      	adds	r3, r3, r2
 800d20e:	00db      	lsls	r3, r3, #3
 800d210:	3369      	adds	r3, #105	@ 0x69
 800d212:	33ff      	adds	r3, #255	@ 0xff
 800d214:	687a      	ldr	r2, [r7, #4]
 800d216:	18d3      	adds	r3, r2, r3
 800d218:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	2200      	movs	r2, #0
 800d21e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800d220:	1cfb      	adds	r3, r7, #3
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	2207      	movs	r2, #7
 800d226:	4013      	ands	r3, r2
 800d228:	b2da      	uxtb	r2, r3
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800d22e:	003b      	movs	r3, r7
 800d230:	881a      	ldrh	r2, [r3, #0]
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	1cba      	adds	r2, r7, #2
 800d23a:	7812      	ldrb	r2, [r2, #0]
 800d23c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800d23e:	1cbb      	adds	r3, r7, #2
 800d240:	781b      	ldrb	r3, [r3, #0]
 800d242:	2b02      	cmp	r3, #2
 800d244:	d102      	bne.n	800d24c <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2200      	movs	r2, #0
 800d24a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800d24c:	687a      	ldr	r2, [r7, #4]
 800d24e:	23aa      	movs	r3, #170	@ 0xaa
 800d250:	009b      	lsls	r3, r3, #2
 800d252:	5cd3      	ldrb	r3, [r2, r3]
 800d254:	2b01      	cmp	r3, #1
 800d256:	d101      	bne.n	800d25c <HAL_PCD_EP_Open+0xae>
 800d258:	2302      	movs	r3, #2
 800d25a:	e013      	b.n	800d284 <HAL_PCD_EP_Open+0xd6>
 800d25c:	687a      	ldr	r2, [r7, #4]
 800d25e:	23aa      	movs	r3, #170	@ 0xaa
 800d260:	009b      	lsls	r3, r3, #2
 800d262:	2101      	movs	r1, #1
 800d264:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	68fa      	ldr	r2, [r7, #12]
 800d26c:	0011      	movs	r1, r2
 800d26e:	0018      	movs	r0, r3
 800d270:	f004 fb3c 	bl	80118ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d274:	687a      	ldr	r2, [r7, #4]
 800d276:	23aa      	movs	r3, #170	@ 0xaa
 800d278:	009b      	lsls	r3, r3, #2
 800d27a:	2100      	movs	r1, #0
 800d27c:	54d1      	strb	r1, [r2, r3]

  return ret;
 800d27e:	230b      	movs	r3, #11
 800d280:	18fb      	adds	r3, r7, r3
 800d282:	781b      	ldrb	r3, [r3, #0]
}
 800d284:	0018      	movs	r0, r3
 800d286:	46bd      	mov	sp, r7
 800d288:	b005      	add	sp, #20
 800d28a:	bd90      	pop	{r4, r7, pc}

0800d28c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b084      	sub	sp, #16
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	000a      	movs	r2, r1
 800d296:	1cfb      	adds	r3, r7, #3
 800d298:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d29a:	1cfb      	adds	r3, r7, #3
 800d29c:	781b      	ldrb	r3, [r3, #0]
 800d29e:	b25b      	sxtb	r3, r3
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	da0f      	bge.n	800d2c4 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d2a4:	1cfb      	adds	r3, r7, #3
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	2207      	movs	r2, #7
 800d2aa:	4013      	ands	r3, r2
 800d2ac:	1c5a      	adds	r2, r3, #1
 800d2ae:	0013      	movs	r3, r2
 800d2b0:	009b      	lsls	r3, r3, #2
 800d2b2:	189b      	adds	r3, r3, r2
 800d2b4:	00db      	lsls	r3, r3, #3
 800d2b6:	687a      	ldr	r2, [r7, #4]
 800d2b8:	18d3      	adds	r3, r2, r3
 800d2ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	2201      	movs	r2, #1
 800d2c0:	705a      	strb	r2, [r3, #1]
 800d2c2:	e00f      	b.n	800d2e4 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d2c4:	1cfb      	adds	r3, r7, #3
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	2207      	movs	r2, #7
 800d2ca:	401a      	ands	r2, r3
 800d2cc:	0013      	movs	r3, r2
 800d2ce:	009b      	lsls	r3, r3, #2
 800d2d0:	189b      	adds	r3, r3, r2
 800d2d2:	00db      	lsls	r3, r3, #3
 800d2d4:	3369      	adds	r3, #105	@ 0x69
 800d2d6:	33ff      	adds	r3, #255	@ 0xff
 800d2d8:	687a      	ldr	r2, [r7, #4]
 800d2da:	18d3      	adds	r3, r2, r3
 800d2dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800d2e4:	1cfb      	adds	r3, r7, #3
 800d2e6:	781b      	ldrb	r3, [r3, #0]
 800d2e8:	2207      	movs	r2, #7
 800d2ea:	4013      	ands	r3, r2
 800d2ec:	b2da      	uxtb	r2, r3
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d2f2:	687a      	ldr	r2, [r7, #4]
 800d2f4:	23aa      	movs	r3, #170	@ 0xaa
 800d2f6:	009b      	lsls	r3, r3, #2
 800d2f8:	5cd3      	ldrb	r3, [r2, r3]
 800d2fa:	2b01      	cmp	r3, #1
 800d2fc:	d101      	bne.n	800d302 <HAL_PCD_EP_Close+0x76>
 800d2fe:	2302      	movs	r3, #2
 800d300:	e011      	b.n	800d326 <HAL_PCD_EP_Close+0x9a>
 800d302:	687a      	ldr	r2, [r7, #4]
 800d304:	23aa      	movs	r3, #170	@ 0xaa
 800d306:	009b      	lsls	r3, r3, #2
 800d308:	2101      	movs	r1, #1
 800d30a:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	68fa      	ldr	r2, [r7, #12]
 800d312:	0011      	movs	r1, r2
 800d314:	0018      	movs	r0, r3
 800d316:	f004 fe8b 	bl	8012030 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d31a:	687a      	ldr	r2, [r7, #4]
 800d31c:	23aa      	movs	r3, #170	@ 0xaa
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	2100      	movs	r1, #0
 800d322:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800d324:	2300      	movs	r3, #0
}
 800d326:	0018      	movs	r0, r3
 800d328:	46bd      	mov	sp, r7
 800d32a:	b004      	add	sp, #16
 800d32c:	bd80      	pop	{r7, pc}

0800d32e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d32e:	b580      	push	{r7, lr}
 800d330:	b086      	sub	sp, #24
 800d332:	af00      	add	r7, sp, #0
 800d334:	60f8      	str	r0, [r7, #12]
 800d336:	607a      	str	r2, [r7, #4]
 800d338:	603b      	str	r3, [r7, #0]
 800d33a:	200b      	movs	r0, #11
 800d33c:	183b      	adds	r3, r7, r0
 800d33e:	1c0a      	adds	r2, r1, #0
 800d340:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d342:	0001      	movs	r1, r0
 800d344:	187b      	adds	r3, r7, r1
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	2207      	movs	r2, #7
 800d34a:	401a      	ands	r2, r3
 800d34c:	0013      	movs	r3, r2
 800d34e:	009b      	lsls	r3, r3, #2
 800d350:	189b      	adds	r3, r3, r2
 800d352:	00db      	lsls	r3, r3, #3
 800d354:	3369      	adds	r3, #105	@ 0x69
 800d356:	33ff      	adds	r3, #255	@ 0xff
 800d358:	68fa      	ldr	r2, [r7, #12]
 800d35a:	18d3      	adds	r3, r2, r3
 800d35c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800d364:	697b      	ldr	r3, [r7, #20]
 800d366:	683a      	ldr	r2, [r7, #0]
 800d368:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	2200      	movs	r2, #0
 800d36e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	2200      	movs	r2, #0
 800d374:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d376:	187b      	adds	r3, r7, r1
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	2207      	movs	r2, #7
 800d37c:	4013      	ands	r3, r2
 800d37e:	b2da      	uxtb	r2, r3
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	697a      	ldr	r2, [r7, #20]
 800d38a:	0011      	movs	r1, r2
 800d38c:	0018      	movs	r0, r3
 800d38e:	f005 f80f 	bl	80123b0 <USB_EPStartXfer>

  return HAL_OK;
 800d392:	2300      	movs	r3, #0
}
 800d394:	0018      	movs	r0, r3
 800d396:	46bd      	mov	sp, r7
 800d398:	b006      	add	sp, #24
 800d39a:	bd80      	pop	{r7, pc}

0800d39c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b082      	sub	sp, #8
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	000a      	movs	r2, r1
 800d3a6:	1cfb      	adds	r3, r7, #3
 800d3a8:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d3aa:	1cfb      	adds	r3, r7, #3
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	2207      	movs	r2, #7
 800d3b0:	401a      	ands	r2, r3
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	23c2      	movs	r3, #194	@ 0xc2
 800d3b6:	0059      	lsls	r1, r3, #1
 800d3b8:	0013      	movs	r3, r2
 800d3ba:	009b      	lsls	r3, r3, #2
 800d3bc:	189b      	adds	r3, r3, r2
 800d3be:	00db      	lsls	r3, r3, #3
 800d3c0:	18c3      	adds	r3, r0, r3
 800d3c2:	185b      	adds	r3, r3, r1
 800d3c4:	681b      	ldr	r3, [r3, #0]
}
 800d3c6:	0018      	movs	r0, r3
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	b002      	add	sp, #8
 800d3cc:	bd80      	pop	{r7, pc}

0800d3ce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d3ce:	b580      	push	{r7, lr}
 800d3d0:	b086      	sub	sp, #24
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	60f8      	str	r0, [r7, #12]
 800d3d6:	607a      	str	r2, [r7, #4]
 800d3d8:	603b      	str	r3, [r7, #0]
 800d3da:	200b      	movs	r0, #11
 800d3dc:	183b      	adds	r3, r7, r0
 800d3de:	1c0a      	adds	r2, r1, #0
 800d3e0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d3e2:	183b      	adds	r3, r7, r0
 800d3e4:	781b      	ldrb	r3, [r3, #0]
 800d3e6:	2207      	movs	r2, #7
 800d3e8:	4013      	ands	r3, r2
 800d3ea:	1c5a      	adds	r2, r3, #1
 800d3ec:	0013      	movs	r3, r2
 800d3ee:	009b      	lsls	r3, r3, #2
 800d3f0:	189b      	adds	r3, r3, r2
 800d3f2:	00db      	lsls	r3, r3, #3
 800d3f4:	68fa      	ldr	r2, [r7, #12]
 800d3f6:	18d3      	adds	r3, r2, r3
 800d3f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	683a      	ldr	r2, [r7, #0]
 800d404:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	2224      	movs	r2, #36	@ 0x24
 800d40a:	2101      	movs	r1, #1
 800d40c:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	683a      	ldr	r2, [r7, #0]
 800d412:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	2200      	movs	r2, #0
 800d418:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	2201      	movs	r2, #1
 800d41e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d420:	183b      	adds	r3, r7, r0
 800d422:	781b      	ldrb	r3, [r3, #0]
 800d424:	2207      	movs	r2, #7
 800d426:	4013      	ands	r3, r2
 800d428:	b2da      	uxtb	r2, r3
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	697a      	ldr	r2, [r7, #20]
 800d434:	0011      	movs	r1, r2
 800d436:	0018      	movs	r0, r3
 800d438:	f004 ffba 	bl	80123b0 <USB_EPStartXfer>

  return HAL_OK;
 800d43c:	2300      	movs	r3, #0
}
 800d43e:	0018      	movs	r0, r3
 800d440:	46bd      	mov	sp, r7
 800d442:	b006      	add	sp, #24
 800d444:	bd80      	pop	{r7, pc}

0800d446 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d446:	b580      	push	{r7, lr}
 800d448:	b084      	sub	sp, #16
 800d44a:	af00      	add	r7, sp, #0
 800d44c:	6078      	str	r0, [r7, #4]
 800d44e:	000a      	movs	r2, r1
 800d450:	1cfb      	adds	r3, r7, #3
 800d452:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d454:	1cfb      	adds	r3, r7, #3
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	2207      	movs	r2, #7
 800d45a:	401a      	ands	r2, r3
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	685b      	ldr	r3, [r3, #4]
 800d460:	429a      	cmp	r2, r3
 800d462:	d901      	bls.n	800d468 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800d464:	2301      	movs	r3, #1
 800d466:	e046      	b.n	800d4f6 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d468:	1cfb      	adds	r3, r7, #3
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	b25b      	sxtb	r3, r3
 800d46e:	2b00      	cmp	r3, #0
 800d470:	da0f      	bge.n	800d492 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d472:	1cfb      	adds	r3, r7, #3
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	2207      	movs	r2, #7
 800d478:	4013      	ands	r3, r2
 800d47a:	1c5a      	adds	r2, r3, #1
 800d47c:	0013      	movs	r3, r2
 800d47e:	009b      	lsls	r3, r3, #2
 800d480:	189b      	adds	r3, r3, r2
 800d482:	00db      	lsls	r3, r3, #3
 800d484:	687a      	ldr	r2, [r7, #4]
 800d486:	18d3      	adds	r3, r2, r3
 800d488:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	2201      	movs	r2, #1
 800d48e:	705a      	strb	r2, [r3, #1]
 800d490:	e00d      	b.n	800d4ae <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d492:	1cfb      	adds	r3, r7, #3
 800d494:	781a      	ldrb	r2, [r3, #0]
 800d496:	0013      	movs	r3, r2
 800d498:	009b      	lsls	r3, r3, #2
 800d49a:	189b      	adds	r3, r3, r2
 800d49c:	00db      	lsls	r3, r3, #3
 800d49e:	3369      	adds	r3, #105	@ 0x69
 800d4a0:	33ff      	adds	r3, #255	@ 0xff
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	18d3      	adds	r3, r2, r3
 800d4a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d4b4:	1cfb      	adds	r3, r7, #3
 800d4b6:	781b      	ldrb	r3, [r3, #0]
 800d4b8:	2207      	movs	r2, #7
 800d4ba:	4013      	ands	r3, r2
 800d4bc:	b2da      	uxtb	r2, r3
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d4c2:	687a      	ldr	r2, [r7, #4]
 800d4c4:	23aa      	movs	r3, #170	@ 0xaa
 800d4c6:	009b      	lsls	r3, r3, #2
 800d4c8:	5cd3      	ldrb	r3, [r2, r3]
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d101      	bne.n	800d4d2 <HAL_PCD_EP_SetStall+0x8c>
 800d4ce:	2302      	movs	r3, #2
 800d4d0:	e011      	b.n	800d4f6 <HAL_PCD_EP_SetStall+0xb0>
 800d4d2:	687a      	ldr	r2, [r7, #4]
 800d4d4:	23aa      	movs	r3, #170	@ 0xaa
 800d4d6:	009b      	lsls	r3, r3, #2
 800d4d8:	2101      	movs	r1, #1
 800d4da:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	68fa      	ldr	r2, [r7, #12]
 800d4e2:	0011      	movs	r1, r2
 800d4e4:	0018      	movs	r0, r3
 800d4e6:	f006 f89b 	bl	8013620 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800d4ea:	687a      	ldr	r2, [r7, #4]
 800d4ec:	23aa      	movs	r3, #170	@ 0xaa
 800d4ee:	009b      	lsls	r3, r3, #2
 800d4f0:	2100      	movs	r1, #0
 800d4f2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800d4f4:	2300      	movs	r3, #0
}
 800d4f6:	0018      	movs	r0, r3
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	b004      	add	sp, #16
 800d4fc:	bd80      	pop	{r7, pc}

0800d4fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d4fe:	b580      	push	{r7, lr}
 800d500:	b084      	sub	sp, #16
 800d502:	af00      	add	r7, sp, #0
 800d504:	6078      	str	r0, [r7, #4]
 800d506:	000a      	movs	r2, r1
 800d508:	1cfb      	adds	r3, r7, #3
 800d50a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d50c:	1cfb      	adds	r3, r7, #3
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	220f      	movs	r2, #15
 800d512:	401a      	ands	r2, r3
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	429a      	cmp	r2, r3
 800d51a:	d901      	bls.n	800d520 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800d51c:	2301      	movs	r3, #1
 800d51e:	e048      	b.n	800d5b2 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d520:	1cfb      	adds	r3, r7, #3
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	b25b      	sxtb	r3, r3
 800d526:	2b00      	cmp	r3, #0
 800d528:	da0f      	bge.n	800d54a <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d52a:	1cfb      	adds	r3, r7, #3
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	2207      	movs	r2, #7
 800d530:	4013      	ands	r3, r2
 800d532:	1c5a      	adds	r2, r3, #1
 800d534:	0013      	movs	r3, r2
 800d536:	009b      	lsls	r3, r3, #2
 800d538:	189b      	adds	r3, r3, r2
 800d53a:	00db      	lsls	r3, r3, #3
 800d53c:	687a      	ldr	r2, [r7, #4]
 800d53e:	18d3      	adds	r3, r2, r3
 800d540:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	2201      	movs	r2, #1
 800d546:	705a      	strb	r2, [r3, #1]
 800d548:	e00f      	b.n	800d56a <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d54a:	1cfb      	adds	r3, r7, #3
 800d54c:	781b      	ldrb	r3, [r3, #0]
 800d54e:	2207      	movs	r2, #7
 800d550:	401a      	ands	r2, r3
 800d552:	0013      	movs	r3, r2
 800d554:	009b      	lsls	r3, r3, #2
 800d556:	189b      	adds	r3, r3, r2
 800d558:	00db      	lsls	r3, r3, #3
 800d55a:	3369      	adds	r3, #105	@ 0x69
 800d55c:	33ff      	adds	r3, #255	@ 0xff
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	18d3      	adds	r3, r2, r3
 800d562:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2200      	movs	r2, #0
 800d568:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	2200      	movs	r2, #0
 800d56e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d570:	1cfb      	adds	r3, r7, #3
 800d572:	781b      	ldrb	r3, [r3, #0]
 800d574:	2207      	movs	r2, #7
 800d576:	4013      	ands	r3, r2
 800d578:	b2da      	uxtb	r2, r3
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	23aa      	movs	r3, #170	@ 0xaa
 800d582:	009b      	lsls	r3, r3, #2
 800d584:	5cd3      	ldrb	r3, [r2, r3]
 800d586:	2b01      	cmp	r3, #1
 800d588:	d101      	bne.n	800d58e <HAL_PCD_EP_ClrStall+0x90>
 800d58a:	2302      	movs	r3, #2
 800d58c:	e011      	b.n	800d5b2 <HAL_PCD_EP_ClrStall+0xb4>
 800d58e:	687a      	ldr	r2, [r7, #4]
 800d590:	23aa      	movs	r3, #170	@ 0xaa
 800d592:	009b      	lsls	r3, r3, #2
 800d594:	2101      	movs	r1, #1
 800d596:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	68fa      	ldr	r2, [r7, #12]
 800d59e:	0011      	movs	r1, r2
 800d5a0:	0018      	movs	r0, r3
 800d5a2:	f006 f88d 	bl	80136c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d5a6:	687a      	ldr	r2, [r7, #4]
 800d5a8:	23aa      	movs	r3, #170	@ 0xaa
 800d5aa:	009b      	lsls	r3, r3, #2
 800d5ac:	2100      	movs	r1, #0
 800d5ae:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800d5b0:	2300      	movs	r3, #0
}
 800d5b2:	0018      	movs	r0, r3
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	b004      	add	sp, #16
 800d5b8:	bd80      	pop	{r7, pc}
	...

0800d5bc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800d5bc:	b5b0      	push	{r4, r5, r7, lr}
 800d5be:	b096      	sub	sp, #88	@ 0x58
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800d5c4:	f000 fbec 	bl	800dda0 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681a      	ldr	r2, [r3, #0]
 800d5cc:	204e      	movs	r0, #78	@ 0x4e
 800d5ce:	183b      	adds	r3, r7, r0
 800d5d0:	2144      	movs	r1, #68	@ 0x44
 800d5d2:	5a52      	ldrh	r2, [r2, r1]
 800d5d4:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800d5d6:	183b      	adds	r3, r7, r0
 800d5d8:	881b      	ldrh	r3, [r3, #0]
 800d5da:	b2da      	uxtb	r2, r3
 800d5dc:	244d      	movs	r4, #77	@ 0x4d
 800d5de:	193b      	adds	r3, r7, r4
 800d5e0:	210f      	movs	r1, #15
 800d5e2:	400a      	ands	r2, r1
 800d5e4:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800d5e6:	193b      	adds	r3, r7, r4
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d000      	beq.n	800d5f0 <PCD_EP_ISR_Handler+0x34>
 800d5ee:	e18f      	b.n	800d910 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800d5f0:	183b      	adds	r3, r7, r0
 800d5f2:	881b      	ldrh	r3, [r3, #0]
 800d5f4:	2210      	movs	r2, #16
 800d5f6:	4013      	ands	r3, r2
 800d5f8:	d155      	bne.n	800d6a6 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	881b      	ldrh	r3, [r3, #0]
 800d600:	b29a      	uxth	r2, r3
 800d602:	200e      	movs	r0, #14
 800d604:	183b      	adds	r3, r7, r0
 800d606:	49bb      	ldr	r1, [pc, #748]	@ (800d8f4 <PCD_EP_ISR_Handler+0x338>)
 800d608:	400a      	ands	r2, r1
 800d60a:	801a      	strh	r2, [r3, #0]
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	183a      	adds	r2, r7, r0
 800d612:	8812      	ldrh	r2, [r2, #0]
 800d614:	49b8      	ldr	r1, [pc, #736]	@ (800d8f8 <PCD_EP_ISR_Handler+0x33c>)
 800d616:	430a      	orrs	r2, r1
 800d618:	b292      	uxth	r2, r2
 800d61a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	3328      	adds	r3, #40	@ 0x28
 800d620:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	2250      	movs	r2, #80	@ 0x50
 800d628:	5a9b      	ldrh	r3, [r3, r2]
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	001a      	movs	r2, r3
 800d62e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	00db      	lsls	r3, r3, #3
 800d634:	18d2      	adds	r2, r2, r3
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	18d3      	adds	r3, r2, r3
 800d63c:	4aaf      	ldr	r2, [pc, #700]	@ (800d8fc <PCD_EP_ISR_Handler+0x340>)
 800d63e:	4694      	mov	ip, r2
 800d640:	4463      	add	r3, ip
 800d642:	881b      	ldrh	r3, [r3, #0]
 800d644:	059b      	lsls	r3, r3, #22
 800d646:	0d9a      	lsrs	r2, r3, #22
 800d648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d64a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800d64c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d64e:	695a      	ldr	r2, [r3, #20]
 800d650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d652:	69db      	ldr	r3, [r3, #28]
 800d654:	18d2      	adds	r2, r2, r3
 800d656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d658:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2100      	movs	r1, #0
 800d65e:	0018      	movs	r0, r3
 800d660:	f008 f8ce 	bl	8015800 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2224      	movs	r2, #36	@ 0x24
 800d668:	5c9b      	ldrb	r3, [r3, r2]
 800d66a:	b2db      	uxtb	r3, r3
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d101      	bne.n	800d674 <PCD_EP_ISR_Handler+0xb8>
 800d670:	f000 fb96 	bl	800dda0 <PCD_EP_ISR_Handler+0x7e4>
 800d674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d676:	699b      	ldr	r3, [r3, #24]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d001      	beq.n	800d680 <PCD_EP_ISR_Handler+0xc4>
 800d67c:	f000 fb90 	bl	800dda0 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2224      	movs	r2, #36	@ 0x24
 800d684:	5c9b      	ldrb	r3, [r3, r2]
 800d686:	b2db      	uxtb	r3, r3
 800d688:	2280      	movs	r2, #128	@ 0x80
 800d68a:	4252      	negs	r2, r2
 800d68c:	4313      	orrs	r3, r2
 800d68e:	b2da      	uxtb	r2, r3
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	0011      	movs	r1, r2
 800d696:	224c      	movs	r2, #76	@ 0x4c
 800d698:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2224      	movs	r2, #36	@ 0x24
 800d69e:	2100      	movs	r1, #0
 800d6a0:	5499      	strb	r1, [r3, r2]
 800d6a2:	f000 fb7d 	bl	800dda0 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	3369      	adds	r3, #105	@ 0x69
 800d6aa:	33ff      	adds	r3, #255	@ 0xff
 800d6ac:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681a      	ldr	r2, [r3, #0]
 800d6b2:	214a      	movs	r1, #74	@ 0x4a
 800d6b4:	187b      	adds	r3, r7, r1
 800d6b6:	8812      	ldrh	r2, [r2, #0]
 800d6b8:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800d6ba:	187b      	adds	r3, r7, r1
 800d6bc:	881a      	ldrh	r2, [r3, #0]
 800d6be:	2380      	movs	r3, #128	@ 0x80
 800d6c0:	011b      	lsls	r3, r3, #4
 800d6c2:	4013      	ands	r3, r2
 800d6c4:	d037      	beq.n	800d736 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	2250      	movs	r2, #80	@ 0x50
 800d6cc:	5a9b      	ldrh	r3, [r3, r2]
 800d6ce:	b29b      	uxth	r3, r3
 800d6d0:	001a      	movs	r2, r3
 800d6d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6d4:	781b      	ldrb	r3, [r3, #0]
 800d6d6:	00db      	lsls	r3, r3, #3
 800d6d8:	18d2      	adds	r2, r2, r3
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	18d3      	adds	r3, r2, r3
 800d6e0:	4a87      	ldr	r2, [pc, #540]	@ (800d900 <PCD_EP_ISR_Handler+0x344>)
 800d6e2:	4694      	mov	ip, r2
 800d6e4:	4463      	add	r3, ip
 800d6e6:	881b      	ldrh	r3, [r3, #0]
 800d6e8:	059b      	lsls	r3, r3, #22
 800d6ea:	0d9a      	lsrs	r2, r3, #22
 800d6ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6ee:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6818      	ldr	r0, [r3, #0]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	22ac      	movs	r2, #172	@ 0xac
 800d6f8:	0092      	lsls	r2, r2, #2
 800d6fa:	1899      	adds	r1, r3, r2
 800d6fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6fe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800d700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d702:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800d704:	b29b      	uxth	r3, r3
 800d706:	f006 f90e 	bl	8013926 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	881b      	ldrh	r3, [r3, #0]
 800d710:	b29a      	uxth	r2, r3
 800d712:	2010      	movs	r0, #16
 800d714:	183b      	adds	r3, r7, r0
 800d716:	497b      	ldr	r1, [pc, #492]	@ (800d904 <PCD_EP_ISR_Handler+0x348>)
 800d718:	400a      	ands	r2, r1
 800d71a:	801a      	strh	r2, [r3, #0]
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	183a      	adds	r2, r7, r0
 800d722:	8812      	ldrh	r2, [r2, #0]
 800d724:	2180      	movs	r1, #128	@ 0x80
 800d726:	430a      	orrs	r2, r1
 800d728:	b292      	uxth	r2, r2
 800d72a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	0018      	movs	r0, r3
 800d730:	f008 f830 	bl	8015794 <HAL_PCD_SetupStageCallback>
 800d734:	e334      	b.n	800dda0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800d736:	234a      	movs	r3, #74	@ 0x4a
 800d738:	18fb      	adds	r3, r7, r3
 800d73a:	2200      	movs	r2, #0
 800d73c:	5e9b      	ldrsh	r3, [r3, r2]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	db00      	blt.n	800d744 <PCD_EP_ISR_Handler+0x188>
 800d742:	e32d      	b.n	800dda0 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	881b      	ldrh	r3, [r3, #0]
 800d74a:	b29a      	uxth	r2, r3
 800d74c:	201e      	movs	r0, #30
 800d74e:	183b      	adds	r3, r7, r0
 800d750:	496c      	ldr	r1, [pc, #432]	@ (800d904 <PCD_EP_ISR_Handler+0x348>)
 800d752:	400a      	ands	r2, r1
 800d754:	801a      	strh	r2, [r3, #0]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	183a      	adds	r2, r7, r0
 800d75c:	8812      	ldrh	r2, [r2, #0]
 800d75e:	2180      	movs	r1, #128	@ 0x80
 800d760:	430a      	orrs	r2, r1
 800d762:	b292      	uxth	r2, r2
 800d764:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	2250      	movs	r2, #80	@ 0x50
 800d76c:	5a9b      	ldrh	r3, [r3, r2]
 800d76e:	b29b      	uxth	r3, r3
 800d770:	001a      	movs	r2, r3
 800d772:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d774:	781b      	ldrb	r3, [r3, #0]
 800d776:	00db      	lsls	r3, r3, #3
 800d778:	18d2      	adds	r2, r2, r3
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	18d3      	adds	r3, r2, r3
 800d780:	4a5f      	ldr	r2, [pc, #380]	@ (800d900 <PCD_EP_ISR_Handler+0x344>)
 800d782:	4694      	mov	ip, r2
 800d784:	4463      	add	r3, ip
 800d786:	881b      	ldrh	r3, [r3, #0]
 800d788:	059b      	lsls	r3, r3, #22
 800d78a:	0d9a      	lsrs	r2, r3, #22
 800d78c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d78e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800d790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d792:	69db      	ldr	r3, [r3, #28]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d01a      	beq.n	800d7ce <PCD_EP_ISR_Handler+0x212>
 800d798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d79a:	695b      	ldr	r3, [r3, #20]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d016      	beq.n	800d7ce <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6818      	ldr	r0, [r3, #0]
 800d7a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7a6:	6959      	ldr	r1, [r3, #20]
 800d7a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7aa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800d7ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7ae:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800d7b0:	b29b      	uxth	r3, r3
 800d7b2:	f006 f8b8 	bl	8013926 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800d7b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7b8:	695a      	ldr	r2, [r3, #20]
 800d7ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7bc:	69db      	ldr	r3, [r3, #28]
 800d7be:	18d2      	adds	r2, r2, r3
 800d7c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7c2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2100      	movs	r1, #0
 800d7c8:	0018      	movs	r0, r3
 800d7ca:	f007 fff8 	bl	80157be <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681a      	ldr	r2, [r3, #0]
 800d7d2:	214a      	movs	r1, #74	@ 0x4a
 800d7d4:	187b      	adds	r3, r7, r1
 800d7d6:	8812      	ldrh	r2, [r2, #0]
 800d7d8:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800d7da:	187b      	adds	r3, r7, r1
 800d7dc:	881a      	ldrh	r2, [r3, #0]
 800d7de:	2380      	movs	r3, #128	@ 0x80
 800d7e0:	011b      	lsls	r3, r3, #4
 800d7e2:	4013      	ands	r3, r2
 800d7e4:	d000      	beq.n	800d7e8 <PCD_EP_ISR_Handler+0x22c>
 800d7e6:	e2db      	b.n	800dda0 <PCD_EP_ISR_Handler+0x7e4>
 800d7e8:	187b      	adds	r3, r7, r1
 800d7ea:	881a      	ldrh	r2, [r3, #0]
 800d7ec:	23c0      	movs	r3, #192	@ 0xc0
 800d7ee:	019b      	lsls	r3, r3, #6
 800d7f0:	401a      	ands	r2, r3
 800d7f2:	23c0      	movs	r3, #192	@ 0xc0
 800d7f4:	019b      	lsls	r3, r3, #6
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d100      	bne.n	800d7fc <PCD_EP_ISR_Handler+0x240>
 800d7fa:	e2d1      	b.n	800dda0 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	61bb      	str	r3, [r7, #24]
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	2250      	movs	r2, #80	@ 0x50
 800d808:	5a9b      	ldrh	r3, [r3, r2]
 800d80a:	b29b      	uxth	r3, r3
 800d80c:	001a      	movs	r2, r3
 800d80e:	69bb      	ldr	r3, [r7, #24]
 800d810:	189b      	adds	r3, r3, r2
 800d812:	61bb      	str	r3, [r7, #24]
 800d814:	69bb      	ldr	r3, [r7, #24]
 800d816:	4a3a      	ldr	r2, [pc, #232]	@ (800d900 <PCD_EP_ISR_Handler+0x344>)
 800d818:	4694      	mov	ip, r2
 800d81a:	4463      	add	r3, ip
 800d81c:	617b      	str	r3, [r7, #20]
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	881b      	ldrh	r3, [r3, #0]
 800d822:	b29b      	uxth	r3, r3
 800d824:	059b      	lsls	r3, r3, #22
 800d826:	0d9b      	lsrs	r3, r3, #22
 800d828:	b29a      	uxth	r2, r3
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	801a      	strh	r2, [r3, #0]
 800d82e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d830:	691b      	ldr	r3, [r3, #16]
 800d832:	2b3e      	cmp	r3, #62	@ 0x3e
 800d834:	d91a      	bls.n	800d86c <PCD_EP_ISR_Handler+0x2b0>
 800d836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d838:	691b      	ldr	r3, [r3, #16]
 800d83a:	095b      	lsrs	r3, r3, #5
 800d83c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d83e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d840:	691b      	ldr	r3, [r3, #16]
 800d842:	221f      	movs	r2, #31
 800d844:	4013      	ands	r3, r2
 800d846:	d102      	bne.n	800d84e <PCD_EP_ISR_Handler+0x292>
 800d848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d84a:	3b01      	subs	r3, #1
 800d84c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	881b      	ldrh	r3, [r3, #0]
 800d852:	b29a      	uxth	r2, r3
 800d854:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d856:	b29b      	uxth	r3, r3
 800d858:	029b      	lsls	r3, r3, #10
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	4313      	orrs	r3, r2
 800d85e:	b29b      	uxth	r3, r3
 800d860:	4a25      	ldr	r2, [pc, #148]	@ (800d8f8 <PCD_EP_ISR_Handler+0x33c>)
 800d862:	4313      	orrs	r3, r2
 800d864:	b29a      	uxth	r2, r3
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	801a      	strh	r2, [r3, #0]
 800d86a:	e023      	b.n	800d8b4 <PCD_EP_ISR_Handler+0x2f8>
 800d86c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d86e:	691b      	ldr	r3, [r3, #16]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d108      	bne.n	800d886 <PCD_EP_ISR_Handler+0x2ca>
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	881b      	ldrh	r3, [r3, #0]
 800d878:	b29b      	uxth	r3, r3
 800d87a:	4a1f      	ldr	r2, [pc, #124]	@ (800d8f8 <PCD_EP_ISR_Handler+0x33c>)
 800d87c:	4313      	orrs	r3, r2
 800d87e:	b29a      	uxth	r2, r3
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	801a      	strh	r2, [r3, #0]
 800d884:	e016      	b.n	800d8b4 <PCD_EP_ISR_Handler+0x2f8>
 800d886:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d888:	691b      	ldr	r3, [r3, #16]
 800d88a:	085b      	lsrs	r3, r3, #1
 800d88c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d88e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d890:	691b      	ldr	r3, [r3, #16]
 800d892:	2201      	movs	r2, #1
 800d894:	4013      	ands	r3, r2
 800d896:	d002      	beq.n	800d89e <PCD_EP_ISR_Handler+0x2e2>
 800d898:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d89a:	3301      	adds	r3, #1
 800d89c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d89e:	697b      	ldr	r3, [r7, #20]
 800d8a0:	881b      	ldrh	r3, [r3, #0]
 800d8a2:	b29a      	uxth	r2, r3
 800d8a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	029b      	lsls	r3, r3, #10
 800d8aa:	b29b      	uxth	r3, r3
 800d8ac:	4313      	orrs	r3, r2
 800d8ae:	b29a      	uxth	r2, r3
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	881b      	ldrh	r3, [r3, #0]
 800d8ba:	b29a      	uxth	r2, r3
 800d8bc:	2012      	movs	r0, #18
 800d8be:	183b      	adds	r3, r7, r0
 800d8c0:	4911      	ldr	r1, [pc, #68]	@ (800d908 <PCD_EP_ISR_Handler+0x34c>)
 800d8c2:	400a      	ands	r2, r1
 800d8c4:	801a      	strh	r2, [r3, #0]
 800d8c6:	183b      	adds	r3, r7, r0
 800d8c8:	183a      	adds	r2, r7, r0
 800d8ca:	8812      	ldrh	r2, [r2, #0]
 800d8cc:	2180      	movs	r1, #128	@ 0x80
 800d8ce:	0149      	lsls	r1, r1, #5
 800d8d0:	404a      	eors	r2, r1
 800d8d2:	801a      	strh	r2, [r3, #0]
 800d8d4:	183b      	adds	r3, r7, r0
 800d8d6:	183a      	adds	r2, r7, r0
 800d8d8:	8812      	ldrh	r2, [r2, #0]
 800d8da:	2180      	movs	r1, #128	@ 0x80
 800d8dc:	0189      	lsls	r1, r1, #6
 800d8de:	404a      	eors	r2, r1
 800d8e0:	801a      	strh	r2, [r3, #0]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	183a      	adds	r2, r7, r0
 800d8e8:	8812      	ldrh	r2, [r2, #0]
 800d8ea:	4908      	ldr	r1, [pc, #32]	@ (800d90c <PCD_EP_ISR_Handler+0x350>)
 800d8ec:	430a      	orrs	r2, r1
 800d8ee:	b292      	uxth	r2, r2
 800d8f0:	801a      	strh	r2, [r3, #0]
 800d8f2:	e255      	b.n	800dda0 <PCD_EP_ISR_Handler+0x7e4>
 800d8f4:	ffff8f0f 	.word	0xffff8f0f
 800d8f8:	ffff8000 	.word	0xffff8000
 800d8fc:	00000402 	.word	0x00000402
 800d900:	00000406 	.word	0x00000406
 800d904:	00000f8f 	.word	0x00000f8f
 800d908:	ffffbf8f 	.word	0xffffbf8f
 800d90c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	001a      	movs	r2, r3
 800d916:	204d      	movs	r0, #77	@ 0x4d
 800d918:	183b      	adds	r3, r7, r0
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	009b      	lsls	r3, r3, #2
 800d91e:	18d2      	adds	r2, r2, r3
 800d920:	214a      	movs	r1, #74	@ 0x4a
 800d922:	187b      	adds	r3, r7, r1
 800d924:	8812      	ldrh	r2, [r2, #0]
 800d926:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800d928:	187b      	adds	r3, r7, r1
 800d92a:	2200      	movs	r2, #0
 800d92c:	5e9b      	ldrsh	r3, [r3, r2]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	db00      	blt.n	800d934 <PCD_EP_ISR_Handler+0x378>
 800d932:	e0fa      	b.n	800db2a <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	001a      	movs	r2, r3
 800d93a:	183b      	adds	r3, r7, r0
 800d93c:	781b      	ldrb	r3, [r3, #0]
 800d93e:	009b      	lsls	r3, r3, #2
 800d940:	18d3      	adds	r3, r2, r3
 800d942:	881b      	ldrh	r3, [r3, #0]
 800d944:	b29a      	uxth	r2, r3
 800d946:	2448      	movs	r4, #72	@ 0x48
 800d948:	193b      	adds	r3, r7, r4
 800d94a:	49d1      	ldr	r1, [pc, #836]	@ (800dc90 <PCD_EP_ISR_Handler+0x6d4>)
 800d94c:	400a      	ands	r2, r1
 800d94e:	801a      	strh	r2, [r3, #0]
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	001a      	movs	r2, r3
 800d956:	183b      	adds	r3, r7, r0
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	009b      	lsls	r3, r3, #2
 800d95c:	18d3      	adds	r3, r2, r3
 800d95e:	193a      	adds	r2, r7, r4
 800d960:	8812      	ldrh	r2, [r2, #0]
 800d962:	2180      	movs	r1, #128	@ 0x80
 800d964:	430a      	orrs	r2, r1
 800d966:	b292      	uxth	r2, r2
 800d968:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800d96a:	183b      	adds	r3, r7, r0
 800d96c:	781a      	ldrb	r2, [r3, #0]
 800d96e:	0013      	movs	r3, r2
 800d970:	009b      	lsls	r3, r3, #2
 800d972:	189b      	adds	r3, r3, r2
 800d974:	00db      	lsls	r3, r3, #3
 800d976:	3369      	adds	r3, #105	@ 0x69
 800d978:	33ff      	adds	r3, #255	@ 0xff
 800d97a:	687a      	ldr	r2, [r7, #4]
 800d97c:	18d3      	adds	r3, r2, r3
 800d97e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800d980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d982:	7b1b      	ldrb	r3, [r3, #12]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d125      	bne.n	800d9d4 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	2250      	movs	r2, #80	@ 0x50
 800d98e:	5a9b      	ldrh	r3, [r3, r2]
 800d990:	b29b      	uxth	r3, r3
 800d992:	001a      	movs	r2, r3
 800d994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d996:	781b      	ldrb	r3, [r3, #0]
 800d998:	00db      	lsls	r3, r3, #3
 800d99a:	18d2      	adds	r2, r2, r3
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	18d3      	adds	r3, r2, r3
 800d9a2:	4abc      	ldr	r2, [pc, #752]	@ (800dc94 <PCD_EP_ISR_Handler+0x6d8>)
 800d9a4:	4694      	mov	ip, r2
 800d9a6:	4463      	add	r3, ip
 800d9a8:	881a      	ldrh	r2, [r3, #0]
 800d9aa:	2450      	movs	r4, #80	@ 0x50
 800d9ac:	193b      	adds	r3, r7, r4
 800d9ae:	0592      	lsls	r2, r2, #22
 800d9b0:	0d92      	lsrs	r2, r2, #22
 800d9b2:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800d9b4:	193b      	adds	r3, r7, r4
 800d9b6:	881b      	ldrh	r3, [r3, #0]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d100      	bne.n	800d9be <PCD_EP_ISR_Handler+0x402>
 800d9bc:	e08d      	b.n	800dada <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6818      	ldr	r0, [r3, #0]
 800d9c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9c4:	6959      	ldr	r1, [r3, #20]
 800d9c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9c8:	88da      	ldrh	r2, [r3, #6]
 800d9ca:	193b      	adds	r3, r7, r4
 800d9cc:	881b      	ldrh	r3, [r3, #0]
 800d9ce:	f005 ffaa 	bl	8013926 <USB_ReadPMA>
 800d9d2:	e082      	b.n	800dada <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800d9d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9d6:	78db      	ldrb	r3, [r3, #3]
 800d9d8:	2b02      	cmp	r3, #2
 800d9da:	d10c      	bne.n	800d9f6 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800d9dc:	2350      	movs	r3, #80	@ 0x50
 800d9de:	18fc      	adds	r4, r7, r3
 800d9e0:	234a      	movs	r3, #74	@ 0x4a
 800d9e2:	18fb      	adds	r3, r7, r3
 800d9e4:	881a      	ldrh	r2, [r3, #0]
 800d9e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	0018      	movs	r0, r3
 800d9ec:	f000 f9ec 	bl	800ddc8 <HAL_PCD_EP_DB_Receive>
 800d9f0:	0003      	movs	r3, r0
 800d9f2:	8023      	strh	r3, [r4, #0]
 800d9f4:	e071      	b.n	800dada <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	001a      	movs	r2, r3
 800d9fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9fe:	781b      	ldrb	r3, [r3, #0]
 800da00:	009b      	lsls	r3, r3, #2
 800da02:	18d3      	adds	r3, r2, r3
 800da04:	881b      	ldrh	r3, [r3, #0]
 800da06:	b29a      	uxth	r2, r3
 800da08:	2052      	movs	r0, #82	@ 0x52
 800da0a:	183b      	adds	r3, r7, r0
 800da0c:	49a2      	ldr	r1, [pc, #648]	@ (800dc98 <PCD_EP_ISR_Handler+0x6dc>)
 800da0e:	400a      	ands	r2, r1
 800da10:	801a      	strh	r2, [r3, #0]
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	001a      	movs	r2, r3
 800da18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da1a:	781b      	ldrb	r3, [r3, #0]
 800da1c:	009b      	lsls	r3, r3, #2
 800da1e:	18d3      	adds	r3, r2, r3
 800da20:	183a      	adds	r2, r7, r0
 800da22:	8812      	ldrh	r2, [r2, #0]
 800da24:	499d      	ldr	r1, [pc, #628]	@ (800dc9c <PCD_EP_ISR_Handler+0x6e0>)
 800da26:	430a      	orrs	r2, r1
 800da28:	b292      	uxth	r2, r2
 800da2a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	001a      	movs	r2, r3
 800da32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	009b      	lsls	r3, r3, #2
 800da38:	18d3      	adds	r3, r2, r3
 800da3a:	881b      	ldrh	r3, [r3, #0]
 800da3c:	b29b      	uxth	r3, r3
 800da3e:	001a      	movs	r2, r3
 800da40:	2380      	movs	r3, #128	@ 0x80
 800da42:	01db      	lsls	r3, r3, #7
 800da44:	4013      	ands	r3, r2
 800da46:	d024      	beq.n	800da92 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	2250      	movs	r2, #80	@ 0x50
 800da4e:	5a9b      	ldrh	r3, [r3, r2]
 800da50:	b29b      	uxth	r3, r3
 800da52:	001a      	movs	r2, r3
 800da54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	00db      	lsls	r3, r3, #3
 800da5a:	18d2      	adds	r2, r2, r3
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	18d3      	adds	r3, r2, r3
 800da62:	4a8f      	ldr	r2, [pc, #572]	@ (800dca0 <PCD_EP_ISR_Handler+0x6e4>)
 800da64:	4694      	mov	ip, r2
 800da66:	4463      	add	r3, ip
 800da68:	881a      	ldrh	r2, [r3, #0]
 800da6a:	2450      	movs	r4, #80	@ 0x50
 800da6c:	193b      	adds	r3, r7, r4
 800da6e:	0592      	lsls	r2, r2, #22
 800da70:	0d92      	lsrs	r2, r2, #22
 800da72:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800da74:	193b      	adds	r3, r7, r4
 800da76:	881b      	ldrh	r3, [r3, #0]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d02e      	beq.n	800dada <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6818      	ldr	r0, [r3, #0]
 800da80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da82:	6959      	ldr	r1, [r3, #20]
 800da84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da86:	891a      	ldrh	r2, [r3, #8]
 800da88:	193b      	adds	r3, r7, r4
 800da8a:	881b      	ldrh	r3, [r3, #0]
 800da8c:	f005 ff4b 	bl	8013926 <USB_ReadPMA>
 800da90:	e023      	b.n	800dada <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	2250      	movs	r2, #80	@ 0x50
 800da98:	5a9b      	ldrh	r3, [r3, r2]
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	001a      	movs	r2, r3
 800da9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	00db      	lsls	r3, r3, #3
 800daa4:	18d2      	adds	r2, r2, r3
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	18d3      	adds	r3, r2, r3
 800daac:	4a79      	ldr	r2, [pc, #484]	@ (800dc94 <PCD_EP_ISR_Handler+0x6d8>)
 800daae:	4694      	mov	ip, r2
 800dab0:	4463      	add	r3, ip
 800dab2:	881a      	ldrh	r2, [r3, #0]
 800dab4:	2450      	movs	r4, #80	@ 0x50
 800dab6:	193b      	adds	r3, r7, r4
 800dab8:	0592      	lsls	r2, r2, #22
 800daba:	0d92      	lsrs	r2, r2, #22
 800dabc:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800dabe:	193b      	adds	r3, r7, r4
 800dac0:	881b      	ldrh	r3, [r3, #0]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d009      	beq.n	800dada <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	6818      	ldr	r0, [r3, #0]
 800daca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dacc:	6959      	ldr	r1, [r3, #20]
 800dace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dad0:	895a      	ldrh	r2, [r3, #10]
 800dad2:	193b      	adds	r3, r7, r4
 800dad4:	881b      	ldrh	r3, [r3, #0]
 800dad6:	f005 ff26 	bl	8013926 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800dada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dadc:	69da      	ldr	r2, [r3, #28]
 800dade:	2150      	movs	r1, #80	@ 0x50
 800dae0:	187b      	adds	r3, r7, r1
 800dae2:	881b      	ldrh	r3, [r3, #0]
 800dae4:	18d2      	adds	r2, r2, r3
 800dae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dae8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800daea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800daec:	695a      	ldr	r2, [r3, #20]
 800daee:	187b      	adds	r3, r7, r1
 800daf0:	881b      	ldrh	r3, [r3, #0]
 800daf2:	18d2      	adds	r2, r2, r3
 800daf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800daf6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800daf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dafa:	699b      	ldr	r3, [r3, #24]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d005      	beq.n	800db0c <PCD_EP_ISR_Handler+0x550>
 800db00:	187b      	adds	r3, r7, r1
 800db02:	881a      	ldrh	r2, [r3, #0]
 800db04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db06:	691b      	ldr	r3, [r3, #16]
 800db08:	429a      	cmp	r2, r3
 800db0a:	d207      	bcs.n	800db1c <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800db0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db0e:	781a      	ldrb	r2, [r3, #0]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	0011      	movs	r1, r2
 800db14:	0018      	movs	r0, r3
 800db16:	f007 fe52 	bl	80157be <HAL_PCD_DataOutStageCallback>
 800db1a:	e006      	b.n	800db2a <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800db22:	0011      	movs	r1, r2
 800db24:	0018      	movs	r0, r3
 800db26:	f004 fc43 	bl	80123b0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800db2a:	244a      	movs	r4, #74	@ 0x4a
 800db2c:	193b      	adds	r3, r7, r4
 800db2e:	881b      	ldrh	r3, [r3, #0]
 800db30:	2280      	movs	r2, #128	@ 0x80
 800db32:	4013      	ands	r3, r2
 800db34:	d100      	bne.n	800db38 <PCD_EP_ISR_Handler+0x57c>
 800db36:	e133      	b.n	800dda0 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800db38:	204d      	movs	r0, #77	@ 0x4d
 800db3a:	183b      	adds	r3, r7, r0
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	1c5a      	adds	r2, r3, #1
 800db40:	0013      	movs	r3, r2
 800db42:	009b      	lsls	r3, r3, #2
 800db44:	189b      	adds	r3, r3, r2
 800db46:	00db      	lsls	r3, r3, #3
 800db48:	687a      	ldr	r2, [r7, #4]
 800db4a:	18d3      	adds	r3, r2, r3
 800db4c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	001a      	movs	r2, r3
 800db54:	183b      	adds	r3, r7, r0
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	009b      	lsls	r3, r3, #2
 800db5a:	18d3      	adds	r3, r2, r3
 800db5c:	881b      	ldrh	r3, [r3, #0]
 800db5e:	b29a      	uxth	r2, r3
 800db60:	2542      	movs	r5, #66	@ 0x42
 800db62:	197b      	adds	r3, r7, r5
 800db64:	494f      	ldr	r1, [pc, #316]	@ (800dca4 <PCD_EP_ISR_Handler+0x6e8>)
 800db66:	400a      	ands	r2, r1
 800db68:	801a      	strh	r2, [r3, #0]
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	001a      	movs	r2, r3
 800db70:	183b      	adds	r3, r7, r0
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	009b      	lsls	r3, r3, #2
 800db76:	18d3      	adds	r3, r2, r3
 800db78:	197a      	adds	r2, r7, r5
 800db7a:	8812      	ldrh	r2, [r2, #0]
 800db7c:	494a      	ldr	r1, [pc, #296]	@ (800dca8 <PCD_EP_ISR_Handler+0x6ec>)
 800db7e:	430a      	orrs	r2, r1
 800db80:	b292      	uxth	r2, r2
 800db82:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800db84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db86:	78db      	ldrb	r3, [r3, #3]
 800db88:	2b01      	cmp	r3, #1
 800db8a:	d000      	beq.n	800db8e <PCD_EP_ISR_Handler+0x5d2>
 800db8c:	e0af      	b.n	800dcee <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 800db8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db90:	2200      	movs	r2, #0
 800db92:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800db94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db96:	7b1b      	ldrb	r3, [r3, #12]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d100      	bne.n	800db9e <PCD_EP_ISR_Handler+0x5e2>
 800db9c:	e09f      	b.n	800dcde <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800db9e:	193b      	adds	r3, r7, r4
 800dba0:	881b      	ldrh	r3, [r3, #0]
 800dba2:	2240      	movs	r2, #64	@ 0x40
 800dba4:	4013      	ands	r3, r2
 800dba6:	d046      	beq.n	800dc36 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800dba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbaa:	785b      	ldrb	r3, [r3, #1]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d125      	bne.n	800dbfc <PCD_EP_ISR_Handler+0x640>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	627b      	str	r3, [r7, #36]	@ 0x24
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	2250      	movs	r2, #80	@ 0x50
 800dbbc:	5a9b      	ldrh	r3, [r3, r2]
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	001a      	movs	r2, r3
 800dbc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbc4:	189b      	adds	r3, r3, r2
 800dbc6:	627b      	str	r3, [r7, #36]	@ 0x24
 800dbc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	00da      	lsls	r2, r3, #3
 800dbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbd0:	18d3      	adds	r3, r2, r3
 800dbd2:	4a33      	ldr	r2, [pc, #204]	@ (800dca0 <PCD_EP_ISR_Handler+0x6e4>)
 800dbd4:	4694      	mov	ip, r2
 800dbd6:	4463      	add	r3, ip
 800dbd8:	623b      	str	r3, [r7, #32]
 800dbda:	6a3b      	ldr	r3, [r7, #32]
 800dbdc:	881b      	ldrh	r3, [r3, #0]
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	059b      	lsls	r3, r3, #22
 800dbe2:	0d9b      	lsrs	r3, r3, #22
 800dbe4:	b29a      	uxth	r2, r3
 800dbe6:	6a3b      	ldr	r3, [r7, #32]
 800dbe8:	801a      	strh	r2, [r3, #0]
 800dbea:	6a3b      	ldr	r3, [r7, #32]
 800dbec:	881b      	ldrh	r3, [r3, #0]
 800dbee:	b29b      	uxth	r3, r3
 800dbf0:	4a2d      	ldr	r2, [pc, #180]	@ (800dca8 <PCD_EP_ISR_Handler+0x6ec>)
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	b29a      	uxth	r2, r3
 800dbf6:	6a3b      	ldr	r3, [r7, #32]
 800dbf8:	801a      	strh	r2, [r3, #0]
 800dbfa:	e070      	b.n	800dcde <PCD_EP_ISR_Handler+0x722>
 800dbfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbfe:	785b      	ldrb	r3, [r3, #1]
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	d16c      	bne.n	800dcde <PCD_EP_ISR_Handler+0x722>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	2250      	movs	r2, #80	@ 0x50
 800dc10:	5a9b      	ldrh	r3, [r3, r2]
 800dc12:	b29b      	uxth	r3, r3
 800dc14:	001a      	movs	r2, r3
 800dc16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc18:	189b      	adds	r3, r3, r2
 800dc1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dc1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	00da      	lsls	r2, r3, #3
 800dc22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc24:	18d3      	adds	r3, r2, r3
 800dc26:	4a1e      	ldr	r2, [pc, #120]	@ (800dca0 <PCD_EP_ISR_Handler+0x6e4>)
 800dc28:	4694      	mov	ip, r2
 800dc2a:	4463      	add	r3, ip
 800dc2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dc2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc30:	2200      	movs	r2, #0
 800dc32:	801a      	strh	r2, [r3, #0]
 800dc34:	e053      	b.n	800dcde <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dc3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc3e:	785b      	ldrb	r3, [r3, #1]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d133      	bne.n	800dcac <PCD_EP_ISR_Handler+0x6f0>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	2250      	movs	r2, #80	@ 0x50
 800dc50:	5a9b      	ldrh	r3, [r3, r2]
 800dc52:	b29b      	uxth	r3, r3
 800dc54:	001a      	movs	r2, r3
 800dc56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc58:	189b      	adds	r3, r3, r2
 800dc5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc5e:	781b      	ldrb	r3, [r3, #0]
 800dc60:	00da      	lsls	r2, r3, #3
 800dc62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc64:	18d3      	adds	r3, r2, r3
 800dc66:	4a0b      	ldr	r2, [pc, #44]	@ (800dc94 <PCD_EP_ISR_Handler+0x6d8>)
 800dc68:	4694      	mov	ip, r2
 800dc6a:	4463      	add	r3, ip
 800dc6c:	633b      	str	r3, [r7, #48]	@ 0x30
 800dc6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc70:	881b      	ldrh	r3, [r3, #0]
 800dc72:	b29b      	uxth	r3, r3
 800dc74:	059b      	lsls	r3, r3, #22
 800dc76:	0d9b      	lsrs	r3, r3, #22
 800dc78:	b29a      	uxth	r2, r3
 800dc7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc7c:	801a      	strh	r2, [r3, #0]
 800dc7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc80:	881b      	ldrh	r3, [r3, #0]
 800dc82:	b29b      	uxth	r3, r3
 800dc84:	4a08      	ldr	r2, [pc, #32]	@ (800dca8 <PCD_EP_ISR_Handler+0x6ec>)
 800dc86:	4313      	orrs	r3, r2
 800dc88:	b29a      	uxth	r2, r3
 800dc8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc8c:	801a      	strh	r2, [r3, #0]
 800dc8e:	e026      	b.n	800dcde <PCD_EP_ISR_Handler+0x722>
 800dc90:	00000f8f 	.word	0x00000f8f
 800dc94:	00000406 	.word	0x00000406
 800dc98:	ffff8f8f 	.word	0xffff8f8f
 800dc9c:	ffff80c0 	.word	0xffff80c0
 800dca0:	00000402 	.word	0x00000402
 800dca4:	ffff8f0f 	.word	0xffff8f0f
 800dca8:	ffff8000 	.word	0xffff8000
 800dcac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dcae:	785b      	ldrb	r3, [r3, #1]
 800dcb0:	2b01      	cmp	r3, #1
 800dcb2:	d114      	bne.n	800dcde <PCD_EP_ISR_Handler+0x722>
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	2250      	movs	r2, #80	@ 0x50
 800dcba:	5a9b      	ldrh	r3, [r3, r2]
 800dcbc:	b29b      	uxth	r3, r3
 800dcbe:	001a      	movs	r2, r3
 800dcc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcc2:	189b      	adds	r3, r3, r2
 800dcc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dcc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dcc8:	781b      	ldrb	r3, [r3, #0]
 800dcca:	00da      	lsls	r2, r3, #3
 800dccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcce:	18d3      	adds	r3, r2, r3
 800dcd0:	4a3b      	ldr	r2, [pc, #236]	@ (800ddc0 <PCD_EP_ISR_Handler+0x804>)
 800dcd2:	4694      	mov	ip, r2
 800dcd4:	4463      	add	r3, ip
 800dcd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dcd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcda:	2200      	movs	r2, #0
 800dcdc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800dcde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dce0:	781a      	ldrb	r2, [r3, #0]
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	0011      	movs	r1, r2
 800dce6:	0018      	movs	r0, r3
 800dce8:	f007 fd8a 	bl	8015800 <HAL_PCD_DataInStageCallback>
 800dcec:	e058      	b.n	800dda0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800dcee:	234a      	movs	r3, #74	@ 0x4a
 800dcf0:	18fb      	adds	r3, r7, r3
 800dcf2:	881a      	ldrh	r2, [r3, #0]
 800dcf4:	2380      	movs	r3, #128	@ 0x80
 800dcf6:	005b      	lsls	r3, r3, #1
 800dcf8:	4013      	ands	r3, r2
 800dcfa:	d149      	bne.n	800dd90 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	2250      	movs	r2, #80	@ 0x50
 800dd02:	5a9b      	ldrh	r3, [r3, r2]
 800dd04:	b29b      	uxth	r3, r3
 800dd06:	001a      	movs	r2, r3
 800dd08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	00db      	lsls	r3, r3, #3
 800dd0e:	18d2      	adds	r2, r2, r3
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	18d3      	adds	r3, r2, r3
 800dd16:	4a2b      	ldr	r2, [pc, #172]	@ (800ddc4 <PCD_EP_ISR_Handler+0x808>)
 800dd18:	4694      	mov	ip, r2
 800dd1a:	4463      	add	r3, ip
 800dd1c:	881a      	ldrh	r2, [r3, #0]
 800dd1e:	2140      	movs	r1, #64	@ 0x40
 800dd20:	187b      	adds	r3, r7, r1
 800dd22:	0592      	lsls	r2, r2, #22
 800dd24:	0d92      	lsrs	r2, r2, #22
 800dd26:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800dd28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd2a:	699a      	ldr	r2, [r3, #24]
 800dd2c:	187b      	adds	r3, r7, r1
 800dd2e:	881b      	ldrh	r3, [r3, #0]
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d907      	bls.n	800dd44 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 800dd34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd36:	699a      	ldr	r2, [r3, #24]
 800dd38:	187b      	adds	r3, r7, r1
 800dd3a:	881b      	ldrh	r3, [r3, #0]
 800dd3c:	1ad2      	subs	r2, r2, r3
 800dd3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd40:	619a      	str	r2, [r3, #24]
 800dd42:	e002      	b.n	800dd4a <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 800dd44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd46:	2200      	movs	r2, #0
 800dd48:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800dd4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd4c:	699b      	ldr	r3, [r3, #24]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d107      	bne.n	800dd62 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800dd52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd54:	781a      	ldrb	r2, [r3, #0]
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	0011      	movs	r1, r2
 800dd5a:	0018      	movs	r0, r3
 800dd5c:	f007 fd50 	bl	8015800 <HAL_PCD_DataInStageCallback>
 800dd60:	e01e      	b.n	800dda0 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800dd62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd64:	695a      	ldr	r2, [r3, #20]
 800dd66:	2140      	movs	r1, #64	@ 0x40
 800dd68:	187b      	adds	r3, r7, r1
 800dd6a:	881b      	ldrh	r3, [r3, #0]
 800dd6c:	18d2      	adds	r2, r2, r3
 800dd6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd70:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800dd72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd74:	69da      	ldr	r2, [r3, #28]
 800dd76:	187b      	adds	r3, r7, r1
 800dd78:	881b      	ldrh	r3, [r3, #0]
 800dd7a:	18d2      	adds	r2, r2, r3
 800dd7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd7e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dd86:	0011      	movs	r1, r2
 800dd88:	0018      	movs	r0, r3
 800dd8a:	f004 fb11 	bl	80123b0 <USB_EPStartXfer>
 800dd8e:	e007      	b.n	800dda0 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800dd90:	234a      	movs	r3, #74	@ 0x4a
 800dd92:	18fb      	adds	r3, r7, r3
 800dd94:	881a      	ldrh	r2, [r3, #0]
 800dd96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	0018      	movs	r0, r3
 800dd9c:	f000 f930 	bl	800e000 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	2244      	movs	r2, #68	@ 0x44
 800dda6:	5a9b      	ldrh	r3, [r3, r2]
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	b21b      	sxth	r3, r3
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	da01      	bge.n	800ddb4 <PCD_EP_ISR_Handler+0x7f8>
 800ddb0:	f7ff fc0a 	bl	800d5c8 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 800ddb4:	2300      	movs	r3, #0
}
 800ddb6:	0018      	movs	r0, r3
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	b016      	add	sp, #88	@ 0x58
 800ddbc:	bdb0      	pop	{r4, r5, r7, pc}
 800ddbe:	46c0      	nop			@ (mov r8, r8)
 800ddc0:	00000406 	.word	0x00000406
 800ddc4:	00000402 	.word	0x00000402

0800ddc8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800ddc8:	b590      	push	{r4, r7, lr}
 800ddca:	b089      	sub	sp, #36	@ 0x24
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	60f8      	str	r0, [r7, #12]
 800ddd0:	60b9      	str	r1, [r7, #8]
 800ddd2:	1dbb      	adds	r3, r7, #6
 800ddd4:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ddd6:	1dbb      	adds	r3, r7, #6
 800ddd8:	881a      	ldrh	r2, [r3, #0]
 800ddda:	2380      	movs	r3, #128	@ 0x80
 800dddc:	01db      	lsls	r3, r3, #7
 800ddde:	4013      	ands	r3, r2
 800dde0:	d100      	bne.n	800dde4 <HAL_PCD_EP_DB_Receive+0x1c>
 800dde2:	e07d      	b.n	800dee0 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	2250      	movs	r2, #80	@ 0x50
 800ddea:	5a9b      	ldrh	r3, [r3, r2]
 800ddec:	b29b      	uxth	r3, r3
 800ddee:	001a      	movs	r2, r3
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	781b      	ldrb	r3, [r3, #0]
 800ddf4:	00db      	lsls	r3, r3, #3
 800ddf6:	18d2      	adds	r2, r2, r3
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	18d3      	adds	r3, r2, r3
 800ddfe:	4a7a      	ldr	r2, [pc, #488]	@ (800dfe8 <HAL_PCD_EP_DB_Receive+0x220>)
 800de00:	4694      	mov	ip, r2
 800de02:	4463      	add	r3, ip
 800de04:	881a      	ldrh	r2, [r3, #0]
 800de06:	211a      	movs	r1, #26
 800de08:	187b      	adds	r3, r7, r1
 800de0a:	0592      	lsls	r2, r2, #22
 800de0c:	0d92      	lsrs	r2, r2, #22
 800de0e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	699a      	ldr	r2, [r3, #24]
 800de14:	187b      	adds	r3, r7, r1
 800de16:	881b      	ldrh	r3, [r3, #0]
 800de18:	429a      	cmp	r2, r3
 800de1a:	d307      	bcc.n	800de2c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	699a      	ldr	r2, [r3, #24]
 800de20:	187b      	adds	r3, r7, r1
 800de22:	881b      	ldrh	r3, [r3, #0]
 800de24:	1ad2      	subs	r2, r2, r3
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	619a      	str	r2, [r3, #24]
 800de2a:	e002      	b.n	800de32 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	2200      	movs	r2, #0
 800de30:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	699b      	ldr	r3, [r3, #24]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d121      	bne.n	800de7e <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	001a      	movs	r2, r3
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	781b      	ldrb	r3, [r3, #0]
 800de44:	009b      	lsls	r3, r3, #2
 800de46:	18d3      	adds	r3, r2, r3
 800de48:	881b      	ldrh	r3, [r3, #0]
 800de4a:	b29a      	uxth	r2, r3
 800de4c:	2018      	movs	r0, #24
 800de4e:	183b      	adds	r3, r7, r0
 800de50:	4966      	ldr	r1, [pc, #408]	@ (800dfec <HAL_PCD_EP_DB_Receive+0x224>)
 800de52:	400a      	ands	r2, r1
 800de54:	801a      	strh	r2, [r3, #0]
 800de56:	183b      	adds	r3, r7, r0
 800de58:	183a      	adds	r2, r7, r0
 800de5a:	8812      	ldrh	r2, [r2, #0]
 800de5c:	2180      	movs	r1, #128	@ 0x80
 800de5e:	0189      	lsls	r1, r1, #6
 800de60:	404a      	eors	r2, r1
 800de62:	801a      	strh	r2, [r3, #0]
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	001a      	movs	r2, r3
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	781b      	ldrb	r3, [r3, #0]
 800de6e:	009b      	lsls	r3, r3, #2
 800de70:	18d3      	adds	r3, r2, r3
 800de72:	183a      	adds	r2, r7, r0
 800de74:	8812      	ldrh	r2, [r2, #0]
 800de76:	495e      	ldr	r1, [pc, #376]	@ (800dff0 <HAL_PCD_EP_DB_Receive+0x228>)
 800de78:	430a      	orrs	r2, r1
 800de7a:	b292      	uxth	r2, r2
 800de7c:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800de7e:	1dbb      	adds	r3, r7, #6
 800de80:	881b      	ldrh	r3, [r3, #0]
 800de82:	2240      	movs	r2, #64	@ 0x40
 800de84:	4013      	ands	r3, r2
 800de86:	d01a      	beq.n	800debe <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	001a      	movs	r2, r3
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	781b      	ldrb	r3, [r3, #0]
 800de92:	009b      	lsls	r3, r3, #2
 800de94:	18d3      	adds	r3, r2, r3
 800de96:	881b      	ldrh	r3, [r3, #0]
 800de98:	b29a      	uxth	r2, r3
 800de9a:	2016      	movs	r0, #22
 800de9c:	183b      	adds	r3, r7, r0
 800de9e:	4955      	ldr	r1, [pc, #340]	@ (800dff4 <HAL_PCD_EP_DB_Receive+0x22c>)
 800dea0:	400a      	ands	r2, r1
 800dea2:	801a      	strh	r2, [r3, #0]
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	001a      	movs	r2, r3
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	009b      	lsls	r3, r3, #2
 800deb0:	18d3      	adds	r3, r2, r3
 800deb2:	183a      	adds	r2, r7, r0
 800deb4:	8812      	ldrh	r2, [r2, #0]
 800deb6:	4950      	ldr	r1, [pc, #320]	@ (800dff8 <HAL_PCD_EP_DB_Receive+0x230>)
 800deb8:	430a      	orrs	r2, r1
 800deba:	b292      	uxth	r2, r2
 800debc:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800debe:	241a      	movs	r4, #26
 800dec0:	193b      	adds	r3, r7, r4
 800dec2:	881b      	ldrh	r3, [r3, #0]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d100      	bne.n	800deca <HAL_PCD_EP_DB_Receive+0x102>
 800dec8:	e086      	b.n	800dfd8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	6818      	ldr	r0, [r3, #0]
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	6959      	ldr	r1, [r3, #20]
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	891a      	ldrh	r2, [r3, #8]
 800ded6:	193b      	adds	r3, r7, r4
 800ded8:	881b      	ldrh	r3, [r3, #0]
 800deda:	f005 fd24 	bl	8013926 <USB_ReadPMA>
 800dede:	e07b      	b.n	800dfd8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	2250      	movs	r2, #80	@ 0x50
 800dee6:	5a9b      	ldrh	r3, [r3, r2]
 800dee8:	b29b      	uxth	r3, r3
 800deea:	001a      	movs	r2, r3
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	00db      	lsls	r3, r3, #3
 800def2:	18d2      	adds	r2, r2, r3
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	18d3      	adds	r3, r2, r3
 800defa:	4a40      	ldr	r2, [pc, #256]	@ (800dffc <HAL_PCD_EP_DB_Receive+0x234>)
 800defc:	4694      	mov	ip, r2
 800defe:	4463      	add	r3, ip
 800df00:	881a      	ldrh	r2, [r3, #0]
 800df02:	211a      	movs	r1, #26
 800df04:	187b      	adds	r3, r7, r1
 800df06:	0592      	lsls	r2, r2, #22
 800df08:	0d92      	lsrs	r2, r2, #22
 800df0a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	699a      	ldr	r2, [r3, #24]
 800df10:	187b      	adds	r3, r7, r1
 800df12:	881b      	ldrh	r3, [r3, #0]
 800df14:	429a      	cmp	r2, r3
 800df16:	d307      	bcc.n	800df28 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	699a      	ldr	r2, [r3, #24]
 800df1c:	187b      	adds	r3, r7, r1
 800df1e:	881b      	ldrh	r3, [r3, #0]
 800df20:	1ad2      	subs	r2, r2, r3
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	619a      	str	r2, [r3, #24]
 800df26:	e002      	b.n	800df2e <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	2200      	movs	r2, #0
 800df2c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	699b      	ldr	r3, [r3, #24]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d121      	bne.n	800df7a <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	001a      	movs	r2, r3
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	009b      	lsls	r3, r3, #2
 800df42:	18d3      	adds	r3, r2, r3
 800df44:	881b      	ldrh	r3, [r3, #0]
 800df46:	b29a      	uxth	r2, r3
 800df48:	201e      	movs	r0, #30
 800df4a:	183b      	adds	r3, r7, r0
 800df4c:	4927      	ldr	r1, [pc, #156]	@ (800dfec <HAL_PCD_EP_DB_Receive+0x224>)
 800df4e:	400a      	ands	r2, r1
 800df50:	801a      	strh	r2, [r3, #0]
 800df52:	183b      	adds	r3, r7, r0
 800df54:	183a      	adds	r2, r7, r0
 800df56:	8812      	ldrh	r2, [r2, #0]
 800df58:	2180      	movs	r1, #128	@ 0x80
 800df5a:	0189      	lsls	r1, r1, #6
 800df5c:	404a      	eors	r2, r1
 800df5e:	801a      	strh	r2, [r3, #0]
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	001a      	movs	r2, r3
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	009b      	lsls	r3, r3, #2
 800df6c:	18d3      	adds	r3, r2, r3
 800df6e:	183a      	adds	r2, r7, r0
 800df70:	8812      	ldrh	r2, [r2, #0]
 800df72:	491f      	ldr	r1, [pc, #124]	@ (800dff0 <HAL_PCD_EP_DB_Receive+0x228>)
 800df74:	430a      	orrs	r2, r1
 800df76:	b292      	uxth	r2, r2
 800df78:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800df7a:	1dbb      	adds	r3, r7, #6
 800df7c:	881b      	ldrh	r3, [r3, #0]
 800df7e:	2240      	movs	r2, #64	@ 0x40
 800df80:	4013      	ands	r3, r2
 800df82:	d11a      	bne.n	800dfba <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	001a      	movs	r2, r3
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	009b      	lsls	r3, r3, #2
 800df90:	18d3      	adds	r3, r2, r3
 800df92:	881b      	ldrh	r3, [r3, #0]
 800df94:	b29a      	uxth	r2, r3
 800df96:	201c      	movs	r0, #28
 800df98:	183b      	adds	r3, r7, r0
 800df9a:	4916      	ldr	r1, [pc, #88]	@ (800dff4 <HAL_PCD_EP_DB_Receive+0x22c>)
 800df9c:	400a      	ands	r2, r1
 800df9e:	801a      	strh	r2, [r3, #0]
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	001a      	movs	r2, r3
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	781b      	ldrb	r3, [r3, #0]
 800dfaa:	009b      	lsls	r3, r3, #2
 800dfac:	18d3      	adds	r3, r2, r3
 800dfae:	183a      	adds	r2, r7, r0
 800dfb0:	8812      	ldrh	r2, [r2, #0]
 800dfb2:	4911      	ldr	r1, [pc, #68]	@ (800dff8 <HAL_PCD_EP_DB_Receive+0x230>)
 800dfb4:	430a      	orrs	r2, r1
 800dfb6:	b292      	uxth	r2, r2
 800dfb8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800dfba:	241a      	movs	r4, #26
 800dfbc:	193b      	adds	r3, r7, r4
 800dfbe:	881b      	ldrh	r3, [r3, #0]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d009      	beq.n	800dfd8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	6818      	ldr	r0, [r3, #0]
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	6959      	ldr	r1, [r3, #20]
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	895a      	ldrh	r2, [r3, #10]
 800dfd0:	193b      	adds	r3, r7, r4
 800dfd2:	881b      	ldrh	r3, [r3, #0]
 800dfd4:	f005 fca7 	bl	8013926 <USB_ReadPMA>
    }
  }

  return count;
 800dfd8:	231a      	movs	r3, #26
 800dfda:	18fb      	adds	r3, r7, r3
 800dfdc:	881b      	ldrh	r3, [r3, #0]
}
 800dfde:	0018      	movs	r0, r3
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	b009      	add	sp, #36	@ 0x24
 800dfe4:	bd90      	pop	{r4, r7, pc}
 800dfe6:	46c0      	nop			@ (mov r8, r8)
 800dfe8:	00000402 	.word	0x00000402
 800dfec:	ffffbf8f 	.word	0xffffbf8f
 800dff0:	ffff8080 	.word	0xffff8080
 800dff4:	ffff8f8f 	.word	0xffff8f8f
 800dff8:	ffff80c0 	.word	0xffff80c0
 800dffc:	00000406 	.word	0x00000406

0800e000 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b0a4      	sub	sp, #144	@ 0x90
 800e004:	af00      	add	r7, sp, #0
 800e006:	60f8      	str	r0, [r7, #12]
 800e008:	60b9      	str	r1, [r7, #8]
 800e00a:	1dbb      	adds	r3, r7, #6
 800e00c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800e00e:	1dbb      	adds	r3, r7, #6
 800e010:	881b      	ldrh	r3, [r3, #0]
 800e012:	2240      	movs	r2, #64	@ 0x40
 800e014:	4013      	ands	r3, r2
 800e016:	d100      	bne.n	800e01a <HAL_PCD_EP_DB_Transmit+0x1a>
 800e018:	e1e4      	b.n	800e3e4 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	2250      	movs	r2, #80	@ 0x50
 800e020:	5a9b      	ldrh	r3, [r3, r2]
 800e022:	b29b      	uxth	r3, r3
 800e024:	001a      	movs	r2, r3
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	00db      	lsls	r3, r3, #3
 800e02c:	18d2      	adds	r2, r2, r3
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	18d3      	adds	r3, r2, r3
 800e034:	4ad0      	ldr	r2, [pc, #832]	@ (800e378 <HAL_PCD_EP_DB_Transmit+0x378>)
 800e036:	4694      	mov	ip, r2
 800e038:	4463      	add	r3, ip
 800e03a:	881a      	ldrh	r2, [r3, #0]
 800e03c:	2186      	movs	r1, #134	@ 0x86
 800e03e:	187b      	adds	r3, r7, r1
 800e040:	0592      	lsls	r2, r2, #22
 800e042:	0d92      	lsrs	r2, r2, #22
 800e044:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 800e046:	68bb      	ldr	r3, [r7, #8]
 800e048:	699a      	ldr	r2, [r3, #24]
 800e04a:	187b      	adds	r3, r7, r1
 800e04c:	881b      	ldrh	r3, [r3, #0]
 800e04e:	429a      	cmp	r2, r3
 800e050:	d907      	bls.n	800e062 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	699a      	ldr	r2, [r3, #24]
 800e056:	187b      	adds	r3, r7, r1
 800e058:	881b      	ldrh	r3, [r3, #0]
 800e05a:	1ad2      	subs	r2, r2, r3
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	619a      	str	r2, [r3, #24]
 800e060:	e002      	b.n	800e068 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	2200      	movs	r2, #0
 800e066:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	699b      	ldr	r3, [r3, #24]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d000      	beq.n	800e072 <HAL_PCD_EP_DB_Transmit+0x72>
 800e070:	e0b5      	b.n	800e1de <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	785b      	ldrb	r3, [r3, #1]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d125      	bne.n	800e0c6 <HAL_PCD_EP_DB_Transmit+0xc6>
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	2250      	movs	r2, #80	@ 0x50
 800e086:	5a9b      	ldrh	r3, [r3, r2]
 800e088:	b29b      	uxth	r3, r3
 800e08a:	001a      	movs	r2, r3
 800e08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e08e:	189b      	adds	r3, r3, r2
 800e090:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	00da      	lsls	r2, r3, #3
 800e098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e09a:	18d3      	adds	r3, r2, r3
 800e09c:	4ab6      	ldr	r2, [pc, #728]	@ (800e378 <HAL_PCD_EP_DB_Transmit+0x378>)
 800e09e:	4694      	mov	ip, r2
 800e0a0:	4463      	add	r3, ip
 800e0a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e0a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0a6:	881b      	ldrh	r3, [r3, #0]
 800e0a8:	b29b      	uxth	r3, r3
 800e0aa:	059b      	lsls	r3, r3, #22
 800e0ac:	0d9b      	lsrs	r3, r3, #22
 800e0ae:	b29a      	uxth	r2, r3
 800e0b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0b2:	801a      	strh	r2, [r3, #0]
 800e0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0b6:	881b      	ldrh	r3, [r3, #0]
 800e0b8:	b29b      	uxth	r3, r3
 800e0ba:	4ab0      	ldr	r2, [pc, #704]	@ (800e37c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800e0bc:	4313      	orrs	r3, r2
 800e0be:	b29a      	uxth	r2, r3
 800e0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0c2:	801a      	strh	r2, [r3, #0]
 800e0c4:	e01b      	b.n	800e0fe <HAL_PCD_EP_DB_Transmit+0xfe>
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	785b      	ldrb	r3, [r3, #1]
 800e0ca:	2b01      	cmp	r3, #1
 800e0cc:	d117      	bne.n	800e0fe <HAL_PCD_EP_DB_Transmit+0xfe>
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	2250      	movs	r2, #80	@ 0x50
 800e0da:	5a9b      	ldrh	r3, [r3, r2]
 800e0dc:	b29b      	uxth	r3, r3
 800e0de:	001a      	movs	r2, r3
 800e0e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0e2:	189b      	adds	r3, r3, r2
 800e0e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	781b      	ldrb	r3, [r3, #0]
 800e0ea:	00da      	lsls	r2, r3, #3
 800e0ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0ee:	18d3      	adds	r3, r2, r3
 800e0f0:	4aa1      	ldr	r2, [pc, #644]	@ (800e378 <HAL_PCD_EP_DB_Transmit+0x378>)
 800e0f2:	4694      	mov	ip, r2
 800e0f4:	4463      	add	r3, ip
 800e0f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800e0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	627b      	str	r3, [r7, #36]	@ 0x24
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	785b      	ldrb	r3, [r3, #1]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d125      	bne.n	800e158 <HAL_PCD_EP_DB_Transmit+0x158>
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	61fb      	str	r3, [r7, #28]
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	2250      	movs	r2, #80	@ 0x50
 800e118:	5a9b      	ldrh	r3, [r3, r2]
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	001a      	movs	r2, r3
 800e11e:	69fb      	ldr	r3, [r7, #28]
 800e120:	189b      	adds	r3, r3, r2
 800e122:	61fb      	str	r3, [r7, #28]
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	781b      	ldrb	r3, [r3, #0]
 800e128:	00da      	lsls	r2, r3, #3
 800e12a:	69fb      	ldr	r3, [r7, #28]
 800e12c:	18d3      	adds	r3, r2, r3
 800e12e:	4a94      	ldr	r2, [pc, #592]	@ (800e380 <HAL_PCD_EP_DB_Transmit+0x380>)
 800e130:	4694      	mov	ip, r2
 800e132:	4463      	add	r3, ip
 800e134:	61bb      	str	r3, [r7, #24]
 800e136:	69bb      	ldr	r3, [r7, #24]
 800e138:	881b      	ldrh	r3, [r3, #0]
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	059b      	lsls	r3, r3, #22
 800e13e:	0d9b      	lsrs	r3, r3, #22
 800e140:	b29a      	uxth	r2, r3
 800e142:	69bb      	ldr	r3, [r7, #24]
 800e144:	801a      	strh	r2, [r3, #0]
 800e146:	69bb      	ldr	r3, [r7, #24]
 800e148:	881b      	ldrh	r3, [r3, #0]
 800e14a:	b29b      	uxth	r3, r3
 800e14c:	4a8b      	ldr	r2, [pc, #556]	@ (800e37c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800e14e:	4313      	orrs	r3, r2
 800e150:	b29a      	uxth	r2, r3
 800e152:	69bb      	ldr	r3, [r7, #24]
 800e154:	801a      	strh	r2, [r3, #0]
 800e156:	e018      	b.n	800e18a <HAL_PCD_EP_DB_Transmit+0x18a>
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	785b      	ldrb	r3, [r3, #1]
 800e15c:	2b01      	cmp	r3, #1
 800e15e:	d114      	bne.n	800e18a <HAL_PCD_EP_DB_Transmit+0x18a>
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	2250      	movs	r2, #80	@ 0x50
 800e166:	5a9b      	ldrh	r3, [r3, r2]
 800e168:	b29b      	uxth	r3, r3
 800e16a:	001a      	movs	r2, r3
 800e16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e16e:	189b      	adds	r3, r3, r2
 800e170:	627b      	str	r3, [r7, #36]	@ 0x24
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	781b      	ldrb	r3, [r3, #0]
 800e176:	00da      	lsls	r2, r3, #3
 800e178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e17a:	18d3      	adds	r3, r2, r3
 800e17c:	4a80      	ldr	r2, [pc, #512]	@ (800e380 <HAL_PCD_EP_DB_Transmit+0x380>)
 800e17e:	4694      	mov	ip, r2
 800e180:	4463      	add	r3, ip
 800e182:	623b      	str	r3, [r7, #32]
 800e184:	6a3b      	ldr	r3, [r7, #32]
 800e186:	2200      	movs	r2, #0
 800e188:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	781a      	ldrb	r2, [r3, #0]
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	0011      	movs	r1, r2
 800e192:	0018      	movs	r0, r3
 800e194:	f007 fb34 	bl	8015800 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800e198:	1dbb      	adds	r3, r7, #6
 800e19a:	881a      	ldrh	r2, [r3, #0]
 800e19c:	2380      	movs	r3, #128	@ 0x80
 800e19e:	01db      	lsls	r3, r3, #7
 800e1a0:	4013      	ands	r3, r2
 800e1a2:	d100      	bne.n	800e1a6 <HAL_PCD_EP_DB_Transmit+0x1a6>
 800e1a4:	e309      	b.n	800e7ba <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	001a      	movs	r2, r3
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	009b      	lsls	r3, r3, #2
 800e1b2:	18d3      	adds	r3, r2, r3
 800e1b4:	881b      	ldrh	r3, [r3, #0]
 800e1b6:	b29a      	uxth	r2, r3
 800e1b8:	2016      	movs	r0, #22
 800e1ba:	183b      	adds	r3, r7, r0
 800e1bc:	4971      	ldr	r1, [pc, #452]	@ (800e384 <HAL_PCD_EP_DB_Transmit+0x384>)
 800e1be:	400a      	ands	r2, r1
 800e1c0:	801a      	strh	r2, [r3, #0]
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	001a      	movs	r2, r3
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	781b      	ldrb	r3, [r3, #0]
 800e1cc:	009b      	lsls	r3, r3, #2
 800e1ce:	18d3      	adds	r3, r2, r3
 800e1d0:	183a      	adds	r2, r7, r0
 800e1d2:	8812      	ldrh	r2, [r2, #0]
 800e1d4:	496c      	ldr	r1, [pc, #432]	@ (800e388 <HAL_PCD_EP_DB_Transmit+0x388>)
 800e1d6:	430a      	orrs	r2, r1
 800e1d8:	b292      	uxth	r2, r2
 800e1da:	801a      	strh	r2, [r3, #0]
 800e1dc:	e2ed      	b.n	800e7ba <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800e1de:	1dbb      	adds	r3, r7, #6
 800e1e0:	881a      	ldrh	r2, [r3, #0]
 800e1e2:	2380      	movs	r3, #128	@ 0x80
 800e1e4:	01db      	lsls	r3, r3, #7
 800e1e6:	4013      	ands	r3, r2
 800e1e8:	d01a      	beq.n	800e220 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	001a      	movs	r2, r3
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	781b      	ldrb	r3, [r3, #0]
 800e1f4:	009b      	lsls	r3, r3, #2
 800e1f6:	18d3      	adds	r3, r2, r3
 800e1f8:	881b      	ldrh	r3, [r3, #0]
 800e1fa:	b29a      	uxth	r2, r3
 800e1fc:	208a      	movs	r0, #138	@ 0x8a
 800e1fe:	183b      	adds	r3, r7, r0
 800e200:	4960      	ldr	r1, [pc, #384]	@ (800e384 <HAL_PCD_EP_DB_Transmit+0x384>)
 800e202:	400a      	ands	r2, r1
 800e204:	801a      	strh	r2, [r3, #0]
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	001a      	movs	r2, r3
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	781b      	ldrb	r3, [r3, #0]
 800e210:	009b      	lsls	r3, r3, #2
 800e212:	18d3      	adds	r3, r2, r3
 800e214:	183a      	adds	r2, r7, r0
 800e216:	8812      	ldrh	r2, [r2, #0]
 800e218:	495b      	ldr	r1, [pc, #364]	@ (800e388 <HAL_PCD_EP_DB_Transmit+0x388>)
 800e21a:	430a      	orrs	r2, r1
 800e21c:	b292      	uxth	r2, r2
 800e21e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	2224      	movs	r2, #36	@ 0x24
 800e224:	5c9b      	ldrb	r3, [r3, r2]
 800e226:	2b01      	cmp	r3, #1
 800e228:	d000      	beq.n	800e22c <HAL_PCD_EP_DB_Transmit+0x22c>
 800e22a:	e2c6      	b.n	800e7ba <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	695a      	ldr	r2, [r3, #20]
 800e230:	2186      	movs	r1, #134	@ 0x86
 800e232:	187b      	adds	r3, r7, r1
 800e234:	881b      	ldrh	r3, [r3, #0]
 800e236:	18d2      	adds	r2, r2, r3
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	69da      	ldr	r2, [r3, #28]
 800e240:	187b      	adds	r3, r7, r1
 800e242:	881b      	ldrh	r3, [r3, #0]
 800e244:	18d2      	adds	r2, r2, r3
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	6a1a      	ldr	r2, [r3, #32]
 800e24e:	68bb      	ldr	r3, [r7, #8]
 800e250:	691b      	ldr	r3, [r3, #16]
 800e252:	429a      	cmp	r2, r3
 800e254:	d30c      	bcc.n	800e270 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	691b      	ldr	r3, [r3, #16]
 800e25a:	218c      	movs	r1, #140	@ 0x8c
 800e25c:	187a      	adds	r2, r7, r1
 800e25e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	6a1a      	ldr	r2, [r3, #32]
 800e264:	187b      	adds	r3, r7, r1
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	1ad2      	subs	r2, r2, r3
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	621a      	str	r2, [r3, #32]
 800e26e:	e01a      	b.n	800e2a6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	6a1b      	ldr	r3, [r3, #32]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d10a      	bne.n	800e28e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800e278:	2386      	movs	r3, #134	@ 0x86
 800e27a:	18fb      	adds	r3, r7, r3
 800e27c:	881b      	ldrh	r3, [r3, #0]
 800e27e:	228c      	movs	r2, #140	@ 0x8c
 800e280:	18ba      	adds	r2, r7, r2
 800e282:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	2224      	movs	r2, #36	@ 0x24
 800e288:	2100      	movs	r1, #0
 800e28a:	5499      	strb	r1, [r3, r2]
 800e28c:	e00b      	b.n	800e2a6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	2224      	movs	r2, #36	@ 0x24
 800e292:	2100      	movs	r1, #0
 800e294:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	6a1b      	ldr	r3, [r3, #32]
 800e29a:	228c      	movs	r2, #140	@ 0x8c
 800e29c:	18ba      	adds	r2, r7, r2
 800e29e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	785b      	ldrb	r3, [r3, #1]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d000      	beq.n	800e2b0 <HAL_PCD_EP_DB_Transmit+0x2b0>
 800e2ae:	e06d      	b.n	800e38c <HAL_PCD_EP_DB_Transmit+0x38c>
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	2250      	movs	r2, #80	@ 0x50
 800e2bc:	5a9b      	ldrh	r3, [r3, r2]
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	001a      	movs	r2, r3
 800e2c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2c4:	189b      	adds	r3, r3, r2
 800e2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	781b      	ldrb	r3, [r3, #0]
 800e2cc:	00da      	lsls	r2, r3, #3
 800e2ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2d0:	18d3      	adds	r3, r2, r3
 800e2d2:	4a29      	ldr	r2, [pc, #164]	@ (800e378 <HAL_PCD_EP_DB_Transmit+0x378>)
 800e2d4:	4694      	mov	ip, r2
 800e2d6:	4463      	add	r3, ip
 800e2d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e2da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2dc:	881b      	ldrh	r3, [r3, #0]
 800e2de:	b29b      	uxth	r3, r3
 800e2e0:	059b      	lsls	r3, r3, #22
 800e2e2:	0d9b      	lsrs	r3, r3, #22
 800e2e4:	b29a      	uxth	r2, r3
 800e2e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2e8:	801a      	strh	r2, [r3, #0]
 800e2ea:	228c      	movs	r2, #140	@ 0x8c
 800e2ec:	18bb      	adds	r3, r7, r2
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	2b3e      	cmp	r3, #62	@ 0x3e
 800e2f2:	d91a      	bls.n	800e32a <HAL_PCD_EP_DB_Transmit+0x32a>
 800e2f4:	18bb      	adds	r3, r7, r2
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	095b      	lsrs	r3, r3, #5
 800e2fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e2fc:	18bb      	adds	r3, r7, r2
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	221f      	movs	r2, #31
 800e302:	4013      	ands	r3, r2
 800e304:	d102      	bne.n	800e30c <HAL_PCD_EP_DB_Transmit+0x30c>
 800e306:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e308:	3b01      	subs	r3, #1
 800e30a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e30e:	881b      	ldrh	r3, [r3, #0]
 800e310:	b29a      	uxth	r2, r3
 800e312:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e314:	b29b      	uxth	r3, r3
 800e316:	029b      	lsls	r3, r3, #10
 800e318:	b29b      	uxth	r3, r3
 800e31a:	4313      	orrs	r3, r2
 800e31c:	b29b      	uxth	r3, r3
 800e31e:	4a17      	ldr	r2, [pc, #92]	@ (800e37c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800e320:	4313      	orrs	r3, r2
 800e322:	b29a      	uxth	r2, r3
 800e324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e326:	801a      	strh	r2, [r3, #0]
 800e328:	e04f      	b.n	800e3ca <HAL_PCD_EP_DB_Transmit+0x3ca>
 800e32a:	238c      	movs	r3, #140	@ 0x8c
 800e32c:	18fb      	adds	r3, r7, r3
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d108      	bne.n	800e346 <HAL_PCD_EP_DB_Transmit+0x346>
 800e334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e336:	881b      	ldrh	r3, [r3, #0]
 800e338:	b29b      	uxth	r3, r3
 800e33a:	4a10      	ldr	r2, [pc, #64]	@ (800e37c <HAL_PCD_EP_DB_Transmit+0x37c>)
 800e33c:	4313      	orrs	r3, r2
 800e33e:	b29a      	uxth	r2, r3
 800e340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e342:	801a      	strh	r2, [r3, #0]
 800e344:	e041      	b.n	800e3ca <HAL_PCD_EP_DB_Transmit+0x3ca>
 800e346:	228c      	movs	r2, #140	@ 0x8c
 800e348:	18bb      	adds	r3, r7, r2
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	085b      	lsrs	r3, r3, #1
 800e34e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e350:	18bb      	adds	r3, r7, r2
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	2201      	movs	r2, #1
 800e356:	4013      	ands	r3, r2
 800e358:	d002      	beq.n	800e360 <HAL_PCD_EP_DB_Transmit+0x360>
 800e35a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e35c:	3301      	adds	r3, #1
 800e35e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e362:	881b      	ldrh	r3, [r3, #0]
 800e364:	b29a      	uxth	r2, r3
 800e366:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e368:	b29b      	uxth	r3, r3
 800e36a:	029b      	lsls	r3, r3, #10
 800e36c:	b29b      	uxth	r3, r3
 800e36e:	4313      	orrs	r3, r2
 800e370:	b29a      	uxth	r2, r3
 800e372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e374:	801a      	strh	r2, [r3, #0]
 800e376:	e028      	b.n	800e3ca <HAL_PCD_EP_DB_Transmit+0x3ca>
 800e378:	00000402 	.word	0x00000402
 800e37c:	ffff8000 	.word	0xffff8000
 800e380:	00000406 	.word	0x00000406
 800e384:	ffff8f8f 	.word	0xffff8f8f
 800e388:	ffffc080 	.word	0xffffc080
 800e38c:	68bb      	ldr	r3, [r7, #8]
 800e38e:	785b      	ldrb	r3, [r3, #1]
 800e390:	2b01      	cmp	r3, #1
 800e392:	d11a      	bne.n	800e3ca <HAL_PCD_EP_DB_Transmit+0x3ca>
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	647b      	str	r3, [r7, #68]	@ 0x44
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	2250      	movs	r2, #80	@ 0x50
 800e3a0:	5a9b      	ldrh	r3, [r3, r2]
 800e3a2:	b29b      	uxth	r3, r3
 800e3a4:	001a      	movs	r2, r3
 800e3a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3a8:	189b      	adds	r3, r3, r2
 800e3aa:	647b      	str	r3, [r7, #68]	@ 0x44
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	781b      	ldrb	r3, [r3, #0]
 800e3b0:	00da      	lsls	r2, r3, #3
 800e3b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3b4:	18d3      	adds	r3, r2, r3
 800e3b6:	4adb      	ldr	r2, [pc, #876]	@ (800e724 <HAL_PCD_EP_DB_Transmit+0x724>)
 800e3b8:	4694      	mov	ip, r2
 800e3ba:	4463      	add	r3, ip
 800e3bc:	643b      	str	r3, [r7, #64]	@ 0x40
 800e3be:	238c      	movs	r3, #140	@ 0x8c
 800e3c0:	18fb      	adds	r3, r7, r3
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	b29a      	uxth	r2, r3
 800e3c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3c8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	6818      	ldr	r0, [r3, #0]
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	6959      	ldr	r1, [r3, #20]
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	891a      	ldrh	r2, [r3, #8]
 800e3d6:	238c      	movs	r3, #140	@ 0x8c
 800e3d8:	18fb      	adds	r3, r7, r3
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	b29b      	uxth	r3, r3
 800e3de:	f005 fa59 	bl	8013894 <USB_WritePMA>
 800e3e2:	e1ea      	b.n	800e7ba <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	2250      	movs	r2, #80	@ 0x50
 800e3ea:	5a9b      	ldrh	r3, [r3, r2]
 800e3ec:	b29b      	uxth	r3, r3
 800e3ee:	001a      	movs	r2, r3
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	781b      	ldrb	r3, [r3, #0]
 800e3f4:	00db      	lsls	r3, r3, #3
 800e3f6:	18d2      	adds	r2, r2, r3
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	18d3      	adds	r3, r2, r3
 800e3fe:	4aca      	ldr	r2, [pc, #808]	@ (800e728 <HAL_PCD_EP_DB_Transmit+0x728>)
 800e400:	4694      	mov	ip, r2
 800e402:	4463      	add	r3, ip
 800e404:	881a      	ldrh	r2, [r3, #0]
 800e406:	2186      	movs	r1, #134	@ 0x86
 800e408:	187b      	adds	r3, r7, r1
 800e40a:	0592      	lsls	r2, r2, #22
 800e40c:	0d92      	lsrs	r2, r2, #22
 800e40e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	699a      	ldr	r2, [r3, #24]
 800e414:	187b      	adds	r3, r7, r1
 800e416:	881b      	ldrh	r3, [r3, #0]
 800e418:	429a      	cmp	r2, r3
 800e41a:	d307      	bcc.n	800e42c <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	699a      	ldr	r2, [r3, #24]
 800e420:	187b      	adds	r3, r7, r1
 800e422:	881b      	ldrh	r3, [r3, #0]
 800e424:	1ad2      	subs	r2, r2, r3
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	619a      	str	r2, [r3, #24]
 800e42a:	e002      	b.n	800e432 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	2200      	movs	r2, #0
 800e430:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	699b      	ldr	r3, [r3, #24]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d000      	beq.n	800e43c <HAL_PCD_EP_DB_Transmit+0x43c>
 800e43a:	e0bb      	b.n	800e5b4 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	785b      	ldrb	r3, [r3, #1]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d125      	bne.n	800e490 <HAL_PCD_EP_DB_Transmit+0x490>
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	2250      	movs	r2, #80	@ 0x50
 800e450:	5a9b      	ldrh	r3, [r3, r2]
 800e452:	b29b      	uxth	r3, r3
 800e454:	001a      	movs	r2, r3
 800e456:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e458:	189b      	adds	r3, r3, r2
 800e45a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	781b      	ldrb	r3, [r3, #0]
 800e460:	00da      	lsls	r2, r3, #3
 800e462:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e464:	18d3      	adds	r3, r2, r3
 800e466:	4aaf      	ldr	r2, [pc, #700]	@ (800e724 <HAL_PCD_EP_DB_Transmit+0x724>)
 800e468:	4694      	mov	ip, r2
 800e46a:	4463      	add	r3, ip
 800e46c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e46e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e470:	881b      	ldrh	r3, [r3, #0]
 800e472:	b29b      	uxth	r3, r3
 800e474:	059b      	lsls	r3, r3, #22
 800e476:	0d9b      	lsrs	r3, r3, #22
 800e478:	b29a      	uxth	r2, r3
 800e47a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e47c:	801a      	strh	r2, [r3, #0]
 800e47e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e480:	881b      	ldrh	r3, [r3, #0]
 800e482:	b29b      	uxth	r3, r3
 800e484:	4aa9      	ldr	r2, [pc, #676]	@ (800e72c <HAL_PCD_EP_DB_Transmit+0x72c>)
 800e486:	4313      	orrs	r3, r2
 800e488:	b29a      	uxth	r2, r3
 800e48a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e48c:	801a      	strh	r2, [r3, #0]
 800e48e:	e01b      	b.n	800e4c8 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	785b      	ldrb	r3, [r3, #1]
 800e494:	2b01      	cmp	r3, #1
 800e496:	d117      	bne.n	800e4c8 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	667b      	str	r3, [r7, #100]	@ 0x64
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	2250      	movs	r2, #80	@ 0x50
 800e4a4:	5a9b      	ldrh	r3, [r3, r2]
 800e4a6:	b29b      	uxth	r3, r3
 800e4a8:	001a      	movs	r2, r3
 800e4aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e4ac:	189b      	adds	r3, r3, r2
 800e4ae:	667b      	str	r3, [r7, #100]	@ 0x64
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	781b      	ldrb	r3, [r3, #0]
 800e4b4:	00da      	lsls	r2, r3, #3
 800e4b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e4b8:	18d3      	adds	r3, r2, r3
 800e4ba:	4a9a      	ldr	r2, [pc, #616]	@ (800e724 <HAL_PCD_EP_DB_Transmit+0x724>)
 800e4bc:	4694      	mov	ip, r2
 800e4be:	4463      	add	r3, ip
 800e4c0:	663b      	str	r3, [r7, #96]	@ 0x60
 800e4c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	677b      	str	r3, [r7, #116]	@ 0x74
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	785b      	ldrb	r3, [r3, #1]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d12b      	bne.n	800e52e <HAL_PCD_EP_DB_Transmit+0x52e>
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	2250      	movs	r2, #80	@ 0x50
 800e4e2:	5a9b      	ldrh	r3, [r3, r2]
 800e4e4:	b29b      	uxth	r3, r3
 800e4e6:	001a      	movs	r2, r3
 800e4e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e4ea:	189b      	adds	r3, r3, r2
 800e4ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	781b      	ldrb	r3, [r3, #0]
 800e4f2:	00da      	lsls	r2, r3, #3
 800e4f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e4f6:	18d3      	adds	r3, r2, r3
 800e4f8:	4a8b      	ldr	r2, [pc, #556]	@ (800e728 <HAL_PCD_EP_DB_Transmit+0x728>)
 800e4fa:	4694      	mov	ip, r2
 800e4fc:	4463      	add	r3, ip
 800e4fe:	2180      	movs	r1, #128	@ 0x80
 800e500:	187a      	adds	r2, r7, r1
 800e502:	6013      	str	r3, [r2, #0]
 800e504:	187b      	adds	r3, r7, r1
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	881b      	ldrh	r3, [r3, #0]
 800e50a:	b29b      	uxth	r3, r3
 800e50c:	059b      	lsls	r3, r3, #22
 800e50e:	0d9b      	lsrs	r3, r3, #22
 800e510:	b29a      	uxth	r2, r3
 800e512:	187b      	adds	r3, r7, r1
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	801a      	strh	r2, [r3, #0]
 800e518:	187b      	adds	r3, r7, r1
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	881b      	ldrh	r3, [r3, #0]
 800e51e:	b29b      	uxth	r3, r3
 800e520:	4a82      	ldr	r2, [pc, #520]	@ (800e72c <HAL_PCD_EP_DB_Transmit+0x72c>)
 800e522:	4313      	orrs	r3, r2
 800e524:	b29a      	uxth	r2, r3
 800e526:	187b      	adds	r3, r7, r1
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	801a      	strh	r2, [r3, #0]
 800e52c:	e018      	b.n	800e560 <HAL_PCD_EP_DB_Transmit+0x560>
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	785b      	ldrb	r3, [r3, #1]
 800e532:	2b01      	cmp	r3, #1
 800e534:	d114      	bne.n	800e560 <HAL_PCD_EP_DB_Transmit+0x560>
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	2250      	movs	r2, #80	@ 0x50
 800e53c:	5a9b      	ldrh	r3, [r3, r2]
 800e53e:	b29b      	uxth	r3, r3
 800e540:	001a      	movs	r2, r3
 800e542:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e544:	189b      	adds	r3, r3, r2
 800e546:	677b      	str	r3, [r7, #116]	@ 0x74
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	781b      	ldrb	r3, [r3, #0]
 800e54c:	00da      	lsls	r2, r3, #3
 800e54e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e550:	18d3      	adds	r3, r2, r3
 800e552:	4a75      	ldr	r2, [pc, #468]	@ (800e728 <HAL_PCD_EP_DB_Transmit+0x728>)
 800e554:	4694      	mov	ip, r2
 800e556:	4463      	add	r3, ip
 800e558:	673b      	str	r3, [r7, #112]	@ 0x70
 800e55a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e55c:	2200      	movs	r2, #0
 800e55e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	781a      	ldrb	r2, [r3, #0]
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	0011      	movs	r1, r2
 800e568:	0018      	movs	r0, r3
 800e56a:	f007 f949 	bl	8015800 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800e56e:	1dbb      	adds	r3, r7, #6
 800e570:	881a      	ldrh	r2, [r3, #0]
 800e572:	2380      	movs	r3, #128	@ 0x80
 800e574:	01db      	lsls	r3, r3, #7
 800e576:	4013      	ands	r3, r2
 800e578:	d000      	beq.n	800e57c <HAL_PCD_EP_DB_Transmit+0x57c>
 800e57a:	e11e      	b.n	800e7ba <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	001a      	movs	r2, r3
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	781b      	ldrb	r3, [r3, #0]
 800e586:	009b      	lsls	r3, r3, #2
 800e588:	18d3      	adds	r3, r2, r3
 800e58a:	881b      	ldrh	r3, [r3, #0]
 800e58c:	b29a      	uxth	r2, r3
 800e58e:	2088      	movs	r0, #136	@ 0x88
 800e590:	183b      	adds	r3, r7, r0
 800e592:	4967      	ldr	r1, [pc, #412]	@ (800e730 <HAL_PCD_EP_DB_Transmit+0x730>)
 800e594:	400a      	ands	r2, r1
 800e596:	801a      	strh	r2, [r3, #0]
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	001a      	movs	r2, r3
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	781b      	ldrb	r3, [r3, #0]
 800e5a2:	009b      	lsls	r3, r3, #2
 800e5a4:	18d3      	adds	r3, r2, r3
 800e5a6:	183a      	adds	r2, r7, r0
 800e5a8:	8812      	ldrh	r2, [r2, #0]
 800e5aa:	4962      	ldr	r1, [pc, #392]	@ (800e734 <HAL_PCD_EP_DB_Transmit+0x734>)
 800e5ac:	430a      	orrs	r2, r1
 800e5ae:	b292      	uxth	r2, r2
 800e5b0:	801a      	strh	r2, [r3, #0]
 800e5b2:	e102      	b.n	800e7ba <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800e5b4:	1dbb      	adds	r3, r7, #6
 800e5b6:	881a      	ldrh	r2, [r3, #0]
 800e5b8:	2380      	movs	r3, #128	@ 0x80
 800e5ba:	01db      	lsls	r3, r3, #7
 800e5bc:	4013      	ands	r3, r2
 800e5be:	d11a      	bne.n	800e5f6 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	001a      	movs	r2, r3
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	009b      	lsls	r3, r3, #2
 800e5cc:	18d3      	adds	r3, r2, r3
 800e5ce:	881b      	ldrh	r3, [r3, #0]
 800e5d0:	b29a      	uxth	r2, r3
 800e5d2:	204e      	movs	r0, #78	@ 0x4e
 800e5d4:	183b      	adds	r3, r7, r0
 800e5d6:	4956      	ldr	r1, [pc, #344]	@ (800e730 <HAL_PCD_EP_DB_Transmit+0x730>)
 800e5d8:	400a      	ands	r2, r1
 800e5da:	801a      	strh	r2, [r3, #0]
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	001a      	movs	r2, r3
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	781b      	ldrb	r3, [r3, #0]
 800e5e6:	009b      	lsls	r3, r3, #2
 800e5e8:	18d3      	adds	r3, r2, r3
 800e5ea:	183a      	adds	r2, r7, r0
 800e5ec:	8812      	ldrh	r2, [r2, #0]
 800e5ee:	4951      	ldr	r1, [pc, #324]	@ (800e734 <HAL_PCD_EP_DB_Transmit+0x734>)
 800e5f0:	430a      	orrs	r2, r1
 800e5f2:	b292      	uxth	r2, r2
 800e5f4:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	2224      	movs	r2, #36	@ 0x24
 800e5fa:	5c9b      	ldrb	r3, [r3, r2]
 800e5fc:	2b01      	cmp	r3, #1
 800e5fe:	d000      	beq.n	800e602 <HAL_PCD_EP_DB_Transmit+0x602>
 800e600:	e0db      	b.n	800e7ba <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	695a      	ldr	r2, [r3, #20]
 800e606:	2186      	movs	r1, #134	@ 0x86
 800e608:	187b      	adds	r3, r7, r1
 800e60a:	881b      	ldrh	r3, [r3, #0]
 800e60c:	18d2      	adds	r2, r2, r3
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	69da      	ldr	r2, [r3, #28]
 800e616:	187b      	adds	r3, r7, r1
 800e618:	881b      	ldrh	r3, [r3, #0]
 800e61a:	18d2      	adds	r2, r2, r3
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	6a1a      	ldr	r2, [r3, #32]
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	691b      	ldr	r3, [r3, #16]
 800e628:	429a      	cmp	r2, r3
 800e62a:	d30c      	bcc.n	800e646 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	691b      	ldr	r3, [r3, #16]
 800e630:	218c      	movs	r1, #140	@ 0x8c
 800e632:	187a      	adds	r2, r7, r1
 800e634:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	6a1a      	ldr	r2, [r3, #32]
 800e63a:	187b      	adds	r3, r7, r1
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	1ad2      	subs	r2, r2, r3
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	621a      	str	r2, [r3, #32]
 800e644:	e01a      	b.n	800e67c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800e646:	68bb      	ldr	r3, [r7, #8]
 800e648:	6a1b      	ldr	r3, [r3, #32]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d10a      	bne.n	800e664 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 800e64e:	2386      	movs	r3, #134	@ 0x86
 800e650:	18fb      	adds	r3, r7, r3
 800e652:	881b      	ldrh	r3, [r3, #0]
 800e654:	228c      	movs	r2, #140	@ 0x8c
 800e656:	18ba      	adds	r2, r7, r2
 800e658:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	2224      	movs	r2, #36	@ 0x24
 800e65e:	2100      	movs	r1, #0
 800e660:	5499      	strb	r1, [r3, r2]
 800e662:	e00b      	b.n	800e67c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	6a1b      	ldr	r3, [r3, #32]
 800e668:	228c      	movs	r2, #140	@ 0x8c
 800e66a:	18ba      	adds	r2, r7, r2
 800e66c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	2200      	movs	r2, #0
 800e672:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	2224      	movs	r2, #36	@ 0x24
 800e678:	2100      	movs	r1, #0
 800e67a:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	657b      	str	r3, [r7, #84]	@ 0x54
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	785b      	ldrb	r3, [r3, #1]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d000      	beq.n	800e68c <HAL_PCD_EP_DB_Transmit+0x68c>
 800e68a:	e06e      	b.n	800e76a <HAL_PCD_EP_DB_Transmit+0x76a>
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	2250      	movs	r2, #80	@ 0x50
 800e698:	5a9b      	ldrh	r3, [r3, r2]
 800e69a:	b29b      	uxth	r3, r3
 800e69c:	001a      	movs	r2, r3
 800e69e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e6a0:	189b      	adds	r3, r3, r2
 800e6a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	781b      	ldrb	r3, [r3, #0]
 800e6a8:	00da      	lsls	r2, r3, #3
 800e6aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e6ac:	18d3      	adds	r3, r2, r3
 800e6ae:	4a1e      	ldr	r2, [pc, #120]	@ (800e728 <HAL_PCD_EP_DB_Transmit+0x728>)
 800e6b0:	4694      	mov	ip, r2
 800e6b2:	4463      	add	r3, ip
 800e6b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e6b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e6b8:	881b      	ldrh	r3, [r3, #0]
 800e6ba:	b29b      	uxth	r3, r3
 800e6bc:	059b      	lsls	r3, r3, #22
 800e6be:	0d9b      	lsrs	r3, r3, #22
 800e6c0:	b29a      	uxth	r2, r3
 800e6c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e6c4:	801a      	strh	r2, [r3, #0]
 800e6c6:	228c      	movs	r2, #140	@ 0x8c
 800e6c8:	18bb      	adds	r3, r7, r2
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	2b3e      	cmp	r3, #62	@ 0x3e
 800e6ce:	d91a      	bls.n	800e706 <HAL_PCD_EP_DB_Transmit+0x706>
 800e6d0:	18bb      	adds	r3, r7, r2
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	095b      	lsrs	r3, r3, #5
 800e6d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e6d8:	18bb      	adds	r3, r7, r2
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	221f      	movs	r2, #31
 800e6de:	4013      	ands	r3, r2
 800e6e0:	d102      	bne.n	800e6e8 <HAL_PCD_EP_DB_Transmit+0x6e8>
 800e6e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e6e4:	3b01      	subs	r3, #1
 800e6e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e6e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e6ea:	881b      	ldrh	r3, [r3, #0]
 800e6ec:	b29a      	uxth	r2, r3
 800e6ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e6f0:	b29b      	uxth	r3, r3
 800e6f2:	029b      	lsls	r3, r3, #10
 800e6f4:	b29b      	uxth	r3, r3
 800e6f6:	4313      	orrs	r3, r2
 800e6f8:	b29b      	uxth	r3, r3
 800e6fa:	4a0c      	ldr	r2, [pc, #48]	@ (800e72c <HAL_PCD_EP_DB_Transmit+0x72c>)
 800e6fc:	4313      	orrs	r3, r2
 800e6fe:	b29a      	uxth	r2, r3
 800e700:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e702:	801a      	strh	r2, [r3, #0]
 800e704:	e04d      	b.n	800e7a2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800e706:	238c      	movs	r3, #140	@ 0x8c
 800e708:	18fb      	adds	r3, r7, r3
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d113      	bne.n	800e738 <HAL_PCD_EP_DB_Transmit+0x738>
 800e710:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e712:	881b      	ldrh	r3, [r3, #0]
 800e714:	b29b      	uxth	r3, r3
 800e716:	4a05      	ldr	r2, [pc, #20]	@ (800e72c <HAL_PCD_EP_DB_Transmit+0x72c>)
 800e718:	4313      	orrs	r3, r2
 800e71a:	b29a      	uxth	r2, r3
 800e71c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e71e:	801a      	strh	r2, [r3, #0]
 800e720:	e03f      	b.n	800e7a2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800e722:	46c0      	nop			@ (mov r8, r8)
 800e724:	00000402 	.word	0x00000402
 800e728:	00000406 	.word	0x00000406
 800e72c:	ffff8000 	.word	0xffff8000
 800e730:	ffff8f8f 	.word	0xffff8f8f
 800e734:	ffffc080 	.word	0xffffc080
 800e738:	228c      	movs	r2, #140	@ 0x8c
 800e73a:	18bb      	adds	r3, r7, r2
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	085b      	lsrs	r3, r3, #1
 800e740:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e742:	18bb      	adds	r3, r7, r2
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	2201      	movs	r2, #1
 800e748:	4013      	ands	r3, r2
 800e74a:	d002      	beq.n	800e752 <HAL_PCD_EP_DB_Transmit+0x752>
 800e74c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e74e:	3301      	adds	r3, #1
 800e750:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e752:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e754:	881b      	ldrh	r3, [r3, #0]
 800e756:	b29a      	uxth	r2, r3
 800e758:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e75a:	b29b      	uxth	r3, r3
 800e75c:	029b      	lsls	r3, r3, #10
 800e75e:	b29b      	uxth	r3, r3
 800e760:	4313      	orrs	r3, r2
 800e762:	b29a      	uxth	r2, r3
 800e764:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e766:	801a      	strh	r2, [r3, #0]
 800e768:	e01b      	b.n	800e7a2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	785b      	ldrb	r3, [r3, #1]
 800e76e:	2b01      	cmp	r3, #1
 800e770:	d117      	bne.n	800e7a2 <HAL_PCD_EP_DB_Transmit+0x7a2>
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	2250      	movs	r2, #80	@ 0x50
 800e778:	5a9b      	ldrh	r3, [r3, r2]
 800e77a:	b29b      	uxth	r3, r3
 800e77c:	001a      	movs	r2, r3
 800e77e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e780:	189b      	adds	r3, r3, r2
 800e782:	657b      	str	r3, [r7, #84]	@ 0x54
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	00da      	lsls	r2, r3, #3
 800e78a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e78c:	18d3      	adds	r3, r2, r3
 800e78e:	4a21      	ldr	r2, [pc, #132]	@ (800e814 <HAL_PCD_EP_DB_Transmit+0x814>)
 800e790:	4694      	mov	ip, r2
 800e792:	4463      	add	r3, ip
 800e794:	653b      	str	r3, [r7, #80]	@ 0x50
 800e796:	238c      	movs	r3, #140	@ 0x8c
 800e798:	18fb      	adds	r3, r7, r3
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	b29a      	uxth	r2, r3
 800e79e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e7a0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	6818      	ldr	r0, [r3, #0]
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	6959      	ldr	r1, [r3, #20]
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	895a      	ldrh	r2, [r3, #10]
 800e7ae:	238c      	movs	r3, #140	@ 0x8c
 800e7b0:	18fb      	adds	r3, r7, r3
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	b29b      	uxth	r3, r3
 800e7b6:	f005 f86d 	bl	8013894 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	001a      	movs	r2, r3
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	781b      	ldrb	r3, [r3, #0]
 800e7c4:	009b      	lsls	r3, r3, #2
 800e7c6:	18d3      	adds	r3, r2, r3
 800e7c8:	881b      	ldrh	r3, [r3, #0]
 800e7ca:	b29a      	uxth	r2, r3
 800e7cc:	2014      	movs	r0, #20
 800e7ce:	183b      	adds	r3, r7, r0
 800e7d0:	4911      	ldr	r1, [pc, #68]	@ (800e818 <HAL_PCD_EP_DB_Transmit+0x818>)
 800e7d2:	400a      	ands	r2, r1
 800e7d4:	801a      	strh	r2, [r3, #0]
 800e7d6:	183b      	adds	r3, r7, r0
 800e7d8:	183a      	adds	r2, r7, r0
 800e7da:	8812      	ldrh	r2, [r2, #0]
 800e7dc:	2110      	movs	r1, #16
 800e7de:	404a      	eors	r2, r1
 800e7e0:	801a      	strh	r2, [r3, #0]
 800e7e2:	183b      	adds	r3, r7, r0
 800e7e4:	183a      	adds	r2, r7, r0
 800e7e6:	8812      	ldrh	r2, [r2, #0]
 800e7e8:	2120      	movs	r1, #32
 800e7ea:	404a      	eors	r2, r1
 800e7ec:	801a      	strh	r2, [r3, #0]
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	001a      	movs	r2, r3
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	781b      	ldrb	r3, [r3, #0]
 800e7f8:	009b      	lsls	r3, r3, #2
 800e7fa:	18d3      	adds	r3, r2, r3
 800e7fc:	183a      	adds	r2, r7, r0
 800e7fe:	8812      	ldrh	r2, [r2, #0]
 800e800:	4906      	ldr	r1, [pc, #24]	@ (800e81c <HAL_PCD_EP_DB_Transmit+0x81c>)
 800e802:	430a      	orrs	r2, r1
 800e804:	b292      	uxth	r2, r2
 800e806:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800e808:	2300      	movs	r3, #0
}
 800e80a:	0018      	movs	r0, r3
 800e80c:	46bd      	mov	sp, r7
 800e80e:	b024      	add	sp, #144	@ 0x90
 800e810:	bd80      	pop	{r7, pc}
 800e812:	46c0      	nop			@ (mov r8, r8)
 800e814:	00000406 	.word	0x00000406
 800e818:	ffff8fbf 	.word	0xffff8fbf
 800e81c:	ffff8080 	.word	0xffff8080

0800e820 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800e820:	b590      	push	{r4, r7, lr}
 800e822:	b087      	sub	sp, #28
 800e824:	af00      	add	r7, sp, #0
 800e826:	60f8      	str	r0, [r7, #12]
 800e828:	0008      	movs	r0, r1
 800e82a:	0011      	movs	r1, r2
 800e82c:	607b      	str	r3, [r7, #4]
 800e82e:	240a      	movs	r4, #10
 800e830:	193b      	adds	r3, r7, r4
 800e832:	1c02      	adds	r2, r0, #0
 800e834:	801a      	strh	r2, [r3, #0]
 800e836:	2308      	movs	r3, #8
 800e838:	18fb      	adds	r3, r7, r3
 800e83a:	1c0a      	adds	r2, r1, #0
 800e83c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800e83e:	0021      	movs	r1, r4
 800e840:	187b      	adds	r3, r7, r1
 800e842:	881b      	ldrh	r3, [r3, #0]
 800e844:	2280      	movs	r2, #128	@ 0x80
 800e846:	4013      	ands	r3, r2
 800e848:	b29b      	uxth	r3, r3
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d00c      	beq.n	800e868 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e84e:	187b      	adds	r3, r7, r1
 800e850:	881b      	ldrh	r3, [r3, #0]
 800e852:	2207      	movs	r2, #7
 800e854:	4013      	ands	r3, r2
 800e856:	1c5a      	adds	r2, r3, #1
 800e858:	0013      	movs	r3, r2
 800e85a:	009b      	lsls	r3, r3, #2
 800e85c:	189b      	adds	r3, r3, r2
 800e85e:	00db      	lsls	r3, r3, #3
 800e860:	68fa      	ldr	r2, [r7, #12]
 800e862:	18d3      	adds	r3, r2, r3
 800e864:	617b      	str	r3, [r7, #20]
 800e866:	e00b      	b.n	800e880 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e868:	230a      	movs	r3, #10
 800e86a:	18fb      	adds	r3, r7, r3
 800e86c:	881a      	ldrh	r2, [r3, #0]
 800e86e:	0013      	movs	r3, r2
 800e870:	009b      	lsls	r3, r3, #2
 800e872:	189b      	adds	r3, r3, r2
 800e874:	00db      	lsls	r3, r3, #3
 800e876:	3369      	adds	r3, #105	@ 0x69
 800e878:	33ff      	adds	r3, #255	@ 0xff
 800e87a:	68fa      	ldr	r2, [r7, #12]
 800e87c:	18d3      	adds	r3, r2, r3
 800e87e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800e880:	2308      	movs	r3, #8
 800e882:	18fb      	adds	r3, r7, r3
 800e884:	881b      	ldrh	r3, [r3, #0]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d107      	bne.n	800e89a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	2200      	movs	r2, #0
 800e88e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	b29a      	uxth	r2, r3
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	80da      	strh	r2, [r3, #6]
 800e898:	e00b      	b.n	800e8b2 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	2201      	movs	r2, #1
 800e89e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	b29a      	uxth	r2, r3
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	0c1b      	lsrs	r3, r3, #16
 800e8ac:	b29a      	uxth	r2, r3
 800e8ae:	697b      	ldr	r3, [r7, #20]
 800e8b0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800e8b2:	2300      	movs	r3, #0
}
 800e8b4:	0018      	movs	r0, r3
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	b007      	add	sp, #28
 800e8ba:	bd90      	pop	{r4, r7, pc}

0800e8bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b084      	sub	sp, #16
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800e8ca:	687a      	ldr	r2, [r7, #4]
 800e8cc:	23ba      	movs	r3, #186	@ 0xba
 800e8ce:	009b      	lsls	r3, r3, #2
 800e8d0:	2101      	movs	r1, #1
 800e8d2:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800e8d4:	687a      	ldr	r2, [r7, #4]
 800e8d6:	23b8      	movs	r3, #184	@ 0xb8
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	2100      	movs	r1, #0
 800e8dc:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	2254      	movs	r2, #84	@ 0x54
 800e8e2:	5a9b      	ldrh	r3, [r3, r2]
 800e8e4:	b29b      	uxth	r3, r3
 800e8e6:	2201      	movs	r2, #1
 800e8e8:	4313      	orrs	r3, r2
 800e8ea:	b299      	uxth	r1, r3
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	2254      	movs	r2, #84	@ 0x54
 800e8f0:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	2254      	movs	r2, #84	@ 0x54
 800e8f6:	5a9b      	ldrh	r3, [r3, r2]
 800e8f8:	b29b      	uxth	r3, r3
 800e8fa:	2202      	movs	r2, #2
 800e8fc:	4313      	orrs	r3, r2
 800e8fe:	b299      	uxth	r1, r3
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	2254      	movs	r2, #84	@ 0x54
 800e904:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800e906:	2300      	movs	r3, #0
}
 800e908:	0018      	movs	r0, r3
 800e90a:	46bd      	mov	sp, r7
 800e90c:	b004      	add	sp, #16
 800e90e:	bd80      	pop	{r7, pc}

0800e910 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b082      	sub	sp, #8
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
 800e918:	000a      	movs	r2, r1
 800e91a:	1cfb      	adds	r3, r7, #3
 800e91c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800e91e:	46c0      	nop			@ (mov r8, r8)
 800e920:	46bd      	mov	sp, r7
 800e922:	b002      	add	sp, #8
 800e924:	bd80      	pop	{r7, pc}
	...

0800e928 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e928:	b5b0      	push	{r4, r5, r7, lr}
 800e92a:	b08a      	sub	sp, #40	@ 0x28
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d102      	bne.n	800e93c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800e936:	2301      	movs	r3, #1
 800e938:	f000 fbbf 	bl	800f0ba <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e93c:	4bc9      	ldr	r3, [pc, #804]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800e93e:	68db      	ldr	r3, [r3, #12]
 800e940:	220c      	movs	r2, #12
 800e942:	4013      	ands	r3, r2
 800e944:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e946:	4bc7      	ldr	r3, [pc, #796]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800e948:	68da      	ldr	r2, [r3, #12]
 800e94a:	2380      	movs	r3, #128	@ 0x80
 800e94c:	025b      	lsls	r3, r3, #9
 800e94e:	4013      	ands	r3, r2
 800e950:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	2201      	movs	r2, #1
 800e958:	4013      	ands	r3, r2
 800e95a:	d100      	bne.n	800e95e <HAL_RCC_OscConfig+0x36>
 800e95c:	e07e      	b.n	800ea5c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e95e:	69fb      	ldr	r3, [r7, #28]
 800e960:	2b08      	cmp	r3, #8
 800e962:	d007      	beq.n	800e974 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800e964:	69fb      	ldr	r3, [r7, #28]
 800e966:	2b0c      	cmp	r3, #12
 800e968:	d112      	bne.n	800e990 <HAL_RCC_OscConfig+0x68>
 800e96a:	69ba      	ldr	r2, [r7, #24]
 800e96c:	2380      	movs	r3, #128	@ 0x80
 800e96e:	025b      	lsls	r3, r3, #9
 800e970:	429a      	cmp	r2, r3
 800e972:	d10d      	bne.n	800e990 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e974:	4bbb      	ldr	r3, [pc, #748]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800e976:	681a      	ldr	r2, [r3, #0]
 800e978:	2380      	movs	r3, #128	@ 0x80
 800e97a:	029b      	lsls	r3, r3, #10
 800e97c:	4013      	ands	r3, r2
 800e97e:	d100      	bne.n	800e982 <HAL_RCC_OscConfig+0x5a>
 800e980:	e06b      	b.n	800ea5a <HAL_RCC_OscConfig+0x132>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	685b      	ldr	r3, [r3, #4]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d167      	bne.n	800ea5a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800e98a:	2301      	movs	r3, #1
 800e98c:	f000 fb95 	bl	800f0ba <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	685a      	ldr	r2, [r3, #4]
 800e994:	2380      	movs	r3, #128	@ 0x80
 800e996:	025b      	lsls	r3, r3, #9
 800e998:	429a      	cmp	r2, r3
 800e99a:	d107      	bne.n	800e9ac <HAL_RCC_OscConfig+0x84>
 800e99c:	4bb1      	ldr	r3, [pc, #708]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800e99e:	681a      	ldr	r2, [r3, #0]
 800e9a0:	4bb0      	ldr	r3, [pc, #704]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800e9a2:	2180      	movs	r1, #128	@ 0x80
 800e9a4:	0249      	lsls	r1, r1, #9
 800e9a6:	430a      	orrs	r2, r1
 800e9a8:	601a      	str	r2, [r3, #0]
 800e9aa:	e027      	b.n	800e9fc <HAL_RCC_OscConfig+0xd4>
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	685a      	ldr	r2, [r3, #4]
 800e9b0:	23a0      	movs	r3, #160	@ 0xa0
 800e9b2:	02db      	lsls	r3, r3, #11
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d10e      	bne.n	800e9d6 <HAL_RCC_OscConfig+0xae>
 800e9b8:	4baa      	ldr	r3, [pc, #680]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800e9ba:	681a      	ldr	r2, [r3, #0]
 800e9bc:	4ba9      	ldr	r3, [pc, #676]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800e9be:	2180      	movs	r1, #128	@ 0x80
 800e9c0:	02c9      	lsls	r1, r1, #11
 800e9c2:	430a      	orrs	r2, r1
 800e9c4:	601a      	str	r2, [r3, #0]
 800e9c6:	4ba7      	ldr	r3, [pc, #668]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800e9c8:	681a      	ldr	r2, [r3, #0]
 800e9ca:	4ba6      	ldr	r3, [pc, #664]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800e9cc:	2180      	movs	r1, #128	@ 0x80
 800e9ce:	0249      	lsls	r1, r1, #9
 800e9d0:	430a      	orrs	r2, r1
 800e9d2:	601a      	str	r2, [r3, #0]
 800e9d4:	e012      	b.n	800e9fc <HAL_RCC_OscConfig+0xd4>
 800e9d6:	4ba3      	ldr	r3, [pc, #652]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800e9d8:	681a      	ldr	r2, [r3, #0]
 800e9da:	4ba2      	ldr	r3, [pc, #648]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800e9dc:	49a2      	ldr	r1, [pc, #648]	@ (800ec68 <HAL_RCC_OscConfig+0x340>)
 800e9de:	400a      	ands	r2, r1
 800e9e0:	601a      	str	r2, [r3, #0]
 800e9e2:	4ba0      	ldr	r3, [pc, #640]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800e9e4:	681a      	ldr	r2, [r3, #0]
 800e9e6:	2380      	movs	r3, #128	@ 0x80
 800e9e8:	025b      	lsls	r3, r3, #9
 800e9ea:	4013      	ands	r3, r2
 800e9ec:	60fb      	str	r3, [r7, #12]
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	4b9c      	ldr	r3, [pc, #624]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800e9f2:	681a      	ldr	r2, [r3, #0]
 800e9f4:	4b9b      	ldr	r3, [pc, #620]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800e9f6:	499d      	ldr	r1, [pc, #628]	@ (800ec6c <HAL_RCC_OscConfig+0x344>)
 800e9f8:	400a      	ands	r2, r1
 800e9fa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	685b      	ldr	r3, [r3, #4]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d015      	beq.n	800ea30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ea04:	f7fa fc2c 	bl	8009260 <HAL_GetTick>
 800ea08:	0003      	movs	r3, r0
 800ea0a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ea0c:	e009      	b.n	800ea22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ea0e:	f7fa fc27 	bl	8009260 <HAL_GetTick>
 800ea12:	0002      	movs	r2, r0
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	1ad3      	subs	r3, r2, r3
 800ea18:	2b64      	cmp	r3, #100	@ 0x64
 800ea1a:	d902      	bls.n	800ea22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ea1c:	2303      	movs	r3, #3
 800ea1e:	f000 fb4c 	bl	800f0ba <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ea22:	4b90      	ldr	r3, [pc, #576]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800ea24:	681a      	ldr	r2, [r3, #0]
 800ea26:	2380      	movs	r3, #128	@ 0x80
 800ea28:	029b      	lsls	r3, r3, #10
 800ea2a:	4013      	ands	r3, r2
 800ea2c:	d0ef      	beq.n	800ea0e <HAL_RCC_OscConfig+0xe6>
 800ea2e:	e015      	b.n	800ea5c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ea30:	f7fa fc16 	bl	8009260 <HAL_GetTick>
 800ea34:	0003      	movs	r3, r0
 800ea36:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ea38:	e008      	b.n	800ea4c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ea3a:	f7fa fc11 	bl	8009260 <HAL_GetTick>
 800ea3e:	0002      	movs	r2, r0
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	1ad3      	subs	r3, r2, r3
 800ea44:	2b64      	cmp	r3, #100	@ 0x64
 800ea46:	d901      	bls.n	800ea4c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800ea48:	2303      	movs	r3, #3
 800ea4a:	e336      	b.n	800f0ba <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ea4c:	4b85      	ldr	r3, [pc, #532]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800ea4e:	681a      	ldr	r2, [r3, #0]
 800ea50:	2380      	movs	r3, #128	@ 0x80
 800ea52:	029b      	lsls	r3, r3, #10
 800ea54:	4013      	ands	r3, r2
 800ea56:	d1f0      	bne.n	800ea3a <HAL_RCC_OscConfig+0x112>
 800ea58:	e000      	b.n	800ea5c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ea5a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	2202      	movs	r2, #2
 800ea62:	4013      	ands	r3, r2
 800ea64:	d100      	bne.n	800ea68 <HAL_RCC_OscConfig+0x140>
 800ea66:	e099      	b.n	800eb9c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	68db      	ldr	r3, [r3, #12]
 800ea6c:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800ea6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea70:	2220      	movs	r2, #32
 800ea72:	4013      	ands	r3, r2
 800ea74:	d009      	beq.n	800ea8a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800ea76:	4b7b      	ldr	r3, [pc, #492]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800ea78:	681a      	ldr	r2, [r3, #0]
 800ea7a:	4b7a      	ldr	r3, [pc, #488]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800ea7c:	2120      	movs	r1, #32
 800ea7e:	430a      	orrs	r2, r1
 800ea80:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800ea82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea84:	2220      	movs	r2, #32
 800ea86:	4393      	bics	r3, r2
 800ea88:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ea8a:	69fb      	ldr	r3, [r7, #28]
 800ea8c:	2b04      	cmp	r3, #4
 800ea8e:	d005      	beq.n	800ea9c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800ea90:	69fb      	ldr	r3, [r7, #28]
 800ea92:	2b0c      	cmp	r3, #12
 800ea94:	d13e      	bne.n	800eb14 <HAL_RCC_OscConfig+0x1ec>
 800ea96:	69bb      	ldr	r3, [r7, #24]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d13b      	bne.n	800eb14 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800ea9c:	4b71      	ldr	r3, [pc, #452]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	2204      	movs	r2, #4
 800eaa2:	4013      	ands	r3, r2
 800eaa4:	d004      	beq.n	800eab0 <HAL_RCC_OscConfig+0x188>
 800eaa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d101      	bne.n	800eab0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800eaac:	2301      	movs	r3, #1
 800eaae:	e304      	b.n	800f0ba <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eab0:	4b6c      	ldr	r3, [pc, #432]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	4a6e      	ldr	r2, [pc, #440]	@ (800ec70 <HAL_RCC_OscConfig+0x348>)
 800eab6:	4013      	ands	r3, r2
 800eab8:	0019      	movs	r1, r3
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	691b      	ldr	r3, [r3, #16]
 800eabe:	021a      	lsls	r2, r3, #8
 800eac0:	4b68      	ldr	r3, [pc, #416]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800eac2:	430a      	orrs	r2, r1
 800eac4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800eac6:	4b67      	ldr	r3, [pc, #412]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	2209      	movs	r2, #9
 800eacc:	4393      	bics	r3, r2
 800eace:	0019      	movs	r1, r3
 800ead0:	4b64      	ldr	r3, [pc, #400]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800ead2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ead4:	430a      	orrs	r2, r1
 800ead6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ead8:	f000 fc42 	bl	800f360 <HAL_RCC_GetSysClockFreq>
 800eadc:	0001      	movs	r1, r0
 800eade:	4b61      	ldr	r3, [pc, #388]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800eae0:	68db      	ldr	r3, [r3, #12]
 800eae2:	091b      	lsrs	r3, r3, #4
 800eae4:	220f      	movs	r2, #15
 800eae6:	4013      	ands	r3, r2
 800eae8:	4a62      	ldr	r2, [pc, #392]	@ (800ec74 <HAL_RCC_OscConfig+0x34c>)
 800eaea:	5cd3      	ldrb	r3, [r2, r3]
 800eaec:	000a      	movs	r2, r1
 800eaee:	40da      	lsrs	r2, r3
 800eaf0:	4b61      	ldr	r3, [pc, #388]	@ (800ec78 <HAL_RCC_OscConfig+0x350>)
 800eaf2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800eaf4:	4b61      	ldr	r3, [pc, #388]	@ (800ec7c <HAL_RCC_OscConfig+0x354>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	2513      	movs	r5, #19
 800eafa:	197c      	adds	r4, r7, r5
 800eafc:	0018      	movs	r0, r3
 800eafe:	f7fa fb69 	bl	80091d4 <HAL_InitTick>
 800eb02:	0003      	movs	r3, r0
 800eb04:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800eb06:	197b      	adds	r3, r7, r5
 800eb08:	781b      	ldrb	r3, [r3, #0]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d046      	beq.n	800eb9c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800eb0e:	197b      	adds	r3, r7, r5
 800eb10:	781b      	ldrb	r3, [r3, #0]
 800eb12:	e2d2      	b.n	800f0ba <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800eb14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d027      	beq.n	800eb6a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800eb1a:	4b52      	ldr	r3, [pc, #328]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	2209      	movs	r2, #9
 800eb20:	4393      	bics	r3, r2
 800eb22:	0019      	movs	r1, r3
 800eb24:	4b4f      	ldr	r3, [pc, #316]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800eb26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb28:	430a      	orrs	r2, r1
 800eb2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eb2c:	f7fa fb98 	bl	8009260 <HAL_GetTick>
 800eb30:	0003      	movs	r3, r0
 800eb32:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800eb34:	e008      	b.n	800eb48 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800eb36:	f7fa fb93 	bl	8009260 <HAL_GetTick>
 800eb3a:	0002      	movs	r2, r0
 800eb3c:	697b      	ldr	r3, [r7, #20]
 800eb3e:	1ad3      	subs	r3, r2, r3
 800eb40:	2b02      	cmp	r3, #2
 800eb42:	d901      	bls.n	800eb48 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800eb44:	2303      	movs	r3, #3
 800eb46:	e2b8      	b.n	800f0ba <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800eb48:	4b46      	ldr	r3, [pc, #280]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	2204      	movs	r2, #4
 800eb4e:	4013      	ands	r3, r2
 800eb50:	d0f1      	beq.n	800eb36 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eb52:	4b44      	ldr	r3, [pc, #272]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800eb54:	685b      	ldr	r3, [r3, #4]
 800eb56:	4a46      	ldr	r2, [pc, #280]	@ (800ec70 <HAL_RCC_OscConfig+0x348>)
 800eb58:	4013      	ands	r3, r2
 800eb5a:	0019      	movs	r1, r3
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	691b      	ldr	r3, [r3, #16]
 800eb60:	021a      	lsls	r2, r3, #8
 800eb62:	4b40      	ldr	r3, [pc, #256]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800eb64:	430a      	orrs	r2, r1
 800eb66:	605a      	str	r2, [r3, #4]
 800eb68:	e018      	b.n	800eb9c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800eb6a:	4b3e      	ldr	r3, [pc, #248]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800eb6c:	681a      	ldr	r2, [r3, #0]
 800eb6e:	4b3d      	ldr	r3, [pc, #244]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800eb70:	2101      	movs	r1, #1
 800eb72:	438a      	bics	r2, r1
 800eb74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eb76:	f7fa fb73 	bl	8009260 <HAL_GetTick>
 800eb7a:	0003      	movs	r3, r0
 800eb7c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800eb7e:	e008      	b.n	800eb92 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800eb80:	f7fa fb6e 	bl	8009260 <HAL_GetTick>
 800eb84:	0002      	movs	r2, r0
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	1ad3      	subs	r3, r2, r3
 800eb8a:	2b02      	cmp	r3, #2
 800eb8c:	d901      	bls.n	800eb92 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800eb8e:	2303      	movs	r3, #3
 800eb90:	e293      	b.n	800f0ba <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800eb92:	4b34      	ldr	r3, [pc, #208]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	2204      	movs	r2, #4
 800eb98:	4013      	ands	r3, r2
 800eb9a:	d1f1      	bne.n	800eb80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	2210      	movs	r2, #16
 800eba2:	4013      	ands	r3, r2
 800eba4:	d100      	bne.n	800eba8 <HAL_RCC_OscConfig+0x280>
 800eba6:	e0a2      	b.n	800ecee <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800eba8:	69fb      	ldr	r3, [r7, #28]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d140      	bne.n	800ec30 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ebae:	4b2d      	ldr	r3, [pc, #180]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800ebb0:	681a      	ldr	r2, [r3, #0]
 800ebb2:	2380      	movs	r3, #128	@ 0x80
 800ebb4:	009b      	lsls	r3, r3, #2
 800ebb6:	4013      	ands	r3, r2
 800ebb8:	d005      	beq.n	800ebc6 <HAL_RCC_OscConfig+0x29e>
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	69db      	ldr	r3, [r3, #28]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d101      	bne.n	800ebc6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	e279      	b.n	800f0ba <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ebc6:	4b27      	ldr	r3, [pc, #156]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800ebc8:	685b      	ldr	r3, [r3, #4]
 800ebca:	4a2d      	ldr	r2, [pc, #180]	@ (800ec80 <HAL_RCC_OscConfig+0x358>)
 800ebcc:	4013      	ands	r3, r2
 800ebce:	0019      	movs	r1, r3
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ebd4:	4b23      	ldr	r3, [pc, #140]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800ebd6:	430a      	orrs	r2, r1
 800ebd8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ebda:	4b22      	ldr	r3, [pc, #136]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800ebdc:	685b      	ldr	r3, [r3, #4]
 800ebde:	021b      	lsls	r3, r3, #8
 800ebe0:	0a19      	lsrs	r1, r3, #8
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	6a1b      	ldr	r3, [r3, #32]
 800ebe6:	061a      	lsls	r2, r3, #24
 800ebe8:	4b1e      	ldr	r3, [pc, #120]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800ebea:	430a      	orrs	r2, r1
 800ebec:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebf2:	0b5b      	lsrs	r3, r3, #13
 800ebf4:	3301      	adds	r3, #1
 800ebf6:	2280      	movs	r2, #128	@ 0x80
 800ebf8:	0212      	lsls	r2, r2, #8
 800ebfa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800ebfc:	4b19      	ldr	r3, [pc, #100]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800ebfe:	68db      	ldr	r3, [r3, #12]
 800ec00:	091b      	lsrs	r3, r3, #4
 800ec02:	210f      	movs	r1, #15
 800ec04:	400b      	ands	r3, r1
 800ec06:	491b      	ldr	r1, [pc, #108]	@ (800ec74 <HAL_RCC_OscConfig+0x34c>)
 800ec08:	5ccb      	ldrb	r3, [r1, r3]
 800ec0a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800ec0c:	4b1a      	ldr	r3, [pc, #104]	@ (800ec78 <HAL_RCC_OscConfig+0x350>)
 800ec0e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800ec10:	4b1a      	ldr	r3, [pc, #104]	@ (800ec7c <HAL_RCC_OscConfig+0x354>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	2513      	movs	r5, #19
 800ec16:	197c      	adds	r4, r7, r5
 800ec18:	0018      	movs	r0, r3
 800ec1a:	f7fa fadb 	bl	80091d4 <HAL_InitTick>
 800ec1e:	0003      	movs	r3, r0
 800ec20:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800ec22:	197b      	adds	r3, r7, r5
 800ec24:	781b      	ldrb	r3, [r3, #0]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d061      	beq.n	800ecee <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800ec2a:	197b      	adds	r3, r7, r5
 800ec2c:	781b      	ldrb	r3, [r3, #0]
 800ec2e:	e244      	b.n	800f0ba <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	69db      	ldr	r3, [r3, #28]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d040      	beq.n	800ecba <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800ec38:	4b0a      	ldr	r3, [pc, #40]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800ec3a:	681a      	ldr	r2, [r3, #0]
 800ec3c:	4b09      	ldr	r3, [pc, #36]	@ (800ec64 <HAL_RCC_OscConfig+0x33c>)
 800ec3e:	2180      	movs	r1, #128	@ 0x80
 800ec40:	0049      	lsls	r1, r1, #1
 800ec42:	430a      	orrs	r2, r1
 800ec44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ec46:	f7fa fb0b 	bl	8009260 <HAL_GetTick>
 800ec4a:	0003      	movs	r3, r0
 800ec4c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800ec4e:	e019      	b.n	800ec84 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ec50:	f7fa fb06 	bl	8009260 <HAL_GetTick>
 800ec54:	0002      	movs	r2, r0
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	1ad3      	subs	r3, r2, r3
 800ec5a:	2b02      	cmp	r3, #2
 800ec5c:	d912      	bls.n	800ec84 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800ec5e:	2303      	movs	r3, #3
 800ec60:	e22b      	b.n	800f0ba <HAL_RCC_OscConfig+0x792>
 800ec62:	46c0      	nop			@ (mov r8, r8)
 800ec64:	40021000 	.word	0x40021000
 800ec68:	fffeffff 	.word	0xfffeffff
 800ec6c:	fffbffff 	.word	0xfffbffff
 800ec70:	ffffe0ff 	.word	0xffffe0ff
 800ec74:	0801a334 	.word	0x0801a334
 800ec78:	2000013c 	.word	0x2000013c
 800ec7c:	20000150 	.word	0x20000150
 800ec80:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800ec84:	4bca      	ldr	r3, [pc, #808]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ec86:	681a      	ldr	r2, [r3, #0]
 800ec88:	2380      	movs	r3, #128	@ 0x80
 800ec8a:	009b      	lsls	r3, r3, #2
 800ec8c:	4013      	ands	r3, r2
 800ec8e:	d0df      	beq.n	800ec50 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ec90:	4bc7      	ldr	r3, [pc, #796]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	4ac7      	ldr	r2, [pc, #796]	@ (800efb4 <HAL_RCC_OscConfig+0x68c>)
 800ec96:	4013      	ands	r3, r2
 800ec98:	0019      	movs	r1, r3
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ec9e:	4bc4      	ldr	r3, [pc, #784]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800eca0:	430a      	orrs	r2, r1
 800eca2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800eca4:	4bc2      	ldr	r3, [pc, #776]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800eca6:	685b      	ldr	r3, [r3, #4]
 800eca8:	021b      	lsls	r3, r3, #8
 800ecaa:	0a19      	lsrs	r1, r3, #8
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	6a1b      	ldr	r3, [r3, #32]
 800ecb0:	061a      	lsls	r2, r3, #24
 800ecb2:	4bbf      	ldr	r3, [pc, #764]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ecb4:	430a      	orrs	r2, r1
 800ecb6:	605a      	str	r2, [r3, #4]
 800ecb8:	e019      	b.n	800ecee <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800ecba:	4bbd      	ldr	r3, [pc, #756]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ecbc:	681a      	ldr	r2, [r3, #0]
 800ecbe:	4bbc      	ldr	r3, [pc, #752]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ecc0:	49bd      	ldr	r1, [pc, #756]	@ (800efb8 <HAL_RCC_OscConfig+0x690>)
 800ecc2:	400a      	ands	r2, r1
 800ecc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ecc6:	f7fa facb 	bl	8009260 <HAL_GetTick>
 800ecca:	0003      	movs	r3, r0
 800eccc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800ecce:	e008      	b.n	800ece2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ecd0:	f7fa fac6 	bl	8009260 <HAL_GetTick>
 800ecd4:	0002      	movs	r2, r0
 800ecd6:	697b      	ldr	r3, [r7, #20]
 800ecd8:	1ad3      	subs	r3, r2, r3
 800ecda:	2b02      	cmp	r3, #2
 800ecdc:	d901      	bls.n	800ece2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800ecde:	2303      	movs	r3, #3
 800ece0:	e1eb      	b.n	800f0ba <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800ece2:	4bb3      	ldr	r3, [pc, #716]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	2380      	movs	r3, #128	@ 0x80
 800ece8:	009b      	lsls	r3, r3, #2
 800ecea:	4013      	ands	r3, r2
 800ecec:	d1f0      	bne.n	800ecd0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	2208      	movs	r2, #8
 800ecf4:	4013      	ands	r3, r2
 800ecf6:	d036      	beq.n	800ed66 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	695b      	ldr	r3, [r3, #20]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d019      	beq.n	800ed34 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ed00:	4bab      	ldr	r3, [pc, #684]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ed02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ed04:	4baa      	ldr	r3, [pc, #680]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ed06:	2101      	movs	r1, #1
 800ed08:	430a      	orrs	r2, r1
 800ed0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ed0c:	f7fa faa8 	bl	8009260 <HAL_GetTick>
 800ed10:	0003      	movs	r3, r0
 800ed12:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ed14:	e008      	b.n	800ed28 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ed16:	f7fa faa3 	bl	8009260 <HAL_GetTick>
 800ed1a:	0002      	movs	r2, r0
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	1ad3      	subs	r3, r2, r3
 800ed20:	2b02      	cmp	r3, #2
 800ed22:	d901      	bls.n	800ed28 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800ed24:	2303      	movs	r3, #3
 800ed26:	e1c8      	b.n	800f0ba <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ed28:	4ba1      	ldr	r3, [pc, #644]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ed2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed2c:	2202      	movs	r2, #2
 800ed2e:	4013      	ands	r3, r2
 800ed30:	d0f1      	beq.n	800ed16 <HAL_RCC_OscConfig+0x3ee>
 800ed32:	e018      	b.n	800ed66 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ed34:	4b9e      	ldr	r3, [pc, #632]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ed36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ed38:	4b9d      	ldr	r3, [pc, #628]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ed3a:	2101      	movs	r1, #1
 800ed3c:	438a      	bics	r2, r1
 800ed3e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ed40:	f7fa fa8e 	bl	8009260 <HAL_GetTick>
 800ed44:	0003      	movs	r3, r0
 800ed46:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ed48:	e008      	b.n	800ed5c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ed4a:	f7fa fa89 	bl	8009260 <HAL_GetTick>
 800ed4e:	0002      	movs	r2, r0
 800ed50:	697b      	ldr	r3, [r7, #20]
 800ed52:	1ad3      	subs	r3, r2, r3
 800ed54:	2b02      	cmp	r3, #2
 800ed56:	d901      	bls.n	800ed5c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800ed58:	2303      	movs	r3, #3
 800ed5a:	e1ae      	b.n	800f0ba <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ed5c:	4b94      	ldr	r3, [pc, #592]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ed5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed60:	2202      	movs	r2, #2
 800ed62:	4013      	ands	r3, r2
 800ed64:	d1f1      	bne.n	800ed4a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	2204      	movs	r2, #4
 800ed6c:	4013      	ands	r3, r2
 800ed6e:	d100      	bne.n	800ed72 <HAL_RCC_OscConfig+0x44a>
 800ed70:	e0ae      	b.n	800eed0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ed72:	2023      	movs	r0, #35	@ 0x23
 800ed74:	183b      	adds	r3, r7, r0
 800ed76:	2200      	movs	r2, #0
 800ed78:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ed7a:	4b8d      	ldr	r3, [pc, #564]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ed7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ed7e:	2380      	movs	r3, #128	@ 0x80
 800ed80:	055b      	lsls	r3, r3, #21
 800ed82:	4013      	ands	r3, r2
 800ed84:	d109      	bne.n	800ed9a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ed86:	4b8a      	ldr	r3, [pc, #552]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ed88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ed8a:	4b89      	ldr	r3, [pc, #548]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ed8c:	2180      	movs	r1, #128	@ 0x80
 800ed8e:	0549      	lsls	r1, r1, #21
 800ed90:	430a      	orrs	r2, r1
 800ed92:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800ed94:	183b      	adds	r3, r7, r0
 800ed96:	2201      	movs	r2, #1
 800ed98:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ed9a:	4b88      	ldr	r3, [pc, #544]	@ (800efbc <HAL_RCC_OscConfig+0x694>)
 800ed9c:	681a      	ldr	r2, [r3, #0]
 800ed9e:	2380      	movs	r3, #128	@ 0x80
 800eda0:	005b      	lsls	r3, r3, #1
 800eda2:	4013      	ands	r3, r2
 800eda4:	d11a      	bne.n	800eddc <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800eda6:	4b85      	ldr	r3, [pc, #532]	@ (800efbc <HAL_RCC_OscConfig+0x694>)
 800eda8:	681a      	ldr	r2, [r3, #0]
 800edaa:	4b84      	ldr	r3, [pc, #528]	@ (800efbc <HAL_RCC_OscConfig+0x694>)
 800edac:	2180      	movs	r1, #128	@ 0x80
 800edae:	0049      	lsls	r1, r1, #1
 800edb0:	430a      	orrs	r2, r1
 800edb2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800edb4:	f7fa fa54 	bl	8009260 <HAL_GetTick>
 800edb8:	0003      	movs	r3, r0
 800edba:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800edbc:	e008      	b.n	800edd0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800edbe:	f7fa fa4f 	bl	8009260 <HAL_GetTick>
 800edc2:	0002      	movs	r2, r0
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	1ad3      	subs	r3, r2, r3
 800edc8:	2b64      	cmp	r3, #100	@ 0x64
 800edca:	d901      	bls.n	800edd0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800edcc:	2303      	movs	r3, #3
 800edce:	e174      	b.n	800f0ba <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800edd0:	4b7a      	ldr	r3, [pc, #488]	@ (800efbc <HAL_RCC_OscConfig+0x694>)
 800edd2:	681a      	ldr	r2, [r3, #0]
 800edd4:	2380      	movs	r3, #128	@ 0x80
 800edd6:	005b      	lsls	r3, r3, #1
 800edd8:	4013      	ands	r3, r2
 800edda:	d0f0      	beq.n	800edbe <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	689a      	ldr	r2, [r3, #8]
 800ede0:	2380      	movs	r3, #128	@ 0x80
 800ede2:	005b      	lsls	r3, r3, #1
 800ede4:	429a      	cmp	r2, r3
 800ede6:	d107      	bne.n	800edf8 <HAL_RCC_OscConfig+0x4d0>
 800ede8:	4b71      	ldr	r3, [pc, #452]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800edea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800edec:	4b70      	ldr	r3, [pc, #448]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800edee:	2180      	movs	r1, #128	@ 0x80
 800edf0:	0049      	lsls	r1, r1, #1
 800edf2:	430a      	orrs	r2, r1
 800edf4:	651a      	str	r2, [r3, #80]	@ 0x50
 800edf6:	e031      	b.n	800ee5c <HAL_RCC_OscConfig+0x534>
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	689b      	ldr	r3, [r3, #8]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d10c      	bne.n	800ee1a <HAL_RCC_OscConfig+0x4f2>
 800ee00:	4b6b      	ldr	r3, [pc, #428]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ee02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ee04:	4b6a      	ldr	r3, [pc, #424]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ee06:	496c      	ldr	r1, [pc, #432]	@ (800efb8 <HAL_RCC_OscConfig+0x690>)
 800ee08:	400a      	ands	r2, r1
 800ee0a:	651a      	str	r2, [r3, #80]	@ 0x50
 800ee0c:	4b68      	ldr	r3, [pc, #416]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ee0e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ee10:	4b67      	ldr	r3, [pc, #412]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ee12:	496b      	ldr	r1, [pc, #428]	@ (800efc0 <HAL_RCC_OscConfig+0x698>)
 800ee14:	400a      	ands	r2, r1
 800ee16:	651a      	str	r2, [r3, #80]	@ 0x50
 800ee18:	e020      	b.n	800ee5c <HAL_RCC_OscConfig+0x534>
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	689a      	ldr	r2, [r3, #8]
 800ee1e:	23a0      	movs	r3, #160	@ 0xa0
 800ee20:	00db      	lsls	r3, r3, #3
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d10e      	bne.n	800ee44 <HAL_RCC_OscConfig+0x51c>
 800ee26:	4b62      	ldr	r3, [pc, #392]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ee28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ee2a:	4b61      	ldr	r3, [pc, #388]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ee2c:	2180      	movs	r1, #128	@ 0x80
 800ee2e:	00c9      	lsls	r1, r1, #3
 800ee30:	430a      	orrs	r2, r1
 800ee32:	651a      	str	r2, [r3, #80]	@ 0x50
 800ee34:	4b5e      	ldr	r3, [pc, #376]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ee36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ee38:	4b5d      	ldr	r3, [pc, #372]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ee3a:	2180      	movs	r1, #128	@ 0x80
 800ee3c:	0049      	lsls	r1, r1, #1
 800ee3e:	430a      	orrs	r2, r1
 800ee40:	651a      	str	r2, [r3, #80]	@ 0x50
 800ee42:	e00b      	b.n	800ee5c <HAL_RCC_OscConfig+0x534>
 800ee44:	4b5a      	ldr	r3, [pc, #360]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ee46:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ee48:	4b59      	ldr	r3, [pc, #356]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ee4a:	495b      	ldr	r1, [pc, #364]	@ (800efb8 <HAL_RCC_OscConfig+0x690>)
 800ee4c:	400a      	ands	r2, r1
 800ee4e:	651a      	str	r2, [r3, #80]	@ 0x50
 800ee50:	4b57      	ldr	r3, [pc, #348]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ee52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ee54:	4b56      	ldr	r3, [pc, #344]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ee56:	495a      	ldr	r1, [pc, #360]	@ (800efc0 <HAL_RCC_OscConfig+0x698>)
 800ee58:	400a      	ands	r2, r1
 800ee5a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	689b      	ldr	r3, [r3, #8]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d015      	beq.n	800ee90 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ee64:	f7fa f9fc 	bl	8009260 <HAL_GetTick>
 800ee68:	0003      	movs	r3, r0
 800ee6a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ee6c:	e009      	b.n	800ee82 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ee6e:	f7fa f9f7 	bl	8009260 <HAL_GetTick>
 800ee72:	0002      	movs	r2, r0
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	1ad3      	subs	r3, r2, r3
 800ee78:	4a52      	ldr	r2, [pc, #328]	@ (800efc4 <HAL_RCC_OscConfig+0x69c>)
 800ee7a:	4293      	cmp	r3, r2
 800ee7c:	d901      	bls.n	800ee82 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800ee7e:	2303      	movs	r3, #3
 800ee80:	e11b      	b.n	800f0ba <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ee82:	4b4b      	ldr	r3, [pc, #300]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ee84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ee86:	2380      	movs	r3, #128	@ 0x80
 800ee88:	009b      	lsls	r3, r3, #2
 800ee8a:	4013      	ands	r3, r2
 800ee8c:	d0ef      	beq.n	800ee6e <HAL_RCC_OscConfig+0x546>
 800ee8e:	e014      	b.n	800eeba <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ee90:	f7fa f9e6 	bl	8009260 <HAL_GetTick>
 800ee94:	0003      	movs	r3, r0
 800ee96:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ee98:	e009      	b.n	800eeae <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ee9a:	f7fa f9e1 	bl	8009260 <HAL_GetTick>
 800ee9e:	0002      	movs	r2, r0
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	1ad3      	subs	r3, r2, r3
 800eea4:	4a47      	ldr	r2, [pc, #284]	@ (800efc4 <HAL_RCC_OscConfig+0x69c>)
 800eea6:	4293      	cmp	r3, r2
 800eea8:	d901      	bls.n	800eeae <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800eeaa:	2303      	movs	r3, #3
 800eeac:	e105      	b.n	800f0ba <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800eeae:	4b40      	ldr	r3, [pc, #256]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800eeb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eeb2:	2380      	movs	r3, #128	@ 0x80
 800eeb4:	009b      	lsls	r3, r3, #2
 800eeb6:	4013      	ands	r3, r2
 800eeb8:	d1ef      	bne.n	800ee9a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800eeba:	2323      	movs	r3, #35	@ 0x23
 800eebc:	18fb      	adds	r3, r7, r3
 800eebe:	781b      	ldrb	r3, [r3, #0]
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	d105      	bne.n	800eed0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800eec4:	4b3a      	ldr	r3, [pc, #232]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800eec6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eec8:	4b39      	ldr	r3, [pc, #228]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800eeca:	493f      	ldr	r1, [pc, #252]	@ (800efc8 <HAL_RCC_OscConfig+0x6a0>)
 800eecc:	400a      	ands	r2, r1
 800eece:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	2220      	movs	r2, #32
 800eed6:	4013      	ands	r3, r2
 800eed8:	d049      	beq.n	800ef6e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	699b      	ldr	r3, [r3, #24]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d026      	beq.n	800ef30 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800eee2:	4b33      	ldr	r3, [pc, #204]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800eee4:	689a      	ldr	r2, [r3, #8]
 800eee6:	4b32      	ldr	r3, [pc, #200]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800eee8:	2101      	movs	r1, #1
 800eeea:	430a      	orrs	r2, r1
 800eeec:	609a      	str	r2, [r3, #8]
 800eeee:	4b30      	ldr	r3, [pc, #192]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800eef0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800eef2:	4b2f      	ldr	r3, [pc, #188]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800eef4:	2101      	movs	r1, #1
 800eef6:	430a      	orrs	r2, r1
 800eef8:	635a      	str	r2, [r3, #52]	@ 0x34
 800eefa:	4b34      	ldr	r3, [pc, #208]	@ (800efcc <HAL_RCC_OscConfig+0x6a4>)
 800eefc:	6a1a      	ldr	r2, [r3, #32]
 800eefe:	4b33      	ldr	r3, [pc, #204]	@ (800efcc <HAL_RCC_OscConfig+0x6a4>)
 800ef00:	2180      	movs	r1, #128	@ 0x80
 800ef02:	0189      	lsls	r1, r1, #6
 800ef04:	430a      	orrs	r2, r1
 800ef06:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ef08:	f7fa f9aa 	bl	8009260 <HAL_GetTick>
 800ef0c:	0003      	movs	r3, r0
 800ef0e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ef10:	e008      	b.n	800ef24 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ef12:	f7fa f9a5 	bl	8009260 <HAL_GetTick>
 800ef16:	0002      	movs	r2, r0
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	1ad3      	subs	r3, r2, r3
 800ef1c:	2b02      	cmp	r3, #2
 800ef1e:	d901      	bls.n	800ef24 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800ef20:	2303      	movs	r3, #3
 800ef22:	e0ca      	b.n	800f0ba <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ef24:	4b22      	ldr	r3, [pc, #136]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ef26:	689b      	ldr	r3, [r3, #8]
 800ef28:	2202      	movs	r2, #2
 800ef2a:	4013      	ands	r3, r2
 800ef2c:	d0f1      	beq.n	800ef12 <HAL_RCC_OscConfig+0x5ea>
 800ef2e:	e01e      	b.n	800ef6e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800ef30:	4b1f      	ldr	r3, [pc, #124]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ef32:	689a      	ldr	r2, [r3, #8]
 800ef34:	4b1e      	ldr	r3, [pc, #120]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ef36:	2101      	movs	r1, #1
 800ef38:	438a      	bics	r2, r1
 800ef3a:	609a      	str	r2, [r3, #8]
 800ef3c:	4b23      	ldr	r3, [pc, #140]	@ (800efcc <HAL_RCC_OscConfig+0x6a4>)
 800ef3e:	6a1a      	ldr	r2, [r3, #32]
 800ef40:	4b22      	ldr	r3, [pc, #136]	@ (800efcc <HAL_RCC_OscConfig+0x6a4>)
 800ef42:	4923      	ldr	r1, [pc, #140]	@ (800efd0 <HAL_RCC_OscConfig+0x6a8>)
 800ef44:	400a      	ands	r2, r1
 800ef46:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ef48:	f7fa f98a 	bl	8009260 <HAL_GetTick>
 800ef4c:	0003      	movs	r3, r0
 800ef4e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ef50:	e008      	b.n	800ef64 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ef52:	f7fa f985 	bl	8009260 <HAL_GetTick>
 800ef56:	0002      	movs	r2, r0
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	1ad3      	subs	r3, r2, r3
 800ef5c:	2b02      	cmp	r3, #2
 800ef5e:	d901      	bls.n	800ef64 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800ef60:	2303      	movs	r3, #3
 800ef62:	e0aa      	b.n	800f0ba <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ef64:	4b12      	ldr	r3, [pc, #72]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ef66:	689b      	ldr	r3, [r3, #8]
 800ef68:	2202      	movs	r2, #2
 800ef6a:	4013      	ands	r3, r2
 800ef6c:	d1f1      	bne.n	800ef52 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d100      	bne.n	800ef78 <HAL_RCC_OscConfig+0x650>
 800ef76:	e09f      	b.n	800f0b8 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ef78:	69fb      	ldr	r3, [r7, #28]
 800ef7a:	2b0c      	cmp	r3, #12
 800ef7c:	d100      	bne.n	800ef80 <HAL_RCC_OscConfig+0x658>
 800ef7e:	e078      	b.n	800f072 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef84:	2b02      	cmp	r3, #2
 800ef86:	d159      	bne.n	800f03c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ef88:	4b09      	ldr	r3, [pc, #36]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ef8a:	681a      	ldr	r2, [r3, #0]
 800ef8c:	4b08      	ldr	r3, [pc, #32]	@ (800efb0 <HAL_RCC_OscConfig+0x688>)
 800ef8e:	4911      	ldr	r1, [pc, #68]	@ (800efd4 <HAL_RCC_OscConfig+0x6ac>)
 800ef90:	400a      	ands	r2, r1
 800ef92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ef94:	f7fa f964 	bl	8009260 <HAL_GetTick>
 800ef98:	0003      	movs	r3, r0
 800ef9a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ef9c:	e01c      	b.n	800efd8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ef9e:	f7fa f95f 	bl	8009260 <HAL_GetTick>
 800efa2:	0002      	movs	r2, r0
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	1ad3      	subs	r3, r2, r3
 800efa8:	2b02      	cmp	r3, #2
 800efaa:	d915      	bls.n	800efd8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800efac:	2303      	movs	r3, #3
 800efae:	e084      	b.n	800f0ba <HAL_RCC_OscConfig+0x792>
 800efb0:	40021000 	.word	0x40021000
 800efb4:	ffff1fff 	.word	0xffff1fff
 800efb8:	fffffeff 	.word	0xfffffeff
 800efbc:	40007000 	.word	0x40007000
 800efc0:	fffffbff 	.word	0xfffffbff
 800efc4:	00001388 	.word	0x00001388
 800efc8:	efffffff 	.word	0xefffffff
 800efcc:	40010000 	.word	0x40010000
 800efd0:	ffffdfff 	.word	0xffffdfff
 800efd4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800efd8:	4b3a      	ldr	r3, [pc, #232]	@ (800f0c4 <HAL_RCC_OscConfig+0x79c>)
 800efda:	681a      	ldr	r2, [r3, #0]
 800efdc:	2380      	movs	r3, #128	@ 0x80
 800efde:	049b      	lsls	r3, r3, #18
 800efe0:	4013      	ands	r3, r2
 800efe2:	d1dc      	bne.n	800ef9e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800efe4:	4b37      	ldr	r3, [pc, #220]	@ (800f0c4 <HAL_RCC_OscConfig+0x79c>)
 800efe6:	68db      	ldr	r3, [r3, #12]
 800efe8:	4a37      	ldr	r2, [pc, #220]	@ (800f0c8 <HAL_RCC_OscConfig+0x7a0>)
 800efea:	4013      	ands	r3, r2
 800efec:	0019      	movs	r1, r3
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eff6:	431a      	orrs	r2, r3
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800effc:	431a      	orrs	r2, r3
 800effe:	4b31      	ldr	r3, [pc, #196]	@ (800f0c4 <HAL_RCC_OscConfig+0x79c>)
 800f000:	430a      	orrs	r2, r1
 800f002:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f004:	4b2f      	ldr	r3, [pc, #188]	@ (800f0c4 <HAL_RCC_OscConfig+0x79c>)
 800f006:	681a      	ldr	r2, [r3, #0]
 800f008:	4b2e      	ldr	r3, [pc, #184]	@ (800f0c4 <HAL_RCC_OscConfig+0x79c>)
 800f00a:	2180      	movs	r1, #128	@ 0x80
 800f00c:	0449      	lsls	r1, r1, #17
 800f00e:	430a      	orrs	r2, r1
 800f010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f012:	f7fa f925 	bl	8009260 <HAL_GetTick>
 800f016:	0003      	movs	r3, r0
 800f018:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800f01a:	e008      	b.n	800f02e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f01c:	f7fa f920 	bl	8009260 <HAL_GetTick>
 800f020:	0002      	movs	r2, r0
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	1ad3      	subs	r3, r2, r3
 800f026:	2b02      	cmp	r3, #2
 800f028:	d901      	bls.n	800f02e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800f02a:	2303      	movs	r3, #3
 800f02c:	e045      	b.n	800f0ba <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800f02e:	4b25      	ldr	r3, [pc, #148]	@ (800f0c4 <HAL_RCC_OscConfig+0x79c>)
 800f030:	681a      	ldr	r2, [r3, #0]
 800f032:	2380      	movs	r3, #128	@ 0x80
 800f034:	049b      	lsls	r3, r3, #18
 800f036:	4013      	ands	r3, r2
 800f038:	d0f0      	beq.n	800f01c <HAL_RCC_OscConfig+0x6f4>
 800f03a:	e03d      	b.n	800f0b8 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f03c:	4b21      	ldr	r3, [pc, #132]	@ (800f0c4 <HAL_RCC_OscConfig+0x79c>)
 800f03e:	681a      	ldr	r2, [r3, #0]
 800f040:	4b20      	ldr	r3, [pc, #128]	@ (800f0c4 <HAL_RCC_OscConfig+0x79c>)
 800f042:	4922      	ldr	r1, [pc, #136]	@ (800f0cc <HAL_RCC_OscConfig+0x7a4>)
 800f044:	400a      	ands	r2, r1
 800f046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f048:	f7fa f90a 	bl	8009260 <HAL_GetTick>
 800f04c:	0003      	movs	r3, r0
 800f04e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800f050:	e008      	b.n	800f064 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f052:	f7fa f905 	bl	8009260 <HAL_GetTick>
 800f056:	0002      	movs	r2, r0
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	1ad3      	subs	r3, r2, r3
 800f05c:	2b02      	cmp	r3, #2
 800f05e:	d901      	bls.n	800f064 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800f060:	2303      	movs	r3, #3
 800f062:	e02a      	b.n	800f0ba <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800f064:	4b17      	ldr	r3, [pc, #92]	@ (800f0c4 <HAL_RCC_OscConfig+0x79c>)
 800f066:	681a      	ldr	r2, [r3, #0]
 800f068:	2380      	movs	r3, #128	@ 0x80
 800f06a:	049b      	lsls	r3, r3, #18
 800f06c:	4013      	ands	r3, r2
 800f06e:	d1f0      	bne.n	800f052 <HAL_RCC_OscConfig+0x72a>
 800f070:	e022      	b.n	800f0b8 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f076:	2b01      	cmp	r3, #1
 800f078:	d101      	bne.n	800f07e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800f07a:	2301      	movs	r3, #1
 800f07c:	e01d      	b.n	800f0ba <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800f07e:	4b11      	ldr	r3, [pc, #68]	@ (800f0c4 <HAL_RCC_OscConfig+0x79c>)
 800f080:	68db      	ldr	r3, [r3, #12]
 800f082:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f084:	69ba      	ldr	r2, [r7, #24]
 800f086:	2380      	movs	r3, #128	@ 0x80
 800f088:	025b      	lsls	r3, r3, #9
 800f08a:	401a      	ands	r2, r3
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f090:	429a      	cmp	r2, r3
 800f092:	d10f      	bne.n	800f0b4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800f094:	69ba      	ldr	r2, [r7, #24]
 800f096:	23f0      	movs	r3, #240	@ 0xf0
 800f098:	039b      	lsls	r3, r3, #14
 800f09a:	401a      	ands	r2, r3
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f0a0:	429a      	cmp	r2, r3
 800f0a2:	d107      	bne.n	800f0b4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800f0a4:	69ba      	ldr	r2, [r7, #24]
 800f0a6:	23c0      	movs	r3, #192	@ 0xc0
 800f0a8:	041b      	lsls	r3, r3, #16
 800f0aa:	401a      	ands	r2, r3
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800f0b0:	429a      	cmp	r2, r3
 800f0b2:	d001      	beq.n	800f0b8 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	e000      	b.n	800f0ba <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800f0b8:	2300      	movs	r3, #0
}
 800f0ba:	0018      	movs	r0, r3
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	b00a      	add	sp, #40	@ 0x28
 800f0c0:	bdb0      	pop	{r4, r5, r7, pc}
 800f0c2:	46c0      	nop			@ (mov r8, r8)
 800f0c4:	40021000 	.word	0x40021000
 800f0c8:	ff02ffff 	.word	0xff02ffff
 800f0cc:	feffffff 	.word	0xfeffffff

0800f0d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f0d0:	b5b0      	push	{r4, r5, r7, lr}
 800f0d2:	b084      	sub	sp, #16
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
 800f0d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d101      	bne.n	800f0e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	e128      	b.n	800f336 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f0e4:	4b96      	ldr	r3, [pc, #600]	@ (800f340 <HAL_RCC_ClockConfig+0x270>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	2201      	movs	r2, #1
 800f0ea:	4013      	ands	r3, r2
 800f0ec:	683a      	ldr	r2, [r7, #0]
 800f0ee:	429a      	cmp	r2, r3
 800f0f0:	d91e      	bls.n	800f130 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f0f2:	4b93      	ldr	r3, [pc, #588]	@ (800f340 <HAL_RCC_ClockConfig+0x270>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	2201      	movs	r2, #1
 800f0f8:	4393      	bics	r3, r2
 800f0fa:	0019      	movs	r1, r3
 800f0fc:	4b90      	ldr	r3, [pc, #576]	@ (800f340 <HAL_RCC_ClockConfig+0x270>)
 800f0fe:	683a      	ldr	r2, [r7, #0]
 800f100:	430a      	orrs	r2, r1
 800f102:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800f104:	f7fa f8ac 	bl	8009260 <HAL_GetTick>
 800f108:	0003      	movs	r3, r0
 800f10a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f10c:	e009      	b.n	800f122 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f10e:	f7fa f8a7 	bl	8009260 <HAL_GetTick>
 800f112:	0002      	movs	r2, r0
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	1ad3      	subs	r3, r2, r3
 800f118:	4a8a      	ldr	r2, [pc, #552]	@ (800f344 <HAL_RCC_ClockConfig+0x274>)
 800f11a:	4293      	cmp	r3, r2
 800f11c:	d901      	bls.n	800f122 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800f11e:	2303      	movs	r3, #3
 800f120:	e109      	b.n	800f336 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f122:	4b87      	ldr	r3, [pc, #540]	@ (800f340 <HAL_RCC_ClockConfig+0x270>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	2201      	movs	r2, #1
 800f128:	4013      	ands	r3, r2
 800f12a:	683a      	ldr	r2, [r7, #0]
 800f12c:	429a      	cmp	r2, r3
 800f12e:	d1ee      	bne.n	800f10e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	2202      	movs	r2, #2
 800f136:	4013      	ands	r3, r2
 800f138:	d009      	beq.n	800f14e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f13a:	4b83      	ldr	r3, [pc, #524]	@ (800f348 <HAL_RCC_ClockConfig+0x278>)
 800f13c:	68db      	ldr	r3, [r3, #12]
 800f13e:	22f0      	movs	r2, #240	@ 0xf0
 800f140:	4393      	bics	r3, r2
 800f142:	0019      	movs	r1, r3
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	689a      	ldr	r2, [r3, #8]
 800f148:	4b7f      	ldr	r3, [pc, #508]	@ (800f348 <HAL_RCC_ClockConfig+0x278>)
 800f14a:	430a      	orrs	r2, r1
 800f14c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	2201      	movs	r2, #1
 800f154:	4013      	ands	r3, r2
 800f156:	d100      	bne.n	800f15a <HAL_RCC_ClockConfig+0x8a>
 800f158:	e089      	b.n	800f26e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	685b      	ldr	r3, [r3, #4]
 800f15e:	2b02      	cmp	r3, #2
 800f160:	d107      	bne.n	800f172 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f162:	4b79      	ldr	r3, [pc, #484]	@ (800f348 <HAL_RCC_ClockConfig+0x278>)
 800f164:	681a      	ldr	r2, [r3, #0]
 800f166:	2380      	movs	r3, #128	@ 0x80
 800f168:	029b      	lsls	r3, r3, #10
 800f16a:	4013      	ands	r3, r2
 800f16c:	d120      	bne.n	800f1b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800f16e:	2301      	movs	r3, #1
 800f170:	e0e1      	b.n	800f336 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	685b      	ldr	r3, [r3, #4]
 800f176:	2b03      	cmp	r3, #3
 800f178:	d107      	bne.n	800f18a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f17a:	4b73      	ldr	r3, [pc, #460]	@ (800f348 <HAL_RCC_ClockConfig+0x278>)
 800f17c:	681a      	ldr	r2, [r3, #0]
 800f17e:	2380      	movs	r3, #128	@ 0x80
 800f180:	049b      	lsls	r3, r3, #18
 800f182:	4013      	ands	r3, r2
 800f184:	d114      	bne.n	800f1b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800f186:	2301      	movs	r3, #1
 800f188:	e0d5      	b.n	800f336 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	685b      	ldr	r3, [r3, #4]
 800f18e:	2b01      	cmp	r3, #1
 800f190:	d106      	bne.n	800f1a0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f192:	4b6d      	ldr	r3, [pc, #436]	@ (800f348 <HAL_RCC_ClockConfig+0x278>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	2204      	movs	r2, #4
 800f198:	4013      	ands	r3, r2
 800f19a:	d109      	bne.n	800f1b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800f19c:	2301      	movs	r3, #1
 800f19e:	e0ca      	b.n	800f336 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800f1a0:	4b69      	ldr	r3, [pc, #420]	@ (800f348 <HAL_RCC_ClockConfig+0x278>)
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	2380      	movs	r3, #128	@ 0x80
 800f1a6:	009b      	lsls	r3, r3, #2
 800f1a8:	4013      	ands	r3, r2
 800f1aa:	d101      	bne.n	800f1b0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	e0c2      	b.n	800f336 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f1b0:	4b65      	ldr	r3, [pc, #404]	@ (800f348 <HAL_RCC_ClockConfig+0x278>)
 800f1b2:	68db      	ldr	r3, [r3, #12]
 800f1b4:	2203      	movs	r2, #3
 800f1b6:	4393      	bics	r3, r2
 800f1b8:	0019      	movs	r1, r3
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	685a      	ldr	r2, [r3, #4]
 800f1be:	4b62      	ldr	r3, [pc, #392]	@ (800f348 <HAL_RCC_ClockConfig+0x278>)
 800f1c0:	430a      	orrs	r2, r1
 800f1c2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f1c4:	f7fa f84c 	bl	8009260 <HAL_GetTick>
 800f1c8:	0003      	movs	r3, r0
 800f1ca:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	685b      	ldr	r3, [r3, #4]
 800f1d0:	2b02      	cmp	r3, #2
 800f1d2:	d111      	bne.n	800f1f8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800f1d4:	e009      	b.n	800f1ea <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f1d6:	f7fa f843 	bl	8009260 <HAL_GetTick>
 800f1da:	0002      	movs	r2, r0
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	1ad3      	subs	r3, r2, r3
 800f1e0:	4a58      	ldr	r2, [pc, #352]	@ (800f344 <HAL_RCC_ClockConfig+0x274>)
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	d901      	bls.n	800f1ea <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800f1e6:	2303      	movs	r3, #3
 800f1e8:	e0a5      	b.n	800f336 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800f1ea:	4b57      	ldr	r3, [pc, #348]	@ (800f348 <HAL_RCC_ClockConfig+0x278>)
 800f1ec:	68db      	ldr	r3, [r3, #12]
 800f1ee:	220c      	movs	r2, #12
 800f1f0:	4013      	ands	r3, r2
 800f1f2:	2b08      	cmp	r3, #8
 800f1f4:	d1ef      	bne.n	800f1d6 <HAL_RCC_ClockConfig+0x106>
 800f1f6:	e03a      	b.n	800f26e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	685b      	ldr	r3, [r3, #4]
 800f1fc:	2b03      	cmp	r3, #3
 800f1fe:	d111      	bne.n	800f224 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f200:	e009      	b.n	800f216 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f202:	f7fa f82d 	bl	8009260 <HAL_GetTick>
 800f206:	0002      	movs	r2, r0
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	1ad3      	subs	r3, r2, r3
 800f20c:	4a4d      	ldr	r2, [pc, #308]	@ (800f344 <HAL_RCC_ClockConfig+0x274>)
 800f20e:	4293      	cmp	r3, r2
 800f210:	d901      	bls.n	800f216 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800f212:	2303      	movs	r3, #3
 800f214:	e08f      	b.n	800f336 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f216:	4b4c      	ldr	r3, [pc, #304]	@ (800f348 <HAL_RCC_ClockConfig+0x278>)
 800f218:	68db      	ldr	r3, [r3, #12]
 800f21a:	220c      	movs	r2, #12
 800f21c:	4013      	ands	r3, r2
 800f21e:	2b0c      	cmp	r3, #12
 800f220:	d1ef      	bne.n	800f202 <HAL_RCC_ClockConfig+0x132>
 800f222:	e024      	b.n	800f26e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	685b      	ldr	r3, [r3, #4]
 800f228:	2b01      	cmp	r3, #1
 800f22a:	d11b      	bne.n	800f264 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800f22c:	e009      	b.n	800f242 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f22e:	f7fa f817 	bl	8009260 <HAL_GetTick>
 800f232:	0002      	movs	r2, r0
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	1ad3      	subs	r3, r2, r3
 800f238:	4a42      	ldr	r2, [pc, #264]	@ (800f344 <HAL_RCC_ClockConfig+0x274>)
 800f23a:	4293      	cmp	r3, r2
 800f23c:	d901      	bls.n	800f242 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800f23e:	2303      	movs	r3, #3
 800f240:	e079      	b.n	800f336 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800f242:	4b41      	ldr	r3, [pc, #260]	@ (800f348 <HAL_RCC_ClockConfig+0x278>)
 800f244:	68db      	ldr	r3, [r3, #12]
 800f246:	220c      	movs	r2, #12
 800f248:	4013      	ands	r3, r2
 800f24a:	2b04      	cmp	r3, #4
 800f24c:	d1ef      	bne.n	800f22e <HAL_RCC_ClockConfig+0x15e>
 800f24e:	e00e      	b.n	800f26e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f250:	f7fa f806 	bl	8009260 <HAL_GetTick>
 800f254:	0002      	movs	r2, r0
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	1ad3      	subs	r3, r2, r3
 800f25a:	4a3a      	ldr	r2, [pc, #232]	@ (800f344 <HAL_RCC_ClockConfig+0x274>)
 800f25c:	4293      	cmp	r3, r2
 800f25e:	d901      	bls.n	800f264 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800f260:	2303      	movs	r3, #3
 800f262:	e068      	b.n	800f336 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800f264:	4b38      	ldr	r3, [pc, #224]	@ (800f348 <HAL_RCC_ClockConfig+0x278>)
 800f266:	68db      	ldr	r3, [r3, #12]
 800f268:	220c      	movs	r2, #12
 800f26a:	4013      	ands	r3, r2
 800f26c:	d1f0      	bne.n	800f250 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f26e:	4b34      	ldr	r3, [pc, #208]	@ (800f340 <HAL_RCC_ClockConfig+0x270>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	2201      	movs	r2, #1
 800f274:	4013      	ands	r3, r2
 800f276:	683a      	ldr	r2, [r7, #0]
 800f278:	429a      	cmp	r2, r3
 800f27a:	d21e      	bcs.n	800f2ba <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f27c:	4b30      	ldr	r3, [pc, #192]	@ (800f340 <HAL_RCC_ClockConfig+0x270>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	2201      	movs	r2, #1
 800f282:	4393      	bics	r3, r2
 800f284:	0019      	movs	r1, r3
 800f286:	4b2e      	ldr	r3, [pc, #184]	@ (800f340 <HAL_RCC_ClockConfig+0x270>)
 800f288:	683a      	ldr	r2, [r7, #0]
 800f28a:	430a      	orrs	r2, r1
 800f28c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800f28e:	f7f9 ffe7 	bl	8009260 <HAL_GetTick>
 800f292:	0003      	movs	r3, r0
 800f294:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f296:	e009      	b.n	800f2ac <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f298:	f7f9 ffe2 	bl	8009260 <HAL_GetTick>
 800f29c:	0002      	movs	r2, r0
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	1ad3      	subs	r3, r2, r3
 800f2a2:	4a28      	ldr	r2, [pc, #160]	@ (800f344 <HAL_RCC_ClockConfig+0x274>)
 800f2a4:	4293      	cmp	r3, r2
 800f2a6:	d901      	bls.n	800f2ac <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800f2a8:	2303      	movs	r3, #3
 800f2aa:	e044      	b.n	800f336 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f2ac:	4b24      	ldr	r3, [pc, #144]	@ (800f340 <HAL_RCC_ClockConfig+0x270>)
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	2201      	movs	r2, #1
 800f2b2:	4013      	ands	r3, r2
 800f2b4:	683a      	ldr	r2, [r7, #0]
 800f2b6:	429a      	cmp	r2, r3
 800f2b8:	d1ee      	bne.n	800f298 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	2204      	movs	r2, #4
 800f2c0:	4013      	ands	r3, r2
 800f2c2:	d009      	beq.n	800f2d8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f2c4:	4b20      	ldr	r3, [pc, #128]	@ (800f348 <HAL_RCC_ClockConfig+0x278>)
 800f2c6:	68db      	ldr	r3, [r3, #12]
 800f2c8:	4a20      	ldr	r2, [pc, #128]	@ (800f34c <HAL_RCC_ClockConfig+0x27c>)
 800f2ca:	4013      	ands	r3, r2
 800f2cc:	0019      	movs	r1, r3
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	68da      	ldr	r2, [r3, #12]
 800f2d2:	4b1d      	ldr	r3, [pc, #116]	@ (800f348 <HAL_RCC_ClockConfig+0x278>)
 800f2d4:	430a      	orrs	r2, r1
 800f2d6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	2208      	movs	r2, #8
 800f2de:	4013      	ands	r3, r2
 800f2e0:	d00a      	beq.n	800f2f8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800f2e2:	4b19      	ldr	r3, [pc, #100]	@ (800f348 <HAL_RCC_ClockConfig+0x278>)
 800f2e4:	68db      	ldr	r3, [r3, #12]
 800f2e6:	4a1a      	ldr	r2, [pc, #104]	@ (800f350 <HAL_RCC_ClockConfig+0x280>)
 800f2e8:	4013      	ands	r3, r2
 800f2ea:	0019      	movs	r1, r3
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	691b      	ldr	r3, [r3, #16]
 800f2f0:	00da      	lsls	r2, r3, #3
 800f2f2:	4b15      	ldr	r3, [pc, #84]	@ (800f348 <HAL_RCC_ClockConfig+0x278>)
 800f2f4:	430a      	orrs	r2, r1
 800f2f6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f2f8:	f000 f832 	bl	800f360 <HAL_RCC_GetSysClockFreq>
 800f2fc:	0001      	movs	r1, r0
 800f2fe:	4b12      	ldr	r3, [pc, #72]	@ (800f348 <HAL_RCC_ClockConfig+0x278>)
 800f300:	68db      	ldr	r3, [r3, #12]
 800f302:	091b      	lsrs	r3, r3, #4
 800f304:	220f      	movs	r2, #15
 800f306:	4013      	ands	r3, r2
 800f308:	4a12      	ldr	r2, [pc, #72]	@ (800f354 <HAL_RCC_ClockConfig+0x284>)
 800f30a:	5cd3      	ldrb	r3, [r2, r3]
 800f30c:	000a      	movs	r2, r1
 800f30e:	40da      	lsrs	r2, r3
 800f310:	4b11      	ldr	r3, [pc, #68]	@ (800f358 <HAL_RCC_ClockConfig+0x288>)
 800f312:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800f314:	4b11      	ldr	r3, [pc, #68]	@ (800f35c <HAL_RCC_ClockConfig+0x28c>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	250b      	movs	r5, #11
 800f31a:	197c      	adds	r4, r7, r5
 800f31c:	0018      	movs	r0, r3
 800f31e:	f7f9 ff59 	bl	80091d4 <HAL_InitTick>
 800f322:	0003      	movs	r3, r0
 800f324:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800f326:	197b      	adds	r3, r7, r5
 800f328:	781b      	ldrb	r3, [r3, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d002      	beq.n	800f334 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800f32e:	197b      	adds	r3, r7, r5
 800f330:	781b      	ldrb	r3, [r3, #0]
 800f332:	e000      	b.n	800f336 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800f334:	2300      	movs	r3, #0
}
 800f336:	0018      	movs	r0, r3
 800f338:	46bd      	mov	sp, r7
 800f33a:	b004      	add	sp, #16
 800f33c:	bdb0      	pop	{r4, r5, r7, pc}
 800f33e:	46c0      	nop			@ (mov r8, r8)
 800f340:	40022000 	.word	0x40022000
 800f344:	00001388 	.word	0x00001388
 800f348:	40021000 	.word	0x40021000
 800f34c:	fffff8ff 	.word	0xfffff8ff
 800f350:	ffffc7ff 	.word	0xffffc7ff
 800f354:	0801a334 	.word	0x0801a334
 800f358:	2000013c 	.word	0x2000013c
 800f35c:	20000150 	.word	0x20000150

0800f360 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f360:	b5b0      	push	{r4, r5, r7, lr}
 800f362:	b08e      	sub	sp, #56	@ 0x38
 800f364:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800f366:	4b4c      	ldr	r3, [pc, #304]	@ (800f498 <HAL_RCC_GetSysClockFreq+0x138>)
 800f368:	68db      	ldr	r3, [r3, #12]
 800f36a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800f36c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f36e:	230c      	movs	r3, #12
 800f370:	4013      	ands	r3, r2
 800f372:	2b0c      	cmp	r3, #12
 800f374:	d014      	beq.n	800f3a0 <HAL_RCC_GetSysClockFreq+0x40>
 800f376:	d900      	bls.n	800f37a <HAL_RCC_GetSysClockFreq+0x1a>
 800f378:	e07b      	b.n	800f472 <HAL_RCC_GetSysClockFreq+0x112>
 800f37a:	2b04      	cmp	r3, #4
 800f37c:	d002      	beq.n	800f384 <HAL_RCC_GetSysClockFreq+0x24>
 800f37e:	2b08      	cmp	r3, #8
 800f380:	d00b      	beq.n	800f39a <HAL_RCC_GetSysClockFreq+0x3a>
 800f382:	e076      	b.n	800f472 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800f384:	4b44      	ldr	r3, [pc, #272]	@ (800f498 <HAL_RCC_GetSysClockFreq+0x138>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	2210      	movs	r2, #16
 800f38a:	4013      	ands	r3, r2
 800f38c:	d002      	beq.n	800f394 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800f38e:	4b43      	ldr	r3, [pc, #268]	@ (800f49c <HAL_RCC_GetSysClockFreq+0x13c>)
 800f390:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800f392:	e07c      	b.n	800f48e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800f394:	4b42      	ldr	r3, [pc, #264]	@ (800f4a0 <HAL_RCC_GetSysClockFreq+0x140>)
 800f396:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f398:	e079      	b.n	800f48e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800f39a:	4b42      	ldr	r3, [pc, #264]	@ (800f4a4 <HAL_RCC_GetSysClockFreq+0x144>)
 800f39c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f39e:	e076      	b.n	800f48e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800f3a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3a2:	0c9a      	lsrs	r2, r3, #18
 800f3a4:	230f      	movs	r3, #15
 800f3a6:	401a      	ands	r2, r3
 800f3a8:	4b3f      	ldr	r3, [pc, #252]	@ (800f4a8 <HAL_RCC_GetSysClockFreq+0x148>)
 800f3aa:	5c9b      	ldrb	r3, [r3, r2]
 800f3ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800f3ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3b0:	0d9a      	lsrs	r2, r3, #22
 800f3b2:	2303      	movs	r3, #3
 800f3b4:	4013      	ands	r3, r2
 800f3b6:	3301      	adds	r3, #1
 800f3b8:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f3ba:	4b37      	ldr	r3, [pc, #220]	@ (800f498 <HAL_RCC_GetSysClockFreq+0x138>)
 800f3bc:	68da      	ldr	r2, [r3, #12]
 800f3be:	2380      	movs	r3, #128	@ 0x80
 800f3c0:	025b      	lsls	r3, r3, #9
 800f3c2:	4013      	ands	r3, r2
 800f3c4:	d01a      	beq.n	800f3fc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800f3c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3c8:	61bb      	str	r3, [r7, #24]
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	61fb      	str	r3, [r7, #28]
 800f3ce:	4a35      	ldr	r2, [pc, #212]	@ (800f4a4 <HAL_RCC_GetSysClockFreq+0x144>)
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	69b8      	ldr	r0, [r7, #24]
 800f3d4:	69f9      	ldr	r1, [r7, #28]
 800f3d6:	f7f1 f8c1 	bl	800055c <__aeabi_lmul>
 800f3da:	0002      	movs	r2, r0
 800f3dc:	000b      	movs	r3, r1
 800f3de:	0010      	movs	r0, r2
 800f3e0:	0019      	movs	r1, r3
 800f3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3e4:	613b      	str	r3, [r7, #16]
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	617b      	str	r3, [r7, #20]
 800f3ea:	693a      	ldr	r2, [r7, #16]
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	f7f1 f895 	bl	800051c <__aeabi_uldivmod>
 800f3f2:	0002      	movs	r2, r0
 800f3f4:	000b      	movs	r3, r1
 800f3f6:	0013      	movs	r3, r2
 800f3f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800f3fa:	e037      	b.n	800f46c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800f3fc:	4b26      	ldr	r3, [pc, #152]	@ (800f498 <HAL_RCC_GetSysClockFreq+0x138>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	2210      	movs	r2, #16
 800f402:	4013      	ands	r3, r2
 800f404:	d01a      	beq.n	800f43c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800f406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f408:	60bb      	str	r3, [r7, #8]
 800f40a:	2300      	movs	r3, #0
 800f40c:	60fb      	str	r3, [r7, #12]
 800f40e:	4a23      	ldr	r2, [pc, #140]	@ (800f49c <HAL_RCC_GetSysClockFreq+0x13c>)
 800f410:	2300      	movs	r3, #0
 800f412:	68b8      	ldr	r0, [r7, #8]
 800f414:	68f9      	ldr	r1, [r7, #12]
 800f416:	f7f1 f8a1 	bl	800055c <__aeabi_lmul>
 800f41a:	0002      	movs	r2, r0
 800f41c:	000b      	movs	r3, r1
 800f41e:	0010      	movs	r0, r2
 800f420:	0019      	movs	r1, r3
 800f422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f424:	603b      	str	r3, [r7, #0]
 800f426:	2300      	movs	r3, #0
 800f428:	607b      	str	r3, [r7, #4]
 800f42a:	683a      	ldr	r2, [r7, #0]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f7f1 f875 	bl	800051c <__aeabi_uldivmod>
 800f432:	0002      	movs	r2, r0
 800f434:	000b      	movs	r3, r1
 800f436:	0013      	movs	r3, r2
 800f438:	637b      	str	r3, [r7, #52]	@ 0x34
 800f43a:	e017      	b.n	800f46c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800f43c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f43e:	0018      	movs	r0, r3
 800f440:	2300      	movs	r3, #0
 800f442:	0019      	movs	r1, r3
 800f444:	4a16      	ldr	r2, [pc, #88]	@ (800f4a0 <HAL_RCC_GetSysClockFreq+0x140>)
 800f446:	2300      	movs	r3, #0
 800f448:	f7f1 f888 	bl	800055c <__aeabi_lmul>
 800f44c:	0002      	movs	r2, r0
 800f44e:	000b      	movs	r3, r1
 800f450:	0010      	movs	r0, r2
 800f452:	0019      	movs	r1, r3
 800f454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f456:	001c      	movs	r4, r3
 800f458:	2300      	movs	r3, #0
 800f45a:	001d      	movs	r5, r3
 800f45c:	0022      	movs	r2, r4
 800f45e:	002b      	movs	r3, r5
 800f460:	f7f1 f85c 	bl	800051c <__aeabi_uldivmod>
 800f464:	0002      	movs	r2, r0
 800f466:	000b      	movs	r3, r1
 800f468:	0013      	movs	r3, r2
 800f46a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800f46c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f46e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f470:	e00d      	b.n	800f48e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800f472:	4b09      	ldr	r3, [pc, #36]	@ (800f498 <HAL_RCC_GetSysClockFreq+0x138>)
 800f474:	685b      	ldr	r3, [r3, #4]
 800f476:	0b5b      	lsrs	r3, r3, #13
 800f478:	2207      	movs	r2, #7
 800f47a:	4013      	ands	r3, r2
 800f47c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800f47e:	6a3b      	ldr	r3, [r7, #32]
 800f480:	3301      	adds	r3, #1
 800f482:	2280      	movs	r2, #128	@ 0x80
 800f484:	0212      	lsls	r2, r2, #8
 800f486:	409a      	lsls	r2, r3
 800f488:	0013      	movs	r3, r2
 800f48a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f48c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800f48e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800f490:	0018      	movs	r0, r3
 800f492:	46bd      	mov	sp, r7
 800f494:	b00e      	add	sp, #56	@ 0x38
 800f496:	bdb0      	pop	{r4, r5, r7, pc}
 800f498:	40021000 	.word	0x40021000
 800f49c:	003d0900 	.word	0x003d0900
 800f4a0:	00f42400 	.word	0x00f42400
 800f4a4:	007a1200 	.word	0x007a1200
 800f4a8:	0801a34c 	.word	0x0801a34c

0800f4ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f4b0:	4b02      	ldr	r3, [pc, #8]	@ (800f4bc <HAL_RCC_GetHCLKFreq+0x10>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
}
 800f4b4:	0018      	movs	r0, r3
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}
 800f4ba:	46c0      	nop			@ (mov r8, r8)
 800f4bc:	2000013c 	.word	0x2000013c

0800f4c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f4c4:	f7ff fff2 	bl	800f4ac <HAL_RCC_GetHCLKFreq>
 800f4c8:	0001      	movs	r1, r0
 800f4ca:	4b06      	ldr	r3, [pc, #24]	@ (800f4e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f4cc:	68db      	ldr	r3, [r3, #12]
 800f4ce:	0a1b      	lsrs	r3, r3, #8
 800f4d0:	2207      	movs	r2, #7
 800f4d2:	4013      	ands	r3, r2
 800f4d4:	4a04      	ldr	r2, [pc, #16]	@ (800f4e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800f4d6:	5cd3      	ldrb	r3, [r2, r3]
 800f4d8:	40d9      	lsrs	r1, r3
 800f4da:	000b      	movs	r3, r1
}
 800f4dc:	0018      	movs	r0, r3
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}
 800f4e2:	46c0      	nop			@ (mov r8, r8)
 800f4e4:	40021000 	.word	0x40021000
 800f4e8:	0801a344 	.word	0x0801a344

0800f4ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800f4f0:	f7ff ffdc 	bl	800f4ac <HAL_RCC_GetHCLKFreq>
 800f4f4:	0001      	movs	r1, r0
 800f4f6:	4b06      	ldr	r3, [pc, #24]	@ (800f510 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f4f8:	68db      	ldr	r3, [r3, #12]
 800f4fa:	0adb      	lsrs	r3, r3, #11
 800f4fc:	2207      	movs	r2, #7
 800f4fe:	4013      	ands	r3, r2
 800f500:	4a04      	ldr	r2, [pc, #16]	@ (800f514 <HAL_RCC_GetPCLK2Freq+0x28>)
 800f502:	5cd3      	ldrb	r3, [r2, r3]
 800f504:	40d9      	lsrs	r1, r3
 800f506:	000b      	movs	r3, r1
}
 800f508:	0018      	movs	r0, r3
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
 800f50e:	46c0      	nop			@ (mov r8, r8)
 800f510:	40021000 	.word	0x40021000
 800f514:	0801a344 	.word	0x0801a344

0800f518 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b086      	sub	sp, #24
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800f520:	2017      	movs	r0, #23
 800f522:	183b      	adds	r3, r7, r0
 800f524:	2200      	movs	r2, #0
 800f526:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	2220      	movs	r2, #32
 800f52e:	4013      	ands	r3, r2
 800f530:	d100      	bne.n	800f534 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800f532:	e0c7      	b.n	800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f534:	4b9b      	ldr	r3, [pc, #620]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f536:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f538:	2380      	movs	r3, #128	@ 0x80
 800f53a:	055b      	lsls	r3, r3, #21
 800f53c:	4013      	ands	r3, r2
 800f53e:	d109      	bne.n	800f554 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f540:	4b98      	ldr	r3, [pc, #608]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f542:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f544:	4b97      	ldr	r3, [pc, #604]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f546:	2180      	movs	r1, #128	@ 0x80
 800f548:	0549      	lsls	r1, r1, #21
 800f54a:	430a      	orrs	r2, r1
 800f54c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800f54e:	183b      	adds	r3, r7, r0
 800f550:	2201      	movs	r2, #1
 800f552:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f554:	4b94      	ldr	r3, [pc, #592]	@ (800f7a8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800f556:	681a      	ldr	r2, [r3, #0]
 800f558:	2380      	movs	r3, #128	@ 0x80
 800f55a:	005b      	lsls	r3, r3, #1
 800f55c:	4013      	ands	r3, r2
 800f55e:	d11a      	bne.n	800f596 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f560:	4b91      	ldr	r3, [pc, #580]	@ (800f7a8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800f562:	681a      	ldr	r2, [r3, #0]
 800f564:	4b90      	ldr	r3, [pc, #576]	@ (800f7a8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800f566:	2180      	movs	r1, #128	@ 0x80
 800f568:	0049      	lsls	r1, r1, #1
 800f56a:	430a      	orrs	r2, r1
 800f56c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f56e:	f7f9 fe77 	bl	8009260 <HAL_GetTick>
 800f572:	0003      	movs	r3, r0
 800f574:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f576:	e008      	b.n	800f58a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f578:	f7f9 fe72 	bl	8009260 <HAL_GetTick>
 800f57c:	0002      	movs	r2, r0
 800f57e:	693b      	ldr	r3, [r7, #16]
 800f580:	1ad3      	subs	r3, r2, r3
 800f582:	2b64      	cmp	r3, #100	@ 0x64
 800f584:	d901      	bls.n	800f58a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800f586:	2303      	movs	r3, #3
 800f588:	e107      	b.n	800f79a <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f58a:	4b87      	ldr	r3, [pc, #540]	@ (800f7a8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800f58c:	681a      	ldr	r2, [r3, #0]
 800f58e:	2380      	movs	r3, #128	@ 0x80
 800f590:	005b      	lsls	r3, r3, #1
 800f592:	4013      	ands	r3, r2
 800f594:	d0f0      	beq.n	800f578 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800f596:	4b83      	ldr	r3, [pc, #524]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f598:	681a      	ldr	r2, [r3, #0]
 800f59a:	23c0      	movs	r3, #192	@ 0xc0
 800f59c:	039b      	lsls	r3, r3, #14
 800f59e:	4013      	ands	r3, r2
 800f5a0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	685a      	ldr	r2, [r3, #4]
 800f5a6:	23c0      	movs	r3, #192	@ 0xc0
 800f5a8:	039b      	lsls	r3, r3, #14
 800f5aa:	4013      	ands	r3, r2
 800f5ac:	68fa      	ldr	r2, [r7, #12]
 800f5ae:	429a      	cmp	r2, r3
 800f5b0:	d013      	beq.n	800f5da <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	685a      	ldr	r2, [r3, #4]
 800f5b6:	23c0      	movs	r3, #192	@ 0xc0
 800f5b8:	029b      	lsls	r3, r3, #10
 800f5ba:	401a      	ands	r2, r3
 800f5bc:	23c0      	movs	r3, #192	@ 0xc0
 800f5be:	029b      	lsls	r3, r3, #10
 800f5c0:	429a      	cmp	r2, r3
 800f5c2:	d10a      	bne.n	800f5da <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f5c4:	4b77      	ldr	r3, [pc, #476]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f5c6:	681a      	ldr	r2, [r3, #0]
 800f5c8:	2380      	movs	r3, #128	@ 0x80
 800f5ca:	029b      	lsls	r3, r3, #10
 800f5cc:	401a      	ands	r2, r3
 800f5ce:	2380      	movs	r3, #128	@ 0x80
 800f5d0:	029b      	lsls	r3, r3, #10
 800f5d2:	429a      	cmp	r2, r3
 800f5d4:	d101      	bne.n	800f5da <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800f5d6:	2301      	movs	r3, #1
 800f5d8:	e0df      	b.n	800f79a <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800f5da:	4b72      	ldr	r3, [pc, #456]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f5dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f5de:	23c0      	movs	r3, #192	@ 0xc0
 800f5e0:	029b      	lsls	r3, r3, #10
 800f5e2:	4013      	ands	r3, r2
 800f5e4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d03b      	beq.n	800f664 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	685a      	ldr	r2, [r3, #4]
 800f5f0:	23c0      	movs	r3, #192	@ 0xc0
 800f5f2:	029b      	lsls	r3, r3, #10
 800f5f4:	4013      	ands	r3, r2
 800f5f6:	68fa      	ldr	r2, [r7, #12]
 800f5f8:	429a      	cmp	r2, r3
 800f5fa:	d033      	beq.n	800f664 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	2220      	movs	r2, #32
 800f602:	4013      	ands	r3, r2
 800f604:	d02e      	beq.n	800f664 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800f606:	4b67      	ldr	r3, [pc, #412]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f60a:	4a68      	ldr	r2, [pc, #416]	@ (800f7ac <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800f60c:	4013      	ands	r3, r2
 800f60e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800f610:	4b64      	ldr	r3, [pc, #400]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f612:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f614:	4b63      	ldr	r3, [pc, #396]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f616:	2180      	movs	r1, #128	@ 0x80
 800f618:	0309      	lsls	r1, r1, #12
 800f61a:	430a      	orrs	r2, r1
 800f61c:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f61e:	4b61      	ldr	r3, [pc, #388]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f620:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f622:	4b60      	ldr	r3, [pc, #384]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f624:	4962      	ldr	r1, [pc, #392]	@ (800f7b0 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800f626:	400a      	ands	r2, r1
 800f628:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800f62a:	4b5e      	ldr	r3, [pc, #376]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f62c:	68fa      	ldr	r2, [r7, #12]
 800f62e:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800f630:	68fa      	ldr	r2, [r7, #12]
 800f632:	2380      	movs	r3, #128	@ 0x80
 800f634:	005b      	lsls	r3, r3, #1
 800f636:	4013      	ands	r3, r2
 800f638:	d014      	beq.n	800f664 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f63a:	f7f9 fe11 	bl	8009260 <HAL_GetTick>
 800f63e:	0003      	movs	r3, r0
 800f640:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f642:	e009      	b.n	800f658 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f644:	f7f9 fe0c 	bl	8009260 <HAL_GetTick>
 800f648:	0002      	movs	r2, r0
 800f64a:	693b      	ldr	r3, [r7, #16]
 800f64c:	1ad3      	subs	r3, r2, r3
 800f64e:	4a59      	ldr	r2, [pc, #356]	@ (800f7b4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800f650:	4293      	cmp	r3, r2
 800f652:	d901      	bls.n	800f658 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800f654:	2303      	movs	r3, #3
 800f656:	e0a0      	b.n	800f79a <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f658:	4b52      	ldr	r3, [pc, #328]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f65a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f65c:	2380      	movs	r3, #128	@ 0x80
 800f65e:	009b      	lsls	r3, r3, #2
 800f660:	4013      	ands	r3, r2
 800f662:	d0ef      	beq.n	800f644 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	2220      	movs	r2, #32
 800f66a:	4013      	ands	r3, r2
 800f66c:	d01f      	beq.n	800f6ae <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	685a      	ldr	r2, [r3, #4]
 800f672:	23c0      	movs	r3, #192	@ 0xc0
 800f674:	029b      	lsls	r3, r3, #10
 800f676:	401a      	ands	r2, r3
 800f678:	23c0      	movs	r3, #192	@ 0xc0
 800f67a:	029b      	lsls	r3, r3, #10
 800f67c:	429a      	cmp	r2, r3
 800f67e:	d10c      	bne.n	800f69a <HAL_RCCEx_PeriphCLKConfig+0x182>
 800f680:	4b48      	ldr	r3, [pc, #288]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	4a4c      	ldr	r2, [pc, #304]	@ (800f7b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800f686:	4013      	ands	r3, r2
 800f688:	0019      	movs	r1, r3
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	685a      	ldr	r2, [r3, #4]
 800f68e:	23c0      	movs	r3, #192	@ 0xc0
 800f690:	039b      	lsls	r3, r3, #14
 800f692:	401a      	ands	r2, r3
 800f694:	4b43      	ldr	r3, [pc, #268]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f696:	430a      	orrs	r2, r1
 800f698:	601a      	str	r2, [r3, #0]
 800f69a:	4b42      	ldr	r3, [pc, #264]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f69c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	685a      	ldr	r2, [r3, #4]
 800f6a2:	23c0      	movs	r3, #192	@ 0xc0
 800f6a4:	029b      	lsls	r3, r3, #10
 800f6a6:	401a      	ands	r2, r3
 800f6a8:	4b3e      	ldr	r3, [pc, #248]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f6aa:	430a      	orrs	r2, r1
 800f6ac:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800f6ae:	2317      	movs	r3, #23
 800f6b0:	18fb      	adds	r3, r7, r3
 800f6b2:	781b      	ldrb	r3, [r3, #0]
 800f6b4:	2b01      	cmp	r3, #1
 800f6b6:	d105      	bne.n	800f6c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f6b8:	4b3a      	ldr	r3, [pc, #232]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f6ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f6bc:	4b39      	ldr	r3, [pc, #228]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f6be:	493f      	ldr	r1, [pc, #252]	@ (800f7bc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800f6c0:	400a      	ands	r2, r1
 800f6c2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	2201      	movs	r2, #1
 800f6ca:	4013      	ands	r3, r2
 800f6cc:	d009      	beq.n	800f6e2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f6ce:	4b35      	ldr	r3, [pc, #212]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f6d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f6d2:	2203      	movs	r2, #3
 800f6d4:	4393      	bics	r3, r2
 800f6d6:	0019      	movs	r1, r3
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	689a      	ldr	r2, [r3, #8]
 800f6dc:	4b31      	ldr	r3, [pc, #196]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f6de:	430a      	orrs	r2, r1
 800f6e0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	2202      	movs	r2, #2
 800f6e8:	4013      	ands	r3, r2
 800f6ea:	d009      	beq.n	800f700 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f6ec:	4b2d      	ldr	r3, [pc, #180]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f6ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f6f0:	220c      	movs	r2, #12
 800f6f2:	4393      	bics	r3, r2
 800f6f4:	0019      	movs	r1, r3
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	68da      	ldr	r2, [r3, #12]
 800f6fa:	4b2a      	ldr	r3, [pc, #168]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f6fc:	430a      	orrs	r2, r1
 800f6fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	2204      	movs	r2, #4
 800f706:	4013      	ands	r3, r2
 800f708:	d009      	beq.n	800f71e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f70a:	4b26      	ldr	r3, [pc, #152]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f70c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f70e:	4a2c      	ldr	r2, [pc, #176]	@ (800f7c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800f710:	4013      	ands	r3, r2
 800f712:	0019      	movs	r1, r3
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	691a      	ldr	r2, [r3, #16]
 800f718:	4b22      	ldr	r3, [pc, #136]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f71a:	430a      	orrs	r2, r1
 800f71c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	2208      	movs	r2, #8
 800f724:	4013      	ands	r3, r2
 800f726:	d009      	beq.n	800f73c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f728:	4b1e      	ldr	r3, [pc, #120]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f72a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f72c:	4a25      	ldr	r2, [pc, #148]	@ (800f7c4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800f72e:	4013      	ands	r3, r2
 800f730:	0019      	movs	r1, r3
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	695a      	ldr	r2, [r3, #20]
 800f736:	4b1b      	ldr	r3, [pc, #108]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f738:	430a      	orrs	r2, r1
 800f73a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681a      	ldr	r2, [r3, #0]
 800f740:	2380      	movs	r3, #128	@ 0x80
 800f742:	005b      	lsls	r3, r3, #1
 800f744:	4013      	ands	r3, r2
 800f746:	d009      	beq.n	800f75c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f748:	4b16      	ldr	r3, [pc, #88]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f74a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f74c:	4a17      	ldr	r2, [pc, #92]	@ (800f7ac <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800f74e:	4013      	ands	r3, r2
 800f750:	0019      	movs	r1, r3
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	699a      	ldr	r2, [r3, #24]
 800f756:	4b13      	ldr	r3, [pc, #76]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f758:	430a      	orrs	r2, r1
 800f75a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	2240      	movs	r2, #64	@ 0x40
 800f762:	4013      	ands	r3, r2
 800f764:	d009      	beq.n	800f77a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f766:	4b0f      	ldr	r3, [pc, #60]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f76a:	4a17      	ldr	r2, [pc, #92]	@ (800f7c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800f76c:	4013      	ands	r3, r2
 800f76e:	0019      	movs	r1, r3
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	6a1a      	ldr	r2, [r3, #32]
 800f774:	4b0b      	ldr	r3, [pc, #44]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f776:	430a      	orrs	r2, r1
 800f778:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	2280      	movs	r2, #128	@ 0x80
 800f780:	4013      	ands	r3, r2
 800f782:	d009      	beq.n	800f798 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800f784:	4b07      	ldr	r3, [pc, #28]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f788:	4a10      	ldr	r2, [pc, #64]	@ (800f7cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800f78a:	4013      	ands	r3, r2
 800f78c:	0019      	movs	r1, r3
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	69da      	ldr	r2, [r3, #28]
 800f792:	4b04      	ldr	r3, [pc, #16]	@ (800f7a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f794:	430a      	orrs	r2, r1
 800f796:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800f798:	2300      	movs	r3, #0
}
 800f79a:	0018      	movs	r0, r3
 800f79c:	46bd      	mov	sp, r7
 800f79e:	b006      	add	sp, #24
 800f7a0:	bd80      	pop	{r7, pc}
 800f7a2:	46c0      	nop			@ (mov r8, r8)
 800f7a4:	40021000 	.word	0x40021000
 800f7a8:	40007000 	.word	0x40007000
 800f7ac:	fffcffff 	.word	0xfffcffff
 800f7b0:	fff7ffff 	.word	0xfff7ffff
 800f7b4:	00001388 	.word	0x00001388
 800f7b8:	ffcfffff 	.word	0xffcfffff
 800f7bc:	efffffff 	.word	0xefffffff
 800f7c0:	fffff3ff 	.word	0xfffff3ff
 800f7c4:	ffffcfff 	.word	0xffffcfff
 800f7c8:	fbffffff 	.word	0xfbffffff
 800f7cc:	fff3ffff 	.word	0xfff3ffff

0800f7d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b082      	sub	sp, #8
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d101      	bne.n	800f7e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f7de:	2301      	movs	r3, #1
 800f7e0:	e032      	b.n	800f848 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	2239      	movs	r2, #57	@ 0x39
 800f7e6:	5c9b      	ldrb	r3, [r3, r2]
 800f7e8:	b2db      	uxtb	r3, r3
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d107      	bne.n	800f7fe <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2238      	movs	r2, #56	@ 0x38
 800f7f2:	2100      	movs	r1, #0
 800f7f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	0018      	movs	r0, r3
 800f7fa:	f7f8 fef5 	bl	80085e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2239      	movs	r2, #57	@ 0x39
 800f802:	2102      	movs	r1, #2
 800f804:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681a      	ldr	r2, [r3, #0]
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	3304      	adds	r3, #4
 800f80e:	0019      	movs	r1, r3
 800f810:	0010      	movs	r0, r2
 800f812:	f000 f975 	bl	800fb00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	223e      	movs	r2, #62	@ 0x3e
 800f81a:	2101      	movs	r1, #1
 800f81c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	223a      	movs	r2, #58	@ 0x3a
 800f822:	2101      	movs	r1, #1
 800f824:	5499      	strb	r1, [r3, r2]
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	223b      	movs	r2, #59	@ 0x3b
 800f82a:	2101      	movs	r1, #1
 800f82c:	5499      	strb	r1, [r3, r2]
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	223c      	movs	r2, #60	@ 0x3c
 800f832:	2101      	movs	r1, #1
 800f834:	5499      	strb	r1, [r3, r2]
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	223d      	movs	r2, #61	@ 0x3d
 800f83a:	2101      	movs	r1, #1
 800f83c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2239      	movs	r2, #57	@ 0x39
 800f842:	2101      	movs	r1, #1
 800f844:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f846:	2300      	movs	r3, #0
}
 800f848:	0018      	movs	r0, r3
 800f84a:	46bd      	mov	sp, r7
 800f84c:	b002      	add	sp, #8
 800f84e:	bd80      	pop	{r7, pc}

0800f850 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b084      	sub	sp, #16
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f85a:	683b      	ldr	r3, [r7, #0]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d108      	bne.n	800f872 <HAL_TIM_PWM_Start+0x22>
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	223a      	movs	r2, #58	@ 0x3a
 800f864:	5c9b      	ldrb	r3, [r3, r2]
 800f866:	b2db      	uxtb	r3, r3
 800f868:	3b01      	subs	r3, #1
 800f86a:	1e5a      	subs	r2, r3, #1
 800f86c:	4193      	sbcs	r3, r2
 800f86e:	b2db      	uxtb	r3, r3
 800f870:	e01f      	b.n	800f8b2 <HAL_TIM_PWM_Start+0x62>
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	2b04      	cmp	r3, #4
 800f876:	d108      	bne.n	800f88a <HAL_TIM_PWM_Start+0x3a>
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	223b      	movs	r2, #59	@ 0x3b
 800f87c:	5c9b      	ldrb	r3, [r3, r2]
 800f87e:	b2db      	uxtb	r3, r3
 800f880:	3b01      	subs	r3, #1
 800f882:	1e5a      	subs	r2, r3, #1
 800f884:	4193      	sbcs	r3, r2
 800f886:	b2db      	uxtb	r3, r3
 800f888:	e013      	b.n	800f8b2 <HAL_TIM_PWM_Start+0x62>
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	2b08      	cmp	r3, #8
 800f88e:	d108      	bne.n	800f8a2 <HAL_TIM_PWM_Start+0x52>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	223c      	movs	r2, #60	@ 0x3c
 800f894:	5c9b      	ldrb	r3, [r3, r2]
 800f896:	b2db      	uxtb	r3, r3
 800f898:	3b01      	subs	r3, #1
 800f89a:	1e5a      	subs	r2, r3, #1
 800f89c:	4193      	sbcs	r3, r2
 800f89e:	b2db      	uxtb	r3, r3
 800f8a0:	e007      	b.n	800f8b2 <HAL_TIM_PWM_Start+0x62>
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	223d      	movs	r2, #61	@ 0x3d
 800f8a6:	5c9b      	ldrb	r3, [r3, r2]
 800f8a8:	b2db      	uxtb	r3, r3
 800f8aa:	3b01      	subs	r3, #1
 800f8ac:	1e5a      	subs	r2, r3, #1
 800f8ae:	4193      	sbcs	r3, r2
 800f8b0:	b2db      	uxtb	r3, r3
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d001      	beq.n	800f8ba <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800f8b6:	2301      	movs	r3, #1
 800f8b8:	e052      	b.n	800f960 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d104      	bne.n	800f8ca <HAL_TIM_PWM_Start+0x7a>
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	223a      	movs	r2, #58	@ 0x3a
 800f8c4:	2102      	movs	r1, #2
 800f8c6:	5499      	strb	r1, [r3, r2]
 800f8c8:	e013      	b.n	800f8f2 <HAL_TIM_PWM_Start+0xa2>
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	2b04      	cmp	r3, #4
 800f8ce:	d104      	bne.n	800f8da <HAL_TIM_PWM_Start+0x8a>
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	223b      	movs	r2, #59	@ 0x3b
 800f8d4:	2102      	movs	r1, #2
 800f8d6:	5499      	strb	r1, [r3, r2]
 800f8d8:	e00b      	b.n	800f8f2 <HAL_TIM_PWM_Start+0xa2>
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	2b08      	cmp	r3, #8
 800f8de:	d104      	bne.n	800f8ea <HAL_TIM_PWM_Start+0x9a>
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	223c      	movs	r2, #60	@ 0x3c
 800f8e4:	2102      	movs	r1, #2
 800f8e6:	5499      	strb	r1, [r3, r2]
 800f8e8:	e003      	b.n	800f8f2 <HAL_TIM_PWM_Start+0xa2>
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	223d      	movs	r2, #61	@ 0x3d
 800f8ee:	2102      	movs	r1, #2
 800f8f0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	6839      	ldr	r1, [r7, #0]
 800f8f8:	2201      	movs	r2, #1
 800f8fa:	0018      	movs	r0, r3
 800f8fc:	f000 fa62 	bl	800fdc4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	681a      	ldr	r2, [r3, #0]
 800f904:	2380      	movs	r3, #128	@ 0x80
 800f906:	05db      	lsls	r3, r3, #23
 800f908:	429a      	cmp	r2, r3
 800f90a:	d00e      	beq.n	800f92a <HAL_TIM_PWM_Start+0xda>
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	4a15      	ldr	r2, [pc, #84]	@ (800f968 <HAL_TIM_PWM_Start+0x118>)
 800f912:	4293      	cmp	r3, r2
 800f914:	d009      	beq.n	800f92a <HAL_TIM_PWM_Start+0xda>
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	4a14      	ldr	r2, [pc, #80]	@ (800f96c <HAL_TIM_PWM_Start+0x11c>)
 800f91c:	4293      	cmp	r3, r2
 800f91e:	d004      	beq.n	800f92a <HAL_TIM_PWM_Start+0xda>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	4a12      	ldr	r2, [pc, #72]	@ (800f970 <HAL_TIM_PWM_Start+0x120>)
 800f926:	4293      	cmp	r3, r2
 800f928:	d111      	bne.n	800f94e <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	689b      	ldr	r3, [r3, #8]
 800f930:	2207      	movs	r2, #7
 800f932:	4013      	ands	r3, r2
 800f934:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	2b06      	cmp	r3, #6
 800f93a:	d010      	beq.n	800f95e <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	681a      	ldr	r2, [r3, #0]
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	2101      	movs	r1, #1
 800f948:	430a      	orrs	r2, r1
 800f94a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f94c:	e007      	b.n	800f95e <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	681a      	ldr	r2, [r3, #0]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	2101      	movs	r1, #1
 800f95a:	430a      	orrs	r2, r1
 800f95c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f95e:	2300      	movs	r3, #0
}
 800f960:	0018      	movs	r0, r3
 800f962:	46bd      	mov	sp, r7
 800f964:	b004      	add	sp, #16
 800f966:	bd80      	pop	{r7, pc}
 800f968:	40000400 	.word	0x40000400
 800f96c:	40010800 	.word	0x40010800
 800f970:	40011400 	.word	0x40011400

0800f974 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b086      	sub	sp, #24
 800f978:	af00      	add	r7, sp, #0
 800f97a:	60f8      	str	r0, [r7, #12]
 800f97c:	60b9      	str	r1, [r7, #8]
 800f97e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f980:	2317      	movs	r3, #23
 800f982:	18fb      	adds	r3, r7, r3
 800f984:	2200      	movs	r2, #0
 800f986:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	2238      	movs	r2, #56	@ 0x38
 800f98c:	5c9b      	ldrb	r3, [r3, r2]
 800f98e:	2b01      	cmp	r3, #1
 800f990:	d101      	bne.n	800f996 <HAL_TIM_PWM_ConfigChannel+0x22>
 800f992:	2302      	movs	r3, #2
 800f994:	e0ad      	b.n	800faf2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	2238      	movs	r2, #56	@ 0x38
 800f99a:	2101      	movs	r1, #1
 800f99c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	2b0c      	cmp	r3, #12
 800f9a2:	d100      	bne.n	800f9a6 <HAL_TIM_PWM_ConfigChannel+0x32>
 800f9a4:	e076      	b.n	800fa94 <HAL_TIM_PWM_ConfigChannel+0x120>
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	2b0c      	cmp	r3, #12
 800f9aa:	d900      	bls.n	800f9ae <HAL_TIM_PWM_ConfigChannel+0x3a>
 800f9ac:	e095      	b.n	800fada <HAL_TIM_PWM_ConfigChannel+0x166>
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	2b08      	cmp	r3, #8
 800f9b2:	d04e      	beq.n	800fa52 <HAL_TIM_PWM_ConfigChannel+0xde>
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2b08      	cmp	r3, #8
 800f9b8:	d900      	bls.n	800f9bc <HAL_TIM_PWM_ConfigChannel+0x48>
 800f9ba:	e08e      	b.n	800fada <HAL_TIM_PWM_ConfigChannel+0x166>
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d003      	beq.n	800f9ca <HAL_TIM_PWM_ConfigChannel+0x56>
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	2b04      	cmp	r3, #4
 800f9c6:	d021      	beq.n	800fa0c <HAL_TIM_PWM_ConfigChannel+0x98>
 800f9c8:	e087      	b.n	800fada <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	68ba      	ldr	r2, [r7, #8]
 800f9d0:	0011      	movs	r1, r2
 800f9d2:	0018      	movs	r0, r3
 800f9d4:	f000 f8f2 	bl	800fbbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	699a      	ldr	r2, [r3, #24]
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	2108      	movs	r1, #8
 800f9e4:	430a      	orrs	r2, r1
 800f9e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	699a      	ldr	r2, [r3, #24]
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	2104      	movs	r1, #4
 800f9f4:	438a      	bics	r2, r1
 800f9f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	6999      	ldr	r1, [r3, #24]
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	68da      	ldr	r2, [r3, #12]
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	430a      	orrs	r2, r1
 800fa08:	619a      	str	r2, [r3, #24]
      break;
 800fa0a:	e06b      	b.n	800fae4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	68ba      	ldr	r2, [r7, #8]
 800fa12:	0011      	movs	r1, r2
 800fa14:	0018      	movs	r0, r3
 800fa16:	f000 f90d 	bl	800fc34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	699a      	ldr	r2, [r3, #24]
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	2180      	movs	r1, #128	@ 0x80
 800fa26:	0109      	lsls	r1, r1, #4
 800fa28:	430a      	orrs	r2, r1
 800fa2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	699a      	ldr	r2, [r3, #24]
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	4931      	ldr	r1, [pc, #196]	@ (800fafc <HAL_TIM_PWM_ConfigChannel+0x188>)
 800fa38:	400a      	ands	r2, r1
 800fa3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	6999      	ldr	r1, [r3, #24]
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	68db      	ldr	r3, [r3, #12]
 800fa46:	021a      	lsls	r2, r3, #8
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	430a      	orrs	r2, r1
 800fa4e:	619a      	str	r2, [r3, #24]
      break;
 800fa50:	e048      	b.n	800fae4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	68ba      	ldr	r2, [r7, #8]
 800fa58:	0011      	movs	r1, r2
 800fa5a:	0018      	movs	r0, r3
 800fa5c:	f000 f92c 	bl	800fcb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	69da      	ldr	r2, [r3, #28]
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	2108      	movs	r1, #8
 800fa6c:	430a      	orrs	r2, r1
 800fa6e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	69da      	ldr	r2, [r3, #28]
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	2104      	movs	r1, #4
 800fa7c:	438a      	bics	r2, r1
 800fa7e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	69d9      	ldr	r1, [r3, #28]
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	68da      	ldr	r2, [r3, #12]
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	430a      	orrs	r2, r1
 800fa90:	61da      	str	r2, [r3, #28]
      break;
 800fa92:	e027      	b.n	800fae4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	68ba      	ldr	r2, [r7, #8]
 800fa9a:	0011      	movs	r1, r2
 800fa9c:	0018      	movs	r0, r3
 800fa9e:	f000 f94b 	bl	800fd38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	69da      	ldr	r2, [r3, #28]
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	2180      	movs	r1, #128	@ 0x80
 800faae:	0109      	lsls	r1, r1, #4
 800fab0:	430a      	orrs	r2, r1
 800fab2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	69da      	ldr	r2, [r3, #28]
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	490f      	ldr	r1, [pc, #60]	@ (800fafc <HAL_TIM_PWM_ConfigChannel+0x188>)
 800fac0:	400a      	ands	r2, r1
 800fac2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	69d9      	ldr	r1, [r3, #28]
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	68db      	ldr	r3, [r3, #12]
 800face:	021a      	lsls	r2, r3, #8
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	430a      	orrs	r2, r1
 800fad6:	61da      	str	r2, [r3, #28]
      break;
 800fad8:	e004      	b.n	800fae4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800fada:	2317      	movs	r3, #23
 800fadc:	18fb      	adds	r3, r7, r3
 800fade:	2201      	movs	r2, #1
 800fae0:	701a      	strb	r2, [r3, #0]
      break;
 800fae2:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	2238      	movs	r2, #56	@ 0x38
 800fae8:	2100      	movs	r1, #0
 800faea:	5499      	strb	r1, [r3, r2]

  return status;
 800faec:	2317      	movs	r3, #23
 800faee:	18fb      	adds	r3, r7, r3
 800faf0:	781b      	ldrb	r3, [r3, #0]
}
 800faf2:	0018      	movs	r0, r3
 800faf4:	46bd      	mov	sp, r7
 800faf6:	b006      	add	sp, #24
 800faf8:	bd80      	pop	{r7, pc}
 800fafa:	46c0      	nop			@ (mov r8, r8)
 800fafc:	fffffbff 	.word	0xfffffbff

0800fb00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b084      	sub	sp, #16
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
 800fb08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fb10:	687a      	ldr	r2, [r7, #4]
 800fb12:	2380      	movs	r3, #128	@ 0x80
 800fb14:	05db      	lsls	r3, r3, #23
 800fb16:	429a      	cmp	r2, r3
 800fb18:	d00b      	beq.n	800fb32 <TIM_Base_SetConfig+0x32>
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	4a23      	ldr	r2, [pc, #140]	@ (800fbac <TIM_Base_SetConfig+0xac>)
 800fb1e:	4293      	cmp	r3, r2
 800fb20:	d007      	beq.n	800fb32 <TIM_Base_SetConfig+0x32>
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	4a22      	ldr	r2, [pc, #136]	@ (800fbb0 <TIM_Base_SetConfig+0xb0>)
 800fb26:	4293      	cmp	r3, r2
 800fb28:	d003      	beq.n	800fb32 <TIM_Base_SetConfig+0x32>
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	4a21      	ldr	r2, [pc, #132]	@ (800fbb4 <TIM_Base_SetConfig+0xb4>)
 800fb2e:	4293      	cmp	r3, r2
 800fb30:	d108      	bne.n	800fb44 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	2270      	movs	r2, #112	@ 0x70
 800fb36:	4393      	bics	r3, r2
 800fb38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	685b      	ldr	r3, [r3, #4]
 800fb3e:	68fa      	ldr	r2, [r7, #12]
 800fb40:	4313      	orrs	r3, r2
 800fb42:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fb44:	687a      	ldr	r2, [r7, #4]
 800fb46:	2380      	movs	r3, #128	@ 0x80
 800fb48:	05db      	lsls	r3, r3, #23
 800fb4a:	429a      	cmp	r2, r3
 800fb4c:	d00b      	beq.n	800fb66 <TIM_Base_SetConfig+0x66>
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	4a16      	ldr	r2, [pc, #88]	@ (800fbac <TIM_Base_SetConfig+0xac>)
 800fb52:	4293      	cmp	r3, r2
 800fb54:	d007      	beq.n	800fb66 <TIM_Base_SetConfig+0x66>
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	4a15      	ldr	r2, [pc, #84]	@ (800fbb0 <TIM_Base_SetConfig+0xb0>)
 800fb5a:	4293      	cmp	r3, r2
 800fb5c:	d003      	beq.n	800fb66 <TIM_Base_SetConfig+0x66>
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	4a14      	ldr	r2, [pc, #80]	@ (800fbb4 <TIM_Base_SetConfig+0xb4>)
 800fb62:	4293      	cmp	r3, r2
 800fb64:	d108      	bne.n	800fb78 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	4a13      	ldr	r2, [pc, #76]	@ (800fbb8 <TIM_Base_SetConfig+0xb8>)
 800fb6a:	4013      	ands	r3, r2
 800fb6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	68db      	ldr	r3, [r3, #12]
 800fb72:	68fa      	ldr	r2, [r7, #12]
 800fb74:	4313      	orrs	r3, r2
 800fb76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	2280      	movs	r2, #128	@ 0x80
 800fb7c:	4393      	bics	r3, r2
 800fb7e:	001a      	movs	r2, r3
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	691b      	ldr	r3, [r3, #16]
 800fb84:	4313      	orrs	r3, r2
 800fb86:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	68fa      	ldr	r2, [r7, #12]
 800fb8c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	689a      	ldr	r2, [r3, #8]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	681a      	ldr	r2, [r3, #0]
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2201      	movs	r2, #1
 800fba2:	615a      	str	r2, [r3, #20]
}
 800fba4:	46c0      	nop			@ (mov r8, r8)
 800fba6:	46bd      	mov	sp, r7
 800fba8:	b004      	add	sp, #16
 800fbaa:	bd80      	pop	{r7, pc}
 800fbac:	40000400 	.word	0x40000400
 800fbb0:	40010800 	.word	0x40010800
 800fbb4:	40011400 	.word	0x40011400
 800fbb8:	fffffcff 	.word	0xfffffcff

0800fbbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b086      	sub	sp, #24
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
 800fbc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	6a1b      	ldr	r3, [r3, #32]
 800fbca:	2201      	movs	r2, #1
 800fbcc:	4393      	bics	r3, r2
 800fbce:	001a      	movs	r2, r3
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	6a1b      	ldr	r3, [r3, #32]
 800fbd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	685b      	ldr	r3, [r3, #4]
 800fbde:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	699b      	ldr	r3, [r3, #24]
 800fbe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	2270      	movs	r2, #112	@ 0x70
 800fbea:	4393      	bics	r3, r2
 800fbec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	2203      	movs	r2, #3
 800fbf2:	4393      	bics	r3, r2
 800fbf4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	68fa      	ldr	r2, [r7, #12]
 800fbfc:	4313      	orrs	r3, r2
 800fbfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fc00:	697b      	ldr	r3, [r7, #20]
 800fc02:	2202      	movs	r2, #2
 800fc04:	4393      	bics	r3, r2
 800fc06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	689b      	ldr	r3, [r3, #8]
 800fc0c:	697a      	ldr	r2, [r7, #20]
 800fc0e:	4313      	orrs	r3, r2
 800fc10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	693a      	ldr	r2, [r7, #16]
 800fc16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	68fa      	ldr	r2, [r7, #12]
 800fc1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	685a      	ldr	r2, [r3, #4]
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	697a      	ldr	r2, [r7, #20]
 800fc2a:	621a      	str	r2, [r3, #32]
}
 800fc2c:	46c0      	nop			@ (mov r8, r8)
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	b006      	add	sp, #24
 800fc32:	bd80      	pop	{r7, pc}

0800fc34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b086      	sub	sp, #24
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
 800fc3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	6a1b      	ldr	r3, [r3, #32]
 800fc42:	2210      	movs	r2, #16
 800fc44:	4393      	bics	r3, r2
 800fc46:	001a      	movs	r2, r3
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	6a1b      	ldr	r3, [r3, #32]
 800fc50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	685b      	ldr	r3, [r3, #4]
 800fc56:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	699b      	ldr	r3, [r3, #24]
 800fc5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	4a13      	ldr	r2, [pc, #76]	@ (800fcb0 <TIM_OC2_SetConfig+0x7c>)
 800fc62:	4013      	ands	r3, r2
 800fc64:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	4a12      	ldr	r2, [pc, #72]	@ (800fcb4 <TIM_OC2_SetConfig+0x80>)
 800fc6a:	4013      	ands	r3, r2
 800fc6c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	021b      	lsls	r3, r3, #8
 800fc74:	68fa      	ldr	r2, [r7, #12]
 800fc76:	4313      	orrs	r3, r2
 800fc78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	2220      	movs	r2, #32
 800fc7e:	4393      	bics	r3, r2
 800fc80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	689b      	ldr	r3, [r3, #8]
 800fc86:	011b      	lsls	r3, r3, #4
 800fc88:	697a      	ldr	r2, [r7, #20]
 800fc8a:	4313      	orrs	r3, r2
 800fc8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	693a      	ldr	r2, [r7, #16]
 800fc92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	68fa      	ldr	r2, [r7, #12]
 800fc98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	685a      	ldr	r2, [r3, #4]
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	697a      	ldr	r2, [r7, #20]
 800fca6:	621a      	str	r2, [r3, #32]
}
 800fca8:	46c0      	nop			@ (mov r8, r8)
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	b006      	add	sp, #24
 800fcae:	bd80      	pop	{r7, pc}
 800fcb0:	ffff8fff 	.word	0xffff8fff
 800fcb4:	fffffcff 	.word	0xfffffcff

0800fcb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b086      	sub	sp, #24
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	6a1b      	ldr	r3, [r3, #32]
 800fcc6:	4a1a      	ldr	r2, [pc, #104]	@ (800fd30 <TIM_OC3_SetConfig+0x78>)
 800fcc8:	401a      	ands	r2, r3
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	6a1b      	ldr	r3, [r3, #32]
 800fcd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	685b      	ldr	r3, [r3, #4]
 800fcd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	69db      	ldr	r3, [r3, #28]
 800fcde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	2270      	movs	r2, #112	@ 0x70
 800fce4:	4393      	bics	r3, r2
 800fce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	2203      	movs	r2, #3
 800fcec:	4393      	bics	r3, r2
 800fcee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	68fa      	ldr	r2, [r7, #12]
 800fcf6:	4313      	orrs	r3, r2
 800fcf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fcfa:	697b      	ldr	r3, [r7, #20]
 800fcfc:	4a0d      	ldr	r2, [pc, #52]	@ (800fd34 <TIM_OC3_SetConfig+0x7c>)
 800fcfe:	4013      	ands	r3, r2
 800fd00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	689b      	ldr	r3, [r3, #8]
 800fd06:	021b      	lsls	r3, r3, #8
 800fd08:	697a      	ldr	r2, [r7, #20]
 800fd0a:	4313      	orrs	r3, r2
 800fd0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	693a      	ldr	r2, [r7, #16]
 800fd12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	68fa      	ldr	r2, [r7, #12]
 800fd18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	685a      	ldr	r2, [r3, #4]
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	697a      	ldr	r2, [r7, #20]
 800fd26:	621a      	str	r2, [r3, #32]
}
 800fd28:	46c0      	nop			@ (mov r8, r8)
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	b006      	add	sp, #24
 800fd2e:	bd80      	pop	{r7, pc}
 800fd30:	fffffeff 	.word	0xfffffeff
 800fd34:	fffffdff 	.word	0xfffffdff

0800fd38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b086      	sub	sp, #24
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
 800fd40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	6a1b      	ldr	r3, [r3, #32]
 800fd46:	4a1b      	ldr	r2, [pc, #108]	@ (800fdb4 <TIM_OC4_SetConfig+0x7c>)
 800fd48:	401a      	ands	r2, r3
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	6a1b      	ldr	r3, [r3, #32]
 800fd52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	685b      	ldr	r3, [r3, #4]
 800fd58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	69db      	ldr	r3, [r3, #28]
 800fd5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	4a15      	ldr	r2, [pc, #84]	@ (800fdb8 <TIM_OC4_SetConfig+0x80>)
 800fd64:	4013      	ands	r3, r2
 800fd66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	4a14      	ldr	r2, [pc, #80]	@ (800fdbc <TIM_OC4_SetConfig+0x84>)
 800fd6c:	4013      	ands	r3, r2
 800fd6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fd70:	683b      	ldr	r3, [r7, #0]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	021b      	lsls	r3, r3, #8
 800fd76:	68fa      	ldr	r2, [r7, #12]
 800fd78:	4313      	orrs	r3, r2
 800fd7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fd7c:	697b      	ldr	r3, [r7, #20]
 800fd7e:	4a10      	ldr	r2, [pc, #64]	@ (800fdc0 <TIM_OC4_SetConfig+0x88>)
 800fd80:	4013      	ands	r3, r2
 800fd82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	689b      	ldr	r3, [r3, #8]
 800fd88:	031b      	lsls	r3, r3, #12
 800fd8a:	697a      	ldr	r2, [r7, #20]
 800fd8c:	4313      	orrs	r3, r2
 800fd8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	693a      	ldr	r2, [r7, #16]
 800fd94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	68fa      	ldr	r2, [r7, #12]
 800fd9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	685a      	ldr	r2, [r3, #4]
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	697a      	ldr	r2, [r7, #20]
 800fda8:	621a      	str	r2, [r3, #32]
}
 800fdaa:	46c0      	nop			@ (mov r8, r8)
 800fdac:	46bd      	mov	sp, r7
 800fdae:	b006      	add	sp, #24
 800fdb0:	bd80      	pop	{r7, pc}
 800fdb2:	46c0      	nop			@ (mov r8, r8)
 800fdb4:	ffffefff 	.word	0xffffefff
 800fdb8:	ffff8fff 	.word	0xffff8fff
 800fdbc:	fffffcff 	.word	0xfffffcff
 800fdc0:	ffffdfff 	.word	0xffffdfff

0800fdc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b086      	sub	sp, #24
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	60f8      	str	r0, [r7, #12]
 800fdcc:	60b9      	str	r1, [r7, #8]
 800fdce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	221f      	movs	r2, #31
 800fdd4:	4013      	ands	r3, r2
 800fdd6:	2201      	movs	r2, #1
 800fdd8:	409a      	lsls	r2, r3
 800fdda:	0013      	movs	r3, r2
 800fddc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	6a1b      	ldr	r3, [r3, #32]
 800fde2:	697a      	ldr	r2, [r7, #20]
 800fde4:	43d2      	mvns	r2, r2
 800fde6:	401a      	ands	r2, r3
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	6a1a      	ldr	r2, [r3, #32]
 800fdf0:	68bb      	ldr	r3, [r7, #8]
 800fdf2:	211f      	movs	r1, #31
 800fdf4:	400b      	ands	r3, r1
 800fdf6:	6879      	ldr	r1, [r7, #4]
 800fdf8:	4099      	lsls	r1, r3
 800fdfa:	000b      	movs	r3, r1
 800fdfc:	431a      	orrs	r2, r3
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	621a      	str	r2, [r3, #32]
}
 800fe02:	46c0      	nop			@ (mov r8, r8)
 800fe04:	46bd      	mov	sp, r7
 800fe06:	b006      	add	sp, #24
 800fe08:	bd80      	pop	{r7, pc}
	...

0800fe0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b084      	sub	sp, #16
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
 800fe14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2238      	movs	r2, #56	@ 0x38
 800fe1a:	5c9b      	ldrb	r3, [r3, r2]
 800fe1c:	2b01      	cmp	r3, #1
 800fe1e:	d101      	bne.n	800fe24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fe20:	2302      	movs	r3, #2
 800fe22:	e047      	b.n	800feb4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2238      	movs	r2, #56	@ 0x38
 800fe28:	2101      	movs	r1, #1
 800fe2a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	2239      	movs	r2, #57	@ 0x39
 800fe30:	2102      	movs	r1, #2
 800fe32:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	685b      	ldr	r3, [r3, #4]
 800fe3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	689b      	ldr	r3, [r3, #8]
 800fe42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	2270      	movs	r2, #112	@ 0x70
 800fe48:	4393      	bics	r3, r2
 800fe4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	68fa      	ldr	r2, [r7, #12]
 800fe52:	4313      	orrs	r3, r2
 800fe54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	68fa      	ldr	r2, [r7, #12]
 800fe5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681a      	ldr	r2, [r3, #0]
 800fe62:	2380      	movs	r3, #128	@ 0x80
 800fe64:	05db      	lsls	r3, r3, #23
 800fe66:	429a      	cmp	r2, r3
 800fe68:	d00e      	beq.n	800fe88 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	4a13      	ldr	r2, [pc, #76]	@ (800febc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800fe70:	4293      	cmp	r3, r2
 800fe72:	d009      	beq.n	800fe88 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	4a11      	ldr	r2, [pc, #68]	@ (800fec0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800fe7a:	4293      	cmp	r3, r2
 800fe7c:	d004      	beq.n	800fe88 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	4a10      	ldr	r2, [pc, #64]	@ (800fec4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800fe84:	4293      	cmp	r3, r2
 800fe86:	d10c      	bne.n	800fea2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	2280      	movs	r2, #128	@ 0x80
 800fe8c:	4393      	bics	r3, r2
 800fe8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	685b      	ldr	r3, [r3, #4]
 800fe94:	68ba      	ldr	r2, [r7, #8]
 800fe96:	4313      	orrs	r3, r2
 800fe98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	68ba      	ldr	r2, [r7, #8]
 800fea0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	2239      	movs	r2, #57	@ 0x39
 800fea6:	2101      	movs	r1, #1
 800fea8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	2238      	movs	r2, #56	@ 0x38
 800feae:	2100      	movs	r1, #0
 800feb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800feb2:	2300      	movs	r3, #0
}
 800feb4:	0018      	movs	r0, r3
 800feb6:	46bd      	mov	sp, r7
 800feb8:	b004      	add	sp, #16
 800feba:	bd80      	pop	{r7, pc}
 800febc:	40000400 	.word	0x40000400
 800fec0:	40010800 	.word	0x40010800
 800fec4:	40011400 	.word	0x40011400

0800fec8 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b082      	sub	sp, #8
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2238      	movs	r2, #56	@ 0x38
 800fed6:	5c9b      	ldrb	r3, [r3, r2]
 800fed8:	2b01      	cmp	r3, #1
 800feda:	d101      	bne.n	800fee0 <HAL_TIMEx_RemapConfig+0x18>
 800fedc:	2302      	movs	r3, #2
 800fede:	e00c      	b.n	800fefa <HAL_TIMEx_RemapConfig+0x32>
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2238      	movs	r2, #56	@ 0x38
 800fee4:	2101      	movs	r1, #1
 800fee6:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	683a      	ldr	r2, [r7, #0]
 800feee:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2238      	movs	r2, #56	@ 0x38
 800fef4:	2100      	movs	r1, #0
 800fef6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800fef8:	2300      	movs	r3, #0
}
 800fefa:	0018      	movs	r0, r3
 800fefc:	46bd      	mov	sp, r7
 800fefe:	b002      	add	sp, #8
 800ff00:	bd80      	pop	{r7, pc}
	...

0800ff04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b082      	sub	sp, #8
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d101      	bne.n	800ff16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ff12:	2301      	movs	r3, #1
 800ff14:	e053      	b.n	800ffbe <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d116      	bne.n	800ff4c <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	2278      	movs	r2, #120	@ 0x78
 800ff22:	2100      	movs	r1, #0
 800ff24:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	0018      	movs	r0, r3
 800ff2a:	f000 fd07 	bl	801093c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	22b0      	movs	r2, #176	@ 0xb0
 800ff32:	589b      	ldr	r3, [r3, r2]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d103      	bne.n	800ff40 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	21b0      	movs	r1, #176	@ 0xb0
 800ff3c:	4a22      	ldr	r2, [pc, #136]	@ (800ffc8 <HAL_UART_Init+0xc4>)
 800ff3e:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	22b0      	movs	r2, #176	@ 0xb0
 800ff44:	589b      	ldr	r3, [r3, r2]
 800ff46:	687a      	ldr	r2, [r7, #4]
 800ff48:	0010      	movs	r0, r2
 800ff4a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	2224      	movs	r2, #36	@ 0x24
 800ff50:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	681a      	ldr	r2, [r3, #0]
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	2101      	movs	r1, #1
 800ff5e:	438a      	bics	r2, r1
 800ff60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	0018      	movs	r0, r3
 800ff66:	f000 fd2d 	bl	80109c4 <UART_SetConfig>
 800ff6a:	0003      	movs	r3, r0
 800ff6c:	2b01      	cmp	r3, #1
 800ff6e:	d101      	bne.n	800ff74 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 800ff70:	2301      	movs	r3, #1
 800ff72:	e024      	b.n	800ffbe <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d003      	beq.n	800ff84 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	0018      	movs	r0, r3
 800ff80:	f000 ffbe 	bl	8010f00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	685a      	ldr	r2, [r3, #4]
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	490f      	ldr	r1, [pc, #60]	@ (800ffcc <HAL_UART_Init+0xc8>)
 800ff90:	400a      	ands	r2, r1
 800ff92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	689a      	ldr	r2, [r3, #8]
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	212a      	movs	r1, #42	@ 0x2a
 800ffa0:	438a      	bics	r2, r1
 800ffa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	681a      	ldr	r2, [r3, #0]
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	2101      	movs	r1, #1
 800ffb0:	430a      	orrs	r2, r1
 800ffb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	0018      	movs	r0, r3
 800ffb8:	f001 f856 	bl	8011068 <UART_CheckIdleState>
 800ffbc:	0003      	movs	r3, r0
}
 800ffbe:	0018      	movs	r0, r3
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	b002      	add	sp, #8
 800ffc4:	bd80      	pop	{r7, pc}
 800ffc6:	46c0      	nop			@ (mov r8, r8)
 800ffc8:	080087c9 	.word	0x080087c9
 800ffcc:	ffffb7ff 	.word	0xffffb7ff

0800ffd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b08a      	sub	sp, #40	@ 0x28
 800ffd4:	af02      	add	r7, sp, #8
 800ffd6:	60f8      	str	r0, [r7, #12]
 800ffd8:	60b9      	str	r1, [r7, #8]
 800ffda:	603b      	str	r3, [r7, #0]
 800ffdc:	1dbb      	adds	r3, r7, #6
 800ffde:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ffe4:	2b20      	cmp	r3, #32
 800ffe6:	d000      	beq.n	800ffea <HAL_UART_Transmit+0x1a>
 800ffe8:	e08c      	b.n	8010104 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d003      	beq.n	800fff8 <HAL_UART_Transmit+0x28>
 800fff0:	1dbb      	adds	r3, r7, #6
 800fff2:	881b      	ldrh	r3, [r3, #0]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d101      	bne.n	800fffc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800fff8:	2301      	movs	r3, #1
 800fffa:	e084      	b.n	8010106 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	689a      	ldr	r2, [r3, #8]
 8010000:	2380      	movs	r3, #128	@ 0x80
 8010002:	015b      	lsls	r3, r3, #5
 8010004:	429a      	cmp	r2, r3
 8010006:	d109      	bne.n	801001c <HAL_UART_Transmit+0x4c>
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	691b      	ldr	r3, [r3, #16]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d105      	bne.n	801001c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8010010:	68bb      	ldr	r3, [r7, #8]
 8010012:	2201      	movs	r2, #1
 8010014:	4013      	ands	r3, r2
 8010016:	d001      	beq.n	801001c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8010018:	2301      	movs	r3, #1
 801001a:	e074      	b.n	8010106 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	2284      	movs	r2, #132	@ 0x84
 8010020:	2100      	movs	r1, #0
 8010022:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	2221      	movs	r2, #33	@ 0x21
 8010028:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801002a:	f7f9 f919 	bl	8009260 <HAL_GetTick>
 801002e:	0003      	movs	r3, r0
 8010030:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	1dba      	adds	r2, r7, #6
 8010036:	2150      	movs	r1, #80	@ 0x50
 8010038:	8812      	ldrh	r2, [r2, #0]
 801003a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	1dba      	adds	r2, r7, #6
 8010040:	2152      	movs	r1, #82	@ 0x52
 8010042:	8812      	ldrh	r2, [r2, #0]
 8010044:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	689a      	ldr	r2, [r3, #8]
 801004a:	2380      	movs	r3, #128	@ 0x80
 801004c:	015b      	lsls	r3, r3, #5
 801004e:	429a      	cmp	r2, r3
 8010050:	d108      	bne.n	8010064 <HAL_UART_Transmit+0x94>
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	691b      	ldr	r3, [r3, #16]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d104      	bne.n	8010064 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801005a:	2300      	movs	r3, #0
 801005c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	61bb      	str	r3, [r7, #24]
 8010062:	e003      	b.n	801006c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8010064:	68bb      	ldr	r3, [r7, #8]
 8010066:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010068:	2300      	movs	r3, #0
 801006a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801006c:	e02f      	b.n	80100ce <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801006e:	697a      	ldr	r2, [r7, #20]
 8010070:	68f8      	ldr	r0, [r7, #12]
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	9300      	str	r3, [sp, #0]
 8010076:	0013      	movs	r3, r2
 8010078:	2200      	movs	r2, #0
 801007a:	2180      	movs	r1, #128	@ 0x80
 801007c:	f001 f89c 	bl	80111b8 <UART_WaitOnFlagUntilTimeout>
 8010080:	1e03      	subs	r3, r0, #0
 8010082:	d004      	beq.n	801008e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	2220      	movs	r2, #32
 8010088:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801008a:	2303      	movs	r3, #3
 801008c:	e03b      	b.n	8010106 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801008e:	69fb      	ldr	r3, [r7, #28]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d10b      	bne.n	80100ac <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010094:	69bb      	ldr	r3, [r7, #24]
 8010096:	881b      	ldrh	r3, [r3, #0]
 8010098:	001a      	movs	r2, r3
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	05d2      	lsls	r2, r2, #23
 80100a0:	0dd2      	lsrs	r2, r2, #23
 80100a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80100a4:	69bb      	ldr	r3, [r7, #24]
 80100a6:	3302      	adds	r3, #2
 80100a8:	61bb      	str	r3, [r7, #24]
 80100aa:	e007      	b.n	80100bc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80100ac:	69fb      	ldr	r3, [r7, #28]
 80100ae:	781a      	ldrb	r2, [r3, #0]
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80100b6:	69fb      	ldr	r3, [r7, #28]
 80100b8:	3301      	adds	r3, #1
 80100ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	2252      	movs	r2, #82	@ 0x52
 80100c0:	5a9b      	ldrh	r3, [r3, r2]
 80100c2:	b29b      	uxth	r3, r3
 80100c4:	3b01      	subs	r3, #1
 80100c6:	b299      	uxth	r1, r3
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	2252      	movs	r2, #82	@ 0x52
 80100cc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	2252      	movs	r2, #82	@ 0x52
 80100d2:	5a9b      	ldrh	r3, [r3, r2]
 80100d4:	b29b      	uxth	r3, r3
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d1c9      	bne.n	801006e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80100da:	697a      	ldr	r2, [r7, #20]
 80100dc:	68f8      	ldr	r0, [r7, #12]
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	9300      	str	r3, [sp, #0]
 80100e2:	0013      	movs	r3, r2
 80100e4:	2200      	movs	r2, #0
 80100e6:	2140      	movs	r1, #64	@ 0x40
 80100e8:	f001 f866 	bl	80111b8 <UART_WaitOnFlagUntilTimeout>
 80100ec:	1e03      	subs	r3, r0, #0
 80100ee:	d004      	beq.n	80100fa <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	2220      	movs	r2, #32
 80100f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80100f6:	2303      	movs	r3, #3
 80100f8:	e005      	b.n	8010106 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	2220      	movs	r2, #32
 80100fe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8010100:	2300      	movs	r3, #0
 8010102:	e000      	b.n	8010106 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8010104:	2302      	movs	r3, #2
  }
}
 8010106:	0018      	movs	r0, r3
 8010108:	46bd      	mov	sp, r7
 801010a:	b008      	add	sp, #32
 801010c:	bd80      	pop	{r7, pc}
	...

08010110 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b088      	sub	sp, #32
 8010114:	af00      	add	r7, sp, #0
 8010116:	60f8      	str	r0, [r7, #12]
 8010118:	60b9      	str	r1, [r7, #8]
 801011a:	1dbb      	adds	r3, r7, #6
 801011c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010122:	2b20      	cmp	r3, #32
 8010124:	d000      	beq.n	8010128 <HAL_UART_Transmit_DMA+0x18>
 8010126:	e077      	b.n	8010218 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d003      	beq.n	8010136 <HAL_UART_Transmit_DMA+0x26>
 801012e:	1dbb      	adds	r3, r7, #6
 8010130:	881b      	ldrh	r3, [r3, #0]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d101      	bne.n	801013a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8010136:	2301      	movs	r3, #1
 8010138:	e06f      	b.n	801021a <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	689a      	ldr	r2, [r3, #8]
 801013e:	2380      	movs	r3, #128	@ 0x80
 8010140:	015b      	lsls	r3, r3, #5
 8010142:	429a      	cmp	r2, r3
 8010144:	d109      	bne.n	801015a <HAL_UART_Transmit_DMA+0x4a>
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	691b      	ldr	r3, [r3, #16]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d105      	bne.n	801015a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	2201      	movs	r2, #1
 8010152:	4013      	ands	r3, r2
 8010154:	d001      	beq.n	801015a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8010156:	2301      	movs	r3, #1
 8010158:	e05f      	b.n	801021a <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	68ba      	ldr	r2, [r7, #8]
 801015e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	1dba      	adds	r2, r7, #6
 8010164:	2150      	movs	r1, #80	@ 0x50
 8010166:	8812      	ldrh	r2, [r2, #0]
 8010168:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	1dba      	adds	r2, r7, #6
 801016e:	2152      	movs	r1, #82	@ 0x52
 8010170:	8812      	ldrh	r2, [r2, #0]
 8010172:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	2284      	movs	r2, #132	@ 0x84
 8010178:	2100      	movs	r1, #0
 801017a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	2221      	movs	r2, #33	@ 0x21
 8010180:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010186:	2b00      	cmp	r3, #0
 8010188:	d027      	beq.n	80101da <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801018e:	4a25      	ldr	r2, [pc, #148]	@ (8010224 <HAL_UART_Transmit_DMA+0x114>)
 8010190:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010196:	4a24      	ldr	r2, [pc, #144]	@ (8010228 <HAL_UART_Transmit_DMA+0x118>)
 8010198:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801019e:	4a23      	ldr	r2, [pc, #140]	@ (801022c <HAL_UART_Transmit_DMA+0x11c>)
 80101a0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80101a6:	2200      	movs	r2, #0
 80101a8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80101b2:	0019      	movs	r1, r3
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	3328      	adds	r3, #40	@ 0x28
 80101ba:	001a      	movs	r2, r3
 80101bc:	1dbb      	adds	r3, r7, #6
 80101be:	881b      	ldrh	r3, [r3, #0]
 80101c0:	f7f9 fdae 	bl	8009d20 <HAL_DMA_Start_IT>
 80101c4:	1e03      	subs	r3, r0, #0
 80101c6:	d008      	beq.n	80101da <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	2284      	movs	r2, #132	@ 0x84
 80101cc:	2110      	movs	r1, #16
 80101ce:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	2220      	movs	r2, #32
 80101d4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80101d6:	2301      	movs	r3, #1
 80101d8:	e01f      	b.n	801021a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	2240      	movs	r2, #64	@ 0x40
 80101e0:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80101e2:	f3ef 8310 	mrs	r3, PRIMASK
 80101e6:	613b      	str	r3, [r7, #16]
  return(result);
 80101e8:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80101ea:	61fb      	str	r3, [r7, #28]
 80101ec:	2301      	movs	r3, #1
 80101ee:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80101f0:	697b      	ldr	r3, [r7, #20]
 80101f2:	f383 8810 	msr	PRIMASK, r3
}
 80101f6:	46c0      	nop			@ (mov r8, r8)
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	689a      	ldr	r2, [r3, #8]
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	2180      	movs	r1, #128	@ 0x80
 8010204:	430a      	orrs	r2, r1
 8010206:	609a      	str	r2, [r3, #8]
 8010208:	69fb      	ldr	r3, [r7, #28]
 801020a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801020c:	69bb      	ldr	r3, [r7, #24]
 801020e:	f383 8810 	msr	PRIMASK, r3
}
 8010212:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8010214:	2300      	movs	r3, #0
 8010216:	e000      	b.n	801021a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8010218:	2302      	movs	r3, #2
  }
}
 801021a:	0018      	movs	r0, r3
 801021c:	46bd      	mov	sp, r7
 801021e:	b008      	add	sp, #32
 8010220:	bd80      	pop	{r7, pc}
 8010222:	46c0      	nop			@ (mov r8, r8)
 8010224:	080114dd 	.word	0x080114dd
 8010228:	08011579 	.word	0x08011579
 801022c:	08011719 	.word	0x08011719

08010230 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b088      	sub	sp, #32
 8010234:	af00      	add	r7, sp, #0
 8010236:	60f8      	str	r0, [r7, #12]
 8010238:	60b9      	str	r1, [r7, #8]
 801023a:	1dbb      	adds	r3, r7, #6
 801023c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	2280      	movs	r2, #128	@ 0x80
 8010242:	589b      	ldr	r3, [r3, r2]
 8010244:	2b20      	cmp	r3, #32
 8010246:	d14a      	bne.n	80102de <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8010248:	68bb      	ldr	r3, [r7, #8]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d003      	beq.n	8010256 <HAL_UART_Receive_DMA+0x26>
 801024e:	1dbb      	adds	r3, r7, #6
 8010250:	881b      	ldrh	r3, [r3, #0]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d101      	bne.n	801025a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8010256:	2301      	movs	r3, #1
 8010258:	e042      	b.n	80102e0 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	689a      	ldr	r2, [r3, #8]
 801025e:	2380      	movs	r3, #128	@ 0x80
 8010260:	015b      	lsls	r3, r3, #5
 8010262:	429a      	cmp	r2, r3
 8010264:	d109      	bne.n	801027a <HAL_UART_Receive_DMA+0x4a>
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	691b      	ldr	r3, [r3, #16]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d105      	bne.n	801027a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801026e:	68bb      	ldr	r3, [r7, #8]
 8010270:	2201      	movs	r2, #1
 8010272:	4013      	ands	r3, r2
 8010274:	d001      	beq.n	801027a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8010276:	2301      	movs	r3, #1
 8010278:	e032      	b.n	80102e0 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	2200      	movs	r2, #0
 801027e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	4a18      	ldr	r2, [pc, #96]	@ (80102e8 <HAL_UART_Receive_DMA+0xb8>)
 8010286:	4293      	cmp	r3, r2
 8010288:	d020      	beq.n	80102cc <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	685a      	ldr	r2, [r3, #4]
 8010290:	2380      	movs	r3, #128	@ 0x80
 8010292:	041b      	lsls	r3, r3, #16
 8010294:	4013      	ands	r3, r2
 8010296:	d019      	beq.n	80102cc <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010298:	f3ef 8310 	mrs	r3, PRIMASK
 801029c:	613b      	str	r3, [r7, #16]
  return(result);
 801029e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80102a0:	61fb      	str	r3, [r7, #28]
 80102a2:	2301      	movs	r3, #1
 80102a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80102a6:	697b      	ldr	r3, [r7, #20]
 80102a8:	f383 8810 	msr	PRIMASK, r3
}
 80102ac:	46c0      	nop			@ (mov r8, r8)
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	681a      	ldr	r2, [r3, #0]
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	2180      	movs	r1, #128	@ 0x80
 80102ba:	04c9      	lsls	r1, r1, #19
 80102bc:	430a      	orrs	r2, r1
 80102be:	601a      	str	r2, [r3, #0]
 80102c0:	69fb      	ldr	r3, [r7, #28]
 80102c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80102c4:	69bb      	ldr	r3, [r7, #24]
 80102c6:	f383 8810 	msr	PRIMASK, r3
}
 80102ca:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80102cc:	1dbb      	adds	r3, r7, #6
 80102ce:	881a      	ldrh	r2, [r3, #0]
 80102d0:	68b9      	ldr	r1, [r7, #8]
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	0018      	movs	r0, r3
 80102d6:	f000 ffd9 	bl	801128c <UART_Start_Receive_DMA>
 80102da:	0003      	movs	r3, r0
 80102dc:	e000      	b.n	80102e0 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80102de:	2302      	movs	r3, #2
  }
}
 80102e0:	0018      	movs	r0, r3
 80102e2:	46bd      	mov	sp, r7
 80102e4:	b008      	add	sp, #32
 80102e6:	bd80      	pop	{r7, pc}
 80102e8:	40004800 	.word	0x40004800

080102ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80102ec:	b590      	push	{r4, r7, lr}
 80102ee:	b0ab      	sub	sp, #172	@ 0xac
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	69db      	ldr	r3, [r3, #28]
 80102fa:	22a4      	movs	r2, #164	@ 0xa4
 80102fc:	18b9      	adds	r1, r7, r2
 80102fe:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	20a0      	movs	r0, #160	@ 0xa0
 8010308:	1839      	adds	r1, r7, r0
 801030a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	689b      	ldr	r3, [r3, #8]
 8010312:	219c      	movs	r1, #156	@ 0x9c
 8010314:	1879      	adds	r1, r7, r1
 8010316:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010318:	0011      	movs	r1, r2
 801031a:	18bb      	adds	r3, r7, r2
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	4a9c      	ldr	r2, [pc, #624]	@ (8010590 <HAL_UART_IRQHandler+0x2a4>)
 8010320:	4013      	ands	r3, r2
 8010322:	2298      	movs	r2, #152	@ 0x98
 8010324:	18bc      	adds	r4, r7, r2
 8010326:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8010328:	18bb      	adds	r3, r7, r2
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d114      	bne.n	801035a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8010330:	187b      	adds	r3, r7, r1
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	2220      	movs	r2, #32
 8010336:	4013      	ands	r3, r2
 8010338:	d00f      	beq.n	801035a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801033a:	183b      	adds	r3, r7, r0
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	2220      	movs	r2, #32
 8010340:	4013      	ands	r3, r2
 8010342:	d00a      	beq.n	801035a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010348:	2b00      	cmp	r3, #0
 801034a:	d100      	bne.n	801034e <HAL_UART_IRQHandler+0x62>
 801034c:	e2aa      	b.n	80108a4 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010352:	687a      	ldr	r2, [r7, #4]
 8010354:	0010      	movs	r0, r2
 8010356:	4798      	blx	r3
      }
      return;
 8010358:	e2a4      	b.n	80108a4 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801035a:	2398      	movs	r3, #152	@ 0x98
 801035c:	18fb      	adds	r3, r7, r3
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d100      	bne.n	8010366 <HAL_UART_IRQHandler+0x7a>
 8010364:	e11a      	b.n	801059c <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8010366:	239c      	movs	r3, #156	@ 0x9c
 8010368:	18fb      	adds	r3, r7, r3
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	2201      	movs	r2, #1
 801036e:	4013      	ands	r3, r2
 8010370:	d106      	bne.n	8010380 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8010372:	23a0      	movs	r3, #160	@ 0xa0
 8010374:	18fb      	adds	r3, r7, r3
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	4a86      	ldr	r2, [pc, #536]	@ (8010594 <HAL_UART_IRQHandler+0x2a8>)
 801037a:	4013      	ands	r3, r2
 801037c:	d100      	bne.n	8010380 <HAL_UART_IRQHandler+0x94>
 801037e:	e10d      	b.n	801059c <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010380:	23a4      	movs	r3, #164	@ 0xa4
 8010382:	18fb      	adds	r3, r7, r3
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	2201      	movs	r2, #1
 8010388:	4013      	ands	r3, r2
 801038a:	d012      	beq.n	80103b2 <HAL_UART_IRQHandler+0xc6>
 801038c:	23a0      	movs	r3, #160	@ 0xa0
 801038e:	18fb      	adds	r3, r7, r3
 8010390:	681a      	ldr	r2, [r3, #0]
 8010392:	2380      	movs	r3, #128	@ 0x80
 8010394:	005b      	lsls	r3, r3, #1
 8010396:	4013      	ands	r3, r2
 8010398:	d00b      	beq.n	80103b2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	2201      	movs	r2, #1
 80103a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2284      	movs	r2, #132	@ 0x84
 80103a6:	589b      	ldr	r3, [r3, r2]
 80103a8:	2201      	movs	r2, #1
 80103aa:	431a      	orrs	r2, r3
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2184      	movs	r1, #132	@ 0x84
 80103b0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80103b2:	23a4      	movs	r3, #164	@ 0xa4
 80103b4:	18fb      	adds	r3, r7, r3
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	2202      	movs	r2, #2
 80103ba:	4013      	ands	r3, r2
 80103bc:	d011      	beq.n	80103e2 <HAL_UART_IRQHandler+0xf6>
 80103be:	239c      	movs	r3, #156	@ 0x9c
 80103c0:	18fb      	adds	r3, r7, r3
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	2201      	movs	r2, #1
 80103c6:	4013      	ands	r3, r2
 80103c8:	d00b      	beq.n	80103e2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	2202      	movs	r2, #2
 80103d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2284      	movs	r2, #132	@ 0x84
 80103d6:	589b      	ldr	r3, [r3, r2]
 80103d8:	2204      	movs	r2, #4
 80103da:	431a      	orrs	r2, r3
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2184      	movs	r1, #132	@ 0x84
 80103e0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80103e2:	23a4      	movs	r3, #164	@ 0xa4
 80103e4:	18fb      	adds	r3, r7, r3
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	2204      	movs	r2, #4
 80103ea:	4013      	ands	r3, r2
 80103ec:	d011      	beq.n	8010412 <HAL_UART_IRQHandler+0x126>
 80103ee:	239c      	movs	r3, #156	@ 0x9c
 80103f0:	18fb      	adds	r3, r7, r3
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	2201      	movs	r2, #1
 80103f6:	4013      	ands	r3, r2
 80103f8:	d00b      	beq.n	8010412 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	2204      	movs	r2, #4
 8010400:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	2284      	movs	r2, #132	@ 0x84
 8010406:	589b      	ldr	r3, [r3, r2]
 8010408:	2202      	movs	r2, #2
 801040a:	431a      	orrs	r2, r3
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	2184      	movs	r1, #132	@ 0x84
 8010410:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010412:	23a4      	movs	r3, #164	@ 0xa4
 8010414:	18fb      	adds	r3, r7, r3
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	2208      	movs	r2, #8
 801041a:	4013      	ands	r3, r2
 801041c:	d017      	beq.n	801044e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801041e:	23a0      	movs	r3, #160	@ 0xa0
 8010420:	18fb      	adds	r3, r7, r3
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	2220      	movs	r2, #32
 8010426:	4013      	ands	r3, r2
 8010428:	d105      	bne.n	8010436 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801042a:	239c      	movs	r3, #156	@ 0x9c
 801042c:	18fb      	adds	r3, r7, r3
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	2201      	movs	r2, #1
 8010432:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8010434:	d00b      	beq.n	801044e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	2208      	movs	r2, #8
 801043c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2284      	movs	r2, #132	@ 0x84
 8010442:	589b      	ldr	r3, [r3, r2]
 8010444:	2208      	movs	r2, #8
 8010446:	431a      	orrs	r2, r3
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2184      	movs	r1, #132	@ 0x84
 801044c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801044e:	23a4      	movs	r3, #164	@ 0xa4
 8010450:	18fb      	adds	r3, r7, r3
 8010452:	681a      	ldr	r2, [r3, #0]
 8010454:	2380      	movs	r3, #128	@ 0x80
 8010456:	011b      	lsls	r3, r3, #4
 8010458:	4013      	ands	r3, r2
 801045a:	d013      	beq.n	8010484 <HAL_UART_IRQHandler+0x198>
 801045c:	23a0      	movs	r3, #160	@ 0xa0
 801045e:	18fb      	adds	r3, r7, r3
 8010460:	681a      	ldr	r2, [r3, #0]
 8010462:	2380      	movs	r3, #128	@ 0x80
 8010464:	04db      	lsls	r3, r3, #19
 8010466:	4013      	ands	r3, r2
 8010468:	d00c      	beq.n	8010484 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	2280      	movs	r2, #128	@ 0x80
 8010470:	0112      	lsls	r2, r2, #4
 8010472:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	2284      	movs	r2, #132	@ 0x84
 8010478:	589b      	ldr	r3, [r3, r2]
 801047a:	2220      	movs	r2, #32
 801047c:	431a      	orrs	r2, r3
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	2184      	movs	r1, #132	@ 0x84
 8010482:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2284      	movs	r2, #132	@ 0x84
 8010488:	589b      	ldr	r3, [r3, r2]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d100      	bne.n	8010490 <HAL_UART_IRQHandler+0x1a4>
 801048e:	e20b      	b.n	80108a8 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8010490:	23a4      	movs	r3, #164	@ 0xa4
 8010492:	18fb      	adds	r3, r7, r3
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	2220      	movs	r2, #32
 8010498:	4013      	ands	r3, r2
 801049a:	d00e      	beq.n	80104ba <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801049c:	23a0      	movs	r3, #160	@ 0xa0
 801049e:	18fb      	adds	r3, r7, r3
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	2220      	movs	r2, #32
 80104a4:	4013      	ands	r3, r2
 80104a6:	d008      	beq.n	80104ba <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d004      	beq.n	80104ba <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80104b4:	687a      	ldr	r2, [r7, #4]
 80104b6:	0010      	movs	r0, r2
 80104b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2284      	movs	r2, #132	@ 0x84
 80104be:	589b      	ldr	r3, [r3, r2]
 80104c0:	2194      	movs	r1, #148	@ 0x94
 80104c2:	187a      	adds	r2, r7, r1
 80104c4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	689b      	ldr	r3, [r3, #8]
 80104cc:	2240      	movs	r2, #64	@ 0x40
 80104ce:	4013      	ands	r3, r2
 80104d0:	2b40      	cmp	r3, #64	@ 0x40
 80104d2:	d004      	beq.n	80104de <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80104d4:	187b      	adds	r3, r7, r1
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	2228      	movs	r2, #40	@ 0x28
 80104da:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80104dc:	d04b      	beq.n	8010576 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	0018      	movs	r0, r3
 80104e2:	f000 ff97 	bl	8011414 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	689b      	ldr	r3, [r3, #8]
 80104ec:	2240      	movs	r2, #64	@ 0x40
 80104ee:	4013      	ands	r3, r2
 80104f0:	2b40      	cmp	r3, #64	@ 0x40
 80104f2:	d139      	bne.n	8010568 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104f4:	f3ef 8310 	mrs	r3, PRIMASK
 80104f8:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80104fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80104fc:	2090      	movs	r0, #144	@ 0x90
 80104fe:	183a      	adds	r2, r7, r0
 8010500:	6013      	str	r3, [r2, #0]
 8010502:	2301      	movs	r3, #1
 8010504:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010506:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010508:	f383 8810 	msr	PRIMASK, r3
}
 801050c:	46c0      	nop			@ (mov r8, r8)
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	689a      	ldr	r2, [r3, #8]
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	2140      	movs	r1, #64	@ 0x40
 801051a:	438a      	bics	r2, r1
 801051c:	609a      	str	r2, [r3, #8]
 801051e:	183b      	adds	r3, r7, r0
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010524:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010526:	f383 8810 	msr	PRIMASK, r3
}
 801052a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010530:	2b00      	cmp	r3, #0
 8010532:	d012      	beq.n	801055a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010538:	4a17      	ldr	r2, [pc, #92]	@ (8010598 <HAL_UART_IRQHandler+0x2ac>)
 801053a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010540:	0018      	movs	r0, r3
 8010542:	f7f9 fc93 	bl	8009e6c <HAL_DMA_Abort_IT>
 8010546:	1e03      	subs	r3, r0, #0
 8010548:	d020      	beq.n	801058c <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801054e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010554:	0018      	movs	r0, r3
 8010556:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010558:	e018      	b.n	801058c <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	2298      	movs	r2, #152	@ 0x98
 801055e:	589b      	ldr	r3, [r3, r2]
 8010560:	687a      	ldr	r2, [r7, #4]
 8010562:	0010      	movs	r0, r2
 8010564:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010566:	e011      	b.n	801058c <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2298      	movs	r2, #152	@ 0x98
 801056c:	589b      	ldr	r3, [r3, r2]
 801056e:	687a      	ldr	r2, [r7, #4]
 8010570:	0010      	movs	r0, r2
 8010572:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010574:	e00a      	b.n	801058c <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	2298      	movs	r2, #152	@ 0x98
 801057a:	589b      	ldr	r3, [r3, r2]
 801057c:	687a      	ldr	r2, [r7, #4]
 801057e:	0010      	movs	r0, r2
 8010580:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	2284      	movs	r2, #132	@ 0x84
 8010586:	2100      	movs	r1, #0
 8010588:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 801058a:	e18d      	b.n	80108a8 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801058c:	46c0      	nop			@ (mov r8, r8)
    return;
 801058e:	e18b      	b.n	80108a8 <HAL_UART_IRQHandler+0x5bc>
 8010590:	0000080f 	.word	0x0000080f
 8010594:	04000120 	.word	0x04000120
 8010598:	080117a1 	.word	0x080117a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80105a0:	2b01      	cmp	r3, #1
 80105a2:	d000      	beq.n	80105a6 <HAL_UART_IRQHandler+0x2ba>
 80105a4:	e13d      	b.n	8010822 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80105a6:	23a4      	movs	r3, #164	@ 0xa4
 80105a8:	18fb      	adds	r3, r7, r3
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	2210      	movs	r2, #16
 80105ae:	4013      	ands	r3, r2
 80105b0:	d100      	bne.n	80105b4 <HAL_UART_IRQHandler+0x2c8>
 80105b2:	e136      	b.n	8010822 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80105b4:	23a0      	movs	r3, #160	@ 0xa0
 80105b6:	18fb      	adds	r3, r7, r3
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	2210      	movs	r2, #16
 80105bc:	4013      	ands	r3, r2
 80105be:	d100      	bne.n	80105c2 <HAL_UART_IRQHandler+0x2d6>
 80105c0:	e12f      	b.n	8010822 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	2210      	movs	r2, #16
 80105c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	689b      	ldr	r3, [r3, #8]
 80105d0:	2240      	movs	r2, #64	@ 0x40
 80105d2:	4013      	ands	r3, r2
 80105d4:	2b40      	cmp	r3, #64	@ 0x40
 80105d6:	d000      	beq.n	80105da <HAL_UART_IRQHandler+0x2ee>
 80105d8:	e0a2      	b.n	8010720 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	685a      	ldr	r2, [r3, #4]
 80105e2:	217e      	movs	r1, #126	@ 0x7e
 80105e4:	187b      	adds	r3, r7, r1
 80105e6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80105e8:	187b      	adds	r3, r7, r1
 80105ea:	881b      	ldrh	r3, [r3, #0]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d100      	bne.n	80105f2 <HAL_UART_IRQHandler+0x306>
 80105f0:	e15c      	b.n	80108ac <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2258      	movs	r2, #88	@ 0x58
 80105f6:	5a9b      	ldrh	r3, [r3, r2]
 80105f8:	187a      	adds	r2, r7, r1
 80105fa:	8812      	ldrh	r2, [r2, #0]
 80105fc:	429a      	cmp	r2, r3
 80105fe:	d300      	bcc.n	8010602 <HAL_UART_IRQHandler+0x316>
 8010600:	e154      	b.n	80108ac <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	187a      	adds	r2, r7, r1
 8010606:	215a      	movs	r1, #90	@ 0x5a
 8010608:	8812      	ldrh	r2, [r2, #0]
 801060a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	2220      	movs	r2, #32
 8010616:	4013      	ands	r3, r2
 8010618:	d16f      	bne.n	80106fa <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801061a:	f3ef 8310 	mrs	r3, PRIMASK
 801061e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8010620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010622:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010624:	2301      	movs	r3, #1
 8010626:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801062a:	f383 8810 	msr	PRIMASK, r3
}
 801062e:	46c0      	nop			@ (mov r8, r8)
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	681a      	ldr	r2, [r3, #0]
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	49a0      	ldr	r1, [pc, #640]	@ (80108bc <HAL_UART_IRQHandler+0x5d0>)
 801063c:	400a      	ands	r2, r1
 801063e:	601a      	str	r2, [r3, #0]
 8010640:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010642:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010646:	f383 8810 	msr	PRIMASK, r3
}
 801064a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801064c:	f3ef 8310 	mrs	r3, PRIMASK
 8010650:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8010652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010654:	677b      	str	r3, [r7, #116]	@ 0x74
 8010656:	2301      	movs	r3, #1
 8010658:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801065a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801065c:	f383 8810 	msr	PRIMASK, r3
}
 8010660:	46c0      	nop			@ (mov r8, r8)
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	689a      	ldr	r2, [r3, #8]
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	2101      	movs	r1, #1
 801066e:	438a      	bics	r2, r1
 8010670:	609a      	str	r2, [r3, #8]
 8010672:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010674:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010676:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010678:	f383 8810 	msr	PRIMASK, r3
}
 801067c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801067e:	f3ef 8310 	mrs	r3, PRIMASK
 8010682:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8010684:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010686:	673b      	str	r3, [r7, #112]	@ 0x70
 8010688:	2301      	movs	r3, #1
 801068a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801068c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801068e:	f383 8810 	msr	PRIMASK, r3
}
 8010692:	46c0      	nop			@ (mov r8, r8)
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	689a      	ldr	r2, [r3, #8]
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	2140      	movs	r1, #64	@ 0x40
 80106a0:	438a      	bics	r2, r1
 80106a2:	609a      	str	r2, [r3, #8]
 80106a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80106a6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80106aa:	f383 8810 	msr	PRIMASK, r3
}
 80106ae:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	2280      	movs	r2, #128	@ 0x80
 80106b4:	2120      	movs	r1, #32
 80106b6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2200      	movs	r2, #0
 80106bc:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106be:	f3ef 8310 	mrs	r3, PRIMASK
 80106c2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80106c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80106c8:	2301      	movs	r3, #1
 80106ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80106ce:	f383 8810 	msr	PRIMASK, r3
}
 80106d2:	46c0      	nop			@ (mov r8, r8)
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	681a      	ldr	r2, [r3, #0]
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	2110      	movs	r1, #16
 80106e0:	438a      	bics	r2, r1
 80106e2:	601a      	str	r2, [r3, #0]
 80106e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80106e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80106e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80106ea:	f383 8810 	msr	PRIMASK, r3
}
 80106ee:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80106f4:	0018      	movs	r0, r3
 80106f6:	f7f9 fb79 	bl	8009dec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	2202      	movs	r2, #2
 80106fe:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	22ac      	movs	r2, #172	@ 0xac
 8010704:	589b      	ldr	r3, [r3, r2]
 8010706:	687a      	ldr	r2, [r7, #4]
 8010708:	2158      	movs	r1, #88	@ 0x58
 801070a:	5a51      	ldrh	r1, [r2, r1]
 801070c:	687a      	ldr	r2, [r7, #4]
 801070e:	205a      	movs	r0, #90	@ 0x5a
 8010710:	5a12      	ldrh	r2, [r2, r0]
 8010712:	b292      	uxth	r2, r2
 8010714:	1a8a      	subs	r2, r1, r2
 8010716:	b291      	uxth	r1, r2
 8010718:	687a      	ldr	r2, [r7, #4]
 801071a:	0010      	movs	r0, r2
 801071c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801071e:	e0c5      	b.n	80108ac <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	2258      	movs	r2, #88	@ 0x58
 8010724:	5a99      	ldrh	r1, [r3, r2]
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	225a      	movs	r2, #90	@ 0x5a
 801072a:	5a9b      	ldrh	r3, [r3, r2]
 801072c:	b29a      	uxth	r2, r3
 801072e:	208e      	movs	r0, #142	@ 0x8e
 8010730:	183b      	adds	r3, r7, r0
 8010732:	1a8a      	subs	r2, r1, r2
 8010734:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	225a      	movs	r2, #90	@ 0x5a
 801073a:	5a9b      	ldrh	r3, [r3, r2]
 801073c:	b29b      	uxth	r3, r3
 801073e:	2b00      	cmp	r3, #0
 8010740:	d100      	bne.n	8010744 <HAL_UART_IRQHandler+0x458>
 8010742:	e0b5      	b.n	80108b0 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8010744:	183b      	adds	r3, r7, r0
 8010746:	881b      	ldrh	r3, [r3, #0]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d100      	bne.n	801074e <HAL_UART_IRQHandler+0x462>
 801074c:	e0b0      	b.n	80108b0 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801074e:	f3ef 8310 	mrs	r3, PRIMASK
 8010752:	60fb      	str	r3, [r7, #12]
  return(result);
 8010754:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010756:	2488      	movs	r4, #136	@ 0x88
 8010758:	193a      	adds	r2, r7, r4
 801075a:	6013      	str	r3, [r2, #0]
 801075c:	2301      	movs	r3, #1
 801075e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010760:	693b      	ldr	r3, [r7, #16]
 8010762:	f383 8810 	msr	PRIMASK, r3
}
 8010766:	46c0      	nop			@ (mov r8, r8)
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	681a      	ldr	r2, [r3, #0]
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	4953      	ldr	r1, [pc, #332]	@ (80108c0 <HAL_UART_IRQHandler+0x5d4>)
 8010774:	400a      	ands	r2, r1
 8010776:	601a      	str	r2, [r3, #0]
 8010778:	193b      	adds	r3, r7, r4
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801077e:	697b      	ldr	r3, [r7, #20]
 8010780:	f383 8810 	msr	PRIMASK, r3
}
 8010784:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010786:	f3ef 8310 	mrs	r3, PRIMASK
 801078a:	61bb      	str	r3, [r7, #24]
  return(result);
 801078c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801078e:	2484      	movs	r4, #132	@ 0x84
 8010790:	193a      	adds	r2, r7, r4
 8010792:	6013      	str	r3, [r2, #0]
 8010794:	2301      	movs	r3, #1
 8010796:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010798:	69fb      	ldr	r3, [r7, #28]
 801079a:	f383 8810 	msr	PRIMASK, r3
}
 801079e:	46c0      	nop			@ (mov r8, r8)
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	689a      	ldr	r2, [r3, #8]
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	2101      	movs	r1, #1
 80107ac:	438a      	bics	r2, r1
 80107ae:	609a      	str	r2, [r3, #8]
 80107b0:	193b      	adds	r3, r7, r4
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107b6:	6a3b      	ldr	r3, [r7, #32]
 80107b8:	f383 8810 	msr	PRIMASK, r3
}
 80107bc:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	2280      	movs	r2, #128	@ 0x80
 80107c2:	2120      	movs	r1, #32
 80107c4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2200      	movs	r2, #0
 80107ca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2200      	movs	r2, #0
 80107d0:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107d2:	f3ef 8310 	mrs	r3, PRIMASK
 80107d6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80107d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80107da:	2480      	movs	r4, #128	@ 0x80
 80107dc:	193a      	adds	r2, r7, r4
 80107de:	6013      	str	r3, [r2, #0]
 80107e0:	2301      	movs	r3, #1
 80107e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107e6:	f383 8810 	msr	PRIMASK, r3
}
 80107ea:	46c0      	nop			@ (mov r8, r8)
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	681a      	ldr	r2, [r3, #0]
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	2110      	movs	r1, #16
 80107f8:	438a      	bics	r2, r1
 80107fa:	601a      	str	r2, [r3, #0]
 80107fc:	193b      	adds	r3, r7, r4
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010804:	f383 8810 	msr	PRIMASK, r3
}
 8010808:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2202      	movs	r2, #2
 801080e:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	22ac      	movs	r2, #172	@ 0xac
 8010814:	589b      	ldr	r3, [r3, r2]
 8010816:	183a      	adds	r2, r7, r0
 8010818:	8811      	ldrh	r1, [r2, #0]
 801081a:	687a      	ldr	r2, [r7, #4]
 801081c:	0010      	movs	r0, r2
 801081e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010820:	e046      	b.n	80108b0 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010822:	23a4      	movs	r3, #164	@ 0xa4
 8010824:	18fb      	adds	r3, r7, r3
 8010826:	681a      	ldr	r2, [r3, #0]
 8010828:	2380      	movs	r3, #128	@ 0x80
 801082a:	035b      	lsls	r3, r3, #13
 801082c:	4013      	ands	r3, r2
 801082e:	d012      	beq.n	8010856 <HAL_UART_IRQHandler+0x56a>
 8010830:	239c      	movs	r3, #156	@ 0x9c
 8010832:	18fb      	adds	r3, r7, r3
 8010834:	681a      	ldr	r2, [r3, #0]
 8010836:	2380      	movs	r3, #128	@ 0x80
 8010838:	03db      	lsls	r3, r3, #15
 801083a:	4013      	ands	r3, r2
 801083c:	d00b      	beq.n	8010856 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	2280      	movs	r2, #128	@ 0x80
 8010844:	0352      	lsls	r2, r2, #13
 8010846:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	22a8      	movs	r2, #168	@ 0xa8
 801084c:	589b      	ldr	r3, [r3, r2]
 801084e:	687a      	ldr	r2, [r7, #4]
 8010850:	0010      	movs	r0, r2
 8010852:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010854:	e02f      	b.n	80108b6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8010856:	23a4      	movs	r3, #164	@ 0xa4
 8010858:	18fb      	adds	r3, r7, r3
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	2280      	movs	r2, #128	@ 0x80
 801085e:	4013      	ands	r3, r2
 8010860:	d00f      	beq.n	8010882 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8010862:	23a0      	movs	r3, #160	@ 0xa0
 8010864:	18fb      	adds	r3, r7, r3
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	2280      	movs	r2, #128	@ 0x80
 801086a:	4013      	ands	r3, r2
 801086c:	d009      	beq.n	8010882 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010872:	2b00      	cmp	r3, #0
 8010874:	d01e      	beq.n	80108b4 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801087a:	687a      	ldr	r2, [r7, #4]
 801087c:	0010      	movs	r0, r2
 801087e:	4798      	blx	r3
    }
    return;
 8010880:	e018      	b.n	80108b4 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010882:	23a4      	movs	r3, #164	@ 0xa4
 8010884:	18fb      	adds	r3, r7, r3
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	2240      	movs	r2, #64	@ 0x40
 801088a:	4013      	ands	r3, r2
 801088c:	d013      	beq.n	80108b6 <HAL_UART_IRQHandler+0x5ca>
 801088e:	23a0      	movs	r3, #160	@ 0xa0
 8010890:	18fb      	adds	r3, r7, r3
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	2240      	movs	r2, #64	@ 0x40
 8010896:	4013      	ands	r3, r2
 8010898:	d00d      	beq.n	80108b6 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	0018      	movs	r0, r3
 801089e:	f000 ff98 	bl	80117d2 <UART_EndTransmit_IT>
    return;
 80108a2:	e008      	b.n	80108b6 <HAL_UART_IRQHandler+0x5ca>
      return;
 80108a4:	46c0      	nop			@ (mov r8, r8)
 80108a6:	e006      	b.n	80108b6 <HAL_UART_IRQHandler+0x5ca>
    return;
 80108a8:	46c0      	nop			@ (mov r8, r8)
 80108aa:	e004      	b.n	80108b6 <HAL_UART_IRQHandler+0x5ca>
      return;
 80108ac:	46c0      	nop			@ (mov r8, r8)
 80108ae:	e002      	b.n	80108b6 <HAL_UART_IRQHandler+0x5ca>
      return;
 80108b0:	46c0      	nop			@ (mov r8, r8)
 80108b2:	e000      	b.n	80108b6 <HAL_UART_IRQHandler+0x5ca>
    return;
 80108b4:	46c0      	nop			@ (mov r8, r8)
  }

}
 80108b6:	46bd      	mov	sp, r7
 80108b8:	b02b      	add	sp, #172	@ 0xac
 80108ba:	bd90      	pop	{r4, r7, pc}
 80108bc:	fffffeff 	.word	0xfffffeff
 80108c0:	fffffedf 	.word	0xfffffedf

080108c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b082      	sub	sp, #8
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80108cc:	46c0      	nop			@ (mov r8, r8)
 80108ce:	46bd      	mov	sp, r7
 80108d0:	b002      	add	sp, #8
 80108d2:	bd80      	pop	{r7, pc}

080108d4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b082      	sub	sp, #8
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80108dc:	46c0      	nop			@ (mov r8, r8)
 80108de:	46bd      	mov	sp, r7
 80108e0:	b002      	add	sp, #8
 80108e2:	bd80      	pop	{r7, pc}

080108e4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b082      	sub	sp, #8
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80108ec:	46c0      	nop			@ (mov r8, r8)
 80108ee:	46bd      	mov	sp, r7
 80108f0:	b002      	add	sp, #8
 80108f2:	bd80      	pop	{r7, pc}

080108f4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b082      	sub	sp, #8
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80108fc:	46c0      	nop			@ (mov r8, r8)
 80108fe:	46bd      	mov	sp, r7
 8010900:	b002      	add	sp, #8
 8010902:	bd80      	pop	{r7, pc}

08010904 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b082      	sub	sp, #8
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801090c:	46c0      	nop			@ (mov r8, r8)
 801090e:	46bd      	mov	sp, r7
 8010910:	b002      	add	sp, #8
 8010912:	bd80      	pop	{r7, pc}

08010914 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b082      	sub	sp, #8
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801091c:	46c0      	nop			@ (mov r8, r8)
 801091e:	46bd      	mov	sp, r7
 8010920:	b002      	add	sp, #8
 8010922:	bd80      	pop	{r7, pc}

08010924 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b082      	sub	sp, #8
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
 801092c:	000a      	movs	r2, r1
 801092e:	1cbb      	adds	r3, r7, #2
 8010930:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010932:	46c0      	nop			@ (mov r8, r8)
 8010934:	46bd      	mov	sp, r7
 8010936:	b002      	add	sp, #8
 8010938:	bd80      	pop	{r7, pc}
	...

0801093c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b082      	sub	sp, #8
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2188      	movs	r1, #136	@ 0x88
 8010948:	4a14      	ldr	r2, [pc, #80]	@ (801099c <UART_InitCallbacksToDefault+0x60>)
 801094a:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	218c      	movs	r1, #140	@ 0x8c
 8010950:	4a13      	ldr	r2, [pc, #76]	@ (80109a0 <UART_InitCallbacksToDefault+0x64>)
 8010952:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	2190      	movs	r1, #144	@ 0x90
 8010958:	4a12      	ldr	r2, [pc, #72]	@ (80109a4 <UART_InitCallbacksToDefault+0x68>)
 801095a:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	2194      	movs	r1, #148	@ 0x94
 8010960:	4a11      	ldr	r2, [pc, #68]	@ (80109a8 <UART_InitCallbacksToDefault+0x6c>)
 8010962:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	2198      	movs	r1, #152	@ 0x98
 8010968:	4a10      	ldr	r2, [pc, #64]	@ (80109ac <UART_InitCallbacksToDefault+0x70>)
 801096a:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	219c      	movs	r1, #156	@ 0x9c
 8010970:	4a0f      	ldr	r2, [pc, #60]	@ (80109b0 <UART_InitCallbacksToDefault+0x74>)
 8010972:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	21a0      	movs	r1, #160	@ 0xa0
 8010978:	4a0e      	ldr	r2, [pc, #56]	@ (80109b4 <UART_InitCallbacksToDefault+0x78>)
 801097a:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	21a4      	movs	r1, #164	@ 0xa4
 8010980:	4a0d      	ldr	r2, [pc, #52]	@ (80109b8 <UART_InitCallbacksToDefault+0x7c>)
 8010982:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	21a8      	movs	r1, #168	@ 0xa8
 8010988:	4a0c      	ldr	r2, [pc, #48]	@ (80109bc <UART_InitCallbacksToDefault+0x80>)
 801098a:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	21ac      	movs	r1, #172	@ 0xac
 8010990:	4a0b      	ldr	r2, [pc, #44]	@ (80109c0 <UART_InitCallbacksToDefault+0x84>)
 8010992:	505a      	str	r2, [r3, r1]

}
 8010994:	46c0      	nop			@ (mov r8, r8)
 8010996:	46bd      	mov	sp, r7
 8010998:	b002      	add	sp, #8
 801099a:	bd80      	pop	{r7, pc}
 801099c:	080108d5 	.word	0x080108d5
 80109a0:	080108c5 	.word	0x080108c5
 80109a4:	080108e5 	.word	0x080108e5
 80109a8:	080037e5 	.word	0x080037e5
 80109ac:	08003821 	.word	0x08003821
 80109b0:	080108f5 	.word	0x080108f5
 80109b4:	08010905 	.word	0x08010905
 80109b8:	08010915 	.word	0x08010915
 80109bc:	0801182d 	.word	0x0801182d
 80109c0:	08010925 	.word	0x08010925

080109c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80109c4:	b5b0      	push	{r4, r5, r7, lr}
 80109c6:	b08e      	sub	sp, #56	@ 0x38
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80109cc:	231a      	movs	r3, #26
 80109ce:	2218      	movs	r2, #24
 80109d0:	189b      	adds	r3, r3, r2
 80109d2:	19db      	adds	r3, r3, r7
 80109d4:	2200      	movs	r2, #0
 80109d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80109d8:	69fb      	ldr	r3, [r7, #28]
 80109da:	689a      	ldr	r2, [r3, #8]
 80109dc:	69fb      	ldr	r3, [r7, #28]
 80109de:	691b      	ldr	r3, [r3, #16]
 80109e0:	431a      	orrs	r2, r3
 80109e2:	69fb      	ldr	r3, [r7, #28]
 80109e4:	695b      	ldr	r3, [r3, #20]
 80109e6:	431a      	orrs	r2, r3
 80109e8:	69fb      	ldr	r3, [r7, #28]
 80109ea:	69db      	ldr	r3, [r3, #28]
 80109ec:	4313      	orrs	r3, r2
 80109ee:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80109f0:	69fb      	ldr	r3, [r7, #28]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	4ac3      	ldr	r2, [pc, #780]	@ (8010d04 <UART_SetConfig+0x340>)
 80109f8:	4013      	ands	r3, r2
 80109fa:	0019      	movs	r1, r3
 80109fc:	69fb      	ldr	r3, [r7, #28]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010a02:	430a      	orrs	r2, r1
 8010a04:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010a06:	69fb      	ldr	r3, [r7, #28]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	685b      	ldr	r3, [r3, #4]
 8010a0c:	4abe      	ldr	r2, [pc, #760]	@ (8010d08 <UART_SetConfig+0x344>)
 8010a0e:	4013      	ands	r3, r2
 8010a10:	0019      	movs	r1, r3
 8010a12:	69fb      	ldr	r3, [r7, #28]
 8010a14:	68da      	ldr	r2, [r3, #12]
 8010a16:	69fb      	ldr	r3, [r7, #28]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	430a      	orrs	r2, r1
 8010a1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010a1e:	69fb      	ldr	r3, [r7, #28]
 8010a20:	699b      	ldr	r3, [r3, #24]
 8010a22:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010a24:	69fb      	ldr	r3, [r7, #28]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	4ab8      	ldr	r2, [pc, #736]	@ (8010d0c <UART_SetConfig+0x348>)
 8010a2a:	4293      	cmp	r3, r2
 8010a2c:	d004      	beq.n	8010a38 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010a2e:	69fb      	ldr	r3, [r7, #28]
 8010a30:	6a1b      	ldr	r3, [r3, #32]
 8010a32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010a34:	4313      	orrs	r3, r2
 8010a36:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010a38:	69fb      	ldr	r3, [r7, #28]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	689b      	ldr	r3, [r3, #8]
 8010a3e:	4ab4      	ldr	r2, [pc, #720]	@ (8010d10 <UART_SetConfig+0x34c>)
 8010a40:	4013      	ands	r3, r2
 8010a42:	0019      	movs	r1, r3
 8010a44:	69fb      	ldr	r3, [r7, #28]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010a4a:	430a      	orrs	r2, r1
 8010a4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010a4e:	69fb      	ldr	r3, [r7, #28]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	4ab0      	ldr	r2, [pc, #704]	@ (8010d14 <UART_SetConfig+0x350>)
 8010a54:	4293      	cmp	r3, r2
 8010a56:	d131      	bne.n	8010abc <UART_SetConfig+0xf8>
 8010a58:	4baf      	ldr	r3, [pc, #700]	@ (8010d18 <UART_SetConfig+0x354>)
 8010a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010a5c:	2203      	movs	r2, #3
 8010a5e:	4013      	ands	r3, r2
 8010a60:	2b03      	cmp	r3, #3
 8010a62:	d01d      	beq.n	8010aa0 <UART_SetConfig+0xdc>
 8010a64:	d823      	bhi.n	8010aae <UART_SetConfig+0xea>
 8010a66:	2b02      	cmp	r3, #2
 8010a68:	d00c      	beq.n	8010a84 <UART_SetConfig+0xc0>
 8010a6a:	d820      	bhi.n	8010aae <UART_SetConfig+0xea>
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d002      	beq.n	8010a76 <UART_SetConfig+0xb2>
 8010a70:	2b01      	cmp	r3, #1
 8010a72:	d00e      	beq.n	8010a92 <UART_SetConfig+0xce>
 8010a74:	e01b      	b.n	8010aae <UART_SetConfig+0xea>
 8010a76:	231b      	movs	r3, #27
 8010a78:	2218      	movs	r2, #24
 8010a7a:	189b      	adds	r3, r3, r2
 8010a7c:	19db      	adds	r3, r3, r7
 8010a7e:	2201      	movs	r2, #1
 8010a80:	701a      	strb	r2, [r3, #0]
 8010a82:	e0b4      	b.n	8010bee <UART_SetConfig+0x22a>
 8010a84:	231b      	movs	r3, #27
 8010a86:	2218      	movs	r2, #24
 8010a88:	189b      	adds	r3, r3, r2
 8010a8a:	19db      	adds	r3, r3, r7
 8010a8c:	2202      	movs	r2, #2
 8010a8e:	701a      	strb	r2, [r3, #0]
 8010a90:	e0ad      	b.n	8010bee <UART_SetConfig+0x22a>
 8010a92:	231b      	movs	r3, #27
 8010a94:	2218      	movs	r2, #24
 8010a96:	189b      	adds	r3, r3, r2
 8010a98:	19db      	adds	r3, r3, r7
 8010a9a:	2204      	movs	r2, #4
 8010a9c:	701a      	strb	r2, [r3, #0]
 8010a9e:	e0a6      	b.n	8010bee <UART_SetConfig+0x22a>
 8010aa0:	231b      	movs	r3, #27
 8010aa2:	2218      	movs	r2, #24
 8010aa4:	189b      	adds	r3, r3, r2
 8010aa6:	19db      	adds	r3, r3, r7
 8010aa8:	2208      	movs	r2, #8
 8010aaa:	701a      	strb	r2, [r3, #0]
 8010aac:	e09f      	b.n	8010bee <UART_SetConfig+0x22a>
 8010aae:	231b      	movs	r3, #27
 8010ab0:	2218      	movs	r2, #24
 8010ab2:	189b      	adds	r3, r3, r2
 8010ab4:	19db      	adds	r3, r3, r7
 8010ab6:	2210      	movs	r2, #16
 8010ab8:	701a      	strb	r2, [r3, #0]
 8010aba:	e098      	b.n	8010bee <UART_SetConfig+0x22a>
 8010abc:	69fb      	ldr	r3, [r7, #28]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	4a96      	ldr	r2, [pc, #600]	@ (8010d1c <UART_SetConfig+0x358>)
 8010ac2:	4293      	cmp	r3, r2
 8010ac4:	d131      	bne.n	8010b2a <UART_SetConfig+0x166>
 8010ac6:	4b94      	ldr	r3, [pc, #592]	@ (8010d18 <UART_SetConfig+0x354>)
 8010ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010aca:	220c      	movs	r2, #12
 8010acc:	4013      	ands	r3, r2
 8010ace:	2b0c      	cmp	r3, #12
 8010ad0:	d01d      	beq.n	8010b0e <UART_SetConfig+0x14a>
 8010ad2:	d823      	bhi.n	8010b1c <UART_SetConfig+0x158>
 8010ad4:	2b08      	cmp	r3, #8
 8010ad6:	d00c      	beq.n	8010af2 <UART_SetConfig+0x12e>
 8010ad8:	d820      	bhi.n	8010b1c <UART_SetConfig+0x158>
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d002      	beq.n	8010ae4 <UART_SetConfig+0x120>
 8010ade:	2b04      	cmp	r3, #4
 8010ae0:	d00e      	beq.n	8010b00 <UART_SetConfig+0x13c>
 8010ae2:	e01b      	b.n	8010b1c <UART_SetConfig+0x158>
 8010ae4:	231b      	movs	r3, #27
 8010ae6:	2218      	movs	r2, #24
 8010ae8:	189b      	adds	r3, r3, r2
 8010aea:	19db      	adds	r3, r3, r7
 8010aec:	2200      	movs	r2, #0
 8010aee:	701a      	strb	r2, [r3, #0]
 8010af0:	e07d      	b.n	8010bee <UART_SetConfig+0x22a>
 8010af2:	231b      	movs	r3, #27
 8010af4:	2218      	movs	r2, #24
 8010af6:	189b      	adds	r3, r3, r2
 8010af8:	19db      	adds	r3, r3, r7
 8010afa:	2202      	movs	r2, #2
 8010afc:	701a      	strb	r2, [r3, #0]
 8010afe:	e076      	b.n	8010bee <UART_SetConfig+0x22a>
 8010b00:	231b      	movs	r3, #27
 8010b02:	2218      	movs	r2, #24
 8010b04:	189b      	adds	r3, r3, r2
 8010b06:	19db      	adds	r3, r3, r7
 8010b08:	2204      	movs	r2, #4
 8010b0a:	701a      	strb	r2, [r3, #0]
 8010b0c:	e06f      	b.n	8010bee <UART_SetConfig+0x22a>
 8010b0e:	231b      	movs	r3, #27
 8010b10:	2218      	movs	r2, #24
 8010b12:	189b      	adds	r3, r3, r2
 8010b14:	19db      	adds	r3, r3, r7
 8010b16:	2208      	movs	r2, #8
 8010b18:	701a      	strb	r2, [r3, #0]
 8010b1a:	e068      	b.n	8010bee <UART_SetConfig+0x22a>
 8010b1c:	231b      	movs	r3, #27
 8010b1e:	2218      	movs	r2, #24
 8010b20:	189b      	adds	r3, r3, r2
 8010b22:	19db      	adds	r3, r3, r7
 8010b24:	2210      	movs	r2, #16
 8010b26:	701a      	strb	r2, [r3, #0]
 8010b28:	e061      	b.n	8010bee <UART_SetConfig+0x22a>
 8010b2a:	69fb      	ldr	r3, [r7, #28]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	4a7c      	ldr	r2, [pc, #496]	@ (8010d20 <UART_SetConfig+0x35c>)
 8010b30:	4293      	cmp	r3, r2
 8010b32:	d106      	bne.n	8010b42 <UART_SetConfig+0x17e>
 8010b34:	231b      	movs	r3, #27
 8010b36:	2218      	movs	r2, #24
 8010b38:	189b      	adds	r3, r3, r2
 8010b3a:	19db      	adds	r3, r3, r7
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	701a      	strb	r2, [r3, #0]
 8010b40:	e055      	b.n	8010bee <UART_SetConfig+0x22a>
 8010b42:	69fb      	ldr	r3, [r7, #28]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	4a77      	ldr	r2, [pc, #476]	@ (8010d24 <UART_SetConfig+0x360>)
 8010b48:	4293      	cmp	r3, r2
 8010b4a:	d106      	bne.n	8010b5a <UART_SetConfig+0x196>
 8010b4c:	231b      	movs	r3, #27
 8010b4e:	2218      	movs	r2, #24
 8010b50:	189b      	adds	r3, r3, r2
 8010b52:	19db      	adds	r3, r3, r7
 8010b54:	2200      	movs	r2, #0
 8010b56:	701a      	strb	r2, [r3, #0]
 8010b58:	e049      	b.n	8010bee <UART_SetConfig+0x22a>
 8010b5a:	69fb      	ldr	r3, [r7, #28]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	4a6b      	ldr	r2, [pc, #428]	@ (8010d0c <UART_SetConfig+0x348>)
 8010b60:	4293      	cmp	r3, r2
 8010b62:	d13e      	bne.n	8010be2 <UART_SetConfig+0x21e>
 8010b64:	4b6c      	ldr	r3, [pc, #432]	@ (8010d18 <UART_SetConfig+0x354>)
 8010b66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010b68:	23c0      	movs	r3, #192	@ 0xc0
 8010b6a:	011b      	lsls	r3, r3, #4
 8010b6c:	4013      	ands	r3, r2
 8010b6e:	22c0      	movs	r2, #192	@ 0xc0
 8010b70:	0112      	lsls	r2, r2, #4
 8010b72:	4293      	cmp	r3, r2
 8010b74:	d027      	beq.n	8010bc6 <UART_SetConfig+0x202>
 8010b76:	22c0      	movs	r2, #192	@ 0xc0
 8010b78:	0112      	lsls	r2, r2, #4
 8010b7a:	4293      	cmp	r3, r2
 8010b7c:	d82a      	bhi.n	8010bd4 <UART_SetConfig+0x210>
 8010b7e:	2280      	movs	r2, #128	@ 0x80
 8010b80:	0112      	lsls	r2, r2, #4
 8010b82:	4293      	cmp	r3, r2
 8010b84:	d011      	beq.n	8010baa <UART_SetConfig+0x1e6>
 8010b86:	2280      	movs	r2, #128	@ 0x80
 8010b88:	0112      	lsls	r2, r2, #4
 8010b8a:	4293      	cmp	r3, r2
 8010b8c:	d822      	bhi.n	8010bd4 <UART_SetConfig+0x210>
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d004      	beq.n	8010b9c <UART_SetConfig+0x1d8>
 8010b92:	2280      	movs	r2, #128	@ 0x80
 8010b94:	00d2      	lsls	r2, r2, #3
 8010b96:	4293      	cmp	r3, r2
 8010b98:	d00e      	beq.n	8010bb8 <UART_SetConfig+0x1f4>
 8010b9a:	e01b      	b.n	8010bd4 <UART_SetConfig+0x210>
 8010b9c:	231b      	movs	r3, #27
 8010b9e:	2218      	movs	r2, #24
 8010ba0:	189b      	adds	r3, r3, r2
 8010ba2:	19db      	adds	r3, r3, r7
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	701a      	strb	r2, [r3, #0]
 8010ba8:	e021      	b.n	8010bee <UART_SetConfig+0x22a>
 8010baa:	231b      	movs	r3, #27
 8010bac:	2218      	movs	r2, #24
 8010bae:	189b      	adds	r3, r3, r2
 8010bb0:	19db      	adds	r3, r3, r7
 8010bb2:	2202      	movs	r2, #2
 8010bb4:	701a      	strb	r2, [r3, #0]
 8010bb6:	e01a      	b.n	8010bee <UART_SetConfig+0x22a>
 8010bb8:	231b      	movs	r3, #27
 8010bba:	2218      	movs	r2, #24
 8010bbc:	189b      	adds	r3, r3, r2
 8010bbe:	19db      	adds	r3, r3, r7
 8010bc0:	2204      	movs	r2, #4
 8010bc2:	701a      	strb	r2, [r3, #0]
 8010bc4:	e013      	b.n	8010bee <UART_SetConfig+0x22a>
 8010bc6:	231b      	movs	r3, #27
 8010bc8:	2218      	movs	r2, #24
 8010bca:	189b      	adds	r3, r3, r2
 8010bcc:	19db      	adds	r3, r3, r7
 8010bce:	2208      	movs	r2, #8
 8010bd0:	701a      	strb	r2, [r3, #0]
 8010bd2:	e00c      	b.n	8010bee <UART_SetConfig+0x22a>
 8010bd4:	231b      	movs	r3, #27
 8010bd6:	2218      	movs	r2, #24
 8010bd8:	189b      	adds	r3, r3, r2
 8010bda:	19db      	adds	r3, r3, r7
 8010bdc:	2210      	movs	r2, #16
 8010bde:	701a      	strb	r2, [r3, #0]
 8010be0:	e005      	b.n	8010bee <UART_SetConfig+0x22a>
 8010be2:	231b      	movs	r3, #27
 8010be4:	2218      	movs	r2, #24
 8010be6:	189b      	adds	r3, r3, r2
 8010be8:	19db      	adds	r3, r3, r7
 8010bea:	2210      	movs	r2, #16
 8010bec:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010bee:	69fb      	ldr	r3, [r7, #28]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	4a46      	ldr	r2, [pc, #280]	@ (8010d0c <UART_SetConfig+0x348>)
 8010bf4:	4293      	cmp	r3, r2
 8010bf6:	d000      	beq.n	8010bfa <UART_SetConfig+0x236>
 8010bf8:	e09a      	b.n	8010d30 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010bfa:	231b      	movs	r3, #27
 8010bfc:	2218      	movs	r2, #24
 8010bfe:	189b      	adds	r3, r3, r2
 8010c00:	19db      	adds	r3, r3, r7
 8010c02:	781b      	ldrb	r3, [r3, #0]
 8010c04:	2b08      	cmp	r3, #8
 8010c06:	d01d      	beq.n	8010c44 <UART_SetConfig+0x280>
 8010c08:	dc20      	bgt.n	8010c4c <UART_SetConfig+0x288>
 8010c0a:	2b04      	cmp	r3, #4
 8010c0c:	d015      	beq.n	8010c3a <UART_SetConfig+0x276>
 8010c0e:	dc1d      	bgt.n	8010c4c <UART_SetConfig+0x288>
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d002      	beq.n	8010c1a <UART_SetConfig+0x256>
 8010c14:	2b02      	cmp	r3, #2
 8010c16:	d005      	beq.n	8010c24 <UART_SetConfig+0x260>
 8010c18:	e018      	b.n	8010c4c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010c1a:	f7fe fc51 	bl	800f4c0 <HAL_RCC_GetPCLK1Freq>
 8010c1e:	0003      	movs	r3, r0
 8010c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010c22:	e01c      	b.n	8010c5e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010c24:	4b3c      	ldr	r3, [pc, #240]	@ (8010d18 <UART_SetConfig+0x354>)
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	2210      	movs	r2, #16
 8010c2a:	4013      	ands	r3, r2
 8010c2c:	d002      	beq.n	8010c34 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8010c2e:	4b3e      	ldr	r3, [pc, #248]	@ (8010d28 <UART_SetConfig+0x364>)
 8010c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010c32:	e014      	b.n	8010c5e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8010c34:	4b3d      	ldr	r3, [pc, #244]	@ (8010d2c <UART_SetConfig+0x368>)
 8010c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010c38:	e011      	b.n	8010c5e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010c3a:	f7fe fb91 	bl	800f360 <HAL_RCC_GetSysClockFreq>
 8010c3e:	0003      	movs	r3, r0
 8010c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010c42:	e00c      	b.n	8010c5e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c44:	2380      	movs	r3, #128	@ 0x80
 8010c46:	021b      	lsls	r3, r3, #8
 8010c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010c4a:	e008      	b.n	8010c5e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8010c50:	231a      	movs	r3, #26
 8010c52:	2218      	movs	r2, #24
 8010c54:	189b      	adds	r3, r3, r2
 8010c56:	19db      	adds	r3, r3, r7
 8010c58:	2201      	movs	r2, #1
 8010c5a:	701a      	strb	r2, [r3, #0]
        break;
 8010c5c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d100      	bne.n	8010c66 <UART_SetConfig+0x2a2>
 8010c64:	e133      	b.n	8010ece <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8010c66:	69fb      	ldr	r3, [r7, #28]
 8010c68:	685a      	ldr	r2, [r3, #4]
 8010c6a:	0013      	movs	r3, r2
 8010c6c:	005b      	lsls	r3, r3, #1
 8010c6e:	189b      	adds	r3, r3, r2
 8010c70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010c72:	429a      	cmp	r2, r3
 8010c74:	d305      	bcc.n	8010c82 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8010c76:	69fb      	ldr	r3, [r7, #28]
 8010c78:	685b      	ldr	r3, [r3, #4]
 8010c7a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8010c7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010c7e:	429a      	cmp	r2, r3
 8010c80:	d906      	bls.n	8010c90 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8010c82:	231a      	movs	r3, #26
 8010c84:	2218      	movs	r2, #24
 8010c86:	189b      	adds	r3, r3, r2
 8010c88:	19db      	adds	r3, r3, r7
 8010c8a:	2201      	movs	r2, #1
 8010c8c:	701a      	strb	r2, [r3, #0]
 8010c8e:	e11e      	b.n	8010ece <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8010c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c92:	613b      	str	r3, [r7, #16]
 8010c94:	2300      	movs	r3, #0
 8010c96:	617b      	str	r3, [r7, #20]
 8010c98:	6939      	ldr	r1, [r7, #16]
 8010c9a:	697a      	ldr	r2, [r7, #20]
 8010c9c:	000b      	movs	r3, r1
 8010c9e:	0e1b      	lsrs	r3, r3, #24
 8010ca0:	0010      	movs	r0, r2
 8010ca2:	0205      	lsls	r5, r0, #8
 8010ca4:	431d      	orrs	r5, r3
 8010ca6:	000b      	movs	r3, r1
 8010ca8:	021c      	lsls	r4, r3, #8
 8010caa:	69fb      	ldr	r3, [r7, #28]
 8010cac:	685b      	ldr	r3, [r3, #4]
 8010cae:	085b      	lsrs	r3, r3, #1
 8010cb0:	60bb      	str	r3, [r7, #8]
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	60fb      	str	r3, [r7, #12]
 8010cb6:	68b8      	ldr	r0, [r7, #8]
 8010cb8:	68f9      	ldr	r1, [r7, #12]
 8010cba:	1900      	adds	r0, r0, r4
 8010cbc:	4169      	adcs	r1, r5
 8010cbe:	69fb      	ldr	r3, [r7, #28]
 8010cc0:	685b      	ldr	r3, [r3, #4]
 8010cc2:	603b      	str	r3, [r7, #0]
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	607b      	str	r3, [r7, #4]
 8010cc8:	683a      	ldr	r2, [r7, #0]
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f7ef fc26 	bl	800051c <__aeabi_uldivmod>
 8010cd0:	0002      	movs	r2, r0
 8010cd2:	000b      	movs	r3, r1
 8010cd4:	0013      	movs	r3, r2
 8010cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010cd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010cda:	23c0      	movs	r3, #192	@ 0xc0
 8010cdc:	009b      	lsls	r3, r3, #2
 8010cde:	429a      	cmp	r2, r3
 8010ce0:	d309      	bcc.n	8010cf6 <UART_SetConfig+0x332>
 8010ce2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010ce4:	2380      	movs	r3, #128	@ 0x80
 8010ce6:	035b      	lsls	r3, r3, #13
 8010ce8:	429a      	cmp	r2, r3
 8010cea:	d204      	bcs.n	8010cf6 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8010cec:	69fb      	ldr	r3, [r7, #28]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010cf2:	60da      	str	r2, [r3, #12]
 8010cf4:	e0eb      	b.n	8010ece <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8010cf6:	231a      	movs	r3, #26
 8010cf8:	2218      	movs	r2, #24
 8010cfa:	189b      	adds	r3, r3, r2
 8010cfc:	19db      	adds	r3, r3, r7
 8010cfe:	2201      	movs	r2, #1
 8010d00:	701a      	strb	r2, [r3, #0]
 8010d02:	e0e4      	b.n	8010ece <UART_SetConfig+0x50a>
 8010d04:	efff69f3 	.word	0xefff69f3
 8010d08:	ffffcfff 	.word	0xffffcfff
 8010d0c:	40004800 	.word	0x40004800
 8010d10:	fffff4ff 	.word	0xfffff4ff
 8010d14:	40013800 	.word	0x40013800
 8010d18:	40021000 	.word	0x40021000
 8010d1c:	40004400 	.word	0x40004400
 8010d20:	40004c00 	.word	0x40004c00
 8010d24:	40005000 	.word	0x40005000
 8010d28:	003d0900 	.word	0x003d0900
 8010d2c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010d30:	69fb      	ldr	r3, [r7, #28]
 8010d32:	69da      	ldr	r2, [r3, #28]
 8010d34:	2380      	movs	r3, #128	@ 0x80
 8010d36:	021b      	lsls	r3, r3, #8
 8010d38:	429a      	cmp	r2, r3
 8010d3a:	d000      	beq.n	8010d3e <UART_SetConfig+0x37a>
 8010d3c:	e070      	b.n	8010e20 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8010d3e:	231b      	movs	r3, #27
 8010d40:	2218      	movs	r2, #24
 8010d42:	189b      	adds	r3, r3, r2
 8010d44:	19db      	adds	r3, r3, r7
 8010d46:	781b      	ldrb	r3, [r3, #0]
 8010d48:	2b08      	cmp	r3, #8
 8010d4a:	d822      	bhi.n	8010d92 <UART_SetConfig+0x3ce>
 8010d4c:	009a      	lsls	r2, r3, #2
 8010d4e:	4b67      	ldr	r3, [pc, #412]	@ (8010eec <UART_SetConfig+0x528>)
 8010d50:	18d3      	adds	r3, r2, r3
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010d56:	f7fe fbb3 	bl	800f4c0 <HAL_RCC_GetPCLK1Freq>
 8010d5a:	0003      	movs	r3, r0
 8010d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010d5e:	e021      	b.n	8010da4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010d60:	f7fe fbc4 	bl	800f4ec <HAL_RCC_GetPCLK2Freq>
 8010d64:	0003      	movs	r3, r0
 8010d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010d68:	e01c      	b.n	8010da4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010d6a:	4b61      	ldr	r3, [pc, #388]	@ (8010ef0 <UART_SetConfig+0x52c>)
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	2210      	movs	r2, #16
 8010d70:	4013      	ands	r3, r2
 8010d72:	d002      	beq.n	8010d7a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8010d74:	4b5f      	ldr	r3, [pc, #380]	@ (8010ef4 <UART_SetConfig+0x530>)
 8010d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010d78:	e014      	b.n	8010da4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8010d7a:	4b5f      	ldr	r3, [pc, #380]	@ (8010ef8 <UART_SetConfig+0x534>)
 8010d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010d7e:	e011      	b.n	8010da4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010d80:	f7fe faee 	bl	800f360 <HAL_RCC_GetSysClockFreq>
 8010d84:	0003      	movs	r3, r0
 8010d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010d88:	e00c      	b.n	8010da4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010d8a:	2380      	movs	r3, #128	@ 0x80
 8010d8c:	021b      	lsls	r3, r3, #8
 8010d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010d90:	e008      	b.n	8010da4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8010d92:	2300      	movs	r3, #0
 8010d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8010d96:	231a      	movs	r3, #26
 8010d98:	2218      	movs	r2, #24
 8010d9a:	189b      	adds	r3, r3, r2
 8010d9c:	19db      	adds	r3, r3, r7
 8010d9e:	2201      	movs	r2, #1
 8010da0:	701a      	strb	r2, [r3, #0]
        break;
 8010da2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d100      	bne.n	8010dac <UART_SetConfig+0x3e8>
 8010daa:	e090      	b.n	8010ece <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dae:	005a      	lsls	r2, r3, #1
 8010db0:	69fb      	ldr	r3, [r7, #28]
 8010db2:	685b      	ldr	r3, [r3, #4]
 8010db4:	085b      	lsrs	r3, r3, #1
 8010db6:	18d2      	adds	r2, r2, r3
 8010db8:	69fb      	ldr	r3, [r7, #28]
 8010dba:	685b      	ldr	r3, [r3, #4]
 8010dbc:	0019      	movs	r1, r3
 8010dbe:	0010      	movs	r0, r2
 8010dc0:	f7ef f9be 	bl	8000140 <__udivsi3>
 8010dc4:	0003      	movs	r3, r0
 8010dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dca:	2b0f      	cmp	r3, #15
 8010dcc:	d921      	bls.n	8010e12 <UART_SetConfig+0x44e>
 8010dce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010dd0:	2380      	movs	r3, #128	@ 0x80
 8010dd2:	025b      	lsls	r3, r3, #9
 8010dd4:	429a      	cmp	r2, r3
 8010dd6:	d21c      	bcs.n	8010e12 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dda:	b29a      	uxth	r2, r3
 8010ddc:	200e      	movs	r0, #14
 8010dde:	2418      	movs	r4, #24
 8010de0:	1903      	adds	r3, r0, r4
 8010de2:	19db      	adds	r3, r3, r7
 8010de4:	210f      	movs	r1, #15
 8010de6:	438a      	bics	r2, r1
 8010de8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dec:	085b      	lsrs	r3, r3, #1
 8010dee:	b29b      	uxth	r3, r3
 8010df0:	2207      	movs	r2, #7
 8010df2:	4013      	ands	r3, r2
 8010df4:	b299      	uxth	r1, r3
 8010df6:	1903      	adds	r3, r0, r4
 8010df8:	19db      	adds	r3, r3, r7
 8010dfa:	1902      	adds	r2, r0, r4
 8010dfc:	19d2      	adds	r2, r2, r7
 8010dfe:	8812      	ldrh	r2, [r2, #0]
 8010e00:	430a      	orrs	r2, r1
 8010e02:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8010e04:	69fb      	ldr	r3, [r7, #28]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	1902      	adds	r2, r0, r4
 8010e0a:	19d2      	adds	r2, r2, r7
 8010e0c:	8812      	ldrh	r2, [r2, #0]
 8010e0e:	60da      	str	r2, [r3, #12]
 8010e10:	e05d      	b.n	8010ece <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8010e12:	231a      	movs	r3, #26
 8010e14:	2218      	movs	r2, #24
 8010e16:	189b      	adds	r3, r3, r2
 8010e18:	19db      	adds	r3, r3, r7
 8010e1a:	2201      	movs	r2, #1
 8010e1c:	701a      	strb	r2, [r3, #0]
 8010e1e:	e056      	b.n	8010ece <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010e20:	231b      	movs	r3, #27
 8010e22:	2218      	movs	r2, #24
 8010e24:	189b      	adds	r3, r3, r2
 8010e26:	19db      	adds	r3, r3, r7
 8010e28:	781b      	ldrb	r3, [r3, #0]
 8010e2a:	2b08      	cmp	r3, #8
 8010e2c:	d822      	bhi.n	8010e74 <UART_SetConfig+0x4b0>
 8010e2e:	009a      	lsls	r2, r3, #2
 8010e30:	4b32      	ldr	r3, [pc, #200]	@ (8010efc <UART_SetConfig+0x538>)
 8010e32:	18d3      	adds	r3, r2, r3
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010e38:	f7fe fb42 	bl	800f4c0 <HAL_RCC_GetPCLK1Freq>
 8010e3c:	0003      	movs	r3, r0
 8010e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010e40:	e021      	b.n	8010e86 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010e42:	f7fe fb53 	bl	800f4ec <HAL_RCC_GetPCLK2Freq>
 8010e46:	0003      	movs	r3, r0
 8010e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010e4a:	e01c      	b.n	8010e86 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010e4c:	4b28      	ldr	r3, [pc, #160]	@ (8010ef0 <UART_SetConfig+0x52c>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	2210      	movs	r2, #16
 8010e52:	4013      	ands	r3, r2
 8010e54:	d002      	beq.n	8010e5c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8010e56:	4b27      	ldr	r3, [pc, #156]	@ (8010ef4 <UART_SetConfig+0x530>)
 8010e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010e5a:	e014      	b.n	8010e86 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8010e5c:	4b26      	ldr	r3, [pc, #152]	@ (8010ef8 <UART_SetConfig+0x534>)
 8010e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010e60:	e011      	b.n	8010e86 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010e62:	f7fe fa7d 	bl	800f360 <HAL_RCC_GetSysClockFreq>
 8010e66:	0003      	movs	r3, r0
 8010e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010e6a:	e00c      	b.n	8010e86 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010e6c:	2380      	movs	r3, #128	@ 0x80
 8010e6e:	021b      	lsls	r3, r3, #8
 8010e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010e72:	e008      	b.n	8010e86 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8010e74:	2300      	movs	r3, #0
 8010e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8010e78:	231a      	movs	r3, #26
 8010e7a:	2218      	movs	r2, #24
 8010e7c:	189b      	adds	r3, r3, r2
 8010e7e:	19db      	adds	r3, r3, r7
 8010e80:	2201      	movs	r2, #1
 8010e82:	701a      	strb	r2, [r3, #0]
        break;
 8010e84:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8010e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d020      	beq.n	8010ece <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010e8c:	69fb      	ldr	r3, [r7, #28]
 8010e8e:	685b      	ldr	r3, [r3, #4]
 8010e90:	085a      	lsrs	r2, r3, #1
 8010e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e94:	18d2      	adds	r2, r2, r3
 8010e96:	69fb      	ldr	r3, [r7, #28]
 8010e98:	685b      	ldr	r3, [r3, #4]
 8010e9a:	0019      	movs	r1, r3
 8010e9c:	0010      	movs	r0, r2
 8010e9e:	f7ef f94f 	bl	8000140 <__udivsi3>
 8010ea2:	0003      	movs	r3, r0
 8010ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ea8:	2b0f      	cmp	r3, #15
 8010eaa:	d90a      	bls.n	8010ec2 <UART_SetConfig+0x4fe>
 8010eac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010eae:	2380      	movs	r3, #128	@ 0x80
 8010eb0:	025b      	lsls	r3, r3, #9
 8010eb2:	429a      	cmp	r2, r3
 8010eb4:	d205      	bcs.n	8010ec2 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010eb8:	b29a      	uxth	r2, r3
 8010eba:	69fb      	ldr	r3, [r7, #28]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	60da      	str	r2, [r3, #12]
 8010ec0:	e005      	b.n	8010ece <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8010ec2:	231a      	movs	r3, #26
 8010ec4:	2218      	movs	r2, #24
 8010ec6:	189b      	adds	r3, r3, r2
 8010ec8:	19db      	adds	r3, r3, r7
 8010eca:	2201      	movs	r2, #1
 8010ecc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010ece:	69fb      	ldr	r3, [r7, #28]
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8010ed4:	69fb      	ldr	r3, [r7, #28]
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8010eda:	231a      	movs	r3, #26
 8010edc:	2218      	movs	r2, #24
 8010ede:	189b      	adds	r3, r3, r2
 8010ee0:	19db      	adds	r3, r3, r7
 8010ee2:	781b      	ldrb	r3, [r3, #0]
}
 8010ee4:	0018      	movs	r0, r3
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	b00e      	add	sp, #56	@ 0x38
 8010eea:	bdb0      	pop	{r4, r5, r7, pc}
 8010eec:	0801a358 	.word	0x0801a358
 8010ef0:	40021000 	.word	0x40021000
 8010ef4:	003d0900 	.word	0x003d0900
 8010ef8:	00f42400 	.word	0x00f42400
 8010efc:	0801a37c 	.word	0x0801a37c

08010f00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b082      	sub	sp, #8
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f0c:	2201      	movs	r2, #1
 8010f0e:	4013      	ands	r3, r2
 8010f10:	d00b      	beq.n	8010f2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	685b      	ldr	r3, [r3, #4]
 8010f18:	4a4a      	ldr	r2, [pc, #296]	@ (8011044 <UART_AdvFeatureConfig+0x144>)
 8010f1a:	4013      	ands	r3, r2
 8010f1c:	0019      	movs	r1, r3
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	430a      	orrs	r2, r1
 8010f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f2e:	2202      	movs	r2, #2
 8010f30:	4013      	ands	r3, r2
 8010f32:	d00b      	beq.n	8010f4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	685b      	ldr	r3, [r3, #4]
 8010f3a:	4a43      	ldr	r2, [pc, #268]	@ (8011048 <UART_AdvFeatureConfig+0x148>)
 8010f3c:	4013      	ands	r3, r2
 8010f3e:	0019      	movs	r1, r3
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	430a      	orrs	r2, r1
 8010f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f50:	2204      	movs	r2, #4
 8010f52:	4013      	ands	r3, r2
 8010f54:	d00b      	beq.n	8010f6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	685b      	ldr	r3, [r3, #4]
 8010f5c:	4a3b      	ldr	r2, [pc, #236]	@ (801104c <UART_AdvFeatureConfig+0x14c>)
 8010f5e:	4013      	ands	r3, r2
 8010f60:	0019      	movs	r1, r3
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	430a      	orrs	r2, r1
 8010f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f72:	2208      	movs	r2, #8
 8010f74:	4013      	ands	r3, r2
 8010f76:	d00b      	beq.n	8010f90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	685b      	ldr	r3, [r3, #4]
 8010f7e:	4a34      	ldr	r2, [pc, #208]	@ (8011050 <UART_AdvFeatureConfig+0x150>)
 8010f80:	4013      	ands	r3, r2
 8010f82:	0019      	movs	r1, r3
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	430a      	orrs	r2, r1
 8010f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f94:	2210      	movs	r2, #16
 8010f96:	4013      	ands	r3, r2
 8010f98:	d00b      	beq.n	8010fb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	689b      	ldr	r3, [r3, #8]
 8010fa0:	4a2c      	ldr	r2, [pc, #176]	@ (8011054 <UART_AdvFeatureConfig+0x154>)
 8010fa2:	4013      	ands	r3, r2
 8010fa4:	0019      	movs	r1, r3
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	430a      	orrs	r2, r1
 8010fb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fb6:	2220      	movs	r2, #32
 8010fb8:	4013      	ands	r3, r2
 8010fba:	d00b      	beq.n	8010fd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	689b      	ldr	r3, [r3, #8]
 8010fc2:	4a25      	ldr	r2, [pc, #148]	@ (8011058 <UART_AdvFeatureConfig+0x158>)
 8010fc4:	4013      	ands	r3, r2
 8010fc6:	0019      	movs	r1, r3
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	430a      	orrs	r2, r1
 8010fd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fd8:	2240      	movs	r2, #64	@ 0x40
 8010fda:	4013      	ands	r3, r2
 8010fdc:	d01d      	beq.n	801101a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	685b      	ldr	r3, [r3, #4]
 8010fe4:	4a1d      	ldr	r2, [pc, #116]	@ (801105c <UART_AdvFeatureConfig+0x15c>)
 8010fe6:	4013      	ands	r3, r2
 8010fe8:	0019      	movs	r1, r3
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	430a      	orrs	r2, r1
 8010ff4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010ffa:	2380      	movs	r3, #128	@ 0x80
 8010ffc:	035b      	lsls	r3, r3, #13
 8010ffe:	429a      	cmp	r2, r3
 8011000:	d10b      	bne.n	801101a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	685b      	ldr	r3, [r3, #4]
 8011008:	4a15      	ldr	r2, [pc, #84]	@ (8011060 <UART_AdvFeatureConfig+0x160>)
 801100a:	4013      	ands	r3, r2
 801100c:	0019      	movs	r1, r3
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	430a      	orrs	r2, r1
 8011018:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801101e:	2280      	movs	r2, #128	@ 0x80
 8011020:	4013      	ands	r3, r2
 8011022:	d00b      	beq.n	801103c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	685b      	ldr	r3, [r3, #4]
 801102a:	4a0e      	ldr	r2, [pc, #56]	@ (8011064 <UART_AdvFeatureConfig+0x164>)
 801102c:	4013      	ands	r3, r2
 801102e:	0019      	movs	r1, r3
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	430a      	orrs	r2, r1
 801103a:	605a      	str	r2, [r3, #4]
  }
}
 801103c:	46c0      	nop			@ (mov r8, r8)
 801103e:	46bd      	mov	sp, r7
 8011040:	b002      	add	sp, #8
 8011042:	bd80      	pop	{r7, pc}
 8011044:	fffdffff 	.word	0xfffdffff
 8011048:	fffeffff 	.word	0xfffeffff
 801104c:	fffbffff 	.word	0xfffbffff
 8011050:	ffff7fff 	.word	0xffff7fff
 8011054:	ffffefff 	.word	0xffffefff
 8011058:	ffffdfff 	.word	0xffffdfff
 801105c:	ffefffff 	.word	0xffefffff
 8011060:	ff9fffff 	.word	0xff9fffff
 8011064:	fff7ffff 	.word	0xfff7ffff

08011068 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b092      	sub	sp, #72	@ 0x48
 801106c:	af02      	add	r7, sp, #8
 801106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	2284      	movs	r2, #132	@ 0x84
 8011074:	2100      	movs	r1, #0
 8011076:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011078:	f7f8 f8f2 	bl	8009260 <HAL_GetTick>
 801107c:	0003      	movs	r3, r0
 801107e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	2208      	movs	r2, #8
 8011088:	4013      	ands	r3, r2
 801108a:	2b08      	cmp	r3, #8
 801108c:	d12c      	bne.n	80110e8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801108e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011090:	2280      	movs	r2, #128	@ 0x80
 8011092:	0391      	lsls	r1, r2, #14
 8011094:	6878      	ldr	r0, [r7, #4]
 8011096:	4a46      	ldr	r2, [pc, #280]	@ (80111b0 <UART_CheckIdleState+0x148>)
 8011098:	9200      	str	r2, [sp, #0]
 801109a:	2200      	movs	r2, #0
 801109c:	f000 f88c 	bl	80111b8 <UART_WaitOnFlagUntilTimeout>
 80110a0:	1e03      	subs	r3, r0, #0
 80110a2:	d021      	beq.n	80110e8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80110a4:	f3ef 8310 	mrs	r3, PRIMASK
 80110a8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80110aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80110ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80110ae:	2301      	movs	r3, #1
 80110b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80110b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110b4:	f383 8810 	msr	PRIMASK, r3
}
 80110b8:	46c0      	nop			@ (mov r8, r8)
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	681a      	ldr	r2, [r3, #0]
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	2180      	movs	r1, #128	@ 0x80
 80110c6:	438a      	bics	r2, r1
 80110c8:	601a      	str	r2, [r3, #0]
 80110ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80110ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110d0:	f383 8810 	msr	PRIMASK, r3
}
 80110d4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	2220      	movs	r2, #32
 80110da:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	2278      	movs	r2, #120	@ 0x78
 80110e0:	2100      	movs	r1, #0
 80110e2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80110e4:	2303      	movs	r3, #3
 80110e6:	e05f      	b.n	80111a8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	2204      	movs	r2, #4
 80110f0:	4013      	ands	r3, r2
 80110f2:	2b04      	cmp	r3, #4
 80110f4:	d146      	bne.n	8011184 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80110f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110f8:	2280      	movs	r2, #128	@ 0x80
 80110fa:	03d1      	lsls	r1, r2, #15
 80110fc:	6878      	ldr	r0, [r7, #4]
 80110fe:	4a2c      	ldr	r2, [pc, #176]	@ (80111b0 <UART_CheckIdleState+0x148>)
 8011100:	9200      	str	r2, [sp, #0]
 8011102:	2200      	movs	r2, #0
 8011104:	f000 f858 	bl	80111b8 <UART_WaitOnFlagUntilTimeout>
 8011108:	1e03      	subs	r3, r0, #0
 801110a:	d03b      	beq.n	8011184 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801110c:	f3ef 8310 	mrs	r3, PRIMASK
 8011110:	60fb      	str	r3, [r7, #12]
  return(result);
 8011112:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011114:	637b      	str	r3, [r7, #52]	@ 0x34
 8011116:	2301      	movs	r3, #1
 8011118:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801111a:	693b      	ldr	r3, [r7, #16]
 801111c:	f383 8810 	msr	PRIMASK, r3
}
 8011120:	46c0      	nop			@ (mov r8, r8)
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	681a      	ldr	r2, [r3, #0]
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	4921      	ldr	r1, [pc, #132]	@ (80111b4 <UART_CheckIdleState+0x14c>)
 801112e:	400a      	ands	r2, r1
 8011130:	601a      	str	r2, [r3, #0]
 8011132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011134:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011136:	697b      	ldr	r3, [r7, #20]
 8011138:	f383 8810 	msr	PRIMASK, r3
}
 801113c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801113e:	f3ef 8310 	mrs	r3, PRIMASK
 8011142:	61bb      	str	r3, [r7, #24]
  return(result);
 8011144:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011146:	633b      	str	r3, [r7, #48]	@ 0x30
 8011148:	2301      	movs	r3, #1
 801114a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801114c:	69fb      	ldr	r3, [r7, #28]
 801114e:	f383 8810 	msr	PRIMASK, r3
}
 8011152:	46c0      	nop			@ (mov r8, r8)
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	689a      	ldr	r2, [r3, #8]
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	2101      	movs	r1, #1
 8011160:	438a      	bics	r2, r1
 8011162:	609a      	str	r2, [r3, #8]
 8011164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011166:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011168:	6a3b      	ldr	r3, [r7, #32]
 801116a:	f383 8810 	msr	PRIMASK, r3
}
 801116e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	2280      	movs	r2, #128	@ 0x80
 8011174:	2120      	movs	r1, #32
 8011176:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	2278      	movs	r2, #120	@ 0x78
 801117c:	2100      	movs	r1, #0
 801117e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011180:	2303      	movs	r3, #3
 8011182:	e011      	b.n	80111a8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2220      	movs	r2, #32
 8011188:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	2280      	movs	r2, #128	@ 0x80
 801118e:	2120      	movs	r1, #32
 8011190:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	2200      	movs	r2, #0
 8011196:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	2200      	movs	r2, #0
 801119c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	2278      	movs	r2, #120	@ 0x78
 80111a2:	2100      	movs	r1, #0
 80111a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80111a6:	2300      	movs	r3, #0
}
 80111a8:	0018      	movs	r0, r3
 80111aa:	46bd      	mov	sp, r7
 80111ac:	b010      	add	sp, #64	@ 0x40
 80111ae:	bd80      	pop	{r7, pc}
 80111b0:	01ffffff 	.word	0x01ffffff
 80111b4:	fffffedf 	.word	0xfffffedf

080111b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b084      	sub	sp, #16
 80111bc:	af00      	add	r7, sp, #0
 80111be:	60f8      	str	r0, [r7, #12]
 80111c0:	60b9      	str	r1, [r7, #8]
 80111c2:	603b      	str	r3, [r7, #0]
 80111c4:	1dfb      	adds	r3, r7, #7
 80111c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80111c8:	e04b      	b.n	8011262 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80111ca:	69bb      	ldr	r3, [r7, #24]
 80111cc:	3301      	adds	r3, #1
 80111ce:	d048      	beq.n	8011262 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80111d0:	f7f8 f846 	bl	8009260 <HAL_GetTick>
 80111d4:	0002      	movs	r2, r0
 80111d6:	683b      	ldr	r3, [r7, #0]
 80111d8:	1ad3      	subs	r3, r2, r3
 80111da:	69ba      	ldr	r2, [r7, #24]
 80111dc:	429a      	cmp	r2, r3
 80111de:	d302      	bcc.n	80111e6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80111e0:	69bb      	ldr	r3, [r7, #24]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d101      	bne.n	80111ea <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80111e6:	2303      	movs	r3, #3
 80111e8:	e04b      	b.n	8011282 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	2204      	movs	r2, #4
 80111f2:	4013      	ands	r3, r2
 80111f4:	d035      	beq.n	8011262 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	69db      	ldr	r3, [r3, #28]
 80111fc:	2208      	movs	r2, #8
 80111fe:	4013      	ands	r3, r2
 8011200:	2b08      	cmp	r3, #8
 8011202:	d111      	bne.n	8011228 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	2208      	movs	r2, #8
 801120a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	0018      	movs	r0, r3
 8011210:	f000 f900 	bl	8011414 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	2284      	movs	r2, #132	@ 0x84
 8011218:	2108      	movs	r1, #8
 801121a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	2278      	movs	r2, #120	@ 0x78
 8011220:	2100      	movs	r1, #0
 8011222:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8011224:	2301      	movs	r3, #1
 8011226:	e02c      	b.n	8011282 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	69da      	ldr	r2, [r3, #28]
 801122e:	2380      	movs	r3, #128	@ 0x80
 8011230:	011b      	lsls	r3, r3, #4
 8011232:	401a      	ands	r2, r3
 8011234:	2380      	movs	r3, #128	@ 0x80
 8011236:	011b      	lsls	r3, r3, #4
 8011238:	429a      	cmp	r2, r3
 801123a:	d112      	bne.n	8011262 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	2280      	movs	r2, #128	@ 0x80
 8011242:	0112      	lsls	r2, r2, #4
 8011244:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	0018      	movs	r0, r3
 801124a:	f000 f8e3 	bl	8011414 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	2284      	movs	r2, #132	@ 0x84
 8011252:	2120      	movs	r1, #32
 8011254:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	2278      	movs	r2, #120	@ 0x78
 801125a:	2100      	movs	r1, #0
 801125c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 801125e:	2303      	movs	r3, #3
 8011260:	e00f      	b.n	8011282 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	69db      	ldr	r3, [r3, #28]
 8011268:	68ba      	ldr	r2, [r7, #8]
 801126a:	4013      	ands	r3, r2
 801126c:	68ba      	ldr	r2, [r7, #8]
 801126e:	1ad3      	subs	r3, r2, r3
 8011270:	425a      	negs	r2, r3
 8011272:	4153      	adcs	r3, r2
 8011274:	b2db      	uxtb	r3, r3
 8011276:	001a      	movs	r2, r3
 8011278:	1dfb      	adds	r3, r7, #7
 801127a:	781b      	ldrb	r3, [r3, #0]
 801127c:	429a      	cmp	r2, r3
 801127e:	d0a4      	beq.n	80111ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011280:	2300      	movs	r3, #0
}
 8011282:	0018      	movs	r0, r3
 8011284:	46bd      	mov	sp, r7
 8011286:	b004      	add	sp, #16
 8011288:	bd80      	pop	{r7, pc}
	...

0801128c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b090      	sub	sp, #64	@ 0x40
 8011290:	af00      	add	r7, sp, #0
 8011292:	60f8      	str	r0, [r7, #12]
 8011294:	60b9      	str	r1, [r7, #8]
 8011296:	1dbb      	adds	r3, r7, #6
 8011298:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	68ba      	ldr	r2, [r7, #8]
 801129e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	1dba      	adds	r2, r7, #6
 80112a4:	2158      	movs	r1, #88	@ 0x58
 80112a6:	8812      	ldrh	r2, [r2, #0]
 80112a8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	2284      	movs	r2, #132	@ 0x84
 80112ae:	2100      	movs	r1, #0
 80112b0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	2280      	movs	r2, #128	@ 0x80
 80112b6:	2122      	movs	r1, #34	@ 0x22
 80112b8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d028      	beq.n	8011314 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80112c6:	4a3e      	ldr	r2, [pc, #248]	@ (80113c0 <UART_Start_Receive_DMA+0x134>)
 80112c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80112ce:	4a3d      	ldr	r2, [pc, #244]	@ (80113c4 <UART_Start_Receive_DMA+0x138>)
 80112d0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80112d6:	4a3c      	ldr	r2, [pc, #240]	@ (80113c8 <UART_Start_Receive_DMA+0x13c>)
 80112d8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80112de:	2200      	movs	r2, #0
 80112e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	3324      	adds	r3, #36	@ 0x24
 80112ec:	0019      	movs	r1, r3
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80112f2:	001a      	movs	r2, r3
 80112f4:	1dbb      	adds	r3, r7, #6
 80112f6:	881b      	ldrh	r3, [r3, #0]
 80112f8:	f7f8 fd12 	bl	8009d20 <HAL_DMA_Start_IT>
 80112fc:	1e03      	subs	r3, r0, #0
 80112fe:	d009      	beq.n	8011314 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	2284      	movs	r2, #132	@ 0x84
 8011304:	2110      	movs	r1, #16
 8011306:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	2280      	movs	r2, #128	@ 0x80
 801130c:	2120      	movs	r1, #32
 801130e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8011310:	2301      	movs	r3, #1
 8011312:	e050      	b.n	80113b6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	691b      	ldr	r3, [r3, #16]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d019      	beq.n	8011350 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801131c:	f3ef 8310 	mrs	r3, PRIMASK
 8011320:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8011322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011324:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011326:	2301      	movs	r3, #1
 8011328:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801132a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801132c:	f383 8810 	msr	PRIMASK, r3
}
 8011330:	46c0      	nop			@ (mov r8, r8)
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	681a      	ldr	r2, [r3, #0]
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	2180      	movs	r1, #128	@ 0x80
 801133e:	0049      	lsls	r1, r1, #1
 8011340:	430a      	orrs	r2, r1
 8011342:	601a      	str	r2, [r3, #0]
 8011344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011346:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801134a:	f383 8810 	msr	PRIMASK, r3
}
 801134e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011350:	f3ef 8310 	mrs	r3, PRIMASK
 8011354:	613b      	str	r3, [r7, #16]
  return(result);
 8011356:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011358:	63bb      	str	r3, [r7, #56]	@ 0x38
 801135a:	2301      	movs	r3, #1
 801135c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801135e:	697b      	ldr	r3, [r7, #20]
 8011360:	f383 8810 	msr	PRIMASK, r3
}
 8011364:	46c0      	nop			@ (mov r8, r8)
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	689a      	ldr	r2, [r3, #8]
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	2101      	movs	r1, #1
 8011372:	430a      	orrs	r2, r1
 8011374:	609a      	str	r2, [r3, #8]
 8011376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011378:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801137a:	69bb      	ldr	r3, [r7, #24]
 801137c:	f383 8810 	msr	PRIMASK, r3
}
 8011380:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011382:	f3ef 8310 	mrs	r3, PRIMASK
 8011386:	61fb      	str	r3, [r7, #28]
  return(result);
 8011388:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801138a:	637b      	str	r3, [r7, #52]	@ 0x34
 801138c:	2301      	movs	r3, #1
 801138e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011390:	6a3b      	ldr	r3, [r7, #32]
 8011392:	f383 8810 	msr	PRIMASK, r3
}
 8011396:	46c0      	nop			@ (mov r8, r8)
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	689a      	ldr	r2, [r3, #8]
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	2140      	movs	r1, #64	@ 0x40
 80113a4:	430a      	orrs	r2, r1
 80113a6:	609a      	str	r2, [r3, #8]
 80113a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113aa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80113ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113ae:	f383 8810 	msr	PRIMASK, r3
}
 80113b2:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80113b4:	2300      	movs	r3, #0
}
 80113b6:	0018      	movs	r0, r3
 80113b8:	46bd      	mov	sp, r7
 80113ba:	b010      	add	sp, #64	@ 0x40
 80113bc:	bd80      	pop	{r7, pc}
 80113be:	46c0      	nop			@ (mov r8, r8)
 80113c0:	0801159d 	.word	0x0801159d
 80113c4:	080116d1 	.word	0x080116d1
 80113c8:	08011719 	.word	0x08011719

080113cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b086      	sub	sp, #24
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80113d4:	f3ef 8310 	mrs	r3, PRIMASK
 80113d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80113da:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80113dc:	617b      	str	r3, [r7, #20]
 80113de:	2301      	movs	r3, #1
 80113e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	f383 8810 	msr	PRIMASK, r3
}
 80113e8:	46c0      	nop			@ (mov r8, r8)
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	681a      	ldr	r2, [r3, #0]
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	21c0      	movs	r1, #192	@ 0xc0
 80113f6:	438a      	bics	r2, r1
 80113f8:	601a      	str	r2, [r3, #0]
 80113fa:	697b      	ldr	r3, [r7, #20]
 80113fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80113fe:	693b      	ldr	r3, [r7, #16]
 8011400:	f383 8810 	msr	PRIMASK, r3
}
 8011404:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	2220      	movs	r2, #32
 801140a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 801140c:	46c0      	nop			@ (mov r8, r8)
 801140e:	46bd      	mov	sp, r7
 8011410:	b006      	add	sp, #24
 8011412:	bd80      	pop	{r7, pc}

08011414 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b08e      	sub	sp, #56	@ 0x38
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801141c:	f3ef 8310 	mrs	r3, PRIMASK
 8011420:	617b      	str	r3, [r7, #20]
  return(result);
 8011422:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011424:	637b      	str	r3, [r7, #52]	@ 0x34
 8011426:	2301      	movs	r3, #1
 8011428:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801142a:	69bb      	ldr	r3, [r7, #24]
 801142c:	f383 8810 	msr	PRIMASK, r3
}
 8011430:	46c0      	nop			@ (mov r8, r8)
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	681a      	ldr	r2, [r3, #0]
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	4926      	ldr	r1, [pc, #152]	@ (80114d8 <UART_EndRxTransfer+0xc4>)
 801143e:	400a      	ands	r2, r1
 8011440:	601a      	str	r2, [r3, #0]
 8011442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011444:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011446:	69fb      	ldr	r3, [r7, #28]
 8011448:	f383 8810 	msr	PRIMASK, r3
}
 801144c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801144e:	f3ef 8310 	mrs	r3, PRIMASK
 8011452:	623b      	str	r3, [r7, #32]
  return(result);
 8011454:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011456:	633b      	str	r3, [r7, #48]	@ 0x30
 8011458:	2301      	movs	r3, #1
 801145a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801145c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801145e:	f383 8810 	msr	PRIMASK, r3
}
 8011462:	46c0      	nop			@ (mov r8, r8)
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	689a      	ldr	r2, [r3, #8]
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	2101      	movs	r1, #1
 8011470:	438a      	bics	r2, r1
 8011472:	609a      	str	r2, [r3, #8]
 8011474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011476:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801147a:	f383 8810 	msr	PRIMASK, r3
}
 801147e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011484:	2b01      	cmp	r3, #1
 8011486:	d118      	bne.n	80114ba <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011488:	f3ef 8310 	mrs	r3, PRIMASK
 801148c:	60bb      	str	r3, [r7, #8]
  return(result);
 801148e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011492:	2301      	movs	r3, #1
 8011494:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	f383 8810 	msr	PRIMASK, r3
}
 801149c:	46c0      	nop			@ (mov r8, r8)
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	681a      	ldr	r2, [r3, #0]
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	2110      	movs	r1, #16
 80114aa:	438a      	bics	r2, r1
 80114ac:	601a      	str	r2, [r3, #0]
 80114ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80114b2:	693b      	ldr	r3, [r7, #16]
 80114b4:	f383 8810 	msr	PRIMASK, r3
}
 80114b8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2280      	movs	r2, #128	@ 0x80
 80114be:	2120      	movs	r1, #32
 80114c0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	2200      	movs	r2, #0
 80114c6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	2200      	movs	r2, #0
 80114cc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80114ce:	46c0      	nop			@ (mov r8, r8)
 80114d0:	46bd      	mov	sp, r7
 80114d2:	b00e      	add	sp, #56	@ 0x38
 80114d4:	bd80      	pop	{r7, pc}
 80114d6:	46c0      	nop			@ (mov r8, r8)
 80114d8:	fffffedf 	.word	0xfffffedf

080114dc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b08c      	sub	sp, #48	@ 0x30
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	2220      	movs	r2, #32
 80114f2:	4013      	ands	r3, r2
 80114f4:	d135      	bne.n	8011562 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80114f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114f8:	2252      	movs	r2, #82	@ 0x52
 80114fa:	2100      	movs	r1, #0
 80114fc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80114fe:	f3ef 8310 	mrs	r3, PRIMASK
 8011502:	60fb      	str	r3, [r7, #12]
  return(result);
 8011504:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011506:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011508:	2301      	movs	r3, #1
 801150a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801150c:	693b      	ldr	r3, [r7, #16]
 801150e:	f383 8810 	msr	PRIMASK, r3
}
 8011512:	46c0      	nop			@ (mov r8, r8)
 8011514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	689a      	ldr	r2, [r3, #8]
 801151a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	2180      	movs	r1, #128	@ 0x80
 8011520:	438a      	bics	r2, r1
 8011522:	609a      	str	r2, [r3, #8]
 8011524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011526:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011528:	697b      	ldr	r3, [r7, #20]
 801152a:	f383 8810 	msr	PRIMASK, r3
}
 801152e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011530:	f3ef 8310 	mrs	r3, PRIMASK
 8011534:	61bb      	str	r3, [r7, #24]
  return(result);
 8011536:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011538:	627b      	str	r3, [r7, #36]	@ 0x24
 801153a:	2301      	movs	r3, #1
 801153c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801153e:	69fb      	ldr	r3, [r7, #28]
 8011540:	f383 8810 	msr	PRIMASK, r3
}
 8011544:	46c0      	nop			@ (mov r8, r8)
 8011546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	681a      	ldr	r2, [r3, #0]
 801154c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	2140      	movs	r1, #64	@ 0x40
 8011552:	430a      	orrs	r2, r1
 8011554:	601a      	str	r2, [r3, #0]
 8011556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011558:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801155a:	6a3b      	ldr	r3, [r7, #32]
 801155c:	f383 8810 	msr	PRIMASK, r3
}
 8011560:	e006      	b.n	8011570 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8011562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011564:	228c      	movs	r2, #140	@ 0x8c
 8011566:	589b      	ldr	r3, [r3, r2]
 8011568:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801156a:	0010      	movs	r0, r2
 801156c:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801156e:	46c0      	nop			@ (mov r8, r8)
 8011570:	46c0      	nop			@ (mov r8, r8)
 8011572:	46bd      	mov	sp, r7
 8011574:	b00c      	add	sp, #48	@ 0x30
 8011576:	bd80      	pop	{r7, pc}

08011578 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011578:	b580      	push	{r7, lr}
 801157a:	b084      	sub	sp, #16
 801157c:	af00      	add	r7, sp, #0
 801157e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011584:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	2288      	movs	r2, #136	@ 0x88
 801158a:	589b      	ldr	r3, [r3, r2]
 801158c:	68fa      	ldr	r2, [r7, #12]
 801158e:	0010      	movs	r0, r2
 8011590:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011592:	46c0      	nop			@ (mov r8, r8)
 8011594:	46bd      	mov	sp, r7
 8011596:	b004      	add	sp, #16
 8011598:	bd80      	pop	{r7, pc}
	...

0801159c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	b094      	sub	sp, #80	@ 0x50
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115a8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	2220      	movs	r2, #32
 80115b2:	4013      	ands	r3, r2
 80115b4:	d16f      	bne.n	8011696 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80115b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80115b8:	225a      	movs	r2, #90	@ 0x5a
 80115ba:	2100      	movs	r1, #0
 80115bc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80115be:	f3ef 8310 	mrs	r3, PRIMASK
 80115c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80115c4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80115c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80115c8:	2301      	movs	r3, #1
 80115ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80115cc:	69fb      	ldr	r3, [r7, #28]
 80115ce:	f383 8810 	msr	PRIMASK, r3
}
 80115d2:	46c0      	nop			@ (mov r8, r8)
 80115d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	681a      	ldr	r2, [r3, #0]
 80115da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	493b      	ldr	r1, [pc, #236]	@ (80116cc <UART_DMAReceiveCplt+0x130>)
 80115e0:	400a      	ands	r2, r1
 80115e2:	601a      	str	r2, [r3, #0]
 80115e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80115e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80115e8:	6a3b      	ldr	r3, [r7, #32]
 80115ea:	f383 8810 	msr	PRIMASK, r3
}
 80115ee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80115f0:	f3ef 8310 	mrs	r3, PRIMASK
 80115f4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80115f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80115f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80115fa:	2301      	movs	r3, #1
 80115fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80115fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011600:	f383 8810 	msr	PRIMASK, r3
}
 8011604:	46c0      	nop			@ (mov r8, r8)
 8011606:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	689a      	ldr	r2, [r3, #8]
 801160c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	2101      	movs	r1, #1
 8011612:	438a      	bics	r2, r1
 8011614:	609a      	str	r2, [r3, #8]
 8011616:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011618:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801161a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801161c:	f383 8810 	msr	PRIMASK, r3
}
 8011620:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011622:	f3ef 8310 	mrs	r3, PRIMASK
 8011626:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8011628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801162a:	643b      	str	r3, [r7, #64]	@ 0x40
 801162c:	2301      	movs	r3, #1
 801162e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011632:	f383 8810 	msr	PRIMASK, r3
}
 8011636:	46c0      	nop			@ (mov r8, r8)
 8011638:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	689a      	ldr	r2, [r3, #8]
 801163e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	2140      	movs	r1, #64	@ 0x40
 8011644:	438a      	bics	r2, r1
 8011646:	609a      	str	r2, [r3, #8]
 8011648:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801164a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801164c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801164e:	f383 8810 	msr	PRIMASK, r3
}
 8011652:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011654:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011656:	2280      	movs	r2, #128	@ 0x80
 8011658:	2120      	movs	r1, #32
 801165a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801165c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801165e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011660:	2b01      	cmp	r3, #1
 8011662:	d118      	bne.n	8011696 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011664:	f3ef 8310 	mrs	r3, PRIMASK
 8011668:	60fb      	str	r3, [r7, #12]
  return(result);
 801166a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801166c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801166e:	2301      	movs	r3, #1
 8011670:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011672:	693b      	ldr	r3, [r7, #16]
 8011674:	f383 8810 	msr	PRIMASK, r3
}
 8011678:	46c0      	nop			@ (mov r8, r8)
 801167a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	681a      	ldr	r2, [r3, #0]
 8011680:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	2110      	movs	r1, #16
 8011686:	438a      	bics	r2, r1
 8011688:	601a      	str	r2, [r3, #0]
 801168a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801168c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801168e:	697b      	ldr	r3, [r7, #20]
 8011690:	f383 8810 	msr	PRIMASK, r3
}
 8011694:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011696:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011698:	2200      	movs	r2, #0
 801169a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801169c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801169e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80116a0:	2b01      	cmp	r3, #1
 80116a2:	d109      	bne.n	80116b8 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80116a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116a6:	22ac      	movs	r2, #172	@ 0xac
 80116a8:	589b      	ldr	r3, [r3, r2]
 80116aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80116ac:	2158      	movs	r1, #88	@ 0x58
 80116ae:	5a51      	ldrh	r1, [r2, r1]
 80116b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80116b2:	0010      	movs	r0, r2
 80116b4:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80116b6:	e005      	b.n	80116c4 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 80116b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116ba:	2294      	movs	r2, #148	@ 0x94
 80116bc:	589b      	ldr	r3, [r3, r2]
 80116be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80116c0:	0010      	movs	r0, r2
 80116c2:	4798      	blx	r3
}
 80116c4:	46c0      	nop			@ (mov r8, r8)
 80116c6:	46bd      	mov	sp, r7
 80116c8:	b014      	add	sp, #80	@ 0x50
 80116ca:	bd80      	pop	{r7, pc}
 80116cc:	fffffeff 	.word	0xfffffeff

080116d0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b084      	sub	sp, #16
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116dc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	2201      	movs	r2, #1
 80116e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80116e8:	2b01      	cmp	r3, #1
 80116ea:	d10b      	bne.n	8011704 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	22ac      	movs	r2, #172	@ 0xac
 80116f0:	589b      	ldr	r3, [r3, r2]
 80116f2:	68fa      	ldr	r2, [r7, #12]
 80116f4:	2158      	movs	r1, #88	@ 0x58
 80116f6:	5a52      	ldrh	r2, [r2, r1]
 80116f8:	0852      	lsrs	r2, r2, #1
 80116fa:	b291      	uxth	r1, r2
 80116fc:	68fa      	ldr	r2, [r7, #12]
 80116fe:	0010      	movs	r0, r2
 8011700:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011702:	e005      	b.n	8011710 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	2290      	movs	r2, #144	@ 0x90
 8011708:	589b      	ldr	r3, [r3, r2]
 801170a:	68fa      	ldr	r2, [r7, #12]
 801170c:	0010      	movs	r0, r2
 801170e:	4798      	blx	r3
}
 8011710:	46c0      	nop			@ (mov r8, r8)
 8011712:	46bd      	mov	sp, r7
 8011714:	b004      	add	sp, #16
 8011716:	bd80      	pop	{r7, pc}

08011718 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b086      	sub	sp, #24
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011724:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011726:	697b      	ldr	r3, [r7, #20]
 8011728:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801172a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801172c:	697b      	ldr	r3, [r7, #20]
 801172e:	2280      	movs	r2, #128	@ 0x80
 8011730:	589b      	ldr	r3, [r3, r2]
 8011732:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011734:	697b      	ldr	r3, [r7, #20]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	689b      	ldr	r3, [r3, #8]
 801173a:	2280      	movs	r2, #128	@ 0x80
 801173c:	4013      	ands	r3, r2
 801173e:	2b80      	cmp	r3, #128	@ 0x80
 8011740:	d10a      	bne.n	8011758 <UART_DMAError+0x40>
 8011742:	693b      	ldr	r3, [r7, #16]
 8011744:	2b21      	cmp	r3, #33	@ 0x21
 8011746:	d107      	bne.n	8011758 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011748:	697b      	ldr	r3, [r7, #20]
 801174a:	2252      	movs	r2, #82	@ 0x52
 801174c:	2100      	movs	r1, #0
 801174e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8011750:	697b      	ldr	r3, [r7, #20]
 8011752:	0018      	movs	r0, r3
 8011754:	f7ff fe3a 	bl	80113cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011758:	697b      	ldr	r3, [r7, #20]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	689b      	ldr	r3, [r3, #8]
 801175e:	2240      	movs	r2, #64	@ 0x40
 8011760:	4013      	ands	r3, r2
 8011762:	2b40      	cmp	r3, #64	@ 0x40
 8011764:	d10a      	bne.n	801177c <UART_DMAError+0x64>
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	2b22      	cmp	r3, #34	@ 0x22
 801176a:	d107      	bne.n	801177c <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801176c:	697b      	ldr	r3, [r7, #20]
 801176e:	225a      	movs	r2, #90	@ 0x5a
 8011770:	2100      	movs	r1, #0
 8011772:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8011774:	697b      	ldr	r3, [r7, #20]
 8011776:	0018      	movs	r0, r3
 8011778:	f7ff fe4c 	bl	8011414 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801177c:	697b      	ldr	r3, [r7, #20]
 801177e:	2284      	movs	r2, #132	@ 0x84
 8011780:	589b      	ldr	r3, [r3, r2]
 8011782:	2210      	movs	r2, #16
 8011784:	431a      	orrs	r2, r3
 8011786:	697b      	ldr	r3, [r7, #20]
 8011788:	2184      	movs	r1, #132	@ 0x84
 801178a:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801178c:	697b      	ldr	r3, [r7, #20]
 801178e:	2298      	movs	r2, #152	@ 0x98
 8011790:	589b      	ldr	r3, [r3, r2]
 8011792:	697a      	ldr	r2, [r7, #20]
 8011794:	0010      	movs	r0, r2
 8011796:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011798:	46c0      	nop			@ (mov r8, r8)
 801179a:	46bd      	mov	sp, r7
 801179c:	b006      	add	sp, #24
 801179e:	bd80      	pop	{r7, pc}

080117a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b084      	sub	sp, #16
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80117ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	225a      	movs	r2, #90	@ 0x5a
 80117b2:	2100      	movs	r1, #0
 80117b4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	2252      	movs	r2, #82	@ 0x52
 80117ba:	2100      	movs	r1, #0
 80117bc:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	2298      	movs	r2, #152	@ 0x98
 80117c2:	589b      	ldr	r3, [r3, r2]
 80117c4:	68fa      	ldr	r2, [r7, #12]
 80117c6:	0010      	movs	r0, r2
 80117c8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80117ca:	46c0      	nop			@ (mov r8, r8)
 80117cc:	46bd      	mov	sp, r7
 80117ce:	b004      	add	sp, #16
 80117d0:	bd80      	pop	{r7, pc}

080117d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80117d2:	b580      	push	{r7, lr}
 80117d4:	b086      	sub	sp, #24
 80117d6:	af00      	add	r7, sp, #0
 80117d8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80117da:	f3ef 8310 	mrs	r3, PRIMASK
 80117de:	60bb      	str	r3, [r7, #8]
  return(result);
 80117e0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80117e2:	617b      	str	r3, [r7, #20]
 80117e4:	2301      	movs	r3, #1
 80117e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	f383 8810 	msr	PRIMASK, r3
}
 80117ee:	46c0      	nop			@ (mov r8, r8)
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	681a      	ldr	r2, [r3, #0]
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	2140      	movs	r1, #64	@ 0x40
 80117fc:	438a      	bics	r2, r1
 80117fe:	601a      	str	r2, [r3, #0]
 8011800:	697b      	ldr	r3, [r7, #20]
 8011802:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011804:	693b      	ldr	r3, [r7, #16]
 8011806:	f383 8810 	msr	PRIMASK, r3
}
 801180a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	2220      	movs	r2, #32
 8011810:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	2200      	movs	r2, #0
 8011816:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	228c      	movs	r2, #140	@ 0x8c
 801181c:	589b      	ldr	r3, [r3, r2]
 801181e:	687a      	ldr	r2, [r7, #4]
 8011820:	0010      	movs	r0, r2
 8011822:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011824:	46c0      	nop			@ (mov r8, r8)
 8011826:	46bd      	mov	sp, r7
 8011828:	b006      	add	sp, #24
 801182a:	bd80      	pop	{r7, pc}

0801182c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b082      	sub	sp, #8
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011834:	46c0      	nop			@ (mov r8, r8)
 8011836:	46bd      	mov	sp, r7
 8011838:	b002      	add	sp, #8
 801183a:	bd80      	pop	{r7, pc}

0801183c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b084      	sub	sp, #16
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	2244      	movs	r2, #68	@ 0x44
 8011848:	2100      	movs	r1, #0
 801184a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801184c:	4b05      	ldr	r3, [pc, #20]	@ (8011864 <USB_EnableGlobalInt+0x28>)
 801184e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	b299      	uxth	r1, r3
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	2240      	movs	r2, #64	@ 0x40
 8011858:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801185a:	2300      	movs	r3, #0
}
 801185c:	0018      	movs	r0, r3
 801185e:	46bd      	mov	sp, r7
 8011860:	b004      	add	sp, #16
 8011862:	bd80      	pop	{r7, pc}
 8011864:	0000bf80 	.word	0x0000bf80

08011868 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8011868:	b580      	push	{r7, lr}
 801186a:	b084      	sub	sp, #16
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8011870:	4b09      	ldr	r3, [pc, #36]	@ (8011898 <USB_DisableGlobalInt+0x30>)
 8011872:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2240      	movs	r2, #64	@ 0x40
 8011878:	5a9b      	ldrh	r3, [r3, r2]
 801187a:	b29b      	uxth	r3, r3
 801187c:	68fa      	ldr	r2, [r7, #12]
 801187e:	b292      	uxth	r2, r2
 8011880:	43d2      	mvns	r2, r2
 8011882:	b292      	uxth	r2, r2
 8011884:	4013      	ands	r3, r2
 8011886:	b299      	uxth	r1, r3
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2240      	movs	r2, #64	@ 0x40
 801188c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801188e:	2300      	movs	r3, #0
}
 8011890:	0018      	movs	r0, r3
 8011892:	46bd      	mov	sp, r7
 8011894:	b004      	add	sp, #16
 8011896:	bd80      	pop	{r7, pc}
 8011898:	0000bf80 	.word	0x0000bf80

0801189c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801189c:	b084      	sub	sp, #16
 801189e:	b590      	push	{r4, r7, lr}
 80118a0:	b083      	sub	sp, #12
 80118a2:	af00      	add	r7, sp, #0
 80118a4:	6078      	str	r0, [r7, #4]
 80118a6:	2004      	movs	r0, #4
 80118a8:	2410      	movs	r4, #16
 80118aa:	1900      	adds	r0, r0, r4
 80118ac:	2408      	movs	r4, #8
 80118ae:	46a4      	mov	ip, r4
 80118b0:	44bc      	add	ip, r7
 80118b2:	4460      	add	r0, ip
 80118b4:	6001      	str	r1, [r0, #0]
 80118b6:	6042      	str	r2, [r0, #4]
 80118b8:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	2240      	movs	r2, #64	@ 0x40
 80118be:	2101      	movs	r1, #1
 80118c0:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	2240      	movs	r2, #64	@ 0x40
 80118c6:	2100      	movs	r1, #0
 80118c8:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	2244      	movs	r2, #68	@ 0x44
 80118ce:	2100      	movs	r1, #0
 80118d0:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	2250      	movs	r2, #80	@ 0x50
 80118d6:	2100      	movs	r1, #0
 80118d8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80118da:	2300      	movs	r3, #0
}
 80118dc:	0018      	movs	r0, r3
 80118de:	46bd      	mov	sp, r7
 80118e0:	b003      	add	sp, #12
 80118e2:	bc90      	pop	{r4, r7}
 80118e4:	bc08      	pop	{r3}
 80118e6:	b004      	add	sp, #16
 80118e8:	4718      	bx	r3
	...

080118ec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b09c      	sub	sp, #112	@ 0x70
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
 80118f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80118f6:	236f      	movs	r3, #111	@ 0x6f
 80118f8:	18fb      	adds	r3, r7, r3
 80118fa:	2200      	movs	r2, #0
 80118fc:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80118fe:	687a      	ldr	r2, [r7, #4]
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	781b      	ldrb	r3, [r3, #0]
 8011904:	009b      	lsls	r3, r3, #2
 8011906:	18d3      	adds	r3, r2, r3
 8011908:	881b      	ldrh	r3, [r3, #0]
 801190a:	b29a      	uxth	r2, r3
 801190c:	236c      	movs	r3, #108	@ 0x6c
 801190e:	18fb      	adds	r3, r7, r3
 8011910:	49a3      	ldr	r1, [pc, #652]	@ (8011ba0 <USB_ActivateEndpoint+0x2b4>)
 8011912:	400a      	ands	r2, r1
 8011914:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8011916:	683b      	ldr	r3, [r7, #0]
 8011918:	78db      	ldrb	r3, [r3, #3]
 801191a:	2b03      	cmp	r3, #3
 801191c:	d017      	beq.n	801194e <USB_ActivateEndpoint+0x62>
 801191e:	dc28      	bgt.n	8011972 <USB_ActivateEndpoint+0x86>
 8011920:	2b02      	cmp	r3, #2
 8011922:	d00e      	beq.n	8011942 <USB_ActivateEndpoint+0x56>
 8011924:	dc25      	bgt.n	8011972 <USB_ActivateEndpoint+0x86>
 8011926:	2b00      	cmp	r3, #0
 8011928:	d002      	beq.n	8011930 <USB_ActivateEndpoint+0x44>
 801192a:	2b01      	cmp	r3, #1
 801192c:	d018      	beq.n	8011960 <USB_ActivateEndpoint+0x74>
 801192e:	e020      	b.n	8011972 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8011930:	226c      	movs	r2, #108	@ 0x6c
 8011932:	18bb      	adds	r3, r7, r2
 8011934:	18ba      	adds	r2, r7, r2
 8011936:	8812      	ldrh	r2, [r2, #0]
 8011938:	2180      	movs	r1, #128	@ 0x80
 801193a:	0089      	lsls	r1, r1, #2
 801193c:	430a      	orrs	r2, r1
 801193e:	801a      	strh	r2, [r3, #0]
      break;
 8011940:	e01c      	b.n	801197c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8011942:	226c      	movs	r2, #108	@ 0x6c
 8011944:	18bb      	adds	r3, r7, r2
 8011946:	18ba      	adds	r2, r7, r2
 8011948:	8812      	ldrh	r2, [r2, #0]
 801194a:	801a      	strh	r2, [r3, #0]
      break;
 801194c:	e016      	b.n	801197c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801194e:	226c      	movs	r2, #108	@ 0x6c
 8011950:	18bb      	adds	r3, r7, r2
 8011952:	18ba      	adds	r2, r7, r2
 8011954:	8812      	ldrh	r2, [r2, #0]
 8011956:	21c0      	movs	r1, #192	@ 0xc0
 8011958:	00c9      	lsls	r1, r1, #3
 801195a:	430a      	orrs	r2, r1
 801195c:	801a      	strh	r2, [r3, #0]
      break;
 801195e:	e00d      	b.n	801197c <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8011960:	226c      	movs	r2, #108	@ 0x6c
 8011962:	18bb      	adds	r3, r7, r2
 8011964:	18ba      	adds	r2, r7, r2
 8011966:	8812      	ldrh	r2, [r2, #0]
 8011968:	2180      	movs	r1, #128	@ 0x80
 801196a:	00c9      	lsls	r1, r1, #3
 801196c:	430a      	orrs	r2, r1
 801196e:	801a      	strh	r2, [r3, #0]
      break;
 8011970:	e004      	b.n	801197c <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8011972:	236f      	movs	r3, #111	@ 0x6f
 8011974:	18fb      	adds	r3, r7, r3
 8011976:	2201      	movs	r2, #1
 8011978:	701a      	strb	r2, [r3, #0]
      break;
 801197a:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 801197c:	687a      	ldr	r2, [r7, #4]
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	781b      	ldrb	r3, [r3, #0]
 8011982:	009b      	lsls	r3, r3, #2
 8011984:	18d3      	adds	r3, r2, r3
 8011986:	226c      	movs	r2, #108	@ 0x6c
 8011988:	18ba      	adds	r2, r7, r2
 801198a:	8812      	ldrh	r2, [r2, #0]
 801198c:	4985      	ldr	r1, [pc, #532]	@ (8011ba4 <USB_ActivateEndpoint+0x2b8>)
 801198e:	430a      	orrs	r2, r1
 8011990:	b292      	uxth	r2, r2
 8011992:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8011994:	687a      	ldr	r2, [r7, #4]
 8011996:	683b      	ldr	r3, [r7, #0]
 8011998:	781b      	ldrb	r3, [r3, #0]
 801199a:	009b      	lsls	r3, r3, #2
 801199c:	18d3      	adds	r3, r2, r3
 801199e:	881b      	ldrh	r3, [r3, #0]
 80119a0:	b29b      	uxth	r3, r3
 80119a2:	b21b      	sxth	r3, r3
 80119a4:	4a80      	ldr	r2, [pc, #512]	@ (8011ba8 <USB_ActivateEndpoint+0x2bc>)
 80119a6:	4013      	ands	r3, r2
 80119a8:	b21a      	sxth	r2, r3
 80119aa:	683b      	ldr	r3, [r7, #0]
 80119ac:	781b      	ldrb	r3, [r3, #0]
 80119ae:	b21b      	sxth	r3, r3
 80119b0:	4313      	orrs	r3, r2
 80119b2:	b21a      	sxth	r2, r3
 80119b4:	2166      	movs	r1, #102	@ 0x66
 80119b6:	187b      	adds	r3, r7, r1
 80119b8:	801a      	strh	r2, [r3, #0]
 80119ba:	687a      	ldr	r2, [r7, #4]
 80119bc:	683b      	ldr	r3, [r7, #0]
 80119be:	781b      	ldrb	r3, [r3, #0]
 80119c0:	009b      	lsls	r3, r3, #2
 80119c2:	18d3      	adds	r3, r2, r3
 80119c4:	187a      	adds	r2, r7, r1
 80119c6:	8812      	ldrh	r2, [r2, #0]
 80119c8:	4976      	ldr	r1, [pc, #472]	@ (8011ba4 <USB_ActivateEndpoint+0x2b8>)
 80119ca:	430a      	orrs	r2, r1
 80119cc:	b292      	uxth	r2, r2
 80119ce:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	7b1b      	ldrb	r3, [r3, #12]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d000      	beq.n	80119da <USB_ActivateEndpoint+0xee>
 80119d8:	e178      	b.n	8011ccc <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 80119da:	683b      	ldr	r3, [r7, #0]
 80119dc:	785b      	ldrb	r3, [r3, #1]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d100      	bne.n	80119e4 <USB_ActivateEndpoint+0xf8>
 80119e2:	e07a      	b.n	8011ada <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	61bb      	str	r3, [r7, #24]
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	2250      	movs	r2, #80	@ 0x50
 80119ec:	5a9b      	ldrh	r3, [r3, r2]
 80119ee:	b29b      	uxth	r3, r3
 80119f0:	001a      	movs	r2, r3
 80119f2:	69bb      	ldr	r3, [r7, #24]
 80119f4:	189b      	adds	r3, r3, r2
 80119f6:	61bb      	str	r3, [r7, #24]
 80119f8:	683b      	ldr	r3, [r7, #0]
 80119fa:	781b      	ldrb	r3, [r3, #0]
 80119fc:	00da      	lsls	r2, r3, #3
 80119fe:	69bb      	ldr	r3, [r7, #24]
 8011a00:	18d3      	adds	r3, r2, r3
 8011a02:	2280      	movs	r2, #128	@ 0x80
 8011a04:	00d2      	lsls	r2, r2, #3
 8011a06:	4694      	mov	ip, r2
 8011a08:	4463      	add	r3, ip
 8011a0a:	617b      	str	r3, [r7, #20]
 8011a0c:	683b      	ldr	r3, [r7, #0]
 8011a0e:	88db      	ldrh	r3, [r3, #6]
 8011a10:	085b      	lsrs	r3, r3, #1
 8011a12:	b29b      	uxth	r3, r3
 8011a14:	18db      	adds	r3, r3, r3
 8011a16:	b29a      	uxth	r2, r3
 8011a18:	697b      	ldr	r3, [r7, #20]
 8011a1a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011a1c:	687a      	ldr	r2, [r7, #4]
 8011a1e:	683b      	ldr	r3, [r7, #0]
 8011a20:	781b      	ldrb	r3, [r3, #0]
 8011a22:	009b      	lsls	r3, r3, #2
 8011a24:	18d2      	adds	r2, r2, r3
 8011a26:	2112      	movs	r1, #18
 8011a28:	187b      	adds	r3, r7, r1
 8011a2a:	8812      	ldrh	r2, [r2, #0]
 8011a2c:	801a      	strh	r2, [r3, #0]
 8011a2e:	187b      	adds	r3, r7, r1
 8011a30:	881b      	ldrh	r3, [r3, #0]
 8011a32:	2240      	movs	r2, #64	@ 0x40
 8011a34:	4013      	ands	r3, r2
 8011a36:	d016      	beq.n	8011a66 <USB_ActivateEndpoint+0x17a>
 8011a38:	687a      	ldr	r2, [r7, #4]
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	781b      	ldrb	r3, [r3, #0]
 8011a3e:	009b      	lsls	r3, r3, #2
 8011a40:	18d3      	adds	r3, r2, r3
 8011a42:	881b      	ldrh	r3, [r3, #0]
 8011a44:	b29a      	uxth	r2, r3
 8011a46:	2010      	movs	r0, #16
 8011a48:	183b      	adds	r3, r7, r0
 8011a4a:	4957      	ldr	r1, [pc, #348]	@ (8011ba8 <USB_ActivateEndpoint+0x2bc>)
 8011a4c:	400a      	ands	r2, r1
 8011a4e:	801a      	strh	r2, [r3, #0]
 8011a50:	687a      	ldr	r2, [r7, #4]
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	781b      	ldrb	r3, [r3, #0]
 8011a56:	009b      	lsls	r3, r3, #2
 8011a58:	18d3      	adds	r3, r2, r3
 8011a5a:	183a      	adds	r2, r7, r0
 8011a5c:	8812      	ldrh	r2, [r2, #0]
 8011a5e:	4953      	ldr	r1, [pc, #332]	@ (8011bac <USB_ActivateEndpoint+0x2c0>)
 8011a60:	430a      	orrs	r2, r1
 8011a62:	b292      	uxth	r2, r2
 8011a64:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011a66:	683b      	ldr	r3, [r7, #0]
 8011a68:	78db      	ldrb	r3, [r3, #3]
 8011a6a:	2b01      	cmp	r3, #1
 8011a6c:	d01d      	beq.n	8011aaa <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011a6e:	687a      	ldr	r2, [r7, #4]
 8011a70:	683b      	ldr	r3, [r7, #0]
 8011a72:	781b      	ldrb	r3, [r3, #0]
 8011a74:	009b      	lsls	r3, r3, #2
 8011a76:	18d3      	adds	r3, r2, r3
 8011a78:	881b      	ldrh	r3, [r3, #0]
 8011a7a:	b29a      	uxth	r2, r3
 8011a7c:	200c      	movs	r0, #12
 8011a7e:	183b      	adds	r3, r7, r0
 8011a80:	494b      	ldr	r1, [pc, #300]	@ (8011bb0 <USB_ActivateEndpoint+0x2c4>)
 8011a82:	400a      	ands	r2, r1
 8011a84:	801a      	strh	r2, [r3, #0]
 8011a86:	183b      	adds	r3, r7, r0
 8011a88:	183a      	adds	r2, r7, r0
 8011a8a:	8812      	ldrh	r2, [r2, #0]
 8011a8c:	2120      	movs	r1, #32
 8011a8e:	404a      	eors	r2, r1
 8011a90:	801a      	strh	r2, [r3, #0]
 8011a92:	687a      	ldr	r2, [r7, #4]
 8011a94:	683b      	ldr	r3, [r7, #0]
 8011a96:	781b      	ldrb	r3, [r3, #0]
 8011a98:	009b      	lsls	r3, r3, #2
 8011a9a:	18d3      	adds	r3, r2, r3
 8011a9c:	183a      	adds	r2, r7, r0
 8011a9e:	8812      	ldrh	r2, [r2, #0]
 8011aa0:	4940      	ldr	r1, [pc, #256]	@ (8011ba4 <USB_ActivateEndpoint+0x2b8>)
 8011aa2:	430a      	orrs	r2, r1
 8011aa4:	b292      	uxth	r2, r2
 8011aa6:	801a      	strh	r2, [r3, #0]
 8011aa8:	e2b4      	b.n	8012014 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011aaa:	687a      	ldr	r2, [r7, #4]
 8011aac:	683b      	ldr	r3, [r7, #0]
 8011aae:	781b      	ldrb	r3, [r3, #0]
 8011ab0:	009b      	lsls	r3, r3, #2
 8011ab2:	18d3      	adds	r3, r2, r3
 8011ab4:	881b      	ldrh	r3, [r3, #0]
 8011ab6:	b29a      	uxth	r2, r3
 8011ab8:	200e      	movs	r0, #14
 8011aba:	183b      	adds	r3, r7, r0
 8011abc:	493c      	ldr	r1, [pc, #240]	@ (8011bb0 <USB_ActivateEndpoint+0x2c4>)
 8011abe:	400a      	ands	r2, r1
 8011ac0:	801a      	strh	r2, [r3, #0]
 8011ac2:	687a      	ldr	r2, [r7, #4]
 8011ac4:	683b      	ldr	r3, [r7, #0]
 8011ac6:	781b      	ldrb	r3, [r3, #0]
 8011ac8:	009b      	lsls	r3, r3, #2
 8011aca:	18d3      	adds	r3, r2, r3
 8011acc:	183a      	adds	r2, r7, r0
 8011ace:	8812      	ldrh	r2, [r2, #0]
 8011ad0:	4934      	ldr	r1, [pc, #208]	@ (8011ba4 <USB_ActivateEndpoint+0x2b8>)
 8011ad2:	430a      	orrs	r2, r1
 8011ad4:	b292      	uxth	r2, r2
 8011ad6:	801a      	strh	r2, [r3, #0]
 8011ad8:	e29c      	b.n	8012014 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	633b      	str	r3, [r7, #48]	@ 0x30
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	2250      	movs	r2, #80	@ 0x50
 8011ae2:	5a9b      	ldrh	r3, [r3, r2]
 8011ae4:	b29b      	uxth	r3, r3
 8011ae6:	001a      	movs	r2, r3
 8011ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011aea:	189b      	adds	r3, r3, r2
 8011aec:	633b      	str	r3, [r7, #48]	@ 0x30
 8011aee:	683b      	ldr	r3, [r7, #0]
 8011af0:	781b      	ldrb	r3, [r3, #0]
 8011af2:	00da      	lsls	r2, r3, #3
 8011af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011af6:	18d3      	adds	r3, r2, r3
 8011af8:	4a2e      	ldr	r2, [pc, #184]	@ (8011bb4 <USB_ActivateEndpoint+0x2c8>)
 8011afa:	4694      	mov	ip, r2
 8011afc:	4463      	add	r3, ip
 8011afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	88db      	ldrh	r3, [r3, #6]
 8011b04:	085b      	lsrs	r3, r3, #1
 8011b06:	b29b      	uxth	r3, r3
 8011b08:	18db      	adds	r3, r3, r3
 8011b0a:	b29a      	uxth	r2, r3
 8011b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b0e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2250      	movs	r2, #80	@ 0x50
 8011b18:	5a9b      	ldrh	r3, [r3, r2]
 8011b1a:	b29b      	uxth	r3, r3
 8011b1c:	001a      	movs	r2, r3
 8011b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b20:	189b      	adds	r3, r3, r2
 8011b22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011b24:	683b      	ldr	r3, [r7, #0]
 8011b26:	781b      	ldrb	r3, [r3, #0]
 8011b28:	00da      	lsls	r2, r3, #3
 8011b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b2c:	18d3      	adds	r3, r2, r3
 8011b2e:	4a22      	ldr	r2, [pc, #136]	@ (8011bb8 <USB_ActivateEndpoint+0x2cc>)
 8011b30:	4694      	mov	ip, r2
 8011b32:	4463      	add	r3, ip
 8011b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8011b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b38:	881b      	ldrh	r3, [r3, #0]
 8011b3a:	b29b      	uxth	r3, r3
 8011b3c:	059b      	lsls	r3, r3, #22
 8011b3e:	0d9b      	lsrs	r3, r3, #22
 8011b40:	b29a      	uxth	r2, r3
 8011b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b44:	801a      	strh	r2, [r3, #0]
 8011b46:	683b      	ldr	r3, [r7, #0]
 8011b48:	691b      	ldr	r3, [r3, #16]
 8011b4a:	2b3e      	cmp	r3, #62	@ 0x3e
 8011b4c:	d91a      	bls.n	8011b84 <USB_ActivateEndpoint+0x298>
 8011b4e:	683b      	ldr	r3, [r7, #0]
 8011b50:	691b      	ldr	r3, [r3, #16]
 8011b52:	095b      	lsrs	r3, r3, #5
 8011b54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011b56:	683b      	ldr	r3, [r7, #0]
 8011b58:	691b      	ldr	r3, [r3, #16]
 8011b5a:	221f      	movs	r2, #31
 8011b5c:	4013      	ands	r3, r2
 8011b5e:	d102      	bne.n	8011b66 <USB_ActivateEndpoint+0x27a>
 8011b60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011b62:	3b01      	subs	r3, #1
 8011b64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b68:	881b      	ldrh	r3, [r3, #0]
 8011b6a:	b29a      	uxth	r2, r3
 8011b6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011b6e:	b29b      	uxth	r3, r3
 8011b70:	029b      	lsls	r3, r3, #10
 8011b72:	b29b      	uxth	r3, r3
 8011b74:	4313      	orrs	r3, r2
 8011b76:	b29b      	uxth	r3, r3
 8011b78:	4a10      	ldr	r2, [pc, #64]	@ (8011bbc <USB_ActivateEndpoint+0x2d0>)
 8011b7a:	4313      	orrs	r3, r2
 8011b7c:	b29a      	uxth	r2, r3
 8011b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b80:	801a      	strh	r2, [r3, #0]
 8011b82:	e034      	b.n	8011bee <USB_ActivateEndpoint+0x302>
 8011b84:	683b      	ldr	r3, [r7, #0]
 8011b86:	691b      	ldr	r3, [r3, #16]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d119      	bne.n	8011bc0 <USB_ActivateEndpoint+0x2d4>
 8011b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b8e:	881b      	ldrh	r3, [r3, #0]
 8011b90:	b29b      	uxth	r3, r3
 8011b92:	4a0a      	ldr	r2, [pc, #40]	@ (8011bbc <USB_ActivateEndpoint+0x2d0>)
 8011b94:	4313      	orrs	r3, r2
 8011b96:	b29a      	uxth	r2, r3
 8011b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b9a:	801a      	strh	r2, [r3, #0]
 8011b9c:	e027      	b.n	8011bee <USB_ActivateEndpoint+0x302>
 8011b9e:	46c0      	nop			@ (mov r8, r8)
 8011ba0:	ffff898f 	.word	0xffff898f
 8011ba4:	ffff8080 	.word	0xffff8080
 8011ba8:	ffff8f8f 	.word	0xffff8f8f
 8011bac:	ffff80c0 	.word	0xffff80c0
 8011bb0:	ffff8fbf 	.word	0xffff8fbf
 8011bb4:	00000404 	.word	0x00000404
 8011bb8:	00000406 	.word	0x00000406
 8011bbc:	ffff8000 	.word	0xffff8000
 8011bc0:	683b      	ldr	r3, [r7, #0]
 8011bc2:	691b      	ldr	r3, [r3, #16]
 8011bc4:	085b      	lsrs	r3, r3, #1
 8011bc6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011bc8:	683b      	ldr	r3, [r7, #0]
 8011bca:	691b      	ldr	r3, [r3, #16]
 8011bcc:	2201      	movs	r2, #1
 8011bce:	4013      	ands	r3, r2
 8011bd0:	d002      	beq.n	8011bd8 <USB_ActivateEndpoint+0x2ec>
 8011bd2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011bd4:	3301      	adds	r3, #1
 8011bd6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bda:	881b      	ldrh	r3, [r3, #0]
 8011bdc:	b29a      	uxth	r2, r3
 8011bde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011be0:	b29b      	uxth	r3, r3
 8011be2:	029b      	lsls	r3, r3, #10
 8011be4:	b29b      	uxth	r3, r3
 8011be6:	4313      	orrs	r3, r2
 8011be8:	b29a      	uxth	r2, r3
 8011bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011bee:	687a      	ldr	r2, [r7, #4]
 8011bf0:	683b      	ldr	r3, [r7, #0]
 8011bf2:	781b      	ldrb	r3, [r3, #0]
 8011bf4:	009b      	lsls	r3, r3, #2
 8011bf6:	18d2      	adds	r2, r2, r3
 8011bf8:	2122      	movs	r1, #34	@ 0x22
 8011bfa:	187b      	adds	r3, r7, r1
 8011bfc:	8812      	ldrh	r2, [r2, #0]
 8011bfe:	801a      	strh	r2, [r3, #0]
 8011c00:	187b      	adds	r3, r7, r1
 8011c02:	881a      	ldrh	r2, [r3, #0]
 8011c04:	2380      	movs	r3, #128	@ 0x80
 8011c06:	01db      	lsls	r3, r3, #7
 8011c08:	4013      	ands	r3, r2
 8011c0a:	d016      	beq.n	8011c3a <USB_ActivateEndpoint+0x34e>
 8011c0c:	687a      	ldr	r2, [r7, #4]
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	781b      	ldrb	r3, [r3, #0]
 8011c12:	009b      	lsls	r3, r3, #2
 8011c14:	18d3      	adds	r3, r2, r3
 8011c16:	881b      	ldrh	r3, [r3, #0]
 8011c18:	b29a      	uxth	r2, r3
 8011c1a:	2020      	movs	r0, #32
 8011c1c:	183b      	adds	r3, r7, r0
 8011c1e:	49dd      	ldr	r1, [pc, #884]	@ (8011f94 <USB_ActivateEndpoint+0x6a8>)
 8011c20:	400a      	ands	r2, r1
 8011c22:	801a      	strh	r2, [r3, #0]
 8011c24:	687a      	ldr	r2, [r7, #4]
 8011c26:	683b      	ldr	r3, [r7, #0]
 8011c28:	781b      	ldrb	r3, [r3, #0]
 8011c2a:	009b      	lsls	r3, r3, #2
 8011c2c:	18d3      	adds	r3, r2, r3
 8011c2e:	183a      	adds	r2, r7, r0
 8011c30:	8812      	ldrh	r2, [r2, #0]
 8011c32:	49d9      	ldr	r1, [pc, #868]	@ (8011f98 <USB_ActivateEndpoint+0x6ac>)
 8011c34:	430a      	orrs	r2, r1
 8011c36:	b292      	uxth	r2, r2
 8011c38:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8011c3a:	683b      	ldr	r3, [r7, #0]
 8011c3c:	781b      	ldrb	r3, [r3, #0]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d125      	bne.n	8011c8e <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011c42:	687a      	ldr	r2, [r7, #4]
 8011c44:	683b      	ldr	r3, [r7, #0]
 8011c46:	781b      	ldrb	r3, [r3, #0]
 8011c48:	009b      	lsls	r3, r3, #2
 8011c4a:	18d3      	adds	r3, r2, r3
 8011c4c:	881b      	ldrh	r3, [r3, #0]
 8011c4e:	b29a      	uxth	r2, r3
 8011c50:	201c      	movs	r0, #28
 8011c52:	183b      	adds	r3, r7, r0
 8011c54:	49d1      	ldr	r1, [pc, #836]	@ (8011f9c <USB_ActivateEndpoint+0x6b0>)
 8011c56:	400a      	ands	r2, r1
 8011c58:	801a      	strh	r2, [r3, #0]
 8011c5a:	183b      	adds	r3, r7, r0
 8011c5c:	183a      	adds	r2, r7, r0
 8011c5e:	8812      	ldrh	r2, [r2, #0]
 8011c60:	2180      	movs	r1, #128	@ 0x80
 8011c62:	0149      	lsls	r1, r1, #5
 8011c64:	404a      	eors	r2, r1
 8011c66:	801a      	strh	r2, [r3, #0]
 8011c68:	183b      	adds	r3, r7, r0
 8011c6a:	183a      	adds	r2, r7, r0
 8011c6c:	8812      	ldrh	r2, [r2, #0]
 8011c6e:	2180      	movs	r1, #128	@ 0x80
 8011c70:	0189      	lsls	r1, r1, #6
 8011c72:	404a      	eors	r2, r1
 8011c74:	801a      	strh	r2, [r3, #0]
 8011c76:	687a      	ldr	r2, [r7, #4]
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	781b      	ldrb	r3, [r3, #0]
 8011c7c:	009b      	lsls	r3, r3, #2
 8011c7e:	18d3      	adds	r3, r2, r3
 8011c80:	183a      	adds	r2, r7, r0
 8011c82:	8812      	ldrh	r2, [r2, #0]
 8011c84:	49c6      	ldr	r1, [pc, #792]	@ (8011fa0 <USB_ActivateEndpoint+0x6b4>)
 8011c86:	430a      	orrs	r2, r1
 8011c88:	b292      	uxth	r2, r2
 8011c8a:	801a      	strh	r2, [r3, #0]
 8011c8c:	e1c2      	b.n	8012014 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8011c8e:	687a      	ldr	r2, [r7, #4]
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	781b      	ldrb	r3, [r3, #0]
 8011c94:	009b      	lsls	r3, r3, #2
 8011c96:	18d3      	adds	r3, r2, r3
 8011c98:	881b      	ldrh	r3, [r3, #0]
 8011c9a:	b29a      	uxth	r2, r3
 8011c9c:	201e      	movs	r0, #30
 8011c9e:	183b      	adds	r3, r7, r0
 8011ca0:	49be      	ldr	r1, [pc, #760]	@ (8011f9c <USB_ActivateEndpoint+0x6b0>)
 8011ca2:	400a      	ands	r2, r1
 8011ca4:	801a      	strh	r2, [r3, #0]
 8011ca6:	183b      	adds	r3, r7, r0
 8011ca8:	183a      	adds	r2, r7, r0
 8011caa:	8812      	ldrh	r2, [r2, #0]
 8011cac:	2180      	movs	r1, #128	@ 0x80
 8011cae:	0189      	lsls	r1, r1, #6
 8011cb0:	404a      	eors	r2, r1
 8011cb2:	801a      	strh	r2, [r3, #0]
 8011cb4:	687a      	ldr	r2, [r7, #4]
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	781b      	ldrb	r3, [r3, #0]
 8011cba:	009b      	lsls	r3, r3, #2
 8011cbc:	18d3      	adds	r3, r2, r3
 8011cbe:	183a      	adds	r2, r7, r0
 8011cc0:	8812      	ldrh	r2, [r2, #0]
 8011cc2:	49b7      	ldr	r1, [pc, #732]	@ (8011fa0 <USB_ActivateEndpoint+0x6b4>)
 8011cc4:	430a      	orrs	r2, r1
 8011cc6:	b292      	uxth	r2, r2
 8011cc8:	801a      	strh	r2, [r3, #0]
 8011cca:	e1a3      	b.n	8012014 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8011ccc:	683b      	ldr	r3, [r7, #0]
 8011cce:	78db      	ldrb	r3, [r3, #3]
 8011cd0:	2b02      	cmp	r3, #2
 8011cd2:	d117      	bne.n	8011d04 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011cd4:	687a      	ldr	r2, [r7, #4]
 8011cd6:	683b      	ldr	r3, [r7, #0]
 8011cd8:	781b      	ldrb	r3, [r3, #0]
 8011cda:	009b      	lsls	r3, r3, #2
 8011cdc:	18d3      	adds	r3, r2, r3
 8011cde:	881b      	ldrh	r3, [r3, #0]
 8011ce0:	b29a      	uxth	r2, r3
 8011ce2:	2062      	movs	r0, #98	@ 0x62
 8011ce4:	183b      	adds	r3, r7, r0
 8011ce6:	49ab      	ldr	r1, [pc, #684]	@ (8011f94 <USB_ActivateEndpoint+0x6a8>)
 8011ce8:	400a      	ands	r2, r1
 8011cea:	801a      	strh	r2, [r3, #0]
 8011cec:	687a      	ldr	r2, [r7, #4]
 8011cee:	683b      	ldr	r3, [r7, #0]
 8011cf0:	781b      	ldrb	r3, [r3, #0]
 8011cf2:	009b      	lsls	r3, r3, #2
 8011cf4:	18d3      	adds	r3, r2, r3
 8011cf6:	183a      	adds	r2, r7, r0
 8011cf8:	8812      	ldrh	r2, [r2, #0]
 8011cfa:	49aa      	ldr	r1, [pc, #680]	@ (8011fa4 <USB_ActivateEndpoint+0x6b8>)
 8011cfc:	430a      	orrs	r2, r1
 8011cfe:	b292      	uxth	r2, r2
 8011d00:	801a      	strh	r2, [r3, #0]
 8011d02:	e016      	b.n	8011d32 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8011d04:	687a      	ldr	r2, [r7, #4]
 8011d06:	683b      	ldr	r3, [r7, #0]
 8011d08:	781b      	ldrb	r3, [r3, #0]
 8011d0a:	009b      	lsls	r3, r3, #2
 8011d0c:	18d3      	adds	r3, r2, r3
 8011d0e:	881b      	ldrh	r3, [r3, #0]
 8011d10:	b29a      	uxth	r2, r3
 8011d12:	2064      	movs	r0, #100	@ 0x64
 8011d14:	183b      	adds	r3, r7, r0
 8011d16:	49a4      	ldr	r1, [pc, #656]	@ (8011fa8 <USB_ActivateEndpoint+0x6bc>)
 8011d18:	400a      	ands	r2, r1
 8011d1a:	801a      	strh	r2, [r3, #0]
 8011d1c:	687a      	ldr	r2, [r7, #4]
 8011d1e:	683b      	ldr	r3, [r7, #0]
 8011d20:	781b      	ldrb	r3, [r3, #0]
 8011d22:	009b      	lsls	r3, r3, #2
 8011d24:	18d3      	adds	r3, r2, r3
 8011d26:	183a      	adds	r2, r7, r0
 8011d28:	8812      	ldrh	r2, [r2, #0]
 8011d2a:	499d      	ldr	r1, [pc, #628]	@ (8011fa0 <USB_ActivateEndpoint+0x6b4>)
 8011d2c:	430a      	orrs	r2, r1
 8011d2e:	b292      	uxth	r2, r2
 8011d30:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	2250      	movs	r2, #80	@ 0x50
 8011d3a:	5a9b      	ldrh	r3, [r3, r2]
 8011d3c:	b29b      	uxth	r3, r3
 8011d3e:	001a      	movs	r2, r3
 8011d40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011d42:	189b      	adds	r3, r3, r2
 8011d44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011d46:	683b      	ldr	r3, [r7, #0]
 8011d48:	781b      	ldrb	r3, [r3, #0]
 8011d4a:	00da      	lsls	r2, r3, #3
 8011d4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011d4e:	18d3      	adds	r3, r2, r3
 8011d50:	2280      	movs	r2, #128	@ 0x80
 8011d52:	00d2      	lsls	r2, r2, #3
 8011d54:	4694      	mov	ip, r2
 8011d56:	4463      	add	r3, ip
 8011d58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011d5a:	683b      	ldr	r3, [r7, #0]
 8011d5c:	891b      	ldrh	r3, [r3, #8]
 8011d5e:	085b      	lsrs	r3, r3, #1
 8011d60:	b29b      	uxth	r3, r3
 8011d62:	18db      	adds	r3, r3, r3
 8011d64:	b29a      	uxth	r2, r3
 8011d66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011d68:	801a      	strh	r2, [r3, #0]
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	2250      	movs	r2, #80	@ 0x50
 8011d72:	5a9b      	ldrh	r3, [r3, r2]
 8011d74:	b29b      	uxth	r3, r3
 8011d76:	001a      	movs	r2, r3
 8011d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d7a:	189b      	adds	r3, r3, r2
 8011d7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8011d7e:	683b      	ldr	r3, [r7, #0]
 8011d80:	781b      	ldrb	r3, [r3, #0]
 8011d82:	00da      	lsls	r2, r3, #3
 8011d84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d86:	18d3      	adds	r3, r2, r3
 8011d88:	4a88      	ldr	r2, [pc, #544]	@ (8011fac <USB_ActivateEndpoint+0x6c0>)
 8011d8a:	4694      	mov	ip, r2
 8011d8c:	4463      	add	r3, ip
 8011d8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011d90:	683b      	ldr	r3, [r7, #0]
 8011d92:	895b      	ldrh	r3, [r3, #10]
 8011d94:	085b      	lsrs	r3, r3, #1
 8011d96:	b29b      	uxth	r3, r3
 8011d98:	18db      	adds	r3, r3, r3
 8011d9a:	b29a      	uxth	r2, r3
 8011d9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d9e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	785b      	ldrb	r3, [r3, #1]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d000      	beq.n	8011daa <USB_ActivateEndpoint+0x4be>
 8011da8:	e087      	b.n	8011eba <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011daa:	687a      	ldr	r2, [r7, #4]
 8011dac:	683b      	ldr	r3, [r7, #0]
 8011dae:	781b      	ldrb	r3, [r3, #0]
 8011db0:	009b      	lsls	r3, r3, #2
 8011db2:	18d2      	adds	r2, r2, r3
 8011db4:	2140      	movs	r1, #64	@ 0x40
 8011db6:	187b      	adds	r3, r7, r1
 8011db8:	8812      	ldrh	r2, [r2, #0]
 8011dba:	801a      	strh	r2, [r3, #0]
 8011dbc:	187b      	adds	r3, r7, r1
 8011dbe:	881a      	ldrh	r2, [r3, #0]
 8011dc0:	2380      	movs	r3, #128	@ 0x80
 8011dc2:	01db      	lsls	r3, r3, #7
 8011dc4:	4013      	ands	r3, r2
 8011dc6:	d016      	beq.n	8011df6 <USB_ActivateEndpoint+0x50a>
 8011dc8:	687a      	ldr	r2, [r7, #4]
 8011dca:	683b      	ldr	r3, [r7, #0]
 8011dcc:	781b      	ldrb	r3, [r3, #0]
 8011dce:	009b      	lsls	r3, r3, #2
 8011dd0:	18d3      	adds	r3, r2, r3
 8011dd2:	881b      	ldrh	r3, [r3, #0]
 8011dd4:	b29a      	uxth	r2, r3
 8011dd6:	203e      	movs	r0, #62	@ 0x3e
 8011dd8:	183b      	adds	r3, r7, r0
 8011dda:	496e      	ldr	r1, [pc, #440]	@ (8011f94 <USB_ActivateEndpoint+0x6a8>)
 8011ddc:	400a      	ands	r2, r1
 8011dde:	801a      	strh	r2, [r3, #0]
 8011de0:	687a      	ldr	r2, [r7, #4]
 8011de2:	683b      	ldr	r3, [r7, #0]
 8011de4:	781b      	ldrb	r3, [r3, #0]
 8011de6:	009b      	lsls	r3, r3, #2
 8011de8:	18d3      	adds	r3, r2, r3
 8011dea:	183a      	adds	r2, r7, r0
 8011dec:	8812      	ldrh	r2, [r2, #0]
 8011dee:	496a      	ldr	r1, [pc, #424]	@ (8011f98 <USB_ActivateEndpoint+0x6ac>)
 8011df0:	430a      	orrs	r2, r1
 8011df2:	b292      	uxth	r2, r2
 8011df4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011df6:	687a      	ldr	r2, [r7, #4]
 8011df8:	683b      	ldr	r3, [r7, #0]
 8011dfa:	781b      	ldrb	r3, [r3, #0]
 8011dfc:	009b      	lsls	r3, r3, #2
 8011dfe:	18d2      	adds	r2, r2, r3
 8011e00:	213c      	movs	r1, #60	@ 0x3c
 8011e02:	187b      	adds	r3, r7, r1
 8011e04:	8812      	ldrh	r2, [r2, #0]
 8011e06:	801a      	strh	r2, [r3, #0]
 8011e08:	187b      	adds	r3, r7, r1
 8011e0a:	881b      	ldrh	r3, [r3, #0]
 8011e0c:	2240      	movs	r2, #64	@ 0x40
 8011e0e:	4013      	ands	r3, r2
 8011e10:	d016      	beq.n	8011e40 <USB_ActivateEndpoint+0x554>
 8011e12:	687a      	ldr	r2, [r7, #4]
 8011e14:	683b      	ldr	r3, [r7, #0]
 8011e16:	781b      	ldrb	r3, [r3, #0]
 8011e18:	009b      	lsls	r3, r3, #2
 8011e1a:	18d3      	adds	r3, r2, r3
 8011e1c:	881b      	ldrh	r3, [r3, #0]
 8011e1e:	b29a      	uxth	r2, r3
 8011e20:	203a      	movs	r0, #58	@ 0x3a
 8011e22:	183b      	adds	r3, r7, r0
 8011e24:	495b      	ldr	r1, [pc, #364]	@ (8011f94 <USB_ActivateEndpoint+0x6a8>)
 8011e26:	400a      	ands	r2, r1
 8011e28:	801a      	strh	r2, [r3, #0]
 8011e2a:	687a      	ldr	r2, [r7, #4]
 8011e2c:	683b      	ldr	r3, [r7, #0]
 8011e2e:	781b      	ldrb	r3, [r3, #0]
 8011e30:	009b      	lsls	r3, r3, #2
 8011e32:	18d3      	adds	r3, r2, r3
 8011e34:	183a      	adds	r2, r7, r0
 8011e36:	8812      	ldrh	r2, [r2, #0]
 8011e38:	495d      	ldr	r1, [pc, #372]	@ (8011fb0 <USB_ActivateEndpoint+0x6c4>)
 8011e3a:	430a      	orrs	r2, r1
 8011e3c:	b292      	uxth	r2, r2
 8011e3e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011e40:	687a      	ldr	r2, [r7, #4]
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	781b      	ldrb	r3, [r3, #0]
 8011e46:	009b      	lsls	r3, r3, #2
 8011e48:	18d3      	adds	r3, r2, r3
 8011e4a:	881b      	ldrh	r3, [r3, #0]
 8011e4c:	b29a      	uxth	r2, r3
 8011e4e:	2038      	movs	r0, #56	@ 0x38
 8011e50:	183b      	adds	r3, r7, r0
 8011e52:	4952      	ldr	r1, [pc, #328]	@ (8011f9c <USB_ActivateEndpoint+0x6b0>)
 8011e54:	400a      	ands	r2, r1
 8011e56:	801a      	strh	r2, [r3, #0]
 8011e58:	183b      	adds	r3, r7, r0
 8011e5a:	183a      	adds	r2, r7, r0
 8011e5c:	8812      	ldrh	r2, [r2, #0]
 8011e5e:	2180      	movs	r1, #128	@ 0x80
 8011e60:	0149      	lsls	r1, r1, #5
 8011e62:	404a      	eors	r2, r1
 8011e64:	801a      	strh	r2, [r3, #0]
 8011e66:	183b      	adds	r3, r7, r0
 8011e68:	183a      	adds	r2, r7, r0
 8011e6a:	8812      	ldrh	r2, [r2, #0]
 8011e6c:	2180      	movs	r1, #128	@ 0x80
 8011e6e:	0189      	lsls	r1, r1, #6
 8011e70:	404a      	eors	r2, r1
 8011e72:	801a      	strh	r2, [r3, #0]
 8011e74:	687a      	ldr	r2, [r7, #4]
 8011e76:	683b      	ldr	r3, [r7, #0]
 8011e78:	781b      	ldrb	r3, [r3, #0]
 8011e7a:	009b      	lsls	r3, r3, #2
 8011e7c:	18d3      	adds	r3, r2, r3
 8011e7e:	183a      	adds	r2, r7, r0
 8011e80:	8812      	ldrh	r2, [r2, #0]
 8011e82:	4947      	ldr	r1, [pc, #284]	@ (8011fa0 <USB_ActivateEndpoint+0x6b4>)
 8011e84:	430a      	orrs	r2, r1
 8011e86:	b292      	uxth	r2, r2
 8011e88:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011e8a:	687a      	ldr	r2, [r7, #4]
 8011e8c:	683b      	ldr	r3, [r7, #0]
 8011e8e:	781b      	ldrb	r3, [r3, #0]
 8011e90:	009b      	lsls	r3, r3, #2
 8011e92:	18d3      	adds	r3, r2, r3
 8011e94:	881b      	ldrh	r3, [r3, #0]
 8011e96:	b29a      	uxth	r2, r3
 8011e98:	2036      	movs	r0, #54	@ 0x36
 8011e9a:	183b      	adds	r3, r7, r0
 8011e9c:	4945      	ldr	r1, [pc, #276]	@ (8011fb4 <USB_ActivateEndpoint+0x6c8>)
 8011e9e:	400a      	ands	r2, r1
 8011ea0:	801a      	strh	r2, [r3, #0]
 8011ea2:	687a      	ldr	r2, [r7, #4]
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	781b      	ldrb	r3, [r3, #0]
 8011ea8:	009b      	lsls	r3, r3, #2
 8011eaa:	18d3      	adds	r3, r2, r3
 8011eac:	183a      	adds	r2, r7, r0
 8011eae:	8812      	ldrh	r2, [r2, #0]
 8011eb0:	493b      	ldr	r1, [pc, #236]	@ (8011fa0 <USB_ActivateEndpoint+0x6b4>)
 8011eb2:	430a      	orrs	r2, r1
 8011eb4:	b292      	uxth	r2, r2
 8011eb6:	801a      	strh	r2, [r3, #0]
 8011eb8:	e0ac      	b.n	8012014 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011eba:	687a      	ldr	r2, [r7, #4]
 8011ebc:	683b      	ldr	r3, [r7, #0]
 8011ebe:	781b      	ldrb	r3, [r3, #0]
 8011ec0:	009b      	lsls	r3, r3, #2
 8011ec2:	18d2      	adds	r2, r2, r3
 8011ec4:	214e      	movs	r1, #78	@ 0x4e
 8011ec6:	187b      	adds	r3, r7, r1
 8011ec8:	8812      	ldrh	r2, [r2, #0]
 8011eca:	801a      	strh	r2, [r3, #0]
 8011ecc:	187b      	adds	r3, r7, r1
 8011ece:	881a      	ldrh	r2, [r3, #0]
 8011ed0:	2380      	movs	r3, #128	@ 0x80
 8011ed2:	01db      	lsls	r3, r3, #7
 8011ed4:	4013      	ands	r3, r2
 8011ed6:	d016      	beq.n	8011f06 <USB_ActivateEndpoint+0x61a>
 8011ed8:	687a      	ldr	r2, [r7, #4]
 8011eda:	683b      	ldr	r3, [r7, #0]
 8011edc:	781b      	ldrb	r3, [r3, #0]
 8011ede:	009b      	lsls	r3, r3, #2
 8011ee0:	18d3      	adds	r3, r2, r3
 8011ee2:	881b      	ldrh	r3, [r3, #0]
 8011ee4:	b29a      	uxth	r2, r3
 8011ee6:	204c      	movs	r0, #76	@ 0x4c
 8011ee8:	183b      	adds	r3, r7, r0
 8011eea:	492a      	ldr	r1, [pc, #168]	@ (8011f94 <USB_ActivateEndpoint+0x6a8>)
 8011eec:	400a      	ands	r2, r1
 8011eee:	801a      	strh	r2, [r3, #0]
 8011ef0:	687a      	ldr	r2, [r7, #4]
 8011ef2:	683b      	ldr	r3, [r7, #0]
 8011ef4:	781b      	ldrb	r3, [r3, #0]
 8011ef6:	009b      	lsls	r3, r3, #2
 8011ef8:	18d3      	adds	r3, r2, r3
 8011efa:	183a      	adds	r2, r7, r0
 8011efc:	8812      	ldrh	r2, [r2, #0]
 8011efe:	4926      	ldr	r1, [pc, #152]	@ (8011f98 <USB_ActivateEndpoint+0x6ac>)
 8011f00:	430a      	orrs	r2, r1
 8011f02:	b292      	uxth	r2, r2
 8011f04:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011f06:	687a      	ldr	r2, [r7, #4]
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	781b      	ldrb	r3, [r3, #0]
 8011f0c:	009b      	lsls	r3, r3, #2
 8011f0e:	18d2      	adds	r2, r2, r3
 8011f10:	214a      	movs	r1, #74	@ 0x4a
 8011f12:	187b      	adds	r3, r7, r1
 8011f14:	8812      	ldrh	r2, [r2, #0]
 8011f16:	801a      	strh	r2, [r3, #0]
 8011f18:	187b      	adds	r3, r7, r1
 8011f1a:	881b      	ldrh	r3, [r3, #0]
 8011f1c:	2240      	movs	r2, #64	@ 0x40
 8011f1e:	4013      	ands	r3, r2
 8011f20:	d016      	beq.n	8011f50 <USB_ActivateEndpoint+0x664>
 8011f22:	687a      	ldr	r2, [r7, #4]
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	781b      	ldrb	r3, [r3, #0]
 8011f28:	009b      	lsls	r3, r3, #2
 8011f2a:	18d3      	adds	r3, r2, r3
 8011f2c:	881b      	ldrh	r3, [r3, #0]
 8011f2e:	b29a      	uxth	r2, r3
 8011f30:	2048      	movs	r0, #72	@ 0x48
 8011f32:	183b      	adds	r3, r7, r0
 8011f34:	4917      	ldr	r1, [pc, #92]	@ (8011f94 <USB_ActivateEndpoint+0x6a8>)
 8011f36:	400a      	ands	r2, r1
 8011f38:	801a      	strh	r2, [r3, #0]
 8011f3a:	687a      	ldr	r2, [r7, #4]
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	781b      	ldrb	r3, [r3, #0]
 8011f40:	009b      	lsls	r3, r3, #2
 8011f42:	18d3      	adds	r3, r2, r3
 8011f44:	183a      	adds	r2, r7, r0
 8011f46:	8812      	ldrh	r2, [r2, #0]
 8011f48:	4919      	ldr	r1, [pc, #100]	@ (8011fb0 <USB_ActivateEndpoint+0x6c4>)
 8011f4a:	430a      	orrs	r2, r1
 8011f4c:	b292      	uxth	r2, r2
 8011f4e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011f50:	683b      	ldr	r3, [r7, #0]
 8011f52:	78db      	ldrb	r3, [r3, #3]
 8011f54:	2b01      	cmp	r3, #1
 8011f56:	d02f      	beq.n	8011fb8 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011f58:	687a      	ldr	r2, [r7, #4]
 8011f5a:	683b      	ldr	r3, [r7, #0]
 8011f5c:	781b      	ldrb	r3, [r3, #0]
 8011f5e:	009b      	lsls	r3, r3, #2
 8011f60:	18d3      	adds	r3, r2, r3
 8011f62:	881b      	ldrh	r3, [r3, #0]
 8011f64:	b29a      	uxth	r2, r3
 8011f66:	2044      	movs	r0, #68	@ 0x44
 8011f68:	183b      	adds	r3, r7, r0
 8011f6a:	4912      	ldr	r1, [pc, #72]	@ (8011fb4 <USB_ActivateEndpoint+0x6c8>)
 8011f6c:	400a      	ands	r2, r1
 8011f6e:	801a      	strh	r2, [r3, #0]
 8011f70:	183b      	adds	r3, r7, r0
 8011f72:	183a      	adds	r2, r7, r0
 8011f74:	8812      	ldrh	r2, [r2, #0]
 8011f76:	2120      	movs	r1, #32
 8011f78:	404a      	eors	r2, r1
 8011f7a:	801a      	strh	r2, [r3, #0]
 8011f7c:	687a      	ldr	r2, [r7, #4]
 8011f7e:	683b      	ldr	r3, [r7, #0]
 8011f80:	781b      	ldrb	r3, [r3, #0]
 8011f82:	009b      	lsls	r3, r3, #2
 8011f84:	18d3      	adds	r3, r2, r3
 8011f86:	183a      	adds	r2, r7, r0
 8011f88:	8812      	ldrh	r2, [r2, #0]
 8011f8a:	4905      	ldr	r1, [pc, #20]	@ (8011fa0 <USB_ActivateEndpoint+0x6b4>)
 8011f8c:	430a      	orrs	r2, r1
 8011f8e:	b292      	uxth	r2, r2
 8011f90:	801a      	strh	r2, [r3, #0]
 8011f92:	e028      	b.n	8011fe6 <USB_ActivateEndpoint+0x6fa>
 8011f94:	ffff8f8f 	.word	0xffff8f8f
 8011f98:	ffffc080 	.word	0xffffc080
 8011f9c:	ffffbf8f 	.word	0xffffbf8f
 8011fa0:	ffff8080 	.word	0xffff8080
 8011fa4:	ffff8180 	.word	0xffff8180
 8011fa8:	ffff8e8f 	.word	0xffff8e8f
 8011fac:	00000404 	.word	0x00000404
 8011fb0:	ffff80c0 	.word	0xffff80c0
 8011fb4:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011fb8:	687a      	ldr	r2, [r7, #4]
 8011fba:	683b      	ldr	r3, [r7, #0]
 8011fbc:	781b      	ldrb	r3, [r3, #0]
 8011fbe:	009b      	lsls	r3, r3, #2
 8011fc0:	18d3      	adds	r3, r2, r3
 8011fc2:	881b      	ldrh	r3, [r3, #0]
 8011fc4:	b29a      	uxth	r2, r3
 8011fc6:	2046      	movs	r0, #70	@ 0x46
 8011fc8:	183b      	adds	r3, r7, r0
 8011fca:	4916      	ldr	r1, [pc, #88]	@ (8012024 <USB_ActivateEndpoint+0x738>)
 8011fcc:	400a      	ands	r2, r1
 8011fce:	801a      	strh	r2, [r3, #0]
 8011fd0:	687a      	ldr	r2, [r7, #4]
 8011fd2:	683b      	ldr	r3, [r7, #0]
 8011fd4:	781b      	ldrb	r3, [r3, #0]
 8011fd6:	009b      	lsls	r3, r3, #2
 8011fd8:	18d3      	adds	r3, r2, r3
 8011fda:	183a      	adds	r2, r7, r0
 8011fdc:	8812      	ldrh	r2, [r2, #0]
 8011fde:	4912      	ldr	r1, [pc, #72]	@ (8012028 <USB_ActivateEndpoint+0x73c>)
 8011fe0:	430a      	orrs	r2, r1
 8011fe2:	b292      	uxth	r2, r2
 8011fe4:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011fe6:	687a      	ldr	r2, [r7, #4]
 8011fe8:	683b      	ldr	r3, [r7, #0]
 8011fea:	781b      	ldrb	r3, [r3, #0]
 8011fec:	009b      	lsls	r3, r3, #2
 8011fee:	18d3      	adds	r3, r2, r3
 8011ff0:	881b      	ldrh	r3, [r3, #0]
 8011ff2:	b29a      	uxth	r2, r3
 8011ff4:	2042      	movs	r0, #66	@ 0x42
 8011ff6:	183b      	adds	r3, r7, r0
 8011ff8:	490c      	ldr	r1, [pc, #48]	@ (801202c <USB_ActivateEndpoint+0x740>)
 8011ffa:	400a      	ands	r2, r1
 8011ffc:	801a      	strh	r2, [r3, #0]
 8011ffe:	687a      	ldr	r2, [r7, #4]
 8012000:	683b      	ldr	r3, [r7, #0]
 8012002:	781b      	ldrb	r3, [r3, #0]
 8012004:	009b      	lsls	r3, r3, #2
 8012006:	18d3      	adds	r3, r2, r3
 8012008:	183a      	adds	r2, r7, r0
 801200a:	8812      	ldrh	r2, [r2, #0]
 801200c:	4906      	ldr	r1, [pc, #24]	@ (8012028 <USB_ActivateEndpoint+0x73c>)
 801200e:	430a      	orrs	r2, r1
 8012010:	b292      	uxth	r2, r2
 8012012:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8012014:	236f      	movs	r3, #111	@ 0x6f
 8012016:	18fb      	adds	r3, r7, r3
 8012018:	781b      	ldrb	r3, [r3, #0]
}
 801201a:	0018      	movs	r0, r3
 801201c:	46bd      	mov	sp, r7
 801201e:	b01c      	add	sp, #112	@ 0x70
 8012020:	bd80      	pop	{r7, pc}
 8012022:	46c0      	nop			@ (mov r8, r8)
 8012024:	ffff8fbf 	.word	0xffff8fbf
 8012028:	ffff8080 	.word	0xffff8080
 801202c:	ffffbf8f 	.word	0xffffbf8f

08012030 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b08c      	sub	sp, #48	@ 0x30
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
 8012038:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	7b1b      	ldrb	r3, [r3, #12]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d000      	beq.n	8012044 <USB_DeactivateEndpoint+0x14>
 8012042:	e07e      	b.n	8012142 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8012044:	683b      	ldr	r3, [r7, #0]
 8012046:	785b      	ldrb	r3, [r3, #1]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d03c      	beq.n	80120c6 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801204c:	687a      	ldr	r2, [r7, #4]
 801204e:	683b      	ldr	r3, [r7, #0]
 8012050:	781b      	ldrb	r3, [r3, #0]
 8012052:	009b      	lsls	r3, r3, #2
 8012054:	18d2      	adds	r2, r2, r3
 8012056:	210c      	movs	r1, #12
 8012058:	187b      	adds	r3, r7, r1
 801205a:	8812      	ldrh	r2, [r2, #0]
 801205c:	801a      	strh	r2, [r3, #0]
 801205e:	187b      	adds	r3, r7, r1
 8012060:	881b      	ldrh	r3, [r3, #0]
 8012062:	2240      	movs	r2, #64	@ 0x40
 8012064:	4013      	ands	r3, r2
 8012066:	d016      	beq.n	8012096 <USB_DeactivateEndpoint+0x66>
 8012068:	687a      	ldr	r2, [r7, #4]
 801206a:	683b      	ldr	r3, [r7, #0]
 801206c:	781b      	ldrb	r3, [r3, #0]
 801206e:	009b      	lsls	r3, r3, #2
 8012070:	18d3      	adds	r3, r2, r3
 8012072:	881b      	ldrh	r3, [r3, #0]
 8012074:	b29a      	uxth	r2, r3
 8012076:	200a      	movs	r0, #10
 8012078:	183b      	adds	r3, r7, r0
 801207a:	49c7      	ldr	r1, [pc, #796]	@ (8012398 <USB_DeactivateEndpoint+0x368>)
 801207c:	400a      	ands	r2, r1
 801207e:	801a      	strh	r2, [r3, #0]
 8012080:	687a      	ldr	r2, [r7, #4]
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	781b      	ldrb	r3, [r3, #0]
 8012086:	009b      	lsls	r3, r3, #2
 8012088:	18d3      	adds	r3, r2, r3
 801208a:	183a      	adds	r2, r7, r0
 801208c:	8812      	ldrh	r2, [r2, #0]
 801208e:	49c3      	ldr	r1, [pc, #780]	@ (801239c <USB_DeactivateEndpoint+0x36c>)
 8012090:	430a      	orrs	r2, r1
 8012092:	b292      	uxth	r2, r2
 8012094:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012096:	687a      	ldr	r2, [r7, #4]
 8012098:	683b      	ldr	r3, [r7, #0]
 801209a:	781b      	ldrb	r3, [r3, #0]
 801209c:	009b      	lsls	r3, r3, #2
 801209e:	18d3      	adds	r3, r2, r3
 80120a0:	881b      	ldrh	r3, [r3, #0]
 80120a2:	b29a      	uxth	r2, r3
 80120a4:	2008      	movs	r0, #8
 80120a6:	183b      	adds	r3, r7, r0
 80120a8:	49bd      	ldr	r1, [pc, #756]	@ (80123a0 <USB_DeactivateEndpoint+0x370>)
 80120aa:	400a      	ands	r2, r1
 80120ac:	801a      	strh	r2, [r3, #0]
 80120ae:	687a      	ldr	r2, [r7, #4]
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	781b      	ldrb	r3, [r3, #0]
 80120b4:	009b      	lsls	r3, r3, #2
 80120b6:	18d3      	adds	r3, r2, r3
 80120b8:	183a      	adds	r2, r7, r0
 80120ba:	8812      	ldrh	r2, [r2, #0]
 80120bc:	49b9      	ldr	r1, [pc, #740]	@ (80123a4 <USB_DeactivateEndpoint+0x374>)
 80120be:	430a      	orrs	r2, r1
 80120c0:	b292      	uxth	r2, r2
 80120c2:	801a      	strh	r2, [r3, #0]
 80120c4:	e163      	b.n	801238e <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80120c6:	687a      	ldr	r2, [r7, #4]
 80120c8:	683b      	ldr	r3, [r7, #0]
 80120ca:	781b      	ldrb	r3, [r3, #0]
 80120cc:	009b      	lsls	r3, r3, #2
 80120ce:	18d2      	adds	r2, r2, r3
 80120d0:	2112      	movs	r1, #18
 80120d2:	187b      	adds	r3, r7, r1
 80120d4:	8812      	ldrh	r2, [r2, #0]
 80120d6:	801a      	strh	r2, [r3, #0]
 80120d8:	187b      	adds	r3, r7, r1
 80120da:	881a      	ldrh	r2, [r3, #0]
 80120dc:	2380      	movs	r3, #128	@ 0x80
 80120de:	01db      	lsls	r3, r3, #7
 80120e0:	4013      	ands	r3, r2
 80120e2:	d016      	beq.n	8012112 <USB_DeactivateEndpoint+0xe2>
 80120e4:	687a      	ldr	r2, [r7, #4]
 80120e6:	683b      	ldr	r3, [r7, #0]
 80120e8:	781b      	ldrb	r3, [r3, #0]
 80120ea:	009b      	lsls	r3, r3, #2
 80120ec:	18d3      	adds	r3, r2, r3
 80120ee:	881b      	ldrh	r3, [r3, #0]
 80120f0:	b29a      	uxth	r2, r3
 80120f2:	2010      	movs	r0, #16
 80120f4:	183b      	adds	r3, r7, r0
 80120f6:	49a8      	ldr	r1, [pc, #672]	@ (8012398 <USB_DeactivateEndpoint+0x368>)
 80120f8:	400a      	ands	r2, r1
 80120fa:	801a      	strh	r2, [r3, #0]
 80120fc:	687a      	ldr	r2, [r7, #4]
 80120fe:	683b      	ldr	r3, [r7, #0]
 8012100:	781b      	ldrb	r3, [r3, #0]
 8012102:	009b      	lsls	r3, r3, #2
 8012104:	18d3      	adds	r3, r2, r3
 8012106:	183a      	adds	r2, r7, r0
 8012108:	8812      	ldrh	r2, [r2, #0]
 801210a:	49a7      	ldr	r1, [pc, #668]	@ (80123a8 <USB_DeactivateEndpoint+0x378>)
 801210c:	430a      	orrs	r2, r1
 801210e:	b292      	uxth	r2, r2
 8012110:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8012112:	687a      	ldr	r2, [r7, #4]
 8012114:	683b      	ldr	r3, [r7, #0]
 8012116:	781b      	ldrb	r3, [r3, #0]
 8012118:	009b      	lsls	r3, r3, #2
 801211a:	18d3      	adds	r3, r2, r3
 801211c:	881b      	ldrh	r3, [r3, #0]
 801211e:	b29a      	uxth	r2, r3
 8012120:	200e      	movs	r0, #14
 8012122:	183b      	adds	r3, r7, r0
 8012124:	49a1      	ldr	r1, [pc, #644]	@ (80123ac <USB_DeactivateEndpoint+0x37c>)
 8012126:	400a      	ands	r2, r1
 8012128:	801a      	strh	r2, [r3, #0]
 801212a:	687a      	ldr	r2, [r7, #4]
 801212c:	683b      	ldr	r3, [r7, #0]
 801212e:	781b      	ldrb	r3, [r3, #0]
 8012130:	009b      	lsls	r3, r3, #2
 8012132:	18d3      	adds	r3, r2, r3
 8012134:	183a      	adds	r2, r7, r0
 8012136:	8812      	ldrh	r2, [r2, #0]
 8012138:	499a      	ldr	r1, [pc, #616]	@ (80123a4 <USB_DeactivateEndpoint+0x374>)
 801213a:	430a      	orrs	r2, r1
 801213c:	b292      	uxth	r2, r2
 801213e:	801a      	strh	r2, [r3, #0]
 8012140:	e125      	b.n	801238e <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8012142:	683b      	ldr	r3, [r7, #0]
 8012144:	785b      	ldrb	r3, [r3, #1]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d000      	beq.n	801214c <USB_DeactivateEndpoint+0x11c>
 801214a:	e090      	b.n	801226e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801214c:	687a      	ldr	r2, [r7, #4]
 801214e:	683b      	ldr	r3, [r7, #0]
 8012150:	781b      	ldrb	r3, [r3, #0]
 8012152:	009b      	lsls	r3, r3, #2
 8012154:	18d2      	adds	r2, r2, r3
 8012156:	2120      	movs	r1, #32
 8012158:	187b      	adds	r3, r7, r1
 801215a:	8812      	ldrh	r2, [r2, #0]
 801215c:	801a      	strh	r2, [r3, #0]
 801215e:	187b      	adds	r3, r7, r1
 8012160:	881a      	ldrh	r2, [r3, #0]
 8012162:	2380      	movs	r3, #128	@ 0x80
 8012164:	01db      	lsls	r3, r3, #7
 8012166:	4013      	ands	r3, r2
 8012168:	d016      	beq.n	8012198 <USB_DeactivateEndpoint+0x168>
 801216a:	687a      	ldr	r2, [r7, #4]
 801216c:	683b      	ldr	r3, [r7, #0]
 801216e:	781b      	ldrb	r3, [r3, #0]
 8012170:	009b      	lsls	r3, r3, #2
 8012172:	18d3      	adds	r3, r2, r3
 8012174:	881b      	ldrh	r3, [r3, #0]
 8012176:	b29a      	uxth	r2, r3
 8012178:	201e      	movs	r0, #30
 801217a:	183b      	adds	r3, r7, r0
 801217c:	4986      	ldr	r1, [pc, #536]	@ (8012398 <USB_DeactivateEndpoint+0x368>)
 801217e:	400a      	ands	r2, r1
 8012180:	801a      	strh	r2, [r3, #0]
 8012182:	687a      	ldr	r2, [r7, #4]
 8012184:	683b      	ldr	r3, [r7, #0]
 8012186:	781b      	ldrb	r3, [r3, #0]
 8012188:	009b      	lsls	r3, r3, #2
 801218a:	18d3      	adds	r3, r2, r3
 801218c:	183a      	adds	r2, r7, r0
 801218e:	8812      	ldrh	r2, [r2, #0]
 8012190:	4985      	ldr	r1, [pc, #532]	@ (80123a8 <USB_DeactivateEndpoint+0x378>)
 8012192:	430a      	orrs	r2, r1
 8012194:	b292      	uxth	r2, r2
 8012196:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012198:	687a      	ldr	r2, [r7, #4]
 801219a:	683b      	ldr	r3, [r7, #0]
 801219c:	781b      	ldrb	r3, [r3, #0]
 801219e:	009b      	lsls	r3, r3, #2
 80121a0:	18d2      	adds	r2, r2, r3
 80121a2:	211c      	movs	r1, #28
 80121a4:	187b      	adds	r3, r7, r1
 80121a6:	8812      	ldrh	r2, [r2, #0]
 80121a8:	801a      	strh	r2, [r3, #0]
 80121aa:	187b      	adds	r3, r7, r1
 80121ac:	881b      	ldrh	r3, [r3, #0]
 80121ae:	2240      	movs	r2, #64	@ 0x40
 80121b0:	4013      	ands	r3, r2
 80121b2:	d016      	beq.n	80121e2 <USB_DeactivateEndpoint+0x1b2>
 80121b4:	687a      	ldr	r2, [r7, #4]
 80121b6:	683b      	ldr	r3, [r7, #0]
 80121b8:	781b      	ldrb	r3, [r3, #0]
 80121ba:	009b      	lsls	r3, r3, #2
 80121bc:	18d3      	adds	r3, r2, r3
 80121be:	881b      	ldrh	r3, [r3, #0]
 80121c0:	b29a      	uxth	r2, r3
 80121c2:	201a      	movs	r0, #26
 80121c4:	183b      	adds	r3, r7, r0
 80121c6:	4974      	ldr	r1, [pc, #464]	@ (8012398 <USB_DeactivateEndpoint+0x368>)
 80121c8:	400a      	ands	r2, r1
 80121ca:	801a      	strh	r2, [r3, #0]
 80121cc:	687a      	ldr	r2, [r7, #4]
 80121ce:	683b      	ldr	r3, [r7, #0]
 80121d0:	781b      	ldrb	r3, [r3, #0]
 80121d2:	009b      	lsls	r3, r3, #2
 80121d4:	18d3      	adds	r3, r2, r3
 80121d6:	183a      	adds	r2, r7, r0
 80121d8:	8812      	ldrh	r2, [r2, #0]
 80121da:	4970      	ldr	r1, [pc, #448]	@ (801239c <USB_DeactivateEndpoint+0x36c>)
 80121dc:	430a      	orrs	r2, r1
 80121de:	b292      	uxth	r2, r2
 80121e0:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80121e2:	687a      	ldr	r2, [r7, #4]
 80121e4:	683b      	ldr	r3, [r7, #0]
 80121e6:	781b      	ldrb	r3, [r3, #0]
 80121e8:	009b      	lsls	r3, r3, #2
 80121ea:	18d3      	adds	r3, r2, r3
 80121ec:	881b      	ldrh	r3, [r3, #0]
 80121ee:	b29a      	uxth	r2, r3
 80121f0:	2018      	movs	r0, #24
 80121f2:	183b      	adds	r3, r7, r0
 80121f4:	4968      	ldr	r1, [pc, #416]	@ (8012398 <USB_DeactivateEndpoint+0x368>)
 80121f6:	400a      	ands	r2, r1
 80121f8:	801a      	strh	r2, [r3, #0]
 80121fa:	687a      	ldr	r2, [r7, #4]
 80121fc:	683b      	ldr	r3, [r7, #0]
 80121fe:	781b      	ldrb	r3, [r3, #0]
 8012200:	009b      	lsls	r3, r3, #2
 8012202:	18d3      	adds	r3, r2, r3
 8012204:	183a      	adds	r2, r7, r0
 8012206:	8812      	ldrh	r2, [r2, #0]
 8012208:	4964      	ldr	r1, [pc, #400]	@ (801239c <USB_DeactivateEndpoint+0x36c>)
 801220a:	430a      	orrs	r2, r1
 801220c:	b292      	uxth	r2, r2
 801220e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8012210:	687a      	ldr	r2, [r7, #4]
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	781b      	ldrb	r3, [r3, #0]
 8012216:	009b      	lsls	r3, r3, #2
 8012218:	18d3      	adds	r3, r2, r3
 801221a:	881b      	ldrh	r3, [r3, #0]
 801221c:	b29a      	uxth	r2, r3
 801221e:	2016      	movs	r0, #22
 8012220:	183b      	adds	r3, r7, r0
 8012222:	4962      	ldr	r1, [pc, #392]	@ (80123ac <USB_DeactivateEndpoint+0x37c>)
 8012224:	400a      	ands	r2, r1
 8012226:	801a      	strh	r2, [r3, #0]
 8012228:	687a      	ldr	r2, [r7, #4]
 801222a:	683b      	ldr	r3, [r7, #0]
 801222c:	781b      	ldrb	r3, [r3, #0]
 801222e:	009b      	lsls	r3, r3, #2
 8012230:	18d3      	adds	r3, r2, r3
 8012232:	183a      	adds	r2, r7, r0
 8012234:	8812      	ldrh	r2, [r2, #0]
 8012236:	495b      	ldr	r1, [pc, #364]	@ (80123a4 <USB_DeactivateEndpoint+0x374>)
 8012238:	430a      	orrs	r2, r1
 801223a:	b292      	uxth	r2, r2
 801223c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801223e:	687a      	ldr	r2, [r7, #4]
 8012240:	683b      	ldr	r3, [r7, #0]
 8012242:	781b      	ldrb	r3, [r3, #0]
 8012244:	009b      	lsls	r3, r3, #2
 8012246:	18d3      	adds	r3, r2, r3
 8012248:	881b      	ldrh	r3, [r3, #0]
 801224a:	b29a      	uxth	r2, r3
 801224c:	2014      	movs	r0, #20
 801224e:	183b      	adds	r3, r7, r0
 8012250:	4953      	ldr	r1, [pc, #332]	@ (80123a0 <USB_DeactivateEndpoint+0x370>)
 8012252:	400a      	ands	r2, r1
 8012254:	801a      	strh	r2, [r3, #0]
 8012256:	687a      	ldr	r2, [r7, #4]
 8012258:	683b      	ldr	r3, [r7, #0]
 801225a:	781b      	ldrb	r3, [r3, #0]
 801225c:	009b      	lsls	r3, r3, #2
 801225e:	18d3      	adds	r3, r2, r3
 8012260:	183a      	adds	r2, r7, r0
 8012262:	8812      	ldrh	r2, [r2, #0]
 8012264:	494f      	ldr	r1, [pc, #316]	@ (80123a4 <USB_DeactivateEndpoint+0x374>)
 8012266:	430a      	orrs	r2, r1
 8012268:	b292      	uxth	r2, r2
 801226a:	801a      	strh	r2, [r3, #0]
 801226c:	e08f      	b.n	801238e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801226e:	687a      	ldr	r2, [r7, #4]
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	781b      	ldrb	r3, [r3, #0]
 8012274:	009b      	lsls	r3, r3, #2
 8012276:	18d2      	adds	r2, r2, r3
 8012278:	212e      	movs	r1, #46	@ 0x2e
 801227a:	187b      	adds	r3, r7, r1
 801227c:	8812      	ldrh	r2, [r2, #0]
 801227e:	801a      	strh	r2, [r3, #0]
 8012280:	187b      	adds	r3, r7, r1
 8012282:	881a      	ldrh	r2, [r3, #0]
 8012284:	2380      	movs	r3, #128	@ 0x80
 8012286:	01db      	lsls	r3, r3, #7
 8012288:	4013      	ands	r3, r2
 801228a:	d016      	beq.n	80122ba <USB_DeactivateEndpoint+0x28a>
 801228c:	687a      	ldr	r2, [r7, #4]
 801228e:	683b      	ldr	r3, [r7, #0]
 8012290:	781b      	ldrb	r3, [r3, #0]
 8012292:	009b      	lsls	r3, r3, #2
 8012294:	18d3      	adds	r3, r2, r3
 8012296:	881b      	ldrh	r3, [r3, #0]
 8012298:	b29a      	uxth	r2, r3
 801229a:	202c      	movs	r0, #44	@ 0x2c
 801229c:	183b      	adds	r3, r7, r0
 801229e:	493e      	ldr	r1, [pc, #248]	@ (8012398 <USB_DeactivateEndpoint+0x368>)
 80122a0:	400a      	ands	r2, r1
 80122a2:	801a      	strh	r2, [r3, #0]
 80122a4:	687a      	ldr	r2, [r7, #4]
 80122a6:	683b      	ldr	r3, [r7, #0]
 80122a8:	781b      	ldrb	r3, [r3, #0]
 80122aa:	009b      	lsls	r3, r3, #2
 80122ac:	18d3      	adds	r3, r2, r3
 80122ae:	183a      	adds	r2, r7, r0
 80122b0:	8812      	ldrh	r2, [r2, #0]
 80122b2:	493d      	ldr	r1, [pc, #244]	@ (80123a8 <USB_DeactivateEndpoint+0x378>)
 80122b4:	430a      	orrs	r2, r1
 80122b6:	b292      	uxth	r2, r2
 80122b8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80122ba:	687a      	ldr	r2, [r7, #4]
 80122bc:	683b      	ldr	r3, [r7, #0]
 80122be:	781b      	ldrb	r3, [r3, #0]
 80122c0:	009b      	lsls	r3, r3, #2
 80122c2:	18d2      	adds	r2, r2, r3
 80122c4:	212a      	movs	r1, #42	@ 0x2a
 80122c6:	187b      	adds	r3, r7, r1
 80122c8:	8812      	ldrh	r2, [r2, #0]
 80122ca:	801a      	strh	r2, [r3, #0]
 80122cc:	187b      	adds	r3, r7, r1
 80122ce:	881b      	ldrh	r3, [r3, #0]
 80122d0:	2240      	movs	r2, #64	@ 0x40
 80122d2:	4013      	ands	r3, r2
 80122d4:	d016      	beq.n	8012304 <USB_DeactivateEndpoint+0x2d4>
 80122d6:	687a      	ldr	r2, [r7, #4]
 80122d8:	683b      	ldr	r3, [r7, #0]
 80122da:	781b      	ldrb	r3, [r3, #0]
 80122dc:	009b      	lsls	r3, r3, #2
 80122de:	18d3      	adds	r3, r2, r3
 80122e0:	881b      	ldrh	r3, [r3, #0]
 80122e2:	b29a      	uxth	r2, r3
 80122e4:	2028      	movs	r0, #40	@ 0x28
 80122e6:	183b      	adds	r3, r7, r0
 80122e8:	492b      	ldr	r1, [pc, #172]	@ (8012398 <USB_DeactivateEndpoint+0x368>)
 80122ea:	400a      	ands	r2, r1
 80122ec:	801a      	strh	r2, [r3, #0]
 80122ee:	687a      	ldr	r2, [r7, #4]
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	781b      	ldrb	r3, [r3, #0]
 80122f4:	009b      	lsls	r3, r3, #2
 80122f6:	18d3      	adds	r3, r2, r3
 80122f8:	183a      	adds	r2, r7, r0
 80122fa:	8812      	ldrh	r2, [r2, #0]
 80122fc:	4927      	ldr	r1, [pc, #156]	@ (801239c <USB_DeactivateEndpoint+0x36c>)
 80122fe:	430a      	orrs	r2, r1
 8012300:	b292      	uxth	r2, r2
 8012302:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8012304:	687a      	ldr	r2, [r7, #4]
 8012306:	683b      	ldr	r3, [r7, #0]
 8012308:	781b      	ldrb	r3, [r3, #0]
 801230a:	009b      	lsls	r3, r3, #2
 801230c:	18d3      	adds	r3, r2, r3
 801230e:	881b      	ldrh	r3, [r3, #0]
 8012310:	b29a      	uxth	r2, r3
 8012312:	2026      	movs	r0, #38	@ 0x26
 8012314:	183b      	adds	r3, r7, r0
 8012316:	4920      	ldr	r1, [pc, #128]	@ (8012398 <USB_DeactivateEndpoint+0x368>)
 8012318:	400a      	ands	r2, r1
 801231a:	801a      	strh	r2, [r3, #0]
 801231c:	687a      	ldr	r2, [r7, #4]
 801231e:	683b      	ldr	r3, [r7, #0]
 8012320:	781b      	ldrb	r3, [r3, #0]
 8012322:	009b      	lsls	r3, r3, #2
 8012324:	18d3      	adds	r3, r2, r3
 8012326:	183a      	adds	r2, r7, r0
 8012328:	8812      	ldrh	r2, [r2, #0]
 801232a:	491f      	ldr	r1, [pc, #124]	@ (80123a8 <USB_DeactivateEndpoint+0x378>)
 801232c:	430a      	orrs	r2, r1
 801232e:	b292      	uxth	r2, r2
 8012330:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012332:	687a      	ldr	r2, [r7, #4]
 8012334:	683b      	ldr	r3, [r7, #0]
 8012336:	781b      	ldrb	r3, [r3, #0]
 8012338:	009b      	lsls	r3, r3, #2
 801233a:	18d3      	adds	r3, r2, r3
 801233c:	881b      	ldrh	r3, [r3, #0]
 801233e:	b29a      	uxth	r2, r3
 8012340:	2024      	movs	r0, #36	@ 0x24
 8012342:	183b      	adds	r3, r7, r0
 8012344:	4916      	ldr	r1, [pc, #88]	@ (80123a0 <USB_DeactivateEndpoint+0x370>)
 8012346:	400a      	ands	r2, r1
 8012348:	801a      	strh	r2, [r3, #0]
 801234a:	687a      	ldr	r2, [r7, #4]
 801234c:	683b      	ldr	r3, [r7, #0]
 801234e:	781b      	ldrb	r3, [r3, #0]
 8012350:	009b      	lsls	r3, r3, #2
 8012352:	18d3      	adds	r3, r2, r3
 8012354:	183a      	adds	r2, r7, r0
 8012356:	8812      	ldrh	r2, [r2, #0]
 8012358:	4912      	ldr	r1, [pc, #72]	@ (80123a4 <USB_DeactivateEndpoint+0x374>)
 801235a:	430a      	orrs	r2, r1
 801235c:	b292      	uxth	r2, r2
 801235e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8012360:	687a      	ldr	r2, [r7, #4]
 8012362:	683b      	ldr	r3, [r7, #0]
 8012364:	781b      	ldrb	r3, [r3, #0]
 8012366:	009b      	lsls	r3, r3, #2
 8012368:	18d3      	adds	r3, r2, r3
 801236a:	881b      	ldrh	r3, [r3, #0]
 801236c:	b29a      	uxth	r2, r3
 801236e:	2022      	movs	r0, #34	@ 0x22
 8012370:	183b      	adds	r3, r7, r0
 8012372:	490e      	ldr	r1, [pc, #56]	@ (80123ac <USB_DeactivateEndpoint+0x37c>)
 8012374:	400a      	ands	r2, r1
 8012376:	801a      	strh	r2, [r3, #0]
 8012378:	687a      	ldr	r2, [r7, #4]
 801237a:	683b      	ldr	r3, [r7, #0]
 801237c:	781b      	ldrb	r3, [r3, #0]
 801237e:	009b      	lsls	r3, r3, #2
 8012380:	18d3      	adds	r3, r2, r3
 8012382:	183a      	adds	r2, r7, r0
 8012384:	8812      	ldrh	r2, [r2, #0]
 8012386:	4907      	ldr	r1, [pc, #28]	@ (80123a4 <USB_DeactivateEndpoint+0x374>)
 8012388:	430a      	orrs	r2, r1
 801238a:	b292      	uxth	r2, r2
 801238c:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801238e:	2300      	movs	r3, #0
}
 8012390:	0018      	movs	r0, r3
 8012392:	46bd      	mov	sp, r7
 8012394:	b00c      	add	sp, #48	@ 0x30
 8012396:	bd80      	pop	{r7, pc}
 8012398:	ffff8f8f 	.word	0xffff8f8f
 801239c:	ffff80c0 	.word	0xffff80c0
 80123a0:	ffff8fbf 	.word	0xffff8fbf
 80123a4:	ffff8080 	.word	0xffff8080
 80123a8:	ffffc080 	.word	0xffffc080
 80123ac:	ffffbf8f 	.word	0xffffbf8f

080123b0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80123b0:	b590      	push	{r4, r7, lr}
 80123b2:	b0c3      	sub	sp, #268	@ 0x10c
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
 80123b8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80123ba:	683b      	ldr	r3, [r7, #0]
 80123bc:	785b      	ldrb	r3, [r3, #1]
 80123be:	2b01      	cmp	r3, #1
 80123c0:	d001      	beq.n	80123c6 <USB_EPStartXfer+0x16>
 80123c2:	f000 fd2d 	bl	8012e20 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80123c6:	683b      	ldr	r3, [r7, #0]
 80123c8:	699a      	ldr	r2, [r3, #24]
 80123ca:	683b      	ldr	r3, [r7, #0]
 80123cc:	691b      	ldr	r3, [r3, #16]
 80123ce:	429a      	cmp	r2, r3
 80123d0:	d905      	bls.n	80123de <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80123d2:	683b      	ldr	r3, [r7, #0]
 80123d4:	691b      	ldr	r3, [r3, #16]
 80123d6:	1d7a      	adds	r2, r7, #5
 80123d8:	32ff      	adds	r2, #255	@ 0xff
 80123da:	6013      	str	r3, [r2, #0]
 80123dc:	e004      	b.n	80123e8 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	699b      	ldr	r3, [r3, #24]
 80123e2:	1d7a      	adds	r2, r7, #5
 80123e4:	32ff      	adds	r2, #255	@ 0xff
 80123e6:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80123e8:	683b      	ldr	r3, [r7, #0]
 80123ea:	7b1b      	ldrb	r3, [r3, #12]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d125      	bne.n	801243c <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80123f0:	683b      	ldr	r3, [r7, #0]
 80123f2:	6959      	ldr	r1, [r3, #20]
 80123f4:	683b      	ldr	r3, [r7, #0]
 80123f6:	88da      	ldrh	r2, [r3, #6]
 80123f8:	1d7b      	adds	r3, r7, #5
 80123fa:	33ff      	adds	r3, #255	@ 0xff
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	b29b      	uxth	r3, r3
 8012400:	6878      	ldr	r0, [r7, #4]
 8012402:	f001 fa47 	bl	8013894 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	613b      	str	r3, [r7, #16]
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	2250      	movs	r2, #80	@ 0x50
 801240e:	5a9b      	ldrh	r3, [r3, r2]
 8012410:	b29b      	uxth	r3, r3
 8012412:	001a      	movs	r2, r3
 8012414:	693b      	ldr	r3, [r7, #16]
 8012416:	189b      	adds	r3, r3, r2
 8012418:	613b      	str	r3, [r7, #16]
 801241a:	683b      	ldr	r3, [r7, #0]
 801241c:	781b      	ldrb	r3, [r3, #0]
 801241e:	00da      	lsls	r2, r3, #3
 8012420:	693b      	ldr	r3, [r7, #16]
 8012422:	18d3      	adds	r3, r2, r3
 8012424:	4ad7      	ldr	r2, [pc, #860]	@ (8012784 <USB_EPStartXfer+0x3d4>)
 8012426:	4694      	mov	ip, r2
 8012428:	4463      	add	r3, ip
 801242a:	60fb      	str	r3, [r7, #12]
 801242c:	1d7b      	adds	r3, r7, #5
 801242e:	33ff      	adds	r3, #255	@ 0xff
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	b29a      	uxth	r2, r3
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	801a      	strh	r2, [r3, #0]
 8012438:	f000 fccd 	bl	8012dd6 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801243c:	683b      	ldr	r3, [r7, #0]
 801243e:	78db      	ldrb	r3, [r3, #3]
 8012440:	2b02      	cmp	r3, #2
 8012442:	d000      	beq.n	8012446 <USB_EPStartXfer+0x96>
 8012444:	e362      	b.n	8012b0c <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8012446:	683b      	ldr	r3, [r7, #0]
 8012448:	6a1a      	ldr	r2, [r3, #32]
 801244a:	683b      	ldr	r3, [r7, #0]
 801244c:	691b      	ldr	r3, [r3, #16]
 801244e:	429a      	cmp	r2, r3
 8012450:	d800      	bhi.n	8012454 <USB_EPStartXfer+0xa4>
 8012452:	e309      	b.n	8012a68 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8012454:	687a      	ldr	r2, [r7, #4]
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	781b      	ldrb	r3, [r3, #0]
 801245a:	009b      	lsls	r3, r3, #2
 801245c:	18d3      	adds	r3, r2, r3
 801245e:	881b      	ldrh	r3, [r3, #0]
 8012460:	b29a      	uxth	r2, r3
 8012462:	2056      	movs	r0, #86	@ 0x56
 8012464:	183b      	adds	r3, r7, r0
 8012466:	49c8      	ldr	r1, [pc, #800]	@ (8012788 <USB_EPStartXfer+0x3d8>)
 8012468:	400a      	ands	r2, r1
 801246a:	801a      	strh	r2, [r3, #0]
 801246c:	687a      	ldr	r2, [r7, #4]
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	781b      	ldrb	r3, [r3, #0]
 8012472:	009b      	lsls	r3, r3, #2
 8012474:	18d3      	adds	r3, r2, r3
 8012476:	183a      	adds	r2, r7, r0
 8012478:	8812      	ldrh	r2, [r2, #0]
 801247a:	49c4      	ldr	r1, [pc, #784]	@ (801278c <USB_EPStartXfer+0x3dc>)
 801247c:	430a      	orrs	r2, r1
 801247e:	b292      	uxth	r2, r2
 8012480:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8012482:	683b      	ldr	r3, [r7, #0]
 8012484:	6a1a      	ldr	r2, [r3, #32]
 8012486:	1d7b      	adds	r3, r7, #5
 8012488:	33ff      	adds	r3, #255	@ 0xff
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	1ad2      	subs	r2, r2, r3
 801248e:	683b      	ldr	r3, [r7, #0]
 8012490:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8012492:	687a      	ldr	r2, [r7, #4]
 8012494:	683b      	ldr	r3, [r7, #0]
 8012496:	781b      	ldrb	r3, [r3, #0]
 8012498:	009b      	lsls	r3, r3, #2
 801249a:	18d3      	adds	r3, r2, r3
 801249c:	881b      	ldrh	r3, [r3, #0]
 801249e:	b29b      	uxth	r3, r3
 80124a0:	001a      	movs	r2, r3
 80124a2:	2340      	movs	r3, #64	@ 0x40
 80124a4:	4013      	ands	r3, r2
 80124a6:	d100      	bne.n	80124aa <USB_EPStartXfer+0xfa>
 80124a8:	e176      	b.n	8012798 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	785b      	ldrb	r3, [r3, #1]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d000      	beq.n	80124b8 <USB_EPStartXfer+0x108>
 80124b6:	e074      	b.n	80125a2 <USB_EPStartXfer+0x1f2>
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	2250      	movs	r2, #80	@ 0x50
 80124c0:	5a9b      	ldrh	r3, [r3, r2]
 80124c2:	b29b      	uxth	r3, r3
 80124c4:	001a      	movs	r2, r3
 80124c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124c8:	189b      	adds	r3, r3, r2
 80124ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80124cc:	683b      	ldr	r3, [r7, #0]
 80124ce:	781b      	ldrb	r3, [r3, #0]
 80124d0:	00da      	lsls	r2, r3, #3
 80124d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124d4:	18d3      	adds	r3, r2, r3
 80124d6:	4aae      	ldr	r2, [pc, #696]	@ (8012790 <USB_EPStartXfer+0x3e0>)
 80124d8:	4694      	mov	ip, r2
 80124da:	4463      	add	r3, ip
 80124dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80124de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124e0:	881b      	ldrh	r3, [r3, #0]
 80124e2:	b29b      	uxth	r3, r3
 80124e4:	059b      	lsls	r3, r3, #22
 80124e6:	0d9b      	lsrs	r3, r3, #22
 80124e8:	b29a      	uxth	r2, r3
 80124ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124ec:	801a      	strh	r2, [r3, #0]
 80124ee:	1d7b      	adds	r3, r7, #5
 80124f0:	33ff      	adds	r3, #255	@ 0xff
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80124f6:	d924      	bls.n	8012542 <USB_EPStartXfer+0x192>
 80124f8:	1d7b      	adds	r3, r7, #5
 80124fa:	33ff      	adds	r3, #255	@ 0xff
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	095b      	lsrs	r3, r3, #5
 8012500:	1c7a      	adds	r2, r7, #1
 8012502:	32ff      	adds	r2, #255	@ 0xff
 8012504:	6013      	str	r3, [r2, #0]
 8012506:	1d7b      	adds	r3, r7, #5
 8012508:	33ff      	adds	r3, #255	@ 0xff
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	221f      	movs	r2, #31
 801250e:	4013      	ands	r3, r2
 8012510:	d106      	bne.n	8012520 <USB_EPStartXfer+0x170>
 8012512:	1c7b      	adds	r3, r7, #1
 8012514:	33ff      	adds	r3, #255	@ 0xff
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	3b01      	subs	r3, #1
 801251a:	1c7a      	adds	r2, r7, #1
 801251c:	32ff      	adds	r2, #255	@ 0xff
 801251e:	6013      	str	r3, [r2, #0]
 8012520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012522:	881b      	ldrh	r3, [r3, #0]
 8012524:	b29a      	uxth	r2, r3
 8012526:	1c7b      	adds	r3, r7, #1
 8012528:	33ff      	adds	r3, #255	@ 0xff
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	b29b      	uxth	r3, r3
 801252e:	029b      	lsls	r3, r3, #10
 8012530:	b29b      	uxth	r3, r3
 8012532:	4313      	orrs	r3, r2
 8012534:	b29b      	uxth	r3, r3
 8012536:	4a97      	ldr	r2, [pc, #604]	@ (8012794 <USB_EPStartXfer+0x3e4>)
 8012538:	4313      	orrs	r3, r2
 801253a:	b29a      	uxth	r2, r3
 801253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801253e:	801a      	strh	r2, [r3, #0]
 8012540:	e04a      	b.n	80125d8 <USB_EPStartXfer+0x228>
 8012542:	1d7b      	adds	r3, r7, #5
 8012544:	33ff      	adds	r3, #255	@ 0xff
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d108      	bne.n	801255e <USB_EPStartXfer+0x1ae>
 801254c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801254e:	881b      	ldrh	r3, [r3, #0]
 8012550:	b29b      	uxth	r3, r3
 8012552:	4a90      	ldr	r2, [pc, #576]	@ (8012794 <USB_EPStartXfer+0x3e4>)
 8012554:	4313      	orrs	r3, r2
 8012556:	b29a      	uxth	r2, r3
 8012558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801255a:	801a      	strh	r2, [r3, #0]
 801255c:	e03c      	b.n	80125d8 <USB_EPStartXfer+0x228>
 801255e:	1d7b      	adds	r3, r7, #5
 8012560:	33ff      	adds	r3, #255	@ 0xff
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	085b      	lsrs	r3, r3, #1
 8012566:	1c7a      	adds	r2, r7, #1
 8012568:	32ff      	adds	r2, #255	@ 0xff
 801256a:	6013      	str	r3, [r2, #0]
 801256c:	1d7b      	adds	r3, r7, #5
 801256e:	33ff      	adds	r3, #255	@ 0xff
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	2201      	movs	r2, #1
 8012574:	4013      	ands	r3, r2
 8012576:	d006      	beq.n	8012586 <USB_EPStartXfer+0x1d6>
 8012578:	1c7b      	adds	r3, r7, #1
 801257a:	33ff      	adds	r3, #255	@ 0xff
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	3301      	adds	r3, #1
 8012580:	1c7a      	adds	r2, r7, #1
 8012582:	32ff      	adds	r2, #255	@ 0xff
 8012584:	6013      	str	r3, [r2, #0]
 8012586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012588:	881b      	ldrh	r3, [r3, #0]
 801258a:	b29a      	uxth	r2, r3
 801258c:	1c7b      	adds	r3, r7, #1
 801258e:	33ff      	adds	r3, #255	@ 0xff
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	b29b      	uxth	r3, r3
 8012594:	029b      	lsls	r3, r3, #10
 8012596:	b29b      	uxth	r3, r3
 8012598:	4313      	orrs	r3, r2
 801259a:	b29a      	uxth	r2, r3
 801259c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801259e:	801a      	strh	r2, [r3, #0]
 80125a0:	e01a      	b.n	80125d8 <USB_EPStartXfer+0x228>
 80125a2:	683b      	ldr	r3, [r7, #0]
 80125a4:	785b      	ldrb	r3, [r3, #1]
 80125a6:	2b01      	cmp	r3, #1
 80125a8:	d116      	bne.n	80125d8 <USB_EPStartXfer+0x228>
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	2250      	movs	r2, #80	@ 0x50
 80125ae:	5a9b      	ldrh	r3, [r3, r2]
 80125b0:	b29b      	uxth	r3, r3
 80125b2:	001a      	movs	r2, r3
 80125b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125b6:	189b      	adds	r3, r3, r2
 80125b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80125ba:	683b      	ldr	r3, [r7, #0]
 80125bc:	781b      	ldrb	r3, [r3, #0]
 80125be:	00da      	lsls	r2, r3, #3
 80125c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125c2:	18d3      	adds	r3, r2, r3
 80125c4:	4a72      	ldr	r2, [pc, #456]	@ (8012790 <USB_EPStartXfer+0x3e0>)
 80125c6:	4694      	mov	ip, r2
 80125c8:	4463      	add	r3, ip
 80125ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80125cc:	1d7b      	adds	r3, r7, #5
 80125ce:	33ff      	adds	r3, #255	@ 0xff
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	b29a      	uxth	r2, r3
 80125d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80125d8:	2076      	movs	r0, #118	@ 0x76
 80125da:	183b      	adds	r3, r7, r0
 80125dc:	683a      	ldr	r2, [r7, #0]
 80125de:	8952      	ldrh	r2, [r2, #10]
 80125e0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80125e2:	683b      	ldr	r3, [r7, #0]
 80125e4:	6959      	ldr	r1, [r3, #20]
 80125e6:	1d7b      	adds	r3, r7, #5
 80125e8:	33ff      	adds	r3, #255	@ 0xff
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	b29c      	uxth	r4, r3
 80125ee:	183b      	adds	r3, r7, r0
 80125f0:	881a      	ldrh	r2, [r3, #0]
 80125f2:	6878      	ldr	r0, [r7, #4]
 80125f4:	0023      	movs	r3, r4
 80125f6:	f001 f94d 	bl	8013894 <USB_WritePMA>
            ep->xfer_buff += len;
 80125fa:	683b      	ldr	r3, [r7, #0]
 80125fc:	695a      	ldr	r2, [r3, #20]
 80125fe:	1d7b      	adds	r3, r7, #5
 8012600:	33ff      	adds	r3, #255	@ 0xff
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	18d2      	adds	r2, r2, r3
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801260a:	683b      	ldr	r3, [r7, #0]
 801260c:	6a1a      	ldr	r2, [r3, #32]
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	691b      	ldr	r3, [r3, #16]
 8012612:	429a      	cmp	r2, r3
 8012614:	d908      	bls.n	8012628 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	6a1a      	ldr	r2, [r3, #32]
 801261a:	1d7b      	adds	r3, r7, #5
 801261c:	33ff      	adds	r3, #255	@ 0xff
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	1ad2      	subs	r2, r2, r3
 8012622:	683b      	ldr	r3, [r7, #0]
 8012624:	621a      	str	r2, [r3, #32]
 8012626:	e007      	b.n	8012638 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8012628:	683b      	ldr	r3, [r7, #0]
 801262a:	6a1b      	ldr	r3, [r3, #32]
 801262c:	1d7a      	adds	r2, r7, #5
 801262e:	32ff      	adds	r2, #255	@ 0xff
 8012630:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	2200      	movs	r2, #0
 8012636:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012638:	683b      	ldr	r3, [r7, #0]
 801263a:	785b      	ldrb	r3, [r3, #1]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d000      	beq.n	8012642 <USB_EPStartXfer+0x292>
 8012640:	e070      	b.n	8012724 <USB_EPStartXfer+0x374>
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	61bb      	str	r3, [r7, #24]
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	2250      	movs	r2, #80	@ 0x50
 801264a:	5a9b      	ldrh	r3, [r3, r2]
 801264c:	b29b      	uxth	r3, r3
 801264e:	001a      	movs	r2, r3
 8012650:	69bb      	ldr	r3, [r7, #24]
 8012652:	189b      	adds	r3, r3, r2
 8012654:	61bb      	str	r3, [r7, #24]
 8012656:	683b      	ldr	r3, [r7, #0]
 8012658:	781b      	ldrb	r3, [r3, #0]
 801265a:	00da      	lsls	r2, r3, #3
 801265c:	69bb      	ldr	r3, [r7, #24]
 801265e:	18d3      	adds	r3, r2, r3
 8012660:	4a48      	ldr	r2, [pc, #288]	@ (8012784 <USB_EPStartXfer+0x3d4>)
 8012662:	4694      	mov	ip, r2
 8012664:	4463      	add	r3, ip
 8012666:	617b      	str	r3, [r7, #20]
 8012668:	697b      	ldr	r3, [r7, #20]
 801266a:	881b      	ldrh	r3, [r3, #0]
 801266c:	b29b      	uxth	r3, r3
 801266e:	059b      	lsls	r3, r3, #22
 8012670:	0d9b      	lsrs	r3, r3, #22
 8012672:	b29a      	uxth	r2, r3
 8012674:	697b      	ldr	r3, [r7, #20]
 8012676:	801a      	strh	r2, [r3, #0]
 8012678:	1d7b      	adds	r3, r7, #5
 801267a:	33ff      	adds	r3, #255	@ 0xff
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	2b3e      	cmp	r3, #62	@ 0x3e
 8012680:	d922      	bls.n	80126c8 <USB_EPStartXfer+0x318>
 8012682:	1d7b      	adds	r3, r7, #5
 8012684:	33ff      	adds	r3, #255	@ 0xff
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	095b      	lsrs	r3, r3, #5
 801268a:	21fc      	movs	r1, #252	@ 0xfc
 801268c:	187a      	adds	r2, r7, r1
 801268e:	6013      	str	r3, [r2, #0]
 8012690:	1d7b      	adds	r3, r7, #5
 8012692:	33ff      	adds	r3, #255	@ 0xff
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	221f      	movs	r2, #31
 8012698:	4013      	ands	r3, r2
 801269a:	d104      	bne.n	80126a6 <USB_EPStartXfer+0x2f6>
 801269c:	187b      	adds	r3, r7, r1
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	3b01      	subs	r3, #1
 80126a2:	187a      	adds	r2, r7, r1
 80126a4:	6013      	str	r3, [r2, #0]
 80126a6:	697b      	ldr	r3, [r7, #20]
 80126a8:	881b      	ldrh	r3, [r3, #0]
 80126aa:	b29a      	uxth	r2, r3
 80126ac:	23fc      	movs	r3, #252	@ 0xfc
 80126ae:	18fb      	adds	r3, r7, r3
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	b29b      	uxth	r3, r3
 80126b4:	029b      	lsls	r3, r3, #10
 80126b6:	b29b      	uxth	r3, r3
 80126b8:	4313      	orrs	r3, r2
 80126ba:	b29b      	uxth	r3, r3
 80126bc:	4a35      	ldr	r2, [pc, #212]	@ (8012794 <USB_EPStartXfer+0x3e4>)
 80126be:	4313      	orrs	r3, r2
 80126c0:	b29a      	uxth	r2, r3
 80126c2:	697b      	ldr	r3, [r7, #20]
 80126c4:	801a      	strh	r2, [r3, #0]
 80126c6:	e04a      	b.n	801275e <USB_EPStartXfer+0x3ae>
 80126c8:	1d7b      	adds	r3, r7, #5
 80126ca:	33ff      	adds	r3, #255	@ 0xff
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d108      	bne.n	80126e4 <USB_EPStartXfer+0x334>
 80126d2:	697b      	ldr	r3, [r7, #20]
 80126d4:	881b      	ldrh	r3, [r3, #0]
 80126d6:	b29b      	uxth	r3, r3
 80126d8:	4a2e      	ldr	r2, [pc, #184]	@ (8012794 <USB_EPStartXfer+0x3e4>)
 80126da:	4313      	orrs	r3, r2
 80126dc:	b29a      	uxth	r2, r3
 80126de:	697b      	ldr	r3, [r7, #20]
 80126e0:	801a      	strh	r2, [r3, #0]
 80126e2:	e03c      	b.n	801275e <USB_EPStartXfer+0x3ae>
 80126e4:	1d7b      	adds	r3, r7, #5
 80126e6:	33ff      	adds	r3, #255	@ 0xff
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	085b      	lsrs	r3, r3, #1
 80126ec:	21fc      	movs	r1, #252	@ 0xfc
 80126ee:	187a      	adds	r2, r7, r1
 80126f0:	6013      	str	r3, [r2, #0]
 80126f2:	1d7b      	adds	r3, r7, #5
 80126f4:	33ff      	adds	r3, #255	@ 0xff
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	2201      	movs	r2, #1
 80126fa:	4013      	ands	r3, r2
 80126fc:	d004      	beq.n	8012708 <USB_EPStartXfer+0x358>
 80126fe:	187b      	adds	r3, r7, r1
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	3301      	adds	r3, #1
 8012704:	187a      	adds	r2, r7, r1
 8012706:	6013      	str	r3, [r2, #0]
 8012708:	697b      	ldr	r3, [r7, #20]
 801270a:	881b      	ldrh	r3, [r3, #0]
 801270c:	b29a      	uxth	r2, r3
 801270e:	23fc      	movs	r3, #252	@ 0xfc
 8012710:	18fb      	adds	r3, r7, r3
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	b29b      	uxth	r3, r3
 8012716:	029b      	lsls	r3, r3, #10
 8012718:	b29b      	uxth	r3, r3
 801271a:	4313      	orrs	r3, r2
 801271c:	b29a      	uxth	r2, r3
 801271e:	697b      	ldr	r3, [r7, #20]
 8012720:	801a      	strh	r2, [r3, #0]
 8012722:	e01c      	b.n	801275e <USB_EPStartXfer+0x3ae>
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	785b      	ldrb	r3, [r3, #1]
 8012728:	2b01      	cmp	r3, #1
 801272a:	d118      	bne.n	801275e <USB_EPStartXfer+0x3ae>
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	623b      	str	r3, [r7, #32]
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	2250      	movs	r2, #80	@ 0x50
 8012734:	5a9b      	ldrh	r3, [r3, r2]
 8012736:	b29b      	uxth	r3, r3
 8012738:	001a      	movs	r2, r3
 801273a:	6a3b      	ldr	r3, [r7, #32]
 801273c:	189b      	adds	r3, r3, r2
 801273e:	623b      	str	r3, [r7, #32]
 8012740:	683b      	ldr	r3, [r7, #0]
 8012742:	781b      	ldrb	r3, [r3, #0]
 8012744:	00da      	lsls	r2, r3, #3
 8012746:	6a3b      	ldr	r3, [r7, #32]
 8012748:	18d3      	adds	r3, r2, r3
 801274a:	4a0e      	ldr	r2, [pc, #56]	@ (8012784 <USB_EPStartXfer+0x3d4>)
 801274c:	4694      	mov	ip, r2
 801274e:	4463      	add	r3, ip
 8012750:	61fb      	str	r3, [r7, #28]
 8012752:	1d7b      	adds	r3, r7, #5
 8012754:	33ff      	adds	r3, #255	@ 0xff
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	b29a      	uxth	r2, r3
 801275a:	69fb      	ldr	r3, [r7, #28]
 801275c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801275e:	2076      	movs	r0, #118	@ 0x76
 8012760:	183b      	adds	r3, r7, r0
 8012762:	683a      	ldr	r2, [r7, #0]
 8012764:	8912      	ldrh	r2, [r2, #8]
 8012766:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	6959      	ldr	r1, [r3, #20]
 801276c:	1d7b      	adds	r3, r7, #5
 801276e:	33ff      	adds	r3, #255	@ 0xff
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	b29c      	uxth	r4, r3
 8012774:	183b      	adds	r3, r7, r0
 8012776:	881a      	ldrh	r2, [r3, #0]
 8012778:	6878      	ldr	r0, [r7, #4]
 801277a:	0023      	movs	r3, r4
 801277c:	f001 f88a 	bl	8013894 <USB_WritePMA>
 8012780:	e329      	b.n	8012dd6 <USB_EPStartXfer+0xa26>
 8012782:	46c0      	nop			@ (mov r8, r8)
 8012784:	00000402 	.word	0x00000402
 8012788:	ffff8f8f 	.word	0xffff8f8f
 801278c:	ffff8180 	.word	0xffff8180
 8012790:	00000406 	.word	0x00000406
 8012794:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	785b      	ldrb	r3, [r3, #1]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d000      	beq.n	80127a2 <USB_EPStartXfer+0x3f2>
 80127a0:	e070      	b.n	8012884 <USB_EPStartXfer+0x4d4>
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	2250      	movs	r2, #80	@ 0x50
 80127aa:	5a9b      	ldrh	r3, [r3, r2]
 80127ac:	b29b      	uxth	r3, r3
 80127ae:	001a      	movs	r2, r3
 80127b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80127b2:	189b      	adds	r3, r3, r2
 80127b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80127b6:	683b      	ldr	r3, [r7, #0]
 80127b8:	781b      	ldrb	r3, [r3, #0]
 80127ba:	00da      	lsls	r2, r3, #3
 80127bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80127be:	18d3      	adds	r3, r2, r3
 80127c0:	4acd      	ldr	r2, [pc, #820]	@ (8012af8 <USB_EPStartXfer+0x748>)
 80127c2:	4694      	mov	ip, r2
 80127c4:	4463      	add	r3, ip
 80127c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80127c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80127ca:	881b      	ldrh	r3, [r3, #0]
 80127cc:	b29b      	uxth	r3, r3
 80127ce:	059b      	lsls	r3, r3, #22
 80127d0:	0d9b      	lsrs	r3, r3, #22
 80127d2:	b29a      	uxth	r2, r3
 80127d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80127d6:	801a      	strh	r2, [r3, #0]
 80127d8:	1d7b      	adds	r3, r7, #5
 80127da:	33ff      	adds	r3, #255	@ 0xff
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	2b3e      	cmp	r3, #62	@ 0x3e
 80127e0:	d922      	bls.n	8012828 <USB_EPStartXfer+0x478>
 80127e2:	1d7b      	adds	r3, r7, #5
 80127e4:	33ff      	adds	r3, #255	@ 0xff
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	095b      	lsrs	r3, r3, #5
 80127ea:	21f8      	movs	r1, #248	@ 0xf8
 80127ec:	187a      	adds	r2, r7, r1
 80127ee:	6013      	str	r3, [r2, #0]
 80127f0:	1d7b      	adds	r3, r7, #5
 80127f2:	33ff      	adds	r3, #255	@ 0xff
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	221f      	movs	r2, #31
 80127f8:	4013      	ands	r3, r2
 80127fa:	d104      	bne.n	8012806 <USB_EPStartXfer+0x456>
 80127fc:	187b      	adds	r3, r7, r1
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	3b01      	subs	r3, #1
 8012802:	187a      	adds	r2, r7, r1
 8012804:	6013      	str	r3, [r2, #0]
 8012806:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012808:	881b      	ldrh	r3, [r3, #0]
 801280a:	b29a      	uxth	r2, r3
 801280c:	23f8      	movs	r3, #248	@ 0xf8
 801280e:	18fb      	adds	r3, r7, r3
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	b29b      	uxth	r3, r3
 8012814:	029b      	lsls	r3, r3, #10
 8012816:	b29b      	uxth	r3, r3
 8012818:	4313      	orrs	r3, r2
 801281a:	b29b      	uxth	r3, r3
 801281c:	4ab7      	ldr	r2, [pc, #732]	@ (8012afc <USB_EPStartXfer+0x74c>)
 801281e:	4313      	orrs	r3, r2
 8012820:	b29a      	uxth	r2, r3
 8012822:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012824:	801a      	strh	r2, [r3, #0]
 8012826:	e04a      	b.n	80128be <USB_EPStartXfer+0x50e>
 8012828:	1d7b      	adds	r3, r7, #5
 801282a:	33ff      	adds	r3, #255	@ 0xff
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d108      	bne.n	8012844 <USB_EPStartXfer+0x494>
 8012832:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012834:	881b      	ldrh	r3, [r3, #0]
 8012836:	b29b      	uxth	r3, r3
 8012838:	4ab0      	ldr	r2, [pc, #704]	@ (8012afc <USB_EPStartXfer+0x74c>)
 801283a:	4313      	orrs	r3, r2
 801283c:	b29a      	uxth	r2, r3
 801283e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012840:	801a      	strh	r2, [r3, #0]
 8012842:	e03c      	b.n	80128be <USB_EPStartXfer+0x50e>
 8012844:	1d7b      	adds	r3, r7, #5
 8012846:	33ff      	adds	r3, #255	@ 0xff
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	085b      	lsrs	r3, r3, #1
 801284c:	21f8      	movs	r1, #248	@ 0xf8
 801284e:	187a      	adds	r2, r7, r1
 8012850:	6013      	str	r3, [r2, #0]
 8012852:	1d7b      	adds	r3, r7, #5
 8012854:	33ff      	adds	r3, #255	@ 0xff
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	2201      	movs	r2, #1
 801285a:	4013      	ands	r3, r2
 801285c:	d004      	beq.n	8012868 <USB_EPStartXfer+0x4b8>
 801285e:	187b      	adds	r3, r7, r1
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	3301      	adds	r3, #1
 8012864:	187a      	adds	r2, r7, r1
 8012866:	6013      	str	r3, [r2, #0]
 8012868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801286a:	881b      	ldrh	r3, [r3, #0]
 801286c:	b29a      	uxth	r2, r3
 801286e:	23f8      	movs	r3, #248	@ 0xf8
 8012870:	18fb      	adds	r3, r7, r3
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	b29b      	uxth	r3, r3
 8012876:	029b      	lsls	r3, r3, #10
 8012878:	b29b      	uxth	r3, r3
 801287a:	4313      	orrs	r3, r2
 801287c:	b29a      	uxth	r2, r3
 801287e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012880:	801a      	strh	r2, [r3, #0]
 8012882:	e01c      	b.n	80128be <USB_EPStartXfer+0x50e>
 8012884:	683b      	ldr	r3, [r7, #0]
 8012886:	785b      	ldrb	r3, [r3, #1]
 8012888:	2b01      	cmp	r3, #1
 801288a:	d118      	bne.n	80128be <USB_EPStartXfer+0x50e>
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	653b      	str	r3, [r7, #80]	@ 0x50
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	2250      	movs	r2, #80	@ 0x50
 8012894:	5a9b      	ldrh	r3, [r3, r2]
 8012896:	b29b      	uxth	r3, r3
 8012898:	001a      	movs	r2, r3
 801289a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801289c:	189b      	adds	r3, r3, r2
 801289e:	653b      	str	r3, [r7, #80]	@ 0x50
 80128a0:	683b      	ldr	r3, [r7, #0]
 80128a2:	781b      	ldrb	r3, [r3, #0]
 80128a4:	00da      	lsls	r2, r3, #3
 80128a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80128a8:	18d3      	adds	r3, r2, r3
 80128aa:	4a93      	ldr	r2, [pc, #588]	@ (8012af8 <USB_EPStartXfer+0x748>)
 80128ac:	4694      	mov	ip, r2
 80128ae:	4463      	add	r3, ip
 80128b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80128b2:	1d7b      	adds	r3, r7, #5
 80128b4:	33ff      	adds	r3, #255	@ 0xff
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	b29a      	uxth	r2, r3
 80128ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80128bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80128be:	2076      	movs	r0, #118	@ 0x76
 80128c0:	183b      	adds	r3, r7, r0
 80128c2:	683a      	ldr	r2, [r7, #0]
 80128c4:	8912      	ldrh	r2, [r2, #8]
 80128c6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80128c8:	683b      	ldr	r3, [r7, #0]
 80128ca:	6959      	ldr	r1, [r3, #20]
 80128cc:	1d7b      	adds	r3, r7, #5
 80128ce:	33ff      	adds	r3, #255	@ 0xff
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	b29c      	uxth	r4, r3
 80128d4:	183b      	adds	r3, r7, r0
 80128d6:	881a      	ldrh	r2, [r3, #0]
 80128d8:	6878      	ldr	r0, [r7, #4]
 80128da:	0023      	movs	r3, r4
 80128dc:	f000 ffda 	bl	8013894 <USB_WritePMA>
            ep->xfer_buff += len;
 80128e0:	683b      	ldr	r3, [r7, #0]
 80128e2:	695a      	ldr	r2, [r3, #20]
 80128e4:	1d7b      	adds	r3, r7, #5
 80128e6:	33ff      	adds	r3, #255	@ 0xff
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	18d2      	adds	r2, r2, r3
 80128ec:	683b      	ldr	r3, [r7, #0]
 80128ee:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80128f0:	683b      	ldr	r3, [r7, #0]
 80128f2:	6a1a      	ldr	r2, [r3, #32]
 80128f4:	683b      	ldr	r3, [r7, #0]
 80128f6:	691b      	ldr	r3, [r3, #16]
 80128f8:	429a      	cmp	r2, r3
 80128fa:	d908      	bls.n	801290e <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80128fc:	683b      	ldr	r3, [r7, #0]
 80128fe:	6a1a      	ldr	r2, [r3, #32]
 8012900:	1d7b      	adds	r3, r7, #5
 8012902:	33ff      	adds	r3, #255	@ 0xff
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	1ad2      	subs	r2, r2, r3
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	621a      	str	r2, [r3, #32]
 801290c:	e007      	b.n	801291e <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801290e:	683b      	ldr	r3, [r7, #0]
 8012910:	6a1b      	ldr	r3, [r3, #32]
 8012912:	1d7a      	adds	r2, r7, #5
 8012914:	32ff      	adds	r2, #255	@ 0xff
 8012916:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8012918:	683b      	ldr	r3, [r7, #0]
 801291a:	2200      	movs	r2, #0
 801291c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	643b      	str	r3, [r7, #64]	@ 0x40
 8012922:	683b      	ldr	r3, [r7, #0]
 8012924:	785b      	ldrb	r3, [r3, #1]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d000      	beq.n	801292c <USB_EPStartXfer+0x57c>
 801292a:	e070      	b.n	8012a0e <USB_EPStartXfer+0x65e>
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2250      	movs	r2, #80	@ 0x50
 8012934:	5a9b      	ldrh	r3, [r3, r2]
 8012936:	b29b      	uxth	r3, r3
 8012938:	001a      	movs	r2, r3
 801293a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801293c:	189b      	adds	r3, r3, r2
 801293e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012940:	683b      	ldr	r3, [r7, #0]
 8012942:	781b      	ldrb	r3, [r3, #0]
 8012944:	00da      	lsls	r2, r3, #3
 8012946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012948:	18d3      	adds	r3, r2, r3
 801294a:	4a6d      	ldr	r2, [pc, #436]	@ (8012b00 <USB_EPStartXfer+0x750>)
 801294c:	4694      	mov	ip, r2
 801294e:	4463      	add	r3, ip
 8012950:	637b      	str	r3, [r7, #52]	@ 0x34
 8012952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012954:	881b      	ldrh	r3, [r3, #0]
 8012956:	b29b      	uxth	r3, r3
 8012958:	059b      	lsls	r3, r3, #22
 801295a:	0d9b      	lsrs	r3, r3, #22
 801295c:	b29a      	uxth	r2, r3
 801295e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012960:	801a      	strh	r2, [r3, #0]
 8012962:	1d7b      	adds	r3, r7, #5
 8012964:	33ff      	adds	r3, #255	@ 0xff
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	2b3e      	cmp	r3, #62	@ 0x3e
 801296a:	d922      	bls.n	80129b2 <USB_EPStartXfer+0x602>
 801296c:	1d7b      	adds	r3, r7, #5
 801296e:	33ff      	adds	r3, #255	@ 0xff
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	095b      	lsrs	r3, r3, #5
 8012974:	21f4      	movs	r1, #244	@ 0xf4
 8012976:	187a      	adds	r2, r7, r1
 8012978:	6013      	str	r3, [r2, #0]
 801297a:	1d7b      	adds	r3, r7, #5
 801297c:	33ff      	adds	r3, #255	@ 0xff
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	221f      	movs	r2, #31
 8012982:	4013      	ands	r3, r2
 8012984:	d104      	bne.n	8012990 <USB_EPStartXfer+0x5e0>
 8012986:	187b      	adds	r3, r7, r1
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	3b01      	subs	r3, #1
 801298c:	187a      	adds	r2, r7, r1
 801298e:	6013      	str	r3, [r2, #0]
 8012990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012992:	881b      	ldrh	r3, [r3, #0]
 8012994:	b29a      	uxth	r2, r3
 8012996:	23f4      	movs	r3, #244	@ 0xf4
 8012998:	18fb      	adds	r3, r7, r3
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	b29b      	uxth	r3, r3
 801299e:	029b      	lsls	r3, r3, #10
 80129a0:	b29b      	uxth	r3, r3
 80129a2:	4313      	orrs	r3, r2
 80129a4:	b29b      	uxth	r3, r3
 80129a6:	4a55      	ldr	r2, [pc, #340]	@ (8012afc <USB_EPStartXfer+0x74c>)
 80129a8:	4313      	orrs	r3, r2
 80129aa:	b29a      	uxth	r2, r3
 80129ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129ae:	801a      	strh	r2, [r3, #0]
 80129b0:	e048      	b.n	8012a44 <USB_EPStartXfer+0x694>
 80129b2:	1d7b      	adds	r3, r7, #5
 80129b4:	33ff      	adds	r3, #255	@ 0xff
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d108      	bne.n	80129ce <USB_EPStartXfer+0x61e>
 80129bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129be:	881b      	ldrh	r3, [r3, #0]
 80129c0:	b29b      	uxth	r3, r3
 80129c2:	4a4e      	ldr	r2, [pc, #312]	@ (8012afc <USB_EPStartXfer+0x74c>)
 80129c4:	4313      	orrs	r3, r2
 80129c6:	b29a      	uxth	r2, r3
 80129c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129ca:	801a      	strh	r2, [r3, #0]
 80129cc:	e03a      	b.n	8012a44 <USB_EPStartXfer+0x694>
 80129ce:	1d7b      	adds	r3, r7, #5
 80129d0:	33ff      	adds	r3, #255	@ 0xff
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	085b      	lsrs	r3, r3, #1
 80129d6:	21f4      	movs	r1, #244	@ 0xf4
 80129d8:	187a      	adds	r2, r7, r1
 80129da:	6013      	str	r3, [r2, #0]
 80129dc:	1d7b      	adds	r3, r7, #5
 80129de:	33ff      	adds	r3, #255	@ 0xff
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	2201      	movs	r2, #1
 80129e4:	4013      	ands	r3, r2
 80129e6:	d004      	beq.n	80129f2 <USB_EPStartXfer+0x642>
 80129e8:	187b      	adds	r3, r7, r1
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	3301      	adds	r3, #1
 80129ee:	187a      	adds	r2, r7, r1
 80129f0:	6013      	str	r3, [r2, #0]
 80129f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129f4:	881b      	ldrh	r3, [r3, #0]
 80129f6:	b29a      	uxth	r2, r3
 80129f8:	23f4      	movs	r3, #244	@ 0xf4
 80129fa:	18fb      	adds	r3, r7, r3
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	b29b      	uxth	r3, r3
 8012a00:	029b      	lsls	r3, r3, #10
 8012a02:	b29b      	uxth	r3, r3
 8012a04:	4313      	orrs	r3, r2
 8012a06:	b29a      	uxth	r2, r3
 8012a08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a0a:	801a      	strh	r2, [r3, #0]
 8012a0c:	e01a      	b.n	8012a44 <USB_EPStartXfer+0x694>
 8012a0e:	683b      	ldr	r3, [r7, #0]
 8012a10:	785b      	ldrb	r3, [r3, #1]
 8012a12:	2b01      	cmp	r3, #1
 8012a14:	d116      	bne.n	8012a44 <USB_EPStartXfer+0x694>
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	2250      	movs	r2, #80	@ 0x50
 8012a1a:	5a9b      	ldrh	r3, [r3, r2]
 8012a1c:	b29b      	uxth	r3, r3
 8012a1e:	001a      	movs	r2, r3
 8012a20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012a22:	189b      	adds	r3, r3, r2
 8012a24:	643b      	str	r3, [r7, #64]	@ 0x40
 8012a26:	683b      	ldr	r3, [r7, #0]
 8012a28:	781b      	ldrb	r3, [r3, #0]
 8012a2a:	00da      	lsls	r2, r3, #3
 8012a2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012a2e:	18d3      	adds	r3, r2, r3
 8012a30:	4a33      	ldr	r2, [pc, #204]	@ (8012b00 <USB_EPStartXfer+0x750>)
 8012a32:	4694      	mov	ip, r2
 8012a34:	4463      	add	r3, ip
 8012a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012a38:	1d7b      	adds	r3, r7, #5
 8012a3a:	33ff      	adds	r3, #255	@ 0xff
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	b29a      	uxth	r2, r3
 8012a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a42:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8012a44:	2076      	movs	r0, #118	@ 0x76
 8012a46:	183b      	adds	r3, r7, r0
 8012a48:	683a      	ldr	r2, [r7, #0]
 8012a4a:	8952      	ldrh	r2, [r2, #10]
 8012a4c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012a4e:	683b      	ldr	r3, [r7, #0]
 8012a50:	6959      	ldr	r1, [r3, #20]
 8012a52:	1d7b      	adds	r3, r7, #5
 8012a54:	33ff      	adds	r3, #255	@ 0xff
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	b29c      	uxth	r4, r3
 8012a5a:	183b      	adds	r3, r7, r0
 8012a5c:	881a      	ldrh	r2, [r3, #0]
 8012a5e:	6878      	ldr	r0, [r7, #4]
 8012a60:	0023      	movs	r3, r4
 8012a62:	f000 ff17 	bl	8013894 <USB_WritePMA>
 8012a66:	e1b6      	b.n	8012dd6 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8012a68:	683b      	ldr	r3, [r7, #0]
 8012a6a:	6a1b      	ldr	r3, [r3, #32]
 8012a6c:	1d7a      	adds	r2, r7, #5
 8012a6e:	32ff      	adds	r2, #255	@ 0xff
 8012a70:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8012a72:	687a      	ldr	r2, [r7, #4]
 8012a74:	683b      	ldr	r3, [r7, #0]
 8012a76:	781b      	ldrb	r3, [r3, #0]
 8012a78:	009b      	lsls	r3, r3, #2
 8012a7a:	18d3      	adds	r3, r2, r3
 8012a7c:	881b      	ldrh	r3, [r3, #0]
 8012a7e:	b29a      	uxth	r2, r3
 8012a80:	2062      	movs	r0, #98	@ 0x62
 8012a82:	183b      	adds	r3, r7, r0
 8012a84:	491f      	ldr	r1, [pc, #124]	@ (8012b04 <USB_EPStartXfer+0x754>)
 8012a86:	400a      	ands	r2, r1
 8012a88:	801a      	strh	r2, [r3, #0]
 8012a8a:	687a      	ldr	r2, [r7, #4]
 8012a8c:	683b      	ldr	r3, [r7, #0]
 8012a8e:	781b      	ldrb	r3, [r3, #0]
 8012a90:	009b      	lsls	r3, r3, #2
 8012a92:	18d3      	adds	r3, r2, r3
 8012a94:	183a      	adds	r2, r7, r0
 8012a96:	8812      	ldrh	r2, [r2, #0]
 8012a98:	491b      	ldr	r1, [pc, #108]	@ (8012b08 <USB_EPStartXfer+0x758>)
 8012a9a:	430a      	orrs	r2, r1
 8012a9c:	b292      	uxth	r2, r2
 8012a9e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	2250      	movs	r2, #80	@ 0x50
 8012aa8:	5a9b      	ldrh	r3, [r3, r2]
 8012aaa:	b29b      	uxth	r3, r3
 8012aac:	001a      	movs	r2, r3
 8012aae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012ab0:	189b      	adds	r3, r3, r2
 8012ab2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	781b      	ldrb	r3, [r3, #0]
 8012ab8:	00da      	lsls	r2, r3, #3
 8012aba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012abc:	18d3      	adds	r3, r2, r3
 8012abe:	4a0e      	ldr	r2, [pc, #56]	@ (8012af8 <USB_EPStartXfer+0x748>)
 8012ac0:	4694      	mov	ip, r2
 8012ac2:	4463      	add	r3, ip
 8012ac4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012ac6:	1d7b      	adds	r3, r7, #5
 8012ac8:	33ff      	adds	r3, #255	@ 0xff
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	b29a      	uxth	r2, r3
 8012ace:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012ad0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012ad2:	2076      	movs	r0, #118	@ 0x76
 8012ad4:	183b      	adds	r3, r7, r0
 8012ad6:	683a      	ldr	r2, [r7, #0]
 8012ad8:	8912      	ldrh	r2, [r2, #8]
 8012ada:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012adc:	683b      	ldr	r3, [r7, #0]
 8012ade:	6959      	ldr	r1, [r3, #20]
 8012ae0:	1d7b      	adds	r3, r7, #5
 8012ae2:	33ff      	adds	r3, #255	@ 0xff
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	b29c      	uxth	r4, r3
 8012ae8:	183b      	adds	r3, r7, r0
 8012aea:	881a      	ldrh	r2, [r3, #0]
 8012aec:	6878      	ldr	r0, [r7, #4]
 8012aee:	0023      	movs	r3, r4
 8012af0:	f000 fed0 	bl	8013894 <USB_WritePMA>
 8012af4:	e16f      	b.n	8012dd6 <USB_EPStartXfer+0xa26>
 8012af6:	46c0      	nop			@ (mov r8, r8)
 8012af8:	00000402 	.word	0x00000402
 8012afc:	ffff8000 	.word	0xffff8000
 8012b00:	00000406 	.word	0x00000406
 8012b04:	ffff8e8f 	.word	0xffff8e8f
 8012b08:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8012b0c:	683b      	ldr	r3, [r7, #0]
 8012b0e:	6a1a      	ldr	r2, [r3, #32]
 8012b10:	1d7b      	adds	r3, r7, #5
 8012b12:	33ff      	adds	r3, #255	@ 0xff
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	1ad2      	subs	r2, r2, r3
 8012b18:	683b      	ldr	r3, [r7, #0]
 8012b1a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8012b1c:	687a      	ldr	r2, [r7, #4]
 8012b1e:	683b      	ldr	r3, [r7, #0]
 8012b20:	781b      	ldrb	r3, [r3, #0]
 8012b22:	009b      	lsls	r3, r3, #2
 8012b24:	18d3      	adds	r3, r2, r3
 8012b26:	881b      	ldrh	r3, [r3, #0]
 8012b28:	b29b      	uxth	r3, r3
 8012b2a:	001a      	movs	r2, r3
 8012b2c:	2340      	movs	r3, #64	@ 0x40
 8012b2e:	4013      	ands	r3, r2
 8012b30:	d100      	bne.n	8012b34 <USB_EPStartXfer+0x784>
 8012b32:	e0a4      	b.n	8012c7e <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	673b      	str	r3, [r7, #112]	@ 0x70
 8012b38:	683b      	ldr	r3, [r7, #0]
 8012b3a:	785b      	ldrb	r3, [r3, #1]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d000      	beq.n	8012b42 <USB_EPStartXfer+0x792>
 8012b40:	e070      	b.n	8012c24 <USB_EPStartXfer+0x874>
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	2250      	movs	r2, #80	@ 0x50
 8012b4a:	5a9b      	ldrh	r3, [r3, r2]
 8012b4c:	b29b      	uxth	r3, r3
 8012b4e:	001a      	movs	r2, r3
 8012b50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012b52:	189b      	adds	r3, r3, r2
 8012b54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012b56:	683b      	ldr	r3, [r7, #0]
 8012b58:	781b      	ldrb	r3, [r3, #0]
 8012b5a:	00da      	lsls	r2, r3, #3
 8012b5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012b5e:	18d3      	adds	r3, r2, r3
 8012b60:	4abc      	ldr	r2, [pc, #752]	@ (8012e54 <USB_EPStartXfer+0xaa4>)
 8012b62:	4694      	mov	ip, r2
 8012b64:	4463      	add	r3, ip
 8012b66:	667b      	str	r3, [r7, #100]	@ 0x64
 8012b68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012b6a:	881b      	ldrh	r3, [r3, #0]
 8012b6c:	b29b      	uxth	r3, r3
 8012b6e:	059b      	lsls	r3, r3, #22
 8012b70:	0d9b      	lsrs	r3, r3, #22
 8012b72:	b29a      	uxth	r2, r3
 8012b74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012b76:	801a      	strh	r2, [r3, #0]
 8012b78:	1d7b      	adds	r3, r7, #5
 8012b7a:	33ff      	adds	r3, #255	@ 0xff
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	2b3e      	cmp	r3, #62	@ 0x3e
 8012b80:	d922      	bls.n	8012bc8 <USB_EPStartXfer+0x818>
 8012b82:	1d7b      	adds	r3, r7, #5
 8012b84:	33ff      	adds	r3, #255	@ 0xff
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	095b      	lsrs	r3, r3, #5
 8012b8a:	21f0      	movs	r1, #240	@ 0xf0
 8012b8c:	187a      	adds	r2, r7, r1
 8012b8e:	6013      	str	r3, [r2, #0]
 8012b90:	1d7b      	adds	r3, r7, #5
 8012b92:	33ff      	adds	r3, #255	@ 0xff
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	221f      	movs	r2, #31
 8012b98:	4013      	ands	r3, r2
 8012b9a:	d104      	bne.n	8012ba6 <USB_EPStartXfer+0x7f6>
 8012b9c:	187b      	adds	r3, r7, r1
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	3b01      	subs	r3, #1
 8012ba2:	187a      	adds	r2, r7, r1
 8012ba4:	6013      	str	r3, [r2, #0]
 8012ba6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012ba8:	881b      	ldrh	r3, [r3, #0]
 8012baa:	b29a      	uxth	r2, r3
 8012bac:	23f0      	movs	r3, #240	@ 0xf0
 8012bae:	18fb      	adds	r3, r7, r3
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	b29b      	uxth	r3, r3
 8012bb4:	029b      	lsls	r3, r3, #10
 8012bb6:	b29b      	uxth	r3, r3
 8012bb8:	4313      	orrs	r3, r2
 8012bba:	b29b      	uxth	r3, r3
 8012bbc:	4aa6      	ldr	r2, [pc, #664]	@ (8012e58 <USB_EPStartXfer+0xaa8>)
 8012bbe:	4313      	orrs	r3, r2
 8012bc0:	b29a      	uxth	r2, r3
 8012bc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012bc4:	801a      	strh	r2, [r3, #0]
 8012bc6:	e048      	b.n	8012c5a <USB_EPStartXfer+0x8aa>
 8012bc8:	1d7b      	adds	r3, r7, #5
 8012bca:	33ff      	adds	r3, #255	@ 0xff
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d108      	bne.n	8012be4 <USB_EPStartXfer+0x834>
 8012bd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012bd4:	881b      	ldrh	r3, [r3, #0]
 8012bd6:	b29b      	uxth	r3, r3
 8012bd8:	4a9f      	ldr	r2, [pc, #636]	@ (8012e58 <USB_EPStartXfer+0xaa8>)
 8012bda:	4313      	orrs	r3, r2
 8012bdc:	b29a      	uxth	r2, r3
 8012bde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012be0:	801a      	strh	r2, [r3, #0]
 8012be2:	e03a      	b.n	8012c5a <USB_EPStartXfer+0x8aa>
 8012be4:	1d7b      	adds	r3, r7, #5
 8012be6:	33ff      	adds	r3, #255	@ 0xff
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	085b      	lsrs	r3, r3, #1
 8012bec:	21f0      	movs	r1, #240	@ 0xf0
 8012bee:	187a      	adds	r2, r7, r1
 8012bf0:	6013      	str	r3, [r2, #0]
 8012bf2:	1d7b      	adds	r3, r7, #5
 8012bf4:	33ff      	adds	r3, #255	@ 0xff
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	2201      	movs	r2, #1
 8012bfa:	4013      	ands	r3, r2
 8012bfc:	d004      	beq.n	8012c08 <USB_EPStartXfer+0x858>
 8012bfe:	187b      	adds	r3, r7, r1
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	3301      	adds	r3, #1
 8012c04:	187a      	adds	r2, r7, r1
 8012c06:	6013      	str	r3, [r2, #0]
 8012c08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012c0a:	881b      	ldrh	r3, [r3, #0]
 8012c0c:	b29a      	uxth	r2, r3
 8012c0e:	23f0      	movs	r3, #240	@ 0xf0
 8012c10:	18fb      	adds	r3, r7, r3
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	b29b      	uxth	r3, r3
 8012c16:	029b      	lsls	r3, r3, #10
 8012c18:	b29b      	uxth	r3, r3
 8012c1a:	4313      	orrs	r3, r2
 8012c1c:	b29a      	uxth	r2, r3
 8012c1e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012c20:	801a      	strh	r2, [r3, #0]
 8012c22:	e01a      	b.n	8012c5a <USB_EPStartXfer+0x8aa>
 8012c24:	683b      	ldr	r3, [r7, #0]
 8012c26:	785b      	ldrb	r3, [r3, #1]
 8012c28:	2b01      	cmp	r3, #1
 8012c2a:	d116      	bne.n	8012c5a <USB_EPStartXfer+0x8aa>
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	2250      	movs	r2, #80	@ 0x50
 8012c30:	5a9b      	ldrh	r3, [r3, r2]
 8012c32:	b29b      	uxth	r3, r3
 8012c34:	001a      	movs	r2, r3
 8012c36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012c38:	189b      	adds	r3, r3, r2
 8012c3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8012c3c:	683b      	ldr	r3, [r7, #0]
 8012c3e:	781b      	ldrb	r3, [r3, #0]
 8012c40:	00da      	lsls	r2, r3, #3
 8012c42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012c44:	18d3      	adds	r3, r2, r3
 8012c46:	4a83      	ldr	r2, [pc, #524]	@ (8012e54 <USB_EPStartXfer+0xaa4>)
 8012c48:	4694      	mov	ip, r2
 8012c4a:	4463      	add	r3, ip
 8012c4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012c4e:	1d7b      	adds	r3, r7, #5
 8012c50:	33ff      	adds	r3, #255	@ 0xff
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	b29a      	uxth	r2, r3
 8012c56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012c58:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8012c5a:	2076      	movs	r0, #118	@ 0x76
 8012c5c:	183b      	adds	r3, r7, r0
 8012c5e:	683a      	ldr	r2, [r7, #0]
 8012c60:	8952      	ldrh	r2, [r2, #10]
 8012c62:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	6959      	ldr	r1, [r3, #20]
 8012c68:	1d7b      	adds	r3, r7, #5
 8012c6a:	33ff      	adds	r3, #255	@ 0xff
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	b29c      	uxth	r4, r3
 8012c70:	183b      	adds	r3, r7, r0
 8012c72:	881a      	ldrh	r2, [r3, #0]
 8012c74:	6878      	ldr	r0, [r7, #4]
 8012c76:	0023      	movs	r3, r4
 8012c78:	f000 fe0c 	bl	8013894 <USB_WritePMA>
 8012c7c:	e0ab      	b.n	8012dd6 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012c7e:	683b      	ldr	r3, [r7, #0]
 8012c80:	785b      	ldrb	r3, [r3, #1]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d000      	beq.n	8012c88 <USB_EPStartXfer+0x8d8>
 8012c86:	e070      	b.n	8012d6a <USB_EPStartXfer+0x9ba>
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	2250      	movs	r2, #80	@ 0x50
 8012c90:	5a9b      	ldrh	r3, [r3, r2]
 8012c92:	b29b      	uxth	r3, r3
 8012c94:	001a      	movs	r2, r3
 8012c96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012c98:	189b      	adds	r3, r3, r2
 8012c9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012c9c:	683b      	ldr	r3, [r7, #0]
 8012c9e:	781b      	ldrb	r3, [r3, #0]
 8012ca0:	00da      	lsls	r2, r3, #3
 8012ca2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012ca4:	18d3      	adds	r3, r2, r3
 8012ca6:	4a6d      	ldr	r2, [pc, #436]	@ (8012e5c <USB_EPStartXfer+0xaac>)
 8012ca8:	4694      	mov	ip, r2
 8012caa:	4463      	add	r3, ip
 8012cac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012cae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012cb0:	881b      	ldrh	r3, [r3, #0]
 8012cb2:	b29b      	uxth	r3, r3
 8012cb4:	059b      	lsls	r3, r3, #22
 8012cb6:	0d9b      	lsrs	r3, r3, #22
 8012cb8:	b29a      	uxth	r2, r3
 8012cba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012cbc:	801a      	strh	r2, [r3, #0]
 8012cbe:	1d7b      	adds	r3, r7, #5
 8012cc0:	33ff      	adds	r3, #255	@ 0xff
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8012cc6:	d922      	bls.n	8012d0e <USB_EPStartXfer+0x95e>
 8012cc8:	1d7b      	adds	r3, r7, #5
 8012cca:	33ff      	adds	r3, #255	@ 0xff
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	095b      	lsrs	r3, r3, #5
 8012cd0:	21ec      	movs	r1, #236	@ 0xec
 8012cd2:	187a      	adds	r2, r7, r1
 8012cd4:	6013      	str	r3, [r2, #0]
 8012cd6:	1d7b      	adds	r3, r7, #5
 8012cd8:	33ff      	adds	r3, #255	@ 0xff
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	221f      	movs	r2, #31
 8012cde:	4013      	ands	r3, r2
 8012ce0:	d104      	bne.n	8012cec <USB_EPStartXfer+0x93c>
 8012ce2:	187b      	adds	r3, r7, r1
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	3b01      	subs	r3, #1
 8012ce8:	187a      	adds	r2, r7, r1
 8012cea:	6013      	str	r3, [r2, #0]
 8012cec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012cee:	881b      	ldrh	r3, [r3, #0]
 8012cf0:	b29a      	uxth	r2, r3
 8012cf2:	23ec      	movs	r3, #236	@ 0xec
 8012cf4:	18fb      	adds	r3, r7, r3
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	b29b      	uxth	r3, r3
 8012cfa:	029b      	lsls	r3, r3, #10
 8012cfc:	b29b      	uxth	r3, r3
 8012cfe:	4313      	orrs	r3, r2
 8012d00:	b29b      	uxth	r3, r3
 8012d02:	4a55      	ldr	r2, [pc, #340]	@ (8012e58 <USB_EPStartXfer+0xaa8>)
 8012d04:	4313      	orrs	r3, r2
 8012d06:	b29a      	uxth	r2, r3
 8012d08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012d0a:	801a      	strh	r2, [r3, #0]
 8012d0c:	e052      	b.n	8012db4 <USB_EPStartXfer+0xa04>
 8012d0e:	1d7b      	adds	r3, r7, #5
 8012d10:	33ff      	adds	r3, #255	@ 0xff
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d108      	bne.n	8012d2a <USB_EPStartXfer+0x97a>
 8012d18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012d1a:	881b      	ldrh	r3, [r3, #0]
 8012d1c:	b29b      	uxth	r3, r3
 8012d1e:	4a4e      	ldr	r2, [pc, #312]	@ (8012e58 <USB_EPStartXfer+0xaa8>)
 8012d20:	4313      	orrs	r3, r2
 8012d22:	b29a      	uxth	r2, r3
 8012d24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012d26:	801a      	strh	r2, [r3, #0]
 8012d28:	e044      	b.n	8012db4 <USB_EPStartXfer+0xa04>
 8012d2a:	1d7b      	adds	r3, r7, #5
 8012d2c:	33ff      	adds	r3, #255	@ 0xff
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	085b      	lsrs	r3, r3, #1
 8012d32:	21ec      	movs	r1, #236	@ 0xec
 8012d34:	187a      	adds	r2, r7, r1
 8012d36:	6013      	str	r3, [r2, #0]
 8012d38:	1d7b      	adds	r3, r7, #5
 8012d3a:	33ff      	adds	r3, #255	@ 0xff
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	2201      	movs	r2, #1
 8012d40:	4013      	ands	r3, r2
 8012d42:	d004      	beq.n	8012d4e <USB_EPStartXfer+0x99e>
 8012d44:	187b      	adds	r3, r7, r1
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	3301      	adds	r3, #1
 8012d4a:	187a      	adds	r2, r7, r1
 8012d4c:	6013      	str	r3, [r2, #0]
 8012d4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012d50:	881b      	ldrh	r3, [r3, #0]
 8012d52:	b29a      	uxth	r2, r3
 8012d54:	23ec      	movs	r3, #236	@ 0xec
 8012d56:	18fb      	adds	r3, r7, r3
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	b29b      	uxth	r3, r3
 8012d5c:	029b      	lsls	r3, r3, #10
 8012d5e:	b29b      	uxth	r3, r3
 8012d60:	4313      	orrs	r3, r2
 8012d62:	b29a      	uxth	r2, r3
 8012d64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012d66:	801a      	strh	r2, [r3, #0]
 8012d68:	e024      	b.n	8012db4 <USB_EPStartXfer+0xa04>
 8012d6a:	683b      	ldr	r3, [r7, #0]
 8012d6c:	785b      	ldrb	r3, [r3, #1]
 8012d6e:	2b01      	cmp	r3, #1
 8012d70:	d120      	bne.n	8012db4 <USB_EPStartXfer+0xa04>
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	2184      	movs	r1, #132	@ 0x84
 8012d76:	187a      	adds	r2, r7, r1
 8012d78:	6013      	str	r3, [r2, #0]
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	2250      	movs	r2, #80	@ 0x50
 8012d7e:	5a9b      	ldrh	r3, [r3, r2]
 8012d80:	b29b      	uxth	r3, r3
 8012d82:	001a      	movs	r2, r3
 8012d84:	187b      	adds	r3, r7, r1
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	189b      	adds	r3, r3, r2
 8012d8a:	187a      	adds	r2, r7, r1
 8012d8c:	6013      	str	r3, [r2, #0]
 8012d8e:	683b      	ldr	r3, [r7, #0]
 8012d90:	781b      	ldrb	r3, [r3, #0]
 8012d92:	00da      	lsls	r2, r3, #3
 8012d94:	187b      	adds	r3, r7, r1
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	18d3      	adds	r3, r2, r3
 8012d9a:	4a30      	ldr	r2, [pc, #192]	@ (8012e5c <USB_EPStartXfer+0xaac>)
 8012d9c:	4694      	mov	ip, r2
 8012d9e:	4463      	add	r3, ip
 8012da0:	2180      	movs	r1, #128	@ 0x80
 8012da2:	187a      	adds	r2, r7, r1
 8012da4:	6013      	str	r3, [r2, #0]
 8012da6:	1d7b      	adds	r3, r7, #5
 8012da8:	33ff      	adds	r3, #255	@ 0xff
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	b29a      	uxth	r2, r3
 8012dae:	187b      	adds	r3, r7, r1
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012db4:	2076      	movs	r0, #118	@ 0x76
 8012db6:	183b      	adds	r3, r7, r0
 8012db8:	683a      	ldr	r2, [r7, #0]
 8012dba:	8912      	ldrh	r2, [r2, #8]
 8012dbc:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012dbe:	683b      	ldr	r3, [r7, #0]
 8012dc0:	6959      	ldr	r1, [r3, #20]
 8012dc2:	1d7b      	adds	r3, r7, #5
 8012dc4:	33ff      	adds	r3, #255	@ 0xff
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	b29c      	uxth	r4, r3
 8012dca:	183b      	adds	r3, r7, r0
 8012dcc:	881a      	ldrh	r2, [r3, #0]
 8012dce:	6878      	ldr	r0, [r7, #4]
 8012dd0:	0023      	movs	r3, r4
 8012dd2:	f000 fd5f 	bl	8013894 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8012dd6:	687a      	ldr	r2, [r7, #4]
 8012dd8:	683b      	ldr	r3, [r7, #0]
 8012dda:	781b      	ldrb	r3, [r3, #0]
 8012ddc:	009b      	lsls	r3, r3, #2
 8012dde:	18d3      	adds	r3, r2, r3
 8012de0:	881b      	ldrh	r3, [r3, #0]
 8012de2:	b29a      	uxth	r2, r3
 8012de4:	200a      	movs	r0, #10
 8012de6:	183b      	adds	r3, r7, r0
 8012de8:	491d      	ldr	r1, [pc, #116]	@ (8012e60 <USB_EPStartXfer+0xab0>)
 8012dea:	400a      	ands	r2, r1
 8012dec:	801a      	strh	r2, [r3, #0]
 8012dee:	183b      	adds	r3, r7, r0
 8012df0:	183a      	adds	r2, r7, r0
 8012df2:	8812      	ldrh	r2, [r2, #0]
 8012df4:	2110      	movs	r1, #16
 8012df6:	404a      	eors	r2, r1
 8012df8:	801a      	strh	r2, [r3, #0]
 8012dfa:	183b      	adds	r3, r7, r0
 8012dfc:	183a      	adds	r2, r7, r0
 8012dfe:	8812      	ldrh	r2, [r2, #0]
 8012e00:	2120      	movs	r1, #32
 8012e02:	404a      	eors	r2, r1
 8012e04:	801a      	strh	r2, [r3, #0]
 8012e06:	687a      	ldr	r2, [r7, #4]
 8012e08:	683b      	ldr	r3, [r7, #0]
 8012e0a:	781b      	ldrb	r3, [r3, #0]
 8012e0c:	009b      	lsls	r3, r3, #2
 8012e0e:	18d3      	adds	r3, r2, r3
 8012e10:	183a      	adds	r2, r7, r0
 8012e12:	8812      	ldrh	r2, [r2, #0]
 8012e14:	4913      	ldr	r1, [pc, #76]	@ (8012e64 <USB_EPStartXfer+0xab4>)
 8012e16:	430a      	orrs	r2, r1
 8012e18:	b292      	uxth	r2, r2
 8012e1a:	801a      	strh	r2, [r3, #0]
 8012e1c:	f000 fbf4 	bl	8013608 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8012e20:	683b      	ldr	r3, [r7, #0]
 8012e22:	7b1b      	ldrb	r3, [r3, #12]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d000      	beq.n	8012e2a <USB_EPStartXfer+0xa7a>
 8012e28:	e0a9      	b.n	8012f7e <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8012e2a:	683b      	ldr	r3, [r7, #0]
 8012e2c:	699a      	ldr	r2, [r3, #24]
 8012e2e:	683b      	ldr	r3, [r7, #0]
 8012e30:	691b      	ldr	r3, [r3, #16]
 8012e32:	429a      	cmp	r2, r3
 8012e34:	d918      	bls.n	8012e68 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	691b      	ldr	r3, [r3, #16]
 8012e3a:	1d7a      	adds	r2, r7, #5
 8012e3c:	32ff      	adds	r2, #255	@ 0xff
 8012e3e:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8012e40:	683b      	ldr	r3, [r7, #0]
 8012e42:	699a      	ldr	r2, [r3, #24]
 8012e44:	1d7b      	adds	r3, r7, #5
 8012e46:	33ff      	adds	r3, #255	@ 0xff
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	1ad2      	subs	r2, r2, r3
 8012e4c:	683b      	ldr	r3, [r7, #0]
 8012e4e:	619a      	str	r2, [r3, #24]
 8012e50:	e012      	b.n	8012e78 <USB_EPStartXfer+0xac8>
 8012e52:	46c0      	nop			@ (mov r8, r8)
 8012e54:	00000406 	.word	0x00000406
 8012e58:	ffff8000 	.word	0xffff8000
 8012e5c:	00000402 	.word	0x00000402
 8012e60:	ffff8fbf 	.word	0xffff8fbf
 8012e64:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8012e68:	683b      	ldr	r3, [r7, #0]
 8012e6a:	699b      	ldr	r3, [r3, #24]
 8012e6c:	1d7a      	adds	r2, r7, #5
 8012e6e:	32ff      	adds	r2, #255	@ 0xff
 8012e70:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8012e72:	683b      	ldr	r3, [r7, #0]
 8012e74:	2200      	movs	r2, #0
 8012e76:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	2190      	movs	r1, #144	@ 0x90
 8012e7c:	187a      	adds	r2, r7, r1
 8012e7e:	6013      	str	r3, [r2, #0]
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	2250      	movs	r2, #80	@ 0x50
 8012e84:	5a9b      	ldrh	r3, [r3, r2]
 8012e86:	b29b      	uxth	r3, r3
 8012e88:	001a      	movs	r2, r3
 8012e8a:	187b      	adds	r3, r7, r1
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	189b      	adds	r3, r3, r2
 8012e90:	187a      	adds	r2, r7, r1
 8012e92:	6013      	str	r3, [r2, #0]
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	781b      	ldrb	r3, [r3, #0]
 8012e98:	00da      	lsls	r2, r3, #3
 8012e9a:	187b      	adds	r3, r7, r1
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	18d3      	adds	r3, r2, r3
 8012ea0:	4acf      	ldr	r2, [pc, #828]	@ (80131e0 <USB_EPStartXfer+0xe30>)
 8012ea2:	4694      	mov	ip, r2
 8012ea4:	4463      	add	r3, ip
 8012ea6:	218c      	movs	r1, #140	@ 0x8c
 8012ea8:	187a      	adds	r2, r7, r1
 8012eaa:	6013      	str	r3, [r2, #0]
 8012eac:	187b      	adds	r3, r7, r1
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	881b      	ldrh	r3, [r3, #0]
 8012eb2:	b29b      	uxth	r3, r3
 8012eb4:	059b      	lsls	r3, r3, #22
 8012eb6:	0d9b      	lsrs	r3, r3, #22
 8012eb8:	b29a      	uxth	r2, r3
 8012eba:	187b      	adds	r3, r7, r1
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	801a      	strh	r2, [r3, #0]
 8012ec0:	1d7b      	adds	r3, r7, #5
 8012ec2:	33ff      	adds	r3, #255	@ 0xff
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	2b3e      	cmp	r3, #62	@ 0x3e
 8012ec8:	d925      	bls.n	8012f16 <USB_EPStartXfer+0xb66>
 8012eca:	1d7b      	adds	r3, r7, #5
 8012ecc:	33ff      	adds	r3, #255	@ 0xff
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	095b      	lsrs	r3, r3, #5
 8012ed2:	21e8      	movs	r1, #232	@ 0xe8
 8012ed4:	187a      	adds	r2, r7, r1
 8012ed6:	6013      	str	r3, [r2, #0]
 8012ed8:	1d7b      	adds	r3, r7, #5
 8012eda:	33ff      	adds	r3, #255	@ 0xff
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	221f      	movs	r2, #31
 8012ee0:	4013      	ands	r3, r2
 8012ee2:	d104      	bne.n	8012eee <USB_EPStartXfer+0xb3e>
 8012ee4:	187b      	adds	r3, r7, r1
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	3b01      	subs	r3, #1
 8012eea:	187a      	adds	r2, r7, r1
 8012eec:	6013      	str	r3, [r2, #0]
 8012eee:	218c      	movs	r1, #140	@ 0x8c
 8012ef0:	187b      	adds	r3, r7, r1
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	881b      	ldrh	r3, [r3, #0]
 8012ef6:	b29a      	uxth	r2, r3
 8012ef8:	23e8      	movs	r3, #232	@ 0xe8
 8012efa:	18fb      	adds	r3, r7, r3
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	b29b      	uxth	r3, r3
 8012f00:	029b      	lsls	r3, r3, #10
 8012f02:	b29b      	uxth	r3, r3
 8012f04:	4313      	orrs	r3, r2
 8012f06:	b29b      	uxth	r3, r3
 8012f08:	4ab6      	ldr	r2, [pc, #728]	@ (80131e4 <USB_EPStartXfer+0xe34>)
 8012f0a:	4313      	orrs	r3, r2
 8012f0c:	b29a      	uxth	r2, r3
 8012f0e:	187b      	adds	r3, r7, r1
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	801a      	strh	r2, [r3, #0]
 8012f14:	e353      	b.n	80135be <USB_EPStartXfer+0x120e>
 8012f16:	1d7b      	adds	r3, r7, #5
 8012f18:	33ff      	adds	r3, #255	@ 0xff
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d10b      	bne.n	8012f38 <USB_EPStartXfer+0xb88>
 8012f20:	218c      	movs	r1, #140	@ 0x8c
 8012f22:	187b      	adds	r3, r7, r1
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	881b      	ldrh	r3, [r3, #0]
 8012f28:	b29b      	uxth	r3, r3
 8012f2a:	4aae      	ldr	r2, [pc, #696]	@ (80131e4 <USB_EPStartXfer+0xe34>)
 8012f2c:	4313      	orrs	r3, r2
 8012f2e:	b29a      	uxth	r2, r3
 8012f30:	187b      	adds	r3, r7, r1
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	801a      	strh	r2, [r3, #0]
 8012f36:	e342      	b.n	80135be <USB_EPStartXfer+0x120e>
 8012f38:	1d7b      	adds	r3, r7, #5
 8012f3a:	33ff      	adds	r3, #255	@ 0xff
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	085b      	lsrs	r3, r3, #1
 8012f40:	21e8      	movs	r1, #232	@ 0xe8
 8012f42:	187a      	adds	r2, r7, r1
 8012f44:	6013      	str	r3, [r2, #0]
 8012f46:	1d7b      	adds	r3, r7, #5
 8012f48:	33ff      	adds	r3, #255	@ 0xff
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	2201      	movs	r2, #1
 8012f4e:	4013      	ands	r3, r2
 8012f50:	d004      	beq.n	8012f5c <USB_EPStartXfer+0xbac>
 8012f52:	187b      	adds	r3, r7, r1
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	3301      	adds	r3, #1
 8012f58:	187a      	adds	r2, r7, r1
 8012f5a:	6013      	str	r3, [r2, #0]
 8012f5c:	218c      	movs	r1, #140	@ 0x8c
 8012f5e:	187b      	adds	r3, r7, r1
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	881b      	ldrh	r3, [r3, #0]
 8012f64:	b29a      	uxth	r2, r3
 8012f66:	23e8      	movs	r3, #232	@ 0xe8
 8012f68:	18fb      	adds	r3, r7, r3
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	b29b      	uxth	r3, r3
 8012f6e:	029b      	lsls	r3, r3, #10
 8012f70:	b29b      	uxth	r3, r3
 8012f72:	4313      	orrs	r3, r2
 8012f74:	b29a      	uxth	r2, r3
 8012f76:	187b      	adds	r3, r7, r1
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	801a      	strh	r2, [r3, #0]
 8012f7c:	e31f      	b.n	80135be <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8012f7e:	683b      	ldr	r3, [r7, #0]
 8012f80:	78db      	ldrb	r3, [r3, #3]
 8012f82:	2b02      	cmp	r3, #2
 8012f84:	d000      	beq.n	8012f88 <USB_EPStartXfer+0xbd8>
 8012f86:	e191      	b.n	80132ac <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8012f88:	683b      	ldr	r3, [r7, #0]
 8012f8a:	785b      	ldrb	r3, [r3, #1]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d000      	beq.n	8012f92 <USB_EPStartXfer+0xbe2>
 8012f90:	e07c      	b.n	801308c <USB_EPStartXfer+0xcdc>
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	21ac      	movs	r1, #172	@ 0xac
 8012f96:	187a      	adds	r2, r7, r1
 8012f98:	6013      	str	r3, [r2, #0]
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	2250      	movs	r2, #80	@ 0x50
 8012f9e:	5a9b      	ldrh	r3, [r3, r2]
 8012fa0:	b29b      	uxth	r3, r3
 8012fa2:	001a      	movs	r2, r3
 8012fa4:	187b      	adds	r3, r7, r1
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	189b      	adds	r3, r3, r2
 8012faa:	187a      	adds	r2, r7, r1
 8012fac:	6013      	str	r3, [r2, #0]
 8012fae:	683b      	ldr	r3, [r7, #0]
 8012fb0:	781b      	ldrb	r3, [r3, #0]
 8012fb2:	00da      	lsls	r2, r3, #3
 8012fb4:	187b      	adds	r3, r7, r1
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	18d3      	adds	r3, r2, r3
 8012fba:	4a8b      	ldr	r2, [pc, #556]	@ (80131e8 <USB_EPStartXfer+0xe38>)
 8012fbc:	4694      	mov	ip, r2
 8012fbe:	4463      	add	r3, ip
 8012fc0:	21a8      	movs	r1, #168	@ 0xa8
 8012fc2:	187a      	adds	r2, r7, r1
 8012fc4:	6013      	str	r3, [r2, #0]
 8012fc6:	187b      	adds	r3, r7, r1
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	881b      	ldrh	r3, [r3, #0]
 8012fcc:	b29b      	uxth	r3, r3
 8012fce:	059b      	lsls	r3, r3, #22
 8012fd0:	0d9b      	lsrs	r3, r3, #22
 8012fd2:	b29a      	uxth	r2, r3
 8012fd4:	187b      	adds	r3, r7, r1
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	801a      	strh	r2, [r3, #0]
 8012fda:	683b      	ldr	r3, [r7, #0]
 8012fdc:	691b      	ldr	r3, [r3, #16]
 8012fde:	2b3e      	cmp	r3, #62	@ 0x3e
 8012fe0:	d923      	bls.n	801302a <USB_EPStartXfer+0xc7a>
 8012fe2:	683b      	ldr	r3, [r7, #0]
 8012fe4:	691b      	ldr	r3, [r3, #16]
 8012fe6:	095b      	lsrs	r3, r3, #5
 8012fe8:	21e4      	movs	r1, #228	@ 0xe4
 8012fea:	187a      	adds	r2, r7, r1
 8012fec:	6013      	str	r3, [r2, #0]
 8012fee:	683b      	ldr	r3, [r7, #0]
 8012ff0:	691b      	ldr	r3, [r3, #16]
 8012ff2:	221f      	movs	r2, #31
 8012ff4:	4013      	ands	r3, r2
 8012ff6:	d104      	bne.n	8013002 <USB_EPStartXfer+0xc52>
 8012ff8:	187b      	adds	r3, r7, r1
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	3b01      	subs	r3, #1
 8012ffe:	187a      	adds	r2, r7, r1
 8013000:	6013      	str	r3, [r2, #0]
 8013002:	21a8      	movs	r1, #168	@ 0xa8
 8013004:	187b      	adds	r3, r7, r1
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	881b      	ldrh	r3, [r3, #0]
 801300a:	b29a      	uxth	r2, r3
 801300c:	23e4      	movs	r3, #228	@ 0xe4
 801300e:	18fb      	adds	r3, r7, r3
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	b29b      	uxth	r3, r3
 8013014:	029b      	lsls	r3, r3, #10
 8013016:	b29b      	uxth	r3, r3
 8013018:	4313      	orrs	r3, r2
 801301a:	b29b      	uxth	r3, r3
 801301c:	4a71      	ldr	r2, [pc, #452]	@ (80131e4 <USB_EPStartXfer+0xe34>)
 801301e:	4313      	orrs	r3, r2
 8013020:	b29a      	uxth	r2, r3
 8013022:	187b      	adds	r3, r7, r1
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	801a      	strh	r2, [r3, #0]
 8013028:	e054      	b.n	80130d4 <USB_EPStartXfer+0xd24>
 801302a:	683b      	ldr	r3, [r7, #0]
 801302c:	691b      	ldr	r3, [r3, #16]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d10b      	bne.n	801304a <USB_EPStartXfer+0xc9a>
 8013032:	21a8      	movs	r1, #168	@ 0xa8
 8013034:	187b      	adds	r3, r7, r1
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	881b      	ldrh	r3, [r3, #0]
 801303a:	b29b      	uxth	r3, r3
 801303c:	4a69      	ldr	r2, [pc, #420]	@ (80131e4 <USB_EPStartXfer+0xe34>)
 801303e:	4313      	orrs	r3, r2
 8013040:	b29a      	uxth	r2, r3
 8013042:	187b      	adds	r3, r7, r1
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	801a      	strh	r2, [r3, #0]
 8013048:	e044      	b.n	80130d4 <USB_EPStartXfer+0xd24>
 801304a:	683b      	ldr	r3, [r7, #0]
 801304c:	691b      	ldr	r3, [r3, #16]
 801304e:	085b      	lsrs	r3, r3, #1
 8013050:	21e4      	movs	r1, #228	@ 0xe4
 8013052:	187a      	adds	r2, r7, r1
 8013054:	6013      	str	r3, [r2, #0]
 8013056:	683b      	ldr	r3, [r7, #0]
 8013058:	691b      	ldr	r3, [r3, #16]
 801305a:	2201      	movs	r2, #1
 801305c:	4013      	ands	r3, r2
 801305e:	d004      	beq.n	801306a <USB_EPStartXfer+0xcba>
 8013060:	187b      	adds	r3, r7, r1
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	3301      	adds	r3, #1
 8013066:	187a      	adds	r2, r7, r1
 8013068:	6013      	str	r3, [r2, #0]
 801306a:	21a8      	movs	r1, #168	@ 0xa8
 801306c:	187b      	adds	r3, r7, r1
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	881b      	ldrh	r3, [r3, #0]
 8013072:	b29a      	uxth	r2, r3
 8013074:	23e4      	movs	r3, #228	@ 0xe4
 8013076:	18fb      	adds	r3, r7, r3
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	b29b      	uxth	r3, r3
 801307c:	029b      	lsls	r3, r3, #10
 801307e:	b29b      	uxth	r3, r3
 8013080:	4313      	orrs	r3, r2
 8013082:	b29a      	uxth	r2, r3
 8013084:	187b      	adds	r3, r7, r1
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	801a      	strh	r2, [r3, #0]
 801308a:	e023      	b.n	80130d4 <USB_EPStartXfer+0xd24>
 801308c:	683b      	ldr	r3, [r7, #0]
 801308e:	785b      	ldrb	r3, [r3, #1]
 8013090:	2b01      	cmp	r3, #1
 8013092:	d11f      	bne.n	80130d4 <USB_EPStartXfer+0xd24>
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	21b4      	movs	r1, #180	@ 0xb4
 8013098:	187a      	adds	r2, r7, r1
 801309a:	6013      	str	r3, [r2, #0]
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	2250      	movs	r2, #80	@ 0x50
 80130a0:	5a9b      	ldrh	r3, [r3, r2]
 80130a2:	b29b      	uxth	r3, r3
 80130a4:	001a      	movs	r2, r3
 80130a6:	187b      	adds	r3, r7, r1
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	189b      	adds	r3, r3, r2
 80130ac:	187a      	adds	r2, r7, r1
 80130ae:	6013      	str	r3, [r2, #0]
 80130b0:	683b      	ldr	r3, [r7, #0]
 80130b2:	781b      	ldrb	r3, [r3, #0]
 80130b4:	00da      	lsls	r2, r3, #3
 80130b6:	187b      	adds	r3, r7, r1
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	18d3      	adds	r3, r2, r3
 80130bc:	4a4a      	ldr	r2, [pc, #296]	@ (80131e8 <USB_EPStartXfer+0xe38>)
 80130be:	4694      	mov	ip, r2
 80130c0:	4463      	add	r3, ip
 80130c2:	21b0      	movs	r1, #176	@ 0xb0
 80130c4:	187a      	adds	r2, r7, r1
 80130c6:	6013      	str	r3, [r2, #0]
 80130c8:	683b      	ldr	r3, [r7, #0]
 80130ca:	691b      	ldr	r3, [r3, #16]
 80130cc:	b29a      	uxth	r2, r3
 80130ce:	187b      	adds	r3, r7, r1
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	801a      	strh	r2, [r3, #0]
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	22a4      	movs	r2, #164	@ 0xa4
 80130d8:	18ba      	adds	r2, r7, r2
 80130da:	6013      	str	r3, [r2, #0]
 80130dc:	683b      	ldr	r3, [r7, #0]
 80130de:	785b      	ldrb	r3, [r3, #1]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d000      	beq.n	80130e6 <USB_EPStartXfer+0xd36>
 80130e4:	e082      	b.n	80131ec <USB_EPStartXfer+0xe3c>
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	219c      	movs	r1, #156	@ 0x9c
 80130ea:	187a      	adds	r2, r7, r1
 80130ec:	6013      	str	r3, [r2, #0]
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	2250      	movs	r2, #80	@ 0x50
 80130f2:	5a9b      	ldrh	r3, [r3, r2]
 80130f4:	b29b      	uxth	r3, r3
 80130f6:	001a      	movs	r2, r3
 80130f8:	187b      	adds	r3, r7, r1
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	189b      	adds	r3, r3, r2
 80130fe:	187a      	adds	r2, r7, r1
 8013100:	6013      	str	r3, [r2, #0]
 8013102:	683b      	ldr	r3, [r7, #0]
 8013104:	781b      	ldrb	r3, [r3, #0]
 8013106:	00da      	lsls	r2, r3, #3
 8013108:	187b      	adds	r3, r7, r1
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	18d3      	adds	r3, r2, r3
 801310e:	4a34      	ldr	r2, [pc, #208]	@ (80131e0 <USB_EPStartXfer+0xe30>)
 8013110:	4694      	mov	ip, r2
 8013112:	4463      	add	r3, ip
 8013114:	2198      	movs	r1, #152	@ 0x98
 8013116:	187a      	adds	r2, r7, r1
 8013118:	6013      	str	r3, [r2, #0]
 801311a:	187b      	adds	r3, r7, r1
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	881b      	ldrh	r3, [r3, #0]
 8013120:	b29b      	uxth	r3, r3
 8013122:	059b      	lsls	r3, r3, #22
 8013124:	0d9b      	lsrs	r3, r3, #22
 8013126:	b29a      	uxth	r2, r3
 8013128:	187b      	adds	r3, r7, r1
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	801a      	strh	r2, [r3, #0]
 801312e:	683b      	ldr	r3, [r7, #0]
 8013130:	691b      	ldr	r3, [r3, #16]
 8013132:	2b3e      	cmp	r3, #62	@ 0x3e
 8013134:	d923      	bls.n	801317e <USB_EPStartXfer+0xdce>
 8013136:	683b      	ldr	r3, [r7, #0]
 8013138:	691b      	ldr	r3, [r3, #16]
 801313a:	095b      	lsrs	r3, r3, #5
 801313c:	21e0      	movs	r1, #224	@ 0xe0
 801313e:	187a      	adds	r2, r7, r1
 8013140:	6013      	str	r3, [r2, #0]
 8013142:	683b      	ldr	r3, [r7, #0]
 8013144:	691b      	ldr	r3, [r3, #16]
 8013146:	221f      	movs	r2, #31
 8013148:	4013      	ands	r3, r2
 801314a:	d104      	bne.n	8013156 <USB_EPStartXfer+0xda6>
 801314c:	187b      	adds	r3, r7, r1
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	3b01      	subs	r3, #1
 8013152:	187a      	adds	r2, r7, r1
 8013154:	6013      	str	r3, [r2, #0]
 8013156:	2198      	movs	r1, #152	@ 0x98
 8013158:	187b      	adds	r3, r7, r1
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	881b      	ldrh	r3, [r3, #0]
 801315e:	b29a      	uxth	r2, r3
 8013160:	23e0      	movs	r3, #224	@ 0xe0
 8013162:	18fb      	adds	r3, r7, r3
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	b29b      	uxth	r3, r3
 8013168:	029b      	lsls	r3, r3, #10
 801316a:	b29b      	uxth	r3, r3
 801316c:	4313      	orrs	r3, r2
 801316e:	b29b      	uxth	r3, r3
 8013170:	4a1c      	ldr	r2, [pc, #112]	@ (80131e4 <USB_EPStartXfer+0xe34>)
 8013172:	4313      	orrs	r3, r2
 8013174:	b29a      	uxth	r2, r3
 8013176:	187b      	adds	r3, r7, r1
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	801a      	strh	r2, [r3, #0]
 801317c:	e057      	b.n	801322e <USB_EPStartXfer+0xe7e>
 801317e:	683b      	ldr	r3, [r7, #0]
 8013180:	691b      	ldr	r3, [r3, #16]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d10b      	bne.n	801319e <USB_EPStartXfer+0xdee>
 8013186:	2198      	movs	r1, #152	@ 0x98
 8013188:	187b      	adds	r3, r7, r1
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	881b      	ldrh	r3, [r3, #0]
 801318e:	b29b      	uxth	r3, r3
 8013190:	4a14      	ldr	r2, [pc, #80]	@ (80131e4 <USB_EPStartXfer+0xe34>)
 8013192:	4313      	orrs	r3, r2
 8013194:	b29a      	uxth	r2, r3
 8013196:	187b      	adds	r3, r7, r1
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	801a      	strh	r2, [r3, #0]
 801319c:	e047      	b.n	801322e <USB_EPStartXfer+0xe7e>
 801319e:	683b      	ldr	r3, [r7, #0]
 80131a0:	691b      	ldr	r3, [r3, #16]
 80131a2:	085b      	lsrs	r3, r3, #1
 80131a4:	21e0      	movs	r1, #224	@ 0xe0
 80131a6:	187a      	adds	r2, r7, r1
 80131a8:	6013      	str	r3, [r2, #0]
 80131aa:	683b      	ldr	r3, [r7, #0]
 80131ac:	691b      	ldr	r3, [r3, #16]
 80131ae:	2201      	movs	r2, #1
 80131b0:	4013      	ands	r3, r2
 80131b2:	d004      	beq.n	80131be <USB_EPStartXfer+0xe0e>
 80131b4:	187b      	adds	r3, r7, r1
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	3301      	adds	r3, #1
 80131ba:	187a      	adds	r2, r7, r1
 80131bc:	6013      	str	r3, [r2, #0]
 80131be:	2198      	movs	r1, #152	@ 0x98
 80131c0:	187b      	adds	r3, r7, r1
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	881b      	ldrh	r3, [r3, #0]
 80131c6:	b29a      	uxth	r2, r3
 80131c8:	23e0      	movs	r3, #224	@ 0xe0
 80131ca:	18fb      	adds	r3, r7, r3
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	b29b      	uxth	r3, r3
 80131d0:	029b      	lsls	r3, r3, #10
 80131d2:	b29b      	uxth	r3, r3
 80131d4:	4313      	orrs	r3, r2
 80131d6:	b29a      	uxth	r2, r3
 80131d8:	187b      	adds	r3, r7, r1
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	801a      	strh	r2, [r3, #0]
 80131de:	e026      	b.n	801322e <USB_EPStartXfer+0xe7e>
 80131e0:	00000406 	.word	0x00000406
 80131e4:	ffff8000 	.word	0xffff8000
 80131e8:	00000402 	.word	0x00000402
 80131ec:	683b      	ldr	r3, [r7, #0]
 80131ee:	785b      	ldrb	r3, [r3, #1]
 80131f0:	2b01      	cmp	r3, #1
 80131f2:	d11c      	bne.n	801322e <USB_EPStartXfer+0xe7e>
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	2250      	movs	r2, #80	@ 0x50
 80131f8:	5a9b      	ldrh	r3, [r3, r2]
 80131fa:	b29b      	uxth	r3, r3
 80131fc:	001a      	movs	r2, r3
 80131fe:	21a4      	movs	r1, #164	@ 0xa4
 8013200:	187b      	adds	r3, r7, r1
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	189b      	adds	r3, r3, r2
 8013206:	187a      	adds	r2, r7, r1
 8013208:	6013      	str	r3, [r2, #0]
 801320a:	683b      	ldr	r3, [r7, #0]
 801320c:	781b      	ldrb	r3, [r3, #0]
 801320e:	00da      	lsls	r2, r3, #3
 8013210:	187b      	adds	r3, r7, r1
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	18d3      	adds	r3, r2, r3
 8013216:	4ad2      	ldr	r2, [pc, #840]	@ (8013560 <USB_EPStartXfer+0x11b0>)
 8013218:	4694      	mov	ip, r2
 801321a:	4463      	add	r3, ip
 801321c:	21a0      	movs	r1, #160	@ 0xa0
 801321e:	187a      	adds	r2, r7, r1
 8013220:	6013      	str	r3, [r2, #0]
 8013222:	683b      	ldr	r3, [r7, #0]
 8013224:	691b      	ldr	r3, [r3, #16]
 8013226:	b29a      	uxth	r2, r3
 8013228:	187b      	adds	r3, r7, r1
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801322e:	683b      	ldr	r3, [r7, #0]
 8013230:	69db      	ldr	r3, [r3, #28]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d100      	bne.n	8013238 <USB_EPStartXfer+0xe88>
 8013236:	e1c2      	b.n	80135be <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8013238:	687a      	ldr	r2, [r7, #4]
 801323a:	683b      	ldr	r3, [r7, #0]
 801323c:	781b      	ldrb	r3, [r3, #0]
 801323e:	009b      	lsls	r3, r3, #2
 8013240:	18d2      	adds	r2, r2, r3
 8013242:	2196      	movs	r1, #150	@ 0x96
 8013244:	187b      	adds	r3, r7, r1
 8013246:	8812      	ldrh	r2, [r2, #0]
 8013248:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801324a:	187b      	adds	r3, r7, r1
 801324c:	881a      	ldrh	r2, [r3, #0]
 801324e:	2380      	movs	r3, #128	@ 0x80
 8013250:	01db      	lsls	r3, r3, #7
 8013252:	4013      	ands	r3, r2
 8013254:	d004      	beq.n	8013260 <USB_EPStartXfer+0xeb0>
 8013256:	187b      	adds	r3, r7, r1
 8013258:	881b      	ldrh	r3, [r3, #0]
 801325a:	2240      	movs	r2, #64	@ 0x40
 801325c:	4013      	ands	r3, r2
 801325e:	d10d      	bne.n	801327c <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8013260:	2196      	movs	r1, #150	@ 0x96
 8013262:	187b      	adds	r3, r7, r1
 8013264:	881a      	ldrh	r2, [r3, #0]
 8013266:	2380      	movs	r3, #128	@ 0x80
 8013268:	01db      	lsls	r3, r3, #7
 801326a:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801326c:	d000      	beq.n	8013270 <USB_EPStartXfer+0xec0>
 801326e:	e1a6      	b.n	80135be <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8013270:	187b      	adds	r3, r7, r1
 8013272:	881b      	ldrh	r3, [r3, #0]
 8013274:	2240      	movs	r2, #64	@ 0x40
 8013276:	4013      	ands	r3, r2
 8013278:	d000      	beq.n	801327c <USB_EPStartXfer+0xecc>
 801327a:	e1a0      	b.n	80135be <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801327c:	687a      	ldr	r2, [r7, #4]
 801327e:	683b      	ldr	r3, [r7, #0]
 8013280:	781b      	ldrb	r3, [r3, #0]
 8013282:	009b      	lsls	r3, r3, #2
 8013284:	18d3      	adds	r3, r2, r3
 8013286:	881b      	ldrh	r3, [r3, #0]
 8013288:	b29a      	uxth	r2, r3
 801328a:	2094      	movs	r0, #148	@ 0x94
 801328c:	183b      	adds	r3, r7, r0
 801328e:	49b5      	ldr	r1, [pc, #724]	@ (8013564 <USB_EPStartXfer+0x11b4>)
 8013290:	400a      	ands	r2, r1
 8013292:	801a      	strh	r2, [r3, #0]
 8013294:	687a      	ldr	r2, [r7, #4]
 8013296:	683b      	ldr	r3, [r7, #0]
 8013298:	781b      	ldrb	r3, [r3, #0]
 801329a:	009b      	lsls	r3, r3, #2
 801329c:	18d3      	adds	r3, r2, r3
 801329e:	183a      	adds	r2, r7, r0
 80132a0:	8812      	ldrh	r2, [r2, #0]
 80132a2:	49b1      	ldr	r1, [pc, #708]	@ (8013568 <USB_EPStartXfer+0x11b8>)
 80132a4:	430a      	orrs	r2, r1
 80132a6:	b292      	uxth	r2, r2
 80132a8:	801a      	strh	r2, [r3, #0]
 80132aa:	e188      	b.n	80135be <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80132ac:	683b      	ldr	r3, [r7, #0]
 80132ae:	78db      	ldrb	r3, [r3, #3]
 80132b0:	2b01      	cmp	r3, #1
 80132b2:	d000      	beq.n	80132b6 <USB_EPStartXfer+0xf06>
 80132b4:	e181      	b.n	80135ba <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80132b6:	683b      	ldr	r3, [r7, #0]
 80132b8:	699a      	ldr	r2, [r3, #24]
 80132ba:	683b      	ldr	r3, [r7, #0]
 80132bc:	691b      	ldr	r3, [r3, #16]
 80132be:	429a      	cmp	r2, r3
 80132c0:	d90d      	bls.n	80132de <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 80132c2:	683b      	ldr	r3, [r7, #0]
 80132c4:	691b      	ldr	r3, [r3, #16]
 80132c6:	1d7a      	adds	r2, r7, #5
 80132c8:	32ff      	adds	r2, #255	@ 0xff
 80132ca:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 80132cc:	683b      	ldr	r3, [r7, #0]
 80132ce:	699a      	ldr	r2, [r3, #24]
 80132d0:	1d7b      	adds	r3, r7, #5
 80132d2:	33ff      	adds	r3, #255	@ 0xff
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	1ad2      	subs	r2, r2, r3
 80132d8:	683b      	ldr	r3, [r7, #0]
 80132da:	619a      	str	r2, [r3, #24]
 80132dc:	e007      	b.n	80132ee <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 80132de:	683b      	ldr	r3, [r7, #0]
 80132e0:	699b      	ldr	r3, [r3, #24]
 80132e2:	1d7a      	adds	r2, r7, #5
 80132e4:	32ff      	adds	r2, #255	@ 0xff
 80132e6:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 80132e8:	683b      	ldr	r3, [r7, #0]
 80132ea:	2200      	movs	r2, #0
 80132ec:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80132ee:	683b      	ldr	r3, [r7, #0]
 80132f0:	785b      	ldrb	r3, [r3, #1]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d000      	beq.n	80132f8 <USB_EPStartXfer+0xf48>
 80132f6:	e082      	b.n	80133fe <USB_EPStartXfer+0x104e>
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	21cc      	movs	r1, #204	@ 0xcc
 80132fc:	187a      	adds	r2, r7, r1
 80132fe:	6013      	str	r3, [r2, #0]
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	2250      	movs	r2, #80	@ 0x50
 8013304:	5a9b      	ldrh	r3, [r3, r2]
 8013306:	b29b      	uxth	r3, r3
 8013308:	001a      	movs	r2, r3
 801330a:	187b      	adds	r3, r7, r1
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	189b      	adds	r3, r3, r2
 8013310:	187a      	adds	r2, r7, r1
 8013312:	6013      	str	r3, [r2, #0]
 8013314:	683b      	ldr	r3, [r7, #0]
 8013316:	781b      	ldrb	r3, [r3, #0]
 8013318:	00da      	lsls	r2, r3, #3
 801331a:	187b      	adds	r3, r7, r1
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	18d3      	adds	r3, r2, r3
 8013320:	4a92      	ldr	r2, [pc, #584]	@ (801356c <USB_EPStartXfer+0x11bc>)
 8013322:	4694      	mov	ip, r2
 8013324:	4463      	add	r3, ip
 8013326:	21c8      	movs	r1, #200	@ 0xc8
 8013328:	187a      	adds	r2, r7, r1
 801332a:	6013      	str	r3, [r2, #0]
 801332c:	187b      	adds	r3, r7, r1
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	881b      	ldrh	r3, [r3, #0]
 8013332:	b29b      	uxth	r3, r3
 8013334:	059b      	lsls	r3, r3, #22
 8013336:	0d9b      	lsrs	r3, r3, #22
 8013338:	b29a      	uxth	r2, r3
 801333a:	187b      	adds	r3, r7, r1
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	801a      	strh	r2, [r3, #0]
 8013340:	1d7b      	adds	r3, r7, #5
 8013342:	33ff      	adds	r3, #255	@ 0xff
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	2b3e      	cmp	r3, #62	@ 0x3e
 8013348:	d925      	bls.n	8013396 <USB_EPStartXfer+0xfe6>
 801334a:	1d7b      	adds	r3, r7, #5
 801334c:	33ff      	adds	r3, #255	@ 0xff
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	095b      	lsrs	r3, r3, #5
 8013352:	21dc      	movs	r1, #220	@ 0xdc
 8013354:	187a      	adds	r2, r7, r1
 8013356:	6013      	str	r3, [r2, #0]
 8013358:	1d7b      	adds	r3, r7, #5
 801335a:	33ff      	adds	r3, #255	@ 0xff
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	221f      	movs	r2, #31
 8013360:	4013      	ands	r3, r2
 8013362:	d104      	bne.n	801336e <USB_EPStartXfer+0xfbe>
 8013364:	187b      	adds	r3, r7, r1
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	3b01      	subs	r3, #1
 801336a:	187a      	adds	r2, r7, r1
 801336c:	6013      	str	r3, [r2, #0]
 801336e:	21c8      	movs	r1, #200	@ 0xc8
 8013370:	187b      	adds	r3, r7, r1
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	881b      	ldrh	r3, [r3, #0]
 8013376:	b29a      	uxth	r2, r3
 8013378:	23dc      	movs	r3, #220	@ 0xdc
 801337a:	18fb      	adds	r3, r7, r3
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	b29b      	uxth	r3, r3
 8013380:	029b      	lsls	r3, r3, #10
 8013382:	b29b      	uxth	r3, r3
 8013384:	4313      	orrs	r3, r2
 8013386:	b29b      	uxth	r3, r3
 8013388:	4a79      	ldr	r2, [pc, #484]	@ (8013570 <USB_EPStartXfer+0x11c0>)
 801338a:	4313      	orrs	r3, r2
 801338c:	b29a      	uxth	r2, r3
 801338e:	187b      	adds	r3, r7, r1
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	801a      	strh	r2, [r3, #0]
 8013394:	e058      	b.n	8013448 <USB_EPStartXfer+0x1098>
 8013396:	1d7b      	adds	r3, r7, #5
 8013398:	33ff      	adds	r3, #255	@ 0xff
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d10b      	bne.n	80133b8 <USB_EPStartXfer+0x1008>
 80133a0:	21c8      	movs	r1, #200	@ 0xc8
 80133a2:	187b      	adds	r3, r7, r1
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	881b      	ldrh	r3, [r3, #0]
 80133a8:	b29b      	uxth	r3, r3
 80133aa:	4a71      	ldr	r2, [pc, #452]	@ (8013570 <USB_EPStartXfer+0x11c0>)
 80133ac:	4313      	orrs	r3, r2
 80133ae:	b29a      	uxth	r2, r3
 80133b0:	187b      	adds	r3, r7, r1
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	801a      	strh	r2, [r3, #0]
 80133b6:	e047      	b.n	8013448 <USB_EPStartXfer+0x1098>
 80133b8:	1d7b      	adds	r3, r7, #5
 80133ba:	33ff      	adds	r3, #255	@ 0xff
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	085b      	lsrs	r3, r3, #1
 80133c0:	21dc      	movs	r1, #220	@ 0xdc
 80133c2:	187a      	adds	r2, r7, r1
 80133c4:	6013      	str	r3, [r2, #0]
 80133c6:	1d7b      	adds	r3, r7, #5
 80133c8:	33ff      	adds	r3, #255	@ 0xff
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	2201      	movs	r2, #1
 80133ce:	4013      	ands	r3, r2
 80133d0:	d004      	beq.n	80133dc <USB_EPStartXfer+0x102c>
 80133d2:	187b      	adds	r3, r7, r1
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	3301      	adds	r3, #1
 80133d8:	187a      	adds	r2, r7, r1
 80133da:	6013      	str	r3, [r2, #0]
 80133dc:	21c8      	movs	r1, #200	@ 0xc8
 80133de:	187b      	adds	r3, r7, r1
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	881b      	ldrh	r3, [r3, #0]
 80133e4:	b29a      	uxth	r2, r3
 80133e6:	23dc      	movs	r3, #220	@ 0xdc
 80133e8:	18fb      	adds	r3, r7, r3
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	b29b      	uxth	r3, r3
 80133ee:	029b      	lsls	r3, r3, #10
 80133f0:	b29b      	uxth	r3, r3
 80133f2:	4313      	orrs	r3, r2
 80133f4:	b29a      	uxth	r2, r3
 80133f6:	187b      	adds	r3, r7, r1
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	801a      	strh	r2, [r3, #0]
 80133fc:	e024      	b.n	8013448 <USB_EPStartXfer+0x1098>
 80133fe:	683b      	ldr	r3, [r7, #0]
 8013400:	785b      	ldrb	r3, [r3, #1]
 8013402:	2b01      	cmp	r3, #1
 8013404:	d120      	bne.n	8013448 <USB_EPStartXfer+0x1098>
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	21d4      	movs	r1, #212	@ 0xd4
 801340a:	187a      	adds	r2, r7, r1
 801340c:	6013      	str	r3, [r2, #0]
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	2250      	movs	r2, #80	@ 0x50
 8013412:	5a9b      	ldrh	r3, [r3, r2]
 8013414:	b29b      	uxth	r3, r3
 8013416:	001a      	movs	r2, r3
 8013418:	187b      	adds	r3, r7, r1
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	189b      	adds	r3, r3, r2
 801341e:	187a      	adds	r2, r7, r1
 8013420:	6013      	str	r3, [r2, #0]
 8013422:	683b      	ldr	r3, [r7, #0]
 8013424:	781b      	ldrb	r3, [r3, #0]
 8013426:	00da      	lsls	r2, r3, #3
 8013428:	187b      	adds	r3, r7, r1
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	18d3      	adds	r3, r2, r3
 801342e:	4a4f      	ldr	r2, [pc, #316]	@ (801356c <USB_EPStartXfer+0x11bc>)
 8013430:	4694      	mov	ip, r2
 8013432:	4463      	add	r3, ip
 8013434:	21d0      	movs	r1, #208	@ 0xd0
 8013436:	187a      	adds	r2, r7, r1
 8013438:	6013      	str	r3, [r2, #0]
 801343a:	1d7b      	adds	r3, r7, #5
 801343c:	33ff      	adds	r3, #255	@ 0xff
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	b29a      	uxth	r2, r3
 8013442:	187b      	adds	r3, r7, r1
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	801a      	strh	r2, [r3, #0]
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	22c4      	movs	r2, #196	@ 0xc4
 801344c:	18ba      	adds	r2, r7, r2
 801344e:	6013      	str	r3, [r2, #0]
 8013450:	683b      	ldr	r3, [r7, #0]
 8013452:	785b      	ldrb	r3, [r3, #1]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d000      	beq.n	801345a <USB_EPStartXfer+0x10aa>
 8013458:	e08c      	b.n	8013574 <USB_EPStartXfer+0x11c4>
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	21bc      	movs	r1, #188	@ 0xbc
 801345e:	187a      	adds	r2, r7, r1
 8013460:	6013      	str	r3, [r2, #0]
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	2250      	movs	r2, #80	@ 0x50
 8013466:	5a9b      	ldrh	r3, [r3, r2]
 8013468:	b29b      	uxth	r3, r3
 801346a:	001a      	movs	r2, r3
 801346c:	187b      	adds	r3, r7, r1
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	189b      	adds	r3, r3, r2
 8013472:	187a      	adds	r2, r7, r1
 8013474:	6013      	str	r3, [r2, #0]
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	781b      	ldrb	r3, [r3, #0]
 801347a:	00da      	lsls	r2, r3, #3
 801347c:	187b      	adds	r3, r7, r1
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	18d3      	adds	r3, r2, r3
 8013482:	4a37      	ldr	r2, [pc, #220]	@ (8013560 <USB_EPStartXfer+0x11b0>)
 8013484:	4694      	mov	ip, r2
 8013486:	4463      	add	r3, ip
 8013488:	21b8      	movs	r1, #184	@ 0xb8
 801348a:	187a      	adds	r2, r7, r1
 801348c:	6013      	str	r3, [r2, #0]
 801348e:	187b      	adds	r3, r7, r1
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	881b      	ldrh	r3, [r3, #0]
 8013494:	b29b      	uxth	r3, r3
 8013496:	059b      	lsls	r3, r3, #22
 8013498:	0d9b      	lsrs	r3, r3, #22
 801349a:	b29a      	uxth	r2, r3
 801349c:	187b      	adds	r3, r7, r1
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	801a      	strh	r2, [r3, #0]
 80134a2:	1d7b      	adds	r3, r7, #5
 80134a4:	33ff      	adds	r3, #255	@ 0xff
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80134aa:	d925      	bls.n	80134f8 <USB_EPStartXfer+0x1148>
 80134ac:	1d7b      	adds	r3, r7, #5
 80134ae:	33ff      	adds	r3, #255	@ 0xff
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	095b      	lsrs	r3, r3, #5
 80134b4:	21d8      	movs	r1, #216	@ 0xd8
 80134b6:	187a      	adds	r2, r7, r1
 80134b8:	6013      	str	r3, [r2, #0]
 80134ba:	1d7b      	adds	r3, r7, #5
 80134bc:	33ff      	adds	r3, #255	@ 0xff
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	221f      	movs	r2, #31
 80134c2:	4013      	ands	r3, r2
 80134c4:	d104      	bne.n	80134d0 <USB_EPStartXfer+0x1120>
 80134c6:	187b      	adds	r3, r7, r1
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	3b01      	subs	r3, #1
 80134cc:	187a      	adds	r2, r7, r1
 80134ce:	6013      	str	r3, [r2, #0]
 80134d0:	21b8      	movs	r1, #184	@ 0xb8
 80134d2:	187b      	adds	r3, r7, r1
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	881b      	ldrh	r3, [r3, #0]
 80134d8:	b29a      	uxth	r2, r3
 80134da:	23d8      	movs	r3, #216	@ 0xd8
 80134dc:	18fb      	adds	r3, r7, r3
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	b29b      	uxth	r3, r3
 80134e2:	029b      	lsls	r3, r3, #10
 80134e4:	b29b      	uxth	r3, r3
 80134e6:	4313      	orrs	r3, r2
 80134e8:	b29b      	uxth	r3, r3
 80134ea:	4a21      	ldr	r2, [pc, #132]	@ (8013570 <USB_EPStartXfer+0x11c0>)
 80134ec:	4313      	orrs	r3, r2
 80134ee:	b29a      	uxth	r2, r3
 80134f0:	187b      	adds	r3, r7, r1
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	801a      	strh	r2, [r3, #0]
 80134f6:	e062      	b.n	80135be <USB_EPStartXfer+0x120e>
 80134f8:	1d7b      	adds	r3, r7, #5
 80134fa:	33ff      	adds	r3, #255	@ 0xff
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d10b      	bne.n	801351a <USB_EPStartXfer+0x116a>
 8013502:	21b8      	movs	r1, #184	@ 0xb8
 8013504:	187b      	adds	r3, r7, r1
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	881b      	ldrh	r3, [r3, #0]
 801350a:	b29b      	uxth	r3, r3
 801350c:	4a18      	ldr	r2, [pc, #96]	@ (8013570 <USB_EPStartXfer+0x11c0>)
 801350e:	4313      	orrs	r3, r2
 8013510:	b29a      	uxth	r2, r3
 8013512:	187b      	adds	r3, r7, r1
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	801a      	strh	r2, [r3, #0]
 8013518:	e051      	b.n	80135be <USB_EPStartXfer+0x120e>
 801351a:	1d7b      	adds	r3, r7, #5
 801351c:	33ff      	adds	r3, #255	@ 0xff
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	085b      	lsrs	r3, r3, #1
 8013522:	21d8      	movs	r1, #216	@ 0xd8
 8013524:	187a      	adds	r2, r7, r1
 8013526:	6013      	str	r3, [r2, #0]
 8013528:	1d7b      	adds	r3, r7, #5
 801352a:	33ff      	adds	r3, #255	@ 0xff
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	2201      	movs	r2, #1
 8013530:	4013      	ands	r3, r2
 8013532:	d004      	beq.n	801353e <USB_EPStartXfer+0x118e>
 8013534:	187b      	adds	r3, r7, r1
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	3301      	adds	r3, #1
 801353a:	187a      	adds	r2, r7, r1
 801353c:	6013      	str	r3, [r2, #0]
 801353e:	21b8      	movs	r1, #184	@ 0xb8
 8013540:	187b      	adds	r3, r7, r1
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	881b      	ldrh	r3, [r3, #0]
 8013546:	b29a      	uxth	r2, r3
 8013548:	23d8      	movs	r3, #216	@ 0xd8
 801354a:	18fb      	adds	r3, r7, r3
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	b29b      	uxth	r3, r3
 8013550:	029b      	lsls	r3, r3, #10
 8013552:	b29b      	uxth	r3, r3
 8013554:	4313      	orrs	r3, r2
 8013556:	b29a      	uxth	r2, r3
 8013558:	187b      	adds	r3, r7, r1
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	801a      	strh	r2, [r3, #0]
 801355e:	e02e      	b.n	80135be <USB_EPStartXfer+0x120e>
 8013560:	00000406 	.word	0x00000406
 8013564:	ffff8f8f 	.word	0xffff8f8f
 8013568:	ffff80c0 	.word	0xffff80c0
 801356c:	00000402 	.word	0x00000402
 8013570:	ffff8000 	.word	0xffff8000
 8013574:	683b      	ldr	r3, [r7, #0]
 8013576:	785b      	ldrb	r3, [r3, #1]
 8013578:	2b01      	cmp	r3, #1
 801357a:	d120      	bne.n	80135be <USB_EPStartXfer+0x120e>
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	2250      	movs	r2, #80	@ 0x50
 8013580:	5a9b      	ldrh	r3, [r3, r2]
 8013582:	b29b      	uxth	r3, r3
 8013584:	001a      	movs	r2, r3
 8013586:	21c4      	movs	r1, #196	@ 0xc4
 8013588:	187b      	adds	r3, r7, r1
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	189b      	adds	r3, r3, r2
 801358e:	187a      	adds	r2, r7, r1
 8013590:	6013      	str	r3, [r2, #0]
 8013592:	683b      	ldr	r3, [r7, #0]
 8013594:	781b      	ldrb	r3, [r3, #0]
 8013596:	00da      	lsls	r2, r3, #3
 8013598:	187b      	adds	r3, r7, r1
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	18d3      	adds	r3, r2, r3
 801359e:	4a1d      	ldr	r2, [pc, #116]	@ (8013614 <USB_EPStartXfer+0x1264>)
 80135a0:	4694      	mov	ip, r2
 80135a2:	4463      	add	r3, ip
 80135a4:	21c0      	movs	r1, #192	@ 0xc0
 80135a6:	187a      	adds	r2, r7, r1
 80135a8:	6013      	str	r3, [r2, #0]
 80135aa:	1d7b      	adds	r3, r7, #5
 80135ac:	33ff      	adds	r3, #255	@ 0xff
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	b29a      	uxth	r2, r3
 80135b2:	187b      	adds	r3, r7, r1
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	801a      	strh	r2, [r3, #0]
 80135b8:	e001      	b.n	80135be <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 80135ba:	2301      	movs	r3, #1
 80135bc:	e025      	b.n	801360a <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80135be:	687a      	ldr	r2, [r7, #4]
 80135c0:	683b      	ldr	r3, [r7, #0]
 80135c2:	781b      	ldrb	r3, [r3, #0]
 80135c4:	009b      	lsls	r3, r3, #2
 80135c6:	18d3      	adds	r3, r2, r3
 80135c8:	881b      	ldrh	r3, [r3, #0]
 80135ca:	b29a      	uxth	r2, r3
 80135cc:	208a      	movs	r0, #138	@ 0x8a
 80135ce:	183b      	adds	r3, r7, r0
 80135d0:	4911      	ldr	r1, [pc, #68]	@ (8013618 <USB_EPStartXfer+0x1268>)
 80135d2:	400a      	ands	r2, r1
 80135d4:	801a      	strh	r2, [r3, #0]
 80135d6:	183b      	adds	r3, r7, r0
 80135d8:	183a      	adds	r2, r7, r0
 80135da:	8812      	ldrh	r2, [r2, #0]
 80135dc:	2180      	movs	r1, #128	@ 0x80
 80135de:	0149      	lsls	r1, r1, #5
 80135e0:	404a      	eors	r2, r1
 80135e2:	801a      	strh	r2, [r3, #0]
 80135e4:	183b      	adds	r3, r7, r0
 80135e6:	183a      	adds	r2, r7, r0
 80135e8:	8812      	ldrh	r2, [r2, #0]
 80135ea:	2180      	movs	r1, #128	@ 0x80
 80135ec:	0189      	lsls	r1, r1, #6
 80135ee:	404a      	eors	r2, r1
 80135f0:	801a      	strh	r2, [r3, #0]
 80135f2:	687a      	ldr	r2, [r7, #4]
 80135f4:	683b      	ldr	r3, [r7, #0]
 80135f6:	781b      	ldrb	r3, [r3, #0]
 80135f8:	009b      	lsls	r3, r3, #2
 80135fa:	18d3      	adds	r3, r2, r3
 80135fc:	183a      	adds	r2, r7, r0
 80135fe:	8812      	ldrh	r2, [r2, #0]
 8013600:	4906      	ldr	r1, [pc, #24]	@ (801361c <USB_EPStartXfer+0x126c>)
 8013602:	430a      	orrs	r2, r1
 8013604:	b292      	uxth	r2, r2
 8013606:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8013608:	2300      	movs	r3, #0
}
 801360a:	0018      	movs	r0, r3
 801360c:	46bd      	mov	sp, r7
 801360e:	b043      	add	sp, #268	@ 0x10c
 8013610:	bd90      	pop	{r4, r7, pc}
 8013612:	46c0      	nop			@ (mov r8, r8)
 8013614:	00000406 	.word	0x00000406
 8013618:	ffffbf8f 	.word	0xffffbf8f
 801361c:	ffff8080 	.word	0xffff8080

08013620 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b084      	sub	sp, #16
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
 8013628:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801362a:	683b      	ldr	r3, [r7, #0]
 801362c:	785b      	ldrb	r3, [r3, #1]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d01d      	beq.n	801366e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8013632:	687a      	ldr	r2, [r7, #4]
 8013634:	683b      	ldr	r3, [r7, #0]
 8013636:	781b      	ldrb	r3, [r3, #0]
 8013638:	009b      	lsls	r3, r3, #2
 801363a:	18d3      	adds	r3, r2, r3
 801363c:	881b      	ldrh	r3, [r3, #0]
 801363e:	b29a      	uxth	r2, r3
 8013640:	200c      	movs	r0, #12
 8013642:	183b      	adds	r3, r7, r0
 8013644:	491b      	ldr	r1, [pc, #108]	@ (80136b4 <USB_EPSetStall+0x94>)
 8013646:	400a      	ands	r2, r1
 8013648:	801a      	strh	r2, [r3, #0]
 801364a:	183b      	adds	r3, r7, r0
 801364c:	183a      	adds	r2, r7, r0
 801364e:	8812      	ldrh	r2, [r2, #0]
 8013650:	2110      	movs	r1, #16
 8013652:	404a      	eors	r2, r1
 8013654:	801a      	strh	r2, [r3, #0]
 8013656:	687a      	ldr	r2, [r7, #4]
 8013658:	683b      	ldr	r3, [r7, #0]
 801365a:	781b      	ldrb	r3, [r3, #0]
 801365c:	009b      	lsls	r3, r3, #2
 801365e:	18d3      	adds	r3, r2, r3
 8013660:	183a      	adds	r2, r7, r0
 8013662:	8812      	ldrh	r2, [r2, #0]
 8013664:	4914      	ldr	r1, [pc, #80]	@ (80136b8 <USB_EPSetStall+0x98>)
 8013666:	430a      	orrs	r2, r1
 8013668:	b292      	uxth	r2, r2
 801366a:	801a      	strh	r2, [r3, #0]
 801366c:	e01d      	b.n	80136aa <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801366e:	687a      	ldr	r2, [r7, #4]
 8013670:	683b      	ldr	r3, [r7, #0]
 8013672:	781b      	ldrb	r3, [r3, #0]
 8013674:	009b      	lsls	r3, r3, #2
 8013676:	18d3      	adds	r3, r2, r3
 8013678:	881b      	ldrh	r3, [r3, #0]
 801367a:	b29a      	uxth	r2, r3
 801367c:	200e      	movs	r0, #14
 801367e:	183b      	adds	r3, r7, r0
 8013680:	490e      	ldr	r1, [pc, #56]	@ (80136bc <USB_EPSetStall+0x9c>)
 8013682:	400a      	ands	r2, r1
 8013684:	801a      	strh	r2, [r3, #0]
 8013686:	183b      	adds	r3, r7, r0
 8013688:	183a      	adds	r2, r7, r0
 801368a:	8812      	ldrh	r2, [r2, #0]
 801368c:	2180      	movs	r1, #128	@ 0x80
 801368e:	0149      	lsls	r1, r1, #5
 8013690:	404a      	eors	r2, r1
 8013692:	801a      	strh	r2, [r3, #0]
 8013694:	687a      	ldr	r2, [r7, #4]
 8013696:	683b      	ldr	r3, [r7, #0]
 8013698:	781b      	ldrb	r3, [r3, #0]
 801369a:	009b      	lsls	r3, r3, #2
 801369c:	18d3      	adds	r3, r2, r3
 801369e:	183a      	adds	r2, r7, r0
 80136a0:	8812      	ldrh	r2, [r2, #0]
 80136a2:	4905      	ldr	r1, [pc, #20]	@ (80136b8 <USB_EPSetStall+0x98>)
 80136a4:	430a      	orrs	r2, r1
 80136a6:	b292      	uxth	r2, r2
 80136a8:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80136aa:	2300      	movs	r3, #0
}
 80136ac:	0018      	movs	r0, r3
 80136ae:	46bd      	mov	sp, r7
 80136b0:	b004      	add	sp, #16
 80136b2:	bd80      	pop	{r7, pc}
 80136b4:	ffff8fbf 	.word	0xffff8fbf
 80136b8:	ffff8080 	.word	0xffff8080
 80136bc:	ffffbf8f 	.word	0xffffbf8f

080136c0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b086      	sub	sp, #24
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
 80136c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80136ca:	683b      	ldr	r3, [r7, #0]
 80136cc:	7b1b      	ldrb	r3, [r3, #12]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d000      	beq.n	80136d4 <USB_EPClearStall+0x14>
 80136d2:	e095      	b.n	8013800 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80136d4:	683b      	ldr	r3, [r7, #0]
 80136d6:	785b      	ldrb	r3, [r3, #1]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d046      	beq.n	801376a <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80136dc:	687a      	ldr	r2, [r7, #4]
 80136de:	683b      	ldr	r3, [r7, #0]
 80136e0:	781b      	ldrb	r3, [r3, #0]
 80136e2:	009b      	lsls	r3, r3, #2
 80136e4:	18d2      	adds	r2, r2, r3
 80136e6:	2110      	movs	r1, #16
 80136e8:	187b      	adds	r3, r7, r1
 80136ea:	8812      	ldrh	r2, [r2, #0]
 80136ec:	801a      	strh	r2, [r3, #0]
 80136ee:	187b      	adds	r3, r7, r1
 80136f0:	881b      	ldrh	r3, [r3, #0]
 80136f2:	2240      	movs	r2, #64	@ 0x40
 80136f4:	4013      	ands	r3, r2
 80136f6:	d016      	beq.n	8013726 <USB_EPClearStall+0x66>
 80136f8:	687a      	ldr	r2, [r7, #4]
 80136fa:	683b      	ldr	r3, [r7, #0]
 80136fc:	781b      	ldrb	r3, [r3, #0]
 80136fe:	009b      	lsls	r3, r3, #2
 8013700:	18d3      	adds	r3, r2, r3
 8013702:	881b      	ldrh	r3, [r3, #0]
 8013704:	b29a      	uxth	r2, r3
 8013706:	200e      	movs	r0, #14
 8013708:	183b      	adds	r3, r7, r0
 801370a:	4940      	ldr	r1, [pc, #256]	@ (801380c <USB_EPClearStall+0x14c>)
 801370c:	400a      	ands	r2, r1
 801370e:	801a      	strh	r2, [r3, #0]
 8013710:	687a      	ldr	r2, [r7, #4]
 8013712:	683b      	ldr	r3, [r7, #0]
 8013714:	781b      	ldrb	r3, [r3, #0]
 8013716:	009b      	lsls	r3, r3, #2
 8013718:	18d3      	adds	r3, r2, r3
 801371a:	183a      	adds	r2, r7, r0
 801371c:	8812      	ldrh	r2, [r2, #0]
 801371e:	493c      	ldr	r1, [pc, #240]	@ (8013810 <USB_EPClearStall+0x150>)
 8013720:	430a      	orrs	r2, r1
 8013722:	b292      	uxth	r2, r2
 8013724:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013726:	683b      	ldr	r3, [r7, #0]
 8013728:	78db      	ldrb	r3, [r3, #3]
 801372a:	2b01      	cmp	r3, #1
 801372c:	d068      	beq.n	8013800 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801372e:	687a      	ldr	r2, [r7, #4]
 8013730:	683b      	ldr	r3, [r7, #0]
 8013732:	781b      	ldrb	r3, [r3, #0]
 8013734:	009b      	lsls	r3, r3, #2
 8013736:	18d3      	adds	r3, r2, r3
 8013738:	881b      	ldrh	r3, [r3, #0]
 801373a:	b29a      	uxth	r2, r3
 801373c:	200c      	movs	r0, #12
 801373e:	183b      	adds	r3, r7, r0
 8013740:	4934      	ldr	r1, [pc, #208]	@ (8013814 <USB_EPClearStall+0x154>)
 8013742:	400a      	ands	r2, r1
 8013744:	801a      	strh	r2, [r3, #0]
 8013746:	183b      	adds	r3, r7, r0
 8013748:	183a      	adds	r2, r7, r0
 801374a:	8812      	ldrh	r2, [r2, #0]
 801374c:	2120      	movs	r1, #32
 801374e:	404a      	eors	r2, r1
 8013750:	801a      	strh	r2, [r3, #0]
 8013752:	687a      	ldr	r2, [r7, #4]
 8013754:	683b      	ldr	r3, [r7, #0]
 8013756:	781b      	ldrb	r3, [r3, #0]
 8013758:	009b      	lsls	r3, r3, #2
 801375a:	18d3      	adds	r3, r2, r3
 801375c:	183a      	adds	r2, r7, r0
 801375e:	8812      	ldrh	r2, [r2, #0]
 8013760:	492d      	ldr	r1, [pc, #180]	@ (8013818 <USB_EPClearStall+0x158>)
 8013762:	430a      	orrs	r2, r1
 8013764:	b292      	uxth	r2, r2
 8013766:	801a      	strh	r2, [r3, #0]
 8013768:	e04a      	b.n	8013800 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801376a:	687a      	ldr	r2, [r7, #4]
 801376c:	683b      	ldr	r3, [r7, #0]
 801376e:	781b      	ldrb	r3, [r3, #0]
 8013770:	009b      	lsls	r3, r3, #2
 8013772:	18d2      	adds	r2, r2, r3
 8013774:	2116      	movs	r1, #22
 8013776:	187b      	adds	r3, r7, r1
 8013778:	8812      	ldrh	r2, [r2, #0]
 801377a:	801a      	strh	r2, [r3, #0]
 801377c:	187b      	adds	r3, r7, r1
 801377e:	881a      	ldrh	r2, [r3, #0]
 8013780:	2380      	movs	r3, #128	@ 0x80
 8013782:	01db      	lsls	r3, r3, #7
 8013784:	4013      	ands	r3, r2
 8013786:	d016      	beq.n	80137b6 <USB_EPClearStall+0xf6>
 8013788:	687a      	ldr	r2, [r7, #4]
 801378a:	683b      	ldr	r3, [r7, #0]
 801378c:	781b      	ldrb	r3, [r3, #0]
 801378e:	009b      	lsls	r3, r3, #2
 8013790:	18d3      	adds	r3, r2, r3
 8013792:	881b      	ldrh	r3, [r3, #0]
 8013794:	b29a      	uxth	r2, r3
 8013796:	2014      	movs	r0, #20
 8013798:	183b      	adds	r3, r7, r0
 801379a:	491c      	ldr	r1, [pc, #112]	@ (801380c <USB_EPClearStall+0x14c>)
 801379c:	400a      	ands	r2, r1
 801379e:	801a      	strh	r2, [r3, #0]
 80137a0:	687a      	ldr	r2, [r7, #4]
 80137a2:	683b      	ldr	r3, [r7, #0]
 80137a4:	781b      	ldrb	r3, [r3, #0]
 80137a6:	009b      	lsls	r3, r3, #2
 80137a8:	18d3      	adds	r3, r2, r3
 80137aa:	183a      	adds	r2, r7, r0
 80137ac:	8812      	ldrh	r2, [r2, #0]
 80137ae:	491b      	ldr	r1, [pc, #108]	@ (801381c <USB_EPClearStall+0x15c>)
 80137b0:	430a      	orrs	r2, r1
 80137b2:	b292      	uxth	r2, r2
 80137b4:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80137b6:	687a      	ldr	r2, [r7, #4]
 80137b8:	683b      	ldr	r3, [r7, #0]
 80137ba:	781b      	ldrb	r3, [r3, #0]
 80137bc:	009b      	lsls	r3, r3, #2
 80137be:	18d3      	adds	r3, r2, r3
 80137c0:	881b      	ldrh	r3, [r3, #0]
 80137c2:	b29a      	uxth	r2, r3
 80137c4:	2012      	movs	r0, #18
 80137c6:	183b      	adds	r3, r7, r0
 80137c8:	4915      	ldr	r1, [pc, #84]	@ (8013820 <USB_EPClearStall+0x160>)
 80137ca:	400a      	ands	r2, r1
 80137cc:	801a      	strh	r2, [r3, #0]
 80137ce:	183b      	adds	r3, r7, r0
 80137d0:	183a      	adds	r2, r7, r0
 80137d2:	8812      	ldrh	r2, [r2, #0]
 80137d4:	2180      	movs	r1, #128	@ 0x80
 80137d6:	0149      	lsls	r1, r1, #5
 80137d8:	404a      	eors	r2, r1
 80137da:	801a      	strh	r2, [r3, #0]
 80137dc:	183b      	adds	r3, r7, r0
 80137de:	183a      	adds	r2, r7, r0
 80137e0:	8812      	ldrh	r2, [r2, #0]
 80137e2:	2180      	movs	r1, #128	@ 0x80
 80137e4:	0189      	lsls	r1, r1, #6
 80137e6:	404a      	eors	r2, r1
 80137e8:	801a      	strh	r2, [r3, #0]
 80137ea:	687a      	ldr	r2, [r7, #4]
 80137ec:	683b      	ldr	r3, [r7, #0]
 80137ee:	781b      	ldrb	r3, [r3, #0]
 80137f0:	009b      	lsls	r3, r3, #2
 80137f2:	18d3      	adds	r3, r2, r3
 80137f4:	183a      	adds	r2, r7, r0
 80137f6:	8812      	ldrh	r2, [r2, #0]
 80137f8:	4907      	ldr	r1, [pc, #28]	@ (8013818 <USB_EPClearStall+0x158>)
 80137fa:	430a      	orrs	r2, r1
 80137fc:	b292      	uxth	r2, r2
 80137fe:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8013800:	2300      	movs	r3, #0
}
 8013802:	0018      	movs	r0, r3
 8013804:	46bd      	mov	sp, r7
 8013806:	b006      	add	sp, #24
 8013808:	bd80      	pop	{r7, pc}
 801380a:	46c0      	nop			@ (mov r8, r8)
 801380c:	ffff8f8f 	.word	0xffff8f8f
 8013810:	ffff80c0 	.word	0xffff80c0
 8013814:	ffff8fbf 	.word	0xffff8fbf
 8013818:	ffff8080 	.word	0xffff8080
 801381c:	ffffc080 	.word	0xffffc080
 8013820:	ffffbf8f 	.word	0xffffbf8f

08013824 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b082      	sub	sp, #8
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
 801382c:	000a      	movs	r2, r1
 801382e:	1cfb      	adds	r3, r7, #3
 8013830:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8013832:	1cfb      	adds	r3, r7, #3
 8013834:	781b      	ldrb	r3, [r3, #0]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d103      	bne.n	8013842 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	224c      	movs	r2, #76	@ 0x4c
 801383e:	2180      	movs	r1, #128	@ 0x80
 8013840:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8013842:	2300      	movs	r3, #0
}
 8013844:	0018      	movs	r0, r3
 8013846:	46bd      	mov	sp, r7
 8013848:	b002      	add	sp, #8
 801384a:	bd80      	pop	{r7, pc}

0801384c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 801384c:	b580      	push	{r7, lr}
 801384e:	b082      	sub	sp, #8
 8013850:	af00      	add	r7, sp, #0
 8013852:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	2258      	movs	r2, #88	@ 0x58
 8013858:	5a9b      	ldrh	r3, [r3, r2]
 801385a:	b29b      	uxth	r3, r3
 801385c:	4a05      	ldr	r2, [pc, #20]	@ (8013874 <USB_DevConnect+0x28>)
 801385e:	4313      	orrs	r3, r2
 8013860:	b299      	uxth	r1, r3
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	2258      	movs	r2, #88	@ 0x58
 8013866:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8013868:	2300      	movs	r3, #0
}
 801386a:	0018      	movs	r0, r3
 801386c:	46bd      	mov	sp, r7
 801386e:	b002      	add	sp, #8
 8013870:	bd80      	pop	{r7, pc}
 8013872:	46c0      	nop			@ (mov r8, r8)
 8013874:	ffff8000 	.word	0xffff8000

08013878 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b084      	sub	sp, #16
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	2244      	movs	r2, #68	@ 0x44
 8013884:	5a9b      	ldrh	r3, [r3, r2]
 8013886:	b29b      	uxth	r3, r3
 8013888:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801388a:	68fb      	ldr	r3, [r7, #12]
}
 801388c:	0018      	movs	r0, r3
 801388e:	46bd      	mov	sp, r7
 8013890:	b004      	add	sp, #16
 8013892:	bd80      	pop	{r7, pc}

08013894 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8013894:	b580      	push	{r7, lr}
 8013896:	b08a      	sub	sp, #40	@ 0x28
 8013898:	af00      	add	r7, sp, #0
 801389a:	60f8      	str	r0, [r7, #12]
 801389c:	60b9      	str	r1, [r7, #8]
 801389e:	0019      	movs	r1, r3
 80138a0:	1dbb      	adds	r3, r7, #6
 80138a2:	801a      	strh	r2, [r3, #0]
 80138a4:	1d3b      	adds	r3, r7, #4
 80138a6:	1c0a      	adds	r2, r1, #0
 80138a8:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80138aa:	1d3b      	adds	r3, r7, #4
 80138ac:	881b      	ldrh	r3, [r3, #0]
 80138ae:	3301      	adds	r3, #1
 80138b0:	085b      	lsrs	r3, r3, #1
 80138b2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80138b8:	68bb      	ldr	r3, [r7, #8]
 80138ba:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80138bc:	1dbb      	adds	r3, r7, #6
 80138be:	881a      	ldrh	r2, [r3, #0]
 80138c0:	697b      	ldr	r3, [r7, #20]
 80138c2:	18d3      	adds	r3, r2, r3
 80138c4:	2280      	movs	r2, #128	@ 0x80
 80138c6:	00d2      	lsls	r2, r2, #3
 80138c8:	4694      	mov	ip, r2
 80138ca:	4463      	add	r3, ip
 80138cc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80138ce:	69bb      	ldr	r3, [r7, #24]
 80138d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80138d2:	e020      	b.n	8013916 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 80138d4:	69fb      	ldr	r3, [r7, #28]
 80138d6:	781a      	ldrb	r2, [r3, #0]
 80138d8:	2112      	movs	r1, #18
 80138da:	187b      	adds	r3, r7, r1
 80138dc:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80138de:	69fb      	ldr	r3, [r7, #28]
 80138e0:	3301      	adds	r3, #1
 80138e2:	781b      	ldrb	r3, [r3, #0]
 80138e4:	021b      	lsls	r3, r3, #8
 80138e6:	b21a      	sxth	r2, r3
 80138e8:	187b      	adds	r3, r7, r1
 80138ea:	2000      	movs	r0, #0
 80138ec:	5e1b      	ldrsh	r3, [r3, r0]
 80138ee:	4313      	orrs	r3, r2
 80138f0:	b21a      	sxth	r2, r3
 80138f2:	187b      	adds	r3, r7, r1
 80138f4:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80138f6:	6a3b      	ldr	r3, [r7, #32]
 80138f8:	187a      	adds	r2, r7, r1
 80138fa:	8812      	ldrh	r2, [r2, #0]
 80138fc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80138fe:	6a3b      	ldr	r3, [r7, #32]
 8013900:	3302      	adds	r3, #2
 8013902:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8013904:	69fb      	ldr	r3, [r7, #28]
 8013906:	3301      	adds	r3, #1
 8013908:	61fb      	str	r3, [r7, #28]
    pBuf++;
 801390a:	69fb      	ldr	r3, [r7, #28]
 801390c:	3301      	adds	r3, #1
 801390e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8013910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013912:	3b01      	subs	r3, #1
 8013914:	627b      	str	r3, [r7, #36]	@ 0x24
 8013916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013918:	2b00      	cmp	r3, #0
 801391a:	d1db      	bne.n	80138d4 <USB_WritePMA+0x40>
  }
}
 801391c:	46c0      	nop			@ (mov r8, r8)
 801391e:	46c0      	nop			@ (mov r8, r8)
 8013920:	46bd      	mov	sp, r7
 8013922:	b00a      	add	sp, #40	@ 0x28
 8013924:	bd80      	pop	{r7, pc}

08013926 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8013926:	b580      	push	{r7, lr}
 8013928:	b08a      	sub	sp, #40	@ 0x28
 801392a:	af00      	add	r7, sp, #0
 801392c:	60f8      	str	r0, [r7, #12]
 801392e:	60b9      	str	r1, [r7, #8]
 8013930:	0019      	movs	r1, r3
 8013932:	1dbb      	adds	r3, r7, #6
 8013934:	801a      	strh	r2, [r3, #0]
 8013936:	1d3b      	adds	r3, r7, #4
 8013938:	1c0a      	adds	r2, r1, #0
 801393a:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801393c:	1d3b      	adds	r3, r7, #4
 801393e:	881b      	ldrh	r3, [r3, #0]
 8013940:	085b      	lsrs	r3, r3, #1
 8013942:	b29b      	uxth	r3, r3
 8013944:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801394a:	68bb      	ldr	r3, [r7, #8]
 801394c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801394e:	1dbb      	adds	r3, r7, #6
 8013950:	881a      	ldrh	r2, [r3, #0]
 8013952:	697b      	ldr	r3, [r7, #20]
 8013954:	18d3      	adds	r3, r2, r3
 8013956:	2280      	movs	r2, #128	@ 0x80
 8013958:	00d2      	lsls	r2, r2, #3
 801395a:	4694      	mov	ip, r2
 801395c:	4463      	add	r3, ip
 801395e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8013960:	69bb      	ldr	r3, [r7, #24]
 8013962:	627b      	str	r3, [r7, #36]	@ 0x24
 8013964:	e018      	b.n	8013998 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8013966:	6a3b      	ldr	r3, [r7, #32]
 8013968:	881b      	ldrh	r3, [r3, #0]
 801396a:	b29b      	uxth	r3, r3
 801396c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801396e:	6a3b      	ldr	r3, [r7, #32]
 8013970:	3302      	adds	r3, #2
 8013972:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8013974:	693b      	ldr	r3, [r7, #16]
 8013976:	b2da      	uxtb	r2, r3
 8013978:	69fb      	ldr	r3, [r7, #28]
 801397a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801397c:	69fb      	ldr	r3, [r7, #28]
 801397e:	3301      	adds	r3, #1
 8013980:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8013982:	693b      	ldr	r3, [r7, #16]
 8013984:	0a1b      	lsrs	r3, r3, #8
 8013986:	b2da      	uxtb	r2, r3
 8013988:	69fb      	ldr	r3, [r7, #28]
 801398a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 801398c:	69fb      	ldr	r3, [r7, #28]
 801398e:	3301      	adds	r3, #1
 8013990:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8013992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013994:	3b01      	subs	r3, #1
 8013996:	627b      	str	r3, [r7, #36]	@ 0x24
 8013998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801399a:	2b00      	cmp	r3, #0
 801399c:	d1e3      	bne.n	8013966 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801399e:	1d3b      	adds	r3, r7, #4
 80139a0:	881b      	ldrh	r3, [r3, #0]
 80139a2:	2201      	movs	r2, #1
 80139a4:	4013      	ands	r3, r2
 80139a6:	b29b      	uxth	r3, r3
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d007      	beq.n	80139bc <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 80139ac:	6a3b      	ldr	r3, [r7, #32]
 80139ae:	881b      	ldrh	r3, [r3, #0]
 80139b0:	b29b      	uxth	r3, r3
 80139b2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80139b4:	693b      	ldr	r3, [r7, #16]
 80139b6:	b2da      	uxtb	r2, r3
 80139b8:	69fb      	ldr	r3, [r7, #28]
 80139ba:	701a      	strb	r2, [r3, #0]
  }
}
 80139bc:	46c0      	nop			@ (mov r8, r8)
 80139be:	46bd      	mov	sp, r7
 80139c0:	b00a      	add	sp, #40	@ 0x28
 80139c2:	bd80      	pop	{r7, pc}

080139c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b084      	sub	sp, #16
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
 80139cc:	000a      	movs	r2, r1
 80139ce:	1cfb      	adds	r3, r7, #3
 80139d0:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80139d2:	230f      	movs	r3, #15
 80139d4:	18fb      	adds	r3, r7, r3
 80139d6:	2200      	movs	r2, #0
 80139d8:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	7c1b      	ldrb	r3, [r3, #16]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d116      	bne.n	8013a10 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80139e2:	2380      	movs	r3, #128	@ 0x80
 80139e4:	009b      	lsls	r3, r3, #2
 80139e6:	6878      	ldr	r0, [r7, #4]
 80139e8:	2202      	movs	r2, #2
 80139ea:	2181      	movs	r1, #129	@ 0x81
 80139ec:	f002 f81d 	bl	8015a2a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	2201      	movs	r2, #1
 80139f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80139f6:	2380      	movs	r3, #128	@ 0x80
 80139f8:	009b      	lsls	r3, r3, #2
 80139fa:	6878      	ldr	r0, [r7, #4]
 80139fc:	2202      	movs	r2, #2
 80139fe:	2101      	movs	r1, #1
 8013a00:	f002 f813 	bl	8015a2a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013a04:	687a      	ldr	r2, [r7, #4]
 8013a06:	23b6      	movs	r3, #182	@ 0xb6
 8013a08:	005b      	lsls	r3, r3, #1
 8013a0a:	2101      	movs	r1, #1
 8013a0c:	50d1      	str	r1, [r2, r3]
 8013a0e:	e013      	b.n	8013a38 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013a10:	6878      	ldr	r0, [r7, #4]
 8013a12:	2340      	movs	r3, #64	@ 0x40
 8013a14:	2202      	movs	r2, #2
 8013a16:	2181      	movs	r1, #129	@ 0x81
 8013a18:	f002 f807 	bl	8015a2a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	2201      	movs	r2, #1
 8013a20:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013a22:	6878      	ldr	r0, [r7, #4]
 8013a24:	2340      	movs	r3, #64	@ 0x40
 8013a26:	2202      	movs	r2, #2
 8013a28:	2101      	movs	r1, #1
 8013a2a:	f001 fffe 	bl	8015a2a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013a2e:	687a      	ldr	r2, [r7, #4]
 8013a30:	23b6      	movs	r3, #182	@ 0xb6
 8013a32:	005b      	lsls	r3, r3, #1
 8013a34:	2101      	movs	r1, #1
 8013a36:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013a38:	6878      	ldr	r0, [r7, #4]
 8013a3a:	2308      	movs	r3, #8
 8013a3c:	2203      	movs	r2, #3
 8013a3e:	2182      	movs	r1, #130	@ 0x82
 8013a40:	f001 fff3 	bl	8015a2a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	2201      	movs	r2, #1
 8013a48:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013a4a:	2387      	movs	r3, #135	@ 0x87
 8013a4c:	009b      	lsls	r3, r3, #2
 8013a4e:	0018      	movs	r0, r3
 8013a50:	f002 f984 	bl	8015d5c <USBD_static_malloc>
 8013a54:	0001      	movs	r1, r0
 8013a56:	687a      	ldr	r2, [r7, #4]
 8013a58:	23ae      	movs	r3, #174	@ 0xae
 8013a5a:	009b      	lsls	r3, r3, #2
 8013a5c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8013a5e:	687a      	ldr	r2, [r7, #4]
 8013a60:	23ae      	movs	r3, #174	@ 0xae
 8013a62:	009b      	lsls	r3, r3, #2
 8013a64:	58d3      	ldr	r3, [r2, r3]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d104      	bne.n	8013a74 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8013a6a:	230f      	movs	r3, #15
 8013a6c:	18fb      	adds	r3, r7, r3
 8013a6e:	2201      	movs	r2, #1
 8013a70:	701a      	strb	r2, [r3, #0]
 8013a72:	e02c      	b.n	8013ace <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013a74:	687a      	ldr	r2, [r7, #4]
 8013a76:	23ae      	movs	r3, #174	@ 0xae
 8013a78:	009b      	lsls	r3, r3, #2
 8013a7a:	58d3      	ldr	r3, [r2, r3]
 8013a7c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8013a7e:	687a      	ldr	r2, [r7, #4]
 8013a80:	23af      	movs	r3, #175	@ 0xaf
 8013a82:	009b      	lsls	r3, r3, #2
 8013a84:	58d3      	ldr	r3, [r2, r3]
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8013a8a:	68ba      	ldr	r2, [r7, #8]
 8013a8c:	2385      	movs	r3, #133	@ 0x85
 8013a8e:	009b      	lsls	r3, r3, #2
 8013a90:	2100      	movs	r1, #0
 8013a92:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8013a94:	68ba      	ldr	r2, [r7, #8]
 8013a96:	2386      	movs	r3, #134	@ 0x86
 8013a98:	009b      	lsls	r3, r3, #2
 8013a9a:	2100      	movs	r1, #0
 8013a9c:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	7c1b      	ldrb	r3, [r3, #16]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d10a      	bne.n	8013abc <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013aa6:	68ba      	ldr	r2, [r7, #8]
 8013aa8:	2381      	movs	r3, #129	@ 0x81
 8013aaa:	009b      	lsls	r3, r3, #2
 8013aac:	58d2      	ldr	r2, [r2, r3]
 8013aae:	2380      	movs	r3, #128	@ 0x80
 8013ab0:	009b      	lsls	r3, r3, #2
 8013ab2:	6878      	ldr	r0, [r7, #4]
 8013ab4:	2101      	movs	r1, #1
 8013ab6:	f002 f903 	bl	8015cc0 <USBD_LL_PrepareReceive>
 8013aba:	e008      	b.n	8013ace <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013abc:	68ba      	ldr	r2, [r7, #8]
 8013abe:	2381      	movs	r3, #129	@ 0x81
 8013ac0:	009b      	lsls	r3, r3, #2
 8013ac2:	58d2      	ldr	r2, [r2, r3]
 8013ac4:	6878      	ldr	r0, [r7, #4]
 8013ac6:	2340      	movs	r3, #64	@ 0x40
 8013ac8:	2101      	movs	r1, #1
 8013aca:	f002 f8f9 	bl	8015cc0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8013ace:	230f      	movs	r3, #15
 8013ad0:	18fb      	adds	r3, r7, r3
 8013ad2:	781b      	ldrb	r3, [r3, #0]
}
 8013ad4:	0018      	movs	r0, r3
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	b004      	add	sp, #16
 8013ada:	bd80      	pop	{r7, pc}

08013adc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b084      	sub	sp, #16
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
 8013ae4:	000a      	movs	r2, r1
 8013ae6:	1cfb      	adds	r3, r7, #3
 8013ae8:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8013aea:	230f      	movs	r3, #15
 8013aec:	18fb      	adds	r3, r7, r3
 8013aee:	2200      	movs	r2, #0
 8013af0:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	2181      	movs	r1, #129	@ 0x81
 8013af6:	0018      	movs	r0, r3
 8013af8:	f001 ffce 	bl	8015a98 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	2200      	movs	r2, #0
 8013b00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	2101      	movs	r1, #1
 8013b06:	0018      	movs	r0, r3
 8013b08:	f001 ffc6 	bl	8015a98 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8013b0c:	687a      	ldr	r2, [r7, #4]
 8013b0e:	23b6      	movs	r3, #182	@ 0xb6
 8013b10:	005b      	lsls	r3, r3, #1
 8013b12:	2100      	movs	r1, #0
 8013b14:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	2182      	movs	r1, #130	@ 0x82
 8013b1a:	0018      	movs	r0, r3
 8013b1c:	f001 ffbc 	bl	8015a98 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	2200      	movs	r2, #0
 8013b24:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8013b26:	687a      	ldr	r2, [r7, #4]
 8013b28:	23ae      	movs	r3, #174	@ 0xae
 8013b2a:	009b      	lsls	r3, r3, #2
 8013b2c:	58d3      	ldr	r3, [r2, r3]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d011      	beq.n	8013b56 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8013b32:	687a      	ldr	r2, [r7, #4]
 8013b34:	23af      	movs	r3, #175	@ 0xaf
 8013b36:	009b      	lsls	r3, r3, #2
 8013b38:	58d3      	ldr	r3, [r2, r3]
 8013b3a:	685b      	ldr	r3, [r3, #4]
 8013b3c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8013b3e:	687a      	ldr	r2, [r7, #4]
 8013b40:	23ae      	movs	r3, #174	@ 0xae
 8013b42:	009b      	lsls	r3, r3, #2
 8013b44:	58d3      	ldr	r3, [r2, r3]
 8013b46:	0018      	movs	r0, r3
 8013b48:	f002 f914 	bl	8015d74 <USBD_static_free>
    pdev->pClassData = NULL;
 8013b4c:	687a      	ldr	r2, [r7, #4]
 8013b4e:	23ae      	movs	r3, #174	@ 0xae
 8013b50:	009b      	lsls	r3, r3, #2
 8013b52:	2100      	movs	r1, #0
 8013b54:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8013b56:	230f      	movs	r3, #15
 8013b58:	18fb      	adds	r3, r7, r3
 8013b5a:	781b      	ldrb	r3, [r3, #0]
}
 8013b5c:	0018      	movs	r0, r3
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	b004      	add	sp, #16
 8013b62:	bd80      	pop	{r7, pc}

08013b64 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b086      	sub	sp, #24
 8013b68:	af00      	add	r7, sp, #0
 8013b6a:	6078      	str	r0, [r7, #4]
 8013b6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013b6e:	687a      	ldr	r2, [r7, #4]
 8013b70:	23ae      	movs	r3, #174	@ 0xae
 8013b72:	009b      	lsls	r3, r3, #2
 8013b74:	58d3      	ldr	r3, [r2, r3]
 8013b76:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8013b78:	230f      	movs	r3, #15
 8013b7a:	18fb      	adds	r3, r7, r3
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8013b80:	230c      	movs	r3, #12
 8013b82:	18fb      	adds	r3, r7, r3
 8013b84:	2200      	movs	r2, #0
 8013b86:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8013b88:	2317      	movs	r3, #23
 8013b8a:	18fb      	adds	r3, r7, r3
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013b90:	683b      	ldr	r3, [r7, #0]
 8013b92:	781b      	ldrb	r3, [r3, #0]
 8013b94:	001a      	movs	r2, r3
 8013b96:	2360      	movs	r3, #96	@ 0x60
 8013b98:	4013      	ands	r3, r2
 8013b9a:	d03d      	beq.n	8013c18 <USBD_CDC_Setup+0xb4>
 8013b9c:	2b20      	cmp	r3, #32
 8013b9e:	d000      	beq.n	8013ba2 <USBD_CDC_Setup+0x3e>
 8013ba0:	e094      	b.n	8013ccc <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8013ba2:	683b      	ldr	r3, [r7, #0]
 8013ba4:	88db      	ldrh	r3, [r3, #6]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d02b      	beq.n	8013c02 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8013baa:	683b      	ldr	r3, [r7, #0]
 8013bac:	781b      	ldrb	r3, [r3, #0]
 8013bae:	b25b      	sxtb	r3, r3
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	da12      	bge.n	8013bda <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013bb4:	687a      	ldr	r2, [r7, #4]
 8013bb6:	23af      	movs	r3, #175	@ 0xaf
 8013bb8:	009b      	lsls	r3, r3, #2
 8013bba:	58d3      	ldr	r3, [r2, r3]
 8013bbc:	689b      	ldr	r3, [r3, #8]
 8013bbe:	683a      	ldr	r2, [r7, #0]
 8013bc0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8013bc2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013bc4:	683a      	ldr	r2, [r7, #0]
 8013bc6:	88d2      	ldrh	r2, [r2, #6]
 8013bc8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8013bca:	6939      	ldr	r1, [r7, #16]
 8013bcc:	683b      	ldr	r3, [r7, #0]
 8013bce:	88da      	ldrh	r2, [r3, #6]
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	0018      	movs	r0, r3
 8013bd4:	f001 fb79 	bl	80152ca <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8013bd8:	e083      	b.n	8013ce2 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8013bda:	683b      	ldr	r3, [r7, #0]
 8013bdc:	7859      	ldrb	r1, [r3, #1]
 8013bde:	693a      	ldr	r2, [r7, #16]
 8013be0:	2380      	movs	r3, #128	@ 0x80
 8013be2:	009b      	lsls	r3, r3, #2
 8013be4:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8013be6:	683b      	ldr	r3, [r7, #0]
 8013be8:	88db      	ldrh	r3, [r3, #6]
 8013bea:	b2d9      	uxtb	r1, r3
 8013bec:	693b      	ldr	r3, [r7, #16]
 8013bee:	4a40      	ldr	r2, [pc, #256]	@ (8013cf0 <USBD_CDC_Setup+0x18c>)
 8013bf0:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8013bf2:	6939      	ldr	r1, [r7, #16]
 8013bf4:	683b      	ldr	r3, [r7, #0]
 8013bf6:	88da      	ldrh	r2, [r3, #6]
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	0018      	movs	r0, r3
 8013bfc:	f001 fb98 	bl	8015330 <USBD_CtlPrepareRx>
      break;
 8013c00:	e06f      	b.n	8013ce2 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013c02:	687a      	ldr	r2, [r7, #4]
 8013c04:	23af      	movs	r3, #175	@ 0xaf
 8013c06:	009b      	lsls	r3, r3, #2
 8013c08:	58d3      	ldr	r3, [r2, r3]
 8013c0a:	689b      	ldr	r3, [r3, #8]
 8013c0c:	683a      	ldr	r2, [r7, #0]
 8013c0e:	7850      	ldrb	r0, [r2, #1]
 8013c10:	6839      	ldr	r1, [r7, #0]
 8013c12:	2200      	movs	r2, #0
 8013c14:	4798      	blx	r3
      break;
 8013c16:	e064      	b.n	8013ce2 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013c18:	683b      	ldr	r3, [r7, #0]
 8013c1a:	785b      	ldrb	r3, [r3, #1]
 8013c1c:	2b0b      	cmp	r3, #11
 8013c1e:	d037      	beq.n	8013c90 <USBD_CDC_Setup+0x12c>
 8013c20:	dc47      	bgt.n	8013cb2 <USBD_CDC_Setup+0x14e>
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d002      	beq.n	8013c2c <USBD_CDC_Setup+0xc8>
 8013c26:	2b0a      	cmp	r3, #10
 8013c28:	d019      	beq.n	8013c5e <USBD_CDC_Setup+0xfa>
 8013c2a:	e042      	b.n	8013cb2 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c2c:	687a      	ldr	r2, [r7, #4]
 8013c2e:	23a7      	movs	r3, #167	@ 0xa7
 8013c30:	009b      	lsls	r3, r3, #2
 8013c32:	5cd3      	ldrb	r3, [r2, r3]
 8013c34:	2b03      	cmp	r3, #3
 8013c36:	d107      	bne.n	8013c48 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8013c38:	230c      	movs	r3, #12
 8013c3a:	18f9      	adds	r1, r7, r3
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	2202      	movs	r2, #2
 8013c40:	0018      	movs	r0, r3
 8013c42:	f001 fb42 	bl	80152ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013c46:	e040      	b.n	8013cca <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8013c48:	683a      	ldr	r2, [r7, #0]
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	0011      	movs	r1, r2
 8013c4e:	0018      	movs	r0, r3
 8013c50:	f001 fabd 	bl	80151ce <USBD_CtlError>
            ret = USBD_FAIL;
 8013c54:	2317      	movs	r3, #23
 8013c56:	18fb      	adds	r3, r7, r3
 8013c58:	2202      	movs	r2, #2
 8013c5a:	701a      	strb	r2, [r3, #0]
          break;
 8013c5c:	e035      	b.n	8013cca <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c5e:	687a      	ldr	r2, [r7, #4]
 8013c60:	23a7      	movs	r3, #167	@ 0xa7
 8013c62:	009b      	lsls	r3, r3, #2
 8013c64:	5cd3      	ldrb	r3, [r2, r3]
 8013c66:	2b03      	cmp	r3, #3
 8013c68:	d107      	bne.n	8013c7a <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8013c6a:	230f      	movs	r3, #15
 8013c6c:	18f9      	adds	r1, r7, r3
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	2201      	movs	r2, #1
 8013c72:	0018      	movs	r0, r3
 8013c74:	f001 fb29 	bl	80152ca <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013c78:	e027      	b.n	8013cca <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8013c7a:	683a      	ldr	r2, [r7, #0]
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	0011      	movs	r1, r2
 8013c80:	0018      	movs	r0, r3
 8013c82:	f001 faa4 	bl	80151ce <USBD_CtlError>
            ret = USBD_FAIL;
 8013c86:	2317      	movs	r3, #23
 8013c88:	18fb      	adds	r3, r7, r3
 8013c8a:	2202      	movs	r2, #2
 8013c8c:	701a      	strb	r2, [r3, #0]
          break;
 8013c8e:	e01c      	b.n	8013cca <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013c90:	687a      	ldr	r2, [r7, #4]
 8013c92:	23a7      	movs	r3, #167	@ 0xa7
 8013c94:	009b      	lsls	r3, r3, #2
 8013c96:	5cd3      	ldrb	r3, [r2, r3]
 8013c98:	2b03      	cmp	r3, #3
 8013c9a:	d015      	beq.n	8013cc8 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8013c9c:	683a      	ldr	r2, [r7, #0]
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	0011      	movs	r1, r2
 8013ca2:	0018      	movs	r0, r3
 8013ca4:	f001 fa93 	bl	80151ce <USBD_CtlError>
            ret = USBD_FAIL;
 8013ca8:	2317      	movs	r3, #23
 8013caa:	18fb      	adds	r3, r7, r3
 8013cac:	2202      	movs	r2, #2
 8013cae:	701a      	strb	r2, [r3, #0]
          }
          break;
 8013cb0:	e00a      	b.n	8013cc8 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8013cb2:	683a      	ldr	r2, [r7, #0]
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	0011      	movs	r1, r2
 8013cb8:	0018      	movs	r0, r3
 8013cba:	f001 fa88 	bl	80151ce <USBD_CtlError>
          ret = USBD_FAIL;
 8013cbe:	2317      	movs	r3, #23
 8013cc0:	18fb      	adds	r3, r7, r3
 8013cc2:	2202      	movs	r2, #2
 8013cc4:	701a      	strb	r2, [r3, #0]
          break;
 8013cc6:	e000      	b.n	8013cca <USBD_CDC_Setup+0x166>
          break;
 8013cc8:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8013cca:	e00a      	b.n	8013ce2 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8013ccc:	683a      	ldr	r2, [r7, #0]
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	0011      	movs	r1, r2
 8013cd2:	0018      	movs	r0, r3
 8013cd4:	f001 fa7b 	bl	80151ce <USBD_CtlError>
      ret = USBD_FAIL;
 8013cd8:	2317      	movs	r3, #23
 8013cda:	18fb      	adds	r3, r7, r3
 8013cdc:	2202      	movs	r2, #2
 8013cde:	701a      	strb	r2, [r3, #0]
      break;
 8013ce0:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8013ce2:	2317      	movs	r3, #23
 8013ce4:	18fb      	adds	r3, r7, r3
 8013ce6:	781b      	ldrb	r3, [r3, #0]
}
 8013ce8:	0018      	movs	r0, r3
 8013cea:	46bd      	mov	sp, r7
 8013cec:	b006      	add	sp, #24
 8013cee:	bd80      	pop	{r7, pc}
 8013cf0:	00000201 	.word	0x00000201

08013cf4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b084      	sub	sp, #16
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	6078      	str	r0, [r7, #4]
 8013cfc:	000a      	movs	r2, r1
 8013cfe:	1cfb      	adds	r3, r7, #3
 8013d00:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013d02:	687a      	ldr	r2, [r7, #4]
 8013d04:	23ae      	movs	r3, #174	@ 0xae
 8013d06:	009b      	lsls	r3, r3, #2
 8013d08:	58d3      	ldr	r3, [r2, r3]
 8013d0a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8013d0c:	687a      	ldr	r2, [r7, #4]
 8013d0e:	23b0      	movs	r3, #176	@ 0xb0
 8013d10:	009b      	lsls	r3, r3, #2
 8013d12:	58d3      	ldr	r3, [r2, r3]
 8013d14:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8013d16:	687a      	ldr	r2, [r7, #4]
 8013d18:	23ae      	movs	r3, #174	@ 0xae
 8013d1a:	009b      	lsls	r3, r3, #2
 8013d1c:	58d3      	ldr	r3, [r2, r3]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d03e      	beq.n	8013da0 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8013d22:	1cfb      	adds	r3, r7, #3
 8013d24:	781a      	ldrb	r2, [r3, #0]
 8013d26:	6879      	ldr	r1, [r7, #4]
 8013d28:	0013      	movs	r3, r2
 8013d2a:	009b      	lsls	r3, r3, #2
 8013d2c:	189b      	adds	r3, r3, r2
 8013d2e:	009b      	lsls	r3, r3, #2
 8013d30:	18cb      	adds	r3, r1, r3
 8013d32:	331c      	adds	r3, #28
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d02b      	beq.n	8013d92 <USBD_CDC_DataIn+0x9e>
 8013d3a:	1cfb      	adds	r3, r7, #3
 8013d3c:	781a      	ldrb	r2, [r3, #0]
 8013d3e:	6879      	ldr	r1, [r7, #4]
 8013d40:	0013      	movs	r3, r2
 8013d42:	009b      	lsls	r3, r3, #2
 8013d44:	189b      	adds	r3, r3, r2
 8013d46:	009b      	lsls	r3, r3, #2
 8013d48:	18cb      	adds	r3, r1, r3
 8013d4a:	331c      	adds	r3, #28
 8013d4c:	6818      	ldr	r0, [r3, #0]
 8013d4e:	1cfb      	adds	r3, r7, #3
 8013d50:	781a      	ldrb	r2, [r3, #0]
 8013d52:	68b9      	ldr	r1, [r7, #8]
 8013d54:	0013      	movs	r3, r2
 8013d56:	009b      	lsls	r3, r3, #2
 8013d58:	189b      	adds	r3, r3, r2
 8013d5a:	00db      	lsls	r3, r3, #3
 8013d5c:	18cb      	adds	r3, r1, r3
 8013d5e:	3338      	adds	r3, #56	@ 0x38
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	0019      	movs	r1, r3
 8013d64:	f7ec fa72 	bl	800024c <__aeabi_uidivmod>
 8013d68:	1e0b      	subs	r3, r1, #0
 8013d6a:	d112      	bne.n	8013d92 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8013d6c:	1cfb      	adds	r3, r7, #3
 8013d6e:	781a      	ldrb	r2, [r3, #0]
 8013d70:	6879      	ldr	r1, [r7, #4]
 8013d72:	0013      	movs	r3, r2
 8013d74:	009b      	lsls	r3, r3, #2
 8013d76:	189b      	adds	r3, r3, r2
 8013d78:	009b      	lsls	r3, r3, #2
 8013d7a:	18cb      	adds	r3, r1, r3
 8013d7c:	331c      	adds	r3, #28
 8013d7e:	2200      	movs	r2, #0
 8013d80:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013d82:	1cfb      	adds	r3, r7, #3
 8013d84:	7819      	ldrb	r1, [r3, #0]
 8013d86:	6878      	ldr	r0, [r7, #4]
 8013d88:	2300      	movs	r3, #0
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	f001 ff61 	bl	8015c52 <USBD_LL_Transmit>
 8013d90:	e004      	b.n	8013d9c <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8013d92:	68fa      	ldr	r2, [r7, #12]
 8013d94:	2385      	movs	r3, #133	@ 0x85
 8013d96:	009b      	lsls	r3, r3, #2
 8013d98:	2100      	movs	r1, #0
 8013d9a:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	e000      	b.n	8013da2 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8013da0:	2302      	movs	r3, #2
  }
}
 8013da2:	0018      	movs	r0, r3
 8013da4:	46bd      	mov	sp, r7
 8013da6:	b004      	add	sp, #16
 8013da8:	bd80      	pop	{r7, pc}

08013daa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013daa:	b580      	push	{r7, lr}
 8013dac:	b084      	sub	sp, #16
 8013dae:	af00      	add	r7, sp, #0
 8013db0:	6078      	str	r0, [r7, #4]
 8013db2:	000a      	movs	r2, r1
 8013db4:	1cfb      	adds	r3, r7, #3
 8013db6:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013db8:	687a      	ldr	r2, [r7, #4]
 8013dba:	23ae      	movs	r3, #174	@ 0xae
 8013dbc:	009b      	lsls	r3, r3, #2
 8013dbe:	58d3      	ldr	r3, [r2, r3]
 8013dc0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013dc2:	1cfb      	adds	r3, r7, #3
 8013dc4:	781a      	ldrb	r2, [r3, #0]
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	0011      	movs	r1, r2
 8013dca:	0018      	movs	r0, r3
 8013dcc:	f001 ffaf 	bl	8015d2e <USBD_LL_GetRxDataSize>
 8013dd0:	0001      	movs	r1, r0
 8013dd2:	68fa      	ldr	r2, [r7, #12]
 8013dd4:	2383      	movs	r3, #131	@ 0x83
 8013dd6:	009b      	lsls	r3, r3, #2
 8013dd8:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8013dda:	687a      	ldr	r2, [r7, #4]
 8013ddc:	23ae      	movs	r3, #174	@ 0xae
 8013dde:	009b      	lsls	r3, r3, #2
 8013de0:	58d3      	ldr	r3, [r2, r3]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d011      	beq.n	8013e0a <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013de6:	687a      	ldr	r2, [r7, #4]
 8013de8:	23af      	movs	r3, #175	@ 0xaf
 8013dea:	009b      	lsls	r3, r3, #2
 8013dec:	58d3      	ldr	r3, [r2, r3]
 8013dee:	68da      	ldr	r2, [r3, #12]
 8013df0:	68f9      	ldr	r1, [r7, #12]
 8013df2:	2381      	movs	r3, #129	@ 0x81
 8013df4:	009b      	lsls	r3, r3, #2
 8013df6:	58c8      	ldr	r0, [r1, r3]
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	2183      	movs	r1, #131	@ 0x83
 8013dfc:	0089      	lsls	r1, r1, #2
 8013dfe:	468c      	mov	ip, r1
 8013e00:	4463      	add	r3, ip
 8013e02:	0019      	movs	r1, r3
 8013e04:	4790      	blx	r2

    return USBD_OK;
 8013e06:	2300      	movs	r3, #0
 8013e08:	e000      	b.n	8013e0c <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8013e0a:	2302      	movs	r3, #2
  }
}
 8013e0c:	0018      	movs	r0, r3
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	b004      	add	sp, #16
 8013e12:	bd80      	pop	{r7, pc}

08013e14 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013e14:	b590      	push	{r4, r7, lr}
 8013e16:	b085      	sub	sp, #20
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013e1c:	687a      	ldr	r2, [r7, #4]
 8013e1e:	23ae      	movs	r3, #174	@ 0xae
 8013e20:	009b      	lsls	r3, r3, #2
 8013e22:	58d3      	ldr	r3, [r2, r3]
 8013e24:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013e26:	687a      	ldr	r2, [r7, #4]
 8013e28:	23af      	movs	r3, #175	@ 0xaf
 8013e2a:	009b      	lsls	r3, r3, #2
 8013e2c:	58d3      	ldr	r3, [r2, r3]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d018      	beq.n	8013e64 <USBD_CDC_EP0_RxReady+0x50>
 8013e32:	68fa      	ldr	r2, [r7, #12]
 8013e34:	2380      	movs	r3, #128	@ 0x80
 8013e36:	009b      	lsls	r3, r3, #2
 8013e38:	5cd3      	ldrb	r3, [r2, r3]
 8013e3a:	2bff      	cmp	r3, #255	@ 0xff
 8013e3c:	d012      	beq.n	8013e64 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013e3e:	687a      	ldr	r2, [r7, #4]
 8013e40:	23af      	movs	r3, #175	@ 0xaf
 8013e42:	009b      	lsls	r3, r3, #2
 8013e44:	58d3      	ldr	r3, [r2, r3]
 8013e46:	689b      	ldr	r3, [r3, #8]
 8013e48:	68f9      	ldr	r1, [r7, #12]
 8013e4a:	2280      	movs	r2, #128	@ 0x80
 8013e4c:	0092      	lsls	r2, r2, #2
 8013e4e:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8013e50:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8013e52:	68fa      	ldr	r2, [r7, #12]
 8013e54:	4c06      	ldr	r4, [pc, #24]	@ (8013e70 <USBD_CDC_EP0_RxReady+0x5c>)
 8013e56:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013e58:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013e5a:	68fa      	ldr	r2, [r7, #12]
 8013e5c:	2380      	movs	r3, #128	@ 0x80
 8013e5e:	009b      	lsls	r3, r3, #2
 8013e60:	21ff      	movs	r1, #255	@ 0xff
 8013e62:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8013e64:	2300      	movs	r3, #0
}
 8013e66:	0018      	movs	r0, r3
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	b005      	add	sp, #20
 8013e6c:	bd90      	pop	{r4, r7, pc}
 8013e6e:	46c0      	nop			@ (mov r8, r8)
 8013e70:	00000201 	.word	0x00000201

08013e74 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b082      	sub	sp, #8
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	2243      	movs	r2, #67	@ 0x43
 8013e80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8013e82:	4b02      	ldr	r3, [pc, #8]	@ (8013e8c <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8013e84:	0018      	movs	r0, r3
 8013e86:	46bd      	mov	sp, r7
 8013e88:	b002      	add	sp, #8
 8013e8a:	bd80      	pop	{r7, pc}
 8013e8c:	200001e0 	.word	0x200001e0

08013e90 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b082      	sub	sp, #8
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	2243      	movs	r2, #67	@ 0x43
 8013e9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8013e9e:	4b02      	ldr	r3, [pc, #8]	@ (8013ea8 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8013ea0:	0018      	movs	r0, r3
 8013ea2:	46bd      	mov	sp, r7
 8013ea4:	b002      	add	sp, #8
 8013ea6:	bd80      	pop	{r7, pc}
 8013ea8:	2000019c 	.word	0x2000019c

08013eac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b082      	sub	sp, #8
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	2243      	movs	r2, #67	@ 0x43
 8013eb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8013eba:	4b02      	ldr	r3, [pc, #8]	@ (8013ec4 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8013ebc:	0018      	movs	r0, r3
 8013ebe:	46bd      	mov	sp, r7
 8013ec0:	b002      	add	sp, #8
 8013ec2:	bd80      	pop	{r7, pc}
 8013ec4:	20000224 	.word	0x20000224

08013ec8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b082      	sub	sp, #8
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	220a      	movs	r2, #10
 8013ed4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8013ed6:	4b02      	ldr	r3, [pc, #8]	@ (8013ee0 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8013ed8:	0018      	movs	r0, r3
 8013eda:	46bd      	mov	sp, r7
 8013edc:	b002      	add	sp, #8
 8013ede:	bd80      	pop	{r7, pc}
 8013ee0:	20000158 	.word	0x20000158

08013ee4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b084      	sub	sp, #16
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
 8013eec:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8013eee:	200f      	movs	r0, #15
 8013ef0:	183b      	adds	r3, r7, r0
 8013ef2:	2202      	movs	r2, #2
 8013ef4:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8013ef6:	683b      	ldr	r3, [r7, #0]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d007      	beq.n	8013f0c <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8013efc:	687a      	ldr	r2, [r7, #4]
 8013efe:	23af      	movs	r3, #175	@ 0xaf
 8013f00:	009b      	lsls	r3, r3, #2
 8013f02:	6839      	ldr	r1, [r7, #0]
 8013f04:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8013f06:	183b      	adds	r3, r7, r0
 8013f08:	2200      	movs	r2, #0
 8013f0a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8013f0c:	230f      	movs	r3, #15
 8013f0e:	18fb      	adds	r3, r7, r3
 8013f10:	781b      	ldrb	r3, [r3, #0]
}
 8013f12:	0018      	movs	r0, r3
 8013f14:	46bd      	mov	sp, r7
 8013f16:	b004      	add	sp, #16
 8013f18:	bd80      	pop	{r7, pc}

08013f1a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8013f1a:	b580      	push	{r7, lr}
 8013f1c:	b086      	sub	sp, #24
 8013f1e:	af00      	add	r7, sp, #0
 8013f20:	60f8      	str	r0, [r7, #12]
 8013f22:	60b9      	str	r1, [r7, #8]
 8013f24:	1dbb      	adds	r3, r7, #6
 8013f26:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013f28:	68fa      	ldr	r2, [r7, #12]
 8013f2a:	23ae      	movs	r3, #174	@ 0xae
 8013f2c:	009b      	lsls	r3, r3, #2
 8013f2e:	58d3      	ldr	r3, [r2, r3]
 8013f30:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8013f32:	697a      	ldr	r2, [r7, #20]
 8013f34:	2382      	movs	r3, #130	@ 0x82
 8013f36:	009b      	lsls	r3, r3, #2
 8013f38:	68b9      	ldr	r1, [r7, #8]
 8013f3a:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8013f3c:	1dbb      	adds	r3, r7, #6
 8013f3e:	8819      	ldrh	r1, [r3, #0]
 8013f40:	697a      	ldr	r2, [r7, #20]
 8013f42:	2384      	movs	r3, #132	@ 0x84
 8013f44:	009b      	lsls	r3, r3, #2
 8013f46:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8013f48:	2300      	movs	r3, #0
}
 8013f4a:	0018      	movs	r0, r3
 8013f4c:	46bd      	mov	sp, r7
 8013f4e:	b006      	add	sp, #24
 8013f50:	bd80      	pop	{r7, pc}

08013f52 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8013f52:	b580      	push	{r7, lr}
 8013f54:	b084      	sub	sp, #16
 8013f56:	af00      	add	r7, sp, #0
 8013f58:	6078      	str	r0, [r7, #4]
 8013f5a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013f5c:	687a      	ldr	r2, [r7, #4]
 8013f5e:	23ae      	movs	r3, #174	@ 0xae
 8013f60:	009b      	lsls	r3, r3, #2
 8013f62:	58d3      	ldr	r3, [r2, r3]
 8013f64:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8013f66:	68fa      	ldr	r2, [r7, #12]
 8013f68:	2381      	movs	r3, #129	@ 0x81
 8013f6a:	009b      	lsls	r3, r3, #2
 8013f6c:	6839      	ldr	r1, [r7, #0]
 8013f6e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8013f70:	2300      	movs	r3, #0
}
 8013f72:	0018      	movs	r0, r3
 8013f74:	46bd      	mov	sp, r7
 8013f76:	b004      	add	sp, #16
 8013f78:	bd80      	pop	{r7, pc}

08013f7a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013f7a:	b580      	push	{r7, lr}
 8013f7c:	b084      	sub	sp, #16
 8013f7e:	af00      	add	r7, sp, #0
 8013f80:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013f82:	687a      	ldr	r2, [r7, #4]
 8013f84:	23ae      	movs	r3, #174	@ 0xae
 8013f86:	009b      	lsls	r3, r3, #2
 8013f88:	58d3      	ldr	r3, [r2, r3]
 8013f8a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8013f8c:	687a      	ldr	r2, [r7, #4]
 8013f8e:	23ae      	movs	r3, #174	@ 0xae
 8013f90:	009b      	lsls	r3, r3, #2
 8013f92:	58d3      	ldr	r3, [r2, r3]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d019      	beq.n	8013fcc <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	7c1b      	ldrb	r3, [r3, #16]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d10a      	bne.n	8013fb6 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8013fa0:	68fa      	ldr	r2, [r7, #12]
 8013fa2:	2381      	movs	r3, #129	@ 0x81
 8013fa4:	009b      	lsls	r3, r3, #2
 8013fa6:	58d2      	ldr	r2, [r2, r3]
 8013fa8:	2380      	movs	r3, #128	@ 0x80
 8013faa:	009b      	lsls	r3, r3, #2
 8013fac:	6878      	ldr	r0, [r7, #4]
 8013fae:	2101      	movs	r1, #1
 8013fb0:	f001 fe86 	bl	8015cc0 <USBD_LL_PrepareReceive>
 8013fb4:	e008      	b.n	8013fc8 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8013fb6:	68fa      	ldr	r2, [r7, #12]
 8013fb8:	2381      	movs	r3, #129	@ 0x81
 8013fba:	009b      	lsls	r3, r3, #2
 8013fbc:	58d2      	ldr	r2, [r2, r3]
 8013fbe:	6878      	ldr	r0, [r7, #4]
 8013fc0:	2340      	movs	r3, #64	@ 0x40
 8013fc2:	2101      	movs	r1, #1
 8013fc4:	f001 fe7c 	bl	8015cc0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8013fc8:	2300      	movs	r3, #0
 8013fca:	e000      	b.n	8013fce <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8013fcc:	2302      	movs	r3, #2
  }
}
 8013fce:	0018      	movs	r0, r3
 8013fd0:	46bd      	mov	sp, r7
 8013fd2:	b004      	add	sp, #16
 8013fd4:	bd80      	pop	{r7, pc}

08013fd6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013fd6:	b580      	push	{r7, lr}
 8013fd8:	b084      	sub	sp, #16
 8013fda:	af00      	add	r7, sp, #0
 8013fdc:	60f8      	str	r0, [r7, #12]
 8013fde:	60b9      	str	r1, [r7, #8]
 8013fe0:	1dfb      	adds	r3, r7, #7
 8013fe2:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d101      	bne.n	8013fee <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8013fea:	2302      	movs	r3, #2
 8013fec:	e020      	b.n	8014030 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8013fee:	68fa      	ldr	r2, [r7, #12]
 8013ff0:	23ad      	movs	r3, #173	@ 0xad
 8013ff2:	009b      	lsls	r3, r3, #2
 8013ff4:	58d3      	ldr	r3, [r2, r3]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d004      	beq.n	8014004 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8013ffa:	68fa      	ldr	r2, [r7, #12]
 8013ffc:	23ad      	movs	r3, #173	@ 0xad
 8013ffe:	009b      	lsls	r3, r3, #2
 8014000:	2100      	movs	r1, #0
 8014002:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014004:	68bb      	ldr	r3, [r7, #8]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d004      	beq.n	8014014 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801400a:	68fa      	ldr	r2, [r7, #12]
 801400c:	23ac      	movs	r3, #172	@ 0xac
 801400e:	009b      	lsls	r3, r3, #2
 8014010:	68b9      	ldr	r1, [r7, #8]
 8014012:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014014:	68fa      	ldr	r2, [r7, #12]
 8014016:	23a7      	movs	r3, #167	@ 0xa7
 8014018:	009b      	lsls	r3, r3, #2
 801401a:	2101      	movs	r1, #1
 801401c:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	1dfa      	adds	r2, r7, #7
 8014022:	7812      	ldrb	r2, [r2, #0]
 8014024:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	0018      	movs	r0, r3
 801402a:	f001 fc75 	bl	8015918 <USBD_LL_Init>

  return USBD_OK;
 801402e:	2300      	movs	r3, #0
}
 8014030:	0018      	movs	r0, r3
 8014032:	46bd      	mov	sp, r7
 8014034:	b004      	add	sp, #16
 8014036:	bd80      	pop	{r7, pc}

08014038 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b084      	sub	sp, #16
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
 8014040:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8014042:	200f      	movs	r0, #15
 8014044:	183b      	adds	r3, r7, r0
 8014046:	2200      	movs	r2, #0
 8014048:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801404a:	683b      	ldr	r3, [r7, #0]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d008      	beq.n	8014062 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8014050:	687a      	ldr	r2, [r7, #4]
 8014052:	23ad      	movs	r3, #173	@ 0xad
 8014054:	009b      	lsls	r3, r3, #2
 8014056:	6839      	ldr	r1, [r7, #0]
 8014058:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801405a:	183b      	adds	r3, r7, r0
 801405c:	2200      	movs	r2, #0
 801405e:	701a      	strb	r2, [r3, #0]
 8014060:	e003      	b.n	801406a <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8014062:	230f      	movs	r3, #15
 8014064:	18fb      	adds	r3, r7, r3
 8014066:	2202      	movs	r2, #2
 8014068:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801406a:	230f      	movs	r3, #15
 801406c:	18fb      	adds	r3, r7, r3
 801406e:	781b      	ldrb	r3, [r3, #0]
}
 8014070:	0018      	movs	r0, r3
 8014072:	46bd      	mov	sp, r7
 8014074:	b004      	add	sp, #16
 8014076:	bd80      	pop	{r7, pc}

08014078 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014078:	b580      	push	{r7, lr}
 801407a:	b082      	sub	sp, #8
 801407c:	af00      	add	r7, sp, #0
 801407e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	0018      	movs	r0, r3
 8014084:	f001 fcac 	bl	80159e0 <USBD_LL_Start>

  return USBD_OK;
 8014088:	2300      	movs	r3, #0
}
 801408a:	0018      	movs	r0, r3
 801408c:	46bd      	mov	sp, r7
 801408e:	b002      	add	sp, #8
 8014090:	bd80      	pop	{r7, pc}

08014092 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8014092:	b580      	push	{r7, lr}
 8014094:	b082      	sub	sp, #8
 8014096:	af00      	add	r7, sp, #0
 8014098:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801409a:	2300      	movs	r3, #0
}
 801409c:	0018      	movs	r0, r3
 801409e:	46bd      	mov	sp, r7
 80140a0:	b002      	add	sp, #8
 80140a2:	bd80      	pop	{r7, pc}

080140a4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80140a4:	b590      	push	{r4, r7, lr}
 80140a6:	b085      	sub	sp, #20
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
 80140ac:	000a      	movs	r2, r1
 80140ae:	1cfb      	adds	r3, r7, #3
 80140b0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80140b2:	240f      	movs	r4, #15
 80140b4:	193b      	adds	r3, r7, r4
 80140b6:	2202      	movs	r2, #2
 80140b8:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 80140ba:	687a      	ldr	r2, [r7, #4]
 80140bc:	23ad      	movs	r3, #173	@ 0xad
 80140be:	009b      	lsls	r3, r3, #2
 80140c0:	58d3      	ldr	r3, [r2, r3]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d00e      	beq.n	80140e4 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80140c6:	687a      	ldr	r2, [r7, #4]
 80140c8:	23ad      	movs	r3, #173	@ 0xad
 80140ca:	009b      	lsls	r3, r3, #2
 80140cc:	58d3      	ldr	r3, [r2, r3]
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	1cfa      	adds	r2, r7, #3
 80140d2:	7811      	ldrb	r1, [r2, #0]
 80140d4:	687a      	ldr	r2, [r7, #4]
 80140d6:	0010      	movs	r0, r2
 80140d8:	4798      	blx	r3
 80140da:	1e03      	subs	r3, r0, #0
 80140dc:	d102      	bne.n	80140e4 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 80140de:	193b      	adds	r3, r7, r4
 80140e0:	2200      	movs	r2, #0
 80140e2:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 80140e4:	230f      	movs	r3, #15
 80140e6:	18fb      	adds	r3, r7, r3
 80140e8:	781b      	ldrb	r3, [r3, #0]
}
 80140ea:	0018      	movs	r0, r3
 80140ec:	46bd      	mov	sp, r7
 80140ee:	b005      	add	sp, #20
 80140f0:	bd90      	pop	{r4, r7, pc}

080140f2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80140f2:	b580      	push	{r7, lr}
 80140f4:	b082      	sub	sp, #8
 80140f6:	af00      	add	r7, sp, #0
 80140f8:	6078      	str	r0, [r7, #4]
 80140fa:	000a      	movs	r2, r1
 80140fc:	1cfb      	adds	r3, r7, #3
 80140fe:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8014100:	687a      	ldr	r2, [r7, #4]
 8014102:	23ad      	movs	r3, #173	@ 0xad
 8014104:	009b      	lsls	r3, r3, #2
 8014106:	58d3      	ldr	r3, [r2, r3]
 8014108:	685b      	ldr	r3, [r3, #4]
 801410a:	1cfa      	adds	r2, r7, #3
 801410c:	7811      	ldrb	r1, [r2, #0]
 801410e:	687a      	ldr	r2, [r7, #4]
 8014110:	0010      	movs	r0, r2
 8014112:	4798      	blx	r3

  return USBD_OK;
 8014114:	2300      	movs	r3, #0
}
 8014116:	0018      	movs	r0, r3
 8014118:	46bd      	mov	sp, r7
 801411a:	b002      	add	sp, #8
 801411c:	bd80      	pop	{r7, pc}
	...

08014120 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014120:	b580      	push	{r7, lr}
 8014122:	b082      	sub	sp, #8
 8014124:	af00      	add	r7, sp, #0
 8014126:	6078      	str	r0, [r7, #4]
 8014128:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	22aa      	movs	r2, #170	@ 0xaa
 801412e:	0092      	lsls	r2, r2, #2
 8014130:	4694      	mov	ip, r2
 8014132:	4463      	add	r3, ip
 8014134:	683a      	ldr	r2, [r7, #0]
 8014136:	0011      	movs	r1, r2
 8014138:	0018      	movs	r0, r3
 801413a:	f001 f810 	bl	801515e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801413e:	687a      	ldr	r2, [r7, #4]
 8014140:	23a5      	movs	r3, #165	@ 0xa5
 8014142:	009b      	lsls	r3, r3, #2
 8014144:	2101      	movs	r1, #1
 8014146:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	4a23      	ldr	r2, [pc, #140]	@ (80141d8 <USBD_LL_SetupStage+0xb8>)
 801414c:	5a9b      	ldrh	r3, [r3, r2]
 801414e:	0019      	movs	r1, r3
 8014150:	687a      	ldr	r2, [r7, #4]
 8014152:	23a6      	movs	r3, #166	@ 0xa6
 8014154:	009b      	lsls	r3, r3, #2
 8014156:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8014158:	687a      	ldr	r2, [r7, #4]
 801415a:	23aa      	movs	r3, #170	@ 0xaa
 801415c:	009b      	lsls	r3, r3, #2
 801415e:	5cd3      	ldrb	r3, [r2, r3]
 8014160:	001a      	movs	r2, r3
 8014162:	231f      	movs	r3, #31
 8014164:	4013      	ands	r3, r2
 8014166:	2b02      	cmp	r3, #2
 8014168:	d019      	beq.n	801419e <USBD_LL_SetupStage+0x7e>
 801416a:	d822      	bhi.n	80141b2 <USBD_LL_SetupStage+0x92>
 801416c:	2b00      	cmp	r3, #0
 801416e:	d002      	beq.n	8014176 <USBD_LL_SetupStage+0x56>
 8014170:	2b01      	cmp	r3, #1
 8014172:	d00a      	beq.n	801418a <USBD_LL_SetupStage+0x6a>
 8014174:	e01d      	b.n	80141b2 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	22aa      	movs	r2, #170	@ 0xaa
 801417a:	0092      	lsls	r2, r2, #2
 801417c:	189a      	adds	r2, r3, r2
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	0011      	movs	r1, r2
 8014182:	0018      	movs	r0, r3
 8014184:	f000 fa10 	bl	80145a8 <USBD_StdDevReq>
      break;
 8014188:	e020      	b.n	80141cc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	22aa      	movs	r2, #170	@ 0xaa
 801418e:	0092      	lsls	r2, r2, #2
 8014190:	189a      	adds	r2, r3, r2
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	0011      	movs	r1, r2
 8014196:	0018      	movs	r0, r3
 8014198:	f000 fa78 	bl	801468c <USBD_StdItfReq>
      break;
 801419c:	e016      	b.n	80141cc <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	22aa      	movs	r2, #170	@ 0xaa
 80141a2:	0092      	lsls	r2, r2, #2
 80141a4:	189a      	adds	r2, r3, r2
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	0011      	movs	r1, r2
 80141aa:	0018      	movs	r0, r3
 80141ac:	f000 fac5 	bl	801473a <USBD_StdEPReq>
      break;
 80141b0:	e00c      	b.n	80141cc <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80141b2:	687a      	ldr	r2, [r7, #4]
 80141b4:	23aa      	movs	r3, #170	@ 0xaa
 80141b6:	009b      	lsls	r3, r3, #2
 80141b8:	5cd3      	ldrb	r3, [r2, r3]
 80141ba:	227f      	movs	r2, #127	@ 0x7f
 80141bc:	4393      	bics	r3, r2
 80141be:	b2da      	uxtb	r2, r3
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	0011      	movs	r1, r2
 80141c4:	0018      	movs	r0, r3
 80141c6:	f001 fc92 	bl	8015aee <USBD_LL_StallEP>
      break;
 80141ca:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80141cc:	2300      	movs	r3, #0
}
 80141ce:	0018      	movs	r0, r3
 80141d0:	46bd      	mov	sp, r7
 80141d2:	b002      	add	sp, #8
 80141d4:	bd80      	pop	{r7, pc}
 80141d6:	46c0      	nop			@ (mov r8, r8)
 80141d8:	000002ae 	.word	0x000002ae

080141dc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80141dc:	b580      	push	{r7, lr}
 80141de:	b086      	sub	sp, #24
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	60f8      	str	r0, [r7, #12]
 80141e4:	607a      	str	r2, [r7, #4]
 80141e6:	200b      	movs	r0, #11
 80141e8:	183b      	adds	r3, r7, r0
 80141ea:	1c0a      	adds	r2, r1, #0
 80141ec:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80141ee:	183b      	adds	r3, r7, r0
 80141f0:	781b      	ldrb	r3, [r3, #0]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d154      	bne.n	80142a0 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	3355      	adds	r3, #85	@ 0x55
 80141fa:	33ff      	adds	r3, #255	@ 0xff
 80141fc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80141fe:	68fa      	ldr	r2, [r7, #12]
 8014200:	23a5      	movs	r3, #165	@ 0xa5
 8014202:	009b      	lsls	r3, r3, #2
 8014204:	58d3      	ldr	r3, [r2, r3]
 8014206:	2b03      	cmp	r3, #3
 8014208:	d139      	bne.n	801427e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801420a:	697b      	ldr	r3, [r7, #20]
 801420c:	68da      	ldr	r2, [r3, #12]
 801420e:	697b      	ldr	r3, [r7, #20]
 8014210:	691b      	ldr	r3, [r3, #16]
 8014212:	429a      	cmp	r2, r3
 8014214:	d919      	bls.n	801424a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8014216:	697b      	ldr	r3, [r7, #20]
 8014218:	68da      	ldr	r2, [r3, #12]
 801421a:	697b      	ldr	r3, [r7, #20]
 801421c:	691b      	ldr	r3, [r3, #16]
 801421e:	1ad2      	subs	r2, r2, r3
 8014220:	697b      	ldr	r3, [r7, #20]
 8014222:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8014224:	697b      	ldr	r3, [r7, #20]
 8014226:	68da      	ldr	r2, [r3, #12]
 8014228:	697b      	ldr	r3, [r7, #20]
 801422a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801422c:	429a      	cmp	r2, r3
 801422e:	d203      	bcs.n	8014238 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8014230:	697b      	ldr	r3, [r7, #20]
 8014232:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8014234:	b29b      	uxth	r3, r3
 8014236:	e002      	b.n	801423e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8014238:	697b      	ldr	r3, [r7, #20]
 801423a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801423c:	b29b      	uxth	r3, r3
 801423e:	6879      	ldr	r1, [r7, #4]
 8014240:	68f8      	ldr	r0, [r7, #12]
 8014242:	001a      	movs	r2, r3
 8014244:	f001 f898 	bl	8015378 <USBD_CtlContinueRx>
 8014248:	e045      	b.n	80142d6 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801424a:	68fa      	ldr	r2, [r7, #12]
 801424c:	23ad      	movs	r3, #173	@ 0xad
 801424e:	009b      	lsls	r3, r3, #2
 8014250:	58d3      	ldr	r3, [r2, r3]
 8014252:	691b      	ldr	r3, [r3, #16]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d00d      	beq.n	8014274 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8014258:	68fa      	ldr	r2, [r7, #12]
 801425a:	23a7      	movs	r3, #167	@ 0xa7
 801425c:	009b      	lsls	r3, r3, #2
 801425e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8014260:	2b03      	cmp	r3, #3
 8014262:	d107      	bne.n	8014274 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8014264:	68fa      	ldr	r2, [r7, #12]
 8014266:	23ad      	movs	r3, #173	@ 0xad
 8014268:	009b      	lsls	r3, r3, #2
 801426a:	58d3      	ldr	r3, [r2, r3]
 801426c:	691b      	ldr	r3, [r3, #16]
 801426e:	68fa      	ldr	r2, [r7, #12]
 8014270:	0010      	movs	r0, r2
 8014272:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	0018      	movs	r0, r3
 8014278:	f001 f891 	bl	801539e <USBD_CtlSendStatus>
 801427c:	e02b      	b.n	80142d6 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801427e:	68fa      	ldr	r2, [r7, #12]
 8014280:	23a5      	movs	r3, #165	@ 0xa5
 8014282:	009b      	lsls	r3, r3, #2
 8014284:	58d3      	ldr	r3, [r2, r3]
 8014286:	2b05      	cmp	r3, #5
 8014288:	d125      	bne.n	80142d6 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801428a:	68fa      	ldr	r2, [r7, #12]
 801428c:	23a5      	movs	r3, #165	@ 0xa5
 801428e:	009b      	lsls	r3, r3, #2
 8014290:	2100      	movs	r1, #0
 8014292:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	2100      	movs	r1, #0
 8014298:	0018      	movs	r0, r3
 801429a:	f001 fc28 	bl	8015aee <USBD_LL_StallEP>
 801429e:	e01a      	b.n	80142d6 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80142a0:	68fa      	ldr	r2, [r7, #12]
 80142a2:	23ad      	movs	r3, #173	@ 0xad
 80142a4:	009b      	lsls	r3, r3, #2
 80142a6:	58d3      	ldr	r3, [r2, r3]
 80142a8:	699b      	ldr	r3, [r3, #24]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d011      	beq.n	80142d2 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80142ae:	68fa      	ldr	r2, [r7, #12]
 80142b0:	23a7      	movs	r3, #167	@ 0xa7
 80142b2:	009b      	lsls	r3, r3, #2
 80142b4:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 80142b6:	2b03      	cmp	r3, #3
 80142b8:	d10b      	bne.n	80142d2 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80142ba:	68fa      	ldr	r2, [r7, #12]
 80142bc:	23ad      	movs	r3, #173	@ 0xad
 80142be:	009b      	lsls	r3, r3, #2
 80142c0:	58d3      	ldr	r3, [r2, r3]
 80142c2:	699b      	ldr	r3, [r3, #24]
 80142c4:	220b      	movs	r2, #11
 80142c6:	18ba      	adds	r2, r7, r2
 80142c8:	7811      	ldrb	r1, [r2, #0]
 80142ca:	68fa      	ldr	r2, [r7, #12]
 80142cc:	0010      	movs	r0, r2
 80142ce:	4798      	blx	r3
 80142d0:	e001      	b.n	80142d6 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80142d2:	2302      	movs	r3, #2
 80142d4:	e000      	b.n	80142d8 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 80142d6:	2300      	movs	r3, #0
}
 80142d8:	0018      	movs	r0, r3
 80142da:	46bd      	mov	sp, r7
 80142dc:	b006      	add	sp, #24
 80142de:	bd80      	pop	{r7, pc}

080142e0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b086      	sub	sp, #24
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	60f8      	str	r0, [r7, #12]
 80142e8:	607a      	str	r2, [r7, #4]
 80142ea:	200b      	movs	r0, #11
 80142ec:	183b      	adds	r3, r7, r0
 80142ee:	1c0a      	adds	r2, r1, #0
 80142f0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80142f2:	183b      	adds	r3, r7, r0
 80142f4:	781b      	ldrb	r3, [r3, #0]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d000      	beq.n	80142fc <USBD_LL_DataInStage+0x1c>
 80142fa:	e08e      	b.n	801441a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	3314      	adds	r3, #20
 8014300:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014302:	68fa      	ldr	r2, [r7, #12]
 8014304:	23a5      	movs	r3, #165	@ 0xa5
 8014306:	009b      	lsls	r3, r3, #2
 8014308:	58d3      	ldr	r3, [r2, r3]
 801430a:	2b02      	cmp	r3, #2
 801430c:	d164      	bne.n	80143d8 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801430e:	697b      	ldr	r3, [r7, #20]
 8014310:	68da      	ldr	r2, [r3, #12]
 8014312:	697b      	ldr	r3, [r7, #20]
 8014314:	691b      	ldr	r3, [r3, #16]
 8014316:	429a      	cmp	r2, r3
 8014318:	d915      	bls.n	8014346 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801431a:	697b      	ldr	r3, [r7, #20]
 801431c:	68da      	ldr	r2, [r3, #12]
 801431e:	697b      	ldr	r3, [r7, #20]
 8014320:	691b      	ldr	r3, [r3, #16]
 8014322:	1ad2      	subs	r2, r2, r3
 8014324:	697b      	ldr	r3, [r7, #20]
 8014326:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8014328:	697b      	ldr	r3, [r7, #20]
 801432a:	68db      	ldr	r3, [r3, #12]
 801432c:	b29a      	uxth	r2, r3
 801432e:	6879      	ldr	r1, [r7, #4]
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	0018      	movs	r0, r3
 8014334:	f000 ffe9 	bl	801530a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014338:	68f8      	ldr	r0, [r7, #12]
 801433a:	2300      	movs	r3, #0
 801433c:	2200      	movs	r2, #0
 801433e:	2100      	movs	r1, #0
 8014340:	f001 fcbe 	bl	8015cc0 <USBD_LL_PrepareReceive>
 8014344:	e059      	b.n	80143fa <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8014346:	697b      	ldr	r3, [r7, #20]
 8014348:	689a      	ldr	r2, [r3, #8]
 801434a:	697b      	ldr	r3, [r7, #20]
 801434c:	691b      	ldr	r3, [r3, #16]
 801434e:	0019      	movs	r1, r3
 8014350:	0010      	movs	r0, r2
 8014352:	f7eb ff7b 	bl	800024c <__aeabi_uidivmod>
 8014356:	1e0b      	subs	r3, r1, #0
 8014358:	d11f      	bne.n	801439a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801435a:	697b      	ldr	r3, [r7, #20]
 801435c:	689a      	ldr	r2, [r3, #8]
 801435e:	697b      	ldr	r3, [r7, #20]
 8014360:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8014362:	429a      	cmp	r2, r3
 8014364:	d319      	bcc.n	801439a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8014366:	697b      	ldr	r3, [r7, #20]
 8014368:	689a      	ldr	r2, [r3, #8]
 801436a:	68f9      	ldr	r1, [r7, #12]
 801436c:	23a6      	movs	r3, #166	@ 0xa6
 801436e:	009b      	lsls	r3, r3, #2
 8014370:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8014372:	429a      	cmp	r2, r3
 8014374:	d211      	bcs.n	801439a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	2200      	movs	r2, #0
 801437a:	2100      	movs	r1, #0
 801437c:	0018      	movs	r0, r3
 801437e:	f000 ffc4 	bl	801530a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8014382:	68fa      	ldr	r2, [r7, #12]
 8014384:	23a6      	movs	r3, #166	@ 0xa6
 8014386:	009b      	lsls	r3, r3, #2
 8014388:	2100      	movs	r1, #0
 801438a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801438c:	68f8      	ldr	r0, [r7, #12]
 801438e:	2300      	movs	r3, #0
 8014390:	2200      	movs	r2, #0
 8014392:	2100      	movs	r1, #0
 8014394:	f001 fc94 	bl	8015cc0 <USBD_LL_PrepareReceive>
 8014398:	e02f      	b.n	80143fa <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801439a:	68fa      	ldr	r2, [r7, #12]
 801439c:	23ad      	movs	r3, #173	@ 0xad
 801439e:	009b      	lsls	r3, r3, #2
 80143a0:	58d3      	ldr	r3, [r2, r3]
 80143a2:	68db      	ldr	r3, [r3, #12]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d00d      	beq.n	80143c4 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80143a8:	68fa      	ldr	r2, [r7, #12]
 80143aa:	23a7      	movs	r3, #167	@ 0xa7
 80143ac:	009b      	lsls	r3, r3, #2
 80143ae:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80143b0:	2b03      	cmp	r3, #3
 80143b2:	d107      	bne.n	80143c4 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80143b4:	68fa      	ldr	r2, [r7, #12]
 80143b6:	23ad      	movs	r3, #173	@ 0xad
 80143b8:	009b      	lsls	r3, r3, #2
 80143ba:	58d3      	ldr	r3, [r2, r3]
 80143bc:	68db      	ldr	r3, [r3, #12]
 80143be:	68fa      	ldr	r2, [r7, #12]
 80143c0:	0010      	movs	r0, r2
 80143c2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	2180      	movs	r1, #128	@ 0x80
 80143c8:	0018      	movs	r0, r3
 80143ca:	f001 fb90 	bl	8015aee <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	0018      	movs	r0, r3
 80143d2:	f000 fff8 	bl	80153c6 <USBD_CtlReceiveStatus>
 80143d6:	e010      	b.n	80143fa <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80143d8:	68fa      	ldr	r2, [r7, #12]
 80143da:	23a5      	movs	r3, #165	@ 0xa5
 80143dc:	009b      	lsls	r3, r3, #2
 80143de:	58d3      	ldr	r3, [r2, r3]
 80143e0:	2b04      	cmp	r3, #4
 80143e2:	d005      	beq.n	80143f0 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80143e4:	68fa      	ldr	r2, [r7, #12]
 80143e6:	23a5      	movs	r3, #165	@ 0xa5
 80143e8:	009b      	lsls	r3, r3, #2
 80143ea:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d104      	bne.n	80143fa <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	2180      	movs	r1, #128	@ 0x80
 80143f4:	0018      	movs	r0, r3
 80143f6:	f001 fb7a 	bl	8015aee <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80143fa:	68fa      	ldr	r2, [r7, #12]
 80143fc:	23a8      	movs	r3, #168	@ 0xa8
 80143fe:	009b      	lsls	r3, r3, #2
 8014400:	5cd3      	ldrb	r3, [r2, r3]
 8014402:	2b01      	cmp	r3, #1
 8014404:	d124      	bne.n	8014450 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	0018      	movs	r0, r3
 801440a:	f7ff fe42 	bl	8014092 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801440e:	68fa      	ldr	r2, [r7, #12]
 8014410:	23a8      	movs	r3, #168	@ 0xa8
 8014412:	009b      	lsls	r3, r3, #2
 8014414:	2100      	movs	r1, #0
 8014416:	54d1      	strb	r1, [r2, r3]
 8014418:	e01a      	b.n	8014450 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801441a:	68fa      	ldr	r2, [r7, #12]
 801441c:	23ad      	movs	r3, #173	@ 0xad
 801441e:	009b      	lsls	r3, r3, #2
 8014420:	58d3      	ldr	r3, [r2, r3]
 8014422:	695b      	ldr	r3, [r3, #20]
 8014424:	2b00      	cmp	r3, #0
 8014426:	d011      	beq.n	801444c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8014428:	68fa      	ldr	r2, [r7, #12]
 801442a:	23a7      	movs	r3, #167	@ 0xa7
 801442c:	009b      	lsls	r3, r3, #2
 801442e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8014430:	2b03      	cmp	r3, #3
 8014432:	d10b      	bne.n	801444c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8014434:	68fa      	ldr	r2, [r7, #12]
 8014436:	23ad      	movs	r3, #173	@ 0xad
 8014438:	009b      	lsls	r3, r3, #2
 801443a:	58d3      	ldr	r3, [r2, r3]
 801443c:	695b      	ldr	r3, [r3, #20]
 801443e:	220b      	movs	r2, #11
 8014440:	18ba      	adds	r2, r7, r2
 8014442:	7811      	ldrb	r1, [r2, #0]
 8014444:	68fa      	ldr	r2, [r7, #12]
 8014446:	0010      	movs	r0, r2
 8014448:	4798      	blx	r3
 801444a:	e001      	b.n	8014450 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801444c:	2302      	movs	r3, #2
 801444e:	e000      	b.n	8014452 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8014450:	2300      	movs	r3, #0
}
 8014452:	0018      	movs	r0, r3
 8014454:	46bd      	mov	sp, r7
 8014456:	b006      	add	sp, #24
 8014458:	bd80      	pop	{r7, pc}

0801445a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801445a:	b580      	push	{r7, lr}
 801445c:	b082      	sub	sp, #8
 801445e:	af00      	add	r7, sp, #0
 8014460:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014462:	6878      	ldr	r0, [r7, #4]
 8014464:	2340      	movs	r3, #64	@ 0x40
 8014466:	2200      	movs	r2, #0
 8014468:	2100      	movs	r1, #0
 801446a:	f001 fade 	bl	8015a2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801446e:	687a      	ldr	r2, [r7, #4]
 8014470:	23ac      	movs	r3, #172	@ 0xac
 8014472:	005b      	lsls	r3, r3, #1
 8014474:	2101      	movs	r1, #1
 8014476:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014478:	687a      	ldr	r2, [r7, #4]
 801447a:	23b2      	movs	r3, #178	@ 0xb2
 801447c:	005b      	lsls	r3, r3, #1
 801447e:	2140      	movs	r1, #64	@ 0x40
 8014480:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014482:	6878      	ldr	r0, [r7, #4]
 8014484:	2340      	movs	r3, #64	@ 0x40
 8014486:	2200      	movs	r2, #0
 8014488:	2180      	movs	r1, #128	@ 0x80
 801448a:	f001 face 	bl	8015a2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	2201      	movs	r2, #1
 8014492:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	2240      	movs	r2, #64	@ 0x40
 8014498:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801449a:	687a      	ldr	r2, [r7, #4]
 801449c:	23a7      	movs	r3, #167	@ 0xa7
 801449e:	009b      	lsls	r3, r3, #2
 80144a0:	2101      	movs	r1, #1
 80144a2:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80144a4:	687a      	ldr	r2, [r7, #4]
 80144a6:	23a5      	movs	r3, #165	@ 0xa5
 80144a8:	009b      	lsls	r3, r3, #2
 80144aa:	2100      	movs	r1, #0
 80144ac:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	2200      	movs	r2, #0
 80144b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80144b4:	687a      	ldr	r2, [r7, #4]
 80144b6:	23a9      	movs	r3, #169	@ 0xa9
 80144b8:	009b      	lsls	r3, r3, #2
 80144ba:	2100      	movs	r1, #0
 80144bc:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80144be:	687a      	ldr	r2, [r7, #4]
 80144c0:	23ae      	movs	r3, #174	@ 0xae
 80144c2:	009b      	lsls	r3, r3, #2
 80144c4:	58d3      	ldr	r3, [r2, r3]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d00a      	beq.n	80144e0 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80144ca:	687a      	ldr	r2, [r7, #4]
 80144cc:	23ad      	movs	r3, #173	@ 0xad
 80144ce:	009b      	lsls	r3, r3, #2
 80144d0:	58d3      	ldr	r3, [r2, r3]
 80144d2:	685a      	ldr	r2, [r3, #4]
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	685b      	ldr	r3, [r3, #4]
 80144d8:	b2d9      	uxtb	r1, r3
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	0018      	movs	r0, r3
 80144de:	4790      	blx	r2
  }

  return USBD_OK;
 80144e0:	2300      	movs	r3, #0
}
 80144e2:	0018      	movs	r0, r3
 80144e4:	46bd      	mov	sp, r7
 80144e6:	b002      	add	sp, #8
 80144e8:	bd80      	pop	{r7, pc}

080144ea <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80144ea:	b580      	push	{r7, lr}
 80144ec:	b082      	sub	sp, #8
 80144ee:	af00      	add	r7, sp, #0
 80144f0:	6078      	str	r0, [r7, #4]
 80144f2:	000a      	movs	r2, r1
 80144f4:	1cfb      	adds	r3, r7, #3
 80144f6:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	1cfa      	adds	r2, r7, #3
 80144fc:	7812      	ldrb	r2, [r2, #0]
 80144fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014500:	2300      	movs	r3, #0
}
 8014502:	0018      	movs	r0, r3
 8014504:	46bd      	mov	sp, r7
 8014506:	b002      	add	sp, #8
 8014508:	bd80      	pop	{r7, pc}
	...

0801450c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801450c:	b580      	push	{r7, lr}
 801450e:	b082      	sub	sp, #8
 8014510:	af00      	add	r7, sp, #0
 8014512:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8014514:	687a      	ldr	r2, [r7, #4]
 8014516:	23a7      	movs	r3, #167	@ 0xa7
 8014518:	009b      	lsls	r3, r3, #2
 801451a:	5cd1      	ldrb	r1, [r2, r3]
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	4a06      	ldr	r2, [pc, #24]	@ (8014538 <USBD_LL_Suspend+0x2c>)
 8014520:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8014522:	687a      	ldr	r2, [r7, #4]
 8014524:	23a7      	movs	r3, #167	@ 0xa7
 8014526:	009b      	lsls	r3, r3, #2
 8014528:	2104      	movs	r1, #4
 801452a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801452c:	2300      	movs	r3, #0
}
 801452e:	0018      	movs	r0, r3
 8014530:	46bd      	mov	sp, r7
 8014532:	b002      	add	sp, #8
 8014534:	bd80      	pop	{r7, pc}
 8014536:	46c0      	nop			@ (mov r8, r8)
 8014538:	0000029d 	.word	0x0000029d

0801453c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801453c:	b580      	push	{r7, lr}
 801453e:	b082      	sub	sp, #8
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014544:	687a      	ldr	r2, [r7, #4]
 8014546:	23a7      	movs	r3, #167	@ 0xa7
 8014548:	009b      	lsls	r3, r3, #2
 801454a:	5cd3      	ldrb	r3, [r2, r3]
 801454c:	2b04      	cmp	r3, #4
 801454e:	d106      	bne.n	801455e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	4a05      	ldr	r2, [pc, #20]	@ (8014568 <USBD_LL_Resume+0x2c>)
 8014554:	5c99      	ldrb	r1, [r3, r2]
 8014556:	687a      	ldr	r2, [r7, #4]
 8014558:	23a7      	movs	r3, #167	@ 0xa7
 801455a:	009b      	lsls	r3, r3, #2
 801455c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801455e:	2300      	movs	r3, #0
}
 8014560:	0018      	movs	r0, r3
 8014562:	46bd      	mov	sp, r7
 8014564:	b002      	add	sp, #8
 8014566:	bd80      	pop	{r7, pc}
 8014568:	0000029d 	.word	0x0000029d

0801456c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801456c:	b580      	push	{r7, lr}
 801456e:	b082      	sub	sp, #8
 8014570:	af00      	add	r7, sp, #0
 8014572:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014574:	687a      	ldr	r2, [r7, #4]
 8014576:	23a7      	movs	r3, #167	@ 0xa7
 8014578:	009b      	lsls	r3, r3, #2
 801457a:	5cd3      	ldrb	r3, [r2, r3]
 801457c:	2b03      	cmp	r3, #3
 801457e:	d10e      	bne.n	801459e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8014580:	687a      	ldr	r2, [r7, #4]
 8014582:	23ad      	movs	r3, #173	@ 0xad
 8014584:	009b      	lsls	r3, r3, #2
 8014586:	58d3      	ldr	r3, [r2, r3]
 8014588:	69db      	ldr	r3, [r3, #28]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d007      	beq.n	801459e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801458e:	687a      	ldr	r2, [r7, #4]
 8014590:	23ad      	movs	r3, #173	@ 0xad
 8014592:	009b      	lsls	r3, r3, #2
 8014594:	58d3      	ldr	r3, [r2, r3]
 8014596:	69db      	ldr	r3, [r3, #28]
 8014598:	687a      	ldr	r2, [r7, #4]
 801459a:	0010      	movs	r0, r2
 801459c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801459e:	2300      	movs	r3, #0
}
 80145a0:	0018      	movs	r0, r3
 80145a2:	46bd      	mov	sp, r7
 80145a4:	b002      	add	sp, #8
 80145a6:	bd80      	pop	{r7, pc}

080145a8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b084      	sub	sp, #16
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
 80145b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80145b2:	230f      	movs	r3, #15
 80145b4:	18fb      	adds	r3, r7, r3
 80145b6:	2200      	movs	r2, #0
 80145b8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80145ba:	683b      	ldr	r3, [r7, #0]
 80145bc:	781b      	ldrb	r3, [r3, #0]
 80145be:	001a      	movs	r2, r3
 80145c0:	2360      	movs	r3, #96	@ 0x60
 80145c2:	4013      	ands	r3, r2
 80145c4:	2b40      	cmp	r3, #64	@ 0x40
 80145c6:	d004      	beq.n	80145d2 <USBD_StdDevReq+0x2a>
 80145c8:	d84f      	bhi.n	801466a <USBD_StdDevReq+0xc2>
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d00b      	beq.n	80145e6 <USBD_StdDevReq+0x3e>
 80145ce:	2b20      	cmp	r3, #32
 80145d0:	d14b      	bne.n	801466a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80145d2:	687a      	ldr	r2, [r7, #4]
 80145d4:	23ad      	movs	r3, #173	@ 0xad
 80145d6:	009b      	lsls	r3, r3, #2
 80145d8:	58d3      	ldr	r3, [r2, r3]
 80145da:	689b      	ldr	r3, [r3, #8]
 80145dc:	6839      	ldr	r1, [r7, #0]
 80145de:	687a      	ldr	r2, [r7, #4]
 80145e0:	0010      	movs	r0, r2
 80145e2:	4798      	blx	r3
      break;
 80145e4:	e048      	b.n	8014678 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80145e6:	683b      	ldr	r3, [r7, #0]
 80145e8:	785b      	ldrb	r3, [r3, #1]
 80145ea:	2b09      	cmp	r3, #9
 80145ec:	d835      	bhi.n	801465a <USBD_StdDevReq+0xb2>
 80145ee:	009a      	lsls	r2, r3, #2
 80145f0:	4b25      	ldr	r3, [pc, #148]	@ (8014688 <USBD_StdDevReq+0xe0>)
 80145f2:	18d3      	adds	r3, r2, r3
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80145f8:	683a      	ldr	r2, [r7, #0]
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	0011      	movs	r1, r2
 80145fe:	0018      	movs	r0, r3
 8014600:	f000 fa52 	bl	8014aa8 <USBD_GetDescriptor>
          break;
 8014604:	e030      	b.n	8014668 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8014606:	683a      	ldr	r2, [r7, #0]
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	0011      	movs	r1, r2
 801460c:	0018      	movs	r0, r3
 801460e:	f000 fbfd 	bl	8014e0c <USBD_SetAddress>
          break;
 8014612:	e029      	b.n	8014668 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8014614:	683a      	ldr	r2, [r7, #0]
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	0011      	movs	r1, r2
 801461a:	0018      	movs	r0, r3
 801461c:	f000 fc4a 	bl	8014eb4 <USBD_SetConfig>
          break;
 8014620:	e022      	b.n	8014668 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014622:	683a      	ldr	r2, [r7, #0]
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	0011      	movs	r1, r2
 8014628:	0018      	movs	r0, r3
 801462a:	f000 fce7 	bl	8014ffc <USBD_GetConfig>
          break;
 801462e:	e01b      	b.n	8014668 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014630:	683a      	ldr	r2, [r7, #0]
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	0011      	movs	r1, r2
 8014636:	0018      	movs	r0, r3
 8014638:	f000 fd1b 	bl	8015072 <USBD_GetStatus>
          break;
 801463c:	e014      	b.n	8014668 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801463e:	683a      	ldr	r2, [r7, #0]
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	0011      	movs	r1, r2
 8014644:	0018      	movs	r0, r3
 8014646:	f000 fd4e 	bl	80150e6 <USBD_SetFeature>
          break;
 801464a:	e00d      	b.n	8014668 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801464c:	683a      	ldr	r2, [r7, #0]
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	0011      	movs	r1, r2
 8014652:	0018      	movs	r0, r3
 8014654:	f000 fd5d 	bl	8015112 <USBD_ClrFeature>
          break;
 8014658:	e006      	b.n	8014668 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801465a:	683a      	ldr	r2, [r7, #0]
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	0011      	movs	r1, r2
 8014660:	0018      	movs	r0, r3
 8014662:	f000 fdb4 	bl	80151ce <USBD_CtlError>
          break;
 8014666:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8014668:	e006      	b.n	8014678 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801466a:	683a      	ldr	r2, [r7, #0]
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	0011      	movs	r1, r2
 8014670:	0018      	movs	r0, r3
 8014672:	f000 fdac 	bl	80151ce <USBD_CtlError>
      break;
 8014676:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8014678:	230f      	movs	r3, #15
 801467a:	18fb      	adds	r3, r7, r3
 801467c:	781b      	ldrb	r3, [r3, #0]
}
 801467e:	0018      	movs	r0, r3
 8014680:	46bd      	mov	sp, r7
 8014682:	b004      	add	sp, #16
 8014684:	bd80      	pop	{r7, pc}
 8014686:	46c0      	nop			@ (mov r8, r8)
 8014688:	0801a3a0 	.word	0x0801a3a0

0801468c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801468c:	b5b0      	push	{r4, r5, r7, lr}
 801468e:	b084      	sub	sp, #16
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
 8014694:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014696:	230f      	movs	r3, #15
 8014698:	18fb      	adds	r3, r7, r3
 801469a:	2200      	movs	r2, #0
 801469c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801469e:	683b      	ldr	r3, [r7, #0]
 80146a0:	781b      	ldrb	r3, [r3, #0]
 80146a2:	001a      	movs	r2, r3
 80146a4:	2360      	movs	r3, #96	@ 0x60
 80146a6:	4013      	ands	r3, r2
 80146a8:	2b40      	cmp	r3, #64	@ 0x40
 80146aa:	d004      	beq.n	80146b6 <USBD_StdItfReq+0x2a>
 80146ac:	d839      	bhi.n	8014722 <USBD_StdItfReq+0x96>
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d001      	beq.n	80146b6 <USBD_StdItfReq+0x2a>
 80146b2:	2b20      	cmp	r3, #32
 80146b4:	d135      	bne.n	8014722 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80146b6:	687a      	ldr	r2, [r7, #4]
 80146b8:	23a7      	movs	r3, #167	@ 0xa7
 80146ba:	009b      	lsls	r3, r3, #2
 80146bc:	5cd3      	ldrb	r3, [r2, r3]
 80146be:	3b01      	subs	r3, #1
 80146c0:	2b02      	cmp	r3, #2
 80146c2:	d825      	bhi.n	8014710 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80146c4:	683b      	ldr	r3, [r7, #0]
 80146c6:	889b      	ldrh	r3, [r3, #4]
 80146c8:	b2db      	uxtb	r3, r3
 80146ca:	2b01      	cmp	r3, #1
 80146cc:	d819      	bhi.n	8014702 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80146ce:	687a      	ldr	r2, [r7, #4]
 80146d0:	23ad      	movs	r3, #173	@ 0xad
 80146d2:	009b      	lsls	r3, r3, #2
 80146d4:	58d3      	ldr	r3, [r2, r3]
 80146d6:	689b      	ldr	r3, [r3, #8]
 80146d8:	250f      	movs	r5, #15
 80146da:	197c      	adds	r4, r7, r5
 80146dc:	6839      	ldr	r1, [r7, #0]
 80146de:	687a      	ldr	r2, [r7, #4]
 80146e0:	0010      	movs	r0, r2
 80146e2:	4798      	blx	r3
 80146e4:	0003      	movs	r3, r0
 80146e6:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80146e8:	683b      	ldr	r3, [r7, #0]
 80146ea:	88db      	ldrh	r3, [r3, #6]
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d116      	bne.n	801471e <USBD_StdItfReq+0x92>
 80146f0:	197b      	adds	r3, r7, r5
 80146f2:	781b      	ldrb	r3, [r3, #0]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d112      	bne.n	801471e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	0018      	movs	r0, r3
 80146fc:	f000 fe4f 	bl	801539e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014700:	e00d      	b.n	801471e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8014702:	683a      	ldr	r2, [r7, #0]
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	0011      	movs	r1, r2
 8014708:	0018      	movs	r0, r3
 801470a:	f000 fd60 	bl	80151ce <USBD_CtlError>
          break;
 801470e:	e006      	b.n	801471e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8014710:	683a      	ldr	r2, [r7, #0]
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	0011      	movs	r1, r2
 8014716:	0018      	movs	r0, r3
 8014718:	f000 fd59 	bl	80151ce <USBD_CtlError>
          break;
 801471c:	e000      	b.n	8014720 <USBD_StdItfReq+0x94>
          break;
 801471e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8014720:	e006      	b.n	8014730 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8014722:	683a      	ldr	r2, [r7, #0]
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	0011      	movs	r1, r2
 8014728:	0018      	movs	r0, r3
 801472a:	f000 fd50 	bl	80151ce <USBD_CtlError>
      break;
 801472e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8014730:	2300      	movs	r3, #0
}
 8014732:	0018      	movs	r0, r3
 8014734:	46bd      	mov	sp, r7
 8014736:	b004      	add	sp, #16
 8014738:	bdb0      	pop	{r4, r5, r7, pc}

0801473a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801473a:	b5b0      	push	{r4, r5, r7, lr}
 801473c:	b084      	sub	sp, #16
 801473e:	af00      	add	r7, sp, #0
 8014740:	6078      	str	r0, [r7, #4]
 8014742:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8014744:	230f      	movs	r3, #15
 8014746:	18fb      	adds	r3, r7, r3
 8014748:	2200      	movs	r2, #0
 801474a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801474c:	683b      	ldr	r3, [r7, #0]
 801474e:	889a      	ldrh	r2, [r3, #4]
 8014750:	230e      	movs	r3, #14
 8014752:	18fb      	adds	r3, r7, r3
 8014754:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014756:	683b      	ldr	r3, [r7, #0]
 8014758:	781b      	ldrb	r3, [r3, #0]
 801475a:	001a      	movs	r2, r3
 801475c:	2360      	movs	r3, #96	@ 0x60
 801475e:	4013      	ands	r3, r2
 8014760:	2b40      	cmp	r3, #64	@ 0x40
 8014762:	d006      	beq.n	8014772 <USBD_StdEPReq+0x38>
 8014764:	d900      	bls.n	8014768 <USBD_StdEPReq+0x2e>
 8014766:	e190      	b.n	8014a8a <USBD_StdEPReq+0x350>
 8014768:	2b00      	cmp	r3, #0
 801476a:	d00c      	beq.n	8014786 <USBD_StdEPReq+0x4c>
 801476c:	2b20      	cmp	r3, #32
 801476e:	d000      	beq.n	8014772 <USBD_StdEPReq+0x38>
 8014770:	e18b      	b.n	8014a8a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8014772:	687a      	ldr	r2, [r7, #4]
 8014774:	23ad      	movs	r3, #173	@ 0xad
 8014776:	009b      	lsls	r3, r3, #2
 8014778:	58d3      	ldr	r3, [r2, r3]
 801477a:	689b      	ldr	r3, [r3, #8]
 801477c:	6839      	ldr	r1, [r7, #0]
 801477e:	687a      	ldr	r2, [r7, #4]
 8014780:	0010      	movs	r0, r2
 8014782:	4798      	blx	r3
      break;
 8014784:	e188      	b.n	8014a98 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8014786:	683b      	ldr	r3, [r7, #0]
 8014788:	781b      	ldrb	r3, [r3, #0]
 801478a:	001a      	movs	r2, r3
 801478c:	2360      	movs	r3, #96	@ 0x60
 801478e:	4013      	ands	r3, r2
 8014790:	2b20      	cmp	r3, #32
 8014792:	d10f      	bne.n	80147b4 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014794:	687a      	ldr	r2, [r7, #4]
 8014796:	23ad      	movs	r3, #173	@ 0xad
 8014798:	009b      	lsls	r3, r3, #2
 801479a:	58d3      	ldr	r3, [r2, r3]
 801479c:	689b      	ldr	r3, [r3, #8]
 801479e:	250f      	movs	r5, #15
 80147a0:	197c      	adds	r4, r7, r5
 80147a2:	6839      	ldr	r1, [r7, #0]
 80147a4:	687a      	ldr	r2, [r7, #4]
 80147a6:	0010      	movs	r0, r2
 80147a8:	4798      	blx	r3
 80147aa:	0003      	movs	r3, r0
 80147ac:	7023      	strb	r3, [r4, #0]

        return ret;
 80147ae:	197b      	adds	r3, r7, r5
 80147b0:	781b      	ldrb	r3, [r3, #0]
 80147b2:	e174      	b.n	8014a9e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80147b4:	683b      	ldr	r3, [r7, #0]
 80147b6:	785b      	ldrb	r3, [r3, #1]
 80147b8:	2b03      	cmp	r3, #3
 80147ba:	d007      	beq.n	80147cc <USBD_StdEPReq+0x92>
 80147bc:	dd00      	ble.n	80147c0 <USBD_StdEPReq+0x86>
 80147be:	e15c      	b.n	8014a7a <USBD_StdEPReq+0x340>
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d100      	bne.n	80147c6 <USBD_StdEPReq+0x8c>
 80147c4:	e092      	b.n	80148ec <USBD_StdEPReq+0x1b2>
 80147c6:	2b01      	cmp	r3, #1
 80147c8:	d04b      	beq.n	8014862 <USBD_StdEPReq+0x128>
 80147ca:	e156      	b.n	8014a7a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80147cc:	687a      	ldr	r2, [r7, #4]
 80147ce:	23a7      	movs	r3, #167	@ 0xa7
 80147d0:	009b      	lsls	r3, r3, #2
 80147d2:	5cd3      	ldrb	r3, [r2, r3]
 80147d4:	2b02      	cmp	r3, #2
 80147d6:	d002      	beq.n	80147de <USBD_StdEPReq+0xa4>
 80147d8:	2b03      	cmp	r3, #3
 80147da:	d01d      	beq.n	8014818 <USBD_StdEPReq+0xde>
 80147dc:	e039      	b.n	8014852 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80147de:	220e      	movs	r2, #14
 80147e0:	18bb      	adds	r3, r7, r2
 80147e2:	781b      	ldrb	r3, [r3, #0]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d010      	beq.n	801480a <USBD_StdEPReq+0xd0>
 80147e8:	18bb      	adds	r3, r7, r2
 80147ea:	781b      	ldrb	r3, [r3, #0]
 80147ec:	2b80      	cmp	r3, #128	@ 0x80
 80147ee:	d00c      	beq.n	801480a <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80147f0:	18bb      	adds	r3, r7, r2
 80147f2:	781a      	ldrb	r2, [r3, #0]
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	0011      	movs	r1, r2
 80147f8:	0018      	movs	r0, r3
 80147fa:	f001 f978 	bl	8015aee <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	2180      	movs	r1, #128	@ 0x80
 8014802:	0018      	movs	r0, r3
 8014804:	f001 f973 	bl	8015aee <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014808:	e02a      	b.n	8014860 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801480a:	683a      	ldr	r2, [r7, #0]
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	0011      	movs	r1, r2
 8014810:	0018      	movs	r0, r3
 8014812:	f000 fcdc 	bl	80151ce <USBD_CtlError>
              break;
 8014816:	e023      	b.n	8014860 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014818:	683b      	ldr	r3, [r7, #0]
 801481a:	885b      	ldrh	r3, [r3, #2]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d113      	bne.n	8014848 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8014820:	220e      	movs	r2, #14
 8014822:	18bb      	adds	r3, r7, r2
 8014824:	781b      	ldrb	r3, [r3, #0]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d00e      	beq.n	8014848 <USBD_StdEPReq+0x10e>
 801482a:	18bb      	adds	r3, r7, r2
 801482c:	781b      	ldrb	r3, [r3, #0]
 801482e:	2b80      	cmp	r3, #128	@ 0x80
 8014830:	d00a      	beq.n	8014848 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014832:	683b      	ldr	r3, [r7, #0]
 8014834:	88db      	ldrh	r3, [r3, #6]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d106      	bne.n	8014848 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801483a:	18bb      	adds	r3, r7, r2
 801483c:	781a      	ldrb	r2, [r3, #0]
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	0011      	movs	r1, r2
 8014842:	0018      	movs	r0, r3
 8014844:	f001 f953 	bl	8015aee <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	0018      	movs	r0, r3
 801484c:	f000 fda7 	bl	801539e <USBD_CtlSendStatus>

              break;
 8014850:	e006      	b.n	8014860 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8014852:	683a      	ldr	r2, [r7, #0]
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	0011      	movs	r1, r2
 8014858:	0018      	movs	r0, r3
 801485a:	f000 fcb8 	bl	80151ce <USBD_CtlError>
              break;
 801485e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8014860:	e112      	b.n	8014a88 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014862:	687a      	ldr	r2, [r7, #4]
 8014864:	23a7      	movs	r3, #167	@ 0xa7
 8014866:	009b      	lsls	r3, r3, #2
 8014868:	5cd3      	ldrb	r3, [r2, r3]
 801486a:	2b02      	cmp	r3, #2
 801486c:	d002      	beq.n	8014874 <USBD_StdEPReq+0x13a>
 801486e:	2b03      	cmp	r3, #3
 8014870:	d01d      	beq.n	80148ae <USBD_StdEPReq+0x174>
 8014872:	e032      	b.n	80148da <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014874:	220e      	movs	r2, #14
 8014876:	18bb      	adds	r3, r7, r2
 8014878:	781b      	ldrb	r3, [r3, #0]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d010      	beq.n	80148a0 <USBD_StdEPReq+0x166>
 801487e:	18bb      	adds	r3, r7, r2
 8014880:	781b      	ldrb	r3, [r3, #0]
 8014882:	2b80      	cmp	r3, #128	@ 0x80
 8014884:	d00c      	beq.n	80148a0 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8014886:	18bb      	adds	r3, r7, r2
 8014888:	781a      	ldrb	r2, [r3, #0]
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	0011      	movs	r1, r2
 801488e:	0018      	movs	r0, r3
 8014890:	f001 f92d 	bl	8015aee <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	2180      	movs	r1, #128	@ 0x80
 8014898:	0018      	movs	r0, r3
 801489a:	f001 f928 	bl	8015aee <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801489e:	e024      	b.n	80148ea <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80148a0:	683a      	ldr	r2, [r7, #0]
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	0011      	movs	r1, r2
 80148a6:	0018      	movs	r0, r3
 80148a8:	f000 fc91 	bl	80151ce <USBD_CtlError>
              break;
 80148ac:	e01d      	b.n	80148ea <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80148ae:	683b      	ldr	r3, [r7, #0]
 80148b0:	885b      	ldrh	r3, [r3, #2]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d118      	bne.n	80148e8 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80148b6:	210e      	movs	r1, #14
 80148b8:	187b      	adds	r3, r7, r1
 80148ba:	781b      	ldrb	r3, [r3, #0]
 80148bc:	227f      	movs	r2, #127	@ 0x7f
 80148be:	4013      	ands	r3, r2
 80148c0:	d006      	beq.n	80148d0 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80148c2:	187b      	adds	r3, r7, r1
 80148c4:	781a      	ldrb	r2, [r3, #0]
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	0011      	movs	r1, r2
 80148ca:	0018      	movs	r0, r3
 80148cc:	f001 f93a 	bl	8015b44 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	0018      	movs	r0, r3
 80148d4:	f000 fd63 	bl	801539e <USBD_CtlSendStatus>
              }
              break;
 80148d8:	e006      	b.n	80148e8 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 80148da:	683a      	ldr	r2, [r7, #0]
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	0011      	movs	r1, r2
 80148e0:	0018      	movs	r0, r3
 80148e2:	f000 fc74 	bl	80151ce <USBD_CtlError>
              break;
 80148e6:	e000      	b.n	80148ea <USBD_StdEPReq+0x1b0>
              break;
 80148e8:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80148ea:	e0cd      	b.n	8014a88 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80148ec:	687a      	ldr	r2, [r7, #4]
 80148ee:	23a7      	movs	r3, #167	@ 0xa7
 80148f0:	009b      	lsls	r3, r3, #2
 80148f2:	5cd3      	ldrb	r3, [r2, r3]
 80148f4:	2b02      	cmp	r3, #2
 80148f6:	d002      	beq.n	80148fe <USBD_StdEPReq+0x1c4>
 80148f8:	2b03      	cmp	r3, #3
 80148fa:	d03c      	beq.n	8014976 <USBD_StdEPReq+0x23c>
 80148fc:	e0b5      	b.n	8014a6a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80148fe:	220e      	movs	r2, #14
 8014900:	18bb      	adds	r3, r7, r2
 8014902:	781b      	ldrb	r3, [r3, #0]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d00a      	beq.n	801491e <USBD_StdEPReq+0x1e4>
 8014908:	18bb      	adds	r3, r7, r2
 801490a:	781b      	ldrb	r3, [r3, #0]
 801490c:	2b80      	cmp	r3, #128	@ 0x80
 801490e:	d006      	beq.n	801491e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8014910:	683a      	ldr	r2, [r7, #0]
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	0011      	movs	r1, r2
 8014916:	0018      	movs	r0, r3
 8014918:	f000 fc59 	bl	80151ce <USBD_CtlError>
                break;
 801491c:	e0ac      	b.n	8014a78 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801491e:	220e      	movs	r2, #14
 8014920:	18bb      	adds	r3, r7, r2
 8014922:	781b      	ldrb	r3, [r3, #0]
 8014924:	b25b      	sxtb	r3, r3
 8014926:	2b00      	cmp	r3, #0
 8014928:	da0c      	bge.n	8014944 <USBD_StdEPReq+0x20a>
 801492a:	18bb      	adds	r3, r7, r2
 801492c:	781b      	ldrb	r3, [r3, #0]
 801492e:	227f      	movs	r2, #127	@ 0x7f
 8014930:	401a      	ands	r2, r3
 8014932:	0013      	movs	r3, r2
 8014934:	009b      	lsls	r3, r3, #2
 8014936:	189b      	adds	r3, r3, r2
 8014938:	009b      	lsls	r3, r3, #2
 801493a:	3310      	adds	r3, #16
 801493c:	687a      	ldr	r2, [r7, #4]
 801493e:	18d3      	adds	r3, r2, r3
 8014940:	3304      	adds	r3, #4
 8014942:	e00d      	b.n	8014960 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014944:	230e      	movs	r3, #14
 8014946:	18fb      	adds	r3, r7, r3
 8014948:	781b      	ldrb	r3, [r3, #0]
 801494a:	227f      	movs	r2, #127	@ 0x7f
 801494c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801494e:	0013      	movs	r3, r2
 8014950:	009b      	lsls	r3, r3, #2
 8014952:	189b      	adds	r3, r3, r2
 8014954:	009b      	lsls	r3, r3, #2
 8014956:	3351      	adds	r3, #81	@ 0x51
 8014958:	33ff      	adds	r3, #255	@ 0xff
 801495a:	687a      	ldr	r2, [r7, #4]
 801495c:	18d3      	adds	r3, r2, r3
 801495e:	3304      	adds	r3, #4
 8014960:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014962:	68bb      	ldr	r3, [r7, #8]
 8014964:	2200      	movs	r2, #0
 8014966:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8014968:	68b9      	ldr	r1, [r7, #8]
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	2202      	movs	r2, #2
 801496e:	0018      	movs	r0, r3
 8014970:	f000 fcab 	bl	80152ca <USBD_CtlSendData>
              break;
 8014974:	e080      	b.n	8014a78 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014976:	220e      	movs	r2, #14
 8014978:	18bb      	adds	r3, r7, r2
 801497a:	781b      	ldrb	r3, [r3, #0]
 801497c:	b25b      	sxtb	r3, r3
 801497e:	2b00      	cmp	r3, #0
 8014980:	da14      	bge.n	80149ac <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014982:	18bb      	adds	r3, r7, r2
 8014984:	781b      	ldrb	r3, [r3, #0]
 8014986:	220f      	movs	r2, #15
 8014988:	401a      	ands	r2, r3
 801498a:	6879      	ldr	r1, [r7, #4]
 801498c:	0013      	movs	r3, r2
 801498e:	009b      	lsls	r3, r3, #2
 8014990:	189b      	adds	r3, r3, r2
 8014992:	009b      	lsls	r3, r3, #2
 8014994:	18cb      	adds	r3, r1, r3
 8014996:	3318      	adds	r3, #24
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	2b00      	cmp	r3, #0
 801499c:	d11e      	bne.n	80149dc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801499e:	683a      	ldr	r2, [r7, #0]
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	0011      	movs	r1, r2
 80149a4:	0018      	movs	r0, r3
 80149a6:	f000 fc12 	bl	80151ce <USBD_CtlError>
                  break;
 80149aa:	e065      	b.n	8014a78 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80149ac:	230e      	movs	r3, #14
 80149ae:	18fb      	adds	r3, r7, r3
 80149b0:	781b      	ldrb	r3, [r3, #0]
 80149b2:	220f      	movs	r2, #15
 80149b4:	401a      	ands	r2, r3
 80149b6:	6878      	ldr	r0, [r7, #4]
 80149b8:	23ac      	movs	r3, #172	@ 0xac
 80149ba:	0059      	lsls	r1, r3, #1
 80149bc:	0013      	movs	r3, r2
 80149be:	009b      	lsls	r3, r3, #2
 80149c0:	189b      	adds	r3, r3, r2
 80149c2:	009b      	lsls	r3, r3, #2
 80149c4:	18c3      	adds	r3, r0, r3
 80149c6:	185b      	adds	r3, r3, r1
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d106      	bne.n	80149dc <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80149ce:	683a      	ldr	r2, [r7, #0]
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	0011      	movs	r1, r2
 80149d4:	0018      	movs	r0, r3
 80149d6:	f000 fbfa 	bl	80151ce <USBD_CtlError>
                  break;
 80149da:	e04d      	b.n	8014a78 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80149dc:	220e      	movs	r2, #14
 80149de:	18bb      	adds	r3, r7, r2
 80149e0:	781b      	ldrb	r3, [r3, #0]
 80149e2:	b25b      	sxtb	r3, r3
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	da0c      	bge.n	8014a02 <USBD_StdEPReq+0x2c8>
 80149e8:	18bb      	adds	r3, r7, r2
 80149ea:	781b      	ldrb	r3, [r3, #0]
 80149ec:	227f      	movs	r2, #127	@ 0x7f
 80149ee:	401a      	ands	r2, r3
 80149f0:	0013      	movs	r3, r2
 80149f2:	009b      	lsls	r3, r3, #2
 80149f4:	189b      	adds	r3, r3, r2
 80149f6:	009b      	lsls	r3, r3, #2
 80149f8:	3310      	adds	r3, #16
 80149fa:	687a      	ldr	r2, [r7, #4]
 80149fc:	18d3      	adds	r3, r2, r3
 80149fe:	3304      	adds	r3, #4
 8014a00:	e00d      	b.n	8014a1e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014a02:	230e      	movs	r3, #14
 8014a04:	18fb      	adds	r3, r7, r3
 8014a06:	781b      	ldrb	r3, [r3, #0]
 8014a08:	227f      	movs	r2, #127	@ 0x7f
 8014a0a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014a0c:	0013      	movs	r3, r2
 8014a0e:	009b      	lsls	r3, r3, #2
 8014a10:	189b      	adds	r3, r3, r2
 8014a12:	009b      	lsls	r3, r3, #2
 8014a14:	3351      	adds	r3, #81	@ 0x51
 8014a16:	33ff      	adds	r3, #255	@ 0xff
 8014a18:	687a      	ldr	r2, [r7, #4]
 8014a1a:	18d3      	adds	r3, r2, r3
 8014a1c:	3304      	adds	r3, #4
 8014a1e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014a20:	220e      	movs	r2, #14
 8014a22:	18bb      	adds	r3, r7, r2
 8014a24:	781b      	ldrb	r3, [r3, #0]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d003      	beq.n	8014a32 <USBD_StdEPReq+0x2f8>
 8014a2a:	18bb      	adds	r3, r7, r2
 8014a2c:	781b      	ldrb	r3, [r3, #0]
 8014a2e:	2b80      	cmp	r3, #128	@ 0x80
 8014a30:	d103      	bne.n	8014a3a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8014a32:	68bb      	ldr	r3, [r7, #8]
 8014a34:	2200      	movs	r2, #0
 8014a36:	601a      	str	r2, [r3, #0]
 8014a38:	e010      	b.n	8014a5c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8014a3a:	230e      	movs	r3, #14
 8014a3c:	18fb      	adds	r3, r7, r3
 8014a3e:	781a      	ldrb	r2, [r3, #0]
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	0011      	movs	r1, r2
 8014a44:	0018      	movs	r0, r3
 8014a46:	f001 f8a8 	bl	8015b9a <USBD_LL_IsStallEP>
 8014a4a:	1e03      	subs	r3, r0, #0
 8014a4c:	d003      	beq.n	8014a56 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8014a4e:	68bb      	ldr	r3, [r7, #8]
 8014a50:	2201      	movs	r2, #1
 8014a52:	601a      	str	r2, [r3, #0]
 8014a54:	e002      	b.n	8014a5c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8014a56:	68bb      	ldr	r3, [r7, #8]
 8014a58:	2200      	movs	r2, #0
 8014a5a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8014a5c:	68b9      	ldr	r1, [r7, #8]
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	2202      	movs	r2, #2
 8014a62:	0018      	movs	r0, r3
 8014a64:	f000 fc31 	bl	80152ca <USBD_CtlSendData>
              break;
 8014a68:	e006      	b.n	8014a78 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8014a6a:	683a      	ldr	r2, [r7, #0]
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	0011      	movs	r1, r2
 8014a70:	0018      	movs	r0, r3
 8014a72:	f000 fbac 	bl	80151ce <USBD_CtlError>
              break;
 8014a76:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8014a78:	e006      	b.n	8014a88 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8014a7a:	683a      	ldr	r2, [r7, #0]
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	0011      	movs	r1, r2
 8014a80:	0018      	movs	r0, r3
 8014a82:	f000 fba4 	bl	80151ce <USBD_CtlError>
          break;
 8014a86:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8014a88:	e006      	b.n	8014a98 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8014a8a:	683a      	ldr	r2, [r7, #0]
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	0011      	movs	r1, r2
 8014a90:	0018      	movs	r0, r3
 8014a92:	f000 fb9c 	bl	80151ce <USBD_CtlError>
      break;
 8014a96:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8014a98:	230f      	movs	r3, #15
 8014a9a:	18fb      	adds	r3, r7, r3
 8014a9c:	781b      	ldrb	r3, [r3, #0]
}
 8014a9e:	0018      	movs	r0, r3
 8014aa0:	46bd      	mov	sp, r7
 8014aa2:	b004      	add	sp, #16
 8014aa4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08014aa8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b084      	sub	sp, #16
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
 8014ab0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014ab2:	2308      	movs	r3, #8
 8014ab4:	18fb      	adds	r3, r7, r3
 8014ab6:	2200      	movs	r2, #0
 8014ab8:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8014aba:	2300      	movs	r3, #0
 8014abc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014abe:	230b      	movs	r3, #11
 8014ac0:	18fb      	adds	r3, r7, r3
 8014ac2:	2200      	movs	r2, #0
 8014ac4:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8014ac6:	683b      	ldr	r3, [r7, #0]
 8014ac8:	885b      	ldrh	r3, [r3, #2]
 8014aca:	0a1b      	lsrs	r3, r3, #8
 8014acc:	b29b      	uxth	r3, r3
 8014ace:	2b07      	cmp	r3, #7
 8014ad0:	d900      	bls.n	8014ad4 <USBD_GetDescriptor+0x2c>
 8014ad2:	e159      	b.n	8014d88 <USBD_GetDescriptor+0x2e0>
 8014ad4:	009a      	lsls	r2, r3, #2
 8014ad6:	4bcb      	ldr	r3, [pc, #812]	@ (8014e04 <USBD_GetDescriptor+0x35c>)
 8014ad8:	18d3      	adds	r3, r2, r3
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014ade:	687a      	ldr	r2, [r7, #4]
 8014ae0:	23ac      	movs	r3, #172	@ 0xac
 8014ae2:	009b      	lsls	r3, r3, #2
 8014ae4:	58d3      	ldr	r3, [r2, r3]
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	687a      	ldr	r2, [r7, #4]
 8014aea:	7c12      	ldrb	r2, [r2, #16]
 8014aec:	2108      	movs	r1, #8
 8014aee:	1879      	adds	r1, r7, r1
 8014af0:	0010      	movs	r0, r2
 8014af2:	4798      	blx	r3
 8014af4:	0003      	movs	r3, r0
 8014af6:	60fb      	str	r3, [r7, #12]
      break;
 8014af8:	e153      	b.n	8014da2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	7c1b      	ldrb	r3, [r3, #16]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d10f      	bne.n	8014b22 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014b02:	687a      	ldr	r2, [r7, #4]
 8014b04:	23ad      	movs	r3, #173	@ 0xad
 8014b06:	009b      	lsls	r3, r3, #2
 8014b08:	58d3      	ldr	r3, [r2, r3]
 8014b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014b0c:	2208      	movs	r2, #8
 8014b0e:	18ba      	adds	r2, r7, r2
 8014b10:	0010      	movs	r0, r2
 8014b12:	4798      	blx	r3
 8014b14:	0003      	movs	r3, r0
 8014b16:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	3301      	adds	r3, #1
 8014b1c:	2202      	movs	r2, #2
 8014b1e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014b20:	e13f      	b.n	8014da2 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014b22:	687a      	ldr	r2, [r7, #4]
 8014b24:	23ad      	movs	r3, #173	@ 0xad
 8014b26:	009b      	lsls	r3, r3, #2
 8014b28:	58d3      	ldr	r3, [r2, r3]
 8014b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b2c:	2208      	movs	r2, #8
 8014b2e:	18ba      	adds	r2, r7, r2
 8014b30:	0010      	movs	r0, r2
 8014b32:	4798      	blx	r3
 8014b34:	0003      	movs	r3, r0
 8014b36:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	3301      	adds	r3, #1
 8014b3c:	2202      	movs	r2, #2
 8014b3e:	701a      	strb	r2, [r3, #0]
      break;
 8014b40:	e12f      	b.n	8014da2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014b42:	683b      	ldr	r3, [r7, #0]
 8014b44:	885b      	ldrh	r3, [r3, #2]
 8014b46:	b2db      	uxtb	r3, r3
 8014b48:	2b05      	cmp	r3, #5
 8014b4a:	d900      	bls.n	8014b4e <USBD_GetDescriptor+0xa6>
 8014b4c:	e0d0      	b.n	8014cf0 <USBD_GetDescriptor+0x248>
 8014b4e:	009a      	lsls	r2, r3, #2
 8014b50:	4bad      	ldr	r3, [pc, #692]	@ (8014e08 <USBD_GetDescriptor+0x360>)
 8014b52:	18d3      	adds	r3, r2, r3
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014b58:	687a      	ldr	r2, [r7, #4]
 8014b5a:	23ac      	movs	r3, #172	@ 0xac
 8014b5c:	009b      	lsls	r3, r3, #2
 8014b5e:	58d3      	ldr	r3, [r2, r3]
 8014b60:	685b      	ldr	r3, [r3, #4]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d00d      	beq.n	8014b82 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014b66:	687a      	ldr	r2, [r7, #4]
 8014b68:	23ac      	movs	r3, #172	@ 0xac
 8014b6a:	009b      	lsls	r3, r3, #2
 8014b6c:	58d3      	ldr	r3, [r2, r3]
 8014b6e:	685b      	ldr	r3, [r3, #4]
 8014b70:	687a      	ldr	r2, [r7, #4]
 8014b72:	7c12      	ldrb	r2, [r2, #16]
 8014b74:	2108      	movs	r1, #8
 8014b76:	1879      	adds	r1, r7, r1
 8014b78:	0010      	movs	r0, r2
 8014b7a:	4798      	blx	r3
 8014b7c:	0003      	movs	r3, r0
 8014b7e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014b80:	e0c3      	b.n	8014d0a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014b82:	683a      	ldr	r2, [r7, #0]
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	0011      	movs	r1, r2
 8014b88:	0018      	movs	r0, r3
 8014b8a:	f000 fb20 	bl	80151ce <USBD_CtlError>
            err++;
 8014b8e:	210b      	movs	r1, #11
 8014b90:	187b      	adds	r3, r7, r1
 8014b92:	781a      	ldrb	r2, [r3, #0]
 8014b94:	187b      	adds	r3, r7, r1
 8014b96:	3201      	adds	r2, #1
 8014b98:	701a      	strb	r2, [r3, #0]
          break;
 8014b9a:	e0b6      	b.n	8014d0a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014b9c:	687a      	ldr	r2, [r7, #4]
 8014b9e:	23ac      	movs	r3, #172	@ 0xac
 8014ba0:	009b      	lsls	r3, r3, #2
 8014ba2:	58d3      	ldr	r3, [r2, r3]
 8014ba4:	689b      	ldr	r3, [r3, #8]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d00d      	beq.n	8014bc6 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014baa:	687a      	ldr	r2, [r7, #4]
 8014bac:	23ac      	movs	r3, #172	@ 0xac
 8014bae:	009b      	lsls	r3, r3, #2
 8014bb0:	58d3      	ldr	r3, [r2, r3]
 8014bb2:	689b      	ldr	r3, [r3, #8]
 8014bb4:	687a      	ldr	r2, [r7, #4]
 8014bb6:	7c12      	ldrb	r2, [r2, #16]
 8014bb8:	2108      	movs	r1, #8
 8014bba:	1879      	adds	r1, r7, r1
 8014bbc:	0010      	movs	r0, r2
 8014bbe:	4798      	blx	r3
 8014bc0:	0003      	movs	r3, r0
 8014bc2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014bc4:	e0a1      	b.n	8014d0a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014bc6:	683a      	ldr	r2, [r7, #0]
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	0011      	movs	r1, r2
 8014bcc:	0018      	movs	r0, r3
 8014bce:	f000 fafe 	bl	80151ce <USBD_CtlError>
            err++;
 8014bd2:	210b      	movs	r1, #11
 8014bd4:	187b      	adds	r3, r7, r1
 8014bd6:	781a      	ldrb	r2, [r3, #0]
 8014bd8:	187b      	adds	r3, r7, r1
 8014bda:	3201      	adds	r2, #1
 8014bdc:	701a      	strb	r2, [r3, #0]
          break;
 8014bde:	e094      	b.n	8014d0a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014be0:	687a      	ldr	r2, [r7, #4]
 8014be2:	23ac      	movs	r3, #172	@ 0xac
 8014be4:	009b      	lsls	r3, r3, #2
 8014be6:	58d3      	ldr	r3, [r2, r3]
 8014be8:	68db      	ldr	r3, [r3, #12]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d00d      	beq.n	8014c0a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014bee:	687a      	ldr	r2, [r7, #4]
 8014bf0:	23ac      	movs	r3, #172	@ 0xac
 8014bf2:	009b      	lsls	r3, r3, #2
 8014bf4:	58d3      	ldr	r3, [r2, r3]
 8014bf6:	68db      	ldr	r3, [r3, #12]
 8014bf8:	687a      	ldr	r2, [r7, #4]
 8014bfa:	7c12      	ldrb	r2, [r2, #16]
 8014bfc:	2108      	movs	r1, #8
 8014bfe:	1879      	adds	r1, r7, r1
 8014c00:	0010      	movs	r0, r2
 8014c02:	4798      	blx	r3
 8014c04:	0003      	movs	r3, r0
 8014c06:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014c08:	e07f      	b.n	8014d0a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014c0a:	683a      	ldr	r2, [r7, #0]
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	0011      	movs	r1, r2
 8014c10:	0018      	movs	r0, r3
 8014c12:	f000 fadc 	bl	80151ce <USBD_CtlError>
            err++;
 8014c16:	210b      	movs	r1, #11
 8014c18:	187b      	adds	r3, r7, r1
 8014c1a:	781a      	ldrb	r2, [r3, #0]
 8014c1c:	187b      	adds	r3, r7, r1
 8014c1e:	3201      	adds	r2, #1
 8014c20:	701a      	strb	r2, [r3, #0]
          break;
 8014c22:	e072      	b.n	8014d0a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014c24:	687a      	ldr	r2, [r7, #4]
 8014c26:	23ac      	movs	r3, #172	@ 0xac
 8014c28:	009b      	lsls	r3, r3, #2
 8014c2a:	58d3      	ldr	r3, [r2, r3]
 8014c2c:	691b      	ldr	r3, [r3, #16]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d00d      	beq.n	8014c4e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014c32:	687a      	ldr	r2, [r7, #4]
 8014c34:	23ac      	movs	r3, #172	@ 0xac
 8014c36:	009b      	lsls	r3, r3, #2
 8014c38:	58d3      	ldr	r3, [r2, r3]
 8014c3a:	691b      	ldr	r3, [r3, #16]
 8014c3c:	687a      	ldr	r2, [r7, #4]
 8014c3e:	7c12      	ldrb	r2, [r2, #16]
 8014c40:	2108      	movs	r1, #8
 8014c42:	1879      	adds	r1, r7, r1
 8014c44:	0010      	movs	r0, r2
 8014c46:	4798      	blx	r3
 8014c48:	0003      	movs	r3, r0
 8014c4a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014c4c:	e05d      	b.n	8014d0a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014c4e:	683a      	ldr	r2, [r7, #0]
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	0011      	movs	r1, r2
 8014c54:	0018      	movs	r0, r3
 8014c56:	f000 faba 	bl	80151ce <USBD_CtlError>
            err++;
 8014c5a:	210b      	movs	r1, #11
 8014c5c:	187b      	adds	r3, r7, r1
 8014c5e:	781a      	ldrb	r2, [r3, #0]
 8014c60:	187b      	adds	r3, r7, r1
 8014c62:	3201      	adds	r2, #1
 8014c64:	701a      	strb	r2, [r3, #0]
          break;
 8014c66:	e050      	b.n	8014d0a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014c68:	687a      	ldr	r2, [r7, #4]
 8014c6a:	23ac      	movs	r3, #172	@ 0xac
 8014c6c:	009b      	lsls	r3, r3, #2
 8014c6e:	58d3      	ldr	r3, [r2, r3]
 8014c70:	695b      	ldr	r3, [r3, #20]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d00d      	beq.n	8014c92 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014c76:	687a      	ldr	r2, [r7, #4]
 8014c78:	23ac      	movs	r3, #172	@ 0xac
 8014c7a:	009b      	lsls	r3, r3, #2
 8014c7c:	58d3      	ldr	r3, [r2, r3]
 8014c7e:	695b      	ldr	r3, [r3, #20]
 8014c80:	687a      	ldr	r2, [r7, #4]
 8014c82:	7c12      	ldrb	r2, [r2, #16]
 8014c84:	2108      	movs	r1, #8
 8014c86:	1879      	adds	r1, r7, r1
 8014c88:	0010      	movs	r0, r2
 8014c8a:	4798      	blx	r3
 8014c8c:	0003      	movs	r3, r0
 8014c8e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014c90:	e03b      	b.n	8014d0a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014c92:	683a      	ldr	r2, [r7, #0]
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	0011      	movs	r1, r2
 8014c98:	0018      	movs	r0, r3
 8014c9a:	f000 fa98 	bl	80151ce <USBD_CtlError>
            err++;
 8014c9e:	210b      	movs	r1, #11
 8014ca0:	187b      	adds	r3, r7, r1
 8014ca2:	781a      	ldrb	r2, [r3, #0]
 8014ca4:	187b      	adds	r3, r7, r1
 8014ca6:	3201      	adds	r2, #1
 8014ca8:	701a      	strb	r2, [r3, #0]
          break;
 8014caa:	e02e      	b.n	8014d0a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014cac:	687a      	ldr	r2, [r7, #4]
 8014cae:	23ac      	movs	r3, #172	@ 0xac
 8014cb0:	009b      	lsls	r3, r3, #2
 8014cb2:	58d3      	ldr	r3, [r2, r3]
 8014cb4:	699b      	ldr	r3, [r3, #24]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d00d      	beq.n	8014cd6 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014cba:	687a      	ldr	r2, [r7, #4]
 8014cbc:	23ac      	movs	r3, #172	@ 0xac
 8014cbe:	009b      	lsls	r3, r3, #2
 8014cc0:	58d3      	ldr	r3, [r2, r3]
 8014cc2:	699b      	ldr	r3, [r3, #24]
 8014cc4:	687a      	ldr	r2, [r7, #4]
 8014cc6:	7c12      	ldrb	r2, [r2, #16]
 8014cc8:	2108      	movs	r1, #8
 8014cca:	1879      	adds	r1, r7, r1
 8014ccc:	0010      	movs	r0, r2
 8014cce:	4798      	blx	r3
 8014cd0:	0003      	movs	r3, r0
 8014cd2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014cd4:	e019      	b.n	8014d0a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014cd6:	683a      	ldr	r2, [r7, #0]
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	0011      	movs	r1, r2
 8014cdc:	0018      	movs	r0, r3
 8014cde:	f000 fa76 	bl	80151ce <USBD_CtlError>
            err++;
 8014ce2:	210b      	movs	r1, #11
 8014ce4:	187b      	adds	r3, r7, r1
 8014ce6:	781a      	ldrb	r2, [r3, #0]
 8014ce8:	187b      	adds	r3, r7, r1
 8014cea:	3201      	adds	r2, #1
 8014cec:	701a      	strb	r2, [r3, #0]
          break;
 8014cee:	e00c      	b.n	8014d0a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8014cf0:	683a      	ldr	r2, [r7, #0]
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	0011      	movs	r1, r2
 8014cf6:	0018      	movs	r0, r3
 8014cf8:	f000 fa69 	bl	80151ce <USBD_CtlError>
          err++;
 8014cfc:	210b      	movs	r1, #11
 8014cfe:	187b      	adds	r3, r7, r1
 8014d00:	781a      	ldrb	r2, [r3, #0]
 8014d02:	187b      	adds	r3, r7, r1
 8014d04:	3201      	adds	r2, #1
 8014d06:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8014d08:	e04b      	b.n	8014da2 <USBD_GetDescriptor+0x2fa>
 8014d0a:	e04a      	b.n	8014da2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	7c1b      	ldrb	r3, [r3, #16]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d10b      	bne.n	8014d2c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014d14:	687a      	ldr	r2, [r7, #4]
 8014d16:	23ad      	movs	r3, #173	@ 0xad
 8014d18:	009b      	lsls	r3, r3, #2
 8014d1a:	58d3      	ldr	r3, [r2, r3]
 8014d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014d1e:	2208      	movs	r2, #8
 8014d20:	18ba      	adds	r2, r7, r2
 8014d22:	0010      	movs	r0, r2
 8014d24:	4798      	blx	r3
 8014d26:	0003      	movs	r3, r0
 8014d28:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014d2a:	e03a      	b.n	8014da2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8014d2c:	683a      	ldr	r2, [r7, #0]
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	0011      	movs	r1, r2
 8014d32:	0018      	movs	r0, r3
 8014d34:	f000 fa4b 	bl	80151ce <USBD_CtlError>
        err++;
 8014d38:	210b      	movs	r1, #11
 8014d3a:	187b      	adds	r3, r7, r1
 8014d3c:	781a      	ldrb	r2, [r3, #0]
 8014d3e:	187b      	adds	r3, r7, r1
 8014d40:	3201      	adds	r2, #1
 8014d42:	701a      	strb	r2, [r3, #0]
      break;
 8014d44:	e02d      	b.n	8014da2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	7c1b      	ldrb	r3, [r3, #16]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d10f      	bne.n	8014d6e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014d4e:	687a      	ldr	r2, [r7, #4]
 8014d50:	23ad      	movs	r3, #173	@ 0xad
 8014d52:	009b      	lsls	r3, r3, #2
 8014d54:	58d3      	ldr	r3, [r2, r3]
 8014d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014d58:	2208      	movs	r2, #8
 8014d5a:	18ba      	adds	r2, r7, r2
 8014d5c:	0010      	movs	r0, r2
 8014d5e:	4798      	blx	r3
 8014d60:	0003      	movs	r3, r0
 8014d62:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	3301      	adds	r3, #1
 8014d68:	2207      	movs	r2, #7
 8014d6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014d6c:	e019      	b.n	8014da2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8014d6e:	683a      	ldr	r2, [r7, #0]
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	0011      	movs	r1, r2
 8014d74:	0018      	movs	r0, r3
 8014d76:	f000 fa2a 	bl	80151ce <USBD_CtlError>
        err++;
 8014d7a:	210b      	movs	r1, #11
 8014d7c:	187b      	adds	r3, r7, r1
 8014d7e:	781a      	ldrb	r2, [r3, #0]
 8014d80:	187b      	adds	r3, r7, r1
 8014d82:	3201      	adds	r2, #1
 8014d84:	701a      	strb	r2, [r3, #0]
      break;
 8014d86:	e00c      	b.n	8014da2 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8014d88:	683a      	ldr	r2, [r7, #0]
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	0011      	movs	r1, r2
 8014d8e:	0018      	movs	r0, r3
 8014d90:	f000 fa1d 	bl	80151ce <USBD_CtlError>
      err++;
 8014d94:	210b      	movs	r1, #11
 8014d96:	187b      	adds	r3, r7, r1
 8014d98:	781a      	ldrb	r2, [r3, #0]
 8014d9a:	187b      	adds	r3, r7, r1
 8014d9c:	3201      	adds	r2, #1
 8014d9e:	701a      	strb	r2, [r3, #0]
      break;
 8014da0:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8014da2:	230b      	movs	r3, #11
 8014da4:	18fb      	adds	r3, r7, r3
 8014da6:	781b      	ldrb	r3, [r3, #0]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d127      	bne.n	8014dfc <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8014dac:	2108      	movs	r1, #8
 8014dae:	187b      	adds	r3, r7, r1
 8014db0:	881b      	ldrh	r3, [r3, #0]
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d019      	beq.n	8014dea <USBD_GetDescriptor+0x342>
 8014db6:	683b      	ldr	r3, [r7, #0]
 8014db8:	88db      	ldrh	r3, [r3, #6]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d015      	beq.n	8014dea <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8014dbe:	683b      	ldr	r3, [r7, #0]
 8014dc0:	88da      	ldrh	r2, [r3, #6]
 8014dc2:	187b      	adds	r3, r7, r1
 8014dc4:	881b      	ldrh	r3, [r3, #0]
 8014dc6:	1c18      	adds	r0, r3, #0
 8014dc8:	1c11      	adds	r1, r2, #0
 8014dca:	b28a      	uxth	r2, r1
 8014dcc:	b283      	uxth	r3, r0
 8014dce:	429a      	cmp	r2, r3
 8014dd0:	d900      	bls.n	8014dd4 <USBD_GetDescriptor+0x32c>
 8014dd2:	1c01      	adds	r1, r0, #0
 8014dd4:	b28a      	uxth	r2, r1
 8014dd6:	2108      	movs	r1, #8
 8014dd8:	187b      	adds	r3, r7, r1
 8014dda:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014ddc:	187b      	adds	r3, r7, r1
 8014dde:	881a      	ldrh	r2, [r3, #0]
 8014de0:	68f9      	ldr	r1, [r7, #12]
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	0018      	movs	r0, r3
 8014de6:	f000 fa70 	bl	80152ca <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8014dea:	683b      	ldr	r3, [r7, #0]
 8014dec:	88db      	ldrh	r3, [r3, #6]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d105      	bne.n	8014dfe <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	0018      	movs	r0, r3
 8014df6:	f000 fad2 	bl	801539e <USBD_CtlSendStatus>
 8014dfa:	e000      	b.n	8014dfe <USBD_GetDescriptor+0x356>
    return;
 8014dfc:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8014dfe:	46bd      	mov	sp, r7
 8014e00:	b004      	add	sp, #16
 8014e02:	bd80      	pop	{r7, pc}
 8014e04:	0801a3c8 	.word	0x0801a3c8
 8014e08:	0801a3e8 	.word	0x0801a3e8

08014e0c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014e0c:	b590      	push	{r4, r7, lr}
 8014e0e:	b085      	sub	sp, #20
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	6078      	str	r0, [r7, #4]
 8014e14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014e16:	683b      	ldr	r3, [r7, #0]
 8014e18:	889b      	ldrh	r3, [r3, #4]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d13d      	bne.n	8014e9a <USBD_SetAddress+0x8e>
 8014e1e:	683b      	ldr	r3, [r7, #0]
 8014e20:	88db      	ldrh	r3, [r3, #6]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d139      	bne.n	8014e9a <USBD_SetAddress+0x8e>
 8014e26:	683b      	ldr	r3, [r7, #0]
 8014e28:	885b      	ldrh	r3, [r3, #2]
 8014e2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8014e2c:	d835      	bhi.n	8014e9a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014e2e:	683b      	ldr	r3, [r7, #0]
 8014e30:	885b      	ldrh	r3, [r3, #2]
 8014e32:	b2da      	uxtb	r2, r3
 8014e34:	230f      	movs	r3, #15
 8014e36:	18fb      	adds	r3, r7, r3
 8014e38:	217f      	movs	r1, #127	@ 0x7f
 8014e3a:	400a      	ands	r2, r1
 8014e3c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e3e:	687a      	ldr	r2, [r7, #4]
 8014e40:	23a7      	movs	r3, #167	@ 0xa7
 8014e42:	009b      	lsls	r3, r3, #2
 8014e44:	5cd3      	ldrb	r3, [r2, r3]
 8014e46:	2b03      	cmp	r3, #3
 8014e48:	d106      	bne.n	8014e58 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8014e4a:	683a      	ldr	r2, [r7, #0]
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	0011      	movs	r1, r2
 8014e50:	0018      	movs	r0, r3
 8014e52:	f000 f9bc 	bl	80151ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e56:	e027      	b.n	8014ea8 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	240f      	movs	r4, #15
 8014e5c:	193a      	adds	r2, r7, r4
 8014e5e:	4914      	ldr	r1, [pc, #80]	@ (8014eb0 <USBD_SetAddress+0xa4>)
 8014e60:	7812      	ldrb	r2, [r2, #0]
 8014e62:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014e64:	193b      	adds	r3, r7, r4
 8014e66:	781a      	ldrb	r2, [r3, #0]
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	0011      	movs	r1, r2
 8014e6c:	0018      	movs	r0, r3
 8014e6e:	f000 fec5 	bl	8015bfc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	0018      	movs	r0, r3
 8014e76:	f000 fa92 	bl	801539e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014e7a:	193b      	adds	r3, r7, r4
 8014e7c:	781b      	ldrb	r3, [r3, #0]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d005      	beq.n	8014e8e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014e82:	687a      	ldr	r2, [r7, #4]
 8014e84:	23a7      	movs	r3, #167	@ 0xa7
 8014e86:	009b      	lsls	r3, r3, #2
 8014e88:	2102      	movs	r1, #2
 8014e8a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e8c:	e00c      	b.n	8014ea8 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014e8e:	687a      	ldr	r2, [r7, #4]
 8014e90:	23a7      	movs	r3, #167	@ 0xa7
 8014e92:	009b      	lsls	r3, r3, #2
 8014e94:	2101      	movs	r1, #1
 8014e96:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e98:	e006      	b.n	8014ea8 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014e9a:	683a      	ldr	r2, [r7, #0]
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	0011      	movs	r1, r2
 8014ea0:	0018      	movs	r0, r3
 8014ea2:	f000 f994 	bl	80151ce <USBD_CtlError>
  }
}
 8014ea6:	46c0      	nop			@ (mov r8, r8)
 8014ea8:	46c0      	nop			@ (mov r8, r8)
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	b005      	add	sp, #20
 8014eae:	bd90      	pop	{r4, r7, pc}
 8014eb0:	0000029e 	.word	0x0000029e

08014eb4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b082      	sub	sp, #8
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
 8014ebc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014ebe:	683b      	ldr	r3, [r7, #0]
 8014ec0:	885b      	ldrh	r3, [r3, #2]
 8014ec2:	b2da      	uxtb	r2, r3
 8014ec4:	4b4c      	ldr	r3, [pc, #304]	@ (8014ff8 <USBD_SetConfig+0x144>)
 8014ec6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014ec8:	4b4b      	ldr	r3, [pc, #300]	@ (8014ff8 <USBD_SetConfig+0x144>)
 8014eca:	781b      	ldrb	r3, [r3, #0]
 8014ecc:	2b01      	cmp	r3, #1
 8014ece:	d906      	bls.n	8014ede <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8014ed0:	683a      	ldr	r2, [r7, #0]
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	0011      	movs	r1, r2
 8014ed6:	0018      	movs	r0, r3
 8014ed8:	f000 f979 	bl	80151ce <USBD_CtlError>
 8014edc:	e088      	b.n	8014ff0 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8014ede:	687a      	ldr	r2, [r7, #4]
 8014ee0:	23a7      	movs	r3, #167	@ 0xa7
 8014ee2:	009b      	lsls	r3, r3, #2
 8014ee4:	5cd3      	ldrb	r3, [r2, r3]
 8014ee6:	2b02      	cmp	r3, #2
 8014ee8:	d002      	beq.n	8014ef0 <USBD_SetConfig+0x3c>
 8014eea:	2b03      	cmp	r3, #3
 8014eec:	d029      	beq.n	8014f42 <USBD_SetConfig+0x8e>
 8014eee:	e071      	b.n	8014fd4 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8014ef0:	4b41      	ldr	r3, [pc, #260]	@ (8014ff8 <USBD_SetConfig+0x144>)
 8014ef2:	781b      	ldrb	r3, [r3, #0]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d01f      	beq.n	8014f38 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8014ef8:	4b3f      	ldr	r3, [pc, #252]	@ (8014ff8 <USBD_SetConfig+0x144>)
 8014efa:	781b      	ldrb	r3, [r3, #0]
 8014efc:	001a      	movs	r2, r3
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014f02:	687a      	ldr	r2, [r7, #4]
 8014f04:	23a7      	movs	r3, #167	@ 0xa7
 8014f06:	009b      	lsls	r3, r3, #2
 8014f08:	2103      	movs	r1, #3
 8014f0a:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8014f0c:	4b3a      	ldr	r3, [pc, #232]	@ (8014ff8 <USBD_SetConfig+0x144>)
 8014f0e:	781a      	ldrb	r2, [r3, #0]
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	0011      	movs	r1, r2
 8014f14:	0018      	movs	r0, r3
 8014f16:	f7ff f8c5 	bl	80140a4 <USBD_SetClassConfig>
 8014f1a:	0003      	movs	r3, r0
 8014f1c:	2b02      	cmp	r3, #2
 8014f1e:	d106      	bne.n	8014f2e <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8014f20:	683a      	ldr	r2, [r7, #0]
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	0011      	movs	r1, r2
 8014f26:	0018      	movs	r0, r3
 8014f28:	f000 f951 	bl	80151ce <USBD_CtlError>
            return;
 8014f2c:	e060      	b.n	8014ff0 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	0018      	movs	r0, r3
 8014f32:	f000 fa34 	bl	801539e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8014f36:	e05b      	b.n	8014ff0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	0018      	movs	r0, r3
 8014f3c:	f000 fa2f 	bl	801539e <USBD_CtlSendStatus>
        break;
 8014f40:	e056      	b.n	8014ff0 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8014f42:	4b2d      	ldr	r3, [pc, #180]	@ (8014ff8 <USBD_SetConfig+0x144>)
 8014f44:	781b      	ldrb	r3, [r3, #0]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d115      	bne.n	8014f76 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014f4a:	687a      	ldr	r2, [r7, #4]
 8014f4c:	23a7      	movs	r3, #167	@ 0xa7
 8014f4e:	009b      	lsls	r3, r3, #2
 8014f50:	2102      	movs	r1, #2
 8014f52:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8014f54:	4b28      	ldr	r3, [pc, #160]	@ (8014ff8 <USBD_SetConfig+0x144>)
 8014f56:	781b      	ldrb	r3, [r3, #0]
 8014f58:	001a      	movs	r2, r3
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8014f5e:	4b26      	ldr	r3, [pc, #152]	@ (8014ff8 <USBD_SetConfig+0x144>)
 8014f60:	781a      	ldrb	r2, [r3, #0]
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	0011      	movs	r1, r2
 8014f66:	0018      	movs	r0, r3
 8014f68:	f7ff f8c3 	bl	80140f2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	0018      	movs	r0, r3
 8014f70:	f000 fa15 	bl	801539e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8014f74:	e03c      	b.n	8014ff0 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8014f76:	4b20      	ldr	r3, [pc, #128]	@ (8014ff8 <USBD_SetConfig+0x144>)
 8014f78:	781b      	ldrb	r3, [r3, #0]
 8014f7a:	001a      	movs	r2, r3
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	685b      	ldr	r3, [r3, #4]
 8014f80:	429a      	cmp	r2, r3
 8014f82:	d022      	beq.n	8014fca <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	685b      	ldr	r3, [r3, #4]
 8014f88:	b2da      	uxtb	r2, r3
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	0011      	movs	r1, r2
 8014f8e:	0018      	movs	r0, r3
 8014f90:	f7ff f8af 	bl	80140f2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8014f94:	4b18      	ldr	r3, [pc, #96]	@ (8014ff8 <USBD_SetConfig+0x144>)
 8014f96:	781b      	ldrb	r3, [r3, #0]
 8014f98:	001a      	movs	r2, r3
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8014f9e:	4b16      	ldr	r3, [pc, #88]	@ (8014ff8 <USBD_SetConfig+0x144>)
 8014fa0:	781a      	ldrb	r2, [r3, #0]
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	0011      	movs	r1, r2
 8014fa6:	0018      	movs	r0, r3
 8014fa8:	f7ff f87c 	bl	80140a4 <USBD_SetClassConfig>
 8014fac:	0003      	movs	r3, r0
 8014fae:	2b02      	cmp	r3, #2
 8014fb0:	d106      	bne.n	8014fc0 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8014fb2:	683a      	ldr	r2, [r7, #0]
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	0011      	movs	r1, r2
 8014fb8:	0018      	movs	r0, r3
 8014fba:	f000 f908 	bl	80151ce <USBD_CtlError>
            return;
 8014fbe:	e017      	b.n	8014ff0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	0018      	movs	r0, r3
 8014fc4:	f000 f9eb 	bl	801539e <USBD_CtlSendStatus>
        break;
 8014fc8:	e012      	b.n	8014ff0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	0018      	movs	r0, r3
 8014fce:	f000 f9e6 	bl	801539e <USBD_CtlSendStatus>
        break;
 8014fd2:	e00d      	b.n	8014ff0 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8014fd4:	683a      	ldr	r2, [r7, #0]
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	0011      	movs	r1, r2
 8014fda:	0018      	movs	r0, r3
 8014fdc:	f000 f8f7 	bl	80151ce <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8014fe0:	4b05      	ldr	r3, [pc, #20]	@ (8014ff8 <USBD_SetConfig+0x144>)
 8014fe2:	781a      	ldrb	r2, [r3, #0]
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	0011      	movs	r1, r2
 8014fe8:	0018      	movs	r0, r3
 8014fea:	f7ff f882 	bl	80140f2 <USBD_ClrClassConfig>
        break;
 8014fee:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	b002      	add	sp, #8
 8014ff4:	bd80      	pop	{r7, pc}
 8014ff6:	46c0      	nop			@ (mov r8, r8)
 8014ff8:	200030b8 	.word	0x200030b8

08014ffc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	b082      	sub	sp, #8
 8015000:	af00      	add	r7, sp, #0
 8015002:	6078      	str	r0, [r7, #4]
 8015004:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015006:	683b      	ldr	r3, [r7, #0]
 8015008:	88db      	ldrh	r3, [r3, #6]
 801500a:	2b01      	cmp	r3, #1
 801500c:	d006      	beq.n	801501c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801500e:	683a      	ldr	r2, [r7, #0]
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	0011      	movs	r1, r2
 8015014:	0018      	movs	r0, r3
 8015016:	f000 f8da 	bl	80151ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801501a:	e026      	b.n	801506a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801501c:	687a      	ldr	r2, [r7, #4]
 801501e:	23a7      	movs	r3, #167	@ 0xa7
 8015020:	009b      	lsls	r3, r3, #2
 8015022:	5cd3      	ldrb	r3, [r2, r3]
 8015024:	2b02      	cmp	r3, #2
 8015026:	dc02      	bgt.n	801502e <USBD_GetConfig+0x32>
 8015028:	2b00      	cmp	r3, #0
 801502a:	dc03      	bgt.n	8015034 <USBD_GetConfig+0x38>
 801502c:	e016      	b.n	801505c <USBD_GetConfig+0x60>
 801502e:	2b03      	cmp	r3, #3
 8015030:	d00c      	beq.n	801504c <USBD_GetConfig+0x50>
 8015032:	e013      	b.n	801505c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	2200      	movs	r2, #0
 8015038:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	3308      	adds	r3, #8
 801503e:	0019      	movs	r1, r3
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	2201      	movs	r2, #1
 8015044:	0018      	movs	r0, r3
 8015046:	f000 f940 	bl	80152ca <USBD_CtlSendData>
        break;
 801504a:	e00e      	b.n	801506a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	1d19      	adds	r1, r3, #4
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	2201      	movs	r2, #1
 8015054:	0018      	movs	r0, r3
 8015056:	f000 f938 	bl	80152ca <USBD_CtlSendData>
        break;
 801505a:	e006      	b.n	801506a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801505c:	683a      	ldr	r2, [r7, #0]
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	0011      	movs	r1, r2
 8015062:	0018      	movs	r0, r3
 8015064:	f000 f8b3 	bl	80151ce <USBD_CtlError>
        break;
 8015068:	46c0      	nop			@ (mov r8, r8)
}
 801506a:	46c0      	nop			@ (mov r8, r8)
 801506c:	46bd      	mov	sp, r7
 801506e:	b002      	add	sp, #8
 8015070:	bd80      	pop	{r7, pc}

08015072 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015072:	b580      	push	{r7, lr}
 8015074:	b082      	sub	sp, #8
 8015076:	af00      	add	r7, sp, #0
 8015078:	6078      	str	r0, [r7, #4]
 801507a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801507c:	687a      	ldr	r2, [r7, #4]
 801507e:	23a7      	movs	r3, #167	@ 0xa7
 8015080:	009b      	lsls	r3, r3, #2
 8015082:	5cd3      	ldrb	r3, [r2, r3]
 8015084:	3b01      	subs	r3, #1
 8015086:	2b02      	cmp	r3, #2
 8015088:	d822      	bhi.n	80150d0 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801508a:	683b      	ldr	r3, [r7, #0]
 801508c:	88db      	ldrh	r3, [r3, #6]
 801508e:	2b02      	cmp	r3, #2
 8015090:	d006      	beq.n	80150a0 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8015092:	683a      	ldr	r2, [r7, #0]
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	0011      	movs	r1, r2
 8015098:	0018      	movs	r0, r3
 801509a:	f000 f898 	bl	80151ce <USBD_CtlError>
        break;
 801509e:	e01e      	b.n	80150de <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	2201      	movs	r2, #1
 80150a4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80150a6:	687a      	ldr	r2, [r7, #4]
 80150a8:	23a9      	movs	r3, #169	@ 0xa9
 80150aa:	009b      	lsls	r3, r3, #2
 80150ac:	58d3      	ldr	r3, [r2, r3]
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d005      	beq.n	80150be <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	68db      	ldr	r3, [r3, #12]
 80150b6:	2202      	movs	r2, #2
 80150b8:	431a      	orrs	r2, r3
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	330c      	adds	r3, #12
 80150c2:	0019      	movs	r1, r3
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	2202      	movs	r2, #2
 80150c8:	0018      	movs	r0, r3
 80150ca:	f000 f8fe 	bl	80152ca <USBD_CtlSendData>
      break;
 80150ce:	e006      	b.n	80150de <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 80150d0:	683a      	ldr	r2, [r7, #0]
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	0011      	movs	r1, r2
 80150d6:	0018      	movs	r0, r3
 80150d8:	f000 f879 	bl	80151ce <USBD_CtlError>
      break;
 80150dc:	46c0      	nop			@ (mov r8, r8)
  }
}
 80150de:	46c0      	nop			@ (mov r8, r8)
 80150e0:	46bd      	mov	sp, r7
 80150e2:	b002      	add	sp, #8
 80150e4:	bd80      	pop	{r7, pc}

080150e6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80150e6:	b580      	push	{r7, lr}
 80150e8:	b082      	sub	sp, #8
 80150ea:	af00      	add	r7, sp, #0
 80150ec:	6078      	str	r0, [r7, #4]
 80150ee:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80150f0:	683b      	ldr	r3, [r7, #0]
 80150f2:	885b      	ldrh	r3, [r3, #2]
 80150f4:	2b01      	cmp	r3, #1
 80150f6:	d108      	bne.n	801510a <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 80150f8:	687a      	ldr	r2, [r7, #4]
 80150fa:	23a9      	movs	r3, #169	@ 0xa9
 80150fc:	009b      	lsls	r3, r3, #2
 80150fe:	2101      	movs	r1, #1
 8015100:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	0018      	movs	r0, r3
 8015106:	f000 f94a 	bl	801539e <USBD_CtlSendStatus>
  }
}
 801510a:	46c0      	nop			@ (mov r8, r8)
 801510c:	46bd      	mov	sp, r7
 801510e:	b002      	add	sp, #8
 8015110:	bd80      	pop	{r7, pc}

08015112 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8015112:	b580      	push	{r7, lr}
 8015114:	b082      	sub	sp, #8
 8015116:	af00      	add	r7, sp, #0
 8015118:	6078      	str	r0, [r7, #4]
 801511a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801511c:	687a      	ldr	r2, [r7, #4]
 801511e:	23a7      	movs	r3, #167	@ 0xa7
 8015120:	009b      	lsls	r3, r3, #2
 8015122:	5cd3      	ldrb	r3, [r2, r3]
 8015124:	3b01      	subs	r3, #1
 8015126:	2b02      	cmp	r3, #2
 8015128:	d80d      	bhi.n	8015146 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801512a:	683b      	ldr	r3, [r7, #0]
 801512c:	885b      	ldrh	r3, [r3, #2]
 801512e:	2b01      	cmp	r3, #1
 8015130:	d110      	bne.n	8015154 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8015132:	687a      	ldr	r2, [r7, #4]
 8015134:	23a9      	movs	r3, #169	@ 0xa9
 8015136:	009b      	lsls	r3, r3, #2
 8015138:	2100      	movs	r1, #0
 801513a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	0018      	movs	r0, r3
 8015140:	f000 f92d 	bl	801539e <USBD_CtlSendStatus>
      }
      break;
 8015144:	e006      	b.n	8015154 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8015146:	683a      	ldr	r2, [r7, #0]
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	0011      	movs	r1, r2
 801514c:	0018      	movs	r0, r3
 801514e:	f000 f83e 	bl	80151ce <USBD_CtlError>
      break;
 8015152:	e000      	b.n	8015156 <USBD_ClrFeature+0x44>
      break;
 8015154:	46c0      	nop			@ (mov r8, r8)
  }
}
 8015156:	46c0      	nop			@ (mov r8, r8)
 8015158:	46bd      	mov	sp, r7
 801515a:	b002      	add	sp, #8
 801515c:	bd80      	pop	{r7, pc}

0801515e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801515e:	b580      	push	{r7, lr}
 8015160:	b082      	sub	sp, #8
 8015162:	af00      	add	r7, sp, #0
 8015164:	6078      	str	r0, [r7, #4]
 8015166:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8015168:	683b      	ldr	r3, [r7, #0]
 801516a:	781a      	ldrb	r2, [r3, #0]
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8015170:	683b      	ldr	r3, [r7, #0]
 8015172:	785a      	ldrb	r2, [r3, #1]
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8015178:	683b      	ldr	r3, [r7, #0]
 801517a:	3302      	adds	r3, #2
 801517c:	781b      	ldrb	r3, [r3, #0]
 801517e:	001a      	movs	r2, r3
 8015180:	683b      	ldr	r3, [r7, #0]
 8015182:	3303      	adds	r3, #3
 8015184:	781b      	ldrb	r3, [r3, #0]
 8015186:	021b      	lsls	r3, r3, #8
 8015188:	b29b      	uxth	r3, r3
 801518a:	18d3      	adds	r3, r2, r3
 801518c:	b29a      	uxth	r2, r3
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8015192:	683b      	ldr	r3, [r7, #0]
 8015194:	3304      	adds	r3, #4
 8015196:	781b      	ldrb	r3, [r3, #0]
 8015198:	001a      	movs	r2, r3
 801519a:	683b      	ldr	r3, [r7, #0]
 801519c:	3305      	adds	r3, #5
 801519e:	781b      	ldrb	r3, [r3, #0]
 80151a0:	021b      	lsls	r3, r3, #8
 80151a2:	b29b      	uxth	r3, r3
 80151a4:	18d3      	adds	r3, r2, r3
 80151a6:	b29a      	uxth	r2, r3
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80151ac:	683b      	ldr	r3, [r7, #0]
 80151ae:	3306      	adds	r3, #6
 80151b0:	781b      	ldrb	r3, [r3, #0]
 80151b2:	001a      	movs	r2, r3
 80151b4:	683b      	ldr	r3, [r7, #0]
 80151b6:	3307      	adds	r3, #7
 80151b8:	781b      	ldrb	r3, [r3, #0]
 80151ba:	021b      	lsls	r3, r3, #8
 80151bc:	b29b      	uxth	r3, r3
 80151be:	18d3      	adds	r3, r2, r3
 80151c0:	b29a      	uxth	r2, r3
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	80da      	strh	r2, [r3, #6]

}
 80151c6:	46c0      	nop			@ (mov r8, r8)
 80151c8:	46bd      	mov	sp, r7
 80151ca:	b002      	add	sp, #8
 80151cc:	bd80      	pop	{r7, pc}

080151ce <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80151ce:	b580      	push	{r7, lr}
 80151d0:	b082      	sub	sp, #8
 80151d2:	af00      	add	r7, sp, #0
 80151d4:	6078      	str	r0, [r7, #4]
 80151d6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	2180      	movs	r1, #128	@ 0x80
 80151dc:	0018      	movs	r0, r3
 80151de:	f000 fc86 	bl	8015aee <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	2100      	movs	r1, #0
 80151e6:	0018      	movs	r0, r3
 80151e8:	f000 fc81 	bl	8015aee <USBD_LL_StallEP>
}
 80151ec:	46c0      	nop			@ (mov r8, r8)
 80151ee:	46bd      	mov	sp, r7
 80151f0:	b002      	add	sp, #8
 80151f2:	bd80      	pop	{r7, pc}

080151f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80151f4:	b590      	push	{r4, r7, lr}
 80151f6:	b087      	sub	sp, #28
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	60f8      	str	r0, [r7, #12]
 80151fc:	60b9      	str	r1, [r7, #8]
 80151fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015200:	2417      	movs	r4, #23
 8015202:	193b      	adds	r3, r7, r4
 8015204:	2200      	movs	r2, #0
 8015206:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d03c      	beq.n	8015288 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	0018      	movs	r0, r3
 8015212:	f000 f83d 	bl	8015290 <USBD_GetLen>
 8015216:	0003      	movs	r3, r0
 8015218:	3301      	adds	r3, #1
 801521a:	b29b      	uxth	r3, r3
 801521c:	18db      	adds	r3, r3, r3
 801521e:	b29a      	uxth	r2, r3
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8015224:	193b      	adds	r3, r7, r4
 8015226:	781b      	ldrb	r3, [r3, #0]
 8015228:	193a      	adds	r2, r7, r4
 801522a:	1c59      	adds	r1, r3, #1
 801522c:	7011      	strb	r1, [r2, #0]
 801522e:	001a      	movs	r2, r3
 8015230:	68bb      	ldr	r3, [r7, #8]
 8015232:	189b      	adds	r3, r3, r2
 8015234:	687a      	ldr	r2, [r7, #4]
 8015236:	7812      	ldrb	r2, [r2, #0]
 8015238:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801523a:	193b      	adds	r3, r7, r4
 801523c:	781b      	ldrb	r3, [r3, #0]
 801523e:	193a      	adds	r2, r7, r4
 8015240:	1c59      	adds	r1, r3, #1
 8015242:	7011      	strb	r1, [r2, #0]
 8015244:	001a      	movs	r2, r3
 8015246:	68bb      	ldr	r3, [r7, #8]
 8015248:	189b      	adds	r3, r3, r2
 801524a:	2203      	movs	r2, #3
 801524c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801524e:	e017      	b.n	8015280 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	1c5a      	adds	r2, r3, #1
 8015254:	60fa      	str	r2, [r7, #12]
 8015256:	2417      	movs	r4, #23
 8015258:	193a      	adds	r2, r7, r4
 801525a:	7812      	ldrb	r2, [r2, #0]
 801525c:	1939      	adds	r1, r7, r4
 801525e:	1c50      	adds	r0, r2, #1
 8015260:	7008      	strb	r0, [r1, #0]
 8015262:	0011      	movs	r1, r2
 8015264:	68ba      	ldr	r2, [r7, #8]
 8015266:	1852      	adds	r2, r2, r1
 8015268:	781b      	ldrb	r3, [r3, #0]
 801526a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801526c:	193b      	adds	r3, r7, r4
 801526e:	781b      	ldrb	r3, [r3, #0]
 8015270:	193a      	adds	r2, r7, r4
 8015272:	1c59      	adds	r1, r3, #1
 8015274:	7011      	strb	r1, [r2, #0]
 8015276:	001a      	movs	r2, r3
 8015278:	68bb      	ldr	r3, [r7, #8]
 801527a:	189b      	adds	r3, r3, r2
 801527c:	2200      	movs	r2, #0
 801527e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	781b      	ldrb	r3, [r3, #0]
 8015284:	2b00      	cmp	r3, #0
 8015286:	d1e3      	bne.n	8015250 <USBD_GetString+0x5c>
    }
  }
}
 8015288:	46c0      	nop			@ (mov r8, r8)
 801528a:	46bd      	mov	sp, r7
 801528c:	b007      	add	sp, #28
 801528e:	bd90      	pop	{r4, r7, pc}

08015290 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015290:	b580      	push	{r7, lr}
 8015292:	b084      	sub	sp, #16
 8015294:	af00      	add	r7, sp, #0
 8015296:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015298:	230f      	movs	r3, #15
 801529a:	18fb      	adds	r3, r7, r3
 801529c:	2200      	movs	r2, #0
 801529e:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 80152a0:	e008      	b.n	80152b4 <USBD_GetLen+0x24>
  {
    len++;
 80152a2:	210f      	movs	r1, #15
 80152a4:	187b      	adds	r3, r7, r1
 80152a6:	781a      	ldrb	r2, [r3, #0]
 80152a8:	187b      	adds	r3, r7, r1
 80152aa:	3201      	adds	r2, #1
 80152ac:	701a      	strb	r2, [r3, #0]
    buf++;
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	3301      	adds	r3, #1
 80152b2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	781b      	ldrb	r3, [r3, #0]
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d1f2      	bne.n	80152a2 <USBD_GetLen+0x12>
  }

  return len;
 80152bc:	230f      	movs	r3, #15
 80152be:	18fb      	adds	r3, r7, r3
 80152c0:	781b      	ldrb	r3, [r3, #0]
}
 80152c2:	0018      	movs	r0, r3
 80152c4:	46bd      	mov	sp, r7
 80152c6:	b004      	add	sp, #16
 80152c8:	bd80      	pop	{r7, pc}

080152ca <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80152ca:	b580      	push	{r7, lr}
 80152cc:	b084      	sub	sp, #16
 80152ce:	af00      	add	r7, sp, #0
 80152d0:	60f8      	str	r0, [r7, #12]
 80152d2:	60b9      	str	r1, [r7, #8]
 80152d4:	1dbb      	adds	r3, r7, #6
 80152d6:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80152d8:	68fa      	ldr	r2, [r7, #12]
 80152da:	23a5      	movs	r3, #165	@ 0xa5
 80152dc:	009b      	lsls	r3, r3, #2
 80152de:	2102      	movs	r1, #2
 80152e0:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 80152e2:	1dbb      	adds	r3, r7, #6
 80152e4:	881a      	ldrh	r2, [r3, #0]
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80152ea:	1dbb      	adds	r3, r7, #6
 80152ec:	881a      	ldrh	r2, [r3, #0]
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80152f2:	1dbb      	adds	r3, r7, #6
 80152f4:	881b      	ldrh	r3, [r3, #0]
 80152f6:	68ba      	ldr	r2, [r7, #8]
 80152f8:	68f8      	ldr	r0, [r7, #12]
 80152fa:	2100      	movs	r1, #0
 80152fc:	f000 fca9 	bl	8015c52 <USBD_LL_Transmit>

  return USBD_OK;
 8015300:	2300      	movs	r3, #0
}
 8015302:	0018      	movs	r0, r3
 8015304:	46bd      	mov	sp, r7
 8015306:	b004      	add	sp, #16
 8015308:	bd80      	pop	{r7, pc}

0801530a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801530a:	b580      	push	{r7, lr}
 801530c:	b084      	sub	sp, #16
 801530e:	af00      	add	r7, sp, #0
 8015310:	60f8      	str	r0, [r7, #12]
 8015312:	60b9      	str	r1, [r7, #8]
 8015314:	1dbb      	adds	r3, r7, #6
 8015316:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015318:	1dbb      	adds	r3, r7, #6
 801531a:	881b      	ldrh	r3, [r3, #0]
 801531c:	68ba      	ldr	r2, [r7, #8]
 801531e:	68f8      	ldr	r0, [r7, #12]
 8015320:	2100      	movs	r1, #0
 8015322:	f000 fc96 	bl	8015c52 <USBD_LL_Transmit>

  return USBD_OK;
 8015326:	2300      	movs	r3, #0
}
 8015328:	0018      	movs	r0, r3
 801532a:	46bd      	mov	sp, r7
 801532c:	b004      	add	sp, #16
 801532e:	bd80      	pop	{r7, pc}

08015330 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8015330:	b580      	push	{r7, lr}
 8015332:	b084      	sub	sp, #16
 8015334:	af00      	add	r7, sp, #0
 8015336:	60f8      	str	r0, [r7, #12]
 8015338:	60b9      	str	r1, [r7, #8]
 801533a:	1dbb      	adds	r3, r7, #6
 801533c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801533e:	68fa      	ldr	r2, [r7, #12]
 8015340:	23a5      	movs	r3, #165	@ 0xa5
 8015342:	009b      	lsls	r3, r3, #2
 8015344:	2103      	movs	r1, #3
 8015346:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8015348:	1dbb      	adds	r3, r7, #6
 801534a:	8819      	ldrh	r1, [r3, #0]
 801534c:	68fa      	ldr	r2, [r7, #12]
 801534e:	23ae      	movs	r3, #174	@ 0xae
 8015350:	005b      	lsls	r3, r3, #1
 8015352:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8015354:	1dbb      	adds	r3, r7, #6
 8015356:	8819      	ldrh	r1, [r3, #0]
 8015358:	68fa      	ldr	r2, [r7, #12]
 801535a:	23b0      	movs	r3, #176	@ 0xb0
 801535c:	005b      	lsls	r3, r3, #1
 801535e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015360:	1dbb      	adds	r3, r7, #6
 8015362:	881b      	ldrh	r3, [r3, #0]
 8015364:	68ba      	ldr	r2, [r7, #8]
 8015366:	68f8      	ldr	r0, [r7, #12]
 8015368:	2100      	movs	r1, #0
 801536a:	f000 fca9 	bl	8015cc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801536e:	2300      	movs	r3, #0
}
 8015370:	0018      	movs	r0, r3
 8015372:	46bd      	mov	sp, r7
 8015374:	b004      	add	sp, #16
 8015376:	bd80      	pop	{r7, pc}

08015378 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8015378:	b580      	push	{r7, lr}
 801537a:	b084      	sub	sp, #16
 801537c:	af00      	add	r7, sp, #0
 801537e:	60f8      	str	r0, [r7, #12]
 8015380:	60b9      	str	r1, [r7, #8]
 8015382:	1dbb      	adds	r3, r7, #6
 8015384:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015386:	1dbb      	adds	r3, r7, #6
 8015388:	881b      	ldrh	r3, [r3, #0]
 801538a:	68ba      	ldr	r2, [r7, #8]
 801538c:	68f8      	ldr	r0, [r7, #12]
 801538e:	2100      	movs	r1, #0
 8015390:	f000 fc96 	bl	8015cc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015394:	2300      	movs	r3, #0
}
 8015396:	0018      	movs	r0, r3
 8015398:	46bd      	mov	sp, r7
 801539a:	b004      	add	sp, #16
 801539c:	bd80      	pop	{r7, pc}

0801539e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801539e:	b580      	push	{r7, lr}
 80153a0:	b082      	sub	sp, #8
 80153a2:	af00      	add	r7, sp, #0
 80153a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80153a6:	687a      	ldr	r2, [r7, #4]
 80153a8:	23a5      	movs	r3, #165	@ 0xa5
 80153aa:	009b      	lsls	r3, r3, #2
 80153ac:	2104      	movs	r1, #4
 80153ae:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80153b0:	6878      	ldr	r0, [r7, #4]
 80153b2:	2300      	movs	r3, #0
 80153b4:	2200      	movs	r2, #0
 80153b6:	2100      	movs	r1, #0
 80153b8:	f000 fc4b 	bl	8015c52 <USBD_LL_Transmit>

  return USBD_OK;
 80153bc:	2300      	movs	r3, #0
}
 80153be:	0018      	movs	r0, r3
 80153c0:	46bd      	mov	sp, r7
 80153c2:	b002      	add	sp, #8
 80153c4:	bd80      	pop	{r7, pc}

080153c6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80153c6:	b580      	push	{r7, lr}
 80153c8:	b082      	sub	sp, #8
 80153ca:	af00      	add	r7, sp, #0
 80153cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80153ce:	687a      	ldr	r2, [r7, #4]
 80153d0:	23a5      	movs	r3, #165	@ 0xa5
 80153d2:	009b      	lsls	r3, r3, #2
 80153d4:	2105      	movs	r1, #5
 80153d6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80153d8:	6878      	ldr	r0, [r7, #4]
 80153da:	2300      	movs	r3, #0
 80153dc:	2200      	movs	r2, #0
 80153de:	2100      	movs	r1, #0
 80153e0:	f000 fc6e 	bl	8015cc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80153e4:	2300      	movs	r3, #0
}
 80153e6:	0018      	movs	r0, r3
 80153e8:	46bd      	mov	sp, r7
 80153ea:	b002      	add	sp, #8
 80153ec:	bd80      	pop	{r7, pc}
	...

080153f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80153f4:	4914      	ldr	r1, [pc, #80]	@ (8015448 <MX_USB_DEVICE_Init+0x58>)
 80153f6:	4b15      	ldr	r3, [pc, #84]	@ (801544c <MX_USB_DEVICE_Init+0x5c>)
 80153f8:	2200      	movs	r2, #0
 80153fa:	0018      	movs	r0, r3
 80153fc:	f7fe fdeb 	bl	8013fd6 <USBD_Init>
 8015400:	1e03      	subs	r3, r0, #0
 8015402:	d001      	beq.n	8015408 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015404:	f7f0 fb86 	bl	8005b14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015408:	4a11      	ldr	r2, [pc, #68]	@ (8015450 <MX_USB_DEVICE_Init+0x60>)
 801540a:	4b10      	ldr	r3, [pc, #64]	@ (801544c <MX_USB_DEVICE_Init+0x5c>)
 801540c:	0011      	movs	r1, r2
 801540e:	0018      	movs	r0, r3
 8015410:	f7fe fe12 	bl	8014038 <USBD_RegisterClass>
 8015414:	1e03      	subs	r3, r0, #0
 8015416:	d001      	beq.n	801541c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8015418:	f7f0 fb7c 	bl	8005b14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801541c:	4a0d      	ldr	r2, [pc, #52]	@ (8015454 <MX_USB_DEVICE_Init+0x64>)
 801541e:	4b0b      	ldr	r3, [pc, #44]	@ (801544c <MX_USB_DEVICE_Init+0x5c>)
 8015420:	0011      	movs	r1, r2
 8015422:	0018      	movs	r0, r3
 8015424:	f7fe fd5e 	bl	8013ee4 <USBD_CDC_RegisterInterface>
 8015428:	1e03      	subs	r3, r0, #0
 801542a:	d001      	beq.n	8015430 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801542c:	f7f0 fb72 	bl	8005b14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015430:	4b06      	ldr	r3, [pc, #24]	@ (801544c <MX_USB_DEVICE_Init+0x5c>)
 8015432:	0018      	movs	r0, r3
 8015434:	f7fe fe20 	bl	8014078 <USBD_Start>
 8015438:	1e03      	subs	r3, r0, #0
 801543a:	d001      	beq.n	8015440 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801543c:	f7f0 fb6a 	bl	8005b14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015440:	46c0      	nop			@ (mov r8, r8)
 8015442:	46bd      	mov	sp, r7
 8015444:	bd80      	pop	{r7, pc}
 8015446:	46c0      	nop			@ (mov r8, r8)
 8015448:	20000278 	.word	0x20000278
 801544c:	200030bc 	.word	0x200030bc
 8015450:	20000164 	.word	0x20000164
 8015454:	20000268 	.word	0x20000268

08015458 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015458:	b580      	push	{r7, lr}
 801545a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801545c:	4907      	ldr	r1, [pc, #28]	@ (801547c <CDC_Init_FS+0x24>)
 801545e:	4b08      	ldr	r3, [pc, #32]	@ (8015480 <CDC_Init_FS+0x28>)
 8015460:	2200      	movs	r2, #0
 8015462:	0018      	movs	r0, r3
 8015464:	f7fe fd59 	bl	8013f1a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8015468:	4a06      	ldr	r2, [pc, #24]	@ (8015484 <CDC_Init_FS+0x2c>)
 801546a:	4b05      	ldr	r3, [pc, #20]	@ (8015480 <CDC_Init_FS+0x28>)
 801546c:	0011      	movs	r1, r2
 801546e:	0018      	movs	r0, r3
 8015470:	f7fe fd6f 	bl	8013f52 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015474:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015476:	0018      	movs	r0, r3
 8015478:	46bd      	mov	sp, r7
 801547a:	bd80      	pop	{r7, pc}
 801547c:	20003780 	.word	0x20003780
 8015480:	200030bc 	.word	0x200030bc
 8015484:	20003380 	.word	0x20003380

08015488 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015488:	b580      	push	{r7, lr}
 801548a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801548c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801548e:	0018      	movs	r0, r3
 8015490:	46bd      	mov	sp, r7
 8015492:	bd80      	pop	{r7, pc}

08015494 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015494:	b580      	push	{r7, lr}
 8015496:	b082      	sub	sp, #8
 8015498:	af00      	add	r7, sp, #0
 801549a:	6039      	str	r1, [r7, #0]
 801549c:	0011      	movs	r1, r2
 801549e:	1dfb      	adds	r3, r7, #7
 80154a0:	1c02      	adds	r2, r0, #0
 80154a2:	701a      	strb	r2, [r3, #0]
 80154a4:	1d3b      	adds	r3, r7, #4
 80154a6:	1c0a      	adds	r2, r1, #0
 80154a8:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80154aa:	1dfb      	adds	r3, r7, #7
 80154ac:	781b      	ldrb	r3, [r3, #0]
 80154ae:	2b23      	cmp	r3, #35	@ 0x23
 80154b0:	d804      	bhi.n	80154bc <CDC_Control_FS+0x28>
 80154b2:	009a      	lsls	r2, r3, #2
 80154b4:	4b04      	ldr	r3, [pc, #16]	@ (80154c8 <CDC_Control_FS+0x34>)
 80154b6:	18d3      	adds	r3, r2, r3
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80154bc:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 80154be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80154c0:	0018      	movs	r0, r3
 80154c2:	46bd      	mov	sp, r7
 80154c4:	b002      	add	sp, #8
 80154c6:	bd80      	pop	{r7, pc}
 80154c8:	0801a400 	.word	0x0801a400

080154cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b082      	sub	sp, #8
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
 80154d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80154d6:	687a      	ldr	r2, [r7, #4]
 80154d8:	4b06      	ldr	r3, [pc, #24]	@ (80154f4 <CDC_Receive_FS+0x28>)
 80154da:	0011      	movs	r1, r2
 80154dc:	0018      	movs	r0, r3
 80154de:	f7fe fd38 	bl	8013f52 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80154e2:	4b04      	ldr	r3, [pc, #16]	@ (80154f4 <CDC_Receive_FS+0x28>)
 80154e4:	0018      	movs	r0, r3
 80154e6:	f7fe fd48 	bl	8013f7a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80154ea:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80154ec:	0018      	movs	r0, r3
 80154ee:	46bd      	mov	sp, r7
 80154f0:	b002      	add	sp, #8
 80154f2:	bd80      	pop	{r7, pc}
 80154f4:	200030bc 	.word	0x200030bc

080154f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154f8:	b580      	push	{r7, lr}
 80154fa:	b082      	sub	sp, #8
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	0002      	movs	r2, r0
 8015500:	6039      	str	r1, [r7, #0]
 8015502:	1dfb      	adds	r3, r7, #7
 8015504:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015506:	683b      	ldr	r3, [r7, #0]
 8015508:	2212      	movs	r2, #18
 801550a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801550c:	4b02      	ldr	r3, [pc, #8]	@ (8015518 <USBD_FS_DeviceDescriptor+0x20>)
}
 801550e:	0018      	movs	r0, r3
 8015510:	46bd      	mov	sp, r7
 8015512:	b002      	add	sp, #8
 8015514:	bd80      	pop	{r7, pc}
 8015516:	46c0      	nop			@ (mov r8, r8)
 8015518:	20000294 	.word	0x20000294

0801551c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801551c:	b580      	push	{r7, lr}
 801551e:	b082      	sub	sp, #8
 8015520:	af00      	add	r7, sp, #0
 8015522:	0002      	movs	r2, r0
 8015524:	6039      	str	r1, [r7, #0]
 8015526:	1dfb      	adds	r3, r7, #7
 8015528:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801552a:	683b      	ldr	r3, [r7, #0]
 801552c:	2204      	movs	r2, #4
 801552e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015530:	4b02      	ldr	r3, [pc, #8]	@ (801553c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015532:	0018      	movs	r0, r3
 8015534:	46bd      	mov	sp, r7
 8015536:	b002      	add	sp, #8
 8015538:	bd80      	pop	{r7, pc}
 801553a:	46c0      	nop			@ (mov r8, r8)
 801553c:	200002a8 	.word	0x200002a8

08015540 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015540:	b580      	push	{r7, lr}
 8015542:	b082      	sub	sp, #8
 8015544:	af00      	add	r7, sp, #0
 8015546:	0002      	movs	r2, r0
 8015548:	6039      	str	r1, [r7, #0]
 801554a:	1dfb      	adds	r3, r7, #7
 801554c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801554e:	1dfb      	adds	r3, r7, #7
 8015550:	781b      	ldrb	r3, [r3, #0]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d106      	bne.n	8015564 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015556:	683a      	ldr	r2, [r7, #0]
 8015558:	4908      	ldr	r1, [pc, #32]	@ (801557c <USBD_FS_ProductStrDescriptor+0x3c>)
 801555a:	4b09      	ldr	r3, [pc, #36]	@ (8015580 <USBD_FS_ProductStrDescriptor+0x40>)
 801555c:	0018      	movs	r0, r3
 801555e:	f7ff fe49 	bl	80151f4 <USBD_GetString>
 8015562:	e005      	b.n	8015570 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015564:	683a      	ldr	r2, [r7, #0]
 8015566:	4905      	ldr	r1, [pc, #20]	@ (801557c <USBD_FS_ProductStrDescriptor+0x3c>)
 8015568:	4b05      	ldr	r3, [pc, #20]	@ (8015580 <USBD_FS_ProductStrDescriptor+0x40>)
 801556a:	0018      	movs	r0, r3
 801556c:	f7ff fe42 	bl	80151f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015570:	4b02      	ldr	r3, [pc, #8]	@ (801557c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8015572:	0018      	movs	r0, r3
 8015574:	46bd      	mov	sp, r7
 8015576:	b002      	add	sp, #8
 8015578:	bd80      	pop	{r7, pc}
 801557a:	46c0      	nop			@ (mov r8, r8)
 801557c:	20003b80 	.word	0x20003b80
 8015580:	0801a190 	.word	0x0801a190

08015584 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015584:	b580      	push	{r7, lr}
 8015586:	b082      	sub	sp, #8
 8015588:	af00      	add	r7, sp, #0
 801558a:	0002      	movs	r2, r0
 801558c:	6039      	str	r1, [r7, #0]
 801558e:	1dfb      	adds	r3, r7, #7
 8015590:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015592:	683a      	ldr	r2, [r7, #0]
 8015594:	4904      	ldr	r1, [pc, #16]	@ (80155a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015596:	4b05      	ldr	r3, [pc, #20]	@ (80155ac <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8015598:	0018      	movs	r0, r3
 801559a:	f7ff fe2b 	bl	80151f4 <USBD_GetString>
  return USBD_StrDesc;
 801559e:	4b02      	ldr	r3, [pc, #8]	@ (80155a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80155a0:	0018      	movs	r0, r3
 80155a2:	46bd      	mov	sp, r7
 80155a4:	b002      	add	sp, #8
 80155a6:	bd80      	pop	{r7, pc}
 80155a8:	20003b80 	.word	0x20003b80
 80155ac:	0801a1a8 	.word	0x0801a1a8

080155b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b082      	sub	sp, #8
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	0002      	movs	r2, r0
 80155b8:	6039      	str	r1, [r7, #0]
 80155ba:	1dfb      	adds	r3, r7, #7
 80155bc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80155be:	683b      	ldr	r3, [r7, #0]
 80155c0:	221a      	movs	r2, #26
 80155c2:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80155c4:	f000 f84c 	bl	8015660 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80155c8:	4b02      	ldr	r3, [pc, #8]	@ (80155d4 <USBD_FS_SerialStrDescriptor+0x24>)
}
 80155ca:	0018      	movs	r0, r3
 80155cc:	46bd      	mov	sp, r7
 80155ce:	b002      	add	sp, #8
 80155d0:	bd80      	pop	{r7, pc}
 80155d2:	46c0      	nop			@ (mov r8, r8)
 80155d4:	200002ac 	.word	0x200002ac

080155d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80155d8:	b580      	push	{r7, lr}
 80155da:	b082      	sub	sp, #8
 80155dc:	af00      	add	r7, sp, #0
 80155de:	0002      	movs	r2, r0
 80155e0:	6039      	str	r1, [r7, #0]
 80155e2:	1dfb      	adds	r3, r7, #7
 80155e4:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80155e6:	1dfb      	adds	r3, r7, #7
 80155e8:	781b      	ldrb	r3, [r3, #0]
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d106      	bne.n	80155fc <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80155ee:	683a      	ldr	r2, [r7, #0]
 80155f0:	4908      	ldr	r1, [pc, #32]	@ (8015614 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80155f2:	4b09      	ldr	r3, [pc, #36]	@ (8015618 <USBD_FS_ConfigStrDescriptor+0x40>)
 80155f4:	0018      	movs	r0, r3
 80155f6:	f7ff fdfd 	bl	80151f4 <USBD_GetString>
 80155fa:	e005      	b.n	8015608 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80155fc:	683a      	ldr	r2, [r7, #0]
 80155fe:	4905      	ldr	r1, [pc, #20]	@ (8015614 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8015600:	4b05      	ldr	r3, [pc, #20]	@ (8015618 <USBD_FS_ConfigStrDescriptor+0x40>)
 8015602:	0018      	movs	r0, r3
 8015604:	f7ff fdf6 	bl	80151f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015608:	4b02      	ldr	r3, [pc, #8]	@ (8015614 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801560a:	0018      	movs	r0, r3
 801560c:	46bd      	mov	sp, r7
 801560e:	b002      	add	sp, #8
 8015610:	bd80      	pop	{r7, pc}
 8015612:	46c0      	nop			@ (mov r8, r8)
 8015614:	20003b80 	.word	0x20003b80
 8015618:	0801a1bc 	.word	0x0801a1bc

0801561c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801561c:	b580      	push	{r7, lr}
 801561e:	b082      	sub	sp, #8
 8015620:	af00      	add	r7, sp, #0
 8015622:	0002      	movs	r2, r0
 8015624:	6039      	str	r1, [r7, #0]
 8015626:	1dfb      	adds	r3, r7, #7
 8015628:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801562a:	1dfb      	adds	r3, r7, #7
 801562c:	781b      	ldrb	r3, [r3, #0]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d106      	bne.n	8015640 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015632:	683a      	ldr	r2, [r7, #0]
 8015634:	4908      	ldr	r1, [pc, #32]	@ (8015658 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8015636:	4b09      	ldr	r3, [pc, #36]	@ (801565c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8015638:	0018      	movs	r0, r3
 801563a:	f7ff fddb 	bl	80151f4 <USBD_GetString>
 801563e:	e005      	b.n	801564c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015640:	683a      	ldr	r2, [r7, #0]
 8015642:	4905      	ldr	r1, [pc, #20]	@ (8015658 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8015644:	4b05      	ldr	r3, [pc, #20]	@ (801565c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8015646:	0018      	movs	r0, r3
 8015648:	f7ff fdd4 	bl	80151f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801564c:	4b02      	ldr	r3, [pc, #8]	@ (8015658 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801564e:	0018      	movs	r0, r3
 8015650:	46bd      	mov	sp, r7
 8015652:	b002      	add	sp, #8
 8015654:	bd80      	pop	{r7, pc}
 8015656:	46c0      	nop			@ (mov r8, r8)
 8015658:	20003b80 	.word	0x20003b80
 801565c:	0801a1c8 	.word	0x0801a1c8

08015660 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015660:	b580      	push	{r7, lr}
 8015662:	b084      	sub	sp, #16
 8015664:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015666:	4b10      	ldr	r3, [pc, #64]	@ (80156a8 <Get_SerialNum+0x48>)
 8015668:	681b      	ldr	r3, [r3, #0]
 801566a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801566c:	4b0f      	ldr	r3, [pc, #60]	@ (80156ac <Get_SerialNum+0x4c>)
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015672:	4b0f      	ldr	r3, [pc, #60]	@ (80156b0 <Get_SerialNum+0x50>)
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015678:	68fa      	ldr	r2, [r7, #12]
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	18d3      	adds	r3, r2, r3
 801567e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d00b      	beq.n	801569e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015686:	490b      	ldr	r1, [pc, #44]	@ (80156b4 <Get_SerialNum+0x54>)
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	2208      	movs	r2, #8
 801568c:	0018      	movs	r0, r3
 801568e:	f000 f815 	bl	80156bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015692:	4909      	ldr	r1, [pc, #36]	@ (80156b8 <Get_SerialNum+0x58>)
 8015694:	68bb      	ldr	r3, [r7, #8]
 8015696:	2204      	movs	r2, #4
 8015698:	0018      	movs	r0, r3
 801569a:	f000 f80f 	bl	80156bc <IntToUnicode>
  }
}
 801569e:	46c0      	nop			@ (mov r8, r8)
 80156a0:	46bd      	mov	sp, r7
 80156a2:	b004      	add	sp, #16
 80156a4:	bd80      	pop	{r7, pc}
 80156a6:	46c0      	nop			@ (mov r8, r8)
 80156a8:	1ff80050 	.word	0x1ff80050
 80156ac:	1ff80054 	.word	0x1ff80054
 80156b0:	1ff80058 	.word	0x1ff80058
 80156b4:	200002ae 	.word	0x200002ae
 80156b8:	200002be 	.word	0x200002be

080156bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b086      	sub	sp, #24
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	60f8      	str	r0, [r7, #12]
 80156c4:	60b9      	str	r1, [r7, #8]
 80156c6:	1dfb      	adds	r3, r7, #7
 80156c8:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80156ca:	2117      	movs	r1, #23
 80156cc:	187b      	adds	r3, r7, r1
 80156ce:	2200      	movs	r2, #0
 80156d0:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80156d2:	187b      	adds	r3, r7, r1
 80156d4:	2200      	movs	r2, #0
 80156d6:	701a      	strb	r2, [r3, #0]
 80156d8:	e02f      	b.n	801573a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	0f1b      	lsrs	r3, r3, #28
 80156de:	2b09      	cmp	r3, #9
 80156e0:	d80d      	bhi.n	80156fe <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	0f1b      	lsrs	r3, r3, #28
 80156e6:	b2da      	uxtb	r2, r3
 80156e8:	2317      	movs	r3, #23
 80156ea:	18fb      	adds	r3, r7, r3
 80156ec:	781b      	ldrb	r3, [r3, #0]
 80156ee:	005b      	lsls	r3, r3, #1
 80156f0:	0019      	movs	r1, r3
 80156f2:	68bb      	ldr	r3, [r7, #8]
 80156f4:	185b      	adds	r3, r3, r1
 80156f6:	3230      	adds	r2, #48	@ 0x30
 80156f8:	b2d2      	uxtb	r2, r2
 80156fa:	701a      	strb	r2, [r3, #0]
 80156fc:	e00c      	b.n	8015718 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	0f1b      	lsrs	r3, r3, #28
 8015702:	b2da      	uxtb	r2, r3
 8015704:	2317      	movs	r3, #23
 8015706:	18fb      	adds	r3, r7, r3
 8015708:	781b      	ldrb	r3, [r3, #0]
 801570a:	005b      	lsls	r3, r3, #1
 801570c:	0019      	movs	r1, r3
 801570e:	68bb      	ldr	r3, [r7, #8]
 8015710:	185b      	adds	r3, r3, r1
 8015712:	3237      	adds	r2, #55	@ 0x37
 8015714:	b2d2      	uxtb	r2, r2
 8015716:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	011b      	lsls	r3, r3, #4
 801571c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801571e:	2117      	movs	r1, #23
 8015720:	187b      	adds	r3, r7, r1
 8015722:	781b      	ldrb	r3, [r3, #0]
 8015724:	005b      	lsls	r3, r3, #1
 8015726:	3301      	adds	r3, #1
 8015728:	68ba      	ldr	r2, [r7, #8]
 801572a:	18d3      	adds	r3, r2, r3
 801572c:	2200      	movs	r2, #0
 801572e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015730:	187b      	adds	r3, r7, r1
 8015732:	781a      	ldrb	r2, [r3, #0]
 8015734:	187b      	adds	r3, r7, r1
 8015736:	3201      	adds	r2, #1
 8015738:	701a      	strb	r2, [r3, #0]
 801573a:	2317      	movs	r3, #23
 801573c:	18fa      	adds	r2, r7, r3
 801573e:	1dfb      	adds	r3, r7, #7
 8015740:	7812      	ldrb	r2, [r2, #0]
 8015742:	781b      	ldrb	r3, [r3, #0]
 8015744:	429a      	cmp	r2, r3
 8015746:	d3c8      	bcc.n	80156da <IntToUnicode+0x1e>
  }
}
 8015748:	46c0      	nop			@ (mov r8, r8)
 801574a:	46c0      	nop			@ (mov r8, r8)
 801574c:	46bd      	mov	sp, r7
 801574e:	b006      	add	sp, #24
 8015750:	bd80      	pop	{r7, pc}
	...

08015754 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015754:	b580      	push	{r7, lr}
 8015756:	b082      	sub	sp, #8
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	681b      	ldr	r3, [r3, #0]
 8015760:	4a0a      	ldr	r2, [pc, #40]	@ (801578c <HAL_PCD_MspInit+0x38>)
 8015762:	4293      	cmp	r3, r2
 8015764:	d10e      	bne.n	8015784 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8015766:	4b0a      	ldr	r3, [pc, #40]	@ (8015790 <HAL_PCD_MspInit+0x3c>)
 8015768:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801576a:	4b09      	ldr	r3, [pc, #36]	@ (8015790 <HAL_PCD_MspInit+0x3c>)
 801576c:	2180      	movs	r1, #128	@ 0x80
 801576e:	0409      	lsls	r1, r1, #16
 8015770:	430a      	orrs	r2, r1
 8015772:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8015774:	2200      	movs	r2, #0
 8015776:	2100      	movs	r1, #0
 8015778:	201f      	movs	r0, #31
 801577a:	f7f4 f9c9 	bl	8009b10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801577e:	201f      	movs	r0, #31
 8015780:	f7f4 f9db 	bl	8009b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8015784:	46c0      	nop			@ (mov r8, r8)
 8015786:	46bd      	mov	sp, r7
 8015788:	b002      	add	sp, #8
 801578a:	bd80      	pop	{r7, pc}
 801578c:	40005c00 	.word	0x40005c00
 8015790:	40021000 	.word	0x40021000

08015794 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015794:	b580      	push	{r7, lr}
 8015796:	b082      	sub	sp, #8
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801579c:	687a      	ldr	r2, [r7, #4]
 801579e:	23bc      	movs	r3, #188	@ 0xbc
 80157a0:	009b      	lsls	r3, r3, #2
 80157a2:	58d2      	ldr	r2, [r2, r3]
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	21ac      	movs	r1, #172	@ 0xac
 80157a8:	0089      	lsls	r1, r1, #2
 80157aa:	468c      	mov	ip, r1
 80157ac:	4463      	add	r3, ip
 80157ae:	0019      	movs	r1, r3
 80157b0:	0010      	movs	r0, r2
 80157b2:	f7fe fcb5 	bl	8014120 <USBD_LL_SetupStage>
}
 80157b6:	46c0      	nop			@ (mov r8, r8)
 80157b8:	46bd      	mov	sp, r7
 80157ba:	b002      	add	sp, #8
 80157bc:	bd80      	pop	{r7, pc}

080157be <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157be:	b590      	push	{r4, r7, lr}
 80157c0:	b083      	sub	sp, #12
 80157c2:	af00      	add	r7, sp, #0
 80157c4:	6078      	str	r0, [r7, #4]
 80157c6:	000a      	movs	r2, r1
 80157c8:	1cfb      	adds	r3, r7, #3
 80157ca:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80157cc:	687a      	ldr	r2, [r7, #4]
 80157ce:	23bc      	movs	r3, #188	@ 0xbc
 80157d0:	009b      	lsls	r3, r3, #2
 80157d2:	58d4      	ldr	r4, [r2, r3]
 80157d4:	1cfb      	adds	r3, r7, #3
 80157d6:	781a      	ldrb	r2, [r3, #0]
 80157d8:	6878      	ldr	r0, [r7, #4]
 80157da:	23be      	movs	r3, #190	@ 0xbe
 80157dc:	0059      	lsls	r1, r3, #1
 80157de:	0013      	movs	r3, r2
 80157e0:	009b      	lsls	r3, r3, #2
 80157e2:	189b      	adds	r3, r3, r2
 80157e4:	00db      	lsls	r3, r3, #3
 80157e6:	18c3      	adds	r3, r0, r3
 80157e8:	185b      	adds	r3, r3, r1
 80157ea:	681a      	ldr	r2, [r3, #0]
 80157ec:	1cfb      	adds	r3, r7, #3
 80157ee:	781b      	ldrb	r3, [r3, #0]
 80157f0:	0019      	movs	r1, r3
 80157f2:	0020      	movs	r0, r4
 80157f4:	f7fe fcf2 	bl	80141dc <USBD_LL_DataOutStage>
}
 80157f8:	46c0      	nop			@ (mov r8, r8)
 80157fa:	46bd      	mov	sp, r7
 80157fc:	b003      	add	sp, #12
 80157fe:	bd90      	pop	{r4, r7, pc}

08015800 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015800:	b580      	push	{r7, lr}
 8015802:	b082      	sub	sp, #8
 8015804:	af00      	add	r7, sp, #0
 8015806:	6078      	str	r0, [r7, #4]
 8015808:	000a      	movs	r2, r1
 801580a:	1cfb      	adds	r3, r7, #3
 801580c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801580e:	687a      	ldr	r2, [r7, #4]
 8015810:	23bc      	movs	r3, #188	@ 0xbc
 8015812:	009b      	lsls	r3, r3, #2
 8015814:	58d0      	ldr	r0, [r2, r3]
 8015816:	1cfb      	adds	r3, r7, #3
 8015818:	781a      	ldrb	r2, [r3, #0]
 801581a:	6879      	ldr	r1, [r7, #4]
 801581c:	0013      	movs	r3, r2
 801581e:	009b      	lsls	r3, r3, #2
 8015820:	189b      	adds	r3, r3, r2
 8015822:	00db      	lsls	r3, r3, #3
 8015824:	18cb      	adds	r3, r1, r3
 8015826:	333c      	adds	r3, #60	@ 0x3c
 8015828:	681a      	ldr	r2, [r3, #0]
 801582a:	1cfb      	adds	r3, r7, #3
 801582c:	781b      	ldrb	r3, [r3, #0]
 801582e:	0019      	movs	r1, r3
 8015830:	f7fe fd56 	bl	80142e0 <USBD_LL_DataInStage>
}
 8015834:	46c0      	nop			@ (mov r8, r8)
 8015836:	46bd      	mov	sp, r7
 8015838:	b002      	add	sp, #8
 801583a:	bd80      	pop	{r7, pc}

0801583c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801583c:	b580      	push	{r7, lr}
 801583e:	b082      	sub	sp, #8
 8015840:	af00      	add	r7, sp, #0
 8015842:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015844:	687a      	ldr	r2, [r7, #4]
 8015846:	23bc      	movs	r3, #188	@ 0xbc
 8015848:	009b      	lsls	r3, r3, #2
 801584a:	58d3      	ldr	r3, [r2, r3]
 801584c:	0018      	movs	r0, r3
 801584e:	f7fe fe8d 	bl	801456c <USBD_LL_SOF>
}
 8015852:	46c0      	nop			@ (mov r8, r8)
 8015854:	46bd      	mov	sp, r7
 8015856:	b002      	add	sp, #8
 8015858:	bd80      	pop	{r7, pc}

0801585a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801585a:	b580      	push	{r7, lr}
 801585c:	b084      	sub	sp, #16
 801585e:	af00      	add	r7, sp, #0
 8015860:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015862:	230f      	movs	r3, #15
 8015864:	18fb      	adds	r3, r7, r3
 8015866:	2201      	movs	r2, #1
 8015868:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	689b      	ldr	r3, [r3, #8]
 801586e:	2b02      	cmp	r3, #2
 8015870:	d001      	beq.n	8015876 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8015872:	f7f0 f94f 	bl	8005b14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015876:	687a      	ldr	r2, [r7, #4]
 8015878:	23bc      	movs	r3, #188	@ 0xbc
 801587a:	009b      	lsls	r3, r3, #2
 801587c:	58d2      	ldr	r2, [r2, r3]
 801587e:	230f      	movs	r3, #15
 8015880:	18fb      	adds	r3, r7, r3
 8015882:	781b      	ldrb	r3, [r3, #0]
 8015884:	0019      	movs	r1, r3
 8015886:	0010      	movs	r0, r2
 8015888:	f7fe fe2f 	bl	80144ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801588c:	687a      	ldr	r2, [r7, #4]
 801588e:	23bc      	movs	r3, #188	@ 0xbc
 8015890:	009b      	lsls	r3, r3, #2
 8015892:	58d3      	ldr	r3, [r2, r3]
 8015894:	0018      	movs	r0, r3
 8015896:	f7fe fde0 	bl	801445a <USBD_LL_Reset>
}
 801589a:	46c0      	nop			@ (mov r8, r8)
 801589c:	46bd      	mov	sp, r7
 801589e:	b004      	add	sp, #16
 80158a0:	bd80      	pop	{r7, pc}
	...

080158a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b082      	sub	sp, #8
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80158ac:	687a      	ldr	r2, [r7, #4]
 80158ae:	23bc      	movs	r3, #188	@ 0xbc
 80158b0:	009b      	lsls	r3, r3, #2
 80158b2:	58d3      	ldr	r3, [r2, r3]
 80158b4:	0018      	movs	r0, r3
 80158b6:	f7fe fe29 	bl	801450c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	699b      	ldr	r3, [r3, #24]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d005      	beq.n	80158ce <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80158c2:	4b05      	ldr	r3, [pc, #20]	@ (80158d8 <HAL_PCD_SuspendCallback+0x34>)
 80158c4:	691a      	ldr	r2, [r3, #16]
 80158c6:	4b04      	ldr	r3, [pc, #16]	@ (80158d8 <HAL_PCD_SuspendCallback+0x34>)
 80158c8:	2106      	movs	r1, #6
 80158ca:	430a      	orrs	r2, r1
 80158cc:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80158ce:	46c0      	nop			@ (mov r8, r8)
 80158d0:	46bd      	mov	sp, r7
 80158d2:	b002      	add	sp, #8
 80158d4:	bd80      	pop	{r7, pc}
 80158d6:	46c0      	nop			@ (mov r8, r8)
 80158d8:	e000ed00 	.word	0xe000ed00

080158dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80158dc:	b580      	push	{r7, lr}
 80158de:	b082      	sub	sp, #8
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	699b      	ldr	r3, [r3, #24]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d007      	beq.n	80158fc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80158ec:	4b09      	ldr	r3, [pc, #36]	@ (8015914 <HAL_PCD_ResumeCallback+0x38>)
 80158ee:	691a      	ldr	r2, [r3, #16]
 80158f0:	4b08      	ldr	r3, [pc, #32]	@ (8015914 <HAL_PCD_ResumeCallback+0x38>)
 80158f2:	2106      	movs	r1, #6
 80158f4:	438a      	bics	r2, r1
 80158f6:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80158f8:	f000 fa44 	bl	8015d84 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80158fc:	687a      	ldr	r2, [r7, #4]
 80158fe:	23bc      	movs	r3, #188	@ 0xbc
 8015900:	009b      	lsls	r3, r3, #2
 8015902:	58d3      	ldr	r3, [r2, r3]
 8015904:	0018      	movs	r0, r3
 8015906:	f7fe fe19 	bl	801453c <USBD_LL_Resume>
}
 801590a:	46c0      	nop			@ (mov r8, r8)
 801590c:	46bd      	mov	sp, r7
 801590e:	b002      	add	sp, #8
 8015910:	bd80      	pop	{r7, pc}
 8015912:	46c0      	nop			@ (mov r8, r8)
 8015914:	e000ed00 	.word	0xe000ed00

08015918 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015918:	b580      	push	{r7, lr}
 801591a:	b082      	sub	sp, #8
 801591c:	af00      	add	r7, sp, #0
 801591e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8015920:	4a2d      	ldr	r2, [pc, #180]	@ (80159d8 <USBD_LL_Init+0xc0>)
 8015922:	23bc      	movs	r3, #188	@ 0xbc
 8015924:	009b      	lsls	r3, r3, #2
 8015926:	6879      	ldr	r1, [r7, #4]
 8015928:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801592a:	687a      	ldr	r2, [r7, #4]
 801592c:	23b0      	movs	r3, #176	@ 0xb0
 801592e:	009b      	lsls	r3, r3, #2
 8015930:	4929      	ldr	r1, [pc, #164]	@ (80159d8 <USBD_LL_Init+0xc0>)
 8015932:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8015934:	4b28      	ldr	r3, [pc, #160]	@ (80159d8 <USBD_LL_Init+0xc0>)
 8015936:	4a29      	ldr	r2, [pc, #164]	@ (80159dc <USBD_LL_Init+0xc4>)
 8015938:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801593a:	4b27      	ldr	r3, [pc, #156]	@ (80159d8 <USBD_LL_Init+0xc0>)
 801593c:	2208      	movs	r2, #8
 801593e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8015940:	4b25      	ldr	r3, [pc, #148]	@ (80159d8 <USBD_LL_Init+0xc0>)
 8015942:	2202      	movs	r2, #2
 8015944:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015946:	4b24      	ldr	r3, [pc, #144]	@ (80159d8 <USBD_LL_Init+0xc0>)
 8015948:	2202      	movs	r2, #2
 801594a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801594c:	4b22      	ldr	r3, [pc, #136]	@ (80159d8 <USBD_LL_Init+0xc0>)
 801594e:	2200      	movs	r2, #0
 8015950:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8015952:	4b21      	ldr	r3, [pc, #132]	@ (80159d8 <USBD_LL_Init+0xc0>)
 8015954:	2200      	movs	r2, #0
 8015956:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8015958:	4b1f      	ldr	r3, [pc, #124]	@ (80159d8 <USBD_LL_Init+0xc0>)
 801595a:	2200      	movs	r2, #0
 801595c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801595e:	4b1e      	ldr	r3, [pc, #120]	@ (80159d8 <USBD_LL_Init+0xc0>)
 8015960:	0018      	movs	r0, r3
 8015962:	f7f7 f98f 	bl	800cc84 <HAL_PCD_Init>
 8015966:	1e03      	subs	r3, r0, #0
 8015968:	d001      	beq.n	801596e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801596a:	f7f0 f8d3 	bl	8005b14 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801596e:	687a      	ldr	r2, [r7, #4]
 8015970:	23b0      	movs	r3, #176	@ 0xb0
 8015972:	009b      	lsls	r3, r3, #2
 8015974:	58d0      	ldr	r0, [r2, r3]
 8015976:	2318      	movs	r3, #24
 8015978:	2200      	movs	r2, #0
 801597a:	2100      	movs	r1, #0
 801597c:	f7f8 ff50 	bl	800e820 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8015980:	687a      	ldr	r2, [r7, #4]
 8015982:	23b0      	movs	r3, #176	@ 0xb0
 8015984:	009b      	lsls	r3, r3, #2
 8015986:	58d0      	ldr	r0, [r2, r3]
 8015988:	2358      	movs	r3, #88	@ 0x58
 801598a:	2200      	movs	r2, #0
 801598c:	2180      	movs	r1, #128	@ 0x80
 801598e:	f7f8 ff47 	bl	800e820 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8015992:	687a      	ldr	r2, [r7, #4]
 8015994:	23b0      	movs	r3, #176	@ 0xb0
 8015996:	009b      	lsls	r3, r3, #2
 8015998:	58d0      	ldr	r0, [r2, r3]
 801599a:	23c0      	movs	r3, #192	@ 0xc0
 801599c:	2200      	movs	r2, #0
 801599e:	2181      	movs	r1, #129	@ 0x81
 80159a0:	f7f8 ff3e 	bl	800e820 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80159a4:	687a      	ldr	r2, [r7, #4]
 80159a6:	23b0      	movs	r3, #176	@ 0xb0
 80159a8:	009b      	lsls	r3, r3, #2
 80159aa:	58d0      	ldr	r0, [r2, r3]
 80159ac:	2388      	movs	r3, #136	@ 0x88
 80159ae:	005b      	lsls	r3, r3, #1
 80159b0:	2200      	movs	r2, #0
 80159b2:	2101      	movs	r1, #1
 80159b4:	f7f8 ff34 	bl	800e820 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80159b8:	687a      	ldr	r2, [r7, #4]
 80159ba:	23b0      	movs	r3, #176	@ 0xb0
 80159bc:	009b      	lsls	r3, r3, #2
 80159be:	58d0      	ldr	r0, [r2, r3]
 80159c0:	2380      	movs	r3, #128	@ 0x80
 80159c2:	005b      	lsls	r3, r3, #1
 80159c4:	2200      	movs	r2, #0
 80159c6:	2182      	movs	r1, #130	@ 0x82
 80159c8:	f7f8 ff2a 	bl	800e820 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80159cc:	2300      	movs	r3, #0
}
 80159ce:	0018      	movs	r0, r3
 80159d0:	46bd      	mov	sp, r7
 80159d2:	b002      	add	sp, #8
 80159d4:	bd80      	pop	{r7, pc}
 80159d6:	46c0      	nop			@ (mov r8, r8)
 80159d8:	20003d80 	.word	0x20003d80
 80159dc:	40005c00 	.word	0x40005c00

080159e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80159e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159e2:	b085      	sub	sp, #20
 80159e4:	af00      	add	r7, sp, #0
 80159e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159e8:	210f      	movs	r1, #15
 80159ea:	187b      	adds	r3, r7, r1
 80159ec:	2200      	movs	r2, #0
 80159ee:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159f0:	260e      	movs	r6, #14
 80159f2:	19bb      	adds	r3, r7, r6
 80159f4:	2200      	movs	r2, #0
 80159f6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80159f8:	687a      	ldr	r2, [r7, #4]
 80159fa:	23b0      	movs	r3, #176	@ 0xb0
 80159fc:	009b      	lsls	r3, r3, #2
 80159fe:	58d3      	ldr	r3, [r2, r3]
 8015a00:	000d      	movs	r5, r1
 8015a02:	187c      	adds	r4, r7, r1
 8015a04:	0018      	movs	r0, r3
 8015a06:	f7f7 fa3d 	bl	800ce84 <HAL_PCD_Start>
 8015a0a:	0003      	movs	r3, r0
 8015a0c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a0e:	19bc      	adds	r4, r7, r6
 8015a10:	197b      	adds	r3, r7, r5
 8015a12:	781b      	ldrb	r3, [r3, #0]
 8015a14:	0018      	movs	r0, r3
 8015a16:	f000 f9bc 	bl	8015d92 <USBD_Get_USB_Status>
 8015a1a:	0003      	movs	r3, r0
 8015a1c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015a1e:	19bb      	adds	r3, r7, r6
 8015a20:	781b      	ldrb	r3, [r3, #0]
}
 8015a22:	0018      	movs	r0, r3
 8015a24:	46bd      	mov	sp, r7
 8015a26:	b005      	add	sp, #20
 8015a28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015a2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015a2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a2c:	b085      	sub	sp, #20
 8015a2e:	af00      	add	r7, sp, #0
 8015a30:	6078      	str	r0, [r7, #4]
 8015a32:	000c      	movs	r4, r1
 8015a34:	0010      	movs	r0, r2
 8015a36:	0019      	movs	r1, r3
 8015a38:	1cfb      	adds	r3, r7, #3
 8015a3a:	1c22      	adds	r2, r4, #0
 8015a3c:	701a      	strb	r2, [r3, #0]
 8015a3e:	1cbb      	adds	r3, r7, #2
 8015a40:	1c02      	adds	r2, r0, #0
 8015a42:	701a      	strb	r2, [r3, #0]
 8015a44:	003b      	movs	r3, r7
 8015a46:	1c0a      	adds	r2, r1, #0
 8015a48:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a4a:	260f      	movs	r6, #15
 8015a4c:	19bb      	adds	r3, r7, r6
 8015a4e:	2200      	movs	r2, #0
 8015a50:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a52:	250e      	movs	r5, #14
 8015a54:	197b      	adds	r3, r7, r5
 8015a56:	2200      	movs	r2, #0
 8015a58:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015a5a:	687a      	ldr	r2, [r7, #4]
 8015a5c:	23b0      	movs	r3, #176	@ 0xb0
 8015a5e:	009b      	lsls	r3, r3, #2
 8015a60:	58d0      	ldr	r0, [r2, r3]
 8015a62:	19bc      	adds	r4, r7, r6
 8015a64:	1cbb      	adds	r3, r7, #2
 8015a66:	781d      	ldrb	r5, [r3, #0]
 8015a68:	003b      	movs	r3, r7
 8015a6a:	881a      	ldrh	r2, [r3, #0]
 8015a6c:	1cfb      	adds	r3, r7, #3
 8015a6e:	7819      	ldrb	r1, [r3, #0]
 8015a70:	002b      	movs	r3, r5
 8015a72:	f7f7 fb9c 	bl	800d1ae <HAL_PCD_EP_Open>
 8015a76:	0003      	movs	r3, r0
 8015a78:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a7a:	250e      	movs	r5, #14
 8015a7c:	197c      	adds	r4, r7, r5
 8015a7e:	19bb      	adds	r3, r7, r6
 8015a80:	781b      	ldrb	r3, [r3, #0]
 8015a82:	0018      	movs	r0, r3
 8015a84:	f000 f985 	bl	8015d92 <USBD_Get_USB_Status>
 8015a88:	0003      	movs	r3, r0
 8015a8a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015a8c:	197b      	adds	r3, r7, r5
 8015a8e:	781b      	ldrb	r3, [r3, #0]
}
 8015a90:	0018      	movs	r0, r3
 8015a92:	46bd      	mov	sp, r7
 8015a94:	b005      	add	sp, #20
 8015a96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015a98 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a9a:	b085      	sub	sp, #20
 8015a9c:	af00      	add	r7, sp, #0
 8015a9e:	6078      	str	r0, [r7, #4]
 8015aa0:	000a      	movs	r2, r1
 8015aa2:	1cfb      	adds	r3, r7, #3
 8015aa4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015aa6:	210f      	movs	r1, #15
 8015aa8:	187b      	adds	r3, r7, r1
 8015aaa:	2200      	movs	r2, #0
 8015aac:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015aae:	260e      	movs	r6, #14
 8015ab0:	19bb      	adds	r3, r7, r6
 8015ab2:	2200      	movs	r2, #0
 8015ab4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015ab6:	687a      	ldr	r2, [r7, #4]
 8015ab8:	23b0      	movs	r3, #176	@ 0xb0
 8015aba:	009b      	lsls	r3, r3, #2
 8015abc:	58d2      	ldr	r2, [r2, r3]
 8015abe:	000d      	movs	r5, r1
 8015ac0:	187c      	adds	r4, r7, r1
 8015ac2:	1cfb      	adds	r3, r7, #3
 8015ac4:	781b      	ldrb	r3, [r3, #0]
 8015ac6:	0019      	movs	r1, r3
 8015ac8:	0010      	movs	r0, r2
 8015aca:	f7f7 fbdf 	bl	800d28c <HAL_PCD_EP_Close>
 8015ace:	0003      	movs	r3, r0
 8015ad0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ad2:	19bc      	adds	r4, r7, r6
 8015ad4:	197b      	adds	r3, r7, r5
 8015ad6:	781b      	ldrb	r3, [r3, #0]
 8015ad8:	0018      	movs	r0, r3
 8015ada:	f000 f95a 	bl	8015d92 <USBD_Get_USB_Status>
 8015ade:	0003      	movs	r3, r0
 8015ae0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015ae2:	19bb      	adds	r3, r7, r6
 8015ae4:	781b      	ldrb	r3, [r3, #0]
}
 8015ae6:	0018      	movs	r0, r3
 8015ae8:	46bd      	mov	sp, r7
 8015aea:	b005      	add	sp, #20
 8015aec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015aee <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015aee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015af0:	b085      	sub	sp, #20
 8015af2:	af00      	add	r7, sp, #0
 8015af4:	6078      	str	r0, [r7, #4]
 8015af6:	000a      	movs	r2, r1
 8015af8:	1cfb      	adds	r3, r7, #3
 8015afa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015afc:	210f      	movs	r1, #15
 8015afe:	187b      	adds	r3, r7, r1
 8015b00:	2200      	movs	r2, #0
 8015b02:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b04:	260e      	movs	r6, #14
 8015b06:	19bb      	adds	r3, r7, r6
 8015b08:	2200      	movs	r2, #0
 8015b0a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015b0c:	687a      	ldr	r2, [r7, #4]
 8015b0e:	23b0      	movs	r3, #176	@ 0xb0
 8015b10:	009b      	lsls	r3, r3, #2
 8015b12:	58d2      	ldr	r2, [r2, r3]
 8015b14:	000d      	movs	r5, r1
 8015b16:	187c      	adds	r4, r7, r1
 8015b18:	1cfb      	adds	r3, r7, #3
 8015b1a:	781b      	ldrb	r3, [r3, #0]
 8015b1c:	0019      	movs	r1, r3
 8015b1e:	0010      	movs	r0, r2
 8015b20:	f7f7 fc91 	bl	800d446 <HAL_PCD_EP_SetStall>
 8015b24:	0003      	movs	r3, r0
 8015b26:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b28:	19bc      	adds	r4, r7, r6
 8015b2a:	197b      	adds	r3, r7, r5
 8015b2c:	781b      	ldrb	r3, [r3, #0]
 8015b2e:	0018      	movs	r0, r3
 8015b30:	f000 f92f 	bl	8015d92 <USBD_Get_USB_Status>
 8015b34:	0003      	movs	r3, r0
 8015b36:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015b38:	19bb      	adds	r3, r7, r6
 8015b3a:	781b      	ldrb	r3, [r3, #0]
}
 8015b3c:	0018      	movs	r0, r3
 8015b3e:	46bd      	mov	sp, r7
 8015b40:	b005      	add	sp, #20
 8015b42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015b44 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b46:	b085      	sub	sp, #20
 8015b48:	af00      	add	r7, sp, #0
 8015b4a:	6078      	str	r0, [r7, #4]
 8015b4c:	000a      	movs	r2, r1
 8015b4e:	1cfb      	adds	r3, r7, #3
 8015b50:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b52:	210f      	movs	r1, #15
 8015b54:	187b      	adds	r3, r7, r1
 8015b56:	2200      	movs	r2, #0
 8015b58:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b5a:	260e      	movs	r6, #14
 8015b5c:	19bb      	adds	r3, r7, r6
 8015b5e:	2200      	movs	r2, #0
 8015b60:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015b62:	687a      	ldr	r2, [r7, #4]
 8015b64:	23b0      	movs	r3, #176	@ 0xb0
 8015b66:	009b      	lsls	r3, r3, #2
 8015b68:	58d2      	ldr	r2, [r2, r3]
 8015b6a:	000d      	movs	r5, r1
 8015b6c:	187c      	adds	r4, r7, r1
 8015b6e:	1cfb      	adds	r3, r7, #3
 8015b70:	781b      	ldrb	r3, [r3, #0]
 8015b72:	0019      	movs	r1, r3
 8015b74:	0010      	movs	r0, r2
 8015b76:	f7f7 fcc2 	bl	800d4fe <HAL_PCD_EP_ClrStall>
 8015b7a:	0003      	movs	r3, r0
 8015b7c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b7e:	19bc      	adds	r4, r7, r6
 8015b80:	197b      	adds	r3, r7, r5
 8015b82:	781b      	ldrb	r3, [r3, #0]
 8015b84:	0018      	movs	r0, r3
 8015b86:	f000 f904 	bl	8015d92 <USBD_Get_USB_Status>
 8015b8a:	0003      	movs	r3, r0
 8015b8c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015b8e:	19bb      	adds	r3, r7, r6
 8015b90:	781b      	ldrb	r3, [r3, #0]
}
 8015b92:	0018      	movs	r0, r3
 8015b94:	46bd      	mov	sp, r7
 8015b96:	b005      	add	sp, #20
 8015b98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015b9a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b9a:	b580      	push	{r7, lr}
 8015b9c:	b084      	sub	sp, #16
 8015b9e:	af00      	add	r7, sp, #0
 8015ba0:	6078      	str	r0, [r7, #4]
 8015ba2:	000a      	movs	r2, r1
 8015ba4:	1cfb      	adds	r3, r7, #3
 8015ba6:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015ba8:	687a      	ldr	r2, [r7, #4]
 8015baa:	23b0      	movs	r3, #176	@ 0xb0
 8015bac:	009b      	lsls	r3, r3, #2
 8015bae:	58d3      	ldr	r3, [r2, r3]
 8015bb0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015bb2:	1cfb      	adds	r3, r7, #3
 8015bb4:	781b      	ldrb	r3, [r3, #0]
 8015bb6:	b25b      	sxtb	r3, r3
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	da0d      	bge.n	8015bd8 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015bbc:	1cfb      	adds	r3, r7, #3
 8015bbe:	781b      	ldrb	r3, [r3, #0]
 8015bc0:	227f      	movs	r2, #127	@ 0x7f
 8015bc2:	4013      	ands	r3, r2
 8015bc4:	68f9      	ldr	r1, [r7, #12]
 8015bc6:	1c5a      	adds	r2, r3, #1
 8015bc8:	0013      	movs	r3, r2
 8015bca:	009b      	lsls	r3, r3, #2
 8015bcc:	189b      	adds	r3, r3, r2
 8015bce:	00db      	lsls	r3, r3, #3
 8015bd0:	18cb      	adds	r3, r1, r3
 8015bd2:	3302      	adds	r3, #2
 8015bd4:	781b      	ldrb	r3, [r3, #0]
 8015bd6:	e00d      	b.n	8015bf4 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015bd8:	1cfb      	adds	r3, r7, #3
 8015bda:	781b      	ldrb	r3, [r3, #0]
 8015bdc:	227f      	movs	r2, #127	@ 0x7f
 8015bde:	401a      	ands	r2, r3
 8015be0:	68f8      	ldr	r0, [r7, #12]
 8015be2:	23b5      	movs	r3, #181	@ 0xb5
 8015be4:	0059      	lsls	r1, r3, #1
 8015be6:	0013      	movs	r3, r2
 8015be8:	009b      	lsls	r3, r3, #2
 8015bea:	189b      	adds	r3, r3, r2
 8015bec:	00db      	lsls	r3, r3, #3
 8015bee:	18c3      	adds	r3, r0, r3
 8015bf0:	185b      	adds	r3, r3, r1
 8015bf2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015bf4:	0018      	movs	r0, r3
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	b004      	add	sp, #16
 8015bfa:	bd80      	pop	{r7, pc}

08015bfc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bfe:	b085      	sub	sp, #20
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	6078      	str	r0, [r7, #4]
 8015c04:	000a      	movs	r2, r1
 8015c06:	1cfb      	adds	r3, r7, #3
 8015c08:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c0a:	210f      	movs	r1, #15
 8015c0c:	187b      	adds	r3, r7, r1
 8015c0e:	2200      	movs	r2, #0
 8015c10:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c12:	260e      	movs	r6, #14
 8015c14:	19bb      	adds	r3, r7, r6
 8015c16:	2200      	movs	r2, #0
 8015c18:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015c1a:	687a      	ldr	r2, [r7, #4]
 8015c1c:	23b0      	movs	r3, #176	@ 0xb0
 8015c1e:	009b      	lsls	r3, r3, #2
 8015c20:	58d2      	ldr	r2, [r2, r3]
 8015c22:	000d      	movs	r5, r1
 8015c24:	187c      	adds	r4, r7, r1
 8015c26:	1cfb      	adds	r3, r7, #3
 8015c28:	781b      	ldrb	r3, [r3, #0]
 8015c2a:	0019      	movs	r1, r3
 8015c2c:	0010      	movs	r0, r2
 8015c2e:	f7f7 fa93 	bl	800d158 <HAL_PCD_SetAddress>
 8015c32:	0003      	movs	r3, r0
 8015c34:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015c36:	19bc      	adds	r4, r7, r6
 8015c38:	197b      	adds	r3, r7, r5
 8015c3a:	781b      	ldrb	r3, [r3, #0]
 8015c3c:	0018      	movs	r0, r3
 8015c3e:	f000 f8a8 	bl	8015d92 <USBD_Get_USB_Status>
 8015c42:	0003      	movs	r3, r0
 8015c44:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015c46:	19bb      	adds	r3, r7, r6
 8015c48:	781b      	ldrb	r3, [r3, #0]
}
 8015c4a:	0018      	movs	r0, r3
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	b005      	add	sp, #20
 8015c50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015c52 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015c52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c54:	b087      	sub	sp, #28
 8015c56:	af00      	add	r7, sp, #0
 8015c58:	60f8      	str	r0, [r7, #12]
 8015c5a:	0008      	movs	r0, r1
 8015c5c:	607a      	str	r2, [r7, #4]
 8015c5e:	0019      	movs	r1, r3
 8015c60:	230b      	movs	r3, #11
 8015c62:	18fb      	adds	r3, r7, r3
 8015c64:	1c02      	adds	r2, r0, #0
 8015c66:	701a      	strb	r2, [r3, #0]
 8015c68:	2408      	movs	r4, #8
 8015c6a:	193b      	adds	r3, r7, r4
 8015c6c:	1c0a      	adds	r2, r1, #0
 8015c6e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c70:	2117      	movs	r1, #23
 8015c72:	187b      	adds	r3, r7, r1
 8015c74:	2200      	movs	r2, #0
 8015c76:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c78:	2516      	movs	r5, #22
 8015c7a:	197b      	adds	r3, r7, r5
 8015c7c:	2200      	movs	r2, #0
 8015c7e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015c80:	68fa      	ldr	r2, [r7, #12]
 8015c82:	23b0      	movs	r3, #176	@ 0xb0
 8015c84:	009b      	lsls	r3, r3, #2
 8015c86:	58d0      	ldr	r0, [r2, r3]
 8015c88:	193b      	adds	r3, r7, r4
 8015c8a:	881d      	ldrh	r5, [r3, #0]
 8015c8c:	000e      	movs	r6, r1
 8015c8e:	187c      	adds	r4, r7, r1
 8015c90:	687a      	ldr	r2, [r7, #4]
 8015c92:	230b      	movs	r3, #11
 8015c94:	18fb      	adds	r3, r7, r3
 8015c96:	7819      	ldrb	r1, [r3, #0]
 8015c98:	002b      	movs	r3, r5
 8015c9a:	f7f7 fb98 	bl	800d3ce <HAL_PCD_EP_Transmit>
 8015c9e:	0003      	movs	r3, r0
 8015ca0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ca2:	2516      	movs	r5, #22
 8015ca4:	197c      	adds	r4, r7, r5
 8015ca6:	19bb      	adds	r3, r7, r6
 8015ca8:	781b      	ldrb	r3, [r3, #0]
 8015caa:	0018      	movs	r0, r3
 8015cac:	f000 f871 	bl	8015d92 <USBD_Get_USB_Status>
 8015cb0:	0003      	movs	r3, r0
 8015cb2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015cb4:	197b      	adds	r3, r7, r5
 8015cb6:	781b      	ldrb	r3, [r3, #0]
}
 8015cb8:	0018      	movs	r0, r3
 8015cba:	46bd      	mov	sp, r7
 8015cbc:	b007      	add	sp, #28
 8015cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015cc0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015cc2:	b087      	sub	sp, #28
 8015cc4:	af00      	add	r7, sp, #0
 8015cc6:	60f8      	str	r0, [r7, #12]
 8015cc8:	0008      	movs	r0, r1
 8015cca:	607a      	str	r2, [r7, #4]
 8015ccc:	0019      	movs	r1, r3
 8015cce:	230b      	movs	r3, #11
 8015cd0:	18fb      	adds	r3, r7, r3
 8015cd2:	1c02      	adds	r2, r0, #0
 8015cd4:	701a      	strb	r2, [r3, #0]
 8015cd6:	2408      	movs	r4, #8
 8015cd8:	193b      	adds	r3, r7, r4
 8015cda:	1c0a      	adds	r2, r1, #0
 8015cdc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015cde:	2117      	movs	r1, #23
 8015ce0:	187b      	adds	r3, r7, r1
 8015ce2:	2200      	movs	r2, #0
 8015ce4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ce6:	2516      	movs	r5, #22
 8015ce8:	197b      	adds	r3, r7, r5
 8015cea:	2200      	movs	r2, #0
 8015cec:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015cee:	68fa      	ldr	r2, [r7, #12]
 8015cf0:	23b0      	movs	r3, #176	@ 0xb0
 8015cf2:	009b      	lsls	r3, r3, #2
 8015cf4:	58d0      	ldr	r0, [r2, r3]
 8015cf6:	193b      	adds	r3, r7, r4
 8015cf8:	881d      	ldrh	r5, [r3, #0]
 8015cfa:	000e      	movs	r6, r1
 8015cfc:	187c      	adds	r4, r7, r1
 8015cfe:	687a      	ldr	r2, [r7, #4]
 8015d00:	230b      	movs	r3, #11
 8015d02:	18fb      	adds	r3, r7, r3
 8015d04:	7819      	ldrb	r1, [r3, #0]
 8015d06:	002b      	movs	r3, r5
 8015d08:	f7f7 fb11 	bl	800d32e <HAL_PCD_EP_Receive>
 8015d0c:	0003      	movs	r3, r0
 8015d0e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d10:	2516      	movs	r5, #22
 8015d12:	197c      	adds	r4, r7, r5
 8015d14:	19bb      	adds	r3, r7, r6
 8015d16:	781b      	ldrb	r3, [r3, #0]
 8015d18:	0018      	movs	r0, r3
 8015d1a:	f000 f83a 	bl	8015d92 <USBD_Get_USB_Status>
 8015d1e:	0003      	movs	r3, r0
 8015d20:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015d22:	197b      	adds	r3, r7, r5
 8015d24:	781b      	ldrb	r3, [r3, #0]
}
 8015d26:	0018      	movs	r0, r3
 8015d28:	46bd      	mov	sp, r7
 8015d2a:	b007      	add	sp, #28
 8015d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015d2e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d2e:	b580      	push	{r7, lr}
 8015d30:	b082      	sub	sp, #8
 8015d32:	af00      	add	r7, sp, #0
 8015d34:	6078      	str	r0, [r7, #4]
 8015d36:	000a      	movs	r2, r1
 8015d38:	1cfb      	adds	r3, r7, #3
 8015d3a:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015d3c:	687a      	ldr	r2, [r7, #4]
 8015d3e:	23b0      	movs	r3, #176	@ 0xb0
 8015d40:	009b      	lsls	r3, r3, #2
 8015d42:	58d2      	ldr	r2, [r2, r3]
 8015d44:	1cfb      	adds	r3, r7, #3
 8015d46:	781b      	ldrb	r3, [r3, #0]
 8015d48:	0019      	movs	r1, r3
 8015d4a:	0010      	movs	r0, r2
 8015d4c:	f7f7 fb26 	bl	800d39c <HAL_PCD_EP_GetRxCount>
 8015d50:	0003      	movs	r3, r0
}
 8015d52:	0018      	movs	r0, r3
 8015d54:	46bd      	mov	sp, r7
 8015d56:	b002      	add	sp, #8
 8015d58:	bd80      	pop	{r7, pc}
	...

08015d5c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b082      	sub	sp, #8
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015d64:	4b02      	ldr	r3, [pc, #8]	@ (8015d70 <USBD_static_malloc+0x14>)
}
 8015d66:	0018      	movs	r0, r3
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	b002      	add	sp, #8
 8015d6c:	bd80      	pop	{r7, pc}
 8015d6e:	46c0      	nop			@ (mov r8, r8)
 8015d70:	20004074 	.word	0x20004074

08015d74 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015d74:	b580      	push	{r7, lr}
 8015d76:	b082      	sub	sp, #8
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	6078      	str	r0, [r7, #4]

}
 8015d7c:	46c0      	nop			@ (mov r8, r8)
 8015d7e:	46bd      	mov	sp, r7
 8015d80:	b002      	add	sp, #8
 8015d82:	bd80      	pop	{r7, pc}

08015d84 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8015d84:	b580      	push	{r7, lr}
 8015d86:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8015d88:	f7ef fe52 	bl	8005a30 <SystemClock_Config>
}
 8015d8c:	46c0      	nop			@ (mov r8, r8)
 8015d8e:	46bd      	mov	sp, r7
 8015d90:	bd80      	pop	{r7, pc}

08015d92 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015d92:	b580      	push	{r7, lr}
 8015d94:	b084      	sub	sp, #16
 8015d96:	af00      	add	r7, sp, #0
 8015d98:	0002      	movs	r2, r0
 8015d9a:	1dfb      	adds	r3, r7, #7
 8015d9c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d9e:	230f      	movs	r3, #15
 8015da0:	18fb      	adds	r3, r7, r3
 8015da2:	2200      	movs	r2, #0
 8015da4:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8015da6:	1dfb      	adds	r3, r7, #7
 8015da8:	781b      	ldrb	r3, [r3, #0]
 8015daa:	2b03      	cmp	r3, #3
 8015dac:	d017      	beq.n	8015dde <USBD_Get_USB_Status+0x4c>
 8015dae:	dc1b      	bgt.n	8015de8 <USBD_Get_USB_Status+0x56>
 8015db0:	2b02      	cmp	r3, #2
 8015db2:	d00f      	beq.n	8015dd4 <USBD_Get_USB_Status+0x42>
 8015db4:	dc18      	bgt.n	8015de8 <USBD_Get_USB_Status+0x56>
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d002      	beq.n	8015dc0 <USBD_Get_USB_Status+0x2e>
 8015dba:	2b01      	cmp	r3, #1
 8015dbc:	d005      	beq.n	8015dca <USBD_Get_USB_Status+0x38>
 8015dbe:	e013      	b.n	8015de8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015dc0:	230f      	movs	r3, #15
 8015dc2:	18fb      	adds	r3, r7, r3
 8015dc4:	2200      	movs	r2, #0
 8015dc6:	701a      	strb	r2, [r3, #0]
    break;
 8015dc8:	e013      	b.n	8015df2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015dca:	230f      	movs	r3, #15
 8015dcc:	18fb      	adds	r3, r7, r3
 8015dce:	2202      	movs	r2, #2
 8015dd0:	701a      	strb	r2, [r3, #0]
    break;
 8015dd2:	e00e      	b.n	8015df2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015dd4:	230f      	movs	r3, #15
 8015dd6:	18fb      	adds	r3, r7, r3
 8015dd8:	2201      	movs	r2, #1
 8015dda:	701a      	strb	r2, [r3, #0]
    break;
 8015ddc:	e009      	b.n	8015df2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015dde:	230f      	movs	r3, #15
 8015de0:	18fb      	adds	r3, r7, r3
 8015de2:	2202      	movs	r2, #2
 8015de4:	701a      	strb	r2, [r3, #0]
    break;
 8015de6:	e004      	b.n	8015df2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8015de8:	230f      	movs	r3, #15
 8015dea:	18fb      	adds	r3, r7, r3
 8015dec:	2202      	movs	r2, #2
 8015dee:	701a      	strb	r2, [r3, #0]
    break;
 8015df0:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8015df2:	230f      	movs	r3, #15
 8015df4:	18fb      	adds	r3, r7, r3
 8015df6:	781b      	ldrb	r3, [r3, #0]
}
 8015df8:	0018      	movs	r0, r3
 8015dfa:	46bd      	mov	sp, r7
 8015dfc:	b004      	add	sp, #16
 8015dfe:	bd80      	pop	{r7, pc}

08015e00 <__cvt>:
 8015e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e02:	001f      	movs	r7, r3
 8015e04:	2300      	movs	r3, #0
 8015e06:	0016      	movs	r6, r2
 8015e08:	b08b      	sub	sp, #44	@ 0x2c
 8015e0a:	429f      	cmp	r7, r3
 8015e0c:	da04      	bge.n	8015e18 <__cvt+0x18>
 8015e0e:	2180      	movs	r1, #128	@ 0x80
 8015e10:	0609      	lsls	r1, r1, #24
 8015e12:	187b      	adds	r3, r7, r1
 8015e14:	001f      	movs	r7, r3
 8015e16:	232d      	movs	r3, #45	@ 0x2d
 8015e18:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015e1a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8015e1c:	7013      	strb	r3, [r2, #0]
 8015e1e:	2320      	movs	r3, #32
 8015e20:	2203      	movs	r2, #3
 8015e22:	439d      	bics	r5, r3
 8015e24:	2d46      	cmp	r5, #70	@ 0x46
 8015e26:	d007      	beq.n	8015e38 <__cvt+0x38>
 8015e28:	002b      	movs	r3, r5
 8015e2a:	3b45      	subs	r3, #69	@ 0x45
 8015e2c:	4259      	negs	r1, r3
 8015e2e:	414b      	adcs	r3, r1
 8015e30:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8015e32:	3a01      	subs	r2, #1
 8015e34:	18cb      	adds	r3, r1, r3
 8015e36:	9310      	str	r3, [sp, #64]	@ 0x40
 8015e38:	ab09      	add	r3, sp, #36	@ 0x24
 8015e3a:	9304      	str	r3, [sp, #16]
 8015e3c:	ab08      	add	r3, sp, #32
 8015e3e:	9303      	str	r3, [sp, #12]
 8015e40:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015e42:	9200      	str	r2, [sp, #0]
 8015e44:	9302      	str	r3, [sp, #8]
 8015e46:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015e48:	0032      	movs	r2, r6
 8015e4a:	9301      	str	r3, [sp, #4]
 8015e4c:	003b      	movs	r3, r7
 8015e4e:	f000 ff05 	bl	8016c5c <_dtoa_r>
 8015e52:	0004      	movs	r4, r0
 8015e54:	2d47      	cmp	r5, #71	@ 0x47
 8015e56:	d11b      	bne.n	8015e90 <__cvt+0x90>
 8015e58:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015e5a:	07db      	lsls	r3, r3, #31
 8015e5c:	d511      	bpl.n	8015e82 <__cvt+0x82>
 8015e5e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015e60:	18c3      	adds	r3, r0, r3
 8015e62:	9307      	str	r3, [sp, #28]
 8015e64:	2200      	movs	r2, #0
 8015e66:	2300      	movs	r3, #0
 8015e68:	0030      	movs	r0, r6
 8015e6a:	0039      	movs	r1, r7
 8015e6c:	f7ea faee 	bl	800044c <__aeabi_dcmpeq>
 8015e70:	2800      	cmp	r0, #0
 8015e72:	d001      	beq.n	8015e78 <__cvt+0x78>
 8015e74:	9b07      	ldr	r3, [sp, #28]
 8015e76:	9309      	str	r3, [sp, #36]	@ 0x24
 8015e78:	2230      	movs	r2, #48	@ 0x30
 8015e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e7c:	9907      	ldr	r1, [sp, #28]
 8015e7e:	428b      	cmp	r3, r1
 8015e80:	d320      	bcc.n	8015ec4 <__cvt+0xc4>
 8015e82:	0020      	movs	r0, r4
 8015e84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015e86:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8015e88:	1b1b      	subs	r3, r3, r4
 8015e8a:	6013      	str	r3, [r2, #0]
 8015e8c:	b00b      	add	sp, #44	@ 0x2c
 8015e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015e92:	18c3      	adds	r3, r0, r3
 8015e94:	9307      	str	r3, [sp, #28]
 8015e96:	2d46      	cmp	r5, #70	@ 0x46
 8015e98:	d1e4      	bne.n	8015e64 <__cvt+0x64>
 8015e9a:	7803      	ldrb	r3, [r0, #0]
 8015e9c:	2b30      	cmp	r3, #48	@ 0x30
 8015e9e:	d10c      	bne.n	8015eba <__cvt+0xba>
 8015ea0:	2200      	movs	r2, #0
 8015ea2:	2300      	movs	r3, #0
 8015ea4:	0030      	movs	r0, r6
 8015ea6:	0039      	movs	r1, r7
 8015ea8:	f7ea fad0 	bl	800044c <__aeabi_dcmpeq>
 8015eac:	2800      	cmp	r0, #0
 8015eae:	d104      	bne.n	8015eba <__cvt+0xba>
 8015eb0:	2301      	movs	r3, #1
 8015eb2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015eb4:	1a9b      	subs	r3, r3, r2
 8015eb6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015eb8:	6013      	str	r3, [r2, #0]
 8015eba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015ebc:	9a07      	ldr	r2, [sp, #28]
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	18d3      	adds	r3, r2, r3
 8015ec2:	e7ce      	b.n	8015e62 <__cvt+0x62>
 8015ec4:	1c59      	adds	r1, r3, #1
 8015ec6:	9109      	str	r1, [sp, #36]	@ 0x24
 8015ec8:	701a      	strb	r2, [r3, #0]
 8015eca:	e7d6      	b.n	8015e7a <__cvt+0x7a>

08015ecc <__exponent>:
 8015ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ece:	232b      	movs	r3, #43	@ 0x2b
 8015ed0:	0005      	movs	r5, r0
 8015ed2:	000c      	movs	r4, r1
 8015ed4:	b085      	sub	sp, #20
 8015ed6:	7002      	strb	r2, [r0, #0]
 8015ed8:	2900      	cmp	r1, #0
 8015eda:	da01      	bge.n	8015ee0 <__exponent+0x14>
 8015edc:	424c      	negs	r4, r1
 8015ede:	3302      	adds	r3, #2
 8015ee0:	706b      	strb	r3, [r5, #1]
 8015ee2:	2c09      	cmp	r4, #9
 8015ee4:	dd2c      	ble.n	8015f40 <__exponent+0x74>
 8015ee6:	ab02      	add	r3, sp, #8
 8015ee8:	1dde      	adds	r6, r3, #7
 8015eea:	0020      	movs	r0, r4
 8015eec:	210a      	movs	r1, #10
 8015eee:	f7ea fa97 	bl	8000420 <__aeabi_idivmod>
 8015ef2:	0037      	movs	r7, r6
 8015ef4:	3130      	adds	r1, #48	@ 0x30
 8015ef6:	3e01      	subs	r6, #1
 8015ef8:	0020      	movs	r0, r4
 8015efa:	7031      	strb	r1, [r6, #0]
 8015efc:	210a      	movs	r1, #10
 8015efe:	9401      	str	r4, [sp, #4]
 8015f00:	f7ea f9a8 	bl	8000254 <__divsi3>
 8015f04:	9b01      	ldr	r3, [sp, #4]
 8015f06:	0004      	movs	r4, r0
 8015f08:	2b63      	cmp	r3, #99	@ 0x63
 8015f0a:	dcee      	bgt.n	8015eea <__exponent+0x1e>
 8015f0c:	1eba      	subs	r2, r7, #2
 8015f0e:	1ca8      	adds	r0, r5, #2
 8015f10:	0001      	movs	r1, r0
 8015f12:	0013      	movs	r3, r2
 8015f14:	3430      	adds	r4, #48	@ 0x30
 8015f16:	7014      	strb	r4, [r2, #0]
 8015f18:	ac02      	add	r4, sp, #8
 8015f1a:	3407      	adds	r4, #7
 8015f1c:	429c      	cmp	r4, r3
 8015f1e:	d80a      	bhi.n	8015f36 <__exponent+0x6a>
 8015f20:	2300      	movs	r3, #0
 8015f22:	42a2      	cmp	r2, r4
 8015f24:	d803      	bhi.n	8015f2e <__exponent+0x62>
 8015f26:	3309      	adds	r3, #9
 8015f28:	aa02      	add	r2, sp, #8
 8015f2a:	189b      	adds	r3, r3, r2
 8015f2c:	1bdb      	subs	r3, r3, r7
 8015f2e:	18c0      	adds	r0, r0, r3
 8015f30:	1b40      	subs	r0, r0, r5
 8015f32:	b005      	add	sp, #20
 8015f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f36:	781c      	ldrb	r4, [r3, #0]
 8015f38:	3301      	adds	r3, #1
 8015f3a:	700c      	strb	r4, [r1, #0]
 8015f3c:	3101      	adds	r1, #1
 8015f3e:	e7eb      	b.n	8015f18 <__exponent+0x4c>
 8015f40:	2330      	movs	r3, #48	@ 0x30
 8015f42:	18e4      	adds	r4, r4, r3
 8015f44:	70ab      	strb	r3, [r5, #2]
 8015f46:	1d28      	adds	r0, r5, #4
 8015f48:	70ec      	strb	r4, [r5, #3]
 8015f4a:	e7f1      	b.n	8015f30 <__exponent+0x64>

08015f4c <_printf_float>:
 8015f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f4e:	b097      	sub	sp, #92	@ 0x5c
 8015f50:	000d      	movs	r5, r1
 8015f52:	920a      	str	r2, [sp, #40]	@ 0x28
 8015f54:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8015f56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015f58:	9009      	str	r0, [sp, #36]	@ 0x24
 8015f5a:	f000 fd5d 	bl	8016a18 <_localeconv_r>
 8015f5e:	6803      	ldr	r3, [r0, #0]
 8015f60:	0018      	movs	r0, r3
 8015f62:	930d      	str	r3, [sp, #52]	@ 0x34
 8015f64:	f7ea f8d0 	bl	8000108 <strlen>
 8015f68:	2300      	movs	r3, #0
 8015f6a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8015f6c:	9314      	str	r3, [sp, #80]	@ 0x50
 8015f6e:	7e2b      	ldrb	r3, [r5, #24]
 8015f70:	2207      	movs	r2, #7
 8015f72:	930c      	str	r3, [sp, #48]	@ 0x30
 8015f74:	682b      	ldr	r3, [r5, #0]
 8015f76:	930e      	str	r3, [sp, #56]	@ 0x38
 8015f78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8015f7a:	6823      	ldr	r3, [r4, #0]
 8015f7c:	05c9      	lsls	r1, r1, #23
 8015f7e:	d545      	bpl.n	801600c <_printf_float+0xc0>
 8015f80:	189b      	adds	r3, r3, r2
 8015f82:	4393      	bics	r3, r2
 8015f84:	001a      	movs	r2, r3
 8015f86:	3208      	adds	r2, #8
 8015f88:	6022      	str	r2, [r4, #0]
 8015f8a:	2201      	movs	r2, #1
 8015f8c:	681e      	ldr	r6, [r3, #0]
 8015f8e:	685f      	ldr	r7, [r3, #4]
 8015f90:	007b      	lsls	r3, r7, #1
 8015f92:	085b      	lsrs	r3, r3, #1
 8015f94:	9311      	str	r3, [sp, #68]	@ 0x44
 8015f96:	9610      	str	r6, [sp, #64]	@ 0x40
 8015f98:	64ae      	str	r6, [r5, #72]	@ 0x48
 8015f9a:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8015f9c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8015f9e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8015fa0:	4ba7      	ldr	r3, [pc, #668]	@ (8016240 <_printf_float+0x2f4>)
 8015fa2:	4252      	negs	r2, r2
 8015fa4:	f7ed f92c 	bl	8003200 <__aeabi_dcmpun>
 8015fa8:	2800      	cmp	r0, #0
 8015faa:	d131      	bne.n	8016010 <_printf_float+0xc4>
 8015fac:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8015fae:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8015fb0:	2201      	movs	r2, #1
 8015fb2:	4ba3      	ldr	r3, [pc, #652]	@ (8016240 <_printf_float+0x2f4>)
 8015fb4:	4252      	negs	r2, r2
 8015fb6:	f7ea fa59 	bl	800046c <__aeabi_dcmple>
 8015fba:	2800      	cmp	r0, #0
 8015fbc:	d128      	bne.n	8016010 <_printf_float+0xc4>
 8015fbe:	2200      	movs	r2, #0
 8015fc0:	2300      	movs	r3, #0
 8015fc2:	0030      	movs	r0, r6
 8015fc4:	0039      	movs	r1, r7
 8015fc6:	f7ea fa47 	bl	8000458 <__aeabi_dcmplt>
 8015fca:	2800      	cmp	r0, #0
 8015fcc:	d003      	beq.n	8015fd6 <_printf_float+0x8a>
 8015fce:	002b      	movs	r3, r5
 8015fd0:	222d      	movs	r2, #45	@ 0x2d
 8015fd2:	3343      	adds	r3, #67	@ 0x43
 8015fd4:	701a      	strb	r2, [r3, #0]
 8015fd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015fd8:	4f9a      	ldr	r7, [pc, #616]	@ (8016244 <_printf_float+0x2f8>)
 8015fda:	2b47      	cmp	r3, #71	@ 0x47
 8015fdc:	d900      	bls.n	8015fe0 <_printf_float+0x94>
 8015fde:	4f9a      	ldr	r7, [pc, #616]	@ (8016248 <_printf_float+0x2fc>)
 8015fe0:	2303      	movs	r3, #3
 8015fe2:	2400      	movs	r4, #0
 8015fe4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015fe6:	612b      	str	r3, [r5, #16]
 8015fe8:	3301      	adds	r3, #1
 8015fea:	439a      	bics	r2, r3
 8015fec:	602a      	str	r2, [r5, #0]
 8015fee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015ff0:	0029      	movs	r1, r5
 8015ff2:	9300      	str	r3, [sp, #0]
 8015ff4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015ff6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015ff8:	aa15      	add	r2, sp, #84	@ 0x54
 8015ffa:	f000 f9e5 	bl	80163c8 <_printf_common>
 8015ffe:	3001      	adds	r0, #1
 8016000:	d000      	beq.n	8016004 <_printf_float+0xb8>
 8016002:	e09f      	b.n	8016144 <_printf_float+0x1f8>
 8016004:	2001      	movs	r0, #1
 8016006:	4240      	negs	r0, r0
 8016008:	b017      	add	sp, #92	@ 0x5c
 801600a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801600c:	3307      	adds	r3, #7
 801600e:	e7b8      	b.n	8015f82 <_printf_float+0x36>
 8016010:	0032      	movs	r2, r6
 8016012:	003b      	movs	r3, r7
 8016014:	0030      	movs	r0, r6
 8016016:	0039      	movs	r1, r7
 8016018:	f7ed f8f2 	bl	8003200 <__aeabi_dcmpun>
 801601c:	2800      	cmp	r0, #0
 801601e:	d00b      	beq.n	8016038 <_printf_float+0xec>
 8016020:	2f00      	cmp	r7, #0
 8016022:	da03      	bge.n	801602c <_printf_float+0xe0>
 8016024:	002b      	movs	r3, r5
 8016026:	222d      	movs	r2, #45	@ 0x2d
 8016028:	3343      	adds	r3, #67	@ 0x43
 801602a:	701a      	strb	r2, [r3, #0]
 801602c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801602e:	4f87      	ldr	r7, [pc, #540]	@ (801624c <_printf_float+0x300>)
 8016030:	2b47      	cmp	r3, #71	@ 0x47
 8016032:	d9d5      	bls.n	8015fe0 <_printf_float+0x94>
 8016034:	4f86      	ldr	r7, [pc, #536]	@ (8016250 <_printf_float+0x304>)
 8016036:	e7d3      	b.n	8015fe0 <_printf_float+0x94>
 8016038:	2220      	movs	r2, #32
 801603a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801603c:	686b      	ldr	r3, [r5, #4]
 801603e:	4394      	bics	r4, r2
 8016040:	1c5a      	adds	r2, r3, #1
 8016042:	d146      	bne.n	80160d2 <_printf_float+0x186>
 8016044:	3307      	adds	r3, #7
 8016046:	606b      	str	r3, [r5, #4]
 8016048:	2380      	movs	r3, #128	@ 0x80
 801604a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801604c:	00db      	lsls	r3, r3, #3
 801604e:	4313      	orrs	r3, r2
 8016050:	2200      	movs	r2, #0
 8016052:	602b      	str	r3, [r5, #0]
 8016054:	9206      	str	r2, [sp, #24]
 8016056:	aa14      	add	r2, sp, #80	@ 0x50
 8016058:	9205      	str	r2, [sp, #20]
 801605a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801605c:	a90a      	add	r1, sp, #40	@ 0x28
 801605e:	9204      	str	r2, [sp, #16]
 8016060:	aa13      	add	r2, sp, #76	@ 0x4c
 8016062:	9203      	str	r2, [sp, #12]
 8016064:	2223      	movs	r2, #35	@ 0x23
 8016066:	1852      	adds	r2, r2, r1
 8016068:	9202      	str	r2, [sp, #8]
 801606a:	9301      	str	r3, [sp, #4]
 801606c:	686b      	ldr	r3, [r5, #4]
 801606e:	0032      	movs	r2, r6
 8016070:	9300      	str	r3, [sp, #0]
 8016072:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016074:	003b      	movs	r3, r7
 8016076:	f7ff fec3 	bl	8015e00 <__cvt>
 801607a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801607c:	0007      	movs	r7, r0
 801607e:	2c47      	cmp	r4, #71	@ 0x47
 8016080:	d12d      	bne.n	80160de <_printf_float+0x192>
 8016082:	1cd3      	adds	r3, r2, #3
 8016084:	db02      	blt.n	801608c <_printf_float+0x140>
 8016086:	686b      	ldr	r3, [r5, #4]
 8016088:	429a      	cmp	r2, r3
 801608a:	dd48      	ble.n	801611e <_printf_float+0x1d2>
 801608c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801608e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8016090:	3b02      	subs	r3, #2
 8016092:	b2db      	uxtb	r3, r3
 8016094:	930c      	str	r3, [sp, #48]	@ 0x30
 8016096:	0028      	movs	r0, r5
 8016098:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801609a:	3901      	subs	r1, #1
 801609c:	3050      	adds	r0, #80	@ 0x50
 801609e:	9113      	str	r1, [sp, #76]	@ 0x4c
 80160a0:	f7ff ff14 	bl	8015ecc <__exponent>
 80160a4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80160a6:	0004      	movs	r4, r0
 80160a8:	1813      	adds	r3, r2, r0
 80160aa:	612b      	str	r3, [r5, #16]
 80160ac:	2a01      	cmp	r2, #1
 80160ae:	dc02      	bgt.n	80160b6 <_printf_float+0x16a>
 80160b0:	682a      	ldr	r2, [r5, #0]
 80160b2:	07d2      	lsls	r2, r2, #31
 80160b4:	d501      	bpl.n	80160ba <_printf_float+0x16e>
 80160b6:	3301      	adds	r3, #1
 80160b8:	612b      	str	r3, [r5, #16]
 80160ba:	2323      	movs	r3, #35	@ 0x23
 80160bc:	aa0a      	add	r2, sp, #40	@ 0x28
 80160be:	189b      	adds	r3, r3, r2
 80160c0:	781b      	ldrb	r3, [r3, #0]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d100      	bne.n	80160c8 <_printf_float+0x17c>
 80160c6:	e792      	b.n	8015fee <_printf_float+0xa2>
 80160c8:	002b      	movs	r3, r5
 80160ca:	222d      	movs	r2, #45	@ 0x2d
 80160cc:	3343      	adds	r3, #67	@ 0x43
 80160ce:	701a      	strb	r2, [r3, #0]
 80160d0:	e78d      	b.n	8015fee <_printf_float+0xa2>
 80160d2:	2c47      	cmp	r4, #71	@ 0x47
 80160d4:	d1b8      	bne.n	8016048 <_printf_float+0xfc>
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d1b6      	bne.n	8016048 <_printf_float+0xfc>
 80160da:	3301      	adds	r3, #1
 80160dc:	e7b3      	b.n	8016046 <_printf_float+0xfa>
 80160de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80160e0:	0011      	movs	r1, r2
 80160e2:	2b65      	cmp	r3, #101	@ 0x65
 80160e4:	d9d7      	bls.n	8016096 <_printf_float+0x14a>
 80160e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80160e8:	2b66      	cmp	r3, #102	@ 0x66
 80160ea:	d11a      	bne.n	8016122 <_printf_float+0x1d6>
 80160ec:	686b      	ldr	r3, [r5, #4]
 80160ee:	2a00      	cmp	r2, #0
 80160f0:	dd09      	ble.n	8016106 <_printf_float+0x1ba>
 80160f2:	612a      	str	r2, [r5, #16]
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d102      	bne.n	80160fe <_printf_float+0x1b2>
 80160f8:	6829      	ldr	r1, [r5, #0]
 80160fa:	07c9      	lsls	r1, r1, #31
 80160fc:	d50b      	bpl.n	8016116 <_printf_float+0x1ca>
 80160fe:	3301      	adds	r3, #1
 8016100:	189b      	adds	r3, r3, r2
 8016102:	612b      	str	r3, [r5, #16]
 8016104:	e007      	b.n	8016116 <_printf_float+0x1ca>
 8016106:	2b00      	cmp	r3, #0
 8016108:	d103      	bne.n	8016112 <_printf_float+0x1c6>
 801610a:	2201      	movs	r2, #1
 801610c:	6829      	ldr	r1, [r5, #0]
 801610e:	4211      	tst	r1, r2
 8016110:	d000      	beq.n	8016114 <_printf_float+0x1c8>
 8016112:	1c9a      	adds	r2, r3, #2
 8016114:	612a      	str	r2, [r5, #16]
 8016116:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016118:	2400      	movs	r4, #0
 801611a:	65ab      	str	r3, [r5, #88]	@ 0x58
 801611c:	e7cd      	b.n	80160ba <_printf_float+0x16e>
 801611e:	2367      	movs	r3, #103	@ 0x67
 8016120:	930c      	str	r3, [sp, #48]	@ 0x30
 8016122:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8016124:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8016126:	4299      	cmp	r1, r3
 8016128:	db06      	blt.n	8016138 <_printf_float+0x1ec>
 801612a:	682b      	ldr	r3, [r5, #0]
 801612c:	6129      	str	r1, [r5, #16]
 801612e:	07db      	lsls	r3, r3, #31
 8016130:	d5f1      	bpl.n	8016116 <_printf_float+0x1ca>
 8016132:	3101      	adds	r1, #1
 8016134:	6129      	str	r1, [r5, #16]
 8016136:	e7ee      	b.n	8016116 <_printf_float+0x1ca>
 8016138:	2201      	movs	r2, #1
 801613a:	2900      	cmp	r1, #0
 801613c:	dce0      	bgt.n	8016100 <_printf_float+0x1b4>
 801613e:	1892      	adds	r2, r2, r2
 8016140:	1a52      	subs	r2, r2, r1
 8016142:	e7dd      	b.n	8016100 <_printf_float+0x1b4>
 8016144:	682a      	ldr	r2, [r5, #0]
 8016146:	0553      	lsls	r3, r2, #21
 8016148:	d408      	bmi.n	801615c <_printf_float+0x210>
 801614a:	692b      	ldr	r3, [r5, #16]
 801614c:	003a      	movs	r2, r7
 801614e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016150:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016152:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8016154:	47a0      	blx	r4
 8016156:	3001      	adds	r0, #1
 8016158:	d129      	bne.n	80161ae <_printf_float+0x262>
 801615a:	e753      	b.n	8016004 <_printf_float+0xb8>
 801615c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801615e:	2b65      	cmp	r3, #101	@ 0x65
 8016160:	d800      	bhi.n	8016164 <_printf_float+0x218>
 8016162:	e0da      	b.n	801631a <_printf_float+0x3ce>
 8016164:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8016166:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8016168:	2200      	movs	r2, #0
 801616a:	2300      	movs	r3, #0
 801616c:	f7ea f96e 	bl	800044c <__aeabi_dcmpeq>
 8016170:	2800      	cmp	r0, #0
 8016172:	d033      	beq.n	80161dc <_printf_float+0x290>
 8016174:	2301      	movs	r3, #1
 8016176:	4a37      	ldr	r2, [pc, #220]	@ (8016254 <_printf_float+0x308>)
 8016178:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801617a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801617c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801617e:	47a0      	blx	r4
 8016180:	3001      	adds	r0, #1
 8016182:	d100      	bne.n	8016186 <_printf_float+0x23a>
 8016184:	e73e      	b.n	8016004 <_printf_float+0xb8>
 8016186:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8016188:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801618a:	42b3      	cmp	r3, r6
 801618c:	db02      	blt.n	8016194 <_printf_float+0x248>
 801618e:	682b      	ldr	r3, [r5, #0]
 8016190:	07db      	lsls	r3, r3, #31
 8016192:	d50c      	bpl.n	80161ae <_printf_float+0x262>
 8016194:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8016196:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016198:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801619a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801619c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801619e:	47a0      	blx	r4
 80161a0:	2400      	movs	r4, #0
 80161a2:	3001      	adds	r0, #1
 80161a4:	d100      	bne.n	80161a8 <_printf_float+0x25c>
 80161a6:	e72d      	b.n	8016004 <_printf_float+0xb8>
 80161a8:	1e73      	subs	r3, r6, #1
 80161aa:	42a3      	cmp	r3, r4
 80161ac:	dc0a      	bgt.n	80161c4 <_printf_float+0x278>
 80161ae:	682b      	ldr	r3, [r5, #0]
 80161b0:	079b      	lsls	r3, r3, #30
 80161b2:	d500      	bpl.n	80161b6 <_printf_float+0x26a>
 80161b4:	e105      	b.n	80163c2 <_printf_float+0x476>
 80161b6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80161b8:	68e8      	ldr	r0, [r5, #12]
 80161ba:	4298      	cmp	r0, r3
 80161bc:	db00      	blt.n	80161c0 <_printf_float+0x274>
 80161be:	e723      	b.n	8016008 <_printf_float+0xbc>
 80161c0:	0018      	movs	r0, r3
 80161c2:	e721      	b.n	8016008 <_printf_float+0xbc>
 80161c4:	002a      	movs	r2, r5
 80161c6:	2301      	movs	r3, #1
 80161c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80161ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80161cc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80161ce:	321a      	adds	r2, #26
 80161d0:	47b8      	blx	r7
 80161d2:	3001      	adds	r0, #1
 80161d4:	d100      	bne.n	80161d8 <_printf_float+0x28c>
 80161d6:	e715      	b.n	8016004 <_printf_float+0xb8>
 80161d8:	3401      	adds	r4, #1
 80161da:	e7e5      	b.n	80161a8 <_printf_float+0x25c>
 80161dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80161de:	2b00      	cmp	r3, #0
 80161e0:	dc3a      	bgt.n	8016258 <_printf_float+0x30c>
 80161e2:	2301      	movs	r3, #1
 80161e4:	4a1b      	ldr	r2, [pc, #108]	@ (8016254 <_printf_float+0x308>)
 80161e6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80161e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80161ea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80161ec:	47a0      	blx	r4
 80161ee:	3001      	adds	r0, #1
 80161f0:	d100      	bne.n	80161f4 <_printf_float+0x2a8>
 80161f2:	e707      	b.n	8016004 <_printf_float+0xb8>
 80161f4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80161f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80161f8:	4333      	orrs	r3, r6
 80161fa:	d102      	bne.n	8016202 <_printf_float+0x2b6>
 80161fc:	682b      	ldr	r3, [r5, #0]
 80161fe:	07db      	lsls	r3, r3, #31
 8016200:	d5d5      	bpl.n	80161ae <_printf_float+0x262>
 8016202:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016204:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016206:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016208:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801620a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801620c:	47a0      	blx	r4
 801620e:	2300      	movs	r3, #0
 8016210:	3001      	adds	r0, #1
 8016212:	d100      	bne.n	8016216 <_printf_float+0x2ca>
 8016214:	e6f6      	b.n	8016004 <_printf_float+0xb8>
 8016216:	930c      	str	r3, [sp, #48]	@ 0x30
 8016218:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801621a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801621c:	425b      	negs	r3, r3
 801621e:	4293      	cmp	r3, r2
 8016220:	dc01      	bgt.n	8016226 <_printf_float+0x2da>
 8016222:	0033      	movs	r3, r6
 8016224:	e792      	b.n	801614c <_printf_float+0x200>
 8016226:	002a      	movs	r2, r5
 8016228:	2301      	movs	r3, #1
 801622a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801622c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801622e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8016230:	321a      	adds	r2, #26
 8016232:	47a0      	blx	r4
 8016234:	3001      	adds	r0, #1
 8016236:	d100      	bne.n	801623a <_printf_float+0x2ee>
 8016238:	e6e4      	b.n	8016004 <_printf_float+0xb8>
 801623a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801623c:	3301      	adds	r3, #1
 801623e:	e7ea      	b.n	8016216 <_printf_float+0x2ca>
 8016240:	7fefffff 	.word	0x7fefffff
 8016244:	0801a490 	.word	0x0801a490
 8016248:	0801a494 	.word	0x0801a494
 801624c:	0801a498 	.word	0x0801a498
 8016250:	0801a49c 	.word	0x0801a49c
 8016254:	0801a4a0 	.word	0x0801a4a0
 8016258:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801625a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801625c:	930c      	str	r3, [sp, #48]	@ 0x30
 801625e:	429e      	cmp	r6, r3
 8016260:	dd00      	ble.n	8016264 <_printf_float+0x318>
 8016262:	001e      	movs	r6, r3
 8016264:	2e00      	cmp	r6, #0
 8016266:	dc31      	bgt.n	80162cc <_printf_float+0x380>
 8016268:	43f3      	mvns	r3, r6
 801626a:	2400      	movs	r4, #0
 801626c:	17db      	asrs	r3, r3, #31
 801626e:	4033      	ands	r3, r6
 8016270:	930e      	str	r3, [sp, #56]	@ 0x38
 8016272:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8016274:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016276:	1af3      	subs	r3, r6, r3
 8016278:	42a3      	cmp	r3, r4
 801627a:	dc30      	bgt.n	80162de <_printf_float+0x392>
 801627c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801627e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8016280:	429a      	cmp	r2, r3
 8016282:	dc38      	bgt.n	80162f6 <_printf_float+0x3aa>
 8016284:	682b      	ldr	r3, [r5, #0]
 8016286:	07db      	lsls	r3, r3, #31
 8016288:	d435      	bmi.n	80162f6 <_printf_float+0x3aa>
 801628a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801628c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801628e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8016290:	1b9b      	subs	r3, r3, r6
 8016292:	1b14      	subs	r4, r2, r4
 8016294:	429c      	cmp	r4, r3
 8016296:	dd00      	ble.n	801629a <_printf_float+0x34e>
 8016298:	001c      	movs	r4, r3
 801629a:	2c00      	cmp	r4, #0
 801629c:	dc34      	bgt.n	8016308 <_printf_float+0x3bc>
 801629e:	43e3      	mvns	r3, r4
 80162a0:	2600      	movs	r6, #0
 80162a2:	17db      	asrs	r3, r3, #31
 80162a4:	401c      	ands	r4, r3
 80162a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80162a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80162aa:	1ad3      	subs	r3, r2, r3
 80162ac:	1b1b      	subs	r3, r3, r4
 80162ae:	42b3      	cmp	r3, r6
 80162b0:	dc00      	bgt.n	80162b4 <_printf_float+0x368>
 80162b2:	e77c      	b.n	80161ae <_printf_float+0x262>
 80162b4:	002a      	movs	r2, r5
 80162b6:	2301      	movs	r3, #1
 80162b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80162ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80162bc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80162be:	321a      	adds	r2, #26
 80162c0:	47b8      	blx	r7
 80162c2:	3001      	adds	r0, #1
 80162c4:	d100      	bne.n	80162c8 <_printf_float+0x37c>
 80162c6:	e69d      	b.n	8016004 <_printf_float+0xb8>
 80162c8:	3601      	adds	r6, #1
 80162ca:	e7ec      	b.n	80162a6 <_printf_float+0x35a>
 80162cc:	0033      	movs	r3, r6
 80162ce:	003a      	movs	r2, r7
 80162d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80162d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80162d4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80162d6:	47a0      	blx	r4
 80162d8:	3001      	adds	r0, #1
 80162da:	d1c5      	bne.n	8016268 <_printf_float+0x31c>
 80162dc:	e692      	b.n	8016004 <_printf_float+0xb8>
 80162de:	002a      	movs	r2, r5
 80162e0:	2301      	movs	r3, #1
 80162e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80162e4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80162e6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80162e8:	321a      	adds	r2, #26
 80162ea:	47b0      	blx	r6
 80162ec:	3001      	adds	r0, #1
 80162ee:	d100      	bne.n	80162f2 <_printf_float+0x3a6>
 80162f0:	e688      	b.n	8016004 <_printf_float+0xb8>
 80162f2:	3401      	adds	r4, #1
 80162f4:	e7bd      	b.n	8016272 <_printf_float+0x326>
 80162f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80162f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80162fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80162fc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80162fe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8016300:	47a0      	blx	r4
 8016302:	3001      	adds	r0, #1
 8016304:	d1c1      	bne.n	801628a <_printf_float+0x33e>
 8016306:	e67d      	b.n	8016004 <_printf_float+0xb8>
 8016308:	19ba      	adds	r2, r7, r6
 801630a:	0023      	movs	r3, r4
 801630c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801630e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016310:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8016312:	47b0      	blx	r6
 8016314:	3001      	adds	r0, #1
 8016316:	d1c2      	bne.n	801629e <_printf_float+0x352>
 8016318:	e674      	b.n	8016004 <_printf_float+0xb8>
 801631a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801631c:	930c      	str	r3, [sp, #48]	@ 0x30
 801631e:	2b01      	cmp	r3, #1
 8016320:	dc02      	bgt.n	8016328 <_printf_float+0x3dc>
 8016322:	2301      	movs	r3, #1
 8016324:	421a      	tst	r2, r3
 8016326:	d039      	beq.n	801639c <_printf_float+0x450>
 8016328:	2301      	movs	r3, #1
 801632a:	003a      	movs	r2, r7
 801632c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801632e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016330:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8016332:	47b0      	blx	r6
 8016334:	3001      	adds	r0, #1
 8016336:	d100      	bne.n	801633a <_printf_float+0x3ee>
 8016338:	e664      	b.n	8016004 <_printf_float+0xb8>
 801633a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801633c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801633e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016340:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016342:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8016344:	47b0      	blx	r6
 8016346:	3001      	adds	r0, #1
 8016348:	d100      	bne.n	801634c <_printf_float+0x400>
 801634a:	e65b      	b.n	8016004 <_printf_float+0xb8>
 801634c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801634e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8016350:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016352:	2200      	movs	r2, #0
 8016354:	3b01      	subs	r3, #1
 8016356:	930c      	str	r3, [sp, #48]	@ 0x30
 8016358:	2300      	movs	r3, #0
 801635a:	f7ea f877 	bl	800044c <__aeabi_dcmpeq>
 801635e:	2800      	cmp	r0, #0
 8016360:	d11a      	bne.n	8016398 <_printf_float+0x44c>
 8016362:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016364:	1c7a      	adds	r2, r7, #1
 8016366:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016368:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801636a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801636c:	47b0      	blx	r6
 801636e:	3001      	adds	r0, #1
 8016370:	d10e      	bne.n	8016390 <_printf_float+0x444>
 8016372:	e647      	b.n	8016004 <_printf_float+0xb8>
 8016374:	002a      	movs	r2, r5
 8016376:	2301      	movs	r3, #1
 8016378:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801637a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801637c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801637e:	321a      	adds	r2, #26
 8016380:	47b8      	blx	r7
 8016382:	3001      	adds	r0, #1
 8016384:	d100      	bne.n	8016388 <_printf_float+0x43c>
 8016386:	e63d      	b.n	8016004 <_printf_float+0xb8>
 8016388:	3601      	adds	r6, #1
 801638a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801638c:	429e      	cmp	r6, r3
 801638e:	dbf1      	blt.n	8016374 <_printf_float+0x428>
 8016390:	002a      	movs	r2, r5
 8016392:	0023      	movs	r3, r4
 8016394:	3250      	adds	r2, #80	@ 0x50
 8016396:	e6da      	b.n	801614e <_printf_float+0x202>
 8016398:	2600      	movs	r6, #0
 801639a:	e7f6      	b.n	801638a <_printf_float+0x43e>
 801639c:	003a      	movs	r2, r7
 801639e:	e7e2      	b.n	8016366 <_printf_float+0x41a>
 80163a0:	002a      	movs	r2, r5
 80163a2:	2301      	movs	r3, #1
 80163a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80163a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80163a8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80163aa:	3219      	adds	r2, #25
 80163ac:	47b0      	blx	r6
 80163ae:	3001      	adds	r0, #1
 80163b0:	d100      	bne.n	80163b4 <_printf_float+0x468>
 80163b2:	e627      	b.n	8016004 <_printf_float+0xb8>
 80163b4:	3401      	adds	r4, #1
 80163b6:	68eb      	ldr	r3, [r5, #12]
 80163b8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80163ba:	1a9b      	subs	r3, r3, r2
 80163bc:	42a3      	cmp	r3, r4
 80163be:	dcef      	bgt.n	80163a0 <_printf_float+0x454>
 80163c0:	e6f9      	b.n	80161b6 <_printf_float+0x26a>
 80163c2:	2400      	movs	r4, #0
 80163c4:	e7f7      	b.n	80163b6 <_printf_float+0x46a>
 80163c6:	46c0      	nop			@ (mov r8, r8)

080163c8 <_printf_common>:
 80163c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80163ca:	0016      	movs	r6, r2
 80163cc:	9301      	str	r3, [sp, #4]
 80163ce:	688a      	ldr	r2, [r1, #8]
 80163d0:	690b      	ldr	r3, [r1, #16]
 80163d2:	000c      	movs	r4, r1
 80163d4:	9000      	str	r0, [sp, #0]
 80163d6:	4293      	cmp	r3, r2
 80163d8:	da00      	bge.n	80163dc <_printf_common+0x14>
 80163da:	0013      	movs	r3, r2
 80163dc:	0022      	movs	r2, r4
 80163de:	6033      	str	r3, [r6, #0]
 80163e0:	3243      	adds	r2, #67	@ 0x43
 80163e2:	7812      	ldrb	r2, [r2, #0]
 80163e4:	2a00      	cmp	r2, #0
 80163e6:	d001      	beq.n	80163ec <_printf_common+0x24>
 80163e8:	3301      	adds	r3, #1
 80163ea:	6033      	str	r3, [r6, #0]
 80163ec:	6823      	ldr	r3, [r4, #0]
 80163ee:	069b      	lsls	r3, r3, #26
 80163f0:	d502      	bpl.n	80163f8 <_printf_common+0x30>
 80163f2:	6833      	ldr	r3, [r6, #0]
 80163f4:	3302      	adds	r3, #2
 80163f6:	6033      	str	r3, [r6, #0]
 80163f8:	6822      	ldr	r2, [r4, #0]
 80163fa:	2306      	movs	r3, #6
 80163fc:	0015      	movs	r5, r2
 80163fe:	401d      	ands	r5, r3
 8016400:	421a      	tst	r2, r3
 8016402:	d027      	beq.n	8016454 <_printf_common+0x8c>
 8016404:	0023      	movs	r3, r4
 8016406:	3343      	adds	r3, #67	@ 0x43
 8016408:	781b      	ldrb	r3, [r3, #0]
 801640a:	1e5a      	subs	r2, r3, #1
 801640c:	4193      	sbcs	r3, r2
 801640e:	6822      	ldr	r2, [r4, #0]
 8016410:	0692      	lsls	r2, r2, #26
 8016412:	d430      	bmi.n	8016476 <_printf_common+0xae>
 8016414:	0022      	movs	r2, r4
 8016416:	9901      	ldr	r1, [sp, #4]
 8016418:	9800      	ldr	r0, [sp, #0]
 801641a:	9d08      	ldr	r5, [sp, #32]
 801641c:	3243      	adds	r2, #67	@ 0x43
 801641e:	47a8      	blx	r5
 8016420:	3001      	adds	r0, #1
 8016422:	d025      	beq.n	8016470 <_printf_common+0xa8>
 8016424:	2206      	movs	r2, #6
 8016426:	6823      	ldr	r3, [r4, #0]
 8016428:	2500      	movs	r5, #0
 801642a:	4013      	ands	r3, r2
 801642c:	2b04      	cmp	r3, #4
 801642e:	d105      	bne.n	801643c <_printf_common+0x74>
 8016430:	6833      	ldr	r3, [r6, #0]
 8016432:	68e5      	ldr	r5, [r4, #12]
 8016434:	1aed      	subs	r5, r5, r3
 8016436:	43eb      	mvns	r3, r5
 8016438:	17db      	asrs	r3, r3, #31
 801643a:	401d      	ands	r5, r3
 801643c:	68a3      	ldr	r3, [r4, #8]
 801643e:	6922      	ldr	r2, [r4, #16]
 8016440:	4293      	cmp	r3, r2
 8016442:	dd01      	ble.n	8016448 <_printf_common+0x80>
 8016444:	1a9b      	subs	r3, r3, r2
 8016446:	18ed      	adds	r5, r5, r3
 8016448:	2600      	movs	r6, #0
 801644a:	42b5      	cmp	r5, r6
 801644c:	d120      	bne.n	8016490 <_printf_common+0xc8>
 801644e:	2000      	movs	r0, #0
 8016450:	e010      	b.n	8016474 <_printf_common+0xac>
 8016452:	3501      	adds	r5, #1
 8016454:	68e3      	ldr	r3, [r4, #12]
 8016456:	6832      	ldr	r2, [r6, #0]
 8016458:	1a9b      	subs	r3, r3, r2
 801645a:	42ab      	cmp	r3, r5
 801645c:	ddd2      	ble.n	8016404 <_printf_common+0x3c>
 801645e:	0022      	movs	r2, r4
 8016460:	2301      	movs	r3, #1
 8016462:	9901      	ldr	r1, [sp, #4]
 8016464:	9800      	ldr	r0, [sp, #0]
 8016466:	9f08      	ldr	r7, [sp, #32]
 8016468:	3219      	adds	r2, #25
 801646a:	47b8      	blx	r7
 801646c:	3001      	adds	r0, #1
 801646e:	d1f0      	bne.n	8016452 <_printf_common+0x8a>
 8016470:	2001      	movs	r0, #1
 8016472:	4240      	negs	r0, r0
 8016474:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016476:	2030      	movs	r0, #48	@ 0x30
 8016478:	18e1      	adds	r1, r4, r3
 801647a:	3143      	adds	r1, #67	@ 0x43
 801647c:	7008      	strb	r0, [r1, #0]
 801647e:	0021      	movs	r1, r4
 8016480:	1c5a      	adds	r2, r3, #1
 8016482:	3145      	adds	r1, #69	@ 0x45
 8016484:	7809      	ldrb	r1, [r1, #0]
 8016486:	18a2      	adds	r2, r4, r2
 8016488:	3243      	adds	r2, #67	@ 0x43
 801648a:	3302      	adds	r3, #2
 801648c:	7011      	strb	r1, [r2, #0]
 801648e:	e7c1      	b.n	8016414 <_printf_common+0x4c>
 8016490:	0022      	movs	r2, r4
 8016492:	2301      	movs	r3, #1
 8016494:	9901      	ldr	r1, [sp, #4]
 8016496:	9800      	ldr	r0, [sp, #0]
 8016498:	9f08      	ldr	r7, [sp, #32]
 801649a:	321a      	adds	r2, #26
 801649c:	47b8      	blx	r7
 801649e:	3001      	adds	r0, #1
 80164a0:	d0e6      	beq.n	8016470 <_printf_common+0xa8>
 80164a2:	3601      	adds	r6, #1
 80164a4:	e7d1      	b.n	801644a <_printf_common+0x82>
	...

080164a8 <_printf_i>:
 80164a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80164aa:	b08b      	sub	sp, #44	@ 0x2c
 80164ac:	9206      	str	r2, [sp, #24]
 80164ae:	000a      	movs	r2, r1
 80164b0:	3243      	adds	r2, #67	@ 0x43
 80164b2:	9307      	str	r3, [sp, #28]
 80164b4:	9005      	str	r0, [sp, #20]
 80164b6:	9203      	str	r2, [sp, #12]
 80164b8:	7e0a      	ldrb	r2, [r1, #24]
 80164ba:	000c      	movs	r4, r1
 80164bc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80164be:	2a78      	cmp	r2, #120	@ 0x78
 80164c0:	d809      	bhi.n	80164d6 <_printf_i+0x2e>
 80164c2:	2a62      	cmp	r2, #98	@ 0x62
 80164c4:	d80b      	bhi.n	80164de <_printf_i+0x36>
 80164c6:	2a00      	cmp	r2, #0
 80164c8:	d100      	bne.n	80164cc <_printf_i+0x24>
 80164ca:	e0bc      	b.n	8016646 <_printf_i+0x19e>
 80164cc:	497b      	ldr	r1, [pc, #492]	@ (80166bc <_printf_i+0x214>)
 80164ce:	9104      	str	r1, [sp, #16]
 80164d0:	2a58      	cmp	r2, #88	@ 0x58
 80164d2:	d100      	bne.n	80164d6 <_printf_i+0x2e>
 80164d4:	e090      	b.n	80165f8 <_printf_i+0x150>
 80164d6:	0025      	movs	r5, r4
 80164d8:	3542      	adds	r5, #66	@ 0x42
 80164da:	702a      	strb	r2, [r5, #0]
 80164dc:	e022      	b.n	8016524 <_printf_i+0x7c>
 80164de:	0010      	movs	r0, r2
 80164e0:	3863      	subs	r0, #99	@ 0x63
 80164e2:	2815      	cmp	r0, #21
 80164e4:	d8f7      	bhi.n	80164d6 <_printf_i+0x2e>
 80164e6:	f7e9 fe21 	bl	800012c <__gnu_thumb1_case_shi>
 80164ea:	0016      	.short	0x0016
 80164ec:	fff6001f 	.word	0xfff6001f
 80164f0:	fff6fff6 	.word	0xfff6fff6
 80164f4:	001ffff6 	.word	0x001ffff6
 80164f8:	fff6fff6 	.word	0xfff6fff6
 80164fc:	fff6fff6 	.word	0xfff6fff6
 8016500:	003600a1 	.word	0x003600a1
 8016504:	fff60080 	.word	0xfff60080
 8016508:	00b2fff6 	.word	0x00b2fff6
 801650c:	0036fff6 	.word	0x0036fff6
 8016510:	fff6fff6 	.word	0xfff6fff6
 8016514:	0084      	.short	0x0084
 8016516:	0025      	movs	r5, r4
 8016518:	681a      	ldr	r2, [r3, #0]
 801651a:	3542      	adds	r5, #66	@ 0x42
 801651c:	1d11      	adds	r1, r2, #4
 801651e:	6019      	str	r1, [r3, #0]
 8016520:	6813      	ldr	r3, [r2, #0]
 8016522:	702b      	strb	r3, [r5, #0]
 8016524:	2301      	movs	r3, #1
 8016526:	e0a0      	b.n	801666a <_printf_i+0x1c2>
 8016528:	6818      	ldr	r0, [r3, #0]
 801652a:	6809      	ldr	r1, [r1, #0]
 801652c:	1d02      	adds	r2, r0, #4
 801652e:	060d      	lsls	r5, r1, #24
 8016530:	d50b      	bpl.n	801654a <_printf_i+0xa2>
 8016532:	6806      	ldr	r6, [r0, #0]
 8016534:	601a      	str	r2, [r3, #0]
 8016536:	2e00      	cmp	r6, #0
 8016538:	da03      	bge.n	8016542 <_printf_i+0x9a>
 801653a:	232d      	movs	r3, #45	@ 0x2d
 801653c:	9a03      	ldr	r2, [sp, #12]
 801653e:	4276      	negs	r6, r6
 8016540:	7013      	strb	r3, [r2, #0]
 8016542:	4b5e      	ldr	r3, [pc, #376]	@ (80166bc <_printf_i+0x214>)
 8016544:	270a      	movs	r7, #10
 8016546:	9304      	str	r3, [sp, #16]
 8016548:	e018      	b.n	801657c <_printf_i+0xd4>
 801654a:	6806      	ldr	r6, [r0, #0]
 801654c:	601a      	str	r2, [r3, #0]
 801654e:	0649      	lsls	r1, r1, #25
 8016550:	d5f1      	bpl.n	8016536 <_printf_i+0x8e>
 8016552:	b236      	sxth	r6, r6
 8016554:	e7ef      	b.n	8016536 <_printf_i+0x8e>
 8016556:	6808      	ldr	r0, [r1, #0]
 8016558:	6819      	ldr	r1, [r3, #0]
 801655a:	c940      	ldmia	r1!, {r6}
 801655c:	0605      	lsls	r5, r0, #24
 801655e:	d402      	bmi.n	8016566 <_printf_i+0xbe>
 8016560:	0640      	lsls	r0, r0, #25
 8016562:	d500      	bpl.n	8016566 <_printf_i+0xbe>
 8016564:	b2b6      	uxth	r6, r6
 8016566:	6019      	str	r1, [r3, #0]
 8016568:	4b54      	ldr	r3, [pc, #336]	@ (80166bc <_printf_i+0x214>)
 801656a:	270a      	movs	r7, #10
 801656c:	9304      	str	r3, [sp, #16]
 801656e:	2a6f      	cmp	r2, #111	@ 0x6f
 8016570:	d100      	bne.n	8016574 <_printf_i+0xcc>
 8016572:	3f02      	subs	r7, #2
 8016574:	0023      	movs	r3, r4
 8016576:	2200      	movs	r2, #0
 8016578:	3343      	adds	r3, #67	@ 0x43
 801657a:	701a      	strb	r2, [r3, #0]
 801657c:	6863      	ldr	r3, [r4, #4]
 801657e:	60a3      	str	r3, [r4, #8]
 8016580:	2b00      	cmp	r3, #0
 8016582:	db03      	blt.n	801658c <_printf_i+0xe4>
 8016584:	2104      	movs	r1, #4
 8016586:	6822      	ldr	r2, [r4, #0]
 8016588:	438a      	bics	r2, r1
 801658a:	6022      	str	r2, [r4, #0]
 801658c:	2e00      	cmp	r6, #0
 801658e:	d102      	bne.n	8016596 <_printf_i+0xee>
 8016590:	9d03      	ldr	r5, [sp, #12]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d00c      	beq.n	80165b0 <_printf_i+0x108>
 8016596:	9d03      	ldr	r5, [sp, #12]
 8016598:	0030      	movs	r0, r6
 801659a:	0039      	movs	r1, r7
 801659c:	f7e9 fe56 	bl	800024c <__aeabi_uidivmod>
 80165a0:	9b04      	ldr	r3, [sp, #16]
 80165a2:	3d01      	subs	r5, #1
 80165a4:	5c5b      	ldrb	r3, [r3, r1]
 80165a6:	702b      	strb	r3, [r5, #0]
 80165a8:	0033      	movs	r3, r6
 80165aa:	0006      	movs	r6, r0
 80165ac:	429f      	cmp	r7, r3
 80165ae:	d9f3      	bls.n	8016598 <_printf_i+0xf0>
 80165b0:	2f08      	cmp	r7, #8
 80165b2:	d109      	bne.n	80165c8 <_printf_i+0x120>
 80165b4:	6823      	ldr	r3, [r4, #0]
 80165b6:	07db      	lsls	r3, r3, #31
 80165b8:	d506      	bpl.n	80165c8 <_printf_i+0x120>
 80165ba:	6862      	ldr	r2, [r4, #4]
 80165bc:	6923      	ldr	r3, [r4, #16]
 80165be:	429a      	cmp	r2, r3
 80165c0:	dc02      	bgt.n	80165c8 <_printf_i+0x120>
 80165c2:	2330      	movs	r3, #48	@ 0x30
 80165c4:	3d01      	subs	r5, #1
 80165c6:	702b      	strb	r3, [r5, #0]
 80165c8:	9b03      	ldr	r3, [sp, #12]
 80165ca:	1b5b      	subs	r3, r3, r5
 80165cc:	6123      	str	r3, [r4, #16]
 80165ce:	9b07      	ldr	r3, [sp, #28]
 80165d0:	0021      	movs	r1, r4
 80165d2:	9300      	str	r3, [sp, #0]
 80165d4:	9805      	ldr	r0, [sp, #20]
 80165d6:	9b06      	ldr	r3, [sp, #24]
 80165d8:	aa09      	add	r2, sp, #36	@ 0x24
 80165da:	f7ff fef5 	bl	80163c8 <_printf_common>
 80165de:	3001      	adds	r0, #1
 80165e0:	d148      	bne.n	8016674 <_printf_i+0x1cc>
 80165e2:	2001      	movs	r0, #1
 80165e4:	4240      	negs	r0, r0
 80165e6:	b00b      	add	sp, #44	@ 0x2c
 80165e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165ea:	2220      	movs	r2, #32
 80165ec:	6809      	ldr	r1, [r1, #0]
 80165ee:	430a      	orrs	r2, r1
 80165f0:	6022      	str	r2, [r4, #0]
 80165f2:	2278      	movs	r2, #120	@ 0x78
 80165f4:	4932      	ldr	r1, [pc, #200]	@ (80166c0 <_printf_i+0x218>)
 80165f6:	9104      	str	r1, [sp, #16]
 80165f8:	0021      	movs	r1, r4
 80165fa:	3145      	adds	r1, #69	@ 0x45
 80165fc:	700a      	strb	r2, [r1, #0]
 80165fe:	6819      	ldr	r1, [r3, #0]
 8016600:	6822      	ldr	r2, [r4, #0]
 8016602:	c940      	ldmia	r1!, {r6}
 8016604:	0610      	lsls	r0, r2, #24
 8016606:	d402      	bmi.n	801660e <_printf_i+0x166>
 8016608:	0650      	lsls	r0, r2, #25
 801660a:	d500      	bpl.n	801660e <_printf_i+0x166>
 801660c:	b2b6      	uxth	r6, r6
 801660e:	6019      	str	r1, [r3, #0]
 8016610:	07d3      	lsls	r3, r2, #31
 8016612:	d502      	bpl.n	801661a <_printf_i+0x172>
 8016614:	2320      	movs	r3, #32
 8016616:	4313      	orrs	r3, r2
 8016618:	6023      	str	r3, [r4, #0]
 801661a:	2e00      	cmp	r6, #0
 801661c:	d001      	beq.n	8016622 <_printf_i+0x17a>
 801661e:	2710      	movs	r7, #16
 8016620:	e7a8      	b.n	8016574 <_printf_i+0xcc>
 8016622:	2220      	movs	r2, #32
 8016624:	6823      	ldr	r3, [r4, #0]
 8016626:	4393      	bics	r3, r2
 8016628:	6023      	str	r3, [r4, #0]
 801662a:	e7f8      	b.n	801661e <_printf_i+0x176>
 801662c:	681a      	ldr	r2, [r3, #0]
 801662e:	680d      	ldr	r5, [r1, #0]
 8016630:	1d10      	adds	r0, r2, #4
 8016632:	6949      	ldr	r1, [r1, #20]
 8016634:	6018      	str	r0, [r3, #0]
 8016636:	6813      	ldr	r3, [r2, #0]
 8016638:	062e      	lsls	r6, r5, #24
 801663a:	d501      	bpl.n	8016640 <_printf_i+0x198>
 801663c:	6019      	str	r1, [r3, #0]
 801663e:	e002      	b.n	8016646 <_printf_i+0x19e>
 8016640:	066d      	lsls	r5, r5, #25
 8016642:	d5fb      	bpl.n	801663c <_printf_i+0x194>
 8016644:	8019      	strh	r1, [r3, #0]
 8016646:	2300      	movs	r3, #0
 8016648:	9d03      	ldr	r5, [sp, #12]
 801664a:	6123      	str	r3, [r4, #16]
 801664c:	e7bf      	b.n	80165ce <_printf_i+0x126>
 801664e:	681a      	ldr	r2, [r3, #0]
 8016650:	1d11      	adds	r1, r2, #4
 8016652:	6019      	str	r1, [r3, #0]
 8016654:	6815      	ldr	r5, [r2, #0]
 8016656:	2100      	movs	r1, #0
 8016658:	0028      	movs	r0, r5
 801665a:	6862      	ldr	r2, [r4, #4]
 801665c:	f000 fa5b 	bl	8016b16 <memchr>
 8016660:	2800      	cmp	r0, #0
 8016662:	d001      	beq.n	8016668 <_printf_i+0x1c0>
 8016664:	1b40      	subs	r0, r0, r5
 8016666:	6060      	str	r0, [r4, #4]
 8016668:	6863      	ldr	r3, [r4, #4]
 801666a:	6123      	str	r3, [r4, #16]
 801666c:	2300      	movs	r3, #0
 801666e:	9a03      	ldr	r2, [sp, #12]
 8016670:	7013      	strb	r3, [r2, #0]
 8016672:	e7ac      	b.n	80165ce <_printf_i+0x126>
 8016674:	002a      	movs	r2, r5
 8016676:	6923      	ldr	r3, [r4, #16]
 8016678:	9906      	ldr	r1, [sp, #24]
 801667a:	9805      	ldr	r0, [sp, #20]
 801667c:	9d07      	ldr	r5, [sp, #28]
 801667e:	47a8      	blx	r5
 8016680:	3001      	adds	r0, #1
 8016682:	d0ae      	beq.n	80165e2 <_printf_i+0x13a>
 8016684:	6823      	ldr	r3, [r4, #0]
 8016686:	079b      	lsls	r3, r3, #30
 8016688:	d415      	bmi.n	80166b6 <_printf_i+0x20e>
 801668a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801668c:	68e0      	ldr	r0, [r4, #12]
 801668e:	4298      	cmp	r0, r3
 8016690:	daa9      	bge.n	80165e6 <_printf_i+0x13e>
 8016692:	0018      	movs	r0, r3
 8016694:	e7a7      	b.n	80165e6 <_printf_i+0x13e>
 8016696:	0022      	movs	r2, r4
 8016698:	2301      	movs	r3, #1
 801669a:	9906      	ldr	r1, [sp, #24]
 801669c:	9805      	ldr	r0, [sp, #20]
 801669e:	9e07      	ldr	r6, [sp, #28]
 80166a0:	3219      	adds	r2, #25
 80166a2:	47b0      	blx	r6
 80166a4:	3001      	adds	r0, #1
 80166a6:	d09c      	beq.n	80165e2 <_printf_i+0x13a>
 80166a8:	3501      	adds	r5, #1
 80166aa:	68e3      	ldr	r3, [r4, #12]
 80166ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80166ae:	1a9b      	subs	r3, r3, r2
 80166b0:	42ab      	cmp	r3, r5
 80166b2:	dcf0      	bgt.n	8016696 <_printf_i+0x1ee>
 80166b4:	e7e9      	b.n	801668a <_printf_i+0x1e2>
 80166b6:	2500      	movs	r5, #0
 80166b8:	e7f7      	b.n	80166aa <_printf_i+0x202>
 80166ba:	46c0      	nop			@ (mov r8, r8)
 80166bc:	0801a4a2 	.word	0x0801a4a2
 80166c0:	0801a4b3 	.word	0x0801a4b3

080166c4 <std>:
 80166c4:	2300      	movs	r3, #0
 80166c6:	b510      	push	{r4, lr}
 80166c8:	0004      	movs	r4, r0
 80166ca:	6003      	str	r3, [r0, #0]
 80166cc:	6043      	str	r3, [r0, #4]
 80166ce:	6083      	str	r3, [r0, #8]
 80166d0:	8181      	strh	r1, [r0, #12]
 80166d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80166d4:	81c2      	strh	r2, [r0, #14]
 80166d6:	6103      	str	r3, [r0, #16]
 80166d8:	6143      	str	r3, [r0, #20]
 80166da:	6183      	str	r3, [r0, #24]
 80166dc:	0019      	movs	r1, r3
 80166de:	2208      	movs	r2, #8
 80166e0:	305c      	adds	r0, #92	@ 0x5c
 80166e2:	f000 f967 	bl	80169b4 <memset>
 80166e6:	4b0b      	ldr	r3, [pc, #44]	@ (8016714 <std+0x50>)
 80166e8:	6224      	str	r4, [r4, #32]
 80166ea:	6263      	str	r3, [r4, #36]	@ 0x24
 80166ec:	4b0a      	ldr	r3, [pc, #40]	@ (8016718 <std+0x54>)
 80166ee:	62a3      	str	r3, [r4, #40]	@ 0x28
 80166f0:	4b0a      	ldr	r3, [pc, #40]	@ (801671c <std+0x58>)
 80166f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80166f4:	4b0a      	ldr	r3, [pc, #40]	@ (8016720 <std+0x5c>)
 80166f6:	6323      	str	r3, [r4, #48]	@ 0x30
 80166f8:	4b0a      	ldr	r3, [pc, #40]	@ (8016724 <std+0x60>)
 80166fa:	429c      	cmp	r4, r3
 80166fc:	d005      	beq.n	801670a <std+0x46>
 80166fe:	4b0a      	ldr	r3, [pc, #40]	@ (8016728 <std+0x64>)
 8016700:	429c      	cmp	r4, r3
 8016702:	d002      	beq.n	801670a <std+0x46>
 8016704:	4b09      	ldr	r3, [pc, #36]	@ (801672c <std+0x68>)
 8016706:	429c      	cmp	r4, r3
 8016708:	d103      	bne.n	8016712 <std+0x4e>
 801670a:	0020      	movs	r0, r4
 801670c:	3058      	adds	r0, #88	@ 0x58
 801670e:	f000 f9ff 	bl	8016b10 <__retarget_lock_init_recursive>
 8016712:	bd10      	pop	{r4, pc}
 8016714:	080168ad 	.word	0x080168ad
 8016718:	080168d5 	.word	0x080168d5
 801671c:	0801690d 	.word	0x0801690d
 8016720:	08016939 	.word	0x08016939
 8016724:	20004294 	.word	0x20004294
 8016728:	200042fc 	.word	0x200042fc
 801672c:	20004364 	.word	0x20004364

08016730 <stdio_exit_handler>:
 8016730:	b510      	push	{r4, lr}
 8016732:	4a03      	ldr	r2, [pc, #12]	@ (8016740 <stdio_exit_handler+0x10>)
 8016734:	4903      	ldr	r1, [pc, #12]	@ (8016744 <stdio_exit_handler+0x14>)
 8016736:	4804      	ldr	r0, [pc, #16]	@ (8016748 <stdio_exit_handler+0x18>)
 8016738:	f000 f86c 	bl	8016814 <_fwalk_sglue>
 801673c:	bd10      	pop	{r4, pc}
 801673e:	46c0      	nop			@ (mov r8, r8)
 8016740:	200002c8 	.word	0x200002c8
 8016744:	080187e9 	.word	0x080187e9
 8016748:	200002d8 	.word	0x200002d8

0801674c <cleanup_stdio>:
 801674c:	6841      	ldr	r1, [r0, #4]
 801674e:	4b0b      	ldr	r3, [pc, #44]	@ (801677c <cleanup_stdio+0x30>)
 8016750:	b510      	push	{r4, lr}
 8016752:	0004      	movs	r4, r0
 8016754:	4299      	cmp	r1, r3
 8016756:	d001      	beq.n	801675c <cleanup_stdio+0x10>
 8016758:	f002 f846 	bl	80187e8 <_fflush_r>
 801675c:	68a1      	ldr	r1, [r4, #8]
 801675e:	4b08      	ldr	r3, [pc, #32]	@ (8016780 <cleanup_stdio+0x34>)
 8016760:	4299      	cmp	r1, r3
 8016762:	d002      	beq.n	801676a <cleanup_stdio+0x1e>
 8016764:	0020      	movs	r0, r4
 8016766:	f002 f83f 	bl	80187e8 <_fflush_r>
 801676a:	68e1      	ldr	r1, [r4, #12]
 801676c:	4b05      	ldr	r3, [pc, #20]	@ (8016784 <cleanup_stdio+0x38>)
 801676e:	4299      	cmp	r1, r3
 8016770:	d002      	beq.n	8016778 <cleanup_stdio+0x2c>
 8016772:	0020      	movs	r0, r4
 8016774:	f002 f838 	bl	80187e8 <_fflush_r>
 8016778:	bd10      	pop	{r4, pc}
 801677a:	46c0      	nop			@ (mov r8, r8)
 801677c:	20004294 	.word	0x20004294
 8016780:	200042fc 	.word	0x200042fc
 8016784:	20004364 	.word	0x20004364

08016788 <global_stdio_init.part.0>:
 8016788:	b510      	push	{r4, lr}
 801678a:	4b09      	ldr	r3, [pc, #36]	@ (80167b0 <global_stdio_init.part.0+0x28>)
 801678c:	4a09      	ldr	r2, [pc, #36]	@ (80167b4 <global_stdio_init.part.0+0x2c>)
 801678e:	2104      	movs	r1, #4
 8016790:	601a      	str	r2, [r3, #0]
 8016792:	4809      	ldr	r0, [pc, #36]	@ (80167b8 <global_stdio_init.part.0+0x30>)
 8016794:	2200      	movs	r2, #0
 8016796:	f7ff ff95 	bl	80166c4 <std>
 801679a:	2201      	movs	r2, #1
 801679c:	2109      	movs	r1, #9
 801679e:	4807      	ldr	r0, [pc, #28]	@ (80167bc <global_stdio_init.part.0+0x34>)
 80167a0:	f7ff ff90 	bl	80166c4 <std>
 80167a4:	2202      	movs	r2, #2
 80167a6:	2112      	movs	r1, #18
 80167a8:	4805      	ldr	r0, [pc, #20]	@ (80167c0 <global_stdio_init.part.0+0x38>)
 80167aa:	f7ff ff8b 	bl	80166c4 <std>
 80167ae:	bd10      	pop	{r4, pc}
 80167b0:	200043cc 	.word	0x200043cc
 80167b4:	08016731 	.word	0x08016731
 80167b8:	20004294 	.word	0x20004294
 80167bc:	200042fc 	.word	0x200042fc
 80167c0:	20004364 	.word	0x20004364

080167c4 <__sfp_lock_acquire>:
 80167c4:	b510      	push	{r4, lr}
 80167c6:	4802      	ldr	r0, [pc, #8]	@ (80167d0 <__sfp_lock_acquire+0xc>)
 80167c8:	f000 f9a3 	bl	8016b12 <__retarget_lock_acquire_recursive>
 80167cc:	bd10      	pop	{r4, pc}
 80167ce:	46c0      	nop			@ (mov r8, r8)
 80167d0:	200043d5 	.word	0x200043d5

080167d4 <__sfp_lock_release>:
 80167d4:	b510      	push	{r4, lr}
 80167d6:	4802      	ldr	r0, [pc, #8]	@ (80167e0 <__sfp_lock_release+0xc>)
 80167d8:	f000 f99c 	bl	8016b14 <__retarget_lock_release_recursive>
 80167dc:	bd10      	pop	{r4, pc}
 80167de:	46c0      	nop			@ (mov r8, r8)
 80167e0:	200043d5 	.word	0x200043d5

080167e4 <__sinit>:
 80167e4:	b510      	push	{r4, lr}
 80167e6:	0004      	movs	r4, r0
 80167e8:	f7ff ffec 	bl	80167c4 <__sfp_lock_acquire>
 80167ec:	6a23      	ldr	r3, [r4, #32]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d002      	beq.n	80167f8 <__sinit+0x14>
 80167f2:	f7ff ffef 	bl	80167d4 <__sfp_lock_release>
 80167f6:	bd10      	pop	{r4, pc}
 80167f8:	4b04      	ldr	r3, [pc, #16]	@ (801680c <__sinit+0x28>)
 80167fa:	6223      	str	r3, [r4, #32]
 80167fc:	4b04      	ldr	r3, [pc, #16]	@ (8016810 <__sinit+0x2c>)
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d1f6      	bne.n	80167f2 <__sinit+0xe>
 8016804:	f7ff ffc0 	bl	8016788 <global_stdio_init.part.0>
 8016808:	e7f3      	b.n	80167f2 <__sinit+0xe>
 801680a:	46c0      	nop			@ (mov r8, r8)
 801680c:	0801674d 	.word	0x0801674d
 8016810:	200043cc 	.word	0x200043cc

08016814 <_fwalk_sglue>:
 8016814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016816:	0014      	movs	r4, r2
 8016818:	2600      	movs	r6, #0
 801681a:	9000      	str	r0, [sp, #0]
 801681c:	9101      	str	r1, [sp, #4]
 801681e:	68a5      	ldr	r5, [r4, #8]
 8016820:	6867      	ldr	r7, [r4, #4]
 8016822:	3f01      	subs	r7, #1
 8016824:	d504      	bpl.n	8016830 <_fwalk_sglue+0x1c>
 8016826:	6824      	ldr	r4, [r4, #0]
 8016828:	2c00      	cmp	r4, #0
 801682a:	d1f8      	bne.n	801681e <_fwalk_sglue+0xa>
 801682c:	0030      	movs	r0, r6
 801682e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016830:	89ab      	ldrh	r3, [r5, #12]
 8016832:	2b01      	cmp	r3, #1
 8016834:	d908      	bls.n	8016848 <_fwalk_sglue+0x34>
 8016836:	220e      	movs	r2, #14
 8016838:	5eab      	ldrsh	r3, [r5, r2]
 801683a:	3301      	adds	r3, #1
 801683c:	d004      	beq.n	8016848 <_fwalk_sglue+0x34>
 801683e:	0029      	movs	r1, r5
 8016840:	9800      	ldr	r0, [sp, #0]
 8016842:	9b01      	ldr	r3, [sp, #4]
 8016844:	4798      	blx	r3
 8016846:	4306      	orrs	r6, r0
 8016848:	3568      	adds	r5, #104	@ 0x68
 801684a:	e7ea      	b.n	8016822 <_fwalk_sglue+0xe>

0801684c <iprintf>:
 801684c:	b40f      	push	{r0, r1, r2, r3}
 801684e:	b507      	push	{r0, r1, r2, lr}
 8016850:	4905      	ldr	r1, [pc, #20]	@ (8016868 <iprintf+0x1c>)
 8016852:	ab04      	add	r3, sp, #16
 8016854:	6808      	ldr	r0, [r1, #0]
 8016856:	cb04      	ldmia	r3!, {r2}
 8016858:	6881      	ldr	r1, [r0, #8]
 801685a:	9301      	str	r3, [sp, #4]
 801685c:	f001 fe22 	bl	80184a4 <_vfiprintf_r>
 8016860:	b003      	add	sp, #12
 8016862:	bc08      	pop	{r3}
 8016864:	b004      	add	sp, #16
 8016866:	4718      	bx	r3
 8016868:	200002d4 	.word	0x200002d4

0801686c <siprintf>:
 801686c:	b40e      	push	{r1, r2, r3}
 801686e:	b500      	push	{lr}
 8016870:	490b      	ldr	r1, [pc, #44]	@ (80168a0 <siprintf+0x34>)
 8016872:	b09c      	sub	sp, #112	@ 0x70
 8016874:	ab1d      	add	r3, sp, #116	@ 0x74
 8016876:	9002      	str	r0, [sp, #8]
 8016878:	9006      	str	r0, [sp, #24]
 801687a:	9107      	str	r1, [sp, #28]
 801687c:	9104      	str	r1, [sp, #16]
 801687e:	4809      	ldr	r0, [pc, #36]	@ (80168a4 <siprintf+0x38>)
 8016880:	4909      	ldr	r1, [pc, #36]	@ (80168a8 <siprintf+0x3c>)
 8016882:	cb04      	ldmia	r3!, {r2}
 8016884:	9105      	str	r1, [sp, #20]
 8016886:	6800      	ldr	r0, [r0, #0]
 8016888:	a902      	add	r1, sp, #8
 801688a:	9301      	str	r3, [sp, #4]
 801688c:	f001 fce4 	bl	8018258 <_svfiprintf_r>
 8016890:	2200      	movs	r2, #0
 8016892:	9b02      	ldr	r3, [sp, #8]
 8016894:	701a      	strb	r2, [r3, #0]
 8016896:	b01c      	add	sp, #112	@ 0x70
 8016898:	bc08      	pop	{r3}
 801689a:	b003      	add	sp, #12
 801689c:	4718      	bx	r3
 801689e:	46c0      	nop			@ (mov r8, r8)
 80168a0:	7fffffff 	.word	0x7fffffff
 80168a4:	200002d4 	.word	0x200002d4
 80168a8:	ffff0208 	.word	0xffff0208

080168ac <__sread>:
 80168ac:	b570      	push	{r4, r5, r6, lr}
 80168ae:	000c      	movs	r4, r1
 80168b0:	250e      	movs	r5, #14
 80168b2:	5f49      	ldrsh	r1, [r1, r5]
 80168b4:	f000 f8da 	bl	8016a6c <_read_r>
 80168b8:	2800      	cmp	r0, #0
 80168ba:	db03      	blt.n	80168c4 <__sread+0x18>
 80168bc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80168be:	181b      	adds	r3, r3, r0
 80168c0:	6563      	str	r3, [r4, #84]	@ 0x54
 80168c2:	bd70      	pop	{r4, r5, r6, pc}
 80168c4:	89a3      	ldrh	r3, [r4, #12]
 80168c6:	4a02      	ldr	r2, [pc, #8]	@ (80168d0 <__sread+0x24>)
 80168c8:	4013      	ands	r3, r2
 80168ca:	81a3      	strh	r3, [r4, #12]
 80168cc:	e7f9      	b.n	80168c2 <__sread+0x16>
 80168ce:	46c0      	nop			@ (mov r8, r8)
 80168d0:	ffffefff 	.word	0xffffefff

080168d4 <__swrite>:
 80168d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168d6:	001f      	movs	r7, r3
 80168d8:	898b      	ldrh	r3, [r1, #12]
 80168da:	0005      	movs	r5, r0
 80168dc:	000c      	movs	r4, r1
 80168de:	0016      	movs	r6, r2
 80168e0:	05db      	lsls	r3, r3, #23
 80168e2:	d505      	bpl.n	80168f0 <__swrite+0x1c>
 80168e4:	230e      	movs	r3, #14
 80168e6:	5ec9      	ldrsh	r1, [r1, r3]
 80168e8:	2200      	movs	r2, #0
 80168ea:	2302      	movs	r3, #2
 80168ec:	f000 f8aa 	bl	8016a44 <_lseek_r>
 80168f0:	89a3      	ldrh	r3, [r4, #12]
 80168f2:	4a05      	ldr	r2, [pc, #20]	@ (8016908 <__swrite+0x34>)
 80168f4:	0028      	movs	r0, r5
 80168f6:	4013      	ands	r3, r2
 80168f8:	81a3      	strh	r3, [r4, #12]
 80168fa:	0032      	movs	r2, r6
 80168fc:	230e      	movs	r3, #14
 80168fe:	5ee1      	ldrsh	r1, [r4, r3]
 8016900:	003b      	movs	r3, r7
 8016902:	f000 f8c7 	bl	8016a94 <_write_r>
 8016906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016908:	ffffefff 	.word	0xffffefff

0801690c <__sseek>:
 801690c:	b570      	push	{r4, r5, r6, lr}
 801690e:	000c      	movs	r4, r1
 8016910:	250e      	movs	r5, #14
 8016912:	5f49      	ldrsh	r1, [r1, r5]
 8016914:	f000 f896 	bl	8016a44 <_lseek_r>
 8016918:	89a3      	ldrh	r3, [r4, #12]
 801691a:	1c42      	adds	r2, r0, #1
 801691c:	d103      	bne.n	8016926 <__sseek+0x1a>
 801691e:	4a05      	ldr	r2, [pc, #20]	@ (8016934 <__sseek+0x28>)
 8016920:	4013      	ands	r3, r2
 8016922:	81a3      	strh	r3, [r4, #12]
 8016924:	bd70      	pop	{r4, r5, r6, pc}
 8016926:	2280      	movs	r2, #128	@ 0x80
 8016928:	0152      	lsls	r2, r2, #5
 801692a:	4313      	orrs	r3, r2
 801692c:	81a3      	strh	r3, [r4, #12]
 801692e:	6560      	str	r0, [r4, #84]	@ 0x54
 8016930:	e7f8      	b.n	8016924 <__sseek+0x18>
 8016932:	46c0      	nop			@ (mov r8, r8)
 8016934:	ffffefff 	.word	0xffffefff

08016938 <__sclose>:
 8016938:	b510      	push	{r4, lr}
 801693a:	230e      	movs	r3, #14
 801693c:	5ec9      	ldrsh	r1, [r1, r3]
 801693e:	f000 f86f 	bl	8016a20 <_close_r>
 8016942:	bd10      	pop	{r4, pc}

08016944 <_vsniprintf_r>:
 8016944:	b530      	push	{r4, r5, lr}
 8016946:	0014      	movs	r4, r2
 8016948:	0005      	movs	r5, r0
 801694a:	001a      	movs	r2, r3
 801694c:	b09b      	sub	sp, #108	@ 0x6c
 801694e:	2c00      	cmp	r4, #0
 8016950:	da05      	bge.n	801695e <_vsniprintf_r+0x1a>
 8016952:	238b      	movs	r3, #139	@ 0x8b
 8016954:	6003      	str	r3, [r0, #0]
 8016956:	2001      	movs	r0, #1
 8016958:	4240      	negs	r0, r0
 801695a:	b01b      	add	sp, #108	@ 0x6c
 801695c:	bd30      	pop	{r4, r5, pc}
 801695e:	2382      	movs	r3, #130	@ 0x82
 8016960:	4668      	mov	r0, sp
 8016962:	009b      	lsls	r3, r3, #2
 8016964:	8183      	strh	r3, [r0, #12]
 8016966:	2300      	movs	r3, #0
 8016968:	9100      	str	r1, [sp, #0]
 801696a:	9104      	str	r1, [sp, #16]
 801696c:	429c      	cmp	r4, r3
 801696e:	d000      	beq.n	8016972 <_vsniprintf_r+0x2e>
 8016970:	1e63      	subs	r3, r4, #1
 8016972:	9302      	str	r3, [sp, #8]
 8016974:	9305      	str	r3, [sp, #20]
 8016976:	2301      	movs	r3, #1
 8016978:	4669      	mov	r1, sp
 801697a:	425b      	negs	r3, r3
 801697c:	81cb      	strh	r3, [r1, #14]
 801697e:	0028      	movs	r0, r5
 8016980:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8016982:	f001 fc69 	bl	8018258 <_svfiprintf_r>
 8016986:	1c43      	adds	r3, r0, #1
 8016988:	da01      	bge.n	801698e <_vsniprintf_r+0x4a>
 801698a:	238b      	movs	r3, #139	@ 0x8b
 801698c:	602b      	str	r3, [r5, #0]
 801698e:	2c00      	cmp	r4, #0
 8016990:	d0e3      	beq.n	801695a <_vsniprintf_r+0x16>
 8016992:	2200      	movs	r2, #0
 8016994:	9b00      	ldr	r3, [sp, #0]
 8016996:	701a      	strb	r2, [r3, #0]
 8016998:	e7df      	b.n	801695a <_vsniprintf_r+0x16>
	...

0801699c <vsniprintf>:
 801699c:	b513      	push	{r0, r1, r4, lr}
 801699e:	4c04      	ldr	r4, [pc, #16]	@ (80169b0 <vsniprintf+0x14>)
 80169a0:	9300      	str	r3, [sp, #0]
 80169a2:	0013      	movs	r3, r2
 80169a4:	000a      	movs	r2, r1
 80169a6:	0001      	movs	r1, r0
 80169a8:	6820      	ldr	r0, [r4, #0]
 80169aa:	f7ff ffcb 	bl	8016944 <_vsniprintf_r>
 80169ae:	bd16      	pop	{r1, r2, r4, pc}
 80169b0:	200002d4 	.word	0x200002d4

080169b4 <memset>:
 80169b4:	0003      	movs	r3, r0
 80169b6:	1882      	adds	r2, r0, r2
 80169b8:	4293      	cmp	r3, r2
 80169ba:	d100      	bne.n	80169be <memset+0xa>
 80169bc:	4770      	bx	lr
 80169be:	7019      	strb	r1, [r3, #0]
 80169c0:	3301      	adds	r3, #1
 80169c2:	e7f9      	b.n	80169b8 <memset+0x4>

080169c4 <strncpy>:
 80169c4:	0003      	movs	r3, r0
 80169c6:	b530      	push	{r4, r5, lr}
 80169c8:	001d      	movs	r5, r3
 80169ca:	2a00      	cmp	r2, #0
 80169cc:	d006      	beq.n	80169dc <strncpy+0x18>
 80169ce:	780c      	ldrb	r4, [r1, #0]
 80169d0:	3a01      	subs	r2, #1
 80169d2:	3301      	adds	r3, #1
 80169d4:	702c      	strb	r4, [r5, #0]
 80169d6:	3101      	adds	r1, #1
 80169d8:	2c00      	cmp	r4, #0
 80169da:	d1f5      	bne.n	80169c8 <strncpy+0x4>
 80169dc:	2100      	movs	r1, #0
 80169de:	189a      	adds	r2, r3, r2
 80169e0:	4293      	cmp	r3, r2
 80169e2:	d100      	bne.n	80169e6 <strncpy+0x22>
 80169e4:	bd30      	pop	{r4, r5, pc}
 80169e6:	7019      	strb	r1, [r3, #0]
 80169e8:	3301      	adds	r3, #1
 80169ea:	e7f9      	b.n	80169e0 <strncpy+0x1c>

080169ec <strstr>:
 80169ec:	780a      	ldrb	r2, [r1, #0]
 80169ee:	b530      	push	{r4, r5, lr}
 80169f0:	2a00      	cmp	r2, #0
 80169f2:	d10c      	bne.n	8016a0e <strstr+0x22>
 80169f4:	bd30      	pop	{r4, r5, pc}
 80169f6:	429a      	cmp	r2, r3
 80169f8:	d108      	bne.n	8016a0c <strstr+0x20>
 80169fa:	2301      	movs	r3, #1
 80169fc:	5ccc      	ldrb	r4, [r1, r3]
 80169fe:	2c00      	cmp	r4, #0
 8016a00:	d0f8      	beq.n	80169f4 <strstr+0x8>
 8016a02:	5cc5      	ldrb	r5, [r0, r3]
 8016a04:	42a5      	cmp	r5, r4
 8016a06:	d101      	bne.n	8016a0c <strstr+0x20>
 8016a08:	3301      	adds	r3, #1
 8016a0a:	e7f7      	b.n	80169fc <strstr+0x10>
 8016a0c:	3001      	adds	r0, #1
 8016a0e:	7803      	ldrb	r3, [r0, #0]
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d1f0      	bne.n	80169f6 <strstr+0xa>
 8016a14:	0018      	movs	r0, r3
 8016a16:	e7ed      	b.n	80169f4 <strstr+0x8>

08016a18 <_localeconv_r>:
 8016a18:	4800      	ldr	r0, [pc, #0]	@ (8016a1c <_localeconv_r+0x4>)
 8016a1a:	4770      	bx	lr
 8016a1c:	20000414 	.word	0x20000414

08016a20 <_close_r>:
 8016a20:	2300      	movs	r3, #0
 8016a22:	b570      	push	{r4, r5, r6, lr}
 8016a24:	4d06      	ldr	r5, [pc, #24]	@ (8016a40 <_close_r+0x20>)
 8016a26:	0004      	movs	r4, r0
 8016a28:	0008      	movs	r0, r1
 8016a2a:	602b      	str	r3, [r5, #0]
 8016a2c:	f7f1 fc82 	bl	8008334 <_close>
 8016a30:	1c43      	adds	r3, r0, #1
 8016a32:	d103      	bne.n	8016a3c <_close_r+0x1c>
 8016a34:	682b      	ldr	r3, [r5, #0]
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d000      	beq.n	8016a3c <_close_r+0x1c>
 8016a3a:	6023      	str	r3, [r4, #0]
 8016a3c:	bd70      	pop	{r4, r5, r6, pc}
 8016a3e:	46c0      	nop			@ (mov r8, r8)
 8016a40:	200043d0 	.word	0x200043d0

08016a44 <_lseek_r>:
 8016a44:	b570      	push	{r4, r5, r6, lr}
 8016a46:	0004      	movs	r4, r0
 8016a48:	0008      	movs	r0, r1
 8016a4a:	0011      	movs	r1, r2
 8016a4c:	001a      	movs	r2, r3
 8016a4e:	2300      	movs	r3, #0
 8016a50:	4d05      	ldr	r5, [pc, #20]	@ (8016a68 <_lseek_r+0x24>)
 8016a52:	602b      	str	r3, [r5, #0]
 8016a54:	f7f1 fc8f 	bl	8008376 <_lseek>
 8016a58:	1c43      	adds	r3, r0, #1
 8016a5a:	d103      	bne.n	8016a64 <_lseek_r+0x20>
 8016a5c:	682b      	ldr	r3, [r5, #0]
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d000      	beq.n	8016a64 <_lseek_r+0x20>
 8016a62:	6023      	str	r3, [r4, #0]
 8016a64:	bd70      	pop	{r4, r5, r6, pc}
 8016a66:	46c0      	nop			@ (mov r8, r8)
 8016a68:	200043d0 	.word	0x200043d0

08016a6c <_read_r>:
 8016a6c:	b570      	push	{r4, r5, r6, lr}
 8016a6e:	0004      	movs	r4, r0
 8016a70:	0008      	movs	r0, r1
 8016a72:	0011      	movs	r1, r2
 8016a74:	001a      	movs	r2, r3
 8016a76:	2300      	movs	r3, #0
 8016a78:	4d05      	ldr	r5, [pc, #20]	@ (8016a90 <_read_r+0x24>)
 8016a7a:	602b      	str	r3, [r5, #0]
 8016a7c:	f7f1 fc3d 	bl	80082fa <_read>
 8016a80:	1c43      	adds	r3, r0, #1
 8016a82:	d103      	bne.n	8016a8c <_read_r+0x20>
 8016a84:	682b      	ldr	r3, [r5, #0]
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d000      	beq.n	8016a8c <_read_r+0x20>
 8016a8a:	6023      	str	r3, [r4, #0]
 8016a8c:	bd70      	pop	{r4, r5, r6, pc}
 8016a8e:	46c0      	nop			@ (mov r8, r8)
 8016a90:	200043d0 	.word	0x200043d0

08016a94 <_write_r>:
 8016a94:	b570      	push	{r4, r5, r6, lr}
 8016a96:	0004      	movs	r4, r0
 8016a98:	0008      	movs	r0, r1
 8016a9a:	0011      	movs	r1, r2
 8016a9c:	001a      	movs	r2, r3
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	4d05      	ldr	r5, [pc, #20]	@ (8016ab8 <_write_r+0x24>)
 8016aa2:	602b      	str	r3, [r5, #0]
 8016aa4:	f7f2 f84c 	bl	8008b40 <_write>
 8016aa8:	1c43      	adds	r3, r0, #1
 8016aaa:	d103      	bne.n	8016ab4 <_write_r+0x20>
 8016aac:	682b      	ldr	r3, [r5, #0]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d000      	beq.n	8016ab4 <_write_r+0x20>
 8016ab2:	6023      	str	r3, [r4, #0]
 8016ab4:	bd70      	pop	{r4, r5, r6, pc}
 8016ab6:	46c0      	nop			@ (mov r8, r8)
 8016ab8:	200043d0 	.word	0x200043d0

08016abc <__errno>:
 8016abc:	4b01      	ldr	r3, [pc, #4]	@ (8016ac4 <__errno+0x8>)
 8016abe:	6818      	ldr	r0, [r3, #0]
 8016ac0:	4770      	bx	lr
 8016ac2:	46c0      	nop			@ (mov r8, r8)
 8016ac4:	200002d4 	.word	0x200002d4

08016ac8 <__libc_init_array>:
 8016ac8:	b570      	push	{r4, r5, r6, lr}
 8016aca:	2600      	movs	r6, #0
 8016acc:	4c0c      	ldr	r4, [pc, #48]	@ (8016b00 <__libc_init_array+0x38>)
 8016ace:	4d0d      	ldr	r5, [pc, #52]	@ (8016b04 <__libc_init_array+0x3c>)
 8016ad0:	1b64      	subs	r4, r4, r5
 8016ad2:	10a4      	asrs	r4, r4, #2
 8016ad4:	42a6      	cmp	r6, r4
 8016ad6:	d109      	bne.n	8016aec <__libc_init_array+0x24>
 8016ad8:	2600      	movs	r6, #0
 8016ada:	f002 fe57 	bl	801978c <_init>
 8016ade:	4c0a      	ldr	r4, [pc, #40]	@ (8016b08 <__libc_init_array+0x40>)
 8016ae0:	4d0a      	ldr	r5, [pc, #40]	@ (8016b0c <__libc_init_array+0x44>)
 8016ae2:	1b64      	subs	r4, r4, r5
 8016ae4:	10a4      	asrs	r4, r4, #2
 8016ae6:	42a6      	cmp	r6, r4
 8016ae8:	d105      	bne.n	8016af6 <__libc_init_array+0x2e>
 8016aea:	bd70      	pop	{r4, r5, r6, pc}
 8016aec:	00b3      	lsls	r3, r6, #2
 8016aee:	58eb      	ldr	r3, [r5, r3]
 8016af0:	4798      	blx	r3
 8016af2:	3601      	adds	r6, #1
 8016af4:	e7ee      	b.n	8016ad4 <__libc_init_array+0xc>
 8016af6:	00b3      	lsls	r3, r6, #2
 8016af8:	58eb      	ldr	r3, [r5, r3]
 8016afa:	4798      	blx	r3
 8016afc:	3601      	adds	r6, #1
 8016afe:	e7f2      	b.n	8016ae6 <__libc_init_array+0x1e>
 8016b00:	0801a820 	.word	0x0801a820
 8016b04:	0801a820 	.word	0x0801a820
 8016b08:	0801a824 	.word	0x0801a824
 8016b0c:	0801a820 	.word	0x0801a820

08016b10 <__retarget_lock_init_recursive>:
 8016b10:	4770      	bx	lr

08016b12 <__retarget_lock_acquire_recursive>:
 8016b12:	4770      	bx	lr

08016b14 <__retarget_lock_release_recursive>:
 8016b14:	4770      	bx	lr

08016b16 <memchr>:
 8016b16:	b2c9      	uxtb	r1, r1
 8016b18:	1882      	adds	r2, r0, r2
 8016b1a:	4290      	cmp	r0, r2
 8016b1c:	d101      	bne.n	8016b22 <memchr+0xc>
 8016b1e:	2000      	movs	r0, #0
 8016b20:	4770      	bx	lr
 8016b22:	7803      	ldrb	r3, [r0, #0]
 8016b24:	428b      	cmp	r3, r1
 8016b26:	d0fb      	beq.n	8016b20 <memchr+0xa>
 8016b28:	3001      	adds	r0, #1
 8016b2a:	e7f6      	b.n	8016b1a <memchr+0x4>

08016b2c <memcpy>:
 8016b2c:	2300      	movs	r3, #0
 8016b2e:	b510      	push	{r4, lr}
 8016b30:	429a      	cmp	r2, r3
 8016b32:	d100      	bne.n	8016b36 <memcpy+0xa>
 8016b34:	bd10      	pop	{r4, pc}
 8016b36:	5ccc      	ldrb	r4, [r1, r3]
 8016b38:	54c4      	strb	r4, [r0, r3]
 8016b3a:	3301      	adds	r3, #1
 8016b3c:	e7f8      	b.n	8016b30 <memcpy+0x4>

08016b3e <quorem>:
 8016b3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b40:	6902      	ldr	r2, [r0, #16]
 8016b42:	690f      	ldr	r7, [r1, #16]
 8016b44:	b087      	sub	sp, #28
 8016b46:	0006      	movs	r6, r0
 8016b48:	000b      	movs	r3, r1
 8016b4a:	2000      	movs	r0, #0
 8016b4c:	9102      	str	r1, [sp, #8]
 8016b4e:	42ba      	cmp	r2, r7
 8016b50:	db6d      	blt.n	8016c2e <quorem+0xf0>
 8016b52:	3f01      	subs	r7, #1
 8016b54:	00bc      	lsls	r4, r7, #2
 8016b56:	3314      	adds	r3, #20
 8016b58:	9305      	str	r3, [sp, #20]
 8016b5a:	191b      	adds	r3, r3, r4
 8016b5c:	9303      	str	r3, [sp, #12]
 8016b5e:	0033      	movs	r3, r6
 8016b60:	3314      	adds	r3, #20
 8016b62:	191c      	adds	r4, r3, r4
 8016b64:	9301      	str	r3, [sp, #4]
 8016b66:	6823      	ldr	r3, [r4, #0]
 8016b68:	9304      	str	r3, [sp, #16]
 8016b6a:	9b03      	ldr	r3, [sp, #12]
 8016b6c:	9804      	ldr	r0, [sp, #16]
 8016b6e:	681d      	ldr	r5, [r3, #0]
 8016b70:	3501      	adds	r5, #1
 8016b72:	0029      	movs	r1, r5
 8016b74:	f7e9 fae4 	bl	8000140 <__udivsi3>
 8016b78:	9b04      	ldr	r3, [sp, #16]
 8016b7a:	9000      	str	r0, [sp, #0]
 8016b7c:	42ab      	cmp	r3, r5
 8016b7e:	d32b      	bcc.n	8016bd8 <quorem+0x9a>
 8016b80:	9b05      	ldr	r3, [sp, #20]
 8016b82:	9d01      	ldr	r5, [sp, #4]
 8016b84:	469c      	mov	ip, r3
 8016b86:	2300      	movs	r3, #0
 8016b88:	9305      	str	r3, [sp, #20]
 8016b8a:	9304      	str	r3, [sp, #16]
 8016b8c:	4662      	mov	r2, ip
 8016b8e:	ca08      	ldmia	r2!, {r3}
 8016b90:	6828      	ldr	r0, [r5, #0]
 8016b92:	4694      	mov	ip, r2
 8016b94:	9a00      	ldr	r2, [sp, #0]
 8016b96:	b299      	uxth	r1, r3
 8016b98:	4351      	muls	r1, r2
 8016b9a:	9a05      	ldr	r2, [sp, #20]
 8016b9c:	0c1b      	lsrs	r3, r3, #16
 8016b9e:	1889      	adds	r1, r1, r2
 8016ba0:	9a00      	ldr	r2, [sp, #0]
 8016ba2:	4353      	muls	r3, r2
 8016ba4:	0c0a      	lsrs	r2, r1, #16
 8016ba6:	189b      	adds	r3, r3, r2
 8016ba8:	0c1a      	lsrs	r2, r3, #16
 8016baa:	b289      	uxth	r1, r1
 8016bac:	9205      	str	r2, [sp, #20]
 8016bae:	b282      	uxth	r2, r0
 8016bb0:	1a52      	subs	r2, r2, r1
 8016bb2:	9904      	ldr	r1, [sp, #16]
 8016bb4:	0c00      	lsrs	r0, r0, #16
 8016bb6:	1852      	adds	r2, r2, r1
 8016bb8:	b29b      	uxth	r3, r3
 8016bba:	1411      	asrs	r1, r2, #16
 8016bbc:	1ac3      	subs	r3, r0, r3
 8016bbe:	185b      	adds	r3, r3, r1
 8016bc0:	1419      	asrs	r1, r3, #16
 8016bc2:	b292      	uxth	r2, r2
 8016bc4:	041b      	lsls	r3, r3, #16
 8016bc6:	431a      	orrs	r2, r3
 8016bc8:	9b03      	ldr	r3, [sp, #12]
 8016bca:	9104      	str	r1, [sp, #16]
 8016bcc:	c504      	stmia	r5!, {r2}
 8016bce:	4563      	cmp	r3, ip
 8016bd0:	d2dc      	bcs.n	8016b8c <quorem+0x4e>
 8016bd2:	6823      	ldr	r3, [r4, #0]
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d030      	beq.n	8016c3a <quorem+0xfc>
 8016bd8:	0030      	movs	r0, r6
 8016bda:	9902      	ldr	r1, [sp, #8]
 8016bdc:	f001 f9c6 	bl	8017f6c <__mcmp>
 8016be0:	2800      	cmp	r0, #0
 8016be2:	db23      	blt.n	8016c2c <quorem+0xee>
 8016be4:	0034      	movs	r4, r6
 8016be6:	2500      	movs	r5, #0
 8016be8:	9902      	ldr	r1, [sp, #8]
 8016bea:	3414      	adds	r4, #20
 8016bec:	3114      	adds	r1, #20
 8016bee:	6823      	ldr	r3, [r4, #0]
 8016bf0:	c901      	ldmia	r1!, {r0}
 8016bf2:	9302      	str	r3, [sp, #8]
 8016bf4:	466b      	mov	r3, sp
 8016bf6:	891b      	ldrh	r3, [r3, #8]
 8016bf8:	b282      	uxth	r2, r0
 8016bfa:	1a9a      	subs	r2, r3, r2
 8016bfc:	9b02      	ldr	r3, [sp, #8]
 8016bfe:	1952      	adds	r2, r2, r5
 8016c00:	0c00      	lsrs	r0, r0, #16
 8016c02:	0c1b      	lsrs	r3, r3, #16
 8016c04:	1a1b      	subs	r3, r3, r0
 8016c06:	1410      	asrs	r0, r2, #16
 8016c08:	181b      	adds	r3, r3, r0
 8016c0a:	141d      	asrs	r5, r3, #16
 8016c0c:	b292      	uxth	r2, r2
 8016c0e:	041b      	lsls	r3, r3, #16
 8016c10:	431a      	orrs	r2, r3
 8016c12:	9b03      	ldr	r3, [sp, #12]
 8016c14:	c404      	stmia	r4!, {r2}
 8016c16:	428b      	cmp	r3, r1
 8016c18:	d2e9      	bcs.n	8016bee <quorem+0xb0>
 8016c1a:	9a01      	ldr	r2, [sp, #4]
 8016c1c:	00bb      	lsls	r3, r7, #2
 8016c1e:	18d3      	adds	r3, r2, r3
 8016c20:	681a      	ldr	r2, [r3, #0]
 8016c22:	2a00      	cmp	r2, #0
 8016c24:	d013      	beq.n	8016c4e <quorem+0x110>
 8016c26:	9b00      	ldr	r3, [sp, #0]
 8016c28:	3301      	adds	r3, #1
 8016c2a:	9300      	str	r3, [sp, #0]
 8016c2c:	9800      	ldr	r0, [sp, #0]
 8016c2e:	b007      	add	sp, #28
 8016c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c32:	6823      	ldr	r3, [r4, #0]
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d104      	bne.n	8016c42 <quorem+0x104>
 8016c38:	3f01      	subs	r7, #1
 8016c3a:	9b01      	ldr	r3, [sp, #4]
 8016c3c:	3c04      	subs	r4, #4
 8016c3e:	42a3      	cmp	r3, r4
 8016c40:	d3f7      	bcc.n	8016c32 <quorem+0xf4>
 8016c42:	6137      	str	r7, [r6, #16]
 8016c44:	e7c8      	b.n	8016bd8 <quorem+0x9a>
 8016c46:	681a      	ldr	r2, [r3, #0]
 8016c48:	2a00      	cmp	r2, #0
 8016c4a:	d104      	bne.n	8016c56 <quorem+0x118>
 8016c4c:	3f01      	subs	r7, #1
 8016c4e:	9a01      	ldr	r2, [sp, #4]
 8016c50:	3b04      	subs	r3, #4
 8016c52:	429a      	cmp	r2, r3
 8016c54:	d3f7      	bcc.n	8016c46 <quorem+0x108>
 8016c56:	6137      	str	r7, [r6, #16]
 8016c58:	e7e5      	b.n	8016c26 <quorem+0xe8>
	...

08016c5c <_dtoa_r>:
 8016c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016c5e:	0014      	movs	r4, r2
 8016c60:	001d      	movs	r5, r3
 8016c62:	69c6      	ldr	r6, [r0, #28]
 8016c64:	b09d      	sub	sp, #116	@ 0x74
 8016c66:	940a      	str	r4, [sp, #40]	@ 0x28
 8016c68:	950b      	str	r5, [sp, #44]	@ 0x2c
 8016c6a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8016c6c:	9003      	str	r0, [sp, #12]
 8016c6e:	2e00      	cmp	r6, #0
 8016c70:	d10f      	bne.n	8016c92 <_dtoa_r+0x36>
 8016c72:	2010      	movs	r0, #16
 8016c74:	f000 fe30 	bl	80178d8 <malloc>
 8016c78:	9b03      	ldr	r3, [sp, #12]
 8016c7a:	1e02      	subs	r2, r0, #0
 8016c7c:	61d8      	str	r0, [r3, #28]
 8016c7e:	d104      	bne.n	8016c8a <_dtoa_r+0x2e>
 8016c80:	21ef      	movs	r1, #239	@ 0xef
 8016c82:	4bc7      	ldr	r3, [pc, #796]	@ (8016fa0 <_dtoa_r+0x344>)
 8016c84:	48c7      	ldr	r0, [pc, #796]	@ (8016fa4 <_dtoa_r+0x348>)
 8016c86:	f001 fea1 	bl	80189cc <__assert_func>
 8016c8a:	6046      	str	r6, [r0, #4]
 8016c8c:	6086      	str	r6, [r0, #8]
 8016c8e:	6006      	str	r6, [r0, #0]
 8016c90:	60c6      	str	r6, [r0, #12]
 8016c92:	9b03      	ldr	r3, [sp, #12]
 8016c94:	69db      	ldr	r3, [r3, #28]
 8016c96:	6819      	ldr	r1, [r3, #0]
 8016c98:	2900      	cmp	r1, #0
 8016c9a:	d00b      	beq.n	8016cb4 <_dtoa_r+0x58>
 8016c9c:	685a      	ldr	r2, [r3, #4]
 8016c9e:	2301      	movs	r3, #1
 8016ca0:	4093      	lsls	r3, r2
 8016ca2:	604a      	str	r2, [r1, #4]
 8016ca4:	608b      	str	r3, [r1, #8]
 8016ca6:	9803      	ldr	r0, [sp, #12]
 8016ca8:	f000 ff16 	bl	8017ad8 <_Bfree>
 8016cac:	2200      	movs	r2, #0
 8016cae:	9b03      	ldr	r3, [sp, #12]
 8016cb0:	69db      	ldr	r3, [r3, #28]
 8016cb2:	601a      	str	r2, [r3, #0]
 8016cb4:	2d00      	cmp	r5, #0
 8016cb6:	da1e      	bge.n	8016cf6 <_dtoa_r+0x9a>
 8016cb8:	2301      	movs	r3, #1
 8016cba:	603b      	str	r3, [r7, #0]
 8016cbc:	006b      	lsls	r3, r5, #1
 8016cbe:	085b      	lsrs	r3, r3, #1
 8016cc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016cc2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8016cc4:	4bb8      	ldr	r3, [pc, #736]	@ (8016fa8 <_dtoa_r+0x34c>)
 8016cc6:	4ab8      	ldr	r2, [pc, #736]	@ (8016fa8 <_dtoa_r+0x34c>)
 8016cc8:	403b      	ands	r3, r7
 8016cca:	4293      	cmp	r3, r2
 8016ccc:	d116      	bne.n	8016cfc <_dtoa_r+0xa0>
 8016cce:	4bb7      	ldr	r3, [pc, #732]	@ (8016fac <_dtoa_r+0x350>)
 8016cd0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8016cd2:	6013      	str	r3, [r2, #0]
 8016cd4:	033b      	lsls	r3, r7, #12
 8016cd6:	0b1b      	lsrs	r3, r3, #12
 8016cd8:	4323      	orrs	r3, r4
 8016cda:	d101      	bne.n	8016ce0 <_dtoa_r+0x84>
 8016cdc:	f000 fd83 	bl	80177e6 <_dtoa_r+0xb8a>
 8016ce0:	4bb3      	ldr	r3, [pc, #716]	@ (8016fb0 <_dtoa_r+0x354>)
 8016ce2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8016ce4:	9308      	str	r3, [sp, #32]
 8016ce6:	2a00      	cmp	r2, #0
 8016ce8:	d002      	beq.n	8016cf0 <_dtoa_r+0x94>
 8016cea:	4bb2      	ldr	r3, [pc, #712]	@ (8016fb4 <_dtoa_r+0x358>)
 8016cec:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8016cee:	6013      	str	r3, [r2, #0]
 8016cf0:	9808      	ldr	r0, [sp, #32]
 8016cf2:	b01d      	add	sp, #116	@ 0x74
 8016cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	603b      	str	r3, [r7, #0]
 8016cfa:	e7e2      	b.n	8016cc2 <_dtoa_r+0x66>
 8016cfc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016cfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016d00:	9212      	str	r2, [sp, #72]	@ 0x48
 8016d02:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016d04:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016d06:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8016d08:	2200      	movs	r2, #0
 8016d0a:	2300      	movs	r3, #0
 8016d0c:	f7e9 fb9e 	bl	800044c <__aeabi_dcmpeq>
 8016d10:	1e06      	subs	r6, r0, #0
 8016d12:	d00b      	beq.n	8016d2c <_dtoa_r+0xd0>
 8016d14:	2301      	movs	r3, #1
 8016d16:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8016d18:	6013      	str	r3, [r2, #0]
 8016d1a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d002      	beq.n	8016d26 <_dtoa_r+0xca>
 8016d20:	4ba5      	ldr	r3, [pc, #660]	@ (8016fb8 <_dtoa_r+0x35c>)
 8016d22:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8016d24:	6013      	str	r3, [r2, #0]
 8016d26:	4ba5      	ldr	r3, [pc, #660]	@ (8016fbc <_dtoa_r+0x360>)
 8016d28:	9308      	str	r3, [sp, #32]
 8016d2a:	e7e1      	b.n	8016cf0 <_dtoa_r+0x94>
 8016d2c:	ab1a      	add	r3, sp, #104	@ 0x68
 8016d2e:	9301      	str	r3, [sp, #4]
 8016d30:	ab1b      	add	r3, sp, #108	@ 0x6c
 8016d32:	9300      	str	r3, [sp, #0]
 8016d34:	9803      	ldr	r0, [sp, #12]
 8016d36:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016d38:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016d3a:	f001 f9cd 	bl	80180d8 <__d2b>
 8016d3e:	007a      	lsls	r2, r7, #1
 8016d40:	9005      	str	r0, [sp, #20]
 8016d42:	0d52      	lsrs	r2, r2, #21
 8016d44:	d100      	bne.n	8016d48 <_dtoa_r+0xec>
 8016d46:	e07b      	b.n	8016e40 <_dtoa_r+0x1e4>
 8016d48:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016d4a:	9618      	str	r6, [sp, #96]	@ 0x60
 8016d4c:	0319      	lsls	r1, r3, #12
 8016d4e:	4b9c      	ldr	r3, [pc, #624]	@ (8016fc0 <_dtoa_r+0x364>)
 8016d50:	0b09      	lsrs	r1, r1, #12
 8016d52:	430b      	orrs	r3, r1
 8016d54:	499b      	ldr	r1, [pc, #620]	@ (8016fc4 <_dtoa_r+0x368>)
 8016d56:	1857      	adds	r7, r2, r1
 8016d58:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016d5a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8016d5c:	0019      	movs	r1, r3
 8016d5e:	2200      	movs	r2, #0
 8016d60:	4b99      	ldr	r3, [pc, #612]	@ (8016fc8 <_dtoa_r+0x36c>)
 8016d62:	f7eb feb1 	bl	8002ac8 <__aeabi_dsub>
 8016d66:	4a99      	ldr	r2, [pc, #612]	@ (8016fcc <_dtoa_r+0x370>)
 8016d68:	4b99      	ldr	r3, [pc, #612]	@ (8016fd0 <_dtoa_r+0x374>)
 8016d6a:	f7eb fbe5 	bl	8002538 <__aeabi_dmul>
 8016d6e:	4a99      	ldr	r2, [pc, #612]	@ (8016fd4 <_dtoa_r+0x378>)
 8016d70:	4b99      	ldr	r3, [pc, #612]	@ (8016fd8 <_dtoa_r+0x37c>)
 8016d72:	f7ea fc39 	bl	80015e8 <__aeabi_dadd>
 8016d76:	0004      	movs	r4, r0
 8016d78:	0038      	movs	r0, r7
 8016d7a:	000d      	movs	r5, r1
 8016d7c:	f7ec fa9e 	bl	80032bc <__aeabi_i2d>
 8016d80:	4a96      	ldr	r2, [pc, #600]	@ (8016fdc <_dtoa_r+0x380>)
 8016d82:	4b97      	ldr	r3, [pc, #604]	@ (8016fe0 <_dtoa_r+0x384>)
 8016d84:	f7eb fbd8 	bl	8002538 <__aeabi_dmul>
 8016d88:	0002      	movs	r2, r0
 8016d8a:	000b      	movs	r3, r1
 8016d8c:	0020      	movs	r0, r4
 8016d8e:	0029      	movs	r1, r5
 8016d90:	f7ea fc2a 	bl	80015e8 <__aeabi_dadd>
 8016d94:	0004      	movs	r4, r0
 8016d96:	000d      	movs	r5, r1
 8016d98:	f7ec fa54 	bl	8003244 <__aeabi_d2iz>
 8016d9c:	2200      	movs	r2, #0
 8016d9e:	9004      	str	r0, [sp, #16]
 8016da0:	2300      	movs	r3, #0
 8016da2:	0020      	movs	r0, r4
 8016da4:	0029      	movs	r1, r5
 8016da6:	f7e9 fb57 	bl	8000458 <__aeabi_dcmplt>
 8016daa:	2800      	cmp	r0, #0
 8016dac:	d00b      	beq.n	8016dc6 <_dtoa_r+0x16a>
 8016dae:	9804      	ldr	r0, [sp, #16]
 8016db0:	f7ec fa84 	bl	80032bc <__aeabi_i2d>
 8016db4:	002b      	movs	r3, r5
 8016db6:	0022      	movs	r2, r4
 8016db8:	f7e9 fb48 	bl	800044c <__aeabi_dcmpeq>
 8016dbc:	4243      	negs	r3, r0
 8016dbe:	4158      	adcs	r0, r3
 8016dc0:	9b04      	ldr	r3, [sp, #16]
 8016dc2:	1a1b      	subs	r3, r3, r0
 8016dc4:	9304      	str	r3, [sp, #16]
 8016dc6:	2301      	movs	r3, #1
 8016dc8:	9315      	str	r3, [sp, #84]	@ 0x54
 8016dca:	9b04      	ldr	r3, [sp, #16]
 8016dcc:	2b16      	cmp	r3, #22
 8016dce:	d810      	bhi.n	8016df2 <_dtoa_r+0x196>
 8016dd0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016dd2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8016dd4:	9a04      	ldr	r2, [sp, #16]
 8016dd6:	4b83      	ldr	r3, [pc, #524]	@ (8016fe4 <_dtoa_r+0x388>)
 8016dd8:	00d2      	lsls	r2, r2, #3
 8016dda:	189b      	adds	r3, r3, r2
 8016ddc:	681a      	ldr	r2, [r3, #0]
 8016dde:	685b      	ldr	r3, [r3, #4]
 8016de0:	f7e9 fb3a 	bl	8000458 <__aeabi_dcmplt>
 8016de4:	2800      	cmp	r0, #0
 8016de6:	d047      	beq.n	8016e78 <_dtoa_r+0x21c>
 8016de8:	9b04      	ldr	r3, [sp, #16]
 8016dea:	3b01      	subs	r3, #1
 8016dec:	9304      	str	r3, [sp, #16]
 8016dee:	2300      	movs	r3, #0
 8016df0:	9315      	str	r3, [sp, #84]	@ 0x54
 8016df2:	2200      	movs	r2, #0
 8016df4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8016df6:	9206      	str	r2, [sp, #24]
 8016df8:	1bdb      	subs	r3, r3, r7
 8016dfa:	1e5a      	subs	r2, r3, #1
 8016dfc:	d53e      	bpl.n	8016e7c <_dtoa_r+0x220>
 8016dfe:	2201      	movs	r2, #1
 8016e00:	1ad3      	subs	r3, r2, r3
 8016e02:	9306      	str	r3, [sp, #24]
 8016e04:	2300      	movs	r3, #0
 8016e06:	930d      	str	r3, [sp, #52]	@ 0x34
 8016e08:	9b04      	ldr	r3, [sp, #16]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	db38      	blt.n	8016e80 <_dtoa_r+0x224>
 8016e0e:	9a04      	ldr	r2, [sp, #16]
 8016e10:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016e12:	4694      	mov	ip, r2
 8016e14:	4463      	add	r3, ip
 8016e16:	930d      	str	r3, [sp, #52]	@ 0x34
 8016e18:	2300      	movs	r3, #0
 8016e1a:	9214      	str	r2, [sp, #80]	@ 0x50
 8016e1c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016e1e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8016e20:	2401      	movs	r4, #1
 8016e22:	2b09      	cmp	r3, #9
 8016e24:	d867      	bhi.n	8016ef6 <_dtoa_r+0x29a>
 8016e26:	2b05      	cmp	r3, #5
 8016e28:	dd02      	ble.n	8016e30 <_dtoa_r+0x1d4>
 8016e2a:	2400      	movs	r4, #0
 8016e2c:	3b04      	subs	r3, #4
 8016e2e:	9322      	str	r3, [sp, #136]	@ 0x88
 8016e30:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8016e32:	1e98      	subs	r0, r3, #2
 8016e34:	2803      	cmp	r0, #3
 8016e36:	d867      	bhi.n	8016f08 <_dtoa_r+0x2ac>
 8016e38:	f7e9 f96e 	bl	8000118 <__gnu_thumb1_case_uqi>
 8016e3c:	5b383a2b 	.word	0x5b383a2b
 8016e40:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8016e42:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8016e44:	18f6      	adds	r6, r6, r3
 8016e46:	4b68      	ldr	r3, [pc, #416]	@ (8016fe8 <_dtoa_r+0x38c>)
 8016e48:	18f2      	adds	r2, r6, r3
 8016e4a:	2a20      	cmp	r2, #32
 8016e4c:	dd0f      	ble.n	8016e6e <_dtoa_r+0x212>
 8016e4e:	2340      	movs	r3, #64	@ 0x40
 8016e50:	1a9b      	subs	r3, r3, r2
 8016e52:	409f      	lsls	r7, r3
 8016e54:	4b65      	ldr	r3, [pc, #404]	@ (8016fec <_dtoa_r+0x390>)
 8016e56:	0038      	movs	r0, r7
 8016e58:	18f3      	adds	r3, r6, r3
 8016e5a:	40dc      	lsrs	r4, r3
 8016e5c:	4320      	orrs	r0, r4
 8016e5e:	f7ec fa5b 	bl	8003318 <__aeabi_ui2d>
 8016e62:	2201      	movs	r2, #1
 8016e64:	4b62      	ldr	r3, [pc, #392]	@ (8016ff0 <_dtoa_r+0x394>)
 8016e66:	1e77      	subs	r7, r6, #1
 8016e68:	18cb      	adds	r3, r1, r3
 8016e6a:	9218      	str	r2, [sp, #96]	@ 0x60
 8016e6c:	e776      	b.n	8016d5c <_dtoa_r+0x100>
 8016e6e:	2320      	movs	r3, #32
 8016e70:	0020      	movs	r0, r4
 8016e72:	1a9b      	subs	r3, r3, r2
 8016e74:	4098      	lsls	r0, r3
 8016e76:	e7f2      	b.n	8016e5e <_dtoa_r+0x202>
 8016e78:	9015      	str	r0, [sp, #84]	@ 0x54
 8016e7a:	e7ba      	b.n	8016df2 <_dtoa_r+0x196>
 8016e7c:	920d      	str	r2, [sp, #52]	@ 0x34
 8016e7e:	e7c3      	b.n	8016e08 <_dtoa_r+0x1ac>
 8016e80:	9b06      	ldr	r3, [sp, #24]
 8016e82:	9a04      	ldr	r2, [sp, #16]
 8016e84:	1a9b      	subs	r3, r3, r2
 8016e86:	9306      	str	r3, [sp, #24]
 8016e88:	4253      	negs	r3, r2
 8016e8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016e8c:	2300      	movs	r3, #0
 8016e8e:	9314      	str	r3, [sp, #80]	@ 0x50
 8016e90:	e7c5      	b.n	8016e1e <_dtoa_r+0x1c2>
 8016e92:	2300      	movs	r3, #0
 8016e94:	9310      	str	r3, [sp, #64]	@ 0x40
 8016e96:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8016e98:	930e      	str	r3, [sp, #56]	@ 0x38
 8016e9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	dc13      	bgt.n	8016ec8 <_dtoa_r+0x26c>
 8016ea0:	2301      	movs	r3, #1
 8016ea2:	001a      	movs	r2, r3
 8016ea4:	930e      	str	r3, [sp, #56]	@ 0x38
 8016ea6:	9309      	str	r3, [sp, #36]	@ 0x24
 8016ea8:	9223      	str	r2, [sp, #140]	@ 0x8c
 8016eaa:	e00d      	b.n	8016ec8 <_dtoa_r+0x26c>
 8016eac:	2301      	movs	r3, #1
 8016eae:	e7f1      	b.n	8016e94 <_dtoa_r+0x238>
 8016eb0:	2300      	movs	r3, #0
 8016eb2:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8016eb4:	9310      	str	r3, [sp, #64]	@ 0x40
 8016eb6:	4694      	mov	ip, r2
 8016eb8:	9b04      	ldr	r3, [sp, #16]
 8016eba:	4463      	add	r3, ip
 8016ebc:	930e      	str	r3, [sp, #56]	@ 0x38
 8016ebe:	3301      	adds	r3, #1
 8016ec0:	9309      	str	r3, [sp, #36]	@ 0x24
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	dc00      	bgt.n	8016ec8 <_dtoa_r+0x26c>
 8016ec6:	2301      	movs	r3, #1
 8016ec8:	9a03      	ldr	r2, [sp, #12]
 8016eca:	2100      	movs	r1, #0
 8016ecc:	69d0      	ldr	r0, [r2, #28]
 8016ece:	2204      	movs	r2, #4
 8016ed0:	0015      	movs	r5, r2
 8016ed2:	3514      	adds	r5, #20
 8016ed4:	429d      	cmp	r5, r3
 8016ed6:	d91b      	bls.n	8016f10 <_dtoa_r+0x2b4>
 8016ed8:	6041      	str	r1, [r0, #4]
 8016eda:	9803      	ldr	r0, [sp, #12]
 8016edc:	f000 fdb8 	bl	8017a50 <_Balloc>
 8016ee0:	9008      	str	r0, [sp, #32]
 8016ee2:	2800      	cmp	r0, #0
 8016ee4:	d117      	bne.n	8016f16 <_dtoa_r+0x2ba>
 8016ee6:	21b0      	movs	r1, #176	@ 0xb0
 8016ee8:	4b42      	ldr	r3, [pc, #264]	@ (8016ff4 <_dtoa_r+0x398>)
 8016eea:	482e      	ldr	r0, [pc, #184]	@ (8016fa4 <_dtoa_r+0x348>)
 8016eec:	9a08      	ldr	r2, [sp, #32]
 8016eee:	31ff      	adds	r1, #255	@ 0xff
 8016ef0:	e6c9      	b.n	8016c86 <_dtoa_r+0x2a>
 8016ef2:	2301      	movs	r3, #1
 8016ef4:	e7dd      	b.n	8016eb2 <_dtoa_r+0x256>
 8016ef6:	2300      	movs	r3, #0
 8016ef8:	9410      	str	r4, [sp, #64]	@ 0x40
 8016efa:	9322      	str	r3, [sp, #136]	@ 0x88
 8016efc:	3b01      	subs	r3, #1
 8016efe:	930e      	str	r3, [sp, #56]	@ 0x38
 8016f00:	9309      	str	r3, [sp, #36]	@ 0x24
 8016f02:	2200      	movs	r2, #0
 8016f04:	3313      	adds	r3, #19
 8016f06:	e7cf      	b.n	8016ea8 <_dtoa_r+0x24c>
 8016f08:	2301      	movs	r3, #1
 8016f0a:	9310      	str	r3, [sp, #64]	@ 0x40
 8016f0c:	3b02      	subs	r3, #2
 8016f0e:	e7f6      	b.n	8016efe <_dtoa_r+0x2a2>
 8016f10:	3101      	adds	r1, #1
 8016f12:	0052      	lsls	r2, r2, #1
 8016f14:	e7dc      	b.n	8016ed0 <_dtoa_r+0x274>
 8016f16:	9b03      	ldr	r3, [sp, #12]
 8016f18:	9a08      	ldr	r2, [sp, #32]
 8016f1a:	69db      	ldr	r3, [r3, #28]
 8016f1c:	601a      	str	r2, [r3, #0]
 8016f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016f20:	2b0e      	cmp	r3, #14
 8016f22:	d900      	bls.n	8016f26 <_dtoa_r+0x2ca>
 8016f24:	e0d9      	b.n	80170da <_dtoa_r+0x47e>
 8016f26:	2c00      	cmp	r4, #0
 8016f28:	d100      	bne.n	8016f2c <_dtoa_r+0x2d0>
 8016f2a:	e0d6      	b.n	80170da <_dtoa_r+0x47e>
 8016f2c:	9b04      	ldr	r3, [sp, #16]
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	dd64      	ble.n	8016ffc <_dtoa_r+0x3a0>
 8016f32:	210f      	movs	r1, #15
 8016f34:	9a04      	ldr	r2, [sp, #16]
 8016f36:	4b2b      	ldr	r3, [pc, #172]	@ (8016fe4 <_dtoa_r+0x388>)
 8016f38:	400a      	ands	r2, r1
 8016f3a:	00d2      	lsls	r2, r2, #3
 8016f3c:	189b      	adds	r3, r3, r2
 8016f3e:	681e      	ldr	r6, [r3, #0]
 8016f40:	685f      	ldr	r7, [r3, #4]
 8016f42:	9b04      	ldr	r3, [sp, #16]
 8016f44:	2402      	movs	r4, #2
 8016f46:	111d      	asrs	r5, r3, #4
 8016f48:	05db      	lsls	r3, r3, #23
 8016f4a:	d50a      	bpl.n	8016f62 <_dtoa_r+0x306>
 8016f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8016ff8 <_dtoa_r+0x39c>)
 8016f4e:	400d      	ands	r5, r1
 8016f50:	6a1a      	ldr	r2, [r3, #32]
 8016f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f54:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016f56:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8016f58:	f7ea feaa 	bl	8001cb0 <__aeabi_ddiv>
 8016f5c:	900a      	str	r0, [sp, #40]	@ 0x28
 8016f5e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016f60:	3401      	adds	r4, #1
 8016f62:	4b25      	ldr	r3, [pc, #148]	@ (8016ff8 <_dtoa_r+0x39c>)
 8016f64:	930c      	str	r3, [sp, #48]	@ 0x30
 8016f66:	2d00      	cmp	r5, #0
 8016f68:	d108      	bne.n	8016f7c <_dtoa_r+0x320>
 8016f6a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8016f6c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016f6e:	0032      	movs	r2, r6
 8016f70:	003b      	movs	r3, r7
 8016f72:	f7ea fe9d 	bl	8001cb0 <__aeabi_ddiv>
 8016f76:	900a      	str	r0, [sp, #40]	@ 0x28
 8016f78:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016f7a:	e05a      	b.n	8017032 <_dtoa_r+0x3d6>
 8016f7c:	2301      	movs	r3, #1
 8016f7e:	421d      	tst	r5, r3
 8016f80:	d009      	beq.n	8016f96 <_dtoa_r+0x33a>
 8016f82:	18e4      	adds	r4, r4, r3
 8016f84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016f86:	0030      	movs	r0, r6
 8016f88:	681a      	ldr	r2, [r3, #0]
 8016f8a:	685b      	ldr	r3, [r3, #4]
 8016f8c:	0039      	movs	r1, r7
 8016f8e:	f7eb fad3 	bl	8002538 <__aeabi_dmul>
 8016f92:	0006      	movs	r6, r0
 8016f94:	000f      	movs	r7, r1
 8016f96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016f98:	106d      	asrs	r5, r5, #1
 8016f9a:	3308      	adds	r3, #8
 8016f9c:	e7e2      	b.n	8016f64 <_dtoa_r+0x308>
 8016f9e:	46c0      	nop			@ (mov r8, r8)
 8016fa0:	0801a4d1 	.word	0x0801a4d1
 8016fa4:	0801a4e8 	.word	0x0801a4e8
 8016fa8:	7ff00000 	.word	0x7ff00000
 8016fac:	0000270f 	.word	0x0000270f
 8016fb0:	0801a4cd 	.word	0x0801a4cd
 8016fb4:	0801a4d0 	.word	0x0801a4d0
 8016fb8:	0801a4a1 	.word	0x0801a4a1
 8016fbc:	0801a4a0 	.word	0x0801a4a0
 8016fc0:	3ff00000 	.word	0x3ff00000
 8016fc4:	fffffc01 	.word	0xfffffc01
 8016fc8:	3ff80000 	.word	0x3ff80000
 8016fcc:	636f4361 	.word	0x636f4361
 8016fd0:	3fd287a7 	.word	0x3fd287a7
 8016fd4:	8b60c8b3 	.word	0x8b60c8b3
 8016fd8:	3fc68a28 	.word	0x3fc68a28
 8016fdc:	509f79fb 	.word	0x509f79fb
 8016fe0:	3fd34413 	.word	0x3fd34413
 8016fe4:	0801a5e0 	.word	0x0801a5e0
 8016fe8:	00000432 	.word	0x00000432
 8016fec:	00000412 	.word	0x00000412
 8016ff0:	fe100000 	.word	0xfe100000
 8016ff4:	0801a540 	.word	0x0801a540
 8016ff8:	0801a5b8 	.word	0x0801a5b8
 8016ffc:	9b04      	ldr	r3, [sp, #16]
 8016ffe:	2402      	movs	r4, #2
 8017000:	2b00      	cmp	r3, #0
 8017002:	d016      	beq.n	8017032 <_dtoa_r+0x3d6>
 8017004:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8017006:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8017008:	220f      	movs	r2, #15
 801700a:	425d      	negs	r5, r3
 801700c:	402a      	ands	r2, r5
 801700e:	4bd7      	ldr	r3, [pc, #860]	@ (801736c <_dtoa_r+0x710>)
 8017010:	00d2      	lsls	r2, r2, #3
 8017012:	189b      	adds	r3, r3, r2
 8017014:	681a      	ldr	r2, [r3, #0]
 8017016:	685b      	ldr	r3, [r3, #4]
 8017018:	f7eb fa8e 	bl	8002538 <__aeabi_dmul>
 801701c:	2701      	movs	r7, #1
 801701e:	2300      	movs	r3, #0
 8017020:	900a      	str	r0, [sp, #40]	@ 0x28
 8017022:	910b      	str	r1, [sp, #44]	@ 0x2c
 8017024:	4ed2      	ldr	r6, [pc, #840]	@ (8017370 <_dtoa_r+0x714>)
 8017026:	112d      	asrs	r5, r5, #4
 8017028:	2d00      	cmp	r5, #0
 801702a:	d000      	beq.n	801702e <_dtoa_r+0x3d2>
 801702c:	e0ba      	b.n	80171a4 <_dtoa_r+0x548>
 801702e:	2b00      	cmp	r3, #0
 8017030:	d1a1      	bne.n	8016f76 <_dtoa_r+0x31a>
 8017032:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8017034:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8017036:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017038:	2b00      	cmp	r3, #0
 801703a:	d100      	bne.n	801703e <_dtoa_r+0x3e2>
 801703c:	e0bd      	b.n	80171ba <_dtoa_r+0x55e>
 801703e:	2200      	movs	r2, #0
 8017040:	0030      	movs	r0, r6
 8017042:	0039      	movs	r1, r7
 8017044:	4bcb      	ldr	r3, [pc, #812]	@ (8017374 <_dtoa_r+0x718>)
 8017046:	f7e9 fa07 	bl	8000458 <__aeabi_dcmplt>
 801704a:	2800      	cmp	r0, #0
 801704c:	d100      	bne.n	8017050 <_dtoa_r+0x3f4>
 801704e:	e0b4      	b.n	80171ba <_dtoa_r+0x55e>
 8017050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017052:	2b00      	cmp	r3, #0
 8017054:	d100      	bne.n	8017058 <_dtoa_r+0x3fc>
 8017056:	e0b0      	b.n	80171ba <_dtoa_r+0x55e>
 8017058:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801705a:	2b00      	cmp	r3, #0
 801705c:	dd39      	ble.n	80170d2 <_dtoa_r+0x476>
 801705e:	9b04      	ldr	r3, [sp, #16]
 8017060:	2200      	movs	r2, #0
 8017062:	3b01      	subs	r3, #1
 8017064:	930c      	str	r3, [sp, #48]	@ 0x30
 8017066:	0030      	movs	r0, r6
 8017068:	4bc3      	ldr	r3, [pc, #780]	@ (8017378 <_dtoa_r+0x71c>)
 801706a:	0039      	movs	r1, r7
 801706c:	f7eb fa64 	bl	8002538 <__aeabi_dmul>
 8017070:	900a      	str	r0, [sp, #40]	@ 0x28
 8017072:	910b      	str	r1, [sp, #44]	@ 0x2c
 8017074:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017076:	3401      	adds	r4, #1
 8017078:	0020      	movs	r0, r4
 801707a:	9311      	str	r3, [sp, #68]	@ 0x44
 801707c:	f7ec f91e 	bl	80032bc <__aeabi_i2d>
 8017080:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017082:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017084:	f7eb fa58 	bl	8002538 <__aeabi_dmul>
 8017088:	4bbc      	ldr	r3, [pc, #752]	@ (801737c <_dtoa_r+0x720>)
 801708a:	2200      	movs	r2, #0
 801708c:	f7ea faac 	bl	80015e8 <__aeabi_dadd>
 8017090:	4bbb      	ldr	r3, [pc, #748]	@ (8017380 <_dtoa_r+0x724>)
 8017092:	0006      	movs	r6, r0
 8017094:	18cf      	adds	r7, r1, r3
 8017096:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017098:	2b00      	cmp	r3, #0
 801709a:	d000      	beq.n	801709e <_dtoa_r+0x442>
 801709c:	e091      	b.n	80171c2 <_dtoa_r+0x566>
 801709e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80170a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80170a2:	2200      	movs	r2, #0
 80170a4:	4bb7      	ldr	r3, [pc, #732]	@ (8017384 <_dtoa_r+0x728>)
 80170a6:	f7eb fd0f 	bl	8002ac8 <__aeabi_dsub>
 80170aa:	0032      	movs	r2, r6
 80170ac:	003b      	movs	r3, r7
 80170ae:	0004      	movs	r4, r0
 80170b0:	000d      	movs	r5, r1
 80170b2:	f7e9 f9e5 	bl	8000480 <__aeabi_dcmpgt>
 80170b6:	2800      	cmp	r0, #0
 80170b8:	d000      	beq.n	80170bc <_dtoa_r+0x460>
 80170ba:	e29d      	b.n	80175f8 <_dtoa_r+0x99c>
 80170bc:	2180      	movs	r1, #128	@ 0x80
 80170be:	0609      	lsls	r1, r1, #24
 80170c0:	187b      	adds	r3, r7, r1
 80170c2:	0032      	movs	r2, r6
 80170c4:	0020      	movs	r0, r4
 80170c6:	0029      	movs	r1, r5
 80170c8:	f7e9 f9c6 	bl	8000458 <__aeabi_dcmplt>
 80170cc:	2800      	cmp	r0, #0
 80170ce:	d000      	beq.n	80170d2 <_dtoa_r+0x476>
 80170d0:	e130      	b.n	8017334 <_dtoa_r+0x6d8>
 80170d2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80170d4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80170d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80170d8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80170da:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80170dc:	2b00      	cmp	r3, #0
 80170de:	da00      	bge.n	80170e2 <_dtoa_r+0x486>
 80170e0:	e177      	b.n	80173d2 <_dtoa_r+0x776>
 80170e2:	9a04      	ldr	r2, [sp, #16]
 80170e4:	2a0e      	cmp	r2, #14
 80170e6:	dd00      	ble.n	80170ea <_dtoa_r+0x48e>
 80170e8:	e173      	b.n	80173d2 <_dtoa_r+0x776>
 80170ea:	4ba0      	ldr	r3, [pc, #640]	@ (801736c <_dtoa_r+0x710>)
 80170ec:	00d2      	lsls	r2, r2, #3
 80170ee:	189b      	adds	r3, r3, r2
 80170f0:	685c      	ldr	r4, [r3, #4]
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	9306      	str	r3, [sp, #24]
 80170f6:	9407      	str	r4, [sp, #28]
 80170f8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	da03      	bge.n	8017106 <_dtoa_r+0x4aa>
 80170fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017100:	2b00      	cmp	r3, #0
 8017102:	dc00      	bgt.n	8017106 <_dtoa_r+0x4aa>
 8017104:	e106      	b.n	8017314 <_dtoa_r+0x6b8>
 8017106:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8017108:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801710a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801710c:	9d08      	ldr	r5, [sp, #32]
 801710e:	3b01      	subs	r3, #1
 8017110:	195b      	adds	r3, r3, r5
 8017112:	930a      	str	r3, [sp, #40]	@ 0x28
 8017114:	9a06      	ldr	r2, [sp, #24]
 8017116:	9b07      	ldr	r3, [sp, #28]
 8017118:	0030      	movs	r0, r6
 801711a:	0039      	movs	r1, r7
 801711c:	f7ea fdc8 	bl	8001cb0 <__aeabi_ddiv>
 8017120:	f7ec f890 	bl	8003244 <__aeabi_d2iz>
 8017124:	9009      	str	r0, [sp, #36]	@ 0x24
 8017126:	f7ec f8c9 	bl	80032bc <__aeabi_i2d>
 801712a:	9a06      	ldr	r2, [sp, #24]
 801712c:	9b07      	ldr	r3, [sp, #28]
 801712e:	f7eb fa03 	bl	8002538 <__aeabi_dmul>
 8017132:	0002      	movs	r2, r0
 8017134:	000b      	movs	r3, r1
 8017136:	0030      	movs	r0, r6
 8017138:	0039      	movs	r1, r7
 801713a:	f7eb fcc5 	bl	8002ac8 <__aeabi_dsub>
 801713e:	002b      	movs	r3, r5
 8017140:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017142:	3501      	adds	r5, #1
 8017144:	3230      	adds	r2, #48	@ 0x30
 8017146:	701a      	strb	r2, [r3, #0]
 8017148:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801714a:	002c      	movs	r4, r5
 801714c:	429a      	cmp	r2, r3
 801714e:	d000      	beq.n	8017152 <_dtoa_r+0x4f6>
 8017150:	e131      	b.n	80173b6 <_dtoa_r+0x75a>
 8017152:	0002      	movs	r2, r0
 8017154:	000b      	movs	r3, r1
 8017156:	f7ea fa47 	bl	80015e8 <__aeabi_dadd>
 801715a:	9a06      	ldr	r2, [sp, #24]
 801715c:	9b07      	ldr	r3, [sp, #28]
 801715e:	0006      	movs	r6, r0
 8017160:	000f      	movs	r7, r1
 8017162:	f7e9 f98d 	bl	8000480 <__aeabi_dcmpgt>
 8017166:	2800      	cmp	r0, #0
 8017168:	d000      	beq.n	801716c <_dtoa_r+0x510>
 801716a:	e10f      	b.n	801738c <_dtoa_r+0x730>
 801716c:	9a06      	ldr	r2, [sp, #24]
 801716e:	9b07      	ldr	r3, [sp, #28]
 8017170:	0030      	movs	r0, r6
 8017172:	0039      	movs	r1, r7
 8017174:	f7e9 f96a 	bl	800044c <__aeabi_dcmpeq>
 8017178:	2800      	cmp	r0, #0
 801717a:	d003      	beq.n	8017184 <_dtoa_r+0x528>
 801717c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801717e:	07dd      	lsls	r5, r3, #31
 8017180:	d500      	bpl.n	8017184 <_dtoa_r+0x528>
 8017182:	e103      	b.n	801738c <_dtoa_r+0x730>
 8017184:	9905      	ldr	r1, [sp, #20]
 8017186:	9803      	ldr	r0, [sp, #12]
 8017188:	f000 fca6 	bl	8017ad8 <_Bfree>
 801718c:	2300      	movs	r3, #0
 801718e:	7023      	strb	r3, [r4, #0]
 8017190:	9b04      	ldr	r3, [sp, #16]
 8017192:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8017194:	3301      	adds	r3, #1
 8017196:	6013      	str	r3, [r2, #0]
 8017198:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801719a:	2b00      	cmp	r3, #0
 801719c:	d100      	bne.n	80171a0 <_dtoa_r+0x544>
 801719e:	e5a7      	b.n	8016cf0 <_dtoa_r+0x94>
 80171a0:	601c      	str	r4, [r3, #0]
 80171a2:	e5a5      	b.n	8016cf0 <_dtoa_r+0x94>
 80171a4:	423d      	tst	r5, r7
 80171a6:	d005      	beq.n	80171b4 <_dtoa_r+0x558>
 80171a8:	6832      	ldr	r2, [r6, #0]
 80171aa:	6873      	ldr	r3, [r6, #4]
 80171ac:	f7eb f9c4 	bl	8002538 <__aeabi_dmul>
 80171b0:	003b      	movs	r3, r7
 80171b2:	3401      	adds	r4, #1
 80171b4:	106d      	asrs	r5, r5, #1
 80171b6:	3608      	adds	r6, #8
 80171b8:	e736      	b.n	8017028 <_dtoa_r+0x3cc>
 80171ba:	9b04      	ldr	r3, [sp, #16]
 80171bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80171be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80171c0:	e75a      	b.n	8017078 <_dtoa_r+0x41c>
 80171c2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80171c4:	4b69      	ldr	r3, [pc, #420]	@ (801736c <_dtoa_r+0x710>)
 80171c6:	3a01      	subs	r2, #1
 80171c8:	00d2      	lsls	r2, r2, #3
 80171ca:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80171cc:	189b      	adds	r3, r3, r2
 80171ce:	681a      	ldr	r2, [r3, #0]
 80171d0:	685b      	ldr	r3, [r3, #4]
 80171d2:	2900      	cmp	r1, #0
 80171d4:	d04c      	beq.n	8017270 <_dtoa_r+0x614>
 80171d6:	2000      	movs	r0, #0
 80171d8:	496b      	ldr	r1, [pc, #428]	@ (8017388 <_dtoa_r+0x72c>)
 80171da:	f7ea fd69 	bl	8001cb0 <__aeabi_ddiv>
 80171de:	0032      	movs	r2, r6
 80171e0:	003b      	movs	r3, r7
 80171e2:	f7eb fc71 	bl	8002ac8 <__aeabi_dsub>
 80171e6:	9a08      	ldr	r2, [sp, #32]
 80171e8:	0006      	movs	r6, r0
 80171ea:	4694      	mov	ip, r2
 80171ec:	000f      	movs	r7, r1
 80171ee:	9b08      	ldr	r3, [sp, #32]
 80171f0:	9316      	str	r3, [sp, #88]	@ 0x58
 80171f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80171f4:	4463      	add	r3, ip
 80171f6:	9311      	str	r3, [sp, #68]	@ 0x44
 80171f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80171fa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80171fc:	f7ec f822 	bl	8003244 <__aeabi_d2iz>
 8017200:	0005      	movs	r5, r0
 8017202:	f7ec f85b 	bl	80032bc <__aeabi_i2d>
 8017206:	0002      	movs	r2, r0
 8017208:	000b      	movs	r3, r1
 801720a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801720c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801720e:	f7eb fc5b 	bl	8002ac8 <__aeabi_dsub>
 8017212:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8017214:	3530      	adds	r5, #48	@ 0x30
 8017216:	1c5c      	adds	r4, r3, #1
 8017218:	701d      	strb	r5, [r3, #0]
 801721a:	0032      	movs	r2, r6
 801721c:	003b      	movs	r3, r7
 801721e:	900a      	str	r0, [sp, #40]	@ 0x28
 8017220:	910b      	str	r1, [sp, #44]	@ 0x2c
 8017222:	f7e9 f919 	bl	8000458 <__aeabi_dcmplt>
 8017226:	2800      	cmp	r0, #0
 8017228:	d16a      	bne.n	8017300 <_dtoa_r+0x6a4>
 801722a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801722c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801722e:	2000      	movs	r0, #0
 8017230:	4950      	ldr	r1, [pc, #320]	@ (8017374 <_dtoa_r+0x718>)
 8017232:	f7eb fc49 	bl	8002ac8 <__aeabi_dsub>
 8017236:	0032      	movs	r2, r6
 8017238:	003b      	movs	r3, r7
 801723a:	f7e9 f90d 	bl	8000458 <__aeabi_dcmplt>
 801723e:	2800      	cmp	r0, #0
 8017240:	d000      	beq.n	8017244 <_dtoa_r+0x5e8>
 8017242:	e0a5      	b.n	8017390 <_dtoa_r+0x734>
 8017244:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017246:	42a3      	cmp	r3, r4
 8017248:	d100      	bne.n	801724c <_dtoa_r+0x5f0>
 801724a:	e742      	b.n	80170d2 <_dtoa_r+0x476>
 801724c:	2200      	movs	r2, #0
 801724e:	0030      	movs	r0, r6
 8017250:	0039      	movs	r1, r7
 8017252:	4b49      	ldr	r3, [pc, #292]	@ (8017378 <_dtoa_r+0x71c>)
 8017254:	f7eb f970 	bl	8002538 <__aeabi_dmul>
 8017258:	2200      	movs	r2, #0
 801725a:	0006      	movs	r6, r0
 801725c:	000f      	movs	r7, r1
 801725e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8017260:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017262:	4b45      	ldr	r3, [pc, #276]	@ (8017378 <_dtoa_r+0x71c>)
 8017264:	f7eb f968 	bl	8002538 <__aeabi_dmul>
 8017268:	9416      	str	r4, [sp, #88]	@ 0x58
 801726a:	900a      	str	r0, [sp, #40]	@ 0x28
 801726c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801726e:	e7c3      	b.n	80171f8 <_dtoa_r+0x59c>
 8017270:	0030      	movs	r0, r6
 8017272:	0039      	movs	r1, r7
 8017274:	f7eb f960 	bl	8002538 <__aeabi_dmul>
 8017278:	9d08      	ldr	r5, [sp, #32]
 801727a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801727c:	002b      	movs	r3, r5
 801727e:	4694      	mov	ip, r2
 8017280:	9016      	str	r0, [sp, #88]	@ 0x58
 8017282:	9117      	str	r1, [sp, #92]	@ 0x5c
 8017284:	4463      	add	r3, ip
 8017286:	9319      	str	r3, [sp, #100]	@ 0x64
 8017288:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801728a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801728c:	f7eb ffda 	bl	8003244 <__aeabi_d2iz>
 8017290:	0004      	movs	r4, r0
 8017292:	f7ec f813 	bl	80032bc <__aeabi_i2d>
 8017296:	000b      	movs	r3, r1
 8017298:	0002      	movs	r2, r0
 801729a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801729c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801729e:	f7eb fc13 	bl	8002ac8 <__aeabi_dsub>
 80172a2:	3430      	adds	r4, #48	@ 0x30
 80172a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80172a6:	702c      	strb	r4, [r5, #0]
 80172a8:	3501      	adds	r5, #1
 80172aa:	0006      	movs	r6, r0
 80172ac:	000f      	movs	r7, r1
 80172ae:	42ab      	cmp	r3, r5
 80172b0:	d129      	bne.n	8017306 <_dtoa_r+0x6aa>
 80172b2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80172b4:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80172b6:	9b08      	ldr	r3, [sp, #32]
 80172b8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80172ba:	469c      	mov	ip, r3
 80172bc:	2200      	movs	r2, #0
 80172be:	4b32      	ldr	r3, [pc, #200]	@ (8017388 <_dtoa_r+0x72c>)
 80172c0:	4464      	add	r4, ip
 80172c2:	f7ea f991 	bl	80015e8 <__aeabi_dadd>
 80172c6:	0002      	movs	r2, r0
 80172c8:	000b      	movs	r3, r1
 80172ca:	0030      	movs	r0, r6
 80172cc:	0039      	movs	r1, r7
 80172ce:	f7e9 f8d7 	bl	8000480 <__aeabi_dcmpgt>
 80172d2:	2800      	cmp	r0, #0
 80172d4:	d15c      	bne.n	8017390 <_dtoa_r+0x734>
 80172d6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80172d8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80172da:	2000      	movs	r0, #0
 80172dc:	492a      	ldr	r1, [pc, #168]	@ (8017388 <_dtoa_r+0x72c>)
 80172de:	f7eb fbf3 	bl	8002ac8 <__aeabi_dsub>
 80172e2:	0002      	movs	r2, r0
 80172e4:	000b      	movs	r3, r1
 80172e6:	0030      	movs	r0, r6
 80172e8:	0039      	movs	r1, r7
 80172ea:	f7e9 f8b5 	bl	8000458 <__aeabi_dcmplt>
 80172ee:	2800      	cmp	r0, #0
 80172f0:	d100      	bne.n	80172f4 <_dtoa_r+0x698>
 80172f2:	e6ee      	b.n	80170d2 <_dtoa_r+0x476>
 80172f4:	0023      	movs	r3, r4
 80172f6:	3c01      	subs	r4, #1
 80172f8:	7822      	ldrb	r2, [r4, #0]
 80172fa:	2a30      	cmp	r2, #48	@ 0x30
 80172fc:	d0fa      	beq.n	80172f4 <_dtoa_r+0x698>
 80172fe:	001c      	movs	r4, r3
 8017300:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017302:	9304      	str	r3, [sp, #16]
 8017304:	e73e      	b.n	8017184 <_dtoa_r+0x528>
 8017306:	2200      	movs	r2, #0
 8017308:	4b1b      	ldr	r3, [pc, #108]	@ (8017378 <_dtoa_r+0x71c>)
 801730a:	f7eb f915 	bl	8002538 <__aeabi_dmul>
 801730e:	900a      	str	r0, [sp, #40]	@ 0x28
 8017310:	910b      	str	r1, [sp, #44]	@ 0x2c
 8017312:	e7b9      	b.n	8017288 <_dtoa_r+0x62c>
 8017314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017316:	2b00      	cmp	r3, #0
 8017318:	d10c      	bne.n	8017334 <_dtoa_r+0x6d8>
 801731a:	9806      	ldr	r0, [sp, #24]
 801731c:	9907      	ldr	r1, [sp, #28]
 801731e:	2200      	movs	r2, #0
 8017320:	4b18      	ldr	r3, [pc, #96]	@ (8017384 <_dtoa_r+0x728>)
 8017322:	f7eb f909 	bl	8002538 <__aeabi_dmul>
 8017326:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017328:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801732a:	f7e9 f8b3 	bl	8000494 <__aeabi_dcmpge>
 801732e:	2800      	cmp	r0, #0
 8017330:	d100      	bne.n	8017334 <_dtoa_r+0x6d8>
 8017332:	e164      	b.n	80175fe <_dtoa_r+0x9a2>
 8017334:	2600      	movs	r6, #0
 8017336:	0037      	movs	r7, r6
 8017338:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801733a:	9c08      	ldr	r4, [sp, #32]
 801733c:	43db      	mvns	r3, r3
 801733e:	930c      	str	r3, [sp, #48]	@ 0x30
 8017340:	2300      	movs	r3, #0
 8017342:	9304      	str	r3, [sp, #16]
 8017344:	0031      	movs	r1, r6
 8017346:	9803      	ldr	r0, [sp, #12]
 8017348:	f000 fbc6 	bl	8017ad8 <_Bfree>
 801734c:	2f00      	cmp	r7, #0
 801734e:	d0d7      	beq.n	8017300 <_dtoa_r+0x6a4>
 8017350:	9b04      	ldr	r3, [sp, #16]
 8017352:	2b00      	cmp	r3, #0
 8017354:	d005      	beq.n	8017362 <_dtoa_r+0x706>
 8017356:	42bb      	cmp	r3, r7
 8017358:	d003      	beq.n	8017362 <_dtoa_r+0x706>
 801735a:	0019      	movs	r1, r3
 801735c:	9803      	ldr	r0, [sp, #12]
 801735e:	f000 fbbb 	bl	8017ad8 <_Bfree>
 8017362:	0039      	movs	r1, r7
 8017364:	9803      	ldr	r0, [sp, #12]
 8017366:	f000 fbb7 	bl	8017ad8 <_Bfree>
 801736a:	e7c9      	b.n	8017300 <_dtoa_r+0x6a4>
 801736c:	0801a5e0 	.word	0x0801a5e0
 8017370:	0801a5b8 	.word	0x0801a5b8
 8017374:	3ff00000 	.word	0x3ff00000
 8017378:	40240000 	.word	0x40240000
 801737c:	401c0000 	.word	0x401c0000
 8017380:	fcc00000 	.word	0xfcc00000
 8017384:	40140000 	.word	0x40140000
 8017388:	3fe00000 	.word	0x3fe00000
 801738c:	9b04      	ldr	r3, [sp, #16]
 801738e:	930c      	str	r3, [sp, #48]	@ 0x30
 8017390:	0023      	movs	r3, r4
 8017392:	001c      	movs	r4, r3
 8017394:	3b01      	subs	r3, #1
 8017396:	781a      	ldrb	r2, [r3, #0]
 8017398:	2a39      	cmp	r2, #57	@ 0x39
 801739a:	d108      	bne.n	80173ae <_dtoa_r+0x752>
 801739c:	9a08      	ldr	r2, [sp, #32]
 801739e:	429a      	cmp	r2, r3
 80173a0:	d1f7      	bne.n	8017392 <_dtoa_r+0x736>
 80173a2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80173a4:	9908      	ldr	r1, [sp, #32]
 80173a6:	3201      	adds	r2, #1
 80173a8:	920c      	str	r2, [sp, #48]	@ 0x30
 80173aa:	2230      	movs	r2, #48	@ 0x30
 80173ac:	700a      	strb	r2, [r1, #0]
 80173ae:	781a      	ldrb	r2, [r3, #0]
 80173b0:	3201      	adds	r2, #1
 80173b2:	701a      	strb	r2, [r3, #0]
 80173b4:	e7a4      	b.n	8017300 <_dtoa_r+0x6a4>
 80173b6:	2200      	movs	r2, #0
 80173b8:	4bc6      	ldr	r3, [pc, #792]	@ (80176d4 <_dtoa_r+0xa78>)
 80173ba:	f7eb f8bd 	bl	8002538 <__aeabi_dmul>
 80173be:	2200      	movs	r2, #0
 80173c0:	2300      	movs	r3, #0
 80173c2:	0006      	movs	r6, r0
 80173c4:	000f      	movs	r7, r1
 80173c6:	f7e9 f841 	bl	800044c <__aeabi_dcmpeq>
 80173ca:	2800      	cmp	r0, #0
 80173cc:	d100      	bne.n	80173d0 <_dtoa_r+0x774>
 80173ce:	e6a1      	b.n	8017114 <_dtoa_r+0x4b8>
 80173d0:	e6d8      	b.n	8017184 <_dtoa_r+0x528>
 80173d2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80173d4:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80173d6:	9c06      	ldr	r4, [sp, #24]
 80173d8:	2f00      	cmp	r7, #0
 80173da:	d014      	beq.n	8017406 <_dtoa_r+0x7aa>
 80173dc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80173de:	2a01      	cmp	r2, #1
 80173e0:	dd00      	ble.n	80173e4 <_dtoa_r+0x788>
 80173e2:	e0c8      	b.n	8017576 <_dtoa_r+0x91a>
 80173e4:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80173e6:	2a00      	cmp	r2, #0
 80173e8:	d100      	bne.n	80173ec <_dtoa_r+0x790>
 80173ea:	e0be      	b.n	801756a <_dtoa_r+0x90e>
 80173ec:	4aba      	ldr	r2, [pc, #744]	@ (80176d8 <_dtoa_r+0xa7c>)
 80173ee:	189b      	adds	r3, r3, r2
 80173f0:	9a06      	ldr	r2, [sp, #24]
 80173f2:	2101      	movs	r1, #1
 80173f4:	18d2      	adds	r2, r2, r3
 80173f6:	9206      	str	r2, [sp, #24]
 80173f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80173fa:	9803      	ldr	r0, [sp, #12]
 80173fc:	18d3      	adds	r3, r2, r3
 80173fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8017400:	f000 fc22 	bl	8017c48 <__i2b>
 8017404:	0007      	movs	r7, r0
 8017406:	2c00      	cmp	r4, #0
 8017408:	d00e      	beq.n	8017428 <_dtoa_r+0x7cc>
 801740a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801740c:	2b00      	cmp	r3, #0
 801740e:	dd0b      	ble.n	8017428 <_dtoa_r+0x7cc>
 8017410:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017412:	0023      	movs	r3, r4
 8017414:	4294      	cmp	r4, r2
 8017416:	dd00      	ble.n	801741a <_dtoa_r+0x7be>
 8017418:	0013      	movs	r3, r2
 801741a:	9a06      	ldr	r2, [sp, #24]
 801741c:	1ae4      	subs	r4, r4, r3
 801741e:	1ad2      	subs	r2, r2, r3
 8017420:	9206      	str	r2, [sp, #24]
 8017422:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017424:	1ad3      	subs	r3, r2, r3
 8017426:	930d      	str	r3, [sp, #52]	@ 0x34
 8017428:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801742a:	2b00      	cmp	r3, #0
 801742c:	d01f      	beq.n	801746e <_dtoa_r+0x812>
 801742e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017430:	2b00      	cmp	r3, #0
 8017432:	d100      	bne.n	8017436 <_dtoa_r+0x7da>
 8017434:	e0b5      	b.n	80175a2 <_dtoa_r+0x946>
 8017436:	2d00      	cmp	r5, #0
 8017438:	d010      	beq.n	801745c <_dtoa_r+0x800>
 801743a:	0039      	movs	r1, r7
 801743c:	002a      	movs	r2, r5
 801743e:	9803      	ldr	r0, [sp, #12]
 8017440:	f000 fccc 	bl	8017ddc <__pow5mult>
 8017444:	9a05      	ldr	r2, [sp, #20]
 8017446:	0001      	movs	r1, r0
 8017448:	0007      	movs	r7, r0
 801744a:	9803      	ldr	r0, [sp, #12]
 801744c:	f000 fc14 	bl	8017c78 <__multiply>
 8017450:	0006      	movs	r6, r0
 8017452:	9905      	ldr	r1, [sp, #20]
 8017454:	9803      	ldr	r0, [sp, #12]
 8017456:	f000 fb3f 	bl	8017ad8 <_Bfree>
 801745a:	9605      	str	r6, [sp, #20]
 801745c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801745e:	1b5a      	subs	r2, r3, r5
 8017460:	42ab      	cmp	r3, r5
 8017462:	d004      	beq.n	801746e <_dtoa_r+0x812>
 8017464:	9905      	ldr	r1, [sp, #20]
 8017466:	9803      	ldr	r0, [sp, #12]
 8017468:	f000 fcb8 	bl	8017ddc <__pow5mult>
 801746c:	9005      	str	r0, [sp, #20]
 801746e:	2101      	movs	r1, #1
 8017470:	9803      	ldr	r0, [sp, #12]
 8017472:	f000 fbe9 	bl	8017c48 <__i2b>
 8017476:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017478:	0006      	movs	r6, r0
 801747a:	2b00      	cmp	r3, #0
 801747c:	d100      	bne.n	8017480 <_dtoa_r+0x824>
 801747e:	e1bc      	b.n	80177fa <_dtoa_r+0xb9e>
 8017480:	001a      	movs	r2, r3
 8017482:	0001      	movs	r1, r0
 8017484:	9803      	ldr	r0, [sp, #12]
 8017486:	f000 fca9 	bl	8017ddc <__pow5mult>
 801748a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801748c:	0006      	movs	r6, r0
 801748e:	2500      	movs	r5, #0
 8017490:	2b01      	cmp	r3, #1
 8017492:	dc16      	bgt.n	80174c2 <_dtoa_r+0x866>
 8017494:	2500      	movs	r5, #0
 8017496:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017498:	42ab      	cmp	r3, r5
 801749a:	d10e      	bne.n	80174ba <_dtoa_r+0x85e>
 801749c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801749e:	031b      	lsls	r3, r3, #12
 80174a0:	42ab      	cmp	r3, r5
 80174a2:	d10a      	bne.n	80174ba <_dtoa_r+0x85e>
 80174a4:	4b8d      	ldr	r3, [pc, #564]	@ (80176dc <_dtoa_r+0xa80>)
 80174a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80174a8:	4213      	tst	r3, r2
 80174aa:	d006      	beq.n	80174ba <_dtoa_r+0x85e>
 80174ac:	9b06      	ldr	r3, [sp, #24]
 80174ae:	3501      	adds	r5, #1
 80174b0:	3301      	adds	r3, #1
 80174b2:	9306      	str	r3, [sp, #24]
 80174b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80174b6:	3301      	adds	r3, #1
 80174b8:	930d      	str	r3, [sp, #52]	@ 0x34
 80174ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80174bc:	2001      	movs	r0, #1
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d008      	beq.n	80174d4 <_dtoa_r+0x878>
 80174c2:	6933      	ldr	r3, [r6, #16]
 80174c4:	3303      	adds	r3, #3
 80174c6:	009b      	lsls	r3, r3, #2
 80174c8:	18f3      	adds	r3, r6, r3
 80174ca:	6858      	ldr	r0, [r3, #4]
 80174cc:	f000 fb6c 	bl	8017ba8 <__hi0bits>
 80174d0:	2320      	movs	r3, #32
 80174d2:	1a18      	subs	r0, r3, r0
 80174d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80174d6:	1818      	adds	r0, r3, r0
 80174d8:	0002      	movs	r2, r0
 80174da:	231f      	movs	r3, #31
 80174dc:	401a      	ands	r2, r3
 80174de:	4218      	tst	r0, r3
 80174e0:	d065      	beq.n	80175ae <_dtoa_r+0x952>
 80174e2:	3301      	adds	r3, #1
 80174e4:	1a9b      	subs	r3, r3, r2
 80174e6:	2b04      	cmp	r3, #4
 80174e8:	dd5d      	ble.n	80175a6 <_dtoa_r+0x94a>
 80174ea:	231c      	movs	r3, #28
 80174ec:	1a9b      	subs	r3, r3, r2
 80174ee:	9a06      	ldr	r2, [sp, #24]
 80174f0:	18e4      	adds	r4, r4, r3
 80174f2:	18d2      	adds	r2, r2, r3
 80174f4:	9206      	str	r2, [sp, #24]
 80174f6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80174f8:	18d3      	adds	r3, r2, r3
 80174fa:	930d      	str	r3, [sp, #52]	@ 0x34
 80174fc:	9b06      	ldr	r3, [sp, #24]
 80174fe:	2b00      	cmp	r3, #0
 8017500:	dd05      	ble.n	801750e <_dtoa_r+0x8b2>
 8017502:	001a      	movs	r2, r3
 8017504:	9905      	ldr	r1, [sp, #20]
 8017506:	9803      	ldr	r0, [sp, #12]
 8017508:	f000 fcc4 	bl	8017e94 <__lshift>
 801750c:	9005      	str	r0, [sp, #20]
 801750e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017510:	2b00      	cmp	r3, #0
 8017512:	dd05      	ble.n	8017520 <_dtoa_r+0x8c4>
 8017514:	0031      	movs	r1, r6
 8017516:	001a      	movs	r2, r3
 8017518:	9803      	ldr	r0, [sp, #12]
 801751a:	f000 fcbb 	bl	8017e94 <__lshift>
 801751e:	0006      	movs	r6, r0
 8017520:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017522:	2b00      	cmp	r3, #0
 8017524:	d045      	beq.n	80175b2 <_dtoa_r+0x956>
 8017526:	0031      	movs	r1, r6
 8017528:	9805      	ldr	r0, [sp, #20]
 801752a:	f000 fd1f 	bl	8017f6c <__mcmp>
 801752e:	2800      	cmp	r0, #0
 8017530:	da3f      	bge.n	80175b2 <_dtoa_r+0x956>
 8017532:	9b04      	ldr	r3, [sp, #16]
 8017534:	220a      	movs	r2, #10
 8017536:	3b01      	subs	r3, #1
 8017538:	930c      	str	r3, [sp, #48]	@ 0x30
 801753a:	9905      	ldr	r1, [sp, #20]
 801753c:	2300      	movs	r3, #0
 801753e:	9803      	ldr	r0, [sp, #12]
 8017540:	f000 faee 	bl	8017b20 <__multadd>
 8017544:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017546:	9005      	str	r0, [sp, #20]
 8017548:	2b00      	cmp	r3, #0
 801754a:	d100      	bne.n	801754e <_dtoa_r+0x8f2>
 801754c:	e15c      	b.n	8017808 <_dtoa_r+0xbac>
 801754e:	2300      	movs	r3, #0
 8017550:	0039      	movs	r1, r7
 8017552:	220a      	movs	r2, #10
 8017554:	9803      	ldr	r0, [sp, #12]
 8017556:	f000 fae3 	bl	8017b20 <__multadd>
 801755a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801755c:	0007      	movs	r7, r0
 801755e:	2b00      	cmp	r3, #0
 8017560:	dc55      	bgt.n	801760e <_dtoa_r+0x9b2>
 8017562:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8017564:	2b02      	cmp	r3, #2
 8017566:	dc2d      	bgt.n	80175c4 <_dtoa_r+0x968>
 8017568:	e051      	b.n	801760e <_dtoa_r+0x9b2>
 801756a:	2336      	movs	r3, #54	@ 0x36
 801756c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801756e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8017570:	9c06      	ldr	r4, [sp, #24]
 8017572:	1a9b      	subs	r3, r3, r2
 8017574:	e73c      	b.n	80173f0 <_dtoa_r+0x794>
 8017576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017578:	1e5d      	subs	r5, r3, #1
 801757a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801757c:	42ab      	cmp	r3, r5
 801757e:	db08      	blt.n	8017592 <_dtoa_r+0x936>
 8017580:	1b5d      	subs	r5, r3, r5
 8017582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017584:	9c06      	ldr	r4, [sp, #24]
 8017586:	2b00      	cmp	r3, #0
 8017588:	db00      	blt.n	801758c <_dtoa_r+0x930>
 801758a:	e731      	b.n	80173f0 <_dtoa_r+0x794>
 801758c:	1ae4      	subs	r4, r4, r3
 801758e:	2300      	movs	r3, #0
 8017590:	e72e      	b.n	80173f0 <_dtoa_r+0x794>
 8017592:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017594:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017596:	1aeb      	subs	r3, r5, r3
 8017598:	18d3      	adds	r3, r2, r3
 801759a:	950f      	str	r5, [sp, #60]	@ 0x3c
 801759c:	9314      	str	r3, [sp, #80]	@ 0x50
 801759e:	2500      	movs	r5, #0
 80175a0:	e7ef      	b.n	8017582 <_dtoa_r+0x926>
 80175a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80175a4:	e75e      	b.n	8017464 <_dtoa_r+0x808>
 80175a6:	2b04      	cmp	r3, #4
 80175a8:	d0a8      	beq.n	80174fc <_dtoa_r+0x8a0>
 80175aa:	331c      	adds	r3, #28
 80175ac:	e79f      	b.n	80174ee <_dtoa_r+0x892>
 80175ae:	0013      	movs	r3, r2
 80175b0:	e7fb      	b.n	80175aa <_dtoa_r+0x94e>
 80175b2:	9b04      	ldr	r3, [sp, #16]
 80175b4:	930c      	str	r3, [sp, #48]	@ 0x30
 80175b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80175b8:	930e      	str	r3, [sp, #56]	@ 0x38
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	dc23      	bgt.n	8017606 <_dtoa_r+0x9aa>
 80175be:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80175c0:	2b02      	cmp	r3, #2
 80175c2:	dd20      	ble.n	8017606 <_dtoa_r+0x9aa>
 80175c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d000      	beq.n	80175cc <_dtoa_r+0x970>
 80175ca:	e6b5      	b.n	8017338 <_dtoa_r+0x6dc>
 80175cc:	0031      	movs	r1, r6
 80175ce:	2205      	movs	r2, #5
 80175d0:	9803      	ldr	r0, [sp, #12]
 80175d2:	f000 faa5 	bl	8017b20 <__multadd>
 80175d6:	0006      	movs	r6, r0
 80175d8:	0001      	movs	r1, r0
 80175da:	9805      	ldr	r0, [sp, #20]
 80175dc:	f000 fcc6 	bl	8017f6c <__mcmp>
 80175e0:	2800      	cmp	r0, #0
 80175e2:	dc00      	bgt.n	80175e6 <_dtoa_r+0x98a>
 80175e4:	e6a8      	b.n	8017338 <_dtoa_r+0x6dc>
 80175e6:	9b08      	ldr	r3, [sp, #32]
 80175e8:	9a08      	ldr	r2, [sp, #32]
 80175ea:	1c5c      	adds	r4, r3, #1
 80175ec:	2331      	movs	r3, #49	@ 0x31
 80175ee:	7013      	strb	r3, [r2, #0]
 80175f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80175f2:	3301      	adds	r3, #1
 80175f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80175f6:	e6a3      	b.n	8017340 <_dtoa_r+0x6e4>
 80175f8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80175fa:	0037      	movs	r7, r6
 80175fc:	e7f3      	b.n	80175e6 <_dtoa_r+0x98a>
 80175fe:	9b04      	ldr	r3, [sp, #16]
 8017600:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8017602:	930c      	str	r3, [sp, #48]	@ 0x30
 8017604:	e7f9      	b.n	80175fa <_dtoa_r+0x99e>
 8017606:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017608:	2b00      	cmp	r3, #0
 801760a:	d100      	bne.n	801760e <_dtoa_r+0x9b2>
 801760c:	e100      	b.n	8017810 <_dtoa_r+0xbb4>
 801760e:	2c00      	cmp	r4, #0
 8017610:	dd05      	ble.n	801761e <_dtoa_r+0x9c2>
 8017612:	0039      	movs	r1, r7
 8017614:	0022      	movs	r2, r4
 8017616:	9803      	ldr	r0, [sp, #12]
 8017618:	f000 fc3c 	bl	8017e94 <__lshift>
 801761c:	0007      	movs	r7, r0
 801761e:	0038      	movs	r0, r7
 8017620:	2d00      	cmp	r5, #0
 8017622:	d018      	beq.n	8017656 <_dtoa_r+0x9fa>
 8017624:	6879      	ldr	r1, [r7, #4]
 8017626:	9803      	ldr	r0, [sp, #12]
 8017628:	f000 fa12 	bl	8017a50 <_Balloc>
 801762c:	1e04      	subs	r4, r0, #0
 801762e:	d105      	bne.n	801763c <_dtoa_r+0x9e0>
 8017630:	0022      	movs	r2, r4
 8017632:	4b2b      	ldr	r3, [pc, #172]	@ (80176e0 <_dtoa_r+0xa84>)
 8017634:	482b      	ldr	r0, [pc, #172]	@ (80176e4 <_dtoa_r+0xa88>)
 8017636:	492c      	ldr	r1, [pc, #176]	@ (80176e8 <_dtoa_r+0xa8c>)
 8017638:	f7ff fb25 	bl	8016c86 <_dtoa_r+0x2a>
 801763c:	0039      	movs	r1, r7
 801763e:	693a      	ldr	r2, [r7, #16]
 8017640:	310c      	adds	r1, #12
 8017642:	3202      	adds	r2, #2
 8017644:	0092      	lsls	r2, r2, #2
 8017646:	300c      	adds	r0, #12
 8017648:	f7ff fa70 	bl	8016b2c <memcpy>
 801764c:	2201      	movs	r2, #1
 801764e:	0021      	movs	r1, r4
 8017650:	9803      	ldr	r0, [sp, #12]
 8017652:	f000 fc1f 	bl	8017e94 <__lshift>
 8017656:	9b08      	ldr	r3, [sp, #32]
 8017658:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801765a:	9306      	str	r3, [sp, #24]
 801765c:	3b01      	subs	r3, #1
 801765e:	189b      	adds	r3, r3, r2
 8017660:	2201      	movs	r2, #1
 8017662:	9704      	str	r7, [sp, #16]
 8017664:	0007      	movs	r7, r0
 8017666:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017668:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801766a:	4013      	ands	r3, r2
 801766c:	930e      	str	r3, [sp, #56]	@ 0x38
 801766e:	0031      	movs	r1, r6
 8017670:	9805      	ldr	r0, [sp, #20]
 8017672:	f7ff fa64 	bl	8016b3e <quorem>
 8017676:	9904      	ldr	r1, [sp, #16]
 8017678:	0005      	movs	r5, r0
 801767a:	900a      	str	r0, [sp, #40]	@ 0x28
 801767c:	9805      	ldr	r0, [sp, #20]
 801767e:	f000 fc75 	bl	8017f6c <__mcmp>
 8017682:	003a      	movs	r2, r7
 8017684:	900d      	str	r0, [sp, #52]	@ 0x34
 8017686:	0031      	movs	r1, r6
 8017688:	9803      	ldr	r0, [sp, #12]
 801768a:	f000 fc8b 	bl	8017fa4 <__mdiff>
 801768e:	2201      	movs	r2, #1
 8017690:	68c3      	ldr	r3, [r0, #12]
 8017692:	0004      	movs	r4, r0
 8017694:	3530      	adds	r5, #48	@ 0x30
 8017696:	9209      	str	r2, [sp, #36]	@ 0x24
 8017698:	2b00      	cmp	r3, #0
 801769a:	d104      	bne.n	80176a6 <_dtoa_r+0xa4a>
 801769c:	0001      	movs	r1, r0
 801769e:	9805      	ldr	r0, [sp, #20]
 80176a0:	f000 fc64 	bl	8017f6c <__mcmp>
 80176a4:	9009      	str	r0, [sp, #36]	@ 0x24
 80176a6:	0021      	movs	r1, r4
 80176a8:	9803      	ldr	r0, [sp, #12]
 80176aa:	f000 fa15 	bl	8017ad8 <_Bfree>
 80176ae:	9b06      	ldr	r3, [sp, #24]
 80176b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80176b2:	1c5c      	adds	r4, r3, #1
 80176b4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80176b6:	4313      	orrs	r3, r2
 80176b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80176ba:	4313      	orrs	r3, r2
 80176bc:	d116      	bne.n	80176ec <_dtoa_r+0xa90>
 80176be:	2d39      	cmp	r5, #57	@ 0x39
 80176c0:	d02f      	beq.n	8017722 <_dtoa_r+0xac6>
 80176c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	dd01      	ble.n	80176cc <_dtoa_r+0xa70>
 80176c8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80176ca:	3531      	adds	r5, #49	@ 0x31
 80176cc:	9b06      	ldr	r3, [sp, #24]
 80176ce:	701d      	strb	r5, [r3, #0]
 80176d0:	e638      	b.n	8017344 <_dtoa_r+0x6e8>
 80176d2:	46c0      	nop			@ (mov r8, r8)
 80176d4:	40240000 	.word	0x40240000
 80176d8:	00000433 	.word	0x00000433
 80176dc:	7ff00000 	.word	0x7ff00000
 80176e0:	0801a540 	.word	0x0801a540
 80176e4:	0801a4e8 	.word	0x0801a4e8
 80176e8:	000002ef 	.word	0x000002ef
 80176ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	db04      	blt.n	80176fc <_dtoa_r+0xaa0>
 80176f2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80176f4:	4313      	orrs	r3, r2
 80176f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80176f8:	4313      	orrs	r3, r2
 80176fa:	d11e      	bne.n	801773a <_dtoa_r+0xade>
 80176fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80176fe:	2b00      	cmp	r3, #0
 8017700:	dde4      	ble.n	80176cc <_dtoa_r+0xa70>
 8017702:	9905      	ldr	r1, [sp, #20]
 8017704:	2201      	movs	r2, #1
 8017706:	9803      	ldr	r0, [sp, #12]
 8017708:	f000 fbc4 	bl	8017e94 <__lshift>
 801770c:	0031      	movs	r1, r6
 801770e:	9005      	str	r0, [sp, #20]
 8017710:	f000 fc2c 	bl	8017f6c <__mcmp>
 8017714:	2800      	cmp	r0, #0
 8017716:	dc02      	bgt.n	801771e <_dtoa_r+0xac2>
 8017718:	d1d8      	bne.n	80176cc <_dtoa_r+0xa70>
 801771a:	07eb      	lsls	r3, r5, #31
 801771c:	d5d6      	bpl.n	80176cc <_dtoa_r+0xa70>
 801771e:	2d39      	cmp	r5, #57	@ 0x39
 8017720:	d1d2      	bne.n	80176c8 <_dtoa_r+0xa6c>
 8017722:	2339      	movs	r3, #57	@ 0x39
 8017724:	9a06      	ldr	r2, [sp, #24]
 8017726:	7013      	strb	r3, [r2, #0]
 8017728:	0023      	movs	r3, r4
 801772a:	001c      	movs	r4, r3
 801772c:	3b01      	subs	r3, #1
 801772e:	781a      	ldrb	r2, [r3, #0]
 8017730:	2a39      	cmp	r2, #57	@ 0x39
 8017732:	d04f      	beq.n	80177d4 <_dtoa_r+0xb78>
 8017734:	3201      	adds	r2, #1
 8017736:	701a      	strb	r2, [r3, #0]
 8017738:	e604      	b.n	8017344 <_dtoa_r+0x6e8>
 801773a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801773c:	2b00      	cmp	r3, #0
 801773e:	dd03      	ble.n	8017748 <_dtoa_r+0xaec>
 8017740:	2d39      	cmp	r5, #57	@ 0x39
 8017742:	d0ee      	beq.n	8017722 <_dtoa_r+0xac6>
 8017744:	3501      	adds	r5, #1
 8017746:	e7c1      	b.n	80176cc <_dtoa_r+0xa70>
 8017748:	9b06      	ldr	r3, [sp, #24]
 801774a:	9a06      	ldr	r2, [sp, #24]
 801774c:	701d      	strb	r5, [r3, #0]
 801774e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017750:	4293      	cmp	r3, r2
 8017752:	d02a      	beq.n	80177aa <_dtoa_r+0xb4e>
 8017754:	2300      	movs	r3, #0
 8017756:	220a      	movs	r2, #10
 8017758:	9905      	ldr	r1, [sp, #20]
 801775a:	9803      	ldr	r0, [sp, #12]
 801775c:	f000 f9e0 	bl	8017b20 <__multadd>
 8017760:	9b04      	ldr	r3, [sp, #16]
 8017762:	9005      	str	r0, [sp, #20]
 8017764:	42bb      	cmp	r3, r7
 8017766:	d109      	bne.n	801777c <_dtoa_r+0xb20>
 8017768:	2300      	movs	r3, #0
 801776a:	220a      	movs	r2, #10
 801776c:	9904      	ldr	r1, [sp, #16]
 801776e:	9803      	ldr	r0, [sp, #12]
 8017770:	f000 f9d6 	bl	8017b20 <__multadd>
 8017774:	9004      	str	r0, [sp, #16]
 8017776:	0007      	movs	r7, r0
 8017778:	9406      	str	r4, [sp, #24]
 801777a:	e778      	b.n	801766e <_dtoa_r+0xa12>
 801777c:	9904      	ldr	r1, [sp, #16]
 801777e:	2300      	movs	r3, #0
 8017780:	220a      	movs	r2, #10
 8017782:	9803      	ldr	r0, [sp, #12]
 8017784:	f000 f9cc 	bl	8017b20 <__multadd>
 8017788:	2300      	movs	r3, #0
 801778a:	9004      	str	r0, [sp, #16]
 801778c:	220a      	movs	r2, #10
 801778e:	0039      	movs	r1, r7
 8017790:	9803      	ldr	r0, [sp, #12]
 8017792:	f000 f9c5 	bl	8017b20 <__multadd>
 8017796:	e7ee      	b.n	8017776 <_dtoa_r+0xb1a>
 8017798:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801779a:	2401      	movs	r4, #1
 801779c:	2b00      	cmp	r3, #0
 801779e:	dd00      	ble.n	80177a2 <_dtoa_r+0xb46>
 80177a0:	001c      	movs	r4, r3
 80177a2:	9b08      	ldr	r3, [sp, #32]
 80177a4:	191c      	adds	r4, r3, r4
 80177a6:	2300      	movs	r3, #0
 80177a8:	9304      	str	r3, [sp, #16]
 80177aa:	9905      	ldr	r1, [sp, #20]
 80177ac:	2201      	movs	r2, #1
 80177ae:	9803      	ldr	r0, [sp, #12]
 80177b0:	f000 fb70 	bl	8017e94 <__lshift>
 80177b4:	0031      	movs	r1, r6
 80177b6:	9005      	str	r0, [sp, #20]
 80177b8:	f000 fbd8 	bl	8017f6c <__mcmp>
 80177bc:	2800      	cmp	r0, #0
 80177be:	dcb3      	bgt.n	8017728 <_dtoa_r+0xacc>
 80177c0:	d101      	bne.n	80177c6 <_dtoa_r+0xb6a>
 80177c2:	07ed      	lsls	r5, r5, #31
 80177c4:	d4b0      	bmi.n	8017728 <_dtoa_r+0xacc>
 80177c6:	0023      	movs	r3, r4
 80177c8:	001c      	movs	r4, r3
 80177ca:	3b01      	subs	r3, #1
 80177cc:	781a      	ldrb	r2, [r3, #0]
 80177ce:	2a30      	cmp	r2, #48	@ 0x30
 80177d0:	d0fa      	beq.n	80177c8 <_dtoa_r+0xb6c>
 80177d2:	e5b7      	b.n	8017344 <_dtoa_r+0x6e8>
 80177d4:	9a08      	ldr	r2, [sp, #32]
 80177d6:	429a      	cmp	r2, r3
 80177d8:	d1a7      	bne.n	801772a <_dtoa_r+0xace>
 80177da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80177dc:	3301      	adds	r3, #1
 80177de:	930c      	str	r3, [sp, #48]	@ 0x30
 80177e0:	2331      	movs	r3, #49	@ 0x31
 80177e2:	7013      	strb	r3, [r2, #0]
 80177e4:	e5ae      	b.n	8017344 <_dtoa_r+0x6e8>
 80177e6:	4b15      	ldr	r3, [pc, #84]	@ (801783c <_dtoa_r+0xbe0>)
 80177e8:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80177ea:	9308      	str	r3, [sp, #32]
 80177ec:	4b14      	ldr	r3, [pc, #80]	@ (8017840 <_dtoa_r+0xbe4>)
 80177ee:	2a00      	cmp	r2, #0
 80177f0:	d001      	beq.n	80177f6 <_dtoa_r+0xb9a>
 80177f2:	f7ff fa7b 	bl	8016cec <_dtoa_r+0x90>
 80177f6:	f7ff fa7b 	bl	8016cf0 <_dtoa_r+0x94>
 80177fa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80177fc:	2b01      	cmp	r3, #1
 80177fe:	dc00      	bgt.n	8017802 <_dtoa_r+0xba6>
 8017800:	e648      	b.n	8017494 <_dtoa_r+0x838>
 8017802:	2001      	movs	r0, #1
 8017804:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8017806:	e665      	b.n	80174d4 <_dtoa_r+0x878>
 8017808:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801780a:	2b00      	cmp	r3, #0
 801780c:	dc00      	bgt.n	8017810 <_dtoa_r+0xbb4>
 801780e:	e6d6      	b.n	80175be <_dtoa_r+0x962>
 8017810:	2400      	movs	r4, #0
 8017812:	0031      	movs	r1, r6
 8017814:	9805      	ldr	r0, [sp, #20]
 8017816:	f7ff f992 	bl	8016b3e <quorem>
 801781a:	9b08      	ldr	r3, [sp, #32]
 801781c:	3030      	adds	r0, #48	@ 0x30
 801781e:	5518      	strb	r0, [r3, r4]
 8017820:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017822:	3401      	adds	r4, #1
 8017824:	0005      	movs	r5, r0
 8017826:	429c      	cmp	r4, r3
 8017828:	dab6      	bge.n	8017798 <_dtoa_r+0xb3c>
 801782a:	2300      	movs	r3, #0
 801782c:	220a      	movs	r2, #10
 801782e:	9905      	ldr	r1, [sp, #20]
 8017830:	9803      	ldr	r0, [sp, #12]
 8017832:	f000 f975 	bl	8017b20 <__multadd>
 8017836:	9005      	str	r0, [sp, #20]
 8017838:	e7eb      	b.n	8017812 <_dtoa_r+0xbb6>
 801783a:	46c0      	nop			@ (mov r8, r8)
 801783c:	0801a4c4 	.word	0x0801a4c4
 8017840:	0801a4cc 	.word	0x0801a4cc

08017844 <_free_r>:
 8017844:	b570      	push	{r4, r5, r6, lr}
 8017846:	0005      	movs	r5, r0
 8017848:	1e0c      	subs	r4, r1, #0
 801784a:	d010      	beq.n	801786e <_free_r+0x2a>
 801784c:	3c04      	subs	r4, #4
 801784e:	6823      	ldr	r3, [r4, #0]
 8017850:	2b00      	cmp	r3, #0
 8017852:	da00      	bge.n	8017856 <_free_r+0x12>
 8017854:	18e4      	adds	r4, r4, r3
 8017856:	0028      	movs	r0, r5
 8017858:	f000 f8ea 	bl	8017a30 <__malloc_lock>
 801785c:	4a1d      	ldr	r2, [pc, #116]	@ (80178d4 <_free_r+0x90>)
 801785e:	6813      	ldr	r3, [r2, #0]
 8017860:	2b00      	cmp	r3, #0
 8017862:	d105      	bne.n	8017870 <_free_r+0x2c>
 8017864:	6063      	str	r3, [r4, #4]
 8017866:	6014      	str	r4, [r2, #0]
 8017868:	0028      	movs	r0, r5
 801786a:	f000 f8e9 	bl	8017a40 <__malloc_unlock>
 801786e:	bd70      	pop	{r4, r5, r6, pc}
 8017870:	42a3      	cmp	r3, r4
 8017872:	d908      	bls.n	8017886 <_free_r+0x42>
 8017874:	6820      	ldr	r0, [r4, #0]
 8017876:	1821      	adds	r1, r4, r0
 8017878:	428b      	cmp	r3, r1
 801787a:	d1f3      	bne.n	8017864 <_free_r+0x20>
 801787c:	6819      	ldr	r1, [r3, #0]
 801787e:	685b      	ldr	r3, [r3, #4]
 8017880:	1809      	adds	r1, r1, r0
 8017882:	6021      	str	r1, [r4, #0]
 8017884:	e7ee      	b.n	8017864 <_free_r+0x20>
 8017886:	001a      	movs	r2, r3
 8017888:	685b      	ldr	r3, [r3, #4]
 801788a:	2b00      	cmp	r3, #0
 801788c:	d001      	beq.n	8017892 <_free_r+0x4e>
 801788e:	42a3      	cmp	r3, r4
 8017890:	d9f9      	bls.n	8017886 <_free_r+0x42>
 8017892:	6811      	ldr	r1, [r2, #0]
 8017894:	1850      	adds	r0, r2, r1
 8017896:	42a0      	cmp	r0, r4
 8017898:	d10b      	bne.n	80178b2 <_free_r+0x6e>
 801789a:	6820      	ldr	r0, [r4, #0]
 801789c:	1809      	adds	r1, r1, r0
 801789e:	1850      	adds	r0, r2, r1
 80178a0:	6011      	str	r1, [r2, #0]
 80178a2:	4283      	cmp	r3, r0
 80178a4:	d1e0      	bne.n	8017868 <_free_r+0x24>
 80178a6:	6818      	ldr	r0, [r3, #0]
 80178a8:	685b      	ldr	r3, [r3, #4]
 80178aa:	1841      	adds	r1, r0, r1
 80178ac:	6011      	str	r1, [r2, #0]
 80178ae:	6053      	str	r3, [r2, #4]
 80178b0:	e7da      	b.n	8017868 <_free_r+0x24>
 80178b2:	42a0      	cmp	r0, r4
 80178b4:	d902      	bls.n	80178bc <_free_r+0x78>
 80178b6:	230c      	movs	r3, #12
 80178b8:	602b      	str	r3, [r5, #0]
 80178ba:	e7d5      	b.n	8017868 <_free_r+0x24>
 80178bc:	6820      	ldr	r0, [r4, #0]
 80178be:	1821      	adds	r1, r4, r0
 80178c0:	428b      	cmp	r3, r1
 80178c2:	d103      	bne.n	80178cc <_free_r+0x88>
 80178c4:	6819      	ldr	r1, [r3, #0]
 80178c6:	685b      	ldr	r3, [r3, #4]
 80178c8:	1809      	adds	r1, r1, r0
 80178ca:	6021      	str	r1, [r4, #0]
 80178cc:	6063      	str	r3, [r4, #4]
 80178ce:	6054      	str	r4, [r2, #4]
 80178d0:	e7ca      	b.n	8017868 <_free_r+0x24>
 80178d2:	46c0      	nop			@ (mov r8, r8)
 80178d4:	200043dc 	.word	0x200043dc

080178d8 <malloc>:
 80178d8:	b510      	push	{r4, lr}
 80178da:	4b03      	ldr	r3, [pc, #12]	@ (80178e8 <malloc+0x10>)
 80178dc:	0001      	movs	r1, r0
 80178de:	6818      	ldr	r0, [r3, #0]
 80178e0:	f000 f826 	bl	8017930 <_malloc_r>
 80178e4:	bd10      	pop	{r4, pc}
 80178e6:	46c0      	nop			@ (mov r8, r8)
 80178e8:	200002d4 	.word	0x200002d4

080178ec <sbrk_aligned>:
 80178ec:	b570      	push	{r4, r5, r6, lr}
 80178ee:	4e0f      	ldr	r6, [pc, #60]	@ (801792c <sbrk_aligned+0x40>)
 80178f0:	000d      	movs	r5, r1
 80178f2:	6831      	ldr	r1, [r6, #0]
 80178f4:	0004      	movs	r4, r0
 80178f6:	2900      	cmp	r1, #0
 80178f8:	d102      	bne.n	8017900 <sbrk_aligned+0x14>
 80178fa:	f001 f855 	bl	80189a8 <_sbrk_r>
 80178fe:	6030      	str	r0, [r6, #0]
 8017900:	0029      	movs	r1, r5
 8017902:	0020      	movs	r0, r4
 8017904:	f001 f850 	bl	80189a8 <_sbrk_r>
 8017908:	1c43      	adds	r3, r0, #1
 801790a:	d103      	bne.n	8017914 <sbrk_aligned+0x28>
 801790c:	2501      	movs	r5, #1
 801790e:	426d      	negs	r5, r5
 8017910:	0028      	movs	r0, r5
 8017912:	bd70      	pop	{r4, r5, r6, pc}
 8017914:	2303      	movs	r3, #3
 8017916:	1cc5      	adds	r5, r0, #3
 8017918:	439d      	bics	r5, r3
 801791a:	42a8      	cmp	r0, r5
 801791c:	d0f8      	beq.n	8017910 <sbrk_aligned+0x24>
 801791e:	1a29      	subs	r1, r5, r0
 8017920:	0020      	movs	r0, r4
 8017922:	f001 f841 	bl	80189a8 <_sbrk_r>
 8017926:	3001      	adds	r0, #1
 8017928:	d1f2      	bne.n	8017910 <sbrk_aligned+0x24>
 801792a:	e7ef      	b.n	801790c <sbrk_aligned+0x20>
 801792c:	200043d8 	.word	0x200043d8

08017930 <_malloc_r>:
 8017930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017932:	2203      	movs	r2, #3
 8017934:	1ccb      	adds	r3, r1, #3
 8017936:	4393      	bics	r3, r2
 8017938:	3308      	adds	r3, #8
 801793a:	0005      	movs	r5, r0
 801793c:	001f      	movs	r7, r3
 801793e:	2b0c      	cmp	r3, #12
 8017940:	d234      	bcs.n	80179ac <_malloc_r+0x7c>
 8017942:	270c      	movs	r7, #12
 8017944:	42b9      	cmp	r1, r7
 8017946:	d833      	bhi.n	80179b0 <_malloc_r+0x80>
 8017948:	0028      	movs	r0, r5
 801794a:	f000 f871 	bl	8017a30 <__malloc_lock>
 801794e:	4e37      	ldr	r6, [pc, #220]	@ (8017a2c <_malloc_r+0xfc>)
 8017950:	6833      	ldr	r3, [r6, #0]
 8017952:	001c      	movs	r4, r3
 8017954:	2c00      	cmp	r4, #0
 8017956:	d12f      	bne.n	80179b8 <_malloc_r+0x88>
 8017958:	0039      	movs	r1, r7
 801795a:	0028      	movs	r0, r5
 801795c:	f7ff ffc6 	bl	80178ec <sbrk_aligned>
 8017960:	0004      	movs	r4, r0
 8017962:	1c43      	adds	r3, r0, #1
 8017964:	d15f      	bne.n	8017a26 <_malloc_r+0xf6>
 8017966:	6834      	ldr	r4, [r6, #0]
 8017968:	9400      	str	r4, [sp, #0]
 801796a:	9b00      	ldr	r3, [sp, #0]
 801796c:	2b00      	cmp	r3, #0
 801796e:	d14a      	bne.n	8017a06 <_malloc_r+0xd6>
 8017970:	2c00      	cmp	r4, #0
 8017972:	d052      	beq.n	8017a1a <_malloc_r+0xea>
 8017974:	6823      	ldr	r3, [r4, #0]
 8017976:	0028      	movs	r0, r5
 8017978:	18e3      	adds	r3, r4, r3
 801797a:	9900      	ldr	r1, [sp, #0]
 801797c:	9301      	str	r3, [sp, #4]
 801797e:	f001 f813 	bl	80189a8 <_sbrk_r>
 8017982:	9b01      	ldr	r3, [sp, #4]
 8017984:	4283      	cmp	r3, r0
 8017986:	d148      	bne.n	8017a1a <_malloc_r+0xea>
 8017988:	6823      	ldr	r3, [r4, #0]
 801798a:	0028      	movs	r0, r5
 801798c:	1aff      	subs	r7, r7, r3
 801798e:	0039      	movs	r1, r7
 8017990:	f7ff ffac 	bl	80178ec <sbrk_aligned>
 8017994:	3001      	adds	r0, #1
 8017996:	d040      	beq.n	8017a1a <_malloc_r+0xea>
 8017998:	6823      	ldr	r3, [r4, #0]
 801799a:	19db      	adds	r3, r3, r7
 801799c:	6023      	str	r3, [r4, #0]
 801799e:	6833      	ldr	r3, [r6, #0]
 80179a0:	685a      	ldr	r2, [r3, #4]
 80179a2:	2a00      	cmp	r2, #0
 80179a4:	d133      	bne.n	8017a0e <_malloc_r+0xde>
 80179a6:	9b00      	ldr	r3, [sp, #0]
 80179a8:	6033      	str	r3, [r6, #0]
 80179aa:	e019      	b.n	80179e0 <_malloc_r+0xb0>
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	dac9      	bge.n	8017944 <_malloc_r+0x14>
 80179b0:	230c      	movs	r3, #12
 80179b2:	602b      	str	r3, [r5, #0]
 80179b4:	2000      	movs	r0, #0
 80179b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80179b8:	6821      	ldr	r1, [r4, #0]
 80179ba:	1bc9      	subs	r1, r1, r7
 80179bc:	d420      	bmi.n	8017a00 <_malloc_r+0xd0>
 80179be:	290b      	cmp	r1, #11
 80179c0:	d90a      	bls.n	80179d8 <_malloc_r+0xa8>
 80179c2:	19e2      	adds	r2, r4, r7
 80179c4:	6027      	str	r7, [r4, #0]
 80179c6:	42a3      	cmp	r3, r4
 80179c8:	d104      	bne.n	80179d4 <_malloc_r+0xa4>
 80179ca:	6032      	str	r2, [r6, #0]
 80179cc:	6863      	ldr	r3, [r4, #4]
 80179ce:	6011      	str	r1, [r2, #0]
 80179d0:	6053      	str	r3, [r2, #4]
 80179d2:	e005      	b.n	80179e0 <_malloc_r+0xb0>
 80179d4:	605a      	str	r2, [r3, #4]
 80179d6:	e7f9      	b.n	80179cc <_malloc_r+0x9c>
 80179d8:	6862      	ldr	r2, [r4, #4]
 80179da:	42a3      	cmp	r3, r4
 80179dc:	d10e      	bne.n	80179fc <_malloc_r+0xcc>
 80179de:	6032      	str	r2, [r6, #0]
 80179e0:	0028      	movs	r0, r5
 80179e2:	f000 f82d 	bl	8017a40 <__malloc_unlock>
 80179e6:	0020      	movs	r0, r4
 80179e8:	2207      	movs	r2, #7
 80179ea:	300b      	adds	r0, #11
 80179ec:	1d23      	adds	r3, r4, #4
 80179ee:	4390      	bics	r0, r2
 80179f0:	1ac2      	subs	r2, r0, r3
 80179f2:	4298      	cmp	r0, r3
 80179f4:	d0df      	beq.n	80179b6 <_malloc_r+0x86>
 80179f6:	1a1b      	subs	r3, r3, r0
 80179f8:	50a3      	str	r3, [r4, r2]
 80179fa:	e7dc      	b.n	80179b6 <_malloc_r+0x86>
 80179fc:	605a      	str	r2, [r3, #4]
 80179fe:	e7ef      	b.n	80179e0 <_malloc_r+0xb0>
 8017a00:	0023      	movs	r3, r4
 8017a02:	6864      	ldr	r4, [r4, #4]
 8017a04:	e7a6      	b.n	8017954 <_malloc_r+0x24>
 8017a06:	9c00      	ldr	r4, [sp, #0]
 8017a08:	6863      	ldr	r3, [r4, #4]
 8017a0a:	9300      	str	r3, [sp, #0]
 8017a0c:	e7ad      	b.n	801796a <_malloc_r+0x3a>
 8017a0e:	001a      	movs	r2, r3
 8017a10:	685b      	ldr	r3, [r3, #4]
 8017a12:	42a3      	cmp	r3, r4
 8017a14:	d1fb      	bne.n	8017a0e <_malloc_r+0xde>
 8017a16:	2300      	movs	r3, #0
 8017a18:	e7da      	b.n	80179d0 <_malloc_r+0xa0>
 8017a1a:	230c      	movs	r3, #12
 8017a1c:	0028      	movs	r0, r5
 8017a1e:	602b      	str	r3, [r5, #0]
 8017a20:	f000 f80e 	bl	8017a40 <__malloc_unlock>
 8017a24:	e7c6      	b.n	80179b4 <_malloc_r+0x84>
 8017a26:	6007      	str	r7, [r0, #0]
 8017a28:	e7da      	b.n	80179e0 <_malloc_r+0xb0>
 8017a2a:	46c0      	nop			@ (mov r8, r8)
 8017a2c:	200043dc 	.word	0x200043dc

08017a30 <__malloc_lock>:
 8017a30:	b510      	push	{r4, lr}
 8017a32:	4802      	ldr	r0, [pc, #8]	@ (8017a3c <__malloc_lock+0xc>)
 8017a34:	f7ff f86d 	bl	8016b12 <__retarget_lock_acquire_recursive>
 8017a38:	bd10      	pop	{r4, pc}
 8017a3a:	46c0      	nop			@ (mov r8, r8)
 8017a3c:	200043d4 	.word	0x200043d4

08017a40 <__malloc_unlock>:
 8017a40:	b510      	push	{r4, lr}
 8017a42:	4802      	ldr	r0, [pc, #8]	@ (8017a4c <__malloc_unlock+0xc>)
 8017a44:	f7ff f866 	bl	8016b14 <__retarget_lock_release_recursive>
 8017a48:	bd10      	pop	{r4, pc}
 8017a4a:	46c0      	nop			@ (mov r8, r8)
 8017a4c:	200043d4 	.word	0x200043d4

08017a50 <_Balloc>:
 8017a50:	b570      	push	{r4, r5, r6, lr}
 8017a52:	69c5      	ldr	r5, [r0, #28]
 8017a54:	0006      	movs	r6, r0
 8017a56:	000c      	movs	r4, r1
 8017a58:	2d00      	cmp	r5, #0
 8017a5a:	d10e      	bne.n	8017a7a <_Balloc+0x2a>
 8017a5c:	2010      	movs	r0, #16
 8017a5e:	f7ff ff3b 	bl	80178d8 <malloc>
 8017a62:	1e02      	subs	r2, r0, #0
 8017a64:	61f0      	str	r0, [r6, #28]
 8017a66:	d104      	bne.n	8017a72 <_Balloc+0x22>
 8017a68:	216b      	movs	r1, #107	@ 0x6b
 8017a6a:	4b19      	ldr	r3, [pc, #100]	@ (8017ad0 <_Balloc+0x80>)
 8017a6c:	4819      	ldr	r0, [pc, #100]	@ (8017ad4 <_Balloc+0x84>)
 8017a6e:	f000 ffad 	bl	80189cc <__assert_func>
 8017a72:	6045      	str	r5, [r0, #4]
 8017a74:	6085      	str	r5, [r0, #8]
 8017a76:	6005      	str	r5, [r0, #0]
 8017a78:	60c5      	str	r5, [r0, #12]
 8017a7a:	69f5      	ldr	r5, [r6, #28]
 8017a7c:	68eb      	ldr	r3, [r5, #12]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d013      	beq.n	8017aaa <_Balloc+0x5a>
 8017a82:	69f3      	ldr	r3, [r6, #28]
 8017a84:	00a2      	lsls	r2, r4, #2
 8017a86:	68db      	ldr	r3, [r3, #12]
 8017a88:	189b      	adds	r3, r3, r2
 8017a8a:	6818      	ldr	r0, [r3, #0]
 8017a8c:	2800      	cmp	r0, #0
 8017a8e:	d118      	bne.n	8017ac2 <_Balloc+0x72>
 8017a90:	2101      	movs	r1, #1
 8017a92:	000d      	movs	r5, r1
 8017a94:	40a5      	lsls	r5, r4
 8017a96:	1d6a      	adds	r2, r5, #5
 8017a98:	0030      	movs	r0, r6
 8017a9a:	0092      	lsls	r2, r2, #2
 8017a9c:	f000 ffb4 	bl	8018a08 <_calloc_r>
 8017aa0:	2800      	cmp	r0, #0
 8017aa2:	d00c      	beq.n	8017abe <_Balloc+0x6e>
 8017aa4:	6044      	str	r4, [r0, #4]
 8017aa6:	6085      	str	r5, [r0, #8]
 8017aa8:	e00d      	b.n	8017ac6 <_Balloc+0x76>
 8017aaa:	2221      	movs	r2, #33	@ 0x21
 8017aac:	2104      	movs	r1, #4
 8017aae:	0030      	movs	r0, r6
 8017ab0:	f000 ffaa 	bl	8018a08 <_calloc_r>
 8017ab4:	69f3      	ldr	r3, [r6, #28]
 8017ab6:	60e8      	str	r0, [r5, #12]
 8017ab8:	68db      	ldr	r3, [r3, #12]
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d1e1      	bne.n	8017a82 <_Balloc+0x32>
 8017abe:	2000      	movs	r0, #0
 8017ac0:	bd70      	pop	{r4, r5, r6, pc}
 8017ac2:	6802      	ldr	r2, [r0, #0]
 8017ac4:	601a      	str	r2, [r3, #0]
 8017ac6:	2300      	movs	r3, #0
 8017ac8:	6103      	str	r3, [r0, #16]
 8017aca:	60c3      	str	r3, [r0, #12]
 8017acc:	e7f8      	b.n	8017ac0 <_Balloc+0x70>
 8017ace:	46c0      	nop			@ (mov r8, r8)
 8017ad0:	0801a4d1 	.word	0x0801a4d1
 8017ad4:	0801a551 	.word	0x0801a551

08017ad8 <_Bfree>:
 8017ad8:	b570      	push	{r4, r5, r6, lr}
 8017ada:	69c6      	ldr	r6, [r0, #28]
 8017adc:	0005      	movs	r5, r0
 8017ade:	000c      	movs	r4, r1
 8017ae0:	2e00      	cmp	r6, #0
 8017ae2:	d10e      	bne.n	8017b02 <_Bfree+0x2a>
 8017ae4:	2010      	movs	r0, #16
 8017ae6:	f7ff fef7 	bl	80178d8 <malloc>
 8017aea:	1e02      	subs	r2, r0, #0
 8017aec:	61e8      	str	r0, [r5, #28]
 8017aee:	d104      	bne.n	8017afa <_Bfree+0x22>
 8017af0:	218f      	movs	r1, #143	@ 0x8f
 8017af2:	4b09      	ldr	r3, [pc, #36]	@ (8017b18 <_Bfree+0x40>)
 8017af4:	4809      	ldr	r0, [pc, #36]	@ (8017b1c <_Bfree+0x44>)
 8017af6:	f000 ff69 	bl	80189cc <__assert_func>
 8017afa:	6046      	str	r6, [r0, #4]
 8017afc:	6086      	str	r6, [r0, #8]
 8017afe:	6006      	str	r6, [r0, #0]
 8017b00:	60c6      	str	r6, [r0, #12]
 8017b02:	2c00      	cmp	r4, #0
 8017b04:	d007      	beq.n	8017b16 <_Bfree+0x3e>
 8017b06:	69eb      	ldr	r3, [r5, #28]
 8017b08:	6862      	ldr	r2, [r4, #4]
 8017b0a:	68db      	ldr	r3, [r3, #12]
 8017b0c:	0092      	lsls	r2, r2, #2
 8017b0e:	189b      	adds	r3, r3, r2
 8017b10:	681a      	ldr	r2, [r3, #0]
 8017b12:	6022      	str	r2, [r4, #0]
 8017b14:	601c      	str	r4, [r3, #0]
 8017b16:	bd70      	pop	{r4, r5, r6, pc}
 8017b18:	0801a4d1 	.word	0x0801a4d1
 8017b1c:	0801a551 	.word	0x0801a551

08017b20 <__multadd>:
 8017b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017b22:	000f      	movs	r7, r1
 8017b24:	9001      	str	r0, [sp, #4]
 8017b26:	000c      	movs	r4, r1
 8017b28:	001e      	movs	r6, r3
 8017b2a:	2000      	movs	r0, #0
 8017b2c:	690d      	ldr	r5, [r1, #16]
 8017b2e:	3714      	adds	r7, #20
 8017b30:	683b      	ldr	r3, [r7, #0]
 8017b32:	3001      	adds	r0, #1
 8017b34:	b299      	uxth	r1, r3
 8017b36:	4351      	muls	r1, r2
 8017b38:	0c1b      	lsrs	r3, r3, #16
 8017b3a:	4353      	muls	r3, r2
 8017b3c:	1989      	adds	r1, r1, r6
 8017b3e:	0c0e      	lsrs	r6, r1, #16
 8017b40:	199b      	adds	r3, r3, r6
 8017b42:	0c1e      	lsrs	r6, r3, #16
 8017b44:	b289      	uxth	r1, r1
 8017b46:	041b      	lsls	r3, r3, #16
 8017b48:	185b      	adds	r3, r3, r1
 8017b4a:	c708      	stmia	r7!, {r3}
 8017b4c:	4285      	cmp	r5, r0
 8017b4e:	dcef      	bgt.n	8017b30 <__multadd+0x10>
 8017b50:	2e00      	cmp	r6, #0
 8017b52:	d022      	beq.n	8017b9a <__multadd+0x7a>
 8017b54:	68a3      	ldr	r3, [r4, #8]
 8017b56:	42ab      	cmp	r3, r5
 8017b58:	dc19      	bgt.n	8017b8e <__multadd+0x6e>
 8017b5a:	6861      	ldr	r1, [r4, #4]
 8017b5c:	9801      	ldr	r0, [sp, #4]
 8017b5e:	3101      	adds	r1, #1
 8017b60:	f7ff ff76 	bl	8017a50 <_Balloc>
 8017b64:	1e07      	subs	r7, r0, #0
 8017b66:	d105      	bne.n	8017b74 <__multadd+0x54>
 8017b68:	003a      	movs	r2, r7
 8017b6a:	21ba      	movs	r1, #186	@ 0xba
 8017b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8017ba0 <__multadd+0x80>)
 8017b6e:	480d      	ldr	r0, [pc, #52]	@ (8017ba4 <__multadd+0x84>)
 8017b70:	f000 ff2c 	bl	80189cc <__assert_func>
 8017b74:	0021      	movs	r1, r4
 8017b76:	6922      	ldr	r2, [r4, #16]
 8017b78:	310c      	adds	r1, #12
 8017b7a:	3202      	adds	r2, #2
 8017b7c:	0092      	lsls	r2, r2, #2
 8017b7e:	300c      	adds	r0, #12
 8017b80:	f7fe ffd4 	bl	8016b2c <memcpy>
 8017b84:	0021      	movs	r1, r4
 8017b86:	9801      	ldr	r0, [sp, #4]
 8017b88:	f7ff ffa6 	bl	8017ad8 <_Bfree>
 8017b8c:	003c      	movs	r4, r7
 8017b8e:	1d2b      	adds	r3, r5, #4
 8017b90:	009b      	lsls	r3, r3, #2
 8017b92:	18e3      	adds	r3, r4, r3
 8017b94:	3501      	adds	r5, #1
 8017b96:	605e      	str	r6, [r3, #4]
 8017b98:	6125      	str	r5, [r4, #16]
 8017b9a:	0020      	movs	r0, r4
 8017b9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017b9e:	46c0      	nop			@ (mov r8, r8)
 8017ba0:	0801a540 	.word	0x0801a540
 8017ba4:	0801a551 	.word	0x0801a551

08017ba8 <__hi0bits>:
 8017ba8:	2280      	movs	r2, #128	@ 0x80
 8017baa:	0003      	movs	r3, r0
 8017bac:	0252      	lsls	r2, r2, #9
 8017bae:	2000      	movs	r0, #0
 8017bb0:	4293      	cmp	r3, r2
 8017bb2:	d201      	bcs.n	8017bb8 <__hi0bits+0x10>
 8017bb4:	041b      	lsls	r3, r3, #16
 8017bb6:	3010      	adds	r0, #16
 8017bb8:	2280      	movs	r2, #128	@ 0x80
 8017bba:	0452      	lsls	r2, r2, #17
 8017bbc:	4293      	cmp	r3, r2
 8017bbe:	d201      	bcs.n	8017bc4 <__hi0bits+0x1c>
 8017bc0:	3008      	adds	r0, #8
 8017bc2:	021b      	lsls	r3, r3, #8
 8017bc4:	2280      	movs	r2, #128	@ 0x80
 8017bc6:	0552      	lsls	r2, r2, #21
 8017bc8:	4293      	cmp	r3, r2
 8017bca:	d201      	bcs.n	8017bd0 <__hi0bits+0x28>
 8017bcc:	3004      	adds	r0, #4
 8017bce:	011b      	lsls	r3, r3, #4
 8017bd0:	2280      	movs	r2, #128	@ 0x80
 8017bd2:	05d2      	lsls	r2, r2, #23
 8017bd4:	4293      	cmp	r3, r2
 8017bd6:	d201      	bcs.n	8017bdc <__hi0bits+0x34>
 8017bd8:	3002      	adds	r0, #2
 8017bda:	009b      	lsls	r3, r3, #2
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	db03      	blt.n	8017be8 <__hi0bits+0x40>
 8017be0:	3001      	adds	r0, #1
 8017be2:	4213      	tst	r3, r2
 8017be4:	d100      	bne.n	8017be8 <__hi0bits+0x40>
 8017be6:	2020      	movs	r0, #32
 8017be8:	4770      	bx	lr

08017bea <__lo0bits>:
 8017bea:	6803      	ldr	r3, [r0, #0]
 8017bec:	0001      	movs	r1, r0
 8017bee:	2207      	movs	r2, #7
 8017bf0:	0018      	movs	r0, r3
 8017bf2:	4010      	ands	r0, r2
 8017bf4:	4213      	tst	r3, r2
 8017bf6:	d00d      	beq.n	8017c14 <__lo0bits+0x2a>
 8017bf8:	3a06      	subs	r2, #6
 8017bfa:	2000      	movs	r0, #0
 8017bfc:	4213      	tst	r3, r2
 8017bfe:	d105      	bne.n	8017c0c <__lo0bits+0x22>
 8017c00:	3002      	adds	r0, #2
 8017c02:	4203      	tst	r3, r0
 8017c04:	d003      	beq.n	8017c0e <__lo0bits+0x24>
 8017c06:	40d3      	lsrs	r3, r2
 8017c08:	0010      	movs	r0, r2
 8017c0a:	600b      	str	r3, [r1, #0]
 8017c0c:	4770      	bx	lr
 8017c0e:	089b      	lsrs	r3, r3, #2
 8017c10:	600b      	str	r3, [r1, #0]
 8017c12:	e7fb      	b.n	8017c0c <__lo0bits+0x22>
 8017c14:	b29a      	uxth	r2, r3
 8017c16:	2a00      	cmp	r2, #0
 8017c18:	d101      	bne.n	8017c1e <__lo0bits+0x34>
 8017c1a:	2010      	movs	r0, #16
 8017c1c:	0c1b      	lsrs	r3, r3, #16
 8017c1e:	b2da      	uxtb	r2, r3
 8017c20:	2a00      	cmp	r2, #0
 8017c22:	d101      	bne.n	8017c28 <__lo0bits+0x3e>
 8017c24:	3008      	adds	r0, #8
 8017c26:	0a1b      	lsrs	r3, r3, #8
 8017c28:	071a      	lsls	r2, r3, #28
 8017c2a:	d101      	bne.n	8017c30 <__lo0bits+0x46>
 8017c2c:	3004      	adds	r0, #4
 8017c2e:	091b      	lsrs	r3, r3, #4
 8017c30:	079a      	lsls	r2, r3, #30
 8017c32:	d101      	bne.n	8017c38 <__lo0bits+0x4e>
 8017c34:	3002      	adds	r0, #2
 8017c36:	089b      	lsrs	r3, r3, #2
 8017c38:	07da      	lsls	r2, r3, #31
 8017c3a:	d4e9      	bmi.n	8017c10 <__lo0bits+0x26>
 8017c3c:	3001      	adds	r0, #1
 8017c3e:	085b      	lsrs	r3, r3, #1
 8017c40:	d1e6      	bne.n	8017c10 <__lo0bits+0x26>
 8017c42:	2020      	movs	r0, #32
 8017c44:	e7e2      	b.n	8017c0c <__lo0bits+0x22>
	...

08017c48 <__i2b>:
 8017c48:	b510      	push	{r4, lr}
 8017c4a:	000c      	movs	r4, r1
 8017c4c:	2101      	movs	r1, #1
 8017c4e:	f7ff feff 	bl	8017a50 <_Balloc>
 8017c52:	2800      	cmp	r0, #0
 8017c54:	d107      	bne.n	8017c66 <__i2b+0x1e>
 8017c56:	2146      	movs	r1, #70	@ 0x46
 8017c58:	4c05      	ldr	r4, [pc, #20]	@ (8017c70 <__i2b+0x28>)
 8017c5a:	0002      	movs	r2, r0
 8017c5c:	4b05      	ldr	r3, [pc, #20]	@ (8017c74 <__i2b+0x2c>)
 8017c5e:	0020      	movs	r0, r4
 8017c60:	31ff      	adds	r1, #255	@ 0xff
 8017c62:	f000 feb3 	bl	80189cc <__assert_func>
 8017c66:	2301      	movs	r3, #1
 8017c68:	6144      	str	r4, [r0, #20]
 8017c6a:	6103      	str	r3, [r0, #16]
 8017c6c:	bd10      	pop	{r4, pc}
 8017c6e:	46c0      	nop			@ (mov r8, r8)
 8017c70:	0801a551 	.word	0x0801a551
 8017c74:	0801a540 	.word	0x0801a540

08017c78 <__multiply>:
 8017c78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c7a:	0014      	movs	r4, r2
 8017c7c:	690a      	ldr	r2, [r1, #16]
 8017c7e:	6923      	ldr	r3, [r4, #16]
 8017c80:	000d      	movs	r5, r1
 8017c82:	b08b      	sub	sp, #44	@ 0x2c
 8017c84:	429a      	cmp	r2, r3
 8017c86:	db02      	blt.n	8017c8e <__multiply+0x16>
 8017c88:	0023      	movs	r3, r4
 8017c8a:	000c      	movs	r4, r1
 8017c8c:	001d      	movs	r5, r3
 8017c8e:	6927      	ldr	r7, [r4, #16]
 8017c90:	692e      	ldr	r6, [r5, #16]
 8017c92:	6861      	ldr	r1, [r4, #4]
 8017c94:	19bb      	adds	r3, r7, r6
 8017c96:	9303      	str	r3, [sp, #12]
 8017c98:	68a3      	ldr	r3, [r4, #8]
 8017c9a:	19ba      	adds	r2, r7, r6
 8017c9c:	4293      	cmp	r3, r2
 8017c9e:	da00      	bge.n	8017ca2 <__multiply+0x2a>
 8017ca0:	3101      	adds	r1, #1
 8017ca2:	f7ff fed5 	bl	8017a50 <_Balloc>
 8017ca6:	9002      	str	r0, [sp, #8]
 8017ca8:	2800      	cmp	r0, #0
 8017caa:	d106      	bne.n	8017cba <__multiply+0x42>
 8017cac:	21b1      	movs	r1, #177	@ 0xb1
 8017cae:	4b49      	ldr	r3, [pc, #292]	@ (8017dd4 <__multiply+0x15c>)
 8017cb0:	4849      	ldr	r0, [pc, #292]	@ (8017dd8 <__multiply+0x160>)
 8017cb2:	9a02      	ldr	r2, [sp, #8]
 8017cb4:	0049      	lsls	r1, r1, #1
 8017cb6:	f000 fe89 	bl	80189cc <__assert_func>
 8017cba:	9b02      	ldr	r3, [sp, #8]
 8017cbc:	2200      	movs	r2, #0
 8017cbe:	3314      	adds	r3, #20
 8017cc0:	469c      	mov	ip, r3
 8017cc2:	19bb      	adds	r3, r7, r6
 8017cc4:	009b      	lsls	r3, r3, #2
 8017cc6:	4463      	add	r3, ip
 8017cc8:	9304      	str	r3, [sp, #16]
 8017cca:	4663      	mov	r3, ip
 8017ccc:	9904      	ldr	r1, [sp, #16]
 8017cce:	428b      	cmp	r3, r1
 8017cd0:	d32a      	bcc.n	8017d28 <__multiply+0xb0>
 8017cd2:	0023      	movs	r3, r4
 8017cd4:	00bf      	lsls	r7, r7, #2
 8017cd6:	3314      	adds	r3, #20
 8017cd8:	3514      	adds	r5, #20
 8017cda:	9308      	str	r3, [sp, #32]
 8017cdc:	00b6      	lsls	r6, r6, #2
 8017cde:	19db      	adds	r3, r3, r7
 8017ce0:	9305      	str	r3, [sp, #20]
 8017ce2:	19ab      	adds	r3, r5, r6
 8017ce4:	9309      	str	r3, [sp, #36]	@ 0x24
 8017ce6:	2304      	movs	r3, #4
 8017ce8:	9306      	str	r3, [sp, #24]
 8017cea:	0023      	movs	r3, r4
 8017cec:	9a05      	ldr	r2, [sp, #20]
 8017cee:	3315      	adds	r3, #21
 8017cf0:	9501      	str	r5, [sp, #4]
 8017cf2:	429a      	cmp	r2, r3
 8017cf4:	d305      	bcc.n	8017d02 <__multiply+0x8a>
 8017cf6:	1b13      	subs	r3, r2, r4
 8017cf8:	3b15      	subs	r3, #21
 8017cfa:	089b      	lsrs	r3, r3, #2
 8017cfc:	3301      	adds	r3, #1
 8017cfe:	009b      	lsls	r3, r3, #2
 8017d00:	9306      	str	r3, [sp, #24]
 8017d02:	9b01      	ldr	r3, [sp, #4]
 8017d04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017d06:	4293      	cmp	r3, r2
 8017d08:	d310      	bcc.n	8017d2c <__multiply+0xb4>
 8017d0a:	9b03      	ldr	r3, [sp, #12]
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	dd05      	ble.n	8017d1c <__multiply+0xa4>
 8017d10:	9b04      	ldr	r3, [sp, #16]
 8017d12:	3b04      	subs	r3, #4
 8017d14:	9304      	str	r3, [sp, #16]
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d056      	beq.n	8017dca <__multiply+0x152>
 8017d1c:	9b02      	ldr	r3, [sp, #8]
 8017d1e:	9a03      	ldr	r2, [sp, #12]
 8017d20:	0018      	movs	r0, r3
 8017d22:	611a      	str	r2, [r3, #16]
 8017d24:	b00b      	add	sp, #44	@ 0x2c
 8017d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d28:	c304      	stmia	r3!, {r2}
 8017d2a:	e7cf      	b.n	8017ccc <__multiply+0x54>
 8017d2c:	9b01      	ldr	r3, [sp, #4]
 8017d2e:	6818      	ldr	r0, [r3, #0]
 8017d30:	b280      	uxth	r0, r0
 8017d32:	2800      	cmp	r0, #0
 8017d34:	d01e      	beq.n	8017d74 <__multiply+0xfc>
 8017d36:	4667      	mov	r7, ip
 8017d38:	2500      	movs	r5, #0
 8017d3a:	9e08      	ldr	r6, [sp, #32]
 8017d3c:	ce02      	ldmia	r6!, {r1}
 8017d3e:	683b      	ldr	r3, [r7, #0]
 8017d40:	9307      	str	r3, [sp, #28]
 8017d42:	b28b      	uxth	r3, r1
 8017d44:	4343      	muls	r3, r0
 8017d46:	001a      	movs	r2, r3
 8017d48:	466b      	mov	r3, sp
 8017d4a:	0c09      	lsrs	r1, r1, #16
 8017d4c:	8b9b      	ldrh	r3, [r3, #28]
 8017d4e:	4341      	muls	r1, r0
 8017d50:	18d3      	adds	r3, r2, r3
 8017d52:	9a07      	ldr	r2, [sp, #28]
 8017d54:	195b      	adds	r3, r3, r5
 8017d56:	0c12      	lsrs	r2, r2, #16
 8017d58:	1889      	adds	r1, r1, r2
 8017d5a:	0c1a      	lsrs	r2, r3, #16
 8017d5c:	188a      	adds	r2, r1, r2
 8017d5e:	b29b      	uxth	r3, r3
 8017d60:	0c15      	lsrs	r5, r2, #16
 8017d62:	0412      	lsls	r2, r2, #16
 8017d64:	431a      	orrs	r2, r3
 8017d66:	9b05      	ldr	r3, [sp, #20]
 8017d68:	c704      	stmia	r7!, {r2}
 8017d6a:	42b3      	cmp	r3, r6
 8017d6c:	d8e6      	bhi.n	8017d3c <__multiply+0xc4>
 8017d6e:	4663      	mov	r3, ip
 8017d70:	9a06      	ldr	r2, [sp, #24]
 8017d72:	509d      	str	r5, [r3, r2]
 8017d74:	9b01      	ldr	r3, [sp, #4]
 8017d76:	6818      	ldr	r0, [r3, #0]
 8017d78:	0c00      	lsrs	r0, r0, #16
 8017d7a:	d020      	beq.n	8017dbe <__multiply+0x146>
 8017d7c:	4663      	mov	r3, ip
 8017d7e:	0025      	movs	r5, r4
 8017d80:	4661      	mov	r1, ip
 8017d82:	2700      	movs	r7, #0
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	3514      	adds	r5, #20
 8017d88:	682a      	ldr	r2, [r5, #0]
 8017d8a:	680e      	ldr	r6, [r1, #0]
 8017d8c:	b292      	uxth	r2, r2
 8017d8e:	4342      	muls	r2, r0
 8017d90:	0c36      	lsrs	r6, r6, #16
 8017d92:	1992      	adds	r2, r2, r6
 8017d94:	19d2      	adds	r2, r2, r7
 8017d96:	0416      	lsls	r6, r2, #16
 8017d98:	b29b      	uxth	r3, r3
 8017d9a:	431e      	orrs	r6, r3
 8017d9c:	600e      	str	r6, [r1, #0]
 8017d9e:	cd40      	ldmia	r5!, {r6}
 8017da0:	684b      	ldr	r3, [r1, #4]
 8017da2:	0c36      	lsrs	r6, r6, #16
 8017da4:	4346      	muls	r6, r0
 8017da6:	b29b      	uxth	r3, r3
 8017da8:	0c12      	lsrs	r2, r2, #16
 8017daa:	18f3      	adds	r3, r6, r3
 8017dac:	189b      	adds	r3, r3, r2
 8017dae:	9a05      	ldr	r2, [sp, #20]
 8017db0:	0c1f      	lsrs	r7, r3, #16
 8017db2:	3104      	adds	r1, #4
 8017db4:	42aa      	cmp	r2, r5
 8017db6:	d8e7      	bhi.n	8017d88 <__multiply+0x110>
 8017db8:	4662      	mov	r2, ip
 8017dba:	9906      	ldr	r1, [sp, #24]
 8017dbc:	5053      	str	r3, [r2, r1]
 8017dbe:	9b01      	ldr	r3, [sp, #4]
 8017dc0:	3304      	adds	r3, #4
 8017dc2:	9301      	str	r3, [sp, #4]
 8017dc4:	2304      	movs	r3, #4
 8017dc6:	449c      	add	ip, r3
 8017dc8:	e79b      	b.n	8017d02 <__multiply+0x8a>
 8017dca:	9b03      	ldr	r3, [sp, #12]
 8017dcc:	3b01      	subs	r3, #1
 8017dce:	9303      	str	r3, [sp, #12]
 8017dd0:	e79b      	b.n	8017d0a <__multiply+0x92>
 8017dd2:	46c0      	nop			@ (mov r8, r8)
 8017dd4:	0801a540 	.word	0x0801a540
 8017dd8:	0801a551 	.word	0x0801a551

08017ddc <__pow5mult>:
 8017ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017dde:	2303      	movs	r3, #3
 8017de0:	0015      	movs	r5, r2
 8017de2:	0007      	movs	r7, r0
 8017de4:	000e      	movs	r6, r1
 8017de6:	401a      	ands	r2, r3
 8017de8:	421d      	tst	r5, r3
 8017dea:	d008      	beq.n	8017dfe <__pow5mult+0x22>
 8017dec:	4925      	ldr	r1, [pc, #148]	@ (8017e84 <__pow5mult+0xa8>)
 8017dee:	3a01      	subs	r2, #1
 8017df0:	0092      	lsls	r2, r2, #2
 8017df2:	5852      	ldr	r2, [r2, r1]
 8017df4:	2300      	movs	r3, #0
 8017df6:	0031      	movs	r1, r6
 8017df8:	f7ff fe92 	bl	8017b20 <__multadd>
 8017dfc:	0006      	movs	r6, r0
 8017dfe:	10ad      	asrs	r5, r5, #2
 8017e00:	d03d      	beq.n	8017e7e <__pow5mult+0xa2>
 8017e02:	69fc      	ldr	r4, [r7, #28]
 8017e04:	2c00      	cmp	r4, #0
 8017e06:	d10f      	bne.n	8017e28 <__pow5mult+0x4c>
 8017e08:	2010      	movs	r0, #16
 8017e0a:	f7ff fd65 	bl	80178d8 <malloc>
 8017e0e:	1e02      	subs	r2, r0, #0
 8017e10:	61f8      	str	r0, [r7, #28]
 8017e12:	d105      	bne.n	8017e20 <__pow5mult+0x44>
 8017e14:	21b4      	movs	r1, #180	@ 0xb4
 8017e16:	4b1c      	ldr	r3, [pc, #112]	@ (8017e88 <__pow5mult+0xac>)
 8017e18:	481c      	ldr	r0, [pc, #112]	@ (8017e8c <__pow5mult+0xb0>)
 8017e1a:	31ff      	adds	r1, #255	@ 0xff
 8017e1c:	f000 fdd6 	bl	80189cc <__assert_func>
 8017e20:	6044      	str	r4, [r0, #4]
 8017e22:	6084      	str	r4, [r0, #8]
 8017e24:	6004      	str	r4, [r0, #0]
 8017e26:	60c4      	str	r4, [r0, #12]
 8017e28:	69fb      	ldr	r3, [r7, #28]
 8017e2a:	689c      	ldr	r4, [r3, #8]
 8017e2c:	9301      	str	r3, [sp, #4]
 8017e2e:	2c00      	cmp	r4, #0
 8017e30:	d108      	bne.n	8017e44 <__pow5mult+0x68>
 8017e32:	0038      	movs	r0, r7
 8017e34:	4916      	ldr	r1, [pc, #88]	@ (8017e90 <__pow5mult+0xb4>)
 8017e36:	f7ff ff07 	bl	8017c48 <__i2b>
 8017e3a:	9b01      	ldr	r3, [sp, #4]
 8017e3c:	0004      	movs	r4, r0
 8017e3e:	6098      	str	r0, [r3, #8]
 8017e40:	2300      	movs	r3, #0
 8017e42:	6003      	str	r3, [r0, #0]
 8017e44:	2301      	movs	r3, #1
 8017e46:	421d      	tst	r5, r3
 8017e48:	d00a      	beq.n	8017e60 <__pow5mult+0x84>
 8017e4a:	0031      	movs	r1, r6
 8017e4c:	0022      	movs	r2, r4
 8017e4e:	0038      	movs	r0, r7
 8017e50:	f7ff ff12 	bl	8017c78 <__multiply>
 8017e54:	0031      	movs	r1, r6
 8017e56:	9001      	str	r0, [sp, #4]
 8017e58:	0038      	movs	r0, r7
 8017e5a:	f7ff fe3d 	bl	8017ad8 <_Bfree>
 8017e5e:	9e01      	ldr	r6, [sp, #4]
 8017e60:	106d      	asrs	r5, r5, #1
 8017e62:	d00c      	beq.n	8017e7e <__pow5mult+0xa2>
 8017e64:	6820      	ldr	r0, [r4, #0]
 8017e66:	2800      	cmp	r0, #0
 8017e68:	d107      	bne.n	8017e7a <__pow5mult+0x9e>
 8017e6a:	0022      	movs	r2, r4
 8017e6c:	0021      	movs	r1, r4
 8017e6e:	0038      	movs	r0, r7
 8017e70:	f7ff ff02 	bl	8017c78 <__multiply>
 8017e74:	2300      	movs	r3, #0
 8017e76:	6020      	str	r0, [r4, #0]
 8017e78:	6003      	str	r3, [r0, #0]
 8017e7a:	0004      	movs	r4, r0
 8017e7c:	e7e2      	b.n	8017e44 <__pow5mult+0x68>
 8017e7e:	0030      	movs	r0, r6
 8017e80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017e82:	46c0      	nop			@ (mov r8, r8)
 8017e84:	0801a5ac 	.word	0x0801a5ac
 8017e88:	0801a4d1 	.word	0x0801a4d1
 8017e8c:	0801a551 	.word	0x0801a551
 8017e90:	00000271 	.word	0x00000271

08017e94 <__lshift>:
 8017e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e96:	000c      	movs	r4, r1
 8017e98:	0016      	movs	r6, r2
 8017e9a:	6923      	ldr	r3, [r4, #16]
 8017e9c:	1157      	asrs	r7, r2, #5
 8017e9e:	b085      	sub	sp, #20
 8017ea0:	18fb      	adds	r3, r7, r3
 8017ea2:	9301      	str	r3, [sp, #4]
 8017ea4:	3301      	adds	r3, #1
 8017ea6:	9300      	str	r3, [sp, #0]
 8017ea8:	6849      	ldr	r1, [r1, #4]
 8017eaa:	68a3      	ldr	r3, [r4, #8]
 8017eac:	9002      	str	r0, [sp, #8]
 8017eae:	9a00      	ldr	r2, [sp, #0]
 8017eb0:	4293      	cmp	r3, r2
 8017eb2:	db10      	blt.n	8017ed6 <__lshift+0x42>
 8017eb4:	9802      	ldr	r0, [sp, #8]
 8017eb6:	f7ff fdcb 	bl	8017a50 <_Balloc>
 8017eba:	2300      	movs	r3, #0
 8017ebc:	0001      	movs	r1, r0
 8017ebe:	0005      	movs	r5, r0
 8017ec0:	001a      	movs	r2, r3
 8017ec2:	3114      	adds	r1, #20
 8017ec4:	4298      	cmp	r0, r3
 8017ec6:	d10c      	bne.n	8017ee2 <__lshift+0x4e>
 8017ec8:	21ef      	movs	r1, #239	@ 0xef
 8017eca:	002a      	movs	r2, r5
 8017ecc:	4b25      	ldr	r3, [pc, #148]	@ (8017f64 <__lshift+0xd0>)
 8017ece:	4826      	ldr	r0, [pc, #152]	@ (8017f68 <__lshift+0xd4>)
 8017ed0:	0049      	lsls	r1, r1, #1
 8017ed2:	f000 fd7b 	bl	80189cc <__assert_func>
 8017ed6:	3101      	adds	r1, #1
 8017ed8:	005b      	lsls	r3, r3, #1
 8017eda:	e7e8      	b.n	8017eae <__lshift+0x1a>
 8017edc:	0098      	lsls	r0, r3, #2
 8017ede:	500a      	str	r2, [r1, r0]
 8017ee0:	3301      	adds	r3, #1
 8017ee2:	42bb      	cmp	r3, r7
 8017ee4:	dbfa      	blt.n	8017edc <__lshift+0x48>
 8017ee6:	43fb      	mvns	r3, r7
 8017ee8:	17db      	asrs	r3, r3, #31
 8017eea:	401f      	ands	r7, r3
 8017eec:	00bf      	lsls	r7, r7, #2
 8017eee:	0023      	movs	r3, r4
 8017ef0:	201f      	movs	r0, #31
 8017ef2:	19c9      	adds	r1, r1, r7
 8017ef4:	0037      	movs	r7, r6
 8017ef6:	6922      	ldr	r2, [r4, #16]
 8017ef8:	3314      	adds	r3, #20
 8017efa:	0092      	lsls	r2, r2, #2
 8017efc:	189a      	adds	r2, r3, r2
 8017efe:	4007      	ands	r7, r0
 8017f00:	4206      	tst	r6, r0
 8017f02:	d029      	beq.n	8017f58 <__lshift+0xc4>
 8017f04:	3001      	adds	r0, #1
 8017f06:	1bc0      	subs	r0, r0, r7
 8017f08:	9003      	str	r0, [sp, #12]
 8017f0a:	468c      	mov	ip, r1
 8017f0c:	2000      	movs	r0, #0
 8017f0e:	681e      	ldr	r6, [r3, #0]
 8017f10:	40be      	lsls	r6, r7
 8017f12:	4306      	orrs	r6, r0
 8017f14:	4660      	mov	r0, ip
 8017f16:	c040      	stmia	r0!, {r6}
 8017f18:	4684      	mov	ip, r0
 8017f1a:	9e03      	ldr	r6, [sp, #12]
 8017f1c:	cb01      	ldmia	r3!, {r0}
 8017f1e:	40f0      	lsrs	r0, r6
 8017f20:	429a      	cmp	r2, r3
 8017f22:	d8f4      	bhi.n	8017f0e <__lshift+0x7a>
 8017f24:	0026      	movs	r6, r4
 8017f26:	3615      	adds	r6, #21
 8017f28:	2304      	movs	r3, #4
 8017f2a:	42b2      	cmp	r2, r6
 8017f2c:	d304      	bcc.n	8017f38 <__lshift+0xa4>
 8017f2e:	1b13      	subs	r3, r2, r4
 8017f30:	3b15      	subs	r3, #21
 8017f32:	089b      	lsrs	r3, r3, #2
 8017f34:	3301      	adds	r3, #1
 8017f36:	009b      	lsls	r3, r3, #2
 8017f38:	50c8      	str	r0, [r1, r3]
 8017f3a:	2800      	cmp	r0, #0
 8017f3c:	d002      	beq.n	8017f44 <__lshift+0xb0>
 8017f3e:	9b01      	ldr	r3, [sp, #4]
 8017f40:	3302      	adds	r3, #2
 8017f42:	9300      	str	r3, [sp, #0]
 8017f44:	9b00      	ldr	r3, [sp, #0]
 8017f46:	9802      	ldr	r0, [sp, #8]
 8017f48:	3b01      	subs	r3, #1
 8017f4a:	0021      	movs	r1, r4
 8017f4c:	612b      	str	r3, [r5, #16]
 8017f4e:	f7ff fdc3 	bl	8017ad8 <_Bfree>
 8017f52:	0028      	movs	r0, r5
 8017f54:	b005      	add	sp, #20
 8017f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f58:	cb01      	ldmia	r3!, {r0}
 8017f5a:	c101      	stmia	r1!, {r0}
 8017f5c:	429a      	cmp	r2, r3
 8017f5e:	d8fb      	bhi.n	8017f58 <__lshift+0xc4>
 8017f60:	e7f0      	b.n	8017f44 <__lshift+0xb0>
 8017f62:	46c0      	nop			@ (mov r8, r8)
 8017f64:	0801a540 	.word	0x0801a540
 8017f68:	0801a551 	.word	0x0801a551

08017f6c <__mcmp>:
 8017f6c:	b530      	push	{r4, r5, lr}
 8017f6e:	690b      	ldr	r3, [r1, #16]
 8017f70:	6904      	ldr	r4, [r0, #16]
 8017f72:	0002      	movs	r2, r0
 8017f74:	1ae0      	subs	r0, r4, r3
 8017f76:	429c      	cmp	r4, r3
 8017f78:	d10f      	bne.n	8017f9a <__mcmp+0x2e>
 8017f7a:	3214      	adds	r2, #20
 8017f7c:	009b      	lsls	r3, r3, #2
 8017f7e:	3114      	adds	r1, #20
 8017f80:	0014      	movs	r4, r2
 8017f82:	18c9      	adds	r1, r1, r3
 8017f84:	18d2      	adds	r2, r2, r3
 8017f86:	3a04      	subs	r2, #4
 8017f88:	3904      	subs	r1, #4
 8017f8a:	6815      	ldr	r5, [r2, #0]
 8017f8c:	680b      	ldr	r3, [r1, #0]
 8017f8e:	429d      	cmp	r5, r3
 8017f90:	d004      	beq.n	8017f9c <__mcmp+0x30>
 8017f92:	2001      	movs	r0, #1
 8017f94:	429d      	cmp	r5, r3
 8017f96:	d200      	bcs.n	8017f9a <__mcmp+0x2e>
 8017f98:	3802      	subs	r0, #2
 8017f9a:	bd30      	pop	{r4, r5, pc}
 8017f9c:	4294      	cmp	r4, r2
 8017f9e:	d3f2      	bcc.n	8017f86 <__mcmp+0x1a>
 8017fa0:	e7fb      	b.n	8017f9a <__mcmp+0x2e>
	...

08017fa4 <__mdiff>:
 8017fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017fa6:	000c      	movs	r4, r1
 8017fa8:	b087      	sub	sp, #28
 8017faa:	9000      	str	r0, [sp, #0]
 8017fac:	0011      	movs	r1, r2
 8017fae:	0020      	movs	r0, r4
 8017fb0:	0017      	movs	r7, r2
 8017fb2:	f7ff ffdb 	bl	8017f6c <__mcmp>
 8017fb6:	1e05      	subs	r5, r0, #0
 8017fb8:	d110      	bne.n	8017fdc <__mdiff+0x38>
 8017fba:	0001      	movs	r1, r0
 8017fbc:	9800      	ldr	r0, [sp, #0]
 8017fbe:	f7ff fd47 	bl	8017a50 <_Balloc>
 8017fc2:	1e02      	subs	r2, r0, #0
 8017fc4:	d104      	bne.n	8017fd0 <__mdiff+0x2c>
 8017fc6:	4b40      	ldr	r3, [pc, #256]	@ (80180c8 <__mdiff+0x124>)
 8017fc8:	4840      	ldr	r0, [pc, #256]	@ (80180cc <__mdiff+0x128>)
 8017fca:	4941      	ldr	r1, [pc, #260]	@ (80180d0 <__mdiff+0x12c>)
 8017fcc:	f000 fcfe 	bl	80189cc <__assert_func>
 8017fd0:	2301      	movs	r3, #1
 8017fd2:	6145      	str	r5, [r0, #20]
 8017fd4:	6103      	str	r3, [r0, #16]
 8017fd6:	0010      	movs	r0, r2
 8017fd8:	b007      	add	sp, #28
 8017fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017fdc:	2600      	movs	r6, #0
 8017fde:	42b0      	cmp	r0, r6
 8017fe0:	da03      	bge.n	8017fea <__mdiff+0x46>
 8017fe2:	0023      	movs	r3, r4
 8017fe4:	003c      	movs	r4, r7
 8017fe6:	001f      	movs	r7, r3
 8017fe8:	3601      	adds	r6, #1
 8017fea:	6861      	ldr	r1, [r4, #4]
 8017fec:	9800      	ldr	r0, [sp, #0]
 8017fee:	f7ff fd2f 	bl	8017a50 <_Balloc>
 8017ff2:	1e02      	subs	r2, r0, #0
 8017ff4:	d103      	bne.n	8017ffe <__mdiff+0x5a>
 8017ff6:	4b34      	ldr	r3, [pc, #208]	@ (80180c8 <__mdiff+0x124>)
 8017ff8:	4834      	ldr	r0, [pc, #208]	@ (80180cc <__mdiff+0x128>)
 8017ffa:	4936      	ldr	r1, [pc, #216]	@ (80180d4 <__mdiff+0x130>)
 8017ffc:	e7e6      	b.n	8017fcc <__mdiff+0x28>
 8017ffe:	6923      	ldr	r3, [r4, #16]
 8018000:	3414      	adds	r4, #20
 8018002:	9300      	str	r3, [sp, #0]
 8018004:	009b      	lsls	r3, r3, #2
 8018006:	18e3      	adds	r3, r4, r3
 8018008:	0021      	movs	r1, r4
 801800a:	9401      	str	r4, [sp, #4]
 801800c:	003c      	movs	r4, r7
 801800e:	9302      	str	r3, [sp, #8]
 8018010:	693b      	ldr	r3, [r7, #16]
 8018012:	3414      	adds	r4, #20
 8018014:	009b      	lsls	r3, r3, #2
 8018016:	18e3      	adds	r3, r4, r3
 8018018:	9303      	str	r3, [sp, #12]
 801801a:	0003      	movs	r3, r0
 801801c:	60c6      	str	r6, [r0, #12]
 801801e:	468c      	mov	ip, r1
 8018020:	2000      	movs	r0, #0
 8018022:	3314      	adds	r3, #20
 8018024:	9304      	str	r3, [sp, #16]
 8018026:	9305      	str	r3, [sp, #20]
 8018028:	4663      	mov	r3, ip
 801802a:	cb20      	ldmia	r3!, {r5}
 801802c:	b2a9      	uxth	r1, r5
 801802e:	000e      	movs	r6, r1
 8018030:	469c      	mov	ip, r3
 8018032:	cc08      	ldmia	r4!, {r3}
 8018034:	0c2d      	lsrs	r5, r5, #16
 8018036:	b299      	uxth	r1, r3
 8018038:	1a71      	subs	r1, r6, r1
 801803a:	1809      	adds	r1, r1, r0
 801803c:	0c1b      	lsrs	r3, r3, #16
 801803e:	1408      	asrs	r0, r1, #16
 8018040:	1aeb      	subs	r3, r5, r3
 8018042:	181b      	adds	r3, r3, r0
 8018044:	1418      	asrs	r0, r3, #16
 8018046:	b289      	uxth	r1, r1
 8018048:	041b      	lsls	r3, r3, #16
 801804a:	4319      	orrs	r1, r3
 801804c:	9b05      	ldr	r3, [sp, #20]
 801804e:	c302      	stmia	r3!, {r1}
 8018050:	9305      	str	r3, [sp, #20]
 8018052:	9b03      	ldr	r3, [sp, #12]
 8018054:	42a3      	cmp	r3, r4
 8018056:	d8e7      	bhi.n	8018028 <__mdiff+0x84>
 8018058:	0039      	movs	r1, r7
 801805a:	9c03      	ldr	r4, [sp, #12]
 801805c:	3115      	adds	r1, #21
 801805e:	2304      	movs	r3, #4
 8018060:	428c      	cmp	r4, r1
 8018062:	d304      	bcc.n	801806e <__mdiff+0xca>
 8018064:	1be3      	subs	r3, r4, r7
 8018066:	3b15      	subs	r3, #21
 8018068:	089b      	lsrs	r3, r3, #2
 801806a:	3301      	adds	r3, #1
 801806c:	009b      	lsls	r3, r3, #2
 801806e:	9901      	ldr	r1, [sp, #4]
 8018070:	18cd      	adds	r5, r1, r3
 8018072:	9904      	ldr	r1, [sp, #16]
 8018074:	002e      	movs	r6, r5
 8018076:	18cb      	adds	r3, r1, r3
 8018078:	001f      	movs	r7, r3
 801807a:	9902      	ldr	r1, [sp, #8]
 801807c:	428e      	cmp	r6, r1
 801807e:	d311      	bcc.n	80180a4 <__mdiff+0x100>
 8018080:	9c02      	ldr	r4, [sp, #8]
 8018082:	1ee9      	subs	r1, r5, #3
 8018084:	2000      	movs	r0, #0
 8018086:	428c      	cmp	r4, r1
 8018088:	d304      	bcc.n	8018094 <__mdiff+0xf0>
 801808a:	0021      	movs	r1, r4
 801808c:	3103      	adds	r1, #3
 801808e:	1b49      	subs	r1, r1, r5
 8018090:	0889      	lsrs	r1, r1, #2
 8018092:	0088      	lsls	r0, r1, #2
 8018094:	181b      	adds	r3, r3, r0
 8018096:	3b04      	subs	r3, #4
 8018098:	6819      	ldr	r1, [r3, #0]
 801809a:	2900      	cmp	r1, #0
 801809c:	d010      	beq.n	80180c0 <__mdiff+0x11c>
 801809e:	9b00      	ldr	r3, [sp, #0]
 80180a0:	6113      	str	r3, [r2, #16]
 80180a2:	e798      	b.n	8017fd6 <__mdiff+0x32>
 80180a4:	4684      	mov	ip, r0
 80180a6:	ce02      	ldmia	r6!, {r1}
 80180a8:	b288      	uxth	r0, r1
 80180aa:	4460      	add	r0, ip
 80180ac:	1400      	asrs	r0, r0, #16
 80180ae:	0c0c      	lsrs	r4, r1, #16
 80180b0:	1904      	adds	r4, r0, r4
 80180b2:	4461      	add	r1, ip
 80180b4:	1420      	asrs	r0, r4, #16
 80180b6:	b289      	uxth	r1, r1
 80180b8:	0424      	lsls	r4, r4, #16
 80180ba:	4321      	orrs	r1, r4
 80180bc:	c702      	stmia	r7!, {r1}
 80180be:	e7dc      	b.n	801807a <__mdiff+0xd6>
 80180c0:	9900      	ldr	r1, [sp, #0]
 80180c2:	3901      	subs	r1, #1
 80180c4:	9100      	str	r1, [sp, #0]
 80180c6:	e7e6      	b.n	8018096 <__mdiff+0xf2>
 80180c8:	0801a540 	.word	0x0801a540
 80180cc:	0801a551 	.word	0x0801a551
 80180d0:	00000237 	.word	0x00000237
 80180d4:	00000245 	.word	0x00000245

080180d8 <__d2b>:
 80180d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80180da:	2101      	movs	r1, #1
 80180dc:	0016      	movs	r6, r2
 80180de:	001f      	movs	r7, r3
 80180e0:	f7ff fcb6 	bl	8017a50 <_Balloc>
 80180e4:	1e04      	subs	r4, r0, #0
 80180e6:	d105      	bne.n	80180f4 <__d2b+0x1c>
 80180e8:	0022      	movs	r2, r4
 80180ea:	4b25      	ldr	r3, [pc, #148]	@ (8018180 <__d2b+0xa8>)
 80180ec:	4825      	ldr	r0, [pc, #148]	@ (8018184 <__d2b+0xac>)
 80180ee:	4926      	ldr	r1, [pc, #152]	@ (8018188 <__d2b+0xb0>)
 80180f0:	f000 fc6c 	bl	80189cc <__assert_func>
 80180f4:	033b      	lsls	r3, r7, #12
 80180f6:	007d      	lsls	r5, r7, #1
 80180f8:	0b1b      	lsrs	r3, r3, #12
 80180fa:	0d6d      	lsrs	r5, r5, #21
 80180fc:	d002      	beq.n	8018104 <__d2b+0x2c>
 80180fe:	2280      	movs	r2, #128	@ 0x80
 8018100:	0352      	lsls	r2, r2, #13
 8018102:	4313      	orrs	r3, r2
 8018104:	9301      	str	r3, [sp, #4]
 8018106:	2e00      	cmp	r6, #0
 8018108:	d025      	beq.n	8018156 <__d2b+0x7e>
 801810a:	4668      	mov	r0, sp
 801810c:	9600      	str	r6, [sp, #0]
 801810e:	f7ff fd6c 	bl	8017bea <__lo0bits>
 8018112:	9b01      	ldr	r3, [sp, #4]
 8018114:	9900      	ldr	r1, [sp, #0]
 8018116:	2800      	cmp	r0, #0
 8018118:	d01b      	beq.n	8018152 <__d2b+0x7a>
 801811a:	2220      	movs	r2, #32
 801811c:	001e      	movs	r6, r3
 801811e:	1a12      	subs	r2, r2, r0
 8018120:	4096      	lsls	r6, r2
 8018122:	0032      	movs	r2, r6
 8018124:	40c3      	lsrs	r3, r0
 8018126:	430a      	orrs	r2, r1
 8018128:	6162      	str	r2, [r4, #20]
 801812a:	9301      	str	r3, [sp, #4]
 801812c:	9e01      	ldr	r6, [sp, #4]
 801812e:	61a6      	str	r6, [r4, #24]
 8018130:	1e73      	subs	r3, r6, #1
 8018132:	419e      	sbcs	r6, r3
 8018134:	3601      	adds	r6, #1
 8018136:	6126      	str	r6, [r4, #16]
 8018138:	2d00      	cmp	r5, #0
 801813a:	d014      	beq.n	8018166 <__d2b+0x8e>
 801813c:	2635      	movs	r6, #53	@ 0x35
 801813e:	4b13      	ldr	r3, [pc, #76]	@ (801818c <__d2b+0xb4>)
 8018140:	18ed      	adds	r5, r5, r3
 8018142:	9b08      	ldr	r3, [sp, #32]
 8018144:	182d      	adds	r5, r5, r0
 8018146:	601d      	str	r5, [r3, #0]
 8018148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801814a:	1a36      	subs	r6, r6, r0
 801814c:	601e      	str	r6, [r3, #0]
 801814e:	0020      	movs	r0, r4
 8018150:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018152:	6161      	str	r1, [r4, #20]
 8018154:	e7ea      	b.n	801812c <__d2b+0x54>
 8018156:	a801      	add	r0, sp, #4
 8018158:	f7ff fd47 	bl	8017bea <__lo0bits>
 801815c:	9b01      	ldr	r3, [sp, #4]
 801815e:	2601      	movs	r6, #1
 8018160:	6163      	str	r3, [r4, #20]
 8018162:	3020      	adds	r0, #32
 8018164:	e7e7      	b.n	8018136 <__d2b+0x5e>
 8018166:	4b0a      	ldr	r3, [pc, #40]	@ (8018190 <__d2b+0xb8>)
 8018168:	18c0      	adds	r0, r0, r3
 801816a:	9b08      	ldr	r3, [sp, #32]
 801816c:	6018      	str	r0, [r3, #0]
 801816e:	4b09      	ldr	r3, [pc, #36]	@ (8018194 <__d2b+0xbc>)
 8018170:	18f3      	adds	r3, r6, r3
 8018172:	009b      	lsls	r3, r3, #2
 8018174:	18e3      	adds	r3, r4, r3
 8018176:	6958      	ldr	r0, [r3, #20]
 8018178:	f7ff fd16 	bl	8017ba8 <__hi0bits>
 801817c:	0176      	lsls	r6, r6, #5
 801817e:	e7e3      	b.n	8018148 <__d2b+0x70>
 8018180:	0801a540 	.word	0x0801a540
 8018184:	0801a551 	.word	0x0801a551
 8018188:	0000030f 	.word	0x0000030f
 801818c:	fffffbcd 	.word	0xfffffbcd
 8018190:	fffffbce 	.word	0xfffffbce
 8018194:	3fffffff 	.word	0x3fffffff

08018198 <__ssputs_r>:
 8018198:	b5f0      	push	{r4, r5, r6, r7, lr}
 801819a:	688e      	ldr	r6, [r1, #8]
 801819c:	b085      	sub	sp, #20
 801819e:	001f      	movs	r7, r3
 80181a0:	000c      	movs	r4, r1
 80181a2:	680b      	ldr	r3, [r1, #0]
 80181a4:	9002      	str	r0, [sp, #8]
 80181a6:	9203      	str	r2, [sp, #12]
 80181a8:	42be      	cmp	r6, r7
 80181aa:	d830      	bhi.n	801820e <__ssputs_r+0x76>
 80181ac:	210c      	movs	r1, #12
 80181ae:	5e62      	ldrsh	r2, [r4, r1]
 80181b0:	2190      	movs	r1, #144	@ 0x90
 80181b2:	00c9      	lsls	r1, r1, #3
 80181b4:	420a      	tst	r2, r1
 80181b6:	d028      	beq.n	801820a <__ssputs_r+0x72>
 80181b8:	2003      	movs	r0, #3
 80181ba:	6921      	ldr	r1, [r4, #16]
 80181bc:	1a5b      	subs	r3, r3, r1
 80181be:	9301      	str	r3, [sp, #4]
 80181c0:	6963      	ldr	r3, [r4, #20]
 80181c2:	4343      	muls	r3, r0
 80181c4:	9801      	ldr	r0, [sp, #4]
 80181c6:	0fdd      	lsrs	r5, r3, #31
 80181c8:	18ed      	adds	r5, r5, r3
 80181ca:	1c7b      	adds	r3, r7, #1
 80181cc:	181b      	adds	r3, r3, r0
 80181ce:	106d      	asrs	r5, r5, #1
 80181d0:	42ab      	cmp	r3, r5
 80181d2:	d900      	bls.n	80181d6 <__ssputs_r+0x3e>
 80181d4:	001d      	movs	r5, r3
 80181d6:	0552      	lsls	r2, r2, #21
 80181d8:	d528      	bpl.n	801822c <__ssputs_r+0x94>
 80181da:	0029      	movs	r1, r5
 80181dc:	9802      	ldr	r0, [sp, #8]
 80181de:	f7ff fba7 	bl	8017930 <_malloc_r>
 80181e2:	1e06      	subs	r6, r0, #0
 80181e4:	d02c      	beq.n	8018240 <__ssputs_r+0xa8>
 80181e6:	9a01      	ldr	r2, [sp, #4]
 80181e8:	6921      	ldr	r1, [r4, #16]
 80181ea:	f7fe fc9f 	bl	8016b2c <memcpy>
 80181ee:	89a2      	ldrh	r2, [r4, #12]
 80181f0:	4b18      	ldr	r3, [pc, #96]	@ (8018254 <__ssputs_r+0xbc>)
 80181f2:	401a      	ands	r2, r3
 80181f4:	2380      	movs	r3, #128	@ 0x80
 80181f6:	4313      	orrs	r3, r2
 80181f8:	81a3      	strh	r3, [r4, #12]
 80181fa:	9b01      	ldr	r3, [sp, #4]
 80181fc:	6126      	str	r6, [r4, #16]
 80181fe:	18f6      	adds	r6, r6, r3
 8018200:	6026      	str	r6, [r4, #0]
 8018202:	003e      	movs	r6, r7
 8018204:	6165      	str	r5, [r4, #20]
 8018206:	1aed      	subs	r5, r5, r3
 8018208:	60a5      	str	r5, [r4, #8]
 801820a:	42be      	cmp	r6, r7
 801820c:	d900      	bls.n	8018210 <__ssputs_r+0x78>
 801820e:	003e      	movs	r6, r7
 8018210:	0032      	movs	r2, r6
 8018212:	9903      	ldr	r1, [sp, #12]
 8018214:	6820      	ldr	r0, [r4, #0]
 8018216:	f000 fbb3 	bl	8018980 <memmove>
 801821a:	2000      	movs	r0, #0
 801821c:	68a3      	ldr	r3, [r4, #8]
 801821e:	1b9b      	subs	r3, r3, r6
 8018220:	60a3      	str	r3, [r4, #8]
 8018222:	6823      	ldr	r3, [r4, #0]
 8018224:	199b      	adds	r3, r3, r6
 8018226:	6023      	str	r3, [r4, #0]
 8018228:	b005      	add	sp, #20
 801822a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801822c:	002a      	movs	r2, r5
 801822e:	9802      	ldr	r0, [sp, #8]
 8018230:	f000 fc29 	bl	8018a86 <_realloc_r>
 8018234:	1e06      	subs	r6, r0, #0
 8018236:	d1e0      	bne.n	80181fa <__ssputs_r+0x62>
 8018238:	6921      	ldr	r1, [r4, #16]
 801823a:	9802      	ldr	r0, [sp, #8]
 801823c:	f7ff fb02 	bl	8017844 <_free_r>
 8018240:	230c      	movs	r3, #12
 8018242:	2001      	movs	r0, #1
 8018244:	9a02      	ldr	r2, [sp, #8]
 8018246:	4240      	negs	r0, r0
 8018248:	6013      	str	r3, [r2, #0]
 801824a:	89a2      	ldrh	r2, [r4, #12]
 801824c:	3334      	adds	r3, #52	@ 0x34
 801824e:	4313      	orrs	r3, r2
 8018250:	81a3      	strh	r3, [r4, #12]
 8018252:	e7e9      	b.n	8018228 <__ssputs_r+0x90>
 8018254:	fffffb7f 	.word	0xfffffb7f

08018258 <_svfiprintf_r>:
 8018258:	b5f0      	push	{r4, r5, r6, r7, lr}
 801825a:	b0a1      	sub	sp, #132	@ 0x84
 801825c:	9003      	str	r0, [sp, #12]
 801825e:	001d      	movs	r5, r3
 8018260:	898b      	ldrh	r3, [r1, #12]
 8018262:	000f      	movs	r7, r1
 8018264:	0016      	movs	r6, r2
 8018266:	061b      	lsls	r3, r3, #24
 8018268:	d511      	bpl.n	801828e <_svfiprintf_r+0x36>
 801826a:	690b      	ldr	r3, [r1, #16]
 801826c:	2b00      	cmp	r3, #0
 801826e:	d10e      	bne.n	801828e <_svfiprintf_r+0x36>
 8018270:	2140      	movs	r1, #64	@ 0x40
 8018272:	f7ff fb5d 	bl	8017930 <_malloc_r>
 8018276:	6038      	str	r0, [r7, #0]
 8018278:	6138      	str	r0, [r7, #16]
 801827a:	2800      	cmp	r0, #0
 801827c:	d105      	bne.n	801828a <_svfiprintf_r+0x32>
 801827e:	230c      	movs	r3, #12
 8018280:	9a03      	ldr	r2, [sp, #12]
 8018282:	6013      	str	r3, [r2, #0]
 8018284:	2001      	movs	r0, #1
 8018286:	4240      	negs	r0, r0
 8018288:	e0cf      	b.n	801842a <_svfiprintf_r+0x1d2>
 801828a:	2340      	movs	r3, #64	@ 0x40
 801828c:	617b      	str	r3, [r7, #20]
 801828e:	2300      	movs	r3, #0
 8018290:	ac08      	add	r4, sp, #32
 8018292:	6163      	str	r3, [r4, #20]
 8018294:	3320      	adds	r3, #32
 8018296:	7663      	strb	r3, [r4, #25]
 8018298:	3310      	adds	r3, #16
 801829a:	76a3      	strb	r3, [r4, #26]
 801829c:	9507      	str	r5, [sp, #28]
 801829e:	0035      	movs	r5, r6
 80182a0:	782b      	ldrb	r3, [r5, #0]
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d001      	beq.n	80182aa <_svfiprintf_r+0x52>
 80182a6:	2b25      	cmp	r3, #37	@ 0x25
 80182a8:	d148      	bne.n	801833c <_svfiprintf_r+0xe4>
 80182aa:	1bab      	subs	r3, r5, r6
 80182ac:	9305      	str	r3, [sp, #20]
 80182ae:	42b5      	cmp	r5, r6
 80182b0:	d00b      	beq.n	80182ca <_svfiprintf_r+0x72>
 80182b2:	0032      	movs	r2, r6
 80182b4:	0039      	movs	r1, r7
 80182b6:	9803      	ldr	r0, [sp, #12]
 80182b8:	f7ff ff6e 	bl	8018198 <__ssputs_r>
 80182bc:	3001      	adds	r0, #1
 80182be:	d100      	bne.n	80182c2 <_svfiprintf_r+0x6a>
 80182c0:	e0ae      	b.n	8018420 <_svfiprintf_r+0x1c8>
 80182c2:	6963      	ldr	r3, [r4, #20]
 80182c4:	9a05      	ldr	r2, [sp, #20]
 80182c6:	189b      	adds	r3, r3, r2
 80182c8:	6163      	str	r3, [r4, #20]
 80182ca:	782b      	ldrb	r3, [r5, #0]
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d100      	bne.n	80182d2 <_svfiprintf_r+0x7a>
 80182d0:	e0a6      	b.n	8018420 <_svfiprintf_r+0x1c8>
 80182d2:	2201      	movs	r2, #1
 80182d4:	2300      	movs	r3, #0
 80182d6:	4252      	negs	r2, r2
 80182d8:	6062      	str	r2, [r4, #4]
 80182da:	a904      	add	r1, sp, #16
 80182dc:	3254      	adds	r2, #84	@ 0x54
 80182de:	1852      	adds	r2, r2, r1
 80182e0:	1c6e      	adds	r6, r5, #1
 80182e2:	6023      	str	r3, [r4, #0]
 80182e4:	60e3      	str	r3, [r4, #12]
 80182e6:	60a3      	str	r3, [r4, #8]
 80182e8:	7013      	strb	r3, [r2, #0]
 80182ea:	65a3      	str	r3, [r4, #88]	@ 0x58
 80182ec:	4b54      	ldr	r3, [pc, #336]	@ (8018440 <_svfiprintf_r+0x1e8>)
 80182ee:	2205      	movs	r2, #5
 80182f0:	0018      	movs	r0, r3
 80182f2:	7831      	ldrb	r1, [r6, #0]
 80182f4:	9305      	str	r3, [sp, #20]
 80182f6:	f7fe fc0e 	bl	8016b16 <memchr>
 80182fa:	1c75      	adds	r5, r6, #1
 80182fc:	2800      	cmp	r0, #0
 80182fe:	d11f      	bne.n	8018340 <_svfiprintf_r+0xe8>
 8018300:	6822      	ldr	r2, [r4, #0]
 8018302:	06d3      	lsls	r3, r2, #27
 8018304:	d504      	bpl.n	8018310 <_svfiprintf_r+0xb8>
 8018306:	2353      	movs	r3, #83	@ 0x53
 8018308:	a904      	add	r1, sp, #16
 801830a:	185b      	adds	r3, r3, r1
 801830c:	2120      	movs	r1, #32
 801830e:	7019      	strb	r1, [r3, #0]
 8018310:	0713      	lsls	r3, r2, #28
 8018312:	d504      	bpl.n	801831e <_svfiprintf_r+0xc6>
 8018314:	2353      	movs	r3, #83	@ 0x53
 8018316:	a904      	add	r1, sp, #16
 8018318:	185b      	adds	r3, r3, r1
 801831a:	212b      	movs	r1, #43	@ 0x2b
 801831c:	7019      	strb	r1, [r3, #0]
 801831e:	7833      	ldrb	r3, [r6, #0]
 8018320:	2b2a      	cmp	r3, #42	@ 0x2a
 8018322:	d016      	beq.n	8018352 <_svfiprintf_r+0xfa>
 8018324:	0035      	movs	r5, r6
 8018326:	2100      	movs	r1, #0
 8018328:	200a      	movs	r0, #10
 801832a:	68e3      	ldr	r3, [r4, #12]
 801832c:	782a      	ldrb	r2, [r5, #0]
 801832e:	1c6e      	adds	r6, r5, #1
 8018330:	3a30      	subs	r2, #48	@ 0x30
 8018332:	2a09      	cmp	r2, #9
 8018334:	d950      	bls.n	80183d8 <_svfiprintf_r+0x180>
 8018336:	2900      	cmp	r1, #0
 8018338:	d111      	bne.n	801835e <_svfiprintf_r+0x106>
 801833a:	e017      	b.n	801836c <_svfiprintf_r+0x114>
 801833c:	3501      	adds	r5, #1
 801833e:	e7af      	b.n	80182a0 <_svfiprintf_r+0x48>
 8018340:	9b05      	ldr	r3, [sp, #20]
 8018342:	6822      	ldr	r2, [r4, #0]
 8018344:	1ac0      	subs	r0, r0, r3
 8018346:	2301      	movs	r3, #1
 8018348:	4083      	lsls	r3, r0
 801834a:	4313      	orrs	r3, r2
 801834c:	002e      	movs	r6, r5
 801834e:	6023      	str	r3, [r4, #0]
 8018350:	e7cc      	b.n	80182ec <_svfiprintf_r+0x94>
 8018352:	9b07      	ldr	r3, [sp, #28]
 8018354:	1d19      	adds	r1, r3, #4
 8018356:	681b      	ldr	r3, [r3, #0]
 8018358:	9107      	str	r1, [sp, #28]
 801835a:	2b00      	cmp	r3, #0
 801835c:	db01      	blt.n	8018362 <_svfiprintf_r+0x10a>
 801835e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018360:	e004      	b.n	801836c <_svfiprintf_r+0x114>
 8018362:	425b      	negs	r3, r3
 8018364:	60e3      	str	r3, [r4, #12]
 8018366:	2302      	movs	r3, #2
 8018368:	4313      	orrs	r3, r2
 801836a:	6023      	str	r3, [r4, #0]
 801836c:	782b      	ldrb	r3, [r5, #0]
 801836e:	2b2e      	cmp	r3, #46	@ 0x2e
 8018370:	d10c      	bne.n	801838c <_svfiprintf_r+0x134>
 8018372:	786b      	ldrb	r3, [r5, #1]
 8018374:	2b2a      	cmp	r3, #42	@ 0x2a
 8018376:	d134      	bne.n	80183e2 <_svfiprintf_r+0x18a>
 8018378:	9b07      	ldr	r3, [sp, #28]
 801837a:	3502      	adds	r5, #2
 801837c:	1d1a      	adds	r2, r3, #4
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	9207      	str	r2, [sp, #28]
 8018382:	2b00      	cmp	r3, #0
 8018384:	da01      	bge.n	801838a <_svfiprintf_r+0x132>
 8018386:	2301      	movs	r3, #1
 8018388:	425b      	negs	r3, r3
 801838a:	9309      	str	r3, [sp, #36]	@ 0x24
 801838c:	4e2d      	ldr	r6, [pc, #180]	@ (8018444 <_svfiprintf_r+0x1ec>)
 801838e:	2203      	movs	r2, #3
 8018390:	0030      	movs	r0, r6
 8018392:	7829      	ldrb	r1, [r5, #0]
 8018394:	f7fe fbbf 	bl	8016b16 <memchr>
 8018398:	2800      	cmp	r0, #0
 801839a:	d006      	beq.n	80183aa <_svfiprintf_r+0x152>
 801839c:	2340      	movs	r3, #64	@ 0x40
 801839e:	1b80      	subs	r0, r0, r6
 80183a0:	4083      	lsls	r3, r0
 80183a2:	6822      	ldr	r2, [r4, #0]
 80183a4:	3501      	adds	r5, #1
 80183a6:	4313      	orrs	r3, r2
 80183a8:	6023      	str	r3, [r4, #0]
 80183aa:	7829      	ldrb	r1, [r5, #0]
 80183ac:	2206      	movs	r2, #6
 80183ae:	4826      	ldr	r0, [pc, #152]	@ (8018448 <_svfiprintf_r+0x1f0>)
 80183b0:	1c6e      	adds	r6, r5, #1
 80183b2:	7621      	strb	r1, [r4, #24]
 80183b4:	f7fe fbaf 	bl	8016b16 <memchr>
 80183b8:	2800      	cmp	r0, #0
 80183ba:	d038      	beq.n	801842e <_svfiprintf_r+0x1d6>
 80183bc:	4b23      	ldr	r3, [pc, #140]	@ (801844c <_svfiprintf_r+0x1f4>)
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d122      	bne.n	8018408 <_svfiprintf_r+0x1b0>
 80183c2:	2207      	movs	r2, #7
 80183c4:	9b07      	ldr	r3, [sp, #28]
 80183c6:	3307      	adds	r3, #7
 80183c8:	4393      	bics	r3, r2
 80183ca:	3308      	adds	r3, #8
 80183cc:	9307      	str	r3, [sp, #28]
 80183ce:	6963      	ldr	r3, [r4, #20]
 80183d0:	9a04      	ldr	r2, [sp, #16]
 80183d2:	189b      	adds	r3, r3, r2
 80183d4:	6163      	str	r3, [r4, #20]
 80183d6:	e762      	b.n	801829e <_svfiprintf_r+0x46>
 80183d8:	4343      	muls	r3, r0
 80183da:	0035      	movs	r5, r6
 80183dc:	2101      	movs	r1, #1
 80183de:	189b      	adds	r3, r3, r2
 80183e0:	e7a4      	b.n	801832c <_svfiprintf_r+0xd4>
 80183e2:	2300      	movs	r3, #0
 80183e4:	200a      	movs	r0, #10
 80183e6:	0019      	movs	r1, r3
 80183e8:	3501      	adds	r5, #1
 80183ea:	6063      	str	r3, [r4, #4]
 80183ec:	782a      	ldrb	r2, [r5, #0]
 80183ee:	1c6e      	adds	r6, r5, #1
 80183f0:	3a30      	subs	r2, #48	@ 0x30
 80183f2:	2a09      	cmp	r2, #9
 80183f4:	d903      	bls.n	80183fe <_svfiprintf_r+0x1a6>
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d0c8      	beq.n	801838c <_svfiprintf_r+0x134>
 80183fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80183fc:	e7c6      	b.n	801838c <_svfiprintf_r+0x134>
 80183fe:	4341      	muls	r1, r0
 8018400:	0035      	movs	r5, r6
 8018402:	2301      	movs	r3, #1
 8018404:	1889      	adds	r1, r1, r2
 8018406:	e7f1      	b.n	80183ec <_svfiprintf_r+0x194>
 8018408:	aa07      	add	r2, sp, #28
 801840a:	9200      	str	r2, [sp, #0]
 801840c:	0021      	movs	r1, r4
 801840e:	003a      	movs	r2, r7
 8018410:	4b0f      	ldr	r3, [pc, #60]	@ (8018450 <_svfiprintf_r+0x1f8>)
 8018412:	9803      	ldr	r0, [sp, #12]
 8018414:	f7fd fd9a 	bl	8015f4c <_printf_float>
 8018418:	9004      	str	r0, [sp, #16]
 801841a:	9b04      	ldr	r3, [sp, #16]
 801841c:	3301      	adds	r3, #1
 801841e:	d1d6      	bne.n	80183ce <_svfiprintf_r+0x176>
 8018420:	89bb      	ldrh	r3, [r7, #12]
 8018422:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8018424:	065b      	lsls	r3, r3, #25
 8018426:	d500      	bpl.n	801842a <_svfiprintf_r+0x1d2>
 8018428:	e72c      	b.n	8018284 <_svfiprintf_r+0x2c>
 801842a:	b021      	add	sp, #132	@ 0x84
 801842c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801842e:	aa07      	add	r2, sp, #28
 8018430:	9200      	str	r2, [sp, #0]
 8018432:	0021      	movs	r1, r4
 8018434:	003a      	movs	r2, r7
 8018436:	4b06      	ldr	r3, [pc, #24]	@ (8018450 <_svfiprintf_r+0x1f8>)
 8018438:	9803      	ldr	r0, [sp, #12]
 801843a:	f7fe f835 	bl	80164a8 <_printf_i>
 801843e:	e7eb      	b.n	8018418 <_svfiprintf_r+0x1c0>
 8018440:	0801a6a8 	.word	0x0801a6a8
 8018444:	0801a6ae 	.word	0x0801a6ae
 8018448:	0801a6b2 	.word	0x0801a6b2
 801844c:	08015f4d 	.word	0x08015f4d
 8018450:	08018199 	.word	0x08018199

08018454 <__sfputc_r>:
 8018454:	6893      	ldr	r3, [r2, #8]
 8018456:	b510      	push	{r4, lr}
 8018458:	3b01      	subs	r3, #1
 801845a:	6093      	str	r3, [r2, #8]
 801845c:	2b00      	cmp	r3, #0
 801845e:	da04      	bge.n	801846a <__sfputc_r+0x16>
 8018460:	6994      	ldr	r4, [r2, #24]
 8018462:	42a3      	cmp	r3, r4
 8018464:	db07      	blt.n	8018476 <__sfputc_r+0x22>
 8018466:	290a      	cmp	r1, #10
 8018468:	d005      	beq.n	8018476 <__sfputc_r+0x22>
 801846a:	6813      	ldr	r3, [r2, #0]
 801846c:	1c58      	adds	r0, r3, #1
 801846e:	6010      	str	r0, [r2, #0]
 8018470:	7019      	strb	r1, [r3, #0]
 8018472:	0008      	movs	r0, r1
 8018474:	bd10      	pop	{r4, pc}
 8018476:	f000 f9e2 	bl	801883e <__swbuf_r>
 801847a:	0001      	movs	r1, r0
 801847c:	e7f9      	b.n	8018472 <__sfputc_r+0x1e>

0801847e <__sfputs_r>:
 801847e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018480:	0006      	movs	r6, r0
 8018482:	000f      	movs	r7, r1
 8018484:	0014      	movs	r4, r2
 8018486:	18d5      	adds	r5, r2, r3
 8018488:	42ac      	cmp	r4, r5
 801848a:	d101      	bne.n	8018490 <__sfputs_r+0x12>
 801848c:	2000      	movs	r0, #0
 801848e:	e007      	b.n	80184a0 <__sfputs_r+0x22>
 8018490:	7821      	ldrb	r1, [r4, #0]
 8018492:	003a      	movs	r2, r7
 8018494:	0030      	movs	r0, r6
 8018496:	f7ff ffdd 	bl	8018454 <__sfputc_r>
 801849a:	3401      	adds	r4, #1
 801849c:	1c43      	adds	r3, r0, #1
 801849e:	d1f3      	bne.n	8018488 <__sfputs_r+0xa>
 80184a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080184a4 <_vfiprintf_r>:
 80184a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184a6:	b0a1      	sub	sp, #132	@ 0x84
 80184a8:	000f      	movs	r7, r1
 80184aa:	0015      	movs	r5, r2
 80184ac:	001e      	movs	r6, r3
 80184ae:	9003      	str	r0, [sp, #12]
 80184b0:	2800      	cmp	r0, #0
 80184b2:	d004      	beq.n	80184be <_vfiprintf_r+0x1a>
 80184b4:	6a03      	ldr	r3, [r0, #32]
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d101      	bne.n	80184be <_vfiprintf_r+0x1a>
 80184ba:	f7fe f993 	bl	80167e4 <__sinit>
 80184be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80184c0:	07db      	lsls	r3, r3, #31
 80184c2:	d405      	bmi.n	80184d0 <_vfiprintf_r+0x2c>
 80184c4:	89bb      	ldrh	r3, [r7, #12]
 80184c6:	059b      	lsls	r3, r3, #22
 80184c8:	d402      	bmi.n	80184d0 <_vfiprintf_r+0x2c>
 80184ca:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80184cc:	f7fe fb21 	bl	8016b12 <__retarget_lock_acquire_recursive>
 80184d0:	89bb      	ldrh	r3, [r7, #12]
 80184d2:	071b      	lsls	r3, r3, #28
 80184d4:	d502      	bpl.n	80184dc <_vfiprintf_r+0x38>
 80184d6:	693b      	ldr	r3, [r7, #16]
 80184d8:	2b00      	cmp	r3, #0
 80184da:	d113      	bne.n	8018504 <_vfiprintf_r+0x60>
 80184dc:	0039      	movs	r1, r7
 80184de:	9803      	ldr	r0, [sp, #12]
 80184e0:	f000 f9f0 	bl	80188c4 <__swsetup_r>
 80184e4:	2800      	cmp	r0, #0
 80184e6:	d00d      	beq.n	8018504 <_vfiprintf_r+0x60>
 80184e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80184ea:	07db      	lsls	r3, r3, #31
 80184ec:	d503      	bpl.n	80184f6 <_vfiprintf_r+0x52>
 80184ee:	2001      	movs	r0, #1
 80184f0:	4240      	negs	r0, r0
 80184f2:	b021      	add	sp, #132	@ 0x84
 80184f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80184f6:	89bb      	ldrh	r3, [r7, #12]
 80184f8:	059b      	lsls	r3, r3, #22
 80184fa:	d4f8      	bmi.n	80184ee <_vfiprintf_r+0x4a>
 80184fc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80184fe:	f7fe fb09 	bl	8016b14 <__retarget_lock_release_recursive>
 8018502:	e7f4      	b.n	80184ee <_vfiprintf_r+0x4a>
 8018504:	2300      	movs	r3, #0
 8018506:	ac08      	add	r4, sp, #32
 8018508:	6163      	str	r3, [r4, #20]
 801850a:	3320      	adds	r3, #32
 801850c:	7663      	strb	r3, [r4, #25]
 801850e:	3310      	adds	r3, #16
 8018510:	76a3      	strb	r3, [r4, #26]
 8018512:	9607      	str	r6, [sp, #28]
 8018514:	002e      	movs	r6, r5
 8018516:	7833      	ldrb	r3, [r6, #0]
 8018518:	2b00      	cmp	r3, #0
 801851a:	d001      	beq.n	8018520 <_vfiprintf_r+0x7c>
 801851c:	2b25      	cmp	r3, #37	@ 0x25
 801851e:	d148      	bne.n	80185b2 <_vfiprintf_r+0x10e>
 8018520:	1b73      	subs	r3, r6, r5
 8018522:	9305      	str	r3, [sp, #20]
 8018524:	42ae      	cmp	r6, r5
 8018526:	d00b      	beq.n	8018540 <_vfiprintf_r+0x9c>
 8018528:	002a      	movs	r2, r5
 801852a:	0039      	movs	r1, r7
 801852c:	9803      	ldr	r0, [sp, #12]
 801852e:	f7ff ffa6 	bl	801847e <__sfputs_r>
 8018532:	3001      	adds	r0, #1
 8018534:	d100      	bne.n	8018538 <_vfiprintf_r+0x94>
 8018536:	e0ae      	b.n	8018696 <_vfiprintf_r+0x1f2>
 8018538:	6963      	ldr	r3, [r4, #20]
 801853a:	9a05      	ldr	r2, [sp, #20]
 801853c:	189b      	adds	r3, r3, r2
 801853e:	6163      	str	r3, [r4, #20]
 8018540:	7833      	ldrb	r3, [r6, #0]
 8018542:	2b00      	cmp	r3, #0
 8018544:	d100      	bne.n	8018548 <_vfiprintf_r+0xa4>
 8018546:	e0a6      	b.n	8018696 <_vfiprintf_r+0x1f2>
 8018548:	2201      	movs	r2, #1
 801854a:	2300      	movs	r3, #0
 801854c:	4252      	negs	r2, r2
 801854e:	6062      	str	r2, [r4, #4]
 8018550:	a904      	add	r1, sp, #16
 8018552:	3254      	adds	r2, #84	@ 0x54
 8018554:	1852      	adds	r2, r2, r1
 8018556:	1c75      	adds	r5, r6, #1
 8018558:	6023      	str	r3, [r4, #0]
 801855a:	60e3      	str	r3, [r4, #12]
 801855c:	60a3      	str	r3, [r4, #8]
 801855e:	7013      	strb	r3, [r2, #0]
 8018560:	65a3      	str	r3, [r4, #88]	@ 0x58
 8018562:	4b59      	ldr	r3, [pc, #356]	@ (80186c8 <_vfiprintf_r+0x224>)
 8018564:	2205      	movs	r2, #5
 8018566:	0018      	movs	r0, r3
 8018568:	7829      	ldrb	r1, [r5, #0]
 801856a:	9305      	str	r3, [sp, #20]
 801856c:	f7fe fad3 	bl	8016b16 <memchr>
 8018570:	1c6e      	adds	r6, r5, #1
 8018572:	2800      	cmp	r0, #0
 8018574:	d11f      	bne.n	80185b6 <_vfiprintf_r+0x112>
 8018576:	6822      	ldr	r2, [r4, #0]
 8018578:	06d3      	lsls	r3, r2, #27
 801857a:	d504      	bpl.n	8018586 <_vfiprintf_r+0xe2>
 801857c:	2353      	movs	r3, #83	@ 0x53
 801857e:	a904      	add	r1, sp, #16
 8018580:	185b      	adds	r3, r3, r1
 8018582:	2120      	movs	r1, #32
 8018584:	7019      	strb	r1, [r3, #0]
 8018586:	0713      	lsls	r3, r2, #28
 8018588:	d504      	bpl.n	8018594 <_vfiprintf_r+0xf0>
 801858a:	2353      	movs	r3, #83	@ 0x53
 801858c:	a904      	add	r1, sp, #16
 801858e:	185b      	adds	r3, r3, r1
 8018590:	212b      	movs	r1, #43	@ 0x2b
 8018592:	7019      	strb	r1, [r3, #0]
 8018594:	782b      	ldrb	r3, [r5, #0]
 8018596:	2b2a      	cmp	r3, #42	@ 0x2a
 8018598:	d016      	beq.n	80185c8 <_vfiprintf_r+0x124>
 801859a:	002e      	movs	r6, r5
 801859c:	2100      	movs	r1, #0
 801859e:	200a      	movs	r0, #10
 80185a0:	68e3      	ldr	r3, [r4, #12]
 80185a2:	7832      	ldrb	r2, [r6, #0]
 80185a4:	1c75      	adds	r5, r6, #1
 80185a6:	3a30      	subs	r2, #48	@ 0x30
 80185a8:	2a09      	cmp	r2, #9
 80185aa:	d950      	bls.n	801864e <_vfiprintf_r+0x1aa>
 80185ac:	2900      	cmp	r1, #0
 80185ae:	d111      	bne.n	80185d4 <_vfiprintf_r+0x130>
 80185b0:	e017      	b.n	80185e2 <_vfiprintf_r+0x13e>
 80185b2:	3601      	adds	r6, #1
 80185b4:	e7af      	b.n	8018516 <_vfiprintf_r+0x72>
 80185b6:	9b05      	ldr	r3, [sp, #20]
 80185b8:	6822      	ldr	r2, [r4, #0]
 80185ba:	1ac0      	subs	r0, r0, r3
 80185bc:	2301      	movs	r3, #1
 80185be:	4083      	lsls	r3, r0
 80185c0:	4313      	orrs	r3, r2
 80185c2:	0035      	movs	r5, r6
 80185c4:	6023      	str	r3, [r4, #0]
 80185c6:	e7cc      	b.n	8018562 <_vfiprintf_r+0xbe>
 80185c8:	9b07      	ldr	r3, [sp, #28]
 80185ca:	1d19      	adds	r1, r3, #4
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	9107      	str	r1, [sp, #28]
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	db01      	blt.n	80185d8 <_vfiprintf_r+0x134>
 80185d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80185d6:	e004      	b.n	80185e2 <_vfiprintf_r+0x13e>
 80185d8:	425b      	negs	r3, r3
 80185da:	60e3      	str	r3, [r4, #12]
 80185dc:	2302      	movs	r3, #2
 80185de:	4313      	orrs	r3, r2
 80185e0:	6023      	str	r3, [r4, #0]
 80185e2:	7833      	ldrb	r3, [r6, #0]
 80185e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80185e6:	d10c      	bne.n	8018602 <_vfiprintf_r+0x15e>
 80185e8:	7873      	ldrb	r3, [r6, #1]
 80185ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80185ec:	d134      	bne.n	8018658 <_vfiprintf_r+0x1b4>
 80185ee:	9b07      	ldr	r3, [sp, #28]
 80185f0:	3602      	adds	r6, #2
 80185f2:	1d1a      	adds	r2, r3, #4
 80185f4:	681b      	ldr	r3, [r3, #0]
 80185f6:	9207      	str	r2, [sp, #28]
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	da01      	bge.n	8018600 <_vfiprintf_r+0x15c>
 80185fc:	2301      	movs	r3, #1
 80185fe:	425b      	negs	r3, r3
 8018600:	9309      	str	r3, [sp, #36]	@ 0x24
 8018602:	4d32      	ldr	r5, [pc, #200]	@ (80186cc <_vfiprintf_r+0x228>)
 8018604:	2203      	movs	r2, #3
 8018606:	0028      	movs	r0, r5
 8018608:	7831      	ldrb	r1, [r6, #0]
 801860a:	f7fe fa84 	bl	8016b16 <memchr>
 801860e:	2800      	cmp	r0, #0
 8018610:	d006      	beq.n	8018620 <_vfiprintf_r+0x17c>
 8018612:	2340      	movs	r3, #64	@ 0x40
 8018614:	1b40      	subs	r0, r0, r5
 8018616:	4083      	lsls	r3, r0
 8018618:	6822      	ldr	r2, [r4, #0]
 801861a:	3601      	adds	r6, #1
 801861c:	4313      	orrs	r3, r2
 801861e:	6023      	str	r3, [r4, #0]
 8018620:	7831      	ldrb	r1, [r6, #0]
 8018622:	2206      	movs	r2, #6
 8018624:	482a      	ldr	r0, [pc, #168]	@ (80186d0 <_vfiprintf_r+0x22c>)
 8018626:	1c75      	adds	r5, r6, #1
 8018628:	7621      	strb	r1, [r4, #24]
 801862a:	f7fe fa74 	bl	8016b16 <memchr>
 801862e:	2800      	cmp	r0, #0
 8018630:	d040      	beq.n	80186b4 <_vfiprintf_r+0x210>
 8018632:	4b28      	ldr	r3, [pc, #160]	@ (80186d4 <_vfiprintf_r+0x230>)
 8018634:	2b00      	cmp	r3, #0
 8018636:	d122      	bne.n	801867e <_vfiprintf_r+0x1da>
 8018638:	2207      	movs	r2, #7
 801863a:	9b07      	ldr	r3, [sp, #28]
 801863c:	3307      	adds	r3, #7
 801863e:	4393      	bics	r3, r2
 8018640:	3308      	adds	r3, #8
 8018642:	9307      	str	r3, [sp, #28]
 8018644:	6963      	ldr	r3, [r4, #20]
 8018646:	9a04      	ldr	r2, [sp, #16]
 8018648:	189b      	adds	r3, r3, r2
 801864a:	6163      	str	r3, [r4, #20]
 801864c:	e762      	b.n	8018514 <_vfiprintf_r+0x70>
 801864e:	4343      	muls	r3, r0
 8018650:	002e      	movs	r6, r5
 8018652:	2101      	movs	r1, #1
 8018654:	189b      	adds	r3, r3, r2
 8018656:	e7a4      	b.n	80185a2 <_vfiprintf_r+0xfe>
 8018658:	2300      	movs	r3, #0
 801865a:	200a      	movs	r0, #10
 801865c:	0019      	movs	r1, r3
 801865e:	3601      	adds	r6, #1
 8018660:	6063      	str	r3, [r4, #4]
 8018662:	7832      	ldrb	r2, [r6, #0]
 8018664:	1c75      	adds	r5, r6, #1
 8018666:	3a30      	subs	r2, #48	@ 0x30
 8018668:	2a09      	cmp	r2, #9
 801866a:	d903      	bls.n	8018674 <_vfiprintf_r+0x1d0>
 801866c:	2b00      	cmp	r3, #0
 801866e:	d0c8      	beq.n	8018602 <_vfiprintf_r+0x15e>
 8018670:	9109      	str	r1, [sp, #36]	@ 0x24
 8018672:	e7c6      	b.n	8018602 <_vfiprintf_r+0x15e>
 8018674:	4341      	muls	r1, r0
 8018676:	002e      	movs	r6, r5
 8018678:	2301      	movs	r3, #1
 801867a:	1889      	adds	r1, r1, r2
 801867c:	e7f1      	b.n	8018662 <_vfiprintf_r+0x1be>
 801867e:	aa07      	add	r2, sp, #28
 8018680:	9200      	str	r2, [sp, #0]
 8018682:	0021      	movs	r1, r4
 8018684:	003a      	movs	r2, r7
 8018686:	4b14      	ldr	r3, [pc, #80]	@ (80186d8 <_vfiprintf_r+0x234>)
 8018688:	9803      	ldr	r0, [sp, #12]
 801868a:	f7fd fc5f 	bl	8015f4c <_printf_float>
 801868e:	9004      	str	r0, [sp, #16]
 8018690:	9b04      	ldr	r3, [sp, #16]
 8018692:	3301      	adds	r3, #1
 8018694:	d1d6      	bne.n	8018644 <_vfiprintf_r+0x1a0>
 8018696:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018698:	07db      	lsls	r3, r3, #31
 801869a:	d405      	bmi.n	80186a8 <_vfiprintf_r+0x204>
 801869c:	89bb      	ldrh	r3, [r7, #12]
 801869e:	059b      	lsls	r3, r3, #22
 80186a0:	d402      	bmi.n	80186a8 <_vfiprintf_r+0x204>
 80186a2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80186a4:	f7fe fa36 	bl	8016b14 <__retarget_lock_release_recursive>
 80186a8:	89bb      	ldrh	r3, [r7, #12]
 80186aa:	065b      	lsls	r3, r3, #25
 80186ac:	d500      	bpl.n	80186b0 <_vfiprintf_r+0x20c>
 80186ae:	e71e      	b.n	80184ee <_vfiprintf_r+0x4a>
 80186b0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80186b2:	e71e      	b.n	80184f2 <_vfiprintf_r+0x4e>
 80186b4:	aa07      	add	r2, sp, #28
 80186b6:	9200      	str	r2, [sp, #0]
 80186b8:	0021      	movs	r1, r4
 80186ba:	003a      	movs	r2, r7
 80186bc:	4b06      	ldr	r3, [pc, #24]	@ (80186d8 <_vfiprintf_r+0x234>)
 80186be:	9803      	ldr	r0, [sp, #12]
 80186c0:	f7fd fef2 	bl	80164a8 <_printf_i>
 80186c4:	e7e3      	b.n	801868e <_vfiprintf_r+0x1ea>
 80186c6:	46c0      	nop			@ (mov r8, r8)
 80186c8:	0801a6a8 	.word	0x0801a6a8
 80186cc:	0801a6ae 	.word	0x0801a6ae
 80186d0:	0801a6b2 	.word	0x0801a6b2
 80186d4:	08015f4d 	.word	0x08015f4d
 80186d8:	0801847f 	.word	0x0801847f

080186dc <__sflush_r>:
 80186dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80186de:	220c      	movs	r2, #12
 80186e0:	5e8b      	ldrsh	r3, [r1, r2]
 80186e2:	0005      	movs	r5, r0
 80186e4:	000c      	movs	r4, r1
 80186e6:	071a      	lsls	r2, r3, #28
 80186e8:	d456      	bmi.n	8018798 <__sflush_r+0xbc>
 80186ea:	684a      	ldr	r2, [r1, #4]
 80186ec:	2a00      	cmp	r2, #0
 80186ee:	dc02      	bgt.n	80186f6 <__sflush_r+0x1a>
 80186f0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80186f2:	2a00      	cmp	r2, #0
 80186f4:	dd4e      	ble.n	8018794 <__sflush_r+0xb8>
 80186f6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80186f8:	2f00      	cmp	r7, #0
 80186fa:	d04b      	beq.n	8018794 <__sflush_r+0xb8>
 80186fc:	2200      	movs	r2, #0
 80186fe:	2080      	movs	r0, #128	@ 0x80
 8018700:	682e      	ldr	r6, [r5, #0]
 8018702:	602a      	str	r2, [r5, #0]
 8018704:	001a      	movs	r2, r3
 8018706:	0140      	lsls	r0, r0, #5
 8018708:	6a21      	ldr	r1, [r4, #32]
 801870a:	4002      	ands	r2, r0
 801870c:	4203      	tst	r3, r0
 801870e:	d033      	beq.n	8018778 <__sflush_r+0x9c>
 8018710:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018712:	89a3      	ldrh	r3, [r4, #12]
 8018714:	075b      	lsls	r3, r3, #29
 8018716:	d506      	bpl.n	8018726 <__sflush_r+0x4a>
 8018718:	6863      	ldr	r3, [r4, #4]
 801871a:	1ad2      	subs	r2, r2, r3
 801871c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801871e:	2b00      	cmp	r3, #0
 8018720:	d001      	beq.n	8018726 <__sflush_r+0x4a>
 8018722:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018724:	1ad2      	subs	r2, r2, r3
 8018726:	2300      	movs	r3, #0
 8018728:	0028      	movs	r0, r5
 801872a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801872c:	6a21      	ldr	r1, [r4, #32]
 801872e:	47b8      	blx	r7
 8018730:	89a2      	ldrh	r2, [r4, #12]
 8018732:	1c43      	adds	r3, r0, #1
 8018734:	d106      	bne.n	8018744 <__sflush_r+0x68>
 8018736:	6829      	ldr	r1, [r5, #0]
 8018738:	291d      	cmp	r1, #29
 801873a:	d846      	bhi.n	80187ca <__sflush_r+0xee>
 801873c:	4b29      	ldr	r3, [pc, #164]	@ (80187e4 <__sflush_r+0x108>)
 801873e:	410b      	asrs	r3, r1
 8018740:	07db      	lsls	r3, r3, #31
 8018742:	d442      	bmi.n	80187ca <__sflush_r+0xee>
 8018744:	2300      	movs	r3, #0
 8018746:	6063      	str	r3, [r4, #4]
 8018748:	6923      	ldr	r3, [r4, #16]
 801874a:	6023      	str	r3, [r4, #0]
 801874c:	04d2      	lsls	r2, r2, #19
 801874e:	d505      	bpl.n	801875c <__sflush_r+0x80>
 8018750:	1c43      	adds	r3, r0, #1
 8018752:	d102      	bne.n	801875a <__sflush_r+0x7e>
 8018754:	682b      	ldr	r3, [r5, #0]
 8018756:	2b00      	cmp	r3, #0
 8018758:	d100      	bne.n	801875c <__sflush_r+0x80>
 801875a:	6560      	str	r0, [r4, #84]	@ 0x54
 801875c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801875e:	602e      	str	r6, [r5, #0]
 8018760:	2900      	cmp	r1, #0
 8018762:	d017      	beq.n	8018794 <__sflush_r+0xb8>
 8018764:	0023      	movs	r3, r4
 8018766:	3344      	adds	r3, #68	@ 0x44
 8018768:	4299      	cmp	r1, r3
 801876a:	d002      	beq.n	8018772 <__sflush_r+0x96>
 801876c:	0028      	movs	r0, r5
 801876e:	f7ff f869 	bl	8017844 <_free_r>
 8018772:	2300      	movs	r3, #0
 8018774:	6363      	str	r3, [r4, #52]	@ 0x34
 8018776:	e00d      	b.n	8018794 <__sflush_r+0xb8>
 8018778:	2301      	movs	r3, #1
 801877a:	0028      	movs	r0, r5
 801877c:	47b8      	blx	r7
 801877e:	0002      	movs	r2, r0
 8018780:	1c43      	adds	r3, r0, #1
 8018782:	d1c6      	bne.n	8018712 <__sflush_r+0x36>
 8018784:	682b      	ldr	r3, [r5, #0]
 8018786:	2b00      	cmp	r3, #0
 8018788:	d0c3      	beq.n	8018712 <__sflush_r+0x36>
 801878a:	2b1d      	cmp	r3, #29
 801878c:	d001      	beq.n	8018792 <__sflush_r+0xb6>
 801878e:	2b16      	cmp	r3, #22
 8018790:	d11a      	bne.n	80187c8 <__sflush_r+0xec>
 8018792:	602e      	str	r6, [r5, #0]
 8018794:	2000      	movs	r0, #0
 8018796:	e01e      	b.n	80187d6 <__sflush_r+0xfa>
 8018798:	690e      	ldr	r6, [r1, #16]
 801879a:	2e00      	cmp	r6, #0
 801879c:	d0fa      	beq.n	8018794 <__sflush_r+0xb8>
 801879e:	680f      	ldr	r7, [r1, #0]
 80187a0:	600e      	str	r6, [r1, #0]
 80187a2:	1bba      	subs	r2, r7, r6
 80187a4:	9201      	str	r2, [sp, #4]
 80187a6:	2200      	movs	r2, #0
 80187a8:	079b      	lsls	r3, r3, #30
 80187aa:	d100      	bne.n	80187ae <__sflush_r+0xd2>
 80187ac:	694a      	ldr	r2, [r1, #20]
 80187ae:	60a2      	str	r2, [r4, #8]
 80187b0:	9b01      	ldr	r3, [sp, #4]
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	ddee      	ble.n	8018794 <__sflush_r+0xb8>
 80187b6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80187b8:	0032      	movs	r2, r6
 80187ba:	001f      	movs	r7, r3
 80187bc:	0028      	movs	r0, r5
 80187be:	9b01      	ldr	r3, [sp, #4]
 80187c0:	6a21      	ldr	r1, [r4, #32]
 80187c2:	47b8      	blx	r7
 80187c4:	2800      	cmp	r0, #0
 80187c6:	dc07      	bgt.n	80187d8 <__sflush_r+0xfc>
 80187c8:	89a2      	ldrh	r2, [r4, #12]
 80187ca:	2340      	movs	r3, #64	@ 0x40
 80187cc:	2001      	movs	r0, #1
 80187ce:	4313      	orrs	r3, r2
 80187d0:	b21b      	sxth	r3, r3
 80187d2:	81a3      	strh	r3, [r4, #12]
 80187d4:	4240      	negs	r0, r0
 80187d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80187d8:	9b01      	ldr	r3, [sp, #4]
 80187da:	1836      	adds	r6, r6, r0
 80187dc:	1a1b      	subs	r3, r3, r0
 80187de:	9301      	str	r3, [sp, #4]
 80187e0:	e7e6      	b.n	80187b0 <__sflush_r+0xd4>
 80187e2:	46c0      	nop			@ (mov r8, r8)
 80187e4:	dfbffffe 	.word	0xdfbffffe

080187e8 <_fflush_r>:
 80187e8:	690b      	ldr	r3, [r1, #16]
 80187ea:	b570      	push	{r4, r5, r6, lr}
 80187ec:	0005      	movs	r5, r0
 80187ee:	000c      	movs	r4, r1
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d102      	bne.n	80187fa <_fflush_r+0x12>
 80187f4:	2500      	movs	r5, #0
 80187f6:	0028      	movs	r0, r5
 80187f8:	bd70      	pop	{r4, r5, r6, pc}
 80187fa:	2800      	cmp	r0, #0
 80187fc:	d004      	beq.n	8018808 <_fflush_r+0x20>
 80187fe:	6a03      	ldr	r3, [r0, #32]
 8018800:	2b00      	cmp	r3, #0
 8018802:	d101      	bne.n	8018808 <_fflush_r+0x20>
 8018804:	f7fd ffee 	bl	80167e4 <__sinit>
 8018808:	220c      	movs	r2, #12
 801880a:	5ea3      	ldrsh	r3, [r4, r2]
 801880c:	2b00      	cmp	r3, #0
 801880e:	d0f1      	beq.n	80187f4 <_fflush_r+0xc>
 8018810:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018812:	07d2      	lsls	r2, r2, #31
 8018814:	d404      	bmi.n	8018820 <_fflush_r+0x38>
 8018816:	059b      	lsls	r3, r3, #22
 8018818:	d402      	bmi.n	8018820 <_fflush_r+0x38>
 801881a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801881c:	f7fe f979 	bl	8016b12 <__retarget_lock_acquire_recursive>
 8018820:	0028      	movs	r0, r5
 8018822:	0021      	movs	r1, r4
 8018824:	f7ff ff5a 	bl	80186dc <__sflush_r>
 8018828:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801882a:	0005      	movs	r5, r0
 801882c:	07db      	lsls	r3, r3, #31
 801882e:	d4e2      	bmi.n	80187f6 <_fflush_r+0xe>
 8018830:	89a3      	ldrh	r3, [r4, #12]
 8018832:	059b      	lsls	r3, r3, #22
 8018834:	d4df      	bmi.n	80187f6 <_fflush_r+0xe>
 8018836:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018838:	f7fe f96c 	bl	8016b14 <__retarget_lock_release_recursive>
 801883c:	e7db      	b.n	80187f6 <_fflush_r+0xe>

0801883e <__swbuf_r>:
 801883e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018840:	0006      	movs	r6, r0
 8018842:	000d      	movs	r5, r1
 8018844:	0014      	movs	r4, r2
 8018846:	2800      	cmp	r0, #0
 8018848:	d004      	beq.n	8018854 <__swbuf_r+0x16>
 801884a:	6a03      	ldr	r3, [r0, #32]
 801884c:	2b00      	cmp	r3, #0
 801884e:	d101      	bne.n	8018854 <__swbuf_r+0x16>
 8018850:	f7fd ffc8 	bl	80167e4 <__sinit>
 8018854:	69a3      	ldr	r3, [r4, #24]
 8018856:	60a3      	str	r3, [r4, #8]
 8018858:	89a3      	ldrh	r3, [r4, #12]
 801885a:	071b      	lsls	r3, r3, #28
 801885c:	d502      	bpl.n	8018864 <__swbuf_r+0x26>
 801885e:	6923      	ldr	r3, [r4, #16]
 8018860:	2b00      	cmp	r3, #0
 8018862:	d109      	bne.n	8018878 <__swbuf_r+0x3a>
 8018864:	0021      	movs	r1, r4
 8018866:	0030      	movs	r0, r6
 8018868:	f000 f82c 	bl	80188c4 <__swsetup_r>
 801886c:	2800      	cmp	r0, #0
 801886e:	d003      	beq.n	8018878 <__swbuf_r+0x3a>
 8018870:	2501      	movs	r5, #1
 8018872:	426d      	negs	r5, r5
 8018874:	0028      	movs	r0, r5
 8018876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018878:	6923      	ldr	r3, [r4, #16]
 801887a:	6820      	ldr	r0, [r4, #0]
 801887c:	b2ef      	uxtb	r7, r5
 801887e:	1ac0      	subs	r0, r0, r3
 8018880:	6963      	ldr	r3, [r4, #20]
 8018882:	b2ed      	uxtb	r5, r5
 8018884:	4283      	cmp	r3, r0
 8018886:	dc05      	bgt.n	8018894 <__swbuf_r+0x56>
 8018888:	0021      	movs	r1, r4
 801888a:	0030      	movs	r0, r6
 801888c:	f7ff ffac 	bl	80187e8 <_fflush_r>
 8018890:	2800      	cmp	r0, #0
 8018892:	d1ed      	bne.n	8018870 <__swbuf_r+0x32>
 8018894:	68a3      	ldr	r3, [r4, #8]
 8018896:	3001      	adds	r0, #1
 8018898:	3b01      	subs	r3, #1
 801889a:	60a3      	str	r3, [r4, #8]
 801889c:	6823      	ldr	r3, [r4, #0]
 801889e:	1c5a      	adds	r2, r3, #1
 80188a0:	6022      	str	r2, [r4, #0]
 80188a2:	701f      	strb	r7, [r3, #0]
 80188a4:	6963      	ldr	r3, [r4, #20]
 80188a6:	4283      	cmp	r3, r0
 80188a8:	d004      	beq.n	80188b4 <__swbuf_r+0x76>
 80188aa:	89a3      	ldrh	r3, [r4, #12]
 80188ac:	07db      	lsls	r3, r3, #31
 80188ae:	d5e1      	bpl.n	8018874 <__swbuf_r+0x36>
 80188b0:	2d0a      	cmp	r5, #10
 80188b2:	d1df      	bne.n	8018874 <__swbuf_r+0x36>
 80188b4:	0021      	movs	r1, r4
 80188b6:	0030      	movs	r0, r6
 80188b8:	f7ff ff96 	bl	80187e8 <_fflush_r>
 80188bc:	2800      	cmp	r0, #0
 80188be:	d0d9      	beq.n	8018874 <__swbuf_r+0x36>
 80188c0:	e7d6      	b.n	8018870 <__swbuf_r+0x32>
	...

080188c4 <__swsetup_r>:
 80188c4:	4b2d      	ldr	r3, [pc, #180]	@ (801897c <__swsetup_r+0xb8>)
 80188c6:	b570      	push	{r4, r5, r6, lr}
 80188c8:	0005      	movs	r5, r0
 80188ca:	6818      	ldr	r0, [r3, #0]
 80188cc:	000c      	movs	r4, r1
 80188ce:	2800      	cmp	r0, #0
 80188d0:	d004      	beq.n	80188dc <__swsetup_r+0x18>
 80188d2:	6a03      	ldr	r3, [r0, #32]
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d101      	bne.n	80188dc <__swsetup_r+0x18>
 80188d8:	f7fd ff84 	bl	80167e4 <__sinit>
 80188dc:	230c      	movs	r3, #12
 80188de:	5ee2      	ldrsh	r2, [r4, r3]
 80188e0:	0713      	lsls	r3, r2, #28
 80188e2:	d423      	bmi.n	801892c <__swsetup_r+0x68>
 80188e4:	06d3      	lsls	r3, r2, #27
 80188e6:	d407      	bmi.n	80188f8 <__swsetup_r+0x34>
 80188e8:	2309      	movs	r3, #9
 80188ea:	602b      	str	r3, [r5, #0]
 80188ec:	2340      	movs	r3, #64	@ 0x40
 80188ee:	2001      	movs	r0, #1
 80188f0:	4313      	orrs	r3, r2
 80188f2:	81a3      	strh	r3, [r4, #12]
 80188f4:	4240      	negs	r0, r0
 80188f6:	e03a      	b.n	801896e <__swsetup_r+0xaa>
 80188f8:	0752      	lsls	r2, r2, #29
 80188fa:	d513      	bpl.n	8018924 <__swsetup_r+0x60>
 80188fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80188fe:	2900      	cmp	r1, #0
 8018900:	d008      	beq.n	8018914 <__swsetup_r+0x50>
 8018902:	0023      	movs	r3, r4
 8018904:	3344      	adds	r3, #68	@ 0x44
 8018906:	4299      	cmp	r1, r3
 8018908:	d002      	beq.n	8018910 <__swsetup_r+0x4c>
 801890a:	0028      	movs	r0, r5
 801890c:	f7fe ff9a 	bl	8017844 <_free_r>
 8018910:	2300      	movs	r3, #0
 8018912:	6363      	str	r3, [r4, #52]	@ 0x34
 8018914:	2224      	movs	r2, #36	@ 0x24
 8018916:	89a3      	ldrh	r3, [r4, #12]
 8018918:	4393      	bics	r3, r2
 801891a:	81a3      	strh	r3, [r4, #12]
 801891c:	2300      	movs	r3, #0
 801891e:	6063      	str	r3, [r4, #4]
 8018920:	6923      	ldr	r3, [r4, #16]
 8018922:	6023      	str	r3, [r4, #0]
 8018924:	2308      	movs	r3, #8
 8018926:	89a2      	ldrh	r2, [r4, #12]
 8018928:	4313      	orrs	r3, r2
 801892a:	81a3      	strh	r3, [r4, #12]
 801892c:	6923      	ldr	r3, [r4, #16]
 801892e:	2b00      	cmp	r3, #0
 8018930:	d10b      	bne.n	801894a <__swsetup_r+0x86>
 8018932:	21a0      	movs	r1, #160	@ 0xa0
 8018934:	2280      	movs	r2, #128	@ 0x80
 8018936:	89a3      	ldrh	r3, [r4, #12]
 8018938:	0089      	lsls	r1, r1, #2
 801893a:	0092      	lsls	r2, r2, #2
 801893c:	400b      	ands	r3, r1
 801893e:	4293      	cmp	r3, r2
 8018940:	d003      	beq.n	801894a <__swsetup_r+0x86>
 8018942:	0021      	movs	r1, r4
 8018944:	0028      	movs	r0, r5
 8018946:	f000 f915 	bl	8018b74 <__smakebuf_r>
 801894a:	230c      	movs	r3, #12
 801894c:	5ee2      	ldrsh	r2, [r4, r3]
 801894e:	2101      	movs	r1, #1
 8018950:	0013      	movs	r3, r2
 8018952:	400b      	ands	r3, r1
 8018954:	420a      	tst	r2, r1
 8018956:	d00b      	beq.n	8018970 <__swsetup_r+0xac>
 8018958:	2300      	movs	r3, #0
 801895a:	60a3      	str	r3, [r4, #8]
 801895c:	6963      	ldr	r3, [r4, #20]
 801895e:	425b      	negs	r3, r3
 8018960:	61a3      	str	r3, [r4, #24]
 8018962:	2000      	movs	r0, #0
 8018964:	6923      	ldr	r3, [r4, #16]
 8018966:	4283      	cmp	r3, r0
 8018968:	d101      	bne.n	801896e <__swsetup_r+0xaa>
 801896a:	0613      	lsls	r3, r2, #24
 801896c:	d4be      	bmi.n	80188ec <__swsetup_r+0x28>
 801896e:	bd70      	pop	{r4, r5, r6, pc}
 8018970:	0791      	lsls	r1, r2, #30
 8018972:	d400      	bmi.n	8018976 <__swsetup_r+0xb2>
 8018974:	6963      	ldr	r3, [r4, #20]
 8018976:	60a3      	str	r3, [r4, #8]
 8018978:	e7f3      	b.n	8018962 <__swsetup_r+0x9e>
 801897a:	46c0      	nop			@ (mov r8, r8)
 801897c:	200002d4 	.word	0x200002d4

08018980 <memmove>:
 8018980:	b510      	push	{r4, lr}
 8018982:	4288      	cmp	r0, r1
 8018984:	d806      	bhi.n	8018994 <memmove+0x14>
 8018986:	2300      	movs	r3, #0
 8018988:	429a      	cmp	r2, r3
 801898a:	d008      	beq.n	801899e <memmove+0x1e>
 801898c:	5ccc      	ldrb	r4, [r1, r3]
 801898e:	54c4      	strb	r4, [r0, r3]
 8018990:	3301      	adds	r3, #1
 8018992:	e7f9      	b.n	8018988 <memmove+0x8>
 8018994:	188b      	adds	r3, r1, r2
 8018996:	4298      	cmp	r0, r3
 8018998:	d2f5      	bcs.n	8018986 <memmove+0x6>
 801899a:	3a01      	subs	r2, #1
 801899c:	d200      	bcs.n	80189a0 <memmove+0x20>
 801899e:	bd10      	pop	{r4, pc}
 80189a0:	5c8b      	ldrb	r3, [r1, r2]
 80189a2:	5483      	strb	r3, [r0, r2]
 80189a4:	e7f9      	b.n	801899a <memmove+0x1a>
	...

080189a8 <_sbrk_r>:
 80189a8:	2300      	movs	r3, #0
 80189aa:	b570      	push	{r4, r5, r6, lr}
 80189ac:	4d06      	ldr	r5, [pc, #24]	@ (80189c8 <_sbrk_r+0x20>)
 80189ae:	0004      	movs	r4, r0
 80189b0:	0008      	movs	r0, r1
 80189b2:	602b      	str	r3, [r5, #0]
 80189b4:	f7ef fcea 	bl	800838c <_sbrk>
 80189b8:	1c43      	adds	r3, r0, #1
 80189ba:	d103      	bne.n	80189c4 <_sbrk_r+0x1c>
 80189bc:	682b      	ldr	r3, [r5, #0]
 80189be:	2b00      	cmp	r3, #0
 80189c0:	d000      	beq.n	80189c4 <_sbrk_r+0x1c>
 80189c2:	6023      	str	r3, [r4, #0]
 80189c4:	bd70      	pop	{r4, r5, r6, pc}
 80189c6:	46c0      	nop			@ (mov r8, r8)
 80189c8:	200043d0 	.word	0x200043d0

080189cc <__assert_func>:
 80189cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80189ce:	0014      	movs	r4, r2
 80189d0:	001a      	movs	r2, r3
 80189d2:	4b09      	ldr	r3, [pc, #36]	@ (80189f8 <__assert_func+0x2c>)
 80189d4:	0005      	movs	r5, r0
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	000e      	movs	r6, r1
 80189da:	68d8      	ldr	r0, [r3, #12]
 80189dc:	4b07      	ldr	r3, [pc, #28]	@ (80189fc <__assert_func+0x30>)
 80189de:	2c00      	cmp	r4, #0
 80189e0:	d101      	bne.n	80189e6 <__assert_func+0x1a>
 80189e2:	4b07      	ldr	r3, [pc, #28]	@ (8018a00 <__assert_func+0x34>)
 80189e4:	001c      	movs	r4, r3
 80189e6:	4907      	ldr	r1, [pc, #28]	@ (8018a04 <__assert_func+0x38>)
 80189e8:	9301      	str	r3, [sp, #4]
 80189ea:	9402      	str	r4, [sp, #8]
 80189ec:	002b      	movs	r3, r5
 80189ee:	9600      	str	r6, [sp, #0]
 80189f0:	f000 f886 	bl	8018b00 <fiprintf>
 80189f4:	f000 f924 	bl	8018c40 <abort>
 80189f8:	200002d4 	.word	0x200002d4
 80189fc:	0801a6c3 	.word	0x0801a6c3
 8018a00:	0801a6fe 	.word	0x0801a6fe
 8018a04:	0801a6d0 	.word	0x0801a6d0

08018a08 <_calloc_r>:
 8018a08:	b570      	push	{r4, r5, r6, lr}
 8018a0a:	0c0b      	lsrs	r3, r1, #16
 8018a0c:	0c15      	lsrs	r5, r2, #16
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	d11e      	bne.n	8018a50 <_calloc_r+0x48>
 8018a12:	2d00      	cmp	r5, #0
 8018a14:	d10c      	bne.n	8018a30 <_calloc_r+0x28>
 8018a16:	b289      	uxth	r1, r1
 8018a18:	b294      	uxth	r4, r2
 8018a1a:	434c      	muls	r4, r1
 8018a1c:	0021      	movs	r1, r4
 8018a1e:	f7fe ff87 	bl	8017930 <_malloc_r>
 8018a22:	1e05      	subs	r5, r0, #0
 8018a24:	d01a      	beq.n	8018a5c <_calloc_r+0x54>
 8018a26:	0022      	movs	r2, r4
 8018a28:	2100      	movs	r1, #0
 8018a2a:	f7fd ffc3 	bl	80169b4 <memset>
 8018a2e:	e016      	b.n	8018a5e <_calloc_r+0x56>
 8018a30:	1c2b      	adds	r3, r5, #0
 8018a32:	1c0c      	adds	r4, r1, #0
 8018a34:	b289      	uxth	r1, r1
 8018a36:	b292      	uxth	r2, r2
 8018a38:	434a      	muls	r2, r1
 8018a3a:	b29b      	uxth	r3, r3
 8018a3c:	b2a1      	uxth	r1, r4
 8018a3e:	4359      	muls	r1, r3
 8018a40:	0c14      	lsrs	r4, r2, #16
 8018a42:	190c      	adds	r4, r1, r4
 8018a44:	0c23      	lsrs	r3, r4, #16
 8018a46:	d107      	bne.n	8018a58 <_calloc_r+0x50>
 8018a48:	0424      	lsls	r4, r4, #16
 8018a4a:	b292      	uxth	r2, r2
 8018a4c:	4314      	orrs	r4, r2
 8018a4e:	e7e5      	b.n	8018a1c <_calloc_r+0x14>
 8018a50:	2d00      	cmp	r5, #0
 8018a52:	d101      	bne.n	8018a58 <_calloc_r+0x50>
 8018a54:	1c14      	adds	r4, r2, #0
 8018a56:	e7ed      	b.n	8018a34 <_calloc_r+0x2c>
 8018a58:	230c      	movs	r3, #12
 8018a5a:	6003      	str	r3, [r0, #0]
 8018a5c:	2500      	movs	r5, #0
 8018a5e:	0028      	movs	r0, r5
 8018a60:	bd70      	pop	{r4, r5, r6, pc}

08018a62 <__ascii_mbtowc>:
 8018a62:	b082      	sub	sp, #8
 8018a64:	2900      	cmp	r1, #0
 8018a66:	d100      	bne.n	8018a6a <__ascii_mbtowc+0x8>
 8018a68:	a901      	add	r1, sp, #4
 8018a6a:	1e10      	subs	r0, r2, #0
 8018a6c:	d006      	beq.n	8018a7c <__ascii_mbtowc+0x1a>
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d006      	beq.n	8018a80 <__ascii_mbtowc+0x1e>
 8018a72:	7813      	ldrb	r3, [r2, #0]
 8018a74:	600b      	str	r3, [r1, #0]
 8018a76:	7810      	ldrb	r0, [r2, #0]
 8018a78:	1e43      	subs	r3, r0, #1
 8018a7a:	4198      	sbcs	r0, r3
 8018a7c:	b002      	add	sp, #8
 8018a7e:	4770      	bx	lr
 8018a80:	2002      	movs	r0, #2
 8018a82:	4240      	negs	r0, r0
 8018a84:	e7fa      	b.n	8018a7c <__ascii_mbtowc+0x1a>

08018a86 <_realloc_r>:
 8018a86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018a88:	0006      	movs	r6, r0
 8018a8a:	000c      	movs	r4, r1
 8018a8c:	0015      	movs	r5, r2
 8018a8e:	2900      	cmp	r1, #0
 8018a90:	d105      	bne.n	8018a9e <_realloc_r+0x18>
 8018a92:	0011      	movs	r1, r2
 8018a94:	f7fe ff4c 	bl	8017930 <_malloc_r>
 8018a98:	0004      	movs	r4, r0
 8018a9a:	0020      	movs	r0, r4
 8018a9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018a9e:	2a00      	cmp	r2, #0
 8018aa0:	d103      	bne.n	8018aaa <_realloc_r+0x24>
 8018aa2:	f7fe fecf 	bl	8017844 <_free_r>
 8018aa6:	2400      	movs	r4, #0
 8018aa8:	e7f7      	b.n	8018a9a <_realloc_r+0x14>
 8018aaa:	f000 f8d0 	bl	8018c4e <_malloc_usable_size_r>
 8018aae:	0007      	movs	r7, r0
 8018ab0:	4285      	cmp	r5, r0
 8018ab2:	d802      	bhi.n	8018aba <_realloc_r+0x34>
 8018ab4:	0843      	lsrs	r3, r0, #1
 8018ab6:	42ab      	cmp	r3, r5
 8018ab8:	d3ef      	bcc.n	8018a9a <_realloc_r+0x14>
 8018aba:	0029      	movs	r1, r5
 8018abc:	0030      	movs	r0, r6
 8018abe:	f7fe ff37 	bl	8017930 <_malloc_r>
 8018ac2:	9001      	str	r0, [sp, #4]
 8018ac4:	2800      	cmp	r0, #0
 8018ac6:	d0ee      	beq.n	8018aa6 <_realloc_r+0x20>
 8018ac8:	002a      	movs	r2, r5
 8018aca:	42bd      	cmp	r5, r7
 8018acc:	d900      	bls.n	8018ad0 <_realloc_r+0x4a>
 8018ace:	003a      	movs	r2, r7
 8018ad0:	0021      	movs	r1, r4
 8018ad2:	9801      	ldr	r0, [sp, #4]
 8018ad4:	f7fe f82a 	bl	8016b2c <memcpy>
 8018ad8:	0021      	movs	r1, r4
 8018ada:	0030      	movs	r0, r6
 8018adc:	f7fe feb2 	bl	8017844 <_free_r>
 8018ae0:	9c01      	ldr	r4, [sp, #4]
 8018ae2:	e7da      	b.n	8018a9a <_realloc_r+0x14>

08018ae4 <__ascii_wctomb>:
 8018ae4:	0003      	movs	r3, r0
 8018ae6:	1e08      	subs	r0, r1, #0
 8018ae8:	d005      	beq.n	8018af6 <__ascii_wctomb+0x12>
 8018aea:	2aff      	cmp	r2, #255	@ 0xff
 8018aec:	d904      	bls.n	8018af8 <__ascii_wctomb+0x14>
 8018aee:	228a      	movs	r2, #138	@ 0x8a
 8018af0:	2001      	movs	r0, #1
 8018af2:	601a      	str	r2, [r3, #0]
 8018af4:	4240      	negs	r0, r0
 8018af6:	4770      	bx	lr
 8018af8:	2001      	movs	r0, #1
 8018afa:	700a      	strb	r2, [r1, #0]
 8018afc:	e7fb      	b.n	8018af6 <__ascii_wctomb+0x12>
	...

08018b00 <fiprintf>:
 8018b00:	b40e      	push	{r1, r2, r3}
 8018b02:	b517      	push	{r0, r1, r2, r4, lr}
 8018b04:	4c05      	ldr	r4, [pc, #20]	@ (8018b1c <fiprintf+0x1c>)
 8018b06:	ab05      	add	r3, sp, #20
 8018b08:	cb04      	ldmia	r3!, {r2}
 8018b0a:	0001      	movs	r1, r0
 8018b0c:	6820      	ldr	r0, [r4, #0]
 8018b0e:	9301      	str	r3, [sp, #4]
 8018b10:	f7ff fcc8 	bl	80184a4 <_vfiprintf_r>
 8018b14:	bc1e      	pop	{r1, r2, r3, r4}
 8018b16:	bc08      	pop	{r3}
 8018b18:	b003      	add	sp, #12
 8018b1a:	4718      	bx	r3
 8018b1c:	200002d4 	.word	0x200002d4

08018b20 <__swhatbuf_r>:
 8018b20:	b570      	push	{r4, r5, r6, lr}
 8018b22:	000e      	movs	r6, r1
 8018b24:	001d      	movs	r5, r3
 8018b26:	230e      	movs	r3, #14
 8018b28:	5ec9      	ldrsh	r1, [r1, r3]
 8018b2a:	0014      	movs	r4, r2
 8018b2c:	b096      	sub	sp, #88	@ 0x58
 8018b2e:	2900      	cmp	r1, #0
 8018b30:	da0c      	bge.n	8018b4c <__swhatbuf_r+0x2c>
 8018b32:	89b2      	ldrh	r2, [r6, #12]
 8018b34:	2380      	movs	r3, #128	@ 0x80
 8018b36:	0011      	movs	r1, r2
 8018b38:	4019      	ands	r1, r3
 8018b3a:	421a      	tst	r2, r3
 8018b3c:	d114      	bne.n	8018b68 <__swhatbuf_r+0x48>
 8018b3e:	2380      	movs	r3, #128	@ 0x80
 8018b40:	00db      	lsls	r3, r3, #3
 8018b42:	2000      	movs	r0, #0
 8018b44:	6029      	str	r1, [r5, #0]
 8018b46:	6023      	str	r3, [r4, #0]
 8018b48:	b016      	add	sp, #88	@ 0x58
 8018b4a:	bd70      	pop	{r4, r5, r6, pc}
 8018b4c:	466a      	mov	r2, sp
 8018b4e:	f000 f853 	bl	8018bf8 <_fstat_r>
 8018b52:	2800      	cmp	r0, #0
 8018b54:	dbed      	blt.n	8018b32 <__swhatbuf_r+0x12>
 8018b56:	23f0      	movs	r3, #240	@ 0xf0
 8018b58:	9901      	ldr	r1, [sp, #4]
 8018b5a:	021b      	lsls	r3, r3, #8
 8018b5c:	4019      	ands	r1, r3
 8018b5e:	4b04      	ldr	r3, [pc, #16]	@ (8018b70 <__swhatbuf_r+0x50>)
 8018b60:	18c9      	adds	r1, r1, r3
 8018b62:	424b      	negs	r3, r1
 8018b64:	4159      	adcs	r1, r3
 8018b66:	e7ea      	b.n	8018b3e <__swhatbuf_r+0x1e>
 8018b68:	2100      	movs	r1, #0
 8018b6a:	2340      	movs	r3, #64	@ 0x40
 8018b6c:	e7e9      	b.n	8018b42 <__swhatbuf_r+0x22>
 8018b6e:	46c0      	nop			@ (mov r8, r8)
 8018b70:	ffffe000 	.word	0xffffe000

08018b74 <__smakebuf_r>:
 8018b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b76:	2602      	movs	r6, #2
 8018b78:	898b      	ldrh	r3, [r1, #12]
 8018b7a:	0005      	movs	r5, r0
 8018b7c:	000c      	movs	r4, r1
 8018b7e:	b085      	sub	sp, #20
 8018b80:	4233      	tst	r3, r6
 8018b82:	d007      	beq.n	8018b94 <__smakebuf_r+0x20>
 8018b84:	0023      	movs	r3, r4
 8018b86:	3347      	adds	r3, #71	@ 0x47
 8018b88:	6023      	str	r3, [r4, #0]
 8018b8a:	6123      	str	r3, [r4, #16]
 8018b8c:	2301      	movs	r3, #1
 8018b8e:	6163      	str	r3, [r4, #20]
 8018b90:	b005      	add	sp, #20
 8018b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b94:	ab03      	add	r3, sp, #12
 8018b96:	aa02      	add	r2, sp, #8
 8018b98:	f7ff ffc2 	bl	8018b20 <__swhatbuf_r>
 8018b9c:	9f02      	ldr	r7, [sp, #8]
 8018b9e:	9001      	str	r0, [sp, #4]
 8018ba0:	0039      	movs	r1, r7
 8018ba2:	0028      	movs	r0, r5
 8018ba4:	f7fe fec4 	bl	8017930 <_malloc_r>
 8018ba8:	2800      	cmp	r0, #0
 8018baa:	d108      	bne.n	8018bbe <__smakebuf_r+0x4a>
 8018bac:	220c      	movs	r2, #12
 8018bae:	5ea3      	ldrsh	r3, [r4, r2]
 8018bb0:	059a      	lsls	r2, r3, #22
 8018bb2:	d4ed      	bmi.n	8018b90 <__smakebuf_r+0x1c>
 8018bb4:	2203      	movs	r2, #3
 8018bb6:	4393      	bics	r3, r2
 8018bb8:	431e      	orrs	r6, r3
 8018bba:	81a6      	strh	r6, [r4, #12]
 8018bbc:	e7e2      	b.n	8018b84 <__smakebuf_r+0x10>
 8018bbe:	2380      	movs	r3, #128	@ 0x80
 8018bc0:	89a2      	ldrh	r2, [r4, #12]
 8018bc2:	6020      	str	r0, [r4, #0]
 8018bc4:	4313      	orrs	r3, r2
 8018bc6:	81a3      	strh	r3, [r4, #12]
 8018bc8:	9b03      	ldr	r3, [sp, #12]
 8018bca:	6120      	str	r0, [r4, #16]
 8018bcc:	6167      	str	r7, [r4, #20]
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	d00c      	beq.n	8018bec <__smakebuf_r+0x78>
 8018bd2:	0028      	movs	r0, r5
 8018bd4:	230e      	movs	r3, #14
 8018bd6:	5ee1      	ldrsh	r1, [r4, r3]
 8018bd8:	f000 f820 	bl	8018c1c <_isatty_r>
 8018bdc:	2800      	cmp	r0, #0
 8018bde:	d005      	beq.n	8018bec <__smakebuf_r+0x78>
 8018be0:	2303      	movs	r3, #3
 8018be2:	89a2      	ldrh	r2, [r4, #12]
 8018be4:	439a      	bics	r2, r3
 8018be6:	3b02      	subs	r3, #2
 8018be8:	4313      	orrs	r3, r2
 8018bea:	81a3      	strh	r3, [r4, #12]
 8018bec:	89a3      	ldrh	r3, [r4, #12]
 8018bee:	9a01      	ldr	r2, [sp, #4]
 8018bf0:	4313      	orrs	r3, r2
 8018bf2:	81a3      	strh	r3, [r4, #12]
 8018bf4:	e7cc      	b.n	8018b90 <__smakebuf_r+0x1c>
	...

08018bf8 <_fstat_r>:
 8018bf8:	2300      	movs	r3, #0
 8018bfa:	b570      	push	{r4, r5, r6, lr}
 8018bfc:	4d06      	ldr	r5, [pc, #24]	@ (8018c18 <_fstat_r+0x20>)
 8018bfe:	0004      	movs	r4, r0
 8018c00:	0008      	movs	r0, r1
 8018c02:	0011      	movs	r1, r2
 8018c04:	602b      	str	r3, [r5, #0]
 8018c06:	f7ef fb9f 	bl	8008348 <_fstat>
 8018c0a:	1c43      	adds	r3, r0, #1
 8018c0c:	d103      	bne.n	8018c16 <_fstat_r+0x1e>
 8018c0e:	682b      	ldr	r3, [r5, #0]
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d000      	beq.n	8018c16 <_fstat_r+0x1e>
 8018c14:	6023      	str	r3, [r4, #0]
 8018c16:	bd70      	pop	{r4, r5, r6, pc}
 8018c18:	200043d0 	.word	0x200043d0

08018c1c <_isatty_r>:
 8018c1c:	2300      	movs	r3, #0
 8018c1e:	b570      	push	{r4, r5, r6, lr}
 8018c20:	4d06      	ldr	r5, [pc, #24]	@ (8018c3c <_isatty_r+0x20>)
 8018c22:	0004      	movs	r4, r0
 8018c24:	0008      	movs	r0, r1
 8018c26:	602b      	str	r3, [r5, #0]
 8018c28:	f7ef fb9c 	bl	8008364 <_isatty>
 8018c2c:	1c43      	adds	r3, r0, #1
 8018c2e:	d103      	bne.n	8018c38 <_isatty_r+0x1c>
 8018c30:	682b      	ldr	r3, [r5, #0]
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	d000      	beq.n	8018c38 <_isatty_r+0x1c>
 8018c36:	6023      	str	r3, [r4, #0]
 8018c38:	bd70      	pop	{r4, r5, r6, pc}
 8018c3a:	46c0      	nop			@ (mov r8, r8)
 8018c3c:	200043d0 	.word	0x200043d0

08018c40 <abort>:
 8018c40:	2006      	movs	r0, #6
 8018c42:	b510      	push	{r4, lr}
 8018c44:	f000 f834 	bl	8018cb0 <raise>
 8018c48:	2001      	movs	r0, #1
 8018c4a:	f7ef fb49 	bl	80082e0 <_exit>

08018c4e <_malloc_usable_size_r>:
 8018c4e:	1f0b      	subs	r3, r1, #4
 8018c50:	681b      	ldr	r3, [r3, #0]
 8018c52:	1f18      	subs	r0, r3, #4
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	da01      	bge.n	8018c5c <_malloc_usable_size_r+0xe>
 8018c58:	580b      	ldr	r3, [r1, r0]
 8018c5a:	18c0      	adds	r0, r0, r3
 8018c5c:	4770      	bx	lr

08018c5e <_raise_r>:
 8018c5e:	b570      	push	{r4, r5, r6, lr}
 8018c60:	0004      	movs	r4, r0
 8018c62:	000d      	movs	r5, r1
 8018c64:	291f      	cmp	r1, #31
 8018c66:	d904      	bls.n	8018c72 <_raise_r+0x14>
 8018c68:	2316      	movs	r3, #22
 8018c6a:	6003      	str	r3, [r0, #0]
 8018c6c:	2001      	movs	r0, #1
 8018c6e:	4240      	negs	r0, r0
 8018c70:	bd70      	pop	{r4, r5, r6, pc}
 8018c72:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d004      	beq.n	8018c82 <_raise_r+0x24>
 8018c78:	008a      	lsls	r2, r1, #2
 8018c7a:	189b      	adds	r3, r3, r2
 8018c7c:	681a      	ldr	r2, [r3, #0]
 8018c7e:	2a00      	cmp	r2, #0
 8018c80:	d108      	bne.n	8018c94 <_raise_r+0x36>
 8018c82:	0020      	movs	r0, r4
 8018c84:	f000 f830 	bl	8018ce8 <_getpid_r>
 8018c88:	002a      	movs	r2, r5
 8018c8a:	0001      	movs	r1, r0
 8018c8c:	0020      	movs	r0, r4
 8018c8e:	f000 f819 	bl	8018cc4 <_kill_r>
 8018c92:	e7ed      	b.n	8018c70 <_raise_r+0x12>
 8018c94:	2a01      	cmp	r2, #1
 8018c96:	d009      	beq.n	8018cac <_raise_r+0x4e>
 8018c98:	1c51      	adds	r1, r2, #1
 8018c9a:	d103      	bne.n	8018ca4 <_raise_r+0x46>
 8018c9c:	2316      	movs	r3, #22
 8018c9e:	6003      	str	r3, [r0, #0]
 8018ca0:	2001      	movs	r0, #1
 8018ca2:	e7e5      	b.n	8018c70 <_raise_r+0x12>
 8018ca4:	2100      	movs	r1, #0
 8018ca6:	0028      	movs	r0, r5
 8018ca8:	6019      	str	r1, [r3, #0]
 8018caa:	4790      	blx	r2
 8018cac:	2000      	movs	r0, #0
 8018cae:	e7df      	b.n	8018c70 <_raise_r+0x12>

08018cb0 <raise>:
 8018cb0:	b510      	push	{r4, lr}
 8018cb2:	4b03      	ldr	r3, [pc, #12]	@ (8018cc0 <raise+0x10>)
 8018cb4:	0001      	movs	r1, r0
 8018cb6:	6818      	ldr	r0, [r3, #0]
 8018cb8:	f7ff ffd1 	bl	8018c5e <_raise_r>
 8018cbc:	bd10      	pop	{r4, pc}
 8018cbe:	46c0      	nop			@ (mov r8, r8)
 8018cc0:	200002d4 	.word	0x200002d4

08018cc4 <_kill_r>:
 8018cc4:	2300      	movs	r3, #0
 8018cc6:	b570      	push	{r4, r5, r6, lr}
 8018cc8:	4d06      	ldr	r5, [pc, #24]	@ (8018ce4 <_kill_r+0x20>)
 8018cca:	0004      	movs	r4, r0
 8018ccc:	0008      	movs	r0, r1
 8018cce:	0011      	movs	r1, r2
 8018cd0:	602b      	str	r3, [r5, #0]
 8018cd2:	f7ef faf5 	bl	80082c0 <_kill>
 8018cd6:	1c43      	adds	r3, r0, #1
 8018cd8:	d103      	bne.n	8018ce2 <_kill_r+0x1e>
 8018cda:	682b      	ldr	r3, [r5, #0]
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	d000      	beq.n	8018ce2 <_kill_r+0x1e>
 8018ce0:	6023      	str	r3, [r4, #0]
 8018ce2:	bd70      	pop	{r4, r5, r6, pc}
 8018ce4:	200043d0 	.word	0x200043d0

08018ce8 <_getpid_r>:
 8018ce8:	b510      	push	{r4, lr}
 8018cea:	f7ef fae3 	bl	80082b4 <_getpid>
 8018cee:	bd10      	pop	{r4, pc}

08018cf0 <log10>:
 8018cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cf2:	0004      	movs	r4, r0
 8018cf4:	000d      	movs	r5, r1
 8018cf6:	f000 fa0b 	bl	8019110 <__ieee754_log10>
 8018cfa:	0022      	movs	r2, r4
 8018cfc:	0006      	movs	r6, r0
 8018cfe:	000f      	movs	r7, r1
 8018d00:	002b      	movs	r3, r5
 8018d02:	0020      	movs	r0, r4
 8018d04:	0029      	movs	r1, r5
 8018d06:	f7ea fa7b 	bl	8003200 <__aeabi_dcmpun>
 8018d0a:	2800      	cmp	r0, #0
 8018d0c:	d115      	bne.n	8018d3a <log10+0x4a>
 8018d0e:	2200      	movs	r2, #0
 8018d10:	2300      	movs	r3, #0
 8018d12:	0020      	movs	r0, r4
 8018d14:	0029      	movs	r1, r5
 8018d16:	f7e7 fba9 	bl	800046c <__aeabi_dcmple>
 8018d1a:	2800      	cmp	r0, #0
 8018d1c:	d00d      	beq.n	8018d3a <log10+0x4a>
 8018d1e:	2200      	movs	r2, #0
 8018d20:	2300      	movs	r3, #0
 8018d22:	0020      	movs	r0, r4
 8018d24:	0029      	movs	r1, r5
 8018d26:	f7e7 fb91 	bl	800044c <__aeabi_dcmpeq>
 8018d2a:	2800      	cmp	r0, #0
 8018d2c:	d008      	beq.n	8018d40 <log10+0x50>
 8018d2e:	f7fd fec5 	bl	8016abc <__errno>
 8018d32:	2322      	movs	r3, #34	@ 0x22
 8018d34:	2600      	movs	r6, #0
 8018d36:	4f07      	ldr	r7, [pc, #28]	@ (8018d54 <log10+0x64>)
 8018d38:	6003      	str	r3, [r0, #0]
 8018d3a:	0030      	movs	r0, r6
 8018d3c:	0039      	movs	r1, r7
 8018d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d40:	f7fd febc 	bl	8016abc <__errno>
 8018d44:	2321      	movs	r3, #33	@ 0x21
 8018d46:	6003      	str	r3, [r0, #0]
 8018d48:	4803      	ldr	r0, [pc, #12]	@ (8018d58 <log10+0x68>)
 8018d4a:	f000 f871 	bl	8018e30 <nan>
 8018d4e:	0006      	movs	r6, r0
 8018d50:	000f      	movs	r7, r1
 8018d52:	e7f2      	b.n	8018d3a <log10+0x4a>
 8018d54:	fff00000 	.word	0xfff00000
 8018d58:	0801a6fe 	.word	0x0801a6fe

08018d5c <sqrt>:
 8018d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d5e:	0004      	movs	r4, r0
 8018d60:	000d      	movs	r5, r1
 8018d62:	f000 f875 	bl	8018e50 <__ieee754_sqrt>
 8018d66:	0022      	movs	r2, r4
 8018d68:	0006      	movs	r6, r0
 8018d6a:	000f      	movs	r7, r1
 8018d6c:	002b      	movs	r3, r5
 8018d6e:	0020      	movs	r0, r4
 8018d70:	0029      	movs	r1, r5
 8018d72:	f7ea fa45 	bl	8003200 <__aeabi_dcmpun>
 8018d76:	2800      	cmp	r0, #0
 8018d78:	d113      	bne.n	8018da2 <sqrt+0x46>
 8018d7a:	2200      	movs	r2, #0
 8018d7c:	2300      	movs	r3, #0
 8018d7e:	0020      	movs	r0, r4
 8018d80:	0029      	movs	r1, r5
 8018d82:	f7e7 fb69 	bl	8000458 <__aeabi_dcmplt>
 8018d86:	2800      	cmp	r0, #0
 8018d88:	d00b      	beq.n	8018da2 <sqrt+0x46>
 8018d8a:	f7fd fe97 	bl	8016abc <__errno>
 8018d8e:	2321      	movs	r3, #33	@ 0x21
 8018d90:	2200      	movs	r2, #0
 8018d92:	6003      	str	r3, [r0, #0]
 8018d94:	2300      	movs	r3, #0
 8018d96:	0010      	movs	r0, r2
 8018d98:	0019      	movs	r1, r3
 8018d9a:	f7e8 ff89 	bl	8001cb0 <__aeabi_ddiv>
 8018d9e:	0006      	movs	r6, r0
 8018da0:	000f      	movs	r7, r1
 8018da2:	0030      	movs	r0, r6
 8018da4:	0039      	movs	r1, r7
 8018da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018da8 <expf>:
 8018da8:	b570      	push	{r4, r5, r6, lr}
 8018daa:	1c04      	adds	r4, r0, #0
 8018dac:	f000 fa2a 	bl	8019204 <__ieee754_expf>
 8018db0:	1c05      	adds	r5, r0, #0
 8018db2:	1c20      	adds	r0, r4, #0
 8018db4:	f000 f842 	bl	8018e3c <finitef>
 8018db8:	2800      	cmp	r0, #0
 8018dba:	d00b      	beq.n	8018dd4 <expf+0x2c>
 8018dbc:	490c      	ldr	r1, [pc, #48]	@ (8018df0 <expf+0x48>)
 8018dbe:	1c20      	adds	r0, r4, #0
 8018dc0:	f7e7 fb98 	bl	80004f4 <__aeabi_fcmpgt>
 8018dc4:	2800      	cmp	r0, #0
 8018dc6:	d007      	beq.n	8018dd8 <expf+0x30>
 8018dc8:	f7fd fe78 	bl	8016abc <__errno>
 8018dcc:	25ff      	movs	r5, #255	@ 0xff
 8018dce:	2322      	movs	r3, #34	@ 0x22
 8018dd0:	05ed      	lsls	r5, r5, #23
 8018dd2:	6003      	str	r3, [r0, #0]
 8018dd4:	1c28      	adds	r0, r5, #0
 8018dd6:	bd70      	pop	{r4, r5, r6, pc}
 8018dd8:	4906      	ldr	r1, [pc, #24]	@ (8018df4 <expf+0x4c>)
 8018dda:	1c20      	adds	r0, r4, #0
 8018ddc:	f7e7 fb76 	bl	80004cc <__aeabi_fcmplt>
 8018de0:	2800      	cmp	r0, #0
 8018de2:	d0f7      	beq.n	8018dd4 <expf+0x2c>
 8018de4:	f7fd fe6a 	bl	8016abc <__errno>
 8018de8:	2322      	movs	r3, #34	@ 0x22
 8018dea:	2500      	movs	r5, #0
 8018dec:	6003      	str	r3, [r0, #0]
 8018dee:	e7f1      	b.n	8018dd4 <expf+0x2c>
 8018df0:	42b17217 	.word	0x42b17217
 8018df4:	c2cff1b5 	.word	0xc2cff1b5

08018df8 <sqrtf>:
 8018df8:	b570      	push	{r4, r5, r6, lr}
 8018dfa:	1c05      	adds	r5, r0, #0
 8018dfc:	f000 f910 	bl	8019020 <__ieee754_sqrtf>
 8018e00:	1c29      	adds	r1, r5, #0
 8018e02:	1c04      	adds	r4, r0, #0
 8018e04:	1c28      	adds	r0, r5, #0
 8018e06:	f7e8 fb2b 	bl	8001460 <__aeabi_fcmpun>
 8018e0a:	2800      	cmp	r0, #0
 8018e0c:	d10e      	bne.n	8018e2c <sqrtf+0x34>
 8018e0e:	2100      	movs	r1, #0
 8018e10:	1c28      	adds	r0, r5, #0
 8018e12:	f7e7 fb5b 	bl	80004cc <__aeabi_fcmplt>
 8018e16:	2800      	cmp	r0, #0
 8018e18:	d008      	beq.n	8018e2c <sqrtf+0x34>
 8018e1a:	f7fd fe4f 	bl	8016abc <__errno>
 8018e1e:	2321      	movs	r3, #33	@ 0x21
 8018e20:	2100      	movs	r1, #0
 8018e22:	6003      	str	r3, [r0, #0]
 8018e24:	1c08      	adds	r0, r1, #0
 8018e26:	f7e7 fe53 	bl	8000ad0 <__aeabi_fdiv>
 8018e2a:	1c04      	adds	r4, r0, #0
 8018e2c:	1c20      	adds	r0, r4, #0
 8018e2e:	bd70      	pop	{r4, r5, r6, pc}

08018e30 <nan>:
 8018e30:	2000      	movs	r0, #0
 8018e32:	4901      	ldr	r1, [pc, #4]	@ (8018e38 <nan+0x8>)
 8018e34:	4770      	bx	lr
 8018e36:	46c0      	nop			@ (mov r8, r8)
 8018e38:	7ff80000 	.word	0x7ff80000

08018e3c <finitef>:
 8018e3c:	22ff      	movs	r2, #255	@ 0xff
 8018e3e:	0043      	lsls	r3, r0, #1
 8018e40:	085b      	lsrs	r3, r3, #1
 8018e42:	2001      	movs	r0, #1
 8018e44:	05d2      	lsls	r2, r2, #23
 8018e46:	4293      	cmp	r3, r2
 8018e48:	db00      	blt.n	8018e4c <finitef+0x10>
 8018e4a:	2000      	movs	r0, #0
 8018e4c:	4770      	bx	lr
	...

08018e50 <__ieee754_sqrt>:
 8018e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e52:	000a      	movs	r2, r1
 8018e54:	000d      	movs	r5, r1
 8018e56:	496d      	ldr	r1, [pc, #436]	@ (801900c <__ieee754_sqrt+0x1bc>)
 8018e58:	0004      	movs	r4, r0
 8018e5a:	0003      	movs	r3, r0
 8018e5c:	0008      	movs	r0, r1
 8018e5e:	b087      	sub	sp, #28
 8018e60:	4028      	ands	r0, r5
 8018e62:	4288      	cmp	r0, r1
 8018e64:	d111      	bne.n	8018e8a <__ieee754_sqrt+0x3a>
 8018e66:	0022      	movs	r2, r4
 8018e68:	002b      	movs	r3, r5
 8018e6a:	0020      	movs	r0, r4
 8018e6c:	0029      	movs	r1, r5
 8018e6e:	f7e9 fb63 	bl	8002538 <__aeabi_dmul>
 8018e72:	0002      	movs	r2, r0
 8018e74:	000b      	movs	r3, r1
 8018e76:	0020      	movs	r0, r4
 8018e78:	0029      	movs	r1, r5
 8018e7a:	f7e8 fbb5 	bl	80015e8 <__aeabi_dadd>
 8018e7e:	0004      	movs	r4, r0
 8018e80:	000d      	movs	r5, r1
 8018e82:	0020      	movs	r0, r4
 8018e84:	0029      	movs	r1, r5
 8018e86:	b007      	add	sp, #28
 8018e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e8a:	2d00      	cmp	r5, #0
 8018e8c:	dc11      	bgt.n	8018eb2 <__ieee754_sqrt+0x62>
 8018e8e:	0069      	lsls	r1, r5, #1
 8018e90:	0849      	lsrs	r1, r1, #1
 8018e92:	4321      	orrs	r1, r4
 8018e94:	d0f5      	beq.n	8018e82 <__ieee754_sqrt+0x32>
 8018e96:	2000      	movs	r0, #0
 8018e98:	4285      	cmp	r5, r0
 8018e9a:	d010      	beq.n	8018ebe <__ieee754_sqrt+0x6e>
 8018e9c:	0022      	movs	r2, r4
 8018e9e:	002b      	movs	r3, r5
 8018ea0:	0020      	movs	r0, r4
 8018ea2:	0029      	movs	r1, r5
 8018ea4:	f7e9 fe10 	bl	8002ac8 <__aeabi_dsub>
 8018ea8:	0002      	movs	r2, r0
 8018eaa:	000b      	movs	r3, r1
 8018eac:	f7e8 ff00 	bl	8001cb0 <__aeabi_ddiv>
 8018eb0:	e7e5      	b.n	8018e7e <__ieee754_sqrt+0x2e>
 8018eb2:	1528      	asrs	r0, r5, #20
 8018eb4:	d115      	bne.n	8018ee2 <__ieee754_sqrt+0x92>
 8018eb6:	2480      	movs	r4, #128	@ 0x80
 8018eb8:	2100      	movs	r1, #0
 8018eba:	0364      	lsls	r4, r4, #13
 8018ebc:	e007      	b.n	8018ece <__ieee754_sqrt+0x7e>
 8018ebe:	0ada      	lsrs	r2, r3, #11
 8018ec0:	3815      	subs	r0, #21
 8018ec2:	055b      	lsls	r3, r3, #21
 8018ec4:	2a00      	cmp	r2, #0
 8018ec6:	d0fa      	beq.n	8018ebe <__ieee754_sqrt+0x6e>
 8018ec8:	e7f5      	b.n	8018eb6 <__ieee754_sqrt+0x66>
 8018eca:	0052      	lsls	r2, r2, #1
 8018ecc:	3101      	adds	r1, #1
 8018ece:	4222      	tst	r2, r4
 8018ed0:	d0fb      	beq.n	8018eca <__ieee754_sqrt+0x7a>
 8018ed2:	1e4c      	subs	r4, r1, #1
 8018ed4:	1b00      	subs	r0, r0, r4
 8018ed6:	2420      	movs	r4, #32
 8018ed8:	001d      	movs	r5, r3
 8018eda:	1a64      	subs	r4, r4, r1
 8018edc:	40e5      	lsrs	r5, r4
 8018ede:	408b      	lsls	r3, r1
 8018ee0:	432a      	orrs	r2, r5
 8018ee2:	494b      	ldr	r1, [pc, #300]	@ (8019010 <__ieee754_sqrt+0x1c0>)
 8018ee4:	0312      	lsls	r2, r2, #12
 8018ee6:	1844      	adds	r4, r0, r1
 8018ee8:	2180      	movs	r1, #128	@ 0x80
 8018eea:	0b12      	lsrs	r2, r2, #12
 8018eec:	0349      	lsls	r1, r1, #13
 8018eee:	4311      	orrs	r1, r2
 8018ef0:	07c0      	lsls	r0, r0, #31
 8018ef2:	d403      	bmi.n	8018efc <__ieee754_sqrt+0xac>
 8018ef4:	0fda      	lsrs	r2, r3, #31
 8018ef6:	0049      	lsls	r1, r1, #1
 8018ef8:	1851      	adds	r1, r2, r1
 8018efa:	005b      	lsls	r3, r3, #1
 8018efc:	2500      	movs	r5, #0
 8018efe:	1062      	asrs	r2, r4, #1
 8018f00:	0049      	lsls	r1, r1, #1
 8018f02:	2480      	movs	r4, #128	@ 0x80
 8018f04:	9205      	str	r2, [sp, #20]
 8018f06:	0fda      	lsrs	r2, r3, #31
 8018f08:	1852      	adds	r2, r2, r1
 8018f0a:	2016      	movs	r0, #22
 8018f0c:	0029      	movs	r1, r5
 8018f0e:	005b      	lsls	r3, r3, #1
 8018f10:	03a4      	lsls	r4, r4, #14
 8018f12:	190e      	adds	r6, r1, r4
 8018f14:	4296      	cmp	r6, r2
 8018f16:	dc02      	bgt.n	8018f1e <__ieee754_sqrt+0xce>
 8018f18:	1931      	adds	r1, r6, r4
 8018f1a:	1b92      	subs	r2, r2, r6
 8018f1c:	192d      	adds	r5, r5, r4
 8018f1e:	0fde      	lsrs	r6, r3, #31
 8018f20:	0052      	lsls	r2, r2, #1
 8018f22:	3801      	subs	r0, #1
 8018f24:	1992      	adds	r2, r2, r6
 8018f26:	005b      	lsls	r3, r3, #1
 8018f28:	0864      	lsrs	r4, r4, #1
 8018f2a:	2800      	cmp	r0, #0
 8018f2c:	d1f1      	bne.n	8018f12 <__ieee754_sqrt+0xc2>
 8018f2e:	2620      	movs	r6, #32
 8018f30:	2780      	movs	r7, #128	@ 0x80
 8018f32:	0004      	movs	r4, r0
 8018f34:	9604      	str	r6, [sp, #16]
 8018f36:	063f      	lsls	r7, r7, #24
 8018f38:	19c6      	adds	r6, r0, r7
 8018f3a:	46b4      	mov	ip, r6
 8018f3c:	4291      	cmp	r1, r2
 8018f3e:	db02      	blt.n	8018f46 <__ieee754_sqrt+0xf6>
 8018f40:	d114      	bne.n	8018f6c <__ieee754_sqrt+0x11c>
 8018f42:	429e      	cmp	r6, r3
 8018f44:	d812      	bhi.n	8018f6c <__ieee754_sqrt+0x11c>
 8018f46:	4660      	mov	r0, ip
 8018f48:	4666      	mov	r6, ip
 8018f4a:	19c0      	adds	r0, r0, r7
 8018f4c:	9100      	str	r1, [sp, #0]
 8018f4e:	2e00      	cmp	r6, #0
 8018f50:	da03      	bge.n	8018f5a <__ieee754_sqrt+0x10a>
 8018f52:	43c6      	mvns	r6, r0
 8018f54:	0ff6      	lsrs	r6, r6, #31
 8018f56:	198e      	adds	r6, r1, r6
 8018f58:	9600      	str	r6, [sp, #0]
 8018f5a:	1a52      	subs	r2, r2, r1
 8018f5c:	4563      	cmp	r3, ip
 8018f5e:	4189      	sbcs	r1, r1
 8018f60:	4249      	negs	r1, r1
 8018f62:	1a52      	subs	r2, r2, r1
 8018f64:	4661      	mov	r1, ip
 8018f66:	1a5b      	subs	r3, r3, r1
 8018f68:	9900      	ldr	r1, [sp, #0]
 8018f6a:	19e4      	adds	r4, r4, r7
 8018f6c:	0fde      	lsrs	r6, r3, #31
 8018f6e:	0052      	lsls	r2, r2, #1
 8018f70:	1992      	adds	r2, r2, r6
 8018f72:	9e04      	ldr	r6, [sp, #16]
 8018f74:	005b      	lsls	r3, r3, #1
 8018f76:	3e01      	subs	r6, #1
 8018f78:	087f      	lsrs	r7, r7, #1
 8018f7a:	9604      	str	r6, [sp, #16]
 8018f7c:	2e00      	cmp	r6, #0
 8018f7e:	d1db      	bne.n	8018f38 <__ieee754_sqrt+0xe8>
 8018f80:	431a      	orrs	r2, r3
 8018f82:	d01f      	beq.n	8018fc4 <__ieee754_sqrt+0x174>
 8018f84:	4e23      	ldr	r6, [pc, #140]	@ (8019014 <__ieee754_sqrt+0x1c4>)
 8018f86:	4f24      	ldr	r7, [pc, #144]	@ (8019018 <__ieee754_sqrt+0x1c8>)
 8018f88:	6830      	ldr	r0, [r6, #0]
 8018f8a:	6871      	ldr	r1, [r6, #4]
 8018f8c:	683a      	ldr	r2, [r7, #0]
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	9200      	str	r2, [sp, #0]
 8018f92:	9301      	str	r3, [sp, #4]
 8018f94:	6832      	ldr	r2, [r6, #0]
 8018f96:	6873      	ldr	r3, [r6, #4]
 8018f98:	9202      	str	r2, [sp, #8]
 8018f9a:	9303      	str	r3, [sp, #12]
 8018f9c:	9a00      	ldr	r2, [sp, #0]
 8018f9e:	9b01      	ldr	r3, [sp, #4]
 8018fa0:	f7e9 fd92 	bl	8002ac8 <__aeabi_dsub>
 8018fa4:	0002      	movs	r2, r0
 8018fa6:	000b      	movs	r3, r1
 8018fa8:	9802      	ldr	r0, [sp, #8]
 8018faa:	9903      	ldr	r1, [sp, #12]
 8018fac:	f7e7 fa5e 	bl	800046c <__aeabi_dcmple>
 8018fb0:	2800      	cmp	r0, #0
 8018fb2:	d007      	beq.n	8018fc4 <__ieee754_sqrt+0x174>
 8018fb4:	6830      	ldr	r0, [r6, #0]
 8018fb6:	6871      	ldr	r1, [r6, #4]
 8018fb8:	683a      	ldr	r2, [r7, #0]
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	1c67      	adds	r7, r4, #1
 8018fbe:	d10f      	bne.n	8018fe0 <__ieee754_sqrt+0x190>
 8018fc0:	9c04      	ldr	r4, [sp, #16]
 8018fc2:	3501      	adds	r5, #1
 8018fc4:	4b15      	ldr	r3, [pc, #84]	@ (801901c <__ieee754_sqrt+0x1cc>)
 8018fc6:	106a      	asrs	r2, r5, #1
 8018fc8:	18d2      	adds	r2, r2, r3
 8018fca:	0863      	lsrs	r3, r4, #1
 8018fcc:	07ed      	lsls	r5, r5, #31
 8018fce:	d502      	bpl.n	8018fd6 <__ieee754_sqrt+0x186>
 8018fd0:	2180      	movs	r1, #128	@ 0x80
 8018fd2:	0609      	lsls	r1, r1, #24
 8018fd4:	430b      	orrs	r3, r1
 8018fd6:	9905      	ldr	r1, [sp, #20]
 8018fd8:	001c      	movs	r4, r3
 8018fda:	0509      	lsls	r1, r1, #20
 8018fdc:	188d      	adds	r5, r1, r2
 8018fde:	e750      	b.n	8018e82 <__ieee754_sqrt+0x32>
 8018fe0:	f7e8 fb02 	bl	80015e8 <__aeabi_dadd>
 8018fe4:	6877      	ldr	r7, [r6, #4]
 8018fe6:	6836      	ldr	r6, [r6, #0]
 8018fe8:	0002      	movs	r2, r0
 8018fea:	000b      	movs	r3, r1
 8018fec:	0030      	movs	r0, r6
 8018fee:	0039      	movs	r1, r7
 8018ff0:	f7e7 fa32 	bl	8000458 <__aeabi_dcmplt>
 8018ff4:	2800      	cmp	r0, #0
 8018ff6:	d004      	beq.n	8019002 <__ieee754_sqrt+0x1b2>
 8018ff8:	3402      	adds	r4, #2
 8018ffa:	4263      	negs	r3, r4
 8018ffc:	4163      	adcs	r3, r4
 8018ffe:	18ed      	adds	r5, r5, r3
 8019000:	e7e0      	b.n	8018fc4 <__ieee754_sqrt+0x174>
 8019002:	2301      	movs	r3, #1
 8019004:	3401      	adds	r4, #1
 8019006:	439c      	bics	r4, r3
 8019008:	e7dc      	b.n	8018fc4 <__ieee754_sqrt+0x174>
 801900a:	46c0      	nop			@ (mov r8, r8)
 801900c:	7ff00000 	.word	0x7ff00000
 8019010:	fffffc01 	.word	0xfffffc01
 8019014:	20000498 	.word	0x20000498
 8019018:	20000490 	.word	0x20000490
 801901c:	3fe00000 	.word	0x3fe00000

08019020 <__ieee754_sqrtf>:
 8019020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019022:	0003      	movs	r3, r0
 8019024:	0042      	lsls	r2, r0, #1
 8019026:	1c04      	adds	r4, r0, #0
 8019028:	20ff      	movs	r0, #255	@ 0xff
 801902a:	0852      	lsrs	r2, r2, #1
 801902c:	05c0      	lsls	r0, r0, #23
 801902e:	4282      	cmp	r2, r0
 8019030:	d30a      	bcc.n	8019048 <__ieee754_sqrtf+0x28>
 8019032:	1c21      	adds	r1, r4, #0
 8019034:	1c20      	adds	r0, r4, #0
 8019036:	f7e7 ff31 	bl	8000e9c <__aeabi_fmul>
 801903a:	1c01      	adds	r1, r0, #0
 801903c:	1c20      	adds	r0, r4, #0
 801903e:	f7e7 fbbd 	bl	80007bc <__aeabi_fadd>
 8019042:	1c04      	adds	r4, r0, #0
 8019044:	1c20      	adds	r0, r4, #0
 8019046:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019048:	2a00      	cmp	r2, #0
 801904a:	d0fb      	beq.n	8019044 <__ieee754_sqrtf+0x24>
 801904c:	2c00      	cmp	r4, #0
 801904e:	da07      	bge.n	8019060 <__ieee754_sqrtf+0x40>
 8019050:	1c21      	adds	r1, r4, #0
 8019052:	1c20      	adds	r0, r4, #0
 8019054:	f7e8 f860 	bl	8001118 <__aeabi_fsub>
 8019058:	1c01      	adds	r1, r0, #0
 801905a:	f7e7 fd39 	bl	8000ad0 <__aeabi_fdiv>
 801905e:	e7f0      	b.n	8019042 <__ieee754_sqrtf+0x22>
 8019060:	0022      	movs	r2, r4
 8019062:	15e1      	asrs	r1, r4, #23
 8019064:	4002      	ands	r2, r0
 8019066:	4204      	tst	r4, r0
 8019068:	d046      	beq.n	80190f8 <__ieee754_sqrtf+0xd8>
 801906a:	2280      	movs	r2, #128	@ 0x80
 801906c:	000f      	movs	r7, r1
 801906e:	025b      	lsls	r3, r3, #9
 8019070:	0a5b      	lsrs	r3, r3, #9
 8019072:	0412      	lsls	r2, r2, #16
 8019074:	3f7f      	subs	r7, #127	@ 0x7f
 8019076:	4313      	orrs	r3, r2
 8019078:	07c9      	lsls	r1, r1, #31
 801907a:	d400      	bmi.n	801907e <__ieee754_sqrtf+0x5e>
 801907c:	005b      	lsls	r3, r3, #1
 801907e:	2400      	movs	r4, #0
 8019080:	2180      	movs	r1, #128	@ 0x80
 8019082:	2019      	movs	r0, #25
 8019084:	0026      	movs	r6, r4
 8019086:	107f      	asrs	r7, r7, #1
 8019088:	005b      	lsls	r3, r3, #1
 801908a:	0449      	lsls	r1, r1, #17
 801908c:	1875      	adds	r5, r6, r1
 801908e:	001a      	movs	r2, r3
 8019090:	429d      	cmp	r5, r3
 8019092:	dc02      	bgt.n	801909a <__ieee754_sqrtf+0x7a>
 8019094:	186e      	adds	r6, r5, r1
 8019096:	1b5a      	subs	r2, r3, r5
 8019098:	1864      	adds	r4, r4, r1
 801909a:	3801      	subs	r0, #1
 801909c:	0053      	lsls	r3, r2, #1
 801909e:	0849      	lsrs	r1, r1, #1
 80190a0:	2800      	cmp	r0, #0
 80190a2:	d1f3      	bne.n	801908c <__ieee754_sqrtf+0x6c>
 80190a4:	2a00      	cmp	r2, #0
 80190a6:	d019      	beq.n	80190dc <__ieee754_sqrtf+0xbc>
 80190a8:	4d17      	ldr	r5, [pc, #92]	@ (8019108 <__ieee754_sqrtf+0xe8>)
 80190aa:	4e18      	ldr	r6, [pc, #96]	@ (801910c <__ieee754_sqrtf+0xec>)
 80190ac:	6828      	ldr	r0, [r5, #0]
 80190ae:	6831      	ldr	r1, [r6, #0]
 80190b0:	682b      	ldr	r3, [r5, #0]
 80190b2:	9301      	str	r3, [sp, #4]
 80190b4:	f7e8 f830 	bl	8001118 <__aeabi_fsub>
 80190b8:	1c01      	adds	r1, r0, #0
 80190ba:	9801      	ldr	r0, [sp, #4]
 80190bc:	f7e7 fa10 	bl	80004e0 <__aeabi_fcmple>
 80190c0:	2800      	cmp	r0, #0
 80190c2:	d00b      	beq.n	80190dc <__ieee754_sqrtf+0xbc>
 80190c4:	6828      	ldr	r0, [r5, #0]
 80190c6:	6831      	ldr	r1, [r6, #0]
 80190c8:	f7e7 fb78 	bl	80007bc <__aeabi_fadd>
 80190cc:	682d      	ldr	r5, [r5, #0]
 80190ce:	1c01      	adds	r1, r0, #0
 80190d0:	1c28      	adds	r0, r5, #0
 80190d2:	f7e7 f9fb 	bl	80004cc <__aeabi_fcmplt>
 80190d6:	2800      	cmp	r0, #0
 80190d8:	d011      	beq.n	80190fe <__ieee754_sqrtf+0xde>
 80190da:	3402      	adds	r4, #2
 80190dc:	23fc      	movs	r3, #252	@ 0xfc
 80190de:	1064      	asrs	r4, r4, #1
 80190e0:	059b      	lsls	r3, r3, #22
 80190e2:	18e3      	adds	r3, r4, r3
 80190e4:	05fc      	lsls	r4, r7, #23
 80190e6:	18e4      	adds	r4, r4, r3
 80190e8:	e7ac      	b.n	8019044 <__ieee754_sqrtf+0x24>
 80190ea:	005b      	lsls	r3, r3, #1
 80190ec:	3201      	adds	r2, #1
 80190ee:	4203      	tst	r3, r0
 80190f0:	d0fb      	beq.n	80190ea <__ieee754_sqrtf+0xca>
 80190f2:	3a01      	subs	r2, #1
 80190f4:	1a89      	subs	r1, r1, r2
 80190f6:	e7b8      	b.n	801906a <__ieee754_sqrtf+0x4a>
 80190f8:	2080      	movs	r0, #128	@ 0x80
 80190fa:	0400      	lsls	r0, r0, #16
 80190fc:	e7f7      	b.n	80190ee <__ieee754_sqrtf+0xce>
 80190fe:	2301      	movs	r3, #1
 8019100:	3401      	adds	r4, #1
 8019102:	439c      	bics	r4, r3
 8019104:	e7ea      	b.n	80190dc <__ieee754_sqrtf+0xbc>
 8019106:	46c0      	nop			@ (mov r8, r8)
 8019108:	200004a4 	.word	0x200004a4
 801910c:	200004a0 	.word	0x200004a0

08019110 <__ieee754_log10>:
 8019110:	2280      	movs	r2, #128	@ 0x80
 8019112:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019114:	000b      	movs	r3, r1
 8019116:	0004      	movs	r4, r0
 8019118:	000d      	movs	r5, r1
 801911a:	b085      	sub	sp, #20
 801911c:	0352      	lsls	r2, r2, #13
 801911e:	4291      	cmp	r1, r2
 8019120:	da26      	bge.n	8019170 <__ieee754_log10+0x60>
 8019122:	004a      	lsls	r2, r1, #1
 8019124:	0852      	lsrs	r2, r2, #1
 8019126:	4302      	orrs	r2, r0
 8019128:	d107      	bne.n	801913a <__ieee754_log10+0x2a>
 801912a:	2200      	movs	r2, #0
 801912c:	2300      	movs	r3, #0
 801912e:	2000      	movs	r0, #0
 8019130:	4929      	ldr	r1, [pc, #164]	@ (80191d8 <__ieee754_log10+0xc8>)
 8019132:	f7e8 fdbd 	bl	8001cb0 <__aeabi_ddiv>
 8019136:	b005      	add	sp, #20
 8019138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801913a:	2900      	cmp	r1, #0
 801913c:	da05      	bge.n	801914a <__ieee754_log10+0x3a>
 801913e:	0002      	movs	r2, r0
 8019140:	f7e9 fcc2 	bl	8002ac8 <__aeabi_dsub>
 8019144:	2200      	movs	r2, #0
 8019146:	2300      	movs	r3, #0
 8019148:	e7f3      	b.n	8019132 <__ieee754_log10+0x22>
 801914a:	2200      	movs	r2, #0
 801914c:	4b23      	ldr	r3, [pc, #140]	@ (80191dc <__ieee754_log10+0xcc>)
 801914e:	f7e9 f9f3 	bl	8002538 <__aeabi_dmul>
 8019152:	2236      	movs	r2, #54	@ 0x36
 8019154:	0004      	movs	r4, r0
 8019156:	000d      	movs	r5, r1
 8019158:	000b      	movs	r3, r1
 801915a:	4252      	negs	r2, r2
 801915c:	4920      	ldr	r1, [pc, #128]	@ (80191e0 <__ieee754_log10+0xd0>)
 801915e:	428b      	cmp	r3, r1
 8019160:	dd08      	ble.n	8019174 <__ieee754_log10+0x64>
 8019162:	0022      	movs	r2, r4
 8019164:	002b      	movs	r3, r5
 8019166:	0020      	movs	r0, r4
 8019168:	0029      	movs	r1, r5
 801916a:	f7e8 fa3d 	bl	80015e8 <__aeabi_dadd>
 801916e:	e7e2      	b.n	8019136 <__ieee754_log10+0x26>
 8019170:	2200      	movs	r2, #0
 8019172:	e7f3      	b.n	801915c <__ieee754_log10+0x4c>
 8019174:	491b      	ldr	r1, [pc, #108]	@ (80191e4 <__ieee754_log10+0xd4>)
 8019176:	1518      	asrs	r0, r3, #20
 8019178:	1840      	adds	r0, r0, r1
 801917a:	1880      	adds	r0, r0, r2
 801917c:	0fc2      	lsrs	r2, r0, #31
 801917e:	031b      	lsls	r3, r3, #12
 8019180:	0b1b      	lsrs	r3, r3, #12
 8019182:	1880      	adds	r0, r0, r2
 8019184:	9203      	str	r2, [sp, #12]
 8019186:	9300      	str	r3, [sp, #0]
 8019188:	f7ea f898 	bl	80032bc <__aeabi_i2d>
 801918c:	9a03      	ldr	r2, [sp, #12]
 801918e:	4b16      	ldr	r3, [pc, #88]	@ (80191e8 <__ieee754_log10+0xd8>)
 8019190:	0006      	movs	r6, r0
 8019192:	1a9b      	subs	r3, r3, r2
 8019194:	9a00      	ldr	r2, [sp, #0]
 8019196:	051b      	lsls	r3, r3, #20
 8019198:	431a      	orrs	r2, r3
 801919a:	0015      	movs	r5, r2
 801919c:	4b13      	ldr	r3, [pc, #76]	@ (80191ec <__ieee754_log10+0xdc>)
 801919e:	4a14      	ldr	r2, [pc, #80]	@ (80191f0 <__ieee754_log10+0xe0>)
 80191a0:	000f      	movs	r7, r1
 80191a2:	f7e9 f9c9 	bl	8002538 <__aeabi_dmul>
 80191a6:	9000      	str	r0, [sp, #0]
 80191a8:	9101      	str	r1, [sp, #4]
 80191aa:	0020      	movs	r0, r4
 80191ac:	0029      	movs	r1, r5
 80191ae:	f000 f93b 	bl	8019428 <__ieee754_log>
 80191b2:	4a10      	ldr	r2, [pc, #64]	@ (80191f4 <__ieee754_log10+0xe4>)
 80191b4:	4b10      	ldr	r3, [pc, #64]	@ (80191f8 <__ieee754_log10+0xe8>)
 80191b6:	f7e9 f9bf 	bl	8002538 <__aeabi_dmul>
 80191ba:	9a00      	ldr	r2, [sp, #0]
 80191bc:	9b01      	ldr	r3, [sp, #4]
 80191be:	f7e8 fa13 	bl	80015e8 <__aeabi_dadd>
 80191c2:	4a0e      	ldr	r2, [pc, #56]	@ (80191fc <__ieee754_log10+0xec>)
 80191c4:	4b0e      	ldr	r3, [pc, #56]	@ (8019200 <__ieee754_log10+0xf0>)
 80191c6:	0004      	movs	r4, r0
 80191c8:	000d      	movs	r5, r1
 80191ca:	0030      	movs	r0, r6
 80191cc:	0039      	movs	r1, r7
 80191ce:	f7e9 f9b3 	bl	8002538 <__aeabi_dmul>
 80191d2:	0002      	movs	r2, r0
 80191d4:	000b      	movs	r3, r1
 80191d6:	e7c6      	b.n	8019166 <__ieee754_log10+0x56>
 80191d8:	c3500000 	.word	0xc3500000
 80191dc:	43500000 	.word	0x43500000
 80191e0:	7fefffff 	.word	0x7fefffff
 80191e4:	fffffc01 	.word	0xfffffc01
 80191e8:	000003ff 	.word	0x000003ff
 80191ec:	3d59fef3 	.word	0x3d59fef3
 80191f0:	11f12b36 	.word	0x11f12b36
 80191f4:	1526e50e 	.word	0x1526e50e
 80191f8:	3fdbcb7b 	.word	0x3fdbcb7b
 80191fc:	509f6000 	.word	0x509f6000
 8019200:	3fd34413 	.word	0x3fd34413

08019204 <__ieee754_expf>:
 8019204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019206:	21ff      	movs	r1, #255	@ 0xff
 8019208:	0043      	lsls	r3, r0, #1
 801920a:	1c04      	adds	r4, r0, #0
 801920c:	085b      	lsrs	r3, r3, #1
 801920e:	05c9      	lsls	r1, r1, #23
 8019210:	428b      	cmp	r3, r1
 8019212:	d904      	bls.n	801921e <__ieee754_expf+0x1a>
 8019214:	1c01      	adds	r1, r0, #0
 8019216:	1c20      	adds	r0, r4, #0
 8019218:	f7e7 fad0 	bl	80007bc <__aeabi_fadd>
 801921c:	e00d      	b.n	801923a <__ieee754_expf+0x36>
 801921e:	0fc6      	lsrs	r6, r0, #31
 8019220:	428b      	cmp	r3, r1
 8019222:	d104      	bne.n	801922e <__ieee754_expf+0x2a>
 8019224:	2e00      	cmp	r6, #0
 8019226:	d000      	beq.n	801922a <__ieee754_expf+0x26>
 8019228:	e0ba      	b.n	80193a0 <__ieee754_expf+0x19c>
 801922a:	1c20      	adds	r0, r4, #0
 801922c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801922e:	495d      	ldr	r1, [pc, #372]	@ (80193a4 <__ieee754_expf+0x1a0>)
 8019230:	4288      	cmp	r0, r1
 8019232:	dd04      	ble.n	801923e <__ieee754_expf+0x3a>
 8019234:	2000      	movs	r0, #0
 8019236:	f000 f8f1 	bl	801941c <__math_oflowf>
 801923a:	1c04      	adds	r4, r0, #0
 801923c:	e7f5      	b.n	801922a <__ieee754_expf+0x26>
 801923e:	2800      	cmp	r0, #0
 8019240:	da06      	bge.n	8019250 <__ieee754_expf+0x4c>
 8019242:	4a59      	ldr	r2, [pc, #356]	@ (80193a8 <__ieee754_expf+0x1a4>)
 8019244:	4293      	cmp	r3, r2
 8019246:	d903      	bls.n	8019250 <__ieee754_expf+0x4c>
 8019248:	2000      	movs	r0, #0
 801924a:	f000 f8e1 	bl	8019410 <__math_uflowf>
 801924e:	e7f4      	b.n	801923a <__ieee754_expf+0x36>
 8019250:	4a56      	ldr	r2, [pc, #344]	@ (80193ac <__ieee754_expf+0x1a8>)
 8019252:	4293      	cmp	r3, r2
 8019254:	d96e      	bls.n	8019334 <__ieee754_expf+0x130>
 8019256:	4a56      	ldr	r2, [pc, #344]	@ (80193b0 <__ieee754_expf+0x1ac>)
 8019258:	00b5      	lsls	r5, r6, #2
 801925a:	4293      	cmp	r3, r2
 801925c:	d84e      	bhi.n	80192fc <__ieee754_expf+0xf8>
 801925e:	4b55      	ldr	r3, [pc, #340]	@ (80193b4 <__ieee754_expf+0x1b0>)
 8019260:	1c20      	adds	r0, r4, #0
 8019262:	5959      	ldr	r1, [r3, r5]
 8019264:	f7e7 ff58 	bl	8001118 <__aeabi_fsub>
 8019268:	4b53      	ldr	r3, [pc, #332]	@ (80193b8 <__ieee754_expf+0x1b4>)
 801926a:	1c07      	adds	r7, r0, #0
 801926c:	595b      	ldr	r3, [r3, r5]
 801926e:	2501      	movs	r5, #1
 8019270:	1bad      	subs	r5, r5, r6
 8019272:	9300      	str	r3, [sp, #0]
 8019274:	1bad      	subs	r5, r5, r6
 8019276:	9900      	ldr	r1, [sp, #0]
 8019278:	1c38      	adds	r0, r7, #0
 801927a:	f7e7 ff4d 	bl	8001118 <__aeabi_fsub>
 801927e:	1c04      	adds	r4, r0, #0
 8019280:	1c21      	adds	r1, r4, #0
 8019282:	1c20      	adds	r0, r4, #0
 8019284:	f7e7 fe0a 	bl	8000e9c <__aeabi_fmul>
 8019288:	494c      	ldr	r1, [pc, #304]	@ (80193bc <__ieee754_expf+0x1b8>)
 801928a:	1c06      	adds	r6, r0, #0
 801928c:	f7e7 fe06 	bl	8000e9c <__aeabi_fmul>
 8019290:	494b      	ldr	r1, [pc, #300]	@ (80193c0 <__ieee754_expf+0x1bc>)
 8019292:	f7e7 ff41 	bl	8001118 <__aeabi_fsub>
 8019296:	1c31      	adds	r1, r6, #0
 8019298:	f7e7 fe00 	bl	8000e9c <__aeabi_fmul>
 801929c:	4949      	ldr	r1, [pc, #292]	@ (80193c4 <__ieee754_expf+0x1c0>)
 801929e:	f7e7 fa8d 	bl	80007bc <__aeabi_fadd>
 80192a2:	1c31      	adds	r1, r6, #0
 80192a4:	f7e7 fdfa 	bl	8000e9c <__aeabi_fmul>
 80192a8:	4947      	ldr	r1, [pc, #284]	@ (80193c8 <__ieee754_expf+0x1c4>)
 80192aa:	f7e7 ff35 	bl	8001118 <__aeabi_fsub>
 80192ae:	1c31      	adds	r1, r6, #0
 80192b0:	f7e7 fdf4 	bl	8000e9c <__aeabi_fmul>
 80192b4:	4945      	ldr	r1, [pc, #276]	@ (80193cc <__ieee754_expf+0x1c8>)
 80192b6:	f7e7 fa81 	bl	80007bc <__aeabi_fadd>
 80192ba:	1c31      	adds	r1, r6, #0
 80192bc:	f7e7 fdee 	bl	8000e9c <__aeabi_fmul>
 80192c0:	1c01      	adds	r1, r0, #0
 80192c2:	1c20      	adds	r0, r4, #0
 80192c4:	f7e7 ff28 	bl	8001118 <__aeabi_fsub>
 80192c8:	1c01      	adds	r1, r0, #0
 80192ca:	1c06      	adds	r6, r0, #0
 80192cc:	1c20      	adds	r0, r4, #0
 80192ce:	f7e7 fde5 	bl	8000e9c <__aeabi_fmul>
 80192d2:	9001      	str	r0, [sp, #4]
 80192d4:	2d00      	cmp	r5, #0
 80192d6:	d140      	bne.n	801935a <__ieee754_expf+0x156>
 80192d8:	2180      	movs	r1, #128	@ 0x80
 80192da:	1c30      	adds	r0, r6, #0
 80192dc:	05c9      	lsls	r1, r1, #23
 80192de:	f7e7 ff1b 	bl	8001118 <__aeabi_fsub>
 80192e2:	1c01      	adds	r1, r0, #0
 80192e4:	9801      	ldr	r0, [sp, #4]
 80192e6:	f7e7 fbf3 	bl	8000ad0 <__aeabi_fdiv>
 80192ea:	1c21      	adds	r1, r4, #0
 80192ec:	f7e7 ff14 	bl	8001118 <__aeabi_fsub>
 80192f0:	1c01      	adds	r1, r0, #0
 80192f2:	20fe      	movs	r0, #254	@ 0xfe
 80192f4:	0580      	lsls	r0, r0, #22
 80192f6:	f7e7 ff0f 	bl	8001118 <__aeabi_fsub>
 80192fa:	e79e      	b.n	801923a <__ieee754_expf+0x36>
 80192fc:	4934      	ldr	r1, [pc, #208]	@ (80193d0 <__ieee754_expf+0x1cc>)
 80192fe:	1c20      	adds	r0, r4, #0
 8019300:	f7e7 fdcc 	bl	8000e9c <__aeabi_fmul>
 8019304:	4b33      	ldr	r3, [pc, #204]	@ (80193d4 <__ieee754_expf+0x1d0>)
 8019306:	5959      	ldr	r1, [r3, r5]
 8019308:	f7e7 fa58 	bl	80007bc <__aeabi_fadd>
 801930c:	f7e8 f8be 	bl	800148c <__aeabi_f2iz>
 8019310:	0005      	movs	r5, r0
 8019312:	f7e8 f8db 	bl	80014cc <__aeabi_i2f>
 8019316:	4930      	ldr	r1, [pc, #192]	@ (80193d8 <__ieee754_expf+0x1d4>)
 8019318:	1c06      	adds	r6, r0, #0
 801931a:	f7e7 fdbf 	bl	8000e9c <__aeabi_fmul>
 801931e:	1c01      	adds	r1, r0, #0
 8019320:	1c20      	adds	r0, r4, #0
 8019322:	f7e7 fef9 	bl	8001118 <__aeabi_fsub>
 8019326:	492d      	ldr	r1, [pc, #180]	@ (80193dc <__ieee754_expf+0x1d8>)
 8019328:	1c07      	adds	r7, r0, #0
 801932a:	1c30      	adds	r0, r6, #0
 801932c:	f7e7 fdb6 	bl	8000e9c <__aeabi_fmul>
 8019330:	9000      	str	r0, [sp, #0]
 8019332:	e7a0      	b.n	8019276 <__ieee754_expf+0x72>
 8019334:	22d0      	movs	r2, #208	@ 0xd0
 8019336:	0592      	lsls	r2, r2, #22
 8019338:	4293      	cmp	r3, r2
 801933a:	d20c      	bcs.n	8019356 <__ieee754_expf+0x152>
 801933c:	4928      	ldr	r1, [pc, #160]	@ (80193e0 <__ieee754_expf+0x1dc>)
 801933e:	1c20      	adds	r0, r4, #0
 8019340:	f7e7 fa3c 	bl	80007bc <__aeabi_fadd>
 8019344:	21fe      	movs	r1, #254	@ 0xfe
 8019346:	0589      	lsls	r1, r1, #22
 8019348:	f7e7 f8d4 	bl	80004f4 <__aeabi_fcmpgt>
 801934c:	1e05      	subs	r5, r0, #0
 801934e:	d097      	beq.n	8019280 <__ieee754_expf+0x7c>
 8019350:	21fe      	movs	r1, #254	@ 0xfe
 8019352:	0589      	lsls	r1, r1, #22
 8019354:	e75f      	b.n	8019216 <__ieee754_expf+0x12>
 8019356:	2500      	movs	r5, #0
 8019358:	e792      	b.n	8019280 <__ieee754_expf+0x7c>
 801935a:	2080      	movs	r0, #128	@ 0x80
 801935c:	1c31      	adds	r1, r6, #0
 801935e:	05c0      	lsls	r0, r0, #23
 8019360:	f7e7 feda 	bl	8001118 <__aeabi_fsub>
 8019364:	1c01      	adds	r1, r0, #0
 8019366:	9801      	ldr	r0, [sp, #4]
 8019368:	f7e7 fbb2 	bl	8000ad0 <__aeabi_fdiv>
 801936c:	1c01      	adds	r1, r0, #0
 801936e:	9800      	ldr	r0, [sp, #0]
 8019370:	f7e7 fed2 	bl	8001118 <__aeabi_fsub>
 8019374:	1c39      	adds	r1, r7, #0
 8019376:	f7e7 fecf 	bl	8001118 <__aeabi_fsub>
 801937a:	1c01      	adds	r1, r0, #0
 801937c:	20fe      	movs	r0, #254	@ 0xfe
 801937e:	0580      	lsls	r0, r0, #22
 8019380:	f7e7 feca 	bl	8001118 <__aeabi_fsub>
 8019384:	002b      	movs	r3, r5
 8019386:	337d      	adds	r3, #125	@ 0x7d
 8019388:	db02      	blt.n	8019390 <__ieee754_expf+0x18c>
 801938a:	05ec      	lsls	r4, r5, #23
 801938c:	1824      	adds	r4, r4, r0
 801938e:	e74c      	b.n	801922a <__ieee754_expf+0x26>
 8019390:	21d8      	movs	r1, #216	@ 0xd8
 8019392:	3564      	adds	r5, #100	@ 0x64
 8019394:	05ed      	lsls	r5, r5, #23
 8019396:	1828      	adds	r0, r5, r0
 8019398:	0509      	lsls	r1, r1, #20
 801939a:	f7e7 fd7f 	bl	8000e9c <__aeabi_fmul>
 801939e:	e74c      	b.n	801923a <__ieee754_expf+0x36>
 80193a0:	2400      	movs	r4, #0
 80193a2:	e742      	b.n	801922a <__ieee754_expf+0x26>
 80193a4:	42b17217 	.word	0x42b17217
 80193a8:	42cff1b5 	.word	0x42cff1b5
 80193ac:	3eb17218 	.word	0x3eb17218
 80193b0:	3f851591 	.word	0x3f851591
 80193b4:	0801a808 	.word	0x0801a808
 80193b8:	0801a800 	.word	0x0801a800
 80193bc:	3331bb4c 	.word	0x3331bb4c
 80193c0:	35ddea0e 	.word	0x35ddea0e
 80193c4:	388ab355 	.word	0x388ab355
 80193c8:	3b360b61 	.word	0x3b360b61
 80193cc:	3e2aaaab 	.word	0x3e2aaaab
 80193d0:	3fb8aa3b 	.word	0x3fb8aa3b
 80193d4:	0801a810 	.word	0x0801a810
 80193d8:	3f317180 	.word	0x3f317180
 80193dc:	3717f7d1 	.word	0x3717f7d1
 80193e0:	7149f2ca 	.word	0x7149f2ca

080193e4 <with_errnof>:
 80193e4:	b570      	push	{r4, r5, r6, lr}
 80193e6:	000d      	movs	r5, r1
 80193e8:	1c04      	adds	r4, r0, #0
 80193ea:	f7fd fb67 	bl	8016abc <__errno>
 80193ee:	6005      	str	r5, [r0, #0]
 80193f0:	1c20      	adds	r0, r4, #0
 80193f2:	bd70      	pop	{r4, r5, r6, pc}

080193f4 <xflowf>:
 80193f4:	b510      	push	{r4, lr}
 80193f6:	1c0b      	adds	r3, r1, #0
 80193f8:	2800      	cmp	r0, #0
 80193fa:	d002      	beq.n	8019402 <xflowf+0xe>
 80193fc:	2380      	movs	r3, #128	@ 0x80
 80193fe:	061b      	lsls	r3, r3, #24
 8019400:	18cb      	adds	r3, r1, r3
 8019402:	1c18      	adds	r0, r3, #0
 8019404:	f7e7 fd4a 	bl	8000e9c <__aeabi_fmul>
 8019408:	2122      	movs	r1, #34	@ 0x22
 801940a:	f7ff ffeb 	bl	80193e4 <with_errnof>
 801940e:	bd10      	pop	{r4, pc}

08019410 <__math_uflowf>:
 8019410:	2180      	movs	r1, #128	@ 0x80
 8019412:	b510      	push	{r4, lr}
 8019414:	0549      	lsls	r1, r1, #21
 8019416:	f7ff ffed 	bl	80193f4 <xflowf>
 801941a:	bd10      	pop	{r4, pc}

0801941c <__math_oflowf>:
 801941c:	21e0      	movs	r1, #224	@ 0xe0
 801941e:	b510      	push	{r4, lr}
 8019420:	05c9      	lsls	r1, r1, #23
 8019422:	f7ff ffe7 	bl	80193f4 <xflowf>
 8019426:	bd10      	pop	{r4, pc}

08019428 <__ieee754_log>:
 8019428:	2380      	movs	r3, #128	@ 0x80
 801942a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801942c:	035b      	lsls	r3, r3, #13
 801942e:	000e      	movs	r6, r1
 8019430:	b08d      	sub	sp, #52	@ 0x34
 8019432:	4299      	cmp	r1, r3
 8019434:	da23      	bge.n	801947e <__ieee754_log+0x56>
 8019436:	004b      	lsls	r3, r1, #1
 8019438:	085b      	lsrs	r3, r3, #1
 801943a:	4303      	orrs	r3, r0
 801943c:	d107      	bne.n	801944e <__ieee754_log+0x26>
 801943e:	2200      	movs	r2, #0
 8019440:	2300      	movs	r3, #0
 8019442:	2000      	movs	r0, #0
 8019444:	49b4      	ldr	r1, [pc, #720]	@ (8019718 <__ieee754_log+0x2f0>)
 8019446:	f7e8 fc33 	bl	8001cb0 <__aeabi_ddiv>
 801944a:	b00d      	add	sp, #52	@ 0x34
 801944c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801944e:	2900      	cmp	r1, #0
 8019450:	da06      	bge.n	8019460 <__ieee754_log+0x38>
 8019452:	0002      	movs	r2, r0
 8019454:	000b      	movs	r3, r1
 8019456:	f7e9 fb37 	bl	8002ac8 <__aeabi_dsub>
 801945a:	2200      	movs	r2, #0
 801945c:	2300      	movs	r3, #0
 801945e:	e7f2      	b.n	8019446 <__ieee754_log+0x1e>
 8019460:	4bae      	ldr	r3, [pc, #696]	@ (801971c <__ieee754_log+0x2f4>)
 8019462:	2200      	movs	r2, #0
 8019464:	f7e9 f868 	bl	8002538 <__aeabi_dmul>
 8019468:	2336      	movs	r3, #54	@ 0x36
 801946a:	000e      	movs	r6, r1
 801946c:	425b      	negs	r3, r3
 801946e:	4aac      	ldr	r2, [pc, #688]	@ (8019720 <__ieee754_log+0x2f8>)
 8019470:	4296      	cmp	r6, r2
 8019472:	dd06      	ble.n	8019482 <__ieee754_log+0x5a>
 8019474:	0002      	movs	r2, r0
 8019476:	000b      	movs	r3, r1
 8019478:	f7e8 f8b6 	bl	80015e8 <__aeabi_dadd>
 801947c:	e7e5      	b.n	801944a <__ieee754_log+0x22>
 801947e:	2300      	movs	r3, #0
 8019480:	e7f5      	b.n	801946e <__ieee754_log+0x46>
 8019482:	4ca8      	ldr	r4, [pc, #672]	@ (8019724 <__ieee754_log+0x2fc>)
 8019484:	1532      	asrs	r2, r6, #20
 8019486:	1912      	adds	r2, r2, r4
 8019488:	0336      	lsls	r6, r6, #12
 801948a:	4ca7      	ldr	r4, [pc, #668]	@ (8019728 <__ieee754_log+0x300>)
 801948c:	18d2      	adds	r2, r2, r3
 801948e:	0b33      	lsrs	r3, r6, #12
 8019490:	9302      	str	r3, [sp, #8]
 8019492:	191b      	adds	r3, r3, r4
 8019494:	2480      	movs	r4, #128	@ 0x80
 8019496:	0364      	lsls	r4, r4, #13
 8019498:	4023      	ands	r3, r4
 801949a:	4ca4      	ldr	r4, [pc, #656]	@ (801972c <__ieee754_log+0x304>)
 801949c:	9d02      	ldr	r5, [sp, #8]
 801949e:	405c      	eors	r4, r3
 80194a0:	151b      	asrs	r3, r3, #20
 80194a2:	189b      	adds	r3, r3, r2
 80194a4:	4325      	orrs	r5, r4
 80194a6:	2200      	movs	r2, #0
 80194a8:	9300      	str	r3, [sp, #0]
 80194aa:	0029      	movs	r1, r5
 80194ac:	4b9f      	ldr	r3, [pc, #636]	@ (801972c <__ieee754_log+0x304>)
 80194ae:	f7e9 fb0b 	bl	8002ac8 <__aeabi_dsub>
 80194b2:	9b02      	ldr	r3, [sp, #8]
 80194b4:	0006      	movs	r6, r0
 80194b6:	3302      	adds	r3, #2
 80194b8:	031b      	lsls	r3, r3, #12
 80194ba:	000f      	movs	r7, r1
 80194bc:	2200      	movs	r2, #0
 80194be:	0b1b      	lsrs	r3, r3, #12
 80194c0:	2b02      	cmp	r3, #2
 80194c2:	dc64      	bgt.n	801958e <__ieee754_log+0x166>
 80194c4:	2300      	movs	r3, #0
 80194c6:	f7e6 ffc1 	bl	800044c <__aeabi_dcmpeq>
 80194ca:	2800      	cmp	r0, #0
 80194cc:	d019      	beq.n	8019502 <__ieee754_log+0xda>
 80194ce:	9b00      	ldr	r3, [sp, #0]
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d100      	bne.n	80194d6 <__ieee754_log+0xae>
 80194d4:	e11c      	b.n	8019710 <__ieee754_log+0x2e8>
 80194d6:	0018      	movs	r0, r3
 80194d8:	f7e9 fef0 	bl	80032bc <__aeabi_i2d>
 80194dc:	4a94      	ldr	r2, [pc, #592]	@ (8019730 <__ieee754_log+0x308>)
 80194de:	4b95      	ldr	r3, [pc, #596]	@ (8019734 <__ieee754_log+0x30c>)
 80194e0:	0004      	movs	r4, r0
 80194e2:	000d      	movs	r5, r1
 80194e4:	f7e9 f828 	bl	8002538 <__aeabi_dmul>
 80194e8:	4a93      	ldr	r2, [pc, #588]	@ (8019738 <__ieee754_log+0x310>)
 80194ea:	0006      	movs	r6, r0
 80194ec:	000f      	movs	r7, r1
 80194ee:	4b93      	ldr	r3, [pc, #588]	@ (801973c <__ieee754_log+0x314>)
 80194f0:	0020      	movs	r0, r4
 80194f2:	0029      	movs	r1, r5
 80194f4:	f7e9 f820 	bl	8002538 <__aeabi_dmul>
 80194f8:	0002      	movs	r2, r0
 80194fa:	000b      	movs	r3, r1
 80194fc:	0030      	movs	r0, r6
 80194fe:	0039      	movs	r1, r7
 8019500:	e7ba      	b.n	8019478 <__ieee754_log+0x50>
 8019502:	4a8f      	ldr	r2, [pc, #572]	@ (8019740 <__ieee754_log+0x318>)
 8019504:	4b8f      	ldr	r3, [pc, #572]	@ (8019744 <__ieee754_log+0x31c>)
 8019506:	0030      	movs	r0, r6
 8019508:	0039      	movs	r1, r7
 801950a:	f7e9 f815 	bl	8002538 <__aeabi_dmul>
 801950e:	0002      	movs	r2, r0
 8019510:	000b      	movs	r3, r1
 8019512:	2000      	movs	r0, #0
 8019514:	498c      	ldr	r1, [pc, #560]	@ (8019748 <__ieee754_log+0x320>)
 8019516:	f7e9 fad7 	bl	8002ac8 <__aeabi_dsub>
 801951a:	0032      	movs	r2, r6
 801951c:	0004      	movs	r4, r0
 801951e:	000d      	movs	r5, r1
 8019520:	003b      	movs	r3, r7
 8019522:	0030      	movs	r0, r6
 8019524:	0039      	movs	r1, r7
 8019526:	f7e9 f807 	bl	8002538 <__aeabi_dmul>
 801952a:	000b      	movs	r3, r1
 801952c:	0002      	movs	r2, r0
 801952e:	0029      	movs	r1, r5
 8019530:	0020      	movs	r0, r4
 8019532:	f7e9 f801 	bl	8002538 <__aeabi_dmul>
 8019536:	9b00      	ldr	r3, [sp, #0]
 8019538:	9002      	str	r0, [sp, #8]
 801953a:	9103      	str	r1, [sp, #12]
 801953c:	2b00      	cmp	r3, #0
 801953e:	d106      	bne.n	801954e <__ieee754_log+0x126>
 8019540:	0002      	movs	r2, r0
 8019542:	000b      	movs	r3, r1
 8019544:	0030      	movs	r0, r6
 8019546:	0039      	movs	r1, r7
 8019548:	f7e9 fabe 	bl	8002ac8 <__aeabi_dsub>
 801954c:	e77d      	b.n	801944a <__ieee754_log+0x22>
 801954e:	9800      	ldr	r0, [sp, #0]
 8019550:	f7e9 feb4 	bl	80032bc <__aeabi_i2d>
 8019554:	4a76      	ldr	r2, [pc, #472]	@ (8019730 <__ieee754_log+0x308>)
 8019556:	4b77      	ldr	r3, [pc, #476]	@ (8019734 <__ieee754_log+0x30c>)
 8019558:	0004      	movs	r4, r0
 801955a:	000d      	movs	r5, r1
 801955c:	f7e8 ffec 	bl	8002538 <__aeabi_dmul>
 8019560:	4a75      	ldr	r2, [pc, #468]	@ (8019738 <__ieee754_log+0x310>)
 8019562:	9000      	str	r0, [sp, #0]
 8019564:	9101      	str	r1, [sp, #4]
 8019566:	4b75      	ldr	r3, [pc, #468]	@ (801973c <__ieee754_log+0x314>)
 8019568:	0020      	movs	r0, r4
 801956a:	0029      	movs	r1, r5
 801956c:	f7e8 ffe4 	bl	8002538 <__aeabi_dmul>
 8019570:	0002      	movs	r2, r0
 8019572:	000b      	movs	r3, r1
 8019574:	9802      	ldr	r0, [sp, #8]
 8019576:	9903      	ldr	r1, [sp, #12]
 8019578:	f7e9 faa6 	bl	8002ac8 <__aeabi_dsub>
 801957c:	0032      	movs	r2, r6
 801957e:	003b      	movs	r3, r7
 8019580:	f7e9 faa2 	bl	8002ac8 <__aeabi_dsub>
 8019584:	0002      	movs	r2, r0
 8019586:	000b      	movs	r3, r1
 8019588:	9800      	ldr	r0, [sp, #0]
 801958a:	9901      	ldr	r1, [sp, #4]
 801958c:	e7dc      	b.n	8019548 <__ieee754_log+0x120>
 801958e:	2380      	movs	r3, #128	@ 0x80
 8019590:	05db      	lsls	r3, r3, #23
 8019592:	f7e8 f829 	bl	80015e8 <__aeabi_dadd>
 8019596:	0002      	movs	r2, r0
 8019598:	000b      	movs	r3, r1
 801959a:	0030      	movs	r0, r6
 801959c:	0039      	movs	r1, r7
 801959e:	f7e8 fb87 	bl	8001cb0 <__aeabi_ddiv>
 80195a2:	9004      	str	r0, [sp, #16]
 80195a4:	9105      	str	r1, [sp, #20]
 80195a6:	9800      	ldr	r0, [sp, #0]
 80195a8:	f7e9 fe88 	bl	80032bc <__aeabi_i2d>
 80195ac:	9a04      	ldr	r2, [sp, #16]
 80195ae:	9b05      	ldr	r3, [sp, #20]
 80195b0:	9006      	str	r0, [sp, #24]
 80195b2:	9107      	str	r1, [sp, #28]
 80195b4:	0010      	movs	r0, r2
 80195b6:	0019      	movs	r1, r3
 80195b8:	f7e8 ffbe 	bl	8002538 <__aeabi_dmul>
 80195bc:	4a63      	ldr	r2, [pc, #396]	@ (801974c <__ieee754_log+0x324>)
 80195be:	9b02      	ldr	r3, [sp, #8]
 80195c0:	4694      	mov	ip, r2
 80195c2:	4463      	add	r3, ip
 80195c4:	0002      	movs	r2, r0
 80195c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80195c8:	000b      	movs	r3, r1
 80195ca:	9008      	str	r0, [sp, #32]
 80195cc:	9109      	str	r1, [sp, #36]	@ 0x24
 80195ce:	f7e8 ffb3 	bl	8002538 <__aeabi_dmul>
 80195d2:	0004      	movs	r4, r0
 80195d4:	000d      	movs	r5, r1
 80195d6:	4a5e      	ldr	r2, [pc, #376]	@ (8019750 <__ieee754_log+0x328>)
 80195d8:	4b5e      	ldr	r3, [pc, #376]	@ (8019754 <__ieee754_log+0x32c>)
 80195da:	f7e8 ffad 	bl	8002538 <__aeabi_dmul>
 80195de:	4a5e      	ldr	r2, [pc, #376]	@ (8019758 <__ieee754_log+0x330>)
 80195e0:	4b5e      	ldr	r3, [pc, #376]	@ (801975c <__ieee754_log+0x334>)
 80195e2:	f7e8 f801 	bl	80015e8 <__aeabi_dadd>
 80195e6:	0022      	movs	r2, r4
 80195e8:	002b      	movs	r3, r5
 80195ea:	f7e8 ffa5 	bl	8002538 <__aeabi_dmul>
 80195ee:	4a5c      	ldr	r2, [pc, #368]	@ (8019760 <__ieee754_log+0x338>)
 80195f0:	4b5c      	ldr	r3, [pc, #368]	@ (8019764 <__ieee754_log+0x33c>)
 80195f2:	f7e7 fff9 	bl	80015e8 <__aeabi_dadd>
 80195f6:	0022      	movs	r2, r4
 80195f8:	002b      	movs	r3, r5
 80195fa:	f7e8 ff9d 	bl	8002538 <__aeabi_dmul>
 80195fe:	4a5a      	ldr	r2, [pc, #360]	@ (8019768 <__ieee754_log+0x340>)
 8019600:	4b5a      	ldr	r3, [pc, #360]	@ (801976c <__ieee754_log+0x344>)
 8019602:	f7e7 fff1 	bl	80015e8 <__aeabi_dadd>
 8019606:	9a08      	ldr	r2, [sp, #32]
 8019608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801960a:	f7e8 ff95 	bl	8002538 <__aeabi_dmul>
 801960e:	4a58      	ldr	r2, [pc, #352]	@ (8019770 <__ieee754_log+0x348>)
 8019610:	9008      	str	r0, [sp, #32]
 8019612:	9109      	str	r1, [sp, #36]	@ 0x24
 8019614:	4b57      	ldr	r3, [pc, #348]	@ (8019774 <__ieee754_log+0x34c>)
 8019616:	0020      	movs	r0, r4
 8019618:	0029      	movs	r1, r5
 801961a:	f7e8 ff8d 	bl	8002538 <__aeabi_dmul>
 801961e:	4a56      	ldr	r2, [pc, #344]	@ (8019778 <__ieee754_log+0x350>)
 8019620:	4b56      	ldr	r3, [pc, #344]	@ (801977c <__ieee754_log+0x354>)
 8019622:	f7e7 ffe1 	bl	80015e8 <__aeabi_dadd>
 8019626:	0022      	movs	r2, r4
 8019628:	002b      	movs	r3, r5
 801962a:	f7e8 ff85 	bl	8002538 <__aeabi_dmul>
 801962e:	4a54      	ldr	r2, [pc, #336]	@ (8019780 <__ieee754_log+0x358>)
 8019630:	4b54      	ldr	r3, [pc, #336]	@ (8019784 <__ieee754_log+0x35c>)
 8019632:	f7e7 ffd9 	bl	80015e8 <__aeabi_dadd>
 8019636:	0022      	movs	r2, r4
 8019638:	002b      	movs	r3, r5
 801963a:	f7e8 ff7d 	bl	8002538 <__aeabi_dmul>
 801963e:	0002      	movs	r2, r0
 8019640:	000b      	movs	r3, r1
 8019642:	9808      	ldr	r0, [sp, #32]
 8019644:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019646:	f7e7 ffcf 	bl	80015e8 <__aeabi_dadd>
 801964a:	9a02      	ldr	r2, [sp, #8]
 801964c:	4b4e      	ldr	r3, [pc, #312]	@ (8019788 <__ieee754_log+0x360>)
 801964e:	0004      	movs	r4, r0
 8019650:	1a9b      	subs	r3, r3, r2
 8019652:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019654:	000d      	movs	r5, r1
 8019656:	4313      	orrs	r3, r2
 8019658:	2b00      	cmp	r3, #0
 801965a:	dd34      	ble.n	80196c6 <__ieee754_log+0x29e>
 801965c:	2200      	movs	r2, #0
 801965e:	4b3a      	ldr	r3, [pc, #232]	@ (8019748 <__ieee754_log+0x320>)
 8019660:	0030      	movs	r0, r6
 8019662:	0039      	movs	r1, r7
 8019664:	f7e8 ff68 	bl	8002538 <__aeabi_dmul>
 8019668:	0032      	movs	r2, r6
 801966a:	003b      	movs	r3, r7
 801966c:	f7e8 ff64 	bl	8002538 <__aeabi_dmul>
 8019670:	0002      	movs	r2, r0
 8019672:	000b      	movs	r3, r1
 8019674:	9002      	str	r0, [sp, #8]
 8019676:	9103      	str	r1, [sp, #12]
 8019678:	0020      	movs	r0, r4
 801967a:	0029      	movs	r1, r5
 801967c:	f7e7 ffb4 	bl	80015e8 <__aeabi_dadd>
 8019680:	9a04      	ldr	r2, [sp, #16]
 8019682:	9b05      	ldr	r3, [sp, #20]
 8019684:	f7e8 ff58 	bl	8002538 <__aeabi_dmul>
 8019688:	9b00      	ldr	r3, [sp, #0]
 801968a:	0004      	movs	r4, r0
 801968c:	000d      	movs	r5, r1
 801968e:	2b00      	cmp	r3, #0
 8019690:	d106      	bne.n	80196a0 <__ieee754_log+0x278>
 8019692:	0002      	movs	r2, r0
 8019694:	000b      	movs	r3, r1
 8019696:	9802      	ldr	r0, [sp, #8]
 8019698:	9903      	ldr	r1, [sp, #12]
 801969a:	f7e9 fa15 	bl	8002ac8 <__aeabi_dsub>
 801969e:	e74f      	b.n	8019540 <__ieee754_log+0x118>
 80196a0:	4a23      	ldr	r2, [pc, #140]	@ (8019730 <__ieee754_log+0x308>)
 80196a2:	4b24      	ldr	r3, [pc, #144]	@ (8019734 <__ieee754_log+0x30c>)
 80196a4:	9806      	ldr	r0, [sp, #24]
 80196a6:	9907      	ldr	r1, [sp, #28]
 80196a8:	f7e8 ff46 	bl	8002538 <__aeabi_dmul>
 80196ac:	4a22      	ldr	r2, [pc, #136]	@ (8019738 <__ieee754_log+0x310>)
 80196ae:	9000      	str	r0, [sp, #0]
 80196b0:	9101      	str	r1, [sp, #4]
 80196b2:	9806      	ldr	r0, [sp, #24]
 80196b4:	9907      	ldr	r1, [sp, #28]
 80196b6:	4b21      	ldr	r3, [pc, #132]	@ (801973c <__ieee754_log+0x314>)
 80196b8:	f7e8 ff3e 	bl	8002538 <__aeabi_dmul>
 80196bc:	0022      	movs	r2, r4
 80196be:	002b      	movs	r3, r5
 80196c0:	f7e7 ff92 	bl	80015e8 <__aeabi_dadd>
 80196c4:	e754      	b.n	8019570 <__ieee754_log+0x148>
 80196c6:	0002      	movs	r2, r0
 80196c8:	000b      	movs	r3, r1
 80196ca:	0030      	movs	r0, r6
 80196cc:	0039      	movs	r1, r7
 80196ce:	f7e9 f9fb 	bl	8002ac8 <__aeabi_dsub>
 80196d2:	9a04      	ldr	r2, [sp, #16]
 80196d4:	9b05      	ldr	r3, [sp, #20]
 80196d6:	f7e8 ff2f 	bl	8002538 <__aeabi_dmul>
 80196da:	9b00      	ldr	r3, [sp, #0]
 80196dc:	0004      	movs	r4, r0
 80196de:	000d      	movs	r5, r1
 80196e0:	2b00      	cmp	r3, #0
 80196e2:	d102      	bne.n	80196ea <__ieee754_log+0x2c2>
 80196e4:	0002      	movs	r2, r0
 80196e6:	000b      	movs	r3, r1
 80196e8:	e72c      	b.n	8019544 <__ieee754_log+0x11c>
 80196ea:	4a11      	ldr	r2, [pc, #68]	@ (8019730 <__ieee754_log+0x308>)
 80196ec:	4b11      	ldr	r3, [pc, #68]	@ (8019734 <__ieee754_log+0x30c>)
 80196ee:	9806      	ldr	r0, [sp, #24]
 80196f0:	9907      	ldr	r1, [sp, #28]
 80196f2:	f7e8 ff21 	bl	8002538 <__aeabi_dmul>
 80196f6:	4a10      	ldr	r2, [pc, #64]	@ (8019738 <__ieee754_log+0x310>)
 80196f8:	9000      	str	r0, [sp, #0]
 80196fa:	9101      	str	r1, [sp, #4]
 80196fc:	9806      	ldr	r0, [sp, #24]
 80196fe:	9907      	ldr	r1, [sp, #28]
 8019700:	4b0e      	ldr	r3, [pc, #56]	@ (801973c <__ieee754_log+0x314>)
 8019702:	f7e8 ff19 	bl	8002538 <__aeabi_dmul>
 8019706:	0002      	movs	r2, r0
 8019708:	000b      	movs	r3, r1
 801970a:	0020      	movs	r0, r4
 801970c:	0029      	movs	r1, r5
 801970e:	e733      	b.n	8019578 <__ieee754_log+0x150>
 8019710:	2000      	movs	r0, #0
 8019712:	2100      	movs	r1, #0
 8019714:	e699      	b.n	801944a <__ieee754_log+0x22>
 8019716:	46c0      	nop			@ (mov r8, r8)
 8019718:	c3500000 	.word	0xc3500000
 801971c:	43500000 	.word	0x43500000
 8019720:	7fefffff 	.word	0x7fefffff
 8019724:	fffffc01 	.word	0xfffffc01
 8019728:	00095f64 	.word	0x00095f64
 801972c:	3ff00000 	.word	0x3ff00000
 8019730:	fee00000 	.word	0xfee00000
 8019734:	3fe62e42 	.word	0x3fe62e42
 8019738:	35793c76 	.word	0x35793c76
 801973c:	3dea39ef 	.word	0x3dea39ef
 8019740:	55555555 	.word	0x55555555
 8019744:	3fd55555 	.word	0x3fd55555
 8019748:	3fe00000 	.word	0x3fe00000
 801974c:	fff9eb86 	.word	0xfff9eb86
 8019750:	df3e5244 	.word	0xdf3e5244
 8019754:	3fc2f112 	.word	0x3fc2f112
 8019758:	96cb03de 	.word	0x96cb03de
 801975c:	3fc74664 	.word	0x3fc74664
 8019760:	94229359 	.word	0x94229359
 8019764:	3fd24924 	.word	0x3fd24924
 8019768:	55555593 	.word	0x55555593
 801976c:	3fe55555 	.word	0x3fe55555
 8019770:	d078c69f 	.word	0xd078c69f
 8019774:	3fc39a09 	.word	0x3fc39a09
 8019778:	1d8e78af 	.word	0x1d8e78af
 801977c:	3fcc71c5 	.word	0x3fcc71c5
 8019780:	9997fa04 	.word	0x9997fa04
 8019784:	3fd99999 	.word	0x3fd99999
 8019788:	0006b851 	.word	0x0006b851

0801978c <_init>:
 801978c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801978e:	46c0      	nop			@ (mov r8, r8)
 8019790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019792:	bc08      	pop	{r3}
 8019794:	469e      	mov	lr, r3
 8019796:	4770      	bx	lr

08019798 <_fini>:
 8019798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801979a:	46c0      	nop			@ (mov r8, r8)
 801979c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801979e:	bc08      	pop	{r3}
 80197a0:	469e      	mov	lr, r3
 80197a2:	4770      	bx	lr
