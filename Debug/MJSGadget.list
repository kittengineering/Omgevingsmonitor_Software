
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b1f8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001288  0801b2b8  0801b2b8  0001c2b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c540  0801c540  0001e3c8  2**0
                  CONTENTS
  4 .ARM          00000008  0801c540  0801c540  0001d540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c548  0801c548  0001e3c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c548  0801c548  0001d548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c54c  0801c54c  0001d54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003c8  20000000  0801c550  0001e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003d58  200003c8  0801c918  0001e3c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20004120  0801c918  0001f120  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001e3c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c70c  00000000  00000000  0001e3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000820f  00000000  00000000  0004aafc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002558  00000000  00000000  00052d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c5c  00000000  00000000  00055268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021244  00000000  00000000  00056ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003b115  00000000  00000000  00078108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d6c2  00000000  00000000  000b321d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001508df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009970  00000000  00000000  00150924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0015a294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200003c8 	.word	0x200003c8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801b2a0 	.word	0x0801b2a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200003cc 	.word	0x200003cc
 8000104:	0801b2a0 	.word	0x0801b2a0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f809 	bl	8002454 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff49 	bl	80022e4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fffb 	bl	8002454 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fff1 	bl	8002454 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff73 	bl	800236c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff69 	bl	800236c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fca5 	bl	8000e00 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc25 	bl	8000d10 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc97 	bl	8000e00 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc8d 	bl	8000e00 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc33 	bl	8000d60 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc29 	bl	8000d60 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f86a 	bl	8000624 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__aeabi_f2uiz>:
 80005b8:	219e      	movs	r1, #158	@ 0x9e
 80005ba:	b510      	push	{r4, lr}
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	1c04      	adds	r4, r0, #0
 80005c0:	f7ff ffa2 	bl	8000508 <__aeabi_fcmpge>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d103      	bne.n	80005d0 <__aeabi_f2uiz+0x18>
 80005c8:	1c20      	adds	r0, r4, #0
 80005ca:	f000 ff5f 	bl	800148c <__aeabi_f2iz>
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	219e      	movs	r1, #158	@ 0x9e
 80005d2:	1c20      	adds	r0, r4, #0
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	f000 fd9f 	bl	8001118 <__aeabi_fsub>
 80005da:	f000 ff57 	bl	800148c <__aeabi_f2iz>
 80005de:	2380      	movs	r3, #128	@ 0x80
 80005e0:	061b      	lsls	r3, r3, #24
 80005e2:	469c      	mov	ip, r3
 80005e4:	4460      	add	r0, ip
 80005e6:	e7f2      	b.n	80005ce <__aeabi_f2uiz+0x16>

080005e8 <__aeabi_d2uiz>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	2200      	movs	r2, #0
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <__aeabi_d2uiz+0x38>)
 80005ee:	0004      	movs	r4, r0
 80005f0:	000d      	movs	r5, r1
 80005f2:	f7ff ff4f 	bl	8000494 <__aeabi_dcmpge>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d104      	bne.n	8000604 <__aeabi_d2uiz+0x1c>
 80005fa:	0020      	movs	r0, r4
 80005fc:	0029      	movs	r1, r5
 80005fe:	f002 fe21 	bl	8003244 <__aeabi_d2iz>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <__aeabi_d2uiz+0x38>)
 8000606:	2200      	movs	r2, #0
 8000608:	0020      	movs	r0, r4
 800060a:	0029      	movs	r1, r5
 800060c:	f002 fa5c 	bl	8002ac8 <__aeabi_dsub>
 8000610:	f002 fe18 	bl	8003244 <__aeabi_d2iz>
 8000614:	2380      	movs	r3, #128	@ 0x80
 8000616:	061b      	lsls	r3, r3, #24
 8000618:	469c      	mov	ip, r3
 800061a:	4460      	add	r0, ip
 800061c:	e7f1      	b.n	8000602 <__aeabi_d2uiz+0x1a>
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	41e00000 	.word	0x41e00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 ff76 	bl	8003534 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 ff71 	bl	8003534 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fadd>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	46ce      	mov	lr, r9
 80007c0:	4647      	mov	r7, r8
 80007c2:	0243      	lsls	r3, r0, #9
 80007c4:	0a5a      	lsrs	r2, r3, #9
 80007c6:	024e      	lsls	r6, r1, #9
 80007c8:	0045      	lsls	r5, r0, #1
 80007ca:	0fc4      	lsrs	r4, r0, #31
 80007cc:	0048      	lsls	r0, r1, #1
 80007ce:	4691      	mov	r9, r2
 80007d0:	0e2d      	lsrs	r5, r5, #24
 80007d2:	0a72      	lsrs	r2, r6, #9
 80007d4:	0e00      	lsrs	r0, r0, #24
 80007d6:	4694      	mov	ip, r2
 80007d8:	b580      	push	{r7, lr}
 80007da:	099b      	lsrs	r3, r3, #6
 80007dc:	0fc9      	lsrs	r1, r1, #31
 80007de:	09b6      	lsrs	r6, r6, #6
 80007e0:	1a2a      	subs	r2, r5, r0
 80007e2:	428c      	cmp	r4, r1
 80007e4:	d021      	beq.n	800082a <__aeabi_fadd+0x6e>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	dd0d      	ble.n	8000806 <__aeabi_fadd+0x4a>
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d12d      	bne.n	800084a <__aeabi_fadd+0x8e>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x38>
 80007f2:	e08d      	b.n	8000910 <__aeabi_fadd+0x154>
 80007f4:	1e51      	subs	r1, r2, #1
 80007f6:	2a01      	cmp	r2, #1
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x40>
 80007fa:	e11d      	b.n	8000a38 <__aeabi_fadd+0x27c>
 80007fc:	2aff      	cmp	r2, #255	@ 0xff
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x46>
 8000800:	e0ab      	b.n	800095a <__aeabi_fadd+0x19e>
 8000802:	000a      	movs	r2, r1
 8000804:	e027      	b.n	8000856 <__aeabi_fadd+0x9a>
 8000806:	2a00      	cmp	r2, #0
 8000808:	d04d      	beq.n	80008a6 <__aeabi_fadd+0xea>
 800080a:	1b42      	subs	r2, r0, r5
 800080c:	2d00      	cmp	r5, #0
 800080e:	d000      	beq.n	8000812 <__aeabi_fadd+0x56>
 8000810:	e0cc      	b.n	80009ac <__aeabi_fadd+0x1f0>
 8000812:	2b00      	cmp	r3, #0
 8000814:	d100      	bne.n	8000818 <__aeabi_fadd+0x5c>
 8000816:	e079      	b.n	800090c <__aeabi_fadd+0x150>
 8000818:	1e54      	subs	r4, r2, #1
 800081a:	2a01      	cmp	r2, #1
 800081c:	d100      	bne.n	8000820 <__aeabi_fadd+0x64>
 800081e:	e128      	b.n	8000a72 <__aeabi_fadd+0x2b6>
 8000820:	2aff      	cmp	r2, #255	@ 0xff
 8000822:	d100      	bne.n	8000826 <__aeabi_fadd+0x6a>
 8000824:	e097      	b.n	8000956 <__aeabi_fadd+0x19a>
 8000826:	0022      	movs	r2, r4
 8000828:	e0c5      	b.n	80009b6 <__aeabi_fadd+0x1fa>
 800082a:	2a00      	cmp	r2, #0
 800082c:	dc00      	bgt.n	8000830 <__aeabi_fadd+0x74>
 800082e:	e096      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000830:	2800      	cmp	r0, #0
 8000832:	d04f      	beq.n	80008d4 <__aeabi_fadd+0x118>
 8000834:	2dff      	cmp	r5, #255	@ 0xff
 8000836:	d100      	bne.n	800083a <__aeabi_fadd+0x7e>
 8000838:	e08f      	b.n	800095a <__aeabi_fadd+0x19e>
 800083a:	2180      	movs	r1, #128	@ 0x80
 800083c:	04c9      	lsls	r1, r1, #19
 800083e:	430e      	orrs	r6, r1
 8000840:	2a1b      	cmp	r2, #27
 8000842:	dd51      	ble.n	80008e8 <__aeabi_fadd+0x12c>
 8000844:	002a      	movs	r2, r5
 8000846:	3301      	adds	r3, #1
 8000848:	e018      	b.n	800087c <__aeabi_fadd+0xc0>
 800084a:	2dff      	cmp	r5, #255	@ 0xff
 800084c:	d100      	bne.n	8000850 <__aeabi_fadd+0x94>
 800084e:	e084      	b.n	800095a <__aeabi_fadd+0x19e>
 8000850:	2180      	movs	r1, #128	@ 0x80
 8000852:	04c9      	lsls	r1, r1, #19
 8000854:	430e      	orrs	r6, r1
 8000856:	2101      	movs	r1, #1
 8000858:	2a1b      	cmp	r2, #27
 800085a:	dc08      	bgt.n	800086e <__aeabi_fadd+0xb2>
 800085c:	0031      	movs	r1, r6
 800085e:	2020      	movs	r0, #32
 8000860:	40d1      	lsrs	r1, r2
 8000862:	1a82      	subs	r2, r0, r2
 8000864:	4096      	lsls	r6, r2
 8000866:	0032      	movs	r2, r6
 8000868:	1e50      	subs	r0, r2, #1
 800086a:	4182      	sbcs	r2, r0
 800086c:	4311      	orrs	r1, r2
 800086e:	1a5b      	subs	r3, r3, r1
 8000870:	015a      	lsls	r2, r3, #5
 8000872:	d459      	bmi.n	8000928 <__aeabi_fadd+0x16c>
 8000874:	2107      	movs	r1, #7
 8000876:	002a      	movs	r2, r5
 8000878:	4019      	ands	r1, r3
 800087a:	d049      	beq.n	8000910 <__aeabi_fadd+0x154>
 800087c:	210f      	movs	r1, #15
 800087e:	4019      	ands	r1, r3
 8000880:	2904      	cmp	r1, #4
 8000882:	d000      	beq.n	8000886 <__aeabi_fadd+0xca>
 8000884:	3304      	adds	r3, #4
 8000886:	0159      	lsls	r1, r3, #5
 8000888:	d542      	bpl.n	8000910 <__aeabi_fadd+0x154>
 800088a:	1c50      	adds	r0, r2, #1
 800088c:	2afe      	cmp	r2, #254	@ 0xfe
 800088e:	d03a      	beq.n	8000906 <__aeabi_fadd+0x14a>
 8000890:	019b      	lsls	r3, r3, #6
 8000892:	b2c0      	uxtb	r0, r0
 8000894:	0a5b      	lsrs	r3, r3, #9
 8000896:	05c0      	lsls	r0, r0, #23
 8000898:	4318      	orrs	r0, r3
 800089a:	07e4      	lsls	r4, r4, #31
 800089c:	4320      	orrs	r0, r4
 800089e:	bcc0      	pop	{r6, r7}
 80008a0:	46b9      	mov	r9, r7
 80008a2:	46b0      	mov	r8, r6
 80008a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a6:	20fe      	movs	r0, #254	@ 0xfe
 80008a8:	4680      	mov	r8, r0
 80008aa:	1c6f      	adds	r7, r5, #1
 80008ac:	0038      	movs	r0, r7
 80008ae:	4647      	mov	r7, r8
 80008b0:	4207      	tst	r7, r0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_fadd+0xfa>
 80008b4:	e08e      	b.n	80009d4 <__aeabi_fadd+0x218>
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d000      	beq.n	80008bc <__aeabi_fadd+0x100>
 80008ba:	e0b4      	b.n	8000a26 <__aeabi_fadd+0x26a>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fadd+0x106>
 80008c0:	e0db      	b.n	8000a7a <__aeabi_fadd+0x2be>
 80008c2:	2e00      	cmp	r6, #0
 80008c4:	d06c      	beq.n	80009a0 <__aeabi_fadd+0x1e4>
 80008c6:	1b98      	subs	r0, r3, r6
 80008c8:	0145      	lsls	r5, r0, #5
 80008ca:	d400      	bmi.n	80008ce <__aeabi_fadd+0x112>
 80008cc:	e0f7      	b.n	8000abe <__aeabi_fadd+0x302>
 80008ce:	000c      	movs	r4, r1
 80008d0:	1af3      	subs	r3, r6, r3
 80008d2:	e03d      	b.n	8000950 <__aeabi_fadd+0x194>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d01b      	beq.n	8000910 <__aeabi_fadd+0x154>
 80008d8:	1e51      	subs	r1, r2, #1
 80008da:	2a01      	cmp	r2, #1
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fadd+0x124>
 80008de:	e082      	b.n	80009e6 <__aeabi_fadd+0x22a>
 80008e0:	2aff      	cmp	r2, #255	@ 0xff
 80008e2:	d03a      	beq.n	800095a <__aeabi_fadd+0x19e>
 80008e4:	000a      	movs	r2, r1
 80008e6:	e7ab      	b.n	8000840 <__aeabi_fadd+0x84>
 80008e8:	0031      	movs	r1, r6
 80008ea:	2020      	movs	r0, #32
 80008ec:	40d1      	lsrs	r1, r2
 80008ee:	1a82      	subs	r2, r0, r2
 80008f0:	4096      	lsls	r6, r2
 80008f2:	0032      	movs	r2, r6
 80008f4:	1e50      	subs	r0, r2, #1
 80008f6:	4182      	sbcs	r2, r0
 80008f8:	430a      	orrs	r2, r1
 80008fa:	189b      	adds	r3, r3, r2
 80008fc:	015a      	lsls	r2, r3, #5
 80008fe:	d5b9      	bpl.n	8000874 <__aeabi_fadd+0xb8>
 8000900:	1c6a      	adds	r2, r5, #1
 8000902:	2dfe      	cmp	r5, #254	@ 0xfe
 8000904:	d175      	bne.n	80009f2 <__aeabi_fadd+0x236>
 8000906:	20ff      	movs	r0, #255	@ 0xff
 8000908:	2300      	movs	r3, #0
 800090a:	e7c4      	b.n	8000896 <__aeabi_fadd+0xda>
 800090c:	000c      	movs	r4, r1
 800090e:	0033      	movs	r3, r6
 8000910:	08db      	lsrs	r3, r3, #3
 8000912:	2aff      	cmp	r2, #255	@ 0xff
 8000914:	d146      	bne.n	80009a4 <__aeabi_fadd+0x1e8>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f5      	beq.n	8000906 <__aeabi_fadd+0x14a>
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	4313      	orrs	r3, r2
 8000920:	025b      	lsls	r3, r3, #9
 8000922:	20ff      	movs	r0, #255	@ 0xff
 8000924:	0a5b      	lsrs	r3, r3, #9
 8000926:	e7b6      	b.n	8000896 <__aeabi_fadd+0xda>
 8000928:	019f      	lsls	r7, r3, #6
 800092a:	09bf      	lsrs	r7, r7, #6
 800092c:	0038      	movs	r0, r7
 800092e:	f002 fde3 	bl	80034f8 <__clzsi2>
 8000932:	3805      	subs	r0, #5
 8000934:	4087      	lsls	r7, r0
 8000936:	4285      	cmp	r5, r0
 8000938:	dc24      	bgt.n	8000984 <__aeabi_fadd+0x1c8>
 800093a:	003b      	movs	r3, r7
 800093c:	2120      	movs	r1, #32
 800093e:	1b42      	subs	r2, r0, r5
 8000940:	3201      	adds	r2, #1
 8000942:	40d3      	lsrs	r3, r2
 8000944:	1a8a      	subs	r2, r1, r2
 8000946:	4097      	lsls	r7, r2
 8000948:	1e7a      	subs	r2, r7, #1
 800094a:	4197      	sbcs	r7, r2
 800094c:	2200      	movs	r2, #0
 800094e:	433b      	orrs	r3, r7
 8000950:	0759      	lsls	r1, r3, #29
 8000952:	d193      	bne.n	800087c <__aeabi_fadd+0xc0>
 8000954:	e797      	b.n	8000886 <__aeabi_fadd+0xca>
 8000956:	000c      	movs	r4, r1
 8000958:	0033      	movs	r3, r6
 800095a:	08db      	lsrs	r3, r3, #3
 800095c:	e7db      	b.n	8000916 <__aeabi_fadd+0x15a>
 800095e:	2a00      	cmp	r2, #0
 8000960:	d014      	beq.n	800098c <__aeabi_fadd+0x1d0>
 8000962:	1b42      	subs	r2, r0, r5
 8000964:	2d00      	cmp	r5, #0
 8000966:	d14b      	bne.n	8000a00 <__aeabi_fadd+0x244>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0d0      	beq.n	800090e <__aeabi_fadd+0x152>
 800096c:	1e51      	subs	r1, r2, #1
 800096e:	2a01      	cmp	r2, #1
 8000970:	d100      	bne.n	8000974 <__aeabi_fadd+0x1b8>
 8000972:	e09e      	b.n	8000ab2 <__aeabi_fadd+0x2f6>
 8000974:	2aff      	cmp	r2, #255	@ 0xff
 8000976:	d0ef      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000978:	000a      	movs	r2, r1
 800097a:	2a1b      	cmp	r2, #27
 800097c:	dd5f      	ble.n	8000a3e <__aeabi_fadd+0x282>
 800097e:	0002      	movs	r2, r0
 8000980:	1c73      	adds	r3, r6, #1
 8000982:	e77b      	b.n	800087c <__aeabi_fadd+0xc0>
 8000984:	4b50      	ldr	r3, [pc, #320]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000986:	1a2a      	subs	r2, r5, r0
 8000988:	403b      	ands	r3, r7
 800098a:	e7e1      	b.n	8000950 <__aeabi_fadd+0x194>
 800098c:	21fe      	movs	r1, #254	@ 0xfe
 800098e:	1c6a      	adds	r2, r5, #1
 8000990:	4211      	tst	r1, r2
 8000992:	d13b      	bne.n	8000a0c <__aeabi_fadd+0x250>
 8000994:	2d00      	cmp	r5, #0
 8000996:	d15d      	bne.n	8000a54 <__aeabi_fadd+0x298>
 8000998:	2b00      	cmp	r3, #0
 800099a:	d07f      	beq.n	8000a9c <__aeabi_fadd+0x2e0>
 800099c:	2e00      	cmp	r6, #0
 800099e:	d17f      	bne.n	8000aa0 <__aeabi_fadd+0x2e4>
 80009a0:	2200      	movs	r2, #0
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	025b      	lsls	r3, r3, #9
 80009a6:	0a5b      	lsrs	r3, r3, #9
 80009a8:	b2d0      	uxtb	r0, r2
 80009aa:	e774      	b.n	8000896 <__aeabi_fadd+0xda>
 80009ac:	28ff      	cmp	r0, #255	@ 0xff
 80009ae:	d0d2      	beq.n	8000956 <__aeabi_fadd+0x19a>
 80009b0:	2480      	movs	r4, #128	@ 0x80
 80009b2:	04e4      	lsls	r4, r4, #19
 80009b4:	4323      	orrs	r3, r4
 80009b6:	2401      	movs	r4, #1
 80009b8:	2a1b      	cmp	r2, #27
 80009ba:	dc07      	bgt.n	80009cc <__aeabi_fadd+0x210>
 80009bc:	001c      	movs	r4, r3
 80009be:	2520      	movs	r5, #32
 80009c0:	40d4      	lsrs	r4, r2
 80009c2:	1aaa      	subs	r2, r5, r2
 80009c4:	4093      	lsls	r3, r2
 80009c6:	1e5a      	subs	r2, r3, #1
 80009c8:	4193      	sbcs	r3, r2
 80009ca:	431c      	orrs	r4, r3
 80009cc:	1b33      	subs	r3, r6, r4
 80009ce:	0005      	movs	r5, r0
 80009d0:	000c      	movs	r4, r1
 80009d2:	e74d      	b.n	8000870 <__aeabi_fadd+0xb4>
 80009d4:	1b9f      	subs	r7, r3, r6
 80009d6:	017a      	lsls	r2, r7, #5
 80009d8:	d422      	bmi.n	8000a20 <__aeabi_fadd+0x264>
 80009da:	2f00      	cmp	r7, #0
 80009dc:	d1a6      	bne.n	800092c <__aeabi_fadd+0x170>
 80009de:	2400      	movs	r4, #0
 80009e0:	2000      	movs	r0, #0
 80009e2:	2300      	movs	r3, #0
 80009e4:	e757      	b.n	8000896 <__aeabi_fadd+0xda>
 80009e6:	199b      	adds	r3, r3, r6
 80009e8:	2501      	movs	r5, #1
 80009ea:	3201      	adds	r2, #1
 80009ec:	0159      	lsls	r1, r3, #5
 80009ee:	d400      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 80009f0:	e740      	b.n	8000874 <__aeabi_fadd+0xb8>
 80009f2:	2101      	movs	r1, #1
 80009f4:	4835      	ldr	r0, [pc, #212]	@ (8000acc <__aeabi_fadd+0x310>)
 80009f6:	4019      	ands	r1, r3
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	4003      	ands	r3, r0
 80009fc:	430b      	orrs	r3, r1
 80009fe:	e7a7      	b.n	8000950 <__aeabi_fadd+0x194>
 8000a00:	28ff      	cmp	r0, #255	@ 0xff
 8000a02:	d0a9      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000a04:	2180      	movs	r1, #128	@ 0x80
 8000a06:	04c9      	lsls	r1, r1, #19
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	e7b6      	b.n	800097a <__aeabi_fadd+0x1be>
 8000a0c:	2aff      	cmp	r2, #255	@ 0xff
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_fadd+0x256>
 8000a10:	e779      	b.n	8000906 <__aeabi_fadd+0x14a>
 8000a12:	199b      	adds	r3, r3, r6
 8000a14:	085b      	lsrs	r3, r3, #1
 8000a16:	0759      	lsls	r1, r3, #29
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fadd+0x260>
 8000a1a:	e72f      	b.n	800087c <__aeabi_fadd+0xc0>
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	e7c1      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000a20:	000c      	movs	r4, r1
 8000a22:	1af7      	subs	r7, r6, r3
 8000a24:	e782      	b.n	800092c <__aeabi_fadd+0x170>
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d12c      	bne.n	8000a84 <__aeabi_fadd+0x2c8>
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d193      	bne.n	8000956 <__aeabi_fadd+0x19a>
 8000a2e:	2380      	movs	r3, #128	@ 0x80
 8000a30:	2400      	movs	r4, #0
 8000a32:	20ff      	movs	r0, #255	@ 0xff
 8000a34:	03db      	lsls	r3, r3, #15
 8000a36:	e72e      	b.n	8000896 <__aeabi_fadd+0xda>
 8000a38:	2501      	movs	r5, #1
 8000a3a:	1b9b      	subs	r3, r3, r6
 8000a3c:	e718      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a3e:	0019      	movs	r1, r3
 8000a40:	2520      	movs	r5, #32
 8000a42:	40d1      	lsrs	r1, r2
 8000a44:	1aaa      	subs	r2, r5, r2
 8000a46:	4093      	lsls	r3, r2
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	4193      	sbcs	r3, r2
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	0005      	movs	r5, r0
 8000a50:	199b      	adds	r3, r3, r6
 8000a52:	e753      	b.n	80008fc <__aeabi_fadd+0x140>
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_fadd+0x29e>
 8000a58:	e77e      	b.n	8000958 <__aeabi_fadd+0x19c>
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fadd+0x2a4>
 8000a5e:	e77c      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	03d2      	lsls	r2, r2, #15
 8000a64:	4591      	cmp	r9, r2
 8000a66:	d302      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a68:	4594      	cmp	ip, r2
 8000a6a:	d200      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a6c:	0033      	movs	r3, r6
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	e753      	b.n	800091a <__aeabi_fadd+0x15e>
 8000a72:	000c      	movs	r4, r1
 8000a74:	1af3      	subs	r3, r6, r3
 8000a76:	3501      	adds	r5, #1
 8000a78:	e6fa      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d0af      	beq.n	80009de <__aeabi_fadd+0x222>
 8000a7e:	000c      	movs	r4, r1
 8000a80:	0033      	movs	r3, r6
 8000a82:	e78d      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fadd+0x2ce>
 8000a88:	e767      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a8a:	2280      	movs	r2, #128	@ 0x80
 8000a8c:	03d2      	lsls	r2, r2, #15
 8000a8e:	4591      	cmp	r9, r2
 8000a90:	d3ed      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a92:	4594      	cmp	ip, r2
 8000a94:	d2eb      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a96:	000c      	movs	r4, r1
 8000a98:	0033      	movs	r3, r6
 8000a9a:	e7e8      	b.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a9c:	0033      	movs	r3, r6
 8000a9e:	e77f      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000aa0:	199b      	adds	r3, r3, r6
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	0159      	lsls	r1, r3, #5
 8000aa6:	d5b9      	bpl.n	8000a1c <__aeabi_fadd+0x260>
 8000aa8:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	08db      	lsrs	r3, r3, #3
 8000aae:	2201      	movs	r2, #1
 8000ab0:	e778      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ab2:	199b      	adds	r3, r3, r6
 8000ab4:	3201      	adds	r2, #1
 8000ab6:	3501      	adds	r5, #1
 8000ab8:	0159      	lsls	r1, r3, #5
 8000aba:	d49a      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 8000abc:	e6da      	b.n	8000874 <__aeabi_fadd+0xb8>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d08d      	beq.n	80009de <__aeabi_fadd+0x222>
 8000ac2:	08db      	lsrs	r3, r3, #3
 8000ac4:	e76e      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	fbffffff 	.word	0xfbffffff
 8000acc:	7dffffff 	.word	0x7dffffff

08000ad0 <__aeabi_fdiv>:
 8000ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad2:	464f      	mov	r7, r9
 8000ad4:	4646      	mov	r6, r8
 8000ad6:	46d6      	mov	lr, sl
 8000ad8:	0244      	lsls	r4, r0, #9
 8000ada:	b5c0      	push	{r6, r7, lr}
 8000adc:	0047      	lsls	r7, r0, #1
 8000ade:	1c0e      	adds	r6, r1, #0
 8000ae0:	0a64      	lsrs	r4, r4, #9
 8000ae2:	0e3f      	lsrs	r7, r7, #24
 8000ae4:	0fc5      	lsrs	r5, r0, #31
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d03c      	beq.n	8000b64 <__aeabi_fdiv+0x94>
 8000aea:	2fff      	cmp	r7, #255	@ 0xff
 8000aec:	d042      	beq.n	8000b74 <__aeabi_fdiv+0xa4>
 8000aee:	2300      	movs	r3, #0
 8000af0:	2280      	movs	r2, #128	@ 0x80
 8000af2:	4699      	mov	r9, r3
 8000af4:	469a      	mov	sl, r3
 8000af6:	00e4      	lsls	r4, r4, #3
 8000af8:	04d2      	lsls	r2, r2, #19
 8000afa:	4314      	orrs	r4, r2
 8000afc:	3f7f      	subs	r7, #127	@ 0x7f
 8000afe:	0273      	lsls	r3, r6, #9
 8000b00:	0a5b      	lsrs	r3, r3, #9
 8000b02:	4698      	mov	r8, r3
 8000b04:	0073      	lsls	r3, r6, #1
 8000b06:	0e1b      	lsrs	r3, r3, #24
 8000b08:	0ff6      	lsrs	r6, r6, #31
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d01b      	beq.n	8000b46 <__aeabi_fdiv+0x76>
 8000b0e:	2bff      	cmp	r3, #255	@ 0xff
 8000b10:	d013      	beq.n	8000b3a <__aeabi_fdiv+0x6a>
 8000b12:	4642      	mov	r2, r8
 8000b14:	2180      	movs	r1, #128	@ 0x80
 8000b16:	00d2      	lsls	r2, r2, #3
 8000b18:	04c9      	lsls	r1, r1, #19
 8000b1a:	4311      	orrs	r1, r2
 8000b1c:	4688      	mov	r8, r1
 8000b1e:	2000      	movs	r0, #0
 8000b20:	3b7f      	subs	r3, #127	@ 0x7f
 8000b22:	0029      	movs	r1, r5
 8000b24:	1aff      	subs	r7, r7, r3
 8000b26:	464b      	mov	r3, r9
 8000b28:	4071      	eors	r1, r6
 8000b2a:	b2c9      	uxtb	r1, r1
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d900      	bls.n	8000b32 <__aeabi_fdiv+0x62>
 8000b30:	e0b5      	b.n	8000c9e <__aeabi_fdiv+0x1ce>
 8000b32:	4a74      	ldr	r2, [pc, #464]	@ (8000d04 <__aeabi_fdiv+0x234>)
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	58d3      	ldr	r3, [r2, r3]
 8000b38:	469f      	mov	pc, r3
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d13f      	bne.n	8000bc0 <__aeabi_fdiv+0xf0>
 8000b40:	3fff      	subs	r7, #255	@ 0xff
 8000b42:	3302      	adds	r3, #2
 8000b44:	e003      	b.n	8000b4e <__aeabi_fdiv+0x7e>
 8000b46:	4643      	mov	r3, r8
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d12d      	bne.n	8000ba8 <__aeabi_fdiv+0xd8>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	0029      	movs	r1, r5
 8000b50:	464a      	mov	r2, r9
 8000b52:	4071      	eors	r1, r6
 8000b54:	b2c9      	uxtb	r1, r1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	2a0e      	cmp	r2, #14
 8000b5a:	d838      	bhi.n	8000bce <__aeabi_fdiv+0xfe>
 8000b5c:	486a      	ldr	r0, [pc, #424]	@ (8000d08 <__aeabi_fdiv+0x238>)
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	5882      	ldr	r2, [r0, r2]
 8000b62:	4697      	mov	pc, r2
 8000b64:	2c00      	cmp	r4, #0
 8000b66:	d113      	bne.n	8000b90 <__aeabi_fdiv+0xc0>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	4699      	mov	r9, r3
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	2700      	movs	r7, #0
 8000b70:	469a      	mov	sl, r3
 8000b72:	e7c4      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	d105      	bne.n	8000b84 <__aeabi_fdiv+0xb4>
 8000b78:	2308      	movs	r3, #8
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	3b06      	subs	r3, #6
 8000b7e:	27ff      	movs	r7, #255	@ 0xff
 8000b80:	469a      	mov	sl, r3
 8000b82:	e7bc      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b84:	230c      	movs	r3, #12
 8000b86:	4699      	mov	r9, r3
 8000b88:	3b09      	subs	r3, #9
 8000b8a:	27ff      	movs	r7, #255	@ 0xff
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	e7b6      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b90:	0020      	movs	r0, r4
 8000b92:	f002 fcb1 	bl	80034f8 <__clzsi2>
 8000b96:	2776      	movs	r7, #118	@ 0x76
 8000b98:	1f43      	subs	r3, r0, #5
 8000b9a:	409c      	lsls	r4, r3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	427f      	negs	r7, r7
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	469a      	mov	sl, r3
 8000ba4:	1a3f      	subs	r7, r7, r0
 8000ba6:	e7aa      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000ba8:	4640      	mov	r0, r8
 8000baa:	f002 fca5 	bl	80034f8 <__clzsi2>
 8000bae:	4642      	mov	r2, r8
 8000bb0:	1f43      	subs	r3, r0, #5
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	2376      	movs	r3, #118	@ 0x76
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	1a1b      	subs	r3, r3, r0
 8000bba:	4690      	mov	r8, r2
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e7b0      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	464a      	mov	r2, r9
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	4691      	mov	r9, r2
 8000bc8:	2003      	movs	r0, #3
 8000bca:	33fc      	adds	r3, #252	@ 0xfc
 8000bcc:	e7a9      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bce:	000d      	movs	r5, r1
 8000bd0:	20ff      	movs	r0, #255	@ 0xff
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	05c0      	lsls	r0, r0, #23
 8000bd6:	07ed      	lsls	r5, r5, #31
 8000bd8:	4310      	orrs	r0, r2
 8000bda:	4328      	orrs	r0, r5
 8000bdc:	bce0      	pop	{r5, r6, r7}
 8000bde:	46ba      	mov	sl, r7
 8000be0:	46b1      	mov	r9, r6
 8000be2:	46a8      	mov	r8, r5
 8000be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be6:	000d      	movs	r5, r1
 8000be8:	2000      	movs	r0, #0
 8000bea:	2200      	movs	r2, #0
 8000bec:	e7f2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000bee:	4653      	mov	r3, sl
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d0ed      	beq.n	8000bd0 <__aeabi_fdiv+0x100>
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d033      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000bf8:	46a0      	mov	r8, r4
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d105      	bne.n	8000c0a <__aeabi_fdiv+0x13a>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	2200      	movs	r2, #0
 8000c02:	e7e7      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c04:	0035      	movs	r5, r6
 8000c06:	2803      	cmp	r0, #3
 8000c08:	d07a      	beq.n	8000d00 <__aeabi_fdiv+0x230>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	337f      	adds	r3, #127	@ 0x7f
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	dd2d      	ble.n	8000c6e <__aeabi_fdiv+0x19e>
 8000c12:	4642      	mov	r2, r8
 8000c14:	0752      	lsls	r2, r2, #29
 8000c16:	d007      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c18:	220f      	movs	r2, #15
 8000c1a:	4641      	mov	r1, r8
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	2a04      	cmp	r2, #4
 8000c20:	d002      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c22:	2204      	movs	r2, #4
 8000c24:	4694      	mov	ip, r2
 8000c26:	44e0      	add	r8, ip
 8000c28:	4642      	mov	r2, r8
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	d505      	bpl.n	8000c3a <__aeabi_fdiv+0x16a>
 8000c2e:	4642      	mov	r2, r8
 8000c30:	4b36      	ldr	r3, [pc, #216]	@ (8000d0c <__aeabi_fdiv+0x23c>)
 8000c32:	401a      	ands	r2, r3
 8000c34:	003b      	movs	r3, r7
 8000c36:	4690      	mov	r8, r2
 8000c38:	3380      	adds	r3, #128	@ 0x80
 8000c3a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c3c:	dcc8      	bgt.n	8000bd0 <__aeabi_fdiv+0x100>
 8000c3e:	4642      	mov	r2, r8
 8000c40:	0192      	lsls	r2, r2, #6
 8000c42:	0a52      	lsrs	r2, r2, #9
 8000c44:	b2d8      	uxtb	r0, r3
 8000c46:	e7c5      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c48:	2280      	movs	r2, #128	@ 0x80
 8000c4a:	2500      	movs	r5, #0
 8000c4c:	20ff      	movs	r0, #255	@ 0xff
 8000c4e:	03d2      	lsls	r2, r2, #15
 8000c50:	e7c0      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	03d2      	lsls	r2, r2, #15
 8000c56:	4214      	tst	r4, r2
 8000c58:	d002      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000c5a:	4643      	mov	r3, r8
 8000c5c:	4213      	tst	r3, r2
 8000c5e:	d049      	beq.n	8000cf4 <__aeabi_fdiv+0x224>
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	03d2      	lsls	r2, r2, #15
 8000c64:	4322      	orrs	r2, r4
 8000c66:	0252      	lsls	r2, r2, #9
 8000c68:	20ff      	movs	r0, #255	@ 0xff
 8000c6a:	0a52      	lsrs	r2, r2, #9
 8000c6c:	e7b2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c6e:	2201      	movs	r2, #1
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b1b      	cmp	r3, #27
 8000c74:	dcc3      	bgt.n	8000bfe <__aeabi_fdiv+0x12e>
 8000c76:	4642      	mov	r2, r8
 8000c78:	40da      	lsrs	r2, r3
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	379e      	adds	r7, #158	@ 0x9e
 8000c7e:	40bb      	lsls	r3, r7
 8000c80:	1e59      	subs	r1, r3, #1
 8000c82:	418b      	sbcs	r3, r1
 8000c84:	431a      	orrs	r2, r3
 8000c86:	0753      	lsls	r3, r2, #29
 8000c88:	d004      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d000      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c92:	3204      	adds	r2, #4
 8000c94:	0153      	lsls	r3, r2, #5
 8000c96:	d529      	bpl.n	8000cec <__aeabi_fdiv+0x21c>
 8000c98:	2001      	movs	r0, #1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e79a      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	0163      	lsls	r3, r4, #5
 8000ca2:	0155      	lsls	r5, r2, #5
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	d215      	bcs.n	8000cd4 <__aeabi_fdiv+0x204>
 8000ca8:	201b      	movs	r0, #27
 8000caa:	2200      	movs	r2, #0
 8000cac:	3f01      	subs	r7, #1
 8000cae:	2601      	movs	r6, #1
 8000cb0:	001c      	movs	r4, r3
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2c00      	cmp	r4, #0
 8000cb8:	db01      	blt.n	8000cbe <__aeabi_fdiv+0x1ee>
 8000cba:	429d      	cmp	r5, r3
 8000cbc:	d801      	bhi.n	8000cc2 <__aeabi_fdiv+0x1f2>
 8000cbe:	1b5b      	subs	r3, r3, r5
 8000cc0:	4332      	orrs	r2, r6
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d1f3      	bne.n	8000cb0 <__aeabi_fdiv+0x1e0>
 8000cc8:	1e58      	subs	r0, r3, #1
 8000cca:	4183      	sbcs	r3, r0
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	4698      	mov	r8, r3
 8000cd0:	000d      	movs	r5, r1
 8000cd2:	e79a      	b.n	8000c0a <__aeabi_fdiv+0x13a>
 8000cd4:	201a      	movs	r0, #26
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	1b5b      	subs	r3, r3, r5
 8000cda:	e7e8      	b.n	8000cae <__aeabi_fdiv+0x1de>
 8000cdc:	3b02      	subs	r3, #2
 8000cde:	425a      	negs	r2, r3
 8000ce0:	4153      	adcs	r3, r2
 8000ce2:	425b      	negs	r3, r3
 8000ce4:	0035      	movs	r5, r6
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	b2d8      	uxtb	r0, r3
 8000cea:	e773      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cec:	0192      	lsls	r2, r2, #6
 8000cee:	2000      	movs	r0, #0
 8000cf0:	0a52      	lsrs	r2, r2, #9
 8000cf2:	e76f      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	0252      	lsls	r2, r2, #9
 8000cf8:	0035      	movs	r5, r6
 8000cfa:	20ff      	movs	r0, #255	@ 0xff
 8000cfc:	0a52      	lsrs	r2, r2, #9
 8000cfe:	e769      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000d00:	4644      	mov	r4, r8
 8000d02:	e7ad      	b.n	8000c60 <__aeabi_fdiv+0x190>
 8000d04:	0801be30 	.word	0x0801be30
 8000d08:	0801be70 	.word	0x0801be70
 8000d0c:	f7ffffff 	.word	0xf7ffffff

08000d10 <__eqsf2>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	0042      	lsls	r2, r0, #1
 8000d14:	024e      	lsls	r6, r1, #9
 8000d16:	004c      	lsls	r4, r1, #1
 8000d18:	0245      	lsls	r5, r0, #9
 8000d1a:	0a6d      	lsrs	r5, r5, #9
 8000d1c:	0e12      	lsrs	r2, r2, #24
 8000d1e:	0fc3      	lsrs	r3, r0, #31
 8000d20:	0a76      	lsrs	r6, r6, #9
 8000d22:	0e24      	lsrs	r4, r4, #24
 8000d24:	0fc9      	lsrs	r1, r1, #31
 8000d26:	2aff      	cmp	r2, #255	@ 0xff
 8000d28:	d010      	beq.n	8000d4c <__eqsf2+0x3c>
 8000d2a:	2cff      	cmp	r4, #255	@ 0xff
 8000d2c:	d00c      	beq.n	8000d48 <__eqsf2+0x38>
 8000d2e:	2001      	movs	r0, #1
 8000d30:	42a2      	cmp	r2, r4
 8000d32:	d10a      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d34:	42b5      	cmp	r5, r6
 8000d36:	d108      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d00f      	beq.n	8000d5c <__eqsf2+0x4c>
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d104      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d40:	0028      	movs	r0, r5
 8000d42:	1e43      	subs	r3, r0, #1
 8000d44:	4198      	sbcs	r0, r3
 8000d46:	e000      	b.n	8000d4a <__eqsf2+0x3a>
 8000d48:	2001      	movs	r0, #1
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	2cff      	cmp	r4, #255	@ 0xff
 8000d50:	d1fb      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d52:	4335      	orrs	r5, r6
 8000d54:	d1f9      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d56:	404b      	eors	r3, r1
 8000d58:	0018      	movs	r0, r3
 8000d5a:	e7f6      	b.n	8000d4a <__eqsf2+0x3a>
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	e7f4      	b.n	8000d4a <__eqsf2+0x3a>

08000d60 <__gesf2>:
 8000d60:	b530      	push	{r4, r5, lr}
 8000d62:	0042      	lsls	r2, r0, #1
 8000d64:	0244      	lsls	r4, r0, #9
 8000d66:	024d      	lsls	r5, r1, #9
 8000d68:	0fc3      	lsrs	r3, r0, #31
 8000d6a:	0048      	lsls	r0, r1, #1
 8000d6c:	0a64      	lsrs	r4, r4, #9
 8000d6e:	0e12      	lsrs	r2, r2, #24
 8000d70:	0a6d      	lsrs	r5, r5, #9
 8000d72:	0e00      	lsrs	r0, r0, #24
 8000d74:	0fc9      	lsrs	r1, r1, #31
 8000d76:	2aff      	cmp	r2, #255	@ 0xff
 8000d78:	d019      	beq.n	8000dae <__gesf2+0x4e>
 8000d7a:	28ff      	cmp	r0, #255	@ 0xff
 8000d7c:	d00b      	beq.n	8000d96 <__gesf2+0x36>
 8000d7e:	2a00      	cmp	r2, #0
 8000d80:	d11e      	bne.n	8000dc0 <__gesf2+0x60>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d10b      	bne.n	8000d9e <__gesf2+0x3e>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d027      	beq.n	8000dda <__gesf2+0x7a>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d134      	bne.n	8000df8 <__gesf2+0x98>
 8000d8e:	2900      	cmp	r1, #0
 8000d90:	d02f      	beq.n	8000df2 <__gesf2+0x92>
 8000d92:	0008      	movs	r0, r1
 8000d94:	bd30      	pop	{r4, r5, pc}
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d128      	bne.n	8000dec <__gesf2+0x8c>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	d101      	bne.n	8000da2 <__gesf2+0x42>
 8000d9e:	2c00      	cmp	r4, #0
 8000da0:	d0f5      	beq.n	8000d8e <__gesf2+0x2e>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d107      	bne.n	8000db6 <__gesf2+0x56>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d023      	beq.n	8000df2 <__gesf2+0x92>
 8000daa:	0018      	movs	r0, r3
 8000dac:	e7f2      	b.n	8000d94 <__gesf2+0x34>
 8000dae:	2c00      	cmp	r4, #0
 8000db0:	d11c      	bne.n	8000dec <__gesf2+0x8c>
 8000db2:	28ff      	cmp	r0, #255	@ 0xff
 8000db4:	d014      	beq.n	8000de0 <__gesf2+0x80>
 8000db6:	1e58      	subs	r0, r3, #1
 8000db8:	2302      	movs	r3, #2
 8000dba:	4018      	ands	r0, r3
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	e7e9      	b.n	8000d94 <__gesf2+0x34>
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	d0f8      	beq.n	8000db6 <__gesf2+0x56>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d1f6      	bne.n	8000db6 <__gesf2+0x56>
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	dcf4      	bgt.n	8000db6 <__gesf2+0x56>
 8000dcc:	dbeb      	blt.n	8000da6 <__gesf2+0x46>
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	d8f1      	bhi.n	8000db6 <__gesf2+0x56>
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	42ac      	cmp	r4, r5
 8000dd6:	d2dd      	bcs.n	8000d94 <__gesf2+0x34>
 8000dd8:	e7e5      	b.n	8000da6 <__gesf2+0x46>
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	d0da      	beq.n	8000d94 <__gesf2+0x34>
 8000dde:	e7ea      	b.n	8000db6 <__gesf2+0x56>
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d103      	bne.n	8000dec <__gesf2+0x8c>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d1e6      	bne.n	8000db6 <__gesf2+0x56>
 8000de8:	2000      	movs	r0, #0
 8000dea:	e7d3      	b.n	8000d94 <__gesf2+0x34>
 8000dec:	2002      	movs	r0, #2
 8000dee:	4240      	negs	r0, r0
 8000df0:	e7d0      	b.n	8000d94 <__gesf2+0x34>
 8000df2:	2001      	movs	r0, #1
 8000df4:	4240      	negs	r0, r0
 8000df6:	e7cd      	b.n	8000d94 <__gesf2+0x34>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d0e8      	beq.n	8000dce <__gesf2+0x6e>
 8000dfc:	e7db      	b.n	8000db6 <__gesf2+0x56>
 8000dfe:	46c0      	nop			@ (mov r8, r8)

08000e00 <__lesf2>:
 8000e00:	b530      	push	{r4, r5, lr}
 8000e02:	0042      	lsls	r2, r0, #1
 8000e04:	0244      	lsls	r4, r0, #9
 8000e06:	024d      	lsls	r5, r1, #9
 8000e08:	0fc3      	lsrs	r3, r0, #31
 8000e0a:	0048      	lsls	r0, r1, #1
 8000e0c:	0a64      	lsrs	r4, r4, #9
 8000e0e:	0e12      	lsrs	r2, r2, #24
 8000e10:	0a6d      	lsrs	r5, r5, #9
 8000e12:	0e00      	lsrs	r0, r0, #24
 8000e14:	0fc9      	lsrs	r1, r1, #31
 8000e16:	2aff      	cmp	r2, #255	@ 0xff
 8000e18:	d01a      	beq.n	8000e50 <__lesf2+0x50>
 8000e1a:	28ff      	cmp	r0, #255	@ 0xff
 8000e1c:	d00e      	beq.n	8000e3c <__lesf2+0x3c>
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d11e      	bne.n	8000e60 <__lesf2+0x60>
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d10e      	bne.n	8000e44 <__lesf2+0x44>
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d02a      	beq.n	8000e80 <__lesf2+0x80>
 8000e2a:	2c00      	cmp	r4, #0
 8000e2c:	d00c      	beq.n	8000e48 <__lesf2+0x48>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d01d      	beq.n	8000e6e <__lesf2+0x6e>
 8000e32:	1e58      	subs	r0, r3, #1
 8000e34:	2302      	movs	r3, #2
 8000e36:	4018      	ands	r0, r3
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e010      	b.n	8000e5e <__lesf2+0x5e>
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	d10d      	bne.n	8000e5c <__lesf2+0x5c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d120      	bne.n	8000e86 <__lesf2+0x86>
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	d11e      	bne.n	8000e86 <__lesf2+0x86>
 8000e48:	2900      	cmp	r1, #0
 8000e4a:	d023      	beq.n	8000e94 <__lesf2+0x94>
 8000e4c:	0008      	movs	r0, r1
 8000e4e:	e006      	b.n	8000e5e <__lesf2+0x5e>
 8000e50:	2c00      	cmp	r4, #0
 8000e52:	d103      	bne.n	8000e5c <__lesf2+0x5c>
 8000e54:	28ff      	cmp	r0, #255	@ 0xff
 8000e56:	d1ec      	bne.n	8000e32 <__lesf2+0x32>
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d017      	beq.n	8000e8c <__lesf2+0x8c>
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	bd30      	pop	{r4, r5, pc}
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d0e6      	beq.n	8000e32 <__lesf2+0x32>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d1e4      	bne.n	8000e32 <__lesf2+0x32>
 8000e68:	4282      	cmp	r2, r0
 8000e6a:	dce2      	bgt.n	8000e32 <__lesf2+0x32>
 8000e6c:	db04      	blt.n	8000e78 <__lesf2+0x78>
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	d8df      	bhi.n	8000e32 <__lesf2+0x32>
 8000e72:	2000      	movs	r0, #0
 8000e74:	42ac      	cmp	r4, r5
 8000e76:	d2f2      	bcs.n	8000e5e <__lesf2+0x5e>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00b      	beq.n	8000e94 <__lesf2+0x94>
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	e7ee      	b.n	8000e5e <__lesf2+0x5e>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d0ec      	beq.n	8000e5e <__lesf2+0x5e>
 8000e84:	e7d5      	b.n	8000e32 <__lesf2+0x32>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d1d3      	bne.n	8000e32 <__lesf2+0x32>
 8000e8a:	e7f5      	b.n	8000e78 <__lesf2+0x78>
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d0e5      	beq.n	8000e5e <__lesf2+0x5e>
 8000e92:	e7ce      	b.n	8000e32 <__lesf2+0x32>
 8000e94:	2001      	movs	r0, #1
 8000e96:	4240      	negs	r0, r0
 8000e98:	e7e1      	b.n	8000e5e <__lesf2+0x5e>
 8000e9a:	46c0      	nop			@ (mov r8, r8)

08000e9c <__aeabi_fmul>:
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	464f      	mov	r7, r9
 8000ea0:	4646      	mov	r6, r8
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	0243      	lsls	r3, r0, #9
 8000ea6:	0a5b      	lsrs	r3, r3, #9
 8000ea8:	0045      	lsls	r5, r0, #1
 8000eaa:	b5c0      	push	{r6, r7, lr}
 8000eac:	4699      	mov	r9, r3
 8000eae:	1c0f      	adds	r7, r1, #0
 8000eb0:	0e2d      	lsrs	r5, r5, #24
 8000eb2:	0fc6      	lsrs	r6, r0, #31
 8000eb4:	2d00      	cmp	r5, #0
 8000eb6:	d100      	bne.n	8000eba <__aeabi_fmul+0x1e>
 8000eb8:	e088      	b.n	8000fcc <__aeabi_fmul+0x130>
 8000eba:	2dff      	cmp	r5, #255	@ 0xff
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_fmul+0x24>
 8000ebe:	e08d      	b.n	8000fdc <__aeabi_fmul+0x140>
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	04d2      	lsls	r2, r2, #19
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4691      	mov	r9, r2
 8000ecc:	4698      	mov	r8, r3
 8000ece:	469a      	mov	sl, r3
 8000ed0:	3d7f      	subs	r5, #127	@ 0x7f
 8000ed2:	027c      	lsls	r4, r7, #9
 8000ed4:	007b      	lsls	r3, r7, #1
 8000ed6:	0a64      	lsrs	r4, r4, #9
 8000ed8:	0e1b      	lsrs	r3, r3, #24
 8000eda:	0fff      	lsrs	r7, r7, #31
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d068      	beq.n	8000fb2 <__aeabi_fmul+0x116>
 8000ee0:	2bff      	cmp	r3, #255	@ 0xff
 8000ee2:	d021      	beq.n	8000f28 <__aeabi_fmul+0x8c>
 8000ee4:	2280      	movs	r2, #128	@ 0x80
 8000ee6:	00e4      	lsls	r4, r4, #3
 8000ee8:	04d2      	lsls	r2, r2, #19
 8000eea:	4314      	orrs	r4, r2
 8000eec:	4642      	mov	r2, r8
 8000eee:	3b7f      	subs	r3, #127	@ 0x7f
 8000ef0:	195b      	adds	r3, r3, r5
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	1c5d      	adds	r5, r3, #1
 8000ef6:	2a0a      	cmp	r2, #10
 8000ef8:	dc2e      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 8000efa:	407e      	eors	r6, r7
 8000efc:	4642      	mov	r2, r8
 8000efe:	2a02      	cmp	r2, #2
 8000f00:	dc23      	bgt.n	8000f4a <__aeabi_fmul+0xae>
 8000f02:	3a01      	subs	r2, #1
 8000f04:	2a01      	cmp	r2, #1
 8000f06:	d900      	bls.n	8000f0a <__aeabi_fmul+0x6e>
 8000f08:	e0bd      	b.n	8001086 <__aeabi_fmul+0x1ea>
 8000f0a:	2902      	cmp	r1, #2
 8000f0c:	d06e      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f0e:	2901      	cmp	r1, #1
 8000f10:	d12c      	bne.n	8000f6c <__aeabi_fmul+0xd0>
 8000f12:	2000      	movs	r0, #0
 8000f14:	2200      	movs	r2, #0
 8000f16:	05c0      	lsls	r0, r0, #23
 8000f18:	07f6      	lsls	r6, r6, #31
 8000f1a:	4310      	orrs	r0, r2
 8000f1c:	4330      	orrs	r0, r6
 8000f1e:	bce0      	pop	{r5, r6, r7}
 8000f20:	46ba      	mov	sl, r7
 8000f22:	46b1      	mov	r9, r6
 8000f24:	46a8      	mov	r8, r5
 8000f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f28:	002b      	movs	r3, r5
 8000f2a:	33ff      	adds	r3, #255	@ 0xff
 8000f2c:	2c00      	cmp	r4, #0
 8000f2e:	d065      	beq.n	8000ffc <__aeabi_fmul+0x160>
 8000f30:	2203      	movs	r2, #3
 8000f32:	4641      	mov	r1, r8
 8000f34:	4311      	orrs	r1, r2
 8000f36:	0032      	movs	r2, r6
 8000f38:	3501      	adds	r5, #1
 8000f3a:	4688      	mov	r8, r1
 8000f3c:	407a      	eors	r2, r7
 8000f3e:	35ff      	adds	r5, #255	@ 0xff
 8000f40:	290a      	cmp	r1, #10
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_fmul+0xaa>
 8000f44:	e0d8      	b.n	80010f8 <__aeabi_fmul+0x25c>
 8000f46:	0016      	movs	r6, r2
 8000f48:	2103      	movs	r1, #3
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4082      	lsls	r2, r0
 8000f50:	20a6      	movs	r0, #166	@ 0xa6
 8000f52:	00c0      	lsls	r0, r0, #3
 8000f54:	4202      	tst	r2, r0
 8000f56:	d020      	beq.n	8000f9a <__aeabi_fmul+0xfe>
 8000f58:	4653      	mov	r3, sl
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d046      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fmul+0xc8>
 8000f62:	e0bb      	b.n	80010dc <__aeabi_fmul+0x240>
 8000f64:	4651      	mov	r1, sl
 8000f66:	464c      	mov	r4, r9
 8000f68:	2901      	cmp	r1, #1
 8000f6a:	d0d2      	beq.n	8000f12 <__aeabi_fmul+0x76>
 8000f6c:	002b      	movs	r3, r5
 8000f6e:	337f      	adds	r3, #127	@ 0x7f
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	dd70      	ble.n	8001056 <__aeabi_fmul+0x1ba>
 8000f74:	0762      	lsls	r2, r4, #29
 8000f76:	d004      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f78:	220f      	movs	r2, #15
 8000f7a:	4022      	ands	r2, r4
 8000f7c:	2a04      	cmp	r2, #4
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f80:	3404      	adds	r4, #4
 8000f82:	0122      	lsls	r2, r4, #4
 8000f84:	d503      	bpl.n	8000f8e <__aeabi_fmul+0xf2>
 8000f86:	4b63      	ldr	r3, [pc, #396]	@ (8001114 <__aeabi_fmul+0x278>)
 8000f88:	401c      	ands	r4, r3
 8000f8a:	002b      	movs	r3, r5
 8000f8c:	3380      	adds	r3, #128	@ 0x80
 8000f8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f90:	dc2c      	bgt.n	8000fec <__aeabi_fmul+0x150>
 8000f92:	01a2      	lsls	r2, r4, #6
 8000f94:	0a52      	lsrs	r2, r2, #9
 8000f96:	b2d8      	uxtb	r0, r3
 8000f98:	e7bd      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000f9a:	2090      	movs	r0, #144	@ 0x90
 8000f9c:	0080      	lsls	r0, r0, #2
 8000f9e:	4202      	tst	r2, r0
 8000fa0:	d127      	bne.n	8000ff2 <__aeabi_fmul+0x156>
 8000fa2:	38b9      	subs	r0, #185	@ 0xb9
 8000fa4:	38ff      	subs	r0, #255	@ 0xff
 8000fa6:	4210      	tst	r0, r2
 8000fa8:	d06d      	beq.n	8001086 <__aeabi_fmul+0x1ea>
 8000faa:	003e      	movs	r6, r7
 8000fac:	46a1      	mov	r9, r4
 8000fae:	468a      	mov	sl, r1
 8000fb0:	e7d2      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fb2:	2c00      	cmp	r4, #0
 8000fb4:	d141      	bne.n	800103a <__aeabi_fmul+0x19e>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	4642      	mov	r2, r8
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	4690      	mov	r8, r2
 8000fbe:	002b      	movs	r3, r5
 8000fc0:	4642      	mov	r2, r8
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	1c5d      	adds	r5, r3, #1
 8000fc6:	2a0a      	cmp	r2, #10
 8000fc8:	dd97      	ble.n	8000efa <__aeabi_fmul+0x5e>
 8000fca:	e7c5      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d126      	bne.n	800101e <__aeabi_fmul+0x182>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	4698      	mov	r8, r3
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	469a      	mov	sl, r3
 8000fda:	e77a      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d118      	bne.n	8001012 <__aeabi_fmul+0x176>
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	4698      	mov	r8, r3
 8000fe4:	3b06      	subs	r3, #6
 8000fe6:	25ff      	movs	r5, #255	@ 0xff
 8000fe8:	469a      	mov	sl, r3
 8000fea:	e772      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fec:	20ff      	movs	r0, #255	@ 0xff
 8000fee:	2200      	movs	r2, #0
 8000ff0:	e791      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ff2:	2280      	movs	r2, #128	@ 0x80
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	20ff      	movs	r0, #255	@ 0xff
 8000ff8:	03d2      	lsls	r2, r2, #15
 8000ffa:	e78c      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ffc:	4641      	mov	r1, r8
 8000ffe:	2202      	movs	r2, #2
 8001000:	3501      	adds	r5, #1
 8001002:	4311      	orrs	r1, r2
 8001004:	4688      	mov	r8, r1
 8001006:	35ff      	adds	r5, #255	@ 0xff
 8001008:	290a      	cmp	r1, #10
 800100a:	dca5      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 800100c:	2102      	movs	r1, #2
 800100e:	407e      	eors	r6, r7
 8001010:	e774      	b.n	8000efc <__aeabi_fmul+0x60>
 8001012:	230c      	movs	r3, #12
 8001014:	4698      	mov	r8, r3
 8001016:	3b09      	subs	r3, #9
 8001018:	25ff      	movs	r5, #255	@ 0xff
 800101a:	469a      	mov	sl, r3
 800101c:	e759      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800101e:	0018      	movs	r0, r3
 8001020:	f002 fa6a 	bl	80034f8 <__clzsi2>
 8001024:	464a      	mov	r2, r9
 8001026:	1f43      	subs	r3, r0, #5
 8001028:	2576      	movs	r5, #118	@ 0x76
 800102a:	409a      	lsls	r2, r3
 800102c:	2300      	movs	r3, #0
 800102e:	426d      	negs	r5, r5
 8001030:	4691      	mov	r9, r2
 8001032:	4698      	mov	r8, r3
 8001034:	469a      	mov	sl, r3
 8001036:	1a2d      	subs	r5, r5, r0
 8001038:	e74b      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800103a:	0020      	movs	r0, r4
 800103c:	f002 fa5c 	bl	80034f8 <__clzsi2>
 8001040:	4642      	mov	r2, r8
 8001042:	1f43      	subs	r3, r0, #5
 8001044:	409c      	lsls	r4, r3
 8001046:	1a2b      	subs	r3, r5, r0
 8001048:	3b76      	subs	r3, #118	@ 0x76
 800104a:	2100      	movs	r1, #0
 800104c:	1c5d      	adds	r5, r3, #1
 800104e:	2a0a      	cmp	r2, #10
 8001050:	dc00      	bgt.n	8001054 <__aeabi_fmul+0x1b8>
 8001052:	e752      	b.n	8000efa <__aeabi_fmul+0x5e>
 8001054:	e780      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8001056:	2201      	movs	r2, #1
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b1b      	cmp	r3, #27
 800105c:	dd00      	ble.n	8001060 <__aeabi_fmul+0x1c4>
 800105e:	e758      	b.n	8000f12 <__aeabi_fmul+0x76>
 8001060:	359e      	adds	r5, #158	@ 0x9e
 8001062:	0022      	movs	r2, r4
 8001064:	40ac      	lsls	r4, r5
 8001066:	40da      	lsrs	r2, r3
 8001068:	1e63      	subs	r3, r4, #1
 800106a:	419c      	sbcs	r4, r3
 800106c:	4322      	orrs	r2, r4
 800106e:	0753      	lsls	r3, r2, #29
 8001070:	d004      	beq.n	800107c <__aeabi_fmul+0x1e0>
 8001072:	230f      	movs	r3, #15
 8001074:	4013      	ands	r3, r2
 8001076:	2b04      	cmp	r3, #4
 8001078:	d000      	beq.n	800107c <__aeabi_fmul+0x1e0>
 800107a:	3204      	adds	r2, #4
 800107c:	0153      	lsls	r3, r2, #5
 800107e:	d537      	bpl.n	80010f0 <__aeabi_fmul+0x254>
 8001080:	2001      	movs	r0, #1
 8001082:	2200      	movs	r2, #0
 8001084:	e747      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001086:	0c21      	lsrs	r1, r4, #16
 8001088:	464a      	mov	r2, r9
 800108a:	0424      	lsls	r4, r4, #16
 800108c:	0c24      	lsrs	r4, r4, #16
 800108e:	0027      	movs	r7, r4
 8001090:	0c10      	lsrs	r0, r2, #16
 8001092:	0412      	lsls	r2, r2, #16
 8001094:	0c12      	lsrs	r2, r2, #16
 8001096:	4344      	muls	r4, r0
 8001098:	4357      	muls	r7, r2
 800109a:	4348      	muls	r0, r1
 800109c:	4351      	muls	r1, r2
 800109e:	0c3a      	lsrs	r2, r7, #16
 80010a0:	1909      	adds	r1, r1, r4
 80010a2:	1852      	adds	r2, r2, r1
 80010a4:	4294      	cmp	r4, r2
 80010a6:	d903      	bls.n	80010b0 <__aeabi_fmul+0x214>
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	0249      	lsls	r1, r1, #9
 80010ac:	468c      	mov	ip, r1
 80010ae:	4460      	add	r0, ip
 80010b0:	043f      	lsls	r7, r7, #16
 80010b2:	0411      	lsls	r1, r2, #16
 80010b4:	0c3f      	lsrs	r7, r7, #16
 80010b6:	19c9      	adds	r1, r1, r7
 80010b8:	018c      	lsls	r4, r1, #6
 80010ba:	1e67      	subs	r7, r4, #1
 80010bc:	41bc      	sbcs	r4, r7
 80010be:	0c12      	lsrs	r2, r2, #16
 80010c0:	0e89      	lsrs	r1, r1, #26
 80010c2:	1812      	adds	r2, r2, r0
 80010c4:	430c      	orrs	r4, r1
 80010c6:	0192      	lsls	r2, r2, #6
 80010c8:	4314      	orrs	r4, r2
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	d50e      	bpl.n	80010ec <__aeabi_fmul+0x250>
 80010ce:	2301      	movs	r3, #1
 80010d0:	0862      	lsrs	r2, r4, #1
 80010d2:	401c      	ands	r4, r3
 80010d4:	4314      	orrs	r4, r2
 80010d6:	e749      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010d8:	003e      	movs	r6, r7
 80010da:	46a1      	mov	r9, r4
 80010dc:	2280      	movs	r2, #128	@ 0x80
 80010de:	464b      	mov	r3, r9
 80010e0:	03d2      	lsls	r2, r2, #15
 80010e2:	431a      	orrs	r2, r3
 80010e4:	0252      	lsls	r2, r2, #9
 80010e6:	20ff      	movs	r0, #255	@ 0xff
 80010e8:	0a52      	lsrs	r2, r2, #9
 80010ea:	e714      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010ec:	001d      	movs	r5, r3
 80010ee:	e73d      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010f0:	0192      	lsls	r2, r2, #6
 80010f2:	2000      	movs	r0, #0
 80010f4:	0a52      	lsrs	r2, r2, #9
 80010f6:	e70e      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010f8:	290f      	cmp	r1, #15
 80010fa:	d1ed      	bne.n	80010d8 <__aeabi_fmul+0x23c>
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	464b      	mov	r3, r9
 8001100:	03d2      	lsls	r2, r2, #15
 8001102:	4213      	tst	r3, r2
 8001104:	d0ea      	beq.n	80010dc <__aeabi_fmul+0x240>
 8001106:	4214      	tst	r4, r2
 8001108:	d1e8      	bne.n	80010dc <__aeabi_fmul+0x240>
 800110a:	003e      	movs	r6, r7
 800110c:	20ff      	movs	r0, #255	@ 0xff
 800110e:	4322      	orrs	r2, r4
 8001110:	e701      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	f7ffffff 	.word	0xf7ffffff

08001118 <__aeabi_fsub>:
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	4647      	mov	r7, r8
 800111c:	46ce      	mov	lr, r9
 800111e:	024e      	lsls	r6, r1, #9
 8001120:	0243      	lsls	r3, r0, #9
 8001122:	0045      	lsls	r5, r0, #1
 8001124:	0a72      	lsrs	r2, r6, #9
 8001126:	0fc4      	lsrs	r4, r0, #31
 8001128:	0048      	lsls	r0, r1, #1
 800112a:	b580      	push	{r7, lr}
 800112c:	4694      	mov	ip, r2
 800112e:	0a5f      	lsrs	r7, r3, #9
 8001130:	0e2d      	lsrs	r5, r5, #24
 8001132:	099b      	lsrs	r3, r3, #6
 8001134:	0e00      	lsrs	r0, r0, #24
 8001136:	0fc9      	lsrs	r1, r1, #31
 8001138:	09b6      	lsrs	r6, r6, #6
 800113a:	28ff      	cmp	r0, #255	@ 0xff
 800113c:	d024      	beq.n	8001188 <__aeabi_fsub+0x70>
 800113e:	2201      	movs	r2, #1
 8001140:	4051      	eors	r1, r2
 8001142:	1a2a      	subs	r2, r5, r0
 8001144:	428c      	cmp	r4, r1
 8001146:	d00f      	beq.n	8001168 <__aeabi_fsub+0x50>
 8001148:	2a00      	cmp	r2, #0
 800114a:	dc00      	bgt.n	800114e <__aeabi_fsub+0x36>
 800114c:	e16a      	b.n	8001424 <__aeabi_fsub+0x30c>
 800114e:	2800      	cmp	r0, #0
 8001150:	d135      	bne.n	80011be <__aeabi_fsub+0xa6>
 8001152:	2e00      	cmp	r6, #0
 8001154:	d100      	bne.n	8001158 <__aeabi_fsub+0x40>
 8001156:	e0a2      	b.n	800129e <__aeabi_fsub+0x186>
 8001158:	1e51      	subs	r1, r2, #1
 800115a:	2a01      	cmp	r2, #1
 800115c:	d100      	bne.n	8001160 <__aeabi_fsub+0x48>
 800115e:	e124      	b.n	80013aa <__aeabi_fsub+0x292>
 8001160:	2aff      	cmp	r2, #255	@ 0xff
 8001162:	d021      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001164:	000a      	movs	r2, r1
 8001166:	e02f      	b.n	80011c8 <__aeabi_fsub+0xb0>
 8001168:	2a00      	cmp	r2, #0
 800116a:	dc00      	bgt.n	800116e <__aeabi_fsub+0x56>
 800116c:	e167      	b.n	800143e <__aeabi_fsub+0x326>
 800116e:	2800      	cmp	r0, #0
 8001170:	d05e      	beq.n	8001230 <__aeabi_fsub+0x118>
 8001172:	2dff      	cmp	r5, #255	@ 0xff
 8001174:	d018      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	04c9      	lsls	r1, r1, #19
 800117a:	430e      	orrs	r6, r1
 800117c:	2a1b      	cmp	r2, #27
 800117e:	dc00      	bgt.n	8001182 <__aeabi_fsub+0x6a>
 8001180:	e076      	b.n	8001270 <__aeabi_fsub+0x158>
 8001182:	002a      	movs	r2, r5
 8001184:	3301      	adds	r3, #1
 8001186:	e032      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001188:	002a      	movs	r2, r5
 800118a:	3aff      	subs	r2, #255	@ 0xff
 800118c:	4691      	mov	r9, r2
 800118e:	2e00      	cmp	r6, #0
 8001190:	d042      	beq.n	8001218 <__aeabi_fsub+0x100>
 8001192:	428c      	cmp	r4, r1
 8001194:	d055      	beq.n	8001242 <__aeabi_fsub+0x12a>
 8001196:	464a      	mov	r2, r9
 8001198:	2a00      	cmp	r2, #0
 800119a:	d100      	bne.n	800119e <__aeabi_fsub+0x86>
 800119c:	e09c      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800119e:	2d00      	cmp	r5, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x8c>
 80011a2:	e077      	b.n	8001294 <__aeabi_fsub+0x17c>
 80011a4:	000c      	movs	r4, r1
 80011a6:	0033      	movs	r3, r6
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x98>
 80011ae:	e06e      	b.n	800128e <__aeabi_fsub+0x176>
 80011b0:	2280      	movs	r2, #128	@ 0x80
 80011b2:	03d2      	lsls	r2, r2, #15
 80011b4:	4313      	orrs	r3, r2
 80011b6:	025b      	lsls	r3, r3, #9
 80011b8:	20ff      	movs	r0, #255	@ 0xff
 80011ba:	0a5b      	lsrs	r3, r3, #9
 80011bc:	e024      	b.n	8001208 <__aeabi_fsub+0xf0>
 80011be:	2dff      	cmp	r5, #255	@ 0xff
 80011c0:	d0f2      	beq.n	80011a8 <__aeabi_fsub+0x90>
 80011c2:	2180      	movs	r1, #128	@ 0x80
 80011c4:	04c9      	lsls	r1, r1, #19
 80011c6:	430e      	orrs	r6, r1
 80011c8:	2101      	movs	r1, #1
 80011ca:	2a1b      	cmp	r2, #27
 80011cc:	dc08      	bgt.n	80011e0 <__aeabi_fsub+0xc8>
 80011ce:	0031      	movs	r1, r6
 80011d0:	2020      	movs	r0, #32
 80011d2:	40d1      	lsrs	r1, r2
 80011d4:	1a82      	subs	r2, r0, r2
 80011d6:	4096      	lsls	r6, r2
 80011d8:	0032      	movs	r2, r6
 80011da:	1e50      	subs	r0, r2, #1
 80011dc:	4182      	sbcs	r2, r0
 80011de:	4311      	orrs	r1, r2
 80011e0:	1a5b      	subs	r3, r3, r1
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	d460      	bmi.n	80012a8 <__aeabi_fsub+0x190>
 80011e6:	2107      	movs	r1, #7
 80011e8:	002a      	movs	r2, r5
 80011ea:	4019      	ands	r1, r3
 80011ec:	d057      	beq.n	800129e <__aeabi_fsub+0x186>
 80011ee:	210f      	movs	r1, #15
 80011f0:	4019      	ands	r1, r3
 80011f2:	2904      	cmp	r1, #4
 80011f4:	d000      	beq.n	80011f8 <__aeabi_fsub+0xe0>
 80011f6:	3304      	adds	r3, #4
 80011f8:	0159      	lsls	r1, r3, #5
 80011fa:	d550      	bpl.n	800129e <__aeabi_fsub+0x186>
 80011fc:	1c50      	adds	r0, r2, #1
 80011fe:	2afe      	cmp	r2, #254	@ 0xfe
 8001200:	d045      	beq.n	800128e <__aeabi_fsub+0x176>
 8001202:	019b      	lsls	r3, r3, #6
 8001204:	b2c0      	uxtb	r0, r0
 8001206:	0a5b      	lsrs	r3, r3, #9
 8001208:	05c0      	lsls	r0, r0, #23
 800120a:	4318      	orrs	r0, r3
 800120c:	07e4      	lsls	r4, r4, #31
 800120e:	4320      	orrs	r0, r4
 8001210:	bcc0      	pop	{r6, r7}
 8001212:	46b9      	mov	r9, r7
 8001214:	46b0      	mov	r8, r6
 8001216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001218:	2201      	movs	r2, #1
 800121a:	4051      	eors	r1, r2
 800121c:	428c      	cmp	r4, r1
 800121e:	d1ba      	bne.n	8001196 <__aeabi_fsub+0x7e>
 8001220:	464a      	mov	r2, r9
 8001222:	2a00      	cmp	r2, #0
 8001224:	d010      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001226:	2d00      	cmp	r5, #0
 8001228:	d100      	bne.n	800122c <__aeabi_fsub+0x114>
 800122a:	e098      	b.n	800135e <__aeabi_fsub+0x246>
 800122c:	2300      	movs	r3, #0
 800122e:	e7bb      	b.n	80011a8 <__aeabi_fsub+0x90>
 8001230:	2e00      	cmp	r6, #0
 8001232:	d034      	beq.n	800129e <__aeabi_fsub+0x186>
 8001234:	1e51      	subs	r1, r2, #1
 8001236:	2a01      	cmp	r2, #1
 8001238:	d06e      	beq.n	8001318 <__aeabi_fsub+0x200>
 800123a:	2aff      	cmp	r2, #255	@ 0xff
 800123c:	d0b4      	beq.n	80011a8 <__aeabi_fsub+0x90>
 800123e:	000a      	movs	r2, r1
 8001240:	e79c      	b.n	800117c <__aeabi_fsub+0x64>
 8001242:	2a00      	cmp	r2, #0
 8001244:	d000      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001246:	e088      	b.n	800135a <__aeabi_fsub+0x242>
 8001248:	20fe      	movs	r0, #254	@ 0xfe
 800124a:	1c6a      	adds	r2, r5, #1
 800124c:	4210      	tst	r0, r2
 800124e:	d000      	beq.n	8001252 <__aeabi_fsub+0x13a>
 8001250:	e092      	b.n	8001378 <__aeabi_fsub+0x260>
 8001252:	2d00      	cmp	r5, #0
 8001254:	d000      	beq.n	8001258 <__aeabi_fsub+0x140>
 8001256:	e0a4      	b.n	80013a2 <__aeabi_fsub+0x28a>
 8001258:	2b00      	cmp	r3, #0
 800125a:	d100      	bne.n	800125e <__aeabi_fsub+0x146>
 800125c:	e0cb      	b.n	80013f6 <__aeabi_fsub+0x2de>
 800125e:	2e00      	cmp	r6, #0
 8001260:	d000      	beq.n	8001264 <__aeabi_fsub+0x14c>
 8001262:	e0ca      	b.n	80013fa <__aeabi_fsub+0x2e2>
 8001264:	2200      	movs	r2, #0
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	025b      	lsls	r3, r3, #9
 800126a:	0a5b      	lsrs	r3, r3, #9
 800126c:	b2d0      	uxtb	r0, r2
 800126e:	e7cb      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001270:	0031      	movs	r1, r6
 8001272:	2020      	movs	r0, #32
 8001274:	40d1      	lsrs	r1, r2
 8001276:	1a82      	subs	r2, r0, r2
 8001278:	4096      	lsls	r6, r2
 800127a:	0032      	movs	r2, r6
 800127c:	1e50      	subs	r0, r2, #1
 800127e:	4182      	sbcs	r2, r0
 8001280:	430a      	orrs	r2, r1
 8001282:	189b      	adds	r3, r3, r2
 8001284:	015a      	lsls	r2, r3, #5
 8001286:	d5ae      	bpl.n	80011e6 <__aeabi_fsub+0xce>
 8001288:	1c6a      	adds	r2, r5, #1
 800128a:	2dfe      	cmp	r5, #254	@ 0xfe
 800128c:	d14a      	bne.n	8001324 <__aeabi_fsub+0x20c>
 800128e:	20ff      	movs	r0, #255	@ 0xff
 8001290:	2300      	movs	r3, #0
 8001292:	e7b9      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001294:	22ff      	movs	r2, #255	@ 0xff
 8001296:	2b00      	cmp	r3, #0
 8001298:	d14b      	bne.n	8001332 <__aeabi_fsub+0x21a>
 800129a:	000c      	movs	r4, r1
 800129c:	0033      	movs	r3, r6
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	2aff      	cmp	r2, #255	@ 0xff
 80012a2:	d100      	bne.n	80012a6 <__aeabi_fsub+0x18e>
 80012a4:	e781      	b.n	80011aa <__aeabi_fsub+0x92>
 80012a6:	e7df      	b.n	8001268 <__aeabi_fsub+0x150>
 80012a8:	019f      	lsls	r7, r3, #6
 80012aa:	09bf      	lsrs	r7, r7, #6
 80012ac:	0038      	movs	r0, r7
 80012ae:	f002 f923 	bl	80034f8 <__clzsi2>
 80012b2:	3805      	subs	r0, #5
 80012b4:	4087      	lsls	r7, r0
 80012b6:	4285      	cmp	r5, r0
 80012b8:	dc21      	bgt.n	80012fe <__aeabi_fsub+0x1e6>
 80012ba:	003b      	movs	r3, r7
 80012bc:	2120      	movs	r1, #32
 80012be:	1b42      	subs	r2, r0, r5
 80012c0:	3201      	adds	r2, #1
 80012c2:	40d3      	lsrs	r3, r2
 80012c4:	1a8a      	subs	r2, r1, r2
 80012c6:	4097      	lsls	r7, r2
 80012c8:	1e7a      	subs	r2, r7, #1
 80012ca:	4197      	sbcs	r7, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	433b      	orrs	r3, r7
 80012d0:	0759      	lsls	r1, r3, #29
 80012d2:	d000      	beq.n	80012d6 <__aeabi_fsub+0x1be>
 80012d4:	e78b      	b.n	80011ee <__aeabi_fsub+0xd6>
 80012d6:	e78f      	b.n	80011f8 <__aeabi_fsub+0xe0>
 80012d8:	20fe      	movs	r0, #254	@ 0xfe
 80012da:	1c6a      	adds	r2, r5, #1
 80012dc:	4210      	tst	r0, r2
 80012de:	d112      	bne.n	8001306 <__aeabi_fsub+0x1ee>
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d152      	bne.n	800138a <__aeabi_fsub+0x272>
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d07c      	beq.n	80013e2 <__aeabi_fsub+0x2ca>
 80012e8:	2e00      	cmp	r6, #0
 80012ea:	d0bb      	beq.n	8001264 <__aeabi_fsub+0x14c>
 80012ec:	1b9a      	subs	r2, r3, r6
 80012ee:	0150      	lsls	r0, r2, #5
 80012f0:	d400      	bmi.n	80012f4 <__aeabi_fsub+0x1dc>
 80012f2:	e08b      	b.n	800140c <__aeabi_fsub+0x2f4>
 80012f4:	2401      	movs	r4, #1
 80012f6:	2200      	movs	r2, #0
 80012f8:	1af3      	subs	r3, r6, r3
 80012fa:	400c      	ands	r4, r1
 80012fc:	e7e8      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 80012fe:	4b56      	ldr	r3, [pc, #344]	@ (8001458 <__aeabi_fsub+0x340>)
 8001300:	1a2a      	subs	r2, r5, r0
 8001302:	403b      	ands	r3, r7
 8001304:	e7e4      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001306:	1b9f      	subs	r7, r3, r6
 8001308:	017a      	lsls	r2, r7, #5
 800130a:	d446      	bmi.n	800139a <__aeabi_fsub+0x282>
 800130c:	2f00      	cmp	r7, #0
 800130e:	d1cd      	bne.n	80012ac <__aeabi_fsub+0x194>
 8001310:	2400      	movs	r4, #0
 8001312:	2000      	movs	r0, #0
 8001314:	2300      	movs	r3, #0
 8001316:	e777      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001318:	199b      	adds	r3, r3, r6
 800131a:	2501      	movs	r5, #1
 800131c:	3201      	adds	r2, #1
 800131e:	0159      	lsls	r1, r3, #5
 8001320:	d400      	bmi.n	8001324 <__aeabi_fsub+0x20c>
 8001322:	e760      	b.n	80011e6 <__aeabi_fsub+0xce>
 8001324:	2101      	movs	r1, #1
 8001326:	484d      	ldr	r0, [pc, #308]	@ (800145c <__aeabi_fsub+0x344>)
 8001328:	4019      	ands	r1, r3
 800132a:	085b      	lsrs	r3, r3, #1
 800132c:	4003      	ands	r3, r0
 800132e:	430b      	orrs	r3, r1
 8001330:	e7ce      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001332:	1e57      	subs	r7, r2, #1
 8001334:	2a01      	cmp	r2, #1
 8001336:	d05a      	beq.n	80013ee <__aeabi_fsub+0x2d6>
 8001338:	000c      	movs	r4, r1
 800133a:	2aff      	cmp	r2, #255	@ 0xff
 800133c:	d033      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800133e:	2201      	movs	r2, #1
 8001340:	2f1b      	cmp	r7, #27
 8001342:	dc07      	bgt.n	8001354 <__aeabi_fsub+0x23c>
 8001344:	2120      	movs	r1, #32
 8001346:	1bc9      	subs	r1, r1, r7
 8001348:	001a      	movs	r2, r3
 800134a:	408b      	lsls	r3, r1
 800134c:	40fa      	lsrs	r2, r7
 800134e:	1e59      	subs	r1, r3, #1
 8001350:	418b      	sbcs	r3, r1
 8001352:	431a      	orrs	r2, r3
 8001354:	0005      	movs	r5, r0
 8001356:	1ab3      	subs	r3, r6, r2
 8001358:	e743      	b.n	80011e2 <__aeabi_fsub+0xca>
 800135a:	2d00      	cmp	r5, #0
 800135c:	d123      	bne.n	80013a6 <__aeabi_fsub+0x28e>
 800135e:	22ff      	movs	r2, #255	@ 0xff
 8001360:	2b00      	cmp	r3, #0
 8001362:	d09b      	beq.n	800129c <__aeabi_fsub+0x184>
 8001364:	1e51      	subs	r1, r2, #1
 8001366:	2a01      	cmp	r2, #1
 8001368:	d0d6      	beq.n	8001318 <__aeabi_fsub+0x200>
 800136a:	2aff      	cmp	r2, #255	@ 0xff
 800136c:	d01b      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800136e:	291b      	cmp	r1, #27
 8001370:	dd2c      	ble.n	80013cc <__aeabi_fsub+0x2b4>
 8001372:	0002      	movs	r2, r0
 8001374:	1c73      	adds	r3, r6, #1
 8001376:	e73a      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001378:	2aff      	cmp	r2, #255	@ 0xff
 800137a:	d088      	beq.n	800128e <__aeabi_fsub+0x176>
 800137c:	199b      	adds	r3, r3, r6
 800137e:	085b      	lsrs	r3, r3, #1
 8001380:	0759      	lsls	r1, r3, #29
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x26e>
 8001384:	e733      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001386:	08db      	lsrs	r3, r3, #3
 8001388:	e76e      	b.n	8001268 <__aeabi_fsub+0x150>
 800138a:	2b00      	cmp	r3, #0
 800138c:	d110      	bne.n	80013b0 <__aeabi_fsub+0x298>
 800138e:	2e00      	cmp	r6, #0
 8001390:	d043      	beq.n	800141a <__aeabi_fsub+0x302>
 8001392:	2401      	movs	r4, #1
 8001394:	0033      	movs	r3, r6
 8001396:	400c      	ands	r4, r1
 8001398:	e706      	b.n	80011a8 <__aeabi_fsub+0x90>
 800139a:	2401      	movs	r4, #1
 800139c:	1af7      	subs	r7, r6, r3
 800139e:	400c      	ands	r4, r1
 80013a0:	e784      	b.n	80012ac <__aeabi_fsub+0x194>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d104      	bne.n	80013b0 <__aeabi_fsub+0x298>
 80013a6:	0033      	movs	r3, r6
 80013a8:	e6fe      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013aa:	2501      	movs	r5, #1
 80013ac:	1b9b      	subs	r3, r3, r6
 80013ae:	e718      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013b0:	2e00      	cmp	r6, #0
 80013b2:	d100      	bne.n	80013b6 <__aeabi_fsub+0x29e>
 80013b4:	e6f8      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013b6:	2280      	movs	r2, #128	@ 0x80
 80013b8:	03d2      	lsls	r2, r2, #15
 80013ba:	4297      	cmp	r7, r2
 80013bc:	d304      	bcc.n	80013c8 <__aeabi_fsub+0x2b0>
 80013be:	4594      	cmp	ip, r2
 80013c0:	d202      	bcs.n	80013c8 <__aeabi_fsub+0x2b0>
 80013c2:	2401      	movs	r4, #1
 80013c4:	0033      	movs	r3, r6
 80013c6:	400c      	ands	r4, r1
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	e6f1      	b.n	80011b0 <__aeabi_fsub+0x98>
 80013cc:	001a      	movs	r2, r3
 80013ce:	2520      	movs	r5, #32
 80013d0:	40ca      	lsrs	r2, r1
 80013d2:	1a69      	subs	r1, r5, r1
 80013d4:	408b      	lsls	r3, r1
 80013d6:	1e59      	subs	r1, r3, #1
 80013d8:	418b      	sbcs	r3, r1
 80013da:	4313      	orrs	r3, r2
 80013dc:	0005      	movs	r5, r0
 80013de:	199b      	adds	r3, r3, r6
 80013e0:	e750      	b.n	8001284 <__aeabi_fsub+0x16c>
 80013e2:	2e00      	cmp	r6, #0
 80013e4:	d094      	beq.n	8001310 <__aeabi_fsub+0x1f8>
 80013e6:	2401      	movs	r4, #1
 80013e8:	0033      	movs	r3, r6
 80013ea:	400c      	ands	r4, r1
 80013ec:	e73a      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013ee:	000c      	movs	r4, r1
 80013f0:	2501      	movs	r5, #1
 80013f2:	1af3      	subs	r3, r6, r3
 80013f4:	e6f5      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013f6:	0033      	movs	r3, r6
 80013f8:	e734      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013fa:	199b      	adds	r3, r3, r6
 80013fc:	2200      	movs	r2, #0
 80013fe:	0159      	lsls	r1, r3, #5
 8001400:	d5c1      	bpl.n	8001386 <__aeabi_fsub+0x26e>
 8001402:	4a15      	ldr	r2, [pc, #84]	@ (8001458 <__aeabi_fsub+0x340>)
 8001404:	4013      	ands	r3, r2
 8001406:	08db      	lsrs	r3, r3, #3
 8001408:	2201      	movs	r2, #1
 800140a:	e72d      	b.n	8001268 <__aeabi_fsub+0x150>
 800140c:	2a00      	cmp	r2, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_fsub+0x2fa>
 8001410:	e77e      	b.n	8001310 <__aeabi_fsub+0x1f8>
 8001412:	0013      	movs	r3, r2
 8001414:	2200      	movs	r2, #0
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	e726      	b.n	8001268 <__aeabi_fsub+0x150>
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	2400      	movs	r4, #0
 800141e:	20ff      	movs	r0, #255	@ 0xff
 8001420:	03db      	lsls	r3, r3, #15
 8001422:	e6f1      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d100      	bne.n	800142a <__aeabi_fsub+0x312>
 8001428:	e756      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800142a:	1b47      	subs	r7, r0, r5
 800142c:	003a      	movs	r2, r7
 800142e:	2d00      	cmp	r5, #0
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x31c>
 8001432:	e730      	b.n	8001296 <__aeabi_fsub+0x17e>
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	04d2      	lsls	r2, r2, #19
 8001438:	000c      	movs	r4, r1
 800143a:	4313      	orrs	r3, r2
 800143c:	e77f      	b.n	800133e <__aeabi_fsub+0x226>
 800143e:	2a00      	cmp	r2, #0
 8001440:	d100      	bne.n	8001444 <__aeabi_fsub+0x32c>
 8001442:	e701      	b.n	8001248 <__aeabi_fsub+0x130>
 8001444:	1b41      	subs	r1, r0, r5
 8001446:	2d00      	cmp	r5, #0
 8001448:	d101      	bne.n	800144e <__aeabi_fsub+0x336>
 800144a:	000a      	movs	r2, r1
 800144c:	e788      	b.n	8001360 <__aeabi_fsub+0x248>
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	04d2      	lsls	r2, r2, #19
 8001452:	4313      	orrs	r3, r2
 8001454:	e78b      	b.n	800136e <__aeabi_fsub+0x256>
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	fbffffff 	.word	0xfbffffff
 800145c:	7dffffff 	.word	0x7dffffff

08001460 <__aeabi_fcmpun>:
 8001460:	0243      	lsls	r3, r0, #9
 8001462:	024a      	lsls	r2, r1, #9
 8001464:	0040      	lsls	r0, r0, #1
 8001466:	0049      	lsls	r1, r1, #1
 8001468:	0a5b      	lsrs	r3, r3, #9
 800146a:	0a52      	lsrs	r2, r2, #9
 800146c:	0e09      	lsrs	r1, r1, #24
 800146e:	0e00      	lsrs	r0, r0, #24
 8001470:	28ff      	cmp	r0, #255	@ 0xff
 8001472:	d006      	beq.n	8001482 <__aeabi_fcmpun+0x22>
 8001474:	2000      	movs	r0, #0
 8001476:	29ff      	cmp	r1, #255	@ 0xff
 8001478:	d102      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 800147a:	1e53      	subs	r3, r2, #1
 800147c:	419a      	sbcs	r2, r3
 800147e:	0010      	movs	r0, r2
 8001480:	4770      	bx	lr
 8001482:	38fe      	subs	r0, #254	@ 0xfe
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1fb      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 8001488:	e7f4      	b.n	8001474 <__aeabi_fcmpun+0x14>
 800148a:	46c0      	nop			@ (mov r8, r8)

0800148c <__aeabi_f2iz>:
 800148c:	0241      	lsls	r1, r0, #9
 800148e:	0042      	lsls	r2, r0, #1
 8001490:	0fc3      	lsrs	r3, r0, #31
 8001492:	0a49      	lsrs	r1, r1, #9
 8001494:	2000      	movs	r0, #0
 8001496:	0e12      	lsrs	r2, r2, #24
 8001498:	2a7e      	cmp	r2, #126	@ 0x7e
 800149a:	dd03      	ble.n	80014a4 <__aeabi_f2iz+0x18>
 800149c:	2a9d      	cmp	r2, #157	@ 0x9d
 800149e:	dd02      	ble.n	80014a6 <__aeabi_f2iz+0x1a>
 80014a0:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <__aeabi_f2iz+0x3c>)
 80014a2:	1898      	adds	r0, r3, r2
 80014a4:	4770      	bx	lr
 80014a6:	2080      	movs	r0, #128	@ 0x80
 80014a8:	0400      	lsls	r0, r0, #16
 80014aa:	4301      	orrs	r1, r0
 80014ac:	2a95      	cmp	r2, #149	@ 0x95
 80014ae:	dc07      	bgt.n	80014c0 <__aeabi_f2iz+0x34>
 80014b0:	2096      	movs	r0, #150	@ 0x96
 80014b2:	1a82      	subs	r2, r0, r2
 80014b4:	40d1      	lsrs	r1, r2
 80014b6:	4248      	negs	r0, r1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f3      	bne.n	80014a4 <__aeabi_f2iz+0x18>
 80014bc:	0008      	movs	r0, r1
 80014be:	e7f1      	b.n	80014a4 <__aeabi_f2iz+0x18>
 80014c0:	3a96      	subs	r2, #150	@ 0x96
 80014c2:	4091      	lsls	r1, r2
 80014c4:	e7f7      	b.n	80014b6 <__aeabi_f2iz+0x2a>
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	7fffffff 	.word	0x7fffffff

080014cc <__aeabi_i2f>:
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d013      	beq.n	80014fa <__aeabi_i2f+0x2e>
 80014d2:	17c3      	asrs	r3, r0, #31
 80014d4:	18c5      	adds	r5, r0, r3
 80014d6:	405d      	eors	r5, r3
 80014d8:	0fc4      	lsrs	r4, r0, #31
 80014da:	0028      	movs	r0, r5
 80014dc:	f002 f80c 	bl	80034f8 <__clzsi2>
 80014e0:	239e      	movs	r3, #158	@ 0x9e
 80014e2:	0001      	movs	r1, r0
 80014e4:	1a1b      	subs	r3, r3, r0
 80014e6:	2b96      	cmp	r3, #150	@ 0x96
 80014e8:	dc0f      	bgt.n	800150a <__aeabi_i2f+0x3e>
 80014ea:	2808      	cmp	r0, #8
 80014ec:	d034      	beq.n	8001558 <__aeabi_i2f+0x8c>
 80014ee:	3908      	subs	r1, #8
 80014f0:	408d      	lsls	r5, r1
 80014f2:	026d      	lsls	r5, r5, #9
 80014f4:	0a6d      	lsrs	r5, r5, #9
 80014f6:	b2d8      	uxtb	r0, r3
 80014f8:	e002      	b.n	8001500 <__aeabi_i2f+0x34>
 80014fa:	2400      	movs	r4, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	2500      	movs	r5, #0
 8001500:	05c0      	lsls	r0, r0, #23
 8001502:	4328      	orrs	r0, r5
 8001504:	07e4      	lsls	r4, r4, #31
 8001506:	4320      	orrs	r0, r4
 8001508:	bd70      	pop	{r4, r5, r6, pc}
 800150a:	2b99      	cmp	r3, #153	@ 0x99
 800150c:	dc16      	bgt.n	800153c <__aeabi_i2f+0x70>
 800150e:	1f42      	subs	r2, r0, #5
 8001510:	2805      	cmp	r0, #5
 8001512:	d000      	beq.n	8001516 <__aeabi_i2f+0x4a>
 8001514:	4095      	lsls	r5, r2
 8001516:	002a      	movs	r2, r5
 8001518:	4811      	ldr	r0, [pc, #68]	@ (8001560 <__aeabi_i2f+0x94>)
 800151a:	4002      	ands	r2, r0
 800151c:	076e      	lsls	r6, r5, #29
 800151e:	d009      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001520:	260f      	movs	r6, #15
 8001522:	4035      	ands	r5, r6
 8001524:	2d04      	cmp	r5, #4
 8001526:	d005      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001528:	3204      	adds	r2, #4
 800152a:	0155      	lsls	r5, r2, #5
 800152c:	d502      	bpl.n	8001534 <__aeabi_i2f+0x68>
 800152e:	239f      	movs	r3, #159	@ 0x9f
 8001530:	4002      	ands	r2, r0
 8001532:	1a5b      	subs	r3, r3, r1
 8001534:	0192      	lsls	r2, r2, #6
 8001536:	0a55      	lsrs	r5, r2, #9
 8001538:	b2d8      	uxtb	r0, r3
 800153a:	e7e1      	b.n	8001500 <__aeabi_i2f+0x34>
 800153c:	2205      	movs	r2, #5
 800153e:	1a12      	subs	r2, r2, r0
 8001540:	0028      	movs	r0, r5
 8001542:	40d0      	lsrs	r0, r2
 8001544:	0002      	movs	r2, r0
 8001546:	0008      	movs	r0, r1
 8001548:	301b      	adds	r0, #27
 800154a:	4085      	lsls	r5, r0
 800154c:	0028      	movs	r0, r5
 800154e:	1e45      	subs	r5, r0, #1
 8001550:	41a8      	sbcs	r0, r5
 8001552:	4302      	orrs	r2, r0
 8001554:	0015      	movs	r5, r2
 8001556:	e7de      	b.n	8001516 <__aeabi_i2f+0x4a>
 8001558:	026d      	lsls	r5, r5, #9
 800155a:	2096      	movs	r0, #150	@ 0x96
 800155c:	0a6d      	lsrs	r5, r5, #9
 800155e:	e7cf      	b.n	8001500 <__aeabi_i2f+0x34>
 8001560:	fbffffff 	.word	0xfbffffff

08001564 <__aeabi_ui2f>:
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	1e04      	subs	r4, r0, #0
 8001568:	d00e      	beq.n	8001588 <__aeabi_ui2f+0x24>
 800156a:	f001 ffc5 	bl	80034f8 <__clzsi2>
 800156e:	239e      	movs	r3, #158	@ 0x9e
 8001570:	0001      	movs	r1, r0
 8001572:	1a1b      	subs	r3, r3, r0
 8001574:	2b96      	cmp	r3, #150	@ 0x96
 8001576:	dc0c      	bgt.n	8001592 <__aeabi_ui2f+0x2e>
 8001578:	2808      	cmp	r0, #8
 800157a:	d02f      	beq.n	80015dc <__aeabi_ui2f+0x78>
 800157c:	3908      	subs	r1, #8
 800157e:	408c      	lsls	r4, r1
 8001580:	0264      	lsls	r4, r4, #9
 8001582:	0a64      	lsrs	r4, r4, #9
 8001584:	b2d8      	uxtb	r0, r3
 8001586:	e001      	b.n	800158c <__aeabi_ui2f+0x28>
 8001588:	2000      	movs	r0, #0
 800158a:	2400      	movs	r4, #0
 800158c:	05c0      	lsls	r0, r0, #23
 800158e:	4320      	orrs	r0, r4
 8001590:	bd70      	pop	{r4, r5, r6, pc}
 8001592:	2b99      	cmp	r3, #153	@ 0x99
 8001594:	dc16      	bgt.n	80015c4 <__aeabi_ui2f+0x60>
 8001596:	1f42      	subs	r2, r0, #5
 8001598:	2805      	cmp	r0, #5
 800159a:	d000      	beq.n	800159e <__aeabi_ui2f+0x3a>
 800159c:	4094      	lsls	r4, r2
 800159e:	0022      	movs	r2, r4
 80015a0:	4810      	ldr	r0, [pc, #64]	@ (80015e4 <__aeabi_ui2f+0x80>)
 80015a2:	4002      	ands	r2, r0
 80015a4:	0765      	lsls	r5, r4, #29
 80015a6:	d009      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015a8:	250f      	movs	r5, #15
 80015aa:	402c      	ands	r4, r5
 80015ac:	2c04      	cmp	r4, #4
 80015ae:	d005      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015b0:	3204      	adds	r2, #4
 80015b2:	0154      	lsls	r4, r2, #5
 80015b4:	d502      	bpl.n	80015bc <__aeabi_ui2f+0x58>
 80015b6:	239f      	movs	r3, #159	@ 0x9f
 80015b8:	4002      	ands	r2, r0
 80015ba:	1a5b      	subs	r3, r3, r1
 80015bc:	0192      	lsls	r2, r2, #6
 80015be:	0a54      	lsrs	r4, r2, #9
 80015c0:	b2d8      	uxtb	r0, r3
 80015c2:	e7e3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015c4:	0002      	movs	r2, r0
 80015c6:	0020      	movs	r0, r4
 80015c8:	321b      	adds	r2, #27
 80015ca:	4090      	lsls	r0, r2
 80015cc:	0002      	movs	r2, r0
 80015ce:	1e50      	subs	r0, r2, #1
 80015d0:	4182      	sbcs	r2, r0
 80015d2:	2005      	movs	r0, #5
 80015d4:	1a40      	subs	r0, r0, r1
 80015d6:	40c4      	lsrs	r4, r0
 80015d8:	4314      	orrs	r4, r2
 80015da:	e7e0      	b.n	800159e <__aeabi_ui2f+0x3a>
 80015dc:	0264      	lsls	r4, r4, #9
 80015de:	2096      	movs	r0, #150	@ 0x96
 80015e0:	0a64      	lsrs	r4, r4, #9
 80015e2:	e7d3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015e4:	fbffffff 	.word	0xfbffffff

080015e8 <__aeabi_dadd>:
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	4657      	mov	r7, sl
 80015ec:	464e      	mov	r6, r9
 80015ee:	4645      	mov	r5, r8
 80015f0:	46de      	mov	lr, fp
 80015f2:	b5e0      	push	{r5, r6, r7, lr}
 80015f4:	b083      	sub	sp, #12
 80015f6:	9000      	str	r0, [sp, #0]
 80015f8:	9101      	str	r1, [sp, #4]
 80015fa:	030c      	lsls	r4, r1, #12
 80015fc:	004f      	lsls	r7, r1, #1
 80015fe:	0fce      	lsrs	r6, r1, #31
 8001600:	0a61      	lsrs	r1, r4, #9
 8001602:	9c00      	ldr	r4, [sp, #0]
 8001604:	031d      	lsls	r5, r3, #12
 8001606:	0f64      	lsrs	r4, r4, #29
 8001608:	430c      	orrs	r4, r1
 800160a:	9900      	ldr	r1, [sp, #0]
 800160c:	9200      	str	r2, [sp, #0]
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	00c8      	lsls	r0, r1, #3
 8001612:	0059      	lsls	r1, r3, #1
 8001614:	0d4b      	lsrs	r3, r1, #21
 8001616:	4699      	mov	r9, r3
 8001618:	9a00      	ldr	r2, [sp, #0]
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	0a6d      	lsrs	r5, r5, #9
 800161e:	0fd9      	lsrs	r1, r3, #31
 8001620:	0f53      	lsrs	r3, r2, #29
 8001622:	432b      	orrs	r3, r5
 8001624:	469a      	mov	sl, r3
 8001626:	9b00      	ldr	r3, [sp, #0]
 8001628:	0d7f      	lsrs	r7, r7, #21
 800162a:	00da      	lsls	r2, r3, #3
 800162c:	4694      	mov	ip, r2
 800162e:	464a      	mov	r2, r9
 8001630:	46b0      	mov	r8, r6
 8001632:	1aba      	subs	r2, r7, r2
 8001634:	428e      	cmp	r6, r1
 8001636:	d100      	bne.n	800163a <__aeabi_dadd+0x52>
 8001638:	e0b0      	b.n	800179c <__aeabi_dadd+0x1b4>
 800163a:	2a00      	cmp	r2, #0
 800163c:	dc00      	bgt.n	8001640 <__aeabi_dadd+0x58>
 800163e:	e078      	b.n	8001732 <__aeabi_dadd+0x14a>
 8001640:	4649      	mov	r1, r9
 8001642:	2900      	cmp	r1, #0
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x60>
 8001646:	e0e9      	b.n	800181c <__aeabi_dadd+0x234>
 8001648:	49c9      	ldr	r1, [pc, #804]	@ (8001970 <__aeabi_dadd+0x388>)
 800164a:	428f      	cmp	r7, r1
 800164c:	d100      	bne.n	8001650 <__aeabi_dadd+0x68>
 800164e:	e195      	b.n	800197c <__aeabi_dadd+0x394>
 8001650:	2501      	movs	r5, #1
 8001652:	2a38      	cmp	r2, #56	@ 0x38
 8001654:	dc16      	bgt.n	8001684 <__aeabi_dadd+0x9c>
 8001656:	2180      	movs	r1, #128	@ 0x80
 8001658:	4653      	mov	r3, sl
 800165a:	0409      	lsls	r1, r1, #16
 800165c:	430b      	orrs	r3, r1
 800165e:	469a      	mov	sl, r3
 8001660:	2a1f      	cmp	r2, #31
 8001662:	dd00      	ble.n	8001666 <__aeabi_dadd+0x7e>
 8001664:	e1e7      	b.n	8001a36 <__aeabi_dadd+0x44e>
 8001666:	2120      	movs	r1, #32
 8001668:	4655      	mov	r5, sl
 800166a:	1a8b      	subs	r3, r1, r2
 800166c:	4661      	mov	r1, ip
 800166e:	409d      	lsls	r5, r3
 8001670:	40d1      	lsrs	r1, r2
 8001672:	430d      	orrs	r5, r1
 8001674:	4661      	mov	r1, ip
 8001676:	4099      	lsls	r1, r3
 8001678:	1e4b      	subs	r3, r1, #1
 800167a:	4199      	sbcs	r1, r3
 800167c:	4653      	mov	r3, sl
 800167e:	40d3      	lsrs	r3, r2
 8001680:	430d      	orrs	r5, r1
 8001682:	1ae4      	subs	r4, r4, r3
 8001684:	1b45      	subs	r5, r0, r5
 8001686:	42a8      	cmp	r0, r5
 8001688:	4180      	sbcs	r0, r0
 800168a:	4240      	negs	r0, r0
 800168c:	1a24      	subs	r4, r4, r0
 800168e:	0223      	lsls	r3, r4, #8
 8001690:	d400      	bmi.n	8001694 <__aeabi_dadd+0xac>
 8001692:	e10f      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001694:	0264      	lsls	r4, r4, #9
 8001696:	0a64      	lsrs	r4, r4, #9
 8001698:	2c00      	cmp	r4, #0
 800169a:	d100      	bne.n	800169e <__aeabi_dadd+0xb6>
 800169c:	e139      	b.n	8001912 <__aeabi_dadd+0x32a>
 800169e:	0020      	movs	r0, r4
 80016a0:	f001 ff2a 	bl	80034f8 <__clzsi2>
 80016a4:	0003      	movs	r3, r0
 80016a6:	3b08      	subs	r3, #8
 80016a8:	2120      	movs	r1, #32
 80016aa:	0028      	movs	r0, r5
 80016ac:	1aca      	subs	r2, r1, r3
 80016ae:	40d0      	lsrs	r0, r2
 80016b0:	409c      	lsls	r4, r3
 80016b2:	0002      	movs	r2, r0
 80016b4:	409d      	lsls	r5, r3
 80016b6:	4322      	orrs	r2, r4
 80016b8:	429f      	cmp	r7, r3
 80016ba:	dd00      	ble.n	80016be <__aeabi_dadd+0xd6>
 80016bc:	e173      	b.n	80019a6 <__aeabi_dadd+0x3be>
 80016be:	1bd8      	subs	r0, r3, r7
 80016c0:	3001      	adds	r0, #1
 80016c2:	1a09      	subs	r1, r1, r0
 80016c4:	002c      	movs	r4, r5
 80016c6:	408d      	lsls	r5, r1
 80016c8:	40c4      	lsrs	r4, r0
 80016ca:	1e6b      	subs	r3, r5, #1
 80016cc:	419d      	sbcs	r5, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	40c2      	lsrs	r2, r0
 80016d2:	408b      	lsls	r3, r1
 80016d4:	4325      	orrs	r5, r4
 80016d6:	2700      	movs	r7, #0
 80016d8:	0014      	movs	r4, r2
 80016da:	431d      	orrs	r5, r3
 80016dc:	076b      	lsls	r3, r5, #29
 80016de:	d009      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e0:	230f      	movs	r3, #15
 80016e2:	402b      	ands	r3, r5
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d005      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e8:	1d2b      	adds	r3, r5, #4
 80016ea:	42ab      	cmp	r3, r5
 80016ec:	41ad      	sbcs	r5, r5
 80016ee:	426d      	negs	r5, r5
 80016f0:	1964      	adds	r4, r4, r5
 80016f2:	001d      	movs	r5, r3
 80016f4:	0223      	lsls	r3, r4, #8
 80016f6:	d400      	bmi.n	80016fa <__aeabi_dadd+0x112>
 80016f8:	e12d      	b.n	8001956 <__aeabi_dadd+0x36e>
 80016fa:	4a9d      	ldr	r2, [pc, #628]	@ (8001970 <__aeabi_dadd+0x388>)
 80016fc:	3701      	adds	r7, #1
 80016fe:	4297      	cmp	r7, r2
 8001700:	d100      	bne.n	8001704 <__aeabi_dadd+0x11c>
 8001702:	e0d3      	b.n	80018ac <__aeabi_dadd+0x2c4>
 8001704:	4646      	mov	r6, r8
 8001706:	499b      	ldr	r1, [pc, #620]	@ (8001974 <__aeabi_dadd+0x38c>)
 8001708:	08ed      	lsrs	r5, r5, #3
 800170a:	4021      	ands	r1, r4
 800170c:	074a      	lsls	r2, r1, #29
 800170e:	432a      	orrs	r2, r5
 8001710:	057c      	lsls	r4, r7, #21
 8001712:	024d      	lsls	r5, r1, #9
 8001714:	0b2d      	lsrs	r5, r5, #12
 8001716:	0d64      	lsrs	r4, r4, #21
 8001718:	0524      	lsls	r4, r4, #20
 800171a:	432c      	orrs	r4, r5
 800171c:	07f6      	lsls	r6, r6, #31
 800171e:	4334      	orrs	r4, r6
 8001720:	0010      	movs	r0, r2
 8001722:	0021      	movs	r1, r4
 8001724:	b003      	add	sp, #12
 8001726:	bcf0      	pop	{r4, r5, r6, r7}
 8001728:	46bb      	mov	fp, r7
 800172a:	46b2      	mov	sl, r6
 800172c:	46a9      	mov	r9, r5
 800172e:	46a0      	mov	r8, r4
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001732:	2a00      	cmp	r2, #0
 8001734:	d100      	bne.n	8001738 <__aeabi_dadd+0x150>
 8001736:	e084      	b.n	8001842 <__aeabi_dadd+0x25a>
 8001738:	464a      	mov	r2, r9
 800173a:	1bd2      	subs	r2, r2, r7
 800173c:	2f00      	cmp	r7, #0
 800173e:	d000      	beq.n	8001742 <__aeabi_dadd+0x15a>
 8001740:	e16d      	b.n	8001a1e <__aeabi_dadd+0x436>
 8001742:	0025      	movs	r5, r4
 8001744:	4305      	orrs	r5, r0
 8001746:	d100      	bne.n	800174a <__aeabi_dadd+0x162>
 8001748:	e127      	b.n	800199a <__aeabi_dadd+0x3b2>
 800174a:	1e56      	subs	r6, r2, #1
 800174c:	2a01      	cmp	r2, #1
 800174e:	d100      	bne.n	8001752 <__aeabi_dadd+0x16a>
 8001750:	e23b      	b.n	8001bca <__aeabi_dadd+0x5e2>
 8001752:	4d87      	ldr	r5, [pc, #540]	@ (8001970 <__aeabi_dadd+0x388>)
 8001754:	42aa      	cmp	r2, r5
 8001756:	d100      	bne.n	800175a <__aeabi_dadd+0x172>
 8001758:	e26a      	b.n	8001c30 <__aeabi_dadd+0x648>
 800175a:	2501      	movs	r5, #1
 800175c:	2e38      	cmp	r6, #56	@ 0x38
 800175e:	dc12      	bgt.n	8001786 <__aeabi_dadd+0x19e>
 8001760:	0032      	movs	r2, r6
 8001762:	2a1f      	cmp	r2, #31
 8001764:	dd00      	ble.n	8001768 <__aeabi_dadd+0x180>
 8001766:	e1f8      	b.n	8001b5a <__aeabi_dadd+0x572>
 8001768:	2620      	movs	r6, #32
 800176a:	0025      	movs	r5, r4
 800176c:	1ab6      	subs	r6, r6, r2
 800176e:	0007      	movs	r7, r0
 8001770:	4653      	mov	r3, sl
 8001772:	40b0      	lsls	r0, r6
 8001774:	40d4      	lsrs	r4, r2
 8001776:	40b5      	lsls	r5, r6
 8001778:	40d7      	lsrs	r7, r2
 800177a:	1e46      	subs	r6, r0, #1
 800177c:	41b0      	sbcs	r0, r6
 800177e:	1b1b      	subs	r3, r3, r4
 8001780:	469a      	mov	sl, r3
 8001782:	433d      	orrs	r5, r7
 8001784:	4305      	orrs	r5, r0
 8001786:	4662      	mov	r2, ip
 8001788:	1b55      	subs	r5, r2, r5
 800178a:	45ac      	cmp	ip, r5
 800178c:	4192      	sbcs	r2, r2
 800178e:	4653      	mov	r3, sl
 8001790:	4252      	negs	r2, r2
 8001792:	000e      	movs	r6, r1
 8001794:	464f      	mov	r7, r9
 8001796:	4688      	mov	r8, r1
 8001798:	1a9c      	subs	r4, r3, r2
 800179a:	e778      	b.n	800168e <__aeabi_dadd+0xa6>
 800179c:	2a00      	cmp	r2, #0
 800179e:	dc00      	bgt.n	80017a2 <__aeabi_dadd+0x1ba>
 80017a0:	e08e      	b.n	80018c0 <__aeabi_dadd+0x2d8>
 80017a2:	4649      	mov	r1, r9
 80017a4:	2900      	cmp	r1, #0
 80017a6:	d175      	bne.n	8001894 <__aeabi_dadd+0x2ac>
 80017a8:	4661      	mov	r1, ip
 80017aa:	4653      	mov	r3, sl
 80017ac:	4319      	orrs	r1, r3
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dadd+0x1ca>
 80017b0:	e0f6      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80017b2:	1e51      	subs	r1, r2, #1
 80017b4:	2a01      	cmp	r2, #1
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x1d2>
 80017b8:	e191      	b.n	8001ade <__aeabi_dadd+0x4f6>
 80017ba:	4d6d      	ldr	r5, [pc, #436]	@ (8001970 <__aeabi_dadd+0x388>)
 80017bc:	42aa      	cmp	r2, r5
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x1da>
 80017c0:	e0dc      	b.n	800197c <__aeabi_dadd+0x394>
 80017c2:	2501      	movs	r5, #1
 80017c4:	2938      	cmp	r1, #56	@ 0x38
 80017c6:	dc14      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80017c8:	000a      	movs	r2, r1
 80017ca:	2a1f      	cmp	r2, #31
 80017cc:	dd00      	ble.n	80017d0 <__aeabi_dadd+0x1e8>
 80017ce:	e1a2      	b.n	8001b16 <__aeabi_dadd+0x52e>
 80017d0:	2120      	movs	r1, #32
 80017d2:	4653      	mov	r3, sl
 80017d4:	1a89      	subs	r1, r1, r2
 80017d6:	408b      	lsls	r3, r1
 80017d8:	001d      	movs	r5, r3
 80017da:	4663      	mov	r3, ip
 80017dc:	40d3      	lsrs	r3, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	4663      	mov	r3, ip
 80017e2:	408b      	lsls	r3, r1
 80017e4:	0019      	movs	r1, r3
 80017e6:	1e4b      	subs	r3, r1, #1
 80017e8:	4199      	sbcs	r1, r3
 80017ea:	4653      	mov	r3, sl
 80017ec:	40d3      	lsrs	r3, r2
 80017ee:	430d      	orrs	r5, r1
 80017f0:	18e4      	adds	r4, r4, r3
 80017f2:	182d      	adds	r5, r5, r0
 80017f4:	4285      	cmp	r5, r0
 80017f6:	4180      	sbcs	r0, r0
 80017f8:	4240      	negs	r0, r0
 80017fa:	1824      	adds	r4, r4, r0
 80017fc:	0223      	lsls	r3, r4, #8
 80017fe:	d559      	bpl.n	80018b4 <__aeabi_dadd+0x2cc>
 8001800:	4b5b      	ldr	r3, [pc, #364]	@ (8001970 <__aeabi_dadd+0x388>)
 8001802:	3701      	adds	r7, #1
 8001804:	429f      	cmp	r7, r3
 8001806:	d051      	beq.n	80018ac <__aeabi_dadd+0x2c4>
 8001808:	2101      	movs	r1, #1
 800180a:	4b5a      	ldr	r3, [pc, #360]	@ (8001974 <__aeabi_dadd+0x38c>)
 800180c:	086a      	lsrs	r2, r5, #1
 800180e:	401c      	ands	r4, r3
 8001810:	4029      	ands	r1, r5
 8001812:	430a      	orrs	r2, r1
 8001814:	07e5      	lsls	r5, r4, #31
 8001816:	4315      	orrs	r5, r2
 8001818:	0864      	lsrs	r4, r4, #1
 800181a:	e75f      	b.n	80016dc <__aeabi_dadd+0xf4>
 800181c:	4661      	mov	r1, ip
 800181e:	4653      	mov	r3, sl
 8001820:	4319      	orrs	r1, r3
 8001822:	d100      	bne.n	8001826 <__aeabi_dadd+0x23e>
 8001824:	e0bc      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001826:	1e51      	subs	r1, r2, #1
 8001828:	2a01      	cmp	r2, #1
 800182a:	d100      	bne.n	800182e <__aeabi_dadd+0x246>
 800182c:	e164      	b.n	8001af8 <__aeabi_dadd+0x510>
 800182e:	4d50      	ldr	r5, [pc, #320]	@ (8001970 <__aeabi_dadd+0x388>)
 8001830:	42aa      	cmp	r2, r5
 8001832:	d100      	bne.n	8001836 <__aeabi_dadd+0x24e>
 8001834:	e16a      	b.n	8001b0c <__aeabi_dadd+0x524>
 8001836:	2501      	movs	r5, #1
 8001838:	2938      	cmp	r1, #56	@ 0x38
 800183a:	dd00      	ble.n	800183e <__aeabi_dadd+0x256>
 800183c:	e722      	b.n	8001684 <__aeabi_dadd+0x9c>
 800183e:	000a      	movs	r2, r1
 8001840:	e70e      	b.n	8001660 <__aeabi_dadd+0x78>
 8001842:	4a4d      	ldr	r2, [pc, #308]	@ (8001978 <__aeabi_dadd+0x390>)
 8001844:	1c7d      	adds	r5, r7, #1
 8001846:	4215      	tst	r5, r2
 8001848:	d000      	beq.n	800184c <__aeabi_dadd+0x264>
 800184a:	e0d0      	b.n	80019ee <__aeabi_dadd+0x406>
 800184c:	0025      	movs	r5, r4
 800184e:	4662      	mov	r2, ip
 8001850:	4653      	mov	r3, sl
 8001852:	4305      	orrs	r5, r0
 8001854:	431a      	orrs	r2, r3
 8001856:	2f00      	cmp	r7, #0
 8001858:	d000      	beq.n	800185c <__aeabi_dadd+0x274>
 800185a:	e137      	b.n	8001acc <__aeabi_dadd+0x4e4>
 800185c:	2d00      	cmp	r5, #0
 800185e:	d100      	bne.n	8001862 <__aeabi_dadd+0x27a>
 8001860:	e1a8      	b.n	8001bb4 <__aeabi_dadd+0x5cc>
 8001862:	2a00      	cmp	r2, #0
 8001864:	d100      	bne.n	8001868 <__aeabi_dadd+0x280>
 8001866:	e16a      	b.n	8001b3e <__aeabi_dadd+0x556>
 8001868:	4663      	mov	r3, ip
 800186a:	1ac5      	subs	r5, r0, r3
 800186c:	4653      	mov	r3, sl
 800186e:	1ae2      	subs	r2, r4, r3
 8001870:	42a8      	cmp	r0, r5
 8001872:	419b      	sbcs	r3, r3
 8001874:	425b      	negs	r3, r3
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	021a      	lsls	r2, r3, #8
 800187a:	d400      	bmi.n	800187e <__aeabi_dadd+0x296>
 800187c:	e203      	b.n	8001c86 <__aeabi_dadd+0x69e>
 800187e:	4663      	mov	r3, ip
 8001880:	1a1d      	subs	r5, r3, r0
 8001882:	45ac      	cmp	ip, r5
 8001884:	4192      	sbcs	r2, r2
 8001886:	4653      	mov	r3, sl
 8001888:	4252      	negs	r2, r2
 800188a:	1b1c      	subs	r4, r3, r4
 800188c:	000e      	movs	r6, r1
 800188e:	4688      	mov	r8, r1
 8001890:	1aa4      	subs	r4, r4, r2
 8001892:	e723      	b.n	80016dc <__aeabi_dadd+0xf4>
 8001894:	4936      	ldr	r1, [pc, #216]	@ (8001970 <__aeabi_dadd+0x388>)
 8001896:	428f      	cmp	r7, r1
 8001898:	d070      	beq.n	800197c <__aeabi_dadd+0x394>
 800189a:	2501      	movs	r5, #1
 800189c:	2a38      	cmp	r2, #56	@ 0x38
 800189e:	dca8      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80018a0:	2180      	movs	r1, #128	@ 0x80
 80018a2:	4653      	mov	r3, sl
 80018a4:	0409      	lsls	r1, r1, #16
 80018a6:	430b      	orrs	r3, r1
 80018a8:	469a      	mov	sl, r3
 80018aa:	e78e      	b.n	80017ca <__aeabi_dadd+0x1e2>
 80018ac:	003c      	movs	r4, r7
 80018ae:	2500      	movs	r5, #0
 80018b0:	2200      	movs	r2, #0
 80018b2:	e731      	b.n	8001718 <__aeabi_dadd+0x130>
 80018b4:	2307      	movs	r3, #7
 80018b6:	402b      	ands	r3, r5
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d000      	beq.n	80018be <__aeabi_dadd+0x2d6>
 80018bc:	e710      	b.n	80016e0 <__aeabi_dadd+0xf8>
 80018be:	e093      	b.n	80019e8 <__aeabi_dadd+0x400>
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	d074      	beq.n	80019ae <__aeabi_dadd+0x3c6>
 80018c4:	464a      	mov	r2, r9
 80018c6:	1bd2      	subs	r2, r2, r7
 80018c8:	2f00      	cmp	r7, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_dadd+0x2e6>
 80018cc:	e0c7      	b.n	8001a5e <__aeabi_dadd+0x476>
 80018ce:	4928      	ldr	r1, [pc, #160]	@ (8001970 <__aeabi_dadd+0x388>)
 80018d0:	4589      	cmp	r9, r1
 80018d2:	d100      	bne.n	80018d6 <__aeabi_dadd+0x2ee>
 80018d4:	e185      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 80018d6:	2501      	movs	r5, #1
 80018d8:	2a38      	cmp	r2, #56	@ 0x38
 80018da:	dc12      	bgt.n	8001902 <__aeabi_dadd+0x31a>
 80018dc:	2180      	movs	r1, #128	@ 0x80
 80018de:	0409      	lsls	r1, r1, #16
 80018e0:	430c      	orrs	r4, r1
 80018e2:	2a1f      	cmp	r2, #31
 80018e4:	dd00      	ble.n	80018e8 <__aeabi_dadd+0x300>
 80018e6:	e1ab      	b.n	8001c40 <__aeabi_dadd+0x658>
 80018e8:	2120      	movs	r1, #32
 80018ea:	0025      	movs	r5, r4
 80018ec:	1a89      	subs	r1, r1, r2
 80018ee:	0007      	movs	r7, r0
 80018f0:	4088      	lsls	r0, r1
 80018f2:	408d      	lsls	r5, r1
 80018f4:	40d7      	lsrs	r7, r2
 80018f6:	1e41      	subs	r1, r0, #1
 80018f8:	4188      	sbcs	r0, r1
 80018fa:	40d4      	lsrs	r4, r2
 80018fc:	433d      	orrs	r5, r7
 80018fe:	4305      	orrs	r5, r0
 8001900:	44a2      	add	sl, r4
 8001902:	4465      	add	r5, ip
 8001904:	4565      	cmp	r5, ip
 8001906:	4192      	sbcs	r2, r2
 8001908:	4252      	negs	r2, r2
 800190a:	4452      	add	r2, sl
 800190c:	0014      	movs	r4, r2
 800190e:	464f      	mov	r7, r9
 8001910:	e774      	b.n	80017fc <__aeabi_dadd+0x214>
 8001912:	0028      	movs	r0, r5
 8001914:	f001 fdf0 	bl	80034f8 <__clzsi2>
 8001918:	0003      	movs	r3, r0
 800191a:	3318      	adds	r3, #24
 800191c:	2b1f      	cmp	r3, #31
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dadd+0x33a>
 8001920:	e6c2      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001922:	002a      	movs	r2, r5
 8001924:	3808      	subs	r0, #8
 8001926:	4082      	lsls	r2, r0
 8001928:	429f      	cmp	r7, r3
 800192a:	dd00      	ble.n	800192e <__aeabi_dadd+0x346>
 800192c:	e0a9      	b.n	8001a82 <__aeabi_dadd+0x49a>
 800192e:	1bdb      	subs	r3, r3, r7
 8001930:	1c58      	adds	r0, r3, #1
 8001932:	281f      	cmp	r0, #31
 8001934:	dc00      	bgt.n	8001938 <__aeabi_dadd+0x350>
 8001936:	e1ac      	b.n	8001c92 <__aeabi_dadd+0x6aa>
 8001938:	0015      	movs	r5, r2
 800193a:	3b1f      	subs	r3, #31
 800193c:	40dd      	lsrs	r5, r3
 800193e:	2820      	cmp	r0, #32
 8001940:	d005      	beq.n	800194e <__aeabi_dadd+0x366>
 8001942:	2340      	movs	r3, #64	@ 0x40
 8001944:	1a1b      	subs	r3, r3, r0
 8001946:	409a      	lsls	r2, r3
 8001948:	1e53      	subs	r3, r2, #1
 800194a:	419a      	sbcs	r2, r3
 800194c:	4315      	orrs	r5, r2
 800194e:	2307      	movs	r3, #7
 8001950:	2700      	movs	r7, #0
 8001952:	402b      	ands	r3, r5
 8001954:	e7b0      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001956:	08ed      	lsrs	r5, r5, #3
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <__aeabi_dadd+0x388>)
 800195a:	0762      	lsls	r2, r4, #29
 800195c:	432a      	orrs	r2, r5
 800195e:	08e4      	lsrs	r4, r4, #3
 8001960:	429f      	cmp	r7, r3
 8001962:	d00f      	beq.n	8001984 <__aeabi_dadd+0x39c>
 8001964:	0324      	lsls	r4, r4, #12
 8001966:	0b25      	lsrs	r5, r4, #12
 8001968:	057c      	lsls	r4, r7, #21
 800196a:	0d64      	lsrs	r4, r4, #21
 800196c:	e6d4      	b.n	8001718 <__aeabi_dadd+0x130>
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	000007ff 	.word	0x000007ff
 8001974:	ff7fffff 	.word	0xff7fffff
 8001978:	000007fe 	.word	0x000007fe
 800197c:	08c0      	lsrs	r0, r0, #3
 800197e:	0762      	lsls	r2, r4, #29
 8001980:	4302      	orrs	r2, r0
 8001982:	08e4      	lsrs	r4, r4, #3
 8001984:	0013      	movs	r3, r2
 8001986:	4323      	orrs	r3, r4
 8001988:	d100      	bne.n	800198c <__aeabi_dadd+0x3a4>
 800198a:	e186      	b.n	8001c9a <__aeabi_dadd+0x6b2>
 800198c:	2580      	movs	r5, #128	@ 0x80
 800198e:	032d      	lsls	r5, r5, #12
 8001990:	4325      	orrs	r5, r4
 8001992:	032d      	lsls	r5, r5, #12
 8001994:	4cc3      	ldr	r4, [pc, #780]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001996:	0b2d      	lsrs	r5, r5, #12
 8001998:	e6be      	b.n	8001718 <__aeabi_dadd+0x130>
 800199a:	4660      	mov	r0, ip
 800199c:	4654      	mov	r4, sl
 800199e:	000e      	movs	r6, r1
 80019a0:	0017      	movs	r7, r2
 80019a2:	08c5      	lsrs	r5, r0, #3
 80019a4:	e7d8      	b.n	8001958 <__aeabi_dadd+0x370>
 80019a6:	4cc0      	ldr	r4, [pc, #768]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019a8:	1aff      	subs	r7, r7, r3
 80019aa:	4014      	ands	r4, r2
 80019ac:	e696      	b.n	80016dc <__aeabi_dadd+0xf4>
 80019ae:	4abf      	ldr	r2, [pc, #764]	@ (8001cac <__aeabi_dadd+0x6c4>)
 80019b0:	1c79      	adds	r1, r7, #1
 80019b2:	4211      	tst	r1, r2
 80019b4:	d16b      	bne.n	8001a8e <__aeabi_dadd+0x4a6>
 80019b6:	0022      	movs	r2, r4
 80019b8:	4302      	orrs	r2, r0
 80019ba:	2f00      	cmp	r7, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dadd+0x3d8>
 80019be:	e0db      	b.n	8001b78 <__aeabi_dadd+0x590>
 80019c0:	2a00      	cmp	r2, #0
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dadd+0x3de>
 80019c4:	e12d      	b.n	8001c22 <__aeabi_dadd+0x63a>
 80019c6:	4662      	mov	r2, ip
 80019c8:	4653      	mov	r3, sl
 80019ca:	431a      	orrs	r2, r3
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dadd+0x3e8>
 80019ce:	e0b6      	b.n	8001b3e <__aeabi_dadd+0x556>
 80019d0:	4663      	mov	r3, ip
 80019d2:	18c5      	adds	r5, r0, r3
 80019d4:	4285      	cmp	r5, r0
 80019d6:	4180      	sbcs	r0, r0
 80019d8:	4454      	add	r4, sl
 80019da:	4240      	negs	r0, r0
 80019dc:	1824      	adds	r4, r4, r0
 80019de:	0223      	lsls	r3, r4, #8
 80019e0:	d502      	bpl.n	80019e8 <__aeabi_dadd+0x400>
 80019e2:	000f      	movs	r7, r1
 80019e4:	4bb0      	ldr	r3, [pc, #704]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019e6:	401c      	ands	r4, r3
 80019e8:	003a      	movs	r2, r7
 80019ea:	0028      	movs	r0, r5
 80019ec:	e7d8      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80019ee:	4662      	mov	r2, ip
 80019f0:	1a85      	subs	r5, r0, r2
 80019f2:	42a8      	cmp	r0, r5
 80019f4:	4192      	sbcs	r2, r2
 80019f6:	4653      	mov	r3, sl
 80019f8:	4252      	negs	r2, r2
 80019fa:	4691      	mov	r9, r2
 80019fc:	1ae3      	subs	r3, r4, r3
 80019fe:	001a      	movs	r2, r3
 8001a00:	464b      	mov	r3, r9
 8001a02:	1ad2      	subs	r2, r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	4691      	mov	r9, r2
 8001a08:	021a      	lsls	r2, r3, #8
 8001a0a:	d454      	bmi.n	8001ab6 <__aeabi_dadd+0x4ce>
 8001a0c:	464a      	mov	r2, r9
 8001a0e:	464c      	mov	r4, r9
 8001a10:	432a      	orrs	r2, r5
 8001a12:	d000      	beq.n	8001a16 <__aeabi_dadd+0x42e>
 8001a14:	e640      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001a16:	2600      	movs	r6, #0
 8001a18:	2400      	movs	r4, #0
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	e67c      	b.n	8001718 <__aeabi_dadd+0x130>
 8001a1e:	4da1      	ldr	r5, [pc, #644]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a20:	45a9      	cmp	r9, r5
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dadd+0x43e>
 8001a24:	e090      	b.n	8001b48 <__aeabi_dadd+0x560>
 8001a26:	2501      	movs	r5, #1
 8001a28:	2a38      	cmp	r2, #56	@ 0x38
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dadd+0x446>
 8001a2c:	e6ab      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001a2e:	2580      	movs	r5, #128	@ 0x80
 8001a30:	042d      	lsls	r5, r5, #16
 8001a32:	432c      	orrs	r4, r5
 8001a34:	e695      	b.n	8001762 <__aeabi_dadd+0x17a>
 8001a36:	0011      	movs	r1, r2
 8001a38:	4655      	mov	r5, sl
 8001a3a:	3920      	subs	r1, #32
 8001a3c:	40cd      	lsrs	r5, r1
 8001a3e:	46a9      	mov	r9, r5
 8001a40:	2a20      	cmp	r2, #32
 8001a42:	d006      	beq.n	8001a52 <__aeabi_dadd+0x46a>
 8001a44:	2140      	movs	r1, #64	@ 0x40
 8001a46:	4653      	mov	r3, sl
 8001a48:	1a8a      	subs	r2, r1, r2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	4662      	mov	r2, ip
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	4694      	mov	ip, r2
 8001a52:	4665      	mov	r5, ip
 8001a54:	1e6b      	subs	r3, r5, #1
 8001a56:	419d      	sbcs	r5, r3
 8001a58:	464b      	mov	r3, r9
 8001a5a:	431d      	orrs	r5, r3
 8001a5c:	e612      	b.n	8001684 <__aeabi_dadd+0x9c>
 8001a5e:	0021      	movs	r1, r4
 8001a60:	4301      	orrs	r1, r0
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dadd+0x47e>
 8001a64:	e0c4      	b.n	8001bf0 <__aeabi_dadd+0x608>
 8001a66:	1e51      	subs	r1, r2, #1
 8001a68:	2a01      	cmp	r2, #1
 8001a6a:	d100      	bne.n	8001a6e <__aeabi_dadd+0x486>
 8001a6c:	e0fb      	b.n	8001c66 <__aeabi_dadd+0x67e>
 8001a6e:	4d8d      	ldr	r5, [pc, #564]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a70:	42aa      	cmp	r2, r5
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dadd+0x48e>
 8001a74:	e0b5      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 8001a76:	2501      	movs	r5, #1
 8001a78:	2938      	cmp	r1, #56	@ 0x38
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_dadd+0x496>
 8001a7c:	e741      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001a7e:	000a      	movs	r2, r1
 8001a80:	e72f      	b.n	80018e2 <__aeabi_dadd+0x2fa>
 8001a82:	4c89      	ldr	r4, [pc, #548]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 8001a84:	1aff      	subs	r7, r7, r3
 8001a86:	4014      	ands	r4, r2
 8001a88:	0762      	lsls	r2, r4, #29
 8001a8a:	08e4      	lsrs	r4, r4, #3
 8001a8c:	e76a      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001a8e:	4a85      	ldr	r2, [pc, #532]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a90:	4291      	cmp	r1, r2
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dadd+0x4ae>
 8001a94:	e0e3      	b.n	8001c5e <__aeabi_dadd+0x676>
 8001a96:	4663      	mov	r3, ip
 8001a98:	18c2      	adds	r2, r0, r3
 8001a9a:	4282      	cmp	r2, r0
 8001a9c:	4180      	sbcs	r0, r0
 8001a9e:	0023      	movs	r3, r4
 8001aa0:	4240      	negs	r0, r0
 8001aa2:	4453      	add	r3, sl
 8001aa4:	181b      	adds	r3, r3, r0
 8001aa6:	07dd      	lsls	r5, r3, #31
 8001aa8:	085c      	lsrs	r4, r3, #1
 8001aaa:	2307      	movs	r3, #7
 8001aac:	0852      	lsrs	r2, r2, #1
 8001aae:	4315      	orrs	r5, r2
 8001ab0:	000f      	movs	r7, r1
 8001ab2:	402b      	ands	r3, r5
 8001ab4:	e700      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001ab6:	4663      	mov	r3, ip
 8001ab8:	1a1d      	subs	r5, r3, r0
 8001aba:	45ac      	cmp	ip, r5
 8001abc:	4192      	sbcs	r2, r2
 8001abe:	4653      	mov	r3, sl
 8001ac0:	4252      	negs	r2, r2
 8001ac2:	1b1c      	subs	r4, r3, r4
 8001ac4:	000e      	movs	r6, r1
 8001ac6:	4688      	mov	r8, r1
 8001ac8:	1aa4      	subs	r4, r4, r2
 8001aca:	e5e5      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001acc:	2d00      	cmp	r5, #0
 8001ace:	d000      	beq.n	8001ad2 <__aeabi_dadd+0x4ea>
 8001ad0:	e091      	b.n	8001bf6 <__aeabi_dadd+0x60e>
 8001ad2:	2a00      	cmp	r2, #0
 8001ad4:	d138      	bne.n	8001b48 <__aeabi_dadd+0x560>
 8001ad6:	2480      	movs	r4, #128	@ 0x80
 8001ad8:	2600      	movs	r6, #0
 8001ada:	0324      	lsls	r4, r4, #12
 8001adc:	e756      	b.n	800198c <__aeabi_dadd+0x3a4>
 8001ade:	4663      	mov	r3, ip
 8001ae0:	18c5      	adds	r5, r0, r3
 8001ae2:	4285      	cmp	r5, r0
 8001ae4:	4180      	sbcs	r0, r0
 8001ae6:	4454      	add	r4, sl
 8001ae8:	4240      	negs	r0, r0
 8001aea:	1824      	adds	r4, r4, r0
 8001aec:	2701      	movs	r7, #1
 8001aee:	0223      	lsls	r3, r4, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dadd+0x50c>
 8001af2:	e6df      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001af4:	2702      	movs	r7, #2
 8001af6:	e687      	b.n	8001808 <__aeabi_dadd+0x220>
 8001af8:	4663      	mov	r3, ip
 8001afa:	1ac5      	subs	r5, r0, r3
 8001afc:	42a8      	cmp	r0, r5
 8001afe:	4180      	sbcs	r0, r0
 8001b00:	4653      	mov	r3, sl
 8001b02:	4240      	negs	r0, r0
 8001b04:	1ae4      	subs	r4, r4, r3
 8001b06:	2701      	movs	r7, #1
 8001b08:	1a24      	subs	r4, r4, r0
 8001b0a:	e5c0      	b.n	800168e <__aeabi_dadd+0xa6>
 8001b0c:	0762      	lsls	r2, r4, #29
 8001b0e:	08c0      	lsrs	r0, r0, #3
 8001b10:	4302      	orrs	r2, r0
 8001b12:	08e4      	lsrs	r4, r4, #3
 8001b14:	e736      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b16:	0011      	movs	r1, r2
 8001b18:	4653      	mov	r3, sl
 8001b1a:	3920      	subs	r1, #32
 8001b1c:	40cb      	lsrs	r3, r1
 8001b1e:	4699      	mov	r9, r3
 8001b20:	2a20      	cmp	r2, #32
 8001b22:	d006      	beq.n	8001b32 <__aeabi_dadd+0x54a>
 8001b24:	2140      	movs	r1, #64	@ 0x40
 8001b26:	4653      	mov	r3, sl
 8001b28:	1a8a      	subs	r2, r1, r2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	4662      	mov	r2, ip
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	4694      	mov	ip, r2
 8001b32:	4665      	mov	r5, ip
 8001b34:	1e6b      	subs	r3, r5, #1
 8001b36:	419d      	sbcs	r5, r3
 8001b38:	464b      	mov	r3, r9
 8001b3a:	431d      	orrs	r5, r3
 8001b3c:	e659      	b.n	80017f2 <__aeabi_dadd+0x20a>
 8001b3e:	0762      	lsls	r2, r4, #29
 8001b40:	08c0      	lsrs	r0, r0, #3
 8001b42:	4302      	orrs	r2, r0
 8001b44:	08e4      	lsrs	r4, r4, #3
 8001b46:	e70d      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001b48:	4653      	mov	r3, sl
 8001b4a:	075a      	lsls	r2, r3, #29
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	08d8      	lsrs	r0, r3, #3
 8001b50:	4653      	mov	r3, sl
 8001b52:	000e      	movs	r6, r1
 8001b54:	4302      	orrs	r2, r0
 8001b56:	08dc      	lsrs	r4, r3, #3
 8001b58:	e714      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b5a:	0015      	movs	r5, r2
 8001b5c:	0026      	movs	r6, r4
 8001b5e:	3d20      	subs	r5, #32
 8001b60:	40ee      	lsrs	r6, r5
 8001b62:	2a20      	cmp	r2, #32
 8001b64:	d003      	beq.n	8001b6e <__aeabi_dadd+0x586>
 8001b66:	2540      	movs	r5, #64	@ 0x40
 8001b68:	1aaa      	subs	r2, r5, r2
 8001b6a:	4094      	lsls	r4, r2
 8001b6c:	4320      	orrs	r0, r4
 8001b6e:	1e42      	subs	r2, r0, #1
 8001b70:	4190      	sbcs	r0, r2
 8001b72:	0005      	movs	r5, r0
 8001b74:	4335      	orrs	r5, r6
 8001b76:	e606      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d07c      	beq.n	8001c76 <__aeabi_dadd+0x68e>
 8001b7c:	4662      	mov	r2, ip
 8001b7e:	4653      	mov	r3, sl
 8001b80:	08c0      	lsrs	r0, r0, #3
 8001b82:	431a      	orrs	r2, r3
 8001b84:	d100      	bne.n	8001b88 <__aeabi_dadd+0x5a0>
 8001b86:	e6fa      	b.n	800197e <__aeabi_dadd+0x396>
 8001b88:	0762      	lsls	r2, r4, #29
 8001b8a:	4310      	orrs	r0, r2
 8001b8c:	2280      	movs	r2, #128	@ 0x80
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	0312      	lsls	r2, r2, #12
 8001b92:	4214      	tst	r4, r2
 8001b94:	d008      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b96:	08d9      	lsrs	r1, r3, #3
 8001b98:	4211      	tst	r1, r2
 8001b9a:	d105      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	08d8      	lsrs	r0, r3, #3
 8001ba0:	4653      	mov	r3, sl
 8001ba2:	000c      	movs	r4, r1
 8001ba4:	075b      	lsls	r3, r3, #29
 8001ba6:	4318      	orrs	r0, r3
 8001ba8:	0f42      	lsrs	r2, r0, #29
 8001baa:	00c0      	lsls	r0, r0, #3
 8001bac:	08c0      	lsrs	r0, r0, #3
 8001bae:	0752      	lsls	r2, r2, #29
 8001bb0:	4302      	orrs	r2, r0
 8001bb2:	e6e7      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dadd+0x5d2>
 8001bb8:	e72d      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	08d8      	lsrs	r0, r3, #3
 8001bbe:	4653      	mov	r3, sl
 8001bc0:	075a      	lsls	r2, r3, #29
 8001bc2:	000e      	movs	r6, r1
 8001bc4:	4302      	orrs	r2, r0
 8001bc6:	08dc      	lsrs	r4, r3, #3
 8001bc8:	e6cc      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001bca:	4663      	mov	r3, ip
 8001bcc:	1a1d      	subs	r5, r3, r0
 8001bce:	45ac      	cmp	ip, r5
 8001bd0:	4192      	sbcs	r2, r2
 8001bd2:	4653      	mov	r3, sl
 8001bd4:	4252      	negs	r2, r2
 8001bd6:	1b1c      	subs	r4, r3, r4
 8001bd8:	000e      	movs	r6, r1
 8001bda:	4688      	mov	r8, r1
 8001bdc:	1aa4      	subs	r4, r4, r2
 8001bde:	3701      	adds	r7, #1
 8001be0:	e555      	b.n	800168e <__aeabi_dadd+0xa6>
 8001be2:	4663      	mov	r3, ip
 8001be4:	08d9      	lsrs	r1, r3, #3
 8001be6:	4653      	mov	r3, sl
 8001be8:	075a      	lsls	r2, r3, #29
 8001bea:	430a      	orrs	r2, r1
 8001bec:	08dc      	lsrs	r4, r3, #3
 8001bee:	e6c9      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bf0:	4660      	mov	r0, ip
 8001bf2:	4654      	mov	r4, sl
 8001bf4:	e6d4      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001bf6:	08c0      	lsrs	r0, r0, #3
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dadd+0x616>
 8001bfc:	e6bf      	b.n	800197e <__aeabi_dadd+0x396>
 8001bfe:	0762      	lsls	r2, r4, #29
 8001c00:	4310      	orrs	r0, r2
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	08e4      	lsrs	r4, r4, #3
 8001c06:	0312      	lsls	r2, r2, #12
 8001c08:	4214      	tst	r4, r2
 8001c0a:	d0cd      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c0c:	08dd      	lsrs	r5, r3, #3
 8001c0e:	4215      	tst	r5, r2
 8001c10:	d1ca      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c12:	4663      	mov	r3, ip
 8001c14:	08d8      	lsrs	r0, r3, #3
 8001c16:	4653      	mov	r3, sl
 8001c18:	075b      	lsls	r3, r3, #29
 8001c1a:	000e      	movs	r6, r1
 8001c1c:	002c      	movs	r4, r5
 8001c1e:	4318      	orrs	r0, r3
 8001c20:	e7c2      	b.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c22:	4663      	mov	r3, ip
 8001c24:	08d9      	lsrs	r1, r3, #3
 8001c26:	4653      	mov	r3, sl
 8001c28:	075a      	lsls	r2, r3, #29
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	08dc      	lsrs	r4, r3, #3
 8001c2e:	e699      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001c30:	4663      	mov	r3, ip
 8001c32:	08d8      	lsrs	r0, r3, #3
 8001c34:	4653      	mov	r3, sl
 8001c36:	075a      	lsls	r2, r3, #29
 8001c38:	000e      	movs	r6, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	08dc      	lsrs	r4, r3, #3
 8001c3e:	e6a1      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c40:	0011      	movs	r1, r2
 8001c42:	0027      	movs	r7, r4
 8001c44:	3920      	subs	r1, #32
 8001c46:	40cf      	lsrs	r7, r1
 8001c48:	2a20      	cmp	r2, #32
 8001c4a:	d003      	beq.n	8001c54 <__aeabi_dadd+0x66c>
 8001c4c:	2140      	movs	r1, #64	@ 0x40
 8001c4e:	1a8a      	subs	r2, r1, r2
 8001c50:	4094      	lsls	r4, r2
 8001c52:	4320      	orrs	r0, r4
 8001c54:	1e42      	subs	r2, r0, #1
 8001c56:	4190      	sbcs	r0, r2
 8001c58:	0005      	movs	r5, r0
 8001c5a:	433d      	orrs	r5, r7
 8001c5c:	e651      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001c5e:	000c      	movs	r4, r1
 8001c60:	2500      	movs	r5, #0
 8001c62:	2200      	movs	r2, #0
 8001c64:	e558      	b.n	8001718 <__aeabi_dadd+0x130>
 8001c66:	4460      	add	r0, ip
 8001c68:	4560      	cmp	r0, ip
 8001c6a:	4192      	sbcs	r2, r2
 8001c6c:	4454      	add	r4, sl
 8001c6e:	4252      	negs	r2, r2
 8001c70:	0005      	movs	r5, r0
 8001c72:	18a4      	adds	r4, r4, r2
 8001c74:	e73a      	b.n	8001aec <__aeabi_dadd+0x504>
 8001c76:	4653      	mov	r3, sl
 8001c78:	075a      	lsls	r2, r3, #29
 8001c7a:	4663      	mov	r3, ip
 8001c7c:	08d9      	lsrs	r1, r3, #3
 8001c7e:	4653      	mov	r3, sl
 8001c80:	430a      	orrs	r2, r1
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	e67e      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c86:	001a      	movs	r2, r3
 8001c88:	001c      	movs	r4, r3
 8001c8a:	432a      	orrs	r2, r5
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dadd+0x6a8>
 8001c8e:	e6ab      	b.n	80019e8 <__aeabi_dadd+0x400>
 8001c90:	e6c1      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001c92:	2120      	movs	r1, #32
 8001c94:	2500      	movs	r5, #0
 8001c96:	1a09      	subs	r1, r1, r0
 8001c98:	e519      	b.n	80016ce <__aeabi_dadd+0xe6>
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2500      	movs	r5, #0
 8001c9e:	4c01      	ldr	r4, [pc, #4]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001ca0:	e53a      	b.n	8001718 <__aeabi_dadd+0x130>
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	000007ff 	.word	0x000007ff
 8001ca8:	ff7fffff 	.word	0xff7fffff
 8001cac:	000007fe 	.word	0x000007fe

08001cb0 <__aeabi_ddiv>:
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	46de      	mov	lr, fp
 8001cb4:	4645      	mov	r5, r8
 8001cb6:	4657      	mov	r7, sl
 8001cb8:	464e      	mov	r6, r9
 8001cba:	b5e0      	push	{r5, r6, r7, lr}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	9200      	str	r2, [sp, #0]
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	030b      	lsls	r3, r1, #12
 8001cc4:	0b1b      	lsrs	r3, r3, #12
 8001cc6:	469b      	mov	fp, r3
 8001cc8:	0fca      	lsrs	r2, r1, #31
 8001cca:	004b      	lsls	r3, r1, #1
 8001ccc:	0004      	movs	r4, r0
 8001cce:	4680      	mov	r8, r0
 8001cd0:	0d5b      	lsrs	r3, r3, #21
 8001cd2:	9202      	str	r2, [sp, #8]
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_ddiv+0x28>
 8001cd6:	e16a      	b.n	8001fae <__aeabi_ddiv+0x2fe>
 8001cd8:	4ad4      	ldr	r2, [pc, #848]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_ddiv+0x30>
 8001cde:	e18c      	b.n	8001ffa <__aeabi_ddiv+0x34a>
 8001ce0:	4659      	mov	r1, fp
 8001ce2:	0f42      	lsrs	r2, r0, #29
 8001ce4:	00c9      	lsls	r1, r1, #3
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	2180      	movs	r1, #128	@ 0x80
 8001cea:	0409      	lsls	r1, r1, #16
 8001cec:	4311      	orrs	r1, r2
 8001cee:	00c2      	lsls	r2, r0, #3
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4acf      	ldr	r2, [pc, #828]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001cf4:	4689      	mov	r9, r1
 8001cf6:	4692      	mov	sl, r2
 8001cf8:	449a      	add	sl, r3
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2400      	movs	r4, #0
 8001cfe:	9303      	str	r3, [sp, #12]
 8001d00:	9e00      	ldr	r6, [sp, #0]
 8001d02:	9f01      	ldr	r7, [sp, #4]
 8001d04:	033b      	lsls	r3, r7, #12
 8001d06:	0b1b      	lsrs	r3, r3, #12
 8001d08:	469b      	mov	fp, r3
 8001d0a:	007b      	lsls	r3, r7, #1
 8001d0c:	0030      	movs	r0, r6
 8001d0e:	0d5b      	lsrs	r3, r3, #21
 8001d10:	0ffd      	lsrs	r5, r7, #31
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d100      	bne.n	8001d18 <__aeabi_ddiv+0x68>
 8001d16:	e128      	b.n	8001f6a <__aeabi_ddiv+0x2ba>
 8001d18:	4ac4      	ldr	r2, [pc, #784]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_ddiv+0x70>
 8001d1e:	e177      	b.n	8002010 <__aeabi_ddiv+0x360>
 8001d20:	4659      	mov	r1, fp
 8001d22:	0f72      	lsrs	r2, r6, #29
 8001d24:	00c9      	lsls	r1, r1, #3
 8001d26:	430a      	orrs	r2, r1
 8001d28:	2180      	movs	r1, #128	@ 0x80
 8001d2a:	0409      	lsls	r1, r1, #16
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	468b      	mov	fp, r1
 8001d30:	49bf      	ldr	r1, [pc, #764]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001d32:	00f2      	lsls	r2, r6, #3
 8001d34:	468c      	mov	ip, r1
 8001d36:	4651      	mov	r1, sl
 8001d38:	4463      	add	r3, ip
 8001d3a:	1acb      	subs	r3, r1, r3
 8001d3c:	469a      	mov	sl, r3
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9e02      	ldr	r6, [sp, #8]
 8001d42:	406e      	eors	r6, r5
 8001d44:	2c0f      	cmp	r4, #15
 8001d46:	d827      	bhi.n	8001d98 <__aeabi_ddiv+0xe8>
 8001d48:	49ba      	ldr	r1, [pc, #744]	@ (8002034 <__aeabi_ddiv+0x384>)
 8001d4a:	00a4      	lsls	r4, r4, #2
 8001d4c:	5909      	ldr	r1, [r1, r4]
 8001d4e:	468f      	mov	pc, r1
 8001d50:	46cb      	mov	fp, r9
 8001d52:	4642      	mov	r2, r8
 8001d54:	9e02      	ldr	r6, [sp, #8]
 8001d56:	9b03      	ldr	r3, [sp, #12]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d016      	beq.n	8001d8a <__aeabi_ddiv+0xda>
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0xb2>
 8001d60:	e2a6      	b.n	80022b0 <__aeabi_ddiv+0x600>
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d000      	beq.n	8001d68 <__aeabi_ddiv+0xb8>
 8001d66:	e0df      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	4690      	mov	r8, r2
 8001d70:	051b      	lsls	r3, r3, #20
 8001d72:	4323      	orrs	r3, r4
 8001d74:	07f6      	lsls	r6, r6, #31
 8001d76:	4333      	orrs	r3, r6
 8001d78:	4640      	mov	r0, r8
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	b007      	add	sp, #28
 8001d7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d80:	46bb      	mov	fp, r7
 8001d82:	46b2      	mov	sl, r6
 8001d84:	46a9      	mov	r9, r5
 8001d86:	46a0      	mov	r8, r4
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2400      	movs	r4, #0
 8001d8e:	4690      	mov	r8, r2
 8001d90:	4ba6      	ldr	r3, [pc, #664]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d92:	e7ed      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001d94:	002e      	movs	r6, r5
 8001d96:	e7df      	b.n	8001d58 <__aeabi_ddiv+0xa8>
 8001d98:	45cb      	cmp	fp, r9
 8001d9a:	d200      	bcs.n	8001d9e <__aeabi_ddiv+0xee>
 8001d9c:	e1d4      	b.n	8002148 <__aeabi_ddiv+0x498>
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_ddiv+0xf2>
 8001da0:	e1cf      	b.n	8002142 <__aeabi_ddiv+0x492>
 8001da2:	2301      	movs	r3, #1
 8001da4:	425b      	negs	r3, r3
 8001da6:	469c      	mov	ip, r3
 8001da8:	4644      	mov	r4, r8
 8001daa:	4648      	mov	r0, r9
 8001dac:	2700      	movs	r7, #0
 8001dae:	44e2      	add	sl, ip
 8001db0:	465b      	mov	r3, fp
 8001db2:	0e15      	lsrs	r5, r2, #24
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	431d      	orrs	r5, r3
 8001db8:	0c19      	lsrs	r1, r3, #16
 8001dba:	042b      	lsls	r3, r5, #16
 8001dbc:	0212      	lsls	r2, r2, #8
 8001dbe:	9500      	str	r5, [sp, #0]
 8001dc0:	0c1d      	lsrs	r5, r3, #16
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9102      	str	r1, [sp, #8]
 8001dc6:	9503      	str	r5, [sp, #12]
 8001dc8:	f7fe fa40 	bl	800024c <__aeabi_uidivmod>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	436a      	muls	r2, r5
 8001dd0:	040b      	lsls	r3, r1, #16
 8001dd2:	0c21      	lsrs	r1, r4, #16
 8001dd4:	4680      	mov	r8, r0
 8001dd6:	4319      	orrs	r1, r3
 8001dd8:	428a      	cmp	r2, r1
 8001dda:	d909      	bls.n	8001df0 <__aeabi_ddiv+0x140>
 8001ddc:	9d00      	ldr	r5, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	46ac      	mov	ip, r5
 8001de2:	425b      	negs	r3, r3
 8001de4:	4461      	add	r1, ip
 8001de6:	469c      	mov	ip, r3
 8001de8:	44e0      	add	r8, ip
 8001dea:	428d      	cmp	r5, r1
 8001dec:	d800      	bhi.n	8001df0 <__aeabi_ddiv+0x140>
 8001dee:	e1fb      	b.n	80021e8 <__aeabi_ddiv+0x538>
 8001df0:	1a88      	subs	r0, r1, r2
 8001df2:	9902      	ldr	r1, [sp, #8]
 8001df4:	f7fe fa2a 	bl	800024c <__aeabi_uidivmod>
 8001df8:	9a03      	ldr	r2, [sp, #12]
 8001dfa:	0424      	lsls	r4, r4, #16
 8001dfc:	4342      	muls	r2, r0
 8001dfe:	0409      	lsls	r1, r1, #16
 8001e00:	0c24      	lsrs	r4, r4, #16
 8001e02:	0003      	movs	r3, r0
 8001e04:	430c      	orrs	r4, r1
 8001e06:	42a2      	cmp	r2, r4
 8001e08:	d906      	bls.n	8001e18 <__aeabi_ddiv+0x168>
 8001e0a:	9900      	ldr	r1, [sp, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	468c      	mov	ip, r1
 8001e10:	4464      	add	r4, ip
 8001e12:	42a1      	cmp	r1, r4
 8001e14:	d800      	bhi.n	8001e18 <__aeabi_ddiv+0x168>
 8001e16:	e1e1      	b.n	80021dc <__aeabi_ddiv+0x52c>
 8001e18:	1aa0      	subs	r0, r4, r2
 8001e1a:	4642      	mov	r2, r8
 8001e1c:	0412      	lsls	r2, r2, #16
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	4693      	mov	fp, r2
 8001e22:	464b      	mov	r3, r9
 8001e24:	4659      	mov	r1, fp
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	001d      	movs	r5, r3
 8001e2a:	9304      	str	r3, [sp, #16]
 8001e2c:	040b      	lsls	r3, r1, #16
 8001e2e:	4649      	mov	r1, r9
 8001e30:	0409      	lsls	r1, r1, #16
 8001e32:	0c09      	lsrs	r1, r1, #16
 8001e34:	000c      	movs	r4, r1
 8001e36:	0c1b      	lsrs	r3, r3, #16
 8001e38:	435c      	muls	r4, r3
 8001e3a:	0c12      	lsrs	r2, r2, #16
 8001e3c:	436b      	muls	r3, r5
 8001e3e:	4688      	mov	r8, r1
 8001e40:	4351      	muls	r1, r2
 8001e42:	436a      	muls	r2, r5
 8001e44:	0c25      	lsrs	r5, r4, #16
 8001e46:	46ac      	mov	ip, r5
 8001e48:	185b      	adds	r3, r3, r1
 8001e4a:	4463      	add	r3, ip
 8001e4c:	4299      	cmp	r1, r3
 8001e4e:	d903      	bls.n	8001e58 <__aeabi_ddiv+0x1a8>
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	0249      	lsls	r1, r1, #9
 8001e54:	468c      	mov	ip, r1
 8001e56:	4462      	add	r2, ip
 8001e58:	0c19      	lsrs	r1, r3, #16
 8001e5a:	0424      	lsls	r4, r4, #16
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	0c24      	lsrs	r4, r4, #16
 8001e60:	188a      	adds	r2, r1, r2
 8001e62:	191c      	adds	r4, r3, r4
 8001e64:	4290      	cmp	r0, r2
 8001e66:	d302      	bcc.n	8001e6e <__aeabi_ddiv+0x1be>
 8001e68:	d116      	bne.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6a:	42a7      	cmp	r7, r4
 8001e6c:	d214      	bcs.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6e:	465b      	mov	r3, fp
 8001e70:	9d00      	ldr	r5, [sp, #0]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	444f      	add	r7, r9
 8001e76:	9305      	str	r3, [sp, #20]
 8001e78:	454f      	cmp	r7, r9
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	46ac      	mov	ip, r5
 8001e7e:	425b      	negs	r3, r3
 8001e80:	4463      	add	r3, ip
 8001e82:	18c0      	adds	r0, r0, r3
 8001e84:	4285      	cmp	r5, r0
 8001e86:	d300      	bcc.n	8001e8a <__aeabi_ddiv+0x1da>
 8001e88:	e1a1      	b.n	80021ce <__aeabi_ddiv+0x51e>
 8001e8a:	4282      	cmp	r2, r0
 8001e8c:	d900      	bls.n	8001e90 <__aeabi_ddiv+0x1e0>
 8001e8e:	e1f6      	b.n	800227e <__aeabi_ddiv+0x5ce>
 8001e90:	d100      	bne.n	8001e94 <__aeabi_ddiv+0x1e4>
 8001e92:	e1f1      	b.n	8002278 <__aeabi_ddiv+0x5c8>
 8001e94:	9b05      	ldr	r3, [sp, #20]
 8001e96:	469b      	mov	fp, r3
 8001e98:	1b3c      	subs	r4, r7, r4
 8001e9a:	42a7      	cmp	r7, r4
 8001e9c:	41bf      	sbcs	r7, r7
 8001e9e:	9d00      	ldr	r5, [sp, #0]
 8001ea0:	1a80      	subs	r0, r0, r2
 8001ea2:	427f      	negs	r7, r7
 8001ea4:	1bc0      	subs	r0, r0, r7
 8001ea6:	4285      	cmp	r5, r0
 8001ea8:	d100      	bne.n	8001eac <__aeabi_ddiv+0x1fc>
 8001eaa:	e1d0      	b.n	800224e <__aeabi_ddiv+0x59e>
 8001eac:	9902      	ldr	r1, [sp, #8]
 8001eae:	f7fe f9cd 	bl	800024c <__aeabi_uidivmod>
 8001eb2:	9a03      	ldr	r2, [sp, #12]
 8001eb4:	040b      	lsls	r3, r1, #16
 8001eb6:	4342      	muls	r2, r0
 8001eb8:	0c21      	lsrs	r1, r4, #16
 8001eba:	0007      	movs	r7, r0
 8001ebc:	4319      	orrs	r1, r3
 8001ebe:	428a      	cmp	r2, r1
 8001ec0:	d900      	bls.n	8001ec4 <__aeabi_ddiv+0x214>
 8001ec2:	e178      	b.n	80021b6 <__aeabi_ddiv+0x506>
 8001ec4:	1a88      	subs	r0, r1, r2
 8001ec6:	9902      	ldr	r1, [sp, #8]
 8001ec8:	f7fe f9c0 	bl	800024c <__aeabi_uidivmod>
 8001ecc:	9a03      	ldr	r2, [sp, #12]
 8001ece:	0424      	lsls	r4, r4, #16
 8001ed0:	4342      	muls	r2, r0
 8001ed2:	0409      	lsls	r1, r1, #16
 8001ed4:	0c24      	lsrs	r4, r4, #16
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	430c      	orrs	r4, r1
 8001eda:	42a2      	cmp	r2, r4
 8001edc:	d900      	bls.n	8001ee0 <__aeabi_ddiv+0x230>
 8001ede:	e15d      	b.n	800219c <__aeabi_ddiv+0x4ec>
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	1aa4      	subs	r4, r4, r2
 8001ee4:	043a      	lsls	r2, r7, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	9d04      	ldr	r5, [sp, #16]
 8001eea:	0413      	lsls	r3, r2, #16
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	4359      	muls	r1, r3
 8001ef0:	4647      	mov	r7, r8
 8001ef2:	436b      	muls	r3, r5
 8001ef4:	469c      	mov	ip, r3
 8001ef6:	0c10      	lsrs	r0, r2, #16
 8001ef8:	4347      	muls	r7, r0
 8001efa:	0c0b      	lsrs	r3, r1, #16
 8001efc:	44bc      	add	ip, r7
 8001efe:	4463      	add	r3, ip
 8001f00:	4368      	muls	r0, r5
 8001f02:	429f      	cmp	r7, r3
 8001f04:	d903      	bls.n	8001f0e <__aeabi_ddiv+0x25e>
 8001f06:	2580      	movs	r5, #128	@ 0x80
 8001f08:	026d      	lsls	r5, r5, #9
 8001f0a:	46ac      	mov	ip, r5
 8001f0c:	4460      	add	r0, ip
 8001f0e:	0c1f      	lsrs	r7, r3, #16
 8001f10:	0409      	lsls	r1, r1, #16
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	0c09      	lsrs	r1, r1, #16
 8001f16:	183f      	adds	r7, r7, r0
 8001f18:	185b      	adds	r3, r3, r1
 8001f1a:	42bc      	cmp	r4, r7
 8001f1c:	d200      	bcs.n	8001f20 <__aeabi_ddiv+0x270>
 8001f1e:	e102      	b.n	8002126 <__aeabi_ddiv+0x476>
 8001f20:	d100      	bne.n	8001f24 <__aeabi_ddiv+0x274>
 8001f22:	e0fd      	b.n	8002120 <__aeabi_ddiv+0x470>
 8001f24:	2301      	movs	r3, #1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	4b43      	ldr	r3, [pc, #268]	@ (8002038 <__aeabi_ddiv+0x388>)
 8001f2a:	4453      	add	r3, sl
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	dc00      	bgt.n	8001f32 <__aeabi_ddiv+0x282>
 8001f30:	e0ae      	b.n	8002090 <__aeabi_ddiv+0x3e0>
 8001f32:	0751      	lsls	r1, r2, #29
 8001f34:	d000      	beq.n	8001f38 <__aeabi_ddiv+0x288>
 8001f36:	e198      	b.n	800226a <__aeabi_ddiv+0x5ba>
 8001f38:	4659      	mov	r1, fp
 8001f3a:	01c9      	lsls	r1, r1, #7
 8001f3c:	d506      	bpl.n	8001f4c <__aeabi_ddiv+0x29c>
 8001f3e:	4659      	mov	r1, fp
 8001f40:	4b3e      	ldr	r3, [pc, #248]	@ (800203c <__aeabi_ddiv+0x38c>)
 8001f42:	4019      	ands	r1, r3
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	468b      	mov	fp, r1
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4453      	add	r3, sl
 8001f4c:	493c      	ldr	r1, [pc, #240]	@ (8002040 <__aeabi_ddiv+0x390>)
 8001f4e:	428b      	cmp	r3, r1
 8001f50:	dd00      	ble.n	8001f54 <__aeabi_ddiv+0x2a4>
 8001f52:	e71a      	b.n	8001d8a <__aeabi_ddiv+0xda>
 8001f54:	4659      	mov	r1, fp
 8001f56:	08d2      	lsrs	r2, r2, #3
 8001f58:	0749      	lsls	r1, r1, #29
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	465a      	mov	r2, fp
 8001f5e:	055b      	lsls	r3, r3, #21
 8001f60:	0254      	lsls	r4, r2, #9
 8001f62:	4688      	mov	r8, r1
 8001f64:	0b24      	lsrs	r4, r4, #12
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	e702      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001f6a:	465a      	mov	r2, fp
 8001f6c:	9b00      	ldr	r3, [sp, #0]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	d100      	bne.n	8001f74 <__aeabi_ddiv+0x2c4>
 8001f72:	e07e      	b.n	8002072 <__aeabi_ddiv+0x3c2>
 8001f74:	465b      	mov	r3, fp
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d100      	bne.n	8001f7c <__aeabi_ddiv+0x2cc>
 8001f7a:	e100      	b.n	800217e <__aeabi_ddiv+0x4ce>
 8001f7c:	4658      	mov	r0, fp
 8001f7e:	f001 fabb 	bl	80034f8 <__clzsi2>
 8001f82:	0002      	movs	r2, r0
 8001f84:	0003      	movs	r3, r0
 8001f86:	3a0b      	subs	r2, #11
 8001f88:	271d      	movs	r7, #29
 8001f8a:	9e00      	ldr	r6, [sp, #0]
 8001f8c:	1aba      	subs	r2, r7, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	4658      	mov	r0, fp
 8001f92:	40d6      	lsrs	r6, r2
 8001f94:	3908      	subs	r1, #8
 8001f96:	4088      	lsls	r0, r1
 8001f98:	0032      	movs	r2, r6
 8001f9a:	4302      	orrs	r2, r0
 8001f9c:	4693      	mov	fp, r2
 8001f9e:	9a00      	ldr	r2, [sp, #0]
 8001fa0:	408a      	lsls	r2, r1
 8001fa2:	4928      	ldr	r1, [pc, #160]	@ (8002044 <__aeabi_ddiv+0x394>)
 8001fa4:	4453      	add	r3, sl
 8001fa6:	468a      	mov	sl, r1
 8001fa8:	449a      	add	sl, r3
 8001faa:	2300      	movs	r3, #0
 8001fac:	e6c8      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8001fae:	465b      	mov	r3, fp
 8001fb0:	4303      	orrs	r3, r0
 8001fb2:	4699      	mov	r9, r3
 8001fb4:	d056      	beq.n	8002064 <__aeabi_ddiv+0x3b4>
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d100      	bne.n	8001fbe <__aeabi_ddiv+0x30e>
 8001fbc:	e0cd      	b.n	800215a <__aeabi_ddiv+0x4aa>
 8001fbe:	4658      	mov	r0, fp
 8001fc0:	f001 fa9a 	bl	80034f8 <__clzsi2>
 8001fc4:	230b      	movs	r3, #11
 8001fc6:	425b      	negs	r3, r3
 8001fc8:	469c      	mov	ip, r3
 8001fca:	0002      	movs	r2, r0
 8001fcc:	4484      	add	ip, r0
 8001fce:	4666      	mov	r6, ip
 8001fd0:	231d      	movs	r3, #29
 8001fd2:	1b9b      	subs	r3, r3, r6
 8001fd4:	0026      	movs	r6, r4
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	4658      	mov	r0, fp
 8001fda:	40de      	lsrs	r6, r3
 8001fdc:	3908      	subs	r1, #8
 8001fde:	4088      	lsls	r0, r1
 8001fe0:	0033      	movs	r3, r6
 8001fe2:	4303      	orrs	r3, r0
 8001fe4:	4699      	mov	r9, r3
 8001fe6:	0023      	movs	r3, r4
 8001fe8:	408b      	lsls	r3, r1
 8001fea:	4698      	mov	r8, r3
 8001fec:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <__aeabi_ddiv+0x398>)
 8001fee:	2400      	movs	r4, #0
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	469a      	mov	sl, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9303      	str	r3, [sp, #12]
 8001ff8:	e682      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8001ffa:	465a      	mov	r2, fp
 8001ffc:	4302      	orrs	r2, r0
 8001ffe:	4691      	mov	r9, r2
 8002000:	d12a      	bne.n	8002058 <__aeabi_ddiv+0x3a8>
 8002002:	2200      	movs	r2, #0
 8002004:	469a      	mov	sl, r3
 8002006:	2302      	movs	r3, #2
 8002008:	4690      	mov	r8, r2
 800200a:	2408      	movs	r4, #8
 800200c:	9303      	str	r3, [sp, #12]
 800200e:	e677      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002010:	465a      	mov	r2, fp
 8002012:	9b00      	ldr	r3, [sp, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <__aeabi_ddiv+0x39c>)
 8002018:	469c      	mov	ip, r3
 800201a:	44e2      	add	sl, ip
 800201c:	2a00      	cmp	r2, #0
 800201e:	d117      	bne.n	8002050 <__aeabi_ddiv+0x3a0>
 8002020:	2302      	movs	r3, #2
 8002022:	431c      	orrs	r4, r3
 8002024:	2300      	movs	r3, #0
 8002026:	469b      	mov	fp, r3
 8002028:	3302      	adds	r3, #2
 800202a:	e689      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800202c:	000007ff 	.word	0x000007ff
 8002030:	fffffc01 	.word	0xfffffc01
 8002034:	0801beac 	.word	0x0801beac
 8002038:	000003ff 	.word	0x000003ff
 800203c:	feffffff 	.word	0xfeffffff
 8002040:	000007fe 	.word	0x000007fe
 8002044:	000003f3 	.word	0x000003f3
 8002048:	fffffc0d 	.word	0xfffffc0d
 800204c:	fffff801 	.word	0xfffff801
 8002050:	2303      	movs	r3, #3
 8002052:	0032      	movs	r2, r6
 8002054:	431c      	orrs	r4, r3
 8002056:	e673      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8002058:	469a      	mov	sl, r3
 800205a:	2303      	movs	r3, #3
 800205c:	46d9      	mov	r9, fp
 800205e:	240c      	movs	r4, #12
 8002060:	9303      	str	r3, [sp, #12]
 8002062:	e64d      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002064:	2300      	movs	r3, #0
 8002066:	4698      	mov	r8, r3
 8002068:	469a      	mov	sl, r3
 800206a:	3301      	adds	r3, #1
 800206c:	2404      	movs	r4, #4
 800206e:	9303      	str	r3, [sp, #12]
 8002070:	e646      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002072:	2301      	movs	r3, #1
 8002074:	431c      	orrs	r4, r3
 8002076:	2300      	movs	r3, #0
 8002078:	469b      	mov	fp, r3
 800207a:	3301      	adds	r3, #1
 800207c:	e660      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800207e:	2300      	movs	r3, #0
 8002080:	2480      	movs	r4, #128	@ 0x80
 8002082:	4698      	mov	r8, r3
 8002084:	2600      	movs	r6, #0
 8002086:	4b92      	ldr	r3, [pc, #584]	@ (80022d0 <__aeabi_ddiv+0x620>)
 8002088:	0324      	lsls	r4, r4, #12
 800208a:	e671      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800208c:	2201      	movs	r2, #1
 800208e:	4252      	negs	r2, r2
 8002090:	2101      	movs	r1, #1
 8002092:	1ac9      	subs	r1, r1, r3
 8002094:	2938      	cmp	r1, #56	@ 0x38
 8002096:	dd00      	ble.n	800209a <__aeabi_ddiv+0x3ea>
 8002098:	e666      	b.n	8001d68 <__aeabi_ddiv+0xb8>
 800209a:	291f      	cmp	r1, #31
 800209c:	dc00      	bgt.n	80020a0 <__aeabi_ddiv+0x3f0>
 800209e:	e0ab      	b.n	80021f8 <__aeabi_ddiv+0x548>
 80020a0:	201f      	movs	r0, #31
 80020a2:	4240      	negs	r0, r0
 80020a4:	1ac3      	subs	r3, r0, r3
 80020a6:	4658      	mov	r0, fp
 80020a8:	40d8      	lsrs	r0, r3
 80020aa:	0003      	movs	r3, r0
 80020ac:	2920      	cmp	r1, #32
 80020ae:	d004      	beq.n	80020ba <__aeabi_ddiv+0x40a>
 80020b0:	4658      	mov	r0, fp
 80020b2:	4988      	ldr	r1, [pc, #544]	@ (80022d4 <__aeabi_ddiv+0x624>)
 80020b4:	4451      	add	r1, sl
 80020b6:	4088      	lsls	r0, r1
 80020b8:	4302      	orrs	r2, r0
 80020ba:	1e51      	subs	r1, r2, #1
 80020bc:	418a      	sbcs	r2, r1
 80020be:	431a      	orrs	r2, r3
 80020c0:	2307      	movs	r3, #7
 80020c2:	0019      	movs	r1, r3
 80020c4:	2400      	movs	r4, #0
 80020c6:	4011      	ands	r1, r2
 80020c8:	4213      	tst	r3, r2
 80020ca:	d00c      	beq.n	80020e6 <__aeabi_ddiv+0x436>
 80020cc:	230f      	movs	r3, #15
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d100      	bne.n	80020d6 <__aeabi_ddiv+0x426>
 80020d4:	e0f9      	b.n	80022ca <__aeabi_ddiv+0x61a>
 80020d6:	1d11      	adds	r1, r2, #4
 80020d8:	4291      	cmp	r1, r2
 80020da:	419b      	sbcs	r3, r3
 80020dc:	000a      	movs	r2, r1
 80020de:	425b      	negs	r3, r3
 80020e0:	0759      	lsls	r1, r3, #29
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	0b1c      	lsrs	r4, r3, #12
 80020e6:	08d2      	lsrs	r2, r2, #3
 80020e8:	430a      	orrs	r2, r1
 80020ea:	4690      	mov	r8, r2
 80020ec:	2300      	movs	r3, #0
 80020ee:	e63f      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80020f0:	2480      	movs	r4, #128	@ 0x80
 80020f2:	464b      	mov	r3, r9
 80020f4:	0324      	lsls	r4, r4, #12
 80020f6:	4223      	tst	r3, r4
 80020f8:	d009      	beq.n	800210e <__aeabi_ddiv+0x45e>
 80020fa:	465b      	mov	r3, fp
 80020fc:	4223      	tst	r3, r4
 80020fe:	d106      	bne.n	800210e <__aeabi_ddiv+0x45e>
 8002100:	431c      	orrs	r4, r3
 8002102:	0324      	lsls	r4, r4, #12
 8002104:	002e      	movs	r6, r5
 8002106:	4690      	mov	r8, r2
 8002108:	4b71      	ldr	r3, [pc, #452]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800210a:	0b24      	lsrs	r4, r4, #12
 800210c:	e630      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800210e:	2480      	movs	r4, #128	@ 0x80
 8002110:	464b      	mov	r3, r9
 8002112:	0324      	lsls	r4, r4, #12
 8002114:	431c      	orrs	r4, r3
 8002116:	0324      	lsls	r4, r4, #12
 8002118:	9e02      	ldr	r6, [sp, #8]
 800211a:	4b6d      	ldr	r3, [pc, #436]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800211c:	0b24      	lsrs	r4, r4, #12
 800211e:	e627      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d100      	bne.n	8002126 <__aeabi_ddiv+0x476>
 8002124:	e700      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8002126:	9800      	ldr	r0, [sp, #0]
 8002128:	1e51      	subs	r1, r2, #1
 800212a:	4684      	mov	ip, r0
 800212c:	4464      	add	r4, ip
 800212e:	4284      	cmp	r4, r0
 8002130:	d200      	bcs.n	8002134 <__aeabi_ddiv+0x484>
 8002132:	e084      	b.n	800223e <__aeabi_ddiv+0x58e>
 8002134:	42bc      	cmp	r4, r7
 8002136:	d200      	bcs.n	800213a <__aeabi_ddiv+0x48a>
 8002138:	e0ae      	b.n	8002298 <__aeabi_ddiv+0x5e8>
 800213a:	d100      	bne.n	800213e <__aeabi_ddiv+0x48e>
 800213c:	e0c1      	b.n	80022c2 <__aeabi_ddiv+0x612>
 800213e:	000a      	movs	r2, r1
 8002140:	e6f0      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002142:	4542      	cmp	r2, r8
 8002144:	d900      	bls.n	8002148 <__aeabi_ddiv+0x498>
 8002146:	e62c      	b.n	8001da2 <__aeabi_ddiv+0xf2>
 8002148:	464b      	mov	r3, r9
 800214a:	07dc      	lsls	r4, r3, #31
 800214c:	0858      	lsrs	r0, r3, #1
 800214e:	4643      	mov	r3, r8
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	431c      	orrs	r4, r3
 8002154:	4643      	mov	r3, r8
 8002156:	07df      	lsls	r7, r3, #31
 8002158:	e62a      	b.n	8001db0 <__aeabi_ddiv+0x100>
 800215a:	f001 f9cd 	bl	80034f8 <__clzsi2>
 800215e:	2315      	movs	r3, #21
 8002160:	469c      	mov	ip, r3
 8002162:	4484      	add	ip, r0
 8002164:	0002      	movs	r2, r0
 8002166:	4663      	mov	r3, ip
 8002168:	3220      	adds	r2, #32
 800216a:	2b1c      	cmp	r3, #28
 800216c:	dc00      	bgt.n	8002170 <__aeabi_ddiv+0x4c0>
 800216e:	e72e      	b.n	8001fce <__aeabi_ddiv+0x31e>
 8002170:	0023      	movs	r3, r4
 8002172:	3808      	subs	r0, #8
 8002174:	4083      	lsls	r3, r0
 8002176:	4699      	mov	r9, r3
 8002178:	2300      	movs	r3, #0
 800217a:	4698      	mov	r8, r3
 800217c:	e736      	b.n	8001fec <__aeabi_ddiv+0x33c>
 800217e:	f001 f9bb 	bl	80034f8 <__clzsi2>
 8002182:	0002      	movs	r2, r0
 8002184:	0003      	movs	r3, r0
 8002186:	3215      	adds	r2, #21
 8002188:	3320      	adds	r3, #32
 800218a:	2a1c      	cmp	r2, #28
 800218c:	dc00      	bgt.n	8002190 <__aeabi_ddiv+0x4e0>
 800218e:	e6fb      	b.n	8001f88 <__aeabi_ddiv+0x2d8>
 8002190:	9900      	ldr	r1, [sp, #0]
 8002192:	3808      	subs	r0, #8
 8002194:	4081      	lsls	r1, r0
 8002196:	2200      	movs	r2, #0
 8002198:	468b      	mov	fp, r1
 800219a:	e702      	b.n	8001fa2 <__aeabi_ddiv+0x2f2>
 800219c:	9900      	ldr	r1, [sp, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	468c      	mov	ip, r1
 80021a2:	4464      	add	r4, ip
 80021a4:	42a1      	cmp	r1, r4
 80021a6:	d900      	bls.n	80021aa <__aeabi_ddiv+0x4fa>
 80021a8:	e69a      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021aa:	42a2      	cmp	r2, r4
 80021ac:	d800      	bhi.n	80021b0 <__aeabi_ddiv+0x500>
 80021ae:	e697      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b0:	1e83      	subs	r3, r0, #2
 80021b2:	4464      	add	r4, ip
 80021b4:	e694      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b6:	46ac      	mov	ip, r5
 80021b8:	4461      	add	r1, ip
 80021ba:	3f01      	subs	r7, #1
 80021bc:	428d      	cmp	r5, r1
 80021be:	d900      	bls.n	80021c2 <__aeabi_ddiv+0x512>
 80021c0:	e680      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c2:	428a      	cmp	r2, r1
 80021c4:	d800      	bhi.n	80021c8 <__aeabi_ddiv+0x518>
 80021c6:	e67d      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c8:	1e87      	subs	r7, r0, #2
 80021ca:	4461      	add	r1, ip
 80021cc:	e67a      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021ce:	4285      	cmp	r5, r0
 80021d0:	d000      	beq.n	80021d4 <__aeabi_ddiv+0x524>
 80021d2:	e65f      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021d4:	45b9      	cmp	r9, r7
 80021d6:	d900      	bls.n	80021da <__aeabi_ddiv+0x52a>
 80021d8:	e65c      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021da:	e656      	b.n	8001e8a <__aeabi_ddiv+0x1da>
 80021dc:	42a2      	cmp	r2, r4
 80021de:	d800      	bhi.n	80021e2 <__aeabi_ddiv+0x532>
 80021e0:	e61a      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e2:	1e83      	subs	r3, r0, #2
 80021e4:	4464      	add	r4, ip
 80021e6:	e617      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e8:	428a      	cmp	r2, r1
 80021ea:	d800      	bhi.n	80021ee <__aeabi_ddiv+0x53e>
 80021ec:	e600      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021ee:	46ac      	mov	ip, r5
 80021f0:	1e83      	subs	r3, r0, #2
 80021f2:	4698      	mov	r8, r3
 80021f4:	4461      	add	r1, ip
 80021f6:	e5fb      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021f8:	4837      	ldr	r0, [pc, #220]	@ (80022d8 <__aeabi_ddiv+0x628>)
 80021fa:	0014      	movs	r4, r2
 80021fc:	4450      	add	r0, sl
 80021fe:	4082      	lsls	r2, r0
 8002200:	465b      	mov	r3, fp
 8002202:	0017      	movs	r7, r2
 8002204:	4083      	lsls	r3, r0
 8002206:	40cc      	lsrs	r4, r1
 8002208:	1e7a      	subs	r2, r7, #1
 800220a:	4197      	sbcs	r7, r2
 800220c:	4323      	orrs	r3, r4
 800220e:	433b      	orrs	r3, r7
 8002210:	001a      	movs	r2, r3
 8002212:	465b      	mov	r3, fp
 8002214:	40cb      	lsrs	r3, r1
 8002216:	0751      	lsls	r1, r2, #29
 8002218:	d009      	beq.n	800222e <__aeabi_ddiv+0x57e>
 800221a:	210f      	movs	r1, #15
 800221c:	4011      	ands	r1, r2
 800221e:	2904      	cmp	r1, #4
 8002220:	d005      	beq.n	800222e <__aeabi_ddiv+0x57e>
 8002222:	1d11      	adds	r1, r2, #4
 8002224:	4291      	cmp	r1, r2
 8002226:	4192      	sbcs	r2, r2
 8002228:	4252      	negs	r2, r2
 800222a:	189b      	adds	r3, r3, r2
 800222c:	000a      	movs	r2, r1
 800222e:	0219      	lsls	r1, r3, #8
 8002230:	d400      	bmi.n	8002234 <__aeabi_ddiv+0x584>
 8002232:	e755      	b.n	80020e0 <__aeabi_ddiv+0x430>
 8002234:	2200      	movs	r2, #0
 8002236:	2301      	movs	r3, #1
 8002238:	2400      	movs	r4, #0
 800223a:	4690      	mov	r8, r2
 800223c:	e598      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800223e:	000a      	movs	r2, r1
 8002240:	42bc      	cmp	r4, r7
 8002242:	d000      	beq.n	8002246 <__aeabi_ddiv+0x596>
 8002244:	e66e      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002246:	454b      	cmp	r3, r9
 8002248:	d000      	beq.n	800224c <__aeabi_ddiv+0x59c>
 800224a:	e66b      	b.n	8001f24 <__aeabi_ddiv+0x274>
 800224c:	e66c      	b.n	8001f28 <__aeabi_ddiv+0x278>
 800224e:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <__aeabi_ddiv+0x62c>)
 8002250:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <__aeabi_ddiv+0x630>)
 8002252:	4453      	add	r3, sl
 8002254:	4592      	cmp	sl, r2
 8002256:	da00      	bge.n	800225a <__aeabi_ddiv+0x5aa>
 8002258:	e718      	b.n	800208c <__aeabi_ddiv+0x3dc>
 800225a:	2101      	movs	r1, #1
 800225c:	4249      	negs	r1, r1
 800225e:	1d0a      	adds	r2, r1, #4
 8002260:	428a      	cmp	r2, r1
 8002262:	4189      	sbcs	r1, r1
 8002264:	4249      	negs	r1, r1
 8002266:	448b      	add	fp, r1
 8002268:	e666      	b.n	8001f38 <__aeabi_ddiv+0x288>
 800226a:	210f      	movs	r1, #15
 800226c:	4011      	ands	r1, r2
 800226e:	2904      	cmp	r1, #4
 8002270:	d100      	bne.n	8002274 <__aeabi_ddiv+0x5c4>
 8002272:	e661      	b.n	8001f38 <__aeabi_ddiv+0x288>
 8002274:	0011      	movs	r1, r2
 8002276:	e7f2      	b.n	800225e <__aeabi_ddiv+0x5ae>
 8002278:	42bc      	cmp	r4, r7
 800227a:	d800      	bhi.n	800227e <__aeabi_ddiv+0x5ce>
 800227c:	e60a      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 800227e:	2302      	movs	r3, #2
 8002280:	425b      	negs	r3, r3
 8002282:	469c      	mov	ip, r3
 8002284:	9900      	ldr	r1, [sp, #0]
 8002286:	444f      	add	r7, r9
 8002288:	454f      	cmp	r7, r9
 800228a:	419b      	sbcs	r3, r3
 800228c:	44e3      	add	fp, ip
 800228e:	468c      	mov	ip, r1
 8002290:	425b      	negs	r3, r3
 8002292:	4463      	add	r3, ip
 8002294:	18c0      	adds	r0, r0, r3
 8002296:	e5ff      	b.n	8001e98 <__aeabi_ddiv+0x1e8>
 8002298:	4649      	mov	r1, r9
 800229a:	9d00      	ldr	r5, [sp, #0]
 800229c:	0048      	lsls	r0, r1, #1
 800229e:	4548      	cmp	r0, r9
 80022a0:	4189      	sbcs	r1, r1
 80022a2:	46ac      	mov	ip, r5
 80022a4:	4249      	negs	r1, r1
 80022a6:	4461      	add	r1, ip
 80022a8:	4681      	mov	r9, r0
 80022aa:	3a02      	subs	r2, #2
 80022ac:	1864      	adds	r4, r4, r1
 80022ae:	e7c7      	b.n	8002240 <__aeabi_ddiv+0x590>
 80022b0:	2480      	movs	r4, #128	@ 0x80
 80022b2:	465b      	mov	r3, fp
 80022b4:	0324      	lsls	r4, r4, #12
 80022b6:	431c      	orrs	r4, r3
 80022b8:	0324      	lsls	r4, r4, #12
 80022ba:	4690      	mov	r8, r2
 80022bc:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <__aeabi_ddiv+0x620>)
 80022be:	0b24      	lsrs	r4, r4, #12
 80022c0:	e556      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80022c2:	4599      	cmp	r9, r3
 80022c4:	d3e8      	bcc.n	8002298 <__aeabi_ddiv+0x5e8>
 80022c6:	000a      	movs	r2, r1
 80022c8:	e7bd      	b.n	8002246 <__aeabi_ddiv+0x596>
 80022ca:	2300      	movs	r3, #0
 80022cc:	e708      	b.n	80020e0 <__aeabi_ddiv+0x430>
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	000007ff 	.word	0x000007ff
 80022d4:	0000043e 	.word	0x0000043e
 80022d8:	0000041e 	.word	0x0000041e
 80022dc:	000003ff 	.word	0x000003ff
 80022e0:	fffffc02 	.word	0xfffffc02

080022e4 <__eqdf2>:
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e6:	4657      	mov	r7, sl
 80022e8:	46de      	mov	lr, fp
 80022ea:	464e      	mov	r6, r9
 80022ec:	4645      	mov	r5, r8
 80022ee:	b5e0      	push	{r5, r6, r7, lr}
 80022f0:	000d      	movs	r5, r1
 80022f2:	0004      	movs	r4, r0
 80022f4:	0fe8      	lsrs	r0, r5, #31
 80022f6:	4683      	mov	fp, r0
 80022f8:	0309      	lsls	r1, r1, #12
 80022fa:	0fd8      	lsrs	r0, r3, #31
 80022fc:	0b09      	lsrs	r1, r1, #12
 80022fe:	4682      	mov	sl, r0
 8002300:	4819      	ldr	r0, [pc, #100]	@ (8002368 <__eqdf2+0x84>)
 8002302:	468c      	mov	ip, r1
 8002304:	031f      	lsls	r7, r3, #12
 8002306:	0069      	lsls	r1, r5, #1
 8002308:	005e      	lsls	r6, r3, #1
 800230a:	0d49      	lsrs	r1, r1, #21
 800230c:	0b3f      	lsrs	r7, r7, #12
 800230e:	0d76      	lsrs	r6, r6, #21
 8002310:	4281      	cmp	r1, r0
 8002312:	d018      	beq.n	8002346 <__eqdf2+0x62>
 8002314:	4286      	cmp	r6, r0
 8002316:	d00f      	beq.n	8002338 <__eqdf2+0x54>
 8002318:	2001      	movs	r0, #1
 800231a:	42b1      	cmp	r1, r6
 800231c:	d10d      	bne.n	800233a <__eqdf2+0x56>
 800231e:	45bc      	cmp	ip, r7
 8002320:	d10b      	bne.n	800233a <__eqdf2+0x56>
 8002322:	4294      	cmp	r4, r2
 8002324:	d109      	bne.n	800233a <__eqdf2+0x56>
 8002326:	45d3      	cmp	fp, sl
 8002328:	d01c      	beq.n	8002364 <__eqdf2+0x80>
 800232a:	2900      	cmp	r1, #0
 800232c:	d105      	bne.n	800233a <__eqdf2+0x56>
 800232e:	4660      	mov	r0, ip
 8002330:	4320      	orrs	r0, r4
 8002332:	1e43      	subs	r3, r0, #1
 8002334:	4198      	sbcs	r0, r3
 8002336:	e000      	b.n	800233a <__eqdf2+0x56>
 8002338:	2001      	movs	r0, #1
 800233a:	bcf0      	pop	{r4, r5, r6, r7}
 800233c:	46bb      	mov	fp, r7
 800233e:	46b2      	mov	sl, r6
 8002340:	46a9      	mov	r9, r5
 8002342:	46a0      	mov	r8, r4
 8002344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002346:	2001      	movs	r0, #1
 8002348:	428e      	cmp	r6, r1
 800234a:	d1f6      	bne.n	800233a <__eqdf2+0x56>
 800234c:	4661      	mov	r1, ip
 800234e:	4339      	orrs	r1, r7
 8002350:	000f      	movs	r7, r1
 8002352:	4317      	orrs	r7, r2
 8002354:	4327      	orrs	r7, r4
 8002356:	d1f0      	bne.n	800233a <__eqdf2+0x56>
 8002358:	465b      	mov	r3, fp
 800235a:	4652      	mov	r2, sl
 800235c:	1a98      	subs	r0, r3, r2
 800235e:	1e43      	subs	r3, r0, #1
 8002360:	4198      	sbcs	r0, r3
 8002362:	e7ea      	b.n	800233a <__eqdf2+0x56>
 8002364:	2000      	movs	r0, #0
 8002366:	e7e8      	b.n	800233a <__eqdf2+0x56>
 8002368:	000007ff 	.word	0x000007ff

0800236c <__gedf2>:
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	4657      	mov	r7, sl
 8002370:	464e      	mov	r6, r9
 8002372:	4645      	mov	r5, r8
 8002374:	46de      	mov	lr, fp
 8002376:	b5e0      	push	{r5, r6, r7, lr}
 8002378:	000d      	movs	r5, r1
 800237a:	030f      	lsls	r7, r1, #12
 800237c:	0b39      	lsrs	r1, r7, #12
 800237e:	b083      	sub	sp, #12
 8002380:	0004      	movs	r4, r0
 8002382:	4680      	mov	r8, r0
 8002384:	9101      	str	r1, [sp, #4]
 8002386:	0058      	lsls	r0, r3, #1
 8002388:	0fe9      	lsrs	r1, r5, #31
 800238a:	4f31      	ldr	r7, [pc, #196]	@ (8002450 <__gedf2+0xe4>)
 800238c:	0d40      	lsrs	r0, r0, #21
 800238e:	468c      	mov	ip, r1
 8002390:	006e      	lsls	r6, r5, #1
 8002392:	0319      	lsls	r1, r3, #12
 8002394:	4682      	mov	sl, r0
 8002396:	4691      	mov	r9, r2
 8002398:	0d76      	lsrs	r6, r6, #21
 800239a:	0b09      	lsrs	r1, r1, #12
 800239c:	0fd8      	lsrs	r0, r3, #31
 800239e:	42be      	cmp	r6, r7
 80023a0:	d01f      	beq.n	80023e2 <__gedf2+0x76>
 80023a2:	45ba      	cmp	sl, r7
 80023a4:	d00f      	beq.n	80023c6 <__gedf2+0x5a>
 80023a6:	2e00      	cmp	r6, #0
 80023a8:	d12f      	bne.n	800240a <__gedf2+0x9e>
 80023aa:	4655      	mov	r5, sl
 80023ac:	9e01      	ldr	r6, [sp, #4]
 80023ae:	4334      	orrs	r4, r6
 80023b0:	2d00      	cmp	r5, #0
 80023b2:	d127      	bne.n	8002404 <__gedf2+0x98>
 80023b4:	430a      	orrs	r2, r1
 80023b6:	d03a      	beq.n	800242e <__gedf2+0xc2>
 80023b8:	2c00      	cmp	r4, #0
 80023ba:	d145      	bne.n	8002448 <__gedf2+0xdc>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d11a      	bne.n	80023f6 <__gedf2+0x8a>
 80023c0:	2001      	movs	r0, #1
 80023c2:	4240      	negs	r0, r0
 80023c4:	e017      	b.n	80023f6 <__gedf2+0x8a>
 80023c6:	4311      	orrs	r1, r2
 80023c8:	d13b      	bne.n	8002442 <__gedf2+0xd6>
 80023ca:	2e00      	cmp	r6, #0
 80023cc:	d102      	bne.n	80023d4 <__gedf2+0x68>
 80023ce:	9f01      	ldr	r7, [sp, #4]
 80023d0:	4327      	orrs	r7, r4
 80023d2:	d0f3      	beq.n	80023bc <__gedf2+0x50>
 80023d4:	4584      	cmp	ip, r0
 80023d6:	d109      	bne.n	80023ec <__gedf2+0x80>
 80023d8:	4663      	mov	r3, ip
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <__gedf2+0x54>
 80023de:	4660      	mov	r0, ip
 80023e0:	e009      	b.n	80023f6 <__gedf2+0x8a>
 80023e2:	9f01      	ldr	r7, [sp, #4]
 80023e4:	4327      	orrs	r7, r4
 80023e6:	d12c      	bne.n	8002442 <__gedf2+0xd6>
 80023e8:	45b2      	cmp	sl, r6
 80023ea:	d024      	beq.n	8002436 <__gedf2+0xca>
 80023ec:	4663      	mov	r3, ip
 80023ee:	2002      	movs	r0, #2
 80023f0:	3b01      	subs	r3, #1
 80023f2:	4018      	ands	r0, r3
 80023f4:	3801      	subs	r0, #1
 80023f6:	b003      	add	sp, #12
 80023f8:	bcf0      	pop	{r4, r5, r6, r7}
 80023fa:	46bb      	mov	fp, r7
 80023fc:	46b2      	mov	sl, r6
 80023fe:	46a9      	mov	r9, r5
 8002400:	46a0      	mov	r8, r4
 8002402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002404:	2c00      	cmp	r4, #0
 8002406:	d0d9      	beq.n	80023bc <__gedf2+0x50>
 8002408:	e7e4      	b.n	80023d4 <__gedf2+0x68>
 800240a:	4654      	mov	r4, sl
 800240c:	2c00      	cmp	r4, #0
 800240e:	d0ed      	beq.n	80023ec <__gedf2+0x80>
 8002410:	4584      	cmp	ip, r0
 8002412:	d1eb      	bne.n	80023ec <__gedf2+0x80>
 8002414:	4556      	cmp	r6, sl
 8002416:	dce9      	bgt.n	80023ec <__gedf2+0x80>
 8002418:	dbde      	blt.n	80023d8 <__gedf2+0x6c>
 800241a:	9b01      	ldr	r3, [sp, #4]
 800241c:	428b      	cmp	r3, r1
 800241e:	d8e5      	bhi.n	80023ec <__gedf2+0x80>
 8002420:	d1da      	bne.n	80023d8 <__gedf2+0x6c>
 8002422:	45c8      	cmp	r8, r9
 8002424:	d8e2      	bhi.n	80023ec <__gedf2+0x80>
 8002426:	2000      	movs	r0, #0
 8002428:	45c8      	cmp	r8, r9
 800242a:	d2e4      	bcs.n	80023f6 <__gedf2+0x8a>
 800242c:	e7d4      	b.n	80023d8 <__gedf2+0x6c>
 800242e:	2000      	movs	r0, #0
 8002430:	2c00      	cmp	r4, #0
 8002432:	d0e0      	beq.n	80023f6 <__gedf2+0x8a>
 8002434:	e7da      	b.n	80023ec <__gedf2+0x80>
 8002436:	4311      	orrs	r1, r2
 8002438:	d103      	bne.n	8002442 <__gedf2+0xd6>
 800243a:	4584      	cmp	ip, r0
 800243c:	d1d6      	bne.n	80023ec <__gedf2+0x80>
 800243e:	2000      	movs	r0, #0
 8002440:	e7d9      	b.n	80023f6 <__gedf2+0x8a>
 8002442:	2002      	movs	r0, #2
 8002444:	4240      	negs	r0, r0
 8002446:	e7d6      	b.n	80023f6 <__gedf2+0x8a>
 8002448:	4584      	cmp	ip, r0
 800244a:	d0e6      	beq.n	800241a <__gedf2+0xae>
 800244c:	e7ce      	b.n	80023ec <__gedf2+0x80>
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	000007ff 	.word	0x000007ff

08002454 <__ledf2>:
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	4657      	mov	r7, sl
 8002458:	464e      	mov	r6, r9
 800245a:	4645      	mov	r5, r8
 800245c:	46de      	mov	lr, fp
 800245e:	b5e0      	push	{r5, r6, r7, lr}
 8002460:	000d      	movs	r5, r1
 8002462:	030f      	lsls	r7, r1, #12
 8002464:	0004      	movs	r4, r0
 8002466:	4680      	mov	r8, r0
 8002468:	0fe8      	lsrs	r0, r5, #31
 800246a:	0b39      	lsrs	r1, r7, #12
 800246c:	4684      	mov	ip, r0
 800246e:	b083      	sub	sp, #12
 8002470:	0058      	lsls	r0, r3, #1
 8002472:	4f30      	ldr	r7, [pc, #192]	@ (8002534 <__ledf2+0xe0>)
 8002474:	0d40      	lsrs	r0, r0, #21
 8002476:	9101      	str	r1, [sp, #4]
 8002478:	031e      	lsls	r6, r3, #12
 800247a:	0069      	lsls	r1, r5, #1
 800247c:	4682      	mov	sl, r0
 800247e:	4691      	mov	r9, r2
 8002480:	0d49      	lsrs	r1, r1, #21
 8002482:	0b36      	lsrs	r6, r6, #12
 8002484:	0fd8      	lsrs	r0, r3, #31
 8002486:	42b9      	cmp	r1, r7
 8002488:	d020      	beq.n	80024cc <__ledf2+0x78>
 800248a:	45ba      	cmp	sl, r7
 800248c:	d00f      	beq.n	80024ae <__ledf2+0x5a>
 800248e:	2900      	cmp	r1, #0
 8002490:	d12b      	bne.n	80024ea <__ledf2+0x96>
 8002492:	9901      	ldr	r1, [sp, #4]
 8002494:	430c      	orrs	r4, r1
 8002496:	4651      	mov	r1, sl
 8002498:	2900      	cmp	r1, #0
 800249a:	d137      	bne.n	800250c <__ledf2+0xb8>
 800249c:	4332      	orrs	r2, r6
 800249e:	d038      	beq.n	8002512 <__ledf2+0xbe>
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	d144      	bne.n	800252e <__ledf2+0xda>
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d119      	bne.n	80024dc <__ledf2+0x88>
 80024a8:	2001      	movs	r0, #1
 80024aa:	4240      	negs	r0, r0
 80024ac:	e016      	b.n	80024dc <__ledf2+0x88>
 80024ae:	4316      	orrs	r6, r2
 80024b0:	d113      	bne.n	80024da <__ledf2+0x86>
 80024b2:	2900      	cmp	r1, #0
 80024b4:	d102      	bne.n	80024bc <__ledf2+0x68>
 80024b6:	9f01      	ldr	r7, [sp, #4]
 80024b8:	4327      	orrs	r7, r4
 80024ba:	d0f3      	beq.n	80024a4 <__ledf2+0x50>
 80024bc:	4584      	cmp	ip, r0
 80024be:	d020      	beq.n	8002502 <__ledf2+0xae>
 80024c0:	4663      	mov	r3, ip
 80024c2:	2002      	movs	r0, #2
 80024c4:	3b01      	subs	r3, #1
 80024c6:	4018      	ands	r0, r3
 80024c8:	3801      	subs	r0, #1
 80024ca:	e007      	b.n	80024dc <__ledf2+0x88>
 80024cc:	9f01      	ldr	r7, [sp, #4]
 80024ce:	4327      	orrs	r7, r4
 80024d0:	d103      	bne.n	80024da <__ledf2+0x86>
 80024d2:	458a      	cmp	sl, r1
 80024d4:	d1f4      	bne.n	80024c0 <__ledf2+0x6c>
 80024d6:	4316      	orrs	r6, r2
 80024d8:	d01f      	beq.n	800251a <__ledf2+0xc6>
 80024da:	2002      	movs	r0, #2
 80024dc:	b003      	add	sp, #12
 80024de:	bcf0      	pop	{r4, r5, r6, r7}
 80024e0:	46bb      	mov	fp, r7
 80024e2:	46b2      	mov	sl, r6
 80024e4:	46a9      	mov	r9, r5
 80024e6:	46a0      	mov	r8, r4
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ea:	4654      	mov	r4, sl
 80024ec:	2c00      	cmp	r4, #0
 80024ee:	d0e7      	beq.n	80024c0 <__ledf2+0x6c>
 80024f0:	4584      	cmp	ip, r0
 80024f2:	d1e5      	bne.n	80024c0 <__ledf2+0x6c>
 80024f4:	4551      	cmp	r1, sl
 80024f6:	dce3      	bgt.n	80024c0 <__ledf2+0x6c>
 80024f8:	db03      	blt.n	8002502 <__ledf2+0xae>
 80024fa:	9b01      	ldr	r3, [sp, #4]
 80024fc:	42b3      	cmp	r3, r6
 80024fe:	d8df      	bhi.n	80024c0 <__ledf2+0x6c>
 8002500:	d00f      	beq.n	8002522 <__ledf2+0xce>
 8002502:	4663      	mov	r3, ip
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0cf      	beq.n	80024a8 <__ledf2+0x54>
 8002508:	4660      	mov	r0, ip
 800250a:	e7e7      	b.n	80024dc <__ledf2+0x88>
 800250c:	2c00      	cmp	r4, #0
 800250e:	d0c9      	beq.n	80024a4 <__ledf2+0x50>
 8002510:	e7d4      	b.n	80024bc <__ledf2+0x68>
 8002512:	2000      	movs	r0, #0
 8002514:	2c00      	cmp	r4, #0
 8002516:	d0e1      	beq.n	80024dc <__ledf2+0x88>
 8002518:	e7d2      	b.n	80024c0 <__ledf2+0x6c>
 800251a:	4584      	cmp	ip, r0
 800251c:	d1d0      	bne.n	80024c0 <__ledf2+0x6c>
 800251e:	2000      	movs	r0, #0
 8002520:	e7dc      	b.n	80024dc <__ledf2+0x88>
 8002522:	45c8      	cmp	r8, r9
 8002524:	d8cc      	bhi.n	80024c0 <__ledf2+0x6c>
 8002526:	2000      	movs	r0, #0
 8002528:	45c8      	cmp	r8, r9
 800252a:	d2d7      	bcs.n	80024dc <__ledf2+0x88>
 800252c:	e7e9      	b.n	8002502 <__ledf2+0xae>
 800252e:	4584      	cmp	ip, r0
 8002530:	d0e3      	beq.n	80024fa <__ledf2+0xa6>
 8002532:	e7c5      	b.n	80024c0 <__ledf2+0x6c>
 8002534:	000007ff 	.word	0x000007ff

08002538 <__aeabi_dmul>:
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253a:	4657      	mov	r7, sl
 800253c:	46de      	mov	lr, fp
 800253e:	464e      	mov	r6, r9
 8002540:	4645      	mov	r5, r8
 8002542:	b5e0      	push	{r5, r6, r7, lr}
 8002544:	001f      	movs	r7, r3
 8002546:	030b      	lsls	r3, r1, #12
 8002548:	0b1b      	lsrs	r3, r3, #12
 800254a:	0016      	movs	r6, r2
 800254c:	469a      	mov	sl, r3
 800254e:	0fca      	lsrs	r2, r1, #31
 8002550:	004b      	lsls	r3, r1, #1
 8002552:	0004      	movs	r4, r0
 8002554:	4693      	mov	fp, r2
 8002556:	b087      	sub	sp, #28
 8002558:	0d5b      	lsrs	r3, r3, #21
 800255a:	d100      	bne.n	800255e <__aeabi_dmul+0x26>
 800255c:	e0d5      	b.n	800270a <__aeabi_dmul+0x1d2>
 800255e:	4abb      	ldr	r2, [pc, #748]	@ (800284c <__aeabi_dmul+0x314>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d100      	bne.n	8002566 <__aeabi_dmul+0x2e>
 8002564:	e0f8      	b.n	8002758 <__aeabi_dmul+0x220>
 8002566:	4651      	mov	r1, sl
 8002568:	0f42      	lsrs	r2, r0, #29
 800256a:	00c9      	lsls	r1, r1, #3
 800256c:	430a      	orrs	r2, r1
 800256e:	2180      	movs	r1, #128	@ 0x80
 8002570:	0409      	lsls	r1, r1, #16
 8002572:	4311      	orrs	r1, r2
 8002574:	00c2      	lsls	r2, r0, #3
 8002576:	4691      	mov	r9, r2
 8002578:	4ab5      	ldr	r2, [pc, #724]	@ (8002850 <__aeabi_dmul+0x318>)
 800257a:	468a      	mov	sl, r1
 800257c:	189d      	adds	r5, r3, r2
 800257e:	2300      	movs	r3, #0
 8002580:	4698      	mov	r8, r3
 8002582:	9302      	str	r3, [sp, #8]
 8002584:	033c      	lsls	r4, r7, #12
 8002586:	007b      	lsls	r3, r7, #1
 8002588:	0ffa      	lsrs	r2, r7, #31
 800258a:	0030      	movs	r0, r6
 800258c:	0b24      	lsrs	r4, r4, #12
 800258e:	0d5b      	lsrs	r3, r3, #21
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	d100      	bne.n	8002596 <__aeabi_dmul+0x5e>
 8002594:	e096      	b.n	80026c4 <__aeabi_dmul+0x18c>
 8002596:	4aad      	ldr	r2, [pc, #692]	@ (800284c <__aeabi_dmul+0x314>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d031      	beq.n	8002600 <__aeabi_dmul+0xc8>
 800259c:	0f72      	lsrs	r2, r6, #29
 800259e:	00e4      	lsls	r4, r4, #3
 80025a0:	4322      	orrs	r2, r4
 80025a2:	2480      	movs	r4, #128	@ 0x80
 80025a4:	0424      	lsls	r4, r4, #16
 80025a6:	4314      	orrs	r4, r2
 80025a8:	4aa9      	ldr	r2, [pc, #676]	@ (8002850 <__aeabi_dmul+0x318>)
 80025aa:	00f0      	lsls	r0, r6, #3
 80025ac:	4694      	mov	ip, r2
 80025ae:	4463      	add	r3, ip
 80025b0:	195b      	adds	r3, r3, r5
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	9201      	str	r2, [sp, #4]
 80025b6:	4642      	mov	r2, r8
 80025b8:	2600      	movs	r6, #0
 80025ba:	2a0a      	cmp	r2, #10
 80025bc:	dc42      	bgt.n	8002644 <__aeabi_dmul+0x10c>
 80025be:	465a      	mov	r2, fp
 80025c0:	9900      	ldr	r1, [sp, #0]
 80025c2:	404a      	eors	r2, r1
 80025c4:	4693      	mov	fp, r2
 80025c6:	4642      	mov	r2, r8
 80025c8:	2a02      	cmp	r2, #2
 80025ca:	dc32      	bgt.n	8002632 <__aeabi_dmul+0xfa>
 80025cc:	3a01      	subs	r2, #1
 80025ce:	2a01      	cmp	r2, #1
 80025d0:	d900      	bls.n	80025d4 <__aeabi_dmul+0x9c>
 80025d2:	e149      	b.n	8002868 <__aeabi_dmul+0x330>
 80025d4:	2e02      	cmp	r6, #2
 80025d6:	d100      	bne.n	80025da <__aeabi_dmul+0xa2>
 80025d8:	e0ca      	b.n	8002770 <__aeabi_dmul+0x238>
 80025da:	2e01      	cmp	r6, #1
 80025dc:	d13d      	bne.n	800265a <__aeabi_dmul+0x122>
 80025de:	2300      	movs	r3, #0
 80025e0:	2400      	movs	r4, #0
 80025e2:	2200      	movs	r2, #0
 80025e4:	0010      	movs	r0, r2
 80025e6:	465a      	mov	r2, fp
 80025e8:	051b      	lsls	r3, r3, #20
 80025ea:	4323      	orrs	r3, r4
 80025ec:	07d2      	lsls	r2, r2, #31
 80025ee:	4313      	orrs	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	b007      	add	sp, #28
 80025f4:	bcf0      	pop	{r4, r5, r6, r7}
 80025f6:	46bb      	mov	fp, r7
 80025f8:	46b2      	mov	sl, r6
 80025fa:	46a9      	mov	r9, r5
 80025fc:	46a0      	mov	r8, r4
 80025fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002600:	4b92      	ldr	r3, [pc, #584]	@ (800284c <__aeabi_dmul+0x314>)
 8002602:	4326      	orrs	r6, r4
 8002604:	18eb      	adds	r3, r5, r3
 8002606:	2e00      	cmp	r6, #0
 8002608:	d100      	bne.n	800260c <__aeabi_dmul+0xd4>
 800260a:	e0bb      	b.n	8002784 <__aeabi_dmul+0x24c>
 800260c:	2203      	movs	r2, #3
 800260e:	4641      	mov	r1, r8
 8002610:	4311      	orrs	r1, r2
 8002612:	465a      	mov	r2, fp
 8002614:	4688      	mov	r8, r1
 8002616:	9900      	ldr	r1, [sp, #0]
 8002618:	404a      	eors	r2, r1
 800261a:	2180      	movs	r1, #128	@ 0x80
 800261c:	0109      	lsls	r1, r1, #4
 800261e:	468c      	mov	ip, r1
 8002620:	0029      	movs	r1, r5
 8002622:	4461      	add	r1, ip
 8002624:	9101      	str	r1, [sp, #4]
 8002626:	4641      	mov	r1, r8
 8002628:	290a      	cmp	r1, #10
 800262a:	dd00      	ble.n	800262e <__aeabi_dmul+0xf6>
 800262c:	e233      	b.n	8002a96 <__aeabi_dmul+0x55e>
 800262e:	4693      	mov	fp, r2
 8002630:	2603      	movs	r6, #3
 8002632:	4642      	mov	r2, r8
 8002634:	2701      	movs	r7, #1
 8002636:	4097      	lsls	r7, r2
 8002638:	21a6      	movs	r1, #166	@ 0xa6
 800263a:	003a      	movs	r2, r7
 800263c:	00c9      	lsls	r1, r1, #3
 800263e:	400a      	ands	r2, r1
 8002640:	420f      	tst	r7, r1
 8002642:	d031      	beq.n	80026a8 <__aeabi_dmul+0x170>
 8002644:	9e02      	ldr	r6, [sp, #8]
 8002646:	2e02      	cmp	r6, #2
 8002648:	d100      	bne.n	800264c <__aeabi_dmul+0x114>
 800264a:	e235      	b.n	8002ab8 <__aeabi_dmul+0x580>
 800264c:	2e03      	cmp	r6, #3
 800264e:	d100      	bne.n	8002652 <__aeabi_dmul+0x11a>
 8002650:	e1d2      	b.n	80029f8 <__aeabi_dmul+0x4c0>
 8002652:	4654      	mov	r4, sl
 8002654:	4648      	mov	r0, r9
 8002656:	2e01      	cmp	r6, #1
 8002658:	d0c1      	beq.n	80025de <__aeabi_dmul+0xa6>
 800265a:	9a01      	ldr	r2, [sp, #4]
 800265c:	4b7d      	ldr	r3, [pc, #500]	@ (8002854 <__aeabi_dmul+0x31c>)
 800265e:	4694      	mov	ip, r2
 8002660:	4463      	add	r3, ip
 8002662:	2b00      	cmp	r3, #0
 8002664:	dc00      	bgt.n	8002668 <__aeabi_dmul+0x130>
 8002666:	e0c0      	b.n	80027ea <__aeabi_dmul+0x2b2>
 8002668:	0742      	lsls	r2, r0, #29
 800266a:	d009      	beq.n	8002680 <__aeabi_dmul+0x148>
 800266c:	220f      	movs	r2, #15
 800266e:	4002      	ands	r2, r0
 8002670:	2a04      	cmp	r2, #4
 8002672:	d005      	beq.n	8002680 <__aeabi_dmul+0x148>
 8002674:	1d02      	adds	r2, r0, #4
 8002676:	4282      	cmp	r2, r0
 8002678:	4180      	sbcs	r0, r0
 800267a:	4240      	negs	r0, r0
 800267c:	1824      	adds	r4, r4, r0
 800267e:	0010      	movs	r0, r2
 8002680:	01e2      	lsls	r2, r4, #7
 8002682:	d506      	bpl.n	8002692 <__aeabi_dmul+0x15a>
 8002684:	4b74      	ldr	r3, [pc, #464]	@ (8002858 <__aeabi_dmul+0x320>)
 8002686:	9a01      	ldr	r2, [sp, #4]
 8002688:	401c      	ands	r4, r3
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	4694      	mov	ip, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4463      	add	r3, ip
 8002692:	4a72      	ldr	r2, [pc, #456]	@ (800285c <__aeabi_dmul+0x324>)
 8002694:	4293      	cmp	r3, r2
 8002696:	dc6b      	bgt.n	8002770 <__aeabi_dmul+0x238>
 8002698:	0762      	lsls	r2, r4, #29
 800269a:	08c0      	lsrs	r0, r0, #3
 800269c:	0264      	lsls	r4, r4, #9
 800269e:	055b      	lsls	r3, r3, #21
 80026a0:	4302      	orrs	r2, r0
 80026a2:	0b24      	lsrs	r4, r4, #12
 80026a4:	0d5b      	lsrs	r3, r3, #21
 80026a6:	e79d      	b.n	80025e4 <__aeabi_dmul+0xac>
 80026a8:	2190      	movs	r1, #144	@ 0x90
 80026aa:	0089      	lsls	r1, r1, #2
 80026ac:	420f      	tst	r7, r1
 80026ae:	d163      	bne.n	8002778 <__aeabi_dmul+0x240>
 80026b0:	2288      	movs	r2, #136	@ 0x88
 80026b2:	423a      	tst	r2, r7
 80026b4:	d100      	bne.n	80026b8 <__aeabi_dmul+0x180>
 80026b6:	e0d7      	b.n	8002868 <__aeabi_dmul+0x330>
 80026b8:	9b00      	ldr	r3, [sp, #0]
 80026ba:	46a2      	mov	sl, r4
 80026bc:	469b      	mov	fp, r3
 80026be:	4681      	mov	r9, r0
 80026c0:	9602      	str	r6, [sp, #8]
 80026c2:	e7bf      	b.n	8002644 <__aeabi_dmul+0x10c>
 80026c4:	0023      	movs	r3, r4
 80026c6:	4333      	orrs	r3, r6
 80026c8:	d100      	bne.n	80026cc <__aeabi_dmul+0x194>
 80026ca:	e07f      	b.n	80027cc <__aeabi_dmul+0x294>
 80026cc:	2c00      	cmp	r4, #0
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dmul+0x19a>
 80026d0:	e1ad      	b.n	8002a2e <__aeabi_dmul+0x4f6>
 80026d2:	0020      	movs	r0, r4
 80026d4:	f000 ff10 	bl	80034f8 <__clzsi2>
 80026d8:	0002      	movs	r2, r0
 80026da:	0003      	movs	r3, r0
 80026dc:	3a0b      	subs	r2, #11
 80026de:	201d      	movs	r0, #29
 80026e0:	0019      	movs	r1, r3
 80026e2:	1a82      	subs	r2, r0, r2
 80026e4:	0030      	movs	r0, r6
 80026e6:	3908      	subs	r1, #8
 80026e8:	40d0      	lsrs	r0, r2
 80026ea:	408c      	lsls	r4, r1
 80026ec:	4304      	orrs	r4, r0
 80026ee:	0030      	movs	r0, r6
 80026f0:	4088      	lsls	r0, r1
 80026f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002860 <__aeabi_dmul+0x328>)
 80026f4:	1aeb      	subs	r3, r5, r3
 80026f6:	4694      	mov	ip, r2
 80026f8:	4463      	add	r3, ip
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	9201      	str	r2, [sp, #4]
 80026fe:	4642      	mov	r2, r8
 8002700:	2600      	movs	r6, #0
 8002702:	2a0a      	cmp	r2, #10
 8002704:	dc00      	bgt.n	8002708 <__aeabi_dmul+0x1d0>
 8002706:	e75a      	b.n	80025be <__aeabi_dmul+0x86>
 8002708:	e79c      	b.n	8002644 <__aeabi_dmul+0x10c>
 800270a:	4653      	mov	r3, sl
 800270c:	4303      	orrs	r3, r0
 800270e:	4699      	mov	r9, r3
 8002710:	d054      	beq.n	80027bc <__aeabi_dmul+0x284>
 8002712:	4653      	mov	r3, sl
 8002714:	2b00      	cmp	r3, #0
 8002716:	d100      	bne.n	800271a <__aeabi_dmul+0x1e2>
 8002718:	e177      	b.n	8002a0a <__aeabi_dmul+0x4d2>
 800271a:	4650      	mov	r0, sl
 800271c:	f000 feec 	bl	80034f8 <__clzsi2>
 8002720:	230b      	movs	r3, #11
 8002722:	425b      	negs	r3, r3
 8002724:	469c      	mov	ip, r3
 8002726:	0002      	movs	r2, r0
 8002728:	4484      	add	ip, r0
 800272a:	0011      	movs	r1, r2
 800272c:	4650      	mov	r0, sl
 800272e:	3908      	subs	r1, #8
 8002730:	4088      	lsls	r0, r1
 8002732:	231d      	movs	r3, #29
 8002734:	4680      	mov	r8, r0
 8002736:	4660      	mov	r0, ip
 8002738:	1a1b      	subs	r3, r3, r0
 800273a:	0020      	movs	r0, r4
 800273c:	40d8      	lsrs	r0, r3
 800273e:	0003      	movs	r3, r0
 8002740:	4640      	mov	r0, r8
 8002742:	4303      	orrs	r3, r0
 8002744:	469a      	mov	sl, r3
 8002746:	0023      	movs	r3, r4
 8002748:	408b      	lsls	r3, r1
 800274a:	4699      	mov	r9, r3
 800274c:	2300      	movs	r3, #0
 800274e:	4d44      	ldr	r5, [pc, #272]	@ (8002860 <__aeabi_dmul+0x328>)
 8002750:	4698      	mov	r8, r3
 8002752:	1aad      	subs	r5, r5, r2
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	e715      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002758:	4652      	mov	r2, sl
 800275a:	4302      	orrs	r2, r0
 800275c:	4691      	mov	r9, r2
 800275e:	d126      	bne.n	80027ae <__aeabi_dmul+0x276>
 8002760:	2200      	movs	r2, #0
 8002762:	001d      	movs	r5, r3
 8002764:	2302      	movs	r3, #2
 8002766:	4692      	mov	sl, r2
 8002768:	3208      	adds	r2, #8
 800276a:	4690      	mov	r8, r2
 800276c:	9302      	str	r3, [sp, #8]
 800276e:	e709      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002770:	2400      	movs	r4, #0
 8002772:	2200      	movs	r2, #0
 8002774:	4b35      	ldr	r3, [pc, #212]	@ (800284c <__aeabi_dmul+0x314>)
 8002776:	e735      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002778:	2300      	movs	r3, #0
 800277a:	2480      	movs	r4, #128	@ 0x80
 800277c:	469b      	mov	fp, r3
 800277e:	0324      	lsls	r4, r4, #12
 8002780:	4b32      	ldr	r3, [pc, #200]	@ (800284c <__aeabi_dmul+0x314>)
 8002782:	e72f      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002784:	2202      	movs	r2, #2
 8002786:	4641      	mov	r1, r8
 8002788:	4311      	orrs	r1, r2
 800278a:	2280      	movs	r2, #128	@ 0x80
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	4694      	mov	ip, r2
 8002790:	002a      	movs	r2, r5
 8002792:	4462      	add	r2, ip
 8002794:	4688      	mov	r8, r1
 8002796:	9201      	str	r2, [sp, #4]
 8002798:	290a      	cmp	r1, #10
 800279a:	dd00      	ble.n	800279e <__aeabi_dmul+0x266>
 800279c:	e752      	b.n	8002644 <__aeabi_dmul+0x10c>
 800279e:	465a      	mov	r2, fp
 80027a0:	2000      	movs	r0, #0
 80027a2:	9900      	ldr	r1, [sp, #0]
 80027a4:	0004      	movs	r4, r0
 80027a6:	404a      	eors	r2, r1
 80027a8:	4693      	mov	fp, r2
 80027aa:	2602      	movs	r6, #2
 80027ac:	e70b      	b.n	80025c6 <__aeabi_dmul+0x8e>
 80027ae:	220c      	movs	r2, #12
 80027b0:	001d      	movs	r5, r3
 80027b2:	2303      	movs	r3, #3
 80027b4:	4681      	mov	r9, r0
 80027b6:	4690      	mov	r8, r2
 80027b8:	9302      	str	r3, [sp, #8]
 80027ba:	e6e3      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027bc:	2300      	movs	r3, #0
 80027be:	469a      	mov	sl, r3
 80027c0:	3304      	adds	r3, #4
 80027c2:	4698      	mov	r8, r3
 80027c4:	3b03      	subs	r3, #3
 80027c6:	2500      	movs	r5, #0
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	e6db      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027cc:	4642      	mov	r2, r8
 80027ce:	3301      	adds	r3, #1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	002b      	movs	r3, r5
 80027d4:	4690      	mov	r8, r2
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	9201      	str	r2, [sp, #4]
 80027da:	4642      	mov	r2, r8
 80027dc:	2400      	movs	r4, #0
 80027de:	2000      	movs	r0, #0
 80027e0:	2601      	movs	r6, #1
 80027e2:	2a0a      	cmp	r2, #10
 80027e4:	dc00      	bgt.n	80027e8 <__aeabi_dmul+0x2b0>
 80027e6:	e6ea      	b.n	80025be <__aeabi_dmul+0x86>
 80027e8:	e72c      	b.n	8002644 <__aeabi_dmul+0x10c>
 80027ea:	2201      	movs	r2, #1
 80027ec:	1ad2      	subs	r2, r2, r3
 80027ee:	2a38      	cmp	r2, #56	@ 0x38
 80027f0:	dd00      	ble.n	80027f4 <__aeabi_dmul+0x2bc>
 80027f2:	e6f4      	b.n	80025de <__aeabi_dmul+0xa6>
 80027f4:	2a1f      	cmp	r2, #31
 80027f6:	dc00      	bgt.n	80027fa <__aeabi_dmul+0x2c2>
 80027f8:	e12a      	b.n	8002a50 <__aeabi_dmul+0x518>
 80027fa:	211f      	movs	r1, #31
 80027fc:	4249      	negs	r1, r1
 80027fe:	1acb      	subs	r3, r1, r3
 8002800:	0021      	movs	r1, r4
 8002802:	40d9      	lsrs	r1, r3
 8002804:	000b      	movs	r3, r1
 8002806:	2a20      	cmp	r2, #32
 8002808:	d005      	beq.n	8002816 <__aeabi_dmul+0x2de>
 800280a:	4a16      	ldr	r2, [pc, #88]	@ (8002864 <__aeabi_dmul+0x32c>)
 800280c:	9d01      	ldr	r5, [sp, #4]
 800280e:	4694      	mov	ip, r2
 8002810:	4465      	add	r5, ip
 8002812:	40ac      	lsls	r4, r5
 8002814:	4320      	orrs	r0, r4
 8002816:	1e42      	subs	r2, r0, #1
 8002818:	4190      	sbcs	r0, r2
 800281a:	4318      	orrs	r0, r3
 800281c:	2307      	movs	r3, #7
 800281e:	0019      	movs	r1, r3
 8002820:	2400      	movs	r4, #0
 8002822:	4001      	ands	r1, r0
 8002824:	4203      	tst	r3, r0
 8002826:	d00c      	beq.n	8002842 <__aeabi_dmul+0x30a>
 8002828:	230f      	movs	r3, #15
 800282a:	4003      	ands	r3, r0
 800282c:	2b04      	cmp	r3, #4
 800282e:	d100      	bne.n	8002832 <__aeabi_dmul+0x2fa>
 8002830:	e140      	b.n	8002ab4 <__aeabi_dmul+0x57c>
 8002832:	1d03      	adds	r3, r0, #4
 8002834:	4283      	cmp	r3, r0
 8002836:	41a4      	sbcs	r4, r4
 8002838:	0018      	movs	r0, r3
 800283a:	4264      	negs	r4, r4
 800283c:	0761      	lsls	r1, r4, #29
 800283e:	0264      	lsls	r4, r4, #9
 8002840:	0b24      	lsrs	r4, r4, #12
 8002842:	08c2      	lsrs	r2, r0, #3
 8002844:	2300      	movs	r3, #0
 8002846:	430a      	orrs	r2, r1
 8002848:	e6cc      	b.n	80025e4 <__aeabi_dmul+0xac>
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	000007ff 	.word	0x000007ff
 8002850:	fffffc01 	.word	0xfffffc01
 8002854:	000003ff 	.word	0x000003ff
 8002858:	feffffff 	.word	0xfeffffff
 800285c:	000007fe 	.word	0x000007fe
 8002860:	fffffc0d 	.word	0xfffffc0d
 8002864:	0000043e 	.word	0x0000043e
 8002868:	4649      	mov	r1, r9
 800286a:	464a      	mov	r2, r9
 800286c:	0409      	lsls	r1, r1, #16
 800286e:	0c09      	lsrs	r1, r1, #16
 8002870:	000d      	movs	r5, r1
 8002872:	0c16      	lsrs	r6, r2, #16
 8002874:	0c02      	lsrs	r2, r0, #16
 8002876:	0400      	lsls	r0, r0, #16
 8002878:	0c00      	lsrs	r0, r0, #16
 800287a:	4345      	muls	r5, r0
 800287c:	46ac      	mov	ip, r5
 800287e:	0005      	movs	r5, r0
 8002880:	4375      	muls	r5, r6
 8002882:	46a8      	mov	r8, r5
 8002884:	0015      	movs	r5, r2
 8002886:	000f      	movs	r7, r1
 8002888:	4375      	muls	r5, r6
 800288a:	9200      	str	r2, [sp, #0]
 800288c:	9502      	str	r5, [sp, #8]
 800288e:	002a      	movs	r2, r5
 8002890:	9d00      	ldr	r5, [sp, #0]
 8002892:	436f      	muls	r7, r5
 8002894:	4665      	mov	r5, ip
 8002896:	0c2d      	lsrs	r5, r5, #16
 8002898:	46a9      	mov	r9, r5
 800289a:	4447      	add	r7, r8
 800289c:	444f      	add	r7, r9
 800289e:	45b8      	cmp	r8, r7
 80028a0:	d905      	bls.n	80028ae <__aeabi_dmul+0x376>
 80028a2:	0015      	movs	r5, r2
 80028a4:	2280      	movs	r2, #128	@ 0x80
 80028a6:	0252      	lsls	r2, r2, #9
 80028a8:	4690      	mov	r8, r2
 80028aa:	4445      	add	r5, r8
 80028ac:	9502      	str	r5, [sp, #8]
 80028ae:	0c3d      	lsrs	r5, r7, #16
 80028b0:	9503      	str	r5, [sp, #12]
 80028b2:	4665      	mov	r5, ip
 80028b4:	042d      	lsls	r5, r5, #16
 80028b6:	043f      	lsls	r7, r7, #16
 80028b8:	0c2d      	lsrs	r5, r5, #16
 80028ba:	46ac      	mov	ip, r5
 80028bc:	003d      	movs	r5, r7
 80028be:	4465      	add	r5, ip
 80028c0:	9504      	str	r5, [sp, #16]
 80028c2:	0c25      	lsrs	r5, r4, #16
 80028c4:	0424      	lsls	r4, r4, #16
 80028c6:	0c24      	lsrs	r4, r4, #16
 80028c8:	46ac      	mov	ip, r5
 80028ca:	0025      	movs	r5, r4
 80028cc:	4375      	muls	r5, r6
 80028ce:	46a8      	mov	r8, r5
 80028d0:	4665      	mov	r5, ip
 80028d2:	000f      	movs	r7, r1
 80028d4:	4369      	muls	r1, r5
 80028d6:	4441      	add	r1, r8
 80028d8:	4689      	mov	r9, r1
 80028da:	4367      	muls	r7, r4
 80028dc:	0c39      	lsrs	r1, r7, #16
 80028de:	4449      	add	r1, r9
 80028e0:	436e      	muls	r6, r5
 80028e2:	4588      	cmp	r8, r1
 80028e4:	d903      	bls.n	80028ee <__aeabi_dmul+0x3b6>
 80028e6:	2280      	movs	r2, #128	@ 0x80
 80028e8:	0252      	lsls	r2, r2, #9
 80028ea:	4690      	mov	r8, r2
 80028ec:	4446      	add	r6, r8
 80028ee:	0c0d      	lsrs	r5, r1, #16
 80028f0:	46a8      	mov	r8, r5
 80028f2:	0035      	movs	r5, r6
 80028f4:	4445      	add	r5, r8
 80028f6:	9505      	str	r5, [sp, #20]
 80028f8:	9d03      	ldr	r5, [sp, #12]
 80028fa:	043f      	lsls	r7, r7, #16
 80028fc:	46a8      	mov	r8, r5
 80028fe:	0c3f      	lsrs	r7, r7, #16
 8002900:	0409      	lsls	r1, r1, #16
 8002902:	19c9      	adds	r1, r1, r7
 8002904:	4488      	add	r8, r1
 8002906:	4645      	mov	r5, r8
 8002908:	9503      	str	r5, [sp, #12]
 800290a:	4655      	mov	r5, sl
 800290c:	042e      	lsls	r6, r5, #16
 800290e:	0c36      	lsrs	r6, r6, #16
 8002910:	0c2f      	lsrs	r7, r5, #16
 8002912:	0035      	movs	r5, r6
 8002914:	4345      	muls	r5, r0
 8002916:	4378      	muls	r0, r7
 8002918:	4681      	mov	r9, r0
 800291a:	0038      	movs	r0, r7
 800291c:	46a8      	mov	r8, r5
 800291e:	0c2d      	lsrs	r5, r5, #16
 8002920:	46aa      	mov	sl, r5
 8002922:	9a00      	ldr	r2, [sp, #0]
 8002924:	4350      	muls	r0, r2
 8002926:	4372      	muls	r2, r6
 8002928:	444a      	add	r2, r9
 800292a:	4452      	add	r2, sl
 800292c:	4591      	cmp	r9, r2
 800292e:	d903      	bls.n	8002938 <__aeabi_dmul+0x400>
 8002930:	2580      	movs	r5, #128	@ 0x80
 8002932:	026d      	lsls	r5, r5, #9
 8002934:	46a9      	mov	r9, r5
 8002936:	4448      	add	r0, r9
 8002938:	0c15      	lsrs	r5, r2, #16
 800293a:	46a9      	mov	r9, r5
 800293c:	4645      	mov	r5, r8
 800293e:	042d      	lsls	r5, r5, #16
 8002940:	0c2d      	lsrs	r5, r5, #16
 8002942:	46a8      	mov	r8, r5
 8002944:	4665      	mov	r5, ip
 8002946:	437d      	muls	r5, r7
 8002948:	0412      	lsls	r2, r2, #16
 800294a:	4448      	add	r0, r9
 800294c:	4490      	add	r8, r2
 800294e:	46a9      	mov	r9, r5
 8002950:	0032      	movs	r2, r6
 8002952:	4665      	mov	r5, ip
 8002954:	4362      	muls	r2, r4
 8002956:	436e      	muls	r6, r5
 8002958:	437c      	muls	r4, r7
 800295a:	0c17      	lsrs	r7, r2, #16
 800295c:	1936      	adds	r6, r6, r4
 800295e:	19bf      	adds	r7, r7, r6
 8002960:	42bc      	cmp	r4, r7
 8002962:	d903      	bls.n	800296c <__aeabi_dmul+0x434>
 8002964:	2480      	movs	r4, #128	@ 0x80
 8002966:	0264      	lsls	r4, r4, #9
 8002968:	46a4      	mov	ip, r4
 800296a:	44e1      	add	r9, ip
 800296c:	9c02      	ldr	r4, [sp, #8]
 800296e:	9e03      	ldr	r6, [sp, #12]
 8002970:	46a4      	mov	ip, r4
 8002972:	9d05      	ldr	r5, [sp, #20]
 8002974:	4466      	add	r6, ip
 8002976:	428e      	cmp	r6, r1
 8002978:	4189      	sbcs	r1, r1
 800297a:	46ac      	mov	ip, r5
 800297c:	0412      	lsls	r2, r2, #16
 800297e:	043c      	lsls	r4, r7, #16
 8002980:	0c12      	lsrs	r2, r2, #16
 8002982:	18a2      	adds	r2, r4, r2
 8002984:	4462      	add	r2, ip
 8002986:	4249      	negs	r1, r1
 8002988:	1854      	adds	r4, r2, r1
 800298a:	4446      	add	r6, r8
 800298c:	46a4      	mov	ip, r4
 800298e:	4546      	cmp	r6, r8
 8002990:	41a4      	sbcs	r4, r4
 8002992:	4682      	mov	sl, r0
 8002994:	4264      	negs	r4, r4
 8002996:	46a0      	mov	r8, r4
 8002998:	42aa      	cmp	r2, r5
 800299a:	4192      	sbcs	r2, r2
 800299c:	458c      	cmp	ip, r1
 800299e:	4189      	sbcs	r1, r1
 80029a0:	44e2      	add	sl, ip
 80029a2:	44d0      	add	r8, sl
 80029a4:	4249      	negs	r1, r1
 80029a6:	4252      	negs	r2, r2
 80029a8:	430a      	orrs	r2, r1
 80029aa:	45a0      	cmp	r8, r4
 80029ac:	41a4      	sbcs	r4, r4
 80029ae:	4582      	cmp	sl, r0
 80029b0:	4189      	sbcs	r1, r1
 80029b2:	4264      	negs	r4, r4
 80029b4:	4249      	negs	r1, r1
 80029b6:	430c      	orrs	r4, r1
 80029b8:	4641      	mov	r1, r8
 80029ba:	0c3f      	lsrs	r7, r7, #16
 80029bc:	19d2      	adds	r2, r2, r7
 80029be:	1912      	adds	r2, r2, r4
 80029c0:	0dcc      	lsrs	r4, r1, #23
 80029c2:	9904      	ldr	r1, [sp, #16]
 80029c4:	0270      	lsls	r0, r6, #9
 80029c6:	4308      	orrs	r0, r1
 80029c8:	1e41      	subs	r1, r0, #1
 80029ca:	4188      	sbcs	r0, r1
 80029cc:	4641      	mov	r1, r8
 80029ce:	444a      	add	r2, r9
 80029d0:	0df6      	lsrs	r6, r6, #23
 80029d2:	0252      	lsls	r2, r2, #9
 80029d4:	4330      	orrs	r0, r6
 80029d6:	0249      	lsls	r1, r1, #9
 80029d8:	4314      	orrs	r4, r2
 80029da:	4308      	orrs	r0, r1
 80029dc:	01d2      	lsls	r2, r2, #7
 80029de:	d535      	bpl.n	8002a4c <__aeabi_dmul+0x514>
 80029e0:	2201      	movs	r2, #1
 80029e2:	0843      	lsrs	r3, r0, #1
 80029e4:	4002      	ands	r2, r0
 80029e6:	4313      	orrs	r3, r2
 80029e8:	07e0      	lsls	r0, r4, #31
 80029ea:	4318      	orrs	r0, r3
 80029ec:	0864      	lsrs	r4, r4, #1
 80029ee:	e634      	b.n	800265a <__aeabi_dmul+0x122>
 80029f0:	9b00      	ldr	r3, [sp, #0]
 80029f2:	46a2      	mov	sl, r4
 80029f4:	469b      	mov	fp, r3
 80029f6:	4681      	mov	r9, r0
 80029f8:	2480      	movs	r4, #128	@ 0x80
 80029fa:	4653      	mov	r3, sl
 80029fc:	0324      	lsls	r4, r4, #12
 80029fe:	431c      	orrs	r4, r3
 8002a00:	0324      	lsls	r4, r4, #12
 8002a02:	464a      	mov	r2, r9
 8002a04:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002a06:	0b24      	lsrs	r4, r4, #12
 8002a08:	e5ec      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a0a:	f000 fd75 	bl	80034f8 <__clzsi2>
 8002a0e:	2315      	movs	r3, #21
 8002a10:	469c      	mov	ip, r3
 8002a12:	4484      	add	ip, r0
 8002a14:	0002      	movs	r2, r0
 8002a16:	4663      	mov	r3, ip
 8002a18:	3220      	adds	r2, #32
 8002a1a:	2b1c      	cmp	r3, #28
 8002a1c:	dc00      	bgt.n	8002a20 <__aeabi_dmul+0x4e8>
 8002a1e:	e684      	b.n	800272a <__aeabi_dmul+0x1f2>
 8002a20:	2300      	movs	r3, #0
 8002a22:	4699      	mov	r9, r3
 8002a24:	0023      	movs	r3, r4
 8002a26:	3808      	subs	r0, #8
 8002a28:	4083      	lsls	r3, r0
 8002a2a:	469a      	mov	sl, r3
 8002a2c:	e68e      	b.n	800274c <__aeabi_dmul+0x214>
 8002a2e:	f000 fd63 	bl	80034f8 <__clzsi2>
 8002a32:	0002      	movs	r2, r0
 8002a34:	0003      	movs	r3, r0
 8002a36:	3215      	adds	r2, #21
 8002a38:	3320      	adds	r3, #32
 8002a3a:	2a1c      	cmp	r2, #28
 8002a3c:	dc00      	bgt.n	8002a40 <__aeabi_dmul+0x508>
 8002a3e:	e64e      	b.n	80026de <__aeabi_dmul+0x1a6>
 8002a40:	0002      	movs	r2, r0
 8002a42:	0034      	movs	r4, r6
 8002a44:	3a08      	subs	r2, #8
 8002a46:	2000      	movs	r0, #0
 8002a48:	4094      	lsls	r4, r2
 8002a4a:	e652      	b.n	80026f2 <__aeabi_dmul+0x1ba>
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	e604      	b.n	800265a <__aeabi_dmul+0x122>
 8002a50:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac4 <__aeabi_dmul+0x58c>)
 8002a52:	0021      	movs	r1, r4
 8002a54:	469c      	mov	ip, r3
 8002a56:	0003      	movs	r3, r0
 8002a58:	9d01      	ldr	r5, [sp, #4]
 8002a5a:	40d3      	lsrs	r3, r2
 8002a5c:	4465      	add	r5, ip
 8002a5e:	40a9      	lsls	r1, r5
 8002a60:	4319      	orrs	r1, r3
 8002a62:	0003      	movs	r3, r0
 8002a64:	40ab      	lsls	r3, r5
 8002a66:	1e58      	subs	r0, r3, #1
 8002a68:	4183      	sbcs	r3, r0
 8002a6a:	4319      	orrs	r1, r3
 8002a6c:	0008      	movs	r0, r1
 8002a6e:	40d4      	lsrs	r4, r2
 8002a70:	074b      	lsls	r3, r1, #29
 8002a72:	d009      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a74:	230f      	movs	r3, #15
 8002a76:	400b      	ands	r3, r1
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d005      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a7c:	1d0b      	adds	r3, r1, #4
 8002a7e:	428b      	cmp	r3, r1
 8002a80:	4180      	sbcs	r0, r0
 8002a82:	4240      	negs	r0, r0
 8002a84:	1824      	adds	r4, r4, r0
 8002a86:	0018      	movs	r0, r3
 8002a88:	0223      	lsls	r3, r4, #8
 8002a8a:	d400      	bmi.n	8002a8e <__aeabi_dmul+0x556>
 8002a8c:	e6d6      	b.n	800283c <__aeabi_dmul+0x304>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	2400      	movs	r4, #0
 8002a92:	2200      	movs	r2, #0
 8002a94:	e5a6      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a96:	290f      	cmp	r1, #15
 8002a98:	d1aa      	bne.n	80029f0 <__aeabi_dmul+0x4b8>
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	4652      	mov	r2, sl
 8002a9e:	031b      	lsls	r3, r3, #12
 8002aa0:	421a      	tst	r2, r3
 8002aa2:	d0a9      	beq.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa4:	421c      	tst	r4, r3
 8002aa6:	d1a7      	bne.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa8:	431c      	orrs	r4, r3
 8002aaa:	9b00      	ldr	r3, [sp, #0]
 8002aac:	0002      	movs	r2, r0
 8002aae:	469b      	mov	fp, r3
 8002ab0:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002ab2:	e597      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ab4:	2400      	movs	r4, #0
 8002ab6:	e6c1      	b.n	800283c <__aeabi_dmul+0x304>
 8002ab8:	2400      	movs	r4, #0
 8002aba:	4b01      	ldr	r3, [pc, #4]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002abc:	0022      	movs	r2, r4
 8002abe:	e591      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ac0:	000007ff 	.word	0x000007ff
 8002ac4:	0000041e 	.word	0x0000041e

08002ac8 <__aeabi_dsub>:
 8002ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aca:	464e      	mov	r6, r9
 8002acc:	4645      	mov	r5, r8
 8002ace:	46de      	mov	lr, fp
 8002ad0:	4657      	mov	r7, sl
 8002ad2:	b5e0      	push	{r5, r6, r7, lr}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	9000      	str	r0, [sp, #0]
 8002ad8:	9101      	str	r1, [sp, #4]
 8002ada:	030c      	lsls	r4, r1, #12
 8002adc:	004f      	lsls	r7, r1, #1
 8002ade:	0fce      	lsrs	r6, r1, #31
 8002ae0:	0a61      	lsrs	r1, r4, #9
 8002ae2:	9c00      	ldr	r4, [sp, #0]
 8002ae4:	46b0      	mov	r8, r6
 8002ae6:	0f64      	lsrs	r4, r4, #29
 8002ae8:	430c      	orrs	r4, r1
 8002aea:	9900      	ldr	r1, [sp, #0]
 8002aec:	0d7f      	lsrs	r7, r7, #21
 8002aee:	00c8      	lsls	r0, r1, #3
 8002af0:	0011      	movs	r1, r2
 8002af2:	001a      	movs	r2, r3
 8002af4:	031b      	lsls	r3, r3, #12
 8002af6:	469c      	mov	ip, r3
 8002af8:	9100      	str	r1, [sp, #0]
 8002afa:	9201      	str	r2, [sp, #4]
 8002afc:	0051      	lsls	r1, r2, #1
 8002afe:	0d4b      	lsrs	r3, r1, #21
 8002b00:	4699      	mov	r9, r3
 8002b02:	9b01      	ldr	r3, [sp, #4]
 8002b04:	9d00      	ldr	r5, [sp, #0]
 8002b06:	0fd9      	lsrs	r1, r3, #31
 8002b08:	4663      	mov	r3, ip
 8002b0a:	0f6a      	lsrs	r2, r5, #29
 8002b0c:	0a5b      	lsrs	r3, r3, #9
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	00ea      	lsls	r2, r5, #3
 8002b12:	4694      	mov	ip, r2
 8002b14:	4693      	mov	fp, r2
 8002b16:	4ac1      	ldr	r2, [pc, #772]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002b18:	9003      	str	r0, [sp, #12]
 8002b1a:	9302      	str	r3, [sp, #8]
 8002b1c:	4591      	cmp	r9, r2
 8002b1e:	d100      	bne.n	8002b22 <__aeabi_dsub+0x5a>
 8002b20:	e0cd      	b.n	8002cbe <__aeabi_dsub+0x1f6>
 8002b22:	2501      	movs	r5, #1
 8002b24:	4069      	eors	r1, r5
 8002b26:	464d      	mov	r5, r9
 8002b28:	1b7d      	subs	r5, r7, r5
 8002b2a:	46aa      	mov	sl, r5
 8002b2c:	428e      	cmp	r6, r1
 8002b2e:	d100      	bne.n	8002b32 <__aeabi_dsub+0x6a>
 8002b30:	e080      	b.n	8002c34 <__aeabi_dsub+0x16c>
 8002b32:	2d00      	cmp	r5, #0
 8002b34:	dc00      	bgt.n	8002b38 <__aeabi_dsub+0x70>
 8002b36:	e335      	b.n	80031a4 <__aeabi_dsub+0x6dc>
 8002b38:	4649      	mov	r1, r9
 8002b3a:	2900      	cmp	r1, #0
 8002b3c:	d100      	bne.n	8002b40 <__aeabi_dsub+0x78>
 8002b3e:	e0df      	b.n	8002d00 <__aeabi_dsub+0x238>
 8002b40:	4297      	cmp	r7, r2
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x7e>
 8002b44:	e194      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002b46:	4652      	mov	r2, sl
 8002b48:	2501      	movs	r5, #1
 8002b4a:	2a38      	cmp	r2, #56	@ 0x38
 8002b4c:	dc19      	bgt.n	8002b82 <__aeabi_dsub+0xba>
 8002b4e:	2280      	movs	r2, #128	@ 0x80
 8002b50:	9b02      	ldr	r3, [sp, #8]
 8002b52:	0412      	lsls	r2, r2, #16
 8002b54:	4313      	orrs	r3, r2
 8002b56:	9302      	str	r3, [sp, #8]
 8002b58:	4652      	mov	r2, sl
 8002b5a:	2a1f      	cmp	r2, #31
 8002b5c:	dd00      	ble.n	8002b60 <__aeabi_dsub+0x98>
 8002b5e:	e1e3      	b.n	8002f28 <__aeabi_dsub+0x460>
 8002b60:	4653      	mov	r3, sl
 8002b62:	2220      	movs	r2, #32
 8002b64:	4661      	mov	r1, ip
 8002b66:	9d02      	ldr	r5, [sp, #8]
 8002b68:	1ad2      	subs	r2, r2, r3
 8002b6a:	4095      	lsls	r5, r2
 8002b6c:	40d9      	lsrs	r1, r3
 8002b6e:	430d      	orrs	r5, r1
 8002b70:	4661      	mov	r1, ip
 8002b72:	4091      	lsls	r1, r2
 8002b74:	000a      	movs	r2, r1
 8002b76:	1e51      	subs	r1, r2, #1
 8002b78:	418a      	sbcs	r2, r1
 8002b7a:	4315      	orrs	r5, r2
 8002b7c:	9a02      	ldr	r2, [sp, #8]
 8002b7e:	40da      	lsrs	r2, r3
 8002b80:	1aa4      	subs	r4, r4, r2
 8002b82:	1b45      	subs	r5, r0, r5
 8002b84:	42a8      	cmp	r0, r5
 8002b86:	4180      	sbcs	r0, r0
 8002b88:	4240      	negs	r0, r0
 8002b8a:	1a24      	subs	r4, r4, r0
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dsub+0xca>
 8002b90:	e13d      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002b92:	0264      	lsls	r4, r4, #9
 8002b94:	0a64      	lsrs	r4, r4, #9
 8002b96:	2c00      	cmp	r4, #0
 8002b98:	d100      	bne.n	8002b9c <__aeabi_dsub+0xd4>
 8002b9a:	e147      	b.n	8002e2c <__aeabi_dsub+0x364>
 8002b9c:	0020      	movs	r0, r4
 8002b9e:	f000 fcab 	bl	80034f8 <__clzsi2>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	3b08      	subs	r3, #8
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	0028      	movs	r0, r5
 8002baa:	1aca      	subs	r2, r1, r3
 8002bac:	40d0      	lsrs	r0, r2
 8002bae:	409c      	lsls	r4, r3
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	409d      	lsls	r5, r3
 8002bb4:	4322      	orrs	r2, r4
 8002bb6:	429f      	cmp	r7, r3
 8002bb8:	dd00      	ble.n	8002bbc <__aeabi_dsub+0xf4>
 8002bba:	e177      	b.n	8002eac <__aeabi_dsub+0x3e4>
 8002bbc:	1bd8      	subs	r0, r3, r7
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	1a09      	subs	r1, r1, r0
 8002bc2:	002c      	movs	r4, r5
 8002bc4:	408d      	lsls	r5, r1
 8002bc6:	40c4      	lsrs	r4, r0
 8002bc8:	1e6b      	subs	r3, r5, #1
 8002bca:	419d      	sbcs	r5, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	40c2      	lsrs	r2, r0
 8002bd0:	408b      	lsls	r3, r1
 8002bd2:	4325      	orrs	r5, r4
 8002bd4:	2700      	movs	r7, #0
 8002bd6:	0014      	movs	r4, r2
 8002bd8:	431d      	orrs	r5, r3
 8002bda:	076b      	lsls	r3, r5, #29
 8002bdc:	d009      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002bde:	230f      	movs	r3, #15
 8002be0:	402b      	ands	r3, r5
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d005      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002be6:	1d2b      	adds	r3, r5, #4
 8002be8:	42ab      	cmp	r3, r5
 8002bea:	41ad      	sbcs	r5, r5
 8002bec:	426d      	negs	r5, r5
 8002bee:	1964      	adds	r4, r4, r5
 8002bf0:	001d      	movs	r5, r3
 8002bf2:	0223      	lsls	r3, r4, #8
 8002bf4:	d400      	bmi.n	8002bf8 <__aeabi_dsub+0x130>
 8002bf6:	e140      	b.n	8002e7a <__aeabi_dsub+0x3b2>
 8002bf8:	4a88      	ldr	r2, [pc, #544]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002bfa:	3701      	adds	r7, #1
 8002bfc:	4297      	cmp	r7, r2
 8002bfe:	d100      	bne.n	8002c02 <__aeabi_dsub+0x13a>
 8002c00:	e101      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002c02:	2601      	movs	r6, #1
 8002c04:	4643      	mov	r3, r8
 8002c06:	4986      	ldr	r1, [pc, #536]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002c08:	08ed      	lsrs	r5, r5, #3
 8002c0a:	4021      	ands	r1, r4
 8002c0c:	074a      	lsls	r2, r1, #29
 8002c0e:	432a      	orrs	r2, r5
 8002c10:	057c      	lsls	r4, r7, #21
 8002c12:	024d      	lsls	r5, r1, #9
 8002c14:	0b2d      	lsrs	r5, r5, #12
 8002c16:	0d64      	lsrs	r4, r4, #21
 8002c18:	401e      	ands	r6, r3
 8002c1a:	0524      	lsls	r4, r4, #20
 8002c1c:	432c      	orrs	r4, r5
 8002c1e:	07f6      	lsls	r6, r6, #31
 8002c20:	4334      	orrs	r4, r6
 8002c22:	0010      	movs	r0, r2
 8002c24:	0021      	movs	r1, r4
 8002c26:	b005      	add	sp, #20
 8002c28:	bcf0      	pop	{r4, r5, r6, r7}
 8002c2a:	46bb      	mov	fp, r7
 8002c2c:	46b2      	mov	sl, r6
 8002c2e:	46a9      	mov	r9, r5
 8002c30:	46a0      	mov	r8, r4
 8002c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c34:	2d00      	cmp	r5, #0
 8002c36:	dc00      	bgt.n	8002c3a <__aeabi_dsub+0x172>
 8002c38:	e2d0      	b.n	80031dc <__aeabi_dsub+0x714>
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	2900      	cmp	r1, #0
 8002c3e:	d000      	beq.n	8002c42 <__aeabi_dsub+0x17a>
 8002c40:	e0d4      	b.n	8002dec <__aeabi_dsub+0x324>
 8002c42:	4661      	mov	r1, ip
 8002c44:	9b02      	ldr	r3, [sp, #8]
 8002c46:	4319      	orrs	r1, r3
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x184>
 8002c4a:	e12b      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002c4c:	1e69      	subs	r1, r5, #1
 8002c4e:	2d01      	cmp	r5, #1
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x18c>
 8002c52:	e1d9      	b.n	8003008 <__aeabi_dsub+0x540>
 8002c54:	4295      	cmp	r5, r2
 8002c56:	d100      	bne.n	8002c5a <__aeabi_dsub+0x192>
 8002c58:	e10a      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002c5a:	2501      	movs	r5, #1
 8002c5c:	2938      	cmp	r1, #56	@ 0x38
 8002c5e:	dc17      	bgt.n	8002c90 <__aeabi_dsub+0x1c8>
 8002c60:	468a      	mov	sl, r1
 8002c62:	4653      	mov	r3, sl
 8002c64:	2b1f      	cmp	r3, #31
 8002c66:	dd00      	ble.n	8002c6a <__aeabi_dsub+0x1a2>
 8002c68:	e1e7      	b.n	800303a <__aeabi_dsub+0x572>
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	9b02      	ldr	r3, [sp, #8]
 8002c70:	4661      	mov	r1, ip
 8002c72:	4093      	lsls	r3, r2
 8002c74:	001d      	movs	r5, r3
 8002c76:	4653      	mov	r3, sl
 8002c78:	40d9      	lsrs	r1, r3
 8002c7a:	4663      	mov	r3, ip
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	001a      	movs	r2, r3
 8002c80:	430d      	orrs	r5, r1
 8002c82:	1e51      	subs	r1, r2, #1
 8002c84:	418a      	sbcs	r2, r1
 8002c86:	4653      	mov	r3, sl
 8002c88:	4315      	orrs	r5, r2
 8002c8a:	9a02      	ldr	r2, [sp, #8]
 8002c8c:	40da      	lsrs	r2, r3
 8002c8e:	18a4      	adds	r4, r4, r2
 8002c90:	182d      	adds	r5, r5, r0
 8002c92:	4285      	cmp	r5, r0
 8002c94:	4180      	sbcs	r0, r0
 8002c96:	4240      	negs	r0, r0
 8002c98:	1824      	adds	r4, r4, r0
 8002c9a:	0223      	lsls	r3, r4, #8
 8002c9c:	d400      	bmi.n	8002ca0 <__aeabi_dsub+0x1d8>
 8002c9e:	e0b6      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002ca2:	3701      	adds	r7, #1
 8002ca4:	429f      	cmp	r7, r3
 8002ca6:	d100      	bne.n	8002caa <__aeabi_dsub+0x1e2>
 8002ca8:	e0ad      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002caa:	2101      	movs	r1, #1
 8002cac:	4b5c      	ldr	r3, [pc, #368]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002cae:	086a      	lsrs	r2, r5, #1
 8002cb0:	401c      	ands	r4, r3
 8002cb2:	4029      	ands	r1, r5
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	07e5      	lsls	r5, r4, #31
 8002cb8:	4315      	orrs	r5, r2
 8002cba:	0864      	lsrs	r4, r4, #1
 8002cbc:	e78d      	b.n	8002bda <__aeabi_dsub+0x112>
 8002cbe:	4a59      	ldr	r2, [pc, #356]	@ (8002e24 <__aeabi_dsub+0x35c>)
 8002cc0:	9b02      	ldr	r3, [sp, #8]
 8002cc2:	4692      	mov	sl, r2
 8002cc4:	4662      	mov	r2, ip
 8002cc6:	44ba      	add	sl, r7
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	d02c      	beq.n	8002d26 <__aeabi_dsub+0x25e>
 8002ccc:	428e      	cmp	r6, r1
 8002cce:	d02e      	beq.n	8002d2e <__aeabi_dsub+0x266>
 8002cd0:	4652      	mov	r2, sl
 8002cd2:	2a00      	cmp	r2, #0
 8002cd4:	d060      	beq.n	8002d98 <__aeabi_dsub+0x2d0>
 8002cd6:	2f00      	cmp	r7, #0
 8002cd8:	d100      	bne.n	8002cdc <__aeabi_dsub+0x214>
 8002cda:	e0db      	b.n	8002e94 <__aeabi_dsub+0x3cc>
 8002cdc:	4663      	mov	r3, ip
 8002cde:	000e      	movs	r6, r1
 8002ce0:	9c02      	ldr	r4, [sp, #8]
 8002ce2:	08d8      	lsrs	r0, r3, #3
 8002ce4:	0762      	lsls	r2, r4, #29
 8002ce6:	4302      	orrs	r2, r0
 8002ce8:	08e4      	lsrs	r4, r4, #3
 8002cea:	0013      	movs	r3, r2
 8002cec:	4323      	orrs	r3, r4
 8002cee:	d100      	bne.n	8002cf2 <__aeabi_dsub+0x22a>
 8002cf0:	e254      	b.n	800319c <__aeabi_dsub+0x6d4>
 8002cf2:	2580      	movs	r5, #128	@ 0x80
 8002cf4:	032d      	lsls	r5, r5, #12
 8002cf6:	4325      	orrs	r5, r4
 8002cf8:	032d      	lsls	r5, r5, #12
 8002cfa:	4c48      	ldr	r4, [pc, #288]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002cfc:	0b2d      	lsrs	r5, r5, #12
 8002cfe:	e78c      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002d00:	4661      	mov	r1, ip
 8002d02:	9b02      	ldr	r3, [sp, #8]
 8002d04:	4319      	orrs	r1, r3
 8002d06:	d100      	bne.n	8002d0a <__aeabi_dsub+0x242>
 8002d08:	e0cc      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002d0a:	0029      	movs	r1, r5
 8002d0c:	3901      	subs	r1, #1
 8002d0e:	2d01      	cmp	r5, #1
 8002d10:	d100      	bne.n	8002d14 <__aeabi_dsub+0x24c>
 8002d12:	e188      	b.n	8003026 <__aeabi_dsub+0x55e>
 8002d14:	4295      	cmp	r5, r2
 8002d16:	d100      	bne.n	8002d1a <__aeabi_dsub+0x252>
 8002d18:	e0aa      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002d1a:	2501      	movs	r5, #1
 8002d1c:	2938      	cmp	r1, #56	@ 0x38
 8002d1e:	dd00      	ble.n	8002d22 <__aeabi_dsub+0x25a>
 8002d20:	e72f      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002d22:	468a      	mov	sl, r1
 8002d24:	e718      	b.n	8002b58 <__aeabi_dsub+0x90>
 8002d26:	2201      	movs	r2, #1
 8002d28:	4051      	eors	r1, r2
 8002d2a:	428e      	cmp	r6, r1
 8002d2c:	d1d0      	bne.n	8002cd0 <__aeabi_dsub+0x208>
 8002d2e:	4653      	mov	r3, sl
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x26e>
 8002d34:	e0be      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 8002d36:	2f00      	cmp	r7, #0
 8002d38:	d000      	beq.n	8002d3c <__aeabi_dsub+0x274>
 8002d3a:	e138      	b.n	8002fae <__aeabi_dsub+0x4e6>
 8002d3c:	46ca      	mov	sl, r9
 8002d3e:	0022      	movs	r2, r4
 8002d40:	4302      	orrs	r2, r0
 8002d42:	d100      	bne.n	8002d46 <__aeabi_dsub+0x27e>
 8002d44:	e1e2      	b.n	800310c <__aeabi_dsub+0x644>
 8002d46:	4653      	mov	r3, sl
 8002d48:	1e59      	subs	r1, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x288>
 8002d4e:	e20d      	b.n	800316c <__aeabi_dsub+0x6a4>
 8002d50:	4a32      	ldr	r2, [pc, #200]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002d52:	4592      	cmp	sl, r2
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x290>
 8002d56:	e1d2      	b.n	80030fe <__aeabi_dsub+0x636>
 8002d58:	2701      	movs	r7, #1
 8002d5a:	2938      	cmp	r1, #56	@ 0x38
 8002d5c:	dc13      	bgt.n	8002d86 <__aeabi_dsub+0x2be>
 8002d5e:	291f      	cmp	r1, #31
 8002d60:	dd00      	ble.n	8002d64 <__aeabi_dsub+0x29c>
 8002d62:	e1ee      	b.n	8003142 <__aeabi_dsub+0x67a>
 8002d64:	2220      	movs	r2, #32
 8002d66:	9b02      	ldr	r3, [sp, #8]
 8002d68:	1a52      	subs	r2, r2, r1
 8002d6a:	0025      	movs	r5, r4
 8002d6c:	0007      	movs	r7, r0
 8002d6e:	469a      	mov	sl, r3
 8002d70:	40cc      	lsrs	r4, r1
 8002d72:	4090      	lsls	r0, r2
 8002d74:	4095      	lsls	r5, r2
 8002d76:	40cf      	lsrs	r7, r1
 8002d78:	44a2      	add	sl, r4
 8002d7a:	1e42      	subs	r2, r0, #1
 8002d7c:	4190      	sbcs	r0, r2
 8002d7e:	4653      	mov	r3, sl
 8002d80:	432f      	orrs	r7, r5
 8002d82:	4307      	orrs	r7, r0
 8002d84:	9302      	str	r3, [sp, #8]
 8002d86:	003d      	movs	r5, r7
 8002d88:	4465      	add	r5, ip
 8002d8a:	4565      	cmp	r5, ip
 8002d8c:	4192      	sbcs	r2, r2
 8002d8e:	9b02      	ldr	r3, [sp, #8]
 8002d90:	4252      	negs	r2, r2
 8002d92:	464f      	mov	r7, r9
 8002d94:	18d4      	adds	r4, r2, r3
 8002d96:	e780      	b.n	8002c9a <__aeabi_dsub+0x1d2>
 8002d98:	4a23      	ldr	r2, [pc, #140]	@ (8002e28 <__aeabi_dsub+0x360>)
 8002d9a:	1c7d      	adds	r5, r7, #1
 8002d9c:	4215      	tst	r5, r2
 8002d9e:	d000      	beq.n	8002da2 <__aeabi_dsub+0x2da>
 8002da0:	e0aa      	b.n	8002ef8 <__aeabi_dsub+0x430>
 8002da2:	4662      	mov	r2, ip
 8002da4:	0025      	movs	r5, r4
 8002da6:	9b02      	ldr	r3, [sp, #8]
 8002da8:	4305      	orrs	r5, r0
 8002daa:	431a      	orrs	r2, r3
 8002dac:	2f00      	cmp	r7, #0
 8002dae:	d000      	beq.n	8002db2 <__aeabi_dsub+0x2ea>
 8002db0:	e0f5      	b.n	8002f9e <__aeabi_dsub+0x4d6>
 8002db2:	2d00      	cmp	r5, #0
 8002db4:	d100      	bne.n	8002db8 <__aeabi_dsub+0x2f0>
 8002db6:	e16b      	b.n	8003090 <__aeabi_dsub+0x5c8>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d100      	bne.n	8002dbe <__aeabi_dsub+0x2f6>
 8002dbc:	e152      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002dbe:	4663      	mov	r3, ip
 8002dc0:	1ac5      	subs	r5, r0, r3
 8002dc2:	9b02      	ldr	r3, [sp, #8]
 8002dc4:	1ae2      	subs	r2, r4, r3
 8002dc6:	42a8      	cmp	r0, r5
 8002dc8:	419b      	sbcs	r3, r3
 8002dca:	425b      	negs	r3, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	d400      	bmi.n	8002dd4 <__aeabi_dsub+0x30c>
 8002dd2:	e1d5      	b.n	8003180 <__aeabi_dsub+0x6b8>
 8002dd4:	4663      	mov	r3, ip
 8002dd6:	1a1d      	subs	r5, r3, r0
 8002dd8:	45ac      	cmp	ip, r5
 8002dda:	4192      	sbcs	r2, r2
 8002ddc:	2601      	movs	r6, #1
 8002dde:	9b02      	ldr	r3, [sp, #8]
 8002de0:	4252      	negs	r2, r2
 8002de2:	1b1c      	subs	r4, r3, r4
 8002de4:	4688      	mov	r8, r1
 8002de6:	1aa4      	subs	r4, r4, r2
 8002de8:	400e      	ands	r6, r1
 8002dea:	e6f6      	b.n	8002bda <__aeabi_dsub+0x112>
 8002dec:	4297      	cmp	r7, r2
 8002dee:	d03f      	beq.n	8002e70 <__aeabi_dsub+0x3a8>
 8002df0:	4652      	mov	r2, sl
 8002df2:	2501      	movs	r5, #1
 8002df4:	2a38      	cmp	r2, #56	@ 0x38
 8002df6:	dd00      	ble.n	8002dfa <__aeabi_dsub+0x332>
 8002df8:	e74a      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8002dfa:	2280      	movs	r2, #128	@ 0x80
 8002dfc:	9b02      	ldr	r3, [sp, #8]
 8002dfe:	0412      	lsls	r2, r2, #16
 8002e00:	4313      	orrs	r3, r2
 8002e02:	9302      	str	r3, [sp, #8]
 8002e04:	e72d      	b.n	8002c62 <__aeabi_dsub+0x19a>
 8002e06:	003c      	movs	r4, r7
 8002e08:	2500      	movs	r5, #0
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	e705      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e0e:	2307      	movs	r3, #7
 8002e10:	402b      	ands	r3, r5
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d000      	beq.n	8002e18 <__aeabi_dsub+0x350>
 8002e16:	e6e2      	b.n	8002bde <__aeabi_dsub+0x116>
 8002e18:	e06b      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	000007ff 	.word	0x000007ff
 8002e20:	ff7fffff 	.word	0xff7fffff
 8002e24:	fffff801 	.word	0xfffff801
 8002e28:	000007fe 	.word	0x000007fe
 8002e2c:	0028      	movs	r0, r5
 8002e2e:	f000 fb63 	bl	80034f8 <__clzsi2>
 8002e32:	0003      	movs	r3, r0
 8002e34:	3318      	adds	r3, #24
 8002e36:	2b1f      	cmp	r3, #31
 8002e38:	dc00      	bgt.n	8002e3c <__aeabi_dsub+0x374>
 8002e3a:	e6b4      	b.n	8002ba6 <__aeabi_dsub+0xde>
 8002e3c:	002a      	movs	r2, r5
 8002e3e:	3808      	subs	r0, #8
 8002e40:	4082      	lsls	r2, r0
 8002e42:	429f      	cmp	r7, r3
 8002e44:	dd00      	ble.n	8002e48 <__aeabi_dsub+0x380>
 8002e46:	e0b9      	b.n	8002fbc <__aeabi_dsub+0x4f4>
 8002e48:	1bdb      	subs	r3, r3, r7
 8002e4a:	1c58      	adds	r0, r3, #1
 8002e4c:	281f      	cmp	r0, #31
 8002e4e:	dc00      	bgt.n	8002e52 <__aeabi_dsub+0x38a>
 8002e50:	e1a0      	b.n	8003194 <__aeabi_dsub+0x6cc>
 8002e52:	0015      	movs	r5, r2
 8002e54:	3b1f      	subs	r3, #31
 8002e56:	40dd      	lsrs	r5, r3
 8002e58:	2820      	cmp	r0, #32
 8002e5a:	d005      	beq.n	8002e68 <__aeabi_dsub+0x3a0>
 8002e5c:	2340      	movs	r3, #64	@ 0x40
 8002e5e:	1a1b      	subs	r3, r3, r0
 8002e60:	409a      	lsls	r2, r3
 8002e62:	1e53      	subs	r3, r2, #1
 8002e64:	419a      	sbcs	r2, r3
 8002e66:	4315      	orrs	r5, r2
 8002e68:	2307      	movs	r3, #7
 8002e6a:	2700      	movs	r7, #0
 8002e6c:	402b      	ands	r3, r5
 8002e6e:	e7d0      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002e70:	08c0      	lsrs	r0, r0, #3
 8002e72:	0762      	lsls	r2, r4, #29
 8002e74:	4302      	orrs	r2, r0
 8002e76:	08e4      	lsrs	r4, r4, #3
 8002e78:	e737      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e7a:	08ea      	lsrs	r2, r5, #3
 8002e7c:	0763      	lsls	r3, r4, #29
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	4bd3      	ldr	r3, [pc, #844]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002e82:	08e4      	lsrs	r4, r4, #3
 8002e84:	429f      	cmp	r7, r3
 8002e86:	d100      	bne.n	8002e8a <__aeabi_dsub+0x3c2>
 8002e88:	e72f      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e8a:	0324      	lsls	r4, r4, #12
 8002e8c:	0b25      	lsrs	r5, r4, #12
 8002e8e:	057c      	lsls	r4, r7, #21
 8002e90:	0d64      	lsrs	r4, r4, #21
 8002e92:	e6c2      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e94:	46ca      	mov	sl, r9
 8002e96:	0022      	movs	r2, r4
 8002e98:	4302      	orrs	r2, r0
 8002e9a:	d158      	bne.n	8002f4e <__aeabi_dsub+0x486>
 8002e9c:	4663      	mov	r3, ip
 8002e9e:	000e      	movs	r6, r1
 8002ea0:	9c02      	ldr	r4, [sp, #8]
 8002ea2:	9303      	str	r3, [sp, #12]
 8002ea4:	9b03      	ldr	r3, [sp, #12]
 8002ea6:	4657      	mov	r7, sl
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	e7e7      	b.n	8002e7c <__aeabi_dsub+0x3b4>
 8002eac:	4cc9      	ldr	r4, [pc, #804]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eae:	1aff      	subs	r7, r7, r3
 8002eb0:	4014      	ands	r4, r2
 8002eb2:	e692      	b.n	8002bda <__aeabi_dsub+0x112>
 8002eb4:	4dc8      	ldr	r5, [pc, #800]	@ (80031d8 <__aeabi_dsub+0x710>)
 8002eb6:	1c7a      	adds	r2, r7, #1
 8002eb8:	422a      	tst	r2, r5
 8002eba:	d000      	beq.n	8002ebe <__aeabi_dsub+0x3f6>
 8002ebc:	e084      	b.n	8002fc8 <__aeabi_dsub+0x500>
 8002ebe:	0022      	movs	r2, r4
 8002ec0:	4302      	orrs	r2, r0
 8002ec2:	2f00      	cmp	r7, #0
 8002ec4:	d000      	beq.n	8002ec8 <__aeabi_dsub+0x400>
 8002ec6:	e0ef      	b.n	80030a8 <__aeabi_dsub+0x5e0>
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	d100      	bne.n	8002ece <__aeabi_dsub+0x406>
 8002ecc:	e0e5      	b.n	800309a <__aeabi_dsub+0x5d2>
 8002ece:	4662      	mov	r2, ip
 8002ed0:	9902      	ldr	r1, [sp, #8]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x410>
 8002ed6:	e0c5      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	18c5      	adds	r5, r0, r3
 8002edc:	468c      	mov	ip, r1
 8002ede:	4285      	cmp	r5, r0
 8002ee0:	4180      	sbcs	r0, r0
 8002ee2:	4464      	add	r4, ip
 8002ee4:	4240      	negs	r0, r0
 8002ee6:	1824      	adds	r4, r4, r0
 8002ee8:	0223      	lsls	r3, r4, #8
 8002eea:	d502      	bpl.n	8002ef2 <__aeabi_dsub+0x42a>
 8002eec:	4bb9      	ldr	r3, [pc, #740]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eee:	3701      	adds	r7, #1
 8002ef0:	401c      	ands	r4, r3
 8002ef2:	46ba      	mov	sl, r7
 8002ef4:	9503      	str	r5, [sp, #12]
 8002ef6:	e7d5      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002ef8:	4662      	mov	r2, ip
 8002efa:	1a85      	subs	r5, r0, r2
 8002efc:	42a8      	cmp	r0, r5
 8002efe:	4192      	sbcs	r2, r2
 8002f00:	4252      	negs	r2, r2
 8002f02:	4691      	mov	r9, r2
 8002f04:	9b02      	ldr	r3, [sp, #8]
 8002f06:	1ae3      	subs	r3, r4, r3
 8002f08:	001a      	movs	r2, r3
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	1ad2      	subs	r2, r2, r3
 8002f0e:	0013      	movs	r3, r2
 8002f10:	4691      	mov	r9, r2
 8002f12:	021a      	lsls	r2, r3, #8
 8002f14:	d46c      	bmi.n	8002ff0 <__aeabi_dsub+0x528>
 8002f16:	464a      	mov	r2, r9
 8002f18:	464c      	mov	r4, r9
 8002f1a:	432a      	orrs	r2, r5
 8002f1c:	d000      	beq.n	8002f20 <__aeabi_dsub+0x458>
 8002f1e:	e63a      	b.n	8002b96 <__aeabi_dsub+0xce>
 8002f20:	2600      	movs	r6, #0
 8002f22:	2400      	movs	r4, #0
 8002f24:	2500      	movs	r5, #0
 8002f26:	e678      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002f28:	9902      	ldr	r1, [sp, #8]
 8002f2a:	4653      	mov	r3, sl
 8002f2c:	000d      	movs	r5, r1
 8002f2e:	3a20      	subs	r2, #32
 8002f30:	40d5      	lsrs	r5, r2
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d006      	beq.n	8002f44 <__aeabi_dsub+0x47c>
 8002f36:	2240      	movs	r2, #64	@ 0x40
 8002f38:	1ad2      	subs	r2, r2, r3
 8002f3a:	000b      	movs	r3, r1
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	4662      	mov	r2, ip
 8002f40:	431a      	orrs	r2, r3
 8002f42:	4693      	mov	fp, r2
 8002f44:	465b      	mov	r3, fp
 8002f46:	1e5a      	subs	r2, r3, #1
 8002f48:	4193      	sbcs	r3, r2
 8002f4a:	431d      	orrs	r5, r3
 8002f4c:	e619      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002f4e:	4653      	mov	r3, sl
 8002f50:	1e5a      	subs	r2, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d100      	bne.n	8002f58 <__aeabi_dsub+0x490>
 8002f56:	e0c6      	b.n	80030e6 <__aeabi_dsub+0x61e>
 8002f58:	4e9d      	ldr	r6, [pc, #628]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002f5a:	45b2      	cmp	sl, r6
 8002f5c:	d100      	bne.n	8002f60 <__aeabi_dsub+0x498>
 8002f5e:	e6bd      	b.n	8002cdc <__aeabi_dsub+0x214>
 8002f60:	4688      	mov	r8, r1
 8002f62:	000e      	movs	r6, r1
 8002f64:	2501      	movs	r5, #1
 8002f66:	2a38      	cmp	r2, #56	@ 0x38
 8002f68:	dc10      	bgt.n	8002f8c <__aeabi_dsub+0x4c4>
 8002f6a:	2a1f      	cmp	r2, #31
 8002f6c:	dc7f      	bgt.n	800306e <__aeabi_dsub+0x5a6>
 8002f6e:	2120      	movs	r1, #32
 8002f70:	0025      	movs	r5, r4
 8002f72:	1a89      	subs	r1, r1, r2
 8002f74:	0007      	movs	r7, r0
 8002f76:	4088      	lsls	r0, r1
 8002f78:	408d      	lsls	r5, r1
 8002f7a:	40d7      	lsrs	r7, r2
 8002f7c:	40d4      	lsrs	r4, r2
 8002f7e:	1e41      	subs	r1, r0, #1
 8002f80:	4188      	sbcs	r0, r1
 8002f82:	9b02      	ldr	r3, [sp, #8]
 8002f84:	433d      	orrs	r5, r7
 8002f86:	1b1b      	subs	r3, r3, r4
 8002f88:	4305      	orrs	r5, r0
 8002f8a:	9302      	str	r3, [sp, #8]
 8002f8c:	4662      	mov	r2, ip
 8002f8e:	1b55      	subs	r5, r2, r5
 8002f90:	45ac      	cmp	ip, r5
 8002f92:	4192      	sbcs	r2, r2
 8002f94:	9b02      	ldr	r3, [sp, #8]
 8002f96:	4252      	negs	r2, r2
 8002f98:	464f      	mov	r7, r9
 8002f9a:	1a9c      	subs	r4, r3, r2
 8002f9c:	e5f6      	b.n	8002b8c <__aeabi_dsub+0xc4>
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	d000      	beq.n	8002fa4 <__aeabi_dsub+0x4dc>
 8002fa2:	e0b7      	b.n	8003114 <__aeabi_dsub+0x64c>
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d100      	bne.n	8002faa <__aeabi_dsub+0x4e2>
 8002fa8:	e0f0      	b.n	800318c <__aeabi_dsub+0x6c4>
 8002faa:	2601      	movs	r6, #1
 8002fac:	400e      	ands	r6, r1
 8002fae:	4663      	mov	r3, ip
 8002fb0:	9802      	ldr	r0, [sp, #8]
 8002fb2:	08d9      	lsrs	r1, r3, #3
 8002fb4:	0742      	lsls	r2, r0, #29
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	08c4      	lsrs	r4, r0, #3
 8002fba:	e696      	b.n	8002cea <__aeabi_dsub+0x222>
 8002fbc:	4c85      	ldr	r4, [pc, #532]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002fbe:	1aff      	subs	r7, r7, r3
 8002fc0:	4014      	ands	r4, r2
 8002fc2:	0762      	lsls	r2, r4, #29
 8002fc4:	08e4      	lsrs	r4, r4, #3
 8002fc6:	e760      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 8002fc8:	4981      	ldr	r1, [pc, #516]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002fca:	428a      	cmp	r2, r1
 8002fcc:	d100      	bne.n	8002fd0 <__aeabi_dsub+0x508>
 8002fce:	e0c9      	b.n	8003164 <__aeabi_dsub+0x69c>
 8002fd0:	4663      	mov	r3, ip
 8002fd2:	18c1      	adds	r1, r0, r3
 8002fd4:	4281      	cmp	r1, r0
 8002fd6:	4180      	sbcs	r0, r0
 8002fd8:	9b02      	ldr	r3, [sp, #8]
 8002fda:	4240      	negs	r0, r0
 8002fdc:	18e3      	adds	r3, r4, r3
 8002fde:	181b      	adds	r3, r3, r0
 8002fe0:	07dd      	lsls	r5, r3, #31
 8002fe2:	085c      	lsrs	r4, r3, #1
 8002fe4:	2307      	movs	r3, #7
 8002fe6:	0849      	lsrs	r1, r1, #1
 8002fe8:	430d      	orrs	r5, r1
 8002fea:	0017      	movs	r7, r2
 8002fec:	402b      	ands	r3, r5
 8002fee:	e710      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002ff0:	4663      	mov	r3, ip
 8002ff2:	1a1d      	subs	r5, r3, r0
 8002ff4:	45ac      	cmp	ip, r5
 8002ff6:	4192      	sbcs	r2, r2
 8002ff8:	2601      	movs	r6, #1
 8002ffa:	9b02      	ldr	r3, [sp, #8]
 8002ffc:	4252      	negs	r2, r2
 8002ffe:	1b1c      	subs	r4, r3, r4
 8003000:	4688      	mov	r8, r1
 8003002:	1aa4      	subs	r4, r4, r2
 8003004:	400e      	ands	r6, r1
 8003006:	e5c6      	b.n	8002b96 <__aeabi_dsub+0xce>
 8003008:	4663      	mov	r3, ip
 800300a:	18c5      	adds	r5, r0, r3
 800300c:	9b02      	ldr	r3, [sp, #8]
 800300e:	4285      	cmp	r5, r0
 8003010:	4180      	sbcs	r0, r0
 8003012:	469c      	mov	ip, r3
 8003014:	4240      	negs	r0, r0
 8003016:	4464      	add	r4, ip
 8003018:	1824      	adds	r4, r4, r0
 800301a:	2701      	movs	r7, #1
 800301c:	0223      	lsls	r3, r4, #8
 800301e:	d400      	bmi.n	8003022 <__aeabi_dsub+0x55a>
 8003020:	e6f5      	b.n	8002e0e <__aeabi_dsub+0x346>
 8003022:	2702      	movs	r7, #2
 8003024:	e641      	b.n	8002caa <__aeabi_dsub+0x1e2>
 8003026:	4663      	mov	r3, ip
 8003028:	1ac5      	subs	r5, r0, r3
 800302a:	42a8      	cmp	r0, r5
 800302c:	4180      	sbcs	r0, r0
 800302e:	9b02      	ldr	r3, [sp, #8]
 8003030:	4240      	negs	r0, r0
 8003032:	1ae4      	subs	r4, r4, r3
 8003034:	2701      	movs	r7, #1
 8003036:	1a24      	subs	r4, r4, r0
 8003038:	e5a8      	b.n	8002b8c <__aeabi_dsub+0xc4>
 800303a:	9d02      	ldr	r5, [sp, #8]
 800303c:	4652      	mov	r2, sl
 800303e:	002b      	movs	r3, r5
 8003040:	3a20      	subs	r2, #32
 8003042:	40d3      	lsrs	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	4653      	mov	r3, sl
 8003048:	2b20      	cmp	r3, #32
 800304a:	d006      	beq.n	800305a <__aeabi_dsub+0x592>
 800304c:	2240      	movs	r2, #64	@ 0x40
 800304e:	1ad2      	subs	r2, r2, r3
 8003050:	002b      	movs	r3, r5
 8003052:	4093      	lsls	r3, r2
 8003054:	4662      	mov	r2, ip
 8003056:	431a      	orrs	r2, r3
 8003058:	4693      	mov	fp, r2
 800305a:	465d      	mov	r5, fp
 800305c:	1e6b      	subs	r3, r5, #1
 800305e:	419d      	sbcs	r5, r3
 8003060:	430d      	orrs	r5, r1
 8003062:	e615      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8003064:	0762      	lsls	r2, r4, #29
 8003066:	08c0      	lsrs	r0, r0, #3
 8003068:	4302      	orrs	r2, r0
 800306a:	08e4      	lsrs	r4, r4, #3
 800306c:	e70d      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 800306e:	0011      	movs	r1, r2
 8003070:	0027      	movs	r7, r4
 8003072:	3920      	subs	r1, #32
 8003074:	40cf      	lsrs	r7, r1
 8003076:	2a20      	cmp	r2, #32
 8003078:	d005      	beq.n	8003086 <__aeabi_dsub+0x5be>
 800307a:	2140      	movs	r1, #64	@ 0x40
 800307c:	1a8a      	subs	r2, r1, r2
 800307e:	4094      	lsls	r4, r2
 8003080:	0025      	movs	r5, r4
 8003082:	4305      	orrs	r5, r0
 8003084:	9503      	str	r5, [sp, #12]
 8003086:	9d03      	ldr	r5, [sp, #12]
 8003088:	1e6a      	subs	r2, r5, #1
 800308a:	4195      	sbcs	r5, r2
 800308c:	433d      	orrs	r5, r7
 800308e:	e77d      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 8003090:	2a00      	cmp	r2, #0
 8003092:	d100      	bne.n	8003096 <__aeabi_dsub+0x5ce>
 8003094:	e744      	b.n	8002f20 <__aeabi_dsub+0x458>
 8003096:	2601      	movs	r6, #1
 8003098:	400e      	ands	r6, r1
 800309a:	4663      	mov	r3, ip
 800309c:	08d9      	lsrs	r1, r3, #3
 800309e:	9b02      	ldr	r3, [sp, #8]
 80030a0:	075a      	lsls	r2, r3, #29
 80030a2:	430a      	orrs	r2, r1
 80030a4:	08dc      	lsrs	r4, r3, #3
 80030a6:	e6f0      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d028      	beq.n	80030fe <__aeabi_dsub+0x636>
 80030ac:	4662      	mov	r2, ip
 80030ae:	9f02      	ldr	r7, [sp, #8]
 80030b0:	08c0      	lsrs	r0, r0, #3
 80030b2:	433a      	orrs	r2, r7
 80030b4:	d100      	bne.n	80030b8 <__aeabi_dsub+0x5f0>
 80030b6:	e6dc      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 80030b8:	0762      	lsls	r2, r4, #29
 80030ba:	4310      	orrs	r0, r2
 80030bc:	2280      	movs	r2, #128	@ 0x80
 80030be:	08e4      	lsrs	r4, r4, #3
 80030c0:	0312      	lsls	r2, r2, #12
 80030c2:	4214      	tst	r4, r2
 80030c4:	d009      	beq.n	80030da <__aeabi_dsub+0x612>
 80030c6:	08fd      	lsrs	r5, r7, #3
 80030c8:	4215      	tst	r5, r2
 80030ca:	d106      	bne.n	80030da <__aeabi_dsub+0x612>
 80030cc:	4663      	mov	r3, ip
 80030ce:	2601      	movs	r6, #1
 80030d0:	002c      	movs	r4, r5
 80030d2:	08d8      	lsrs	r0, r3, #3
 80030d4:	077b      	lsls	r3, r7, #29
 80030d6:	4318      	orrs	r0, r3
 80030d8:	400e      	ands	r6, r1
 80030da:	0f42      	lsrs	r2, r0, #29
 80030dc:	00c0      	lsls	r0, r0, #3
 80030de:	08c0      	lsrs	r0, r0, #3
 80030e0:	0752      	lsls	r2, r2, #29
 80030e2:	4302      	orrs	r2, r0
 80030e4:	e601      	b.n	8002cea <__aeabi_dsub+0x222>
 80030e6:	4663      	mov	r3, ip
 80030e8:	1a1d      	subs	r5, r3, r0
 80030ea:	45ac      	cmp	ip, r5
 80030ec:	4192      	sbcs	r2, r2
 80030ee:	9b02      	ldr	r3, [sp, #8]
 80030f0:	4252      	negs	r2, r2
 80030f2:	1b1c      	subs	r4, r3, r4
 80030f4:	000e      	movs	r6, r1
 80030f6:	4688      	mov	r8, r1
 80030f8:	2701      	movs	r7, #1
 80030fa:	1aa4      	subs	r4, r4, r2
 80030fc:	e546      	b.n	8002b8c <__aeabi_dsub+0xc4>
 80030fe:	4663      	mov	r3, ip
 8003100:	08d9      	lsrs	r1, r3, #3
 8003102:	9b02      	ldr	r3, [sp, #8]
 8003104:	075a      	lsls	r2, r3, #29
 8003106:	430a      	orrs	r2, r1
 8003108:	08dc      	lsrs	r4, r3, #3
 800310a:	e5ee      	b.n	8002cea <__aeabi_dsub+0x222>
 800310c:	4663      	mov	r3, ip
 800310e:	9c02      	ldr	r4, [sp, #8]
 8003110:	9303      	str	r3, [sp, #12]
 8003112:	e6c7      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8003114:	08c0      	lsrs	r0, r0, #3
 8003116:	2a00      	cmp	r2, #0
 8003118:	d100      	bne.n	800311c <__aeabi_dsub+0x654>
 800311a:	e6aa      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 800311c:	0762      	lsls	r2, r4, #29
 800311e:	4310      	orrs	r0, r2
 8003120:	2280      	movs	r2, #128	@ 0x80
 8003122:	08e4      	lsrs	r4, r4, #3
 8003124:	0312      	lsls	r2, r2, #12
 8003126:	4214      	tst	r4, r2
 8003128:	d0d7      	beq.n	80030da <__aeabi_dsub+0x612>
 800312a:	9f02      	ldr	r7, [sp, #8]
 800312c:	08fd      	lsrs	r5, r7, #3
 800312e:	4215      	tst	r5, r2
 8003130:	d1d3      	bne.n	80030da <__aeabi_dsub+0x612>
 8003132:	4663      	mov	r3, ip
 8003134:	2601      	movs	r6, #1
 8003136:	08d8      	lsrs	r0, r3, #3
 8003138:	077b      	lsls	r3, r7, #29
 800313a:	002c      	movs	r4, r5
 800313c:	4318      	orrs	r0, r3
 800313e:	400e      	ands	r6, r1
 8003140:	e7cb      	b.n	80030da <__aeabi_dsub+0x612>
 8003142:	000a      	movs	r2, r1
 8003144:	0027      	movs	r7, r4
 8003146:	3a20      	subs	r2, #32
 8003148:	40d7      	lsrs	r7, r2
 800314a:	2920      	cmp	r1, #32
 800314c:	d005      	beq.n	800315a <__aeabi_dsub+0x692>
 800314e:	2240      	movs	r2, #64	@ 0x40
 8003150:	1a52      	subs	r2, r2, r1
 8003152:	4094      	lsls	r4, r2
 8003154:	0025      	movs	r5, r4
 8003156:	4305      	orrs	r5, r0
 8003158:	9503      	str	r5, [sp, #12]
 800315a:	9d03      	ldr	r5, [sp, #12]
 800315c:	1e6a      	subs	r2, r5, #1
 800315e:	4195      	sbcs	r5, r2
 8003160:	432f      	orrs	r7, r5
 8003162:	e610      	b.n	8002d86 <__aeabi_dsub+0x2be>
 8003164:	0014      	movs	r4, r2
 8003166:	2500      	movs	r5, #0
 8003168:	2200      	movs	r2, #0
 800316a:	e556      	b.n	8002c1a <__aeabi_dsub+0x152>
 800316c:	9b02      	ldr	r3, [sp, #8]
 800316e:	4460      	add	r0, ip
 8003170:	4699      	mov	r9, r3
 8003172:	4560      	cmp	r0, ip
 8003174:	4192      	sbcs	r2, r2
 8003176:	444c      	add	r4, r9
 8003178:	4252      	negs	r2, r2
 800317a:	0005      	movs	r5, r0
 800317c:	18a4      	adds	r4, r4, r2
 800317e:	e74c      	b.n	800301a <__aeabi_dsub+0x552>
 8003180:	001a      	movs	r2, r3
 8003182:	001c      	movs	r4, r3
 8003184:	432a      	orrs	r2, r5
 8003186:	d000      	beq.n	800318a <__aeabi_dsub+0x6c2>
 8003188:	e6b3      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 800318a:	e6c9      	b.n	8002f20 <__aeabi_dsub+0x458>
 800318c:	2480      	movs	r4, #128	@ 0x80
 800318e:	2600      	movs	r6, #0
 8003190:	0324      	lsls	r4, r4, #12
 8003192:	e5ae      	b.n	8002cf2 <__aeabi_dsub+0x22a>
 8003194:	2120      	movs	r1, #32
 8003196:	2500      	movs	r5, #0
 8003198:	1a09      	subs	r1, r1, r0
 800319a:	e517      	b.n	8002bcc <__aeabi_dsub+0x104>
 800319c:	2200      	movs	r2, #0
 800319e:	2500      	movs	r5, #0
 80031a0:	4c0b      	ldr	r4, [pc, #44]	@ (80031d0 <__aeabi_dsub+0x708>)
 80031a2:	e53a      	b.n	8002c1a <__aeabi_dsub+0x152>
 80031a4:	2d00      	cmp	r5, #0
 80031a6:	d100      	bne.n	80031aa <__aeabi_dsub+0x6e2>
 80031a8:	e5f6      	b.n	8002d98 <__aeabi_dsub+0x2d0>
 80031aa:	464b      	mov	r3, r9
 80031ac:	1bda      	subs	r2, r3, r7
 80031ae:	4692      	mov	sl, r2
 80031b0:	2f00      	cmp	r7, #0
 80031b2:	d100      	bne.n	80031b6 <__aeabi_dsub+0x6ee>
 80031b4:	e66f      	b.n	8002e96 <__aeabi_dsub+0x3ce>
 80031b6:	2a38      	cmp	r2, #56	@ 0x38
 80031b8:	dc05      	bgt.n	80031c6 <__aeabi_dsub+0x6fe>
 80031ba:	2680      	movs	r6, #128	@ 0x80
 80031bc:	0436      	lsls	r6, r6, #16
 80031be:	4334      	orrs	r4, r6
 80031c0:	4688      	mov	r8, r1
 80031c2:	000e      	movs	r6, r1
 80031c4:	e6d1      	b.n	8002f6a <__aeabi_dsub+0x4a2>
 80031c6:	4688      	mov	r8, r1
 80031c8:	000e      	movs	r6, r1
 80031ca:	2501      	movs	r5, #1
 80031cc:	e6de      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	000007ff 	.word	0x000007ff
 80031d4:	ff7fffff 	.word	0xff7fffff
 80031d8:	000007fe 	.word	0x000007fe
 80031dc:	2d00      	cmp	r5, #0
 80031de:	d100      	bne.n	80031e2 <__aeabi_dsub+0x71a>
 80031e0:	e668      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 80031e2:	464b      	mov	r3, r9
 80031e4:	1bd9      	subs	r1, r3, r7
 80031e6:	2f00      	cmp	r7, #0
 80031e8:	d101      	bne.n	80031ee <__aeabi_dsub+0x726>
 80031ea:	468a      	mov	sl, r1
 80031ec:	e5a7      	b.n	8002d3e <__aeabi_dsub+0x276>
 80031ee:	2701      	movs	r7, #1
 80031f0:	2938      	cmp	r1, #56	@ 0x38
 80031f2:	dd00      	ble.n	80031f6 <__aeabi_dsub+0x72e>
 80031f4:	e5c7      	b.n	8002d86 <__aeabi_dsub+0x2be>
 80031f6:	2280      	movs	r2, #128	@ 0x80
 80031f8:	0412      	lsls	r2, r2, #16
 80031fa:	4314      	orrs	r4, r2
 80031fc:	e5af      	b.n	8002d5e <__aeabi_dsub+0x296>
 80031fe:	46c0      	nop			@ (mov r8, r8)

08003200 <__aeabi_dcmpun>:
 8003200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003202:	46c6      	mov	lr, r8
 8003204:	031e      	lsls	r6, r3, #12
 8003206:	0b36      	lsrs	r6, r6, #12
 8003208:	46b0      	mov	r8, r6
 800320a:	4e0d      	ldr	r6, [pc, #52]	@ (8003240 <__aeabi_dcmpun+0x40>)
 800320c:	030c      	lsls	r4, r1, #12
 800320e:	004d      	lsls	r5, r1, #1
 8003210:	005f      	lsls	r7, r3, #1
 8003212:	b500      	push	{lr}
 8003214:	0b24      	lsrs	r4, r4, #12
 8003216:	0d6d      	lsrs	r5, r5, #21
 8003218:	0d7f      	lsrs	r7, r7, #21
 800321a:	42b5      	cmp	r5, r6
 800321c:	d00b      	beq.n	8003236 <__aeabi_dcmpun+0x36>
 800321e:	4908      	ldr	r1, [pc, #32]	@ (8003240 <__aeabi_dcmpun+0x40>)
 8003220:	2000      	movs	r0, #0
 8003222:	428f      	cmp	r7, r1
 8003224:	d104      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 8003226:	4646      	mov	r6, r8
 8003228:	4316      	orrs	r6, r2
 800322a:	0030      	movs	r0, r6
 800322c:	1e43      	subs	r3, r0, #1
 800322e:	4198      	sbcs	r0, r3
 8003230:	bc80      	pop	{r7}
 8003232:	46b8      	mov	r8, r7
 8003234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003236:	4304      	orrs	r4, r0
 8003238:	2001      	movs	r0, #1
 800323a:	2c00      	cmp	r4, #0
 800323c:	d1f8      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 800323e:	e7ee      	b.n	800321e <__aeabi_dcmpun+0x1e>
 8003240:	000007ff 	.word	0x000007ff

08003244 <__aeabi_d2iz>:
 8003244:	000b      	movs	r3, r1
 8003246:	0002      	movs	r2, r0
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	4d16      	ldr	r5, [pc, #88]	@ (80032a4 <__aeabi_d2iz+0x60>)
 800324c:	030c      	lsls	r4, r1, #12
 800324e:	b082      	sub	sp, #8
 8003250:	0049      	lsls	r1, r1, #1
 8003252:	2000      	movs	r0, #0
 8003254:	9200      	str	r2, [sp, #0]
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	0b24      	lsrs	r4, r4, #12
 800325a:	0d49      	lsrs	r1, r1, #21
 800325c:	0fde      	lsrs	r6, r3, #31
 800325e:	42a9      	cmp	r1, r5
 8003260:	dd04      	ble.n	800326c <__aeabi_d2iz+0x28>
 8003262:	4811      	ldr	r0, [pc, #68]	@ (80032a8 <__aeabi_d2iz+0x64>)
 8003264:	4281      	cmp	r1, r0
 8003266:	dd03      	ble.n	8003270 <__aeabi_d2iz+0x2c>
 8003268:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <__aeabi_d2iz+0x68>)
 800326a:	18f0      	adds	r0, r6, r3
 800326c:	b002      	add	sp, #8
 800326e:	bd70      	pop	{r4, r5, r6, pc}
 8003270:	2080      	movs	r0, #128	@ 0x80
 8003272:	0340      	lsls	r0, r0, #13
 8003274:	4320      	orrs	r0, r4
 8003276:	4c0e      	ldr	r4, [pc, #56]	@ (80032b0 <__aeabi_d2iz+0x6c>)
 8003278:	1a64      	subs	r4, r4, r1
 800327a:	2c1f      	cmp	r4, #31
 800327c:	dd08      	ble.n	8003290 <__aeabi_d2iz+0x4c>
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <__aeabi_d2iz+0x70>)
 8003280:	1a5b      	subs	r3, r3, r1
 8003282:	40d8      	lsrs	r0, r3
 8003284:	0003      	movs	r3, r0
 8003286:	4258      	negs	r0, r3
 8003288:	2e00      	cmp	r6, #0
 800328a:	d1ef      	bne.n	800326c <__aeabi_d2iz+0x28>
 800328c:	0018      	movs	r0, r3
 800328e:	e7ed      	b.n	800326c <__aeabi_d2iz+0x28>
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <__aeabi_d2iz+0x74>)
 8003292:	9a00      	ldr	r2, [sp, #0]
 8003294:	469c      	mov	ip, r3
 8003296:	0003      	movs	r3, r0
 8003298:	4461      	add	r1, ip
 800329a:	408b      	lsls	r3, r1
 800329c:	40e2      	lsrs	r2, r4
 800329e:	4313      	orrs	r3, r2
 80032a0:	e7f1      	b.n	8003286 <__aeabi_d2iz+0x42>
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	000003fe 	.word	0x000003fe
 80032a8:	0000041d 	.word	0x0000041d
 80032ac:	7fffffff 	.word	0x7fffffff
 80032b0:	00000433 	.word	0x00000433
 80032b4:	00000413 	.word	0x00000413
 80032b8:	fffffbed 	.word	0xfffffbed

080032bc <__aeabi_i2d>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	2800      	cmp	r0, #0
 80032c0:	d016      	beq.n	80032f0 <__aeabi_i2d+0x34>
 80032c2:	17c3      	asrs	r3, r0, #31
 80032c4:	18c5      	adds	r5, r0, r3
 80032c6:	405d      	eors	r5, r3
 80032c8:	0fc4      	lsrs	r4, r0, #31
 80032ca:	0028      	movs	r0, r5
 80032cc:	f000 f914 	bl	80034f8 <__clzsi2>
 80032d0:	4b10      	ldr	r3, [pc, #64]	@ (8003314 <__aeabi_i2d+0x58>)
 80032d2:	1a1b      	subs	r3, r3, r0
 80032d4:	055b      	lsls	r3, r3, #21
 80032d6:	0d5b      	lsrs	r3, r3, #21
 80032d8:	280a      	cmp	r0, #10
 80032da:	dc14      	bgt.n	8003306 <__aeabi_i2d+0x4a>
 80032dc:	0002      	movs	r2, r0
 80032de:	002e      	movs	r6, r5
 80032e0:	3215      	adds	r2, #21
 80032e2:	4096      	lsls	r6, r2
 80032e4:	220b      	movs	r2, #11
 80032e6:	1a12      	subs	r2, r2, r0
 80032e8:	40d5      	lsrs	r5, r2
 80032ea:	032d      	lsls	r5, r5, #12
 80032ec:	0b2d      	lsrs	r5, r5, #12
 80032ee:	e003      	b.n	80032f8 <__aeabi_i2d+0x3c>
 80032f0:	2400      	movs	r4, #0
 80032f2:	2300      	movs	r3, #0
 80032f4:	2500      	movs	r5, #0
 80032f6:	2600      	movs	r6, #0
 80032f8:	051b      	lsls	r3, r3, #20
 80032fa:	432b      	orrs	r3, r5
 80032fc:	07e4      	lsls	r4, r4, #31
 80032fe:	4323      	orrs	r3, r4
 8003300:	0030      	movs	r0, r6
 8003302:	0019      	movs	r1, r3
 8003304:	bd70      	pop	{r4, r5, r6, pc}
 8003306:	380b      	subs	r0, #11
 8003308:	4085      	lsls	r5, r0
 800330a:	032d      	lsls	r5, r5, #12
 800330c:	2600      	movs	r6, #0
 800330e:	0b2d      	lsrs	r5, r5, #12
 8003310:	e7f2      	b.n	80032f8 <__aeabi_i2d+0x3c>
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	0000041e 	.word	0x0000041e

08003318 <__aeabi_ui2d>:
 8003318:	b510      	push	{r4, lr}
 800331a:	1e04      	subs	r4, r0, #0
 800331c:	d010      	beq.n	8003340 <__aeabi_ui2d+0x28>
 800331e:	f000 f8eb 	bl	80034f8 <__clzsi2>
 8003322:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <__aeabi_ui2d+0x44>)
 8003324:	1a1b      	subs	r3, r3, r0
 8003326:	055b      	lsls	r3, r3, #21
 8003328:	0d5b      	lsrs	r3, r3, #21
 800332a:	280a      	cmp	r0, #10
 800332c:	dc0f      	bgt.n	800334e <__aeabi_ui2d+0x36>
 800332e:	220b      	movs	r2, #11
 8003330:	0021      	movs	r1, r4
 8003332:	1a12      	subs	r2, r2, r0
 8003334:	40d1      	lsrs	r1, r2
 8003336:	3015      	adds	r0, #21
 8003338:	030a      	lsls	r2, r1, #12
 800333a:	4084      	lsls	r4, r0
 800333c:	0b12      	lsrs	r2, r2, #12
 800333e:	e001      	b.n	8003344 <__aeabi_ui2d+0x2c>
 8003340:	2300      	movs	r3, #0
 8003342:	2200      	movs	r2, #0
 8003344:	051b      	lsls	r3, r3, #20
 8003346:	4313      	orrs	r3, r2
 8003348:	0020      	movs	r0, r4
 800334a:	0019      	movs	r1, r3
 800334c:	bd10      	pop	{r4, pc}
 800334e:	0022      	movs	r2, r4
 8003350:	380b      	subs	r0, #11
 8003352:	4082      	lsls	r2, r0
 8003354:	0312      	lsls	r2, r2, #12
 8003356:	2400      	movs	r4, #0
 8003358:	0b12      	lsrs	r2, r2, #12
 800335a:	e7f3      	b.n	8003344 <__aeabi_ui2d+0x2c>
 800335c:	0000041e 	.word	0x0000041e

08003360 <__aeabi_f2d>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	0242      	lsls	r2, r0, #9
 8003364:	0043      	lsls	r3, r0, #1
 8003366:	0fc4      	lsrs	r4, r0, #31
 8003368:	20fe      	movs	r0, #254	@ 0xfe
 800336a:	0e1b      	lsrs	r3, r3, #24
 800336c:	1c59      	adds	r1, r3, #1
 800336e:	0a55      	lsrs	r5, r2, #9
 8003370:	4208      	tst	r0, r1
 8003372:	d00c      	beq.n	800338e <__aeabi_f2d+0x2e>
 8003374:	21e0      	movs	r1, #224	@ 0xe0
 8003376:	0089      	lsls	r1, r1, #2
 8003378:	468c      	mov	ip, r1
 800337a:	076d      	lsls	r5, r5, #29
 800337c:	0b12      	lsrs	r2, r2, #12
 800337e:	4463      	add	r3, ip
 8003380:	051b      	lsls	r3, r3, #20
 8003382:	4313      	orrs	r3, r2
 8003384:	07e4      	lsls	r4, r4, #31
 8003386:	4323      	orrs	r3, r4
 8003388:	0028      	movs	r0, r5
 800338a:	0019      	movs	r1, r3
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	2b00      	cmp	r3, #0
 8003390:	d114      	bne.n	80033bc <__aeabi_f2d+0x5c>
 8003392:	2d00      	cmp	r5, #0
 8003394:	d01b      	beq.n	80033ce <__aeabi_f2d+0x6e>
 8003396:	0028      	movs	r0, r5
 8003398:	f000 f8ae 	bl	80034f8 <__clzsi2>
 800339c:	280a      	cmp	r0, #10
 800339e:	dc1c      	bgt.n	80033da <__aeabi_f2d+0x7a>
 80033a0:	230b      	movs	r3, #11
 80033a2:	002a      	movs	r2, r5
 80033a4:	1a1b      	subs	r3, r3, r0
 80033a6:	40da      	lsrs	r2, r3
 80033a8:	0003      	movs	r3, r0
 80033aa:	3315      	adds	r3, #21
 80033ac:	409d      	lsls	r5, r3
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <__aeabi_f2d+0x88>)
 80033b0:	0312      	lsls	r2, r2, #12
 80033b2:	1a1b      	subs	r3, r3, r0
 80033b4:	055b      	lsls	r3, r3, #21
 80033b6:	0b12      	lsrs	r2, r2, #12
 80033b8:	0d5b      	lsrs	r3, r3, #21
 80033ba:	e7e1      	b.n	8003380 <__aeabi_f2d+0x20>
 80033bc:	2d00      	cmp	r5, #0
 80033be:	d009      	beq.n	80033d4 <__aeabi_f2d+0x74>
 80033c0:	0b13      	lsrs	r3, r2, #12
 80033c2:	2280      	movs	r2, #128	@ 0x80
 80033c4:	0312      	lsls	r2, r2, #12
 80033c6:	431a      	orrs	r2, r3
 80033c8:	076d      	lsls	r5, r5, #29
 80033ca:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033cc:	e7d8      	b.n	8003380 <__aeabi_f2d+0x20>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2200      	movs	r2, #0
 80033d2:	e7d5      	b.n	8003380 <__aeabi_f2d+0x20>
 80033d4:	2200      	movs	r2, #0
 80033d6:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033d8:	e7d2      	b.n	8003380 <__aeabi_f2d+0x20>
 80033da:	0003      	movs	r3, r0
 80033dc:	002a      	movs	r2, r5
 80033de:	3b0b      	subs	r3, #11
 80033e0:	409a      	lsls	r2, r3
 80033e2:	2500      	movs	r5, #0
 80033e4:	e7e3      	b.n	80033ae <__aeabi_f2d+0x4e>
 80033e6:	46c0      	nop			@ (mov r8, r8)
 80033e8:	00000389 	.word	0x00000389
 80033ec:	000007ff 	.word	0x000007ff

080033f0 <__aeabi_d2f>:
 80033f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f2:	004b      	lsls	r3, r1, #1
 80033f4:	030f      	lsls	r7, r1, #12
 80033f6:	0d5b      	lsrs	r3, r3, #21
 80033f8:	4c3b      	ldr	r4, [pc, #236]	@ (80034e8 <__aeabi_d2f+0xf8>)
 80033fa:	0f45      	lsrs	r5, r0, #29
 80033fc:	b083      	sub	sp, #12
 80033fe:	0a7f      	lsrs	r7, r7, #9
 8003400:	1c5e      	adds	r6, r3, #1
 8003402:	432f      	orrs	r7, r5
 8003404:	9000      	str	r0, [sp, #0]
 8003406:	9101      	str	r1, [sp, #4]
 8003408:	0fca      	lsrs	r2, r1, #31
 800340a:	00c5      	lsls	r5, r0, #3
 800340c:	4226      	tst	r6, r4
 800340e:	d00b      	beq.n	8003428 <__aeabi_d2f+0x38>
 8003410:	4936      	ldr	r1, [pc, #216]	@ (80034ec <__aeabi_d2f+0xfc>)
 8003412:	185c      	adds	r4, r3, r1
 8003414:	2cfe      	cmp	r4, #254	@ 0xfe
 8003416:	dd13      	ble.n	8003440 <__aeabi_d2f+0x50>
 8003418:	20ff      	movs	r0, #255	@ 0xff
 800341a:	2300      	movs	r3, #0
 800341c:	05c0      	lsls	r0, r0, #23
 800341e:	4318      	orrs	r0, r3
 8003420:	07d2      	lsls	r2, r2, #31
 8003422:	4310      	orrs	r0, r2
 8003424:	b003      	add	sp, #12
 8003426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <__aeabi_d2f+0x42>
 800342c:	2000      	movs	r0, #0
 800342e:	2300      	movs	r3, #0
 8003430:	e7f4      	b.n	800341c <__aeabi_d2f+0x2c>
 8003432:	433d      	orrs	r5, r7
 8003434:	d0f0      	beq.n	8003418 <__aeabi_d2f+0x28>
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	03db      	lsls	r3, r3, #15
 800343a:	20ff      	movs	r0, #255	@ 0xff
 800343c:	433b      	orrs	r3, r7
 800343e:	e7ed      	b.n	800341c <__aeabi_d2f+0x2c>
 8003440:	2c00      	cmp	r4, #0
 8003442:	dd14      	ble.n	800346e <__aeabi_d2f+0x7e>
 8003444:	9b00      	ldr	r3, [sp, #0]
 8003446:	00ff      	lsls	r7, r7, #3
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	4183      	sbcs	r3, r0
 800344e:	0f69      	lsrs	r1, r5, #29
 8003450:	433b      	orrs	r3, r7
 8003452:	430b      	orrs	r3, r1
 8003454:	0759      	lsls	r1, r3, #29
 8003456:	d041      	beq.n	80034dc <__aeabi_d2f+0xec>
 8003458:	210f      	movs	r1, #15
 800345a:	4019      	ands	r1, r3
 800345c:	2904      	cmp	r1, #4
 800345e:	d028      	beq.n	80034b2 <__aeabi_d2f+0xc2>
 8003460:	3304      	adds	r3, #4
 8003462:	0159      	lsls	r1, r3, #5
 8003464:	d525      	bpl.n	80034b2 <__aeabi_d2f+0xc2>
 8003466:	3401      	adds	r4, #1
 8003468:	2300      	movs	r3, #0
 800346a:	b2e0      	uxtb	r0, r4
 800346c:	e7d6      	b.n	800341c <__aeabi_d2f+0x2c>
 800346e:	0021      	movs	r1, r4
 8003470:	3117      	adds	r1, #23
 8003472:	dbdb      	blt.n	800342c <__aeabi_d2f+0x3c>
 8003474:	2180      	movs	r1, #128	@ 0x80
 8003476:	201e      	movs	r0, #30
 8003478:	0409      	lsls	r1, r1, #16
 800347a:	4339      	orrs	r1, r7
 800347c:	1b00      	subs	r0, r0, r4
 800347e:	281f      	cmp	r0, #31
 8003480:	dd1b      	ble.n	80034ba <__aeabi_d2f+0xca>
 8003482:	2602      	movs	r6, #2
 8003484:	4276      	negs	r6, r6
 8003486:	1b34      	subs	r4, r6, r4
 8003488:	000e      	movs	r6, r1
 800348a:	40e6      	lsrs	r6, r4
 800348c:	0034      	movs	r4, r6
 800348e:	2820      	cmp	r0, #32
 8003490:	d004      	beq.n	800349c <__aeabi_d2f+0xac>
 8003492:	4817      	ldr	r0, [pc, #92]	@ (80034f0 <__aeabi_d2f+0x100>)
 8003494:	4684      	mov	ip, r0
 8003496:	4463      	add	r3, ip
 8003498:	4099      	lsls	r1, r3
 800349a:	430d      	orrs	r5, r1
 800349c:	002b      	movs	r3, r5
 800349e:	1e59      	subs	r1, r3, #1
 80034a0:	418b      	sbcs	r3, r1
 80034a2:	4323      	orrs	r3, r4
 80034a4:	0759      	lsls	r1, r3, #29
 80034a6:	d015      	beq.n	80034d4 <__aeabi_d2f+0xe4>
 80034a8:	210f      	movs	r1, #15
 80034aa:	2400      	movs	r4, #0
 80034ac:	4019      	ands	r1, r3
 80034ae:	2904      	cmp	r1, #4
 80034b0:	d117      	bne.n	80034e2 <__aeabi_d2f+0xf2>
 80034b2:	019b      	lsls	r3, r3, #6
 80034b4:	0a5b      	lsrs	r3, r3, #9
 80034b6:	b2e0      	uxtb	r0, r4
 80034b8:	e7b0      	b.n	800341c <__aeabi_d2f+0x2c>
 80034ba:	4c0e      	ldr	r4, [pc, #56]	@ (80034f4 <__aeabi_d2f+0x104>)
 80034bc:	191c      	adds	r4, r3, r4
 80034be:	002b      	movs	r3, r5
 80034c0:	40a5      	lsls	r5, r4
 80034c2:	40c3      	lsrs	r3, r0
 80034c4:	40a1      	lsls	r1, r4
 80034c6:	1e68      	subs	r0, r5, #1
 80034c8:	4185      	sbcs	r5, r0
 80034ca:	4329      	orrs	r1, r5
 80034cc:	430b      	orrs	r3, r1
 80034ce:	2400      	movs	r4, #0
 80034d0:	0759      	lsls	r1, r3, #29
 80034d2:	d1c1      	bne.n	8003458 <__aeabi_d2f+0x68>
 80034d4:	019b      	lsls	r3, r3, #6
 80034d6:	2000      	movs	r0, #0
 80034d8:	0a5b      	lsrs	r3, r3, #9
 80034da:	e79f      	b.n	800341c <__aeabi_d2f+0x2c>
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	b2e0      	uxtb	r0, r4
 80034e0:	e79c      	b.n	800341c <__aeabi_d2f+0x2c>
 80034e2:	3304      	adds	r3, #4
 80034e4:	e7e5      	b.n	80034b2 <__aeabi_d2f+0xc2>
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	000007fe 	.word	0x000007fe
 80034ec:	fffffc80 	.word	0xfffffc80
 80034f0:	fffffca2 	.word	0xfffffca2
 80034f4:	fffffc82 	.word	0xfffffc82

080034f8 <__clzsi2>:
 80034f8:	211c      	movs	r1, #28
 80034fa:	2301      	movs	r3, #1
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	4298      	cmp	r0, r3
 8003500:	d301      	bcc.n	8003506 <__clzsi2+0xe>
 8003502:	0c00      	lsrs	r0, r0, #16
 8003504:	3910      	subs	r1, #16
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	4298      	cmp	r0, r3
 800350a:	d301      	bcc.n	8003510 <__clzsi2+0x18>
 800350c:	0a00      	lsrs	r0, r0, #8
 800350e:	3908      	subs	r1, #8
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	4298      	cmp	r0, r3
 8003514:	d301      	bcc.n	800351a <__clzsi2+0x22>
 8003516:	0900      	lsrs	r0, r0, #4
 8003518:	3904      	subs	r1, #4
 800351a:	a202      	add	r2, pc, #8	@ (adr r2, 8003524 <__clzsi2+0x2c>)
 800351c:	5c10      	ldrb	r0, [r2, r0]
 800351e:	1840      	adds	r0, r0, r1
 8003520:	4770      	bx	lr
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	02020304 	.word	0x02020304
 8003528:	01010101 	.word	0x01010101
	...

08003534 <__clzdi2>:
 8003534:	b510      	push	{r4, lr}
 8003536:	2900      	cmp	r1, #0
 8003538:	d103      	bne.n	8003542 <__clzdi2+0xe>
 800353a:	f7ff ffdd 	bl	80034f8 <__clzsi2>
 800353e:	3020      	adds	r0, #32
 8003540:	e002      	b.n	8003548 <__clzdi2+0x14>
 8003542:	0008      	movs	r0, r1
 8003544:	f7ff ffd8 	bl	80034f8 <__clzsi2>
 8003548:	bd10      	pop	{r4, pc}
 800354a:	46c0      	nop			@ (mov r8, r8)

0800354c <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 800354c:	b590      	push	{r4, r7, lr}
 800354e:	b087      	sub	sp, #28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	1dbb      	adds	r3, r7, #6
 8003558:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800355a:	4b17      	ldr	r3, [pc, #92]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003560:	f007 fecc 	bl	800b2fc <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003564:	2316      	movs	r3, #22
 8003566:	18fb      	adds	r3, r7, r3
 8003568:	2200      	movs	r2, #0
 800356a:	801a      	strh	r2, [r3, #0]
 800356c:	e015      	b.n	800359a <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 800356e:	4b12      	ldr	r3, [pc, #72]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 8003570:	6819      	ldr	r1, [r3, #0]
 8003572:	2416      	movs	r4, #22
 8003574:	193b      	adds	r3, r7, r4
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	18d3      	adds	r3, r2, r3
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	001a      	movs	r2, r3
 8003580:	2000      	movs	r0, #0
 8003582:	f007 ff23 	bl	800b3cc <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 8003586:	4b0c      	ldr	r3, [pc, #48]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	4b0a      	ldr	r3, [pc, #40]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 800358e:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003590:	193b      	adds	r3, r7, r4
 8003592:	881a      	ldrh	r2, [r3, #0]
 8003594:	193b      	adds	r3, r7, r4
 8003596:	3201      	adds	r2, #1
 8003598:	801a      	strh	r2, [r3, #0]
 800359a:	2316      	movs	r3, #22
 800359c:	18fa      	adds	r2, r7, r3
 800359e:	1dbb      	adds	r3, r7, #6
 80035a0:	8812      	ldrh	r2, [r2, #0]
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d3e2      	bcc.n	800356e <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80035a8:	f007 fed6 	bl	800b358 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80035ac:	4b02      	ldr	r3, [pc, #8]	@ (80035b8 <WriteUint8ArrayEeprom+0x6c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
}
 80035b0:	0018      	movs	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b007      	add	sp, #28
 80035b6:	bd90      	pop	{r4, r7, pc}
 80035b8:	200003e4 	.word	0x200003e4

080035bc <WriteUint8ArrayEepromSafe>:

uint32_t WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	0019      	movs	r1, r3
 80035c8:	1dbb      	adds	r3, r7, #6
 80035ca:	801a      	strh	r2, [r3, #0]
 80035cc:	1d3b      	adds	r3, r7, #4
 80035ce:	1c0a      	adds	r2, r1, #0
 80035d0:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80035d2:	1dba      	adds	r2, r7, #6
 80035d4:	1d3b      	adds	r3, r7, #4
 80035d6:	8812      	ldrh	r2, [r2, #0]
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d806      	bhi.n	80035ec <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80035de:	1dbb      	adds	r3, r7, #6
 80035e0:	881a      	ldrh	r2, [r3, #0]
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	0018      	movs	r0, r3
 80035e8:	f7ff ffb0 	bl	800354c <WriteUint8ArrayEeprom>
    }
}
 80035ec:	46c0      	nop			@ (mov r8, r8)
 80035ee:	0018      	movs	r0, r3
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b004      	add	sp, #16
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b086      	sub	sp, #24
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	1dbb      	adds	r3, r7, #6
 8003602:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003604:	2316      	movs	r3, #22
 8003606:	18fb      	adds	r3, r7, r3
 8003608:	2200      	movs	r2, #0
 800360a:	801a      	strh	r2, [r3, #0]
 800360c:	e010      	b.n	8003630 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 800360e:	2016      	movs	r0, #22
 8003610:	183b      	adds	r3, r7, r0
 8003612:	881a      	ldrh	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	18d3      	adds	r3, r2, r3
 8003618:	0019      	movs	r1, r3
 800361a:	183b      	adds	r3, r7, r0
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	18d3      	adds	r3, r2, r3
 8003622:	780a      	ldrb	r2, [r1, #0]
 8003624:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003626:	183b      	adds	r3, r7, r0
 8003628:	881a      	ldrh	r2, [r3, #0]
 800362a:	183b      	adds	r3, r7, r0
 800362c:	3201      	adds	r2, #1
 800362e:	801a      	strh	r2, [r3, #0]
 8003630:	2316      	movs	r3, #22
 8003632:	18fa      	adds	r2, r7, r3
 8003634:	1dbb      	adds	r3, r7, #6
 8003636:	8812      	ldrh	r2, [r2, #0]
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d3e7      	bcc.n	800360e <ReadUint8ArrayEEprom+0x18>
    }
}
 800363e:	46c0      	nop			@ (mov r8, r8)
 8003640:	46c0      	nop			@ (mov r8, r8)
 8003642:	46bd      	mov	sp, r7
 8003644:	b006      	add	sp, #24
 8003646:	bd80      	pop	{r7, pc}

08003648 <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	000a      	movs	r2, r1
 8003652:	1cbb      	adds	r3, r7, #2
 8003654:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003656:	f007 fe51 	bl	800b2fc <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800365a:	230e      	movs	r3, #14
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	2200      	movs	r2, #0
 8003660:	801a      	strh	r2, [r3, #0]
 8003662:	e00c      	b.n	800367e <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003664:	240e      	movs	r4, #14
 8003666:	193b      	adds	r3, r7, r4
 8003668:	881a      	ldrh	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	18d3      	adds	r3, r2, r3
 800366e:	0018      	movs	r0, r3
 8003670:	f007 fe80 	bl	800b374 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003674:	193b      	adds	r3, r7, r4
 8003676:	193a      	adds	r2, r7, r4
 8003678:	8812      	ldrh	r2, [r2, #0]
 800367a:	3204      	adds	r2, #4
 800367c:	801a      	strh	r2, [r3, #0]
 800367e:	230e      	movs	r3, #14
 8003680:	18fa      	adds	r2, r7, r3
 8003682:	1cbb      	adds	r3, r7, #2
 8003684:	8812      	ldrh	r2, [r2, #0]
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d3eb      	bcc.n	8003664 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800368c:	f007 fe64 	bl	800b358 <HAL_FLASHEx_DATAEEPROM_Lock>
 8003690:	46c0      	nop			@ (mov r8, r8)
 8003692:	46bd      	mov	sp, r7
 8003694:	b005      	add	sp, #20
 8003696:	bd90      	pop	{r4, r7, pc}

08003698 <setCharges>:
typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;

void setCharges(){
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 800369c:	f001 ffca 	bl	8005634 <ReadBatteryVoltage>
 80036a0:	1c02      	adds	r2, r0, #0
 80036a2:	4b05      	ldr	r3, [pc, #20]	@ (80036b8 <setCharges+0x20>)
 80036a4:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80036a6:	f002 f827 	bl	80056f8 <ReadSolarVoltage>
 80036aa:	1c02      	adds	r2, r0, #0
 80036ac:	4b03      	ldr	r3, [pc, #12]	@ (80036bc <setCharges+0x24>)
 80036ae:	601a      	str	r2, [r3, #0]
}
 80036b0:	46c0      	nop			@ (mov r8, r8)
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	2000050c 	.word	0x2000050c
 80036bc:	20000510 	.word	0x20000510

080036c0 <ESP_GetHT>:

void ESP_GetHT(float temp, float humid){
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80036ca:	4b05      	ldr	r3, [pc, #20]	@ (80036e0 <ESP_GetHT+0x20>)
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80036d0:	4b04      	ldr	r3, [pc, #16]	@ (80036e4 <ESP_GetHT+0x24>)
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	601a      	str	r2, [r3, #0]
}
 80036d6:	46c0      	nop			@ (mov r8, r8)
 80036d8:	46bd      	mov	sp, r7
 80036da:	b002      	add	sp, #8
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	46c0      	nop			@ (mov r8, r8)
 80036e0:	20000504 	.word	0x20000504
 80036e4:	20000508 	.word	0x20000508

080036e8 <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	1dbb      	adds	r3, r7, #6
 80036f4:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 80036f6:	4b07      	ldr	r3, [pc, #28]	@ (8003714 <setMeasurement+0x2c>)
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80036fc:	4b06      	ldr	r3, [pc, #24]	@ (8003718 <setMeasurement+0x30>)
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 8003702:	4b06      	ldr	r3, [pc, #24]	@ (800371c <setMeasurement+0x34>)
 8003704:	1dba      	adds	r2, r7, #6
 8003706:	8812      	ldrh	r2, [r2, #0]
 8003708:	801a      	strh	r2, [r3, #0]
}
 800370a:	46c0      	nop			@ (mov r8, r8)
 800370c:	46bd      	mov	sp, r7
 800370e:	b004      	add	sp, #16
 8003710:	bd80      	pop	{r7, pc}
 8003712:	46c0      	nop			@ (mov r8, r8)
 8003714:	20000504 	.word	0x20000504
 8003718:	20000508 	.word	0x20000508
 800371c:	20000514 	.word	0x20000514

08003720 <setMic>:
void setMic(float dB){
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  dBC = dB;
 8003728:	4b03      	ldr	r3, [pc, #12]	@ (8003738 <setMic+0x18>)
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	601a      	str	r2, [r3, #0]
}
 800372e:	46c0      	nop			@ (mov r8, r8)
 8003730:	46bd      	mov	sp, r7
 8003732:	b002      	add	sp, #8
 8003734:	bd80      	pop	{r7, pc}
 8003736:	46c0      	nop			@ (mov r8, r8)
 8003738:	20000518 	.word	0x20000518

0800373c <SetConfigMode>:

void SetConfigMode(){
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 8003740:	4b02      	ldr	r3, [pc, #8]	@ (800374c <SetConfigMode+0x10>)
 8003742:	2201      	movs	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
}
 8003746:	46c0      	nop			@ (mov r8, r8)
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	200004f2 	.word	0x200004f2

08003750 <ESP_GetUID>:
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003754:	f006 fd9e 	bl	800a294 <HAL_GetUIDw0>
 8003758:	0002      	movs	r2, r0
 800375a:	4b07      	ldr	r3, [pc, #28]	@ (8003778 <ESP_GetUID+0x28>)
 800375c:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 800375e:	f006 fda3 	bl	800a2a8 <HAL_GetUIDw1>
 8003762:	0002      	movs	r2, r0
 8003764:	4b04      	ldr	r3, [pc, #16]	@ (8003778 <ESP_GetUID+0x28>)
 8003766:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003768:	f006 fda8 	bl	800a2bc <HAL_GetUIDw2>
 800376c:	0002      	movs	r2, r0
 800376e:	4b02      	ldr	r3, [pc, #8]	@ (8003778 <ESP_GetUID+0x28>)
 8003770:	609a      	str	r2, [r3, #8]
}
 8003772:	46c0      	nop			@ (mov r8, r8)
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	200004f8 	.word	0x200004f8

0800377c <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003784:	4b05      	ldr	r3, [pc, #20]	@ (800379c <ESP_Init+0x20>)
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 800378a:	4b05      	ldr	r3, [pc, #20]	@ (80037a0 <ESP_Init+0x24>)
 800378c:	2202      	movs	r2, #2
 800378e:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003790:	f7ff ffde 	bl	8003750 <ESP_GetUID>
}
 8003794:	46c0      	nop			@ (mov r8, r8)
 8003796:	46bd      	mov	sp, r7
 8003798:	b002      	add	sp, #8
 800379a:	bd80      	pop	{r7, pc}
 800379c:	200003e8 	.word	0x200003e8
 80037a0:	20000021 	.word	0x20000021

080037a4 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 80037a4:	b5b0      	push	{r4, r5, r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	000a      	movs	r2, r1
 80037ae:	1cbb      	adds	r3, r7, #2
 80037b0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 80037b2:	4b0e      	ldr	r3, [pc, #56]	@ (80037ec <ESP_Send+0x48>)
 80037b4:	6818      	ldr	r0, [r3, #0]
 80037b6:	250f      	movs	r5, #15
 80037b8:	197c      	adds	r4, r7, r5
 80037ba:	1cbb      	adds	r3, r7, #2
 80037bc:	881a      	ldrh	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	0019      	movs	r1, r3
 80037c2:	f00e f953 	bl	8011a6c <HAL_UART_Transmit_DMA>
 80037c6:	0003      	movs	r3, r0
 80037c8:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80037ca:	197b      	adds	r3, r7, r5
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d007      	beq.n	80037e2 <ESP_Send+0x3e>
    Debug("Error in HAL_UART_Transmit_DMA");
 80037d2:	4a07      	ldr	r2, [pc, #28]	@ (80037f0 <ESP_Send+0x4c>)
 80037d4:	4b07      	ldr	r3, [pc, #28]	@ (80037f4 <ESP_Send+0x50>)
 80037d6:	0019      	movs	r1, r3
 80037d8:	2003      	movs	r0, #3
 80037da:	f006 f9a7 	bl	8009b2c <CreateLine>
    return false;
 80037de:	2300      	movs	r3, #0
 80037e0:	e000      	b.n	80037e4 <ESP_Send+0x40>
  }
  return true;
 80037e2:	2301      	movs	r3, #1
}
 80037e4:	0018      	movs	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b004      	add	sp, #16
 80037ea:	bdb0      	pop	{r4, r5, r7, pc}
 80037ec:	200003e8 	.word	0x200003e8
 80037f0:	0801b2b8 	.word	0x0801b2b8
 80037f4:	0801b2d8 	.word	0x0801b2d8

080037f8 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint8_t length) {
 80037f8:	b5b0      	push	{r4, r5, r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	000a      	movs	r2, r1
 8003802:	1cfb      	adds	r3, r7, #3
 8003804:	701a      	strb	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 8003806:	4b12      	ldr	r3, [pc, #72]	@ (8003850 <ESP_Receive+0x58>)
 8003808:	2200      	movs	r2, #0
 800380a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 800380c:	4b11      	ldr	r3, [pc, #68]	@ (8003854 <ESP_Receive+0x5c>)
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	1cfb      	adds	r3, r7, #3
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	b29a      	uxth	r2, r3
 8003816:	250f      	movs	r5, #15
 8003818:	197c      	adds	r4, r7, r5
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	0019      	movs	r1, r3
 800381e:	f00e f9b5 	bl	8011b8c <HAL_UART_Receive_DMA>
 8003822:	0003      	movs	r3, r0
 8003824:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003826:	197b      	adds	r3, r7, r5
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <ESP_Receive+0x4c>
    Debug("Error in HAL_UART_Receive_DMA.");
 800382e:	4a0a      	ldr	r2, [pc, #40]	@ (8003858 <ESP_Receive+0x60>)
 8003830:	4b0a      	ldr	r3, [pc, #40]	@ (800385c <ESP_Receive+0x64>)
 8003832:	0019      	movs	r1, r3
 8003834:	2003      	movs	r0, #3
 8003836:	f006 f979 	bl	8009b2c <CreateLine>
    RxComplete = true;
 800383a:	4b05      	ldr	r3, [pc, #20]	@ (8003850 <ESP_Receive+0x58>)
 800383c:	2201      	movs	r2, #1
 800383e:	701a      	strb	r2, [r3, #0]
    return false;
 8003840:	2300      	movs	r3, #0
 8003842:	e000      	b.n	8003846 <ESP_Receive+0x4e>
  }
  return true;
 8003844:	2301      	movs	r3, #1
}
 8003846:	0018      	movs	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	b004      	add	sp, #16
 800384c:	bdb0      	pop	{r4, r5, r7, pc}
 800384e:	46c0      	nop			@ (mov r8, r8)
 8003850:	200003ec 	.word	0x200003ec
 8003854:	200003e8 	.word	0x200003e8
 8003858:	0801b2dc 	.word	0x0801b2dc
 800385c:	0801b2d8 	.word	0x0801b2d8

08003860 <HAL_UART_RxCpltCallback>:

// Callback for reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003868:	4b08      	ldr	r3, [pc, #32]	@ (800388c <HAL_UART_RxCpltCallback+0x2c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	429a      	cmp	r2, r3
 8003870:	d108      	bne.n	8003884 <HAL_UART_RxCpltCallback+0x24>
    RxComplete = true;
 8003872:	4b07      	ldr	r3, [pc, #28]	@ (8003890 <HAL_UART_RxCpltCallback+0x30>)
 8003874:	2201      	movs	r2, #1
 8003876:	701a      	strb	r2, [r3, #0]
    Debug("RxComplete");
 8003878:	4a06      	ldr	r2, [pc, #24]	@ (8003894 <HAL_UART_RxCpltCallback+0x34>)
 800387a:	4b07      	ldr	r3, [pc, #28]	@ (8003898 <HAL_UART_RxCpltCallback+0x38>)
 800387c:	0019      	movs	r1, r3
 800387e:	2003      	movs	r0, #3
 8003880:	f006 f954 	bl	8009b2c <CreateLine>
  }
}
 8003884:	46c0      	nop			@ (mov r8, r8)
 8003886:	46bd      	mov	sp, r7
 8003888:	b002      	add	sp, #8
 800388a:	bd80      	pop	{r7, pc}
 800388c:	200003e8 	.word	0x200003e8
 8003890:	200003ec 	.word	0x200003ec
 8003894:	0801b2fc 	.word	0x0801b2fc
 8003898:	0801b2d8 	.word	0x0801b2d8

0800389c <HAL_UART_ErrorCallback>:

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 80038a4:	4b07      	ldr	r3, [pc, #28]	@ (80038c4 <HAL_UART_ErrorCallback+0x28>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d105      	bne.n	80038ba <HAL_UART_ErrorCallback+0x1e>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    Debug("An error has ocurred");
 80038ae:	4a06      	ldr	r2, [pc, #24]	@ (80038c8 <HAL_UART_ErrorCallback+0x2c>)
 80038b0:	4b06      	ldr	r3, [pc, #24]	@ (80038cc <HAL_UART_ErrorCallback+0x30>)
 80038b2:	0019      	movs	r1, r3
 80038b4:	2003      	movs	r0, #3
 80038b6:	f006 f939 	bl	8009b2c <CreateLine>
  }
}
 80038ba:	46c0      	nop			@ (mov r8, r8)
 80038bc:	46bd      	mov	sp, r7
 80038be:	b002      	add	sp, #8
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			@ (mov r8, r8)
 80038c4:	200003e8 	.word	0x200003e8
 80038c8:	0801b308 	.word	0x0801b308
 80038cc:	0801b2d8 	.word	0x0801b2d8

080038d0 <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	e010      	b.n	8003902 <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	001a      	movs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	1898      	adds	r0, r3, r2
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	18d3      	adds	r3, r2, r3
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	001a      	movs	r2, r3
 80038f4:	4b07      	ldr	r3, [pc, #28]	@ (8003914 <uint8ArrayToString+0x44>)
 80038f6:	0019      	movs	r1, r3
 80038f8:	f014 fd34 	bl	8018364 <siprintf>
  for (int i = 0; i < 12; i++)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	3301      	adds	r3, #1
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b0b      	cmp	r3, #11
 8003906:	ddeb      	ble.n	80038e0 <uint8ArrayToString+0x10>
  }
}
 8003908:	46c0      	nop			@ (mov r8, r8)
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	46bd      	mov	sp, r7
 800390e:	b004      	add	sp, #16
 8003910:	bd80      	pop	{r7, pc}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	0801b320 	.word	0x0801b320

08003918 <CreateMessage>:
uint16_t CreateMessage(){
 8003918:	b5b0      	push	{r4, r5, r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af04      	add	r7, sp, #16
  uint16_t messageLength = 0;
 800391e:	1dbb      	adds	r3, r7, #6
 8003920:	2200      	movs	r2, #0
 8003922:	801a      	strh	r2, [r3, #0]
  static uint8_t soundConfig[IdSize];
  static uint8_t vocConfig[IdSize];
  static uint8_t batteryConfig[IdSize];
  static uint8_t solarConfig[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003924:	4b98      	ldr	r3, [pc, #608]	@ (8003b88 <CreateMessage+0x270>)
 8003926:	4899      	ldr	r0, [pc, #612]	@ (8003b8c <CreateMessage+0x274>)
 8003928:	220c      	movs	r2, #12
 800392a:	0019      	movs	r1, r3
 800392c:	f7ff fe63 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003930:	4b97      	ldr	r3, [pc, #604]	@ (8003b90 <CreateMessage+0x278>)
 8003932:	4898      	ldr	r0, [pc, #608]	@ (8003b94 <CreateMessage+0x27c>)
 8003934:	220c      	movs	r2, #12
 8003936:	0019      	movs	r1, r3
 8003938:	f7ff fe5d 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBcConfigAddr, soundConfig, IdSize);
 800393c:	4b96      	ldr	r3, [pc, #600]	@ (8003b98 <CreateMessage+0x280>)
 800393e:	4897      	ldr	r0, [pc, #604]	@ (8003b9c <CreateMessage+0x284>)
 8003940:	220c      	movs	r2, #12
 8003942:	0019      	movs	r1, r3
 8003944:	f7ff fe57 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003948:	4b95      	ldr	r3, [pc, #596]	@ (8003ba0 <CreateMessage+0x288>)
 800394a:	4896      	ldr	r0, [pc, #600]	@ (8003ba4 <CreateMessage+0x28c>)
 800394c:	220c      	movs	r2, #12
 800394e:	0019      	movs	r1, r3
 8003950:	f7ff fe51 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003954:	4b94      	ldr	r3, [pc, #592]	@ (8003ba8 <CreateMessage+0x290>)
 8003956:	4895      	ldr	r0, [pc, #596]	@ (8003bac <CreateMessage+0x294>)
 8003958:	220c      	movs	r2, #12
 800395a:	0019      	movs	r1, r3
 800395c:	f7ff fe4b 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003960:	4b93      	ldr	r3, [pc, #588]	@ (8003bb0 <CreateMessage+0x298>)
 8003962:	4894      	ldr	r0, [pc, #592]	@ (8003bb4 <CreateMessage+0x29c>)
 8003964:	220c      	movs	r2, #12
 8003966:	0019      	movs	r1, r3
 8003968:	f7ff fe45 	bl	80035f6 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800396c:	4b92      	ldr	r3, [pc, #584]	@ (8003bb8 <CreateMessage+0x2a0>)
 800396e:	4893      	ldr	r0, [pc, #588]	@ (8003bbc <CreateMessage+0x2a4>)
 8003970:	221e      	movs	r2, #30
 8003972:	0019      	movs	r1, r3
 8003974:	f7ff fe3f 	bl	80035f6 <ReadUint8ArrayEEprom>
  //(char*)nameConfig
  //get name etc from EEprom
  setCharges();
 8003978:	f7ff fe8e 	bl	8003698 <setCharges>
//  sprintf(messagePart5, "\"name\":\"battery\", \"id\": \"%lu\", \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%3.2f", uid[2], (char*)nameConfig, Buffer, batteryCharge);
//  messageLength += strlen(messagePart5);
//  messageLength += 20;
//  return(messageLength);

  memset(message, 0, sizeof(message));
 800397c:	2380      	movs	r3, #128	@ 0x80
 800397e:	00da      	lsls	r2, r3, #3
 8003980:	4b8f      	ldr	r3, [pc, #572]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003982:	2100      	movs	r1, #0
 8003984:	0018      	movs	r0, r3
 8003986:	f014 fd91 	bl	80184ac <memset>
  uint16_t index = 0;
 800398a:	1d3b      	adds	r3, r7, #4
 800398c:	2200      	movs	r2, #0
 800398e:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003990:	1d3b      	adds	r3, r7, #4
 8003992:	881a      	ldrh	r2, [r3, #0]
 8003994:	4b8a      	ldr	r3, [pc, #552]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003996:	18d3      	adds	r3, r2, r3
 8003998:	4a8a      	ldr	r2, [pc, #552]	@ (8003bc4 <CreateMessage+0x2ac>)
 800399a:	0011      	movs	r1, r2
 800399c:	0018      	movs	r0, r3
 800399e:	f014 fce1 	bl	8018364 <siprintf>
  index = strlen(message);
 80039a2:	4b87      	ldr	r3, [pc, #540]	@ (8003bc0 <CreateMessage+0x2a8>)
 80039a4:	0018      	movs	r0, r3
 80039a6:	f7fc fbaf 	bl	8000108 <strlen>
 80039aa:	0002      	movs	r2, r0
 80039ac:	1d3b      	adds	r3, r7, #4
 80039ae:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 80039b0:	4a75      	ldr	r2, [pc, #468]	@ (8003b88 <CreateMessage+0x270>)
 80039b2:	4b85      	ldr	r3, [pc, #532]	@ (8003bc8 <CreateMessage+0x2b0>)
 80039b4:	0011      	movs	r1, r2
 80039b6:	0018      	movs	r0, r3
 80039b8:	f7ff ff8a 	bl	80038d0 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 80039bc:	1d3b      	adds	r3, r7, #4
 80039be:	881a      	ldrh	r2, [r3, #0]
 80039c0:	4b7f      	ldr	r3, [pc, #508]	@ (8003bc0 <CreateMessage+0x2a8>)
 80039c2:	18d4      	adds	r4, r2, r3
 80039c4:	4b81      	ldr	r3, [pc, #516]	@ (8003bcc <CreateMessage+0x2b4>)
 80039c6:	689d      	ldr	r5, [r3, #8]
 80039c8:	4b81      	ldr	r3, [pc, #516]	@ (8003bd0 <CreateMessage+0x2b8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	1c18      	adds	r0, r3, #0
 80039ce:	f7ff fcc7 	bl	8003360 <__aeabi_f2d>
 80039d2:	0002      	movs	r2, r0
 80039d4:	000b      	movs	r3, r1
 80039d6:	4878      	ldr	r0, [pc, #480]	@ (8003bb8 <CreateMessage+0x2a0>)
 80039d8:	497e      	ldr	r1, [pc, #504]	@ (8003bd4 <CreateMessage+0x2bc>)
 80039da:	9202      	str	r2, [sp, #8]
 80039dc:	9303      	str	r3, [sp, #12]
 80039de:	4b7a      	ldr	r3, [pc, #488]	@ (8003bc8 <CreateMessage+0x2b0>)
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	0003      	movs	r3, r0
 80039e4:	002a      	movs	r2, r5
 80039e6:	0020      	movs	r0, r4
 80039e8:	f014 fcbc 	bl	8018364 <siprintf>
  index = strlen(message);
 80039ec:	4b74      	ldr	r3, [pc, #464]	@ (8003bc0 <CreateMessage+0x2a8>)
 80039ee:	0018      	movs	r0, r3
 80039f0:	f7fc fb8a 	bl	8000108 <strlen>
 80039f4:	0002      	movs	r2, r0
 80039f6:	1d3b      	adds	r3, r7, #4
 80039f8:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 80039fa:	4a65      	ldr	r2, [pc, #404]	@ (8003b90 <CreateMessage+0x278>)
 80039fc:	4b72      	ldr	r3, [pc, #456]	@ (8003bc8 <CreateMessage+0x2b0>)
 80039fe:	0011      	movs	r1, r2
 8003a00:	0018      	movs	r0, r3
 8003a02:	f7ff ff65 	bl	80038d0 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003a06:	1d3b      	adds	r3, r7, #4
 8003a08:	881a      	ldrh	r2, [r3, #0]
 8003a0a:	4b6d      	ldr	r3, [pc, #436]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003a0c:	18d4      	adds	r4, r2, r3
 8003a0e:	4b6f      	ldr	r3, [pc, #444]	@ (8003bcc <CreateMessage+0x2b4>)
 8003a10:	689d      	ldr	r5, [r3, #8]
 8003a12:	4b71      	ldr	r3, [pc, #452]	@ (8003bd8 <CreateMessage+0x2c0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	1c18      	adds	r0, r3, #0
 8003a18:	f7ff fca2 	bl	8003360 <__aeabi_f2d>
 8003a1c:	0002      	movs	r2, r0
 8003a1e:	000b      	movs	r3, r1
 8003a20:	4865      	ldr	r0, [pc, #404]	@ (8003bb8 <CreateMessage+0x2a0>)
 8003a22:	496e      	ldr	r1, [pc, #440]	@ (8003bdc <CreateMessage+0x2c4>)
 8003a24:	9202      	str	r2, [sp, #8]
 8003a26:	9303      	str	r3, [sp, #12]
 8003a28:	4b67      	ldr	r3, [pc, #412]	@ (8003bc8 <CreateMessage+0x2b0>)
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	0003      	movs	r3, r0
 8003a2e:	002a      	movs	r2, r5
 8003a30:	0020      	movs	r0, r4
 8003a32:	f014 fc97 	bl	8018364 <siprintf>
  index = strlen(message);
 8003a36:	4b62      	ldr	r3, [pc, #392]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f7fc fb65 	bl	8000108 <strlen>
 8003a3e:	0002      	movs	r2, r0
 8003a40:	1d3b      	adds	r3, r7, #4
 8003a42:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003a44:	4a54      	ldr	r2, [pc, #336]	@ (8003b98 <CreateMessage+0x280>)
 8003a46:	4b60      	ldr	r3, [pc, #384]	@ (8003bc8 <CreateMessage+0x2b0>)
 8003a48:	0011      	movs	r1, r2
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f7ff ff40 	bl	80038d0 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dBc\"},", uid[2], (char*)nameConfig, Buffer, dBC);
 8003a50:	1d3b      	adds	r3, r7, #4
 8003a52:	881a      	ldrh	r2, [r3, #0]
 8003a54:	4b5a      	ldr	r3, [pc, #360]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003a56:	18d4      	adds	r4, r2, r3
 8003a58:	4b5c      	ldr	r3, [pc, #368]	@ (8003bcc <CreateMessage+0x2b4>)
 8003a5a:	689d      	ldr	r5, [r3, #8]
 8003a5c:	4b60      	ldr	r3, [pc, #384]	@ (8003be0 <CreateMessage+0x2c8>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	1c18      	adds	r0, r3, #0
 8003a62:	f7ff fc7d 	bl	8003360 <__aeabi_f2d>
 8003a66:	0002      	movs	r2, r0
 8003a68:	000b      	movs	r3, r1
 8003a6a:	4853      	ldr	r0, [pc, #332]	@ (8003bb8 <CreateMessage+0x2a0>)
 8003a6c:	495d      	ldr	r1, [pc, #372]	@ (8003be4 <CreateMessage+0x2cc>)
 8003a6e:	9202      	str	r2, [sp, #8]
 8003a70:	9303      	str	r3, [sp, #12]
 8003a72:	4b55      	ldr	r3, [pc, #340]	@ (8003bc8 <CreateMessage+0x2b0>)
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	0003      	movs	r3, r0
 8003a78:	002a      	movs	r2, r5
 8003a7a:	0020      	movs	r0, r4
 8003a7c:	f014 fc72 	bl	8018364 <siprintf>
  index = strlen(message);
 8003a80:	4b4f      	ldr	r3, [pc, #316]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003a82:	0018      	movs	r0, r3
 8003a84:	f7fc fb40 	bl	8000108 <strlen>
 8003a88:	0002      	movs	r2, r0
 8003a8a:	1d3b      	adds	r3, r7, #4
 8003a8c:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003a8e:	4a44      	ldr	r2, [pc, #272]	@ (8003ba0 <CreateMessage+0x288>)
 8003a90:	4b4d      	ldr	r3, [pc, #308]	@ (8003bc8 <CreateMessage+0x2b0>)
 8003a92:	0011      	movs	r1, r2
 8003a94:	0018      	movs	r0, r3
 8003a96:	f7ff ff1b 	bl	80038d0 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003a9a:	1d3b      	adds	r3, r7, #4
 8003a9c:	881a      	ldrh	r2, [r3, #0]
 8003a9e:	4b48      	ldr	r3, [pc, #288]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003aa0:	18d0      	adds	r0, r2, r3
 8003aa2:	4b4a      	ldr	r3, [pc, #296]	@ (8003bcc <CreateMessage+0x2b4>)
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	4b50      	ldr	r3, [pc, #320]	@ (8003be8 <CreateMessage+0x2d0>)
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	4c43      	ldr	r4, [pc, #268]	@ (8003bb8 <CreateMessage+0x2a0>)
 8003aac:	494f      	ldr	r1, [pc, #316]	@ (8003bec <CreateMessage+0x2d4>)
 8003aae:	9301      	str	r3, [sp, #4]
 8003ab0:	4b45      	ldr	r3, [pc, #276]	@ (8003bc8 <CreateMessage+0x2b0>)
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	0023      	movs	r3, r4
 8003ab6:	f014 fc55 	bl	8018364 <siprintf>
  index = strlen(message);
 8003aba:	4b41      	ldr	r3, [pc, #260]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003abc:	0018      	movs	r0, r3
 8003abe:	f7fc fb23 	bl	8000108 <strlen>
 8003ac2:	0002      	movs	r2, r0
 8003ac4:	1d3b      	adds	r3, r7, #4
 8003ac6:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, batteryConfig);
 8003ac8:	4a37      	ldr	r2, [pc, #220]	@ (8003ba8 <CreateMessage+0x290>)
 8003aca:	4b3f      	ldr	r3, [pc, #252]	@ (8003bc8 <CreateMessage+0x2b0>)
 8003acc:	0011      	movs	r1, r2
 8003ace:	0018      	movs	r0, r3
 8003ad0:	f7ff fefe 	bl	80038d0 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003ad4:	1d3b      	adds	r3, r7, #4
 8003ad6:	881a      	ldrh	r2, [r3, #0]
 8003ad8:	4b39      	ldr	r3, [pc, #228]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003ada:	18d4      	adds	r4, r2, r3
 8003adc:	4b3b      	ldr	r3, [pc, #236]	@ (8003bcc <CreateMessage+0x2b4>)
 8003ade:	689d      	ldr	r5, [r3, #8]
 8003ae0:	4b43      	ldr	r3, [pc, #268]	@ (8003bf0 <CreateMessage+0x2d8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	1c18      	adds	r0, r3, #0
 8003ae6:	f7ff fc3b 	bl	8003360 <__aeabi_f2d>
 8003aea:	0002      	movs	r2, r0
 8003aec:	000b      	movs	r3, r1
 8003aee:	4832      	ldr	r0, [pc, #200]	@ (8003bb8 <CreateMessage+0x2a0>)
 8003af0:	4940      	ldr	r1, [pc, #256]	@ (8003bf4 <CreateMessage+0x2dc>)
 8003af2:	9202      	str	r2, [sp, #8]
 8003af4:	9303      	str	r3, [sp, #12]
 8003af6:	4b34      	ldr	r3, [pc, #208]	@ (8003bc8 <CreateMessage+0x2b0>)
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	0003      	movs	r3, r0
 8003afc:	002a      	movs	r2, r5
 8003afe:	0020      	movs	r0, r4
 8003b00:	f014 fc30 	bl	8018364 <siprintf>
  index = strlen(message);
 8003b04:	4b2e      	ldr	r3, [pc, #184]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003b06:	0018      	movs	r0, r3
 8003b08:	f7fc fafe 	bl	8000108 <strlen>
 8003b0c:	0002      	movs	r2, r0
 8003b0e:	1d3b      	adds	r3, r7, #4
 8003b10:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, solarConfig);
 8003b12:	4a27      	ldr	r2, [pc, #156]	@ (8003bb0 <CreateMessage+0x298>)
 8003b14:	4b2c      	ldr	r3, [pc, #176]	@ (8003bc8 <CreateMessage+0x2b0>)
 8003b16:	0011      	movs	r1, r2
 8003b18:	0018      	movs	r0, r3
 8003b1a:	f7ff fed9 	bl	80038d0 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003b1e:	1d3b      	adds	r3, r7, #4
 8003b20:	881a      	ldrh	r2, [r3, #0]
 8003b22:	4b27      	ldr	r3, [pc, #156]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003b24:	18d4      	adds	r4, r2, r3
 8003b26:	4b29      	ldr	r3, [pc, #164]	@ (8003bcc <CreateMessage+0x2b4>)
 8003b28:	689d      	ldr	r5, [r3, #8]
 8003b2a:	4b33      	ldr	r3, [pc, #204]	@ (8003bf8 <CreateMessage+0x2e0>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	1c18      	adds	r0, r3, #0
 8003b30:	f7ff fc16 	bl	8003360 <__aeabi_f2d>
 8003b34:	0002      	movs	r2, r0
 8003b36:	000b      	movs	r3, r1
 8003b38:	481f      	ldr	r0, [pc, #124]	@ (8003bb8 <CreateMessage+0x2a0>)
 8003b3a:	4930      	ldr	r1, [pc, #192]	@ (8003bfc <CreateMessage+0x2e4>)
 8003b3c:	9202      	str	r2, [sp, #8]
 8003b3e:	9303      	str	r3, [sp, #12]
 8003b40:	4b21      	ldr	r3, [pc, #132]	@ (8003bc8 <CreateMessage+0x2b0>)
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	0003      	movs	r3, r0
 8003b46:	002a      	movs	r2, r5
 8003b48:	0020      	movs	r0, r4
 8003b4a:	f014 fc0b 	bl	8018364 <siprintf>
  index = strlen(message);
 8003b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003b50:	0018      	movs	r0, r3
 8003b52:	f7fc fad9 	bl	8000108 <strlen>
 8003b56:	0002      	movs	r2, r0
 8003b58:	1d3b      	adds	r3, r7, #4
 8003b5a:	801a      	strh	r2, [r3, #0]

  index = sprintf(&message[index], "]");
 8003b5c:	1d3b      	adds	r3, r7, #4
 8003b5e:	881a      	ldrh	r2, [r3, #0]
 8003b60:	4b17      	ldr	r3, [pc, #92]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003b62:	18d3      	adds	r3, r2, r3
 8003b64:	4a26      	ldr	r2, [pc, #152]	@ (8003c00 <CreateMessage+0x2e8>)
 8003b66:	0011      	movs	r1, r2
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f014 fbfb 	bl	8018364 <siprintf>
 8003b6e:	0002      	movs	r2, r0
 8003b70:	1d3b      	adds	r3, r7, #4
 8003b72:	801a      	strh	r2, [r3, #0]

  return strlen(message);
 8003b74:	4b12      	ldr	r3, [pc, #72]	@ (8003bc0 <CreateMessage+0x2a8>)
 8003b76:	0018      	movs	r0, r3
 8003b78:	f7fc fac6 	bl	8000108 <strlen>
 8003b7c:	0003      	movs	r3, r0
 8003b7e:	b29b      	uxth	r3, r3
}
 8003b80:	0018      	movs	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b002      	add	sp, #8
 8003b86:	bdb0      	pop	{r4, r5, r7, pc}
 8003b88:	20000b38 	.word	0x20000b38
 8003b8c:	0808000c 	.word	0x0808000c
 8003b90:	20000b44 	.word	0x20000b44
 8003b94:	08080018 	.word	0x08080018
 8003b98:	20000b50 	.word	0x20000b50
 8003b9c:	08080048 	.word	0x08080048
 8003ba0:	20000b5c 	.word	0x20000b5c
 8003ba4:	08080030 	.word	0x08080030
 8003ba8:	20000b68 	.word	0x20000b68
 8003bac:	0808006c 	.word	0x0808006c
 8003bb0:	20000b74 	.word	0x20000b74
 8003bb4:	08080078 	.word	0x08080078
 8003bb8:	20000b80 	.word	0x20000b80
 8003bbc:	08080090 	.word	0x08080090
 8003bc0:	2000051c 	.word	0x2000051c
 8003bc4:	0801b328 	.word	0x0801b328
 8003bc8:	20000ba0 	.word	0x20000ba0
 8003bcc:	200004f8 	.word	0x200004f8
 8003bd0:	20000504 	.word	0x20000504
 8003bd4:	0801b32c 	.word	0x0801b32c
 8003bd8:	20000508 	.word	0x20000508
 8003bdc:	0801b380 	.word	0x0801b380
 8003be0:	20000518 	.word	0x20000518
 8003be4:	0801b3d8 	.word	0x0801b3d8
 8003be8:	20000514 	.word	0x20000514
 8003bec:	0801b430 	.word	0x0801b430
 8003bf0:	2000050c 	.word	0x2000050c
 8003bf4:	0801b484 	.word	0x0801b484
 8003bf8:	20000510 	.word	0x20000510
 8003bfc:	0801b4e4 	.word	0x0801b4e4
 8003c00:	0801b540 	.word	0x0801b540

08003c04 <SetCommandBuffer>:

void SetCommandBuffer(const char* command) {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
 8003c0c:	2380      	movs	r3, #128	@ 0x80
 8003c0e:	009a      	lsls	r2, r3, #2
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	4b05      	ldr	r3, [pc, #20]	@ (8003c28 <SetCommandBuffer+0x24>)
 8003c14:	0018      	movs	r0, r3
 8003c16:	f014 fc5f 	bl	80184d8 <strncpy>
    CommandEchoed = false; // Reset the flag when a new command is sent
 8003c1a:	4b04      	ldr	r3, [pc, #16]	@ (8003c2c <SetCommandBuffer+0x28>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	701a      	strb	r2, [r3, #0]
}
 8003c20:	46c0      	nop			@ (mov r8, r8)
 8003c22:	46bd      	mov	sp, r7
 8003c24:	b002      	add	sp, #8
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	20000930 	.word	0x20000930
 8003c2c:	20000b30 	.word	0x20000b30

08003c30 <StartProg>:
void StartProg(){
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8003c34:	2064      	movs	r0, #100	@ 0x64
 8003c36:	f006 fb09 	bl	800a24c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003c3a:	4b15      	ldr	r3, [pc, #84]	@ (8003c90 <StartProg+0x60>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	2101      	movs	r1, #1
 8003c40:	0018      	movs	r0, r3
 8003c42:	f007 fe98 	bl	800b976 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003c46:	2064      	movs	r0, #100	@ 0x64
 8003c48:	f006 fb00 	bl	800a24c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003c4c:	4b10      	ldr	r3, [pc, #64]	@ (8003c90 <StartProg+0x60>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	2102      	movs	r1, #2
 8003c52:	0018      	movs	r0, r3
 8003c54:	f007 fe8f 	bl	800b976 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003c58:	23fa      	movs	r3, #250	@ 0xfa
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f006 faf5 	bl	800a24c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003c62:	4b0b      	ldr	r3, [pc, #44]	@ (8003c90 <StartProg+0x60>)
 8003c64:	2201      	movs	r2, #1
 8003c66:	2101      	movs	r1, #1
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f007 fe84 	bl	800b976 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003c6e:	23fa      	movs	r3, #250	@ 0xfa
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	0018      	movs	r0, r3
 8003c74:	f006 faea 	bl	800a24c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8003c78:	4b05      	ldr	r3, [pc, #20]	@ (8003c90 <StartProg+0x60>)
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	2102      	movs	r1, #2
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f007 fe79 	bl	800b976 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8003c84:	2028      	movs	r0, #40	@ 0x28
 8003c86:	f006 fae1 	bl	800a24c <HAL_Delay>
}
 8003c8a:	46c0      	nop			@ (mov r8, r8)
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	50001c00 	.word	0x50001c00

08003c94 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8003c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c96:	46c6      	mov	lr, r8
 8003c98:	b500      	push	{lr}
 8003c9a:	b09a      	sub	sp, #104	@ 0x68
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	61f8      	str	r0, [r7, #28]
 8003ca0:	0008      	movs	r0, r1
 8003ca2:	0011      	movs	r1, r2
 8003ca4:	261a      	movs	r6, #26
 8003ca6:	19bb      	adds	r3, r7, r6
 8003ca8:	1c02      	adds	r2, r0, #0
 8003caa:	801a      	strh	r2, [r3, #0]
 8003cac:	2319      	movs	r3, #25
 8003cae:	18fb      	adds	r3, r7, r3
 8003cb0:	1c0a      	adds	r2, r1, #0
 8003cb2:	701a      	strb	r2, [r3, #0]
 8003cb4:	466b      	mov	r3, sp
 8003cb6:	4698      	mov	r8, r3
  char tempBuf[len+1];
 8003cb8:	19bb      	adds	r3, r7, r6
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	1e5a      	subs	r2, r3, #1
 8003cc0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003cc2:	001a      	movs	r2, r3
 8003cc4:	60ba      	str	r2, [r7, #8]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	60fa      	str	r2, [r7, #12]
 8003cca:	68b8      	ldr	r0, [r7, #8]
 8003ccc:	68f9      	ldr	r1, [r7, #12]
 8003cce:	0002      	movs	r2, r0
 8003cd0:	0f52      	lsrs	r2, r2, #29
 8003cd2:	000e      	movs	r6, r1
 8003cd4:	00f6      	lsls	r6, r6, #3
 8003cd6:	617e      	str	r6, [r7, #20]
 8003cd8:	697e      	ldr	r6, [r7, #20]
 8003cda:	4316      	orrs	r6, r2
 8003cdc:	617e      	str	r6, [r7, #20]
 8003cde:	0002      	movs	r2, r0
 8003ce0:	00d2      	lsls	r2, r2, #3
 8003ce2:	613a      	str	r2, [r7, #16]
 8003ce4:	001a      	movs	r2, r3
 8003ce6:	603a      	str	r2, [r7, #0]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	6838      	ldr	r0, [r7, #0]
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	0002      	movs	r2, r0
 8003cf2:	0f52      	lsrs	r2, r2, #29
 8003cf4:	000e      	movs	r6, r1
 8003cf6:	00f5      	lsls	r5, r6, #3
 8003cf8:	4315      	orrs	r5, r2
 8003cfa:	0002      	movs	r2, r0
 8003cfc:	00d4      	lsls	r4, r2, #3
 8003cfe:	3307      	adds	r3, #7
 8003d00:	08db      	lsrs	r3, r3, #3
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	466a      	mov	r2, sp
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	469d      	mov	sp, r3
 8003d0a:	466b      	mov	r3, sp
 8003d0c:	3300      	adds	r3, #0
 8003d0e:	65bb      	str	r3, [r7, #88]	@ 0x58
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003d10:	234f      	movs	r3, #79	@ 0x4f
 8003d12:	2118      	movs	r1, #24
 8003d14:	185b      	adds	r3, r3, r1
 8003d16:	19db      	adds	r3, r3, r7
 8003d18:	2203      	movs	r2, #3
 8003d1a:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003d1c:	234c      	movs	r3, #76	@ 0x4c
 8003d1e:	185b      	adds	r3, r3, r1
 8003d20:	19db      	adds	r3, r3, r7
 8003d22:	2200      	movs	r2, #0
 8003d24:	801a      	strh	r2, [r3, #0]
 8003d26:	e013      	b.n	8003d50 <ParseBuffer+0xbc>
    tempBuf[i] = (char)buffer[i];
 8003d28:	204c      	movs	r0, #76	@ 0x4c
 8003d2a:	2418      	movs	r4, #24
 8003d2c:	1903      	adds	r3, r0, r4
 8003d2e:	19db      	adds	r3, r3, r7
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	69fa      	ldr	r2, [r7, #28]
 8003d34:	18d2      	adds	r2, r2, r3
 8003d36:	1903      	adds	r3, r0, r4
 8003d38:	19db      	adds	r3, r3, r7
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	7811      	ldrb	r1, [r2, #0]
 8003d3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d40:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8003d42:	1903      	adds	r3, r0, r4
 8003d44:	19db      	adds	r3, r3, r7
 8003d46:	881a      	ldrh	r2, [r3, #0]
 8003d48:	1903      	adds	r3, r0, r4
 8003d4a:	19db      	adds	r3, r3, r7
 8003d4c:	3201      	adds	r2, #1
 8003d4e:	801a      	strh	r2, [r3, #0]
 8003d50:	234c      	movs	r3, #76	@ 0x4c
 8003d52:	2018      	movs	r0, #24
 8003d54:	181b      	adds	r3, r3, r0
 8003d56:	19da      	adds	r2, r3, r7
 8003d58:	211a      	movs	r1, #26
 8003d5a:	187b      	adds	r3, r7, r1
 8003d5c:	8812      	ldrh	r2, [r2, #0]
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d3e1      	bcc.n	8003d28 <ParseBuffer+0x94>
  }
  tempBuf[len] = '\0';
 8003d64:	187b      	adds	r3, r7, r1
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	54d1      	strb	r1, [r2, r3]
  char TestChar = 'N';
 8003d6e:	233f      	movs	r3, #63	@ 0x3f
 8003d70:	0006      	movs	r6, r0
 8003d72:	199b      	adds	r3, r3, r6
 8003d74:	19db      	adds	r3, r3, r7
 8003d76:	224e      	movs	r2, #78	@ 0x4e
 8003d78:	701a      	strb	r2, [r3, #0]
  char * ParsePoint;
  char * ParsePoint2;
  char * ParsePoint3;
  char * ParsePoint4;
  const char OK[] = AT_RESPONSE_OK;
 8003d7a:	252c      	movs	r5, #44	@ 0x2c
 8003d7c:	19ab      	adds	r3, r5, r6
 8003d7e:	19db      	adds	r3, r3, r7
 8003d80:	4a6b      	ldr	r2, [pc, #428]	@ (8003f30 <ParseBuffer+0x29c>)
 8003d82:	8811      	ldrh	r1, [r2, #0]
 8003d84:	8019      	strh	r1, [r3, #0]
 8003d86:	7892      	ldrb	r2, [r2, #2]
 8003d88:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8003d8a:	2324      	movs	r3, #36	@ 0x24
 8003d8c:	199b      	adds	r3, r3, r6
 8003d8e:	19db      	adds	r3, r3, r7
 8003d90:	4a68      	ldr	r2, [pc, #416]	@ (8003f34 <ParseBuffer+0x2a0>)
 8003d92:	6811      	ldr	r1, [r2, #0]
 8003d94:	6019      	str	r1, [r3, #0]
 8003d96:	8892      	ldrh	r2, [r2, #4]
 8003d98:	809a      	strh	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8003d9a:	231c      	movs	r3, #28
 8003d9c:	199b      	adds	r3, r3, r6
 8003d9e:	19db      	adds	r3, r3, r7
 8003da0:	4a65      	ldr	r2, [pc, #404]	@ (8003f38 <ParseBuffer+0x2a4>)
 8003da2:	6811      	ldr	r1, [r2, #0]
 8003da4:	6019      	str	r1, [r3, #0]
 8003da6:	8892      	ldrh	r2, [r2, #4]
 8003da8:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8003daa:	2318      	movs	r3, #24
 8003dac:	199b      	adds	r3, r3, r6
 8003dae:	19db      	adds	r3, r3, r7
 8003db0:	223e      	movs	r2, #62	@ 0x3e
 8003db2:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8003db4:	2308      	movs	r3, #8
 8003db6:	199b      	adds	r3, r3, r6
 8003db8:	19db      	adds	r3, r3, r7
 8003dba:	4a60      	ldr	r2, [pc, #384]	@ (8003f3c <ParseBuffer+0x2a8>)
 8003dbc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003dbe:	c313      	stmia	r3!, {r0, r1, r4}
 8003dc0:	8811      	ldrh	r1, [r2, #0]
 8003dc2:	8019      	strh	r1, [r3, #0]
 8003dc4:	7892      	ldrb	r2, [r2, #2]
 8003dc6:	709a      	strb	r2, [r3, #2]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8003dc8:	2319      	movs	r3, #25
 8003dca:	18fb      	adds	r3, r7, r3
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d108      	bne.n	8003de4 <ParseBuffer+0x150>
    ParsePoint = strstr(tempBuf, OK);
 8003dd2:	19ab      	adds	r3, r5, r6
 8003dd4:	19da      	adds	r2, r3, r7
 8003dd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dd8:	0011      	movs	r1, r2
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f014 fb90 	bl	8018500 <strstr>
 8003de0:	0003      	movs	r3, r0
 8003de2:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8003de4:	2319      	movs	r3, #25
 8003de6:	18fb      	adds	r3, r7, r3
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d10a      	bne.n	8003e04 <ParseBuffer+0x170>
    ParsePoint = strstr(tempBuf, ready);
 8003dee:	231c      	movs	r3, #28
 8003df0:	2218      	movs	r2, #24
 8003df2:	189b      	adds	r3, r3, r2
 8003df4:	19da      	adds	r2, r3, r7
 8003df6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003df8:	0011      	movs	r1, r2
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f014 fb80 	bl	8018500 <strstr>
 8003e00:	0003      	movs	r3, r0
 8003e02:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8003e04:	2319      	movs	r3, #25
 8003e06:	18fb      	adds	r3, r7, r3
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d10a      	bne.n	8003e24 <ParseBuffer+0x190>
    ParsePoint = strstr(tempBuf, start);
 8003e0e:	2318      	movs	r3, #24
 8003e10:	2218      	movs	r2, #24
 8003e12:	189b      	adds	r3, r3, r2
 8003e14:	19da      	adds	r2, r3, r7
 8003e16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e18:	0011      	movs	r1, r2
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	f014 fb70 	bl	8018500 <strstr>
 8003e20:	0003      	movs	r3, r0
 8003e22:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  ParsePoint2 = strstr(tempBuf, ERROR);
 8003e24:	2324      	movs	r3, #36	@ 0x24
 8003e26:	2418      	movs	r4, #24
 8003e28:	191b      	adds	r3, r3, r4
 8003e2a:	19da      	adds	r2, r3, r7
 8003e2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e2e:	0011      	movs	r1, r2
 8003e30:	0018      	movs	r0, r3
 8003e32:	f014 fb65 	bl	8018500 <strstr>
 8003e36:	0003      	movs	r3, r0
 8003e38:	653b      	str	r3, [r7, #80]	@ 0x50
  ParsePoint3 = strstr(tempBuf, WIFI);
 8003e3a:	2308      	movs	r3, #8
 8003e3c:	191b      	adds	r3, r3, r4
 8003e3e:	19da      	adds	r2, r3, r7
 8003e40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e42:	0011      	movs	r1, r2
 8003e44:	0018      	movs	r0, r3
 8003e46:	f014 fb5b 	bl	8018500 <strstr>
 8003e4a:	0003      	movs	r3, r0
 8003e4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8003e4e:	4a3c      	ldr	r2, [pc, #240]	@ (8003f40 <ParseBuffer+0x2ac>)
 8003e50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e52:	0011      	movs	r1, r2
 8003e54:	0018      	movs	r0, r3
 8003e56:	f014 fb53 	bl	8018500 <strstr>
 8003e5a:	0003      	movs	r3, r0
 8003e5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if(len > 1 ){
 8003e5e:	231a      	movs	r3, #26
 8003e60:	18fb      	adds	r3, r7, r3
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d957      	bls.n	8003f18 <ParseBuffer+0x284>
    TestChar = *ParsePoint;
 8003e68:	213f      	movs	r1, #63	@ 0x3f
 8003e6a:	190b      	adds	r3, r1, r4
 8003e6c:	19db      	adds	r3, r3, r7
 8003e6e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003e70:	7812      	ldrb	r2, [r2, #0]
 8003e72:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'O'){
 8003e74:	190b      	adds	r3, r1, r4
 8003e76:	19db      	adds	r3, r3, r7
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b4f      	cmp	r3, #79	@ 0x4f
 8003e7c:	d104      	bne.n	8003e88 <ParseBuffer+0x1f4>
      status = RECEIVE_STATUS_OK;
 8003e7e:	234f      	movs	r3, #79	@ 0x4f
 8003e80:	191b      	adds	r3, r3, r4
 8003e82:	19db      	adds	r3, r3, r7
 8003e84:	2200      	movs	r2, #0
 8003e86:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == 'r'){
 8003e88:	233f      	movs	r3, #63	@ 0x3f
 8003e8a:	2218      	movs	r2, #24
 8003e8c:	189b      	adds	r3, r3, r2
 8003e8e:	19db      	adds	r3, r3, r7
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b72      	cmp	r3, #114	@ 0x72
 8003e94:	d104      	bne.n	8003ea0 <ParseBuffer+0x20c>
      status = RECEIVE_STATUS_READY;
 8003e96:	234f      	movs	r3, #79	@ 0x4f
 8003e98:	189b      	adds	r3, r3, r2
 8003e9a:	19db      	adds	r3, r3, r7
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == '>'){
 8003ea0:	233f      	movs	r3, #63	@ 0x3f
 8003ea2:	2218      	movs	r2, #24
 8003ea4:	189b      	adds	r3, r3, r2
 8003ea6:	19db      	adds	r3, r3, r7
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	2b3e      	cmp	r3, #62	@ 0x3e
 8003eac:	d104      	bne.n	8003eb8 <ParseBuffer+0x224>
      status = RECEIVE_STATUS_START;
 8003eae:	234f      	movs	r3, #79	@ 0x4f
 8003eb0:	189b      	adds	r3, r3, r2
 8003eb2:	19db      	adds	r3, r3, r7
 8003eb4:	2205      	movs	r2, #5
 8003eb6:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint2;
 8003eb8:	213f      	movs	r1, #63	@ 0x3f
 8003eba:	2018      	movs	r0, #24
 8003ebc:	180b      	adds	r3, r1, r0
 8003ebe:	19db      	adds	r3, r3, r7
 8003ec0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003ec2:	7812      	ldrb	r2, [r2, #0]
 8003ec4:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'E'){
 8003ec6:	0002      	movs	r2, r0
 8003ec8:	188b      	adds	r3, r1, r2
 8003eca:	19db      	adds	r3, r3, r7
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	2b45      	cmp	r3, #69	@ 0x45
 8003ed0:	d104      	bne.n	8003edc <ParseBuffer+0x248>
      status = RECEIVE_STATUS_ERROR;
 8003ed2:	234f      	movs	r3, #79	@ 0x4f
 8003ed4:	189b      	adds	r3, r3, r2
 8003ed6:	19db      	adds	r3, r3, r7
 8003ed8:	2201      	movs	r2, #1
 8003eda:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint3;
 8003edc:	213f      	movs	r1, #63	@ 0x3f
 8003ede:	2018      	movs	r0, #24
 8003ee0:	180b      	adds	r3, r1, r0
 8003ee2:	19db      	adds	r3, r3, r7
 8003ee4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ee6:	7812      	ldrb	r2, [r2, #0]
 8003ee8:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'W'){
 8003eea:	180b      	adds	r3, r1, r0
 8003eec:	19db      	adds	r3, r3, r7
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b57      	cmp	r3, #87	@ 0x57
 8003ef2:	d102      	bne.n	8003efa <ParseBuffer+0x266>
      ConnectionMade = true;
 8003ef4:	4b13      	ldr	r3, [pc, #76]	@ (8003f44 <ParseBuffer+0x2b0>)
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint4;
 8003efa:	213f      	movs	r1, #63	@ 0x3f
 8003efc:	2018      	movs	r0, #24
 8003efe:	180b      	adds	r3, r1, r0
 8003f00:	19db      	adds	r3, r3, r7
 8003f02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f04:	7812      	ldrb	r2, [r2, #0]
 8003f06:	701a      	strb	r2, [r3, #0]
    if(TestChar == '2'){
 8003f08:	180b      	adds	r3, r1, r0
 8003f0a:	19db      	adds	r3, r3, r7
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b32      	cmp	r3, #50	@ 0x32
 8003f10:	d102      	bne.n	8003f18 <ParseBuffer+0x284>
      beurs = true;
 8003f12:	4b0d      	ldr	r3, [pc, #52]	@ (8003f48 <ParseBuffer+0x2b4>)
 8003f14:	2201      	movs	r2, #1
 8003f16:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8003f18:	234f      	movs	r3, #79	@ 0x4f
 8003f1a:	2218      	movs	r2, #24
 8003f1c:	189b      	adds	r3, r3, r2
 8003f1e:	19db      	adds	r3, r3, r7
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	46c5      	mov	sp, r8

}
 8003f24:	0018      	movs	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	b01a      	add	sp, #104	@ 0x68
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	46b8      	mov	r8, r7
 8003f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f30:	0801b544 	.word	0x0801b544
 8003f34:	0801b548 	.word	0x0801b548
 8003f38:	0801b550 	.word	0x0801b550
 8003f3c:	0801b558 	.word	0x0801b558
 8003f40:	0801beec 	.word	0x0801beec
 8003f44:	200004f3 	.word	0x200004f3
 8003f48:	200004f5 	.word	0x200004f5

08003f4c <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8003f52:	4b0d      	ldr	r3, [pc, #52]	@ (8003f88 <PollAwake+0x3c>)
 8003f54:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f7ff fe53 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	0018      	movs	r0, r3
 8003f62:	f7fc f8d1 	bl	8000108 <strlen>
 8003f66:	0003      	movs	r3, r0
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	0011      	movs	r1, r2
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f7ff fc18 	bl	80037a4 <ESP_Send>
 8003f74:	1e03      	subs	r3, r0, #0
 8003f76:	d001      	beq.n	8003f7c <PollAwake+0x30>
    return true;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <PollAwake+0x32>
  }
  else{
    return false;
 8003f7c:	2300      	movs	r3, #0
  }
}
 8003f7e:	0018      	movs	r0, r3
 8003f80:	46bd      	mov	sp, r7
 8003f82:	b002      	add	sp, #8
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	46c0      	nop			@ (mov r8, r8)
 8003f88:	0801b568 	.word	0x0801b568

08003f8c <RFPower>:
bool RFPower(){
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8003f92:	4b0d      	ldr	r3, [pc, #52]	@ (8003fc8 <RFPower+0x3c>)
 8003f94:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f7ff fe33 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	f7fc f8b1 	bl	8000108 <strlen>
 8003fa6:	0003      	movs	r3, r0
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	0011      	movs	r1, r2
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f7ff fbf8 	bl	80037a4 <ESP_Send>
 8003fb4:	1e03      	subs	r3, r0, #0
 8003fb6:	d001      	beq.n	8003fbc <RFPower+0x30>
    return true;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <RFPower+0x32>
  }
  else{
    return false;
 8003fbc:	2300      	movs	r3, #0
  }
}
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	b002      	add	sp, #8
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	46c0      	nop			@ (mov r8, r8)
 8003fc8:	0801b570 	.word	0x0801b570

08003fcc <CheckRFPower>:
bool CheckRFPower(){
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8003fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004008 <CheckRFPower+0x3c>)
 8003fd4:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f7ff fe13 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f7fc f891 	bl	8000108 <strlen>
 8003fe6:	0003      	movs	r3, r0
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	0011      	movs	r1, r2
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f7ff fbd8 	bl	80037a4 <ESP_Send>
 8003ff4:	1e03      	subs	r3, r0, #0
 8003ff6:	d001      	beq.n	8003ffc <CheckRFPower+0x30>
    return true;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <CheckRFPower+0x32>
  }
  else{
    return false;
 8003ffc:	2300      	movs	r3, #0
  }
}
 8003ffe:	0018      	movs	r0, r3
 8004000:	46bd      	mov	sp, r7
 8004002:	b002      	add	sp, #8
 8004004:	bd80      	pop	{r7, pc}
 8004006:	46c0      	nop			@ (mov r8, r8)
 8004008:	0801b580 	.word	0x0801b580

0800400c <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8004012:	4b0d      	ldr	r3, [pc, #52]	@ (8004048 <ATRestore+0x3c>)
 8004014:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	0018      	movs	r0, r3
 800401a:	f7ff fdf3 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	0018      	movs	r0, r3
 8004022:	f7fc f871 	bl	8000108 <strlen>
 8004026:	0003      	movs	r3, r0
 8004028:	b29a      	uxth	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	0011      	movs	r1, r2
 800402e:	0018      	movs	r0, r3
 8004030:	f7ff fbb8 	bl	80037a4 <ESP_Send>
 8004034:	1e03      	subs	r3, r0, #0
 8004036:	d001      	beq.n	800403c <ATRestore+0x30>
    return true;
 8004038:	2301      	movs	r3, #1
 800403a:	e000      	b.n	800403e <ATRestore+0x32>
  }
  else{
    return false;
 800403c:	2300      	movs	r3, #0
  }
}
 800403e:	0018      	movs	r0, r3
 8004040:	46bd      	mov	sp, r7
 8004042:	b002      	add	sp, #8
 8004044:	bd80      	pop	{r7, pc}
 8004046:	46c0      	nop			@ (mov r8, r8)
 8004048:	0801b590 	.word	0x0801b590

0800404c <CWINIT>:
bool CWINIT(){
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8004052:	4b0d      	ldr	r3, [pc, #52]	@ (8004088 <CWINIT+0x3c>)
 8004054:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	0018      	movs	r0, r3
 800405a:	f7ff fdd3 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	0018      	movs	r0, r3
 8004062:	f7fc f851 	bl	8000108 <strlen>
 8004066:	0003      	movs	r3, r0
 8004068:	b29a      	uxth	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	0011      	movs	r1, r2
 800406e:	0018      	movs	r0, r3
 8004070:	f7ff fb98 	bl	80037a4 <ESP_Send>
 8004074:	1e03      	subs	r3, r0, #0
 8004076:	d001      	beq.n	800407c <CWINIT+0x30>
    return true;
 8004078:	2301      	movs	r3, #1
 800407a:	e000      	b.n	800407e <CWINIT+0x32>
  }
  else{
    return false;
 800407c:	2300      	movs	r3, #0
  }
}
 800407e:	0018      	movs	r0, r3
 8004080:	46bd      	mov	sp, r7
 8004082:	b002      	add	sp, #8
 8004084:	bd80      	pop	{r7, pc}
 8004086:	46c0      	nop			@ (mov r8, r8)
 8004088:	0801b5a0 	.word	0x0801b5a0

0800408c <CWMODE1>:
bool CWMODE1(){
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8004092:	4b0d      	ldr	r3, [pc, #52]	@ (80040c8 <CWMODE1+0x3c>)
 8004094:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	0018      	movs	r0, r3
 800409a:	f7ff fdb3 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	0018      	movs	r0, r3
 80040a2:	f7fc f831 	bl	8000108 <strlen>
 80040a6:	0003      	movs	r3, r0
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	0011      	movs	r1, r2
 80040ae:	0018      	movs	r0, r3
 80040b0:	f7ff fb78 	bl	80037a4 <ESP_Send>
 80040b4:	1e03      	subs	r3, r0, #0
 80040b6:	d001      	beq.n	80040bc <CWMODE1+0x30>
    return true;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <CWMODE1+0x32>
  }
  else{
    return false;
 80040bc:	2300      	movs	r3, #0
  }
}
 80040be:	0018      	movs	r0, r3
 80040c0:	46bd      	mov	sp, r7
 80040c2:	b002      	add	sp, #8
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	46c0      	nop			@ (mov r8, r8)
 80040c8:	0801b5b0 	.word	0x0801b5b0

080040cc <CWMODE2>:
bool CWMODE2(){
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 80040d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004108 <CWMODE2+0x3c>)
 80040d4:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	0018      	movs	r0, r3
 80040da:	f7ff fd93 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	0018      	movs	r0, r3
 80040e2:	f7fc f811 	bl	8000108 <strlen>
 80040e6:	0003      	movs	r3, r0
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	0011      	movs	r1, r2
 80040ee:	0018      	movs	r0, r3
 80040f0:	f7ff fb58 	bl	80037a4 <ESP_Send>
 80040f4:	1e03      	subs	r3, r0, #0
 80040f6:	d001      	beq.n	80040fc <CWMODE2+0x30>
    return true;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e000      	b.n	80040fe <CWMODE2+0x32>
  }
  else{
    return false;
 80040fc:	2300      	movs	r3, #0
  }
}
 80040fe:	0018      	movs	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	b002      	add	sp, #8
 8004104:	bd80      	pop	{r7, pc}
 8004106:	46c0      	nop			@ (mov r8, r8)
 8004108:	0801b5c0 	.word	0x0801b5c0

0800410c <CWAUTOCONN>:
bool CWAUTOCONN(){
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8004112:	4b0d      	ldr	r3, [pc, #52]	@ (8004148 <CWAUTOCONN+0x3c>)
 8004114:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	0018      	movs	r0, r3
 800411a:	f7ff fd73 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	0018      	movs	r0, r3
 8004122:	f7fb fff1 	bl	8000108 <strlen>
 8004126:	0003      	movs	r3, r0
 8004128:	b29a      	uxth	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	0011      	movs	r1, r2
 800412e:	0018      	movs	r0, r3
 8004130:	f7ff fb38 	bl	80037a4 <ESP_Send>
 8004134:	1e03      	subs	r3, r0, #0
 8004136:	d001      	beq.n	800413c <CWAUTOCONN+0x30>
    return true;
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <CWAUTOCONN+0x32>
  }
  else{
    return false;
 800413c:	2300      	movs	r3, #0
  }
}
 800413e:	0018      	movs	r0, r3
 8004140:	46bd      	mov	sp, r7
 8004142:	b002      	add	sp, #8
 8004144:	bd80      	pop	{r7, pc}
 8004146:	46c0      	nop			@ (mov r8, r8)
 8004148:	0801b5d0 	.word	0x0801b5d0

0800414c <CWJAP>:
bool CWJAP(){
 800414c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800414e:	46c6      	mov	lr, r8
 8004150:	b500      	push	{lr}
 8004152:	b0a2      	sub	sp, #136	@ 0x88
 8004154:	af00      	add	r7, sp, #0
 8004156:	466b      	mov	r3, sp
 8004158:	4698      	mov	r8, r3
  beursTest = true;
 800415a:	4b3b      	ldr	r3, [pc, #236]	@ (8004248 <CWJAP+0xfc>)
 800415c:	2201      	movs	r2, #1
 800415e:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8004160:	2618      	movs	r6, #24
 8004162:	19bb      	adds	r3, r7, r6
 8004164:	2264      	movs	r2, #100	@ 0x64
 8004166:	2100      	movs	r1, #0
 8004168:	0018      	movs	r0, r3
 800416a:	f014 f99f 	bl	80184ac <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 800416e:	4b37      	ldr	r3, [pc, #220]	@ (800424c <CWJAP+0x100>)
 8004170:	4a37      	ldr	r2, [pc, #220]	@ (8004250 <CWJAP+0x104>)
 8004172:	4938      	ldr	r1, [pc, #224]	@ (8004254 <CWJAP+0x108>)
 8004174:	19b8      	adds	r0, r7, r6
 8004176:	f014 f8f5 	bl	8018364 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 800417a:	19bb      	adds	r3, r7, r6
 800417c:	0018      	movs	r0, r3
 800417e:	f7fb ffc3 	bl	8000108 <strlen>
 8004182:	0002      	movs	r2, r0
 8004184:	216f      	movs	r1, #111	@ 0x6f
 8004186:	0030      	movs	r0, r6
 8004188:	180b      	adds	r3, r1, r0
 800418a:	19db      	adds	r3, r3, r7
 800418c:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 800418e:	180b      	adds	r3, r1, r0
 8004190:	19db      	adds	r3, r3, r7
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	3301      	adds	r3, #1
 8004196:	1e5a      	subs	r2, r3, #1
 8004198:	2180      	movs	r1, #128	@ 0x80
 800419a:	1879      	adds	r1, r7, r1
 800419c:	600a      	str	r2, [r1, #0]
 800419e:	001a      	movs	r2, r3
 80041a0:	60ba      	str	r2, [r7, #8]
 80041a2:	2200      	movs	r2, #0
 80041a4:	60fa      	str	r2, [r7, #12]
 80041a6:	68b8      	ldr	r0, [r7, #8]
 80041a8:	68f9      	ldr	r1, [r7, #12]
 80041aa:	0002      	movs	r2, r0
 80041ac:	0f52      	lsrs	r2, r2, #29
 80041ae:	000e      	movs	r6, r1
 80041b0:	00f6      	lsls	r6, r6, #3
 80041b2:	617e      	str	r6, [r7, #20]
 80041b4:	697e      	ldr	r6, [r7, #20]
 80041b6:	4316      	orrs	r6, r2
 80041b8:	617e      	str	r6, [r7, #20]
 80041ba:	0002      	movs	r2, r0
 80041bc:	00d2      	lsls	r2, r2, #3
 80041be:	613a      	str	r2, [r7, #16]
 80041c0:	001a      	movs	r2, r3
 80041c2:	603a      	str	r2, [r7, #0]
 80041c4:	2200      	movs	r2, #0
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	6838      	ldr	r0, [r7, #0]
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	0002      	movs	r2, r0
 80041ce:	0f52      	lsrs	r2, r2, #29
 80041d0:	000e      	movs	r6, r1
 80041d2:	00f5      	lsls	r5, r6, #3
 80041d4:	4315      	orrs	r5, r2
 80041d6:	0002      	movs	r2, r0
 80041d8:	00d4      	lsls	r4, r2, #3
 80041da:	3307      	adds	r3, #7
 80041dc:	08db      	lsrs	r3, r3, #3
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	466a      	mov	r2, sp
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	469d      	mov	sp, r3
 80041e6:	466b      	mov	r3, sp
 80041e8:	3300      	adds	r3, #0
 80041ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 80041ec:	246f      	movs	r4, #111	@ 0x6f
 80041ee:	2518      	movs	r5, #24
 80041f0:	1963      	adds	r3, r4, r5
 80041f2:	19db      	adds	r3, r3, r7
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	3301      	adds	r3, #1
 80041f8:	001a      	movs	r2, r3
 80041fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041fc:	2100      	movs	r1, #0
 80041fe:	0018      	movs	r0, r3
 8004200:	f014 f954 	bl	80184ac <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004204:	1963      	adds	r3, r4, r5
 8004206:	19db      	adds	r3, r3, r7
 8004208:	781a      	ldrb	r2, [r3, #0]
 800420a:	1979      	adds	r1, r7, r5
 800420c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800420e:	0018      	movs	r0, r3
 8004210:	f014 f962 	bl	80184d8 <strncpy>
  SetCommandBuffer(atCommand);
 8004214:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004216:	0018      	movs	r0, r3
 8004218:	f7ff fcf4 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 800421c:	1963      	adds	r3, r4, r5
 800421e:	19db      	adds	r3, r3, r7
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	b29a      	uxth	r2, r3
 8004224:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004226:	0011      	movs	r1, r2
 8004228:	0018      	movs	r0, r3
 800422a:	f7ff fabb 	bl	80037a4 <ESP_Send>
 800422e:	1e03      	subs	r3, r0, #0
 8004230:	d001      	beq.n	8004236 <CWJAP+0xea>
    return true;
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <CWJAP+0xec>
  }
  else{
    return false;
 8004236:	2300      	movs	r3, #0
 8004238:	46c5      	mov	sp, r8
  }
}
 800423a:	0018      	movs	r0, r3
 800423c:	46bd      	mov	sp, r7
 800423e:	b022      	add	sp, #136	@ 0x88
 8004240:	bc80      	pop	{r7}
 8004242:	46b8      	mov	r8, r7
 8004244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004246:	46c0      	nop			@ (mov r8, r8)
 8004248:	200004f4 	.word	0x200004f4
 800424c:	0801bef8 	.word	0x0801bef8
 8004250:	0801beec 	.word	0x0801beec
 8004254:	0801b5e4 	.word	0x0801b5e4

08004258 <CWMODE3>:
bool CWMODE3(){
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 800425e:	4b0d      	ldr	r3, [pc, #52]	@ (8004294 <CWMODE3+0x3c>)
 8004260:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	0018      	movs	r0, r3
 8004266:	f7ff fccd 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	0018      	movs	r0, r3
 800426e:	f7fb ff4b 	bl	8000108 <strlen>
 8004272:	0003      	movs	r3, r0
 8004274:	b29a      	uxth	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	0011      	movs	r1, r2
 800427a:	0018      	movs	r0, r3
 800427c:	f7ff fa92 	bl	80037a4 <ESP_Send>
 8004280:	1e03      	subs	r3, r0, #0
 8004282:	d001      	beq.n	8004288 <CWMODE3+0x30>
    return true;
 8004284:	2301      	movs	r3, #1
 8004286:	e000      	b.n	800428a <CWMODE3+0x32>
  }
  else{
    return false;
 8004288:	2300      	movs	r3, #0
  }
}
 800428a:	0018      	movs	r0, r3
 800428c:	46bd      	mov	sp, r7
 800428e:	b002      	add	sp, #8
 8004290:	bd80      	pop	{r7, pc}
 8004292:	46c0      	nop			@ (mov r8, r8)
 8004294:	0801b5fc 	.word	0x0801b5fc

08004298 <CWSAP>:
bool CWSAP(){
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 800429e:	4b0d      	ldr	r3, [pc, #52]	@ (80042d4 <CWSAP+0x3c>)
 80042a0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	0018      	movs	r0, r3
 80042a6:	f7ff fcad 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	0018      	movs	r0, r3
 80042ae:	f7fb ff2b 	bl	8000108 <strlen>
 80042b2:	0003      	movs	r3, r0
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	0011      	movs	r1, r2
 80042ba:	0018      	movs	r0, r3
 80042bc:	f7ff fa72 	bl	80037a4 <ESP_Send>
 80042c0:	1e03      	subs	r3, r0, #0
 80042c2:	d001      	beq.n	80042c8 <CWSAP+0x30>
    return true;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e000      	b.n	80042ca <CWSAP+0x32>
  }
  else{
    return false;
 80042c8:	2300      	movs	r3, #0
  }
}
 80042ca:	0018      	movs	r0, r3
 80042cc:	46bd      	mov	sp, r7
 80042ce:	b002      	add	sp, #8
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	46c0      	nop			@ (mov r8, r8)
 80042d4:	0801b60c 	.word	0x0801b60c

080042d8 <CIPMUX>:
bool CIPMUX(){
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 80042de:	4b0d      	ldr	r3, [pc, #52]	@ (8004314 <CIPMUX+0x3c>)
 80042e0:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	0018      	movs	r0, r3
 80042e6:	f7ff fc8d 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	0018      	movs	r0, r3
 80042ee:	f7fb ff0b 	bl	8000108 <strlen>
 80042f2:	0003      	movs	r3, r0
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	0011      	movs	r1, r2
 80042fa:	0018      	movs	r0, r3
 80042fc:	f7ff fa52 	bl	80037a4 <ESP_Send>
 8004300:	1e03      	subs	r3, r0, #0
 8004302:	d001      	beq.n	8004308 <CIPMUX+0x30>
    return true;
 8004304:	2301      	movs	r3, #1
 8004306:	e000      	b.n	800430a <CIPMUX+0x32>
  }
  else{
    return false;
 8004308:	2300      	movs	r3, #0
  }
}
 800430a:	0018      	movs	r0, r3
 800430c:	46bd      	mov	sp, r7
 800430e:	b002      	add	sp, #8
 8004310:	bd80      	pop	{r7, pc}
 8004312:	46c0      	nop			@ (mov r8, r8)
 8004314:	0801b630 	.word	0x0801b630

08004318 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 800431e:	4b0d      	ldr	r3, [pc, #52]	@ (8004354 <WEBSERVER+0x3c>)
 8004320:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	0018      	movs	r0, r3
 8004326:	f7ff fc6d 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	0018      	movs	r0, r3
 800432e:	f7fb feeb 	bl	8000108 <strlen>
 8004332:	0003      	movs	r3, r0
 8004334:	b29a      	uxth	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	0011      	movs	r1, r2
 800433a:	0018      	movs	r0, r3
 800433c:	f7ff fa32 	bl	80037a4 <ESP_Send>
 8004340:	1e03      	subs	r3, r0, #0
 8004342:	d001      	beq.n	8004348 <WEBSERVER+0x30>
    return true;
 8004344:	2301      	movs	r3, #1
 8004346:	e000      	b.n	800434a <WEBSERVER+0x32>
  }
  else{
    return false;
 8004348:	2300      	movs	r3, #0
  }
}
 800434a:	0018      	movs	r0, r3
 800434c:	46bd      	mov	sp, r7
 800434e:	b002      	add	sp, #8
 8004350:	bd80      	pop	{r7, pc}
 8004352:	46c0      	nop			@ (mov r8, r8)
 8004354:	0801b640 	.word	0x0801b640

08004358 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004358:	b590      	push	{r4, r7, lr}
 800435a:	b0c5      	sub	sp, #276	@ 0x114
 800435c:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 800435e:	2380      	movs	r3, #128	@ 0x80
 8004360:	005a      	lsls	r2, r3, #1
 8004362:	1d3b      	adds	r3, r7, #4
 8004364:	2100      	movs	r1, #0
 8004366:	0018      	movs	r0, r3
 8004368:	f014 f8a0 	bl	80184ac <memset>
  uint16_t length = CreateMessage();
 800436c:	1dfc      	adds	r4, r7, #7
 800436e:	34ff      	adds	r4, #255	@ 0xff
 8004370:	f7ff fad2 	bl	8003918 <CreateMessage>
 8004374:	0003      	movs	r3, r0
 8004376:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004378:	4b20      	ldr	r3, [pc, #128]	@ (80043fc <HTTPCPOST+0xa4>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d008      	beq.n	8004392 <HTTPCPOST+0x3a>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004380:	1dfb      	adds	r3, r7, #7
 8004382:	33ff      	adds	r3, #255	@ 0xff
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	4a1e      	ldr	r2, [pc, #120]	@ (8004400 <HTTPCPOST+0xa8>)
 8004388:	491e      	ldr	r1, [pc, #120]	@ (8004404 <HTTPCPOST+0xac>)
 800438a:	1d38      	adds	r0, r7, #4
 800438c:	f013 ffea 	bl	8018364 <siprintf>
 8004390:	e016      	b.n	80043c0 <HTTPCPOST+0x68>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004392:	4b1d      	ldr	r3, [pc, #116]	@ (8004408 <HTTPCPOST+0xb0>)
 8004394:	481d      	ldr	r0, [pc, #116]	@ (800440c <HTTPCPOST+0xb4>)
 8004396:	220c      	movs	r2, #12
 8004398:	0019      	movs	r1, r3
 800439a:	f7ff f92c 	bl	80035f6 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 800439e:	4a1a      	ldr	r2, [pc, #104]	@ (8004408 <HTTPCPOST+0xb0>)
 80043a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004410 <HTTPCPOST+0xb8>)
 80043a2:	0011      	movs	r1, r2
 80043a4:	0018      	movs	r0, r3
 80043a6:	f7ff fa93 	bl	80038d0 <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 80043aa:	1dfb      	adds	r3, r7, #7
 80043ac:	33ff      	adds	r3, #255	@ 0xff
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	4c17      	ldr	r4, [pc, #92]	@ (8004410 <HTTPCPOST+0xb8>)
 80043b2:	4a18      	ldr	r2, [pc, #96]	@ (8004414 <HTTPCPOST+0xbc>)
 80043b4:	4918      	ldr	r1, [pc, #96]	@ (8004418 <HTTPCPOST+0xc0>)
 80043b6:	1d38      	adds	r0, r7, #4
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	0023      	movs	r3, r4
 80043bc:	f013 ffd2 	bl	8018364 <siprintf>
  }
    uint16_t len = strlen(atCommandBuff);
 80043c0:	1d3b      	adds	r3, r7, #4
 80043c2:	0018      	movs	r0, r3
 80043c4:	f7fb fea0 	bl	8000108 <strlen>
 80043c8:	0002      	movs	r2, r0
 80043ca:	1d7b      	adds	r3, r7, #5
 80043cc:	33ff      	adds	r3, #255	@ 0xff
 80043ce:	801a      	strh	r2, [r3, #0]
  //char atCommand[len+1];
  //strncpy(atCommand, atCommandBuff, len);
  SetCommandBuffer(atCommandBuff);
 80043d0:	1d3b      	adds	r3, r7, #4
 80043d2:	0018      	movs	r0, r3
 80043d4:	f7ff fc16 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 80043d8:	1d7b      	adds	r3, r7, #5
 80043da:	33ff      	adds	r3, #255	@ 0xff
 80043dc:	881a      	ldrh	r2, [r3, #0]
 80043de:	1d3b      	adds	r3, r7, #4
 80043e0:	0011      	movs	r1, r2
 80043e2:	0018      	movs	r0, r3
 80043e4:	f7ff f9de 	bl	80037a4 <ESP_Send>
 80043e8:	1e03      	subs	r3, r0, #0
 80043ea:	d001      	beq.n	80043f0 <HTTPCPOST+0x98>
    return true;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e000      	b.n	80043f2 <HTTPCPOST+0x9a>
  }
  else{
    return false;
 80043f0:	2300      	movs	r3, #0
  }
}
 80043f2:	0018      	movs	r0, r3
 80043f4:	46bd      	mov	sp, r7
 80043f6:	b043      	add	sp, #268	@ 0x10c
 80043f8:	bd90      	pop	{r4, r7, pc}
 80043fa:	46c0      	nop			@ (mov r8, r8)
 80043fc:	200004f5 	.word	0x200004f5
 8004400:	0801bf10 	.word	0x0801bf10
 8004404:	0801b658 	.word	0x0801b658
 8004408:	20000bbc 	.word	0x20000bbc
 800440c:	08080000 	.word	0x08080000
 8004410:	20000bc8 	.word	0x20000bc8
 8004414:	0801bf4c 	.word	0x0801bf4c
 8004418:	0801b690 	.word	0x0801b690

0800441c <SENDDATA>:
bool SENDDATA(){
 800441c:	b590      	push	{r4, r7, lr}
 800441e:	4c14      	ldr	r4, [pc, #80]	@ (8004470 <SENDDATA+0x54>)
 8004420:	44a5      	add	sp, r4
 8004422:	af00      	add	r7, sp, #0
  char atCommandBuff[656];
  memset(atCommandBuff, '\0', 656);
 8004424:	23a4      	movs	r3, #164	@ 0xa4
 8004426:	009a      	lsls	r2, r3, #2
 8004428:	1d3b      	adds	r3, r7, #4
 800442a:	2100      	movs	r1, #0
 800442c:	0018      	movs	r0, r3
 800442e:	f014 f83d 	bl	80184ac <memset>
  //sprintf(atCommandBuff,"[{%s}, {%s}, {%s}, {%s}, {%s}]", messagePart1, messagePart2, messagePart3, messagePart4, messagePart5);
  uint16_t len = strlen(message);
 8004432:	4b10      	ldr	r3, [pc, #64]	@ (8004474 <SENDDATA+0x58>)
 8004434:	0018      	movs	r0, r3
 8004436:	f7fb fe67 	bl	8000108 <strlen>
 800443a:	0002      	movs	r2, r0
 800443c:	4c0e      	ldr	r4, [pc, #56]	@ (8004478 <SENDDATA+0x5c>)
 800443e:	193b      	adds	r3, r7, r4
 8004440:	801a      	strh	r2, [r3, #0]
  //char atCommand[len+1];
  //memset(atCommand, '\0', len+1);
  //1strncpy(atCommand, atCommandBuff, len);
  SetCommandBuffer(atCommandBuff);
 8004442:	1d3b      	adds	r3, r7, #4
 8004444:	0018      	movs	r0, r3
 8004446:	f7ff fbdd 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)message, len)) {
 800444a:	193b      	adds	r3, r7, r4
 800444c:	881a      	ldrh	r2, [r3, #0]
 800444e:	4b09      	ldr	r3, [pc, #36]	@ (8004474 <SENDDATA+0x58>)
 8004450:	0011      	movs	r1, r2
 8004452:	0018      	movs	r0, r3
 8004454:	f7ff f9a6 	bl	80037a4 <ESP_Send>
 8004458:	1e03      	subs	r3, r0, #0
 800445a:	d001      	beq.n	8004460 <SENDDATA+0x44>
    return true;
 800445c:	2301      	movs	r3, #1
 800445e:	e000      	b.n	8004462 <SENDDATA+0x46>
  }
  else{
    return false;
 8004460:	2300      	movs	r3, #0
  }
}
 8004462:	0018      	movs	r0, r3
 8004464:	46bd      	mov	sp, r7
 8004466:	23a7      	movs	r3, #167	@ 0xa7
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	449d      	add	sp, r3
 800446c:	bd90      	pop	{r4, r7, pc}
 800446e:	46c0      	nop			@ (mov r8, r8)
 8004470:	fffffd64 	.word	0xfffffd64
 8004474:	2000051c 	.word	0x2000051c
 8004478:	00000296 	.word	0x00000296

0800447c <SLEEP>:
bool SLEEP(){
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004482:	4b0d      	ldr	r3, [pc, #52]	@ (80044b8 <SLEEP+0x3c>)
 8004484:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	0018      	movs	r0, r3
 800448a:	f7ff fbbb 	bl	8003c04 <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	0018      	movs	r0, r3
 8004492:	f7fb fe39 	bl	8000108 <strlen>
 8004496:	0003      	movs	r3, r0
 8004498:	b29a      	uxth	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	0011      	movs	r1, r2
 800449e:	0018      	movs	r0, r3
 80044a0:	f7ff f980 	bl	80037a4 <ESP_Send>
 80044a4:	1e03      	subs	r3, r0, #0
 80044a6:	d001      	beq.n	80044ac <SLEEP+0x30>
    return true;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e000      	b.n	80044ae <SLEEP+0x32>
  }
  else{
    return false;
 80044ac:	2300      	movs	r3, #0
  }
}
 80044ae:	0018      	movs	r0, r3
 80044b0:	46bd      	mov	sp, r7
 80044b2:	b002      	add	sp, #8
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	46c0      	nop			@ (mov r8, r8)
 80044b8:	0801b6d0 	.word	0x0801b6d0

080044bc <DMA_ProcessBuffer>:

uint8_t DMA_ProcessBuffer(uint8_t expectation) {
 80044bc:	b5b0      	push	{r4, r5, r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	0002      	movs	r2, r0
 80044c4:	1dfb      	adds	r3, r7, #7
 80044c6:	701a      	strb	r2, [r3, #0]
    uint8_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 80044c8:	4b50      	ldr	r3, [pc, #320]	@ (800460c <DMA_ProcessBuffer+0x150>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	210e      	movs	r1, #14
 80044d2:	187b      	adds	r3, r7, r1
 80044d4:	43d2      	mvns	r2, r2
 80044d6:	701a      	strb	r2, [r3, #0]
    uint8_t status = RECEIVE_STATUS_INCOMPLETE;
 80044d8:	200f      	movs	r0, #15
 80044da:	183b      	adds	r3, r7, r0
 80044dc:	2203      	movs	r2, #3
 80044de:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
      pos = ESP_MAX_BUFFER_SIZE;
    }
    if(pos == OldPos){
 80044e0:	4b4b      	ldr	r3, [pc, #300]	@ (8004610 <DMA_ProcessBuffer+0x154>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	187a      	adds	r2, r7, r1
 80044e8:	7812      	ldrb	r2, [r2, #0]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d130      	bne.n	8004550 <DMA_ProcessBuffer+0x94>
      if(retry >4){
 80044ee:	4b49      	ldr	r3, [pc, #292]	@ (8004614 <DMA_ProcessBuffer+0x158>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b04      	cmp	r3, #4
 80044f4:	d91a      	bls.n	800452c <DMA_ProcessBuffer+0x70>
        retry = 0;
 80044f6:	4b47      	ldr	r3, [pc, #284]	@ (8004614 <DMA_ProcessBuffer+0x158>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 80044fc:	4b46      	ldr	r3, [pc, #280]	@ (8004618 <DMA_ProcessBuffer+0x15c>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d106      	bne.n	8004512 <DMA_ProcessBuffer+0x56>
 8004504:	4b45      	ldr	r3, [pc, #276]	@ (800461c <DMA_ProcessBuffer+0x160>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d002      	beq.n	8004512 <DMA_ProcessBuffer+0x56>
          status = RECEIVE_STATUS_UNPROGGED;
 800450c:	183b      	adds	r3, r7, r0
 800450e:	2207      	movs	r2, #7
 8004510:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004512:	4b41      	ldr	r3, [pc, #260]	@ (8004618 <DMA_ProcessBuffer+0x15c>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b08      	cmp	r3, #8
 8004518:	d103      	bne.n	8004522 <DMA_ProcessBuffer+0x66>
          EspState = ESP_STATE_MODE_SELECT;
 800451a:	4b41      	ldr	r3, [pc, #260]	@ (8004620 <DMA_ProcessBuffer+0x164>)
 800451c:	220b      	movs	r2, #11
 800451e:	701a      	strb	r2, [r3, #0]
 8004520:	e016      	b.n	8004550 <DMA_ProcessBuffer+0x94>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004522:	230f      	movs	r3, #15
 8004524:	18fb      	adds	r3, r7, r3
 8004526:	2206      	movs	r2, #6
 8004528:	701a      	strb	r2, [r3, #0]
 800452a:	e011      	b.n	8004550 <DMA_ProcessBuffer+0x94>
        }
      }
     else{
       retry ++;
 800452c:	4b39      	ldr	r3, [pc, #228]	@ (8004614 <DMA_ProcessBuffer+0x158>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	3301      	adds	r3, #1
 8004532:	b2da      	uxtb	r2, r3
 8004534:	4b37      	ldr	r3, [pc, #220]	@ (8004614 <DMA_ProcessBuffer+0x158>)
 8004536:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004538:	f005 fe7e 	bl	800a238 <HAL_GetTick>
 800453c:	0003      	movs	r3, r0
 800453e:	33f5      	adds	r3, #245	@ 0xf5
 8004540:	33ff      	adds	r3, #255	@ 0xff
 8004542:	001a      	movs	r2, r3
 8004544:	4b37      	ldr	r3, [pc, #220]	@ (8004624 <DMA_ProcessBuffer+0x168>)
 8004546:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004548:	230f      	movs	r3, #15
 800454a:	18fb      	adds	r3, r7, r3
 800454c:	2204      	movs	r2, #4
 800454e:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004550:	4b2f      	ldr	r3, [pc, #188]	@ (8004610 <DMA_ProcessBuffer+0x154>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	210e      	movs	r1, #14
 8004558:	187a      	adds	r2, r7, r1
 800455a:	7812      	ldrb	r2, [r2, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d048      	beq.n	80045f2 <DMA_ProcessBuffer+0x136>
      retry = 0;
 8004560:	4b2c      	ldr	r3, [pc, #176]	@ (8004614 <DMA_ProcessBuffer+0x158>)
 8004562:	2200      	movs	r2, #0
 8004564:	701a      	strb	r2, [r3, #0]
        if (pos > OldPos) {
 8004566:	4b2a      	ldr	r3, [pc, #168]	@ (8004610 <DMA_ProcessBuffer+0x154>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	b2db      	uxtb	r3, r3
 800456c:	187a      	adds	r2, r7, r1
 800456e:	7812      	ldrb	r2, [r2, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d917      	bls.n	80045a4 <DMA_ProcessBuffer+0xe8>
            // Direct parsing
            status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004574:	4b26      	ldr	r3, [pc, #152]	@ (8004610 <DMA_ProcessBuffer+0x154>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	b2db      	uxtb	r3, r3
 800457a:	001a      	movs	r2, r3
 800457c:	4b2a      	ldr	r3, [pc, #168]	@ (8004628 <DMA_ProcessBuffer+0x16c>)
 800457e:	18d0      	adds	r0, r2, r3
 8004580:	187b      	adds	r3, r7, r1
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	b29b      	uxth	r3, r3
 8004586:	4a22      	ldr	r2, [pc, #136]	@ (8004610 <DMA_ProcessBuffer+0x154>)
 8004588:	7812      	ldrb	r2, [r2, #0]
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	b299      	uxth	r1, r3
 8004590:	230f      	movs	r3, #15
 8004592:	18fc      	adds	r4, r7, r3
 8004594:	1dfb      	adds	r3, r7, #7
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	001a      	movs	r2, r3
 800459a:	f7ff fb7b 	bl	8003c94 <ParseBuffer>
 800459e:	0003      	movs	r3, r0
 80045a0:	7023      	strb	r3, [r4, #0]
 80045a2:	e026      	b.n	80045f2 <DMA_ProcessBuffer+0x136>
              //memset(RxBuffer, 0, ESP_MAX_BUFFER_SIZE);
              //pos = 0;
            }
        } else {
            // Buffer wrap-around
            status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 80045a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004610 <DMA_ProcessBuffer+0x154>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	001a      	movs	r2, r3
 80045ac:	4b1e      	ldr	r3, [pc, #120]	@ (8004628 <DMA_ProcessBuffer+0x16c>)
 80045ae:	18d0      	adds	r0, r2, r3
 80045b0:	4b17      	ldr	r3, [pc, #92]	@ (8004610 <DMA_ProcessBuffer+0x154>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	001a      	movs	r2, r3
 80045b8:	23ff      	movs	r3, #255	@ 0xff
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	b299      	uxth	r1, r3
 80045be:	250f      	movs	r5, #15
 80045c0:	197c      	adds	r4, r7, r5
 80045c2:	1dfb      	adds	r3, r7, #7
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	001a      	movs	r2, r3
 80045c8:	f7ff fb64 	bl	8003c94 <ParseBuffer>
 80045cc:	0003      	movs	r3, r0
 80045ce:	7023      	strb	r3, [r4, #0]
            if (pos > 0) {
 80045d0:	220e      	movs	r2, #14
 80045d2:	18bb      	adds	r3, r7, r2
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00b      	beq.n	80045f2 <DMA_ProcessBuffer+0x136>
                status = ParseBuffer(&RxBuffer[0], pos, expectation);
 80045da:	18bb      	adds	r3, r7, r2
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	b299      	uxth	r1, r3
 80045e0:	197c      	adds	r4, r7, r5
 80045e2:	1dfb      	adds	r3, r7, #7
 80045e4:	781a      	ldrb	r2, [r3, #0]
 80045e6:	4b10      	ldr	r3, [pc, #64]	@ (8004628 <DMA_ProcessBuffer+0x16c>)
 80045e8:	0018      	movs	r0, r3
 80045ea:	f7ff fb53 	bl	8003c94 <ParseBuffer>
 80045ee:	0003      	movs	r3, r0
 80045f0:	7023      	strb	r3, [r4, #0]
            }
        }
    }
    OldPos = pos;
 80045f2:	4b07      	ldr	r3, [pc, #28]	@ (8004610 <DMA_ProcessBuffer+0x154>)
 80045f4:	220e      	movs	r2, #14
 80045f6:	18ba      	adds	r2, r7, r2
 80045f8:	7812      	ldrb	r2, [r2, #0]
 80045fa:	701a      	strb	r2, [r3, #0]
    return status;
 80045fc:	230f      	movs	r3, #15
 80045fe:	18fb      	adds	r3, r7, r3
 8004600:	781b      	ldrb	r3, [r3, #0]
}
 8004602:	0018      	movs	r0, r3
 8004604:	46bd      	mov	sp, r7
 8004606:	b004      	add	sp, #16
 8004608:	bdb0      	pop	{r4, r5, r7, pc}
 800460a:	46c0      	nop			@ (mov r8, r8)
 800460c:	20002c70 	.word	0x20002c70
 8004610:	20000927 	.word	0x20000927
 8004614:	2000092c 	.word	0x2000092c
 8004618:	20000b32 	.word	0x20000b32
 800461c:	20000000 	.word	0x20000000
 8004620:	20000021 	.word	0x20000021
 8004624:	20000928 	.word	0x20000928
 8004628:	200003f0 	.word	0x200003f0

0800462c <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	0002      	movs	r2, r0
 8004634:	1dfb      	adds	r3, r7, #7
 8004636:	701a      	strb	r2, [r3, #0]
 8004638:	1dbb      	adds	r3, r7, #6
 800463a:	1c0a      	adds	r2, r1, #0
 800463c:	701a      	strb	r2, [r3, #0]
  bool value = false;
 800463e:	210f      	movs	r1, #15
 8004640:	187b      	adds	r3, r7, r1
 8004642:	2200      	movs	r2, #0
 8004644:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004646:	1dbb      	adds	r3, r7, #6
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d105      	bne.n	800465a <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 800464e:	187b      	adds	r3, r7, r1
 8004650:	1dfa      	adds	r2, r7, #7
 8004652:	7812      	ldrb	r2, [r2, #0]
 8004654:	4251      	negs	r1, r2
 8004656:	414a      	adcs	r2, r1
 8004658:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 800465a:	1dbb      	adds	r3, r7, #6
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d107      	bne.n	8004672 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004662:	230f      	movs	r3, #15
 8004664:	18fb      	adds	r3, r7, r3
 8004666:	1dfa      	adds	r2, r7, #7
 8004668:	7812      	ldrb	r2, [r2, #0]
 800466a:	3a02      	subs	r2, #2
 800466c:	4251      	negs	r1, r2
 800466e:	414a      	adcs	r2, r1
 8004670:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004672:	1dbb      	adds	r3, r7, #6
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b02      	cmp	r3, #2
 8004678:	d107      	bne.n	800468a <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 800467a:	230f      	movs	r3, #15
 800467c:	18fb      	adds	r3, r7, r3
 800467e:	1dfa      	adds	r2, r7, #7
 8004680:	7812      	ldrb	r2, [r2, #0]
 8004682:	3a05      	subs	r2, #5
 8004684:	4251      	negs	r1, r2
 8004686:	414a      	adcs	r2, r1
 8004688:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 800468a:	230f      	movs	r3, #15
 800468c:	18fb      	adds	r3, r7, r3
 800468e:	781b      	ldrb	r3, [r3, #0]
}
 8004690:	0018      	movs	r0, r3
 8004692:	46bd      	mov	sp, r7
 8004694:	b004      	add	sp, #16
 8004696:	bd80      	pop	{r7, pc}

08004698 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004698:	b590      	push	{r4, r7, lr}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	0002      	movs	r2, r0
 80046a0:	1dfb      	adds	r3, r7, #7
 80046a2:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 80046a4:	230f      	movs	r3, #15
 80046a6:	18fb      	adds	r3, r7, r3
 80046a8:	2200      	movs	r2, #0
 80046aa:	701a      	strb	r2, [r3, #0]
  switch (state){
 80046ac:	1dfb      	adds	r3, r7, #7
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	2b10      	cmp	r3, #16
 80046b2:	d900      	bls.n	80046b6 <AT_Send+0x1e>
 80046b4:	e14a      	b.n	800494c <AT_Send+0x2b4>
 80046b6:	009a      	lsls	r2, r3, #2
 80046b8:	4ba8      	ldr	r3, [pc, #672]	@ (800495c <AT_Send+0x2c4>)
 80046ba:	18d3      	adds	r3, r2, r3
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 80046c0:	4ba7      	ldr	r3, [pc, #668]	@ (8004960 <AT_Send+0x2c8>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	0018      	movs	r0, r3
 80046c6:	f005 f9db 	bl	8009a80 <TimestampIsReached>
 80046ca:	1e03      	subs	r3, r0, #0
 80046cc:	d100      	bne.n	80046d0 <AT_Send+0x38>
 80046ce:	e13c      	b.n	800494a <AT_Send+0x2b2>
    ATCommandSend = PollAwake();
 80046d0:	230f      	movs	r3, #15
 80046d2:	18fc      	adds	r4, r7, r3
 80046d4:	f7ff fc3a 	bl	8003f4c <PollAwake>
 80046d8:	0003      	movs	r3, r0
 80046da:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80046dc:	f005 fdac 	bl	800a238 <HAL_GetTick>
 80046e0:	0003      	movs	r3, r0
 80046e2:	3332      	adds	r3, #50	@ 0x32
 80046e4:	001a      	movs	r2, r3
 80046e6:	4b9e      	ldr	r3, [pc, #632]	@ (8004960 <AT_Send+0x2c8>)
 80046e8:	601a      	str	r2, [r3, #0]
  }
  break;
 80046ea:	e12e      	b.n	800494a <AT_Send+0x2b2>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 80046ec:	4a9d      	ldr	r2, [pc, #628]	@ (8004964 <AT_Send+0x2cc>)
 80046ee:	4b9e      	ldr	r3, [pc, #632]	@ (8004968 <AT_Send+0x2d0>)
 80046f0:	0019      	movs	r1, r3
 80046f2:	2003      	movs	r0, #3
 80046f4:	f005 fa1a 	bl	8009b2c <CreateLine>
    ATCommandSend = RFPower();
 80046f8:	230f      	movs	r3, #15
 80046fa:	18fc      	adds	r4, r7, r3
 80046fc:	f7ff fc46 	bl	8003f8c <RFPower>
 8004700:	0003      	movs	r3, r0
 8004702:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004704:	f005 fd98 	bl	800a238 <HAL_GetTick>
 8004708:	0003      	movs	r3, r0
 800470a:	330a      	adds	r3, #10
 800470c:	001a      	movs	r2, r3
 800470e:	4b94      	ldr	r3, [pc, #592]	@ (8004960 <AT_Send+0x2c8>)
 8004710:	601a      	str	r2, [r3, #0]
    break;
 8004712:	e11b      	b.n	800494c <AT_Send+0x2b4>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004714:	4a95      	ldr	r2, [pc, #596]	@ (800496c <AT_Send+0x2d4>)
 8004716:	4b94      	ldr	r3, [pc, #592]	@ (8004968 <AT_Send+0x2d0>)
 8004718:	0019      	movs	r1, r3
 800471a:	2003      	movs	r0, #3
 800471c:	f005 fa06 	bl	8009b2c <CreateLine>
    ATCommandSend = CheckRFPower();
 8004720:	230f      	movs	r3, #15
 8004722:	18fc      	adds	r4, r7, r3
 8004724:	f7ff fc52 	bl	8003fcc <CheckRFPower>
 8004728:	0003      	movs	r3, r0
 800472a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800472c:	f005 fd84 	bl	800a238 <HAL_GetTick>
 8004730:	0003      	movs	r3, r0
 8004732:	330a      	adds	r3, #10
 8004734:	001a      	movs	r2, r3
 8004736:	4b8a      	ldr	r3, [pc, #552]	@ (8004960 <AT_Send+0x2c8>)
 8004738:	601a      	str	r2, [r3, #0]
    break;
 800473a:	e107      	b.n	800494c <AT_Send+0x2b4>

  case AT_RESTORE:
    Debug("Restoring ESP");
 800473c:	4a8c      	ldr	r2, [pc, #560]	@ (8004970 <AT_Send+0x2d8>)
 800473e:	4b8a      	ldr	r3, [pc, #552]	@ (8004968 <AT_Send+0x2d0>)
 8004740:	0019      	movs	r1, r3
 8004742:	2003      	movs	r0, #3
 8004744:	f005 f9f2 	bl	8009b2c <CreateLine>
    ATCommandSend = ATRestore();
 8004748:	230f      	movs	r3, #15
 800474a:	18fc      	adds	r4, r7, r3
 800474c:	f7ff fc5e 	bl	800400c <ATRestore>
 8004750:	0003      	movs	r3, r0
 8004752:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004754:	f005 fd70 	bl	800a238 <HAL_GetTick>
 8004758:	0003      	movs	r3, r0
 800475a:	3332      	adds	r3, #50	@ 0x32
 800475c:	001a      	movs	r2, r3
 800475e:	4b80      	ldr	r3, [pc, #512]	@ (8004960 <AT_Send+0x2c8>)
 8004760:	601a      	str	r2, [r3, #0]
    break;
 8004762:	e0f3      	b.n	800494c <AT_Send+0x2b4>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004764:	4a83      	ldr	r2, [pc, #524]	@ (8004974 <AT_Send+0x2dc>)
 8004766:	4b80      	ldr	r3, [pc, #512]	@ (8004968 <AT_Send+0x2d0>)
 8004768:	0019      	movs	r1, r3
 800476a:	2003      	movs	r0, #3
 800476c:	f005 f9de 	bl	8009b2c <CreateLine>
    ATCommandSend = CWINIT();
 8004770:	230f      	movs	r3, #15
 8004772:	18fc      	adds	r4, r7, r3
 8004774:	f7ff fc6a 	bl	800404c <CWINIT>
 8004778:	0003      	movs	r3, r0
 800477a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800477c:	f005 fd5c 	bl	800a238 <HAL_GetTick>
 8004780:	0003      	movs	r3, r0
 8004782:	33f5      	adds	r3, #245	@ 0xf5
 8004784:	33ff      	adds	r3, #255	@ 0xff
 8004786:	001a      	movs	r2, r3
 8004788:	4b75      	ldr	r3, [pc, #468]	@ (8004960 <AT_Send+0x2c8>)
 800478a:	601a      	str	r2, [r3, #0]
    break;
 800478c:	e0de      	b.n	800494c <AT_Send+0x2b4>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 800478e:	4a7a      	ldr	r2, [pc, #488]	@ (8004978 <AT_Send+0x2e0>)
 8004790:	4b75      	ldr	r3, [pc, #468]	@ (8004968 <AT_Send+0x2d0>)
 8004792:	0019      	movs	r1, r3
 8004794:	2003      	movs	r0, #3
 8004796:	f005 f9c9 	bl	8009b2c <CreateLine>
    ATCommandSend = CWMODE1();
 800479a:	230f      	movs	r3, #15
 800479c:	18fc      	adds	r4, r7, r3
 800479e:	f7ff fc75 	bl	800408c <CWMODE1>
 80047a2:	0003      	movs	r3, r0
 80047a4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80047a6:	f005 fd47 	bl	800a238 <HAL_GetTick>
 80047aa:	0003      	movs	r3, r0
 80047ac:	330a      	adds	r3, #10
 80047ae:	001a      	movs	r2, r3
 80047b0:	4b6b      	ldr	r3, [pc, #428]	@ (8004960 <AT_Send+0x2c8>)
 80047b2:	601a      	str	r2, [r3, #0]
    break;
 80047b4:	e0ca      	b.n	800494c <AT_Send+0x2b4>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 80047b6:	4a70      	ldr	r2, [pc, #448]	@ (8004978 <AT_Send+0x2e0>)
 80047b8:	4b6b      	ldr	r3, [pc, #428]	@ (8004968 <AT_Send+0x2d0>)
 80047ba:	0019      	movs	r1, r3
 80047bc:	2003      	movs	r0, #3
 80047be:	f005 f9b5 	bl	8009b2c <CreateLine>
    ATCommandSend = CWMODE2();
 80047c2:	230f      	movs	r3, #15
 80047c4:	18fc      	adds	r4, r7, r3
 80047c6:	f7ff fc81 	bl	80040cc <CWMODE2>
 80047ca:	0003      	movs	r3, r0
 80047cc:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80047ce:	f005 fd33 	bl	800a238 <HAL_GetTick>
 80047d2:	0003      	movs	r3, r0
 80047d4:	330a      	adds	r3, #10
 80047d6:	001a      	movs	r2, r3
 80047d8:	4b61      	ldr	r3, [pc, #388]	@ (8004960 <AT_Send+0x2c8>)
 80047da:	601a      	str	r2, [r3, #0]
    break;
 80047dc:	e0b6      	b.n	800494c <AT_Send+0x2b4>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 80047de:	4a67      	ldr	r2, [pc, #412]	@ (800497c <AT_Send+0x2e4>)
 80047e0:	4b61      	ldr	r3, [pc, #388]	@ (8004968 <AT_Send+0x2d0>)
 80047e2:	0019      	movs	r1, r3
 80047e4:	2003      	movs	r0, #3
 80047e6:	f005 f9a1 	bl	8009b2c <CreateLine>
    ATCommandSend = CWAUTOCONN();
 80047ea:	230f      	movs	r3, #15
 80047ec:	18fc      	adds	r4, r7, r3
 80047ee:	f7ff fc8d 	bl	800410c <CWAUTOCONN>
 80047f2:	0003      	movs	r3, r0
 80047f4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80047f6:	f005 fd1f 	bl	800a238 <HAL_GetTick>
 80047fa:	0003      	movs	r3, r0
 80047fc:	330a      	adds	r3, #10
 80047fe:	001a      	movs	r2, r3
 8004800:	4b57      	ldr	r3, [pc, #348]	@ (8004960 <AT_Send+0x2c8>)
 8004802:	601a      	str	r2, [r3, #0]
    break;
 8004804:	e0a2      	b.n	800494c <AT_Send+0x2b4>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004806:	4a5e      	ldr	r2, [pc, #376]	@ (8004980 <AT_Send+0x2e8>)
 8004808:	4b57      	ldr	r3, [pc, #348]	@ (8004968 <AT_Send+0x2d0>)
 800480a:	0019      	movs	r1, r3
 800480c:	2003      	movs	r0, #3
 800480e:	f005 f98d 	bl	8009b2c <CreateLine>
    ATCommandSend = CWJAP();
 8004812:	230f      	movs	r3, #15
 8004814:	18fc      	adds	r4, r7, r3
 8004816:	f7ff fc99 	bl	800414c <CWJAP>
 800481a:	0003      	movs	r3, r0
 800481c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800481e:	f005 fd0b 	bl	800a238 <HAL_GetTick>
 8004822:	0003      	movs	r3, r0
 8004824:	3332      	adds	r3, #50	@ 0x32
 8004826:	001a      	movs	r2, r3
 8004828:	4b4d      	ldr	r3, [pc, #308]	@ (8004960 <AT_Send+0x2c8>)
 800482a:	601a      	str	r2, [r3, #0]
    break;
 800482c:	e08e      	b.n	800494c <AT_Send+0x2b4>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 800482e:	4a55      	ldr	r2, [pc, #340]	@ (8004984 <AT_Send+0x2ec>)
 8004830:	4b4d      	ldr	r3, [pc, #308]	@ (8004968 <AT_Send+0x2d0>)
 8004832:	0019      	movs	r1, r3
 8004834:	2003      	movs	r0, #3
 8004836:	f005 f979 	bl	8009b2c <CreateLine>
    ATCommandSend = CWMODE3();
 800483a:	230f      	movs	r3, #15
 800483c:	18fc      	adds	r4, r7, r3
 800483e:	f7ff fd0b 	bl	8004258 <CWMODE3>
 8004842:	0003      	movs	r3, r0
 8004844:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004846:	f005 fcf7 	bl	800a238 <HAL_GetTick>
 800484a:	0003      	movs	r3, r0
 800484c:	330a      	adds	r3, #10
 800484e:	001a      	movs	r2, r3
 8004850:	4b43      	ldr	r3, [pc, #268]	@ (8004960 <AT_Send+0x2c8>)
 8004852:	601a      	str	r2, [r3, #0]
    break;
 8004854:	e07a      	b.n	800494c <AT_Send+0x2b4>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8004856:	4a4c      	ldr	r2, [pc, #304]	@ (8004988 <AT_Send+0x2f0>)
 8004858:	4b43      	ldr	r3, [pc, #268]	@ (8004968 <AT_Send+0x2d0>)
 800485a:	0019      	movs	r1, r3
 800485c:	2003      	movs	r0, #3
 800485e:	f005 f965 	bl	8009b2c <CreateLine>
    ATCommandSend = CWSAP();
 8004862:	230f      	movs	r3, #15
 8004864:	18fc      	adds	r4, r7, r3
 8004866:	f7ff fd17 	bl	8004298 <CWSAP>
 800486a:	0003      	movs	r3, r0
 800486c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800486e:	f005 fce3 	bl	800a238 <HAL_GetTick>
 8004872:	0003      	movs	r3, r0
 8004874:	330a      	adds	r3, #10
 8004876:	001a      	movs	r2, r3
 8004878:	4b39      	ldr	r3, [pc, #228]	@ (8004960 <AT_Send+0x2c8>)
 800487a:	601a      	str	r2, [r3, #0]
    break;
 800487c:	e066      	b.n	800494c <AT_Send+0x2b4>

  case AT_CIPMUX:
    Debug("SET multiple communication channels");
 800487e:	4a43      	ldr	r2, [pc, #268]	@ (800498c <AT_Send+0x2f4>)
 8004880:	4b39      	ldr	r3, [pc, #228]	@ (8004968 <AT_Send+0x2d0>)
 8004882:	0019      	movs	r1, r3
 8004884:	2003      	movs	r0, #3
 8004886:	f005 f951 	bl	8009b2c <CreateLine>
    ATCommandSend = CIPMUX();
 800488a:	230f      	movs	r3, #15
 800488c:	18fc      	adds	r4, r7, r3
 800488e:	f7ff fd23 	bl	80042d8 <CIPMUX>
 8004892:	0003      	movs	r3, r0
 8004894:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004896:	f005 fccf 	bl	800a238 <HAL_GetTick>
 800489a:	0003      	movs	r3, r0
 800489c:	330a      	adds	r3, #10
 800489e:	001a      	movs	r2, r3
 80048a0:	4b2f      	ldr	r3, [pc, #188]	@ (8004960 <AT_Send+0x2c8>)
 80048a2:	601a      	str	r2, [r3, #0]
    break;
 80048a4:	e052      	b.n	800494c <AT_Send+0x2b4>

  case AT_WEBSERVER:
    Debug("SET in station/soft-ap mode");
 80048a6:	4a37      	ldr	r2, [pc, #220]	@ (8004984 <AT_Send+0x2ec>)
 80048a8:	4b2f      	ldr	r3, [pc, #188]	@ (8004968 <AT_Send+0x2d0>)
 80048aa:	0019      	movs	r1, r3
 80048ac:	2003      	movs	r0, #3
 80048ae:	f005 f93d 	bl	8009b2c <CreateLine>
    ATCommandSend = WEBSERVER();
 80048b2:	230f      	movs	r3, #15
 80048b4:	18fc      	adds	r4, r7, r3
 80048b6:	f7ff fd2f 	bl	8004318 <WEBSERVER>
 80048ba:	0003      	movs	r3, r0
 80048bc:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80048be:	f005 fcbb 	bl	800a238 <HAL_GetTick>
 80048c2:	0003      	movs	r3, r0
 80048c4:	330a      	adds	r3, #10
 80048c6:	001a      	movs	r2, r3
 80048c8:	4b25      	ldr	r3, [pc, #148]	@ (8004960 <AT_Send+0x2c8>)
 80048ca:	601a      	str	r2, [r3, #0]
    break;
 80048cc:	e03e      	b.n	800494c <AT_Send+0x2b4>

  case AT_HTTPCPOST:
    Debug("SET in station/soft-ap mode");
 80048ce:	4a2d      	ldr	r2, [pc, #180]	@ (8004984 <AT_Send+0x2ec>)
 80048d0:	4b25      	ldr	r3, [pc, #148]	@ (8004968 <AT_Send+0x2d0>)
 80048d2:	0019      	movs	r1, r3
 80048d4:	2003      	movs	r0, #3
 80048d6:	f005 f929 	bl	8009b2c <CreateLine>
    ATCommandSend = HTTPCPOST();
 80048da:	230f      	movs	r3, #15
 80048dc:	18fc      	adds	r4, r7, r3
 80048de:	f7ff fd3b 	bl	8004358 <HTTPCPOST>
 80048e2:	0003      	movs	r3, r0
 80048e4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80048e6:	f005 fca7 	bl	800a238 <HAL_GetTick>
 80048ea:	0003      	movs	r3, r0
 80048ec:	33f5      	adds	r3, #245	@ 0xf5
 80048ee:	33ff      	adds	r3, #255	@ 0xff
 80048f0:	001a      	movs	r2, r3
 80048f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004960 <AT_Send+0x2c8>)
 80048f4:	601a      	str	r2, [r3, #0]
    break;
 80048f6:	e029      	b.n	800494c <AT_Send+0x2b4>

  case AT_SENDDATA:
    Debug("Send the data");
 80048f8:	4a25      	ldr	r2, [pc, #148]	@ (8004990 <AT_Send+0x2f8>)
 80048fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004968 <AT_Send+0x2d0>)
 80048fc:	0019      	movs	r1, r3
 80048fe:	2003      	movs	r0, #3
 8004900:	f005 f914 	bl	8009b2c <CreateLine>
    ATCommandSend = SENDDATA();
 8004904:	230f      	movs	r3, #15
 8004906:	18fc      	adds	r4, r7, r3
 8004908:	f7ff fd88 	bl	800441c <SENDDATA>
 800490c:	0003      	movs	r3, r0
 800490e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004910:	f005 fc92 	bl	800a238 <HAL_GetTick>
 8004914:	0003      	movs	r3, r0
 8004916:	33f5      	adds	r3, #245	@ 0xf5
 8004918:	33ff      	adds	r3, #255	@ 0xff
 800491a:	001a      	movs	r2, r3
 800491c:	4b10      	ldr	r3, [pc, #64]	@ (8004960 <AT_Send+0x2c8>)
 800491e:	601a      	str	r2, [r3, #0]
    break;
 8004920:	e014      	b.n	800494c <AT_Send+0x2b4>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8004922:	4a1c      	ldr	r2, [pc, #112]	@ (8004994 <AT_Send+0x2fc>)
 8004924:	4b10      	ldr	r3, [pc, #64]	@ (8004968 <AT_Send+0x2d0>)
 8004926:	0019      	movs	r1, r3
 8004928:	2003      	movs	r0, #3
 800492a:	f005 f8ff 	bl	8009b2c <CreateLine>
    ATCommandSend = SLEEP();
 800492e:	230f      	movs	r3, #15
 8004930:	18fc      	adds	r4, r7, r3
 8004932:	f7ff fda3 	bl	800447c <SLEEP>
 8004936:	0003      	movs	r3, r0
 8004938:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800493a:	f005 fc7d 	bl	800a238 <HAL_GetTick>
 800493e:	0003      	movs	r3, r0
 8004940:	330a      	adds	r3, #10
 8004942:	001a      	movs	r2, r3
 8004944:	4b06      	ldr	r3, [pc, #24]	@ (8004960 <AT_Send+0x2c8>)
 8004946:	601a      	str	r2, [r3, #0]
    break;
 8004948:	e000      	b.n	800494c <AT_Send+0x2b4>
  break;
 800494a:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 800494c:	230f      	movs	r3, #15
 800494e:	18fb      	adds	r3, r7, r3
 8004950:	781b      	ldrb	r3, [r3, #0]
}
 8004952:	0018      	movs	r0, r3
 8004954:	46bd      	mov	sp, r7
 8004956:	b005      	add	sp, #20
 8004958:	bd90      	pop	{r4, r7, pc}
 800495a:	46c0      	nop			@ (mov r8, r8)
 800495c:	0801bf74 	.word	0x0801bf74
 8004960:	20000928 	.word	0x20000928
 8004964:	0801b6e0 	.word	0x0801b6e0
 8004968:	0801b2d8 	.word	0x0801b2d8
 800496c:	0801b6f4 	.word	0x0801b6f4
 8004970:	0801b708 	.word	0x0801b708
 8004974:	0801b718 	.word	0x0801b718
 8004978:	0801b72c 	.word	0x0801b72c
 800497c:	0801b744 	.word	0x0801b744
 8004980:	0801b75c 	.word	0x0801b75c
 8004984:	0801b770 	.word	0x0801b770
 8004988:	0801b78c 	.word	0x0801b78c
 800498c:	0801b7a8 	.word	0x0801b7a8
 8004990:	0801b7cc 	.word	0x0801b7cc
 8004994:	0801b7dc 	.word	0x0801b7dc

08004998 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8004998:	b590      	push	{r4, r7, lr}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
  bool ATSend = false;
 800499e:	1dfb      	adds	r3, r7, #7
 80049a0:	2200      	movs	r2, #0
 80049a2:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 80049a4:	4b79      	ldr	r3, [pc, #484]	@ (8004b8c <ESP_WakeTest+0x1f4>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	2b05      	cmp	r3, #5
 80049aa:	d900      	bls.n	80049ae <ESP_WakeTest+0x16>
 80049ac:	e0d4      	b.n	8004b58 <ESP_WakeTest+0x1c0>
 80049ae:	009a      	lsls	r2, r3, #2
 80049b0:	4b77      	ldr	r3, [pc, #476]	@ (8004b90 <ESP_WakeTest+0x1f8>)
 80049b2:	18d3      	adds	r3, r2, r3
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 80049b8:	4b76      	ldr	r3, [pc, #472]	@ (8004b94 <ESP_WakeTest+0x1fc>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	2201      	movs	r2, #1
 80049be:	4053      	eors	r3, r2
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d036      	beq.n	8004a34 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80049c6:	2380      	movs	r3, #128	@ 0x80
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	4873      	ldr	r0, [pc, #460]	@ (8004b98 <ESP_WakeTest+0x200>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	0019      	movs	r1, r3
 80049d0:	f006 ffd1 	bl	800b976 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80049d4:	2032      	movs	r0, #50	@ 0x32
 80049d6:	f005 fc39 	bl	800a24c <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80049da:	2380      	movs	r3, #128	@ 0x80
 80049dc:	011b      	lsls	r3, r3, #4
 80049de:	486e      	ldr	r0, [pc, #440]	@ (8004b98 <ESP_WakeTest+0x200>)
 80049e0:	2201      	movs	r2, #1
 80049e2:	0019      	movs	r1, r3
 80049e4:	f006 ffc7 	bl	800b976 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80049e8:	200a      	movs	r0, #10
 80049ea:	f005 fc2f 	bl	800a24c <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80049ee:	4b6b      	ldr	r3, [pc, #428]	@ (8004b9c <ESP_WakeTest+0x204>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	2101      	movs	r1, #1
 80049f4:	0018      	movs	r0, r3
 80049f6:	f006 ffbe 	bl	800b976 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 80049fa:	200a      	movs	r0, #10
 80049fc:	f005 fc26 	bl	800a24c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004a00:	4b66      	ldr	r3, [pc, #408]	@ (8004b9c <ESP_WakeTest+0x204>)
 8004a02:	2201      	movs	r2, #1
 8004a04:	2102      	movs	r1, #2
 8004a06:	0018      	movs	r0, r3
 8004a08:	f006 ffb5 	bl	800b976 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004a0c:	200a      	movs	r0, #10
 8004a0e:	f005 fc1d 	bl	800a24c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004a12:	4b62      	ldr	r3, [pc, #392]	@ (8004b9c <ESP_WakeTest+0x204>)
 8004a14:	2201      	movs	r2, #1
 8004a16:	2101      	movs	r1, #1
 8004a18:	0018      	movs	r0, r3
 8004a1a:	f006 ffac 	bl	800b976 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004a1e:	f005 fc0b 	bl	800a238 <HAL_GetTick>
 8004a22:	0003      	movs	r3, r0
 8004a24:	22af      	movs	r2, #175	@ 0xaf
 8004a26:	0092      	lsls	r2, r2, #2
 8004a28:	189a      	adds	r2, r3, r2
 8004a2a:	4b5d      	ldr	r3, [pc, #372]	@ (8004ba0 <ESP_WakeTest+0x208>)
 8004a2c:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004a2e:	4b59      	ldr	r3, [pc, #356]	@ (8004b94 <ESP_WakeTest+0x1fc>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004a34:	4b5b      	ldr	r3, [pc, #364]	@ (8004ba4 <ESP_WakeTest+0x20c>)
 8004a36:	21ff      	movs	r1, #255	@ 0xff
 8004a38:	0018      	movs	r0, r3
 8004a3a:	f7fe fedd 	bl	80037f8 <ESP_Receive>
 8004a3e:	1e03      	subs	r3, r0, #0
 8004a40:	d100      	bne.n	8004a44 <ESP_WakeTest+0xac>
 8004a42:	e099      	b.n	8004b78 <ESP_WakeTest+0x1e0>
        TestState = ESP_TEST_SEND;
 8004a44:	4b51      	ldr	r3, [pc, #324]	@ (8004b8c <ESP_WakeTest+0x1f4>)
 8004a46:	2201      	movs	r2, #1
 8004a48:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004a4a:	e095      	b.n	8004b78 <ESP_WakeTest+0x1e0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8004a4c:	4b54      	ldr	r3, [pc, #336]	@ (8004ba0 <ESP_WakeTest+0x208>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	0018      	movs	r0, r3
 8004a52:	f005 f815 	bl	8009a80 <TimestampIsReached>
 8004a56:	1e03      	subs	r3, r0, #0
 8004a58:	d100      	bne.n	8004a5c <ESP_WakeTest+0xc4>
 8004a5a:	e08f      	b.n	8004b7c <ESP_WakeTest+0x1e4>
        ATSend = AT_Send(ATCommand);
 8004a5c:	4b52      	ldr	r3, [pc, #328]	@ (8004ba8 <ESP_WakeTest+0x210>)
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	1dfc      	adds	r4, r7, #7
 8004a62:	0018      	movs	r0, r3
 8004a64:	f7ff fe18 	bl	8004698 <AT_Send>
 8004a68:	0003      	movs	r3, r0
 8004a6a:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004a6c:	1dfb      	adds	r3, r7, #7
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d100      	bne.n	8004a76 <ESP_WakeTest+0xde>
 8004a74:	e082      	b.n	8004b7c <ESP_WakeTest+0x1e4>
          TestState = ESP_TEST_RECEIVE;
 8004a76:	4b45      	ldr	r3, [pc, #276]	@ (8004b8c <ESP_WakeTest+0x1f4>)
 8004a78:	2202      	movs	r2, #2
 8004a7a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004a7c:	e07e      	b.n	8004b7c <ESP_WakeTest+0x1e4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8004a7e:	4b48      	ldr	r3, [pc, #288]	@ (8004ba0 <ESP_WakeTest+0x208>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	0018      	movs	r0, r3
 8004a84:	f004 fffc 	bl	8009a80 <TimestampIsReached>
 8004a88:	1e03      	subs	r3, r0, #0
 8004a8a:	d100      	bne.n	8004a8e <ESP_WakeTest+0xf6>
 8004a8c:	e078      	b.n	8004b80 <ESP_WakeTest+0x1e8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004a8e:	4b47      	ldr	r3, [pc, #284]	@ (8004bac <ESP_WakeTest+0x214>)
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	0018      	movs	r0, r3
 8004a94:	f7ff fd12 	bl	80044bc <DMA_ProcessBuffer>
 8004a98:	0003      	movs	r3, r0
 8004a9a:	001a      	movs	r2, r3
 8004a9c:	4b44      	ldr	r3, [pc, #272]	@ (8004bb0 <ESP_WakeTest+0x218>)
 8004a9e:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004aa0:	4b43      	ldr	r3, [pc, #268]	@ (8004bb0 <ESP_WakeTest+0x218>)
 8004aa2:	781a      	ldrb	r2, [r3, #0]
 8004aa4:	4b41      	ldr	r3, [pc, #260]	@ (8004bac <ESP_WakeTest+0x214>)
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	1dbc      	adds	r4, r7, #6
 8004aaa:	0019      	movs	r1, r3
 8004aac:	0010      	movs	r0, r2
 8004aae:	f7ff fdbd 	bl	800462c <ATCompare>
 8004ab2:	0003      	movs	r3, r0
 8004ab4:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004ab6:	4b3e      	ldr	r3, [pc, #248]	@ (8004bb0 <ESP_WakeTest+0x218>)
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d102      	bne.n	8004ac4 <ESP_WakeTest+0x12c>
          TestState = ESP_TEST_SEND;
 8004abe:	4b33      	ldr	r3, [pc, #204]	@ (8004b8c <ESP_WakeTest+0x1f4>)
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8004ac4:	4b3a      	ldr	r3, [pc, #232]	@ (8004bb0 <ESP_WakeTest+0x218>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	2b07      	cmp	r3, #7
 8004aca:	d104      	bne.n	8004ad6 <ESP_WakeTest+0x13e>
          StartProg();
 8004acc:	f7ff f8b0 	bl	8003c30 <StartProg>
          TestState = ESP_TEST_BOOT;
 8004ad0:	4b2e      	ldr	r3, [pc, #184]	@ (8004b8c <ESP_WakeTest+0x1f4>)
 8004ad2:	2205      	movs	r2, #5
 8004ad4:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004ad6:	4b36      	ldr	r3, [pc, #216]	@ (8004bb0 <ESP_WakeTest+0x218>)
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	2b03      	cmp	r3, #3
 8004adc:	d109      	bne.n	8004af2 <ESP_WakeTest+0x15a>
          ESPTimeStamp = HAL_GetTick() + 50;
 8004ade:	f005 fbab 	bl	800a238 <HAL_GetTick>
 8004ae2:	0003      	movs	r3, r0
 8004ae4:	3332      	adds	r3, #50	@ 0x32
 8004ae6:	001a      	movs	r2, r3
 8004ae8:	4b2d      	ldr	r3, [pc, #180]	@ (8004ba0 <ESP_WakeTest+0x208>)
 8004aea:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8004aec:	4b27      	ldr	r3, [pc, #156]	@ (8004b8c <ESP_WakeTest+0x1f4>)
 8004aee:	2201      	movs	r2, #1
 8004af0:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8004af2:	1dbb      	adds	r3, r7, #6
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d042      	beq.n	8004b80 <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_VALIDATE;
 8004afa:	4b24      	ldr	r3, [pc, #144]	@ (8004b8c <ESP_WakeTest+0x1f4>)
 8004afc:	2203      	movs	r2, #3
 8004afe:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004b00:	e03e      	b.n	8004b80 <ESP_WakeTest+0x1e8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = 4000;
 8004b02:	4b2c      	ldr	r3, [pc, #176]	@ (8004bb4 <ESP_WakeTest+0x21c>)
 8004b04:	22fa      	movs	r2, #250	@ 0xfa
 8004b06:	0112      	lsls	r2, r2, #4
 8004b08:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 0;
 8004b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8004bb4 <ESP_WakeTest+0x21c>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 4000;
 8004b10:	4b28      	ldr	r3, [pc, #160]	@ (8004bb4 <ESP_WakeTest+0x21c>)
 8004b12:	22fa      	movs	r2, #250	@ 0xfa
 8004b14:	0112      	lsls	r2, r2, #4
 8004b16:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8004b18:	4b1c      	ldr	r3, [pc, #112]	@ (8004b8c <ESP_WakeTest+0x1f4>)
 8004b1a:	2204      	movs	r2, #4
 8004b1c:	701a      	strb	r2, [r3, #0]

      break;
 8004b1e:	e030      	b.n	8004b82 <ESP_WakeTest+0x1ea>

    case ESP_TEST_DEINIT:
      testRound = false;
 8004b20:	4b25      	ldr	r3, [pc, #148]	@ (8004bb8 <ESP_WakeTest+0x220>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8004b26:	4b1b      	ldr	r3, [pc, #108]	@ (8004b94 <ESP_WakeTest+0x1fc>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8004b9c <ESP_WakeTest+0x204>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2101      	movs	r1, #1
 8004b32:	0018      	movs	r0, r3
 8004b34:	f006 ff1f 	bl	800b976 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004b38:	2380      	movs	r3, #128	@ 0x80
 8004b3a:	011b      	lsls	r3, r3, #4
 8004b3c:	4816      	ldr	r0, [pc, #88]	@ (8004b98 <ESP_WakeTest+0x200>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	0019      	movs	r1, r3
 8004b42:	f006 ff18 	bl	800b976 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8004b46:	4b15      	ldr	r3, [pc, #84]	@ (8004b9c <ESP_WakeTest+0x204>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	2102      	movs	r1, #2
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f006 ff12 	bl	800b976 <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 8004b52:	f002 f8bf 	bl	8006cd4 <SetESPMeasurementDone>
      break;
 8004b56:	e014      	b.n	8004b82 <ESP_WakeTest+0x1ea>

    default:
      TestState = ESP_TEST_INIT;
 8004b58:	4b0c      	ldr	r3, [pc, #48]	@ (8004b8c <ESP_WakeTest+0x1f4>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	701a      	strb	r2, [r3, #0]
      break;
 8004b5e:	e010      	b.n	8004b82 <ESP_WakeTest+0x1ea>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 8004b60:	4b14      	ldr	r3, [pc, #80]	@ (8004bb4 <ESP_WakeTest+0x21c>)
 8004b62:	22fa      	movs	r2, #250	@ 0xfa
 8004b64:	0112      	lsls	r2, r2, #4
 8004b66:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8004b68:	4b12      	ldr	r3, [pc, #72]	@ (8004bb4 <ESP_WakeTest+0x21c>)
 8004b6a:	22fa      	movs	r2, #250	@ 0xfa
 8004b6c:	0112      	lsls	r2, r2, #4
 8004b6e:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 8004b70:	4b10      	ldr	r3, [pc, #64]	@ (8004bb4 <ESP_WakeTest+0x21c>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 8004b76:	e004      	b.n	8004b82 <ESP_WakeTest+0x1ea>
      break;
 8004b78:	46c0      	nop			@ (mov r8, r8)
 8004b7a:	e002      	b.n	8004b82 <ESP_WakeTest+0x1ea>
      break;
 8004b7c:	46c0      	nop			@ (mov r8, r8)
 8004b7e:	e000      	b.n	8004b82 <ESP_WakeTest+0x1ea>
      break;
 8004b80:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004b82:	46c0      	nop			@ (mov r8, r8)
 8004b84:	46bd      	mov	sp, r7
 8004b86:	b003      	add	sp, #12
 8004b88:	bd90      	pop	{r4, r7, pc}
 8004b8a:	46c0      	nop			@ (mov r8, r8)
 8004b8c:	20000b34 	.word	0x20000b34
 8004b90:	0801bfb8 	.word	0x0801bfb8
 8004b94:	200004ef 	.word	0x200004ef
 8004b98:	50000800 	.word	0x50000800
 8004b9c:	50001c00 	.word	0x50001c00
 8004ba0:	20000928 	.word	0x20000928
 8004ba4:	200003f0 	.word	0x200003f0
 8004ba8:	20000b32 	.word	0x20000b32
 8004bac:	20000b31 	.word	0x20000b31
 8004bb0:	20000022 	.word	0x20000022
 8004bb4:	40000400 	.word	0x40000400
 8004bb8:	20000000 	.word	0x20000000

08004bbc <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8004bbc:	b590      	push	{r4, r7, lr}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004bc2:	1dfb      	adds	r3, r7, #7
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (EspState) {
 8004bc8:	4bc2      	ldr	r3, [pc, #776]	@ (8004ed4 <ESP_Upkeep+0x318>)
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	2b0e      	cmp	r3, #14
 8004bce:	d900      	bls.n	8004bd2 <ESP_Upkeep+0x16>
 8004bd0:	e266      	b.n	80050a0 <ESP_Upkeep+0x4e4>
 8004bd2:	009a      	lsls	r2, r3, #2
 8004bd4:	4bc0      	ldr	r3, [pc, #768]	@ (8004ed8 <ESP_Upkeep+0x31c>)
 8004bd6:	18d3      	adds	r3, r2, r3
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8004bdc:	4bbd      	ldr	r3, [pc, #756]	@ (8004ed4 <ESP_Upkeep+0x318>)
 8004bde:	2201      	movs	r2, #1
 8004be0:	701a      	strb	r2, [r3, #0]
      break;
 8004be2:	e274      	b.n	80050ce <ESP_Upkeep+0x512>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 8004be4:	4bbd      	ldr	r3, [pc, #756]	@ (8004edc <ESP_Upkeep+0x320>)
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	2201      	movs	r2, #1
 8004bea:	4053      	eors	r3, r2
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d036      	beq.n	8004c60 <ESP_Upkeep+0xa4>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004bf2:	2380      	movs	r3, #128	@ 0x80
 8004bf4:	011b      	lsls	r3, r3, #4
 8004bf6:	48ba      	ldr	r0, [pc, #744]	@ (8004ee0 <ESP_Upkeep+0x324>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	0019      	movs	r1, r3
 8004bfc:	f006 febb 	bl	800b976 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004c00:	2001      	movs	r0, #1
 8004c02:	f005 fb23 	bl	800a24c <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004c06:	2380      	movs	r3, #128	@ 0x80
 8004c08:	011b      	lsls	r3, r3, #4
 8004c0a:	48b5      	ldr	r0, [pc, #724]	@ (8004ee0 <ESP_Upkeep+0x324>)
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	0019      	movs	r1, r3
 8004c10:	f006 feb1 	bl	800b976 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004c14:	2001      	movs	r0, #1
 8004c16:	f005 fb19 	bl	800a24c <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004c1a:	4bb2      	ldr	r3, [pc, #712]	@ (8004ee4 <ESP_Upkeep+0x328>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	2101      	movs	r1, #1
 8004c20:	0018      	movs	r0, r3
 8004c22:	f006 fea8 	bl	800b976 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004c26:	2001      	movs	r0, #1
 8004c28:	f005 fb10 	bl	800a24c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004c2c:	4bad      	ldr	r3, [pc, #692]	@ (8004ee4 <ESP_Upkeep+0x328>)
 8004c2e:	2201      	movs	r2, #1
 8004c30:	2102      	movs	r1, #2
 8004c32:	0018      	movs	r0, r3
 8004c34:	f006 fe9f 	bl	800b976 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8004c38:	2001      	movs	r0, #1
 8004c3a:	f005 fb07 	bl	800a24c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004c3e:	4ba9      	ldr	r3, [pc, #676]	@ (8004ee4 <ESP_Upkeep+0x328>)
 8004c40:	2201      	movs	r2, #1
 8004c42:	2101      	movs	r1, #1
 8004c44:	0018      	movs	r0, r3
 8004c46:	f006 fe96 	bl	800b976 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004c4a:	f005 faf5 	bl	800a238 <HAL_GetTick>
 8004c4e:	0003      	movs	r3, r0
 8004c50:	22af      	movs	r2, #175	@ 0xaf
 8004c52:	0092      	lsls	r2, r2, #2
 8004c54:	189a      	adds	r2, r3, r2
 8004c56:	4ba4      	ldr	r3, [pc, #656]	@ (8004ee8 <ESP_Upkeep+0x32c>)
 8004c58:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004c5a:	4ba0      	ldr	r3, [pc, #640]	@ (8004edc <ESP_Upkeep+0x320>)
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004c60:	4ba2      	ldr	r3, [pc, #648]	@ (8004eec <ESP_Upkeep+0x330>)
 8004c62:	21ff      	movs	r1, #255	@ 0xff
 8004c64:	0018      	movs	r0, r3
 8004c66:	f7fe fdc7 	bl	80037f8 <ESP_Receive>
 8004c6a:	1e03      	subs	r3, r0, #0
 8004c6c:	d100      	bne.n	8004c70 <ESP_Upkeep+0xb4>
 8004c6e:	e223      	b.n	80050b8 <ESP_Upkeep+0x4fc>
        EspState = ESP_STATE_MODE_SELECT;
 8004c70:	4b98      	ldr	r3, [pc, #608]	@ (8004ed4 <ESP_Upkeep+0x318>)
 8004c72:	220b      	movs	r2, #11
 8004c74:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004c76:	e21f      	b.n	80050b8 <ESP_Upkeep+0x4fc>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 8004c78:	4b9d      	ldr	r3, [pc, #628]	@ (8004ef0 <ESP_Upkeep+0x334>)
 8004c7a:	2209      	movs	r2, #9
 8004c7c:	2111      	movs	r1, #17
 8004c7e:	0018      	movs	r0, r3
 8004c80:	f013 fc14 	bl	80184ac <memset>
      if(!InitIsDone || WifiReset){
 8004c84:	4b9b      	ldr	r3, [pc, #620]	@ (8004ef4 <ESP_Upkeep+0x338>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	4053      	eors	r3, r2
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d103      	bne.n	8004c9a <ESP_Upkeep+0xde>
 8004c92:	4b99      	ldr	r3, [pc, #612]	@ (8004ef8 <ESP_Upkeep+0x33c>)
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d01a      	beq.n	8004cd0 <ESP_Upkeep+0x114>
        memcpy(ATCommandArray, AT_INIT, 7);
 8004c9a:	4b95      	ldr	r3, [pc, #596]	@ (8004ef0 <ESP_Upkeep+0x334>)
 8004c9c:	4a97      	ldr	r2, [pc, #604]	@ (8004efc <ESP_Upkeep+0x340>)
 8004c9e:	6811      	ldr	r1, [r2, #0]
 8004ca0:	6019      	str	r1, [r3, #0]
 8004ca2:	8891      	ldrh	r1, [r2, #4]
 8004ca4:	8099      	strh	r1, [r3, #4]
 8004ca6:	7992      	ldrb	r2, [r2, #6]
 8004ca8:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8004caa:	4b8a      	ldr	r3, [pc, #552]	@ (8004ed4 <ESP_Upkeep+0x318>)
 8004cac:	2204      	movs	r2, #4
 8004cae:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004cb0:	4b93      	ldr	r3, [pc, #588]	@ (8004f00 <ESP_Upkeep+0x344>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8004cb6:	4b93      	ldr	r3, [pc, #588]	@ (8004f04 <ESP_Upkeep+0x348>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004cbc:	4b90      	ldr	r3, [pc, #576]	@ (8004f00 <ESP_Upkeep+0x344>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	001a      	movs	r2, r3
 8004cc2:	4b8b      	ldr	r3, [pc, #556]	@ (8004ef0 <ESP_Upkeep+0x334>)
 8004cc4:	5c9a      	ldrb	r2, [r3, r2]
 8004cc6:	4b90      	ldr	r3, [pc, #576]	@ (8004f08 <ESP_Upkeep+0x34c>)
 8004cc8:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004cca:	4b90      	ldr	r3, [pc, #576]	@ (8004f0c <ESP_Upkeep+0x350>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8004cd0:	4b88      	ldr	r3, [pc, #544]	@ (8004ef4 <ESP_Upkeep+0x338>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d01f      	beq.n	8004d18 <ESP_Upkeep+0x15c>
 8004cd8:	4b8d      	ldr	r3, [pc, #564]	@ (8004f10 <ESP_Upkeep+0x354>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	4053      	eors	r3, r2
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d018      	beq.n	8004d18 <ESP_Upkeep+0x15c>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8004ce6:	4b82      	ldr	r3, [pc, #520]	@ (8004ef0 <ESP_Upkeep+0x334>)
 8004ce8:	4a8a      	ldr	r2, [pc, #552]	@ (8004f14 <ESP_Upkeep+0x358>)
 8004cea:	6811      	ldr	r1, [r2, #0]
 8004cec:	6019      	str	r1, [r3, #0]
 8004cee:	8892      	ldrh	r2, [r2, #4]
 8004cf0:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8004cf2:	4b78      	ldr	r3, [pc, #480]	@ (8004ed4 <ESP_Upkeep+0x318>)
 8004cf4:	2204      	movs	r2, #4
 8004cf6:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004cf8:	4b81      	ldr	r3, [pc, #516]	@ (8004f00 <ESP_Upkeep+0x344>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8004cfe:	4b81      	ldr	r3, [pc, #516]	@ (8004f04 <ESP_Upkeep+0x348>)
 8004d00:	2201      	movs	r2, #1
 8004d02:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004d04:	4b7e      	ldr	r3, [pc, #504]	@ (8004f00 <ESP_Upkeep+0x344>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	001a      	movs	r2, r3
 8004d0a:	4b79      	ldr	r3, [pc, #484]	@ (8004ef0 <ESP_Upkeep+0x334>)
 8004d0c:	5c9a      	ldrb	r2, [r3, r2]
 8004d0e:	4b7e      	ldr	r3, [pc, #504]	@ (8004f08 <ESP_Upkeep+0x34c>)
 8004d10:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004d12:	4b7e      	ldr	r3, [pc, #504]	@ (8004f0c <ESP_Upkeep+0x350>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 8004d18:	4b76      	ldr	r3, [pc, #472]	@ (8004ef4 <ESP_Upkeep+0x338>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d021      	beq.n	8004d64 <ESP_Upkeep+0x1a8>
 8004d20:	4b7b      	ldr	r3, [pc, #492]	@ (8004f10 <ESP_Upkeep+0x354>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01d      	beq.n	8004d64 <ESP_Upkeep+0x1a8>
 8004d28:	4b7b      	ldr	r3, [pc, #492]	@ (8004f18 <ESP_Upkeep+0x35c>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	4053      	eors	r3, r2
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d016      	beq.n	8004d64 <ESP_Upkeep+0x1a8>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 8004d36:	4b79      	ldr	r3, [pc, #484]	@ (8004f1c <ESP_Upkeep+0x360>)
 8004d38:	881a      	ldrh	r2, [r3, #0]
 8004d3a:	4b6d      	ldr	r3, [pc, #436]	@ (8004ef0 <ESP_Upkeep+0x334>)
 8004d3c:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8004d3e:	4b65      	ldr	r3, [pc, #404]	@ (8004ed4 <ESP_Upkeep+0x318>)
 8004d40:	2204      	movs	r2, #4
 8004d42:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004d44:	4b6e      	ldr	r3, [pc, #440]	@ (8004f00 <ESP_Upkeep+0x344>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 8004d4a:	4b6e      	ldr	r3, [pc, #440]	@ (8004f04 <ESP_Upkeep+0x348>)
 8004d4c:	2204      	movs	r2, #4
 8004d4e:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004d50:	4b6b      	ldr	r3, [pc, #428]	@ (8004f00 <ESP_Upkeep+0x344>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	001a      	movs	r2, r3
 8004d56:	4b66      	ldr	r3, [pc, #408]	@ (8004ef0 <ESP_Upkeep+0x334>)
 8004d58:	5c9a      	ldrb	r2, [r3, r2]
 8004d5a:	4b6b      	ldr	r3, [pc, #428]	@ (8004f08 <ESP_Upkeep+0x34c>)
 8004d5c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004d5e:	4b6b      	ldr	r3, [pc, #428]	@ (8004f0c <ESP_Upkeep+0x350>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest){
 8004d64:	4b63      	ldr	r3, [pc, #396]	@ (8004ef4 <ESP_Upkeep+0x338>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d022      	beq.n	8004db2 <ESP_Upkeep+0x1f6>
 8004d6c:	4b68      	ldr	r3, [pc, #416]	@ (8004f10 <ESP_Upkeep+0x354>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01e      	beq.n	8004db2 <ESP_Upkeep+0x1f6>
 8004d74:	4b68      	ldr	r3, [pc, #416]	@ (8004f18 <ESP_Upkeep+0x35c>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d01a      	beq.n	8004db2 <ESP_Upkeep+0x1f6>
        memcpy(ATCommandArray, AT_SEND, 3);
 8004d7c:	4b5c      	ldr	r3, [pc, #368]	@ (8004ef0 <ESP_Upkeep+0x334>)
 8004d7e:	4a68      	ldr	r2, [pc, #416]	@ (8004f20 <ESP_Upkeep+0x364>)
 8004d80:	8811      	ldrh	r1, [r2, #0]
 8004d82:	8019      	strh	r1, [r3, #0]
 8004d84:	7892      	ldrb	r2, [r2, #2]
 8004d86:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8004d88:	4b52      	ldr	r3, [pc, #328]	@ (8004ed4 <ESP_Upkeep+0x318>)
 8004d8a:	2204      	movs	r2, #4
 8004d8c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004d8e:	4b5c      	ldr	r3, [pc, #368]	@ (8004f00 <ESP_Upkeep+0x344>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8004d94:	4b5b      	ldr	r3, [pc, #364]	@ (8004f04 <ESP_Upkeep+0x348>)
 8004d96:	2202      	movs	r2, #2
 8004d98:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 8004d9a:	f004 f89d 	bl	8008ed8 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8004d9e:	4b58      	ldr	r3, [pc, #352]	@ (8004f00 <ESP_Upkeep+0x344>)
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	001a      	movs	r2, r3
 8004da4:	4b52      	ldr	r3, [pc, #328]	@ (8004ef0 <ESP_Upkeep+0x334>)
 8004da6:	5c9a      	ldrb	r2, [r3, r2]
 8004da8:	4b57      	ldr	r3, [pc, #348]	@ (8004f08 <ESP_Upkeep+0x34c>)
 8004daa:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004dac:	4b57      	ldr	r3, [pc, #348]	@ (8004f0c <ESP_Upkeep+0x350>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8004db2:	4b5c      	ldr	r3, [pc, #368]	@ (8004f24 <ESP_Upkeep+0x368>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d100      	bne.n	8004dbc <ESP_Upkeep+0x200>
 8004dba:	e17f      	b.n	80050bc <ESP_Upkeep+0x500>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8004dbc:	4b4c      	ldr	r3, [pc, #304]	@ (8004ef0 <ESP_Upkeep+0x334>)
 8004dbe:	4a5a      	ldr	r2, [pc, #360]	@ (8004f28 <ESP_Upkeep+0x36c>)
 8004dc0:	6811      	ldr	r1, [r2, #0]
 8004dc2:	6019      	str	r1, [r3, #0]
 8004dc4:	7912      	ldrb	r2, [r2, #4]
 8004dc6:	711a      	strb	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8004dc8:	4b42      	ldr	r3, [pc, #264]	@ (8004ed4 <ESP_Upkeep+0x318>)
 8004dca:	2204      	movs	r2, #4
 8004dcc:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004dce:	4b4c      	ldr	r3, [pc, #304]	@ (8004f00 <ESP_Upkeep+0x344>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8004dd4:	4b4b      	ldr	r3, [pc, #300]	@ (8004f04 <ESP_Upkeep+0x348>)
 8004dd6:	2203      	movs	r2, #3
 8004dd8:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 8004dda:	f004 f87d 	bl	8008ed8 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8004dde:	4b48      	ldr	r3, [pc, #288]	@ (8004f00 <ESP_Upkeep+0x344>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	001a      	movs	r2, r3
 8004de4:	4b42      	ldr	r3, [pc, #264]	@ (8004ef0 <ESP_Upkeep+0x334>)
 8004de6:	5c9a      	ldrb	r2, [r3, r2]
 8004de8:	4b47      	ldr	r3, [pc, #284]	@ (8004f08 <ESP_Upkeep+0x34c>)
 8004dea:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004dec:	4b47      	ldr	r3, [pc, #284]	@ (8004f0c <ESP_Upkeep+0x350>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	701a      	strb	r2, [r3, #0]
      }

    break;
 8004df2:	e163      	b.n	80050bc <ESP_Upkeep+0x500>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 8004df4:	4b44      	ldr	r3, [pc, #272]	@ (8004f08 <ESP_Upkeep+0x34c>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	1dfc      	adds	r4, r7, #7
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	f7ff fc4c 	bl	8004698 <AT_Send>
 8004e00:	0003      	movs	r3, r0
 8004e02:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004e04:	1dfb      	adds	r3, r7, #7
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d100      	bne.n	8004e0e <ESP_Upkeep+0x252>
 8004e0c:	e158      	b.n	80050c0 <ESP_Upkeep+0x504>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8004e0e:	4b31      	ldr	r3, [pc, #196]	@ (8004ed4 <ESP_Upkeep+0x318>)
 8004e10:	2203      	movs	r2, #3
 8004e12:	701a      	strb	r2, [r3, #0]
        }
         break;
 8004e14:	e154      	b.n	80050c0 <ESP_Upkeep+0x504>


    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 8004e16:	4b34      	ldr	r3, [pc, #208]	@ (8004ee8 <ESP_Upkeep+0x32c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	f004 fe30 	bl	8009a80 <TimestampIsReached>
 8004e20:	1e03      	subs	r3, r0, #0
 8004e22:	d100      	bne.n	8004e26 <ESP_Upkeep+0x26a>
 8004e24:	e14e      	b.n	80050c4 <ESP_Upkeep+0x508>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004e26:	4b39      	ldr	r3, [pc, #228]	@ (8004f0c <ESP_Upkeep+0x350>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	f7ff fb46 	bl	80044bc <DMA_ProcessBuffer>
 8004e30:	0003      	movs	r3, r0
 8004e32:	001a      	movs	r2, r3
 8004e34:	4b3d      	ldr	r3, [pc, #244]	@ (8004f2c <ESP_Upkeep+0x370>)
 8004e36:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004e38:	4b3c      	ldr	r3, [pc, #240]	@ (8004f2c <ESP_Upkeep+0x370>)
 8004e3a:	781a      	ldrb	r2, [r3, #0]
 8004e3c:	4b33      	ldr	r3, [pc, #204]	@ (8004f0c <ESP_Upkeep+0x350>)
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	1dbc      	adds	r4, r7, #6
 8004e42:	0019      	movs	r1, r3
 8004e44:	0010      	movs	r0, r2
 8004e46:	f7ff fbf1 	bl	800462c <ATCompare>
 8004e4a:	0003      	movs	r3, r0
 8004e4c:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004e4e:	4b37      	ldr	r3, [pc, #220]	@ (8004f2c <ESP_Upkeep+0x370>)
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d10f      	bne.n	8004e76 <ESP_Upkeep+0x2ba>
          if(ATCommand == AT_SENDDATA){
 8004e56:	4b2c      	ldr	r3, [pc, #176]	@ (8004f08 <ESP_Upkeep+0x34c>)
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	2b0f      	cmp	r3, #15
 8004e5c:	d108      	bne.n	8004e70 <ESP_Upkeep+0x2b4>
            ATCommand = AT_HTTPCPOST;
 8004e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8004f08 <ESP_Upkeep+0x34c>)
 8004e60:	220e      	movs	r2, #14
 8004e62:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8004e64:	4b29      	ldr	r3, [pc, #164]	@ (8004f0c <ESP_Upkeep+0x350>)
 8004e66:	2202      	movs	r2, #2
 8004e68:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8004e6a:	4b25      	ldr	r3, [pc, #148]	@ (8004f00 <ESP_Upkeep+0x344>)
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8004e70:	4b18      	ldr	r3, [pc, #96]	@ (8004ed4 <ESP_Upkeep+0x318>)
 8004e72:	2204      	movs	r2, #4
 8004e74:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004e76:	4b2d      	ldr	r3, [pc, #180]	@ (8004f2c <ESP_Upkeep+0x370>)
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d106      	bne.n	8004e8c <ESP_Upkeep+0x2d0>
          ESPTimeStamp = HAL_GetTick() + 10;
 8004e7e:	f005 f9db 	bl	800a238 <HAL_GetTick>
 8004e82:	0003      	movs	r3, r0
 8004e84:	330a      	adds	r3, #10
 8004e86:	001a      	movs	r2, r3
 8004e88:	4b17      	ldr	r3, [pc, #92]	@ (8004ee8 <ESP_Upkeep+0x32c>)
 8004e8a:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8004e8c:	4b27      	ldr	r3, [pc, #156]	@ (8004f2c <ESP_Upkeep+0x370>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	2b06      	cmp	r3, #6
 8004e92:	d116      	bne.n	8004ec2 <ESP_Upkeep+0x306>
          if(ATCommand != AT_SENDDATA){
 8004e94:	4b1c      	ldr	r3, [pc, #112]	@ (8004f08 <ESP_Upkeep+0x34c>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b0f      	cmp	r3, #15
 8004e9a:	d003      	beq.n	8004ea4 <ESP_Upkeep+0x2e8>
            EspState = ESP_STATE_SEND;
 8004e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed4 <ESP_Upkeep+0x318>)
 8004e9e:	2204      	movs	r2, #4
 8004ea0:	701a      	strb	r2, [r3, #0]
 8004ea2:	e00e      	b.n	8004ec2 <ESP_Upkeep+0x306>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8004ea4:	4b18      	ldr	r3, [pc, #96]	@ (8004f08 <ESP_Upkeep+0x34c>)
 8004ea6:	220e      	movs	r2, #14
 8004ea8:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8004eaa:	4b15      	ldr	r3, [pc, #84]	@ (8004f00 <ESP_Upkeep+0x344>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	4b13      	ldr	r3, [pc, #76]	@ (8004f00 <ESP_Upkeep+0x344>)
 8004eb4:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8004eb6:	4b15      	ldr	r3, [pc, #84]	@ (8004f0c <ESP_Upkeep+0x350>)
 8004eb8:	2202      	movs	r2, #2
 8004eba:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8004ebc:	4b05      	ldr	r3, [pc, #20]	@ (8004ed4 <ESP_Upkeep+0x318>)
 8004ebe:	2204      	movs	r2, #4
 8004ec0:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8004ec2:	1dbb      	adds	r3, r7, #6
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d100      	bne.n	8004ecc <ESP_Upkeep+0x310>
 8004eca:	e0fb      	b.n	80050c4 <ESP_Upkeep+0x508>
          EspState = ESP_STATE_NEXT_AT;
 8004ecc:	4b01      	ldr	r3, [pc, #4]	@ (8004ed4 <ESP_Upkeep+0x318>)
 8004ece:	2205      	movs	r2, #5
 8004ed0:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004ed2:	e0f7      	b.n	80050c4 <ESP_Upkeep+0x508>
 8004ed4:	20000021 	.word	0x20000021
 8004ed8:	0801bfd0 	.word	0x0801bfd0
 8004edc:	200004ef 	.word	0x200004ef
 8004ee0:	50000800 	.word	0x50000800
 8004ee4:	50001c00 	.word	0x50001c00
 8004ee8:	20000928 	.word	0x20000928
 8004eec:	200003f0 	.word	0x200003f0
 8004ef0:	2000091c 	.word	0x2000091c
 8004ef4:	200004f0 	.word	0x200004f0
 8004ef8:	200004f1 	.word	0x200004f1
 8004efc:	20000004 	.word	0x20000004
 8004f00:	20000926 	.word	0x20000926
 8004f04:	20000b33 	.word	0x20000b33
 8004f08:	20000b32 	.word	0x20000b32
 8004f0c:	20000b31 	.word	0x20000b31
 8004f10:	200004f3 	.word	0x200004f3
 8004f14:	20000014 	.word	0x20000014
 8004f18:	200004f4 	.word	0x200004f4
 8004f1c:	20000010 	.word	0x20000010
 8004f20:	2000000c 	.word	0x2000000c
 8004f24:	200004f2 	.word	0x200004f2
 8004f28:	2000001c 	.word	0x2000001c
 8004f2c:	20000023 	.word	0x20000023

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8004f30:	4b6a      	ldr	r3, [pc, #424]	@ (80050dc <ESP_Upkeep+0x520>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	3301      	adds	r3, #1
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	4b68      	ldr	r3, [pc, #416]	@ (80050dc <ESP_Upkeep+0x520>)
 8004f3a:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8004f3c:	4b67      	ldr	r3, [pc, #412]	@ (80050dc <ESP_Upkeep+0x520>)
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	001a      	movs	r2, r3
 8004f42:	4b67      	ldr	r3, [pc, #412]	@ (80050e0 <ESP_Upkeep+0x524>)
 8004f44:	5c9a      	ldrb	r2, [r3, r2]
 8004f46:	4b67      	ldr	r3, [pc, #412]	@ (80050e4 <ESP_Upkeep+0x528>)
 8004f48:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8004f4a:	4b66      	ldr	r3, [pc, #408]	@ (80050e4 <ESP_Upkeep+0x528>)
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b03      	cmp	r3, #3
 8004f50:	d102      	bne.n	8004f58 <ESP_Upkeep+0x39c>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8004f52:	4b65      	ldr	r3, [pc, #404]	@ (80050e8 <ESP_Upkeep+0x52c>)
 8004f54:	2201      	movs	r2, #1
 8004f56:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8004f58:	4b62      	ldr	r3, [pc, #392]	@ (80050e4 <ESP_Upkeep+0x528>)
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b0e      	cmp	r3, #14
 8004f5e:	d102      	bne.n	8004f66 <ESP_Upkeep+0x3aa>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8004f60:	4b61      	ldr	r3, [pc, #388]	@ (80050e8 <ESP_Upkeep+0x52c>)
 8004f62:	2202      	movs	r2, #2
 8004f64:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8004f66:	4b5f      	ldr	r3, [pc, #380]	@ (80050e4 <ESP_Upkeep+0x528>)
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2b0e      	cmp	r3, #14
 8004f6c:	d006      	beq.n	8004f7c <ESP_Upkeep+0x3c0>
 8004f6e:	4b5d      	ldr	r3, [pc, #372]	@ (80050e4 <ESP_Upkeep+0x528>)
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	2b03      	cmp	r3, #3
 8004f74:	d002      	beq.n	8004f7c <ESP_Upkeep+0x3c0>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004f76:	4b5c      	ldr	r3, [pc, #368]	@ (80050e8 <ESP_Upkeep+0x52c>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8004f7c:	4b5b      	ldr	r3, [pc, #364]	@ (80050ec <ESP_Upkeep+0x530>)
 8004f7e:	2204      	movs	r2, #4
 8004f80:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8004f82:	4b58      	ldr	r3, [pc, #352]	@ (80050e4 <ESP_Upkeep+0x528>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	2b11      	cmp	r3, #17
 8004f88:	d000      	beq.n	8004f8c <ESP_Upkeep+0x3d0>
 8004f8a:	e09d      	b.n	80050c8 <ESP_Upkeep+0x50c>
        if(Mode == AT_MODE_SEND){
 8004f8c:	4b58      	ldr	r3, [pc, #352]	@ (80050f0 <ESP_Upkeep+0x534>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d10c      	bne.n	8004fae <ESP_Upkeep+0x3f2>
          ESPTimeStamp = HAL_GetTick() + 300000;
 8004f94:	f005 f950 	bl	800a238 <HAL_GetTick>
 8004f98:	0003      	movs	r3, r0
 8004f9a:	4a56      	ldr	r2, [pc, #344]	@ (80050f4 <ESP_Upkeep+0x538>)
 8004f9c:	189a      	adds	r2, r3, r2
 8004f9e:	4b56      	ldr	r3, [pc, #344]	@ (80050f8 <ESP_Upkeep+0x53c>)
 8004fa0:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 8004fa2:	f003 ffb1 	bl	8008f08 <ResetESPIndicator>
          EspState = ESP_STATE_DEINIT;
 8004fa6:	4b51      	ldr	r3, [pc, #324]	@ (80050ec <ESP_Upkeep+0x530>)
 8004fa8:	220d      	movs	r2, #13
 8004faa:	701a      	strb	r2, [r3, #0]
        }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8004fac:	e08c      	b.n	80050c8 <ESP_Upkeep+0x50c>
          EspState = ESP_STATE_RESET;
 8004fae:	4b4f      	ldr	r3, [pc, #316]	@ (80050ec <ESP_Upkeep+0x530>)
 8004fb0:	2209      	movs	r2, #9
 8004fb2:	701a      	strb	r2, [r3, #0]
    break;
 8004fb4:	e088      	b.n	80050c8 <ESP_Upkeep+0x50c>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 8004fb6:	4b51      	ldr	r3, [pc, #324]	@ (80050fc <ESP_Upkeep+0x540>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004fbc:	4b50      	ldr	r3, [pc, #320]	@ (8005100 <ESP_Upkeep+0x544>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	f006 fcd7 	bl	800b976 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004fc8:	2001      	movs	r0, #1
 8004fca:	f005 f93f 	bl	800a24c <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004fce:	2380      	movs	r3, #128	@ 0x80
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	484c      	ldr	r0, [pc, #304]	@ (8005104 <ESP_Upkeep+0x548>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	0019      	movs	r1, r3
 8004fd8:	f006 fccd 	bl	800b976 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004fdc:	2001      	movs	r0, #1
 8004fde:	f005 f935 	bl	800a24c <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8004fe2:	4b47      	ldr	r3, [pc, #284]	@ (8005100 <ESP_Upkeep+0x544>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	2102      	movs	r1, #2
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f006 fcc4 	bl	800b976 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8004fee:	4b3f      	ldr	r3, [pc, #252]	@ (80050ec <ESP_Upkeep+0x530>)
 8004ff0:	2209      	movs	r2, #9
 8004ff2:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8004ff4:	2001      	movs	r0, #1
 8004ff6:	f005 f929 	bl	800a24c <HAL_Delay>
      break;
 8004ffa:	e068      	b.n	80050ce <ESP_Upkeep+0x512>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8004ffc:	4b3e      	ldr	r3, [pc, #248]	@ (80050f8 <ESP_Upkeep+0x53c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	0018      	movs	r0, r3
 8005002:	f004 fd3d 	bl	8009a80 <TimestampIsReached>
 8005006:	1e03      	subs	r3, r0, #0
 8005008:	d103      	bne.n	8005012 <ESP_Upkeep+0x456>
 800500a:	4b3f      	ldr	r3, [pc, #252]	@ (8005108 <ESP_Upkeep+0x54c>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d05c      	beq.n	80050cc <ESP_Upkeep+0x510>
        if(Mode == AT_MODE_INIT){
 8005012:	4b37      	ldr	r3, [pc, #220]	@ (80050f0 <ESP_Upkeep+0x534>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d105      	bne.n	8005026 <ESP_Upkeep+0x46a>
          InitIsDone = true;
 800501a:	4b3c      	ldr	r3, [pc, #240]	@ (800510c <ESP_Upkeep+0x550>)
 800501c:	2201      	movs	r2, #1
 800501e:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005020:	4b32      	ldr	r3, [pc, #200]	@ (80050ec <ESP_Upkeep+0x530>)
 8005022:	220b      	movs	r2, #11
 8005024:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005026:	4b32      	ldr	r3, [pc, #200]	@ (80050f0 <ESP_Upkeep+0x534>)
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d108      	bne.n	8005040 <ESP_Upkeep+0x484>
          ConnectionMade = true;
 800502e:	4b38      	ldr	r3, [pc, #224]	@ (8005110 <ESP_Upkeep+0x554>)
 8005030:	2201      	movs	r2, #1
 8005032:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005034:	4b37      	ldr	r3, [pc, #220]	@ (8005114 <ESP_Upkeep+0x558>)
 8005036:	2201      	movs	r2, #1
 8005038:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 800503a:	4b2c      	ldr	r3, [pc, #176]	@ (80050ec <ESP_Upkeep+0x530>)
 800503c:	220b      	movs	r2, #11
 800503e:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005040:	4b2b      	ldr	r3, [pc, #172]	@ (80050f0 <ESP_Upkeep+0x534>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	2b02      	cmp	r3, #2
 8005046:	d102      	bne.n	800504e <ESP_Upkeep+0x492>
          EspState = ESP_STATE_INIT;
 8005048:	4b28      	ldr	r3, [pc, #160]	@ (80050ec <ESP_Upkeep+0x530>)
 800504a:	2202      	movs	r2, #2
 800504c:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 800504e:	4b28      	ldr	r3, [pc, #160]	@ (80050f0 <ESP_Upkeep+0x534>)
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	2b03      	cmp	r3, #3
 8005054:	d102      	bne.n	800505c <ESP_Upkeep+0x4a0>
          EspState = ESP_STATE_CONFIG;
 8005056:	4b25      	ldr	r3, [pc, #148]	@ (80050ec <ESP_Upkeep+0x530>)
 8005058:	220e      	movs	r2, #14
 800505a:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_TEST){
 800505c:	4b24      	ldr	r3, [pc, #144]	@ (80050f0 <ESP_Upkeep+0x534>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	2b04      	cmp	r3, #4
 8005062:	d133      	bne.n	80050cc <ESP_Upkeep+0x510>
          EspState = ESP_STATE_MODE_SELECT;
 8005064:	4b21      	ldr	r3, [pc, #132]	@ (80050ec <ESP_Upkeep+0x530>)
 8005066:	220b      	movs	r2, #11
 8005068:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 800506a:	4b2b      	ldr	r3, [pc, #172]	@ (8005118 <ESP_Upkeep+0x55c>)
 800506c:	2201      	movs	r2, #1
 800506e:	701a      	strb	r2, [r3, #0]
        }
      }

      break;
 8005070:	e02c      	b.n	80050cc <ESP_Upkeep+0x510>

    case ESP_STATE_CONFIG:
      Debug("Do nothing until reset");
 8005072:	4a2a      	ldr	r2, [pc, #168]	@ (800511c <ESP_Upkeep+0x560>)
 8005074:	4b2a      	ldr	r3, [pc, #168]	@ (8005120 <ESP_Upkeep+0x564>)
 8005076:	0019      	movs	r1, r3
 8005078:	2003      	movs	r0, #3
 800507a:	f004 fd57 	bl	8009b2c <CreateLine>
      Process_PC_Config(GetUsbRxPointer());
 800507e:	f011 ff75 	bl	8016f6c <GetUsbRxPointer>
 8005082:	0003      	movs	r3, r0
 8005084:	0018      	movs	r0, r3
 8005086:	f000 f8c3 	bl	8005210 <Process_PC_Config>

      break;
 800508a:	e020      	b.n	80050ce <ESP_Upkeep+0x512>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 800508c:	4a25      	ldr	r2, [pc, #148]	@ (8005124 <ESP_Upkeep+0x568>)
 800508e:	4b24      	ldr	r3, [pc, #144]	@ (8005120 <ESP_Upkeep+0x564>)
 8005090:	0019      	movs	r1, r3
 8005092:	2003      	movs	r0, #3
 8005094:	f004 fd4a 	bl	8009b2c <CreateLine>
      EspState = ESP_STATE_INIT;
 8005098:	4b14      	ldr	r3, [pc, #80]	@ (80050ec <ESP_Upkeep+0x530>)
 800509a:	2202      	movs	r2, #2
 800509c:	701a      	strb	r2, [r3, #0]
      break;
 800509e:	e016      	b.n	80050ce <ESP_Upkeep+0x512>

    default:
      // Handle unexpected state
      Debug("Something went wrong");
 80050a0:	4a21      	ldr	r2, [pc, #132]	@ (8005128 <ESP_Upkeep+0x56c>)
 80050a2:	4b1f      	ldr	r3, [pc, #124]	@ (8005120 <ESP_Upkeep+0x564>)
 80050a4:	0019      	movs	r1, r3
 80050a6:	2003      	movs	r0, #3
 80050a8:	f004 fd40 	bl	8009b2c <CreateLine>
      EspState = ESP_STATE_ERROR;
 80050ac:	4b0f      	ldr	r3, [pc, #60]	@ (80050ec <ESP_Upkeep+0x530>)
 80050ae:	2207      	movs	r2, #7
 80050b0:	701a      	strb	r2, [r3, #0]
      break;
 80050b2:	e00c      	b.n	80050ce <ESP_Upkeep+0x512>
      break;
 80050b4:	46c0      	nop			@ (mov r8, r8)
 80050b6:	e00a      	b.n	80050ce <ESP_Upkeep+0x512>
      break;
 80050b8:	46c0      	nop			@ (mov r8, r8)
 80050ba:	e008      	b.n	80050ce <ESP_Upkeep+0x512>
    break;
 80050bc:	46c0      	nop			@ (mov r8, r8)
 80050be:	e006      	b.n	80050ce <ESP_Upkeep+0x512>
         break;
 80050c0:	46c0      	nop			@ (mov r8, r8)
 80050c2:	e004      	b.n	80050ce <ESP_Upkeep+0x512>
      break;
 80050c4:	46c0      	nop			@ (mov r8, r8)
 80050c6:	e002      	b.n	80050ce <ESP_Upkeep+0x512>
    break;
 80050c8:	46c0      	nop			@ (mov r8, r8)
 80050ca:	e000      	b.n	80050ce <ESP_Upkeep+0x512>
      break;
 80050cc:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 80050ce:	4b07      	ldr	r3, [pc, #28]	@ (80050ec <ESP_Upkeep+0x530>)
 80050d0:	781b      	ldrb	r3, [r3, #0]
}
 80050d2:	0018      	movs	r0, r3
 80050d4:	46bd      	mov	sp, r7
 80050d6:	b003      	add	sp, #12
 80050d8:	bd90      	pop	{r4, r7, pc}
 80050da:	46c0      	nop			@ (mov r8, r8)
 80050dc:	20000926 	.word	0x20000926
 80050e0:	2000091c 	.word	0x2000091c
 80050e4:	20000b32 	.word	0x20000b32
 80050e8:	20000b31 	.word	0x20000b31
 80050ec:	20000021 	.word	0x20000021
 80050f0:	20000b33 	.word	0x20000b33
 80050f4:	000493e0 	.word	0x000493e0
 80050f8:	20000928 	.word	0x20000928
 80050fc:	200004ef 	.word	0x200004ef
 8005100:	50001c00 	.word	0x50001c00
 8005104:	50000800 	.word	0x50000800
 8005108:	200004f2 	.word	0x200004f2
 800510c:	200004f0 	.word	0x200004f0
 8005110:	200004f3 	.word	0x200004f3
 8005114:	200004f5 	.word	0x200004f5
 8005118:	200004f4 	.word	0x200004f4
 800511c:	0801b800 	.word	0x0801b800
 8005120:	0801b2d8 	.word	0x0801b2d8
 8005124:	0801b818 	.word	0x0801b818
 8005128:	0801b82c 	.word	0x0801b82c

0800512c <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005134:	4b09      	ldr	r3, [pc, #36]	@ (800515c <I2CSensors_Init+0x30>)
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 800513a:	4a09      	ldr	r2, [pc, #36]	@ (8005160 <I2CSensors_Init+0x34>)
 800513c:	4b09      	ldr	r3, [pc, #36]	@ (8005164 <I2CSensors_Init+0x38>)
 800513e:	0011      	movs	r1, r2
 8005140:	0018      	movs	r0, r3
 8005142:	f000 fe7f 	bl	8005e44 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 8005146:	4a06      	ldr	r2, [pc, #24]	@ (8005160 <I2CSensors_Init+0x34>)
 8005148:	4b06      	ldr	r3, [pc, #24]	@ (8005164 <I2CSensors_Init+0x38>)
 800514a:	0011      	movs	r1, r2
 800514c:	0018      	movs	r0, r3
 800514e:	f000 fce9 	bl	8005b24 <Gas_Init>
}
 8005152:	46c0      	nop			@ (mov r8, r8)
 8005154:	46bd      	mov	sp, r7
 8005156:	b002      	add	sp, #8
 8005158:	bd80      	pop	{r7, pc}
 800515a:	46c0      	nop			@ (mov r8, r8)
 800515c:	20000be4 	.word	0x20000be4
 8005160:	080051bd 	.word	0x080051bd
 8005164:	08005169 	.word	0x08005169

08005168 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005168:	b5b0      	push	{r4, r5, r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6039      	str	r1, [r7, #0]
 8005170:	0011      	movs	r1, r2
 8005172:	1dfb      	adds	r3, r7, #7
 8005174:	1c02      	adds	r2, r0, #0
 8005176:	701a      	strb	r2, [r3, #0]
 8005178:	1dbb      	adds	r3, r7, #6
 800517a:	1c0a      	adds	r2, r1, #0
 800517c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 800517e:	4b0e      	ldr	r3, [pc, #56]	@ (80051b8 <ReadI2C+0x50>)
 8005180:	6818      	ldr	r0, [r3, #0]
 8005182:	1dfb      	adds	r3, r7, #7
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	b29b      	uxth	r3, r3
 8005188:	18db      	adds	r3, r3, r3
 800518a:	b299      	uxth	r1, r3
 800518c:	1dbb      	adds	r3, r7, #6
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	b29b      	uxth	r3, r3
 8005192:	250f      	movs	r5, #15
 8005194:	197c      	adds	r4, r7, r5
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	f006 fda6 	bl	800bce8 <HAL_I2C_Master_Receive_DMA>
 800519c:	0003      	movs	r3, r0
 800519e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80051a0:	197b      	adds	r3, r7, r5
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <ReadI2C+0x44>
        return false;
 80051a8:	2300      	movs	r3, #0
 80051aa:	e000      	b.n	80051ae <ReadI2C+0x46>
    }
    return true;
 80051ac:	2301      	movs	r3, #1
}
 80051ae:	0018      	movs	r0, r3
 80051b0:	46bd      	mov	sp, r7
 80051b2:	b004      	add	sp, #16
 80051b4:	bdb0      	pop	{r4, r5, r7, pc}
 80051b6:	46c0      	nop			@ (mov r8, r8)
 80051b8:	20000be4 	.word	0x20000be4

080051bc <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80051bc:	b5b0      	push	{r4, r5, r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6039      	str	r1, [r7, #0]
 80051c4:	0011      	movs	r1, r2
 80051c6:	1dfb      	adds	r3, r7, #7
 80051c8:	1c02      	adds	r2, r0, #0
 80051ca:	701a      	strb	r2, [r3, #0]
 80051cc:	1dbb      	adds	r3, r7, #6
 80051ce:	1c0a      	adds	r2, r1, #0
 80051d0:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80051d2:	4b0e      	ldr	r3, [pc, #56]	@ (800520c <WriteI2C+0x50>)
 80051d4:	6818      	ldr	r0, [r3, #0]
 80051d6:	1dfb      	adds	r3, r7, #7
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	b29b      	uxth	r3, r3
 80051dc:	18db      	adds	r3, r3, r3
 80051de:	b299      	uxth	r1, r3
 80051e0:	1dbb      	adds	r3, r7, #6
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	250f      	movs	r5, #15
 80051e8:	197c      	adds	r4, r7, r5
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	f006 fc76 	bl	800badc <HAL_I2C_Master_Transmit_DMA>
 80051f0:	0003      	movs	r3, r0
 80051f2:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80051f4:	197b      	adds	r3, r7, r5
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <WriteI2C+0x44>
        return false;
 80051fc:	2300      	movs	r3, #0
 80051fe:	e000      	b.n	8005202 <WriteI2C+0x46>
    }
    return true;
 8005200:	2301      	movs	r3, #1
}
 8005202:	0018      	movs	r0, r3
 8005204:	46bd      	mov	sp, r7
 8005206:	b004      	add	sp, #16
 8005208:	bdb0      	pop	{r4, r5, r7, pc}
 800520a:	46c0      	nop			@ (mov r8, r8)
 800520c:	20000be4 	.word	0x20000be4

08005210 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005210:	b590      	push	{r4, r7, lr}
 8005212:	b0c3      	sub	sp, #268	@ 0x10c
 8005214:	af3e      	add	r7, sp, #248	@ 0xf8
 8005216:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005218:	f011 fec8 	bl	8016fac <GetUsbRxDataSize>
 800521c:	0003      	movs	r3, r0
 800521e:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2b05      	cmp	r3, #5
 8005224:	d971      	bls.n	800530a <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2123      	movs	r1, #35	@ 0x23
 800522a:	0018      	movs	r0, r3
 800522c:	f013 f946 	bl	80184bc <strchr>
 8005230:	0003      	movs	r3, r0
 8005232:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d065      	beq.n	8005306 <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	785a      	ldrb	r2, [r3, #1]
 800523e:	4b34      	ldr	r3, [pc, #208]	@ (8005310 <Process_PC_Config+0x100>)
 8005240:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	789a      	ldrb	r2, [r3, #2]
 8005246:	4b32      	ldr	r3, [pc, #200]	@ (8005310 <Process_PC_Config+0x100>)
 8005248:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 800524a:	4b31      	ldr	r3, [pc, #196]	@ (8005310 <Process_PC_Config+0x100>)
 800524c:	785b      	ldrb	r3, [r3, #1]
 800524e:	3305      	adds	r3, #5
 8005250:	001a      	movs	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4293      	cmp	r3, r2
 8005256:	d351      	bcc.n	80052fc <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	1cd9      	adds	r1, r3, #3
 800525c:	4b2c      	ldr	r3, [pc, #176]	@ (8005310 <Process_PC_Config+0x100>)
 800525e:	785b      	ldrb	r3, [r3, #1]
 8005260:	001a      	movs	r2, r3
 8005262:	4b2c      	ldr	r3, [pc, #176]	@ (8005314 <Process_PC_Config+0x104>)
 8005264:	0018      	movs	r0, r3
 8005266:	f013 f9eb 	bl	8018640 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 800526a:	4b29      	ldr	r3, [pc, #164]	@ (8005310 <Process_PC_Config+0x100>)
 800526c:	785b      	ldrb	r3, [r3, #1]
 800526e:	3303      	adds	r3, #3
 8005270:	001a      	movs	r2, r3
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	189b      	adds	r3, r3, r2
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	021b      	lsls	r3, r3, #8
 800527a:	b21a      	sxth	r2, r3
 800527c:	4b24      	ldr	r3, [pc, #144]	@ (8005310 <Process_PC_Config+0x100>)
 800527e:	785b      	ldrb	r3, [r3, #1]
 8005280:	3304      	adds	r3, #4
 8005282:	68b9      	ldr	r1, [r7, #8]
 8005284:	18cb      	adds	r3, r1, r3
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	b21b      	sxth	r3, r3
 800528a:	4313      	orrs	r3, r2
 800528c:	b21b      	sxth	r3, r3
 800528e:	b299      	uxth	r1, r3
 8005290:	4a1f      	ldr	r2, [pc, #124]	@ (8005310 <Process_PC_Config+0x100>)
 8005292:	2381      	movs	r3, #129	@ 0x81
 8005294:	005b      	lsls	r3, r3, #1
 8005296:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005298:	4a1d      	ldr	r2, [pc, #116]	@ (8005310 <Process_PC_Config+0x100>)
 800529a:	2381      	movs	r3, #129	@ 0x81
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	5ad4      	ldrh	r4, [r2, r3]
 80052a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005310 <Process_PC_Config+0x100>)
 80052a2:	785b      	ldrb	r3, [r3, #1]
 80052a4:	3303      	adds	r3, #3
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	0011      	movs	r1, r2
 80052ac:	0018      	movs	r0, r3
 80052ae:	f000 f975 	bl	800559c <CRC16_ARC>
 80052b2:	0003      	movs	r3, r0
 80052b4:	429c      	cmp	r4, r3
 80052b6:	d007      	beq.n	80052c8 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 80052b8:	4b15      	ldr	r3, [pc, #84]	@ (8005310 <Process_PC_Config+0x100>)
 80052ba:	785a      	ldrb	r2, [r3, #1]
 80052bc:	4b15      	ldr	r3, [pc, #84]	@ (8005314 <Process_PC_Config+0x104>)
 80052be:	0019      	movs	r1, r3
 80052c0:	2001      	movs	r0, #1
 80052c2:	f000 f919 	bl	80054f8 <Create_Message>
 80052c6:	e016      	b.n	80052f6 <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 80052c8:	4c11      	ldr	r4, [pc, #68]	@ (8005310 <Process_PC_Config+0x100>)
 80052ca:	466b      	mov	r3, sp
 80052cc:	0018      	movs	r0, r3
 80052ce:	0023      	movs	r3, r4
 80052d0:	3310      	adds	r3, #16
 80052d2:	22f4      	movs	r2, #244	@ 0xf4
 80052d4:	0019      	movs	r1, r3
 80052d6:	f013 f9b3 	bl	8018640 <memcpy>
 80052da:	6820      	ldr	r0, [r4, #0]
 80052dc:	6861      	ldr	r1, [r4, #4]
 80052de:	68a2      	ldr	r2, [r4, #8]
 80052e0:	68e3      	ldr	r3, [r4, #12]
 80052e2:	f000 f819 	bl	8005318 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 80052e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005310 <Process_PC_Config+0x100>)
 80052e8:	7818      	ldrb	r0, [r3, #0]
 80052ea:	4b09      	ldr	r3, [pc, #36]	@ (8005310 <Process_PC_Config+0x100>)
 80052ec:	785a      	ldrb	r2, [r3, #1]
 80052ee:	4b09      	ldr	r3, [pc, #36]	@ (8005314 <Process_PC_Config+0x104>)
 80052f0:	0019      	movs	r1, r3
 80052f2:	f000 f901 	bl	80054f8 <Create_Message>
                }
                ResetUsbRxDataSize();
 80052f6:	f011 fe41 	bl	8016f7c <ResetUsbRxDataSize>
                return;
 80052fa:	e006      	b.n	800530a <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	0018      	movs	r0, r3
 8005300:	f011 fe5e 	bl	8016fc0 <GetUsbRxNextChunk>
 8005304:	e001      	b.n	800530a <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005306:	f011 fe39 	bl	8016f7c <ResetUsbRxDataSize>
        }
    }
}
 800530a:	46bd      	mov	sp, r7
 800530c:	b005      	add	sp, #20
 800530e:	bd90      	pop	{r4, r7, pc}
 8005310:	20000be8 	.word	0x20000be8
 8005314:	20000bea 	.word	0x20000bea

08005318 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005318:	b084      	sub	sp, #16
 800531a:	b5b0      	push	{r4, r5, r7, lr}
 800531c:	b082      	sub	sp, #8
 800531e:	af00      	add	r7, sp, #0
 8005320:	2518      	movs	r5, #24
 8005322:	197c      	adds	r4, r7, r5
 8005324:	6020      	str	r0, [r4, #0]
 8005326:	6061      	str	r1, [r4, #4]
 8005328:	60a2      	str	r2, [r4, #8]
 800532a:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 800532c:	197b      	adds	r3, r7, r5
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2bfe      	cmp	r3, #254	@ 0xfe
 8005332:	d100      	bne.n	8005336 <ProcessCmd+0x1e>
 8005334:	e09c      	b.n	8005470 <ProcessCmd+0x158>
 8005336:	dd00      	ble.n	800533a <ProcessCmd+0x22>
 8005338:	e0bc      	b.n	80054b4 <ProcessCmd+0x19c>
 800533a:	2b0c      	cmp	r3, #12
 800533c:	dc0a      	bgt.n	8005354 <ProcessCmd+0x3c>
 800533e:	2b00      	cmp	r3, #0
 8005340:	da00      	bge.n	8005344 <ProcessCmd+0x2c>
 8005342:	e0b7      	b.n	80054b4 <ProcessCmd+0x19c>
 8005344:	2b0c      	cmp	r3, #12
 8005346:	d900      	bls.n	800534a <ProcessCmd+0x32>
 8005348:	e0b4      	b.n	80054b4 <ProcessCmd+0x19c>
 800534a:	009a      	lsls	r2, r3, #2
 800534c:	4b5d      	ldr	r3, [pc, #372]	@ (80054c4 <ProcessCmd+0x1ac>)
 800534e:	18d3      	adds	r3, r2, r3
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	469f      	mov	pc, r3
 8005354:	2bfd      	cmp	r3, #253	@ 0xfd
 8005356:	d100      	bne.n	800535a <ProcessCmd+0x42>
 8005358:	e084      	b.n	8005464 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 800535a:	e0ab      	b.n	80054b4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800535c:	2118      	movs	r1, #24
 800535e:	187b      	adds	r3, r7, r1
 8005360:	785b      	ldrb	r3, [r3, #1]
 8005362:	001a      	movs	r2, r3
 8005364:	187b      	adds	r3, r7, r1
 8005366:	1c99      	adds	r1, r3, #2
 8005368:	4857      	ldr	r0, [pc, #348]	@ (80054c8 <ProcessCmd+0x1b0>)
 800536a:	230c      	movs	r3, #12
 800536c:	f7fe f926 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005370:	e0a0      	b.n	80054b4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005372:	2118      	movs	r1, #24
 8005374:	187b      	adds	r3, r7, r1
 8005376:	785b      	ldrb	r3, [r3, #1]
 8005378:	001a      	movs	r2, r3
 800537a:	187b      	adds	r3, r7, r1
 800537c:	1c99      	adds	r1, r3, #2
 800537e:	4853      	ldr	r0, [pc, #332]	@ (80054cc <ProcessCmd+0x1b4>)
 8005380:	230c      	movs	r3, #12
 8005382:	f7fe f91b 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005386:	e095      	b.n	80054b4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005388:	2118      	movs	r1, #24
 800538a:	187b      	adds	r3, r7, r1
 800538c:	785b      	ldrb	r3, [r3, #1]
 800538e:	001a      	movs	r2, r3
 8005390:	187b      	adds	r3, r7, r1
 8005392:	1c99      	adds	r1, r3, #2
 8005394:	484e      	ldr	r0, [pc, #312]	@ (80054d0 <ProcessCmd+0x1b8>)
 8005396:	230c      	movs	r3, #12
 8005398:	f7fe f910 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 800539c:	e08a      	b.n	80054b4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocRawConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800539e:	2118      	movs	r1, #24
 80053a0:	187b      	adds	r3, r7, r1
 80053a2:	785b      	ldrb	r3, [r3, #1]
 80053a4:	001a      	movs	r2, r3
 80053a6:	187b      	adds	r3, r7, r1
 80053a8:	1c99      	adds	r1, r3, #2
 80053aa:	484a      	ldr	r0, [pc, #296]	@ (80054d4 <ProcessCmd+0x1bc>)
 80053ac:	230c      	movs	r3, #12
 80053ae:	f7fe f905 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80053b2:	e07f      	b.n	80054b4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80053b4:	2118      	movs	r1, #24
 80053b6:	187b      	adds	r3, r7, r1
 80053b8:	785b      	ldrb	r3, [r3, #1]
 80053ba:	001a      	movs	r2, r3
 80053bc:	187b      	adds	r3, r7, r1
 80053be:	1c99      	adds	r1, r3, #2
 80053c0:	4845      	ldr	r0, [pc, #276]	@ (80054d8 <ProcessCmd+0x1c0>)
 80053c2:	230c      	movs	r3, #12
 80053c4:	f7fe f8fa 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80053c8:	e074      	b.n	80054b4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80053ca:	2118      	movs	r1, #24
 80053cc:	187b      	adds	r3, r7, r1
 80053ce:	785b      	ldrb	r3, [r3, #1]
 80053d0:	001a      	movs	r2, r3
 80053d2:	187b      	adds	r3, r7, r1
 80053d4:	1c99      	adds	r1, r3, #2
 80053d6:	4841      	ldr	r0, [pc, #260]	@ (80054dc <ProcessCmd+0x1c4>)
 80053d8:	230c      	movs	r3, #12
 80053da:	f7fe f8ef 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80053de:	e069      	b.n	80054b4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 80053e0:	2118      	movs	r1, #24
 80053e2:	187b      	adds	r3, r7, r1
 80053e4:	785b      	ldrb	r3, [r3, #1]
 80053e6:	001a      	movs	r2, r3
 80053e8:	187b      	adds	r3, r7, r1
 80053ea:	1c99      	adds	r1, r3, #2
 80053ec:	483c      	ldr	r0, [pc, #240]	@ (80054e0 <ProcessCmd+0x1c8>)
 80053ee:	230c      	movs	r3, #12
 80053f0:	f7fe f8e4 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 80053f4:	e05e      	b.n	80054b4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 80053f6:	2118      	movs	r1, #24
 80053f8:	187b      	adds	r3, r7, r1
 80053fa:	785b      	ldrb	r3, [r3, #1]
 80053fc:	001a      	movs	r2, r3
 80053fe:	187b      	adds	r3, r7, r1
 8005400:	1c99      	adds	r1, r3, #2
 8005402:	4838      	ldr	r0, [pc, #224]	@ (80054e4 <ProcessCmd+0x1cc>)
 8005404:	231e      	movs	r3, #30
 8005406:	f7fe f8d9 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 800540a:	e053      	b.n	80054b4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800540c:	2118      	movs	r1, #24
 800540e:	187b      	adds	r3, r7, r1
 8005410:	785b      	ldrb	r3, [r3, #1]
 8005412:	001a      	movs	r2, r3
 8005414:	187b      	adds	r3, r7, r1
 8005416:	1c99      	adds	r1, r3, #2
 8005418:	4833      	ldr	r0, [pc, #204]	@ (80054e8 <ProcessCmd+0x1d0>)
 800541a:	230c      	movs	r3, #12
 800541c:	f7fe f8ce 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005420:	e048      	b.n	80054b4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005422:	2118      	movs	r1, #24
 8005424:	187b      	adds	r3, r7, r1
 8005426:	785b      	ldrb	r3, [r3, #1]
 8005428:	001a      	movs	r2, r3
 800542a:	187b      	adds	r3, r7, r1
 800542c:	1c99      	adds	r1, r3, #2
 800542e:	482f      	ldr	r0, [pc, #188]	@ (80054ec <ProcessCmd+0x1d4>)
 8005430:	230c      	movs	r3, #12
 8005432:	f7fe f8c3 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005436:	e03d      	b.n	80054b4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005438:	2118      	movs	r1, #24
 800543a:	187b      	adds	r3, r7, r1
 800543c:	785b      	ldrb	r3, [r3, #1]
 800543e:	001a      	movs	r2, r3
 8005440:	187b      	adds	r3, r7, r1
 8005442:	1c99      	adds	r1, r3, #2
 8005444:	482a      	ldr	r0, [pc, #168]	@ (80054f0 <ProcessCmd+0x1d8>)
 8005446:	230c      	movs	r3, #12
 8005448:	f7fe f8b8 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 800544c:	e032      	b.n	80054b4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 800544e:	2118      	movs	r1, #24
 8005450:	187b      	adds	r3, r7, r1
 8005452:	785b      	ldrb	r3, [r3, #1]
 8005454:	001a      	movs	r2, r3
 8005456:	187b      	adds	r3, r7, r1
 8005458:	1c99      	adds	r1, r3, #2
 800545a:	4826      	ldr	r0, [pc, #152]	@ (80054f4 <ProcessCmd+0x1dc>)
 800545c:	230c      	movs	r3, #12
 800545e:	f7fe f8ad 	bl	80035bc <WriteUint8ArrayEepromSafe>
        break;
 8005462:	e027      	b.n	80054b4 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8005464:	4b18      	ldr	r3, [pc, #96]	@ (80054c8 <ProcessCmd+0x1b0>)
 8005466:	21ba      	movs	r1, #186	@ 0xba
 8005468:	0018      	movs	r0, r3
 800546a:	f7fe f8ed 	bl	8003648 <ClearEEprom>
        break;
 800546e:	e021      	b.n	80054b4 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8005470:	2118      	movs	r1, #24
 8005472:	187b      	adds	r3, r7, r1
 8005474:	789b      	ldrb	r3, [r3, #2]
 8005476:	021b      	lsls	r3, r3, #8
 8005478:	b21a      	sxth	r2, r3
 800547a:	187b      	adds	r3, r7, r1
 800547c:	78db      	ldrb	r3, [r3, #3]
 800547e:	b21b      	sxth	r3, r3
 8005480:	4313      	orrs	r3, r2
 8005482:	b21a      	sxth	r2, r3
 8005484:	1dbb      	adds	r3, r7, #6
 8005486:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8005488:	1dbb      	adds	r3, r7, #6
 800548a:	881a      	ldrh	r2, [r3, #0]
 800548c:	23c0      	movs	r3, #192	@ 0xc0
 800548e:	015b      	lsls	r3, r3, #5
 8005490:	429a      	cmp	r2, r3
 8005492:	d207      	bcs.n	80054a4 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8005494:	1dbb      	adds	r3, r7, #6
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	4a0b      	ldr	r2, [pc, #44]	@ (80054c8 <ProcessCmd+0x1b0>)
 800549a:	0019      	movs	r1, r3
 800549c:	0010      	movs	r0, r2
 800549e:	f7fe f8d3 	bl	8003648 <ClearEEprom>
            break;
 80054a2:	e006      	b.n	80054b2 <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 80054a4:	23c0      	movs	r3, #192	@ 0xc0
 80054a6:	015b      	lsls	r3, r3, #5
 80054a8:	4a07      	ldr	r2, [pc, #28]	@ (80054c8 <ProcessCmd+0x1b0>)
 80054aa:	0019      	movs	r1, r3
 80054ac:	0010      	movs	r0, r2
 80054ae:	f7fe f8cb 	bl	8003648 <ClearEEprom>
            break;
 80054b2:	46c0      	nop			@ (mov r8, r8)
}
 80054b4:	46c0      	nop			@ (mov r8, r8)
 80054b6:	46bd      	mov	sp, r7
 80054b8:	b002      	add	sp, #8
 80054ba:	bcb0      	pop	{r4, r5, r7}
 80054bc:	bc08      	pop	{r3}
 80054be:	b004      	add	sp, #16
 80054c0:	4718      	bx	r3
 80054c2:	46c0      	nop			@ (mov r8, r8)
 80054c4:	0801c00c 	.word	0x0801c00c
 80054c8:	08080000 	.word	0x08080000
 80054cc:	0808000c 	.word	0x0808000c
 80054d0:	08080018 	.word	0x08080018
 80054d4:	08080024 	.word	0x08080024
 80054d8:	08080030 	.word	0x08080030
 80054dc:	0808003c 	.word	0x0808003c
 80054e0:	08080048 	.word	0x08080048
 80054e4:	08080090 	.word	0x08080090
 80054e8:	08080078 	.word	0x08080078
 80054ec:	0808006c 	.word	0x0808006c
 80054f0:	08080060 	.word	0x08080060
 80054f4:	08080054 	.word	0x08080054

080054f8 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 80054f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6039      	str	r1, [r7, #0]
 8005500:	0011      	movs	r1, r2
 8005502:	1dfb      	adds	r3, r7, #7
 8005504:	1c02      	adds	r2, r0, #0
 8005506:	701a      	strb	r2, [r3, #0]
 8005508:	1dbb      	adds	r3, r7, #6
 800550a:	1c0a      	adds	r2, r1, #0
 800550c:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 800550e:	2223      	movs	r2, #35	@ 0x23
 8005510:	4b20      	ldr	r3, [pc, #128]	@ (8005594 <Create_Message+0x9c>)
 8005512:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8005514:	4b1f      	ldr	r3, [pc, #124]	@ (8005594 <Create_Message+0x9c>)
 8005516:	1dfa      	adds	r2, r7, #7
 8005518:	7812      	ldrb	r2, [r2, #0]
 800551a:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 800551c:	4b1d      	ldr	r3, [pc, #116]	@ (8005594 <Create_Message+0x9c>)
 800551e:	1dba      	adds	r2, r7, #6
 8005520:	7812      	ldrb	r2, [r2, #0]
 8005522:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8005524:	1dbb      	adds	r3, r7, #6
 8005526:	781a      	ldrb	r2, [r3, #0]
 8005528:	6839      	ldr	r1, [r7, #0]
 800552a:	4b1b      	ldr	r3, [pc, #108]	@ (8005598 <Create_Message+0xa0>)
 800552c:	0018      	movs	r0, r3
 800552e:	f013 f887 	bl	8018640 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8005532:	1dbb      	adds	r3, r7, #6
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	b29a      	uxth	r2, r3
 8005538:	250e      	movs	r5, #14
 800553a:	197b      	adds	r3, r7, r5
 800553c:	3203      	adds	r2, #3
 800553e:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8005540:	260c      	movs	r6, #12
 8005542:	19bc      	adds	r4, r7, r6
 8005544:	197b      	adds	r3, r7, r5
 8005546:	881a      	ldrh	r2, [r3, #0]
 8005548:	4b12      	ldr	r3, [pc, #72]	@ (8005594 <Create_Message+0x9c>)
 800554a:	0011      	movs	r1, r2
 800554c:	0018      	movs	r0, r3
 800554e:	f000 f825 	bl	800559c <CRC16_ARC>
 8005552:	0003      	movs	r3, r0
 8005554:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8005556:	0030      	movs	r0, r6
 8005558:	183b      	adds	r3, r7, r0
 800555a:	881b      	ldrh	r3, [r3, #0]
 800555c:	0a1b      	lsrs	r3, r3, #8
 800555e:	b29a      	uxth	r2, r3
 8005560:	197b      	adds	r3, r7, r5
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	b2d1      	uxtb	r1, r2
 8005566:	4a0b      	ldr	r2, [pc, #44]	@ (8005594 <Create_Message+0x9c>)
 8005568:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 800556a:	197b      	adds	r3, r7, r5
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	3301      	adds	r3, #1
 8005570:	183a      	adds	r2, r7, r0
 8005572:	8812      	ldrh	r2, [r2, #0]
 8005574:	b2d1      	uxtb	r1, r2
 8005576:	4a07      	ldr	r2, [pc, #28]	@ (8005594 <Create_Message+0x9c>)
 8005578:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 800557a:	197b      	adds	r3, r7, r5
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	3302      	adds	r3, #2
 8005580:	b29a      	uxth	r2, r3
 8005582:	4b04      	ldr	r3, [pc, #16]	@ (8005594 <Create_Message+0x9c>)
 8005584:	0011      	movs	r1, r2
 8005586:	0018      	movs	r0, r3
 8005588:	f011 fcb6 	bl	8016ef8 <CDC_Transmit_FS>
}
 800558c:	46c0      	nop			@ (mov r8, r8)
 800558e:	46bd      	mov	sp, r7
 8005590:	b005      	add	sp, #20
 8005592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005594:	20000cec 	.word	0x20000cec
 8005598:	20000cef 	.word	0x20000cef

0800559c <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b086      	sub	sp, #24
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	000a      	movs	r2, r1
 80055a6:	1cbb      	adds	r3, r7, #2
 80055a8:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 80055aa:	2316      	movs	r3, #22
 80055ac:	18fb      	adds	r3, r7, r3
 80055ae:	2200      	movs	r2, #0
 80055b0:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 80055b2:	2300      	movs	r3, #0
 80055b4:	613b      	str	r3, [r7, #16]
 80055b6:	e02e      	b.n	8005616 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	18d3      	adds	r3, r2, r3
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	0019      	movs	r1, r3
 80055c2:	2216      	movs	r2, #22
 80055c4:	18bb      	adds	r3, r7, r2
 80055c6:	18ba      	adds	r2, r7, r2
 80055c8:	8812      	ldrh	r2, [r2, #0]
 80055ca:	404a      	eors	r2, r1
 80055cc:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	e01a      	b.n	800560a <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 80055d4:	2116      	movs	r1, #22
 80055d6:	187b      	adds	r3, r7, r1
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	2201      	movs	r2, #1
 80055dc:	4013      	ands	r3, r2
 80055de:	d00b      	beq.n	80055f8 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 80055e0:	187b      	adds	r3, r7, r1
 80055e2:	187a      	adds	r2, r7, r1
 80055e4:	8812      	ldrh	r2, [r2, #0]
 80055e6:	0852      	lsrs	r2, r2, #1
 80055e8:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 80055ea:	187b      	adds	r3, r7, r1
 80055ec:	187a      	adds	r2, r7, r1
 80055ee:	8812      	ldrh	r2, [r2, #0]
 80055f0:	490f      	ldr	r1, [pc, #60]	@ (8005630 <CRC16_ARC+0x94>)
 80055f2:	404a      	eors	r2, r1
 80055f4:	801a      	strh	r2, [r3, #0]
 80055f6:	e005      	b.n	8005604 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 80055f8:	2216      	movs	r2, #22
 80055fa:	18bb      	adds	r3, r7, r2
 80055fc:	18ba      	adds	r2, r7, r2
 80055fe:	8812      	ldrh	r2, [r2, #0]
 8005600:	0852      	lsrs	r2, r2, #1
 8005602:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	3301      	adds	r3, #1
 8005608:	60fb      	str	r3, [r7, #12]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2b07      	cmp	r3, #7
 800560e:	dde1      	ble.n	80055d4 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	3301      	adds	r3, #1
 8005614:	613b      	str	r3, [r7, #16]
 8005616:	1cbb      	adds	r3, r7, #2
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	429a      	cmp	r2, r3
 800561e:	dbcb      	blt.n	80055b8 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8005620:	2316      	movs	r3, #22
 8005622:	18fb      	adds	r3, r7, r3
 8005624:	881b      	ldrh	r3, [r3, #0]
}
 8005626:	0018      	movs	r0, r3
 8005628:	46bd      	mov	sp, r7
 800562a:	b006      	add	sp, #24
 800562c:	bd80      	pop	{r7, pc}
 800562e:	46c0      	nop			@ (mov r8, r8)
 8005630:	ffffa001 	.word	0xffffa001

08005634 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8005634:	b580      	push	{r7, lr}
 8005636:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_14;
 8005638:	4b26      	ldr	r3, [pc, #152]	@ (80056d4 <ReadBatteryVoltage+0xa0>)
 800563a:	4a27      	ldr	r2, [pc, #156]	@ (80056d8 <ReadBatteryVoltage+0xa4>)
 800563c:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800563e:	4b25      	ldr	r3, [pc, #148]	@ (80056d4 <ReadBatteryVoltage+0xa0>)
 8005640:	2280      	movs	r2, #128	@ 0x80
 8005642:	0152      	lsls	r2, r2, #5
 8005644:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005646:	4a23      	ldr	r2, [pc, #140]	@ (80056d4 <ReadBatteryVoltage+0xa0>)
 8005648:	4b24      	ldr	r3, [pc, #144]	@ (80056dc <ReadBatteryVoltage+0xa8>)
 800564a:	0011      	movs	r1, r2
 800564c:	0018      	movs	r0, r3
 800564e:	f005 f8af 	bl	800a7b0 <HAL_ADC_ConfigChannel>
 8005652:	1e03      	subs	r3, r0, #0
 8005654:	d001      	beq.n	800565a <ReadBatteryVoltage+0x26>
   {
     Error_Handler();
 8005656:	f000 ffc5 	bl	80065e4 <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 800565a:	4b20      	ldr	r3, [pc, #128]	@ (80056dc <ReadBatteryVoltage+0xa8>)
 800565c:	0018      	movs	r0, r3
 800565e:	f004 ffab 	bl	800a5b8 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 8005662:	4b1e      	ldr	r3, [pc, #120]	@ (80056dc <ReadBatteryVoltage+0xa8>)
 8005664:	2101      	movs	r1, #1
 8005666:	0018      	movs	r0, r3
 8005668:	f004 fffa 	bl	800a660 <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 800566c:	4b1b      	ldr	r3, [pc, #108]	@ (80056dc <ReadBatteryVoltage+0xa8>)
 800566e:	0018      	movs	r0, r3
 8005670:	f005 f892 	bl	800a798 <HAL_ADC_GetValue>
 8005674:	0002      	movs	r2, r0
 8005676:	4b1a      	ldr	r3, [pc, #104]	@ (80056e0 <ReadBatteryVoltage+0xac>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4353      	muls	r3, r2
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	4919      	ldr	r1, [pc, #100]	@ (80056e4 <ReadBatteryVoltage+0xb0>)
 8005680:	0018      	movs	r0, r3
 8005682:	f7fa fd5d 	bl	8000140 <__udivsi3>
 8005686:	0003      	movs	r3, r0
 8005688:	001a      	movs	r2, r3
 800568a:	4b17      	ldr	r3, [pc, #92]	@ (80056e8 <ReadBatteryVoltage+0xb4>)
 800568c:	601a      	str	r2, [r3, #0]
   trueValue = (float)value/1000.0;
 800568e:	4b16      	ldr	r3, [pc, #88]	@ (80056e8 <ReadBatteryVoltage+0xb4>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	0018      	movs	r0, r3
 8005694:	f7fb ff66 	bl	8001564 <__aeabi_ui2f>
 8005698:	1c03      	adds	r3, r0, #0
 800569a:	4914      	ldr	r1, [pc, #80]	@ (80056ec <ReadBatteryVoltage+0xb8>)
 800569c:	1c18      	adds	r0, r3, #0
 800569e:	f7fb fa17 	bl	8000ad0 <__aeabi_fdiv>
 80056a2:	1c03      	adds	r3, r0, #0
 80056a4:	1c1a      	adds	r2, r3, #0
 80056a6:	4b12      	ldr	r3, [pc, #72]	@ (80056f0 <ReadBatteryVoltage+0xbc>)
 80056a8:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_14;
 80056aa:	4b0a      	ldr	r3, [pc, #40]	@ (80056d4 <ReadBatteryVoltage+0xa0>)
 80056ac:	4a0a      	ldr	r2, [pc, #40]	@ (80056d8 <ReadBatteryVoltage+0xa4>)
 80056ae:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 80056b0:	4b08      	ldr	r3, [pc, #32]	@ (80056d4 <ReadBatteryVoltage+0xa0>)
 80056b2:	4a10      	ldr	r2, [pc, #64]	@ (80056f4 <ReadBatteryVoltage+0xc0>)
 80056b4:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80056b6:	4a07      	ldr	r2, [pc, #28]	@ (80056d4 <ReadBatteryVoltage+0xa0>)
 80056b8:	4b08      	ldr	r3, [pc, #32]	@ (80056dc <ReadBatteryVoltage+0xa8>)
 80056ba:	0011      	movs	r1, r2
 80056bc:	0018      	movs	r0, r3
 80056be:	f005 f877 	bl	800a7b0 <HAL_ADC_ConfigChannel>
 80056c2:	1e03      	subs	r3, r0, #0
 80056c4:	d001      	beq.n	80056ca <ReadBatteryVoltage+0x96>
   {
     Error_Handler();
 80056c6:	f000 ff8d 	bl	80065e4 <Error_Handler>
   }
   return trueValue;
 80056ca:	4b09      	ldr	r3, [pc, #36]	@ (80056f0 <ReadBatteryVoltage+0xbc>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 }
 80056ce:	1c18      	adds	r0, r3, #0
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	20000df4 	.word	0x20000df4
 80056d8:	38004000 	.word	0x38004000
 80056dc:	20000e14 	.word	0x20000e14
 80056e0:	20000024 	.word	0x20000024
 80056e4:	00000fff 	.word	0x00000fff
 80056e8:	20000dfc 	.word	0x20000dfc
 80056ec:	447a0000 	.word	0x447a0000
 80056f0:	20000e00 	.word	0x20000e00
 80056f4:	00001001 	.word	0x00001001

080056f8 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 80056f8:	b580      	push	{r7, lr}
 80056fa:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_15;
 80056fc:	4b27      	ldr	r3, [pc, #156]	@ (800579c <ReadSolarVoltage+0xa4>)
 80056fe:	4a28      	ldr	r2, [pc, #160]	@ (80057a0 <ReadSolarVoltage+0xa8>)
 8005700:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005702:	4b26      	ldr	r3, [pc, #152]	@ (800579c <ReadSolarVoltage+0xa4>)
 8005704:	2280      	movs	r2, #128	@ 0x80
 8005706:	0152      	lsls	r2, r2, #5
 8005708:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800570a:	4a24      	ldr	r2, [pc, #144]	@ (800579c <ReadSolarVoltage+0xa4>)
 800570c:	4b25      	ldr	r3, [pc, #148]	@ (80057a4 <ReadSolarVoltage+0xac>)
 800570e:	0011      	movs	r1, r2
 8005710:	0018      	movs	r0, r3
 8005712:	f005 f84d 	bl	800a7b0 <HAL_ADC_ConfigChannel>
 8005716:	1e03      	subs	r3, r0, #0
 8005718:	d001      	beq.n	800571e <ReadSolarVoltage+0x26>
   {
     Error_Handler();
 800571a:	f000 ff63 	bl	80065e4 <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 800571e:	4b21      	ldr	r3, [pc, #132]	@ (80057a4 <ReadSolarVoltage+0xac>)
 8005720:	0018      	movs	r0, r3
 8005722:	f004 ff49 	bl	800a5b8 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 8005726:	4b1f      	ldr	r3, [pc, #124]	@ (80057a4 <ReadSolarVoltage+0xac>)
 8005728:	2101      	movs	r1, #1
 800572a:	0018      	movs	r0, r3
 800572c:	f004 ff98 	bl	800a660 <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8005730:	4b1c      	ldr	r3, [pc, #112]	@ (80057a4 <ReadSolarVoltage+0xac>)
 8005732:	0018      	movs	r0, r3
 8005734:	f005 f830 	bl	800a798 <HAL_ADC_GetValue>
 8005738:	0002      	movs	r2, r0
 800573a:	4b1b      	ldr	r3, [pc, #108]	@ (80057a8 <ReadSolarVoltage+0xb0>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	435a      	muls	r2, r3
 8005740:	0013      	movs	r3, r2
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	189b      	adds	r3, r3, r2
 8005746:	4919      	ldr	r1, [pc, #100]	@ (80057ac <ReadSolarVoltage+0xb4>)
 8005748:	0018      	movs	r0, r3
 800574a:	f7fa fcf9 	bl	8000140 <__udivsi3>
 800574e:	0003      	movs	r3, r0
 8005750:	001a      	movs	r2, r3
 8005752:	4b17      	ldr	r3, [pc, #92]	@ (80057b0 <ReadSolarVoltage+0xb8>)
 8005754:	601a      	str	r2, [r3, #0]
   trueValue = (float)value / 1000.0;
 8005756:	4b16      	ldr	r3, [pc, #88]	@ (80057b0 <ReadSolarVoltage+0xb8>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	0018      	movs	r0, r3
 800575c:	f7fb ff02 	bl	8001564 <__aeabi_ui2f>
 8005760:	1c03      	adds	r3, r0, #0
 8005762:	4914      	ldr	r1, [pc, #80]	@ (80057b4 <ReadSolarVoltage+0xbc>)
 8005764:	1c18      	adds	r0, r3, #0
 8005766:	f7fb f9b3 	bl	8000ad0 <__aeabi_fdiv>
 800576a:	1c03      	adds	r3, r0, #0
 800576c:	1c1a      	adds	r2, r3, #0
 800576e:	4b12      	ldr	r3, [pc, #72]	@ (80057b8 <ReadSolarVoltage+0xc0>)
 8005770:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_15;
 8005772:	4b0a      	ldr	r3, [pc, #40]	@ (800579c <ReadSolarVoltage+0xa4>)
 8005774:	4a0a      	ldr	r2, [pc, #40]	@ (80057a0 <ReadSolarVoltage+0xa8>)
 8005776:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 8005778:	4b08      	ldr	r3, [pc, #32]	@ (800579c <ReadSolarVoltage+0xa4>)
 800577a:	4a10      	ldr	r2, [pc, #64]	@ (80057bc <ReadSolarVoltage+0xc4>)
 800577c:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800577e:	4a07      	ldr	r2, [pc, #28]	@ (800579c <ReadSolarVoltage+0xa4>)
 8005780:	4b08      	ldr	r3, [pc, #32]	@ (80057a4 <ReadSolarVoltage+0xac>)
 8005782:	0011      	movs	r1, r2
 8005784:	0018      	movs	r0, r3
 8005786:	f005 f813 	bl	800a7b0 <HAL_ADC_ConfigChannel>
 800578a:	1e03      	subs	r3, r0, #0
 800578c:	d001      	beq.n	8005792 <ReadSolarVoltage+0x9a>
   {
     Error_Handler();
 800578e:	f000 ff29 	bl	80065e4 <Error_Handler>
   }
   return trueValue;
 8005792:	4b09      	ldr	r3, [pc, #36]	@ (80057b8 <ReadSolarVoltage+0xc0>)
 8005794:	681b      	ldr	r3, [r3, #0]
 }
 8005796:	1c18      	adds	r0, r3, #0
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	20000df4 	.word	0x20000df4
 80057a0:	3c008000 	.word	0x3c008000
 80057a4:	20000e14 	.word	0x20000e14
 80057a8:	20000024 	.word	0x20000024
 80057ac:	00000fff 	.word	0x00000fff
 80057b0:	20000e04 	.word	0x20000e04
 80057b4:	447a0000 	.word	0x447a0000
 80057b8:	20000e08 	.word	0x20000e08
 80057bc:	00001001 	.word	0x00001001

080057c0 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool   Check_USB_PowerOn(void){
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
return   (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 80057c4:	23a0      	movs	r3, #160	@ 0xa0
 80057c6:	05db      	lsls	r3, r3, #23
 80057c8:	2180      	movs	r1, #128	@ 0x80
 80057ca:	0018      	movs	r0, r3
 80057cc:	f006 f8b6 	bl	800b93c <HAL_GPIO_ReadPin>
 80057d0:	0003      	movs	r3, r0
 80057d2:	1e5a      	subs	r2, r3, #1
 80057d4:	4193      	sbcs	r3, r2
 80057d6:	b2db      	uxtb	r3, r3
}
 80057d8:	0018      	movs	r0, r3
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 80057de:	b580      	push	{r7, lr}
 80057e0:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 80057e2:	2380      	movs	r3, #128	@ 0x80
 80057e4:	021a      	lsls	r2, r3, #8
 80057e6:	23a0      	movs	r3, #160	@ 0xa0
 80057e8:	05db      	lsls	r3, r3, #23
 80057ea:	0011      	movs	r1, r2
 80057ec:	0018      	movs	r0, r3
 80057ee:	f006 f8a5 	bl	800b93c <HAL_GPIO_ReadPin>
 80057f2:	0003      	movs	r3, r0
 80057f4:	1e5a      	subs	r2, r3, #1
 80057f6:	4193      	sbcs	r3, r2
 80057f8:	b2db      	uxtb	r3, r3
}
 80057fa:	0018      	movs	r0, r3
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8005804:	4b05      	ldr	r3, [pc, #20]	@ (800581c <UserButton_Pressed+0x1c>)
 8005806:	2104      	movs	r1, #4
 8005808:	0018      	movs	r0, r3
 800580a:	f006 f897 	bl	800b93c <HAL_GPIO_ReadPin>
 800580e:	0003      	movs	r3, r0
 8005810:	425a      	negs	r2, r3
 8005812:	4153      	adcs	r3, r2
 8005814:	b2db      	uxtb	r3, r3
}
 8005816:	0018      	movs	r0, r3
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	50000c00 	.word	0x50000c00

08005820 <RTC_SetTime>:
static Clock RealTime = {.Hours = 0, .Minutes = 0, .Seconds = 0};
static Clock NextAction = {.Hours = 0, .Minutes = 0, .Seconds = 0};
RTC_HandleTypeDef* RealTime_Handle = NULL;

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_HandleTypeDef *hrtc, uint8_t hours, uint8_t minutes, uint8_t seconds) {
 8005820:	b590      	push	{r4, r7, lr}
 8005822:	b089      	sub	sp, #36	@ 0x24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	000c      	movs	r4, r1
 800582a:	0010      	movs	r0, r2
 800582c:	0019      	movs	r1, r3
 800582e:	1cfb      	adds	r3, r7, #3
 8005830:	1c22      	adds	r2, r4, #0
 8005832:	701a      	strb	r2, [r3, #0]
 8005834:	1cbb      	adds	r3, r7, #2
 8005836:	1c02      	adds	r2, r0, #0
 8005838:	701a      	strb	r2, [r3, #0]
 800583a:	1c7b      	adds	r3, r7, #1
 800583c:	1c0a      	adds	r2, r1, #0
 800583e:	701a      	strb	r2, [r3, #0]
    RTC_TimeTypeDef sTime = {0};
 8005840:	240c      	movs	r4, #12
 8005842:	193b      	adds	r3, r7, r4
 8005844:	0018      	movs	r0, r3
 8005846:	2314      	movs	r3, #20
 8005848:	001a      	movs	r2, r3
 800584a:	2100      	movs	r1, #0
 800584c:	f012 fe2e 	bl	80184ac <memset>

    sTime.Hours = hours;
 8005850:	0021      	movs	r1, r4
 8005852:	187b      	adds	r3, r7, r1
 8005854:	1cfa      	adds	r2, r7, #3
 8005856:	7812      	ldrb	r2, [r2, #0]
 8005858:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = minutes;
 800585a:	187b      	adds	r3, r7, r1
 800585c:	1cba      	adds	r2, r7, #2
 800585e:	7812      	ldrb	r2, [r2, #0]
 8005860:	705a      	strb	r2, [r3, #1]
    sTime.Seconds = seconds;
 8005862:	187b      	adds	r3, r7, r1
 8005864:	1c7a      	adds	r2, r7, #1
 8005866:	7812      	ldrb	r2, [r2, #0]
 8005868:	709a      	strb	r2, [r3, #2]
    sTime.TimeFormat = RTC_HOURFORMAT_24;
 800586a:	187b      	adds	r3, r7, r1
 800586c:	2200      	movs	r2, #0
 800586e:	70da      	strb	r2, [r3, #3]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005870:	187b      	adds	r3, r7, r1
 8005872:	2200      	movs	r2, #0
 8005874:	60da      	str	r2, [r3, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005876:	187b      	adds	r3, r7, r1
 8005878:	2200      	movs	r2, #0
 800587a:	611a      	str	r2, [r3, #16]
    

    if (HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800587c:	1879      	adds	r1, r7, r1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	0018      	movs	r0, r3
 8005884:	f00b fa42 	bl	8010d0c <HAL_RTC_SetTime>
        // Foutafhandeling
    }
}
 8005888:	46c0      	nop			@ (mov r8, r8)
 800588a:	46bd      	mov	sp, r7
 800588c:	b009      	add	sp, #36	@ 0x24
 800588e:	bd90      	pop	{r4, r7, pc}

08005890 <InitClock>:

void InitClock(RTC_HandleTypeDef *hrtc){
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  RealTime_Handle = hrtc;
 8005898:	4b08      	ldr	r3, [pc, #32]	@ (80058bc <InitClock+0x2c>)
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	601a      	str	r2, [r3, #0]
  RTC_SetTime(RealTime_Handle, RealTime.Hours, RealTime.Minutes, RealTime.Seconds);
 800589e:	4b07      	ldr	r3, [pc, #28]	@ (80058bc <InitClock+0x2c>)
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	4b07      	ldr	r3, [pc, #28]	@ (80058c0 <InitClock+0x30>)
 80058a4:	7819      	ldrb	r1, [r3, #0]
 80058a6:	4b06      	ldr	r3, [pc, #24]	@ (80058c0 <InitClock+0x30>)
 80058a8:	785a      	ldrb	r2, [r3, #1]
 80058aa:	4b05      	ldr	r3, [pc, #20]	@ (80058c0 <InitClock+0x30>)
 80058ac:	789b      	ldrb	r3, [r3, #2]
 80058ae:	f7ff ffb7 	bl	8005820 <RTC_SetTime>
}
 80058b2:	46c0      	nop			@ (mov r8, r8)
 80058b4:	46bd      	mov	sp, r7
 80058b6:	b002      	add	sp, #8
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	46c0      	nop			@ (mov r8, r8)
 80058bc:	20000e10 	.word	0x20000e10
 80058c0:	20000e0c 	.word	0x20000e0c

080058c4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80058ca:	003b      	movs	r3, r7
 80058cc:	0018      	movs	r0, r3
 80058ce:	2308      	movs	r3, #8
 80058d0:	001a      	movs	r2, r3
 80058d2:	2100      	movs	r1, #0
 80058d4:	f012 fdea 	bl	80184ac <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80058d8:	4b30      	ldr	r3, [pc, #192]	@ (800599c <MX_ADC_Init+0xd8>)
 80058da:	4a31      	ldr	r2, [pc, #196]	@ (80059a0 <MX_ADC_Init+0xdc>)
 80058dc:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80058de:	4b2f      	ldr	r3, [pc, #188]	@ (800599c <MX_ADC_Init+0xd8>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80058e4:	4b2d      	ldr	r3, [pc, #180]	@ (800599c <MX_ADC_Init+0xd8>)
 80058e6:	22c0      	movs	r2, #192	@ 0xc0
 80058e8:	0612      	lsls	r2, r2, #24
 80058ea:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80058ec:	4b2b      	ldr	r3, [pc, #172]	@ (800599c <MX_ADC_Init+0xd8>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80058f2:	4b2a      	ldr	r3, [pc, #168]	@ (800599c <MX_ADC_Init+0xd8>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80058f8:	4b28      	ldr	r3, [pc, #160]	@ (800599c <MX_ADC_Init+0xd8>)
 80058fa:	2201      	movs	r2, #1
 80058fc:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80058fe:	4b27      	ldr	r3, [pc, #156]	@ (800599c <MX_ADC_Init+0xd8>)
 8005900:	2200      	movs	r2, #0
 8005902:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8005904:	4b25      	ldr	r3, [pc, #148]	@ (800599c <MX_ADC_Init+0xd8>)
 8005906:	2220      	movs	r2, #32
 8005908:	2100      	movs	r1, #0
 800590a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 800590c:	4b23      	ldr	r3, [pc, #140]	@ (800599c <MX_ADC_Init+0xd8>)
 800590e:	2221      	movs	r2, #33	@ 0x21
 8005910:	2101      	movs	r1, #1
 8005912:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005914:	4b21      	ldr	r3, [pc, #132]	@ (800599c <MX_ADC_Init+0xd8>)
 8005916:	2200      	movs	r2, #0
 8005918:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800591a:	4b20      	ldr	r3, [pc, #128]	@ (800599c <MX_ADC_Init+0xd8>)
 800591c:	22c2      	movs	r2, #194	@ 0xc2
 800591e:	32ff      	adds	r2, #255	@ 0xff
 8005920:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8005922:	4b1e      	ldr	r3, [pc, #120]	@ (800599c <MX_ADC_Init+0xd8>)
 8005924:	222c      	movs	r2, #44	@ 0x2c
 8005926:	2100      	movs	r1, #0
 8005928:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800592a:	4b1c      	ldr	r3, [pc, #112]	@ (800599c <MX_ADC_Init+0xd8>)
 800592c:	2204      	movs	r2, #4
 800592e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005930:	4b1a      	ldr	r3, [pc, #104]	@ (800599c <MX_ADC_Init+0xd8>)
 8005932:	2200      	movs	r2, #0
 8005934:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8005936:	4b19      	ldr	r3, [pc, #100]	@ (800599c <MX_ADC_Init+0xd8>)
 8005938:	2200      	movs	r2, #0
 800593a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800593c:	4b17      	ldr	r3, [pc, #92]	@ (800599c <MX_ADC_Init+0xd8>)
 800593e:	2200      	movs	r2, #0
 8005940:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8005942:	4b16      	ldr	r3, [pc, #88]	@ (800599c <MX_ADC_Init+0xd8>)
 8005944:	2200      	movs	r2, #0
 8005946:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8005948:	4b14      	ldr	r3, [pc, #80]	@ (800599c <MX_ADC_Init+0xd8>)
 800594a:	0018      	movs	r0, r3
 800594c:	f004 fcc0 	bl	800a2d0 <HAL_ADC_Init>
 8005950:	1e03      	subs	r3, r0, #0
 8005952:	d001      	beq.n	8005958 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8005954:	f000 fe46 	bl	80065e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8005958:	003b      	movs	r3, r7
 800595a:	4a12      	ldr	r2, [pc, #72]	@ (80059a4 <MX_ADC_Init+0xe0>)
 800595c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800595e:	003b      	movs	r3, r7
 8005960:	2280      	movs	r2, #128	@ 0x80
 8005962:	0152      	lsls	r2, r2, #5
 8005964:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005966:	003a      	movs	r2, r7
 8005968:	4b0c      	ldr	r3, [pc, #48]	@ (800599c <MX_ADC_Init+0xd8>)
 800596a:	0011      	movs	r1, r2
 800596c:	0018      	movs	r0, r3
 800596e:	f004 ff1f 	bl	800a7b0 <HAL_ADC_ConfigChannel>
 8005972:	1e03      	subs	r3, r0, #0
 8005974:	d001      	beq.n	800597a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8005976:	f000 fe35 	bl	80065e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800597a:	003b      	movs	r3, r7
 800597c:	4a0a      	ldr	r2, [pc, #40]	@ (80059a8 <MX_ADC_Init+0xe4>)
 800597e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005980:	003a      	movs	r2, r7
 8005982:	4b06      	ldr	r3, [pc, #24]	@ (800599c <MX_ADC_Init+0xd8>)
 8005984:	0011      	movs	r1, r2
 8005986:	0018      	movs	r0, r3
 8005988:	f004 ff12 	bl	800a7b0 <HAL_ADC_ConfigChannel>
 800598c:	1e03      	subs	r3, r0, #0
 800598e:	d001      	beq.n	8005994 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8005990:	f000 fe28 	bl	80065e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8005994:	46c0      	nop			@ (mov r8, r8)
 8005996:	46bd      	mov	sp, r7
 8005998:	b002      	add	sp, #8
 800599a:	bd80      	pop	{r7, pc}
 800599c:	20000e14 	.word	0x20000e14
 80059a0:	40012400 	.word	0x40012400
 80059a4:	38004000 	.word	0x38004000
 80059a8:	3c008000 	.word	0x3c008000

080059ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80059ac:	b590      	push	{r4, r7, lr}
 80059ae:	b089      	sub	sp, #36	@ 0x24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059b4:	240c      	movs	r4, #12
 80059b6:	193b      	adds	r3, r7, r4
 80059b8:	0018      	movs	r0, r3
 80059ba:	2314      	movs	r3, #20
 80059bc:	001a      	movs	r2, r3
 80059be:	2100      	movs	r1, #0
 80059c0:	f012 fd74 	bl	80184ac <memset>
  if(adcHandle->Instance==ADC1)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a14      	ldr	r2, [pc, #80]	@ (8005a1c <HAL_ADC_MspInit+0x70>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d121      	bne.n	8005a12 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80059ce:	4b14      	ldr	r3, [pc, #80]	@ (8005a20 <HAL_ADC_MspInit+0x74>)
 80059d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059d2:	4b13      	ldr	r3, [pc, #76]	@ (8005a20 <HAL_ADC_MspInit+0x74>)
 80059d4:	2180      	movs	r1, #128	@ 0x80
 80059d6:	0089      	lsls	r1, r1, #2
 80059d8:	430a      	orrs	r2, r1
 80059da:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059dc:	4b10      	ldr	r3, [pc, #64]	@ (8005a20 <HAL_ADC_MspInit+0x74>)
 80059de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005a20 <HAL_ADC_MspInit+0x74>)
 80059e2:	2104      	movs	r1, #4
 80059e4:	430a      	orrs	r2, r1
 80059e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80059e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005a20 <HAL_ADC_MspInit+0x74>)
 80059ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ec:	2204      	movs	r2, #4
 80059ee:	4013      	ands	r3, r2
 80059f0:	60bb      	str	r3, [r7, #8]
 80059f2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 80059f4:	193b      	adds	r3, r7, r4
 80059f6:	2230      	movs	r2, #48	@ 0x30
 80059f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80059fa:	193b      	adds	r3, r7, r4
 80059fc:	2203      	movs	r2, #3
 80059fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a00:	193b      	adds	r3, r7, r4
 8005a02:	2200      	movs	r2, #0
 8005a04:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a06:	193b      	adds	r3, r7, r4
 8005a08:	4a06      	ldr	r2, [pc, #24]	@ (8005a24 <HAL_ADC_MspInit+0x78>)
 8005a0a:	0019      	movs	r1, r3
 8005a0c:	0010      	movs	r0, r2
 8005a0e:	f005 fd35 	bl	800b47c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005a12:	46c0      	nop			@ (mov r8, r8)
 8005a14:	46bd      	mov	sp, r7
 8005a16:	b009      	add	sp, #36	@ 0x24
 8005a18:	bd90      	pop	{r4, r7, pc}
 8005a1a:	46c0      	nop			@ (mov r8, r8)
 8005a1c:	40012400 	.word	0x40012400
 8005a20:	40021000 	.word	0x40021000
 8005a24:	50000800 	.word	0x50000800

08005a28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005a2e:	4b10      	ldr	r3, [pc, #64]	@ (8005a70 <MX_DMA_Init+0x48>)
 8005a30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a32:	4b0f      	ldr	r3, [pc, #60]	@ (8005a70 <MX_DMA_Init+0x48>)
 8005a34:	2101      	movs	r1, #1
 8005a36:	430a      	orrs	r2, r1
 8005a38:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a70 <MX_DMA_Init+0x48>)
 8005a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a3e:	2201      	movs	r2, #1
 8005a40:	4013      	ands	r3, r2
 8005a42:	607b      	str	r3, [r7, #4]
 8005a44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8005a46:	2200      	movs	r2, #0
 8005a48:	2100      	movs	r1, #0
 8005a4a:	200a      	movs	r0, #10
 8005a4c:	f005 f86a 	bl	800ab24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8005a50:	200a      	movs	r0, #10
 8005a52:	f005 f87c 	bl	800ab4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8005a56:	2200      	movs	r2, #0
 8005a58:	2103      	movs	r1, #3
 8005a5a:	200b      	movs	r0, #11
 8005a5c:	f005 f862 	bl	800ab24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8005a60:	200b      	movs	r0, #11
 8005a62:	f005 f874 	bl	800ab4e <HAL_NVIC_EnableIRQ>

}
 8005a66:	46c0      	nop			@ (mov r8, r8)
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	b002      	add	sp, #8
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	46c0      	nop			@ (mov r8, r8)
 8005a70:	40021000 	.word	0x40021000

08005a74 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b084      	sub	sp, #16
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
 8005a80:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 8005a82:	4b0c      	ldr	r3, [pc, #48]	@ (8005ab4 <Gadget_Init+0x40>)
 8005a84:	6818      	ldr	r0, [r3, #0]
 8005a86:	f001 f8d7 	bl	8006c38 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	0018      	movs	r0, r3
 8005a92:	f000 fe1b 	bl	80066cc <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	0018      	movs	r0, r3
 8005a9a:	f7fd fe6f 	bl	800377c <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 8005a9e:	4a06      	ldr	r2, [pc, #24]	@ (8005ab8 <Gadget_Init+0x44>)
 8005aa0:	4b06      	ldr	r3, [pc, #24]	@ (8005abc <Gadget_Init+0x48>)
 8005aa2:	0019      	movs	r1, r3
 8005aa4:	2003      	movs	r0, #3
 8005aa6:	f004 f841 	bl	8009b2c <CreateLine>
}
 8005aaa:	46c0      	nop			@ (mov r8, r8)
 8005aac:	46bd      	mov	sp, r7
 8005aae:	b004      	add	sp, #16
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	46c0      	nop			@ (mov r8, r8)
 8005ab4:	20000028 	.word	0x20000028
 8005ab8:	0801b844 	.word	0x0801b844
 8005abc:	0801b858 	.word	0x0801b858

08005ac0 <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
  Meas_Test();
 8005ac4:	f000 ff38 	bl	8006938 <Meas_Test>
}
 8005ac8:	46c0      	nop			@ (mov r8, r8)
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <UpkeepGadget>:

bool UpkeepGadget() {
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  MeasurementStatus = Meas_Upkeep();
 8005ad6:	f001 f81f 	bl	8006b18 <Meas_Upkeep>
 8005ada:	0003      	movs	r3, r0
 8005adc:	001a      	movs	r2, r3
 8005ade:	4b0f      	ldr	r3, [pc, #60]	@ (8005b1c <UpkeepGadget+0x4c>)
 8005ae0:	701a      	strb	r2, [r3, #0]
  MicrophoneStatus = Mic_Upkeep();
 8005ae2:	f000 ffcb 	bl	8006a7c <Mic_Upkeep>
 8005ae6:	0003      	movs	r3, r0
 8005ae8:	001a      	movs	r2, r3
 8005aea:	4b0d      	ldr	r3, [pc, #52]	@ (8005b20 <UpkeepGadget+0x50>)
 8005aec:	701a      	strb	r2, [r3, #0]
  gadgetBusy = (MeasurementStatus != MEAS_STATE_WAIT_FOR_READY || MicrophoneStatus != MIC_STATE_WAIT);
 8005aee:	4b0b      	ldr	r3, [pc, #44]	@ (8005b1c <UpkeepGadget+0x4c>)
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d103      	bne.n	8005afe <UpkeepGadget+0x2e>
 8005af6:	4b0a      	ldr	r3, [pc, #40]	@ (8005b20 <UpkeepGadget+0x50>)
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	d001      	beq.n	8005b02 <UpkeepGadget+0x32>
 8005afe:	2201      	movs	r2, #1
 8005b00:	e000      	b.n	8005b04 <UpkeepGadget+0x34>
 8005b02:	2200      	movs	r2, #0
 8005b04:	1dfb      	adds	r3, r7, #7
 8005b06:	701a      	strb	r2, [r3, #0]
 8005b08:	781a      	ldrb	r2, [r3, #0]
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	400a      	ands	r2, r1
 8005b0e:	701a      	strb	r2, [r3, #0]
  return gadgetBusy;
 8005b10:	1dfb      	adds	r3, r7, #7
 8005b12:	781b      	ldrb	r3, [r3, #0]
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8005b14:	0018      	movs	r0, r3
 8005b16:	46bd      	mov	sp, r7
 8005b18:	b002      	add	sp, #8
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	20000e70 	.word	0x20000e70
 8005b20:	20000e71 	.word	0x20000e71

08005b24 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	0011      	movs	r1, r2
 8005b34:	0018      	movs	r0, r3
 8005b36:	f002 fbe7 	bl	8008308 <SGP_Init>
}
 8005b3a:	46c0      	nop			@ (mov r8, r8)
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	b002      	add	sp, #8
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 8005b42:	b580      	push	{r7, lr}
 8005b44:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 8005b46:	f002 fbf9 	bl	800833c <SGP_StartMeasurement>
}
 8005b4a:	46c0      	nop			@ (mov r8, r8)
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	f002 fc5e 	bl	800841c <SGP_GetMeasurementValues>
 8005b60:	0003      	movs	r3, r0
}
 8005b62:	0018      	movs	r0, r3
 8005b64:	46bd      	mov	sp, r7
 8005b66:	b002      	add	sp, #8
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 8005b6e:	f002 fe6b 	bl	8008848 <SGP_DeviceConnected>
 8005b72:	0003      	movs	r3, r0
}
 8005b74:	0018      	movs	r0, r3
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
	...

08005b7c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8005b7c:	b590      	push	{r4, r7, lr}
 8005b7e:	b08b      	sub	sp, #44	@ 0x2c
 8005b80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b82:	2414      	movs	r4, #20
 8005b84:	193b      	adds	r3, r7, r4
 8005b86:	0018      	movs	r0, r3
 8005b88:	2314      	movs	r3, #20
 8005b8a:	001a      	movs	r2, r3
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	f012 fc8d 	bl	80184ac <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b92:	4b7c      	ldr	r3, [pc, #496]	@ (8005d84 <MX_GPIO_Init+0x208>)
 8005b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b96:	4b7b      	ldr	r3, [pc, #492]	@ (8005d84 <MX_GPIO_Init+0x208>)
 8005b98:	2104      	movs	r1, #4
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005b9e:	4b79      	ldr	r3, [pc, #484]	@ (8005d84 <MX_GPIO_Init+0x208>)
 8005ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba2:	2204      	movs	r2, #4
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	613b      	str	r3, [r7, #16]
 8005ba8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005baa:	4b76      	ldr	r3, [pc, #472]	@ (8005d84 <MX_GPIO_Init+0x208>)
 8005bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bae:	4b75      	ldr	r3, [pc, #468]	@ (8005d84 <MX_GPIO_Init+0x208>)
 8005bb0:	2180      	movs	r1, #128	@ 0x80
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005bb6:	4b73      	ldr	r3, [pc, #460]	@ (8005d84 <MX_GPIO_Init+0x208>)
 8005bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bba:	2280      	movs	r2, #128	@ 0x80
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bc2:	4b70      	ldr	r3, [pc, #448]	@ (8005d84 <MX_GPIO_Init+0x208>)
 8005bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bc6:	4b6f      	ldr	r3, [pc, #444]	@ (8005d84 <MX_GPIO_Init+0x208>)
 8005bc8:	2101      	movs	r1, #1
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005bce:	4b6d      	ldr	r3, [pc, #436]	@ (8005d84 <MX_GPIO_Init+0x208>)
 8005bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	60bb      	str	r3, [r7, #8]
 8005bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bda:	4b6a      	ldr	r3, [pc, #424]	@ (8005d84 <MX_GPIO_Init+0x208>)
 8005bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bde:	4b69      	ldr	r3, [pc, #420]	@ (8005d84 <MX_GPIO_Init+0x208>)
 8005be0:	2102      	movs	r1, #2
 8005be2:	430a      	orrs	r2, r1
 8005be4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005be6:	4b67      	ldr	r3, [pc, #412]	@ (8005d84 <MX_GPIO_Init+0x208>)
 8005be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bea:	2202      	movs	r2, #2
 8005bec:	4013      	ands	r3, r2
 8005bee:	607b      	str	r3, [r7, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005bf2:	4b64      	ldr	r3, [pc, #400]	@ (8005d84 <MX_GPIO_Init+0x208>)
 8005bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bf6:	4b63      	ldr	r3, [pc, #396]	@ (8005d84 <MX_GPIO_Init+0x208>)
 8005bf8:	2108      	movs	r1, #8
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005bfe:	4b61      	ldr	r3, [pc, #388]	@ (8005d84 <MX_GPIO_Init+0x208>)
 8005c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c02:	2208      	movs	r2, #8
 8005c04:	4013      	ands	r3, r2
 8005c06:	603b      	str	r3, [r7, #0]
 8005c08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8005c0a:	4b5f      	ldr	r3, [pc, #380]	@ (8005d88 <MX_GPIO_Init+0x20c>)
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	2101      	movs	r1, #1
 8005c10:	0018      	movs	r0, r3
 8005c12:	f005 feb0 	bl	800b976 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8005c16:	4b5c      	ldr	r3, [pc, #368]	@ (8005d88 <MX_GPIO_Init+0x20c>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	2102      	movs	r1, #2
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	f005 feaa 	bl	800b976 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8005c22:	495a      	ldr	r1, [pc, #360]	@ (8005d8c <MX_GPIO_Init+0x210>)
 8005c24:	4b5a      	ldr	r3, [pc, #360]	@ (8005d90 <MX_GPIO_Init+0x214>)
 8005c26:	2201      	movs	r2, #1
 8005c28:	0018      	movs	r0, r3
 8005c2a:	f005 fea4 	bl	800b976 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005c2e:	2380      	movs	r3, #128	@ 0x80
 8005c30:	011b      	lsls	r3, r3, #4
 8005c32:	4858      	ldr	r0, [pc, #352]	@ (8005d94 <MX_GPIO_Init+0x218>)
 8005c34:	2201      	movs	r2, #1
 8005c36:	0019      	movs	r1, r3
 8005c38:	f005 fe9d 	bl	800b976 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8005c3c:	2380      	movs	r3, #128	@ 0x80
 8005c3e:	015b      	lsls	r3, r3, #5
 8005c40:	4854      	ldr	r0, [pc, #336]	@ (8005d94 <MX_GPIO_Init+0x218>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	0019      	movs	r1, r3
 8005c46:	f005 fe96 	bl	800b976 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 8005c4a:	193b      	adds	r3, r7, r4
 8005c4c:	4a52      	ldr	r2, [pc, #328]	@ (8005d98 <MX_GPIO_Init+0x21c>)
 8005c4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005c50:	193b      	adds	r3, r7, r4
 8005c52:	2203      	movs	r2, #3
 8005c54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c56:	193b      	adds	r3, r7, r4
 8005c58:	2200      	movs	r2, #0
 8005c5a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c5c:	193b      	adds	r3, r7, r4
 8005c5e:	4a4d      	ldr	r2, [pc, #308]	@ (8005d94 <MX_GPIO_Init+0x218>)
 8005c60:	0019      	movs	r1, r3
 8005c62:	0010      	movs	r0, r2
 8005c64:	f005 fc0a 	bl	800b47c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8005c68:	193b      	adds	r3, r7, r4
 8005c6a:	2203      	movs	r2, #3
 8005c6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c6e:	193b      	adds	r3, r7, r4
 8005c70:	2201      	movs	r2, #1
 8005c72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c74:	193b      	adds	r3, r7, r4
 8005c76:	2200      	movs	r2, #0
 8005c78:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c7a:	193b      	adds	r3, r7, r4
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005c80:	193b      	adds	r3, r7, r4
 8005c82:	4a41      	ldr	r2, [pc, #260]	@ (8005d88 <MX_GPIO_Init+0x20c>)
 8005c84:	0019      	movs	r1, r3
 8005c86:	0010      	movs	r0, r2
 8005c88:	f005 fbf8 	bl	800b47c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005c8c:	193b      	adds	r3, r7, r4
 8005c8e:	2270      	movs	r2, #112	@ 0x70
 8005c90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005c92:	193b      	adds	r3, r7, r4
 8005c94:	2203      	movs	r2, #3
 8005c96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c98:	193b      	adds	r3, r7, r4
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c9e:	193a      	adds	r2, r7, r4
 8005ca0:	23a0      	movs	r3, #160	@ 0xa0
 8005ca2:	05db      	lsls	r3, r3, #23
 8005ca4:	0011      	movs	r1, r2
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	f005 fbe8 	bl	800b47c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin|BOOT0_Pin;
 8005cac:	193b      	adds	r3, r7, r4
 8005cae:	4a3b      	ldr	r2, [pc, #236]	@ (8005d9c <MX_GPIO_Init+0x220>)
 8005cb0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005cb2:	193b      	adds	r3, r7, r4
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cb8:	193b      	adds	r3, r7, r4
 8005cba:	2200      	movs	r2, #0
 8005cbc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cbe:	193a      	adds	r2, r7, r4
 8005cc0:	23a0      	movs	r3, #160	@ 0xa0
 8005cc2:	05db      	lsls	r3, r3, #23
 8005cc4:	0011      	movs	r1, r2
 8005cc6:	0018      	movs	r0, r3
 8005cc8:	f005 fbd8 	bl	800b47c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8005ccc:	193b      	adds	r3, r7, r4
 8005cce:	4a2f      	ldr	r2, [pc, #188]	@ (8005d8c <MX_GPIO_Init+0x210>)
 8005cd0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cd2:	193b      	adds	r3, r7, r4
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cd8:	193b      	adds	r3, r7, r4
 8005cda:	2200      	movs	r2, #0
 8005cdc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cde:	193b      	adds	r3, r7, r4
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ce4:	193b      	adds	r3, r7, r4
 8005ce6:	4a2a      	ldr	r2, [pc, #168]	@ (8005d90 <MX_GPIO_Init+0x214>)
 8005ce8:	0019      	movs	r1, r3
 8005cea:	0010      	movs	r0, r2
 8005cec:	f005 fbc6 	bl	800b47c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8005cf0:	193b      	adds	r3, r7, r4
 8005cf2:	4a2b      	ldr	r2, [pc, #172]	@ (8005da0 <MX_GPIO_Init+0x224>)
 8005cf4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005cf6:	193b      	adds	r3, r7, r4
 8005cf8:	2203      	movs	r2, #3
 8005cfa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cfc:	193b      	adds	r3, r7, r4
 8005cfe:	2200      	movs	r2, #0
 8005d00:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d02:	193b      	adds	r3, r7, r4
 8005d04:	4a22      	ldr	r2, [pc, #136]	@ (8005d90 <MX_GPIO_Init+0x214>)
 8005d06:	0019      	movs	r1, r3
 8005d08:	0010      	movs	r0, r2
 8005d0a:	f005 fbb7 	bl	800b47c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8005d0e:	0021      	movs	r1, r4
 8005d10:	187b      	adds	r3, r7, r1
 8005d12:	2280      	movs	r2, #128	@ 0x80
 8005d14:	0092      	lsls	r2, r2, #2
 8005d16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d18:	000c      	movs	r4, r1
 8005d1a:	193b      	adds	r3, r7, r4
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d20:	193b      	adds	r3, r7, r4
 8005d22:	2200      	movs	r2, #0
 8005d24:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8005d26:	193b      	adds	r3, r7, r4
 8005d28:	4a1a      	ldr	r2, [pc, #104]	@ (8005d94 <MX_GPIO_Init+0x218>)
 8005d2a:	0019      	movs	r1, r3
 8005d2c:	0010      	movs	r0, r2
 8005d2e:	f005 fba5 	bl	800b47c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8005d32:	0021      	movs	r1, r4
 8005d34:	187b      	adds	r3, r7, r1
 8005d36:	22c0      	movs	r2, #192	@ 0xc0
 8005d38:	0152      	lsls	r2, r2, #5
 8005d3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d3c:	000c      	movs	r4, r1
 8005d3e:	193b      	adds	r3, r7, r4
 8005d40:	2201      	movs	r2, #1
 8005d42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d44:	193b      	adds	r3, r7, r4
 8005d46:	2200      	movs	r2, #0
 8005d48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d4a:	193b      	adds	r3, r7, r4
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d50:	193b      	adds	r3, r7, r4
 8005d52:	4a10      	ldr	r2, [pc, #64]	@ (8005d94 <MX_GPIO_Init+0x218>)
 8005d54:	0019      	movs	r1, r3
 8005d56:	0010      	movs	r0, r2
 8005d58:	f005 fb90 	bl	800b47c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8005d5c:	0021      	movs	r1, r4
 8005d5e:	187b      	adds	r3, r7, r1
 8005d60:	2204      	movs	r2, #4
 8005d62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d64:	187b      	adds	r3, r7, r1
 8005d66:	2200      	movs	r2, #0
 8005d68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d6a:	187b      	adds	r3, r7, r1
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8005d70:	187b      	adds	r3, r7, r1
 8005d72:	4a0c      	ldr	r2, [pc, #48]	@ (8005da4 <MX_GPIO_Init+0x228>)
 8005d74:	0019      	movs	r1, r3
 8005d76:	0010      	movs	r0, r2
 8005d78:	f005 fb80 	bl	800b47c <HAL_GPIO_Init>

}
 8005d7c:	46c0      	nop			@ (mov r8, r8)
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	b00b      	add	sp, #44	@ 0x2c
 8005d82:	bd90      	pop	{r4, r7, pc}
 8005d84:	40021000 	.word	0x40021000
 8005d88:	50001c00 	.word	0x50001c00
 8005d8c:	00000301 	.word	0x00000301
 8005d90:	50000400 	.word	0x50000400
 8005d94:	50000800 	.word	0x50000800
 8005d98:	0000200c 	.word	0x0000200c
 8005d9c:	00008180 	.word	0x00008180
 8005da0:	0000403e 	.word	0x0000403e
 8005da4:	50000c00 	.word	0x50000c00

08005da8 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2100      	movs	r1, #0
 8005db6:	0018      	movs	r0, r3
 8005db8:	f00b f9f8 	bl	80111ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2108      	movs	r1, #8
 8005dc0:	0018      	movs	r0, r3
 8005dc2:	f00b f9f3 	bl	80111ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	210c      	movs	r1, #12
 8005dca:	0018      	movs	r0, r3
 8005dcc:	f00b f9ee 	bl	80111ac <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8005dd0:	2380      	movs	r3, #128	@ 0x80
 8005dd2:	05db      	lsls	r3, r3, #23
 8005dd4:	22fa      	movs	r2, #250	@ 0xfa
 8005dd6:	0112      	lsls	r2, r2, #4
 8005dd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8005dda:	2380      	movs	r3, #128	@ 0x80
 8005ddc:	05db      	lsls	r3, r3, #23
 8005dde:	22fa      	movs	r2, #250	@ 0xfa
 8005de0:	0112      	lsls	r2, r2, #4
 8005de2:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8005de4:	2380      	movs	r3, #128	@ 0x80
 8005de6:	05db      	lsls	r3, r3, #23
 8005de8:	22fa      	movs	r2, #250	@ 0xfa
 8005dea:	0112      	lsls	r2, r2, #4
 8005dec:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8005dee:	2380      	movs	r3, #128	@ 0x80
 8005df0:	05db      	lsls	r3, r3, #23
 8005df2:	22fa      	movs	r2, #250	@ 0xfa
 8005df4:	0112      	lsls	r2, r2, #4
 8005df6:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	f00b f9d5 	bl	80111ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	2104      	movs	r1, #4
 8005e06:	0018      	movs	r0, r3
 8005e08:	f00b f9d0 	bl	80111ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2108      	movs	r1, #8
 8005e10:	0018      	movs	r0, r3
 8005e12:	f00b f9cb 	bl	80111ac <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8005e16:	4b0a      	ldr	r3, [pc, #40]	@ (8005e40 <GPIO_InitPWMLEDs+0x98>)
 8005e18:	22fa      	movs	r2, #250	@ 0xfa
 8005e1a:	0112      	lsls	r2, r2, #4
 8005e1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8005e1e:	4b08      	ldr	r3, [pc, #32]	@ (8005e40 <GPIO_InitPWMLEDs+0x98>)
 8005e20:	22fa      	movs	r2, #250	@ 0xfa
 8005e22:	0112      	lsls	r2, r2, #4
 8005e24:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8005e26:	4b06      	ldr	r3, [pc, #24]	@ (8005e40 <GPIO_InitPWMLEDs+0x98>)
 8005e28:	22fa      	movs	r2, #250	@ 0xfa
 8005e2a:	0112      	lsls	r2, r2, #4
 8005e2c:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8005e2e:	4b04      	ldr	r3, [pc, #16]	@ (8005e40 <GPIO_InitPWMLEDs+0x98>)
 8005e30:	22fa      	movs	r2, #250	@ 0xfa
 8005e32:	0112      	lsls	r2, r2, #4
 8005e34:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8005e36:	46c0      	nop			@ (mov r8, r8)
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	b002      	add	sp, #8
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	46c0      	nop			@ (mov r8, r8)
 8005e40:	40000400 	.word	0x40000400

08005e44 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	0011      	movs	r1, r2
 8005e54:	0018      	movs	r0, r3
 8005e56:	f003 ffaf 	bl	8009db8 <HIDS_Init>
}
 8005e5a:	46c0      	nop			@ (mov r8, r8)
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	b002      	add	sp, #8
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8005e62:	b580      	push	{r7, lr}
 8005e64:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8005e66:	f003 ffc9 	bl	8009dfc <HIDS_StartMeasurement>
}
 8005e6a:	46c0      	nop			@ (mov r8, r8)
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	0011      	movs	r1, r2
 8005e80:	0018      	movs	r0, r3
 8005e82:	f004 f897 	bl	8009fb4 <HIDS_GetMeasurementValues>
 8005e86:	0003      	movs	r3, r0
}
 8005e88:	0018      	movs	r0, r3
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	b002      	add	sp, #8
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8005e94:	f004 f832 	bl	8009efc <HIDS_DeviceConnected>
 8005e98:	0003      	movs	r3, r0
}
 8005e9a:	0018      	movs	r0, r3
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8005f14 <MX_I2C1_Init+0x74>)
 8005ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8005f18 <MX_I2C1_Init+0x78>)
 8005ea8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8005eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8005f14 <MX_I2C1_Init+0x74>)
 8005eac:	4a1b      	ldr	r2, [pc, #108]	@ (8005f1c <MX_I2C1_Init+0x7c>)
 8005eae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005eb0:	4b18      	ldr	r3, [pc, #96]	@ (8005f14 <MX_I2C1_Init+0x74>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005eb6:	4b17      	ldr	r3, [pc, #92]	@ (8005f14 <MX_I2C1_Init+0x74>)
 8005eb8:	2201      	movs	r2, #1
 8005eba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005ebc:	4b15      	ldr	r3, [pc, #84]	@ (8005f14 <MX_I2C1_Init+0x74>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005ec2:	4b14      	ldr	r3, [pc, #80]	@ (8005f14 <MX_I2C1_Init+0x74>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005ec8:	4b12      	ldr	r3, [pc, #72]	@ (8005f14 <MX_I2C1_Init+0x74>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005ece:	4b11      	ldr	r3, [pc, #68]	@ (8005f14 <MX_I2C1_Init+0x74>)
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8005f14 <MX_I2C1_Init+0x74>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005eda:	4b0e      	ldr	r3, [pc, #56]	@ (8005f14 <MX_I2C1_Init+0x74>)
 8005edc:	0018      	movs	r0, r3
 8005ede:	f005 fd67 	bl	800b9b0 <HAL_I2C_Init>
 8005ee2:	1e03      	subs	r3, r0, #0
 8005ee4:	d001      	beq.n	8005eea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005ee6:	f000 fb7d 	bl	80065e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005eea:	4b0a      	ldr	r3, [pc, #40]	@ (8005f14 <MX_I2C1_Init+0x74>)
 8005eec:	2100      	movs	r1, #0
 8005eee:	0018      	movs	r0, r3
 8005ef0:	f007 fcd6 	bl	800d8a0 <HAL_I2CEx_ConfigAnalogFilter>
 8005ef4:	1e03      	subs	r3, r0, #0
 8005ef6:	d001      	beq.n	8005efc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005ef8:	f000 fb74 	bl	80065e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005efc:	4b05      	ldr	r3, [pc, #20]	@ (8005f14 <MX_I2C1_Init+0x74>)
 8005efe:	2100      	movs	r1, #0
 8005f00:	0018      	movs	r0, r3
 8005f02:	f007 fd19 	bl	800d938 <HAL_I2CEx_ConfigDigitalFilter>
 8005f06:	1e03      	subs	r3, r0, #0
 8005f08:	d001      	beq.n	8005f0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005f0a:	f000 fb6b 	bl	80065e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005f0e:	46c0      	nop			@ (mov r8, r8)
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	20000e74 	.word	0x20000e74
 8005f18:	40005400 	.word	0x40005400
 8005f1c:	00503d58 	.word	0x00503d58

08005f20 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005f24:	4b1b      	ldr	r3, [pc, #108]	@ (8005f94 <MX_I2C2_Init+0x74>)
 8005f26:	4a1c      	ldr	r2, [pc, #112]	@ (8005f98 <MX_I2C2_Init+0x78>)
 8005f28:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8005f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8005f94 <MX_I2C2_Init+0x74>)
 8005f2c:	4a1b      	ldr	r2, [pc, #108]	@ (8005f9c <MX_I2C2_Init+0x7c>)
 8005f2e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005f30:	4b18      	ldr	r3, [pc, #96]	@ (8005f94 <MX_I2C2_Init+0x74>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005f36:	4b17      	ldr	r3, [pc, #92]	@ (8005f94 <MX_I2C2_Init+0x74>)
 8005f38:	2201      	movs	r2, #1
 8005f3a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005f3c:	4b15      	ldr	r3, [pc, #84]	@ (8005f94 <MX_I2C2_Init+0x74>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8005f42:	4b14      	ldr	r3, [pc, #80]	@ (8005f94 <MX_I2C2_Init+0x74>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005f48:	4b12      	ldr	r3, [pc, #72]	@ (8005f94 <MX_I2C2_Init+0x74>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005f4e:	4b11      	ldr	r3, [pc, #68]	@ (8005f94 <MX_I2C2_Init+0x74>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005f54:	4b0f      	ldr	r3, [pc, #60]	@ (8005f94 <MX_I2C2_Init+0x74>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8005f94 <MX_I2C2_Init+0x74>)
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	f005 fd27 	bl	800b9b0 <HAL_I2C_Init>
 8005f62:	1e03      	subs	r3, r0, #0
 8005f64:	d001      	beq.n	8005f6a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8005f66:	f000 fb3d 	bl	80065e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8005f94 <MX_I2C2_Init+0x74>)
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	0018      	movs	r0, r3
 8005f70:	f007 fc96 	bl	800d8a0 <HAL_I2CEx_ConfigAnalogFilter>
 8005f74:	1e03      	subs	r3, r0, #0
 8005f76:	d001      	beq.n	8005f7c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005f78:	f000 fb34 	bl	80065e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005f7c:	4b05      	ldr	r3, [pc, #20]	@ (8005f94 <MX_I2C2_Init+0x74>)
 8005f7e:	2100      	movs	r1, #0
 8005f80:	0018      	movs	r0, r3
 8005f82:	f007 fcd9 	bl	800d938 <HAL_I2CEx_ConfigDigitalFilter>
 8005f86:	1e03      	subs	r3, r0, #0
 8005f88:	d001      	beq.n	8005f8e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8005f8a:	f000 fb2b 	bl	80065e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005f8e:	46c0      	nop			@ (mov r8, r8)
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	20000ec8 	.word	0x20000ec8
 8005f98:	40005800 	.word	0x40005800
 8005f9c:	00503d58 	.word	0x00503d58

08005fa0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005fa0:	b590      	push	{r4, r7, lr}
 8005fa2:	b08b      	sub	sp, #44	@ 0x2c
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fa8:	2414      	movs	r4, #20
 8005faa:	193b      	adds	r3, r7, r4
 8005fac:	0018      	movs	r0, r3
 8005fae:	2314      	movs	r3, #20
 8005fb0:	001a      	movs	r2, r3
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	f012 fa7a 	bl	80184ac <memset>
  if(i2cHandle->Instance==I2C1)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a5d      	ldr	r2, [pc, #372]	@ (8006134 <HAL_I2C_MspInit+0x194>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d000      	beq.n	8005fc4 <HAL_I2C_MspInit+0x24>
 8005fc2:	e083      	b.n	80060cc <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fc4:	4b5c      	ldr	r3, [pc, #368]	@ (8006138 <HAL_I2C_MspInit+0x198>)
 8005fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fc8:	4b5b      	ldr	r3, [pc, #364]	@ (8006138 <HAL_I2C_MspInit+0x198>)
 8005fca:	2102      	movs	r1, #2
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005fd0:	4b59      	ldr	r3, [pc, #356]	@ (8006138 <HAL_I2C_MspInit+0x198>)
 8005fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd4:	2202      	movs	r2, #2
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	613b      	str	r3, [r7, #16]
 8005fda:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005fdc:	0021      	movs	r1, r4
 8005fde:	187b      	adds	r3, r7, r1
 8005fe0:	22c0      	movs	r2, #192	@ 0xc0
 8005fe2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005fe4:	187b      	adds	r3, r7, r1
 8005fe6:	2212      	movs	r2, #18
 8005fe8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fea:	187b      	adds	r3, r7, r1
 8005fec:	2200      	movs	r2, #0
 8005fee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ff0:	187b      	adds	r3, r7, r1
 8005ff2:	2203      	movs	r2, #3
 8005ff4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8005ff6:	187b      	adds	r3, r7, r1
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ffc:	187b      	adds	r3, r7, r1
 8005ffe:	4a4f      	ldr	r2, [pc, #316]	@ (800613c <HAL_I2C_MspInit+0x19c>)
 8006000:	0019      	movs	r1, r3
 8006002:	0010      	movs	r0, r2
 8006004:	f005 fa3a 	bl	800b47c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006008:	4b4b      	ldr	r3, [pc, #300]	@ (8006138 <HAL_I2C_MspInit+0x198>)
 800600a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800600c:	4b4a      	ldr	r3, [pc, #296]	@ (8006138 <HAL_I2C_MspInit+0x198>)
 800600e:	2180      	movs	r1, #128	@ 0x80
 8006010:	0389      	lsls	r1, r1, #14
 8006012:	430a      	orrs	r2, r1
 8006014:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8006016:	4b4a      	ldr	r3, [pc, #296]	@ (8006140 <HAL_I2C_MspInit+0x1a0>)
 8006018:	4a4a      	ldr	r2, [pc, #296]	@ (8006144 <HAL_I2C_MspInit+0x1a4>)
 800601a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 800601c:	4b48      	ldr	r3, [pc, #288]	@ (8006140 <HAL_I2C_MspInit+0x1a0>)
 800601e:	2206      	movs	r2, #6
 8006020:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006022:	4b47      	ldr	r3, [pc, #284]	@ (8006140 <HAL_I2C_MspInit+0x1a0>)
 8006024:	2200      	movs	r2, #0
 8006026:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006028:	4b45      	ldr	r3, [pc, #276]	@ (8006140 <HAL_I2C_MspInit+0x1a0>)
 800602a:	2200      	movs	r2, #0
 800602c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800602e:	4b44      	ldr	r3, [pc, #272]	@ (8006140 <HAL_I2C_MspInit+0x1a0>)
 8006030:	2280      	movs	r2, #128	@ 0x80
 8006032:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006034:	4b42      	ldr	r3, [pc, #264]	@ (8006140 <HAL_I2C_MspInit+0x1a0>)
 8006036:	2200      	movs	r2, #0
 8006038:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800603a:	4b41      	ldr	r3, [pc, #260]	@ (8006140 <HAL_I2C_MspInit+0x1a0>)
 800603c:	2200      	movs	r2, #0
 800603e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8006040:	4b3f      	ldr	r3, [pc, #252]	@ (8006140 <HAL_I2C_MspInit+0x1a0>)
 8006042:	2200      	movs	r2, #0
 8006044:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006046:	4b3e      	ldr	r3, [pc, #248]	@ (8006140 <HAL_I2C_MspInit+0x1a0>)
 8006048:	2200      	movs	r2, #0
 800604a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800604c:	4b3c      	ldr	r3, [pc, #240]	@ (8006140 <HAL_I2C_MspInit+0x1a0>)
 800604e:	0018      	movs	r0, r3
 8006050:	f004 fd9a 	bl	800ab88 <HAL_DMA_Init>
 8006054:	1e03      	subs	r3, r0, #0
 8006056:	d001      	beq.n	800605c <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8006058:	f000 fac4 	bl	80065e4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a38      	ldr	r2, [pc, #224]	@ (8006140 <HAL_I2C_MspInit+0x1a0>)
 8006060:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006062:	4b37      	ldr	r3, [pc, #220]	@ (8006140 <HAL_I2C_MspInit+0x1a0>)
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8006068:	4b37      	ldr	r3, [pc, #220]	@ (8006148 <HAL_I2C_MspInit+0x1a8>)
 800606a:	4a38      	ldr	r2, [pc, #224]	@ (800614c <HAL_I2C_MspInit+0x1ac>)
 800606c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800606e:	4b36      	ldr	r3, [pc, #216]	@ (8006148 <HAL_I2C_MspInit+0x1a8>)
 8006070:	2206      	movs	r2, #6
 8006072:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006074:	4b34      	ldr	r3, [pc, #208]	@ (8006148 <HAL_I2C_MspInit+0x1a8>)
 8006076:	2210      	movs	r2, #16
 8006078:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800607a:	4b33      	ldr	r3, [pc, #204]	@ (8006148 <HAL_I2C_MspInit+0x1a8>)
 800607c:	2200      	movs	r2, #0
 800607e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006080:	4b31      	ldr	r3, [pc, #196]	@ (8006148 <HAL_I2C_MspInit+0x1a8>)
 8006082:	2280      	movs	r2, #128	@ 0x80
 8006084:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006086:	4b30      	ldr	r3, [pc, #192]	@ (8006148 <HAL_I2C_MspInit+0x1a8>)
 8006088:	2200      	movs	r2, #0
 800608a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800608c:	4b2e      	ldr	r3, [pc, #184]	@ (8006148 <HAL_I2C_MspInit+0x1a8>)
 800608e:	2200      	movs	r2, #0
 8006090:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8006092:	4b2d      	ldr	r3, [pc, #180]	@ (8006148 <HAL_I2C_MspInit+0x1a8>)
 8006094:	2200      	movs	r2, #0
 8006096:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006098:	4b2b      	ldr	r3, [pc, #172]	@ (8006148 <HAL_I2C_MspInit+0x1a8>)
 800609a:	2200      	movs	r2, #0
 800609c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800609e:	4b2a      	ldr	r3, [pc, #168]	@ (8006148 <HAL_I2C_MspInit+0x1a8>)
 80060a0:	0018      	movs	r0, r3
 80060a2:	f004 fd71 	bl	800ab88 <HAL_DMA_Init>
 80060a6:	1e03      	subs	r3, r0, #0
 80060a8:	d001      	beq.n	80060ae <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 80060aa:	f000 fa9b 	bl	80065e4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a25      	ldr	r2, [pc, #148]	@ (8006148 <HAL_I2C_MspInit+0x1a8>)
 80060b2:	639a      	str	r2, [r3, #56]	@ 0x38
 80060b4:	4b24      	ldr	r3, [pc, #144]	@ (8006148 <HAL_I2C_MspInit+0x1a8>)
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80060ba:	2200      	movs	r2, #0
 80060bc:	2100      	movs	r1, #0
 80060be:	2017      	movs	r0, #23
 80060c0:	f004 fd30 	bl	800ab24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80060c4:	2017      	movs	r0, #23
 80060c6:	f004 fd42 	bl	800ab4e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80060ca:	e02e      	b.n	800612a <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a1f      	ldr	r2, [pc, #124]	@ (8006150 <HAL_I2C_MspInit+0x1b0>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d129      	bne.n	800612a <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060d6:	4b18      	ldr	r3, [pc, #96]	@ (8006138 <HAL_I2C_MspInit+0x198>)
 80060d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060da:	4b17      	ldr	r3, [pc, #92]	@ (8006138 <HAL_I2C_MspInit+0x198>)
 80060dc:	2102      	movs	r1, #2
 80060de:	430a      	orrs	r2, r1
 80060e0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80060e2:	4b15      	ldr	r3, [pc, #84]	@ (8006138 <HAL_I2C_MspInit+0x198>)
 80060e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e6:	2202      	movs	r2, #2
 80060e8:	4013      	ands	r3, r2
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80060ee:	2114      	movs	r1, #20
 80060f0:	187b      	adds	r3, r7, r1
 80060f2:	22c0      	movs	r2, #192	@ 0xc0
 80060f4:	0112      	lsls	r2, r2, #4
 80060f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80060f8:	187b      	adds	r3, r7, r1
 80060fa:	2212      	movs	r2, #18
 80060fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060fe:	187b      	adds	r3, r7, r1
 8006100:	2200      	movs	r2, #0
 8006102:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006104:	187b      	adds	r3, r7, r1
 8006106:	2203      	movs	r2, #3
 8006108:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800610a:	187b      	adds	r3, r7, r1
 800610c:	2206      	movs	r2, #6
 800610e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006110:	187b      	adds	r3, r7, r1
 8006112:	4a0a      	ldr	r2, [pc, #40]	@ (800613c <HAL_I2C_MspInit+0x19c>)
 8006114:	0019      	movs	r1, r3
 8006116:	0010      	movs	r0, r2
 8006118:	f005 f9b0 	bl	800b47c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800611c:	4b06      	ldr	r3, [pc, #24]	@ (8006138 <HAL_I2C_MspInit+0x198>)
 800611e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006120:	4b05      	ldr	r3, [pc, #20]	@ (8006138 <HAL_I2C_MspInit+0x198>)
 8006122:	2180      	movs	r1, #128	@ 0x80
 8006124:	03c9      	lsls	r1, r1, #15
 8006126:	430a      	orrs	r2, r1
 8006128:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800612a:	46c0      	nop			@ (mov r8, r8)
 800612c:	46bd      	mov	sp, r7
 800612e:	b00b      	add	sp, #44	@ 0x2c
 8006130:	bd90      	pop	{r4, r7, pc}
 8006132:	46c0      	nop			@ (mov r8, r8)
 8006134:	40005400 	.word	0x40005400
 8006138:	40021000 	.word	0x40021000
 800613c:	50000400 	.word	0x50000400
 8006140:	20000f1c 	.word	0x20000f1c
 8006144:	40020030 	.word	0x40020030
 8006148:	20000f64 	.word	0x20000f64
 800614c:	4002001c 	.word	0x4002001c
 8006150:	40005800 	.word	0x40005800

08006154 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8006158:	4b10      	ldr	r3, [pc, #64]	@ (800619c <MX_I2S2_Init+0x48>)
 800615a:	4a11      	ldr	r2, [pc, #68]	@ (80061a0 <MX_I2S2_Init+0x4c>)
 800615c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800615e:	4b0f      	ldr	r3, [pc, #60]	@ (800619c <MX_I2S2_Init+0x48>)
 8006160:	22c0      	movs	r2, #192	@ 0xc0
 8006162:	0092      	lsls	r2, r2, #2
 8006164:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8006166:	4b0d      	ldr	r3, [pc, #52]	@ (800619c <MX_I2S2_Init+0x48>)
 8006168:	2210      	movs	r2, #16
 800616a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 800616c:	4b0b      	ldr	r3, [pc, #44]	@ (800619c <MX_I2S2_Init+0x48>)
 800616e:	2205      	movs	r2, #5
 8006170:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8006172:	4b0a      	ldr	r3, [pc, #40]	@ (800619c <MX_I2S2_Init+0x48>)
 8006174:	2200      	movs	r2, #0
 8006176:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8006178:	4b08      	ldr	r3, [pc, #32]	@ (800619c <MX_I2S2_Init+0x48>)
 800617a:	22fa      	movs	r2, #250	@ 0xfa
 800617c:	0152      	lsls	r2, r2, #5
 800617e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8006180:	4b06      	ldr	r3, [pc, #24]	@ (800619c <MX_I2S2_Init+0x48>)
 8006182:	2208      	movs	r2, #8
 8006184:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8006186:	4b05      	ldr	r3, [pc, #20]	@ (800619c <MX_I2S2_Init+0x48>)
 8006188:	0018      	movs	r0, r3
 800618a:	f007 fc21 	bl	800d9d0 <HAL_I2S_Init>
 800618e:	1e03      	subs	r3, r0, #0
 8006190:	d001      	beq.n	8006196 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8006192:	f000 fa27 	bl	80065e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8006196:	46c0      	nop			@ (mov r8, r8)
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	20000fac 	.word	0x20000fac
 80061a0:	40003800 	.word	0x40003800

080061a4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80061a4:	b590      	push	{r4, r7, lr}
 80061a6:	b089      	sub	sp, #36	@ 0x24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061ac:	240c      	movs	r4, #12
 80061ae:	193b      	adds	r3, r7, r4
 80061b0:	0018      	movs	r0, r3
 80061b2:	2314      	movs	r3, #20
 80061b4:	001a      	movs	r2, r3
 80061b6:	2100      	movs	r1, #0
 80061b8:	f012 f978 	bl	80184ac <memset>
  if(i2sHandle->Instance==SPI2)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a2d      	ldr	r2, [pc, #180]	@ (8006278 <HAL_I2S_MspInit+0xd4>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d154      	bne.n	8006270 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80061c6:	4b2d      	ldr	r3, [pc, #180]	@ (800627c <HAL_I2S_MspInit+0xd8>)
 80061c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061ca:	4b2c      	ldr	r3, [pc, #176]	@ (800627c <HAL_I2S_MspInit+0xd8>)
 80061cc:	2180      	movs	r1, #128	@ 0x80
 80061ce:	01c9      	lsls	r1, r1, #7
 80061d0:	430a      	orrs	r2, r1
 80061d2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061d4:	4b29      	ldr	r3, [pc, #164]	@ (800627c <HAL_I2S_MspInit+0xd8>)
 80061d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061d8:	4b28      	ldr	r3, [pc, #160]	@ (800627c <HAL_I2S_MspInit+0xd8>)
 80061da:	2102      	movs	r1, #2
 80061dc:	430a      	orrs	r2, r1
 80061de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80061e0:	4b26      	ldr	r3, [pc, #152]	@ (800627c <HAL_I2S_MspInit+0xd8>)
 80061e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e4:	2202      	movs	r2, #2
 80061e6:	4013      	ands	r3, r2
 80061e8:	60bb      	str	r3, [r7, #8]
 80061ea:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80061ec:	193b      	adds	r3, r7, r4
 80061ee:	22b0      	movs	r2, #176	@ 0xb0
 80061f0:	0212      	lsls	r2, r2, #8
 80061f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061f4:	0021      	movs	r1, r4
 80061f6:	187b      	adds	r3, r7, r1
 80061f8:	2202      	movs	r2, #2
 80061fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061fc:	187b      	adds	r3, r7, r1
 80061fe:	2200      	movs	r2, #0
 8006200:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006202:	187b      	adds	r3, r7, r1
 8006204:	2200      	movs	r2, #0
 8006206:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8006208:	187b      	adds	r3, r7, r1
 800620a:	2200      	movs	r2, #0
 800620c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800620e:	187b      	adds	r3, r7, r1
 8006210:	4a1b      	ldr	r2, [pc, #108]	@ (8006280 <HAL_I2S_MspInit+0xdc>)
 8006212:	0019      	movs	r1, r3
 8006214:	0010      	movs	r0, r2
 8006216:	f005 f931 	bl	800b47c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800621a:	4b1a      	ldr	r3, [pc, #104]	@ (8006284 <HAL_I2S_MspInit+0xe0>)
 800621c:	4a1a      	ldr	r2, [pc, #104]	@ (8006288 <HAL_I2S_MspInit+0xe4>)
 800621e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8006220:	4b18      	ldr	r3, [pc, #96]	@ (8006284 <HAL_I2S_MspInit+0xe0>)
 8006222:	2202      	movs	r2, #2
 8006224:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006226:	4b17      	ldr	r3, [pc, #92]	@ (8006284 <HAL_I2S_MspInit+0xe0>)
 8006228:	2200      	movs	r2, #0
 800622a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800622c:	4b15      	ldr	r3, [pc, #84]	@ (8006284 <HAL_I2S_MspInit+0xe0>)
 800622e:	2200      	movs	r2, #0
 8006230:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006232:	4b14      	ldr	r3, [pc, #80]	@ (8006284 <HAL_I2S_MspInit+0xe0>)
 8006234:	2280      	movs	r2, #128	@ 0x80
 8006236:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006238:	4b12      	ldr	r3, [pc, #72]	@ (8006284 <HAL_I2S_MspInit+0xe0>)
 800623a:	2280      	movs	r2, #128	@ 0x80
 800623c:	0052      	lsls	r2, r2, #1
 800623e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006240:	4b10      	ldr	r3, [pc, #64]	@ (8006284 <HAL_I2S_MspInit+0xe0>)
 8006242:	2280      	movs	r2, #128	@ 0x80
 8006244:	00d2      	lsls	r2, r2, #3
 8006246:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8006248:	4b0e      	ldr	r3, [pc, #56]	@ (8006284 <HAL_I2S_MspInit+0xe0>)
 800624a:	2220      	movs	r2, #32
 800624c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800624e:	4b0d      	ldr	r3, [pc, #52]	@ (8006284 <HAL_I2S_MspInit+0xe0>)
 8006250:	2200      	movs	r2, #0
 8006252:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8006254:	4b0b      	ldr	r3, [pc, #44]	@ (8006284 <HAL_I2S_MspInit+0xe0>)
 8006256:	0018      	movs	r0, r3
 8006258:	f004 fc96 	bl	800ab88 <HAL_DMA_Init>
 800625c:	1e03      	subs	r3, r0, #0
 800625e:	d001      	beq.n	8006264 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8006260:	f000 f9c0 	bl	80065e4 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a07      	ldr	r2, [pc, #28]	@ (8006284 <HAL_I2S_MspInit+0xe0>)
 8006268:	631a      	str	r2, [r3, #48]	@ 0x30
 800626a:	4b06      	ldr	r3, [pc, #24]	@ (8006284 <HAL_I2S_MspInit+0xe0>)
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8006270:	46c0      	nop			@ (mov r8, r8)
 8006272:	46bd      	mov	sp, r7
 8006274:	b009      	add	sp, #36	@ 0x24
 8006276:	bd90      	pop	{r4, r7, pc}
 8006278:	40003800 	.word	0x40003800
 800627c:	40021000 	.word	0x40021000
 8006280:	50000400 	.word	0x50000400
 8006284:	20000fe8 	.word	0x20000fe8
 8006288:	40020044 	.word	0x40020044

0800628c <HAL_I2S_MspDeInit>:

void HAL_I2S_MspDeInit(I2S_HandleTypeDef* i2sHandle)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]

  if(i2sHandle->Instance==SPI2)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a0c      	ldr	r2, [pc, #48]	@ (80062cc <HAL_I2S_MspDeInit+0x40>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d111      	bne.n	80062c2 <HAL_I2S_MspDeInit+0x36>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 800629e:	4b0c      	ldr	r3, [pc, #48]	@ (80062d0 <HAL_I2S_MspDeInit+0x44>)
 80062a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062a2:	4b0b      	ldr	r3, [pc, #44]	@ (80062d0 <HAL_I2S_MspDeInit+0x44>)
 80062a4:	490b      	ldr	r1, [pc, #44]	@ (80062d4 <HAL_I2S_MspDeInit+0x48>)
 80062a6:	400a      	ands	r2, r1
 80062a8:	639a      	str	r2, [r3, #56]	@ 0x38
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
 80062aa:	23b0      	movs	r3, #176	@ 0xb0
 80062ac:	021b      	lsls	r3, r3, #8
 80062ae:	4a0a      	ldr	r2, [pc, #40]	@ (80062d8 <HAL_I2S_MspDeInit+0x4c>)
 80062b0:	0019      	movs	r1, r3
 80062b2:	0010      	movs	r0, r2
 80062b4:	f005 fa60 	bl	800b778 <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(i2sHandle->hdmarx);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062bc:	0018      	movs	r0, r3
 80062be:	f004 fcdb 	bl	800ac78 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 80062c2:	46c0      	nop			@ (mov r8, r8)
 80062c4:	46bd      	mov	sp, r7
 80062c6:	b002      	add	sp, #8
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	46c0      	nop			@ (mov r8, r8)
 80062cc:	40003800 	.word	0x40003800
 80062d0:	40021000 	.word	0x40021000
 80062d4:	ffffbfff 	.word	0xffffbfff
 80062d8:	50000400 	.word	0x50000400

080062dc <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
  testDone = true;
 80062e0:	4b1e      	ldr	r3, [pc, #120]	@ (800635c <SetTestDone+0x80>)
 80062e2:	2201      	movs	r2, #1
 80062e4:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1000);
 80062e6:	23fa      	movs	r3, #250	@ 0xfa
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	0018      	movs	r0, r3
 80062ec:	f003 ffae 	bl	800a24c <HAL_Delay>
  SetDBLED(false, false, true);
 80062f0:	2201      	movs	r2, #1
 80062f2:	2100      	movs	r1, #0
 80062f4:	2000      	movs	r0, #0
 80062f6:	f002 fd15 	bl	8008d24 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 80062fa:	4a19      	ldr	r2, [pc, #100]	@ (8006360 <SetTestDone+0x84>)
 80062fc:	23fa      	movs	r3, #250	@ 0xfa
 80062fe:	0119      	lsls	r1, r3, #4
 8006300:	23fa      	movs	r3, #250	@ 0xfa
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	0018      	movs	r0, r3
 8006306:	f002 fcd9 	bl	8008cbc <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 800630a:	4a15      	ldr	r2, [pc, #84]	@ (8006360 <SetTestDone+0x84>)
 800630c:	23fa      	movs	r3, #250	@ 0xfa
 800630e:	0119      	lsls	r1, r3, #4
 8006310:	23fa      	movs	r3, #250	@ 0xfa
 8006312:	011b      	lsls	r3, r3, #4
 8006314:	0018      	movs	r0, r3
 8006316:	f002 fd4f 	bl	8008db8 <SetVocLED>
  HAL_Delay(1000);
 800631a:	23fa      	movs	r3, #250	@ 0xfa
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	0018      	movs	r0, r3
 8006320:	f003 ff94 	bl	800a24c <HAL_Delay>
  SetDBLED(false, false, false);
 8006324:	2200      	movs	r2, #0
 8006326:	2100      	movs	r1, #0
 8006328:	2000      	movs	r0, #0
 800632a:	f002 fcfb 	bl	8008d24 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 800632e:	23fa      	movs	r3, #250	@ 0xfa
 8006330:	011a      	lsls	r2, r3, #4
 8006332:	23fa      	movs	r3, #250	@ 0xfa
 8006334:	0119      	lsls	r1, r3, #4
 8006336:	23fa      	movs	r3, #250	@ 0xfa
 8006338:	011b      	lsls	r3, r3, #4
 800633a:	0018      	movs	r0, r3
 800633c:	f002 fcbe 	bl	8008cbc <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8006340:	23fa      	movs	r3, #250	@ 0xfa
 8006342:	011a      	lsls	r2, r3, #4
 8006344:	23fa      	movs	r3, #250	@ 0xfa
 8006346:	0119      	lsls	r1, r3, #4
 8006348:	23fa      	movs	r3, #250	@ 0xfa
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	0018      	movs	r0, r3
 800634e:	f002 fd33 	bl	8008db8 <SetVocLED>
  InitDone();
 8006352:	f002 fc5d 	bl	8008c10 <InitDone>
}
 8006356:	46c0      	nop			@ (mov r8, r8)
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	20001030 	.word	0x20001030
 8006360:	00000bb8 	.word	0x00000bb8

08006364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006368:	f003 ff00 	bl	800a16c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800636c:	f000 f8b4 	bl	80064d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006370:	f7ff fc04 	bl	8005b7c <MX_GPIO_Init>
  MX_DMA_Init();
 8006374:	f7ff fb58 	bl	8005a28 <MX_DMA_Init>
  MX_I2C1_Init();
 8006378:	f7ff fd92 	bl	8005ea0 <MX_I2C1_Init>
  MX_I2S2_Init();
 800637c:	f7ff feea 	bl	8006154 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8006380:	f003 f9ea 	bl	8009758 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8006384:	f7ff fdcc 	bl	8005f20 <MX_I2C2_Init>
  MX_TIM2_Init();
 8006388:	f003 f832 	bl	80093f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800638c:	f003 f8a4 	bl	80094d8 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8006390:	f003 fa16 	bl	80097c0 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8006394:	f7ff fa96 	bl	80058c4 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8006398:	f010 fd0e 	bl	8016db8 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800639c:	f001 f842 	bl	8007424 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 80063a0:	f003 f9a4 	bl	80096ec <MX_LPUART1_UART_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 80063a4:	4a3c      	ldr	r2, [pc, #240]	@ (8006498 <main+0x134>)
 80063a6:	4b3d      	ldr	r3, [pc, #244]	@ (800649c <main+0x138>)
 80063a8:	0011      	movs	r1, r2
 80063aa:	0018      	movs	r0, r3
 80063ac:	f7ff fcfc 	bl	8005da8 <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 80063b0:	f7ff fa26 	bl	8005800 <UserButton_Pressed>
 80063b4:	1e03      	subs	r3, r0, #0
 80063b6:	d004      	beq.n	80063c2 <main+0x5e>
    EnableESPProg();
 80063b8:	f010 fdce 	bl	8016f58 <EnableESPProg>
    ESP_Programming = true;
 80063bc:	4b38      	ldr	r3, [pc, #224]	@ (80064a0 <main+0x13c>)
 80063be:	2201      	movs	r2, #1
 80063c0:	701a      	strb	r2, [r3, #0]
  }
  //uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
  SetVerboseLevel(VERBOSE_ALL);
 80063c2:	2003      	movs	r0, #3
 80063c4:	f003 fc14 	bl	8009bf0 <SetVerboseLevel>
  BinaryReleaseInfo();
 80063c8:	f003 fc2a 	bl	8009c20 <BinaryReleaseInfo>
  InitClock(&hrtc);
 80063cc:	4b35      	ldr	r3, [pc, #212]	@ (80064a4 <main+0x140>)
 80063ce:	0018      	movs	r0, r3
 80063d0:	f7ff fa5e 	bl	8005890 <InitClock>
  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 80063d4:	4b34      	ldr	r3, [pc, #208]	@ (80064a8 <main+0x144>)
 80063d6:	4a35      	ldr	r2, [pc, #212]	@ (80064ac <main+0x148>)
 80063d8:	4935      	ldr	r1, [pc, #212]	@ (80064b0 <main+0x14c>)
 80063da:	4836      	ldr	r0, [pc, #216]	@ (80064b4 <main+0x150>)
 80063dc:	f7ff fb4a 	bl	8005a74 <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone && !ESP_Programming && !batteryEmpty){
 80063e0:	4b35      	ldr	r3, [pc, #212]	@ (80064b8 <main+0x154>)
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d019      	beq.n	800641c <main+0xb8>
 80063e8:	4b2d      	ldr	r3, [pc, #180]	@ (80064a0 <main+0x13c>)
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	2201      	movs	r2, #1
 80063ee:	4053      	eors	r3, r2
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d012      	beq.n	800641c <main+0xb8>
 80063f6:	4b31      	ldr	r3, [pc, #196]	@ (80064bc <main+0x158>)
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	2201      	movs	r2, #1
 80063fc:	4053      	eors	r3, r2
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00b      	beq.n	800641c <main+0xb8>
      MeasurementBusy = UpkeepGadget();
 8006404:	f7ff fb64 	bl	8005ad0 <UpkeepGadget>
 8006408:	0003      	movs	r3, r0
 800640a:	001a      	movs	r2, r3
 800640c:	4b2c      	ldr	r3, [pc, #176]	@ (80064c0 <main+0x15c>)
 800640e:	701a      	strb	r2, [r3, #0]
      ESP_Status = ESP_Upkeep();
 8006410:	f7fe fbd4 	bl	8004bbc <ESP_Upkeep>
 8006414:	0003      	movs	r3, r0
 8006416:	001a      	movs	r2, r3
 8006418:	4b2a      	ldr	r3, [pc, #168]	@ (80064c4 <main+0x160>)
 800641a:	701a      	strb	r2, [r3, #0]
    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 800641c:	4b26      	ldr	r3, [pc, #152]	@ (80064b8 <main+0x154>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	2201      	movs	r2, #1
 8006422:	4053      	eors	r3, r2
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00f      	beq.n	800644a <main+0xe6>
 800642a:	4b1d      	ldr	r3, [pc, #116]	@ (80064a0 <main+0x13c>)
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	2201      	movs	r2, #1
 8006430:	4053      	eors	r3, r2
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d008      	beq.n	800644a <main+0xe6>
 8006438:	4b20      	ldr	r3, [pc, #128]	@ (80064bc <main+0x158>)
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	2201      	movs	r2, #1
 800643e:	4053      	eors	r3, r2
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d001      	beq.n	800644a <main+0xe6>
      Gadget_Test();
 8006446:	f7ff fb3b 	bl	8005ac0 <Gadget_Test>
    }
    Status_Upkeep();
 800644a:	f002 fe87 	bl	800915c <Status_Upkeep>
    if(TimestampIsReached(batteryReadTimer)){
 800644e:	4b1e      	ldr	r3, [pc, #120]	@ (80064c8 <main+0x164>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	0018      	movs	r0, r3
 8006454:	f003 fb14 	bl	8009a80 <TimestampIsReached>
 8006458:	1e03      	subs	r3, r0, #0
 800645a:	d00c      	beq.n	8006476 <main+0x112>
      charge = Battery_Upkeep();
 800645c:	f002 fe85 	bl	800916a <Battery_Upkeep>
 8006460:	0003      	movs	r3, r0
 8006462:	001a      	movs	r2, r3
 8006464:	4b19      	ldr	r3, [pc, #100]	@ (80064cc <main+0x168>)
 8006466:	701a      	strb	r2, [r3, #0]
      batteryReadTimer = HAL_GetTick + 60000;
 8006468:	4b19      	ldr	r3, [pc, #100]	@ (80064d0 <main+0x16c>)
 800646a:	4a1a      	ldr	r2, [pc, #104]	@ (80064d4 <main+0x170>)
 800646c:	4694      	mov	ip, r2
 800646e:	4463      	add	r3, ip
 8006470:	001a      	movs	r2, r3
 8006472:	4b15      	ldr	r3, [pc, #84]	@ (80064c8 <main+0x164>)
 8006474:	601a      	str	r2, [r3, #0]
      //GoToSleep(2);
    }
    if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){

    }
    if(charge == BATTERY_CRITICAL && ESP_Status == ESP_STATE_RESET){
 8006476:	4b15      	ldr	r3, [pc, #84]	@ (80064cc <main+0x168>)
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d107      	bne.n	800648e <main+0x12a>
 800647e:	4b11      	ldr	r3, [pc, #68]	@ (80064c4 <main+0x160>)
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	2b09      	cmp	r3, #9
 8006484:	d103      	bne.n	800648e <main+0x12a>
      batteryEmpty = true;
 8006486:	4b0d      	ldr	r3, [pc, #52]	@ (80064bc <main+0x158>)
 8006488:	2201      	movs	r2, #1
 800648a:	701a      	strb	r2, [r3, #0]
 800648c:	e002      	b.n	8006494 <main+0x130>
    }
    else{
      batteryEmpty = false;
 800648e:	4b0b      	ldr	r3, [pc, #44]	@ (80064bc <main+0x158>)
 8006490:	2200      	movs	r2, #0
 8006492:	701a      	strb	r2, [r3, #0]
    if(testDone && !ESP_Programming && !batteryEmpty){
 8006494:	e7a4      	b.n	80063e0 <main+0x7c>
 8006496:	46c0      	nop			@ (mov r8, r8)
 8006498:	20002a08 	.word	0x20002a08
 800649c:	200029c8 	.word	0x200029c8
 80064a0:	20001031 	.word	0x20001031
 80064a4:	200028d0 	.word	0x200028d0
 80064a8:	20000e14 	.word	0x20000e14
 80064ac:	20002bb8 	.word	0x20002bb8
 80064b0:	20000fac 	.word	0x20000fac
 80064b4:	20000e74 	.word	0x20000e74
 80064b8:	20001030 	.word	0x20001030
 80064bc:	20001032 	.word	0x20001032
 80064c0:	20001033 	.word	0x20001033
 80064c4:	20001039 	.word	0x20001039
 80064c8:	20001034 	.word	0x20001034
 80064cc:	20001038 	.word	0x20001038
 80064d0:	0800a239 	.word	0x0800a239
 80064d4:	0000ea60 	.word	0x0000ea60

080064d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80064d8:	b590      	push	{r4, r7, lr}
 80064da:	b09d      	sub	sp, #116	@ 0x74
 80064dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80064de:	2438      	movs	r4, #56	@ 0x38
 80064e0:	193b      	adds	r3, r7, r4
 80064e2:	0018      	movs	r0, r3
 80064e4:	2338      	movs	r3, #56	@ 0x38
 80064e6:	001a      	movs	r2, r3
 80064e8:	2100      	movs	r1, #0
 80064ea:	f011 ffdf 	bl	80184ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80064ee:	2324      	movs	r3, #36	@ 0x24
 80064f0:	18fb      	adds	r3, r7, r3
 80064f2:	0018      	movs	r0, r3
 80064f4:	2314      	movs	r3, #20
 80064f6:	001a      	movs	r2, r3
 80064f8:	2100      	movs	r1, #0
 80064fa:	f011 ffd7 	bl	80184ac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80064fe:	003b      	movs	r3, r7
 8006500:	0018      	movs	r0, r3
 8006502:	2324      	movs	r3, #36	@ 0x24
 8006504:	001a      	movs	r2, r3
 8006506:	2100      	movs	r1, #0
 8006508:	f011 ffd0 	bl	80184ac <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800650c:	4b32      	ldr	r3, [pc, #200]	@ (80065d8 <SystemClock_Config+0x100>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a32      	ldr	r2, [pc, #200]	@ (80065dc <SystemClock_Config+0x104>)
 8006512:	401a      	ands	r2, r3
 8006514:	4b30      	ldr	r3, [pc, #192]	@ (80065d8 <SystemClock_Config+0x100>)
 8006516:	2180      	movs	r1, #128	@ 0x80
 8006518:	0109      	lsls	r1, r1, #4
 800651a:	430a      	orrs	r2, r1
 800651c:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800651e:	f009 fbf7 	bl	800fd10 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8006522:	4b2f      	ldr	r3, [pc, #188]	@ (80065e0 <SystemClock_Config+0x108>)
 8006524:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006526:	4b2e      	ldr	r3, [pc, #184]	@ (80065e0 <SystemClock_Config+0x108>)
 8006528:	492c      	ldr	r1, [pc, #176]	@ (80065dc <SystemClock_Config+0x104>)
 800652a:	400a      	ands	r2, r1
 800652c:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800652e:	193b      	adds	r3, r7, r4
 8006530:	2226      	movs	r2, #38	@ 0x26
 8006532:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006534:	193b      	adds	r3, r7, r4
 8006536:	2280      	movs	r2, #128	@ 0x80
 8006538:	0052      	lsls	r2, r2, #1
 800653a:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800653c:	0021      	movs	r1, r4
 800653e:	187b      	adds	r3, r7, r1
 8006540:	2201      	movs	r2, #1
 8006542:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006544:	187b      	adds	r3, r7, r1
 8006546:	2210      	movs	r2, #16
 8006548:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800654a:	187b      	adds	r3, r7, r1
 800654c:	2201      	movs	r2, #1
 800654e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006550:	187b      	adds	r3, r7, r1
 8006552:	2200      	movs	r2, #0
 8006554:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006556:	187b      	adds	r3, r7, r1
 8006558:	0018      	movs	r0, r3
 800655a:	f009 fbe7 	bl	800fd2c <HAL_RCC_OscConfig>
 800655e:	1e03      	subs	r3, r0, #0
 8006560:	d001      	beq.n	8006566 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8006562:	f000 f83f 	bl	80065e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006566:	2124      	movs	r1, #36	@ 0x24
 8006568:	187b      	adds	r3, r7, r1
 800656a:	220f      	movs	r2, #15
 800656c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800656e:	187b      	adds	r3, r7, r1
 8006570:	2201      	movs	r2, #1
 8006572:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006574:	187b      	adds	r3, r7, r1
 8006576:	2200      	movs	r2, #0
 8006578:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800657a:	187b      	adds	r3, r7, r1
 800657c:	2200      	movs	r2, #0
 800657e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006580:	187b      	adds	r3, r7, r1
 8006582:	2200      	movs	r2, #0
 8006584:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8006586:	187b      	adds	r3, r7, r1
 8006588:	2100      	movs	r1, #0
 800658a:	0018      	movs	r0, r3
 800658c:	f009 ffa2 	bl	80104d4 <HAL_RCC_ClockConfig>
 8006590:	1e03      	subs	r3, r0, #0
 8006592:	d001      	beq.n	8006598 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8006594:	f000 f826 	bl	80065e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8006598:	003b      	movs	r3, r7
 800659a:	226d      	movs	r2, #109	@ 0x6d
 800659c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800659e:	003b      	movs	r3, r7
 80065a0:	2200      	movs	r2, #0
 80065a2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80065a4:	003b      	movs	r3, r7
 80065a6:	2200      	movs	r2, #0
 80065a8:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80065aa:	003b      	movs	r3, r7
 80065ac:	2200      	movs	r2, #0
 80065ae:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80065b0:	003b      	movs	r3, r7
 80065b2:	2280      	movs	r2, #128	@ 0x80
 80065b4:	0252      	lsls	r2, r2, #9
 80065b6:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80065b8:	003b      	movs	r3, r7
 80065ba:	2280      	movs	r2, #128	@ 0x80
 80065bc:	04d2      	lsls	r2, r2, #19
 80065be:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80065c0:	003b      	movs	r3, r7
 80065c2:	0018      	movs	r0, r3
 80065c4:	f00a f9aa 	bl	801091c <HAL_RCCEx_PeriphCLKConfig>
 80065c8:	1e03      	subs	r3, r0, #0
 80065ca:	d001      	beq.n	80065d0 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80065cc:	f000 f80a 	bl	80065e4 <Error_Handler>
  }
}
 80065d0:	46c0      	nop			@ (mov r8, r8)
 80065d2:	46bd      	mov	sp, r7
 80065d4:	b01d      	add	sp, #116	@ 0x74
 80065d6:	bd90      	pop	{r4, r7, pc}
 80065d8:	40007000 	.word	0x40007000
 80065dc:	ffffe7ff 	.word	0xffffe7ff
 80065e0:	40021000 	.word	0x40021000

080065e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80065e8:	b672      	cpsid	i
}
 80065ea:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80065ec:	46c0      	nop			@ (mov r8, r8)
 80065ee:	e7fd      	b.n	80065ec <Error_Handler+0x8>

080065f0 <HT_StartMeasurementWrapper>:
static MicrophoneState MicState = MIC_STATE_INIT;
static uint8_t CurrentMeasurementIndex = 0;
static uint32_t MeasStamp;
static uint32_t MicStamp;

static void HT_StartMeasurementWrapper(void) {
 80065f0:	b580      	push	{r7, lr}
 80065f2:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 80065f4:	f7ff fc35 	bl	8005e62 <HT_StartMeasurement>
}
 80065f8:	46c0      	nop			@ (mov r8, r8)
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
	...

08006600 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8006600:	b580      	push	{r7, lr}
 8006602:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8006604:	4a04      	ldr	r2, [pc, #16]	@ (8006618 <HT_IsMeasurementDoneWrapper+0x18>)
 8006606:	4b05      	ldr	r3, [pc, #20]	@ (800661c <HT_IsMeasurementDoneWrapper+0x1c>)
 8006608:	0011      	movs	r1, r2
 800660a:	0018      	movs	r0, r3
 800660c:	f7ff fc30 	bl	8005e70 <HT_GetMeasurementValues>
 8006610:	0003      	movs	r3, r0
}
 8006612:	0018      	movs	r0, r3
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	20001040 	.word	0x20001040
 800661c:	2000103c 	.word	0x2000103c

08006620 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8006620:	b580      	push	{r7, lr}
 8006622:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8006624:	f7ff fa8d 	bl	8005b42 <Gas_StartMeasurement>
}
 8006628:	46c0      	nop			@ (mov r8, r8)
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
	...

08006630 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8006630:	b580      	push	{r7, lr}
 8006632:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8006634:	4b03      	ldr	r3, [pc, #12]	@ (8006644 <VOC_IsMeasurementDoneWrapper+0x14>)
 8006636:	0018      	movs	r0, r3
 8006638:	f7ff fa8a 	bl	8005b50 <Gas_GetMeasurementValues>
 800663c:	0003      	movs	r3, r0
}
 800663e:	0018      	movs	r0, r3
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	20001044 	.word	0x20001044

08006648 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 8006648:	b580      	push	{r7, lr}
 800664a:	af00      	add	r7, sp, #0
}
 800664c:	46c0      	nop			@ (mov r8, r8)
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 8006652:	b580      	push	{r7, lr}
 8006654:	af00      	add	r7, sp, #0
  return true;
 8006656:	2301      	movs	r3, #1
}
 8006658:	0018      	movs	r0, r3
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <MIC_StartMeasurementWrapper>:

static void MIC_StartMeasurementWrapper(void) {
 800665e:	b580      	push	{r7, lr}
 8006660:	af00      	add	r7, sp, #0
  MIC_Start(SAMPLE_RATE_8K, NR_SAMPLES_128);
 8006662:	23fa      	movs	r3, #250	@ 0xfa
 8006664:	015b      	lsls	r3, r3, #5
 8006666:	2180      	movs	r1, #128	@ 0x80
 8006668:	0018      	movs	r0, r3
 800666a:	f000 fba3 	bl	8006db4 <MIC_Start>
}
 800666e:	46c0      	nop			@ (mov r8, r8)
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 8006674:	b580      	push	{r7, lr}
 8006676:	af00      	add	r7, sp, #0
  return MIC_MeasurementDone();
 8006678:	f000 fdfe 	bl	8007278 <MIC_MeasurementDone>
 800667c:	0003      	movs	r3, r0
}
 800667e:	0018      	movs	r0, r3
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <Meas_TestStart>:
void Meas_TestStart(){
 8006684:	b580      	push	{r7, lr}
 8006686:	af00      	add	r7, sp, #0
  MIC_StartMeasurementWrapper();
 8006688:	f7ff ffe9 	bl	800665e <MIC_StartMeasurementWrapper>
}
 800668c:	46c0      	nop			@ (mov r8, r8)
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <MIC_IsTestMeasurementDoneWrapper>:
static bool MIC_IsTestMeasurementDoneWrapper(void) {
 8006692:	b580      	push	{r7, lr}
 8006694:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 8006696:	f000 fe0f 	bl	80072b8 <MIC_TestMeasurementDone>
 800669a:	0003      	movs	r3, r0
}
 800669c:	0018      	movs	r0, r3
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
	...

080066a4 <testInit>:
void testInit(){
 80066a4:	b580      	push	{r7, lr}
 80066a6:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 80066a8:	4b07      	ldr	r3, [pc, #28]	@ (80066c8 <testInit+0x24>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 80066ae:	4b06      	ldr	r3, [pc, #24]	@ (80066c8 <testInit+0x24>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	709a      	strb	r2, [r3, #2]
  MeasTest.HT_Tested = false;
 80066b4:	4b04      	ldr	r3, [pc, #16]	@ (80066c8 <testInit+0x24>)
 80066b6:	2200      	movs	r2, #0
 80066b8:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 80066ba:	4b03      	ldr	r3, [pc, #12]	@ (80066c8 <testInit+0x24>)
 80066bc:	2200      	movs	r2, #0
 80066be:	705a      	strb	r2, [r3, #1]
}
 80066c0:	46c0      	nop			@ (mov r8, r8)
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	46c0      	nop			@ (mov r8, r8)
 80066c8:	20001080 	.word	0x20001080

080066cc <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 80066cc:	b5b0      	push	{r4, r5, r7, lr}
 80066ce:	b092      	sub	sp, #72	@ 0x48
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
  MeasState = MEAS_STATE_INIT;
 80066d8:	4b6f      	ldr	r3, [pc, #444]	@ (8006898 <Meas_Init+0x1cc>)
 80066da:	2200      	movs	r2, #0
 80066dc:	701a      	strb	r2, [r3, #0]
  testInit();
 80066de:	f7ff ffe1 	bl	80066a4 <testInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 80066e2:	4b6e      	ldr	r3, [pc, #440]	@ (800689c <Meas_Init+0x1d0>)
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d103      	bne.n	80066f2 <Meas_Init+0x26>
 80066ea:	4b6c      	ldr	r3, [pc, #432]	@ (800689c <Meas_Init+0x1d0>)
 80066ec:	785b      	ldrb	r3, [r3, #1]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d068      	beq.n	80067c4 <Meas_Init+0xf8>
    I2CSensors_Init(sensorI2C);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	0018      	movs	r0, r3
 80066f6:	f7fe fd19 	bl	800512c <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 80066fa:	f7ff fbc9 	bl	8005e90 <HT_DeviceConnected>
 80066fe:	0003      	movs	r3, r0
 8006700:	001a      	movs	r2, r3
 8006702:	2301      	movs	r3, #1
 8006704:	4053      	eors	r3, r2
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00c      	beq.n	8006726 <Meas_Init+0x5a>
       Error("Humidity / Temperature sensor NOT connected!");
 800670c:	4a64      	ldr	r2, [pc, #400]	@ (80068a0 <Meas_Init+0x1d4>)
 800670e:	4b65      	ldr	r3, [pc, #404]	@ (80068a4 <Meas_Init+0x1d8>)
 8006710:	0019      	movs	r1, r3
 8006712:	2001      	movs	r0, #1
 8006714:	f003 fa0a 	bl	8009b2c <CreateLine>
       MeasTest.HT_Tested = false;
 8006718:	4b63      	ldr	r3, [pc, #396]	@ (80068a8 <Meas_Init+0x1dc>)
 800671a:	2200      	movs	r2, #0
 800671c:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 800671e:	4b5f      	ldr	r3, [pc, #380]	@ (800689c <Meas_Init+0x1d0>)
 8006720:	2200      	movs	r2, #0
 8006722:	701a      	strb	r2, [r3, #0]
 8006724:	e008      	b.n	8006738 <Meas_Init+0x6c>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      MeasTest.HT_Tested = true;
 8006726:	4b60      	ldr	r3, [pc, #384]	@ (80068a8 <Meas_Init+0x1dc>)
 8006728:	2201      	movs	r2, #1
 800672a:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 800672c:	4a5f      	ldr	r2, [pc, #380]	@ (80068ac <Meas_Init+0x1e0>)
 800672e:	4b60      	ldr	r3, [pc, #384]	@ (80068b0 <Meas_Init+0x1e4>)
 8006730:	0019      	movs	r1, r3
 8006732:	2003      	movs	r0, #3
 8006734:	f003 f9fa 	bl	8009b2c <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 8006738:	f7ff fa17 	bl	8005b6a <Gas_DeviceConnected>
 800673c:	0003      	movs	r3, r0
 800673e:	001a      	movs	r2, r3
 8006740:	2301      	movs	r3, #1
 8006742:	4053      	eors	r3, r2
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00c      	beq.n	8006764 <Meas_Init+0x98>
      MeasTest.VOC_Tested = false;
 800674a:	4b57      	ldr	r3, [pc, #348]	@ (80068a8 <Meas_Init+0x1dc>)
 800674c:	2200      	movs	r2, #0
 800674e:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 8006750:	4a58      	ldr	r2, [pc, #352]	@ (80068b4 <Meas_Init+0x1e8>)
 8006752:	4b54      	ldr	r3, [pc, #336]	@ (80068a4 <Meas_Init+0x1d8>)
 8006754:	0019      	movs	r1, r3
 8006756:	2001      	movs	r0, #1
 8006758:	f003 f9e8 	bl	8009b2c <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 800675c:	4b4f      	ldr	r3, [pc, #316]	@ (800689c <Meas_Init+0x1d0>)
 800675e:	2200      	movs	r2, #0
 8006760:	705a      	strb	r2, [r3, #1]
 8006762:	e008      	b.n	8006776 <Meas_Init+0xaa>
    }else{
      MeasTest.VOC_Tested = true;
 8006764:	4b50      	ldr	r3, [pc, #320]	@ (80068a8 <Meas_Init+0x1dc>)
 8006766:	2201      	movs	r2, #1
 8006768:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 800676a:	4a53      	ldr	r2, [pc, #332]	@ (80068b8 <Meas_Init+0x1ec>)
 800676c:	4b50      	ldr	r3, [pc, #320]	@ (80068b0 <Meas_Init+0x1e4>)
 800676e:	0019      	movs	r1, r3
 8006770:	2003      	movs	r0, #3
 8006772:	f003 f9db 	bl	8009b2c <CreateLine>
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 8006776:	4b4c      	ldr	r3, [pc, #304]	@ (80068a8 <Meas_Init+0x1dc>)
 8006778:	785b      	ldrb	r3, [r3, #1]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d009      	beq.n	8006792 <Meas_Init+0xc6>
 800677e:	4b4a      	ldr	r3, [pc, #296]	@ (80068a8 <Meas_Init+0x1dc>)
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d005      	beq.n	8006792 <Meas_Init+0xc6>
      SetDBLED(false, true, false);
 8006786:	2200      	movs	r2, #0
 8006788:	2101      	movs	r1, #1
 800678a:	2000      	movs	r0, #0
 800678c:	f002 faca 	bl	8008d24 <SetDBLED>
 8006790:	e018      	b.n	80067c4 <Meas_Init+0xf8>
    }
    else{
      SetDBLED(true, false, false);
 8006792:	2200      	movs	r2, #0
 8006794:	2100      	movs	r1, #0
 8006796:	2001      	movs	r0, #1
 8006798:	f002 fac4 	bl	8008d24 <SetDBLED>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800679c:	4b47      	ldr	r3, [pc, #284]	@ (80068bc <Meas_Init+0x1f0>)
 800679e:	2200      	movs	r2, #0
 80067a0:	2101      	movs	r1, #1
 80067a2:	0018      	movs	r0, r3
 80067a4:	f005 f8e7 	bl	800b976 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 80067a8:	2380      	movs	r3, #128	@ 0x80
 80067aa:	005b      	lsls	r3, r3, #1
 80067ac:	4843      	ldr	r0, [pc, #268]	@ (80068bc <Meas_Init+0x1f0>)
 80067ae:	2201      	movs	r2, #1
 80067b0:	0019      	movs	r1, r3
 80067b2:	f005 f8e0 	bl	800b976 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80067b6:	2380      	movs	r3, #128	@ 0x80
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4840      	ldr	r0, [pc, #256]	@ (80068bc <Meas_Init+0x1f0>)
 80067bc:	2201      	movs	r2, #1
 80067be:	0019      	movs	r1, r3
 80067c0:	f005 f8d9 	bl	800b976 <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 80067c4:	4b35      	ldr	r3, [pc, #212]	@ (800689c <Meas_Init+0x1d0>)
 80067c6:	78db      	ldrb	r3, [r3, #3]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d005      	beq.n	80067d8 <Meas_Init+0x10c>
    MIC_Init(micI2s);
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	0018      	movs	r0, r3
 80067d0:	f000 fa8a 	bl	8006ce8 <MIC_Init>
    Meas_TestStart();
 80067d4:	f7ff ff56 	bl	8006684 <Meas_TestStart>
  }
  uint8_t offset = 0;
 80067d8:	2547      	movs	r5, #71	@ 0x47
 80067da:	197b      	adds	r3, r7, r5
 80067dc:	2200      	movs	r2, #0
 80067de:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 80067e0:	197b      	adds	r3, r7, r5
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	197a      	adds	r2, r7, r5
 80067e6:	1c59      	adds	r1, r3, #1
 80067e8:	7011      	strb	r1, [r2, #0]
 80067ea:	4a2c      	ldr	r2, [pc, #176]	@ (800689c <Meas_Init+0x1d0>)
 80067ec:	7814      	ldrb	r4, [r2, #0]
 80067ee:	4a34      	ldr	r2, [pc, #208]	@ (80068c0 <Meas_Init+0x1f4>)
 80067f0:	0119      	lsls	r1, r3, #4
 80067f2:	4834      	ldr	r0, [pc, #208]	@ (80068c4 <Meas_Init+0x1f8>)
 80067f4:	5088      	str	r0, [r1, r2]
 80067f6:	4932      	ldr	r1, [pc, #200]	@ (80068c0 <Meas_Init+0x1f4>)
 80067f8:	011a      	lsls	r2, r3, #4
 80067fa:	188a      	adds	r2, r1, r2
 80067fc:	3204      	adds	r2, #4
 80067fe:	4932      	ldr	r1, [pc, #200]	@ (80068c8 <Meas_Init+0x1fc>)
 8006800:	6011      	str	r1, [r2, #0]
 8006802:	492f      	ldr	r1, [pc, #188]	@ (80068c0 <Meas_Init+0x1f4>)
 8006804:	011a      	lsls	r2, r3, #4
 8006806:	188a      	adds	r2, r1, r2
 8006808:	3208      	adds	r2, #8
 800680a:	4930      	ldr	r1, [pc, #192]	@ (80068cc <Meas_Init+0x200>)
 800680c:	6011      	str	r1, [r2, #0]
 800680e:	4a2c      	ldr	r2, [pc, #176]	@ (80068c0 <Meas_Init+0x1f4>)
 8006810:	011b      	lsls	r3, r3, #4
 8006812:	18d3      	adds	r3, r2, r3
 8006814:	330c      	adds	r3, #12
 8006816:	1c22      	adds	r2, r4, #0
 8006818:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 800681a:	197b      	adds	r3, r7, r5
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	197a      	adds	r2, r7, r5
 8006820:	1c59      	adds	r1, r3, #1
 8006822:	7011      	strb	r1, [r2, #0]
 8006824:	4a1d      	ldr	r2, [pc, #116]	@ (800689c <Meas_Init+0x1d0>)
 8006826:	7854      	ldrb	r4, [r2, #1]
 8006828:	4a25      	ldr	r2, [pc, #148]	@ (80068c0 <Meas_Init+0x1f4>)
 800682a:	0119      	lsls	r1, r3, #4
 800682c:	4828      	ldr	r0, [pc, #160]	@ (80068d0 <Meas_Init+0x204>)
 800682e:	5088      	str	r0, [r1, r2]
 8006830:	4923      	ldr	r1, [pc, #140]	@ (80068c0 <Meas_Init+0x1f4>)
 8006832:	011a      	lsls	r2, r3, #4
 8006834:	188a      	adds	r2, r1, r2
 8006836:	3204      	adds	r2, #4
 8006838:	4926      	ldr	r1, [pc, #152]	@ (80068d4 <Meas_Init+0x208>)
 800683a:	6011      	str	r1, [r2, #0]
 800683c:	4920      	ldr	r1, [pc, #128]	@ (80068c0 <Meas_Init+0x1f4>)
 800683e:	011a      	lsls	r2, r3, #4
 8006840:	188a      	adds	r2, r1, r2
 8006842:	3208      	adds	r2, #8
 8006844:	4924      	ldr	r1, [pc, #144]	@ (80068d8 <Meas_Init+0x20c>)
 8006846:	6011      	str	r1, [r2, #0]
 8006848:	4a1d      	ldr	r2, [pc, #116]	@ (80068c0 <Meas_Init+0x1f4>)
 800684a:	011b      	lsls	r3, r3, #4
 800684c:	18d3      	adds	r3, r2, r3
 800684e:	330c      	adds	r3, #12
 8006850:	1c22      	adds	r2, r4, #0
 8006852:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 8006854:	197b      	adds	r3, r7, r5
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	197a      	adds	r2, r7, r5
 800685a:	1c59      	adds	r1, r3, #1
 800685c:	7011      	strb	r1, [r2, #0]
 800685e:	4a0f      	ldr	r2, [pc, #60]	@ (800689c <Meas_Init+0x1d0>)
 8006860:	7894      	ldrb	r4, [r2, #2]
 8006862:	4a17      	ldr	r2, [pc, #92]	@ (80068c0 <Meas_Init+0x1f4>)
 8006864:	0119      	lsls	r1, r3, #4
 8006866:	481d      	ldr	r0, [pc, #116]	@ (80068dc <Meas_Init+0x210>)
 8006868:	5088      	str	r0, [r1, r2]
 800686a:	4915      	ldr	r1, [pc, #84]	@ (80068c0 <Meas_Init+0x1f4>)
 800686c:	011a      	lsls	r2, r3, #4
 800686e:	188a      	adds	r2, r1, r2
 8006870:	3204      	adds	r2, #4
 8006872:	491b      	ldr	r1, [pc, #108]	@ (80068e0 <Meas_Init+0x214>)
 8006874:	6011      	str	r1, [r2, #0]
 8006876:	4912      	ldr	r1, [pc, #72]	@ (80068c0 <Meas_Init+0x1f4>)
 8006878:	011a      	lsls	r2, r3, #4
 800687a:	188a      	adds	r2, r1, r2
 800687c:	3208      	adds	r2, #8
 800687e:	4919      	ldr	r1, [pc, #100]	@ (80068e4 <Meas_Init+0x218>)
 8006880:	6011      	str	r1, [r2, #0]
 8006882:	4a0f      	ldr	r2, [pc, #60]	@ (80068c0 <Meas_Init+0x1f4>)
 8006884:	011b      	lsls	r3, r3, #4
 8006886:	18d3      	adds	r3, r2, r3
 8006888:	330c      	adds	r3, #12
 800688a:	1c22      	adds	r2, r4, #0
 800688c:	701a      	strb	r2, [r3, #0]
//  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
}
 800688e:	46c0      	nop			@ (mov r8, r8)
 8006890:	46bd      	mov	sp, r7
 8006892:	b012      	add	sp, #72	@ 0x48
 8006894:	bdb0      	pop	{r4, r5, r7, pc}
 8006896:	46c0      	nop			@ (mov r8, r8)
 8006898:	20001084 	.word	0x20001084
 800689c:	2000107c 	.word	0x2000107c
 80068a0:	0801b85c 	.word	0x0801b85c
 80068a4:	0801b88c 	.word	0x0801b88c
 80068a8:	20001080 	.word	0x20001080
 80068ac:	0801b890 	.word	0x0801b890
 80068b0:	0801b8bc 	.word	0x0801b8bc
 80068b4:	0801b8c0 	.word	0x0801b8c0
 80068b8:	0801b8dc 	.word	0x0801b8dc
 80068bc:	50000400 	.word	0x50000400
 80068c0:	2000104c 	.word	0x2000104c
 80068c4:	080065f1 	.word	0x080065f1
 80068c8:	08006601 	.word	0x08006601
 80068cc:	20001048 	.word	0x20001048
 80068d0:	08006621 	.word	0x08006621
 80068d4:	08006631 	.word	0x08006631
 80068d8:	20001049 	.word	0x20001049
 80068dc:	08006649 	.word	0x08006649
 80068e0:	08006653 	.word	0x08006653
 80068e4:	2000104a 	.word	0x2000104a

080068e8 <StartMeasurements>:

void StartMeasurements(void) {
 80068e8:	b580      	push	{r7, lr}
 80068ea:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80068ec:	4b10      	ldr	r3, [pc, #64]	@ (8006930 <StartMeasurements+0x48>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	701a      	strb	r2, [r3, #0]
 80068f2:	e015      	b.n	8006920 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 80068f4:	4b0e      	ldr	r3, [pc, #56]	@ (8006930 <StartMeasurements+0x48>)
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	4a0e      	ldr	r2, [pc, #56]	@ (8006934 <StartMeasurements+0x4c>)
 80068fa:	011b      	lsls	r3, r3, #4
 80068fc:	18d3      	adds	r3, r2, r3
 80068fe:	330c      	adds	r3, #12
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d006      	beq.n	8006914 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 8006906:	4b0a      	ldr	r3, [pc, #40]	@ (8006930 <StartMeasurements+0x48>)
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	001a      	movs	r2, r3
 800690c:	4b09      	ldr	r3, [pc, #36]	@ (8006934 <StartMeasurements+0x4c>)
 800690e:	0112      	lsls	r2, r2, #4
 8006910:	58d3      	ldr	r3, [r2, r3]
 8006912:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006914:	4b06      	ldr	r3, [pc, #24]	@ (8006930 <StartMeasurements+0x48>)
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	3301      	adds	r3, #1
 800691a:	b2da      	uxtb	r2, r3
 800691c:	4b04      	ldr	r3, [pc, #16]	@ (8006930 <StartMeasurements+0x48>)
 800691e:	701a      	strb	r2, [r3, #0]
 8006920:	4b03      	ldr	r3, [pc, #12]	@ (8006930 <StartMeasurements+0x48>)
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	2b02      	cmp	r3, #2
 8006926:	d9e5      	bls.n	80068f4 <StartMeasurements+0xc>
    }
  }
}
 8006928:	46c0      	nop			@ (mov r8, r8)
 800692a:	46c0      	nop			@ (mov r8, r8)
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	20001086 	.word	0x20001086
 8006934:	2000104c 	.word	0x2000104c

08006938 <Meas_Test>:

void Meas_Test(){
 8006938:	b580      	push	{r7, lr}
 800693a:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 800693c:	4b21      	ldr	r3, [pc, #132]	@ (80069c4 <Meas_Test+0x8c>)
 800693e:	78db      	ldrb	r3, [r3, #3]
 8006940:	2201      	movs	r2, #1
 8006942:	4053      	eors	r3, r2
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <Meas_Test+0x16>
    ESP_WakeTest();
 800694a:	f7fe f825 	bl	8004998 <ESP_WakeTest>
  }
  if(!MeasTest.MIC_Tested){
 800694e:	4b1d      	ldr	r3, [pc, #116]	@ (80069c4 <Meas_Test+0x8c>)
 8006950:	789b      	ldrb	r3, [r3, #2]
 8006952:	2201      	movs	r2, #1
 8006954:	4053      	eors	r3, r2
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b00      	cmp	r3, #0
 800695a:	d017      	beq.n	800698c <Meas_Test+0x54>
    if(MIC_IsTestMeasurementDoneWrapper()){
 800695c:	f7ff fe99 	bl	8006692 <MIC_IsTestMeasurementDoneWrapper>
 8006960:	1e03      	subs	r3, r0, #0
 8006962:	d00b      	beq.n	800697c <Meas_Test+0x44>
      MeasTest.MIC_Tested = true;
 8006964:	4b17      	ldr	r3, [pc, #92]	@ (80069c4 <Meas_Test+0x8c>)
 8006966:	2201      	movs	r2, #1
 8006968:	709a      	strb	r2, [r3, #2]
      SetStatusLED(4000, 3000, 4000);
 800696a:	23fa      	movs	r3, #250	@ 0xfa
 800696c:	011a      	lsls	r2, r3, #4
 800696e:	4916      	ldr	r1, [pc, #88]	@ (80069c8 <Meas_Test+0x90>)
 8006970:	23fa      	movs	r3, #250	@ 0xfa
 8006972:	011b      	lsls	r3, r3, #4
 8006974:	0018      	movs	r0, r3
 8006976:	f002 f9a1 	bl	8008cbc <SetStatusLED>
 800697a:	e007      	b.n	800698c <Meas_Test+0x54>
    }
    else{
      SetStatusLED(3000, 4000, 4000);
 800697c:	23fa      	movs	r3, #250	@ 0xfa
 800697e:	011a      	lsls	r2, r3, #4
 8006980:	23fa      	movs	r3, #250	@ 0xfa
 8006982:	011b      	lsls	r3, r3, #4
 8006984:	4810      	ldr	r0, [pc, #64]	@ (80069c8 <Meas_Test+0x90>)
 8006986:	0019      	movs	r1, r3
 8006988:	f002 f998 	bl	8008cbc <SetStatusLED>
    }
  }
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 800698c:	4b0d      	ldr	r3, [pc, #52]	@ (80069c4 <Meas_Test+0x8c>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d013      	beq.n	80069bc <Meas_Test+0x84>
 8006994:	4b0b      	ldr	r3, [pc, #44]	@ (80069c4 <Meas_Test+0x8c>)
 8006996:	785b      	ldrb	r3, [r3, #1]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00f      	beq.n	80069bc <Meas_Test+0x84>
 800699c:	4b09      	ldr	r3, [pc, #36]	@ (80069c4 <Meas_Test+0x8c>)
 800699e:	78db      	ldrb	r3, [r3, #3]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00b      	beq.n	80069bc <Meas_Test+0x84>
 80069a4:	4b07      	ldr	r3, [pc, #28]	@ (80069c4 <Meas_Test+0x8c>)
 80069a6:	789b      	ldrb	r3, [r3, #2]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d007      	beq.n	80069bc <Meas_Test+0x84>
    Debug("Test completed");
 80069ac:	4a07      	ldr	r2, [pc, #28]	@ (80069cc <Meas_Test+0x94>)
 80069ae:	4b08      	ldr	r3, [pc, #32]	@ (80069d0 <Meas_Test+0x98>)
 80069b0:	0019      	movs	r1, r3
 80069b2:	2003      	movs	r0, #3
 80069b4:	f003 f8ba 	bl	8009b2c <CreateLine>
    SetTestDone();
 80069b8:	f7ff fc90 	bl	80062dc <SetTestDone>
  }
}
 80069bc:	46c0      	nop			@ (mov r8, r8)
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	46c0      	nop			@ (mov r8, r8)
 80069c4:	20001080 	.word	0x20001080
 80069c8:	00000bb8 	.word	0x00000bb8
 80069cc:	0801b8f4 	.word	0x0801b8f4
 80069d0:	0801b8bc 	.word	0x0801b8bc

080069d4 <ResetMeasurements>:
void ResetMeasurements(void) {
 80069d4:	b580      	push	{r7, lr}
 80069d6:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 80069d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006a08 <ResetMeasurements+0x34>)
 80069da:	2200      	movs	r2, #0
 80069dc:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 80069de:	4b0a      	ldr	r3, [pc, #40]	@ (8006a08 <ResetMeasurements+0x34>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 80069e4:	4b08      	ldr	r3, [pc, #32]	@ (8006a08 <ResetMeasurements+0x34>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 80069ea:	4b07      	ldr	r3, [pc, #28]	@ (8006a08 <ResetMeasurements+0x34>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 80069f0:	4b05      	ldr	r3, [pc, #20]	@ (8006a08 <ResetMeasurements+0x34>)
 80069f2:	2200      	movs	r2, #0
 80069f4:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 80069f6:	4b04      	ldr	r3, [pc, #16]	@ (8006a08 <ResetMeasurements+0x34>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 80069fc:	4b02      	ldr	r3, [pc, #8]	@ (8006a08 <ResetMeasurements+0x34>)
 80069fe:	2200      	movs	r2, #0
 8006a00:	73da      	strb	r2, [r3, #15]
}
 8006a02:	46c0      	nop			@ (mov r8, r8)
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	2000103c 	.word	0x2000103c

08006a0c <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006a10:	4b18      	ldr	r3, [pc, #96]	@ (8006a74 <MeasurementsCompleted+0x68>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	701a      	strb	r2, [r3, #0]
 8006a16:	e024      	b.n	8006a62 <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8006a18:	4b16      	ldr	r3, [pc, #88]	@ (8006a74 <MeasurementsCompleted+0x68>)
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	4a16      	ldr	r2, [pc, #88]	@ (8006a78 <MeasurementsCompleted+0x6c>)
 8006a1e:	011b      	lsls	r3, r3, #4
 8006a20:	18d3      	adds	r3, r2, r3
 8006a22:	330c      	adds	r3, #12
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d015      	beq.n	8006a56 <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 8006a2a:	4b12      	ldr	r3, [pc, #72]	@ (8006a74 <MeasurementsCompleted+0x68>)
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	4a12      	ldr	r2, [pc, #72]	@ (8006a78 <MeasurementsCompleted+0x6c>)
 8006a30:	011b      	lsls	r3, r3, #4
 8006a32:	18d3      	adds	r3, r2, r3
 8006a34:	3304      	adds	r3, #4
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4798      	blx	r3
 8006a3a:	1e03      	subs	r3, r0, #0
 8006a3c:	d009      	beq.n	8006a52 <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8006a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a74 <MeasurementsCompleted+0x68>)
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	4a0d      	ldr	r2, [pc, #52]	@ (8006a78 <MeasurementsCompleted+0x6c>)
 8006a44:	011b      	lsls	r3, r3, #4
 8006a46:	18d3      	adds	r3, r2, r3
 8006a48:	3308      	adds	r3, #8
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	701a      	strb	r2, [r3, #0]
 8006a50:	e001      	b.n	8006a56 <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8006a52:	2300      	movs	r3, #0
 8006a54:	e00a      	b.n	8006a6c <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8006a56:	4b07      	ldr	r3, [pc, #28]	@ (8006a74 <MeasurementsCompleted+0x68>)
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	4b05      	ldr	r3, [pc, #20]	@ (8006a74 <MeasurementsCompleted+0x68>)
 8006a60:	701a      	strb	r2, [r3, #0]
 8006a62:	4b04      	ldr	r3, [pc, #16]	@ (8006a74 <MeasurementsCompleted+0x68>)
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d9d6      	bls.n	8006a18 <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 8006a6a:	2301      	movs	r3, #1
}
 8006a6c:	0018      	movs	r0, r3
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	46c0      	nop			@ (mov r8, r8)
 8006a74:	20001086 	.word	0x20001086
 8006a78:	2000104c 	.word	0x2000104c

08006a7c <Mic_Upkeep>:

MicrophoneState Mic_Upkeep(){
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	af00      	add	r7, sp, #0
  switch(MicState){
 8006a80:	4b21      	ldr	r3, [pc, #132]	@ (8006b08 <Mic_Upkeep+0x8c>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b03      	cmp	r3, #3
 8006a86:	d022      	beq.n	8006ace <Mic_Upkeep+0x52>
 8006a88:	dc2c      	bgt.n	8006ae4 <Mic_Upkeep+0x68>
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d00f      	beq.n	8006aae <Mic_Upkeep+0x32>
 8006a8e:	dc29      	bgt.n	8006ae4 <Mic_Upkeep+0x68>
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <Mic_Upkeep+0x1e>
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d004      	beq.n	8006aa2 <Mic_Upkeep+0x26>
 8006a98:	e024      	b.n	8006ae4 <Mic_Upkeep+0x68>

  case MIC_STATE_INIT:
    //reset if necesarry
    MicState = MIC_STATE_START_MEASUREMENT;
 8006a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8006b08 <Mic_Upkeep+0x8c>)
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	701a      	strb	r2, [r3, #0]
    break;
 8006aa0:	e02d      	b.n	8006afe <Mic_Upkeep+0x82>

  case MIC_STATE_START_MEASUREMENT:
    MIC_StartMeasurementWrapper();
 8006aa2:	f7ff fddc 	bl	800665e <MIC_StartMeasurementWrapper>
    MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8006aa6:	4b18      	ldr	r3, [pc, #96]	@ (8006b08 <Mic_Upkeep+0x8c>)
 8006aa8:	2202      	movs	r2, #2
 8006aaa:	701a      	strb	r2, [r3, #0]
    break;
 8006aac:	e027      	b.n	8006afe <Mic_Upkeep+0x82>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if(MIC_IsMeasurementDoneWrapper()){
 8006aae:	f7ff fde1 	bl	8006674 <MIC_IsMeasurementDoneWrapper>
 8006ab2:	1e03      	subs	r3, r0, #0
 8006ab4:	d020      	beq.n	8006af8 <Mic_Upkeep+0x7c>
      MicState = MIC_STATE_WAIT;
 8006ab6:	4b14      	ldr	r3, [pc, #80]	@ (8006b08 <Mic_Upkeep+0x8c>)
 8006ab8:	2203      	movs	r2, #3
 8006aba:	701a      	strb	r2, [r3, #0]
      MicStamp = HAL_GetTick() + 1000;
 8006abc:	f003 fbbc 	bl	800a238 <HAL_GetTick>
 8006ac0:	0003      	movs	r3, r0
 8006ac2:	22fa      	movs	r2, #250	@ 0xfa
 8006ac4:	0092      	lsls	r2, r2, #2
 8006ac6:	189a      	adds	r2, r3, r2
 8006ac8:	4b10      	ldr	r3, [pc, #64]	@ (8006b0c <Mic_Upkeep+0x90>)
 8006aca:	601a      	str	r2, [r3, #0]
    }
    break;
 8006acc:	e014      	b.n	8006af8 <Mic_Upkeep+0x7c>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MicStamp)){
 8006ace:	4b0f      	ldr	r3, [pc, #60]	@ (8006b0c <Mic_Upkeep+0x90>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	0018      	movs	r0, r3
 8006ad4:	f002 ffd4 	bl	8009a80 <TimestampIsReached>
 8006ad8:	1e03      	subs	r3, r0, #0
 8006ada:	d00f      	beq.n	8006afc <Mic_Upkeep+0x80>
      MicState = MIC_STATE_START_MEASUREMENT;
 8006adc:	4b0a      	ldr	r3, [pc, #40]	@ (8006b08 <Mic_Upkeep+0x8c>)
 8006ade:	2201      	movs	r2, #1
 8006ae0:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006ae2:	e00b      	b.n	8006afc <Mic_Upkeep+0x80>

  default:
    Debug("Unexpected ocurrence happened");
 8006ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8006b10 <Mic_Upkeep+0x94>)
 8006ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8006b14 <Mic_Upkeep+0x98>)
 8006ae8:	0019      	movs	r1, r3
 8006aea:	2003      	movs	r0, #3
 8006aec:	f003 f81e 	bl	8009b2c <CreateLine>
    MicState = MIC_STATE_INIT;
 8006af0:	4b05      	ldr	r3, [pc, #20]	@ (8006b08 <Mic_Upkeep+0x8c>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	701a      	strb	r2, [r3, #0]
    break;
 8006af6:	e002      	b.n	8006afe <Mic_Upkeep+0x82>
    break;
 8006af8:	46c0      	nop			@ (mov r8, r8)
 8006afa:	e000      	b.n	8006afe <Mic_Upkeep+0x82>
    break;
 8006afc:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8006afe:	4b02      	ldr	r3, [pc, #8]	@ (8006b08 <Mic_Upkeep+0x8c>)
 8006b00:	781b      	ldrb	r3, [r3, #0]
}
 8006b02:	0018      	movs	r0, r3
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	20001085 	.word	0x20001085
 8006b0c:	2000108c 	.word	0x2000108c
 8006b10:	0801b904 	.word	0x0801b904
 8006b14:	0801b8bc 	.word	0x0801b8bc

08006b18 <Meas_Upkeep>:
//      MicState = MIC_STATE_INIT;
//      break;
//    }
//}

MeasurementState Meas_Upkeep(void) {
 8006b18:	b5b0      	push	{r4, r5, r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af04      	add	r7, sp, #16
  switch(MeasState) {
 8006b1e:	4b3c      	ldr	r3, [pc, #240]	@ (8006c10 <Meas_Upkeep+0xf8>)
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	2b06      	cmp	r3, #6
 8006b24:	d868      	bhi.n	8006bf8 <Meas_Upkeep+0xe0>
 8006b26:	009a      	lsls	r2, r3, #2
 8006b28:	4b3a      	ldr	r3, [pc, #232]	@ (8006c14 <Meas_Upkeep+0xfc>)
 8006b2a:	18d3      	adds	r3, r2, r3
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:

    Debug("Measurements are turned off.");
 8006b30:	4a39      	ldr	r2, [pc, #228]	@ (8006c18 <Meas_Upkeep+0x100>)
 8006b32:	4b3a      	ldr	r3, [pc, #232]	@ (8006c1c <Meas_Upkeep+0x104>)
 8006b34:	0019      	movs	r1, r3
 8006b36:	2003      	movs	r0, #3
 8006b38:	f002 fff8 	bl	8009b2c <CreateLine>
    break;
 8006b3c:	e063      	b.n	8006c06 <Meas_Upkeep+0xee>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 8006b3e:	f7ff ff49 	bl	80069d4 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 8006b42:	4b33      	ldr	r3, [pc, #204]	@ (8006c10 <Meas_Upkeep+0xf8>)
 8006b44:	2201      	movs	r2, #1
 8006b46:	701a      	strb	r2, [r3, #0]
    break;
 8006b48:	e05d      	b.n	8006c06 <Meas_Upkeep+0xee>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 8006b4a:	f7ff fecd 	bl	80068e8 <StartMeasurements>
    SetMeasurementIndicator();
 8006b4e:	f002 f967 	bl	8008e20 <SetMeasurementIndicator>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 8006b52:	4b2f      	ldr	r3, [pc, #188]	@ (8006c10 <Meas_Upkeep+0xf8>)
 8006b54:	2202      	movs	r2, #2
 8006b56:	701a      	strb	r2, [r3, #0]
   break;
 8006b58:	e055      	b.n	8006c06 <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 8006b5a:	f7ff ff57 	bl	8006a0c <MeasurementsCompleted>
 8006b5e:	1e03      	subs	r3, r0, #0
 8006b60:	d04e      	beq.n	8006c00 <Meas_Upkeep+0xe8>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 8006b62:	4b2b      	ldr	r3, [pc, #172]	@ (8006c10 <Meas_Upkeep+0xf8>)
 8006b64:	2203      	movs	r2, #3
 8006b66:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006b68:	e04a      	b.n	8006c00 <Meas_Upkeep+0xe8>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 8006b6a:	4a2d      	ldr	r2, [pc, #180]	@ (8006c20 <Meas_Upkeep+0x108>)
 8006b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8006c1c <Meas_Upkeep+0x104>)
 8006b6e:	0019      	movs	r1, r3
 8006b70:	2003      	movs	r0, #3
 8006b72:	f002 ffdb 	bl	8009b2c <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 8006b76:	4b2b      	ldr	r3, [pc, #172]	@ (8006c24 <Meas_Upkeep+0x10c>)
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	4a2b      	ldr	r2, [pc, #172]	@ (8006c28 <Meas_Upkeep+0x110>)
 8006b7c:	4927      	ldr	r1, [pc, #156]	@ (8006c1c <Meas_Upkeep+0x104>)
 8006b7e:	2003      	movs	r0, #3
 8006b80:	f002 ffd4 	bl	8009b2c <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 8006b84:	4b27      	ldr	r3, [pc, #156]	@ (8006c24 <Meas_Upkeep+0x10c>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	1c18      	adds	r0, r3, #0
 8006b8a:	f7fc fbe9 	bl	8003360 <__aeabi_f2d>
 8006b8e:	0004      	movs	r4, r0
 8006b90:	000d      	movs	r5, r1
 8006b92:	4b24      	ldr	r3, [pc, #144]	@ (8006c24 <Meas_Upkeep+0x10c>)
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	1c18      	adds	r0, r3, #0
 8006b98:	f7fc fbe2 	bl	8003360 <__aeabi_f2d>
 8006b9c:	0002      	movs	r2, r0
 8006b9e:	000b      	movs	r3, r1
 8006ba0:	4822      	ldr	r0, [pc, #136]	@ (8006c2c <Meas_Upkeep+0x114>)
 8006ba2:	491e      	ldr	r1, [pc, #120]	@ (8006c1c <Meas_Upkeep+0x104>)
 8006ba4:	9202      	str	r2, [sp, #8]
 8006ba6:	9303      	str	r3, [sp, #12]
 8006ba8:	9400      	str	r4, [sp, #0]
 8006baa:	9501      	str	r5, [sp, #4]
 8006bac:	0002      	movs	r2, r0
 8006bae:	2003      	movs	r0, #3
 8006bb0:	f002 ffbc 	bl	8009b2c <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 8006bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8006c24 <Meas_Upkeep+0x10c>)
 8006bb6:	6858      	ldr	r0, [r3, #4]
 8006bb8:	4b1a      	ldr	r3, [pc, #104]	@ (8006c24 <Meas_Upkeep+0x10c>)
 8006bba:	6819      	ldr	r1, [r3, #0]
 8006bbc:	4b19      	ldr	r3, [pc, #100]	@ (8006c24 <Meas_Upkeep+0x10c>)
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	001a      	movs	r2, r3
 8006bc4:	f7fc fd90 	bl	80036e8 <setMeasurement>
    ResetMeasurementIndicator();
 8006bc8:	f002 f942 	bl	8008e50 <ResetMeasurementIndicator>
    MeasStamp = HAL_GetTick() + 10000;
 8006bcc:	f003 fb34 	bl	800a238 <HAL_GetTick>
 8006bd0:	0003      	movs	r3, r0
 8006bd2:	4a17      	ldr	r2, [pc, #92]	@ (8006c30 <Meas_Upkeep+0x118>)
 8006bd4:	189a      	adds	r2, r3, r2
 8006bd6:	4b17      	ldr	r3, [pc, #92]	@ (8006c34 <Meas_Upkeep+0x11c>)
 8006bd8:	601a      	str	r2, [r3, #0]
    MeasState = MEAS_STATE_WAIT;
 8006bda:	4b0d      	ldr	r3, [pc, #52]	@ (8006c10 <Meas_Upkeep+0xf8>)
 8006bdc:	2206      	movs	r2, #6
 8006bde:	701a      	strb	r2, [r3, #0]
    break;
 8006be0:	e011      	b.n	8006c06 <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT:
    if(TimestampIsReached(MeasStamp)){
 8006be2:	4b14      	ldr	r3, [pc, #80]	@ (8006c34 <Meas_Upkeep+0x11c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	0018      	movs	r0, r3
 8006be8:	f002 ff4a 	bl	8009a80 <TimestampIsReached>
 8006bec:	1e03      	subs	r3, r0, #0
 8006bee:	d009      	beq.n	8006c04 <Meas_Upkeep+0xec>
      MeasState = MEAS_STATE_INIT;
 8006bf0:	4b07      	ldr	r3, [pc, #28]	@ (8006c10 <Meas_Upkeep+0xf8>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	701a      	strb	r2, [r3, #0]
    }

    break;
 8006bf6:	e005      	b.n	8006c04 <Meas_Upkeep+0xec>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8006bf8:	4b05      	ldr	r3, [pc, #20]	@ (8006c10 <Meas_Upkeep+0xf8>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	701a      	strb	r2, [r3, #0]
    break;
 8006bfe:	e002      	b.n	8006c06 <Meas_Upkeep+0xee>
    break;
 8006c00:	46c0      	nop			@ (mov r8, r8)
 8006c02:	e000      	b.n	8006c06 <Meas_Upkeep+0xee>
    break;
 8006c04:	46c0      	nop			@ (mov r8, r8)
  }

  return MeasState;
 8006c06:	4b02      	ldr	r3, [pc, #8]	@ (8006c10 <Meas_Upkeep+0xf8>)
 8006c08:	781b      	ldrb	r3, [r3, #0]
}
 8006c0a:	0018      	movs	r0, r3
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bdb0      	pop	{r4, r5, r7, pc}
 8006c10:	20001084 	.word	0x20001084
 8006c14:	0801c040 	.word	0x0801c040
 8006c18:	0801b924 	.word	0x0801b924
 8006c1c:	0801b8bc 	.word	0x0801b8bc
 8006c20:	0801b944 	.word	0x0801b944
 8006c24:	2000103c 	.word	0x2000103c
 8006c28:	0801b958 	.word	0x0801b958
 8006c2c:	0801b970 	.word	0x0801b970
 8006c30:	00002710 	.word	0x00002710
 8006c34:	20001088 	.word	0x20001088

08006c38 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 8006c38:	b590      	push	{r4, r7, lr}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	1d3b      	adds	r3, r7, #4
 8006c40:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 8006c42:	240f      	movs	r4, #15
 8006c44:	193b      	adds	r3, r7, r4
 8006c46:	2200      	movs	r2, #0
 8006c48:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 8006c4a:	4b20      	ldr	r3, [pc, #128]	@ (8006ccc <Meas_SetEnabledSensors+0x94>)
 8006c4c:	1d3a      	adds	r2, r7, #4
 8006c4e:	6812      	ldr	r2, [r2, #0]
 8006c50:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 8006c52:	193b      	adds	r3, r7, r4
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	193a      	adds	r2, r7, r4
 8006c58:	1c59      	adds	r1, r3, #1
 8006c5a:	7011      	strb	r1, [r2, #0]
 8006c5c:	0018      	movs	r0, r3
 8006c5e:	1d3b      	adds	r3, r7, #4
 8006c60:	7819      	ldrb	r1, [r3, #0]
 8006c62:	4a1b      	ldr	r2, [pc, #108]	@ (8006cd0 <Meas_SetEnabledSensors+0x98>)
 8006c64:	0103      	lsls	r3, r0, #4
 8006c66:	18d3      	adds	r3, r2, r3
 8006c68:	330c      	adds	r3, #12
 8006c6a:	1c0a      	adds	r2, r1, #0
 8006c6c:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 8006c6e:	193b      	adds	r3, r7, r4
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	193a      	adds	r2, r7, r4
 8006c74:	1c59      	adds	r1, r3, #1
 8006c76:	7011      	strb	r1, [r2, #0]
 8006c78:	0018      	movs	r0, r3
 8006c7a:	1d3b      	adds	r3, r7, #4
 8006c7c:	7859      	ldrb	r1, [r3, #1]
 8006c7e:	4a14      	ldr	r2, [pc, #80]	@ (8006cd0 <Meas_SetEnabledSensors+0x98>)
 8006c80:	0103      	lsls	r3, r0, #4
 8006c82:	18d3      	adds	r3, r2, r3
 8006c84:	330c      	adds	r3, #12
 8006c86:	1c0a      	adds	r2, r1, #0
 8006c88:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 8006c8a:	193b      	adds	r3, r7, r4
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	193a      	adds	r2, r7, r4
 8006c90:	1c59      	adds	r1, r3, #1
 8006c92:	7011      	strb	r1, [r2, #0]
 8006c94:	0018      	movs	r0, r3
 8006c96:	1d3b      	adds	r3, r7, #4
 8006c98:	7899      	ldrb	r1, [r3, #2]
 8006c9a:	4a0d      	ldr	r2, [pc, #52]	@ (8006cd0 <Meas_SetEnabledSensors+0x98>)
 8006c9c:	0103      	lsls	r3, r0, #4
 8006c9e:	18d3      	adds	r3, r2, r3
 8006ca0:	330c      	adds	r3, #12
 8006ca2:	1c0a      	adds	r2, r1, #0
 8006ca4:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8006ca6:	193b      	adds	r3, r7, r4
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	193a      	adds	r2, r7, r4
 8006cac:	1c59      	adds	r1, r3, #1
 8006cae:	7011      	strb	r1, [r2, #0]
 8006cb0:	0018      	movs	r0, r3
 8006cb2:	1d3b      	adds	r3, r7, #4
 8006cb4:	78d9      	ldrb	r1, [r3, #3]
 8006cb6:	4a06      	ldr	r2, [pc, #24]	@ (8006cd0 <Meas_SetEnabledSensors+0x98>)
 8006cb8:	0103      	lsls	r3, r0, #4
 8006cba:	18d3      	adds	r3, r2, r3
 8006cbc:	330c      	adds	r3, #12
 8006cbe:	1c0a      	adds	r2, r1, #0
 8006cc0:	701a      	strb	r2, [r3, #0]
}
 8006cc2:	46c0      	nop			@ (mov r8, r8)
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	b005      	add	sp, #20
 8006cc8:	bd90      	pop	{r4, r7, pc}
 8006cca:	46c0      	nop			@ (mov r8, r8)
 8006ccc:	2000107c 	.word	0x2000107c
 8006cd0:	2000104c 	.word	0x2000104c

08006cd4 <SetESPMeasurementDone>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}

void SetESPMeasurementDone(){
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 8006cd8:	4b02      	ldr	r3, [pc, #8]	@ (8006ce4 <SetESPMeasurementDone+0x10>)
 8006cda:	2201      	movs	r2, #1
 8006cdc:	70da      	strb	r2, [r3, #3]
}
 8006cde:	46c0      	nop			@ (mov r8, r8)
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	20001080 	.word	0x20001080

08006ce8 <MIC_Init>:
float sample[NUMBER_OF_SAMPLES];




void MIC_Init(I2S_HandleTypeDef* i2SHandle) { I2SHandle = i2SHandle; }
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	4b03      	ldr	r3, [pc, #12]	@ (8006d00 <MIC_Init+0x18>)
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	46c0      	nop			@ (mov r8, r8)
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	b002      	add	sp, #8
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	46c0      	nop			@ (mov r8, r8)
 8006d00:	20001090 	.word	0x20001090

08006d04 <UpdateSampleRate>:
//  for(uint8_t i = 0;i < NR_SAMPLES_128; i++) {
//    FFTResult[i] *= energyCorrectionFactor;
//  }
//}

static void UpdateSampleRate(uint32_t sampleRate) {
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  if (I2SHandle->Init.AudioFreq == sampleRate) {
 8006d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8006d40 <UpdateSampleRate+0x3c>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d00e      	beq.n	8006d36 <UpdateSampleRate+0x32>
    return;
  }

  HAL_I2S_DeInit(I2SHandle);
 8006d18:	4b09      	ldr	r3, [pc, #36]	@ (8006d40 <UpdateSampleRate+0x3c>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	0018      	movs	r0, r3
 8006d1e:	f006 ff49 	bl	800dbb4 <HAL_I2S_DeInit>
  I2SHandle->Init.AudioFreq = sampleRate;
 8006d22:	4b07      	ldr	r3, [pc, #28]	@ (8006d40 <UpdateSampleRate+0x3c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	615a      	str	r2, [r3, #20]
  HAL_I2S_Init(I2SHandle);
 8006d2a:	4b05      	ldr	r3, [pc, #20]	@ (8006d40 <UpdateSampleRate+0x3c>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	0018      	movs	r0, r3
 8006d30:	f006 fe4e 	bl	800d9d0 <HAL_I2S_Init>
 8006d34:	e000      	b.n	8006d38 <UpdateSampleRate+0x34>
    return;
 8006d36:	46c0      	nop			@ (mov r8, r8)
}
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	b002      	add	sp, #8
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	46c0      	nop			@ (mov r8, r8)
 8006d40:	20001090 	.word	0x20001090

08006d44 <ConvertAudio>:

static float ConvertAudio(int16_t* data) {
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b088      	sub	sp, #32
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  uint32_t MSP;
  uint32_t LSP;
  int32_t signedAudioValue;
  float Division = 8388607.0; //Reference?
 8006d4c:	4b18      	ldr	r3, [pc, #96]	@ (8006db0 <ConvertAudio+0x6c>)
 8006d4e:	61bb      	str	r3, [r7, #24]
  float adjustedAudioValue = 0;
 8006d50:	2300      	movs	r3, #0
 8006d52:	617b      	str	r3, [r7, #20]
  uint32_t audioValue = 0;
 8006d54:	2300      	movs	r3, #0
 8006d56:	61fb      	str	r3, [r7, #28]
  MSP = data[0]<<9;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	5e9b      	ldrsh	r3, [r3, r2]
 8006d5e:	025b      	lsls	r3, r3, #9
 8006d60:	613b      	str	r3, [r7, #16]
  LSP = (data[1]&0xFF80)>>7;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	3302      	adds	r3, #2
 8006d66:	2200      	movs	r2, #0
 8006d68:	5e9b      	ldrsh	r3, [r3, r2]
 8006d6a:	11db      	asrs	r3, r3, #7
 8006d6c:	05db      	lsls	r3, r3, #23
 8006d6e:	0ddb      	lsrs	r3, r3, #23
 8006d70:	60fb      	str	r3, [r7, #12]
  audioValue = MSP | LSP;
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	61fb      	str	r3, [r7, #28]
  if((0x800000 & audioValue) != 0){
 8006d7a:	69fa      	ldr	r2, [r7, #28]
 8006d7c:	2380      	movs	r3, #128	@ 0x80
 8006d7e:	041b      	lsls	r3, r3, #16
 8006d80:	4013      	ands	r3, r2
 8006d82:	d004      	beq.n	8006d8e <ConvertAudio+0x4a>
    audioValue = 0xFF000000 | audioValue;
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	22ff      	movs	r2, #255	@ 0xff
 8006d88:	0612      	lsls	r2, r2, #24
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	61fb      	str	r3, [r7, #28]
  }
  signedAudioValue = (int32_t)audioValue;
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	60bb      	str	r3, [r7, #8]
  adjustedAudioValue = ((float)signedAudioValue/Division);
 8006d92:	68b8      	ldr	r0, [r7, #8]
 8006d94:	f7fa fb9a 	bl	80014cc <__aeabi_i2f>
 8006d98:	1c03      	adds	r3, r0, #0
 8006d9a:	69b9      	ldr	r1, [r7, #24]
 8006d9c:	1c18      	adds	r0, r3, #0
 8006d9e:	f7f9 fe97 	bl	8000ad0 <__aeabi_fdiv>
 8006da2:	1c03      	adds	r3, r0, #0
 8006da4:	617b      	str	r3, [r7, #20]
//  if(audioValue < 0){
//    audioValue = 0xFFFFFFFF-audioValue;
//  }
//  dB = 20 * log10(audioValue / Division);

  return adjustedAudioValue;
 8006da6:	697b      	ldr	r3, [r7, #20]
}
 8006da8:	1c18      	adds	r0, r3, #0
 8006daa:	46bd      	mov	sp, r7
 8006dac:	b008      	add	sp, #32
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	4afffffe 	.word	0x4afffffe

08006db4 <MIC_Start>:
//  arm_rfft_q15(&fft_instance, sample, output);
//  arm_abs_q15(output, output, NUMBER_OF_SAMPLES);
//  GetAllOctaves();
//}

void MIC_Start(uint32_t sampleRate, uint16_t nrSamples) {
 8006db4:	b5b0      	push	{r4, r5, r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	000a      	movs	r2, r1
 8006dbe:	1cbb      	adds	r3, r7, #2
 8006dc0:	801a      	strh	r2, [r3, #0]
  if (I2SHandle == NULL) {
 8006dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8006e40 <MIC_Start+0x8c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d106      	bne.n	8006dd8 <MIC_Start+0x24>
    Error("Microphone is not initialised.");
 8006dca:	4a1e      	ldr	r2, [pc, #120]	@ (8006e44 <MIC_Start+0x90>)
 8006dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8006e48 <MIC_Start+0x94>)
 8006dce:	0019      	movs	r1, r3
 8006dd0:	2001      	movs	r0, #1
 8006dd2:	f002 feab 	bl	8009b2c <CreateLine>
    return;
 8006dd6:	e02f      	b.n	8006e38 <MIC_Start+0x84>
  }
  SetMICIndicator();
 8006dd8:	f002 f850 	bl	8008e7c <SetMICIndicator>
  Debug("In mic start");
 8006ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8006e4c <MIC_Start+0x98>)
 8006dde:	4b1c      	ldr	r3, [pc, #112]	@ (8006e50 <MIC_Start+0x9c>)
 8006de0:	0019      	movs	r1, r3
 8006de2:	2003      	movs	r0, #3
 8006de4:	f002 fea2 	bl	8009b2c <CreateLine>
  UpdateSampleRate(sampleRate);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	0018      	movs	r0, r3
 8006dec:	f7ff ff8a 	bl	8006d04 <UpdateSampleRate>
  Samples = (NrOfSamples)nrSamples;
 8006df0:	4b18      	ldr	r3, [pc, #96]	@ (8006e54 <MIC_Start+0xa0>)
 8006df2:	1cba      	adds	r2, r7, #2
 8006df4:	8812      	ldrh	r2, [r2, #0]
 8006df6:	801a      	strh	r2, [r3, #0]

  //StartTime = GetCurrentHalTicks();
  StartupDoneTime = HAL_GetTick() + 20;
 8006df8:	f003 fa1e 	bl	800a238 <HAL_GetTick>
 8006dfc:	0003      	movs	r3, r0
 8006dfe:	3314      	adds	r3, #20
 8006e00:	001a      	movs	r2, r3
 8006e02:	4b15      	ldr	r3, [pc, #84]	@ (8006e58 <MIC_Start+0xa4>)
 8006e04:	601a      	str	r2, [r3, #0]
  StartUpDone = false;
 8006e06:	4b15      	ldr	r3, [pc, #84]	@ (8006e5c <MIC_Start+0xa8>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	701a      	strb	r2, [r3, #0]
  DataReady = false;
 8006e0c:	4b14      	ldr	r3, [pc, #80]	@ (8006e60 <MIC_Start+0xac>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, NUMBER_OF_SAMPLES*2);
 8006e12:	4b0b      	ldr	r3, [pc, #44]	@ (8006e40 <MIC_Start+0x8c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	250f      	movs	r5, #15
 8006e18:	197c      	adds	r4, r7, r5
 8006e1a:	2280      	movs	r2, #128	@ 0x80
 8006e1c:	00d2      	lsls	r2, r2, #3
 8006e1e:	4911      	ldr	r1, [pc, #68]	@ (8006e64 <MIC_Start+0xb0>)
 8006e20:	0018      	movs	r0, r3
 8006e22:	f006 fef3 	bl	800dc0c <HAL_I2S_Receive_DMA>
 8006e26:	0003      	movs	r3, r0
 8006e28:	7023      	strb	r3, [r4, #0]
//      HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer,
//          Samples >> 1); //>>1 because reading half word

  Info("Status %d", status);
 8006e2a:	197b      	adds	r3, r7, r5
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	4a0e      	ldr	r2, [pc, #56]	@ (8006e68 <MIC_Start+0xb4>)
 8006e30:	490e      	ldr	r1, [pc, #56]	@ (8006e6c <MIC_Start+0xb8>)
 8006e32:	2002      	movs	r0, #2
 8006e34:	f002 fe7a 	bl	8009b2c <CreateLine>
}
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	b004      	add	sp, #16
 8006e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8006e3e:	46c0      	nop			@ (mov r8, r8)
 8006e40:	20001090 	.word	0x20001090
 8006e44:	0801b9a4 	.word	0x0801b9a4
 8006e48:	0801b9c4 	.word	0x0801b9c4
 8006e4c:	0801b9c8 	.word	0x0801b9c8
 8006e50:	0801b9d8 	.word	0x0801b9d8
 8006e54:	2000002c 	.word	0x2000002c
 8006e58:	20002094 	.word	0x20002094
 8006e5c:	20002098 	.word	0x20002098
 8006e60:	20002099 	.word	0x20002099
 8006e64:	20001094 	.word	0x20001094
 8006e68:	0801b9dc 	.word	0x0801b9dc
 8006e6c:	0801b9e8 	.word	0x0801b9e8

08006e70 <MinimalValue>:

float MinimalValue(uint16_t length){
 8006e70:	b590      	push	{r4, r7, lr}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	0002      	movs	r2, r0
 8006e78:	1dbb      	adds	r3, r7, #6
 8006e7a:	801a      	strh	r2, [r3, #0]
  float MinVal = 1;
 8006e7c:	23fe      	movs	r3, #254	@ 0xfe
 8006e7e:	059b      	lsls	r3, r3, #22
 8006e80:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 8006e82:	230a      	movs	r3, #10
 8006e84:	18fb      	adds	r3, r7, r3
 8006e86:	2200      	movs	r2, #0
 8006e88:	801a      	strh	r2, [r3, #0]
 8006e8a:	e01c      	b.n	8006ec6 <MinimalValue+0x56>
    if(sample[i] < MinVal){
 8006e8c:	240a      	movs	r4, #10
 8006e8e:	193b      	adds	r3, r7, r4
 8006e90:	2200      	movs	r2, #0
 8006e92:	5e9a      	ldrsh	r2, [r3, r2]
 8006e94:	4b12      	ldr	r3, [pc, #72]	@ (8006ee0 <MinimalValue+0x70>)
 8006e96:	0092      	lsls	r2, r2, #2
 8006e98:	58d3      	ldr	r3, [r2, r3]
 8006e9a:	1c19      	adds	r1, r3, #0
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f7f9 fb29 	bl	80004f4 <__aeabi_fcmpgt>
 8006ea2:	1e03      	subs	r3, r0, #0
 8006ea4:	d006      	beq.n	8006eb4 <MinimalValue+0x44>
      MinVal = sample[i];
 8006ea6:	193b      	adds	r3, r7, r4
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	5e9a      	ldrsh	r2, [r3, r2]
 8006eac:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee0 <MinimalValue+0x70>)
 8006eae:	0092      	lsls	r2, r2, #2
 8006eb0:	58d3      	ldr	r3, [r2, r3]
 8006eb2:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 8006eb4:	210a      	movs	r1, #10
 8006eb6:	187b      	adds	r3, r7, r1
 8006eb8:	2200      	movs	r2, #0
 8006eba:	5e9b      	ldrsh	r3, [r3, r2]
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	187b      	adds	r3, r7, r1
 8006ec4:	801a      	strh	r2, [r3, #0]
 8006ec6:	230a      	movs	r3, #10
 8006ec8:	18fb      	adds	r3, r7, r3
 8006eca:	2200      	movs	r2, #0
 8006ecc:	5e9a      	ldrsh	r2, [r3, r2]
 8006ece:	1dbb      	adds	r3, r7, #6
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	dbda      	blt.n	8006e8c <MinimalValue+0x1c>
    }
  }
  return(MinVal);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
}
 8006ed8:	1c18      	adds	r0, r3, #0
 8006eda:	46bd      	mov	sp, r7
 8006edc:	b005      	add	sp, #20
 8006ede:	bd90      	pop	{r4, r7, pc}
 8006ee0:	200020d0 	.word	0x200020d0

08006ee4 <MaximalValue>:

float MaximalValue(uint16_t length){
 8006ee4:	b590      	push	{r4, r7, lr}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	0002      	movs	r2, r0
 8006eec:	1dbb      	adds	r3, r7, #6
 8006eee:	801a      	strh	r2, [r3, #0]
  float MaxVal = -1;
 8006ef0:	4b18      	ldr	r3, [pc, #96]	@ (8006f54 <MaximalValue+0x70>)
 8006ef2:	60fb      	str	r3, [r7, #12]
  int16_t i;
  for(i =0; i<length;i++){
 8006ef4:	230a      	movs	r3, #10
 8006ef6:	18fb      	adds	r3, r7, r3
 8006ef8:	2200      	movs	r2, #0
 8006efa:	801a      	strh	r2, [r3, #0]
 8006efc:	e01c      	b.n	8006f38 <MaximalValue+0x54>
    if(sample[i] > MaxVal){
 8006efe:	240a      	movs	r4, #10
 8006f00:	193b      	adds	r3, r7, r4
 8006f02:	2200      	movs	r2, #0
 8006f04:	5e9a      	ldrsh	r2, [r3, r2]
 8006f06:	4b14      	ldr	r3, [pc, #80]	@ (8006f58 <MaximalValue+0x74>)
 8006f08:	0092      	lsls	r2, r2, #2
 8006f0a:	58d3      	ldr	r3, [r2, r3]
 8006f0c:	1c19      	adds	r1, r3, #0
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f7f9 fadc 	bl	80004cc <__aeabi_fcmplt>
 8006f14:	1e03      	subs	r3, r0, #0
 8006f16:	d006      	beq.n	8006f26 <MaximalValue+0x42>
      MaxVal = sample[i];
 8006f18:	193b      	adds	r3, r7, r4
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	5e9a      	ldrsh	r2, [r3, r2]
 8006f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8006f58 <MaximalValue+0x74>)
 8006f20:	0092      	lsls	r2, r2, #2
 8006f22:	58d3      	ldr	r3, [r2, r3]
 8006f24:	60fb      	str	r3, [r7, #12]
  for(i =0; i<length;i++){
 8006f26:	210a      	movs	r1, #10
 8006f28:	187b      	adds	r3, r7, r1
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	5e9b      	ldrsh	r3, [r3, r2]
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	3301      	adds	r3, #1
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	187b      	adds	r3, r7, r1
 8006f36:	801a      	strh	r2, [r3, #0]
 8006f38:	230a      	movs	r3, #10
 8006f3a:	18fb      	adds	r3, r7, r3
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	5e9a      	ldrsh	r2, [r3, r2]
 8006f40:	1dbb      	adds	r3, r7, #6
 8006f42:	881b      	ldrh	r3, [r3, #0]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	dbda      	blt.n	8006efe <MaximalValue+0x1a>
    }
  }
  return(MaxVal);
 8006f48:	68fb      	ldr	r3, [r7, #12]
}
 8006f4a:	1c18      	adds	r0, r3, #0
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	b005      	add	sp, #20
 8006f50:	bd90      	pop	{r4, r7, pc}
 8006f52:	46c0      	nop			@ (mov r8, r8)
 8006f54:	bf800000 	.word	0xbf800000
 8006f58:	200020d0 	.word	0x200020d0

08006f5c <MIC_Check>:
bool MIC_Check(void) {
 8006f5c:	b5b0      	push	{r4, r5, r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
  float Max;
  float Min;
  Info("New samples");
 8006f62:	4a25      	ldr	r2, [pc, #148]	@ (8006ff8 <MIC_Check+0x9c>)
 8006f64:	4b25      	ldr	r3, [pc, #148]	@ (8006ffc <MIC_Check+0xa0>)
 8006f66:	0019      	movs	r1, r3
 8006f68:	2002      	movs	r0, #2
 8006f6a:	f002 fddf 	bl	8009b2c <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006f6e:	230e      	movs	r3, #14
 8006f70:	18fb      	adds	r3, r7, r3
 8006f72:	2200      	movs	r2, #0
 8006f74:	801a      	strh	r2, [r3, #0]
 8006f76:	e016      	b.n	8006fa6 <MIC_Check+0x4a>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 8006f78:	210e      	movs	r1, #14
 8006f7a:	187b      	adds	r3, r7, r1
 8006f7c:	881b      	ldrh	r3, [r3, #0]
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	3302      	adds	r3, #2
 8006f82:	005a      	lsls	r2, r3, #1
 8006f84:	4b1e      	ldr	r3, [pc, #120]	@ (8007000 <MIC_Check+0xa4>)
 8006f86:	18d2      	adds	r2, r2, r3
 8006f88:	000d      	movs	r5, r1
 8006f8a:	187b      	adds	r3, r7, r1
 8006f8c:	881c      	ldrh	r4, [r3, #0]
 8006f8e:	0010      	movs	r0, r2
 8006f90:	f7ff fed8 	bl	8006d44 <ConvertAudio>
 8006f94:	1c01      	adds	r1, r0, #0
 8006f96:	4b1b      	ldr	r3, [pc, #108]	@ (8007004 <MIC_Check+0xa8>)
 8006f98:	00a2      	lsls	r2, r4, #2
 8006f9a:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006f9c:	197b      	adds	r3, r7, r5
 8006f9e:	197a      	adds	r2, r7, r5
 8006fa0:	8812      	ldrh	r2, [r2, #0]
 8006fa2:	3201      	adds	r2, #1
 8006fa4:	801a      	strh	r2, [r3, #0]
 8006fa6:	230e      	movs	r3, #14
 8006fa8:	18fb      	adds	r3, r7, r3
 8006faa:	881a      	ldrh	r2, [r3, #0]
 8006fac:	2380      	movs	r3, #128	@ 0x80
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d3e1      	bcc.n	8006f78 <MIC_Check+0x1c>
    //Info("0x%08x", sample);
  }
  Max = MaximalValue(NUMBER_OF_SAMPLES);
 8006fb4:	2380      	movs	r3, #128	@ 0x80
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	0018      	movs	r0, r3
 8006fba:	f7ff ff93 	bl	8006ee4 <MaximalValue>
 8006fbe:	1c03      	adds	r3, r0, #0
 8006fc0:	60bb      	str	r3, [r7, #8]
  Min = MinimalValue(NUMBER_OF_SAMPLES);
 8006fc2:	2380      	movs	r3, #128	@ 0x80
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	0018      	movs	r0, r3
 8006fc8:	f7ff ff52 	bl	8006e70 <MinimalValue>
 8006fcc:	1c03      	adds	r3, r0, #0
 8006fce:	607b      	str	r3, [r7, #4]
  if(Max > 0.0 || Min < 0.0){
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	68b8      	ldr	r0, [r7, #8]
 8006fd4:	f7f9 fa8e 	bl	80004f4 <__aeabi_fcmpgt>
 8006fd8:	1e03      	subs	r3, r0, #0
 8006fda:	d105      	bne.n	8006fe8 <MIC_Check+0x8c>
 8006fdc:	2100      	movs	r1, #0
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7f9 fa74 	bl	80004cc <__aeabi_fcmplt>
 8006fe4:	1e03      	subs	r3, r0, #0
 8006fe6:	d001      	beq.n	8006fec <MIC_Check+0x90>
    return(true);
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e000      	b.n	8006fee <MIC_Check+0x92>
  }
  return(false);
 8006fec:	2300      	movs	r3, #0
}
 8006fee:	0018      	movs	r0, r3
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	b004      	add	sp, #16
 8006ff4:	bdb0      	pop	{r4, r5, r7, pc}
 8006ff6:	46c0      	nop			@ (mov r8, r8)
 8006ff8:	0801b9ec 	.word	0x0801b9ec
 8006ffc:	0801b9e8 	.word	0x0801b9e8
 8007000:	20001094 	.word	0x20001094
 8007004:	200020d0 	.word	0x200020d0

08007008 <MIC_Print>:
void MIC_Print(void) {
 8007008:	b590      	push	{r4, r7, lr}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
  Info("New samples");
 800700e:	4a8a      	ldr	r2, [pc, #552]	@ (8007238 <MIC_Print+0x230>)
 8007010:	4b8a      	ldr	r3, [pc, #552]	@ (800723c <MIC_Print+0x234>)
 8007012:	0019      	movs	r1, r3
 8007014:	2002      	movs	r0, #2
 8007016:	f002 fd89 	bl	8009b2c <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 800701a:	1dbb      	adds	r3, r7, #6
 800701c:	2200      	movs	r2, #0
 800701e:	801a      	strh	r2, [r3, #0]
 8007020:	e014      	b.n	800704c <MIC_Print+0x44>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 8007022:	1dbb      	adds	r3, r7, #6
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	3302      	adds	r3, #2
 800702a:	005a      	lsls	r2, r3, #1
 800702c:	4b84      	ldr	r3, [pc, #528]	@ (8007240 <MIC_Print+0x238>)
 800702e:	18d2      	adds	r2, r2, r3
 8007030:	1dbb      	adds	r3, r7, #6
 8007032:	881c      	ldrh	r4, [r3, #0]
 8007034:	0010      	movs	r0, r2
 8007036:	f7ff fe85 	bl	8006d44 <ConvertAudio>
 800703a:	1c01      	adds	r1, r0, #0
 800703c:	4b81      	ldr	r3, [pc, #516]	@ (8007244 <MIC_Print+0x23c>)
 800703e:	00a2      	lsls	r2, r4, #2
 8007040:	50d1      	str	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8007042:	1dbb      	adds	r3, r7, #6
 8007044:	1dba      	adds	r2, r7, #6
 8007046:	8812      	ldrh	r2, [r2, #0]
 8007048:	3201      	adds	r2, #1
 800704a:	801a      	strh	r2, [r3, #0]
 800704c:	1dbb      	adds	r3, r7, #6
 800704e:	881a      	ldrh	r2, [r3, #0]
 8007050:	2380      	movs	r3, #128	@ 0x80
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	429a      	cmp	r2, r3
 8007056:	d3e4      	bcc.n	8007022 <MIC_Print+0x1a>
    //Info("0x%08x", sample);
  }
  //filter();
  dBc = MIC_GetDB();
 8007058:	f000 f976 	bl	8007348 <MIC_GetDB>
 800705c:	1c02      	adds	r2, r0, #0
 800705e:	4b7a      	ldr	r3, [pc, #488]	@ (8007248 <MIC_Print+0x240>)
 8007060:	601a      	str	r2, [r3, #0]
  if(counter < 10){
 8007062:	4b7a      	ldr	r3, [pc, #488]	@ (800724c <MIC_Print+0x244>)
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	2b09      	cmp	r3, #9
 8007068:	d80e      	bhi.n	8007088 <MIC_Print+0x80>
    dBcSamples[counter] = dBc;
 800706a:	4b78      	ldr	r3, [pc, #480]	@ (800724c <MIC_Print+0x244>)
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	001a      	movs	r2, r3
 8007070:	4b75      	ldr	r3, [pc, #468]	@ (8007248 <MIC_Print+0x240>)
 8007072:	6819      	ldr	r1, [r3, #0]
 8007074:	4b76      	ldr	r3, [pc, #472]	@ (8007250 <MIC_Print+0x248>)
 8007076:	0092      	lsls	r2, r2, #2
 8007078:	50d1      	str	r1, [r2, r3]
    counter += 1;
 800707a:	4b74      	ldr	r3, [pc, #464]	@ (800724c <MIC_Print+0x244>)
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	3301      	adds	r3, #1
 8007080:	b2da      	uxtb	r2, r3
 8007082:	4b72      	ldr	r3, [pc, #456]	@ (800724c <MIC_Print+0x244>)
 8007084:	701a      	strb	r2, [r3, #0]
 8007086:	e013      	b.n	80070b0 <MIC_Print+0xa8>
  }
  else{
    counter = 0;
 8007088:	4b70      	ldr	r3, [pc, #448]	@ (800724c <MIC_Print+0x244>)
 800708a:	2200      	movs	r2, #0
 800708c:	701a      	strb	r2, [r3, #0]
    dBcSamples[counter] = dBc;
 800708e:	4b6f      	ldr	r3, [pc, #444]	@ (800724c <MIC_Print+0x244>)
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	001a      	movs	r2, r3
 8007094:	4b6c      	ldr	r3, [pc, #432]	@ (8007248 <MIC_Print+0x240>)
 8007096:	6819      	ldr	r1, [r3, #0]
 8007098:	4b6d      	ldr	r3, [pc, #436]	@ (8007250 <MIC_Print+0x248>)
 800709a:	0092      	lsls	r2, r2, #2
 800709c:	50d1      	str	r1, [r2, r3]
    counter += 1;
 800709e:	4b6b      	ldr	r3, [pc, #428]	@ (800724c <MIC_Print+0x244>)
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	3301      	adds	r3, #1
 80070a4:	b2da      	uxtb	r2, r3
 80070a6:	4b69      	ldr	r3, [pc, #420]	@ (800724c <MIC_Print+0x244>)
 80070a8:	701a      	strb	r2, [r3, #0]
    averageReached = true;
 80070aa:	4b6a      	ldr	r3, [pc, #424]	@ (8007254 <MIC_Print+0x24c>)
 80070ac:	2201      	movs	r2, #1
 80070ae:	701a      	strb	r2, [r3, #0]
  }
  if(!averageReached){
 80070b0:	4b68      	ldr	r3, [pc, #416]	@ (8007254 <MIC_Print+0x24c>)
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	2201      	movs	r2, #1
 80070b6:	4053      	eors	r3, r2
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d005      	beq.n	80070ca <MIC_Print+0xc2>
    setMic(dBc);
 80070be:	4b62      	ldr	r3, [pc, #392]	@ (8007248 <MIC_Print+0x240>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	1c18      	adds	r0, r3, #0
 80070c4:	f7fc fb2c 	bl	8003720 <setMic>
 80070c8:	e02d      	b.n	8007126 <MIC_Print+0x11e>
  }
  else{
    dBcAverage = 0;
 80070ca:	4b63      	ldr	r3, [pc, #396]	@ (8007258 <MIC_Print+0x250>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++){
 80070d0:	1d7b      	adds	r3, r7, #5
 80070d2:	2200      	movs	r2, #0
 80070d4:	701a      	strb	r2, [r3, #0]
 80070d6:	e013      	b.n	8007100 <MIC_Print+0xf8>
      dBcAverage += dBcSamples[i];
 80070d8:	1d7b      	adds	r3, r7, #5
 80070da:	781a      	ldrb	r2, [r3, #0]
 80070dc:	4b5c      	ldr	r3, [pc, #368]	@ (8007250 <MIC_Print+0x248>)
 80070de:	0092      	lsls	r2, r2, #2
 80070e0:	58d2      	ldr	r2, [r2, r3]
 80070e2:	4b5d      	ldr	r3, [pc, #372]	@ (8007258 <MIC_Print+0x250>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	1c19      	adds	r1, r3, #0
 80070e8:	1c10      	adds	r0, r2, #0
 80070ea:	f7f9 fb67 	bl	80007bc <__aeabi_fadd>
 80070ee:	1c03      	adds	r3, r0, #0
 80070f0:	1c1a      	adds	r2, r3, #0
 80070f2:	4b59      	ldr	r3, [pc, #356]	@ (8007258 <MIC_Print+0x250>)
 80070f4:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<10;i++){
 80070f6:	1d7b      	adds	r3, r7, #5
 80070f8:	781a      	ldrb	r2, [r3, #0]
 80070fa:	1d7b      	adds	r3, r7, #5
 80070fc:	3201      	adds	r2, #1
 80070fe:	701a      	strb	r2, [r3, #0]
 8007100:	1d7b      	adds	r3, r7, #5
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	2b09      	cmp	r3, #9
 8007106:	d9e7      	bls.n	80070d8 <MIC_Print+0xd0>
    }
    dBcAverage = dBcAverage/10;
 8007108:	4b53      	ldr	r3, [pc, #332]	@ (8007258 <MIC_Print+0x250>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4953      	ldr	r1, [pc, #332]	@ (800725c <MIC_Print+0x254>)
 800710e:	1c18      	adds	r0, r3, #0
 8007110:	f7f9 fcde 	bl	8000ad0 <__aeabi_fdiv>
 8007114:	1c03      	adds	r3, r0, #0
 8007116:	1c1a      	adds	r2, r3, #0
 8007118:	4b4f      	ldr	r3, [pc, #316]	@ (8007258 <MIC_Print+0x250>)
 800711a:	601a      	str	r2, [r3, #0]
    setMic(dBcAverage);
 800711c:	4b4e      	ldr	r3, [pc, #312]	@ (8007258 <MIC_Print+0x250>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	1c18      	adds	r0, r3, #0
 8007122:	f7fc fafd 	bl	8003720 <setMic>
  }
  //Currently is set as the individual dBc, should be set to average.
//  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
  if(dBc > 85){ //white
 8007126:	4b48      	ldr	r3, [pc, #288]	@ (8007248 <MIC_Print+0x240>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	494d      	ldr	r1, [pc, #308]	@ (8007260 <MIC_Print+0x258>)
 800712c:	1c18      	adds	r0, r3, #0
 800712e:	f7f9 f9e1 	bl	80004f4 <__aeabi_fcmpgt>
 8007132:	1e03      	subs	r3, r0, #0
 8007134:	d004      	beq.n	8007140 <MIC_Print+0x138>
    SetDBLED(true, true, true);
 8007136:	2201      	movs	r2, #1
 8007138:	2101      	movs	r1, #1
 800713a:	2001      	movs	r0, #1
 800713c:	f001 fdf2 	bl	8008d24 <SetDBLED>
  }
  if(dBc < 85 && dBc >= 80){ //red
 8007140:	4b41      	ldr	r3, [pc, #260]	@ (8007248 <MIC_Print+0x240>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4946      	ldr	r1, [pc, #280]	@ (8007260 <MIC_Print+0x258>)
 8007146:	1c18      	adds	r0, r3, #0
 8007148:	f7f9 f9c0 	bl	80004cc <__aeabi_fcmplt>
 800714c:	1e03      	subs	r3, r0, #0
 800714e:	d00c      	beq.n	800716a <MIC_Print+0x162>
 8007150:	4b3d      	ldr	r3, [pc, #244]	@ (8007248 <MIC_Print+0x240>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4943      	ldr	r1, [pc, #268]	@ (8007264 <MIC_Print+0x25c>)
 8007156:	1c18      	adds	r0, r3, #0
 8007158:	f7f9 f9d6 	bl	8000508 <__aeabi_fcmpge>
 800715c:	1e03      	subs	r3, r0, #0
 800715e:	d004      	beq.n	800716a <MIC_Print+0x162>
    SetDBLED(true, false, false);
 8007160:	2200      	movs	r2, #0
 8007162:	2100      	movs	r1, #0
 8007164:	2001      	movs	r0, #1
 8007166:	f001 fddd 	bl	8008d24 <SetDBLED>
  }
  if(dBc < 80 && dBc >= 75){//purple
 800716a:	4b37      	ldr	r3, [pc, #220]	@ (8007248 <MIC_Print+0x240>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	493d      	ldr	r1, [pc, #244]	@ (8007264 <MIC_Print+0x25c>)
 8007170:	1c18      	adds	r0, r3, #0
 8007172:	f7f9 f9ab 	bl	80004cc <__aeabi_fcmplt>
 8007176:	1e03      	subs	r3, r0, #0
 8007178:	d00c      	beq.n	8007194 <MIC_Print+0x18c>
 800717a:	4b33      	ldr	r3, [pc, #204]	@ (8007248 <MIC_Print+0x240>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	493a      	ldr	r1, [pc, #232]	@ (8007268 <MIC_Print+0x260>)
 8007180:	1c18      	adds	r0, r3, #0
 8007182:	f7f9 f9c1 	bl	8000508 <__aeabi_fcmpge>
 8007186:	1e03      	subs	r3, r0, #0
 8007188:	d004      	beq.n	8007194 <MIC_Print+0x18c>
    SetDBLED(true, false, true);
 800718a:	2201      	movs	r2, #1
 800718c:	2100      	movs	r1, #0
 800718e:	2001      	movs	r0, #1
 8007190:	f001 fdc8 	bl	8008d24 <SetDBLED>
  }
  if(dBc < 75 && dBc >= 70){//yellow
 8007194:	4b2c      	ldr	r3, [pc, #176]	@ (8007248 <MIC_Print+0x240>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4933      	ldr	r1, [pc, #204]	@ (8007268 <MIC_Print+0x260>)
 800719a:	1c18      	adds	r0, r3, #0
 800719c:	f7f9 f996 	bl	80004cc <__aeabi_fcmplt>
 80071a0:	1e03      	subs	r3, r0, #0
 80071a2:	d00c      	beq.n	80071be <MIC_Print+0x1b6>
 80071a4:	4b28      	ldr	r3, [pc, #160]	@ (8007248 <MIC_Print+0x240>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4930      	ldr	r1, [pc, #192]	@ (800726c <MIC_Print+0x264>)
 80071aa:	1c18      	adds	r0, r3, #0
 80071ac:	f7f9 f9ac 	bl	8000508 <__aeabi_fcmpge>
 80071b0:	1e03      	subs	r3, r0, #0
 80071b2:	d004      	beq.n	80071be <MIC_Print+0x1b6>
    SetDBLED(true, true, false);
 80071b4:	2200      	movs	r2, #0
 80071b6:	2101      	movs	r1, #1
 80071b8:	2001      	movs	r0, #1
 80071ba:	f001 fdb3 	bl	8008d24 <SetDBLED>
  }
  if(dBc < 70 && dBc >= 65){//Green
 80071be:	4b22      	ldr	r3, [pc, #136]	@ (8007248 <MIC_Print+0x240>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	492a      	ldr	r1, [pc, #168]	@ (800726c <MIC_Print+0x264>)
 80071c4:	1c18      	adds	r0, r3, #0
 80071c6:	f7f9 f981 	bl	80004cc <__aeabi_fcmplt>
 80071ca:	1e03      	subs	r3, r0, #0
 80071cc:	d00c      	beq.n	80071e8 <MIC_Print+0x1e0>
 80071ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007248 <MIC_Print+0x240>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4927      	ldr	r1, [pc, #156]	@ (8007270 <MIC_Print+0x268>)
 80071d4:	1c18      	adds	r0, r3, #0
 80071d6:	f7f9 f997 	bl	8000508 <__aeabi_fcmpge>
 80071da:	1e03      	subs	r3, r0, #0
 80071dc:	d004      	beq.n	80071e8 <MIC_Print+0x1e0>
    SetDBLED(false, true, false);
 80071de:	2200      	movs	r2, #0
 80071e0:	2101      	movs	r1, #1
 80071e2:	2000      	movs	r0, #0
 80071e4:	f001 fd9e 	bl	8008d24 <SetDBLED>
  }
  if(dBc < 65 && dBc >= 60){//blue
 80071e8:	4b17      	ldr	r3, [pc, #92]	@ (8007248 <MIC_Print+0x240>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4920      	ldr	r1, [pc, #128]	@ (8007270 <MIC_Print+0x268>)
 80071ee:	1c18      	adds	r0, r3, #0
 80071f0:	f7f9 f96c 	bl	80004cc <__aeabi_fcmplt>
 80071f4:	1e03      	subs	r3, r0, #0
 80071f6:	d00c      	beq.n	8007212 <MIC_Print+0x20a>
 80071f8:	4b13      	ldr	r3, [pc, #76]	@ (8007248 <MIC_Print+0x240>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	491d      	ldr	r1, [pc, #116]	@ (8007274 <MIC_Print+0x26c>)
 80071fe:	1c18      	adds	r0, r3, #0
 8007200:	f7f9 f982 	bl	8000508 <__aeabi_fcmpge>
 8007204:	1e03      	subs	r3, r0, #0
 8007206:	d004      	beq.n	8007212 <MIC_Print+0x20a>
    SetDBLED(false, false, true);
 8007208:	2201      	movs	r2, #1
 800720a:	2100      	movs	r1, #0
 800720c:	2000      	movs	r0, #0
 800720e:	f001 fd89 	bl	8008d24 <SetDBLED>
  }
  if(dBc < 60){//light blue
 8007212:	4b0d      	ldr	r3, [pc, #52]	@ (8007248 <MIC_Print+0x240>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4917      	ldr	r1, [pc, #92]	@ (8007274 <MIC_Print+0x26c>)
 8007218:	1c18      	adds	r0, r3, #0
 800721a:	f7f9 f957 	bl	80004cc <__aeabi_fcmplt>
 800721e:	1e03      	subs	r3, r0, #0
 8007220:	d100      	bne.n	8007224 <MIC_Print+0x21c>
    SetDBLED(false, true, true);
  }


  //FFT();
}
 8007222:	e004      	b.n	800722e <MIC_Print+0x226>
    SetDBLED(false, true, true);
 8007224:	2201      	movs	r2, #1
 8007226:	2101      	movs	r1, #1
 8007228:	2000      	movs	r0, #0
 800722a:	f001 fd7b 	bl	8008d24 <SetDBLED>
}
 800722e:	46c0      	nop			@ (mov r8, r8)
 8007230:	46bd      	mov	sp, r7
 8007232:	b003      	add	sp, #12
 8007234:	bd90      	pop	{r4, r7, pc}
 8007236:	46c0      	nop			@ (mov r8, r8)
 8007238:	0801b9ec 	.word	0x0801b9ec
 800723c:	0801b9e8 	.word	0x0801b9e8
 8007240:	20001094 	.word	0x20001094
 8007244:	200020d0 	.word	0x200020d0
 8007248:	2000209c 	.word	0x2000209c
 800724c:	200020cc 	.word	0x200020cc
 8007250:	200020a0 	.word	0x200020a0
 8007254:	200020cd 	.word	0x200020cd
 8007258:	200020c8 	.word	0x200020c8
 800725c:	41200000 	.word	0x41200000
 8007260:	42aa0000 	.word	0x42aa0000
 8007264:	42a00000 	.word	0x42a00000
 8007268:	42960000 	.word	0x42960000
 800726c:	428c0000 	.word	0x428c0000
 8007270:	42820000 	.word	0x42820000
 8007274:	42700000 	.word	0x42700000

08007278 <MIC_MeasurementDone>:

bool MIC_MeasurementDone(void) {
 8007278:	b580      	push	{r7, lr}
 800727a:	af00      	add	r7, sp, #0
  if(DataReady) {
 800727c:	4b0a      	ldr	r3, [pc, #40]	@ (80072a8 <MIC_MeasurementDone+0x30>)
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00c      	beq.n	80072a0 <MIC_MeasurementDone+0x28>
    MIC_Print();
 8007286:	f7ff febf 	bl	8007008 <MIC_Print>
    Debug("MIC measurement is done with %i samples.", Samples);
 800728a:	4b08      	ldr	r3, [pc, #32]	@ (80072ac <MIC_MeasurementDone+0x34>)
 800728c:	881b      	ldrh	r3, [r3, #0]
 800728e:	4a08      	ldr	r2, [pc, #32]	@ (80072b0 <MIC_MeasurementDone+0x38>)
 8007290:	4908      	ldr	r1, [pc, #32]	@ (80072b4 <MIC_MeasurementDone+0x3c>)
 8007292:	2003      	movs	r0, #3
 8007294:	f002 fc4a 	bl	8009b2c <CreateLine>
    ResetMICIndicator();
 8007298:	f001 fe08 	bl	8008eac <ResetMICIndicator>
    return true;
 800729c:	2301      	movs	r3, #1
 800729e:	e000      	b.n	80072a2 <MIC_MeasurementDone+0x2a>
  }
  return false;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	0018      	movs	r0, r3
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	20002099 	.word	0x20002099
 80072ac:	2000002c 	.word	0x2000002c
 80072b0:	0801b9f8 	.word	0x0801b9f8
 80072b4:	0801b9d8 	.word	0x0801b9d8

080072b8 <MIC_TestMeasurementDone>:
bool MIC_TestMeasurementDone(void) {
 80072b8:	b590      	push	{r4, r7, lr}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
  bool Check;
  if(DataReady) {
 80072be:	4b0a      	ldr	r3, [pc, #40]	@ (80072e8 <MIC_TestMeasurementDone+0x30>)
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d009      	beq.n	80072dc <MIC_TestMeasurementDone+0x24>
    Check = MIC_Check();
 80072c8:	1dfc      	adds	r4, r7, #7
 80072ca:	f7ff fe47 	bl	8006f5c <MIC_Check>
 80072ce:	0003      	movs	r3, r0
 80072d0:	7023      	strb	r3, [r4, #0]
    ResetMICIndicator();
 80072d2:	f001 fdeb 	bl	8008eac <ResetMICIndicator>
    return Check;
 80072d6:	1dfb      	adds	r3, r7, #7
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	e000      	b.n	80072de <MIC_TestMeasurementDone+0x26>
  }
  return false;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	0018      	movs	r0, r3
 80072e0:	46bd      	mov	sp, r7
 80072e2:	b003      	add	sp, #12
 80072e4:	bd90      	pop	{r4, r7, pc}
 80072e6:	46c0      	nop			@ (mov r8, r8)
 80072e8:	20002099 	.word	0x20002099

080072ec <HAL_I2S_RxCpltCallback>:


// #TODO Also include half full callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef* hi2s) {
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  if (hi2s != I2SHandle)
 80072f4:	4b10      	ldr	r3, [pc, #64]	@ (8007338 <HAL_I2S_RxCpltCallback+0x4c>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d118      	bne.n	8007330 <HAL_I2S_RxCpltCallback+0x44>
    return;

  if (StartUpDone) {
 80072fe:	4b0f      	ldr	r3, [pc, #60]	@ (800733c <HAL_I2S_RxCpltCallback+0x50>)
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b00      	cmp	r3, #0
 8007306:	d008      	beq.n	800731a <HAL_I2S_RxCpltCallback+0x2e>
    HAL_I2S_DMAStop(I2SHandle);
 8007308:	4b0b      	ldr	r3, [pc, #44]	@ (8007338 <HAL_I2S_RxCpltCallback+0x4c>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	0018      	movs	r0, r3
 800730e:	f006 fd3f 	bl	800dd90 <HAL_I2S_DMAStop>
    DataReady = true;
 8007312:	4b0b      	ldr	r3, [pc, #44]	@ (8007340 <HAL_I2S_RxCpltCallback+0x54>)
 8007314:	2201      	movs	r2, #1
 8007316:	701a      	strb	r2, [r3, #0]
 8007318:	e00b      	b.n	8007332 <HAL_I2S_RxCpltCallback+0x46>
    // MIC trigger pin is used to debug when the measurement has started.
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
    // TODO: Use different pin for MIC_Trigger.
  } else if (TimestampIsReached(StartupDoneTime)) {
 800731a:	4b0a      	ldr	r3, [pc, #40]	@ (8007344 <HAL_I2S_RxCpltCallback+0x58>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	0018      	movs	r0, r3
 8007320:	f002 fbae 	bl	8009a80 <TimestampIsReached>
 8007324:	1e03      	subs	r3, r0, #0
 8007326:	d004      	beq.n	8007332 <HAL_I2S_RxCpltCallback+0x46>
    StartUpDone = true;
 8007328:	4b04      	ldr	r3, [pc, #16]	@ (800733c <HAL_I2S_RxCpltCallback+0x50>)
 800732a:	2201      	movs	r2, #1
 800732c:	701a      	strb	r2, [r3, #0]
 800732e:	e000      	b.n	8007332 <HAL_I2S_RxCpltCallback+0x46>
    return;
 8007330:	46c0      	nop			@ (mov r8, r8)
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_SET);
  }
}
 8007332:	46bd      	mov	sp, r7
 8007334:	b002      	add	sp, #8
 8007336:	bd80      	pop	{r7, pc}
 8007338:	20001090 	.word	0x20001090
 800733c:	20002098 	.word	0x20002098
 8007340:	20002099 	.word	0x20002099
 8007344:	20002094 	.word	0x20002094

08007348 <MIC_GetDB>:

float MIC_GetDB(void) {
 8007348:	b590      	push	{r4, r7, lr}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
    float sum = 0.0f;
 800734e:	2300      	movs	r3, #0
 8007350:	60fb      	str	r3, [r7, #12]
    float dBValue = 0.0f;
 8007352:	2300      	movs	r3, #0
 8007354:	607b      	str	r3, [r7, #4]

    // Calculate the sum of the magnitudes in FFTResult
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 8007356:	230a      	movs	r3, #10
 8007358:	18fb      	adds	r3, r7, r3
 800735a:	2280      	movs	r2, #128	@ 0x80
 800735c:	0052      	lsls	r2, r2, #1
 800735e:	801a      	strh	r2, [r3, #0]
 8007360:	e019      	b.n	8007396 <MIC_GetDB+0x4e>
      // Sum of squares of magnitudes
      sum += sample[i]*sample[i];
 8007362:	240a      	movs	r4, #10
 8007364:	193b      	adds	r3, r7, r4
 8007366:	881a      	ldrh	r2, [r3, #0]
 8007368:	4b2b      	ldr	r3, [pc, #172]	@ (8007418 <MIC_GetDB+0xd0>)
 800736a:	0092      	lsls	r2, r2, #2
 800736c:	58d0      	ldr	r0, [r2, r3]
 800736e:	193b      	adds	r3, r7, r4
 8007370:	881a      	ldrh	r2, [r3, #0]
 8007372:	4b29      	ldr	r3, [pc, #164]	@ (8007418 <MIC_GetDB+0xd0>)
 8007374:	0092      	lsls	r2, r2, #2
 8007376:	58d3      	ldr	r3, [r2, r3]
 8007378:	1c19      	adds	r1, r3, #0
 800737a:	f7f9 fd8f 	bl	8000e9c <__aeabi_fmul>
 800737e:	1c03      	adds	r3, r0, #0
 8007380:	1c19      	adds	r1, r3, #0
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f7f9 fa1a 	bl	80007bc <__aeabi_fadd>
 8007388:	1c03      	adds	r3, r0, #0
 800738a:	60fb      	str	r3, [r7, #12]
    for (uint16_t i = NUMBER_OF_SAMPLES/2; i < NUMBER_OF_SAMPLES; i++) {
 800738c:	193b      	adds	r3, r7, r4
 800738e:	881a      	ldrh	r2, [r3, #0]
 8007390:	193b      	adds	r3, r7, r4
 8007392:	3201      	adds	r2, #1
 8007394:	801a      	strh	r2, [r3, #0]
 8007396:	230a      	movs	r3, #10
 8007398:	18fb      	adds	r3, r7, r3
 800739a:	881a      	ldrh	r2, [r3, #0]
 800739c:	2380      	movs	r3, #128	@ 0x80
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d3de      	bcc.n	8007362 <MIC_GetDB+0x1a>
    }

    // Calculate the root mean square (RMS)
    float rms = sqrt(sum/(float)(NUMBER_OF_SAMPLES/2));
 80073a4:	2187      	movs	r1, #135	@ 0x87
 80073a6:	05c9      	lsls	r1, r1, #23
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f7f9 fb91 	bl	8000ad0 <__aeabi_fdiv>
 80073ae:	1c03      	adds	r3, r0, #0
 80073b0:	1c18      	adds	r0, r3, #0
 80073b2:	f7fb ffd5 	bl	8003360 <__aeabi_f2d>
 80073b6:	0002      	movs	r2, r0
 80073b8:	000b      	movs	r3, r1
 80073ba:	0010      	movs	r0, r2
 80073bc:	0019      	movs	r1, r3
 80073be:	f013 fa57 	bl	801a870 <sqrt>
 80073c2:	0002      	movs	r2, r0
 80073c4:	000b      	movs	r3, r1
 80073c6:	0010      	movs	r0, r2
 80073c8:	0019      	movs	r1, r3
 80073ca:	f7fc f811 	bl	80033f0 <__aeabi_d2f>
 80073ce:	1c03      	adds	r3, r0, #0
 80073d0:	603b      	str	r3, [r7, #0]

    // Convert the RMS value to dB
    dBValue = 20.0f * log10(rms) +120.0;
 80073d2:	6838      	ldr	r0, [r7, #0]
 80073d4:	f7fb ffc4 	bl	8003360 <__aeabi_f2d>
 80073d8:	0002      	movs	r2, r0
 80073da:	000b      	movs	r3, r1
 80073dc:	0010      	movs	r0, r2
 80073de:	0019      	movs	r1, r3
 80073e0:	f013 fa10 	bl	801a804 <log10>
 80073e4:	2200      	movs	r2, #0
 80073e6:	4b0d      	ldr	r3, [pc, #52]	@ (800741c <MIC_GetDB+0xd4>)
 80073e8:	f7fb f8a6 	bl	8002538 <__aeabi_dmul>
 80073ec:	0002      	movs	r2, r0
 80073ee:	000b      	movs	r3, r1
 80073f0:	0010      	movs	r0, r2
 80073f2:	0019      	movs	r1, r3
 80073f4:	2200      	movs	r2, #0
 80073f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007420 <MIC_GetDB+0xd8>)
 80073f8:	f7fa f8f6 	bl	80015e8 <__aeabi_dadd>
 80073fc:	0002      	movs	r2, r0
 80073fe:	000b      	movs	r3, r1
 8007400:	0010      	movs	r0, r2
 8007402:	0019      	movs	r1, r3
 8007404:	f7fb fff4 	bl	80033f0 <__aeabi_d2f>
 8007408:	1c03      	adds	r3, r0, #0
 800740a:	607b      	str	r3, [r7, #4]

    return dBValue;
 800740c:	687b      	ldr	r3, [r7, #4]
}
 800740e:	1c18      	adds	r0, r3, #0
 8007410:	46bd      	mov	sp, r7
 8007412:	b005      	add	sp, #20
 8007414:	bd90      	pop	{r4, r7, pc}
 8007416:	46c0      	nop			@ (mov r8, r8)
 8007418:	200020d0 	.word	0x200020d0
 800741c:	40340000 	.word	0x40340000
 8007420:	405e0000 	.word	0x405e0000

08007424 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8007428:	4b16      	ldr	r3, [pc, #88]	@ (8007484 <MX_RTC_Init+0x60>)
 800742a:	4a17      	ldr	r2, [pc, #92]	@ (8007488 <MX_RTC_Init+0x64>)
 800742c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800742e:	4b15      	ldr	r3, [pc, #84]	@ (8007484 <MX_RTC_Init+0x60>)
 8007430:	2200      	movs	r2, #0
 8007432:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007434:	4b13      	ldr	r3, [pc, #76]	@ (8007484 <MX_RTC_Init+0x60>)
 8007436:	227f      	movs	r2, #127	@ 0x7f
 8007438:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800743a:	4b12      	ldr	r3, [pc, #72]	@ (8007484 <MX_RTC_Init+0x60>)
 800743c:	22ff      	movs	r2, #255	@ 0xff
 800743e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007440:	4b10      	ldr	r3, [pc, #64]	@ (8007484 <MX_RTC_Init+0x60>)
 8007442:	2200      	movs	r2, #0
 8007444:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8007446:	4b0f      	ldr	r3, [pc, #60]	@ (8007484 <MX_RTC_Init+0x60>)
 8007448:	2200      	movs	r2, #0
 800744a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800744c:	4b0d      	ldr	r3, [pc, #52]	@ (8007484 <MX_RTC_Init+0x60>)
 800744e:	2200      	movs	r2, #0
 8007450:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007452:	4b0c      	ldr	r3, [pc, #48]	@ (8007484 <MX_RTC_Init+0x60>)
 8007454:	2200      	movs	r2, #0
 8007456:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007458:	4b0a      	ldr	r3, [pc, #40]	@ (8007484 <MX_RTC_Init+0x60>)
 800745a:	0018      	movs	r0, r3
 800745c:	f009 fbba 	bl	8010bd4 <HAL_RTC_Init>
 8007460:	1e03      	subs	r3, r0, #0
 8007462:	d001      	beq.n	8007468 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8007464:	f7ff f8be 	bl	80065e4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8007468:	4b06      	ldr	r3, [pc, #24]	@ (8007484 <MX_RTC_Init+0x60>)
 800746a:	2200      	movs	r2, #0
 800746c:	2100      	movs	r1, #0
 800746e:	0018      	movs	r0, r3
 8007470:	f009 fdae 	bl	8010fd0 <HAL_RTCEx_SetWakeUpTimer>
 8007474:	1e03      	subs	r3, r0, #0
 8007476:	d001      	beq.n	800747c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8007478:	f7ff f8b4 	bl	80065e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800747c:	46c0      	nop			@ (mov r8, r8)
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	46c0      	nop			@ (mov r8, r8)
 8007484:	200028d0 	.word	0x200028d0
 8007488:	40002800 	.word	0x40002800

0800748c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a06      	ldr	r2, [pc, #24]	@ (80074b4 <HAL_RTC_MspInit+0x28>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d106      	bne.n	80074ac <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800749e:	4b06      	ldr	r3, [pc, #24]	@ (80074b8 <HAL_RTC_MspInit+0x2c>)
 80074a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80074a2:	4b05      	ldr	r3, [pc, #20]	@ (80074b8 <HAL_RTC_MspInit+0x2c>)
 80074a4:	2180      	movs	r1, #128	@ 0x80
 80074a6:	02c9      	lsls	r1, r1, #11
 80074a8:	430a      	orrs	r2, r1
 80074aa:	651a      	str	r2, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80074ac:	46c0      	nop			@ (mov r8, r8)
 80074ae:	46bd      	mov	sp, r7
 80074b0:	b002      	add	sp, #8
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	40002800 	.word	0x40002800
 80074b8:	40021000 	.word	0x40021000

080074bc <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d113      	bne.n	8007502 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	22fe      	movs	r2, #254	@ 0xfe
 80074de:	0592      	lsls	r2, r2, #22
 80074e0:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	4a1a      	ldr	r2, [pc, #104]	@ (8007550 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 80074e6:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	4a1a      	ldr	r2, [pc, #104]	@ (8007554 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 80074ec:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	4a19      	ldr	r2, [pc, #100]	@ (8007558 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 80074f2:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	4a19      	ldr	r2, [pc, #100]	@ (800755c <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 80074f8:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	4a18      	ldr	r2, [pc, #96]	@ (8007560 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 80074fe:	61da      	str	r2, [r3, #28]
 8007500:	e011      	b.n	8007526 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	4a17      	ldr	r2, [pc, #92]	@ (8007564 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8007506:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	4a17      	ldr	r2, [pc, #92]	@ (8007568 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 800750c:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	4a16      	ldr	r2, [pc, #88]	@ (800756c <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 8007512:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	4a16      	ldr	r2, [pc, #88]	@ (8007570 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8007518:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	4a15      	ldr	r2, [pc, #84]	@ (8007574 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800751e:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	4a15      	ldr	r2, [pc, #84]	@ (8007578 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8007524:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	4a14      	ldr	r2, [pc, #80]	@ (800757c <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800752a:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	4a14      	ldr	r2, [pc, #80]	@ (8007580 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8007530:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	4a12      	ldr	r2, [pc, #72]	@ (8007580 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8007536:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4a12      	ldr	r2, [pc, #72]	@ (8007584 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 800753c:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	0018      	movs	r0, r3
 8007542:	f000 f831 	bl	80075a8 <GasIndexAlgorithm_reset>
}
 8007546:	46c0      	nop			@ (mov r8, r8)
 8007548:	46bd      	mov	sp, r7
 800754a:	b004      	add	sp, #16
 800754c:	bd80      	pop	{r7, pc}
 800754e:	46c0      	nop			@ (mov r8, r8)
 8007550:	00002710 	.word	0x00002710
 8007554:	44340000 	.word	0x44340000
 8007558:	46859800 	.word	0x46859800
 800755c:	46a05000 	.word	0x46a05000
 8007560:	41f00000 	.word	0x41f00000
 8007564:	42c80000 	.word	0x42c80000
 8007568:	00004e20 	.word	0x00004e20
 800756c:	43340000 	.word	0x43340000
 8007570:	4528c000 	.word	0x4528c000
 8007574:	45a32000 	.word	0x45a32000
 8007578:	43aa0000 	.word	0x43aa0000
 800757c:	43660000 	.word	0x43660000
 8007580:	41400000 	.word	0x41400000
 8007584:	42480000 	.word	0x42480000

08007588 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 8007592:	22fe      	movs	r2, #254	@ 0xfe
 8007594:	0592      	lsls	r2, r2, #22
 8007596:	6839      	ldr	r1, [r7, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	0018      	movs	r0, r3
 800759c:	f7ff ff8e 	bl	80074bc <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 80075a0:	46c0      	nop			@ (mov r8, r8)
 80075a2:	46bd      	mov	sp, r7
 80075a4:	b002      	add	sp, #8
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	0018      	movs	r0, r3
 80075c6:	f000 f805 	bl	80075d4 <GasIndexAlgorithm__init_instances>
}
 80075ca:	46c0      	nop			@ (mov r8, r8)
 80075cc:	46bd      	mov	sp, r7
 80075ce:	b002      	add	sp, #8
 80075d0:	bd80      	pop	{r7, pc}
	...

080075d4 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 80075d4:	b590      	push	{r4, r7, lr}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	0018      	movs	r0, r3
 80075e0:	f000 f8e8 	bl	80077b4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	0018      	movs	r0, r3
 80075e8:	f000 f9a6 	bl	8007938 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 80075ec:	1c04      	adds	r4, r0, #0
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	0018      	movs	r0, r3
 80075f2:	f000 f9ab 	bl	800794c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 80075f6:	1c02      	adds	r2, r0, #0
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	1c21      	adds	r1, r4, #0
 80075fc:	0018      	movs	r0, r3
 80075fe:	f000 fc3b 	bl	8007e78 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d107      	bne.n	800761a <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800760a:	23fe      	movs	r3, #254	@ 0xfe
 800760c:	059b      	lsls	r3, r3, #22
 800760e:	4a0a      	ldr	r2, [pc, #40]	@ (8007638 <GasIndexAlgorithm__init_instances+0x64>)
 8007610:	490a      	ldr	r1, [pc, #40]	@ (800763c <GasIndexAlgorithm__init_instances+0x68>)
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fc86 	bl	8007f24 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 8007618:	e005      	b.n	8007626 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 800761a:	4b09      	ldr	r3, [pc, #36]	@ (8007640 <GasIndexAlgorithm__init_instances+0x6c>)
 800761c:	4a09      	ldr	r2, [pc, #36]	@ (8007644 <GasIndexAlgorithm__init_instances+0x70>)
 800761e:	490a      	ldr	r1, [pc, #40]	@ (8007648 <GasIndexAlgorithm__init_instances+0x74>)
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fc7f 	bl	8007f24 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	0018      	movs	r0, r3
 800762a:	f000 fd35 	bl	8008098 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800762e:	46c0      	nop			@ (mov r8, r8)
 8007630:	46bd      	mov	sp, r7
 8007632:	b003      	add	sp, #12
 8007634:	bd90      	pop	{r4, r7, pc}
 8007636:	46c0      	nop			@ (mov r8, r8)
 8007638:	bc257a78 	.word	0xbc257a78
 800763c:	44198000 	.word	0x44198000
 8007640:	42c80000 	.word	0x42c80000
 8007644:	bbd4fdf4 	.word	0xbbd4fdf4
 8007648:	43550000 	.word	0x43550000

0800764c <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 800764c:	b590      	push	{r4, r7, lr}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800765c:	4952      	ldr	r1, [pc, #328]	@ (80077a8 <GasIndexAlgorithm_process+0x15c>)
 800765e:	1c18      	adds	r0, r3, #0
 8007660:	f7f8 ff3e 	bl	80004e0 <__aeabi_fcmple>
 8007664:	1e03      	subs	r3, r0, #0
 8007666:	d00c      	beq.n	8007682 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	1c19      	adds	r1, r3, #0
 8007672:	1c10      	adds	r0, r2, #0
 8007674:	f7f9 f8a2 	bl	80007bc <__aeabi_fadd>
 8007678:	1c03      	adds	r3, r0, #0
 800767a:	1c1a      	adds	r2, r3, #0
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007680:	e080      	b.n	8007784 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2b00      	cmp	r3, #0
 8007686:	dd25      	ble.n	80076d4 <GasIndexAlgorithm_process+0x88>
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	4a48      	ldr	r2, [pc, #288]	@ (80077ac <GasIndexAlgorithm_process+0x160>)
 800768c:	4293      	cmp	r3, r2
 800768e:	dc21      	bgt.n	80076d4 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	429a      	cmp	r2, r3
 8007698:	dc04      	bgt.n	80076a4 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	3301      	adds	r3, #1
 80076a0:	60bb      	str	r3, [r7, #8]
 80076a2:	e00d      	b.n	80076c0 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	4a41      	ldr	r2, [pc, #260]	@ (80077b0 <GasIndexAlgorithm_process+0x164>)
 80076aa:	4694      	mov	ip, r2
 80076ac:	4463      	add	r3, ip
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	dd05      	ble.n	80076c0 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	4a3d      	ldr	r2, [pc, #244]	@ (80077b0 <GasIndexAlgorithm_process+0x164>)
 80076ba:	4694      	mov	ip, r2
 80076bc:	4463      	add	r3, ip
 80076be:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	0018      	movs	r0, r3
 80076ca:	f7f9 feff 	bl	80014cc <__aeabi_i2f>
 80076ce:	1c02      	adds	r2, r0, #0
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d005      	beq.n	80076e8 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	0018      	movs	r0, r3
 80076e0:	f000 f945 	bl	800796e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 80076e4:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 80076e6:	d014      	beq.n	8007712 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	1c11      	adds	r1, r2, #0
 80076f0:	0018      	movs	r0, r3
 80076f2:	f000 fbd1 	bl	8007e98 <GasIndexAlgorithm__mox_model__process>
 80076f6:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	1c11      	adds	r1, r2, #0
 8007704:	0018      	movs	r0, r3
 8007706:	f000 fc25 	bl	8007f54 <GasIndexAlgorithm__sigmoid_scaled__process>
 800770a:	1c02      	adds	r2, r0, #0
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007710:	e003      	b.n	800771a <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	689a      	ldr	r2, [r3, #8]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	1c11      	adds	r1, r2, #0
 8007722:	0018      	movs	r0, r3
 8007724:	f000 fcec 	bl	8008100 <GasIndexAlgorithm__adaptive_lowpass__process>
 8007728:	1c02      	adds	r2, r0, #0
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007732:	21fc      	movs	r1, #252	@ 0xfc
 8007734:	0589      	lsls	r1, r1, #22
 8007736:	1c18      	adds	r0, r3, #0
 8007738:	f7f8 fec8 	bl	80004cc <__aeabi_fcmplt>
 800773c:	1e03      	subs	r3, r0, #0
 800773e:	d003      	beq.n	8007748 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	22fc      	movs	r2, #252	@ 0xfc
 8007744:	0592      	lsls	r2, r2, #22
 8007746:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800774c:	2100      	movs	r1, #0
 800774e:	1c18      	adds	r0, r3, #0
 8007750:	f7f8 fed0 	bl	80004f4 <__aeabi_fcmpgt>
 8007754:	1e03      	subs	r3, r0, #0
 8007756:	d015      	beq.n	8007784 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	1c11      	adds	r1, r2, #0
 8007760:	0018      	movs	r0, r3
 8007762:	f000 fa4f 	bl	8007c04 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	0018      	movs	r0, r3
 800776a:	f000 f8e5 	bl	8007938 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800776e:	1c04      	adds	r4, r0, #0
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	0018      	movs	r0, r3
 8007774:	f000 f8ea 	bl	800794c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8007778:	1c02      	adds	r2, r0, #0
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	1c21      	adds	r1, r4, #0
 800777e:	0018      	movs	r0, r3
 8007780:	f000 fb7a 	bl	8007e78 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007788:	21fc      	movs	r1, #252	@ 0xfc
 800778a:	0589      	lsls	r1, r1, #22
 800778c:	1c18      	adds	r0, r3, #0
 800778e:	f7f9 f815 	bl	80007bc <__aeabi_fadd>
 8007792:	1c03      	adds	r3, r0, #0
 8007794:	1c18      	adds	r0, r3, #0
 8007796:	f7f9 fe79 	bl	800148c <__aeabi_f2iz>
 800779a:	0002      	movs	r2, r0
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	601a      	str	r2, [r3, #0]
    return;
 80077a0:	46c0      	nop			@ (mov r8, r8)
}
 80077a2:	46bd      	mov	sp, r7
 80077a4:	b005      	add	sp, #20
 80077a6:	bd90      	pop	{r4, r7, pc}
 80077a8:	42340000 	.word	0x42340000
 80077ac:	0000fde7 	.word	0x0000fde7
 80077b0:	00007fff 	.word	0x00007fff

080077b4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 80077b4:	b5b0      	push	{r4, r5, r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	223c      	movs	r2, #60	@ 0x3c
 80077c0:	2100      	movs	r1, #0
 80077c2:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	4952      	ldr	r1, [pc, #328]	@ (8007928 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80077de:	1c18      	adds	r0, r3, #0
 80077e0:	f7f9 f976 	bl	8000ad0 <__aeabi_fdiv>
 80077e4:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80077e6:	2188      	movs	r1, #136	@ 0x88
 80077e8:	05c9      	lsls	r1, r1, #23
 80077ea:	1c18      	adds	r0, r3, #0
 80077ec:	f7f9 fb56 	bl	8000e9c <__aeabi_fmul>
 80077f0:	1c03      	adds	r3, r0, #0
 80077f2:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	494a      	ldr	r1, [pc, #296]	@ (8007928 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80077fe:	1c18      	adds	r0, r3, #0
 8007800:	f7f9 f966 	bl	8000ad0 <__aeabi_fdiv>
 8007804:	1c03      	adds	r3, r0, #0
 8007806:	1c19      	adds	r1, r3, #0
 8007808:	1c20      	adds	r0, r4, #0
 800780a:	f7f8 ffd7 	bl	80007bc <__aeabi_fadd>
 800780e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8007810:	1c19      	adds	r1, r3, #0
 8007812:	1c28      	adds	r0, r5, #0
 8007814:	f7f9 f95c 	bl	8000ad0 <__aeabi_fdiv>
 8007818:	1c03      	adds	r3, r0, #0
 800781a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	4940      	ldr	r1, [pc, #256]	@ (8007928 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8007826:	1c18      	adds	r0, r3, #0
 8007828:	f7f9 f952 	bl	8000ad0 <__aeabi_fdiv>
 800782c:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800782e:	2185      	movs	r1, #133	@ 0x85
 8007830:	05c9      	lsls	r1, r1, #23
 8007832:	1c18      	adds	r0, r3, #0
 8007834:	f7f9 fb32 	bl	8000e9c <__aeabi_fmul>
 8007838:	1c03      	adds	r3, r0, #0
 800783a:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	4938      	ldr	r1, [pc, #224]	@ (8007928 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8007846:	1c18      	adds	r0, r3, #0
 8007848:	f7f9 f942 	bl	8000ad0 <__aeabi_fdiv>
 800784c:	1c03      	adds	r3, r0, #0
 800784e:	1c19      	adds	r1, r3, #0
 8007850:	1c20      	adds	r0, r4, #0
 8007852:	f7f8 ffb3 	bl	80007bc <__aeabi_fadd>
 8007856:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8007858:	1c19      	adds	r1, r3, #0
 800785a:	1c28      	adds	r0, r5, #0
 800785c:	f7f9 f938 	bl	8000ad0 <__aeabi_fdiv>
 8007860:	1c03      	adds	r3, r0, #0
 8007862:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d118      	bne.n	80078a2 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8007874:	2188      	movs	r1, #136	@ 0x88
 8007876:	05c9      	lsls	r1, r1, #23
 8007878:	1c18      	adds	r0, r3, #0
 800787a:	f7f9 fb0f 	bl	8000e9c <__aeabi_fmul>
 800787e:	1c03      	adds	r3, r0, #0
 8007880:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 8007886:	4929      	ldr	r1, [pc, #164]	@ (800792c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8007888:	1c18      	adds	r0, r3, #0
 800788a:	f7f8 ff97 	bl	80007bc <__aeabi_fadd>
 800788e:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8007890:	1c19      	adds	r1, r3, #0
 8007892:	1c20      	adds	r0, r4, #0
 8007894:	f7f9 f91c 	bl	8000ad0 <__aeabi_fdiv>
 8007898:	1c03      	adds	r3, r0, #0
 800789a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	655a      	str	r2, [r3, #84]	@ 0x54
 80078a0:	e017      	b.n	80078d2 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80078a6:	2188      	movs	r1, #136	@ 0x88
 80078a8:	05c9      	lsls	r1, r1, #23
 80078aa:	1c18      	adds	r0, r3, #0
 80078ac:	f7f9 faf6 	bl	8000e9c <__aeabi_fmul>
 80078b0:	1c03      	adds	r3, r0, #0
 80078b2:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 80078b8:	491d      	ldr	r1, [pc, #116]	@ (8007930 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 80078ba:	1c18      	adds	r0, r3, #0
 80078bc:	f7f8 ff7e 	bl	80007bc <__aeabi_fadd>
 80078c0:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 80078c2:	1c19      	adds	r1, r3, #0
 80078c4:	1c20      	adds	r0, r4, #0
 80078c6:	f7f9 f903 	bl	8000ad0 <__aeabi_fdiv>
 80078ca:	1c03      	adds	r3, r0, #0
 80078cc:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80078d6:	2185      	movs	r1, #133	@ 0x85
 80078d8:	05c9      	lsls	r1, r1, #23
 80078da:	1c18      	adds	r0, r3, #0
 80078dc:	f7f9 fade 	bl	8000e9c <__aeabi_fmul>
 80078e0:	1c03      	adds	r3, r0, #0
 80078e2:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	4912      	ldr	r1, [pc, #72]	@ (8007934 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 80078ea:	1c18      	adds	r0, r3, #0
 80078ec:	f7f8 ff66 	bl	80007bc <__aeabi_fadd>
 80078f0:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 80078f2:	1c19      	adds	r1, r3, #0
 80078f4:	1c20      	adds	r0, r4, #0
 80078f6:	f7f9 f8eb 	bl	8000ad0 <__aeabi_fdiv>
 80078fa:	1c03      	adds	r3, r0, #0
 80078fc:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8007920:	46c0      	nop			@ (mov r8, r8)
 8007922:	46bd      	mov	sp, r7
 8007924:	b002      	add	sp, #8
 8007926:	bdb0      	pop	{r4, r5, r7, pc}
 8007928:	45610000 	.word	0x45610000
 800792c:	44960000 	.word	0x44960000
 8007930:	41a00000 	.word	0x41a00000
 8007934:	451c4000 	.word	0x451c4000

08007938 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8007944:	1c18      	adds	r0, r3, #0
 8007946:	46bd      	mov	sp, r7
 8007948:	b002      	add	sp, #8
 800794a:	bd80      	pop	{r7, pc}

0800794c <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800795c:	1c19      	adds	r1, r3, #0
 800795e:	1c10      	adds	r0, r2, #0
 8007960:	f7f8 ff2c 	bl	80007bc <__aeabi_fadd>
 8007964:	1c03      	adds	r3, r0, #0
}
 8007966:	1c18      	adds	r0, r3, #0
 8007968:	46bd      	mov	sp, r7
 800796a:	b002      	add	sp, #8
 800796c:	bd80      	pop	{r7, pc}

0800796e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800796e:	b580      	push	{r7, lr}
 8007970:	b082      	sub	sp, #8
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	223c      	movs	r2, #60	@ 0x3c
 800797a:	5c9b      	ldrb	r3, [r3, r2]
}
 800797c:	0018      	movs	r0, r3
 800797e:	46bd      	mov	sp, r7
 8007980:	b002      	add	sp, #8
 8007982:	bd80      	pop	{r7, pc}

08007984 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8007984:	b5b0      	push	{r4, r5, r7, lr}
 8007986:	b08c      	sub	sp, #48	@ 0x30
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8007990:	1c19      	adds	r1, r3, #0
 8007992:	4895      	ldr	r0, [pc, #596]	@ (8007be8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8007994:	f7f9 fbc0 	bl	8001118 <__aeabi_fsub>
 8007998:	1c03      	adds	r3, r0, #0
 800799a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079a0:	1c19      	adds	r1, r3, #0
 80079a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079a4:	f7f8 fda6 	bl	80004f4 <__aeabi_fcmpgt>
 80079a8:	1e03      	subs	r3, r0, #0
 80079aa:	d00b      	beq.n	80079c4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80079b4:	1c19      	adds	r1, r3, #0
 80079b6:	1c10      	adds	r0, r2, #0
 80079b8:	f7f8 ff00 	bl	80007bc <__aeabi_fadd>
 80079bc:	1c03      	adds	r3, r0, #0
 80079be:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80079c8:	1c19      	adds	r1, r3, #0
 80079ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80079cc:	f7f8 fd92 	bl	80004f4 <__aeabi_fcmpgt>
 80079d0:	1e03      	subs	r3, r0, #0
 80079d2:	d00b      	beq.n	80079ec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80079dc:	1c19      	adds	r1, r3, #0
 80079de:	1c10      	adds	r0, r2, #0
 80079e0:	f7f8 feec 	bl	80007bc <__aeabi_fadd>
 80079e4:	1c03      	adds	r3, r0, #0
 80079e6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6959      	ldr	r1, [r3, #20]
 80079f0:	4a7e      	ldr	r2, [pc, #504]	@ (8007bec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	0018      	movs	r0, r3
 80079f6:	f000 f9f1 	bl	8007ddc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	1c11      	adds	r1, r2, #0
 8007a02:	0018      	movs	r0, r3
 8007a04:	f000 f9fa 	bl	8007dfc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007a08:	1c03      	adds	r3, r0, #0
 8007a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8007a18:	1c19      	adds	r1, r3, #0
 8007a1a:	1c10      	adds	r0, r2, #0
 8007a1c:	f7f9 fb7c 	bl	8001118 <__aeabi_fsub>
 8007a20:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8007a22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a24:	1c18      	adds	r0, r3, #0
 8007a26:	f7f9 fa39 	bl	8000e9c <__aeabi_fmul>
 8007a2a:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8007a2c:	1c19      	adds	r1, r3, #0
 8007a2e:	1c20      	adds	r0, r4, #0
 8007a30:	f7f8 fec4 	bl	80007bc <__aeabi_fadd>
 8007a34:	1c03      	adds	r3, r0, #0
 8007a36:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8007a40:	1c19      	adds	r1, r3, #0
 8007a42:	486b      	ldr	r0, [pc, #428]	@ (8007bf0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8007a44:	f7f9 fb68 	bl	8001118 <__aeabi_fsub>
 8007a48:	1c03      	adds	r3, r0, #0
 8007a4a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	1c11      	adds	r1, r2, #0
 8007a54:	0018      	movs	r0, r3
 8007a56:	f000 f9d1 	bl	8007dfc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007a5a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8007a5c:	1c19      	adds	r1, r3, #0
 8007a5e:	1c28      	adds	r0, r5, #0
 8007a60:	f7f9 fa1c 	bl	8000e9c <__aeabi_fmul>
 8007a64:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8007a66:	1c19      	adds	r1, r3, #0
 8007a68:	1c20      	adds	r0, r4, #0
 8007a6a:	f7f8 fea7 	bl	80007bc <__aeabi_fadd>
 8007a6e:	1c03      	adds	r3, r0, #0
 8007a70:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007a72:	4a60      	ldr	r2, [pc, #384]	@ (8007bf4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8007a74:	6a39      	ldr	r1, [r7, #32]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	0018      	movs	r0, r3
 8007a7a:	f000 f9af 	bl	8007ddc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	1c11      	adds	r1, r2, #0
 8007a86:	0018      	movs	r0, r3
 8007a88:	f000 f9b8 	bl	8007dfc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007a8c:	1c03      	adds	r3, r0, #0
 8007a8e:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8007a90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007a92:	69f8      	ldr	r0, [r7, #28]
 8007a94:	f7f9 fa02 	bl	8000e9c <__aeabi_fmul>
 8007a98:	1c03      	adds	r3, r0, #0
 8007a9a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6999      	ldr	r1, [r3, #24]
 8007aa4:	4a51      	ldr	r2, [pc, #324]	@ (8007bec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	0018      	movs	r0, r3
 8007aaa:	f000 f997 	bl	8007ddc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	1c11      	adds	r1, r2, #0
 8007ab6:	0018      	movs	r0, r3
 8007ab8:	f000 f9a0 	bl	8007dfc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007abc:	1c03      	adds	r3, r0, #0
 8007abe:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8007acc:	1c19      	adds	r1, r3, #0
 8007ace:	1c10      	adds	r0, r2, #0
 8007ad0:	f7f9 fb22 	bl	8001118 <__aeabi_fsub>
 8007ad4:	1c03      	adds	r3, r0, #0
 8007ad6:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 8007ad8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ada:	69b8      	ldr	r0, [r7, #24]
 8007adc:	f7f9 fb1c 	bl	8001118 <__aeabi_fsub>
 8007ae0:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8007ae2:	1c19      	adds	r1, r3, #0
 8007ae4:	1c28      	adds	r0, r5, #0
 8007ae6:	f7f9 f9d9 	bl	8000e9c <__aeabi_fmul>
 8007aea:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8007aec:	1c19      	adds	r1, r3, #0
 8007aee:	1c20      	adds	r0, r4, #0
 8007af0:	f7f8 fe64 	bl	80007bc <__aeabi_fadd>
 8007af4:	1c03      	adds	r3, r0, #0
 8007af6:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8007b00:	1c19      	adds	r1, r3, #0
 8007b02:	483b      	ldr	r0, [pc, #236]	@ (8007bf0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8007b04:	f7f9 fb08 	bl	8001118 <__aeabi_fsub>
 8007b08:	1c03      	adds	r3, r0, #0
 8007b0a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	1c11      	adds	r1, r2, #0
 8007b14:	0018      	movs	r0, r3
 8007b16:	f000 f971 	bl	8007dfc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007b1a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8007b1c:	1c19      	adds	r1, r3, #0
 8007b1e:	1c28      	adds	r0, r5, #0
 8007b20:	f7f9 f9bc 	bl	8000e9c <__aeabi_fmul>
 8007b24:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 8007b26:	1c19      	adds	r1, r3, #0
 8007b28:	1c20      	adds	r0, r4, #0
 8007b2a:	f7f8 fe47 	bl	80007bc <__aeabi_fadd>
 8007b2e:	1c03      	adds	r3, r0, #0
 8007b30:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8007b32:	4a30      	ldr	r2, [pc, #192]	@ (8007bf4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8007b34:	6939      	ldr	r1, [r7, #16]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	0018      	movs	r0, r3
 8007b3a:	f000 f94f 	bl	8007ddc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	1c11      	adds	r1, r2, #0
 8007b46:	0018      	movs	r0, r3
 8007b48:	f000 f958 	bl	8007dfc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8007b4c:	1c03      	adds	r3, r0, #0
 8007b4e:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8007b50:	6979      	ldr	r1, [r7, #20]
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f7f9 f9a2 	bl	8000e9c <__aeabi_fmul>
 8007b58:	1c03      	adds	r3, r0, #0
 8007b5a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	4923      	ldr	r1, [pc, #140]	@ (8007bf8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8007b6a:	1c18      	adds	r0, r3, #0
 8007b6c:	f7f8 ffb0 	bl	8000ad0 <__aeabi_fdiv>
 8007b70:	1c03      	adds	r3, r0, #0
 8007b72:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8007b74:	69f9      	ldr	r1, [r7, #28]
 8007b76:	20fe      	movs	r0, #254	@ 0xfe
 8007b78:	0580      	lsls	r0, r0, #22
 8007b7a:	f7f9 facd 	bl	8001118 <__aeabi_fsub>
 8007b7e:	1c03      	adds	r3, r0, #0
 8007b80:	491e      	ldr	r1, [pc, #120]	@ (8007bfc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 8007b82:	1c18      	adds	r0, r3, #0
 8007b84:	f7f9 f98a 	bl	8000e9c <__aeabi_fmul>
 8007b88:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8007b8a:	491d      	ldr	r1, [pc, #116]	@ (8007c00 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8007b8c:	1c18      	adds	r0, r3, #0
 8007b8e:	f7f9 fac3 	bl	8001118 <__aeabi_fsub>
 8007b92:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8007b94:	1c19      	adds	r1, r3, #0
 8007b96:	1c28      	adds	r0, r5, #0
 8007b98:	f7f9 f980 	bl	8000e9c <__aeabi_fmul>
 8007b9c:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8007b9e:	1c19      	adds	r1, r3, #0
 8007ba0:	1c20      	adds	r0, r4, #0
 8007ba2:	f7f8 fe0b 	bl	80007bc <__aeabi_fadd>
 8007ba6:	1c03      	adds	r3, r0, #0
 8007ba8:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	1c18      	adds	r0, r3, #0
 8007bb6:	f7f8 fc89 	bl	80004cc <__aeabi_fcmplt>
 8007bba:	1e03      	subs	r3, r0, #0
 8007bbc:	d002      	beq.n	8007bc4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8007bcc:	1c19      	adds	r1, r3, #0
 8007bce:	1c10      	adds	r0, r2, #0
 8007bd0:	f7f8 fc90 	bl	80004f4 <__aeabi_fcmpgt>
 8007bd4:	1e03      	subs	r3, r0, #0
 8007bd6:	d100      	bne.n	8007bda <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 8007bd8:	e002      	b.n	8007be0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007be0:	46c0      	nop			@ (mov r8, r8)
 8007be2:	46bd      	mov	sp, r7
 8007be4:	b00c      	add	sp, #48	@ 0x30
 8007be6:	bdb0      	pop	{r4, r5, r7, pc}
 8007be8:	46fffe00 	.word	0x46fffe00
 8007bec:	3c23d70a 	.word	0x3c23d70a
 8007bf0:	43ff0000 	.word	0x43ff0000
 8007bf4:	3db851ec 	.word	0x3db851ec
 8007bf8:	42700000 	.word	0x42700000
 8007bfc:	3fa66666 	.word	0x3fa66666
 8007c00:	3e99999a 	.word	0x3e99999a

08007c04 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8007c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c06:	b087      	sub	sp, #28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	223c      	movs	r2, #60	@ 0x3c
 8007c12:	5c9b      	ldrb	r3, [r3, r2]
 8007c14:	2201      	movs	r2, #1
 8007c16:	4053      	eors	r3, r2
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00a      	beq.n	8007c34 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	223c      	movs	r2, #60	@ 0x3c
 8007c22:	2101      	movs	r1, #1
 8007c24:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 8007c32:	e0c8      	b.n	8007dc6 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c38:	4965      	ldr	r1, [pc, #404]	@ (8007dd0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8007c3a:	1c18      	adds	r0, r3, #0
 8007c3c:	f7f8 fc64 	bl	8000508 <__aeabi_fcmpge>
 8007c40:	1e03      	subs	r3, r0, #0
 8007c42:	d107      	bne.n	8007c54 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8007c48:	4962      	ldr	r1, [pc, #392]	@ (8007dd4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8007c4a:	1c18      	adds	r0, r3, #0
 8007c4c:	f7f8 fc48 	bl	80004e0 <__aeabi_fcmple>
 8007c50:	1e03      	subs	r3, r0, #0
 8007c52:	d00e      	beq.n	8007c72 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8007c5c:	1c19      	adds	r1, r3, #0
 8007c5e:	1c10      	adds	r0, r2, #0
 8007c60:	f7f8 fdac 	bl	80007bc <__aeabi_fadd>
 8007c64:	1c03      	adds	r3, r0, #0
 8007c66:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c76:	1c19      	adds	r1, r3, #0
 8007c78:	6838      	ldr	r0, [r7, #0]
 8007c7a:	f7f9 fa4d 	bl	8001118 <__aeabi_fsub>
 8007c7e:	1c03      	adds	r3, r0, #0
 8007c80:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	0018      	movs	r0, r3
 8007c86:	f7ff fe7d 	bl	8007984 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c8e:	1c19      	adds	r1, r3, #0
 8007c90:	6838      	ldr	r0, [r7, #0]
 8007c92:	f7f9 fa41 	bl	8001118 <__aeabi_fsub>
 8007c96:	1c03      	adds	r3, r0, #0
 8007c98:	2185      	movs	r1, #133	@ 0x85
 8007c9a:	05c9      	lsls	r1, r1, #23
 8007c9c:	1c18      	adds	r0, r3, #0
 8007c9e:	f7f8 ff17 	bl	8000ad0 <__aeabi_fdiv>
 8007ca2:	1c03      	adds	r3, r0, #0
 8007ca4:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8007ca6:	2100      	movs	r1, #0
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f7f8 fc0f 	bl	80004cc <__aeabi_fcmplt>
 8007cae:	1e03      	subs	r3, r0, #0
 8007cb0:	d008      	beq.n	8007cc4 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cb6:	68f9      	ldr	r1, [r7, #12]
 8007cb8:	1c18      	adds	r0, r3, #0
 8007cba:	f7f9 fa2d 	bl	8001118 <__aeabi_fsub>
 8007cbe:	1c03      	adds	r3, r0, #0
 8007cc0:	617b      	str	r3, [r7, #20]
 8007cc2:	e007      	b.n	8007cd4 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cc8:	1c19      	adds	r1, r3, #0
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f7f8 fd76 	bl	80007bc <__aeabi_fadd>
 8007cd0:	1c03      	adds	r3, r0, #0
 8007cd2:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 8007cd4:	23fe      	movs	r3, #254	@ 0xfe
 8007cd6:	059b      	lsls	r3, r3, #22
 8007cd8:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8007cda:	493f      	ldr	r1, [pc, #252]	@ (8007dd8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007cdc:	6978      	ldr	r0, [r7, #20]
 8007cde:	f7f8 fc09 	bl	80004f4 <__aeabi_fcmpgt>
 8007ce2:	1e03      	subs	r3, r0, #0
 8007ce4:	d010      	beq.n	8007d08 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 8007ce6:	493c      	ldr	r1, [pc, #240]	@ (8007dd8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007ce8:	6978      	ldr	r0, [r7, #20]
 8007cea:	f7f8 fef1 	bl	8000ad0 <__aeabi_fdiv>
 8007cee:	1c03      	adds	r3, r0, #0
 8007cf0:	1c1c      	adds	r4, r3, #0
 8007cf2:	4939      	ldr	r1, [pc, #228]	@ (8007dd8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007cf4:	6978      	ldr	r0, [r7, #20]
 8007cf6:	f7f8 feeb 	bl	8000ad0 <__aeabi_fdiv>
 8007cfa:	1c03      	adds	r3, r0, #0
 8007cfc:	1c19      	adds	r1, r3, #0
 8007cfe:	1c20      	adds	r0, r4, #0
 8007d00:	f7f9 f8cc 	bl	8000e9c <__aeabi_fmul>
 8007d04:	1c03      	adds	r3, r0, #0
 8007d06:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8007d0c:	1c19      	adds	r1, r3, #0
 8007d0e:	2085      	movs	r0, #133	@ 0x85
 8007d10:	05c0      	lsls	r0, r0, #23
 8007d12:	f7f9 fa01 	bl	8001118 <__aeabi_fsub>
 8007d16:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8007d18:	6939      	ldr	r1, [r7, #16]
 8007d1a:	1c18      	adds	r0, r3, #0
 8007d1c:	f7f9 f8be 	bl	8000e9c <__aeabi_fmul>
 8007d20:	1c03      	adds	r3, r0, #0
 8007d22:	1c18      	adds	r0, r3, #0
 8007d24:	f012 fdf2 	bl	801a90c <sqrtf>
 8007d28:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8007d32:	2185      	movs	r1, #133	@ 0x85
 8007d34:	05c9      	lsls	r1, r1, #23
 8007d36:	6938      	ldr	r0, [r7, #16]
 8007d38:	f7f9 f8b0 	bl	8000e9c <__aeabi_fmul>
 8007d3c:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8007d3e:	1c19      	adds	r1, r3, #0
 8007d40:	1c28      	adds	r0, r5, #0
 8007d42:	f7f8 fec5 	bl	8000ad0 <__aeabi_fdiv>
 8007d46:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8007d48:	1c19      	adds	r1, r3, #0
 8007d4a:	1c20      	adds	r0, r4, #0
 8007d4c:	f7f9 f8a6 	bl	8000e9c <__aeabi_fmul>
 8007d50:	1c03      	adds	r3, r0, #0
 8007d52:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d58:	68f9      	ldr	r1, [r7, #12]
 8007d5a:	1c18      	adds	r0, r3, #0
 8007d5c:	f7f9 f89e 	bl	8000e9c <__aeabi_fmul>
 8007d60:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8007d62:	6939      	ldr	r1, [r7, #16]
 8007d64:	1c18      	adds	r0, r3, #0
 8007d66:	f7f8 feb3 	bl	8000ad0 <__aeabi_fdiv>
 8007d6a:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8007d6c:	68f9      	ldr	r1, [r7, #12]
 8007d6e:	1c18      	adds	r0, r3, #0
 8007d70:	f7f9 f894 	bl	8000e9c <__aeabi_fmul>
 8007d74:	1c03      	adds	r3, r0, #0
             sqrtf(
 8007d76:	1c19      	adds	r1, r3, #0
 8007d78:	1c20      	adds	r0, r4, #0
 8007d7a:	f7f8 fd1f 	bl	80007bc <__aeabi_fadd>
 8007d7e:	1c03      	adds	r3, r0, #0
 8007d80:	1c18      	adds	r0, r3, #0
 8007d82:	f012 fdc3 	bl	801a90c <sqrtf>
 8007d86:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007d88:	1c19      	adds	r1, r3, #0
 8007d8a:	1c30      	adds	r0, r6, #0
 8007d8c:	f7f9 f886 	bl	8000e9c <__aeabi_fmul>
 8007d90:	1c03      	adds	r3, r0, #0
 8007d92:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007da0:	68f9      	ldr	r1, [r7, #12]
 8007da2:	1c18      	adds	r0, r3, #0
 8007da4:	f7f9 f87a 	bl	8000e9c <__aeabi_fmul>
 8007da8:	1c03      	adds	r3, r0, #0
 8007daa:	2182      	movs	r1, #130	@ 0x82
 8007dac:	05c9      	lsls	r1, r1, #23
 8007dae:	1c18      	adds	r0, r3, #0
 8007db0:	f7f8 fe8e 	bl	8000ad0 <__aeabi_fdiv>
 8007db4:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 8007db6:	1c19      	adds	r1, r3, #0
 8007db8:	1c20      	adds	r0, r4, #0
 8007dba:	f7f8 fcff 	bl	80007bc <__aeabi_fadd>
 8007dbe:	1c03      	adds	r3, r0, #0
 8007dc0:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007dc6:	46c0      	nop			@ (mov r8, r8)
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	b007      	add	sp, #28
 8007dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dce:	46c0      	nop			@ (mov r8, r8)
 8007dd0:	42c80000 	.word	0x42c80000
 8007dd4:	c2c80000 	.word	0xc2c80000
 8007dd8:	44b40000 	.word	0x44b40000

08007ddc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	68ba      	ldr	r2, [r7, #8]
 8007df2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007df4:	46c0      	nop			@ (mov r8, r8)
 8007df6:	46bd      	mov	sp, r7
 8007df8:	b004      	add	sp, #16
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8007dfc:	b590      	push	{r4, r7, lr}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e0e:	1c19      	adds	r1, r3, #0
 8007e10:	6838      	ldr	r0, [r7, #0]
 8007e12:	f7f9 f981 	bl	8001118 <__aeabi_fsub>
 8007e16:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8007e18:	1c19      	adds	r1, r3, #0
 8007e1a:	1c20      	adds	r0, r4, #0
 8007e1c:	f7f9 f83e 	bl	8000e9c <__aeabi_fmul>
 8007e20:	1c03      	adds	r3, r0, #0
 8007e22:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8007e24:	4912      	ldr	r1, [pc, #72]	@ (8007e70 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f7f8 fb50 	bl	80004cc <__aeabi_fcmplt>
 8007e2c:	1e03      	subs	r3, r0, #0
 8007e2e:	d002      	beq.n	8007e36 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8007e30:	23fe      	movs	r3, #254	@ 0xfe
 8007e32:	059b      	lsls	r3, r3, #22
 8007e34:	e018      	b.n	8007e68 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8007e36:	490f      	ldr	r1, [pc, #60]	@ (8007e74 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f7f8 fb5b 	bl	80004f4 <__aeabi_fcmpgt>
 8007e3e:	1e03      	subs	r3, r0, #0
 8007e40:	d001      	beq.n	8007e46 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8007e42:	2300      	movs	r3, #0
 8007e44:	e010      	b.n	8007e68 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	1c18      	adds	r0, r3, #0
 8007e4a:	f012 fd37 	bl	801a8bc <expf>
 8007e4e:	1c03      	adds	r3, r0, #0
 8007e50:	21fe      	movs	r1, #254	@ 0xfe
 8007e52:	0589      	lsls	r1, r1, #22
 8007e54:	1c18      	adds	r0, r3, #0
 8007e56:	f7f8 fcb1 	bl	80007bc <__aeabi_fadd>
 8007e5a:	1c03      	adds	r3, r0, #0
 8007e5c:	1c19      	adds	r1, r3, #0
 8007e5e:	20fe      	movs	r0, #254	@ 0xfe
 8007e60:	0580      	lsls	r0, r0, #22
 8007e62:	f7f8 fe35 	bl	8000ad0 <__aeabi_fdiv>
 8007e66:	1c03      	adds	r3, r0, #0
    }
}
 8007e68:	1c18      	adds	r0, r3, #0
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	b005      	add	sp, #20
 8007e6e:	bd90      	pop	{r4, r7, pc}
 8007e70:	c2480000 	.word	0xc2480000
 8007e74:	42480000 	.word	0x42480000

08007e78 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	68ba      	ldr	r2, [r7, #8]
 8007e88:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007e90:	46c0      	nop			@ (mov r8, r8)
 8007e92:	46bd      	mov	sp, r7
 8007e94:	b004      	add	sp, #16
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8007e98:	b590      	push	{r4, r7, lr}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d114      	bne.n	8007ed4 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007eae:	1c19      	adds	r1, r3, #0
 8007eb0:	6838      	ldr	r0, [r7, #0]
 8007eb2:	f7f9 f931 	bl	8001118 <__aeabi_fsub>
 8007eb6:	1c03      	adds	r3, r0, #0
 8007eb8:	4918      	ldr	r1, [pc, #96]	@ (8007f1c <GasIndexAlgorithm__mox_model__process+0x84>)
 8007eba:	1c18      	adds	r0, r3, #0
 8007ebc:	f7f8 fe08 	bl	8000ad0 <__aeabi_fdiv>
 8007ec0:	1c03      	adds	r3, r0, #0
 8007ec2:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 8007ec8:	1c19      	adds	r1, r3, #0
 8007eca:	1c10      	adds	r0, r2, #0
 8007ecc:	f7f8 ffe6 	bl	8000e9c <__aeabi_fmul>
 8007ed0:	1c03      	adds	r3, r0, #0
 8007ed2:	e01f      	b.n	8007f14 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ed8:	1c19      	adds	r1, r3, #0
 8007eda:	6838      	ldr	r0, [r7, #0]
 8007edc:	f7f9 f91c 	bl	8001118 <__aeabi_fsub>
 8007ee0:	1c03      	adds	r3, r0, #0
 8007ee2:	1c1a      	adds	r2, r3, #0
 8007ee4:	2380      	movs	r3, #128	@ 0x80
 8007ee6:	061b      	lsls	r3, r3, #24
 8007ee8:	4053      	eors	r3, r2
 8007eea:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ef0:	490b      	ldr	r1, [pc, #44]	@ (8007f20 <GasIndexAlgorithm__mox_model__process+0x88>)
 8007ef2:	1c18      	adds	r0, r3, #0
 8007ef4:	f7f8 fc62 	bl	80007bc <__aeabi_fadd>
 8007ef8:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007efa:	1c19      	adds	r1, r3, #0
 8007efc:	1c20      	adds	r0, r4, #0
 8007efe:	f7f8 fde7 	bl	8000ad0 <__aeabi_fdiv>
 8007f02:	1c03      	adds	r3, r0, #0
 8007f04:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 8007f0a:	1c19      	adds	r1, r3, #0
 8007f0c:	1c10      	adds	r0, r2, #0
 8007f0e:	f7f8 ffc5 	bl	8000e9c <__aeabi_fmul>
 8007f12:	1c03      	adds	r3, r0, #0
    }
}
 8007f14:	1c18      	adds	r0, r3, #0
 8007f16:	46bd      	mov	sp, r7
 8007f18:	b003      	add	sp, #12
 8007f1a:	bd90      	pop	{r4, r7, pc}
 8007f1c:	44fa0000 	.word	0x44fa0000
 8007f20:	435c0000 	.word	0x435c0000

08007f24 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
 8007f30:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2180      	movs	r1, #128	@ 0x80
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2184      	movs	r1, #132	@ 0x84
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2188      	movs	r1, #136	@ 0x88
 8007f46:	683a      	ldr	r2, [r7, #0]
 8007f48:	505a      	str	r2, [r3, r1]
}
 8007f4a:	46c0      	nop			@ (mov r8, r8)
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	b004      	add	sp, #16
 8007f50:	bd80      	pop	{r7, pc}
	...

08007f54 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8007f54:	b590      	push	{r4, r7, lr}
 8007f56:	b085      	sub	sp, #20
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2280      	movs	r2, #128	@ 0x80
 8007f62:	589c      	ldr	r4, [r3, r2]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2284      	movs	r2, #132	@ 0x84
 8007f68:	589b      	ldr	r3, [r3, r2]
 8007f6a:	1c19      	adds	r1, r3, #0
 8007f6c:	6838      	ldr	r0, [r7, #0]
 8007f6e:	f7f9 f8d3 	bl	8001118 <__aeabi_fsub>
 8007f72:	1c03      	adds	r3, r0, #0
 8007f74:	1c19      	adds	r1, r3, #0
 8007f76:	1c20      	adds	r0, r4, #0
 8007f78:	f7f8 ff90 	bl	8000e9c <__aeabi_fmul>
 8007f7c:	1c03      	adds	r3, r0, #0
 8007f7e:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8007f80:	4940      	ldr	r1, [pc, #256]	@ (8008084 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8007f82:	68b8      	ldr	r0, [r7, #8]
 8007f84:	f7f8 faa2 	bl	80004cc <__aeabi_fcmplt>
 8007f88:	1e03      	subs	r3, r0, #0
 8007f8a:	d001      	beq.n	8007f90 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8007f8c:	4b3e      	ldr	r3, [pc, #248]	@ (8008088 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007f8e:	e075      	b.n	800807c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8007f90:	493e      	ldr	r1, [pc, #248]	@ (800808c <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 8007f92:	68b8      	ldr	r0, [r7, #8]
 8007f94:	f7f8 faae 	bl	80004f4 <__aeabi_fcmpgt>
 8007f98:	1e03      	subs	r3, r0, #0
 8007f9a:	d001      	beq.n	8007fa0 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	e06d      	b.n	800807c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	6838      	ldr	r0, [r7, #0]
 8007fa4:	f7f8 fab0 	bl	8000508 <__aeabi_fcmpge>
 8007fa8:	1e03      	subs	r3, r0, #0
 8007faa:	d047      	beq.n	800803c <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2288      	movs	r2, #136	@ 0x88
 8007fb0:	589b      	ldr	r3, [r3, r2]
 8007fb2:	21fe      	movs	r1, #254	@ 0xfe
 8007fb4:	0589      	lsls	r1, r1, #22
 8007fb6:	1c18      	adds	r0, r3, #0
 8007fb8:	f7f8 fa82 	bl	80004c0 <__aeabi_fcmpeq>
 8007fbc:	1e03      	subs	r3, r0, #0
 8007fbe:	d00e      	beq.n	8007fde <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	1c19      	adds	r1, r3, #0
 8007fc6:	20fe      	movs	r0, #254	@ 0xfe
 8007fc8:	0580      	lsls	r0, r0, #22
 8007fca:	f7f9 f8a5 	bl	8001118 <__aeabi_fsub>
 8007fce:	1c03      	adds	r3, r0, #0
 8007fd0:	492f      	ldr	r1, [pc, #188]	@ (8008090 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 8007fd2:	1c18      	adds	r0, r3, #0
 8007fd4:	f7f8 ff62 	bl	8000e9c <__aeabi_fmul>
 8007fd8:	1c03      	adds	r3, r0, #0
 8007fda:	60fb      	str	r3, [r7, #12]
 8007fdc:	e012      	b.n	8008004 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	492c      	ldr	r1, [pc, #176]	@ (8008094 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8007fe4:	1c18      	adds	r0, r3, #0
 8007fe6:	f7f8 ff59 	bl	8000e9c <__aeabi_fmul>
 8007fea:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8007fec:	1c19      	adds	r1, r3, #0
 8007fee:	4826      	ldr	r0, [pc, #152]	@ (8008088 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007ff0:	f7f9 f892 	bl	8001118 <__aeabi_fsub>
 8007ff4:	1c03      	adds	r3, r0, #0
 8007ff6:	2181      	movs	r1, #129	@ 0x81
 8007ff8:	05c9      	lsls	r1, r1, #23
 8007ffa:	1c18      	adds	r0, r3, #0
 8007ffc:	f7f8 fd68 	bl	8000ad0 <__aeabi_fdiv>
 8008000:	1c03      	adds	r3, r0, #0
 8008002:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8008004:	4920      	ldr	r1, [pc, #128]	@ (8008088 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f7f8 fbd8 	bl	80007bc <__aeabi_fadd>
 800800c:	1c03      	adds	r3, r0, #0
 800800e:	1c1c      	adds	r4, r3, #0
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	1c18      	adds	r0, r3, #0
 8008014:	f012 fc52 	bl	801a8bc <expf>
 8008018:	1c03      	adds	r3, r0, #0
 800801a:	21fe      	movs	r1, #254	@ 0xfe
 800801c:	0589      	lsls	r1, r1, #22
 800801e:	1c18      	adds	r0, r3, #0
 8008020:	f7f8 fbcc 	bl	80007bc <__aeabi_fadd>
 8008024:	1c03      	adds	r3, r0, #0
 8008026:	1c19      	adds	r1, r3, #0
 8008028:	1c20      	adds	r0, r4, #0
 800802a:	f7f8 fd51 	bl	8000ad0 <__aeabi_fdiv>
 800802e:	1c03      	adds	r3, r0, #0
 8008030:	68f9      	ldr	r1, [r7, #12]
 8008032:	1c18      	adds	r0, r3, #0
 8008034:	f7f9 f870 	bl	8001118 <__aeabi_fsub>
 8008038:	1c03      	adds	r3, r0, #0
 800803a:	e01f      	b.n	800807c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2188      	movs	r1, #136	@ 0x88
 8008044:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 8008046:	1c19      	adds	r1, r3, #0
 8008048:	1c10      	adds	r0, r2, #0
 800804a:	f7f8 fd41 	bl	8000ad0 <__aeabi_fdiv>
 800804e:	1c03      	adds	r3, r0, #0
 8008050:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	1c18      	adds	r0, r3, #0
 8008056:	f012 fc31 	bl	801a8bc <expf>
 800805a:	1c03      	adds	r3, r0, #0
 800805c:	21fe      	movs	r1, #254	@ 0xfe
 800805e:	0589      	lsls	r1, r1, #22
 8008060:	1c18      	adds	r0, r3, #0
 8008062:	f7f8 fbab 	bl	80007bc <__aeabi_fadd>
 8008066:	1c03      	adds	r3, r0, #0
 8008068:	1c19      	adds	r1, r3, #0
 800806a:	4807      	ldr	r0, [pc, #28]	@ (8008088 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800806c:	f7f8 fd30 	bl	8000ad0 <__aeabi_fdiv>
 8008070:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8008072:	1c19      	adds	r1, r3, #0
 8008074:	1c20      	adds	r0, r4, #0
 8008076:	f7f8 ff11 	bl	8000e9c <__aeabi_fmul>
 800807a:	1c03      	adds	r3, r0, #0
        }
    }
}
 800807c:	1c18      	adds	r0, r3, #0
 800807e:	46bd      	mov	sp, r7
 8008080:	b005      	add	sp, #20
 8008082:	bd90      	pop	{r4, r7, pc}
 8008084:	c2480000 	.word	0xc2480000
 8008088:	43fa0000 	.word	0x43fa0000
 800808c:	42480000 	.word	0x42480000
 8008090:	3f8041ab 	.word	0x3f8041ab
 8008094:	40a00000 	.word	0x40a00000

08008098 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8008098:	b590      	push	{r4, r7, lr}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	4913      	ldr	r1, [pc, #76]	@ (80080f8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 80080aa:	1c18      	adds	r0, r3, #0
 80080ac:	f7f8 fb86 	bl	80007bc <__aeabi_fadd>
 80080b0:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80080b2:	1c19      	adds	r1, r3, #0
 80080b4:	1c20      	adds	r0, r4, #0
 80080b6:	f7f8 fd0b 	bl	8000ad0 <__aeabi_fdiv>
 80080ba:	1c03      	adds	r3, r0, #0
 80080bc:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	228c      	movs	r2, #140	@ 0x8c
 80080c2:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	490b      	ldr	r1, [pc, #44]	@ (80080fc <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 80080ce:	1c18      	adds	r0, r3, #0
 80080d0:	f7f8 fb74 	bl	80007bc <__aeabi_fadd>
 80080d4:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80080d6:	1c19      	adds	r1, r3, #0
 80080d8:	1c20      	adds	r0, r4, #0
 80080da:	f7f8 fcf9 	bl	8000ad0 <__aeabi_fdiv>
 80080de:	1c03      	adds	r3, r0, #0
 80080e0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2290      	movs	r2, #144	@ 0x90
 80080e6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2294      	movs	r2, #148	@ 0x94
 80080ec:	2100      	movs	r1, #0
 80080ee:	5499      	strb	r1, [r3, r2]
}
 80080f0:	46c0      	nop			@ (mov r8, r8)
 80080f2:	46bd      	mov	sp, r7
 80080f4:	b003      	add	sp, #12
 80080f6:	bd90      	pop	{r4, r7, pc}
 80080f8:	41a00000 	.word	0x41a00000
 80080fc:	43fa0000 	.word	0x43fa0000

08008100 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8008100:	b590      	push	{r4, r7, lr}
 8008102:	b087      	sub	sp, #28
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2294      	movs	r2, #148	@ 0x94
 800810e:	5c9b      	ldrb	r3, [r3, r2]
 8008110:	2201      	movs	r2, #1
 8008112:	4053      	eors	r3, r2
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00f      	beq.n	800813a <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2198      	movs	r1, #152	@ 0x98
 800811e:	683a      	ldr	r2, [r7, #0]
 8008120:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	219c      	movs	r1, #156	@ 0x9c
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	21a0      	movs	r1, #160	@ 0xa0
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2294      	movs	r2, #148	@ 0x94
 8008136:	2101      	movs	r1, #1
 8008138:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	228c      	movs	r2, #140	@ 0x8c
 800813e:	589b      	ldr	r3, [r3, r2]
 8008140:	1c19      	adds	r1, r3, #0
 8008142:	20fe      	movs	r0, #254	@ 0xfe
 8008144:	0580      	lsls	r0, r0, #22
 8008146:	f7f8 ffe7 	bl	8001118 <__aeabi_fsub>
 800814a:	1c03      	adds	r3, r0, #0
 800814c:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2298      	movs	r2, #152	@ 0x98
 8008152:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8008154:	1c19      	adds	r1, r3, #0
 8008156:	f7f8 fea1 	bl	8000e9c <__aeabi_fmul>
 800815a:	1c03      	adds	r3, r0, #0
 800815c:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	228c      	movs	r2, #140	@ 0x8c
 8008162:	589b      	ldr	r3, [r3, r2]
 8008164:	6839      	ldr	r1, [r7, #0]
 8008166:	1c18      	adds	r0, r3, #0
 8008168:	f7f8 fe98 	bl	8000e9c <__aeabi_fmul>
 800816c:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800816e:	1c19      	adds	r1, r3, #0
 8008170:	1c20      	adds	r0, r4, #0
 8008172:	f7f8 fb23 	bl	80007bc <__aeabi_fadd>
 8008176:	1c03      	adds	r3, r0, #0
 8008178:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2298      	movs	r2, #152	@ 0x98
 800817e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2290      	movs	r2, #144	@ 0x90
 8008184:	589b      	ldr	r3, [r3, r2]
 8008186:	1c19      	adds	r1, r3, #0
 8008188:	20fe      	movs	r0, #254	@ 0xfe
 800818a:	0580      	lsls	r0, r0, #22
 800818c:	f7f8 ffc4 	bl	8001118 <__aeabi_fsub>
 8008190:	1c03      	adds	r3, r0, #0
 8008192:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	229c      	movs	r2, #156	@ 0x9c
 8008198:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800819a:	1c19      	adds	r1, r3, #0
 800819c:	f7f8 fe7e 	bl	8000e9c <__aeabi_fmul>
 80081a0:	1c03      	adds	r3, r0, #0
 80081a2:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2290      	movs	r2, #144	@ 0x90
 80081a8:	589b      	ldr	r3, [r3, r2]
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	1c18      	adds	r0, r3, #0
 80081ae:	f7f8 fe75 	bl	8000e9c <__aeabi_fmul>
 80081b2:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 80081b4:	1c19      	adds	r1, r3, #0
 80081b6:	1c20      	adds	r0, r4, #0
 80081b8:	f7f8 fb00 	bl	80007bc <__aeabi_fadd>
 80081bc:	1c03      	adds	r3, r0, #0
 80081be:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	229c      	movs	r2, #156	@ 0x9c
 80081c4:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2298      	movs	r2, #152	@ 0x98
 80081ca:	589a      	ldr	r2, [r3, r2]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	219c      	movs	r1, #156	@ 0x9c
 80081d0:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 80081d2:	1c19      	adds	r1, r3, #0
 80081d4:	1c10      	adds	r0, r2, #0
 80081d6:	f7f8 ff9f 	bl	8001118 <__aeabi_fsub>
 80081da:	1c03      	adds	r3, r0, #0
 80081dc:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 80081de:	2100      	movs	r1, #0
 80081e0:	6978      	ldr	r0, [r7, #20]
 80081e2:	f7f8 f973 	bl	80004cc <__aeabi_fcmplt>
 80081e6:	1e03      	subs	r3, r0, #0
 80081e8:	d004      	beq.n	80081f4 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	2280      	movs	r2, #128	@ 0x80
 80081ee:	0612      	lsls	r2, r2, #24
 80081f0:	4053      	eors	r3, r2
 80081f2:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 80081f4:	4923      	ldr	r1, [pc, #140]	@ (8008284 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 80081f6:	6978      	ldr	r0, [r7, #20]
 80081f8:	f7f8 fe50 	bl	8000e9c <__aeabi_fmul>
 80081fc:	1c03      	adds	r3, r0, #0
 80081fe:	1c18      	adds	r0, r3, #0
 8008200:	f012 fb5c 	bl	801a8bc <expf>
 8008204:	1c03      	adds	r3, r0, #0
 8008206:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8008208:	491f      	ldr	r1, [pc, #124]	@ (8008288 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800820a:	6938      	ldr	r0, [r7, #16]
 800820c:	f7f8 fe46 	bl	8000e9c <__aeabi_fmul>
 8008210:	1c03      	adds	r3, r0, #0
 8008212:	491e      	ldr	r1, [pc, #120]	@ (800828c <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8008214:	1c18      	adds	r0, r3, #0
 8008216:	f7f8 fad1 	bl	80007bc <__aeabi_fadd>
 800821a:	1c03      	adds	r3, r0, #0
 800821c:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	685c      	ldr	r4, [r3, #4]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	68f9      	ldr	r1, [r7, #12]
 8008228:	1c18      	adds	r0, r3, #0
 800822a:	f7f8 fac7 	bl	80007bc <__aeabi_fadd>
 800822e:	1c03      	adds	r3, r0, #0
 8008230:	1c19      	adds	r1, r3, #0
 8008232:	1c20      	adds	r0, r4, #0
 8008234:	f7f8 fc4c 	bl	8000ad0 <__aeabi_fdiv>
 8008238:	1c03      	adds	r3, r0, #0
 800823a:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800823c:	68b9      	ldr	r1, [r7, #8]
 800823e:	20fe      	movs	r0, #254	@ 0xfe
 8008240:	0580      	lsls	r0, r0, #22
 8008242:	f7f8 ff69 	bl	8001118 <__aeabi_fsub>
 8008246:	1c03      	adds	r3, r0, #0
 8008248:	1c18      	adds	r0, r3, #0
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	22a0      	movs	r2, #160	@ 0xa0
 800824e:	589b      	ldr	r3, [r3, r2]
 8008250:	1c19      	adds	r1, r3, #0
 8008252:	f7f8 fe23 	bl	8000e9c <__aeabi_fmul>
 8008256:	1c03      	adds	r3, r0, #0
 8008258:	1c1c      	adds	r4, r3, #0
 800825a:	6839      	ldr	r1, [r7, #0]
 800825c:	68b8      	ldr	r0, [r7, #8]
 800825e:	f7f8 fe1d 	bl	8000e9c <__aeabi_fmul>
 8008262:	1c03      	adds	r3, r0, #0
 8008264:	1c19      	adds	r1, r3, #0
 8008266:	1c20      	adds	r0, r4, #0
 8008268:	f7f8 faa8 	bl	80007bc <__aeabi_fadd>
 800826c:	1c03      	adds	r3, r0, #0
 800826e:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	22a0      	movs	r2, #160	@ 0xa0
 8008274:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	22a0      	movs	r2, #160	@ 0xa0
 800827a:	589b      	ldr	r3, [r3, r2]
}
 800827c:	1c18      	adds	r0, r3, #0
 800827e:	46bd      	mov	sp, r7
 8008280:	b007      	add	sp, #28
 8008282:	bd90      	pop	{r4, r7, pc}
 8008284:	be4ccccd 	.word	0xbe4ccccd
 8008288:	43f00000 	.word	0x43f00000
 800828c:	41a00000 	.word	0x41a00000

08008290 <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8008290:	b590      	push	{r4, r7, lr}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6039      	str	r1, [r7, #0]
 8008298:	0011      	movs	r1, r2
 800829a:	1dfb      	adds	r3, r7, #7
 800829c:	1c02      	adds	r2, r0, #0
 800829e:	701a      	strb	r2, [r3, #0]
 80082a0:	1dbb      	adds	r3, r7, #6
 80082a2:	1c0a      	adds	r2, r1, #0
 80082a4:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 80082a6:	4b08      	ldr	r3, [pc, #32]	@ (80082c8 <ReadRegister+0x38>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d008      	beq.n	80082c0 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 80082ae:	4b06      	ldr	r3, [pc, #24]	@ (80082c8 <ReadRegister+0x38>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	1dba      	adds	r2, r7, #6
 80082b4:	7814      	ldrb	r4, [r2, #0]
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	1dfa      	adds	r2, r7, #7
 80082ba:	7810      	ldrb	r0, [r2, #0]
 80082bc:	0022      	movs	r2, r4
 80082be:	4798      	blx	r3
  }
}
 80082c0:	46c0      	nop			@ (mov r8, r8)
 80082c2:	46bd      	mov	sp, r7
 80082c4:	b003      	add	sp, #12
 80082c6:	bd90      	pop	{r4, r7, pc}
 80082c8:	200028f4 	.word	0x200028f4

080082cc <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 80082cc:	b590      	push	{r4, r7, lr}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6039      	str	r1, [r7, #0]
 80082d4:	0011      	movs	r1, r2
 80082d6:	1dfb      	adds	r3, r7, #7
 80082d8:	1c02      	adds	r2, r0, #0
 80082da:	701a      	strb	r2, [r3, #0]
 80082dc:	1dbb      	adds	r3, r7, #6
 80082de:	1c0a      	adds	r2, r1, #0
 80082e0:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 80082e2:	4b08      	ldr	r3, [pc, #32]	@ (8008304 <WriteRegister+0x38>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d008      	beq.n	80082fc <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 80082ea:	4b06      	ldr	r3, [pc, #24]	@ (8008304 <WriteRegister+0x38>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	1dba      	adds	r2, r7, #6
 80082f0:	7814      	ldrb	r4, [r2, #0]
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	1dfa      	adds	r2, r7, #7
 80082f6:	7810      	ldrb	r0, [r2, #0]
 80082f8:	0022      	movs	r2, r4
 80082fa:	4798      	blx	r3
  }
}
 80082fc:	46c0      	nop			@ (mov r8, r8)
 80082fe:	46bd      	mov	sp, r7
 8008300:	b003      	add	sp, #12
 8008302:	bd90      	pop	{r4, r7, pc}
 8008304:	200028f8 	.word	0x200028f8

08008308 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8008312:	4b07      	ldr	r3, [pc, #28]	@ (8008330 <SGP_Init+0x28>)
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8008318:	4b06      	ldr	r3, [pc, #24]	@ (8008334 <SGP_Init+0x2c>)
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800831e:	4b06      	ldr	r3, [pc, #24]	@ (8008338 <SGP_Init+0x30>)
 8008320:	2100      	movs	r1, #0
 8008322:	0018      	movs	r0, r3
 8008324:	f7ff f930 	bl	8007588 <GasIndexAlgorithm_init>
}
 8008328:	46c0      	nop			@ (mov r8, r8)
 800832a:	46bd      	mov	sp, r7
 800832c:	b002      	add	sp, #8
 800832e:	bd80      	pop	{r7, pc}
 8008330:	200028f4 	.word	0x200028f4
 8008334:	200028f8 	.word	0x200028f8
 8008338:	20002908 	.word	0x20002908

0800833c <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800833c:	b580      	push	{r7, lr}
 800833e:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8008340:	4b13      	ldr	r3, [pc, #76]	@ (8008390 <SGP_StartMeasurement+0x54>)
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00d      	beq.n	8008364 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008348:	4b12      	ldr	r3, [pc, #72]	@ (8008394 <SGP_StartMeasurement+0x58>)
 800834a:	2208      	movs	r2, #8
 800834c:	0019      	movs	r1, r3
 800834e:	2059      	movs	r0, #89	@ 0x59
 8008350:	f7ff ffbc 	bl	80082cc <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8008354:	f001 fc5c 	bl	8009c10 <GetCurrentHalTicks>
 8008358:	0003      	movs	r3, r0
 800835a:	331e      	adds	r3, #30
 800835c:	001a      	movs	r2, r3
 800835e:	4b0e      	ldr	r3, [pc, #56]	@ (8008398 <SGP_StartMeasurement+0x5c>)
 8008360:	601a      	str	r2, [r3, #0]
 8008362:	e00c      	b.n	800837e <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008364:	4b0d      	ldr	r3, [pc, #52]	@ (800839c <SGP_StartMeasurement+0x60>)
 8008366:	2208      	movs	r2, #8
 8008368:	0019      	movs	r1, r3
 800836a:	2059      	movs	r0, #89	@ 0x59
 800836c:	f7ff ffae 	bl	80082cc <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 8008370:	f001 fc4e 	bl	8009c10 <GetCurrentHalTicks>
 8008374:	0003      	movs	r3, r0
 8008376:	33aa      	adds	r3, #170	@ 0xaa
 8008378:	001a      	movs	r2, r3
 800837a:	4b09      	ldr	r3, [pc, #36]	@ (80083a0 <SGP_StartMeasurement+0x64>)
 800837c:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800837e:	4b09      	ldr	r3, [pc, #36]	@ (80083a4 <SGP_StartMeasurement+0x68>)
 8008380:	2200      	movs	r2, #0
 8008382:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8008384:	4b08      	ldr	r3, [pc, #32]	@ (80083a8 <SGP_StartMeasurement+0x6c>)
 8008386:	2200      	movs	r2, #0
 8008388:	701a      	strb	r2, [r3, #0]
}
 800838a:	46c0      	nop			@ (mov r8, r8)
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	200029b0 	.word	0x200029b0
 8008394:	20000040 	.word	0x20000040
 8008398:	20000054 	.word	0x20000054
 800839c:	20000038 	.word	0x20000038
 80083a0:	2000004c 	.word	0x2000004c
 80083a4:	20002906 	.word	0x20002906
 80083a8:	20002907 	.word	0x20002907

080083ac <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 80083ac:	b580      	push	{r7, lr}
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	4b04      	ldr	r3, [pc, #16]	@ (80083c4 <SGP_HeatedUp+0x18>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	0018      	movs	r0, r3
 80083b6:	f001 fb63 	bl	8009a80 <TimestampIsReached>
 80083ba:	0003      	movs	r3, r0
 80083bc:	0018      	movs	r0, r3
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	46c0      	nop			@ (mov r8, r8)
 80083c4:	2000004c 	.word	0x2000004c

080083c8 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 80083c8:	b580      	push	{r7, lr}
 80083ca:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 80083cc:	4b04      	ldr	r3, [pc, #16]	@ (80083e0 <SGP_MeasurementReady+0x18>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	0018      	movs	r0, r3
 80083d2:	f001 fb55 	bl	8009a80 <TimestampIsReached>
 80083d6:	0003      	movs	r3, r0
}
 80083d8:	0018      	movs	r0, r3
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	46c0      	nop			@ (mov r8, r8)
 80083e0:	20000054 	.word	0x20000054

080083e4 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 80083e4:	b580      	push	{r7, lr}
 80083e6:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 80083e8:	4b04      	ldr	r3, [pc, #16]	@ (80083fc <SGP_MeasurementDone+0x18>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	0018      	movs	r0, r3
 80083ee:	f001 fb47 	bl	8009a80 <TimestampIsReached>
 80083f2:	0003      	movs	r3, r0
}
 80083f4:	0018      	movs	r0, r3
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	46c0      	nop			@ (mov r8, r8)
 80083fc:	20000050 	.word	0x20000050

08008400 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 8008400:	b580      	push	{r7, lr}
 8008402:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8008404:	4b04      	ldr	r3, [pc, #16]	@ (8008418 <SGP_TurnHeaterOff+0x18>)
 8008406:	2202      	movs	r2, #2
 8008408:	0019      	movs	r1, r3
 800840a:	2059      	movs	r0, #89	@ 0x59
 800840c:	f7ff ff5e 	bl	80082cc <WriteRegister>
}
 8008410:	46c0      	nop			@ (mov r8, r8)
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	46c0      	nop			@ (mov r8, r8)
 8008418:	20000030 	.word	0x20000030

0800841c <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800841c:	b5b0      	push	{r4, r5, r7, lr}
 800841e:	b086      	sub	sp, #24
 8008420:	af02      	add	r7, sp, #8
 8008422:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8008424:	f7ff ffc2 	bl	80083ac <SGP_HeatedUp>
 8008428:	1e03      	subs	r3, r0, #0
 800842a:	d038      	beq.n	800849e <SGP_GetMeasurementValues+0x82>
 800842c:	4bd5      	ldr	r3, [pc, #852]	@ (8008784 <SGP_GetMeasurementValues+0x368>)
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	2201      	movs	r2, #1
 8008432:	4053      	eors	r3, r2
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b00      	cmp	r3, #0
 8008438:	d031      	beq.n	800849e <SGP_GetMeasurementValues+0x82>
 800843a:	4bd3      	ldr	r3, [pc, #844]	@ (8008788 <SGP_GetMeasurementValues+0x36c>)
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	2201      	movs	r2, #1
 8008440:	4053      	eors	r3, r2
 8008442:	b2db      	uxtb	r3, r3
 8008444:	2b00      	cmp	r3, #0
 8008446:	d02a      	beq.n	800849e <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 8008448:	4ad0      	ldr	r2, [pc, #832]	@ (800878c <SGP_GetMeasurementValues+0x370>)
 800844a:	4bd1      	ldr	r3, [pc, #836]	@ (8008790 <SGP_GetMeasurementValues+0x374>)
 800844c:	0019      	movs	r1, r3
 800844e:	2003      	movs	r0, #3
 8008450:	f001 fb6c 	bl	8009b2c <CreateLine>
    HeatUpIsDone = true;
 8008454:	4bcb      	ldr	r3, [pc, #812]	@ (8008784 <SGP_GetMeasurementValues+0x368>)
 8008456:	2201      	movs	r2, #1
 8008458:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800845a:	4bce      	ldr	r3, [pc, #824]	@ (8008794 <SGP_GetMeasurementValues+0x378>)
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00d      	beq.n	800847e <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008462:	4bcd      	ldr	r3, [pc, #820]	@ (8008798 <SGP_GetMeasurementValues+0x37c>)
 8008464:	2208      	movs	r2, #8
 8008466:	0019      	movs	r1, r3
 8008468:	2059      	movs	r0, #89	@ 0x59
 800846a:	f7ff ff2f 	bl	80082cc <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800846e:	f001 fbcf 	bl	8009c10 <GetCurrentHalTicks>
 8008472:	0003      	movs	r3, r0
 8008474:	331e      	adds	r3, #30
 8008476:	001a      	movs	r2, r3
 8008478:	4bc8      	ldr	r3, [pc, #800]	@ (800879c <SGP_GetMeasurementValues+0x380>)
 800847a:	601a      	str	r2, [r3, #0]
 800847c:	e00c      	b.n	8008498 <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800847e:	4bc8      	ldr	r3, [pc, #800]	@ (80087a0 <SGP_GetMeasurementValues+0x384>)
 8008480:	2208      	movs	r2, #8
 8008482:	0019      	movs	r1, r3
 8008484:	2059      	movs	r0, #89	@ 0x59
 8008486:	f7ff ff21 	bl	80082cc <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800848a:	f001 fbc1 	bl	8009c10 <GetCurrentHalTicks>
 800848e:	0003      	movs	r3, r0
 8008490:	331e      	adds	r3, #30
 8008492:	001a      	movs	r2, r3
 8008494:	4bc1      	ldr	r3, [pc, #772]	@ (800879c <SGP_GetMeasurementValues+0x380>)
 8008496:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8008498:	4bbb      	ldr	r3, [pc, #748]	@ (8008788 <SGP_GetMeasurementValues+0x36c>)
 800849a:	2201      	movs	r2, #1
 800849c:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800849e:	4bb9      	ldr	r3, [pc, #740]	@ (8008784 <SGP_GetMeasurementValues+0x368>)
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d100      	bne.n	80084a8 <SGP_GetMeasurementValues+0x8c>
 80084a6:	e1a9      	b.n	80087fc <SGP_GetMeasurementValues+0x3e0>
 80084a8:	f7ff ff8e 	bl	80083c8 <SGP_MeasurementReady>
 80084ac:	1e03      	subs	r3, r0, #0
 80084ae:	d100      	bne.n	80084b2 <SGP_GetMeasurementValues+0x96>
 80084b0:	e1a4      	b.n	80087fc <SGP_GetMeasurementValues+0x3e0>
 80084b2:	4bbc      	ldr	r3, [pc, #752]	@ (80087a4 <SGP_GetMeasurementValues+0x388>)
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	2201      	movs	r2, #1
 80084b8:	4053      	eors	r3, r2
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d100      	bne.n	80084c2 <SGP_GetMeasurementValues+0xa6>
 80084c0:	e19c      	b.n	80087fc <SGP_GetMeasurementValues+0x3e0>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 80084c2:	4bb9      	ldr	r3, [pc, #740]	@ (80087a8 <SGP_GetMeasurementValues+0x38c>)
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	3301      	adds	r3, #1
 80084c8:	4ab8      	ldr	r2, [pc, #736]	@ (80087ac <SGP_GetMeasurementValues+0x390>)
 80084ca:	49b1      	ldr	r1, [pc, #708]	@ (8008790 <SGP_GetMeasurementValues+0x374>)
 80084cc:	2003      	movs	r0, #3
 80084ce:	f001 fb2d 	bl	8009b2c <CreateLine>
    MeasurementIsReady = true;
 80084d2:	4bb4      	ldr	r3, [pc, #720]	@ (80087a4 <SGP_GetMeasurementValues+0x388>)
 80084d4:	2201      	movs	r2, #1
 80084d6:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 80084d8:	4bb5      	ldr	r3, [pc, #724]	@ (80087b0 <SGP_GetMeasurementValues+0x394>)
 80084da:	2203      	movs	r2, #3
 80084dc:	0019      	movs	r1, r3
 80084de:	2059      	movs	r0, #89	@ 0x59
 80084e0:	f7ff fed6 	bl	8008290 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 80084e4:	4bb2      	ldr	r3, [pc, #712]	@ (80087b0 <SGP_GetMeasurementValues+0x394>)
 80084e6:	2203      	movs	r2, #3
 80084e8:	2103      	movs	r1, #3
 80084ea:	0018      	movs	r0, r3
 80084ec:	f000 f9ec 	bl	80088c8 <CheckCRC>
 80084f0:	0003      	movs	r3, r0
 80084f2:	001a      	movs	r2, r3
 80084f4:	2301      	movs	r3, #1
 80084f6:	4053      	eors	r3, r2
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d02a      	beq.n	8008554 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 80084fe:	4aad      	ldr	r2, [pc, #692]	@ (80087b4 <SGP_GetMeasurementValues+0x398>)
 8008500:	4bad      	ldr	r3, [pc, #692]	@ (80087b8 <SGP_GetMeasurementValues+0x39c>)
 8008502:	0019      	movs	r1, r3
 8008504:	2001      	movs	r0, #1
 8008506:	f001 fb11 	bl	8009b2c <CreateLine>
      Info("SGP_Measure buffer structure:");
 800850a:	4aac      	ldr	r2, [pc, #688]	@ (80087bc <SGP_GetMeasurementValues+0x3a0>)
 800850c:	4bac      	ldr	r3, [pc, #688]	@ (80087c0 <SGP_GetMeasurementValues+0x3a4>)
 800850e:	0019      	movs	r1, r3
 8008510:	2002      	movs	r0, #2
 8008512:	f001 fb0b 	bl	8009b2c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8008516:	230f      	movs	r3, #15
 8008518:	18fb      	adds	r3, r7, r3
 800851a:	2200      	movs	r2, #0
 800851c:	701a      	strb	r2, [r3, #0]
 800851e:	e012      	b.n	8008546 <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8008520:	240f      	movs	r4, #15
 8008522:	193b      	adds	r3, r7, r4
 8008524:	7818      	ldrb	r0, [r3, #0]
 8008526:	193b      	adds	r3, r7, r4
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	4aa1      	ldr	r2, [pc, #644]	@ (80087b0 <SGP_GetMeasurementValues+0x394>)
 800852c:	5cd3      	ldrb	r3, [r2, r3]
 800852e:	4aa5      	ldr	r2, [pc, #660]	@ (80087c4 <SGP_GetMeasurementValues+0x3a8>)
 8008530:	4997      	ldr	r1, [pc, #604]	@ (8008790 <SGP_GetMeasurementValues+0x374>)
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	0003      	movs	r3, r0
 8008536:	2003      	movs	r0, #3
 8008538:	f001 faf8 	bl	8009b2c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800853c:	193b      	adds	r3, r7, r4
 800853e:	781a      	ldrb	r2, [r3, #0]
 8008540:	193b      	adds	r3, r7, r4
 8008542:	3201      	adds	r2, #1
 8008544:	701a      	strb	r2, [r3, #0]
 8008546:	230f      	movs	r3, #15
 8008548:	18fb      	adds	r3, r7, r3
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	2b02      	cmp	r3, #2
 800854e:	d9e7      	bls.n	8008520 <SGP_GetMeasurementValues+0x104>
      }
      return false;
 8008550:	2300      	movs	r3, #0
 8008552:	e16b      	b.n	800882c <SGP_GetMeasurementValues+0x410>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 8008554:	f001 fb5c 	bl	8009c10 <GetCurrentHalTicks>
 8008558:	0003      	movs	r3, r0
 800855a:	22fa      	movs	r2, #250	@ 0xfa
 800855c:	0092      	lsls	r2, r2, #2
 800855e:	189a      	adds	r2, r3, r2
 8008560:	4b99      	ldr	r3, [pc, #612]	@ (80087c8 <SGP_GetMeasurementValues+0x3ac>)
 8008562:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 8008564:	f7ff ff4c 	bl	8008400 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 8008568:	4b8f      	ldr	r3, [pc, #572]	@ (80087a8 <SGP_GetMeasurementValues+0x38c>)
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	3301      	adds	r3, #1
 800856e:	b2da      	uxtb	r2, r3
 8008570:	4b8d      	ldr	r3, [pc, #564]	@ (80087a8 <SGP_GetMeasurementValues+0x38c>)
 8008572:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8008574:	4b8c      	ldr	r3, [pc, #560]	@ (80087a8 <SGP_GetMeasurementValues+0x38c>)
 8008576:	781a      	ldrb	r2, [r3, #0]
 8008578:	4b94      	ldr	r3, [pc, #592]	@ (80087cc <SGP_GetMeasurementValues+0x3b0>)
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	429a      	cmp	r2, r3
 800857e:	d200      	bcs.n	8008582 <SGP_GetMeasurementValues+0x166>
 8008580:	e13c      	b.n	80087fc <SGP_GetMeasurementValues+0x3e0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 8008582:	4b8b      	ldr	r3, [pc, #556]	@ (80087b0 <SGP_GetMeasurementValues+0x394>)
 8008584:	785b      	ldrb	r3, [r3, #1]
 8008586:	021b      	lsls	r3, r3, #8
 8008588:	b21a      	sxth	r2, r3
 800858a:	4b89      	ldr	r3, [pc, #548]	@ (80087b0 <SGP_GetMeasurementValues+0x394>)
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	b21b      	sxth	r3, r3
 8008590:	4313      	orrs	r3, r2
 8008592:	b21a      	sxth	r2, r3
 8008594:	240c      	movs	r4, #12
 8008596:	193b      	adds	r3, r7, r4
 8008598:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 800859a:	193b      	adds	r3, r7, r4
 800859c:	881b      	ldrh	r3, [r3, #0]
 800859e:	4a8c      	ldr	r2, [pc, #560]	@ (80087d0 <SGP_GetMeasurementValues+0x3b4>)
 80085a0:	497b      	ldr	r1, [pc, #492]	@ (8008790 <SGP_GetMeasurementValues+0x374>)
 80085a2:	2003      	movs	r0, #3
 80085a4:	f001 fac2 	bl	8009b2c <CreateLine>
      int32_t tempVocIndex = 0;
 80085a8:	2300      	movs	r3, #0
 80085aa:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 80085ac:	193b      	adds	r3, r7, r4
 80085ae:	8819      	ldrh	r1, [r3, #0]
 80085b0:	2308      	movs	r3, #8
 80085b2:	18fa      	adds	r2, r7, r3
 80085b4:	4b87      	ldr	r3, [pc, #540]	@ (80087d4 <SGP_GetMeasurementValues+0x3b8>)
 80085b6:	0018      	movs	r0, r3
 80085b8:	f7ff f848 	bl	800764c <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	4a86      	ldr	r2, [pc, #536]	@ (80087d8 <SGP_GetMeasurementValues+0x3bc>)
 80085c0:	4973      	ldr	r1, [pc, #460]	@ (8008790 <SGP_GetMeasurementValues+0x374>)
 80085c2:	2003      	movs	r0, #3
 80085c4:	f001 fab2 	bl	8009b2c <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 80085c8:	68ba      	ldr	r2, [r7, #8]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	dd5a      	ble.n	800868c <SGP_GetMeasurementValues+0x270>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2b64      	cmp	r3, #100	@ 0x64
 80085dc:	dc56      	bgt.n	800868c <SGP_GetMeasurementValues+0x270>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	0018      	movs	r0, r3
 80085e4:	f7fa fe6a 	bl	80032bc <__aeabi_i2d>
 80085e8:	2200      	movs	r2, #0
 80085ea:	4b7c      	ldr	r3, [pc, #496]	@ (80087dc <SGP_GetMeasurementValues+0x3c0>)
 80085ec:	f7f9 fb60 	bl	8001cb0 <__aeabi_ddiv>
 80085f0:	0002      	movs	r2, r0
 80085f2:	000b      	movs	r3, r1
 80085f4:	2000      	movs	r0, #0
 80085f6:	497a      	ldr	r1, [pc, #488]	@ (80087e0 <SGP_GetMeasurementValues+0x3c4>)
 80085f8:	f7fa fa66 	bl	8002ac8 <__aeabi_dsub>
 80085fc:	0002      	movs	r2, r0
 80085fe:	000b      	movs	r3, r1
 8008600:	0014      	movs	r4, r2
 8008602:	001d      	movs	r5, r3
 8008604:	4b77      	ldr	r3, [pc, #476]	@ (80087e4 <SGP_GetMeasurementValues+0x3c8>)
 8008606:	881b      	ldrh	r3, [r3, #0]
 8008608:	0018      	movs	r0, r3
 800860a:	f7fa fe57 	bl	80032bc <__aeabi_i2d>
 800860e:	0002      	movs	r2, r0
 8008610:	000b      	movs	r3, r1
 8008612:	0020      	movs	r0, r4
 8008614:	0029      	movs	r1, r5
 8008616:	f7f9 ff8f 	bl	8002538 <__aeabi_dmul>
 800861a:	0002      	movs	r2, r0
 800861c:	000b      	movs	r3, r1
 800861e:	0010      	movs	r0, r2
 8008620:	0019      	movs	r1, r3
 8008622:	f7f7 ffe1 	bl	80005e8 <__aeabi_d2uiz>
 8008626:	0003      	movs	r3, r0
 8008628:	b29a      	uxth	r2, r3
 800862a:	4b6f      	ldr	r3, [pc, #444]	@ (80087e8 <SGP_GetMeasurementValues+0x3cc>)
 800862c:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	0018      	movs	r0, r3
 8008634:	f7fa fe42 	bl	80032bc <__aeabi_i2d>
 8008638:	2200      	movs	r2, #0
 800863a:	4b68      	ldr	r3, [pc, #416]	@ (80087dc <SGP_GetMeasurementValues+0x3c0>)
 800863c:	f7f9 fb38 	bl	8001cb0 <__aeabi_ddiv>
 8008640:	0002      	movs	r2, r0
 8008642:	000b      	movs	r3, r1
 8008644:	0014      	movs	r4, r2
 8008646:	001d      	movs	r5, r3
 8008648:	4b66      	ldr	r3, [pc, #408]	@ (80087e4 <SGP_GetMeasurementValues+0x3c8>)
 800864a:	881b      	ldrh	r3, [r3, #0]
 800864c:	0018      	movs	r0, r3
 800864e:	f7fa fe35 	bl	80032bc <__aeabi_i2d>
 8008652:	0002      	movs	r2, r0
 8008654:	000b      	movs	r3, r1
 8008656:	0020      	movs	r0, r4
 8008658:	0029      	movs	r1, r5
 800865a:	f7f9 ff6d 	bl	8002538 <__aeabi_dmul>
 800865e:	0002      	movs	r2, r0
 8008660:	000b      	movs	r3, r1
 8008662:	0010      	movs	r0, r2
 8008664:	0019      	movs	r1, r3
 8008666:	f7f7 ffbf 	bl	80005e8 <__aeabi_d2uiz>
 800866a:	0003      	movs	r3, r0
 800866c:	b29a      	uxth	r2, r3
 800866e:	4b5f      	ldr	r3, [pc, #380]	@ (80087ec <SGP_GetMeasurementValues+0x3d0>)
 8008670:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 8008672:	4b5c      	ldr	r3, [pc, #368]	@ (80087e4 <SGP_GetMeasurementValues+0x3c8>)
 8008674:	881a      	ldrh	r2, [r3, #0]
 8008676:	4b5e      	ldr	r3, [pc, #376]	@ (80087f0 <SGP_GetMeasurementValues+0x3d4>)
 8008678:	801a      	strh	r2, [r3, #0]
      SetVocLED(Red, Green, Blue);
 800867a:	4b5d      	ldr	r3, [pc, #372]	@ (80087f0 <SGP_GetMeasurementValues+0x3d4>)
 800867c:	8818      	ldrh	r0, [r3, #0]
 800867e:	4b5a      	ldr	r3, [pc, #360]	@ (80087e8 <SGP_GetMeasurementValues+0x3cc>)
 8008680:	8819      	ldrh	r1, [r3, #0]
 8008682:	4b5a      	ldr	r3, [pc, #360]	@ (80087ec <SGP_GetMeasurementValues+0x3d0>)
 8008684:	881b      	ldrh	r3, [r3, #0]
 8008686:	001a      	movs	r2, r3
 8008688:	f000 fb96 	bl	8008db8 <SetVocLED>
      }
      if(*vocIndex > 100){
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b64      	cmp	r3, #100	@ 0x64
 8008692:	dd66      	ble.n	8008762 <SGP_GetMeasurementValues+0x346>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	0018      	movs	r0, r3
 800869a:	f7fa fe0f 	bl	80032bc <__aeabi_i2d>
 800869e:	2200      	movs	r2, #0
 80086a0:	4b4e      	ldr	r3, [pc, #312]	@ (80087dc <SGP_GetMeasurementValues+0x3c0>)
 80086a2:	f7fa fa11 	bl	8002ac8 <__aeabi_dsub>
 80086a6:	0002      	movs	r2, r0
 80086a8:	000b      	movs	r3, r1
 80086aa:	0010      	movs	r0, r2
 80086ac:	0019      	movs	r1, r3
 80086ae:	2200      	movs	r2, #0
 80086b0:	4b50      	ldr	r3, [pc, #320]	@ (80087f4 <SGP_GetMeasurementValues+0x3d8>)
 80086b2:	f7f9 fafd 	bl	8001cb0 <__aeabi_ddiv>
 80086b6:	0002      	movs	r2, r0
 80086b8:	000b      	movs	r3, r1
 80086ba:	0014      	movs	r4, r2
 80086bc:	001d      	movs	r5, r3
 80086be:	4b49      	ldr	r3, [pc, #292]	@ (80087e4 <SGP_GetMeasurementValues+0x3c8>)
 80086c0:	881b      	ldrh	r3, [r3, #0]
 80086c2:	0018      	movs	r0, r3
 80086c4:	f7fa fdfa 	bl	80032bc <__aeabi_i2d>
 80086c8:	0002      	movs	r2, r0
 80086ca:	000b      	movs	r3, r1
 80086cc:	0020      	movs	r0, r4
 80086ce:	0029      	movs	r1, r5
 80086d0:	f7f9 ff32 	bl	8002538 <__aeabi_dmul>
 80086d4:	0002      	movs	r2, r0
 80086d6:	000b      	movs	r3, r1
 80086d8:	0010      	movs	r0, r2
 80086da:	0019      	movs	r1, r3
 80086dc:	f7f7 ff84 	bl	80005e8 <__aeabi_d2uiz>
 80086e0:	0003      	movs	r3, r0
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	4b40      	ldr	r3, [pc, #256]	@ (80087e8 <SGP_GetMeasurementValues+0x3cc>)
 80086e6:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	0018      	movs	r0, r3
 80086ee:	f7fa fde5 	bl	80032bc <__aeabi_i2d>
 80086f2:	2200      	movs	r2, #0
 80086f4:	4b39      	ldr	r3, [pc, #228]	@ (80087dc <SGP_GetMeasurementValues+0x3c0>)
 80086f6:	f7fa f9e7 	bl	8002ac8 <__aeabi_dsub>
 80086fa:	0002      	movs	r2, r0
 80086fc:	000b      	movs	r3, r1
 80086fe:	0010      	movs	r0, r2
 8008700:	0019      	movs	r1, r3
 8008702:	2200      	movs	r2, #0
 8008704:	4b3b      	ldr	r3, [pc, #236]	@ (80087f4 <SGP_GetMeasurementValues+0x3d8>)
 8008706:	f7f9 fad3 	bl	8001cb0 <__aeabi_ddiv>
 800870a:	0002      	movs	r2, r0
 800870c:	000b      	movs	r3, r1
 800870e:	2000      	movs	r0, #0
 8008710:	4933      	ldr	r1, [pc, #204]	@ (80087e0 <SGP_GetMeasurementValues+0x3c4>)
 8008712:	f7fa f9d9 	bl	8002ac8 <__aeabi_dsub>
 8008716:	0002      	movs	r2, r0
 8008718:	000b      	movs	r3, r1
 800871a:	0014      	movs	r4, r2
 800871c:	001d      	movs	r5, r3
 800871e:	4b31      	ldr	r3, [pc, #196]	@ (80087e4 <SGP_GetMeasurementValues+0x3c8>)
 8008720:	881b      	ldrh	r3, [r3, #0]
 8008722:	0018      	movs	r0, r3
 8008724:	f7fa fdca 	bl	80032bc <__aeabi_i2d>
 8008728:	0002      	movs	r2, r0
 800872a:	000b      	movs	r3, r1
 800872c:	0020      	movs	r0, r4
 800872e:	0029      	movs	r1, r5
 8008730:	f7f9 ff02 	bl	8002538 <__aeabi_dmul>
 8008734:	0002      	movs	r2, r0
 8008736:	000b      	movs	r3, r1
 8008738:	0010      	movs	r0, r2
 800873a:	0019      	movs	r1, r3
 800873c:	f7f7 ff54 	bl	80005e8 <__aeabi_d2uiz>
 8008740:	0003      	movs	r3, r0
 8008742:	b29a      	uxth	r2, r3
 8008744:	4b2a      	ldr	r3, [pc, #168]	@ (80087f0 <SGP_GetMeasurementValues+0x3d4>)
 8008746:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 8008748:	4b26      	ldr	r3, [pc, #152]	@ (80087e4 <SGP_GetMeasurementValues+0x3c8>)
 800874a:	881a      	ldrh	r2, [r3, #0]
 800874c:	4b27      	ldr	r3, [pc, #156]	@ (80087ec <SGP_GetMeasurementValues+0x3d0>)
 800874e:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 8008750:	4b27      	ldr	r3, [pc, #156]	@ (80087f0 <SGP_GetMeasurementValues+0x3d4>)
 8008752:	8818      	ldrh	r0, [r3, #0]
 8008754:	4b24      	ldr	r3, [pc, #144]	@ (80087e8 <SGP_GetMeasurementValues+0x3cc>)
 8008756:	8819      	ldrh	r1, [r3, #0]
 8008758:	4b24      	ldr	r3, [pc, #144]	@ (80087ec <SGP_GetMeasurementValues+0x3d0>)
 800875a:	881b      	ldrh	r3, [r3, #0]
 800875c:	001a      	movs	r2, r3
 800875e:	f000 fb2b 	bl	8008db8 <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 8008762:	4b11      	ldr	r3, [pc, #68]	@ (80087a8 <SGP_GetMeasurementValues+0x38c>)
 8008764:	2200      	movs	r2, #0
 8008766:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 8008768:	4a23      	ldr	r2, [pc, #140]	@ (80087f8 <SGP_GetMeasurementValues+0x3dc>)
 800876a:	4b09      	ldr	r3, [pc, #36]	@ (8008790 <SGP_GetMeasurementValues+0x374>)
 800876c:	0019      	movs	r1, r3
 800876e:	2003      	movs	r0, #3
 8008770:	f001 f9dc 	bl	8009b2c <CreateLine>
      HT_MeasurementReceived = false;
 8008774:	4b07      	ldr	r3, [pc, #28]	@ (8008794 <SGP_GetMeasurementValues+0x378>)
 8008776:	2200      	movs	r2, #0
 8008778:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800877a:	4b03      	ldr	r3, [pc, #12]	@ (8008788 <SGP_GetMeasurementValues+0x36c>)
 800877c:	2200      	movs	r2, #0
 800877e:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 8008780:	2301      	movs	r3, #1
 8008782:	e053      	b.n	800882c <SGP_GetMeasurementValues+0x410>
 8008784:	20002906 	.word	0x20002906
 8008788:	200029b1 	.word	0x200029b1
 800878c:	0801ba24 	.word	0x0801ba24
 8008790:	0801ba50 	.word	0x0801ba50
 8008794:	200029b0 	.word	0x200029b0
 8008798:	20000040 	.word	0x20000040
 800879c:	20000054 	.word	0x20000054
 80087a0:	20000038 	.word	0x20000038
 80087a4:	20002907 	.word	0x20002907
 80087a8:	20002905 	.word	0x20002905
 80087ac:	0801ba54 	.word	0x0801ba54
 80087b0:	200028fc 	.word	0x200028fc
 80087b4:	0801ba84 	.word	0x0801ba84
 80087b8:	0801baa8 	.word	0x0801baa8
 80087bc:	0801baac 	.word	0x0801baac
 80087c0:	0801bacc 	.word	0x0801bacc
 80087c4:	0801bad0 	.word	0x0801bad0
 80087c8:	20000050 	.word	0x20000050
 80087cc:	20000048 	.word	0x20000048
 80087d0:	0801baf0 	.word	0x0801baf0
 80087d4:	20002908 	.word	0x20002908
 80087d8:	0801bb04 	.word	0x0801bb04
 80087dc:	40590000 	.word	0x40590000
 80087e0:	3ff00000 	.word	0x3ff00000
 80087e4:	20000058 	.word	0x20000058
 80087e8:	200029b6 	.word	0x200029b6
 80087ec:	200029b4 	.word	0x200029b4
 80087f0:	200029b2 	.word	0x200029b2
 80087f4:	40790000 	.word	0x40790000
 80087f8:	0801bb18 	.word	0x0801bb18
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 80087fc:	f7ff fdf2 	bl	80083e4 <SGP_MeasurementDone>
 8008800:	1e03      	subs	r3, r0, #0
 8008802:	d012      	beq.n	800882a <SGP_GetMeasurementValues+0x40e>
 8008804:	4b0b      	ldr	r3, [pc, #44]	@ (8008834 <SGP_GetMeasurementValues+0x418>)
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00e      	beq.n	800882a <SGP_GetMeasurementValues+0x40e>
 800880c:	4b0a      	ldr	r3, [pc, #40]	@ (8008838 <SGP_GetMeasurementValues+0x41c>)
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d00a      	beq.n	800882a <SGP_GetMeasurementValues+0x40e>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 8008814:	4a09      	ldr	r2, [pc, #36]	@ (800883c <SGP_GetMeasurementValues+0x420>)
 8008816:	4b0a      	ldr	r3, [pc, #40]	@ (8008840 <SGP_GetMeasurementValues+0x424>)
 8008818:	0019      	movs	r1, r3
 800881a:	2003      	movs	r0, #3
 800881c:	f001 f986 	bl	8009b2c <CreateLine>
    SGP_StartMeasurement();
 8008820:	f7ff fd8c 	bl	800833c <SGP_StartMeasurement>
    SGP_MsgSent = false;
 8008824:	4b07      	ldr	r3, [pc, #28]	@ (8008844 <SGP_GetMeasurementValues+0x428>)
 8008826:	2200      	movs	r2, #0
 8008828:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800882a:	2300      	movs	r3, #0
}
 800882c:	0018      	movs	r0, r3
 800882e:	46bd      	mov	sp, r7
 8008830:	b004      	add	sp, #16
 8008832:	bdb0      	pop	{r4, r5, r7, pc}
 8008834:	20002906 	.word	0x20002906
 8008838:	20002907 	.word	0x20002907
 800883c:	0801bb3c 	.word	0x0801bb3c
 8008840:	0801ba50 	.word	0x0801ba50
 8008844:	200029b1 	.word	0x200029b1

08008848 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800884e:	4b1a      	ldr	r3, [pc, #104]	@ (80088b8 <SGP_DeviceConnected+0x70>)
 8008850:	2202      	movs	r2, #2
 8008852:	0019      	movs	r1, r3
 8008854:	2059      	movs	r0, #89	@ 0x59
 8008856:	f7ff fd39 	bl	80082cc <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800885a:	2001      	movs	r0, #1
 800885c:	f001 fcf6 	bl	800a24c <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8008860:	4b16      	ldr	r3, [pc, #88]	@ (80088bc <SGP_DeviceConnected+0x74>)
 8008862:	2209      	movs	r2, #9
 8008864:	0019      	movs	r1, r3
 8008866:	2059      	movs	r0, #89	@ 0x59
 8008868:	f7ff fd12 	bl	8008290 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800886c:	1dfb      	adds	r3, r7, #7
 800886e:	2200      	movs	r2, #0
 8008870:	701a      	strb	r2, [r3, #0]
 8008872:	e011      	b.n	8008898 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8008874:	1dfb      	adds	r3, r7, #7
 8008876:	7818      	ldrb	r0, [r3, #0]
 8008878:	1dfb      	adds	r3, r7, #7
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	4a0f      	ldr	r2, [pc, #60]	@ (80088bc <SGP_DeviceConnected+0x74>)
 800887e:	5cd3      	ldrb	r3, [r2, r3]
 8008880:	4a0f      	ldr	r2, [pc, #60]	@ (80088c0 <SGP_DeviceConnected+0x78>)
 8008882:	4910      	ldr	r1, [pc, #64]	@ (80088c4 <SGP_DeviceConnected+0x7c>)
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	0003      	movs	r3, r0
 8008888:	2002      	movs	r0, #2
 800888a:	f001 f94f 	bl	8009b2c <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800888e:	1dfb      	adds	r3, r7, #7
 8008890:	781a      	ldrb	r2, [r3, #0]
 8008892:	1dfb      	adds	r3, r7, #7
 8008894:	3201      	adds	r2, #1
 8008896:	701a      	strb	r2, [r3, #0]
 8008898:	1dfb      	adds	r3, r7, #7
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	2b08      	cmp	r3, #8
 800889e:	d9e9      	bls.n	8008874 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 80088a0:	4b06      	ldr	r3, [pc, #24]	@ (80088bc <SGP_DeviceConnected+0x74>)
 80088a2:	2203      	movs	r2, #3
 80088a4:	2109      	movs	r1, #9
 80088a6:	0018      	movs	r0, r3
 80088a8:	f000 f80e 	bl	80088c8 <CheckCRC>
 80088ac:	0003      	movs	r3, r0
}
 80088ae:	0018      	movs	r0, r3
 80088b0:	46bd      	mov	sp, r7
 80088b2:	b002      	add	sp, #8
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	46c0      	nop			@ (mov r8, r8)
 80088b8:	20000034 	.word	0x20000034
 80088bc:	200028fc 	.word	0x200028fc
 80088c0:	0801bb5c 	.word	0x0801bb5c
 80088c4:	0801bacc 	.word	0x0801bacc

080088c8 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 80088c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088ca:	b08f      	sub	sp, #60	@ 0x3c
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6278      	str	r0, [r7, #36]	@ 0x24
 80088d0:	0008      	movs	r0, r1
 80088d2:	0011      	movs	r1, r2
 80088d4:	2323      	movs	r3, #35	@ 0x23
 80088d6:	18fb      	adds	r3, r7, r3
 80088d8:	1c02      	adds	r2, r0, #0
 80088da:	701a      	strb	r2, [r3, #0]
 80088dc:	2322      	movs	r3, #34	@ 0x22
 80088de:	18fb      	adds	r3, r7, r3
 80088e0:	1c0a      	adds	r2, r1, #0
 80088e2:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80088e4:	2317      	movs	r3, #23
 80088e6:	2220      	movs	r2, #32
 80088e8:	189b      	adds	r3, r3, r2
 80088ea:	19db      	adds	r3, r3, r7
 80088ec:	2200      	movs	r2, #0
 80088ee:	701a      	strb	r2, [r3, #0]
 80088f0:	e09f      	b.n	8008a32 <CheckCRC+0x16a>
 80088f2:	466b      	mov	r3, sp
 80088f4:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 80088f6:	2322      	movs	r3, #34	@ 0x22
 80088f8:	18fb      	adds	r3, r7, r3
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	001a      	movs	r2, r3
 80088fe:	3a01      	subs	r2, #1
 8008900:	633a      	str	r2, [r7, #48]	@ 0x30
 8008902:	60bb      	str	r3, [r7, #8]
 8008904:	2200      	movs	r2, #0
 8008906:	60fa      	str	r2, [r7, #12]
 8008908:	68b8      	ldr	r0, [r7, #8]
 800890a:	68f9      	ldr	r1, [r7, #12]
 800890c:	0002      	movs	r2, r0
 800890e:	0f52      	lsrs	r2, r2, #29
 8008910:	000c      	movs	r4, r1
 8008912:	00e4      	lsls	r4, r4, #3
 8008914:	61fc      	str	r4, [r7, #28]
 8008916:	69fc      	ldr	r4, [r7, #28]
 8008918:	4314      	orrs	r4, r2
 800891a:	61fc      	str	r4, [r7, #28]
 800891c:	0002      	movs	r2, r0
 800891e:	00d2      	lsls	r2, r2, #3
 8008920:	61ba      	str	r2, [r7, #24]
 8008922:	603b      	str	r3, [r7, #0]
 8008924:	2200      	movs	r2, #0
 8008926:	607a      	str	r2, [r7, #4]
 8008928:	6838      	ldr	r0, [r7, #0]
 800892a:	6879      	ldr	r1, [r7, #4]
 800892c:	0002      	movs	r2, r0
 800892e:	0f52      	lsrs	r2, r2, #29
 8008930:	000c      	movs	r4, r1
 8008932:	00e4      	lsls	r4, r4, #3
 8008934:	617c      	str	r4, [r7, #20]
 8008936:	697c      	ldr	r4, [r7, #20]
 8008938:	4314      	orrs	r4, r2
 800893a:	617c      	str	r4, [r7, #20]
 800893c:	0002      	movs	r2, r0
 800893e:	00d2      	lsls	r2, r2, #3
 8008940:	613a      	str	r2, [r7, #16]
 8008942:	3307      	adds	r3, #7
 8008944:	08db      	lsrs	r3, r3, #3
 8008946:	00db      	lsls	r3, r3, #3
 8008948:	466a      	mov	r2, sp
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	469d      	mov	sp, r3
 800894e:	466b      	mov	r3, sp
 8008950:	3300      	adds	r3, #0
 8008952:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8008954:	2316      	movs	r3, #22
 8008956:	2220      	movs	r2, #32
 8008958:	189b      	adds	r3, r3, r2
 800895a:	19db      	adds	r3, r3, r7
 800895c:	2200      	movs	r2, #0
 800895e:	701a      	strb	r2, [r3, #0]
 8008960:	e01e      	b.n	80089a0 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 8008962:	2317      	movs	r3, #23
 8008964:	2220      	movs	r2, #32
 8008966:	189b      	adds	r3, r3, r2
 8008968:	19db      	adds	r3, r3, r7
 800896a:	781a      	ldrb	r2, [r3, #0]
 800896c:	2116      	movs	r1, #22
 800896e:	2320      	movs	r3, #32
 8008970:	18cb      	adds	r3, r1, r3
 8008972:	19db      	adds	r3, r3, r7
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	18d3      	adds	r3, r2, r3
 8008978:	001a      	movs	r2, r3
 800897a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897c:	189a      	adds	r2, r3, r2
 800897e:	0008      	movs	r0, r1
 8008980:	2320      	movs	r3, #32
 8008982:	18cb      	adds	r3, r1, r3
 8008984:	19db      	adds	r3, r3, r7
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	7811      	ldrb	r1, [r2, #0]
 800898a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800898c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800898e:	2320      	movs	r3, #32
 8008990:	18c3      	adds	r3, r0, r3
 8008992:	19db      	adds	r3, r3, r7
 8008994:	781a      	ldrb	r2, [r3, #0]
 8008996:	2320      	movs	r3, #32
 8008998:	18c3      	adds	r3, r0, r3
 800899a:	19db      	adds	r3, r3, r7
 800899c:	3201      	adds	r2, #1
 800899e:	701a      	strb	r2, [r3, #0]
 80089a0:	2316      	movs	r3, #22
 80089a2:	2220      	movs	r2, #32
 80089a4:	189b      	adds	r3, r3, r2
 80089a6:	19da      	adds	r2, r3, r7
 80089a8:	2322      	movs	r3, #34	@ 0x22
 80089aa:	18fb      	adds	r3, r7, r3
 80089ac:	7812      	ldrb	r2, [r2, #0]
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d3d6      	bcc.n	8008962 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 80089b4:	2417      	movs	r4, #23
 80089b6:	2320      	movs	r3, #32
 80089b8:	18e3      	adds	r3, r4, r3
 80089ba:	19db      	adds	r3, r3, r7
 80089bc:	781a      	ldrb	r2, [r3, #0]
 80089be:	2322      	movs	r3, #34	@ 0x22
 80089c0:	18fb      	adds	r3, r7, r3
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	18d3      	adds	r3, r2, r3
 80089c6:	3b01      	subs	r3, #1
 80089c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089ca:	18d2      	adds	r2, r2, r3
 80089cc:	250b      	movs	r5, #11
 80089ce:	2320      	movs	r3, #32
 80089d0:	18eb      	adds	r3, r5, r3
 80089d2:	19db      	adds	r3, r3, r7
 80089d4:	7812      	ldrb	r2, [r2, #0]
 80089d6:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 80089d8:	2322      	movs	r3, #34	@ 0x22
 80089da:	18fb      	adds	r3, r7, r3
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	3b01      	subs	r3, #1
 80089e0:	b2da      	uxtb	r2, r3
 80089e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e4:	0011      	movs	r1, r2
 80089e6:	0018      	movs	r0, r3
 80089e8:	f000 f838 	bl	8008a5c <CalculateCRC>
 80089ec:	0003      	movs	r3, r0
 80089ee:	001a      	movs	r2, r3
 80089f0:	2320      	movs	r3, #32
 80089f2:	18eb      	adds	r3, r5, r3
 80089f4:	19db      	adds	r3, r3, r7
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d00c      	beq.n	8008a16 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 80089fc:	2320      	movs	r3, #32
 80089fe:	18e3      	adds	r3, r4, r3
 8008a00:	19db      	adds	r3, r3, r7
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	3301      	adds	r3, #1
 8008a06:	4a13      	ldr	r2, [pc, #76]	@ (8008a54 <CheckCRC+0x18c>)
 8008a08:	4913      	ldr	r1, [pc, #76]	@ (8008a58 <CheckCRC+0x190>)
 8008a0a:	2001      	movs	r0, #1
 8008a0c:	f001 f88e 	bl	8009b2c <CreateLine>
      return false;
 8008a10:	2300      	movs	r3, #0
 8008a12:	46b5      	mov	sp, r6
 8008a14:	e019      	b.n	8008a4a <CheckCRC+0x182>
 8008a16:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8008a18:	2217      	movs	r2, #23
 8008a1a:	2320      	movs	r3, #32
 8008a1c:	18d3      	adds	r3, r2, r3
 8008a1e:	19db      	adds	r3, r3, r7
 8008a20:	2120      	movs	r1, #32
 8008a22:	1852      	adds	r2, r2, r1
 8008a24:	19d1      	adds	r1, r2, r7
 8008a26:	2222      	movs	r2, #34	@ 0x22
 8008a28:	18ba      	adds	r2, r7, r2
 8008a2a:	7809      	ldrb	r1, [r1, #0]
 8008a2c:	7812      	ldrb	r2, [r2, #0]
 8008a2e:	188a      	adds	r2, r1, r2
 8008a30:	701a      	strb	r2, [r3, #0]
 8008a32:	2317      	movs	r3, #23
 8008a34:	2220      	movs	r2, #32
 8008a36:	189b      	adds	r3, r3, r2
 8008a38:	19da      	adds	r2, r3, r7
 8008a3a:	2323      	movs	r3, #35	@ 0x23
 8008a3c:	18fb      	adds	r3, r7, r3
 8008a3e:	7812      	ldrb	r2, [r2, #0]
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d200      	bcs.n	8008a48 <CheckCRC+0x180>
 8008a46:	e754      	b.n	80088f2 <CheckCRC+0x2a>
    }
  }
  return true;
 8008a48:	2301      	movs	r3, #1
}
 8008a4a:	0018      	movs	r0, r3
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	b00f      	add	sp, #60	@ 0x3c
 8008a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a52:	46c0      	nop			@ (mov r8, r8)
 8008a54:	0801bb7c 	.word	0x0801bb7c
 8008a58:	0801baa8 	.word	0x0801baa8

08008a5c <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	000a      	movs	r2, r1
 8008a66:	1cfb      	adds	r3, r7, #3
 8008a68:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8008a6a:	230f      	movs	r3, #15
 8008a6c:	18fb      	adds	r3, r7, r3
 8008a6e:	22ff      	movs	r2, #255	@ 0xff
 8008a70:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8008a72:	230e      	movs	r3, #14
 8008a74:	18fb      	adds	r3, r7, r3
 8008a76:	2200      	movs	r2, #0
 8008a78:	701a      	strb	r2, [r3, #0]
 8008a7a:	e037      	b.n	8008aec <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8008a7c:	230e      	movs	r3, #14
 8008a7e:	18fb      	adds	r3, r7, r3
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	18d3      	adds	r3, r2, r3
 8008a86:	7819      	ldrb	r1, [r3, #0]
 8008a88:	220f      	movs	r2, #15
 8008a8a:	18bb      	adds	r3, r7, r2
 8008a8c:	18ba      	adds	r2, r7, r2
 8008a8e:	7812      	ldrb	r2, [r2, #0]
 8008a90:	404a      	eors	r2, r1
 8008a92:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8008a94:	230d      	movs	r3, #13
 8008a96:	18fb      	adds	r3, r7, r3
 8008a98:	2200      	movs	r2, #0
 8008a9a:	701a      	strb	r2, [r3, #0]
 8008a9c:	e01b      	b.n	8008ad6 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 8008a9e:	210f      	movs	r1, #15
 8008aa0:	187b      	adds	r3, r7, r1
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	b25b      	sxtb	r3, r3
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	da09      	bge.n	8008abe <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 8008aaa:	187b      	adds	r3, r7, r1
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	005b      	lsls	r3, r3, #1
 8008ab0:	b25b      	sxtb	r3, r3
 8008ab2:	2231      	movs	r2, #49	@ 0x31
 8008ab4:	4053      	eors	r3, r2
 8008ab6:	b25a      	sxtb	r2, r3
 8008ab8:	187b      	adds	r3, r7, r1
 8008aba:	701a      	strb	r2, [r3, #0]
 8008abc:	e005      	b.n	8008aca <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 8008abe:	230f      	movs	r3, #15
 8008ac0:	18fa      	adds	r2, r7, r3
 8008ac2:	18fb      	adds	r3, r7, r3
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	18db      	adds	r3, r3, r3
 8008ac8:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8008aca:	210d      	movs	r1, #13
 8008acc:	187b      	adds	r3, r7, r1
 8008ace:	781a      	ldrb	r2, [r3, #0]
 8008ad0:	187b      	adds	r3, r7, r1
 8008ad2:	3201      	adds	r2, #1
 8008ad4:	701a      	strb	r2, [r3, #0]
 8008ad6:	230d      	movs	r3, #13
 8008ad8:	18fb      	adds	r3, r7, r3
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	2b07      	cmp	r3, #7
 8008ade:	d9de      	bls.n	8008a9e <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8008ae0:	210e      	movs	r1, #14
 8008ae2:	187b      	adds	r3, r7, r1
 8008ae4:	781a      	ldrb	r2, [r3, #0]
 8008ae6:	187b      	adds	r3, r7, r1
 8008ae8:	3201      	adds	r2, #1
 8008aea:	701a      	strb	r2, [r3, #0]
 8008aec:	230e      	movs	r3, #14
 8008aee:	18fa      	adds	r2, r7, r3
 8008af0:	1cfb      	adds	r3, r7, #3
 8008af2:	7812      	ldrb	r2, [r2, #0]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d3c0      	bcc.n	8008a7c <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 8008afa:	230f      	movs	r3, #15
 8008afc:	18fb      	adds	r3, r7, r3
 8008afe:	781b      	ldrb	r3, [r3, #0]
}
 8008b00:	0018      	movs	r0, r3
 8008b02:	46bd      	mov	sp, r7
 8008b04:	b004      	add	sp, #16
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4936      	ldr	r1, [pc, #216]	@ (8008bf0 <SGP_GetHT+0xe8>)
 8008b18:	1c18      	adds	r0, r3, #0
 8008b1a:	f7f7 fe4f 	bl	80007bc <__aeabi_fadd>
 8008b1e:	1c03      	adds	r3, r0, #0
 8008b20:	4934      	ldr	r1, [pc, #208]	@ (8008bf4 <SGP_GetHT+0xec>)
 8008b22:	1c18      	adds	r0, r3, #0
 8008b24:	f7f7 ffd4 	bl	8000ad0 <__aeabi_fdiv>
 8008b28:	1c03      	adds	r3, r0, #0
 8008b2a:	4933      	ldr	r1, [pc, #204]	@ (8008bf8 <SGP_GetHT+0xf0>)
 8008b2c:	1c18      	adds	r0, r3, #0
 8008b2e:	f7f8 f9b5 	bl	8000e9c <__aeabi_fmul>
 8008b32:	1c03      	adds	r3, r0, #0
 8008b34:	1c18      	adds	r0, r3, #0
 8008b36:	f7f7 fd3f 	bl	80005b8 <__aeabi_f2uiz>
 8008b3a:	0003      	movs	r3, r0
 8008b3c:	b29a      	uxth	r2, r3
 8008b3e:	4b2f      	ldr	r3, [pc, #188]	@ (8008bfc <SGP_GetHT+0xf4>)
 8008b40:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	492e      	ldr	r1, [pc, #184]	@ (8008c00 <SGP_GetHT+0xf8>)
 8008b48:	1c18      	adds	r0, r3, #0
 8008b4a:	f7f7 ffc1 	bl	8000ad0 <__aeabi_fdiv>
 8008b4e:	1c03      	adds	r3, r0, #0
 8008b50:	4929      	ldr	r1, [pc, #164]	@ (8008bf8 <SGP_GetHT+0xf0>)
 8008b52:	1c18      	adds	r0, r3, #0
 8008b54:	f7f8 f9a2 	bl	8000e9c <__aeabi_fmul>
 8008b58:	1c03      	adds	r3, r0, #0
 8008b5a:	1c18      	adds	r0, r3, #0
 8008b5c:	f7f7 fd2c 	bl	80005b8 <__aeabi_f2uiz>
 8008b60:	0003      	movs	r3, r0
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	4b27      	ldr	r3, [pc, #156]	@ (8008c04 <SGP_GetHT+0xfc>)
 8008b66:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8008b68:	4b26      	ldr	r3, [pc, #152]	@ (8008c04 <SGP_GetHT+0xfc>)
 8008b6a:	881b      	ldrh	r3, [r3, #0]
 8008b6c:	0a1b      	lsrs	r3, r3, #8
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	b2da      	uxtb	r2, r3
 8008b72:	4b25      	ldr	r3, [pc, #148]	@ (8008c08 <SGP_GetHT+0x100>)
 8008b74:	709a      	strb	r2, [r3, #2]
 8008b76:	4b24      	ldr	r3, [pc, #144]	@ (8008c08 <SGP_GetHT+0x100>)
 8008b78:	789a      	ldrb	r2, [r3, #2]
 8008b7a:	210c      	movs	r1, #12
 8008b7c:	187b      	adds	r3, r7, r1
 8008b7e:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8008b80:	4b20      	ldr	r3, [pc, #128]	@ (8008c04 <SGP_GetHT+0xfc>)
 8008b82:	881b      	ldrh	r3, [r3, #0]
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	4b20      	ldr	r3, [pc, #128]	@ (8008c08 <SGP_GetHT+0x100>)
 8008b88:	70da      	strb	r2, [r3, #3]
 8008b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8008c08 <SGP_GetHT+0x100>)
 8008b8c:	78da      	ldrb	r2, [r3, #3]
 8008b8e:	187b      	adds	r3, r7, r1
 8008b90:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 8008b92:	187b      	adds	r3, r7, r1
 8008b94:	2102      	movs	r1, #2
 8008b96:	0018      	movs	r0, r3
 8008b98:	f7ff ff60 	bl	8008a5c <CalculateCRC>
 8008b9c:	0003      	movs	r3, r0
 8008b9e:	001a      	movs	r2, r3
 8008ba0:	4b19      	ldr	r3, [pc, #100]	@ (8008c08 <SGP_GetHT+0x100>)
 8008ba2:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 8008ba4:	4b15      	ldr	r3, [pc, #84]	@ (8008bfc <SGP_GetHT+0xf4>)
 8008ba6:	881b      	ldrh	r3, [r3, #0]
 8008ba8:	0a1b      	lsrs	r3, r3, #8
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	b2da      	uxtb	r2, r3
 8008bae:	4b16      	ldr	r3, [pc, #88]	@ (8008c08 <SGP_GetHT+0x100>)
 8008bb0:	715a      	strb	r2, [r3, #5]
 8008bb2:	4b15      	ldr	r3, [pc, #84]	@ (8008c08 <SGP_GetHT+0x100>)
 8008bb4:	795a      	ldrb	r2, [r3, #5]
 8008bb6:	2108      	movs	r1, #8
 8008bb8:	187b      	adds	r3, r7, r1
 8008bba:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 8008bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8008bfc <SGP_GetHT+0xf4>)
 8008bbe:	881b      	ldrh	r3, [r3, #0]
 8008bc0:	b2da      	uxtb	r2, r3
 8008bc2:	4b11      	ldr	r3, [pc, #68]	@ (8008c08 <SGP_GetHT+0x100>)
 8008bc4:	719a      	strb	r2, [r3, #6]
 8008bc6:	4b10      	ldr	r3, [pc, #64]	@ (8008c08 <SGP_GetHT+0x100>)
 8008bc8:	799a      	ldrb	r2, [r3, #6]
 8008bca:	187b      	adds	r3, r7, r1
 8008bcc:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 8008bce:	187b      	adds	r3, r7, r1
 8008bd0:	2102      	movs	r1, #2
 8008bd2:	0018      	movs	r0, r3
 8008bd4:	f7ff ff42 	bl	8008a5c <CalculateCRC>
 8008bd8:	0003      	movs	r3, r0
 8008bda:	001a      	movs	r2, r3
 8008bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8008c08 <SGP_GetHT+0x100>)
 8008bde:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 8008be0:	4b0a      	ldr	r3, [pc, #40]	@ (8008c0c <SGP_GetHT+0x104>)
 8008be2:	2201      	movs	r2, #1
 8008be4:	701a      	strb	r2, [r3, #0]
}
 8008be6:	46c0      	nop			@ (mov r8, r8)
 8008be8:	46bd      	mov	sp, r7
 8008bea:	b004      	add	sp, #16
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	46c0      	nop			@ (mov r8, r8)
 8008bf0:	42340000 	.word	0x42340000
 8008bf4:	432f0000 	.word	0x432f0000
 8008bf8:	477fff00 	.word	0x477fff00
 8008bfc:	200029ae 	.word	0x200029ae
 8008c00:	42c80000 	.word	0x42c80000
 8008c04:	200029ac 	.word	0x200029ac
 8008c08:	20000040 	.word	0x20000040
 8008c0c:	200029b0 	.word	0x200029b0

08008c10 <InitDone>:
static bool init = true;
static bool buttonHeld = false;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;

void InitDone(){
 8008c10:	b580      	push	{r7, lr}
 8008c12:	af00      	add	r7, sp, #0
  init = false;
 8008c14:	4b02      	ldr	r3, [pc, #8]	@ (8008c20 <InitDone+0x10>)
 8008c16:	2200      	movs	r2, #0
 8008c18:	701a      	strb	r2, [r3, #0]
}
 8008c1a:	46c0      	nop			@ (mov r8, r8)
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	2000005a 	.word	0x2000005a

08008c24 <batteryChargeCheck>:

Battery_Status batteryChargeCheck(){
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
  Battery_Status status;
  float batteryCharge = ReadBatteryVoltage();
 8008c2a:	f7fc fd03 	bl	8005634 <ReadBatteryVoltage>
 8008c2e:	1c03      	adds	r3, r0, #0
 8008c30:	603b      	str	r3, [r7, #0]
  if(batteryCharge < 3.5){
 8008c32:	491f      	ldr	r1, [pc, #124]	@ (8008cb0 <batteryChargeCheck+0x8c>)
 8008c34:	6838      	ldr	r0, [r7, #0]
 8008c36:	f7f7 fc49 	bl	80004cc <__aeabi_fcmplt>
 8008c3a:	1e03      	subs	r3, r0, #0
 8008c3c:	d002      	beq.n	8008c44 <batteryChargeCheck+0x20>
    status = BATTERY_CRITICAL;
 8008c3e:	1dfb      	adds	r3, r7, #7
 8008c40:	2200      	movs	r2, #0
 8008c42:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 8008c44:	6838      	ldr	r0, [r7, #0]
 8008c46:	f7fa fb8b 	bl	8003360 <__aeabi_f2d>
 8008c4a:	4a1a      	ldr	r2, [pc, #104]	@ (8008cb4 <batteryChargeCheck+0x90>)
 8008c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8008cb8 <batteryChargeCheck+0x94>)
 8008c4e:	f7f7 fc03 	bl	8000458 <__aeabi_dcmplt>
 8008c52:	1e03      	subs	r3, r0, #0
 8008c54:	d008      	beq.n	8008c68 <batteryChargeCheck+0x44>
 8008c56:	4916      	ldr	r1, [pc, #88]	@ (8008cb0 <batteryChargeCheck+0x8c>)
 8008c58:	6838      	ldr	r0, [r7, #0]
 8008c5a:	f7f7 fc55 	bl	8000508 <__aeabi_fcmpge>
 8008c5e:	1e03      	subs	r3, r0, #0
 8008c60:	d002      	beq.n	8008c68 <batteryChargeCheck+0x44>
    status = BATTERY_LOW;
 8008c62:	1dfb      	adds	r3, r7, #7
 8008c64:	2202      	movs	r2, #2
 8008c66:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 8008c68:	2181      	movs	r1, #129	@ 0x81
 8008c6a:	05c9      	lsls	r1, r1, #23
 8008c6c:	6838      	ldr	r0, [r7, #0]
 8008c6e:	f7f7 fc2d 	bl	80004cc <__aeabi_fcmplt>
 8008c72:	1e03      	subs	r3, r0, #0
 8008c74:	d00b      	beq.n	8008c8e <batteryChargeCheck+0x6a>
 8008c76:	6838      	ldr	r0, [r7, #0]
 8008c78:	f7fa fb72 	bl	8003360 <__aeabi_f2d>
 8008c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8008cb4 <batteryChargeCheck+0x90>)
 8008c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8008cb8 <batteryChargeCheck+0x94>)
 8008c80:	f7f7 fc08 	bl	8000494 <__aeabi_dcmpge>
 8008c84:	1e03      	subs	r3, r0, #0
 8008c86:	d002      	beq.n	8008c8e <batteryChargeCheck+0x6a>
    status = BATTERY_GOOD;
 8008c88:	1dfb      	adds	r3, r7, #7
 8008c8a:	2203      	movs	r2, #3
 8008c8c:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 8008c8e:	2181      	movs	r1, #129	@ 0x81
 8008c90:	05c9      	lsls	r1, r1, #23
 8008c92:	6838      	ldr	r0, [r7, #0]
 8008c94:	f7f7 fc38 	bl	8000508 <__aeabi_fcmpge>
 8008c98:	1e03      	subs	r3, r0, #0
 8008c9a:	d002      	beq.n	8008ca2 <batteryChargeCheck+0x7e>
    status = BATTERY_FULL;
 8008c9c:	1dfb      	adds	r3, r7, #7
 8008c9e:	2204      	movs	r2, #4
 8008ca0:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 8008ca2:	1dfb      	adds	r3, r7, #7
 8008ca4:	781b      	ldrb	r3, [r3, #0]
}
 8008ca6:	0018      	movs	r0, r3
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	b002      	add	sp, #8
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	46c0      	nop			@ (mov r8, r8)
 8008cb0:	40600000 	.word	0x40600000
 8008cb4:	9999999a 	.word	0x9999999a
 8008cb8:	400d9999 	.word	0x400d9999

08008cbc <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 8008cbc:	b590      	push	{r4, r7, lr}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	0004      	movs	r4, r0
 8008cc4:	0008      	movs	r0, r1
 8008cc6:	0011      	movs	r1, r2
 8008cc8:	1dbb      	adds	r3, r7, #6
 8008cca:	1c22      	adds	r2, r4, #0
 8008ccc:	801a      	strh	r2, [r3, #0]
 8008cce:	1d3b      	adds	r3, r7, #4
 8008cd0:	1c02      	adds	r2, r0, #0
 8008cd2:	801a      	strh	r2, [r3, #0]
 8008cd4:	1cbb      	adds	r3, r7, #2
 8008cd6:	1c0a      	adds	r2, r1, #0
 8008cd8:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8008cda:	4b0f      	ldr	r3, [pc, #60]	@ (8008d18 <SetStatusLED+0x5c>)
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d107      	bne.n	8008cf2 <SetStatusLED+0x36>
 8008ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8008d1c <SetStatusLED+0x60>)
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d103      	bne.n	8008cf2 <SetStatusLED+0x36>
 8008cea:	4b0d      	ldr	r3, [pc, #52]	@ (8008d20 <SetStatusLED+0x64>)
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d00e      	beq.n	8008d10 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 8008cf2:	2380      	movs	r3, #128	@ 0x80
 8008cf4:	05db      	lsls	r3, r3, #23
 8008cf6:	1dba      	adds	r2, r7, #6
 8008cf8:	8812      	ldrh	r2, [r2, #0]
 8008cfa:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 8008cfc:	2380      	movs	r3, #128	@ 0x80
 8008cfe:	05db      	lsls	r3, r3, #23
 8008d00:	1d3a      	adds	r2, r7, #4
 8008d02:	8812      	ldrh	r2, [r2, #0]
 8008d04:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 8008d06:	2380      	movs	r3, #128	@ 0x80
 8008d08:	05db      	lsls	r3, r3, #23
 8008d0a:	1cba      	adds	r2, r7, #2
 8008d0c:	8812      	ldrh	r2, [r2, #0]
 8008d0e:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8008d10:	46c0      	nop			@ (mov r8, r8)
 8008d12:	46bd      	mov	sp, r7
 8008d14:	b003      	add	sp, #12
 8008d16:	bd90      	pop	{r4, r7, pc}
 8008d18:	200029b9 	.word	0x200029b9
 8008d1c:	2000005a 	.word	0x2000005a
 8008d20:	200029ba 	.word	0x200029ba

08008d24 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 8008d24:	b590      	push	{r4, r7, lr}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	0004      	movs	r4, r0
 8008d2c:	0008      	movs	r0, r1
 8008d2e:	0011      	movs	r1, r2
 8008d30:	1dfb      	adds	r3, r7, #7
 8008d32:	1c22      	adds	r2, r4, #0
 8008d34:	701a      	strb	r2, [r3, #0]
 8008d36:	1dbb      	adds	r3, r7, #6
 8008d38:	1c02      	adds	r2, r0, #0
 8008d3a:	701a      	strb	r2, [r3, #0]
 8008d3c:	1d7b      	adds	r3, r7, #5
 8008d3e:	1c0a      	adds	r2, r1, #0
 8008d40:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 8008d42:	4b19      	ldr	r3, [pc, #100]	@ (8008da8 <SetDBLED+0x84>)
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d107      	bne.n	8008d5a <SetDBLED+0x36>
 8008d4a:	4b18      	ldr	r3, [pc, #96]	@ (8008dac <SetDBLED+0x88>)
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d103      	bne.n	8008d5a <SetDBLED+0x36>
 8008d52:	4b17      	ldr	r3, [pc, #92]	@ (8008db0 <SetDBLED+0x8c>)
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d022      	beq.n	8008da0 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 8008d5a:	1dfb      	adds	r3, r7, #7
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	4053      	eors	r3, r2
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	001a      	movs	r2, r3
 8008d66:	4b13      	ldr	r3, [pc, #76]	@ (8008db4 <SetDBLED+0x90>)
 8008d68:	2101      	movs	r1, #1
 8008d6a:	0018      	movs	r0, r3
 8008d6c:	f002 fe03 	bl	800b976 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 8008d70:	1dbb      	adds	r3, r7, #6
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	2201      	movs	r2, #1
 8008d76:	4053      	eors	r3, r2
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	001a      	movs	r2, r3
 8008d7c:	2380      	movs	r3, #128	@ 0x80
 8008d7e:	005b      	lsls	r3, r3, #1
 8008d80:	480c      	ldr	r0, [pc, #48]	@ (8008db4 <SetDBLED+0x90>)
 8008d82:	0019      	movs	r1, r3
 8008d84:	f002 fdf7 	bl	800b976 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 8008d88:	1d7b      	adds	r3, r7, #5
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	4053      	eors	r3, r2
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	001a      	movs	r2, r3
 8008d94:	2380      	movs	r3, #128	@ 0x80
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	4806      	ldr	r0, [pc, #24]	@ (8008db4 <SetDBLED+0x90>)
 8008d9a:	0019      	movs	r1, r3
 8008d9c:	f002 fdeb 	bl	800b976 <HAL_GPIO_WritePin>
  }
}
 8008da0:	46c0      	nop			@ (mov r8, r8)
 8008da2:	46bd      	mov	sp, r7
 8008da4:	b003      	add	sp, #12
 8008da6:	bd90      	pop	{r4, r7, pc}
 8008da8:	200029b9 	.word	0x200029b9
 8008dac:	2000005a 	.word	0x2000005a
 8008db0:	200029ba 	.word	0x200029ba
 8008db4:	50000400 	.word	0x50000400

08008db8 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 8008db8:	b590      	push	{r4, r7, lr}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	0004      	movs	r4, r0
 8008dc0:	0008      	movs	r0, r1
 8008dc2:	0011      	movs	r1, r2
 8008dc4:	1dbb      	adds	r3, r7, #6
 8008dc6:	1c22      	adds	r2, r4, #0
 8008dc8:	801a      	strh	r2, [r3, #0]
 8008dca:	1d3b      	adds	r3, r7, #4
 8008dcc:	1c02      	adds	r2, r0, #0
 8008dce:	801a      	strh	r2, [r3, #0]
 8008dd0:	1cbb      	adds	r3, r7, #2
 8008dd2:	1c0a      	adds	r2, r1, #0
 8008dd4:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 8008dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8008e10 <SetVocLED+0x58>)
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d107      	bne.n	8008dee <SetVocLED+0x36>
 8008dde:	4b0d      	ldr	r3, [pc, #52]	@ (8008e14 <SetVocLED+0x5c>)
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d103      	bne.n	8008dee <SetVocLED+0x36>
 8008de6:	4b0c      	ldr	r3, [pc, #48]	@ (8008e18 <SetVocLED+0x60>)
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d00b      	beq.n	8008e06 <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 8008dee:	4b0b      	ldr	r3, [pc, #44]	@ (8008e1c <SetVocLED+0x64>)
 8008df0:	1dba      	adds	r2, r7, #6
 8008df2:	8812      	ldrh	r2, [r2, #0]
 8008df4:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 8008df6:	4b09      	ldr	r3, [pc, #36]	@ (8008e1c <SetVocLED+0x64>)
 8008df8:	1d3a      	adds	r2, r7, #4
 8008dfa:	8812      	ldrh	r2, [r2, #0]
 8008dfc:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 8008dfe:	4b07      	ldr	r3, [pc, #28]	@ (8008e1c <SetVocLED+0x64>)
 8008e00:	1cba      	adds	r2, r7, #2
 8008e02:	8812      	ldrh	r2, [r2, #0]
 8008e04:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8008e06:	46c0      	nop			@ (mov r8, r8)
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	b003      	add	sp, #12
 8008e0c:	bd90      	pop	{r4, r7, pc}
 8008e0e:	46c0      	nop			@ (mov r8, r8)
 8008e10:	200029b9 	.word	0x200029b9
 8008e14:	2000005a 	.word	0x2000005a
 8008e18:	200029ba 	.word	0x200029ba
 8008e1c:	40000400 	.word	0x40000400

08008e20 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 8008e20:	b580      	push	{r7, lr}
 8008e22:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8008e24:	4b07      	ldr	r3, [pc, #28]	@ (8008e44 <SetMeasurementIndicator+0x24>)
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d103      	bne.n	8008e34 <SetMeasurementIndicator+0x14>
 8008e2c:	4b06      	ldr	r3, [pc, #24]	@ (8008e48 <SetMeasurementIndicator+0x28>)
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d003      	beq.n	8008e3c <SetMeasurementIndicator+0x1c>
    TIM2 -> CCR3 = 3000;
 8008e34:	2380      	movs	r3, #128	@ 0x80
 8008e36:	05db      	lsls	r3, r3, #23
 8008e38:	4a04      	ldr	r2, [pc, #16]	@ (8008e4c <SetMeasurementIndicator+0x2c>)
 8008e3a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8008e3c:	46c0      	nop			@ (mov r8, r8)
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	46c0      	nop			@ (mov r8, r8)
 8008e44:	200029b9 	.word	0x200029b9
 8008e48:	200029ba 	.word	0x200029ba
 8008e4c:	00000bb8 	.word	0x00000bb8

08008e50 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 8008e50:	b580      	push	{r7, lr}
 8008e52:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8008e54:	4b07      	ldr	r3, [pc, #28]	@ (8008e74 <ResetMeasurementIndicator+0x24>)
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d103      	bne.n	8008e64 <ResetMeasurementIndicator+0x14>
 8008e5c:	4b06      	ldr	r3, [pc, #24]	@ (8008e78 <ResetMeasurementIndicator+0x28>)
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d004      	beq.n	8008e6e <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = 4000;
 8008e64:	2380      	movs	r3, #128	@ 0x80
 8008e66:	05db      	lsls	r3, r3, #23
 8008e68:	22fa      	movs	r2, #250	@ 0xfa
 8008e6a:	0112      	lsls	r2, r2, #4
 8008e6c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 8008e6e:	46c0      	nop			@ (mov r8, r8)
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	200029b9 	.word	0x200029b9
 8008e78:	200029ba 	.word	0x200029ba

08008e7c <SetMICIndicator>:
void SetMICIndicator(){
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8008e80:	4b07      	ldr	r3, [pc, #28]	@ (8008ea0 <SetMICIndicator+0x24>)
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d103      	bne.n	8008e90 <SetMICIndicator+0x14>
 8008e88:	4b06      	ldr	r3, [pc, #24]	@ (8008ea4 <SetMICIndicator+0x28>)
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d003      	beq.n	8008e98 <SetMICIndicator+0x1c>
    TIM2 -> CCR1 = 3000;
 8008e90:	2380      	movs	r3, #128	@ 0x80
 8008e92:	05db      	lsls	r3, r3, #23
 8008e94:	4a04      	ldr	r2, [pc, #16]	@ (8008ea8 <SetMICIndicator+0x2c>)
 8008e96:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 8008e98:	46c0      	nop			@ (mov r8, r8)
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	46c0      	nop			@ (mov r8, r8)
 8008ea0:	200029b9 	.word	0x200029b9
 8008ea4:	200029ba 	.word	0x200029ba
 8008ea8:	00000bb8 	.word	0x00000bb8

08008eac <ResetMICIndicator>:
void ResetMICIndicator(){
 8008eac:	b580      	push	{r7, lr}
 8008eae:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8008eb0:	4b07      	ldr	r3, [pc, #28]	@ (8008ed0 <ResetMICIndicator+0x24>)
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d103      	bne.n	8008ec0 <ResetMICIndicator+0x14>
 8008eb8:	4b06      	ldr	r3, [pc, #24]	@ (8008ed4 <ResetMICIndicator+0x28>)
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d004      	beq.n	8008eca <ResetMICIndicator+0x1e>
    TIM2 -> CCR1 = 4000;
 8008ec0:	2380      	movs	r3, #128	@ 0x80
 8008ec2:	05db      	lsls	r3, r3, #23
 8008ec4:	22fa      	movs	r2, #250	@ 0xfa
 8008ec6:	0112      	lsls	r2, r2, #4
 8008ec8:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 8008eca:	46c0      	nop			@ (mov r8, r8)
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	200029b9 	.word	0x200029b9
 8008ed4:	200029ba 	.word	0x200029ba

08008ed8 <SetESPIndicator>:
void SetESPIndicator(){
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8008edc:	4b07      	ldr	r3, [pc, #28]	@ (8008efc <SetESPIndicator+0x24>)
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d103      	bne.n	8008eec <SetESPIndicator+0x14>
 8008ee4:	4b06      	ldr	r3, [pc, #24]	@ (8008f00 <SetESPIndicator+0x28>)
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d003      	beq.n	8008ef4 <SetESPIndicator+0x1c>
    TIM2 -> CCR4 = 3000;
 8008eec:	2380      	movs	r3, #128	@ 0x80
 8008eee:	05db      	lsls	r3, r3, #23
 8008ef0:	4a04      	ldr	r2, [pc, #16]	@ (8008f04 <SetESPIndicator+0x2c>)
 8008ef2:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8008ef4:	46c0      	nop			@ (mov r8, r8)
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	46c0      	nop			@ (mov r8, r8)
 8008efc:	200029b9 	.word	0x200029b9
 8008f00:	200029ba 	.word	0x200029ba
 8008f04:	00000bb8 	.word	0x00000bb8

08008f08 <ResetESPIndicator>:
void ResetESPIndicator(){
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 8008f0c:	4b07      	ldr	r3, [pc, #28]	@ (8008f2c <ResetESPIndicator+0x24>)
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d103      	bne.n	8008f1c <ResetESPIndicator+0x14>
 8008f14:	4b06      	ldr	r3, [pc, #24]	@ (8008f30 <ResetESPIndicator+0x28>)
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d004      	beq.n	8008f26 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = 4000;
 8008f1c:	2380      	movs	r3, #128	@ 0x80
 8008f1e:	05db      	lsls	r3, r3, #23
 8008f20:	22fa      	movs	r2, #250	@ 0xfa
 8008f22:	0112      	lsls	r2, r2, #4
 8008f24:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 8008f26:	46c0      	nop			@ (mov r8, r8)
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	200029b9 	.word	0x200029b9
 8008f30:	200029ba 	.word	0x200029ba

08008f34 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 8008f34:	b580      	push	{r7, lr}
 8008f36:	af00      	add	r7, sp, #0
  SetStatusLED(4000,4000,4000);
 8008f38:	23fa      	movs	r3, #250	@ 0xfa
 8008f3a:	011a      	lsls	r2, r3, #4
 8008f3c:	23fa      	movs	r3, #250	@ 0xfa
 8008f3e:	0119      	lsls	r1, r3, #4
 8008f40:	23fa      	movs	r3, #250	@ 0xfa
 8008f42:	011b      	lsls	r3, r3, #4
 8008f44:	0018      	movs	r0, r3
 8008f46:	f7ff feb9 	bl	8008cbc <SetStatusLED>
  SetDBLED(false,false,false);
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	2100      	movs	r1, #0
 8008f4e:	2000      	movs	r0, #0
 8008f50:	f7ff fee8 	bl	8008d24 <SetDBLED>
  SetVocLED(4000,4000,4000);
 8008f54:	23fa      	movs	r3, #250	@ 0xfa
 8008f56:	011a      	lsls	r2, r3, #4
 8008f58:	23fa      	movs	r3, #250	@ 0xfa
 8008f5a:	0119      	lsls	r1, r3, #4
 8008f5c:	23fa      	movs	r3, #250	@ 0xfa
 8008f5e:	011b      	lsls	r3, r3, #4
 8008f60:	0018      	movs	r0, r3
 8008f62:	f7ff ff29 	bl	8008db8 <SetVocLED>
return;
 8008f66:	46c0      	nop			@ (mov r8, r8)
}
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <powerCheck>:

Battery_Status powerCheck(){
 8008f6c:	b590      	push	{r4, r7, lr}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
  PowerStamp = HAL_GetTick() + 10000;
 8008f72:	f001 f961 	bl	800a238 <HAL_GetTick>
 8008f76:	0003      	movs	r3, r0
 8008f78:	4a16      	ldr	r2, [pc, #88]	@ (8008fd4 <powerCheck+0x68>)
 8008f7a:	189a      	adds	r2, r3, r2
 8008f7c:	4b16      	ldr	r3, [pc, #88]	@ (8008fd8 <powerCheck+0x6c>)
 8008f7e:	601a      	str	r2, [r3, #0]
  Battery_Status status;
  if(Check_USB_PowerOn()){
 8008f80:	f7fc fc1e 	bl	80057c0 <Check_USB_PowerOn>
 8008f84:	1e03      	subs	r3, r0, #0
 8008f86:	d006      	beq.n	8008f96 <powerCheck+0x2a>
    status = USB_PLUGGED_IN;
 8008f88:	1dfb      	adds	r3, r7, #7
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	701a      	strb	r2, [r3, #0]
    usbPluggedIn = true;
 8008f8e:	4b13      	ldr	r3, [pc, #76]	@ (8008fdc <powerCheck+0x70>)
 8008f90:	2201      	movs	r2, #1
 8008f92:	701a      	strb	r2, [r3, #0]
 8008f94:	e017      	b.n	8008fc6 <powerCheck+0x5a>
  }
  else{
    status = batteryChargeCheck();
 8008f96:	1dfc      	adds	r4, r7, #7
 8008f98:	f7ff fe44 	bl	8008c24 <batteryChargeCheck>
 8008f9c:	0003      	movs	r3, r0
 8008f9e:	7023      	strb	r3, [r4, #0]
    if(!userToggle && !init){
 8008fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8008fe0 <powerCheck+0x74>)
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	4053      	eors	r3, r2
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d008      	beq.n	8008fc0 <powerCheck+0x54>
 8008fae:	4b0d      	ldr	r3, [pc, #52]	@ (8008fe4 <powerCheck+0x78>)
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	4053      	eors	r3, r2
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d001      	beq.n	8008fc0 <powerCheck+0x54>
      SetLEDsOff();
 8008fbc:	f7ff ffba 	bl	8008f34 <SetLEDsOff>
    }
    usbPluggedIn = false;
 8008fc0:	4b06      	ldr	r3, [pc, #24]	@ (8008fdc <powerCheck+0x70>)
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	701a      	strb	r2, [r3, #0]

  }
  return status;
 8008fc6:	1dfb      	adds	r3, r7, #7
 8008fc8:	781b      	ldrb	r3, [r3, #0]
}
 8008fca:	0018      	movs	r0, r3
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	b003      	add	sp, #12
 8008fd0:	bd90      	pop	{r4, r7, pc}
 8008fd2:	46c0      	nop			@ (mov r8, r8)
 8008fd4:	00002710 	.word	0x00002710
 8008fd8:	200029c0 	.word	0x200029c0
 8008fdc:	200029b9 	.word	0x200029b9
 8008fe0:	200029ba 	.word	0x200029ba
 8008fe4:	2000005a 	.word	0x2000005a

08008fe8 <powerDisplay>:

void powerDisplay(Battery_Status status){
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	0002      	movs	r2, r0
 8008ff0:	1dfb      	adds	r3, r7, #7
 8008ff2:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 8008ff4:	1dfb      	adds	r3, r7, #7
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d105      	bne.n	8009008 <powerDisplay+0x20>
    Debug("LEDS are okay");
 8008ffc:	4a18      	ldr	r2, [pc, #96]	@ (8009060 <powerDisplay+0x78>)
 8008ffe:	4b19      	ldr	r3, [pc, #100]	@ (8009064 <powerDisplay+0x7c>)
 8009000:	0019      	movs	r1, r3
 8009002:	2003      	movs	r0, #3
 8009004:	f000 fd92 	bl	8009b2c <CreateLine>

  }
  if(status == BATTERY_FULL){
 8009008:	1dfb      	adds	r3, r7, #7
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	2b04      	cmp	r3, #4
 800900e:	d105      	bne.n	800901c <powerDisplay+0x34>
    Debug("Battery fully charged");
 8009010:	4a15      	ldr	r2, [pc, #84]	@ (8009068 <powerDisplay+0x80>)
 8009012:	4b14      	ldr	r3, [pc, #80]	@ (8009064 <powerDisplay+0x7c>)
 8009014:	0019      	movs	r1, r3
 8009016:	2003      	movs	r0, #3
 8009018:	f000 fd88 	bl	8009b2c <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800901c:	1dfb      	adds	r3, r7, #7
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	2b03      	cmp	r3, #3
 8009022:	d105      	bne.n	8009030 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 8009024:	4a11      	ldr	r2, [pc, #68]	@ (800906c <powerDisplay+0x84>)
 8009026:	4b0f      	ldr	r3, [pc, #60]	@ (8009064 <powerDisplay+0x7c>)
 8009028:	0019      	movs	r1, r3
 800902a:	2003      	movs	r0, #3
 800902c:	f000 fd7e 	bl	8009b2c <CreateLine>
  }
  if(status == BATTERY_LOW){
 8009030:	1dfb      	adds	r3, r7, #7
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	2b02      	cmp	r3, #2
 8009036:	d105      	bne.n	8009044 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 8009038:	4a0d      	ldr	r2, [pc, #52]	@ (8009070 <powerDisplay+0x88>)
 800903a:	4b0a      	ldr	r3, [pc, #40]	@ (8009064 <powerDisplay+0x7c>)
 800903c:	0019      	movs	r1, r3
 800903e:	2003      	movs	r0, #3
 8009040:	f000 fd74 	bl	8009b2c <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 8009044:	1dfb      	adds	r3, r7, #7
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d105      	bne.n	8009058 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800904c:	4a09      	ldr	r2, [pc, #36]	@ (8009074 <powerDisplay+0x8c>)
 800904e:	4b05      	ldr	r3, [pc, #20]	@ (8009064 <powerDisplay+0x7c>)
 8009050:	0019      	movs	r1, r3
 8009052:	2003      	movs	r0, #3
 8009054:	f000 fd6a 	bl	8009b2c <CreateLine>
  }
}
 8009058:	46c0      	nop			@ (mov r8, r8)
 800905a:	46bd      	mov	sp, r7
 800905c:	b002      	add	sp, #8
 800905e:	bd80      	pop	{r7, pc}
 8009060:	0801bc24 	.word	0x0801bc24
 8009064:	0801bc34 	.word	0x0801bc34
 8009068:	0801bc38 	.word	0x0801bc38
 800906c:	0801bc50 	.word	0x0801bc50
 8009070:	0801bc70 	.word	0x0801bc70
 8009074:	0801bc88 	.word	0x0801bc88

08009078 <configCheck>:

void configCheck(){
 8009078:	b580      	push	{r7, lr}
 800907a:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800907c:	f7fc fbaf 	bl	80057de <BootButton_Pressed>
 8009080:	1e03      	subs	r3, r0, #0
 8009082:	d007      	beq.n	8009094 <configCheck+0x1c>
 8009084:	f7fc fbbc 	bl	8005800 <UserButton_Pressed>
 8009088:	1e03      	subs	r3, r0, #0
 800908a:	d003      	beq.n	8009094 <configCheck+0x1c>
    configSet = true;
 800908c:	4b2f      	ldr	r3, [pc, #188]	@ (800914c <configCheck+0xd4>)
 800908e:	2201      	movs	r2, #1
 8009090:	701a      	strb	r2, [r3, #0]
 8009092:	e00a      	b.n	80090aa <configCheck+0x32>
  }
  else{
    configSet = false;
 8009094:	4b2d      	ldr	r3, [pc, #180]	@ (800914c <configCheck+0xd4>)
 8009096:	2200      	movs	r2, #0
 8009098:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800909a:	f001 f8cd 	bl	800a238 <HAL_GetTick>
 800909e:	0003      	movs	r3, r0
 80090a0:	22fa      	movs	r2, #250	@ 0xfa
 80090a2:	00d2      	lsls	r2, r2, #3
 80090a4:	189a      	adds	r2, r3, r2
 80090a6:	4b2a      	ldr	r3, [pc, #168]	@ (8009150 <configCheck+0xd8>)
 80090a8:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 80090aa:	4b28      	ldr	r3, [pc, #160]	@ (800914c <configCheck+0xd4>)
 80090ac:	781b      	ldrb	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00d      	beq.n	80090ce <configCheck+0x56>
 80090b2:	4b27      	ldr	r3, [pc, #156]	@ (8009150 <configCheck+0xd8>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	0018      	movs	r0, r3
 80090b8:	f000 fce2 	bl	8009a80 <TimestampIsReached>
 80090bc:	1e03      	subs	r3, r0, #0
 80090be:	d006      	beq.n	80090ce <configCheck+0x56>
    SetConfigMode(); //Make config mode wifi
 80090c0:	f7fa fb3c 	bl	800373c <SetConfigMode>
    SetDBLED(true, true, true);
 80090c4:	2201      	movs	r2, #1
 80090c6:	2101      	movs	r1, #1
 80090c8:	2001      	movs	r0, #1
 80090ca:	f7ff fe2b 	bl	8008d24 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld){
 80090ce:	f7fc fb86 	bl	80057de <BootButton_Pressed>
 80090d2:	0003      	movs	r3, r0
 80090d4:	001a      	movs	r2, r3
 80090d6:	2301      	movs	r3, #1
 80090d8:	4053      	eors	r3, r2
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d01d      	beq.n	800911c <configCheck+0xa4>
 80090e0:	f7fc fb8e 	bl	8005800 <UserButton_Pressed>
 80090e4:	1e03      	subs	r3, r0, #0
 80090e6:	d019      	beq.n	800911c <configCheck+0xa4>
 80090e8:	4b1a      	ldr	r3, [pc, #104]	@ (8009154 <configCheck+0xdc>)
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	2201      	movs	r2, #1
 80090ee:	4053      	eors	r3, r2
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d012      	beq.n	800911c <configCheck+0xa4>
    SetLEDsOff();
 80090f6:	f7ff ff1d 	bl	8008f34 <SetLEDsOff>
    userToggle = !userToggle;
 80090fa:	4b17      	ldr	r3, [pc, #92]	@ (8009158 <configCheck+0xe0>)
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	1e5a      	subs	r2, r3, #1
 8009100:	4193      	sbcs	r3, r2
 8009102:	b2db      	uxtb	r3, r3
 8009104:	2201      	movs	r2, #1
 8009106:	4053      	eors	r3, r2
 8009108:	b2db      	uxtb	r3, r3
 800910a:	1c1a      	adds	r2, r3, #0
 800910c:	2301      	movs	r3, #1
 800910e:	4013      	ands	r3, r2
 8009110:	b2da      	uxtb	r2, r3
 8009112:	4b11      	ldr	r3, [pc, #68]	@ (8009158 <configCheck+0xe0>)
 8009114:	701a      	strb	r2, [r3, #0]
    buttonHeld = true;
 8009116:	4b0f      	ldr	r3, [pc, #60]	@ (8009154 <configCheck+0xdc>)
 8009118:	2201      	movs	r2, #1
 800911a:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800911c:	f7fc fb5f 	bl	80057de <BootButton_Pressed>
 8009120:	0003      	movs	r3, r0
 8009122:	001a      	movs	r2, r3
 8009124:	2301      	movs	r3, #1
 8009126:	4053      	eors	r3, r2
 8009128:	b2db      	uxtb	r3, r3
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00b      	beq.n	8009146 <configCheck+0xce>
 800912e:	f7fc fb67 	bl	8005800 <UserButton_Pressed>
 8009132:	0003      	movs	r3, r0
 8009134:	001a      	movs	r2, r3
 8009136:	2301      	movs	r3, #1
 8009138:	4053      	eors	r3, r2
 800913a:	b2db      	uxtb	r3, r3
 800913c:	2b00      	cmp	r3, #0
 800913e:	d002      	beq.n	8009146 <configCheck+0xce>
    buttonHeld = false;
 8009140:	4b04      	ldr	r3, [pc, #16]	@ (8009154 <configCheck+0xdc>)
 8009142:	2200      	movs	r2, #0
 8009144:	701a      	strb	r2, [r3, #0]
  }
}
 8009146:	46c0      	nop			@ (mov r8, r8)
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	200029b8 	.word	0x200029b8
 8009150:	200029bc 	.word	0x200029bc
 8009154:	200029bb 	.word	0x200029bb
 8009158:	200029ba 	.word	0x200029ba

0800915c <Status_Upkeep>:
  RTC_SetWakeUpTimer(&hrtc, sleepTime);
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
  HAL_ResumeTick();
}

void Status_Upkeep(){
 800915c:	b580      	push	{r7, lr}
 800915e:	af00      	add	r7, sp, #0
  configCheck();
 8009160:	f7ff ff8a 	bl	8009078 <configCheck>
}
 8009164:	46c0      	nop			@ (mov r8, r8)
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800916a:	b590      	push	{r4, r7, lr}
 800916c:	b083      	sub	sp, #12
 800916e:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 8009170:	1dfc      	adds	r4, r7, #7
 8009172:	f7ff fefb 	bl	8008f6c <powerCheck>
 8009176:	0003      	movs	r3, r0
 8009178:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);
 800917a:	1dfb      	adds	r3, r7, #7
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	0018      	movs	r0, r3
 8009180:	f7ff ff32 	bl	8008fe8 <powerDisplay>
  return status;
 8009184:	1dfb      	adds	r3, r7, #7
 8009186:	781b      	ldrb	r3, [r3, #0]

}
 8009188:	0018      	movs	r0, r3
 800918a:	46bd      	mov	sp, r7
 800918c:	b003      	add	sp, #12
 800918e:	bd90      	pop	{r4, r7, pc}

08009190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009194:	4b07      	ldr	r3, [pc, #28]	@ (80091b4 <HAL_MspInit+0x24>)
 8009196:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009198:	4b06      	ldr	r3, [pc, #24]	@ (80091b4 <HAL_MspInit+0x24>)
 800919a:	2101      	movs	r1, #1
 800919c:	430a      	orrs	r2, r1
 800919e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80091a0:	4b04      	ldr	r3, [pc, #16]	@ (80091b4 <HAL_MspInit+0x24>)
 80091a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091a4:	4b03      	ldr	r3, [pc, #12]	@ (80091b4 <HAL_MspInit+0x24>)
 80091a6:	2180      	movs	r1, #128	@ 0x80
 80091a8:	0549      	lsls	r1, r1, #21
 80091aa:	430a      	orrs	r2, r1
 80091ac:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80091ae:	46c0      	nop			@ (mov r8, r8)
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	40021000 	.word	0x40021000

080091b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80091bc:	46c0      	nop			@ (mov r8, r8)
 80091be:	e7fd      	b.n	80091bc <NMI_Handler+0x4>

080091c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80091c4:	46c0      	nop			@ (mov r8, r8)
 80091c6:	e7fd      	b.n	80091c4 <HardFault_Handler+0x4>

080091c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80091cc:	46c0      	nop			@ (mov r8, r8)
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80091d6:	46c0      	nop			@ (mov r8, r8)
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80091e0:	f001 f818 	bl	800a214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80091e4:	46c0      	nop			@ (mov r8, r8)
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
	...

080091ec <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80091f0:	4b05      	ldr	r3, [pc, #20]	@ (8009208 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80091f2:	0018      	movs	r0, r3
 80091f4:	f001 fe8b 	bl	800af0e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80091f8:	4b04      	ldr	r3, [pc, #16]	@ (800920c <DMA1_Channel2_3_IRQHandler+0x20>)
 80091fa:	0018      	movs	r0, r3
 80091fc:	f001 fe87 	bl	800af0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8009200:	46c0      	nop			@ (mov r8, r8)
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	46c0      	nop			@ (mov r8, r8)
 8009208:	20000f64 	.word	0x20000f64
 800920c:	20000f1c 	.word	0x20000f1c

08009210 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8009214:	4b07      	ldr	r3, [pc, #28]	@ (8009234 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 8009216:	0018      	movs	r0, r3
 8009218:	f001 fe79 	bl	800af0e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800921c:	4b06      	ldr	r3, [pc, #24]	@ (8009238 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800921e:	0018      	movs	r0, r3
 8009220:	f001 fe75 	bl	800af0e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8009224:	4b05      	ldr	r3, [pc, #20]	@ (800923c <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8009226:	0018      	movs	r0, r3
 8009228:	f001 fe71 	bl	800af0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800922c:	46c0      	nop			@ (mov r8, r8)
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	46c0      	nop			@ (mov r8, r8)
 8009234:	20000fe8 	.word	0x20000fe8
 8009238:	20002c70 	.word	0x20002c70
 800923c:	20002cb8 	.word	0x20002cb8

08009240 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8009244:	4b03      	ldr	r3, [pc, #12]	@ (8009254 <USART4_5_IRQHandler+0x14>)
 8009246:	0018      	movs	r0, r3
 8009248:	f008 fcfe 	bl	8011c48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800924c:	46c0      	nop			@ (mov r8, r8)
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	46c0      	nop			@ (mov r8, r8)
 8009254:	20002bb8 	.word	0x20002bb8

08009258 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800925c:	4b09      	ldr	r3, [pc, #36]	@ (8009284 <I2C1_IRQHandler+0x2c>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	699a      	ldr	r2, [r3, #24]
 8009262:	23e0      	movs	r3, #224	@ 0xe0
 8009264:	00db      	lsls	r3, r3, #3
 8009266:	4013      	ands	r3, r2
 8009268:	d004      	beq.n	8009274 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800926a:	4b06      	ldr	r3, [pc, #24]	@ (8009284 <I2C1_IRQHandler+0x2c>)
 800926c:	0018      	movs	r0, r3
 800926e:	f002 fe5b 	bl	800bf28 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8009272:	e003      	b.n	800927c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8009274:	4b03      	ldr	r3, [pc, #12]	@ (8009284 <I2C1_IRQHandler+0x2c>)
 8009276:	0018      	movs	r0, r3
 8009278:	f002 fe3c 	bl	800bef4 <HAL_I2C_EV_IRQHandler>
}
 800927c:	46c0      	nop			@ (mov r8, r8)
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	46c0      	nop			@ (mov r8, r8)
 8009284:	20000e74 	.word	0x20000e74

08009288 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800928c:	4b03      	ldr	r3, [pc, #12]	@ (800929c <USB_IRQHandler+0x14>)
 800928e:	0018      	movs	r0, r3
 8009290:	f005 f812 	bl	800e2b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8009294:	46c0      	nop			@ (mov r8, r8)
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	46c0      	nop			@ (mov r8, r8)
 800929c:	20003ac0 	.word	0x20003ac0

080092a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	af00      	add	r7, sp, #0
  return 1;
 80092a4:	2301      	movs	r3, #1
}
 80092a6:	0018      	movs	r0, r3
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <_kill>:

int _kill(int pid, int sig)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80092b6:	f00f f98b 	bl	80185d0 <__errno>
 80092ba:	0003      	movs	r3, r0
 80092bc:	2216      	movs	r2, #22
 80092be:	601a      	str	r2, [r3, #0]
  return -1;
 80092c0:	2301      	movs	r3, #1
 80092c2:	425b      	negs	r3, r3
}
 80092c4:	0018      	movs	r0, r3
 80092c6:	46bd      	mov	sp, r7
 80092c8:	b002      	add	sp, #8
 80092ca:	bd80      	pop	{r7, pc}

080092cc <_exit>:

void _exit (int status)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80092d4:	2301      	movs	r3, #1
 80092d6:	425a      	negs	r2, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	0011      	movs	r1, r2
 80092dc:	0018      	movs	r0, r3
 80092de:	f7ff ffe5 	bl	80092ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80092e2:	46c0      	nop			@ (mov r8, r8)
 80092e4:	e7fd      	b.n	80092e2 <_exit+0x16>

080092e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b086      	sub	sp, #24
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	60f8      	str	r0, [r7, #12]
 80092ee:	60b9      	str	r1, [r7, #8]
 80092f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80092f2:	2300      	movs	r3, #0
 80092f4:	617b      	str	r3, [r7, #20]
 80092f6:	e00a      	b.n	800930e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80092f8:	e000      	b.n	80092fc <_read+0x16>
 80092fa:	bf00      	nop
 80092fc:	0001      	movs	r1, r0
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	1c5a      	adds	r2, r3, #1
 8009302:	60ba      	str	r2, [r7, #8]
 8009304:	b2ca      	uxtb	r2, r1
 8009306:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	3301      	adds	r3, #1
 800930c:	617b      	str	r3, [r7, #20]
 800930e:	697a      	ldr	r2, [r7, #20]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	429a      	cmp	r2, r3
 8009314:	dbf0      	blt.n	80092f8 <_read+0x12>
  }

  return len;
 8009316:	687b      	ldr	r3, [r7, #4]
}
 8009318:	0018      	movs	r0, r3
 800931a:	46bd      	mov	sp, r7
 800931c:	b006      	add	sp, #24
 800931e:	bd80      	pop	{r7, pc}

08009320 <_close>:
  }
  return len;
}

int _close(int file)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009328:	2301      	movs	r3, #1
 800932a:	425b      	negs	r3, r3
}
 800932c:	0018      	movs	r0, r3
 800932e:	46bd      	mov	sp, r7
 8009330:	b002      	add	sp, #8
 8009332:	bd80      	pop	{r7, pc}

08009334 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	2280      	movs	r2, #128	@ 0x80
 8009342:	0192      	lsls	r2, r2, #6
 8009344:	605a      	str	r2, [r3, #4]
  return 0;
 8009346:	2300      	movs	r3, #0
}
 8009348:	0018      	movs	r0, r3
 800934a:	46bd      	mov	sp, r7
 800934c:	b002      	add	sp, #8
 800934e:	bd80      	pop	{r7, pc}

08009350 <_isatty>:

int _isatty(int file)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009358:	2301      	movs	r3, #1
}
 800935a:	0018      	movs	r0, r3
 800935c:	46bd      	mov	sp, r7
 800935e:	b002      	add	sp, #8
 8009360:	bd80      	pop	{r7, pc}

08009362 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b084      	sub	sp, #16
 8009366:	af00      	add	r7, sp, #0
 8009368:	60f8      	str	r0, [r7, #12]
 800936a:	60b9      	str	r1, [r7, #8]
 800936c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800936e:	2300      	movs	r3, #0
}
 8009370:	0018      	movs	r0, r3
 8009372:	46bd      	mov	sp, r7
 8009374:	b004      	add	sp, #16
 8009376:	bd80      	pop	{r7, pc}

08009378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009380:	4a14      	ldr	r2, [pc, #80]	@ (80093d4 <_sbrk+0x5c>)
 8009382:	4b15      	ldr	r3, [pc, #84]	@ (80093d8 <_sbrk+0x60>)
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800938c:	4b13      	ldr	r3, [pc, #76]	@ (80093dc <_sbrk+0x64>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d102      	bne.n	800939a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009394:	4b11      	ldr	r3, [pc, #68]	@ (80093dc <_sbrk+0x64>)
 8009396:	4a12      	ldr	r2, [pc, #72]	@ (80093e0 <_sbrk+0x68>)
 8009398:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800939a:	4b10      	ldr	r3, [pc, #64]	@ (80093dc <_sbrk+0x64>)
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	18d3      	adds	r3, r2, r3
 80093a2:	693a      	ldr	r2, [r7, #16]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d207      	bcs.n	80093b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80093a8:	f00f f912 	bl	80185d0 <__errno>
 80093ac:	0003      	movs	r3, r0
 80093ae:	220c      	movs	r2, #12
 80093b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80093b2:	2301      	movs	r3, #1
 80093b4:	425b      	negs	r3, r3
 80093b6:	e009      	b.n	80093cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80093b8:	4b08      	ldr	r3, [pc, #32]	@ (80093dc <_sbrk+0x64>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80093be:	4b07      	ldr	r3, [pc, #28]	@ (80093dc <_sbrk+0x64>)
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	18d2      	adds	r2, r2, r3
 80093c6:	4b05      	ldr	r3, [pc, #20]	@ (80093dc <_sbrk+0x64>)
 80093c8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80093ca:	68fb      	ldr	r3, [r7, #12]
}
 80093cc:	0018      	movs	r0, r3
 80093ce:	46bd      	mov	sp, r7
 80093d0:	b006      	add	sp, #24
 80093d2:	bd80      	pop	{r7, pc}
 80093d4:	20005000 	.word	0x20005000
 80093d8:	00000400 	.word	0x00000400
 80093dc:	200029c4 	.word	0x200029c4
 80093e0:	20004120 	.word	0x20004120

080093e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80093e8:	46c0      	nop			@ (mov r8, r8)
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
	...

080093f0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b086      	sub	sp, #24
 80093f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80093f6:	2310      	movs	r3, #16
 80093f8:	18fb      	adds	r3, r7, r3
 80093fa:	0018      	movs	r0, r3
 80093fc:	2308      	movs	r3, #8
 80093fe:	001a      	movs	r2, r3
 8009400:	2100      	movs	r1, #0
 8009402:	f00f f853 	bl	80184ac <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009406:	003b      	movs	r3, r7
 8009408:	0018      	movs	r0, r3
 800940a:	2310      	movs	r3, #16
 800940c:	001a      	movs	r2, r3
 800940e:	2100      	movs	r1, #0
 8009410:	f00f f84c 	bl	80184ac <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009414:	4b2e      	ldr	r3, [pc, #184]	@ (80094d0 <MX_TIM2_Init+0xe0>)
 8009416:	2280      	movs	r2, #128	@ 0x80
 8009418:	05d2      	lsls	r2, r2, #23
 800941a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800941c:	4b2c      	ldr	r3, [pc, #176]	@ (80094d0 <MX_TIM2_Init+0xe0>)
 800941e:	2200      	movs	r2, #0
 8009420:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009422:	4b2b      	ldr	r3, [pc, #172]	@ (80094d0 <MX_TIM2_Init+0xe0>)
 8009424:	2200      	movs	r2, #0
 8009426:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8009428:	4b29      	ldr	r3, [pc, #164]	@ (80094d0 <MX_TIM2_Init+0xe0>)
 800942a:	4a2a      	ldr	r2, [pc, #168]	@ (80094d4 <MX_TIM2_Init+0xe4>)
 800942c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800942e:	4b28      	ldr	r3, [pc, #160]	@ (80094d0 <MX_TIM2_Init+0xe0>)
 8009430:	2200      	movs	r2, #0
 8009432:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009434:	4b26      	ldr	r3, [pc, #152]	@ (80094d0 <MX_TIM2_Init+0xe0>)
 8009436:	2200      	movs	r2, #0
 8009438:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800943a:	4b25      	ldr	r3, [pc, #148]	@ (80094d0 <MX_TIM2_Init+0xe0>)
 800943c:	0018      	movs	r0, r3
 800943e:	f007 fe75 	bl	801112c <HAL_TIM_PWM_Init>
 8009442:	1e03      	subs	r3, r0, #0
 8009444:	d001      	beq.n	800944a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8009446:	f7fd f8cd 	bl	80065e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800944a:	2110      	movs	r1, #16
 800944c:	187b      	adds	r3, r7, r1
 800944e:	2200      	movs	r2, #0
 8009450:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009452:	187b      	adds	r3, r7, r1
 8009454:	2200      	movs	r2, #0
 8009456:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009458:	187a      	adds	r2, r7, r1
 800945a:	4b1d      	ldr	r3, [pc, #116]	@ (80094d0 <MX_TIM2_Init+0xe0>)
 800945c:	0011      	movs	r1, r2
 800945e:	0018      	movs	r0, r3
 8009460:	f008 f982 	bl	8011768 <HAL_TIMEx_MasterConfigSynchronization>
 8009464:	1e03      	subs	r3, r0, #0
 8009466:	d001      	beq.n	800946c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8009468:	f7fd f8bc 	bl	80065e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800946c:	003b      	movs	r3, r7
 800946e:	2260      	movs	r2, #96	@ 0x60
 8009470:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8009472:	003b      	movs	r3, r7
 8009474:	2200      	movs	r2, #0
 8009476:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009478:	003b      	movs	r3, r7
 800947a:	2200      	movs	r2, #0
 800947c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800947e:	003b      	movs	r3, r7
 8009480:	2200      	movs	r2, #0
 8009482:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009484:	0039      	movs	r1, r7
 8009486:	4b12      	ldr	r3, [pc, #72]	@ (80094d0 <MX_TIM2_Init+0xe0>)
 8009488:	2200      	movs	r2, #0
 800948a:	0018      	movs	r0, r3
 800948c:	f007 ff20 	bl	80112d0 <HAL_TIM_PWM_ConfigChannel>
 8009490:	1e03      	subs	r3, r0, #0
 8009492:	d001      	beq.n	8009498 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8009494:	f7fd f8a6 	bl	80065e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009498:	0039      	movs	r1, r7
 800949a:	4b0d      	ldr	r3, [pc, #52]	@ (80094d0 <MX_TIM2_Init+0xe0>)
 800949c:	2208      	movs	r2, #8
 800949e:	0018      	movs	r0, r3
 80094a0:	f007 ff16 	bl	80112d0 <HAL_TIM_PWM_ConfigChannel>
 80094a4:	1e03      	subs	r3, r0, #0
 80094a6:	d001      	beq.n	80094ac <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80094a8:	f7fd f89c 	bl	80065e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80094ac:	0039      	movs	r1, r7
 80094ae:	4b08      	ldr	r3, [pc, #32]	@ (80094d0 <MX_TIM2_Init+0xe0>)
 80094b0:	220c      	movs	r2, #12
 80094b2:	0018      	movs	r0, r3
 80094b4:	f007 ff0c 	bl	80112d0 <HAL_TIM_PWM_ConfigChannel>
 80094b8:	1e03      	subs	r3, r0, #0
 80094ba:	d001      	beq.n	80094c0 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 80094bc:	f7fd f892 	bl	80065e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80094c0:	4b03      	ldr	r3, [pc, #12]	@ (80094d0 <MX_TIM2_Init+0xe0>)
 80094c2:	0018      	movs	r0, r3
 80094c4:	f000 f8aa 	bl	800961c <HAL_TIM_MspPostInit>

}
 80094c8:	46c0      	nop			@ (mov r8, r8)
 80094ca:	46bd      	mov	sp, r7
 80094cc:	b006      	add	sp, #24
 80094ce:	bd80      	pop	{r7, pc}
 80094d0:	200029c8 	.word	0x200029c8
 80094d4:	0000ffff 	.word	0x0000ffff

080094d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b086      	sub	sp, #24
 80094dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80094de:	2310      	movs	r3, #16
 80094e0:	18fb      	adds	r3, r7, r3
 80094e2:	0018      	movs	r0, r3
 80094e4:	2308      	movs	r3, #8
 80094e6:	001a      	movs	r2, r3
 80094e8:	2100      	movs	r1, #0
 80094ea:	f00e ffdf 	bl	80184ac <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80094ee:	003b      	movs	r3, r7
 80094f0:	0018      	movs	r0, r3
 80094f2:	2310      	movs	r3, #16
 80094f4:	001a      	movs	r2, r3
 80094f6:	2100      	movs	r1, #0
 80094f8:	f00e ffd8 	bl	80184ac <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80094fc:	4b32      	ldr	r3, [pc, #200]	@ (80095c8 <MX_TIM3_Init+0xf0>)
 80094fe:	4a33      	ldr	r2, [pc, #204]	@ (80095cc <MX_TIM3_Init+0xf4>)
 8009500:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8009502:	4b31      	ldr	r3, [pc, #196]	@ (80095c8 <MX_TIM3_Init+0xf0>)
 8009504:	2200      	movs	r2, #0
 8009506:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009508:	4b2f      	ldr	r3, [pc, #188]	@ (80095c8 <MX_TIM3_Init+0xf0>)
 800950a:	2200      	movs	r2, #0
 800950c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800950e:	4b2e      	ldr	r3, [pc, #184]	@ (80095c8 <MX_TIM3_Init+0xf0>)
 8009510:	4a2f      	ldr	r2, [pc, #188]	@ (80095d0 <MX_TIM3_Init+0xf8>)
 8009512:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009514:	4b2c      	ldr	r3, [pc, #176]	@ (80095c8 <MX_TIM3_Init+0xf0>)
 8009516:	2200      	movs	r2, #0
 8009518:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800951a:	4b2b      	ldr	r3, [pc, #172]	@ (80095c8 <MX_TIM3_Init+0xf0>)
 800951c:	2200      	movs	r2, #0
 800951e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009520:	4b29      	ldr	r3, [pc, #164]	@ (80095c8 <MX_TIM3_Init+0xf0>)
 8009522:	0018      	movs	r0, r3
 8009524:	f007 fe02 	bl	801112c <HAL_TIM_PWM_Init>
 8009528:	1e03      	subs	r3, r0, #0
 800952a:	d001      	beq.n	8009530 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800952c:	f7fd f85a 	bl	80065e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009530:	2110      	movs	r1, #16
 8009532:	187b      	adds	r3, r7, r1
 8009534:	2200      	movs	r2, #0
 8009536:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009538:	187b      	adds	r3, r7, r1
 800953a:	2200      	movs	r2, #0
 800953c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800953e:	187a      	adds	r2, r7, r1
 8009540:	4b21      	ldr	r3, [pc, #132]	@ (80095c8 <MX_TIM3_Init+0xf0>)
 8009542:	0011      	movs	r1, r2
 8009544:	0018      	movs	r0, r3
 8009546:	f008 f90f 	bl	8011768 <HAL_TIMEx_MasterConfigSynchronization>
 800954a:	1e03      	subs	r3, r0, #0
 800954c:	d001      	beq.n	8009552 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800954e:	f7fd f849 	bl	80065e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009552:	003b      	movs	r3, r7
 8009554:	2260      	movs	r2, #96	@ 0x60
 8009556:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8009558:	003b      	movs	r3, r7
 800955a:	2200      	movs	r2, #0
 800955c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800955e:	003b      	movs	r3, r7
 8009560:	2200      	movs	r2, #0
 8009562:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009564:	003b      	movs	r3, r7
 8009566:	2200      	movs	r2, #0
 8009568:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800956a:	0039      	movs	r1, r7
 800956c:	4b16      	ldr	r3, [pc, #88]	@ (80095c8 <MX_TIM3_Init+0xf0>)
 800956e:	2200      	movs	r2, #0
 8009570:	0018      	movs	r0, r3
 8009572:	f007 fead 	bl	80112d0 <HAL_TIM_PWM_ConfigChannel>
 8009576:	1e03      	subs	r3, r0, #0
 8009578:	d001      	beq.n	800957e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800957a:	f7fd f833 	bl	80065e4 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800957e:	4b12      	ldr	r3, [pc, #72]	@ (80095c8 <MX_TIM3_Init+0xf0>)
 8009580:	2104      	movs	r1, #4
 8009582:	0018      	movs	r0, r3
 8009584:	f008 f94e 	bl	8011824 <HAL_TIMEx_RemapConfig>
 8009588:	1e03      	subs	r3, r0, #0
 800958a:	d001      	beq.n	8009590 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800958c:	f7fd f82a 	bl	80065e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009590:	0039      	movs	r1, r7
 8009592:	4b0d      	ldr	r3, [pc, #52]	@ (80095c8 <MX_TIM3_Init+0xf0>)
 8009594:	2204      	movs	r2, #4
 8009596:	0018      	movs	r0, r3
 8009598:	f007 fe9a 	bl	80112d0 <HAL_TIM_PWM_ConfigChannel>
 800959c:	1e03      	subs	r3, r0, #0
 800959e:	d001      	beq.n	80095a4 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 80095a0:	f7fd f820 	bl	80065e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80095a4:	0039      	movs	r1, r7
 80095a6:	4b08      	ldr	r3, [pc, #32]	@ (80095c8 <MX_TIM3_Init+0xf0>)
 80095a8:	2208      	movs	r2, #8
 80095aa:	0018      	movs	r0, r3
 80095ac:	f007 fe90 	bl	80112d0 <HAL_TIM_PWM_ConfigChannel>
 80095b0:	1e03      	subs	r3, r0, #0
 80095b2:	d001      	beq.n	80095b8 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80095b4:	f7fd f816 	bl	80065e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80095b8:	4b03      	ldr	r3, [pc, #12]	@ (80095c8 <MX_TIM3_Init+0xf0>)
 80095ba:	0018      	movs	r0, r3
 80095bc:	f000 f82e 	bl	800961c <HAL_TIM_MspPostInit>

}
 80095c0:	46c0      	nop			@ (mov r8, r8)
 80095c2:	46bd      	mov	sp, r7
 80095c4:	b006      	add	sp, #24
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	20002a08 	.word	0x20002a08
 80095cc:	40000400 	.word	0x40000400
 80095d0:	0000ffff 	.word	0x0000ffff

080095d4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	2380      	movs	r3, #128	@ 0x80
 80095e2:	05db      	lsls	r3, r3, #23
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d106      	bne.n	80095f6 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80095e8:	4b0a      	ldr	r3, [pc, #40]	@ (8009614 <HAL_TIM_PWM_MspInit+0x40>)
 80095ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095ec:	4b09      	ldr	r3, [pc, #36]	@ (8009614 <HAL_TIM_PWM_MspInit+0x40>)
 80095ee:	2101      	movs	r1, #1
 80095f0:	430a      	orrs	r2, r1
 80095f2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80095f4:	e00a      	b.n	800960c <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a07      	ldr	r2, [pc, #28]	@ (8009618 <HAL_TIM_PWM_MspInit+0x44>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d105      	bne.n	800960c <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009600:	4b04      	ldr	r3, [pc, #16]	@ (8009614 <HAL_TIM_PWM_MspInit+0x40>)
 8009602:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009604:	4b03      	ldr	r3, [pc, #12]	@ (8009614 <HAL_TIM_PWM_MspInit+0x40>)
 8009606:	2102      	movs	r1, #2
 8009608:	430a      	orrs	r2, r1
 800960a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800960c:	46c0      	nop			@ (mov r8, r8)
 800960e:	46bd      	mov	sp, r7
 8009610:	b002      	add	sp, #8
 8009612:	bd80      	pop	{r7, pc}
 8009614:	40021000 	.word	0x40021000
 8009618:	40000400 	.word	0x40000400

0800961c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800961c:	b590      	push	{r4, r7, lr}
 800961e:	b08b      	sub	sp, #44	@ 0x2c
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009624:	2414      	movs	r4, #20
 8009626:	193b      	adds	r3, r7, r4
 8009628:	0018      	movs	r0, r3
 800962a:	2314      	movs	r3, #20
 800962c:	001a      	movs	r2, r3
 800962e:	2100      	movs	r1, #0
 8009630:	f00e ff3c 	bl	80184ac <memset>
  if(timHandle->Instance==TIM2)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	2380      	movs	r3, #128	@ 0x80
 800963a:	05db      	lsls	r3, r3, #23
 800963c:	429a      	cmp	r2, r3
 800963e:	d123      	bne.n	8009688 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009640:	4b27      	ldr	r3, [pc, #156]	@ (80096e0 <HAL_TIM_MspPostInit+0xc4>)
 8009642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009644:	4b26      	ldr	r3, [pc, #152]	@ (80096e0 <HAL_TIM_MspPostInit+0xc4>)
 8009646:	2101      	movs	r1, #1
 8009648:	430a      	orrs	r2, r1
 800964a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800964c:	4b24      	ldr	r3, [pc, #144]	@ (80096e0 <HAL_TIM_MspPostInit+0xc4>)
 800964e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009650:	2201      	movs	r2, #1
 8009652:	4013      	ands	r3, r2
 8009654:	613b      	str	r3, [r7, #16]
 8009656:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 8009658:	0021      	movs	r1, r4
 800965a:	187b      	adds	r3, r7, r1
 800965c:	220d      	movs	r2, #13
 800965e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009660:	187b      	adds	r3, r7, r1
 8009662:	2202      	movs	r2, #2
 8009664:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009666:	187b      	adds	r3, r7, r1
 8009668:	2200      	movs	r2, #0
 800966a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800966c:	187b      	adds	r3, r7, r1
 800966e:	2200      	movs	r2, #0
 8009670:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8009672:	187b      	adds	r3, r7, r1
 8009674:	2202      	movs	r2, #2
 8009676:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009678:	187a      	adds	r2, r7, r1
 800967a:	23a0      	movs	r3, #160	@ 0xa0
 800967c:	05db      	lsls	r3, r3, #23
 800967e:	0011      	movs	r1, r2
 8009680:	0018      	movs	r0, r3
 8009682:	f001 fefb 	bl	800b47c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8009686:	e027      	b.n	80096d8 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a15      	ldr	r2, [pc, #84]	@ (80096e4 <HAL_TIM_MspPostInit+0xc8>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d122      	bne.n	80096d8 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009692:	4b13      	ldr	r3, [pc, #76]	@ (80096e0 <HAL_TIM_MspPostInit+0xc4>)
 8009694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009696:	4b12      	ldr	r3, [pc, #72]	@ (80096e0 <HAL_TIM_MspPostInit+0xc4>)
 8009698:	2104      	movs	r1, #4
 800969a:	430a      	orrs	r2, r1
 800969c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800969e:	4b10      	ldr	r3, [pc, #64]	@ (80096e0 <HAL_TIM_MspPostInit+0xc4>)
 80096a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a2:	2204      	movs	r2, #4
 80096a4:	4013      	ands	r3, r2
 80096a6:	60fb      	str	r3, [r7, #12]
 80096a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 80096aa:	2114      	movs	r1, #20
 80096ac:	187b      	adds	r3, r7, r1
 80096ae:	22e0      	movs	r2, #224	@ 0xe0
 80096b0:	0052      	lsls	r2, r2, #1
 80096b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096b4:	187b      	adds	r3, r7, r1
 80096b6:	2202      	movs	r2, #2
 80096b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096ba:	187b      	adds	r3, r7, r1
 80096bc:	2200      	movs	r2, #0
 80096be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096c0:	187b      	adds	r3, r7, r1
 80096c2:	2200      	movs	r2, #0
 80096c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80096c6:	187b      	adds	r3, r7, r1
 80096c8:	2202      	movs	r2, #2
 80096ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80096cc:	187b      	adds	r3, r7, r1
 80096ce:	4a06      	ldr	r2, [pc, #24]	@ (80096e8 <HAL_TIM_MspPostInit+0xcc>)
 80096d0:	0019      	movs	r1, r3
 80096d2:	0010      	movs	r0, r2
 80096d4:	f001 fed2 	bl	800b47c <HAL_GPIO_Init>
}
 80096d8:	46c0      	nop			@ (mov r8, r8)
 80096da:	46bd      	mov	sp, r7
 80096dc:	b00b      	add	sp, #44	@ 0x2c
 80096de:	bd90      	pop	{r4, r7, pc}
 80096e0:	40021000 	.word	0x40021000
 80096e4:	40000400 	.word	0x40000400
 80096e8:	50000800 	.word	0x50000800

080096ec <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80096f0:	4b17      	ldr	r3, [pc, #92]	@ (8009750 <MX_LPUART1_UART_Init+0x64>)
 80096f2:	4a18      	ldr	r2, [pc, #96]	@ (8009754 <MX_LPUART1_UART_Init+0x68>)
 80096f4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80096f6:	4b16      	ldr	r3, [pc, #88]	@ (8009750 <MX_LPUART1_UART_Init+0x64>)
 80096f8:	22e1      	movs	r2, #225	@ 0xe1
 80096fa:	0252      	lsls	r2, r2, #9
 80096fc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80096fe:	4b14      	ldr	r3, [pc, #80]	@ (8009750 <MX_LPUART1_UART_Init+0x64>)
 8009700:	2200      	movs	r2, #0
 8009702:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8009704:	4b12      	ldr	r3, [pc, #72]	@ (8009750 <MX_LPUART1_UART_Init+0x64>)
 8009706:	2200      	movs	r2, #0
 8009708:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800970a:	4b11      	ldr	r3, [pc, #68]	@ (8009750 <MX_LPUART1_UART_Init+0x64>)
 800970c:	2200      	movs	r2, #0
 800970e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8009710:	4b0f      	ldr	r3, [pc, #60]	@ (8009750 <MX_LPUART1_UART_Init+0x64>)
 8009712:	220c      	movs	r2, #12
 8009714:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009716:	4b0e      	ldr	r3, [pc, #56]	@ (8009750 <MX_LPUART1_UART_Init+0x64>)
 8009718:	2200      	movs	r2, #0
 800971a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800971c:	4b0c      	ldr	r3, [pc, #48]	@ (8009750 <MX_LPUART1_UART_Init+0x64>)
 800971e:	2200      	movs	r2, #0
 8009720:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8009722:	4b0b      	ldr	r3, [pc, #44]	@ (8009750 <MX_LPUART1_UART_Init+0x64>)
 8009724:	2218      	movs	r2, #24
 8009726:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8009728:	4b09      	ldr	r3, [pc, #36]	@ (8009750 <MX_LPUART1_UART_Init+0x64>)
 800972a:	2280      	movs	r2, #128	@ 0x80
 800972c:	0212      	lsls	r2, r2, #8
 800972e:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8009730:	4b07      	ldr	r3, [pc, #28]	@ (8009750 <MX_LPUART1_UART_Init+0x64>)
 8009732:	2280      	movs	r2, #128	@ 0x80
 8009734:	0152      	lsls	r2, r2, #5
 8009736:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8009738:	4b05      	ldr	r3, [pc, #20]	@ (8009750 <MX_LPUART1_UART_Init+0x64>)
 800973a:	0018      	movs	r0, r3
 800973c:	f008 f890 	bl	8011860 <HAL_UART_Init>
 8009740:	1e03      	subs	r3, r0, #0
 8009742:	d001      	beq.n	8009748 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 8009744:	f7fc ff4e 	bl	80065e4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8009748:	46c0      	nop			@ (mov r8, r8)
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	46c0      	nop			@ (mov r8, r8)
 8009750:	20002a48 	.word	0x20002a48
 8009754:	40004800 	.word	0x40004800

08009758 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800975c:	4b16      	ldr	r3, [pc, #88]	@ (80097b8 <MX_USART1_UART_Init+0x60>)
 800975e:	4a17      	ldr	r2, [pc, #92]	@ (80097bc <MX_USART1_UART_Init+0x64>)
 8009760:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009762:	4b15      	ldr	r3, [pc, #84]	@ (80097b8 <MX_USART1_UART_Init+0x60>)
 8009764:	22e1      	movs	r2, #225	@ 0xe1
 8009766:	0252      	lsls	r2, r2, #9
 8009768:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800976a:	4b13      	ldr	r3, [pc, #76]	@ (80097b8 <MX_USART1_UART_Init+0x60>)
 800976c:	2200      	movs	r2, #0
 800976e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009770:	4b11      	ldr	r3, [pc, #68]	@ (80097b8 <MX_USART1_UART_Init+0x60>)
 8009772:	2200      	movs	r2, #0
 8009774:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009776:	4b10      	ldr	r3, [pc, #64]	@ (80097b8 <MX_USART1_UART_Init+0x60>)
 8009778:	2200      	movs	r2, #0
 800977a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800977c:	4b0e      	ldr	r3, [pc, #56]	@ (80097b8 <MX_USART1_UART_Init+0x60>)
 800977e:	220c      	movs	r2, #12
 8009780:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009782:	4b0d      	ldr	r3, [pc, #52]	@ (80097b8 <MX_USART1_UART_Init+0x60>)
 8009784:	2200      	movs	r2, #0
 8009786:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009788:	4b0b      	ldr	r3, [pc, #44]	@ (80097b8 <MX_USART1_UART_Init+0x60>)
 800978a:	2200      	movs	r2, #0
 800978c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800978e:	4b0a      	ldr	r3, [pc, #40]	@ (80097b8 <MX_USART1_UART_Init+0x60>)
 8009790:	2200      	movs	r2, #0
 8009792:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8009794:	4b08      	ldr	r3, [pc, #32]	@ (80097b8 <MX_USART1_UART_Init+0x60>)
 8009796:	2208      	movs	r2, #8
 8009798:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800979a:	4b07      	ldr	r3, [pc, #28]	@ (80097b8 <MX_USART1_UART_Init+0x60>)
 800979c:	2280      	movs	r2, #128	@ 0x80
 800979e:	0212      	lsls	r2, r2, #8
 80097a0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80097a2:	4b05      	ldr	r3, [pc, #20]	@ (80097b8 <MX_USART1_UART_Init+0x60>)
 80097a4:	0018      	movs	r0, r3
 80097a6:	f008 f85b 	bl	8011860 <HAL_UART_Init>
 80097aa:	1e03      	subs	r3, r0, #0
 80097ac:	d001      	beq.n	80097b2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80097ae:	f7fc ff19 	bl	80065e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80097b2:	46c0      	nop			@ (mov r8, r8)
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	20002b00 	.word	0x20002b00
 80097bc:	40013800 	.word	0x40013800

080097c0 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80097c4:	4b14      	ldr	r3, [pc, #80]	@ (8009818 <MX_USART4_UART_Init+0x58>)
 80097c6:	4a15      	ldr	r2, [pc, #84]	@ (800981c <MX_USART4_UART_Init+0x5c>)
 80097c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80097ca:	4b13      	ldr	r3, [pc, #76]	@ (8009818 <MX_USART4_UART_Init+0x58>)
 80097cc:	22e1      	movs	r2, #225	@ 0xe1
 80097ce:	0252      	lsls	r2, r2, #9
 80097d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80097d2:	4b11      	ldr	r3, [pc, #68]	@ (8009818 <MX_USART4_UART_Init+0x58>)
 80097d4:	2200      	movs	r2, #0
 80097d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80097d8:	4b0f      	ldr	r3, [pc, #60]	@ (8009818 <MX_USART4_UART_Init+0x58>)
 80097da:	2200      	movs	r2, #0
 80097dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80097de:	4b0e      	ldr	r3, [pc, #56]	@ (8009818 <MX_USART4_UART_Init+0x58>)
 80097e0:	2200      	movs	r2, #0
 80097e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80097e4:	4b0c      	ldr	r3, [pc, #48]	@ (8009818 <MX_USART4_UART_Init+0x58>)
 80097e6:	220c      	movs	r2, #12
 80097e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80097ea:	4b0b      	ldr	r3, [pc, #44]	@ (8009818 <MX_USART4_UART_Init+0x58>)
 80097ec:	2200      	movs	r2, #0
 80097ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80097f0:	4b09      	ldr	r3, [pc, #36]	@ (8009818 <MX_USART4_UART_Init+0x58>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80097f6:	4b08      	ldr	r3, [pc, #32]	@ (8009818 <MX_USART4_UART_Init+0x58>)
 80097f8:	2200      	movs	r2, #0
 80097fa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80097fc:	4b06      	ldr	r3, [pc, #24]	@ (8009818 <MX_USART4_UART_Init+0x58>)
 80097fe:	2200      	movs	r2, #0
 8009800:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8009802:	4b05      	ldr	r3, [pc, #20]	@ (8009818 <MX_USART4_UART_Init+0x58>)
 8009804:	0018      	movs	r0, r3
 8009806:	f008 f82b 	bl	8011860 <HAL_UART_Init>
 800980a:	1e03      	subs	r3, r0, #0
 800980c:	d001      	beq.n	8009812 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800980e:	f7fc fee9 	bl	80065e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8009812:	46c0      	nop			@ (mov r8, r8)
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	20002bb8 	.word	0x20002bb8
 800981c:	40004c00 	.word	0x40004c00

08009820 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009820:	b590      	push	{r4, r7, lr}
 8009822:	b08d      	sub	sp, #52	@ 0x34
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009828:	241c      	movs	r4, #28
 800982a:	193b      	adds	r3, r7, r4
 800982c:	0018      	movs	r0, r3
 800982e:	2314      	movs	r3, #20
 8009830:	001a      	movs	r2, r3
 8009832:	2100      	movs	r1, #0
 8009834:	f00e fe3a 	bl	80184ac <memset>
  if(uartHandle->Instance==LPUART1)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a87      	ldr	r2, [pc, #540]	@ (8009a5c <HAL_UART_MspInit+0x23c>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d129      	bne.n	8009896 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8009842:	4b87      	ldr	r3, [pc, #540]	@ (8009a60 <HAL_UART_MspInit+0x240>)
 8009844:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009846:	4b86      	ldr	r3, [pc, #536]	@ (8009a60 <HAL_UART_MspInit+0x240>)
 8009848:	2180      	movs	r1, #128	@ 0x80
 800984a:	02c9      	lsls	r1, r1, #11
 800984c:	430a      	orrs	r2, r1
 800984e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009850:	4b83      	ldr	r3, [pc, #524]	@ (8009a60 <HAL_UART_MspInit+0x240>)
 8009852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009854:	4b82      	ldr	r3, [pc, #520]	@ (8009a60 <HAL_UART_MspInit+0x240>)
 8009856:	2104      	movs	r1, #4
 8009858:	430a      	orrs	r2, r1
 800985a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800985c:	4b80      	ldr	r3, [pc, #512]	@ (8009a60 <HAL_UART_MspInit+0x240>)
 800985e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009860:	2204      	movs	r2, #4
 8009862:	4013      	ands	r3, r2
 8009864:	61bb      	str	r3, [r7, #24]
 8009866:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009868:	0021      	movs	r1, r4
 800986a:	187b      	adds	r3, r7, r1
 800986c:	2203      	movs	r2, #3
 800986e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009870:	187b      	adds	r3, r7, r1
 8009872:	2202      	movs	r2, #2
 8009874:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009876:	187b      	adds	r3, r7, r1
 8009878:	2200      	movs	r2, #0
 800987a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800987c:	187b      	adds	r3, r7, r1
 800987e:	2203      	movs	r2, #3
 8009880:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8009882:	187b      	adds	r3, r7, r1
 8009884:	2206      	movs	r2, #6
 8009886:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009888:	187b      	adds	r3, r7, r1
 800988a:	4a76      	ldr	r2, [pc, #472]	@ (8009a64 <HAL_UART_MspInit+0x244>)
 800988c:	0019      	movs	r1, r3
 800988e:	0010      	movs	r0, r2
 8009890:	f001 fdf4 	bl	800b47c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8009894:	e0dd      	b.n	8009a52 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART1)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a73      	ldr	r2, [pc, #460]	@ (8009a68 <HAL_UART_MspInit+0x248>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d12b      	bne.n	80098f8 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART1_CLK_ENABLE();
 80098a0:	4b6f      	ldr	r3, [pc, #444]	@ (8009a60 <HAL_UART_MspInit+0x240>)
 80098a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098a4:	4b6e      	ldr	r3, [pc, #440]	@ (8009a60 <HAL_UART_MspInit+0x240>)
 80098a6:	2180      	movs	r1, #128	@ 0x80
 80098a8:	01c9      	lsls	r1, r1, #7
 80098aa:	430a      	orrs	r2, r1
 80098ac:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098ae:	4b6c      	ldr	r3, [pc, #432]	@ (8009a60 <HAL_UART_MspInit+0x240>)
 80098b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098b2:	4b6b      	ldr	r3, [pc, #428]	@ (8009a60 <HAL_UART_MspInit+0x240>)
 80098b4:	2101      	movs	r1, #1
 80098b6:	430a      	orrs	r2, r1
 80098b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80098ba:	4b69      	ldr	r3, [pc, #420]	@ (8009a60 <HAL_UART_MspInit+0x240>)
 80098bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098be:	2201      	movs	r2, #1
 80098c0:	4013      	ands	r3, r2
 80098c2:	617b      	str	r3, [r7, #20]
 80098c4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80098c6:	211c      	movs	r1, #28
 80098c8:	187b      	adds	r3, r7, r1
 80098ca:	22c0      	movs	r2, #192	@ 0xc0
 80098cc:	00d2      	lsls	r2, r2, #3
 80098ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098d0:	187b      	adds	r3, r7, r1
 80098d2:	2202      	movs	r2, #2
 80098d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098d6:	187b      	adds	r3, r7, r1
 80098d8:	2200      	movs	r2, #0
 80098da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098dc:	187b      	adds	r3, r7, r1
 80098de:	2203      	movs	r2, #3
 80098e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80098e2:	187b      	adds	r3, r7, r1
 80098e4:	2204      	movs	r2, #4
 80098e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098e8:	187a      	adds	r2, r7, r1
 80098ea:	23a0      	movs	r3, #160	@ 0xa0
 80098ec:	05db      	lsls	r3, r3, #23
 80098ee:	0011      	movs	r1, r2
 80098f0:	0018      	movs	r0, r3
 80098f2:	f001 fdc3 	bl	800b47c <HAL_GPIO_Init>
}
 80098f6:	e0ac      	b.n	8009a52 <HAL_UART_MspInit+0x232>
  else if(uartHandle->Instance==USART4)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a5b      	ldr	r2, [pc, #364]	@ (8009a6c <HAL_UART_MspInit+0x24c>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d000      	beq.n	8009904 <HAL_UART_MspInit+0xe4>
 8009902:	e0a6      	b.n	8009a52 <HAL_UART_MspInit+0x232>
    __HAL_RCC_USART4_CLK_ENABLE();
 8009904:	4b56      	ldr	r3, [pc, #344]	@ (8009a60 <HAL_UART_MspInit+0x240>)
 8009906:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009908:	4b55      	ldr	r3, [pc, #340]	@ (8009a60 <HAL_UART_MspInit+0x240>)
 800990a:	2180      	movs	r1, #128	@ 0x80
 800990c:	0309      	lsls	r1, r1, #12
 800990e:	430a      	orrs	r2, r1
 8009910:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009912:	4b53      	ldr	r3, [pc, #332]	@ (8009a60 <HAL_UART_MspInit+0x240>)
 8009914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009916:	4b52      	ldr	r3, [pc, #328]	@ (8009a60 <HAL_UART_MspInit+0x240>)
 8009918:	2101      	movs	r1, #1
 800991a:	430a      	orrs	r2, r1
 800991c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800991e:	4b50      	ldr	r3, [pc, #320]	@ (8009a60 <HAL_UART_MspInit+0x240>)
 8009920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009922:	2201      	movs	r2, #1
 8009924:	4013      	ands	r3, r2
 8009926:	613b      	str	r3, [r7, #16]
 8009928:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800992a:	4b4d      	ldr	r3, [pc, #308]	@ (8009a60 <HAL_UART_MspInit+0x240>)
 800992c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800992e:	4b4c      	ldr	r3, [pc, #304]	@ (8009a60 <HAL_UART_MspInit+0x240>)
 8009930:	2104      	movs	r1, #4
 8009932:	430a      	orrs	r2, r1
 8009934:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009936:	4b4a      	ldr	r3, [pc, #296]	@ (8009a60 <HAL_UART_MspInit+0x240>)
 8009938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800993a:	2204      	movs	r2, #4
 800993c:	4013      	ands	r3, r2
 800993e:	60fb      	str	r3, [r7, #12]
 8009940:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009942:	241c      	movs	r4, #28
 8009944:	193b      	adds	r3, r7, r4
 8009946:	2202      	movs	r2, #2
 8009948:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800994a:	193b      	adds	r3, r7, r4
 800994c:	2202      	movs	r2, #2
 800994e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009950:	193b      	adds	r3, r7, r4
 8009952:	2200      	movs	r2, #0
 8009954:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009956:	193b      	adds	r3, r7, r4
 8009958:	2203      	movs	r2, #3
 800995a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800995c:	193b      	adds	r3, r7, r4
 800995e:	2206      	movs	r2, #6
 8009960:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009962:	193a      	adds	r2, r7, r4
 8009964:	23a0      	movs	r3, #160	@ 0xa0
 8009966:	05db      	lsls	r3, r3, #23
 8009968:	0011      	movs	r1, r2
 800996a:	0018      	movs	r0, r3
 800996c:	f001 fd86 	bl	800b47c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009970:	0021      	movs	r1, r4
 8009972:	187b      	adds	r3, r7, r1
 8009974:	2280      	movs	r2, #128	@ 0x80
 8009976:	00d2      	lsls	r2, r2, #3
 8009978:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800997a:	187b      	adds	r3, r7, r1
 800997c:	2202      	movs	r2, #2
 800997e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009980:	187b      	adds	r3, r7, r1
 8009982:	2200      	movs	r2, #0
 8009984:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009986:	187b      	adds	r3, r7, r1
 8009988:	2203      	movs	r2, #3
 800998a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800998c:	187b      	adds	r3, r7, r1
 800998e:	2206      	movs	r2, #6
 8009990:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009992:	187b      	adds	r3, r7, r1
 8009994:	4a33      	ldr	r2, [pc, #204]	@ (8009a64 <HAL_UART_MspInit+0x244>)
 8009996:	0019      	movs	r1, r3
 8009998:	0010      	movs	r0, r2
 800999a:	f001 fd6f 	bl	800b47c <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800999e:	4b34      	ldr	r3, [pc, #208]	@ (8009a70 <HAL_UART_MspInit+0x250>)
 80099a0:	4a34      	ldr	r2, [pc, #208]	@ (8009a74 <HAL_UART_MspInit+0x254>)
 80099a2:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 80099a4:	4b32      	ldr	r3, [pc, #200]	@ (8009a70 <HAL_UART_MspInit+0x250>)
 80099a6:	220c      	movs	r2, #12
 80099a8:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80099aa:	4b31      	ldr	r3, [pc, #196]	@ (8009a70 <HAL_UART_MspInit+0x250>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80099b0:	4b2f      	ldr	r3, [pc, #188]	@ (8009a70 <HAL_UART_MspInit+0x250>)
 80099b2:	2200      	movs	r2, #0
 80099b4:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80099b6:	4b2e      	ldr	r3, [pc, #184]	@ (8009a70 <HAL_UART_MspInit+0x250>)
 80099b8:	2280      	movs	r2, #128	@ 0x80
 80099ba:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80099bc:	4b2c      	ldr	r3, [pc, #176]	@ (8009a70 <HAL_UART_MspInit+0x250>)
 80099be:	2200      	movs	r2, #0
 80099c0:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80099c2:	4b2b      	ldr	r3, [pc, #172]	@ (8009a70 <HAL_UART_MspInit+0x250>)
 80099c4:	2200      	movs	r2, #0
 80099c6:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 80099c8:	4b29      	ldr	r3, [pc, #164]	@ (8009a70 <HAL_UART_MspInit+0x250>)
 80099ca:	2220      	movs	r2, #32
 80099cc:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80099ce:	4b28      	ldr	r3, [pc, #160]	@ (8009a70 <HAL_UART_MspInit+0x250>)
 80099d0:	2200      	movs	r2, #0
 80099d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 80099d4:	4b26      	ldr	r3, [pc, #152]	@ (8009a70 <HAL_UART_MspInit+0x250>)
 80099d6:	0018      	movs	r0, r3
 80099d8:	f001 f8d6 	bl	800ab88 <HAL_DMA_Init>
 80099dc:	1e03      	subs	r3, r0, #0
 80099de:	d001      	beq.n	80099e4 <HAL_UART_MspInit+0x1c4>
      Error_Handler();
 80099e0:	f7fc fe00 	bl	80065e4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	4a22      	ldr	r2, [pc, #136]	@ (8009a70 <HAL_UART_MspInit+0x250>)
 80099e8:	675a      	str	r2, [r3, #116]	@ 0x74
 80099ea:	4b21      	ldr	r3, [pc, #132]	@ (8009a70 <HAL_UART_MspInit+0x250>)
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 80099f0:	4b21      	ldr	r3, [pc, #132]	@ (8009a78 <HAL_UART_MspInit+0x258>)
 80099f2:	4a22      	ldr	r2, [pc, #136]	@ (8009a7c <HAL_UART_MspInit+0x25c>)
 80099f4:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 80099f6:	4b20      	ldr	r3, [pc, #128]	@ (8009a78 <HAL_UART_MspInit+0x258>)
 80099f8:	220c      	movs	r2, #12
 80099fa:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80099fc:	4b1e      	ldr	r3, [pc, #120]	@ (8009a78 <HAL_UART_MspInit+0x258>)
 80099fe:	2210      	movs	r2, #16
 8009a00:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009a02:	4b1d      	ldr	r3, [pc, #116]	@ (8009a78 <HAL_UART_MspInit+0x258>)
 8009a04:	2200      	movs	r2, #0
 8009a06:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009a08:	4b1b      	ldr	r3, [pc, #108]	@ (8009a78 <HAL_UART_MspInit+0x258>)
 8009a0a:	2280      	movs	r2, #128	@ 0x80
 8009a0c:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8009a78 <HAL_UART_MspInit+0x258>)
 8009a10:	2200      	movs	r2, #0
 8009a12:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009a14:	4b18      	ldr	r3, [pc, #96]	@ (8009a78 <HAL_UART_MspInit+0x258>)
 8009a16:	2200      	movs	r2, #0
 8009a18:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8009a1a:	4b17      	ldr	r3, [pc, #92]	@ (8009a78 <HAL_UART_MspInit+0x258>)
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009a20:	4b15      	ldr	r3, [pc, #84]	@ (8009a78 <HAL_UART_MspInit+0x258>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8009a26:	4b14      	ldr	r3, [pc, #80]	@ (8009a78 <HAL_UART_MspInit+0x258>)
 8009a28:	0018      	movs	r0, r3
 8009a2a:	f001 f8ad 	bl	800ab88 <HAL_DMA_Init>
 8009a2e:	1e03      	subs	r3, r0, #0
 8009a30:	d001      	beq.n	8009a36 <HAL_UART_MspInit+0x216>
      Error_Handler();
 8009a32:	f7fc fdd7 	bl	80065e4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4a0f      	ldr	r2, [pc, #60]	@ (8009a78 <HAL_UART_MspInit+0x258>)
 8009a3a:	671a      	str	r2, [r3, #112]	@ 0x70
 8009a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8009a78 <HAL_UART_MspInit+0x258>)
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8009a42:	2200      	movs	r2, #0
 8009a44:	2100      	movs	r1, #0
 8009a46:	200e      	movs	r0, #14
 8009a48:	f001 f86c 	bl	800ab24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8009a4c:	200e      	movs	r0, #14
 8009a4e:	f001 f87e 	bl	800ab4e <HAL_NVIC_EnableIRQ>
}
 8009a52:	46c0      	nop			@ (mov r8, r8)
 8009a54:	46bd      	mov	sp, r7
 8009a56:	b00d      	add	sp, #52	@ 0x34
 8009a58:	bd90      	pop	{r4, r7, pc}
 8009a5a:	46c0      	nop			@ (mov r8, r8)
 8009a5c:	40004800 	.word	0x40004800
 8009a60:	40021000 	.word	0x40021000
 8009a64:	50000800 	.word	0x50000800
 8009a68:	40013800 	.word	0x40013800
 8009a6c:	40004c00 	.word	0x40004c00
 8009a70:	20002c70 	.word	0x20002c70
 8009a74:	4002006c 	.word	0x4002006c
 8009a78:	20002cb8 	.word	0x20002cb8
 8009a7c:	40020080 	.word	0x40020080

08009a80 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 50

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b086      	sub	sp, #24
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8009a88:	f000 fbd6 	bl	800a238 <HAL_GetTick>
 8009a8c:	0003      	movs	r3, r0
 8009a8e:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8009a90:	4b1c      	ldr	r3, [pc, #112]	@ (8009b04 <TimestampIsReached+0x84>)
 8009a92:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8009a94:	697a      	ldr	r2, [r7, #20]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d307      	bcc.n	8009aac <TimestampIsReached+0x2c>
 8009a9c:	697a      	ldr	r2, [r7, #20]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	1ad3      	subs	r3, r2, r3
 8009aa2:	693a      	ldr	r2, [r7, #16]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d901      	bls.n	8009aac <TimestampIsReached+0x2c>
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	e000      	b.n	8009aae <TimestampIsReached+0x2e>
 8009aac:	2200      	movs	r2, #0
 8009aae:	230f      	movs	r3, #15
 8009ab0:	18fb      	adds	r3, r7, r3
 8009ab2:	701a      	strb	r2, [r3, #0]
 8009ab4:	781a      	ldrb	r2, [r3, #0]
 8009ab6:	2101      	movs	r1, #1
 8009ab8:	400a      	ands	r2, r1
 8009aba:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8009abc:	697a      	ldr	r2, [r7, #20]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d207      	bcs.n	8009ad4 <TimestampIsReached+0x54>
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	1ad3      	subs	r3, r2, r3
 8009aca:	693a      	ldr	r2, [r7, #16]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d201      	bcs.n	8009ad4 <TimestampIsReached+0x54>
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	e000      	b.n	8009ad6 <TimestampIsReached+0x56>
 8009ad4:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8009ad6:	200e      	movs	r0, #14
 8009ad8:	183b      	adds	r3, r7, r0
 8009ada:	701a      	strb	r2, [r3, #0]
 8009adc:	781a      	ldrb	r2, [r3, #0]
 8009ade:	2101      	movs	r1, #1
 8009ae0:	400a      	ands	r2, r1
 8009ae2:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8009ae4:	230f      	movs	r3, #15
 8009ae6:	18fb      	adds	r3, r7, r3
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d103      	bne.n	8009af6 <TimestampIsReached+0x76>
 8009aee:	183b      	adds	r3, r7, r0
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d001      	beq.n	8009afa <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8009af6:	2301      	movs	r3, #1
 8009af8:	e000      	b.n	8009afc <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8009afa:	2300      	movs	r3, #0
}
 8009afc:	0018      	movs	r0, r3
 8009afe:	46bd      	mov	sp, r7
 8009b00:	b006      	add	sp, #24
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	7fffffff 	.word	0x7fffffff

08009b08 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8009b10:	f000 fb92 	bl	800a238 <HAL_GetTick>
 8009b14:	0002      	movs	r2, r0
 8009b16:	4904      	ldr	r1, [pc, #16]	@ (8009b28 <AddTimestamp+0x20>)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	0018      	movs	r0, r3
 8009b1c:	f00e fc22 	bl	8018364 <siprintf>
}
 8009b20:	46c0      	nop			@ (mov r8, r8)
 8009b22:	46bd      	mov	sp, r7
 8009b24:	b002      	add	sp, #8
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	0801bcac 	.word	0x0801bcac

08009b2c <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8009b2c:	b40c      	push	{r2, r3}
 8009b2e:	b590      	push	{r4, r7, lr}
 8009b30:	b093      	sub	sp, #76	@ 0x4c
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	0002      	movs	r2, r0
 8009b36:	6039      	str	r1, [r7, #0]
 8009b38:	1dfb      	adds	r3, r7, #7
 8009b3a:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8009b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8009bbc <CreateLine+0x90>)
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	1dfa      	adds	r2, r7, #7
 8009b42:	7812      	ldrb	r2, [r2, #0]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d832      	bhi.n	8009bae <CreateLine+0x82>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8009b48:	683a      	ldr	r2, [r7, #0]
 8009b4a:	491d      	ldr	r1, [pc, #116]	@ (8009bc0 <CreateLine+0x94>)
 8009b4c:	2410      	movs	r4, #16
 8009b4e:	193b      	adds	r3, r7, r4
 8009b50:	0018      	movs	r0, r3
 8009b52:	f00e fc07 	bl	8018364 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8009b56:	4b19      	ldr	r3, [pc, #100]	@ (8009bbc <CreateLine+0x90>)
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d909      	bls.n	8009b72 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8009b5e:	193b      	adds	r3, r7, r4
 8009b60:	0018      	movs	r0, r3
 8009b62:	f7f6 fad1 	bl	8000108 <strlen>
 8009b66:	0002      	movs	r2, r0
 8009b68:	193b      	adds	r3, r7, r4
 8009b6a:	189b      	adds	r3, r3, r2
 8009b6c:	0018      	movs	r0, r3
 8009b6e:	f7ff ffcb 	bl	8009b08 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8009b72:	2410      	movs	r4, #16
 8009b74:	193b      	adds	r3, r7, r4
 8009b76:	0018      	movs	r0, r3
 8009b78:	f7f6 fac6 	bl	8000108 <strlen>
 8009b7c:	0003      	movs	r3, r0
 8009b7e:	647b      	str	r3, [r7, #68]	@ 0x44

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8009b80:	2354      	movs	r3, #84	@ 0x54
 8009b82:	2208      	movs	r2, #8
 8009b84:	189b      	adds	r3, r3, r2
 8009b86:	19db      	adds	r3, r3, r7
 8009b88:	60fb      	str	r3, [r7, #12]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 8009b8a:	193a      	adds	r2, r7, r4
 8009b8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b8e:	18d0      	adds	r0, r2, r3
 8009b90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b92:	2232      	movs	r2, #50	@ 0x32
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	0019      	movs	r1, r3
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009b9c:	f00e fc7a 	bl	8018494 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 8009ba0:	193a      	adds	r2, r7, r4
 8009ba2:	4b08      	ldr	r3, [pc, #32]	@ (8009bc4 <CreateLine+0x98>)
 8009ba4:	0011      	movs	r1, r2
 8009ba6:	0018      	movs	r0, r3
 8009ba8:	f00e fbcc 	bl	8018344 <iprintf>
 8009bac:	e000      	b.n	8009bb0 <CreateLine+0x84>
    return;
 8009bae:	46c0      	nop			@ (mov r8, r8)
}
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	b013      	add	sp, #76	@ 0x4c
 8009bb4:	bc90      	pop	{r4, r7}
 8009bb6:	bc08      	pop	{r3}
 8009bb8:	b002      	add	sp, #8
 8009bba:	4718      	bx	r3
 8009bbc:	20000060 	.word	0x20000060
 8009bc0:	0801bcb8 	.word	0x0801bcb8
 8009bc4:	0801bcbc 	.word	0x0801bcbc

08009bc8 <_write>:

int _write(int fd, const void *buf, size_t count) {
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	60b9      	str	r1, [r7, #8]
 8009bd2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	b29a      	uxth	r2, r3
 8009bd8:	68b9      	ldr	r1, [r7, #8]
 8009bda:	4804      	ldr	r0, [pc, #16]	@ (8009bec <_write+0x24>)
 8009bdc:	2364      	movs	r3, #100	@ 0x64
 8009bde:	f007 fea5 	bl	801192c <HAL_UART_Transmit>
  return count;
 8009be2:	687b      	ldr	r3, [r7, #4]
}
 8009be4:	0018      	movs	r0, r3
 8009be6:	46bd      	mov	sp, r7
 8009be8:	b004      	add	sp, #16
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	20002b00 	.word	0x20002b00

08009bf0 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	0002      	movs	r2, r0
 8009bf8:	1dfb      	adds	r3, r7, #7
 8009bfa:	701a      	strb	r2, [r3, #0]
 8009bfc:	4b03      	ldr	r3, [pc, #12]	@ (8009c0c <SetVerboseLevel+0x1c>)
 8009bfe:	1dfa      	adds	r2, r7, #7
 8009c00:	7812      	ldrb	r2, [r2, #0]
 8009c02:	701a      	strb	r2, [r3, #0]
 8009c04:	46c0      	nop			@ (mov r8, r8)
 8009c06:	46bd      	mov	sp, r7
 8009c08:	b002      	add	sp, #8
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	20000060 	.word	0x20000060

08009c10 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 8009c10:	b580      	push	{r7, lr}
 8009c12:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009c14:	f000 fb10 	bl	800a238 <HAL_GetTick>
 8009c18:	0003      	movs	r3, r0
}
 8009c1a:	0018      	movs	r0, r3
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 8009c26:	4a0f      	ldr	r2, [pc, #60]	@ (8009c64 <BinaryReleaseInfo+0x44>)
 8009c28:	4b0f      	ldr	r3, [pc, #60]	@ (8009c68 <BinaryReleaseInfo+0x48>)
 8009c2a:	0019      	movs	r1, r3
 8009c2c:	2002      	movs	r0, #2
 8009c2e:	f7ff ff7d 	bl	8009b2c <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8009c32:	480e      	ldr	r0, [pc, #56]	@ (8009c6c <BinaryReleaseInfo+0x4c>)
 8009c34:	4a0e      	ldr	r2, [pc, #56]	@ (8009c70 <BinaryReleaseInfo+0x50>)
 8009c36:	490c      	ldr	r1, [pc, #48]	@ (8009c68 <BinaryReleaseInfo+0x48>)
 8009c38:	4b0e      	ldr	r3, [pc, #56]	@ (8009c74 <BinaryReleaseInfo+0x54>)
 8009c3a:	9300      	str	r3, [sp, #0]
 8009c3c:	0003      	movs	r3, r0
 8009c3e:	2002      	movs	r0, #2
 8009c40:	f7ff ff74 	bl	8009b2c <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w33a");
 8009c44:	4a0c      	ldr	r2, [pc, #48]	@ (8009c78 <BinaryReleaseInfo+0x58>)
 8009c46:	4b08      	ldr	r3, [pc, #32]	@ (8009c68 <BinaryReleaseInfo+0x48>)
 8009c48:	0019      	movs	r1, r3
 8009c4a:	2002      	movs	r0, #2
 8009c4c:	f7ff ff6e 	bl	8009b2c <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 8009c50:	4b0a      	ldr	r3, [pc, #40]	@ (8009c7c <BinaryReleaseInfo+0x5c>)
 8009c52:	4a0b      	ldr	r2, [pc, #44]	@ (8009c80 <BinaryReleaseInfo+0x60>)
 8009c54:	4904      	ldr	r1, [pc, #16]	@ (8009c68 <BinaryReleaseInfo+0x48>)
 8009c56:	2002      	movs	r0, #2
 8009c58:	f7ff ff68 	bl	8009b2c <CreateLine>
}
 8009c5c:	46c0      	nop			@ (mov r8, r8)
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	46c0      	nop			@ (mov r8, r8)
 8009c64:	0801bcc4 	.word	0x0801bcc4
 8009c68:	0801bcf0 	.word	0x0801bcf0
 8009c6c:	0801bcf4 	.word	0x0801bcf4
 8009c70:	0801bd00 	.word	0x0801bd00
 8009c74:	0801bd14 	.word	0x0801bd14
 8009c78:	0801bd20 	.word	0x0801bd20
 8009c7c:	0801bd2c 	.word	0x0801bd2c
 8009c80:	0801bd34 	.word	0x0801bd34

08009c84 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8009c84:	b590      	push	{r4, r7, lr}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6039      	str	r1, [r7, #0]
 8009c8c:	0011      	movs	r1, r2
 8009c8e:	1dfb      	adds	r3, r7, #7
 8009c90:	1c02      	adds	r2, r0, #0
 8009c92:	701a      	strb	r2, [r3, #0]
 8009c94:	1dbb      	adds	r3, r7, #6
 8009c96:	1c0a      	adds	r2, r1, #0
 8009c98:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8009c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8009cc4 <ReadRegister+0x40>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00a      	beq.n	8009cb8 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 8009ca2:	4b08      	ldr	r3, [pc, #32]	@ (8009cc4 <ReadRegister+0x40>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	1dba      	adds	r2, r7, #6
 8009ca8:	7814      	ldrb	r4, [r2, #0]
 8009caa:	6839      	ldr	r1, [r7, #0]
 8009cac:	1dfa      	adds	r2, r7, #7
 8009cae:	7810      	ldrb	r0, [r2, #0]
 8009cb0:	0022      	movs	r2, r4
 8009cb2:	4798      	blx	r3
 8009cb4:	0003      	movs	r3, r0
 8009cb6:	e000      	b.n	8009cba <ReadRegister+0x36>
	}
	return false;
 8009cb8:	2300      	movs	r3, #0
}
 8009cba:	0018      	movs	r0, r3
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	b003      	add	sp, #12
 8009cc0:	bd90      	pop	{r4, r7, pc}
 8009cc2:	46c0      	nop			@ (mov r8, r8)
 8009cc4:	20002d00 	.word	0x20002d00

08009cc8 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8009cc8:	b590      	push	{r4, r7, lr}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6039      	str	r1, [r7, #0]
 8009cd0:	0011      	movs	r1, r2
 8009cd2:	1dfb      	adds	r3, r7, #7
 8009cd4:	1c02      	adds	r2, r0, #0
 8009cd6:	701a      	strb	r2, [r3, #0]
 8009cd8:	1dbb      	adds	r3, r7, #6
 8009cda:	1c0a      	adds	r2, r1, #0
 8009cdc:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8009cde:	4b0a      	ldr	r3, [pc, #40]	@ (8009d08 <WriteRegister+0x40>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00a      	beq.n	8009cfc <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 8009ce6:	4b08      	ldr	r3, [pc, #32]	@ (8009d08 <WriteRegister+0x40>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	1dba      	adds	r2, r7, #6
 8009cec:	7814      	ldrb	r4, [r2, #0]
 8009cee:	6839      	ldr	r1, [r7, #0]
 8009cf0:	1dfa      	adds	r2, r7, #7
 8009cf2:	7810      	ldrb	r0, [r2, #0]
 8009cf4:	0022      	movs	r2, r4
 8009cf6:	4798      	blx	r3
 8009cf8:	0003      	movs	r3, r0
 8009cfa:	e000      	b.n	8009cfe <WriteRegister+0x36>
  }
  return false;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	0018      	movs	r0, r3
 8009d00:	46bd      	mov	sp, r7
 8009d02:	b003      	add	sp, #12
 8009d04:	bd90      	pop	{r4, r7, pc}
 8009d06:	46c0      	nop			@ (mov r8, r8)
 8009d08:	20002d04 	.word	0x20002d04

08009d0c <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	000a      	movs	r2, r1
 8009d16:	1cfb      	adds	r3, r7, #3
 8009d18:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 8009d1a:	230f      	movs	r3, #15
 8009d1c:	18fb      	adds	r3, r7, r3
 8009d1e:	22ff      	movs	r2, #255	@ 0xff
 8009d20:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8009d22:	230e      	movs	r3, #14
 8009d24:	18fb      	adds	r3, r7, r3
 8009d26:	2200      	movs	r2, #0
 8009d28:	701a      	strb	r2, [r3, #0]
 8009d2a:	e037      	b.n	8009d9c <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8009d2c:	230e      	movs	r3, #14
 8009d2e:	18fb      	adds	r3, r7, r3
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	18d3      	adds	r3, r2, r3
 8009d36:	7819      	ldrb	r1, [r3, #0]
 8009d38:	220f      	movs	r2, #15
 8009d3a:	18bb      	adds	r3, r7, r2
 8009d3c:	18ba      	adds	r2, r7, r2
 8009d3e:	7812      	ldrb	r2, [r2, #0]
 8009d40:	404a      	eors	r2, r1
 8009d42:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8009d44:	230d      	movs	r3, #13
 8009d46:	18fb      	adds	r3, r7, r3
 8009d48:	2200      	movs	r2, #0
 8009d4a:	701a      	strb	r2, [r3, #0]
 8009d4c:	e01b      	b.n	8009d86 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8009d4e:	210f      	movs	r1, #15
 8009d50:	187b      	adds	r3, r7, r1
 8009d52:	781b      	ldrb	r3, [r3, #0]
 8009d54:	b25b      	sxtb	r3, r3
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	da09      	bge.n	8009d6e <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8009d5a:	187b      	adds	r3, r7, r1
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	005b      	lsls	r3, r3, #1
 8009d60:	b25b      	sxtb	r3, r3
 8009d62:	2231      	movs	r2, #49	@ 0x31
 8009d64:	4053      	eors	r3, r2
 8009d66:	b25a      	sxtb	r2, r3
 8009d68:	187b      	adds	r3, r7, r1
 8009d6a:	701a      	strb	r2, [r3, #0]
 8009d6c:	e005      	b.n	8009d7a <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8009d6e:	230f      	movs	r3, #15
 8009d70:	18fa      	adds	r2, r7, r3
 8009d72:	18fb      	adds	r3, r7, r3
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	18db      	adds	r3, r3, r3
 8009d78:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8009d7a:	210d      	movs	r1, #13
 8009d7c:	187b      	adds	r3, r7, r1
 8009d7e:	781a      	ldrb	r2, [r3, #0]
 8009d80:	187b      	adds	r3, r7, r1
 8009d82:	3201      	adds	r2, #1
 8009d84:	701a      	strb	r2, [r3, #0]
 8009d86:	230d      	movs	r3, #13
 8009d88:	18fb      	adds	r3, r7, r3
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	2b07      	cmp	r3, #7
 8009d8e:	d9de      	bls.n	8009d4e <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8009d90:	210e      	movs	r1, #14
 8009d92:	187b      	adds	r3, r7, r1
 8009d94:	781a      	ldrb	r2, [r3, #0]
 8009d96:	187b      	adds	r3, r7, r1
 8009d98:	3201      	adds	r2, #1
 8009d9a:	701a      	strb	r2, [r3, #0]
 8009d9c:	230e      	movs	r3, #14
 8009d9e:	18fa      	adds	r2, r7, r3
 8009da0:	1cfb      	adds	r3, r7, #3
 8009da2:	7812      	ldrb	r2, [r2, #0]
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d3c0      	bcc.n	8009d2c <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8009daa:	230f      	movs	r3, #15
 8009dac:	18fb      	adds	r3, r7, r3
 8009dae:	781b      	ldrb	r3, [r3, #0]
}
 8009db0:	0018      	movs	r0, r3
 8009db2:	46bd      	mov	sp, r7
 8009db4:	b004      	add	sp, #16
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8009dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8009dec <HIDS_Init+0x34>)
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8009dc8:	4b09      	ldr	r3, [pc, #36]	@ (8009df0 <HIDS_Init+0x38>)
 8009dca:	683a      	ldr	r2, [r7, #0]
 8009dcc:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8009dce:	4b09      	ldr	r3, [pc, #36]	@ (8009df4 <HIDS_Init+0x3c>)
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	0018      	movs	r0, r3
 8009dd4:	f000 f8d0 	bl	8009f78 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8009dd8:	4b07      	ldr	r3, [pc, #28]	@ (8009df8 <HIDS_Init+0x40>)
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	0018      	movs	r0, r3
 8009dde:	f000 f82b 	bl	8009e38 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8009de2:	46c0      	nop			@ (mov r8, r8)
 8009de4:	46bd      	mov	sp, r7
 8009de6:	b002      	add	sp, #8
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	46c0      	nop			@ (mov r8, r8)
 8009dec:	20002d00 	.word	0x20002d00
 8009df0:	20002d04 	.word	0x20002d04
 8009df4:	20000062 	.word	0x20000062
 8009df8:	20000061 	.word	0x20000061

08009dfc <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 8009e00:	f7ff ff06 	bl	8009c10 <GetCurrentHalTicks>
 8009e04:	0002      	movs	r2, r0
 8009e06:	4b08      	ldr	r3, [pc, #32]	@ (8009e28 <HIDS_StartMeasurement+0x2c>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	18d2      	adds	r2, r2, r3
 8009e0c:	4b07      	ldr	r3, [pc, #28]	@ (8009e2c <HIDS_StartMeasurement+0x30>)
 8009e0e:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8009e10:	4b07      	ldr	r3, [pc, #28]	@ (8009e30 <HIDS_StartMeasurement+0x34>)
 8009e12:	2201      	movs	r2, #1
 8009e14:	0019      	movs	r1, r3
 8009e16:	2044      	movs	r0, #68	@ 0x44
 8009e18:	f7ff ff56 	bl	8009cc8 <WriteRegister>
  MeasurementDone = false;
 8009e1c:	4b05      	ldr	r3, [pc, #20]	@ (8009e34 <HIDS_StartMeasurement+0x38>)
 8009e1e:	2200      	movs	r2, #0
 8009e20:	701a      	strb	r2, [r3, #0]
}
 8009e22:	46c0      	nop			@ (mov r8, r8)
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}
 8009e28:	20000068 	.word	0x20000068
 8009e2c:	20000064 	.word	0x20000064
 8009e30:	20000062 	.word	0x20000062
 8009e34:	20002d16 	.word	0x20002d16

08009e38 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	0002      	movs	r2, r0
 8009e40:	1dfb      	adds	r3, r7, #7
 8009e42:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8009e44:	4b03      	ldr	r3, [pc, #12]	@ (8009e54 <HIDS_SetHeaterMode+0x1c>)
 8009e46:	1dfa      	adds	r2, r7, #7
 8009e48:	7812      	ldrb	r2, [r2, #0]
 8009e4a:	701a      	strb	r2, [r3, #0]
}
 8009e4c:	46c0      	nop			@ (mov r8, r8)
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	b002      	add	sp, #8
 8009e52:	bd80      	pop	{r7, pc}
 8009e54:	20000061 	.word	0x20000061

08009e58 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8009e58:	b590      	push	{r4, r7, lr}
 8009e5a:	b085      	sub	sp, #20
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	781a      	ldrb	r2, [r3, #0]
 8009e64:	210c      	movs	r1, #12
 8009e66:	187b      	adds	r3, r7, r1
 8009e68:	701a      	strb	r2, [r3, #0]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	785a      	ldrb	r2, [r3, #1]
 8009e6e:	187b      	adds	r3, r7, r1
 8009e70:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8009e72:	240f      	movs	r4, #15
 8009e74:	193b      	adds	r3, r7, r4
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	7892      	ldrb	r2, [r2, #2]
 8009e7a:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8009e7c:	187b      	adds	r3, r7, r1
 8009e7e:	2102      	movs	r1, #2
 8009e80:	0018      	movs	r0, r3
 8009e82:	f7ff ff43 	bl	8009d0c <CalculateCRC>
 8009e86:	0003      	movs	r3, r0
 8009e88:	001a      	movs	r2, r3
 8009e8a:	193b      	adds	r3, r7, r4
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d007      	beq.n	8009ea2 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8009e92:	4a17      	ldr	r2, [pc, #92]	@ (8009ef0 <CheckCRC+0x98>)
 8009e94:	4b17      	ldr	r3, [pc, #92]	@ (8009ef4 <CheckCRC+0x9c>)
 8009e96:	0019      	movs	r1, r3
 8009e98:	2001      	movs	r0, #1
 8009e9a:	f7ff fe47 	bl	8009b2c <CreateLine>
		return false;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	e021      	b.n	8009ee6 <CheckCRC+0x8e>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	78da      	ldrb	r2, [r3, #3]
 8009ea6:	2108      	movs	r1, #8
 8009ea8:	187b      	adds	r3, r7, r1
 8009eaa:	701a      	strb	r2, [r3, #0]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	791a      	ldrb	r2, [r3, #4]
 8009eb0:	187b      	adds	r3, r7, r1
 8009eb2:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8009eb4:	240e      	movs	r4, #14
 8009eb6:	193b      	adds	r3, r7, r4
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	7952      	ldrb	r2, [r2, #5]
 8009ebc:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8009ebe:	187b      	adds	r3, r7, r1
 8009ec0:	2102      	movs	r1, #2
 8009ec2:	0018      	movs	r0, r3
 8009ec4:	f7ff ff22 	bl	8009d0c <CalculateCRC>
 8009ec8:	0003      	movs	r3, r0
 8009eca:	001a      	movs	r2, r3
 8009ecc:	193b      	adds	r3, r7, r4
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d007      	beq.n	8009ee4 <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 8009ed4:	4a08      	ldr	r2, [pc, #32]	@ (8009ef8 <CheckCRC+0xa0>)
 8009ed6:	4b07      	ldr	r3, [pc, #28]	@ (8009ef4 <CheckCRC+0x9c>)
 8009ed8:	0019      	movs	r1, r3
 8009eda:	2001      	movs	r0, #1
 8009edc:	f7ff fe26 	bl	8009b2c <CreateLine>
		return false;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	e000      	b.n	8009ee6 <CheckCRC+0x8e>
	}
	return true;
 8009ee4:	2301      	movs	r3, #1
}
 8009ee6:	0018      	movs	r0, r3
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	b005      	add	sp, #20
 8009eec:	bd90      	pop	{r4, r7, pc}
 8009eee:	46c0      	nop			@ (mov r8, r8)
 8009ef0:	0801bd70 	.word	0x0801bd70
 8009ef4:	0801bd98 	.word	0x0801bd98
 8009ef8:	0801bd9c 	.word	0x0801bd9c

08009efc <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8009f02:	1dbb      	adds	r3, r7, #6
 8009f04:	2289      	movs	r2, #137	@ 0x89
 8009f06:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8009f08:	1dbb      	adds	r3, r7, #6
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	0019      	movs	r1, r3
 8009f0e:	2044      	movs	r0, #68	@ 0x44
 8009f10:	f7ff feda 	bl	8009cc8 <WriteRegister>
	HAL_Delay(30);
 8009f14:	201e      	movs	r0, #30
 8009f16:	f000 f999 	bl	800a24c <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8009f1a:	4b14      	ldr	r3, [pc, #80]	@ (8009f6c <HIDS_DeviceConnected+0x70>)
 8009f1c:	2206      	movs	r2, #6
 8009f1e:	0019      	movs	r1, r3
 8009f20:	2044      	movs	r0, #68	@ 0x44
 8009f22:	f7ff feaf 	bl	8009c84 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8009f26:	1dfb      	adds	r3, r7, #7
 8009f28:	2200      	movs	r2, #0
 8009f2a:	701a      	strb	r2, [r3, #0]
 8009f2c:	e011      	b.n	8009f52 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8009f2e:	1dfb      	adds	r3, r7, #7
 8009f30:	7818      	ldrb	r0, [r3, #0]
 8009f32:	1dfb      	adds	r3, r7, #7
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	4a0d      	ldr	r2, [pc, #52]	@ (8009f6c <HIDS_DeviceConnected+0x70>)
 8009f38:	5cd3      	ldrb	r3, [r2, r3]
 8009f3a:	4a0d      	ldr	r2, [pc, #52]	@ (8009f70 <HIDS_DeviceConnected+0x74>)
 8009f3c:	490d      	ldr	r1, [pc, #52]	@ (8009f74 <HIDS_DeviceConnected+0x78>)
 8009f3e:	9300      	str	r3, [sp, #0]
 8009f40:	0003      	movs	r3, r0
 8009f42:	2002      	movs	r0, #2
 8009f44:	f7ff fdf2 	bl	8009b2c <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8009f48:	1dfb      	adds	r3, r7, #7
 8009f4a:	781a      	ldrb	r2, [r3, #0]
 8009f4c:	1dfb      	adds	r3, r7, #7
 8009f4e:	3201      	adds	r2, #1
 8009f50:	701a      	strb	r2, [r3, #0]
 8009f52:	1dfb      	adds	r3, r7, #7
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	2b05      	cmp	r3, #5
 8009f58:	d9e9      	bls.n	8009f2e <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8009f5a:	4b04      	ldr	r3, [pc, #16]	@ (8009f6c <HIDS_DeviceConnected+0x70>)
 8009f5c:	0018      	movs	r0, r3
 8009f5e:	f7ff ff7b 	bl	8009e58 <CheckCRC>
 8009f62:	0003      	movs	r3, r0
}
 8009f64:	0018      	movs	r0, r3
 8009f66:	46bd      	mov	sp, r7
 8009f68:	b002      	add	sp, #8
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	20002d08 	.word	0x20002d08
 8009f70:	0801bdc8 	.word	0x0801bdc8
 8009f74:	0801bd6c 	.word	0x0801bd6c

08009f78 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	0002      	movs	r2, r0
 8009f80:	1dfb      	adds	r3, r7, #7
 8009f82:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 8009f84:	4b03      	ldr	r3, [pc, #12]	@ (8009f94 <HIDS_SetMeasurementMode+0x1c>)
 8009f86:	1dfa      	adds	r2, r7, #7
 8009f88:	7812      	ldrb	r2, [r2, #0]
 8009f8a:	701a      	strb	r2, [r3, #0]
}
 8009f8c:	46c0      	nop			@ (mov r8, r8)
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	b002      	add	sp, #8
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	20000062 	.word	0x20000062

08009f98 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8009f9c:	4b04      	ldr	r3, [pc, #16]	@ (8009fb0 <HIDS_MeasurementReady+0x18>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	0018      	movs	r0, r3
 8009fa2:	f7ff fd6d 	bl	8009a80 <TimestampIsReached>
 8009fa6:	0003      	movs	r3, r0
}
 8009fa8:	0018      	movs	r0, r3
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	46c0      	nop			@ (mov r8, r8)
 8009fb0:	20000064 	.word	0x20000064

08009fb4 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8009fb4:	b590      	push	{r4, r7, lr}
 8009fb6:	b089      	sub	sp, #36	@ 0x24
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 8009fbe:	4b4e      	ldr	r3, [pc, #312]	@ (800a0f8 <HIDS_GetMeasurementValues+0x144>)
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d001      	beq.n	8009fca <HIDS_GetMeasurementValues+0x16>
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e091      	b.n	800a0ee <HIDS_GetMeasurementValues+0x13a>
  if(!HIDS_MeasurementReady()) return false;
 8009fca:	f7ff ffe5 	bl	8009f98 <HIDS_MeasurementReady>
 8009fce:	0003      	movs	r3, r0
 8009fd0:	001a      	movs	r2, r3
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	4053      	eors	r3, r2
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d001      	beq.n	8009fe0 <HIDS_GetMeasurementValues+0x2c>
 8009fdc:	2300      	movs	r3, #0
 8009fde:	e086      	b.n	800a0ee <HIDS_GetMeasurementValues+0x13a>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 8009fe0:	4b46      	ldr	r3, [pc, #280]	@ (800a0fc <HIDS_GetMeasurementValues+0x148>)
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	4b46      	ldr	r3, [pc, #280]	@ (800a100 <HIDS_GetMeasurementValues+0x14c>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	0019      	movs	r1, r3
 8009fea:	0010      	movs	r0, r2
 8009fec:	f7f6 f8a8 	bl	8000140 <__udivsi3>
 8009ff0:	0003      	movs	r3, r0
 8009ff2:	61bb      	str	r3, [r7, #24]
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];

  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  bool read = ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 8009ff4:	2317      	movs	r3, #23
 8009ff6:	18fc      	adds	r4, r7, r3
 8009ff8:	4b42      	ldr	r3, [pc, #264]	@ (800a104 <HIDS_GetMeasurementValues+0x150>)
 8009ffa:	2206      	movs	r2, #6
 8009ffc:	0019      	movs	r1, r3
 8009ffe:	2044      	movs	r0, #68	@ 0x44
 800a000:	f7ff fe40 	bl	8009c84 <ReadRegister>
 800a004:	0003      	movs	r3, r0
 800a006:	7023      	strb	r3, [r4, #0]
	if(!CheckCRC(MeasureBuffer)) {
 800a008:	4b3e      	ldr	r3, [pc, #248]	@ (800a104 <HIDS_GetMeasurementValues+0x150>)
 800a00a:	0018      	movs	r0, r3
 800a00c:	f7ff ff24 	bl	8009e58 <CheckCRC>
 800a010:	0003      	movs	r3, r0
 800a012:	001a      	movs	r2, r3
 800a014:	2301      	movs	r3, #1
 800a016:	4053      	eors	r3, r2
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d011      	beq.n	800a042 <HIDS_GetMeasurementValues+0x8e>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800a01e:	231f      	movs	r3, #31
 800a020:	18fb      	adds	r3, r7, r3
 800a022:	2200      	movs	r2, #0
 800a024:	701a      	strb	r2, [r3, #0]
 800a026:	e005      	b.n	800a034 <HIDS_GetMeasurementValues+0x80>
 800a028:	211f      	movs	r1, #31
 800a02a:	187b      	adds	r3, r7, r1
 800a02c:	781a      	ldrb	r2, [r3, #0]
 800a02e:	187b      	adds	r3, r7, r1
 800a030:	3201      	adds	r2, #1
 800a032:	701a      	strb	r2, [r3, #0]
 800a034:	231f      	movs	r3, #31
 800a036:	18fb      	adds	r3, r7, r3
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	2b05      	cmp	r3, #5
 800a03c:	d9f4      	bls.n	800a028 <HIDS_GetMeasurementValues+0x74>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800a03e:	2300      	movs	r3, #0
 800a040:	e055      	b.n	800a0ee <HIDS_GetMeasurementValues+0x13a>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800a042:	4b30      	ldr	r3, [pc, #192]	@ (800a104 <HIDS_GetMeasurementValues+0x150>)
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	021b      	lsls	r3, r3, #8
 800a048:	4a2e      	ldr	r2, [pc, #184]	@ (800a104 <HIDS_GetMeasurementValues+0x150>)
 800a04a:	7852      	ldrb	r2, [r2, #1]
 800a04c:	4313      	orrs	r3, r2
 800a04e:	22af      	movs	r2, #175	@ 0xaf
 800a050:	4353      	muls	r3, r2
 800a052:	0018      	movs	r0, r3
 800a054:	f7f9 f932 	bl	80032bc <__aeabi_i2d>
 800a058:	2200      	movs	r2, #0
 800a05a:	4b2b      	ldr	r3, [pc, #172]	@ (800a108 <HIDS_GetMeasurementValues+0x154>)
 800a05c:	f7f7 fe28 	bl	8001cb0 <__aeabi_ddiv>
 800a060:	0002      	movs	r2, r0
 800a062:	000b      	movs	r3, r1
 800a064:	0010      	movs	r0, r2
 800a066:	0019      	movs	r1, r3
 800a068:	f7f9 f9c2 	bl	80033f0 <__aeabi_d2f>
 800a06c:	1c03      	adds	r3, r0, #0
 800a06e:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 800a070:	4926      	ldr	r1, [pc, #152]	@ (800a10c <HIDS_GetMeasurementValues+0x158>)
 800a072:	6938      	ldr	r0, [r7, #16]
 800a074:	f7f7 f850 	bl	8001118 <__aeabi_fsub>
 800a078:	1c03      	adds	r3, r0, #0
 800a07a:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800a07c:	4b21      	ldr	r3, [pc, #132]	@ (800a104 <HIDS_GetMeasurementValues+0x150>)
 800a07e:	78db      	ldrb	r3, [r3, #3]
 800a080:	021b      	lsls	r3, r3, #8
 800a082:	4a20      	ldr	r2, [pc, #128]	@ (800a104 <HIDS_GetMeasurementValues+0x150>)
 800a084:	7912      	ldrb	r2, [r2, #4]
 800a086:	431a      	orrs	r2, r3
 800a088:	0013      	movs	r3, r2
 800a08a:	015b      	lsls	r3, r3, #5
 800a08c:	1a9b      	subs	r3, r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	189b      	adds	r3, r3, r2
 800a092:	0018      	movs	r0, r3
 800a094:	f7f9 f912 	bl	80032bc <__aeabi_i2d>
 800a098:	2200      	movs	r2, #0
 800a09a:	4b1b      	ldr	r3, [pc, #108]	@ (800a108 <HIDS_GetMeasurementValues+0x154>)
 800a09c:	f7f7 fe08 	bl	8001cb0 <__aeabi_ddiv>
 800a0a0:	0002      	movs	r2, r0
 800a0a2:	000b      	movs	r3, r1
 800a0a4:	0010      	movs	r0, r2
 800a0a6:	0019      	movs	r1, r3
 800a0a8:	f7f9 f9a2 	bl	80033f0 <__aeabi_d2f>
 800a0ac:	1c03      	adds	r3, r0, #0
 800a0ae:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 800a0b0:	4917      	ldr	r1, [pc, #92]	@ (800a110 <HIDS_GetMeasurementValues+0x15c>)
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	f7f7 f830 	bl	8001118 <__aeabi_fsub>
 800a0b8:	1c03      	adds	r3, r0, #0
 800a0ba:	60fb      	str	r3, [r7, #12]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	693a      	ldr	r2, [r7, #16]
 800a0c0:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	0011      	movs	r1, r2
 800a0ce:	0018      	movs	r0, r3
 800a0d0:	f7fe fd1a 	bl	8008b08 <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	1c11      	adds	r1, r2, #0
 800a0da:	1c18      	adds	r0, r3, #0
 800a0dc:	f7f9 faf0 	bl	80036c0 <ESP_GetHT>

   measurements = 0;
 800a0e0:	4b0c      	ldr	r3, [pc, #48]	@ (800a114 <HIDS_GetMeasurementValues+0x160>)
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	601a      	str	r2, [r3, #0]
   MeasurementDone = true;
 800a0e6:	4b04      	ldr	r3, [pc, #16]	@ (800a0f8 <HIDS_GetMeasurementValues+0x144>)
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800a0ec:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800a0ee:	0018      	movs	r0, r3
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	b009      	add	sp, #36	@ 0x24
 800a0f4:	bd90      	pop	{r4, r7, pc}
 800a0f6:	46c0      	nop			@ (mov r8, r8)
 800a0f8:	20002d16 	.word	0x20002d16
 800a0fc:	2000006c 	.word	0x2000006c
 800a100:	20000068 	.word	0x20000068
 800a104:	20002d10 	.word	0x20002d10
 800a108:	40efffe0 	.word	0x40efffe0
 800a10c:	42340000 	.word	0x42340000
 800a110:	40c00000 	.word	0x40c00000
 800a114:	20002d18 	.word	0x20002d18

0800a118 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800a118:	480d      	ldr	r0, [pc, #52]	@ (800a150 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800a11a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800a11c:	f7ff f962 	bl	80093e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a120:	480c      	ldr	r0, [pc, #48]	@ (800a154 <LoopForever+0x6>)
  ldr r1, =_edata
 800a122:	490d      	ldr	r1, [pc, #52]	@ (800a158 <LoopForever+0xa>)
  ldr r2, =_sidata
 800a124:	4a0d      	ldr	r2, [pc, #52]	@ (800a15c <LoopForever+0xe>)
  movs r3, #0
 800a126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a128:	e002      	b.n	800a130 <LoopCopyDataInit>

0800a12a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a12a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a12c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a12e:	3304      	adds	r3, #4

0800a130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a134:	d3f9      	bcc.n	800a12a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a136:	4a0a      	ldr	r2, [pc, #40]	@ (800a160 <LoopForever+0x12>)
  ldr r4, =_ebss
 800a138:	4c0a      	ldr	r4, [pc, #40]	@ (800a164 <LoopForever+0x16>)
  movs r3, #0
 800a13a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a13c:	e001      	b.n	800a142 <LoopFillZerobss>

0800a13e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a13e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a140:	3204      	adds	r2, #4

0800a142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a144:	d3fb      	bcc.n	800a13e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a146:	f00e fa49 	bl	80185dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a14a:	f7fc f90b 	bl	8006364 <main>

0800a14e <LoopForever>:

LoopForever:
    b LoopForever
 800a14e:	e7fe      	b.n	800a14e <LoopForever>
   ldr   r0, =_estack
 800a150:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800a154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a158:	200003c8 	.word	0x200003c8
  ldr r2, =_sidata
 800a15c:	0801c550 	.word	0x0801c550
  ldr r2, =_sbss
 800a160:	200003c8 	.word	0x200003c8
  ldr r4, =_ebss
 800a164:	20004120 	.word	0x20004120

0800a168 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a168:	e7fe      	b.n	800a168 <ADC1_COMP_IRQHandler>
	...

0800a16c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b082      	sub	sp, #8
 800a170:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a172:	1dfb      	adds	r3, r7, #7
 800a174:	2200      	movs	r2, #0
 800a176:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800a178:	4b0b      	ldr	r3, [pc, #44]	@ (800a1a8 <HAL_Init+0x3c>)
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	4b0a      	ldr	r3, [pc, #40]	@ (800a1a8 <HAL_Init+0x3c>)
 800a17e:	2140      	movs	r1, #64	@ 0x40
 800a180:	430a      	orrs	r2, r1
 800a182:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a184:	2003      	movs	r0, #3
 800a186:	f000 f811 	bl	800a1ac <HAL_InitTick>
 800a18a:	1e03      	subs	r3, r0, #0
 800a18c:	d003      	beq.n	800a196 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800a18e:	1dfb      	adds	r3, r7, #7
 800a190:	2201      	movs	r2, #1
 800a192:	701a      	strb	r2, [r3, #0]
 800a194:	e001      	b.n	800a19a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a196:	f7fe fffb 	bl	8009190 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a19a:	1dfb      	adds	r3, r7, #7
 800a19c:	781b      	ldrb	r3, [r3, #0]
}
 800a19e:	0018      	movs	r0, r3
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	b002      	add	sp, #8
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	46c0      	nop			@ (mov r8, r8)
 800a1a8:	40022000 	.word	0x40022000

0800a1ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a1ac:	b590      	push	{r4, r7, lr}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a1b4:	4b14      	ldr	r3, [pc, #80]	@ (800a208 <HAL_InitTick+0x5c>)
 800a1b6:	681c      	ldr	r4, [r3, #0]
 800a1b8:	4b14      	ldr	r3, [pc, #80]	@ (800a20c <HAL_InitTick+0x60>)
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	0019      	movs	r1, r3
 800a1be:	23fa      	movs	r3, #250	@ 0xfa
 800a1c0:	0098      	lsls	r0, r3, #2
 800a1c2:	f7f5 ffbd 	bl	8000140 <__udivsi3>
 800a1c6:	0003      	movs	r3, r0
 800a1c8:	0019      	movs	r1, r3
 800a1ca:	0020      	movs	r0, r4
 800a1cc:	f7f5 ffb8 	bl	8000140 <__udivsi3>
 800a1d0:	0003      	movs	r3, r0
 800a1d2:	0018      	movs	r0, r3
 800a1d4:	f000 fccb 	bl	800ab6e <HAL_SYSTICK_Config>
 800a1d8:	1e03      	subs	r3, r0, #0
 800a1da:	d001      	beq.n	800a1e0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e00f      	b.n	800a200 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b03      	cmp	r3, #3
 800a1e4:	d80b      	bhi.n	800a1fe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a1e6:	6879      	ldr	r1, [r7, #4]
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	425b      	negs	r3, r3
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	0018      	movs	r0, r3
 800a1f0:	f000 fc98 	bl	800ab24 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a1f4:	4b06      	ldr	r3, [pc, #24]	@ (800a210 <HAL_InitTick+0x64>)
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	e000      	b.n	800a200 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800a1fe:	2301      	movs	r3, #1
}
 800a200:	0018      	movs	r0, r3
 800a202:	46bd      	mov	sp, r7
 800a204:	b003      	add	sp, #12
 800a206:	bd90      	pop	{r4, r7, pc}
 800a208:	2000005c 	.word	0x2000005c
 800a20c:	20000074 	.word	0x20000074
 800a210:	20000070 	.word	0x20000070

0800a214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a218:	4b05      	ldr	r3, [pc, #20]	@ (800a230 <HAL_IncTick+0x1c>)
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	001a      	movs	r2, r3
 800a21e:	4b05      	ldr	r3, [pc, #20]	@ (800a234 <HAL_IncTick+0x20>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	18d2      	adds	r2, r2, r3
 800a224:	4b03      	ldr	r3, [pc, #12]	@ (800a234 <HAL_IncTick+0x20>)
 800a226:	601a      	str	r2, [r3, #0]
}
 800a228:	46c0      	nop			@ (mov r8, r8)
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	46c0      	nop			@ (mov r8, r8)
 800a230:	20000074 	.word	0x20000074
 800a234:	20002d1c 	.word	0x20002d1c

0800a238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	af00      	add	r7, sp, #0
  return uwTick;
 800a23c:	4b02      	ldr	r3, [pc, #8]	@ (800a248 <HAL_GetTick+0x10>)
 800a23e:	681b      	ldr	r3, [r3, #0]
}
 800a240:	0018      	movs	r0, r3
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	46c0      	nop			@ (mov r8, r8)
 800a248:	20002d1c 	.word	0x20002d1c

0800a24c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a254:	f7ff fff0 	bl	800a238 <HAL_GetTick>
 800a258:	0003      	movs	r3, r0
 800a25a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	3301      	adds	r3, #1
 800a264:	d005      	beq.n	800a272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a266:	4b0a      	ldr	r3, [pc, #40]	@ (800a290 <HAL_Delay+0x44>)
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	001a      	movs	r2, r3
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	189b      	adds	r3, r3, r2
 800a270:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a272:	46c0      	nop			@ (mov r8, r8)
 800a274:	f7ff ffe0 	bl	800a238 <HAL_GetTick>
 800a278:	0002      	movs	r2, r0
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	1ad3      	subs	r3, r2, r3
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	429a      	cmp	r2, r3
 800a282:	d8f7      	bhi.n	800a274 <HAL_Delay+0x28>
  {
  }
}
 800a284:	46c0      	nop			@ (mov r8, r8)
 800a286:	46c0      	nop			@ (mov r8, r8)
 800a288:	46bd      	mov	sp, r7
 800a28a:	b004      	add	sp, #16
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	46c0      	nop			@ (mov r8, r8)
 800a290:	20000074 	.word	0x20000074

0800a294 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800a298:	4b02      	ldr	r3, [pc, #8]	@ (800a2a4 <HAL_GetUIDw0+0x10>)
 800a29a:	681b      	ldr	r3, [r3, #0]
}
 800a29c:	0018      	movs	r0, r3
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	46c0      	nop			@ (mov r8, r8)
 800a2a4:	1ff80050 	.word	0x1ff80050

0800a2a8 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800a2ac:	4b02      	ldr	r3, [pc, #8]	@ (800a2b8 <HAL_GetUIDw1+0x10>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
}
 800a2b0:	0018      	movs	r0, r3
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	46c0      	nop			@ (mov r8, r8)
 800a2b8:	1ff80054 	.word	0x1ff80054

0800a2bc <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800a2c0:	4b02      	ldr	r3, [pc, #8]	@ (800a2cc <HAL_GetUIDw2+0x10>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
}
 800a2c4:	0018      	movs	r0, r3
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	46c0      	nop			@ (mov r8, r8)
 800a2cc:	1ff80064 	.word	0x1ff80064

0800a2d0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d101      	bne.n	800a2e2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e159      	b.n	800a596 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d10a      	bne.n	800a300 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2250      	movs	r2, #80	@ 0x50
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	0018      	movs	r0, r3
 800a2fc:	f7fb fb56 	bl	80059ac <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a304:	2210      	movs	r2, #16
 800a306:	4013      	ands	r3, r2
 800a308:	2b10      	cmp	r3, #16
 800a30a:	d005      	beq.n	800a318 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	2204      	movs	r2, #4
 800a314:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800a316:	d00b      	beq.n	800a330 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a31c:	2210      	movs	r2, #16
 800a31e:	431a      	orrs	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2250      	movs	r2, #80	@ 0x50
 800a328:	2100      	movs	r1, #0
 800a32a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800a32c:	2301      	movs	r3, #1
 800a32e:	e132      	b.n	800a596 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a334:	4a9a      	ldr	r2, [pc, #616]	@ (800a5a0 <HAL_ADC_Init+0x2d0>)
 800a336:	4013      	ands	r3, r2
 800a338:	2202      	movs	r2, #2
 800a33a:	431a      	orrs	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	2203      	movs	r2, #3
 800a348:	4013      	ands	r3, r2
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d108      	bne.n	800a360 <HAL_ADC_Init+0x90>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2201      	movs	r2, #1
 800a356:	4013      	ands	r3, r2
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d101      	bne.n	800a360 <HAL_ADC_Init+0x90>
 800a35c:	2301      	movs	r3, #1
 800a35e:	e000      	b.n	800a362 <HAL_ADC_Init+0x92>
 800a360:	2300      	movs	r3, #0
 800a362:	2b00      	cmp	r3, #0
 800a364:	d149      	bne.n	800a3fa <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	685a      	ldr	r2, [r3, #4]
 800a36a:	23c0      	movs	r3, #192	@ 0xc0
 800a36c:	061b      	lsls	r3, r3, #24
 800a36e:	429a      	cmp	r2, r3
 800a370:	d00b      	beq.n	800a38a <HAL_ADC_Init+0xba>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	685a      	ldr	r2, [r3, #4]
 800a376:	2380      	movs	r3, #128	@ 0x80
 800a378:	05db      	lsls	r3, r3, #23
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d005      	beq.n	800a38a <HAL_ADC_Init+0xba>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	685a      	ldr	r2, [r3, #4]
 800a382:	2380      	movs	r3, #128	@ 0x80
 800a384:	061b      	lsls	r3, r3, #24
 800a386:	429a      	cmp	r2, r3
 800a388:	d111      	bne.n	800a3ae <HAL_ADC_Init+0xde>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	691a      	ldr	r2, [r3, #16]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	0092      	lsls	r2, r2, #2
 800a396:	0892      	lsrs	r2, r2, #2
 800a398:	611a      	str	r2, [r3, #16]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	6919      	ldr	r1, [r3, #16]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	685a      	ldr	r2, [r3, #4]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	430a      	orrs	r2, r1
 800a3aa:	611a      	str	r2, [r3, #16]
 800a3ac:	e014      	b.n	800a3d8 <HAL_ADC_Init+0x108>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	691a      	ldr	r2, [r3, #16]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	0092      	lsls	r2, r2, #2
 800a3ba:	0892      	lsrs	r2, r2, #2
 800a3bc:	611a      	str	r2, [r3, #16]
 800a3be:	4b79      	ldr	r3, [pc, #484]	@ (800a5a4 <HAL_ADC_Init+0x2d4>)
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	4b78      	ldr	r3, [pc, #480]	@ (800a5a4 <HAL_ADC_Init+0x2d4>)
 800a3c4:	4978      	ldr	r1, [pc, #480]	@ (800a5a8 <HAL_ADC_Init+0x2d8>)
 800a3c6:	400a      	ands	r2, r1
 800a3c8:	601a      	str	r2, [r3, #0]
 800a3ca:	4b76      	ldr	r3, [pc, #472]	@ (800a5a4 <HAL_ADC_Init+0x2d4>)
 800a3cc:	6819      	ldr	r1, [r3, #0]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	685a      	ldr	r2, [r3, #4]
 800a3d2:	4b74      	ldr	r3, [pc, #464]	@ (800a5a4 <HAL_ADC_Init+0x2d4>)
 800a3d4:	430a      	orrs	r2, r1
 800a3d6:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	68da      	ldr	r2, [r3, #12]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2118      	movs	r1, #24
 800a3e4:	438a      	bics	r2, r1
 800a3e6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	68d9      	ldr	r1, [r3, #12]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	689a      	ldr	r2, [r3, #8]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	430a      	orrs	r2, r1
 800a3f8:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800a3fa:	4b6a      	ldr	r3, [pc, #424]	@ (800a5a4 <HAL_ADC_Init+0x2d4>)
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	4b69      	ldr	r3, [pc, #420]	@ (800a5a4 <HAL_ADC_Init+0x2d4>)
 800a400:	496a      	ldr	r1, [pc, #424]	@ (800a5ac <HAL_ADC_Init+0x2dc>)
 800a402:	400a      	ands	r2, r1
 800a404:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800a406:	4b67      	ldr	r3, [pc, #412]	@ (800a5a4 <HAL_ADC_Init+0x2d4>)
 800a408:	6819      	ldr	r1, [r3, #0]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a40e:	065a      	lsls	r2, r3, #25
 800a410:	4b64      	ldr	r3, [pc, #400]	@ (800a5a4 <HAL_ADC_Init+0x2d4>)
 800a412:	430a      	orrs	r2, r1
 800a414:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	689a      	ldr	r2, [r3, #8]
 800a41c:	2380      	movs	r3, #128	@ 0x80
 800a41e:	055b      	lsls	r3, r3, #21
 800a420:	4013      	ands	r3, r2
 800a422:	d108      	bne.n	800a436 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	689a      	ldr	r2, [r3, #8]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	2180      	movs	r1, #128	@ 0x80
 800a430:	0549      	lsls	r1, r1, #21
 800a432:	430a      	orrs	r2, r1
 800a434:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	68da      	ldr	r2, [r3, #12]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	495b      	ldr	r1, [pc, #364]	@ (800a5b0 <HAL_ADC_Init+0x2e0>)
 800a442:	400a      	ands	r2, r1
 800a444:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	68d9      	ldr	r1, [r3, #12]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	691b      	ldr	r3, [r3, #16]
 800a454:	2b02      	cmp	r3, #2
 800a456:	d101      	bne.n	800a45c <HAL_ADC_Init+0x18c>
 800a458:	2304      	movs	r3, #4
 800a45a:	e000      	b.n	800a45e <HAL_ADC_Init+0x18e>
 800a45c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800a45e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2020      	movs	r0, #32
 800a464:	5c1b      	ldrb	r3, [r3, r0]
 800a466:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800a468:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	202c      	movs	r0, #44	@ 0x2c
 800a46e:	5c1b      	ldrb	r3, [r3, r0]
 800a470:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800a472:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800a478:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	699b      	ldr	r3, [r3, #24]
 800a47e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800a480:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	69db      	ldr	r3, [r3, #28]
 800a486:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800a488:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	430a      	orrs	r2, r1
 800a490:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a496:	23c2      	movs	r3, #194	@ 0xc2
 800a498:	33ff      	adds	r3, #255	@ 0xff
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d00b      	beq.n	800a4b6 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	68d9      	ldr	r1, [r3, #12]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800a4ac:	431a      	orrs	r2, r3
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	430a      	orrs	r2, r1
 800a4b4:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2221      	movs	r2, #33	@ 0x21
 800a4ba:	5c9b      	ldrb	r3, [r3, r2]
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d11a      	bne.n	800a4f6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2220      	movs	r2, #32
 800a4c4:	5c9b      	ldrb	r3, [r3, r2]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d109      	bne.n	800a4de <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	68da      	ldr	r2, [r3, #12]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2180      	movs	r1, #128	@ 0x80
 800a4d6:	0249      	lsls	r1, r1, #9
 800a4d8:	430a      	orrs	r2, r1
 800a4da:	60da      	str	r2, [r3, #12]
 800a4dc:	e00b      	b.n	800a4f6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4e2:	2220      	movs	r2, #32
 800a4e4:	431a      	orrs	r2, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	431a      	orrs	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d11f      	bne.n	800a53e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	691a      	ldr	r2, [r3, #16]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	492a      	ldr	r1, [pc, #168]	@ (800a5b4 <HAL_ADC_Init+0x2e4>)
 800a50a:	400a      	ands	r2, r1
 800a50c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	6919      	ldr	r1, [r3, #16]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800a51c:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800a522:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	430a      	orrs	r2, r1
 800a52a:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	691a      	ldr	r2, [r3, #16]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2101      	movs	r1, #1
 800a538:	430a      	orrs	r2, r1
 800a53a:	611a      	str	r2, [r3, #16]
 800a53c:	e00e      	b.n	800a55c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	691b      	ldr	r3, [r3, #16]
 800a544:	2201      	movs	r2, #1
 800a546:	4013      	ands	r3, r2
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d107      	bne.n	800a55c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	691a      	ldr	r2, [r3, #16]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	2101      	movs	r1, #1
 800a558:	438a      	bics	r2, r1
 800a55a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	695a      	ldr	r2, [r3, #20]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	2107      	movs	r1, #7
 800a568:	438a      	bics	r2, r1
 800a56a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	6959      	ldr	r1, [r3, #20]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	430a      	orrs	r2, r1
 800a57c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a588:	2203      	movs	r2, #3
 800a58a:	4393      	bics	r3, r2
 800a58c:	2201      	movs	r2, #1
 800a58e:	431a      	orrs	r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800a594:	2300      	movs	r3, #0
}
 800a596:	0018      	movs	r0, r3
 800a598:	46bd      	mov	sp, r7
 800a59a:	b002      	add	sp, #8
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	46c0      	nop			@ (mov r8, r8)
 800a5a0:	fffffefd 	.word	0xfffffefd
 800a5a4:	40012708 	.word	0x40012708
 800a5a8:	ffc3ffff 	.word	0xffc3ffff
 800a5ac:	fdffffff 	.word	0xfdffffff
 800a5b0:	fffe0219 	.word	0xfffe0219
 800a5b4:	fffffc03 	.word	0xfffffc03

0800a5b8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800a5b8:	b590      	push	{r4, r7, lr}
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a5c0:	230f      	movs	r3, #15
 800a5c2:	18fb      	adds	r3, r7, r3
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	2204      	movs	r2, #4
 800a5d0:	4013      	ands	r3, r2
 800a5d2:	d138      	bne.n	800a646 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2250      	movs	r2, #80	@ 0x50
 800a5d8:	5c9b      	ldrb	r3, [r3, r2]
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d101      	bne.n	800a5e2 <HAL_ADC_Start+0x2a>
 800a5de:	2302      	movs	r3, #2
 800a5e0:	e038      	b.n	800a654 <HAL_ADC_Start+0x9c>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2250      	movs	r2, #80	@ 0x50
 800a5e6:	2101      	movs	r1, #1
 800a5e8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	69db      	ldr	r3, [r3, #28]
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d007      	beq.n	800a602 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800a5f2:	230f      	movs	r3, #15
 800a5f4:	18fc      	adds	r4, r7, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	0018      	movs	r0, r3
 800a5fa:	f000 f95f 	bl	800a8bc <ADC_Enable>
 800a5fe:	0003      	movs	r3, r0
 800a600:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800a602:	230f      	movs	r3, #15
 800a604:	18fb      	adds	r3, r7, r3
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d120      	bne.n	800a64e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a610:	4a12      	ldr	r2, [pc, #72]	@ (800a65c <HAL_ADC_Start+0xa4>)
 800a612:	4013      	ands	r3, r2
 800a614:	2280      	movs	r2, #128	@ 0x80
 800a616:	0052      	lsls	r2, r2, #1
 800a618:	431a      	orrs	r2, r3
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2250      	movs	r2, #80	@ 0x50
 800a628:	2100      	movs	r1, #0
 800a62a:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	221c      	movs	r2, #28
 800a632:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	689a      	ldr	r2, [r3, #8]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2104      	movs	r1, #4
 800a640:	430a      	orrs	r2, r1
 800a642:	609a      	str	r2, [r3, #8]
 800a644:	e003      	b.n	800a64e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a646:	230f      	movs	r3, #15
 800a648:	18fb      	adds	r3, r7, r3
 800a64a:	2202      	movs	r2, #2
 800a64c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800a64e:	230f      	movs	r3, #15
 800a650:	18fb      	adds	r3, r7, r3
 800a652:	781b      	ldrb	r3, [r3, #0]
}
 800a654:	0018      	movs	r0, r3
 800a656:	46bd      	mov	sp, r7
 800a658:	b005      	add	sp, #20
 800a65a:	bd90      	pop	{r4, r7, pc}
 800a65c:	fffff0fe 	.word	0xfffff0fe

0800a660 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a66a:	2300      	movs	r3, #0
 800a66c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800a66e:	2300      	movs	r3, #0
 800a670:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	695b      	ldr	r3, [r3, #20]
 800a676:	2b08      	cmp	r3, #8
 800a678:	d102      	bne.n	800a680 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800a67a:	2308      	movs	r3, #8
 800a67c:	60fb      	str	r3, [r7, #12]
 800a67e:	e014      	b.n	800a6aa <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	2201      	movs	r2, #1
 800a688:	4013      	ands	r3, r2
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d10b      	bne.n	800a6a6 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a692:	2220      	movs	r2, #32
 800a694:	431a      	orrs	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2250      	movs	r2, #80	@ 0x50
 800a69e:	2100      	movs	r1, #0
 800a6a0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	e072      	b.n	800a78c <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800a6a6:	230c      	movs	r3, #12
 800a6a8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800a6aa:	f7ff fdc5 	bl	800a238 <HAL_GetTick>
 800a6ae:	0003      	movs	r3, r0
 800a6b0:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800a6b2:	e01f      	b.n	800a6f4 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	d01c      	beq.n	800a6f4 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d007      	beq.n	800a6d0 <HAL_ADC_PollForConversion+0x70>
 800a6c0:	f7ff fdba 	bl	800a238 <HAL_GetTick>
 800a6c4:	0002      	movs	r2, r0
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	1ad3      	subs	r3, r2, r3
 800a6ca:	683a      	ldr	r2, [r7, #0]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d211      	bcs.n	800a6f4 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	68fa      	ldr	r2, [r7, #12]
 800a6d8:	4013      	ands	r3, r2
 800a6da:	d10b      	bne.n	800a6f4 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6e0:	2204      	movs	r2, #4
 800a6e2:	431a      	orrs	r2, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2250      	movs	r2, #80	@ 0x50
 800a6ec:	2100      	movs	r1, #0
 800a6ee:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800a6f0:	2303      	movs	r3, #3
 800a6f2:	e04b      	b.n	800a78c <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	68fa      	ldr	r2, [r7, #12]
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	d0d9      	beq.n	800a6b4 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a704:	2280      	movs	r2, #128	@ 0x80
 800a706:	0092      	lsls	r2, r2, #2
 800a708:	431a      	orrs	r2, r3
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	68da      	ldr	r2, [r3, #12]
 800a714:	23c0      	movs	r3, #192	@ 0xc0
 800a716:	011b      	lsls	r3, r3, #4
 800a718:	4013      	ands	r3, r2
 800a71a:	d12e      	bne.n	800a77a <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2220      	movs	r2, #32
 800a720:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800a722:	2b00      	cmp	r3, #0
 800a724:	d129      	bne.n	800a77a <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2208      	movs	r2, #8
 800a72e:	4013      	ands	r3, r2
 800a730:	2b08      	cmp	r3, #8
 800a732:	d122      	bne.n	800a77a <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	2204      	movs	r2, #4
 800a73c:	4013      	ands	r3, r2
 800a73e:	d110      	bne.n	800a762 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	685a      	ldr	r2, [r3, #4]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	210c      	movs	r1, #12
 800a74c:	438a      	bics	r2, r1
 800a74e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a754:	4a0f      	ldr	r2, [pc, #60]	@ (800a794 <HAL_ADC_PollForConversion+0x134>)
 800a756:	4013      	ands	r3, r2
 800a758:	2201      	movs	r2, #1
 800a75a:	431a      	orrs	r2, r3
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	655a      	str	r2, [r3, #84]	@ 0x54
 800a760:	e00b      	b.n	800a77a <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a766:	2220      	movs	r2, #32
 800a768:	431a      	orrs	r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a772:	2201      	movs	r2, #1
 800a774:	431a      	orrs	r2, r3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	699b      	ldr	r3, [r3, #24]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d103      	bne.n	800a78a <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	220c      	movs	r2, #12
 800a788:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	0018      	movs	r0, r3
 800a78e:	46bd      	mov	sp, r7
 800a790:	b004      	add	sp, #16
 800a792:	bd80      	pop	{r7, pc}
 800a794:	fffffefe 	.word	0xfffffefe

0800a798 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800a7a6:	0018      	movs	r0, r3
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	b002      	add	sp, #8
 800a7ac:	bd80      	pop	{r7, pc}
	...

0800a7b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2250      	movs	r2, #80	@ 0x50
 800a7be:	5c9b      	ldrb	r3, [r3, r2]
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d101      	bne.n	800a7c8 <HAL_ADC_ConfigChannel+0x18>
 800a7c4:	2302      	movs	r3, #2
 800a7c6:	e06c      	b.n	800a8a2 <HAL_ADC_ConfigChannel+0xf2>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2250      	movs	r2, #80	@ 0x50
 800a7cc:	2101      	movs	r1, #1
 800a7ce:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	2204      	movs	r2, #4
 800a7d8:	4013      	ands	r3, r2
 800a7da:	d00b      	beq.n	800a7f4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7e0:	2220      	movs	r2, #32
 800a7e2:	431a      	orrs	r2, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2250      	movs	r2, #80	@ 0x50
 800a7ec:	2100      	movs	r1, #0
 800a7ee:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e056      	b.n	800a8a2 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	4a2c      	ldr	r2, [pc, #176]	@ (800a8ac <HAL_ADC_ConfigChannel+0xfc>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d028      	beq.n	800a850 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	035b      	lsls	r3, r3, #13
 800a80a:	0b5a      	lsrs	r2, r3, #13
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	430a      	orrs	r2, r1
 800a812:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	2380      	movs	r3, #128	@ 0x80
 800a81a:	02db      	lsls	r3, r3, #11
 800a81c:	4013      	ands	r3, r2
 800a81e:	d009      	beq.n	800a834 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800a820:	4b23      	ldr	r3, [pc, #140]	@ (800a8b0 <HAL_ADC_ConfigChannel+0x100>)
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	4b22      	ldr	r3, [pc, #136]	@ (800a8b0 <HAL_ADC_ConfigChannel+0x100>)
 800a826:	2180      	movs	r1, #128	@ 0x80
 800a828:	0409      	lsls	r1, r1, #16
 800a82a:	430a      	orrs	r2, r1
 800a82c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800a82e:	200a      	movs	r0, #10
 800a830:	f000 f8ac 	bl	800a98c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	2380      	movs	r3, #128	@ 0x80
 800a83a:	029b      	lsls	r3, r3, #10
 800a83c:	4013      	ands	r3, r2
 800a83e:	d02b      	beq.n	800a898 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800a840:	4b1b      	ldr	r3, [pc, #108]	@ (800a8b0 <HAL_ADC_ConfigChannel+0x100>)
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	4b1a      	ldr	r3, [pc, #104]	@ (800a8b0 <HAL_ADC_ConfigChannel+0x100>)
 800a846:	2180      	movs	r1, #128	@ 0x80
 800a848:	03c9      	lsls	r1, r1, #15
 800a84a:	430a      	orrs	r2, r1
 800a84c:	601a      	str	r2, [r3, #0]
 800a84e:	e023      	b.n	800a898 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	035b      	lsls	r3, r3, #13
 800a85c:	0b5b      	lsrs	r3, r3, #13
 800a85e:	43d9      	mvns	r1, r3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	400a      	ands	r2, r1
 800a866:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	2380      	movs	r3, #128	@ 0x80
 800a86e:	02db      	lsls	r3, r3, #11
 800a870:	4013      	ands	r3, r2
 800a872:	d005      	beq.n	800a880 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800a874:	4b0e      	ldr	r3, [pc, #56]	@ (800a8b0 <HAL_ADC_ConfigChannel+0x100>)
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	4b0d      	ldr	r3, [pc, #52]	@ (800a8b0 <HAL_ADC_ConfigChannel+0x100>)
 800a87a:	490e      	ldr	r1, [pc, #56]	@ (800a8b4 <HAL_ADC_ConfigChannel+0x104>)
 800a87c:	400a      	ands	r2, r1
 800a87e:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	2380      	movs	r3, #128	@ 0x80
 800a886:	029b      	lsls	r3, r3, #10
 800a888:	4013      	ands	r3, r2
 800a88a:	d005      	beq.n	800a898 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800a88c:	4b08      	ldr	r3, [pc, #32]	@ (800a8b0 <HAL_ADC_ConfigChannel+0x100>)
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	4b07      	ldr	r3, [pc, #28]	@ (800a8b0 <HAL_ADC_ConfigChannel+0x100>)
 800a892:	4909      	ldr	r1, [pc, #36]	@ (800a8b8 <HAL_ADC_ConfigChannel+0x108>)
 800a894:	400a      	ands	r2, r1
 800a896:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2250      	movs	r2, #80	@ 0x50
 800a89c:	2100      	movs	r1, #0
 800a89e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800a8a0:	2300      	movs	r3, #0
}
 800a8a2:	0018      	movs	r0, r3
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	b002      	add	sp, #8
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	46c0      	nop			@ (mov r8, r8)
 800a8ac:	00001001 	.word	0x00001001
 800a8b0:	40012708 	.word	0x40012708
 800a8b4:	ff7fffff 	.word	0xff7fffff
 800a8b8:	ffbfffff 	.word	0xffbfffff

0800a8bc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	2203      	movs	r2, #3
 800a8d0:	4013      	ands	r3, r2
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d108      	bne.n	800a8e8 <ADC_Enable+0x2c>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2201      	movs	r2, #1
 800a8de:	4013      	ands	r3, r2
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d101      	bne.n	800a8e8 <ADC_Enable+0x2c>
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	e000      	b.n	800a8ea <ADC_Enable+0x2e>
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d146      	bne.n	800a97c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	4a24      	ldr	r2, [pc, #144]	@ (800a988 <ADC_Enable+0xcc>)
 800a8f6:	4013      	ands	r3, r2
 800a8f8:	d00d      	beq.n	800a916 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8fe:	2210      	movs	r2, #16
 800a900:	431a      	orrs	r2, r3
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a90a:	2201      	movs	r2, #1
 800a90c:	431a      	orrs	r2, r3
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800a912:	2301      	movs	r3, #1
 800a914:	e033      	b.n	800a97e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	689a      	ldr	r2, [r3, #8]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2101      	movs	r1, #1
 800a922:	430a      	orrs	r2, r1
 800a924:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800a926:	2001      	movs	r0, #1
 800a928:	f000 f830 	bl	800a98c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800a92c:	f7ff fc84 	bl	800a238 <HAL_GetTick>
 800a930:	0003      	movs	r3, r0
 800a932:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800a934:	e01b      	b.n	800a96e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a936:	f7ff fc7f 	bl	800a238 <HAL_GetTick>
 800a93a:	0002      	movs	r2, r0
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	1ad3      	subs	r3, r2, r3
 800a940:	2b0a      	cmp	r3, #10
 800a942:	d914      	bls.n	800a96e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	2201      	movs	r2, #1
 800a94c:	4013      	ands	r3, r2
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d00d      	beq.n	800a96e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a956:	2210      	movs	r2, #16
 800a958:	431a      	orrs	r2, r3
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a962:	2201      	movs	r2, #1
 800a964:	431a      	orrs	r2, r3
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
 800a96c:	e007      	b.n	800a97e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2201      	movs	r2, #1
 800a976:	4013      	ands	r3, r2
 800a978:	2b01      	cmp	r3, #1
 800a97a:	d1dc      	bne.n	800a936 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a97c:	2300      	movs	r3, #0
}
 800a97e:	0018      	movs	r0, r3
 800a980:	46bd      	mov	sp, r7
 800a982:	b004      	add	sp, #16
 800a984:	bd80      	pop	{r7, pc}
 800a986:	46c0      	nop			@ (mov r8, r8)
 800a988:	80000017 	.word	0x80000017

0800a98c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800a994:	4b0b      	ldr	r3, [pc, #44]	@ (800a9c4 <ADC_DelayMicroSecond+0x38>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	490b      	ldr	r1, [pc, #44]	@ (800a9c8 <ADC_DelayMicroSecond+0x3c>)
 800a99a:	0018      	movs	r0, r3
 800a99c:	f7f5 fbd0 	bl	8000140 <__udivsi3>
 800a9a0:	0003      	movs	r3, r0
 800a9a2:	001a      	movs	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4353      	muls	r3, r2
 800a9a8:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800a9aa:	e002      	b.n	800a9b2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	3b01      	subs	r3, #1
 800a9b0:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d1f9      	bne.n	800a9ac <ADC_DelayMicroSecond+0x20>
  }
}
 800a9b8:	46c0      	nop			@ (mov r8, r8)
 800a9ba:	46c0      	nop			@ (mov r8, r8)
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	b004      	add	sp, #16
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	46c0      	nop			@ (mov r8, r8)
 800a9c4:	2000005c 	.word	0x2000005c
 800a9c8:	000f4240 	.word	0x000f4240

0800a9cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	0002      	movs	r2, r0
 800a9d4:	1dfb      	adds	r3, r7, #7
 800a9d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800a9d8:	1dfb      	adds	r3, r7, #7
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	2b7f      	cmp	r3, #127	@ 0x7f
 800a9de:	d809      	bhi.n	800a9f4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a9e0:	1dfb      	adds	r3, r7, #7
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	001a      	movs	r2, r3
 800a9e6:	231f      	movs	r3, #31
 800a9e8:	401a      	ands	r2, r3
 800a9ea:	4b04      	ldr	r3, [pc, #16]	@ (800a9fc <__NVIC_EnableIRQ+0x30>)
 800a9ec:	2101      	movs	r1, #1
 800a9ee:	4091      	lsls	r1, r2
 800a9f0:	000a      	movs	r2, r1
 800a9f2:	601a      	str	r2, [r3, #0]
  }
}
 800a9f4:	46c0      	nop			@ (mov r8, r8)
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	b002      	add	sp, #8
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	e000e100 	.word	0xe000e100

0800aa00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800aa00:	b590      	push	{r4, r7, lr}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	0002      	movs	r2, r0
 800aa08:	6039      	str	r1, [r7, #0]
 800aa0a:	1dfb      	adds	r3, r7, #7
 800aa0c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800aa0e:	1dfb      	adds	r3, r7, #7
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	2b7f      	cmp	r3, #127	@ 0x7f
 800aa14:	d828      	bhi.n	800aa68 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800aa16:	4a2f      	ldr	r2, [pc, #188]	@ (800aad4 <__NVIC_SetPriority+0xd4>)
 800aa18:	1dfb      	adds	r3, r7, #7
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	b25b      	sxtb	r3, r3
 800aa1e:	089b      	lsrs	r3, r3, #2
 800aa20:	33c0      	adds	r3, #192	@ 0xc0
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	589b      	ldr	r3, [r3, r2]
 800aa26:	1dfa      	adds	r2, r7, #7
 800aa28:	7812      	ldrb	r2, [r2, #0]
 800aa2a:	0011      	movs	r1, r2
 800aa2c:	2203      	movs	r2, #3
 800aa2e:	400a      	ands	r2, r1
 800aa30:	00d2      	lsls	r2, r2, #3
 800aa32:	21ff      	movs	r1, #255	@ 0xff
 800aa34:	4091      	lsls	r1, r2
 800aa36:	000a      	movs	r2, r1
 800aa38:	43d2      	mvns	r2, r2
 800aa3a:	401a      	ands	r2, r3
 800aa3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	019b      	lsls	r3, r3, #6
 800aa42:	22ff      	movs	r2, #255	@ 0xff
 800aa44:	401a      	ands	r2, r3
 800aa46:	1dfb      	adds	r3, r7, #7
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	0018      	movs	r0, r3
 800aa4c:	2303      	movs	r3, #3
 800aa4e:	4003      	ands	r3, r0
 800aa50:	00db      	lsls	r3, r3, #3
 800aa52:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800aa54:	481f      	ldr	r0, [pc, #124]	@ (800aad4 <__NVIC_SetPriority+0xd4>)
 800aa56:	1dfb      	adds	r3, r7, #7
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	b25b      	sxtb	r3, r3
 800aa5c:	089b      	lsrs	r3, r3, #2
 800aa5e:	430a      	orrs	r2, r1
 800aa60:	33c0      	adds	r3, #192	@ 0xc0
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800aa66:	e031      	b.n	800aacc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800aa68:	4a1b      	ldr	r2, [pc, #108]	@ (800aad8 <__NVIC_SetPriority+0xd8>)
 800aa6a:	1dfb      	adds	r3, r7, #7
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	0019      	movs	r1, r3
 800aa70:	230f      	movs	r3, #15
 800aa72:	400b      	ands	r3, r1
 800aa74:	3b08      	subs	r3, #8
 800aa76:	089b      	lsrs	r3, r3, #2
 800aa78:	3306      	adds	r3, #6
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	18d3      	adds	r3, r2, r3
 800aa7e:	3304      	adds	r3, #4
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	1dfa      	adds	r2, r7, #7
 800aa84:	7812      	ldrb	r2, [r2, #0]
 800aa86:	0011      	movs	r1, r2
 800aa88:	2203      	movs	r2, #3
 800aa8a:	400a      	ands	r2, r1
 800aa8c:	00d2      	lsls	r2, r2, #3
 800aa8e:	21ff      	movs	r1, #255	@ 0xff
 800aa90:	4091      	lsls	r1, r2
 800aa92:	000a      	movs	r2, r1
 800aa94:	43d2      	mvns	r2, r2
 800aa96:	401a      	ands	r2, r3
 800aa98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	019b      	lsls	r3, r3, #6
 800aa9e:	22ff      	movs	r2, #255	@ 0xff
 800aaa0:	401a      	ands	r2, r3
 800aaa2:	1dfb      	adds	r3, r7, #7
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	0018      	movs	r0, r3
 800aaa8:	2303      	movs	r3, #3
 800aaaa:	4003      	ands	r3, r0
 800aaac:	00db      	lsls	r3, r3, #3
 800aaae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800aab0:	4809      	ldr	r0, [pc, #36]	@ (800aad8 <__NVIC_SetPriority+0xd8>)
 800aab2:	1dfb      	adds	r3, r7, #7
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	001c      	movs	r4, r3
 800aab8:	230f      	movs	r3, #15
 800aaba:	4023      	ands	r3, r4
 800aabc:	3b08      	subs	r3, #8
 800aabe:	089b      	lsrs	r3, r3, #2
 800aac0:	430a      	orrs	r2, r1
 800aac2:	3306      	adds	r3, #6
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	18c3      	adds	r3, r0, r3
 800aac8:	3304      	adds	r3, #4
 800aaca:	601a      	str	r2, [r3, #0]
}
 800aacc:	46c0      	nop			@ (mov r8, r8)
 800aace:	46bd      	mov	sp, r7
 800aad0:	b003      	add	sp, #12
 800aad2:	bd90      	pop	{r4, r7, pc}
 800aad4:	e000e100 	.word	0xe000e100
 800aad8:	e000ed00 	.word	0xe000ed00

0800aadc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	1e5a      	subs	r2, r3, #1
 800aae8:	2380      	movs	r3, #128	@ 0x80
 800aaea:	045b      	lsls	r3, r3, #17
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d301      	bcc.n	800aaf4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	e010      	b.n	800ab16 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800aaf4:	4b0a      	ldr	r3, [pc, #40]	@ (800ab20 <SysTick_Config+0x44>)
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	3a01      	subs	r2, #1
 800aafa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800aafc:	2301      	movs	r3, #1
 800aafe:	425b      	negs	r3, r3
 800ab00:	2103      	movs	r1, #3
 800ab02:	0018      	movs	r0, r3
 800ab04:	f7ff ff7c 	bl	800aa00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ab08:	4b05      	ldr	r3, [pc, #20]	@ (800ab20 <SysTick_Config+0x44>)
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ab0e:	4b04      	ldr	r3, [pc, #16]	@ (800ab20 <SysTick_Config+0x44>)
 800ab10:	2207      	movs	r2, #7
 800ab12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	0018      	movs	r0, r3
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	b002      	add	sp, #8
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	46c0      	nop			@ (mov r8, r8)
 800ab20:	e000e010 	.word	0xe000e010

0800ab24 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b084      	sub	sp, #16
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	60b9      	str	r1, [r7, #8]
 800ab2c:	607a      	str	r2, [r7, #4]
 800ab2e:	210f      	movs	r1, #15
 800ab30:	187b      	adds	r3, r7, r1
 800ab32:	1c02      	adds	r2, r0, #0
 800ab34:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800ab36:	68ba      	ldr	r2, [r7, #8]
 800ab38:	187b      	adds	r3, r7, r1
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	b25b      	sxtb	r3, r3
 800ab3e:	0011      	movs	r1, r2
 800ab40:	0018      	movs	r0, r3
 800ab42:	f7ff ff5d 	bl	800aa00 <__NVIC_SetPriority>
}
 800ab46:	46c0      	nop			@ (mov r8, r8)
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	b004      	add	sp, #16
 800ab4c:	bd80      	pop	{r7, pc}

0800ab4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ab4e:	b580      	push	{r7, lr}
 800ab50:	b082      	sub	sp, #8
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	0002      	movs	r2, r0
 800ab56:	1dfb      	adds	r3, r7, #7
 800ab58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ab5a:	1dfb      	adds	r3, r7, #7
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	b25b      	sxtb	r3, r3
 800ab60:	0018      	movs	r0, r3
 800ab62:	f7ff ff33 	bl	800a9cc <__NVIC_EnableIRQ>
}
 800ab66:	46c0      	nop			@ (mov r8, r8)
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	b002      	add	sp, #8
 800ab6c:	bd80      	pop	{r7, pc}

0800ab6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	b082      	sub	sp, #8
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	0018      	movs	r0, r3
 800ab7a:	f7ff ffaf 	bl	800aadc <SysTick_Config>
 800ab7e:	0003      	movs	r3, r0
}
 800ab80:	0018      	movs	r0, r3
 800ab82:	46bd      	mov	sp, r7
 800ab84:	b002      	add	sp, #8
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d101      	bne.n	800ab9a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	e061      	b.n	800ac5e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a32      	ldr	r2, [pc, #200]	@ (800ac68 <HAL_DMA_Init+0xe0>)
 800aba0:	4694      	mov	ip, r2
 800aba2:	4463      	add	r3, ip
 800aba4:	2114      	movs	r1, #20
 800aba6:	0018      	movs	r0, r3
 800aba8:	f7f5 faca 	bl	8000140 <__udivsi3>
 800abac:	0003      	movs	r3, r0
 800abae:	009a      	lsls	r2, r3, #2
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4a2d      	ldr	r2, [pc, #180]	@ (800ac6c <HAL_DMA_Init+0xe4>)
 800abb8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2225      	movs	r2, #37	@ 0x25
 800abbe:	2102      	movs	r1, #2
 800abc0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	4a28      	ldr	r2, [pc, #160]	@ (800ac70 <HAL_DMA_Init+0xe8>)
 800abce:	4013      	ands	r3, r2
 800abd0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800abda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	691b      	ldr	r3, [r3, #16]
 800abe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800abe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	699b      	ldr	r3, [r3, #24]
 800abec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800abf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6a1b      	ldr	r3, [r3, #32]
 800abf8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	4313      	orrs	r3, r2
 800abfe:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	68fa      	ldr	r2, [r7, #12]
 800ac06:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	689a      	ldr	r2, [r3, #8]
 800ac0c:	2380      	movs	r3, #128	@ 0x80
 800ac0e:	01db      	lsls	r3, r3, #7
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d018      	beq.n	800ac46 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800ac14:	4b17      	ldr	r3, [pc, #92]	@ (800ac74 <HAL_DMA_Init+0xec>)
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac1c:	211c      	movs	r1, #28
 800ac1e:	400b      	ands	r3, r1
 800ac20:	210f      	movs	r1, #15
 800ac22:	4099      	lsls	r1, r3
 800ac24:	000b      	movs	r3, r1
 800ac26:	43d9      	mvns	r1, r3
 800ac28:	4b12      	ldr	r3, [pc, #72]	@ (800ac74 <HAL_DMA_Init+0xec>)
 800ac2a:	400a      	ands	r2, r1
 800ac2c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800ac2e:	4b11      	ldr	r3, [pc, #68]	@ (800ac74 <HAL_DMA_Init+0xec>)
 800ac30:	6819      	ldr	r1, [r3, #0]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	685a      	ldr	r2, [r3, #4]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac3a:	201c      	movs	r0, #28
 800ac3c:	4003      	ands	r3, r0
 800ac3e:	409a      	lsls	r2, r3
 800ac40:	4b0c      	ldr	r3, [pc, #48]	@ (800ac74 <HAL_DMA_Init+0xec>)
 800ac42:	430a      	orrs	r2, r1
 800ac44:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2225      	movs	r2, #37	@ 0x25
 800ac50:	2101      	movs	r1, #1
 800ac52:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2224      	movs	r2, #36	@ 0x24
 800ac58:	2100      	movs	r1, #0
 800ac5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ac5c:	2300      	movs	r3, #0
}
 800ac5e:	0018      	movs	r0, r3
 800ac60:	46bd      	mov	sp, r7
 800ac62:	b004      	add	sp, #16
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	46c0      	nop			@ (mov r8, r8)
 800ac68:	bffdfff8 	.word	0xbffdfff8
 800ac6c:	40020000 	.word	0x40020000
 800ac70:	ffff800f 	.word	0xffff800f
 800ac74:	400200a8 	.word	0x400200a8

0800ac78 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b082      	sub	sp, #8
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d101      	bne.n	800ac8a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	e04a      	b.n	800ad20 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	2101      	movs	r1, #1
 800ac96:	438a      	bics	r2, r1
 800ac98:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4a22      	ldr	r2, [pc, #136]	@ (800ad28 <HAL_DMA_DeInit+0xb0>)
 800aca0:	4694      	mov	ip, r2
 800aca2:	4463      	add	r3, ip
 800aca4:	2114      	movs	r1, #20
 800aca6:	0018      	movs	r0, r3
 800aca8:	f7f5 fa4a 	bl	8000140 <__udivsi3>
 800acac:	0003      	movs	r3, r0
 800acae:	009a      	lsls	r2, r3, #2
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	4a1d      	ldr	r2, [pc, #116]	@ (800ad2c <HAL_DMA_DeInit+0xb4>)
 800acb8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	2200      	movs	r2, #0
 800acc0:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acc6:	221c      	movs	r2, #28
 800acc8:	401a      	ands	r2, r3
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acce:	2101      	movs	r1, #1
 800acd0:	4091      	lsls	r1, r2
 800acd2:	000a      	movs	r2, r1
 800acd4:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800acd6:	4b16      	ldr	r3, [pc, #88]	@ (800ad30 <HAL_DMA_DeInit+0xb8>)
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acde:	211c      	movs	r1, #28
 800ace0:	400b      	ands	r3, r1
 800ace2:	210f      	movs	r1, #15
 800ace4:	4099      	lsls	r1, r3
 800ace6:	000b      	movs	r3, r1
 800ace8:	43d9      	mvns	r1, r3
 800acea:	4b11      	ldr	r3, [pc, #68]	@ (800ad30 <HAL_DMA_DeInit+0xb8>)
 800acec:	400a      	ands	r2, r1
 800acee:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2200      	movs	r2, #0
 800acfa:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2200      	movs	r2, #0
 800ad00:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2200      	movs	r2, #0
 800ad06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2225      	movs	r2, #37	@ 0x25
 800ad12:	2100      	movs	r1, #0
 800ad14:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2224      	movs	r2, #36	@ 0x24
 800ad1a:	2100      	movs	r1, #0
 800ad1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ad1e:	2300      	movs	r3, #0
}
 800ad20:	0018      	movs	r0, r3
 800ad22:	46bd      	mov	sp, r7
 800ad24:	b002      	add	sp, #8
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	bffdfff8 	.word	0xbffdfff8
 800ad2c:	40020000 	.word	0x40020000
 800ad30:	400200a8 	.word	0x400200a8

0800ad34 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b086      	sub	sp, #24
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]
 800ad40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ad42:	2317      	movs	r3, #23
 800ad44:	18fb      	adds	r3, r7, r3
 800ad46:	2200      	movs	r2, #0
 800ad48:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2224      	movs	r2, #36	@ 0x24
 800ad4e:	5c9b      	ldrb	r3, [r3, r2]
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d101      	bne.n	800ad58 <HAL_DMA_Start_IT+0x24>
 800ad54:	2302      	movs	r3, #2
 800ad56:	e04f      	b.n	800adf8 <HAL_DMA_Start_IT+0xc4>
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2224      	movs	r2, #36	@ 0x24
 800ad5c:	2101      	movs	r1, #1
 800ad5e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2225      	movs	r2, #37	@ 0x25
 800ad64:	5c9b      	ldrb	r3, [r3, r2]
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d13a      	bne.n	800ade2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2225      	movs	r2, #37	@ 0x25
 800ad70:	2102      	movs	r1, #2
 800ad72:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2200      	movs	r2, #0
 800ad78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	2101      	movs	r1, #1
 800ad86:	438a      	bics	r2, r1
 800ad88:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	68b9      	ldr	r1, [r7, #8]
 800ad90:	68f8      	ldr	r0, [r7, #12]
 800ad92:	f000 f976 	bl	800b082 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d008      	beq.n	800adb0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	210e      	movs	r1, #14
 800adaa:	430a      	orrs	r2, r1
 800adac:	601a      	str	r2, [r3, #0]
 800adae:	e00f      	b.n	800add0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	2104      	movs	r1, #4
 800adbc:	438a      	bics	r2, r1
 800adbe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	210a      	movs	r1, #10
 800adcc:	430a      	orrs	r2, r1
 800adce:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	2101      	movs	r1, #1
 800addc:	430a      	orrs	r2, r1
 800adde:	601a      	str	r2, [r3, #0]
 800ade0:	e007      	b.n	800adf2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2224      	movs	r2, #36	@ 0x24
 800ade6:	2100      	movs	r1, #0
 800ade8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800adea:	2317      	movs	r3, #23
 800adec:	18fb      	adds	r3, r7, r3
 800adee:	2202      	movs	r2, #2
 800adf0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800adf2:	2317      	movs	r3, #23
 800adf4:	18fb      	adds	r3, r7, r3
 800adf6:	781b      	ldrb	r3, [r3, #0]
}
 800adf8:	0018      	movs	r0, r3
 800adfa:	46bd      	mov	sp, r7
 800adfc:	b006      	add	sp, #24
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae08:	230f      	movs	r3, #15
 800ae0a:	18fb      	adds	r3, r7, r3
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2225      	movs	r2, #37	@ 0x25
 800ae14:	5c9b      	ldrb	r3, [r3, r2]
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	2b02      	cmp	r3, #2
 800ae1a:	d008      	beq.n	800ae2e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2204      	movs	r2, #4
 800ae20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2224      	movs	r2, #36	@ 0x24
 800ae26:	2100      	movs	r1, #0
 800ae28:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e024      	b.n	800ae78 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	210e      	movs	r1, #14
 800ae3a:	438a      	bics	r2, r1
 800ae3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	2101      	movs	r1, #1
 800ae4a:	438a      	bics	r2, r1
 800ae4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae52:	221c      	movs	r2, #28
 800ae54:	401a      	ands	r2, r3
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae5a:	2101      	movs	r1, #1
 800ae5c:	4091      	lsls	r1, r2
 800ae5e:	000a      	movs	r2, r1
 800ae60:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2225      	movs	r2, #37	@ 0x25
 800ae66:	2101      	movs	r1, #1
 800ae68:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2224      	movs	r2, #36	@ 0x24
 800ae6e:	2100      	movs	r1, #0
 800ae70:	5499      	strb	r1, [r3, r2]

    return status;
 800ae72:	230f      	movs	r3, #15
 800ae74:	18fb      	adds	r3, r7, r3
 800ae76:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ae78:	0018      	movs	r0, r3
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	b004      	add	sp, #16
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae88:	210f      	movs	r1, #15
 800ae8a:	187b      	adds	r3, r7, r1
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2225      	movs	r2, #37	@ 0x25
 800ae94:	5c9b      	ldrb	r3, [r3, r2]
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	2b02      	cmp	r3, #2
 800ae9a:	d006      	beq.n	800aeaa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2204      	movs	r2, #4
 800aea0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800aea2:	187b      	adds	r3, r7, r1
 800aea4:	2201      	movs	r2, #1
 800aea6:	701a      	strb	r2, [r3, #0]
 800aea8:	e02a      	b.n	800af00 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	210e      	movs	r1, #14
 800aeb6:	438a      	bics	r2, r1
 800aeb8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	2101      	movs	r1, #1
 800aec6:	438a      	bics	r2, r1
 800aec8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aece:	221c      	movs	r2, #28
 800aed0:	401a      	ands	r2, r3
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aed6:	2101      	movs	r1, #1
 800aed8:	4091      	lsls	r1, r2
 800aeda:	000a      	movs	r2, r1
 800aedc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2225      	movs	r2, #37	@ 0x25
 800aee2:	2101      	movs	r1, #1
 800aee4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2224      	movs	r2, #36	@ 0x24
 800aeea:	2100      	movs	r1, #0
 800aeec:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d004      	beq.n	800af00 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	0010      	movs	r0, r2
 800aefe:	4798      	blx	r3
    }
  }
  return status;
 800af00:	230f      	movs	r3, #15
 800af02:	18fb      	adds	r3, r7, r3
 800af04:	781b      	ldrb	r3, [r3, #0]
}
 800af06:	0018      	movs	r0, r3
 800af08:	46bd      	mov	sp, r7
 800af0a:	b004      	add	sp, #16
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b084      	sub	sp, #16
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af2a:	221c      	movs	r2, #28
 800af2c:	4013      	ands	r3, r2
 800af2e:	2204      	movs	r2, #4
 800af30:	409a      	lsls	r2, r3
 800af32:	0013      	movs	r3, r2
 800af34:	68fa      	ldr	r2, [r7, #12]
 800af36:	4013      	ands	r3, r2
 800af38:	d026      	beq.n	800af88 <HAL_DMA_IRQHandler+0x7a>
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	2204      	movs	r2, #4
 800af3e:	4013      	ands	r3, r2
 800af40:	d022      	beq.n	800af88 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	2220      	movs	r2, #32
 800af4a:	4013      	ands	r3, r2
 800af4c:	d107      	bne.n	800af5e <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2104      	movs	r1, #4
 800af5a:	438a      	bics	r2, r1
 800af5c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af62:	221c      	movs	r2, #28
 800af64:	401a      	ands	r2, r3
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af6a:	2104      	movs	r1, #4
 800af6c:	4091      	lsls	r1, r2
 800af6e:	000a      	movs	r2, r1
 800af70:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af76:	2b00      	cmp	r3, #0
 800af78:	d100      	bne.n	800af7c <HAL_DMA_IRQHandler+0x6e>
 800af7a:	e071      	b.n	800b060 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	0010      	movs	r0, r2
 800af84:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800af86:	e06b      	b.n	800b060 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af8c:	221c      	movs	r2, #28
 800af8e:	4013      	ands	r3, r2
 800af90:	2202      	movs	r2, #2
 800af92:	409a      	lsls	r2, r3
 800af94:	0013      	movs	r3, r2
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	4013      	ands	r3, r2
 800af9a:	d02d      	beq.n	800aff8 <HAL_DMA_IRQHandler+0xea>
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	2202      	movs	r2, #2
 800afa0:	4013      	ands	r3, r2
 800afa2:	d029      	beq.n	800aff8 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2220      	movs	r2, #32
 800afac:	4013      	ands	r3, r2
 800afae:	d10b      	bne.n	800afc8 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	210a      	movs	r1, #10
 800afbc:	438a      	bics	r2, r1
 800afbe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2225      	movs	r2, #37	@ 0x25
 800afc4:	2101      	movs	r1, #1
 800afc6:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afcc:	221c      	movs	r2, #28
 800afce:	401a      	ands	r2, r3
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afd4:	2102      	movs	r1, #2
 800afd6:	4091      	lsls	r1, r2
 800afd8:	000a      	movs	r2, r1
 800afda:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2224      	movs	r2, #36	@ 0x24
 800afe0:	2100      	movs	r1, #0
 800afe2:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d039      	beq.n	800b060 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	0010      	movs	r0, r2
 800aff4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800aff6:	e033      	b.n	800b060 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800affc:	221c      	movs	r2, #28
 800affe:	4013      	ands	r3, r2
 800b000:	2208      	movs	r2, #8
 800b002:	409a      	lsls	r2, r3
 800b004:	0013      	movs	r3, r2
 800b006:	68fa      	ldr	r2, [r7, #12]
 800b008:	4013      	ands	r3, r2
 800b00a:	d02a      	beq.n	800b062 <HAL_DMA_IRQHandler+0x154>
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	2208      	movs	r2, #8
 800b010:	4013      	ands	r3, r2
 800b012:	d026      	beq.n	800b062 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	210e      	movs	r1, #14
 800b020:	438a      	bics	r2, r1
 800b022:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b028:	221c      	movs	r2, #28
 800b02a:	401a      	ands	r2, r3
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b030:	2101      	movs	r1, #1
 800b032:	4091      	lsls	r1, r2
 800b034:	000a      	movs	r2, r1
 800b036:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2201      	movs	r2, #1
 800b03c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2225      	movs	r2, #37	@ 0x25
 800b042:	2101      	movs	r1, #1
 800b044:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2224      	movs	r2, #36	@ 0x24
 800b04a:	2100      	movs	r1, #0
 800b04c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b052:	2b00      	cmp	r3, #0
 800b054:	d005      	beq.n	800b062 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	0010      	movs	r0, r2
 800b05e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800b060:	46c0      	nop			@ (mov r8, r8)
 800b062:	46c0      	nop			@ (mov r8, r8)
}
 800b064:	46bd      	mov	sp, r7
 800b066:	b004      	add	sp, #16
 800b068:	bd80      	pop	{r7, pc}

0800b06a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b082      	sub	sp, #8
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2225      	movs	r2, #37	@ 0x25
 800b076:	5c9b      	ldrb	r3, [r3, r2]
 800b078:	b2db      	uxtb	r3, r3
}
 800b07a:	0018      	movs	r0, r3
 800b07c:	46bd      	mov	sp, r7
 800b07e:	b002      	add	sp, #8
 800b080:	bd80      	pop	{r7, pc}

0800b082 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b084      	sub	sp, #16
 800b086:	af00      	add	r7, sp, #0
 800b088:	60f8      	str	r0, [r7, #12]
 800b08a:	60b9      	str	r1, [r7, #8]
 800b08c:	607a      	str	r2, [r7, #4]
 800b08e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b094:	221c      	movs	r2, #28
 800b096:	401a      	ands	r2, r3
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b09c:	2101      	movs	r1, #1
 800b09e:	4091      	lsls	r1, r2
 800b0a0:	000a      	movs	r2, r1
 800b0a2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	683a      	ldr	r2, [r7, #0]
 800b0aa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	2b10      	cmp	r3, #16
 800b0b2:	d108      	bne.n	800b0c6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	68ba      	ldr	r2, [r7, #8]
 800b0c2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800b0c4:	e007      	b.n	800b0d6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	68ba      	ldr	r2, [r7, #8]
 800b0cc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	60da      	str	r2, [r3, #12]
}
 800b0d6:	46c0      	nop			@ (mov r8, r8)
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	b004      	add	sp, #16
 800b0dc:	bd80      	pop	{r7, pc}
	...

0800b0e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800b0e8:	f7ff f8a6 	bl	800a238 <HAL_GetTick>
 800b0ec:	0003      	movs	r3, r0
 800b0ee:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800b0f0:	e00f      	b.n	800b112 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	d00c      	beq.n	800b112 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d007      	beq.n	800b10e <FLASH_WaitForLastOperation+0x2e>
 800b0fe:	f7ff f89b 	bl	800a238 <HAL_GetTick>
 800b102:	0002      	movs	r2, r0
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	1ad3      	subs	r3, r2, r3
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d201      	bcs.n	800b112 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800b10e:	2303      	movs	r3, #3
 800b110:	e052      	b.n	800b1b8 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800b112:	4b2b      	ldr	r3, [pc, #172]	@ (800b1c0 <FLASH_WaitForLastOperation+0xe0>)
 800b114:	699b      	ldr	r3, [r3, #24]
 800b116:	2201      	movs	r2, #1
 800b118:	4013      	ands	r3, r2
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d0e9      	beq.n	800b0f2 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800b11e:	4b28      	ldr	r3, [pc, #160]	@ (800b1c0 <FLASH_WaitForLastOperation+0xe0>)
 800b120:	699b      	ldr	r3, [r3, #24]
 800b122:	2202      	movs	r2, #2
 800b124:	4013      	ands	r3, r2
 800b126:	2b02      	cmp	r3, #2
 800b128:	d102      	bne.n	800b130 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800b12a:	4b25      	ldr	r3, [pc, #148]	@ (800b1c0 <FLASH_WaitForLastOperation+0xe0>)
 800b12c:	2202      	movs	r2, #2
 800b12e:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800b130:	4b23      	ldr	r3, [pc, #140]	@ (800b1c0 <FLASH_WaitForLastOperation+0xe0>)
 800b132:	699a      	ldr	r2, [r3, #24]
 800b134:	2380      	movs	r3, #128	@ 0x80
 800b136:	005b      	lsls	r3, r3, #1
 800b138:	401a      	ands	r2, r3
 800b13a:	2380      	movs	r3, #128	@ 0x80
 800b13c:	005b      	lsls	r3, r3, #1
 800b13e:	429a      	cmp	r2, r3
 800b140:	d035      	beq.n	800b1ae <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800b142:	4b1f      	ldr	r3, [pc, #124]	@ (800b1c0 <FLASH_WaitForLastOperation+0xe0>)
 800b144:	699a      	ldr	r2, [r3, #24]
 800b146:	2380      	movs	r3, #128	@ 0x80
 800b148:	009b      	lsls	r3, r3, #2
 800b14a:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800b14c:	2380      	movs	r3, #128	@ 0x80
 800b14e:	009b      	lsls	r3, r3, #2
 800b150:	429a      	cmp	r2, r3
 800b152:	d02c      	beq.n	800b1ae <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800b154:	4b1a      	ldr	r3, [pc, #104]	@ (800b1c0 <FLASH_WaitForLastOperation+0xe0>)
 800b156:	699a      	ldr	r2, [r3, #24]
 800b158:	2380      	movs	r3, #128	@ 0x80
 800b15a:	00db      	lsls	r3, r3, #3
 800b15c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800b15e:	2380      	movs	r3, #128	@ 0x80
 800b160:	00db      	lsls	r3, r3, #3
 800b162:	429a      	cmp	r2, r3
 800b164:	d023      	beq.n	800b1ae <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800b166:	4b16      	ldr	r3, [pc, #88]	@ (800b1c0 <FLASH_WaitForLastOperation+0xe0>)
 800b168:	699a      	ldr	r2, [r3, #24]
 800b16a:	2380      	movs	r3, #128	@ 0x80
 800b16c:	011b      	lsls	r3, r3, #4
 800b16e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800b170:	2380      	movs	r3, #128	@ 0x80
 800b172:	011b      	lsls	r3, r3, #4
 800b174:	429a      	cmp	r2, r3
 800b176:	d01a      	beq.n	800b1ae <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800b178:	4b11      	ldr	r3, [pc, #68]	@ (800b1c0 <FLASH_WaitForLastOperation+0xe0>)
 800b17a:	699a      	ldr	r2, [r3, #24]
 800b17c:	2380      	movs	r3, #128	@ 0x80
 800b17e:	019b      	lsls	r3, r3, #6
 800b180:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800b182:	2380      	movs	r3, #128	@ 0x80
 800b184:	019b      	lsls	r3, r3, #6
 800b186:	429a      	cmp	r2, r3
 800b188:	d011      	beq.n	800b1ae <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800b18a:	4b0d      	ldr	r3, [pc, #52]	@ (800b1c0 <FLASH_WaitForLastOperation+0xe0>)
 800b18c:	699a      	ldr	r2, [r3, #24]
 800b18e:	2380      	movs	r3, #128	@ 0x80
 800b190:	029b      	lsls	r3, r3, #10
 800b192:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800b194:	2380      	movs	r3, #128	@ 0x80
 800b196:	029b      	lsls	r3, r3, #10
 800b198:	429a      	cmp	r2, r3
 800b19a:	d008      	beq.n	800b1ae <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800b19c:	4b08      	ldr	r3, [pc, #32]	@ (800b1c0 <FLASH_WaitForLastOperation+0xe0>)
 800b19e:	699a      	ldr	r2, [r3, #24]
 800b1a0:	2380      	movs	r3, #128	@ 0x80
 800b1a2:	025b      	lsls	r3, r3, #9
 800b1a4:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800b1a6:	2380      	movs	r3, #128	@ 0x80
 800b1a8:	025b      	lsls	r3, r3, #9
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d103      	bne.n	800b1b6 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800b1ae:	f000 f809 	bl	800b1c4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	e000      	b.n	800b1b8 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800b1b6:	2300      	movs	r3, #0
}
 800b1b8:	0018      	movs	r0, r3
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	b004      	add	sp, #16
 800b1be:	bd80      	pop	{r7, pc}
 800b1c0:	40022000 	.word	0x40022000

0800b1c4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b082      	sub	sp, #8
 800b1c8:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800b1ce:	4b49      	ldr	r3, [pc, #292]	@ (800b2f4 <FLASH_SetErrorCode+0x130>)
 800b1d0:	699a      	ldr	r2, [r3, #24]
 800b1d2:	2380      	movs	r3, #128	@ 0x80
 800b1d4:	005b      	lsls	r3, r3, #1
 800b1d6:	401a      	ands	r2, r3
 800b1d8:	2380      	movs	r3, #128	@ 0x80
 800b1da:	005b      	lsls	r3, r3, #1
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d10a      	bne.n	800b1f6 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800b1e0:	4b45      	ldr	r3, [pc, #276]	@ (800b2f8 <FLASH_SetErrorCode+0x134>)
 800b1e2:	695b      	ldr	r3, [r3, #20]
 800b1e4:	2202      	movs	r2, #2
 800b1e6:	431a      	orrs	r2, r3
 800b1e8:	4b43      	ldr	r3, [pc, #268]	@ (800b2f8 <FLASH_SetErrorCode+0x134>)
 800b1ea:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2280      	movs	r2, #128	@ 0x80
 800b1f0:	0052      	lsls	r2, r2, #1
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800b1f6:	4b3f      	ldr	r3, [pc, #252]	@ (800b2f4 <FLASH_SetErrorCode+0x130>)
 800b1f8:	699a      	ldr	r2, [r3, #24]
 800b1fa:	2380      	movs	r3, #128	@ 0x80
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	401a      	ands	r2, r3
 800b200:	2380      	movs	r3, #128	@ 0x80
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	429a      	cmp	r2, r3
 800b206:	d10a      	bne.n	800b21e <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800b208:	4b3b      	ldr	r3, [pc, #236]	@ (800b2f8 <FLASH_SetErrorCode+0x134>)
 800b20a:	695b      	ldr	r3, [r3, #20]
 800b20c:	2201      	movs	r2, #1
 800b20e:	431a      	orrs	r2, r3
 800b210:	4b39      	ldr	r3, [pc, #228]	@ (800b2f8 <FLASH_SetErrorCode+0x134>)
 800b212:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2280      	movs	r2, #128	@ 0x80
 800b218:	0092      	lsls	r2, r2, #2
 800b21a:	4313      	orrs	r3, r2
 800b21c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800b21e:	4b35      	ldr	r3, [pc, #212]	@ (800b2f4 <FLASH_SetErrorCode+0x130>)
 800b220:	699a      	ldr	r2, [r3, #24]
 800b222:	2380      	movs	r3, #128	@ 0x80
 800b224:	00db      	lsls	r3, r3, #3
 800b226:	401a      	ands	r2, r3
 800b228:	2380      	movs	r3, #128	@ 0x80
 800b22a:	00db      	lsls	r3, r3, #3
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d10a      	bne.n	800b246 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800b230:	4b31      	ldr	r3, [pc, #196]	@ (800b2f8 <FLASH_SetErrorCode+0x134>)
 800b232:	695b      	ldr	r3, [r3, #20]
 800b234:	2208      	movs	r2, #8
 800b236:	431a      	orrs	r2, r3
 800b238:	4b2f      	ldr	r3, [pc, #188]	@ (800b2f8 <FLASH_SetErrorCode+0x134>)
 800b23a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2280      	movs	r2, #128	@ 0x80
 800b240:	00d2      	lsls	r2, r2, #3
 800b242:	4313      	orrs	r3, r2
 800b244:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800b246:	4b2b      	ldr	r3, [pc, #172]	@ (800b2f4 <FLASH_SetErrorCode+0x130>)
 800b248:	699a      	ldr	r2, [r3, #24]
 800b24a:	2380      	movs	r3, #128	@ 0x80
 800b24c:	011b      	lsls	r3, r3, #4
 800b24e:	401a      	ands	r2, r3
 800b250:	2380      	movs	r3, #128	@ 0x80
 800b252:	011b      	lsls	r3, r3, #4
 800b254:	429a      	cmp	r2, r3
 800b256:	d10a      	bne.n	800b26e <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800b258:	4b27      	ldr	r3, [pc, #156]	@ (800b2f8 <FLASH_SetErrorCode+0x134>)
 800b25a:	695b      	ldr	r3, [r3, #20]
 800b25c:	2204      	movs	r2, #4
 800b25e:	431a      	orrs	r2, r3
 800b260:	4b25      	ldr	r3, [pc, #148]	@ (800b2f8 <FLASH_SetErrorCode+0x134>)
 800b262:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2280      	movs	r2, #128	@ 0x80
 800b268:	0112      	lsls	r2, r2, #4
 800b26a:	4313      	orrs	r3, r2
 800b26c:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800b26e:	4b21      	ldr	r3, [pc, #132]	@ (800b2f4 <FLASH_SetErrorCode+0x130>)
 800b270:	699a      	ldr	r2, [r3, #24]
 800b272:	2380      	movs	r3, #128	@ 0x80
 800b274:	019b      	lsls	r3, r3, #6
 800b276:	401a      	ands	r2, r3
 800b278:	2380      	movs	r3, #128	@ 0x80
 800b27a:	019b      	lsls	r3, r3, #6
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d10a      	bne.n	800b296 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800b280:	4b1d      	ldr	r3, [pc, #116]	@ (800b2f8 <FLASH_SetErrorCode+0x134>)
 800b282:	695b      	ldr	r3, [r3, #20]
 800b284:	2210      	movs	r2, #16
 800b286:	431a      	orrs	r2, r3
 800b288:	4b1b      	ldr	r3, [pc, #108]	@ (800b2f8 <FLASH_SetErrorCode+0x134>)
 800b28a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2280      	movs	r2, #128	@ 0x80
 800b290:	0192      	lsls	r2, r2, #6
 800b292:	4313      	orrs	r3, r2
 800b294:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800b296:	4b17      	ldr	r3, [pc, #92]	@ (800b2f4 <FLASH_SetErrorCode+0x130>)
 800b298:	699a      	ldr	r2, [r3, #24]
 800b29a:	2380      	movs	r3, #128	@ 0x80
 800b29c:	029b      	lsls	r3, r3, #10
 800b29e:	401a      	ands	r2, r3
 800b2a0:	2380      	movs	r3, #128	@ 0x80
 800b2a2:	029b      	lsls	r3, r3, #10
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d109      	bne.n	800b2bc <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800b2a8:	4b13      	ldr	r3, [pc, #76]	@ (800b2f8 <FLASH_SetErrorCode+0x134>)
 800b2aa:	695b      	ldr	r3, [r3, #20]
 800b2ac:	2220      	movs	r2, #32
 800b2ae:	431a      	orrs	r2, r3
 800b2b0:	4b11      	ldr	r3, [pc, #68]	@ (800b2f8 <FLASH_SetErrorCode+0x134>)
 800b2b2:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2220      	movs	r2, #32
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800b2bc:	4b0d      	ldr	r3, [pc, #52]	@ (800b2f4 <FLASH_SetErrorCode+0x130>)
 800b2be:	699a      	ldr	r2, [r3, #24]
 800b2c0:	2380      	movs	r3, #128	@ 0x80
 800b2c2:	025b      	lsls	r3, r3, #9
 800b2c4:	401a      	ands	r2, r3
 800b2c6:	2380      	movs	r3, #128	@ 0x80
 800b2c8:	025b      	lsls	r3, r3, #9
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d10a      	bne.n	800b2e4 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800b2ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b2f8 <FLASH_SetErrorCode+0x134>)
 800b2d0:	695b      	ldr	r3, [r3, #20]
 800b2d2:	2240      	movs	r2, #64	@ 0x40
 800b2d4:	431a      	orrs	r2, r3
 800b2d6:	4b08      	ldr	r3, [pc, #32]	@ (800b2f8 <FLASH_SetErrorCode+0x134>)
 800b2d8:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2280      	movs	r2, #128	@ 0x80
 800b2de:	0252      	lsls	r2, r2, #9
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800b2e4:	4b03      	ldr	r3, [pc, #12]	@ (800b2f4 <FLASH_SetErrorCode+0x130>)
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	619a      	str	r2, [r3, #24]
}  
 800b2ea:	46c0      	nop			@ (mov r8, r8)
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	b002      	add	sp, #8
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	46c0      	nop			@ (mov r8, r8)
 800b2f4:	40022000 	.word	0x40022000
 800b2f8:	20002d20 	.word	0x20002d20

0800b2fc <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800b302:	4b12      	ldr	r3, [pc, #72]	@ (800b34c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	2201      	movs	r2, #1
 800b308:	4013      	ands	r3, r2
 800b30a:	d019      	beq.n	800b340 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b30c:	f3ef 8310 	mrs	r3, PRIMASK
 800b310:	607b      	str	r3, [r7, #4]
  return(result);
 800b312:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800b314:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800b316:	b672      	cpsid	i
}
 800b318:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800b31a:	4b0c      	ldr	r3, [pc, #48]	@ (800b34c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800b31c:	4a0c      	ldr	r2, [pc, #48]	@ (800b350 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800b31e:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800b320:	4b0a      	ldr	r3, [pc, #40]	@ (800b34c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800b322:	4a0c      	ldr	r2, [pc, #48]	@ (800b354 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800b324:	60da      	str	r2, [r3, #12]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	f383 8810 	msr	PRIMASK, r3
}
 800b330:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800b332:	4b06      	ldr	r3, [pc, #24]	@ (800b34c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	2201      	movs	r2, #1
 800b338:	4013      	ands	r3, r2
 800b33a:	d001      	beq.n	800b340 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800b33c:	2301      	movs	r3, #1
 800b33e:	e000      	b.n	800b342 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800b340:	2300      	movs	r3, #0
}
 800b342:	0018      	movs	r0, r3
 800b344:	46bd      	mov	sp, r7
 800b346:	b004      	add	sp, #16
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	46c0      	nop			@ (mov r8, r8)
 800b34c:	40022000 	.word	0x40022000
 800b350:	89abcdef 	.word	0x89abcdef
 800b354:	02030405 	.word	0x02030405

0800b358 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800b35c:	4b04      	ldr	r3, [pc, #16]	@ (800b370 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800b35e:	685a      	ldr	r2, [r3, #4]
 800b360:	4b03      	ldr	r3, [pc, #12]	@ (800b370 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800b362:	2101      	movs	r1, #1
 800b364:	430a      	orrs	r2, r1
 800b366:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	0018      	movs	r0, r3
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	40022000 	.word	0x40022000

0800b374 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800b374:	b5b0      	push	{r4, r5, r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b37c:	250f      	movs	r5, #15
 800b37e:	197b      	adds	r3, r7, r5
 800b380:	2200      	movs	r2, #0
 800b382:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b384:	197c      	adds	r4, r7, r5
 800b386:	4b0f      	ldr	r3, [pc, #60]	@ (800b3c4 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800b388:	0018      	movs	r0, r3
 800b38a:	f7ff fea9 	bl	800b0e0 <FLASH_WaitForLastOperation>
 800b38e:	0003      	movs	r3, r0
 800b390:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800b392:	0029      	movs	r1, r5
 800b394:	187b      	adds	r3, r7, r1
 800b396:	781b      	ldrb	r3, [r3, #0]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d10c      	bne.n	800b3b6 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b39c:	4b0a      	ldr	r3, [pc, #40]	@ (800b3c8 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800b39e:	2200      	movs	r2, #0
 800b3a0:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b3a8:	187c      	adds	r4, r7, r1
 800b3aa:	4b06      	ldr	r3, [pc, #24]	@ (800b3c4 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800b3ac:	0018      	movs	r0, r3
 800b3ae:	f7ff fe97 	bl	800b0e0 <FLASH_WaitForLastOperation>
 800b3b2:	0003      	movs	r3, r0
 800b3b4:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800b3b6:	230f      	movs	r3, #15
 800b3b8:	18fb      	adds	r3, r7, r3
 800b3ba:	781b      	ldrb	r3, [r3, #0]
}  
 800b3bc:	0018      	movs	r0, r3
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	b004      	add	sp, #16
 800b3c2:	bdb0      	pop	{r4, r5, r7, pc}
 800b3c4:	0000c350 	.word	0x0000c350
 800b3c8:	20002d20 	.word	0x20002d20

0800b3cc <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800b3cc:	b5b0      	push	{r4, r5, r7, lr}
 800b3ce:	b086      	sub	sp, #24
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b3d8:	2317      	movs	r3, #23
 800b3da:	18fb      	adds	r3, r7, r3
 800b3dc:	2201      	movs	r2, #1
 800b3de:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b3e0:	4b24      	ldr	r3, [pc, #144]	@ (800b474 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800b3e2:	7c1b      	ldrb	r3, [r3, #16]
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d101      	bne.n	800b3ec <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800b3e8:	2302      	movs	r3, #2
 800b3ea:	e03e      	b.n	800b46a <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800b3ec:	4b21      	ldr	r3, [pc, #132]	@ (800b474 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b3f2:	2517      	movs	r5, #23
 800b3f4:	197c      	adds	r4, r7, r5
 800b3f6:	4b20      	ldr	r3, [pc, #128]	@ (800b478 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800b3f8:	0018      	movs	r0, r3
 800b3fa:	f7ff fe71 	bl	800b0e0 <FLASH_WaitForLastOperation>
 800b3fe:	0003      	movs	r3, r0
 800b400:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800b402:	197b      	adds	r3, r7, r5
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d129      	bne.n	800b45e <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b40a:	4b1a      	ldr	r3, [pc, #104]	@ (800b474 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800b40c:	2200      	movs	r2, #0
 800b40e:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2b02      	cmp	r3, #2
 800b414:	d103      	bne.n	800b41e <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	601a      	str	r2, [r3, #0]
 800b41c:	e013      	b.n	800b446 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2b01      	cmp	r3, #1
 800b422:	d104      	bne.n	800b42e <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	b292      	uxth	r2, r2
 800b42a:	801a      	strh	r2, [r3, #0]
 800b42c:	e00b      	b.n	800b446 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d104      	bne.n	800b43e <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	b2d2      	uxtb	r2, r2
 800b43a:	701a      	strb	r2, [r3, #0]
 800b43c:	e003      	b.n	800b446 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800b43e:	2317      	movs	r3, #23
 800b440:	18fb      	adds	r3, r7, r3
 800b442:	2201      	movs	r2, #1
 800b444:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800b446:	2217      	movs	r2, #23
 800b448:	18bb      	adds	r3, r7, r2
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d106      	bne.n	800b45e <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800b450:	18bc      	adds	r4, r7, r2
 800b452:	4b09      	ldr	r3, [pc, #36]	@ (800b478 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800b454:	0018      	movs	r0, r3
 800b456:	f7ff fe43 	bl	800b0e0 <FLASH_WaitForLastOperation>
 800b45a:	0003      	movs	r3, r0
 800b45c:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800b45e:	4b05      	ldr	r3, [pc, #20]	@ (800b474 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800b460:	2200      	movs	r2, #0
 800b462:	741a      	strb	r2, [r3, #16]

  return status;
 800b464:	2317      	movs	r3, #23
 800b466:	18fb      	adds	r3, r7, r3
 800b468:	781b      	ldrb	r3, [r3, #0]
}
 800b46a:	0018      	movs	r0, r3
 800b46c:	46bd      	mov	sp, r7
 800b46e:	b006      	add	sp, #24
 800b470:	bdb0      	pop	{r4, r5, r7, pc}
 800b472:	46c0      	nop			@ (mov r8, r8)
 800b474:	20002d20 	.word	0x20002d20
 800b478:	0000c350 	.word	0x0000c350

0800b47c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b086      	sub	sp, #24
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b486:	2300      	movs	r3, #0
 800b488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b48a:	2300      	movs	r3, #0
 800b48c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800b48e:	2300      	movs	r3, #0
 800b490:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800b492:	e155      	b.n	800b740 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2101      	movs	r1, #1
 800b49a:	697a      	ldr	r2, [r7, #20]
 800b49c:	4091      	lsls	r1, r2
 800b49e:	000a      	movs	r2, r1
 800b4a0:	4013      	ands	r3, r2
 800b4a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d100      	bne.n	800b4ac <HAL_GPIO_Init+0x30>
 800b4aa:	e146      	b.n	800b73a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	2203      	movs	r2, #3
 800b4b2:	4013      	ands	r3, r2
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d005      	beq.n	800b4c4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	2203      	movs	r2, #3
 800b4be:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800b4c0:	2b02      	cmp	r3, #2
 800b4c2:	d130      	bne.n	800b526 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	689b      	ldr	r3, [r3, #8]
 800b4c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	005b      	lsls	r3, r3, #1
 800b4ce:	2203      	movs	r2, #3
 800b4d0:	409a      	lsls	r2, r3
 800b4d2:	0013      	movs	r3, r2
 800b4d4:	43da      	mvns	r2, r3
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	4013      	ands	r3, r2
 800b4da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	68da      	ldr	r2, [r3, #12]
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	005b      	lsls	r3, r3, #1
 800b4e4:	409a      	lsls	r2, r3
 800b4e6:	0013      	movs	r3, r2
 800b4e8:	693a      	ldr	r2, [r7, #16]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	693a      	ldr	r2, [r7, #16]
 800b4f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	409a      	lsls	r2, r3
 800b500:	0013      	movs	r3, r2
 800b502:	43da      	mvns	r2, r3
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	4013      	ands	r3, r2
 800b508:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	091b      	lsrs	r3, r3, #4
 800b510:	2201      	movs	r2, #1
 800b512:	401a      	ands	r2, r3
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	409a      	lsls	r2, r3
 800b518:	0013      	movs	r3, r2
 800b51a:	693a      	ldr	r2, [r7, #16]
 800b51c:	4313      	orrs	r3, r2
 800b51e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	693a      	ldr	r2, [r7, #16]
 800b524:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	2203      	movs	r2, #3
 800b52c:	4013      	ands	r3, r2
 800b52e:	2b03      	cmp	r3, #3
 800b530:	d017      	beq.n	800b562 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	005b      	lsls	r3, r3, #1
 800b53c:	2203      	movs	r2, #3
 800b53e:	409a      	lsls	r2, r3
 800b540:	0013      	movs	r3, r2
 800b542:	43da      	mvns	r2, r3
 800b544:	693b      	ldr	r3, [r7, #16]
 800b546:	4013      	ands	r3, r2
 800b548:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	689a      	ldr	r2, [r3, #8]
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	005b      	lsls	r3, r3, #1
 800b552:	409a      	lsls	r2, r3
 800b554:	0013      	movs	r3, r2
 800b556:	693a      	ldr	r2, [r7, #16]
 800b558:	4313      	orrs	r3, r2
 800b55a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	693a      	ldr	r2, [r7, #16]
 800b560:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	2203      	movs	r2, #3
 800b568:	4013      	ands	r3, r2
 800b56a:	2b02      	cmp	r3, #2
 800b56c:	d123      	bne.n	800b5b6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	08da      	lsrs	r2, r3, #3
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	3208      	adds	r2, #8
 800b576:	0092      	lsls	r2, r2, #2
 800b578:	58d3      	ldr	r3, [r2, r3]
 800b57a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	2207      	movs	r2, #7
 800b580:	4013      	ands	r3, r2
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	220f      	movs	r2, #15
 800b586:	409a      	lsls	r2, r3
 800b588:	0013      	movs	r3, r2
 800b58a:	43da      	mvns	r2, r3
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	4013      	ands	r3, r2
 800b590:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	691a      	ldr	r2, [r3, #16]
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	2107      	movs	r1, #7
 800b59a:	400b      	ands	r3, r1
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	409a      	lsls	r2, r3
 800b5a0:	0013      	movs	r3, r2
 800b5a2:	693a      	ldr	r2, [r7, #16]
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	08da      	lsrs	r2, r3, #3
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	3208      	adds	r2, #8
 800b5b0:	0092      	lsls	r2, r2, #2
 800b5b2:	6939      	ldr	r1, [r7, #16]
 800b5b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	005b      	lsls	r3, r3, #1
 800b5c0:	2203      	movs	r2, #3
 800b5c2:	409a      	lsls	r2, r3
 800b5c4:	0013      	movs	r3, r2
 800b5c6:	43da      	mvns	r2, r3
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	4013      	ands	r3, r2
 800b5cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	2203      	movs	r2, #3
 800b5d4:	401a      	ands	r2, r3
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	005b      	lsls	r3, r3, #1
 800b5da:	409a      	lsls	r2, r3
 800b5dc:	0013      	movs	r3, r2
 800b5de:	693a      	ldr	r2, [r7, #16]
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	693a      	ldr	r2, [r7, #16]
 800b5e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	685a      	ldr	r2, [r3, #4]
 800b5ee:	23c0      	movs	r3, #192	@ 0xc0
 800b5f0:	029b      	lsls	r3, r3, #10
 800b5f2:	4013      	ands	r3, r2
 800b5f4:	d100      	bne.n	800b5f8 <HAL_GPIO_Init+0x17c>
 800b5f6:	e0a0      	b.n	800b73a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b5f8:	4b57      	ldr	r3, [pc, #348]	@ (800b758 <HAL_GPIO_Init+0x2dc>)
 800b5fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b5fc:	4b56      	ldr	r3, [pc, #344]	@ (800b758 <HAL_GPIO_Init+0x2dc>)
 800b5fe:	2101      	movs	r1, #1
 800b600:	430a      	orrs	r2, r1
 800b602:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800b604:	4a55      	ldr	r2, [pc, #340]	@ (800b75c <HAL_GPIO_Init+0x2e0>)
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	089b      	lsrs	r3, r3, #2
 800b60a:	3302      	adds	r3, #2
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	589b      	ldr	r3, [r3, r2]
 800b610:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	2203      	movs	r2, #3
 800b616:	4013      	ands	r3, r2
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	220f      	movs	r2, #15
 800b61c:	409a      	lsls	r2, r3
 800b61e:	0013      	movs	r3, r2
 800b620:	43da      	mvns	r2, r3
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	4013      	ands	r3, r2
 800b626:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	23a0      	movs	r3, #160	@ 0xa0
 800b62c:	05db      	lsls	r3, r3, #23
 800b62e:	429a      	cmp	r2, r3
 800b630:	d01f      	beq.n	800b672 <HAL_GPIO_Init+0x1f6>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4a4a      	ldr	r2, [pc, #296]	@ (800b760 <HAL_GPIO_Init+0x2e4>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d019      	beq.n	800b66e <HAL_GPIO_Init+0x1f2>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4a49      	ldr	r2, [pc, #292]	@ (800b764 <HAL_GPIO_Init+0x2e8>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d013      	beq.n	800b66a <HAL_GPIO_Init+0x1ee>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	4a48      	ldr	r2, [pc, #288]	@ (800b768 <HAL_GPIO_Init+0x2ec>)
 800b646:	4293      	cmp	r3, r2
 800b648:	d00d      	beq.n	800b666 <HAL_GPIO_Init+0x1ea>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	4a47      	ldr	r2, [pc, #284]	@ (800b76c <HAL_GPIO_Init+0x2f0>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d007      	beq.n	800b662 <HAL_GPIO_Init+0x1e6>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	4a46      	ldr	r2, [pc, #280]	@ (800b770 <HAL_GPIO_Init+0x2f4>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d101      	bne.n	800b65e <HAL_GPIO_Init+0x1e2>
 800b65a:	2305      	movs	r3, #5
 800b65c:	e00a      	b.n	800b674 <HAL_GPIO_Init+0x1f8>
 800b65e:	2306      	movs	r3, #6
 800b660:	e008      	b.n	800b674 <HAL_GPIO_Init+0x1f8>
 800b662:	2304      	movs	r3, #4
 800b664:	e006      	b.n	800b674 <HAL_GPIO_Init+0x1f8>
 800b666:	2303      	movs	r3, #3
 800b668:	e004      	b.n	800b674 <HAL_GPIO_Init+0x1f8>
 800b66a:	2302      	movs	r3, #2
 800b66c:	e002      	b.n	800b674 <HAL_GPIO_Init+0x1f8>
 800b66e:	2301      	movs	r3, #1
 800b670:	e000      	b.n	800b674 <HAL_GPIO_Init+0x1f8>
 800b672:	2300      	movs	r3, #0
 800b674:	697a      	ldr	r2, [r7, #20]
 800b676:	2103      	movs	r1, #3
 800b678:	400a      	ands	r2, r1
 800b67a:	0092      	lsls	r2, r2, #2
 800b67c:	4093      	lsls	r3, r2
 800b67e:	693a      	ldr	r2, [r7, #16]
 800b680:	4313      	orrs	r3, r2
 800b682:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b684:	4935      	ldr	r1, [pc, #212]	@ (800b75c <HAL_GPIO_Init+0x2e0>)
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	089b      	lsrs	r3, r3, #2
 800b68a:	3302      	adds	r3, #2
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	693a      	ldr	r2, [r7, #16]
 800b690:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b692:	4b38      	ldr	r3, [pc, #224]	@ (800b774 <HAL_GPIO_Init+0x2f8>)
 800b694:	689b      	ldr	r3, [r3, #8]
 800b696:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	43da      	mvns	r2, r3
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	4013      	ands	r3, r2
 800b6a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	685a      	ldr	r2, [r3, #4]
 800b6a6:	2380      	movs	r3, #128	@ 0x80
 800b6a8:	035b      	lsls	r3, r3, #13
 800b6aa:	4013      	ands	r3, r2
 800b6ac:	d003      	beq.n	800b6b6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800b6ae:	693a      	ldr	r2, [r7, #16]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800b6b6:	4b2f      	ldr	r3, [pc, #188]	@ (800b774 <HAL_GPIO_Init+0x2f8>)
 800b6b8:	693a      	ldr	r2, [r7, #16]
 800b6ba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800b6bc:	4b2d      	ldr	r3, [pc, #180]	@ (800b774 <HAL_GPIO_Init+0x2f8>)
 800b6be:	68db      	ldr	r3, [r3, #12]
 800b6c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	43da      	mvns	r2, r3
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	4013      	ands	r3, r2
 800b6ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	685a      	ldr	r2, [r3, #4]
 800b6d0:	2380      	movs	r3, #128	@ 0x80
 800b6d2:	039b      	lsls	r3, r3, #14
 800b6d4:	4013      	ands	r3, r2
 800b6d6:	d003      	beq.n	800b6e0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800b6d8:	693a      	ldr	r2, [r7, #16]
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800b6e0:	4b24      	ldr	r3, [pc, #144]	@ (800b774 <HAL_GPIO_Init+0x2f8>)
 800b6e2:	693a      	ldr	r2, [r7, #16]
 800b6e4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800b6e6:	4b23      	ldr	r3, [pc, #140]	@ (800b774 <HAL_GPIO_Init+0x2f8>)
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	43da      	mvns	r2, r3
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	4013      	ands	r3, r2
 800b6f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	685a      	ldr	r2, [r3, #4]
 800b6fa:	2380      	movs	r3, #128	@ 0x80
 800b6fc:	029b      	lsls	r3, r3, #10
 800b6fe:	4013      	ands	r3, r2
 800b700:	d003      	beq.n	800b70a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800b702:	693a      	ldr	r2, [r7, #16]
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	4313      	orrs	r3, r2
 800b708:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800b70a:	4b1a      	ldr	r3, [pc, #104]	@ (800b774 <HAL_GPIO_Init+0x2f8>)
 800b70c:	693a      	ldr	r2, [r7, #16]
 800b70e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b710:	4b18      	ldr	r3, [pc, #96]	@ (800b774 <HAL_GPIO_Init+0x2f8>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	43da      	mvns	r2, r3
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	4013      	ands	r3, r2
 800b71e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	685a      	ldr	r2, [r3, #4]
 800b724:	2380      	movs	r3, #128	@ 0x80
 800b726:	025b      	lsls	r3, r3, #9
 800b728:	4013      	ands	r3, r2
 800b72a:	d003      	beq.n	800b734 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800b72c:	693a      	ldr	r2, [r7, #16]
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	4313      	orrs	r3, r2
 800b732:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800b734:	4b0f      	ldr	r3, [pc, #60]	@ (800b774 <HAL_GPIO_Init+0x2f8>)
 800b736:	693a      	ldr	r2, [r7, #16]
 800b738:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	3301      	adds	r3, #1
 800b73e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	40da      	lsrs	r2, r3
 800b748:	1e13      	subs	r3, r2, #0
 800b74a:	d000      	beq.n	800b74e <HAL_GPIO_Init+0x2d2>
 800b74c:	e6a2      	b.n	800b494 <HAL_GPIO_Init+0x18>
  }
}
 800b74e:	46c0      	nop			@ (mov r8, r8)
 800b750:	46c0      	nop			@ (mov r8, r8)
 800b752:	46bd      	mov	sp, r7
 800b754:	b006      	add	sp, #24
 800b756:	bd80      	pop	{r7, pc}
 800b758:	40021000 	.word	0x40021000
 800b75c:	40010000 	.word	0x40010000
 800b760:	50000400 	.word	0x50000400
 800b764:	50000800 	.word	0x50000800
 800b768:	50000c00 	.word	0x50000c00
 800b76c:	50001000 	.word	0x50001000
 800b770:	50001c00 	.word	0x50001c00
 800b774:	40010400 	.word	0x40010400

0800b778 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b086      	sub	sp, #24
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b782:	2300      	movs	r3, #0
 800b784:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b786:	2300      	movs	r3, #0
 800b788:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 800b78a:	2300      	movs	r3, #0
 800b78c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800b78e:	e0bc      	b.n	800b90a <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800b790:	2201      	movs	r2, #1
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	409a      	lsls	r2, r3
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	4013      	ands	r3, r2
 800b79a:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d100      	bne.n	800b7a4 <HAL_GPIO_DeInit+0x2c>
 800b7a2:	e0af      	b.n	800b904 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800b7a4:	4a5e      	ldr	r2, [pc, #376]	@ (800b920 <HAL_GPIO_DeInit+0x1a8>)
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	089b      	lsrs	r3, r3, #2
 800b7aa:	3302      	adds	r3, #2
 800b7ac:	009b      	lsls	r3, r3, #2
 800b7ae:	589b      	ldr	r3, [r3, r2]
 800b7b0:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	2203      	movs	r2, #3
 800b7b6:	4013      	ands	r3, r2
 800b7b8:	009b      	lsls	r3, r3, #2
 800b7ba:	220f      	movs	r2, #15
 800b7bc:	409a      	lsls	r2, r3
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	4013      	ands	r3, r2
 800b7c2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	23a0      	movs	r3, #160	@ 0xa0
 800b7c8:	05db      	lsls	r3, r3, #23
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d01f      	beq.n	800b80e <HAL_GPIO_DeInit+0x96>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	4a54      	ldr	r2, [pc, #336]	@ (800b924 <HAL_GPIO_DeInit+0x1ac>)
 800b7d2:	4293      	cmp	r3, r2
 800b7d4:	d019      	beq.n	800b80a <HAL_GPIO_DeInit+0x92>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	4a53      	ldr	r2, [pc, #332]	@ (800b928 <HAL_GPIO_DeInit+0x1b0>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d013      	beq.n	800b806 <HAL_GPIO_DeInit+0x8e>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4a52      	ldr	r2, [pc, #328]	@ (800b92c <HAL_GPIO_DeInit+0x1b4>)
 800b7e2:	4293      	cmp	r3, r2
 800b7e4:	d00d      	beq.n	800b802 <HAL_GPIO_DeInit+0x8a>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4a51      	ldr	r2, [pc, #324]	@ (800b930 <HAL_GPIO_DeInit+0x1b8>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d007      	beq.n	800b7fe <HAL_GPIO_DeInit+0x86>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	4a50      	ldr	r2, [pc, #320]	@ (800b934 <HAL_GPIO_DeInit+0x1bc>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d101      	bne.n	800b7fa <HAL_GPIO_DeInit+0x82>
 800b7f6:	2305      	movs	r3, #5
 800b7f8:	e00a      	b.n	800b810 <HAL_GPIO_DeInit+0x98>
 800b7fa:	2306      	movs	r3, #6
 800b7fc:	e008      	b.n	800b810 <HAL_GPIO_DeInit+0x98>
 800b7fe:	2304      	movs	r3, #4
 800b800:	e006      	b.n	800b810 <HAL_GPIO_DeInit+0x98>
 800b802:	2303      	movs	r3, #3
 800b804:	e004      	b.n	800b810 <HAL_GPIO_DeInit+0x98>
 800b806:	2302      	movs	r3, #2
 800b808:	e002      	b.n	800b810 <HAL_GPIO_DeInit+0x98>
 800b80a:	2301      	movs	r3, #1
 800b80c:	e000      	b.n	800b810 <HAL_GPIO_DeInit+0x98>
 800b80e:	2300      	movs	r3, #0
 800b810:	697a      	ldr	r2, [r7, #20]
 800b812:	2103      	movs	r1, #3
 800b814:	400a      	ands	r2, r1
 800b816:	0092      	lsls	r2, r2, #2
 800b818:	4093      	lsls	r3, r2
 800b81a:	68fa      	ldr	r2, [r7, #12]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d132      	bne.n	800b886 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b820:	4b45      	ldr	r3, [pc, #276]	@ (800b938 <HAL_GPIO_DeInit+0x1c0>)
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	43d9      	mvns	r1, r3
 800b828:	4b43      	ldr	r3, [pc, #268]	@ (800b938 <HAL_GPIO_DeInit+0x1c0>)
 800b82a:	400a      	ands	r2, r1
 800b82c:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800b82e:	4b42      	ldr	r3, [pc, #264]	@ (800b938 <HAL_GPIO_DeInit+0x1c0>)
 800b830:	685a      	ldr	r2, [r3, #4]
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	43d9      	mvns	r1, r3
 800b836:	4b40      	ldr	r3, [pc, #256]	@ (800b938 <HAL_GPIO_DeInit+0x1c0>)
 800b838:	400a      	ands	r2, r1
 800b83a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800b83c:	4b3e      	ldr	r3, [pc, #248]	@ (800b938 <HAL_GPIO_DeInit+0x1c0>)
 800b83e:	68da      	ldr	r2, [r3, #12]
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	43d9      	mvns	r1, r3
 800b844:	4b3c      	ldr	r3, [pc, #240]	@ (800b938 <HAL_GPIO_DeInit+0x1c0>)
 800b846:	400a      	ands	r2, r1
 800b848:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800b84a:	4b3b      	ldr	r3, [pc, #236]	@ (800b938 <HAL_GPIO_DeInit+0x1c0>)
 800b84c:	689a      	ldr	r2, [r3, #8]
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	43d9      	mvns	r1, r3
 800b852:	4b39      	ldr	r3, [pc, #228]	@ (800b938 <HAL_GPIO_DeInit+0x1c0>)
 800b854:	400a      	ands	r2, r1
 800b856:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	2203      	movs	r2, #3
 800b85c:	4013      	ands	r3, r2
 800b85e:	009b      	lsls	r3, r3, #2
 800b860:	220f      	movs	r2, #15
 800b862:	409a      	lsls	r2, r3
 800b864:	0013      	movs	r3, r2
 800b866:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800b868:	4a2d      	ldr	r2, [pc, #180]	@ (800b920 <HAL_GPIO_DeInit+0x1a8>)
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	089b      	lsrs	r3, r3, #2
 800b86e:	3302      	adds	r3, #2
 800b870:	009b      	lsls	r3, r3, #2
 800b872:	589a      	ldr	r2, [r3, r2]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	43d9      	mvns	r1, r3
 800b878:	4829      	ldr	r0, [pc, #164]	@ (800b920 <HAL_GPIO_DeInit+0x1a8>)
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	089b      	lsrs	r3, r3, #2
 800b87e:	400a      	ands	r2, r1
 800b880:	3302      	adds	r3, #2
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	005b      	lsls	r3, r3, #1
 800b88e:	2103      	movs	r1, #3
 800b890:	4099      	lsls	r1, r3
 800b892:	000b      	movs	r3, r1
 800b894:	431a      	orrs	r2, r3
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	08da      	lsrs	r2, r3, #3
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	3208      	adds	r2, #8
 800b8a2:	0092      	lsls	r2, r2, #2
 800b8a4:	58d3      	ldr	r3, [r2, r3]
 800b8a6:	697a      	ldr	r2, [r7, #20]
 800b8a8:	2107      	movs	r1, #7
 800b8aa:	400a      	ands	r2, r1
 800b8ac:	0092      	lsls	r2, r2, #2
 800b8ae:	210f      	movs	r1, #15
 800b8b0:	4091      	lsls	r1, r2
 800b8b2:	000a      	movs	r2, r1
 800b8b4:	43d1      	mvns	r1, r2
 800b8b6:	697a      	ldr	r2, [r7, #20]
 800b8b8:	08d2      	lsrs	r2, r2, #3
 800b8ba:	4019      	ands	r1, r3
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	3208      	adds	r2, #8
 800b8c0:	0092      	lsls	r2, r2, #2
 800b8c2:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	697a      	ldr	r2, [r7, #20]
 800b8ca:	0052      	lsls	r2, r2, #1
 800b8cc:	2103      	movs	r1, #3
 800b8ce:	4091      	lsls	r1, r2
 800b8d0:	000a      	movs	r2, r1
 800b8d2:	43d2      	mvns	r2, r2
 800b8d4:	401a      	ands	r2, r3
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	2101      	movs	r1, #1
 800b8e0:	697a      	ldr	r2, [r7, #20]
 800b8e2:	4091      	lsls	r1, r2
 800b8e4:	000a      	movs	r2, r1
 800b8e6:	43d2      	mvns	r2, r2
 800b8e8:	401a      	ands	r2, r3
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	689b      	ldr	r3, [r3, #8]
 800b8f2:	697a      	ldr	r2, [r7, #20]
 800b8f4:	0052      	lsls	r2, r2, #1
 800b8f6:	2103      	movs	r1, #3
 800b8f8:	4091      	lsls	r1, r2
 800b8fa:	000a      	movs	r2, r1
 800b8fc:	43d2      	mvns	r2, r2
 800b8fe:	401a      	ands	r2, r3
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	609a      	str	r2, [r3, #8]
    }
    position++;
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	3301      	adds	r3, #1
 800b908:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800b90a:	683a      	ldr	r2, [r7, #0]
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	40da      	lsrs	r2, r3
 800b910:	1e13      	subs	r3, r2, #0
 800b912:	d000      	beq.n	800b916 <HAL_GPIO_DeInit+0x19e>
 800b914:	e73c      	b.n	800b790 <HAL_GPIO_DeInit+0x18>
  }
}
 800b916:	46c0      	nop			@ (mov r8, r8)
 800b918:	46c0      	nop			@ (mov r8, r8)
 800b91a:	46bd      	mov	sp, r7
 800b91c:	b006      	add	sp, #24
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	40010000 	.word	0x40010000
 800b924:	50000400 	.word	0x50000400
 800b928:	50000800 	.word	0x50000800
 800b92c:	50000c00 	.word	0x50000c00
 800b930:	50001000 	.word	0x50001000
 800b934:	50001c00 	.word	0x50001c00
 800b938:	40010400 	.word	0x40010400

0800b93c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b084      	sub	sp, #16
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	000a      	movs	r2, r1
 800b946:	1cbb      	adds	r3, r7, #2
 800b948:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	691b      	ldr	r3, [r3, #16]
 800b94e:	1cba      	adds	r2, r7, #2
 800b950:	8812      	ldrh	r2, [r2, #0]
 800b952:	4013      	ands	r3, r2
 800b954:	d004      	beq.n	800b960 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800b956:	230f      	movs	r3, #15
 800b958:	18fb      	adds	r3, r7, r3
 800b95a:	2201      	movs	r2, #1
 800b95c:	701a      	strb	r2, [r3, #0]
 800b95e:	e003      	b.n	800b968 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b960:	230f      	movs	r3, #15
 800b962:	18fb      	adds	r3, r7, r3
 800b964:	2200      	movs	r2, #0
 800b966:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800b968:	230f      	movs	r3, #15
 800b96a:	18fb      	adds	r3, r7, r3
 800b96c:	781b      	ldrb	r3, [r3, #0]
}
 800b96e:	0018      	movs	r0, r3
 800b970:	46bd      	mov	sp, r7
 800b972:	b004      	add	sp, #16
 800b974:	bd80      	pop	{r7, pc}

0800b976 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b976:	b580      	push	{r7, lr}
 800b978:	b082      	sub	sp, #8
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
 800b97e:	0008      	movs	r0, r1
 800b980:	0011      	movs	r1, r2
 800b982:	1cbb      	adds	r3, r7, #2
 800b984:	1c02      	adds	r2, r0, #0
 800b986:	801a      	strh	r2, [r3, #0]
 800b988:	1c7b      	adds	r3, r7, #1
 800b98a:	1c0a      	adds	r2, r1, #0
 800b98c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b98e:	1c7b      	adds	r3, r7, #1
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d004      	beq.n	800b9a0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b996:	1cbb      	adds	r3, r7, #2
 800b998:	881a      	ldrh	r2, [r3, #0]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800b99e:	e003      	b.n	800b9a8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800b9a0:	1cbb      	adds	r3, r7, #2
 800b9a2:	881a      	ldrh	r2, [r3, #0]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800b9a8:	46c0      	nop			@ (mov r8, r8)
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	b002      	add	sp, #8
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d101      	bne.n	800b9c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e082      	b.n	800bac8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2241      	movs	r2, #65	@ 0x41
 800b9c6:	5c9b      	ldrb	r3, [r3, r2]
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d107      	bne.n	800b9de <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2240      	movs	r2, #64	@ 0x40
 800b9d2:	2100      	movs	r1, #0
 800b9d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	0018      	movs	r0, r3
 800b9da:	f7fa fae1 	bl	8005fa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2241      	movs	r2, #65	@ 0x41
 800b9e2:	2124      	movs	r1, #36	@ 0x24
 800b9e4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	681a      	ldr	r2, [r3, #0]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2101      	movs	r1, #1
 800b9f2:	438a      	bics	r2, r1
 800b9f4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	685a      	ldr	r2, [r3, #4]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4934      	ldr	r1, [pc, #208]	@ (800bad0 <HAL_I2C_Init+0x120>)
 800ba00:	400a      	ands	r2, r1
 800ba02:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	689a      	ldr	r2, [r3, #8]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4931      	ldr	r1, [pc, #196]	@ (800bad4 <HAL_I2C_Init+0x124>)
 800ba10:	400a      	ands	r2, r1
 800ba12:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	68db      	ldr	r3, [r3, #12]
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d108      	bne.n	800ba2e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	689a      	ldr	r2, [r3, #8]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2180      	movs	r1, #128	@ 0x80
 800ba26:	0209      	lsls	r1, r1, #8
 800ba28:	430a      	orrs	r2, r1
 800ba2a:	609a      	str	r2, [r3, #8]
 800ba2c:	e007      	b.n	800ba3e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	689a      	ldr	r2, [r3, #8]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	2184      	movs	r1, #132	@ 0x84
 800ba38:	0209      	lsls	r1, r1, #8
 800ba3a:	430a      	orrs	r2, r1
 800ba3c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	68db      	ldr	r3, [r3, #12]
 800ba42:	2b02      	cmp	r3, #2
 800ba44:	d104      	bne.n	800ba50 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	2280      	movs	r2, #128	@ 0x80
 800ba4c:	0112      	lsls	r2, r2, #4
 800ba4e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	685a      	ldr	r2, [r3, #4]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	491f      	ldr	r1, [pc, #124]	@ (800bad8 <HAL_I2C_Init+0x128>)
 800ba5c:	430a      	orrs	r2, r1
 800ba5e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	68da      	ldr	r2, [r3, #12]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	491a      	ldr	r1, [pc, #104]	@ (800bad4 <HAL_I2C_Init+0x124>)
 800ba6c:	400a      	ands	r2, r1
 800ba6e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	691a      	ldr	r2, [r3, #16]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	695b      	ldr	r3, [r3, #20]
 800ba78:	431a      	orrs	r2, r3
 800ba7a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	699b      	ldr	r3, [r3, #24]
 800ba80:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	430a      	orrs	r2, r1
 800ba88:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	69d9      	ldr	r1, [r3, #28]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6a1a      	ldr	r2, [r3, #32]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	430a      	orrs	r2, r1
 800ba98:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2101      	movs	r1, #1
 800baa6:	430a      	orrs	r2, r1
 800baa8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2200      	movs	r2, #0
 800baae:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2241      	movs	r2, #65	@ 0x41
 800bab4:	2120      	movs	r1, #32
 800bab6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2200      	movs	r2, #0
 800babc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2242      	movs	r2, #66	@ 0x42
 800bac2:	2100      	movs	r1, #0
 800bac4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bac6:	2300      	movs	r3, #0
}
 800bac8:	0018      	movs	r0, r3
 800baca:	46bd      	mov	sp, r7
 800bacc:	b002      	add	sp, #8
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	f0ffffff 	.word	0xf0ffffff
 800bad4:	ffff7fff 	.word	0xffff7fff
 800bad8:	02008000 	.word	0x02008000

0800badc <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800badc:	b5b0      	push	{r4, r5, r7, lr}
 800bade:	b088      	sub	sp, #32
 800bae0:	af02      	add	r7, sp, #8
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	0008      	movs	r0, r1
 800bae6:	607a      	str	r2, [r7, #4]
 800bae8:	0019      	movs	r1, r3
 800baea:	230a      	movs	r3, #10
 800baec:	18fb      	adds	r3, r7, r3
 800baee:	1c02      	adds	r2, r0, #0
 800baf0:	801a      	strh	r2, [r3, #0]
 800baf2:	2308      	movs	r3, #8
 800baf4:	18fb      	adds	r3, r7, r3
 800baf6:	1c0a      	adds	r2, r1, #0
 800baf8:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2241      	movs	r2, #65	@ 0x41
 800bafe:	5c9b      	ldrb	r3, [r3, r2]
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	2b20      	cmp	r3, #32
 800bb04:	d000      	beq.n	800bb08 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800bb06:	e0dd      	b.n	800bcc4 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	699a      	ldr	r2, [r3, #24]
 800bb0e:	2380      	movs	r3, #128	@ 0x80
 800bb10:	021b      	lsls	r3, r3, #8
 800bb12:	401a      	ands	r2, r3
 800bb14:	2380      	movs	r3, #128	@ 0x80
 800bb16:	021b      	lsls	r3, r3, #8
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d101      	bne.n	800bb20 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800bb1c:	2302      	movs	r3, #2
 800bb1e:	e0d2      	b.n	800bcc6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2240      	movs	r2, #64	@ 0x40
 800bb24:	5c9b      	ldrb	r3, [r3, r2]
 800bb26:	2b01      	cmp	r3, #1
 800bb28:	d101      	bne.n	800bb2e <HAL_I2C_Master_Transmit_DMA+0x52>
 800bb2a:	2302      	movs	r3, #2
 800bb2c:	e0cb      	b.n	800bcc6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2240      	movs	r2, #64	@ 0x40
 800bb32:	2101      	movs	r1, #1
 800bb34:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2241      	movs	r2, #65	@ 0x41
 800bb3a:	2121      	movs	r1, #33	@ 0x21
 800bb3c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2242      	movs	r2, #66	@ 0x42
 800bb42:	2110      	movs	r1, #16
 800bb44:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	687a      	ldr	r2, [r7, #4]
 800bb50:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2208      	movs	r2, #8
 800bb56:	18ba      	adds	r2, r7, r2
 800bb58:	8812      	ldrh	r2, [r2, #0]
 800bb5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	4a5c      	ldr	r2, [pc, #368]	@ (800bcd0 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800bb60:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	4a5b      	ldr	r2, [pc, #364]	@ (800bcd4 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800bb66:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb6c:	b29b      	uxth	r3, r3
 800bb6e:	2bff      	cmp	r3, #255	@ 0xff
 800bb70:	d906      	bls.n	800bb80 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	22ff      	movs	r2, #255	@ 0xff
 800bb76:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800bb78:	2380      	movs	r3, #128	@ 0x80
 800bb7a:	045b      	lsls	r3, r3, #17
 800bb7c:	617b      	str	r3, [r7, #20]
 800bb7e:	e007      	b.n	800bb90 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb84:	b29a      	uxth	r2, r3
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800bb8a:	2380      	movs	r3, #128	@ 0x80
 800bb8c:	049b      	lsls	r3, r3, #18
 800bb8e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d100      	bne.n	800bb9a <HAL_I2C_Master_Transmit_DMA+0xbe>
 800bb98:	e078      	b.n	800bc8c <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d023      	beq.n	800bbea <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bba6:	4a4c      	ldr	r2, [pc, #304]	@ (800bcd8 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800bba8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbae:	4a4b      	ldr	r2, [pc, #300]	@ (800bcdc <HAL_I2C_Master_Transmit_DMA+0x200>)
 800bbb0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800bbc6:	6879      	ldr	r1, [r7, #4]
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	3328      	adds	r3, #40	@ 0x28
 800bbce:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800bbd4:	2513      	movs	r5, #19
 800bbd6:	197c      	adds	r4, r7, r5
 800bbd8:	f7ff f8ac 	bl	800ad34 <HAL_DMA_Start_IT>
 800bbdc:	0003      	movs	r3, r0
 800bbde:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800bbe0:	197b      	adds	r3, r7, r5
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d13d      	bne.n	800bc64 <HAL_I2C_Master_Transmit_DMA+0x188>
 800bbe8:	e013      	b.n	800bc12 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2241      	movs	r2, #65	@ 0x41
 800bbee:	2120      	movs	r1, #32
 800bbf0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2242      	movs	r2, #66	@ 0x42
 800bbf6:	2100      	movs	r1, #0
 800bbf8:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbfe:	2280      	movs	r2, #128	@ 0x80
 800bc00:	431a      	orrs	r2, r3
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	2240      	movs	r2, #64	@ 0x40
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800bc0e:	2301      	movs	r3, #1
 800bc10:	e059      	b.n	800bcc6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc16:	b2da      	uxtb	r2, r3
 800bc18:	697c      	ldr	r4, [r7, #20]
 800bc1a:	230a      	movs	r3, #10
 800bc1c:	18fb      	adds	r3, r7, r3
 800bc1e:	8819      	ldrh	r1, [r3, #0]
 800bc20:	68f8      	ldr	r0, [r7, #12]
 800bc22:	4b2f      	ldr	r3, [pc, #188]	@ (800bce0 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800bc24:	9300      	str	r3, [sp, #0]
 800bc26:	0023      	movs	r3, r4
 800bc28:	f001 fd0e 	bl	800d648 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc30:	b29a      	uxth	r2, r3
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc36:	1ad3      	subs	r3, r2, r3
 800bc38:	b29a      	uxth	r2, r3
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2240      	movs	r2, #64	@ 0x40
 800bc42:	2100      	movs	r1, #0
 800bc44:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2110      	movs	r1, #16
 800bc4a:	0018      	movs	r0, r3
 800bc4c:	f001 fd36 	bl	800d6bc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	2180      	movs	r1, #128	@ 0x80
 800bc5c:	01c9      	lsls	r1, r1, #7
 800bc5e:	430a      	orrs	r2, r1
 800bc60:	601a      	str	r2, [r3, #0]
 800bc62:	e02d      	b.n	800bcc0 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2241      	movs	r2, #65	@ 0x41
 800bc68:	2120      	movs	r1, #32
 800bc6a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2242      	movs	r2, #66	@ 0x42
 800bc70:	2100      	movs	r1, #0
 800bc72:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc78:	2210      	movs	r2, #16
 800bc7a:	431a      	orrs	r2, r3
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2240      	movs	r2, #64	@ 0x40
 800bc84:	2100      	movs	r1, #0
 800bc86:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800bc88:	2301      	movs	r3, #1
 800bc8a:	e01c      	b.n	800bcc6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	4a15      	ldr	r2, [pc, #84]	@ (800bce4 <HAL_I2C_Master_Transmit_DMA+0x208>)
 800bc90:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc96:	b2da      	uxtb	r2, r3
 800bc98:	2380      	movs	r3, #128	@ 0x80
 800bc9a:	049c      	lsls	r4, r3, #18
 800bc9c:	230a      	movs	r3, #10
 800bc9e:	18fb      	adds	r3, r7, r3
 800bca0:	8819      	ldrh	r1, [r3, #0]
 800bca2:	68f8      	ldr	r0, [r7, #12]
 800bca4:	4b0e      	ldr	r3, [pc, #56]	@ (800bce0 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800bca6:	9300      	str	r3, [sp, #0]
 800bca8:	0023      	movs	r3, r4
 800bcaa:	f001 fccd 	bl	800d648 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2240      	movs	r2, #64	@ 0x40
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2101      	movs	r1, #1
 800bcba:	0018      	movs	r0, r3
 800bcbc:	f001 fcfe 	bl	800d6bc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	e000      	b.n	800bcc6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800bcc4:	2302      	movs	r3, #2
  }
}
 800bcc6:	0018      	movs	r0, r3
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	b006      	add	sp, #24
 800bccc:	bdb0      	pop	{r4, r5, r7, pc}
 800bcce:	46c0      	nop			@ (mov r8, r8)
 800bcd0:	ffff0000 	.word	0xffff0000
 800bcd4:	0800c4e1 	.word	0x0800c4e1
 800bcd8:	0800d499 	.word	0x0800d499
 800bcdc:	0800d5d9 	.word	0x0800d5d9
 800bce0:	80002000 	.word	0x80002000
 800bce4:	0800c08d 	.word	0x0800c08d

0800bce8 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800bce8:	b5b0      	push	{r4, r5, r7, lr}
 800bcea:	b088      	sub	sp, #32
 800bcec:	af02      	add	r7, sp, #8
 800bcee:	60f8      	str	r0, [r7, #12]
 800bcf0:	0008      	movs	r0, r1
 800bcf2:	607a      	str	r2, [r7, #4]
 800bcf4:	0019      	movs	r1, r3
 800bcf6:	230a      	movs	r3, #10
 800bcf8:	18fb      	adds	r3, r7, r3
 800bcfa:	1c02      	adds	r2, r0, #0
 800bcfc:	801a      	strh	r2, [r3, #0]
 800bcfe:	2308      	movs	r3, #8
 800bd00:	18fb      	adds	r3, r7, r3
 800bd02:	1c0a      	adds	r2, r1, #0
 800bd04:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2241      	movs	r2, #65	@ 0x41
 800bd0a:	5c9b      	ldrb	r3, [r3, r2]
 800bd0c:	b2db      	uxtb	r3, r3
 800bd0e:	2b20      	cmp	r3, #32
 800bd10:	d000      	beq.n	800bd14 <HAL_I2C_Master_Receive_DMA+0x2c>
 800bd12:	e0dd      	b.n	800bed0 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	699a      	ldr	r2, [r3, #24]
 800bd1a:	2380      	movs	r3, #128	@ 0x80
 800bd1c:	021b      	lsls	r3, r3, #8
 800bd1e:	401a      	ands	r2, r3
 800bd20:	2380      	movs	r3, #128	@ 0x80
 800bd22:	021b      	lsls	r3, r3, #8
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d101      	bne.n	800bd2c <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800bd28:	2302      	movs	r3, #2
 800bd2a:	e0d2      	b.n	800bed2 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	2240      	movs	r2, #64	@ 0x40
 800bd30:	5c9b      	ldrb	r3, [r3, r2]
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d101      	bne.n	800bd3a <HAL_I2C_Master_Receive_DMA+0x52>
 800bd36:	2302      	movs	r3, #2
 800bd38:	e0cb      	b.n	800bed2 <HAL_I2C_Master_Receive_DMA+0x1ea>
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2240      	movs	r2, #64	@ 0x40
 800bd3e:	2101      	movs	r1, #1
 800bd40:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2241      	movs	r2, #65	@ 0x41
 800bd46:	2122      	movs	r1, #34	@ 0x22
 800bd48:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2242      	movs	r2, #66	@ 0x42
 800bd4e:	2110      	movs	r1, #16
 800bd50:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2200      	movs	r2, #0
 800bd56:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2208      	movs	r2, #8
 800bd62:	18ba      	adds	r2, r7, r2
 800bd64:	8812      	ldrh	r2, [r2, #0]
 800bd66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	4a5c      	ldr	r2, [pc, #368]	@ (800bedc <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800bd6c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	4a5b      	ldr	r2, [pc, #364]	@ (800bee0 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800bd72:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	2bff      	cmp	r3, #255	@ 0xff
 800bd7c:	d906      	bls.n	800bd8c <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	22ff      	movs	r2, #255	@ 0xff
 800bd82:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800bd84:	2380      	movs	r3, #128	@ 0x80
 800bd86:	045b      	lsls	r3, r3, #17
 800bd88:	617b      	str	r3, [r7, #20]
 800bd8a:	e007      	b.n	800bd9c <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd90:	b29a      	uxth	r2, r3
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800bd96:	2380      	movs	r3, #128	@ 0x80
 800bd98:	049b      	lsls	r3, r3, #18
 800bd9a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d100      	bne.n	800bda6 <HAL_I2C_Master_Receive_DMA+0xbe>
 800bda4:	e078      	b.n	800be98 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d023      	beq.n	800bdf6 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdb2:	4a4c      	ldr	r2, [pc, #304]	@ (800bee4 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800bdb4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdba:	4a4b      	ldr	r2, [pc, #300]	@ (800bee8 <HAL_I2C_Master_Receive_DMA+0x200>)
 800bdbc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdca:	2200      	movs	r2, #0
 800bdcc:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	3324      	adds	r3, #36	@ 0x24
 800bdd8:	0019      	movs	r1, r3
 800bdda:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800bde0:	2513      	movs	r5, #19
 800bde2:	197c      	adds	r4, r7, r5
 800bde4:	f7fe ffa6 	bl	800ad34 <HAL_DMA_Start_IT>
 800bde8:	0003      	movs	r3, r0
 800bdea:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800bdec:	197b      	adds	r3, r7, r5
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d13d      	bne.n	800be70 <HAL_I2C_Master_Receive_DMA+0x188>
 800bdf4:	e013      	b.n	800be1e <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2241      	movs	r2, #65	@ 0x41
 800bdfa:	2120      	movs	r1, #32
 800bdfc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2242      	movs	r2, #66	@ 0x42
 800be02:	2100      	movs	r1, #0
 800be04:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be0a:	2280      	movs	r2, #128	@ 0x80
 800be0c:	431a      	orrs	r2, r3
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2240      	movs	r2, #64	@ 0x40
 800be16:	2100      	movs	r1, #0
 800be18:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800be1a:	2301      	movs	r3, #1
 800be1c:	e059      	b.n	800bed2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be22:	b2da      	uxtb	r2, r3
 800be24:	697c      	ldr	r4, [r7, #20]
 800be26:	230a      	movs	r3, #10
 800be28:	18fb      	adds	r3, r7, r3
 800be2a:	8819      	ldrh	r1, [r3, #0]
 800be2c:	68f8      	ldr	r0, [r7, #12]
 800be2e:	4b2f      	ldr	r3, [pc, #188]	@ (800beec <HAL_I2C_Master_Receive_DMA+0x204>)
 800be30:	9300      	str	r3, [sp, #0]
 800be32:	0023      	movs	r3, r4
 800be34:	f001 fc08 	bl	800d648 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be3c:	b29a      	uxth	r2, r3
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800be42:	1ad3      	subs	r3, r2, r3
 800be44:	b29a      	uxth	r2, r3
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2240      	movs	r2, #64	@ 0x40
 800be4e:	2100      	movs	r1, #0
 800be50:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	2110      	movs	r1, #16
 800be56:	0018      	movs	r0, r3
 800be58:	f001 fc30 	bl	800d6bc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	681a      	ldr	r2, [r3, #0]
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	2180      	movs	r1, #128	@ 0x80
 800be68:	0209      	lsls	r1, r1, #8
 800be6a:	430a      	orrs	r2, r1
 800be6c:	601a      	str	r2, [r3, #0]
 800be6e:	e02d      	b.n	800becc <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2241      	movs	r2, #65	@ 0x41
 800be74:	2120      	movs	r1, #32
 800be76:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	2242      	movs	r2, #66	@ 0x42
 800be7c:	2100      	movs	r1, #0
 800be7e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be84:	2210      	movs	r2, #16
 800be86:	431a      	orrs	r2, r3
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2240      	movs	r2, #64	@ 0x40
 800be90:	2100      	movs	r1, #0
 800be92:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800be94:	2301      	movs	r3, #1
 800be96:	e01c      	b.n	800bed2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	4a15      	ldr	r2, [pc, #84]	@ (800bef0 <HAL_I2C_Master_Receive_DMA+0x208>)
 800be9c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bea2:	b2da      	uxtb	r2, r3
 800bea4:	2380      	movs	r3, #128	@ 0x80
 800bea6:	049c      	lsls	r4, r3, #18
 800bea8:	230a      	movs	r3, #10
 800beaa:	18fb      	adds	r3, r7, r3
 800beac:	8819      	ldrh	r1, [r3, #0]
 800beae:	68f8      	ldr	r0, [r7, #12]
 800beb0:	4b0e      	ldr	r3, [pc, #56]	@ (800beec <HAL_I2C_Master_Receive_DMA+0x204>)
 800beb2:	9300      	str	r3, [sp, #0]
 800beb4:	0023      	movs	r3, r4
 800beb6:	f001 fbc7 	bl	800d648 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2240      	movs	r2, #64	@ 0x40
 800bebe:	2100      	movs	r1, #0
 800bec0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2101      	movs	r1, #1
 800bec6:	0018      	movs	r0, r3
 800bec8:	f001 fbf8 	bl	800d6bc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800becc:	2300      	movs	r3, #0
 800bece:	e000      	b.n	800bed2 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800bed0:	2302      	movs	r3, #2
  }
}
 800bed2:	0018      	movs	r0, r3
 800bed4:	46bd      	mov	sp, r7
 800bed6:	b006      	add	sp, #24
 800bed8:	bdb0      	pop	{r4, r5, r7, pc}
 800beda:	46c0      	nop			@ (mov r8, r8)
 800bedc:	ffff0000 	.word	0xffff0000
 800bee0:	0800c4e1 	.word	0x0800c4e1
 800bee4:	0800d539 	.word	0x0800d539
 800bee8:	0800d5d9 	.word	0x0800d5d9
 800beec:	80002400 	.word	0x80002400
 800bef0:	0800c08d 	.word	0x0800c08d

0800bef4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	699b      	ldr	r3, [r3, #24]
 800bf02:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d005      	beq.n	800bf20 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf18:	68ba      	ldr	r2, [r7, #8]
 800bf1a:	68f9      	ldr	r1, [r7, #12]
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	4798      	blx	r3
  }
}
 800bf20:	46c0      	nop			@ (mov r8, r8)
 800bf22:	46bd      	mov	sp, r7
 800bf24:	b004      	add	sp, #16
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b086      	sub	sp, #24
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	699b      	ldr	r3, [r3, #24]
 800bf36:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800bf40:	697a      	ldr	r2, [r7, #20]
 800bf42:	2380      	movs	r3, #128	@ 0x80
 800bf44:	005b      	lsls	r3, r3, #1
 800bf46:	4013      	ands	r3, r2
 800bf48:	d00e      	beq.n	800bf68 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	2280      	movs	r2, #128	@ 0x80
 800bf4e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800bf50:	d00a      	beq.n	800bf68 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf56:	2201      	movs	r2, #1
 800bf58:	431a      	orrs	r2, r3
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	2280      	movs	r2, #128	@ 0x80
 800bf64:	0052      	lsls	r2, r2, #1
 800bf66:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800bf68:	697a      	ldr	r2, [r7, #20]
 800bf6a:	2380      	movs	r3, #128	@ 0x80
 800bf6c:	00db      	lsls	r3, r3, #3
 800bf6e:	4013      	ands	r3, r2
 800bf70:	d00e      	beq.n	800bf90 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	2280      	movs	r2, #128	@ 0x80
 800bf76:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800bf78:	d00a      	beq.n	800bf90 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf7e:	2208      	movs	r2, #8
 800bf80:	431a      	orrs	r2, r3
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2280      	movs	r2, #128	@ 0x80
 800bf8c:	00d2      	lsls	r2, r2, #3
 800bf8e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800bf90:	697a      	ldr	r2, [r7, #20]
 800bf92:	2380      	movs	r3, #128	@ 0x80
 800bf94:	009b      	lsls	r3, r3, #2
 800bf96:	4013      	ands	r3, r2
 800bf98:	d00e      	beq.n	800bfb8 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	2280      	movs	r2, #128	@ 0x80
 800bf9e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800bfa0:	d00a      	beq.n	800bfb8 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfa6:	2202      	movs	r2, #2
 800bfa8:	431a      	orrs	r2, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	2280      	movs	r2, #128	@ 0x80
 800bfb4:	0092      	lsls	r2, r2, #2
 800bfb6:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfbc:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	220b      	movs	r2, #11
 800bfc2:	4013      	ands	r3, r2
 800bfc4:	d005      	beq.n	800bfd2 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800bfc6:	68fa      	ldr	r2, [r7, #12]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	0011      	movs	r1, r2
 800bfcc:	0018      	movs	r0, r3
 800bfce:	f001 f915 	bl	800d1fc <I2C_ITError>
  }
}
 800bfd2:	46c0      	nop			@ (mov r8, r8)
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	b006      	add	sp, #24
 800bfd8:	bd80      	pop	{r7, pc}

0800bfda <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b082      	sub	sp, #8
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800bfe2:	46c0      	nop			@ (mov r8, r8)
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	b002      	add	sp, #8
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b082      	sub	sp, #8
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800bff2:	46c0      	nop			@ (mov r8, r8)
 800bff4:	46bd      	mov	sp, r7
 800bff6:	b002      	add	sp, #8
 800bff8:	bd80      	pop	{r7, pc}

0800bffa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bffa:	b580      	push	{r7, lr}
 800bffc:	b082      	sub	sp, #8
 800bffe:	af00      	add	r7, sp, #0
 800c000:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c002:	46c0      	nop			@ (mov r8, r8)
 800c004:	46bd      	mov	sp, r7
 800c006:	b002      	add	sp, #8
 800c008:	bd80      	pop	{r7, pc}

0800c00a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c00a:	b580      	push	{r7, lr}
 800c00c:	b082      	sub	sp, #8
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c012:	46c0      	nop			@ (mov r8, r8)
 800c014:	46bd      	mov	sp, r7
 800c016:	b002      	add	sp, #8
 800c018:	bd80      	pop	{r7, pc}

0800c01a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800c01a:	b580      	push	{r7, lr}
 800c01c:	b082      	sub	sp, #8
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]
 800c022:	0008      	movs	r0, r1
 800c024:	0011      	movs	r1, r2
 800c026:	1cfb      	adds	r3, r7, #3
 800c028:	1c02      	adds	r2, r0, #0
 800c02a:	701a      	strb	r2, [r3, #0]
 800c02c:	003b      	movs	r3, r7
 800c02e:	1c0a      	adds	r2, r1, #0
 800c030:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800c032:	46c0      	nop			@ (mov r8, r8)
 800c034:	46bd      	mov	sp, r7
 800c036:	b002      	add	sp, #8
 800c038:	bd80      	pop	{r7, pc}

0800c03a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c03a:	b580      	push	{r7, lr}
 800c03c:	b082      	sub	sp, #8
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800c042:	46c0      	nop			@ (mov r8, r8)
 800c044:	46bd      	mov	sp, r7
 800c046:	b002      	add	sp, #8
 800c048:	bd80      	pop	{r7, pc}

0800c04a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c04a:	b580      	push	{r7, lr}
 800c04c:	b082      	sub	sp, #8
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800c052:	46c0      	nop			@ (mov r8, r8)
 800c054:	46bd      	mov	sp, r7
 800c056:	b002      	add	sp, #8
 800c058:	bd80      	pop	{r7, pc}

0800c05a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b082      	sub	sp, #8
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800c062:	46c0      	nop			@ (mov r8, r8)
 800c064:	46bd      	mov	sp, r7
 800c066:	b002      	add	sp, #8
 800c068:	bd80      	pop	{r7, pc}

0800c06a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c06a:	b580      	push	{r7, lr}
 800c06c:	b082      	sub	sp, #8
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c072:	46c0      	nop			@ (mov r8, r8)
 800c074:	46bd      	mov	sp, r7
 800c076:	b002      	add	sp, #8
 800c078:	bd80      	pop	{r7, pc}

0800c07a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c07a:	b580      	push	{r7, lr}
 800c07c:	b082      	sub	sp, #8
 800c07e:	af00      	add	r7, sp, #0
 800c080:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c082:	46c0      	nop			@ (mov r8, r8)
 800c084:	46bd      	mov	sp, r7
 800c086:	b002      	add	sp, #8
 800c088:	bd80      	pop	{r7, pc}
	...

0800c08c <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c08c:	b590      	push	{r4, r7, lr}
 800c08e:	b089      	sub	sp, #36	@ 0x24
 800c090:	af02      	add	r7, sp, #8
 800c092:	60f8      	str	r0, [r7, #12]
 800c094:	60b9      	str	r1, [r7, #8]
 800c096:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2240      	movs	r2, #64	@ 0x40
 800c0a0:	5c9b      	ldrb	r3, [r3, r2]
 800c0a2:	2b01      	cmp	r3, #1
 800c0a4:	d101      	bne.n	800c0aa <I2C_Master_ISR_IT+0x1e>
 800c0a6:	2302      	movs	r3, #2
 800c0a8:	e113      	b.n	800c2d2 <I2C_Master_ISR_IT+0x246>
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2240      	movs	r2, #64	@ 0x40
 800c0ae:	2101      	movs	r1, #1
 800c0b0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	2210      	movs	r2, #16
 800c0b6:	4013      	ands	r3, r2
 800c0b8:	d012      	beq.n	800c0e0 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2210      	movs	r2, #16
 800c0be:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c0c0:	d00e      	beq.n	800c0e0 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	2210      	movs	r2, #16
 800c0c8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0ce:	2204      	movs	r2, #4
 800c0d0:	431a      	orrs	r2, r3
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	0018      	movs	r0, r3
 800c0da:	f001 f9ba 	bl	800d452 <I2C_Flush_TXDR>
 800c0de:	e0e5      	b.n	800c2ac <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	2204      	movs	r2, #4
 800c0e4:	4013      	ands	r3, r2
 800c0e6:	d021      	beq.n	800c12c <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2204      	movs	r2, #4
 800c0ec:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c0ee:	d01d      	beq.n	800c12c <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	2204      	movs	r2, #4
 800c0f4:	4393      	bics	r3, r2
 800c0f6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c102:	b2d2      	uxtb	r2, r2
 800c104:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c10a:	1c5a      	adds	r2, r3, #1
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c114:	3b01      	subs	r3, #1
 800c116:	b29a      	uxth	r2, r3
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c120:	b29b      	uxth	r3, r3
 800c122:	3b01      	subs	r3, #1
 800c124:	b29a      	uxth	r2, r3
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c12a:	e0bf      	b.n	800c2ac <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	2202      	movs	r2, #2
 800c130:	4013      	ands	r3, r2
 800c132:	d01c      	beq.n	800c16e <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2202      	movs	r2, #2
 800c138:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c13a:	d018      	beq.n	800c16e <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c140:	781a      	ldrb	r2, [r3, #0]
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c14c:	1c5a      	adds	r2, r3, #1
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c156:	3b01      	subs	r3, #1
 800c158:	b29a      	uxth	r2, r3
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c162:	b29b      	uxth	r3, r3
 800c164:	3b01      	subs	r3, #1
 800c166:	b29a      	uxth	r2, r3
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c16c:	e09e      	b.n	800c2ac <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	2280      	movs	r2, #128	@ 0x80
 800c172:	4013      	ands	r3, r2
 800c174:	d100      	bne.n	800c178 <I2C_Master_ISR_IT+0xec>
 800c176:	e069      	b.n	800c24c <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2240      	movs	r2, #64	@ 0x40
 800c17c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800c17e:	d065      	beq.n	800c24c <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c184:	b29b      	uxth	r3, r3
 800c186:	2b00      	cmp	r3, #0
 800c188:	d04a      	beq.n	800c220 <I2C_Master_ISR_IT+0x194>
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d146      	bne.n	800c220 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	685b      	ldr	r3, [r3, #4]
 800c198:	b29a      	uxth	r2, r3
 800c19a:	2112      	movs	r1, #18
 800c19c:	187b      	adds	r3, r7, r1
 800c19e:	0592      	lsls	r2, r2, #22
 800c1a0:	0d92      	lsrs	r2, r2, #22
 800c1a2:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	2bff      	cmp	r3, #255	@ 0xff
 800c1ac:	d910      	bls.n	800c1d0 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	22ff      	movs	r2, #255	@ 0xff
 800c1b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1b8:	b2da      	uxtb	r2, r3
 800c1ba:	2380      	movs	r3, #128	@ 0x80
 800c1bc:	045c      	lsls	r4, r3, #17
 800c1be:	187b      	adds	r3, r7, r1
 800c1c0:	8819      	ldrh	r1, [r3, #0]
 800c1c2:	68f8      	ldr	r0, [r7, #12]
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	9300      	str	r3, [sp, #0]
 800c1c8:	0023      	movs	r3, r4
 800c1ca:	f001 fa3d 	bl	800d648 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c1ce:	e03c      	b.n	800c24a <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c1d4:	b29a      	uxth	r2, r3
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1de:	4a3f      	ldr	r2, [pc, #252]	@ (800c2dc <I2C_Master_ISR_IT+0x250>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d00e      	beq.n	800c202 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c1e8:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800c1ee:	2312      	movs	r3, #18
 800c1f0:	18fb      	adds	r3, r7, r3
 800c1f2:	8819      	ldrh	r1, [r3, #0]
 800c1f4:	68f8      	ldr	r0, [r7, #12]
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	9300      	str	r3, [sp, #0]
 800c1fa:	0023      	movs	r3, r4
 800c1fc:	f001 fa24 	bl	800d648 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c200:	e023      	b.n	800c24a <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c206:	b2da      	uxtb	r2, r3
 800c208:	2380      	movs	r3, #128	@ 0x80
 800c20a:	049c      	lsls	r4, r3, #18
 800c20c:	2312      	movs	r3, #18
 800c20e:	18fb      	adds	r3, r7, r3
 800c210:	8819      	ldrh	r1, [r3, #0]
 800c212:	68f8      	ldr	r0, [r7, #12]
 800c214:	2300      	movs	r3, #0
 800c216:	9300      	str	r3, [sp, #0]
 800c218:	0023      	movs	r3, r4
 800c21a:	f001 fa15 	bl	800d648 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c21e:	e014      	b.n	800c24a <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	685a      	ldr	r2, [r3, #4]
 800c226:	2380      	movs	r3, #128	@ 0x80
 800c228:	049b      	lsls	r3, r3, #18
 800c22a:	401a      	ands	r2, r3
 800c22c:	2380      	movs	r3, #128	@ 0x80
 800c22e:	049b      	lsls	r3, r3, #18
 800c230:	429a      	cmp	r2, r3
 800c232:	d004      	beq.n	800c23e <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	0018      	movs	r0, r3
 800c238:	f000 fcf4 	bl	800cc24 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c23c:	e036      	b.n	800c2ac <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2140      	movs	r1, #64	@ 0x40
 800c242:	0018      	movs	r0, r3
 800c244:	f000 ffda 	bl	800d1fc <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c248:	e030      	b.n	800c2ac <I2C_Master_ISR_IT+0x220>
 800c24a:	e02f      	b.n	800c2ac <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	2240      	movs	r2, #64	@ 0x40
 800c250:	4013      	ands	r3, r2
 800c252:	d02b      	beq.n	800c2ac <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2240      	movs	r2, #64	@ 0x40
 800c258:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800c25a:	d027      	beq.n	800c2ac <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c260:	b29b      	uxth	r3, r3
 800c262:	2b00      	cmp	r3, #0
 800c264:	d11d      	bne.n	800c2a2 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	685a      	ldr	r2, [r3, #4]
 800c26c:	2380      	movs	r3, #128	@ 0x80
 800c26e:	049b      	lsls	r3, r3, #18
 800c270:	401a      	ands	r2, r3
 800c272:	2380      	movs	r3, #128	@ 0x80
 800c274:	049b      	lsls	r3, r3, #18
 800c276:	429a      	cmp	r2, r3
 800c278:	d018      	beq.n	800c2ac <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c27e:	4a17      	ldr	r2, [pc, #92]	@ (800c2dc <I2C_Master_ISR_IT+0x250>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d109      	bne.n	800c298 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	685a      	ldr	r2, [r3, #4]
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	2180      	movs	r1, #128	@ 0x80
 800c290:	01c9      	lsls	r1, r1, #7
 800c292:	430a      	orrs	r2, r1
 800c294:	605a      	str	r2, [r3, #4]
 800c296:	e009      	b.n	800c2ac <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	0018      	movs	r0, r3
 800c29c:	f000 fcc2 	bl	800cc24 <I2C_ITMasterSeqCplt>
 800c2a0:	e004      	b.n	800c2ac <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2140      	movs	r1, #64	@ 0x40
 800c2a6:	0018      	movs	r0, r3
 800c2a8:	f000 ffa8 	bl	800d1fc <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	2220      	movs	r2, #32
 800c2b0:	4013      	ands	r3, r2
 800c2b2:	d009      	beq.n	800c2c8 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2220      	movs	r2, #32
 800c2b8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c2ba:	d005      	beq.n	800c2c8 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800c2bc:	697a      	ldr	r2, [r7, #20]
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	0011      	movs	r1, r2
 800c2c2:	0018      	movs	r0, r3
 800c2c4:	f000 fd54 	bl	800cd70 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	2240      	movs	r2, #64	@ 0x40
 800c2cc:	2100      	movs	r1, #0
 800c2ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c2d0:	2300      	movs	r3, #0
}
 800c2d2:	0018      	movs	r0, r3
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	b007      	add	sp, #28
 800c2d8:	bd90      	pop	{r4, r7, pc}
 800c2da:	46c0      	nop			@ (mov r8, r8)
 800c2dc:	ffff0000 	.word	0xffff0000

0800c2e0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b086      	sub	sp, #24
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	60f8      	str	r0, [r7, #12]
 800c2e8:	60b9      	str	r1, [r7, #8]
 800c2ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2240      	movs	r2, #64	@ 0x40
 800c2fa:	5c9b      	ldrb	r3, [r3, r2]
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d101      	bne.n	800c304 <I2C_Slave_ISR_IT+0x24>
 800c300:	2302      	movs	r3, #2
 800c302:	e0e6      	b.n	800c4d2 <I2C_Slave_ISR_IT+0x1f2>
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2240      	movs	r2, #64	@ 0x40
 800c308:	2101      	movs	r1, #1
 800c30a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	2220      	movs	r2, #32
 800c310:	4013      	ands	r3, r2
 800c312:	d009      	beq.n	800c328 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2220      	movs	r2, #32
 800c318:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c31a:	d005      	beq.n	800c328 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800c31c:	693a      	ldr	r2, [r7, #16]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	0011      	movs	r1, r2
 800c322:	0018      	movs	r0, r3
 800c324:	f000 fdf2 	bl	800cf0c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	2210      	movs	r2, #16
 800c32c:	4013      	ands	r3, r2
 800c32e:	d052      	beq.n	800c3d6 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2210      	movs	r2, #16
 800c334:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c336:	d04e      	beq.n	800c3d6 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d12d      	bne.n	800c39e <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2241      	movs	r2, #65	@ 0x41
 800c346:	5c9b      	ldrb	r3, [r3, r2]
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	2b28      	cmp	r3, #40	@ 0x28
 800c34c:	d10b      	bne.n	800c366 <I2C_Slave_ISR_IT+0x86>
 800c34e:	697a      	ldr	r2, [r7, #20]
 800c350:	2380      	movs	r3, #128	@ 0x80
 800c352:	049b      	lsls	r3, r3, #18
 800c354:	429a      	cmp	r2, r3
 800c356:	d106      	bne.n	800c366 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c358:	693a      	ldr	r2, [r7, #16]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	0011      	movs	r1, r2
 800c35e:	0018      	movs	r0, r3
 800c360:	f000 fef4 	bl	800d14c <I2C_ITListenCplt>
 800c364:	e036      	b.n	800c3d4 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2241      	movs	r2, #65	@ 0x41
 800c36a:	5c9b      	ldrb	r3, [r3, r2]
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	2b29      	cmp	r3, #41	@ 0x29
 800c370:	d110      	bne.n	800c394 <I2C_Slave_ISR_IT+0xb4>
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	4a59      	ldr	r2, [pc, #356]	@ (800c4dc <I2C_Slave_ISR_IT+0x1fc>)
 800c376:	4293      	cmp	r3, r2
 800c378:	d00c      	beq.n	800c394 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	2210      	movs	r2, #16
 800c380:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	0018      	movs	r0, r3
 800c386:	f001 f864 	bl	800d452 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	0018      	movs	r0, r3
 800c38e:	f000 fc8b 	bl	800cca8 <I2C_ITSlaveSeqCplt>
 800c392:	e01f      	b.n	800c3d4 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	2210      	movs	r2, #16
 800c39a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800c39c:	e091      	b.n	800c4c2 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	2210      	movs	r2, #16
 800c3a4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3aa:	2204      	movs	r2, #4
 800c3ac:	431a      	orrs	r2, r3
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d005      	beq.n	800c3c4 <I2C_Slave_ISR_IT+0xe4>
 800c3b8:	697a      	ldr	r2, [r7, #20]
 800c3ba:	2380      	movs	r3, #128	@ 0x80
 800c3bc:	045b      	lsls	r3, r3, #17
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d000      	beq.n	800c3c4 <I2C_Slave_ISR_IT+0xe4>
 800c3c2:	e07e      	b.n	800c4c2 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	0011      	movs	r1, r2
 800c3cc:	0018      	movs	r0, r3
 800c3ce:	f000 ff15 	bl	800d1fc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c3d2:	e076      	b.n	800c4c2 <I2C_Slave_ISR_IT+0x1e2>
 800c3d4:	e075      	b.n	800c4c2 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c3d6:	693b      	ldr	r3, [r7, #16]
 800c3d8:	2204      	movs	r2, #4
 800c3da:	4013      	ands	r3, r2
 800c3dc:	d02f      	beq.n	800c43e <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2204      	movs	r2, #4
 800c3e2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c3e4:	d02b      	beq.n	800c43e <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d018      	beq.n	800c422 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3fa:	b2d2      	uxtb	r2, r2
 800c3fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c402:	1c5a      	adds	r2, r3, #1
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c40c:	3b01      	subs	r3, #1
 800c40e:	b29a      	uxth	r2, r3
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c418:	b29b      	uxth	r3, r3
 800c41a:	3b01      	subs	r3, #1
 800c41c:	b29a      	uxth	r2, r3
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c426:	b29b      	uxth	r3, r3
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d14c      	bne.n	800c4c6 <I2C_Slave_ISR_IT+0x1e6>
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	4a2b      	ldr	r2, [pc, #172]	@ (800c4dc <I2C_Slave_ISR_IT+0x1fc>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d048      	beq.n	800c4c6 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	0018      	movs	r0, r3
 800c438:	f000 fc36 	bl	800cca8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800c43c:	e043      	b.n	800c4c6 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	2208      	movs	r2, #8
 800c442:	4013      	ands	r3, r2
 800c444:	d00a      	beq.n	800c45c <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2208      	movs	r2, #8
 800c44a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c44c:	d006      	beq.n	800c45c <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800c44e:	693a      	ldr	r2, [r7, #16]
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	0011      	movs	r1, r2
 800c454:	0018      	movs	r0, r3
 800c456:	f000 fb41 	bl	800cadc <I2C_ITAddrCplt>
 800c45a:	e035      	b.n	800c4c8 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	2202      	movs	r2, #2
 800c460:	4013      	ands	r3, r2
 800c462:	d031      	beq.n	800c4c8 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2202      	movs	r2, #2
 800c468:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c46a:	d02d      	beq.n	800c4c8 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c470:	b29b      	uxth	r3, r3
 800c472:	2b00      	cmp	r3, #0
 800c474:	d018      	beq.n	800c4a8 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c47a:	781a      	ldrb	r2, [r3, #0]
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c486:	1c5a      	adds	r2, r3, #1
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c490:	b29b      	uxth	r3, r3
 800c492:	3b01      	subs	r3, #1
 800c494:	b29a      	uxth	r2, r3
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c49e:	3b01      	subs	r3, #1
 800c4a0:	b29a      	uxth	r2, r3
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c4a6:	e00f      	b.n	800c4c8 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800c4a8:	697a      	ldr	r2, [r7, #20]
 800c4aa:	2380      	movs	r3, #128	@ 0x80
 800c4ac:	045b      	lsls	r3, r3, #17
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d002      	beq.n	800c4b8 <I2C_Slave_ISR_IT+0x1d8>
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d107      	bne.n	800c4c8 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	0018      	movs	r0, r3
 800c4bc:	f000 fbf4 	bl	800cca8 <I2C_ITSlaveSeqCplt>
 800c4c0:	e002      	b.n	800c4c8 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800c4c2:	46c0      	nop			@ (mov r8, r8)
 800c4c4:	e000      	b.n	800c4c8 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800c4c6:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2240      	movs	r2, #64	@ 0x40
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c4d0:	2300      	movs	r3, #0
}
 800c4d2:	0018      	movs	r0, r3
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	b006      	add	sp, #24
 800c4d8:	bd80      	pop	{r7, pc}
 800c4da:	46c0      	nop			@ (mov r8, r8)
 800c4dc:	ffff0000 	.word	0xffff0000

0800c4e0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800c4e0:	b590      	push	{r4, r7, lr}
 800c4e2:	b089      	sub	sp, #36	@ 0x24
 800c4e4:	af02      	add	r7, sp, #8
 800c4e6:	60f8      	str	r0, [r7, #12]
 800c4e8:	60b9      	str	r1, [r7, #8]
 800c4ea:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	2240      	movs	r2, #64	@ 0x40
 800c4f0:	5c9b      	ldrb	r3, [r3, r2]
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	d101      	bne.n	800c4fa <I2C_Master_ISR_DMA+0x1a>
 800c4f6:	2302      	movs	r3, #2
 800c4f8:	e0e7      	b.n	800c6ca <I2C_Master_ISR_DMA+0x1ea>
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	2240      	movs	r2, #64	@ 0x40
 800c4fe:	2101      	movs	r1, #1
 800c500:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	2210      	movs	r2, #16
 800c506:	4013      	ands	r3, r2
 800c508:	d017      	beq.n	800c53a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2210      	movs	r2, #16
 800c50e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c510:	d013      	beq.n	800c53a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	2210      	movs	r2, #16
 800c518:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c51e:	2204      	movs	r2, #4
 800c520:	431a      	orrs	r2, r3
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	2120      	movs	r1, #32
 800c52a:	0018      	movs	r0, r3
 800c52c:	f001 f8c6 	bl	800d6bc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	0018      	movs	r0, r3
 800c534:	f000 ff8d 	bl	800d452 <I2C_Flush_TXDR>
 800c538:	e0c2      	b.n	800c6c0 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	2280      	movs	r2, #128	@ 0x80
 800c53e:	4013      	ands	r3, r2
 800c540:	d100      	bne.n	800c544 <I2C_Master_ISR_DMA+0x64>
 800c542:	e07c      	b.n	800c63e <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2240      	movs	r2, #64	@ 0x40
 800c548:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c54a:	d100      	bne.n	800c54e <I2C_Master_ISR_DMA+0x6e>
 800c54c:	e077      	b.n	800c63e <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	2140      	movs	r1, #64	@ 0x40
 800c55a:	438a      	bics	r2, r1
 800c55c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c562:	b29b      	uxth	r3, r3
 800c564:	2b00      	cmp	r3, #0
 800c566:	d055      	beq.n	800c614 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	b29a      	uxth	r2, r3
 800c570:	2312      	movs	r3, #18
 800c572:	18fb      	adds	r3, r7, r3
 800c574:	0592      	lsls	r2, r2, #22
 800c576:	0d92      	lsrs	r2, r2, #22
 800c578:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c57e:	b29b      	uxth	r3, r3
 800c580:	2bff      	cmp	r3, #255	@ 0xff
 800c582:	d906      	bls.n	800c592 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	22ff      	movs	r2, #255	@ 0xff
 800c588:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800c58a:	2380      	movs	r3, #128	@ 0x80
 800c58c:	045b      	lsls	r3, r3, #17
 800c58e:	617b      	str	r3, [r7, #20]
 800c590:	e010      	b.n	800c5b4 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c596:	b29a      	uxth	r2, r3
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5a0:	4a4c      	ldr	r2, [pc, #304]	@ (800c6d4 <I2C_Master_ISR_DMA+0x1f4>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d003      	beq.n	800c5ae <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5aa:	617b      	str	r3, [r7, #20]
 800c5ac:	e002      	b.n	800c5b4 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800c5ae:	2380      	movs	r3, #128	@ 0x80
 800c5b0:	049b      	lsls	r3, r3, #18
 800c5b2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c5b8:	b2da      	uxtb	r2, r3
 800c5ba:	697c      	ldr	r4, [r7, #20]
 800c5bc:	2312      	movs	r3, #18
 800c5be:	18fb      	adds	r3, r7, r3
 800c5c0:	8819      	ldrh	r1, [r3, #0]
 800c5c2:	68f8      	ldr	r0, [r7, #12]
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	9300      	str	r3, [sp, #0]
 800c5c8:	0023      	movs	r3, r4
 800c5ca:	f001 f83d 	bl	800d648 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c5d2:	b29a      	uxth	r2, r3
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c5d8:	1ad3      	subs	r3, r2, r3
 800c5da:	b29a      	uxth	r2, r3
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2241      	movs	r2, #65	@ 0x41
 800c5e4:	5c9b      	ldrb	r3, [r3, r2]
 800c5e6:	b2db      	uxtb	r3, r3
 800c5e8:	2b22      	cmp	r3, #34	@ 0x22
 800c5ea:	d109      	bne.n	800c600 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	2180      	movs	r1, #128	@ 0x80
 800c5f8:	0209      	lsls	r1, r1, #8
 800c5fa:	430a      	orrs	r2, r1
 800c5fc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c5fe:	e05f      	b.n	800c6c0 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	681a      	ldr	r2, [r3, #0]
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	2180      	movs	r1, #128	@ 0x80
 800c60c:	01c9      	lsls	r1, r1, #7
 800c60e:	430a      	orrs	r2, r1
 800c610:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c612:	e055      	b.n	800c6c0 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	685a      	ldr	r2, [r3, #4]
 800c61a:	2380      	movs	r3, #128	@ 0x80
 800c61c:	049b      	lsls	r3, r3, #18
 800c61e:	401a      	ands	r2, r3
 800c620:	2380      	movs	r3, #128	@ 0x80
 800c622:	049b      	lsls	r3, r3, #18
 800c624:	429a      	cmp	r2, r3
 800c626:	d004      	beq.n	800c632 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	0018      	movs	r0, r3
 800c62c:	f000 fafa 	bl	800cc24 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800c630:	e046      	b.n	800c6c0 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	2140      	movs	r1, #64	@ 0x40
 800c636:	0018      	movs	r0, r3
 800c638:	f000 fde0 	bl	800d1fc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c63c:	e040      	b.n	800c6c0 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	2240      	movs	r2, #64	@ 0x40
 800c642:	4013      	ands	r3, r2
 800c644:	d02c      	beq.n	800c6a0 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2240      	movs	r2, #64	@ 0x40
 800c64a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c64c:	d028      	beq.n	800c6a0 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c652:	b29b      	uxth	r3, r3
 800c654:	2b00      	cmp	r3, #0
 800c656:	d11d      	bne.n	800c694 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	685a      	ldr	r2, [r3, #4]
 800c65e:	2380      	movs	r3, #128	@ 0x80
 800c660:	049b      	lsls	r3, r3, #18
 800c662:	401a      	ands	r2, r3
 800c664:	2380      	movs	r3, #128	@ 0x80
 800c666:	049b      	lsls	r3, r3, #18
 800c668:	429a      	cmp	r2, r3
 800c66a:	d028      	beq.n	800c6be <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c670:	4a18      	ldr	r2, [pc, #96]	@ (800c6d4 <I2C_Master_ISR_DMA+0x1f4>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d109      	bne.n	800c68a <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	685a      	ldr	r2, [r3, #4]
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2180      	movs	r1, #128	@ 0x80
 800c682:	01c9      	lsls	r1, r1, #7
 800c684:	430a      	orrs	r2, r1
 800c686:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800c688:	e019      	b.n	800c6be <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	0018      	movs	r0, r3
 800c68e:	f000 fac9 	bl	800cc24 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800c692:	e014      	b.n	800c6be <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	2140      	movs	r1, #64	@ 0x40
 800c698:	0018      	movs	r0, r3
 800c69a:	f000 fdaf 	bl	800d1fc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c69e:	e00e      	b.n	800c6be <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	2220      	movs	r2, #32
 800c6a4:	4013      	ands	r3, r2
 800c6a6:	d00b      	beq.n	800c6c0 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2220      	movs	r2, #32
 800c6ac:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c6ae:	d007      	beq.n	800c6c0 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c6b0:	68ba      	ldr	r2, [r7, #8]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	0011      	movs	r1, r2
 800c6b6:	0018      	movs	r0, r3
 800c6b8:	f000 fb5a 	bl	800cd70 <I2C_ITMasterCplt>
 800c6bc:	e000      	b.n	800c6c0 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800c6be:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	2240      	movs	r2, #64	@ 0x40
 800c6c4:	2100      	movs	r1, #0
 800c6c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c6c8:	2300      	movs	r3, #0
}
 800c6ca:	0018      	movs	r0, r3
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	b007      	add	sp, #28
 800c6d0:	bd90      	pop	{r4, r7, pc}
 800c6d2:	46c0      	nop			@ (mov r8, r8)
 800c6d4:	ffff0000 	.word	0xffff0000

0800c6d8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800c6d8:	b590      	push	{r4, r7, lr}
 800c6da:	b089      	sub	sp, #36	@ 0x24
 800c6dc:	af02      	add	r7, sp, #8
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800c6e4:	4b88      	ldr	r3, [pc, #544]	@ (800c908 <I2C_Mem_ISR_DMA+0x230>)
 800c6e6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2240      	movs	r2, #64	@ 0x40
 800c6ec:	5c9b      	ldrb	r3, [r3, r2]
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d101      	bne.n	800c6f6 <I2C_Mem_ISR_DMA+0x1e>
 800c6f2:	2302      	movs	r3, #2
 800c6f4:	e104      	b.n	800c900 <I2C_Mem_ISR_DMA+0x228>
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	2240      	movs	r2, #64	@ 0x40
 800c6fa:	2101      	movs	r1, #1
 800c6fc:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	2210      	movs	r2, #16
 800c702:	4013      	ands	r3, r2
 800c704:	d017      	beq.n	800c736 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2210      	movs	r2, #16
 800c70a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c70c:	d013      	beq.n	800c736 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	2210      	movs	r2, #16
 800c714:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c71a:	2204      	movs	r2, #4
 800c71c:	431a      	orrs	r2, r3
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	2120      	movs	r1, #32
 800c726:	0018      	movs	r0, r3
 800c728:	f000 ffc8 	bl	800d6bc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	0018      	movs	r0, r3
 800c730:	f000 fe8f 	bl	800d452 <I2C_Flush_TXDR>
 800c734:	e0df      	b.n	800c8f6 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	2202      	movs	r2, #2
 800c73a:	4013      	ands	r3, r2
 800c73c:	d00d      	beq.n	800c75a <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2202      	movs	r2, #2
 800c742:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c744:	d009      	beq.n	800c75a <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	68fa      	ldr	r2, [r7, #12]
 800c74c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c74e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2201      	movs	r2, #1
 800c754:	4252      	negs	r2, r2
 800c756:	651a      	str	r2, [r3, #80]	@ 0x50
 800c758:	e0cd      	b.n	800c8f6 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	2280      	movs	r2, #128	@ 0x80
 800c75e:	4013      	ands	r3, r2
 800c760:	d05e      	beq.n	800c820 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2240      	movs	r2, #64	@ 0x40
 800c766:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800c768:	d05a      	beq.n	800c820 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2110      	movs	r1, #16
 800c76e:	0018      	movs	r0, r3
 800c770:	f000 ffa4 	bl	800d6bc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c778:	b29b      	uxth	r3, r3
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d04a      	beq.n	800c814 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c782:	b29b      	uxth	r3, r3
 800c784:	2bff      	cmp	r3, #255	@ 0xff
 800c786:	d910      	bls.n	800c7aa <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	22ff      	movs	r2, #255	@ 0xff
 800c78c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c792:	b299      	uxth	r1, r3
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c798:	b2da      	uxtb	r2, r3
 800c79a:	2380      	movs	r3, #128	@ 0x80
 800c79c:	045b      	lsls	r3, r3, #17
 800c79e:	68f8      	ldr	r0, [r7, #12]
 800c7a0:	2400      	movs	r4, #0
 800c7a2:	9400      	str	r4, [sp, #0]
 800c7a4:	f000 ff50 	bl	800d648 <I2C_TransferConfig>
 800c7a8:	e011      	b.n	800c7ce <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c7ae:	b29a      	uxth	r2, r3
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c7b8:	b299      	uxth	r1, r3
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c7be:	b2da      	uxtb	r2, r3
 800c7c0:	2380      	movs	r3, #128	@ 0x80
 800c7c2:	049b      	lsls	r3, r3, #18
 800c7c4:	68f8      	ldr	r0, [r7, #12]
 800c7c6:	2400      	movs	r4, #0
 800c7c8:	9400      	str	r4, [sp, #0]
 800c7ca:	f000 ff3d 	bl	800d648 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c7d2:	b29a      	uxth	r2, r3
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c7d8:	1ad3      	subs	r3, r2, r3
 800c7da:	b29a      	uxth	r2, r3
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	2241      	movs	r2, #65	@ 0x41
 800c7e4:	5c9b      	ldrb	r3, [r3, r2]
 800c7e6:	b2db      	uxtb	r3, r3
 800c7e8:	2b22      	cmp	r3, #34	@ 0x22
 800c7ea:	d109      	bne.n	800c800 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	681a      	ldr	r2, [r3, #0]
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	2180      	movs	r1, #128	@ 0x80
 800c7f8:	0209      	lsls	r1, r1, #8
 800c7fa:	430a      	orrs	r2, r1
 800c7fc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c7fe:	e07a      	b.n	800c8f6 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	681a      	ldr	r2, [r3, #0]
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	2180      	movs	r1, #128	@ 0x80
 800c80c:	01c9      	lsls	r1, r1, #7
 800c80e:	430a      	orrs	r2, r1
 800c810:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800c812:	e070      	b.n	800c8f6 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2140      	movs	r1, #64	@ 0x40
 800c818:	0018      	movs	r0, r3
 800c81a:	f000 fcef 	bl	800d1fc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800c81e:	e06a      	b.n	800c8f6 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	2240      	movs	r2, #64	@ 0x40
 800c824:	4013      	ands	r3, r2
 800c826:	d058      	beq.n	800c8da <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2240      	movs	r2, #64	@ 0x40
 800c82c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800c82e:	d054      	beq.n	800c8da <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	2241      	movs	r2, #65	@ 0x41
 800c834:	5c9b      	ldrb	r3, [r3, r2]
 800c836:	b2db      	uxtb	r3, r3
 800c838:	2b22      	cmp	r3, #34	@ 0x22
 800c83a:	d101      	bne.n	800c840 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800c83c:	4b33      	ldr	r3, [pc, #204]	@ (800c90c <I2C_Mem_ISR_DMA+0x234>)
 800c83e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c844:	b29b      	uxth	r3, r3
 800c846:	2bff      	cmp	r3, #255	@ 0xff
 800c848:	d911      	bls.n	800c86e <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	22ff      	movs	r2, #255	@ 0xff
 800c84e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c854:	b299      	uxth	r1, r3
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c85a:	b2da      	uxtb	r2, r3
 800c85c:	2380      	movs	r3, #128	@ 0x80
 800c85e:	045c      	lsls	r4, r3, #17
 800c860:	68f8      	ldr	r0, [r7, #12]
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	9300      	str	r3, [sp, #0]
 800c866:	0023      	movs	r3, r4
 800c868:	f000 feee 	bl	800d648 <I2C_TransferConfig>
 800c86c:	e012      	b.n	800c894 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c872:	b29a      	uxth	r2, r3
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c87c:	b299      	uxth	r1, r3
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c882:	b2da      	uxtb	r2, r3
 800c884:	2380      	movs	r3, #128	@ 0x80
 800c886:	049c      	lsls	r4, r3, #18
 800c888:	68f8      	ldr	r0, [r7, #12]
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	9300      	str	r3, [sp, #0]
 800c88e:	0023      	movs	r3, r4
 800c890:	f000 feda 	bl	800d648 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c898:	b29a      	uxth	r2, r3
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c89e:	1ad3      	subs	r3, r2, r3
 800c8a0:	b29a      	uxth	r2, r3
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	2241      	movs	r2, #65	@ 0x41
 800c8aa:	5c9b      	ldrb	r3, [r3, r2]
 800c8ac:	b2db      	uxtb	r3, r3
 800c8ae:	2b22      	cmp	r3, #34	@ 0x22
 800c8b0:	d109      	bne.n	800c8c6 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	2180      	movs	r1, #128	@ 0x80
 800c8be:	0209      	lsls	r1, r1, #8
 800c8c0:	430a      	orrs	r2, r1
 800c8c2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c8c4:	e017      	b.n	800c8f6 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	681a      	ldr	r2, [r3, #0]
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	2180      	movs	r1, #128	@ 0x80
 800c8d2:	01c9      	lsls	r1, r1, #7
 800c8d4:	430a      	orrs	r2, r1
 800c8d6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c8d8:	e00d      	b.n	800c8f6 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	2220      	movs	r2, #32
 800c8de:	4013      	ands	r3, r2
 800c8e0:	d009      	beq.n	800c8f6 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2220      	movs	r2, #32
 800c8e6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c8e8:	d005      	beq.n	800c8f6 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800c8ea:	68ba      	ldr	r2, [r7, #8]
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	0011      	movs	r1, r2
 800c8f0:	0018      	movs	r0, r3
 800c8f2:	f000 fa3d 	bl	800cd70 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2240      	movs	r2, #64	@ 0x40
 800c8fa:	2100      	movs	r1, #0
 800c8fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c8fe:	2300      	movs	r3, #0
}
 800c900:	0018      	movs	r0, r3
 800c902:	46bd      	mov	sp, r7
 800c904:	b007      	add	sp, #28
 800c906:	bd90      	pop	{r4, r7, pc}
 800c908:	80002000 	.word	0x80002000
 800c90c:	80002400 	.word	0x80002400

0800c910 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b088      	sub	sp, #32
 800c914:	af00      	add	r7, sp, #0
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	60b9      	str	r1, [r7, #8]
 800c91a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c920:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800c922:	2300      	movs	r3, #0
 800c924:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2240      	movs	r2, #64	@ 0x40
 800c92a:	5c9b      	ldrb	r3, [r3, r2]
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d101      	bne.n	800c934 <I2C_Slave_ISR_DMA+0x24>
 800c930:	2302      	movs	r3, #2
 800c932:	e0cd      	b.n	800cad0 <I2C_Slave_ISR_DMA+0x1c0>
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	2240      	movs	r2, #64	@ 0x40
 800c938:	2101      	movs	r1, #1
 800c93a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	2220      	movs	r2, #32
 800c940:	4013      	ands	r3, r2
 800c942:	d009      	beq.n	800c958 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2220      	movs	r2, #32
 800c948:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c94a:	d005      	beq.n	800c958 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800c94c:	68ba      	ldr	r2, [r7, #8]
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	0011      	movs	r1, r2
 800c952:	0018      	movs	r0, r3
 800c954:	f000 fada 	bl	800cf0c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	2210      	movs	r2, #16
 800c95c:	4013      	ands	r3, r2
 800c95e:	d100      	bne.n	800c962 <I2C_Slave_ISR_DMA+0x52>
 800c960:	e0a3      	b.n	800caaa <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2210      	movs	r2, #16
 800c966:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800c968:	d100      	bne.n	800c96c <I2C_Slave_ISR_DMA+0x5c>
 800c96a:	e09e      	b.n	800caaa <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c96c:	687a      	ldr	r2, [r7, #4]
 800c96e:	2380      	movs	r3, #128	@ 0x80
 800c970:	01db      	lsls	r3, r3, #7
 800c972:	4013      	ands	r3, r2
 800c974:	d105      	bne.n	800c982 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800c976:	687a      	ldr	r2, [r7, #4]
 800c978:	2380      	movs	r3, #128	@ 0x80
 800c97a:	021b      	lsls	r3, r3, #8
 800c97c:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800c97e:	d100      	bne.n	800c982 <I2C_Slave_ISR_DMA+0x72>
 800c980:	e08c      	b.n	800ca9c <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c986:	2b00      	cmp	r3, #0
 800c988:	d00c      	beq.n	800c9a4 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	2380      	movs	r3, #128	@ 0x80
 800c98e:	021b      	lsls	r3, r3, #8
 800c990:	4013      	ands	r3, r2
 800c992:	d007      	beq.n	800c9a4 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d101      	bne.n	800c9a4 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d00c      	beq.n	800c9c6 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800c9ac:	687a      	ldr	r2, [r7, #4]
 800c9ae:	2380      	movs	r3, #128	@ 0x80
 800c9b0:	01db      	lsls	r3, r3, #7
 800c9b2:	4013      	ands	r3, r2
 800c9b4:	d007      	beq.n	800c9c6 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	685b      	ldr	r3, [r3, #4]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d101      	bne.n	800c9c6 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d12d      	bne.n	800ca28 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2241      	movs	r2, #65	@ 0x41
 800c9d0:	5c9b      	ldrb	r3, [r3, r2]
 800c9d2:	b2db      	uxtb	r3, r3
 800c9d4:	2b28      	cmp	r3, #40	@ 0x28
 800c9d6:	d10b      	bne.n	800c9f0 <I2C_Slave_ISR_DMA+0xe0>
 800c9d8:	69ba      	ldr	r2, [r7, #24]
 800c9da:	2380      	movs	r3, #128	@ 0x80
 800c9dc:	049b      	lsls	r3, r3, #18
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d106      	bne.n	800c9f0 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800c9e2:	68ba      	ldr	r2, [r7, #8]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	0011      	movs	r1, r2
 800c9e8:	0018      	movs	r0, r3
 800c9ea:	f000 fbaf 	bl	800d14c <I2C_ITListenCplt>
 800c9ee:	e054      	b.n	800ca9a <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	2241      	movs	r2, #65	@ 0x41
 800c9f4:	5c9b      	ldrb	r3, [r3, r2]
 800c9f6:	b2db      	uxtb	r3, r3
 800c9f8:	2b29      	cmp	r3, #41	@ 0x29
 800c9fa:	d110      	bne.n	800ca1e <I2C_Slave_ISR_DMA+0x10e>
 800c9fc:	69bb      	ldr	r3, [r7, #24]
 800c9fe:	4a36      	ldr	r2, [pc, #216]	@ (800cad8 <I2C_Slave_ISR_DMA+0x1c8>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d00c      	beq.n	800ca1e <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	2210      	movs	r2, #16
 800ca0a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	0018      	movs	r0, r3
 800ca10:	f000 fd1f 	bl	800d452 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	0018      	movs	r0, r3
 800ca18:	f000 f946 	bl	800cca8 <I2C_ITSlaveSeqCplt>
 800ca1c:	e03d      	b.n	800ca9a <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	2210      	movs	r2, #16
 800ca24:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800ca26:	e03e      	b.n	800caa6 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	2210      	movs	r2, #16
 800ca2e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca34:	2204      	movs	r2, #4
 800ca36:	431a      	orrs	r2, r3
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800ca3c:	2317      	movs	r3, #23
 800ca3e:	18fb      	adds	r3, r7, r3
 800ca40:	68fa      	ldr	r2, [r7, #12]
 800ca42:	2141      	movs	r1, #65	@ 0x41
 800ca44:	5c52      	ldrb	r2, [r2, r1]
 800ca46:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ca48:	69bb      	ldr	r3, [r7, #24]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d004      	beq.n	800ca58 <I2C_Slave_ISR_DMA+0x148>
 800ca4e:	69ba      	ldr	r2, [r7, #24]
 800ca50:	2380      	movs	r3, #128	@ 0x80
 800ca52:	045b      	lsls	r3, r3, #17
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d126      	bne.n	800caa6 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ca58:	2217      	movs	r2, #23
 800ca5a:	18bb      	adds	r3, r7, r2
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	2b21      	cmp	r3, #33	@ 0x21
 800ca60:	d003      	beq.n	800ca6a <I2C_Slave_ISR_DMA+0x15a>
 800ca62:	18bb      	adds	r3, r7, r2
 800ca64:	781b      	ldrb	r3, [r3, #0]
 800ca66:	2b29      	cmp	r3, #41	@ 0x29
 800ca68:	d103      	bne.n	800ca72 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2221      	movs	r2, #33	@ 0x21
 800ca6e:	631a      	str	r2, [r3, #48]	@ 0x30
 800ca70:	e00b      	b.n	800ca8a <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ca72:	2217      	movs	r2, #23
 800ca74:	18bb      	adds	r3, r7, r2
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	2b22      	cmp	r3, #34	@ 0x22
 800ca7a:	d003      	beq.n	800ca84 <I2C_Slave_ISR_DMA+0x174>
 800ca7c:	18bb      	adds	r3, r7, r2
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca82:	d102      	bne.n	800ca8a <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2222      	movs	r2, #34	@ 0x22
 800ca88:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	0011      	movs	r1, r2
 800ca92:	0018      	movs	r0, r3
 800ca94:	f000 fbb2 	bl	800d1fc <I2C_ITError>
      if (treatdmanack == 1U)
 800ca98:	e005      	b.n	800caa6 <I2C_Slave_ISR_DMA+0x196>
 800ca9a:	e004      	b.n	800caa6 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	2210      	movs	r2, #16
 800caa2:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800caa4:	e00f      	b.n	800cac6 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800caa6:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800caa8:	e00d      	b.n	800cac6 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	2208      	movs	r2, #8
 800caae:	4013      	ands	r3, r2
 800cab0:	d009      	beq.n	800cac6 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2208      	movs	r2, #8
 800cab6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800cab8:	d005      	beq.n	800cac6 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800caba:	68ba      	ldr	r2, [r7, #8]
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	0011      	movs	r1, r2
 800cac0:	0018      	movs	r0, r3
 800cac2:	f000 f80b 	bl	800cadc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2240      	movs	r2, #64	@ 0x40
 800caca:	2100      	movs	r1, #0
 800cacc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cace:	2300      	movs	r3, #0
}
 800cad0:	0018      	movs	r0, r3
 800cad2:	46bd      	mov	sp, r7
 800cad4:	b008      	add	sp, #32
 800cad6:	bd80      	pop	{r7, pc}
 800cad8:	ffff0000 	.word	0xffff0000

0800cadc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cadc:	b5b0      	push	{r4, r5, r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2241      	movs	r2, #65	@ 0x41
 800caea:	5c9b      	ldrb	r3, [r3, r2]
 800caec:	b2db      	uxtb	r3, r3
 800caee:	001a      	movs	r2, r3
 800caf0:	2328      	movs	r3, #40	@ 0x28
 800caf2:	4013      	ands	r3, r2
 800caf4:	2b28      	cmp	r3, #40	@ 0x28
 800caf6:	d000      	beq.n	800cafa <I2C_ITAddrCplt+0x1e>
 800caf8:	e088      	b.n	800cc0c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	699b      	ldr	r3, [r3, #24]
 800cb00:	0c1b      	lsrs	r3, r3, #16
 800cb02:	b2da      	uxtb	r2, r3
 800cb04:	250f      	movs	r5, #15
 800cb06:	197b      	adds	r3, r7, r5
 800cb08:	2101      	movs	r1, #1
 800cb0a:	400a      	ands	r2, r1
 800cb0c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	699b      	ldr	r3, [r3, #24]
 800cb14:	0c1b      	lsrs	r3, r3, #16
 800cb16:	b29a      	uxth	r2, r3
 800cb18:	200c      	movs	r0, #12
 800cb1a:	183b      	adds	r3, r7, r0
 800cb1c:	21fe      	movs	r1, #254	@ 0xfe
 800cb1e:	400a      	ands	r2, r1
 800cb20:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	689b      	ldr	r3, [r3, #8]
 800cb28:	b29a      	uxth	r2, r3
 800cb2a:	240a      	movs	r4, #10
 800cb2c:	193b      	adds	r3, r7, r4
 800cb2e:	0592      	lsls	r2, r2, #22
 800cb30:	0d92      	lsrs	r2, r2, #22
 800cb32:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	68db      	ldr	r3, [r3, #12]
 800cb3a:	b29a      	uxth	r2, r3
 800cb3c:	2308      	movs	r3, #8
 800cb3e:	18fb      	adds	r3, r7, r3
 800cb40:	21fe      	movs	r1, #254	@ 0xfe
 800cb42:	400a      	ands	r2, r1
 800cb44:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	68db      	ldr	r3, [r3, #12]
 800cb4a:	2b02      	cmp	r3, #2
 800cb4c:	d148      	bne.n	800cbe0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800cb4e:	0021      	movs	r1, r4
 800cb50:	187b      	adds	r3, r7, r1
 800cb52:	881b      	ldrh	r3, [r3, #0]
 800cb54:	09db      	lsrs	r3, r3, #7
 800cb56:	b29a      	uxth	r2, r3
 800cb58:	183b      	adds	r3, r7, r0
 800cb5a:	881b      	ldrh	r3, [r3, #0]
 800cb5c:	4053      	eors	r3, r2
 800cb5e:	b29b      	uxth	r3, r3
 800cb60:	001a      	movs	r2, r3
 800cb62:	2306      	movs	r3, #6
 800cb64:	4013      	ands	r3, r2
 800cb66:	d120      	bne.n	800cbaa <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800cb68:	183b      	adds	r3, r7, r0
 800cb6a:	187a      	adds	r2, r7, r1
 800cb6c:	8812      	ldrh	r2, [r2, #0]
 800cb6e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cb74:	1c5a      	adds	r2, r3, #1
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cb7e:	2b02      	cmp	r3, #2
 800cb80:	d14c      	bne.n	800cc1c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2200      	movs	r2, #0
 800cb86:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	2208      	movs	r2, #8
 800cb8e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2240      	movs	r2, #64	@ 0x40
 800cb94:	2100      	movs	r1, #0
 800cb96:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cb98:	183b      	adds	r3, r7, r0
 800cb9a:	881a      	ldrh	r2, [r3, #0]
 800cb9c:	197b      	adds	r3, r7, r5
 800cb9e:	7819      	ldrb	r1, [r3, #0]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	0018      	movs	r0, r3
 800cba4:	f7ff fa39 	bl	800c01a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800cba8:	e038      	b.n	800cc1c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800cbaa:	240c      	movs	r4, #12
 800cbac:	193b      	adds	r3, r7, r4
 800cbae:	2208      	movs	r2, #8
 800cbb0:	18ba      	adds	r2, r7, r2
 800cbb2:	8812      	ldrh	r2, [r2, #0]
 800cbb4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800cbb6:	2380      	movs	r3, #128	@ 0x80
 800cbb8:	021a      	lsls	r2, r3, #8
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	0011      	movs	r1, r2
 800cbbe:	0018      	movs	r0, r3
 800cbc0:	f000 fe0a 	bl	800d7d8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2240      	movs	r2, #64	@ 0x40
 800cbc8:	2100      	movs	r1, #0
 800cbca:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cbcc:	193b      	adds	r3, r7, r4
 800cbce:	881a      	ldrh	r2, [r3, #0]
 800cbd0:	230f      	movs	r3, #15
 800cbd2:	18fb      	adds	r3, r7, r3
 800cbd4:	7819      	ldrb	r1, [r3, #0]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	0018      	movs	r0, r3
 800cbda:	f7ff fa1e 	bl	800c01a <HAL_I2C_AddrCallback>
}
 800cbde:	e01d      	b.n	800cc1c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800cbe0:	2380      	movs	r3, #128	@ 0x80
 800cbe2:	021a      	lsls	r2, r3, #8
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	0011      	movs	r1, r2
 800cbe8:	0018      	movs	r0, r3
 800cbea:	f000 fdf5 	bl	800d7d8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2240      	movs	r2, #64	@ 0x40
 800cbf2:	2100      	movs	r1, #0
 800cbf4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cbf6:	230c      	movs	r3, #12
 800cbf8:	18fb      	adds	r3, r7, r3
 800cbfa:	881a      	ldrh	r2, [r3, #0]
 800cbfc:	230f      	movs	r3, #15
 800cbfe:	18fb      	adds	r3, r7, r3
 800cc00:	7819      	ldrb	r1, [r3, #0]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	0018      	movs	r0, r3
 800cc06:	f7ff fa08 	bl	800c01a <HAL_I2C_AddrCallback>
}
 800cc0a:	e007      	b.n	800cc1c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	2208      	movs	r2, #8
 800cc12:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2240      	movs	r2, #64	@ 0x40
 800cc18:	2100      	movs	r1, #0
 800cc1a:	5499      	strb	r1, [r3, r2]
}
 800cc1c:	46c0      	nop			@ (mov r8, r8)
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	b004      	add	sp, #16
 800cc22:	bdb0      	pop	{r4, r5, r7, pc}

0800cc24 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2242      	movs	r2, #66	@ 0x42
 800cc30:	2100      	movs	r1, #0
 800cc32:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2241      	movs	r2, #65	@ 0x41
 800cc38:	5c9b      	ldrb	r3, [r3, r2]
 800cc3a:	b2db      	uxtb	r3, r3
 800cc3c:	2b21      	cmp	r3, #33	@ 0x21
 800cc3e:	d117      	bne.n	800cc70 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2241      	movs	r2, #65	@ 0x41
 800cc44:	2120      	movs	r1, #32
 800cc46:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2211      	movs	r2, #17
 800cc4c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2200      	movs	r2, #0
 800cc52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2101      	movs	r1, #1
 800cc58:	0018      	movs	r0, r3
 800cc5a:	f000 fdbd 	bl	800d7d8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2240      	movs	r2, #64	@ 0x40
 800cc62:	2100      	movs	r1, #0
 800cc64:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	0018      	movs	r0, r3
 800cc6a:	f7ff f9b6 	bl	800bfda <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cc6e:	e016      	b.n	800cc9e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2241      	movs	r2, #65	@ 0x41
 800cc74:	2120      	movs	r1, #32
 800cc76:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2212      	movs	r2, #18
 800cc7c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2200      	movs	r2, #0
 800cc82:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2102      	movs	r1, #2
 800cc88:	0018      	movs	r0, r3
 800cc8a:	f000 fda5 	bl	800d7d8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2240      	movs	r2, #64	@ 0x40
 800cc92:	2100      	movs	r1, #0
 800cc94:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	0018      	movs	r0, r3
 800cc9a:	f7ff f9a6 	bl	800bfea <HAL_I2C_MasterRxCpltCallback>
}
 800cc9e:	46c0      	nop			@ (mov r8, r8)
 800cca0:	46bd      	mov	sp, r7
 800cca2:	b002      	add	sp, #8
 800cca4:	bd80      	pop	{r7, pc}
	...

0800cca8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b084      	sub	sp, #16
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2242      	movs	r2, #66	@ 0x42
 800ccbc:	2100      	movs	r1, #0
 800ccbe:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800ccc0:	68fa      	ldr	r2, [r7, #12]
 800ccc2:	2380      	movs	r3, #128	@ 0x80
 800ccc4:	01db      	lsls	r3, r3, #7
 800ccc6:	4013      	ands	r3, r2
 800ccc8:	d008      	beq.n	800ccdc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	681a      	ldr	r2, [r3, #0]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	4924      	ldr	r1, [pc, #144]	@ (800cd68 <I2C_ITSlaveSeqCplt+0xc0>)
 800ccd6:	400a      	ands	r2, r1
 800ccd8:	601a      	str	r2, [r3, #0]
 800ccda:	e00c      	b.n	800ccf6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800ccdc:	68fa      	ldr	r2, [r7, #12]
 800ccde:	2380      	movs	r3, #128	@ 0x80
 800cce0:	021b      	lsls	r3, r3, #8
 800cce2:	4013      	ands	r3, r2
 800cce4:	d007      	beq.n	800ccf6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	681a      	ldr	r2, [r3, #0]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	491e      	ldr	r1, [pc, #120]	@ (800cd6c <I2C_ITSlaveSeqCplt+0xc4>)
 800ccf2:	400a      	ands	r2, r1
 800ccf4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2241      	movs	r2, #65	@ 0x41
 800ccfa:	5c9b      	ldrb	r3, [r3, r2]
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	2b29      	cmp	r3, #41	@ 0x29
 800cd00:	d114      	bne.n	800cd2c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2241      	movs	r2, #65	@ 0x41
 800cd06:	2128      	movs	r1, #40	@ 0x28
 800cd08:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2221      	movs	r2, #33	@ 0x21
 800cd0e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2101      	movs	r1, #1
 800cd14:	0018      	movs	r0, r3
 800cd16:	f000 fd5f 	bl	800d7d8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2240      	movs	r2, #64	@ 0x40
 800cd1e:	2100      	movs	r1, #0
 800cd20:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	0018      	movs	r0, r3
 800cd26:	f7ff f968 	bl	800bffa <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cd2a:	e019      	b.n	800cd60 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2241      	movs	r2, #65	@ 0x41
 800cd30:	5c9b      	ldrb	r3, [r3, r2]
 800cd32:	b2db      	uxtb	r3, r3
 800cd34:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd36:	d113      	bne.n	800cd60 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2241      	movs	r2, #65	@ 0x41
 800cd3c:	2128      	movs	r1, #40	@ 0x28
 800cd3e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2222      	movs	r2, #34	@ 0x22
 800cd44:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2102      	movs	r1, #2
 800cd4a:	0018      	movs	r0, r3
 800cd4c:	f000 fd44 	bl	800d7d8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2240      	movs	r2, #64	@ 0x40
 800cd54:	2100      	movs	r1, #0
 800cd56:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	0018      	movs	r0, r3
 800cd5c:	f7ff f955 	bl	800c00a <HAL_I2C_SlaveRxCpltCallback>
}
 800cd60:	46c0      	nop			@ (mov r8, r8)
 800cd62:	46bd      	mov	sp, r7
 800cd64:	b004      	add	sp, #16
 800cd66:	bd80      	pop	{r7, pc}
 800cd68:	ffffbfff 	.word	0xffffbfff
 800cd6c:	ffff7fff 	.word	0xffff7fff

0800cd70 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b086      	sub	sp, #24
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	2220      	movs	r2, #32
 800cd84:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2241      	movs	r2, #65	@ 0x41
 800cd8a:	5c9b      	ldrb	r3, [r3, r2]
 800cd8c:	b2db      	uxtb	r3, r3
 800cd8e:	2b21      	cmp	r3, #33	@ 0x21
 800cd90:	d108      	bne.n	800cda4 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2101      	movs	r1, #1
 800cd96:	0018      	movs	r0, r3
 800cd98:	f000 fd1e 	bl	800d7d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2211      	movs	r2, #17
 800cda0:	631a      	str	r2, [r3, #48]	@ 0x30
 800cda2:	e00d      	b.n	800cdc0 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2241      	movs	r2, #65	@ 0x41
 800cda8:	5c9b      	ldrb	r3, [r3, r2]
 800cdaa:	b2db      	uxtb	r3, r3
 800cdac:	2b22      	cmp	r3, #34	@ 0x22
 800cdae:	d107      	bne.n	800cdc0 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2102      	movs	r1, #2
 800cdb4:	0018      	movs	r0, r3
 800cdb6:	f000 fd0f 	bl	800d7d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2212      	movs	r2, #18
 800cdbe:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	685a      	ldr	r2, [r3, #4]
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	494e      	ldr	r1, [pc, #312]	@ (800cf04 <I2C_ITMasterCplt+0x194>)
 800cdcc:	400a      	ands	r2, r1
 800cdce:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	4a4b      	ldr	r2, [pc, #300]	@ (800cf08 <I2C_ITMasterCplt+0x198>)
 800cdda:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	2210      	movs	r2, #16
 800cde0:	4013      	ands	r3, r2
 800cde2:	d009      	beq.n	800cdf8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	2210      	movs	r2, #16
 800cdea:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdf0:	2204      	movs	r2, #4
 800cdf2:	431a      	orrs	r2, r3
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2241      	movs	r2, #65	@ 0x41
 800cdfc:	5c9b      	ldrb	r3, [r3, r2]
 800cdfe:	b2db      	uxtb	r3, r3
 800ce00:	2b60      	cmp	r3, #96	@ 0x60
 800ce02:	d109      	bne.n	800ce18 <I2C_ITMasterCplt+0xa8>
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	2204      	movs	r2, #4
 800ce08:	4013      	ands	r3, r2
 800ce0a:	d005      	beq.n	800ce18 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800ce16:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	0018      	movs	r0, r3
 800ce1c:	f000 fb19 	bl	800d452 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce24:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2241      	movs	r2, #65	@ 0x41
 800ce2a:	5c9b      	ldrb	r3, [r3, r2]
 800ce2c:	b2db      	uxtb	r3, r3
 800ce2e:	2b60      	cmp	r3, #96	@ 0x60
 800ce30:	d002      	beq.n	800ce38 <I2C_ITMasterCplt+0xc8>
 800ce32:	693b      	ldr	r3, [r7, #16]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d007      	beq.n	800ce48 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	0011      	movs	r1, r2
 800ce40:	0018      	movs	r0, r3
 800ce42:	f000 f9db 	bl	800d1fc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ce46:	e058      	b.n	800cefa <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2241      	movs	r2, #65	@ 0x41
 800ce4c:	5c9b      	ldrb	r3, [r3, r2]
 800ce4e:	b2db      	uxtb	r3, r3
 800ce50:	2b21      	cmp	r3, #33	@ 0x21
 800ce52:	d126      	bne.n	800cea2 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2241      	movs	r2, #65	@ 0x41
 800ce58:	2120      	movs	r1, #32
 800ce5a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2242      	movs	r2, #66	@ 0x42
 800ce66:	5c9b      	ldrb	r3, [r3, r2]
 800ce68:	b2db      	uxtb	r3, r3
 800ce6a:	2b40      	cmp	r3, #64	@ 0x40
 800ce6c:	d10c      	bne.n	800ce88 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2242      	movs	r2, #66	@ 0x42
 800ce72:	2100      	movs	r1, #0
 800ce74:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2240      	movs	r2, #64	@ 0x40
 800ce7a:	2100      	movs	r1, #0
 800ce7c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	0018      	movs	r0, r3
 800ce82:	f7ff f8e2 	bl	800c04a <HAL_I2C_MemTxCpltCallback>
}
 800ce86:	e038      	b.n	800cefa <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2242      	movs	r2, #66	@ 0x42
 800ce8c:	2100      	movs	r1, #0
 800ce8e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2240      	movs	r2, #64	@ 0x40
 800ce94:	2100      	movs	r1, #0
 800ce96:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	0018      	movs	r0, r3
 800ce9c:	f7ff f89d 	bl	800bfda <HAL_I2C_MasterTxCpltCallback>
}
 800cea0:	e02b      	b.n	800cefa <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2241      	movs	r2, #65	@ 0x41
 800cea6:	5c9b      	ldrb	r3, [r3, r2]
 800cea8:	b2db      	uxtb	r3, r3
 800ceaa:	2b22      	cmp	r3, #34	@ 0x22
 800ceac:	d125      	bne.n	800cefa <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2241      	movs	r2, #65	@ 0x41
 800ceb2:	2120      	movs	r1, #32
 800ceb4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2242      	movs	r2, #66	@ 0x42
 800cec0:	5c9b      	ldrb	r3, [r3, r2]
 800cec2:	b2db      	uxtb	r3, r3
 800cec4:	2b40      	cmp	r3, #64	@ 0x40
 800cec6:	d10c      	bne.n	800cee2 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2242      	movs	r2, #66	@ 0x42
 800cecc:	2100      	movs	r1, #0
 800cece:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2240      	movs	r2, #64	@ 0x40
 800ced4:	2100      	movs	r1, #0
 800ced6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	0018      	movs	r0, r3
 800cedc:	f7ff f8bd 	bl	800c05a <HAL_I2C_MemRxCpltCallback>
}
 800cee0:	e00b      	b.n	800cefa <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2242      	movs	r2, #66	@ 0x42
 800cee6:	2100      	movs	r1, #0
 800cee8:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2240      	movs	r2, #64	@ 0x40
 800ceee:	2100      	movs	r1, #0
 800cef0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	0018      	movs	r0, r3
 800cef6:	f7ff f878 	bl	800bfea <HAL_I2C_MasterRxCpltCallback>
}
 800cefa:	46c0      	nop			@ (mov r8, r8)
 800cefc:	46bd      	mov	sp, r7
 800cefe:	b006      	add	sp, #24
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	46c0      	nop			@ (mov r8, r8)
 800cf04:	fe00e800 	.word	0xfe00e800
 800cf08:	ffff0000 	.word	0xffff0000

0800cf0c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b086      	sub	sp, #24
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cf22:	200f      	movs	r0, #15
 800cf24:	183b      	adds	r3, r7, r0
 800cf26:	687a      	ldr	r2, [r7, #4]
 800cf28:	2141      	movs	r1, #65	@ 0x41
 800cf2a:	5c52      	ldrb	r2, [r2, r1]
 800cf2c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	2220      	movs	r2, #32
 800cf34:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800cf36:	183b      	adds	r3, r7, r0
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	2b21      	cmp	r3, #33	@ 0x21
 800cf3c:	d003      	beq.n	800cf46 <I2C_ITSlaveCplt+0x3a>
 800cf3e:	183b      	adds	r3, r7, r0
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	2b29      	cmp	r3, #41	@ 0x29
 800cf44:	d109      	bne.n	800cf5a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800cf46:	4a7b      	ldr	r2, [pc, #492]	@ (800d134 <I2C_ITSlaveCplt+0x228>)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	0011      	movs	r1, r2
 800cf4c:	0018      	movs	r0, r3
 800cf4e:	f000 fc43 	bl	800d7d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2221      	movs	r2, #33	@ 0x21
 800cf56:	631a      	str	r2, [r3, #48]	@ 0x30
 800cf58:	e011      	b.n	800cf7e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800cf5a:	220f      	movs	r2, #15
 800cf5c:	18bb      	adds	r3, r7, r2
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	2b22      	cmp	r3, #34	@ 0x22
 800cf62:	d003      	beq.n	800cf6c <I2C_ITSlaveCplt+0x60>
 800cf64:	18bb      	adds	r3, r7, r2
 800cf66:	781b      	ldrb	r3, [r3, #0]
 800cf68:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf6a:	d108      	bne.n	800cf7e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800cf6c:	4a72      	ldr	r2, [pc, #456]	@ (800d138 <I2C_ITSlaveCplt+0x22c>)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	0011      	movs	r1, r2
 800cf72:	0018      	movs	r0, r3
 800cf74:	f000 fc30 	bl	800d7d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2222      	movs	r2, #34	@ 0x22
 800cf7c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	685a      	ldr	r2, [r3, #4]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	2180      	movs	r1, #128	@ 0x80
 800cf8a:	0209      	lsls	r1, r1, #8
 800cf8c:	430a      	orrs	r2, r1
 800cf8e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	685a      	ldr	r2, [r3, #4]
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	4968      	ldr	r1, [pc, #416]	@ (800d13c <I2C_ITSlaveCplt+0x230>)
 800cf9c:	400a      	ands	r2, r1
 800cf9e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	0018      	movs	r0, r3
 800cfa4:	f000 fa55 	bl	800d452 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800cfa8:	693a      	ldr	r2, [r7, #16]
 800cfaa:	2380      	movs	r3, #128	@ 0x80
 800cfac:	01db      	lsls	r3, r3, #7
 800cfae:	4013      	ands	r3, r2
 800cfb0:	d013      	beq.n	800cfda <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	681a      	ldr	r2, [r3, #0]
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	4960      	ldr	r1, [pc, #384]	@ (800d140 <I2C_ITSlaveCplt+0x234>)
 800cfbe:	400a      	ands	r2, r1
 800cfc0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d01f      	beq.n	800d00a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	685b      	ldr	r3, [r3, #4]
 800cfd2:	b29a      	uxth	r2, r3
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800cfd8:	e017      	b.n	800d00a <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800cfda:	693a      	ldr	r2, [r7, #16]
 800cfdc:	2380      	movs	r3, #128	@ 0x80
 800cfde:	021b      	lsls	r3, r3, #8
 800cfe0:	4013      	ands	r3, r2
 800cfe2:	d012      	beq.n	800d00a <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	4955      	ldr	r1, [pc, #340]	@ (800d144 <I2C_ITSlaveCplt+0x238>)
 800cff0:	400a      	ands	r2, r1
 800cff2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d006      	beq.n	800d00a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	b29a      	uxth	r2, r3
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	2204      	movs	r2, #4
 800d00e:	4013      	ands	r3, r2
 800d010:	d020      	beq.n	800d054 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	2204      	movs	r2, #4
 800d016:	4393      	bics	r3, r2
 800d018:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d024:	b2d2      	uxtb	r2, r2
 800d026:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d02c:	1c5a      	adds	r2, r3, #1
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d036:	2b00      	cmp	r3, #0
 800d038:	d00c      	beq.n	800d054 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d03e:	3b01      	subs	r3, #1
 800d040:	b29a      	uxth	r2, r3
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d04a:	b29b      	uxth	r3, r3
 800d04c:	3b01      	subs	r3, #1
 800d04e:	b29a      	uxth	r2, r3
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d058:	b29b      	uxth	r3, r3
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d005      	beq.n	800d06a <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d062:	2204      	movs	r2, #4
 800d064:	431a      	orrs	r2, r3
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2242      	movs	r2, #66	@ 0x42
 800d06e:	2100      	movs	r1, #0
 800d070:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2200      	movs	r2, #0
 800d076:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d013      	beq.n	800d0a8 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	0011      	movs	r1, r2
 800d088:	0018      	movs	r0, r3
 800d08a:	f000 f8b7 	bl	800d1fc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2241      	movs	r2, #65	@ 0x41
 800d092:	5c9b      	ldrb	r3, [r3, r2]
 800d094:	b2db      	uxtb	r3, r3
 800d096:	2b28      	cmp	r3, #40	@ 0x28
 800d098:	d147      	bne.n	800d12a <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800d09a:	697a      	ldr	r2, [r7, #20]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	0011      	movs	r1, r2
 800d0a0:	0018      	movs	r0, r3
 800d0a2:	f000 f853 	bl	800d14c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d0a6:	e040      	b.n	800d12a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0ac:	4a26      	ldr	r2, [pc, #152]	@ (800d148 <I2C_ITSlaveCplt+0x23c>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d016      	beq.n	800d0e0 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	0018      	movs	r0, r3
 800d0b6:	f7ff fdf7 	bl	800cca8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	4a22      	ldr	r2, [pc, #136]	@ (800d148 <I2C_ITSlaveCplt+0x23c>)
 800d0be:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2241      	movs	r2, #65	@ 0x41
 800d0c4:	2120      	movs	r1, #32
 800d0c6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2240      	movs	r2, #64	@ 0x40
 800d0d2:	2100      	movs	r1, #0
 800d0d4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	0018      	movs	r0, r3
 800d0da:	f7fe ffae 	bl	800c03a <HAL_I2C_ListenCpltCallback>
}
 800d0de:	e024      	b.n	800d12a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2241      	movs	r2, #65	@ 0x41
 800d0e4:	5c9b      	ldrb	r3, [r3, r2]
 800d0e6:	b2db      	uxtb	r3, r3
 800d0e8:	2b22      	cmp	r3, #34	@ 0x22
 800d0ea:	d10f      	bne.n	800d10c <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2241      	movs	r2, #65	@ 0x41
 800d0f0:	2120      	movs	r1, #32
 800d0f2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2240      	movs	r2, #64	@ 0x40
 800d0fe:	2100      	movs	r1, #0
 800d100:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	0018      	movs	r0, r3
 800d106:	f7fe ff80 	bl	800c00a <HAL_I2C_SlaveRxCpltCallback>
}
 800d10a:	e00e      	b.n	800d12a <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2241      	movs	r2, #65	@ 0x41
 800d110:	2120      	movs	r1, #32
 800d112:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2200      	movs	r2, #0
 800d118:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2240      	movs	r2, #64	@ 0x40
 800d11e:	2100      	movs	r1, #0
 800d120:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	0018      	movs	r0, r3
 800d126:	f7fe ff68 	bl	800bffa <HAL_I2C_SlaveTxCpltCallback>
}
 800d12a:	46c0      	nop			@ (mov r8, r8)
 800d12c:	46bd      	mov	sp, r7
 800d12e:	b006      	add	sp, #24
 800d130:	bd80      	pop	{r7, pc}
 800d132:	46c0      	nop			@ (mov r8, r8)
 800d134:	00008001 	.word	0x00008001
 800d138:	00008002 	.word	0x00008002
 800d13c:	fe00e800 	.word	0xfe00e800
 800d140:	ffffbfff 	.word	0xffffbfff
 800d144:	ffff7fff 	.word	0xffff7fff
 800d148:	ffff0000 	.word	0xffff0000

0800d14c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	4a26      	ldr	r2, [pc, #152]	@ (800d1f4 <I2C_ITListenCplt+0xa8>)
 800d15a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2200      	movs	r2, #0
 800d160:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2241      	movs	r2, #65	@ 0x41
 800d166:	2120      	movs	r1, #32
 800d168:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2242      	movs	r2, #66	@ 0x42
 800d16e:	2100      	movs	r1, #0
 800d170:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2200      	movs	r2, #0
 800d176:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	2204      	movs	r2, #4
 800d17c:	4013      	ands	r3, r2
 800d17e:	d022      	beq.n	800d1c6 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d18a:	b2d2      	uxtb	r2, r2
 800d18c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d192:	1c5a      	adds	r2, r3, #1
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d012      	beq.n	800d1c6 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d1a4:	3b01      	subs	r3, #1
 800d1a6:	b29a      	uxth	r2, r3
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	3b01      	subs	r3, #1
 800d1b4:	b29a      	uxth	r2, r3
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1be:	2204      	movs	r2, #4
 800d1c0:	431a      	orrs	r2, r3
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d1c6:	4a0c      	ldr	r2, [pc, #48]	@ (800d1f8 <I2C_ITListenCplt+0xac>)
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	0011      	movs	r1, r2
 800d1cc:	0018      	movs	r0, r3
 800d1ce:	f000 fb03 	bl	800d7d8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2210      	movs	r2, #16
 800d1d8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2240      	movs	r2, #64	@ 0x40
 800d1de:	2100      	movs	r1, #0
 800d1e0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	0018      	movs	r0, r3
 800d1e6:	f7fe ff28 	bl	800c03a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800d1ea:	46c0      	nop			@ (mov r8, r8)
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	b002      	add	sp, #8
 800d1f0:	bd80      	pop	{r7, pc}
 800d1f2:	46c0      	nop			@ (mov r8, r8)
 800d1f4:	ffff0000 	.word	0xffff0000
 800d1f8:	00008003 	.word	0x00008003

0800d1fc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b084      	sub	sp, #16
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800d206:	200f      	movs	r0, #15
 800d208:	183b      	adds	r3, r7, r0
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	2141      	movs	r1, #65	@ 0x41
 800d20e:	5c52      	ldrb	r2, [r2, r1]
 800d210:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2242      	movs	r2, #66	@ 0x42
 800d216:	2100      	movs	r1, #0
 800d218:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	4a72      	ldr	r2, [pc, #456]	@ (800d3e8 <I2C_ITError+0x1ec>)
 800d21e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2200      	movs	r2, #0
 800d224:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	431a      	orrs	r2, r3
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800d232:	183b      	adds	r3, r7, r0
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	2b28      	cmp	r3, #40	@ 0x28
 800d238:	d007      	beq.n	800d24a <I2C_ITError+0x4e>
 800d23a:	183b      	adds	r3, r7, r0
 800d23c:	781b      	ldrb	r3, [r3, #0]
 800d23e:	2b29      	cmp	r3, #41	@ 0x29
 800d240:	d003      	beq.n	800d24a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800d242:	183b      	adds	r3, r7, r0
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	2b2a      	cmp	r3, #42	@ 0x2a
 800d248:	d10c      	bne.n	800d264 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2103      	movs	r1, #3
 800d24e:	0018      	movs	r0, r3
 800d250:	f000 fac2 	bl	800d7d8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2241      	movs	r2, #65	@ 0x41
 800d258:	2128      	movs	r1, #40	@ 0x28
 800d25a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	4a63      	ldr	r2, [pc, #396]	@ (800d3ec <I2C_ITError+0x1f0>)
 800d260:	635a      	str	r2, [r3, #52]	@ 0x34
 800d262:	e032      	b.n	800d2ca <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800d264:	4a62      	ldr	r2, [pc, #392]	@ (800d3f0 <I2C_ITError+0x1f4>)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	0011      	movs	r1, r2
 800d26a:	0018      	movs	r0, r3
 800d26c:	f000 fab4 	bl	800d7d8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	0018      	movs	r0, r3
 800d274:	f000 f8ed 	bl	800d452 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2241      	movs	r2, #65	@ 0x41
 800d27c:	5c9b      	ldrb	r3, [r3, r2]
 800d27e:	b2db      	uxtb	r3, r3
 800d280:	2b60      	cmp	r3, #96	@ 0x60
 800d282:	d01f      	beq.n	800d2c4 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2241      	movs	r2, #65	@ 0x41
 800d288:	2120      	movs	r1, #32
 800d28a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	699b      	ldr	r3, [r3, #24]
 800d292:	2220      	movs	r2, #32
 800d294:	4013      	ands	r3, r2
 800d296:	2b20      	cmp	r3, #32
 800d298:	d114      	bne.n	800d2c4 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	699b      	ldr	r3, [r3, #24]
 800d2a0:	2210      	movs	r2, #16
 800d2a2:	4013      	ands	r3, r2
 800d2a4:	2b10      	cmp	r3, #16
 800d2a6:	d109      	bne.n	800d2bc <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	2210      	movs	r2, #16
 800d2ae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2b4:	2204      	movs	r2, #4
 800d2b6:	431a      	orrs	r2, r3
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	2220      	movs	r2, #32
 800d2c2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2ce:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d03b      	beq.n	800d350 <I2C_ITError+0x154>
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	2b11      	cmp	r3, #17
 800d2dc:	d002      	beq.n	800d2e4 <I2C_ITError+0xe8>
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	2b21      	cmp	r3, #33	@ 0x21
 800d2e2:	d135      	bne.n	800d350 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	681a      	ldr	r2, [r3, #0]
 800d2ea:	2380      	movs	r3, #128	@ 0x80
 800d2ec:	01db      	lsls	r3, r3, #7
 800d2ee:	401a      	ands	r2, r3
 800d2f0:	2380      	movs	r3, #128	@ 0x80
 800d2f2:	01db      	lsls	r3, r3, #7
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d107      	bne.n	800d308 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	681a      	ldr	r2, [r3, #0]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	493c      	ldr	r1, [pc, #240]	@ (800d3f4 <I2C_ITError+0x1f8>)
 800d304:	400a      	ands	r2, r1
 800d306:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d30c:	0018      	movs	r0, r3
 800d30e:	f7fd feac 	bl	800b06a <HAL_DMA_GetState>
 800d312:	0003      	movs	r3, r0
 800d314:	2b01      	cmp	r3, #1
 800d316:	d016      	beq.n	800d346 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d31c:	4a36      	ldr	r2, [pc, #216]	@ (800d3f8 <I2C_ITError+0x1fc>)
 800d31e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2240      	movs	r2, #64	@ 0x40
 800d324:	2100      	movs	r1, #0
 800d326:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d32c:	0018      	movs	r0, r3
 800d32e:	f7fd fda7 	bl	800ae80 <HAL_DMA_Abort_IT>
 800d332:	1e03      	subs	r3, r0, #0
 800d334:	d051      	beq.n	800d3da <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d33a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d340:	0018      	movs	r0, r3
 800d342:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d344:	e049      	b.n	800d3da <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	0018      	movs	r0, r3
 800d34a:	f000 f859 	bl	800d400 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d34e:	e044      	b.n	800d3da <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d354:	2b00      	cmp	r3, #0
 800d356:	d03b      	beq.n	800d3d0 <I2C_ITError+0x1d4>
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	2b12      	cmp	r3, #18
 800d35c:	d002      	beq.n	800d364 <I2C_ITError+0x168>
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	2b22      	cmp	r3, #34	@ 0x22
 800d362:	d135      	bne.n	800d3d0 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	2380      	movs	r3, #128	@ 0x80
 800d36c:	021b      	lsls	r3, r3, #8
 800d36e:	401a      	ands	r2, r3
 800d370:	2380      	movs	r3, #128	@ 0x80
 800d372:	021b      	lsls	r3, r3, #8
 800d374:	429a      	cmp	r2, r3
 800d376:	d107      	bne.n	800d388 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	681a      	ldr	r2, [r3, #0]
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	491e      	ldr	r1, [pc, #120]	@ (800d3fc <I2C_ITError+0x200>)
 800d384:	400a      	ands	r2, r1
 800d386:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d38c:	0018      	movs	r0, r3
 800d38e:	f7fd fe6c 	bl	800b06a <HAL_DMA_GetState>
 800d392:	0003      	movs	r3, r0
 800d394:	2b01      	cmp	r3, #1
 800d396:	d016      	beq.n	800d3c6 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d39c:	4a16      	ldr	r2, [pc, #88]	@ (800d3f8 <I2C_ITError+0x1fc>)
 800d39e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2240      	movs	r2, #64	@ 0x40
 800d3a4:	2100      	movs	r1, #0
 800d3a6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3ac:	0018      	movs	r0, r3
 800d3ae:	f7fd fd67 	bl	800ae80 <HAL_DMA_Abort_IT>
 800d3b2:	1e03      	subs	r3, r0, #0
 800d3b4:	d013      	beq.n	800d3de <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3c0:	0018      	movs	r0, r3
 800d3c2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d3c4:	e00b      	b.n	800d3de <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	0018      	movs	r0, r3
 800d3ca:	f000 f819 	bl	800d400 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d3ce:	e006      	b.n	800d3de <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	0018      	movs	r0, r3
 800d3d4:	f000 f814 	bl	800d400 <I2C_TreatErrorCallback>
  }
}
 800d3d8:	e002      	b.n	800d3e0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800d3da:	46c0      	nop			@ (mov r8, r8)
 800d3dc:	e000      	b.n	800d3e0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800d3de:	46c0      	nop			@ (mov r8, r8)
}
 800d3e0:	46c0      	nop			@ (mov r8, r8)
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	b004      	add	sp, #16
 800d3e6:	bd80      	pop	{r7, pc}
 800d3e8:	ffff0000 	.word	0xffff0000
 800d3ec:	0800c2e1 	.word	0x0800c2e1
 800d3f0:	00008003 	.word	0x00008003
 800d3f4:	ffffbfff 	.word	0xffffbfff
 800d3f8:	0800d60b 	.word	0x0800d60b
 800d3fc:	ffff7fff 	.word	0xffff7fff

0800d400 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b082      	sub	sp, #8
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2241      	movs	r2, #65	@ 0x41
 800d40c:	5c9b      	ldrb	r3, [r3, r2]
 800d40e:	b2db      	uxtb	r3, r3
 800d410:	2b60      	cmp	r3, #96	@ 0x60
 800d412:	d10f      	bne.n	800d434 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2241      	movs	r2, #65	@ 0x41
 800d418:	2120      	movs	r1, #32
 800d41a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2200      	movs	r2, #0
 800d420:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2240      	movs	r2, #64	@ 0x40
 800d426:	2100      	movs	r1, #0
 800d428:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	0018      	movs	r0, r3
 800d42e:	f7fe fe24 	bl	800c07a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d432:	e00a      	b.n	800d44a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2200      	movs	r2, #0
 800d438:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2240      	movs	r2, #64	@ 0x40
 800d43e:	2100      	movs	r1, #0
 800d440:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	0018      	movs	r0, r3
 800d446:	f7fe fe10 	bl	800c06a <HAL_I2C_ErrorCallback>
}
 800d44a:	46c0      	nop			@ (mov r8, r8)
 800d44c:	46bd      	mov	sp, r7
 800d44e:	b002      	add	sp, #8
 800d450:	bd80      	pop	{r7, pc}

0800d452 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d452:	b580      	push	{r7, lr}
 800d454:	b082      	sub	sp, #8
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	699b      	ldr	r3, [r3, #24]
 800d460:	2202      	movs	r2, #2
 800d462:	4013      	ands	r3, r2
 800d464:	2b02      	cmp	r3, #2
 800d466:	d103      	bne.n	800d470 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	2200      	movs	r2, #0
 800d46e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	699b      	ldr	r3, [r3, #24]
 800d476:	2201      	movs	r2, #1
 800d478:	4013      	ands	r3, r2
 800d47a:	2b01      	cmp	r3, #1
 800d47c:	d007      	beq.n	800d48e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	699a      	ldr	r2, [r3, #24]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	2101      	movs	r1, #1
 800d48a:	430a      	orrs	r2, r1
 800d48c:	619a      	str	r2, [r3, #24]
  }
}
 800d48e:	46c0      	nop			@ (mov r8, r8)
 800d490:	46bd      	mov	sp, r7
 800d492:	b002      	add	sp, #8
 800d494:	bd80      	pop	{r7, pc}
	...

0800d498 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b084      	sub	sp, #16
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4a4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	681a      	ldr	r2, [r3, #0]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	4920      	ldr	r1, [pc, #128]	@ (800d534 <I2C_DMAMasterTransmitCplt+0x9c>)
 800d4b2:	400a      	ands	r2, r1
 800d4b4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d4ba:	b29b      	uxth	r3, r3
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d105      	bne.n	800d4cc <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2120      	movs	r1, #32
 800d4c4:	0018      	movs	r0, r3
 800d4c6:	f000 f8f9 	bl	800d6bc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d4ca:	e02e      	b.n	800d52a <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4d0:	68fa      	ldr	r2, [r7, #12]
 800d4d2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800d4d4:	189a      	adds	r2, r3, r2
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d4de:	b29b      	uxth	r3, r3
 800d4e0:	2bff      	cmp	r3, #255	@ 0xff
 800d4e2:	d903      	bls.n	800d4ec <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	22ff      	movs	r2, #255	@ 0xff
 800d4e8:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d4ea:	e004      	b.n	800d4f6 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d4f0:	b29a      	uxth	r2, r3
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4fe:	0019      	movs	r1, r3
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	3328      	adds	r3, #40	@ 0x28
 800d506:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800d50c:	f7fd fc12 	bl	800ad34 <HAL_DMA_Start_IT>
 800d510:	1e03      	subs	r3, r0, #0
 800d512:	d005      	beq.n	800d520 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	2110      	movs	r1, #16
 800d518:	0018      	movs	r0, r3
 800d51a:	f7ff fe6f 	bl	800d1fc <I2C_ITError>
}
 800d51e:	e004      	b.n	800d52a <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	2140      	movs	r1, #64	@ 0x40
 800d524:	0018      	movs	r0, r3
 800d526:	f000 f8c9 	bl	800d6bc <I2C_Enable_IRQ>
}
 800d52a:	46c0      	nop			@ (mov r8, r8)
 800d52c:	46bd      	mov	sp, r7
 800d52e:	b004      	add	sp, #16
 800d530:	bd80      	pop	{r7, pc}
 800d532:	46c0      	nop			@ (mov r8, r8)
 800d534:	ffffbfff 	.word	0xffffbfff

0800d538 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d544:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	681a      	ldr	r2, [r3, #0]
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	4920      	ldr	r1, [pc, #128]	@ (800d5d4 <I2C_DMAMasterReceiveCplt+0x9c>)
 800d552:	400a      	ands	r2, r1
 800d554:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d55a:	b29b      	uxth	r3, r3
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d105      	bne.n	800d56c <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	2120      	movs	r1, #32
 800d564:	0018      	movs	r0, r3
 800d566:	f000 f8a9 	bl	800d6bc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800d56a:	e02e      	b.n	800d5ca <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d570:	68fa      	ldr	r2, [r7, #12]
 800d572:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800d574:	189a      	adds	r2, r3, r2
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d57e:	b29b      	uxth	r3, r3
 800d580:	2bff      	cmp	r3, #255	@ 0xff
 800d582:	d903      	bls.n	800d58c <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	22ff      	movs	r2, #255	@ 0xff
 800d588:	851a      	strh	r2, [r3, #40]	@ 0x28
 800d58a:	e004      	b.n	800d596 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d590:	b29a      	uxth	r2, r3
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	3324      	adds	r3, #36	@ 0x24
 800d5a0:	0019      	movs	r1, r3
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5a6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800d5ac:	f7fd fbc2 	bl	800ad34 <HAL_DMA_Start_IT>
 800d5b0:	1e03      	subs	r3, r0, #0
 800d5b2:	d005      	beq.n	800d5c0 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2110      	movs	r1, #16
 800d5b8:	0018      	movs	r0, r3
 800d5ba:	f7ff fe1f 	bl	800d1fc <I2C_ITError>
}
 800d5be:	e004      	b.n	800d5ca <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	2140      	movs	r1, #64	@ 0x40
 800d5c4:	0018      	movs	r0, r3
 800d5c6:	f000 f879 	bl	800d6bc <I2C_Enable_IRQ>
}
 800d5ca:	46c0      	nop			@ (mov r8, r8)
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	b004      	add	sp, #16
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	46c0      	nop			@ (mov r8, r8)
 800d5d4:	ffff7fff 	.word	0xffff7fff

0800d5d8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b084      	sub	sp, #16
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5e4:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	685a      	ldr	r2, [r3, #4]
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	2180      	movs	r1, #128	@ 0x80
 800d5f2:	0209      	lsls	r1, r1, #8
 800d5f4:	430a      	orrs	r2, r1
 800d5f6:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2110      	movs	r1, #16
 800d5fc:	0018      	movs	r0, r3
 800d5fe:	f7ff fdfd 	bl	800d1fc <I2C_ITError>
}
 800d602:	46c0      	nop			@ (mov r8, r8)
 800d604:	46bd      	mov	sp, r7
 800d606:	b004      	add	sp, #16
 800d608:	bd80      	pop	{r7, pc}

0800d60a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d60a:	b580      	push	{r7, lr}
 800d60c:	b084      	sub	sp, #16
 800d60e:	af00      	add	r7, sp, #0
 800d610:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d616:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d003      	beq.n	800d628 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d624:	2200      	movs	r2, #0
 800d626:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d003      	beq.n	800d638 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d634:	2200      	movs	r2, #0
 800d636:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	0018      	movs	r0, r3
 800d63c:	f7ff fee0 	bl	800d400 <I2C_TreatErrorCallback>
}
 800d640:	46c0      	nop			@ (mov r8, r8)
 800d642:	46bd      	mov	sp, r7
 800d644:	b004      	add	sp, #16
 800d646:	bd80      	pop	{r7, pc}

0800d648 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d648:	b590      	push	{r4, r7, lr}
 800d64a:	b087      	sub	sp, #28
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	0008      	movs	r0, r1
 800d652:	0011      	movs	r1, r2
 800d654:	607b      	str	r3, [r7, #4]
 800d656:	240a      	movs	r4, #10
 800d658:	193b      	adds	r3, r7, r4
 800d65a:	1c02      	adds	r2, r0, #0
 800d65c:	801a      	strh	r2, [r3, #0]
 800d65e:	2009      	movs	r0, #9
 800d660:	183b      	adds	r3, r7, r0
 800d662:	1c0a      	adds	r2, r1, #0
 800d664:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d666:	193b      	adds	r3, r7, r4
 800d668:	881b      	ldrh	r3, [r3, #0]
 800d66a:	059b      	lsls	r3, r3, #22
 800d66c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d66e:	183b      	adds	r3, r7, r0
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	0419      	lsls	r1, r3, #16
 800d674:	23ff      	movs	r3, #255	@ 0xff
 800d676:	041b      	lsls	r3, r3, #16
 800d678:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d67a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d682:	4313      	orrs	r3, r2
 800d684:	005b      	lsls	r3, r3, #1
 800d686:	085b      	lsrs	r3, r3, #1
 800d688:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	685b      	ldr	r3, [r3, #4]
 800d690:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d692:	0d51      	lsrs	r1, r2, #21
 800d694:	2280      	movs	r2, #128	@ 0x80
 800d696:	00d2      	lsls	r2, r2, #3
 800d698:	400a      	ands	r2, r1
 800d69a:	4907      	ldr	r1, [pc, #28]	@ (800d6b8 <I2C_TransferConfig+0x70>)
 800d69c:	430a      	orrs	r2, r1
 800d69e:	43d2      	mvns	r2, r2
 800d6a0:	401a      	ands	r2, r3
 800d6a2:	0011      	movs	r1, r2
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	697a      	ldr	r2, [r7, #20]
 800d6aa:	430a      	orrs	r2, r1
 800d6ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d6ae:	46c0      	nop			@ (mov r8, r8)
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	b007      	add	sp, #28
 800d6b4:	bd90      	pop	{r4, r7, pc}
 800d6b6:	46c0      	nop			@ (mov r8, r8)
 800d6b8:	03ff63ff 	.word	0x03ff63ff

0800d6bc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	000a      	movs	r2, r1
 800d6c6:	1cbb      	adds	r3, r7, #2
 800d6c8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d6d2:	4b3e      	ldr	r3, [pc, #248]	@ (800d7cc <I2C_Enable_IRQ+0x110>)
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d035      	beq.n	800d744 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800d6dc:	4b3c      	ldr	r3, [pc, #240]	@ (800d7d0 <I2C_Enable_IRQ+0x114>)
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	d030      	beq.n	800d744 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800d6e6:	4b3b      	ldr	r3, [pc, #236]	@ (800d7d4 <I2C_Enable_IRQ+0x118>)
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d02b      	beq.n	800d744 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d6ec:	1cbb      	adds	r3, r7, #2
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	5e9b      	ldrsh	r3, [r3, r2]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	da03      	bge.n	800d6fe <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	22b8      	movs	r2, #184	@ 0xb8
 800d6fa:	4313      	orrs	r3, r2
 800d6fc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d6fe:	1cbb      	adds	r3, r7, #2
 800d700:	881b      	ldrh	r3, [r3, #0]
 800d702:	2201      	movs	r2, #1
 800d704:	4013      	ands	r3, r2
 800d706:	d003      	beq.n	800d710 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	22f2      	movs	r2, #242	@ 0xf2
 800d70c:	4313      	orrs	r3, r2
 800d70e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d710:	1cbb      	adds	r3, r7, #2
 800d712:	881b      	ldrh	r3, [r3, #0]
 800d714:	2202      	movs	r2, #2
 800d716:	4013      	ands	r3, r2
 800d718:	d003      	beq.n	800d722 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	22f4      	movs	r2, #244	@ 0xf4
 800d71e:	4313      	orrs	r3, r2
 800d720:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d722:	1cbb      	adds	r3, r7, #2
 800d724:	881b      	ldrh	r3, [r3, #0]
 800d726:	2b10      	cmp	r3, #16
 800d728:	d103      	bne.n	800d732 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2290      	movs	r2, #144	@ 0x90
 800d72e:	4313      	orrs	r3, r2
 800d730:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d732:	1cbb      	adds	r3, r7, #2
 800d734:	881b      	ldrh	r3, [r3, #0]
 800d736:	2b20      	cmp	r3, #32
 800d738:	d13c      	bne.n	800d7b4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2220      	movs	r2, #32
 800d73e:	4313      	orrs	r3, r2
 800d740:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d742:	e037      	b.n	800d7b4 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d744:	1cbb      	adds	r3, r7, #2
 800d746:	2200      	movs	r2, #0
 800d748:	5e9b      	ldrsh	r3, [r3, r2]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	da03      	bge.n	800d756 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	22b8      	movs	r2, #184	@ 0xb8
 800d752:	4313      	orrs	r3, r2
 800d754:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d756:	1cbb      	adds	r3, r7, #2
 800d758:	881b      	ldrh	r3, [r3, #0]
 800d75a:	2201      	movs	r2, #1
 800d75c:	4013      	ands	r3, r2
 800d75e:	d003      	beq.n	800d768 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	22f2      	movs	r2, #242	@ 0xf2
 800d764:	4313      	orrs	r3, r2
 800d766:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d768:	1cbb      	adds	r3, r7, #2
 800d76a:	881b      	ldrh	r3, [r3, #0]
 800d76c:	2202      	movs	r2, #2
 800d76e:	4013      	ands	r3, r2
 800d770:	d003      	beq.n	800d77a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	22f4      	movs	r2, #244	@ 0xf4
 800d776:	4313      	orrs	r3, r2
 800d778:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d77a:	1cbb      	adds	r3, r7, #2
 800d77c:	881b      	ldrh	r3, [r3, #0]
 800d77e:	2b10      	cmp	r3, #16
 800d780:	d103      	bne.n	800d78a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	2290      	movs	r2, #144	@ 0x90
 800d786:	4313      	orrs	r3, r2
 800d788:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d78a:	1cbb      	adds	r3, r7, #2
 800d78c:	881b      	ldrh	r3, [r3, #0]
 800d78e:	2b20      	cmp	r3, #32
 800d790:	d103      	bne.n	800d79a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	2260      	movs	r2, #96	@ 0x60
 800d796:	4313      	orrs	r3, r2
 800d798:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d79e:	4b0d      	ldr	r3, [pc, #52]	@ (800d7d4 <I2C_Enable_IRQ+0x118>)
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d007      	beq.n	800d7b4 <I2C_Enable_IRQ+0xf8>
 800d7a4:	1cbb      	adds	r3, r7, #2
 800d7a6:	881b      	ldrh	r3, [r3, #0]
 800d7a8:	2b40      	cmp	r3, #64	@ 0x40
 800d7aa:	d103      	bne.n	800d7b4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	2240      	movs	r2, #64	@ 0x40
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	6819      	ldr	r1, [r3, #0]
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	68fa      	ldr	r2, [r7, #12]
 800d7c0:	430a      	orrs	r2, r1
 800d7c2:	601a      	str	r2, [r3, #0]
}
 800d7c4:	46c0      	nop			@ (mov r8, r8)
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	b004      	add	sp, #16
 800d7ca:	bd80      	pop	{r7, pc}
 800d7cc:	0800c4e1 	.word	0x0800c4e1
 800d7d0:	0800c911 	.word	0x0800c911
 800d7d4:	0800c6d9 	.word	0x0800c6d9

0800d7d8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b084      	sub	sp, #16
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	000a      	movs	r2, r1
 800d7e2:	1cbb      	adds	r3, r7, #2
 800d7e4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d7ea:	1cbb      	adds	r3, r7, #2
 800d7ec:	881b      	ldrh	r3, [r3, #0]
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	4013      	ands	r3, r2
 800d7f2:	d010      	beq.n	800d816 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	2242      	movs	r2, #66	@ 0x42
 800d7f8:	4313      	orrs	r3, r2
 800d7fa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2241      	movs	r2, #65	@ 0x41
 800d800:	5c9b      	ldrb	r3, [r3, r2]
 800d802:	b2db      	uxtb	r3, r3
 800d804:	001a      	movs	r2, r3
 800d806:	2328      	movs	r3, #40	@ 0x28
 800d808:	4013      	ands	r3, r2
 800d80a:	2b28      	cmp	r3, #40	@ 0x28
 800d80c:	d003      	beq.n	800d816 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	22b0      	movs	r2, #176	@ 0xb0
 800d812:	4313      	orrs	r3, r2
 800d814:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d816:	1cbb      	adds	r3, r7, #2
 800d818:	881b      	ldrh	r3, [r3, #0]
 800d81a:	2202      	movs	r2, #2
 800d81c:	4013      	ands	r3, r2
 800d81e:	d010      	beq.n	800d842 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	2244      	movs	r2, #68	@ 0x44
 800d824:	4313      	orrs	r3, r2
 800d826:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2241      	movs	r2, #65	@ 0x41
 800d82c:	5c9b      	ldrb	r3, [r3, r2]
 800d82e:	b2db      	uxtb	r3, r3
 800d830:	001a      	movs	r2, r3
 800d832:	2328      	movs	r3, #40	@ 0x28
 800d834:	4013      	ands	r3, r2
 800d836:	2b28      	cmp	r3, #40	@ 0x28
 800d838:	d003      	beq.n	800d842 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	22b0      	movs	r2, #176	@ 0xb0
 800d83e:	4313      	orrs	r3, r2
 800d840:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d842:	1cbb      	adds	r3, r7, #2
 800d844:	2200      	movs	r2, #0
 800d846:	5e9b      	ldrsh	r3, [r3, r2]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	da03      	bge.n	800d854 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	22b8      	movs	r2, #184	@ 0xb8
 800d850:	4313      	orrs	r3, r2
 800d852:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d854:	1cbb      	adds	r3, r7, #2
 800d856:	881b      	ldrh	r3, [r3, #0]
 800d858:	2b10      	cmp	r3, #16
 800d85a:	d103      	bne.n	800d864 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	2290      	movs	r2, #144	@ 0x90
 800d860:	4313      	orrs	r3, r2
 800d862:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d864:	1cbb      	adds	r3, r7, #2
 800d866:	881b      	ldrh	r3, [r3, #0]
 800d868:	2b20      	cmp	r3, #32
 800d86a:	d103      	bne.n	800d874 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2220      	movs	r2, #32
 800d870:	4313      	orrs	r3, r2
 800d872:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d874:	1cbb      	adds	r3, r7, #2
 800d876:	881b      	ldrh	r3, [r3, #0]
 800d878:	2b40      	cmp	r3, #64	@ 0x40
 800d87a:	d103      	bne.n	800d884 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	2240      	movs	r2, #64	@ 0x40
 800d880:	4313      	orrs	r3, r2
 800d882:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	681a      	ldr	r2, [r3, #0]
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	43d9      	mvns	r1, r3
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	400a      	ands	r2, r1
 800d894:	601a      	str	r2, [r3, #0]
}
 800d896:	46c0      	nop			@ (mov r8, r8)
 800d898:	46bd      	mov	sp, r7
 800d89a:	b004      	add	sp, #16
 800d89c:	bd80      	pop	{r7, pc}
	...

0800d8a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2241      	movs	r2, #65	@ 0x41
 800d8ae:	5c9b      	ldrb	r3, [r3, r2]
 800d8b0:	b2db      	uxtb	r3, r3
 800d8b2:	2b20      	cmp	r3, #32
 800d8b4:	d138      	bne.n	800d928 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2240      	movs	r2, #64	@ 0x40
 800d8ba:	5c9b      	ldrb	r3, [r3, r2]
 800d8bc:	2b01      	cmp	r3, #1
 800d8be:	d101      	bne.n	800d8c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d8c0:	2302      	movs	r3, #2
 800d8c2:	e032      	b.n	800d92a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2240      	movs	r2, #64	@ 0x40
 800d8c8:	2101      	movs	r1, #1
 800d8ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2241      	movs	r2, #65	@ 0x41
 800d8d0:	2124      	movs	r1, #36	@ 0x24
 800d8d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	681a      	ldr	r2, [r3, #0]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	2101      	movs	r1, #1
 800d8e0:	438a      	bics	r2, r1
 800d8e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	681a      	ldr	r2, [r3, #0]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	4911      	ldr	r1, [pc, #68]	@ (800d934 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800d8f0:	400a      	ands	r2, r1
 800d8f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	6819      	ldr	r1, [r3, #0]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	683a      	ldr	r2, [r7, #0]
 800d900:	430a      	orrs	r2, r1
 800d902:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	2101      	movs	r1, #1
 800d910:	430a      	orrs	r2, r1
 800d912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2241      	movs	r2, #65	@ 0x41
 800d918:	2120      	movs	r1, #32
 800d91a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2240      	movs	r2, #64	@ 0x40
 800d920:	2100      	movs	r1, #0
 800d922:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800d924:	2300      	movs	r3, #0
 800d926:	e000      	b.n	800d92a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d928:	2302      	movs	r3, #2
  }
}
 800d92a:	0018      	movs	r0, r3
 800d92c:	46bd      	mov	sp, r7
 800d92e:	b002      	add	sp, #8
 800d930:	bd80      	pop	{r7, pc}
 800d932:	46c0      	nop			@ (mov r8, r8)
 800d934:	ffffefff 	.word	0xffffefff

0800d938 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b084      	sub	sp, #16
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2241      	movs	r2, #65	@ 0x41
 800d946:	5c9b      	ldrb	r3, [r3, r2]
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	2b20      	cmp	r3, #32
 800d94c:	d139      	bne.n	800d9c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2240      	movs	r2, #64	@ 0x40
 800d952:	5c9b      	ldrb	r3, [r3, r2]
 800d954:	2b01      	cmp	r3, #1
 800d956:	d101      	bne.n	800d95c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d958:	2302      	movs	r3, #2
 800d95a:	e033      	b.n	800d9c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2240      	movs	r2, #64	@ 0x40
 800d960:	2101      	movs	r1, #1
 800d962:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2241      	movs	r2, #65	@ 0x41
 800d968:	2124      	movs	r1, #36	@ 0x24
 800d96a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	2101      	movs	r1, #1
 800d978:	438a      	bics	r2, r1
 800d97a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	4a11      	ldr	r2, [pc, #68]	@ (800d9cc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800d988:	4013      	ands	r3, r2
 800d98a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	021b      	lsls	r3, r3, #8
 800d990:	68fa      	ldr	r2, [r7, #12]
 800d992:	4313      	orrs	r3, r2
 800d994:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	68fa      	ldr	r2, [r7, #12]
 800d99c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	681a      	ldr	r2, [r3, #0]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	2101      	movs	r1, #1
 800d9aa:	430a      	orrs	r2, r1
 800d9ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2241      	movs	r2, #65	@ 0x41
 800d9b2:	2120      	movs	r1, #32
 800d9b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2240      	movs	r2, #64	@ 0x40
 800d9ba:	2100      	movs	r1, #0
 800d9bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	e000      	b.n	800d9c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d9c2:	2302      	movs	r3, #2
  }
}
 800d9c4:	0018      	movs	r0, r3
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	b004      	add	sp, #16
 800d9ca:	bd80      	pop	{r7, pc}
 800d9cc:	fffff0ff 	.word	0xfffff0ff

0800d9d0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b088      	sub	sp, #32
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d101      	bne.n	800d9e2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800d9de:	2301      	movs	r3, #1
 800d9e0:	e0e1      	b.n	800dba6 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2235      	movs	r2, #53	@ 0x35
 800d9e6:	5c9b      	ldrb	r3, [r3, r2]
 800d9e8:	b2db      	uxtb	r3, r3
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d107      	bne.n	800d9fe <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2234      	movs	r2, #52	@ 0x34
 800d9f2:	2100      	movs	r1, #0
 800d9f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	0018      	movs	r0, r3
 800d9fa:	f7f8 fbd3 	bl	80061a4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2235      	movs	r2, #53	@ 0x35
 800da02:	2102      	movs	r1, #2
 800da04:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	69da      	ldr	r2, [r3, #28]
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4967      	ldr	r1, [pc, #412]	@ (800dbb0 <HAL_I2S_Init+0x1e0>)
 800da12:	400a      	ands	r2, r1
 800da14:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	2202      	movs	r2, #2
 800da1c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	695b      	ldr	r3, [r3, #20]
 800da22:	2b02      	cmp	r3, #2
 800da24:	d073      	beq.n	800db0e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	68db      	ldr	r3, [r3, #12]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d102      	bne.n	800da34 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800da2e:	2310      	movs	r3, #16
 800da30:	617b      	str	r3, [r7, #20]
 800da32:	e001      	b.n	800da38 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800da34:	2320      	movs	r3, #32
 800da36:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	689b      	ldr	r3, [r3, #8]
 800da3c:	2b20      	cmp	r3, #32
 800da3e:	d802      	bhi.n	800da46 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	005b      	lsls	r3, r3, #1
 800da44:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800da46:	f002 fe8d 	bl	8010764 <HAL_RCC_GetSysClockFreq>
 800da4a:	0003      	movs	r3, r0
 800da4c:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	691a      	ldr	r2, [r3, #16]
 800da52:	2380      	movs	r3, #128	@ 0x80
 800da54:	009b      	lsls	r3, r3, #2
 800da56:	429a      	cmp	r2, r3
 800da58:	d131      	bne.n	800dabe <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	68db      	ldr	r3, [r3, #12]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d016      	beq.n	800da90 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	009b      	lsls	r3, r3, #2
 800da66:	0019      	movs	r1, r3
 800da68:	68f8      	ldr	r0, [r7, #12]
 800da6a:	f7f2 fb69 	bl	8000140 <__udivsi3>
 800da6e:	0003      	movs	r3, r0
 800da70:	001a      	movs	r2, r3
 800da72:	0013      	movs	r3, r2
 800da74:	009b      	lsls	r3, r3, #2
 800da76:	189b      	adds	r3, r3, r2
 800da78:	005b      	lsls	r3, r3, #1
 800da7a:	001a      	movs	r2, r3
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	695b      	ldr	r3, [r3, #20]
 800da80:	0019      	movs	r1, r3
 800da82:	0010      	movs	r0, r2
 800da84:	f7f2 fb5c 	bl	8000140 <__udivsi3>
 800da88:	0003      	movs	r3, r0
 800da8a:	3305      	adds	r3, #5
 800da8c:	613b      	str	r3, [r7, #16]
 800da8e:	e02a      	b.n	800dae6 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	00db      	lsls	r3, r3, #3
 800da94:	0019      	movs	r1, r3
 800da96:	68f8      	ldr	r0, [r7, #12]
 800da98:	f7f2 fb52 	bl	8000140 <__udivsi3>
 800da9c:	0003      	movs	r3, r0
 800da9e:	001a      	movs	r2, r3
 800daa0:	0013      	movs	r3, r2
 800daa2:	009b      	lsls	r3, r3, #2
 800daa4:	189b      	adds	r3, r3, r2
 800daa6:	005b      	lsls	r3, r3, #1
 800daa8:	001a      	movs	r2, r3
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	695b      	ldr	r3, [r3, #20]
 800daae:	0019      	movs	r1, r3
 800dab0:	0010      	movs	r0, r2
 800dab2:	f7f2 fb45 	bl	8000140 <__udivsi3>
 800dab6:	0003      	movs	r3, r0
 800dab8:	3305      	adds	r3, #5
 800daba:	613b      	str	r3, [r7, #16]
 800dabc:	e013      	b.n	800dae6 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800dabe:	6979      	ldr	r1, [r7, #20]
 800dac0:	68f8      	ldr	r0, [r7, #12]
 800dac2:	f7f2 fb3d 	bl	8000140 <__udivsi3>
 800dac6:	0003      	movs	r3, r0
 800dac8:	001a      	movs	r2, r3
 800daca:	0013      	movs	r3, r2
 800dacc:	009b      	lsls	r3, r3, #2
 800dace:	189b      	adds	r3, r3, r2
 800dad0:	005b      	lsls	r3, r3, #1
 800dad2:	001a      	movs	r2, r3
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	695b      	ldr	r3, [r3, #20]
 800dad8:	0019      	movs	r1, r3
 800dada:	0010      	movs	r0, r2
 800dadc:	f7f2 fb30 	bl	8000140 <__udivsi3>
 800dae0:	0003      	movs	r3, r0
 800dae2:	3305      	adds	r3, #5
 800dae4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	210a      	movs	r1, #10
 800daea:	0018      	movs	r0, r3
 800daec:	f7f2 fb28 	bl	8000140 <__udivsi3>
 800daf0:	0003      	movs	r3, r0
 800daf2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	2201      	movs	r2, #1
 800daf8:	4013      	ands	r3, r2
 800dafa:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800dafc:	693a      	ldr	r2, [r7, #16]
 800dafe:	69bb      	ldr	r3, [r7, #24]
 800db00:	1ad3      	subs	r3, r2, r3
 800db02:	085b      	lsrs	r3, r3, #1
 800db04:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800db06:	69bb      	ldr	r3, [r7, #24]
 800db08:	021b      	lsls	r3, r3, #8
 800db0a:	61bb      	str	r3, [r7, #24]
 800db0c:	e003      	b.n	800db16 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800db0e:	2302      	movs	r3, #2
 800db10:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800db12:	2300      	movs	r3, #0
 800db14:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800db16:	69fb      	ldr	r3, [r7, #28]
 800db18:	2b01      	cmp	r3, #1
 800db1a:	d902      	bls.n	800db22 <HAL_I2S_Init+0x152>
 800db1c:	69fb      	ldr	r3, [r7, #28]
 800db1e:	2bff      	cmp	r3, #255	@ 0xff
 800db20:	d907      	bls.n	800db32 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db26:	2210      	movs	r2, #16
 800db28:	431a      	orrs	r2, r3
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800db2e:	2301      	movs	r3, #1
 800db30:	e039      	b.n	800dba6 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	691a      	ldr	r2, [r3, #16]
 800db36:	69bb      	ldr	r3, [r7, #24]
 800db38:	431a      	orrs	r2, r3
 800db3a:	0011      	movs	r1, r2
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	69fa      	ldr	r2, [r7, #28]
 800db42:	430a      	orrs	r2, r1
 800db44:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	69db      	ldr	r3, [r3, #28]
 800db4c:	4a18      	ldr	r2, [pc, #96]	@ (800dbb0 <HAL_I2S_Init+0x1e0>)
 800db4e:	401a      	ands	r2, r3
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6859      	ldr	r1, [r3, #4]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	689b      	ldr	r3, [r3, #8]
 800db58:	4319      	orrs	r1, r3
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	68db      	ldr	r3, [r3, #12]
 800db5e:	4319      	orrs	r1, r3
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	699b      	ldr	r3, [r3, #24]
 800db64:	430b      	orrs	r3, r1
 800db66:	431a      	orrs	r2, r3
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	2180      	movs	r1, #128	@ 0x80
 800db6e:	0109      	lsls	r1, r1, #4
 800db70:	430a      	orrs	r2, r1
 800db72:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	689b      	ldr	r3, [r3, #8]
 800db78:	2b30      	cmp	r3, #48	@ 0x30
 800db7a:	d003      	beq.n	800db84 <HAL_I2S_Init+0x1b4>
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	689b      	ldr	r3, [r3, #8]
 800db80:	2bb0      	cmp	r3, #176	@ 0xb0
 800db82:	d108      	bne.n	800db96 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	69da      	ldr	r2, [r3, #28]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	2180      	movs	r1, #128	@ 0x80
 800db90:	0149      	lsls	r1, r1, #5
 800db92:	430a      	orrs	r2, r1
 800db94:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2200      	movs	r2, #0
 800db9a:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2235      	movs	r2, #53	@ 0x35
 800dba0:	2101      	movs	r1, #1
 800dba2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dba4:	2300      	movs	r3, #0
}
 800dba6:	0018      	movs	r0, r3
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	b008      	add	sp, #32
 800dbac:	bd80      	pop	{r7, pc}
 800dbae:	46c0      	nop			@ (mov r8, r8)
 800dbb0:	fffff040 	.word	0xfffff040

0800dbb4 <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b082      	sub	sp, #8
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d101      	bne.n	800dbc6 <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	e01b      	b.n	800dbfe <HAL_I2S_DeInit+0x4a>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2235      	movs	r2, #53	@ 0x35
 800dbca:	2102      	movs	r1, #2
 800dbcc:	5499      	strb	r1, [r3, r2]

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	69da      	ldr	r2, [r3, #28]
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	490b      	ldr	r1, [pc, #44]	@ (800dc08 <HAL_I2S_DeInit+0x54>)
 800dbda:	400a      	ands	r2, r1
 800dbdc:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	0018      	movs	r0, r3
 800dbe2:	f7f8 fb53 	bl	800628c <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2200      	movs	r2, #0
 800dbea:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2235      	movs	r2, #53	@ 0x35
 800dbf0:	2100      	movs	r1, #0
 800dbf2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2234      	movs	r2, #52	@ 0x34
 800dbf8:	2100      	movs	r1, #0
 800dbfa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dbfc:	2300      	movs	r3, #0
}
 800dbfe:	0018      	movs	r0, r3
 800dc00:	46bd      	mov	sp, r7
 800dc02:	b002      	add	sp, #8
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	46c0      	nop			@ (mov r8, r8)
 800dc08:	fffffbff 	.word	0xfffffbff

0800dc0c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b086      	sub	sp, #24
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	60f8      	str	r0, [r7, #12]
 800dc14:	60b9      	str	r1, [r7, #8]
 800dc16:	1dbb      	adds	r3, r7, #6
 800dc18:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d003      	beq.n	800dc28 <HAL_I2S_Receive_DMA+0x1c>
 800dc20:	1dbb      	adds	r3, r7, #6
 800dc22:	881b      	ldrh	r3, [r3, #0]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d101      	bne.n	800dc2c <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800dc28:	2301      	movs	r3, #1
 800dc2a:	e0a6      	b.n	800dd7a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	2234      	movs	r2, #52	@ 0x34
 800dc30:	5c9b      	ldrb	r3, [r3, r2]
 800dc32:	b2db      	uxtb	r3, r3
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d101      	bne.n	800dc3c <HAL_I2S_Receive_DMA+0x30>
 800dc38:	2302      	movs	r3, #2
 800dc3a:	e09e      	b.n	800dd7a <HAL_I2S_Receive_DMA+0x16e>
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	2234      	movs	r2, #52	@ 0x34
 800dc40:	2101      	movs	r1, #1
 800dc42:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2235      	movs	r2, #53	@ 0x35
 800dc48:	5c9b      	ldrb	r3, [r3, r2]
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d005      	beq.n	800dc5c <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	2234      	movs	r2, #52	@ 0x34
 800dc54:	2100      	movs	r1, #0
 800dc56:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800dc58:	2302      	movs	r3, #2
 800dc5a:	e08e      	b.n	800dd7a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	2235      	movs	r2, #53	@ 0x35
 800dc60:	2104      	movs	r1, #4
 800dc62:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2200      	movs	r2, #0
 800dc68:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	68ba      	ldr	r2, [r7, #8]
 800dc6e:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	69db      	ldr	r3, [r3, #28]
 800dc76:	2207      	movs	r2, #7
 800dc78:	4013      	ands	r3, r2
 800dc7a:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	2b03      	cmp	r3, #3
 800dc80:	d002      	beq.n	800dc88 <HAL_I2S_Receive_DMA+0x7c>
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	2b05      	cmp	r3, #5
 800dc86:	d10c      	bne.n	800dca2 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800dc88:	1dbb      	adds	r3, r7, #6
 800dc8a:	881b      	ldrh	r3, [r3, #0]
 800dc8c:	18db      	adds	r3, r3, r3
 800dc8e:	b29a      	uxth	r2, r3
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800dc94:	1dbb      	adds	r3, r7, #6
 800dc96:	881b      	ldrh	r3, [r3, #0]
 800dc98:	18db      	adds	r3, r3, r3
 800dc9a:	b29a      	uxth	r2, r3
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dca0:	e007      	b.n	800dcb2 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	1dba      	adds	r2, r7, #6
 800dca6:	8812      	ldrh	r2, [r2, #0]
 800dca8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	1dba      	adds	r2, r7, #6
 800dcae:	8812      	ldrh	r2, [r2, #0]
 800dcb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcb6:	4a33      	ldr	r2, [pc, #204]	@ (800dd84 <HAL_I2S_Receive_DMA+0x178>)
 800dcb8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcbe:	4a32      	ldr	r2, [pc, #200]	@ (800dd88 <HAL_I2S_Receive_DMA+0x17c>)
 800dcc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcc6:	4a31      	ldr	r2, [pc, #196]	@ (800dd8c <HAL_I2S_Receive_DMA+0x180>)
 800dcc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	69da      	ldr	r2, [r3, #28]
 800dcd0:	23c0      	movs	r3, #192	@ 0xc0
 800dcd2:	009b      	lsls	r3, r3, #2
 800dcd4:	401a      	ands	r2, r3
 800dcd6:	23c0      	movs	r3, #192	@ 0xc0
 800dcd8:	009b      	lsls	r3, r3, #2
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d10a      	bne.n	800dcf4 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800dcde:	2300      	movs	r3, #0
 800dce0:	613b      	str	r3, [r7, #16]
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	68db      	ldr	r3, [r3, #12]
 800dce8:	613b      	str	r3, [r7, #16]
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	689b      	ldr	r3, [r3, #8]
 800dcf0:	613b      	str	r3, [r7, #16]
 800dcf2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	330c      	adds	r3, #12
 800dcfe:	0019      	movs	r1, r3
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd04:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd0a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800dd0c:	f7fd f812 	bl	800ad34 <HAL_DMA_Start_IT>
 800dd10:	1e03      	subs	r3, r0, #0
 800dd12:	d00f      	beq.n	800dd34 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd18:	2208      	movs	r2, #8
 800dd1a:	431a      	orrs	r2, r3
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	2235      	movs	r2, #53	@ 0x35
 800dd24:	2101      	movs	r1, #1
 800dd26:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2234      	movs	r2, #52	@ 0x34
 800dd2c:	2100      	movs	r1, #0
 800dd2e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800dd30:	2301      	movs	r3, #1
 800dd32:	e022      	b.n	800dd7a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	69da      	ldr	r2, [r3, #28]
 800dd3a:	2380      	movs	r3, #128	@ 0x80
 800dd3c:	00db      	lsls	r3, r3, #3
 800dd3e:	4013      	ands	r3, r2
 800dd40:	d108      	bne.n	800dd54 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	69da      	ldr	r2, [r3, #28]
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	2180      	movs	r1, #128	@ 0x80
 800dd4e:	00c9      	lsls	r1, r1, #3
 800dd50:	430a      	orrs	r2, r1
 800dd52:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	685b      	ldr	r3, [r3, #4]
 800dd5a:	2201      	movs	r2, #1
 800dd5c:	4013      	ands	r3, r2
 800dd5e:	d107      	bne.n	800dd70 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	685a      	ldr	r2, [r3, #4]
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	2101      	movs	r1, #1
 800dd6c:	430a      	orrs	r2, r1
 800dd6e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	2234      	movs	r2, #52	@ 0x34
 800dd74:	2100      	movs	r1, #0
 800dd76:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800dd78:	2300      	movs	r3, #0
}
 800dd7a:	0018      	movs	r0, r3
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	b006      	add	sp, #24
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	46c0      	nop			@ (mov r8, r8)
 800dd84:	0800df8d 	.word	0x0800df8d
 800dd88:	0800df49 	.word	0x0800df49
 800dd8c:	0800dfab 	.word	0x0800dfab

0800dd90 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b086      	sub	sp, #24
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dd98:	2317      	movs	r3, #23
 800dd9a:	18fb      	adds	r3, r7, r3
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	685a      	ldr	r2, [r3, #4]
 800dda4:	2380      	movs	r3, #128	@ 0x80
 800dda6:	009b      	lsls	r3, r3, #2
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d003      	beq.n	800ddb4 <HAL_I2S_DMAStop+0x24>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d158      	bne.n	800de66 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d010      	beq.n	800ddde <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddc0:	0018      	movs	r0, r3
 800ddc2:	f7fd f81d 	bl	800ae00 <HAL_DMA_Abort>
 800ddc6:	1e03      	subs	r3, r0, #0
 800ddc8:	d009      	beq.n	800ddde <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddce:	2208      	movs	r2, #8
 800ddd0:	431a      	orrs	r2, r3
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800ddd6:	2317      	movs	r3, #23
 800ddd8:	18fb      	adds	r3, r7, r3
 800ddda:	2201      	movs	r2, #1
 800dddc:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	2364      	movs	r3, #100	@ 0x64
 800dde2:	2201      	movs	r2, #1
 800dde4:	2102      	movs	r1, #2
 800dde6:	f000 f907 	bl	800dff8 <I2S_WaitFlagStateUntilTimeout>
 800ddea:	1e03      	subs	r3, r0, #0
 800ddec:	d00d      	beq.n	800de0a <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddf2:	2201      	movs	r2, #1
 800ddf4:	431a      	orrs	r2, r3
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2235      	movs	r2, #53	@ 0x35
 800ddfe:	2101      	movs	r1, #1
 800de00:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800de02:	2317      	movs	r3, #23
 800de04:	18fb      	adds	r3, r7, r3
 800de06:	2201      	movs	r2, #1
 800de08:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	2364      	movs	r3, #100	@ 0x64
 800de0e:	2200      	movs	r2, #0
 800de10:	2180      	movs	r1, #128	@ 0x80
 800de12:	f000 f8f1 	bl	800dff8 <I2S_WaitFlagStateUntilTimeout>
 800de16:	1e03      	subs	r3, r0, #0
 800de18:	d00d      	beq.n	800de36 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de1e:	2201      	movs	r2, #1
 800de20:	431a      	orrs	r2, r3
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2235      	movs	r2, #53	@ 0x35
 800de2a:	2101      	movs	r1, #1
 800de2c:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800de2e:	2317      	movs	r3, #23
 800de30:	18fb      	adds	r3, r7, r3
 800de32:	2201      	movs	r2, #1
 800de34:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	69da      	ldr	r2, [r3, #28]
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	4938      	ldr	r1, [pc, #224]	@ (800df24 <HAL_I2S_DMAStop+0x194>)
 800de42:	400a      	ands	r2, r1
 800de44:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800de46:	2300      	movs	r3, #0
 800de48:	613b      	str	r3, [r7, #16]
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	689b      	ldr	r3, [r3, #8]
 800de50:	613b      	str	r3, [r7, #16]
 800de52:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	685a      	ldr	r2, [r3, #4]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	2102      	movs	r1, #2
 800de60:	438a      	bics	r2, r1
 800de62:	605a      	str	r2, [r3, #4]
 800de64:	e053      	b.n	800df0e <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	685a      	ldr	r2, [r3, #4]
 800de6a:	23c0      	movs	r3, #192	@ 0xc0
 800de6c:	009b      	lsls	r3, r3, #2
 800de6e:	429a      	cmp	r2, r3
 800de70:	d005      	beq.n	800de7e <HAL_I2S_DMAStop+0xee>
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	685a      	ldr	r2, [r3, #4]
 800de76:	2380      	movs	r3, #128	@ 0x80
 800de78:	005b      	lsls	r3, r3, #1
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d147      	bne.n	800df0e <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de82:	2b00      	cmp	r3, #0
 800de84:	d010      	beq.n	800dea8 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de8a:	0018      	movs	r0, r3
 800de8c:	f7fc ffb8 	bl	800ae00 <HAL_DMA_Abort>
 800de90:	1e03      	subs	r3, r0, #0
 800de92:	d009      	beq.n	800dea8 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de98:	2208      	movs	r2, #8
 800de9a:	431a      	orrs	r2, r3
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800dea0:	2317      	movs	r3, #23
 800dea2:	18fb      	adds	r3, r7, r3
 800dea4:	2201      	movs	r2, #1
 800dea6:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	69da      	ldr	r2, [r3, #28]
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	491c      	ldr	r1, [pc, #112]	@ (800df24 <HAL_I2S_DMAStop+0x194>)
 800deb4:	400a      	ands	r2, r1
 800deb6:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800deb8:	2300      	movs	r3, #0
 800deba:	60fb      	str	r3, [r7, #12]
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	68db      	ldr	r3, [r3, #12]
 800dec2:	60fb      	str	r3, [r7, #12]
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	689b      	ldr	r3, [r3, #8]
 800deca:	60fb      	str	r3, [r7, #12]
 800decc:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	685a      	ldr	r2, [r3, #4]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	2101      	movs	r1, #1
 800deda:	438a      	bics	r2, r1
 800dedc:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	685a      	ldr	r2, [r3, #4]
 800dee2:	2380      	movs	r3, #128	@ 0x80
 800dee4:	005b      	lsls	r3, r3, #1
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d10e      	bne.n	800df08 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800deee:	2240      	movs	r2, #64	@ 0x40
 800def0:	431a      	orrs	r2, r3
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2235      	movs	r2, #53	@ 0x35
 800defa:	2101      	movs	r1, #1
 800defc:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800defe:	2317      	movs	r3, #23
 800df00:	18fb      	adds	r3, r7, r3
 800df02:	2201      	movs	r2, #1
 800df04:	701a      	strb	r2, [r3, #0]
 800df06:	e002      	b.n	800df0e <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2235      	movs	r2, #53	@ 0x35
 800df12:	2101      	movs	r1, #1
 800df14:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800df16:	2317      	movs	r3, #23
 800df18:	18fb      	adds	r3, r7, r3
 800df1a:	781b      	ldrb	r3, [r3, #0]
}
 800df1c:	0018      	movs	r0, r3
 800df1e:	46bd      	mov	sp, r7
 800df20:	b006      	add	sp, #24
 800df22:	bd80      	pop	{r7, pc}
 800df24:	fffffbff 	.word	0xfffffbff

0800df28 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800df30:	46c0      	nop			@ (mov r8, r8)
 800df32:	46bd      	mov	sp, r7
 800df34:	b002      	add	sp, #8
 800df36:	bd80      	pop	{r7, pc}

0800df38 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b082      	sub	sp, #8
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800df40:	46c0      	nop			@ (mov r8, r8)
 800df42:	46bd      	mov	sp, r7
 800df44:	b002      	add	sp, #8
 800df46:	bd80      	pop	{r7, pc}

0800df48 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b084      	sub	sp, #16
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df54:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	69db      	ldr	r3, [r3, #28]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d10e      	bne.n	800df7c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	685a      	ldr	r2, [r3, #4]
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	2101      	movs	r1, #1
 800df6a:	438a      	bics	r2, r1
 800df6c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	2200      	movs	r2, #0
 800df72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	2235      	movs	r2, #53	@ 0x35
 800df78:	2101      	movs	r1, #1
 800df7a:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	0018      	movs	r0, r3
 800df80:	f7f9 f9b4 	bl	80072ec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800df84:	46c0      	nop			@ (mov r8, r8)
 800df86:	46bd      	mov	sp, r7
 800df88:	b004      	add	sp, #16
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b084      	sub	sp, #16
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df98:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	0018      	movs	r0, r3
 800df9e:	f7ff ffc3 	bl	800df28 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800dfa2:	46c0      	nop			@ (mov r8, r8)
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	b004      	add	sp, #16
 800dfa8:	bd80      	pop	{r7, pc}

0800dfaa <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800dfaa:	b580      	push	{r7, lr}
 800dfac:	b084      	sub	sp, #16
 800dfae:	af00      	add	r7, sp, #0
 800dfb0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfb6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	685a      	ldr	r2, [r3, #4]
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	2103      	movs	r1, #3
 800dfc4:	438a      	bics	r2, r1
 800dfc6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2235      	movs	r2, #53	@ 0x35
 800dfd8:	2101      	movs	r1, #1
 800dfda:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfe0:	2208      	movs	r2, #8
 800dfe2:	431a      	orrs	r2, r3
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	0018      	movs	r0, r3
 800dfec:	f7ff ffa4 	bl	800df38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800dff0:	46c0      	nop			@ (mov r8, r8)
 800dff2:	46bd      	mov	sp, r7
 800dff4:	b004      	add	sp, #16
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b086      	sub	sp, #24
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	60f8      	str	r0, [r7, #12]
 800e000:	60b9      	str	r1, [r7, #8]
 800e002:	603b      	str	r3, [r7, #0]
 800e004:	1dfb      	adds	r3, r7, #7
 800e006:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800e008:	f7fc f916 	bl	800a238 <HAL_GetTick>
 800e00c:	0003      	movs	r3, r0
 800e00e:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800e010:	e017      	b.n	800e042 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	3301      	adds	r3, #1
 800e016:	d014      	beq.n	800e042 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800e018:	f7fc f90e 	bl	800a238 <HAL_GetTick>
 800e01c:	0002      	movs	r2, r0
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	1ad3      	subs	r3, r2, r3
 800e022:	683a      	ldr	r2, [r7, #0]
 800e024:	429a      	cmp	r2, r3
 800e026:	d902      	bls.n	800e02e <I2S_WaitFlagStateUntilTimeout+0x36>
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d109      	bne.n	800e042 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	2235      	movs	r2, #53	@ 0x35
 800e032:	2101      	movs	r1, #1
 800e034:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	2234      	movs	r2, #52	@ 0x34
 800e03a:	2100      	movs	r1, #0
 800e03c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800e03e:	2303      	movs	r3, #3
 800e040:	e00f      	b.n	800e062 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	689b      	ldr	r3, [r3, #8]
 800e048:	68ba      	ldr	r2, [r7, #8]
 800e04a:	4013      	ands	r3, r2
 800e04c:	68ba      	ldr	r2, [r7, #8]
 800e04e:	1ad3      	subs	r3, r2, r3
 800e050:	425a      	negs	r2, r3
 800e052:	4153      	adcs	r3, r2
 800e054:	b2db      	uxtb	r3, r3
 800e056:	001a      	movs	r2, r3
 800e058:	1dfb      	adds	r3, r7, #7
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	429a      	cmp	r2, r3
 800e05e:	d1d8      	bne.n	800e012 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800e060:	2300      	movs	r3, #0
}
 800e062:	0018      	movs	r0, r3
 800e064:	46bd      	mov	sp, r7
 800e066:	b006      	add	sp, #24
 800e068:	bd80      	pop	{r7, pc}
	...

0800e06c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800e06c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e06e:	b08b      	sub	sp, #44	@ 0x2c
 800e070:	af06      	add	r7, sp, #24
 800e072:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d101      	bne.n	800e07e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800e07a:	2301      	movs	r3, #1
 800e07c:	e0f0      	b.n	800e260 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	4a79      	ldr	r2, [pc, #484]	@ (800e268 <HAL_PCD_Init+0x1fc>)
 800e082:	5c9b      	ldrb	r3, [r3, r2]
 800e084:	b2db      	uxtb	r3, r3
 800e086:	2b00      	cmp	r3, #0
 800e088:	d108      	bne.n	800e09c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800e08a:	687a      	ldr	r2, [r7, #4]
 800e08c:	23aa      	movs	r3, #170	@ 0xaa
 800e08e:	009b      	lsls	r3, r3, #2
 800e090:	2100      	movs	r1, #0
 800e092:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	0018      	movs	r0, r3
 800e098:	f009 f8d8 	bl	801724c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	4a72      	ldr	r2, [pc, #456]	@ (800e268 <HAL_PCD_Init+0x1fc>)
 800e0a0:	2103      	movs	r1, #3
 800e0a2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	0018      	movs	r0, r3
 800e0aa:	f005 f88b 	bl	80131c4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e0ae:	230f      	movs	r3, #15
 800e0b0:	18fb      	adds	r3, r7, r3
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	701a      	strb	r2, [r3, #0]
 800e0b6:	e049      	b.n	800e14c <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800e0b8:	200f      	movs	r0, #15
 800e0ba:	183b      	adds	r3, r7, r0
 800e0bc:	781b      	ldrb	r3, [r3, #0]
 800e0be:	6879      	ldr	r1, [r7, #4]
 800e0c0:	1c5a      	adds	r2, r3, #1
 800e0c2:	0013      	movs	r3, r2
 800e0c4:	009b      	lsls	r3, r3, #2
 800e0c6:	189b      	adds	r3, r3, r2
 800e0c8:	00db      	lsls	r3, r3, #3
 800e0ca:	18cb      	adds	r3, r1, r3
 800e0cc:	3301      	adds	r3, #1
 800e0ce:	2201      	movs	r2, #1
 800e0d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800e0d2:	183b      	adds	r3, r7, r0
 800e0d4:	781b      	ldrb	r3, [r3, #0]
 800e0d6:	6879      	ldr	r1, [r7, #4]
 800e0d8:	1c5a      	adds	r2, r3, #1
 800e0da:	0013      	movs	r3, r2
 800e0dc:	009b      	lsls	r3, r3, #2
 800e0de:	189b      	adds	r3, r3, r2
 800e0e0:	00db      	lsls	r3, r3, #3
 800e0e2:	183a      	adds	r2, r7, r0
 800e0e4:	7812      	ldrb	r2, [r2, #0]
 800e0e6:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800e0e8:	183b      	adds	r3, r7, r0
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	6879      	ldr	r1, [r7, #4]
 800e0ee:	1c5a      	adds	r2, r3, #1
 800e0f0:	0013      	movs	r3, r2
 800e0f2:	009b      	lsls	r3, r3, #2
 800e0f4:	189b      	adds	r3, r3, r2
 800e0f6:	00db      	lsls	r3, r3, #3
 800e0f8:	18cb      	adds	r3, r1, r3
 800e0fa:	3303      	adds	r3, #3
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800e100:	183b      	adds	r3, r7, r0
 800e102:	781a      	ldrb	r2, [r3, #0]
 800e104:	6879      	ldr	r1, [r7, #4]
 800e106:	0013      	movs	r3, r2
 800e108:	009b      	lsls	r3, r3, #2
 800e10a:	189b      	adds	r3, r3, r2
 800e10c:	00db      	lsls	r3, r3, #3
 800e10e:	18cb      	adds	r3, r1, r3
 800e110:	3338      	adds	r3, #56	@ 0x38
 800e112:	2200      	movs	r2, #0
 800e114:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800e116:	183b      	adds	r3, r7, r0
 800e118:	781a      	ldrb	r2, [r3, #0]
 800e11a:	6879      	ldr	r1, [r7, #4]
 800e11c:	0013      	movs	r3, r2
 800e11e:	009b      	lsls	r3, r3, #2
 800e120:	189b      	adds	r3, r3, r2
 800e122:	00db      	lsls	r3, r3, #3
 800e124:	18cb      	adds	r3, r1, r3
 800e126:	333c      	adds	r3, #60	@ 0x3c
 800e128:	2200      	movs	r2, #0
 800e12a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800e12c:	183b      	adds	r3, r7, r0
 800e12e:	781a      	ldrb	r2, [r3, #0]
 800e130:	6879      	ldr	r1, [r7, #4]
 800e132:	0013      	movs	r3, r2
 800e134:	009b      	lsls	r3, r3, #2
 800e136:	189b      	adds	r3, r3, r2
 800e138:	00db      	lsls	r3, r3, #3
 800e13a:	18cb      	adds	r3, r1, r3
 800e13c:	3340      	adds	r3, #64	@ 0x40
 800e13e:	2200      	movs	r2, #0
 800e140:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e142:	183b      	adds	r3, r7, r0
 800e144:	781a      	ldrb	r2, [r3, #0]
 800e146:	183b      	adds	r3, r7, r0
 800e148:	3201      	adds	r2, #1
 800e14a:	701a      	strb	r2, [r3, #0]
 800e14c:	210f      	movs	r1, #15
 800e14e:	187b      	adds	r3, r7, r1
 800e150:	781a      	ldrb	r2, [r3, #0]
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	685b      	ldr	r3, [r3, #4]
 800e156:	429a      	cmp	r2, r3
 800e158:	d3ae      	bcc.n	800e0b8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e15a:	187b      	adds	r3, r7, r1
 800e15c:	2200      	movs	r2, #0
 800e15e:	701a      	strb	r2, [r3, #0]
 800e160:	e056      	b.n	800e210 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800e162:	240f      	movs	r4, #15
 800e164:	193b      	adds	r3, r7, r4
 800e166:	781a      	ldrb	r2, [r3, #0]
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	236a      	movs	r3, #106	@ 0x6a
 800e16c:	33ff      	adds	r3, #255	@ 0xff
 800e16e:	0019      	movs	r1, r3
 800e170:	0013      	movs	r3, r2
 800e172:	009b      	lsls	r3, r3, #2
 800e174:	189b      	adds	r3, r3, r2
 800e176:	00db      	lsls	r3, r3, #3
 800e178:	18c3      	adds	r3, r0, r3
 800e17a:	185b      	adds	r3, r3, r1
 800e17c:	2200      	movs	r2, #0
 800e17e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800e180:	193b      	adds	r3, r7, r4
 800e182:	781a      	ldrb	r2, [r3, #0]
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	23b4      	movs	r3, #180	@ 0xb4
 800e188:	0059      	lsls	r1, r3, #1
 800e18a:	0013      	movs	r3, r2
 800e18c:	009b      	lsls	r3, r3, #2
 800e18e:	189b      	adds	r3, r3, r2
 800e190:	00db      	lsls	r3, r3, #3
 800e192:	18c3      	adds	r3, r0, r3
 800e194:	185b      	adds	r3, r3, r1
 800e196:	193a      	adds	r2, r7, r4
 800e198:	7812      	ldrb	r2, [r2, #0]
 800e19a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800e19c:	193b      	adds	r3, r7, r4
 800e19e:	781a      	ldrb	r2, [r3, #0]
 800e1a0:	6878      	ldr	r0, [r7, #4]
 800e1a2:	236c      	movs	r3, #108	@ 0x6c
 800e1a4:	33ff      	adds	r3, #255	@ 0xff
 800e1a6:	0019      	movs	r1, r3
 800e1a8:	0013      	movs	r3, r2
 800e1aa:	009b      	lsls	r3, r3, #2
 800e1ac:	189b      	adds	r3, r3, r2
 800e1ae:	00db      	lsls	r3, r3, #3
 800e1b0:	18c3      	adds	r3, r0, r3
 800e1b2:	185b      	adds	r3, r3, r1
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800e1b8:	193b      	adds	r3, r7, r4
 800e1ba:	781a      	ldrb	r2, [r3, #0]
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	23bc      	movs	r3, #188	@ 0xbc
 800e1c0:	0059      	lsls	r1, r3, #1
 800e1c2:	0013      	movs	r3, r2
 800e1c4:	009b      	lsls	r3, r3, #2
 800e1c6:	189b      	adds	r3, r3, r2
 800e1c8:	00db      	lsls	r3, r3, #3
 800e1ca:	18c3      	adds	r3, r0, r3
 800e1cc:	185b      	adds	r3, r3, r1
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800e1d2:	193b      	adds	r3, r7, r4
 800e1d4:	781a      	ldrb	r2, [r3, #0]
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	23be      	movs	r3, #190	@ 0xbe
 800e1da:	0059      	lsls	r1, r3, #1
 800e1dc:	0013      	movs	r3, r2
 800e1de:	009b      	lsls	r3, r3, #2
 800e1e0:	189b      	adds	r3, r3, r2
 800e1e2:	00db      	lsls	r3, r3, #3
 800e1e4:	18c3      	adds	r3, r0, r3
 800e1e6:	185b      	adds	r3, r3, r1
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800e1ec:	193b      	adds	r3, r7, r4
 800e1ee:	781a      	ldrb	r2, [r3, #0]
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	23c0      	movs	r3, #192	@ 0xc0
 800e1f4:	0059      	lsls	r1, r3, #1
 800e1f6:	0013      	movs	r3, r2
 800e1f8:	009b      	lsls	r3, r3, #2
 800e1fa:	189b      	adds	r3, r3, r2
 800e1fc:	00db      	lsls	r3, r3, #3
 800e1fe:	18c3      	adds	r3, r0, r3
 800e200:	185b      	adds	r3, r3, r1
 800e202:	2200      	movs	r2, #0
 800e204:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e206:	193b      	adds	r3, r7, r4
 800e208:	781a      	ldrb	r2, [r3, #0]
 800e20a:	193b      	adds	r3, r7, r4
 800e20c:	3201      	adds	r2, #1
 800e20e:	701a      	strb	r2, [r3, #0]
 800e210:	230f      	movs	r3, #15
 800e212:	18fb      	adds	r3, r7, r3
 800e214:	781a      	ldrb	r2, [r3, #0]
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	429a      	cmp	r2, r3
 800e21c:	d3a1      	bcc.n	800e162 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6818      	ldr	r0, [r3, #0]
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	466a      	mov	r2, sp
 800e226:	0011      	movs	r1, r2
 800e228:	001a      	movs	r2, r3
 800e22a:	3210      	adds	r2, #16
 800e22c:	ca70      	ldmia	r2!, {r4, r5, r6}
 800e22e:	c170      	stmia	r1!, {r4, r5, r6}
 800e230:	ca30      	ldmia	r2!, {r4, r5}
 800e232:	c130      	stmia	r1!, {r4, r5}
 800e234:	6859      	ldr	r1, [r3, #4]
 800e236:	689a      	ldr	r2, [r3, #8]
 800e238:	68db      	ldr	r3, [r3, #12]
 800e23a:	f004 ffdd 	bl	80131f8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2224      	movs	r2, #36	@ 0x24
 800e242:	2100      	movs	r1, #0
 800e244:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	4a07      	ldr	r2, [pc, #28]	@ (800e268 <HAL_PCD_Init+0x1fc>)
 800e24a:	2101      	movs	r1, #1
 800e24c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	69db      	ldr	r3, [r3, #28]
 800e252:	2b01      	cmp	r3, #1
 800e254:	d103      	bne.n	800e25e <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	0018      	movs	r0, r3
 800e25a:	f001 fd23 	bl	800fca4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800e25e:	2300      	movs	r3, #0
}
 800e260:	0018      	movs	r0, r3
 800e262:	46bd      	mov	sp, r7
 800e264:	b005      	add	sp, #20
 800e266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e268:	000002a9 	.word	0x000002a9

0800e26c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800e274:	687a      	ldr	r2, [r7, #4]
 800e276:	23aa      	movs	r3, #170	@ 0xaa
 800e278:	009b      	lsls	r3, r3, #2
 800e27a:	5cd3      	ldrb	r3, [r2, r3]
 800e27c:	2b01      	cmp	r3, #1
 800e27e:	d101      	bne.n	800e284 <HAL_PCD_Start+0x18>
 800e280:	2302      	movs	r3, #2
 800e282:	e014      	b.n	800e2ae <HAL_PCD_Start+0x42>
 800e284:	687a      	ldr	r2, [r7, #4]
 800e286:	23aa      	movs	r3, #170	@ 0xaa
 800e288:	009b      	lsls	r3, r3, #2
 800e28a:	2101      	movs	r1, #1
 800e28c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	0018      	movs	r0, r3
 800e294:	f004 ff80 	bl	8013198 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	0018      	movs	r0, r3
 800e29e:	f006 ff83 	bl	80151a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800e2a2:	687a      	ldr	r2, [r7, #4]
 800e2a4:	23aa      	movs	r3, #170	@ 0xaa
 800e2a6:	009b      	lsls	r3, r3, #2
 800e2a8:	2100      	movs	r1, #0
 800e2aa:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e2ac:	2300      	movs	r3, #0
}
 800e2ae:	0018      	movs	r0, r3
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	b002      	add	sp, #8
 800e2b4:	bd80      	pop	{r7, pc}
	...

0800e2b8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b084      	sub	sp, #16
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	0018      	movs	r0, r3
 800e2c6:	f006 ff85 	bl	80151d4 <USB_ReadInterrupts>
 800e2ca:	0003      	movs	r3, r0
 800e2cc:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800e2ce:	68fa      	ldr	r2, [r7, #12]
 800e2d0:	2380      	movs	r3, #128	@ 0x80
 800e2d2:	021b      	lsls	r3, r3, #8
 800e2d4:	4013      	ands	r3, r2
 800e2d6:	d004      	beq.n	800e2e2 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	0018      	movs	r0, r3
 800e2dc:	f000 fb62 	bl	800e9a4 <PCD_EP_ISR_Handler>

    return;
 800e2e0:	e11d      	b.n	800e51e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800e2e2:	68fa      	ldr	r2, [r7, #12]
 800e2e4:	2380      	movs	r3, #128	@ 0x80
 800e2e6:	00db      	lsls	r3, r3, #3
 800e2e8:	4013      	ands	r3, r2
 800e2ea:	d015      	beq.n	800e318 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	2244      	movs	r2, #68	@ 0x44
 800e2f2:	5a9b      	ldrh	r3, [r3, r2]
 800e2f4:	b29a      	uxth	r2, r3
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	498a      	ldr	r1, [pc, #552]	@ (800e524 <HAL_PCD_IRQHandler+0x26c>)
 800e2fc:	400a      	ands	r2, r1
 800e2fe:	b291      	uxth	r1, r2
 800e300:	2244      	movs	r2, #68	@ 0x44
 800e302:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	0018      	movs	r0, r3
 800e308:	f009 f823 	bl	8017352 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2100      	movs	r1, #0
 800e310:	0018      	movs	r0, r3
 800e312:	f000 f915 	bl	800e540 <HAL_PCD_SetAddress>

    return;
 800e316:	e102      	b.n	800e51e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800e318:	68fa      	ldr	r2, [r7, #12]
 800e31a:	2380      	movs	r3, #128	@ 0x80
 800e31c:	01db      	lsls	r3, r3, #7
 800e31e:	4013      	ands	r3, r2
 800e320:	d00c      	beq.n	800e33c <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	2244      	movs	r2, #68	@ 0x44
 800e328:	5a9b      	ldrh	r3, [r3, r2]
 800e32a:	b29a      	uxth	r2, r3
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	497d      	ldr	r1, [pc, #500]	@ (800e528 <HAL_PCD_IRQHandler+0x270>)
 800e332:	400a      	ands	r2, r1
 800e334:	b291      	uxth	r1, r2
 800e336:	2244      	movs	r2, #68	@ 0x44
 800e338:	5299      	strh	r1, [r3, r2]

    return;
 800e33a:	e0f0      	b.n	800e51e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800e33c:	68fa      	ldr	r2, [r7, #12]
 800e33e:	2380      	movs	r3, #128	@ 0x80
 800e340:	019b      	lsls	r3, r3, #6
 800e342:	4013      	ands	r3, r2
 800e344:	d00c      	beq.n	800e360 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	2244      	movs	r2, #68	@ 0x44
 800e34c:	5a9b      	ldrh	r3, [r3, r2]
 800e34e:	b29a      	uxth	r2, r3
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	4975      	ldr	r1, [pc, #468]	@ (800e52c <HAL_PCD_IRQHandler+0x274>)
 800e356:	400a      	ands	r2, r1
 800e358:	b291      	uxth	r1, r2
 800e35a:	2244      	movs	r2, #68	@ 0x44
 800e35c:	5299      	strh	r1, [r3, r2]

    return;
 800e35e:	e0de      	b.n	800e51e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800e360:	68fa      	ldr	r2, [r7, #12]
 800e362:	2380      	movs	r3, #128	@ 0x80
 800e364:	015b      	lsls	r3, r3, #5
 800e366:	4013      	ands	r3, r2
 800e368:	d038      	beq.n	800e3dc <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	2240      	movs	r2, #64	@ 0x40
 800e370:	5a9b      	ldrh	r3, [r3, r2]
 800e372:	b29a      	uxth	r2, r3
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	2104      	movs	r1, #4
 800e37a:	438a      	bics	r2, r1
 800e37c:	b291      	uxth	r1, r2
 800e37e:	2240      	movs	r2, #64	@ 0x40
 800e380:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	2240      	movs	r2, #64	@ 0x40
 800e388:	5a9b      	ldrh	r3, [r3, r2]
 800e38a:	b29a      	uxth	r2, r3
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	2108      	movs	r1, #8
 800e392:	438a      	bics	r2, r1
 800e394:	b291      	uxth	r1, r2
 800e396:	2240      	movs	r2, #64	@ 0x40
 800e398:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800e39a:	687a      	ldr	r2, [r7, #4]
 800e39c:	23b8      	movs	r3, #184	@ 0xb8
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	5cd3      	ldrb	r3, [r2, r3]
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	d109      	bne.n	800e3ba <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800e3a6:	687a      	ldr	r2, [r7, #4]
 800e3a8:	23b8      	movs	r3, #184	@ 0xb8
 800e3aa:	009b      	lsls	r3, r3, #2
 800e3ac:	2100      	movs	r1, #0
 800e3ae:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2100      	movs	r1, #0
 800e3b4:	0018      	movs	r0, r3
 800e3b6:	f001 fc9f 	bl	800fcf8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	0018      	movs	r0, r3
 800e3be:	f009 f809 	bl	80173d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	2244      	movs	r2, #68	@ 0x44
 800e3c8:	5a9b      	ldrh	r3, [r3, r2]
 800e3ca:	b29a      	uxth	r2, r3
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	4957      	ldr	r1, [pc, #348]	@ (800e530 <HAL_PCD_IRQHandler+0x278>)
 800e3d2:	400a      	ands	r2, r1
 800e3d4:	b291      	uxth	r1, r2
 800e3d6:	2244      	movs	r2, #68	@ 0x44
 800e3d8:	5299      	strh	r1, [r3, r2]

    return;
 800e3da:	e0a0      	b.n	800e51e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800e3dc:	68fa      	ldr	r2, [r7, #12]
 800e3de:	2380      	movs	r3, #128	@ 0x80
 800e3e0:	011b      	lsls	r3, r3, #4
 800e3e2:	4013      	ands	r3, r2
 800e3e4:	d028      	beq.n	800e438 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	2240      	movs	r2, #64	@ 0x40
 800e3ec:	5a9b      	ldrh	r3, [r3, r2]
 800e3ee:	b29a      	uxth	r2, r3
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	2108      	movs	r1, #8
 800e3f6:	430a      	orrs	r2, r1
 800e3f8:	b291      	uxth	r1, r2
 800e3fa:	2240      	movs	r2, #64	@ 0x40
 800e3fc:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	2244      	movs	r2, #68	@ 0x44
 800e404:	5a9b      	ldrh	r3, [r3, r2]
 800e406:	b29a      	uxth	r2, r3
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	4949      	ldr	r1, [pc, #292]	@ (800e534 <HAL_PCD_IRQHandler+0x27c>)
 800e40e:	400a      	ands	r2, r1
 800e410:	b291      	uxth	r1, r2
 800e412:	2244      	movs	r2, #68	@ 0x44
 800e414:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	2240      	movs	r2, #64	@ 0x40
 800e41c:	5a9b      	ldrh	r3, [r3, r2]
 800e41e:	b29a      	uxth	r2, r3
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	2104      	movs	r1, #4
 800e426:	430a      	orrs	r2, r1
 800e428:	b291      	uxth	r1, r2
 800e42a:	2240      	movs	r2, #64	@ 0x40
 800e42c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	0018      	movs	r0, r3
 800e432:	f008 ffb3 	bl	801739c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800e436:	e072      	b.n	800e51e <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	2280      	movs	r2, #128	@ 0x80
 800e43c:	4013      	ands	r3, r2
 800e43e:	d046      	beq.n	800e4ce <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	2244      	movs	r2, #68	@ 0x44
 800e446:	5a9b      	ldrh	r3, [r3, r2]
 800e448:	b29a      	uxth	r2, r3
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	2180      	movs	r1, #128	@ 0x80
 800e450:	438a      	bics	r2, r1
 800e452:	b291      	uxth	r1, r2
 800e454:	2244      	movs	r2, #68	@ 0x44
 800e456:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800e458:	687a      	ldr	r2, [r7, #4]
 800e45a:	23b8      	movs	r3, #184	@ 0xb8
 800e45c:	009b      	lsls	r3, r3, #2
 800e45e:	5cd3      	ldrb	r3, [r2, r3]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d12f      	bne.n	800e4c4 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	2240      	movs	r2, #64	@ 0x40
 800e46a:	5a9b      	ldrh	r3, [r3, r2]
 800e46c:	b29a      	uxth	r2, r3
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	2104      	movs	r1, #4
 800e474:	430a      	orrs	r2, r1
 800e476:	b291      	uxth	r1, r2
 800e478:	2240      	movs	r2, #64	@ 0x40
 800e47a:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	2240      	movs	r2, #64	@ 0x40
 800e482:	5a9b      	ldrh	r3, [r3, r2]
 800e484:	b29a      	uxth	r2, r3
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	2108      	movs	r1, #8
 800e48c:	430a      	orrs	r2, r1
 800e48e:	b291      	uxth	r1, r2
 800e490:	2240      	movs	r2, #64	@ 0x40
 800e492:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800e494:	687a      	ldr	r2, [r7, #4]
 800e496:	23b8      	movs	r3, #184	@ 0xb8
 800e498:	009b      	lsls	r3, r3, #2
 800e49a:	2101      	movs	r1, #1
 800e49c:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	2254      	movs	r2, #84	@ 0x54
 800e4a4:	5a9b      	ldrh	r3, [r3, r2]
 800e4a6:	b29b      	uxth	r3, r3
 800e4a8:	089b      	lsrs	r3, r3, #2
 800e4aa:	223c      	movs	r2, #60	@ 0x3c
 800e4ac:	4013      	ands	r3, r2
 800e4ae:	0019      	movs	r1, r3
 800e4b0:	687a      	ldr	r2, [r7, #4]
 800e4b2:	23b9      	movs	r3, #185	@ 0xb9
 800e4b4:	009b      	lsls	r3, r3, #2
 800e4b6:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2101      	movs	r1, #1
 800e4bc:	0018      	movs	r0, r3
 800e4be:	f001 fc1b 	bl	800fcf8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800e4c2:	e02c      	b.n	800e51e <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	0018      	movs	r0, r3
 800e4c8:	f008 ff68 	bl	801739c <HAL_PCD_SuspendCallback>
    return;
 800e4cc:	e027      	b.n	800e51e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800e4ce:	68fa      	ldr	r2, [r7, #12]
 800e4d0:	2380      	movs	r3, #128	@ 0x80
 800e4d2:	009b      	lsls	r3, r3, #2
 800e4d4:	4013      	ands	r3, r2
 800e4d6:	d010      	beq.n	800e4fa <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	2244      	movs	r2, #68	@ 0x44
 800e4de:	5a9b      	ldrh	r3, [r3, r2]
 800e4e0:	b29a      	uxth	r2, r3
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	4914      	ldr	r1, [pc, #80]	@ (800e538 <HAL_PCD_IRQHandler+0x280>)
 800e4e8:	400a      	ands	r2, r1
 800e4ea:	b291      	uxth	r1, r2
 800e4ec:	2244      	movs	r2, #68	@ 0x44
 800e4ee:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	0018      	movs	r0, r3
 800e4f4:	f008 ff1e 	bl	8017334 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800e4f8:	e011      	b.n	800e51e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800e4fa:	68fa      	ldr	r2, [r7, #12]
 800e4fc:	2380      	movs	r3, #128	@ 0x80
 800e4fe:	005b      	lsls	r3, r3, #1
 800e500:	4013      	ands	r3, r2
 800e502:	d00c      	beq.n	800e51e <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	2244      	movs	r2, #68	@ 0x44
 800e50a:	5a9b      	ldrh	r3, [r3, r2]
 800e50c:	b29a      	uxth	r2, r3
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	490a      	ldr	r1, [pc, #40]	@ (800e53c <HAL_PCD_IRQHandler+0x284>)
 800e514:	400a      	ands	r2, r1
 800e516:	b291      	uxth	r1, r2
 800e518:	2244      	movs	r2, #68	@ 0x44
 800e51a:	5299      	strh	r1, [r3, r2]

    return;
 800e51c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800e51e:	46bd      	mov	sp, r7
 800e520:	b004      	add	sp, #16
 800e522:	bd80      	pop	{r7, pc}
 800e524:	fffffbff 	.word	0xfffffbff
 800e528:	ffffbfff 	.word	0xffffbfff
 800e52c:	ffffdfff 	.word	0xffffdfff
 800e530:	ffffefff 	.word	0xffffefff
 800e534:	fffff7ff 	.word	0xfffff7ff
 800e538:	fffffdff 	.word	0xfffffdff
 800e53c:	fffffeff 	.word	0xfffffeff

0800e540 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b082      	sub	sp, #8
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
 800e548:	000a      	movs	r2, r1
 800e54a:	1cfb      	adds	r3, r7, #3
 800e54c:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800e54e:	687a      	ldr	r2, [r7, #4]
 800e550:	23aa      	movs	r3, #170	@ 0xaa
 800e552:	009b      	lsls	r3, r3, #2
 800e554:	5cd3      	ldrb	r3, [r2, r3]
 800e556:	2b01      	cmp	r3, #1
 800e558:	d101      	bne.n	800e55e <HAL_PCD_SetAddress+0x1e>
 800e55a:	2302      	movs	r3, #2
 800e55c:	e017      	b.n	800e58e <HAL_PCD_SetAddress+0x4e>
 800e55e:	687a      	ldr	r2, [r7, #4]
 800e560:	23aa      	movs	r3, #170	@ 0xaa
 800e562:	009b      	lsls	r3, r3, #2
 800e564:	2101      	movs	r1, #1
 800e566:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	1cfa      	adds	r2, r7, #3
 800e56c:	2124      	movs	r1, #36	@ 0x24
 800e56e:	7812      	ldrb	r2, [r2, #0]
 800e570:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681a      	ldr	r2, [r3, #0]
 800e576:	1cfb      	adds	r3, r7, #3
 800e578:	781b      	ldrb	r3, [r3, #0]
 800e57a:	0019      	movs	r1, r3
 800e57c:	0010      	movs	r0, r2
 800e57e:	f006 fdff 	bl	8015180 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800e582:	687a      	ldr	r2, [r7, #4]
 800e584:	23aa      	movs	r3, #170	@ 0xaa
 800e586:	009b      	lsls	r3, r3, #2
 800e588:	2100      	movs	r1, #0
 800e58a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e58c:	2300      	movs	r3, #0
}
 800e58e:	0018      	movs	r0, r3
 800e590:	46bd      	mov	sp, r7
 800e592:	b002      	add	sp, #8
 800e594:	bd80      	pop	{r7, pc}

0800e596 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800e596:	b590      	push	{r4, r7, lr}
 800e598:	b085      	sub	sp, #20
 800e59a:	af00      	add	r7, sp, #0
 800e59c:	6078      	str	r0, [r7, #4]
 800e59e:	000c      	movs	r4, r1
 800e5a0:	0010      	movs	r0, r2
 800e5a2:	0019      	movs	r1, r3
 800e5a4:	1cfb      	adds	r3, r7, #3
 800e5a6:	1c22      	adds	r2, r4, #0
 800e5a8:	701a      	strb	r2, [r3, #0]
 800e5aa:	003b      	movs	r3, r7
 800e5ac:	1c02      	adds	r2, r0, #0
 800e5ae:	801a      	strh	r2, [r3, #0]
 800e5b0:	1cbb      	adds	r3, r7, #2
 800e5b2:	1c0a      	adds	r2, r1, #0
 800e5b4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800e5b6:	230b      	movs	r3, #11
 800e5b8:	18fb      	adds	r3, r7, r3
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e5be:	1cfb      	adds	r3, r7, #3
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	b25b      	sxtb	r3, r3
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	da0f      	bge.n	800e5e8 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e5c8:	1cfb      	adds	r3, r7, #3
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	2207      	movs	r2, #7
 800e5ce:	4013      	ands	r3, r2
 800e5d0:	1c5a      	adds	r2, r3, #1
 800e5d2:	0013      	movs	r3, r2
 800e5d4:	009b      	lsls	r3, r3, #2
 800e5d6:	189b      	adds	r3, r3, r2
 800e5d8:	00db      	lsls	r3, r3, #3
 800e5da:	687a      	ldr	r2, [r7, #4]
 800e5dc:	18d3      	adds	r3, r2, r3
 800e5de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2201      	movs	r2, #1
 800e5e4:	705a      	strb	r2, [r3, #1]
 800e5e6:	e00f      	b.n	800e608 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e5e8:	1cfb      	adds	r3, r7, #3
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	2207      	movs	r2, #7
 800e5ee:	401a      	ands	r2, r3
 800e5f0:	0013      	movs	r3, r2
 800e5f2:	009b      	lsls	r3, r3, #2
 800e5f4:	189b      	adds	r3, r3, r2
 800e5f6:	00db      	lsls	r3, r3, #3
 800e5f8:	3369      	adds	r3, #105	@ 0x69
 800e5fa:	33ff      	adds	r3, #255	@ 0xff
 800e5fc:	687a      	ldr	r2, [r7, #4]
 800e5fe:	18d3      	adds	r3, r2, r3
 800e600:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	2200      	movs	r2, #0
 800e606:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800e608:	1cfb      	adds	r3, r7, #3
 800e60a:	781b      	ldrb	r3, [r3, #0]
 800e60c:	2207      	movs	r2, #7
 800e60e:	4013      	ands	r3, r2
 800e610:	b2da      	uxtb	r2, r3
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800e616:	003b      	movs	r3, r7
 800e618:	881a      	ldrh	r2, [r3, #0]
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	1cba      	adds	r2, r7, #2
 800e622:	7812      	ldrb	r2, [r2, #0]
 800e624:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800e626:	1cbb      	adds	r3, r7, #2
 800e628:	781b      	ldrb	r3, [r3, #0]
 800e62a:	2b02      	cmp	r3, #2
 800e62c:	d102      	bne.n	800e634 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2200      	movs	r2, #0
 800e632:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800e634:	687a      	ldr	r2, [r7, #4]
 800e636:	23aa      	movs	r3, #170	@ 0xaa
 800e638:	009b      	lsls	r3, r3, #2
 800e63a:	5cd3      	ldrb	r3, [r2, r3]
 800e63c:	2b01      	cmp	r3, #1
 800e63e:	d101      	bne.n	800e644 <HAL_PCD_EP_Open+0xae>
 800e640:	2302      	movs	r3, #2
 800e642:	e013      	b.n	800e66c <HAL_PCD_EP_Open+0xd6>
 800e644:	687a      	ldr	r2, [r7, #4]
 800e646:	23aa      	movs	r3, #170	@ 0xaa
 800e648:	009b      	lsls	r3, r3, #2
 800e64a:	2101      	movs	r1, #1
 800e64c:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	68fa      	ldr	r2, [r7, #12]
 800e654:	0011      	movs	r1, r2
 800e656:	0018      	movs	r0, r3
 800e658:	f004 fdf6 	bl	8013248 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	23aa      	movs	r3, #170	@ 0xaa
 800e660:	009b      	lsls	r3, r3, #2
 800e662:	2100      	movs	r1, #0
 800e664:	54d1      	strb	r1, [r2, r3]

  return ret;
 800e666:	230b      	movs	r3, #11
 800e668:	18fb      	adds	r3, r7, r3
 800e66a:	781b      	ldrb	r3, [r3, #0]
}
 800e66c:	0018      	movs	r0, r3
 800e66e:	46bd      	mov	sp, r7
 800e670:	b005      	add	sp, #20
 800e672:	bd90      	pop	{r4, r7, pc}

0800e674 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b084      	sub	sp, #16
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	000a      	movs	r2, r1
 800e67e:	1cfb      	adds	r3, r7, #3
 800e680:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e682:	1cfb      	adds	r3, r7, #3
 800e684:	781b      	ldrb	r3, [r3, #0]
 800e686:	b25b      	sxtb	r3, r3
 800e688:	2b00      	cmp	r3, #0
 800e68a:	da0f      	bge.n	800e6ac <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e68c:	1cfb      	adds	r3, r7, #3
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	2207      	movs	r2, #7
 800e692:	4013      	ands	r3, r2
 800e694:	1c5a      	adds	r2, r3, #1
 800e696:	0013      	movs	r3, r2
 800e698:	009b      	lsls	r3, r3, #2
 800e69a:	189b      	adds	r3, r3, r2
 800e69c:	00db      	lsls	r3, r3, #3
 800e69e:	687a      	ldr	r2, [r7, #4]
 800e6a0:	18d3      	adds	r3, r2, r3
 800e6a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	705a      	strb	r2, [r3, #1]
 800e6aa:	e00f      	b.n	800e6cc <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e6ac:	1cfb      	adds	r3, r7, #3
 800e6ae:	781b      	ldrb	r3, [r3, #0]
 800e6b0:	2207      	movs	r2, #7
 800e6b2:	401a      	ands	r2, r3
 800e6b4:	0013      	movs	r3, r2
 800e6b6:	009b      	lsls	r3, r3, #2
 800e6b8:	189b      	adds	r3, r3, r2
 800e6ba:	00db      	lsls	r3, r3, #3
 800e6bc:	3369      	adds	r3, #105	@ 0x69
 800e6be:	33ff      	adds	r3, #255	@ 0xff
 800e6c0:	687a      	ldr	r2, [r7, #4]
 800e6c2:	18d3      	adds	r3, r2, r3
 800e6c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800e6cc:	1cfb      	adds	r3, r7, #3
 800e6ce:	781b      	ldrb	r3, [r3, #0]
 800e6d0:	2207      	movs	r2, #7
 800e6d2:	4013      	ands	r3, r2
 800e6d4:	b2da      	uxtb	r2, r3
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e6da:	687a      	ldr	r2, [r7, #4]
 800e6dc:	23aa      	movs	r3, #170	@ 0xaa
 800e6de:	009b      	lsls	r3, r3, #2
 800e6e0:	5cd3      	ldrb	r3, [r2, r3]
 800e6e2:	2b01      	cmp	r3, #1
 800e6e4:	d101      	bne.n	800e6ea <HAL_PCD_EP_Close+0x76>
 800e6e6:	2302      	movs	r3, #2
 800e6e8:	e011      	b.n	800e70e <HAL_PCD_EP_Close+0x9a>
 800e6ea:	687a      	ldr	r2, [r7, #4]
 800e6ec:	23aa      	movs	r3, #170	@ 0xaa
 800e6ee:	009b      	lsls	r3, r3, #2
 800e6f0:	2101      	movs	r1, #1
 800e6f2:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	68fa      	ldr	r2, [r7, #12]
 800e6fa:	0011      	movs	r1, r2
 800e6fc:	0018      	movs	r0, r3
 800e6fe:	f005 f945 	bl	801398c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e702:	687a      	ldr	r2, [r7, #4]
 800e704:	23aa      	movs	r3, #170	@ 0xaa
 800e706:	009b      	lsls	r3, r3, #2
 800e708:	2100      	movs	r1, #0
 800e70a:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800e70c:	2300      	movs	r3, #0
}
 800e70e:	0018      	movs	r0, r3
 800e710:	46bd      	mov	sp, r7
 800e712:	b004      	add	sp, #16
 800e714:	bd80      	pop	{r7, pc}

0800e716 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e716:	b580      	push	{r7, lr}
 800e718:	b086      	sub	sp, #24
 800e71a:	af00      	add	r7, sp, #0
 800e71c:	60f8      	str	r0, [r7, #12]
 800e71e:	607a      	str	r2, [r7, #4]
 800e720:	603b      	str	r3, [r7, #0]
 800e722:	200b      	movs	r0, #11
 800e724:	183b      	adds	r3, r7, r0
 800e726:	1c0a      	adds	r2, r1, #0
 800e728:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e72a:	0001      	movs	r1, r0
 800e72c:	187b      	adds	r3, r7, r1
 800e72e:	781b      	ldrb	r3, [r3, #0]
 800e730:	2207      	movs	r2, #7
 800e732:	401a      	ands	r2, r3
 800e734:	0013      	movs	r3, r2
 800e736:	009b      	lsls	r3, r3, #2
 800e738:	189b      	adds	r3, r3, r2
 800e73a:	00db      	lsls	r3, r3, #3
 800e73c:	3369      	adds	r3, #105	@ 0x69
 800e73e:	33ff      	adds	r3, #255	@ 0xff
 800e740:	68fa      	ldr	r2, [r7, #12]
 800e742:	18d3      	adds	r3, r2, r3
 800e744:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	687a      	ldr	r2, [r7, #4]
 800e74a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	683a      	ldr	r2, [r7, #0]
 800e750:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	2200      	movs	r2, #0
 800e756:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	2200      	movs	r2, #0
 800e75c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e75e:	187b      	adds	r3, r7, r1
 800e760:	781b      	ldrb	r3, [r3, #0]
 800e762:	2207      	movs	r2, #7
 800e764:	4013      	ands	r3, r2
 800e766:	b2da      	uxtb	r2, r3
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	697a      	ldr	r2, [r7, #20]
 800e772:	0011      	movs	r1, r2
 800e774:	0018      	movs	r0, r3
 800e776:	f005 fac9 	bl	8013d0c <USB_EPStartXfer>

  return HAL_OK;
 800e77a:	2300      	movs	r3, #0
}
 800e77c:	0018      	movs	r0, r3
 800e77e:	46bd      	mov	sp, r7
 800e780:	b006      	add	sp, #24
 800e782:	bd80      	pop	{r7, pc}

0800e784 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b082      	sub	sp, #8
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
 800e78c:	000a      	movs	r2, r1
 800e78e:	1cfb      	adds	r3, r7, #3
 800e790:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800e792:	1cfb      	adds	r3, r7, #3
 800e794:	781b      	ldrb	r3, [r3, #0]
 800e796:	2207      	movs	r2, #7
 800e798:	401a      	ands	r2, r3
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	23c2      	movs	r3, #194	@ 0xc2
 800e79e:	0059      	lsls	r1, r3, #1
 800e7a0:	0013      	movs	r3, r2
 800e7a2:	009b      	lsls	r3, r3, #2
 800e7a4:	189b      	adds	r3, r3, r2
 800e7a6:	00db      	lsls	r3, r3, #3
 800e7a8:	18c3      	adds	r3, r0, r3
 800e7aa:	185b      	adds	r3, r3, r1
 800e7ac:	681b      	ldr	r3, [r3, #0]
}
 800e7ae:	0018      	movs	r0, r3
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	b002      	add	sp, #8
 800e7b4:	bd80      	pop	{r7, pc}

0800e7b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e7b6:	b580      	push	{r7, lr}
 800e7b8:	b086      	sub	sp, #24
 800e7ba:	af00      	add	r7, sp, #0
 800e7bc:	60f8      	str	r0, [r7, #12]
 800e7be:	607a      	str	r2, [r7, #4]
 800e7c0:	603b      	str	r3, [r7, #0]
 800e7c2:	200b      	movs	r0, #11
 800e7c4:	183b      	adds	r3, r7, r0
 800e7c6:	1c0a      	adds	r2, r1, #0
 800e7c8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e7ca:	183b      	adds	r3, r7, r0
 800e7cc:	781b      	ldrb	r3, [r3, #0]
 800e7ce:	2207      	movs	r2, #7
 800e7d0:	4013      	ands	r3, r2
 800e7d2:	1c5a      	adds	r2, r3, #1
 800e7d4:	0013      	movs	r3, r2
 800e7d6:	009b      	lsls	r3, r3, #2
 800e7d8:	189b      	adds	r3, r3, r2
 800e7da:	00db      	lsls	r3, r3, #3
 800e7dc:	68fa      	ldr	r2, [r7, #12]
 800e7de:	18d3      	adds	r3, r2, r3
 800e7e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	687a      	ldr	r2, [r7, #4]
 800e7e6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	683a      	ldr	r2, [r7, #0]
 800e7ec:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	2224      	movs	r2, #36	@ 0x24
 800e7f2:	2101      	movs	r1, #1
 800e7f4:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	683a      	ldr	r2, [r7, #0]
 800e7fa:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	2200      	movs	r2, #0
 800e800:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	2201      	movs	r2, #1
 800e806:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e808:	183b      	adds	r3, r7, r0
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	2207      	movs	r2, #7
 800e80e:	4013      	ands	r3, r2
 800e810:	b2da      	uxtb	r2, r3
 800e812:	697b      	ldr	r3, [r7, #20]
 800e814:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	697a      	ldr	r2, [r7, #20]
 800e81c:	0011      	movs	r1, r2
 800e81e:	0018      	movs	r0, r3
 800e820:	f005 fa74 	bl	8013d0c <USB_EPStartXfer>

  return HAL_OK;
 800e824:	2300      	movs	r3, #0
}
 800e826:	0018      	movs	r0, r3
 800e828:	46bd      	mov	sp, r7
 800e82a:	b006      	add	sp, #24
 800e82c:	bd80      	pop	{r7, pc}

0800e82e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e82e:	b580      	push	{r7, lr}
 800e830:	b084      	sub	sp, #16
 800e832:	af00      	add	r7, sp, #0
 800e834:	6078      	str	r0, [r7, #4]
 800e836:	000a      	movs	r2, r1
 800e838:	1cfb      	adds	r3, r7, #3
 800e83a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800e83c:	1cfb      	adds	r3, r7, #3
 800e83e:	781b      	ldrb	r3, [r3, #0]
 800e840:	2207      	movs	r2, #7
 800e842:	401a      	ands	r2, r3
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	685b      	ldr	r3, [r3, #4]
 800e848:	429a      	cmp	r2, r3
 800e84a:	d901      	bls.n	800e850 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800e84c:	2301      	movs	r3, #1
 800e84e:	e046      	b.n	800e8de <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e850:	1cfb      	adds	r3, r7, #3
 800e852:	781b      	ldrb	r3, [r3, #0]
 800e854:	b25b      	sxtb	r3, r3
 800e856:	2b00      	cmp	r3, #0
 800e858:	da0f      	bge.n	800e87a <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e85a:	1cfb      	adds	r3, r7, #3
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	2207      	movs	r2, #7
 800e860:	4013      	ands	r3, r2
 800e862:	1c5a      	adds	r2, r3, #1
 800e864:	0013      	movs	r3, r2
 800e866:	009b      	lsls	r3, r3, #2
 800e868:	189b      	adds	r3, r3, r2
 800e86a:	00db      	lsls	r3, r3, #3
 800e86c:	687a      	ldr	r2, [r7, #4]
 800e86e:	18d3      	adds	r3, r2, r3
 800e870:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	2201      	movs	r2, #1
 800e876:	705a      	strb	r2, [r3, #1]
 800e878:	e00d      	b.n	800e896 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e87a:	1cfb      	adds	r3, r7, #3
 800e87c:	781a      	ldrb	r2, [r3, #0]
 800e87e:	0013      	movs	r3, r2
 800e880:	009b      	lsls	r3, r3, #2
 800e882:	189b      	adds	r3, r3, r2
 800e884:	00db      	lsls	r3, r3, #3
 800e886:	3369      	adds	r3, #105	@ 0x69
 800e888:	33ff      	adds	r3, #255	@ 0xff
 800e88a:	687a      	ldr	r2, [r7, #4]
 800e88c:	18d3      	adds	r3, r2, r3
 800e88e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	2200      	movs	r2, #0
 800e894:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2201      	movs	r2, #1
 800e89a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e89c:	1cfb      	adds	r3, r7, #3
 800e89e:	781b      	ldrb	r3, [r3, #0]
 800e8a0:	2207      	movs	r2, #7
 800e8a2:	4013      	ands	r3, r2
 800e8a4:	b2da      	uxtb	r2, r3
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e8aa:	687a      	ldr	r2, [r7, #4]
 800e8ac:	23aa      	movs	r3, #170	@ 0xaa
 800e8ae:	009b      	lsls	r3, r3, #2
 800e8b0:	5cd3      	ldrb	r3, [r2, r3]
 800e8b2:	2b01      	cmp	r3, #1
 800e8b4:	d101      	bne.n	800e8ba <HAL_PCD_EP_SetStall+0x8c>
 800e8b6:	2302      	movs	r3, #2
 800e8b8:	e011      	b.n	800e8de <HAL_PCD_EP_SetStall+0xb0>
 800e8ba:	687a      	ldr	r2, [r7, #4]
 800e8bc:	23aa      	movs	r3, #170	@ 0xaa
 800e8be:	009b      	lsls	r3, r3, #2
 800e8c0:	2101      	movs	r1, #1
 800e8c2:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	68fa      	ldr	r2, [r7, #12]
 800e8ca:	0011      	movs	r1, r2
 800e8cc:	0018      	movs	r0, r3
 800e8ce:	f006 fb55 	bl	8014f7c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800e8d2:	687a      	ldr	r2, [r7, #4]
 800e8d4:	23aa      	movs	r3, #170	@ 0xaa
 800e8d6:	009b      	lsls	r3, r3, #2
 800e8d8:	2100      	movs	r1, #0
 800e8da:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e8dc:	2300      	movs	r3, #0
}
 800e8de:	0018      	movs	r0, r3
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	b004      	add	sp, #16
 800e8e4:	bd80      	pop	{r7, pc}

0800e8e6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e8e6:	b580      	push	{r7, lr}
 800e8e8:	b084      	sub	sp, #16
 800e8ea:	af00      	add	r7, sp, #0
 800e8ec:	6078      	str	r0, [r7, #4]
 800e8ee:	000a      	movs	r2, r1
 800e8f0:	1cfb      	adds	r3, r7, #3
 800e8f2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e8f4:	1cfb      	adds	r3, r7, #3
 800e8f6:	781b      	ldrb	r3, [r3, #0]
 800e8f8:	220f      	movs	r2, #15
 800e8fa:	401a      	ands	r2, r3
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	685b      	ldr	r3, [r3, #4]
 800e900:	429a      	cmp	r2, r3
 800e902:	d901      	bls.n	800e908 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800e904:	2301      	movs	r3, #1
 800e906:	e048      	b.n	800e99a <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e908:	1cfb      	adds	r3, r7, #3
 800e90a:	781b      	ldrb	r3, [r3, #0]
 800e90c:	b25b      	sxtb	r3, r3
 800e90e:	2b00      	cmp	r3, #0
 800e910:	da0f      	bge.n	800e932 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e912:	1cfb      	adds	r3, r7, #3
 800e914:	781b      	ldrb	r3, [r3, #0]
 800e916:	2207      	movs	r2, #7
 800e918:	4013      	ands	r3, r2
 800e91a:	1c5a      	adds	r2, r3, #1
 800e91c:	0013      	movs	r3, r2
 800e91e:	009b      	lsls	r3, r3, #2
 800e920:	189b      	adds	r3, r3, r2
 800e922:	00db      	lsls	r3, r3, #3
 800e924:	687a      	ldr	r2, [r7, #4]
 800e926:	18d3      	adds	r3, r2, r3
 800e928:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2201      	movs	r2, #1
 800e92e:	705a      	strb	r2, [r3, #1]
 800e930:	e00f      	b.n	800e952 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e932:	1cfb      	adds	r3, r7, #3
 800e934:	781b      	ldrb	r3, [r3, #0]
 800e936:	2207      	movs	r2, #7
 800e938:	401a      	ands	r2, r3
 800e93a:	0013      	movs	r3, r2
 800e93c:	009b      	lsls	r3, r3, #2
 800e93e:	189b      	adds	r3, r3, r2
 800e940:	00db      	lsls	r3, r3, #3
 800e942:	3369      	adds	r3, #105	@ 0x69
 800e944:	33ff      	adds	r3, #255	@ 0xff
 800e946:	687a      	ldr	r2, [r7, #4]
 800e948:	18d3      	adds	r3, r2, r3
 800e94a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	2200      	movs	r2, #0
 800e950:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	2200      	movs	r2, #0
 800e956:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e958:	1cfb      	adds	r3, r7, #3
 800e95a:	781b      	ldrb	r3, [r3, #0]
 800e95c:	2207      	movs	r2, #7
 800e95e:	4013      	ands	r3, r2
 800e960:	b2da      	uxtb	r2, r3
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e966:	687a      	ldr	r2, [r7, #4]
 800e968:	23aa      	movs	r3, #170	@ 0xaa
 800e96a:	009b      	lsls	r3, r3, #2
 800e96c:	5cd3      	ldrb	r3, [r2, r3]
 800e96e:	2b01      	cmp	r3, #1
 800e970:	d101      	bne.n	800e976 <HAL_PCD_EP_ClrStall+0x90>
 800e972:	2302      	movs	r3, #2
 800e974:	e011      	b.n	800e99a <HAL_PCD_EP_ClrStall+0xb4>
 800e976:	687a      	ldr	r2, [r7, #4]
 800e978:	23aa      	movs	r3, #170	@ 0xaa
 800e97a:	009b      	lsls	r3, r3, #2
 800e97c:	2101      	movs	r1, #1
 800e97e:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	68fa      	ldr	r2, [r7, #12]
 800e986:	0011      	movs	r1, r2
 800e988:	0018      	movs	r0, r3
 800e98a:	f006 fb47 	bl	801501c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800e98e:	687a      	ldr	r2, [r7, #4]
 800e990:	23aa      	movs	r3, #170	@ 0xaa
 800e992:	009b      	lsls	r3, r3, #2
 800e994:	2100      	movs	r1, #0
 800e996:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800e998:	2300      	movs	r3, #0
}
 800e99a:	0018      	movs	r0, r3
 800e99c:	46bd      	mov	sp, r7
 800e99e:	b004      	add	sp, #16
 800e9a0:	bd80      	pop	{r7, pc}
	...

0800e9a4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800e9a4:	b5b0      	push	{r4, r5, r7, lr}
 800e9a6:	b096      	sub	sp, #88	@ 0x58
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800e9ac:	f000 fbec 	bl	800f188 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681a      	ldr	r2, [r3, #0]
 800e9b4:	204e      	movs	r0, #78	@ 0x4e
 800e9b6:	183b      	adds	r3, r7, r0
 800e9b8:	2144      	movs	r1, #68	@ 0x44
 800e9ba:	5a52      	ldrh	r2, [r2, r1]
 800e9bc:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800e9be:	183b      	adds	r3, r7, r0
 800e9c0:	881b      	ldrh	r3, [r3, #0]
 800e9c2:	b2da      	uxtb	r2, r3
 800e9c4:	244d      	movs	r4, #77	@ 0x4d
 800e9c6:	193b      	adds	r3, r7, r4
 800e9c8:	210f      	movs	r1, #15
 800e9ca:	400a      	ands	r2, r1
 800e9cc:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800e9ce:	193b      	adds	r3, r7, r4
 800e9d0:	781b      	ldrb	r3, [r3, #0]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d000      	beq.n	800e9d8 <PCD_EP_ISR_Handler+0x34>
 800e9d6:	e18f      	b.n	800ecf8 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800e9d8:	183b      	adds	r3, r7, r0
 800e9da:	881b      	ldrh	r3, [r3, #0]
 800e9dc:	2210      	movs	r2, #16
 800e9de:	4013      	ands	r3, r2
 800e9e0:	d155      	bne.n	800ea8e <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	881b      	ldrh	r3, [r3, #0]
 800e9e8:	b29a      	uxth	r2, r3
 800e9ea:	200e      	movs	r0, #14
 800e9ec:	183b      	adds	r3, r7, r0
 800e9ee:	49bb      	ldr	r1, [pc, #748]	@ (800ecdc <PCD_EP_ISR_Handler+0x338>)
 800e9f0:	400a      	ands	r2, r1
 800e9f2:	801a      	strh	r2, [r3, #0]
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	183a      	adds	r2, r7, r0
 800e9fa:	8812      	ldrh	r2, [r2, #0]
 800e9fc:	49b8      	ldr	r1, [pc, #736]	@ (800ece0 <PCD_EP_ISR_Handler+0x33c>)
 800e9fe:	430a      	orrs	r2, r1
 800ea00:	b292      	uxth	r2, r2
 800ea02:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	3328      	adds	r3, #40	@ 0x28
 800ea08:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	2250      	movs	r2, #80	@ 0x50
 800ea10:	5a9b      	ldrh	r3, [r3, r2]
 800ea12:	b29b      	uxth	r3, r3
 800ea14:	001a      	movs	r2, r3
 800ea16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea18:	781b      	ldrb	r3, [r3, #0]
 800ea1a:	00db      	lsls	r3, r3, #3
 800ea1c:	18d2      	adds	r2, r2, r3
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	18d3      	adds	r3, r2, r3
 800ea24:	4aaf      	ldr	r2, [pc, #700]	@ (800ece4 <PCD_EP_ISR_Handler+0x340>)
 800ea26:	4694      	mov	ip, r2
 800ea28:	4463      	add	r3, ip
 800ea2a:	881b      	ldrh	r3, [r3, #0]
 800ea2c:	059b      	lsls	r3, r3, #22
 800ea2e:	0d9a      	lsrs	r2, r3, #22
 800ea30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea32:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800ea34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea36:	695a      	ldr	r2, [r3, #20]
 800ea38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea3a:	69db      	ldr	r3, [r3, #28]
 800ea3c:	18d2      	adds	r2, r2, r3
 800ea3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea40:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2100      	movs	r1, #0
 800ea46:	0018      	movs	r0, r3
 800ea48:	f008 fc56 	bl	80172f8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2224      	movs	r2, #36	@ 0x24
 800ea50:	5c9b      	ldrb	r3, [r3, r2]
 800ea52:	b2db      	uxtb	r3, r3
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d101      	bne.n	800ea5c <PCD_EP_ISR_Handler+0xb8>
 800ea58:	f000 fb96 	bl	800f188 <PCD_EP_ISR_Handler+0x7e4>
 800ea5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ea5e:	699b      	ldr	r3, [r3, #24]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d001      	beq.n	800ea68 <PCD_EP_ISR_Handler+0xc4>
 800ea64:	f000 fb90 	bl	800f188 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	2224      	movs	r2, #36	@ 0x24
 800ea6c:	5c9b      	ldrb	r3, [r3, r2]
 800ea6e:	b2db      	uxtb	r3, r3
 800ea70:	2280      	movs	r2, #128	@ 0x80
 800ea72:	4252      	negs	r2, r2
 800ea74:	4313      	orrs	r3, r2
 800ea76:	b2da      	uxtb	r2, r3
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	0011      	movs	r1, r2
 800ea7e:	224c      	movs	r2, #76	@ 0x4c
 800ea80:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2224      	movs	r2, #36	@ 0x24
 800ea86:	2100      	movs	r1, #0
 800ea88:	5499      	strb	r1, [r3, r2]
 800ea8a:	f000 fb7d 	bl	800f188 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	3369      	adds	r3, #105	@ 0x69
 800ea92:	33ff      	adds	r3, #255	@ 0xff
 800ea94:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681a      	ldr	r2, [r3, #0]
 800ea9a:	214a      	movs	r1, #74	@ 0x4a
 800ea9c:	187b      	adds	r3, r7, r1
 800ea9e:	8812      	ldrh	r2, [r2, #0]
 800eaa0:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800eaa2:	187b      	adds	r3, r7, r1
 800eaa4:	881a      	ldrh	r2, [r3, #0]
 800eaa6:	2380      	movs	r3, #128	@ 0x80
 800eaa8:	011b      	lsls	r3, r3, #4
 800eaaa:	4013      	ands	r3, r2
 800eaac:	d037      	beq.n	800eb1e <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	2250      	movs	r2, #80	@ 0x50
 800eab4:	5a9b      	ldrh	r3, [r3, r2]
 800eab6:	b29b      	uxth	r3, r3
 800eab8:	001a      	movs	r2, r3
 800eaba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eabc:	781b      	ldrb	r3, [r3, #0]
 800eabe:	00db      	lsls	r3, r3, #3
 800eac0:	18d2      	adds	r2, r2, r3
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	18d3      	adds	r3, r2, r3
 800eac8:	4a87      	ldr	r2, [pc, #540]	@ (800ece8 <PCD_EP_ISR_Handler+0x344>)
 800eaca:	4694      	mov	ip, r2
 800eacc:	4463      	add	r3, ip
 800eace:	881b      	ldrh	r3, [r3, #0]
 800ead0:	059b      	lsls	r3, r3, #22
 800ead2:	0d9a      	lsrs	r2, r3, #22
 800ead4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ead6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6818      	ldr	r0, [r3, #0]
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	22ac      	movs	r2, #172	@ 0xac
 800eae0:	0092      	lsls	r2, r2, #2
 800eae2:	1899      	adds	r1, r3, r2
 800eae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eae6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800eae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eaea:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800eaec:	b29b      	uxth	r3, r3
 800eaee:	f006 fbc8 	bl	8015282 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	881b      	ldrh	r3, [r3, #0]
 800eaf8:	b29a      	uxth	r2, r3
 800eafa:	2010      	movs	r0, #16
 800eafc:	183b      	adds	r3, r7, r0
 800eafe:	497b      	ldr	r1, [pc, #492]	@ (800ecec <PCD_EP_ISR_Handler+0x348>)
 800eb00:	400a      	ands	r2, r1
 800eb02:	801a      	strh	r2, [r3, #0]
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	183a      	adds	r2, r7, r0
 800eb0a:	8812      	ldrh	r2, [r2, #0]
 800eb0c:	2180      	movs	r1, #128	@ 0x80
 800eb0e:	430a      	orrs	r2, r1
 800eb10:	b292      	uxth	r2, r2
 800eb12:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	0018      	movs	r0, r3
 800eb18:	f008 fbb8 	bl	801728c <HAL_PCD_SetupStageCallback>
 800eb1c:	e334      	b.n	800f188 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800eb1e:	234a      	movs	r3, #74	@ 0x4a
 800eb20:	18fb      	adds	r3, r7, r3
 800eb22:	2200      	movs	r2, #0
 800eb24:	5e9b      	ldrsh	r3, [r3, r2]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	db00      	blt.n	800eb2c <PCD_EP_ISR_Handler+0x188>
 800eb2a:	e32d      	b.n	800f188 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	881b      	ldrh	r3, [r3, #0]
 800eb32:	b29a      	uxth	r2, r3
 800eb34:	201e      	movs	r0, #30
 800eb36:	183b      	adds	r3, r7, r0
 800eb38:	496c      	ldr	r1, [pc, #432]	@ (800ecec <PCD_EP_ISR_Handler+0x348>)
 800eb3a:	400a      	ands	r2, r1
 800eb3c:	801a      	strh	r2, [r3, #0]
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	183a      	adds	r2, r7, r0
 800eb44:	8812      	ldrh	r2, [r2, #0]
 800eb46:	2180      	movs	r1, #128	@ 0x80
 800eb48:	430a      	orrs	r2, r1
 800eb4a:	b292      	uxth	r2, r2
 800eb4c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	2250      	movs	r2, #80	@ 0x50
 800eb54:	5a9b      	ldrh	r3, [r3, r2]
 800eb56:	b29b      	uxth	r3, r3
 800eb58:	001a      	movs	r2, r3
 800eb5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb5c:	781b      	ldrb	r3, [r3, #0]
 800eb5e:	00db      	lsls	r3, r3, #3
 800eb60:	18d2      	adds	r2, r2, r3
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	18d3      	adds	r3, r2, r3
 800eb68:	4a5f      	ldr	r2, [pc, #380]	@ (800ece8 <PCD_EP_ISR_Handler+0x344>)
 800eb6a:	4694      	mov	ip, r2
 800eb6c:	4463      	add	r3, ip
 800eb6e:	881b      	ldrh	r3, [r3, #0]
 800eb70:	059b      	lsls	r3, r3, #22
 800eb72:	0d9a      	lsrs	r2, r3, #22
 800eb74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb76:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800eb78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb7a:	69db      	ldr	r3, [r3, #28]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d01a      	beq.n	800ebb6 <PCD_EP_ISR_Handler+0x212>
 800eb80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb82:	695b      	ldr	r3, [r3, #20]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d016      	beq.n	800ebb6 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6818      	ldr	r0, [r3, #0]
 800eb8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb8e:	6959      	ldr	r1, [r3, #20]
 800eb90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb92:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800eb94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb96:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800eb98:	b29b      	uxth	r3, r3
 800eb9a:	f006 fb72 	bl	8015282 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800eb9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eba0:	695a      	ldr	r2, [r3, #20]
 800eba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eba4:	69db      	ldr	r3, [r3, #28]
 800eba6:	18d2      	adds	r2, r2, r3
 800eba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebaa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2100      	movs	r1, #0
 800ebb0:	0018      	movs	r0, r3
 800ebb2:	f008 fb80 	bl	80172b6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681a      	ldr	r2, [r3, #0]
 800ebba:	214a      	movs	r1, #74	@ 0x4a
 800ebbc:	187b      	adds	r3, r7, r1
 800ebbe:	8812      	ldrh	r2, [r2, #0]
 800ebc0:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800ebc2:	187b      	adds	r3, r7, r1
 800ebc4:	881a      	ldrh	r2, [r3, #0]
 800ebc6:	2380      	movs	r3, #128	@ 0x80
 800ebc8:	011b      	lsls	r3, r3, #4
 800ebca:	4013      	ands	r3, r2
 800ebcc:	d000      	beq.n	800ebd0 <PCD_EP_ISR_Handler+0x22c>
 800ebce:	e2db      	b.n	800f188 <PCD_EP_ISR_Handler+0x7e4>
 800ebd0:	187b      	adds	r3, r7, r1
 800ebd2:	881a      	ldrh	r2, [r3, #0]
 800ebd4:	23c0      	movs	r3, #192	@ 0xc0
 800ebd6:	019b      	lsls	r3, r3, #6
 800ebd8:	401a      	ands	r2, r3
 800ebda:	23c0      	movs	r3, #192	@ 0xc0
 800ebdc:	019b      	lsls	r3, r3, #6
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	d100      	bne.n	800ebe4 <PCD_EP_ISR_Handler+0x240>
 800ebe2:	e2d1      	b.n	800f188 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	61bb      	str	r3, [r7, #24]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	2250      	movs	r2, #80	@ 0x50
 800ebf0:	5a9b      	ldrh	r3, [r3, r2]
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	001a      	movs	r2, r3
 800ebf6:	69bb      	ldr	r3, [r7, #24]
 800ebf8:	189b      	adds	r3, r3, r2
 800ebfa:	61bb      	str	r3, [r7, #24]
 800ebfc:	69bb      	ldr	r3, [r7, #24]
 800ebfe:	4a3a      	ldr	r2, [pc, #232]	@ (800ece8 <PCD_EP_ISR_Handler+0x344>)
 800ec00:	4694      	mov	ip, r2
 800ec02:	4463      	add	r3, ip
 800ec04:	617b      	str	r3, [r7, #20]
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	881b      	ldrh	r3, [r3, #0]
 800ec0a:	b29b      	uxth	r3, r3
 800ec0c:	059b      	lsls	r3, r3, #22
 800ec0e:	0d9b      	lsrs	r3, r3, #22
 800ec10:	b29a      	uxth	r2, r3
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	801a      	strh	r2, [r3, #0]
 800ec16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec18:	691b      	ldr	r3, [r3, #16]
 800ec1a:	2b3e      	cmp	r3, #62	@ 0x3e
 800ec1c:	d91a      	bls.n	800ec54 <PCD_EP_ISR_Handler+0x2b0>
 800ec1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec20:	691b      	ldr	r3, [r3, #16]
 800ec22:	095b      	lsrs	r3, r3, #5
 800ec24:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec28:	691b      	ldr	r3, [r3, #16]
 800ec2a:	221f      	movs	r2, #31
 800ec2c:	4013      	ands	r3, r2
 800ec2e:	d102      	bne.n	800ec36 <PCD_EP_ISR_Handler+0x292>
 800ec30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec32:	3b01      	subs	r3, #1
 800ec34:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	881b      	ldrh	r3, [r3, #0]
 800ec3a:	b29a      	uxth	r2, r3
 800ec3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec3e:	b29b      	uxth	r3, r3
 800ec40:	029b      	lsls	r3, r3, #10
 800ec42:	b29b      	uxth	r3, r3
 800ec44:	4313      	orrs	r3, r2
 800ec46:	b29b      	uxth	r3, r3
 800ec48:	4a25      	ldr	r2, [pc, #148]	@ (800ece0 <PCD_EP_ISR_Handler+0x33c>)
 800ec4a:	4313      	orrs	r3, r2
 800ec4c:	b29a      	uxth	r2, r3
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	801a      	strh	r2, [r3, #0]
 800ec52:	e023      	b.n	800ec9c <PCD_EP_ISR_Handler+0x2f8>
 800ec54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec56:	691b      	ldr	r3, [r3, #16]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d108      	bne.n	800ec6e <PCD_EP_ISR_Handler+0x2ca>
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	881b      	ldrh	r3, [r3, #0]
 800ec60:	b29b      	uxth	r3, r3
 800ec62:	4a1f      	ldr	r2, [pc, #124]	@ (800ece0 <PCD_EP_ISR_Handler+0x33c>)
 800ec64:	4313      	orrs	r3, r2
 800ec66:	b29a      	uxth	r2, r3
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	801a      	strh	r2, [r3, #0]
 800ec6c:	e016      	b.n	800ec9c <PCD_EP_ISR_Handler+0x2f8>
 800ec6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec70:	691b      	ldr	r3, [r3, #16]
 800ec72:	085b      	lsrs	r3, r3, #1
 800ec74:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec78:	691b      	ldr	r3, [r3, #16]
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	4013      	ands	r3, r2
 800ec7e:	d002      	beq.n	800ec86 <PCD_EP_ISR_Handler+0x2e2>
 800ec80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec82:	3301      	adds	r3, #1
 800ec84:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	881b      	ldrh	r3, [r3, #0]
 800ec8a:	b29a      	uxth	r2, r3
 800ec8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec8e:	b29b      	uxth	r3, r3
 800ec90:	029b      	lsls	r3, r3, #10
 800ec92:	b29b      	uxth	r3, r3
 800ec94:	4313      	orrs	r3, r2
 800ec96:	b29a      	uxth	r2, r3
 800ec98:	697b      	ldr	r3, [r7, #20]
 800ec9a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	881b      	ldrh	r3, [r3, #0]
 800eca2:	b29a      	uxth	r2, r3
 800eca4:	2012      	movs	r0, #18
 800eca6:	183b      	adds	r3, r7, r0
 800eca8:	4911      	ldr	r1, [pc, #68]	@ (800ecf0 <PCD_EP_ISR_Handler+0x34c>)
 800ecaa:	400a      	ands	r2, r1
 800ecac:	801a      	strh	r2, [r3, #0]
 800ecae:	183b      	adds	r3, r7, r0
 800ecb0:	183a      	adds	r2, r7, r0
 800ecb2:	8812      	ldrh	r2, [r2, #0]
 800ecb4:	2180      	movs	r1, #128	@ 0x80
 800ecb6:	0149      	lsls	r1, r1, #5
 800ecb8:	404a      	eors	r2, r1
 800ecba:	801a      	strh	r2, [r3, #0]
 800ecbc:	183b      	adds	r3, r7, r0
 800ecbe:	183a      	adds	r2, r7, r0
 800ecc0:	8812      	ldrh	r2, [r2, #0]
 800ecc2:	2180      	movs	r1, #128	@ 0x80
 800ecc4:	0189      	lsls	r1, r1, #6
 800ecc6:	404a      	eors	r2, r1
 800ecc8:	801a      	strh	r2, [r3, #0]
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	183a      	adds	r2, r7, r0
 800ecd0:	8812      	ldrh	r2, [r2, #0]
 800ecd2:	4908      	ldr	r1, [pc, #32]	@ (800ecf4 <PCD_EP_ISR_Handler+0x350>)
 800ecd4:	430a      	orrs	r2, r1
 800ecd6:	b292      	uxth	r2, r2
 800ecd8:	801a      	strh	r2, [r3, #0]
 800ecda:	e255      	b.n	800f188 <PCD_EP_ISR_Handler+0x7e4>
 800ecdc:	ffff8f0f 	.word	0xffff8f0f
 800ece0:	ffff8000 	.word	0xffff8000
 800ece4:	00000402 	.word	0x00000402
 800ece8:	00000406 	.word	0x00000406
 800ecec:	00000f8f 	.word	0x00000f8f
 800ecf0:	ffffbf8f 	.word	0xffffbf8f
 800ecf4:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	001a      	movs	r2, r3
 800ecfe:	204d      	movs	r0, #77	@ 0x4d
 800ed00:	183b      	adds	r3, r7, r0
 800ed02:	781b      	ldrb	r3, [r3, #0]
 800ed04:	009b      	lsls	r3, r3, #2
 800ed06:	18d2      	adds	r2, r2, r3
 800ed08:	214a      	movs	r1, #74	@ 0x4a
 800ed0a:	187b      	adds	r3, r7, r1
 800ed0c:	8812      	ldrh	r2, [r2, #0]
 800ed0e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800ed10:	187b      	adds	r3, r7, r1
 800ed12:	2200      	movs	r2, #0
 800ed14:	5e9b      	ldrsh	r3, [r3, r2]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	db00      	blt.n	800ed1c <PCD_EP_ISR_Handler+0x378>
 800ed1a:	e0fa      	b.n	800ef12 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	001a      	movs	r2, r3
 800ed22:	183b      	adds	r3, r7, r0
 800ed24:	781b      	ldrb	r3, [r3, #0]
 800ed26:	009b      	lsls	r3, r3, #2
 800ed28:	18d3      	adds	r3, r2, r3
 800ed2a:	881b      	ldrh	r3, [r3, #0]
 800ed2c:	b29a      	uxth	r2, r3
 800ed2e:	2448      	movs	r4, #72	@ 0x48
 800ed30:	193b      	adds	r3, r7, r4
 800ed32:	49d1      	ldr	r1, [pc, #836]	@ (800f078 <PCD_EP_ISR_Handler+0x6d4>)
 800ed34:	400a      	ands	r2, r1
 800ed36:	801a      	strh	r2, [r3, #0]
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	001a      	movs	r2, r3
 800ed3e:	183b      	adds	r3, r7, r0
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	009b      	lsls	r3, r3, #2
 800ed44:	18d3      	adds	r3, r2, r3
 800ed46:	193a      	adds	r2, r7, r4
 800ed48:	8812      	ldrh	r2, [r2, #0]
 800ed4a:	2180      	movs	r1, #128	@ 0x80
 800ed4c:	430a      	orrs	r2, r1
 800ed4e:	b292      	uxth	r2, r2
 800ed50:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800ed52:	183b      	adds	r3, r7, r0
 800ed54:	781a      	ldrb	r2, [r3, #0]
 800ed56:	0013      	movs	r3, r2
 800ed58:	009b      	lsls	r3, r3, #2
 800ed5a:	189b      	adds	r3, r3, r2
 800ed5c:	00db      	lsls	r3, r3, #3
 800ed5e:	3369      	adds	r3, #105	@ 0x69
 800ed60:	33ff      	adds	r3, #255	@ 0xff
 800ed62:	687a      	ldr	r2, [r7, #4]
 800ed64:	18d3      	adds	r3, r2, r3
 800ed66:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800ed68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed6a:	7b1b      	ldrb	r3, [r3, #12]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d125      	bne.n	800edbc <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	2250      	movs	r2, #80	@ 0x50
 800ed76:	5a9b      	ldrh	r3, [r3, r2]
 800ed78:	b29b      	uxth	r3, r3
 800ed7a:	001a      	movs	r2, r3
 800ed7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed7e:	781b      	ldrb	r3, [r3, #0]
 800ed80:	00db      	lsls	r3, r3, #3
 800ed82:	18d2      	adds	r2, r2, r3
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	18d3      	adds	r3, r2, r3
 800ed8a:	4abc      	ldr	r2, [pc, #752]	@ (800f07c <PCD_EP_ISR_Handler+0x6d8>)
 800ed8c:	4694      	mov	ip, r2
 800ed8e:	4463      	add	r3, ip
 800ed90:	881a      	ldrh	r2, [r3, #0]
 800ed92:	2450      	movs	r4, #80	@ 0x50
 800ed94:	193b      	adds	r3, r7, r4
 800ed96:	0592      	lsls	r2, r2, #22
 800ed98:	0d92      	lsrs	r2, r2, #22
 800ed9a:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800ed9c:	193b      	adds	r3, r7, r4
 800ed9e:	881b      	ldrh	r3, [r3, #0]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d100      	bne.n	800eda6 <PCD_EP_ISR_Handler+0x402>
 800eda4:	e08d      	b.n	800eec2 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	6818      	ldr	r0, [r3, #0]
 800edaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edac:	6959      	ldr	r1, [r3, #20]
 800edae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edb0:	88da      	ldrh	r2, [r3, #6]
 800edb2:	193b      	adds	r3, r7, r4
 800edb4:	881b      	ldrh	r3, [r3, #0]
 800edb6:	f006 fa64 	bl	8015282 <USB_ReadPMA>
 800edba:	e082      	b.n	800eec2 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800edbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edbe:	78db      	ldrb	r3, [r3, #3]
 800edc0:	2b02      	cmp	r3, #2
 800edc2:	d10c      	bne.n	800edde <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800edc4:	2350      	movs	r3, #80	@ 0x50
 800edc6:	18fc      	adds	r4, r7, r3
 800edc8:	234a      	movs	r3, #74	@ 0x4a
 800edca:	18fb      	adds	r3, r7, r3
 800edcc:	881a      	ldrh	r2, [r3, #0]
 800edce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	0018      	movs	r0, r3
 800edd4:	f000 f9ec 	bl	800f1b0 <HAL_PCD_EP_DB_Receive>
 800edd8:	0003      	movs	r3, r0
 800edda:	8023      	strh	r3, [r4, #0]
 800eddc:	e071      	b.n	800eec2 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	001a      	movs	r2, r3
 800ede4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ede6:	781b      	ldrb	r3, [r3, #0]
 800ede8:	009b      	lsls	r3, r3, #2
 800edea:	18d3      	adds	r3, r2, r3
 800edec:	881b      	ldrh	r3, [r3, #0]
 800edee:	b29a      	uxth	r2, r3
 800edf0:	2052      	movs	r0, #82	@ 0x52
 800edf2:	183b      	adds	r3, r7, r0
 800edf4:	49a2      	ldr	r1, [pc, #648]	@ (800f080 <PCD_EP_ISR_Handler+0x6dc>)
 800edf6:	400a      	ands	r2, r1
 800edf8:	801a      	strh	r2, [r3, #0]
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	001a      	movs	r2, r3
 800ee00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee02:	781b      	ldrb	r3, [r3, #0]
 800ee04:	009b      	lsls	r3, r3, #2
 800ee06:	18d3      	adds	r3, r2, r3
 800ee08:	183a      	adds	r2, r7, r0
 800ee0a:	8812      	ldrh	r2, [r2, #0]
 800ee0c:	499d      	ldr	r1, [pc, #628]	@ (800f084 <PCD_EP_ISR_Handler+0x6e0>)
 800ee0e:	430a      	orrs	r2, r1
 800ee10:	b292      	uxth	r2, r2
 800ee12:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	001a      	movs	r2, r3
 800ee1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee1c:	781b      	ldrb	r3, [r3, #0]
 800ee1e:	009b      	lsls	r3, r3, #2
 800ee20:	18d3      	adds	r3, r2, r3
 800ee22:	881b      	ldrh	r3, [r3, #0]
 800ee24:	b29b      	uxth	r3, r3
 800ee26:	001a      	movs	r2, r3
 800ee28:	2380      	movs	r3, #128	@ 0x80
 800ee2a:	01db      	lsls	r3, r3, #7
 800ee2c:	4013      	ands	r3, r2
 800ee2e:	d024      	beq.n	800ee7a <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	2250      	movs	r2, #80	@ 0x50
 800ee36:	5a9b      	ldrh	r3, [r3, r2]
 800ee38:	b29b      	uxth	r3, r3
 800ee3a:	001a      	movs	r2, r3
 800ee3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee3e:	781b      	ldrb	r3, [r3, #0]
 800ee40:	00db      	lsls	r3, r3, #3
 800ee42:	18d2      	adds	r2, r2, r3
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	18d3      	adds	r3, r2, r3
 800ee4a:	4a8f      	ldr	r2, [pc, #572]	@ (800f088 <PCD_EP_ISR_Handler+0x6e4>)
 800ee4c:	4694      	mov	ip, r2
 800ee4e:	4463      	add	r3, ip
 800ee50:	881a      	ldrh	r2, [r3, #0]
 800ee52:	2450      	movs	r4, #80	@ 0x50
 800ee54:	193b      	adds	r3, r7, r4
 800ee56:	0592      	lsls	r2, r2, #22
 800ee58:	0d92      	lsrs	r2, r2, #22
 800ee5a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800ee5c:	193b      	adds	r3, r7, r4
 800ee5e:	881b      	ldrh	r3, [r3, #0]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d02e      	beq.n	800eec2 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	6818      	ldr	r0, [r3, #0]
 800ee68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee6a:	6959      	ldr	r1, [r3, #20]
 800ee6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee6e:	891a      	ldrh	r2, [r3, #8]
 800ee70:	193b      	adds	r3, r7, r4
 800ee72:	881b      	ldrh	r3, [r3, #0]
 800ee74:	f006 fa05 	bl	8015282 <USB_ReadPMA>
 800ee78:	e023      	b.n	800eec2 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	2250      	movs	r2, #80	@ 0x50
 800ee80:	5a9b      	ldrh	r3, [r3, r2]
 800ee82:	b29b      	uxth	r3, r3
 800ee84:	001a      	movs	r2, r3
 800ee86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee88:	781b      	ldrb	r3, [r3, #0]
 800ee8a:	00db      	lsls	r3, r3, #3
 800ee8c:	18d2      	adds	r2, r2, r3
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	18d3      	adds	r3, r2, r3
 800ee94:	4a79      	ldr	r2, [pc, #484]	@ (800f07c <PCD_EP_ISR_Handler+0x6d8>)
 800ee96:	4694      	mov	ip, r2
 800ee98:	4463      	add	r3, ip
 800ee9a:	881a      	ldrh	r2, [r3, #0]
 800ee9c:	2450      	movs	r4, #80	@ 0x50
 800ee9e:	193b      	adds	r3, r7, r4
 800eea0:	0592      	lsls	r2, r2, #22
 800eea2:	0d92      	lsrs	r2, r2, #22
 800eea4:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800eea6:	193b      	adds	r3, r7, r4
 800eea8:	881b      	ldrh	r3, [r3, #0]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d009      	beq.n	800eec2 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6818      	ldr	r0, [r3, #0]
 800eeb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eeb4:	6959      	ldr	r1, [r3, #20]
 800eeb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eeb8:	895a      	ldrh	r2, [r3, #10]
 800eeba:	193b      	adds	r3, r7, r4
 800eebc:	881b      	ldrh	r3, [r3, #0]
 800eebe:	f006 f9e0 	bl	8015282 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800eec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eec4:	69da      	ldr	r2, [r3, #28]
 800eec6:	2150      	movs	r1, #80	@ 0x50
 800eec8:	187b      	adds	r3, r7, r1
 800eeca:	881b      	ldrh	r3, [r3, #0]
 800eecc:	18d2      	adds	r2, r2, r3
 800eece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eed0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800eed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eed4:	695a      	ldr	r2, [r3, #20]
 800eed6:	187b      	adds	r3, r7, r1
 800eed8:	881b      	ldrh	r3, [r3, #0]
 800eeda:	18d2      	adds	r2, r2, r3
 800eedc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eede:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800eee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eee2:	699b      	ldr	r3, [r3, #24]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d005      	beq.n	800eef4 <PCD_EP_ISR_Handler+0x550>
 800eee8:	187b      	adds	r3, r7, r1
 800eeea:	881a      	ldrh	r2, [r3, #0]
 800eeec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eeee:	691b      	ldr	r3, [r3, #16]
 800eef0:	429a      	cmp	r2, r3
 800eef2:	d207      	bcs.n	800ef04 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800eef4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eef6:	781a      	ldrb	r2, [r3, #0]
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	0011      	movs	r1, r2
 800eefc:	0018      	movs	r0, r3
 800eefe:	f008 f9da 	bl	80172b6 <HAL_PCD_DataOutStageCallback>
 800ef02:	e006      	b.n	800ef12 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ef0a:	0011      	movs	r1, r2
 800ef0c:	0018      	movs	r0, r3
 800ef0e:	f004 fefd 	bl	8013d0c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800ef12:	244a      	movs	r4, #74	@ 0x4a
 800ef14:	193b      	adds	r3, r7, r4
 800ef16:	881b      	ldrh	r3, [r3, #0]
 800ef18:	2280      	movs	r2, #128	@ 0x80
 800ef1a:	4013      	ands	r3, r2
 800ef1c:	d100      	bne.n	800ef20 <PCD_EP_ISR_Handler+0x57c>
 800ef1e:	e133      	b.n	800f188 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800ef20:	204d      	movs	r0, #77	@ 0x4d
 800ef22:	183b      	adds	r3, r7, r0
 800ef24:	781b      	ldrb	r3, [r3, #0]
 800ef26:	1c5a      	adds	r2, r3, #1
 800ef28:	0013      	movs	r3, r2
 800ef2a:	009b      	lsls	r3, r3, #2
 800ef2c:	189b      	adds	r3, r3, r2
 800ef2e:	00db      	lsls	r3, r3, #3
 800ef30:	687a      	ldr	r2, [r7, #4]
 800ef32:	18d3      	adds	r3, r2, r3
 800ef34:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	001a      	movs	r2, r3
 800ef3c:	183b      	adds	r3, r7, r0
 800ef3e:	781b      	ldrb	r3, [r3, #0]
 800ef40:	009b      	lsls	r3, r3, #2
 800ef42:	18d3      	adds	r3, r2, r3
 800ef44:	881b      	ldrh	r3, [r3, #0]
 800ef46:	b29a      	uxth	r2, r3
 800ef48:	2542      	movs	r5, #66	@ 0x42
 800ef4a:	197b      	adds	r3, r7, r5
 800ef4c:	494f      	ldr	r1, [pc, #316]	@ (800f08c <PCD_EP_ISR_Handler+0x6e8>)
 800ef4e:	400a      	ands	r2, r1
 800ef50:	801a      	strh	r2, [r3, #0]
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	001a      	movs	r2, r3
 800ef58:	183b      	adds	r3, r7, r0
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	009b      	lsls	r3, r3, #2
 800ef5e:	18d3      	adds	r3, r2, r3
 800ef60:	197a      	adds	r2, r7, r5
 800ef62:	8812      	ldrh	r2, [r2, #0]
 800ef64:	494a      	ldr	r1, [pc, #296]	@ (800f090 <PCD_EP_ISR_Handler+0x6ec>)
 800ef66:	430a      	orrs	r2, r1
 800ef68:	b292      	uxth	r2, r2
 800ef6a:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800ef6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef6e:	78db      	ldrb	r3, [r3, #3]
 800ef70:	2b01      	cmp	r3, #1
 800ef72:	d000      	beq.n	800ef76 <PCD_EP_ISR_Handler+0x5d2>
 800ef74:	e0af      	b.n	800f0d6 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 800ef76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef78:	2200      	movs	r2, #0
 800ef7a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800ef7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef7e:	7b1b      	ldrb	r3, [r3, #12]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d100      	bne.n	800ef86 <PCD_EP_ISR_Handler+0x5e2>
 800ef84:	e09f      	b.n	800f0c6 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ef86:	193b      	adds	r3, r7, r4
 800ef88:	881b      	ldrh	r3, [r3, #0]
 800ef8a:	2240      	movs	r2, #64	@ 0x40
 800ef8c:	4013      	ands	r3, r2
 800ef8e:	d046      	beq.n	800f01e <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ef90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ef92:	785b      	ldrb	r3, [r3, #1]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d125      	bne.n	800efe4 <PCD_EP_ISR_Handler+0x640>
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	2250      	movs	r2, #80	@ 0x50
 800efa4:	5a9b      	ldrh	r3, [r3, r2]
 800efa6:	b29b      	uxth	r3, r3
 800efa8:	001a      	movs	r2, r3
 800efaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efac:	189b      	adds	r3, r3, r2
 800efae:	627b      	str	r3, [r7, #36]	@ 0x24
 800efb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efb2:	781b      	ldrb	r3, [r3, #0]
 800efb4:	00da      	lsls	r2, r3, #3
 800efb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efb8:	18d3      	adds	r3, r2, r3
 800efba:	4a33      	ldr	r2, [pc, #204]	@ (800f088 <PCD_EP_ISR_Handler+0x6e4>)
 800efbc:	4694      	mov	ip, r2
 800efbe:	4463      	add	r3, ip
 800efc0:	623b      	str	r3, [r7, #32]
 800efc2:	6a3b      	ldr	r3, [r7, #32]
 800efc4:	881b      	ldrh	r3, [r3, #0]
 800efc6:	b29b      	uxth	r3, r3
 800efc8:	059b      	lsls	r3, r3, #22
 800efca:	0d9b      	lsrs	r3, r3, #22
 800efcc:	b29a      	uxth	r2, r3
 800efce:	6a3b      	ldr	r3, [r7, #32]
 800efd0:	801a      	strh	r2, [r3, #0]
 800efd2:	6a3b      	ldr	r3, [r7, #32]
 800efd4:	881b      	ldrh	r3, [r3, #0]
 800efd6:	b29b      	uxth	r3, r3
 800efd8:	4a2d      	ldr	r2, [pc, #180]	@ (800f090 <PCD_EP_ISR_Handler+0x6ec>)
 800efda:	4313      	orrs	r3, r2
 800efdc:	b29a      	uxth	r2, r3
 800efde:	6a3b      	ldr	r3, [r7, #32]
 800efe0:	801a      	strh	r2, [r3, #0]
 800efe2:	e070      	b.n	800f0c6 <PCD_EP_ISR_Handler+0x722>
 800efe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800efe6:	785b      	ldrb	r3, [r3, #1]
 800efe8:	2b01      	cmp	r3, #1
 800efea:	d16c      	bne.n	800f0c6 <PCD_EP_ISR_Handler+0x722>
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	2250      	movs	r2, #80	@ 0x50
 800eff8:	5a9b      	ldrh	r3, [r3, r2]
 800effa:	b29b      	uxth	r3, r3
 800effc:	001a      	movs	r2, r3
 800effe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f000:	189b      	adds	r3, r3, r2
 800f002:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f006:	781b      	ldrb	r3, [r3, #0]
 800f008:	00da      	lsls	r2, r3, #3
 800f00a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f00c:	18d3      	adds	r3, r2, r3
 800f00e:	4a1e      	ldr	r2, [pc, #120]	@ (800f088 <PCD_EP_ISR_Handler+0x6e4>)
 800f010:	4694      	mov	ip, r2
 800f012:	4463      	add	r3, ip
 800f014:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f018:	2200      	movs	r2, #0
 800f01a:	801a      	strh	r2, [r3, #0]
 800f01c:	e053      	b.n	800f0c6 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f024:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f026:	785b      	ldrb	r3, [r3, #1]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d133      	bne.n	800f094 <PCD_EP_ISR_Handler+0x6f0>
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	637b      	str	r3, [r7, #52]	@ 0x34
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	2250      	movs	r2, #80	@ 0x50
 800f038:	5a9b      	ldrh	r3, [r3, r2]
 800f03a:	b29b      	uxth	r3, r3
 800f03c:	001a      	movs	r2, r3
 800f03e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f040:	189b      	adds	r3, r3, r2
 800f042:	637b      	str	r3, [r7, #52]	@ 0x34
 800f044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	00da      	lsls	r2, r3, #3
 800f04a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f04c:	18d3      	adds	r3, r2, r3
 800f04e:	4a0b      	ldr	r2, [pc, #44]	@ (800f07c <PCD_EP_ISR_Handler+0x6d8>)
 800f050:	4694      	mov	ip, r2
 800f052:	4463      	add	r3, ip
 800f054:	633b      	str	r3, [r7, #48]	@ 0x30
 800f056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f058:	881b      	ldrh	r3, [r3, #0]
 800f05a:	b29b      	uxth	r3, r3
 800f05c:	059b      	lsls	r3, r3, #22
 800f05e:	0d9b      	lsrs	r3, r3, #22
 800f060:	b29a      	uxth	r2, r3
 800f062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f064:	801a      	strh	r2, [r3, #0]
 800f066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f068:	881b      	ldrh	r3, [r3, #0]
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	4a08      	ldr	r2, [pc, #32]	@ (800f090 <PCD_EP_ISR_Handler+0x6ec>)
 800f06e:	4313      	orrs	r3, r2
 800f070:	b29a      	uxth	r2, r3
 800f072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f074:	801a      	strh	r2, [r3, #0]
 800f076:	e026      	b.n	800f0c6 <PCD_EP_ISR_Handler+0x722>
 800f078:	00000f8f 	.word	0x00000f8f
 800f07c:	00000406 	.word	0x00000406
 800f080:	ffff8f8f 	.word	0xffff8f8f
 800f084:	ffff80c0 	.word	0xffff80c0
 800f088:	00000402 	.word	0x00000402
 800f08c:	ffff8f0f 	.word	0xffff8f0f
 800f090:	ffff8000 	.word	0xffff8000
 800f094:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f096:	785b      	ldrb	r3, [r3, #1]
 800f098:	2b01      	cmp	r3, #1
 800f09a:	d114      	bne.n	800f0c6 <PCD_EP_ISR_Handler+0x722>
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	2250      	movs	r2, #80	@ 0x50
 800f0a2:	5a9b      	ldrh	r3, [r3, r2]
 800f0a4:	b29b      	uxth	r3, r3
 800f0a6:	001a      	movs	r2, r3
 800f0a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0aa:	189b      	adds	r3, r3, r2
 800f0ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f0ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0b0:	781b      	ldrb	r3, [r3, #0]
 800f0b2:	00da      	lsls	r2, r3, #3
 800f0b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0b6:	18d3      	adds	r3, r2, r3
 800f0b8:	4a3b      	ldr	r2, [pc, #236]	@ (800f1a8 <PCD_EP_ISR_Handler+0x804>)
 800f0ba:	4694      	mov	ip, r2
 800f0bc:	4463      	add	r3, ip
 800f0be:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f0c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0c8:	781a      	ldrb	r2, [r3, #0]
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	0011      	movs	r1, r2
 800f0ce:	0018      	movs	r0, r3
 800f0d0:	f008 f912 	bl	80172f8 <HAL_PCD_DataInStageCallback>
 800f0d4:	e058      	b.n	800f188 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800f0d6:	234a      	movs	r3, #74	@ 0x4a
 800f0d8:	18fb      	adds	r3, r7, r3
 800f0da:	881a      	ldrh	r2, [r3, #0]
 800f0dc:	2380      	movs	r3, #128	@ 0x80
 800f0de:	005b      	lsls	r3, r3, #1
 800f0e0:	4013      	ands	r3, r2
 800f0e2:	d149      	bne.n	800f178 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	2250      	movs	r2, #80	@ 0x50
 800f0ea:	5a9b      	ldrh	r3, [r3, r2]
 800f0ec:	b29b      	uxth	r3, r3
 800f0ee:	001a      	movs	r2, r3
 800f0f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f0f2:	781b      	ldrb	r3, [r3, #0]
 800f0f4:	00db      	lsls	r3, r3, #3
 800f0f6:	18d2      	adds	r2, r2, r3
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	18d3      	adds	r3, r2, r3
 800f0fe:	4a2b      	ldr	r2, [pc, #172]	@ (800f1ac <PCD_EP_ISR_Handler+0x808>)
 800f100:	4694      	mov	ip, r2
 800f102:	4463      	add	r3, ip
 800f104:	881a      	ldrh	r2, [r3, #0]
 800f106:	2140      	movs	r1, #64	@ 0x40
 800f108:	187b      	adds	r3, r7, r1
 800f10a:	0592      	lsls	r2, r2, #22
 800f10c:	0d92      	lsrs	r2, r2, #22
 800f10e:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800f110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f112:	699a      	ldr	r2, [r3, #24]
 800f114:	187b      	adds	r3, r7, r1
 800f116:	881b      	ldrh	r3, [r3, #0]
 800f118:	429a      	cmp	r2, r3
 800f11a:	d907      	bls.n	800f12c <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 800f11c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f11e:	699a      	ldr	r2, [r3, #24]
 800f120:	187b      	adds	r3, r7, r1
 800f122:	881b      	ldrh	r3, [r3, #0]
 800f124:	1ad2      	subs	r2, r2, r3
 800f126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f128:	619a      	str	r2, [r3, #24]
 800f12a:	e002      	b.n	800f132 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 800f12c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f12e:	2200      	movs	r2, #0
 800f130:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800f132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f134:	699b      	ldr	r3, [r3, #24]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d107      	bne.n	800f14a <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f13a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f13c:	781a      	ldrb	r2, [r3, #0]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	0011      	movs	r1, r2
 800f142:	0018      	movs	r0, r3
 800f144:	f008 f8d8 	bl	80172f8 <HAL_PCD_DataInStageCallback>
 800f148:	e01e      	b.n	800f188 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800f14a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f14c:	695a      	ldr	r2, [r3, #20]
 800f14e:	2140      	movs	r1, #64	@ 0x40
 800f150:	187b      	adds	r3, r7, r1
 800f152:	881b      	ldrh	r3, [r3, #0]
 800f154:	18d2      	adds	r2, r2, r3
 800f156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f158:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800f15a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f15c:	69da      	ldr	r2, [r3, #28]
 800f15e:	187b      	adds	r3, r7, r1
 800f160:	881b      	ldrh	r3, [r3, #0]
 800f162:	18d2      	adds	r2, r2, r3
 800f164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f166:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f16e:	0011      	movs	r1, r2
 800f170:	0018      	movs	r0, r3
 800f172:	f004 fdcb 	bl	8013d0c <USB_EPStartXfer>
 800f176:	e007      	b.n	800f188 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800f178:	234a      	movs	r3, #74	@ 0x4a
 800f17a:	18fb      	adds	r3, r7, r3
 800f17c:	881a      	ldrh	r2, [r3, #0]
 800f17e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	0018      	movs	r0, r3
 800f184:	f000 f930 	bl	800f3e8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	2244      	movs	r2, #68	@ 0x44
 800f18e:	5a9b      	ldrh	r3, [r3, r2]
 800f190:	b29b      	uxth	r3, r3
 800f192:	b21b      	sxth	r3, r3
 800f194:	2b00      	cmp	r3, #0
 800f196:	da01      	bge.n	800f19c <PCD_EP_ISR_Handler+0x7f8>
 800f198:	f7ff fc0a 	bl	800e9b0 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 800f19c:	2300      	movs	r3, #0
}
 800f19e:	0018      	movs	r0, r3
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	b016      	add	sp, #88	@ 0x58
 800f1a4:	bdb0      	pop	{r4, r5, r7, pc}
 800f1a6:	46c0      	nop			@ (mov r8, r8)
 800f1a8:	00000406 	.word	0x00000406
 800f1ac:	00000402 	.word	0x00000402

0800f1b0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800f1b0:	b590      	push	{r4, r7, lr}
 800f1b2:	b089      	sub	sp, #36	@ 0x24
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	60f8      	str	r0, [r7, #12]
 800f1b8:	60b9      	str	r1, [r7, #8]
 800f1ba:	1dbb      	adds	r3, r7, #6
 800f1bc:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f1be:	1dbb      	adds	r3, r7, #6
 800f1c0:	881a      	ldrh	r2, [r3, #0]
 800f1c2:	2380      	movs	r3, #128	@ 0x80
 800f1c4:	01db      	lsls	r3, r3, #7
 800f1c6:	4013      	ands	r3, r2
 800f1c8:	d100      	bne.n	800f1cc <HAL_PCD_EP_DB_Receive+0x1c>
 800f1ca:	e07d      	b.n	800f2c8 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	2250      	movs	r2, #80	@ 0x50
 800f1d2:	5a9b      	ldrh	r3, [r3, r2]
 800f1d4:	b29b      	uxth	r3, r3
 800f1d6:	001a      	movs	r2, r3
 800f1d8:	68bb      	ldr	r3, [r7, #8]
 800f1da:	781b      	ldrb	r3, [r3, #0]
 800f1dc:	00db      	lsls	r3, r3, #3
 800f1de:	18d2      	adds	r2, r2, r3
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	18d3      	adds	r3, r2, r3
 800f1e6:	4a7a      	ldr	r2, [pc, #488]	@ (800f3d0 <HAL_PCD_EP_DB_Receive+0x220>)
 800f1e8:	4694      	mov	ip, r2
 800f1ea:	4463      	add	r3, ip
 800f1ec:	881a      	ldrh	r2, [r3, #0]
 800f1ee:	211a      	movs	r1, #26
 800f1f0:	187b      	adds	r3, r7, r1
 800f1f2:	0592      	lsls	r2, r2, #22
 800f1f4:	0d92      	lsrs	r2, r2, #22
 800f1f6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	699a      	ldr	r2, [r3, #24]
 800f1fc:	187b      	adds	r3, r7, r1
 800f1fe:	881b      	ldrh	r3, [r3, #0]
 800f200:	429a      	cmp	r2, r3
 800f202:	d307      	bcc.n	800f214 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800f204:	68bb      	ldr	r3, [r7, #8]
 800f206:	699a      	ldr	r2, [r3, #24]
 800f208:	187b      	adds	r3, r7, r1
 800f20a:	881b      	ldrh	r3, [r3, #0]
 800f20c:	1ad2      	subs	r2, r2, r3
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	619a      	str	r2, [r3, #24]
 800f212:	e002      	b.n	800f21a <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	2200      	movs	r2, #0
 800f218:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	699b      	ldr	r3, [r3, #24]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d121      	bne.n	800f266 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	001a      	movs	r2, r3
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	781b      	ldrb	r3, [r3, #0]
 800f22c:	009b      	lsls	r3, r3, #2
 800f22e:	18d3      	adds	r3, r2, r3
 800f230:	881b      	ldrh	r3, [r3, #0]
 800f232:	b29a      	uxth	r2, r3
 800f234:	2018      	movs	r0, #24
 800f236:	183b      	adds	r3, r7, r0
 800f238:	4966      	ldr	r1, [pc, #408]	@ (800f3d4 <HAL_PCD_EP_DB_Receive+0x224>)
 800f23a:	400a      	ands	r2, r1
 800f23c:	801a      	strh	r2, [r3, #0]
 800f23e:	183b      	adds	r3, r7, r0
 800f240:	183a      	adds	r2, r7, r0
 800f242:	8812      	ldrh	r2, [r2, #0]
 800f244:	2180      	movs	r1, #128	@ 0x80
 800f246:	0189      	lsls	r1, r1, #6
 800f248:	404a      	eors	r2, r1
 800f24a:	801a      	strh	r2, [r3, #0]
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	001a      	movs	r2, r3
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	781b      	ldrb	r3, [r3, #0]
 800f256:	009b      	lsls	r3, r3, #2
 800f258:	18d3      	adds	r3, r2, r3
 800f25a:	183a      	adds	r2, r7, r0
 800f25c:	8812      	ldrh	r2, [r2, #0]
 800f25e:	495e      	ldr	r1, [pc, #376]	@ (800f3d8 <HAL_PCD_EP_DB_Receive+0x228>)
 800f260:	430a      	orrs	r2, r1
 800f262:	b292      	uxth	r2, r2
 800f264:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800f266:	1dbb      	adds	r3, r7, #6
 800f268:	881b      	ldrh	r3, [r3, #0]
 800f26a:	2240      	movs	r2, #64	@ 0x40
 800f26c:	4013      	ands	r3, r2
 800f26e:	d01a      	beq.n	800f2a6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	001a      	movs	r2, r3
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	781b      	ldrb	r3, [r3, #0]
 800f27a:	009b      	lsls	r3, r3, #2
 800f27c:	18d3      	adds	r3, r2, r3
 800f27e:	881b      	ldrh	r3, [r3, #0]
 800f280:	b29a      	uxth	r2, r3
 800f282:	2016      	movs	r0, #22
 800f284:	183b      	adds	r3, r7, r0
 800f286:	4955      	ldr	r1, [pc, #340]	@ (800f3dc <HAL_PCD_EP_DB_Receive+0x22c>)
 800f288:	400a      	ands	r2, r1
 800f28a:	801a      	strh	r2, [r3, #0]
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	001a      	movs	r2, r3
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	781b      	ldrb	r3, [r3, #0]
 800f296:	009b      	lsls	r3, r3, #2
 800f298:	18d3      	adds	r3, r2, r3
 800f29a:	183a      	adds	r2, r7, r0
 800f29c:	8812      	ldrh	r2, [r2, #0]
 800f29e:	4950      	ldr	r1, [pc, #320]	@ (800f3e0 <HAL_PCD_EP_DB_Receive+0x230>)
 800f2a0:	430a      	orrs	r2, r1
 800f2a2:	b292      	uxth	r2, r2
 800f2a4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800f2a6:	241a      	movs	r4, #26
 800f2a8:	193b      	adds	r3, r7, r4
 800f2aa:	881b      	ldrh	r3, [r3, #0]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d100      	bne.n	800f2b2 <HAL_PCD_EP_DB_Receive+0x102>
 800f2b0:	e086      	b.n	800f3c0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	6818      	ldr	r0, [r3, #0]
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	6959      	ldr	r1, [r3, #20]
 800f2ba:	68bb      	ldr	r3, [r7, #8]
 800f2bc:	891a      	ldrh	r2, [r3, #8]
 800f2be:	193b      	adds	r3, r7, r4
 800f2c0:	881b      	ldrh	r3, [r3, #0]
 800f2c2:	f005 ffde 	bl	8015282 <USB_ReadPMA>
 800f2c6:	e07b      	b.n	800f3c0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	2250      	movs	r2, #80	@ 0x50
 800f2ce:	5a9b      	ldrh	r3, [r3, r2]
 800f2d0:	b29b      	uxth	r3, r3
 800f2d2:	001a      	movs	r2, r3
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	781b      	ldrb	r3, [r3, #0]
 800f2d8:	00db      	lsls	r3, r3, #3
 800f2da:	18d2      	adds	r2, r2, r3
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	18d3      	adds	r3, r2, r3
 800f2e2:	4a40      	ldr	r2, [pc, #256]	@ (800f3e4 <HAL_PCD_EP_DB_Receive+0x234>)
 800f2e4:	4694      	mov	ip, r2
 800f2e6:	4463      	add	r3, ip
 800f2e8:	881a      	ldrh	r2, [r3, #0]
 800f2ea:	211a      	movs	r1, #26
 800f2ec:	187b      	adds	r3, r7, r1
 800f2ee:	0592      	lsls	r2, r2, #22
 800f2f0:	0d92      	lsrs	r2, r2, #22
 800f2f2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	699a      	ldr	r2, [r3, #24]
 800f2f8:	187b      	adds	r3, r7, r1
 800f2fa:	881b      	ldrh	r3, [r3, #0]
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d307      	bcc.n	800f310 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	699a      	ldr	r2, [r3, #24]
 800f304:	187b      	adds	r3, r7, r1
 800f306:	881b      	ldrh	r3, [r3, #0]
 800f308:	1ad2      	subs	r2, r2, r3
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	619a      	str	r2, [r3, #24]
 800f30e:	e002      	b.n	800f316 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800f310:	68bb      	ldr	r3, [r7, #8]
 800f312:	2200      	movs	r2, #0
 800f314:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	699b      	ldr	r3, [r3, #24]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d121      	bne.n	800f362 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	001a      	movs	r2, r3
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	781b      	ldrb	r3, [r3, #0]
 800f328:	009b      	lsls	r3, r3, #2
 800f32a:	18d3      	adds	r3, r2, r3
 800f32c:	881b      	ldrh	r3, [r3, #0]
 800f32e:	b29a      	uxth	r2, r3
 800f330:	201e      	movs	r0, #30
 800f332:	183b      	adds	r3, r7, r0
 800f334:	4927      	ldr	r1, [pc, #156]	@ (800f3d4 <HAL_PCD_EP_DB_Receive+0x224>)
 800f336:	400a      	ands	r2, r1
 800f338:	801a      	strh	r2, [r3, #0]
 800f33a:	183b      	adds	r3, r7, r0
 800f33c:	183a      	adds	r2, r7, r0
 800f33e:	8812      	ldrh	r2, [r2, #0]
 800f340:	2180      	movs	r1, #128	@ 0x80
 800f342:	0189      	lsls	r1, r1, #6
 800f344:	404a      	eors	r2, r1
 800f346:	801a      	strh	r2, [r3, #0]
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	001a      	movs	r2, r3
 800f34e:	68bb      	ldr	r3, [r7, #8]
 800f350:	781b      	ldrb	r3, [r3, #0]
 800f352:	009b      	lsls	r3, r3, #2
 800f354:	18d3      	adds	r3, r2, r3
 800f356:	183a      	adds	r2, r7, r0
 800f358:	8812      	ldrh	r2, [r2, #0]
 800f35a:	491f      	ldr	r1, [pc, #124]	@ (800f3d8 <HAL_PCD_EP_DB_Receive+0x228>)
 800f35c:	430a      	orrs	r2, r1
 800f35e:	b292      	uxth	r2, r2
 800f360:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800f362:	1dbb      	adds	r3, r7, #6
 800f364:	881b      	ldrh	r3, [r3, #0]
 800f366:	2240      	movs	r2, #64	@ 0x40
 800f368:	4013      	ands	r3, r2
 800f36a:	d11a      	bne.n	800f3a2 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	001a      	movs	r2, r3
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	781b      	ldrb	r3, [r3, #0]
 800f376:	009b      	lsls	r3, r3, #2
 800f378:	18d3      	adds	r3, r2, r3
 800f37a:	881b      	ldrh	r3, [r3, #0]
 800f37c:	b29a      	uxth	r2, r3
 800f37e:	201c      	movs	r0, #28
 800f380:	183b      	adds	r3, r7, r0
 800f382:	4916      	ldr	r1, [pc, #88]	@ (800f3dc <HAL_PCD_EP_DB_Receive+0x22c>)
 800f384:	400a      	ands	r2, r1
 800f386:	801a      	strh	r2, [r3, #0]
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	001a      	movs	r2, r3
 800f38e:	68bb      	ldr	r3, [r7, #8]
 800f390:	781b      	ldrb	r3, [r3, #0]
 800f392:	009b      	lsls	r3, r3, #2
 800f394:	18d3      	adds	r3, r2, r3
 800f396:	183a      	adds	r2, r7, r0
 800f398:	8812      	ldrh	r2, [r2, #0]
 800f39a:	4911      	ldr	r1, [pc, #68]	@ (800f3e0 <HAL_PCD_EP_DB_Receive+0x230>)
 800f39c:	430a      	orrs	r2, r1
 800f39e:	b292      	uxth	r2, r2
 800f3a0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800f3a2:	241a      	movs	r4, #26
 800f3a4:	193b      	adds	r3, r7, r4
 800f3a6:	881b      	ldrh	r3, [r3, #0]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d009      	beq.n	800f3c0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	6818      	ldr	r0, [r3, #0]
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	6959      	ldr	r1, [r3, #20]
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	895a      	ldrh	r2, [r3, #10]
 800f3b8:	193b      	adds	r3, r7, r4
 800f3ba:	881b      	ldrh	r3, [r3, #0]
 800f3bc:	f005 ff61 	bl	8015282 <USB_ReadPMA>
    }
  }

  return count;
 800f3c0:	231a      	movs	r3, #26
 800f3c2:	18fb      	adds	r3, r7, r3
 800f3c4:	881b      	ldrh	r3, [r3, #0]
}
 800f3c6:	0018      	movs	r0, r3
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	b009      	add	sp, #36	@ 0x24
 800f3cc:	bd90      	pop	{r4, r7, pc}
 800f3ce:	46c0      	nop			@ (mov r8, r8)
 800f3d0:	00000402 	.word	0x00000402
 800f3d4:	ffffbf8f 	.word	0xffffbf8f
 800f3d8:	ffff8080 	.word	0xffff8080
 800f3dc:	ffff8f8f 	.word	0xffff8f8f
 800f3e0:	ffff80c0 	.word	0xffff80c0
 800f3e4:	00000406 	.word	0x00000406

0800f3e8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b0a4      	sub	sp, #144	@ 0x90
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	60f8      	str	r0, [r7, #12]
 800f3f0:	60b9      	str	r1, [r7, #8]
 800f3f2:	1dbb      	adds	r3, r7, #6
 800f3f4:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800f3f6:	1dbb      	adds	r3, r7, #6
 800f3f8:	881b      	ldrh	r3, [r3, #0]
 800f3fa:	2240      	movs	r2, #64	@ 0x40
 800f3fc:	4013      	ands	r3, r2
 800f3fe:	d100      	bne.n	800f402 <HAL_PCD_EP_DB_Transmit+0x1a>
 800f400:	e1e4      	b.n	800f7cc <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	2250      	movs	r2, #80	@ 0x50
 800f408:	5a9b      	ldrh	r3, [r3, r2]
 800f40a:	b29b      	uxth	r3, r3
 800f40c:	001a      	movs	r2, r3
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	00db      	lsls	r3, r3, #3
 800f414:	18d2      	adds	r2, r2, r3
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	18d3      	adds	r3, r2, r3
 800f41c:	4ad0      	ldr	r2, [pc, #832]	@ (800f760 <HAL_PCD_EP_DB_Transmit+0x378>)
 800f41e:	4694      	mov	ip, r2
 800f420:	4463      	add	r3, ip
 800f422:	881a      	ldrh	r2, [r3, #0]
 800f424:	2186      	movs	r1, #134	@ 0x86
 800f426:	187b      	adds	r3, r7, r1
 800f428:	0592      	lsls	r2, r2, #22
 800f42a:	0d92      	lsrs	r2, r2, #22
 800f42c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	699a      	ldr	r2, [r3, #24]
 800f432:	187b      	adds	r3, r7, r1
 800f434:	881b      	ldrh	r3, [r3, #0]
 800f436:	429a      	cmp	r2, r3
 800f438:	d907      	bls.n	800f44a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	699a      	ldr	r2, [r3, #24]
 800f43e:	187b      	adds	r3, r7, r1
 800f440:	881b      	ldrh	r3, [r3, #0]
 800f442:	1ad2      	subs	r2, r2, r3
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	619a      	str	r2, [r3, #24]
 800f448:	e002      	b.n	800f450 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	2200      	movs	r2, #0
 800f44e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800f450:	68bb      	ldr	r3, [r7, #8]
 800f452:	699b      	ldr	r3, [r3, #24]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d000      	beq.n	800f45a <HAL_PCD_EP_DB_Transmit+0x72>
 800f458:	e0b5      	b.n	800f5c6 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	785b      	ldrb	r3, [r3, #1]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d125      	bne.n	800f4ae <HAL_PCD_EP_DB_Transmit+0xc6>
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	2250      	movs	r2, #80	@ 0x50
 800f46e:	5a9b      	ldrh	r3, [r3, r2]
 800f470:	b29b      	uxth	r3, r3
 800f472:	001a      	movs	r2, r3
 800f474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f476:	189b      	adds	r3, r3, r2
 800f478:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	781b      	ldrb	r3, [r3, #0]
 800f47e:	00da      	lsls	r2, r3, #3
 800f480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f482:	18d3      	adds	r3, r2, r3
 800f484:	4ab6      	ldr	r2, [pc, #728]	@ (800f760 <HAL_PCD_EP_DB_Transmit+0x378>)
 800f486:	4694      	mov	ip, r2
 800f488:	4463      	add	r3, ip
 800f48a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f48e:	881b      	ldrh	r3, [r3, #0]
 800f490:	b29b      	uxth	r3, r3
 800f492:	059b      	lsls	r3, r3, #22
 800f494:	0d9b      	lsrs	r3, r3, #22
 800f496:	b29a      	uxth	r2, r3
 800f498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f49a:	801a      	strh	r2, [r3, #0]
 800f49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f49e:	881b      	ldrh	r3, [r3, #0]
 800f4a0:	b29b      	uxth	r3, r3
 800f4a2:	4ab0      	ldr	r2, [pc, #704]	@ (800f764 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f4a4:	4313      	orrs	r3, r2
 800f4a6:	b29a      	uxth	r2, r3
 800f4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4aa:	801a      	strh	r2, [r3, #0]
 800f4ac:	e01b      	b.n	800f4e6 <HAL_PCD_EP_DB_Transmit+0xfe>
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	785b      	ldrb	r3, [r3, #1]
 800f4b2:	2b01      	cmp	r3, #1
 800f4b4:	d117      	bne.n	800f4e6 <HAL_PCD_EP_DB_Transmit+0xfe>
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	2250      	movs	r2, #80	@ 0x50
 800f4c2:	5a9b      	ldrh	r3, [r3, r2]
 800f4c4:	b29b      	uxth	r3, r3
 800f4c6:	001a      	movs	r2, r3
 800f4c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4ca:	189b      	adds	r3, r3, r2
 800f4cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	781b      	ldrb	r3, [r3, #0]
 800f4d2:	00da      	lsls	r2, r3, #3
 800f4d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f4d6:	18d3      	adds	r3, r2, r3
 800f4d8:	4aa1      	ldr	r2, [pc, #644]	@ (800f760 <HAL_PCD_EP_DB_Transmit+0x378>)
 800f4da:	4694      	mov	ip, r2
 800f4dc:	4463      	add	r3, ip
 800f4de:	633b      	str	r3, [r7, #48]	@ 0x30
 800f4e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	785b      	ldrb	r3, [r3, #1]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d125      	bne.n	800f540 <HAL_PCD_EP_DB_Transmit+0x158>
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	61fb      	str	r3, [r7, #28]
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	2250      	movs	r2, #80	@ 0x50
 800f500:	5a9b      	ldrh	r3, [r3, r2]
 800f502:	b29b      	uxth	r3, r3
 800f504:	001a      	movs	r2, r3
 800f506:	69fb      	ldr	r3, [r7, #28]
 800f508:	189b      	adds	r3, r3, r2
 800f50a:	61fb      	str	r3, [r7, #28]
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	781b      	ldrb	r3, [r3, #0]
 800f510:	00da      	lsls	r2, r3, #3
 800f512:	69fb      	ldr	r3, [r7, #28]
 800f514:	18d3      	adds	r3, r2, r3
 800f516:	4a94      	ldr	r2, [pc, #592]	@ (800f768 <HAL_PCD_EP_DB_Transmit+0x380>)
 800f518:	4694      	mov	ip, r2
 800f51a:	4463      	add	r3, ip
 800f51c:	61bb      	str	r3, [r7, #24]
 800f51e:	69bb      	ldr	r3, [r7, #24]
 800f520:	881b      	ldrh	r3, [r3, #0]
 800f522:	b29b      	uxth	r3, r3
 800f524:	059b      	lsls	r3, r3, #22
 800f526:	0d9b      	lsrs	r3, r3, #22
 800f528:	b29a      	uxth	r2, r3
 800f52a:	69bb      	ldr	r3, [r7, #24]
 800f52c:	801a      	strh	r2, [r3, #0]
 800f52e:	69bb      	ldr	r3, [r7, #24]
 800f530:	881b      	ldrh	r3, [r3, #0]
 800f532:	b29b      	uxth	r3, r3
 800f534:	4a8b      	ldr	r2, [pc, #556]	@ (800f764 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f536:	4313      	orrs	r3, r2
 800f538:	b29a      	uxth	r2, r3
 800f53a:	69bb      	ldr	r3, [r7, #24]
 800f53c:	801a      	strh	r2, [r3, #0]
 800f53e:	e018      	b.n	800f572 <HAL_PCD_EP_DB_Transmit+0x18a>
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	785b      	ldrb	r3, [r3, #1]
 800f544:	2b01      	cmp	r3, #1
 800f546:	d114      	bne.n	800f572 <HAL_PCD_EP_DB_Transmit+0x18a>
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	2250      	movs	r2, #80	@ 0x50
 800f54e:	5a9b      	ldrh	r3, [r3, r2]
 800f550:	b29b      	uxth	r3, r3
 800f552:	001a      	movs	r2, r3
 800f554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f556:	189b      	adds	r3, r3, r2
 800f558:	627b      	str	r3, [r7, #36]	@ 0x24
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	00da      	lsls	r2, r3, #3
 800f560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f562:	18d3      	adds	r3, r2, r3
 800f564:	4a80      	ldr	r2, [pc, #512]	@ (800f768 <HAL_PCD_EP_DB_Transmit+0x380>)
 800f566:	4694      	mov	ip, r2
 800f568:	4463      	add	r3, ip
 800f56a:	623b      	str	r3, [r7, #32]
 800f56c:	6a3b      	ldr	r3, [r7, #32]
 800f56e:	2200      	movs	r2, #0
 800f570:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	781a      	ldrb	r2, [r3, #0]
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	0011      	movs	r1, r2
 800f57a:	0018      	movs	r0, r3
 800f57c:	f007 febc 	bl	80172f8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f580:	1dbb      	adds	r3, r7, #6
 800f582:	881a      	ldrh	r2, [r3, #0]
 800f584:	2380      	movs	r3, #128	@ 0x80
 800f586:	01db      	lsls	r3, r3, #7
 800f588:	4013      	ands	r3, r2
 800f58a:	d100      	bne.n	800f58e <HAL_PCD_EP_DB_Transmit+0x1a6>
 800f58c:	e309      	b.n	800fba2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	001a      	movs	r2, r3
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	781b      	ldrb	r3, [r3, #0]
 800f598:	009b      	lsls	r3, r3, #2
 800f59a:	18d3      	adds	r3, r2, r3
 800f59c:	881b      	ldrh	r3, [r3, #0]
 800f59e:	b29a      	uxth	r2, r3
 800f5a0:	2016      	movs	r0, #22
 800f5a2:	183b      	adds	r3, r7, r0
 800f5a4:	4971      	ldr	r1, [pc, #452]	@ (800f76c <HAL_PCD_EP_DB_Transmit+0x384>)
 800f5a6:	400a      	ands	r2, r1
 800f5a8:	801a      	strh	r2, [r3, #0]
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	001a      	movs	r2, r3
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	781b      	ldrb	r3, [r3, #0]
 800f5b4:	009b      	lsls	r3, r3, #2
 800f5b6:	18d3      	adds	r3, r2, r3
 800f5b8:	183a      	adds	r2, r7, r0
 800f5ba:	8812      	ldrh	r2, [r2, #0]
 800f5bc:	496c      	ldr	r1, [pc, #432]	@ (800f770 <HAL_PCD_EP_DB_Transmit+0x388>)
 800f5be:	430a      	orrs	r2, r1
 800f5c0:	b292      	uxth	r2, r2
 800f5c2:	801a      	strh	r2, [r3, #0]
 800f5c4:	e2ed      	b.n	800fba2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800f5c6:	1dbb      	adds	r3, r7, #6
 800f5c8:	881a      	ldrh	r2, [r3, #0]
 800f5ca:	2380      	movs	r3, #128	@ 0x80
 800f5cc:	01db      	lsls	r3, r3, #7
 800f5ce:	4013      	ands	r3, r2
 800f5d0:	d01a      	beq.n	800f608 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	001a      	movs	r2, r3
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	009b      	lsls	r3, r3, #2
 800f5de:	18d3      	adds	r3, r2, r3
 800f5e0:	881b      	ldrh	r3, [r3, #0]
 800f5e2:	b29a      	uxth	r2, r3
 800f5e4:	208a      	movs	r0, #138	@ 0x8a
 800f5e6:	183b      	adds	r3, r7, r0
 800f5e8:	4960      	ldr	r1, [pc, #384]	@ (800f76c <HAL_PCD_EP_DB_Transmit+0x384>)
 800f5ea:	400a      	ands	r2, r1
 800f5ec:	801a      	strh	r2, [r3, #0]
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	001a      	movs	r2, r3
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	781b      	ldrb	r3, [r3, #0]
 800f5f8:	009b      	lsls	r3, r3, #2
 800f5fa:	18d3      	adds	r3, r2, r3
 800f5fc:	183a      	adds	r2, r7, r0
 800f5fe:	8812      	ldrh	r2, [r2, #0]
 800f600:	495b      	ldr	r1, [pc, #364]	@ (800f770 <HAL_PCD_EP_DB_Transmit+0x388>)
 800f602:	430a      	orrs	r2, r1
 800f604:	b292      	uxth	r2, r2
 800f606:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800f608:	68bb      	ldr	r3, [r7, #8]
 800f60a:	2224      	movs	r2, #36	@ 0x24
 800f60c:	5c9b      	ldrb	r3, [r3, r2]
 800f60e:	2b01      	cmp	r3, #1
 800f610:	d000      	beq.n	800f614 <HAL_PCD_EP_DB_Transmit+0x22c>
 800f612:	e2c6      	b.n	800fba2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	695a      	ldr	r2, [r3, #20]
 800f618:	2186      	movs	r1, #134	@ 0x86
 800f61a:	187b      	adds	r3, r7, r1
 800f61c:	881b      	ldrh	r3, [r3, #0]
 800f61e:	18d2      	adds	r2, r2, r3
 800f620:	68bb      	ldr	r3, [r7, #8]
 800f622:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	69da      	ldr	r2, [r3, #28]
 800f628:	187b      	adds	r3, r7, r1
 800f62a:	881b      	ldrh	r3, [r3, #0]
 800f62c:	18d2      	adds	r2, r2, r3
 800f62e:	68bb      	ldr	r3, [r7, #8]
 800f630:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800f632:	68bb      	ldr	r3, [r7, #8]
 800f634:	6a1a      	ldr	r2, [r3, #32]
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	691b      	ldr	r3, [r3, #16]
 800f63a:	429a      	cmp	r2, r3
 800f63c:	d30c      	bcc.n	800f658 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	691b      	ldr	r3, [r3, #16]
 800f642:	218c      	movs	r1, #140	@ 0x8c
 800f644:	187a      	adds	r2, r7, r1
 800f646:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800f648:	68bb      	ldr	r3, [r7, #8]
 800f64a:	6a1a      	ldr	r2, [r3, #32]
 800f64c:	187b      	adds	r3, r7, r1
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	1ad2      	subs	r2, r2, r3
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	621a      	str	r2, [r3, #32]
 800f656:	e01a      	b.n	800f68e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	6a1b      	ldr	r3, [r3, #32]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d10a      	bne.n	800f676 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800f660:	2386      	movs	r3, #134	@ 0x86
 800f662:	18fb      	adds	r3, r7, r3
 800f664:	881b      	ldrh	r3, [r3, #0]
 800f666:	228c      	movs	r2, #140	@ 0x8c
 800f668:	18ba      	adds	r2, r7, r2
 800f66a:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	2224      	movs	r2, #36	@ 0x24
 800f670:	2100      	movs	r1, #0
 800f672:	5499      	strb	r1, [r3, r2]
 800f674:	e00b      	b.n	800f68e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	2224      	movs	r2, #36	@ 0x24
 800f67a:	2100      	movs	r1, #0
 800f67c:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	6a1b      	ldr	r3, [r3, #32]
 800f682:	228c      	movs	r2, #140	@ 0x8c
 800f684:	18ba      	adds	r2, r7, r2
 800f686:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	2200      	movs	r2, #0
 800f68c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800f68e:	68bb      	ldr	r3, [r7, #8]
 800f690:	785b      	ldrb	r3, [r3, #1]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d000      	beq.n	800f698 <HAL_PCD_EP_DB_Transmit+0x2b0>
 800f696:	e06d      	b.n	800f774 <HAL_PCD_EP_DB_Transmit+0x38c>
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	2250      	movs	r2, #80	@ 0x50
 800f6a4:	5a9b      	ldrh	r3, [r3, r2]
 800f6a6:	b29b      	uxth	r3, r3
 800f6a8:	001a      	movs	r2, r3
 800f6aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6ac:	189b      	adds	r3, r3, r2
 800f6ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	781b      	ldrb	r3, [r3, #0]
 800f6b4:	00da      	lsls	r2, r3, #3
 800f6b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6b8:	18d3      	adds	r3, r2, r3
 800f6ba:	4a29      	ldr	r2, [pc, #164]	@ (800f760 <HAL_PCD_EP_DB_Transmit+0x378>)
 800f6bc:	4694      	mov	ip, r2
 800f6be:	4463      	add	r3, ip
 800f6c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6c4:	881b      	ldrh	r3, [r3, #0]
 800f6c6:	b29b      	uxth	r3, r3
 800f6c8:	059b      	lsls	r3, r3, #22
 800f6ca:	0d9b      	lsrs	r3, r3, #22
 800f6cc:	b29a      	uxth	r2, r3
 800f6ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6d0:	801a      	strh	r2, [r3, #0]
 800f6d2:	228c      	movs	r2, #140	@ 0x8c
 800f6d4:	18bb      	adds	r3, r7, r2
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	2b3e      	cmp	r3, #62	@ 0x3e
 800f6da:	d91a      	bls.n	800f712 <HAL_PCD_EP_DB_Transmit+0x32a>
 800f6dc:	18bb      	adds	r3, r7, r2
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	095b      	lsrs	r3, r3, #5
 800f6e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f6e4:	18bb      	adds	r3, r7, r2
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	221f      	movs	r2, #31
 800f6ea:	4013      	ands	r3, r2
 800f6ec:	d102      	bne.n	800f6f4 <HAL_PCD_EP_DB_Transmit+0x30c>
 800f6ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f6f0:	3b01      	subs	r3, #1
 800f6f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6f6:	881b      	ldrh	r3, [r3, #0]
 800f6f8:	b29a      	uxth	r2, r3
 800f6fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f6fc:	b29b      	uxth	r3, r3
 800f6fe:	029b      	lsls	r3, r3, #10
 800f700:	b29b      	uxth	r3, r3
 800f702:	4313      	orrs	r3, r2
 800f704:	b29b      	uxth	r3, r3
 800f706:	4a17      	ldr	r2, [pc, #92]	@ (800f764 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f708:	4313      	orrs	r3, r2
 800f70a:	b29a      	uxth	r2, r3
 800f70c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f70e:	801a      	strh	r2, [r3, #0]
 800f710:	e04f      	b.n	800f7b2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f712:	238c      	movs	r3, #140	@ 0x8c
 800f714:	18fb      	adds	r3, r7, r3
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d108      	bne.n	800f72e <HAL_PCD_EP_DB_Transmit+0x346>
 800f71c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f71e:	881b      	ldrh	r3, [r3, #0]
 800f720:	b29b      	uxth	r3, r3
 800f722:	4a10      	ldr	r2, [pc, #64]	@ (800f764 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800f724:	4313      	orrs	r3, r2
 800f726:	b29a      	uxth	r2, r3
 800f728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f72a:	801a      	strh	r2, [r3, #0]
 800f72c:	e041      	b.n	800f7b2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f72e:	228c      	movs	r2, #140	@ 0x8c
 800f730:	18bb      	adds	r3, r7, r2
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	085b      	lsrs	r3, r3, #1
 800f736:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f738:	18bb      	adds	r3, r7, r2
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	2201      	movs	r2, #1
 800f73e:	4013      	ands	r3, r2
 800f740:	d002      	beq.n	800f748 <HAL_PCD_EP_DB_Transmit+0x360>
 800f742:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f744:	3301      	adds	r3, #1
 800f746:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f74a:	881b      	ldrh	r3, [r3, #0]
 800f74c:	b29a      	uxth	r2, r3
 800f74e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f750:	b29b      	uxth	r3, r3
 800f752:	029b      	lsls	r3, r3, #10
 800f754:	b29b      	uxth	r3, r3
 800f756:	4313      	orrs	r3, r2
 800f758:	b29a      	uxth	r2, r3
 800f75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f75c:	801a      	strh	r2, [r3, #0]
 800f75e:	e028      	b.n	800f7b2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f760:	00000402 	.word	0x00000402
 800f764:	ffff8000 	.word	0xffff8000
 800f768:	00000406 	.word	0x00000406
 800f76c:	ffff8f8f 	.word	0xffff8f8f
 800f770:	ffffc080 	.word	0xffffc080
 800f774:	68bb      	ldr	r3, [r7, #8]
 800f776:	785b      	ldrb	r3, [r3, #1]
 800f778:	2b01      	cmp	r3, #1
 800f77a:	d11a      	bne.n	800f7b2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	647b      	str	r3, [r7, #68]	@ 0x44
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	2250      	movs	r2, #80	@ 0x50
 800f788:	5a9b      	ldrh	r3, [r3, r2]
 800f78a:	b29b      	uxth	r3, r3
 800f78c:	001a      	movs	r2, r3
 800f78e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f790:	189b      	adds	r3, r3, r2
 800f792:	647b      	str	r3, [r7, #68]	@ 0x44
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	781b      	ldrb	r3, [r3, #0]
 800f798:	00da      	lsls	r2, r3, #3
 800f79a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f79c:	18d3      	adds	r3, r2, r3
 800f79e:	4adb      	ldr	r2, [pc, #876]	@ (800fb0c <HAL_PCD_EP_DB_Transmit+0x724>)
 800f7a0:	4694      	mov	ip, r2
 800f7a2:	4463      	add	r3, ip
 800f7a4:	643b      	str	r3, [r7, #64]	@ 0x40
 800f7a6:	238c      	movs	r3, #140	@ 0x8c
 800f7a8:	18fb      	adds	r3, r7, r3
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	b29a      	uxth	r2, r3
 800f7ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f7b0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	6818      	ldr	r0, [r3, #0]
 800f7b6:	68bb      	ldr	r3, [r7, #8]
 800f7b8:	6959      	ldr	r1, [r3, #20]
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	891a      	ldrh	r2, [r3, #8]
 800f7be:	238c      	movs	r3, #140	@ 0x8c
 800f7c0:	18fb      	adds	r3, r7, r3
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	b29b      	uxth	r3, r3
 800f7c6:	f005 fd13 	bl	80151f0 <USB_WritePMA>
 800f7ca:	e1ea      	b.n	800fba2 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	2250      	movs	r2, #80	@ 0x50
 800f7d2:	5a9b      	ldrh	r3, [r3, r2]
 800f7d4:	b29b      	uxth	r3, r3
 800f7d6:	001a      	movs	r2, r3
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	00db      	lsls	r3, r3, #3
 800f7de:	18d2      	adds	r2, r2, r3
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	18d3      	adds	r3, r2, r3
 800f7e6:	4aca      	ldr	r2, [pc, #808]	@ (800fb10 <HAL_PCD_EP_DB_Transmit+0x728>)
 800f7e8:	4694      	mov	ip, r2
 800f7ea:	4463      	add	r3, ip
 800f7ec:	881a      	ldrh	r2, [r3, #0]
 800f7ee:	2186      	movs	r1, #134	@ 0x86
 800f7f0:	187b      	adds	r3, r7, r1
 800f7f2:	0592      	lsls	r2, r2, #22
 800f7f4:	0d92      	lsrs	r2, r2, #22
 800f7f6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	699a      	ldr	r2, [r3, #24]
 800f7fc:	187b      	adds	r3, r7, r1
 800f7fe:	881b      	ldrh	r3, [r3, #0]
 800f800:	429a      	cmp	r2, r3
 800f802:	d307      	bcc.n	800f814 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 800f804:	68bb      	ldr	r3, [r7, #8]
 800f806:	699a      	ldr	r2, [r3, #24]
 800f808:	187b      	adds	r3, r7, r1
 800f80a:	881b      	ldrh	r3, [r3, #0]
 800f80c:	1ad2      	subs	r2, r2, r3
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	619a      	str	r2, [r3, #24]
 800f812:	e002      	b.n	800f81a <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	2200      	movs	r2, #0
 800f818:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800f81a:	68bb      	ldr	r3, [r7, #8]
 800f81c:	699b      	ldr	r3, [r3, #24]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d000      	beq.n	800f824 <HAL_PCD_EP_DB_Transmit+0x43c>
 800f822:	e0bb      	b.n	800f99c <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	785b      	ldrb	r3, [r3, #1]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d125      	bne.n	800f878 <HAL_PCD_EP_DB_Transmit+0x490>
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	2250      	movs	r2, #80	@ 0x50
 800f838:	5a9b      	ldrh	r3, [r3, r2]
 800f83a:	b29b      	uxth	r3, r3
 800f83c:	001a      	movs	r2, r3
 800f83e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f840:	189b      	adds	r3, r3, r2
 800f842:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f844:	68bb      	ldr	r3, [r7, #8]
 800f846:	781b      	ldrb	r3, [r3, #0]
 800f848:	00da      	lsls	r2, r3, #3
 800f84a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f84c:	18d3      	adds	r3, r2, r3
 800f84e:	4aaf      	ldr	r2, [pc, #700]	@ (800fb0c <HAL_PCD_EP_DB_Transmit+0x724>)
 800f850:	4694      	mov	ip, r2
 800f852:	4463      	add	r3, ip
 800f854:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f856:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f858:	881b      	ldrh	r3, [r3, #0]
 800f85a:	b29b      	uxth	r3, r3
 800f85c:	059b      	lsls	r3, r3, #22
 800f85e:	0d9b      	lsrs	r3, r3, #22
 800f860:	b29a      	uxth	r2, r3
 800f862:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f864:	801a      	strh	r2, [r3, #0]
 800f866:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f868:	881b      	ldrh	r3, [r3, #0]
 800f86a:	b29b      	uxth	r3, r3
 800f86c:	4aa9      	ldr	r2, [pc, #676]	@ (800fb14 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800f86e:	4313      	orrs	r3, r2
 800f870:	b29a      	uxth	r2, r3
 800f872:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f874:	801a      	strh	r2, [r3, #0]
 800f876:	e01b      	b.n	800f8b0 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	785b      	ldrb	r3, [r3, #1]
 800f87c:	2b01      	cmp	r3, #1
 800f87e:	d117      	bne.n	800f8b0 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	667b      	str	r3, [r7, #100]	@ 0x64
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	2250      	movs	r2, #80	@ 0x50
 800f88c:	5a9b      	ldrh	r3, [r3, r2]
 800f88e:	b29b      	uxth	r3, r3
 800f890:	001a      	movs	r2, r3
 800f892:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f894:	189b      	adds	r3, r3, r2
 800f896:	667b      	str	r3, [r7, #100]	@ 0x64
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	781b      	ldrb	r3, [r3, #0]
 800f89c:	00da      	lsls	r2, r3, #3
 800f89e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f8a0:	18d3      	adds	r3, r2, r3
 800f8a2:	4a9a      	ldr	r2, [pc, #616]	@ (800fb0c <HAL_PCD_EP_DB_Transmit+0x724>)
 800f8a4:	4694      	mov	ip, r2
 800f8a6:	4463      	add	r3, ip
 800f8a8:	663b      	str	r3, [r7, #96]	@ 0x60
 800f8aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	677b      	str	r3, [r7, #116]	@ 0x74
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	785b      	ldrb	r3, [r3, #1]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d12b      	bne.n	800f916 <HAL_PCD_EP_DB_Transmit+0x52e>
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	2250      	movs	r2, #80	@ 0x50
 800f8ca:	5a9b      	ldrh	r3, [r3, r2]
 800f8cc:	b29b      	uxth	r3, r3
 800f8ce:	001a      	movs	r2, r3
 800f8d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f8d2:	189b      	adds	r3, r3, r2
 800f8d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	781b      	ldrb	r3, [r3, #0]
 800f8da:	00da      	lsls	r2, r3, #3
 800f8dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f8de:	18d3      	adds	r3, r2, r3
 800f8e0:	4a8b      	ldr	r2, [pc, #556]	@ (800fb10 <HAL_PCD_EP_DB_Transmit+0x728>)
 800f8e2:	4694      	mov	ip, r2
 800f8e4:	4463      	add	r3, ip
 800f8e6:	2180      	movs	r1, #128	@ 0x80
 800f8e8:	187a      	adds	r2, r7, r1
 800f8ea:	6013      	str	r3, [r2, #0]
 800f8ec:	187b      	adds	r3, r7, r1
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	881b      	ldrh	r3, [r3, #0]
 800f8f2:	b29b      	uxth	r3, r3
 800f8f4:	059b      	lsls	r3, r3, #22
 800f8f6:	0d9b      	lsrs	r3, r3, #22
 800f8f8:	b29a      	uxth	r2, r3
 800f8fa:	187b      	adds	r3, r7, r1
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	801a      	strh	r2, [r3, #0]
 800f900:	187b      	adds	r3, r7, r1
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	881b      	ldrh	r3, [r3, #0]
 800f906:	b29b      	uxth	r3, r3
 800f908:	4a82      	ldr	r2, [pc, #520]	@ (800fb14 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800f90a:	4313      	orrs	r3, r2
 800f90c:	b29a      	uxth	r2, r3
 800f90e:	187b      	adds	r3, r7, r1
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	801a      	strh	r2, [r3, #0]
 800f914:	e018      	b.n	800f948 <HAL_PCD_EP_DB_Transmit+0x560>
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	785b      	ldrb	r3, [r3, #1]
 800f91a:	2b01      	cmp	r3, #1
 800f91c:	d114      	bne.n	800f948 <HAL_PCD_EP_DB_Transmit+0x560>
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	2250      	movs	r2, #80	@ 0x50
 800f924:	5a9b      	ldrh	r3, [r3, r2]
 800f926:	b29b      	uxth	r3, r3
 800f928:	001a      	movs	r2, r3
 800f92a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f92c:	189b      	adds	r3, r3, r2
 800f92e:	677b      	str	r3, [r7, #116]	@ 0x74
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	781b      	ldrb	r3, [r3, #0]
 800f934:	00da      	lsls	r2, r3, #3
 800f936:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f938:	18d3      	adds	r3, r2, r3
 800f93a:	4a75      	ldr	r2, [pc, #468]	@ (800fb10 <HAL_PCD_EP_DB_Transmit+0x728>)
 800f93c:	4694      	mov	ip, r2
 800f93e:	4463      	add	r3, ip
 800f940:	673b      	str	r3, [r7, #112]	@ 0x70
 800f942:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f944:	2200      	movs	r2, #0
 800f946:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	781a      	ldrb	r2, [r3, #0]
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	0011      	movs	r1, r2
 800f950:	0018      	movs	r0, r3
 800f952:	f007 fcd1 	bl	80172f8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800f956:	1dbb      	adds	r3, r7, #6
 800f958:	881a      	ldrh	r2, [r3, #0]
 800f95a:	2380      	movs	r3, #128	@ 0x80
 800f95c:	01db      	lsls	r3, r3, #7
 800f95e:	4013      	ands	r3, r2
 800f960:	d000      	beq.n	800f964 <HAL_PCD_EP_DB_Transmit+0x57c>
 800f962:	e11e      	b.n	800fba2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	001a      	movs	r2, r3
 800f96a:	68bb      	ldr	r3, [r7, #8]
 800f96c:	781b      	ldrb	r3, [r3, #0]
 800f96e:	009b      	lsls	r3, r3, #2
 800f970:	18d3      	adds	r3, r2, r3
 800f972:	881b      	ldrh	r3, [r3, #0]
 800f974:	b29a      	uxth	r2, r3
 800f976:	2088      	movs	r0, #136	@ 0x88
 800f978:	183b      	adds	r3, r7, r0
 800f97a:	4967      	ldr	r1, [pc, #412]	@ (800fb18 <HAL_PCD_EP_DB_Transmit+0x730>)
 800f97c:	400a      	ands	r2, r1
 800f97e:	801a      	strh	r2, [r3, #0]
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	001a      	movs	r2, r3
 800f986:	68bb      	ldr	r3, [r7, #8]
 800f988:	781b      	ldrb	r3, [r3, #0]
 800f98a:	009b      	lsls	r3, r3, #2
 800f98c:	18d3      	adds	r3, r2, r3
 800f98e:	183a      	adds	r2, r7, r0
 800f990:	8812      	ldrh	r2, [r2, #0]
 800f992:	4962      	ldr	r1, [pc, #392]	@ (800fb1c <HAL_PCD_EP_DB_Transmit+0x734>)
 800f994:	430a      	orrs	r2, r1
 800f996:	b292      	uxth	r2, r2
 800f998:	801a      	strh	r2, [r3, #0]
 800f99a:	e102      	b.n	800fba2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800f99c:	1dbb      	adds	r3, r7, #6
 800f99e:	881a      	ldrh	r2, [r3, #0]
 800f9a0:	2380      	movs	r3, #128	@ 0x80
 800f9a2:	01db      	lsls	r3, r3, #7
 800f9a4:	4013      	ands	r3, r2
 800f9a6:	d11a      	bne.n	800f9de <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	001a      	movs	r2, r3
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	781b      	ldrb	r3, [r3, #0]
 800f9b2:	009b      	lsls	r3, r3, #2
 800f9b4:	18d3      	adds	r3, r2, r3
 800f9b6:	881b      	ldrh	r3, [r3, #0]
 800f9b8:	b29a      	uxth	r2, r3
 800f9ba:	204e      	movs	r0, #78	@ 0x4e
 800f9bc:	183b      	adds	r3, r7, r0
 800f9be:	4956      	ldr	r1, [pc, #344]	@ (800fb18 <HAL_PCD_EP_DB_Transmit+0x730>)
 800f9c0:	400a      	ands	r2, r1
 800f9c2:	801a      	strh	r2, [r3, #0]
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	001a      	movs	r2, r3
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	781b      	ldrb	r3, [r3, #0]
 800f9ce:	009b      	lsls	r3, r3, #2
 800f9d0:	18d3      	adds	r3, r2, r3
 800f9d2:	183a      	adds	r2, r7, r0
 800f9d4:	8812      	ldrh	r2, [r2, #0]
 800f9d6:	4951      	ldr	r1, [pc, #324]	@ (800fb1c <HAL_PCD_EP_DB_Transmit+0x734>)
 800f9d8:	430a      	orrs	r2, r1
 800f9da:	b292      	uxth	r2, r2
 800f9dc:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800f9de:	68bb      	ldr	r3, [r7, #8]
 800f9e0:	2224      	movs	r2, #36	@ 0x24
 800f9e2:	5c9b      	ldrb	r3, [r3, r2]
 800f9e4:	2b01      	cmp	r3, #1
 800f9e6:	d000      	beq.n	800f9ea <HAL_PCD_EP_DB_Transmit+0x602>
 800f9e8:	e0db      	b.n	800fba2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800f9ea:	68bb      	ldr	r3, [r7, #8]
 800f9ec:	695a      	ldr	r2, [r3, #20]
 800f9ee:	2186      	movs	r1, #134	@ 0x86
 800f9f0:	187b      	adds	r3, r7, r1
 800f9f2:	881b      	ldrh	r3, [r3, #0]
 800f9f4:	18d2      	adds	r2, r2, r3
 800f9f6:	68bb      	ldr	r3, [r7, #8]
 800f9f8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800f9fa:	68bb      	ldr	r3, [r7, #8]
 800f9fc:	69da      	ldr	r2, [r3, #28]
 800f9fe:	187b      	adds	r3, r7, r1
 800fa00:	881b      	ldrh	r3, [r3, #0]
 800fa02:	18d2      	adds	r2, r2, r3
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	6a1a      	ldr	r2, [r3, #32]
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	691b      	ldr	r3, [r3, #16]
 800fa10:	429a      	cmp	r2, r3
 800fa12:	d30c      	bcc.n	800fa2e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	691b      	ldr	r3, [r3, #16]
 800fa18:	218c      	movs	r1, #140	@ 0x8c
 800fa1a:	187a      	adds	r2, r7, r1
 800fa1c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	6a1a      	ldr	r2, [r3, #32]
 800fa22:	187b      	adds	r3, r7, r1
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	1ad2      	subs	r2, r2, r3
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	621a      	str	r2, [r3, #32]
 800fa2c:	e01a      	b.n	800fa64 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	6a1b      	ldr	r3, [r3, #32]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d10a      	bne.n	800fa4c <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 800fa36:	2386      	movs	r3, #134	@ 0x86
 800fa38:	18fb      	adds	r3, r7, r3
 800fa3a:	881b      	ldrh	r3, [r3, #0]
 800fa3c:	228c      	movs	r2, #140	@ 0x8c
 800fa3e:	18ba      	adds	r2, r7, r2
 800fa40:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	2224      	movs	r2, #36	@ 0x24
 800fa46:	2100      	movs	r1, #0
 800fa48:	5499      	strb	r1, [r3, r2]
 800fa4a:	e00b      	b.n	800fa64 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	6a1b      	ldr	r3, [r3, #32]
 800fa50:	228c      	movs	r2, #140	@ 0x8c
 800fa52:	18ba      	adds	r2, r7, r2
 800fa54:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	2200      	movs	r2, #0
 800fa5a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	2224      	movs	r2, #36	@ 0x24
 800fa60:	2100      	movs	r1, #0
 800fa62:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	657b      	str	r3, [r7, #84]	@ 0x54
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	785b      	ldrb	r3, [r3, #1]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d000      	beq.n	800fa74 <HAL_PCD_EP_DB_Transmit+0x68c>
 800fa72:	e06e      	b.n	800fb52 <HAL_PCD_EP_DB_Transmit+0x76a>
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	2250      	movs	r2, #80	@ 0x50
 800fa80:	5a9b      	ldrh	r3, [r3, r2]
 800fa82:	b29b      	uxth	r3, r3
 800fa84:	001a      	movs	r2, r3
 800fa86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fa88:	189b      	adds	r3, r3, r2
 800fa8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	781b      	ldrb	r3, [r3, #0]
 800fa90:	00da      	lsls	r2, r3, #3
 800fa92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fa94:	18d3      	adds	r3, r2, r3
 800fa96:	4a1e      	ldr	r2, [pc, #120]	@ (800fb10 <HAL_PCD_EP_DB_Transmit+0x728>)
 800fa98:	4694      	mov	ip, r2
 800fa9a:	4463      	add	r3, ip
 800fa9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fa9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800faa0:	881b      	ldrh	r3, [r3, #0]
 800faa2:	b29b      	uxth	r3, r3
 800faa4:	059b      	lsls	r3, r3, #22
 800faa6:	0d9b      	lsrs	r3, r3, #22
 800faa8:	b29a      	uxth	r2, r3
 800faaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800faac:	801a      	strh	r2, [r3, #0]
 800faae:	228c      	movs	r2, #140	@ 0x8c
 800fab0:	18bb      	adds	r3, r7, r2
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	2b3e      	cmp	r3, #62	@ 0x3e
 800fab6:	d91a      	bls.n	800faee <HAL_PCD_EP_DB_Transmit+0x706>
 800fab8:	18bb      	adds	r3, r7, r2
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	095b      	lsrs	r3, r3, #5
 800fabe:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fac0:	18bb      	adds	r3, r7, r2
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	221f      	movs	r2, #31
 800fac6:	4013      	ands	r3, r2
 800fac8:	d102      	bne.n	800fad0 <HAL_PCD_EP_DB_Transmit+0x6e8>
 800faca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800facc:	3b01      	subs	r3, #1
 800face:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fad0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fad2:	881b      	ldrh	r3, [r3, #0]
 800fad4:	b29a      	uxth	r2, r3
 800fad6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fad8:	b29b      	uxth	r3, r3
 800fada:	029b      	lsls	r3, r3, #10
 800fadc:	b29b      	uxth	r3, r3
 800fade:	4313      	orrs	r3, r2
 800fae0:	b29b      	uxth	r3, r3
 800fae2:	4a0c      	ldr	r2, [pc, #48]	@ (800fb14 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800fae4:	4313      	orrs	r3, r2
 800fae6:	b29a      	uxth	r2, r3
 800fae8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800faea:	801a      	strh	r2, [r3, #0]
 800faec:	e04d      	b.n	800fb8a <HAL_PCD_EP_DB_Transmit+0x7a2>
 800faee:	238c      	movs	r3, #140	@ 0x8c
 800faf0:	18fb      	adds	r3, r7, r3
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d113      	bne.n	800fb20 <HAL_PCD_EP_DB_Transmit+0x738>
 800faf8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fafa:	881b      	ldrh	r3, [r3, #0]
 800fafc:	b29b      	uxth	r3, r3
 800fafe:	4a05      	ldr	r2, [pc, #20]	@ (800fb14 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800fb00:	4313      	orrs	r3, r2
 800fb02:	b29a      	uxth	r2, r3
 800fb04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fb06:	801a      	strh	r2, [r3, #0]
 800fb08:	e03f      	b.n	800fb8a <HAL_PCD_EP_DB_Transmit+0x7a2>
 800fb0a:	46c0      	nop			@ (mov r8, r8)
 800fb0c:	00000402 	.word	0x00000402
 800fb10:	00000406 	.word	0x00000406
 800fb14:	ffff8000 	.word	0xffff8000
 800fb18:	ffff8f8f 	.word	0xffff8f8f
 800fb1c:	ffffc080 	.word	0xffffc080
 800fb20:	228c      	movs	r2, #140	@ 0x8c
 800fb22:	18bb      	adds	r3, r7, r2
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	085b      	lsrs	r3, r3, #1
 800fb28:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fb2a:	18bb      	adds	r3, r7, r2
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	2201      	movs	r2, #1
 800fb30:	4013      	ands	r3, r2
 800fb32:	d002      	beq.n	800fb3a <HAL_PCD_EP_DB_Transmit+0x752>
 800fb34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fb36:	3301      	adds	r3, #1
 800fb38:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fb3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fb3c:	881b      	ldrh	r3, [r3, #0]
 800fb3e:	b29a      	uxth	r2, r3
 800fb40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fb42:	b29b      	uxth	r3, r3
 800fb44:	029b      	lsls	r3, r3, #10
 800fb46:	b29b      	uxth	r3, r3
 800fb48:	4313      	orrs	r3, r2
 800fb4a:	b29a      	uxth	r2, r3
 800fb4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fb4e:	801a      	strh	r2, [r3, #0]
 800fb50:	e01b      	b.n	800fb8a <HAL_PCD_EP_DB_Transmit+0x7a2>
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	785b      	ldrb	r3, [r3, #1]
 800fb56:	2b01      	cmp	r3, #1
 800fb58:	d117      	bne.n	800fb8a <HAL_PCD_EP_DB_Transmit+0x7a2>
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	2250      	movs	r2, #80	@ 0x50
 800fb60:	5a9b      	ldrh	r3, [r3, r2]
 800fb62:	b29b      	uxth	r3, r3
 800fb64:	001a      	movs	r2, r3
 800fb66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fb68:	189b      	adds	r3, r3, r2
 800fb6a:	657b      	str	r3, [r7, #84]	@ 0x54
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	781b      	ldrb	r3, [r3, #0]
 800fb70:	00da      	lsls	r2, r3, #3
 800fb72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fb74:	18d3      	adds	r3, r2, r3
 800fb76:	4a21      	ldr	r2, [pc, #132]	@ (800fbfc <HAL_PCD_EP_DB_Transmit+0x814>)
 800fb78:	4694      	mov	ip, r2
 800fb7a:	4463      	add	r3, ip
 800fb7c:	653b      	str	r3, [r7, #80]	@ 0x50
 800fb7e:	238c      	movs	r3, #140	@ 0x8c
 800fb80:	18fb      	adds	r3, r7, r3
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	b29a      	uxth	r2, r3
 800fb86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fb88:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	6818      	ldr	r0, [r3, #0]
 800fb8e:	68bb      	ldr	r3, [r7, #8]
 800fb90:	6959      	ldr	r1, [r3, #20]
 800fb92:	68bb      	ldr	r3, [r7, #8]
 800fb94:	895a      	ldrh	r2, [r3, #10]
 800fb96:	238c      	movs	r3, #140	@ 0x8c
 800fb98:	18fb      	adds	r3, r7, r3
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	b29b      	uxth	r3, r3
 800fb9e:	f005 fb27 	bl	80151f0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	001a      	movs	r2, r3
 800fba8:	68bb      	ldr	r3, [r7, #8]
 800fbaa:	781b      	ldrb	r3, [r3, #0]
 800fbac:	009b      	lsls	r3, r3, #2
 800fbae:	18d3      	adds	r3, r2, r3
 800fbb0:	881b      	ldrh	r3, [r3, #0]
 800fbb2:	b29a      	uxth	r2, r3
 800fbb4:	2014      	movs	r0, #20
 800fbb6:	183b      	adds	r3, r7, r0
 800fbb8:	4911      	ldr	r1, [pc, #68]	@ (800fc00 <HAL_PCD_EP_DB_Transmit+0x818>)
 800fbba:	400a      	ands	r2, r1
 800fbbc:	801a      	strh	r2, [r3, #0]
 800fbbe:	183b      	adds	r3, r7, r0
 800fbc0:	183a      	adds	r2, r7, r0
 800fbc2:	8812      	ldrh	r2, [r2, #0]
 800fbc4:	2110      	movs	r1, #16
 800fbc6:	404a      	eors	r2, r1
 800fbc8:	801a      	strh	r2, [r3, #0]
 800fbca:	183b      	adds	r3, r7, r0
 800fbcc:	183a      	adds	r2, r7, r0
 800fbce:	8812      	ldrh	r2, [r2, #0]
 800fbd0:	2120      	movs	r1, #32
 800fbd2:	404a      	eors	r2, r1
 800fbd4:	801a      	strh	r2, [r3, #0]
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	001a      	movs	r2, r3
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	781b      	ldrb	r3, [r3, #0]
 800fbe0:	009b      	lsls	r3, r3, #2
 800fbe2:	18d3      	adds	r3, r2, r3
 800fbe4:	183a      	adds	r2, r7, r0
 800fbe6:	8812      	ldrh	r2, [r2, #0]
 800fbe8:	4906      	ldr	r1, [pc, #24]	@ (800fc04 <HAL_PCD_EP_DB_Transmit+0x81c>)
 800fbea:	430a      	orrs	r2, r1
 800fbec:	b292      	uxth	r2, r2
 800fbee:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800fbf0:	2300      	movs	r3, #0
}
 800fbf2:	0018      	movs	r0, r3
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	b024      	add	sp, #144	@ 0x90
 800fbf8:	bd80      	pop	{r7, pc}
 800fbfa:	46c0      	nop			@ (mov r8, r8)
 800fbfc:	00000406 	.word	0x00000406
 800fc00:	ffff8fbf 	.word	0xffff8fbf
 800fc04:	ffff8080 	.word	0xffff8080

0800fc08 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800fc08:	b590      	push	{r4, r7, lr}
 800fc0a:	b087      	sub	sp, #28
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	60f8      	str	r0, [r7, #12]
 800fc10:	0008      	movs	r0, r1
 800fc12:	0011      	movs	r1, r2
 800fc14:	607b      	str	r3, [r7, #4]
 800fc16:	240a      	movs	r4, #10
 800fc18:	193b      	adds	r3, r7, r4
 800fc1a:	1c02      	adds	r2, r0, #0
 800fc1c:	801a      	strh	r2, [r3, #0]
 800fc1e:	2308      	movs	r3, #8
 800fc20:	18fb      	adds	r3, r7, r3
 800fc22:	1c0a      	adds	r2, r1, #0
 800fc24:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800fc26:	0021      	movs	r1, r4
 800fc28:	187b      	adds	r3, r7, r1
 800fc2a:	881b      	ldrh	r3, [r3, #0]
 800fc2c:	2280      	movs	r2, #128	@ 0x80
 800fc2e:	4013      	ands	r3, r2
 800fc30:	b29b      	uxth	r3, r3
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d00c      	beq.n	800fc50 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fc36:	187b      	adds	r3, r7, r1
 800fc38:	881b      	ldrh	r3, [r3, #0]
 800fc3a:	2207      	movs	r2, #7
 800fc3c:	4013      	ands	r3, r2
 800fc3e:	1c5a      	adds	r2, r3, #1
 800fc40:	0013      	movs	r3, r2
 800fc42:	009b      	lsls	r3, r3, #2
 800fc44:	189b      	adds	r3, r3, r2
 800fc46:	00db      	lsls	r3, r3, #3
 800fc48:	68fa      	ldr	r2, [r7, #12]
 800fc4a:	18d3      	adds	r3, r2, r3
 800fc4c:	617b      	str	r3, [r7, #20]
 800fc4e:	e00b      	b.n	800fc68 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800fc50:	230a      	movs	r3, #10
 800fc52:	18fb      	adds	r3, r7, r3
 800fc54:	881a      	ldrh	r2, [r3, #0]
 800fc56:	0013      	movs	r3, r2
 800fc58:	009b      	lsls	r3, r3, #2
 800fc5a:	189b      	adds	r3, r3, r2
 800fc5c:	00db      	lsls	r3, r3, #3
 800fc5e:	3369      	adds	r3, #105	@ 0x69
 800fc60:	33ff      	adds	r3, #255	@ 0xff
 800fc62:	68fa      	ldr	r2, [r7, #12]
 800fc64:	18d3      	adds	r3, r2, r3
 800fc66:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800fc68:	2308      	movs	r3, #8
 800fc6a:	18fb      	adds	r3, r7, r3
 800fc6c:	881b      	ldrh	r3, [r3, #0]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d107      	bne.n	800fc82 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	2200      	movs	r2, #0
 800fc76:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	b29a      	uxth	r2, r3
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	80da      	strh	r2, [r3, #6]
 800fc80:	e00b      	b.n	800fc9a <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	2201      	movs	r2, #1
 800fc86:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	b29a      	uxth	r2, r3
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	0c1b      	lsrs	r3, r3, #16
 800fc94:	b29a      	uxth	r2, r3
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800fc9a:	2300      	movs	r3, #0
}
 800fc9c:	0018      	movs	r0, r3
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	b007      	add	sp, #28
 800fca2:	bd90      	pop	{r4, r7, pc}

0800fca4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b084      	sub	sp, #16
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800fcb2:	687a      	ldr	r2, [r7, #4]
 800fcb4:	23ba      	movs	r3, #186	@ 0xba
 800fcb6:	009b      	lsls	r3, r3, #2
 800fcb8:	2101      	movs	r1, #1
 800fcba:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800fcbc:	687a      	ldr	r2, [r7, #4]
 800fcbe:	23b8      	movs	r3, #184	@ 0xb8
 800fcc0:	009b      	lsls	r3, r3, #2
 800fcc2:	2100      	movs	r1, #0
 800fcc4:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	2254      	movs	r2, #84	@ 0x54
 800fcca:	5a9b      	ldrh	r3, [r3, r2]
 800fccc:	b29b      	uxth	r3, r3
 800fcce:	2201      	movs	r2, #1
 800fcd0:	4313      	orrs	r3, r2
 800fcd2:	b299      	uxth	r1, r3
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	2254      	movs	r2, #84	@ 0x54
 800fcd8:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	2254      	movs	r2, #84	@ 0x54
 800fcde:	5a9b      	ldrh	r3, [r3, r2]
 800fce0:	b29b      	uxth	r3, r3
 800fce2:	2202      	movs	r2, #2
 800fce4:	4313      	orrs	r3, r2
 800fce6:	b299      	uxth	r1, r3
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	2254      	movs	r2, #84	@ 0x54
 800fcec:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800fcee:	2300      	movs	r3, #0
}
 800fcf0:	0018      	movs	r0, r3
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	b004      	add	sp, #16
 800fcf6:	bd80      	pop	{r7, pc}

0800fcf8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b082      	sub	sp, #8
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
 800fd00:	000a      	movs	r2, r1
 800fd02:	1cfb      	adds	r3, r7, #3
 800fd04:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800fd06:	46c0      	nop			@ (mov r8, r8)
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	b002      	add	sp, #8
 800fd0c:	bd80      	pop	{r7, pc}
	...

0800fd10 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800fd14:	4b04      	ldr	r3, [pc, #16]	@ (800fd28 <HAL_PWR_EnableBkUpAccess+0x18>)
 800fd16:	681a      	ldr	r2, [r3, #0]
 800fd18:	4b03      	ldr	r3, [pc, #12]	@ (800fd28 <HAL_PWR_EnableBkUpAccess+0x18>)
 800fd1a:	2180      	movs	r1, #128	@ 0x80
 800fd1c:	0049      	lsls	r1, r1, #1
 800fd1e:	430a      	orrs	r2, r1
 800fd20:	601a      	str	r2, [r3, #0]
}
 800fd22:	46c0      	nop			@ (mov r8, r8)
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}
 800fd28:	40007000 	.word	0x40007000

0800fd2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800fd2c:	b5b0      	push	{r4, r5, r7, lr}
 800fd2e:	b08a      	sub	sp, #40	@ 0x28
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d102      	bne.n	800fd40 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800fd3a:	2301      	movs	r3, #1
 800fd3c:	f000 fbbf 	bl	80104be <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fd40:	4bc9      	ldr	r3, [pc, #804]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800fd42:	68db      	ldr	r3, [r3, #12]
 800fd44:	220c      	movs	r2, #12
 800fd46:	4013      	ands	r3, r2
 800fd48:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800fd4a:	4bc7      	ldr	r3, [pc, #796]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800fd4c:	68da      	ldr	r2, [r3, #12]
 800fd4e:	2380      	movs	r3, #128	@ 0x80
 800fd50:	025b      	lsls	r3, r3, #9
 800fd52:	4013      	ands	r3, r2
 800fd54:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	2201      	movs	r2, #1
 800fd5c:	4013      	ands	r3, r2
 800fd5e:	d100      	bne.n	800fd62 <HAL_RCC_OscConfig+0x36>
 800fd60:	e07e      	b.n	800fe60 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800fd62:	69fb      	ldr	r3, [r7, #28]
 800fd64:	2b08      	cmp	r3, #8
 800fd66:	d007      	beq.n	800fd78 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800fd68:	69fb      	ldr	r3, [r7, #28]
 800fd6a:	2b0c      	cmp	r3, #12
 800fd6c:	d112      	bne.n	800fd94 <HAL_RCC_OscConfig+0x68>
 800fd6e:	69ba      	ldr	r2, [r7, #24]
 800fd70:	2380      	movs	r3, #128	@ 0x80
 800fd72:	025b      	lsls	r3, r3, #9
 800fd74:	429a      	cmp	r2, r3
 800fd76:	d10d      	bne.n	800fd94 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fd78:	4bbb      	ldr	r3, [pc, #748]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800fd7a:	681a      	ldr	r2, [r3, #0]
 800fd7c:	2380      	movs	r3, #128	@ 0x80
 800fd7e:	029b      	lsls	r3, r3, #10
 800fd80:	4013      	ands	r3, r2
 800fd82:	d100      	bne.n	800fd86 <HAL_RCC_OscConfig+0x5a>
 800fd84:	e06b      	b.n	800fe5e <HAL_RCC_OscConfig+0x132>
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	685b      	ldr	r3, [r3, #4]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d167      	bne.n	800fe5e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800fd8e:	2301      	movs	r3, #1
 800fd90:	f000 fb95 	bl	80104be <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	685a      	ldr	r2, [r3, #4]
 800fd98:	2380      	movs	r3, #128	@ 0x80
 800fd9a:	025b      	lsls	r3, r3, #9
 800fd9c:	429a      	cmp	r2, r3
 800fd9e:	d107      	bne.n	800fdb0 <HAL_RCC_OscConfig+0x84>
 800fda0:	4bb1      	ldr	r3, [pc, #708]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800fda2:	681a      	ldr	r2, [r3, #0]
 800fda4:	4bb0      	ldr	r3, [pc, #704]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800fda6:	2180      	movs	r1, #128	@ 0x80
 800fda8:	0249      	lsls	r1, r1, #9
 800fdaa:	430a      	orrs	r2, r1
 800fdac:	601a      	str	r2, [r3, #0]
 800fdae:	e027      	b.n	800fe00 <HAL_RCC_OscConfig+0xd4>
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	685a      	ldr	r2, [r3, #4]
 800fdb4:	23a0      	movs	r3, #160	@ 0xa0
 800fdb6:	02db      	lsls	r3, r3, #11
 800fdb8:	429a      	cmp	r2, r3
 800fdba:	d10e      	bne.n	800fdda <HAL_RCC_OscConfig+0xae>
 800fdbc:	4baa      	ldr	r3, [pc, #680]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800fdbe:	681a      	ldr	r2, [r3, #0]
 800fdc0:	4ba9      	ldr	r3, [pc, #676]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800fdc2:	2180      	movs	r1, #128	@ 0x80
 800fdc4:	02c9      	lsls	r1, r1, #11
 800fdc6:	430a      	orrs	r2, r1
 800fdc8:	601a      	str	r2, [r3, #0]
 800fdca:	4ba7      	ldr	r3, [pc, #668]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800fdcc:	681a      	ldr	r2, [r3, #0]
 800fdce:	4ba6      	ldr	r3, [pc, #664]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800fdd0:	2180      	movs	r1, #128	@ 0x80
 800fdd2:	0249      	lsls	r1, r1, #9
 800fdd4:	430a      	orrs	r2, r1
 800fdd6:	601a      	str	r2, [r3, #0]
 800fdd8:	e012      	b.n	800fe00 <HAL_RCC_OscConfig+0xd4>
 800fdda:	4ba3      	ldr	r3, [pc, #652]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800fddc:	681a      	ldr	r2, [r3, #0]
 800fdde:	4ba2      	ldr	r3, [pc, #648]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800fde0:	49a2      	ldr	r1, [pc, #648]	@ (801006c <HAL_RCC_OscConfig+0x340>)
 800fde2:	400a      	ands	r2, r1
 800fde4:	601a      	str	r2, [r3, #0]
 800fde6:	4ba0      	ldr	r3, [pc, #640]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800fde8:	681a      	ldr	r2, [r3, #0]
 800fdea:	2380      	movs	r3, #128	@ 0x80
 800fdec:	025b      	lsls	r3, r3, #9
 800fdee:	4013      	ands	r3, r2
 800fdf0:	60fb      	str	r3, [r7, #12]
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	4b9c      	ldr	r3, [pc, #624]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800fdf6:	681a      	ldr	r2, [r3, #0]
 800fdf8:	4b9b      	ldr	r3, [pc, #620]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800fdfa:	499d      	ldr	r1, [pc, #628]	@ (8010070 <HAL_RCC_OscConfig+0x344>)
 800fdfc:	400a      	ands	r2, r1
 800fdfe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	685b      	ldr	r3, [r3, #4]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d015      	beq.n	800fe34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fe08:	f7fa fa16 	bl	800a238 <HAL_GetTick>
 800fe0c:	0003      	movs	r3, r0
 800fe0e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800fe10:	e009      	b.n	800fe26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fe12:	f7fa fa11 	bl	800a238 <HAL_GetTick>
 800fe16:	0002      	movs	r2, r0
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	1ad3      	subs	r3, r2, r3
 800fe1c:	2b64      	cmp	r3, #100	@ 0x64
 800fe1e:	d902      	bls.n	800fe26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800fe20:	2303      	movs	r3, #3
 800fe22:	f000 fb4c 	bl	80104be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800fe26:	4b90      	ldr	r3, [pc, #576]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800fe28:	681a      	ldr	r2, [r3, #0]
 800fe2a:	2380      	movs	r3, #128	@ 0x80
 800fe2c:	029b      	lsls	r3, r3, #10
 800fe2e:	4013      	ands	r3, r2
 800fe30:	d0ef      	beq.n	800fe12 <HAL_RCC_OscConfig+0xe6>
 800fe32:	e015      	b.n	800fe60 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fe34:	f7fa fa00 	bl	800a238 <HAL_GetTick>
 800fe38:	0003      	movs	r3, r0
 800fe3a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800fe3c:	e008      	b.n	800fe50 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800fe3e:	f7fa f9fb 	bl	800a238 <HAL_GetTick>
 800fe42:	0002      	movs	r2, r0
 800fe44:	697b      	ldr	r3, [r7, #20]
 800fe46:	1ad3      	subs	r3, r2, r3
 800fe48:	2b64      	cmp	r3, #100	@ 0x64
 800fe4a:	d901      	bls.n	800fe50 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800fe4c:	2303      	movs	r3, #3
 800fe4e:	e336      	b.n	80104be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800fe50:	4b85      	ldr	r3, [pc, #532]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800fe52:	681a      	ldr	r2, [r3, #0]
 800fe54:	2380      	movs	r3, #128	@ 0x80
 800fe56:	029b      	lsls	r3, r3, #10
 800fe58:	4013      	ands	r3, r2
 800fe5a:	d1f0      	bne.n	800fe3e <HAL_RCC_OscConfig+0x112>
 800fe5c:	e000      	b.n	800fe60 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fe5e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	2202      	movs	r2, #2
 800fe66:	4013      	ands	r3, r2
 800fe68:	d100      	bne.n	800fe6c <HAL_RCC_OscConfig+0x140>
 800fe6a:	e099      	b.n	800ffa0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	68db      	ldr	r3, [r3, #12]
 800fe70:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800fe72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe74:	2220      	movs	r2, #32
 800fe76:	4013      	ands	r3, r2
 800fe78:	d009      	beq.n	800fe8e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800fe7a:	4b7b      	ldr	r3, [pc, #492]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800fe7c:	681a      	ldr	r2, [r3, #0]
 800fe7e:	4b7a      	ldr	r3, [pc, #488]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800fe80:	2120      	movs	r1, #32
 800fe82:	430a      	orrs	r2, r1
 800fe84:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800fe86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe88:	2220      	movs	r2, #32
 800fe8a:	4393      	bics	r3, r2
 800fe8c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800fe8e:	69fb      	ldr	r3, [r7, #28]
 800fe90:	2b04      	cmp	r3, #4
 800fe92:	d005      	beq.n	800fea0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800fe94:	69fb      	ldr	r3, [r7, #28]
 800fe96:	2b0c      	cmp	r3, #12
 800fe98:	d13e      	bne.n	800ff18 <HAL_RCC_OscConfig+0x1ec>
 800fe9a:	69bb      	ldr	r3, [r7, #24]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d13b      	bne.n	800ff18 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800fea0:	4b71      	ldr	r3, [pc, #452]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	2204      	movs	r2, #4
 800fea6:	4013      	ands	r3, r2
 800fea8:	d004      	beq.n	800feb4 <HAL_RCC_OscConfig+0x188>
 800feaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feac:	2b00      	cmp	r3, #0
 800feae:	d101      	bne.n	800feb4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800feb0:	2301      	movs	r3, #1
 800feb2:	e304      	b.n	80104be <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800feb4:	4b6c      	ldr	r3, [pc, #432]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800feb6:	685b      	ldr	r3, [r3, #4]
 800feb8:	4a6e      	ldr	r2, [pc, #440]	@ (8010074 <HAL_RCC_OscConfig+0x348>)
 800feba:	4013      	ands	r3, r2
 800febc:	0019      	movs	r1, r3
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	691b      	ldr	r3, [r3, #16]
 800fec2:	021a      	lsls	r2, r3, #8
 800fec4:	4b68      	ldr	r3, [pc, #416]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800fec6:	430a      	orrs	r2, r1
 800fec8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800feca:	4b67      	ldr	r3, [pc, #412]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	2209      	movs	r2, #9
 800fed0:	4393      	bics	r3, r2
 800fed2:	0019      	movs	r1, r3
 800fed4:	4b64      	ldr	r3, [pc, #400]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800fed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fed8:	430a      	orrs	r2, r1
 800feda:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800fedc:	f000 fc42 	bl	8010764 <HAL_RCC_GetSysClockFreq>
 800fee0:	0001      	movs	r1, r0
 800fee2:	4b61      	ldr	r3, [pc, #388]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800fee4:	68db      	ldr	r3, [r3, #12]
 800fee6:	091b      	lsrs	r3, r3, #4
 800fee8:	220f      	movs	r2, #15
 800feea:	4013      	ands	r3, r2
 800feec:	4a62      	ldr	r2, [pc, #392]	@ (8010078 <HAL_RCC_OscConfig+0x34c>)
 800feee:	5cd3      	ldrb	r3, [r2, r3]
 800fef0:	000a      	movs	r2, r1
 800fef2:	40da      	lsrs	r2, r3
 800fef4:	4b61      	ldr	r3, [pc, #388]	@ (801007c <HAL_RCC_OscConfig+0x350>)
 800fef6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800fef8:	4b61      	ldr	r3, [pc, #388]	@ (8010080 <HAL_RCC_OscConfig+0x354>)
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	2513      	movs	r5, #19
 800fefe:	197c      	adds	r4, r7, r5
 800ff00:	0018      	movs	r0, r3
 800ff02:	f7fa f953 	bl	800a1ac <HAL_InitTick>
 800ff06:	0003      	movs	r3, r0
 800ff08:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800ff0a:	197b      	adds	r3, r7, r5
 800ff0c:	781b      	ldrb	r3, [r3, #0]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d046      	beq.n	800ffa0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800ff12:	197b      	adds	r3, r7, r5
 800ff14:	781b      	ldrb	r3, [r3, #0]
 800ff16:	e2d2      	b.n	80104be <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800ff18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d027      	beq.n	800ff6e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800ff1e:	4b52      	ldr	r3, [pc, #328]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	2209      	movs	r2, #9
 800ff24:	4393      	bics	r3, r2
 800ff26:	0019      	movs	r1, r3
 800ff28:	4b4f      	ldr	r3, [pc, #316]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800ff2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff2c:	430a      	orrs	r2, r1
 800ff2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ff30:	f7fa f982 	bl	800a238 <HAL_GetTick>
 800ff34:	0003      	movs	r3, r0
 800ff36:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ff38:	e008      	b.n	800ff4c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ff3a:	f7fa f97d 	bl	800a238 <HAL_GetTick>
 800ff3e:	0002      	movs	r2, r0
 800ff40:	697b      	ldr	r3, [r7, #20]
 800ff42:	1ad3      	subs	r3, r2, r3
 800ff44:	2b02      	cmp	r3, #2
 800ff46:	d901      	bls.n	800ff4c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800ff48:	2303      	movs	r3, #3
 800ff4a:	e2b8      	b.n	80104be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ff4c:	4b46      	ldr	r3, [pc, #280]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	2204      	movs	r2, #4
 800ff52:	4013      	ands	r3, r2
 800ff54:	d0f1      	beq.n	800ff3a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ff56:	4b44      	ldr	r3, [pc, #272]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800ff58:	685b      	ldr	r3, [r3, #4]
 800ff5a:	4a46      	ldr	r2, [pc, #280]	@ (8010074 <HAL_RCC_OscConfig+0x348>)
 800ff5c:	4013      	ands	r3, r2
 800ff5e:	0019      	movs	r1, r3
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	691b      	ldr	r3, [r3, #16]
 800ff64:	021a      	lsls	r2, r3, #8
 800ff66:	4b40      	ldr	r3, [pc, #256]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800ff68:	430a      	orrs	r2, r1
 800ff6a:	605a      	str	r2, [r3, #4]
 800ff6c:	e018      	b.n	800ffa0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ff6e:	4b3e      	ldr	r3, [pc, #248]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800ff70:	681a      	ldr	r2, [r3, #0]
 800ff72:	4b3d      	ldr	r3, [pc, #244]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800ff74:	2101      	movs	r1, #1
 800ff76:	438a      	bics	r2, r1
 800ff78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ff7a:	f7fa f95d 	bl	800a238 <HAL_GetTick>
 800ff7e:	0003      	movs	r3, r0
 800ff80:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ff82:	e008      	b.n	800ff96 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ff84:	f7fa f958 	bl	800a238 <HAL_GetTick>
 800ff88:	0002      	movs	r2, r0
 800ff8a:	697b      	ldr	r3, [r7, #20]
 800ff8c:	1ad3      	subs	r3, r2, r3
 800ff8e:	2b02      	cmp	r3, #2
 800ff90:	d901      	bls.n	800ff96 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800ff92:	2303      	movs	r3, #3
 800ff94:	e293      	b.n	80104be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ff96:	4b34      	ldr	r3, [pc, #208]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	2204      	movs	r2, #4
 800ff9c:	4013      	ands	r3, r2
 800ff9e:	d1f1      	bne.n	800ff84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	2210      	movs	r2, #16
 800ffa6:	4013      	ands	r3, r2
 800ffa8:	d100      	bne.n	800ffac <HAL_RCC_OscConfig+0x280>
 800ffaa:	e0a2      	b.n	80100f2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ffac:	69fb      	ldr	r3, [r7, #28]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d140      	bne.n	8010034 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ffb2:	4b2d      	ldr	r3, [pc, #180]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800ffb4:	681a      	ldr	r2, [r3, #0]
 800ffb6:	2380      	movs	r3, #128	@ 0x80
 800ffb8:	009b      	lsls	r3, r3, #2
 800ffba:	4013      	ands	r3, r2
 800ffbc:	d005      	beq.n	800ffca <HAL_RCC_OscConfig+0x29e>
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	69db      	ldr	r3, [r3, #28]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d101      	bne.n	800ffca <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	e279      	b.n	80104be <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ffca:	4b27      	ldr	r3, [pc, #156]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800ffcc:	685b      	ldr	r3, [r3, #4]
 800ffce:	4a2d      	ldr	r2, [pc, #180]	@ (8010084 <HAL_RCC_OscConfig+0x358>)
 800ffd0:	4013      	ands	r3, r2
 800ffd2:	0019      	movs	r1, r3
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ffd8:	4b23      	ldr	r3, [pc, #140]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800ffda:	430a      	orrs	r2, r1
 800ffdc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ffde:	4b22      	ldr	r3, [pc, #136]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800ffe0:	685b      	ldr	r3, [r3, #4]
 800ffe2:	021b      	lsls	r3, r3, #8
 800ffe4:	0a19      	lsrs	r1, r3, #8
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	6a1b      	ldr	r3, [r3, #32]
 800ffea:	061a      	lsls	r2, r3, #24
 800ffec:	4b1e      	ldr	r3, [pc, #120]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 800ffee:	430a      	orrs	r2, r1
 800fff0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fff6:	0b5b      	lsrs	r3, r3, #13
 800fff8:	3301      	adds	r3, #1
 800fffa:	2280      	movs	r2, #128	@ 0x80
 800fffc:	0212      	lsls	r2, r2, #8
 800fffe:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8010000:	4b19      	ldr	r3, [pc, #100]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 8010002:	68db      	ldr	r3, [r3, #12]
 8010004:	091b      	lsrs	r3, r3, #4
 8010006:	210f      	movs	r1, #15
 8010008:	400b      	ands	r3, r1
 801000a:	491b      	ldr	r1, [pc, #108]	@ (8010078 <HAL_RCC_OscConfig+0x34c>)
 801000c:	5ccb      	ldrb	r3, [r1, r3]
 801000e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8010010:	4b1a      	ldr	r3, [pc, #104]	@ (801007c <HAL_RCC_OscConfig+0x350>)
 8010012:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8010014:	4b1a      	ldr	r3, [pc, #104]	@ (8010080 <HAL_RCC_OscConfig+0x354>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	2513      	movs	r5, #19
 801001a:	197c      	adds	r4, r7, r5
 801001c:	0018      	movs	r0, r3
 801001e:	f7fa f8c5 	bl	800a1ac <HAL_InitTick>
 8010022:	0003      	movs	r3, r0
 8010024:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8010026:	197b      	adds	r3, r7, r5
 8010028:	781b      	ldrb	r3, [r3, #0]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d061      	beq.n	80100f2 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 801002e:	197b      	adds	r3, r7, r5
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	e244      	b.n	80104be <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	69db      	ldr	r3, [r3, #28]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d040      	beq.n	80100be <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 801003c:	4b0a      	ldr	r3, [pc, #40]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 801003e:	681a      	ldr	r2, [r3, #0]
 8010040:	4b09      	ldr	r3, [pc, #36]	@ (8010068 <HAL_RCC_OscConfig+0x33c>)
 8010042:	2180      	movs	r1, #128	@ 0x80
 8010044:	0049      	lsls	r1, r1, #1
 8010046:	430a      	orrs	r2, r1
 8010048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801004a:	f7fa f8f5 	bl	800a238 <HAL_GetTick>
 801004e:	0003      	movs	r3, r0
 8010050:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8010052:	e019      	b.n	8010088 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8010054:	f7fa f8f0 	bl	800a238 <HAL_GetTick>
 8010058:	0002      	movs	r2, r0
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	1ad3      	subs	r3, r2, r3
 801005e:	2b02      	cmp	r3, #2
 8010060:	d912      	bls.n	8010088 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8010062:	2303      	movs	r3, #3
 8010064:	e22b      	b.n	80104be <HAL_RCC_OscConfig+0x792>
 8010066:	46c0      	nop			@ (mov r8, r8)
 8010068:	40021000 	.word	0x40021000
 801006c:	fffeffff 	.word	0xfffeffff
 8010070:	fffbffff 	.word	0xfffbffff
 8010074:	ffffe0ff 	.word	0xffffe0ff
 8010078:	0801c05c 	.word	0x0801c05c
 801007c:	2000005c 	.word	0x2000005c
 8010080:	20000070 	.word	0x20000070
 8010084:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8010088:	4bca      	ldr	r3, [pc, #808]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 801008a:	681a      	ldr	r2, [r3, #0]
 801008c:	2380      	movs	r3, #128	@ 0x80
 801008e:	009b      	lsls	r3, r3, #2
 8010090:	4013      	ands	r3, r2
 8010092:	d0df      	beq.n	8010054 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010094:	4bc7      	ldr	r3, [pc, #796]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 8010096:	685b      	ldr	r3, [r3, #4]
 8010098:	4ac7      	ldr	r2, [pc, #796]	@ (80103b8 <HAL_RCC_OscConfig+0x68c>)
 801009a:	4013      	ands	r3, r2
 801009c:	0019      	movs	r1, r3
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80100a2:	4bc4      	ldr	r3, [pc, #784]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 80100a4:	430a      	orrs	r2, r1
 80100a6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80100a8:	4bc2      	ldr	r3, [pc, #776]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 80100aa:	685b      	ldr	r3, [r3, #4]
 80100ac:	021b      	lsls	r3, r3, #8
 80100ae:	0a19      	lsrs	r1, r3, #8
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	6a1b      	ldr	r3, [r3, #32]
 80100b4:	061a      	lsls	r2, r3, #24
 80100b6:	4bbf      	ldr	r3, [pc, #764]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 80100b8:	430a      	orrs	r2, r1
 80100ba:	605a      	str	r2, [r3, #4]
 80100bc:	e019      	b.n	80100f2 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80100be:	4bbd      	ldr	r3, [pc, #756]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 80100c0:	681a      	ldr	r2, [r3, #0]
 80100c2:	4bbc      	ldr	r3, [pc, #752]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 80100c4:	49bd      	ldr	r1, [pc, #756]	@ (80103bc <HAL_RCC_OscConfig+0x690>)
 80100c6:	400a      	ands	r2, r1
 80100c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80100ca:	f7fa f8b5 	bl	800a238 <HAL_GetTick>
 80100ce:	0003      	movs	r3, r0
 80100d0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80100d2:	e008      	b.n	80100e6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80100d4:	f7fa f8b0 	bl	800a238 <HAL_GetTick>
 80100d8:	0002      	movs	r2, r0
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	1ad3      	subs	r3, r2, r3
 80100de:	2b02      	cmp	r3, #2
 80100e0:	d901      	bls.n	80100e6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80100e2:	2303      	movs	r3, #3
 80100e4:	e1eb      	b.n	80104be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80100e6:	4bb3      	ldr	r3, [pc, #716]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 80100e8:	681a      	ldr	r2, [r3, #0]
 80100ea:	2380      	movs	r3, #128	@ 0x80
 80100ec:	009b      	lsls	r3, r3, #2
 80100ee:	4013      	ands	r3, r2
 80100f0:	d1f0      	bne.n	80100d4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	2208      	movs	r2, #8
 80100f8:	4013      	ands	r3, r2
 80100fa:	d036      	beq.n	801016a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	695b      	ldr	r3, [r3, #20]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d019      	beq.n	8010138 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010104:	4bab      	ldr	r3, [pc, #684]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 8010106:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010108:	4baa      	ldr	r3, [pc, #680]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 801010a:	2101      	movs	r1, #1
 801010c:	430a      	orrs	r2, r1
 801010e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010110:	f7fa f892 	bl	800a238 <HAL_GetTick>
 8010114:	0003      	movs	r3, r0
 8010116:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010118:	e008      	b.n	801012c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801011a:	f7fa f88d 	bl	800a238 <HAL_GetTick>
 801011e:	0002      	movs	r2, r0
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	1ad3      	subs	r3, r2, r3
 8010124:	2b02      	cmp	r3, #2
 8010126:	d901      	bls.n	801012c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8010128:	2303      	movs	r3, #3
 801012a:	e1c8      	b.n	80104be <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801012c:	4ba1      	ldr	r3, [pc, #644]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 801012e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010130:	2202      	movs	r2, #2
 8010132:	4013      	ands	r3, r2
 8010134:	d0f1      	beq.n	801011a <HAL_RCC_OscConfig+0x3ee>
 8010136:	e018      	b.n	801016a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010138:	4b9e      	ldr	r3, [pc, #632]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 801013a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801013c:	4b9d      	ldr	r3, [pc, #628]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 801013e:	2101      	movs	r1, #1
 8010140:	438a      	bics	r2, r1
 8010142:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010144:	f7fa f878 	bl	800a238 <HAL_GetTick>
 8010148:	0003      	movs	r3, r0
 801014a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801014c:	e008      	b.n	8010160 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801014e:	f7fa f873 	bl	800a238 <HAL_GetTick>
 8010152:	0002      	movs	r2, r0
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	1ad3      	subs	r3, r2, r3
 8010158:	2b02      	cmp	r3, #2
 801015a:	d901      	bls.n	8010160 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 801015c:	2303      	movs	r3, #3
 801015e:	e1ae      	b.n	80104be <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010160:	4b94      	ldr	r3, [pc, #592]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 8010162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010164:	2202      	movs	r2, #2
 8010166:	4013      	ands	r3, r2
 8010168:	d1f1      	bne.n	801014e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	2204      	movs	r2, #4
 8010170:	4013      	ands	r3, r2
 8010172:	d100      	bne.n	8010176 <HAL_RCC_OscConfig+0x44a>
 8010174:	e0ae      	b.n	80102d4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010176:	2023      	movs	r0, #35	@ 0x23
 8010178:	183b      	adds	r3, r7, r0
 801017a:	2200      	movs	r2, #0
 801017c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801017e:	4b8d      	ldr	r3, [pc, #564]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 8010180:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010182:	2380      	movs	r3, #128	@ 0x80
 8010184:	055b      	lsls	r3, r3, #21
 8010186:	4013      	ands	r3, r2
 8010188:	d109      	bne.n	801019e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801018a:	4b8a      	ldr	r3, [pc, #552]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 801018c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801018e:	4b89      	ldr	r3, [pc, #548]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 8010190:	2180      	movs	r1, #128	@ 0x80
 8010192:	0549      	lsls	r1, r1, #21
 8010194:	430a      	orrs	r2, r1
 8010196:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8010198:	183b      	adds	r3, r7, r0
 801019a:	2201      	movs	r2, #1
 801019c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801019e:	4b88      	ldr	r3, [pc, #544]	@ (80103c0 <HAL_RCC_OscConfig+0x694>)
 80101a0:	681a      	ldr	r2, [r3, #0]
 80101a2:	2380      	movs	r3, #128	@ 0x80
 80101a4:	005b      	lsls	r3, r3, #1
 80101a6:	4013      	ands	r3, r2
 80101a8:	d11a      	bne.n	80101e0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80101aa:	4b85      	ldr	r3, [pc, #532]	@ (80103c0 <HAL_RCC_OscConfig+0x694>)
 80101ac:	681a      	ldr	r2, [r3, #0]
 80101ae:	4b84      	ldr	r3, [pc, #528]	@ (80103c0 <HAL_RCC_OscConfig+0x694>)
 80101b0:	2180      	movs	r1, #128	@ 0x80
 80101b2:	0049      	lsls	r1, r1, #1
 80101b4:	430a      	orrs	r2, r1
 80101b6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80101b8:	f7fa f83e 	bl	800a238 <HAL_GetTick>
 80101bc:	0003      	movs	r3, r0
 80101be:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80101c0:	e008      	b.n	80101d4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80101c2:	f7fa f839 	bl	800a238 <HAL_GetTick>
 80101c6:	0002      	movs	r2, r0
 80101c8:	697b      	ldr	r3, [r7, #20]
 80101ca:	1ad3      	subs	r3, r2, r3
 80101cc:	2b64      	cmp	r3, #100	@ 0x64
 80101ce:	d901      	bls.n	80101d4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80101d0:	2303      	movs	r3, #3
 80101d2:	e174      	b.n	80104be <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80101d4:	4b7a      	ldr	r3, [pc, #488]	@ (80103c0 <HAL_RCC_OscConfig+0x694>)
 80101d6:	681a      	ldr	r2, [r3, #0]
 80101d8:	2380      	movs	r3, #128	@ 0x80
 80101da:	005b      	lsls	r3, r3, #1
 80101dc:	4013      	ands	r3, r2
 80101de:	d0f0      	beq.n	80101c2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	689a      	ldr	r2, [r3, #8]
 80101e4:	2380      	movs	r3, #128	@ 0x80
 80101e6:	005b      	lsls	r3, r3, #1
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d107      	bne.n	80101fc <HAL_RCC_OscConfig+0x4d0>
 80101ec:	4b71      	ldr	r3, [pc, #452]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 80101ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80101f0:	4b70      	ldr	r3, [pc, #448]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 80101f2:	2180      	movs	r1, #128	@ 0x80
 80101f4:	0049      	lsls	r1, r1, #1
 80101f6:	430a      	orrs	r2, r1
 80101f8:	651a      	str	r2, [r3, #80]	@ 0x50
 80101fa:	e031      	b.n	8010260 <HAL_RCC_OscConfig+0x534>
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	689b      	ldr	r3, [r3, #8]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d10c      	bne.n	801021e <HAL_RCC_OscConfig+0x4f2>
 8010204:	4b6b      	ldr	r3, [pc, #428]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 8010206:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010208:	4b6a      	ldr	r3, [pc, #424]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 801020a:	496c      	ldr	r1, [pc, #432]	@ (80103bc <HAL_RCC_OscConfig+0x690>)
 801020c:	400a      	ands	r2, r1
 801020e:	651a      	str	r2, [r3, #80]	@ 0x50
 8010210:	4b68      	ldr	r3, [pc, #416]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 8010212:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010214:	4b67      	ldr	r3, [pc, #412]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 8010216:	496b      	ldr	r1, [pc, #428]	@ (80103c4 <HAL_RCC_OscConfig+0x698>)
 8010218:	400a      	ands	r2, r1
 801021a:	651a      	str	r2, [r3, #80]	@ 0x50
 801021c:	e020      	b.n	8010260 <HAL_RCC_OscConfig+0x534>
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	689a      	ldr	r2, [r3, #8]
 8010222:	23a0      	movs	r3, #160	@ 0xa0
 8010224:	00db      	lsls	r3, r3, #3
 8010226:	429a      	cmp	r2, r3
 8010228:	d10e      	bne.n	8010248 <HAL_RCC_OscConfig+0x51c>
 801022a:	4b62      	ldr	r3, [pc, #392]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 801022c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801022e:	4b61      	ldr	r3, [pc, #388]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 8010230:	2180      	movs	r1, #128	@ 0x80
 8010232:	00c9      	lsls	r1, r1, #3
 8010234:	430a      	orrs	r2, r1
 8010236:	651a      	str	r2, [r3, #80]	@ 0x50
 8010238:	4b5e      	ldr	r3, [pc, #376]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 801023a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801023c:	4b5d      	ldr	r3, [pc, #372]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 801023e:	2180      	movs	r1, #128	@ 0x80
 8010240:	0049      	lsls	r1, r1, #1
 8010242:	430a      	orrs	r2, r1
 8010244:	651a      	str	r2, [r3, #80]	@ 0x50
 8010246:	e00b      	b.n	8010260 <HAL_RCC_OscConfig+0x534>
 8010248:	4b5a      	ldr	r3, [pc, #360]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 801024a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801024c:	4b59      	ldr	r3, [pc, #356]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 801024e:	495b      	ldr	r1, [pc, #364]	@ (80103bc <HAL_RCC_OscConfig+0x690>)
 8010250:	400a      	ands	r2, r1
 8010252:	651a      	str	r2, [r3, #80]	@ 0x50
 8010254:	4b57      	ldr	r3, [pc, #348]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 8010256:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010258:	4b56      	ldr	r3, [pc, #344]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 801025a:	495a      	ldr	r1, [pc, #360]	@ (80103c4 <HAL_RCC_OscConfig+0x698>)
 801025c:	400a      	ands	r2, r1
 801025e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	689b      	ldr	r3, [r3, #8]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d015      	beq.n	8010294 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010268:	f7f9 ffe6 	bl	800a238 <HAL_GetTick>
 801026c:	0003      	movs	r3, r0
 801026e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010270:	e009      	b.n	8010286 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010272:	f7f9 ffe1 	bl	800a238 <HAL_GetTick>
 8010276:	0002      	movs	r2, r0
 8010278:	697b      	ldr	r3, [r7, #20]
 801027a:	1ad3      	subs	r3, r2, r3
 801027c:	4a52      	ldr	r2, [pc, #328]	@ (80103c8 <HAL_RCC_OscConfig+0x69c>)
 801027e:	4293      	cmp	r3, r2
 8010280:	d901      	bls.n	8010286 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8010282:	2303      	movs	r3, #3
 8010284:	e11b      	b.n	80104be <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010286:	4b4b      	ldr	r3, [pc, #300]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 8010288:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801028a:	2380      	movs	r3, #128	@ 0x80
 801028c:	009b      	lsls	r3, r3, #2
 801028e:	4013      	ands	r3, r2
 8010290:	d0ef      	beq.n	8010272 <HAL_RCC_OscConfig+0x546>
 8010292:	e014      	b.n	80102be <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010294:	f7f9 ffd0 	bl	800a238 <HAL_GetTick>
 8010298:	0003      	movs	r3, r0
 801029a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801029c:	e009      	b.n	80102b2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801029e:	f7f9 ffcb 	bl	800a238 <HAL_GetTick>
 80102a2:	0002      	movs	r2, r0
 80102a4:	697b      	ldr	r3, [r7, #20]
 80102a6:	1ad3      	subs	r3, r2, r3
 80102a8:	4a47      	ldr	r2, [pc, #284]	@ (80103c8 <HAL_RCC_OscConfig+0x69c>)
 80102aa:	4293      	cmp	r3, r2
 80102ac:	d901      	bls.n	80102b2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80102ae:	2303      	movs	r3, #3
 80102b0:	e105      	b.n	80104be <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80102b2:	4b40      	ldr	r3, [pc, #256]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 80102b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80102b6:	2380      	movs	r3, #128	@ 0x80
 80102b8:	009b      	lsls	r3, r3, #2
 80102ba:	4013      	ands	r3, r2
 80102bc:	d1ef      	bne.n	801029e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80102be:	2323      	movs	r3, #35	@ 0x23
 80102c0:	18fb      	adds	r3, r7, r3
 80102c2:	781b      	ldrb	r3, [r3, #0]
 80102c4:	2b01      	cmp	r3, #1
 80102c6:	d105      	bne.n	80102d4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80102c8:	4b3a      	ldr	r3, [pc, #232]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 80102ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80102cc:	4b39      	ldr	r3, [pc, #228]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 80102ce:	493f      	ldr	r1, [pc, #252]	@ (80103cc <HAL_RCC_OscConfig+0x6a0>)
 80102d0:	400a      	ands	r2, r1
 80102d2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	2220      	movs	r2, #32
 80102da:	4013      	ands	r3, r2
 80102dc:	d049      	beq.n	8010372 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	699b      	ldr	r3, [r3, #24]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d026      	beq.n	8010334 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80102e6:	4b33      	ldr	r3, [pc, #204]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 80102e8:	689a      	ldr	r2, [r3, #8]
 80102ea:	4b32      	ldr	r3, [pc, #200]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 80102ec:	2101      	movs	r1, #1
 80102ee:	430a      	orrs	r2, r1
 80102f0:	609a      	str	r2, [r3, #8]
 80102f2:	4b30      	ldr	r3, [pc, #192]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 80102f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80102f6:	4b2f      	ldr	r3, [pc, #188]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 80102f8:	2101      	movs	r1, #1
 80102fa:	430a      	orrs	r2, r1
 80102fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80102fe:	4b34      	ldr	r3, [pc, #208]	@ (80103d0 <HAL_RCC_OscConfig+0x6a4>)
 8010300:	6a1a      	ldr	r2, [r3, #32]
 8010302:	4b33      	ldr	r3, [pc, #204]	@ (80103d0 <HAL_RCC_OscConfig+0x6a4>)
 8010304:	2180      	movs	r1, #128	@ 0x80
 8010306:	0189      	lsls	r1, r1, #6
 8010308:	430a      	orrs	r2, r1
 801030a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801030c:	f7f9 ff94 	bl	800a238 <HAL_GetTick>
 8010310:	0003      	movs	r3, r0
 8010312:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010314:	e008      	b.n	8010328 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010316:	f7f9 ff8f 	bl	800a238 <HAL_GetTick>
 801031a:	0002      	movs	r2, r0
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	1ad3      	subs	r3, r2, r3
 8010320:	2b02      	cmp	r3, #2
 8010322:	d901      	bls.n	8010328 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8010324:	2303      	movs	r3, #3
 8010326:	e0ca      	b.n	80104be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010328:	4b22      	ldr	r3, [pc, #136]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 801032a:	689b      	ldr	r3, [r3, #8]
 801032c:	2202      	movs	r2, #2
 801032e:	4013      	ands	r3, r2
 8010330:	d0f1      	beq.n	8010316 <HAL_RCC_OscConfig+0x5ea>
 8010332:	e01e      	b.n	8010372 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8010334:	4b1f      	ldr	r3, [pc, #124]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 8010336:	689a      	ldr	r2, [r3, #8]
 8010338:	4b1e      	ldr	r3, [pc, #120]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 801033a:	2101      	movs	r1, #1
 801033c:	438a      	bics	r2, r1
 801033e:	609a      	str	r2, [r3, #8]
 8010340:	4b23      	ldr	r3, [pc, #140]	@ (80103d0 <HAL_RCC_OscConfig+0x6a4>)
 8010342:	6a1a      	ldr	r2, [r3, #32]
 8010344:	4b22      	ldr	r3, [pc, #136]	@ (80103d0 <HAL_RCC_OscConfig+0x6a4>)
 8010346:	4923      	ldr	r1, [pc, #140]	@ (80103d4 <HAL_RCC_OscConfig+0x6a8>)
 8010348:	400a      	ands	r2, r1
 801034a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801034c:	f7f9 ff74 	bl	800a238 <HAL_GetTick>
 8010350:	0003      	movs	r3, r0
 8010352:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8010354:	e008      	b.n	8010368 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010356:	f7f9 ff6f 	bl	800a238 <HAL_GetTick>
 801035a:	0002      	movs	r2, r0
 801035c:	697b      	ldr	r3, [r7, #20]
 801035e:	1ad3      	subs	r3, r2, r3
 8010360:	2b02      	cmp	r3, #2
 8010362:	d901      	bls.n	8010368 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8010364:	2303      	movs	r3, #3
 8010366:	e0aa      	b.n	80104be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8010368:	4b12      	ldr	r3, [pc, #72]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 801036a:	689b      	ldr	r3, [r3, #8]
 801036c:	2202      	movs	r2, #2
 801036e:	4013      	ands	r3, r2
 8010370:	d1f1      	bne.n	8010356 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010376:	2b00      	cmp	r3, #0
 8010378:	d100      	bne.n	801037c <HAL_RCC_OscConfig+0x650>
 801037a:	e09f      	b.n	80104bc <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801037c:	69fb      	ldr	r3, [r7, #28]
 801037e:	2b0c      	cmp	r3, #12
 8010380:	d100      	bne.n	8010384 <HAL_RCC_OscConfig+0x658>
 8010382:	e078      	b.n	8010476 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010388:	2b02      	cmp	r3, #2
 801038a:	d159      	bne.n	8010440 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801038c:	4b09      	ldr	r3, [pc, #36]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 801038e:	681a      	ldr	r2, [r3, #0]
 8010390:	4b08      	ldr	r3, [pc, #32]	@ (80103b4 <HAL_RCC_OscConfig+0x688>)
 8010392:	4911      	ldr	r1, [pc, #68]	@ (80103d8 <HAL_RCC_OscConfig+0x6ac>)
 8010394:	400a      	ands	r2, r1
 8010396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010398:	f7f9 ff4e 	bl	800a238 <HAL_GetTick>
 801039c:	0003      	movs	r3, r0
 801039e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80103a0:	e01c      	b.n	80103dc <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80103a2:	f7f9 ff49 	bl	800a238 <HAL_GetTick>
 80103a6:	0002      	movs	r2, r0
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	1ad3      	subs	r3, r2, r3
 80103ac:	2b02      	cmp	r3, #2
 80103ae:	d915      	bls.n	80103dc <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80103b0:	2303      	movs	r3, #3
 80103b2:	e084      	b.n	80104be <HAL_RCC_OscConfig+0x792>
 80103b4:	40021000 	.word	0x40021000
 80103b8:	ffff1fff 	.word	0xffff1fff
 80103bc:	fffffeff 	.word	0xfffffeff
 80103c0:	40007000 	.word	0x40007000
 80103c4:	fffffbff 	.word	0xfffffbff
 80103c8:	00001388 	.word	0x00001388
 80103cc:	efffffff 	.word	0xefffffff
 80103d0:	40010000 	.word	0x40010000
 80103d4:	ffffdfff 	.word	0xffffdfff
 80103d8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80103dc:	4b3a      	ldr	r3, [pc, #232]	@ (80104c8 <HAL_RCC_OscConfig+0x79c>)
 80103de:	681a      	ldr	r2, [r3, #0]
 80103e0:	2380      	movs	r3, #128	@ 0x80
 80103e2:	049b      	lsls	r3, r3, #18
 80103e4:	4013      	ands	r3, r2
 80103e6:	d1dc      	bne.n	80103a2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80103e8:	4b37      	ldr	r3, [pc, #220]	@ (80104c8 <HAL_RCC_OscConfig+0x79c>)
 80103ea:	68db      	ldr	r3, [r3, #12]
 80103ec:	4a37      	ldr	r2, [pc, #220]	@ (80104cc <HAL_RCC_OscConfig+0x7a0>)
 80103ee:	4013      	ands	r3, r2
 80103f0:	0019      	movs	r1, r3
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103fa:	431a      	orrs	r2, r3
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010400:	431a      	orrs	r2, r3
 8010402:	4b31      	ldr	r3, [pc, #196]	@ (80104c8 <HAL_RCC_OscConfig+0x79c>)
 8010404:	430a      	orrs	r2, r1
 8010406:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010408:	4b2f      	ldr	r3, [pc, #188]	@ (80104c8 <HAL_RCC_OscConfig+0x79c>)
 801040a:	681a      	ldr	r2, [r3, #0]
 801040c:	4b2e      	ldr	r3, [pc, #184]	@ (80104c8 <HAL_RCC_OscConfig+0x79c>)
 801040e:	2180      	movs	r1, #128	@ 0x80
 8010410:	0449      	lsls	r1, r1, #17
 8010412:	430a      	orrs	r2, r1
 8010414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010416:	f7f9 ff0f 	bl	800a238 <HAL_GetTick>
 801041a:	0003      	movs	r3, r0
 801041c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801041e:	e008      	b.n	8010432 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010420:	f7f9 ff0a 	bl	800a238 <HAL_GetTick>
 8010424:	0002      	movs	r2, r0
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	1ad3      	subs	r3, r2, r3
 801042a:	2b02      	cmp	r3, #2
 801042c:	d901      	bls.n	8010432 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 801042e:	2303      	movs	r3, #3
 8010430:	e045      	b.n	80104be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8010432:	4b25      	ldr	r3, [pc, #148]	@ (80104c8 <HAL_RCC_OscConfig+0x79c>)
 8010434:	681a      	ldr	r2, [r3, #0]
 8010436:	2380      	movs	r3, #128	@ 0x80
 8010438:	049b      	lsls	r3, r3, #18
 801043a:	4013      	ands	r3, r2
 801043c:	d0f0      	beq.n	8010420 <HAL_RCC_OscConfig+0x6f4>
 801043e:	e03d      	b.n	80104bc <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010440:	4b21      	ldr	r3, [pc, #132]	@ (80104c8 <HAL_RCC_OscConfig+0x79c>)
 8010442:	681a      	ldr	r2, [r3, #0]
 8010444:	4b20      	ldr	r3, [pc, #128]	@ (80104c8 <HAL_RCC_OscConfig+0x79c>)
 8010446:	4922      	ldr	r1, [pc, #136]	@ (80104d0 <HAL_RCC_OscConfig+0x7a4>)
 8010448:	400a      	ands	r2, r1
 801044a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801044c:	f7f9 fef4 	bl	800a238 <HAL_GetTick>
 8010450:	0003      	movs	r3, r0
 8010452:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8010454:	e008      	b.n	8010468 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010456:	f7f9 feef 	bl	800a238 <HAL_GetTick>
 801045a:	0002      	movs	r2, r0
 801045c:	697b      	ldr	r3, [r7, #20]
 801045e:	1ad3      	subs	r3, r2, r3
 8010460:	2b02      	cmp	r3, #2
 8010462:	d901      	bls.n	8010468 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8010464:	2303      	movs	r3, #3
 8010466:	e02a      	b.n	80104be <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8010468:	4b17      	ldr	r3, [pc, #92]	@ (80104c8 <HAL_RCC_OscConfig+0x79c>)
 801046a:	681a      	ldr	r2, [r3, #0]
 801046c:	2380      	movs	r3, #128	@ 0x80
 801046e:	049b      	lsls	r3, r3, #18
 8010470:	4013      	ands	r3, r2
 8010472:	d1f0      	bne.n	8010456 <HAL_RCC_OscConfig+0x72a>
 8010474:	e022      	b.n	80104bc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801047a:	2b01      	cmp	r3, #1
 801047c:	d101      	bne.n	8010482 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 801047e:	2301      	movs	r3, #1
 8010480:	e01d      	b.n	80104be <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8010482:	4b11      	ldr	r3, [pc, #68]	@ (80104c8 <HAL_RCC_OscConfig+0x79c>)
 8010484:	68db      	ldr	r3, [r3, #12]
 8010486:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010488:	69ba      	ldr	r2, [r7, #24]
 801048a:	2380      	movs	r3, #128	@ 0x80
 801048c:	025b      	lsls	r3, r3, #9
 801048e:	401a      	ands	r2, r3
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010494:	429a      	cmp	r2, r3
 8010496:	d10f      	bne.n	80104b8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8010498:	69ba      	ldr	r2, [r7, #24]
 801049a:	23f0      	movs	r3, #240	@ 0xf0
 801049c:	039b      	lsls	r3, r3, #14
 801049e:	401a      	ands	r2, r3
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d107      	bne.n	80104b8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80104a8:	69ba      	ldr	r2, [r7, #24]
 80104aa:	23c0      	movs	r3, #192	@ 0xc0
 80104ac:	041b      	lsls	r3, r3, #16
 80104ae:	401a      	ands	r2, r3
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80104b4:	429a      	cmp	r2, r3
 80104b6:	d001      	beq.n	80104bc <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80104b8:	2301      	movs	r3, #1
 80104ba:	e000      	b.n	80104be <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80104bc:	2300      	movs	r3, #0
}
 80104be:	0018      	movs	r0, r3
 80104c0:	46bd      	mov	sp, r7
 80104c2:	b00a      	add	sp, #40	@ 0x28
 80104c4:	bdb0      	pop	{r4, r5, r7, pc}
 80104c6:	46c0      	nop			@ (mov r8, r8)
 80104c8:	40021000 	.word	0x40021000
 80104cc:	ff02ffff 	.word	0xff02ffff
 80104d0:	feffffff 	.word	0xfeffffff

080104d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80104d4:	b5b0      	push	{r4, r5, r7, lr}
 80104d6:	b084      	sub	sp, #16
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
 80104dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d101      	bne.n	80104e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80104e4:	2301      	movs	r3, #1
 80104e6:	e128      	b.n	801073a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80104e8:	4b96      	ldr	r3, [pc, #600]	@ (8010744 <HAL_RCC_ClockConfig+0x270>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	2201      	movs	r2, #1
 80104ee:	4013      	ands	r3, r2
 80104f0:	683a      	ldr	r2, [r7, #0]
 80104f2:	429a      	cmp	r2, r3
 80104f4:	d91e      	bls.n	8010534 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80104f6:	4b93      	ldr	r3, [pc, #588]	@ (8010744 <HAL_RCC_ClockConfig+0x270>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	2201      	movs	r2, #1
 80104fc:	4393      	bics	r3, r2
 80104fe:	0019      	movs	r1, r3
 8010500:	4b90      	ldr	r3, [pc, #576]	@ (8010744 <HAL_RCC_ClockConfig+0x270>)
 8010502:	683a      	ldr	r2, [r7, #0]
 8010504:	430a      	orrs	r2, r1
 8010506:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8010508:	f7f9 fe96 	bl	800a238 <HAL_GetTick>
 801050c:	0003      	movs	r3, r0
 801050e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010510:	e009      	b.n	8010526 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010512:	f7f9 fe91 	bl	800a238 <HAL_GetTick>
 8010516:	0002      	movs	r2, r0
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	1ad3      	subs	r3, r2, r3
 801051c:	4a8a      	ldr	r2, [pc, #552]	@ (8010748 <HAL_RCC_ClockConfig+0x274>)
 801051e:	4293      	cmp	r3, r2
 8010520:	d901      	bls.n	8010526 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8010522:	2303      	movs	r3, #3
 8010524:	e109      	b.n	801073a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010526:	4b87      	ldr	r3, [pc, #540]	@ (8010744 <HAL_RCC_ClockConfig+0x270>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	2201      	movs	r2, #1
 801052c:	4013      	ands	r3, r2
 801052e:	683a      	ldr	r2, [r7, #0]
 8010530:	429a      	cmp	r2, r3
 8010532:	d1ee      	bne.n	8010512 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	2202      	movs	r2, #2
 801053a:	4013      	ands	r3, r2
 801053c:	d009      	beq.n	8010552 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801053e:	4b83      	ldr	r3, [pc, #524]	@ (801074c <HAL_RCC_ClockConfig+0x278>)
 8010540:	68db      	ldr	r3, [r3, #12]
 8010542:	22f0      	movs	r2, #240	@ 0xf0
 8010544:	4393      	bics	r3, r2
 8010546:	0019      	movs	r1, r3
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	689a      	ldr	r2, [r3, #8]
 801054c:	4b7f      	ldr	r3, [pc, #508]	@ (801074c <HAL_RCC_ClockConfig+0x278>)
 801054e:	430a      	orrs	r2, r1
 8010550:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	2201      	movs	r2, #1
 8010558:	4013      	ands	r3, r2
 801055a:	d100      	bne.n	801055e <HAL_RCC_ClockConfig+0x8a>
 801055c:	e089      	b.n	8010672 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	685b      	ldr	r3, [r3, #4]
 8010562:	2b02      	cmp	r3, #2
 8010564:	d107      	bne.n	8010576 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010566:	4b79      	ldr	r3, [pc, #484]	@ (801074c <HAL_RCC_ClockConfig+0x278>)
 8010568:	681a      	ldr	r2, [r3, #0]
 801056a:	2380      	movs	r3, #128	@ 0x80
 801056c:	029b      	lsls	r3, r3, #10
 801056e:	4013      	ands	r3, r2
 8010570:	d120      	bne.n	80105b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8010572:	2301      	movs	r3, #1
 8010574:	e0e1      	b.n	801073a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	685b      	ldr	r3, [r3, #4]
 801057a:	2b03      	cmp	r3, #3
 801057c:	d107      	bne.n	801058e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801057e:	4b73      	ldr	r3, [pc, #460]	@ (801074c <HAL_RCC_ClockConfig+0x278>)
 8010580:	681a      	ldr	r2, [r3, #0]
 8010582:	2380      	movs	r3, #128	@ 0x80
 8010584:	049b      	lsls	r3, r3, #18
 8010586:	4013      	ands	r3, r2
 8010588:	d114      	bne.n	80105b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801058a:	2301      	movs	r3, #1
 801058c:	e0d5      	b.n	801073a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	685b      	ldr	r3, [r3, #4]
 8010592:	2b01      	cmp	r3, #1
 8010594:	d106      	bne.n	80105a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010596:	4b6d      	ldr	r3, [pc, #436]	@ (801074c <HAL_RCC_ClockConfig+0x278>)
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	2204      	movs	r2, #4
 801059c:	4013      	ands	r3, r2
 801059e:	d109      	bne.n	80105b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80105a0:	2301      	movs	r3, #1
 80105a2:	e0ca      	b.n	801073a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80105a4:	4b69      	ldr	r3, [pc, #420]	@ (801074c <HAL_RCC_ClockConfig+0x278>)
 80105a6:	681a      	ldr	r2, [r3, #0]
 80105a8:	2380      	movs	r3, #128	@ 0x80
 80105aa:	009b      	lsls	r3, r3, #2
 80105ac:	4013      	ands	r3, r2
 80105ae:	d101      	bne.n	80105b4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80105b0:	2301      	movs	r3, #1
 80105b2:	e0c2      	b.n	801073a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80105b4:	4b65      	ldr	r3, [pc, #404]	@ (801074c <HAL_RCC_ClockConfig+0x278>)
 80105b6:	68db      	ldr	r3, [r3, #12]
 80105b8:	2203      	movs	r2, #3
 80105ba:	4393      	bics	r3, r2
 80105bc:	0019      	movs	r1, r3
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	685a      	ldr	r2, [r3, #4]
 80105c2:	4b62      	ldr	r3, [pc, #392]	@ (801074c <HAL_RCC_ClockConfig+0x278>)
 80105c4:	430a      	orrs	r2, r1
 80105c6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80105c8:	f7f9 fe36 	bl	800a238 <HAL_GetTick>
 80105cc:	0003      	movs	r3, r0
 80105ce:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	685b      	ldr	r3, [r3, #4]
 80105d4:	2b02      	cmp	r3, #2
 80105d6:	d111      	bne.n	80105fc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80105d8:	e009      	b.n	80105ee <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80105da:	f7f9 fe2d 	bl	800a238 <HAL_GetTick>
 80105de:	0002      	movs	r2, r0
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	1ad3      	subs	r3, r2, r3
 80105e4:	4a58      	ldr	r2, [pc, #352]	@ (8010748 <HAL_RCC_ClockConfig+0x274>)
 80105e6:	4293      	cmp	r3, r2
 80105e8:	d901      	bls.n	80105ee <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80105ea:	2303      	movs	r3, #3
 80105ec:	e0a5      	b.n	801073a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80105ee:	4b57      	ldr	r3, [pc, #348]	@ (801074c <HAL_RCC_ClockConfig+0x278>)
 80105f0:	68db      	ldr	r3, [r3, #12]
 80105f2:	220c      	movs	r2, #12
 80105f4:	4013      	ands	r3, r2
 80105f6:	2b08      	cmp	r3, #8
 80105f8:	d1ef      	bne.n	80105da <HAL_RCC_ClockConfig+0x106>
 80105fa:	e03a      	b.n	8010672 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	685b      	ldr	r3, [r3, #4]
 8010600:	2b03      	cmp	r3, #3
 8010602:	d111      	bne.n	8010628 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010604:	e009      	b.n	801061a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010606:	f7f9 fe17 	bl	800a238 <HAL_GetTick>
 801060a:	0002      	movs	r2, r0
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	1ad3      	subs	r3, r2, r3
 8010610:	4a4d      	ldr	r2, [pc, #308]	@ (8010748 <HAL_RCC_ClockConfig+0x274>)
 8010612:	4293      	cmp	r3, r2
 8010614:	d901      	bls.n	801061a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8010616:	2303      	movs	r3, #3
 8010618:	e08f      	b.n	801073a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801061a:	4b4c      	ldr	r3, [pc, #304]	@ (801074c <HAL_RCC_ClockConfig+0x278>)
 801061c:	68db      	ldr	r3, [r3, #12]
 801061e:	220c      	movs	r2, #12
 8010620:	4013      	ands	r3, r2
 8010622:	2b0c      	cmp	r3, #12
 8010624:	d1ef      	bne.n	8010606 <HAL_RCC_ClockConfig+0x132>
 8010626:	e024      	b.n	8010672 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	685b      	ldr	r3, [r3, #4]
 801062c:	2b01      	cmp	r3, #1
 801062e:	d11b      	bne.n	8010668 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010630:	e009      	b.n	8010646 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010632:	f7f9 fe01 	bl	800a238 <HAL_GetTick>
 8010636:	0002      	movs	r2, r0
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	1ad3      	subs	r3, r2, r3
 801063c:	4a42      	ldr	r2, [pc, #264]	@ (8010748 <HAL_RCC_ClockConfig+0x274>)
 801063e:	4293      	cmp	r3, r2
 8010640:	d901      	bls.n	8010646 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8010642:	2303      	movs	r3, #3
 8010644:	e079      	b.n	801073a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8010646:	4b41      	ldr	r3, [pc, #260]	@ (801074c <HAL_RCC_ClockConfig+0x278>)
 8010648:	68db      	ldr	r3, [r3, #12]
 801064a:	220c      	movs	r2, #12
 801064c:	4013      	ands	r3, r2
 801064e:	2b04      	cmp	r3, #4
 8010650:	d1ef      	bne.n	8010632 <HAL_RCC_ClockConfig+0x15e>
 8010652:	e00e      	b.n	8010672 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010654:	f7f9 fdf0 	bl	800a238 <HAL_GetTick>
 8010658:	0002      	movs	r2, r0
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	1ad3      	subs	r3, r2, r3
 801065e:	4a3a      	ldr	r2, [pc, #232]	@ (8010748 <HAL_RCC_ClockConfig+0x274>)
 8010660:	4293      	cmp	r3, r2
 8010662:	d901      	bls.n	8010668 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8010664:	2303      	movs	r3, #3
 8010666:	e068      	b.n	801073a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8010668:	4b38      	ldr	r3, [pc, #224]	@ (801074c <HAL_RCC_ClockConfig+0x278>)
 801066a:	68db      	ldr	r3, [r3, #12]
 801066c:	220c      	movs	r2, #12
 801066e:	4013      	ands	r3, r2
 8010670:	d1f0      	bne.n	8010654 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010672:	4b34      	ldr	r3, [pc, #208]	@ (8010744 <HAL_RCC_ClockConfig+0x270>)
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	2201      	movs	r2, #1
 8010678:	4013      	ands	r3, r2
 801067a:	683a      	ldr	r2, [r7, #0]
 801067c:	429a      	cmp	r2, r3
 801067e:	d21e      	bcs.n	80106be <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010680:	4b30      	ldr	r3, [pc, #192]	@ (8010744 <HAL_RCC_ClockConfig+0x270>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	2201      	movs	r2, #1
 8010686:	4393      	bics	r3, r2
 8010688:	0019      	movs	r1, r3
 801068a:	4b2e      	ldr	r3, [pc, #184]	@ (8010744 <HAL_RCC_ClockConfig+0x270>)
 801068c:	683a      	ldr	r2, [r7, #0]
 801068e:	430a      	orrs	r2, r1
 8010690:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8010692:	f7f9 fdd1 	bl	800a238 <HAL_GetTick>
 8010696:	0003      	movs	r3, r0
 8010698:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801069a:	e009      	b.n	80106b0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801069c:	f7f9 fdcc 	bl	800a238 <HAL_GetTick>
 80106a0:	0002      	movs	r2, r0
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	1ad3      	subs	r3, r2, r3
 80106a6:	4a28      	ldr	r2, [pc, #160]	@ (8010748 <HAL_RCC_ClockConfig+0x274>)
 80106a8:	4293      	cmp	r3, r2
 80106aa:	d901      	bls.n	80106b0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80106ac:	2303      	movs	r3, #3
 80106ae:	e044      	b.n	801073a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80106b0:	4b24      	ldr	r3, [pc, #144]	@ (8010744 <HAL_RCC_ClockConfig+0x270>)
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	2201      	movs	r2, #1
 80106b6:	4013      	ands	r3, r2
 80106b8:	683a      	ldr	r2, [r7, #0]
 80106ba:	429a      	cmp	r2, r3
 80106bc:	d1ee      	bne.n	801069c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	2204      	movs	r2, #4
 80106c4:	4013      	ands	r3, r2
 80106c6:	d009      	beq.n	80106dc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80106c8:	4b20      	ldr	r3, [pc, #128]	@ (801074c <HAL_RCC_ClockConfig+0x278>)
 80106ca:	68db      	ldr	r3, [r3, #12]
 80106cc:	4a20      	ldr	r2, [pc, #128]	@ (8010750 <HAL_RCC_ClockConfig+0x27c>)
 80106ce:	4013      	ands	r3, r2
 80106d0:	0019      	movs	r1, r3
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	68da      	ldr	r2, [r3, #12]
 80106d6:	4b1d      	ldr	r3, [pc, #116]	@ (801074c <HAL_RCC_ClockConfig+0x278>)
 80106d8:	430a      	orrs	r2, r1
 80106da:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	2208      	movs	r2, #8
 80106e2:	4013      	ands	r3, r2
 80106e4:	d00a      	beq.n	80106fc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80106e6:	4b19      	ldr	r3, [pc, #100]	@ (801074c <HAL_RCC_ClockConfig+0x278>)
 80106e8:	68db      	ldr	r3, [r3, #12]
 80106ea:	4a1a      	ldr	r2, [pc, #104]	@ (8010754 <HAL_RCC_ClockConfig+0x280>)
 80106ec:	4013      	ands	r3, r2
 80106ee:	0019      	movs	r1, r3
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	691b      	ldr	r3, [r3, #16]
 80106f4:	00da      	lsls	r2, r3, #3
 80106f6:	4b15      	ldr	r3, [pc, #84]	@ (801074c <HAL_RCC_ClockConfig+0x278>)
 80106f8:	430a      	orrs	r2, r1
 80106fa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80106fc:	f000 f832 	bl	8010764 <HAL_RCC_GetSysClockFreq>
 8010700:	0001      	movs	r1, r0
 8010702:	4b12      	ldr	r3, [pc, #72]	@ (801074c <HAL_RCC_ClockConfig+0x278>)
 8010704:	68db      	ldr	r3, [r3, #12]
 8010706:	091b      	lsrs	r3, r3, #4
 8010708:	220f      	movs	r2, #15
 801070a:	4013      	ands	r3, r2
 801070c:	4a12      	ldr	r2, [pc, #72]	@ (8010758 <HAL_RCC_ClockConfig+0x284>)
 801070e:	5cd3      	ldrb	r3, [r2, r3]
 8010710:	000a      	movs	r2, r1
 8010712:	40da      	lsrs	r2, r3
 8010714:	4b11      	ldr	r3, [pc, #68]	@ (801075c <HAL_RCC_ClockConfig+0x288>)
 8010716:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8010718:	4b11      	ldr	r3, [pc, #68]	@ (8010760 <HAL_RCC_ClockConfig+0x28c>)
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	250b      	movs	r5, #11
 801071e:	197c      	adds	r4, r7, r5
 8010720:	0018      	movs	r0, r3
 8010722:	f7f9 fd43 	bl	800a1ac <HAL_InitTick>
 8010726:	0003      	movs	r3, r0
 8010728:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801072a:	197b      	adds	r3, r7, r5
 801072c:	781b      	ldrb	r3, [r3, #0]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d002      	beq.n	8010738 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8010732:	197b      	adds	r3, r7, r5
 8010734:	781b      	ldrb	r3, [r3, #0]
 8010736:	e000      	b.n	801073a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8010738:	2300      	movs	r3, #0
}
 801073a:	0018      	movs	r0, r3
 801073c:	46bd      	mov	sp, r7
 801073e:	b004      	add	sp, #16
 8010740:	bdb0      	pop	{r4, r5, r7, pc}
 8010742:	46c0      	nop			@ (mov r8, r8)
 8010744:	40022000 	.word	0x40022000
 8010748:	00001388 	.word	0x00001388
 801074c:	40021000 	.word	0x40021000
 8010750:	fffff8ff 	.word	0xfffff8ff
 8010754:	ffffc7ff 	.word	0xffffc7ff
 8010758:	0801c05c 	.word	0x0801c05c
 801075c:	2000005c 	.word	0x2000005c
 8010760:	20000070 	.word	0x20000070

08010764 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010764:	b5b0      	push	{r4, r5, r7, lr}
 8010766:	b08e      	sub	sp, #56	@ 0x38
 8010768:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801076a:	4b4c      	ldr	r3, [pc, #304]	@ (801089c <HAL_RCC_GetSysClockFreq+0x138>)
 801076c:	68db      	ldr	r3, [r3, #12]
 801076e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8010770:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010772:	230c      	movs	r3, #12
 8010774:	4013      	ands	r3, r2
 8010776:	2b0c      	cmp	r3, #12
 8010778:	d014      	beq.n	80107a4 <HAL_RCC_GetSysClockFreq+0x40>
 801077a:	d900      	bls.n	801077e <HAL_RCC_GetSysClockFreq+0x1a>
 801077c:	e07b      	b.n	8010876 <HAL_RCC_GetSysClockFreq+0x112>
 801077e:	2b04      	cmp	r3, #4
 8010780:	d002      	beq.n	8010788 <HAL_RCC_GetSysClockFreq+0x24>
 8010782:	2b08      	cmp	r3, #8
 8010784:	d00b      	beq.n	801079e <HAL_RCC_GetSysClockFreq+0x3a>
 8010786:	e076      	b.n	8010876 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8010788:	4b44      	ldr	r3, [pc, #272]	@ (801089c <HAL_RCC_GetSysClockFreq+0x138>)
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	2210      	movs	r2, #16
 801078e:	4013      	ands	r3, r2
 8010790:	d002      	beq.n	8010798 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8010792:	4b43      	ldr	r3, [pc, #268]	@ (80108a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8010794:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8010796:	e07c      	b.n	8010892 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8010798:	4b42      	ldr	r3, [pc, #264]	@ (80108a4 <HAL_RCC_GetSysClockFreq+0x140>)
 801079a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801079c:	e079      	b.n	8010892 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801079e:	4b42      	ldr	r3, [pc, #264]	@ (80108a8 <HAL_RCC_GetSysClockFreq+0x144>)
 80107a0:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80107a2:	e076      	b.n	8010892 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80107a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107a6:	0c9a      	lsrs	r2, r3, #18
 80107a8:	230f      	movs	r3, #15
 80107aa:	401a      	ands	r2, r3
 80107ac:	4b3f      	ldr	r3, [pc, #252]	@ (80108ac <HAL_RCC_GetSysClockFreq+0x148>)
 80107ae:	5c9b      	ldrb	r3, [r3, r2]
 80107b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80107b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107b4:	0d9a      	lsrs	r2, r3, #22
 80107b6:	2303      	movs	r3, #3
 80107b8:	4013      	ands	r3, r2
 80107ba:	3301      	adds	r3, #1
 80107bc:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80107be:	4b37      	ldr	r3, [pc, #220]	@ (801089c <HAL_RCC_GetSysClockFreq+0x138>)
 80107c0:	68da      	ldr	r2, [r3, #12]
 80107c2:	2380      	movs	r3, #128	@ 0x80
 80107c4:	025b      	lsls	r3, r3, #9
 80107c6:	4013      	ands	r3, r2
 80107c8:	d01a      	beq.n	8010800 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80107ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107cc:	61bb      	str	r3, [r7, #24]
 80107ce:	2300      	movs	r3, #0
 80107d0:	61fb      	str	r3, [r7, #28]
 80107d2:	4a35      	ldr	r2, [pc, #212]	@ (80108a8 <HAL_RCC_GetSysClockFreq+0x144>)
 80107d4:	2300      	movs	r3, #0
 80107d6:	69b8      	ldr	r0, [r7, #24]
 80107d8:	69f9      	ldr	r1, [r7, #28]
 80107da:	f7ef febf 	bl	800055c <__aeabi_lmul>
 80107de:	0002      	movs	r2, r0
 80107e0:	000b      	movs	r3, r1
 80107e2:	0010      	movs	r0, r2
 80107e4:	0019      	movs	r1, r3
 80107e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107e8:	613b      	str	r3, [r7, #16]
 80107ea:	2300      	movs	r3, #0
 80107ec:	617b      	str	r3, [r7, #20]
 80107ee:	693a      	ldr	r2, [r7, #16]
 80107f0:	697b      	ldr	r3, [r7, #20]
 80107f2:	f7ef fe93 	bl	800051c <__aeabi_uldivmod>
 80107f6:	0002      	movs	r2, r0
 80107f8:	000b      	movs	r3, r1
 80107fa:	0013      	movs	r3, r2
 80107fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80107fe:	e037      	b.n	8010870 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8010800:	4b26      	ldr	r3, [pc, #152]	@ (801089c <HAL_RCC_GetSysClockFreq+0x138>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	2210      	movs	r2, #16
 8010806:	4013      	ands	r3, r2
 8010808:	d01a      	beq.n	8010840 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801080a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801080c:	60bb      	str	r3, [r7, #8]
 801080e:	2300      	movs	r3, #0
 8010810:	60fb      	str	r3, [r7, #12]
 8010812:	4a23      	ldr	r2, [pc, #140]	@ (80108a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8010814:	2300      	movs	r3, #0
 8010816:	68b8      	ldr	r0, [r7, #8]
 8010818:	68f9      	ldr	r1, [r7, #12]
 801081a:	f7ef fe9f 	bl	800055c <__aeabi_lmul>
 801081e:	0002      	movs	r2, r0
 8010820:	000b      	movs	r3, r1
 8010822:	0010      	movs	r0, r2
 8010824:	0019      	movs	r1, r3
 8010826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010828:	603b      	str	r3, [r7, #0]
 801082a:	2300      	movs	r3, #0
 801082c:	607b      	str	r3, [r7, #4]
 801082e:	683a      	ldr	r2, [r7, #0]
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	f7ef fe73 	bl	800051c <__aeabi_uldivmod>
 8010836:	0002      	movs	r2, r0
 8010838:	000b      	movs	r3, r1
 801083a:	0013      	movs	r3, r2
 801083c:	637b      	str	r3, [r7, #52]	@ 0x34
 801083e:	e017      	b.n	8010870 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8010840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010842:	0018      	movs	r0, r3
 8010844:	2300      	movs	r3, #0
 8010846:	0019      	movs	r1, r3
 8010848:	4a16      	ldr	r2, [pc, #88]	@ (80108a4 <HAL_RCC_GetSysClockFreq+0x140>)
 801084a:	2300      	movs	r3, #0
 801084c:	f7ef fe86 	bl	800055c <__aeabi_lmul>
 8010850:	0002      	movs	r2, r0
 8010852:	000b      	movs	r3, r1
 8010854:	0010      	movs	r0, r2
 8010856:	0019      	movs	r1, r3
 8010858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801085a:	001c      	movs	r4, r3
 801085c:	2300      	movs	r3, #0
 801085e:	001d      	movs	r5, r3
 8010860:	0022      	movs	r2, r4
 8010862:	002b      	movs	r3, r5
 8010864:	f7ef fe5a 	bl	800051c <__aeabi_uldivmod>
 8010868:	0002      	movs	r2, r0
 801086a:	000b      	movs	r3, r1
 801086c:	0013      	movs	r3, r2
 801086e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8010870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010872:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8010874:	e00d      	b.n	8010892 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8010876:	4b09      	ldr	r3, [pc, #36]	@ (801089c <HAL_RCC_GetSysClockFreq+0x138>)
 8010878:	685b      	ldr	r3, [r3, #4]
 801087a:	0b5b      	lsrs	r3, r3, #13
 801087c:	2207      	movs	r2, #7
 801087e:	4013      	ands	r3, r2
 8010880:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8010882:	6a3b      	ldr	r3, [r7, #32]
 8010884:	3301      	adds	r3, #1
 8010886:	2280      	movs	r2, #128	@ 0x80
 8010888:	0212      	lsls	r2, r2, #8
 801088a:	409a      	lsls	r2, r3
 801088c:	0013      	movs	r3, r2
 801088e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8010890:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8010892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8010894:	0018      	movs	r0, r3
 8010896:	46bd      	mov	sp, r7
 8010898:	b00e      	add	sp, #56	@ 0x38
 801089a:	bdb0      	pop	{r4, r5, r7, pc}
 801089c:	40021000 	.word	0x40021000
 80108a0:	003d0900 	.word	0x003d0900
 80108a4:	00f42400 	.word	0x00f42400
 80108a8:	007a1200 	.word	0x007a1200
 80108ac:	0801c074 	.word	0x0801c074

080108b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80108b4:	4b02      	ldr	r3, [pc, #8]	@ (80108c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80108b6:	681b      	ldr	r3, [r3, #0]
}
 80108b8:	0018      	movs	r0, r3
 80108ba:	46bd      	mov	sp, r7
 80108bc:	bd80      	pop	{r7, pc}
 80108be:	46c0      	nop			@ (mov r8, r8)
 80108c0:	2000005c 	.word	0x2000005c

080108c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80108c8:	f7ff fff2 	bl	80108b0 <HAL_RCC_GetHCLKFreq>
 80108cc:	0001      	movs	r1, r0
 80108ce:	4b06      	ldr	r3, [pc, #24]	@ (80108e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80108d0:	68db      	ldr	r3, [r3, #12]
 80108d2:	0a1b      	lsrs	r3, r3, #8
 80108d4:	2207      	movs	r2, #7
 80108d6:	4013      	ands	r3, r2
 80108d8:	4a04      	ldr	r2, [pc, #16]	@ (80108ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80108da:	5cd3      	ldrb	r3, [r2, r3]
 80108dc:	40d9      	lsrs	r1, r3
 80108de:	000b      	movs	r3, r1
}
 80108e0:	0018      	movs	r0, r3
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd80      	pop	{r7, pc}
 80108e6:	46c0      	nop			@ (mov r8, r8)
 80108e8:	40021000 	.word	0x40021000
 80108ec:	0801c06c 	.word	0x0801c06c

080108f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80108f4:	f7ff ffdc 	bl	80108b0 <HAL_RCC_GetHCLKFreq>
 80108f8:	0001      	movs	r1, r0
 80108fa:	4b06      	ldr	r3, [pc, #24]	@ (8010914 <HAL_RCC_GetPCLK2Freq+0x24>)
 80108fc:	68db      	ldr	r3, [r3, #12]
 80108fe:	0adb      	lsrs	r3, r3, #11
 8010900:	2207      	movs	r2, #7
 8010902:	4013      	ands	r3, r2
 8010904:	4a04      	ldr	r2, [pc, #16]	@ (8010918 <HAL_RCC_GetPCLK2Freq+0x28>)
 8010906:	5cd3      	ldrb	r3, [r2, r3]
 8010908:	40d9      	lsrs	r1, r3
 801090a:	000b      	movs	r3, r1
}
 801090c:	0018      	movs	r0, r3
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}
 8010912:	46c0      	nop			@ (mov r8, r8)
 8010914:	40021000 	.word	0x40021000
 8010918:	0801c06c 	.word	0x0801c06c

0801091c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b086      	sub	sp, #24
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8010924:	2017      	movs	r0, #23
 8010926:	183b      	adds	r3, r7, r0
 8010928:	2200      	movs	r2, #0
 801092a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	2220      	movs	r2, #32
 8010932:	4013      	ands	r3, r2
 8010934:	d100      	bne.n	8010938 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8010936:	e0c7      	b.n	8010ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010938:	4b9b      	ldr	r3, [pc, #620]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801093a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801093c:	2380      	movs	r3, #128	@ 0x80
 801093e:	055b      	lsls	r3, r3, #21
 8010940:	4013      	ands	r3, r2
 8010942:	d109      	bne.n	8010958 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010944:	4b98      	ldr	r3, [pc, #608]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010946:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010948:	4b97      	ldr	r3, [pc, #604]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801094a:	2180      	movs	r1, #128	@ 0x80
 801094c:	0549      	lsls	r1, r1, #21
 801094e:	430a      	orrs	r2, r1
 8010950:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8010952:	183b      	adds	r3, r7, r0
 8010954:	2201      	movs	r2, #1
 8010956:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010958:	4b94      	ldr	r3, [pc, #592]	@ (8010bac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801095a:	681a      	ldr	r2, [r3, #0]
 801095c:	2380      	movs	r3, #128	@ 0x80
 801095e:	005b      	lsls	r3, r3, #1
 8010960:	4013      	ands	r3, r2
 8010962:	d11a      	bne.n	801099a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010964:	4b91      	ldr	r3, [pc, #580]	@ (8010bac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8010966:	681a      	ldr	r2, [r3, #0]
 8010968:	4b90      	ldr	r3, [pc, #576]	@ (8010bac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801096a:	2180      	movs	r1, #128	@ 0x80
 801096c:	0049      	lsls	r1, r1, #1
 801096e:	430a      	orrs	r2, r1
 8010970:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010972:	f7f9 fc61 	bl	800a238 <HAL_GetTick>
 8010976:	0003      	movs	r3, r0
 8010978:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801097a:	e008      	b.n	801098e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801097c:	f7f9 fc5c 	bl	800a238 <HAL_GetTick>
 8010980:	0002      	movs	r2, r0
 8010982:	693b      	ldr	r3, [r7, #16]
 8010984:	1ad3      	subs	r3, r2, r3
 8010986:	2b64      	cmp	r3, #100	@ 0x64
 8010988:	d901      	bls.n	801098e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 801098a:	2303      	movs	r3, #3
 801098c:	e107      	b.n	8010b9e <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801098e:	4b87      	ldr	r3, [pc, #540]	@ (8010bac <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8010990:	681a      	ldr	r2, [r3, #0]
 8010992:	2380      	movs	r3, #128	@ 0x80
 8010994:	005b      	lsls	r3, r3, #1
 8010996:	4013      	ands	r3, r2
 8010998:	d0f0      	beq.n	801097c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 801099a:	4b83      	ldr	r3, [pc, #524]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801099c:	681a      	ldr	r2, [r3, #0]
 801099e:	23c0      	movs	r3, #192	@ 0xc0
 80109a0:	039b      	lsls	r3, r3, #14
 80109a2:	4013      	ands	r3, r2
 80109a4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	685a      	ldr	r2, [r3, #4]
 80109aa:	23c0      	movs	r3, #192	@ 0xc0
 80109ac:	039b      	lsls	r3, r3, #14
 80109ae:	4013      	ands	r3, r2
 80109b0:	68fa      	ldr	r2, [r7, #12]
 80109b2:	429a      	cmp	r2, r3
 80109b4:	d013      	beq.n	80109de <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	685a      	ldr	r2, [r3, #4]
 80109ba:	23c0      	movs	r3, #192	@ 0xc0
 80109bc:	029b      	lsls	r3, r3, #10
 80109be:	401a      	ands	r2, r3
 80109c0:	23c0      	movs	r3, #192	@ 0xc0
 80109c2:	029b      	lsls	r3, r3, #10
 80109c4:	429a      	cmp	r2, r3
 80109c6:	d10a      	bne.n	80109de <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80109c8:	4b77      	ldr	r3, [pc, #476]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80109ca:	681a      	ldr	r2, [r3, #0]
 80109cc:	2380      	movs	r3, #128	@ 0x80
 80109ce:	029b      	lsls	r3, r3, #10
 80109d0:	401a      	ands	r2, r3
 80109d2:	2380      	movs	r3, #128	@ 0x80
 80109d4:	029b      	lsls	r3, r3, #10
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d101      	bne.n	80109de <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80109da:	2301      	movs	r3, #1
 80109dc:	e0df      	b.n	8010b9e <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80109de:	4b72      	ldr	r3, [pc, #456]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80109e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80109e2:	23c0      	movs	r3, #192	@ 0xc0
 80109e4:	029b      	lsls	r3, r3, #10
 80109e6:	4013      	ands	r3, r2
 80109e8:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d03b      	beq.n	8010a68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	685a      	ldr	r2, [r3, #4]
 80109f4:	23c0      	movs	r3, #192	@ 0xc0
 80109f6:	029b      	lsls	r3, r3, #10
 80109f8:	4013      	ands	r3, r2
 80109fa:	68fa      	ldr	r2, [r7, #12]
 80109fc:	429a      	cmp	r2, r3
 80109fe:	d033      	beq.n	8010a68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	2220      	movs	r2, #32
 8010a06:	4013      	ands	r3, r2
 8010a08:	d02e      	beq.n	8010a68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8010a0a:	4b67      	ldr	r3, [pc, #412]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010a0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010a0e:	4a68      	ldr	r2, [pc, #416]	@ (8010bb0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8010a10:	4013      	ands	r3, r2
 8010a12:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8010a14:	4b64      	ldr	r3, [pc, #400]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010a16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010a18:	4b63      	ldr	r3, [pc, #396]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010a1a:	2180      	movs	r1, #128	@ 0x80
 8010a1c:	0309      	lsls	r1, r1, #12
 8010a1e:	430a      	orrs	r2, r1
 8010a20:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8010a22:	4b61      	ldr	r3, [pc, #388]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010a24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010a26:	4b60      	ldr	r3, [pc, #384]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010a28:	4962      	ldr	r1, [pc, #392]	@ (8010bb4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8010a2a:	400a      	ands	r2, r1
 8010a2c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8010a2e:	4b5e      	ldr	r3, [pc, #376]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010a30:	68fa      	ldr	r2, [r7, #12]
 8010a32:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8010a34:	68fa      	ldr	r2, [r7, #12]
 8010a36:	2380      	movs	r3, #128	@ 0x80
 8010a38:	005b      	lsls	r3, r3, #1
 8010a3a:	4013      	ands	r3, r2
 8010a3c:	d014      	beq.n	8010a68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010a3e:	f7f9 fbfb 	bl	800a238 <HAL_GetTick>
 8010a42:	0003      	movs	r3, r0
 8010a44:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010a46:	e009      	b.n	8010a5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010a48:	f7f9 fbf6 	bl	800a238 <HAL_GetTick>
 8010a4c:	0002      	movs	r2, r0
 8010a4e:	693b      	ldr	r3, [r7, #16]
 8010a50:	1ad3      	subs	r3, r2, r3
 8010a52:	4a59      	ldr	r2, [pc, #356]	@ (8010bb8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8010a54:	4293      	cmp	r3, r2
 8010a56:	d901      	bls.n	8010a5c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8010a58:	2303      	movs	r3, #3
 8010a5a:	e0a0      	b.n	8010b9e <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010a5c:	4b52      	ldr	r3, [pc, #328]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010a5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010a60:	2380      	movs	r3, #128	@ 0x80
 8010a62:	009b      	lsls	r3, r3, #2
 8010a64:	4013      	ands	r3, r2
 8010a66:	d0ef      	beq.n	8010a48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	2220      	movs	r2, #32
 8010a6e:	4013      	ands	r3, r2
 8010a70:	d01f      	beq.n	8010ab2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	685a      	ldr	r2, [r3, #4]
 8010a76:	23c0      	movs	r3, #192	@ 0xc0
 8010a78:	029b      	lsls	r3, r3, #10
 8010a7a:	401a      	ands	r2, r3
 8010a7c:	23c0      	movs	r3, #192	@ 0xc0
 8010a7e:	029b      	lsls	r3, r3, #10
 8010a80:	429a      	cmp	r2, r3
 8010a82:	d10c      	bne.n	8010a9e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8010a84:	4b48      	ldr	r3, [pc, #288]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	4a4c      	ldr	r2, [pc, #304]	@ (8010bbc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8010a8a:	4013      	ands	r3, r2
 8010a8c:	0019      	movs	r1, r3
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	685a      	ldr	r2, [r3, #4]
 8010a92:	23c0      	movs	r3, #192	@ 0xc0
 8010a94:	039b      	lsls	r3, r3, #14
 8010a96:	401a      	ands	r2, r3
 8010a98:	4b43      	ldr	r3, [pc, #268]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010a9a:	430a      	orrs	r2, r1
 8010a9c:	601a      	str	r2, [r3, #0]
 8010a9e:	4b42      	ldr	r3, [pc, #264]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010aa0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	685a      	ldr	r2, [r3, #4]
 8010aa6:	23c0      	movs	r3, #192	@ 0xc0
 8010aa8:	029b      	lsls	r3, r3, #10
 8010aaa:	401a      	ands	r2, r3
 8010aac:	4b3e      	ldr	r3, [pc, #248]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010aae:	430a      	orrs	r2, r1
 8010ab0:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8010ab2:	2317      	movs	r3, #23
 8010ab4:	18fb      	adds	r3, r7, r3
 8010ab6:	781b      	ldrb	r3, [r3, #0]
 8010ab8:	2b01      	cmp	r3, #1
 8010aba:	d105      	bne.n	8010ac8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010abc:	4b3a      	ldr	r3, [pc, #232]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010abe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010ac0:	4b39      	ldr	r3, [pc, #228]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010ac2:	493f      	ldr	r1, [pc, #252]	@ (8010bc0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8010ac4:	400a      	ands	r2, r1
 8010ac6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	2201      	movs	r2, #1
 8010ace:	4013      	ands	r3, r2
 8010ad0:	d009      	beq.n	8010ae6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8010ad2:	4b35      	ldr	r3, [pc, #212]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010ad6:	2203      	movs	r2, #3
 8010ad8:	4393      	bics	r3, r2
 8010ada:	0019      	movs	r1, r3
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	689a      	ldr	r2, [r3, #8]
 8010ae0:	4b31      	ldr	r3, [pc, #196]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010ae2:	430a      	orrs	r2, r1
 8010ae4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	2202      	movs	r2, #2
 8010aec:	4013      	ands	r3, r2
 8010aee:	d009      	beq.n	8010b04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010af0:	4b2d      	ldr	r3, [pc, #180]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010af4:	220c      	movs	r2, #12
 8010af6:	4393      	bics	r3, r2
 8010af8:	0019      	movs	r1, r3
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	68da      	ldr	r2, [r3, #12]
 8010afe:	4b2a      	ldr	r3, [pc, #168]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b00:	430a      	orrs	r2, r1
 8010b02:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	2204      	movs	r2, #4
 8010b0a:	4013      	ands	r3, r2
 8010b0c:	d009      	beq.n	8010b22 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010b0e:	4b26      	ldr	r3, [pc, #152]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b12:	4a2c      	ldr	r2, [pc, #176]	@ (8010bc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8010b14:	4013      	ands	r3, r2
 8010b16:	0019      	movs	r1, r3
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	691a      	ldr	r2, [r3, #16]
 8010b1c:	4b22      	ldr	r3, [pc, #136]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b1e:	430a      	orrs	r2, r1
 8010b20:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	2208      	movs	r2, #8
 8010b28:	4013      	ands	r3, r2
 8010b2a:	d009      	beq.n	8010b40 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b30:	4a25      	ldr	r2, [pc, #148]	@ (8010bc8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8010b32:	4013      	ands	r3, r2
 8010b34:	0019      	movs	r1, r3
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	695a      	ldr	r2, [r3, #20]
 8010b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b3c:	430a      	orrs	r2, r1
 8010b3e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681a      	ldr	r2, [r3, #0]
 8010b44:	2380      	movs	r3, #128	@ 0x80
 8010b46:	005b      	lsls	r3, r3, #1
 8010b48:	4013      	ands	r3, r2
 8010b4a:	d009      	beq.n	8010b60 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8010b4c:	4b16      	ldr	r3, [pc, #88]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b50:	4a17      	ldr	r2, [pc, #92]	@ (8010bb0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8010b52:	4013      	ands	r3, r2
 8010b54:	0019      	movs	r1, r3
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	699a      	ldr	r2, [r3, #24]
 8010b5a:	4b13      	ldr	r3, [pc, #76]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b5c:	430a      	orrs	r2, r1
 8010b5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	2240      	movs	r2, #64	@ 0x40
 8010b66:	4013      	ands	r3, r2
 8010b68:	d009      	beq.n	8010b7e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b6e:	4a17      	ldr	r2, [pc, #92]	@ (8010bcc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8010b70:	4013      	ands	r3, r2
 8010b72:	0019      	movs	r1, r3
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	6a1a      	ldr	r2, [r3, #32]
 8010b78:	4b0b      	ldr	r3, [pc, #44]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b7a:	430a      	orrs	r2, r1
 8010b7c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	2280      	movs	r2, #128	@ 0x80
 8010b84:	4013      	ands	r3, r2
 8010b86:	d009      	beq.n	8010b9c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8010b88:	4b07      	ldr	r3, [pc, #28]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b8c:	4a10      	ldr	r2, [pc, #64]	@ (8010bd0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8010b8e:	4013      	ands	r3, r2
 8010b90:	0019      	movs	r1, r3
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	69da      	ldr	r2, [r3, #28]
 8010b96:	4b04      	ldr	r3, [pc, #16]	@ (8010ba8 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8010b98:	430a      	orrs	r2, r1
 8010b9a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8010b9c:	2300      	movs	r3, #0
}
 8010b9e:	0018      	movs	r0, r3
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	b006      	add	sp, #24
 8010ba4:	bd80      	pop	{r7, pc}
 8010ba6:	46c0      	nop			@ (mov r8, r8)
 8010ba8:	40021000 	.word	0x40021000
 8010bac:	40007000 	.word	0x40007000
 8010bb0:	fffcffff 	.word	0xfffcffff
 8010bb4:	fff7ffff 	.word	0xfff7ffff
 8010bb8:	00001388 	.word	0x00001388
 8010bbc:	ffcfffff 	.word	0xffcfffff
 8010bc0:	efffffff 	.word	0xefffffff
 8010bc4:	fffff3ff 	.word	0xfffff3ff
 8010bc8:	ffffcfff 	.word	0xffffcfff
 8010bcc:	fbffffff 	.word	0xfbffffff
 8010bd0:	fff3ffff 	.word	0xfff3ffff

08010bd4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8010bd4:	b5b0      	push	{r4, r5, r7, lr}
 8010bd6:	b084      	sub	sp, #16
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8010bdc:	230f      	movs	r3, #15
 8010bde:	18fb      	adds	r3, r7, r3
 8010be0:	2201      	movs	r2, #1
 8010be2:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d101      	bne.n	8010bee <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8010bea:	2301      	movs	r3, #1
 8010bec:	e088      	b.n	8010d00 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	2221      	movs	r2, #33	@ 0x21
 8010bf2:	5c9b      	ldrb	r3, [r3, r2]
 8010bf4:	b2db      	uxtb	r3, r3
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d107      	bne.n	8010c0a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	2220      	movs	r2, #32
 8010bfe:	2100      	movs	r1, #0
 8010c00:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	0018      	movs	r0, r3
 8010c06:	f7f6 fc41 	bl	800748c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	2221      	movs	r2, #33	@ 0x21
 8010c0e:	2102      	movs	r1, #2
 8010c10:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	68db      	ldr	r3, [r3, #12]
 8010c18:	2210      	movs	r2, #16
 8010c1a:	4013      	ands	r3, r2
 8010c1c:	2b10      	cmp	r3, #16
 8010c1e:	d05f      	beq.n	8010ce0 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	22ca      	movs	r2, #202	@ 0xca
 8010c26:	625a      	str	r2, [r3, #36]	@ 0x24
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	2253      	movs	r2, #83	@ 0x53
 8010c2e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8010c30:	250f      	movs	r5, #15
 8010c32:	197c      	adds	r4, r7, r5
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	0018      	movs	r0, r3
 8010c38:	f000 f93a 	bl	8010eb0 <RTC_EnterInitMode>
 8010c3c:	0003      	movs	r3, r0
 8010c3e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8010c40:	0028      	movs	r0, r5
 8010c42:	183b      	adds	r3, r7, r0
 8010c44:	781b      	ldrb	r3, [r3, #0]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d12c      	bne.n	8010ca4 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	689a      	ldr	r2, [r3, #8]
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	492c      	ldr	r1, [pc, #176]	@ (8010d08 <HAL_RTC_Init+0x134>)
 8010c56:	400a      	ands	r2, r1
 8010c58:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	6899      	ldr	r1, [r3, #8]
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	685a      	ldr	r2, [r3, #4]
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	691b      	ldr	r3, [r3, #16]
 8010c68:	431a      	orrs	r2, r3
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	699b      	ldr	r3, [r3, #24]
 8010c6e:	431a      	orrs	r2, r3
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	430a      	orrs	r2, r1
 8010c76:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	687a      	ldr	r2, [r7, #4]
 8010c7e:	68d2      	ldr	r2, [r2, #12]
 8010c80:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	6919      	ldr	r1, [r3, #16]
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	689b      	ldr	r3, [r3, #8]
 8010c8c:	041a      	lsls	r2, r3, #16
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	430a      	orrs	r2, r1
 8010c94:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8010c96:	183c      	adds	r4, r7, r0
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	0018      	movs	r0, r3
 8010c9c:	f000 f94c 	bl	8010f38 <RTC_ExitInitMode>
 8010ca0:	0003      	movs	r3, r0
 8010ca2:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8010ca4:	230f      	movs	r3, #15
 8010ca6:	18fb      	adds	r3, r7, r3
 8010ca8:	781b      	ldrb	r3, [r3, #0]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d113      	bne.n	8010cd6 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	2103      	movs	r1, #3
 8010cba:	438a      	bics	r2, r1
 8010cbc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	69da      	ldr	r2, [r3, #28]
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	695b      	ldr	r3, [r3, #20]
 8010ccc:	431a      	orrs	r2, r3
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	430a      	orrs	r2, r1
 8010cd4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	22ff      	movs	r2, #255	@ 0xff
 8010cdc:	625a      	str	r2, [r3, #36]	@ 0x24
 8010cde:	e003      	b.n	8010ce8 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8010ce0:	230f      	movs	r3, #15
 8010ce2:	18fb      	adds	r3, r7, r3
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8010ce8:	230f      	movs	r3, #15
 8010cea:	18fb      	adds	r3, r7, r3
 8010cec:	781b      	ldrb	r3, [r3, #0]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d103      	bne.n	8010cfa <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	2221      	movs	r2, #33	@ 0x21
 8010cf6:	2101      	movs	r1, #1
 8010cf8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8010cfa:	230f      	movs	r3, #15
 8010cfc:	18fb      	adds	r3, r7, r3
 8010cfe:	781b      	ldrb	r3, [r3, #0]
}
 8010d00:	0018      	movs	r0, r3
 8010d02:	46bd      	mov	sp, r7
 8010d04:	b004      	add	sp, #16
 8010d06:	bdb0      	pop	{r4, r5, r7, pc}
 8010d08:	ff8fffbf 	.word	0xff8fffbf

08010d0c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010d0c:	b5b0      	push	{r4, r5, r7, lr}
 8010d0e:	b086      	sub	sp, #24
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	60f8      	str	r0, [r7, #12]
 8010d14:	60b9      	str	r1, [r7, #8]
 8010d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8010d18:	2300      	movs	r3, #0
 8010d1a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	2220      	movs	r2, #32
 8010d20:	5c9b      	ldrb	r3, [r3, r2]
 8010d22:	2b01      	cmp	r3, #1
 8010d24:	d101      	bne.n	8010d2a <HAL_RTC_SetTime+0x1e>
 8010d26:	2302      	movs	r3, #2
 8010d28:	e092      	b.n	8010e50 <HAL_RTC_SetTime+0x144>
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	2220      	movs	r2, #32
 8010d2e:	2101      	movs	r1, #1
 8010d30:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	2221      	movs	r2, #33	@ 0x21
 8010d36:	2102      	movs	r1, #2
 8010d38:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d125      	bne.n	8010d8c <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	689b      	ldr	r3, [r3, #8]
 8010d46:	2240      	movs	r2, #64	@ 0x40
 8010d48:	4013      	ands	r3, r2
 8010d4a:	d102      	bne.n	8010d52 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8010d4c:	68bb      	ldr	r3, [r7, #8]
 8010d4e:	2200      	movs	r2, #0
 8010d50:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010d52:	68bb      	ldr	r3, [r7, #8]
 8010d54:	781b      	ldrb	r3, [r3, #0]
 8010d56:	0018      	movs	r0, r3
 8010d58:	f000 f918 	bl	8010f8c <RTC_ByteToBcd2>
 8010d5c:	0003      	movs	r3, r0
 8010d5e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010d60:	68bb      	ldr	r3, [r7, #8]
 8010d62:	785b      	ldrb	r3, [r3, #1]
 8010d64:	0018      	movs	r0, r3
 8010d66:	f000 f911 	bl	8010f8c <RTC_ByteToBcd2>
 8010d6a:	0003      	movs	r3, r0
 8010d6c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010d6e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8010d70:	68bb      	ldr	r3, [r7, #8]
 8010d72:	789b      	ldrb	r3, [r3, #2]
 8010d74:	0018      	movs	r0, r3
 8010d76:	f000 f909 	bl	8010f8c <RTC_ByteToBcd2>
 8010d7a:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8010d7c:	0022      	movs	r2, r4
 8010d7e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8010d80:	68bb      	ldr	r3, [r7, #8]
 8010d82:	78db      	ldrb	r3, [r3, #3]
 8010d84:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8010d86:	4313      	orrs	r3, r2
 8010d88:	617b      	str	r3, [r7, #20]
 8010d8a:	e017      	b.n	8010dbc <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	689b      	ldr	r3, [r3, #8]
 8010d92:	2240      	movs	r2, #64	@ 0x40
 8010d94:	4013      	ands	r3, r2
 8010d96:	d102      	bne.n	8010d9e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8010d98:	68bb      	ldr	r3, [r7, #8]
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8010d9e:	68bb      	ldr	r3, [r7, #8]
 8010da0:	781b      	ldrb	r3, [r3, #0]
 8010da2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8010da4:	68bb      	ldr	r3, [r7, #8]
 8010da6:	785b      	ldrb	r3, [r3, #1]
 8010da8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8010daa:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8010dac:	68ba      	ldr	r2, [r7, #8]
 8010dae:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8010db0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8010db2:	68bb      	ldr	r3, [r7, #8]
 8010db4:	78db      	ldrb	r3, [r3, #3]
 8010db6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8010db8:	4313      	orrs	r3, r2
 8010dba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	22ca      	movs	r2, #202	@ 0xca
 8010dc2:	625a      	str	r2, [r3, #36]	@ 0x24
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	2253      	movs	r2, #83	@ 0x53
 8010dca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8010dcc:	2513      	movs	r5, #19
 8010dce:	197c      	adds	r4, r7, r5
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	0018      	movs	r0, r3
 8010dd4:	f000 f86c 	bl	8010eb0 <RTC_EnterInitMode>
 8010dd8:	0003      	movs	r3, r0
 8010dda:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8010ddc:	0028      	movs	r0, r5
 8010dde:	183b      	adds	r3, r7, r0
 8010de0:	781b      	ldrb	r3, [r3, #0]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d120      	bne.n	8010e28 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	697a      	ldr	r2, [r7, #20]
 8010dec:	491a      	ldr	r1, [pc, #104]	@ (8010e58 <HAL_RTC_SetTime+0x14c>)
 8010dee:	400a      	ands	r2, r1
 8010df0:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	689a      	ldr	r2, [r3, #8]
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	4917      	ldr	r1, [pc, #92]	@ (8010e5c <HAL_RTC_SetTime+0x150>)
 8010dfe:	400a      	ands	r2, r1
 8010e00:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	6899      	ldr	r1, [r3, #8]
 8010e08:	68bb      	ldr	r3, [r7, #8]
 8010e0a:	68da      	ldr	r2, [r3, #12]
 8010e0c:	68bb      	ldr	r3, [r7, #8]
 8010e0e:	691b      	ldr	r3, [r3, #16]
 8010e10:	431a      	orrs	r2, r3
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	430a      	orrs	r2, r1
 8010e18:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8010e1a:	183c      	adds	r4, r7, r0
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	0018      	movs	r0, r3
 8010e20:	f000 f88a 	bl	8010f38 <RTC_ExitInitMode>
 8010e24:	0003      	movs	r3, r0
 8010e26:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8010e28:	2313      	movs	r3, #19
 8010e2a:	18fb      	adds	r3, r7, r3
 8010e2c:	781b      	ldrb	r3, [r3, #0]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d103      	bne.n	8010e3a <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	2221      	movs	r2, #33	@ 0x21
 8010e36:	2101      	movs	r1, #1
 8010e38:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	22ff      	movs	r2, #255	@ 0xff
 8010e40:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	2220      	movs	r2, #32
 8010e46:	2100      	movs	r1, #0
 8010e48:	5499      	strb	r1, [r3, r2]

  return status;
 8010e4a:	2313      	movs	r3, #19
 8010e4c:	18fb      	adds	r3, r7, r3
 8010e4e:	781b      	ldrb	r3, [r3, #0]
}
 8010e50:	0018      	movs	r0, r3
 8010e52:	46bd      	mov	sp, r7
 8010e54:	b006      	add	sp, #24
 8010e56:	bdb0      	pop	{r4, r5, r7, pc}
 8010e58:	007f7f7f 	.word	0x007f7f7f
 8010e5c:	fffbffff 	.word	0xfffbffff

08010e60 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b084      	sub	sp, #16
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8010e68:	2300      	movs	r3, #0
 8010e6a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	4a0e      	ldr	r2, [pc, #56]	@ (8010eac <HAL_RTC_WaitForSynchro+0x4c>)
 8010e72:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010e74:	f7f9 f9e0 	bl	800a238 <HAL_GetTick>
 8010e78:	0003      	movs	r3, r0
 8010e7a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010e7c:	e00a      	b.n	8010e94 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010e7e:	f7f9 f9db 	bl	800a238 <HAL_GetTick>
 8010e82:	0002      	movs	r2, r0
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	1ad2      	subs	r2, r2, r3
 8010e88:	23fa      	movs	r3, #250	@ 0xfa
 8010e8a:	009b      	lsls	r3, r3, #2
 8010e8c:	429a      	cmp	r2, r3
 8010e8e:	d901      	bls.n	8010e94 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8010e90:	2303      	movs	r3, #3
 8010e92:	e006      	b.n	8010ea2 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	68db      	ldr	r3, [r3, #12]
 8010e9a:	2220      	movs	r2, #32
 8010e9c:	4013      	ands	r3, r2
 8010e9e:	d0ee      	beq.n	8010e7e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8010ea0:	2300      	movs	r3, #0
}
 8010ea2:	0018      	movs	r0, r3
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	b004      	add	sp, #16
 8010ea8:	bd80      	pop	{r7, pc}
 8010eaa:	46c0      	nop			@ (mov r8, r8)
 8010eac:	0001ff5f 	.word	0x0001ff5f

08010eb0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b084      	sub	sp, #16
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8010eb8:	2300      	movs	r3, #0
 8010eba:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8010ebc:	230f      	movs	r3, #15
 8010ebe:	18fb      	adds	r3, r7, r3
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	68db      	ldr	r3, [r3, #12]
 8010eca:	2240      	movs	r2, #64	@ 0x40
 8010ecc:	4013      	ands	r3, r2
 8010ece:	d12c      	bne.n	8010f2a <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	68da      	ldr	r2, [r3, #12]
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	2180      	movs	r1, #128	@ 0x80
 8010edc:	430a      	orrs	r2, r1
 8010ede:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8010ee0:	f7f9 f9aa 	bl	800a238 <HAL_GetTick>
 8010ee4:	0003      	movs	r3, r0
 8010ee6:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8010ee8:	e014      	b.n	8010f14 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010eea:	f7f9 f9a5 	bl	800a238 <HAL_GetTick>
 8010eee:	0002      	movs	r2, r0
 8010ef0:	68bb      	ldr	r3, [r7, #8]
 8010ef2:	1ad2      	subs	r2, r2, r3
 8010ef4:	200f      	movs	r0, #15
 8010ef6:	183b      	adds	r3, r7, r0
 8010ef8:	1839      	adds	r1, r7, r0
 8010efa:	7809      	ldrb	r1, [r1, #0]
 8010efc:	7019      	strb	r1, [r3, #0]
 8010efe:	23fa      	movs	r3, #250	@ 0xfa
 8010f00:	009b      	lsls	r3, r3, #2
 8010f02:	429a      	cmp	r2, r3
 8010f04:	d906      	bls.n	8010f14 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	2221      	movs	r2, #33	@ 0x21
 8010f0a:	2104      	movs	r1, #4
 8010f0c:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8010f0e:	183b      	adds	r3, r7, r0
 8010f10:	2201      	movs	r2, #1
 8010f12:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	68db      	ldr	r3, [r3, #12]
 8010f1a:	2240      	movs	r2, #64	@ 0x40
 8010f1c:	4013      	ands	r3, r2
 8010f1e:	d104      	bne.n	8010f2a <RTC_EnterInitMode+0x7a>
 8010f20:	230f      	movs	r3, #15
 8010f22:	18fb      	adds	r3, r7, r3
 8010f24:	781b      	ldrb	r3, [r3, #0]
 8010f26:	2b01      	cmp	r3, #1
 8010f28:	d1df      	bne.n	8010eea <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8010f2a:	230f      	movs	r3, #15
 8010f2c:	18fb      	adds	r3, r7, r3
 8010f2e:	781b      	ldrb	r3, [r3, #0]
}
 8010f30:	0018      	movs	r0, r3
 8010f32:	46bd      	mov	sp, r7
 8010f34:	b004      	add	sp, #16
 8010f36:	bd80      	pop	{r7, pc}

08010f38 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8010f38:	b590      	push	{r4, r7, lr}
 8010f3a:	b085      	sub	sp, #20
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010f40:	240f      	movs	r4, #15
 8010f42:	193b      	adds	r3, r7, r4
 8010f44:	2200      	movs	r2, #0
 8010f46:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	68da      	ldr	r2, [r3, #12]
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	2180      	movs	r1, #128	@ 0x80
 8010f54:	438a      	bics	r2, r1
 8010f56:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	689b      	ldr	r3, [r3, #8]
 8010f5e:	2220      	movs	r2, #32
 8010f60:	4013      	ands	r3, r2
 8010f62:	d10c      	bne.n	8010f7e <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	0018      	movs	r0, r3
 8010f68:	f7ff ff7a 	bl	8010e60 <HAL_RTC_WaitForSynchro>
 8010f6c:	1e03      	subs	r3, r0, #0
 8010f6e:	d006      	beq.n	8010f7e <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	2221      	movs	r2, #33	@ 0x21
 8010f74:	2104      	movs	r1, #4
 8010f76:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8010f78:	193b      	adds	r3, r7, r4
 8010f7a:	2201      	movs	r2, #1
 8010f7c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8010f7e:	230f      	movs	r3, #15
 8010f80:	18fb      	adds	r3, r7, r3
 8010f82:	781b      	ldrb	r3, [r3, #0]
}
 8010f84:	0018      	movs	r0, r3
 8010f86:	46bd      	mov	sp, r7
 8010f88:	b005      	add	sp, #20
 8010f8a:	bd90      	pop	{r4, r7, pc}

08010f8c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b084      	sub	sp, #16
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	0002      	movs	r2, r0
 8010f94:	1dfb      	adds	r3, r7, #7
 8010f96:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8010f98:	2300      	movs	r3, #0
 8010f9a:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8010f9c:	e007      	b.n	8010fae <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	3301      	adds	r3, #1
 8010fa2:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8010fa4:	1dfb      	adds	r3, r7, #7
 8010fa6:	1dfa      	adds	r2, r7, #7
 8010fa8:	7812      	ldrb	r2, [r2, #0]
 8010faa:	3a0a      	subs	r2, #10
 8010fac:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8010fae:	1dfb      	adds	r3, r7, #7
 8010fb0:	781b      	ldrb	r3, [r3, #0]
 8010fb2:	2b09      	cmp	r3, #9
 8010fb4:	d8f3      	bhi.n	8010f9e <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	b2db      	uxtb	r3, r3
 8010fba:	011b      	lsls	r3, r3, #4
 8010fbc:	b2da      	uxtb	r2, r3
 8010fbe:	1dfb      	adds	r3, r7, #7
 8010fc0:	781b      	ldrb	r3, [r3, #0]
 8010fc2:	4313      	orrs	r3, r2
 8010fc4:	b2db      	uxtb	r3, r3
}
 8010fc6:	0018      	movs	r0, r3
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	b004      	add	sp, #16
 8010fcc:	bd80      	pop	{r7, pc}
	...

08010fd0 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b086      	sub	sp, #24
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	60f8      	str	r0, [r7, #12]
 8010fd8:	60b9      	str	r1, [r7, #8]
 8010fda:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8010fdc:	2300      	movs	r3, #0
 8010fde:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	2220      	movs	r2, #32
 8010fe4:	5c9b      	ldrb	r3, [r3, r2]
 8010fe6:	2b01      	cmp	r3, #1
 8010fe8:	d101      	bne.n	8010fee <HAL_RTCEx_SetWakeUpTimer+0x1e>
 8010fea:	2302      	movs	r3, #2
 8010fec:	e096      	b.n	801111c <HAL_RTCEx_SetWakeUpTimer+0x14c>
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	2220      	movs	r2, #32
 8010ff2:	2101      	movs	r1, #1
 8010ff4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	2221      	movs	r2, #33	@ 0x21
 8010ffa:	2102      	movs	r1, #2
 8010ffc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	22ca      	movs	r2, #202	@ 0xca
 8011004:	625a      	str	r2, [r3, #36]	@ 0x24
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	2253      	movs	r2, #83	@ 0x53
 801100c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	689a      	ldr	r2, [r3, #8]
 8011014:	2380      	movs	r3, #128	@ 0x80
 8011016:	00db      	lsls	r3, r3, #3
 8011018:	4013      	ands	r3, r2
 801101a:	d021      	beq.n	8011060 <HAL_RTCEx_SetWakeUpTimer+0x90>
  {
    tickstart = HAL_GetTick();
 801101c:	f7f9 f90c 	bl	800a238 <HAL_GetTick>
 8011020:	0003      	movs	r3, r0
 8011022:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8011024:	e016      	b.n	8011054 <HAL_RTCEx_SetWakeUpTimer+0x84>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8011026:	f7f9 f907 	bl	800a238 <HAL_GetTick>
 801102a:	0002      	movs	r2, r0
 801102c:	697b      	ldr	r3, [r7, #20]
 801102e:	1ad2      	subs	r2, r2, r3
 8011030:	23fa      	movs	r3, #250	@ 0xfa
 8011032:	009b      	lsls	r3, r3, #2
 8011034:	429a      	cmp	r2, r3
 8011036:	d90d      	bls.n	8011054 <HAL_RTCEx_SetWakeUpTimer+0x84>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	22ff      	movs	r2, #255	@ 0xff
 801103e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	2221      	movs	r2, #33	@ 0x21
 8011044:	2103      	movs	r1, #3
 8011046:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	2220      	movs	r2, #32
 801104c:	2100      	movs	r1, #0
 801104e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8011050:	2303      	movs	r3, #3
 8011052:	e063      	b.n	801111c <HAL_RTCEx_SetWakeUpTimer+0x14c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	68db      	ldr	r3, [r3, #12]
 801105a:	2204      	movs	r2, #4
 801105c:	4013      	ands	r3, r2
 801105e:	d1e2      	bne.n	8011026 <HAL_RTCEx_SetWakeUpTimer+0x56>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	689a      	ldr	r2, [r3, #8]
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	492e      	ldr	r1, [pc, #184]	@ (8011124 <HAL_RTCEx_SetWakeUpTimer+0x154>)
 801106c:	400a      	ands	r2, r1
 801106e:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	68db      	ldr	r3, [r3, #12]
 8011076:	22ff      	movs	r2, #255	@ 0xff
 8011078:	401a      	ands	r2, r3
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	492a      	ldr	r1, [pc, #168]	@ (8011128 <HAL_RTCEx_SetWakeUpTimer+0x158>)
 8011080:	430a      	orrs	r2, r1
 8011082:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011084:	f7f9 f8d8 	bl	800a238 <HAL_GetTick>
 8011088:	0003      	movs	r3, r0
 801108a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 801108c:	e016      	b.n	80110bc <HAL_RTCEx_SetWakeUpTimer+0xec>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 801108e:	f7f9 f8d3 	bl	800a238 <HAL_GetTick>
 8011092:	0002      	movs	r2, r0
 8011094:	697b      	ldr	r3, [r7, #20]
 8011096:	1ad2      	subs	r2, r2, r3
 8011098:	23fa      	movs	r3, #250	@ 0xfa
 801109a:	009b      	lsls	r3, r3, #2
 801109c:	429a      	cmp	r2, r3
 801109e:	d90d      	bls.n	80110bc <HAL_RTCEx_SetWakeUpTimer+0xec>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	22ff      	movs	r2, #255	@ 0xff
 80110a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	2221      	movs	r2, #33	@ 0x21
 80110ac:	2103      	movs	r1, #3
 80110ae:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	2220      	movs	r2, #32
 80110b4:	2100      	movs	r1, #0
 80110b6:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80110b8:	2303      	movs	r3, #3
 80110ba:	e02f      	b.n	801111c <HAL_RTCEx_SetWakeUpTimer+0x14c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	68db      	ldr	r3, [r3, #12]
 80110c2:	2204      	movs	r2, #4
 80110c4:	4013      	ands	r3, r2
 80110c6:	d0e2      	beq.n	801108e <HAL_RTCEx_SetWakeUpTimer+0xbe>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	689a      	ldr	r2, [r3, #8]
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	2107      	movs	r1, #7
 80110d4:	438a      	bics	r2, r1
 80110d6:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	6899      	ldr	r1, [r3, #8]
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	687a      	ldr	r2, [r7, #4]
 80110e4:	430a      	orrs	r2, r1
 80110e6:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	68ba      	ldr	r2, [r7, #8]
 80110ee:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	689a      	ldr	r2, [r3, #8]
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	2180      	movs	r1, #128	@ 0x80
 80110fc:	00c9      	lsls	r1, r1, #3
 80110fe:	430a      	orrs	r2, r1
 8011100:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	22ff      	movs	r2, #255	@ 0xff
 8011108:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	2221      	movs	r2, #33	@ 0x21
 801110e:	2101      	movs	r1, #1
 8011110:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	2220      	movs	r2, #32
 8011116:	2100      	movs	r1, #0
 8011118:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801111a:	2300      	movs	r3, #0
}
 801111c:	0018      	movs	r0, r3
 801111e:	46bd      	mov	sp, r7
 8011120:	b006      	add	sp, #24
 8011122:	bd80      	pop	{r7, pc}
 8011124:	fffffbff 	.word	0xfffffbff
 8011128:	fffffb7f 	.word	0xfffffb7f

0801112c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b082      	sub	sp, #8
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d101      	bne.n	801113e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801113a:	2301      	movs	r3, #1
 801113c:	e032      	b.n	80111a4 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	2239      	movs	r2, #57	@ 0x39
 8011142:	5c9b      	ldrb	r3, [r3, r2]
 8011144:	b2db      	uxtb	r3, r3
 8011146:	2b00      	cmp	r3, #0
 8011148:	d107      	bne.n	801115a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	2238      	movs	r2, #56	@ 0x38
 801114e:	2100      	movs	r1, #0
 8011150:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	0018      	movs	r0, r3
 8011156:	f7f8 fa3d 	bl	80095d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	2239      	movs	r2, #57	@ 0x39
 801115e:	2102      	movs	r1, #2
 8011160:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	681a      	ldr	r2, [r3, #0]
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	3304      	adds	r3, #4
 801116a:	0019      	movs	r1, r3
 801116c:	0010      	movs	r0, r2
 801116e:	f000 f975 	bl	801145c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	223e      	movs	r2, #62	@ 0x3e
 8011176:	2101      	movs	r1, #1
 8011178:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	223a      	movs	r2, #58	@ 0x3a
 801117e:	2101      	movs	r1, #1
 8011180:	5499      	strb	r1, [r3, r2]
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	223b      	movs	r2, #59	@ 0x3b
 8011186:	2101      	movs	r1, #1
 8011188:	5499      	strb	r1, [r3, r2]
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	223c      	movs	r2, #60	@ 0x3c
 801118e:	2101      	movs	r1, #1
 8011190:	5499      	strb	r1, [r3, r2]
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	223d      	movs	r2, #61	@ 0x3d
 8011196:	2101      	movs	r1, #1
 8011198:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2239      	movs	r2, #57	@ 0x39
 801119e:	2101      	movs	r1, #1
 80111a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80111a2:	2300      	movs	r3, #0
}
 80111a4:	0018      	movs	r0, r3
 80111a6:	46bd      	mov	sp, r7
 80111a8:	b002      	add	sp, #8
 80111aa:	bd80      	pop	{r7, pc}

080111ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b084      	sub	sp, #16
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
 80111b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80111b6:	683b      	ldr	r3, [r7, #0]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d108      	bne.n	80111ce <HAL_TIM_PWM_Start+0x22>
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	223a      	movs	r2, #58	@ 0x3a
 80111c0:	5c9b      	ldrb	r3, [r3, r2]
 80111c2:	b2db      	uxtb	r3, r3
 80111c4:	3b01      	subs	r3, #1
 80111c6:	1e5a      	subs	r2, r3, #1
 80111c8:	4193      	sbcs	r3, r2
 80111ca:	b2db      	uxtb	r3, r3
 80111cc:	e01f      	b.n	801120e <HAL_TIM_PWM_Start+0x62>
 80111ce:	683b      	ldr	r3, [r7, #0]
 80111d0:	2b04      	cmp	r3, #4
 80111d2:	d108      	bne.n	80111e6 <HAL_TIM_PWM_Start+0x3a>
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	223b      	movs	r2, #59	@ 0x3b
 80111d8:	5c9b      	ldrb	r3, [r3, r2]
 80111da:	b2db      	uxtb	r3, r3
 80111dc:	3b01      	subs	r3, #1
 80111de:	1e5a      	subs	r2, r3, #1
 80111e0:	4193      	sbcs	r3, r2
 80111e2:	b2db      	uxtb	r3, r3
 80111e4:	e013      	b.n	801120e <HAL_TIM_PWM_Start+0x62>
 80111e6:	683b      	ldr	r3, [r7, #0]
 80111e8:	2b08      	cmp	r3, #8
 80111ea:	d108      	bne.n	80111fe <HAL_TIM_PWM_Start+0x52>
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	223c      	movs	r2, #60	@ 0x3c
 80111f0:	5c9b      	ldrb	r3, [r3, r2]
 80111f2:	b2db      	uxtb	r3, r3
 80111f4:	3b01      	subs	r3, #1
 80111f6:	1e5a      	subs	r2, r3, #1
 80111f8:	4193      	sbcs	r3, r2
 80111fa:	b2db      	uxtb	r3, r3
 80111fc:	e007      	b.n	801120e <HAL_TIM_PWM_Start+0x62>
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	223d      	movs	r2, #61	@ 0x3d
 8011202:	5c9b      	ldrb	r3, [r3, r2]
 8011204:	b2db      	uxtb	r3, r3
 8011206:	3b01      	subs	r3, #1
 8011208:	1e5a      	subs	r2, r3, #1
 801120a:	4193      	sbcs	r3, r2
 801120c:	b2db      	uxtb	r3, r3
 801120e:	2b00      	cmp	r3, #0
 8011210:	d001      	beq.n	8011216 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8011212:	2301      	movs	r3, #1
 8011214:	e052      	b.n	80112bc <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011216:	683b      	ldr	r3, [r7, #0]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d104      	bne.n	8011226 <HAL_TIM_PWM_Start+0x7a>
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	223a      	movs	r2, #58	@ 0x3a
 8011220:	2102      	movs	r1, #2
 8011222:	5499      	strb	r1, [r3, r2]
 8011224:	e013      	b.n	801124e <HAL_TIM_PWM_Start+0xa2>
 8011226:	683b      	ldr	r3, [r7, #0]
 8011228:	2b04      	cmp	r3, #4
 801122a:	d104      	bne.n	8011236 <HAL_TIM_PWM_Start+0x8a>
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	223b      	movs	r2, #59	@ 0x3b
 8011230:	2102      	movs	r1, #2
 8011232:	5499      	strb	r1, [r3, r2]
 8011234:	e00b      	b.n	801124e <HAL_TIM_PWM_Start+0xa2>
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	2b08      	cmp	r3, #8
 801123a:	d104      	bne.n	8011246 <HAL_TIM_PWM_Start+0x9a>
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	223c      	movs	r2, #60	@ 0x3c
 8011240:	2102      	movs	r1, #2
 8011242:	5499      	strb	r1, [r3, r2]
 8011244:	e003      	b.n	801124e <HAL_TIM_PWM_Start+0xa2>
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	223d      	movs	r2, #61	@ 0x3d
 801124a:	2102      	movs	r1, #2
 801124c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	6839      	ldr	r1, [r7, #0]
 8011254:	2201      	movs	r2, #1
 8011256:	0018      	movs	r0, r3
 8011258:	f000 fa62 	bl	8011720 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	681a      	ldr	r2, [r3, #0]
 8011260:	2380      	movs	r3, #128	@ 0x80
 8011262:	05db      	lsls	r3, r3, #23
 8011264:	429a      	cmp	r2, r3
 8011266:	d00e      	beq.n	8011286 <HAL_TIM_PWM_Start+0xda>
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	4a15      	ldr	r2, [pc, #84]	@ (80112c4 <HAL_TIM_PWM_Start+0x118>)
 801126e:	4293      	cmp	r3, r2
 8011270:	d009      	beq.n	8011286 <HAL_TIM_PWM_Start+0xda>
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	4a14      	ldr	r2, [pc, #80]	@ (80112c8 <HAL_TIM_PWM_Start+0x11c>)
 8011278:	4293      	cmp	r3, r2
 801127a:	d004      	beq.n	8011286 <HAL_TIM_PWM_Start+0xda>
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	4a12      	ldr	r2, [pc, #72]	@ (80112cc <HAL_TIM_PWM_Start+0x120>)
 8011282:	4293      	cmp	r3, r2
 8011284:	d111      	bne.n	80112aa <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	689b      	ldr	r3, [r3, #8]
 801128c:	2207      	movs	r2, #7
 801128e:	4013      	ands	r3, r2
 8011290:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	2b06      	cmp	r3, #6
 8011296:	d010      	beq.n	80112ba <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	681a      	ldr	r2, [r3, #0]
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	2101      	movs	r1, #1
 80112a4:	430a      	orrs	r2, r1
 80112a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80112a8:	e007      	b.n	80112ba <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	681a      	ldr	r2, [r3, #0]
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	2101      	movs	r1, #1
 80112b6:	430a      	orrs	r2, r1
 80112b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80112ba:	2300      	movs	r3, #0
}
 80112bc:	0018      	movs	r0, r3
 80112be:	46bd      	mov	sp, r7
 80112c0:	b004      	add	sp, #16
 80112c2:	bd80      	pop	{r7, pc}
 80112c4:	40000400 	.word	0x40000400
 80112c8:	40010800 	.word	0x40010800
 80112cc:	40011400 	.word	0x40011400

080112d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b086      	sub	sp, #24
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	60f8      	str	r0, [r7, #12]
 80112d8:	60b9      	str	r1, [r7, #8]
 80112da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80112dc:	2317      	movs	r3, #23
 80112de:	18fb      	adds	r3, r7, r3
 80112e0:	2200      	movs	r2, #0
 80112e2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	2238      	movs	r2, #56	@ 0x38
 80112e8:	5c9b      	ldrb	r3, [r3, r2]
 80112ea:	2b01      	cmp	r3, #1
 80112ec:	d101      	bne.n	80112f2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80112ee:	2302      	movs	r3, #2
 80112f0:	e0ad      	b.n	801144e <HAL_TIM_PWM_ConfigChannel+0x17e>
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	2238      	movs	r2, #56	@ 0x38
 80112f6:	2101      	movs	r1, #1
 80112f8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	2b0c      	cmp	r3, #12
 80112fe:	d100      	bne.n	8011302 <HAL_TIM_PWM_ConfigChannel+0x32>
 8011300:	e076      	b.n	80113f0 <HAL_TIM_PWM_ConfigChannel+0x120>
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	2b0c      	cmp	r3, #12
 8011306:	d900      	bls.n	801130a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8011308:	e095      	b.n	8011436 <HAL_TIM_PWM_ConfigChannel+0x166>
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	2b08      	cmp	r3, #8
 801130e:	d04e      	beq.n	80113ae <HAL_TIM_PWM_ConfigChannel+0xde>
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	2b08      	cmp	r3, #8
 8011314:	d900      	bls.n	8011318 <HAL_TIM_PWM_ConfigChannel+0x48>
 8011316:	e08e      	b.n	8011436 <HAL_TIM_PWM_ConfigChannel+0x166>
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d003      	beq.n	8011326 <HAL_TIM_PWM_ConfigChannel+0x56>
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	2b04      	cmp	r3, #4
 8011322:	d021      	beq.n	8011368 <HAL_TIM_PWM_ConfigChannel+0x98>
 8011324:	e087      	b.n	8011436 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	68ba      	ldr	r2, [r7, #8]
 801132c:	0011      	movs	r1, r2
 801132e:	0018      	movs	r0, r3
 8011330:	f000 f8f2 	bl	8011518 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	699a      	ldr	r2, [r3, #24]
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	2108      	movs	r1, #8
 8011340:	430a      	orrs	r2, r1
 8011342:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	699a      	ldr	r2, [r3, #24]
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	2104      	movs	r1, #4
 8011350:	438a      	bics	r2, r1
 8011352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	6999      	ldr	r1, [r3, #24]
 801135a:	68bb      	ldr	r3, [r7, #8]
 801135c:	68da      	ldr	r2, [r3, #12]
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	430a      	orrs	r2, r1
 8011364:	619a      	str	r2, [r3, #24]
      break;
 8011366:	e06b      	b.n	8011440 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	68ba      	ldr	r2, [r7, #8]
 801136e:	0011      	movs	r1, r2
 8011370:	0018      	movs	r0, r3
 8011372:	f000 f90d 	bl	8011590 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	699a      	ldr	r2, [r3, #24]
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	2180      	movs	r1, #128	@ 0x80
 8011382:	0109      	lsls	r1, r1, #4
 8011384:	430a      	orrs	r2, r1
 8011386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	699a      	ldr	r2, [r3, #24]
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	4931      	ldr	r1, [pc, #196]	@ (8011458 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8011394:	400a      	ands	r2, r1
 8011396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	6999      	ldr	r1, [r3, #24]
 801139e:	68bb      	ldr	r3, [r7, #8]
 80113a0:	68db      	ldr	r3, [r3, #12]
 80113a2:	021a      	lsls	r2, r3, #8
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	430a      	orrs	r2, r1
 80113aa:	619a      	str	r2, [r3, #24]
      break;
 80113ac:	e048      	b.n	8011440 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	68ba      	ldr	r2, [r7, #8]
 80113b4:	0011      	movs	r1, r2
 80113b6:	0018      	movs	r0, r3
 80113b8:	f000 f92c 	bl	8011614 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	69da      	ldr	r2, [r3, #28]
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	2108      	movs	r1, #8
 80113c8:	430a      	orrs	r2, r1
 80113ca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	69da      	ldr	r2, [r3, #28]
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	2104      	movs	r1, #4
 80113d8:	438a      	bics	r2, r1
 80113da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	69d9      	ldr	r1, [r3, #28]
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	68da      	ldr	r2, [r3, #12]
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	430a      	orrs	r2, r1
 80113ec:	61da      	str	r2, [r3, #28]
      break;
 80113ee:	e027      	b.n	8011440 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	68ba      	ldr	r2, [r7, #8]
 80113f6:	0011      	movs	r1, r2
 80113f8:	0018      	movs	r0, r3
 80113fa:	f000 f94b 	bl	8011694 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	69da      	ldr	r2, [r3, #28]
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	2180      	movs	r1, #128	@ 0x80
 801140a:	0109      	lsls	r1, r1, #4
 801140c:	430a      	orrs	r2, r1
 801140e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	69da      	ldr	r2, [r3, #28]
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	490f      	ldr	r1, [pc, #60]	@ (8011458 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801141c:	400a      	ands	r2, r1
 801141e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	69d9      	ldr	r1, [r3, #28]
 8011426:	68bb      	ldr	r3, [r7, #8]
 8011428:	68db      	ldr	r3, [r3, #12]
 801142a:	021a      	lsls	r2, r3, #8
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	430a      	orrs	r2, r1
 8011432:	61da      	str	r2, [r3, #28]
      break;
 8011434:	e004      	b.n	8011440 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8011436:	2317      	movs	r3, #23
 8011438:	18fb      	adds	r3, r7, r3
 801143a:	2201      	movs	r2, #1
 801143c:	701a      	strb	r2, [r3, #0]
      break;
 801143e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	2238      	movs	r2, #56	@ 0x38
 8011444:	2100      	movs	r1, #0
 8011446:	5499      	strb	r1, [r3, r2]

  return status;
 8011448:	2317      	movs	r3, #23
 801144a:	18fb      	adds	r3, r7, r3
 801144c:	781b      	ldrb	r3, [r3, #0]
}
 801144e:	0018      	movs	r0, r3
 8011450:	46bd      	mov	sp, r7
 8011452:	b006      	add	sp, #24
 8011454:	bd80      	pop	{r7, pc}
 8011456:	46c0      	nop			@ (mov r8, r8)
 8011458:	fffffbff 	.word	0xfffffbff

0801145c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b084      	sub	sp, #16
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
 8011464:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801146c:	687a      	ldr	r2, [r7, #4]
 801146e:	2380      	movs	r3, #128	@ 0x80
 8011470:	05db      	lsls	r3, r3, #23
 8011472:	429a      	cmp	r2, r3
 8011474:	d00b      	beq.n	801148e <TIM_Base_SetConfig+0x32>
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	4a23      	ldr	r2, [pc, #140]	@ (8011508 <TIM_Base_SetConfig+0xac>)
 801147a:	4293      	cmp	r3, r2
 801147c:	d007      	beq.n	801148e <TIM_Base_SetConfig+0x32>
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	4a22      	ldr	r2, [pc, #136]	@ (801150c <TIM_Base_SetConfig+0xb0>)
 8011482:	4293      	cmp	r3, r2
 8011484:	d003      	beq.n	801148e <TIM_Base_SetConfig+0x32>
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	4a21      	ldr	r2, [pc, #132]	@ (8011510 <TIM_Base_SetConfig+0xb4>)
 801148a:	4293      	cmp	r3, r2
 801148c:	d108      	bne.n	80114a0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	2270      	movs	r2, #112	@ 0x70
 8011492:	4393      	bics	r3, r2
 8011494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011496:	683b      	ldr	r3, [r7, #0]
 8011498:	685b      	ldr	r3, [r3, #4]
 801149a:	68fa      	ldr	r2, [r7, #12]
 801149c:	4313      	orrs	r3, r2
 801149e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80114a0:	687a      	ldr	r2, [r7, #4]
 80114a2:	2380      	movs	r3, #128	@ 0x80
 80114a4:	05db      	lsls	r3, r3, #23
 80114a6:	429a      	cmp	r2, r3
 80114a8:	d00b      	beq.n	80114c2 <TIM_Base_SetConfig+0x66>
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	4a16      	ldr	r2, [pc, #88]	@ (8011508 <TIM_Base_SetConfig+0xac>)
 80114ae:	4293      	cmp	r3, r2
 80114b0:	d007      	beq.n	80114c2 <TIM_Base_SetConfig+0x66>
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	4a15      	ldr	r2, [pc, #84]	@ (801150c <TIM_Base_SetConfig+0xb0>)
 80114b6:	4293      	cmp	r3, r2
 80114b8:	d003      	beq.n	80114c2 <TIM_Base_SetConfig+0x66>
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	4a14      	ldr	r2, [pc, #80]	@ (8011510 <TIM_Base_SetConfig+0xb4>)
 80114be:	4293      	cmp	r3, r2
 80114c0:	d108      	bne.n	80114d4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	4a13      	ldr	r2, [pc, #76]	@ (8011514 <TIM_Base_SetConfig+0xb8>)
 80114c6:	4013      	ands	r3, r2
 80114c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80114ca:	683b      	ldr	r3, [r7, #0]
 80114cc:	68db      	ldr	r3, [r3, #12]
 80114ce:	68fa      	ldr	r2, [r7, #12]
 80114d0:	4313      	orrs	r3, r2
 80114d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	2280      	movs	r2, #128	@ 0x80
 80114d8:	4393      	bics	r3, r2
 80114da:	001a      	movs	r2, r3
 80114dc:	683b      	ldr	r3, [r7, #0]
 80114de:	691b      	ldr	r3, [r3, #16]
 80114e0:	4313      	orrs	r3, r2
 80114e2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	68fa      	ldr	r2, [r7, #12]
 80114e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	689a      	ldr	r2, [r3, #8]
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80114f2:	683b      	ldr	r3, [r7, #0]
 80114f4:	681a      	ldr	r2, [r3, #0]
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	2201      	movs	r2, #1
 80114fe:	615a      	str	r2, [r3, #20]
}
 8011500:	46c0      	nop			@ (mov r8, r8)
 8011502:	46bd      	mov	sp, r7
 8011504:	b004      	add	sp, #16
 8011506:	bd80      	pop	{r7, pc}
 8011508:	40000400 	.word	0x40000400
 801150c:	40010800 	.word	0x40010800
 8011510:	40011400 	.word	0x40011400
 8011514:	fffffcff 	.word	0xfffffcff

08011518 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b086      	sub	sp, #24
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
 8011520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	6a1b      	ldr	r3, [r3, #32]
 8011526:	2201      	movs	r2, #1
 8011528:	4393      	bics	r3, r2
 801152a:	001a      	movs	r2, r3
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	6a1b      	ldr	r3, [r3, #32]
 8011534:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	685b      	ldr	r3, [r3, #4]
 801153a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	699b      	ldr	r3, [r3, #24]
 8011540:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	2270      	movs	r2, #112	@ 0x70
 8011546:	4393      	bics	r3, r2
 8011548:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	2203      	movs	r2, #3
 801154e:	4393      	bics	r3, r2
 8011550:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	68fa      	ldr	r2, [r7, #12]
 8011558:	4313      	orrs	r3, r2
 801155a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801155c:	697b      	ldr	r3, [r7, #20]
 801155e:	2202      	movs	r2, #2
 8011560:	4393      	bics	r3, r2
 8011562:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	689b      	ldr	r3, [r3, #8]
 8011568:	697a      	ldr	r2, [r7, #20]
 801156a:	4313      	orrs	r3, r2
 801156c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	693a      	ldr	r2, [r7, #16]
 8011572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	68fa      	ldr	r2, [r7, #12]
 8011578:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	685a      	ldr	r2, [r3, #4]
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	697a      	ldr	r2, [r7, #20]
 8011586:	621a      	str	r2, [r3, #32]
}
 8011588:	46c0      	nop			@ (mov r8, r8)
 801158a:	46bd      	mov	sp, r7
 801158c:	b006      	add	sp, #24
 801158e:	bd80      	pop	{r7, pc}

08011590 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b086      	sub	sp, #24
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
 8011598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	6a1b      	ldr	r3, [r3, #32]
 801159e:	2210      	movs	r2, #16
 80115a0:	4393      	bics	r3, r2
 80115a2:	001a      	movs	r2, r3
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	6a1b      	ldr	r3, [r3, #32]
 80115ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	685b      	ldr	r3, [r3, #4]
 80115b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	699b      	ldr	r3, [r3, #24]
 80115b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	4a13      	ldr	r2, [pc, #76]	@ (801160c <TIM_OC2_SetConfig+0x7c>)
 80115be:	4013      	ands	r3, r2
 80115c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	4a12      	ldr	r2, [pc, #72]	@ (8011610 <TIM_OC2_SetConfig+0x80>)
 80115c6:	4013      	ands	r3, r2
 80115c8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	021b      	lsls	r3, r3, #8
 80115d0:	68fa      	ldr	r2, [r7, #12]
 80115d2:	4313      	orrs	r3, r2
 80115d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80115d6:	697b      	ldr	r3, [r7, #20]
 80115d8:	2220      	movs	r2, #32
 80115da:	4393      	bics	r3, r2
 80115dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80115de:	683b      	ldr	r3, [r7, #0]
 80115e0:	689b      	ldr	r3, [r3, #8]
 80115e2:	011b      	lsls	r3, r3, #4
 80115e4:	697a      	ldr	r2, [r7, #20]
 80115e6:	4313      	orrs	r3, r2
 80115e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	693a      	ldr	r2, [r7, #16]
 80115ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	68fa      	ldr	r2, [r7, #12]
 80115f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80115f6:	683b      	ldr	r3, [r7, #0]
 80115f8:	685a      	ldr	r2, [r3, #4]
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	697a      	ldr	r2, [r7, #20]
 8011602:	621a      	str	r2, [r3, #32]
}
 8011604:	46c0      	nop			@ (mov r8, r8)
 8011606:	46bd      	mov	sp, r7
 8011608:	b006      	add	sp, #24
 801160a:	bd80      	pop	{r7, pc}
 801160c:	ffff8fff 	.word	0xffff8fff
 8011610:	fffffcff 	.word	0xfffffcff

08011614 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b086      	sub	sp, #24
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
 801161c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	6a1b      	ldr	r3, [r3, #32]
 8011622:	4a1a      	ldr	r2, [pc, #104]	@ (801168c <TIM_OC3_SetConfig+0x78>)
 8011624:	401a      	ands	r2, r3
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6a1b      	ldr	r3, [r3, #32]
 801162e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	685b      	ldr	r3, [r3, #4]
 8011634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	69db      	ldr	r3, [r3, #28]
 801163a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	2270      	movs	r2, #112	@ 0x70
 8011640:	4393      	bics	r3, r2
 8011642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	2203      	movs	r2, #3
 8011648:	4393      	bics	r3, r2
 801164a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801164c:	683b      	ldr	r3, [r7, #0]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	68fa      	ldr	r2, [r7, #12]
 8011652:	4313      	orrs	r3, r2
 8011654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011656:	697b      	ldr	r3, [r7, #20]
 8011658:	4a0d      	ldr	r2, [pc, #52]	@ (8011690 <TIM_OC3_SetConfig+0x7c>)
 801165a:	4013      	ands	r3, r2
 801165c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801165e:	683b      	ldr	r3, [r7, #0]
 8011660:	689b      	ldr	r3, [r3, #8]
 8011662:	021b      	lsls	r3, r3, #8
 8011664:	697a      	ldr	r2, [r7, #20]
 8011666:	4313      	orrs	r3, r2
 8011668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	693a      	ldr	r2, [r7, #16]
 801166e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	68fa      	ldr	r2, [r7, #12]
 8011674:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	685a      	ldr	r2, [r3, #4]
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	697a      	ldr	r2, [r7, #20]
 8011682:	621a      	str	r2, [r3, #32]
}
 8011684:	46c0      	nop			@ (mov r8, r8)
 8011686:	46bd      	mov	sp, r7
 8011688:	b006      	add	sp, #24
 801168a:	bd80      	pop	{r7, pc}
 801168c:	fffffeff 	.word	0xfffffeff
 8011690:	fffffdff 	.word	0xfffffdff

08011694 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b086      	sub	sp, #24
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
 801169c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	6a1b      	ldr	r3, [r3, #32]
 80116a2:	4a1b      	ldr	r2, [pc, #108]	@ (8011710 <TIM_OC4_SetConfig+0x7c>)
 80116a4:	401a      	ands	r2, r3
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	6a1b      	ldr	r3, [r3, #32]
 80116ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	685b      	ldr	r3, [r3, #4]
 80116b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	69db      	ldr	r3, [r3, #28]
 80116ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	4a15      	ldr	r2, [pc, #84]	@ (8011714 <TIM_OC4_SetConfig+0x80>)
 80116c0:	4013      	ands	r3, r2
 80116c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	4a14      	ldr	r2, [pc, #80]	@ (8011718 <TIM_OC4_SetConfig+0x84>)
 80116c8:	4013      	ands	r3, r2
 80116ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80116cc:	683b      	ldr	r3, [r7, #0]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	021b      	lsls	r3, r3, #8
 80116d2:	68fa      	ldr	r2, [r7, #12]
 80116d4:	4313      	orrs	r3, r2
 80116d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80116d8:	697b      	ldr	r3, [r7, #20]
 80116da:	4a10      	ldr	r2, [pc, #64]	@ (801171c <TIM_OC4_SetConfig+0x88>)
 80116dc:	4013      	ands	r3, r2
 80116de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80116e0:	683b      	ldr	r3, [r7, #0]
 80116e2:	689b      	ldr	r3, [r3, #8]
 80116e4:	031b      	lsls	r3, r3, #12
 80116e6:	697a      	ldr	r2, [r7, #20]
 80116e8:	4313      	orrs	r3, r2
 80116ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	693a      	ldr	r2, [r7, #16]
 80116f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	68fa      	ldr	r2, [r7, #12]
 80116f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80116f8:	683b      	ldr	r3, [r7, #0]
 80116fa:	685a      	ldr	r2, [r3, #4]
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	697a      	ldr	r2, [r7, #20]
 8011704:	621a      	str	r2, [r3, #32]
}
 8011706:	46c0      	nop			@ (mov r8, r8)
 8011708:	46bd      	mov	sp, r7
 801170a:	b006      	add	sp, #24
 801170c:	bd80      	pop	{r7, pc}
 801170e:	46c0      	nop			@ (mov r8, r8)
 8011710:	ffffefff 	.word	0xffffefff
 8011714:	ffff8fff 	.word	0xffff8fff
 8011718:	fffffcff 	.word	0xfffffcff
 801171c:	ffffdfff 	.word	0xffffdfff

08011720 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b086      	sub	sp, #24
 8011724:	af00      	add	r7, sp, #0
 8011726:	60f8      	str	r0, [r7, #12]
 8011728:	60b9      	str	r1, [r7, #8]
 801172a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801172c:	68bb      	ldr	r3, [r7, #8]
 801172e:	221f      	movs	r2, #31
 8011730:	4013      	ands	r3, r2
 8011732:	2201      	movs	r2, #1
 8011734:	409a      	lsls	r2, r3
 8011736:	0013      	movs	r3, r2
 8011738:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	6a1b      	ldr	r3, [r3, #32]
 801173e:	697a      	ldr	r2, [r7, #20]
 8011740:	43d2      	mvns	r2, r2
 8011742:	401a      	ands	r2, r3
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	6a1a      	ldr	r2, [r3, #32]
 801174c:	68bb      	ldr	r3, [r7, #8]
 801174e:	211f      	movs	r1, #31
 8011750:	400b      	ands	r3, r1
 8011752:	6879      	ldr	r1, [r7, #4]
 8011754:	4099      	lsls	r1, r3
 8011756:	000b      	movs	r3, r1
 8011758:	431a      	orrs	r2, r3
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	621a      	str	r2, [r3, #32]
}
 801175e:	46c0      	nop			@ (mov r8, r8)
 8011760:	46bd      	mov	sp, r7
 8011762:	b006      	add	sp, #24
 8011764:	bd80      	pop	{r7, pc}
	...

08011768 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b084      	sub	sp, #16
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
 8011770:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	2238      	movs	r2, #56	@ 0x38
 8011776:	5c9b      	ldrb	r3, [r3, r2]
 8011778:	2b01      	cmp	r3, #1
 801177a:	d101      	bne.n	8011780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801177c:	2302      	movs	r3, #2
 801177e:	e047      	b.n	8011810 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	2238      	movs	r2, #56	@ 0x38
 8011784:	2101      	movs	r1, #1
 8011786:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2239      	movs	r2, #57	@ 0x39
 801178c:	2102      	movs	r1, #2
 801178e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	685b      	ldr	r3, [r3, #4]
 8011796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	689b      	ldr	r3, [r3, #8]
 801179e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	2270      	movs	r2, #112	@ 0x70
 80117a4:	4393      	bics	r3, r2
 80117a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	68fa      	ldr	r2, [r7, #12]
 80117ae:	4313      	orrs	r3, r2
 80117b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	68fa      	ldr	r2, [r7, #12]
 80117b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	681a      	ldr	r2, [r3, #0]
 80117be:	2380      	movs	r3, #128	@ 0x80
 80117c0:	05db      	lsls	r3, r3, #23
 80117c2:	429a      	cmp	r2, r3
 80117c4:	d00e      	beq.n	80117e4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	4a13      	ldr	r2, [pc, #76]	@ (8011818 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80117cc:	4293      	cmp	r3, r2
 80117ce:	d009      	beq.n	80117e4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	4a11      	ldr	r2, [pc, #68]	@ (801181c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80117d6:	4293      	cmp	r3, r2
 80117d8:	d004      	beq.n	80117e4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	4a10      	ldr	r2, [pc, #64]	@ (8011820 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80117e0:	4293      	cmp	r3, r2
 80117e2:	d10c      	bne.n	80117fe <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80117e4:	68bb      	ldr	r3, [r7, #8]
 80117e6:	2280      	movs	r2, #128	@ 0x80
 80117e8:	4393      	bics	r3, r2
 80117ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80117ec:	683b      	ldr	r3, [r7, #0]
 80117ee:	685b      	ldr	r3, [r3, #4]
 80117f0:	68ba      	ldr	r2, [r7, #8]
 80117f2:	4313      	orrs	r3, r2
 80117f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	68ba      	ldr	r2, [r7, #8]
 80117fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	2239      	movs	r2, #57	@ 0x39
 8011802:	2101      	movs	r1, #1
 8011804:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	2238      	movs	r2, #56	@ 0x38
 801180a:	2100      	movs	r1, #0
 801180c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801180e:	2300      	movs	r3, #0
}
 8011810:	0018      	movs	r0, r3
 8011812:	46bd      	mov	sp, r7
 8011814:	b004      	add	sp, #16
 8011816:	bd80      	pop	{r7, pc}
 8011818:	40000400 	.word	0x40000400
 801181c:	40010800 	.word	0x40010800
 8011820:	40011400 	.word	0x40011400

08011824 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b082      	sub	sp, #8
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
 801182c:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	2238      	movs	r2, #56	@ 0x38
 8011832:	5c9b      	ldrb	r3, [r3, r2]
 8011834:	2b01      	cmp	r3, #1
 8011836:	d101      	bne.n	801183c <HAL_TIMEx_RemapConfig+0x18>
 8011838:	2302      	movs	r3, #2
 801183a:	e00c      	b.n	8011856 <HAL_TIMEx_RemapConfig+0x32>
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	2238      	movs	r2, #56	@ 0x38
 8011840:	2101      	movs	r1, #1
 8011842:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	683a      	ldr	r2, [r7, #0]
 801184a:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	2238      	movs	r2, #56	@ 0x38
 8011850:	2100      	movs	r1, #0
 8011852:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011854:	2300      	movs	r3, #0
}
 8011856:	0018      	movs	r0, r3
 8011858:	46bd      	mov	sp, r7
 801185a:	b002      	add	sp, #8
 801185c:	bd80      	pop	{r7, pc}
	...

08011860 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b082      	sub	sp, #8
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d101      	bne.n	8011872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801186e:	2301      	movs	r3, #1
 8011870:	e053      	b.n	801191a <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011876:	2b00      	cmp	r3, #0
 8011878:	d116      	bne.n	80118a8 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	2278      	movs	r2, #120	@ 0x78
 801187e:	2100      	movs	r1, #0
 8011880:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	0018      	movs	r0, r3
 8011886:	f000 fd07 	bl	8012298 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	22b0      	movs	r2, #176	@ 0xb0
 801188e:	589b      	ldr	r3, [r3, r2]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d103      	bne.n	801189c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	21b0      	movs	r1, #176	@ 0xb0
 8011898:	4a22      	ldr	r2, [pc, #136]	@ (8011924 <HAL_UART_Init+0xc4>)
 801189a:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	22b0      	movs	r2, #176	@ 0xb0
 80118a0:	589b      	ldr	r3, [r3, r2]
 80118a2:	687a      	ldr	r2, [r7, #4]
 80118a4:	0010      	movs	r0, r2
 80118a6:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	2224      	movs	r2, #36	@ 0x24
 80118ac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	681a      	ldr	r2, [r3, #0]
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	2101      	movs	r1, #1
 80118ba:	438a      	bics	r2, r1
 80118bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	0018      	movs	r0, r3
 80118c2:	f000 fd2d 	bl	8012320 <UART_SetConfig>
 80118c6:	0003      	movs	r3, r0
 80118c8:	2b01      	cmp	r3, #1
 80118ca:	d101      	bne.n	80118d0 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 80118cc:	2301      	movs	r3, #1
 80118ce:	e024      	b.n	801191a <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d003      	beq.n	80118e0 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	0018      	movs	r0, r3
 80118dc:	f000 ffbe 	bl	801285c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	685a      	ldr	r2, [r3, #4]
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	490f      	ldr	r1, [pc, #60]	@ (8011928 <HAL_UART_Init+0xc8>)
 80118ec:	400a      	ands	r2, r1
 80118ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	689a      	ldr	r2, [r3, #8]
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	212a      	movs	r1, #42	@ 0x2a
 80118fc:	438a      	bics	r2, r1
 80118fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	681a      	ldr	r2, [r3, #0]
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	2101      	movs	r1, #1
 801190c:	430a      	orrs	r2, r1
 801190e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	0018      	movs	r0, r3
 8011914:	f001 f856 	bl	80129c4 <UART_CheckIdleState>
 8011918:	0003      	movs	r3, r0
}
 801191a:	0018      	movs	r0, r3
 801191c:	46bd      	mov	sp, r7
 801191e:	b002      	add	sp, #8
 8011920:	bd80      	pop	{r7, pc}
 8011922:	46c0      	nop			@ (mov r8, r8)
 8011924:	08009821 	.word	0x08009821
 8011928:	ffffb7ff 	.word	0xffffb7ff

0801192c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b08a      	sub	sp, #40	@ 0x28
 8011930:	af02      	add	r7, sp, #8
 8011932:	60f8      	str	r0, [r7, #12]
 8011934:	60b9      	str	r1, [r7, #8]
 8011936:	603b      	str	r3, [r7, #0]
 8011938:	1dbb      	adds	r3, r7, #6
 801193a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011940:	2b20      	cmp	r3, #32
 8011942:	d000      	beq.n	8011946 <HAL_UART_Transmit+0x1a>
 8011944:	e08c      	b.n	8011a60 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8011946:	68bb      	ldr	r3, [r7, #8]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d003      	beq.n	8011954 <HAL_UART_Transmit+0x28>
 801194c:	1dbb      	adds	r3, r7, #6
 801194e:	881b      	ldrh	r3, [r3, #0]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d101      	bne.n	8011958 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8011954:	2301      	movs	r3, #1
 8011956:	e084      	b.n	8011a62 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	689a      	ldr	r2, [r3, #8]
 801195c:	2380      	movs	r3, #128	@ 0x80
 801195e:	015b      	lsls	r3, r3, #5
 8011960:	429a      	cmp	r2, r3
 8011962:	d109      	bne.n	8011978 <HAL_UART_Transmit+0x4c>
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	691b      	ldr	r3, [r3, #16]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d105      	bne.n	8011978 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801196c:	68bb      	ldr	r3, [r7, #8]
 801196e:	2201      	movs	r2, #1
 8011970:	4013      	ands	r3, r2
 8011972:	d001      	beq.n	8011978 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8011974:	2301      	movs	r3, #1
 8011976:	e074      	b.n	8011a62 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	2284      	movs	r2, #132	@ 0x84
 801197c:	2100      	movs	r1, #0
 801197e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	2221      	movs	r2, #33	@ 0x21
 8011984:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011986:	f7f8 fc57 	bl	800a238 <HAL_GetTick>
 801198a:	0003      	movs	r3, r0
 801198c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	1dba      	adds	r2, r7, #6
 8011992:	2150      	movs	r1, #80	@ 0x50
 8011994:	8812      	ldrh	r2, [r2, #0]
 8011996:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	1dba      	adds	r2, r7, #6
 801199c:	2152      	movs	r1, #82	@ 0x52
 801199e:	8812      	ldrh	r2, [r2, #0]
 80119a0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	689a      	ldr	r2, [r3, #8]
 80119a6:	2380      	movs	r3, #128	@ 0x80
 80119a8:	015b      	lsls	r3, r3, #5
 80119aa:	429a      	cmp	r2, r3
 80119ac:	d108      	bne.n	80119c0 <HAL_UART_Transmit+0x94>
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	691b      	ldr	r3, [r3, #16]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d104      	bne.n	80119c0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80119b6:	2300      	movs	r3, #0
 80119b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80119ba:	68bb      	ldr	r3, [r7, #8]
 80119bc:	61bb      	str	r3, [r7, #24]
 80119be:	e003      	b.n	80119c8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80119c0:	68bb      	ldr	r3, [r7, #8]
 80119c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80119c4:	2300      	movs	r3, #0
 80119c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80119c8:	e02f      	b.n	8011a2a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80119ca:	697a      	ldr	r2, [r7, #20]
 80119cc:	68f8      	ldr	r0, [r7, #12]
 80119ce:	683b      	ldr	r3, [r7, #0]
 80119d0:	9300      	str	r3, [sp, #0]
 80119d2:	0013      	movs	r3, r2
 80119d4:	2200      	movs	r2, #0
 80119d6:	2180      	movs	r1, #128	@ 0x80
 80119d8:	f001 f89c 	bl	8012b14 <UART_WaitOnFlagUntilTimeout>
 80119dc:	1e03      	subs	r3, r0, #0
 80119de:	d004      	beq.n	80119ea <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	2220      	movs	r2, #32
 80119e4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80119e6:	2303      	movs	r3, #3
 80119e8:	e03b      	b.n	8011a62 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80119ea:	69fb      	ldr	r3, [r7, #28]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d10b      	bne.n	8011a08 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80119f0:	69bb      	ldr	r3, [r7, #24]
 80119f2:	881b      	ldrh	r3, [r3, #0]
 80119f4:	001a      	movs	r2, r3
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	05d2      	lsls	r2, r2, #23
 80119fc:	0dd2      	lsrs	r2, r2, #23
 80119fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8011a00:	69bb      	ldr	r3, [r7, #24]
 8011a02:	3302      	adds	r3, #2
 8011a04:	61bb      	str	r3, [r7, #24]
 8011a06:	e007      	b.n	8011a18 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011a08:	69fb      	ldr	r3, [r7, #28]
 8011a0a:	781a      	ldrb	r2, [r3, #0]
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8011a12:	69fb      	ldr	r3, [r7, #28]
 8011a14:	3301      	adds	r3, #1
 8011a16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	2252      	movs	r2, #82	@ 0x52
 8011a1c:	5a9b      	ldrh	r3, [r3, r2]
 8011a1e:	b29b      	uxth	r3, r3
 8011a20:	3b01      	subs	r3, #1
 8011a22:	b299      	uxth	r1, r3
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	2252      	movs	r2, #82	@ 0x52
 8011a28:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	2252      	movs	r2, #82	@ 0x52
 8011a2e:	5a9b      	ldrh	r3, [r3, r2]
 8011a30:	b29b      	uxth	r3, r3
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d1c9      	bne.n	80119ca <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011a36:	697a      	ldr	r2, [r7, #20]
 8011a38:	68f8      	ldr	r0, [r7, #12]
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	9300      	str	r3, [sp, #0]
 8011a3e:	0013      	movs	r3, r2
 8011a40:	2200      	movs	r2, #0
 8011a42:	2140      	movs	r1, #64	@ 0x40
 8011a44:	f001 f866 	bl	8012b14 <UART_WaitOnFlagUntilTimeout>
 8011a48:	1e03      	subs	r3, r0, #0
 8011a4a:	d004      	beq.n	8011a56 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	2220      	movs	r2, #32
 8011a50:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8011a52:	2303      	movs	r3, #3
 8011a54:	e005      	b.n	8011a62 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	2220      	movs	r2, #32
 8011a5a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	e000      	b.n	8011a62 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8011a60:	2302      	movs	r3, #2
  }
}
 8011a62:	0018      	movs	r0, r3
 8011a64:	46bd      	mov	sp, r7
 8011a66:	b008      	add	sp, #32
 8011a68:	bd80      	pop	{r7, pc}
	...

08011a6c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b088      	sub	sp, #32
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	60f8      	str	r0, [r7, #12]
 8011a74:	60b9      	str	r1, [r7, #8]
 8011a76:	1dbb      	adds	r3, r7, #6
 8011a78:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011a7e:	2b20      	cmp	r3, #32
 8011a80:	d000      	beq.n	8011a84 <HAL_UART_Transmit_DMA+0x18>
 8011a82:	e077      	b.n	8011b74 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8011a84:	68bb      	ldr	r3, [r7, #8]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d003      	beq.n	8011a92 <HAL_UART_Transmit_DMA+0x26>
 8011a8a:	1dbb      	adds	r3, r7, #6
 8011a8c:	881b      	ldrh	r3, [r3, #0]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d101      	bne.n	8011a96 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8011a92:	2301      	movs	r3, #1
 8011a94:	e06f      	b.n	8011b76 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	689a      	ldr	r2, [r3, #8]
 8011a9a:	2380      	movs	r3, #128	@ 0x80
 8011a9c:	015b      	lsls	r3, r3, #5
 8011a9e:	429a      	cmp	r2, r3
 8011aa0:	d109      	bne.n	8011ab6 <HAL_UART_Transmit_DMA+0x4a>
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	691b      	ldr	r3, [r3, #16]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d105      	bne.n	8011ab6 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8011aaa:	68bb      	ldr	r3, [r7, #8]
 8011aac:	2201      	movs	r2, #1
 8011aae:	4013      	ands	r3, r2
 8011ab0:	d001      	beq.n	8011ab6 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8011ab2:	2301      	movs	r3, #1
 8011ab4:	e05f      	b.n	8011b76 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	68ba      	ldr	r2, [r7, #8]
 8011aba:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	1dba      	adds	r2, r7, #6
 8011ac0:	2150      	movs	r1, #80	@ 0x50
 8011ac2:	8812      	ldrh	r2, [r2, #0]
 8011ac4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	1dba      	adds	r2, r7, #6
 8011aca:	2152      	movs	r1, #82	@ 0x52
 8011acc:	8812      	ldrh	r2, [r2, #0]
 8011ace:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	2284      	movs	r2, #132	@ 0x84
 8011ad4:	2100      	movs	r1, #0
 8011ad6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	2221      	movs	r2, #33	@ 0x21
 8011adc:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d027      	beq.n	8011b36 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011aea:	4a25      	ldr	r2, [pc, #148]	@ (8011b80 <HAL_UART_Transmit_DMA+0x114>)
 8011aec:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011af2:	4a24      	ldr	r2, [pc, #144]	@ (8011b84 <HAL_UART_Transmit_DMA+0x118>)
 8011af4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011afa:	4a23      	ldr	r2, [pc, #140]	@ (8011b88 <HAL_UART_Transmit_DMA+0x11c>)
 8011afc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011b02:	2200      	movs	r2, #0
 8011b04:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011b0e:	0019      	movs	r1, r3
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	3328      	adds	r3, #40	@ 0x28
 8011b16:	001a      	movs	r2, r3
 8011b18:	1dbb      	adds	r3, r7, #6
 8011b1a:	881b      	ldrh	r3, [r3, #0]
 8011b1c:	f7f9 f90a 	bl	800ad34 <HAL_DMA_Start_IT>
 8011b20:	1e03      	subs	r3, r0, #0
 8011b22:	d008      	beq.n	8011b36 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	2284      	movs	r2, #132	@ 0x84
 8011b28:	2110      	movs	r1, #16
 8011b2a:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	2220      	movs	r2, #32
 8011b30:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8011b32:	2301      	movs	r3, #1
 8011b34:	e01f      	b.n	8011b76 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	2240      	movs	r2, #64	@ 0x40
 8011b3c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011b3e:	f3ef 8310 	mrs	r3, PRIMASK
 8011b42:	613b      	str	r3, [r7, #16]
  return(result);
 8011b44:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011b46:	61fb      	str	r3, [r7, #28]
 8011b48:	2301      	movs	r3, #1
 8011b4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011b4c:	697b      	ldr	r3, [r7, #20]
 8011b4e:	f383 8810 	msr	PRIMASK, r3
}
 8011b52:	46c0      	nop			@ (mov r8, r8)
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	689a      	ldr	r2, [r3, #8]
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	2180      	movs	r1, #128	@ 0x80
 8011b60:	430a      	orrs	r2, r1
 8011b62:	609a      	str	r2, [r3, #8]
 8011b64:	69fb      	ldr	r3, [r7, #28]
 8011b66:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011b68:	69bb      	ldr	r3, [r7, #24]
 8011b6a:	f383 8810 	msr	PRIMASK, r3
}
 8011b6e:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8011b70:	2300      	movs	r3, #0
 8011b72:	e000      	b.n	8011b76 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8011b74:	2302      	movs	r3, #2
  }
}
 8011b76:	0018      	movs	r0, r3
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	b008      	add	sp, #32
 8011b7c:	bd80      	pop	{r7, pc}
 8011b7e:	46c0      	nop			@ (mov r8, r8)
 8011b80:	08012e39 	.word	0x08012e39
 8011b84:	08012ed5 	.word	0x08012ed5
 8011b88:	08013075 	.word	0x08013075

08011b8c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b088      	sub	sp, #32
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	60f8      	str	r0, [r7, #12]
 8011b94:	60b9      	str	r1, [r7, #8]
 8011b96:	1dbb      	adds	r3, r7, #6
 8011b98:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	2280      	movs	r2, #128	@ 0x80
 8011b9e:	589b      	ldr	r3, [r3, r2]
 8011ba0:	2b20      	cmp	r3, #32
 8011ba2:	d14a      	bne.n	8011c3a <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8011ba4:	68bb      	ldr	r3, [r7, #8]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d003      	beq.n	8011bb2 <HAL_UART_Receive_DMA+0x26>
 8011baa:	1dbb      	adds	r3, r7, #6
 8011bac:	881b      	ldrh	r3, [r3, #0]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d101      	bne.n	8011bb6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8011bb2:	2301      	movs	r3, #1
 8011bb4:	e042      	b.n	8011c3c <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	689a      	ldr	r2, [r3, #8]
 8011bba:	2380      	movs	r3, #128	@ 0x80
 8011bbc:	015b      	lsls	r3, r3, #5
 8011bbe:	429a      	cmp	r2, r3
 8011bc0:	d109      	bne.n	8011bd6 <HAL_UART_Receive_DMA+0x4a>
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	691b      	ldr	r3, [r3, #16]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d105      	bne.n	8011bd6 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8011bca:	68bb      	ldr	r3, [r7, #8]
 8011bcc:	2201      	movs	r2, #1
 8011bce:	4013      	ands	r3, r2
 8011bd0:	d001      	beq.n	8011bd6 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8011bd2:	2301      	movs	r3, #1
 8011bd4:	e032      	b.n	8011c3c <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	2200      	movs	r2, #0
 8011bda:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	4a18      	ldr	r2, [pc, #96]	@ (8011c44 <HAL_UART_Receive_DMA+0xb8>)
 8011be2:	4293      	cmp	r3, r2
 8011be4:	d020      	beq.n	8011c28 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	685a      	ldr	r2, [r3, #4]
 8011bec:	2380      	movs	r3, #128	@ 0x80
 8011bee:	041b      	lsls	r3, r3, #16
 8011bf0:	4013      	ands	r3, r2
 8011bf2:	d019      	beq.n	8011c28 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8011bf8:	613b      	str	r3, [r7, #16]
  return(result);
 8011bfa:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011bfc:	61fb      	str	r3, [r7, #28]
 8011bfe:	2301      	movs	r3, #1
 8011c00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c02:	697b      	ldr	r3, [r7, #20]
 8011c04:	f383 8810 	msr	PRIMASK, r3
}
 8011c08:	46c0      	nop			@ (mov r8, r8)
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	681a      	ldr	r2, [r3, #0]
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	2180      	movs	r1, #128	@ 0x80
 8011c16:	04c9      	lsls	r1, r1, #19
 8011c18:	430a      	orrs	r2, r1
 8011c1a:	601a      	str	r2, [r3, #0]
 8011c1c:	69fb      	ldr	r3, [r7, #28]
 8011c1e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c20:	69bb      	ldr	r3, [r7, #24]
 8011c22:	f383 8810 	msr	PRIMASK, r3
}
 8011c26:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8011c28:	1dbb      	adds	r3, r7, #6
 8011c2a:	881a      	ldrh	r2, [r3, #0]
 8011c2c:	68b9      	ldr	r1, [r7, #8]
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	0018      	movs	r0, r3
 8011c32:	f000 ffd9 	bl	8012be8 <UART_Start_Receive_DMA>
 8011c36:	0003      	movs	r3, r0
 8011c38:	e000      	b.n	8011c3c <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8011c3a:	2302      	movs	r3, #2
  }
}
 8011c3c:	0018      	movs	r0, r3
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	b008      	add	sp, #32
 8011c42:	bd80      	pop	{r7, pc}
 8011c44:	40004800 	.word	0x40004800

08011c48 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011c48:	b590      	push	{r4, r7, lr}
 8011c4a:	b0ab      	sub	sp, #172	@ 0xac
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	69db      	ldr	r3, [r3, #28]
 8011c56:	22a4      	movs	r2, #164	@ 0xa4
 8011c58:	18b9      	adds	r1, r7, r2
 8011c5a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	20a0      	movs	r0, #160	@ 0xa0
 8011c64:	1839      	adds	r1, r7, r0
 8011c66:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	689b      	ldr	r3, [r3, #8]
 8011c6e:	219c      	movs	r1, #156	@ 0x9c
 8011c70:	1879      	adds	r1, r7, r1
 8011c72:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011c74:	0011      	movs	r1, r2
 8011c76:	18bb      	adds	r3, r7, r2
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	4a9c      	ldr	r2, [pc, #624]	@ (8011eec <HAL_UART_IRQHandler+0x2a4>)
 8011c7c:	4013      	ands	r3, r2
 8011c7e:	2298      	movs	r2, #152	@ 0x98
 8011c80:	18bc      	adds	r4, r7, r2
 8011c82:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8011c84:	18bb      	adds	r3, r7, r2
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d114      	bne.n	8011cb6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8011c8c:	187b      	adds	r3, r7, r1
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	2220      	movs	r2, #32
 8011c92:	4013      	ands	r3, r2
 8011c94:	d00f      	beq.n	8011cb6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011c96:	183b      	adds	r3, r7, r0
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	2220      	movs	r2, #32
 8011c9c:	4013      	ands	r3, r2
 8011c9e:	d00a      	beq.n	8011cb6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d100      	bne.n	8011caa <HAL_UART_IRQHandler+0x62>
 8011ca8:	e2aa      	b.n	8012200 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011cae:	687a      	ldr	r2, [r7, #4]
 8011cb0:	0010      	movs	r0, r2
 8011cb2:	4798      	blx	r3
      }
      return;
 8011cb4:	e2a4      	b.n	8012200 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8011cb6:	2398      	movs	r3, #152	@ 0x98
 8011cb8:	18fb      	adds	r3, r7, r3
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d100      	bne.n	8011cc2 <HAL_UART_IRQHandler+0x7a>
 8011cc0:	e11a      	b.n	8011ef8 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8011cc2:	239c      	movs	r3, #156	@ 0x9c
 8011cc4:	18fb      	adds	r3, r7, r3
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	2201      	movs	r2, #1
 8011cca:	4013      	ands	r3, r2
 8011ccc:	d106      	bne.n	8011cdc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8011cce:	23a0      	movs	r3, #160	@ 0xa0
 8011cd0:	18fb      	adds	r3, r7, r3
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	4a86      	ldr	r2, [pc, #536]	@ (8011ef0 <HAL_UART_IRQHandler+0x2a8>)
 8011cd6:	4013      	ands	r3, r2
 8011cd8:	d100      	bne.n	8011cdc <HAL_UART_IRQHandler+0x94>
 8011cda:	e10d      	b.n	8011ef8 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011cdc:	23a4      	movs	r3, #164	@ 0xa4
 8011cde:	18fb      	adds	r3, r7, r3
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	2201      	movs	r2, #1
 8011ce4:	4013      	ands	r3, r2
 8011ce6:	d012      	beq.n	8011d0e <HAL_UART_IRQHandler+0xc6>
 8011ce8:	23a0      	movs	r3, #160	@ 0xa0
 8011cea:	18fb      	adds	r3, r7, r3
 8011cec:	681a      	ldr	r2, [r3, #0]
 8011cee:	2380      	movs	r3, #128	@ 0x80
 8011cf0:	005b      	lsls	r3, r3, #1
 8011cf2:	4013      	ands	r3, r2
 8011cf4:	d00b      	beq.n	8011d0e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	2201      	movs	r2, #1
 8011cfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	2284      	movs	r2, #132	@ 0x84
 8011d02:	589b      	ldr	r3, [r3, r2]
 8011d04:	2201      	movs	r2, #1
 8011d06:	431a      	orrs	r2, r3
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2184      	movs	r1, #132	@ 0x84
 8011d0c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011d0e:	23a4      	movs	r3, #164	@ 0xa4
 8011d10:	18fb      	adds	r3, r7, r3
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	2202      	movs	r2, #2
 8011d16:	4013      	ands	r3, r2
 8011d18:	d011      	beq.n	8011d3e <HAL_UART_IRQHandler+0xf6>
 8011d1a:	239c      	movs	r3, #156	@ 0x9c
 8011d1c:	18fb      	adds	r3, r7, r3
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	2201      	movs	r2, #1
 8011d22:	4013      	ands	r3, r2
 8011d24:	d00b      	beq.n	8011d3e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	2202      	movs	r2, #2
 8011d2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	2284      	movs	r2, #132	@ 0x84
 8011d32:	589b      	ldr	r3, [r3, r2]
 8011d34:	2204      	movs	r2, #4
 8011d36:	431a      	orrs	r2, r3
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	2184      	movs	r1, #132	@ 0x84
 8011d3c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011d3e:	23a4      	movs	r3, #164	@ 0xa4
 8011d40:	18fb      	adds	r3, r7, r3
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	2204      	movs	r2, #4
 8011d46:	4013      	ands	r3, r2
 8011d48:	d011      	beq.n	8011d6e <HAL_UART_IRQHandler+0x126>
 8011d4a:	239c      	movs	r3, #156	@ 0x9c
 8011d4c:	18fb      	adds	r3, r7, r3
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	2201      	movs	r2, #1
 8011d52:	4013      	ands	r3, r2
 8011d54:	d00b      	beq.n	8011d6e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	2204      	movs	r2, #4
 8011d5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	2284      	movs	r2, #132	@ 0x84
 8011d62:	589b      	ldr	r3, [r3, r2]
 8011d64:	2202      	movs	r2, #2
 8011d66:	431a      	orrs	r2, r3
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	2184      	movs	r1, #132	@ 0x84
 8011d6c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011d6e:	23a4      	movs	r3, #164	@ 0xa4
 8011d70:	18fb      	adds	r3, r7, r3
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	2208      	movs	r2, #8
 8011d76:	4013      	ands	r3, r2
 8011d78:	d017      	beq.n	8011daa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8011d7a:	23a0      	movs	r3, #160	@ 0xa0
 8011d7c:	18fb      	adds	r3, r7, r3
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	2220      	movs	r2, #32
 8011d82:	4013      	ands	r3, r2
 8011d84:	d105      	bne.n	8011d92 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8011d86:	239c      	movs	r3, #156	@ 0x9c
 8011d88:	18fb      	adds	r3, r7, r3
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	2201      	movs	r2, #1
 8011d8e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8011d90:	d00b      	beq.n	8011daa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	2208      	movs	r2, #8
 8011d98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	2284      	movs	r2, #132	@ 0x84
 8011d9e:	589b      	ldr	r3, [r3, r2]
 8011da0:	2208      	movs	r2, #8
 8011da2:	431a      	orrs	r2, r3
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2184      	movs	r1, #132	@ 0x84
 8011da8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011daa:	23a4      	movs	r3, #164	@ 0xa4
 8011dac:	18fb      	adds	r3, r7, r3
 8011dae:	681a      	ldr	r2, [r3, #0]
 8011db0:	2380      	movs	r3, #128	@ 0x80
 8011db2:	011b      	lsls	r3, r3, #4
 8011db4:	4013      	ands	r3, r2
 8011db6:	d013      	beq.n	8011de0 <HAL_UART_IRQHandler+0x198>
 8011db8:	23a0      	movs	r3, #160	@ 0xa0
 8011dba:	18fb      	adds	r3, r7, r3
 8011dbc:	681a      	ldr	r2, [r3, #0]
 8011dbe:	2380      	movs	r3, #128	@ 0x80
 8011dc0:	04db      	lsls	r3, r3, #19
 8011dc2:	4013      	ands	r3, r2
 8011dc4:	d00c      	beq.n	8011de0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	2280      	movs	r2, #128	@ 0x80
 8011dcc:	0112      	lsls	r2, r2, #4
 8011dce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2284      	movs	r2, #132	@ 0x84
 8011dd4:	589b      	ldr	r3, [r3, r2]
 8011dd6:	2220      	movs	r2, #32
 8011dd8:	431a      	orrs	r2, r3
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	2184      	movs	r1, #132	@ 0x84
 8011dde:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	2284      	movs	r2, #132	@ 0x84
 8011de4:	589b      	ldr	r3, [r3, r2]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d100      	bne.n	8011dec <HAL_UART_IRQHandler+0x1a4>
 8011dea:	e20b      	b.n	8012204 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8011dec:	23a4      	movs	r3, #164	@ 0xa4
 8011dee:	18fb      	adds	r3, r7, r3
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	2220      	movs	r2, #32
 8011df4:	4013      	ands	r3, r2
 8011df6:	d00e      	beq.n	8011e16 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011df8:	23a0      	movs	r3, #160	@ 0xa0
 8011dfa:	18fb      	adds	r3, r7, r3
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	2220      	movs	r2, #32
 8011e00:	4013      	ands	r3, r2
 8011e02:	d008      	beq.n	8011e16 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d004      	beq.n	8011e16 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8011e10:	687a      	ldr	r2, [r7, #4]
 8011e12:	0010      	movs	r0, r2
 8011e14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	2284      	movs	r2, #132	@ 0x84
 8011e1a:	589b      	ldr	r3, [r3, r2]
 8011e1c:	2194      	movs	r1, #148	@ 0x94
 8011e1e:	187a      	adds	r2, r7, r1
 8011e20:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	689b      	ldr	r3, [r3, #8]
 8011e28:	2240      	movs	r2, #64	@ 0x40
 8011e2a:	4013      	ands	r3, r2
 8011e2c:	2b40      	cmp	r3, #64	@ 0x40
 8011e2e:	d004      	beq.n	8011e3a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8011e30:	187b      	adds	r3, r7, r1
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	2228      	movs	r2, #40	@ 0x28
 8011e36:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011e38:	d04b      	beq.n	8011ed2 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	0018      	movs	r0, r3
 8011e3e:	f000 ff97 	bl	8012d70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	689b      	ldr	r3, [r3, #8]
 8011e48:	2240      	movs	r2, #64	@ 0x40
 8011e4a:	4013      	ands	r3, r2
 8011e4c:	2b40      	cmp	r3, #64	@ 0x40
 8011e4e:	d139      	bne.n	8011ec4 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e50:	f3ef 8310 	mrs	r3, PRIMASK
 8011e54:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8011e56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011e58:	2090      	movs	r0, #144	@ 0x90
 8011e5a:	183a      	adds	r2, r7, r0
 8011e5c:	6013      	str	r3, [r2, #0]
 8011e5e:	2301      	movs	r3, #1
 8011e60:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011e62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011e64:	f383 8810 	msr	PRIMASK, r3
}
 8011e68:	46c0      	nop			@ (mov r8, r8)
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	689a      	ldr	r2, [r3, #8]
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	2140      	movs	r1, #64	@ 0x40
 8011e76:	438a      	bics	r2, r1
 8011e78:	609a      	str	r2, [r3, #8]
 8011e7a:	183b      	adds	r3, r7, r0
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011e80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011e82:	f383 8810 	msr	PRIMASK, r3
}
 8011e86:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d012      	beq.n	8011eb6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011e94:	4a17      	ldr	r2, [pc, #92]	@ (8011ef4 <HAL_UART_IRQHandler+0x2ac>)
 8011e96:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011e9c:	0018      	movs	r0, r3
 8011e9e:	f7f8 ffef 	bl	800ae80 <HAL_DMA_Abort_IT>
 8011ea2:	1e03      	subs	r3, r0, #0
 8011ea4:	d020      	beq.n	8011ee8 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011eaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011eb0:	0018      	movs	r0, r3
 8011eb2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011eb4:	e018      	b.n	8011ee8 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	2298      	movs	r2, #152	@ 0x98
 8011eba:	589b      	ldr	r3, [r3, r2]
 8011ebc:	687a      	ldr	r2, [r7, #4]
 8011ebe:	0010      	movs	r0, r2
 8011ec0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011ec2:	e011      	b.n	8011ee8 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	2298      	movs	r2, #152	@ 0x98
 8011ec8:	589b      	ldr	r3, [r3, r2]
 8011eca:	687a      	ldr	r2, [r7, #4]
 8011ecc:	0010      	movs	r0, r2
 8011ece:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011ed0:	e00a      	b.n	8011ee8 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	2298      	movs	r2, #152	@ 0x98
 8011ed6:	589b      	ldr	r3, [r3, r2]
 8011ed8:	687a      	ldr	r2, [r7, #4]
 8011eda:	0010      	movs	r0, r2
 8011edc:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	2284      	movs	r2, #132	@ 0x84
 8011ee2:	2100      	movs	r1, #0
 8011ee4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8011ee6:	e18d      	b.n	8012204 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011ee8:	46c0      	nop			@ (mov r8, r8)
    return;
 8011eea:	e18b      	b.n	8012204 <HAL_UART_IRQHandler+0x5bc>
 8011eec:	0000080f 	.word	0x0000080f
 8011ef0:	04000120 	.word	0x04000120
 8011ef4:	080130fd 	.word	0x080130fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011efc:	2b01      	cmp	r3, #1
 8011efe:	d000      	beq.n	8011f02 <HAL_UART_IRQHandler+0x2ba>
 8011f00:	e13d      	b.n	801217e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8011f02:	23a4      	movs	r3, #164	@ 0xa4
 8011f04:	18fb      	adds	r3, r7, r3
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	2210      	movs	r2, #16
 8011f0a:	4013      	ands	r3, r2
 8011f0c:	d100      	bne.n	8011f10 <HAL_UART_IRQHandler+0x2c8>
 8011f0e:	e136      	b.n	801217e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011f10:	23a0      	movs	r3, #160	@ 0xa0
 8011f12:	18fb      	adds	r3, r7, r3
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	2210      	movs	r2, #16
 8011f18:	4013      	ands	r3, r2
 8011f1a:	d100      	bne.n	8011f1e <HAL_UART_IRQHandler+0x2d6>
 8011f1c:	e12f      	b.n	801217e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	2210      	movs	r2, #16
 8011f24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	689b      	ldr	r3, [r3, #8]
 8011f2c:	2240      	movs	r2, #64	@ 0x40
 8011f2e:	4013      	ands	r3, r2
 8011f30:	2b40      	cmp	r3, #64	@ 0x40
 8011f32:	d000      	beq.n	8011f36 <HAL_UART_IRQHandler+0x2ee>
 8011f34:	e0a2      	b.n	801207c <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	685a      	ldr	r2, [r3, #4]
 8011f3e:	217e      	movs	r1, #126	@ 0x7e
 8011f40:	187b      	adds	r3, r7, r1
 8011f42:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8011f44:	187b      	adds	r3, r7, r1
 8011f46:	881b      	ldrh	r3, [r3, #0]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d100      	bne.n	8011f4e <HAL_UART_IRQHandler+0x306>
 8011f4c:	e15c      	b.n	8012208 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	2258      	movs	r2, #88	@ 0x58
 8011f52:	5a9b      	ldrh	r3, [r3, r2]
 8011f54:	187a      	adds	r2, r7, r1
 8011f56:	8812      	ldrh	r2, [r2, #0]
 8011f58:	429a      	cmp	r2, r3
 8011f5a:	d300      	bcc.n	8011f5e <HAL_UART_IRQHandler+0x316>
 8011f5c:	e154      	b.n	8012208 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	187a      	adds	r2, r7, r1
 8011f62:	215a      	movs	r1, #90	@ 0x5a
 8011f64:	8812      	ldrh	r2, [r2, #0]
 8011f66:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	2220      	movs	r2, #32
 8011f72:	4013      	ands	r3, r2
 8011f74:	d16f      	bne.n	8012056 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f76:	f3ef 8310 	mrs	r3, PRIMASK
 8011f7a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8011f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011f7e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011f80:	2301      	movs	r3, #1
 8011f82:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f86:	f383 8810 	msr	PRIMASK, r3
}
 8011f8a:	46c0      	nop			@ (mov r8, r8)
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	681a      	ldr	r2, [r3, #0]
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	49a0      	ldr	r1, [pc, #640]	@ (8012218 <HAL_UART_IRQHandler+0x5d0>)
 8011f98:	400a      	ands	r2, r1
 8011f9a:	601a      	str	r2, [r3, #0]
 8011f9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fa2:	f383 8810 	msr	PRIMASK, r3
}
 8011fa6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011fa8:	f3ef 8310 	mrs	r3, PRIMASK
 8011fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8011fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011fb0:	677b      	str	r3, [r7, #116]	@ 0x74
 8011fb2:	2301      	movs	r3, #1
 8011fb4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011fb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011fb8:	f383 8810 	msr	PRIMASK, r3
}
 8011fbc:	46c0      	nop			@ (mov r8, r8)
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	689a      	ldr	r2, [r3, #8]
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	2101      	movs	r1, #1
 8011fca:	438a      	bics	r2, r1
 8011fcc:	609a      	str	r2, [r3, #8]
 8011fce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011fd0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011fd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011fd4:	f383 8810 	msr	PRIMASK, r3
}
 8011fd8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011fda:	f3ef 8310 	mrs	r3, PRIMASK
 8011fde:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8011fe0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011fe2:	673b      	str	r3, [r7, #112]	@ 0x70
 8011fe4:	2301      	movs	r3, #1
 8011fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011fe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011fea:	f383 8810 	msr	PRIMASK, r3
}
 8011fee:	46c0      	nop			@ (mov r8, r8)
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	689a      	ldr	r2, [r3, #8]
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	2140      	movs	r1, #64	@ 0x40
 8011ffc:	438a      	bics	r2, r1
 8011ffe:	609a      	str	r2, [r3, #8]
 8012000:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012002:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012004:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012006:	f383 8810 	msr	PRIMASK, r3
}
 801200a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	2280      	movs	r2, #128	@ 0x80
 8012010:	2120      	movs	r1, #32
 8012012:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	2200      	movs	r2, #0
 8012018:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801201a:	f3ef 8310 	mrs	r3, PRIMASK
 801201e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8012020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012022:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012024:	2301      	movs	r3, #1
 8012026:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012028:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801202a:	f383 8810 	msr	PRIMASK, r3
}
 801202e:	46c0      	nop			@ (mov r8, r8)
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	681a      	ldr	r2, [r3, #0]
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	2110      	movs	r1, #16
 801203c:	438a      	bics	r2, r1
 801203e:	601a      	str	r2, [r3, #0]
 8012040:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012042:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012044:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012046:	f383 8810 	msr	PRIMASK, r3
}
 801204a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012050:	0018      	movs	r0, r3
 8012052:	f7f8 fed5 	bl	800ae00 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	2202      	movs	r2, #2
 801205a:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	22ac      	movs	r2, #172	@ 0xac
 8012060:	589b      	ldr	r3, [r3, r2]
 8012062:	687a      	ldr	r2, [r7, #4]
 8012064:	2158      	movs	r1, #88	@ 0x58
 8012066:	5a51      	ldrh	r1, [r2, r1]
 8012068:	687a      	ldr	r2, [r7, #4]
 801206a:	205a      	movs	r0, #90	@ 0x5a
 801206c:	5a12      	ldrh	r2, [r2, r0]
 801206e:	b292      	uxth	r2, r2
 8012070:	1a8a      	subs	r2, r1, r2
 8012072:	b291      	uxth	r1, r2
 8012074:	687a      	ldr	r2, [r7, #4]
 8012076:	0010      	movs	r0, r2
 8012078:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801207a:	e0c5      	b.n	8012208 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2258      	movs	r2, #88	@ 0x58
 8012080:	5a99      	ldrh	r1, [r3, r2]
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	225a      	movs	r2, #90	@ 0x5a
 8012086:	5a9b      	ldrh	r3, [r3, r2]
 8012088:	b29a      	uxth	r2, r3
 801208a:	208e      	movs	r0, #142	@ 0x8e
 801208c:	183b      	adds	r3, r7, r0
 801208e:	1a8a      	subs	r2, r1, r2
 8012090:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	225a      	movs	r2, #90	@ 0x5a
 8012096:	5a9b      	ldrh	r3, [r3, r2]
 8012098:	b29b      	uxth	r3, r3
 801209a:	2b00      	cmp	r3, #0
 801209c:	d100      	bne.n	80120a0 <HAL_UART_IRQHandler+0x458>
 801209e:	e0b5      	b.n	801220c <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 80120a0:	183b      	adds	r3, r7, r0
 80120a2:	881b      	ldrh	r3, [r3, #0]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d100      	bne.n	80120aa <HAL_UART_IRQHandler+0x462>
 80120a8:	e0b0      	b.n	801220c <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120aa:	f3ef 8310 	mrs	r3, PRIMASK
 80120ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80120b0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80120b2:	2488      	movs	r4, #136	@ 0x88
 80120b4:	193a      	adds	r2, r7, r4
 80120b6:	6013      	str	r3, [r2, #0]
 80120b8:	2301      	movs	r3, #1
 80120ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80120bc:	693b      	ldr	r3, [r7, #16]
 80120be:	f383 8810 	msr	PRIMASK, r3
}
 80120c2:	46c0      	nop			@ (mov r8, r8)
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	681a      	ldr	r2, [r3, #0]
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	4953      	ldr	r1, [pc, #332]	@ (801221c <HAL_UART_IRQHandler+0x5d4>)
 80120d0:	400a      	ands	r2, r1
 80120d2:	601a      	str	r2, [r3, #0]
 80120d4:	193b      	adds	r3, r7, r4
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80120da:	697b      	ldr	r3, [r7, #20]
 80120dc:	f383 8810 	msr	PRIMASK, r3
}
 80120e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120e2:	f3ef 8310 	mrs	r3, PRIMASK
 80120e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80120e8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80120ea:	2484      	movs	r4, #132	@ 0x84
 80120ec:	193a      	adds	r2, r7, r4
 80120ee:	6013      	str	r3, [r2, #0]
 80120f0:	2301      	movs	r3, #1
 80120f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80120f4:	69fb      	ldr	r3, [r7, #28]
 80120f6:	f383 8810 	msr	PRIMASK, r3
}
 80120fa:	46c0      	nop			@ (mov r8, r8)
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	689a      	ldr	r2, [r3, #8]
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	2101      	movs	r1, #1
 8012108:	438a      	bics	r2, r1
 801210a:	609a      	str	r2, [r3, #8]
 801210c:	193b      	adds	r3, r7, r4
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012112:	6a3b      	ldr	r3, [r7, #32]
 8012114:	f383 8810 	msr	PRIMASK, r3
}
 8012118:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	2280      	movs	r2, #128	@ 0x80
 801211e:	2120      	movs	r1, #32
 8012120:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	2200      	movs	r2, #0
 8012126:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	2200      	movs	r2, #0
 801212c:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801212e:	f3ef 8310 	mrs	r3, PRIMASK
 8012132:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8012134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012136:	2480      	movs	r4, #128	@ 0x80
 8012138:	193a      	adds	r2, r7, r4
 801213a:	6013      	str	r3, [r2, #0]
 801213c:	2301      	movs	r3, #1
 801213e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012142:	f383 8810 	msr	PRIMASK, r3
}
 8012146:	46c0      	nop			@ (mov r8, r8)
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	681a      	ldr	r2, [r3, #0]
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	2110      	movs	r1, #16
 8012154:	438a      	bics	r2, r1
 8012156:	601a      	str	r2, [r3, #0]
 8012158:	193b      	adds	r3, r7, r4
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801215e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012160:	f383 8810 	msr	PRIMASK, r3
}
 8012164:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	2202      	movs	r2, #2
 801216a:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	22ac      	movs	r2, #172	@ 0xac
 8012170:	589b      	ldr	r3, [r3, r2]
 8012172:	183a      	adds	r2, r7, r0
 8012174:	8811      	ldrh	r1, [r2, #0]
 8012176:	687a      	ldr	r2, [r7, #4]
 8012178:	0010      	movs	r0, r2
 801217a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801217c:	e046      	b.n	801220c <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801217e:	23a4      	movs	r3, #164	@ 0xa4
 8012180:	18fb      	adds	r3, r7, r3
 8012182:	681a      	ldr	r2, [r3, #0]
 8012184:	2380      	movs	r3, #128	@ 0x80
 8012186:	035b      	lsls	r3, r3, #13
 8012188:	4013      	ands	r3, r2
 801218a:	d012      	beq.n	80121b2 <HAL_UART_IRQHandler+0x56a>
 801218c:	239c      	movs	r3, #156	@ 0x9c
 801218e:	18fb      	adds	r3, r7, r3
 8012190:	681a      	ldr	r2, [r3, #0]
 8012192:	2380      	movs	r3, #128	@ 0x80
 8012194:	03db      	lsls	r3, r3, #15
 8012196:	4013      	ands	r3, r2
 8012198:	d00b      	beq.n	80121b2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	2280      	movs	r2, #128	@ 0x80
 80121a0:	0352      	lsls	r2, r2, #13
 80121a2:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	22a8      	movs	r2, #168	@ 0xa8
 80121a8:	589b      	ldr	r3, [r3, r2]
 80121aa:	687a      	ldr	r2, [r7, #4]
 80121ac:	0010      	movs	r0, r2
 80121ae:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80121b0:	e02f      	b.n	8012212 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80121b2:	23a4      	movs	r3, #164	@ 0xa4
 80121b4:	18fb      	adds	r3, r7, r3
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	2280      	movs	r2, #128	@ 0x80
 80121ba:	4013      	ands	r3, r2
 80121bc:	d00f      	beq.n	80121de <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80121be:	23a0      	movs	r3, #160	@ 0xa0
 80121c0:	18fb      	adds	r3, r7, r3
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	2280      	movs	r2, #128	@ 0x80
 80121c6:	4013      	ands	r3, r2
 80121c8:	d009      	beq.n	80121de <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d01e      	beq.n	8012210 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80121d6:	687a      	ldr	r2, [r7, #4]
 80121d8:	0010      	movs	r0, r2
 80121da:	4798      	blx	r3
    }
    return;
 80121dc:	e018      	b.n	8012210 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80121de:	23a4      	movs	r3, #164	@ 0xa4
 80121e0:	18fb      	adds	r3, r7, r3
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	2240      	movs	r2, #64	@ 0x40
 80121e6:	4013      	ands	r3, r2
 80121e8:	d013      	beq.n	8012212 <HAL_UART_IRQHandler+0x5ca>
 80121ea:	23a0      	movs	r3, #160	@ 0xa0
 80121ec:	18fb      	adds	r3, r7, r3
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	2240      	movs	r2, #64	@ 0x40
 80121f2:	4013      	ands	r3, r2
 80121f4:	d00d      	beq.n	8012212 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	0018      	movs	r0, r3
 80121fa:	f000 ff98 	bl	801312e <UART_EndTransmit_IT>
    return;
 80121fe:	e008      	b.n	8012212 <HAL_UART_IRQHandler+0x5ca>
      return;
 8012200:	46c0      	nop			@ (mov r8, r8)
 8012202:	e006      	b.n	8012212 <HAL_UART_IRQHandler+0x5ca>
    return;
 8012204:	46c0      	nop			@ (mov r8, r8)
 8012206:	e004      	b.n	8012212 <HAL_UART_IRQHandler+0x5ca>
      return;
 8012208:	46c0      	nop			@ (mov r8, r8)
 801220a:	e002      	b.n	8012212 <HAL_UART_IRQHandler+0x5ca>
      return;
 801220c:	46c0      	nop			@ (mov r8, r8)
 801220e:	e000      	b.n	8012212 <HAL_UART_IRQHandler+0x5ca>
    return;
 8012210:	46c0      	nop			@ (mov r8, r8)
  }

}
 8012212:	46bd      	mov	sp, r7
 8012214:	b02b      	add	sp, #172	@ 0xac
 8012216:	bd90      	pop	{r4, r7, pc}
 8012218:	fffffeff 	.word	0xfffffeff
 801221c:	fffffedf 	.word	0xfffffedf

08012220 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b082      	sub	sp, #8
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8012228:	46c0      	nop			@ (mov r8, r8)
 801222a:	46bd      	mov	sp, r7
 801222c:	b002      	add	sp, #8
 801222e:	bd80      	pop	{r7, pc}

08012230 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8012230:	b580      	push	{r7, lr}
 8012232:	b082      	sub	sp, #8
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8012238:	46c0      	nop			@ (mov r8, r8)
 801223a:	46bd      	mov	sp, r7
 801223c:	b002      	add	sp, #8
 801223e:	bd80      	pop	{r7, pc}

08012240 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b082      	sub	sp, #8
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8012248:	46c0      	nop			@ (mov r8, r8)
 801224a:	46bd      	mov	sp, r7
 801224c:	b002      	add	sp, #8
 801224e:	bd80      	pop	{r7, pc}

08012250 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8012250:	b580      	push	{r7, lr}
 8012252:	b082      	sub	sp, #8
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8012258:	46c0      	nop			@ (mov r8, r8)
 801225a:	46bd      	mov	sp, r7
 801225c:	b002      	add	sp, #8
 801225e:	bd80      	pop	{r7, pc}

08012260 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b082      	sub	sp, #8
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8012268:	46c0      	nop			@ (mov r8, r8)
 801226a:	46bd      	mov	sp, r7
 801226c:	b002      	add	sp, #8
 801226e:	bd80      	pop	{r7, pc}

08012270 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b082      	sub	sp, #8
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8012278:	46c0      	nop			@ (mov r8, r8)
 801227a:	46bd      	mov	sp, r7
 801227c:	b002      	add	sp, #8
 801227e:	bd80      	pop	{r7, pc}

08012280 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b082      	sub	sp, #8
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
 8012288:	000a      	movs	r2, r1
 801228a:	1cbb      	adds	r3, r7, #2
 801228c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801228e:	46c0      	nop			@ (mov r8, r8)
 8012290:	46bd      	mov	sp, r7
 8012292:	b002      	add	sp, #8
 8012294:	bd80      	pop	{r7, pc}
	...

08012298 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8012298:	b580      	push	{r7, lr}
 801229a:	b082      	sub	sp, #8
 801229c:	af00      	add	r7, sp, #0
 801229e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	2188      	movs	r1, #136	@ 0x88
 80122a4:	4a14      	ldr	r2, [pc, #80]	@ (80122f8 <UART_InitCallbacksToDefault+0x60>)
 80122a6:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	218c      	movs	r1, #140	@ 0x8c
 80122ac:	4a13      	ldr	r2, [pc, #76]	@ (80122fc <UART_InitCallbacksToDefault+0x64>)
 80122ae:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	2190      	movs	r1, #144	@ 0x90
 80122b4:	4a12      	ldr	r2, [pc, #72]	@ (8012300 <UART_InitCallbacksToDefault+0x68>)
 80122b6:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	2194      	movs	r1, #148	@ 0x94
 80122bc:	4a11      	ldr	r2, [pc, #68]	@ (8012304 <UART_InitCallbacksToDefault+0x6c>)
 80122be:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	2198      	movs	r1, #152	@ 0x98
 80122c4:	4a10      	ldr	r2, [pc, #64]	@ (8012308 <UART_InitCallbacksToDefault+0x70>)
 80122c6:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	219c      	movs	r1, #156	@ 0x9c
 80122cc:	4a0f      	ldr	r2, [pc, #60]	@ (801230c <UART_InitCallbacksToDefault+0x74>)
 80122ce:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	21a0      	movs	r1, #160	@ 0xa0
 80122d4:	4a0e      	ldr	r2, [pc, #56]	@ (8012310 <UART_InitCallbacksToDefault+0x78>)
 80122d6:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	21a4      	movs	r1, #164	@ 0xa4
 80122dc:	4a0d      	ldr	r2, [pc, #52]	@ (8012314 <UART_InitCallbacksToDefault+0x7c>)
 80122de:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	21a8      	movs	r1, #168	@ 0xa8
 80122e4:	4a0c      	ldr	r2, [pc, #48]	@ (8012318 <UART_InitCallbacksToDefault+0x80>)
 80122e6:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	21ac      	movs	r1, #172	@ 0xac
 80122ec:	4a0b      	ldr	r2, [pc, #44]	@ (801231c <UART_InitCallbacksToDefault+0x84>)
 80122ee:	505a      	str	r2, [r3, r1]

}
 80122f0:	46c0      	nop			@ (mov r8, r8)
 80122f2:	46bd      	mov	sp, r7
 80122f4:	b002      	add	sp, #8
 80122f6:	bd80      	pop	{r7, pc}
 80122f8:	08012231 	.word	0x08012231
 80122fc:	08012221 	.word	0x08012221
 8012300:	08012241 	.word	0x08012241
 8012304:	08003861 	.word	0x08003861
 8012308:	0800389d 	.word	0x0800389d
 801230c:	08012251 	.word	0x08012251
 8012310:	08012261 	.word	0x08012261
 8012314:	08012271 	.word	0x08012271
 8012318:	08013189 	.word	0x08013189
 801231c:	08012281 	.word	0x08012281

08012320 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012320:	b5b0      	push	{r4, r5, r7, lr}
 8012322:	b08e      	sub	sp, #56	@ 0x38
 8012324:	af00      	add	r7, sp, #0
 8012326:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012328:	231a      	movs	r3, #26
 801232a:	2218      	movs	r2, #24
 801232c:	189b      	adds	r3, r3, r2
 801232e:	19db      	adds	r3, r3, r7
 8012330:	2200      	movs	r2, #0
 8012332:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012334:	69fb      	ldr	r3, [r7, #28]
 8012336:	689a      	ldr	r2, [r3, #8]
 8012338:	69fb      	ldr	r3, [r7, #28]
 801233a:	691b      	ldr	r3, [r3, #16]
 801233c:	431a      	orrs	r2, r3
 801233e:	69fb      	ldr	r3, [r7, #28]
 8012340:	695b      	ldr	r3, [r3, #20]
 8012342:	431a      	orrs	r2, r3
 8012344:	69fb      	ldr	r3, [r7, #28]
 8012346:	69db      	ldr	r3, [r3, #28]
 8012348:	4313      	orrs	r3, r2
 801234a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801234c:	69fb      	ldr	r3, [r7, #28]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	4ac3      	ldr	r2, [pc, #780]	@ (8012660 <UART_SetConfig+0x340>)
 8012354:	4013      	ands	r3, r2
 8012356:	0019      	movs	r1, r3
 8012358:	69fb      	ldr	r3, [r7, #28]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801235e:	430a      	orrs	r2, r1
 8012360:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012362:	69fb      	ldr	r3, [r7, #28]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	685b      	ldr	r3, [r3, #4]
 8012368:	4abe      	ldr	r2, [pc, #760]	@ (8012664 <UART_SetConfig+0x344>)
 801236a:	4013      	ands	r3, r2
 801236c:	0019      	movs	r1, r3
 801236e:	69fb      	ldr	r3, [r7, #28]
 8012370:	68da      	ldr	r2, [r3, #12]
 8012372:	69fb      	ldr	r3, [r7, #28]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	430a      	orrs	r2, r1
 8012378:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801237a:	69fb      	ldr	r3, [r7, #28]
 801237c:	699b      	ldr	r3, [r3, #24]
 801237e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012380:	69fb      	ldr	r3, [r7, #28]
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	4ab8      	ldr	r2, [pc, #736]	@ (8012668 <UART_SetConfig+0x348>)
 8012386:	4293      	cmp	r3, r2
 8012388:	d004      	beq.n	8012394 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801238a:	69fb      	ldr	r3, [r7, #28]
 801238c:	6a1b      	ldr	r3, [r3, #32]
 801238e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012390:	4313      	orrs	r3, r2
 8012392:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012394:	69fb      	ldr	r3, [r7, #28]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	689b      	ldr	r3, [r3, #8]
 801239a:	4ab4      	ldr	r2, [pc, #720]	@ (801266c <UART_SetConfig+0x34c>)
 801239c:	4013      	ands	r3, r2
 801239e:	0019      	movs	r1, r3
 80123a0:	69fb      	ldr	r3, [r7, #28]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80123a6:	430a      	orrs	r2, r1
 80123a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80123aa:	69fb      	ldr	r3, [r7, #28]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	4ab0      	ldr	r2, [pc, #704]	@ (8012670 <UART_SetConfig+0x350>)
 80123b0:	4293      	cmp	r3, r2
 80123b2:	d131      	bne.n	8012418 <UART_SetConfig+0xf8>
 80123b4:	4baf      	ldr	r3, [pc, #700]	@ (8012674 <UART_SetConfig+0x354>)
 80123b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80123b8:	2203      	movs	r2, #3
 80123ba:	4013      	ands	r3, r2
 80123bc:	2b03      	cmp	r3, #3
 80123be:	d01d      	beq.n	80123fc <UART_SetConfig+0xdc>
 80123c0:	d823      	bhi.n	801240a <UART_SetConfig+0xea>
 80123c2:	2b02      	cmp	r3, #2
 80123c4:	d00c      	beq.n	80123e0 <UART_SetConfig+0xc0>
 80123c6:	d820      	bhi.n	801240a <UART_SetConfig+0xea>
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d002      	beq.n	80123d2 <UART_SetConfig+0xb2>
 80123cc:	2b01      	cmp	r3, #1
 80123ce:	d00e      	beq.n	80123ee <UART_SetConfig+0xce>
 80123d0:	e01b      	b.n	801240a <UART_SetConfig+0xea>
 80123d2:	231b      	movs	r3, #27
 80123d4:	2218      	movs	r2, #24
 80123d6:	189b      	adds	r3, r3, r2
 80123d8:	19db      	adds	r3, r3, r7
 80123da:	2201      	movs	r2, #1
 80123dc:	701a      	strb	r2, [r3, #0]
 80123de:	e0b4      	b.n	801254a <UART_SetConfig+0x22a>
 80123e0:	231b      	movs	r3, #27
 80123e2:	2218      	movs	r2, #24
 80123e4:	189b      	adds	r3, r3, r2
 80123e6:	19db      	adds	r3, r3, r7
 80123e8:	2202      	movs	r2, #2
 80123ea:	701a      	strb	r2, [r3, #0]
 80123ec:	e0ad      	b.n	801254a <UART_SetConfig+0x22a>
 80123ee:	231b      	movs	r3, #27
 80123f0:	2218      	movs	r2, #24
 80123f2:	189b      	adds	r3, r3, r2
 80123f4:	19db      	adds	r3, r3, r7
 80123f6:	2204      	movs	r2, #4
 80123f8:	701a      	strb	r2, [r3, #0]
 80123fa:	e0a6      	b.n	801254a <UART_SetConfig+0x22a>
 80123fc:	231b      	movs	r3, #27
 80123fe:	2218      	movs	r2, #24
 8012400:	189b      	adds	r3, r3, r2
 8012402:	19db      	adds	r3, r3, r7
 8012404:	2208      	movs	r2, #8
 8012406:	701a      	strb	r2, [r3, #0]
 8012408:	e09f      	b.n	801254a <UART_SetConfig+0x22a>
 801240a:	231b      	movs	r3, #27
 801240c:	2218      	movs	r2, #24
 801240e:	189b      	adds	r3, r3, r2
 8012410:	19db      	adds	r3, r3, r7
 8012412:	2210      	movs	r2, #16
 8012414:	701a      	strb	r2, [r3, #0]
 8012416:	e098      	b.n	801254a <UART_SetConfig+0x22a>
 8012418:	69fb      	ldr	r3, [r7, #28]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	4a96      	ldr	r2, [pc, #600]	@ (8012678 <UART_SetConfig+0x358>)
 801241e:	4293      	cmp	r3, r2
 8012420:	d131      	bne.n	8012486 <UART_SetConfig+0x166>
 8012422:	4b94      	ldr	r3, [pc, #592]	@ (8012674 <UART_SetConfig+0x354>)
 8012424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012426:	220c      	movs	r2, #12
 8012428:	4013      	ands	r3, r2
 801242a:	2b0c      	cmp	r3, #12
 801242c:	d01d      	beq.n	801246a <UART_SetConfig+0x14a>
 801242e:	d823      	bhi.n	8012478 <UART_SetConfig+0x158>
 8012430:	2b08      	cmp	r3, #8
 8012432:	d00c      	beq.n	801244e <UART_SetConfig+0x12e>
 8012434:	d820      	bhi.n	8012478 <UART_SetConfig+0x158>
 8012436:	2b00      	cmp	r3, #0
 8012438:	d002      	beq.n	8012440 <UART_SetConfig+0x120>
 801243a:	2b04      	cmp	r3, #4
 801243c:	d00e      	beq.n	801245c <UART_SetConfig+0x13c>
 801243e:	e01b      	b.n	8012478 <UART_SetConfig+0x158>
 8012440:	231b      	movs	r3, #27
 8012442:	2218      	movs	r2, #24
 8012444:	189b      	adds	r3, r3, r2
 8012446:	19db      	adds	r3, r3, r7
 8012448:	2200      	movs	r2, #0
 801244a:	701a      	strb	r2, [r3, #0]
 801244c:	e07d      	b.n	801254a <UART_SetConfig+0x22a>
 801244e:	231b      	movs	r3, #27
 8012450:	2218      	movs	r2, #24
 8012452:	189b      	adds	r3, r3, r2
 8012454:	19db      	adds	r3, r3, r7
 8012456:	2202      	movs	r2, #2
 8012458:	701a      	strb	r2, [r3, #0]
 801245a:	e076      	b.n	801254a <UART_SetConfig+0x22a>
 801245c:	231b      	movs	r3, #27
 801245e:	2218      	movs	r2, #24
 8012460:	189b      	adds	r3, r3, r2
 8012462:	19db      	adds	r3, r3, r7
 8012464:	2204      	movs	r2, #4
 8012466:	701a      	strb	r2, [r3, #0]
 8012468:	e06f      	b.n	801254a <UART_SetConfig+0x22a>
 801246a:	231b      	movs	r3, #27
 801246c:	2218      	movs	r2, #24
 801246e:	189b      	adds	r3, r3, r2
 8012470:	19db      	adds	r3, r3, r7
 8012472:	2208      	movs	r2, #8
 8012474:	701a      	strb	r2, [r3, #0]
 8012476:	e068      	b.n	801254a <UART_SetConfig+0x22a>
 8012478:	231b      	movs	r3, #27
 801247a:	2218      	movs	r2, #24
 801247c:	189b      	adds	r3, r3, r2
 801247e:	19db      	adds	r3, r3, r7
 8012480:	2210      	movs	r2, #16
 8012482:	701a      	strb	r2, [r3, #0]
 8012484:	e061      	b.n	801254a <UART_SetConfig+0x22a>
 8012486:	69fb      	ldr	r3, [r7, #28]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	4a7c      	ldr	r2, [pc, #496]	@ (801267c <UART_SetConfig+0x35c>)
 801248c:	4293      	cmp	r3, r2
 801248e:	d106      	bne.n	801249e <UART_SetConfig+0x17e>
 8012490:	231b      	movs	r3, #27
 8012492:	2218      	movs	r2, #24
 8012494:	189b      	adds	r3, r3, r2
 8012496:	19db      	adds	r3, r3, r7
 8012498:	2200      	movs	r2, #0
 801249a:	701a      	strb	r2, [r3, #0]
 801249c:	e055      	b.n	801254a <UART_SetConfig+0x22a>
 801249e:	69fb      	ldr	r3, [r7, #28]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	4a77      	ldr	r2, [pc, #476]	@ (8012680 <UART_SetConfig+0x360>)
 80124a4:	4293      	cmp	r3, r2
 80124a6:	d106      	bne.n	80124b6 <UART_SetConfig+0x196>
 80124a8:	231b      	movs	r3, #27
 80124aa:	2218      	movs	r2, #24
 80124ac:	189b      	adds	r3, r3, r2
 80124ae:	19db      	adds	r3, r3, r7
 80124b0:	2200      	movs	r2, #0
 80124b2:	701a      	strb	r2, [r3, #0]
 80124b4:	e049      	b.n	801254a <UART_SetConfig+0x22a>
 80124b6:	69fb      	ldr	r3, [r7, #28]
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	4a6b      	ldr	r2, [pc, #428]	@ (8012668 <UART_SetConfig+0x348>)
 80124bc:	4293      	cmp	r3, r2
 80124be:	d13e      	bne.n	801253e <UART_SetConfig+0x21e>
 80124c0:	4b6c      	ldr	r3, [pc, #432]	@ (8012674 <UART_SetConfig+0x354>)
 80124c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80124c4:	23c0      	movs	r3, #192	@ 0xc0
 80124c6:	011b      	lsls	r3, r3, #4
 80124c8:	4013      	ands	r3, r2
 80124ca:	22c0      	movs	r2, #192	@ 0xc0
 80124cc:	0112      	lsls	r2, r2, #4
 80124ce:	4293      	cmp	r3, r2
 80124d0:	d027      	beq.n	8012522 <UART_SetConfig+0x202>
 80124d2:	22c0      	movs	r2, #192	@ 0xc0
 80124d4:	0112      	lsls	r2, r2, #4
 80124d6:	4293      	cmp	r3, r2
 80124d8:	d82a      	bhi.n	8012530 <UART_SetConfig+0x210>
 80124da:	2280      	movs	r2, #128	@ 0x80
 80124dc:	0112      	lsls	r2, r2, #4
 80124de:	4293      	cmp	r3, r2
 80124e0:	d011      	beq.n	8012506 <UART_SetConfig+0x1e6>
 80124e2:	2280      	movs	r2, #128	@ 0x80
 80124e4:	0112      	lsls	r2, r2, #4
 80124e6:	4293      	cmp	r3, r2
 80124e8:	d822      	bhi.n	8012530 <UART_SetConfig+0x210>
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d004      	beq.n	80124f8 <UART_SetConfig+0x1d8>
 80124ee:	2280      	movs	r2, #128	@ 0x80
 80124f0:	00d2      	lsls	r2, r2, #3
 80124f2:	4293      	cmp	r3, r2
 80124f4:	d00e      	beq.n	8012514 <UART_SetConfig+0x1f4>
 80124f6:	e01b      	b.n	8012530 <UART_SetConfig+0x210>
 80124f8:	231b      	movs	r3, #27
 80124fa:	2218      	movs	r2, #24
 80124fc:	189b      	adds	r3, r3, r2
 80124fe:	19db      	adds	r3, r3, r7
 8012500:	2200      	movs	r2, #0
 8012502:	701a      	strb	r2, [r3, #0]
 8012504:	e021      	b.n	801254a <UART_SetConfig+0x22a>
 8012506:	231b      	movs	r3, #27
 8012508:	2218      	movs	r2, #24
 801250a:	189b      	adds	r3, r3, r2
 801250c:	19db      	adds	r3, r3, r7
 801250e:	2202      	movs	r2, #2
 8012510:	701a      	strb	r2, [r3, #0]
 8012512:	e01a      	b.n	801254a <UART_SetConfig+0x22a>
 8012514:	231b      	movs	r3, #27
 8012516:	2218      	movs	r2, #24
 8012518:	189b      	adds	r3, r3, r2
 801251a:	19db      	adds	r3, r3, r7
 801251c:	2204      	movs	r2, #4
 801251e:	701a      	strb	r2, [r3, #0]
 8012520:	e013      	b.n	801254a <UART_SetConfig+0x22a>
 8012522:	231b      	movs	r3, #27
 8012524:	2218      	movs	r2, #24
 8012526:	189b      	adds	r3, r3, r2
 8012528:	19db      	adds	r3, r3, r7
 801252a:	2208      	movs	r2, #8
 801252c:	701a      	strb	r2, [r3, #0]
 801252e:	e00c      	b.n	801254a <UART_SetConfig+0x22a>
 8012530:	231b      	movs	r3, #27
 8012532:	2218      	movs	r2, #24
 8012534:	189b      	adds	r3, r3, r2
 8012536:	19db      	adds	r3, r3, r7
 8012538:	2210      	movs	r2, #16
 801253a:	701a      	strb	r2, [r3, #0]
 801253c:	e005      	b.n	801254a <UART_SetConfig+0x22a>
 801253e:	231b      	movs	r3, #27
 8012540:	2218      	movs	r2, #24
 8012542:	189b      	adds	r3, r3, r2
 8012544:	19db      	adds	r3, r3, r7
 8012546:	2210      	movs	r2, #16
 8012548:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801254a:	69fb      	ldr	r3, [r7, #28]
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	4a46      	ldr	r2, [pc, #280]	@ (8012668 <UART_SetConfig+0x348>)
 8012550:	4293      	cmp	r3, r2
 8012552:	d000      	beq.n	8012556 <UART_SetConfig+0x236>
 8012554:	e09a      	b.n	801268c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8012556:	231b      	movs	r3, #27
 8012558:	2218      	movs	r2, #24
 801255a:	189b      	adds	r3, r3, r2
 801255c:	19db      	adds	r3, r3, r7
 801255e:	781b      	ldrb	r3, [r3, #0]
 8012560:	2b08      	cmp	r3, #8
 8012562:	d01d      	beq.n	80125a0 <UART_SetConfig+0x280>
 8012564:	dc20      	bgt.n	80125a8 <UART_SetConfig+0x288>
 8012566:	2b04      	cmp	r3, #4
 8012568:	d015      	beq.n	8012596 <UART_SetConfig+0x276>
 801256a:	dc1d      	bgt.n	80125a8 <UART_SetConfig+0x288>
 801256c:	2b00      	cmp	r3, #0
 801256e:	d002      	beq.n	8012576 <UART_SetConfig+0x256>
 8012570:	2b02      	cmp	r3, #2
 8012572:	d005      	beq.n	8012580 <UART_SetConfig+0x260>
 8012574:	e018      	b.n	80125a8 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012576:	f7fe f9a5 	bl	80108c4 <HAL_RCC_GetPCLK1Freq>
 801257a:	0003      	movs	r3, r0
 801257c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801257e:	e01c      	b.n	80125ba <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012580:	4b3c      	ldr	r3, [pc, #240]	@ (8012674 <UART_SetConfig+0x354>)
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	2210      	movs	r2, #16
 8012586:	4013      	ands	r3, r2
 8012588:	d002      	beq.n	8012590 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801258a:	4b3e      	ldr	r3, [pc, #248]	@ (8012684 <UART_SetConfig+0x364>)
 801258c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801258e:	e014      	b.n	80125ba <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8012590:	4b3d      	ldr	r3, [pc, #244]	@ (8012688 <UART_SetConfig+0x368>)
 8012592:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8012594:	e011      	b.n	80125ba <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012596:	f7fe f8e5 	bl	8010764 <HAL_RCC_GetSysClockFreq>
 801259a:	0003      	movs	r3, r0
 801259c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801259e:	e00c      	b.n	80125ba <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80125a0:	2380      	movs	r3, #128	@ 0x80
 80125a2:	021b      	lsls	r3, r3, #8
 80125a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80125a6:	e008      	b.n	80125ba <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80125a8:	2300      	movs	r3, #0
 80125aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80125ac:	231a      	movs	r3, #26
 80125ae:	2218      	movs	r2, #24
 80125b0:	189b      	adds	r3, r3, r2
 80125b2:	19db      	adds	r3, r3, r7
 80125b4:	2201      	movs	r2, #1
 80125b6:	701a      	strb	r2, [r3, #0]
        break;
 80125b8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80125ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d100      	bne.n	80125c2 <UART_SetConfig+0x2a2>
 80125c0:	e133      	b.n	801282a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80125c2:	69fb      	ldr	r3, [r7, #28]
 80125c4:	685a      	ldr	r2, [r3, #4]
 80125c6:	0013      	movs	r3, r2
 80125c8:	005b      	lsls	r3, r3, #1
 80125ca:	189b      	adds	r3, r3, r2
 80125cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80125ce:	429a      	cmp	r2, r3
 80125d0:	d305      	bcc.n	80125de <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80125d2:	69fb      	ldr	r3, [r7, #28]
 80125d4:	685b      	ldr	r3, [r3, #4]
 80125d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80125d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80125da:	429a      	cmp	r2, r3
 80125dc:	d906      	bls.n	80125ec <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80125de:	231a      	movs	r3, #26
 80125e0:	2218      	movs	r2, #24
 80125e2:	189b      	adds	r3, r3, r2
 80125e4:	19db      	adds	r3, r3, r7
 80125e6:	2201      	movs	r2, #1
 80125e8:	701a      	strb	r2, [r3, #0]
 80125ea:	e11e      	b.n	801282a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80125ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125ee:	613b      	str	r3, [r7, #16]
 80125f0:	2300      	movs	r3, #0
 80125f2:	617b      	str	r3, [r7, #20]
 80125f4:	6939      	ldr	r1, [r7, #16]
 80125f6:	697a      	ldr	r2, [r7, #20]
 80125f8:	000b      	movs	r3, r1
 80125fa:	0e1b      	lsrs	r3, r3, #24
 80125fc:	0010      	movs	r0, r2
 80125fe:	0205      	lsls	r5, r0, #8
 8012600:	431d      	orrs	r5, r3
 8012602:	000b      	movs	r3, r1
 8012604:	021c      	lsls	r4, r3, #8
 8012606:	69fb      	ldr	r3, [r7, #28]
 8012608:	685b      	ldr	r3, [r3, #4]
 801260a:	085b      	lsrs	r3, r3, #1
 801260c:	60bb      	str	r3, [r7, #8]
 801260e:	2300      	movs	r3, #0
 8012610:	60fb      	str	r3, [r7, #12]
 8012612:	68b8      	ldr	r0, [r7, #8]
 8012614:	68f9      	ldr	r1, [r7, #12]
 8012616:	1900      	adds	r0, r0, r4
 8012618:	4169      	adcs	r1, r5
 801261a:	69fb      	ldr	r3, [r7, #28]
 801261c:	685b      	ldr	r3, [r3, #4]
 801261e:	603b      	str	r3, [r7, #0]
 8012620:	2300      	movs	r3, #0
 8012622:	607b      	str	r3, [r7, #4]
 8012624:	683a      	ldr	r2, [r7, #0]
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	f7ed ff78 	bl	800051c <__aeabi_uldivmod>
 801262c:	0002      	movs	r2, r0
 801262e:	000b      	movs	r3, r1
 8012630:	0013      	movs	r3, r2
 8012632:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012634:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012636:	23c0      	movs	r3, #192	@ 0xc0
 8012638:	009b      	lsls	r3, r3, #2
 801263a:	429a      	cmp	r2, r3
 801263c:	d309      	bcc.n	8012652 <UART_SetConfig+0x332>
 801263e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012640:	2380      	movs	r3, #128	@ 0x80
 8012642:	035b      	lsls	r3, r3, #13
 8012644:	429a      	cmp	r2, r3
 8012646:	d204      	bcs.n	8012652 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8012648:	69fb      	ldr	r3, [r7, #28]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801264e:	60da      	str	r2, [r3, #12]
 8012650:	e0eb      	b.n	801282a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8012652:	231a      	movs	r3, #26
 8012654:	2218      	movs	r2, #24
 8012656:	189b      	adds	r3, r3, r2
 8012658:	19db      	adds	r3, r3, r7
 801265a:	2201      	movs	r2, #1
 801265c:	701a      	strb	r2, [r3, #0]
 801265e:	e0e4      	b.n	801282a <UART_SetConfig+0x50a>
 8012660:	efff69f3 	.word	0xefff69f3
 8012664:	ffffcfff 	.word	0xffffcfff
 8012668:	40004800 	.word	0x40004800
 801266c:	fffff4ff 	.word	0xfffff4ff
 8012670:	40013800 	.word	0x40013800
 8012674:	40021000 	.word	0x40021000
 8012678:	40004400 	.word	0x40004400
 801267c:	40004c00 	.word	0x40004c00
 8012680:	40005000 	.word	0x40005000
 8012684:	003d0900 	.word	0x003d0900
 8012688:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801268c:	69fb      	ldr	r3, [r7, #28]
 801268e:	69da      	ldr	r2, [r3, #28]
 8012690:	2380      	movs	r3, #128	@ 0x80
 8012692:	021b      	lsls	r3, r3, #8
 8012694:	429a      	cmp	r2, r3
 8012696:	d000      	beq.n	801269a <UART_SetConfig+0x37a>
 8012698:	e070      	b.n	801277c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801269a:	231b      	movs	r3, #27
 801269c:	2218      	movs	r2, #24
 801269e:	189b      	adds	r3, r3, r2
 80126a0:	19db      	adds	r3, r3, r7
 80126a2:	781b      	ldrb	r3, [r3, #0]
 80126a4:	2b08      	cmp	r3, #8
 80126a6:	d822      	bhi.n	80126ee <UART_SetConfig+0x3ce>
 80126a8:	009a      	lsls	r2, r3, #2
 80126aa:	4b67      	ldr	r3, [pc, #412]	@ (8012848 <UART_SetConfig+0x528>)
 80126ac:	18d3      	adds	r3, r2, r3
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80126b2:	f7fe f907 	bl	80108c4 <HAL_RCC_GetPCLK1Freq>
 80126b6:	0003      	movs	r3, r0
 80126b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80126ba:	e021      	b.n	8012700 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80126bc:	f7fe f918 	bl	80108f0 <HAL_RCC_GetPCLK2Freq>
 80126c0:	0003      	movs	r3, r0
 80126c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80126c4:	e01c      	b.n	8012700 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80126c6:	4b61      	ldr	r3, [pc, #388]	@ (801284c <UART_SetConfig+0x52c>)
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	2210      	movs	r2, #16
 80126cc:	4013      	ands	r3, r2
 80126ce:	d002      	beq.n	80126d6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80126d0:	4b5f      	ldr	r3, [pc, #380]	@ (8012850 <UART_SetConfig+0x530>)
 80126d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80126d4:	e014      	b.n	8012700 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80126d6:	4b5f      	ldr	r3, [pc, #380]	@ (8012854 <UART_SetConfig+0x534>)
 80126d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80126da:	e011      	b.n	8012700 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80126dc:	f7fe f842 	bl	8010764 <HAL_RCC_GetSysClockFreq>
 80126e0:	0003      	movs	r3, r0
 80126e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80126e4:	e00c      	b.n	8012700 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80126e6:	2380      	movs	r3, #128	@ 0x80
 80126e8:	021b      	lsls	r3, r3, #8
 80126ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80126ec:	e008      	b.n	8012700 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80126ee:	2300      	movs	r3, #0
 80126f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80126f2:	231a      	movs	r3, #26
 80126f4:	2218      	movs	r2, #24
 80126f6:	189b      	adds	r3, r3, r2
 80126f8:	19db      	adds	r3, r3, r7
 80126fa:	2201      	movs	r2, #1
 80126fc:	701a      	strb	r2, [r3, #0]
        break;
 80126fe:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012702:	2b00      	cmp	r3, #0
 8012704:	d100      	bne.n	8012708 <UART_SetConfig+0x3e8>
 8012706:	e090      	b.n	801282a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8012708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801270a:	005a      	lsls	r2, r3, #1
 801270c:	69fb      	ldr	r3, [r7, #28]
 801270e:	685b      	ldr	r3, [r3, #4]
 8012710:	085b      	lsrs	r3, r3, #1
 8012712:	18d2      	adds	r2, r2, r3
 8012714:	69fb      	ldr	r3, [r7, #28]
 8012716:	685b      	ldr	r3, [r3, #4]
 8012718:	0019      	movs	r1, r3
 801271a:	0010      	movs	r0, r2
 801271c:	f7ed fd10 	bl	8000140 <__udivsi3>
 8012720:	0003      	movs	r3, r0
 8012722:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012726:	2b0f      	cmp	r3, #15
 8012728:	d921      	bls.n	801276e <UART_SetConfig+0x44e>
 801272a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801272c:	2380      	movs	r3, #128	@ 0x80
 801272e:	025b      	lsls	r3, r3, #9
 8012730:	429a      	cmp	r2, r3
 8012732:	d21c      	bcs.n	801276e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012736:	b29a      	uxth	r2, r3
 8012738:	200e      	movs	r0, #14
 801273a:	2418      	movs	r4, #24
 801273c:	1903      	adds	r3, r0, r4
 801273e:	19db      	adds	r3, r3, r7
 8012740:	210f      	movs	r1, #15
 8012742:	438a      	bics	r2, r1
 8012744:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012748:	085b      	lsrs	r3, r3, #1
 801274a:	b29b      	uxth	r3, r3
 801274c:	2207      	movs	r2, #7
 801274e:	4013      	ands	r3, r2
 8012750:	b299      	uxth	r1, r3
 8012752:	1903      	adds	r3, r0, r4
 8012754:	19db      	adds	r3, r3, r7
 8012756:	1902      	adds	r2, r0, r4
 8012758:	19d2      	adds	r2, r2, r7
 801275a:	8812      	ldrh	r2, [r2, #0]
 801275c:	430a      	orrs	r2, r1
 801275e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8012760:	69fb      	ldr	r3, [r7, #28]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	1902      	adds	r2, r0, r4
 8012766:	19d2      	adds	r2, r2, r7
 8012768:	8812      	ldrh	r2, [r2, #0]
 801276a:	60da      	str	r2, [r3, #12]
 801276c:	e05d      	b.n	801282a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801276e:	231a      	movs	r3, #26
 8012770:	2218      	movs	r2, #24
 8012772:	189b      	adds	r3, r3, r2
 8012774:	19db      	adds	r3, r3, r7
 8012776:	2201      	movs	r2, #1
 8012778:	701a      	strb	r2, [r3, #0]
 801277a:	e056      	b.n	801282a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801277c:	231b      	movs	r3, #27
 801277e:	2218      	movs	r2, #24
 8012780:	189b      	adds	r3, r3, r2
 8012782:	19db      	adds	r3, r3, r7
 8012784:	781b      	ldrb	r3, [r3, #0]
 8012786:	2b08      	cmp	r3, #8
 8012788:	d822      	bhi.n	80127d0 <UART_SetConfig+0x4b0>
 801278a:	009a      	lsls	r2, r3, #2
 801278c:	4b32      	ldr	r3, [pc, #200]	@ (8012858 <UART_SetConfig+0x538>)
 801278e:	18d3      	adds	r3, r2, r3
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012794:	f7fe f896 	bl	80108c4 <HAL_RCC_GetPCLK1Freq>
 8012798:	0003      	movs	r3, r0
 801279a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801279c:	e021      	b.n	80127e2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801279e:	f7fe f8a7 	bl	80108f0 <HAL_RCC_GetPCLK2Freq>
 80127a2:	0003      	movs	r3, r0
 80127a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80127a6:	e01c      	b.n	80127e2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80127a8:	4b28      	ldr	r3, [pc, #160]	@ (801284c <UART_SetConfig+0x52c>)
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	2210      	movs	r2, #16
 80127ae:	4013      	ands	r3, r2
 80127b0:	d002      	beq.n	80127b8 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80127b2:	4b27      	ldr	r3, [pc, #156]	@ (8012850 <UART_SetConfig+0x530>)
 80127b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80127b6:	e014      	b.n	80127e2 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80127b8:	4b26      	ldr	r3, [pc, #152]	@ (8012854 <UART_SetConfig+0x534>)
 80127ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80127bc:	e011      	b.n	80127e2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80127be:	f7fd ffd1 	bl	8010764 <HAL_RCC_GetSysClockFreq>
 80127c2:	0003      	movs	r3, r0
 80127c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80127c6:	e00c      	b.n	80127e2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80127c8:	2380      	movs	r3, #128	@ 0x80
 80127ca:	021b      	lsls	r3, r3, #8
 80127cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80127ce:	e008      	b.n	80127e2 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80127d0:	2300      	movs	r3, #0
 80127d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80127d4:	231a      	movs	r3, #26
 80127d6:	2218      	movs	r2, #24
 80127d8:	189b      	adds	r3, r3, r2
 80127da:	19db      	adds	r3, r3, r7
 80127dc:	2201      	movs	r2, #1
 80127de:	701a      	strb	r2, [r3, #0]
        break;
 80127e0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80127e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d020      	beq.n	801282a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80127e8:	69fb      	ldr	r3, [r7, #28]
 80127ea:	685b      	ldr	r3, [r3, #4]
 80127ec:	085a      	lsrs	r2, r3, #1
 80127ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127f0:	18d2      	adds	r2, r2, r3
 80127f2:	69fb      	ldr	r3, [r7, #28]
 80127f4:	685b      	ldr	r3, [r3, #4]
 80127f6:	0019      	movs	r1, r3
 80127f8:	0010      	movs	r0, r2
 80127fa:	f7ed fca1 	bl	8000140 <__udivsi3>
 80127fe:	0003      	movs	r3, r0
 8012800:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012804:	2b0f      	cmp	r3, #15
 8012806:	d90a      	bls.n	801281e <UART_SetConfig+0x4fe>
 8012808:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801280a:	2380      	movs	r3, #128	@ 0x80
 801280c:	025b      	lsls	r3, r3, #9
 801280e:	429a      	cmp	r2, r3
 8012810:	d205      	bcs.n	801281e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012814:	b29a      	uxth	r2, r3
 8012816:	69fb      	ldr	r3, [r7, #28]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	60da      	str	r2, [r3, #12]
 801281c:	e005      	b.n	801282a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801281e:	231a      	movs	r3, #26
 8012820:	2218      	movs	r2, #24
 8012822:	189b      	adds	r3, r3, r2
 8012824:	19db      	adds	r3, r3, r7
 8012826:	2201      	movs	r2, #1
 8012828:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801282a:	69fb      	ldr	r3, [r7, #28]
 801282c:	2200      	movs	r2, #0
 801282e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8012830:	69fb      	ldr	r3, [r7, #28]
 8012832:	2200      	movs	r2, #0
 8012834:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8012836:	231a      	movs	r3, #26
 8012838:	2218      	movs	r2, #24
 801283a:	189b      	adds	r3, r3, r2
 801283c:	19db      	adds	r3, r3, r7
 801283e:	781b      	ldrb	r3, [r3, #0]
}
 8012840:	0018      	movs	r0, r3
 8012842:	46bd      	mov	sp, r7
 8012844:	b00e      	add	sp, #56	@ 0x38
 8012846:	bdb0      	pop	{r4, r5, r7, pc}
 8012848:	0801c080 	.word	0x0801c080
 801284c:	40021000 	.word	0x40021000
 8012850:	003d0900 	.word	0x003d0900
 8012854:	00f42400 	.word	0x00f42400
 8012858:	0801c0a4 	.word	0x0801c0a4

0801285c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b082      	sub	sp, #8
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012868:	2201      	movs	r2, #1
 801286a:	4013      	ands	r3, r2
 801286c:	d00b      	beq.n	8012886 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	685b      	ldr	r3, [r3, #4]
 8012874:	4a4a      	ldr	r2, [pc, #296]	@ (80129a0 <UART_AdvFeatureConfig+0x144>)
 8012876:	4013      	ands	r3, r2
 8012878:	0019      	movs	r1, r3
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	430a      	orrs	r2, r1
 8012884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801288a:	2202      	movs	r2, #2
 801288c:	4013      	ands	r3, r2
 801288e:	d00b      	beq.n	80128a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	685b      	ldr	r3, [r3, #4]
 8012896:	4a43      	ldr	r2, [pc, #268]	@ (80129a4 <UART_AdvFeatureConfig+0x148>)
 8012898:	4013      	ands	r3, r2
 801289a:	0019      	movs	r1, r3
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	430a      	orrs	r2, r1
 80128a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128ac:	2204      	movs	r2, #4
 80128ae:	4013      	ands	r3, r2
 80128b0:	d00b      	beq.n	80128ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	685b      	ldr	r3, [r3, #4]
 80128b8:	4a3b      	ldr	r2, [pc, #236]	@ (80129a8 <UART_AdvFeatureConfig+0x14c>)
 80128ba:	4013      	ands	r3, r2
 80128bc:	0019      	movs	r1, r3
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	430a      	orrs	r2, r1
 80128c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128ce:	2208      	movs	r2, #8
 80128d0:	4013      	ands	r3, r2
 80128d2:	d00b      	beq.n	80128ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	685b      	ldr	r3, [r3, #4]
 80128da:	4a34      	ldr	r2, [pc, #208]	@ (80129ac <UART_AdvFeatureConfig+0x150>)
 80128dc:	4013      	ands	r3, r2
 80128de:	0019      	movs	r1, r3
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	430a      	orrs	r2, r1
 80128ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80128f0:	2210      	movs	r2, #16
 80128f2:	4013      	ands	r3, r2
 80128f4:	d00b      	beq.n	801290e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	689b      	ldr	r3, [r3, #8]
 80128fc:	4a2c      	ldr	r2, [pc, #176]	@ (80129b0 <UART_AdvFeatureConfig+0x154>)
 80128fe:	4013      	ands	r3, r2
 8012900:	0019      	movs	r1, r3
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	430a      	orrs	r2, r1
 801290c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012912:	2220      	movs	r2, #32
 8012914:	4013      	ands	r3, r2
 8012916:	d00b      	beq.n	8012930 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	689b      	ldr	r3, [r3, #8]
 801291e:	4a25      	ldr	r2, [pc, #148]	@ (80129b4 <UART_AdvFeatureConfig+0x158>)
 8012920:	4013      	ands	r3, r2
 8012922:	0019      	movs	r1, r3
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	430a      	orrs	r2, r1
 801292e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012934:	2240      	movs	r2, #64	@ 0x40
 8012936:	4013      	ands	r3, r2
 8012938:	d01d      	beq.n	8012976 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	685b      	ldr	r3, [r3, #4]
 8012940:	4a1d      	ldr	r2, [pc, #116]	@ (80129b8 <UART_AdvFeatureConfig+0x15c>)
 8012942:	4013      	ands	r3, r2
 8012944:	0019      	movs	r1, r3
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	430a      	orrs	r2, r1
 8012950:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012956:	2380      	movs	r3, #128	@ 0x80
 8012958:	035b      	lsls	r3, r3, #13
 801295a:	429a      	cmp	r2, r3
 801295c:	d10b      	bne.n	8012976 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	685b      	ldr	r3, [r3, #4]
 8012964:	4a15      	ldr	r2, [pc, #84]	@ (80129bc <UART_AdvFeatureConfig+0x160>)
 8012966:	4013      	ands	r3, r2
 8012968:	0019      	movs	r1, r3
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	430a      	orrs	r2, r1
 8012974:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801297a:	2280      	movs	r2, #128	@ 0x80
 801297c:	4013      	ands	r3, r2
 801297e:	d00b      	beq.n	8012998 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	685b      	ldr	r3, [r3, #4]
 8012986:	4a0e      	ldr	r2, [pc, #56]	@ (80129c0 <UART_AdvFeatureConfig+0x164>)
 8012988:	4013      	ands	r3, r2
 801298a:	0019      	movs	r1, r3
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	430a      	orrs	r2, r1
 8012996:	605a      	str	r2, [r3, #4]
  }
}
 8012998:	46c0      	nop			@ (mov r8, r8)
 801299a:	46bd      	mov	sp, r7
 801299c:	b002      	add	sp, #8
 801299e:	bd80      	pop	{r7, pc}
 80129a0:	fffdffff 	.word	0xfffdffff
 80129a4:	fffeffff 	.word	0xfffeffff
 80129a8:	fffbffff 	.word	0xfffbffff
 80129ac:	ffff7fff 	.word	0xffff7fff
 80129b0:	ffffefff 	.word	0xffffefff
 80129b4:	ffffdfff 	.word	0xffffdfff
 80129b8:	ffefffff 	.word	0xffefffff
 80129bc:	ff9fffff 	.word	0xff9fffff
 80129c0:	fff7ffff 	.word	0xfff7ffff

080129c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b092      	sub	sp, #72	@ 0x48
 80129c8:	af02      	add	r7, sp, #8
 80129ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	2284      	movs	r2, #132	@ 0x84
 80129d0:	2100      	movs	r1, #0
 80129d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80129d4:	f7f7 fc30 	bl	800a238 <HAL_GetTick>
 80129d8:	0003      	movs	r3, r0
 80129da:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	2208      	movs	r2, #8
 80129e4:	4013      	ands	r3, r2
 80129e6:	2b08      	cmp	r3, #8
 80129e8:	d12c      	bne.n	8012a44 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80129ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80129ec:	2280      	movs	r2, #128	@ 0x80
 80129ee:	0391      	lsls	r1, r2, #14
 80129f0:	6878      	ldr	r0, [r7, #4]
 80129f2:	4a46      	ldr	r2, [pc, #280]	@ (8012b0c <UART_CheckIdleState+0x148>)
 80129f4:	9200      	str	r2, [sp, #0]
 80129f6:	2200      	movs	r2, #0
 80129f8:	f000 f88c 	bl	8012b14 <UART_WaitOnFlagUntilTimeout>
 80129fc:	1e03      	subs	r3, r0, #0
 80129fe:	d021      	beq.n	8012a44 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a00:	f3ef 8310 	mrs	r3, PRIMASK
 8012a04:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8012a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8012a08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012a0a:	2301      	movs	r3, #1
 8012a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a10:	f383 8810 	msr	PRIMASK, r3
}
 8012a14:	46c0      	nop			@ (mov r8, r8)
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	681a      	ldr	r2, [r3, #0]
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	2180      	movs	r1, #128	@ 0x80
 8012a22:	438a      	bics	r2, r1
 8012a24:	601a      	str	r2, [r3, #0]
 8012a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a2c:	f383 8810 	msr	PRIMASK, r3
}
 8012a30:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	2220      	movs	r2, #32
 8012a36:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	2278      	movs	r2, #120	@ 0x78
 8012a3c:	2100      	movs	r1, #0
 8012a3e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012a40:	2303      	movs	r3, #3
 8012a42:	e05f      	b.n	8012b04 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	2204      	movs	r2, #4
 8012a4c:	4013      	ands	r3, r2
 8012a4e:	2b04      	cmp	r3, #4
 8012a50:	d146      	bne.n	8012ae0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a54:	2280      	movs	r2, #128	@ 0x80
 8012a56:	03d1      	lsls	r1, r2, #15
 8012a58:	6878      	ldr	r0, [r7, #4]
 8012a5a:	4a2c      	ldr	r2, [pc, #176]	@ (8012b0c <UART_CheckIdleState+0x148>)
 8012a5c:	9200      	str	r2, [sp, #0]
 8012a5e:	2200      	movs	r2, #0
 8012a60:	f000 f858 	bl	8012b14 <UART_WaitOnFlagUntilTimeout>
 8012a64:	1e03      	subs	r3, r0, #0
 8012a66:	d03b      	beq.n	8012ae0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a68:	f3ef 8310 	mrs	r3, PRIMASK
 8012a6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8012a6e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012a70:	637b      	str	r3, [r7, #52]	@ 0x34
 8012a72:	2301      	movs	r3, #1
 8012a74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a76:	693b      	ldr	r3, [r7, #16]
 8012a78:	f383 8810 	msr	PRIMASK, r3
}
 8012a7c:	46c0      	nop			@ (mov r8, r8)
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	681a      	ldr	r2, [r3, #0]
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	4921      	ldr	r1, [pc, #132]	@ (8012b10 <UART_CheckIdleState+0x14c>)
 8012a8a:	400a      	ands	r2, r1
 8012a8c:	601a      	str	r2, [r3, #0]
 8012a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a92:	697b      	ldr	r3, [r7, #20]
 8012a94:	f383 8810 	msr	PRIMASK, r3
}
 8012a98:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8012a9e:	61bb      	str	r3, [r7, #24]
  return(result);
 8012aa0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012aa2:	633b      	str	r3, [r7, #48]	@ 0x30
 8012aa4:	2301      	movs	r3, #1
 8012aa6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012aa8:	69fb      	ldr	r3, [r7, #28]
 8012aaa:	f383 8810 	msr	PRIMASK, r3
}
 8012aae:	46c0      	nop			@ (mov r8, r8)
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	689a      	ldr	r2, [r3, #8]
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	2101      	movs	r1, #1
 8012abc:	438a      	bics	r2, r1
 8012abe:	609a      	str	r2, [r3, #8]
 8012ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ac2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ac4:	6a3b      	ldr	r3, [r7, #32]
 8012ac6:	f383 8810 	msr	PRIMASK, r3
}
 8012aca:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	2280      	movs	r2, #128	@ 0x80
 8012ad0:	2120      	movs	r1, #32
 8012ad2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	2278      	movs	r2, #120	@ 0x78
 8012ad8:	2100      	movs	r1, #0
 8012ada:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012adc:	2303      	movs	r3, #3
 8012ade:	e011      	b.n	8012b04 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	2220      	movs	r2, #32
 8012ae4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	2280      	movs	r2, #128	@ 0x80
 8012aea:	2120      	movs	r1, #32
 8012aec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	2200      	movs	r2, #0
 8012af2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	2200      	movs	r2, #0
 8012af8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	2278      	movs	r2, #120	@ 0x78
 8012afe:	2100      	movs	r1, #0
 8012b00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012b02:	2300      	movs	r3, #0
}
 8012b04:	0018      	movs	r0, r3
 8012b06:	46bd      	mov	sp, r7
 8012b08:	b010      	add	sp, #64	@ 0x40
 8012b0a:	bd80      	pop	{r7, pc}
 8012b0c:	01ffffff 	.word	0x01ffffff
 8012b10:	fffffedf 	.word	0xfffffedf

08012b14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012b14:	b580      	push	{r7, lr}
 8012b16:	b084      	sub	sp, #16
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	60f8      	str	r0, [r7, #12]
 8012b1c:	60b9      	str	r1, [r7, #8]
 8012b1e:	603b      	str	r3, [r7, #0]
 8012b20:	1dfb      	adds	r3, r7, #7
 8012b22:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012b24:	e04b      	b.n	8012bbe <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012b26:	69bb      	ldr	r3, [r7, #24]
 8012b28:	3301      	adds	r3, #1
 8012b2a:	d048      	beq.n	8012bbe <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012b2c:	f7f7 fb84 	bl	800a238 <HAL_GetTick>
 8012b30:	0002      	movs	r2, r0
 8012b32:	683b      	ldr	r3, [r7, #0]
 8012b34:	1ad3      	subs	r3, r2, r3
 8012b36:	69ba      	ldr	r2, [r7, #24]
 8012b38:	429a      	cmp	r2, r3
 8012b3a:	d302      	bcc.n	8012b42 <UART_WaitOnFlagUntilTimeout+0x2e>
 8012b3c:	69bb      	ldr	r3, [r7, #24]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d101      	bne.n	8012b46 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8012b42:	2303      	movs	r3, #3
 8012b44:	e04b      	b.n	8012bde <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	2204      	movs	r2, #4
 8012b4e:	4013      	ands	r3, r2
 8012b50:	d035      	beq.n	8012bbe <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	69db      	ldr	r3, [r3, #28]
 8012b58:	2208      	movs	r2, #8
 8012b5a:	4013      	ands	r3, r2
 8012b5c:	2b08      	cmp	r3, #8
 8012b5e:	d111      	bne.n	8012b84 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	2208      	movs	r2, #8
 8012b66:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	0018      	movs	r0, r3
 8012b6c:	f000 f900 	bl	8012d70 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	2284      	movs	r2, #132	@ 0x84
 8012b74:	2108      	movs	r1, #8
 8012b76:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	2278      	movs	r2, #120	@ 0x78
 8012b7c:	2100      	movs	r1, #0
 8012b7e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8012b80:	2301      	movs	r3, #1
 8012b82:	e02c      	b.n	8012bde <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	69da      	ldr	r2, [r3, #28]
 8012b8a:	2380      	movs	r3, #128	@ 0x80
 8012b8c:	011b      	lsls	r3, r3, #4
 8012b8e:	401a      	ands	r2, r3
 8012b90:	2380      	movs	r3, #128	@ 0x80
 8012b92:	011b      	lsls	r3, r3, #4
 8012b94:	429a      	cmp	r2, r3
 8012b96:	d112      	bne.n	8012bbe <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	2280      	movs	r2, #128	@ 0x80
 8012b9e:	0112      	lsls	r2, r2, #4
 8012ba0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	0018      	movs	r0, r3
 8012ba6:	f000 f8e3 	bl	8012d70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	2284      	movs	r2, #132	@ 0x84
 8012bae:	2120      	movs	r1, #32
 8012bb0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	2278      	movs	r2, #120	@ 0x78
 8012bb6:	2100      	movs	r1, #0
 8012bb8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8012bba:	2303      	movs	r3, #3
 8012bbc:	e00f      	b.n	8012bde <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	69db      	ldr	r3, [r3, #28]
 8012bc4:	68ba      	ldr	r2, [r7, #8]
 8012bc6:	4013      	ands	r3, r2
 8012bc8:	68ba      	ldr	r2, [r7, #8]
 8012bca:	1ad3      	subs	r3, r2, r3
 8012bcc:	425a      	negs	r2, r3
 8012bce:	4153      	adcs	r3, r2
 8012bd0:	b2db      	uxtb	r3, r3
 8012bd2:	001a      	movs	r2, r3
 8012bd4:	1dfb      	adds	r3, r7, #7
 8012bd6:	781b      	ldrb	r3, [r3, #0]
 8012bd8:	429a      	cmp	r2, r3
 8012bda:	d0a4      	beq.n	8012b26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012bdc:	2300      	movs	r3, #0
}
 8012bde:	0018      	movs	r0, r3
 8012be0:	46bd      	mov	sp, r7
 8012be2:	b004      	add	sp, #16
 8012be4:	bd80      	pop	{r7, pc}
	...

08012be8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b090      	sub	sp, #64	@ 0x40
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	60f8      	str	r0, [r7, #12]
 8012bf0:	60b9      	str	r1, [r7, #8]
 8012bf2:	1dbb      	adds	r3, r7, #6
 8012bf4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	68ba      	ldr	r2, [r7, #8]
 8012bfa:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	1dba      	adds	r2, r7, #6
 8012c00:	2158      	movs	r1, #88	@ 0x58
 8012c02:	8812      	ldrh	r2, [r2, #0]
 8012c04:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	2284      	movs	r2, #132	@ 0x84
 8012c0a:	2100      	movs	r1, #0
 8012c0c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	2280      	movs	r2, #128	@ 0x80
 8012c12:	2122      	movs	r1, #34	@ 0x22
 8012c14:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d028      	beq.n	8012c70 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012c22:	4a3e      	ldr	r2, [pc, #248]	@ (8012d1c <UART_Start_Receive_DMA+0x134>)
 8012c24:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012c2a:	4a3d      	ldr	r2, [pc, #244]	@ (8012d20 <UART_Start_Receive_DMA+0x138>)
 8012c2c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012c32:	4a3c      	ldr	r2, [pc, #240]	@ (8012d24 <UART_Start_Receive_DMA+0x13c>)
 8012c34:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	3324      	adds	r3, #36	@ 0x24
 8012c48:	0019      	movs	r1, r3
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012c4e:	001a      	movs	r2, r3
 8012c50:	1dbb      	adds	r3, r7, #6
 8012c52:	881b      	ldrh	r3, [r3, #0]
 8012c54:	f7f8 f86e 	bl	800ad34 <HAL_DMA_Start_IT>
 8012c58:	1e03      	subs	r3, r0, #0
 8012c5a:	d009      	beq.n	8012c70 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	2284      	movs	r2, #132	@ 0x84
 8012c60:	2110      	movs	r1, #16
 8012c62:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	2280      	movs	r2, #128	@ 0x80
 8012c68:	2120      	movs	r1, #32
 8012c6a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8012c6c:	2301      	movs	r3, #1
 8012c6e:	e050      	b.n	8012d12 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	691b      	ldr	r3, [r3, #16]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d019      	beq.n	8012cac <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012c78:	f3ef 8310 	mrs	r3, PRIMASK
 8012c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8012c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012c82:	2301      	movs	r3, #1
 8012c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012c88:	f383 8810 	msr	PRIMASK, r3
}
 8012c8c:	46c0      	nop			@ (mov r8, r8)
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	681a      	ldr	r2, [r3, #0]
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	2180      	movs	r1, #128	@ 0x80
 8012c9a:	0049      	lsls	r1, r1, #1
 8012c9c:	430a      	orrs	r2, r1
 8012c9e:	601a      	str	r2, [r3, #0]
 8012ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ca2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ca6:	f383 8810 	msr	PRIMASK, r3
}
 8012caa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012cac:	f3ef 8310 	mrs	r3, PRIMASK
 8012cb0:	613b      	str	r3, [r7, #16]
  return(result);
 8012cb2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012cb6:	2301      	movs	r3, #1
 8012cb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012cba:	697b      	ldr	r3, [r7, #20]
 8012cbc:	f383 8810 	msr	PRIMASK, r3
}
 8012cc0:	46c0      	nop			@ (mov r8, r8)
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	689a      	ldr	r2, [r3, #8]
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	2101      	movs	r1, #1
 8012cce:	430a      	orrs	r2, r1
 8012cd0:	609a      	str	r2, [r3, #8]
 8012cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012cd4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012cd6:	69bb      	ldr	r3, [r7, #24]
 8012cd8:	f383 8810 	msr	PRIMASK, r3
}
 8012cdc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012cde:	f3ef 8310 	mrs	r3, PRIMASK
 8012ce2:	61fb      	str	r3, [r7, #28]
  return(result);
 8012ce4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012ce6:	637b      	str	r3, [r7, #52]	@ 0x34
 8012ce8:	2301      	movs	r3, #1
 8012cea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012cec:	6a3b      	ldr	r3, [r7, #32]
 8012cee:	f383 8810 	msr	PRIMASK, r3
}
 8012cf2:	46c0      	nop			@ (mov r8, r8)
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	689a      	ldr	r2, [r3, #8]
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	2140      	movs	r1, #64	@ 0x40
 8012d00:	430a      	orrs	r2, r1
 8012d02:	609a      	str	r2, [r3, #8]
 8012d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d06:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d0a:	f383 8810 	msr	PRIMASK, r3
}
 8012d0e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8012d10:	2300      	movs	r3, #0
}
 8012d12:	0018      	movs	r0, r3
 8012d14:	46bd      	mov	sp, r7
 8012d16:	b010      	add	sp, #64	@ 0x40
 8012d18:	bd80      	pop	{r7, pc}
 8012d1a:	46c0      	nop			@ (mov r8, r8)
 8012d1c:	08012ef9 	.word	0x08012ef9
 8012d20:	0801302d 	.word	0x0801302d
 8012d24:	08013075 	.word	0x08013075

08012d28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b086      	sub	sp, #24
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012d30:	f3ef 8310 	mrs	r3, PRIMASK
 8012d34:	60bb      	str	r3, [r7, #8]
  return(result);
 8012d36:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8012d38:	617b      	str	r3, [r7, #20]
 8012d3a:	2301      	movs	r3, #1
 8012d3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	f383 8810 	msr	PRIMASK, r3
}
 8012d44:	46c0      	nop			@ (mov r8, r8)
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	681a      	ldr	r2, [r3, #0]
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	21c0      	movs	r1, #192	@ 0xc0
 8012d52:	438a      	bics	r2, r1
 8012d54:	601a      	str	r2, [r3, #0]
 8012d56:	697b      	ldr	r3, [r7, #20]
 8012d58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012d5a:	693b      	ldr	r3, [r7, #16]
 8012d5c:	f383 8810 	msr	PRIMASK, r3
}
 8012d60:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	2220      	movs	r2, #32
 8012d66:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8012d68:	46c0      	nop			@ (mov r8, r8)
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	b006      	add	sp, #24
 8012d6e:	bd80      	pop	{r7, pc}

08012d70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b08e      	sub	sp, #56	@ 0x38
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012d78:	f3ef 8310 	mrs	r3, PRIMASK
 8012d7c:	617b      	str	r3, [r7, #20]
  return(result);
 8012d7e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012d80:	637b      	str	r3, [r7, #52]	@ 0x34
 8012d82:	2301      	movs	r3, #1
 8012d84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012d86:	69bb      	ldr	r3, [r7, #24]
 8012d88:	f383 8810 	msr	PRIMASK, r3
}
 8012d8c:	46c0      	nop			@ (mov r8, r8)
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	681a      	ldr	r2, [r3, #0]
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	4926      	ldr	r1, [pc, #152]	@ (8012e34 <UART_EndRxTransfer+0xc4>)
 8012d9a:	400a      	ands	r2, r1
 8012d9c:	601a      	str	r2, [r3, #0]
 8012d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012da0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012da2:	69fb      	ldr	r3, [r7, #28]
 8012da4:	f383 8810 	msr	PRIMASK, r3
}
 8012da8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012daa:	f3ef 8310 	mrs	r3, PRIMASK
 8012dae:	623b      	str	r3, [r7, #32]
  return(result);
 8012db0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012db2:	633b      	str	r3, [r7, #48]	@ 0x30
 8012db4:	2301      	movs	r3, #1
 8012db6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dba:	f383 8810 	msr	PRIMASK, r3
}
 8012dbe:	46c0      	nop			@ (mov r8, r8)
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	689a      	ldr	r2, [r3, #8]
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	2101      	movs	r1, #1
 8012dcc:	438a      	bics	r2, r1
 8012dce:	609a      	str	r2, [r3, #8]
 8012dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dd6:	f383 8810 	msr	PRIMASK, r3
}
 8012dda:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012de0:	2b01      	cmp	r3, #1
 8012de2:	d118      	bne.n	8012e16 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012de4:	f3ef 8310 	mrs	r3, PRIMASK
 8012de8:	60bb      	str	r3, [r7, #8]
  return(result);
 8012dea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012dee:	2301      	movs	r3, #1
 8012df0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	f383 8810 	msr	PRIMASK, r3
}
 8012df8:	46c0      	nop			@ (mov r8, r8)
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	681a      	ldr	r2, [r3, #0]
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	2110      	movs	r1, #16
 8012e06:	438a      	bics	r2, r1
 8012e08:	601a      	str	r2, [r3, #0]
 8012e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e0e:	693b      	ldr	r3, [r7, #16]
 8012e10:	f383 8810 	msr	PRIMASK, r3
}
 8012e14:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	2280      	movs	r2, #128	@ 0x80
 8012e1a:	2120      	movs	r1, #32
 8012e1c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	2200      	movs	r2, #0
 8012e22:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	2200      	movs	r2, #0
 8012e28:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8012e2a:	46c0      	nop			@ (mov r8, r8)
 8012e2c:	46bd      	mov	sp, r7
 8012e2e:	b00e      	add	sp, #56	@ 0x38
 8012e30:	bd80      	pop	{r7, pc}
 8012e32:	46c0      	nop			@ (mov r8, r8)
 8012e34:	fffffedf 	.word	0xfffffedf

08012e38 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b08c      	sub	sp, #48	@ 0x30
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012e44:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	2220      	movs	r2, #32
 8012e4e:	4013      	ands	r3, r2
 8012e50:	d135      	bne.n	8012ebe <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8012e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e54:	2252      	movs	r2, #82	@ 0x52
 8012e56:	2100      	movs	r1, #0
 8012e58:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8012e5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8012e60:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012e62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012e64:	2301      	movs	r3, #1
 8012e66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e68:	693b      	ldr	r3, [r7, #16]
 8012e6a:	f383 8810 	msr	PRIMASK, r3
}
 8012e6e:	46c0      	nop			@ (mov r8, r8)
 8012e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	689a      	ldr	r2, [r3, #8]
 8012e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	2180      	movs	r1, #128	@ 0x80
 8012e7c:	438a      	bics	r2, r1
 8012e7e:	609a      	str	r2, [r3, #8]
 8012e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e84:	697b      	ldr	r3, [r7, #20]
 8012e86:	f383 8810 	msr	PRIMASK, r3
}
 8012e8a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8012e90:	61bb      	str	r3, [r7, #24]
  return(result);
 8012e92:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012e94:	627b      	str	r3, [r7, #36]	@ 0x24
 8012e96:	2301      	movs	r3, #1
 8012e98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012e9a:	69fb      	ldr	r3, [r7, #28]
 8012e9c:	f383 8810 	msr	PRIMASK, r3
}
 8012ea0:	46c0      	nop			@ (mov r8, r8)
 8012ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	681a      	ldr	r2, [r3, #0]
 8012ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	2140      	movs	r1, #64	@ 0x40
 8012eae:	430a      	orrs	r2, r1
 8012eb0:	601a      	str	r2, [r3, #0]
 8012eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012eb4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012eb6:	6a3b      	ldr	r3, [r7, #32]
 8012eb8:	f383 8810 	msr	PRIMASK, r3
}
 8012ebc:	e006      	b.n	8012ecc <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8012ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ec0:	228c      	movs	r2, #140	@ 0x8c
 8012ec2:	589b      	ldr	r3, [r3, r2]
 8012ec4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012ec6:	0010      	movs	r0, r2
 8012ec8:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012eca:	46c0      	nop			@ (mov r8, r8)
 8012ecc:	46c0      	nop			@ (mov r8, r8)
 8012ece:	46bd      	mov	sp, r7
 8012ed0:	b00c      	add	sp, #48	@ 0x30
 8012ed2:	bd80      	pop	{r7, pc}

08012ed4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b084      	sub	sp, #16
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ee0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	2288      	movs	r2, #136	@ 0x88
 8012ee6:	589b      	ldr	r3, [r3, r2]
 8012ee8:	68fa      	ldr	r2, [r7, #12]
 8012eea:	0010      	movs	r0, r2
 8012eec:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012eee:	46c0      	nop			@ (mov r8, r8)
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	b004      	add	sp, #16
 8012ef4:	bd80      	pop	{r7, pc}
	...

08012ef8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b094      	sub	sp, #80	@ 0x50
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f04:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	2220      	movs	r2, #32
 8012f0e:	4013      	ands	r3, r2
 8012f10:	d16f      	bne.n	8012ff2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8012f12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f14:	225a      	movs	r2, #90	@ 0x5a
 8012f16:	2100      	movs	r1, #0
 8012f18:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012f1a:	f3ef 8310 	mrs	r3, PRIMASK
 8012f1e:	61bb      	str	r3, [r7, #24]
  return(result);
 8012f20:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012f22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012f24:	2301      	movs	r3, #1
 8012f26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f28:	69fb      	ldr	r3, [r7, #28]
 8012f2a:	f383 8810 	msr	PRIMASK, r3
}
 8012f2e:	46c0      	nop			@ (mov r8, r8)
 8012f30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	681a      	ldr	r2, [r3, #0]
 8012f36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	493b      	ldr	r1, [pc, #236]	@ (8013028 <UART_DMAReceiveCplt+0x130>)
 8012f3c:	400a      	ands	r2, r1
 8012f3e:	601a      	str	r2, [r3, #0]
 8012f40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012f42:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f44:	6a3b      	ldr	r3, [r7, #32]
 8012f46:	f383 8810 	msr	PRIMASK, r3
}
 8012f4a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012f4c:	f3ef 8310 	mrs	r3, PRIMASK
 8012f50:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8012f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012f54:	647b      	str	r3, [r7, #68]	@ 0x44
 8012f56:	2301      	movs	r3, #1
 8012f58:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f5c:	f383 8810 	msr	PRIMASK, r3
}
 8012f60:	46c0      	nop			@ (mov r8, r8)
 8012f62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	689a      	ldr	r2, [r3, #8]
 8012f68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	2101      	movs	r1, #1
 8012f6e:	438a      	bics	r2, r1
 8012f70:	609a      	str	r2, [r3, #8]
 8012f72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f78:	f383 8810 	msr	PRIMASK, r3
}
 8012f7c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8012f82:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8012f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012f86:	643b      	str	r3, [r7, #64]	@ 0x40
 8012f88:	2301      	movs	r3, #1
 8012f8a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f8e:	f383 8810 	msr	PRIMASK, r3
}
 8012f92:	46c0      	nop			@ (mov r8, r8)
 8012f94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	689a      	ldr	r2, [r3, #8]
 8012f9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	2140      	movs	r1, #64	@ 0x40
 8012fa0:	438a      	bics	r2, r1
 8012fa2:	609a      	str	r2, [r3, #8]
 8012fa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012faa:	f383 8810 	msr	PRIMASK, r3
}
 8012fae:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012fb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012fb2:	2280      	movs	r2, #128	@ 0x80
 8012fb4:	2120      	movs	r1, #32
 8012fb6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012fb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012fbc:	2b01      	cmp	r3, #1
 8012fbe:	d118      	bne.n	8012ff2 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8012fc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8012fc6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012fca:	2301      	movs	r3, #1
 8012fcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012fce:	693b      	ldr	r3, [r7, #16]
 8012fd0:	f383 8810 	msr	PRIMASK, r3
}
 8012fd4:	46c0      	nop			@ (mov r8, r8)
 8012fd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	681a      	ldr	r2, [r3, #0]
 8012fdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	2110      	movs	r1, #16
 8012fe2:	438a      	bics	r2, r1
 8012fe4:	601a      	str	r2, [r3, #0]
 8012fe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012fe8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012fea:	697b      	ldr	r3, [r7, #20]
 8012fec:	f383 8810 	msr	PRIMASK, r3
}
 8012ff0:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012ff2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012ff4:	2200      	movs	r2, #0
 8012ff6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012ff8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012ffc:	2b01      	cmp	r3, #1
 8012ffe:	d109      	bne.n	8013014 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8013000:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013002:	22ac      	movs	r2, #172	@ 0xac
 8013004:	589b      	ldr	r3, [r3, r2]
 8013006:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013008:	2158      	movs	r1, #88	@ 0x58
 801300a:	5a51      	ldrh	r1, [r2, r1]
 801300c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801300e:	0010      	movs	r0, r2
 8013010:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013012:	e005      	b.n	8013020 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8013014:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013016:	2294      	movs	r2, #148	@ 0x94
 8013018:	589b      	ldr	r3, [r3, r2]
 801301a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801301c:	0010      	movs	r0, r2
 801301e:	4798      	blx	r3
}
 8013020:	46c0      	nop			@ (mov r8, r8)
 8013022:	46bd      	mov	sp, r7
 8013024:	b014      	add	sp, #80	@ 0x50
 8013026:	bd80      	pop	{r7, pc}
 8013028:	fffffeff 	.word	0xfffffeff

0801302c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801302c:	b580      	push	{r7, lr}
 801302e:	b084      	sub	sp, #16
 8013030:	af00      	add	r7, sp, #0
 8013032:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013038:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	2201      	movs	r2, #1
 801303e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013044:	2b01      	cmp	r3, #1
 8013046:	d10b      	bne.n	8013060 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	22ac      	movs	r2, #172	@ 0xac
 801304c:	589b      	ldr	r3, [r3, r2]
 801304e:	68fa      	ldr	r2, [r7, #12]
 8013050:	2158      	movs	r1, #88	@ 0x58
 8013052:	5a52      	ldrh	r2, [r2, r1]
 8013054:	0852      	lsrs	r2, r2, #1
 8013056:	b291      	uxth	r1, r2
 8013058:	68fa      	ldr	r2, [r7, #12]
 801305a:	0010      	movs	r0, r2
 801305c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801305e:	e005      	b.n	801306c <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	2290      	movs	r2, #144	@ 0x90
 8013064:	589b      	ldr	r3, [r3, r2]
 8013066:	68fa      	ldr	r2, [r7, #12]
 8013068:	0010      	movs	r0, r2
 801306a:	4798      	blx	r3
}
 801306c:	46c0      	nop			@ (mov r8, r8)
 801306e:	46bd      	mov	sp, r7
 8013070:	b004      	add	sp, #16
 8013072:	bd80      	pop	{r7, pc}

08013074 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013074:	b580      	push	{r7, lr}
 8013076:	b086      	sub	sp, #24
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013080:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8013082:	697b      	ldr	r3, [r7, #20]
 8013084:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013086:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8013088:	697b      	ldr	r3, [r7, #20]
 801308a:	2280      	movs	r2, #128	@ 0x80
 801308c:	589b      	ldr	r3, [r3, r2]
 801308e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8013090:	697b      	ldr	r3, [r7, #20]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	689b      	ldr	r3, [r3, #8]
 8013096:	2280      	movs	r2, #128	@ 0x80
 8013098:	4013      	ands	r3, r2
 801309a:	2b80      	cmp	r3, #128	@ 0x80
 801309c:	d10a      	bne.n	80130b4 <UART_DMAError+0x40>
 801309e:	693b      	ldr	r3, [r7, #16]
 80130a0:	2b21      	cmp	r3, #33	@ 0x21
 80130a2:	d107      	bne.n	80130b4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80130a4:	697b      	ldr	r3, [r7, #20]
 80130a6:	2252      	movs	r2, #82	@ 0x52
 80130a8:	2100      	movs	r1, #0
 80130aa:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80130ac:	697b      	ldr	r3, [r7, #20]
 80130ae:	0018      	movs	r0, r3
 80130b0:	f7ff fe3a 	bl	8012d28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80130b4:	697b      	ldr	r3, [r7, #20]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	689b      	ldr	r3, [r3, #8]
 80130ba:	2240      	movs	r2, #64	@ 0x40
 80130bc:	4013      	ands	r3, r2
 80130be:	2b40      	cmp	r3, #64	@ 0x40
 80130c0:	d10a      	bne.n	80130d8 <UART_DMAError+0x64>
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	2b22      	cmp	r3, #34	@ 0x22
 80130c6:	d107      	bne.n	80130d8 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80130c8:	697b      	ldr	r3, [r7, #20]
 80130ca:	225a      	movs	r2, #90	@ 0x5a
 80130cc:	2100      	movs	r1, #0
 80130ce:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80130d0:	697b      	ldr	r3, [r7, #20]
 80130d2:	0018      	movs	r0, r3
 80130d4:	f7ff fe4c 	bl	8012d70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80130d8:	697b      	ldr	r3, [r7, #20]
 80130da:	2284      	movs	r2, #132	@ 0x84
 80130dc:	589b      	ldr	r3, [r3, r2]
 80130de:	2210      	movs	r2, #16
 80130e0:	431a      	orrs	r2, r3
 80130e2:	697b      	ldr	r3, [r7, #20]
 80130e4:	2184      	movs	r1, #132	@ 0x84
 80130e6:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80130e8:	697b      	ldr	r3, [r7, #20]
 80130ea:	2298      	movs	r2, #152	@ 0x98
 80130ec:	589b      	ldr	r3, [r3, r2]
 80130ee:	697a      	ldr	r2, [r7, #20]
 80130f0:	0010      	movs	r0, r2
 80130f2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80130f4:	46c0      	nop			@ (mov r8, r8)
 80130f6:	46bd      	mov	sp, r7
 80130f8:	b006      	add	sp, #24
 80130fa:	bd80      	pop	{r7, pc}

080130fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b084      	sub	sp, #16
 8013100:	af00      	add	r7, sp, #0
 8013102:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013108:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	225a      	movs	r2, #90	@ 0x5a
 801310e:	2100      	movs	r1, #0
 8013110:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	2252      	movs	r2, #82	@ 0x52
 8013116:	2100      	movs	r1, #0
 8013118:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	2298      	movs	r2, #152	@ 0x98
 801311e:	589b      	ldr	r3, [r3, r2]
 8013120:	68fa      	ldr	r2, [r7, #12]
 8013122:	0010      	movs	r0, r2
 8013124:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013126:	46c0      	nop			@ (mov r8, r8)
 8013128:	46bd      	mov	sp, r7
 801312a:	b004      	add	sp, #16
 801312c:	bd80      	pop	{r7, pc}

0801312e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801312e:	b580      	push	{r7, lr}
 8013130:	b086      	sub	sp, #24
 8013132:	af00      	add	r7, sp, #0
 8013134:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013136:	f3ef 8310 	mrs	r3, PRIMASK
 801313a:	60bb      	str	r3, [r7, #8]
  return(result);
 801313c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801313e:	617b      	str	r3, [r7, #20]
 8013140:	2301      	movs	r3, #1
 8013142:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	f383 8810 	msr	PRIMASK, r3
}
 801314a:	46c0      	nop			@ (mov r8, r8)
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	681a      	ldr	r2, [r3, #0]
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	2140      	movs	r1, #64	@ 0x40
 8013158:	438a      	bics	r2, r1
 801315a:	601a      	str	r2, [r3, #0]
 801315c:	697b      	ldr	r3, [r7, #20]
 801315e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013160:	693b      	ldr	r3, [r7, #16]
 8013162:	f383 8810 	msr	PRIMASK, r3
}
 8013166:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	2220      	movs	r2, #32
 801316c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	2200      	movs	r2, #0
 8013172:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	228c      	movs	r2, #140	@ 0x8c
 8013178:	589b      	ldr	r3, [r3, r2]
 801317a:	687a      	ldr	r2, [r7, #4]
 801317c:	0010      	movs	r0, r2
 801317e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013180:	46c0      	nop			@ (mov r8, r8)
 8013182:	46bd      	mov	sp, r7
 8013184:	b006      	add	sp, #24
 8013186:	bd80      	pop	{r7, pc}

08013188 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8013188:	b580      	push	{r7, lr}
 801318a:	b082      	sub	sp, #8
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8013190:	46c0      	nop			@ (mov r8, r8)
 8013192:	46bd      	mov	sp, r7
 8013194:	b002      	add	sp, #8
 8013196:	bd80      	pop	{r7, pc}

08013198 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b084      	sub	sp, #16
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	2244      	movs	r2, #68	@ 0x44
 80131a4:	2100      	movs	r1, #0
 80131a6:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80131a8:	4b05      	ldr	r3, [pc, #20]	@ (80131c0 <USB_EnableGlobalInt+0x28>)
 80131aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	b299      	uxth	r1, r3
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	2240      	movs	r2, #64	@ 0x40
 80131b4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80131b6:	2300      	movs	r3, #0
}
 80131b8:	0018      	movs	r0, r3
 80131ba:	46bd      	mov	sp, r7
 80131bc:	b004      	add	sp, #16
 80131be:	bd80      	pop	{r7, pc}
 80131c0:	0000bf80 	.word	0x0000bf80

080131c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b084      	sub	sp, #16
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80131cc:	4b09      	ldr	r3, [pc, #36]	@ (80131f4 <USB_DisableGlobalInt+0x30>)
 80131ce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	2240      	movs	r2, #64	@ 0x40
 80131d4:	5a9b      	ldrh	r3, [r3, r2]
 80131d6:	b29b      	uxth	r3, r3
 80131d8:	68fa      	ldr	r2, [r7, #12]
 80131da:	b292      	uxth	r2, r2
 80131dc:	43d2      	mvns	r2, r2
 80131de:	b292      	uxth	r2, r2
 80131e0:	4013      	ands	r3, r2
 80131e2:	b299      	uxth	r1, r3
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	2240      	movs	r2, #64	@ 0x40
 80131e8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80131ea:	2300      	movs	r3, #0
}
 80131ec:	0018      	movs	r0, r3
 80131ee:	46bd      	mov	sp, r7
 80131f0:	b004      	add	sp, #16
 80131f2:	bd80      	pop	{r7, pc}
 80131f4:	0000bf80 	.word	0x0000bf80

080131f8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80131f8:	b084      	sub	sp, #16
 80131fa:	b590      	push	{r4, r7, lr}
 80131fc:	b083      	sub	sp, #12
 80131fe:	af00      	add	r7, sp, #0
 8013200:	6078      	str	r0, [r7, #4]
 8013202:	2004      	movs	r0, #4
 8013204:	2410      	movs	r4, #16
 8013206:	1900      	adds	r0, r0, r4
 8013208:	2408      	movs	r4, #8
 801320a:	46a4      	mov	ip, r4
 801320c:	44bc      	add	ip, r7
 801320e:	4460      	add	r0, ip
 8013210:	6001      	str	r1, [r0, #0]
 8013212:	6042      	str	r2, [r0, #4]
 8013214:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	2240      	movs	r2, #64	@ 0x40
 801321a:	2101      	movs	r1, #1
 801321c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	2240      	movs	r2, #64	@ 0x40
 8013222:	2100      	movs	r1, #0
 8013224:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	2244      	movs	r2, #68	@ 0x44
 801322a:	2100      	movs	r1, #0
 801322c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	2250      	movs	r2, #80	@ 0x50
 8013232:	2100      	movs	r1, #0
 8013234:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8013236:	2300      	movs	r3, #0
}
 8013238:	0018      	movs	r0, r3
 801323a:	46bd      	mov	sp, r7
 801323c:	b003      	add	sp, #12
 801323e:	bc90      	pop	{r4, r7}
 8013240:	bc08      	pop	{r3}
 8013242:	b004      	add	sp, #16
 8013244:	4718      	bx	r3
	...

08013248 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013248:	b580      	push	{r7, lr}
 801324a:	b09c      	sub	sp, #112	@ 0x70
 801324c:	af00      	add	r7, sp, #0
 801324e:	6078      	str	r0, [r7, #4]
 8013250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8013252:	236f      	movs	r3, #111	@ 0x6f
 8013254:	18fb      	adds	r3, r7, r3
 8013256:	2200      	movs	r2, #0
 8013258:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801325a:	687a      	ldr	r2, [r7, #4]
 801325c:	683b      	ldr	r3, [r7, #0]
 801325e:	781b      	ldrb	r3, [r3, #0]
 8013260:	009b      	lsls	r3, r3, #2
 8013262:	18d3      	adds	r3, r2, r3
 8013264:	881b      	ldrh	r3, [r3, #0]
 8013266:	b29a      	uxth	r2, r3
 8013268:	236c      	movs	r3, #108	@ 0x6c
 801326a:	18fb      	adds	r3, r7, r3
 801326c:	49a3      	ldr	r1, [pc, #652]	@ (80134fc <USB_ActivateEndpoint+0x2b4>)
 801326e:	400a      	ands	r2, r1
 8013270:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8013272:	683b      	ldr	r3, [r7, #0]
 8013274:	78db      	ldrb	r3, [r3, #3]
 8013276:	2b03      	cmp	r3, #3
 8013278:	d017      	beq.n	80132aa <USB_ActivateEndpoint+0x62>
 801327a:	dc28      	bgt.n	80132ce <USB_ActivateEndpoint+0x86>
 801327c:	2b02      	cmp	r3, #2
 801327e:	d00e      	beq.n	801329e <USB_ActivateEndpoint+0x56>
 8013280:	dc25      	bgt.n	80132ce <USB_ActivateEndpoint+0x86>
 8013282:	2b00      	cmp	r3, #0
 8013284:	d002      	beq.n	801328c <USB_ActivateEndpoint+0x44>
 8013286:	2b01      	cmp	r3, #1
 8013288:	d018      	beq.n	80132bc <USB_ActivateEndpoint+0x74>
 801328a:	e020      	b.n	80132ce <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801328c:	226c      	movs	r2, #108	@ 0x6c
 801328e:	18bb      	adds	r3, r7, r2
 8013290:	18ba      	adds	r2, r7, r2
 8013292:	8812      	ldrh	r2, [r2, #0]
 8013294:	2180      	movs	r1, #128	@ 0x80
 8013296:	0089      	lsls	r1, r1, #2
 8013298:	430a      	orrs	r2, r1
 801329a:	801a      	strh	r2, [r3, #0]
      break;
 801329c:	e01c      	b.n	80132d8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801329e:	226c      	movs	r2, #108	@ 0x6c
 80132a0:	18bb      	adds	r3, r7, r2
 80132a2:	18ba      	adds	r2, r7, r2
 80132a4:	8812      	ldrh	r2, [r2, #0]
 80132a6:	801a      	strh	r2, [r3, #0]
      break;
 80132a8:	e016      	b.n	80132d8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80132aa:	226c      	movs	r2, #108	@ 0x6c
 80132ac:	18bb      	adds	r3, r7, r2
 80132ae:	18ba      	adds	r2, r7, r2
 80132b0:	8812      	ldrh	r2, [r2, #0]
 80132b2:	21c0      	movs	r1, #192	@ 0xc0
 80132b4:	00c9      	lsls	r1, r1, #3
 80132b6:	430a      	orrs	r2, r1
 80132b8:	801a      	strh	r2, [r3, #0]
      break;
 80132ba:	e00d      	b.n	80132d8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80132bc:	226c      	movs	r2, #108	@ 0x6c
 80132be:	18bb      	adds	r3, r7, r2
 80132c0:	18ba      	adds	r2, r7, r2
 80132c2:	8812      	ldrh	r2, [r2, #0]
 80132c4:	2180      	movs	r1, #128	@ 0x80
 80132c6:	00c9      	lsls	r1, r1, #3
 80132c8:	430a      	orrs	r2, r1
 80132ca:	801a      	strh	r2, [r3, #0]
      break;
 80132cc:	e004      	b.n	80132d8 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80132ce:	236f      	movs	r3, #111	@ 0x6f
 80132d0:	18fb      	adds	r3, r7, r3
 80132d2:	2201      	movs	r2, #1
 80132d4:	701a      	strb	r2, [r3, #0]
      break;
 80132d6:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80132d8:	687a      	ldr	r2, [r7, #4]
 80132da:	683b      	ldr	r3, [r7, #0]
 80132dc:	781b      	ldrb	r3, [r3, #0]
 80132de:	009b      	lsls	r3, r3, #2
 80132e0:	18d3      	adds	r3, r2, r3
 80132e2:	226c      	movs	r2, #108	@ 0x6c
 80132e4:	18ba      	adds	r2, r7, r2
 80132e6:	8812      	ldrh	r2, [r2, #0]
 80132e8:	4985      	ldr	r1, [pc, #532]	@ (8013500 <USB_ActivateEndpoint+0x2b8>)
 80132ea:	430a      	orrs	r2, r1
 80132ec:	b292      	uxth	r2, r2
 80132ee:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80132f0:	687a      	ldr	r2, [r7, #4]
 80132f2:	683b      	ldr	r3, [r7, #0]
 80132f4:	781b      	ldrb	r3, [r3, #0]
 80132f6:	009b      	lsls	r3, r3, #2
 80132f8:	18d3      	adds	r3, r2, r3
 80132fa:	881b      	ldrh	r3, [r3, #0]
 80132fc:	b29b      	uxth	r3, r3
 80132fe:	b21b      	sxth	r3, r3
 8013300:	4a80      	ldr	r2, [pc, #512]	@ (8013504 <USB_ActivateEndpoint+0x2bc>)
 8013302:	4013      	ands	r3, r2
 8013304:	b21a      	sxth	r2, r3
 8013306:	683b      	ldr	r3, [r7, #0]
 8013308:	781b      	ldrb	r3, [r3, #0]
 801330a:	b21b      	sxth	r3, r3
 801330c:	4313      	orrs	r3, r2
 801330e:	b21a      	sxth	r2, r3
 8013310:	2166      	movs	r1, #102	@ 0x66
 8013312:	187b      	adds	r3, r7, r1
 8013314:	801a      	strh	r2, [r3, #0]
 8013316:	687a      	ldr	r2, [r7, #4]
 8013318:	683b      	ldr	r3, [r7, #0]
 801331a:	781b      	ldrb	r3, [r3, #0]
 801331c:	009b      	lsls	r3, r3, #2
 801331e:	18d3      	adds	r3, r2, r3
 8013320:	187a      	adds	r2, r7, r1
 8013322:	8812      	ldrh	r2, [r2, #0]
 8013324:	4976      	ldr	r1, [pc, #472]	@ (8013500 <USB_ActivateEndpoint+0x2b8>)
 8013326:	430a      	orrs	r2, r1
 8013328:	b292      	uxth	r2, r2
 801332a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 801332c:	683b      	ldr	r3, [r7, #0]
 801332e:	7b1b      	ldrb	r3, [r3, #12]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d000      	beq.n	8013336 <USB_ActivateEndpoint+0xee>
 8013334:	e178      	b.n	8013628 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8013336:	683b      	ldr	r3, [r7, #0]
 8013338:	785b      	ldrb	r3, [r3, #1]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d100      	bne.n	8013340 <USB_ActivateEndpoint+0xf8>
 801333e:	e07a      	b.n	8013436 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	61bb      	str	r3, [r7, #24]
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	2250      	movs	r2, #80	@ 0x50
 8013348:	5a9b      	ldrh	r3, [r3, r2]
 801334a:	b29b      	uxth	r3, r3
 801334c:	001a      	movs	r2, r3
 801334e:	69bb      	ldr	r3, [r7, #24]
 8013350:	189b      	adds	r3, r3, r2
 8013352:	61bb      	str	r3, [r7, #24]
 8013354:	683b      	ldr	r3, [r7, #0]
 8013356:	781b      	ldrb	r3, [r3, #0]
 8013358:	00da      	lsls	r2, r3, #3
 801335a:	69bb      	ldr	r3, [r7, #24]
 801335c:	18d3      	adds	r3, r2, r3
 801335e:	2280      	movs	r2, #128	@ 0x80
 8013360:	00d2      	lsls	r2, r2, #3
 8013362:	4694      	mov	ip, r2
 8013364:	4463      	add	r3, ip
 8013366:	617b      	str	r3, [r7, #20]
 8013368:	683b      	ldr	r3, [r7, #0]
 801336a:	88db      	ldrh	r3, [r3, #6]
 801336c:	085b      	lsrs	r3, r3, #1
 801336e:	b29b      	uxth	r3, r3
 8013370:	18db      	adds	r3, r3, r3
 8013372:	b29a      	uxth	r2, r3
 8013374:	697b      	ldr	r3, [r7, #20]
 8013376:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013378:	687a      	ldr	r2, [r7, #4]
 801337a:	683b      	ldr	r3, [r7, #0]
 801337c:	781b      	ldrb	r3, [r3, #0]
 801337e:	009b      	lsls	r3, r3, #2
 8013380:	18d2      	adds	r2, r2, r3
 8013382:	2112      	movs	r1, #18
 8013384:	187b      	adds	r3, r7, r1
 8013386:	8812      	ldrh	r2, [r2, #0]
 8013388:	801a      	strh	r2, [r3, #0]
 801338a:	187b      	adds	r3, r7, r1
 801338c:	881b      	ldrh	r3, [r3, #0]
 801338e:	2240      	movs	r2, #64	@ 0x40
 8013390:	4013      	ands	r3, r2
 8013392:	d016      	beq.n	80133c2 <USB_ActivateEndpoint+0x17a>
 8013394:	687a      	ldr	r2, [r7, #4]
 8013396:	683b      	ldr	r3, [r7, #0]
 8013398:	781b      	ldrb	r3, [r3, #0]
 801339a:	009b      	lsls	r3, r3, #2
 801339c:	18d3      	adds	r3, r2, r3
 801339e:	881b      	ldrh	r3, [r3, #0]
 80133a0:	b29a      	uxth	r2, r3
 80133a2:	2010      	movs	r0, #16
 80133a4:	183b      	adds	r3, r7, r0
 80133a6:	4957      	ldr	r1, [pc, #348]	@ (8013504 <USB_ActivateEndpoint+0x2bc>)
 80133a8:	400a      	ands	r2, r1
 80133aa:	801a      	strh	r2, [r3, #0]
 80133ac:	687a      	ldr	r2, [r7, #4]
 80133ae:	683b      	ldr	r3, [r7, #0]
 80133b0:	781b      	ldrb	r3, [r3, #0]
 80133b2:	009b      	lsls	r3, r3, #2
 80133b4:	18d3      	adds	r3, r2, r3
 80133b6:	183a      	adds	r2, r7, r0
 80133b8:	8812      	ldrh	r2, [r2, #0]
 80133ba:	4953      	ldr	r1, [pc, #332]	@ (8013508 <USB_ActivateEndpoint+0x2c0>)
 80133bc:	430a      	orrs	r2, r1
 80133be:	b292      	uxth	r2, r2
 80133c0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80133c2:	683b      	ldr	r3, [r7, #0]
 80133c4:	78db      	ldrb	r3, [r3, #3]
 80133c6:	2b01      	cmp	r3, #1
 80133c8:	d01d      	beq.n	8013406 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80133ca:	687a      	ldr	r2, [r7, #4]
 80133cc:	683b      	ldr	r3, [r7, #0]
 80133ce:	781b      	ldrb	r3, [r3, #0]
 80133d0:	009b      	lsls	r3, r3, #2
 80133d2:	18d3      	adds	r3, r2, r3
 80133d4:	881b      	ldrh	r3, [r3, #0]
 80133d6:	b29a      	uxth	r2, r3
 80133d8:	200c      	movs	r0, #12
 80133da:	183b      	adds	r3, r7, r0
 80133dc:	494b      	ldr	r1, [pc, #300]	@ (801350c <USB_ActivateEndpoint+0x2c4>)
 80133de:	400a      	ands	r2, r1
 80133e0:	801a      	strh	r2, [r3, #0]
 80133e2:	183b      	adds	r3, r7, r0
 80133e4:	183a      	adds	r2, r7, r0
 80133e6:	8812      	ldrh	r2, [r2, #0]
 80133e8:	2120      	movs	r1, #32
 80133ea:	404a      	eors	r2, r1
 80133ec:	801a      	strh	r2, [r3, #0]
 80133ee:	687a      	ldr	r2, [r7, #4]
 80133f0:	683b      	ldr	r3, [r7, #0]
 80133f2:	781b      	ldrb	r3, [r3, #0]
 80133f4:	009b      	lsls	r3, r3, #2
 80133f6:	18d3      	adds	r3, r2, r3
 80133f8:	183a      	adds	r2, r7, r0
 80133fa:	8812      	ldrh	r2, [r2, #0]
 80133fc:	4940      	ldr	r1, [pc, #256]	@ (8013500 <USB_ActivateEndpoint+0x2b8>)
 80133fe:	430a      	orrs	r2, r1
 8013400:	b292      	uxth	r2, r2
 8013402:	801a      	strh	r2, [r3, #0]
 8013404:	e2b4      	b.n	8013970 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013406:	687a      	ldr	r2, [r7, #4]
 8013408:	683b      	ldr	r3, [r7, #0]
 801340a:	781b      	ldrb	r3, [r3, #0]
 801340c:	009b      	lsls	r3, r3, #2
 801340e:	18d3      	adds	r3, r2, r3
 8013410:	881b      	ldrh	r3, [r3, #0]
 8013412:	b29a      	uxth	r2, r3
 8013414:	200e      	movs	r0, #14
 8013416:	183b      	adds	r3, r7, r0
 8013418:	493c      	ldr	r1, [pc, #240]	@ (801350c <USB_ActivateEndpoint+0x2c4>)
 801341a:	400a      	ands	r2, r1
 801341c:	801a      	strh	r2, [r3, #0]
 801341e:	687a      	ldr	r2, [r7, #4]
 8013420:	683b      	ldr	r3, [r7, #0]
 8013422:	781b      	ldrb	r3, [r3, #0]
 8013424:	009b      	lsls	r3, r3, #2
 8013426:	18d3      	adds	r3, r2, r3
 8013428:	183a      	adds	r2, r7, r0
 801342a:	8812      	ldrh	r2, [r2, #0]
 801342c:	4934      	ldr	r1, [pc, #208]	@ (8013500 <USB_ActivateEndpoint+0x2b8>)
 801342e:	430a      	orrs	r2, r1
 8013430:	b292      	uxth	r2, r2
 8013432:	801a      	strh	r2, [r3, #0]
 8013434:	e29c      	b.n	8013970 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	633b      	str	r3, [r7, #48]	@ 0x30
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	2250      	movs	r2, #80	@ 0x50
 801343e:	5a9b      	ldrh	r3, [r3, r2]
 8013440:	b29b      	uxth	r3, r3
 8013442:	001a      	movs	r2, r3
 8013444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013446:	189b      	adds	r3, r3, r2
 8013448:	633b      	str	r3, [r7, #48]	@ 0x30
 801344a:	683b      	ldr	r3, [r7, #0]
 801344c:	781b      	ldrb	r3, [r3, #0]
 801344e:	00da      	lsls	r2, r3, #3
 8013450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013452:	18d3      	adds	r3, r2, r3
 8013454:	4a2e      	ldr	r2, [pc, #184]	@ (8013510 <USB_ActivateEndpoint+0x2c8>)
 8013456:	4694      	mov	ip, r2
 8013458:	4463      	add	r3, ip
 801345a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801345c:	683b      	ldr	r3, [r7, #0]
 801345e:	88db      	ldrh	r3, [r3, #6]
 8013460:	085b      	lsrs	r3, r3, #1
 8013462:	b29b      	uxth	r3, r3
 8013464:	18db      	adds	r3, r3, r3
 8013466:	b29a      	uxth	r2, r3
 8013468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801346a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	2250      	movs	r2, #80	@ 0x50
 8013474:	5a9b      	ldrh	r3, [r3, r2]
 8013476:	b29b      	uxth	r3, r3
 8013478:	001a      	movs	r2, r3
 801347a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801347c:	189b      	adds	r3, r3, r2
 801347e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013480:	683b      	ldr	r3, [r7, #0]
 8013482:	781b      	ldrb	r3, [r3, #0]
 8013484:	00da      	lsls	r2, r3, #3
 8013486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013488:	18d3      	adds	r3, r2, r3
 801348a:	4a22      	ldr	r2, [pc, #136]	@ (8013514 <USB_ActivateEndpoint+0x2cc>)
 801348c:	4694      	mov	ip, r2
 801348e:	4463      	add	r3, ip
 8013490:	627b      	str	r3, [r7, #36]	@ 0x24
 8013492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013494:	881b      	ldrh	r3, [r3, #0]
 8013496:	b29b      	uxth	r3, r3
 8013498:	059b      	lsls	r3, r3, #22
 801349a:	0d9b      	lsrs	r3, r3, #22
 801349c:	b29a      	uxth	r2, r3
 801349e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134a0:	801a      	strh	r2, [r3, #0]
 80134a2:	683b      	ldr	r3, [r7, #0]
 80134a4:	691b      	ldr	r3, [r3, #16]
 80134a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80134a8:	d91a      	bls.n	80134e0 <USB_ActivateEndpoint+0x298>
 80134aa:	683b      	ldr	r3, [r7, #0]
 80134ac:	691b      	ldr	r3, [r3, #16]
 80134ae:	095b      	lsrs	r3, r3, #5
 80134b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80134b2:	683b      	ldr	r3, [r7, #0]
 80134b4:	691b      	ldr	r3, [r3, #16]
 80134b6:	221f      	movs	r2, #31
 80134b8:	4013      	ands	r3, r2
 80134ba:	d102      	bne.n	80134c2 <USB_ActivateEndpoint+0x27a>
 80134bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80134be:	3b01      	subs	r3, #1
 80134c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80134c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134c4:	881b      	ldrh	r3, [r3, #0]
 80134c6:	b29a      	uxth	r2, r3
 80134c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80134ca:	b29b      	uxth	r3, r3
 80134cc:	029b      	lsls	r3, r3, #10
 80134ce:	b29b      	uxth	r3, r3
 80134d0:	4313      	orrs	r3, r2
 80134d2:	b29b      	uxth	r3, r3
 80134d4:	4a10      	ldr	r2, [pc, #64]	@ (8013518 <USB_ActivateEndpoint+0x2d0>)
 80134d6:	4313      	orrs	r3, r2
 80134d8:	b29a      	uxth	r2, r3
 80134da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134dc:	801a      	strh	r2, [r3, #0]
 80134de:	e034      	b.n	801354a <USB_ActivateEndpoint+0x302>
 80134e0:	683b      	ldr	r3, [r7, #0]
 80134e2:	691b      	ldr	r3, [r3, #16]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d119      	bne.n	801351c <USB_ActivateEndpoint+0x2d4>
 80134e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134ea:	881b      	ldrh	r3, [r3, #0]
 80134ec:	b29b      	uxth	r3, r3
 80134ee:	4a0a      	ldr	r2, [pc, #40]	@ (8013518 <USB_ActivateEndpoint+0x2d0>)
 80134f0:	4313      	orrs	r3, r2
 80134f2:	b29a      	uxth	r2, r3
 80134f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134f6:	801a      	strh	r2, [r3, #0]
 80134f8:	e027      	b.n	801354a <USB_ActivateEndpoint+0x302>
 80134fa:	46c0      	nop			@ (mov r8, r8)
 80134fc:	ffff898f 	.word	0xffff898f
 8013500:	ffff8080 	.word	0xffff8080
 8013504:	ffff8f8f 	.word	0xffff8f8f
 8013508:	ffff80c0 	.word	0xffff80c0
 801350c:	ffff8fbf 	.word	0xffff8fbf
 8013510:	00000404 	.word	0x00000404
 8013514:	00000406 	.word	0x00000406
 8013518:	ffff8000 	.word	0xffff8000
 801351c:	683b      	ldr	r3, [r7, #0]
 801351e:	691b      	ldr	r3, [r3, #16]
 8013520:	085b      	lsrs	r3, r3, #1
 8013522:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013524:	683b      	ldr	r3, [r7, #0]
 8013526:	691b      	ldr	r3, [r3, #16]
 8013528:	2201      	movs	r2, #1
 801352a:	4013      	ands	r3, r2
 801352c:	d002      	beq.n	8013534 <USB_ActivateEndpoint+0x2ec>
 801352e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013530:	3301      	adds	r3, #1
 8013532:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013536:	881b      	ldrh	r3, [r3, #0]
 8013538:	b29a      	uxth	r2, r3
 801353a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801353c:	b29b      	uxth	r3, r3
 801353e:	029b      	lsls	r3, r3, #10
 8013540:	b29b      	uxth	r3, r3
 8013542:	4313      	orrs	r3, r2
 8013544:	b29a      	uxth	r2, r3
 8013546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013548:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801354a:	687a      	ldr	r2, [r7, #4]
 801354c:	683b      	ldr	r3, [r7, #0]
 801354e:	781b      	ldrb	r3, [r3, #0]
 8013550:	009b      	lsls	r3, r3, #2
 8013552:	18d2      	adds	r2, r2, r3
 8013554:	2122      	movs	r1, #34	@ 0x22
 8013556:	187b      	adds	r3, r7, r1
 8013558:	8812      	ldrh	r2, [r2, #0]
 801355a:	801a      	strh	r2, [r3, #0]
 801355c:	187b      	adds	r3, r7, r1
 801355e:	881a      	ldrh	r2, [r3, #0]
 8013560:	2380      	movs	r3, #128	@ 0x80
 8013562:	01db      	lsls	r3, r3, #7
 8013564:	4013      	ands	r3, r2
 8013566:	d016      	beq.n	8013596 <USB_ActivateEndpoint+0x34e>
 8013568:	687a      	ldr	r2, [r7, #4]
 801356a:	683b      	ldr	r3, [r7, #0]
 801356c:	781b      	ldrb	r3, [r3, #0]
 801356e:	009b      	lsls	r3, r3, #2
 8013570:	18d3      	adds	r3, r2, r3
 8013572:	881b      	ldrh	r3, [r3, #0]
 8013574:	b29a      	uxth	r2, r3
 8013576:	2020      	movs	r0, #32
 8013578:	183b      	adds	r3, r7, r0
 801357a:	49dd      	ldr	r1, [pc, #884]	@ (80138f0 <USB_ActivateEndpoint+0x6a8>)
 801357c:	400a      	ands	r2, r1
 801357e:	801a      	strh	r2, [r3, #0]
 8013580:	687a      	ldr	r2, [r7, #4]
 8013582:	683b      	ldr	r3, [r7, #0]
 8013584:	781b      	ldrb	r3, [r3, #0]
 8013586:	009b      	lsls	r3, r3, #2
 8013588:	18d3      	adds	r3, r2, r3
 801358a:	183a      	adds	r2, r7, r0
 801358c:	8812      	ldrh	r2, [r2, #0]
 801358e:	49d9      	ldr	r1, [pc, #868]	@ (80138f4 <USB_ActivateEndpoint+0x6ac>)
 8013590:	430a      	orrs	r2, r1
 8013592:	b292      	uxth	r2, r2
 8013594:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8013596:	683b      	ldr	r3, [r7, #0]
 8013598:	781b      	ldrb	r3, [r3, #0]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d125      	bne.n	80135ea <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801359e:	687a      	ldr	r2, [r7, #4]
 80135a0:	683b      	ldr	r3, [r7, #0]
 80135a2:	781b      	ldrb	r3, [r3, #0]
 80135a4:	009b      	lsls	r3, r3, #2
 80135a6:	18d3      	adds	r3, r2, r3
 80135a8:	881b      	ldrh	r3, [r3, #0]
 80135aa:	b29a      	uxth	r2, r3
 80135ac:	201c      	movs	r0, #28
 80135ae:	183b      	adds	r3, r7, r0
 80135b0:	49d1      	ldr	r1, [pc, #836]	@ (80138f8 <USB_ActivateEndpoint+0x6b0>)
 80135b2:	400a      	ands	r2, r1
 80135b4:	801a      	strh	r2, [r3, #0]
 80135b6:	183b      	adds	r3, r7, r0
 80135b8:	183a      	adds	r2, r7, r0
 80135ba:	8812      	ldrh	r2, [r2, #0]
 80135bc:	2180      	movs	r1, #128	@ 0x80
 80135be:	0149      	lsls	r1, r1, #5
 80135c0:	404a      	eors	r2, r1
 80135c2:	801a      	strh	r2, [r3, #0]
 80135c4:	183b      	adds	r3, r7, r0
 80135c6:	183a      	adds	r2, r7, r0
 80135c8:	8812      	ldrh	r2, [r2, #0]
 80135ca:	2180      	movs	r1, #128	@ 0x80
 80135cc:	0189      	lsls	r1, r1, #6
 80135ce:	404a      	eors	r2, r1
 80135d0:	801a      	strh	r2, [r3, #0]
 80135d2:	687a      	ldr	r2, [r7, #4]
 80135d4:	683b      	ldr	r3, [r7, #0]
 80135d6:	781b      	ldrb	r3, [r3, #0]
 80135d8:	009b      	lsls	r3, r3, #2
 80135da:	18d3      	adds	r3, r2, r3
 80135dc:	183a      	adds	r2, r7, r0
 80135de:	8812      	ldrh	r2, [r2, #0]
 80135e0:	49c6      	ldr	r1, [pc, #792]	@ (80138fc <USB_ActivateEndpoint+0x6b4>)
 80135e2:	430a      	orrs	r2, r1
 80135e4:	b292      	uxth	r2, r2
 80135e6:	801a      	strh	r2, [r3, #0]
 80135e8:	e1c2      	b.n	8013970 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80135ea:	687a      	ldr	r2, [r7, #4]
 80135ec:	683b      	ldr	r3, [r7, #0]
 80135ee:	781b      	ldrb	r3, [r3, #0]
 80135f0:	009b      	lsls	r3, r3, #2
 80135f2:	18d3      	adds	r3, r2, r3
 80135f4:	881b      	ldrh	r3, [r3, #0]
 80135f6:	b29a      	uxth	r2, r3
 80135f8:	201e      	movs	r0, #30
 80135fa:	183b      	adds	r3, r7, r0
 80135fc:	49be      	ldr	r1, [pc, #760]	@ (80138f8 <USB_ActivateEndpoint+0x6b0>)
 80135fe:	400a      	ands	r2, r1
 8013600:	801a      	strh	r2, [r3, #0]
 8013602:	183b      	adds	r3, r7, r0
 8013604:	183a      	adds	r2, r7, r0
 8013606:	8812      	ldrh	r2, [r2, #0]
 8013608:	2180      	movs	r1, #128	@ 0x80
 801360a:	0189      	lsls	r1, r1, #6
 801360c:	404a      	eors	r2, r1
 801360e:	801a      	strh	r2, [r3, #0]
 8013610:	687a      	ldr	r2, [r7, #4]
 8013612:	683b      	ldr	r3, [r7, #0]
 8013614:	781b      	ldrb	r3, [r3, #0]
 8013616:	009b      	lsls	r3, r3, #2
 8013618:	18d3      	adds	r3, r2, r3
 801361a:	183a      	adds	r2, r7, r0
 801361c:	8812      	ldrh	r2, [r2, #0]
 801361e:	49b7      	ldr	r1, [pc, #732]	@ (80138fc <USB_ActivateEndpoint+0x6b4>)
 8013620:	430a      	orrs	r2, r1
 8013622:	b292      	uxth	r2, r2
 8013624:	801a      	strh	r2, [r3, #0]
 8013626:	e1a3      	b.n	8013970 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8013628:	683b      	ldr	r3, [r7, #0]
 801362a:	78db      	ldrb	r3, [r3, #3]
 801362c:	2b02      	cmp	r3, #2
 801362e:	d117      	bne.n	8013660 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013630:	687a      	ldr	r2, [r7, #4]
 8013632:	683b      	ldr	r3, [r7, #0]
 8013634:	781b      	ldrb	r3, [r3, #0]
 8013636:	009b      	lsls	r3, r3, #2
 8013638:	18d3      	adds	r3, r2, r3
 801363a:	881b      	ldrh	r3, [r3, #0]
 801363c:	b29a      	uxth	r2, r3
 801363e:	2062      	movs	r0, #98	@ 0x62
 8013640:	183b      	adds	r3, r7, r0
 8013642:	49ab      	ldr	r1, [pc, #684]	@ (80138f0 <USB_ActivateEndpoint+0x6a8>)
 8013644:	400a      	ands	r2, r1
 8013646:	801a      	strh	r2, [r3, #0]
 8013648:	687a      	ldr	r2, [r7, #4]
 801364a:	683b      	ldr	r3, [r7, #0]
 801364c:	781b      	ldrb	r3, [r3, #0]
 801364e:	009b      	lsls	r3, r3, #2
 8013650:	18d3      	adds	r3, r2, r3
 8013652:	183a      	adds	r2, r7, r0
 8013654:	8812      	ldrh	r2, [r2, #0]
 8013656:	49aa      	ldr	r1, [pc, #680]	@ (8013900 <USB_ActivateEndpoint+0x6b8>)
 8013658:	430a      	orrs	r2, r1
 801365a:	b292      	uxth	r2, r2
 801365c:	801a      	strh	r2, [r3, #0]
 801365e:	e016      	b.n	801368e <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8013660:	687a      	ldr	r2, [r7, #4]
 8013662:	683b      	ldr	r3, [r7, #0]
 8013664:	781b      	ldrb	r3, [r3, #0]
 8013666:	009b      	lsls	r3, r3, #2
 8013668:	18d3      	adds	r3, r2, r3
 801366a:	881b      	ldrh	r3, [r3, #0]
 801366c:	b29a      	uxth	r2, r3
 801366e:	2064      	movs	r0, #100	@ 0x64
 8013670:	183b      	adds	r3, r7, r0
 8013672:	49a4      	ldr	r1, [pc, #656]	@ (8013904 <USB_ActivateEndpoint+0x6bc>)
 8013674:	400a      	ands	r2, r1
 8013676:	801a      	strh	r2, [r3, #0]
 8013678:	687a      	ldr	r2, [r7, #4]
 801367a:	683b      	ldr	r3, [r7, #0]
 801367c:	781b      	ldrb	r3, [r3, #0]
 801367e:	009b      	lsls	r3, r3, #2
 8013680:	18d3      	adds	r3, r2, r3
 8013682:	183a      	adds	r2, r7, r0
 8013684:	8812      	ldrh	r2, [r2, #0]
 8013686:	499d      	ldr	r1, [pc, #628]	@ (80138fc <USB_ActivateEndpoint+0x6b4>)
 8013688:	430a      	orrs	r2, r1
 801368a:	b292      	uxth	r2, r2
 801368c:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	2250      	movs	r2, #80	@ 0x50
 8013696:	5a9b      	ldrh	r3, [r3, r2]
 8013698:	b29b      	uxth	r3, r3
 801369a:	001a      	movs	r2, r3
 801369c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801369e:	189b      	adds	r3, r3, r2
 80136a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80136a2:	683b      	ldr	r3, [r7, #0]
 80136a4:	781b      	ldrb	r3, [r3, #0]
 80136a6:	00da      	lsls	r2, r3, #3
 80136a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80136aa:	18d3      	adds	r3, r2, r3
 80136ac:	2280      	movs	r2, #128	@ 0x80
 80136ae:	00d2      	lsls	r2, r2, #3
 80136b0:	4694      	mov	ip, r2
 80136b2:	4463      	add	r3, ip
 80136b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80136b6:	683b      	ldr	r3, [r7, #0]
 80136b8:	891b      	ldrh	r3, [r3, #8]
 80136ba:	085b      	lsrs	r3, r3, #1
 80136bc:	b29b      	uxth	r3, r3
 80136be:	18db      	adds	r3, r3, r3
 80136c0:	b29a      	uxth	r2, r3
 80136c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80136c4:	801a      	strh	r2, [r3, #0]
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	2250      	movs	r2, #80	@ 0x50
 80136ce:	5a9b      	ldrh	r3, [r3, r2]
 80136d0:	b29b      	uxth	r3, r3
 80136d2:	001a      	movs	r2, r3
 80136d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80136d6:	189b      	adds	r3, r3, r2
 80136d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80136da:	683b      	ldr	r3, [r7, #0]
 80136dc:	781b      	ldrb	r3, [r3, #0]
 80136de:	00da      	lsls	r2, r3, #3
 80136e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80136e2:	18d3      	adds	r3, r2, r3
 80136e4:	4a88      	ldr	r2, [pc, #544]	@ (8013908 <USB_ActivateEndpoint+0x6c0>)
 80136e6:	4694      	mov	ip, r2
 80136e8:	4463      	add	r3, ip
 80136ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80136ec:	683b      	ldr	r3, [r7, #0]
 80136ee:	895b      	ldrh	r3, [r3, #10]
 80136f0:	085b      	lsrs	r3, r3, #1
 80136f2:	b29b      	uxth	r3, r3
 80136f4:	18db      	adds	r3, r3, r3
 80136f6:	b29a      	uxth	r2, r3
 80136f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80136fa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80136fc:	683b      	ldr	r3, [r7, #0]
 80136fe:	785b      	ldrb	r3, [r3, #1]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d000      	beq.n	8013706 <USB_ActivateEndpoint+0x4be>
 8013704:	e087      	b.n	8013816 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013706:	687a      	ldr	r2, [r7, #4]
 8013708:	683b      	ldr	r3, [r7, #0]
 801370a:	781b      	ldrb	r3, [r3, #0]
 801370c:	009b      	lsls	r3, r3, #2
 801370e:	18d2      	adds	r2, r2, r3
 8013710:	2140      	movs	r1, #64	@ 0x40
 8013712:	187b      	adds	r3, r7, r1
 8013714:	8812      	ldrh	r2, [r2, #0]
 8013716:	801a      	strh	r2, [r3, #0]
 8013718:	187b      	adds	r3, r7, r1
 801371a:	881a      	ldrh	r2, [r3, #0]
 801371c:	2380      	movs	r3, #128	@ 0x80
 801371e:	01db      	lsls	r3, r3, #7
 8013720:	4013      	ands	r3, r2
 8013722:	d016      	beq.n	8013752 <USB_ActivateEndpoint+0x50a>
 8013724:	687a      	ldr	r2, [r7, #4]
 8013726:	683b      	ldr	r3, [r7, #0]
 8013728:	781b      	ldrb	r3, [r3, #0]
 801372a:	009b      	lsls	r3, r3, #2
 801372c:	18d3      	adds	r3, r2, r3
 801372e:	881b      	ldrh	r3, [r3, #0]
 8013730:	b29a      	uxth	r2, r3
 8013732:	203e      	movs	r0, #62	@ 0x3e
 8013734:	183b      	adds	r3, r7, r0
 8013736:	496e      	ldr	r1, [pc, #440]	@ (80138f0 <USB_ActivateEndpoint+0x6a8>)
 8013738:	400a      	ands	r2, r1
 801373a:	801a      	strh	r2, [r3, #0]
 801373c:	687a      	ldr	r2, [r7, #4]
 801373e:	683b      	ldr	r3, [r7, #0]
 8013740:	781b      	ldrb	r3, [r3, #0]
 8013742:	009b      	lsls	r3, r3, #2
 8013744:	18d3      	adds	r3, r2, r3
 8013746:	183a      	adds	r2, r7, r0
 8013748:	8812      	ldrh	r2, [r2, #0]
 801374a:	496a      	ldr	r1, [pc, #424]	@ (80138f4 <USB_ActivateEndpoint+0x6ac>)
 801374c:	430a      	orrs	r2, r1
 801374e:	b292      	uxth	r2, r2
 8013750:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013752:	687a      	ldr	r2, [r7, #4]
 8013754:	683b      	ldr	r3, [r7, #0]
 8013756:	781b      	ldrb	r3, [r3, #0]
 8013758:	009b      	lsls	r3, r3, #2
 801375a:	18d2      	adds	r2, r2, r3
 801375c:	213c      	movs	r1, #60	@ 0x3c
 801375e:	187b      	adds	r3, r7, r1
 8013760:	8812      	ldrh	r2, [r2, #0]
 8013762:	801a      	strh	r2, [r3, #0]
 8013764:	187b      	adds	r3, r7, r1
 8013766:	881b      	ldrh	r3, [r3, #0]
 8013768:	2240      	movs	r2, #64	@ 0x40
 801376a:	4013      	ands	r3, r2
 801376c:	d016      	beq.n	801379c <USB_ActivateEndpoint+0x554>
 801376e:	687a      	ldr	r2, [r7, #4]
 8013770:	683b      	ldr	r3, [r7, #0]
 8013772:	781b      	ldrb	r3, [r3, #0]
 8013774:	009b      	lsls	r3, r3, #2
 8013776:	18d3      	adds	r3, r2, r3
 8013778:	881b      	ldrh	r3, [r3, #0]
 801377a:	b29a      	uxth	r2, r3
 801377c:	203a      	movs	r0, #58	@ 0x3a
 801377e:	183b      	adds	r3, r7, r0
 8013780:	495b      	ldr	r1, [pc, #364]	@ (80138f0 <USB_ActivateEndpoint+0x6a8>)
 8013782:	400a      	ands	r2, r1
 8013784:	801a      	strh	r2, [r3, #0]
 8013786:	687a      	ldr	r2, [r7, #4]
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	781b      	ldrb	r3, [r3, #0]
 801378c:	009b      	lsls	r3, r3, #2
 801378e:	18d3      	adds	r3, r2, r3
 8013790:	183a      	adds	r2, r7, r0
 8013792:	8812      	ldrh	r2, [r2, #0]
 8013794:	495d      	ldr	r1, [pc, #372]	@ (801390c <USB_ActivateEndpoint+0x6c4>)
 8013796:	430a      	orrs	r2, r1
 8013798:	b292      	uxth	r2, r2
 801379a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801379c:	687a      	ldr	r2, [r7, #4]
 801379e:	683b      	ldr	r3, [r7, #0]
 80137a0:	781b      	ldrb	r3, [r3, #0]
 80137a2:	009b      	lsls	r3, r3, #2
 80137a4:	18d3      	adds	r3, r2, r3
 80137a6:	881b      	ldrh	r3, [r3, #0]
 80137a8:	b29a      	uxth	r2, r3
 80137aa:	2038      	movs	r0, #56	@ 0x38
 80137ac:	183b      	adds	r3, r7, r0
 80137ae:	4952      	ldr	r1, [pc, #328]	@ (80138f8 <USB_ActivateEndpoint+0x6b0>)
 80137b0:	400a      	ands	r2, r1
 80137b2:	801a      	strh	r2, [r3, #0]
 80137b4:	183b      	adds	r3, r7, r0
 80137b6:	183a      	adds	r2, r7, r0
 80137b8:	8812      	ldrh	r2, [r2, #0]
 80137ba:	2180      	movs	r1, #128	@ 0x80
 80137bc:	0149      	lsls	r1, r1, #5
 80137be:	404a      	eors	r2, r1
 80137c0:	801a      	strh	r2, [r3, #0]
 80137c2:	183b      	adds	r3, r7, r0
 80137c4:	183a      	adds	r2, r7, r0
 80137c6:	8812      	ldrh	r2, [r2, #0]
 80137c8:	2180      	movs	r1, #128	@ 0x80
 80137ca:	0189      	lsls	r1, r1, #6
 80137cc:	404a      	eors	r2, r1
 80137ce:	801a      	strh	r2, [r3, #0]
 80137d0:	687a      	ldr	r2, [r7, #4]
 80137d2:	683b      	ldr	r3, [r7, #0]
 80137d4:	781b      	ldrb	r3, [r3, #0]
 80137d6:	009b      	lsls	r3, r3, #2
 80137d8:	18d3      	adds	r3, r2, r3
 80137da:	183a      	adds	r2, r7, r0
 80137dc:	8812      	ldrh	r2, [r2, #0]
 80137de:	4947      	ldr	r1, [pc, #284]	@ (80138fc <USB_ActivateEndpoint+0x6b4>)
 80137e0:	430a      	orrs	r2, r1
 80137e2:	b292      	uxth	r2, r2
 80137e4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80137e6:	687a      	ldr	r2, [r7, #4]
 80137e8:	683b      	ldr	r3, [r7, #0]
 80137ea:	781b      	ldrb	r3, [r3, #0]
 80137ec:	009b      	lsls	r3, r3, #2
 80137ee:	18d3      	adds	r3, r2, r3
 80137f0:	881b      	ldrh	r3, [r3, #0]
 80137f2:	b29a      	uxth	r2, r3
 80137f4:	2036      	movs	r0, #54	@ 0x36
 80137f6:	183b      	adds	r3, r7, r0
 80137f8:	4945      	ldr	r1, [pc, #276]	@ (8013910 <USB_ActivateEndpoint+0x6c8>)
 80137fa:	400a      	ands	r2, r1
 80137fc:	801a      	strh	r2, [r3, #0]
 80137fe:	687a      	ldr	r2, [r7, #4]
 8013800:	683b      	ldr	r3, [r7, #0]
 8013802:	781b      	ldrb	r3, [r3, #0]
 8013804:	009b      	lsls	r3, r3, #2
 8013806:	18d3      	adds	r3, r2, r3
 8013808:	183a      	adds	r2, r7, r0
 801380a:	8812      	ldrh	r2, [r2, #0]
 801380c:	493b      	ldr	r1, [pc, #236]	@ (80138fc <USB_ActivateEndpoint+0x6b4>)
 801380e:	430a      	orrs	r2, r1
 8013810:	b292      	uxth	r2, r2
 8013812:	801a      	strh	r2, [r3, #0]
 8013814:	e0ac      	b.n	8013970 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013816:	687a      	ldr	r2, [r7, #4]
 8013818:	683b      	ldr	r3, [r7, #0]
 801381a:	781b      	ldrb	r3, [r3, #0]
 801381c:	009b      	lsls	r3, r3, #2
 801381e:	18d2      	adds	r2, r2, r3
 8013820:	214e      	movs	r1, #78	@ 0x4e
 8013822:	187b      	adds	r3, r7, r1
 8013824:	8812      	ldrh	r2, [r2, #0]
 8013826:	801a      	strh	r2, [r3, #0]
 8013828:	187b      	adds	r3, r7, r1
 801382a:	881a      	ldrh	r2, [r3, #0]
 801382c:	2380      	movs	r3, #128	@ 0x80
 801382e:	01db      	lsls	r3, r3, #7
 8013830:	4013      	ands	r3, r2
 8013832:	d016      	beq.n	8013862 <USB_ActivateEndpoint+0x61a>
 8013834:	687a      	ldr	r2, [r7, #4]
 8013836:	683b      	ldr	r3, [r7, #0]
 8013838:	781b      	ldrb	r3, [r3, #0]
 801383a:	009b      	lsls	r3, r3, #2
 801383c:	18d3      	adds	r3, r2, r3
 801383e:	881b      	ldrh	r3, [r3, #0]
 8013840:	b29a      	uxth	r2, r3
 8013842:	204c      	movs	r0, #76	@ 0x4c
 8013844:	183b      	adds	r3, r7, r0
 8013846:	492a      	ldr	r1, [pc, #168]	@ (80138f0 <USB_ActivateEndpoint+0x6a8>)
 8013848:	400a      	ands	r2, r1
 801384a:	801a      	strh	r2, [r3, #0]
 801384c:	687a      	ldr	r2, [r7, #4]
 801384e:	683b      	ldr	r3, [r7, #0]
 8013850:	781b      	ldrb	r3, [r3, #0]
 8013852:	009b      	lsls	r3, r3, #2
 8013854:	18d3      	adds	r3, r2, r3
 8013856:	183a      	adds	r2, r7, r0
 8013858:	8812      	ldrh	r2, [r2, #0]
 801385a:	4926      	ldr	r1, [pc, #152]	@ (80138f4 <USB_ActivateEndpoint+0x6ac>)
 801385c:	430a      	orrs	r2, r1
 801385e:	b292      	uxth	r2, r2
 8013860:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013862:	687a      	ldr	r2, [r7, #4]
 8013864:	683b      	ldr	r3, [r7, #0]
 8013866:	781b      	ldrb	r3, [r3, #0]
 8013868:	009b      	lsls	r3, r3, #2
 801386a:	18d2      	adds	r2, r2, r3
 801386c:	214a      	movs	r1, #74	@ 0x4a
 801386e:	187b      	adds	r3, r7, r1
 8013870:	8812      	ldrh	r2, [r2, #0]
 8013872:	801a      	strh	r2, [r3, #0]
 8013874:	187b      	adds	r3, r7, r1
 8013876:	881b      	ldrh	r3, [r3, #0]
 8013878:	2240      	movs	r2, #64	@ 0x40
 801387a:	4013      	ands	r3, r2
 801387c:	d016      	beq.n	80138ac <USB_ActivateEndpoint+0x664>
 801387e:	687a      	ldr	r2, [r7, #4]
 8013880:	683b      	ldr	r3, [r7, #0]
 8013882:	781b      	ldrb	r3, [r3, #0]
 8013884:	009b      	lsls	r3, r3, #2
 8013886:	18d3      	adds	r3, r2, r3
 8013888:	881b      	ldrh	r3, [r3, #0]
 801388a:	b29a      	uxth	r2, r3
 801388c:	2048      	movs	r0, #72	@ 0x48
 801388e:	183b      	adds	r3, r7, r0
 8013890:	4917      	ldr	r1, [pc, #92]	@ (80138f0 <USB_ActivateEndpoint+0x6a8>)
 8013892:	400a      	ands	r2, r1
 8013894:	801a      	strh	r2, [r3, #0]
 8013896:	687a      	ldr	r2, [r7, #4]
 8013898:	683b      	ldr	r3, [r7, #0]
 801389a:	781b      	ldrb	r3, [r3, #0]
 801389c:	009b      	lsls	r3, r3, #2
 801389e:	18d3      	adds	r3, r2, r3
 80138a0:	183a      	adds	r2, r7, r0
 80138a2:	8812      	ldrh	r2, [r2, #0]
 80138a4:	4919      	ldr	r1, [pc, #100]	@ (801390c <USB_ActivateEndpoint+0x6c4>)
 80138a6:	430a      	orrs	r2, r1
 80138a8:	b292      	uxth	r2, r2
 80138aa:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80138ac:	683b      	ldr	r3, [r7, #0]
 80138ae:	78db      	ldrb	r3, [r3, #3]
 80138b0:	2b01      	cmp	r3, #1
 80138b2:	d02f      	beq.n	8013914 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80138b4:	687a      	ldr	r2, [r7, #4]
 80138b6:	683b      	ldr	r3, [r7, #0]
 80138b8:	781b      	ldrb	r3, [r3, #0]
 80138ba:	009b      	lsls	r3, r3, #2
 80138bc:	18d3      	adds	r3, r2, r3
 80138be:	881b      	ldrh	r3, [r3, #0]
 80138c0:	b29a      	uxth	r2, r3
 80138c2:	2044      	movs	r0, #68	@ 0x44
 80138c4:	183b      	adds	r3, r7, r0
 80138c6:	4912      	ldr	r1, [pc, #72]	@ (8013910 <USB_ActivateEndpoint+0x6c8>)
 80138c8:	400a      	ands	r2, r1
 80138ca:	801a      	strh	r2, [r3, #0]
 80138cc:	183b      	adds	r3, r7, r0
 80138ce:	183a      	adds	r2, r7, r0
 80138d0:	8812      	ldrh	r2, [r2, #0]
 80138d2:	2120      	movs	r1, #32
 80138d4:	404a      	eors	r2, r1
 80138d6:	801a      	strh	r2, [r3, #0]
 80138d8:	687a      	ldr	r2, [r7, #4]
 80138da:	683b      	ldr	r3, [r7, #0]
 80138dc:	781b      	ldrb	r3, [r3, #0]
 80138de:	009b      	lsls	r3, r3, #2
 80138e0:	18d3      	adds	r3, r2, r3
 80138e2:	183a      	adds	r2, r7, r0
 80138e4:	8812      	ldrh	r2, [r2, #0]
 80138e6:	4905      	ldr	r1, [pc, #20]	@ (80138fc <USB_ActivateEndpoint+0x6b4>)
 80138e8:	430a      	orrs	r2, r1
 80138ea:	b292      	uxth	r2, r2
 80138ec:	801a      	strh	r2, [r3, #0]
 80138ee:	e028      	b.n	8013942 <USB_ActivateEndpoint+0x6fa>
 80138f0:	ffff8f8f 	.word	0xffff8f8f
 80138f4:	ffffc080 	.word	0xffffc080
 80138f8:	ffffbf8f 	.word	0xffffbf8f
 80138fc:	ffff8080 	.word	0xffff8080
 8013900:	ffff8180 	.word	0xffff8180
 8013904:	ffff8e8f 	.word	0xffff8e8f
 8013908:	00000404 	.word	0x00000404
 801390c:	ffff80c0 	.word	0xffff80c0
 8013910:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013914:	687a      	ldr	r2, [r7, #4]
 8013916:	683b      	ldr	r3, [r7, #0]
 8013918:	781b      	ldrb	r3, [r3, #0]
 801391a:	009b      	lsls	r3, r3, #2
 801391c:	18d3      	adds	r3, r2, r3
 801391e:	881b      	ldrh	r3, [r3, #0]
 8013920:	b29a      	uxth	r2, r3
 8013922:	2046      	movs	r0, #70	@ 0x46
 8013924:	183b      	adds	r3, r7, r0
 8013926:	4916      	ldr	r1, [pc, #88]	@ (8013980 <USB_ActivateEndpoint+0x738>)
 8013928:	400a      	ands	r2, r1
 801392a:	801a      	strh	r2, [r3, #0]
 801392c:	687a      	ldr	r2, [r7, #4]
 801392e:	683b      	ldr	r3, [r7, #0]
 8013930:	781b      	ldrb	r3, [r3, #0]
 8013932:	009b      	lsls	r3, r3, #2
 8013934:	18d3      	adds	r3, r2, r3
 8013936:	183a      	adds	r2, r7, r0
 8013938:	8812      	ldrh	r2, [r2, #0]
 801393a:	4912      	ldr	r1, [pc, #72]	@ (8013984 <USB_ActivateEndpoint+0x73c>)
 801393c:	430a      	orrs	r2, r1
 801393e:	b292      	uxth	r2, r2
 8013940:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013942:	687a      	ldr	r2, [r7, #4]
 8013944:	683b      	ldr	r3, [r7, #0]
 8013946:	781b      	ldrb	r3, [r3, #0]
 8013948:	009b      	lsls	r3, r3, #2
 801394a:	18d3      	adds	r3, r2, r3
 801394c:	881b      	ldrh	r3, [r3, #0]
 801394e:	b29a      	uxth	r2, r3
 8013950:	2042      	movs	r0, #66	@ 0x42
 8013952:	183b      	adds	r3, r7, r0
 8013954:	490c      	ldr	r1, [pc, #48]	@ (8013988 <USB_ActivateEndpoint+0x740>)
 8013956:	400a      	ands	r2, r1
 8013958:	801a      	strh	r2, [r3, #0]
 801395a:	687a      	ldr	r2, [r7, #4]
 801395c:	683b      	ldr	r3, [r7, #0]
 801395e:	781b      	ldrb	r3, [r3, #0]
 8013960:	009b      	lsls	r3, r3, #2
 8013962:	18d3      	adds	r3, r2, r3
 8013964:	183a      	adds	r2, r7, r0
 8013966:	8812      	ldrh	r2, [r2, #0]
 8013968:	4906      	ldr	r1, [pc, #24]	@ (8013984 <USB_ActivateEndpoint+0x73c>)
 801396a:	430a      	orrs	r2, r1
 801396c:	b292      	uxth	r2, r2
 801396e:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8013970:	236f      	movs	r3, #111	@ 0x6f
 8013972:	18fb      	adds	r3, r7, r3
 8013974:	781b      	ldrb	r3, [r3, #0]
}
 8013976:	0018      	movs	r0, r3
 8013978:	46bd      	mov	sp, r7
 801397a:	b01c      	add	sp, #112	@ 0x70
 801397c:	bd80      	pop	{r7, pc}
 801397e:	46c0      	nop			@ (mov r8, r8)
 8013980:	ffff8fbf 	.word	0xffff8fbf
 8013984:	ffff8080 	.word	0xffff8080
 8013988:	ffffbf8f 	.word	0xffffbf8f

0801398c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801398c:	b580      	push	{r7, lr}
 801398e:	b08c      	sub	sp, #48	@ 0x30
 8013990:	af00      	add	r7, sp, #0
 8013992:	6078      	str	r0, [r7, #4]
 8013994:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8013996:	683b      	ldr	r3, [r7, #0]
 8013998:	7b1b      	ldrb	r3, [r3, #12]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d000      	beq.n	80139a0 <USB_DeactivateEndpoint+0x14>
 801399e:	e07e      	b.n	8013a9e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 80139a0:	683b      	ldr	r3, [r7, #0]
 80139a2:	785b      	ldrb	r3, [r3, #1]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d03c      	beq.n	8013a22 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80139a8:	687a      	ldr	r2, [r7, #4]
 80139aa:	683b      	ldr	r3, [r7, #0]
 80139ac:	781b      	ldrb	r3, [r3, #0]
 80139ae:	009b      	lsls	r3, r3, #2
 80139b0:	18d2      	adds	r2, r2, r3
 80139b2:	210c      	movs	r1, #12
 80139b4:	187b      	adds	r3, r7, r1
 80139b6:	8812      	ldrh	r2, [r2, #0]
 80139b8:	801a      	strh	r2, [r3, #0]
 80139ba:	187b      	adds	r3, r7, r1
 80139bc:	881b      	ldrh	r3, [r3, #0]
 80139be:	2240      	movs	r2, #64	@ 0x40
 80139c0:	4013      	ands	r3, r2
 80139c2:	d016      	beq.n	80139f2 <USB_DeactivateEndpoint+0x66>
 80139c4:	687a      	ldr	r2, [r7, #4]
 80139c6:	683b      	ldr	r3, [r7, #0]
 80139c8:	781b      	ldrb	r3, [r3, #0]
 80139ca:	009b      	lsls	r3, r3, #2
 80139cc:	18d3      	adds	r3, r2, r3
 80139ce:	881b      	ldrh	r3, [r3, #0]
 80139d0:	b29a      	uxth	r2, r3
 80139d2:	200a      	movs	r0, #10
 80139d4:	183b      	adds	r3, r7, r0
 80139d6:	49c7      	ldr	r1, [pc, #796]	@ (8013cf4 <USB_DeactivateEndpoint+0x368>)
 80139d8:	400a      	ands	r2, r1
 80139da:	801a      	strh	r2, [r3, #0]
 80139dc:	687a      	ldr	r2, [r7, #4]
 80139de:	683b      	ldr	r3, [r7, #0]
 80139e0:	781b      	ldrb	r3, [r3, #0]
 80139e2:	009b      	lsls	r3, r3, #2
 80139e4:	18d3      	adds	r3, r2, r3
 80139e6:	183a      	adds	r2, r7, r0
 80139e8:	8812      	ldrh	r2, [r2, #0]
 80139ea:	49c3      	ldr	r1, [pc, #780]	@ (8013cf8 <USB_DeactivateEndpoint+0x36c>)
 80139ec:	430a      	orrs	r2, r1
 80139ee:	b292      	uxth	r2, r2
 80139f0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80139f2:	687a      	ldr	r2, [r7, #4]
 80139f4:	683b      	ldr	r3, [r7, #0]
 80139f6:	781b      	ldrb	r3, [r3, #0]
 80139f8:	009b      	lsls	r3, r3, #2
 80139fa:	18d3      	adds	r3, r2, r3
 80139fc:	881b      	ldrh	r3, [r3, #0]
 80139fe:	b29a      	uxth	r2, r3
 8013a00:	2008      	movs	r0, #8
 8013a02:	183b      	adds	r3, r7, r0
 8013a04:	49bd      	ldr	r1, [pc, #756]	@ (8013cfc <USB_DeactivateEndpoint+0x370>)
 8013a06:	400a      	ands	r2, r1
 8013a08:	801a      	strh	r2, [r3, #0]
 8013a0a:	687a      	ldr	r2, [r7, #4]
 8013a0c:	683b      	ldr	r3, [r7, #0]
 8013a0e:	781b      	ldrb	r3, [r3, #0]
 8013a10:	009b      	lsls	r3, r3, #2
 8013a12:	18d3      	adds	r3, r2, r3
 8013a14:	183a      	adds	r2, r7, r0
 8013a16:	8812      	ldrh	r2, [r2, #0]
 8013a18:	49b9      	ldr	r1, [pc, #740]	@ (8013d00 <USB_DeactivateEndpoint+0x374>)
 8013a1a:	430a      	orrs	r2, r1
 8013a1c:	b292      	uxth	r2, r2
 8013a1e:	801a      	strh	r2, [r3, #0]
 8013a20:	e163      	b.n	8013cea <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013a22:	687a      	ldr	r2, [r7, #4]
 8013a24:	683b      	ldr	r3, [r7, #0]
 8013a26:	781b      	ldrb	r3, [r3, #0]
 8013a28:	009b      	lsls	r3, r3, #2
 8013a2a:	18d2      	adds	r2, r2, r3
 8013a2c:	2112      	movs	r1, #18
 8013a2e:	187b      	adds	r3, r7, r1
 8013a30:	8812      	ldrh	r2, [r2, #0]
 8013a32:	801a      	strh	r2, [r3, #0]
 8013a34:	187b      	adds	r3, r7, r1
 8013a36:	881a      	ldrh	r2, [r3, #0]
 8013a38:	2380      	movs	r3, #128	@ 0x80
 8013a3a:	01db      	lsls	r3, r3, #7
 8013a3c:	4013      	ands	r3, r2
 8013a3e:	d016      	beq.n	8013a6e <USB_DeactivateEndpoint+0xe2>
 8013a40:	687a      	ldr	r2, [r7, #4]
 8013a42:	683b      	ldr	r3, [r7, #0]
 8013a44:	781b      	ldrb	r3, [r3, #0]
 8013a46:	009b      	lsls	r3, r3, #2
 8013a48:	18d3      	adds	r3, r2, r3
 8013a4a:	881b      	ldrh	r3, [r3, #0]
 8013a4c:	b29a      	uxth	r2, r3
 8013a4e:	2010      	movs	r0, #16
 8013a50:	183b      	adds	r3, r7, r0
 8013a52:	49a8      	ldr	r1, [pc, #672]	@ (8013cf4 <USB_DeactivateEndpoint+0x368>)
 8013a54:	400a      	ands	r2, r1
 8013a56:	801a      	strh	r2, [r3, #0]
 8013a58:	687a      	ldr	r2, [r7, #4]
 8013a5a:	683b      	ldr	r3, [r7, #0]
 8013a5c:	781b      	ldrb	r3, [r3, #0]
 8013a5e:	009b      	lsls	r3, r3, #2
 8013a60:	18d3      	adds	r3, r2, r3
 8013a62:	183a      	adds	r2, r7, r0
 8013a64:	8812      	ldrh	r2, [r2, #0]
 8013a66:	49a7      	ldr	r1, [pc, #668]	@ (8013d04 <USB_DeactivateEndpoint+0x378>)
 8013a68:	430a      	orrs	r2, r1
 8013a6a:	b292      	uxth	r2, r2
 8013a6c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013a6e:	687a      	ldr	r2, [r7, #4]
 8013a70:	683b      	ldr	r3, [r7, #0]
 8013a72:	781b      	ldrb	r3, [r3, #0]
 8013a74:	009b      	lsls	r3, r3, #2
 8013a76:	18d3      	adds	r3, r2, r3
 8013a78:	881b      	ldrh	r3, [r3, #0]
 8013a7a:	b29a      	uxth	r2, r3
 8013a7c:	200e      	movs	r0, #14
 8013a7e:	183b      	adds	r3, r7, r0
 8013a80:	49a1      	ldr	r1, [pc, #644]	@ (8013d08 <USB_DeactivateEndpoint+0x37c>)
 8013a82:	400a      	ands	r2, r1
 8013a84:	801a      	strh	r2, [r3, #0]
 8013a86:	687a      	ldr	r2, [r7, #4]
 8013a88:	683b      	ldr	r3, [r7, #0]
 8013a8a:	781b      	ldrb	r3, [r3, #0]
 8013a8c:	009b      	lsls	r3, r3, #2
 8013a8e:	18d3      	adds	r3, r2, r3
 8013a90:	183a      	adds	r2, r7, r0
 8013a92:	8812      	ldrh	r2, [r2, #0]
 8013a94:	499a      	ldr	r1, [pc, #616]	@ (8013d00 <USB_DeactivateEndpoint+0x374>)
 8013a96:	430a      	orrs	r2, r1
 8013a98:	b292      	uxth	r2, r2
 8013a9a:	801a      	strh	r2, [r3, #0]
 8013a9c:	e125      	b.n	8013cea <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8013a9e:	683b      	ldr	r3, [r7, #0]
 8013aa0:	785b      	ldrb	r3, [r3, #1]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d000      	beq.n	8013aa8 <USB_DeactivateEndpoint+0x11c>
 8013aa6:	e090      	b.n	8013bca <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013aa8:	687a      	ldr	r2, [r7, #4]
 8013aaa:	683b      	ldr	r3, [r7, #0]
 8013aac:	781b      	ldrb	r3, [r3, #0]
 8013aae:	009b      	lsls	r3, r3, #2
 8013ab0:	18d2      	adds	r2, r2, r3
 8013ab2:	2120      	movs	r1, #32
 8013ab4:	187b      	adds	r3, r7, r1
 8013ab6:	8812      	ldrh	r2, [r2, #0]
 8013ab8:	801a      	strh	r2, [r3, #0]
 8013aba:	187b      	adds	r3, r7, r1
 8013abc:	881a      	ldrh	r2, [r3, #0]
 8013abe:	2380      	movs	r3, #128	@ 0x80
 8013ac0:	01db      	lsls	r3, r3, #7
 8013ac2:	4013      	ands	r3, r2
 8013ac4:	d016      	beq.n	8013af4 <USB_DeactivateEndpoint+0x168>
 8013ac6:	687a      	ldr	r2, [r7, #4]
 8013ac8:	683b      	ldr	r3, [r7, #0]
 8013aca:	781b      	ldrb	r3, [r3, #0]
 8013acc:	009b      	lsls	r3, r3, #2
 8013ace:	18d3      	adds	r3, r2, r3
 8013ad0:	881b      	ldrh	r3, [r3, #0]
 8013ad2:	b29a      	uxth	r2, r3
 8013ad4:	201e      	movs	r0, #30
 8013ad6:	183b      	adds	r3, r7, r0
 8013ad8:	4986      	ldr	r1, [pc, #536]	@ (8013cf4 <USB_DeactivateEndpoint+0x368>)
 8013ada:	400a      	ands	r2, r1
 8013adc:	801a      	strh	r2, [r3, #0]
 8013ade:	687a      	ldr	r2, [r7, #4]
 8013ae0:	683b      	ldr	r3, [r7, #0]
 8013ae2:	781b      	ldrb	r3, [r3, #0]
 8013ae4:	009b      	lsls	r3, r3, #2
 8013ae6:	18d3      	adds	r3, r2, r3
 8013ae8:	183a      	adds	r2, r7, r0
 8013aea:	8812      	ldrh	r2, [r2, #0]
 8013aec:	4985      	ldr	r1, [pc, #532]	@ (8013d04 <USB_DeactivateEndpoint+0x378>)
 8013aee:	430a      	orrs	r2, r1
 8013af0:	b292      	uxth	r2, r2
 8013af2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013af4:	687a      	ldr	r2, [r7, #4]
 8013af6:	683b      	ldr	r3, [r7, #0]
 8013af8:	781b      	ldrb	r3, [r3, #0]
 8013afa:	009b      	lsls	r3, r3, #2
 8013afc:	18d2      	adds	r2, r2, r3
 8013afe:	211c      	movs	r1, #28
 8013b00:	187b      	adds	r3, r7, r1
 8013b02:	8812      	ldrh	r2, [r2, #0]
 8013b04:	801a      	strh	r2, [r3, #0]
 8013b06:	187b      	adds	r3, r7, r1
 8013b08:	881b      	ldrh	r3, [r3, #0]
 8013b0a:	2240      	movs	r2, #64	@ 0x40
 8013b0c:	4013      	ands	r3, r2
 8013b0e:	d016      	beq.n	8013b3e <USB_DeactivateEndpoint+0x1b2>
 8013b10:	687a      	ldr	r2, [r7, #4]
 8013b12:	683b      	ldr	r3, [r7, #0]
 8013b14:	781b      	ldrb	r3, [r3, #0]
 8013b16:	009b      	lsls	r3, r3, #2
 8013b18:	18d3      	adds	r3, r2, r3
 8013b1a:	881b      	ldrh	r3, [r3, #0]
 8013b1c:	b29a      	uxth	r2, r3
 8013b1e:	201a      	movs	r0, #26
 8013b20:	183b      	adds	r3, r7, r0
 8013b22:	4974      	ldr	r1, [pc, #464]	@ (8013cf4 <USB_DeactivateEndpoint+0x368>)
 8013b24:	400a      	ands	r2, r1
 8013b26:	801a      	strh	r2, [r3, #0]
 8013b28:	687a      	ldr	r2, [r7, #4]
 8013b2a:	683b      	ldr	r3, [r7, #0]
 8013b2c:	781b      	ldrb	r3, [r3, #0]
 8013b2e:	009b      	lsls	r3, r3, #2
 8013b30:	18d3      	adds	r3, r2, r3
 8013b32:	183a      	adds	r2, r7, r0
 8013b34:	8812      	ldrh	r2, [r2, #0]
 8013b36:	4970      	ldr	r1, [pc, #448]	@ (8013cf8 <USB_DeactivateEndpoint+0x36c>)
 8013b38:	430a      	orrs	r2, r1
 8013b3a:	b292      	uxth	r2, r2
 8013b3c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8013b3e:	687a      	ldr	r2, [r7, #4]
 8013b40:	683b      	ldr	r3, [r7, #0]
 8013b42:	781b      	ldrb	r3, [r3, #0]
 8013b44:	009b      	lsls	r3, r3, #2
 8013b46:	18d3      	adds	r3, r2, r3
 8013b48:	881b      	ldrh	r3, [r3, #0]
 8013b4a:	b29a      	uxth	r2, r3
 8013b4c:	2018      	movs	r0, #24
 8013b4e:	183b      	adds	r3, r7, r0
 8013b50:	4968      	ldr	r1, [pc, #416]	@ (8013cf4 <USB_DeactivateEndpoint+0x368>)
 8013b52:	400a      	ands	r2, r1
 8013b54:	801a      	strh	r2, [r3, #0]
 8013b56:	687a      	ldr	r2, [r7, #4]
 8013b58:	683b      	ldr	r3, [r7, #0]
 8013b5a:	781b      	ldrb	r3, [r3, #0]
 8013b5c:	009b      	lsls	r3, r3, #2
 8013b5e:	18d3      	adds	r3, r2, r3
 8013b60:	183a      	adds	r2, r7, r0
 8013b62:	8812      	ldrh	r2, [r2, #0]
 8013b64:	4964      	ldr	r1, [pc, #400]	@ (8013cf8 <USB_DeactivateEndpoint+0x36c>)
 8013b66:	430a      	orrs	r2, r1
 8013b68:	b292      	uxth	r2, r2
 8013b6a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013b6c:	687a      	ldr	r2, [r7, #4]
 8013b6e:	683b      	ldr	r3, [r7, #0]
 8013b70:	781b      	ldrb	r3, [r3, #0]
 8013b72:	009b      	lsls	r3, r3, #2
 8013b74:	18d3      	adds	r3, r2, r3
 8013b76:	881b      	ldrh	r3, [r3, #0]
 8013b78:	b29a      	uxth	r2, r3
 8013b7a:	2016      	movs	r0, #22
 8013b7c:	183b      	adds	r3, r7, r0
 8013b7e:	4962      	ldr	r1, [pc, #392]	@ (8013d08 <USB_DeactivateEndpoint+0x37c>)
 8013b80:	400a      	ands	r2, r1
 8013b82:	801a      	strh	r2, [r3, #0]
 8013b84:	687a      	ldr	r2, [r7, #4]
 8013b86:	683b      	ldr	r3, [r7, #0]
 8013b88:	781b      	ldrb	r3, [r3, #0]
 8013b8a:	009b      	lsls	r3, r3, #2
 8013b8c:	18d3      	adds	r3, r2, r3
 8013b8e:	183a      	adds	r2, r7, r0
 8013b90:	8812      	ldrh	r2, [r2, #0]
 8013b92:	495b      	ldr	r1, [pc, #364]	@ (8013d00 <USB_DeactivateEndpoint+0x374>)
 8013b94:	430a      	orrs	r2, r1
 8013b96:	b292      	uxth	r2, r2
 8013b98:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013b9a:	687a      	ldr	r2, [r7, #4]
 8013b9c:	683b      	ldr	r3, [r7, #0]
 8013b9e:	781b      	ldrb	r3, [r3, #0]
 8013ba0:	009b      	lsls	r3, r3, #2
 8013ba2:	18d3      	adds	r3, r2, r3
 8013ba4:	881b      	ldrh	r3, [r3, #0]
 8013ba6:	b29a      	uxth	r2, r3
 8013ba8:	2014      	movs	r0, #20
 8013baa:	183b      	adds	r3, r7, r0
 8013bac:	4953      	ldr	r1, [pc, #332]	@ (8013cfc <USB_DeactivateEndpoint+0x370>)
 8013bae:	400a      	ands	r2, r1
 8013bb0:	801a      	strh	r2, [r3, #0]
 8013bb2:	687a      	ldr	r2, [r7, #4]
 8013bb4:	683b      	ldr	r3, [r7, #0]
 8013bb6:	781b      	ldrb	r3, [r3, #0]
 8013bb8:	009b      	lsls	r3, r3, #2
 8013bba:	18d3      	adds	r3, r2, r3
 8013bbc:	183a      	adds	r2, r7, r0
 8013bbe:	8812      	ldrh	r2, [r2, #0]
 8013bc0:	494f      	ldr	r1, [pc, #316]	@ (8013d00 <USB_DeactivateEndpoint+0x374>)
 8013bc2:	430a      	orrs	r2, r1
 8013bc4:	b292      	uxth	r2, r2
 8013bc6:	801a      	strh	r2, [r3, #0]
 8013bc8:	e08f      	b.n	8013cea <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013bca:	687a      	ldr	r2, [r7, #4]
 8013bcc:	683b      	ldr	r3, [r7, #0]
 8013bce:	781b      	ldrb	r3, [r3, #0]
 8013bd0:	009b      	lsls	r3, r3, #2
 8013bd2:	18d2      	adds	r2, r2, r3
 8013bd4:	212e      	movs	r1, #46	@ 0x2e
 8013bd6:	187b      	adds	r3, r7, r1
 8013bd8:	8812      	ldrh	r2, [r2, #0]
 8013bda:	801a      	strh	r2, [r3, #0]
 8013bdc:	187b      	adds	r3, r7, r1
 8013bde:	881a      	ldrh	r2, [r3, #0]
 8013be0:	2380      	movs	r3, #128	@ 0x80
 8013be2:	01db      	lsls	r3, r3, #7
 8013be4:	4013      	ands	r3, r2
 8013be6:	d016      	beq.n	8013c16 <USB_DeactivateEndpoint+0x28a>
 8013be8:	687a      	ldr	r2, [r7, #4]
 8013bea:	683b      	ldr	r3, [r7, #0]
 8013bec:	781b      	ldrb	r3, [r3, #0]
 8013bee:	009b      	lsls	r3, r3, #2
 8013bf0:	18d3      	adds	r3, r2, r3
 8013bf2:	881b      	ldrh	r3, [r3, #0]
 8013bf4:	b29a      	uxth	r2, r3
 8013bf6:	202c      	movs	r0, #44	@ 0x2c
 8013bf8:	183b      	adds	r3, r7, r0
 8013bfa:	493e      	ldr	r1, [pc, #248]	@ (8013cf4 <USB_DeactivateEndpoint+0x368>)
 8013bfc:	400a      	ands	r2, r1
 8013bfe:	801a      	strh	r2, [r3, #0]
 8013c00:	687a      	ldr	r2, [r7, #4]
 8013c02:	683b      	ldr	r3, [r7, #0]
 8013c04:	781b      	ldrb	r3, [r3, #0]
 8013c06:	009b      	lsls	r3, r3, #2
 8013c08:	18d3      	adds	r3, r2, r3
 8013c0a:	183a      	adds	r2, r7, r0
 8013c0c:	8812      	ldrh	r2, [r2, #0]
 8013c0e:	493d      	ldr	r1, [pc, #244]	@ (8013d04 <USB_DeactivateEndpoint+0x378>)
 8013c10:	430a      	orrs	r2, r1
 8013c12:	b292      	uxth	r2, r2
 8013c14:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013c16:	687a      	ldr	r2, [r7, #4]
 8013c18:	683b      	ldr	r3, [r7, #0]
 8013c1a:	781b      	ldrb	r3, [r3, #0]
 8013c1c:	009b      	lsls	r3, r3, #2
 8013c1e:	18d2      	adds	r2, r2, r3
 8013c20:	212a      	movs	r1, #42	@ 0x2a
 8013c22:	187b      	adds	r3, r7, r1
 8013c24:	8812      	ldrh	r2, [r2, #0]
 8013c26:	801a      	strh	r2, [r3, #0]
 8013c28:	187b      	adds	r3, r7, r1
 8013c2a:	881b      	ldrh	r3, [r3, #0]
 8013c2c:	2240      	movs	r2, #64	@ 0x40
 8013c2e:	4013      	ands	r3, r2
 8013c30:	d016      	beq.n	8013c60 <USB_DeactivateEndpoint+0x2d4>
 8013c32:	687a      	ldr	r2, [r7, #4]
 8013c34:	683b      	ldr	r3, [r7, #0]
 8013c36:	781b      	ldrb	r3, [r3, #0]
 8013c38:	009b      	lsls	r3, r3, #2
 8013c3a:	18d3      	adds	r3, r2, r3
 8013c3c:	881b      	ldrh	r3, [r3, #0]
 8013c3e:	b29a      	uxth	r2, r3
 8013c40:	2028      	movs	r0, #40	@ 0x28
 8013c42:	183b      	adds	r3, r7, r0
 8013c44:	492b      	ldr	r1, [pc, #172]	@ (8013cf4 <USB_DeactivateEndpoint+0x368>)
 8013c46:	400a      	ands	r2, r1
 8013c48:	801a      	strh	r2, [r3, #0]
 8013c4a:	687a      	ldr	r2, [r7, #4]
 8013c4c:	683b      	ldr	r3, [r7, #0]
 8013c4e:	781b      	ldrb	r3, [r3, #0]
 8013c50:	009b      	lsls	r3, r3, #2
 8013c52:	18d3      	adds	r3, r2, r3
 8013c54:	183a      	adds	r2, r7, r0
 8013c56:	8812      	ldrh	r2, [r2, #0]
 8013c58:	4927      	ldr	r1, [pc, #156]	@ (8013cf8 <USB_DeactivateEndpoint+0x36c>)
 8013c5a:	430a      	orrs	r2, r1
 8013c5c:	b292      	uxth	r2, r2
 8013c5e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8013c60:	687a      	ldr	r2, [r7, #4]
 8013c62:	683b      	ldr	r3, [r7, #0]
 8013c64:	781b      	ldrb	r3, [r3, #0]
 8013c66:	009b      	lsls	r3, r3, #2
 8013c68:	18d3      	adds	r3, r2, r3
 8013c6a:	881b      	ldrh	r3, [r3, #0]
 8013c6c:	b29a      	uxth	r2, r3
 8013c6e:	2026      	movs	r0, #38	@ 0x26
 8013c70:	183b      	adds	r3, r7, r0
 8013c72:	4920      	ldr	r1, [pc, #128]	@ (8013cf4 <USB_DeactivateEndpoint+0x368>)
 8013c74:	400a      	ands	r2, r1
 8013c76:	801a      	strh	r2, [r3, #0]
 8013c78:	687a      	ldr	r2, [r7, #4]
 8013c7a:	683b      	ldr	r3, [r7, #0]
 8013c7c:	781b      	ldrb	r3, [r3, #0]
 8013c7e:	009b      	lsls	r3, r3, #2
 8013c80:	18d3      	adds	r3, r2, r3
 8013c82:	183a      	adds	r2, r7, r0
 8013c84:	8812      	ldrh	r2, [r2, #0]
 8013c86:	491f      	ldr	r1, [pc, #124]	@ (8013d04 <USB_DeactivateEndpoint+0x378>)
 8013c88:	430a      	orrs	r2, r1
 8013c8a:	b292      	uxth	r2, r2
 8013c8c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013c8e:	687a      	ldr	r2, [r7, #4]
 8013c90:	683b      	ldr	r3, [r7, #0]
 8013c92:	781b      	ldrb	r3, [r3, #0]
 8013c94:	009b      	lsls	r3, r3, #2
 8013c96:	18d3      	adds	r3, r2, r3
 8013c98:	881b      	ldrh	r3, [r3, #0]
 8013c9a:	b29a      	uxth	r2, r3
 8013c9c:	2024      	movs	r0, #36	@ 0x24
 8013c9e:	183b      	adds	r3, r7, r0
 8013ca0:	4916      	ldr	r1, [pc, #88]	@ (8013cfc <USB_DeactivateEndpoint+0x370>)
 8013ca2:	400a      	ands	r2, r1
 8013ca4:	801a      	strh	r2, [r3, #0]
 8013ca6:	687a      	ldr	r2, [r7, #4]
 8013ca8:	683b      	ldr	r3, [r7, #0]
 8013caa:	781b      	ldrb	r3, [r3, #0]
 8013cac:	009b      	lsls	r3, r3, #2
 8013cae:	18d3      	adds	r3, r2, r3
 8013cb0:	183a      	adds	r2, r7, r0
 8013cb2:	8812      	ldrh	r2, [r2, #0]
 8013cb4:	4912      	ldr	r1, [pc, #72]	@ (8013d00 <USB_DeactivateEndpoint+0x374>)
 8013cb6:	430a      	orrs	r2, r1
 8013cb8:	b292      	uxth	r2, r2
 8013cba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013cbc:	687a      	ldr	r2, [r7, #4]
 8013cbe:	683b      	ldr	r3, [r7, #0]
 8013cc0:	781b      	ldrb	r3, [r3, #0]
 8013cc2:	009b      	lsls	r3, r3, #2
 8013cc4:	18d3      	adds	r3, r2, r3
 8013cc6:	881b      	ldrh	r3, [r3, #0]
 8013cc8:	b29a      	uxth	r2, r3
 8013cca:	2022      	movs	r0, #34	@ 0x22
 8013ccc:	183b      	adds	r3, r7, r0
 8013cce:	490e      	ldr	r1, [pc, #56]	@ (8013d08 <USB_DeactivateEndpoint+0x37c>)
 8013cd0:	400a      	ands	r2, r1
 8013cd2:	801a      	strh	r2, [r3, #0]
 8013cd4:	687a      	ldr	r2, [r7, #4]
 8013cd6:	683b      	ldr	r3, [r7, #0]
 8013cd8:	781b      	ldrb	r3, [r3, #0]
 8013cda:	009b      	lsls	r3, r3, #2
 8013cdc:	18d3      	adds	r3, r2, r3
 8013cde:	183a      	adds	r2, r7, r0
 8013ce0:	8812      	ldrh	r2, [r2, #0]
 8013ce2:	4907      	ldr	r1, [pc, #28]	@ (8013d00 <USB_DeactivateEndpoint+0x374>)
 8013ce4:	430a      	orrs	r2, r1
 8013ce6:	b292      	uxth	r2, r2
 8013ce8:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8013cea:	2300      	movs	r3, #0
}
 8013cec:	0018      	movs	r0, r3
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	b00c      	add	sp, #48	@ 0x30
 8013cf2:	bd80      	pop	{r7, pc}
 8013cf4:	ffff8f8f 	.word	0xffff8f8f
 8013cf8:	ffff80c0 	.word	0xffff80c0
 8013cfc:	ffff8fbf 	.word	0xffff8fbf
 8013d00:	ffff8080 	.word	0xffff8080
 8013d04:	ffffc080 	.word	0xffffc080
 8013d08:	ffffbf8f 	.word	0xffffbf8f

08013d0c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013d0c:	b590      	push	{r4, r7, lr}
 8013d0e:	b0c3      	sub	sp, #268	@ 0x10c
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
 8013d14:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013d16:	683b      	ldr	r3, [r7, #0]
 8013d18:	785b      	ldrb	r3, [r3, #1]
 8013d1a:	2b01      	cmp	r3, #1
 8013d1c:	d001      	beq.n	8013d22 <USB_EPStartXfer+0x16>
 8013d1e:	f000 fd2d 	bl	801477c <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8013d22:	683b      	ldr	r3, [r7, #0]
 8013d24:	699a      	ldr	r2, [r3, #24]
 8013d26:	683b      	ldr	r3, [r7, #0]
 8013d28:	691b      	ldr	r3, [r3, #16]
 8013d2a:	429a      	cmp	r2, r3
 8013d2c:	d905      	bls.n	8013d3a <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8013d2e:	683b      	ldr	r3, [r7, #0]
 8013d30:	691b      	ldr	r3, [r3, #16]
 8013d32:	1d7a      	adds	r2, r7, #5
 8013d34:	32ff      	adds	r2, #255	@ 0xff
 8013d36:	6013      	str	r3, [r2, #0]
 8013d38:	e004      	b.n	8013d44 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8013d3a:	683b      	ldr	r3, [r7, #0]
 8013d3c:	699b      	ldr	r3, [r3, #24]
 8013d3e:	1d7a      	adds	r2, r7, #5
 8013d40:	32ff      	adds	r2, #255	@ 0xff
 8013d42:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8013d44:	683b      	ldr	r3, [r7, #0]
 8013d46:	7b1b      	ldrb	r3, [r3, #12]
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d125      	bne.n	8013d98 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8013d4c:	683b      	ldr	r3, [r7, #0]
 8013d4e:	6959      	ldr	r1, [r3, #20]
 8013d50:	683b      	ldr	r3, [r7, #0]
 8013d52:	88da      	ldrh	r2, [r3, #6]
 8013d54:	1d7b      	adds	r3, r7, #5
 8013d56:	33ff      	adds	r3, #255	@ 0xff
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	b29b      	uxth	r3, r3
 8013d5c:	6878      	ldr	r0, [r7, #4]
 8013d5e:	f001 fa47 	bl	80151f0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	613b      	str	r3, [r7, #16]
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	2250      	movs	r2, #80	@ 0x50
 8013d6a:	5a9b      	ldrh	r3, [r3, r2]
 8013d6c:	b29b      	uxth	r3, r3
 8013d6e:	001a      	movs	r2, r3
 8013d70:	693b      	ldr	r3, [r7, #16]
 8013d72:	189b      	adds	r3, r3, r2
 8013d74:	613b      	str	r3, [r7, #16]
 8013d76:	683b      	ldr	r3, [r7, #0]
 8013d78:	781b      	ldrb	r3, [r3, #0]
 8013d7a:	00da      	lsls	r2, r3, #3
 8013d7c:	693b      	ldr	r3, [r7, #16]
 8013d7e:	18d3      	adds	r3, r2, r3
 8013d80:	4ad7      	ldr	r2, [pc, #860]	@ (80140e0 <USB_EPStartXfer+0x3d4>)
 8013d82:	4694      	mov	ip, r2
 8013d84:	4463      	add	r3, ip
 8013d86:	60fb      	str	r3, [r7, #12]
 8013d88:	1d7b      	adds	r3, r7, #5
 8013d8a:	33ff      	adds	r3, #255	@ 0xff
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	b29a      	uxth	r2, r3
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	801a      	strh	r2, [r3, #0]
 8013d94:	f000 fccd 	bl	8014732 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8013d98:	683b      	ldr	r3, [r7, #0]
 8013d9a:	78db      	ldrb	r3, [r3, #3]
 8013d9c:	2b02      	cmp	r3, #2
 8013d9e:	d000      	beq.n	8013da2 <USB_EPStartXfer+0x96>
 8013da0:	e362      	b.n	8014468 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8013da2:	683b      	ldr	r3, [r7, #0]
 8013da4:	6a1a      	ldr	r2, [r3, #32]
 8013da6:	683b      	ldr	r3, [r7, #0]
 8013da8:	691b      	ldr	r3, [r3, #16]
 8013daa:	429a      	cmp	r2, r3
 8013dac:	d800      	bhi.n	8013db0 <USB_EPStartXfer+0xa4>
 8013dae:	e309      	b.n	80143c4 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8013db0:	687a      	ldr	r2, [r7, #4]
 8013db2:	683b      	ldr	r3, [r7, #0]
 8013db4:	781b      	ldrb	r3, [r3, #0]
 8013db6:	009b      	lsls	r3, r3, #2
 8013db8:	18d3      	adds	r3, r2, r3
 8013dba:	881b      	ldrh	r3, [r3, #0]
 8013dbc:	b29a      	uxth	r2, r3
 8013dbe:	2056      	movs	r0, #86	@ 0x56
 8013dc0:	183b      	adds	r3, r7, r0
 8013dc2:	49c8      	ldr	r1, [pc, #800]	@ (80140e4 <USB_EPStartXfer+0x3d8>)
 8013dc4:	400a      	ands	r2, r1
 8013dc6:	801a      	strh	r2, [r3, #0]
 8013dc8:	687a      	ldr	r2, [r7, #4]
 8013dca:	683b      	ldr	r3, [r7, #0]
 8013dcc:	781b      	ldrb	r3, [r3, #0]
 8013dce:	009b      	lsls	r3, r3, #2
 8013dd0:	18d3      	adds	r3, r2, r3
 8013dd2:	183a      	adds	r2, r7, r0
 8013dd4:	8812      	ldrh	r2, [r2, #0]
 8013dd6:	49c4      	ldr	r1, [pc, #784]	@ (80140e8 <USB_EPStartXfer+0x3dc>)
 8013dd8:	430a      	orrs	r2, r1
 8013dda:	b292      	uxth	r2, r2
 8013ddc:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8013dde:	683b      	ldr	r3, [r7, #0]
 8013de0:	6a1a      	ldr	r2, [r3, #32]
 8013de2:	1d7b      	adds	r3, r7, #5
 8013de4:	33ff      	adds	r3, #255	@ 0xff
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	1ad2      	subs	r2, r2, r3
 8013dea:	683b      	ldr	r3, [r7, #0]
 8013dec:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8013dee:	687a      	ldr	r2, [r7, #4]
 8013df0:	683b      	ldr	r3, [r7, #0]
 8013df2:	781b      	ldrb	r3, [r3, #0]
 8013df4:	009b      	lsls	r3, r3, #2
 8013df6:	18d3      	adds	r3, r2, r3
 8013df8:	881b      	ldrh	r3, [r3, #0]
 8013dfa:	b29b      	uxth	r3, r3
 8013dfc:	001a      	movs	r2, r3
 8013dfe:	2340      	movs	r3, #64	@ 0x40
 8013e00:	4013      	ands	r3, r2
 8013e02:	d100      	bne.n	8013e06 <USB_EPStartXfer+0xfa>
 8013e04:	e176      	b.n	80140f4 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	633b      	str	r3, [r7, #48]	@ 0x30
 8013e0a:	683b      	ldr	r3, [r7, #0]
 8013e0c:	785b      	ldrb	r3, [r3, #1]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d000      	beq.n	8013e14 <USB_EPStartXfer+0x108>
 8013e12:	e074      	b.n	8013efe <USB_EPStartXfer+0x1f2>
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	2250      	movs	r2, #80	@ 0x50
 8013e1c:	5a9b      	ldrh	r3, [r3, r2]
 8013e1e:	b29b      	uxth	r3, r3
 8013e20:	001a      	movs	r2, r3
 8013e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e24:	189b      	adds	r3, r3, r2
 8013e26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013e28:	683b      	ldr	r3, [r7, #0]
 8013e2a:	781b      	ldrb	r3, [r3, #0]
 8013e2c:	00da      	lsls	r2, r3, #3
 8013e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e30:	18d3      	adds	r3, r2, r3
 8013e32:	4aae      	ldr	r2, [pc, #696]	@ (80140ec <USB_EPStartXfer+0x3e0>)
 8013e34:	4694      	mov	ip, r2
 8013e36:	4463      	add	r3, ip
 8013e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8013e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e3c:	881b      	ldrh	r3, [r3, #0]
 8013e3e:	b29b      	uxth	r3, r3
 8013e40:	059b      	lsls	r3, r3, #22
 8013e42:	0d9b      	lsrs	r3, r3, #22
 8013e44:	b29a      	uxth	r2, r3
 8013e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e48:	801a      	strh	r2, [r3, #0]
 8013e4a:	1d7b      	adds	r3, r7, #5
 8013e4c:	33ff      	adds	r3, #255	@ 0xff
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	2b3e      	cmp	r3, #62	@ 0x3e
 8013e52:	d924      	bls.n	8013e9e <USB_EPStartXfer+0x192>
 8013e54:	1d7b      	adds	r3, r7, #5
 8013e56:	33ff      	adds	r3, #255	@ 0xff
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	095b      	lsrs	r3, r3, #5
 8013e5c:	1c7a      	adds	r2, r7, #1
 8013e5e:	32ff      	adds	r2, #255	@ 0xff
 8013e60:	6013      	str	r3, [r2, #0]
 8013e62:	1d7b      	adds	r3, r7, #5
 8013e64:	33ff      	adds	r3, #255	@ 0xff
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	221f      	movs	r2, #31
 8013e6a:	4013      	ands	r3, r2
 8013e6c:	d106      	bne.n	8013e7c <USB_EPStartXfer+0x170>
 8013e6e:	1c7b      	adds	r3, r7, #1
 8013e70:	33ff      	adds	r3, #255	@ 0xff
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	3b01      	subs	r3, #1
 8013e76:	1c7a      	adds	r2, r7, #1
 8013e78:	32ff      	adds	r2, #255	@ 0xff
 8013e7a:	6013      	str	r3, [r2, #0]
 8013e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e7e:	881b      	ldrh	r3, [r3, #0]
 8013e80:	b29a      	uxth	r2, r3
 8013e82:	1c7b      	adds	r3, r7, #1
 8013e84:	33ff      	adds	r3, #255	@ 0xff
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	b29b      	uxth	r3, r3
 8013e8a:	029b      	lsls	r3, r3, #10
 8013e8c:	b29b      	uxth	r3, r3
 8013e8e:	4313      	orrs	r3, r2
 8013e90:	b29b      	uxth	r3, r3
 8013e92:	4a97      	ldr	r2, [pc, #604]	@ (80140f0 <USB_EPStartXfer+0x3e4>)
 8013e94:	4313      	orrs	r3, r2
 8013e96:	b29a      	uxth	r2, r3
 8013e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e9a:	801a      	strh	r2, [r3, #0]
 8013e9c:	e04a      	b.n	8013f34 <USB_EPStartXfer+0x228>
 8013e9e:	1d7b      	adds	r3, r7, #5
 8013ea0:	33ff      	adds	r3, #255	@ 0xff
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d108      	bne.n	8013eba <USB_EPStartXfer+0x1ae>
 8013ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eaa:	881b      	ldrh	r3, [r3, #0]
 8013eac:	b29b      	uxth	r3, r3
 8013eae:	4a90      	ldr	r2, [pc, #576]	@ (80140f0 <USB_EPStartXfer+0x3e4>)
 8013eb0:	4313      	orrs	r3, r2
 8013eb2:	b29a      	uxth	r2, r3
 8013eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eb6:	801a      	strh	r2, [r3, #0]
 8013eb8:	e03c      	b.n	8013f34 <USB_EPStartXfer+0x228>
 8013eba:	1d7b      	adds	r3, r7, #5
 8013ebc:	33ff      	adds	r3, #255	@ 0xff
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	085b      	lsrs	r3, r3, #1
 8013ec2:	1c7a      	adds	r2, r7, #1
 8013ec4:	32ff      	adds	r2, #255	@ 0xff
 8013ec6:	6013      	str	r3, [r2, #0]
 8013ec8:	1d7b      	adds	r3, r7, #5
 8013eca:	33ff      	adds	r3, #255	@ 0xff
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	2201      	movs	r2, #1
 8013ed0:	4013      	ands	r3, r2
 8013ed2:	d006      	beq.n	8013ee2 <USB_EPStartXfer+0x1d6>
 8013ed4:	1c7b      	adds	r3, r7, #1
 8013ed6:	33ff      	adds	r3, #255	@ 0xff
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	3301      	adds	r3, #1
 8013edc:	1c7a      	adds	r2, r7, #1
 8013ede:	32ff      	adds	r2, #255	@ 0xff
 8013ee0:	6013      	str	r3, [r2, #0]
 8013ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ee4:	881b      	ldrh	r3, [r3, #0]
 8013ee6:	b29a      	uxth	r2, r3
 8013ee8:	1c7b      	adds	r3, r7, #1
 8013eea:	33ff      	adds	r3, #255	@ 0xff
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	b29b      	uxth	r3, r3
 8013ef0:	029b      	lsls	r3, r3, #10
 8013ef2:	b29b      	uxth	r3, r3
 8013ef4:	4313      	orrs	r3, r2
 8013ef6:	b29a      	uxth	r2, r3
 8013ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013efa:	801a      	strh	r2, [r3, #0]
 8013efc:	e01a      	b.n	8013f34 <USB_EPStartXfer+0x228>
 8013efe:	683b      	ldr	r3, [r7, #0]
 8013f00:	785b      	ldrb	r3, [r3, #1]
 8013f02:	2b01      	cmp	r3, #1
 8013f04:	d116      	bne.n	8013f34 <USB_EPStartXfer+0x228>
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	2250      	movs	r2, #80	@ 0x50
 8013f0a:	5a9b      	ldrh	r3, [r3, r2]
 8013f0c:	b29b      	uxth	r3, r3
 8013f0e:	001a      	movs	r2, r3
 8013f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f12:	189b      	adds	r3, r3, r2
 8013f14:	633b      	str	r3, [r7, #48]	@ 0x30
 8013f16:	683b      	ldr	r3, [r7, #0]
 8013f18:	781b      	ldrb	r3, [r3, #0]
 8013f1a:	00da      	lsls	r2, r3, #3
 8013f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f1e:	18d3      	adds	r3, r2, r3
 8013f20:	4a72      	ldr	r2, [pc, #456]	@ (80140ec <USB_EPStartXfer+0x3e0>)
 8013f22:	4694      	mov	ip, r2
 8013f24:	4463      	add	r3, ip
 8013f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013f28:	1d7b      	adds	r3, r7, #5
 8013f2a:	33ff      	adds	r3, #255	@ 0xff
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	b29a      	uxth	r2, r3
 8013f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f32:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8013f34:	2076      	movs	r0, #118	@ 0x76
 8013f36:	183b      	adds	r3, r7, r0
 8013f38:	683a      	ldr	r2, [r7, #0]
 8013f3a:	8952      	ldrh	r2, [r2, #10]
 8013f3c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013f3e:	683b      	ldr	r3, [r7, #0]
 8013f40:	6959      	ldr	r1, [r3, #20]
 8013f42:	1d7b      	adds	r3, r7, #5
 8013f44:	33ff      	adds	r3, #255	@ 0xff
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	b29c      	uxth	r4, r3
 8013f4a:	183b      	adds	r3, r7, r0
 8013f4c:	881a      	ldrh	r2, [r3, #0]
 8013f4e:	6878      	ldr	r0, [r7, #4]
 8013f50:	0023      	movs	r3, r4
 8013f52:	f001 f94d 	bl	80151f0 <USB_WritePMA>
            ep->xfer_buff += len;
 8013f56:	683b      	ldr	r3, [r7, #0]
 8013f58:	695a      	ldr	r2, [r3, #20]
 8013f5a:	1d7b      	adds	r3, r7, #5
 8013f5c:	33ff      	adds	r3, #255	@ 0xff
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	18d2      	adds	r2, r2, r3
 8013f62:	683b      	ldr	r3, [r7, #0]
 8013f64:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8013f66:	683b      	ldr	r3, [r7, #0]
 8013f68:	6a1a      	ldr	r2, [r3, #32]
 8013f6a:	683b      	ldr	r3, [r7, #0]
 8013f6c:	691b      	ldr	r3, [r3, #16]
 8013f6e:	429a      	cmp	r2, r3
 8013f70:	d908      	bls.n	8013f84 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8013f72:	683b      	ldr	r3, [r7, #0]
 8013f74:	6a1a      	ldr	r2, [r3, #32]
 8013f76:	1d7b      	adds	r3, r7, #5
 8013f78:	33ff      	adds	r3, #255	@ 0xff
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	1ad2      	subs	r2, r2, r3
 8013f7e:	683b      	ldr	r3, [r7, #0]
 8013f80:	621a      	str	r2, [r3, #32]
 8013f82:	e007      	b.n	8013f94 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8013f84:	683b      	ldr	r3, [r7, #0]
 8013f86:	6a1b      	ldr	r3, [r3, #32]
 8013f88:	1d7a      	adds	r2, r7, #5
 8013f8a:	32ff      	adds	r2, #255	@ 0xff
 8013f8c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8013f8e:	683b      	ldr	r3, [r7, #0]
 8013f90:	2200      	movs	r2, #0
 8013f92:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013f94:	683b      	ldr	r3, [r7, #0]
 8013f96:	785b      	ldrb	r3, [r3, #1]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d000      	beq.n	8013f9e <USB_EPStartXfer+0x292>
 8013f9c:	e070      	b.n	8014080 <USB_EPStartXfer+0x374>
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	61bb      	str	r3, [r7, #24]
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	2250      	movs	r2, #80	@ 0x50
 8013fa6:	5a9b      	ldrh	r3, [r3, r2]
 8013fa8:	b29b      	uxth	r3, r3
 8013faa:	001a      	movs	r2, r3
 8013fac:	69bb      	ldr	r3, [r7, #24]
 8013fae:	189b      	adds	r3, r3, r2
 8013fb0:	61bb      	str	r3, [r7, #24]
 8013fb2:	683b      	ldr	r3, [r7, #0]
 8013fb4:	781b      	ldrb	r3, [r3, #0]
 8013fb6:	00da      	lsls	r2, r3, #3
 8013fb8:	69bb      	ldr	r3, [r7, #24]
 8013fba:	18d3      	adds	r3, r2, r3
 8013fbc:	4a48      	ldr	r2, [pc, #288]	@ (80140e0 <USB_EPStartXfer+0x3d4>)
 8013fbe:	4694      	mov	ip, r2
 8013fc0:	4463      	add	r3, ip
 8013fc2:	617b      	str	r3, [r7, #20]
 8013fc4:	697b      	ldr	r3, [r7, #20]
 8013fc6:	881b      	ldrh	r3, [r3, #0]
 8013fc8:	b29b      	uxth	r3, r3
 8013fca:	059b      	lsls	r3, r3, #22
 8013fcc:	0d9b      	lsrs	r3, r3, #22
 8013fce:	b29a      	uxth	r2, r3
 8013fd0:	697b      	ldr	r3, [r7, #20]
 8013fd2:	801a      	strh	r2, [r3, #0]
 8013fd4:	1d7b      	adds	r3, r7, #5
 8013fd6:	33ff      	adds	r3, #255	@ 0xff
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	2b3e      	cmp	r3, #62	@ 0x3e
 8013fdc:	d922      	bls.n	8014024 <USB_EPStartXfer+0x318>
 8013fde:	1d7b      	adds	r3, r7, #5
 8013fe0:	33ff      	adds	r3, #255	@ 0xff
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	095b      	lsrs	r3, r3, #5
 8013fe6:	21fc      	movs	r1, #252	@ 0xfc
 8013fe8:	187a      	adds	r2, r7, r1
 8013fea:	6013      	str	r3, [r2, #0]
 8013fec:	1d7b      	adds	r3, r7, #5
 8013fee:	33ff      	adds	r3, #255	@ 0xff
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	221f      	movs	r2, #31
 8013ff4:	4013      	ands	r3, r2
 8013ff6:	d104      	bne.n	8014002 <USB_EPStartXfer+0x2f6>
 8013ff8:	187b      	adds	r3, r7, r1
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	3b01      	subs	r3, #1
 8013ffe:	187a      	adds	r2, r7, r1
 8014000:	6013      	str	r3, [r2, #0]
 8014002:	697b      	ldr	r3, [r7, #20]
 8014004:	881b      	ldrh	r3, [r3, #0]
 8014006:	b29a      	uxth	r2, r3
 8014008:	23fc      	movs	r3, #252	@ 0xfc
 801400a:	18fb      	adds	r3, r7, r3
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	b29b      	uxth	r3, r3
 8014010:	029b      	lsls	r3, r3, #10
 8014012:	b29b      	uxth	r3, r3
 8014014:	4313      	orrs	r3, r2
 8014016:	b29b      	uxth	r3, r3
 8014018:	4a35      	ldr	r2, [pc, #212]	@ (80140f0 <USB_EPStartXfer+0x3e4>)
 801401a:	4313      	orrs	r3, r2
 801401c:	b29a      	uxth	r2, r3
 801401e:	697b      	ldr	r3, [r7, #20]
 8014020:	801a      	strh	r2, [r3, #0]
 8014022:	e04a      	b.n	80140ba <USB_EPStartXfer+0x3ae>
 8014024:	1d7b      	adds	r3, r7, #5
 8014026:	33ff      	adds	r3, #255	@ 0xff
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d108      	bne.n	8014040 <USB_EPStartXfer+0x334>
 801402e:	697b      	ldr	r3, [r7, #20]
 8014030:	881b      	ldrh	r3, [r3, #0]
 8014032:	b29b      	uxth	r3, r3
 8014034:	4a2e      	ldr	r2, [pc, #184]	@ (80140f0 <USB_EPStartXfer+0x3e4>)
 8014036:	4313      	orrs	r3, r2
 8014038:	b29a      	uxth	r2, r3
 801403a:	697b      	ldr	r3, [r7, #20]
 801403c:	801a      	strh	r2, [r3, #0]
 801403e:	e03c      	b.n	80140ba <USB_EPStartXfer+0x3ae>
 8014040:	1d7b      	adds	r3, r7, #5
 8014042:	33ff      	adds	r3, #255	@ 0xff
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	085b      	lsrs	r3, r3, #1
 8014048:	21fc      	movs	r1, #252	@ 0xfc
 801404a:	187a      	adds	r2, r7, r1
 801404c:	6013      	str	r3, [r2, #0]
 801404e:	1d7b      	adds	r3, r7, #5
 8014050:	33ff      	adds	r3, #255	@ 0xff
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	2201      	movs	r2, #1
 8014056:	4013      	ands	r3, r2
 8014058:	d004      	beq.n	8014064 <USB_EPStartXfer+0x358>
 801405a:	187b      	adds	r3, r7, r1
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	3301      	adds	r3, #1
 8014060:	187a      	adds	r2, r7, r1
 8014062:	6013      	str	r3, [r2, #0]
 8014064:	697b      	ldr	r3, [r7, #20]
 8014066:	881b      	ldrh	r3, [r3, #0]
 8014068:	b29a      	uxth	r2, r3
 801406a:	23fc      	movs	r3, #252	@ 0xfc
 801406c:	18fb      	adds	r3, r7, r3
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	b29b      	uxth	r3, r3
 8014072:	029b      	lsls	r3, r3, #10
 8014074:	b29b      	uxth	r3, r3
 8014076:	4313      	orrs	r3, r2
 8014078:	b29a      	uxth	r2, r3
 801407a:	697b      	ldr	r3, [r7, #20]
 801407c:	801a      	strh	r2, [r3, #0]
 801407e:	e01c      	b.n	80140ba <USB_EPStartXfer+0x3ae>
 8014080:	683b      	ldr	r3, [r7, #0]
 8014082:	785b      	ldrb	r3, [r3, #1]
 8014084:	2b01      	cmp	r3, #1
 8014086:	d118      	bne.n	80140ba <USB_EPStartXfer+0x3ae>
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	623b      	str	r3, [r7, #32]
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	2250      	movs	r2, #80	@ 0x50
 8014090:	5a9b      	ldrh	r3, [r3, r2]
 8014092:	b29b      	uxth	r3, r3
 8014094:	001a      	movs	r2, r3
 8014096:	6a3b      	ldr	r3, [r7, #32]
 8014098:	189b      	adds	r3, r3, r2
 801409a:	623b      	str	r3, [r7, #32]
 801409c:	683b      	ldr	r3, [r7, #0]
 801409e:	781b      	ldrb	r3, [r3, #0]
 80140a0:	00da      	lsls	r2, r3, #3
 80140a2:	6a3b      	ldr	r3, [r7, #32]
 80140a4:	18d3      	adds	r3, r2, r3
 80140a6:	4a0e      	ldr	r2, [pc, #56]	@ (80140e0 <USB_EPStartXfer+0x3d4>)
 80140a8:	4694      	mov	ip, r2
 80140aa:	4463      	add	r3, ip
 80140ac:	61fb      	str	r3, [r7, #28]
 80140ae:	1d7b      	adds	r3, r7, #5
 80140b0:	33ff      	adds	r3, #255	@ 0xff
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	b29a      	uxth	r2, r3
 80140b6:	69fb      	ldr	r3, [r7, #28]
 80140b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80140ba:	2076      	movs	r0, #118	@ 0x76
 80140bc:	183b      	adds	r3, r7, r0
 80140be:	683a      	ldr	r2, [r7, #0]
 80140c0:	8912      	ldrh	r2, [r2, #8]
 80140c2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80140c4:	683b      	ldr	r3, [r7, #0]
 80140c6:	6959      	ldr	r1, [r3, #20]
 80140c8:	1d7b      	adds	r3, r7, #5
 80140ca:	33ff      	adds	r3, #255	@ 0xff
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	b29c      	uxth	r4, r3
 80140d0:	183b      	adds	r3, r7, r0
 80140d2:	881a      	ldrh	r2, [r3, #0]
 80140d4:	6878      	ldr	r0, [r7, #4]
 80140d6:	0023      	movs	r3, r4
 80140d8:	f001 f88a 	bl	80151f0 <USB_WritePMA>
 80140dc:	e329      	b.n	8014732 <USB_EPStartXfer+0xa26>
 80140de:	46c0      	nop			@ (mov r8, r8)
 80140e0:	00000402 	.word	0x00000402
 80140e4:	ffff8f8f 	.word	0xffff8f8f
 80140e8:	ffff8180 	.word	0xffff8180
 80140ec:	00000406 	.word	0x00000406
 80140f0:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80140f4:	683b      	ldr	r3, [r7, #0]
 80140f6:	785b      	ldrb	r3, [r3, #1]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d000      	beq.n	80140fe <USB_EPStartXfer+0x3f2>
 80140fc:	e070      	b.n	80141e0 <USB_EPStartXfer+0x4d4>
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	2250      	movs	r2, #80	@ 0x50
 8014106:	5a9b      	ldrh	r3, [r3, r2]
 8014108:	b29b      	uxth	r3, r3
 801410a:	001a      	movs	r2, r3
 801410c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801410e:	189b      	adds	r3, r3, r2
 8014110:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014112:	683b      	ldr	r3, [r7, #0]
 8014114:	781b      	ldrb	r3, [r3, #0]
 8014116:	00da      	lsls	r2, r3, #3
 8014118:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801411a:	18d3      	adds	r3, r2, r3
 801411c:	4acd      	ldr	r2, [pc, #820]	@ (8014454 <USB_EPStartXfer+0x748>)
 801411e:	4694      	mov	ip, r2
 8014120:	4463      	add	r3, ip
 8014122:	647b      	str	r3, [r7, #68]	@ 0x44
 8014124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014126:	881b      	ldrh	r3, [r3, #0]
 8014128:	b29b      	uxth	r3, r3
 801412a:	059b      	lsls	r3, r3, #22
 801412c:	0d9b      	lsrs	r3, r3, #22
 801412e:	b29a      	uxth	r2, r3
 8014130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014132:	801a      	strh	r2, [r3, #0]
 8014134:	1d7b      	adds	r3, r7, #5
 8014136:	33ff      	adds	r3, #255	@ 0xff
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	2b3e      	cmp	r3, #62	@ 0x3e
 801413c:	d922      	bls.n	8014184 <USB_EPStartXfer+0x478>
 801413e:	1d7b      	adds	r3, r7, #5
 8014140:	33ff      	adds	r3, #255	@ 0xff
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	095b      	lsrs	r3, r3, #5
 8014146:	21f8      	movs	r1, #248	@ 0xf8
 8014148:	187a      	adds	r2, r7, r1
 801414a:	6013      	str	r3, [r2, #0]
 801414c:	1d7b      	adds	r3, r7, #5
 801414e:	33ff      	adds	r3, #255	@ 0xff
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	221f      	movs	r2, #31
 8014154:	4013      	ands	r3, r2
 8014156:	d104      	bne.n	8014162 <USB_EPStartXfer+0x456>
 8014158:	187b      	adds	r3, r7, r1
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	3b01      	subs	r3, #1
 801415e:	187a      	adds	r2, r7, r1
 8014160:	6013      	str	r3, [r2, #0]
 8014162:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014164:	881b      	ldrh	r3, [r3, #0]
 8014166:	b29a      	uxth	r2, r3
 8014168:	23f8      	movs	r3, #248	@ 0xf8
 801416a:	18fb      	adds	r3, r7, r3
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	b29b      	uxth	r3, r3
 8014170:	029b      	lsls	r3, r3, #10
 8014172:	b29b      	uxth	r3, r3
 8014174:	4313      	orrs	r3, r2
 8014176:	b29b      	uxth	r3, r3
 8014178:	4ab7      	ldr	r2, [pc, #732]	@ (8014458 <USB_EPStartXfer+0x74c>)
 801417a:	4313      	orrs	r3, r2
 801417c:	b29a      	uxth	r2, r3
 801417e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014180:	801a      	strh	r2, [r3, #0]
 8014182:	e04a      	b.n	801421a <USB_EPStartXfer+0x50e>
 8014184:	1d7b      	adds	r3, r7, #5
 8014186:	33ff      	adds	r3, #255	@ 0xff
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d108      	bne.n	80141a0 <USB_EPStartXfer+0x494>
 801418e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014190:	881b      	ldrh	r3, [r3, #0]
 8014192:	b29b      	uxth	r3, r3
 8014194:	4ab0      	ldr	r2, [pc, #704]	@ (8014458 <USB_EPStartXfer+0x74c>)
 8014196:	4313      	orrs	r3, r2
 8014198:	b29a      	uxth	r2, r3
 801419a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801419c:	801a      	strh	r2, [r3, #0]
 801419e:	e03c      	b.n	801421a <USB_EPStartXfer+0x50e>
 80141a0:	1d7b      	adds	r3, r7, #5
 80141a2:	33ff      	adds	r3, #255	@ 0xff
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	085b      	lsrs	r3, r3, #1
 80141a8:	21f8      	movs	r1, #248	@ 0xf8
 80141aa:	187a      	adds	r2, r7, r1
 80141ac:	6013      	str	r3, [r2, #0]
 80141ae:	1d7b      	adds	r3, r7, #5
 80141b0:	33ff      	adds	r3, #255	@ 0xff
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	2201      	movs	r2, #1
 80141b6:	4013      	ands	r3, r2
 80141b8:	d004      	beq.n	80141c4 <USB_EPStartXfer+0x4b8>
 80141ba:	187b      	adds	r3, r7, r1
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	3301      	adds	r3, #1
 80141c0:	187a      	adds	r2, r7, r1
 80141c2:	6013      	str	r3, [r2, #0]
 80141c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80141c6:	881b      	ldrh	r3, [r3, #0]
 80141c8:	b29a      	uxth	r2, r3
 80141ca:	23f8      	movs	r3, #248	@ 0xf8
 80141cc:	18fb      	adds	r3, r7, r3
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	b29b      	uxth	r3, r3
 80141d2:	029b      	lsls	r3, r3, #10
 80141d4:	b29b      	uxth	r3, r3
 80141d6:	4313      	orrs	r3, r2
 80141d8:	b29a      	uxth	r2, r3
 80141da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80141dc:	801a      	strh	r2, [r3, #0]
 80141de:	e01c      	b.n	801421a <USB_EPStartXfer+0x50e>
 80141e0:	683b      	ldr	r3, [r7, #0]
 80141e2:	785b      	ldrb	r3, [r3, #1]
 80141e4:	2b01      	cmp	r3, #1
 80141e6:	d118      	bne.n	801421a <USB_EPStartXfer+0x50e>
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	2250      	movs	r2, #80	@ 0x50
 80141f0:	5a9b      	ldrh	r3, [r3, r2]
 80141f2:	b29b      	uxth	r3, r3
 80141f4:	001a      	movs	r2, r3
 80141f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80141f8:	189b      	adds	r3, r3, r2
 80141fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80141fc:	683b      	ldr	r3, [r7, #0]
 80141fe:	781b      	ldrb	r3, [r3, #0]
 8014200:	00da      	lsls	r2, r3, #3
 8014202:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014204:	18d3      	adds	r3, r2, r3
 8014206:	4a93      	ldr	r2, [pc, #588]	@ (8014454 <USB_EPStartXfer+0x748>)
 8014208:	4694      	mov	ip, r2
 801420a:	4463      	add	r3, ip
 801420c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801420e:	1d7b      	adds	r3, r7, #5
 8014210:	33ff      	adds	r3, #255	@ 0xff
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	b29a      	uxth	r2, r3
 8014216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014218:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801421a:	2076      	movs	r0, #118	@ 0x76
 801421c:	183b      	adds	r3, r7, r0
 801421e:	683a      	ldr	r2, [r7, #0]
 8014220:	8912      	ldrh	r2, [r2, #8]
 8014222:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014224:	683b      	ldr	r3, [r7, #0]
 8014226:	6959      	ldr	r1, [r3, #20]
 8014228:	1d7b      	adds	r3, r7, #5
 801422a:	33ff      	adds	r3, #255	@ 0xff
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	b29c      	uxth	r4, r3
 8014230:	183b      	adds	r3, r7, r0
 8014232:	881a      	ldrh	r2, [r3, #0]
 8014234:	6878      	ldr	r0, [r7, #4]
 8014236:	0023      	movs	r3, r4
 8014238:	f000 ffda 	bl	80151f0 <USB_WritePMA>
            ep->xfer_buff += len;
 801423c:	683b      	ldr	r3, [r7, #0]
 801423e:	695a      	ldr	r2, [r3, #20]
 8014240:	1d7b      	adds	r3, r7, #5
 8014242:	33ff      	adds	r3, #255	@ 0xff
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	18d2      	adds	r2, r2, r3
 8014248:	683b      	ldr	r3, [r7, #0]
 801424a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801424c:	683b      	ldr	r3, [r7, #0]
 801424e:	6a1a      	ldr	r2, [r3, #32]
 8014250:	683b      	ldr	r3, [r7, #0]
 8014252:	691b      	ldr	r3, [r3, #16]
 8014254:	429a      	cmp	r2, r3
 8014256:	d908      	bls.n	801426a <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8014258:	683b      	ldr	r3, [r7, #0]
 801425a:	6a1a      	ldr	r2, [r3, #32]
 801425c:	1d7b      	adds	r3, r7, #5
 801425e:	33ff      	adds	r3, #255	@ 0xff
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	1ad2      	subs	r2, r2, r3
 8014264:	683b      	ldr	r3, [r7, #0]
 8014266:	621a      	str	r2, [r3, #32]
 8014268:	e007      	b.n	801427a <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801426a:	683b      	ldr	r3, [r7, #0]
 801426c:	6a1b      	ldr	r3, [r3, #32]
 801426e:	1d7a      	adds	r2, r7, #5
 8014270:	32ff      	adds	r2, #255	@ 0xff
 8014272:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8014274:	683b      	ldr	r3, [r7, #0]
 8014276:	2200      	movs	r2, #0
 8014278:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	643b      	str	r3, [r7, #64]	@ 0x40
 801427e:	683b      	ldr	r3, [r7, #0]
 8014280:	785b      	ldrb	r3, [r3, #1]
 8014282:	2b00      	cmp	r3, #0
 8014284:	d000      	beq.n	8014288 <USB_EPStartXfer+0x57c>
 8014286:	e070      	b.n	801436a <USB_EPStartXfer+0x65e>
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	2250      	movs	r2, #80	@ 0x50
 8014290:	5a9b      	ldrh	r3, [r3, r2]
 8014292:	b29b      	uxth	r3, r3
 8014294:	001a      	movs	r2, r3
 8014296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014298:	189b      	adds	r3, r3, r2
 801429a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801429c:	683b      	ldr	r3, [r7, #0]
 801429e:	781b      	ldrb	r3, [r3, #0]
 80142a0:	00da      	lsls	r2, r3, #3
 80142a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80142a4:	18d3      	adds	r3, r2, r3
 80142a6:	4a6d      	ldr	r2, [pc, #436]	@ (801445c <USB_EPStartXfer+0x750>)
 80142a8:	4694      	mov	ip, r2
 80142aa:	4463      	add	r3, ip
 80142ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80142ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80142b0:	881b      	ldrh	r3, [r3, #0]
 80142b2:	b29b      	uxth	r3, r3
 80142b4:	059b      	lsls	r3, r3, #22
 80142b6:	0d9b      	lsrs	r3, r3, #22
 80142b8:	b29a      	uxth	r2, r3
 80142ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80142bc:	801a      	strh	r2, [r3, #0]
 80142be:	1d7b      	adds	r3, r7, #5
 80142c0:	33ff      	adds	r3, #255	@ 0xff
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80142c6:	d922      	bls.n	801430e <USB_EPStartXfer+0x602>
 80142c8:	1d7b      	adds	r3, r7, #5
 80142ca:	33ff      	adds	r3, #255	@ 0xff
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	095b      	lsrs	r3, r3, #5
 80142d0:	21f4      	movs	r1, #244	@ 0xf4
 80142d2:	187a      	adds	r2, r7, r1
 80142d4:	6013      	str	r3, [r2, #0]
 80142d6:	1d7b      	adds	r3, r7, #5
 80142d8:	33ff      	adds	r3, #255	@ 0xff
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	221f      	movs	r2, #31
 80142de:	4013      	ands	r3, r2
 80142e0:	d104      	bne.n	80142ec <USB_EPStartXfer+0x5e0>
 80142e2:	187b      	adds	r3, r7, r1
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	3b01      	subs	r3, #1
 80142e8:	187a      	adds	r2, r7, r1
 80142ea:	6013      	str	r3, [r2, #0]
 80142ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80142ee:	881b      	ldrh	r3, [r3, #0]
 80142f0:	b29a      	uxth	r2, r3
 80142f2:	23f4      	movs	r3, #244	@ 0xf4
 80142f4:	18fb      	adds	r3, r7, r3
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	b29b      	uxth	r3, r3
 80142fa:	029b      	lsls	r3, r3, #10
 80142fc:	b29b      	uxth	r3, r3
 80142fe:	4313      	orrs	r3, r2
 8014300:	b29b      	uxth	r3, r3
 8014302:	4a55      	ldr	r2, [pc, #340]	@ (8014458 <USB_EPStartXfer+0x74c>)
 8014304:	4313      	orrs	r3, r2
 8014306:	b29a      	uxth	r2, r3
 8014308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801430a:	801a      	strh	r2, [r3, #0]
 801430c:	e048      	b.n	80143a0 <USB_EPStartXfer+0x694>
 801430e:	1d7b      	adds	r3, r7, #5
 8014310:	33ff      	adds	r3, #255	@ 0xff
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d108      	bne.n	801432a <USB_EPStartXfer+0x61e>
 8014318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801431a:	881b      	ldrh	r3, [r3, #0]
 801431c:	b29b      	uxth	r3, r3
 801431e:	4a4e      	ldr	r2, [pc, #312]	@ (8014458 <USB_EPStartXfer+0x74c>)
 8014320:	4313      	orrs	r3, r2
 8014322:	b29a      	uxth	r2, r3
 8014324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014326:	801a      	strh	r2, [r3, #0]
 8014328:	e03a      	b.n	80143a0 <USB_EPStartXfer+0x694>
 801432a:	1d7b      	adds	r3, r7, #5
 801432c:	33ff      	adds	r3, #255	@ 0xff
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	085b      	lsrs	r3, r3, #1
 8014332:	21f4      	movs	r1, #244	@ 0xf4
 8014334:	187a      	adds	r2, r7, r1
 8014336:	6013      	str	r3, [r2, #0]
 8014338:	1d7b      	adds	r3, r7, #5
 801433a:	33ff      	adds	r3, #255	@ 0xff
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	2201      	movs	r2, #1
 8014340:	4013      	ands	r3, r2
 8014342:	d004      	beq.n	801434e <USB_EPStartXfer+0x642>
 8014344:	187b      	adds	r3, r7, r1
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	3301      	adds	r3, #1
 801434a:	187a      	adds	r2, r7, r1
 801434c:	6013      	str	r3, [r2, #0]
 801434e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014350:	881b      	ldrh	r3, [r3, #0]
 8014352:	b29a      	uxth	r2, r3
 8014354:	23f4      	movs	r3, #244	@ 0xf4
 8014356:	18fb      	adds	r3, r7, r3
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	b29b      	uxth	r3, r3
 801435c:	029b      	lsls	r3, r3, #10
 801435e:	b29b      	uxth	r3, r3
 8014360:	4313      	orrs	r3, r2
 8014362:	b29a      	uxth	r2, r3
 8014364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014366:	801a      	strh	r2, [r3, #0]
 8014368:	e01a      	b.n	80143a0 <USB_EPStartXfer+0x694>
 801436a:	683b      	ldr	r3, [r7, #0]
 801436c:	785b      	ldrb	r3, [r3, #1]
 801436e:	2b01      	cmp	r3, #1
 8014370:	d116      	bne.n	80143a0 <USB_EPStartXfer+0x694>
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	2250      	movs	r2, #80	@ 0x50
 8014376:	5a9b      	ldrh	r3, [r3, r2]
 8014378:	b29b      	uxth	r3, r3
 801437a:	001a      	movs	r2, r3
 801437c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801437e:	189b      	adds	r3, r3, r2
 8014380:	643b      	str	r3, [r7, #64]	@ 0x40
 8014382:	683b      	ldr	r3, [r7, #0]
 8014384:	781b      	ldrb	r3, [r3, #0]
 8014386:	00da      	lsls	r2, r3, #3
 8014388:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801438a:	18d3      	adds	r3, r2, r3
 801438c:	4a33      	ldr	r2, [pc, #204]	@ (801445c <USB_EPStartXfer+0x750>)
 801438e:	4694      	mov	ip, r2
 8014390:	4463      	add	r3, ip
 8014392:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014394:	1d7b      	adds	r3, r7, #5
 8014396:	33ff      	adds	r3, #255	@ 0xff
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	b29a      	uxth	r2, r3
 801439c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801439e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80143a0:	2076      	movs	r0, #118	@ 0x76
 80143a2:	183b      	adds	r3, r7, r0
 80143a4:	683a      	ldr	r2, [r7, #0]
 80143a6:	8952      	ldrh	r2, [r2, #10]
 80143a8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80143aa:	683b      	ldr	r3, [r7, #0]
 80143ac:	6959      	ldr	r1, [r3, #20]
 80143ae:	1d7b      	adds	r3, r7, #5
 80143b0:	33ff      	adds	r3, #255	@ 0xff
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	b29c      	uxth	r4, r3
 80143b6:	183b      	adds	r3, r7, r0
 80143b8:	881a      	ldrh	r2, [r3, #0]
 80143ba:	6878      	ldr	r0, [r7, #4]
 80143bc:	0023      	movs	r3, r4
 80143be:	f000 ff17 	bl	80151f0 <USB_WritePMA>
 80143c2:	e1b6      	b.n	8014732 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80143c4:	683b      	ldr	r3, [r7, #0]
 80143c6:	6a1b      	ldr	r3, [r3, #32]
 80143c8:	1d7a      	adds	r2, r7, #5
 80143ca:	32ff      	adds	r2, #255	@ 0xff
 80143cc:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80143ce:	687a      	ldr	r2, [r7, #4]
 80143d0:	683b      	ldr	r3, [r7, #0]
 80143d2:	781b      	ldrb	r3, [r3, #0]
 80143d4:	009b      	lsls	r3, r3, #2
 80143d6:	18d3      	adds	r3, r2, r3
 80143d8:	881b      	ldrh	r3, [r3, #0]
 80143da:	b29a      	uxth	r2, r3
 80143dc:	2062      	movs	r0, #98	@ 0x62
 80143de:	183b      	adds	r3, r7, r0
 80143e0:	491f      	ldr	r1, [pc, #124]	@ (8014460 <USB_EPStartXfer+0x754>)
 80143e2:	400a      	ands	r2, r1
 80143e4:	801a      	strh	r2, [r3, #0]
 80143e6:	687a      	ldr	r2, [r7, #4]
 80143e8:	683b      	ldr	r3, [r7, #0]
 80143ea:	781b      	ldrb	r3, [r3, #0]
 80143ec:	009b      	lsls	r3, r3, #2
 80143ee:	18d3      	adds	r3, r2, r3
 80143f0:	183a      	adds	r2, r7, r0
 80143f2:	8812      	ldrh	r2, [r2, #0]
 80143f4:	491b      	ldr	r1, [pc, #108]	@ (8014464 <USB_EPStartXfer+0x758>)
 80143f6:	430a      	orrs	r2, r1
 80143f8:	b292      	uxth	r2, r2
 80143fa:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	2250      	movs	r2, #80	@ 0x50
 8014404:	5a9b      	ldrh	r3, [r3, r2]
 8014406:	b29b      	uxth	r3, r3
 8014408:	001a      	movs	r2, r3
 801440a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801440c:	189b      	adds	r3, r3, r2
 801440e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014410:	683b      	ldr	r3, [r7, #0]
 8014412:	781b      	ldrb	r3, [r3, #0]
 8014414:	00da      	lsls	r2, r3, #3
 8014416:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014418:	18d3      	adds	r3, r2, r3
 801441a:	4a0e      	ldr	r2, [pc, #56]	@ (8014454 <USB_EPStartXfer+0x748>)
 801441c:	4694      	mov	ip, r2
 801441e:	4463      	add	r3, ip
 8014420:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014422:	1d7b      	adds	r3, r7, #5
 8014424:	33ff      	adds	r3, #255	@ 0xff
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	b29a      	uxth	r2, r3
 801442a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801442c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801442e:	2076      	movs	r0, #118	@ 0x76
 8014430:	183b      	adds	r3, r7, r0
 8014432:	683a      	ldr	r2, [r7, #0]
 8014434:	8912      	ldrh	r2, [r2, #8]
 8014436:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014438:	683b      	ldr	r3, [r7, #0]
 801443a:	6959      	ldr	r1, [r3, #20]
 801443c:	1d7b      	adds	r3, r7, #5
 801443e:	33ff      	adds	r3, #255	@ 0xff
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	b29c      	uxth	r4, r3
 8014444:	183b      	adds	r3, r7, r0
 8014446:	881a      	ldrh	r2, [r3, #0]
 8014448:	6878      	ldr	r0, [r7, #4]
 801444a:	0023      	movs	r3, r4
 801444c:	f000 fed0 	bl	80151f0 <USB_WritePMA>
 8014450:	e16f      	b.n	8014732 <USB_EPStartXfer+0xa26>
 8014452:	46c0      	nop			@ (mov r8, r8)
 8014454:	00000402 	.word	0x00000402
 8014458:	ffff8000 	.word	0xffff8000
 801445c:	00000406 	.word	0x00000406
 8014460:	ffff8e8f 	.word	0xffff8e8f
 8014464:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8014468:	683b      	ldr	r3, [r7, #0]
 801446a:	6a1a      	ldr	r2, [r3, #32]
 801446c:	1d7b      	adds	r3, r7, #5
 801446e:	33ff      	adds	r3, #255	@ 0xff
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	1ad2      	subs	r2, r2, r3
 8014474:	683b      	ldr	r3, [r7, #0]
 8014476:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8014478:	687a      	ldr	r2, [r7, #4]
 801447a:	683b      	ldr	r3, [r7, #0]
 801447c:	781b      	ldrb	r3, [r3, #0]
 801447e:	009b      	lsls	r3, r3, #2
 8014480:	18d3      	adds	r3, r2, r3
 8014482:	881b      	ldrh	r3, [r3, #0]
 8014484:	b29b      	uxth	r3, r3
 8014486:	001a      	movs	r2, r3
 8014488:	2340      	movs	r3, #64	@ 0x40
 801448a:	4013      	ands	r3, r2
 801448c:	d100      	bne.n	8014490 <USB_EPStartXfer+0x784>
 801448e:	e0a4      	b.n	80145da <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	673b      	str	r3, [r7, #112]	@ 0x70
 8014494:	683b      	ldr	r3, [r7, #0]
 8014496:	785b      	ldrb	r3, [r3, #1]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d000      	beq.n	801449e <USB_EPStartXfer+0x792>
 801449c:	e070      	b.n	8014580 <USB_EPStartXfer+0x874>
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	2250      	movs	r2, #80	@ 0x50
 80144a6:	5a9b      	ldrh	r3, [r3, r2]
 80144a8:	b29b      	uxth	r3, r3
 80144aa:	001a      	movs	r2, r3
 80144ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80144ae:	189b      	adds	r3, r3, r2
 80144b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80144b2:	683b      	ldr	r3, [r7, #0]
 80144b4:	781b      	ldrb	r3, [r3, #0]
 80144b6:	00da      	lsls	r2, r3, #3
 80144b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80144ba:	18d3      	adds	r3, r2, r3
 80144bc:	4abc      	ldr	r2, [pc, #752]	@ (80147b0 <USB_EPStartXfer+0xaa4>)
 80144be:	4694      	mov	ip, r2
 80144c0:	4463      	add	r3, ip
 80144c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80144c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80144c6:	881b      	ldrh	r3, [r3, #0]
 80144c8:	b29b      	uxth	r3, r3
 80144ca:	059b      	lsls	r3, r3, #22
 80144cc:	0d9b      	lsrs	r3, r3, #22
 80144ce:	b29a      	uxth	r2, r3
 80144d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80144d2:	801a      	strh	r2, [r3, #0]
 80144d4:	1d7b      	adds	r3, r7, #5
 80144d6:	33ff      	adds	r3, #255	@ 0xff
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	2b3e      	cmp	r3, #62	@ 0x3e
 80144dc:	d922      	bls.n	8014524 <USB_EPStartXfer+0x818>
 80144de:	1d7b      	adds	r3, r7, #5
 80144e0:	33ff      	adds	r3, #255	@ 0xff
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	095b      	lsrs	r3, r3, #5
 80144e6:	21f0      	movs	r1, #240	@ 0xf0
 80144e8:	187a      	adds	r2, r7, r1
 80144ea:	6013      	str	r3, [r2, #0]
 80144ec:	1d7b      	adds	r3, r7, #5
 80144ee:	33ff      	adds	r3, #255	@ 0xff
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	221f      	movs	r2, #31
 80144f4:	4013      	ands	r3, r2
 80144f6:	d104      	bne.n	8014502 <USB_EPStartXfer+0x7f6>
 80144f8:	187b      	adds	r3, r7, r1
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	3b01      	subs	r3, #1
 80144fe:	187a      	adds	r2, r7, r1
 8014500:	6013      	str	r3, [r2, #0]
 8014502:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014504:	881b      	ldrh	r3, [r3, #0]
 8014506:	b29a      	uxth	r2, r3
 8014508:	23f0      	movs	r3, #240	@ 0xf0
 801450a:	18fb      	adds	r3, r7, r3
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	b29b      	uxth	r3, r3
 8014510:	029b      	lsls	r3, r3, #10
 8014512:	b29b      	uxth	r3, r3
 8014514:	4313      	orrs	r3, r2
 8014516:	b29b      	uxth	r3, r3
 8014518:	4aa6      	ldr	r2, [pc, #664]	@ (80147b4 <USB_EPStartXfer+0xaa8>)
 801451a:	4313      	orrs	r3, r2
 801451c:	b29a      	uxth	r2, r3
 801451e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014520:	801a      	strh	r2, [r3, #0]
 8014522:	e048      	b.n	80145b6 <USB_EPStartXfer+0x8aa>
 8014524:	1d7b      	adds	r3, r7, #5
 8014526:	33ff      	adds	r3, #255	@ 0xff
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d108      	bne.n	8014540 <USB_EPStartXfer+0x834>
 801452e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014530:	881b      	ldrh	r3, [r3, #0]
 8014532:	b29b      	uxth	r3, r3
 8014534:	4a9f      	ldr	r2, [pc, #636]	@ (80147b4 <USB_EPStartXfer+0xaa8>)
 8014536:	4313      	orrs	r3, r2
 8014538:	b29a      	uxth	r2, r3
 801453a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801453c:	801a      	strh	r2, [r3, #0]
 801453e:	e03a      	b.n	80145b6 <USB_EPStartXfer+0x8aa>
 8014540:	1d7b      	adds	r3, r7, #5
 8014542:	33ff      	adds	r3, #255	@ 0xff
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	085b      	lsrs	r3, r3, #1
 8014548:	21f0      	movs	r1, #240	@ 0xf0
 801454a:	187a      	adds	r2, r7, r1
 801454c:	6013      	str	r3, [r2, #0]
 801454e:	1d7b      	adds	r3, r7, #5
 8014550:	33ff      	adds	r3, #255	@ 0xff
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	2201      	movs	r2, #1
 8014556:	4013      	ands	r3, r2
 8014558:	d004      	beq.n	8014564 <USB_EPStartXfer+0x858>
 801455a:	187b      	adds	r3, r7, r1
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	3301      	adds	r3, #1
 8014560:	187a      	adds	r2, r7, r1
 8014562:	6013      	str	r3, [r2, #0]
 8014564:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014566:	881b      	ldrh	r3, [r3, #0]
 8014568:	b29a      	uxth	r2, r3
 801456a:	23f0      	movs	r3, #240	@ 0xf0
 801456c:	18fb      	adds	r3, r7, r3
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	b29b      	uxth	r3, r3
 8014572:	029b      	lsls	r3, r3, #10
 8014574:	b29b      	uxth	r3, r3
 8014576:	4313      	orrs	r3, r2
 8014578:	b29a      	uxth	r2, r3
 801457a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801457c:	801a      	strh	r2, [r3, #0]
 801457e:	e01a      	b.n	80145b6 <USB_EPStartXfer+0x8aa>
 8014580:	683b      	ldr	r3, [r7, #0]
 8014582:	785b      	ldrb	r3, [r3, #1]
 8014584:	2b01      	cmp	r3, #1
 8014586:	d116      	bne.n	80145b6 <USB_EPStartXfer+0x8aa>
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	2250      	movs	r2, #80	@ 0x50
 801458c:	5a9b      	ldrh	r3, [r3, r2]
 801458e:	b29b      	uxth	r3, r3
 8014590:	001a      	movs	r2, r3
 8014592:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014594:	189b      	adds	r3, r3, r2
 8014596:	673b      	str	r3, [r7, #112]	@ 0x70
 8014598:	683b      	ldr	r3, [r7, #0]
 801459a:	781b      	ldrb	r3, [r3, #0]
 801459c:	00da      	lsls	r2, r3, #3
 801459e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80145a0:	18d3      	adds	r3, r2, r3
 80145a2:	4a83      	ldr	r2, [pc, #524]	@ (80147b0 <USB_EPStartXfer+0xaa4>)
 80145a4:	4694      	mov	ip, r2
 80145a6:	4463      	add	r3, ip
 80145a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80145aa:	1d7b      	adds	r3, r7, #5
 80145ac:	33ff      	adds	r3, #255	@ 0xff
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	b29a      	uxth	r2, r3
 80145b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80145b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80145b6:	2076      	movs	r0, #118	@ 0x76
 80145b8:	183b      	adds	r3, r7, r0
 80145ba:	683a      	ldr	r2, [r7, #0]
 80145bc:	8952      	ldrh	r2, [r2, #10]
 80145be:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80145c0:	683b      	ldr	r3, [r7, #0]
 80145c2:	6959      	ldr	r1, [r3, #20]
 80145c4:	1d7b      	adds	r3, r7, #5
 80145c6:	33ff      	adds	r3, #255	@ 0xff
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	b29c      	uxth	r4, r3
 80145cc:	183b      	adds	r3, r7, r0
 80145ce:	881a      	ldrh	r2, [r3, #0]
 80145d0:	6878      	ldr	r0, [r7, #4]
 80145d2:	0023      	movs	r3, r4
 80145d4:	f000 fe0c 	bl	80151f0 <USB_WritePMA>
 80145d8:	e0ab      	b.n	8014732 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80145da:	683b      	ldr	r3, [r7, #0]
 80145dc:	785b      	ldrb	r3, [r3, #1]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d000      	beq.n	80145e4 <USB_EPStartXfer+0x8d8>
 80145e2:	e070      	b.n	80146c6 <USB_EPStartXfer+0x9ba>
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	2250      	movs	r2, #80	@ 0x50
 80145ec:	5a9b      	ldrh	r3, [r3, r2]
 80145ee:	b29b      	uxth	r3, r3
 80145f0:	001a      	movs	r2, r3
 80145f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80145f4:	189b      	adds	r3, r3, r2
 80145f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80145f8:	683b      	ldr	r3, [r7, #0]
 80145fa:	781b      	ldrb	r3, [r3, #0]
 80145fc:	00da      	lsls	r2, r3, #3
 80145fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014600:	18d3      	adds	r3, r2, r3
 8014602:	4a6d      	ldr	r2, [pc, #436]	@ (80147b8 <USB_EPStartXfer+0xaac>)
 8014604:	4694      	mov	ip, r2
 8014606:	4463      	add	r3, ip
 8014608:	67bb      	str	r3, [r7, #120]	@ 0x78
 801460a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801460c:	881b      	ldrh	r3, [r3, #0]
 801460e:	b29b      	uxth	r3, r3
 8014610:	059b      	lsls	r3, r3, #22
 8014612:	0d9b      	lsrs	r3, r3, #22
 8014614:	b29a      	uxth	r2, r3
 8014616:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014618:	801a      	strh	r2, [r3, #0]
 801461a:	1d7b      	adds	r3, r7, #5
 801461c:	33ff      	adds	r3, #255	@ 0xff
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	2b3e      	cmp	r3, #62	@ 0x3e
 8014622:	d922      	bls.n	801466a <USB_EPStartXfer+0x95e>
 8014624:	1d7b      	adds	r3, r7, #5
 8014626:	33ff      	adds	r3, #255	@ 0xff
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	095b      	lsrs	r3, r3, #5
 801462c:	21ec      	movs	r1, #236	@ 0xec
 801462e:	187a      	adds	r2, r7, r1
 8014630:	6013      	str	r3, [r2, #0]
 8014632:	1d7b      	adds	r3, r7, #5
 8014634:	33ff      	adds	r3, #255	@ 0xff
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	221f      	movs	r2, #31
 801463a:	4013      	ands	r3, r2
 801463c:	d104      	bne.n	8014648 <USB_EPStartXfer+0x93c>
 801463e:	187b      	adds	r3, r7, r1
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	3b01      	subs	r3, #1
 8014644:	187a      	adds	r2, r7, r1
 8014646:	6013      	str	r3, [r2, #0]
 8014648:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801464a:	881b      	ldrh	r3, [r3, #0]
 801464c:	b29a      	uxth	r2, r3
 801464e:	23ec      	movs	r3, #236	@ 0xec
 8014650:	18fb      	adds	r3, r7, r3
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	b29b      	uxth	r3, r3
 8014656:	029b      	lsls	r3, r3, #10
 8014658:	b29b      	uxth	r3, r3
 801465a:	4313      	orrs	r3, r2
 801465c:	b29b      	uxth	r3, r3
 801465e:	4a55      	ldr	r2, [pc, #340]	@ (80147b4 <USB_EPStartXfer+0xaa8>)
 8014660:	4313      	orrs	r3, r2
 8014662:	b29a      	uxth	r2, r3
 8014664:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014666:	801a      	strh	r2, [r3, #0]
 8014668:	e052      	b.n	8014710 <USB_EPStartXfer+0xa04>
 801466a:	1d7b      	adds	r3, r7, #5
 801466c:	33ff      	adds	r3, #255	@ 0xff
 801466e:	681b      	ldr	r3, [r3, #0]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d108      	bne.n	8014686 <USB_EPStartXfer+0x97a>
 8014674:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014676:	881b      	ldrh	r3, [r3, #0]
 8014678:	b29b      	uxth	r3, r3
 801467a:	4a4e      	ldr	r2, [pc, #312]	@ (80147b4 <USB_EPStartXfer+0xaa8>)
 801467c:	4313      	orrs	r3, r2
 801467e:	b29a      	uxth	r2, r3
 8014680:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014682:	801a      	strh	r2, [r3, #0]
 8014684:	e044      	b.n	8014710 <USB_EPStartXfer+0xa04>
 8014686:	1d7b      	adds	r3, r7, #5
 8014688:	33ff      	adds	r3, #255	@ 0xff
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	085b      	lsrs	r3, r3, #1
 801468e:	21ec      	movs	r1, #236	@ 0xec
 8014690:	187a      	adds	r2, r7, r1
 8014692:	6013      	str	r3, [r2, #0]
 8014694:	1d7b      	adds	r3, r7, #5
 8014696:	33ff      	adds	r3, #255	@ 0xff
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	2201      	movs	r2, #1
 801469c:	4013      	ands	r3, r2
 801469e:	d004      	beq.n	80146aa <USB_EPStartXfer+0x99e>
 80146a0:	187b      	adds	r3, r7, r1
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	3301      	adds	r3, #1
 80146a6:	187a      	adds	r2, r7, r1
 80146a8:	6013      	str	r3, [r2, #0]
 80146aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80146ac:	881b      	ldrh	r3, [r3, #0]
 80146ae:	b29a      	uxth	r2, r3
 80146b0:	23ec      	movs	r3, #236	@ 0xec
 80146b2:	18fb      	adds	r3, r7, r3
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	b29b      	uxth	r3, r3
 80146b8:	029b      	lsls	r3, r3, #10
 80146ba:	b29b      	uxth	r3, r3
 80146bc:	4313      	orrs	r3, r2
 80146be:	b29a      	uxth	r2, r3
 80146c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80146c2:	801a      	strh	r2, [r3, #0]
 80146c4:	e024      	b.n	8014710 <USB_EPStartXfer+0xa04>
 80146c6:	683b      	ldr	r3, [r7, #0]
 80146c8:	785b      	ldrb	r3, [r3, #1]
 80146ca:	2b01      	cmp	r3, #1
 80146cc:	d120      	bne.n	8014710 <USB_EPStartXfer+0xa04>
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	2184      	movs	r1, #132	@ 0x84
 80146d2:	187a      	adds	r2, r7, r1
 80146d4:	6013      	str	r3, [r2, #0]
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	2250      	movs	r2, #80	@ 0x50
 80146da:	5a9b      	ldrh	r3, [r3, r2]
 80146dc:	b29b      	uxth	r3, r3
 80146de:	001a      	movs	r2, r3
 80146e0:	187b      	adds	r3, r7, r1
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	189b      	adds	r3, r3, r2
 80146e6:	187a      	adds	r2, r7, r1
 80146e8:	6013      	str	r3, [r2, #0]
 80146ea:	683b      	ldr	r3, [r7, #0]
 80146ec:	781b      	ldrb	r3, [r3, #0]
 80146ee:	00da      	lsls	r2, r3, #3
 80146f0:	187b      	adds	r3, r7, r1
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	18d3      	adds	r3, r2, r3
 80146f6:	4a30      	ldr	r2, [pc, #192]	@ (80147b8 <USB_EPStartXfer+0xaac>)
 80146f8:	4694      	mov	ip, r2
 80146fa:	4463      	add	r3, ip
 80146fc:	2180      	movs	r1, #128	@ 0x80
 80146fe:	187a      	adds	r2, r7, r1
 8014700:	6013      	str	r3, [r2, #0]
 8014702:	1d7b      	adds	r3, r7, #5
 8014704:	33ff      	adds	r3, #255	@ 0xff
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	b29a      	uxth	r2, r3
 801470a:	187b      	adds	r3, r7, r1
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8014710:	2076      	movs	r0, #118	@ 0x76
 8014712:	183b      	adds	r3, r7, r0
 8014714:	683a      	ldr	r2, [r7, #0]
 8014716:	8912      	ldrh	r2, [r2, #8]
 8014718:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801471a:	683b      	ldr	r3, [r7, #0]
 801471c:	6959      	ldr	r1, [r3, #20]
 801471e:	1d7b      	adds	r3, r7, #5
 8014720:	33ff      	adds	r3, #255	@ 0xff
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	b29c      	uxth	r4, r3
 8014726:	183b      	adds	r3, r7, r0
 8014728:	881a      	ldrh	r2, [r3, #0]
 801472a:	6878      	ldr	r0, [r7, #4]
 801472c:	0023      	movs	r3, r4
 801472e:	f000 fd5f 	bl	80151f0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8014732:	687a      	ldr	r2, [r7, #4]
 8014734:	683b      	ldr	r3, [r7, #0]
 8014736:	781b      	ldrb	r3, [r3, #0]
 8014738:	009b      	lsls	r3, r3, #2
 801473a:	18d3      	adds	r3, r2, r3
 801473c:	881b      	ldrh	r3, [r3, #0]
 801473e:	b29a      	uxth	r2, r3
 8014740:	200a      	movs	r0, #10
 8014742:	183b      	adds	r3, r7, r0
 8014744:	491d      	ldr	r1, [pc, #116]	@ (80147bc <USB_EPStartXfer+0xab0>)
 8014746:	400a      	ands	r2, r1
 8014748:	801a      	strh	r2, [r3, #0]
 801474a:	183b      	adds	r3, r7, r0
 801474c:	183a      	adds	r2, r7, r0
 801474e:	8812      	ldrh	r2, [r2, #0]
 8014750:	2110      	movs	r1, #16
 8014752:	404a      	eors	r2, r1
 8014754:	801a      	strh	r2, [r3, #0]
 8014756:	183b      	adds	r3, r7, r0
 8014758:	183a      	adds	r2, r7, r0
 801475a:	8812      	ldrh	r2, [r2, #0]
 801475c:	2120      	movs	r1, #32
 801475e:	404a      	eors	r2, r1
 8014760:	801a      	strh	r2, [r3, #0]
 8014762:	687a      	ldr	r2, [r7, #4]
 8014764:	683b      	ldr	r3, [r7, #0]
 8014766:	781b      	ldrb	r3, [r3, #0]
 8014768:	009b      	lsls	r3, r3, #2
 801476a:	18d3      	adds	r3, r2, r3
 801476c:	183a      	adds	r2, r7, r0
 801476e:	8812      	ldrh	r2, [r2, #0]
 8014770:	4913      	ldr	r1, [pc, #76]	@ (80147c0 <USB_EPStartXfer+0xab4>)
 8014772:	430a      	orrs	r2, r1
 8014774:	b292      	uxth	r2, r2
 8014776:	801a      	strh	r2, [r3, #0]
 8014778:	f000 fbf4 	bl	8014f64 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801477c:	683b      	ldr	r3, [r7, #0]
 801477e:	7b1b      	ldrb	r3, [r3, #12]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d000      	beq.n	8014786 <USB_EPStartXfer+0xa7a>
 8014784:	e0a9      	b.n	80148da <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8014786:	683b      	ldr	r3, [r7, #0]
 8014788:	699a      	ldr	r2, [r3, #24]
 801478a:	683b      	ldr	r3, [r7, #0]
 801478c:	691b      	ldr	r3, [r3, #16]
 801478e:	429a      	cmp	r2, r3
 8014790:	d918      	bls.n	80147c4 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8014792:	683b      	ldr	r3, [r7, #0]
 8014794:	691b      	ldr	r3, [r3, #16]
 8014796:	1d7a      	adds	r2, r7, #5
 8014798:	32ff      	adds	r2, #255	@ 0xff
 801479a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 801479c:	683b      	ldr	r3, [r7, #0]
 801479e:	699a      	ldr	r2, [r3, #24]
 80147a0:	1d7b      	adds	r3, r7, #5
 80147a2:	33ff      	adds	r3, #255	@ 0xff
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	1ad2      	subs	r2, r2, r3
 80147a8:	683b      	ldr	r3, [r7, #0]
 80147aa:	619a      	str	r2, [r3, #24]
 80147ac:	e012      	b.n	80147d4 <USB_EPStartXfer+0xac8>
 80147ae:	46c0      	nop			@ (mov r8, r8)
 80147b0:	00000406 	.word	0x00000406
 80147b4:	ffff8000 	.word	0xffff8000
 80147b8:	00000402 	.word	0x00000402
 80147bc:	ffff8fbf 	.word	0xffff8fbf
 80147c0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 80147c4:	683b      	ldr	r3, [r7, #0]
 80147c6:	699b      	ldr	r3, [r3, #24]
 80147c8:	1d7a      	adds	r2, r7, #5
 80147ca:	32ff      	adds	r2, #255	@ 0xff
 80147cc:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80147ce:	683b      	ldr	r3, [r7, #0]
 80147d0:	2200      	movs	r2, #0
 80147d2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	2190      	movs	r1, #144	@ 0x90
 80147d8:	187a      	adds	r2, r7, r1
 80147da:	6013      	str	r3, [r2, #0]
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	2250      	movs	r2, #80	@ 0x50
 80147e0:	5a9b      	ldrh	r3, [r3, r2]
 80147e2:	b29b      	uxth	r3, r3
 80147e4:	001a      	movs	r2, r3
 80147e6:	187b      	adds	r3, r7, r1
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	189b      	adds	r3, r3, r2
 80147ec:	187a      	adds	r2, r7, r1
 80147ee:	6013      	str	r3, [r2, #0]
 80147f0:	683b      	ldr	r3, [r7, #0]
 80147f2:	781b      	ldrb	r3, [r3, #0]
 80147f4:	00da      	lsls	r2, r3, #3
 80147f6:	187b      	adds	r3, r7, r1
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	18d3      	adds	r3, r2, r3
 80147fc:	4acf      	ldr	r2, [pc, #828]	@ (8014b3c <USB_EPStartXfer+0xe30>)
 80147fe:	4694      	mov	ip, r2
 8014800:	4463      	add	r3, ip
 8014802:	218c      	movs	r1, #140	@ 0x8c
 8014804:	187a      	adds	r2, r7, r1
 8014806:	6013      	str	r3, [r2, #0]
 8014808:	187b      	adds	r3, r7, r1
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	881b      	ldrh	r3, [r3, #0]
 801480e:	b29b      	uxth	r3, r3
 8014810:	059b      	lsls	r3, r3, #22
 8014812:	0d9b      	lsrs	r3, r3, #22
 8014814:	b29a      	uxth	r2, r3
 8014816:	187b      	adds	r3, r7, r1
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	801a      	strh	r2, [r3, #0]
 801481c:	1d7b      	adds	r3, r7, #5
 801481e:	33ff      	adds	r3, #255	@ 0xff
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	2b3e      	cmp	r3, #62	@ 0x3e
 8014824:	d925      	bls.n	8014872 <USB_EPStartXfer+0xb66>
 8014826:	1d7b      	adds	r3, r7, #5
 8014828:	33ff      	adds	r3, #255	@ 0xff
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	095b      	lsrs	r3, r3, #5
 801482e:	21e8      	movs	r1, #232	@ 0xe8
 8014830:	187a      	adds	r2, r7, r1
 8014832:	6013      	str	r3, [r2, #0]
 8014834:	1d7b      	adds	r3, r7, #5
 8014836:	33ff      	adds	r3, #255	@ 0xff
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	221f      	movs	r2, #31
 801483c:	4013      	ands	r3, r2
 801483e:	d104      	bne.n	801484a <USB_EPStartXfer+0xb3e>
 8014840:	187b      	adds	r3, r7, r1
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	3b01      	subs	r3, #1
 8014846:	187a      	adds	r2, r7, r1
 8014848:	6013      	str	r3, [r2, #0]
 801484a:	218c      	movs	r1, #140	@ 0x8c
 801484c:	187b      	adds	r3, r7, r1
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	881b      	ldrh	r3, [r3, #0]
 8014852:	b29a      	uxth	r2, r3
 8014854:	23e8      	movs	r3, #232	@ 0xe8
 8014856:	18fb      	adds	r3, r7, r3
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	b29b      	uxth	r3, r3
 801485c:	029b      	lsls	r3, r3, #10
 801485e:	b29b      	uxth	r3, r3
 8014860:	4313      	orrs	r3, r2
 8014862:	b29b      	uxth	r3, r3
 8014864:	4ab6      	ldr	r2, [pc, #728]	@ (8014b40 <USB_EPStartXfer+0xe34>)
 8014866:	4313      	orrs	r3, r2
 8014868:	b29a      	uxth	r2, r3
 801486a:	187b      	adds	r3, r7, r1
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	801a      	strh	r2, [r3, #0]
 8014870:	e353      	b.n	8014f1a <USB_EPStartXfer+0x120e>
 8014872:	1d7b      	adds	r3, r7, #5
 8014874:	33ff      	adds	r3, #255	@ 0xff
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d10b      	bne.n	8014894 <USB_EPStartXfer+0xb88>
 801487c:	218c      	movs	r1, #140	@ 0x8c
 801487e:	187b      	adds	r3, r7, r1
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	881b      	ldrh	r3, [r3, #0]
 8014884:	b29b      	uxth	r3, r3
 8014886:	4aae      	ldr	r2, [pc, #696]	@ (8014b40 <USB_EPStartXfer+0xe34>)
 8014888:	4313      	orrs	r3, r2
 801488a:	b29a      	uxth	r2, r3
 801488c:	187b      	adds	r3, r7, r1
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	801a      	strh	r2, [r3, #0]
 8014892:	e342      	b.n	8014f1a <USB_EPStartXfer+0x120e>
 8014894:	1d7b      	adds	r3, r7, #5
 8014896:	33ff      	adds	r3, #255	@ 0xff
 8014898:	681b      	ldr	r3, [r3, #0]
 801489a:	085b      	lsrs	r3, r3, #1
 801489c:	21e8      	movs	r1, #232	@ 0xe8
 801489e:	187a      	adds	r2, r7, r1
 80148a0:	6013      	str	r3, [r2, #0]
 80148a2:	1d7b      	adds	r3, r7, #5
 80148a4:	33ff      	adds	r3, #255	@ 0xff
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	2201      	movs	r2, #1
 80148aa:	4013      	ands	r3, r2
 80148ac:	d004      	beq.n	80148b8 <USB_EPStartXfer+0xbac>
 80148ae:	187b      	adds	r3, r7, r1
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	3301      	adds	r3, #1
 80148b4:	187a      	adds	r2, r7, r1
 80148b6:	6013      	str	r3, [r2, #0]
 80148b8:	218c      	movs	r1, #140	@ 0x8c
 80148ba:	187b      	adds	r3, r7, r1
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	881b      	ldrh	r3, [r3, #0]
 80148c0:	b29a      	uxth	r2, r3
 80148c2:	23e8      	movs	r3, #232	@ 0xe8
 80148c4:	18fb      	adds	r3, r7, r3
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	b29b      	uxth	r3, r3
 80148ca:	029b      	lsls	r3, r3, #10
 80148cc:	b29b      	uxth	r3, r3
 80148ce:	4313      	orrs	r3, r2
 80148d0:	b29a      	uxth	r2, r3
 80148d2:	187b      	adds	r3, r7, r1
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	801a      	strh	r2, [r3, #0]
 80148d8:	e31f      	b.n	8014f1a <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80148da:	683b      	ldr	r3, [r7, #0]
 80148dc:	78db      	ldrb	r3, [r3, #3]
 80148de:	2b02      	cmp	r3, #2
 80148e0:	d000      	beq.n	80148e4 <USB_EPStartXfer+0xbd8>
 80148e2:	e191      	b.n	8014c08 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80148e4:	683b      	ldr	r3, [r7, #0]
 80148e6:	785b      	ldrb	r3, [r3, #1]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d000      	beq.n	80148ee <USB_EPStartXfer+0xbe2>
 80148ec:	e07c      	b.n	80149e8 <USB_EPStartXfer+0xcdc>
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	21ac      	movs	r1, #172	@ 0xac
 80148f2:	187a      	adds	r2, r7, r1
 80148f4:	6013      	str	r3, [r2, #0]
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	2250      	movs	r2, #80	@ 0x50
 80148fa:	5a9b      	ldrh	r3, [r3, r2]
 80148fc:	b29b      	uxth	r3, r3
 80148fe:	001a      	movs	r2, r3
 8014900:	187b      	adds	r3, r7, r1
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	189b      	adds	r3, r3, r2
 8014906:	187a      	adds	r2, r7, r1
 8014908:	6013      	str	r3, [r2, #0]
 801490a:	683b      	ldr	r3, [r7, #0]
 801490c:	781b      	ldrb	r3, [r3, #0]
 801490e:	00da      	lsls	r2, r3, #3
 8014910:	187b      	adds	r3, r7, r1
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	18d3      	adds	r3, r2, r3
 8014916:	4a8b      	ldr	r2, [pc, #556]	@ (8014b44 <USB_EPStartXfer+0xe38>)
 8014918:	4694      	mov	ip, r2
 801491a:	4463      	add	r3, ip
 801491c:	21a8      	movs	r1, #168	@ 0xa8
 801491e:	187a      	adds	r2, r7, r1
 8014920:	6013      	str	r3, [r2, #0]
 8014922:	187b      	adds	r3, r7, r1
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	881b      	ldrh	r3, [r3, #0]
 8014928:	b29b      	uxth	r3, r3
 801492a:	059b      	lsls	r3, r3, #22
 801492c:	0d9b      	lsrs	r3, r3, #22
 801492e:	b29a      	uxth	r2, r3
 8014930:	187b      	adds	r3, r7, r1
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	801a      	strh	r2, [r3, #0]
 8014936:	683b      	ldr	r3, [r7, #0]
 8014938:	691b      	ldr	r3, [r3, #16]
 801493a:	2b3e      	cmp	r3, #62	@ 0x3e
 801493c:	d923      	bls.n	8014986 <USB_EPStartXfer+0xc7a>
 801493e:	683b      	ldr	r3, [r7, #0]
 8014940:	691b      	ldr	r3, [r3, #16]
 8014942:	095b      	lsrs	r3, r3, #5
 8014944:	21e4      	movs	r1, #228	@ 0xe4
 8014946:	187a      	adds	r2, r7, r1
 8014948:	6013      	str	r3, [r2, #0]
 801494a:	683b      	ldr	r3, [r7, #0]
 801494c:	691b      	ldr	r3, [r3, #16]
 801494e:	221f      	movs	r2, #31
 8014950:	4013      	ands	r3, r2
 8014952:	d104      	bne.n	801495e <USB_EPStartXfer+0xc52>
 8014954:	187b      	adds	r3, r7, r1
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	3b01      	subs	r3, #1
 801495a:	187a      	adds	r2, r7, r1
 801495c:	6013      	str	r3, [r2, #0]
 801495e:	21a8      	movs	r1, #168	@ 0xa8
 8014960:	187b      	adds	r3, r7, r1
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	881b      	ldrh	r3, [r3, #0]
 8014966:	b29a      	uxth	r2, r3
 8014968:	23e4      	movs	r3, #228	@ 0xe4
 801496a:	18fb      	adds	r3, r7, r3
 801496c:	681b      	ldr	r3, [r3, #0]
 801496e:	b29b      	uxth	r3, r3
 8014970:	029b      	lsls	r3, r3, #10
 8014972:	b29b      	uxth	r3, r3
 8014974:	4313      	orrs	r3, r2
 8014976:	b29b      	uxth	r3, r3
 8014978:	4a71      	ldr	r2, [pc, #452]	@ (8014b40 <USB_EPStartXfer+0xe34>)
 801497a:	4313      	orrs	r3, r2
 801497c:	b29a      	uxth	r2, r3
 801497e:	187b      	adds	r3, r7, r1
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	801a      	strh	r2, [r3, #0]
 8014984:	e054      	b.n	8014a30 <USB_EPStartXfer+0xd24>
 8014986:	683b      	ldr	r3, [r7, #0]
 8014988:	691b      	ldr	r3, [r3, #16]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d10b      	bne.n	80149a6 <USB_EPStartXfer+0xc9a>
 801498e:	21a8      	movs	r1, #168	@ 0xa8
 8014990:	187b      	adds	r3, r7, r1
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	881b      	ldrh	r3, [r3, #0]
 8014996:	b29b      	uxth	r3, r3
 8014998:	4a69      	ldr	r2, [pc, #420]	@ (8014b40 <USB_EPStartXfer+0xe34>)
 801499a:	4313      	orrs	r3, r2
 801499c:	b29a      	uxth	r2, r3
 801499e:	187b      	adds	r3, r7, r1
 80149a0:	681b      	ldr	r3, [r3, #0]
 80149a2:	801a      	strh	r2, [r3, #0]
 80149a4:	e044      	b.n	8014a30 <USB_EPStartXfer+0xd24>
 80149a6:	683b      	ldr	r3, [r7, #0]
 80149a8:	691b      	ldr	r3, [r3, #16]
 80149aa:	085b      	lsrs	r3, r3, #1
 80149ac:	21e4      	movs	r1, #228	@ 0xe4
 80149ae:	187a      	adds	r2, r7, r1
 80149b0:	6013      	str	r3, [r2, #0]
 80149b2:	683b      	ldr	r3, [r7, #0]
 80149b4:	691b      	ldr	r3, [r3, #16]
 80149b6:	2201      	movs	r2, #1
 80149b8:	4013      	ands	r3, r2
 80149ba:	d004      	beq.n	80149c6 <USB_EPStartXfer+0xcba>
 80149bc:	187b      	adds	r3, r7, r1
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	3301      	adds	r3, #1
 80149c2:	187a      	adds	r2, r7, r1
 80149c4:	6013      	str	r3, [r2, #0]
 80149c6:	21a8      	movs	r1, #168	@ 0xa8
 80149c8:	187b      	adds	r3, r7, r1
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	881b      	ldrh	r3, [r3, #0]
 80149ce:	b29a      	uxth	r2, r3
 80149d0:	23e4      	movs	r3, #228	@ 0xe4
 80149d2:	18fb      	adds	r3, r7, r3
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	b29b      	uxth	r3, r3
 80149d8:	029b      	lsls	r3, r3, #10
 80149da:	b29b      	uxth	r3, r3
 80149dc:	4313      	orrs	r3, r2
 80149de:	b29a      	uxth	r2, r3
 80149e0:	187b      	adds	r3, r7, r1
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	801a      	strh	r2, [r3, #0]
 80149e6:	e023      	b.n	8014a30 <USB_EPStartXfer+0xd24>
 80149e8:	683b      	ldr	r3, [r7, #0]
 80149ea:	785b      	ldrb	r3, [r3, #1]
 80149ec:	2b01      	cmp	r3, #1
 80149ee:	d11f      	bne.n	8014a30 <USB_EPStartXfer+0xd24>
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	21b4      	movs	r1, #180	@ 0xb4
 80149f4:	187a      	adds	r2, r7, r1
 80149f6:	6013      	str	r3, [r2, #0]
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	2250      	movs	r2, #80	@ 0x50
 80149fc:	5a9b      	ldrh	r3, [r3, r2]
 80149fe:	b29b      	uxth	r3, r3
 8014a00:	001a      	movs	r2, r3
 8014a02:	187b      	adds	r3, r7, r1
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	189b      	adds	r3, r3, r2
 8014a08:	187a      	adds	r2, r7, r1
 8014a0a:	6013      	str	r3, [r2, #0]
 8014a0c:	683b      	ldr	r3, [r7, #0]
 8014a0e:	781b      	ldrb	r3, [r3, #0]
 8014a10:	00da      	lsls	r2, r3, #3
 8014a12:	187b      	adds	r3, r7, r1
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	18d3      	adds	r3, r2, r3
 8014a18:	4a4a      	ldr	r2, [pc, #296]	@ (8014b44 <USB_EPStartXfer+0xe38>)
 8014a1a:	4694      	mov	ip, r2
 8014a1c:	4463      	add	r3, ip
 8014a1e:	21b0      	movs	r1, #176	@ 0xb0
 8014a20:	187a      	adds	r2, r7, r1
 8014a22:	6013      	str	r3, [r2, #0]
 8014a24:	683b      	ldr	r3, [r7, #0]
 8014a26:	691b      	ldr	r3, [r3, #16]
 8014a28:	b29a      	uxth	r2, r3
 8014a2a:	187b      	adds	r3, r7, r1
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	801a      	strh	r2, [r3, #0]
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	22a4      	movs	r2, #164	@ 0xa4
 8014a34:	18ba      	adds	r2, r7, r2
 8014a36:	6013      	str	r3, [r2, #0]
 8014a38:	683b      	ldr	r3, [r7, #0]
 8014a3a:	785b      	ldrb	r3, [r3, #1]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d000      	beq.n	8014a42 <USB_EPStartXfer+0xd36>
 8014a40:	e082      	b.n	8014b48 <USB_EPStartXfer+0xe3c>
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	219c      	movs	r1, #156	@ 0x9c
 8014a46:	187a      	adds	r2, r7, r1
 8014a48:	6013      	str	r3, [r2, #0]
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	2250      	movs	r2, #80	@ 0x50
 8014a4e:	5a9b      	ldrh	r3, [r3, r2]
 8014a50:	b29b      	uxth	r3, r3
 8014a52:	001a      	movs	r2, r3
 8014a54:	187b      	adds	r3, r7, r1
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	189b      	adds	r3, r3, r2
 8014a5a:	187a      	adds	r2, r7, r1
 8014a5c:	6013      	str	r3, [r2, #0]
 8014a5e:	683b      	ldr	r3, [r7, #0]
 8014a60:	781b      	ldrb	r3, [r3, #0]
 8014a62:	00da      	lsls	r2, r3, #3
 8014a64:	187b      	adds	r3, r7, r1
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	18d3      	adds	r3, r2, r3
 8014a6a:	4a34      	ldr	r2, [pc, #208]	@ (8014b3c <USB_EPStartXfer+0xe30>)
 8014a6c:	4694      	mov	ip, r2
 8014a6e:	4463      	add	r3, ip
 8014a70:	2198      	movs	r1, #152	@ 0x98
 8014a72:	187a      	adds	r2, r7, r1
 8014a74:	6013      	str	r3, [r2, #0]
 8014a76:	187b      	adds	r3, r7, r1
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	881b      	ldrh	r3, [r3, #0]
 8014a7c:	b29b      	uxth	r3, r3
 8014a7e:	059b      	lsls	r3, r3, #22
 8014a80:	0d9b      	lsrs	r3, r3, #22
 8014a82:	b29a      	uxth	r2, r3
 8014a84:	187b      	adds	r3, r7, r1
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	801a      	strh	r2, [r3, #0]
 8014a8a:	683b      	ldr	r3, [r7, #0]
 8014a8c:	691b      	ldr	r3, [r3, #16]
 8014a8e:	2b3e      	cmp	r3, #62	@ 0x3e
 8014a90:	d923      	bls.n	8014ada <USB_EPStartXfer+0xdce>
 8014a92:	683b      	ldr	r3, [r7, #0]
 8014a94:	691b      	ldr	r3, [r3, #16]
 8014a96:	095b      	lsrs	r3, r3, #5
 8014a98:	21e0      	movs	r1, #224	@ 0xe0
 8014a9a:	187a      	adds	r2, r7, r1
 8014a9c:	6013      	str	r3, [r2, #0]
 8014a9e:	683b      	ldr	r3, [r7, #0]
 8014aa0:	691b      	ldr	r3, [r3, #16]
 8014aa2:	221f      	movs	r2, #31
 8014aa4:	4013      	ands	r3, r2
 8014aa6:	d104      	bne.n	8014ab2 <USB_EPStartXfer+0xda6>
 8014aa8:	187b      	adds	r3, r7, r1
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	3b01      	subs	r3, #1
 8014aae:	187a      	adds	r2, r7, r1
 8014ab0:	6013      	str	r3, [r2, #0]
 8014ab2:	2198      	movs	r1, #152	@ 0x98
 8014ab4:	187b      	adds	r3, r7, r1
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	881b      	ldrh	r3, [r3, #0]
 8014aba:	b29a      	uxth	r2, r3
 8014abc:	23e0      	movs	r3, #224	@ 0xe0
 8014abe:	18fb      	adds	r3, r7, r3
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	b29b      	uxth	r3, r3
 8014ac4:	029b      	lsls	r3, r3, #10
 8014ac6:	b29b      	uxth	r3, r3
 8014ac8:	4313      	orrs	r3, r2
 8014aca:	b29b      	uxth	r3, r3
 8014acc:	4a1c      	ldr	r2, [pc, #112]	@ (8014b40 <USB_EPStartXfer+0xe34>)
 8014ace:	4313      	orrs	r3, r2
 8014ad0:	b29a      	uxth	r2, r3
 8014ad2:	187b      	adds	r3, r7, r1
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	801a      	strh	r2, [r3, #0]
 8014ad8:	e057      	b.n	8014b8a <USB_EPStartXfer+0xe7e>
 8014ada:	683b      	ldr	r3, [r7, #0]
 8014adc:	691b      	ldr	r3, [r3, #16]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d10b      	bne.n	8014afa <USB_EPStartXfer+0xdee>
 8014ae2:	2198      	movs	r1, #152	@ 0x98
 8014ae4:	187b      	adds	r3, r7, r1
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	881b      	ldrh	r3, [r3, #0]
 8014aea:	b29b      	uxth	r3, r3
 8014aec:	4a14      	ldr	r2, [pc, #80]	@ (8014b40 <USB_EPStartXfer+0xe34>)
 8014aee:	4313      	orrs	r3, r2
 8014af0:	b29a      	uxth	r2, r3
 8014af2:	187b      	adds	r3, r7, r1
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	801a      	strh	r2, [r3, #0]
 8014af8:	e047      	b.n	8014b8a <USB_EPStartXfer+0xe7e>
 8014afa:	683b      	ldr	r3, [r7, #0]
 8014afc:	691b      	ldr	r3, [r3, #16]
 8014afe:	085b      	lsrs	r3, r3, #1
 8014b00:	21e0      	movs	r1, #224	@ 0xe0
 8014b02:	187a      	adds	r2, r7, r1
 8014b04:	6013      	str	r3, [r2, #0]
 8014b06:	683b      	ldr	r3, [r7, #0]
 8014b08:	691b      	ldr	r3, [r3, #16]
 8014b0a:	2201      	movs	r2, #1
 8014b0c:	4013      	ands	r3, r2
 8014b0e:	d004      	beq.n	8014b1a <USB_EPStartXfer+0xe0e>
 8014b10:	187b      	adds	r3, r7, r1
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	3301      	adds	r3, #1
 8014b16:	187a      	adds	r2, r7, r1
 8014b18:	6013      	str	r3, [r2, #0]
 8014b1a:	2198      	movs	r1, #152	@ 0x98
 8014b1c:	187b      	adds	r3, r7, r1
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	881b      	ldrh	r3, [r3, #0]
 8014b22:	b29a      	uxth	r2, r3
 8014b24:	23e0      	movs	r3, #224	@ 0xe0
 8014b26:	18fb      	adds	r3, r7, r3
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	b29b      	uxth	r3, r3
 8014b2c:	029b      	lsls	r3, r3, #10
 8014b2e:	b29b      	uxth	r3, r3
 8014b30:	4313      	orrs	r3, r2
 8014b32:	b29a      	uxth	r2, r3
 8014b34:	187b      	adds	r3, r7, r1
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	801a      	strh	r2, [r3, #0]
 8014b3a:	e026      	b.n	8014b8a <USB_EPStartXfer+0xe7e>
 8014b3c:	00000406 	.word	0x00000406
 8014b40:	ffff8000 	.word	0xffff8000
 8014b44:	00000402 	.word	0x00000402
 8014b48:	683b      	ldr	r3, [r7, #0]
 8014b4a:	785b      	ldrb	r3, [r3, #1]
 8014b4c:	2b01      	cmp	r3, #1
 8014b4e:	d11c      	bne.n	8014b8a <USB_EPStartXfer+0xe7e>
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	2250      	movs	r2, #80	@ 0x50
 8014b54:	5a9b      	ldrh	r3, [r3, r2]
 8014b56:	b29b      	uxth	r3, r3
 8014b58:	001a      	movs	r2, r3
 8014b5a:	21a4      	movs	r1, #164	@ 0xa4
 8014b5c:	187b      	adds	r3, r7, r1
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	189b      	adds	r3, r3, r2
 8014b62:	187a      	adds	r2, r7, r1
 8014b64:	6013      	str	r3, [r2, #0]
 8014b66:	683b      	ldr	r3, [r7, #0]
 8014b68:	781b      	ldrb	r3, [r3, #0]
 8014b6a:	00da      	lsls	r2, r3, #3
 8014b6c:	187b      	adds	r3, r7, r1
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	18d3      	adds	r3, r2, r3
 8014b72:	4ad2      	ldr	r2, [pc, #840]	@ (8014ebc <USB_EPStartXfer+0x11b0>)
 8014b74:	4694      	mov	ip, r2
 8014b76:	4463      	add	r3, ip
 8014b78:	21a0      	movs	r1, #160	@ 0xa0
 8014b7a:	187a      	adds	r2, r7, r1
 8014b7c:	6013      	str	r3, [r2, #0]
 8014b7e:	683b      	ldr	r3, [r7, #0]
 8014b80:	691b      	ldr	r3, [r3, #16]
 8014b82:	b29a      	uxth	r2, r3
 8014b84:	187b      	adds	r3, r7, r1
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8014b8a:	683b      	ldr	r3, [r7, #0]
 8014b8c:	69db      	ldr	r3, [r3, #28]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d100      	bne.n	8014b94 <USB_EPStartXfer+0xe88>
 8014b92:	e1c2      	b.n	8014f1a <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8014b94:	687a      	ldr	r2, [r7, #4]
 8014b96:	683b      	ldr	r3, [r7, #0]
 8014b98:	781b      	ldrb	r3, [r3, #0]
 8014b9a:	009b      	lsls	r3, r3, #2
 8014b9c:	18d2      	adds	r2, r2, r3
 8014b9e:	2196      	movs	r1, #150	@ 0x96
 8014ba0:	187b      	adds	r3, r7, r1
 8014ba2:	8812      	ldrh	r2, [r2, #0]
 8014ba4:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8014ba6:	187b      	adds	r3, r7, r1
 8014ba8:	881a      	ldrh	r2, [r3, #0]
 8014baa:	2380      	movs	r3, #128	@ 0x80
 8014bac:	01db      	lsls	r3, r3, #7
 8014bae:	4013      	ands	r3, r2
 8014bb0:	d004      	beq.n	8014bbc <USB_EPStartXfer+0xeb0>
 8014bb2:	187b      	adds	r3, r7, r1
 8014bb4:	881b      	ldrh	r3, [r3, #0]
 8014bb6:	2240      	movs	r2, #64	@ 0x40
 8014bb8:	4013      	ands	r3, r2
 8014bba:	d10d      	bne.n	8014bd8 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8014bbc:	2196      	movs	r1, #150	@ 0x96
 8014bbe:	187b      	adds	r3, r7, r1
 8014bc0:	881a      	ldrh	r2, [r3, #0]
 8014bc2:	2380      	movs	r3, #128	@ 0x80
 8014bc4:	01db      	lsls	r3, r3, #7
 8014bc6:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8014bc8:	d000      	beq.n	8014bcc <USB_EPStartXfer+0xec0>
 8014bca:	e1a6      	b.n	8014f1a <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8014bcc:	187b      	adds	r3, r7, r1
 8014bce:	881b      	ldrh	r3, [r3, #0]
 8014bd0:	2240      	movs	r2, #64	@ 0x40
 8014bd2:	4013      	ands	r3, r2
 8014bd4:	d000      	beq.n	8014bd8 <USB_EPStartXfer+0xecc>
 8014bd6:	e1a0      	b.n	8014f1a <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8014bd8:	687a      	ldr	r2, [r7, #4]
 8014bda:	683b      	ldr	r3, [r7, #0]
 8014bdc:	781b      	ldrb	r3, [r3, #0]
 8014bde:	009b      	lsls	r3, r3, #2
 8014be0:	18d3      	adds	r3, r2, r3
 8014be2:	881b      	ldrh	r3, [r3, #0]
 8014be4:	b29a      	uxth	r2, r3
 8014be6:	2094      	movs	r0, #148	@ 0x94
 8014be8:	183b      	adds	r3, r7, r0
 8014bea:	49b5      	ldr	r1, [pc, #724]	@ (8014ec0 <USB_EPStartXfer+0x11b4>)
 8014bec:	400a      	ands	r2, r1
 8014bee:	801a      	strh	r2, [r3, #0]
 8014bf0:	687a      	ldr	r2, [r7, #4]
 8014bf2:	683b      	ldr	r3, [r7, #0]
 8014bf4:	781b      	ldrb	r3, [r3, #0]
 8014bf6:	009b      	lsls	r3, r3, #2
 8014bf8:	18d3      	adds	r3, r2, r3
 8014bfa:	183a      	adds	r2, r7, r0
 8014bfc:	8812      	ldrh	r2, [r2, #0]
 8014bfe:	49b1      	ldr	r1, [pc, #708]	@ (8014ec4 <USB_EPStartXfer+0x11b8>)
 8014c00:	430a      	orrs	r2, r1
 8014c02:	b292      	uxth	r2, r2
 8014c04:	801a      	strh	r2, [r3, #0]
 8014c06:	e188      	b.n	8014f1a <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8014c08:	683b      	ldr	r3, [r7, #0]
 8014c0a:	78db      	ldrb	r3, [r3, #3]
 8014c0c:	2b01      	cmp	r3, #1
 8014c0e:	d000      	beq.n	8014c12 <USB_EPStartXfer+0xf06>
 8014c10:	e181      	b.n	8014f16 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8014c12:	683b      	ldr	r3, [r7, #0]
 8014c14:	699a      	ldr	r2, [r3, #24]
 8014c16:	683b      	ldr	r3, [r7, #0]
 8014c18:	691b      	ldr	r3, [r3, #16]
 8014c1a:	429a      	cmp	r2, r3
 8014c1c:	d90d      	bls.n	8014c3a <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8014c1e:	683b      	ldr	r3, [r7, #0]
 8014c20:	691b      	ldr	r3, [r3, #16]
 8014c22:	1d7a      	adds	r2, r7, #5
 8014c24:	32ff      	adds	r2, #255	@ 0xff
 8014c26:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8014c28:	683b      	ldr	r3, [r7, #0]
 8014c2a:	699a      	ldr	r2, [r3, #24]
 8014c2c:	1d7b      	adds	r3, r7, #5
 8014c2e:	33ff      	adds	r3, #255	@ 0xff
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	1ad2      	subs	r2, r2, r3
 8014c34:	683b      	ldr	r3, [r7, #0]
 8014c36:	619a      	str	r2, [r3, #24]
 8014c38:	e007      	b.n	8014c4a <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8014c3a:	683b      	ldr	r3, [r7, #0]
 8014c3c:	699b      	ldr	r3, [r3, #24]
 8014c3e:	1d7a      	adds	r2, r7, #5
 8014c40:	32ff      	adds	r2, #255	@ 0xff
 8014c42:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8014c44:	683b      	ldr	r3, [r7, #0]
 8014c46:	2200      	movs	r2, #0
 8014c48:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8014c4a:	683b      	ldr	r3, [r7, #0]
 8014c4c:	785b      	ldrb	r3, [r3, #1]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d000      	beq.n	8014c54 <USB_EPStartXfer+0xf48>
 8014c52:	e082      	b.n	8014d5a <USB_EPStartXfer+0x104e>
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	21cc      	movs	r1, #204	@ 0xcc
 8014c58:	187a      	adds	r2, r7, r1
 8014c5a:	6013      	str	r3, [r2, #0]
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	2250      	movs	r2, #80	@ 0x50
 8014c60:	5a9b      	ldrh	r3, [r3, r2]
 8014c62:	b29b      	uxth	r3, r3
 8014c64:	001a      	movs	r2, r3
 8014c66:	187b      	adds	r3, r7, r1
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	189b      	adds	r3, r3, r2
 8014c6c:	187a      	adds	r2, r7, r1
 8014c6e:	6013      	str	r3, [r2, #0]
 8014c70:	683b      	ldr	r3, [r7, #0]
 8014c72:	781b      	ldrb	r3, [r3, #0]
 8014c74:	00da      	lsls	r2, r3, #3
 8014c76:	187b      	adds	r3, r7, r1
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	18d3      	adds	r3, r2, r3
 8014c7c:	4a92      	ldr	r2, [pc, #584]	@ (8014ec8 <USB_EPStartXfer+0x11bc>)
 8014c7e:	4694      	mov	ip, r2
 8014c80:	4463      	add	r3, ip
 8014c82:	21c8      	movs	r1, #200	@ 0xc8
 8014c84:	187a      	adds	r2, r7, r1
 8014c86:	6013      	str	r3, [r2, #0]
 8014c88:	187b      	adds	r3, r7, r1
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	881b      	ldrh	r3, [r3, #0]
 8014c8e:	b29b      	uxth	r3, r3
 8014c90:	059b      	lsls	r3, r3, #22
 8014c92:	0d9b      	lsrs	r3, r3, #22
 8014c94:	b29a      	uxth	r2, r3
 8014c96:	187b      	adds	r3, r7, r1
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	801a      	strh	r2, [r3, #0]
 8014c9c:	1d7b      	adds	r3, r7, #5
 8014c9e:	33ff      	adds	r3, #255	@ 0xff
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	2b3e      	cmp	r3, #62	@ 0x3e
 8014ca4:	d925      	bls.n	8014cf2 <USB_EPStartXfer+0xfe6>
 8014ca6:	1d7b      	adds	r3, r7, #5
 8014ca8:	33ff      	adds	r3, #255	@ 0xff
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	095b      	lsrs	r3, r3, #5
 8014cae:	21dc      	movs	r1, #220	@ 0xdc
 8014cb0:	187a      	adds	r2, r7, r1
 8014cb2:	6013      	str	r3, [r2, #0]
 8014cb4:	1d7b      	adds	r3, r7, #5
 8014cb6:	33ff      	adds	r3, #255	@ 0xff
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	221f      	movs	r2, #31
 8014cbc:	4013      	ands	r3, r2
 8014cbe:	d104      	bne.n	8014cca <USB_EPStartXfer+0xfbe>
 8014cc0:	187b      	adds	r3, r7, r1
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	3b01      	subs	r3, #1
 8014cc6:	187a      	adds	r2, r7, r1
 8014cc8:	6013      	str	r3, [r2, #0]
 8014cca:	21c8      	movs	r1, #200	@ 0xc8
 8014ccc:	187b      	adds	r3, r7, r1
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	881b      	ldrh	r3, [r3, #0]
 8014cd2:	b29a      	uxth	r2, r3
 8014cd4:	23dc      	movs	r3, #220	@ 0xdc
 8014cd6:	18fb      	adds	r3, r7, r3
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	b29b      	uxth	r3, r3
 8014cdc:	029b      	lsls	r3, r3, #10
 8014cde:	b29b      	uxth	r3, r3
 8014ce0:	4313      	orrs	r3, r2
 8014ce2:	b29b      	uxth	r3, r3
 8014ce4:	4a79      	ldr	r2, [pc, #484]	@ (8014ecc <USB_EPStartXfer+0x11c0>)
 8014ce6:	4313      	orrs	r3, r2
 8014ce8:	b29a      	uxth	r2, r3
 8014cea:	187b      	adds	r3, r7, r1
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	801a      	strh	r2, [r3, #0]
 8014cf0:	e058      	b.n	8014da4 <USB_EPStartXfer+0x1098>
 8014cf2:	1d7b      	adds	r3, r7, #5
 8014cf4:	33ff      	adds	r3, #255	@ 0xff
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d10b      	bne.n	8014d14 <USB_EPStartXfer+0x1008>
 8014cfc:	21c8      	movs	r1, #200	@ 0xc8
 8014cfe:	187b      	adds	r3, r7, r1
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	881b      	ldrh	r3, [r3, #0]
 8014d04:	b29b      	uxth	r3, r3
 8014d06:	4a71      	ldr	r2, [pc, #452]	@ (8014ecc <USB_EPStartXfer+0x11c0>)
 8014d08:	4313      	orrs	r3, r2
 8014d0a:	b29a      	uxth	r2, r3
 8014d0c:	187b      	adds	r3, r7, r1
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	801a      	strh	r2, [r3, #0]
 8014d12:	e047      	b.n	8014da4 <USB_EPStartXfer+0x1098>
 8014d14:	1d7b      	adds	r3, r7, #5
 8014d16:	33ff      	adds	r3, #255	@ 0xff
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	085b      	lsrs	r3, r3, #1
 8014d1c:	21dc      	movs	r1, #220	@ 0xdc
 8014d1e:	187a      	adds	r2, r7, r1
 8014d20:	6013      	str	r3, [r2, #0]
 8014d22:	1d7b      	adds	r3, r7, #5
 8014d24:	33ff      	adds	r3, #255	@ 0xff
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	2201      	movs	r2, #1
 8014d2a:	4013      	ands	r3, r2
 8014d2c:	d004      	beq.n	8014d38 <USB_EPStartXfer+0x102c>
 8014d2e:	187b      	adds	r3, r7, r1
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	3301      	adds	r3, #1
 8014d34:	187a      	adds	r2, r7, r1
 8014d36:	6013      	str	r3, [r2, #0]
 8014d38:	21c8      	movs	r1, #200	@ 0xc8
 8014d3a:	187b      	adds	r3, r7, r1
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	881b      	ldrh	r3, [r3, #0]
 8014d40:	b29a      	uxth	r2, r3
 8014d42:	23dc      	movs	r3, #220	@ 0xdc
 8014d44:	18fb      	adds	r3, r7, r3
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	b29b      	uxth	r3, r3
 8014d4a:	029b      	lsls	r3, r3, #10
 8014d4c:	b29b      	uxth	r3, r3
 8014d4e:	4313      	orrs	r3, r2
 8014d50:	b29a      	uxth	r2, r3
 8014d52:	187b      	adds	r3, r7, r1
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	801a      	strh	r2, [r3, #0]
 8014d58:	e024      	b.n	8014da4 <USB_EPStartXfer+0x1098>
 8014d5a:	683b      	ldr	r3, [r7, #0]
 8014d5c:	785b      	ldrb	r3, [r3, #1]
 8014d5e:	2b01      	cmp	r3, #1
 8014d60:	d120      	bne.n	8014da4 <USB_EPStartXfer+0x1098>
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	21d4      	movs	r1, #212	@ 0xd4
 8014d66:	187a      	adds	r2, r7, r1
 8014d68:	6013      	str	r3, [r2, #0]
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	2250      	movs	r2, #80	@ 0x50
 8014d6e:	5a9b      	ldrh	r3, [r3, r2]
 8014d70:	b29b      	uxth	r3, r3
 8014d72:	001a      	movs	r2, r3
 8014d74:	187b      	adds	r3, r7, r1
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	189b      	adds	r3, r3, r2
 8014d7a:	187a      	adds	r2, r7, r1
 8014d7c:	6013      	str	r3, [r2, #0]
 8014d7e:	683b      	ldr	r3, [r7, #0]
 8014d80:	781b      	ldrb	r3, [r3, #0]
 8014d82:	00da      	lsls	r2, r3, #3
 8014d84:	187b      	adds	r3, r7, r1
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	18d3      	adds	r3, r2, r3
 8014d8a:	4a4f      	ldr	r2, [pc, #316]	@ (8014ec8 <USB_EPStartXfer+0x11bc>)
 8014d8c:	4694      	mov	ip, r2
 8014d8e:	4463      	add	r3, ip
 8014d90:	21d0      	movs	r1, #208	@ 0xd0
 8014d92:	187a      	adds	r2, r7, r1
 8014d94:	6013      	str	r3, [r2, #0]
 8014d96:	1d7b      	adds	r3, r7, #5
 8014d98:	33ff      	adds	r3, #255	@ 0xff
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	b29a      	uxth	r2, r3
 8014d9e:	187b      	adds	r3, r7, r1
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	801a      	strh	r2, [r3, #0]
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	22c4      	movs	r2, #196	@ 0xc4
 8014da8:	18ba      	adds	r2, r7, r2
 8014daa:	6013      	str	r3, [r2, #0]
 8014dac:	683b      	ldr	r3, [r7, #0]
 8014dae:	785b      	ldrb	r3, [r3, #1]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d000      	beq.n	8014db6 <USB_EPStartXfer+0x10aa>
 8014db4:	e08c      	b.n	8014ed0 <USB_EPStartXfer+0x11c4>
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	21bc      	movs	r1, #188	@ 0xbc
 8014dba:	187a      	adds	r2, r7, r1
 8014dbc:	6013      	str	r3, [r2, #0]
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	2250      	movs	r2, #80	@ 0x50
 8014dc2:	5a9b      	ldrh	r3, [r3, r2]
 8014dc4:	b29b      	uxth	r3, r3
 8014dc6:	001a      	movs	r2, r3
 8014dc8:	187b      	adds	r3, r7, r1
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	189b      	adds	r3, r3, r2
 8014dce:	187a      	adds	r2, r7, r1
 8014dd0:	6013      	str	r3, [r2, #0]
 8014dd2:	683b      	ldr	r3, [r7, #0]
 8014dd4:	781b      	ldrb	r3, [r3, #0]
 8014dd6:	00da      	lsls	r2, r3, #3
 8014dd8:	187b      	adds	r3, r7, r1
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	18d3      	adds	r3, r2, r3
 8014dde:	4a37      	ldr	r2, [pc, #220]	@ (8014ebc <USB_EPStartXfer+0x11b0>)
 8014de0:	4694      	mov	ip, r2
 8014de2:	4463      	add	r3, ip
 8014de4:	21b8      	movs	r1, #184	@ 0xb8
 8014de6:	187a      	adds	r2, r7, r1
 8014de8:	6013      	str	r3, [r2, #0]
 8014dea:	187b      	adds	r3, r7, r1
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	881b      	ldrh	r3, [r3, #0]
 8014df0:	b29b      	uxth	r3, r3
 8014df2:	059b      	lsls	r3, r3, #22
 8014df4:	0d9b      	lsrs	r3, r3, #22
 8014df6:	b29a      	uxth	r2, r3
 8014df8:	187b      	adds	r3, r7, r1
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	801a      	strh	r2, [r3, #0]
 8014dfe:	1d7b      	adds	r3, r7, #5
 8014e00:	33ff      	adds	r3, #255	@ 0xff
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	2b3e      	cmp	r3, #62	@ 0x3e
 8014e06:	d925      	bls.n	8014e54 <USB_EPStartXfer+0x1148>
 8014e08:	1d7b      	adds	r3, r7, #5
 8014e0a:	33ff      	adds	r3, #255	@ 0xff
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	095b      	lsrs	r3, r3, #5
 8014e10:	21d8      	movs	r1, #216	@ 0xd8
 8014e12:	187a      	adds	r2, r7, r1
 8014e14:	6013      	str	r3, [r2, #0]
 8014e16:	1d7b      	adds	r3, r7, #5
 8014e18:	33ff      	adds	r3, #255	@ 0xff
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	221f      	movs	r2, #31
 8014e1e:	4013      	ands	r3, r2
 8014e20:	d104      	bne.n	8014e2c <USB_EPStartXfer+0x1120>
 8014e22:	187b      	adds	r3, r7, r1
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	3b01      	subs	r3, #1
 8014e28:	187a      	adds	r2, r7, r1
 8014e2a:	6013      	str	r3, [r2, #0]
 8014e2c:	21b8      	movs	r1, #184	@ 0xb8
 8014e2e:	187b      	adds	r3, r7, r1
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	881b      	ldrh	r3, [r3, #0]
 8014e34:	b29a      	uxth	r2, r3
 8014e36:	23d8      	movs	r3, #216	@ 0xd8
 8014e38:	18fb      	adds	r3, r7, r3
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	b29b      	uxth	r3, r3
 8014e3e:	029b      	lsls	r3, r3, #10
 8014e40:	b29b      	uxth	r3, r3
 8014e42:	4313      	orrs	r3, r2
 8014e44:	b29b      	uxth	r3, r3
 8014e46:	4a21      	ldr	r2, [pc, #132]	@ (8014ecc <USB_EPStartXfer+0x11c0>)
 8014e48:	4313      	orrs	r3, r2
 8014e4a:	b29a      	uxth	r2, r3
 8014e4c:	187b      	adds	r3, r7, r1
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	801a      	strh	r2, [r3, #0]
 8014e52:	e062      	b.n	8014f1a <USB_EPStartXfer+0x120e>
 8014e54:	1d7b      	adds	r3, r7, #5
 8014e56:	33ff      	adds	r3, #255	@ 0xff
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d10b      	bne.n	8014e76 <USB_EPStartXfer+0x116a>
 8014e5e:	21b8      	movs	r1, #184	@ 0xb8
 8014e60:	187b      	adds	r3, r7, r1
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	881b      	ldrh	r3, [r3, #0]
 8014e66:	b29b      	uxth	r3, r3
 8014e68:	4a18      	ldr	r2, [pc, #96]	@ (8014ecc <USB_EPStartXfer+0x11c0>)
 8014e6a:	4313      	orrs	r3, r2
 8014e6c:	b29a      	uxth	r2, r3
 8014e6e:	187b      	adds	r3, r7, r1
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	801a      	strh	r2, [r3, #0]
 8014e74:	e051      	b.n	8014f1a <USB_EPStartXfer+0x120e>
 8014e76:	1d7b      	adds	r3, r7, #5
 8014e78:	33ff      	adds	r3, #255	@ 0xff
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	085b      	lsrs	r3, r3, #1
 8014e7e:	21d8      	movs	r1, #216	@ 0xd8
 8014e80:	187a      	adds	r2, r7, r1
 8014e82:	6013      	str	r3, [r2, #0]
 8014e84:	1d7b      	adds	r3, r7, #5
 8014e86:	33ff      	adds	r3, #255	@ 0xff
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	2201      	movs	r2, #1
 8014e8c:	4013      	ands	r3, r2
 8014e8e:	d004      	beq.n	8014e9a <USB_EPStartXfer+0x118e>
 8014e90:	187b      	adds	r3, r7, r1
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	3301      	adds	r3, #1
 8014e96:	187a      	adds	r2, r7, r1
 8014e98:	6013      	str	r3, [r2, #0]
 8014e9a:	21b8      	movs	r1, #184	@ 0xb8
 8014e9c:	187b      	adds	r3, r7, r1
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	881b      	ldrh	r3, [r3, #0]
 8014ea2:	b29a      	uxth	r2, r3
 8014ea4:	23d8      	movs	r3, #216	@ 0xd8
 8014ea6:	18fb      	adds	r3, r7, r3
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	b29b      	uxth	r3, r3
 8014eac:	029b      	lsls	r3, r3, #10
 8014eae:	b29b      	uxth	r3, r3
 8014eb0:	4313      	orrs	r3, r2
 8014eb2:	b29a      	uxth	r2, r3
 8014eb4:	187b      	adds	r3, r7, r1
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	801a      	strh	r2, [r3, #0]
 8014eba:	e02e      	b.n	8014f1a <USB_EPStartXfer+0x120e>
 8014ebc:	00000406 	.word	0x00000406
 8014ec0:	ffff8f8f 	.word	0xffff8f8f
 8014ec4:	ffff80c0 	.word	0xffff80c0
 8014ec8:	00000402 	.word	0x00000402
 8014ecc:	ffff8000 	.word	0xffff8000
 8014ed0:	683b      	ldr	r3, [r7, #0]
 8014ed2:	785b      	ldrb	r3, [r3, #1]
 8014ed4:	2b01      	cmp	r3, #1
 8014ed6:	d120      	bne.n	8014f1a <USB_EPStartXfer+0x120e>
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	2250      	movs	r2, #80	@ 0x50
 8014edc:	5a9b      	ldrh	r3, [r3, r2]
 8014ede:	b29b      	uxth	r3, r3
 8014ee0:	001a      	movs	r2, r3
 8014ee2:	21c4      	movs	r1, #196	@ 0xc4
 8014ee4:	187b      	adds	r3, r7, r1
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	189b      	adds	r3, r3, r2
 8014eea:	187a      	adds	r2, r7, r1
 8014eec:	6013      	str	r3, [r2, #0]
 8014eee:	683b      	ldr	r3, [r7, #0]
 8014ef0:	781b      	ldrb	r3, [r3, #0]
 8014ef2:	00da      	lsls	r2, r3, #3
 8014ef4:	187b      	adds	r3, r7, r1
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	18d3      	adds	r3, r2, r3
 8014efa:	4a1d      	ldr	r2, [pc, #116]	@ (8014f70 <USB_EPStartXfer+0x1264>)
 8014efc:	4694      	mov	ip, r2
 8014efe:	4463      	add	r3, ip
 8014f00:	21c0      	movs	r1, #192	@ 0xc0
 8014f02:	187a      	adds	r2, r7, r1
 8014f04:	6013      	str	r3, [r2, #0]
 8014f06:	1d7b      	adds	r3, r7, #5
 8014f08:	33ff      	adds	r3, #255	@ 0xff
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	b29a      	uxth	r2, r3
 8014f0e:	187b      	adds	r3, r7, r1
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	801a      	strh	r2, [r3, #0]
 8014f14:	e001      	b.n	8014f1a <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8014f16:	2301      	movs	r3, #1
 8014f18:	e025      	b.n	8014f66 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8014f1a:	687a      	ldr	r2, [r7, #4]
 8014f1c:	683b      	ldr	r3, [r7, #0]
 8014f1e:	781b      	ldrb	r3, [r3, #0]
 8014f20:	009b      	lsls	r3, r3, #2
 8014f22:	18d3      	adds	r3, r2, r3
 8014f24:	881b      	ldrh	r3, [r3, #0]
 8014f26:	b29a      	uxth	r2, r3
 8014f28:	208a      	movs	r0, #138	@ 0x8a
 8014f2a:	183b      	adds	r3, r7, r0
 8014f2c:	4911      	ldr	r1, [pc, #68]	@ (8014f74 <USB_EPStartXfer+0x1268>)
 8014f2e:	400a      	ands	r2, r1
 8014f30:	801a      	strh	r2, [r3, #0]
 8014f32:	183b      	adds	r3, r7, r0
 8014f34:	183a      	adds	r2, r7, r0
 8014f36:	8812      	ldrh	r2, [r2, #0]
 8014f38:	2180      	movs	r1, #128	@ 0x80
 8014f3a:	0149      	lsls	r1, r1, #5
 8014f3c:	404a      	eors	r2, r1
 8014f3e:	801a      	strh	r2, [r3, #0]
 8014f40:	183b      	adds	r3, r7, r0
 8014f42:	183a      	adds	r2, r7, r0
 8014f44:	8812      	ldrh	r2, [r2, #0]
 8014f46:	2180      	movs	r1, #128	@ 0x80
 8014f48:	0189      	lsls	r1, r1, #6
 8014f4a:	404a      	eors	r2, r1
 8014f4c:	801a      	strh	r2, [r3, #0]
 8014f4e:	687a      	ldr	r2, [r7, #4]
 8014f50:	683b      	ldr	r3, [r7, #0]
 8014f52:	781b      	ldrb	r3, [r3, #0]
 8014f54:	009b      	lsls	r3, r3, #2
 8014f56:	18d3      	adds	r3, r2, r3
 8014f58:	183a      	adds	r2, r7, r0
 8014f5a:	8812      	ldrh	r2, [r2, #0]
 8014f5c:	4906      	ldr	r1, [pc, #24]	@ (8014f78 <USB_EPStartXfer+0x126c>)
 8014f5e:	430a      	orrs	r2, r1
 8014f60:	b292      	uxth	r2, r2
 8014f62:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8014f64:	2300      	movs	r3, #0
}
 8014f66:	0018      	movs	r0, r3
 8014f68:	46bd      	mov	sp, r7
 8014f6a:	b043      	add	sp, #268	@ 0x10c
 8014f6c:	bd90      	pop	{r4, r7, pc}
 8014f6e:	46c0      	nop			@ (mov r8, r8)
 8014f70:	00000406 	.word	0x00000406
 8014f74:	ffffbf8f 	.word	0xffffbf8f
 8014f78:	ffff8080 	.word	0xffff8080

08014f7c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b084      	sub	sp, #16
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
 8014f84:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8014f86:	683b      	ldr	r3, [r7, #0]
 8014f88:	785b      	ldrb	r3, [r3, #1]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d01d      	beq.n	8014fca <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8014f8e:	687a      	ldr	r2, [r7, #4]
 8014f90:	683b      	ldr	r3, [r7, #0]
 8014f92:	781b      	ldrb	r3, [r3, #0]
 8014f94:	009b      	lsls	r3, r3, #2
 8014f96:	18d3      	adds	r3, r2, r3
 8014f98:	881b      	ldrh	r3, [r3, #0]
 8014f9a:	b29a      	uxth	r2, r3
 8014f9c:	200c      	movs	r0, #12
 8014f9e:	183b      	adds	r3, r7, r0
 8014fa0:	491b      	ldr	r1, [pc, #108]	@ (8015010 <USB_EPSetStall+0x94>)
 8014fa2:	400a      	ands	r2, r1
 8014fa4:	801a      	strh	r2, [r3, #0]
 8014fa6:	183b      	adds	r3, r7, r0
 8014fa8:	183a      	adds	r2, r7, r0
 8014faa:	8812      	ldrh	r2, [r2, #0]
 8014fac:	2110      	movs	r1, #16
 8014fae:	404a      	eors	r2, r1
 8014fb0:	801a      	strh	r2, [r3, #0]
 8014fb2:	687a      	ldr	r2, [r7, #4]
 8014fb4:	683b      	ldr	r3, [r7, #0]
 8014fb6:	781b      	ldrb	r3, [r3, #0]
 8014fb8:	009b      	lsls	r3, r3, #2
 8014fba:	18d3      	adds	r3, r2, r3
 8014fbc:	183a      	adds	r2, r7, r0
 8014fbe:	8812      	ldrh	r2, [r2, #0]
 8014fc0:	4914      	ldr	r1, [pc, #80]	@ (8015014 <USB_EPSetStall+0x98>)
 8014fc2:	430a      	orrs	r2, r1
 8014fc4:	b292      	uxth	r2, r2
 8014fc6:	801a      	strh	r2, [r3, #0]
 8014fc8:	e01d      	b.n	8015006 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8014fca:	687a      	ldr	r2, [r7, #4]
 8014fcc:	683b      	ldr	r3, [r7, #0]
 8014fce:	781b      	ldrb	r3, [r3, #0]
 8014fd0:	009b      	lsls	r3, r3, #2
 8014fd2:	18d3      	adds	r3, r2, r3
 8014fd4:	881b      	ldrh	r3, [r3, #0]
 8014fd6:	b29a      	uxth	r2, r3
 8014fd8:	200e      	movs	r0, #14
 8014fda:	183b      	adds	r3, r7, r0
 8014fdc:	490e      	ldr	r1, [pc, #56]	@ (8015018 <USB_EPSetStall+0x9c>)
 8014fde:	400a      	ands	r2, r1
 8014fe0:	801a      	strh	r2, [r3, #0]
 8014fe2:	183b      	adds	r3, r7, r0
 8014fe4:	183a      	adds	r2, r7, r0
 8014fe6:	8812      	ldrh	r2, [r2, #0]
 8014fe8:	2180      	movs	r1, #128	@ 0x80
 8014fea:	0149      	lsls	r1, r1, #5
 8014fec:	404a      	eors	r2, r1
 8014fee:	801a      	strh	r2, [r3, #0]
 8014ff0:	687a      	ldr	r2, [r7, #4]
 8014ff2:	683b      	ldr	r3, [r7, #0]
 8014ff4:	781b      	ldrb	r3, [r3, #0]
 8014ff6:	009b      	lsls	r3, r3, #2
 8014ff8:	18d3      	adds	r3, r2, r3
 8014ffa:	183a      	adds	r2, r7, r0
 8014ffc:	8812      	ldrh	r2, [r2, #0]
 8014ffe:	4905      	ldr	r1, [pc, #20]	@ (8015014 <USB_EPSetStall+0x98>)
 8015000:	430a      	orrs	r2, r1
 8015002:	b292      	uxth	r2, r2
 8015004:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8015006:	2300      	movs	r3, #0
}
 8015008:	0018      	movs	r0, r3
 801500a:	46bd      	mov	sp, r7
 801500c:	b004      	add	sp, #16
 801500e:	bd80      	pop	{r7, pc}
 8015010:	ffff8fbf 	.word	0xffff8fbf
 8015014:	ffff8080 	.word	0xffff8080
 8015018:	ffffbf8f 	.word	0xffffbf8f

0801501c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801501c:	b580      	push	{r7, lr}
 801501e:	b086      	sub	sp, #24
 8015020:	af00      	add	r7, sp, #0
 8015022:	6078      	str	r0, [r7, #4]
 8015024:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8015026:	683b      	ldr	r3, [r7, #0]
 8015028:	7b1b      	ldrb	r3, [r3, #12]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d000      	beq.n	8015030 <USB_EPClearStall+0x14>
 801502e:	e095      	b.n	801515c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8015030:	683b      	ldr	r3, [r7, #0]
 8015032:	785b      	ldrb	r3, [r3, #1]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d046      	beq.n	80150c6 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8015038:	687a      	ldr	r2, [r7, #4]
 801503a:	683b      	ldr	r3, [r7, #0]
 801503c:	781b      	ldrb	r3, [r3, #0]
 801503e:	009b      	lsls	r3, r3, #2
 8015040:	18d2      	adds	r2, r2, r3
 8015042:	2110      	movs	r1, #16
 8015044:	187b      	adds	r3, r7, r1
 8015046:	8812      	ldrh	r2, [r2, #0]
 8015048:	801a      	strh	r2, [r3, #0]
 801504a:	187b      	adds	r3, r7, r1
 801504c:	881b      	ldrh	r3, [r3, #0]
 801504e:	2240      	movs	r2, #64	@ 0x40
 8015050:	4013      	ands	r3, r2
 8015052:	d016      	beq.n	8015082 <USB_EPClearStall+0x66>
 8015054:	687a      	ldr	r2, [r7, #4]
 8015056:	683b      	ldr	r3, [r7, #0]
 8015058:	781b      	ldrb	r3, [r3, #0]
 801505a:	009b      	lsls	r3, r3, #2
 801505c:	18d3      	adds	r3, r2, r3
 801505e:	881b      	ldrh	r3, [r3, #0]
 8015060:	b29a      	uxth	r2, r3
 8015062:	200e      	movs	r0, #14
 8015064:	183b      	adds	r3, r7, r0
 8015066:	4940      	ldr	r1, [pc, #256]	@ (8015168 <USB_EPClearStall+0x14c>)
 8015068:	400a      	ands	r2, r1
 801506a:	801a      	strh	r2, [r3, #0]
 801506c:	687a      	ldr	r2, [r7, #4]
 801506e:	683b      	ldr	r3, [r7, #0]
 8015070:	781b      	ldrb	r3, [r3, #0]
 8015072:	009b      	lsls	r3, r3, #2
 8015074:	18d3      	adds	r3, r2, r3
 8015076:	183a      	adds	r2, r7, r0
 8015078:	8812      	ldrh	r2, [r2, #0]
 801507a:	493c      	ldr	r1, [pc, #240]	@ (801516c <USB_EPClearStall+0x150>)
 801507c:	430a      	orrs	r2, r1
 801507e:	b292      	uxth	r2, r2
 8015080:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8015082:	683b      	ldr	r3, [r7, #0]
 8015084:	78db      	ldrb	r3, [r3, #3]
 8015086:	2b01      	cmp	r3, #1
 8015088:	d068      	beq.n	801515c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801508a:	687a      	ldr	r2, [r7, #4]
 801508c:	683b      	ldr	r3, [r7, #0]
 801508e:	781b      	ldrb	r3, [r3, #0]
 8015090:	009b      	lsls	r3, r3, #2
 8015092:	18d3      	adds	r3, r2, r3
 8015094:	881b      	ldrh	r3, [r3, #0]
 8015096:	b29a      	uxth	r2, r3
 8015098:	200c      	movs	r0, #12
 801509a:	183b      	adds	r3, r7, r0
 801509c:	4934      	ldr	r1, [pc, #208]	@ (8015170 <USB_EPClearStall+0x154>)
 801509e:	400a      	ands	r2, r1
 80150a0:	801a      	strh	r2, [r3, #0]
 80150a2:	183b      	adds	r3, r7, r0
 80150a4:	183a      	adds	r2, r7, r0
 80150a6:	8812      	ldrh	r2, [r2, #0]
 80150a8:	2120      	movs	r1, #32
 80150aa:	404a      	eors	r2, r1
 80150ac:	801a      	strh	r2, [r3, #0]
 80150ae:	687a      	ldr	r2, [r7, #4]
 80150b0:	683b      	ldr	r3, [r7, #0]
 80150b2:	781b      	ldrb	r3, [r3, #0]
 80150b4:	009b      	lsls	r3, r3, #2
 80150b6:	18d3      	adds	r3, r2, r3
 80150b8:	183a      	adds	r2, r7, r0
 80150ba:	8812      	ldrh	r2, [r2, #0]
 80150bc:	492d      	ldr	r1, [pc, #180]	@ (8015174 <USB_EPClearStall+0x158>)
 80150be:	430a      	orrs	r2, r1
 80150c0:	b292      	uxth	r2, r2
 80150c2:	801a      	strh	r2, [r3, #0]
 80150c4:	e04a      	b.n	801515c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80150c6:	687a      	ldr	r2, [r7, #4]
 80150c8:	683b      	ldr	r3, [r7, #0]
 80150ca:	781b      	ldrb	r3, [r3, #0]
 80150cc:	009b      	lsls	r3, r3, #2
 80150ce:	18d2      	adds	r2, r2, r3
 80150d0:	2116      	movs	r1, #22
 80150d2:	187b      	adds	r3, r7, r1
 80150d4:	8812      	ldrh	r2, [r2, #0]
 80150d6:	801a      	strh	r2, [r3, #0]
 80150d8:	187b      	adds	r3, r7, r1
 80150da:	881a      	ldrh	r2, [r3, #0]
 80150dc:	2380      	movs	r3, #128	@ 0x80
 80150de:	01db      	lsls	r3, r3, #7
 80150e0:	4013      	ands	r3, r2
 80150e2:	d016      	beq.n	8015112 <USB_EPClearStall+0xf6>
 80150e4:	687a      	ldr	r2, [r7, #4]
 80150e6:	683b      	ldr	r3, [r7, #0]
 80150e8:	781b      	ldrb	r3, [r3, #0]
 80150ea:	009b      	lsls	r3, r3, #2
 80150ec:	18d3      	adds	r3, r2, r3
 80150ee:	881b      	ldrh	r3, [r3, #0]
 80150f0:	b29a      	uxth	r2, r3
 80150f2:	2014      	movs	r0, #20
 80150f4:	183b      	adds	r3, r7, r0
 80150f6:	491c      	ldr	r1, [pc, #112]	@ (8015168 <USB_EPClearStall+0x14c>)
 80150f8:	400a      	ands	r2, r1
 80150fa:	801a      	strh	r2, [r3, #0]
 80150fc:	687a      	ldr	r2, [r7, #4]
 80150fe:	683b      	ldr	r3, [r7, #0]
 8015100:	781b      	ldrb	r3, [r3, #0]
 8015102:	009b      	lsls	r3, r3, #2
 8015104:	18d3      	adds	r3, r2, r3
 8015106:	183a      	adds	r2, r7, r0
 8015108:	8812      	ldrh	r2, [r2, #0]
 801510a:	491b      	ldr	r1, [pc, #108]	@ (8015178 <USB_EPClearStall+0x15c>)
 801510c:	430a      	orrs	r2, r1
 801510e:	b292      	uxth	r2, r2
 8015110:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8015112:	687a      	ldr	r2, [r7, #4]
 8015114:	683b      	ldr	r3, [r7, #0]
 8015116:	781b      	ldrb	r3, [r3, #0]
 8015118:	009b      	lsls	r3, r3, #2
 801511a:	18d3      	adds	r3, r2, r3
 801511c:	881b      	ldrh	r3, [r3, #0]
 801511e:	b29a      	uxth	r2, r3
 8015120:	2012      	movs	r0, #18
 8015122:	183b      	adds	r3, r7, r0
 8015124:	4915      	ldr	r1, [pc, #84]	@ (801517c <USB_EPClearStall+0x160>)
 8015126:	400a      	ands	r2, r1
 8015128:	801a      	strh	r2, [r3, #0]
 801512a:	183b      	adds	r3, r7, r0
 801512c:	183a      	adds	r2, r7, r0
 801512e:	8812      	ldrh	r2, [r2, #0]
 8015130:	2180      	movs	r1, #128	@ 0x80
 8015132:	0149      	lsls	r1, r1, #5
 8015134:	404a      	eors	r2, r1
 8015136:	801a      	strh	r2, [r3, #0]
 8015138:	183b      	adds	r3, r7, r0
 801513a:	183a      	adds	r2, r7, r0
 801513c:	8812      	ldrh	r2, [r2, #0]
 801513e:	2180      	movs	r1, #128	@ 0x80
 8015140:	0189      	lsls	r1, r1, #6
 8015142:	404a      	eors	r2, r1
 8015144:	801a      	strh	r2, [r3, #0]
 8015146:	687a      	ldr	r2, [r7, #4]
 8015148:	683b      	ldr	r3, [r7, #0]
 801514a:	781b      	ldrb	r3, [r3, #0]
 801514c:	009b      	lsls	r3, r3, #2
 801514e:	18d3      	adds	r3, r2, r3
 8015150:	183a      	adds	r2, r7, r0
 8015152:	8812      	ldrh	r2, [r2, #0]
 8015154:	4907      	ldr	r1, [pc, #28]	@ (8015174 <USB_EPClearStall+0x158>)
 8015156:	430a      	orrs	r2, r1
 8015158:	b292      	uxth	r2, r2
 801515a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801515c:	2300      	movs	r3, #0
}
 801515e:	0018      	movs	r0, r3
 8015160:	46bd      	mov	sp, r7
 8015162:	b006      	add	sp, #24
 8015164:	bd80      	pop	{r7, pc}
 8015166:	46c0      	nop			@ (mov r8, r8)
 8015168:	ffff8f8f 	.word	0xffff8f8f
 801516c:	ffff80c0 	.word	0xffff80c0
 8015170:	ffff8fbf 	.word	0xffff8fbf
 8015174:	ffff8080 	.word	0xffff8080
 8015178:	ffffc080 	.word	0xffffc080
 801517c:	ffffbf8f 	.word	0xffffbf8f

08015180 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8015180:	b580      	push	{r7, lr}
 8015182:	b082      	sub	sp, #8
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
 8015188:	000a      	movs	r2, r1
 801518a:	1cfb      	adds	r3, r7, #3
 801518c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801518e:	1cfb      	adds	r3, r7, #3
 8015190:	781b      	ldrb	r3, [r3, #0]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d103      	bne.n	801519e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	224c      	movs	r2, #76	@ 0x4c
 801519a:	2180      	movs	r1, #128	@ 0x80
 801519c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801519e:	2300      	movs	r3, #0
}
 80151a0:	0018      	movs	r0, r3
 80151a2:	46bd      	mov	sp, r7
 80151a4:	b002      	add	sp, #8
 80151a6:	bd80      	pop	{r7, pc}

080151a8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b082      	sub	sp, #8
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	2258      	movs	r2, #88	@ 0x58
 80151b4:	5a9b      	ldrh	r3, [r3, r2]
 80151b6:	b29b      	uxth	r3, r3
 80151b8:	4a05      	ldr	r2, [pc, #20]	@ (80151d0 <USB_DevConnect+0x28>)
 80151ba:	4313      	orrs	r3, r2
 80151bc:	b299      	uxth	r1, r3
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	2258      	movs	r2, #88	@ 0x58
 80151c2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80151c4:	2300      	movs	r3, #0
}
 80151c6:	0018      	movs	r0, r3
 80151c8:	46bd      	mov	sp, r7
 80151ca:	b002      	add	sp, #8
 80151cc:	bd80      	pop	{r7, pc}
 80151ce:	46c0      	nop			@ (mov r8, r8)
 80151d0:	ffff8000 	.word	0xffff8000

080151d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b084      	sub	sp, #16
 80151d8:	af00      	add	r7, sp, #0
 80151da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	2244      	movs	r2, #68	@ 0x44
 80151e0:	5a9b      	ldrh	r3, [r3, r2]
 80151e2:	b29b      	uxth	r3, r3
 80151e4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80151e6:	68fb      	ldr	r3, [r7, #12]
}
 80151e8:	0018      	movs	r0, r3
 80151ea:	46bd      	mov	sp, r7
 80151ec:	b004      	add	sp, #16
 80151ee:	bd80      	pop	{r7, pc}

080151f0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80151f0:	b580      	push	{r7, lr}
 80151f2:	b08a      	sub	sp, #40	@ 0x28
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	60f8      	str	r0, [r7, #12]
 80151f8:	60b9      	str	r1, [r7, #8]
 80151fa:	0019      	movs	r1, r3
 80151fc:	1dbb      	adds	r3, r7, #6
 80151fe:	801a      	strh	r2, [r3, #0]
 8015200:	1d3b      	adds	r3, r7, #4
 8015202:	1c0a      	adds	r2, r1, #0
 8015204:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8015206:	1d3b      	adds	r3, r7, #4
 8015208:	881b      	ldrh	r3, [r3, #0]
 801520a:	3301      	adds	r3, #1
 801520c:	085b      	lsrs	r3, r3, #1
 801520e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8015214:	68bb      	ldr	r3, [r7, #8]
 8015216:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8015218:	1dbb      	adds	r3, r7, #6
 801521a:	881a      	ldrh	r2, [r3, #0]
 801521c:	697b      	ldr	r3, [r7, #20]
 801521e:	18d3      	adds	r3, r2, r3
 8015220:	2280      	movs	r2, #128	@ 0x80
 8015222:	00d2      	lsls	r2, r2, #3
 8015224:	4694      	mov	ip, r2
 8015226:	4463      	add	r3, ip
 8015228:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801522a:	69bb      	ldr	r3, [r7, #24]
 801522c:	627b      	str	r3, [r7, #36]	@ 0x24
 801522e:	e020      	b.n	8015272 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8015230:	69fb      	ldr	r3, [r7, #28]
 8015232:	781a      	ldrb	r2, [r3, #0]
 8015234:	2112      	movs	r1, #18
 8015236:	187b      	adds	r3, r7, r1
 8015238:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801523a:	69fb      	ldr	r3, [r7, #28]
 801523c:	3301      	adds	r3, #1
 801523e:	781b      	ldrb	r3, [r3, #0]
 8015240:	021b      	lsls	r3, r3, #8
 8015242:	b21a      	sxth	r2, r3
 8015244:	187b      	adds	r3, r7, r1
 8015246:	2000      	movs	r0, #0
 8015248:	5e1b      	ldrsh	r3, [r3, r0]
 801524a:	4313      	orrs	r3, r2
 801524c:	b21a      	sxth	r2, r3
 801524e:	187b      	adds	r3, r7, r1
 8015250:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8015252:	6a3b      	ldr	r3, [r7, #32]
 8015254:	187a      	adds	r2, r7, r1
 8015256:	8812      	ldrh	r2, [r2, #0]
 8015258:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801525a:	6a3b      	ldr	r3, [r7, #32]
 801525c:	3302      	adds	r3, #2
 801525e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8015260:	69fb      	ldr	r3, [r7, #28]
 8015262:	3301      	adds	r3, #1
 8015264:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8015266:	69fb      	ldr	r3, [r7, #28]
 8015268:	3301      	adds	r3, #1
 801526a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801526c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801526e:	3b01      	subs	r3, #1
 8015270:	627b      	str	r3, [r7, #36]	@ 0x24
 8015272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015274:	2b00      	cmp	r3, #0
 8015276:	d1db      	bne.n	8015230 <USB_WritePMA+0x40>
  }
}
 8015278:	46c0      	nop			@ (mov r8, r8)
 801527a:	46c0      	nop			@ (mov r8, r8)
 801527c:	46bd      	mov	sp, r7
 801527e:	b00a      	add	sp, #40	@ 0x28
 8015280:	bd80      	pop	{r7, pc}

08015282 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8015282:	b580      	push	{r7, lr}
 8015284:	b08a      	sub	sp, #40	@ 0x28
 8015286:	af00      	add	r7, sp, #0
 8015288:	60f8      	str	r0, [r7, #12]
 801528a:	60b9      	str	r1, [r7, #8]
 801528c:	0019      	movs	r1, r3
 801528e:	1dbb      	adds	r3, r7, #6
 8015290:	801a      	strh	r2, [r3, #0]
 8015292:	1d3b      	adds	r3, r7, #4
 8015294:	1c0a      	adds	r2, r1, #0
 8015296:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8015298:	1d3b      	adds	r3, r7, #4
 801529a:	881b      	ldrh	r3, [r3, #0]
 801529c:	085b      	lsrs	r3, r3, #1
 801529e:	b29b      	uxth	r3, r3
 80152a0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80152a6:	68bb      	ldr	r3, [r7, #8]
 80152a8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80152aa:	1dbb      	adds	r3, r7, #6
 80152ac:	881a      	ldrh	r2, [r3, #0]
 80152ae:	697b      	ldr	r3, [r7, #20]
 80152b0:	18d3      	adds	r3, r2, r3
 80152b2:	2280      	movs	r2, #128	@ 0x80
 80152b4:	00d2      	lsls	r2, r2, #3
 80152b6:	4694      	mov	ip, r2
 80152b8:	4463      	add	r3, ip
 80152ba:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80152bc:	69bb      	ldr	r3, [r7, #24]
 80152be:	627b      	str	r3, [r7, #36]	@ 0x24
 80152c0:	e018      	b.n	80152f4 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80152c2:	6a3b      	ldr	r3, [r7, #32]
 80152c4:	881b      	ldrh	r3, [r3, #0]
 80152c6:	b29b      	uxth	r3, r3
 80152c8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80152ca:	6a3b      	ldr	r3, [r7, #32]
 80152cc:	3302      	adds	r3, #2
 80152ce:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80152d0:	693b      	ldr	r3, [r7, #16]
 80152d2:	b2da      	uxtb	r2, r3
 80152d4:	69fb      	ldr	r3, [r7, #28]
 80152d6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80152d8:	69fb      	ldr	r3, [r7, #28]
 80152da:	3301      	adds	r3, #1
 80152dc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80152de:	693b      	ldr	r3, [r7, #16]
 80152e0:	0a1b      	lsrs	r3, r3, #8
 80152e2:	b2da      	uxtb	r2, r3
 80152e4:	69fb      	ldr	r3, [r7, #28]
 80152e6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80152e8:	69fb      	ldr	r3, [r7, #28]
 80152ea:	3301      	adds	r3, #1
 80152ec:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80152ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152f0:	3b01      	subs	r3, #1
 80152f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80152f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d1e3      	bne.n	80152c2 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80152fa:	1d3b      	adds	r3, r7, #4
 80152fc:	881b      	ldrh	r3, [r3, #0]
 80152fe:	2201      	movs	r2, #1
 8015300:	4013      	ands	r3, r2
 8015302:	b29b      	uxth	r3, r3
 8015304:	2b00      	cmp	r3, #0
 8015306:	d007      	beq.n	8015318 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8015308:	6a3b      	ldr	r3, [r7, #32]
 801530a:	881b      	ldrh	r3, [r3, #0]
 801530c:	b29b      	uxth	r3, r3
 801530e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8015310:	693b      	ldr	r3, [r7, #16]
 8015312:	b2da      	uxtb	r2, r3
 8015314:	69fb      	ldr	r3, [r7, #28]
 8015316:	701a      	strb	r2, [r3, #0]
  }
}
 8015318:	46c0      	nop			@ (mov r8, r8)
 801531a:	46bd      	mov	sp, r7
 801531c:	b00a      	add	sp, #40	@ 0x28
 801531e:	bd80      	pop	{r7, pc}

08015320 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015320:	b580      	push	{r7, lr}
 8015322:	b084      	sub	sp, #16
 8015324:	af00      	add	r7, sp, #0
 8015326:	6078      	str	r0, [r7, #4]
 8015328:	000a      	movs	r2, r1
 801532a:	1cfb      	adds	r3, r7, #3
 801532c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801532e:	230f      	movs	r3, #15
 8015330:	18fb      	adds	r3, r7, r3
 8015332:	2200      	movs	r2, #0
 8015334:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	7c1b      	ldrb	r3, [r3, #16]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d116      	bne.n	801536c <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801533e:	2380      	movs	r3, #128	@ 0x80
 8015340:	009b      	lsls	r3, r3, #2
 8015342:	6878      	ldr	r0, [r7, #4]
 8015344:	2202      	movs	r2, #2
 8015346:	2181      	movs	r1, #129	@ 0x81
 8015348:	f002 f8eb 	bl	8017522 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	2201      	movs	r2, #1
 8015350:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8015352:	2380      	movs	r3, #128	@ 0x80
 8015354:	009b      	lsls	r3, r3, #2
 8015356:	6878      	ldr	r0, [r7, #4]
 8015358:	2202      	movs	r2, #2
 801535a:	2101      	movs	r1, #1
 801535c:	f002 f8e1 	bl	8017522 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8015360:	687a      	ldr	r2, [r7, #4]
 8015362:	23b6      	movs	r3, #182	@ 0xb6
 8015364:	005b      	lsls	r3, r3, #1
 8015366:	2101      	movs	r1, #1
 8015368:	50d1      	str	r1, [r2, r3]
 801536a:	e013      	b.n	8015394 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801536c:	6878      	ldr	r0, [r7, #4]
 801536e:	2340      	movs	r3, #64	@ 0x40
 8015370:	2202      	movs	r2, #2
 8015372:	2181      	movs	r1, #129	@ 0x81
 8015374:	f002 f8d5 	bl	8017522 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	2201      	movs	r2, #1
 801537c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801537e:	6878      	ldr	r0, [r7, #4]
 8015380:	2340      	movs	r3, #64	@ 0x40
 8015382:	2202      	movs	r2, #2
 8015384:	2101      	movs	r1, #1
 8015386:	f002 f8cc 	bl	8017522 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801538a:	687a      	ldr	r2, [r7, #4]
 801538c:	23b6      	movs	r3, #182	@ 0xb6
 801538e:	005b      	lsls	r3, r3, #1
 8015390:	2101      	movs	r1, #1
 8015392:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015394:	6878      	ldr	r0, [r7, #4]
 8015396:	2308      	movs	r3, #8
 8015398:	2203      	movs	r2, #3
 801539a:	2182      	movs	r1, #130	@ 0x82
 801539c:	f002 f8c1 	bl	8017522 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	2201      	movs	r2, #1
 80153a4:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80153a6:	2387      	movs	r3, #135	@ 0x87
 80153a8:	009b      	lsls	r3, r3, #2
 80153aa:	0018      	movs	r0, r3
 80153ac:	f002 fa52 	bl	8017854 <USBD_static_malloc>
 80153b0:	0001      	movs	r1, r0
 80153b2:	687a      	ldr	r2, [r7, #4]
 80153b4:	23ae      	movs	r3, #174	@ 0xae
 80153b6:	009b      	lsls	r3, r3, #2
 80153b8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80153ba:	687a      	ldr	r2, [r7, #4]
 80153bc:	23ae      	movs	r3, #174	@ 0xae
 80153be:	009b      	lsls	r3, r3, #2
 80153c0:	58d3      	ldr	r3, [r2, r3]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d104      	bne.n	80153d0 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 80153c6:	230f      	movs	r3, #15
 80153c8:	18fb      	adds	r3, r7, r3
 80153ca:	2201      	movs	r2, #1
 80153cc:	701a      	strb	r2, [r3, #0]
 80153ce:	e02c      	b.n	801542a <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80153d0:	687a      	ldr	r2, [r7, #4]
 80153d2:	23ae      	movs	r3, #174	@ 0xae
 80153d4:	009b      	lsls	r3, r3, #2
 80153d6:	58d3      	ldr	r3, [r2, r3]
 80153d8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80153da:	687a      	ldr	r2, [r7, #4]
 80153dc:	23af      	movs	r3, #175	@ 0xaf
 80153de:	009b      	lsls	r3, r3, #2
 80153e0:	58d3      	ldr	r3, [r2, r3]
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80153e6:	68ba      	ldr	r2, [r7, #8]
 80153e8:	2385      	movs	r3, #133	@ 0x85
 80153ea:	009b      	lsls	r3, r3, #2
 80153ec:	2100      	movs	r1, #0
 80153ee:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 80153f0:	68ba      	ldr	r2, [r7, #8]
 80153f2:	2386      	movs	r3, #134	@ 0x86
 80153f4:	009b      	lsls	r3, r3, #2
 80153f6:	2100      	movs	r1, #0
 80153f8:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	7c1b      	ldrb	r3, [r3, #16]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d10a      	bne.n	8015418 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8015402:	68ba      	ldr	r2, [r7, #8]
 8015404:	2381      	movs	r3, #129	@ 0x81
 8015406:	009b      	lsls	r3, r3, #2
 8015408:	58d2      	ldr	r2, [r2, r3]
 801540a:	2380      	movs	r3, #128	@ 0x80
 801540c:	009b      	lsls	r3, r3, #2
 801540e:	6878      	ldr	r0, [r7, #4]
 8015410:	2101      	movs	r1, #1
 8015412:	f002 f9d1 	bl	80177b8 <USBD_LL_PrepareReceive>
 8015416:	e008      	b.n	801542a <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8015418:	68ba      	ldr	r2, [r7, #8]
 801541a:	2381      	movs	r3, #129	@ 0x81
 801541c:	009b      	lsls	r3, r3, #2
 801541e:	58d2      	ldr	r2, [r2, r3]
 8015420:	6878      	ldr	r0, [r7, #4]
 8015422:	2340      	movs	r3, #64	@ 0x40
 8015424:	2101      	movs	r1, #1
 8015426:	f002 f9c7 	bl	80177b8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801542a:	230f      	movs	r3, #15
 801542c:	18fb      	adds	r3, r7, r3
 801542e:	781b      	ldrb	r3, [r3, #0]
}
 8015430:	0018      	movs	r0, r3
 8015432:	46bd      	mov	sp, r7
 8015434:	b004      	add	sp, #16
 8015436:	bd80      	pop	{r7, pc}

08015438 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b084      	sub	sp, #16
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]
 8015440:	000a      	movs	r2, r1
 8015442:	1cfb      	adds	r3, r7, #3
 8015444:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8015446:	230f      	movs	r3, #15
 8015448:	18fb      	adds	r3, r7, r3
 801544a:	2200      	movs	r2, #0
 801544c:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	2181      	movs	r1, #129	@ 0x81
 8015452:	0018      	movs	r0, r3
 8015454:	f002 f89c 	bl	8017590 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	2200      	movs	r2, #0
 801545c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	2101      	movs	r1, #1
 8015462:	0018      	movs	r0, r3
 8015464:	f002 f894 	bl	8017590 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8015468:	687a      	ldr	r2, [r7, #4]
 801546a:	23b6      	movs	r3, #182	@ 0xb6
 801546c:	005b      	lsls	r3, r3, #1
 801546e:	2100      	movs	r1, #0
 8015470:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	2182      	movs	r1, #130	@ 0x82
 8015476:	0018      	movs	r0, r3
 8015478:	f002 f88a 	bl	8017590 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	2200      	movs	r2, #0
 8015480:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8015482:	687a      	ldr	r2, [r7, #4]
 8015484:	23ae      	movs	r3, #174	@ 0xae
 8015486:	009b      	lsls	r3, r3, #2
 8015488:	58d3      	ldr	r3, [r2, r3]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d011      	beq.n	80154b2 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801548e:	687a      	ldr	r2, [r7, #4]
 8015490:	23af      	movs	r3, #175	@ 0xaf
 8015492:	009b      	lsls	r3, r3, #2
 8015494:	58d3      	ldr	r3, [r2, r3]
 8015496:	685b      	ldr	r3, [r3, #4]
 8015498:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801549a:	687a      	ldr	r2, [r7, #4]
 801549c:	23ae      	movs	r3, #174	@ 0xae
 801549e:	009b      	lsls	r3, r3, #2
 80154a0:	58d3      	ldr	r3, [r2, r3]
 80154a2:	0018      	movs	r0, r3
 80154a4:	f002 f9e2 	bl	801786c <USBD_static_free>
    pdev->pClassData = NULL;
 80154a8:	687a      	ldr	r2, [r7, #4]
 80154aa:	23ae      	movs	r3, #174	@ 0xae
 80154ac:	009b      	lsls	r3, r3, #2
 80154ae:	2100      	movs	r1, #0
 80154b0:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 80154b2:	230f      	movs	r3, #15
 80154b4:	18fb      	adds	r3, r7, r3
 80154b6:	781b      	ldrb	r3, [r3, #0]
}
 80154b8:	0018      	movs	r0, r3
 80154ba:	46bd      	mov	sp, r7
 80154bc:	b004      	add	sp, #16
 80154be:	bd80      	pop	{r7, pc}

080154c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b086      	sub	sp, #24
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	6078      	str	r0, [r7, #4]
 80154c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80154ca:	687a      	ldr	r2, [r7, #4]
 80154cc:	23ae      	movs	r3, #174	@ 0xae
 80154ce:	009b      	lsls	r3, r3, #2
 80154d0:	58d3      	ldr	r3, [r2, r3]
 80154d2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80154d4:	230f      	movs	r3, #15
 80154d6:	18fb      	adds	r3, r7, r3
 80154d8:	2200      	movs	r2, #0
 80154da:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 80154dc:	230c      	movs	r3, #12
 80154de:	18fb      	adds	r3, r7, r3
 80154e0:	2200      	movs	r2, #0
 80154e2:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 80154e4:	2317      	movs	r3, #23
 80154e6:	18fb      	adds	r3, r7, r3
 80154e8:	2200      	movs	r2, #0
 80154ea:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80154ec:	683b      	ldr	r3, [r7, #0]
 80154ee:	781b      	ldrb	r3, [r3, #0]
 80154f0:	001a      	movs	r2, r3
 80154f2:	2360      	movs	r3, #96	@ 0x60
 80154f4:	4013      	ands	r3, r2
 80154f6:	d03d      	beq.n	8015574 <USBD_CDC_Setup+0xb4>
 80154f8:	2b20      	cmp	r3, #32
 80154fa:	d000      	beq.n	80154fe <USBD_CDC_Setup+0x3e>
 80154fc:	e094      	b.n	8015628 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80154fe:	683b      	ldr	r3, [r7, #0]
 8015500:	88db      	ldrh	r3, [r3, #6]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d02b      	beq.n	801555e <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8015506:	683b      	ldr	r3, [r7, #0]
 8015508:	781b      	ldrb	r3, [r3, #0]
 801550a:	b25b      	sxtb	r3, r3
 801550c:	2b00      	cmp	r3, #0
 801550e:	da12      	bge.n	8015536 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8015510:	687a      	ldr	r2, [r7, #4]
 8015512:	23af      	movs	r3, #175	@ 0xaf
 8015514:	009b      	lsls	r3, r3, #2
 8015516:	58d3      	ldr	r3, [r2, r3]
 8015518:	689b      	ldr	r3, [r3, #8]
 801551a:	683a      	ldr	r2, [r7, #0]
 801551c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801551e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8015520:	683a      	ldr	r2, [r7, #0]
 8015522:	88d2      	ldrh	r2, [r2, #6]
 8015524:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8015526:	6939      	ldr	r1, [r7, #16]
 8015528:	683b      	ldr	r3, [r7, #0]
 801552a:	88da      	ldrh	r2, [r3, #6]
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	0018      	movs	r0, r3
 8015530:	f001 fbaf 	bl	8016c92 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8015534:	e083      	b.n	801563e <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8015536:	683b      	ldr	r3, [r7, #0]
 8015538:	7859      	ldrb	r1, [r3, #1]
 801553a:	693a      	ldr	r2, [r7, #16]
 801553c:	2380      	movs	r3, #128	@ 0x80
 801553e:	009b      	lsls	r3, r3, #2
 8015540:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8015542:	683b      	ldr	r3, [r7, #0]
 8015544:	88db      	ldrh	r3, [r3, #6]
 8015546:	b2d9      	uxtb	r1, r3
 8015548:	693b      	ldr	r3, [r7, #16]
 801554a:	4a40      	ldr	r2, [pc, #256]	@ (801564c <USBD_CDC_Setup+0x18c>)
 801554c:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801554e:	6939      	ldr	r1, [r7, #16]
 8015550:	683b      	ldr	r3, [r7, #0]
 8015552:	88da      	ldrh	r2, [r3, #6]
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	0018      	movs	r0, r3
 8015558:	f001 fbce 	bl	8016cf8 <USBD_CtlPrepareRx>
      break;
 801555c:	e06f      	b.n	801563e <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801555e:	687a      	ldr	r2, [r7, #4]
 8015560:	23af      	movs	r3, #175	@ 0xaf
 8015562:	009b      	lsls	r3, r3, #2
 8015564:	58d3      	ldr	r3, [r2, r3]
 8015566:	689b      	ldr	r3, [r3, #8]
 8015568:	683a      	ldr	r2, [r7, #0]
 801556a:	7850      	ldrb	r0, [r2, #1]
 801556c:	6839      	ldr	r1, [r7, #0]
 801556e:	2200      	movs	r2, #0
 8015570:	4798      	blx	r3
      break;
 8015572:	e064      	b.n	801563e <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015574:	683b      	ldr	r3, [r7, #0]
 8015576:	785b      	ldrb	r3, [r3, #1]
 8015578:	2b0b      	cmp	r3, #11
 801557a:	d037      	beq.n	80155ec <USBD_CDC_Setup+0x12c>
 801557c:	dc47      	bgt.n	801560e <USBD_CDC_Setup+0x14e>
 801557e:	2b00      	cmp	r3, #0
 8015580:	d002      	beq.n	8015588 <USBD_CDC_Setup+0xc8>
 8015582:	2b0a      	cmp	r3, #10
 8015584:	d019      	beq.n	80155ba <USBD_CDC_Setup+0xfa>
 8015586:	e042      	b.n	801560e <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015588:	687a      	ldr	r2, [r7, #4]
 801558a:	23a7      	movs	r3, #167	@ 0xa7
 801558c:	009b      	lsls	r3, r3, #2
 801558e:	5cd3      	ldrb	r3, [r2, r3]
 8015590:	2b03      	cmp	r3, #3
 8015592:	d107      	bne.n	80155a4 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8015594:	230c      	movs	r3, #12
 8015596:	18f9      	adds	r1, r7, r3
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	2202      	movs	r2, #2
 801559c:	0018      	movs	r0, r3
 801559e:	f001 fb78 	bl	8016c92 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80155a2:	e040      	b.n	8015626 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80155a4:	683a      	ldr	r2, [r7, #0]
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	0011      	movs	r1, r2
 80155aa:	0018      	movs	r0, r3
 80155ac:	f001 faf3 	bl	8016b96 <USBD_CtlError>
            ret = USBD_FAIL;
 80155b0:	2317      	movs	r3, #23
 80155b2:	18fb      	adds	r3, r7, r3
 80155b4:	2202      	movs	r2, #2
 80155b6:	701a      	strb	r2, [r3, #0]
          break;
 80155b8:	e035      	b.n	8015626 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155ba:	687a      	ldr	r2, [r7, #4]
 80155bc:	23a7      	movs	r3, #167	@ 0xa7
 80155be:	009b      	lsls	r3, r3, #2
 80155c0:	5cd3      	ldrb	r3, [r2, r3]
 80155c2:	2b03      	cmp	r3, #3
 80155c4:	d107      	bne.n	80155d6 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80155c6:	230f      	movs	r3, #15
 80155c8:	18f9      	adds	r1, r7, r3
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	2201      	movs	r2, #1
 80155ce:	0018      	movs	r0, r3
 80155d0:	f001 fb5f 	bl	8016c92 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80155d4:	e027      	b.n	8015626 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80155d6:	683a      	ldr	r2, [r7, #0]
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	0011      	movs	r1, r2
 80155dc:	0018      	movs	r0, r3
 80155de:	f001 fada 	bl	8016b96 <USBD_CtlError>
            ret = USBD_FAIL;
 80155e2:	2317      	movs	r3, #23
 80155e4:	18fb      	adds	r3, r7, r3
 80155e6:	2202      	movs	r2, #2
 80155e8:	701a      	strb	r2, [r3, #0]
          break;
 80155ea:	e01c      	b.n	8015626 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80155ec:	687a      	ldr	r2, [r7, #4]
 80155ee:	23a7      	movs	r3, #167	@ 0xa7
 80155f0:	009b      	lsls	r3, r3, #2
 80155f2:	5cd3      	ldrb	r3, [r2, r3]
 80155f4:	2b03      	cmp	r3, #3
 80155f6:	d015      	beq.n	8015624 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 80155f8:	683a      	ldr	r2, [r7, #0]
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	0011      	movs	r1, r2
 80155fe:	0018      	movs	r0, r3
 8015600:	f001 fac9 	bl	8016b96 <USBD_CtlError>
            ret = USBD_FAIL;
 8015604:	2317      	movs	r3, #23
 8015606:	18fb      	adds	r3, r7, r3
 8015608:	2202      	movs	r2, #2
 801560a:	701a      	strb	r2, [r3, #0]
          }
          break;
 801560c:	e00a      	b.n	8015624 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801560e:	683a      	ldr	r2, [r7, #0]
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	0011      	movs	r1, r2
 8015614:	0018      	movs	r0, r3
 8015616:	f001 fabe 	bl	8016b96 <USBD_CtlError>
          ret = USBD_FAIL;
 801561a:	2317      	movs	r3, #23
 801561c:	18fb      	adds	r3, r7, r3
 801561e:	2202      	movs	r2, #2
 8015620:	701a      	strb	r2, [r3, #0]
          break;
 8015622:	e000      	b.n	8015626 <USBD_CDC_Setup+0x166>
          break;
 8015624:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8015626:	e00a      	b.n	801563e <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8015628:	683a      	ldr	r2, [r7, #0]
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	0011      	movs	r1, r2
 801562e:	0018      	movs	r0, r3
 8015630:	f001 fab1 	bl	8016b96 <USBD_CtlError>
      ret = USBD_FAIL;
 8015634:	2317      	movs	r3, #23
 8015636:	18fb      	adds	r3, r7, r3
 8015638:	2202      	movs	r2, #2
 801563a:	701a      	strb	r2, [r3, #0]
      break;
 801563c:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801563e:	2317      	movs	r3, #23
 8015640:	18fb      	adds	r3, r7, r3
 8015642:	781b      	ldrb	r3, [r3, #0]
}
 8015644:	0018      	movs	r0, r3
 8015646:	46bd      	mov	sp, r7
 8015648:	b006      	add	sp, #24
 801564a:	bd80      	pop	{r7, pc}
 801564c:	00000201 	.word	0x00000201

08015650 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015650:	b580      	push	{r7, lr}
 8015652:	b084      	sub	sp, #16
 8015654:	af00      	add	r7, sp, #0
 8015656:	6078      	str	r0, [r7, #4]
 8015658:	000a      	movs	r2, r1
 801565a:	1cfb      	adds	r3, r7, #3
 801565c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801565e:	687a      	ldr	r2, [r7, #4]
 8015660:	23ae      	movs	r3, #174	@ 0xae
 8015662:	009b      	lsls	r3, r3, #2
 8015664:	58d3      	ldr	r3, [r2, r3]
 8015666:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8015668:	687a      	ldr	r2, [r7, #4]
 801566a:	23b0      	movs	r3, #176	@ 0xb0
 801566c:	009b      	lsls	r3, r3, #2
 801566e:	58d3      	ldr	r3, [r2, r3]
 8015670:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8015672:	687a      	ldr	r2, [r7, #4]
 8015674:	23ae      	movs	r3, #174	@ 0xae
 8015676:	009b      	lsls	r3, r3, #2
 8015678:	58d3      	ldr	r3, [r2, r3]
 801567a:	2b00      	cmp	r3, #0
 801567c:	d03e      	beq.n	80156fc <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801567e:	1cfb      	adds	r3, r7, #3
 8015680:	781a      	ldrb	r2, [r3, #0]
 8015682:	6879      	ldr	r1, [r7, #4]
 8015684:	0013      	movs	r3, r2
 8015686:	009b      	lsls	r3, r3, #2
 8015688:	189b      	adds	r3, r3, r2
 801568a:	009b      	lsls	r3, r3, #2
 801568c:	18cb      	adds	r3, r1, r3
 801568e:	331c      	adds	r3, #28
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d02b      	beq.n	80156ee <USBD_CDC_DataIn+0x9e>
 8015696:	1cfb      	adds	r3, r7, #3
 8015698:	781a      	ldrb	r2, [r3, #0]
 801569a:	6879      	ldr	r1, [r7, #4]
 801569c:	0013      	movs	r3, r2
 801569e:	009b      	lsls	r3, r3, #2
 80156a0:	189b      	adds	r3, r3, r2
 80156a2:	009b      	lsls	r3, r3, #2
 80156a4:	18cb      	adds	r3, r1, r3
 80156a6:	331c      	adds	r3, #28
 80156a8:	6818      	ldr	r0, [r3, #0]
 80156aa:	1cfb      	adds	r3, r7, #3
 80156ac:	781a      	ldrb	r2, [r3, #0]
 80156ae:	68b9      	ldr	r1, [r7, #8]
 80156b0:	0013      	movs	r3, r2
 80156b2:	009b      	lsls	r3, r3, #2
 80156b4:	189b      	adds	r3, r3, r2
 80156b6:	00db      	lsls	r3, r3, #3
 80156b8:	18cb      	adds	r3, r1, r3
 80156ba:	3338      	adds	r3, #56	@ 0x38
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	0019      	movs	r1, r3
 80156c0:	f7ea fdc4 	bl	800024c <__aeabi_uidivmod>
 80156c4:	1e0b      	subs	r3, r1, #0
 80156c6:	d112      	bne.n	80156ee <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80156c8:	1cfb      	adds	r3, r7, #3
 80156ca:	781a      	ldrb	r2, [r3, #0]
 80156cc:	6879      	ldr	r1, [r7, #4]
 80156ce:	0013      	movs	r3, r2
 80156d0:	009b      	lsls	r3, r3, #2
 80156d2:	189b      	adds	r3, r3, r2
 80156d4:	009b      	lsls	r3, r3, #2
 80156d6:	18cb      	adds	r3, r1, r3
 80156d8:	331c      	adds	r3, #28
 80156da:	2200      	movs	r2, #0
 80156dc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80156de:	1cfb      	adds	r3, r7, #3
 80156e0:	7819      	ldrb	r1, [r3, #0]
 80156e2:	6878      	ldr	r0, [r7, #4]
 80156e4:	2300      	movs	r3, #0
 80156e6:	2200      	movs	r2, #0
 80156e8:	f002 f82f 	bl	801774a <USBD_LL_Transmit>
 80156ec:	e004      	b.n	80156f8 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 80156ee:	68fa      	ldr	r2, [r7, #12]
 80156f0:	2385      	movs	r3, #133	@ 0x85
 80156f2:	009b      	lsls	r3, r3, #2
 80156f4:	2100      	movs	r1, #0
 80156f6:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 80156f8:	2300      	movs	r3, #0
 80156fa:	e000      	b.n	80156fe <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 80156fc:	2302      	movs	r3, #2
  }
}
 80156fe:	0018      	movs	r0, r3
 8015700:	46bd      	mov	sp, r7
 8015702:	b004      	add	sp, #16
 8015704:	bd80      	pop	{r7, pc}

08015706 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015706:	b580      	push	{r7, lr}
 8015708:	b084      	sub	sp, #16
 801570a:	af00      	add	r7, sp, #0
 801570c:	6078      	str	r0, [r7, #4]
 801570e:	000a      	movs	r2, r1
 8015710:	1cfb      	adds	r3, r7, #3
 8015712:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015714:	687a      	ldr	r2, [r7, #4]
 8015716:	23ae      	movs	r3, #174	@ 0xae
 8015718:	009b      	lsls	r3, r3, #2
 801571a:	58d3      	ldr	r3, [r2, r3]
 801571c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801571e:	1cfb      	adds	r3, r7, #3
 8015720:	781a      	ldrb	r2, [r3, #0]
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	0011      	movs	r1, r2
 8015726:	0018      	movs	r0, r3
 8015728:	f002 f87d 	bl	8017826 <USBD_LL_GetRxDataSize>
 801572c:	0001      	movs	r1, r0
 801572e:	68fa      	ldr	r2, [r7, #12]
 8015730:	2383      	movs	r3, #131	@ 0x83
 8015732:	009b      	lsls	r3, r3, #2
 8015734:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8015736:	687a      	ldr	r2, [r7, #4]
 8015738:	23ae      	movs	r3, #174	@ 0xae
 801573a:	009b      	lsls	r3, r3, #2
 801573c:	58d3      	ldr	r3, [r2, r3]
 801573e:	2b00      	cmp	r3, #0
 8015740:	d011      	beq.n	8015766 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015742:	687a      	ldr	r2, [r7, #4]
 8015744:	23af      	movs	r3, #175	@ 0xaf
 8015746:	009b      	lsls	r3, r3, #2
 8015748:	58d3      	ldr	r3, [r2, r3]
 801574a:	68da      	ldr	r2, [r3, #12]
 801574c:	68f9      	ldr	r1, [r7, #12]
 801574e:	2381      	movs	r3, #129	@ 0x81
 8015750:	009b      	lsls	r3, r3, #2
 8015752:	58c8      	ldr	r0, [r1, r3]
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	2183      	movs	r1, #131	@ 0x83
 8015758:	0089      	lsls	r1, r1, #2
 801575a:	468c      	mov	ip, r1
 801575c:	4463      	add	r3, ip
 801575e:	0019      	movs	r1, r3
 8015760:	4790      	blx	r2

    return USBD_OK;
 8015762:	2300      	movs	r3, #0
 8015764:	e000      	b.n	8015768 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8015766:	2302      	movs	r3, #2
  }
}
 8015768:	0018      	movs	r0, r3
 801576a:	46bd      	mov	sp, r7
 801576c:	b004      	add	sp, #16
 801576e:	bd80      	pop	{r7, pc}

08015770 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015770:	b590      	push	{r4, r7, lr}
 8015772:	b085      	sub	sp, #20
 8015774:	af00      	add	r7, sp, #0
 8015776:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015778:	687a      	ldr	r2, [r7, #4]
 801577a:	23ae      	movs	r3, #174	@ 0xae
 801577c:	009b      	lsls	r3, r3, #2
 801577e:	58d3      	ldr	r3, [r2, r3]
 8015780:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015782:	687a      	ldr	r2, [r7, #4]
 8015784:	23af      	movs	r3, #175	@ 0xaf
 8015786:	009b      	lsls	r3, r3, #2
 8015788:	58d3      	ldr	r3, [r2, r3]
 801578a:	2b00      	cmp	r3, #0
 801578c:	d018      	beq.n	80157c0 <USBD_CDC_EP0_RxReady+0x50>
 801578e:	68fa      	ldr	r2, [r7, #12]
 8015790:	2380      	movs	r3, #128	@ 0x80
 8015792:	009b      	lsls	r3, r3, #2
 8015794:	5cd3      	ldrb	r3, [r2, r3]
 8015796:	2bff      	cmp	r3, #255	@ 0xff
 8015798:	d012      	beq.n	80157c0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801579a:	687a      	ldr	r2, [r7, #4]
 801579c:	23af      	movs	r3, #175	@ 0xaf
 801579e:	009b      	lsls	r3, r3, #2
 80157a0:	58d3      	ldr	r3, [r2, r3]
 80157a2:	689b      	ldr	r3, [r3, #8]
 80157a4:	68f9      	ldr	r1, [r7, #12]
 80157a6:	2280      	movs	r2, #128	@ 0x80
 80157a8:	0092      	lsls	r2, r2, #2
 80157aa:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 80157ac:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80157ae:	68fa      	ldr	r2, [r7, #12]
 80157b0:	4c06      	ldr	r4, [pc, #24]	@ (80157cc <USBD_CDC_EP0_RxReady+0x5c>)
 80157b2:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80157b4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80157b6:	68fa      	ldr	r2, [r7, #12]
 80157b8:	2380      	movs	r3, #128	@ 0x80
 80157ba:	009b      	lsls	r3, r3, #2
 80157bc:	21ff      	movs	r1, #255	@ 0xff
 80157be:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 80157c0:	2300      	movs	r3, #0
}
 80157c2:	0018      	movs	r0, r3
 80157c4:	46bd      	mov	sp, r7
 80157c6:	b005      	add	sp, #20
 80157c8:	bd90      	pop	{r4, r7, pc}
 80157ca:	46c0      	nop			@ (mov r8, r8)
 80157cc:	00000201 	.word	0x00000201

080157d0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b082      	sub	sp, #8
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	2243      	movs	r2, #67	@ 0x43
 80157dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80157de:	4b02      	ldr	r3, [pc, #8]	@ (80157e8 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 80157e0:	0018      	movs	r0, r3
 80157e2:	46bd      	mov	sp, r7
 80157e4:	b002      	add	sp, #8
 80157e6:	bd80      	pop	{r7, pc}
 80157e8:	20000100 	.word	0x20000100

080157ec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b082      	sub	sp, #8
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	2243      	movs	r2, #67	@ 0x43
 80157f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80157fa:	4b02      	ldr	r3, [pc, #8]	@ (8015804 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 80157fc:	0018      	movs	r0, r3
 80157fe:	46bd      	mov	sp, r7
 8015800:	b002      	add	sp, #8
 8015802:	bd80      	pop	{r7, pc}
 8015804:	200000bc 	.word	0x200000bc

08015808 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015808:	b580      	push	{r7, lr}
 801580a:	b082      	sub	sp, #8
 801580c:	af00      	add	r7, sp, #0
 801580e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	2243      	movs	r2, #67	@ 0x43
 8015814:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8015816:	4b02      	ldr	r3, [pc, #8]	@ (8015820 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8015818:	0018      	movs	r0, r3
 801581a:	46bd      	mov	sp, r7
 801581c:	b002      	add	sp, #8
 801581e:	bd80      	pop	{r7, pc}
 8015820:	20000144 	.word	0x20000144

08015824 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b082      	sub	sp, #8
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	220a      	movs	r2, #10
 8015830:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8015832:	4b02      	ldr	r3, [pc, #8]	@ (801583c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8015834:	0018      	movs	r0, r3
 8015836:	46bd      	mov	sp, r7
 8015838:	b002      	add	sp, #8
 801583a:	bd80      	pop	{r7, pc}
 801583c:	20000078 	.word	0x20000078

08015840 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8015840:	b580      	push	{r7, lr}
 8015842:	b084      	sub	sp, #16
 8015844:	af00      	add	r7, sp, #0
 8015846:	6078      	str	r0, [r7, #4]
 8015848:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801584a:	200f      	movs	r0, #15
 801584c:	183b      	adds	r3, r7, r0
 801584e:	2202      	movs	r2, #2
 8015850:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8015852:	683b      	ldr	r3, [r7, #0]
 8015854:	2b00      	cmp	r3, #0
 8015856:	d007      	beq.n	8015868 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8015858:	687a      	ldr	r2, [r7, #4]
 801585a:	23af      	movs	r3, #175	@ 0xaf
 801585c:	009b      	lsls	r3, r3, #2
 801585e:	6839      	ldr	r1, [r7, #0]
 8015860:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8015862:	183b      	adds	r3, r7, r0
 8015864:	2200      	movs	r2, #0
 8015866:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8015868:	230f      	movs	r3, #15
 801586a:	18fb      	adds	r3, r7, r3
 801586c:	781b      	ldrb	r3, [r3, #0]
}
 801586e:	0018      	movs	r0, r3
 8015870:	46bd      	mov	sp, r7
 8015872:	b004      	add	sp, #16
 8015874:	bd80      	pop	{r7, pc}

08015876 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8015876:	b580      	push	{r7, lr}
 8015878:	b086      	sub	sp, #24
 801587a:	af00      	add	r7, sp, #0
 801587c:	60f8      	str	r0, [r7, #12]
 801587e:	60b9      	str	r1, [r7, #8]
 8015880:	1dbb      	adds	r3, r7, #6
 8015882:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8015884:	68fa      	ldr	r2, [r7, #12]
 8015886:	23ae      	movs	r3, #174	@ 0xae
 8015888:	009b      	lsls	r3, r3, #2
 801588a:	58d3      	ldr	r3, [r2, r3]
 801588c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801588e:	697a      	ldr	r2, [r7, #20]
 8015890:	2382      	movs	r3, #130	@ 0x82
 8015892:	009b      	lsls	r3, r3, #2
 8015894:	68b9      	ldr	r1, [r7, #8]
 8015896:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8015898:	1dbb      	adds	r3, r7, #6
 801589a:	8819      	ldrh	r1, [r3, #0]
 801589c:	697a      	ldr	r2, [r7, #20]
 801589e:	2384      	movs	r3, #132	@ 0x84
 80158a0:	009b      	lsls	r3, r3, #2
 80158a2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80158a4:	2300      	movs	r3, #0
}
 80158a6:	0018      	movs	r0, r3
 80158a8:	46bd      	mov	sp, r7
 80158aa:	b006      	add	sp, #24
 80158ac:	bd80      	pop	{r7, pc}

080158ae <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80158ae:	b580      	push	{r7, lr}
 80158b0:	b084      	sub	sp, #16
 80158b2:	af00      	add	r7, sp, #0
 80158b4:	6078      	str	r0, [r7, #4]
 80158b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80158b8:	687a      	ldr	r2, [r7, #4]
 80158ba:	23ae      	movs	r3, #174	@ 0xae
 80158bc:	009b      	lsls	r3, r3, #2
 80158be:	58d3      	ldr	r3, [r2, r3]
 80158c0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80158c2:	68fa      	ldr	r2, [r7, #12]
 80158c4:	2381      	movs	r3, #129	@ 0x81
 80158c6:	009b      	lsls	r3, r3, #2
 80158c8:	6839      	ldr	r1, [r7, #0]
 80158ca:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80158cc:	2300      	movs	r3, #0
}
 80158ce:	0018      	movs	r0, r3
 80158d0:	46bd      	mov	sp, r7
 80158d2:	b004      	add	sp, #16
 80158d4:	bd80      	pop	{r7, pc}

080158d6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80158d6:	b580      	push	{r7, lr}
 80158d8:	b084      	sub	sp, #16
 80158da:	af00      	add	r7, sp, #0
 80158dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80158de:	687a      	ldr	r2, [r7, #4]
 80158e0:	23ae      	movs	r3, #174	@ 0xae
 80158e2:	009b      	lsls	r3, r3, #2
 80158e4:	58d3      	ldr	r3, [r2, r3]
 80158e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80158e8:	687a      	ldr	r2, [r7, #4]
 80158ea:	23ae      	movs	r3, #174	@ 0xae
 80158ec:	009b      	lsls	r3, r3, #2
 80158ee:	58d3      	ldr	r3, [r2, r3]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d022      	beq.n	801593a <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 80158f4:	68fa      	ldr	r2, [r7, #12]
 80158f6:	2385      	movs	r3, #133	@ 0x85
 80158f8:	009b      	lsls	r3, r3, #2
 80158fa:	58d3      	ldr	r3, [r2, r3]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d11a      	bne.n	8015936 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8015900:	68fa      	ldr	r2, [r7, #12]
 8015902:	2385      	movs	r3, #133	@ 0x85
 8015904:	009b      	lsls	r3, r3, #2
 8015906:	2101      	movs	r1, #1
 8015908:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801590a:	68fa      	ldr	r2, [r7, #12]
 801590c:	2384      	movs	r3, #132	@ 0x84
 801590e:	009b      	lsls	r3, r3, #2
 8015910:	58d2      	ldr	r2, [r2, r3]
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8015916:	68fa      	ldr	r2, [r7, #12]
 8015918:	2382      	movs	r3, #130	@ 0x82
 801591a:	009b      	lsls	r3, r3, #2
 801591c:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801591e:	68fa      	ldr	r2, [r7, #12]
 8015920:	2384      	movs	r3, #132	@ 0x84
 8015922:	009b      	lsls	r3, r3, #2
 8015924:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8015926:	b29b      	uxth	r3, r3
 8015928:	6878      	ldr	r0, [r7, #4]
 801592a:	000a      	movs	r2, r1
 801592c:	2181      	movs	r1, #129	@ 0x81
 801592e:	f001 ff0c 	bl	801774a <USBD_LL_Transmit>

      return USBD_OK;
 8015932:	2300      	movs	r3, #0
 8015934:	e002      	b.n	801593c <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8015936:	2301      	movs	r3, #1
 8015938:	e000      	b.n	801593c <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801593a:	2302      	movs	r3, #2
  }
}
 801593c:	0018      	movs	r0, r3
 801593e:	46bd      	mov	sp, r7
 8015940:	b004      	add	sp, #16
 8015942:	bd80      	pop	{r7, pc}

08015944 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015944:	b580      	push	{r7, lr}
 8015946:	b084      	sub	sp, #16
 8015948:	af00      	add	r7, sp, #0
 801594a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801594c:	687a      	ldr	r2, [r7, #4]
 801594e:	23ae      	movs	r3, #174	@ 0xae
 8015950:	009b      	lsls	r3, r3, #2
 8015952:	58d3      	ldr	r3, [r2, r3]
 8015954:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8015956:	687a      	ldr	r2, [r7, #4]
 8015958:	23ae      	movs	r3, #174	@ 0xae
 801595a:	009b      	lsls	r3, r3, #2
 801595c:	58d3      	ldr	r3, [r2, r3]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d019      	beq.n	8015996 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	7c1b      	ldrb	r3, [r3, #16]
 8015966:	2b00      	cmp	r3, #0
 8015968:	d10a      	bne.n	8015980 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801596a:	68fa      	ldr	r2, [r7, #12]
 801596c:	2381      	movs	r3, #129	@ 0x81
 801596e:	009b      	lsls	r3, r3, #2
 8015970:	58d2      	ldr	r2, [r2, r3]
 8015972:	2380      	movs	r3, #128	@ 0x80
 8015974:	009b      	lsls	r3, r3, #2
 8015976:	6878      	ldr	r0, [r7, #4]
 8015978:	2101      	movs	r1, #1
 801597a:	f001 ff1d 	bl	80177b8 <USBD_LL_PrepareReceive>
 801597e:	e008      	b.n	8015992 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8015980:	68fa      	ldr	r2, [r7, #12]
 8015982:	2381      	movs	r3, #129	@ 0x81
 8015984:	009b      	lsls	r3, r3, #2
 8015986:	58d2      	ldr	r2, [r2, r3]
 8015988:	6878      	ldr	r0, [r7, #4]
 801598a:	2340      	movs	r3, #64	@ 0x40
 801598c:	2101      	movs	r1, #1
 801598e:	f001 ff13 	bl	80177b8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8015992:	2300      	movs	r3, #0
 8015994:	e000      	b.n	8015998 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8015996:	2302      	movs	r3, #2
  }
}
 8015998:	0018      	movs	r0, r3
 801599a:	46bd      	mov	sp, r7
 801599c:	b004      	add	sp, #16
 801599e:	bd80      	pop	{r7, pc}

080159a0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b084      	sub	sp, #16
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	60f8      	str	r0, [r7, #12]
 80159a8:	60b9      	str	r1, [r7, #8]
 80159aa:	1dfb      	adds	r3, r7, #7
 80159ac:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d101      	bne.n	80159b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80159b4:	2302      	movs	r3, #2
 80159b6:	e020      	b.n	80159fa <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80159b8:	68fa      	ldr	r2, [r7, #12]
 80159ba:	23ad      	movs	r3, #173	@ 0xad
 80159bc:	009b      	lsls	r3, r3, #2
 80159be:	58d3      	ldr	r3, [r2, r3]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d004      	beq.n	80159ce <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 80159c4:	68fa      	ldr	r2, [r7, #12]
 80159c6:	23ad      	movs	r3, #173	@ 0xad
 80159c8:	009b      	lsls	r3, r3, #2
 80159ca:	2100      	movs	r1, #0
 80159cc:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80159ce:	68bb      	ldr	r3, [r7, #8]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d004      	beq.n	80159de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80159d4:	68fa      	ldr	r2, [r7, #12]
 80159d6:	23ac      	movs	r3, #172	@ 0xac
 80159d8:	009b      	lsls	r3, r3, #2
 80159da:	68b9      	ldr	r1, [r7, #8]
 80159dc:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80159de:	68fa      	ldr	r2, [r7, #12]
 80159e0:	23a7      	movs	r3, #167	@ 0xa7
 80159e2:	009b      	lsls	r3, r3, #2
 80159e4:	2101      	movs	r1, #1
 80159e6:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	1dfa      	adds	r2, r7, #7
 80159ec:	7812      	ldrb	r2, [r2, #0]
 80159ee:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	0018      	movs	r0, r3
 80159f4:	f001 fd0c 	bl	8017410 <USBD_LL_Init>

  return USBD_OK;
 80159f8:	2300      	movs	r3, #0
}
 80159fa:	0018      	movs	r0, r3
 80159fc:	46bd      	mov	sp, r7
 80159fe:	b004      	add	sp, #16
 8015a00:	bd80      	pop	{r7, pc}

08015a02 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015a02:	b580      	push	{r7, lr}
 8015a04:	b084      	sub	sp, #16
 8015a06:	af00      	add	r7, sp, #0
 8015a08:	6078      	str	r0, [r7, #4]
 8015a0a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8015a0c:	200f      	movs	r0, #15
 8015a0e:	183b      	adds	r3, r7, r0
 8015a10:	2200      	movs	r2, #0
 8015a12:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8015a14:	683b      	ldr	r3, [r7, #0]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d008      	beq.n	8015a2c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8015a1a:	687a      	ldr	r2, [r7, #4]
 8015a1c:	23ad      	movs	r3, #173	@ 0xad
 8015a1e:	009b      	lsls	r3, r3, #2
 8015a20:	6839      	ldr	r1, [r7, #0]
 8015a22:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8015a24:	183b      	adds	r3, r7, r0
 8015a26:	2200      	movs	r2, #0
 8015a28:	701a      	strb	r2, [r3, #0]
 8015a2a:	e003      	b.n	8015a34 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8015a2c:	230f      	movs	r3, #15
 8015a2e:	18fb      	adds	r3, r7, r3
 8015a30:	2202      	movs	r2, #2
 8015a32:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8015a34:	230f      	movs	r3, #15
 8015a36:	18fb      	adds	r3, r7, r3
 8015a38:	781b      	ldrb	r3, [r3, #0]
}
 8015a3a:	0018      	movs	r0, r3
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	b004      	add	sp, #16
 8015a40:	bd80      	pop	{r7, pc}

08015a42 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015a42:	b580      	push	{r7, lr}
 8015a44:	b082      	sub	sp, #8
 8015a46:	af00      	add	r7, sp, #0
 8015a48:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	0018      	movs	r0, r3
 8015a4e:	f001 fd43 	bl	80174d8 <USBD_LL_Start>

  return USBD_OK;
 8015a52:	2300      	movs	r3, #0
}
 8015a54:	0018      	movs	r0, r3
 8015a56:	46bd      	mov	sp, r7
 8015a58:	b002      	add	sp, #8
 8015a5a:	bd80      	pop	{r7, pc}

08015a5c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b082      	sub	sp, #8
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015a64:	2300      	movs	r3, #0
}
 8015a66:	0018      	movs	r0, r3
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	b002      	add	sp, #8
 8015a6c:	bd80      	pop	{r7, pc}

08015a6e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8015a6e:	b590      	push	{r4, r7, lr}
 8015a70:	b085      	sub	sp, #20
 8015a72:	af00      	add	r7, sp, #0
 8015a74:	6078      	str	r0, [r7, #4]
 8015a76:	000a      	movs	r2, r1
 8015a78:	1cfb      	adds	r3, r7, #3
 8015a7a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8015a7c:	240f      	movs	r4, #15
 8015a7e:	193b      	adds	r3, r7, r4
 8015a80:	2202      	movs	r2, #2
 8015a82:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8015a84:	687a      	ldr	r2, [r7, #4]
 8015a86:	23ad      	movs	r3, #173	@ 0xad
 8015a88:	009b      	lsls	r3, r3, #2
 8015a8a:	58d3      	ldr	r3, [r2, r3]
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d00e      	beq.n	8015aae <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8015a90:	687a      	ldr	r2, [r7, #4]
 8015a92:	23ad      	movs	r3, #173	@ 0xad
 8015a94:	009b      	lsls	r3, r3, #2
 8015a96:	58d3      	ldr	r3, [r2, r3]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	1cfa      	adds	r2, r7, #3
 8015a9c:	7811      	ldrb	r1, [r2, #0]
 8015a9e:	687a      	ldr	r2, [r7, #4]
 8015aa0:	0010      	movs	r0, r2
 8015aa2:	4798      	blx	r3
 8015aa4:	1e03      	subs	r3, r0, #0
 8015aa6:	d102      	bne.n	8015aae <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8015aa8:	193b      	adds	r3, r7, r4
 8015aaa:	2200      	movs	r2, #0
 8015aac:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8015aae:	230f      	movs	r3, #15
 8015ab0:	18fb      	adds	r3, r7, r3
 8015ab2:	781b      	ldrb	r3, [r3, #0]
}
 8015ab4:	0018      	movs	r0, r3
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	b005      	add	sp, #20
 8015aba:	bd90      	pop	{r4, r7, pc}

08015abc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8015abc:	b580      	push	{r7, lr}
 8015abe:	b082      	sub	sp, #8
 8015ac0:	af00      	add	r7, sp, #0
 8015ac2:	6078      	str	r0, [r7, #4]
 8015ac4:	000a      	movs	r2, r1
 8015ac6:	1cfb      	adds	r3, r7, #3
 8015ac8:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8015aca:	687a      	ldr	r2, [r7, #4]
 8015acc:	23ad      	movs	r3, #173	@ 0xad
 8015ace:	009b      	lsls	r3, r3, #2
 8015ad0:	58d3      	ldr	r3, [r2, r3]
 8015ad2:	685b      	ldr	r3, [r3, #4]
 8015ad4:	1cfa      	adds	r2, r7, #3
 8015ad6:	7811      	ldrb	r1, [r2, #0]
 8015ad8:	687a      	ldr	r2, [r7, #4]
 8015ada:	0010      	movs	r0, r2
 8015adc:	4798      	blx	r3

  return USBD_OK;
 8015ade:	2300      	movs	r3, #0
}
 8015ae0:	0018      	movs	r0, r3
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	b002      	add	sp, #8
 8015ae6:	bd80      	pop	{r7, pc}

08015ae8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015ae8:	b580      	push	{r7, lr}
 8015aea:	b082      	sub	sp, #8
 8015aec:	af00      	add	r7, sp, #0
 8015aee:	6078      	str	r0, [r7, #4]
 8015af0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	22aa      	movs	r2, #170	@ 0xaa
 8015af6:	0092      	lsls	r2, r2, #2
 8015af8:	4694      	mov	ip, r2
 8015afa:	4463      	add	r3, ip
 8015afc:	683a      	ldr	r2, [r7, #0]
 8015afe:	0011      	movs	r1, r2
 8015b00:	0018      	movs	r0, r3
 8015b02:	f001 f810 	bl	8016b26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015b06:	687a      	ldr	r2, [r7, #4]
 8015b08:	23a5      	movs	r3, #165	@ 0xa5
 8015b0a:	009b      	lsls	r3, r3, #2
 8015b0c:	2101      	movs	r1, #1
 8015b0e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	4a23      	ldr	r2, [pc, #140]	@ (8015ba0 <USBD_LL_SetupStage+0xb8>)
 8015b14:	5a9b      	ldrh	r3, [r3, r2]
 8015b16:	0019      	movs	r1, r3
 8015b18:	687a      	ldr	r2, [r7, #4]
 8015b1a:	23a6      	movs	r3, #166	@ 0xa6
 8015b1c:	009b      	lsls	r3, r3, #2
 8015b1e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8015b20:	687a      	ldr	r2, [r7, #4]
 8015b22:	23aa      	movs	r3, #170	@ 0xaa
 8015b24:	009b      	lsls	r3, r3, #2
 8015b26:	5cd3      	ldrb	r3, [r2, r3]
 8015b28:	001a      	movs	r2, r3
 8015b2a:	231f      	movs	r3, #31
 8015b2c:	4013      	ands	r3, r2
 8015b2e:	2b02      	cmp	r3, #2
 8015b30:	d019      	beq.n	8015b66 <USBD_LL_SetupStage+0x7e>
 8015b32:	d822      	bhi.n	8015b7a <USBD_LL_SetupStage+0x92>
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d002      	beq.n	8015b3e <USBD_LL_SetupStage+0x56>
 8015b38:	2b01      	cmp	r3, #1
 8015b3a:	d00a      	beq.n	8015b52 <USBD_LL_SetupStage+0x6a>
 8015b3c:	e01d      	b.n	8015b7a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	22aa      	movs	r2, #170	@ 0xaa
 8015b42:	0092      	lsls	r2, r2, #2
 8015b44:	189a      	adds	r2, r3, r2
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	0011      	movs	r1, r2
 8015b4a:	0018      	movs	r0, r3
 8015b4c:	f000 fa10 	bl	8015f70 <USBD_StdDevReq>
      break;
 8015b50:	e020      	b.n	8015b94 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	22aa      	movs	r2, #170	@ 0xaa
 8015b56:	0092      	lsls	r2, r2, #2
 8015b58:	189a      	adds	r2, r3, r2
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	0011      	movs	r1, r2
 8015b5e:	0018      	movs	r0, r3
 8015b60:	f000 fa78 	bl	8016054 <USBD_StdItfReq>
      break;
 8015b64:	e016      	b.n	8015b94 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	22aa      	movs	r2, #170	@ 0xaa
 8015b6a:	0092      	lsls	r2, r2, #2
 8015b6c:	189a      	adds	r2, r3, r2
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	0011      	movs	r1, r2
 8015b72:	0018      	movs	r0, r3
 8015b74:	f000 fac5 	bl	8016102 <USBD_StdEPReq>
      break;
 8015b78:	e00c      	b.n	8015b94 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015b7a:	687a      	ldr	r2, [r7, #4]
 8015b7c:	23aa      	movs	r3, #170	@ 0xaa
 8015b7e:	009b      	lsls	r3, r3, #2
 8015b80:	5cd3      	ldrb	r3, [r2, r3]
 8015b82:	227f      	movs	r2, #127	@ 0x7f
 8015b84:	4393      	bics	r3, r2
 8015b86:	b2da      	uxtb	r2, r3
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	0011      	movs	r1, r2
 8015b8c:	0018      	movs	r0, r3
 8015b8e:	f001 fd2a 	bl	80175e6 <USBD_LL_StallEP>
      break;
 8015b92:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8015b94:	2300      	movs	r3, #0
}
 8015b96:	0018      	movs	r0, r3
 8015b98:	46bd      	mov	sp, r7
 8015b9a:	b002      	add	sp, #8
 8015b9c:	bd80      	pop	{r7, pc}
 8015b9e:	46c0      	nop			@ (mov r8, r8)
 8015ba0:	000002ae 	.word	0x000002ae

08015ba4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015ba4:	b580      	push	{r7, lr}
 8015ba6:	b086      	sub	sp, #24
 8015ba8:	af00      	add	r7, sp, #0
 8015baa:	60f8      	str	r0, [r7, #12]
 8015bac:	607a      	str	r2, [r7, #4]
 8015bae:	200b      	movs	r0, #11
 8015bb0:	183b      	adds	r3, r7, r0
 8015bb2:	1c0a      	adds	r2, r1, #0
 8015bb4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8015bb6:	183b      	adds	r3, r7, r0
 8015bb8:	781b      	ldrb	r3, [r3, #0]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d154      	bne.n	8015c68 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	3355      	adds	r3, #85	@ 0x55
 8015bc2:	33ff      	adds	r3, #255	@ 0xff
 8015bc4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015bc6:	68fa      	ldr	r2, [r7, #12]
 8015bc8:	23a5      	movs	r3, #165	@ 0xa5
 8015bca:	009b      	lsls	r3, r3, #2
 8015bcc:	58d3      	ldr	r3, [r2, r3]
 8015bce:	2b03      	cmp	r3, #3
 8015bd0:	d139      	bne.n	8015c46 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8015bd2:	697b      	ldr	r3, [r7, #20]
 8015bd4:	68da      	ldr	r2, [r3, #12]
 8015bd6:	697b      	ldr	r3, [r7, #20]
 8015bd8:	691b      	ldr	r3, [r3, #16]
 8015bda:	429a      	cmp	r2, r3
 8015bdc:	d919      	bls.n	8015c12 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8015bde:	697b      	ldr	r3, [r7, #20]
 8015be0:	68da      	ldr	r2, [r3, #12]
 8015be2:	697b      	ldr	r3, [r7, #20]
 8015be4:	691b      	ldr	r3, [r3, #16]
 8015be6:	1ad2      	subs	r2, r2, r3
 8015be8:	697b      	ldr	r3, [r7, #20]
 8015bea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8015bec:	697b      	ldr	r3, [r7, #20]
 8015bee:	68da      	ldr	r2, [r3, #12]
 8015bf0:	697b      	ldr	r3, [r7, #20]
 8015bf2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8015bf4:	429a      	cmp	r2, r3
 8015bf6:	d203      	bcs.n	8015c00 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8015bf8:	697b      	ldr	r3, [r7, #20]
 8015bfa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8015bfc:	b29b      	uxth	r3, r3
 8015bfe:	e002      	b.n	8015c06 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8015c00:	697b      	ldr	r3, [r7, #20]
 8015c02:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8015c04:	b29b      	uxth	r3, r3
 8015c06:	6879      	ldr	r1, [r7, #4]
 8015c08:	68f8      	ldr	r0, [r7, #12]
 8015c0a:	001a      	movs	r2, r3
 8015c0c:	f001 f898 	bl	8016d40 <USBD_CtlContinueRx>
 8015c10:	e045      	b.n	8015c9e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015c12:	68fa      	ldr	r2, [r7, #12]
 8015c14:	23ad      	movs	r3, #173	@ 0xad
 8015c16:	009b      	lsls	r3, r3, #2
 8015c18:	58d3      	ldr	r3, [r2, r3]
 8015c1a:	691b      	ldr	r3, [r3, #16]
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d00d      	beq.n	8015c3c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015c20:	68fa      	ldr	r2, [r7, #12]
 8015c22:	23a7      	movs	r3, #167	@ 0xa7
 8015c24:	009b      	lsls	r3, r3, #2
 8015c26:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015c28:	2b03      	cmp	r3, #3
 8015c2a:	d107      	bne.n	8015c3c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8015c2c:	68fa      	ldr	r2, [r7, #12]
 8015c2e:	23ad      	movs	r3, #173	@ 0xad
 8015c30:	009b      	lsls	r3, r3, #2
 8015c32:	58d3      	ldr	r3, [r2, r3]
 8015c34:	691b      	ldr	r3, [r3, #16]
 8015c36:	68fa      	ldr	r2, [r7, #12]
 8015c38:	0010      	movs	r0, r2
 8015c3a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	0018      	movs	r0, r3
 8015c40:	f001 f891 	bl	8016d66 <USBD_CtlSendStatus>
 8015c44:	e02b      	b.n	8015c9e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8015c46:	68fa      	ldr	r2, [r7, #12]
 8015c48:	23a5      	movs	r3, #165	@ 0xa5
 8015c4a:	009b      	lsls	r3, r3, #2
 8015c4c:	58d3      	ldr	r3, [r2, r3]
 8015c4e:	2b05      	cmp	r3, #5
 8015c50:	d125      	bne.n	8015c9e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8015c52:	68fa      	ldr	r2, [r7, #12]
 8015c54:	23a5      	movs	r3, #165	@ 0xa5
 8015c56:	009b      	lsls	r3, r3, #2
 8015c58:	2100      	movs	r1, #0
 8015c5a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	2100      	movs	r1, #0
 8015c60:	0018      	movs	r0, r3
 8015c62:	f001 fcc0 	bl	80175e6 <USBD_LL_StallEP>
 8015c66:	e01a      	b.n	8015c9e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8015c68:	68fa      	ldr	r2, [r7, #12]
 8015c6a:	23ad      	movs	r3, #173	@ 0xad
 8015c6c:	009b      	lsls	r3, r3, #2
 8015c6e:	58d3      	ldr	r3, [r2, r3]
 8015c70:	699b      	ldr	r3, [r3, #24]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d011      	beq.n	8015c9a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015c76:	68fa      	ldr	r2, [r7, #12]
 8015c78:	23a7      	movs	r3, #167	@ 0xa7
 8015c7a:	009b      	lsls	r3, r3, #2
 8015c7c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8015c7e:	2b03      	cmp	r3, #3
 8015c80:	d10b      	bne.n	8015c9a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8015c82:	68fa      	ldr	r2, [r7, #12]
 8015c84:	23ad      	movs	r3, #173	@ 0xad
 8015c86:	009b      	lsls	r3, r3, #2
 8015c88:	58d3      	ldr	r3, [r2, r3]
 8015c8a:	699b      	ldr	r3, [r3, #24]
 8015c8c:	220b      	movs	r2, #11
 8015c8e:	18ba      	adds	r2, r7, r2
 8015c90:	7811      	ldrb	r1, [r2, #0]
 8015c92:	68fa      	ldr	r2, [r7, #12]
 8015c94:	0010      	movs	r0, r2
 8015c96:	4798      	blx	r3
 8015c98:	e001      	b.n	8015c9e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015c9a:	2302      	movs	r3, #2
 8015c9c:	e000      	b.n	8015ca0 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8015c9e:	2300      	movs	r3, #0
}
 8015ca0:	0018      	movs	r0, r3
 8015ca2:	46bd      	mov	sp, r7
 8015ca4:	b006      	add	sp, #24
 8015ca6:	bd80      	pop	{r7, pc}

08015ca8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015ca8:	b580      	push	{r7, lr}
 8015caa:	b086      	sub	sp, #24
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	60f8      	str	r0, [r7, #12]
 8015cb0:	607a      	str	r2, [r7, #4]
 8015cb2:	200b      	movs	r0, #11
 8015cb4:	183b      	adds	r3, r7, r0
 8015cb6:	1c0a      	adds	r2, r1, #0
 8015cb8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8015cba:	183b      	adds	r3, r7, r0
 8015cbc:	781b      	ldrb	r3, [r3, #0]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d000      	beq.n	8015cc4 <USBD_LL_DataInStage+0x1c>
 8015cc2:	e08e      	b.n	8015de2 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	3314      	adds	r3, #20
 8015cc8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015cca:	68fa      	ldr	r2, [r7, #12]
 8015ccc:	23a5      	movs	r3, #165	@ 0xa5
 8015cce:	009b      	lsls	r3, r3, #2
 8015cd0:	58d3      	ldr	r3, [r2, r3]
 8015cd2:	2b02      	cmp	r3, #2
 8015cd4:	d164      	bne.n	8015da0 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8015cd6:	697b      	ldr	r3, [r7, #20]
 8015cd8:	68da      	ldr	r2, [r3, #12]
 8015cda:	697b      	ldr	r3, [r7, #20]
 8015cdc:	691b      	ldr	r3, [r3, #16]
 8015cde:	429a      	cmp	r2, r3
 8015ce0:	d915      	bls.n	8015d0e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8015ce2:	697b      	ldr	r3, [r7, #20]
 8015ce4:	68da      	ldr	r2, [r3, #12]
 8015ce6:	697b      	ldr	r3, [r7, #20]
 8015ce8:	691b      	ldr	r3, [r3, #16]
 8015cea:	1ad2      	subs	r2, r2, r3
 8015cec:	697b      	ldr	r3, [r7, #20]
 8015cee:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8015cf0:	697b      	ldr	r3, [r7, #20]
 8015cf2:	68db      	ldr	r3, [r3, #12]
 8015cf4:	b29a      	uxth	r2, r3
 8015cf6:	6879      	ldr	r1, [r7, #4]
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	0018      	movs	r0, r3
 8015cfc:	f000 ffe9 	bl	8016cd2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015d00:	68f8      	ldr	r0, [r7, #12]
 8015d02:	2300      	movs	r3, #0
 8015d04:	2200      	movs	r2, #0
 8015d06:	2100      	movs	r1, #0
 8015d08:	f001 fd56 	bl	80177b8 <USBD_LL_PrepareReceive>
 8015d0c:	e059      	b.n	8015dc2 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8015d0e:	697b      	ldr	r3, [r7, #20]
 8015d10:	689a      	ldr	r2, [r3, #8]
 8015d12:	697b      	ldr	r3, [r7, #20]
 8015d14:	691b      	ldr	r3, [r3, #16]
 8015d16:	0019      	movs	r1, r3
 8015d18:	0010      	movs	r0, r2
 8015d1a:	f7ea fa97 	bl	800024c <__aeabi_uidivmod>
 8015d1e:	1e0b      	subs	r3, r1, #0
 8015d20:	d11f      	bne.n	8015d62 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8015d22:	697b      	ldr	r3, [r7, #20]
 8015d24:	689a      	ldr	r2, [r3, #8]
 8015d26:	697b      	ldr	r3, [r7, #20]
 8015d28:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8015d2a:	429a      	cmp	r2, r3
 8015d2c:	d319      	bcc.n	8015d62 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8015d2e:	697b      	ldr	r3, [r7, #20]
 8015d30:	689a      	ldr	r2, [r3, #8]
 8015d32:	68f9      	ldr	r1, [r7, #12]
 8015d34:	23a6      	movs	r3, #166	@ 0xa6
 8015d36:	009b      	lsls	r3, r3, #2
 8015d38:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8015d3a:	429a      	cmp	r2, r3
 8015d3c:	d211      	bcs.n	8015d62 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	2200      	movs	r2, #0
 8015d42:	2100      	movs	r1, #0
 8015d44:	0018      	movs	r0, r3
 8015d46:	f000 ffc4 	bl	8016cd2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015d4a:	68fa      	ldr	r2, [r7, #12]
 8015d4c:	23a6      	movs	r3, #166	@ 0xa6
 8015d4e:	009b      	lsls	r3, r3, #2
 8015d50:	2100      	movs	r1, #0
 8015d52:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015d54:	68f8      	ldr	r0, [r7, #12]
 8015d56:	2300      	movs	r3, #0
 8015d58:	2200      	movs	r2, #0
 8015d5a:	2100      	movs	r1, #0
 8015d5c:	f001 fd2c 	bl	80177b8 <USBD_LL_PrepareReceive>
 8015d60:	e02f      	b.n	8015dc2 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015d62:	68fa      	ldr	r2, [r7, #12]
 8015d64:	23ad      	movs	r3, #173	@ 0xad
 8015d66:	009b      	lsls	r3, r3, #2
 8015d68:	58d3      	ldr	r3, [r2, r3]
 8015d6a:	68db      	ldr	r3, [r3, #12]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d00d      	beq.n	8015d8c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015d70:	68fa      	ldr	r2, [r7, #12]
 8015d72:	23a7      	movs	r3, #167	@ 0xa7
 8015d74:	009b      	lsls	r3, r3, #2
 8015d76:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015d78:	2b03      	cmp	r3, #3
 8015d7a:	d107      	bne.n	8015d8c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8015d7c:	68fa      	ldr	r2, [r7, #12]
 8015d7e:	23ad      	movs	r3, #173	@ 0xad
 8015d80:	009b      	lsls	r3, r3, #2
 8015d82:	58d3      	ldr	r3, [r2, r3]
 8015d84:	68db      	ldr	r3, [r3, #12]
 8015d86:	68fa      	ldr	r2, [r7, #12]
 8015d88:	0010      	movs	r0, r2
 8015d8a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	2180      	movs	r1, #128	@ 0x80
 8015d90:	0018      	movs	r0, r3
 8015d92:	f001 fc28 	bl	80175e6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	0018      	movs	r0, r3
 8015d9a:	f000 fff8 	bl	8016d8e <USBD_CtlReceiveStatus>
 8015d9e:	e010      	b.n	8015dc2 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8015da0:	68fa      	ldr	r2, [r7, #12]
 8015da2:	23a5      	movs	r3, #165	@ 0xa5
 8015da4:	009b      	lsls	r3, r3, #2
 8015da6:	58d3      	ldr	r3, [r2, r3]
 8015da8:	2b04      	cmp	r3, #4
 8015daa:	d005      	beq.n	8015db8 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8015dac:	68fa      	ldr	r2, [r7, #12]
 8015dae:	23a5      	movs	r3, #165	@ 0xa5
 8015db0:	009b      	lsls	r3, r3, #2
 8015db2:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d104      	bne.n	8015dc2 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	2180      	movs	r1, #128	@ 0x80
 8015dbc:	0018      	movs	r0, r3
 8015dbe:	f001 fc12 	bl	80175e6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8015dc2:	68fa      	ldr	r2, [r7, #12]
 8015dc4:	23a8      	movs	r3, #168	@ 0xa8
 8015dc6:	009b      	lsls	r3, r3, #2
 8015dc8:	5cd3      	ldrb	r3, [r2, r3]
 8015dca:	2b01      	cmp	r3, #1
 8015dcc:	d124      	bne.n	8015e18 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	0018      	movs	r0, r3
 8015dd2:	f7ff fe43 	bl	8015a5c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015dd6:	68fa      	ldr	r2, [r7, #12]
 8015dd8:	23a8      	movs	r3, #168	@ 0xa8
 8015dda:	009b      	lsls	r3, r3, #2
 8015ddc:	2100      	movs	r1, #0
 8015dde:	54d1      	strb	r1, [r2, r3]
 8015de0:	e01a      	b.n	8015e18 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8015de2:	68fa      	ldr	r2, [r7, #12]
 8015de4:	23ad      	movs	r3, #173	@ 0xad
 8015de6:	009b      	lsls	r3, r3, #2
 8015de8:	58d3      	ldr	r3, [r2, r3]
 8015dea:	695b      	ldr	r3, [r3, #20]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d011      	beq.n	8015e14 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015df0:	68fa      	ldr	r2, [r7, #12]
 8015df2:	23a7      	movs	r3, #167	@ 0xa7
 8015df4:	009b      	lsls	r3, r3, #2
 8015df6:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8015df8:	2b03      	cmp	r3, #3
 8015dfa:	d10b      	bne.n	8015e14 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8015dfc:	68fa      	ldr	r2, [r7, #12]
 8015dfe:	23ad      	movs	r3, #173	@ 0xad
 8015e00:	009b      	lsls	r3, r3, #2
 8015e02:	58d3      	ldr	r3, [r2, r3]
 8015e04:	695b      	ldr	r3, [r3, #20]
 8015e06:	220b      	movs	r2, #11
 8015e08:	18ba      	adds	r2, r7, r2
 8015e0a:	7811      	ldrb	r1, [r2, #0]
 8015e0c:	68fa      	ldr	r2, [r7, #12]
 8015e0e:	0010      	movs	r0, r2
 8015e10:	4798      	blx	r3
 8015e12:	e001      	b.n	8015e18 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015e14:	2302      	movs	r3, #2
 8015e16:	e000      	b.n	8015e1a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8015e18:	2300      	movs	r3, #0
}
 8015e1a:	0018      	movs	r0, r3
 8015e1c:	46bd      	mov	sp, r7
 8015e1e:	b006      	add	sp, #24
 8015e20:	bd80      	pop	{r7, pc}

08015e22 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015e22:	b580      	push	{r7, lr}
 8015e24:	b082      	sub	sp, #8
 8015e26:	af00      	add	r7, sp, #0
 8015e28:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015e2a:	6878      	ldr	r0, [r7, #4]
 8015e2c:	2340      	movs	r3, #64	@ 0x40
 8015e2e:	2200      	movs	r2, #0
 8015e30:	2100      	movs	r1, #0
 8015e32:	f001 fb76 	bl	8017522 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015e36:	687a      	ldr	r2, [r7, #4]
 8015e38:	23ac      	movs	r3, #172	@ 0xac
 8015e3a:	005b      	lsls	r3, r3, #1
 8015e3c:	2101      	movs	r1, #1
 8015e3e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015e40:	687a      	ldr	r2, [r7, #4]
 8015e42:	23b2      	movs	r3, #178	@ 0xb2
 8015e44:	005b      	lsls	r3, r3, #1
 8015e46:	2140      	movs	r1, #64	@ 0x40
 8015e48:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015e4a:	6878      	ldr	r0, [r7, #4]
 8015e4c:	2340      	movs	r3, #64	@ 0x40
 8015e4e:	2200      	movs	r2, #0
 8015e50:	2180      	movs	r1, #128	@ 0x80
 8015e52:	f001 fb66 	bl	8017522 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	2201      	movs	r2, #1
 8015e5a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	2240      	movs	r2, #64	@ 0x40
 8015e60:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015e62:	687a      	ldr	r2, [r7, #4]
 8015e64:	23a7      	movs	r3, #167	@ 0xa7
 8015e66:	009b      	lsls	r3, r3, #2
 8015e68:	2101      	movs	r1, #1
 8015e6a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8015e6c:	687a      	ldr	r2, [r7, #4]
 8015e6e:	23a5      	movs	r3, #165	@ 0xa5
 8015e70:	009b      	lsls	r3, r3, #2
 8015e72:	2100      	movs	r1, #0
 8015e74:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	2200      	movs	r2, #0
 8015e7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015e7c:	687a      	ldr	r2, [r7, #4]
 8015e7e:	23a9      	movs	r3, #169	@ 0xa9
 8015e80:	009b      	lsls	r3, r3, #2
 8015e82:	2100      	movs	r1, #0
 8015e84:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8015e86:	687a      	ldr	r2, [r7, #4]
 8015e88:	23ae      	movs	r3, #174	@ 0xae
 8015e8a:	009b      	lsls	r3, r3, #2
 8015e8c:	58d3      	ldr	r3, [r2, r3]
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d00a      	beq.n	8015ea8 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015e92:	687a      	ldr	r2, [r7, #4]
 8015e94:	23ad      	movs	r3, #173	@ 0xad
 8015e96:	009b      	lsls	r3, r3, #2
 8015e98:	58d3      	ldr	r3, [r2, r3]
 8015e9a:	685a      	ldr	r2, [r3, #4]
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	685b      	ldr	r3, [r3, #4]
 8015ea0:	b2d9      	uxtb	r1, r3
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	0018      	movs	r0, r3
 8015ea6:	4790      	blx	r2
  }

  return USBD_OK;
 8015ea8:	2300      	movs	r3, #0
}
 8015eaa:	0018      	movs	r0, r3
 8015eac:	46bd      	mov	sp, r7
 8015eae:	b002      	add	sp, #8
 8015eb0:	bd80      	pop	{r7, pc}

08015eb2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015eb2:	b580      	push	{r7, lr}
 8015eb4:	b082      	sub	sp, #8
 8015eb6:	af00      	add	r7, sp, #0
 8015eb8:	6078      	str	r0, [r7, #4]
 8015eba:	000a      	movs	r2, r1
 8015ebc:	1cfb      	adds	r3, r7, #3
 8015ebe:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	1cfa      	adds	r2, r7, #3
 8015ec4:	7812      	ldrb	r2, [r2, #0]
 8015ec6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015ec8:	2300      	movs	r3, #0
}
 8015eca:	0018      	movs	r0, r3
 8015ecc:	46bd      	mov	sp, r7
 8015ece:	b002      	add	sp, #8
 8015ed0:	bd80      	pop	{r7, pc}
	...

08015ed4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015ed4:	b580      	push	{r7, lr}
 8015ed6:	b082      	sub	sp, #8
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8015edc:	687a      	ldr	r2, [r7, #4]
 8015ede:	23a7      	movs	r3, #167	@ 0xa7
 8015ee0:	009b      	lsls	r3, r3, #2
 8015ee2:	5cd1      	ldrb	r1, [r2, r3]
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	4a06      	ldr	r2, [pc, #24]	@ (8015f00 <USBD_LL_Suspend+0x2c>)
 8015ee8:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8015eea:	687a      	ldr	r2, [r7, #4]
 8015eec:	23a7      	movs	r3, #167	@ 0xa7
 8015eee:	009b      	lsls	r3, r3, #2
 8015ef0:	2104      	movs	r1, #4
 8015ef2:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8015ef4:	2300      	movs	r3, #0
}
 8015ef6:	0018      	movs	r0, r3
 8015ef8:	46bd      	mov	sp, r7
 8015efa:	b002      	add	sp, #8
 8015efc:	bd80      	pop	{r7, pc}
 8015efe:	46c0      	nop			@ (mov r8, r8)
 8015f00:	0000029d 	.word	0x0000029d

08015f04 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015f04:	b580      	push	{r7, lr}
 8015f06:	b082      	sub	sp, #8
 8015f08:	af00      	add	r7, sp, #0
 8015f0a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015f0c:	687a      	ldr	r2, [r7, #4]
 8015f0e:	23a7      	movs	r3, #167	@ 0xa7
 8015f10:	009b      	lsls	r3, r3, #2
 8015f12:	5cd3      	ldrb	r3, [r2, r3]
 8015f14:	2b04      	cmp	r3, #4
 8015f16:	d106      	bne.n	8015f26 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	4a05      	ldr	r2, [pc, #20]	@ (8015f30 <USBD_LL_Resume+0x2c>)
 8015f1c:	5c99      	ldrb	r1, [r3, r2]
 8015f1e:	687a      	ldr	r2, [r7, #4]
 8015f20:	23a7      	movs	r3, #167	@ 0xa7
 8015f22:	009b      	lsls	r3, r3, #2
 8015f24:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8015f26:	2300      	movs	r3, #0
}
 8015f28:	0018      	movs	r0, r3
 8015f2a:	46bd      	mov	sp, r7
 8015f2c:	b002      	add	sp, #8
 8015f2e:	bd80      	pop	{r7, pc}
 8015f30:	0000029d 	.word	0x0000029d

08015f34 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015f34:	b580      	push	{r7, lr}
 8015f36:	b082      	sub	sp, #8
 8015f38:	af00      	add	r7, sp, #0
 8015f3a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f3c:	687a      	ldr	r2, [r7, #4]
 8015f3e:	23a7      	movs	r3, #167	@ 0xa7
 8015f40:	009b      	lsls	r3, r3, #2
 8015f42:	5cd3      	ldrb	r3, [r2, r3]
 8015f44:	2b03      	cmp	r3, #3
 8015f46:	d10e      	bne.n	8015f66 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8015f48:	687a      	ldr	r2, [r7, #4]
 8015f4a:	23ad      	movs	r3, #173	@ 0xad
 8015f4c:	009b      	lsls	r3, r3, #2
 8015f4e:	58d3      	ldr	r3, [r2, r3]
 8015f50:	69db      	ldr	r3, [r3, #28]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d007      	beq.n	8015f66 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8015f56:	687a      	ldr	r2, [r7, #4]
 8015f58:	23ad      	movs	r3, #173	@ 0xad
 8015f5a:	009b      	lsls	r3, r3, #2
 8015f5c:	58d3      	ldr	r3, [r2, r3]
 8015f5e:	69db      	ldr	r3, [r3, #28]
 8015f60:	687a      	ldr	r2, [r7, #4]
 8015f62:	0010      	movs	r0, r2
 8015f64:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015f66:	2300      	movs	r3, #0
}
 8015f68:	0018      	movs	r0, r3
 8015f6a:	46bd      	mov	sp, r7
 8015f6c:	b002      	add	sp, #8
 8015f6e:	bd80      	pop	{r7, pc}

08015f70 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8015f70:	b580      	push	{r7, lr}
 8015f72:	b084      	sub	sp, #16
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	6078      	str	r0, [r7, #4]
 8015f78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015f7a:	230f      	movs	r3, #15
 8015f7c:	18fb      	adds	r3, r7, r3
 8015f7e:	2200      	movs	r2, #0
 8015f80:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015f82:	683b      	ldr	r3, [r7, #0]
 8015f84:	781b      	ldrb	r3, [r3, #0]
 8015f86:	001a      	movs	r2, r3
 8015f88:	2360      	movs	r3, #96	@ 0x60
 8015f8a:	4013      	ands	r3, r2
 8015f8c:	2b40      	cmp	r3, #64	@ 0x40
 8015f8e:	d004      	beq.n	8015f9a <USBD_StdDevReq+0x2a>
 8015f90:	d84f      	bhi.n	8016032 <USBD_StdDevReq+0xc2>
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d00b      	beq.n	8015fae <USBD_StdDevReq+0x3e>
 8015f96:	2b20      	cmp	r3, #32
 8015f98:	d14b      	bne.n	8016032 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8015f9a:	687a      	ldr	r2, [r7, #4]
 8015f9c:	23ad      	movs	r3, #173	@ 0xad
 8015f9e:	009b      	lsls	r3, r3, #2
 8015fa0:	58d3      	ldr	r3, [r2, r3]
 8015fa2:	689b      	ldr	r3, [r3, #8]
 8015fa4:	6839      	ldr	r1, [r7, #0]
 8015fa6:	687a      	ldr	r2, [r7, #4]
 8015fa8:	0010      	movs	r0, r2
 8015faa:	4798      	blx	r3
      break;
 8015fac:	e048      	b.n	8016040 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015fae:	683b      	ldr	r3, [r7, #0]
 8015fb0:	785b      	ldrb	r3, [r3, #1]
 8015fb2:	2b09      	cmp	r3, #9
 8015fb4:	d835      	bhi.n	8016022 <USBD_StdDevReq+0xb2>
 8015fb6:	009a      	lsls	r2, r3, #2
 8015fb8:	4b25      	ldr	r3, [pc, #148]	@ (8016050 <USBD_StdDevReq+0xe0>)
 8015fba:	18d3      	adds	r3, r2, r3
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015fc0:	683a      	ldr	r2, [r7, #0]
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	0011      	movs	r1, r2
 8015fc6:	0018      	movs	r0, r3
 8015fc8:	f000 fa52 	bl	8016470 <USBD_GetDescriptor>
          break;
 8015fcc:	e030      	b.n	8016030 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015fce:	683a      	ldr	r2, [r7, #0]
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	0011      	movs	r1, r2
 8015fd4:	0018      	movs	r0, r3
 8015fd6:	f000 fbfd 	bl	80167d4 <USBD_SetAddress>
          break;
 8015fda:	e029      	b.n	8016030 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8015fdc:	683a      	ldr	r2, [r7, #0]
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	0011      	movs	r1, r2
 8015fe2:	0018      	movs	r0, r3
 8015fe4:	f000 fc4a 	bl	801687c <USBD_SetConfig>
          break;
 8015fe8:	e022      	b.n	8016030 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015fea:	683a      	ldr	r2, [r7, #0]
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	0011      	movs	r1, r2
 8015ff0:	0018      	movs	r0, r3
 8015ff2:	f000 fce7 	bl	80169c4 <USBD_GetConfig>
          break;
 8015ff6:	e01b      	b.n	8016030 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015ff8:	683a      	ldr	r2, [r7, #0]
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	0011      	movs	r1, r2
 8015ffe:	0018      	movs	r0, r3
 8016000:	f000 fd1b 	bl	8016a3a <USBD_GetStatus>
          break;
 8016004:	e014      	b.n	8016030 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016006:	683a      	ldr	r2, [r7, #0]
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	0011      	movs	r1, r2
 801600c:	0018      	movs	r0, r3
 801600e:	f000 fd4e 	bl	8016aae <USBD_SetFeature>
          break;
 8016012:	e00d      	b.n	8016030 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016014:	683a      	ldr	r2, [r7, #0]
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	0011      	movs	r1, r2
 801601a:	0018      	movs	r0, r3
 801601c:	f000 fd5d 	bl	8016ada <USBD_ClrFeature>
          break;
 8016020:	e006      	b.n	8016030 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8016022:	683a      	ldr	r2, [r7, #0]
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	0011      	movs	r1, r2
 8016028:	0018      	movs	r0, r3
 801602a:	f000 fdb4 	bl	8016b96 <USBD_CtlError>
          break;
 801602e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8016030:	e006      	b.n	8016040 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8016032:	683a      	ldr	r2, [r7, #0]
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	0011      	movs	r1, r2
 8016038:	0018      	movs	r0, r3
 801603a:	f000 fdac 	bl	8016b96 <USBD_CtlError>
      break;
 801603e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8016040:	230f      	movs	r3, #15
 8016042:	18fb      	adds	r3, r7, r3
 8016044:	781b      	ldrb	r3, [r3, #0]
}
 8016046:	0018      	movs	r0, r3
 8016048:	46bd      	mov	sp, r7
 801604a:	b004      	add	sp, #16
 801604c:	bd80      	pop	{r7, pc}
 801604e:	46c0      	nop			@ (mov r8, r8)
 8016050:	0801c0c8 	.word	0x0801c0c8

08016054 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8016054:	b5b0      	push	{r4, r5, r7, lr}
 8016056:	b084      	sub	sp, #16
 8016058:	af00      	add	r7, sp, #0
 801605a:	6078      	str	r0, [r7, #4]
 801605c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801605e:	230f      	movs	r3, #15
 8016060:	18fb      	adds	r3, r7, r3
 8016062:	2200      	movs	r2, #0
 8016064:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016066:	683b      	ldr	r3, [r7, #0]
 8016068:	781b      	ldrb	r3, [r3, #0]
 801606a:	001a      	movs	r2, r3
 801606c:	2360      	movs	r3, #96	@ 0x60
 801606e:	4013      	ands	r3, r2
 8016070:	2b40      	cmp	r3, #64	@ 0x40
 8016072:	d004      	beq.n	801607e <USBD_StdItfReq+0x2a>
 8016074:	d839      	bhi.n	80160ea <USBD_StdItfReq+0x96>
 8016076:	2b00      	cmp	r3, #0
 8016078:	d001      	beq.n	801607e <USBD_StdItfReq+0x2a>
 801607a:	2b20      	cmp	r3, #32
 801607c:	d135      	bne.n	80160ea <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801607e:	687a      	ldr	r2, [r7, #4]
 8016080:	23a7      	movs	r3, #167	@ 0xa7
 8016082:	009b      	lsls	r3, r3, #2
 8016084:	5cd3      	ldrb	r3, [r2, r3]
 8016086:	3b01      	subs	r3, #1
 8016088:	2b02      	cmp	r3, #2
 801608a:	d825      	bhi.n	80160d8 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801608c:	683b      	ldr	r3, [r7, #0]
 801608e:	889b      	ldrh	r3, [r3, #4]
 8016090:	b2db      	uxtb	r3, r3
 8016092:	2b01      	cmp	r3, #1
 8016094:	d819      	bhi.n	80160ca <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016096:	687a      	ldr	r2, [r7, #4]
 8016098:	23ad      	movs	r3, #173	@ 0xad
 801609a:	009b      	lsls	r3, r3, #2
 801609c:	58d3      	ldr	r3, [r2, r3]
 801609e:	689b      	ldr	r3, [r3, #8]
 80160a0:	250f      	movs	r5, #15
 80160a2:	197c      	adds	r4, r7, r5
 80160a4:	6839      	ldr	r1, [r7, #0]
 80160a6:	687a      	ldr	r2, [r7, #4]
 80160a8:	0010      	movs	r0, r2
 80160aa:	4798      	blx	r3
 80160ac:	0003      	movs	r3, r0
 80160ae:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80160b0:	683b      	ldr	r3, [r7, #0]
 80160b2:	88db      	ldrh	r3, [r3, #6]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d116      	bne.n	80160e6 <USBD_StdItfReq+0x92>
 80160b8:	197b      	adds	r3, r7, r5
 80160ba:	781b      	ldrb	r3, [r3, #0]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d112      	bne.n	80160e6 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	0018      	movs	r0, r3
 80160c4:	f000 fe4f 	bl	8016d66 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80160c8:	e00d      	b.n	80160e6 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80160ca:	683a      	ldr	r2, [r7, #0]
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	0011      	movs	r1, r2
 80160d0:	0018      	movs	r0, r3
 80160d2:	f000 fd60 	bl	8016b96 <USBD_CtlError>
          break;
 80160d6:	e006      	b.n	80160e6 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80160d8:	683a      	ldr	r2, [r7, #0]
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	0011      	movs	r1, r2
 80160de:	0018      	movs	r0, r3
 80160e0:	f000 fd59 	bl	8016b96 <USBD_CtlError>
          break;
 80160e4:	e000      	b.n	80160e8 <USBD_StdItfReq+0x94>
          break;
 80160e6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80160e8:	e006      	b.n	80160f8 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80160ea:	683a      	ldr	r2, [r7, #0]
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	0011      	movs	r1, r2
 80160f0:	0018      	movs	r0, r3
 80160f2:	f000 fd50 	bl	8016b96 <USBD_CtlError>
      break;
 80160f6:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80160f8:	2300      	movs	r3, #0
}
 80160fa:	0018      	movs	r0, r3
 80160fc:	46bd      	mov	sp, r7
 80160fe:	b004      	add	sp, #16
 8016100:	bdb0      	pop	{r4, r5, r7, pc}

08016102 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8016102:	b5b0      	push	{r4, r5, r7, lr}
 8016104:	b084      	sub	sp, #16
 8016106:	af00      	add	r7, sp, #0
 8016108:	6078      	str	r0, [r7, #4]
 801610a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801610c:	230f      	movs	r3, #15
 801610e:	18fb      	adds	r3, r7, r3
 8016110:	2200      	movs	r2, #0
 8016112:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8016114:	683b      	ldr	r3, [r7, #0]
 8016116:	889a      	ldrh	r2, [r3, #4]
 8016118:	230e      	movs	r3, #14
 801611a:	18fb      	adds	r3, r7, r3
 801611c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801611e:	683b      	ldr	r3, [r7, #0]
 8016120:	781b      	ldrb	r3, [r3, #0]
 8016122:	001a      	movs	r2, r3
 8016124:	2360      	movs	r3, #96	@ 0x60
 8016126:	4013      	ands	r3, r2
 8016128:	2b40      	cmp	r3, #64	@ 0x40
 801612a:	d006      	beq.n	801613a <USBD_StdEPReq+0x38>
 801612c:	d900      	bls.n	8016130 <USBD_StdEPReq+0x2e>
 801612e:	e190      	b.n	8016452 <USBD_StdEPReq+0x350>
 8016130:	2b00      	cmp	r3, #0
 8016132:	d00c      	beq.n	801614e <USBD_StdEPReq+0x4c>
 8016134:	2b20      	cmp	r3, #32
 8016136:	d000      	beq.n	801613a <USBD_StdEPReq+0x38>
 8016138:	e18b      	b.n	8016452 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801613a:	687a      	ldr	r2, [r7, #4]
 801613c:	23ad      	movs	r3, #173	@ 0xad
 801613e:	009b      	lsls	r3, r3, #2
 8016140:	58d3      	ldr	r3, [r2, r3]
 8016142:	689b      	ldr	r3, [r3, #8]
 8016144:	6839      	ldr	r1, [r7, #0]
 8016146:	687a      	ldr	r2, [r7, #4]
 8016148:	0010      	movs	r0, r2
 801614a:	4798      	blx	r3
      break;
 801614c:	e188      	b.n	8016460 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801614e:	683b      	ldr	r3, [r7, #0]
 8016150:	781b      	ldrb	r3, [r3, #0]
 8016152:	001a      	movs	r2, r3
 8016154:	2360      	movs	r3, #96	@ 0x60
 8016156:	4013      	ands	r3, r2
 8016158:	2b20      	cmp	r3, #32
 801615a:	d10f      	bne.n	801617c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801615c:	687a      	ldr	r2, [r7, #4]
 801615e:	23ad      	movs	r3, #173	@ 0xad
 8016160:	009b      	lsls	r3, r3, #2
 8016162:	58d3      	ldr	r3, [r2, r3]
 8016164:	689b      	ldr	r3, [r3, #8]
 8016166:	250f      	movs	r5, #15
 8016168:	197c      	adds	r4, r7, r5
 801616a:	6839      	ldr	r1, [r7, #0]
 801616c:	687a      	ldr	r2, [r7, #4]
 801616e:	0010      	movs	r0, r2
 8016170:	4798      	blx	r3
 8016172:	0003      	movs	r3, r0
 8016174:	7023      	strb	r3, [r4, #0]

        return ret;
 8016176:	197b      	adds	r3, r7, r5
 8016178:	781b      	ldrb	r3, [r3, #0]
 801617a:	e174      	b.n	8016466 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801617c:	683b      	ldr	r3, [r7, #0]
 801617e:	785b      	ldrb	r3, [r3, #1]
 8016180:	2b03      	cmp	r3, #3
 8016182:	d007      	beq.n	8016194 <USBD_StdEPReq+0x92>
 8016184:	dd00      	ble.n	8016188 <USBD_StdEPReq+0x86>
 8016186:	e15c      	b.n	8016442 <USBD_StdEPReq+0x340>
 8016188:	2b00      	cmp	r3, #0
 801618a:	d100      	bne.n	801618e <USBD_StdEPReq+0x8c>
 801618c:	e092      	b.n	80162b4 <USBD_StdEPReq+0x1b2>
 801618e:	2b01      	cmp	r3, #1
 8016190:	d04b      	beq.n	801622a <USBD_StdEPReq+0x128>
 8016192:	e156      	b.n	8016442 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016194:	687a      	ldr	r2, [r7, #4]
 8016196:	23a7      	movs	r3, #167	@ 0xa7
 8016198:	009b      	lsls	r3, r3, #2
 801619a:	5cd3      	ldrb	r3, [r2, r3]
 801619c:	2b02      	cmp	r3, #2
 801619e:	d002      	beq.n	80161a6 <USBD_StdEPReq+0xa4>
 80161a0:	2b03      	cmp	r3, #3
 80161a2:	d01d      	beq.n	80161e0 <USBD_StdEPReq+0xde>
 80161a4:	e039      	b.n	801621a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80161a6:	220e      	movs	r2, #14
 80161a8:	18bb      	adds	r3, r7, r2
 80161aa:	781b      	ldrb	r3, [r3, #0]
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d010      	beq.n	80161d2 <USBD_StdEPReq+0xd0>
 80161b0:	18bb      	adds	r3, r7, r2
 80161b2:	781b      	ldrb	r3, [r3, #0]
 80161b4:	2b80      	cmp	r3, #128	@ 0x80
 80161b6:	d00c      	beq.n	80161d2 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80161b8:	18bb      	adds	r3, r7, r2
 80161ba:	781a      	ldrb	r2, [r3, #0]
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	0011      	movs	r1, r2
 80161c0:	0018      	movs	r0, r3
 80161c2:	f001 fa10 	bl	80175e6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	2180      	movs	r1, #128	@ 0x80
 80161ca:	0018      	movs	r0, r3
 80161cc:	f001 fa0b 	bl	80175e6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80161d0:	e02a      	b.n	8016228 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80161d2:	683a      	ldr	r2, [r7, #0]
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	0011      	movs	r1, r2
 80161d8:	0018      	movs	r0, r3
 80161da:	f000 fcdc 	bl	8016b96 <USBD_CtlError>
              break;
 80161de:	e023      	b.n	8016228 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80161e0:	683b      	ldr	r3, [r7, #0]
 80161e2:	885b      	ldrh	r3, [r3, #2]
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d113      	bne.n	8016210 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 80161e8:	220e      	movs	r2, #14
 80161ea:	18bb      	adds	r3, r7, r2
 80161ec:	781b      	ldrb	r3, [r3, #0]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d00e      	beq.n	8016210 <USBD_StdEPReq+0x10e>
 80161f2:	18bb      	adds	r3, r7, r2
 80161f4:	781b      	ldrb	r3, [r3, #0]
 80161f6:	2b80      	cmp	r3, #128	@ 0x80
 80161f8:	d00a      	beq.n	8016210 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80161fa:	683b      	ldr	r3, [r7, #0]
 80161fc:	88db      	ldrh	r3, [r3, #6]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d106      	bne.n	8016210 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8016202:	18bb      	adds	r3, r7, r2
 8016204:	781a      	ldrb	r2, [r3, #0]
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	0011      	movs	r1, r2
 801620a:	0018      	movs	r0, r3
 801620c:	f001 f9eb 	bl	80175e6 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	0018      	movs	r0, r3
 8016214:	f000 fda7 	bl	8016d66 <USBD_CtlSendStatus>

              break;
 8016218:	e006      	b.n	8016228 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801621a:	683a      	ldr	r2, [r7, #0]
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	0011      	movs	r1, r2
 8016220:	0018      	movs	r0, r3
 8016222:	f000 fcb8 	bl	8016b96 <USBD_CtlError>
              break;
 8016226:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8016228:	e112      	b.n	8016450 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801622a:	687a      	ldr	r2, [r7, #4]
 801622c:	23a7      	movs	r3, #167	@ 0xa7
 801622e:	009b      	lsls	r3, r3, #2
 8016230:	5cd3      	ldrb	r3, [r2, r3]
 8016232:	2b02      	cmp	r3, #2
 8016234:	d002      	beq.n	801623c <USBD_StdEPReq+0x13a>
 8016236:	2b03      	cmp	r3, #3
 8016238:	d01d      	beq.n	8016276 <USBD_StdEPReq+0x174>
 801623a:	e032      	b.n	80162a2 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801623c:	220e      	movs	r2, #14
 801623e:	18bb      	adds	r3, r7, r2
 8016240:	781b      	ldrb	r3, [r3, #0]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d010      	beq.n	8016268 <USBD_StdEPReq+0x166>
 8016246:	18bb      	adds	r3, r7, r2
 8016248:	781b      	ldrb	r3, [r3, #0]
 801624a:	2b80      	cmp	r3, #128	@ 0x80
 801624c:	d00c      	beq.n	8016268 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801624e:	18bb      	adds	r3, r7, r2
 8016250:	781a      	ldrb	r2, [r3, #0]
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	0011      	movs	r1, r2
 8016256:	0018      	movs	r0, r3
 8016258:	f001 f9c5 	bl	80175e6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	2180      	movs	r1, #128	@ 0x80
 8016260:	0018      	movs	r0, r3
 8016262:	f001 f9c0 	bl	80175e6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016266:	e024      	b.n	80162b2 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8016268:	683a      	ldr	r2, [r7, #0]
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	0011      	movs	r1, r2
 801626e:	0018      	movs	r0, r3
 8016270:	f000 fc91 	bl	8016b96 <USBD_CtlError>
              break;
 8016274:	e01d      	b.n	80162b2 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016276:	683b      	ldr	r3, [r7, #0]
 8016278:	885b      	ldrh	r3, [r3, #2]
 801627a:	2b00      	cmp	r3, #0
 801627c:	d118      	bne.n	80162b0 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801627e:	210e      	movs	r1, #14
 8016280:	187b      	adds	r3, r7, r1
 8016282:	781b      	ldrb	r3, [r3, #0]
 8016284:	227f      	movs	r2, #127	@ 0x7f
 8016286:	4013      	ands	r3, r2
 8016288:	d006      	beq.n	8016298 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801628a:	187b      	adds	r3, r7, r1
 801628c:	781a      	ldrb	r2, [r3, #0]
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	0011      	movs	r1, r2
 8016292:	0018      	movs	r0, r3
 8016294:	f001 f9d2 	bl	801763c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	0018      	movs	r0, r3
 801629c:	f000 fd63 	bl	8016d66 <USBD_CtlSendStatus>
              }
              break;
 80162a0:	e006      	b.n	80162b0 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 80162a2:	683a      	ldr	r2, [r7, #0]
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	0011      	movs	r1, r2
 80162a8:	0018      	movs	r0, r3
 80162aa:	f000 fc74 	bl	8016b96 <USBD_CtlError>
              break;
 80162ae:	e000      	b.n	80162b2 <USBD_StdEPReq+0x1b0>
              break;
 80162b0:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80162b2:	e0cd      	b.n	8016450 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80162b4:	687a      	ldr	r2, [r7, #4]
 80162b6:	23a7      	movs	r3, #167	@ 0xa7
 80162b8:	009b      	lsls	r3, r3, #2
 80162ba:	5cd3      	ldrb	r3, [r2, r3]
 80162bc:	2b02      	cmp	r3, #2
 80162be:	d002      	beq.n	80162c6 <USBD_StdEPReq+0x1c4>
 80162c0:	2b03      	cmp	r3, #3
 80162c2:	d03c      	beq.n	801633e <USBD_StdEPReq+0x23c>
 80162c4:	e0b5      	b.n	8016432 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80162c6:	220e      	movs	r2, #14
 80162c8:	18bb      	adds	r3, r7, r2
 80162ca:	781b      	ldrb	r3, [r3, #0]
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d00a      	beq.n	80162e6 <USBD_StdEPReq+0x1e4>
 80162d0:	18bb      	adds	r3, r7, r2
 80162d2:	781b      	ldrb	r3, [r3, #0]
 80162d4:	2b80      	cmp	r3, #128	@ 0x80
 80162d6:	d006      	beq.n	80162e6 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 80162d8:	683a      	ldr	r2, [r7, #0]
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	0011      	movs	r1, r2
 80162de:	0018      	movs	r0, r3
 80162e0:	f000 fc59 	bl	8016b96 <USBD_CtlError>
                break;
 80162e4:	e0ac      	b.n	8016440 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80162e6:	220e      	movs	r2, #14
 80162e8:	18bb      	adds	r3, r7, r2
 80162ea:	781b      	ldrb	r3, [r3, #0]
 80162ec:	b25b      	sxtb	r3, r3
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	da0c      	bge.n	801630c <USBD_StdEPReq+0x20a>
 80162f2:	18bb      	adds	r3, r7, r2
 80162f4:	781b      	ldrb	r3, [r3, #0]
 80162f6:	227f      	movs	r2, #127	@ 0x7f
 80162f8:	401a      	ands	r2, r3
 80162fa:	0013      	movs	r3, r2
 80162fc:	009b      	lsls	r3, r3, #2
 80162fe:	189b      	adds	r3, r3, r2
 8016300:	009b      	lsls	r3, r3, #2
 8016302:	3310      	adds	r3, #16
 8016304:	687a      	ldr	r2, [r7, #4]
 8016306:	18d3      	adds	r3, r2, r3
 8016308:	3304      	adds	r3, #4
 801630a:	e00d      	b.n	8016328 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801630c:	230e      	movs	r3, #14
 801630e:	18fb      	adds	r3, r7, r3
 8016310:	781b      	ldrb	r3, [r3, #0]
 8016312:	227f      	movs	r2, #127	@ 0x7f
 8016314:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016316:	0013      	movs	r3, r2
 8016318:	009b      	lsls	r3, r3, #2
 801631a:	189b      	adds	r3, r3, r2
 801631c:	009b      	lsls	r3, r3, #2
 801631e:	3351      	adds	r3, #81	@ 0x51
 8016320:	33ff      	adds	r3, #255	@ 0xff
 8016322:	687a      	ldr	r2, [r7, #4]
 8016324:	18d3      	adds	r3, r2, r3
 8016326:	3304      	adds	r3, #4
 8016328:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801632a:	68bb      	ldr	r3, [r7, #8]
 801632c:	2200      	movs	r2, #0
 801632e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8016330:	68b9      	ldr	r1, [r7, #8]
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	2202      	movs	r2, #2
 8016336:	0018      	movs	r0, r3
 8016338:	f000 fcab 	bl	8016c92 <USBD_CtlSendData>
              break;
 801633c:	e080      	b.n	8016440 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801633e:	220e      	movs	r2, #14
 8016340:	18bb      	adds	r3, r7, r2
 8016342:	781b      	ldrb	r3, [r3, #0]
 8016344:	b25b      	sxtb	r3, r3
 8016346:	2b00      	cmp	r3, #0
 8016348:	da14      	bge.n	8016374 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801634a:	18bb      	adds	r3, r7, r2
 801634c:	781b      	ldrb	r3, [r3, #0]
 801634e:	220f      	movs	r2, #15
 8016350:	401a      	ands	r2, r3
 8016352:	6879      	ldr	r1, [r7, #4]
 8016354:	0013      	movs	r3, r2
 8016356:	009b      	lsls	r3, r3, #2
 8016358:	189b      	adds	r3, r3, r2
 801635a:	009b      	lsls	r3, r3, #2
 801635c:	18cb      	adds	r3, r1, r3
 801635e:	3318      	adds	r3, #24
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d11e      	bne.n	80163a4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8016366:	683a      	ldr	r2, [r7, #0]
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	0011      	movs	r1, r2
 801636c:	0018      	movs	r0, r3
 801636e:	f000 fc12 	bl	8016b96 <USBD_CtlError>
                  break;
 8016372:	e065      	b.n	8016440 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016374:	230e      	movs	r3, #14
 8016376:	18fb      	adds	r3, r7, r3
 8016378:	781b      	ldrb	r3, [r3, #0]
 801637a:	220f      	movs	r2, #15
 801637c:	401a      	ands	r2, r3
 801637e:	6878      	ldr	r0, [r7, #4]
 8016380:	23ac      	movs	r3, #172	@ 0xac
 8016382:	0059      	lsls	r1, r3, #1
 8016384:	0013      	movs	r3, r2
 8016386:	009b      	lsls	r3, r3, #2
 8016388:	189b      	adds	r3, r3, r2
 801638a:	009b      	lsls	r3, r3, #2
 801638c:	18c3      	adds	r3, r0, r3
 801638e:	185b      	adds	r3, r3, r1
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d106      	bne.n	80163a4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8016396:	683a      	ldr	r2, [r7, #0]
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	0011      	movs	r1, r2
 801639c:	0018      	movs	r0, r3
 801639e:	f000 fbfa 	bl	8016b96 <USBD_CtlError>
                  break;
 80163a2:	e04d      	b.n	8016440 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80163a4:	220e      	movs	r2, #14
 80163a6:	18bb      	adds	r3, r7, r2
 80163a8:	781b      	ldrb	r3, [r3, #0]
 80163aa:	b25b      	sxtb	r3, r3
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	da0c      	bge.n	80163ca <USBD_StdEPReq+0x2c8>
 80163b0:	18bb      	adds	r3, r7, r2
 80163b2:	781b      	ldrb	r3, [r3, #0]
 80163b4:	227f      	movs	r2, #127	@ 0x7f
 80163b6:	401a      	ands	r2, r3
 80163b8:	0013      	movs	r3, r2
 80163ba:	009b      	lsls	r3, r3, #2
 80163bc:	189b      	adds	r3, r3, r2
 80163be:	009b      	lsls	r3, r3, #2
 80163c0:	3310      	adds	r3, #16
 80163c2:	687a      	ldr	r2, [r7, #4]
 80163c4:	18d3      	adds	r3, r2, r3
 80163c6:	3304      	adds	r3, #4
 80163c8:	e00d      	b.n	80163e6 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80163ca:	230e      	movs	r3, #14
 80163cc:	18fb      	adds	r3, r7, r3
 80163ce:	781b      	ldrb	r3, [r3, #0]
 80163d0:	227f      	movs	r2, #127	@ 0x7f
 80163d2:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80163d4:	0013      	movs	r3, r2
 80163d6:	009b      	lsls	r3, r3, #2
 80163d8:	189b      	adds	r3, r3, r2
 80163da:	009b      	lsls	r3, r3, #2
 80163dc:	3351      	adds	r3, #81	@ 0x51
 80163de:	33ff      	adds	r3, #255	@ 0xff
 80163e0:	687a      	ldr	r2, [r7, #4]
 80163e2:	18d3      	adds	r3, r2, r3
 80163e4:	3304      	adds	r3, #4
 80163e6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80163e8:	220e      	movs	r2, #14
 80163ea:	18bb      	adds	r3, r7, r2
 80163ec:	781b      	ldrb	r3, [r3, #0]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d003      	beq.n	80163fa <USBD_StdEPReq+0x2f8>
 80163f2:	18bb      	adds	r3, r7, r2
 80163f4:	781b      	ldrb	r3, [r3, #0]
 80163f6:	2b80      	cmp	r3, #128	@ 0x80
 80163f8:	d103      	bne.n	8016402 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 80163fa:	68bb      	ldr	r3, [r7, #8]
 80163fc:	2200      	movs	r2, #0
 80163fe:	601a      	str	r2, [r3, #0]
 8016400:	e010      	b.n	8016424 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8016402:	230e      	movs	r3, #14
 8016404:	18fb      	adds	r3, r7, r3
 8016406:	781a      	ldrb	r2, [r3, #0]
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	0011      	movs	r1, r2
 801640c:	0018      	movs	r0, r3
 801640e:	f001 f940 	bl	8017692 <USBD_LL_IsStallEP>
 8016412:	1e03      	subs	r3, r0, #0
 8016414:	d003      	beq.n	801641e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8016416:	68bb      	ldr	r3, [r7, #8]
 8016418:	2201      	movs	r2, #1
 801641a:	601a      	str	r2, [r3, #0]
 801641c:	e002      	b.n	8016424 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801641e:	68bb      	ldr	r3, [r7, #8]
 8016420:	2200      	movs	r2, #0
 8016422:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8016424:	68b9      	ldr	r1, [r7, #8]
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	2202      	movs	r2, #2
 801642a:	0018      	movs	r0, r3
 801642c:	f000 fc31 	bl	8016c92 <USBD_CtlSendData>
              break;
 8016430:	e006      	b.n	8016440 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8016432:	683a      	ldr	r2, [r7, #0]
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	0011      	movs	r1, r2
 8016438:	0018      	movs	r0, r3
 801643a:	f000 fbac 	bl	8016b96 <USBD_CtlError>
              break;
 801643e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8016440:	e006      	b.n	8016450 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8016442:	683a      	ldr	r2, [r7, #0]
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	0011      	movs	r1, r2
 8016448:	0018      	movs	r0, r3
 801644a:	f000 fba4 	bl	8016b96 <USBD_CtlError>
          break;
 801644e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8016450:	e006      	b.n	8016460 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8016452:	683a      	ldr	r2, [r7, #0]
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	0011      	movs	r1, r2
 8016458:	0018      	movs	r0, r3
 801645a:	f000 fb9c 	bl	8016b96 <USBD_CtlError>
      break;
 801645e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8016460:	230f      	movs	r3, #15
 8016462:	18fb      	adds	r3, r7, r3
 8016464:	781b      	ldrb	r3, [r3, #0]
}
 8016466:	0018      	movs	r0, r3
 8016468:	46bd      	mov	sp, r7
 801646a:	b004      	add	sp, #16
 801646c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08016470 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b084      	sub	sp, #16
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]
 8016478:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801647a:	2308      	movs	r3, #8
 801647c:	18fb      	adds	r3, r7, r3
 801647e:	2200      	movs	r2, #0
 8016480:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8016482:	2300      	movs	r3, #0
 8016484:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016486:	230b      	movs	r3, #11
 8016488:	18fb      	adds	r3, r7, r3
 801648a:	2200      	movs	r2, #0
 801648c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801648e:	683b      	ldr	r3, [r7, #0]
 8016490:	885b      	ldrh	r3, [r3, #2]
 8016492:	0a1b      	lsrs	r3, r3, #8
 8016494:	b29b      	uxth	r3, r3
 8016496:	2b07      	cmp	r3, #7
 8016498:	d900      	bls.n	801649c <USBD_GetDescriptor+0x2c>
 801649a:	e159      	b.n	8016750 <USBD_GetDescriptor+0x2e0>
 801649c:	009a      	lsls	r2, r3, #2
 801649e:	4bcb      	ldr	r3, [pc, #812]	@ (80167cc <USBD_GetDescriptor+0x35c>)
 80164a0:	18d3      	adds	r3, r2, r3
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80164a6:	687a      	ldr	r2, [r7, #4]
 80164a8:	23ac      	movs	r3, #172	@ 0xac
 80164aa:	009b      	lsls	r3, r3, #2
 80164ac:	58d3      	ldr	r3, [r2, r3]
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	687a      	ldr	r2, [r7, #4]
 80164b2:	7c12      	ldrb	r2, [r2, #16]
 80164b4:	2108      	movs	r1, #8
 80164b6:	1879      	adds	r1, r7, r1
 80164b8:	0010      	movs	r0, r2
 80164ba:	4798      	blx	r3
 80164bc:	0003      	movs	r3, r0
 80164be:	60fb      	str	r3, [r7, #12]
      break;
 80164c0:	e153      	b.n	801676a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	7c1b      	ldrb	r3, [r3, #16]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d10f      	bne.n	80164ea <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80164ca:	687a      	ldr	r2, [r7, #4]
 80164cc:	23ad      	movs	r3, #173	@ 0xad
 80164ce:	009b      	lsls	r3, r3, #2
 80164d0:	58d3      	ldr	r3, [r2, r3]
 80164d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80164d4:	2208      	movs	r2, #8
 80164d6:	18ba      	adds	r2, r7, r2
 80164d8:	0010      	movs	r0, r2
 80164da:	4798      	blx	r3
 80164dc:	0003      	movs	r3, r0
 80164de:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	3301      	adds	r3, #1
 80164e4:	2202      	movs	r2, #2
 80164e6:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80164e8:	e13f      	b.n	801676a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80164ea:	687a      	ldr	r2, [r7, #4]
 80164ec:	23ad      	movs	r3, #173	@ 0xad
 80164ee:	009b      	lsls	r3, r3, #2
 80164f0:	58d3      	ldr	r3, [r2, r3]
 80164f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164f4:	2208      	movs	r2, #8
 80164f6:	18ba      	adds	r2, r7, r2
 80164f8:	0010      	movs	r0, r2
 80164fa:	4798      	blx	r3
 80164fc:	0003      	movs	r3, r0
 80164fe:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	3301      	adds	r3, #1
 8016504:	2202      	movs	r2, #2
 8016506:	701a      	strb	r2, [r3, #0]
      break;
 8016508:	e12f      	b.n	801676a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801650a:	683b      	ldr	r3, [r7, #0]
 801650c:	885b      	ldrh	r3, [r3, #2]
 801650e:	b2db      	uxtb	r3, r3
 8016510:	2b05      	cmp	r3, #5
 8016512:	d900      	bls.n	8016516 <USBD_GetDescriptor+0xa6>
 8016514:	e0d0      	b.n	80166b8 <USBD_GetDescriptor+0x248>
 8016516:	009a      	lsls	r2, r3, #2
 8016518:	4bad      	ldr	r3, [pc, #692]	@ (80167d0 <USBD_GetDescriptor+0x360>)
 801651a:	18d3      	adds	r3, r2, r3
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016520:	687a      	ldr	r2, [r7, #4]
 8016522:	23ac      	movs	r3, #172	@ 0xac
 8016524:	009b      	lsls	r3, r3, #2
 8016526:	58d3      	ldr	r3, [r2, r3]
 8016528:	685b      	ldr	r3, [r3, #4]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d00d      	beq.n	801654a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801652e:	687a      	ldr	r2, [r7, #4]
 8016530:	23ac      	movs	r3, #172	@ 0xac
 8016532:	009b      	lsls	r3, r3, #2
 8016534:	58d3      	ldr	r3, [r2, r3]
 8016536:	685b      	ldr	r3, [r3, #4]
 8016538:	687a      	ldr	r2, [r7, #4]
 801653a:	7c12      	ldrb	r2, [r2, #16]
 801653c:	2108      	movs	r1, #8
 801653e:	1879      	adds	r1, r7, r1
 8016540:	0010      	movs	r0, r2
 8016542:	4798      	blx	r3
 8016544:	0003      	movs	r3, r0
 8016546:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016548:	e0c3      	b.n	80166d2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801654a:	683a      	ldr	r2, [r7, #0]
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	0011      	movs	r1, r2
 8016550:	0018      	movs	r0, r3
 8016552:	f000 fb20 	bl	8016b96 <USBD_CtlError>
            err++;
 8016556:	210b      	movs	r1, #11
 8016558:	187b      	adds	r3, r7, r1
 801655a:	781a      	ldrb	r2, [r3, #0]
 801655c:	187b      	adds	r3, r7, r1
 801655e:	3201      	adds	r2, #1
 8016560:	701a      	strb	r2, [r3, #0]
          break;
 8016562:	e0b6      	b.n	80166d2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016564:	687a      	ldr	r2, [r7, #4]
 8016566:	23ac      	movs	r3, #172	@ 0xac
 8016568:	009b      	lsls	r3, r3, #2
 801656a:	58d3      	ldr	r3, [r2, r3]
 801656c:	689b      	ldr	r3, [r3, #8]
 801656e:	2b00      	cmp	r3, #0
 8016570:	d00d      	beq.n	801658e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016572:	687a      	ldr	r2, [r7, #4]
 8016574:	23ac      	movs	r3, #172	@ 0xac
 8016576:	009b      	lsls	r3, r3, #2
 8016578:	58d3      	ldr	r3, [r2, r3]
 801657a:	689b      	ldr	r3, [r3, #8]
 801657c:	687a      	ldr	r2, [r7, #4]
 801657e:	7c12      	ldrb	r2, [r2, #16]
 8016580:	2108      	movs	r1, #8
 8016582:	1879      	adds	r1, r7, r1
 8016584:	0010      	movs	r0, r2
 8016586:	4798      	blx	r3
 8016588:	0003      	movs	r3, r0
 801658a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801658c:	e0a1      	b.n	80166d2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801658e:	683a      	ldr	r2, [r7, #0]
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	0011      	movs	r1, r2
 8016594:	0018      	movs	r0, r3
 8016596:	f000 fafe 	bl	8016b96 <USBD_CtlError>
            err++;
 801659a:	210b      	movs	r1, #11
 801659c:	187b      	adds	r3, r7, r1
 801659e:	781a      	ldrb	r2, [r3, #0]
 80165a0:	187b      	adds	r3, r7, r1
 80165a2:	3201      	adds	r2, #1
 80165a4:	701a      	strb	r2, [r3, #0]
          break;
 80165a6:	e094      	b.n	80166d2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80165a8:	687a      	ldr	r2, [r7, #4]
 80165aa:	23ac      	movs	r3, #172	@ 0xac
 80165ac:	009b      	lsls	r3, r3, #2
 80165ae:	58d3      	ldr	r3, [r2, r3]
 80165b0:	68db      	ldr	r3, [r3, #12]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d00d      	beq.n	80165d2 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80165b6:	687a      	ldr	r2, [r7, #4]
 80165b8:	23ac      	movs	r3, #172	@ 0xac
 80165ba:	009b      	lsls	r3, r3, #2
 80165bc:	58d3      	ldr	r3, [r2, r3]
 80165be:	68db      	ldr	r3, [r3, #12]
 80165c0:	687a      	ldr	r2, [r7, #4]
 80165c2:	7c12      	ldrb	r2, [r2, #16]
 80165c4:	2108      	movs	r1, #8
 80165c6:	1879      	adds	r1, r7, r1
 80165c8:	0010      	movs	r0, r2
 80165ca:	4798      	blx	r3
 80165cc:	0003      	movs	r3, r0
 80165ce:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80165d0:	e07f      	b.n	80166d2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80165d2:	683a      	ldr	r2, [r7, #0]
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	0011      	movs	r1, r2
 80165d8:	0018      	movs	r0, r3
 80165da:	f000 fadc 	bl	8016b96 <USBD_CtlError>
            err++;
 80165de:	210b      	movs	r1, #11
 80165e0:	187b      	adds	r3, r7, r1
 80165e2:	781a      	ldrb	r2, [r3, #0]
 80165e4:	187b      	adds	r3, r7, r1
 80165e6:	3201      	adds	r2, #1
 80165e8:	701a      	strb	r2, [r3, #0]
          break;
 80165ea:	e072      	b.n	80166d2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80165ec:	687a      	ldr	r2, [r7, #4]
 80165ee:	23ac      	movs	r3, #172	@ 0xac
 80165f0:	009b      	lsls	r3, r3, #2
 80165f2:	58d3      	ldr	r3, [r2, r3]
 80165f4:	691b      	ldr	r3, [r3, #16]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d00d      	beq.n	8016616 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80165fa:	687a      	ldr	r2, [r7, #4]
 80165fc:	23ac      	movs	r3, #172	@ 0xac
 80165fe:	009b      	lsls	r3, r3, #2
 8016600:	58d3      	ldr	r3, [r2, r3]
 8016602:	691b      	ldr	r3, [r3, #16]
 8016604:	687a      	ldr	r2, [r7, #4]
 8016606:	7c12      	ldrb	r2, [r2, #16]
 8016608:	2108      	movs	r1, #8
 801660a:	1879      	adds	r1, r7, r1
 801660c:	0010      	movs	r0, r2
 801660e:	4798      	blx	r3
 8016610:	0003      	movs	r3, r0
 8016612:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016614:	e05d      	b.n	80166d2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8016616:	683a      	ldr	r2, [r7, #0]
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	0011      	movs	r1, r2
 801661c:	0018      	movs	r0, r3
 801661e:	f000 faba 	bl	8016b96 <USBD_CtlError>
            err++;
 8016622:	210b      	movs	r1, #11
 8016624:	187b      	adds	r3, r7, r1
 8016626:	781a      	ldrb	r2, [r3, #0]
 8016628:	187b      	adds	r3, r7, r1
 801662a:	3201      	adds	r2, #1
 801662c:	701a      	strb	r2, [r3, #0]
          break;
 801662e:	e050      	b.n	80166d2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016630:	687a      	ldr	r2, [r7, #4]
 8016632:	23ac      	movs	r3, #172	@ 0xac
 8016634:	009b      	lsls	r3, r3, #2
 8016636:	58d3      	ldr	r3, [r2, r3]
 8016638:	695b      	ldr	r3, [r3, #20]
 801663a:	2b00      	cmp	r3, #0
 801663c:	d00d      	beq.n	801665a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801663e:	687a      	ldr	r2, [r7, #4]
 8016640:	23ac      	movs	r3, #172	@ 0xac
 8016642:	009b      	lsls	r3, r3, #2
 8016644:	58d3      	ldr	r3, [r2, r3]
 8016646:	695b      	ldr	r3, [r3, #20]
 8016648:	687a      	ldr	r2, [r7, #4]
 801664a:	7c12      	ldrb	r2, [r2, #16]
 801664c:	2108      	movs	r1, #8
 801664e:	1879      	adds	r1, r7, r1
 8016650:	0010      	movs	r0, r2
 8016652:	4798      	blx	r3
 8016654:	0003      	movs	r3, r0
 8016656:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016658:	e03b      	b.n	80166d2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801665a:	683a      	ldr	r2, [r7, #0]
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	0011      	movs	r1, r2
 8016660:	0018      	movs	r0, r3
 8016662:	f000 fa98 	bl	8016b96 <USBD_CtlError>
            err++;
 8016666:	210b      	movs	r1, #11
 8016668:	187b      	adds	r3, r7, r1
 801666a:	781a      	ldrb	r2, [r3, #0]
 801666c:	187b      	adds	r3, r7, r1
 801666e:	3201      	adds	r2, #1
 8016670:	701a      	strb	r2, [r3, #0]
          break;
 8016672:	e02e      	b.n	80166d2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016674:	687a      	ldr	r2, [r7, #4]
 8016676:	23ac      	movs	r3, #172	@ 0xac
 8016678:	009b      	lsls	r3, r3, #2
 801667a:	58d3      	ldr	r3, [r2, r3]
 801667c:	699b      	ldr	r3, [r3, #24]
 801667e:	2b00      	cmp	r3, #0
 8016680:	d00d      	beq.n	801669e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016682:	687a      	ldr	r2, [r7, #4]
 8016684:	23ac      	movs	r3, #172	@ 0xac
 8016686:	009b      	lsls	r3, r3, #2
 8016688:	58d3      	ldr	r3, [r2, r3]
 801668a:	699b      	ldr	r3, [r3, #24]
 801668c:	687a      	ldr	r2, [r7, #4]
 801668e:	7c12      	ldrb	r2, [r2, #16]
 8016690:	2108      	movs	r1, #8
 8016692:	1879      	adds	r1, r7, r1
 8016694:	0010      	movs	r0, r2
 8016696:	4798      	blx	r3
 8016698:	0003      	movs	r3, r0
 801669a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801669c:	e019      	b.n	80166d2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801669e:	683a      	ldr	r2, [r7, #0]
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	0011      	movs	r1, r2
 80166a4:	0018      	movs	r0, r3
 80166a6:	f000 fa76 	bl	8016b96 <USBD_CtlError>
            err++;
 80166aa:	210b      	movs	r1, #11
 80166ac:	187b      	adds	r3, r7, r1
 80166ae:	781a      	ldrb	r2, [r3, #0]
 80166b0:	187b      	adds	r3, r7, r1
 80166b2:	3201      	adds	r2, #1
 80166b4:	701a      	strb	r2, [r3, #0]
          break;
 80166b6:	e00c      	b.n	80166d2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80166b8:	683a      	ldr	r2, [r7, #0]
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	0011      	movs	r1, r2
 80166be:	0018      	movs	r0, r3
 80166c0:	f000 fa69 	bl	8016b96 <USBD_CtlError>
          err++;
 80166c4:	210b      	movs	r1, #11
 80166c6:	187b      	adds	r3, r7, r1
 80166c8:	781a      	ldrb	r2, [r3, #0]
 80166ca:	187b      	adds	r3, r7, r1
 80166cc:	3201      	adds	r2, #1
 80166ce:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 80166d0:	e04b      	b.n	801676a <USBD_GetDescriptor+0x2fa>
 80166d2:	e04a      	b.n	801676a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	7c1b      	ldrb	r3, [r3, #16]
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d10b      	bne.n	80166f4 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80166dc:	687a      	ldr	r2, [r7, #4]
 80166de:	23ad      	movs	r3, #173	@ 0xad
 80166e0:	009b      	lsls	r3, r3, #2
 80166e2:	58d3      	ldr	r3, [r2, r3]
 80166e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80166e6:	2208      	movs	r2, #8
 80166e8:	18ba      	adds	r2, r7, r2
 80166ea:	0010      	movs	r0, r2
 80166ec:	4798      	blx	r3
 80166ee:	0003      	movs	r3, r0
 80166f0:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80166f2:	e03a      	b.n	801676a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80166f4:	683a      	ldr	r2, [r7, #0]
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	0011      	movs	r1, r2
 80166fa:	0018      	movs	r0, r3
 80166fc:	f000 fa4b 	bl	8016b96 <USBD_CtlError>
        err++;
 8016700:	210b      	movs	r1, #11
 8016702:	187b      	adds	r3, r7, r1
 8016704:	781a      	ldrb	r2, [r3, #0]
 8016706:	187b      	adds	r3, r7, r1
 8016708:	3201      	adds	r2, #1
 801670a:	701a      	strb	r2, [r3, #0]
      break;
 801670c:	e02d      	b.n	801676a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	7c1b      	ldrb	r3, [r3, #16]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d10f      	bne.n	8016736 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8016716:	687a      	ldr	r2, [r7, #4]
 8016718:	23ad      	movs	r3, #173	@ 0xad
 801671a:	009b      	lsls	r3, r3, #2
 801671c:	58d3      	ldr	r3, [r2, r3]
 801671e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016720:	2208      	movs	r2, #8
 8016722:	18ba      	adds	r2, r7, r2
 8016724:	0010      	movs	r0, r2
 8016726:	4798      	blx	r3
 8016728:	0003      	movs	r3, r0
 801672a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	3301      	adds	r3, #1
 8016730:	2207      	movs	r2, #7
 8016732:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016734:	e019      	b.n	801676a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8016736:	683a      	ldr	r2, [r7, #0]
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	0011      	movs	r1, r2
 801673c:	0018      	movs	r0, r3
 801673e:	f000 fa2a 	bl	8016b96 <USBD_CtlError>
        err++;
 8016742:	210b      	movs	r1, #11
 8016744:	187b      	adds	r3, r7, r1
 8016746:	781a      	ldrb	r2, [r3, #0]
 8016748:	187b      	adds	r3, r7, r1
 801674a:	3201      	adds	r2, #1
 801674c:	701a      	strb	r2, [r3, #0]
      break;
 801674e:	e00c      	b.n	801676a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8016750:	683a      	ldr	r2, [r7, #0]
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	0011      	movs	r1, r2
 8016756:	0018      	movs	r0, r3
 8016758:	f000 fa1d 	bl	8016b96 <USBD_CtlError>
      err++;
 801675c:	210b      	movs	r1, #11
 801675e:	187b      	adds	r3, r7, r1
 8016760:	781a      	ldrb	r2, [r3, #0]
 8016762:	187b      	adds	r3, r7, r1
 8016764:	3201      	adds	r2, #1
 8016766:	701a      	strb	r2, [r3, #0]
      break;
 8016768:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801676a:	230b      	movs	r3, #11
 801676c:	18fb      	adds	r3, r7, r3
 801676e:	781b      	ldrb	r3, [r3, #0]
 8016770:	2b00      	cmp	r3, #0
 8016772:	d127      	bne.n	80167c4 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8016774:	2108      	movs	r1, #8
 8016776:	187b      	adds	r3, r7, r1
 8016778:	881b      	ldrh	r3, [r3, #0]
 801677a:	2b00      	cmp	r3, #0
 801677c:	d019      	beq.n	80167b2 <USBD_GetDescriptor+0x342>
 801677e:	683b      	ldr	r3, [r7, #0]
 8016780:	88db      	ldrh	r3, [r3, #6]
 8016782:	2b00      	cmp	r3, #0
 8016784:	d015      	beq.n	80167b2 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8016786:	683b      	ldr	r3, [r7, #0]
 8016788:	88da      	ldrh	r2, [r3, #6]
 801678a:	187b      	adds	r3, r7, r1
 801678c:	881b      	ldrh	r3, [r3, #0]
 801678e:	1c18      	adds	r0, r3, #0
 8016790:	1c11      	adds	r1, r2, #0
 8016792:	b28a      	uxth	r2, r1
 8016794:	b283      	uxth	r3, r0
 8016796:	429a      	cmp	r2, r3
 8016798:	d900      	bls.n	801679c <USBD_GetDescriptor+0x32c>
 801679a:	1c01      	adds	r1, r0, #0
 801679c:	b28a      	uxth	r2, r1
 801679e:	2108      	movs	r1, #8
 80167a0:	187b      	adds	r3, r7, r1
 80167a2:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80167a4:	187b      	adds	r3, r7, r1
 80167a6:	881a      	ldrh	r2, [r3, #0]
 80167a8:	68f9      	ldr	r1, [r7, #12]
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	0018      	movs	r0, r3
 80167ae:	f000 fa70 	bl	8016c92 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80167b2:	683b      	ldr	r3, [r7, #0]
 80167b4:	88db      	ldrh	r3, [r3, #6]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d105      	bne.n	80167c6 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	0018      	movs	r0, r3
 80167be:	f000 fad2 	bl	8016d66 <USBD_CtlSendStatus>
 80167c2:	e000      	b.n	80167c6 <USBD_GetDescriptor+0x356>
    return;
 80167c4:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80167c6:	46bd      	mov	sp, r7
 80167c8:	b004      	add	sp, #16
 80167ca:	bd80      	pop	{r7, pc}
 80167cc:	0801c0f0 	.word	0x0801c0f0
 80167d0:	0801c110 	.word	0x0801c110

080167d4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80167d4:	b590      	push	{r4, r7, lr}
 80167d6:	b085      	sub	sp, #20
 80167d8:	af00      	add	r7, sp, #0
 80167da:	6078      	str	r0, [r7, #4]
 80167dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80167de:	683b      	ldr	r3, [r7, #0]
 80167e0:	889b      	ldrh	r3, [r3, #4]
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d13d      	bne.n	8016862 <USBD_SetAddress+0x8e>
 80167e6:	683b      	ldr	r3, [r7, #0]
 80167e8:	88db      	ldrh	r3, [r3, #6]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d139      	bne.n	8016862 <USBD_SetAddress+0x8e>
 80167ee:	683b      	ldr	r3, [r7, #0]
 80167f0:	885b      	ldrh	r3, [r3, #2]
 80167f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80167f4:	d835      	bhi.n	8016862 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80167f6:	683b      	ldr	r3, [r7, #0]
 80167f8:	885b      	ldrh	r3, [r3, #2]
 80167fa:	b2da      	uxtb	r2, r3
 80167fc:	230f      	movs	r3, #15
 80167fe:	18fb      	adds	r3, r7, r3
 8016800:	217f      	movs	r1, #127	@ 0x7f
 8016802:	400a      	ands	r2, r1
 8016804:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016806:	687a      	ldr	r2, [r7, #4]
 8016808:	23a7      	movs	r3, #167	@ 0xa7
 801680a:	009b      	lsls	r3, r3, #2
 801680c:	5cd3      	ldrb	r3, [r2, r3]
 801680e:	2b03      	cmp	r3, #3
 8016810:	d106      	bne.n	8016820 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8016812:	683a      	ldr	r2, [r7, #0]
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	0011      	movs	r1, r2
 8016818:	0018      	movs	r0, r3
 801681a:	f000 f9bc 	bl	8016b96 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801681e:	e027      	b.n	8016870 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	240f      	movs	r4, #15
 8016824:	193a      	adds	r2, r7, r4
 8016826:	4914      	ldr	r1, [pc, #80]	@ (8016878 <USBD_SetAddress+0xa4>)
 8016828:	7812      	ldrb	r2, [r2, #0]
 801682a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801682c:	193b      	adds	r3, r7, r4
 801682e:	781a      	ldrb	r2, [r3, #0]
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	0011      	movs	r1, r2
 8016834:	0018      	movs	r0, r3
 8016836:	f000 ff5d 	bl	80176f4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	0018      	movs	r0, r3
 801683e:	f000 fa92 	bl	8016d66 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016842:	193b      	adds	r3, r7, r4
 8016844:	781b      	ldrb	r3, [r3, #0]
 8016846:	2b00      	cmp	r3, #0
 8016848:	d005      	beq.n	8016856 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801684a:	687a      	ldr	r2, [r7, #4]
 801684c:	23a7      	movs	r3, #167	@ 0xa7
 801684e:	009b      	lsls	r3, r3, #2
 8016850:	2102      	movs	r1, #2
 8016852:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016854:	e00c      	b.n	8016870 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016856:	687a      	ldr	r2, [r7, #4]
 8016858:	23a7      	movs	r3, #167	@ 0xa7
 801685a:	009b      	lsls	r3, r3, #2
 801685c:	2101      	movs	r1, #1
 801685e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016860:	e006      	b.n	8016870 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016862:	683a      	ldr	r2, [r7, #0]
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	0011      	movs	r1, r2
 8016868:	0018      	movs	r0, r3
 801686a:	f000 f994 	bl	8016b96 <USBD_CtlError>
  }
}
 801686e:	46c0      	nop			@ (mov r8, r8)
 8016870:	46c0      	nop			@ (mov r8, r8)
 8016872:	46bd      	mov	sp, r7
 8016874:	b005      	add	sp, #20
 8016876:	bd90      	pop	{r4, r7, pc}
 8016878:	0000029e 	.word	0x0000029e

0801687c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801687c:	b580      	push	{r7, lr}
 801687e:	b082      	sub	sp, #8
 8016880:	af00      	add	r7, sp, #0
 8016882:	6078      	str	r0, [r7, #4]
 8016884:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016886:	683b      	ldr	r3, [r7, #0]
 8016888:	885b      	ldrh	r3, [r3, #2]
 801688a:	b2da      	uxtb	r2, r3
 801688c:	4b4c      	ldr	r3, [pc, #304]	@ (80169c0 <USBD_SetConfig+0x144>)
 801688e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016890:	4b4b      	ldr	r3, [pc, #300]	@ (80169c0 <USBD_SetConfig+0x144>)
 8016892:	781b      	ldrb	r3, [r3, #0]
 8016894:	2b01      	cmp	r3, #1
 8016896:	d906      	bls.n	80168a6 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8016898:	683a      	ldr	r2, [r7, #0]
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	0011      	movs	r1, r2
 801689e:	0018      	movs	r0, r3
 80168a0:	f000 f979 	bl	8016b96 <USBD_CtlError>
 80168a4:	e088      	b.n	80169b8 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 80168a6:	687a      	ldr	r2, [r7, #4]
 80168a8:	23a7      	movs	r3, #167	@ 0xa7
 80168aa:	009b      	lsls	r3, r3, #2
 80168ac:	5cd3      	ldrb	r3, [r2, r3]
 80168ae:	2b02      	cmp	r3, #2
 80168b0:	d002      	beq.n	80168b8 <USBD_SetConfig+0x3c>
 80168b2:	2b03      	cmp	r3, #3
 80168b4:	d029      	beq.n	801690a <USBD_SetConfig+0x8e>
 80168b6:	e071      	b.n	801699c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80168b8:	4b41      	ldr	r3, [pc, #260]	@ (80169c0 <USBD_SetConfig+0x144>)
 80168ba:	781b      	ldrb	r3, [r3, #0]
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d01f      	beq.n	8016900 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 80168c0:	4b3f      	ldr	r3, [pc, #252]	@ (80169c0 <USBD_SetConfig+0x144>)
 80168c2:	781b      	ldrb	r3, [r3, #0]
 80168c4:	001a      	movs	r2, r3
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80168ca:	687a      	ldr	r2, [r7, #4]
 80168cc:	23a7      	movs	r3, #167	@ 0xa7
 80168ce:	009b      	lsls	r3, r3, #2
 80168d0:	2103      	movs	r1, #3
 80168d2:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80168d4:	4b3a      	ldr	r3, [pc, #232]	@ (80169c0 <USBD_SetConfig+0x144>)
 80168d6:	781a      	ldrb	r2, [r3, #0]
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	0011      	movs	r1, r2
 80168dc:	0018      	movs	r0, r3
 80168de:	f7ff f8c6 	bl	8015a6e <USBD_SetClassConfig>
 80168e2:	0003      	movs	r3, r0
 80168e4:	2b02      	cmp	r3, #2
 80168e6:	d106      	bne.n	80168f6 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 80168e8:	683a      	ldr	r2, [r7, #0]
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	0011      	movs	r1, r2
 80168ee:	0018      	movs	r0, r3
 80168f0:	f000 f951 	bl	8016b96 <USBD_CtlError>
            return;
 80168f4:	e060      	b.n	80169b8 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	0018      	movs	r0, r3
 80168fa:	f000 fa34 	bl	8016d66 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80168fe:	e05b      	b.n	80169b8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	0018      	movs	r0, r3
 8016904:	f000 fa2f 	bl	8016d66 <USBD_CtlSendStatus>
        break;
 8016908:	e056      	b.n	80169b8 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801690a:	4b2d      	ldr	r3, [pc, #180]	@ (80169c0 <USBD_SetConfig+0x144>)
 801690c:	781b      	ldrb	r3, [r3, #0]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d115      	bne.n	801693e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016912:	687a      	ldr	r2, [r7, #4]
 8016914:	23a7      	movs	r3, #167	@ 0xa7
 8016916:	009b      	lsls	r3, r3, #2
 8016918:	2102      	movs	r1, #2
 801691a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801691c:	4b28      	ldr	r3, [pc, #160]	@ (80169c0 <USBD_SetConfig+0x144>)
 801691e:	781b      	ldrb	r3, [r3, #0]
 8016920:	001a      	movs	r2, r3
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8016926:	4b26      	ldr	r3, [pc, #152]	@ (80169c0 <USBD_SetConfig+0x144>)
 8016928:	781a      	ldrb	r2, [r3, #0]
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	0011      	movs	r1, r2
 801692e:	0018      	movs	r0, r3
 8016930:	f7ff f8c4 	bl	8015abc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	0018      	movs	r0, r3
 8016938:	f000 fa15 	bl	8016d66 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801693c:	e03c      	b.n	80169b8 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801693e:	4b20      	ldr	r3, [pc, #128]	@ (80169c0 <USBD_SetConfig+0x144>)
 8016940:	781b      	ldrb	r3, [r3, #0]
 8016942:	001a      	movs	r2, r3
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	685b      	ldr	r3, [r3, #4]
 8016948:	429a      	cmp	r2, r3
 801694a:	d022      	beq.n	8016992 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	685b      	ldr	r3, [r3, #4]
 8016950:	b2da      	uxtb	r2, r3
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	0011      	movs	r1, r2
 8016956:	0018      	movs	r0, r3
 8016958:	f7ff f8b0 	bl	8015abc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801695c:	4b18      	ldr	r3, [pc, #96]	@ (80169c0 <USBD_SetConfig+0x144>)
 801695e:	781b      	ldrb	r3, [r3, #0]
 8016960:	001a      	movs	r2, r3
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8016966:	4b16      	ldr	r3, [pc, #88]	@ (80169c0 <USBD_SetConfig+0x144>)
 8016968:	781a      	ldrb	r2, [r3, #0]
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	0011      	movs	r1, r2
 801696e:	0018      	movs	r0, r3
 8016970:	f7ff f87d 	bl	8015a6e <USBD_SetClassConfig>
 8016974:	0003      	movs	r3, r0
 8016976:	2b02      	cmp	r3, #2
 8016978:	d106      	bne.n	8016988 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801697a:	683a      	ldr	r2, [r7, #0]
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	0011      	movs	r1, r2
 8016980:	0018      	movs	r0, r3
 8016982:	f000 f908 	bl	8016b96 <USBD_CtlError>
            return;
 8016986:	e017      	b.n	80169b8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	0018      	movs	r0, r3
 801698c:	f000 f9eb 	bl	8016d66 <USBD_CtlSendStatus>
        break;
 8016990:	e012      	b.n	80169b8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	0018      	movs	r0, r3
 8016996:	f000 f9e6 	bl	8016d66 <USBD_CtlSendStatus>
        break;
 801699a:	e00d      	b.n	80169b8 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801699c:	683a      	ldr	r2, [r7, #0]
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	0011      	movs	r1, r2
 80169a2:	0018      	movs	r0, r3
 80169a4:	f000 f8f7 	bl	8016b96 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80169a8:	4b05      	ldr	r3, [pc, #20]	@ (80169c0 <USBD_SetConfig+0x144>)
 80169aa:	781a      	ldrb	r2, [r3, #0]
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	0011      	movs	r1, r2
 80169b0:	0018      	movs	r0, r3
 80169b2:	f7ff f883 	bl	8015abc <USBD_ClrClassConfig>
        break;
 80169b6:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 80169b8:	46bd      	mov	sp, r7
 80169ba:	b002      	add	sp, #8
 80169bc:	bd80      	pop	{r7, pc}
 80169be:	46c0      	nop			@ (mov r8, r8)
 80169c0:	20002d38 	.word	0x20002d38

080169c4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80169c4:	b580      	push	{r7, lr}
 80169c6:	b082      	sub	sp, #8
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	6078      	str	r0, [r7, #4]
 80169cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80169ce:	683b      	ldr	r3, [r7, #0]
 80169d0:	88db      	ldrh	r3, [r3, #6]
 80169d2:	2b01      	cmp	r3, #1
 80169d4:	d006      	beq.n	80169e4 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 80169d6:	683a      	ldr	r2, [r7, #0]
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	0011      	movs	r1, r2
 80169dc:	0018      	movs	r0, r3
 80169de:	f000 f8da 	bl	8016b96 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80169e2:	e026      	b.n	8016a32 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 80169e4:	687a      	ldr	r2, [r7, #4]
 80169e6:	23a7      	movs	r3, #167	@ 0xa7
 80169e8:	009b      	lsls	r3, r3, #2
 80169ea:	5cd3      	ldrb	r3, [r2, r3]
 80169ec:	2b02      	cmp	r3, #2
 80169ee:	dc02      	bgt.n	80169f6 <USBD_GetConfig+0x32>
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	dc03      	bgt.n	80169fc <USBD_GetConfig+0x38>
 80169f4:	e016      	b.n	8016a24 <USBD_GetConfig+0x60>
 80169f6:	2b03      	cmp	r3, #3
 80169f8:	d00c      	beq.n	8016a14 <USBD_GetConfig+0x50>
 80169fa:	e013      	b.n	8016a24 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	2200      	movs	r2, #0
 8016a00:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	3308      	adds	r3, #8
 8016a06:	0019      	movs	r1, r3
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	2201      	movs	r2, #1
 8016a0c:	0018      	movs	r0, r3
 8016a0e:	f000 f940 	bl	8016c92 <USBD_CtlSendData>
        break;
 8016a12:	e00e      	b.n	8016a32 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	1d19      	adds	r1, r3, #4
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	2201      	movs	r2, #1
 8016a1c:	0018      	movs	r0, r3
 8016a1e:	f000 f938 	bl	8016c92 <USBD_CtlSendData>
        break;
 8016a22:	e006      	b.n	8016a32 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8016a24:	683a      	ldr	r2, [r7, #0]
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	0011      	movs	r1, r2
 8016a2a:	0018      	movs	r0, r3
 8016a2c:	f000 f8b3 	bl	8016b96 <USBD_CtlError>
        break;
 8016a30:	46c0      	nop			@ (mov r8, r8)
}
 8016a32:	46c0      	nop			@ (mov r8, r8)
 8016a34:	46bd      	mov	sp, r7
 8016a36:	b002      	add	sp, #8
 8016a38:	bd80      	pop	{r7, pc}

08016a3a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016a3a:	b580      	push	{r7, lr}
 8016a3c:	b082      	sub	sp, #8
 8016a3e:	af00      	add	r7, sp, #0
 8016a40:	6078      	str	r0, [r7, #4]
 8016a42:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016a44:	687a      	ldr	r2, [r7, #4]
 8016a46:	23a7      	movs	r3, #167	@ 0xa7
 8016a48:	009b      	lsls	r3, r3, #2
 8016a4a:	5cd3      	ldrb	r3, [r2, r3]
 8016a4c:	3b01      	subs	r3, #1
 8016a4e:	2b02      	cmp	r3, #2
 8016a50:	d822      	bhi.n	8016a98 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016a52:	683b      	ldr	r3, [r7, #0]
 8016a54:	88db      	ldrh	r3, [r3, #6]
 8016a56:	2b02      	cmp	r3, #2
 8016a58:	d006      	beq.n	8016a68 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8016a5a:	683a      	ldr	r2, [r7, #0]
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	0011      	movs	r1, r2
 8016a60:	0018      	movs	r0, r3
 8016a62:	f000 f898 	bl	8016b96 <USBD_CtlError>
        break;
 8016a66:	e01e      	b.n	8016aa6 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	2201      	movs	r2, #1
 8016a6c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8016a6e:	687a      	ldr	r2, [r7, #4]
 8016a70:	23a9      	movs	r3, #169	@ 0xa9
 8016a72:	009b      	lsls	r3, r3, #2
 8016a74:	58d3      	ldr	r3, [r2, r3]
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d005      	beq.n	8016a86 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	68db      	ldr	r3, [r3, #12]
 8016a7e:	2202      	movs	r2, #2
 8016a80:	431a      	orrs	r2, r3
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	330c      	adds	r3, #12
 8016a8a:	0019      	movs	r1, r3
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	2202      	movs	r2, #2
 8016a90:	0018      	movs	r0, r3
 8016a92:	f000 f8fe 	bl	8016c92 <USBD_CtlSendData>
      break;
 8016a96:	e006      	b.n	8016aa6 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8016a98:	683a      	ldr	r2, [r7, #0]
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	0011      	movs	r1, r2
 8016a9e:	0018      	movs	r0, r3
 8016aa0:	f000 f879 	bl	8016b96 <USBD_CtlError>
      break;
 8016aa4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8016aa6:	46c0      	nop			@ (mov r8, r8)
 8016aa8:	46bd      	mov	sp, r7
 8016aaa:	b002      	add	sp, #8
 8016aac:	bd80      	pop	{r7, pc}

08016aae <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8016aae:	b580      	push	{r7, lr}
 8016ab0:	b082      	sub	sp, #8
 8016ab2:	af00      	add	r7, sp, #0
 8016ab4:	6078      	str	r0, [r7, #4]
 8016ab6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016ab8:	683b      	ldr	r3, [r7, #0]
 8016aba:	885b      	ldrh	r3, [r3, #2]
 8016abc:	2b01      	cmp	r3, #1
 8016abe:	d108      	bne.n	8016ad2 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8016ac0:	687a      	ldr	r2, [r7, #4]
 8016ac2:	23a9      	movs	r3, #169	@ 0xa9
 8016ac4:	009b      	lsls	r3, r3, #2
 8016ac6:	2101      	movs	r1, #1
 8016ac8:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	0018      	movs	r0, r3
 8016ace:	f000 f94a 	bl	8016d66 <USBD_CtlSendStatus>
  }
}
 8016ad2:	46c0      	nop			@ (mov r8, r8)
 8016ad4:	46bd      	mov	sp, r7
 8016ad6:	b002      	add	sp, #8
 8016ad8:	bd80      	pop	{r7, pc}

08016ada <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8016ada:	b580      	push	{r7, lr}
 8016adc:	b082      	sub	sp, #8
 8016ade:	af00      	add	r7, sp, #0
 8016ae0:	6078      	str	r0, [r7, #4]
 8016ae2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016ae4:	687a      	ldr	r2, [r7, #4]
 8016ae6:	23a7      	movs	r3, #167	@ 0xa7
 8016ae8:	009b      	lsls	r3, r3, #2
 8016aea:	5cd3      	ldrb	r3, [r2, r3]
 8016aec:	3b01      	subs	r3, #1
 8016aee:	2b02      	cmp	r3, #2
 8016af0:	d80d      	bhi.n	8016b0e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016af2:	683b      	ldr	r3, [r7, #0]
 8016af4:	885b      	ldrh	r3, [r3, #2]
 8016af6:	2b01      	cmp	r3, #1
 8016af8:	d110      	bne.n	8016b1c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8016afa:	687a      	ldr	r2, [r7, #4]
 8016afc:	23a9      	movs	r3, #169	@ 0xa9
 8016afe:	009b      	lsls	r3, r3, #2
 8016b00:	2100      	movs	r1, #0
 8016b02:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	0018      	movs	r0, r3
 8016b08:	f000 f92d 	bl	8016d66 <USBD_CtlSendStatus>
      }
      break;
 8016b0c:	e006      	b.n	8016b1c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8016b0e:	683a      	ldr	r2, [r7, #0]
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	0011      	movs	r1, r2
 8016b14:	0018      	movs	r0, r3
 8016b16:	f000 f83e 	bl	8016b96 <USBD_CtlError>
      break;
 8016b1a:	e000      	b.n	8016b1e <USBD_ClrFeature+0x44>
      break;
 8016b1c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8016b1e:	46c0      	nop			@ (mov r8, r8)
 8016b20:	46bd      	mov	sp, r7
 8016b22:	b002      	add	sp, #8
 8016b24:	bd80      	pop	{r7, pc}

08016b26 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016b26:	b580      	push	{r7, lr}
 8016b28:	b082      	sub	sp, #8
 8016b2a:	af00      	add	r7, sp, #0
 8016b2c:	6078      	str	r0, [r7, #4]
 8016b2e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8016b30:	683b      	ldr	r3, [r7, #0]
 8016b32:	781a      	ldrb	r2, [r3, #0]
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8016b38:	683b      	ldr	r3, [r7, #0]
 8016b3a:	785a      	ldrb	r2, [r3, #1]
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8016b40:	683b      	ldr	r3, [r7, #0]
 8016b42:	3302      	adds	r3, #2
 8016b44:	781b      	ldrb	r3, [r3, #0]
 8016b46:	001a      	movs	r2, r3
 8016b48:	683b      	ldr	r3, [r7, #0]
 8016b4a:	3303      	adds	r3, #3
 8016b4c:	781b      	ldrb	r3, [r3, #0]
 8016b4e:	021b      	lsls	r3, r3, #8
 8016b50:	b29b      	uxth	r3, r3
 8016b52:	18d3      	adds	r3, r2, r3
 8016b54:	b29a      	uxth	r2, r3
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8016b5a:	683b      	ldr	r3, [r7, #0]
 8016b5c:	3304      	adds	r3, #4
 8016b5e:	781b      	ldrb	r3, [r3, #0]
 8016b60:	001a      	movs	r2, r3
 8016b62:	683b      	ldr	r3, [r7, #0]
 8016b64:	3305      	adds	r3, #5
 8016b66:	781b      	ldrb	r3, [r3, #0]
 8016b68:	021b      	lsls	r3, r3, #8
 8016b6a:	b29b      	uxth	r3, r3
 8016b6c:	18d3      	adds	r3, r2, r3
 8016b6e:	b29a      	uxth	r2, r3
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8016b74:	683b      	ldr	r3, [r7, #0]
 8016b76:	3306      	adds	r3, #6
 8016b78:	781b      	ldrb	r3, [r3, #0]
 8016b7a:	001a      	movs	r2, r3
 8016b7c:	683b      	ldr	r3, [r7, #0]
 8016b7e:	3307      	adds	r3, #7
 8016b80:	781b      	ldrb	r3, [r3, #0]
 8016b82:	021b      	lsls	r3, r3, #8
 8016b84:	b29b      	uxth	r3, r3
 8016b86:	18d3      	adds	r3, r2, r3
 8016b88:	b29a      	uxth	r2, r3
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	80da      	strh	r2, [r3, #6]

}
 8016b8e:	46c0      	nop			@ (mov r8, r8)
 8016b90:	46bd      	mov	sp, r7
 8016b92:	b002      	add	sp, #8
 8016b94:	bd80      	pop	{r7, pc}

08016b96 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8016b96:	b580      	push	{r7, lr}
 8016b98:	b082      	sub	sp, #8
 8016b9a:	af00      	add	r7, sp, #0
 8016b9c:	6078      	str	r0, [r7, #4]
 8016b9e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	2180      	movs	r1, #128	@ 0x80
 8016ba4:	0018      	movs	r0, r3
 8016ba6:	f000 fd1e 	bl	80175e6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	2100      	movs	r1, #0
 8016bae:	0018      	movs	r0, r3
 8016bb0:	f000 fd19 	bl	80175e6 <USBD_LL_StallEP>
}
 8016bb4:	46c0      	nop			@ (mov r8, r8)
 8016bb6:	46bd      	mov	sp, r7
 8016bb8:	b002      	add	sp, #8
 8016bba:	bd80      	pop	{r7, pc}

08016bbc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016bbc:	b590      	push	{r4, r7, lr}
 8016bbe:	b087      	sub	sp, #28
 8016bc0:	af00      	add	r7, sp, #0
 8016bc2:	60f8      	str	r0, [r7, #12]
 8016bc4:	60b9      	str	r1, [r7, #8]
 8016bc6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016bc8:	2417      	movs	r4, #23
 8016bca:	193b      	adds	r3, r7, r4
 8016bcc:	2200      	movs	r2, #0
 8016bce:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d03c      	beq.n	8016c50 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	0018      	movs	r0, r3
 8016bda:	f000 f83d 	bl	8016c58 <USBD_GetLen>
 8016bde:	0003      	movs	r3, r0
 8016be0:	3301      	adds	r3, #1
 8016be2:	b29b      	uxth	r3, r3
 8016be4:	18db      	adds	r3, r3, r3
 8016be6:	b29a      	uxth	r2, r3
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8016bec:	193b      	adds	r3, r7, r4
 8016bee:	781b      	ldrb	r3, [r3, #0]
 8016bf0:	193a      	adds	r2, r7, r4
 8016bf2:	1c59      	adds	r1, r3, #1
 8016bf4:	7011      	strb	r1, [r2, #0]
 8016bf6:	001a      	movs	r2, r3
 8016bf8:	68bb      	ldr	r3, [r7, #8]
 8016bfa:	189b      	adds	r3, r3, r2
 8016bfc:	687a      	ldr	r2, [r7, #4]
 8016bfe:	7812      	ldrb	r2, [r2, #0]
 8016c00:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8016c02:	193b      	adds	r3, r7, r4
 8016c04:	781b      	ldrb	r3, [r3, #0]
 8016c06:	193a      	adds	r2, r7, r4
 8016c08:	1c59      	adds	r1, r3, #1
 8016c0a:	7011      	strb	r1, [r2, #0]
 8016c0c:	001a      	movs	r2, r3
 8016c0e:	68bb      	ldr	r3, [r7, #8]
 8016c10:	189b      	adds	r3, r3, r2
 8016c12:	2203      	movs	r2, #3
 8016c14:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8016c16:	e017      	b.n	8016c48 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	1c5a      	adds	r2, r3, #1
 8016c1c:	60fa      	str	r2, [r7, #12]
 8016c1e:	2417      	movs	r4, #23
 8016c20:	193a      	adds	r2, r7, r4
 8016c22:	7812      	ldrb	r2, [r2, #0]
 8016c24:	1939      	adds	r1, r7, r4
 8016c26:	1c50      	adds	r0, r2, #1
 8016c28:	7008      	strb	r0, [r1, #0]
 8016c2a:	0011      	movs	r1, r2
 8016c2c:	68ba      	ldr	r2, [r7, #8]
 8016c2e:	1852      	adds	r2, r2, r1
 8016c30:	781b      	ldrb	r3, [r3, #0]
 8016c32:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8016c34:	193b      	adds	r3, r7, r4
 8016c36:	781b      	ldrb	r3, [r3, #0]
 8016c38:	193a      	adds	r2, r7, r4
 8016c3a:	1c59      	adds	r1, r3, #1
 8016c3c:	7011      	strb	r1, [r2, #0]
 8016c3e:	001a      	movs	r2, r3
 8016c40:	68bb      	ldr	r3, [r7, #8]
 8016c42:	189b      	adds	r3, r3, r2
 8016c44:	2200      	movs	r2, #0
 8016c46:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8016c48:	68fb      	ldr	r3, [r7, #12]
 8016c4a:	781b      	ldrb	r3, [r3, #0]
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d1e3      	bne.n	8016c18 <USBD_GetString+0x5c>
    }
  }
}
 8016c50:	46c0      	nop			@ (mov r8, r8)
 8016c52:	46bd      	mov	sp, r7
 8016c54:	b007      	add	sp, #28
 8016c56:	bd90      	pop	{r4, r7, pc}

08016c58 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016c58:	b580      	push	{r7, lr}
 8016c5a:	b084      	sub	sp, #16
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016c60:	230f      	movs	r3, #15
 8016c62:	18fb      	adds	r3, r7, r3
 8016c64:	2200      	movs	r2, #0
 8016c66:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8016c68:	e008      	b.n	8016c7c <USBD_GetLen+0x24>
  {
    len++;
 8016c6a:	210f      	movs	r1, #15
 8016c6c:	187b      	adds	r3, r7, r1
 8016c6e:	781a      	ldrb	r2, [r3, #0]
 8016c70:	187b      	adds	r3, r7, r1
 8016c72:	3201      	adds	r2, #1
 8016c74:	701a      	strb	r2, [r3, #0]
    buf++;
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	3301      	adds	r3, #1
 8016c7a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	781b      	ldrb	r3, [r3, #0]
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d1f2      	bne.n	8016c6a <USBD_GetLen+0x12>
  }

  return len;
 8016c84:	230f      	movs	r3, #15
 8016c86:	18fb      	adds	r3, r7, r3
 8016c88:	781b      	ldrb	r3, [r3, #0]
}
 8016c8a:	0018      	movs	r0, r3
 8016c8c:	46bd      	mov	sp, r7
 8016c8e:	b004      	add	sp, #16
 8016c90:	bd80      	pop	{r7, pc}

08016c92 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8016c92:	b580      	push	{r7, lr}
 8016c94:	b084      	sub	sp, #16
 8016c96:	af00      	add	r7, sp, #0
 8016c98:	60f8      	str	r0, [r7, #12]
 8016c9a:	60b9      	str	r1, [r7, #8]
 8016c9c:	1dbb      	adds	r3, r7, #6
 8016c9e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016ca0:	68fa      	ldr	r2, [r7, #12]
 8016ca2:	23a5      	movs	r3, #165	@ 0xa5
 8016ca4:	009b      	lsls	r3, r3, #2
 8016ca6:	2102      	movs	r1, #2
 8016ca8:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8016caa:	1dbb      	adds	r3, r7, #6
 8016cac:	881a      	ldrh	r2, [r3, #0]
 8016cae:	68fb      	ldr	r3, [r7, #12]
 8016cb0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8016cb2:	1dbb      	adds	r3, r7, #6
 8016cb4:	881a      	ldrh	r2, [r3, #0]
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016cba:	1dbb      	adds	r3, r7, #6
 8016cbc:	881b      	ldrh	r3, [r3, #0]
 8016cbe:	68ba      	ldr	r2, [r7, #8]
 8016cc0:	68f8      	ldr	r0, [r7, #12]
 8016cc2:	2100      	movs	r1, #0
 8016cc4:	f000 fd41 	bl	801774a <USBD_LL_Transmit>

  return USBD_OK;
 8016cc8:	2300      	movs	r3, #0
}
 8016cca:	0018      	movs	r0, r3
 8016ccc:	46bd      	mov	sp, r7
 8016cce:	b004      	add	sp, #16
 8016cd0:	bd80      	pop	{r7, pc}

08016cd2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8016cd2:	b580      	push	{r7, lr}
 8016cd4:	b084      	sub	sp, #16
 8016cd6:	af00      	add	r7, sp, #0
 8016cd8:	60f8      	str	r0, [r7, #12]
 8016cda:	60b9      	str	r1, [r7, #8]
 8016cdc:	1dbb      	adds	r3, r7, #6
 8016cde:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016ce0:	1dbb      	adds	r3, r7, #6
 8016ce2:	881b      	ldrh	r3, [r3, #0]
 8016ce4:	68ba      	ldr	r2, [r7, #8]
 8016ce6:	68f8      	ldr	r0, [r7, #12]
 8016ce8:	2100      	movs	r1, #0
 8016cea:	f000 fd2e 	bl	801774a <USBD_LL_Transmit>

  return USBD_OK;
 8016cee:	2300      	movs	r3, #0
}
 8016cf0:	0018      	movs	r0, r3
 8016cf2:	46bd      	mov	sp, r7
 8016cf4:	b004      	add	sp, #16
 8016cf6:	bd80      	pop	{r7, pc}

08016cf8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8016cf8:	b580      	push	{r7, lr}
 8016cfa:	b084      	sub	sp, #16
 8016cfc:	af00      	add	r7, sp, #0
 8016cfe:	60f8      	str	r0, [r7, #12]
 8016d00:	60b9      	str	r1, [r7, #8]
 8016d02:	1dbb      	adds	r3, r7, #6
 8016d04:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016d06:	68fa      	ldr	r2, [r7, #12]
 8016d08:	23a5      	movs	r3, #165	@ 0xa5
 8016d0a:	009b      	lsls	r3, r3, #2
 8016d0c:	2103      	movs	r1, #3
 8016d0e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8016d10:	1dbb      	adds	r3, r7, #6
 8016d12:	8819      	ldrh	r1, [r3, #0]
 8016d14:	68fa      	ldr	r2, [r7, #12]
 8016d16:	23ae      	movs	r3, #174	@ 0xae
 8016d18:	005b      	lsls	r3, r3, #1
 8016d1a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8016d1c:	1dbb      	adds	r3, r7, #6
 8016d1e:	8819      	ldrh	r1, [r3, #0]
 8016d20:	68fa      	ldr	r2, [r7, #12]
 8016d22:	23b0      	movs	r3, #176	@ 0xb0
 8016d24:	005b      	lsls	r3, r3, #1
 8016d26:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016d28:	1dbb      	adds	r3, r7, #6
 8016d2a:	881b      	ldrh	r3, [r3, #0]
 8016d2c:	68ba      	ldr	r2, [r7, #8]
 8016d2e:	68f8      	ldr	r0, [r7, #12]
 8016d30:	2100      	movs	r1, #0
 8016d32:	f000 fd41 	bl	80177b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016d36:	2300      	movs	r3, #0
}
 8016d38:	0018      	movs	r0, r3
 8016d3a:	46bd      	mov	sp, r7
 8016d3c:	b004      	add	sp, #16
 8016d3e:	bd80      	pop	{r7, pc}

08016d40 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8016d40:	b580      	push	{r7, lr}
 8016d42:	b084      	sub	sp, #16
 8016d44:	af00      	add	r7, sp, #0
 8016d46:	60f8      	str	r0, [r7, #12]
 8016d48:	60b9      	str	r1, [r7, #8]
 8016d4a:	1dbb      	adds	r3, r7, #6
 8016d4c:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016d4e:	1dbb      	adds	r3, r7, #6
 8016d50:	881b      	ldrh	r3, [r3, #0]
 8016d52:	68ba      	ldr	r2, [r7, #8]
 8016d54:	68f8      	ldr	r0, [r7, #12]
 8016d56:	2100      	movs	r1, #0
 8016d58:	f000 fd2e 	bl	80177b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016d5c:	2300      	movs	r3, #0
}
 8016d5e:	0018      	movs	r0, r3
 8016d60:	46bd      	mov	sp, r7
 8016d62:	b004      	add	sp, #16
 8016d64:	bd80      	pop	{r7, pc}

08016d66 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016d66:	b580      	push	{r7, lr}
 8016d68:	b082      	sub	sp, #8
 8016d6a:	af00      	add	r7, sp, #0
 8016d6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016d6e:	687a      	ldr	r2, [r7, #4]
 8016d70:	23a5      	movs	r3, #165	@ 0xa5
 8016d72:	009b      	lsls	r3, r3, #2
 8016d74:	2104      	movs	r1, #4
 8016d76:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016d78:	6878      	ldr	r0, [r7, #4]
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	2200      	movs	r2, #0
 8016d7e:	2100      	movs	r1, #0
 8016d80:	f000 fce3 	bl	801774a <USBD_LL_Transmit>

  return USBD_OK;
 8016d84:	2300      	movs	r3, #0
}
 8016d86:	0018      	movs	r0, r3
 8016d88:	46bd      	mov	sp, r7
 8016d8a:	b002      	add	sp, #8
 8016d8c:	bd80      	pop	{r7, pc}

08016d8e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016d8e:	b580      	push	{r7, lr}
 8016d90:	b082      	sub	sp, #8
 8016d92:	af00      	add	r7, sp, #0
 8016d94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016d96:	687a      	ldr	r2, [r7, #4]
 8016d98:	23a5      	movs	r3, #165	@ 0xa5
 8016d9a:	009b      	lsls	r3, r3, #2
 8016d9c:	2105      	movs	r1, #5
 8016d9e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016da0:	6878      	ldr	r0, [r7, #4]
 8016da2:	2300      	movs	r3, #0
 8016da4:	2200      	movs	r2, #0
 8016da6:	2100      	movs	r1, #0
 8016da8:	f000 fd06 	bl	80177b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016dac:	2300      	movs	r3, #0
}
 8016dae:	0018      	movs	r0, r3
 8016db0:	46bd      	mov	sp, r7
 8016db2:	b002      	add	sp, #8
 8016db4:	bd80      	pop	{r7, pc}
	...

08016db8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016db8:	b580      	push	{r7, lr}
 8016dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016dbc:	4914      	ldr	r1, [pc, #80]	@ (8016e10 <MX_USB_DEVICE_Init+0x58>)
 8016dbe:	4b15      	ldr	r3, [pc, #84]	@ (8016e14 <MX_USB_DEVICE_Init+0x5c>)
 8016dc0:	2200      	movs	r2, #0
 8016dc2:	0018      	movs	r0, r3
 8016dc4:	f7fe fdec 	bl	80159a0 <USBD_Init>
 8016dc8:	1e03      	subs	r3, r0, #0
 8016dca:	d001      	beq.n	8016dd0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016dcc:	f7ef fc0a 	bl	80065e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016dd0:	4a11      	ldr	r2, [pc, #68]	@ (8016e18 <MX_USB_DEVICE_Init+0x60>)
 8016dd2:	4b10      	ldr	r3, [pc, #64]	@ (8016e14 <MX_USB_DEVICE_Init+0x5c>)
 8016dd4:	0011      	movs	r1, r2
 8016dd6:	0018      	movs	r0, r3
 8016dd8:	f7fe fe13 	bl	8015a02 <USBD_RegisterClass>
 8016ddc:	1e03      	subs	r3, r0, #0
 8016dde:	d001      	beq.n	8016de4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8016de0:	f7ef fc00 	bl	80065e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8016de4:	4a0d      	ldr	r2, [pc, #52]	@ (8016e1c <MX_USB_DEVICE_Init+0x64>)
 8016de6:	4b0b      	ldr	r3, [pc, #44]	@ (8016e14 <MX_USB_DEVICE_Init+0x5c>)
 8016de8:	0011      	movs	r1, r2
 8016dea:	0018      	movs	r0, r3
 8016dec:	f7fe fd28 	bl	8015840 <USBD_CDC_RegisterInterface>
 8016df0:	1e03      	subs	r3, r0, #0
 8016df2:	d001      	beq.n	8016df8 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8016df4:	f7ef fbf6 	bl	80065e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016df8:	4b06      	ldr	r3, [pc, #24]	@ (8016e14 <MX_USB_DEVICE_Init+0x5c>)
 8016dfa:	0018      	movs	r0, r3
 8016dfc:	f7fe fe21 	bl	8015a42 <USBD_Start>
 8016e00:	1e03      	subs	r3, r0, #0
 8016e02:	d001      	beq.n	8016e08 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8016e04:	f7ef fbee 	bl	80065e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016e08:	46c0      	nop			@ (mov r8, r8)
 8016e0a:	46bd      	mov	sp, r7
 8016e0c:	bd80      	pop	{r7, pc}
 8016e0e:	46c0      	nop			@ (mov r8, r8)
 8016e10:	20000198 	.word	0x20000198
 8016e14:	20002d3c 	.word	0x20002d3c
 8016e18:	20000084 	.word	0x20000084
 8016e1c:	20000188 	.word	0x20000188

08016e20 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016e20:	b580      	push	{r7, lr}
 8016e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016e24:	4907      	ldr	r1, [pc, #28]	@ (8016e44 <CDC_Init_FS+0x24>)
 8016e26:	4b08      	ldr	r3, [pc, #32]	@ (8016e48 <CDC_Init_FS+0x28>)
 8016e28:	2200      	movs	r2, #0
 8016e2a:	0018      	movs	r0, r3
 8016e2c:	f7fe fd23 	bl	8015876 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8016e30:	4a06      	ldr	r2, [pc, #24]	@ (8016e4c <CDC_Init_FS+0x2c>)
 8016e32:	4b05      	ldr	r3, [pc, #20]	@ (8016e48 <CDC_Init_FS+0x28>)
 8016e34:	0011      	movs	r1, r2
 8016e36:	0018      	movs	r0, r3
 8016e38:	f7fe fd39 	bl	80158ae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016e3c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016e3e:	0018      	movs	r0, r3
 8016e40:	46bd      	mov	sp, r7
 8016e42:	bd80      	pop	{r7, pc}
 8016e44:	200034c0 	.word	0x200034c0
 8016e48:	20002d3c 	.word	0x20002d3c
 8016e4c:	200030c0 	.word	0x200030c0

08016e50 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016e54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8016e56:	0018      	movs	r0, r3
 8016e58:	46bd      	mov	sp, r7
 8016e5a:	bd80      	pop	{r7, pc}

08016e5c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016e5c:	b580      	push	{r7, lr}
 8016e5e:	b082      	sub	sp, #8
 8016e60:	af00      	add	r7, sp, #0
 8016e62:	6039      	str	r1, [r7, #0]
 8016e64:	0011      	movs	r1, r2
 8016e66:	1dfb      	adds	r3, r7, #7
 8016e68:	1c02      	adds	r2, r0, #0
 8016e6a:	701a      	strb	r2, [r3, #0]
 8016e6c:	1d3b      	adds	r3, r7, #4
 8016e6e:	1c0a      	adds	r2, r1, #0
 8016e70:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016e72:	1dfb      	adds	r3, r7, #7
 8016e74:	781b      	ldrb	r3, [r3, #0]
 8016e76:	2b23      	cmp	r3, #35	@ 0x23
 8016e78:	d804      	bhi.n	8016e84 <CDC_Control_FS+0x28>
 8016e7a:	009a      	lsls	r2, r3, #2
 8016e7c:	4b04      	ldr	r3, [pc, #16]	@ (8016e90 <CDC_Control_FS+0x34>)
 8016e7e:	18d3      	adds	r3, r2, r3
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016e84:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8016e86:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016e88:	0018      	movs	r0, r3
 8016e8a:	46bd      	mov	sp, r7
 8016e8c:	b002      	add	sp, #8
 8016e8e:	bd80      	pop	{r7, pc}
 8016e90:	0801c128 	.word	0x0801c128

08016e94 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016e94:	b580      	push	{r7, lr}
 8016e96:	b082      	sub	sp, #8
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	6078      	str	r0, [r7, #4]
 8016e9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 8016e9e:	4b12      	ldr	r3, [pc, #72]	@ (8016ee8 <CDC_Receive_FS+0x54>)
 8016ea0:	781b      	ldrb	r3, [r3, #0]
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d013      	beq.n	8016ece <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 8016ea6:	683b      	ldr	r3, [r7, #0]
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	b29a      	uxth	r2, r3
 8016eac:	2301      	movs	r3, #1
 8016eae:	425b      	negs	r3, r3
 8016eb0:	6879      	ldr	r1, [r7, #4]
 8016eb2:	480e      	ldr	r0, [pc, #56]	@ (8016eec <CDC_Receive_FS+0x58>)
 8016eb4:	f7fa fd3a 	bl	801192c <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8016eb8:	687a      	ldr	r2, [r7, #4]
 8016eba:	4b0d      	ldr	r3, [pc, #52]	@ (8016ef0 <CDC_Receive_FS+0x5c>)
 8016ebc:	0011      	movs	r1, r2
 8016ebe:	0018      	movs	r0, r3
 8016ec0:	f7fe fcf5 	bl	80158ae <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8016ef0 <CDC_Receive_FS+0x5c>)
 8016ec6:	0018      	movs	r0, r3
 8016ec8:	f7fe fd3c 	bl	8015944 <USBD_CDC_ReceivePacket>
 8016ecc:	e006      	b.n	8016edc <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 8016ece:	683b      	ldr	r3, [r7, #0]
 8016ed0:	681a      	ldr	r2, [r3, #0]
 8016ed2:	4b08      	ldr	r3, [pc, #32]	@ (8016ef4 <CDC_Receive_FS+0x60>)
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	18d2      	adds	r2, r2, r3
 8016ed8:	4b06      	ldr	r3, [pc, #24]	@ (8016ef4 <CDC_Receive_FS+0x60>)
 8016eda:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 8016edc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8016ede:	0018      	movs	r0, r3
 8016ee0:	46bd      	mov	sp, r7
 8016ee2:	b002      	add	sp, #8
 8016ee4:	bd80      	pop	{r7, pc}
 8016ee6:	46c0      	nop			@ (mov r8, r8)
 8016ee8:	20003000 	.word	0x20003000
 8016eec:	20003004 	.word	0x20003004
 8016ef0:	20002d3c 	.word	0x20002d3c
 8016ef4:	200030bc 	.word	0x200030bc

08016ef8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8016ef8:	b5b0      	push	{r4, r5, r7, lr}
 8016efa:	b084      	sub	sp, #16
 8016efc:	af00      	add	r7, sp, #0
 8016efe:	6078      	str	r0, [r7, #4]
 8016f00:	000a      	movs	r2, r1
 8016f02:	1cbb      	adds	r3, r7, #2
 8016f04:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8016f06:	230f      	movs	r3, #15
 8016f08:	18fb      	adds	r3, r7, r3
 8016f0a:	2200      	movs	r2, #0
 8016f0c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8016f0e:	4a11      	ldr	r2, [pc, #68]	@ (8016f54 <CDC_Transmit_FS+0x5c>)
 8016f10:	23ae      	movs	r3, #174	@ 0xae
 8016f12:	009b      	lsls	r3, r3, #2
 8016f14:	58d3      	ldr	r3, [r2, r3]
 8016f16:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016f18:	68ba      	ldr	r2, [r7, #8]
 8016f1a:	2385      	movs	r3, #133	@ 0x85
 8016f1c:	009b      	lsls	r3, r3, #2
 8016f1e:	58d3      	ldr	r3, [r2, r3]
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d001      	beq.n	8016f28 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8016f24:	2301      	movs	r3, #1
 8016f26:	e010      	b.n	8016f4a <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8016f28:	1cbb      	adds	r3, r7, #2
 8016f2a:	881a      	ldrh	r2, [r3, #0]
 8016f2c:	6879      	ldr	r1, [r7, #4]
 8016f2e:	4b09      	ldr	r3, [pc, #36]	@ (8016f54 <CDC_Transmit_FS+0x5c>)
 8016f30:	0018      	movs	r0, r3
 8016f32:	f7fe fca0 	bl	8015876 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8016f36:	250f      	movs	r5, #15
 8016f38:	197c      	adds	r4, r7, r5
 8016f3a:	4b06      	ldr	r3, [pc, #24]	@ (8016f54 <CDC_Transmit_FS+0x5c>)
 8016f3c:	0018      	movs	r0, r3
 8016f3e:	f7fe fcca 	bl	80158d6 <USBD_CDC_TransmitPacket>
 8016f42:	0003      	movs	r3, r0
 8016f44:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8016f46:	197b      	adds	r3, r7, r5
 8016f48:	781b      	ldrb	r3, [r3, #0]
}
 8016f4a:	0018      	movs	r0, r3
 8016f4c:	46bd      	mov	sp, r7
 8016f4e:	b004      	add	sp, #16
 8016f50:	bdb0      	pop	{r4, r5, r7, pc}
 8016f52:	46c0      	nop			@ (mov r8, r8)
 8016f54:	20002d3c 	.word	0x20002d3c

08016f58 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 8016f58:	b580      	push	{r7, lr}
 8016f5a:	af00      	add	r7, sp, #0
  ESPProg = true;
 8016f5c:	4b02      	ldr	r3, [pc, #8]	@ (8016f68 <EnableESPProg+0x10>)
 8016f5e:	2201      	movs	r2, #1
 8016f60:	701a      	strb	r2, [r3, #0]
}
 8016f62:	46c0      	nop			@ (mov r8, r8)
 8016f64:	46bd      	mov	sp, r7
 8016f66:	bd80      	pop	{r7, pc}
 8016f68:	20003000 	.word	0x20003000

08016f6c <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 8016f6c:	b580      	push	{r7, lr}
 8016f6e:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 8016f70:	4b01      	ldr	r3, [pc, #4]	@ (8016f78 <GetUsbRxPointer+0xc>)
}
 8016f72:	0018      	movs	r0, r3
 8016f74:	46bd      	mov	sp, r7
 8016f76:	bd80      	pop	{r7, pc}
 8016f78:	200030c0 	.word	0x200030c0

08016f7c <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 8016f7c:	b580      	push	{r7, lr}
 8016f7e:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 8016f80:	4b07      	ldr	r3, [pc, #28]	@ (8016fa0 <ResetUsbRxDataSize+0x24>)
 8016f82:	2200      	movs	r2, #0
 8016f84:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 8016f86:	4a07      	ldr	r2, [pc, #28]	@ (8016fa4 <ResetUsbRxDataSize+0x28>)
 8016f88:	4b07      	ldr	r3, [pc, #28]	@ (8016fa8 <ResetUsbRxDataSize+0x2c>)
 8016f8a:	0011      	movs	r1, r2
 8016f8c:	0018      	movs	r0, r3
 8016f8e:	f7fe fc8e 	bl	80158ae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016f92:	4b05      	ldr	r3, [pc, #20]	@ (8016fa8 <ResetUsbRxDataSize+0x2c>)
 8016f94:	0018      	movs	r0, r3
 8016f96:	f7fe fcd5 	bl	8015944 <USBD_CDC_ReceivePacket>
}
 8016f9a:	46c0      	nop			@ (mov r8, r8)
 8016f9c:	46bd      	mov	sp, r7
 8016f9e:	bd80      	pop	{r7, pc}
 8016fa0:	200030bc 	.word	0x200030bc
 8016fa4:	200030c0 	.word	0x200030c0
 8016fa8:	20002d3c 	.word	0x20002d3c

08016fac <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 8016fac:	b580      	push	{r7, lr}
 8016fae:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8016fb0:	4b02      	ldr	r3, [pc, #8]	@ (8016fbc <GetUsbRxDataSize+0x10>)
 8016fb2:	681b      	ldr	r3, [r3, #0]
}
 8016fb4:	0018      	movs	r0, r3
 8016fb6:	46bd      	mov	sp, r7
 8016fb8:	bd80      	pop	{r7, pc}
 8016fba:	46c0      	nop			@ (mov r8, r8)
 8016fbc:	200030bc 	.word	0x200030bc

08016fc0 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8016fc0:	b580      	push	{r7, lr}
 8016fc2:	b082      	sub	sp, #8
 8016fc4:	af00      	add	r7, sp, #0
 8016fc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 8016fc8:	687a      	ldr	r2, [r7, #4]
 8016fca:	4b07      	ldr	r3, [pc, #28]	@ (8016fe8 <GetUsbRxNextChunk+0x28>)
 8016fcc:	18d2      	adds	r2, r2, r3
 8016fce:	4b07      	ldr	r3, [pc, #28]	@ (8016fec <GetUsbRxNextChunk+0x2c>)
 8016fd0:	0011      	movs	r1, r2
 8016fd2:	0018      	movs	r0, r3
 8016fd4:	f7fe fc6b 	bl	80158ae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016fd8:	4b04      	ldr	r3, [pc, #16]	@ (8016fec <GetUsbRxNextChunk+0x2c>)
 8016fda:	0018      	movs	r0, r3
 8016fdc:	f7fe fcb2 	bl	8015944 <USBD_CDC_ReceivePacket>
}
 8016fe0:	46c0      	nop			@ (mov r8, r8)
 8016fe2:	46bd      	mov	sp, r7
 8016fe4:	b002      	add	sp, #8
 8016fe6:	bd80      	pop	{r7, pc}
 8016fe8:	200030c0 	.word	0x200030c0
 8016fec:	20002d3c 	.word	0x20002d3c

08016ff0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ff0:	b580      	push	{r7, lr}
 8016ff2:	b082      	sub	sp, #8
 8016ff4:	af00      	add	r7, sp, #0
 8016ff6:	0002      	movs	r2, r0
 8016ff8:	6039      	str	r1, [r7, #0]
 8016ffa:	1dfb      	adds	r3, r7, #7
 8016ffc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016ffe:	683b      	ldr	r3, [r7, #0]
 8017000:	2212      	movs	r2, #18
 8017002:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017004:	4b02      	ldr	r3, [pc, #8]	@ (8017010 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017006:	0018      	movs	r0, r3
 8017008:	46bd      	mov	sp, r7
 801700a:	b002      	add	sp, #8
 801700c:	bd80      	pop	{r7, pc}
 801700e:	46c0      	nop			@ (mov r8, r8)
 8017010:	200001b4 	.word	0x200001b4

08017014 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017014:	b580      	push	{r7, lr}
 8017016:	b082      	sub	sp, #8
 8017018:	af00      	add	r7, sp, #0
 801701a:	0002      	movs	r2, r0
 801701c:	6039      	str	r1, [r7, #0]
 801701e:	1dfb      	adds	r3, r7, #7
 8017020:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017022:	683b      	ldr	r3, [r7, #0]
 8017024:	2204      	movs	r2, #4
 8017026:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017028:	4b02      	ldr	r3, [pc, #8]	@ (8017034 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801702a:	0018      	movs	r0, r3
 801702c:	46bd      	mov	sp, r7
 801702e:	b002      	add	sp, #8
 8017030:	bd80      	pop	{r7, pc}
 8017032:	46c0      	nop			@ (mov r8, r8)
 8017034:	200001c8 	.word	0x200001c8

08017038 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017038:	b580      	push	{r7, lr}
 801703a:	b082      	sub	sp, #8
 801703c:	af00      	add	r7, sp, #0
 801703e:	0002      	movs	r2, r0
 8017040:	6039      	str	r1, [r7, #0]
 8017042:	1dfb      	adds	r3, r7, #7
 8017044:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8017046:	1dfb      	adds	r3, r7, #7
 8017048:	781b      	ldrb	r3, [r3, #0]
 801704a:	2b00      	cmp	r3, #0
 801704c:	d106      	bne.n	801705c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801704e:	683a      	ldr	r2, [r7, #0]
 8017050:	4908      	ldr	r1, [pc, #32]	@ (8017074 <USBD_FS_ProductStrDescriptor+0x3c>)
 8017052:	4b09      	ldr	r3, [pc, #36]	@ (8017078 <USBD_FS_ProductStrDescriptor+0x40>)
 8017054:	0018      	movs	r0, r3
 8017056:	f7ff fdb1 	bl	8016bbc <USBD_GetString>
 801705a:	e005      	b.n	8017068 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801705c:	683a      	ldr	r2, [r7, #0]
 801705e:	4905      	ldr	r1, [pc, #20]	@ (8017074 <USBD_FS_ProductStrDescriptor+0x3c>)
 8017060:	4b05      	ldr	r3, [pc, #20]	@ (8017078 <USBD_FS_ProductStrDescriptor+0x40>)
 8017062:	0018      	movs	r0, r3
 8017064:	f7ff fdaa 	bl	8016bbc <USBD_GetString>
  }
  return USBD_StrDesc;
 8017068:	4b02      	ldr	r3, [pc, #8]	@ (8017074 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801706a:	0018      	movs	r0, r3
 801706c:	46bd      	mov	sp, r7
 801706e:	b002      	add	sp, #8
 8017070:	bd80      	pop	{r7, pc}
 8017072:	46c0      	nop			@ (mov r8, r8)
 8017074:	200038c0 	.word	0x200038c0
 8017078:	0801bde8 	.word	0x0801bde8

0801707c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801707c:	b580      	push	{r7, lr}
 801707e:	b082      	sub	sp, #8
 8017080:	af00      	add	r7, sp, #0
 8017082:	0002      	movs	r2, r0
 8017084:	6039      	str	r1, [r7, #0]
 8017086:	1dfb      	adds	r3, r7, #7
 8017088:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801708a:	683a      	ldr	r2, [r7, #0]
 801708c:	4904      	ldr	r1, [pc, #16]	@ (80170a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801708e:	4b05      	ldr	r3, [pc, #20]	@ (80170a4 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8017090:	0018      	movs	r0, r3
 8017092:	f7ff fd93 	bl	8016bbc <USBD_GetString>
  return USBD_StrDesc;
 8017096:	4b02      	ldr	r3, [pc, #8]	@ (80170a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8017098:	0018      	movs	r0, r3
 801709a:	46bd      	mov	sp, r7
 801709c:	b002      	add	sp, #8
 801709e:	bd80      	pop	{r7, pc}
 80170a0:	200038c0 	.word	0x200038c0
 80170a4:	0801be00 	.word	0x0801be00

080170a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b082      	sub	sp, #8
 80170ac:	af00      	add	r7, sp, #0
 80170ae:	0002      	movs	r2, r0
 80170b0:	6039      	str	r1, [r7, #0]
 80170b2:	1dfb      	adds	r3, r7, #7
 80170b4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80170b6:	683b      	ldr	r3, [r7, #0]
 80170b8:	221a      	movs	r2, #26
 80170ba:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80170bc:	f000 f84c 	bl	8017158 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80170c0:	4b02      	ldr	r3, [pc, #8]	@ (80170cc <USBD_FS_SerialStrDescriptor+0x24>)
}
 80170c2:	0018      	movs	r0, r3
 80170c4:	46bd      	mov	sp, r7
 80170c6:	b002      	add	sp, #8
 80170c8:	bd80      	pop	{r7, pc}
 80170ca:	46c0      	nop			@ (mov r8, r8)
 80170cc:	200001cc 	.word	0x200001cc

080170d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80170d0:	b580      	push	{r7, lr}
 80170d2:	b082      	sub	sp, #8
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	0002      	movs	r2, r0
 80170d8:	6039      	str	r1, [r7, #0]
 80170da:	1dfb      	adds	r3, r7, #7
 80170dc:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80170de:	1dfb      	adds	r3, r7, #7
 80170e0:	781b      	ldrb	r3, [r3, #0]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d106      	bne.n	80170f4 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80170e6:	683a      	ldr	r2, [r7, #0]
 80170e8:	4908      	ldr	r1, [pc, #32]	@ (801710c <USBD_FS_ConfigStrDescriptor+0x3c>)
 80170ea:	4b09      	ldr	r3, [pc, #36]	@ (8017110 <USBD_FS_ConfigStrDescriptor+0x40>)
 80170ec:	0018      	movs	r0, r3
 80170ee:	f7ff fd65 	bl	8016bbc <USBD_GetString>
 80170f2:	e005      	b.n	8017100 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80170f4:	683a      	ldr	r2, [r7, #0]
 80170f6:	4905      	ldr	r1, [pc, #20]	@ (801710c <USBD_FS_ConfigStrDescriptor+0x3c>)
 80170f8:	4b05      	ldr	r3, [pc, #20]	@ (8017110 <USBD_FS_ConfigStrDescriptor+0x40>)
 80170fa:	0018      	movs	r0, r3
 80170fc:	f7ff fd5e 	bl	8016bbc <USBD_GetString>
  }
  return USBD_StrDesc;
 8017100:	4b02      	ldr	r3, [pc, #8]	@ (801710c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8017102:	0018      	movs	r0, r3
 8017104:	46bd      	mov	sp, r7
 8017106:	b002      	add	sp, #8
 8017108:	bd80      	pop	{r7, pc}
 801710a:	46c0      	nop			@ (mov r8, r8)
 801710c:	200038c0 	.word	0x200038c0
 8017110:	0801be14 	.word	0x0801be14

08017114 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017114:	b580      	push	{r7, lr}
 8017116:	b082      	sub	sp, #8
 8017118:	af00      	add	r7, sp, #0
 801711a:	0002      	movs	r2, r0
 801711c:	6039      	str	r1, [r7, #0]
 801711e:	1dfb      	adds	r3, r7, #7
 8017120:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8017122:	1dfb      	adds	r3, r7, #7
 8017124:	781b      	ldrb	r3, [r3, #0]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d106      	bne.n	8017138 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801712a:	683a      	ldr	r2, [r7, #0]
 801712c:	4908      	ldr	r1, [pc, #32]	@ (8017150 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801712e:	4b09      	ldr	r3, [pc, #36]	@ (8017154 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8017130:	0018      	movs	r0, r3
 8017132:	f7ff fd43 	bl	8016bbc <USBD_GetString>
 8017136:	e005      	b.n	8017144 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017138:	683a      	ldr	r2, [r7, #0]
 801713a:	4905      	ldr	r1, [pc, #20]	@ (8017150 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801713c:	4b05      	ldr	r3, [pc, #20]	@ (8017154 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801713e:	0018      	movs	r0, r3
 8017140:	f7ff fd3c 	bl	8016bbc <USBD_GetString>
  }
  return USBD_StrDesc;
 8017144:	4b02      	ldr	r3, [pc, #8]	@ (8017150 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8017146:	0018      	movs	r0, r3
 8017148:	46bd      	mov	sp, r7
 801714a:	b002      	add	sp, #8
 801714c:	bd80      	pop	{r7, pc}
 801714e:	46c0      	nop			@ (mov r8, r8)
 8017150:	200038c0 	.word	0x200038c0
 8017154:	0801be20 	.word	0x0801be20

08017158 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017158:	b580      	push	{r7, lr}
 801715a:	b084      	sub	sp, #16
 801715c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801715e:	4b10      	ldr	r3, [pc, #64]	@ (80171a0 <Get_SerialNum+0x48>)
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017164:	4b0f      	ldr	r3, [pc, #60]	@ (80171a4 <Get_SerialNum+0x4c>)
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801716a:	4b0f      	ldr	r3, [pc, #60]	@ (80171a8 <Get_SerialNum+0x50>)
 801716c:	681b      	ldr	r3, [r3, #0]
 801716e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017170:	68fa      	ldr	r2, [r7, #12]
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	18d3      	adds	r3, r2, r3
 8017176:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	2b00      	cmp	r3, #0
 801717c:	d00b      	beq.n	8017196 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801717e:	490b      	ldr	r1, [pc, #44]	@ (80171ac <Get_SerialNum+0x54>)
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	2208      	movs	r2, #8
 8017184:	0018      	movs	r0, r3
 8017186:	f000 f815 	bl	80171b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801718a:	4909      	ldr	r1, [pc, #36]	@ (80171b0 <Get_SerialNum+0x58>)
 801718c:	68bb      	ldr	r3, [r7, #8]
 801718e:	2204      	movs	r2, #4
 8017190:	0018      	movs	r0, r3
 8017192:	f000 f80f 	bl	80171b4 <IntToUnicode>
  }
}
 8017196:	46c0      	nop			@ (mov r8, r8)
 8017198:	46bd      	mov	sp, r7
 801719a:	b004      	add	sp, #16
 801719c:	bd80      	pop	{r7, pc}
 801719e:	46c0      	nop			@ (mov r8, r8)
 80171a0:	1ff80050 	.word	0x1ff80050
 80171a4:	1ff80054 	.word	0x1ff80054
 80171a8:	1ff80058 	.word	0x1ff80058
 80171ac:	200001ce 	.word	0x200001ce
 80171b0:	200001de 	.word	0x200001de

080171b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80171b4:	b580      	push	{r7, lr}
 80171b6:	b086      	sub	sp, #24
 80171b8:	af00      	add	r7, sp, #0
 80171ba:	60f8      	str	r0, [r7, #12]
 80171bc:	60b9      	str	r1, [r7, #8]
 80171be:	1dfb      	adds	r3, r7, #7
 80171c0:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80171c2:	2117      	movs	r1, #23
 80171c4:	187b      	adds	r3, r7, r1
 80171c6:	2200      	movs	r2, #0
 80171c8:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80171ca:	187b      	adds	r3, r7, r1
 80171cc:	2200      	movs	r2, #0
 80171ce:	701a      	strb	r2, [r3, #0]
 80171d0:	e02f      	b.n	8017232 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	0f1b      	lsrs	r3, r3, #28
 80171d6:	2b09      	cmp	r3, #9
 80171d8:	d80d      	bhi.n	80171f6 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	0f1b      	lsrs	r3, r3, #28
 80171de:	b2da      	uxtb	r2, r3
 80171e0:	2317      	movs	r3, #23
 80171e2:	18fb      	adds	r3, r7, r3
 80171e4:	781b      	ldrb	r3, [r3, #0]
 80171e6:	005b      	lsls	r3, r3, #1
 80171e8:	0019      	movs	r1, r3
 80171ea:	68bb      	ldr	r3, [r7, #8]
 80171ec:	185b      	adds	r3, r3, r1
 80171ee:	3230      	adds	r2, #48	@ 0x30
 80171f0:	b2d2      	uxtb	r2, r2
 80171f2:	701a      	strb	r2, [r3, #0]
 80171f4:	e00c      	b.n	8017210 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	0f1b      	lsrs	r3, r3, #28
 80171fa:	b2da      	uxtb	r2, r3
 80171fc:	2317      	movs	r3, #23
 80171fe:	18fb      	adds	r3, r7, r3
 8017200:	781b      	ldrb	r3, [r3, #0]
 8017202:	005b      	lsls	r3, r3, #1
 8017204:	0019      	movs	r1, r3
 8017206:	68bb      	ldr	r3, [r7, #8]
 8017208:	185b      	adds	r3, r3, r1
 801720a:	3237      	adds	r2, #55	@ 0x37
 801720c:	b2d2      	uxtb	r2, r2
 801720e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	011b      	lsls	r3, r3, #4
 8017214:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017216:	2117      	movs	r1, #23
 8017218:	187b      	adds	r3, r7, r1
 801721a:	781b      	ldrb	r3, [r3, #0]
 801721c:	005b      	lsls	r3, r3, #1
 801721e:	3301      	adds	r3, #1
 8017220:	68ba      	ldr	r2, [r7, #8]
 8017222:	18d3      	adds	r3, r2, r3
 8017224:	2200      	movs	r2, #0
 8017226:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017228:	187b      	adds	r3, r7, r1
 801722a:	781a      	ldrb	r2, [r3, #0]
 801722c:	187b      	adds	r3, r7, r1
 801722e:	3201      	adds	r2, #1
 8017230:	701a      	strb	r2, [r3, #0]
 8017232:	2317      	movs	r3, #23
 8017234:	18fa      	adds	r2, r7, r3
 8017236:	1dfb      	adds	r3, r7, #7
 8017238:	7812      	ldrb	r2, [r2, #0]
 801723a:	781b      	ldrb	r3, [r3, #0]
 801723c:	429a      	cmp	r2, r3
 801723e:	d3c8      	bcc.n	80171d2 <IntToUnicode+0x1e>
  }
}
 8017240:	46c0      	nop			@ (mov r8, r8)
 8017242:	46c0      	nop			@ (mov r8, r8)
 8017244:	46bd      	mov	sp, r7
 8017246:	b006      	add	sp, #24
 8017248:	bd80      	pop	{r7, pc}
	...

0801724c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801724c:	b580      	push	{r7, lr}
 801724e:	b082      	sub	sp, #8
 8017250:	af00      	add	r7, sp, #0
 8017252:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	4a0a      	ldr	r2, [pc, #40]	@ (8017284 <HAL_PCD_MspInit+0x38>)
 801725a:	4293      	cmp	r3, r2
 801725c:	d10e      	bne.n	801727c <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801725e:	4b0a      	ldr	r3, [pc, #40]	@ (8017288 <HAL_PCD_MspInit+0x3c>)
 8017260:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017262:	4b09      	ldr	r3, [pc, #36]	@ (8017288 <HAL_PCD_MspInit+0x3c>)
 8017264:	2180      	movs	r1, #128	@ 0x80
 8017266:	0409      	lsls	r1, r1, #16
 8017268:	430a      	orrs	r2, r1
 801726a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801726c:	2200      	movs	r2, #0
 801726e:	2100      	movs	r1, #0
 8017270:	201f      	movs	r0, #31
 8017272:	f7f3 fc57 	bl	800ab24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8017276:	201f      	movs	r0, #31
 8017278:	f7f3 fc69 	bl	800ab4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801727c:	46c0      	nop			@ (mov r8, r8)
 801727e:	46bd      	mov	sp, r7
 8017280:	b002      	add	sp, #8
 8017282:	bd80      	pop	{r7, pc}
 8017284:	40005c00 	.word	0x40005c00
 8017288:	40021000 	.word	0x40021000

0801728c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801728c:	b580      	push	{r7, lr}
 801728e:	b082      	sub	sp, #8
 8017290:	af00      	add	r7, sp, #0
 8017292:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017294:	687a      	ldr	r2, [r7, #4]
 8017296:	23bc      	movs	r3, #188	@ 0xbc
 8017298:	009b      	lsls	r3, r3, #2
 801729a:	58d2      	ldr	r2, [r2, r3]
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	21ac      	movs	r1, #172	@ 0xac
 80172a0:	0089      	lsls	r1, r1, #2
 80172a2:	468c      	mov	ip, r1
 80172a4:	4463      	add	r3, ip
 80172a6:	0019      	movs	r1, r3
 80172a8:	0010      	movs	r0, r2
 80172aa:	f7fe fc1d 	bl	8015ae8 <USBD_LL_SetupStage>
}
 80172ae:	46c0      	nop			@ (mov r8, r8)
 80172b0:	46bd      	mov	sp, r7
 80172b2:	b002      	add	sp, #8
 80172b4:	bd80      	pop	{r7, pc}

080172b6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172b6:	b590      	push	{r4, r7, lr}
 80172b8:	b083      	sub	sp, #12
 80172ba:	af00      	add	r7, sp, #0
 80172bc:	6078      	str	r0, [r7, #4]
 80172be:	000a      	movs	r2, r1
 80172c0:	1cfb      	adds	r3, r7, #3
 80172c2:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80172c4:	687a      	ldr	r2, [r7, #4]
 80172c6:	23bc      	movs	r3, #188	@ 0xbc
 80172c8:	009b      	lsls	r3, r3, #2
 80172ca:	58d4      	ldr	r4, [r2, r3]
 80172cc:	1cfb      	adds	r3, r7, #3
 80172ce:	781a      	ldrb	r2, [r3, #0]
 80172d0:	6878      	ldr	r0, [r7, #4]
 80172d2:	23be      	movs	r3, #190	@ 0xbe
 80172d4:	0059      	lsls	r1, r3, #1
 80172d6:	0013      	movs	r3, r2
 80172d8:	009b      	lsls	r3, r3, #2
 80172da:	189b      	adds	r3, r3, r2
 80172dc:	00db      	lsls	r3, r3, #3
 80172de:	18c3      	adds	r3, r0, r3
 80172e0:	185b      	adds	r3, r3, r1
 80172e2:	681a      	ldr	r2, [r3, #0]
 80172e4:	1cfb      	adds	r3, r7, #3
 80172e6:	781b      	ldrb	r3, [r3, #0]
 80172e8:	0019      	movs	r1, r3
 80172ea:	0020      	movs	r0, r4
 80172ec:	f7fe fc5a 	bl	8015ba4 <USBD_LL_DataOutStage>
}
 80172f0:	46c0      	nop			@ (mov r8, r8)
 80172f2:	46bd      	mov	sp, r7
 80172f4:	b003      	add	sp, #12
 80172f6:	bd90      	pop	{r4, r7, pc}

080172f8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172f8:	b580      	push	{r7, lr}
 80172fa:	b082      	sub	sp, #8
 80172fc:	af00      	add	r7, sp, #0
 80172fe:	6078      	str	r0, [r7, #4]
 8017300:	000a      	movs	r2, r1
 8017302:	1cfb      	adds	r3, r7, #3
 8017304:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017306:	687a      	ldr	r2, [r7, #4]
 8017308:	23bc      	movs	r3, #188	@ 0xbc
 801730a:	009b      	lsls	r3, r3, #2
 801730c:	58d0      	ldr	r0, [r2, r3]
 801730e:	1cfb      	adds	r3, r7, #3
 8017310:	781a      	ldrb	r2, [r3, #0]
 8017312:	6879      	ldr	r1, [r7, #4]
 8017314:	0013      	movs	r3, r2
 8017316:	009b      	lsls	r3, r3, #2
 8017318:	189b      	adds	r3, r3, r2
 801731a:	00db      	lsls	r3, r3, #3
 801731c:	18cb      	adds	r3, r1, r3
 801731e:	333c      	adds	r3, #60	@ 0x3c
 8017320:	681a      	ldr	r2, [r3, #0]
 8017322:	1cfb      	adds	r3, r7, #3
 8017324:	781b      	ldrb	r3, [r3, #0]
 8017326:	0019      	movs	r1, r3
 8017328:	f7fe fcbe 	bl	8015ca8 <USBD_LL_DataInStage>
}
 801732c:	46c0      	nop			@ (mov r8, r8)
 801732e:	46bd      	mov	sp, r7
 8017330:	b002      	add	sp, #8
 8017332:	bd80      	pop	{r7, pc}

08017334 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017334:	b580      	push	{r7, lr}
 8017336:	b082      	sub	sp, #8
 8017338:	af00      	add	r7, sp, #0
 801733a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801733c:	687a      	ldr	r2, [r7, #4]
 801733e:	23bc      	movs	r3, #188	@ 0xbc
 8017340:	009b      	lsls	r3, r3, #2
 8017342:	58d3      	ldr	r3, [r2, r3]
 8017344:	0018      	movs	r0, r3
 8017346:	f7fe fdf5 	bl	8015f34 <USBD_LL_SOF>
}
 801734a:	46c0      	nop			@ (mov r8, r8)
 801734c:	46bd      	mov	sp, r7
 801734e:	b002      	add	sp, #8
 8017350:	bd80      	pop	{r7, pc}

08017352 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017352:	b580      	push	{r7, lr}
 8017354:	b084      	sub	sp, #16
 8017356:	af00      	add	r7, sp, #0
 8017358:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801735a:	230f      	movs	r3, #15
 801735c:	18fb      	adds	r3, r7, r3
 801735e:	2201      	movs	r2, #1
 8017360:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	689b      	ldr	r3, [r3, #8]
 8017366:	2b02      	cmp	r3, #2
 8017368:	d001      	beq.n	801736e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801736a:	f7ef f93b 	bl	80065e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801736e:	687a      	ldr	r2, [r7, #4]
 8017370:	23bc      	movs	r3, #188	@ 0xbc
 8017372:	009b      	lsls	r3, r3, #2
 8017374:	58d2      	ldr	r2, [r2, r3]
 8017376:	230f      	movs	r3, #15
 8017378:	18fb      	adds	r3, r7, r3
 801737a:	781b      	ldrb	r3, [r3, #0]
 801737c:	0019      	movs	r1, r3
 801737e:	0010      	movs	r0, r2
 8017380:	f7fe fd97 	bl	8015eb2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017384:	687a      	ldr	r2, [r7, #4]
 8017386:	23bc      	movs	r3, #188	@ 0xbc
 8017388:	009b      	lsls	r3, r3, #2
 801738a:	58d3      	ldr	r3, [r2, r3]
 801738c:	0018      	movs	r0, r3
 801738e:	f7fe fd48 	bl	8015e22 <USBD_LL_Reset>
}
 8017392:	46c0      	nop			@ (mov r8, r8)
 8017394:	46bd      	mov	sp, r7
 8017396:	b004      	add	sp, #16
 8017398:	bd80      	pop	{r7, pc}
	...

0801739c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801739c:	b580      	push	{r7, lr}
 801739e:	b082      	sub	sp, #8
 80173a0:	af00      	add	r7, sp, #0
 80173a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80173a4:	687a      	ldr	r2, [r7, #4]
 80173a6:	23bc      	movs	r3, #188	@ 0xbc
 80173a8:	009b      	lsls	r3, r3, #2
 80173aa:	58d3      	ldr	r3, [r2, r3]
 80173ac:	0018      	movs	r0, r3
 80173ae:	f7fe fd91 	bl	8015ed4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	699b      	ldr	r3, [r3, #24]
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d005      	beq.n	80173c6 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80173ba:	4b05      	ldr	r3, [pc, #20]	@ (80173d0 <HAL_PCD_SuspendCallback+0x34>)
 80173bc:	691a      	ldr	r2, [r3, #16]
 80173be:	4b04      	ldr	r3, [pc, #16]	@ (80173d0 <HAL_PCD_SuspendCallback+0x34>)
 80173c0:	2106      	movs	r1, #6
 80173c2:	430a      	orrs	r2, r1
 80173c4:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80173c6:	46c0      	nop			@ (mov r8, r8)
 80173c8:	46bd      	mov	sp, r7
 80173ca:	b002      	add	sp, #8
 80173cc:	bd80      	pop	{r7, pc}
 80173ce:	46c0      	nop			@ (mov r8, r8)
 80173d0:	e000ed00 	.word	0xe000ed00

080173d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80173d4:	b580      	push	{r7, lr}
 80173d6:	b082      	sub	sp, #8
 80173d8:	af00      	add	r7, sp, #0
 80173da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	699b      	ldr	r3, [r3, #24]
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d007      	beq.n	80173f4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80173e4:	4b09      	ldr	r3, [pc, #36]	@ (801740c <HAL_PCD_ResumeCallback+0x38>)
 80173e6:	691a      	ldr	r2, [r3, #16]
 80173e8:	4b08      	ldr	r3, [pc, #32]	@ (801740c <HAL_PCD_ResumeCallback+0x38>)
 80173ea:	2106      	movs	r1, #6
 80173ec:	438a      	bics	r2, r1
 80173ee:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80173f0:	f000 fa44 	bl	801787c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80173f4:	687a      	ldr	r2, [r7, #4]
 80173f6:	23bc      	movs	r3, #188	@ 0xbc
 80173f8:	009b      	lsls	r3, r3, #2
 80173fa:	58d3      	ldr	r3, [r2, r3]
 80173fc:	0018      	movs	r0, r3
 80173fe:	f7fe fd81 	bl	8015f04 <USBD_LL_Resume>
}
 8017402:	46c0      	nop			@ (mov r8, r8)
 8017404:	46bd      	mov	sp, r7
 8017406:	b002      	add	sp, #8
 8017408:	bd80      	pop	{r7, pc}
 801740a:	46c0      	nop			@ (mov r8, r8)
 801740c:	e000ed00 	.word	0xe000ed00

08017410 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017410:	b580      	push	{r7, lr}
 8017412:	b082      	sub	sp, #8
 8017414:	af00      	add	r7, sp, #0
 8017416:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8017418:	4a2d      	ldr	r2, [pc, #180]	@ (80174d0 <USBD_LL_Init+0xc0>)
 801741a:	23bc      	movs	r3, #188	@ 0xbc
 801741c:	009b      	lsls	r3, r3, #2
 801741e:	6879      	ldr	r1, [r7, #4]
 8017420:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8017422:	687a      	ldr	r2, [r7, #4]
 8017424:	23b0      	movs	r3, #176	@ 0xb0
 8017426:	009b      	lsls	r3, r3, #2
 8017428:	4929      	ldr	r1, [pc, #164]	@ (80174d0 <USBD_LL_Init+0xc0>)
 801742a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801742c:	4b28      	ldr	r3, [pc, #160]	@ (80174d0 <USBD_LL_Init+0xc0>)
 801742e:	4a29      	ldr	r2, [pc, #164]	@ (80174d4 <USBD_LL_Init+0xc4>)
 8017430:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8017432:	4b27      	ldr	r3, [pc, #156]	@ (80174d0 <USBD_LL_Init+0xc0>)
 8017434:	2208      	movs	r2, #8
 8017436:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8017438:	4b25      	ldr	r3, [pc, #148]	@ (80174d0 <USBD_LL_Init+0xc0>)
 801743a:	2202      	movs	r2, #2
 801743c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801743e:	4b24      	ldr	r3, [pc, #144]	@ (80174d0 <USBD_LL_Init+0xc0>)
 8017440:	2202      	movs	r2, #2
 8017442:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8017444:	4b22      	ldr	r3, [pc, #136]	@ (80174d0 <USBD_LL_Init+0xc0>)
 8017446:	2200      	movs	r2, #0
 8017448:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801744a:	4b21      	ldr	r3, [pc, #132]	@ (80174d0 <USBD_LL_Init+0xc0>)
 801744c:	2200      	movs	r2, #0
 801744e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8017450:	4b1f      	ldr	r3, [pc, #124]	@ (80174d0 <USBD_LL_Init+0xc0>)
 8017452:	2200      	movs	r2, #0
 8017454:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8017456:	4b1e      	ldr	r3, [pc, #120]	@ (80174d0 <USBD_LL_Init+0xc0>)
 8017458:	0018      	movs	r0, r3
 801745a:	f7f6 fe07 	bl	800e06c <HAL_PCD_Init>
 801745e:	1e03      	subs	r3, r0, #0
 8017460:	d001      	beq.n	8017466 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8017462:	f7ef f8bf 	bl	80065e4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8017466:	687a      	ldr	r2, [r7, #4]
 8017468:	23b0      	movs	r3, #176	@ 0xb0
 801746a:	009b      	lsls	r3, r3, #2
 801746c:	58d0      	ldr	r0, [r2, r3]
 801746e:	2318      	movs	r3, #24
 8017470:	2200      	movs	r2, #0
 8017472:	2100      	movs	r1, #0
 8017474:	f7f8 fbc8 	bl	800fc08 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8017478:	687a      	ldr	r2, [r7, #4]
 801747a:	23b0      	movs	r3, #176	@ 0xb0
 801747c:	009b      	lsls	r3, r3, #2
 801747e:	58d0      	ldr	r0, [r2, r3]
 8017480:	2358      	movs	r3, #88	@ 0x58
 8017482:	2200      	movs	r2, #0
 8017484:	2180      	movs	r1, #128	@ 0x80
 8017486:	f7f8 fbbf 	bl	800fc08 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801748a:	687a      	ldr	r2, [r7, #4]
 801748c:	23b0      	movs	r3, #176	@ 0xb0
 801748e:	009b      	lsls	r3, r3, #2
 8017490:	58d0      	ldr	r0, [r2, r3]
 8017492:	23c0      	movs	r3, #192	@ 0xc0
 8017494:	2200      	movs	r2, #0
 8017496:	2181      	movs	r1, #129	@ 0x81
 8017498:	f7f8 fbb6 	bl	800fc08 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801749c:	687a      	ldr	r2, [r7, #4]
 801749e:	23b0      	movs	r3, #176	@ 0xb0
 80174a0:	009b      	lsls	r3, r3, #2
 80174a2:	58d0      	ldr	r0, [r2, r3]
 80174a4:	2388      	movs	r3, #136	@ 0x88
 80174a6:	005b      	lsls	r3, r3, #1
 80174a8:	2200      	movs	r2, #0
 80174aa:	2101      	movs	r1, #1
 80174ac:	f7f8 fbac 	bl	800fc08 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80174b0:	687a      	ldr	r2, [r7, #4]
 80174b2:	23b0      	movs	r3, #176	@ 0xb0
 80174b4:	009b      	lsls	r3, r3, #2
 80174b6:	58d0      	ldr	r0, [r2, r3]
 80174b8:	2380      	movs	r3, #128	@ 0x80
 80174ba:	005b      	lsls	r3, r3, #1
 80174bc:	2200      	movs	r2, #0
 80174be:	2182      	movs	r1, #130	@ 0x82
 80174c0:	f7f8 fba2 	bl	800fc08 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80174c4:	2300      	movs	r3, #0
}
 80174c6:	0018      	movs	r0, r3
 80174c8:	46bd      	mov	sp, r7
 80174ca:	b002      	add	sp, #8
 80174cc:	bd80      	pop	{r7, pc}
 80174ce:	46c0      	nop			@ (mov r8, r8)
 80174d0:	20003ac0 	.word	0x20003ac0
 80174d4:	40005c00 	.word	0x40005c00

080174d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80174d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174da:	b085      	sub	sp, #20
 80174dc:	af00      	add	r7, sp, #0
 80174de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80174e0:	210f      	movs	r1, #15
 80174e2:	187b      	adds	r3, r7, r1
 80174e4:	2200      	movs	r2, #0
 80174e6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80174e8:	260e      	movs	r6, #14
 80174ea:	19bb      	adds	r3, r7, r6
 80174ec:	2200      	movs	r2, #0
 80174ee:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80174f0:	687a      	ldr	r2, [r7, #4]
 80174f2:	23b0      	movs	r3, #176	@ 0xb0
 80174f4:	009b      	lsls	r3, r3, #2
 80174f6:	58d3      	ldr	r3, [r2, r3]
 80174f8:	000d      	movs	r5, r1
 80174fa:	187c      	adds	r4, r7, r1
 80174fc:	0018      	movs	r0, r3
 80174fe:	f7f6 feb5 	bl	800e26c <HAL_PCD_Start>
 8017502:	0003      	movs	r3, r0
 8017504:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017506:	19bc      	adds	r4, r7, r6
 8017508:	197b      	adds	r3, r7, r5
 801750a:	781b      	ldrb	r3, [r3, #0]
 801750c:	0018      	movs	r0, r3
 801750e:	f000 f9bc 	bl	801788a <USBD_Get_USB_Status>
 8017512:	0003      	movs	r3, r0
 8017514:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8017516:	19bb      	adds	r3, r7, r6
 8017518:	781b      	ldrb	r3, [r3, #0]
}
 801751a:	0018      	movs	r0, r3
 801751c:	46bd      	mov	sp, r7
 801751e:	b005      	add	sp, #20
 8017520:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017522 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017522:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017524:	b085      	sub	sp, #20
 8017526:	af00      	add	r7, sp, #0
 8017528:	6078      	str	r0, [r7, #4]
 801752a:	000c      	movs	r4, r1
 801752c:	0010      	movs	r0, r2
 801752e:	0019      	movs	r1, r3
 8017530:	1cfb      	adds	r3, r7, #3
 8017532:	1c22      	adds	r2, r4, #0
 8017534:	701a      	strb	r2, [r3, #0]
 8017536:	1cbb      	adds	r3, r7, #2
 8017538:	1c02      	adds	r2, r0, #0
 801753a:	701a      	strb	r2, [r3, #0]
 801753c:	003b      	movs	r3, r7
 801753e:	1c0a      	adds	r2, r1, #0
 8017540:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017542:	260f      	movs	r6, #15
 8017544:	19bb      	adds	r3, r7, r6
 8017546:	2200      	movs	r2, #0
 8017548:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801754a:	250e      	movs	r5, #14
 801754c:	197b      	adds	r3, r7, r5
 801754e:	2200      	movs	r2, #0
 8017550:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017552:	687a      	ldr	r2, [r7, #4]
 8017554:	23b0      	movs	r3, #176	@ 0xb0
 8017556:	009b      	lsls	r3, r3, #2
 8017558:	58d0      	ldr	r0, [r2, r3]
 801755a:	19bc      	adds	r4, r7, r6
 801755c:	1cbb      	adds	r3, r7, #2
 801755e:	781d      	ldrb	r5, [r3, #0]
 8017560:	003b      	movs	r3, r7
 8017562:	881a      	ldrh	r2, [r3, #0]
 8017564:	1cfb      	adds	r3, r7, #3
 8017566:	7819      	ldrb	r1, [r3, #0]
 8017568:	002b      	movs	r3, r5
 801756a:	f7f7 f814 	bl	800e596 <HAL_PCD_EP_Open>
 801756e:	0003      	movs	r3, r0
 8017570:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017572:	250e      	movs	r5, #14
 8017574:	197c      	adds	r4, r7, r5
 8017576:	19bb      	adds	r3, r7, r6
 8017578:	781b      	ldrb	r3, [r3, #0]
 801757a:	0018      	movs	r0, r3
 801757c:	f000 f985 	bl	801788a <USBD_Get_USB_Status>
 8017580:	0003      	movs	r3, r0
 8017582:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8017584:	197b      	adds	r3, r7, r5
 8017586:	781b      	ldrb	r3, [r3, #0]
}
 8017588:	0018      	movs	r0, r3
 801758a:	46bd      	mov	sp, r7
 801758c:	b005      	add	sp, #20
 801758e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017590 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017592:	b085      	sub	sp, #20
 8017594:	af00      	add	r7, sp, #0
 8017596:	6078      	str	r0, [r7, #4]
 8017598:	000a      	movs	r2, r1
 801759a:	1cfb      	adds	r3, r7, #3
 801759c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801759e:	210f      	movs	r1, #15
 80175a0:	187b      	adds	r3, r7, r1
 80175a2:	2200      	movs	r2, #0
 80175a4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80175a6:	260e      	movs	r6, #14
 80175a8:	19bb      	adds	r3, r7, r6
 80175aa:	2200      	movs	r2, #0
 80175ac:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80175ae:	687a      	ldr	r2, [r7, #4]
 80175b0:	23b0      	movs	r3, #176	@ 0xb0
 80175b2:	009b      	lsls	r3, r3, #2
 80175b4:	58d2      	ldr	r2, [r2, r3]
 80175b6:	000d      	movs	r5, r1
 80175b8:	187c      	adds	r4, r7, r1
 80175ba:	1cfb      	adds	r3, r7, #3
 80175bc:	781b      	ldrb	r3, [r3, #0]
 80175be:	0019      	movs	r1, r3
 80175c0:	0010      	movs	r0, r2
 80175c2:	f7f7 f857 	bl	800e674 <HAL_PCD_EP_Close>
 80175c6:	0003      	movs	r3, r0
 80175c8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80175ca:	19bc      	adds	r4, r7, r6
 80175cc:	197b      	adds	r3, r7, r5
 80175ce:	781b      	ldrb	r3, [r3, #0]
 80175d0:	0018      	movs	r0, r3
 80175d2:	f000 f95a 	bl	801788a <USBD_Get_USB_Status>
 80175d6:	0003      	movs	r3, r0
 80175d8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80175da:	19bb      	adds	r3, r7, r6
 80175dc:	781b      	ldrb	r3, [r3, #0]
}
 80175de:	0018      	movs	r0, r3
 80175e0:	46bd      	mov	sp, r7
 80175e2:	b005      	add	sp, #20
 80175e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080175e6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80175e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80175e8:	b085      	sub	sp, #20
 80175ea:	af00      	add	r7, sp, #0
 80175ec:	6078      	str	r0, [r7, #4]
 80175ee:	000a      	movs	r2, r1
 80175f0:	1cfb      	adds	r3, r7, #3
 80175f2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80175f4:	210f      	movs	r1, #15
 80175f6:	187b      	adds	r3, r7, r1
 80175f8:	2200      	movs	r2, #0
 80175fa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80175fc:	260e      	movs	r6, #14
 80175fe:	19bb      	adds	r3, r7, r6
 8017600:	2200      	movs	r2, #0
 8017602:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017604:	687a      	ldr	r2, [r7, #4]
 8017606:	23b0      	movs	r3, #176	@ 0xb0
 8017608:	009b      	lsls	r3, r3, #2
 801760a:	58d2      	ldr	r2, [r2, r3]
 801760c:	000d      	movs	r5, r1
 801760e:	187c      	adds	r4, r7, r1
 8017610:	1cfb      	adds	r3, r7, #3
 8017612:	781b      	ldrb	r3, [r3, #0]
 8017614:	0019      	movs	r1, r3
 8017616:	0010      	movs	r0, r2
 8017618:	f7f7 f909 	bl	800e82e <HAL_PCD_EP_SetStall>
 801761c:	0003      	movs	r3, r0
 801761e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017620:	19bc      	adds	r4, r7, r6
 8017622:	197b      	adds	r3, r7, r5
 8017624:	781b      	ldrb	r3, [r3, #0]
 8017626:	0018      	movs	r0, r3
 8017628:	f000 f92f 	bl	801788a <USBD_Get_USB_Status>
 801762c:	0003      	movs	r3, r0
 801762e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8017630:	19bb      	adds	r3, r7, r6
 8017632:	781b      	ldrb	r3, [r3, #0]
}
 8017634:	0018      	movs	r0, r3
 8017636:	46bd      	mov	sp, r7
 8017638:	b005      	add	sp, #20
 801763a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801763c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801763c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801763e:	b085      	sub	sp, #20
 8017640:	af00      	add	r7, sp, #0
 8017642:	6078      	str	r0, [r7, #4]
 8017644:	000a      	movs	r2, r1
 8017646:	1cfb      	adds	r3, r7, #3
 8017648:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801764a:	210f      	movs	r1, #15
 801764c:	187b      	adds	r3, r7, r1
 801764e:	2200      	movs	r2, #0
 8017650:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017652:	260e      	movs	r6, #14
 8017654:	19bb      	adds	r3, r7, r6
 8017656:	2200      	movs	r2, #0
 8017658:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801765a:	687a      	ldr	r2, [r7, #4]
 801765c:	23b0      	movs	r3, #176	@ 0xb0
 801765e:	009b      	lsls	r3, r3, #2
 8017660:	58d2      	ldr	r2, [r2, r3]
 8017662:	000d      	movs	r5, r1
 8017664:	187c      	adds	r4, r7, r1
 8017666:	1cfb      	adds	r3, r7, #3
 8017668:	781b      	ldrb	r3, [r3, #0]
 801766a:	0019      	movs	r1, r3
 801766c:	0010      	movs	r0, r2
 801766e:	f7f7 f93a 	bl	800e8e6 <HAL_PCD_EP_ClrStall>
 8017672:	0003      	movs	r3, r0
 8017674:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017676:	19bc      	adds	r4, r7, r6
 8017678:	197b      	adds	r3, r7, r5
 801767a:	781b      	ldrb	r3, [r3, #0]
 801767c:	0018      	movs	r0, r3
 801767e:	f000 f904 	bl	801788a <USBD_Get_USB_Status>
 8017682:	0003      	movs	r3, r0
 8017684:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8017686:	19bb      	adds	r3, r7, r6
 8017688:	781b      	ldrb	r3, [r3, #0]
}
 801768a:	0018      	movs	r0, r3
 801768c:	46bd      	mov	sp, r7
 801768e:	b005      	add	sp, #20
 8017690:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017692 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017692:	b580      	push	{r7, lr}
 8017694:	b084      	sub	sp, #16
 8017696:	af00      	add	r7, sp, #0
 8017698:	6078      	str	r0, [r7, #4]
 801769a:	000a      	movs	r2, r1
 801769c:	1cfb      	adds	r3, r7, #3
 801769e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80176a0:	687a      	ldr	r2, [r7, #4]
 80176a2:	23b0      	movs	r3, #176	@ 0xb0
 80176a4:	009b      	lsls	r3, r3, #2
 80176a6:	58d3      	ldr	r3, [r2, r3]
 80176a8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80176aa:	1cfb      	adds	r3, r7, #3
 80176ac:	781b      	ldrb	r3, [r3, #0]
 80176ae:	b25b      	sxtb	r3, r3
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	da0d      	bge.n	80176d0 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80176b4:	1cfb      	adds	r3, r7, #3
 80176b6:	781b      	ldrb	r3, [r3, #0]
 80176b8:	227f      	movs	r2, #127	@ 0x7f
 80176ba:	4013      	ands	r3, r2
 80176bc:	68f9      	ldr	r1, [r7, #12]
 80176be:	1c5a      	adds	r2, r3, #1
 80176c0:	0013      	movs	r3, r2
 80176c2:	009b      	lsls	r3, r3, #2
 80176c4:	189b      	adds	r3, r3, r2
 80176c6:	00db      	lsls	r3, r3, #3
 80176c8:	18cb      	adds	r3, r1, r3
 80176ca:	3302      	adds	r3, #2
 80176cc:	781b      	ldrb	r3, [r3, #0]
 80176ce:	e00d      	b.n	80176ec <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80176d0:	1cfb      	adds	r3, r7, #3
 80176d2:	781b      	ldrb	r3, [r3, #0]
 80176d4:	227f      	movs	r2, #127	@ 0x7f
 80176d6:	401a      	ands	r2, r3
 80176d8:	68f8      	ldr	r0, [r7, #12]
 80176da:	23b5      	movs	r3, #181	@ 0xb5
 80176dc:	0059      	lsls	r1, r3, #1
 80176de:	0013      	movs	r3, r2
 80176e0:	009b      	lsls	r3, r3, #2
 80176e2:	189b      	adds	r3, r3, r2
 80176e4:	00db      	lsls	r3, r3, #3
 80176e6:	18c3      	adds	r3, r0, r3
 80176e8:	185b      	adds	r3, r3, r1
 80176ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 80176ec:	0018      	movs	r0, r3
 80176ee:	46bd      	mov	sp, r7
 80176f0:	b004      	add	sp, #16
 80176f2:	bd80      	pop	{r7, pc}

080176f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80176f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176f6:	b085      	sub	sp, #20
 80176f8:	af00      	add	r7, sp, #0
 80176fa:	6078      	str	r0, [r7, #4]
 80176fc:	000a      	movs	r2, r1
 80176fe:	1cfb      	adds	r3, r7, #3
 8017700:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017702:	210f      	movs	r1, #15
 8017704:	187b      	adds	r3, r7, r1
 8017706:	2200      	movs	r2, #0
 8017708:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801770a:	260e      	movs	r6, #14
 801770c:	19bb      	adds	r3, r7, r6
 801770e:	2200      	movs	r2, #0
 8017710:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017712:	687a      	ldr	r2, [r7, #4]
 8017714:	23b0      	movs	r3, #176	@ 0xb0
 8017716:	009b      	lsls	r3, r3, #2
 8017718:	58d2      	ldr	r2, [r2, r3]
 801771a:	000d      	movs	r5, r1
 801771c:	187c      	adds	r4, r7, r1
 801771e:	1cfb      	adds	r3, r7, #3
 8017720:	781b      	ldrb	r3, [r3, #0]
 8017722:	0019      	movs	r1, r3
 8017724:	0010      	movs	r0, r2
 8017726:	f7f6 ff0b 	bl	800e540 <HAL_PCD_SetAddress>
 801772a:	0003      	movs	r3, r0
 801772c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801772e:	19bc      	adds	r4, r7, r6
 8017730:	197b      	adds	r3, r7, r5
 8017732:	781b      	ldrb	r3, [r3, #0]
 8017734:	0018      	movs	r0, r3
 8017736:	f000 f8a8 	bl	801788a <USBD_Get_USB_Status>
 801773a:	0003      	movs	r3, r0
 801773c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801773e:	19bb      	adds	r3, r7, r6
 8017740:	781b      	ldrb	r3, [r3, #0]
}
 8017742:	0018      	movs	r0, r3
 8017744:	46bd      	mov	sp, r7
 8017746:	b005      	add	sp, #20
 8017748:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801774a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801774a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801774c:	b087      	sub	sp, #28
 801774e:	af00      	add	r7, sp, #0
 8017750:	60f8      	str	r0, [r7, #12]
 8017752:	0008      	movs	r0, r1
 8017754:	607a      	str	r2, [r7, #4]
 8017756:	0019      	movs	r1, r3
 8017758:	230b      	movs	r3, #11
 801775a:	18fb      	adds	r3, r7, r3
 801775c:	1c02      	adds	r2, r0, #0
 801775e:	701a      	strb	r2, [r3, #0]
 8017760:	2408      	movs	r4, #8
 8017762:	193b      	adds	r3, r7, r4
 8017764:	1c0a      	adds	r2, r1, #0
 8017766:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017768:	2117      	movs	r1, #23
 801776a:	187b      	adds	r3, r7, r1
 801776c:	2200      	movs	r2, #0
 801776e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017770:	2516      	movs	r5, #22
 8017772:	197b      	adds	r3, r7, r5
 8017774:	2200      	movs	r2, #0
 8017776:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017778:	68fa      	ldr	r2, [r7, #12]
 801777a:	23b0      	movs	r3, #176	@ 0xb0
 801777c:	009b      	lsls	r3, r3, #2
 801777e:	58d0      	ldr	r0, [r2, r3]
 8017780:	193b      	adds	r3, r7, r4
 8017782:	881d      	ldrh	r5, [r3, #0]
 8017784:	000e      	movs	r6, r1
 8017786:	187c      	adds	r4, r7, r1
 8017788:	687a      	ldr	r2, [r7, #4]
 801778a:	230b      	movs	r3, #11
 801778c:	18fb      	adds	r3, r7, r3
 801778e:	7819      	ldrb	r1, [r3, #0]
 8017790:	002b      	movs	r3, r5
 8017792:	f7f7 f810 	bl	800e7b6 <HAL_PCD_EP_Transmit>
 8017796:	0003      	movs	r3, r0
 8017798:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801779a:	2516      	movs	r5, #22
 801779c:	197c      	adds	r4, r7, r5
 801779e:	19bb      	adds	r3, r7, r6
 80177a0:	781b      	ldrb	r3, [r3, #0]
 80177a2:	0018      	movs	r0, r3
 80177a4:	f000 f871 	bl	801788a <USBD_Get_USB_Status>
 80177a8:	0003      	movs	r3, r0
 80177aa:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80177ac:	197b      	adds	r3, r7, r5
 80177ae:	781b      	ldrb	r3, [r3, #0]
}
 80177b0:	0018      	movs	r0, r3
 80177b2:	46bd      	mov	sp, r7
 80177b4:	b007      	add	sp, #28
 80177b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080177b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80177b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80177ba:	b087      	sub	sp, #28
 80177bc:	af00      	add	r7, sp, #0
 80177be:	60f8      	str	r0, [r7, #12]
 80177c0:	0008      	movs	r0, r1
 80177c2:	607a      	str	r2, [r7, #4]
 80177c4:	0019      	movs	r1, r3
 80177c6:	230b      	movs	r3, #11
 80177c8:	18fb      	adds	r3, r7, r3
 80177ca:	1c02      	adds	r2, r0, #0
 80177cc:	701a      	strb	r2, [r3, #0]
 80177ce:	2408      	movs	r4, #8
 80177d0:	193b      	adds	r3, r7, r4
 80177d2:	1c0a      	adds	r2, r1, #0
 80177d4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80177d6:	2117      	movs	r1, #23
 80177d8:	187b      	adds	r3, r7, r1
 80177da:	2200      	movs	r2, #0
 80177dc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80177de:	2516      	movs	r5, #22
 80177e0:	197b      	adds	r3, r7, r5
 80177e2:	2200      	movs	r2, #0
 80177e4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80177e6:	68fa      	ldr	r2, [r7, #12]
 80177e8:	23b0      	movs	r3, #176	@ 0xb0
 80177ea:	009b      	lsls	r3, r3, #2
 80177ec:	58d0      	ldr	r0, [r2, r3]
 80177ee:	193b      	adds	r3, r7, r4
 80177f0:	881d      	ldrh	r5, [r3, #0]
 80177f2:	000e      	movs	r6, r1
 80177f4:	187c      	adds	r4, r7, r1
 80177f6:	687a      	ldr	r2, [r7, #4]
 80177f8:	230b      	movs	r3, #11
 80177fa:	18fb      	adds	r3, r7, r3
 80177fc:	7819      	ldrb	r1, [r3, #0]
 80177fe:	002b      	movs	r3, r5
 8017800:	f7f6 ff89 	bl	800e716 <HAL_PCD_EP_Receive>
 8017804:	0003      	movs	r3, r0
 8017806:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017808:	2516      	movs	r5, #22
 801780a:	197c      	adds	r4, r7, r5
 801780c:	19bb      	adds	r3, r7, r6
 801780e:	781b      	ldrb	r3, [r3, #0]
 8017810:	0018      	movs	r0, r3
 8017812:	f000 f83a 	bl	801788a <USBD_Get_USB_Status>
 8017816:	0003      	movs	r3, r0
 8017818:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801781a:	197b      	adds	r3, r7, r5
 801781c:	781b      	ldrb	r3, [r3, #0]
}
 801781e:	0018      	movs	r0, r3
 8017820:	46bd      	mov	sp, r7
 8017822:	b007      	add	sp, #28
 8017824:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017826 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017826:	b580      	push	{r7, lr}
 8017828:	b082      	sub	sp, #8
 801782a:	af00      	add	r7, sp, #0
 801782c:	6078      	str	r0, [r7, #4]
 801782e:	000a      	movs	r2, r1
 8017830:	1cfb      	adds	r3, r7, #3
 8017832:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017834:	687a      	ldr	r2, [r7, #4]
 8017836:	23b0      	movs	r3, #176	@ 0xb0
 8017838:	009b      	lsls	r3, r3, #2
 801783a:	58d2      	ldr	r2, [r2, r3]
 801783c:	1cfb      	adds	r3, r7, #3
 801783e:	781b      	ldrb	r3, [r3, #0]
 8017840:	0019      	movs	r1, r3
 8017842:	0010      	movs	r0, r2
 8017844:	f7f6 ff9e 	bl	800e784 <HAL_PCD_EP_GetRxCount>
 8017848:	0003      	movs	r3, r0
}
 801784a:	0018      	movs	r0, r3
 801784c:	46bd      	mov	sp, r7
 801784e:	b002      	add	sp, #8
 8017850:	bd80      	pop	{r7, pc}
	...

08017854 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017854:	b580      	push	{r7, lr}
 8017856:	b082      	sub	sp, #8
 8017858:	af00      	add	r7, sp, #0
 801785a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801785c:	4b02      	ldr	r3, [pc, #8]	@ (8017868 <USBD_static_malloc+0x14>)
}
 801785e:	0018      	movs	r0, r3
 8017860:	46bd      	mov	sp, r7
 8017862:	b002      	add	sp, #8
 8017864:	bd80      	pop	{r7, pc}
 8017866:	46c0      	nop			@ (mov r8, r8)
 8017868:	20003db4 	.word	0x20003db4

0801786c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801786c:	b580      	push	{r7, lr}
 801786e:	b082      	sub	sp, #8
 8017870:	af00      	add	r7, sp, #0
 8017872:	6078      	str	r0, [r7, #4]

}
 8017874:	46c0      	nop			@ (mov r8, r8)
 8017876:	46bd      	mov	sp, r7
 8017878:	b002      	add	sp, #8
 801787a:	bd80      	pop	{r7, pc}

0801787c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801787c:	b580      	push	{r7, lr}
 801787e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8017880:	f7ee fe2a 	bl	80064d8 <SystemClock_Config>
}
 8017884:	46c0      	nop			@ (mov r8, r8)
 8017886:	46bd      	mov	sp, r7
 8017888:	bd80      	pop	{r7, pc}

0801788a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801788a:	b580      	push	{r7, lr}
 801788c:	b084      	sub	sp, #16
 801788e:	af00      	add	r7, sp, #0
 8017890:	0002      	movs	r2, r0
 8017892:	1dfb      	adds	r3, r7, #7
 8017894:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017896:	230f      	movs	r3, #15
 8017898:	18fb      	adds	r3, r7, r3
 801789a:	2200      	movs	r2, #0
 801789c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801789e:	1dfb      	adds	r3, r7, #7
 80178a0:	781b      	ldrb	r3, [r3, #0]
 80178a2:	2b03      	cmp	r3, #3
 80178a4:	d017      	beq.n	80178d6 <USBD_Get_USB_Status+0x4c>
 80178a6:	dc1b      	bgt.n	80178e0 <USBD_Get_USB_Status+0x56>
 80178a8:	2b02      	cmp	r3, #2
 80178aa:	d00f      	beq.n	80178cc <USBD_Get_USB_Status+0x42>
 80178ac:	dc18      	bgt.n	80178e0 <USBD_Get_USB_Status+0x56>
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d002      	beq.n	80178b8 <USBD_Get_USB_Status+0x2e>
 80178b2:	2b01      	cmp	r3, #1
 80178b4:	d005      	beq.n	80178c2 <USBD_Get_USB_Status+0x38>
 80178b6:	e013      	b.n	80178e0 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80178b8:	230f      	movs	r3, #15
 80178ba:	18fb      	adds	r3, r7, r3
 80178bc:	2200      	movs	r2, #0
 80178be:	701a      	strb	r2, [r3, #0]
    break;
 80178c0:	e013      	b.n	80178ea <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80178c2:	230f      	movs	r3, #15
 80178c4:	18fb      	adds	r3, r7, r3
 80178c6:	2202      	movs	r2, #2
 80178c8:	701a      	strb	r2, [r3, #0]
    break;
 80178ca:	e00e      	b.n	80178ea <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80178cc:	230f      	movs	r3, #15
 80178ce:	18fb      	adds	r3, r7, r3
 80178d0:	2201      	movs	r2, #1
 80178d2:	701a      	strb	r2, [r3, #0]
    break;
 80178d4:	e009      	b.n	80178ea <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80178d6:	230f      	movs	r3, #15
 80178d8:	18fb      	adds	r3, r7, r3
 80178da:	2202      	movs	r2, #2
 80178dc:	701a      	strb	r2, [r3, #0]
    break;
 80178de:	e004      	b.n	80178ea <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80178e0:	230f      	movs	r3, #15
 80178e2:	18fb      	adds	r3, r7, r3
 80178e4:	2202      	movs	r2, #2
 80178e6:	701a      	strb	r2, [r3, #0]
    break;
 80178e8:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 80178ea:	230f      	movs	r3, #15
 80178ec:	18fb      	adds	r3, r7, r3
 80178ee:	781b      	ldrb	r3, [r3, #0]
}
 80178f0:	0018      	movs	r0, r3
 80178f2:	46bd      	mov	sp, r7
 80178f4:	b004      	add	sp, #16
 80178f6:	bd80      	pop	{r7, pc}

080178f8 <__cvt>:
 80178f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178fa:	001f      	movs	r7, r3
 80178fc:	2300      	movs	r3, #0
 80178fe:	0016      	movs	r6, r2
 8017900:	b08b      	sub	sp, #44	@ 0x2c
 8017902:	429f      	cmp	r7, r3
 8017904:	da04      	bge.n	8017910 <__cvt+0x18>
 8017906:	2180      	movs	r1, #128	@ 0x80
 8017908:	0609      	lsls	r1, r1, #24
 801790a:	187b      	adds	r3, r7, r1
 801790c:	001f      	movs	r7, r3
 801790e:	232d      	movs	r3, #45	@ 0x2d
 8017910:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017912:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8017914:	7013      	strb	r3, [r2, #0]
 8017916:	2320      	movs	r3, #32
 8017918:	2203      	movs	r2, #3
 801791a:	439d      	bics	r5, r3
 801791c:	2d46      	cmp	r5, #70	@ 0x46
 801791e:	d007      	beq.n	8017930 <__cvt+0x38>
 8017920:	002b      	movs	r3, r5
 8017922:	3b45      	subs	r3, #69	@ 0x45
 8017924:	4259      	negs	r1, r3
 8017926:	414b      	adcs	r3, r1
 8017928:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801792a:	3a01      	subs	r2, #1
 801792c:	18cb      	adds	r3, r1, r3
 801792e:	9310      	str	r3, [sp, #64]	@ 0x40
 8017930:	ab09      	add	r3, sp, #36	@ 0x24
 8017932:	9304      	str	r3, [sp, #16]
 8017934:	ab08      	add	r3, sp, #32
 8017936:	9303      	str	r3, [sp, #12]
 8017938:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801793a:	9200      	str	r2, [sp, #0]
 801793c:	9302      	str	r3, [sp, #8]
 801793e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017940:	0032      	movs	r2, r6
 8017942:	9301      	str	r3, [sp, #4]
 8017944:	003b      	movs	r3, r7
 8017946:	f000 ff13 	bl	8018770 <_dtoa_r>
 801794a:	0004      	movs	r4, r0
 801794c:	2d47      	cmp	r5, #71	@ 0x47
 801794e:	d11b      	bne.n	8017988 <__cvt+0x90>
 8017950:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017952:	07db      	lsls	r3, r3, #31
 8017954:	d511      	bpl.n	801797a <__cvt+0x82>
 8017956:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017958:	18c3      	adds	r3, r0, r3
 801795a:	9307      	str	r3, [sp, #28]
 801795c:	2200      	movs	r2, #0
 801795e:	2300      	movs	r3, #0
 8017960:	0030      	movs	r0, r6
 8017962:	0039      	movs	r1, r7
 8017964:	f7e8 fd72 	bl	800044c <__aeabi_dcmpeq>
 8017968:	2800      	cmp	r0, #0
 801796a:	d001      	beq.n	8017970 <__cvt+0x78>
 801796c:	9b07      	ldr	r3, [sp, #28]
 801796e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017970:	2230      	movs	r2, #48	@ 0x30
 8017972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017974:	9907      	ldr	r1, [sp, #28]
 8017976:	428b      	cmp	r3, r1
 8017978:	d320      	bcc.n	80179bc <__cvt+0xc4>
 801797a:	0020      	movs	r0, r4
 801797c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801797e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8017980:	1b1b      	subs	r3, r3, r4
 8017982:	6013      	str	r3, [r2, #0]
 8017984:	b00b      	add	sp, #44	@ 0x2c
 8017986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017988:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801798a:	18c3      	adds	r3, r0, r3
 801798c:	9307      	str	r3, [sp, #28]
 801798e:	2d46      	cmp	r5, #70	@ 0x46
 8017990:	d1e4      	bne.n	801795c <__cvt+0x64>
 8017992:	7803      	ldrb	r3, [r0, #0]
 8017994:	2b30      	cmp	r3, #48	@ 0x30
 8017996:	d10c      	bne.n	80179b2 <__cvt+0xba>
 8017998:	2200      	movs	r2, #0
 801799a:	2300      	movs	r3, #0
 801799c:	0030      	movs	r0, r6
 801799e:	0039      	movs	r1, r7
 80179a0:	f7e8 fd54 	bl	800044c <__aeabi_dcmpeq>
 80179a4:	2800      	cmp	r0, #0
 80179a6:	d104      	bne.n	80179b2 <__cvt+0xba>
 80179a8:	2301      	movs	r3, #1
 80179aa:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80179ac:	1a9b      	subs	r3, r3, r2
 80179ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80179b0:	6013      	str	r3, [r2, #0]
 80179b2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80179b4:	9a07      	ldr	r2, [sp, #28]
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	18d3      	adds	r3, r2, r3
 80179ba:	e7ce      	b.n	801795a <__cvt+0x62>
 80179bc:	1c59      	adds	r1, r3, #1
 80179be:	9109      	str	r1, [sp, #36]	@ 0x24
 80179c0:	701a      	strb	r2, [r3, #0]
 80179c2:	e7d6      	b.n	8017972 <__cvt+0x7a>

080179c4 <__exponent>:
 80179c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80179c6:	232b      	movs	r3, #43	@ 0x2b
 80179c8:	0005      	movs	r5, r0
 80179ca:	000c      	movs	r4, r1
 80179cc:	b085      	sub	sp, #20
 80179ce:	7002      	strb	r2, [r0, #0]
 80179d0:	2900      	cmp	r1, #0
 80179d2:	da01      	bge.n	80179d8 <__exponent+0x14>
 80179d4:	424c      	negs	r4, r1
 80179d6:	3302      	adds	r3, #2
 80179d8:	706b      	strb	r3, [r5, #1]
 80179da:	2c09      	cmp	r4, #9
 80179dc:	dd2c      	ble.n	8017a38 <__exponent+0x74>
 80179de:	ab02      	add	r3, sp, #8
 80179e0:	1dde      	adds	r6, r3, #7
 80179e2:	0020      	movs	r0, r4
 80179e4:	210a      	movs	r1, #10
 80179e6:	f7e8 fd1b 	bl	8000420 <__aeabi_idivmod>
 80179ea:	0037      	movs	r7, r6
 80179ec:	3130      	adds	r1, #48	@ 0x30
 80179ee:	3e01      	subs	r6, #1
 80179f0:	0020      	movs	r0, r4
 80179f2:	7031      	strb	r1, [r6, #0]
 80179f4:	210a      	movs	r1, #10
 80179f6:	9401      	str	r4, [sp, #4]
 80179f8:	f7e8 fc2c 	bl	8000254 <__divsi3>
 80179fc:	9b01      	ldr	r3, [sp, #4]
 80179fe:	0004      	movs	r4, r0
 8017a00:	2b63      	cmp	r3, #99	@ 0x63
 8017a02:	dcee      	bgt.n	80179e2 <__exponent+0x1e>
 8017a04:	1eba      	subs	r2, r7, #2
 8017a06:	1ca8      	adds	r0, r5, #2
 8017a08:	0001      	movs	r1, r0
 8017a0a:	0013      	movs	r3, r2
 8017a0c:	3430      	adds	r4, #48	@ 0x30
 8017a0e:	7014      	strb	r4, [r2, #0]
 8017a10:	ac02      	add	r4, sp, #8
 8017a12:	3407      	adds	r4, #7
 8017a14:	429c      	cmp	r4, r3
 8017a16:	d80a      	bhi.n	8017a2e <__exponent+0x6a>
 8017a18:	2300      	movs	r3, #0
 8017a1a:	42a2      	cmp	r2, r4
 8017a1c:	d803      	bhi.n	8017a26 <__exponent+0x62>
 8017a1e:	3309      	adds	r3, #9
 8017a20:	aa02      	add	r2, sp, #8
 8017a22:	189b      	adds	r3, r3, r2
 8017a24:	1bdb      	subs	r3, r3, r7
 8017a26:	18c0      	adds	r0, r0, r3
 8017a28:	1b40      	subs	r0, r0, r5
 8017a2a:	b005      	add	sp, #20
 8017a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a2e:	781c      	ldrb	r4, [r3, #0]
 8017a30:	3301      	adds	r3, #1
 8017a32:	700c      	strb	r4, [r1, #0]
 8017a34:	3101      	adds	r1, #1
 8017a36:	e7eb      	b.n	8017a10 <__exponent+0x4c>
 8017a38:	2330      	movs	r3, #48	@ 0x30
 8017a3a:	18e4      	adds	r4, r4, r3
 8017a3c:	70ab      	strb	r3, [r5, #2]
 8017a3e:	1d28      	adds	r0, r5, #4
 8017a40:	70ec      	strb	r4, [r5, #3]
 8017a42:	e7f1      	b.n	8017a28 <__exponent+0x64>

08017a44 <_printf_float>:
 8017a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a46:	b097      	sub	sp, #92	@ 0x5c
 8017a48:	000d      	movs	r5, r1
 8017a4a:	920a      	str	r2, [sp, #40]	@ 0x28
 8017a4c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8017a4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017a50:	9009      	str	r0, [sp, #36]	@ 0x24
 8017a52:	f000 fd6b 	bl	801852c <_localeconv_r>
 8017a56:	6803      	ldr	r3, [r0, #0]
 8017a58:	0018      	movs	r0, r3
 8017a5a:	930d      	str	r3, [sp, #52]	@ 0x34
 8017a5c:	f7e8 fb54 	bl	8000108 <strlen>
 8017a60:	2300      	movs	r3, #0
 8017a62:	900f      	str	r0, [sp, #60]	@ 0x3c
 8017a64:	9314      	str	r3, [sp, #80]	@ 0x50
 8017a66:	7e2b      	ldrb	r3, [r5, #24]
 8017a68:	2207      	movs	r2, #7
 8017a6a:	930c      	str	r3, [sp, #48]	@ 0x30
 8017a6c:	682b      	ldr	r3, [r5, #0]
 8017a6e:	930e      	str	r3, [sp, #56]	@ 0x38
 8017a70:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017a72:	6823      	ldr	r3, [r4, #0]
 8017a74:	05c9      	lsls	r1, r1, #23
 8017a76:	d545      	bpl.n	8017b04 <_printf_float+0xc0>
 8017a78:	189b      	adds	r3, r3, r2
 8017a7a:	4393      	bics	r3, r2
 8017a7c:	001a      	movs	r2, r3
 8017a7e:	3208      	adds	r2, #8
 8017a80:	6022      	str	r2, [r4, #0]
 8017a82:	2201      	movs	r2, #1
 8017a84:	681e      	ldr	r6, [r3, #0]
 8017a86:	685f      	ldr	r7, [r3, #4]
 8017a88:	007b      	lsls	r3, r7, #1
 8017a8a:	085b      	lsrs	r3, r3, #1
 8017a8c:	9311      	str	r3, [sp, #68]	@ 0x44
 8017a8e:	9610      	str	r6, [sp, #64]	@ 0x40
 8017a90:	64ae      	str	r6, [r5, #72]	@ 0x48
 8017a92:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8017a94:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8017a96:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8017a98:	4ba7      	ldr	r3, [pc, #668]	@ (8017d38 <_printf_float+0x2f4>)
 8017a9a:	4252      	negs	r2, r2
 8017a9c:	f7eb fbb0 	bl	8003200 <__aeabi_dcmpun>
 8017aa0:	2800      	cmp	r0, #0
 8017aa2:	d131      	bne.n	8017b08 <_printf_float+0xc4>
 8017aa4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8017aa6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8017aa8:	2201      	movs	r2, #1
 8017aaa:	4ba3      	ldr	r3, [pc, #652]	@ (8017d38 <_printf_float+0x2f4>)
 8017aac:	4252      	negs	r2, r2
 8017aae:	f7e8 fcdd 	bl	800046c <__aeabi_dcmple>
 8017ab2:	2800      	cmp	r0, #0
 8017ab4:	d128      	bne.n	8017b08 <_printf_float+0xc4>
 8017ab6:	2200      	movs	r2, #0
 8017ab8:	2300      	movs	r3, #0
 8017aba:	0030      	movs	r0, r6
 8017abc:	0039      	movs	r1, r7
 8017abe:	f7e8 fccb 	bl	8000458 <__aeabi_dcmplt>
 8017ac2:	2800      	cmp	r0, #0
 8017ac4:	d003      	beq.n	8017ace <_printf_float+0x8a>
 8017ac6:	002b      	movs	r3, r5
 8017ac8:	222d      	movs	r2, #45	@ 0x2d
 8017aca:	3343      	adds	r3, #67	@ 0x43
 8017acc:	701a      	strb	r2, [r3, #0]
 8017ace:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017ad0:	4f9a      	ldr	r7, [pc, #616]	@ (8017d3c <_printf_float+0x2f8>)
 8017ad2:	2b47      	cmp	r3, #71	@ 0x47
 8017ad4:	d900      	bls.n	8017ad8 <_printf_float+0x94>
 8017ad6:	4f9a      	ldr	r7, [pc, #616]	@ (8017d40 <_printf_float+0x2fc>)
 8017ad8:	2303      	movs	r3, #3
 8017ada:	2400      	movs	r4, #0
 8017adc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017ade:	612b      	str	r3, [r5, #16]
 8017ae0:	3301      	adds	r3, #1
 8017ae2:	439a      	bics	r2, r3
 8017ae4:	602a      	str	r2, [r5, #0]
 8017ae6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017ae8:	0029      	movs	r1, r5
 8017aea:	9300      	str	r3, [sp, #0]
 8017aec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017aee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017af0:	aa15      	add	r2, sp, #84	@ 0x54
 8017af2:	f000 f9e5 	bl	8017ec0 <_printf_common>
 8017af6:	3001      	adds	r0, #1
 8017af8:	d000      	beq.n	8017afc <_printf_float+0xb8>
 8017afa:	e09f      	b.n	8017c3c <_printf_float+0x1f8>
 8017afc:	2001      	movs	r0, #1
 8017afe:	4240      	negs	r0, r0
 8017b00:	b017      	add	sp, #92	@ 0x5c
 8017b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b04:	3307      	adds	r3, #7
 8017b06:	e7b8      	b.n	8017a7a <_printf_float+0x36>
 8017b08:	0032      	movs	r2, r6
 8017b0a:	003b      	movs	r3, r7
 8017b0c:	0030      	movs	r0, r6
 8017b0e:	0039      	movs	r1, r7
 8017b10:	f7eb fb76 	bl	8003200 <__aeabi_dcmpun>
 8017b14:	2800      	cmp	r0, #0
 8017b16:	d00b      	beq.n	8017b30 <_printf_float+0xec>
 8017b18:	2f00      	cmp	r7, #0
 8017b1a:	da03      	bge.n	8017b24 <_printf_float+0xe0>
 8017b1c:	002b      	movs	r3, r5
 8017b1e:	222d      	movs	r2, #45	@ 0x2d
 8017b20:	3343      	adds	r3, #67	@ 0x43
 8017b22:	701a      	strb	r2, [r3, #0]
 8017b24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017b26:	4f87      	ldr	r7, [pc, #540]	@ (8017d44 <_printf_float+0x300>)
 8017b28:	2b47      	cmp	r3, #71	@ 0x47
 8017b2a:	d9d5      	bls.n	8017ad8 <_printf_float+0x94>
 8017b2c:	4f86      	ldr	r7, [pc, #536]	@ (8017d48 <_printf_float+0x304>)
 8017b2e:	e7d3      	b.n	8017ad8 <_printf_float+0x94>
 8017b30:	2220      	movs	r2, #32
 8017b32:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8017b34:	686b      	ldr	r3, [r5, #4]
 8017b36:	4394      	bics	r4, r2
 8017b38:	1c5a      	adds	r2, r3, #1
 8017b3a:	d146      	bne.n	8017bca <_printf_float+0x186>
 8017b3c:	3307      	adds	r3, #7
 8017b3e:	606b      	str	r3, [r5, #4]
 8017b40:	2380      	movs	r3, #128	@ 0x80
 8017b42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017b44:	00db      	lsls	r3, r3, #3
 8017b46:	4313      	orrs	r3, r2
 8017b48:	2200      	movs	r2, #0
 8017b4a:	602b      	str	r3, [r5, #0]
 8017b4c:	9206      	str	r2, [sp, #24]
 8017b4e:	aa14      	add	r2, sp, #80	@ 0x50
 8017b50:	9205      	str	r2, [sp, #20]
 8017b52:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017b54:	a90a      	add	r1, sp, #40	@ 0x28
 8017b56:	9204      	str	r2, [sp, #16]
 8017b58:	aa13      	add	r2, sp, #76	@ 0x4c
 8017b5a:	9203      	str	r2, [sp, #12]
 8017b5c:	2223      	movs	r2, #35	@ 0x23
 8017b5e:	1852      	adds	r2, r2, r1
 8017b60:	9202      	str	r2, [sp, #8]
 8017b62:	9301      	str	r3, [sp, #4]
 8017b64:	686b      	ldr	r3, [r5, #4]
 8017b66:	0032      	movs	r2, r6
 8017b68:	9300      	str	r3, [sp, #0]
 8017b6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017b6c:	003b      	movs	r3, r7
 8017b6e:	f7ff fec3 	bl	80178f8 <__cvt>
 8017b72:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017b74:	0007      	movs	r7, r0
 8017b76:	2c47      	cmp	r4, #71	@ 0x47
 8017b78:	d12d      	bne.n	8017bd6 <_printf_float+0x192>
 8017b7a:	1cd3      	adds	r3, r2, #3
 8017b7c:	db02      	blt.n	8017b84 <_printf_float+0x140>
 8017b7e:	686b      	ldr	r3, [r5, #4]
 8017b80:	429a      	cmp	r2, r3
 8017b82:	dd48      	ble.n	8017c16 <_printf_float+0x1d2>
 8017b84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017b86:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8017b88:	3b02      	subs	r3, #2
 8017b8a:	b2db      	uxtb	r3, r3
 8017b8c:	930c      	str	r3, [sp, #48]	@ 0x30
 8017b8e:	0028      	movs	r0, r5
 8017b90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017b92:	3901      	subs	r1, #1
 8017b94:	3050      	adds	r0, #80	@ 0x50
 8017b96:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017b98:	f7ff ff14 	bl	80179c4 <__exponent>
 8017b9c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017b9e:	0004      	movs	r4, r0
 8017ba0:	1813      	adds	r3, r2, r0
 8017ba2:	612b      	str	r3, [r5, #16]
 8017ba4:	2a01      	cmp	r2, #1
 8017ba6:	dc02      	bgt.n	8017bae <_printf_float+0x16a>
 8017ba8:	682a      	ldr	r2, [r5, #0]
 8017baa:	07d2      	lsls	r2, r2, #31
 8017bac:	d501      	bpl.n	8017bb2 <_printf_float+0x16e>
 8017bae:	3301      	adds	r3, #1
 8017bb0:	612b      	str	r3, [r5, #16]
 8017bb2:	2323      	movs	r3, #35	@ 0x23
 8017bb4:	aa0a      	add	r2, sp, #40	@ 0x28
 8017bb6:	189b      	adds	r3, r3, r2
 8017bb8:	781b      	ldrb	r3, [r3, #0]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d100      	bne.n	8017bc0 <_printf_float+0x17c>
 8017bbe:	e792      	b.n	8017ae6 <_printf_float+0xa2>
 8017bc0:	002b      	movs	r3, r5
 8017bc2:	222d      	movs	r2, #45	@ 0x2d
 8017bc4:	3343      	adds	r3, #67	@ 0x43
 8017bc6:	701a      	strb	r2, [r3, #0]
 8017bc8:	e78d      	b.n	8017ae6 <_printf_float+0xa2>
 8017bca:	2c47      	cmp	r4, #71	@ 0x47
 8017bcc:	d1b8      	bne.n	8017b40 <_printf_float+0xfc>
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d1b6      	bne.n	8017b40 <_printf_float+0xfc>
 8017bd2:	3301      	adds	r3, #1
 8017bd4:	e7b3      	b.n	8017b3e <_printf_float+0xfa>
 8017bd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017bd8:	0011      	movs	r1, r2
 8017bda:	2b65      	cmp	r3, #101	@ 0x65
 8017bdc:	d9d7      	bls.n	8017b8e <_printf_float+0x14a>
 8017bde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017be0:	2b66      	cmp	r3, #102	@ 0x66
 8017be2:	d11a      	bne.n	8017c1a <_printf_float+0x1d6>
 8017be4:	686b      	ldr	r3, [r5, #4]
 8017be6:	2a00      	cmp	r2, #0
 8017be8:	dd09      	ble.n	8017bfe <_printf_float+0x1ba>
 8017bea:	612a      	str	r2, [r5, #16]
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d102      	bne.n	8017bf6 <_printf_float+0x1b2>
 8017bf0:	6829      	ldr	r1, [r5, #0]
 8017bf2:	07c9      	lsls	r1, r1, #31
 8017bf4:	d50b      	bpl.n	8017c0e <_printf_float+0x1ca>
 8017bf6:	3301      	adds	r3, #1
 8017bf8:	189b      	adds	r3, r3, r2
 8017bfa:	612b      	str	r3, [r5, #16]
 8017bfc:	e007      	b.n	8017c0e <_printf_float+0x1ca>
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d103      	bne.n	8017c0a <_printf_float+0x1c6>
 8017c02:	2201      	movs	r2, #1
 8017c04:	6829      	ldr	r1, [r5, #0]
 8017c06:	4211      	tst	r1, r2
 8017c08:	d000      	beq.n	8017c0c <_printf_float+0x1c8>
 8017c0a:	1c9a      	adds	r2, r3, #2
 8017c0c:	612a      	str	r2, [r5, #16]
 8017c0e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017c10:	2400      	movs	r4, #0
 8017c12:	65ab      	str	r3, [r5, #88]	@ 0x58
 8017c14:	e7cd      	b.n	8017bb2 <_printf_float+0x16e>
 8017c16:	2367      	movs	r3, #103	@ 0x67
 8017c18:	930c      	str	r3, [sp, #48]	@ 0x30
 8017c1a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8017c1c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017c1e:	4299      	cmp	r1, r3
 8017c20:	db06      	blt.n	8017c30 <_printf_float+0x1ec>
 8017c22:	682b      	ldr	r3, [r5, #0]
 8017c24:	6129      	str	r1, [r5, #16]
 8017c26:	07db      	lsls	r3, r3, #31
 8017c28:	d5f1      	bpl.n	8017c0e <_printf_float+0x1ca>
 8017c2a:	3101      	adds	r1, #1
 8017c2c:	6129      	str	r1, [r5, #16]
 8017c2e:	e7ee      	b.n	8017c0e <_printf_float+0x1ca>
 8017c30:	2201      	movs	r2, #1
 8017c32:	2900      	cmp	r1, #0
 8017c34:	dce0      	bgt.n	8017bf8 <_printf_float+0x1b4>
 8017c36:	1892      	adds	r2, r2, r2
 8017c38:	1a52      	subs	r2, r2, r1
 8017c3a:	e7dd      	b.n	8017bf8 <_printf_float+0x1b4>
 8017c3c:	682a      	ldr	r2, [r5, #0]
 8017c3e:	0553      	lsls	r3, r2, #21
 8017c40:	d408      	bmi.n	8017c54 <_printf_float+0x210>
 8017c42:	692b      	ldr	r3, [r5, #16]
 8017c44:	003a      	movs	r2, r7
 8017c46:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017c48:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017c4a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017c4c:	47a0      	blx	r4
 8017c4e:	3001      	adds	r0, #1
 8017c50:	d129      	bne.n	8017ca6 <_printf_float+0x262>
 8017c52:	e753      	b.n	8017afc <_printf_float+0xb8>
 8017c54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017c56:	2b65      	cmp	r3, #101	@ 0x65
 8017c58:	d800      	bhi.n	8017c5c <_printf_float+0x218>
 8017c5a:	e0da      	b.n	8017e12 <_printf_float+0x3ce>
 8017c5c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8017c5e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8017c60:	2200      	movs	r2, #0
 8017c62:	2300      	movs	r3, #0
 8017c64:	f7e8 fbf2 	bl	800044c <__aeabi_dcmpeq>
 8017c68:	2800      	cmp	r0, #0
 8017c6a:	d033      	beq.n	8017cd4 <_printf_float+0x290>
 8017c6c:	2301      	movs	r3, #1
 8017c6e:	4a37      	ldr	r2, [pc, #220]	@ (8017d4c <_printf_float+0x308>)
 8017c70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017c72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017c74:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017c76:	47a0      	blx	r4
 8017c78:	3001      	adds	r0, #1
 8017c7a:	d100      	bne.n	8017c7e <_printf_float+0x23a>
 8017c7c:	e73e      	b.n	8017afc <_printf_float+0xb8>
 8017c7e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8017c80:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017c82:	42b3      	cmp	r3, r6
 8017c84:	db02      	blt.n	8017c8c <_printf_float+0x248>
 8017c86:	682b      	ldr	r3, [r5, #0]
 8017c88:	07db      	lsls	r3, r3, #31
 8017c8a:	d50c      	bpl.n	8017ca6 <_printf_float+0x262>
 8017c8c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017c8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017c90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017c92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017c94:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017c96:	47a0      	blx	r4
 8017c98:	2400      	movs	r4, #0
 8017c9a:	3001      	adds	r0, #1
 8017c9c:	d100      	bne.n	8017ca0 <_printf_float+0x25c>
 8017c9e:	e72d      	b.n	8017afc <_printf_float+0xb8>
 8017ca0:	1e73      	subs	r3, r6, #1
 8017ca2:	42a3      	cmp	r3, r4
 8017ca4:	dc0a      	bgt.n	8017cbc <_printf_float+0x278>
 8017ca6:	682b      	ldr	r3, [r5, #0]
 8017ca8:	079b      	lsls	r3, r3, #30
 8017caa:	d500      	bpl.n	8017cae <_printf_float+0x26a>
 8017cac:	e105      	b.n	8017eba <_printf_float+0x476>
 8017cae:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017cb0:	68e8      	ldr	r0, [r5, #12]
 8017cb2:	4298      	cmp	r0, r3
 8017cb4:	db00      	blt.n	8017cb8 <_printf_float+0x274>
 8017cb6:	e723      	b.n	8017b00 <_printf_float+0xbc>
 8017cb8:	0018      	movs	r0, r3
 8017cba:	e721      	b.n	8017b00 <_printf_float+0xbc>
 8017cbc:	002a      	movs	r2, r5
 8017cbe:	2301      	movs	r3, #1
 8017cc0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017cc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017cc4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8017cc6:	321a      	adds	r2, #26
 8017cc8:	47b8      	blx	r7
 8017cca:	3001      	adds	r0, #1
 8017ccc:	d100      	bne.n	8017cd0 <_printf_float+0x28c>
 8017cce:	e715      	b.n	8017afc <_printf_float+0xb8>
 8017cd0:	3401      	adds	r4, #1
 8017cd2:	e7e5      	b.n	8017ca0 <_printf_float+0x25c>
 8017cd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	dc3a      	bgt.n	8017d50 <_printf_float+0x30c>
 8017cda:	2301      	movs	r3, #1
 8017cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8017d4c <_printf_float+0x308>)
 8017cde:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017ce0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017ce2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017ce4:	47a0      	blx	r4
 8017ce6:	3001      	adds	r0, #1
 8017ce8:	d100      	bne.n	8017cec <_printf_float+0x2a8>
 8017cea:	e707      	b.n	8017afc <_printf_float+0xb8>
 8017cec:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8017cee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017cf0:	4333      	orrs	r3, r6
 8017cf2:	d102      	bne.n	8017cfa <_printf_float+0x2b6>
 8017cf4:	682b      	ldr	r3, [r5, #0]
 8017cf6:	07db      	lsls	r3, r3, #31
 8017cf8:	d5d5      	bpl.n	8017ca6 <_printf_float+0x262>
 8017cfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017cfc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017cfe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017d00:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017d02:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017d04:	47a0      	blx	r4
 8017d06:	2300      	movs	r3, #0
 8017d08:	3001      	adds	r0, #1
 8017d0a:	d100      	bne.n	8017d0e <_printf_float+0x2ca>
 8017d0c:	e6f6      	b.n	8017afc <_printf_float+0xb8>
 8017d0e:	930c      	str	r3, [sp, #48]	@ 0x30
 8017d10:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017d12:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017d14:	425b      	negs	r3, r3
 8017d16:	4293      	cmp	r3, r2
 8017d18:	dc01      	bgt.n	8017d1e <_printf_float+0x2da>
 8017d1a:	0033      	movs	r3, r6
 8017d1c:	e792      	b.n	8017c44 <_printf_float+0x200>
 8017d1e:	002a      	movs	r2, r5
 8017d20:	2301      	movs	r3, #1
 8017d22:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017d24:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017d26:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017d28:	321a      	adds	r2, #26
 8017d2a:	47a0      	blx	r4
 8017d2c:	3001      	adds	r0, #1
 8017d2e:	d100      	bne.n	8017d32 <_printf_float+0x2ee>
 8017d30:	e6e4      	b.n	8017afc <_printf_float+0xb8>
 8017d32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017d34:	3301      	adds	r3, #1
 8017d36:	e7ea      	b.n	8017d0e <_printf_float+0x2ca>
 8017d38:	7fefffff 	.word	0x7fefffff
 8017d3c:	0801c1b8 	.word	0x0801c1b8
 8017d40:	0801c1bc 	.word	0x0801c1bc
 8017d44:	0801c1c0 	.word	0x0801c1c0
 8017d48:	0801c1c4 	.word	0x0801c1c4
 8017d4c:	0801c1c8 	.word	0x0801c1c8
 8017d50:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017d52:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8017d54:	930c      	str	r3, [sp, #48]	@ 0x30
 8017d56:	429e      	cmp	r6, r3
 8017d58:	dd00      	ble.n	8017d5c <_printf_float+0x318>
 8017d5a:	001e      	movs	r6, r3
 8017d5c:	2e00      	cmp	r6, #0
 8017d5e:	dc31      	bgt.n	8017dc4 <_printf_float+0x380>
 8017d60:	43f3      	mvns	r3, r6
 8017d62:	2400      	movs	r4, #0
 8017d64:	17db      	asrs	r3, r3, #31
 8017d66:	4033      	ands	r3, r6
 8017d68:	930e      	str	r3, [sp, #56]	@ 0x38
 8017d6a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8017d6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017d6e:	1af3      	subs	r3, r6, r3
 8017d70:	42a3      	cmp	r3, r4
 8017d72:	dc30      	bgt.n	8017dd6 <_printf_float+0x392>
 8017d74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017d76:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017d78:	429a      	cmp	r2, r3
 8017d7a:	dc38      	bgt.n	8017dee <_printf_float+0x3aa>
 8017d7c:	682b      	ldr	r3, [r5, #0]
 8017d7e:	07db      	lsls	r3, r3, #31
 8017d80:	d435      	bmi.n	8017dee <_printf_float+0x3aa>
 8017d82:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8017d84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017d86:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017d88:	1b9b      	subs	r3, r3, r6
 8017d8a:	1b14      	subs	r4, r2, r4
 8017d8c:	429c      	cmp	r4, r3
 8017d8e:	dd00      	ble.n	8017d92 <_printf_float+0x34e>
 8017d90:	001c      	movs	r4, r3
 8017d92:	2c00      	cmp	r4, #0
 8017d94:	dc34      	bgt.n	8017e00 <_printf_float+0x3bc>
 8017d96:	43e3      	mvns	r3, r4
 8017d98:	2600      	movs	r6, #0
 8017d9a:	17db      	asrs	r3, r3, #31
 8017d9c:	401c      	ands	r4, r3
 8017d9e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017da0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017da2:	1ad3      	subs	r3, r2, r3
 8017da4:	1b1b      	subs	r3, r3, r4
 8017da6:	42b3      	cmp	r3, r6
 8017da8:	dc00      	bgt.n	8017dac <_printf_float+0x368>
 8017daa:	e77c      	b.n	8017ca6 <_printf_float+0x262>
 8017dac:	002a      	movs	r2, r5
 8017dae:	2301      	movs	r3, #1
 8017db0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017db2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017db4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8017db6:	321a      	adds	r2, #26
 8017db8:	47b8      	blx	r7
 8017dba:	3001      	adds	r0, #1
 8017dbc:	d100      	bne.n	8017dc0 <_printf_float+0x37c>
 8017dbe:	e69d      	b.n	8017afc <_printf_float+0xb8>
 8017dc0:	3601      	adds	r6, #1
 8017dc2:	e7ec      	b.n	8017d9e <_printf_float+0x35a>
 8017dc4:	0033      	movs	r3, r6
 8017dc6:	003a      	movs	r2, r7
 8017dc8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017dca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017dcc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017dce:	47a0      	blx	r4
 8017dd0:	3001      	adds	r0, #1
 8017dd2:	d1c5      	bne.n	8017d60 <_printf_float+0x31c>
 8017dd4:	e692      	b.n	8017afc <_printf_float+0xb8>
 8017dd6:	002a      	movs	r2, r5
 8017dd8:	2301      	movs	r3, #1
 8017dda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017ddc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017dde:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017de0:	321a      	adds	r2, #26
 8017de2:	47b0      	blx	r6
 8017de4:	3001      	adds	r0, #1
 8017de6:	d100      	bne.n	8017dea <_printf_float+0x3a6>
 8017de8:	e688      	b.n	8017afc <_printf_float+0xb8>
 8017dea:	3401      	adds	r4, #1
 8017dec:	e7bd      	b.n	8017d6a <_printf_float+0x326>
 8017dee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017df0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017df2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017df4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017df6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017df8:	47a0      	blx	r4
 8017dfa:	3001      	adds	r0, #1
 8017dfc:	d1c1      	bne.n	8017d82 <_printf_float+0x33e>
 8017dfe:	e67d      	b.n	8017afc <_printf_float+0xb8>
 8017e00:	19ba      	adds	r2, r7, r6
 8017e02:	0023      	movs	r3, r4
 8017e04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017e06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017e08:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017e0a:	47b0      	blx	r6
 8017e0c:	3001      	adds	r0, #1
 8017e0e:	d1c2      	bne.n	8017d96 <_printf_float+0x352>
 8017e10:	e674      	b.n	8017afc <_printf_float+0xb8>
 8017e12:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017e14:	930c      	str	r3, [sp, #48]	@ 0x30
 8017e16:	2b01      	cmp	r3, #1
 8017e18:	dc02      	bgt.n	8017e20 <_printf_float+0x3dc>
 8017e1a:	2301      	movs	r3, #1
 8017e1c:	421a      	tst	r2, r3
 8017e1e:	d039      	beq.n	8017e94 <_printf_float+0x450>
 8017e20:	2301      	movs	r3, #1
 8017e22:	003a      	movs	r2, r7
 8017e24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017e26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017e28:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017e2a:	47b0      	blx	r6
 8017e2c:	3001      	adds	r0, #1
 8017e2e:	d100      	bne.n	8017e32 <_printf_float+0x3ee>
 8017e30:	e664      	b.n	8017afc <_printf_float+0xb8>
 8017e32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017e34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017e36:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017e38:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017e3a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017e3c:	47b0      	blx	r6
 8017e3e:	3001      	adds	r0, #1
 8017e40:	d100      	bne.n	8017e44 <_printf_float+0x400>
 8017e42:	e65b      	b.n	8017afc <_printf_float+0xb8>
 8017e44:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8017e46:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8017e48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017e4a:	2200      	movs	r2, #0
 8017e4c:	3b01      	subs	r3, #1
 8017e4e:	930c      	str	r3, [sp, #48]	@ 0x30
 8017e50:	2300      	movs	r3, #0
 8017e52:	f7e8 fafb 	bl	800044c <__aeabi_dcmpeq>
 8017e56:	2800      	cmp	r0, #0
 8017e58:	d11a      	bne.n	8017e90 <_printf_float+0x44c>
 8017e5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017e5c:	1c7a      	adds	r2, r7, #1
 8017e5e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017e60:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017e62:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017e64:	47b0      	blx	r6
 8017e66:	3001      	adds	r0, #1
 8017e68:	d10e      	bne.n	8017e88 <_printf_float+0x444>
 8017e6a:	e647      	b.n	8017afc <_printf_float+0xb8>
 8017e6c:	002a      	movs	r2, r5
 8017e6e:	2301      	movs	r3, #1
 8017e70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017e72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017e74:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8017e76:	321a      	adds	r2, #26
 8017e78:	47b8      	blx	r7
 8017e7a:	3001      	adds	r0, #1
 8017e7c:	d100      	bne.n	8017e80 <_printf_float+0x43c>
 8017e7e:	e63d      	b.n	8017afc <_printf_float+0xb8>
 8017e80:	3601      	adds	r6, #1
 8017e82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017e84:	429e      	cmp	r6, r3
 8017e86:	dbf1      	blt.n	8017e6c <_printf_float+0x428>
 8017e88:	002a      	movs	r2, r5
 8017e8a:	0023      	movs	r3, r4
 8017e8c:	3250      	adds	r2, #80	@ 0x50
 8017e8e:	e6da      	b.n	8017c46 <_printf_float+0x202>
 8017e90:	2600      	movs	r6, #0
 8017e92:	e7f6      	b.n	8017e82 <_printf_float+0x43e>
 8017e94:	003a      	movs	r2, r7
 8017e96:	e7e2      	b.n	8017e5e <_printf_float+0x41a>
 8017e98:	002a      	movs	r2, r5
 8017e9a:	2301      	movs	r3, #1
 8017e9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017e9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017ea0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017ea2:	3219      	adds	r2, #25
 8017ea4:	47b0      	blx	r6
 8017ea6:	3001      	adds	r0, #1
 8017ea8:	d100      	bne.n	8017eac <_printf_float+0x468>
 8017eaa:	e627      	b.n	8017afc <_printf_float+0xb8>
 8017eac:	3401      	adds	r4, #1
 8017eae:	68eb      	ldr	r3, [r5, #12]
 8017eb0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8017eb2:	1a9b      	subs	r3, r3, r2
 8017eb4:	42a3      	cmp	r3, r4
 8017eb6:	dcef      	bgt.n	8017e98 <_printf_float+0x454>
 8017eb8:	e6f9      	b.n	8017cae <_printf_float+0x26a>
 8017eba:	2400      	movs	r4, #0
 8017ebc:	e7f7      	b.n	8017eae <_printf_float+0x46a>
 8017ebe:	46c0      	nop			@ (mov r8, r8)

08017ec0 <_printf_common>:
 8017ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017ec2:	0016      	movs	r6, r2
 8017ec4:	9301      	str	r3, [sp, #4]
 8017ec6:	688a      	ldr	r2, [r1, #8]
 8017ec8:	690b      	ldr	r3, [r1, #16]
 8017eca:	000c      	movs	r4, r1
 8017ecc:	9000      	str	r0, [sp, #0]
 8017ece:	4293      	cmp	r3, r2
 8017ed0:	da00      	bge.n	8017ed4 <_printf_common+0x14>
 8017ed2:	0013      	movs	r3, r2
 8017ed4:	0022      	movs	r2, r4
 8017ed6:	6033      	str	r3, [r6, #0]
 8017ed8:	3243      	adds	r2, #67	@ 0x43
 8017eda:	7812      	ldrb	r2, [r2, #0]
 8017edc:	2a00      	cmp	r2, #0
 8017ede:	d001      	beq.n	8017ee4 <_printf_common+0x24>
 8017ee0:	3301      	adds	r3, #1
 8017ee2:	6033      	str	r3, [r6, #0]
 8017ee4:	6823      	ldr	r3, [r4, #0]
 8017ee6:	069b      	lsls	r3, r3, #26
 8017ee8:	d502      	bpl.n	8017ef0 <_printf_common+0x30>
 8017eea:	6833      	ldr	r3, [r6, #0]
 8017eec:	3302      	adds	r3, #2
 8017eee:	6033      	str	r3, [r6, #0]
 8017ef0:	6822      	ldr	r2, [r4, #0]
 8017ef2:	2306      	movs	r3, #6
 8017ef4:	0015      	movs	r5, r2
 8017ef6:	401d      	ands	r5, r3
 8017ef8:	421a      	tst	r2, r3
 8017efa:	d027      	beq.n	8017f4c <_printf_common+0x8c>
 8017efc:	0023      	movs	r3, r4
 8017efe:	3343      	adds	r3, #67	@ 0x43
 8017f00:	781b      	ldrb	r3, [r3, #0]
 8017f02:	1e5a      	subs	r2, r3, #1
 8017f04:	4193      	sbcs	r3, r2
 8017f06:	6822      	ldr	r2, [r4, #0]
 8017f08:	0692      	lsls	r2, r2, #26
 8017f0a:	d430      	bmi.n	8017f6e <_printf_common+0xae>
 8017f0c:	0022      	movs	r2, r4
 8017f0e:	9901      	ldr	r1, [sp, #4]
 8017f10:	9800      	ldr	r0, [sp, #0]
 8017f12:	9d08      	ldr	r5, [sp, #32]
 8017f14:	3243      	adds	r2, #67	@ 0x43
 8017f16:	47a8      	blx	r5
 8017f18:	3001      	adds	r0, #1
 8017f1a:	d025      	beq.n	8017f68 <_printf_common+0xa8>
 8017f1c:	2206      	movs	r2, #6
 8017f1e:	6823      	ldr	r3, [r4, #0]
 8017f20:	2500      	movs	r5, #0
 8017f22:	4013      	ands	r3, r2
 8017f24:	2b04      	cmp	r3, #4
 8017f26:	d105      	bne.n	8017f34 <_printf_common+0x74>
 8017f28:	6833      	ldr	r3, [r6, #0]
 8017f2a:	68e5      	ldr	r5, [r4, #12]
 8017f2c:	1aed      	subs	r5, r5, r3
 8017f2e:	43eb      	mvns	r3, r5
 8017f30:	17db      	asrs	r3, r3, #31
 8017f32:	401d      	ands	r5, r3
 8017f34:	68a3      	ldr	r3, [r4, #8]
 8017f36:	6922      	ldr	r2, [r4, #16]
 8017f38:	4293      	cmp	r3, r2
 8017f3a:	dd01      	ble.n	8017f40 <_printf_common+0x80>
 8017f3c:	1a9b      	subs	r3, r3, r2
 8017f3e:	18ed      	adds	r5, r5, r3
 8017f40:	2600      	movs	r6, #0
 8017f42:	42b5      	cmp	r5, r6
 8017f44:	d120      	bne.n	8017f88 <_printf_common+0xc8>
 8017f46:	2000      	movs	r0, #0
 8017f48:	e010      	b.n	8017f6c <_printf_common+0xac>
 8017f4a:	3501      	adds	r5, #1
 8017f4c:	68e3      	ldr	r3, [r4, #12]
 8017f4e:	6832      	ldr	r2, [r6, #0]
 8017f50:	1a9b      	subs	r3, r3, r2
 8017f52:	42ab      	cmp	r3, r5
 8017f54:	ddd2      	ble.n	8017efc <_printf_common+0x3c>
 8017f56:	0022      	movs	r2, r4
 8017f58:	2301      	movs	r3, #1
 8017f5a:	9901      	ldr	r1, [sp, #4]
 8017f5c:	9800      	ldr	r0, [sp, #0]
 8017f5e:	9f08      	ldr	r7, [sp, #32]
 8017f60:	3219      	adds	r2, #25
 8017f62:	47b8      	blx	r7
 8017f64:	3001      	adds	r0, #1
 8017f66:	d1f0      	bne.n	8017f4a <_printf_common+0x8a>
 8017f68:	2001      	movs	r0, #1
 8017f6a:	4240      	negs	r0, r0
 8017f6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017f6e:	2030      	movs	r0, #48	@ 0x30
 8017f70:	18e1      	adds	r1, r4, r3
 8017f72:	3143      	adds	r1, #67	@ 0x43
 8017f74:	7008      	strb	r0, [r1, #0]
 8017f76:	0021      	movs	r1, r4
 8017f78:	1c5a      	adds	r2, r3, #1
 8017f7a:	3145      	adds	r1, #69	@ 0x45
 8017f7c:	7809      	ldrb	r1, [r1, #0]
 8017f7e:	18a2      	adds	r2, r4, r2
 8017f80:	3243      	adds	r2, #67	@ 0x43
 8017f82:	3302      	adds	r3, #2
 8017f84:	7011      	strb	r1, [r2, #0]
 8017f86:	e7c1      	b.n	8017f0c <_printf_common+0x4c>
 8017f88:	0022      	movs	r2, r4
 8017f8a:	2301      	movs	r3, #1
 8017f8c:	9901      	ldr	r1, [sp, #4]
 8017f8e:	9800      	ldr	r0, [sp, #0]
 8017f90:	9f08      	ldr	r7, [sp, #32]
 8017f92:	321a      	adds	r2, #26
 8017f94:	47b8      	blx	r7
 8017f96:	3001      	adds	r0, #1
 8017f98:	d0e6      	beq.n	8017f68 <_printf_common+0xa8>
 8017f9a:	3601      	adds	r6, #1
 8017f9c:	e7d1      	b.n	8017f42 <_printf_common+0x82>
	...

08017fa0 <_printf_i>:
 8017fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017fa2:	b08b      	sub	sp, #44	@ 0x2c
 8017fa4:	9206      	str	r2, [sp, #24]
 8017fa6:	000a      	movs	r2, r1
 8017fa8:	3243      	adds	r2, #67	@ 0x43
 8017faa:	9307      	str	r3, [sp, #28]
 8017fac:	9005      	str	r0, [sp, #20]
 8017fae:	9203      	str	r2, [sp, #12]
 8017fb0:	7e0a      	ldrb	r2, [r1, #24]
 8017fb2:	000c      	movs	r4, r1
 8017fb4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017fb6:	2a78      	cmp	r2, #120	@ 0x78
 8017fb8:	d809      	bhi.n	8017fce <_printf_i+0x2e>
 8017fba:	2a62      	cmp	r2, #98	@ 0x62
 8017fbc:	d80b      	bhi.n	8017fd6 <_printf_i+0x36>
 8017fbe:	2a00      	cmp	r2, #0
 8017fc0:	d100      	bne.n	8017fc4 <_printf_i+0x24>
 8017fc2:	e0bc      	b.n	801813e <_printf_i+0x19e>
 8017fc4:	497b      	ldr	r1, [pc, #492]	@ (80181b4 <_printf_i+0x214>)
 8017fc6:	9104      	str	r1, [sp, #16]
 8017fc8:	2a58      	cmp	r2, #88	@ 0x58
 8017fca:	d100      	bne.n	8017fce <_printf_i+0x2e>
 8017fcc:	e090      	b.n	80180f0 <_printf_i+0x150>
 8017fce:	0025      	movs	r5, r4
 8017fd0:	3542      	adds	r5, #66	@ 0x42
 8017fd2:	702a      	strb	r2, [r5, #0]
 8017fd4:	e022      	b.n	801801c <_printf_i+0x7c>
 8017fd6:	0010      	movs	r0, r2
 8017fd8:	3863      	subs	r0, #99	@ 0x63
 8017fda:	2815      	cmp	r0, #21
 8017fdc:	d8f7      	bhi.n	8017fce <_printf_i+0x2e>
 8017fde:	f7e8 f8a5 	bl	800012c <__gnu_thumb1_case_shi>
 8017fe2:	0016      	.short	0x0016
 8017fe4:	fff6001f 	.word	0xfff6001f
 8017fe8:	fff6fff6 	.word	0xfff6fff6
 8017fec:	001ffff6 	.word	0x001ffff6
 8017ff0:	fff6fff6 	.word	0xfff6fff6
 8017ff4:	fff6fff6 	.word	0xfff6fff6
 8017ff8:	003600a1 	.word	0x003600a1
 8017ffc:	fff60080 	.word	0xfff60080
 8018000:	00b2fff6 	.word	0x00b2fff6
 8018004:	0036fff6 	.word	0x0036fff6
 8018008:	fff6fff6 	.word	0xfff6fff6
 801800c:	0084      	.short	0x0084
 801800e:	0025      	movs	r5, r4
 8018010:	681a      	ldr	r2, [r3, #0]
 8018012:	3542      	adds	r5, #66	@ 0x42
 8018014:	1d11      	adds	r1, r2, #4
 8018016:	6019      	str	r1, [r3, #0]
 8018018:	6813      	ldr	r3, [r2, #0]
 801801a:	702b      	strb	r3, [r5, #0]
 801801c:	2301      	movs	r3, #1
 801801e:	e0a0      	b.n	8018162 <_printf_i+0x1c2>
 8018020:	6818      	ldr	r0, [r3, #0]
 8018022:	6809      	ldr	r1, [r1, #0]
 8018024:	1d02      	adds	r2, r0, #4
 8018026:	060d      	lsls	r5, r1, #24
 8018028:	d50b      	bpl.n	8018042 <_printf_i+0xa2>
 801802a:	6806      	ldr	r6, [r0, #0]
 801802c:	601a      	str	r2, [r3, #0]
 801802e:	2e00      	cmp	r6, #0
 8018030:	da03      	bge.n	801803a <_printf_i+0x9a>
 8018032:	232d      	movs	r3, #45	@ 0x2d
 8018034:	9a03      	ldr	r2, [sp, #12]
 8018036:	4276      	negs	r6, r6
 8018038:	7013      	strb	r3, [r2, #0]
 801803a:	4b5e      	ldr	r3, [pc, #376]	@ (80181b4 <_printf_i+0x214>)
 801803c:	270a      	movs	r7, #10
 801803e:	9304      	str	r3, [sp, #16]
 8018040:	e018      	b.n	8018074 <_printf_i+0xd4>
 8018042:	6806      	ldr	r6, [r0, #0]
 8018044:	601a      	str	r2, [r3, #0]
 8018046:	0649      	lsls	r1, r1, #25
 8018048:	d5f1      	bpl.n	801802e <_printf_i+0x8e>
 801804a:	b236      	sxth	r6, r6
 801804c:	e7ef      	b.n	801802e <_printf_i+0x8e>
 801804e:	6808      	ldr	r0, [r1, #0]
 8018050:	6819      	ldr	r1, [r3, #0]
 8018052:	c940      	ldmia	r1!, {r6}
 8018054:	0605      	lsls	r5, r0, #24
 8018056:	d402      	bmi.n	801805e <_printf_i+0xbe>
 8018058:	0640      	lsls	r0, r0, #25
 801805a:	d500      	bpl.n	801805e <_printf_i+0xbe>
 801805c:	b2b6      	uxth	r6, r6
 801805e:	6019      	str	r1, [r3, #0]
 8018060:	4b54      	ldr	r3, [pc, #336]	@ (80181b4 <_printf_i+0x214>)
 8018062:	270a      	movs	r7, #10
 8018064:	9304      	str	r3, [sp, #16]
 8018066:	2a6f      	cmp	r2, #111	@ 0x6f
 8018068:	d100      	bne.n	801806c <_printf_i+0xcc>
 801806a:	3f02      	subs	r7, #2
 801806c:	0023      	movs	r3, r4
 801806e:	2200      	movs	r2, #0
 8018070:	3343      	adds	r3, #67	@ 0x43
 8018072:	701a      	strb	r2, [r3, #0]
 8018074:	6863      	ldr	r3, [r4, #4]
 8018076:	60a3      	str	r3, [r4, #8]
 8018078:	2b00      	cmp	r3, #0
 801807a:	db03      	blt.n	8018084 <_printf_i+0xe4>
 801807c:	2104      	movs	r1, #4
 801807e:	6822      	ldr	r2, [r4, #0]
 8018080:	438a      	bics	r2, r1
 8018082:	6022      	str	r2, [r4, #0]
 8018084:	2e00      	cmp	r6, #0
 8018086:	d102      	bne.n	801808e <_printf_i+0xee>
 8018088:	9d03      	ldr	r5, [sp, #12]
 801808a:	2b00      	cmp	r3, #0
 801808c:	d00c      	beq.n	80180a8 <_printf_i+0x108>
 801808e:	9d03      	ldr	r5, [sp, #12]
 8018090:	0030      	movs	r0, r6
 8018092:	0039      	movs	r1, r7
 8018094:	f7e8 f8da 	bl	800024c <__aeabi_uidivmod>
 8018098:	9b04      	ldr	r3, [sp, #16]
 801809a:	3d01      	subs	r5, #1
 801809c:	5c5b      	ldrb	r3, [r3, r1]
 801809e:	702b      	strb	r3, [r5, #0]
 80180a0:	0033      	movs	r3, r6
 80180a2:	0006      	movs	r6, r0
 80180a4:	429f      	cmp	r7, r3
 80180a6:	d9f3      	bls.n	8018090 <_printf_i+0xf0>
 80180a8:	2f08      	cmp	r7, #8
 80180aa:	d109      	bne.n	80180c0 <_printf_i+0x120>
 80180ac:	6823      	ldr	r3, [r4, #0]
 80180ae:	07db      	lsls	r3, r3, #31
 80180b0:	d506      	bpl.n	80180c0 <_printf_i+0x120>
 80180b2:	6862      	ldr	r2, [r4, #4]
 80180b4:	6923      	ldr	r3, [r4, #16]
 80180b6:	429a      	cmp	r2, r3
 80180b8:	dc02      	bgt.n	80180c0 <_printf_i+0x120>
 80180ba:	2330      	movs	r3, #48	@ 0x30
 80180bc:	3d01      	subs	r5, #1
 80180be:	702b      	strb	r3, [r5, #0]
 80180c0:	9b03      	ldr	r3, [sp, #12]
 80180c2:	1b5b      	subs	r3, r3, r5
 80180c4:	6123      	str	r3, [r4, #16]
 80180c6:	9b07      	ldr	r3, [sp, #28]
 80180c8:	0021      	movs	r1, r4
 80180ca:	9300      	str	r3, [sp, #0]
 80180cc:	9805      	ldr	r0, [sp, #20]
 80180ce:	9b06      	ldr	r3, [sp, #24]
 80180d0:	aa09      	add	r2, sp, #36	@ 0x24
 80180d2:	f7ff fef5 	bl	8017ec0 <_printf_common>
 80180d6:	3001      	adds	r0, #1
 80180d8:	d148      	bne.n	801816c <_printf_i+0x1cc>
 80180da:	2001      	movs	r0, #1
 80180dc:	4240      	negs	r0, r0
 80180de:	b00b      	add	sp, #44	@ 0x2c
 80180e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180e2:	2220      	movs	r2, #32
 80180e4:	6809      	ldr	r1, [r1, #0]
 80180e6:	430a      	orrs	r2, r1
 80180e8:	6022      	str	r2, [r4, #0]
 80180ea:	2278      	movs	r2, #120	@ 0x78
 80180ec:	4932      	ldr	r1, [pc, #200]	@ (80181b8 <_printf_i+0x218>)
 80180ee:	9104      	str	r1, [sp, #16]
 80180f0:	0021      	movs	r1, r4
 80180f2:	3145      	adds	r1, #69	@ 0x45
 80180f4:	700a      	strb	r2, [r1, #0]
 80180f6:	6819      	ldr	r1, [r3, #0]
 80180f8:	6822      	ldr	r2, [r4, #0]
 80180fa:	c940      	ldmia	r1!, {r6}
 80180fc:	0610      	lsls	r0, r2, #24
 80180fe:	d402      	bmi.n	8018106 <_printf_i+0x166>
 8018100:	0650      	lsls	r0, r2, #25
 8018102:	d500      	bpl.n	8018106 <_printf_i+0x166>
 8018104:	b2b6      	uxth	r6, r6
 8018106:	6019      	str	r1, [r3, #0]
 8018108:	07d3      	lsls	r3, r2, #31
 801810a:	d502      	bpl.n	8018112 <_printf_i+0x172>
 801810c:	2320      	movs	r3, #32
 801810e:	4313      	orrs	r3, r2
 8018110:	6023      	str	r3, [r4, #0]
 8018112:	2e00      	cmp	r6, #0
 8018114:	d001      	beq.n	801811a <_printf_i+0x17a>
 8018116:	2710      	movs	r7, #16
 8018118:	e7a8      	b.n	801806c <_printf_i+0xcc>
 801811a:	2220      	movs	r2, #32
 801811c:	6823      	ldr	r3, [r4, #0]
 801811e:	4393      	bics	r3, r2
 8018120:	6023      	str	r3, [r4, #0]
 8018122:	e7f8      	b.n	8018116 <_printf_i+0x176>
 8018124:	681a      	ldr	r2, [r3, #0]
 8018126:	680d      	ldr	r5, [r1, #0]
 8018128:	1d10      	adds	r0, r2, #4
 801812a:	6949      	ldr	r1, [r1, #20]
 801812c:	6018      	str	r0, [r3, #0]
 801812e:	6813      	ldr	r3, [r2, #0]
 8018130:	062e      	lsls	r6, r5, #24
 8018132:	d501      	bpl.n	8018138 <_printf_i+0x198>
 8018134:	6019      	str	r1, [r3, #0]
 8018136:	e002      	b.n	801813e <_printf_i+0x19e>
 8018138:	066d      	lsls	r5, r5, #25
 801813a:	d5fb      	bpl.n	8018134 <_printf_i+0x194>
 801813c:	8019      	strh	r1, [r3, #0]
 801813e:	2300      	movs	r3, #0
 8018140:	9d03      	ldr	r5, [sp, #12]
 8018142:	6123      	str	r3, [r4, #16]
 8018144:	e7bf      	b.n	80180c6 <_printf_i+0x126>
 8018146:	681a      	ldr	r2, [r3, #0]
 8018148:	1d11      	adds	r1, r2, #4
 801814a:	6019      	str	r1, [r3, #0]
 801814c:	6815      	ldr	r5, [r2, #0]
 801814e:	2100      	movs	r1, #0
 8018150:	0028      	movs	r0, r5
 8018152:	6862      	ldr	r2, [r4, #4]
 8018154:	f000 fa69 	bl	801862a <memchr>
 8018158:	2800      	cmp	r0, #0
 801815a:	d001      	beq.n	8018160 <_printf_i+0x1c0>
 801815c:	1b40      	subs	r0, r0, r5
 801815e:	6060      	str	r0, [r4, #4]
 8018160:	6863      	ldr	r3, [r4, #4]
 8018162:	6123      	str	r3, [r4, #16]
 8018164:	2300      	movs	r3, #0
 8018166:	9a03      	ldr	r2, [sp, #12]
 8018168:	7013      	strb	r3, [r2, #0]
 801816a:	e7ac      	b.n	80180c6 <_printf_i+0x126>
 801816c:	002a      	movs	r2, r5
 801816e:	6923      	ldr	r3, [r4, #16]
 8018170:	9906      	ldr	r1, [sp, #24]
 8018172:	9805      	ldr	r0, [sp, #20]
 8018174:	9d07      	ldr	r5, [sp, #28]
 8018176:	47a8      	blx	r5
 8018178:	3001      	adds	r0, #1
 801817a:	d0ae      	beq.n	80180da <_printf_i+0x13a>
 801817c:	6823      	ldr	r3, [r4, #0]
 801817e:	079b      	lsls	r3, r3, #30
 8018180:	d415      	bmi.n	80181ae <_printf_i+0x20e>
 8018182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018184:	68e0      	ldr	r0, [r4, #12]
 8018186:	4298      	cmp	r0, r3
 8018188:	daa9      	bge.n	80180de <_printf_i+0x13e>
 801818a:	0018      	movs	r0, r3
 801818c:	e7a7      	b.n	80180de <_printf_i+0x13e>
 801818e:	0022      	movs	r2, r4
 8018190:	2301      	movs	r3, #1
 8018192:	9906      	ldr	r1, [sp, #24]
 8018194:	9805      	ldr	r0, [sp, #20]
 8018196:	9e07      	ldr	r6, [sp, #28]
 8018198:	3219      	adds	r2, #25
 801819a:	47b0      	blx	r6
 801819c:	3001      	adds	r0, #1
 801819e:	d09c      	beq.n	80180da <_printf_i+0x13a>
 80181a0:	3501      	adds	r5, #1
 80181a2:	68e3      	ldr	r3, [r4, #12]
 80181a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80181a6:	1a9b      	subs	r3, r3, r2
 80181a8:	42ab      	cmp	r3, r5
 80181aa:	dcf0      	bgt.n	801818e <_printf_i+0x1ee>
 80181ac:	e7e9      	b.n	8018182 <_printf_i+0x1e2>
 80181ae:	2500      	movs	r5, #0
 80181b0:	e7f7      	b.n	80181a2 <_printf_i+0x202>
 80181b2:	46c0      	nop			@ (mov r8, r8)
 80181b4:	0801c1ca 	.word	0x0801c1ca
 80181b8:	0801c1db 	.word	0x0801c1db

080181bc <std>:
 80181bc:	2300      	movs	r3, #0
 80181be:	b510      	push	{r4, lr}
 80181c0:	0004      	movs	r4, r0
 80181c2:	6003      	str	r3, [r0, #0]
 80181c4:	6043      	str	r3, [r0, #4]
 80181c6:	6083      	str	r3, [r0, #8]
 80181c8:	8181      	strh	r1, [r0, #12]
 80181ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80181cc:	81c2      	strh	r2, [r0, #14]
 80181ce:	6103      	str	r3, [r0, #16]
 80181d0:	6143      	str	r3, [r0, #20]
 80181d2:	6183      	str	r3, [r0, #24]
 80181d4:	0019      	movs	r1, r3
 80181d6:	2208      	movs	r2, #8
 80181d8:	305c      	adds	r0, #92	@ 0x5c
 80181da:	f000 f967 	bl	80184ac <memset>
 80181de:	4b0b      	ldr	r3, [pc, #44]	@ (801820c <std+0x50>)
 80181e0:	6224      	str	r4, [r4, #32]
 80181e2:	6263      	str	r3, [r4, #36]	@ 0x24
 80181e4:	4b0a      	ldr	r3, [pc, #40]	@ (8018210 <std+0x54>)
 80181e6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80181e8:	4b0a      	ldr	r3, [pc, #40]	@ (8018214 <std+0x58>)
 80181ea:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80181ec:	4b0a      	ldr	r3, [pc, #40]	@ (8018218 <std+0x5c>)
 80181ee:	6323      	str	r3, [r4, #48]	@ 0x30
 80181f0:	4b0a      	ldr	r3, [pc, #40]	@ (801821c <std+0x60>)
 80181f2:	429c      	cmp	r4, r3
 80181f4:	d005      	beq.n	8018202 <std+0x46>
 80181f6:	4b0a      	ldr	r3, [pc, #40]	@ (8018220 <std+0x64>)
 80181f8:	429c      	cmp	r4, r3
 80181fa:	d002      	beq.n	8018202 <std+0x46>
 80181fc:	4b09      	ldr	r3, [pc, #36]	@ (8018224 <std+0x68>)
 80181fe:	429c      	cmp	r4, r3
 8018200:	d103      	bne.n	801820a <std+0x4e>
 8018202:	0020      	movs	r0, r4
 8018204:	3058      	adds	r0, #88	@ 0x58
 8018206:	f000 fa0d 	bl	8018624 <__retarget_lock_init_recursive>
 801820a:	bd10      	pop	{r4, pc}
 801820c:	080183a5 	.word	0x080183a5
 8018210:	080183cd 	.word	0x080183cd
 8018214:	08018405 	.word	0x08018405
 8018218:	08018431 	.word	0x08018431
 801821c:	20003fd4 	.word	0x20003fd4
 8018220:	2000403c 	.word	0x2000403c
 8018224:	200040a4 	.word	0x200040a4

08018228 <stdio_exit_handler>:
 8018228:	b510      	push	{r4, lr}
 801822a:	4a03      	ldr	r2, [pc, #12]	@ (8018238 <stdio_exit_handler+0x10>)
 801822c:	4903      	ldr	r1, [pc, #12]	@ (801823c <stdio_exit_handler+0x14>)
 801822e:	4804      	ldr	r0, [pc, #16]	@ (8018240 <stdio_exit_handler+0x18>)
 8018230:	f000 f86c 	bl	801830c <_fwalk_sglue>
 8018234:	bd10      	pop	{r4, pc}
 8018236:	46c0      	nop			@ (mov r8, r8)
 8018238:	200001e8 	.word	0x200001e8
 801823c:	0801a2fd 	.word	0x0801a2fd
 8018240:	200001f8 	.word	0x200001f8

08018244 <cleanup_stdio>:
 8018244:	6841      	ldr	r1, [r0, #4]
 8018246:	4b0b      	ldr	r3, [pc, #44]	@ (8018274 <cleanup_stdio+0x30>)
 8018248:	b510      	push	{r4, lr}
 801824a:	0004      	movs	r4, r0
 801824c:	4299      	cmp	r1, r3
 801824e:	d001      	beq.n	8018254 <cleanup_stdio+0x10>
 8018250:	f002 f854 	bl	801a2fc <_fflush_r>
 8018254:	68a1      	ldr	r1, [r4, #8]
 8018256:	4b08      	ldr	r3, [pc, #32]	@ (8018278 <cleanup_stdio+0x34>)
 8018258:	4299      	cmp	r1, r3
 801825a:	d002      	beq.n	8018262 <cleanup_stdio+0x1e>
 801825c:	0020      	movs	r0, r4
 801825e:	f002 f84d 	bl	801a2fc <_fflush_r>
 8018262:	68e1      	ldr	r1, [r4, #12]
 8018264:	4b05      	ldr	r3, [pc, #20]	@ (801827c <cleanup_stdio+0x38>)
 8018266:	4299      	cmp	r1, r3
 8018268:	d002      	beq.n	8018270 <cleanup_stdio+0x2c>
 801826a:	0020      	movs	r0, r4
 801826c:	f002 f846 	bl	801a2fc <_fflush_r>
 8018270:	bd10      	pop	{r4, pc}
 8018272:	46c0      	nop			@ (mov r8, r8)
 8018274:	20003fd4 	.word	0x20003fd4
 8018278:	2000403c 	.word	0x2000403c
 801827c:	200040a4 	.word	0x200040a4

08018280 <global_stdio_init.part.0>:
 8018280:	b510      	push	{r4, lr}
 8018282:	4b09      	ldr	r3, [pc, #36]	@ (80182a8 <global_stdio_init.part.0+0x28>)
 8018284:	4a09      	ldr	r2, [pc, #36]	@ (80182ac <global_stdio_init.part.0+0x2c>)
 8018286:	2104      	movs	r1, #4
 8018288:	601a      	str	r2, [r3, #0]
 801828a:	4809      	ldr	r0, [pc, #36]	@ (80182b0 <global_stdio_init.part.0+0x30>)
 801828c:	2200      	movs	r2, #0
 801828e:	f7ff ff95 	bl	80181bc <std>
 8018292:	2201      	movs	r2, #1
 8018294:	2109      	movs	r1, #9
 8018296:	4807      	ldr	r0, [pc, #28]	@ (80182b4 <global_stdio_init.part.0+0x34>)
 8018298:	f7ff ff90 	bl	80181bc <std>
 801829c:	2202      	movs	r2, #2
 801829e:	2112      	movs	r1, #18
 80182a0:	4805      	ldr	r0, [pc, #20]	@ (80182b8 <global_stdio_init.part.0+0x38>)
 80182a2:	f7ff ff8b 	bl	80181bc <std>
 80182a6:	bd10      	pop	{r4, pc}
 80182a8:	2000410c 	.word	0x2000410c
 80182ac:	08018229 	.word	0x08018229
 80182b0:	20003fd4 	.word	0x20003fd4
 80182b4:	2000403c 	.word	0x2000403c
 80182b8:	200040a4 	.word	0x200040a4

080182bc <__sfp_lock_acquire>:
 80182bc:	b510      	push	{r4, lr}
 80182be:	4802      	ldr	r0, [pc, #8]	@ (80182c8 <__sfp_lock_acquire+0xc>)
 80182c0:	f000 f9b1 	bl	8018626 <__retarget_lock_acquire_recursive>
 80182c4:	bd10      	pop	{r4, pc}
 80182c6:	46c0      	nop			@ (mov r8, r8)
 80182c8:	20004115 	.word	0x20004115

080182cc <__sfp_lock_release>:
 80182cc:	b510      	push	{r4, lr}
 80182ce:	4802      	ldr	r0, [pc, #8]	@ (80182d8 <__sfp_lock_release+0xc>)
 80182d0:	f000 f9aa 	bl	8018628 <__retarget_lock_release_recursive>
 80182d4:	bd10      	pop	{r4, pc}
 80182d6:	46c0      	nop			@ (mov r8, r8)
 80182d8:	20004115 	.word	0x20004115

080182dc <__sinit>:
 80182dc:	b510      	push	{r4, lr}
 80182de:	0004      	movs	r4, r0
 80182e0:	f7ff ffec 	bl	80182bc <__sfp_lock_acquire>
 80182e4:	6a23      	ldr	r3, [r4, #32]
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d002      	beq.n	80182f0 <__sinit+0x14>
 80182ea:	f7ff ffef 	bl	80182cc <__sfp_lock_release>
 80182ee:	bd10      	pop	{r4, pc}
 80182f0:	4b04      	ldr	r3, [pc, #16]	@ (8018304 <__sinit+0x28>)
 80182f2:	6223      	str	r3, [r4, #32]
 80182f4:	4b04      	ldr	r3, [pc, #16]	@ (8018308 <__sinit+0x2c>)
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d1f6      	bne.n	80182ea <__sinit+0xe>
 80182fc:	f7ff ffc0 	bl	8018280 <global_stdio_init.part.0>
 8018300:	e7f3      	b.n	80182ea <__sinit+0xe>
 8018302:	46c0      	nop			@ (mov r8, r8)
 8018304:	08018245 	.word	0x08018245
 8018308:	2000410c 	.word	0x2000410c

0801830c <_fwalk_sglue>:
 801830c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801830e:	0014      	movs	r4, r2
 8018310:	2600      	movs	r6, #0
 8018312:	9000      	str	r0, [sp, #0]
 8018314:	9101      	str	r1, [sp, #4]
 8018316:	68a5      	ldr	r5, [r4, #8]
 8018318:	6867      	ldr	r7, [r4, #4]
 801831a:	3f01      	subs	r7, #1
 801831c:	d504      	bpl.n	8018328 <_fwalk_sglue+0x1c>
 801831e:	6824      	ldr	r4, [r4, #0]
 8018320:	2c00      	cmp	r4, #0
 8018322:	d1f8      	bne.n	8018316 <_fwalk_sglue+0xa>
 8018324:	0030      	movs	r0, r6
 8018326:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018328:	89ab      	ldrh	r3, [r5, #12]
 801832a:	2b01      	cmp	r3, #1
 801832c:	d908      	bls.n	8018340 <_fwalk_sglue+0x34>
 801832e:	220e      	movs	r2, #14
 8018330:	5eab      	ldrsh	r3, [r5, r2]
 8018332:	3301      	adds	r3, #1
 8018334:	d004      	beq.n	8018340 <_fwalk_sglue+0x34>
 8018336:	0029      	movs	r1, r5
 8018338:	9800      	ldr	r0, [sp, #0]
 801833a:	9b01      	ldr	r3, [sp, #4]
 801833c:	4798      	blx	r3
 801833e:	4306      	orrs	r6, r0
 8018340:	3568      	adds	r5, #104	@ 0x68
 8018342:	e7ea      	b.n	801831a <_fwalk_sglue+0xe>

08018344 <iprintf>:
 8018344:	b40f      	push	{r0, r1, r2, r3}
 8018346:	b507      	push	{r0, r1, r2, lr}
 8018348:	4905      	ldr	r1, [pc, #20]	@ (8018360 <iprintf+0x1c>)
 801834a:	ab04      	add	r3, sp, #16
 801834c:	6808      	ldr	r0, [r1, #0]
 801834e:	cb04      	ldmia	r3!, {r2}
 8018350:	6881      	ldr	r1, [r0, #8]
 8018352:	9301      	str	r3, [sp, #4]
 8018354:	f001 fe30 	bl	8019fb8 <_vfiprintf_r>
 8018358:	b003      	add	sp, #12
 801835a:	bc08      	pop	{r3}
 801835c:	b004      	add	sp, #16
 801835e:	4718      	bx	r3
 8018360:	200001f4 	.word	0x200001f4

08018364 <siprintf>:
 8018364:	b40e      	push	{r1, r2, r3}
 8018366:	b500      	push	{lr}
 8018368:	490b      	ldr	r1, [pc, #44]	@ (8018398 <siprintf+0x34>)
 801836a:	b09c      	sub	sp, #112	@ 0x70
 801836c:	ab1d      	add	r3, sp, #116	@ 0x74
 801836e:	9002      	str	r0, [sp, #8]
 8018370:	9006      	str	r0, [sp, #24]
 8018372:	9107      	str	r1, [sp, #28]
 8018374:	9104      	str	r1, [sp, #16]
 8018376:	4809      	ldr	r0, [pc, #36]	@ (801839c <siprintf+0x38>)
 8018378:	4909      	ldr	r1, [pc, #36]	@ (80183a0 <siprintf+0x3c>)
 801837a:	cb04      	ldmia	r3!, {r2}
 801837c:	9105      	str	r1, [sp, #20]
 801837e:	6800      	ldr	r0, [r0, #0]
 8018380:	a902      	add	r1, sp, #8
 8018382:	9301      	str	r3, [sp, #4]
 8018384:	f001 fcf2 	bl	8019d6c <_svfiprintf_r>
 8018388:	2200      	movs	r2, #0
 801838a:	9b02      	ldr	r3, [sp, #8]
 801838c:	701a      	strb	r2, [r3, #0]
 801838e:	b01c      	add	sp, #112	@ 0x70
 8018390:	bc08      	pop	{r3}
 8018392:	b003      	add	sp, #12
 8018394:	4718      	bx	r3
 8018396:	46c0      	nop			@ (mov r8, r8)
 8018398:	7fffffff 	.word	0x7fffffff
 801839c:	200001f4 	.word	0x200001f4
 80183a0:	ffff0208 	.word	0xffff0208

080183a4 <__sread>:
 80183a4:	b570      	push	{r4, r5, r6, lr}
 80183a6:	000c      	movs	r4, r1
 80183a8:	250e      	movs	r5, #14
 80183aa:	5f49      	ldrsh	r1, [r1, r5]
 80183ac:	f000 f8e8 	bl	8018580 <_read_r>
 80183b0:	2800      	cmp	r0, #0
 80183b2:	db03      	blt.n	80183bc <__sread+0x18>
 80183b4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80183b6:	181b      	adds	r3, r3, r0
 80183b8:	6563      	str	r3, [r4, #84]	@ 0x54
 80183ba:	bd70      	pop	{r4, r5, r6, pc}
 80183bc:	89a3      	ldrh	r3, [r4, #12]
 80183be:	4a02      	ldr	r2, [pc, #8]	@ (80183c8 <__sread+0x24>)
 80183c0:	4013      	ands	r3, r2
 80183c2:	81a3      	strh	r3, [r4, #12]
 80183c4:	e7f9      	b.n	80183ba <__sread+0x16>
 80183c6:	46c0      	nop			@ (mov r8, r8)
 80183c8:	ffffefff 	.word	0xffffefff

080183cc <__swrite>:
 80183cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183ce:	001f      	movs	r7, r3
 80183d0:	898b      	ldrh	r3, [r1, #12]
 80183d2:	0005      	movs	r5, r0
 80183d4:	000c      	movs	r4, r1
 80183d6:	0016      	movs	r6, r2
 80183d8:	05db      	lsls	r3, r3, #23
 80183da:	d505      	bpl.n	80183e8 <__swrite+0x1c>
 80183dc:	230e      	movs	r3, #14
 80183de:	5ec9      	ldrsh	r1, [r1, r3]
 80183e0:	2200      	movs	r2, #0
 80183e2:	2302      	movs	r3, #2
 80183e4:	f000 f8b8 	bl	8018558 <_lseek_r>
 80183e8:	89a3      	ldrh	r3, [r4, #12]
 80183ea:	4a05      	ldr	r2, [pc, #20]	@ (8018400 <__swrite+0x34>)
 80183ec:	0028      	movs	r0, r5
 80183ee:	4013      	ands	r3, r2
 80183f0:	81a3      	strh	r3, [r4, #12]
 80183f2:	0032      	movs	r2, r6
 80183f4:	230e      	movs	r3, #14
 80183f6:	5ee1      	ldrsh	r1, [r4, r3]
 80183f8:	003b      	movs	r3, r7
 80183fa:	f000 f8d5 	bl	80185a8 <_write_r>
 80183fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018400:	ffffefff 	.word	0xffffefff

08018404 <__sseek>:
 8018404:	b570      	push	{r4, r5, r6, lr}
 8018406:	000c      	movs	r4, r1
 8018408:	250e      	movs	r5, #14
 801840a:	5f49      	ldrsh	r1, [r1, r5]
 801840c:	f000 f8a4 	bl	8018558 <_lseek_r>
 8018410:	89a3      	ldrh	r3, [r4, #12]
 8018412:	1c42      	adds	r2, r0, #1
 8018414:	d103      	bne.n	801841e <__sseek+0x1a>
 8018416:	4a05      	ldr	r2, [pc, #20]	@ (801842c <__sseek+0x28>)
 8018418:	4013      	ands	r3, r2
 801841a:	81a3      	strh	r3, [r4, #12]
 801841c:	bd70      	pop	{r4, r5, r6, pc}
 801841e:	2280      	movs	r2, #128	@ 0x80
 8018420:	0152      	lsls	r2, r2, #5
 8018422:	4313      	orrs	r3, r2
 8018424:	81a3      	strh	r3, [r4, #12]
 8018426:	6560      	str	r0, [r4, #84]	@ 0x54
 8018428:	e7f8      	b.n	801841c <__sseek+0x18>
 801842a:	46c0      	nop			@ (mov r8, r8)
 801842c:	ffffefff 	.word	0xffffefff

08018430 <__sclose>:
 8018430:	b510      	push	{r4, lr}
 8018432:	230e      	movs	r3, #14
 8018434:	5ec9      	ldrsh	r1, [r1, r3]
 8018436:	f000 f87d 	bl	8018534 <_close_r>
 801843a:	bd10      	pop	{r4, pc}

0801843c <_vsniprintf_r>:
 801843c:	b530      	push	{r4, r5, lr}
 801843e:	0014      	movs	r4, r2
 8018440:	0005      	movs	r5, r0
 8018442:	001a      	movs	r2, r3
 8018444:	b09b      	sub	sp, #108	@ 0x6c
 8018446:	2c00      	cmp	r4, #0
 8018448:	da05      	bge.n	8018456 <_vsniprintf_r+0x1a>
 801844a:	238b      	movs	r3, #139	@ 0x8b
 801844c:	6003      	str	r3, [r0, #0]
 801844e:	2001      	movs	r0, #1
 8018450:	4240      	negs	r0, r0
 8018452:	b01b      	add	sp, #108	@ 0x6c
 8018454:	bd30      	pop	{r4, r5, pc}
 8018456:	2382      	movs	r3, #130	@ 0x82
 8018458:	4668      	mov	r0, sp
 801845a:	009b      	lsls	r3, r3, #2
 801845c:	8183      	strh	r3, [r0, #12]
 801845e:	2300      	movs	r3, #0
 8018460:	9100      	str	r1, [sp, #0]
 8018462:	9104      	str	r1, [sp, #16]
 8018464:	429c      	cmp	r4, r3
 8018466:	d000      	beq.n	801846a <_vsniprintf_r+0x2e>
 8018468:	1e63      	subs	r3, r4, #1
 801846a:	9302      	str	r3, [sp, #8]
 801846c:	9305      	str	r3, [sp, #20]
 801846e:	2301      	movs	r3, #1
 8018470:	4669      	mov	r1, sp
 8018472:	425b      	negs	r3, r3
 8018474:	81cb      	strh	r3, [r1, #14]
 8018476:	0028      	movs	r0, r5
 8018478:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801847a:	f001 fc77 	bl	8019d6c <_svfiprintf_r>
 801847e:	1c43      	adds	r3, r0, #1
 8018480:	da01      	bge.n	8018486 <_vsniprintf_r+0x4a>
 8018482:	238b      	movs	r3, #139	@ 0x8b
 8018484:	602b      	str	r3, [r5, #0]
 8018486:	2c00      	cmp	r4, #0
 8018488:	d0e3      	beq.n	8018452 <_vsniprintf_r+0x16>
 801848a:	2200      	movs	r2, #0
 801848c:	9b00      	ldr	r3, [sp, #0]
 801848e:	701a      	strb	r2, [r3, #0]
 8018490:	e7df      	b.n	8018452 <_vsniprintf_r+0x16>
	...

08018494 <vsniprintf>:
 8018494:	b513      	push	{r0, r1, r4, lr}
 8018496:	4c04      	ldr	r4, [pc, #16]	@ (80184a8 <vsniprintf+0x14>)
 8018498:	9300      	str	r3, [sp, #0]
 801849a:	0013      	movs	r3, r2
 801849c:	000a      	movs	r2, r1
 801849e:	0001      	movs	r1, r0
 80184a0:	6820      	ldr	r0, [r4, #0]
 80184a2:	f7ff ffcb 	bl	801843c <_vsniprintf_r>
 80184a6:	bd16      	pop	{r1, r2, r4, pc}
 80184a8:	200001f4 	.word	0x200001f4

080184ac <memset>:
 80184ac:	0003      	movs	r3, r0
 80184ae:	1882      	adds	r2, r0, r2
 80184b0:	4293      	cmp	r3, r2
 80184b2:	d100      	bne.n	80184b6 <memset+0xa>
 80184b4:	4770      	bx	lr
 80184b6:	7019      	strb	r1, [r3, #0]
 80184b8:	3301      	adds	r3, #1
 80184ba:	e7f9      	b.n	80184b0 <memset+0x4>

080184bc <strchr>:
 80184bc:	b2c9      	uxtb	r1, r1
 80184be:	7803      	ldrb	r3, [r0, #0]
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	d004      	beq.n	80184ce <strchr+0x12>
 80184c4:	428b      	cmp	r3, r1
 80184c6:	d100      	bne.n	80184ca <strchr+0xe>
 80184c8:	4770      	bx	lr
 80184ca:	3001      	adds	r0, #1
 80184cc:	e7f7      	b.n	80184be <strchr+0x2>
 80184ce:	424b      	negs	r3, r1
 80184d0:	4159      	adcs	r1, r3
 80184d2:	4249      	negs	r1, r1
 80184d4:	4008      	ands	r0, r1
 80184d6:	e7f7      	b.n	80184c8 <strchr+0xc>

080184d8 <strncpy>:
 80184d8:	0003      	movs	r3, r0
 80184da:	b530      	push	{r4, r5, lr}
 80184dc:	001d      	movs	r5, r3
 80184de:	2a00      	cmp	r2, #0
 80184e0:	d006      	beq.n	80184f0 <strncpy+0x18>
 80184e2:	780c      	ldrb	r4, [r1, #0]
 80184e4:	3a01      	subs	r2, #1
 80184e6:	3301      	adds	r3, #1
 80184e8:	702c      	strb	r4, [r5, #0]
 80184ea:	3101      	adds	r1, #1
 80184ec:	2c00      	cmp	r4, #0
 80184ee:	d1f5      	bne.n	80184dc <strncpy+0x4>
 80184f0:	2100      	movs	r1, #0
 80184f2:	189a      	adds	r2, r3, r2
 80184f4:	4293      	cmp	r3, r2
 80184f6:	d100      	bne.n	80184fa <strncpy+0x22>
 80184f8:	bd30      	pop	{r4, r5, pc}
 80184fa:	7019      	strb	r1, [r3, #0]
 80184fc:	3301      	adds	r3, #1
 80184fe:	e7f9      	b.n	80184f4 <strncpy+0x1c>

08018500 <strstr>:
 8018500:	780a      	ldrb	r2, [r1, #0]
 8018502:	b530      	push	{r4, r5, lr}
 8018504:	2a00      	cmp	r2, #0
 8018506:	d10c      	bne.n	8018522 <strstr+0x22>
 8018508:	bd30      	pop	{r4, r5, pc}
 801850a:	429a      	cmp	r2, r3
 801850c:	d108      	bne.n	8018520 <strstr+0x20>
 801850e:	2301      	movs	r3, #1
 8018510:	5ccc      	ldrb	r4, [r1, r3]
 8018512:	2c00      	cmp	r4, #0
 8018514:	d0f8      	beq.n	8018508 <strstr+0x8>
 8018516:	5cc5      	ldrb	r5, [r0, r3]
 8018518:	42a5      	cmp	r5, r4
 801851a:	d101      	bne.n	8018520 <strstr+0x20>
 801851c:	3301      	adds	r3, #1
 801851e:	e7f7      	b.n	8018510 <strstr+0x10>
 8018520:	3001      	adds	r0, #1
 8018522:	7803      	ldrb	r3, [r0, #0]
 8018524:	2b00      	cmp	r3, #0
 8018526:	d1f0      	bne.n	801850a <strstr+0xa>
 8018528:	0018      	movs	r0, r3
 801852a:	e7ed      	b.n	8018508 <strstr+0x8>

0801852c <_localeconv_r>:
 801852c:	4800      	ldr	r0, [pc, #0]	@ (8018530 <_localeconv_r+0x4>)
 801852e:	4770      	bx	lr
 8018530:	20000334 	.word	0x20000334

08018534 <_close_r>:
 8018534:	2300      	movs	r3, #0
 8018536:	b570      	push	{r4, r5, r6, lr}
 8018538:	4d06      	ldr	r5, [pc, #24]	@ (8018554 <_close_r+0x20>)
 801853a:	0004      	movs	r4, r0
 801853c:	0008      	movs	r0, r1
 801853e:	602b      	str	r3, [r5, #0]
 8018540:	f7f0 feee 	bl	8009320 <_close>
 8018544:	1c43      	adds	r3, r0, #1
 8018546:	d103      	bne.n	8018550 <_close_r+0x1c>
 8018548:	682b      	ldr	r3, [r5, #0]
 801854a:	2b00      	cmp	r3, #0
 801854c:	d000      	beq.n	8018550 <_close_r+0x1c>
 801854e:	6023      	str	r3, [r4, #0]
 8018550:	bd70      	pop	{r4, r5, r6, pc}
 8018552:	46c0      	nop			@ (mov r8, r8)
 8018554:	20004110 	.word	0x20004110

08018558 <_lseek_r>:
 8018558:	b570      	push	{r4, r5, r6, lr}
 801855a:	0004      	movs	r4, r0
 801855c:	0008      	movs	r0, r1
 801855e:	0011      	movs	r1, r2
 8018560:	001a      	movs	r2, r3
 8018562:	2300      	movs	r3, #0
 8018564:	4d05      	ldr	r5, [pc, #20]	@ (801857c <_lseek_r+0x24>)
 8018566:	602b      	str	r3, [r5, #0]
 8018568:	f7f0 fefb 	bl	8009362 <_lseek>
 801856c:	1c43      	adds	r3, r0, #1
 801856e:	d103      	bne.n	8018578 <_lseek_r+0x20>
 8018570:	682b      	ldr	r3, [r5, #0]
 8018572:	2b00      	cmp	r3, #0
 8018574:	d000      	beq.n	8018578 <_lseek_r+0x20>
 8018576:	6023      	str	r3, [r4, #0]
 8018578:	bd70      	pop	{r4, r5, r6, pc}
 801857a:	46c0      	nop			@ (mov r8, r8)
 801857c:	20004110 	.word	0x20004110

08018580 <_read_r>:
 8018580:	b570      	push	{r4, r5, r6, lr}
 8018582:	0004      	movs	r4, r0
 8018584:	0008      	movs	r0, r1
 8018586:	0011      	movs	r1, r2
 8018588:	001a      	movs	r2, r3
 801858a:	2300      	movs	r3, #0
 801858c:	4d05      	ldr	r5, [pc, #20]	@ (80185a4 <_read_r+0x24>)
 801858e:	602b      	str	r3, [r5, #0]
 8018590:	f7f0 fea9 	bl	80092e6 <_read>
 8018594:	1c43      	adds	r3, r0, #1
 8018596:	d103      	bne.n	80185a0 <_read_r+0x20>
 8018598:	682b      	ldr	r3, [r5, #0]
 801859a:	2b00      	cmp	r3, #0
 801859c:	d000      	beq.n	80185a0 <_read_r+0x20>
 801859e:	6023      	str	r3, [r4, #0]
 80185a0:	bd70      	pop	{r4, r5, r6, pc}
 80185a2:	46c0      	nop			@ (mov r8, r8)
 80185a4:	20004110 	.word	0x20004110

080185a8 <_write_r>:
 80185a8:	b570      	push	{r4, r5, r6, lr}
 80185aa:	0004      	movs	r4, r0
 80185ac:	0008      	movs	r0, r1
 80185ae:	0011      	movs	r1, r2
 80185b0:	001a      	movs	r2, r3
 80185b2:	2300      	movs	r3, #0
 80185b4:	4d05      	ldr	r5, [pc, #20]	@ (80185cc <_write_r+0x24>)
 80185b6:	602b      	str	r3, [r5, #0]
 80185b8:	f7f1 fb06 	bl	8009bc8 <_write>
 80185bc:	1c43      	adds	r3, r0, #1
 80185be:	d103      	bne.n	80185c8 <_write_r+0x20>
 80185c0:	682b      	ldr	r3, [r5, #0]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d000      	beq.n	80185c8 <_write_r+0x20>
 80185c6:	6023      	str	r3, [r4, #0]
 80185c8:	bd70      	pop	{r4, r5, r6, pc}
 80185ca:	46c0      	nop			@ (mov r8, r8)
 80185cc:	20004110 	.word	0x20004110

080185d0 <__errno>:
 80185d0:	4b01      	ldr	r3, [pc, #4]	@ (80185d8 <__errno+0x8>)
 80185d2:	6818      	ldr	r0, [r3, #0]
 80185d4:	4770      	bx	lr
 80185d6:	46c0      	nop			@ (mov r8, r8)
 80185d8:	200001f4 	.word	0x200001f4

080185dc <__libc_init_array>:
 80185dc:	b570      	push	{r4, r5, r6, lr}
 80185de:	2600      	movs	r6, #0
 80185e0:	4c0c      	ldr	r4, [pc, #48]	@ (8018614 <__libc_init_array+0x38>)
 80185e2:	4d0d      	ldr	r5, [pc, #52]	@ (8018618 <__libc_init_array+0x3c>)
 80185e4:	1b64      	subs	r4, r4, r5
 80185e6:	10a4      	asrs	r4, r4, #2
 80185e8:	42a6      	cmp	r6, r4
 80185ea:	d109      	bne.n	8018600 <__libc_init_array+0x24>
 80185ec:	2600      	movs	r6, #0
 80185ee:	f002 fe57 	bl	801b2a0 <_init>
 80185f2:	4c0a      	ldr	r4, [pc, #40]	@ (801861c <__libc_init_array+0x40>)
 80185f4:	4d0a      	ldr	r5, [pc, #40]	@ (8018620 <__libc_init_array+0x44>)
 80185f6:	1b64      	subs	r4, r4, r5
 80185f8:	10a4      	asrs	r4, r4, #2
 80185fa:	42a6      	cmp	r6, r4
 80185fc:	d105      	bne.n	801860a <__libc_init_array+0x2e>
 80185fe:	bd70      	pop	{r4, r5, r6, pc}
 8018600:	00b3      	lsls	r3, r6, #2
 8018602:	58eb      	ldr	r3, [r5, r3]
 8018604:	4798      	blx	r3
 8018606:	3601      	adds	r6, #1
 8018608:	e7ee      	b.n	80185e8 <__libc_init_array+0xc>
 801860a:	00b3      	lsls	r3, r6, #2
 801860c:	58eb      	ldr	r3, [r5, r3]
 801860e:	4798      	blx	r3
 8018610:	3601      	adds	r6, #1
 8018612:	e7f2      	b.n	80185fa <__libc_init_array+0x1e>
 8018614:	0801c548 	.word	0x0801c548
 8018618:	0801c548 	.word	0x0801c548
 801861c:	0801c54c 	.word	0x0801c54c
 8018620:	0801c548 	.word	0x0801c548

08018624 <__retarget_lock_init_recursive>:
 8018624:	4770      	bx	lr

08018626 <__retarget_lock_acquire_recursive>:
 8018626:	4770      	bx	lr

08018628 <__retarget_lock_release_recursive>:
 8018628:	4770      	bx	lr

0801862a <memchr>:
 801862a:	b2c9      	uxtb	r1, r1
 801862c:	1882      	adds	r2, r0, r2
 801862e:	4290      	cmp	r0, r2
 8018630:	d101      	bne.n	8018636 <memchr+0xc>
 8018632:	2000      	movs	r0, #0
 8018634:	4770      	bx	lr
 8018636:	7803      	ldrb	r3, [r0, #0]
 8018638:	428b      	cmp	r3, r1
 801863a:	d0fb      	beq.n	8018634 <memchr+0xa>
 801863c:	3001      	adds	r0, #1
 801863e:	e7f6      	b.n	801862e <memchr+0x4>

08018640 <memcpy>:
 8018640:	2300      	movs	r3, #0
 8018642:	b510      	push	{r4, lr}
 8018644:	429a      	cmp	r2, r3
 8018646:	d100      	bne.n	801864a <memcpy+0xa>
 8018648:	bd10      	pop	{r4, pc}
 801864a:	5ccc      	ldrb	r4, [r1, r3]
 801864c:	54c4      	strb	r4, [r0, r3]
 801864e:	3301      	adds	r3, #1
 8018650:	e7f8      	b.n	8018644 <memcpy+0x4>

08018652 <quorem>:
 8018652:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018654:	6902      	ldr	r2, [r0, #16]
 8018656:	690f      	ldr	r7, [r1, #16]
 8018658:	b087      	sub	sp, #28
 801865a:	0006      	movs	r6, r0
 801865c:	000b      	movs	r3, r1
 801865e:	2000      	movs	r0, #0
 8018660:	9102      	str	r1, [sp, #8]
 8018662:	42ba      	cmp	r2, r7
 8018664:	db6d      	blt.n	8018742 <quorem+0xf0>
 8018666:	3f01      	subs	r7, #1
 8018668:	00bc      	lsls	r4, r7, #2
 801866a:	3314      	adds	r3, #20
 801866c:	9305      	str	r3, [sp, #20]
 801866e:	191b      	adds	r3, r3, r4
 8018670:	9303      	str	r3, [sp, #12]
 8018672:	0033      	movs	r3, r6
 8018674:	3314      	adds	r3, #20
 8018676:	191c      	adds	r4, r3, r4
 8018678:	9301      	str	r3, [sp, #4]
 801867a:	6823      	ldr	r3, [r4, #0]
 801867c:	9304      	str	r3, [sp, #16]
 801867e:	9b03      	ldr	r3, [sp, #12]
 8018680:	9804      	ldr	r0, [sp, #16]
 8018682:	681d      	ldr	r5, [r3, #0]
 8018684:	3501      	adds	r5, #1
 8018686:	0029      	movs	r1, r5
 8018688:	f7e7 fd5a 	bl	8000140 <__udivsi3>
 801868c:	9b04      	ldr	r3, [sp, #16]
 801868e:	9000      	str	r0, [sp, #0]
 8018690:	42ab      	cmp	r3, r5
 8018692:	d32b      	bcc.n	80186ec <quorem+0x9a>
 8018694:	9b05      	ldr	r3, [sp, #20]
 8018696:	9d01      	ldr	r5, [sp, #4]
 8018698:	469c      	mov	ip, r3
 801869a:	2300      	movs	r3, #0
 801869c:	9305      	str	r3, [sp, #20]
 801869e:	9304      	str	r3, [sp, #16]
 80186a0:	4662      	mov	r2, ip
 80186a2:	ca08      	ldmia	r2!, {r3}
 80186a4:	6828      	ldr	r0, [r5, #0]
 80186a6:	4694      	mov	ip, r2
 80186a8:	9a00      	ldr	r2, [sp, #0]
 80186aa:	b299      	uxth	r1, r3
 80186ac:	4351      	muls	r1, r2
 80186ae:	9a05      	ldr	r2, [sp, #20]
 80186b0:	0c1b      	lsrs	r3, r3, #16
 80186b2:	1889      	adds	r1, r1, r2
 80186b4:	9a00      	ldr	r2, [sp, #0]
 80186b6:	4353      	muls	r3, r2
 80186b8:	0c0a      	lsrs	r2, r1, #16
 80186ba:	189b      	adds	r3, r3, r2
 80186bc:	0c1a      	lsrs	r2, r3, #16
 80186be:	b289      	uxth	r1, r1
 80186c0:	9205      	str	r2, [sp, #20]
 80186c2:	b282      	uxth	r2, r0
 80186c4:	1a52      	subs	r2, r2, r1
 80186c6:	9904      	ldr	r1, [sp, #16]
 80186c8:	0c00      	lsrs	r0, r0, #16
 80186ca:	1852      	adds	r2, r2, r1
 80186cc:	b29b      	uxth	r3, r3
 80186ce:	1411      	asrs	r1, r2, #16
 80186d0:	1ac3      	subs	r3, r0, r3
 80186d2:	185b      	adds	r3, r3, r1
 80186d4:	1419      	asrs	r1, r3, #16
 80186d6:	b292      	uxth	r2, r2
 80186d8:	041b      	lsls	r3, r3, #16
 80186da:	431a      	orrs	r2, r3
 80186dc:	9b03      	ldr	r3, [sp, #12]
 80186de:	9104      	str	r1, [sp, #16]
 80186e0:	c504      	stmia	r5!, {r2}
 80186e2:	4563      	cmp	r3, ip
 80186e4:	d2dc      	bcs.n	80186a0 <quorem+0x4e>
 80186e6:	6823      	ldr	r3, [r4, #0]
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d030      	beq.n	801874e <quorem+0xfc>
 80186ec:	0030      	movs	r0, r6
 80186ee:	9902      	ldr	r1, [sp, #8]
 80186f0:	f001 f9c6 	bl	8019a80 <__mcmp>
 80186f4:	2800      	cmp	r0, #0
 80186f6:	db23      	blt.n	8018740 <quorem+0xee>
 80186f8:	0034      	movs	r4, r6
 80186fa:	2500      	movs	r5, #0
 80186fc:	9902      	ldr	r1, [sp, #8]
 80186fe:	3414      	adds	r4, #20
 8018700:	3114      	adds	r1, #20
 8018702:	6823      	ldr	r3, [r4, #0]
 8018704:	c901      	ldmia	r1!, {r0}
 8018706:	9302      	str	r3, [sp, #8]
 8018708:	466b      	mov	r3, sp
 801870a:	891b      	ldrh	r3, [r3, #8]
 801870c:	b282      	uxth	r2, r0
 801870e:	1a9a      	subs	r2, r3, r2
 8018710:	9b02      	ldr	r3, [sp, #8]
 8018712:	1952      	adds	r2, r2, r5
 8018714:	0c00      	lsrs	r0, r0, #16
 8018716:	0c1b      	lsrs	r3, r3, #16
 8018718:	1a1b      	subs	r3, r3, r0
 801871a:	1410      	asrs	r0, r2, #16
 801871c:	181b      	adds	r3, r3, r0
 801871e:	141d      	asrs	r5, r3, #16
 8018720:	b292      	uxth	r2, r2
 8018722:	041b      	lsls	r3, r3, #16
 8018724:	431a      	orrs	r2, r3
 8018726:	9b03      	ldr	r3, [sp, #12]
 8018728:	c404      	stmia	r4!, {r2}
 801872a:	428b      	cmp	r3, r1
 801872c:	d2e9      	bcs.n	8018702 <quorem+0xb0>
 801872e:	9a01      	ldr	r2, [sp, #4]
 8018730:	00bb      	lsls	r3, r7, #2
 8018732:	18d3      	adds	r3, r2, r3
 8018734:	681a      	ldr	r2, [r3, #0]
 8018736:	2a00      	cmp	r2, #0
 8018738:	d013      	beq.n	8018762 <quorem+0x110>
 801873a:	9b00      	ldr	r3, [sp, #0]
 801873c:	3301      	adds	r3, #1
 801873e:	9300      	str	r3, [sp, #0]
 8018740:	9800      	ldr	r0, [sp, #0]
 8018742:	b007      	add	sp, #28
 8018744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018746:	6823      	ldr	r3, [r4, #0]
 8018748:	2b00      	cmp	r3, #0
 801874a:	d104      	bne.n	8018756 <quorem+0x104>
 801874c:	3f01      	subs	r7, #1
 801874e:	9b01      	ldr	r3, [sp, #4]
 8018750:	3c04      	subs	r4, #4
 8018752:	42a3      	cmp	r3, r4
 8018754:	d3f7      	bcc.n	8018746 <quorem+0xf4>
 8018756:	6137      	str	r7, [r6, #16]
 8018758:	e7c8      	b.n	80186ec <quorem+0x9a>
 801875a:	681a      	ldr	r2, [r3, #0]
 801875c:	2a00      	cmp	r2, #0
 801875e:	d104      	bne.n	801876a <quorem+0x118>
 8018760:	3f01      	subs	r7, #1
 8018762:	9a01      	ldr	r2, [sp, #4]
 8018764:	3b04      	subs	r3, #4
 8018766:	429a      	cmp	r2, r3
 8018768:	d3f7      	bcc.n	801875a <quorem+0x108>
 801876a:	6137      	str	r7, [r6, #16]
 801876c:	e7e5      	b.n	801873a <quorem+0xe8>
	...

08018770 <_dtoa_r>:
 8018770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018772:	0014      	movs	r4, r2
 8018774:	001d      	movs	r5, r3
 8018776:	69c6      	ldr	r6, [r0, #28]
 8018778:	b09d      	sub	sp, #116	@ 0x74
 801877a:	940a      	str	r4, [sp, #40]	@ 0x28
 801877c:	950b      	str	r5, [sp, #44]	@ 0x2c
 801877e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8018780:	9003      	str	r0, [sp, #12]
 8018782:	2e00      	cmp	r6, #0
 8018784:	d10f      	bne.n	80187a6 <_dtoa_r+0x36>
 8018786:	2010      	movs	r0, #16
 8018788:	f000 fe30 	bl	80193ec <malloc>
 801878c:	9b03      	ldr	r3, [sp, #12]
 801878e:	1e02      	subs	r2, r0, #0
 8018790:	61d8      	str	r0, [r3, #28]
 8018792:	d104      	bne.n	801879e <_dtoa_r+0x2e>
 8018794:	21ef      	movs	r1, #239	@ 0xef
 8018796:	4bc7      	ldr	r3, [pc, #796]	@ (8018ab4 <_dtoa_r+0x344>)
 8018798:	48c7      	ldr	r0, [pc, #796]	@ (8018ab8 <_dtoa_r+0x348>)
 801879a:	f001 fea1 	bl	801a4e0 <__assert_func>
 801879e:	6046      	str	r6, [r0, #4]
 80187a0:	6086      	str	r6, [r0, #8]
 80187a2:	6006      	str	r6, [r0, #0]
 80187a4:	60c6      	str	r6, [r0, #12]
 80187a6:	9b03      	ldr	r3, [sp, #12]
 80187a8:	69db      	ldr	r3, [r3, #28]
 80187aa:	6819      	ldr	r1, [r3, #0]
 80187ac:	2900      	cmp	r1, #0
 80187ae:	d00b      	beq.n	80187c8 <_dtoa_r+0x58>
 80187b0:	685a      	ldr	r2, [r3, #4]
 80187b2:	2301      	movs	r3, #1
 80187b4:	4093      	lsls	r3, r2
 80187b6:	604a      	str	r2, [r1, #4]
 80187b8:	608b      	str	r3, [r1, #8]
 80187ba:	9803      	ldr	r0, [sp, #12]
 80187bc:	f000 ff16 	bl	80195ec <_Bfree>
 80187c0:	2200      	movs	r2, #0
 80187c2:	9b03      	ldr	r3, [sp, #12]
 80187c4:	69db      	ldr	r3, [r3, #28]
 80187c6:	601a      	str	r2, [r3, #0]
 80187c8:	2d00      	cmp	r5, #0
 80187ca:	da1e      	bge.n	801880a <_dtoa_r+0x9a>
 80187cc:	2301      	movs	r3, #1
 80187ce:	603b      	str	r3, [r7, #0]
 80187d0:	006b      	lsls	r3, r5, #1
 80187d2:	085b      	lsrs	r3, r3, #1
 80187d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80187d6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80187d8:	4bb8      	ldr	r3, [pc, #736]	@ (8018abc <_dtoa_r+0x34c>)
 80187da:	4ab8      	ldr	r2, [pc, #736]	@ (8018abc <_dtoa_r+0x34c>)
 80187dc:	403b      	ands	r3, r7
 80187de:	4293      	cmp	r3, r2
 80187e0:	d116      	bne.n	8018810 <_dtoa_r+0xa0>
 80187e2:	4bb7      	ldr	r3, [pc, #732]	@ (8018ac0 <_dtoa_r+0x350>)
 80187e4:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80187e6:	6013      	str	r3, [r2, #0]
 80187e8:	033b      	lsls	r3, r7, #12
 80187ea:	0b1b      	lsrs	r3, r3, #12
 80187ec:	4323      	orrs	r3, r4
 80187ee:	d101      	bne.n	80187f4 <_dtoa_r+0x84>
 80187f0:	f000 fd83 	bl	80192fa <_dtoa_r+0xb8a>
 80187f4:	4bb3      	ldr	r3, [pc, #716]	@ (8018ac4 <_dtoa_r+0x354>)
 80187f6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80187f8:	9308      	str	r3, [sp, #32]
 80187fa:	2a00      	cmp	r2, #0
 80187fc:	d002      	beq.n	8018804 <_dtoa_r+0x94>
 80187fe:	4bb2      	ldr	r3, [pc, #712]	@ (8018ac8 <_dtoa_r+0x358>)
 8018800:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8018802:	6013      	str	r3, [r2, #0]
 8018804:	9808      	ldr	r0, [sp, #32]
 8018806:	b01d      	add	sp, #116	@ 0x74
 8018808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801880a:	2300      	movs	r3, #0
 801880c:	603b      	str	r3, [r7, #0]
 801880e:	e7e2      	b.n	80187d6 <_dtoa_r+0x66>
 8018810:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018812:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018814:	9212      	str	r2, [sp, #72]	@ 0x48
 8018816:	9313      	str	r3, [sp, #76]	@ 0x4c
 8018818:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801881a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801881c:	2200      	movs	r2, #0
 801881e:	2300      	movs	r3, #0
 8018820:	f7e7 fe14 	bl	800044c <__aeabi_dcmpeq>
 8018824:	1e06      	subs	r6, r0, #0
 8018826:	d00b      	beq.n	8018840 <_dtoa_r+0xd0>
 8018828:	2301      	movs	r3, #1
 801882a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801882c:	6013      	str	r3, [r2, #0]
 801882e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8018830:	2b00      	cmp	r3, #0
 8018832:	d002      	beq.n	801883a <_dtoa_r+0xca>
 8018834:	4ba5      	ldr	r3, [pc, #660]	@ (8018acc <_dtoa_r+0x35c>)
 8018836:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8018838:	6013      	str	r3, [r2, #0]
 801883a:	4ba5      	ldr	r3, [pc, #660]	@ (8018ad0 <_dtoa_r+0x360>)
 801883c:	9308      	str	r3, [sp, #32]
 801883e:	e7e1      	b.n	8018804 <_dtoa_r+0x94>
 8018840:	ab1a      	add	r3, sp, #104	@ 0x68
 8018842:	9301      	str	r3, [sp, #4]
 8018844:	ab1b      	add	r3, sp, #108	@ 0x6c
 8018846:	9300      	str	r3, [sp, #0]
 8018848:	9803      	ldr	r0, [sp, #12]
 801884a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801884c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801884e:	f001 f9cd 	bl	8019bec <__d2b>
 8018852:	007a      	lsls	r2, r7, #1
 8018854:	9005      	str	r0, [sp, #20]
 8018856:	0d52      	lsrs	r2, r2, #21
 8018858:	d100      	bne.n	801885c <_dtoa_r+0xec>
 801885a:	e07b      	b.n	8018954 <_dtoa_r+0x1e4>
 801885c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801885e:	9618      	str	r6, [sp, #96]	@ 0x60
 8018860:	0319      	lsls	r1, r3, #12
 8018862:	4b9c      	ldr	r3, [pc, #624]	@ (8018ad4 <_dtoa_r+0x364>)
 8018864:	0b09      	lsrs	r1, r1, #12
 8018866:	430b      	orrs	r3, r1
 8018868:	499b      	ldr	r1, [pc, #620]	@ (8018ad8 <_dtoa_r+0x368>)
 801886a:	1857      	adds	r7, r2, r1
 801886c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801886e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018870:	0019      	movs	r1, r3
 8018872:	2200      	movs	r2, #0
 8018874:	4b99      	ldr	r3, [pc, #612]	@ (8018adc <_dtoa_r+0x36c>)
 8018876:	f7ea f927 	bl	8002ac8 <__aeabi_dsub>
 801887a:	4a99      	ldr	r2, [pc, #612]	@ (8018ae0 <_dtoa_r+0x370>)
 801887c:	4b99      	ldr	r3, [pc, #612]	@ (8018ae4 <_dtoa_r+0x374>)
 801887e:	f7e9 fe5b 	bl	8002538 <__aeabi_dmul>
 8018882:	4a99      	ldr	r2, [pc, #612]	@ (8018ae8 <_dtoa_r+0x378>)
 8018884:	4b99      	ldr	r3, [pc, #612]	@ (8018aec <_dtoa_r+0x37c>)
 8018886:	f7e8 feaf 	bl	80015e8 <__aeabi_dadd>
 801888a:	0004      	movs	r4, r0
 801888c:	0038      	movs	r0, r7
 801888e:	000d      	movs	r5, r1
 8018890:	f7ea fd14 	bl	80032bc <__aeabi_i2d>
 8018894:	4a96      	ldr	r2, [pc, #600]	@ (8018af0 <_dtoa_r+0x380>)
 8018896:	4b97      	ldr	r3, [pc, #604]	@ (8018af4 <_dtoa_r+0x384>)
 8018898:	f7e9 fe4e 	bl	8002538 <__aeabi_dmul>
 801889c:	0002      	movs	r2, r0
 801889e:	000b      	movs	r3, r1
 80188a0:	0020      	movs	r0, r4
 80188a2:	0029      	movs	r1, r5
 80188a4:	f7e8 fea0 	bl	80015e8 <__aeabi_dadd>
 80188a8:	0004      	movs	r4, r0
 80188aa:	000d      	movs	r5, r1
 80188ac:	f7ea fcca 	bl	8003244 <__aeabi_d2iz>
 80188b0:	2200      	movs	r2, #0
 80188b2:	9004      	str	r0, [sp, #16]
 80188b4:	2300      	movs	r3, #0
 80188b6:	0020      	movs	r0, r4
 80188b8:	0029      	movs	r1, r5
 80188ba:	f7e7 fdcd 	bl	8000458 <__aeabi_dcmplt>
 80188be:	2800      	cmp	r0, #0
 80188c0:	d00b      	beq.n	80188da <_dtoa_r+0x16a>
 80188c2:	9804      	ldr	r0, [sp, #16]
 80188c4:	f7ea fcfa 	bl	80032bc <__aeabi_i2d>
 80188c8:	002b      	movs	r3, r5
 80188ca:	0022      	movs	r2, r4
 80188cc:	f7e7 fdbe 	bl	800044c <__aeabi_dcmpeq>
 80188d0:	4243      	negs	r3, r0
 80188d2:	4158      	adcs	r0, r3
 80188d4:	9b04      	ldr	r3, [sp, #16]
 80188d6:	1a1b      	subs	r3, r3, r0
 80188d8:	9304      	str	r3, [sp, #16]
 80188da:	2301      	movs	r3, #1
 80188dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80188de:	9b04      	ldr	r3, [sp, #16]
 80188e0:	2b16      	cmp	r3, #22
 80188e2:	d810      	bhi.n	8018906 <_dtoa_r+0x196>
 80188e4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80188e6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80188e8:	9a04      	ldr	r2, [sp, #16]
 80188ea:	4b83      	ldr	r3, [pc, #524]	@ (8018af8 <_dtoa_r+0x388>)
 80188ec:	00d2      	lsls	r2, r2, #3
 80188ee:	189b      	adds	r3, r3, r2
 80188f0:	681a      	ldr	r2, [r3, #0]
 80188f2:	685b      	ldr	r3, [r3, #4]
 80188f4:	f7e7 fdb0 	bl	8000458 <__aeabi_dcmplt>
 80188f8:	2800      	cmp	r0, #0
 80188fa:	d047      	beq.n	801898c <_dtoa_r+0x21c>
 80188fc:	9b04      	ldr	r3, [sp, #16]
 80188fe:	3b01      	subs	r3, #1
 8018900:	9304      	str	r3, [sp, #16]
 8018902:	2300      	movs	r3, #0
 8018904:	9315      	str	r3, [sp, #84]	@ 0x54
 8018906:	2200      	movs	r2, #0
 8018908:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801890a:	9206      	str	r2, [sp, #24]
 801890c:	1bdb      	subs	r3, r3, r7
 801890e:	1e5a      	subs	r2, r3, #1
 8018910:	d53e      	bpl.n	8018990 <_dtoa_r+0x220>
 8018912:	2201      	movs	r2, #1
 8018914:	1ad3      	subs	r3, r2, r3
 8018916:	9306      	str	r3, [sp, #24]
 8018918:	2300      	movs	r3, #0
 801891a:	930d      	str	r3, [sp, #52]	@ 0x34
 801891c:	9b04      	ldr	r3, [sp, #16]
 801891e:	2b00      	cmp	r3, #0
 8018920:	db38      	blt.n	8018994 <_dtoa_r+0x224>
 8018922:	9a04      	ldr	r2, [sp, #16]
 8018924:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018926:	4694      	mov	ip, r2
 8018928:	4463      	add	r3, ip
 801892a:	930d      	str	r3, [sp, #52]	@ 0x34
 801892c:	2300      	movs	r3, #0
 801892e:	9214      	str	r2, [sp, #80]	@ 0x50
 8018930:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018932:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018934:	2401      	movs	r4, #1
 8018936:	2b09      	cmp	r3, #9
 8018938:	d867      	bhi.n	8018a0a <_dtoa_r+0x29a>
 801893a:	2b05      	cmp	r3, #5
 801893c:	dd02      	ble.n	8018944 <_dtoa_r+0x1d4>
 801893e:	2400      	movs	r4, #0
 8018940:	3b04      	subs	r3, #4
 8018942:	9322      	str	r3, [sp, #136]	@ 0x88
 8018944:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018946:	1e98      	subs	r0, r3, #2
 8018948:	2803      	cmp	r0, #3
 801894a:	d867      	bhi.n	8018a1c <_dtoa_r+0x2ac>
 801894c:	f7e7 fbe4 	bl	8000118 <__gnu_thumb1_case_uqi>
 8018950:	5b383a2b 	.word	0x5b383a2b
 8018954:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8018956:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8018958:	18f6      	adds	r6, r6, r3
 801895a:	4b68      	ldr	r3, [pc, #416]	@ (8018afc <_dtoa_r+0x38c>)
 801895c:	18f2      	adds	r2, r6, r3
 801895e:	2a20      	cmp	r2, #32
 8018960:	dd0f      	ble.n	8018982 <_dtoa_r+0x212>
 8018962:	2340      	movs	r3, #64	@ 0x40
 8018964:	1a9b      	subs	r3, r3, r2
 8018966:	409f      	lsls	r7, r3
 8018968:	4b65      	ldr	r3, [pc, #404]	@ (8018b00 <_dtoa_r+0x390>)
 801896a:	0038      	movs	r0, r7
 801896c:	18f3      	adds	r3, r6, r3
 801896e:	40dc      	lsrs	r4, r3
 8018970:	4320      	orrs	r0, r4
 8018972:	f7ea fcd1 	bl	8003318 <__aeabi_ui2d>
 8018976:	2201      	movs	r2, #1
 8018978:	4b62      	ldr	r3, [pc, #392]	@ (8018b04 <_dtoa_r+0x394>)
 801897a:	1e77      	subs	r7, r6, #1
 801897c:	18cb      	adds	r3, r1, r3
 801897e:	9218      	str	r2, [sp, #96]	@ 0x60
 8018980:	e776      	b.n	8018870 <_dtoa_r+0x100>
 8018982:	2320      	movs	r3, #32
 8018984:	0020      	movs	r0, r4
 8018986:	1a9b      	subs	r3, r3, r2
 8018988:	4098      	lsls	r0, r3
 801898a:	e7f2      	b.n	8018972 <_dtoa_r+0x202>
 801898c:	9015      	str	r0, [sp, #84]	@ 0x54
 801898e:	e7ba      	b.n	8018906 <_dtoa_r+0x196>
 8018990:	920d      	str	r2, [sp, #52]	@ 0x34
 8018992:	e7c3      	b.n	801891c <_dtoa_r+0x1ac>
 8018994:	9b06      	ldr	r3, [sp, #24]
 8018996:	9a04      	ldr	r2, [sp, #16]
 8018998:	1a9b      	subs	r3, r3, r2
 801899a:	9306      	str	r3, [sp, #24]
 801899c:	4253      	negs	r3, r2
 801899e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80189a0:	2300      	movs	r3, #0
 80189a2:	9314      	str	r3, [sp, #80]	@ 0x50
 80189a4:	e7c5      	b.n	8018932 <_dtoa_r+0x1c2>
 80189a6:	2300      	movs	r3, #0
 80189a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80189aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80189ac:	930e      	str	r3, [sp, #56]	@ 0x38
 80189ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	dc13      	bgt.n	80189dc <_dtoa_r+0x26c>
 80189b4:	2301      	movs	r3, #1
 80189b6:	001a      	movs	r2, r3
 80189b8:	930e      	str	r3, [sp, #56]	@ 0x38
 80189ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80189bc:	9223      	str	r2, [sp, #140]	@ 0x8c
 80189be:	e00d      	b.n	80189dc <_dtoa_r+0x26c>
 80189c0:	2301      	movs	r3, #1
 80189c2:	e7f1      	b.n	80189a8 <_dtoa_r+0x238>
 80189c4:	2300      	movs	r3, #0
 80189c6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80189c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80189ca:	4694      	mov	ip, r2
 80189cc:	9b04      	ldr	r3, [sp, #16]
 80189ce:	4463      	add	r3, ip
 80189d0:	930e      	str	r3, [sp, #56]	@ 0x38
 80189d2:	3301      	adds	r3, #1
 80189d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	dc00      	bgt.n	80189dc <_dtoa_r+0x26c>
 80189da:	2301      	movs	r3, #1
 80189dc:	9a03      	ldr	r2, [sp, #12]
 80189de:	2100      	movs	r1, #0
 80189e0:	69d0      	ldr	r0, [r2, #28]
 80189e2:	2204      	movs	r2, #4
 80189e4:	0015      	movs	r5, r2
 80189e6:	3514      	adds	r5, #20
 80189e8:	429d      	cmp	r5, r3
 80189ea:	d91b      	bls.n	8018a24 <_dtoa_r+0x2b4>
 80189ec:	6041      	str	r1, [r0, #4]
 80189ee:	9803      	ldr	r0, [sp, #12]
 80189f0:	f000 fdb8 	bl	8019564 <_Balloc>
 80189f4:	9008      	str	r0, [sp, #32]
 80189f6:	2800      	cmp	r0, #0
 80189f8:	d117      	bne.n	8018a2a <_dtoa_r+0x2ba>
 80189fa:	21b0      	movs	r1, #176	@ 0xb0
 80189fc:	4b42      	ldr	r3, [pc, #264]	@ (8018b08 <_dtoa_r+0x398>)
 80189fe:	482e      	ldr	r0, [pc, #184]	@ (8018ab8 <_dtoa_r+0x348>)
 8018a00:	9a08      	ldr	r2, [sp, #32]
 8018a02:	31ff      	adds	r1, #255	@ 0xff
 8018a04:	e6c9      	b.n	801879a <_dtoa_r+0x2a>
 8018a06:	2301      	movs	r3, #1
 8018a08:	e7dd      	b.n	80189c6 <_dtoa_r+0x256>
 8018a0a:	2300      	movs	r3, #0
 8018a0c:	9410      	str	r4, [sp, #64]	@ 0x40
 8018a0e:	9322      	str	r3, [sp, #136]	@ 0x88
 8018a10:	3b01      	subs	r3, #1
 8018a12:	930e      	str	r3, [sp, #56]	@ 0x38
 8018a14:	9309      	str	r3, [sp, #36]	@ 0x24
 8018a16:	2200      	movs	r2, #0
 8018a18:	3313      	adds	r3, #19
 8018a1a:	e7cf      	b.n	80189bc <_dtoa_r+0x24c>
 8018a1c:	2301      	movs	r3, #1
 8018a1e:	9310      	str	r3, [sp, #64]	@ 0x40
 8018a20:	3b02      	subs	r3, #2
 8018a22:	e7f6      	b.n	8018a12 <_dtoa_r+0x2a2>
 8018a24:	3101      	adds	r1, #1
 8018a26:	0052      	lsls	r2, r2, #1
 8018a28:	e7dc      	b.n	80189e4 <_dtoa_r+0x274>
 8018a2a:	9b03      	ldr	r3, [sp, #12]
 8018a2c:	9a08      	ldr	r2, [sp, #32]
 8018a2e:	69db      	ldr	r3, [r3, #28]
 8018a30:	601a      	str	r2, [r3, #0]
 8018a32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018a34:	2b0e      	cmp	r3, #14
 8018a36:	d900      	bls.n	8018a3a <_dtoa_r+0x2ca>
 8018a38:	e0d9      	b.n	8018bee <_dtoa_r+0x47e>
 8018a3a:	2c00      	cmp	r4, #0
 8018a3c:	d100      	bne.n	8018a40 <_dtoa_r+0x2d0>
 8018a3e:	e0d6      	b.n	8018bee <_dtoa_r+0x47e>
 8018a40:	9b04      	ldr	r3, [sp, #16]
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	dd64      	ble.n	8018b10 <_dtoa_r+0x3a0>
 8018a46:	210f      	movs	r1, #15
 8018a48:	9a04      	ldr	r2, [sp, #16]
 8018a4a:	4b2b      	ldr	r3, [pc, #172]	@ (8018af8 <_dtoa_r+0x388>)
 8018a4c:	400a      	ands	r2, r1
 8018a4e:	00d2      	lsls	r2, r2, #3
 8018a50:	189b      	adds	r3, r3, r2
 8018a52:	681e      	ldr	r6, [r3, #0]
 8018a54:	685f      	ldr	r7, [r3, #4]
 8018a56:	9b04      	ldr	r3, [sp, #16]
 8018a58:	2402      	movs	r4, #2
 8018a5a:	111d      	asrs	r5, r3, #4
 8018a5c:	05db      	lsls	r3, r3, #23
 8018a5e:	d50a      	bpl.n	8018a76 <_dtoa_r+0x306>
 8018a60:	4b2a      	ldr	r3, [pc, #168]	@ (8018b0c <_dtoa_r+0x39c>)
 8018a62:	400d      	ands	r5, r1
 8018a64:	6a1a      	ldr	r2, [r3, #32]
 8018a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a68:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018a6a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018a6c:	f7e9 f920 	bl	8001cb0 <__aeabi_ddiv>
 8018a70:	900a      	str	r0, [sp, #40]	@ 0x28
 8018a72:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018a74:	3401      	adds	r4, #1
 8018a76:	4b25      	ldr	r3, [pc, #148]	@ (8018b0c <_dtoa_r+0x39c>)
 8018a78:	930c      	str	r3, [sp, #48]	@ 0x30
 8018a7a:	2d00      	cmp	r5, #0
 8018a7c:	d108      	bne.n	8018a90 <_dtoa_r+0x320>
 8018a7e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018a80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018a82:	0032      	movs	r2, r6
 8018a84:	003b      	movs	r3, r7
 8018a86:	f7e9 f913 	bl	8001cb0 <__aeabi_ddiv>
 8018a8a:	900a      	str	r0, [sp, #40]	@ 0x28
 8018a8c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018a8e:	e05a      	b.n	8018b46 <_dtoa_r+0x3d6>
 8018a90:	2301      	movs	r3, #1
 8018a92:	421d      	tst	r5, r3
 8018a94:	d009      	beq.n	8018aaa <_dtoa_r+0x33a>
 8018a96:	18e4      	adds	r4, r4, r3
 8018a98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018a9a:	0030      	movs	r0, r6
 8018a9c:	681a      	ldr	r2, [r3, #0]
 8018a9e:	685b      	ldr	r3, [r3, #4]
 8018aa0:	0039      	movs	r1, r7
 8018aa2:	f7e9 fd49 	bl	8002538 <__aeabi_dmul>
 8018aa6:	0006      	movs	r6, r0
 8018aa8:	000f      	movs	r7, r1
 8018aaa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018aac:	106d      	asrs	r5, r5, #1
 8018aae:	3308      	adds	r3, #8
 8018ab0:	e7e2      	b.n	8018a78 <_dtoa_r+0x308>
 8018ab2:	46c0      	nop			@ (mov r8, r8)
 8018ab4:	0801c1f9 	.word	0x0801c1f9
 8018ab8:	0801c210 	.word	0x0801c210
 8018abc:	7ff00000 	.word	0x7ff00000
 8018ac0:	0000270f 	.word	0x0000270f
 8018ac4:	0801c1f5 	.word	0x0801c1f5
 8018ac8:	0801c1f8 	.word	0x0801c1f8
 8018acc:	0801c1c9 	.word	0x0801c1c9
 8018ad0:	0801c1c8 	.word	0x0801c1c8
 8018ad4:	3ff00000 	.word	0x3ff00000
 8018ad8:	fffffc01 	.word	0xfffffc01
 8018adc:	3ff80000 	.word	0x3ff80000
 8018ae0:	636f4361 	.word	0x636f4361
 8018ae4:	3fd287a7 	.word	0x3fd287a7
 8018ae8:	8b60c8b3 	.word	0x8b60c8b3
 8018aec:	3fc68a28 	.word	0x3fc68a28
 8018af0:	509f79fb 	.word	0x509f79fb
 8018af4:	3fd34413 	.word	0x3fd34413
 8018af8:	0801c308 	.word	0x0801c308
 8018afc:	00000432 	.word	0x00000432
 8018b00:	00000412 	.word	0x00000412
 8018b04:	fe100000 	.word	0xfe100000
 8018b08:	0801c268 	.word	0x0801c268
 8018b0c:	0801c2e0 	.word	0x0801c2e0
 8018b10:	9b04      	ldr	r3, [sp, #16]
 8018b12:	2402      	movs	r4, #2
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d016      	beq.n	8018b46 <_dtoa_r+0x3d6>
 8018b18:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018b1a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018b1c:	220f      	movs	r2, #15
 8018b1e:	425d      	negs	r5, r3
 8018b20:	402a      	ands	r2, r5
 8018b22:	4bd7      	ldr	r3, [pc, #860]	@ (8018e80 <_dtoa_r+0x710>)
 8018b24:	00d2      	lsls	r2, r2, #3
 8018b26:	189b      	adds	r3, r3, r2
 8018b28:	681a      	ldr	r2, [r3, #0]
 8018b2a:	685b      	ldr	r3, [r3, #4]
 8018b2c:	f7e9 fd04 	bl	8002538 <__aeabi_dmul>
 8018b30:	2701      	movs	r7, #1
 8018b32:	2300      	movs	r3, #0
 8018b34:	900a      	str	r0, [sp, #40]	@ 0x28
 8018b36:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018b38:	4ed2      	ldr	r6, [pc, #840]	@ (8018e84 <_dtoa_r+0x714>)
 8018b3a:	112d      	asrs	r5, r5, #4
 8018b3c:	2d00      	cmp	r5, #0
 8018b3e:	d000      	beq.n	8018b42 <_dtoa_r+0x3d2>
 8018b40:	e0ba      	b.n	8018cb8 <_dtoa_r+0x548>
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	d1a1      	bne.n	8018a8a <_dtoa_r+0x31a>
 8018b46:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8018b48:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018b4a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	d100      	bne.n	8018b52 <_dtoa_r+0x3e2>
 8018b50:	e0bd      	b.n	8018cce <_dtoa_r+0x55e>
 8018b52:	2200      	movs	r2, #0
 8018b54:	0030      	movs	r0, r6
 8018b56:	0039      	movs	r1, r7
 8018b58:	4bcb      	ldr	r3, [pc, #812]	@ (8018e88 <_dtoa_r+0x718>)
 8018b5a:	f7e7 fc7d 	bl	8000458 <__aeabi_dcmplt>
 8018b5e:	2800      	cmp	r0, #0
 8018b60:	d100      	bne.n	8018b64 <_dtoa_r+0x3f4>
 8018b62:	e0b4      	b.n	8018cce <_dtoa_r+0x55e>
 8018b64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	d100      	bne.n	8018b6c <_dtoa_r+0x3fc>
 8018b6a:	e0b0      	b.n	8018cce <_dtoa_r+0x55e>
 8018b6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	dd39      	ble.n	8018be6 <_dtoa_r+0x476>
 8018b72:	9b04      	ldr	r3, [sp, #16]
 8018b74:	2200      	movs	r2, #0
 8018b76:	3b01      	subs	r3, #1
 8018b78:	930c      	str	r3, [sp, #48]	@ 0x30
 8018b7a:	0030      	movs	r0, r6
 8018b7c:	4bc3      	ldr	r3, [pc, #780]	@ (8018e8c <_dtoa_r+0x71c>)
 8018b7e:	0039      	movs	r1, r7
 8018b80:	f7e9 fcda 	bl	8002538 <__aeabi_dmul>
 8018b84:	900a      	str	r0, [sp, #40]	@ 0x28
 8018b86:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018b88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018b8a:	3401      	adds	r4, #1
 8018b8c:	0020      	movs	r0, r4
 8018b8e:	9311      	str	r3, [sp, #68]	@ 0x44
 8018b90:	f7ea fb94 	bl	80032bc <__aeabi_i2d>
 8018b94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018b96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018b98:	f7e9 fcce 	bl	8002538 <__aeabi_dmul>
 8018b9c:	4bbc      	ldr	r3, [pc, #752]	@ (8018e90 <_dtoa_r+0x720>)
 8018b9e:	2200      	movs	r2, #0
 8018ba0:	f7e8 fd22 	bl	80015e8 <__aeabi_dadd>
 8018ba4:	4bbb      	ldr	r3, [pc, #748]	@ (8018e94 <_dtoa_r+0x724>)
 8018ba6:	0006      	movs	r6, r0
 8018ba8:	18cf      	adds	r7, r1, r3
 8018baa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d000      	beq.n	8018bb2 <_dtoa_r+0x442>
 8018bb0:	e091      	b.n	8018cd6 <_dtoa_r+0x566>
 8018bb2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018bb4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018bb6:	2200      	movs	r2, #0
 8018bb8:	4bb7      	ldr	r3, [pc, #732]	@ (8018e98 <_dtoa_r+0x728>)
 8018bba:	f7e9 ff85 	bl	8002ac8 <__aeabi_dsub>
 8018bbe:	0032      	movs	r2, r6
 8018bc0:	003b      	movs	r3, r7
 8018bc2:	0004      	movs	r4, r0
 8018bc4:	000d      	movs	r5, r1
 8018bc6:	f7e7 fc5b 	bl	8000480 <__aeabi_dcmpgt>
 8018bca:	2800      	cmp	r0, #0
 8018bcc:	d000      	beq.n	8018bd0 <_dtoa_r+0x460>
 8018bce:	e29d      	b.n	801910c <_dtoa_r+0x99c>
 8018bd0:	2180      	movs	r1, #128	@ 0x80
 8018bd2:	0609      	lsls	r1, r1, #24
 8018bd4:	187b      	adds	r3, r7, r1
 8018bd6:	0032      	movs	r2, r6
 8018bd8:	0020      	movs	r0, r4
 8018bda:	0029      	movs	r1, r5
 8018bdc:	f7e7 fc3c 	bl	8000458 <__aeabi_dcmplt>
 8018be0:	2800      	cmp	r0, #0
 8018be2:	d000      	beq.n	8018be6 <_dtoa_r+0x476>
 8018be4:	e130      	b.n	8018e48 <_dtoa_r+0x6d8>
 8018be6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8018be8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8018bea:	930a      	str	r3, [sp, #40]	@ 0x28
 8018bec:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018bee:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	da00      	bge.n	8018bf6 <_dtoa_r+0x486>
 8018bf4:	e177      	b.n	8018ee6 <_dtoa_r+0x776>
 8018bf6:	9a04      	ldr	r2, [sp, #16]
 8018bf8:	2a0e      	cmp	r2, #14
 8018bfa:	dd00      	ble.n	8018bfe <_dtoa_r+0x48e>
 8018bfc:	e173      	b.n	8018ee6 <_dtoa_r+0x776>
 8018bfe:	4ba0      	ldr	r3, [pc, #640]	@ (8018e80 <_dtoa_r+0x710>)
 8018c00:	00d2      	lsls	r2, r2, #3
 8018c02:	189b      	adds	r3, r3, r2
 8018c04:	685c      	ldr	r4, [r3, #4]
 8018c06:	681b      	ldr	r3, [r3, #0]
 8018c08:	9306      	str	r3, [sp, #24]
 8018c0a:	9407      	str	r4, [sp, #28]
 8018c0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	da03      	bge.n	8018c1a <_dtoa_r+0x4aa>
 8018c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	dc00      	bgt.n	8018c1a <_dtoa_r+0x4aa>
 8018c18:	e106      	b.n	8018e28 <_dtoa_r+0x6b8>
 8018c1a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8018c1c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018c20:	9d08      	ldr	r5, [sp, #32]
 8018c22:	3b01      	subs	r3, #1
 8018c24:	195b      	adds	r3, r3, r5
 8018c26:	930a      	str	r3, [sp, #40]	@ 0x28
 8018c28:	9a06      	ldr	r2, [sp, #24]
 8018c2a:	9b07      	ldr	r3, [sp, #28]
 8018c2c:	0030      	movs	r0, r6
 8018c2e:	0039      	movs	r1, r7
 8018c30:	f7e9 f83e 	bl	8001cb0 <__aeabi_ddiv>
 8018c34:	f7ea fb06 	bl	8003244 <__aeabi_d2iz>
 8018c38:	9009      	str	r0, [sp, #36]	@ 0x24
 8018c3a:	f7ea fb3f 	bl	80032bc <__aeabi_i2d>
 8018c3e:	9a06      	ldr	r2, [sp, #24]
 8018c40:	9b07      	ldr	r3, [sp, #28]
 8018c42:	f7e9 fc79 	bl	8002538 <__aeabi_dmul>
 8018c46:	0002      	movs	r2, r0
 8018c48:	000b      	movs	r3, r1
 8018c4a:	0030      	movs	r0, r6
 8018c4c:	0039      	movs	r1, r7
 8018c4e:	f7e9 ff3b 	bl	8002ac8 <__aeabi_dsub>
 8018c52:	002b      	movs	r3, r5
 8018c54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018c56:	3501      	adds	r5, #1
 8018c58:	3230      	adds	r2, #48	@ 0x30
 8018c5a:	701a      	strb	r2, [r3, #0]
 8018c5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018c5e:	002c      	movs	r4, r5
 8018c60:	429a      	cmp	r2, r3
 8018c62:	d000      	beq.n	8018c66 <_dtoa_r+0x4f6>
 8018c64:	e131      	b.n	8018eca <_dtoa_r+0x75a>
 8018c66:	0002      	movs	r2, r0
 8018c68:	000b      	movs	r3, r1
 8018c6a:	f7e8 fcbd 	bl	80015e8 <__aeabi_dadd>
 8018c6e:	9a06      	ldr	r2, [sp, #24]
 8018c70:	9b07      	ldr	r3, [sp, #28]
 8018c72:	0006      	movs	r6, r0
 8018c74:	000f      	movs	r7, r1
 8018c76:	f7e7 fc03 	bl	8000480 <__aeabi_dcmpgt>
 8018c7a:	2800      	cmp	r0, #0
 8018c7c:	d000      	beq.n	8018c80 <_dtoa_r+0x510>
 8018c7e:	e10f      	b.n	8018ea0 <_dtoa_r+0x730>
 8018c80:	9a06      	ldr	r2, [sp, #24]
 8018c82:	9b07      	ldr	r3, [sp, #28]
 8018c84:	0030      	movs	r0, r6
 8018c86:	0039      	movs	r1, r7
 8018c88:	f7e7 fbe0 	bl	800044c <__aeabi_dcmpeq>
 8018c8c:	2800      	cmp	r0, #0
 8018c8e:	d003      	beq.n	8018c98 <_dtoa_r+0x528>
 8018c90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018c92:	07dd      	lsls	r5, r3, #31
 8018c94:	d500      	bpl.n	8018c98 <_dtoa_r+0x528>
 8018c96:	e103      	b.n	8018ea0 <_dtoa_r+0x730>
 8018c98:	9905      	ldr	r1, [sp, #20]
 8018c9a:	9803      	ldr	r0, [sp, #12]
 8018c9c:	f000 fca6 	bl	80195ec <_Bfree>
 8018ca0:	2300      	movs	r3, #0
 8018ca2:	7023      	strb	r3, [r4, #0]
 8018ca4:	9b04      	ldr	r3, [sp, #16]
 8018ca6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8018ca8:	3301      	adds	r3, #1
 8018caa:	6013      	str	r3, [r2, #0]
 8018cac:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d100      	bne.n	8018cb4 <_dtoa_r+0x544>
 8018cb2:	e5a7      	b.n	8018804 <_dtoa_r+0x94>
 8018cb4:	601c      	str	r4, [r3, #0]
 8018cb6:	e5a5      	b.n	8018804 <_dtoa_r+0x94>
 8018cb8:	423d      	tst	r5, r7
 8018cba:	d005      	beq.n	8018cc8 <_dtoa_r+0x558>
 8018cbc:	6832      	ldr	r2, [r6, #0]
 8018cbe:	6873      	ldr	r3, [r6, #4]
 8018cc0:	f7e9 fc3a 	bl	8002538 <__aeabi_dmul>
 8018cc4:	003b      	movs	r3, r7
 8018cc6:	3401      	adds	r4, #1
 8018cc8:	106d      	asrs	r5, r5, #1
 8018cca:	3608      	adds	r6, #8
 8018ccc:	e736      	b.n	8018b3c <_dtoa_r+0x3cc>
 8018cce:	9b04      	ldr	r3, [sp, #16]
 8018cd0:	930c      	str	r3, [sp, #48]	@ 0x30
 8018cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018cd4:	e75a      	b.n	8018b8c <_dtoa_r+0x41c>
 8018cd6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018cd8:	4b69      	ldr	r3, [pc, #420]	@ (8018e80 <_dtoa_r+0x710>)
 8018cda:	3a01      	subs	r2, #1
 8018cdc:	00d2      	lsls	r2, r2, #3
 8018cde:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8018ce0:	189b      	adds	r3, r3, r2
 8018ce2:	681a      	ldr	r2, [r3, #0]
 8018ce4:	685b      	ldr	r3, [r3, #4]
 8018ce6:	2900      	cmp	r1, #0
 8018ce8:	d04c      	beq.n	8018d84 <_dtoa_r+0x614>
 8018cea:	2000      	movs	r0, #0
 8018cec:	496b      	ldr	r1, [pc, #428]	@ (8018e9c <_dtoa_r+0x72c>)
 8018cee:	f7e8 ffdf 	bl	8001cb0 <__aeabi_ddiv>
 8018cf2:	0032      	movs	r2, r6
 8018cf4:	003b      	movs	r3, r7
 8018cf6:	f7e9 fee7 	bl	8002ac8 <__aeabi_dsub>
 8018cfa:	9a08      	ldr	r2, [sp, #32]
 8018cfc:	0006      	movs	r6, r0
 8018cfe:	4694      	mov	ip, r2
 8018d00:	000f      	movs	r7, r1
 8018d02:	9b08      	ldr	r3, [sp, #32]
 8018d04:	9316      	str	r3, [sp, #88]	@ 0x58
 8018d06:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018d08:	4463      	add	r3, ip
 8018d0a:	9311      	str	r3, [sp, #68]	@ 0x44
 8018d0c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018d0e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018d10:	f7ea fa98 	bl	8003244 <__aeabi_d2iz>
 8018d14:	0005      	movs	r5, r0
 8018d16:	f7ea fad1 	bl	80032bc <__aeabi_i2d>
 8018d1a:	0002      	movs	r2, r0
 8018d1c:	000b      	movs	r3, r1
 8018d1e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018d20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018d22:	f7e9 fed1 	bl	8002ac8 <__aeabi_dsub>
 8018d26:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8018d28:	3530      	adds	r5, #48	@ 0x30
 8018d2a:	1c5c      	adds	r4, r3, #1
 8018d2c:	701d      	strb	r5, [r3, #0]
 8018d2e:	0032      	movs	r2, r6
 8018d30:	003b      	movs	r3, r7
 8018d32:	900a      	str	r0, [sp, #40]	@ 0x28
 8018d34:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018d36:	f7e7 fb8f 	bl	8000458 <__aeabi_dcmplt>
 8018d3a:	2800      	cmp	r0, #0
 8018d3c:	d16a      	bne.n	8018e14 <_dtoa_r+0x6a4>
 8018d3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018d40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018d42:	2000      	movs	r0, #0
 8018d44:	4950      	ldr	r1, [pc, #320]	@ (8018e88 <_dtoa_r+0x718>)
 8018d46:	f7e9 febf 	bl	8002ac8 <__aeabi_dsub>
 8018d4a:	0032      	movs	r2, r6
 8018d4c:	003b      	movs	r3, r7
 8018d4e:	f7e7 fb83 	bl	8000458 <__aeabi_dcmplt>
 8018d52:	2800      	cmp	r0, #0
 8018d54:	d000      	beq.n	8018d58 <_dtoa_r+0x5e8>
 8018d56:	e0a5      	b.n	8018ea4 <_dtoa_r+0x734>
 8018d58:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018d5a:	42a3      	cmp	r3, r4
 8018d5c:	d100      	bne.n	8018d60 <_dtoa_r+0x5f0>
 8018d5e:	e742      	b.n	8018be6 <_dtoa_r+0x476>
 8018d60:	2200      	movs	r2, #0
 8018d62:	0030      	movs	r0, r6
 8018d64:	0039      	movs	r1, r7
 8018d66:	4b49      	ldr	r3, [pc, #292]	@ (8018e8c <_dtoa_r+0x71c>)
 8018d68:	f7e9 fbe6 	bl	8002538 <__aeabi_dmul>
 8018d6c:	2200      	movs	r2, #0
 8018d6e:	0006      	movs	r6, r0
 8018d70:	000f      	movs	r7, r1
 8018d72:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018d74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018d76:	4b45      	ldr	r3, [pc, #276]	@ (8018e8c <_dtoa_r+0x71c>)
 8018d78:	f7e9 fbde 	bl	8002538 <__aeabi_dmul>
 8018d7c:	9416      	str	r4, [sp, #88]	@ 0x58
 8018d7e:	900a      	str	r0, [sp, #40]	@ 0x28
 8018d80:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018d82:	e7c3      	b.n	8018d0c <_dtoa_r+0x59c>
 8018d84:	0030      	movs	r0, r6
 8018d86:	0039      	movs	r1, r7
 8018d88:	f7e9 fbd6 	bl	8002538 <__aeabi_dmul>
 8018d8c:	9d08      	ldr	r5, [sp, #32]
 8018d8e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018d90:	002b      	movs	r3, r5
 8018d92:	4694      	mov	ip, r2
 8018d94:	9016      	str	r0, [sp, #88]	@ 0x58
 8018d96:	9117      	str	r1, [sp, #92]	@ 0x5c
 8018d98:	4463      	add	r3, ip
 8018d9a:	9319      	str	r3, [sp, #100]	@ 0x64
 8018d9c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018d9e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018da0:	f7ea fa50 	bl	8003244 <__aeabi_d2iz>
 8018da4:	0004      	movs	r4, r0
 8018da6:	f7ea fa89 	bl	80032bc <__aeabi_i2d>
 8018daa:	000b      	movs	r3, r1
 8018dac:	0002      	movs	r2, r0
 8018dae:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018db0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018db2:	f7e9 fe89 	bl	8002ac8 <__aeabi_dsub>
 8018db6:	3430      	adds	r4, #48	@ 0x30
 8018db8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018dba:	702c      	strb	r4, [r5, #0]
 8018dbc:	3501      	adds	r5, #1
 8018dbe:	0006      	movs	r6, r0
 8018dc0:	000f      	movs	r7, r1
 8018dc2:	42ab      	cmp	r3, r5
 8018dc4:	d129      	bne.n	8018e1a <_dtoa_r+0x6aa>
 8018dc6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8018dc8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8018dca:	9b08      	ldr	r3, [sp, #32]
 8018dcc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8018dce:	469c      	mov	ip, r3
 8018dd0:	2200      	movs	r2, #0
 8018dd2:	4b32      	ldr	r3, [pc, #200]	@ (8018e9c <_dtoa_r+0x72c>)
 8018dd4:	4464      	add	r4, ip
 8018dd6:	f7e8 fc07 	bl	80015e8 <__aeabi_dadd>
 8018dda:	0002      	movs	r2, r0
 8018ddc:	000b      	movs	r3, r1
 8018dde:	0030      	movs	r0, r6
 8018de0:	0039      	movs	r1, r7
 8018de2:	f7e7 fb4d 	bl	8000480 <__aeabi_dcmpgt>
 8018de6:	2800      	cmp	r0, #0
 8018de8:	d15c      	bne.n	8018ea4 <_dtoa_r+0x734>
 8018dea:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8018dec:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8018dee:	2000      	movs	r0, #0
 8018df0:	492a      	ldr	r1, [pc, #168]	@ (8018e9c <_dtoa_r+0x72c>)
 8018df2:	f7e9 fe69 	bl	8002ac8 <__aeabi_dsub>
 8018df6:	0002      	movs	r2, r0
 8018df8:	000b      	movs	r3, r1
 8018dfa:	0030      	movs	r0, r6
 8018dfc:	0039      	movs	r1, r7
 8018dfe:	f7e7 fb2b 	bl	8000458 <__aeabi_dcmplt>
 8018e02:	2800      	cmp	r0, #0
 8018e04:	d100      	bne.n	8018e08 <_dtoa_r+0x698>
 8018e06:	e6ee      	b.n	8018be6 <_dtoa_r+0x476>
 8018e08:	0023      	movs	r3, r4
 8018e0a:	3c01      	subs	r4, #1
 8018e0c:	7822      	ldrb	r2, [r4, #0]
 8018e0e:	2a30      	cmp	r2, #48	@ 0x30
 8018e10:	d0fa      	beq.n	8018e08 <_dtoa_r+0x698>
 8018e12:	001c      	movs	r4, r3
 8018e14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018e16:	9304      	str	r3, [sp, #16]
 8018e18:	e73e      	b.n	8018c98 <_dtoa_r+0x528>
 8018e1a:	2200      	movs	r2, #0
 8018e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8018e8c <_dtoa_r+0x71c>)
 8018e1e:	f7e9 fb8b 	bl	8002538 <__aeabi_dmul>
 8018e22:	900a      	str	r0, [sp, #40]	@ 0x28
 8018e24:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018e26:	e7b9      	b.n	8018d9c <_dtoa_r+0x62c>
 8018e28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	d10c      	bne.n	8018e48 <_dtoa_r+0x6d8>
 8018e2e:	9806      	ldr	r0, [sp, #24]
 8018e30:	9907      	ldr	r1, [sp, #28]
 8018e32:	2200      	movs	r2, #0
 8018e34:	4b18      	ldr	r3, [pc, #96]	@ (8018e98 <_dtoa_r+0x728>)
 8018e36:	f7e9 fb7f 	bl	8002538 <__aeabi_dmul>
 8018e3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018e3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018e3e:	f7e7 fb29 	bl	8000494 <__aeabi_dcmpge>
 8018e42:	2800      	cmp	r0, #0
 8018e44:	d100      	bne.n	8018e48 <_dtoa_r+0x6d8>
 8018e46:	e164      	b.n	8019112 <_dtoa_r+0x9a2>
 8018e48:	2600      	movs	r6, #0
 8018e4a:	0037      	movs	r7, r6
 8018e4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018e4e:	9c08      	ldr	r4, [sp, #32]
 8018e50:	43db      	mvns	r3, r3
 8018e52:	930c      	str	r3, [sp, #48]	@ 0x30
 8018e54:	2300      	movs	r3, #0
 8018e56:	9304      	str	r3, [sp, #16]
 8018e58:	0031      	movs	r1, r6
 8018e5a:	9803      	ldr	r0, [sp, #12]
 8018e5c:	f000 fbc6 	bl	80195ec <_Bfree>
 8018e60:	2f00      	cmp	r7, #0
 8018e62:	d0d7      	beq.n	8018e14 <_dtoa_r+0x6a4>
 8018e64:	9b04      	ldr	r3, [sp, #16]
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d005      	beq.n	8018e76 <_dtoa_r+0x706>
 8018e6a:	42bb      	cmp	r3, r7
 8018e6c:	d003      	beq.n	8018e76 <_dtoa_r+0x706>
 8018e6e:	0019      	movs	r1, r3
 8018e70:	9803      	ldr	r0, [sp, #12]
 8018e72:	f000 fbbb 	bl	80195ec <_Bfree>
 8018e76:	0039      	movs	r1, r7
 8018e78:	9803      	ldr	r0, [sp, #12]
 8018e7a:	f000 fbb7 	bl	80195ec <_Bfree>
 8018e7e:	e7c9      	b.n	8018e14 <_dtoa_r+0x6a4>
 8018e80:	0801c308 	.word	0x0801c308
 8018e84:	0801c2e0 	.word	0x0801c2e0
 8018e88:	3ff00000 	.word	0x3ff00000
 8018e8c:	40240000 	.word	0x40240000
 8018e90:	401c0000 	.word	0x401c0000
 8018e94:	fcc00000 	.word	0xfcc00000
 8018e98:	40140000 	.word	0x40140000
 8018e9c:	3fe00000 	.word	0x3fe00000
 8018ea0:	9b04      	ldr	r3, [sp, #16]
 8018ea2:	930c      	str	r3, [sp, #48]	@ 0x30
 8018ea4:	0023      	movs	r3, r4
 8018ea6:	001c      	movs	r4, r3
 8018ea8:	3b01      	subs	r3, #1
 8018eaa:	781a      	ldrb	r2, [r3, #0]
 8018eac:	2a39      	cmp	r2, #57	@ 0x39
 8018eae:	d108      	bne.n	8018ec2 <_dtoa_r+0x752>
 8018eb0:	9a08      	ldr	r2, [sp, #32]
 8018eb2:	429a      	cmp	r2, r3
 8018eb4:	d1f7      	bne.n	8018ea6 <_dtoa_r+0x736>
 8018eb6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8018eb8:	9908      	ldr	r1, [sp, #32]
 8018eba:	3201      	adds	r2, #1
 8018ebc:	920c      	str	r2, [sp, #48]	@ 0x30
 8018ebe:	2230      	movs	r2, #48	@ 0x30
 8018ec0:	700a      	strb	r2, [r1, #0]
 8018ec2:	781a      	ldrb	r2, [r3, #0]
 8018ec4:	3201      	adds	r2, #1
 8018ec6:	701a      	strb	r2, [r3, #0]
 8018ec8:	e7a4      	b.n	8018e14 <_dtoa_r+0x6a4>
 8018eca:	2200      	movs	r2, #0
 8018ecc:	4bc6      	ldr	r3, [pc, #792]	@ (80191e8 <_dtoa_r+0xa78>)
 8018ece:	f7e9 fb33 	bl	8002538 <__aeabi_dmul>
 8018ed2:	2200      	movs	r2, #0
 8018ed4:	2300      	movs	r3, #0
 8018ed6:	0006      	movs	r6, r0
 8018ed8:	000f      	movs	r7, r1
 8018eda:	f7e7 fab7 	bl	800044c <__aeabi_dcmpeq>
 8018ede:	2800      	cmp	r0, #0
 8018ee0:	d100      	bne.n	8018ee4 <_dtoa_r+0x774>
 8018ee2:	e6a1      	b.n	8018c28 <_dtoa_r+0x4b8>
 8018ee4:	e6d8      	b.n	8018c98 <_dtoa_r+0x528>
 8018ee6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8018ee8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8018eea:	9c06      	ldr	r4, [sp, #24]
 8018eec:	2f00      	cmp	r7, #0
 8018eee:	d014      	beq.n	8018f1a <_dtoa_r+0x7aa>
 8018ef0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8018ef2:	2a01      	cmp	r2, #1
 8018ef4:	dd00      	ble.n	8018ef8 <_dtoa_r+0x788>
 8018ef6:	e0c8      	b.n	801908a <_dtoa_r+0x91a>
 8018ef8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018efa:	2a00      	cmp	r2, #0
 8018efc:	d100      	bne.n	8018f00 <_dtoa_r+0x790>
 8018efe:	e0be      	b.n	801907e <_dtoa_r+0x90e>
 8018f00:	4aba      	ldr	r2, [pc, #744]	@ (80191ec <_dtoa_r+0xa7c>)
 8018f02:	189b      	adds	r3, r3, r2
 8018f04:	9a06      	ldr	r2, [sp, #24]
 8018f06:	2101      	movs	r1, #1
 8018f08:	18d2      	adds	r2, r2, r3
 8018f0a:	9206      	str	r2, [sp, #24]
 8018f0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018f0e:	9803      	ldr	r0, [sp, #12]
 8018f10:	18d3      	adds	r3, r2, r3
 8018f12:	930d      	str	r3, [sp, #52]	@ 0x34
 8018f14:	f000 fc22 	bl	801975c <__i2b>
 8018f18:	0007      	movs	r7, r0
 8018f1a:	2c00      	cmp	r4, #0
 8018f1c:	d00e      	beq.n	8018f3c <_dtoa_r+0x7cc>
 8018f1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	dd0b      	ble.n	8018f3c <_dtoa_r+0x7cc>
 8018f24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018f26:	0023      	movs	r3, r4
 8018f28:	4294      	cmp	r4, r2
 8018f2a:	dd00      	ble.n	8018f2e <_dtoa_r+0x7be>
 8018f2c:	0013      	movs	r3, r2
 8018f2e:	9a06      	ldr	r2, [sp, #24]
 8018f30:	1ae4      	subs	r4, r4, r3
 8018f32:	1ad2      	subs	r2, r2, r3
 8018f34:	9206      	str	r2, [sp, #24]
 8018f36:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018f38:	1ad3      	subs	r3, r2, r3
 8018f3a:	930d      	str	r3, [sp, #52]	@ 0x34
 8018f3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d01f      	beq.n	8018f82 <_dtoa_r+0x812>
 8018f42:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	d100      	bne.n	8018f4a <_dtoa_r+0x7da>
 8018f48:	e0b5      	b.n	80190b6 <_dtoa_r+0x946>
 8018f4a:	2d00      	cmp	r5, #0
 8018f4c:	d010      	beq.n	8018f70 <_dtoa_r+0x800>
 8018f4e:	0039      	movs	r1, r7
 8018f50:	002a      	movs	r2, r5
 8018f52:	9803      	ldr	r0, [sp, #12]
 8018f54:	f000 fccc 	bl	80198f0 <__pow5mult>
 8018f58:	9a05      	ldr	r2, [sp, #20]
 8018f5a:	0001      	movs	r1, r0
 8018f5c:	0007      	movs	r7, r0
 8018f5e:	9803      	ldr	r0, [sp, #12]
 8018f60:	f000 fc14 	bl	801978c <__multiply>
 8018f64:	0006      	movs	r6, r0
 8018f66:	9905      	ldr	r1, [sp, #20]
 8018f68:	9803      	ldr	r0, [sp, #12]
 8018f6a:	f000 fb3f 	bl	80195ec <_Bfree>
 8018f6e:	9605      	str	r6, [sp, #20]
 8018f70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018f72:	1b5a      	subs	r2, r3, r5
 8018f74:	42ab      	cmp	r3, r5
 8018f76:	d004      	beq.n	8018f82 <_dtoa_r+0x812>
 8018f78:	9905      	ldr	r1, [sp, #20]
 8018f7a:	9803      	ldr	r0, [sp, #12]
 8018f7c:	f000 fcb8 	bl	80198f0 <__pow5mult>
 8018f80:	9005      	str	r0, [sp, #20]
 8018f82:	2101      	movs	r1, #1
 8018f84:	9803      	ldr	r0, [sp, #12]
 8018f86:	f000 fbe9 	bl	801975c <__i2b>
 8018f8a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018f8c:	0006      	movs	r6, r0
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	d100      	bne.n	8018f94 <_dtoa_r+0x824>
 8018f92:	e1bc      	b.n	801930e <_dtoa_r+0xb9e>
 8018f94:	001a      	movs	r2, r3
 8018f96:	0001      	movs	r1, r0
 8018f98:	9803      	ldr	r0, [sp, #12]
 8018f9a:	f000 fca9 	bl	80198f0 <__pow5mult>
 8018f9e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018fa0:	0006      	movs	r6, r0
 8018fa2:	2500      	movs	r5, #0
 8018fa4:	2b01      	cmp	r3, #1
 8018fa6:	dc16      	bgt.n	8018fd6 <_dtoa_r+0x866>
 8018fa8:	2500      	movs	r5, #0
 8018faa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018fac:	42ab      	cmp	r3, r5
 8018fae:	d10e      	bne.n	8018fce <_dtoa_r+0x85e>
 8018fb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018fb2:	031b      	lsls	r3, r3, #12
 8018fb4:	42ab      	cmp	r3, r5
 8018fb6:	d10a      	bne.n	8018fce <_dtoa_r+0x85e>
 8018fb8:	4b8d      	ldr	r3, [pc, #564]	@ (80191f0 <_dtoa_r+0xa80>)
 8018fba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018fbc:	4213      	tst	r3, r2
 8018fbe:	d006      	beq.n	8018fce <_dtoa_r+0x85e>
 8018fc0:	9b06      	ldr	r3, [sp, #24]
 8018fc2:	3501      	adds	r5, #1
 8018fc4:	3301      	adds	r3, #1
 8018fc6:	9306      	str	r3, [sp, #24]
 8018fc8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018fca:	3301      	adds	r3, #1
 8018fcc:	930d      	str	r3, [sp, #52]	@ 0x34
 8018fce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018fd0:	2001      	movs	r0, #1
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	d008      	beq.n	8018fe8 <_dtoa_r+0x878>
 8018fd6:	6933      	ldr	r3, [r6, #16]
 8018fd8:	3303      	adds	r3, #3
 8018fda:	009b      	lsls	r3, r3, #2
 8018fdc:	18f3      	adds	r3, r6, r3
 8018fde:	6858      	ldr	r0, [r3, #4]
 8018fe0:	f000 fb6c 	bl	80196bc <__hi0bits>
 8018fe4:	2320      	movs	r3, #32
 8018fe6:	1a18      	subs	r0, r3, r0
 8018fe8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018fea:	1818      	adds	r0, r3, r0
 8018fec:	0002      	movs	r2, r0
 8018fee:	231f      	movs	r3, #31
 8018ff0:	401a      	ands	r2, r3
 8018ff2:	4218      	tst	r0, r3
 8018ff4:	d065      	beq.n	80190c2 <_dtoa_r+0x952>
 8018ff6:	3301      	adds	r3, #1
 8018ff8:	1a9b      	subs	r3, r3, r2
 8018ffa:	2b04      	cmp	r3, #4
 8018ffc:	dd5d      	ble.n	80190ba <_dtoa_r+0x94a>
 8018ffe:	231c      	movs	r3, #28
 8019000:	1a9b      	subs	r3, r3, r2
 8019002:	9a06      	ldr	r2, [sp, #24]
 8019004:	18e4      	adds	r4, r4, r3
 8019006:	18d2      	adds	r2, r2, r3
 8019008:	9206      	str	r2, [sp, #24]
 801900a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801900c:	18d3      	adds	r3, r2, r3
 801900e:	930d      	str	r3, [sp, #52]	@ 0x34
 8019010:	9b06      	ldr	r3, [sp, #24]
 8019012:	2b00      	cmp	r3, #0
 8019014:	dd05      	ble.n	8019022 <_dtoa_r+0x8b2>
 8019016:	001a      	movs	r2, r3
 8019018:	9905      	ldr	r1, [sp, #20]
 801901a:	9803      	ldr	r0, [sp, #12]
 801901c:	f000 fcc4 	bl	80199a8 <__lshift>
 8019020:	9005      	str	r0, [sp, #20]
 8019022:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019024:	2b00      	cmp	r3, #0
 8019026:	dd05      	ble.n	8019034 <_dtoa_r+0x8c4>
 8019028:	0031      	movs	r1, r6
 801902a:	001a      	movs	r2, r3
 801902c:	9803      	ldr	r0, [sp, #12]
 801902e:	f000 fcbb 	bl	80199a8 <__lshift>
 8019032:	0006      	movs	r6, r0
 8019034:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019036:	2b00      	cmp	r3, #0
 8019038:	d045      	beq.n	80190c6 <_dtoa_r+0x956>
 801903a:	0031      	movs	r1, r6
 801903c:	9805      	ldr	r0, [sp, #20]
 801903e:	f000 fd1f 	bl	8019a80 <__mcmp>
 8019042:	2800      	cmp	r0, #0
 8019044:	da3f      	bge.n	80190c6 <_dtoa_r+0x956>
 8019046:	9b04      	ldr	r3, [sp, #16]
 8019048:	220a      	movs	r2, #10
 801904a:	3b01      	subs	r3, #1
 801904c:	930c      	str	r3, [sp, #48]	@ 0x30
 801904e:	9905      	ldr	r1, [sp, #20]
 8019050:	2300      	movs	r3, #0
 8019052:	9803      	ldr	r0, [sp, #12]
 8019054:	f000 faee 	bl	8019634 <__multadd>
 8019058:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801905a:	9005      	str	r0, [sp, #20]
 801905c:	2b00      	cmp	r3, #0
 801905e:	d100      	bne.n	8019062 <_dtoa_r+0x8f2>
 8019060:	e15c      	b.n	801931c <_dtoa_r+0xbac>
 8019062:	2300      	movs	r3, #0
 8019064:	0039      	movs	r1, r7
 8019066:	220a      	movs	r2, #10
 8019068:	9803      	ldr	r0, [sp, #12]
 801906a:	f000 fae3 	bl	8019634 <__multadd>
 801906e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019070:	0007      	movs	r7, r0
 8019072:	2b00      	cmp	r3, #0
 8019074:	dc55      	bgt.n	8019122 <_dtoa_r+0x9b2>
 8019076:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8019078:	2b02      	cmp	r3, #2
 801907a:	dc2d      	bgt.n	80190d8 <_dtoa_r+0x968>
 801907c:	e051      	b.n	8019122 <_dtoa_r+0x9b2>
 801907e:	2336      	movs	r3, #54	@ 0x36
 8019080:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8019082:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8019084:	9c06      	ldr	r4, [sp, #24]
 8019086:	1a9b      	subs	r3, r3, r2
 8019088:	e73c      	b.n	8018f04 <_dtoa_r+0x794>
 801908a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801908c:	1e5d      	subs	r5, r3, #1
 801908e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019090:	42ab      	cmp	r3, r5
 8019092:	db08      	blt.n	80190a6 <_dtoa_r+0x936>
 8019094:	1b5d      	subs	r5, r3, r5
 8019096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019098:	9c06      	ldr	r4, [sp, #24]
 801909a:	2b00      	cmp	r3, #0
 801909c:	db00      	blt.n	80190a0 <_dtoa_r+0x930>
 801909e:	e731      	b.n	8018f04 <_dtoa_r+0x794>
 80190a0:	1ae4      	subs	r4, r4, r3
 80190a2:	2300      	movs	r3, #0
 80190a4:	e72e      	b.n	8018f04 <_dtoa_r+0x794>
 80190a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80190a8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80190aa:	1aeb      	subs	r3, r5, r3
 80190ac:	18d3      	adds	r3, r2, r3
 80190ae:	950f      	str	r5, [sp, #60]	@ 0x3c
 80190b0:	9314      	str	r3, [sp, #80]	@ 0x50
 80190b2:	2500      	movs	r5, #0
 80190b4:	e7ef      	b.n	8019096 <_dtoa_r+0x926>
 80190b6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80190b8:	e75e      	b.n	8018f78 <_dtoa_r+0x808>
 80190ba:	2b04      	cmp	r3, #4
 80190bc:	d0a8      	beq.n	8019010 <_dtoa_r+0x8a0>
 80190be:	331c      	adds	r3, #28
 80190c0:	e79f      	b.n	8019002 <_dtoa_r+0x892>
 80190c2:	0013      	movs	r3, r2
 80190c4:	e7fb      	b.n	80190be <_dtoa_r+0x94e>
 80190c6:	9b04      	ldr	r3, [sp, #16]
 80190c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80190ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80190cc:	930e      	str	r3, [sp, #56]	@ 0x38
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	dc23      	bgt.n	801911a <_dtoa_r+0x9aa>
 80190d2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80190d4:	2b02      	cmp	r3, #2
 80190d6:	dd20      	ble.n	801911a <_dtoa_r+0x9aa>
 80190d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80190da:	2b00      	cmp	r3, #0
 80190dc:	d000      	beq.n	80190e0 <_dtoa_r+0x970>
 80190de:	e6b5      	b.n	8018e4c <_dtoa_r+0x6dc>
 80190e0:	0031      	movs	r1, r6
 80190e2:	2205      	movs	r2, #5
 80190e4:	9803      	ldr	r0, [sp, #12]
 80190e6:	f000 faa5 	bl	8019634 <__multadd>
 80190ea:	0006      	movs	r6, r0
 80190ec:	0001      	movs	r1, r0
 80190ee:	9805      	ldr	r0, [sp, #20]
 80190f0:	f000 fcc6 	bl	8019a80 <__mcmp>
 80190f4:	2800      	cmp	r0, #0
 80190f6:	dc00      	bgt.n	80190fa <_dtoa_r+0x98a>
 80190f8:	e6a8      	b.n	8018e4c <_dtoa_r+0x6dc>
 80190fa:	9b08      	ldr	r3, [sp, #32]
 80190fc:	9a08      	ldr	r2, [sp, #32]
 80190fe:	1c5c      	adds	r4, r3, #1
 8019100:	2331      	movs	r3, #49	@ 0x31
 8019102:	7013      	strb	r3, [r2, #0]
 8019104:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019106:	3301      	adds	r3, #1
 8019108:	930c      	str	r3, [sp, #48]	@ 0x30
 801910a:	e6a3      	b.n	8018e54 <_dtoa_r+0x6e4>
 801910c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801910e:	0037      	movs	r7, r6
 8019110:	e7f3      	b.n	80190fa <_dtoa_r+0x98a>
 8019112:	9b04      	ldr	r3, [sp, #16]
 8019114:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8019116:	930c      	str	r3, [sp, #48]	@ 0x30
 8019118:	e7f9      	b.n	801910e <_dtoa_r+0x99e>
 801911a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801911c:	2b00      	cmp	r3, #0
 801911e:	d100      	bne.n	8019122 <_dtoa_r+0x9b2>
 8019120:	e100      	b.n	8019324 <_dtoa_r+0xbb4>
 8019122:	2c00      	cmp	r4, #0
 8019124:	dd05      	ble.n	8019132 <_dtoa_r+0x9c2>
 8019126:	0039      	movs	r1, r7
 8019128:	0022      	movs	r2, r4
 801912a:	9803      	ldr	r0, [sp, #12]
 801912c:	f000 fc3c 	bl	80199a8 <__lshift>
 8019130:	0007      	movs	r7, r0
 8019132:	0038      	movs	r0, r7
 8019134:	2d00      	cmp	r5, #0
 8019136:	d018      	beq.n	801916a <_dtoa_r+0x9fa>
 8019138:	6879      	ldr	r1, [r7, #4]
 801913a:	9803      	ldr	r0, [sp, #12]
 801913c:	f000 fa12 	bl	8019564 <_Balloc>
 8019140:	1e04      	subs	r4, r0, #0
 8019142:	d105      	bne.n	8019150 <_dtoa_r+0x9e0>
 8019144:	0022      	movs	r2, r4
 8019146:	4b2b      	ldr	r3, [pc, #172]	@ (80191f4 <_dtoa_r+0xa84>)
 8019148:	482b      	ldr	r0, [pc, #172]	@ (80191f8 <_dtoa_r+0xa88>)
 801914a:	492c      	ldr	r1, [pc, #176]	@ (80191fc <_dtoa_r+0xa8c>)
 801914c:	f7ff fb25 	bl	801879a <_dtoa_r+0x2a>
 8019150:	0039      	movs	r1, r7
 8019152:	693a      	ldr	r2, [r7, #16]
 8019154:	310c      	adds	r1, #12
 8019156:	3202      	adds	r2, #2
 8019158:	0092      	lsls	r2, r2, #2
 801915a:	300c      	adds	r0, #12
 801915c:	f7ff fa70 	bl	8018640 <memcpy>
 8019160:	2201      	movs	r2, #1
 8019162:	0021      	movs	r1, r4
 8019164:	9803      	ldr	r0, [sp, #12]
 8019166:	f000 fc1f 	bl	80199a8 <__lshift>
 801916a:	9b08      	ldr	r3, [sp, #32]
 801916c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801916e:	9306      	str	r3, [sp, #24]
 8019170:	3b01      	subs	r3, #1
 8019172:	189b      	adds	r3, r3, r2
 8019174:	2201      	movs	r2, #1
 8019176:	9704      	str	r7, [sp, #16]
 8019178:	0007      	movs	r7, r0
 801917a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801917c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801917e:	4013      	ands	r3, r2
 8019180:	930e      	str	r3, [sp, #56]	@ 0x38
 8019182:	0031      	movs	r1, r6
 8019184:	9805      	ldr	r0, [sp, #20]
 8019186:	f7ff fa64 	bl	8018652 <quorem>
 801918a:	9904      	ldr	r1, [sp, #16]
 801918c:	0005      	movs	r5, r0
 801918e:	900a      	str	r0, [sp, #40]	@ 0x28
 8019190:	9805      	ldr	r0, [sp, #20]
 8019192:	f000 fc75 	bl	8019a80 <__mcmp>
 8019196:	003a      	movs	r2, r7
 8019198:	900d      	str	r0, [sp, #52]	@ 0x34
 801919a:	0031      	movs	r1, r6
 801919c:	9803      	ldr	r0, [sp, #12]
 801919e:	f000 fc8b 	bl	8019ab8 <__mdiff>
 80191a2:	2201      	movs	r2, #1
 80191a4:	68c3      	ldr	r3, [r0, #12]
 80191a6:	0004      	movs	r4, r0
 80191a8:	3530      	adds	r5, #48	@ 0x30
 80191aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	d104      	bne.n	80191ba <_dtoa_r+0xa4a>
 80191b0:	0001      	movs	r1, r0
 80191b2:	9805      	ldr	r0, [sp, #20]
 80191b4:	f000 fc64 	bl	8019a80 <__mcmp>
 80191b8:	9009      	str	r0, [sp, #36]	@ 0x24
 80191ba:	0021      	movs	r1, r4
 80191bc:	9803      	ldr	r0, [sp, #12]
 80191be:	f000 fa15 	bl	80195ec <_Bfree>
 80191c2:	9b06      	ldr	r3, [sp, #24]
 80191c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80191c6:	1c5c      	adds	r4, r3, #1
 80191c8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80191ca:	4313      	orrs	r3, r2
 80191cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80191ce:	4313      	orrs	r3, r2
 80191d0:	d116      	bne.n	8019200 <_dtoa_r+0xa90>
 80191d2:	2d39      	cmp	r5, #57	@ 0x39
 80191d4:	d02f      	beq.n	8019236 <_dtoa_r+0xac6>
 80191d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80191d8:	2b00      	cmp	r3, #0
 80191da:	dd01      	ble.n	80191e0 <_dtoa_r+0xa70>
 80191dc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80191de:	3531      	adds	r5, #49	@ 0x31
 80191e0:	9b06      	ldr	r3, [sp, #24]
 80191e2:	701d      	strb	r5, [r3, #0]
 80191e4:	e638      	b.n	8018e58 <_dtoa_r+0x6e8>
 80191e6:	46c0      	nop			@ (mov r8, r8)
 80191e8:	40240000 	.word	0x40240000
 80191ec:	00000433 	.word	0x00000433
 80191f0:	7ff00000 	.word	0x7ff00000
 80191f4:	0801c268 	.word	0x0801c268
 80191f8:	0801c210 	.word	0x0801c210
 80191fc:	000002ef 	.word	0x000002ef
 8019200:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019202:	2b00      	cmp	r3, #0
 8019204:	db04      	blt.n	8019210 <_dtoa_r+0xaa0>
 8019206:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8019208:	4313      	orrs	r3, r2
 801920a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801920c:	4313      	orrs	r3, r2
 801920e:	d11e      	bne.n	801924e <_dtoa_r+0xade>
 8019210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019212:	2b00      	cmp	r3, #0
 8019214:	dde4      	ble.n	80191e0 <_dtoa_r+0xa70>
 8019216:	9905      	ldr	r1, [sp, #20]
 8019218:	2201      	movs	r2, #1
 801921a:	9803      	ldr	r0, [sp, #12]
 801921c:	f000 fbc4 	bl	80199a8 <__lshift>
 8019220:	0031      	movs	r1, r6
 8019222:	9005      	str	r0, [sp, #20]
 8019224:	f000 fc2c 	bl	8019a80 <__mcmp>
 8019228:	2800      	cmp	r0, #0
 801922a:	dc02      	bgt.n	8019232 <_dtoa_r+0xac2>
 801922c:	d1d8      	bne.n	80191e0 <_dtoa_r+0xa70>
 801922e:	07eb      	lsls	r3, r5, #31
 8019230:	d5d6      	bpl.n	80191e0 <_dtoa_r+0xa70>
 8019232:	2d39      	cmp	r5, #57	@ 0x39
 8019234:	d1d2      	bne.n	80191dc <_dtoa_r+0xa6c>
 8019236:	2339      	movs	r3, #57	@ 0x39
 8019238:	9a06      	ldr	r2, [sp, #24]
 801923a:	7013      	strb	r3, [r2, #0]
 801923c:	0023      	movs	r3, r4
 801923e:	001c      	movs	r4, r3
 8019240:	3b01      	subs	r3, #1
 8019242:	781a      	ldrb	r2, [r3, #0]
 8019244:	2a39      	cmp	r2, #57	@ 0x39
 8019246:	d04f      	beq.n	80192e8 <_dtoa_r+0xb78>
 8019248:	3201      	adds	r2, #1
 801924a:	701a      	strb	r2, [r3, #0]
 801924c:	e604      	b.n	8018e58 <_dtoa_r+0x6e8>
 801924e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019250:	2b00      	cmp	r3, #0
 8019252:	dd03      	ble.n	801925c <_dtoa_r+0xaec>
 8019254:	2d39      	cmp	r5, #57	@ 0x39
 8019256:	d0ee      	beq.n	8019236 <_dtoa_r+0xac6>
 8019258:	3501      	adds	r5, #1
 801925a:	e7c1      	b.n	80191e0 <_dtoa_r+0xa70>
 801925c:	9b06      	ldr	r3, [sp, #24]
 801925e:	9a06      	ldr	r2, [sp, #24]
 8019260:	701d      	strb	r5, [r3, #0]
 8019262:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019264:	4293      	cmp	r3, r2
 8019266:	d02a      	beq.n	80192be <_dtoa_r+0xb4e>
 8019268:	2300      	movs	r3, #0
 801926a:	220a      	movs	r2, #10
 801926c:	9905      	ldr	r1, [sp, #20]
 801926e:	9803      	ldr	r0, [sp, #12]
 8019270:	f000 f9e0 	bl	8019634 <__multadd>
 8019274:	9b04      	ldr	r3, [sp, #16]
 8019276:	9005      	str	r0, [sp, #20]
 8019278:	42bb      	cmp	r3, r7
 801927a:	d109      	bne.n	8019290 <_dtoa_r+0xb20>
 801927c:	2300      	movs	r3, #0
 801927e:	220a      	movs	r2, #10
 8019280:	9904      	ldr	r1, [sp, #16]
 8019282:	9803      	ldr	r0, [sp, #12]
 8019284:	f000 f9d6 	bl	8019634 <__multadd>
 8019288:	9004      	str	r0, [sp, #16]
 801928a:	0007      	movs	r7, r0
 801928c:	9406      	str	r4, [sp, #24]
 801928e:	e778      	b.n	8019182 <_dtoa_r+0xa12>
 8019290:	9904      	ldr	r1, [sp, #16]
 8019292:	2300      	movs	r3, #0
 8019294:	220a      	movs	r2, #10
 8019296:	9803      	ldr	r0, [sp, #12]
 8019298:	f000 f9cc 	bl	8019634 <__multadd>
 801929c:	2300      	movs	r3, #0
 801929e:	9004      	str	r0, [sp, #16]
 80192a0:	220a      	movs	r2, #10
 80192a2:	0039      	movs	r1, r7
 80192a4:	9803      	ldr	r0, [sp, #12]
 80192a6:	f000 f9c5 	bl	8019634 <__multadd>
 80192aa:	e7ee      	b.n	801928a <_dtoa_r+0xb1a>
 80192ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80192ae:	2401      	movs	r4, #1
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	dd00      	ble.n	80192b6 <_dtoa_r+0xb46>
 80192b4:	001c      	movs	r4, r3
 80192b6:	9b08      	ldr	r3, [sp, #32]
 80192b8:	191c      	adds	r4, r3, r4
 80192ba:	2300      	movs	r3, #0
 80192bc:	9304      	str	r3, [sp, #16]
 80192be:	9905      	ldr	r1, [sp, #20]
 80192c0:	2201      	movs	r2, #1
 80192c2:	9803      	ldr	r0, [sp, #12]
 80192c4:	f000 fb70 	bl	80199a8 <__lshift>
 80192c8:	0031      	movs	r1, r6
 80192ca:	9005      	str	r0, [sp, #20]
 80192cc:	f000 fbd8 	bl	8019a80 <__mcmp>
 80192d0:	2800      	cmp	r0, #0
 80192d2:	dcb3      	bgt.n	801923c <_dtoa_r+0xacc>
 80192d4:	d101      	bne.n	80192da <_dtoa_r+0xb6a>
 80192d6:	07ed      	lsls	r5, r5, #31
 80192d8:	d4b0      	bmi.n	801923c <_dtoa_r+0xacc>
 80192da:	0023      	movs	r3, r4
 80192dc:	001c      	movs	r4, r3
 80192de:	3b01      	subs	r3, #1
 80192e0:	781a      	ldrb	r2, [r3, #0]
 80192e2:	2a30      	cmp	r2, #48	@ 0x30
 80192e4:	d0fa      	beq.n	80192dc <_dtoa_r+0xb6c>
 80192e6:	e5b7      	b.n	8018e58 <_dtoa_r+0x6e8>
 80192e8:	9a08      	ldr	r2, [sp, #32]
 80192ea:	429a      	cmp	r2, r3
 80192ec:	d1a7      	bne.n	801923e <_dtoa_r+0xace>
 80192ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80192f0:	3301      	adds	r3, #1
 80192f2:	930c      	str	r3, [sp, #48]	@ 0x30
 80192f4:	2331      	movs	r3, #49	@ 0x31
 80192f6:	7013      	strb	r3, [r2, #0]
 80192f8:	e5ae      	b.n	8018e58 <_dtoa_r+0x6e8>
 80192fa:	4b15      	ldr	r3, [pc, #84]	@ (8019350 <_dtoa_r+0xbe0>)
 80192fc:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80192fe:	9308      	str	r3, [sp, #32]
 8019300:	4b14      	ldr	r3, [pc, #80]	@ (8019354 <_dtoa_r+0xbe4>)
 8019302:	2a00      	cmp	r2, #0
 8019304:	d001      	beq.n	801930a <_dtoa_r+0xb9a>
 8019306:	f7ff fa7b 	bl	8018800 <_dtoa_r+0x90>
 801930a:	f7ff fa7b 	bl	8018804 <_dtoa_r+0x94>
 801930e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8019310:	2b01      	cmp	r3, #1
 8019312:	dc00      	bgt.n	8019316 <_dtoa_r+0xba6>
 8019314:	e648      	b.n	8018fa8 <_dtoa_r+0x838>
 8019316:	2001      	movs	r0, #1
 8019318:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801931a:	e665      	b.n	8018fe8 <_dtoa_r+0x878>
 801931c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801931e:	2b00      	cmp	r3, #0
 8019320:	dc00      	bgt.n	8019324 <_dtoa_r+0xbb4>
 8019322:	e6d6      	b.n	80190d2 <_dtoa_r+0x962>
 8019324:	2400      	movs	r4, #0
 8019326:	0031      	movs	r1, r6
 8019328:	9805      	ldr	r0, [sp, #20]
 801932a:	f7ff f992 	bl	8018652 <quorem>
 801932e:	9b08      	ldr	r3, [sp, #32]
 8019330:	3030      	adds	r0, #48	@ 0x30
 8019332:	5518      	strb	r0, [r3, r4]
 8019334:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019336:	3401      	adds	r4, #1
 8019338:	0005      	movs	r5, r0
 801933a:	429c      	cmp	r4, r3
 801933c:	dab6      	bge.n	80192ac <_dtoa_r+0xb3c>
 801933e:	2300      	movs	r3, #0
 8019340:	220a      	movs	r2, #10
 8019342:	9905      	ldr	r1, [sp, #20]
 8019344:	9803      	ldr	r0, [sp, #12]
 8019346:	f000 f975 	bl	8019634 <__multadd>
 801934a:	9005      	str	r0, [sp, #20]
 801934c:	e7eb      	b.n	8019326 <_dtoa_r+0xbb6>
 801934e:	46c0      	nop			@ (mov r8, r8)
 8019350:	0801c1ec 	.word	0x0801c1ec
 8019354:	0801c1f4 	.word	0x0801c1f4

08019358 <_free_r>:
 8019358:	b570      	push	{r4, r5, r6, lr}
 801935a:	0005      	movs	r5, r0
 801935c:	1e0c      	subs	r4, r1, #0
 801935e:	d010      	beq.n	8019382 <_free_r+0x2a>
 8019360:	3c04      	subs	r4, #4
 8019362:	6823      	ldr	r3, [r4, #0]
 8019364:	2b00      	cmp	r3, #0
 8019366:	da00      	bge.n	801936a <_free_r+0x12>
 8019368:	18e4      	adds	r4, r4, r3
 801936a:	0028      	movs	r0, r5
 801936c:	f000 f8ea 	bl	8019544 <__malloc_lock>
 8019370:	4a1d      	ldr	r2, [pc, #116]	@ (80193e8 <_free_r+0x90>)
 8019372:	6813      	ldr	r3, [r2, #0]
 8019374:	2b00      	cmp	r3, #0
 8019376:	d105      	bne.n	8019384 <_free_r+0x2c>
 8019378:	6063      	str	r3, [r4, #4]
 801937a:	6014      	str	r4, [r2, #0]
 801937c:	0028      	movs	r0, r5
 801937e:	f000 f8e9 	bl	8019554 <__malloc_unlock>
 8019382:	bd70      	pop	{r4, r5, r6, pc}
 8019384:	42a3      	cmp	r3, r4
 8019386:	d908      	bls.n	801939a <_free_r+0x42>
 8019388:	6820      	ldr	r0, [r4, #0]
 801938a:	1821      	adds	r1, r4, r0
 801938c:	428b      	cmp	r3, r1
 801938e:	d1f3      	bne.n	8019378 <_free_r+0x20>
 8019390:	6819      	ldr	r1, [r3, #0]
 8019392:	685b      	ldr	r3, [r3, #4]
 8019394:	1809      	adds	r1, r1, r0
 8019396:	6021      	str	r1, [r4, #0]
 8019398:	e7ee      	b.n	8019378 <_free_r+0x20>
 801939a:	001a      	movs	r2, r3
 801939c:	685b      	ldr	r3, [r3, #4]
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d001      	beq.n	80193a6 <_free_r+0x4e>
 80193a2:	42a3      	cmp	r3, r4
 80193a4:	d9f9      	bls.n	801939a <_free_r+0x42>
 80193a6:	6811      	ldr	r1, [r2, #0]
 80193a8:	1850      	adds	r0, r2, r1
 80193aa:	42a0      	cmp	r0, r4
 80193ac:	d10b      	bne.n	80193c6 <_free_r+0x6e>
 80193ae:	6820      	ldr	r0, [r4, #0]
 80193b0:	1809      	adds	r1, r1, r0
 80193b2:	1850      	adds	r0, r2, r1
 80193b4:	6011      	str	r1, [r2, #0]
 80193b6:	4283      	cmp	r3, r0
 80193b8:	d1e0      	bne.n	801937c <_free_r+0x24>
 80193ba:	6818      	ldr	r0, [r3, #0]
 80193bc:	685b      	ldr	r3, [r3, #4]
 80193be:	1841      	adds	r1, r0, r1
 80193c0:	6011      	str	r1, [r2, #0]
 80193c2:	6053      	str	r3, [r2, #4]
 80193c4:	e7da      	b.n	801937c <_free_r+0x24>
 80193c6:	42a0      	cmp	r0, r4
 80193c8:	d902      	bls.n	80193d0 <_free_r+0x78>
 80193ca:	230c      	movs	r3, #12
 80193cc:	602b      	str	r3, [r5, #0]
 80193ce:	e7d5      	b.n	801937c <_free_r+0x24>
 80193d0:	6820      	ldr	r0, [r4, #0]
 80193d2:	1821      	adds	r1, r4, r0
 80193d4:	428b      	cmp	r3, r1
 80193d6:	d103      	bne.n	80193e0 <_free_r+0x88>
 80193d8:	6819      	ldr	r1, [r3, #0]
 80193da:	685b      	ldr	r3, [r3, #4]
 80193dc:	1809      	adds	r1, r1, r0
 80193de:	6021      	str	r1, [r4, #0]
 80193e0:	6063      	str	r3, [r4, #4]
 80193e2:	6054      	str	r4, [r2, #4]
 80193e4:	e7ca      	b.n	801937c <_free_r+0x24>
 80193e6:	46c0      	nop			@ (mov r8, r8)
 80193e8:	2000411c 	.word	0x2000411c

080193ec <malloc>:
 80193ec:	b510      	push	{r4, lr}
 80193ee:	4b03      	ldr	r3, [pc, #12]	@ (80193fc <malloc+0x10>)
 80193f0:	0001      	movs	r1, r0
 80193f2:	6818      	ldr	r0, [r3, #0]
 80193f4:	f000 f826 	bl	8019444 <_malloc_r>
 80193f8:	bd10      	pop	{r4, pc}
 80193fa:	46c0      	nop			@ (mov r8, r8)
 80193fc:	200001f4 	.word	0x200001f4

08019400 <sbrk_aligned>:
 8019400:	b570      	push	{r4, r5, r6, lr}
 8019402:	4e0f      	ldr	r6, [pc, #60]	@ (8019440 <sbrk_aligned+0x40>)
 8019404:	000d      	movs	r5, r1
 8019406:	6831      	ldr	r1, [r6, #0]
 8019408:	0004      	movs	r4, r0
 801940a:	2900      	cmp	r1, #0
 801940c:	d102      	bne.n	8019414 <sbrk_aligned+0x14>
 801940e:	f001 f855 	bl	801a4bc <_sbrk_r>
 8019412:	6030      	str	r0, [r6, #0]
 8019414:	0029      	movs	r1, r5
 8019416:	0020      	movs	r0, r4
 8019418:	f001 f850 	bl	801a4bc <_sbrk_r>
 801941c:	1c43      	adds	r3, r0, #1
 801941e:	d103      	bne.n	8019428 <sbrk_aligned+0x28>
 8019420:	2501      	movs	r5, #1
 8019422:	426d      	negs	r5, r5
 8019424:	0028      	movs	r0, r5
 8019426:	bd70      	pop	{r4, r5, r6, pc}
 8019428:	2303      	movs	r3, #3
 801942a:	1cc5      	adds	r5, r0, #3
 801942c:	439d      	bics	r5, r3
 801942e:	42a8      	cmp	r0, r5
 8019430:	d0f8      	beq.n	8019424 <sbrk_aligned+0x24>
 8019432:	1a29      	subs	r1, r5, r0
 8019434:	0020      	movs	r0, r4
 8019436:	f001 f841 	bl	801a4bc <_sbrk_r>
 801943a:	3001      	adds	r0, #1
 801943c:	d1f2      	bne.n	8019424 <sbrk_aligned+0x24>
 801943e:	e7ef      	b.n	8019420 <sbrk_aligned+0x20>
 8019440:	20004118 	.word	0x20004118

08019444 <_malloc_r>:
 8019444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019446:	2203      	movs	r2, #3
 8019448:	1ccb      	adds	r3, r1, #3
 801944a:	4393      	bics	r3, r2
 801944c:	3308      	adds	r3, #8
 801944e:	0005      	movs	r5, r0
 8019450:	001f      	movs	r7, r3
 8019452:	2b0c      	cmp	r3, #12
 8019454:	d234      	bcs.n	80194c0 <_malloc_r+0x7c>
 8019456:	270c      	movs	r7, #12
 8019458:	42b9      	cmp	r1, r7
 801945a:	d833      	bhi.n	80194c4 <_malloc_r+0x80>
 801945c:	0028      	movs	r0, r5
 801945e:	f000 f871 	bl	8019544 <__malloc_lock>
 8019462:	4e37      	ldr	r6, [pc, #220]	@ (8019540 <_malloc_r+0xfc>)
 8019464:	6833      	ldr	r3, [r6, #0]
 8019466:	001c      	movs	r4, r3
 8019468:	2c00      	cmp	r4, #0
 801946a:	d12f      	bne.n	80194cc <_malloc_r+0x88>
 801946c:	0039      	movs	r1, r7
 801946e:	0028      	movs	r0, r5
 8019470:	f7ff ffc6 	bl	8019400 <sbrk_aligned>
 8019474:	0004      	movs	r4, r0
 8019476:	1c43      	adds	r3, r0, #1
 8019478:	d15f      	bne.n	801953a <_malloc_r+0xf6>
 801947a:	6834      	ldr	r4, [r6, #0]
 801947c:	9400      	str	r4, [sp, #0]
 801947e:	9b00      	ldr	r3, [sp, #0]
 8019480:	2b00      	cmp	r3, #0
 8019482:	d14a      	bne.n	801951a <_malloc_r+0xd6>
 8019484:	2c00      	cmp	r4, #0
 8019486:	d052      	beq.n	801952e <_malloc_r+0xea>
 8019488:	6823      	ldr	r3, [r4, #0]
 801948a:	0028      	movs	r0, r5
 801948c:	18e3      	adds	r3, r4, r3
 801948e:	9900      	ldr	r1, [sp, #0]
 8019490:	9301      	str	r3, [sp, #4]
 8019492:	f001 f813 	bl	801a4bc <_sbrk_r>
 8019496:	9b01      	ldr	r3, [sp, #4]
 8019498:	4283      	cmp	r3, r0
 801949a:	d148      	bne.n	801952e <_malloc_r+0xea>
 801949c:	6823      	ldr	r3, [r4, #0]
 801949e:	0028      	movs	r0, r5
 80194a0:	1aff      	subs	r7, r7, r3
 80194a2:	0039      	movs	r1, r7
 80194a4:	f7ff ffac 	bl	8019400 <sbrk_aligned>
 80194a8:	3001      	adds	r0, #1
 80194aa:	d040      	beq.n	801952e <_malloc_r+0xea>
 80194ac:	6823      	ldr	r3, [r4, #0]
 80194ae:	19db      	adds	r3, r3, r7
 80194b0:	6023      	str	r3, [r4, #0]
 80194b2:	6833      	ldr	r3, [r6, #0]
 80194b4:	685a      	ldr	r2, [r3, #4]
 80194b6:	2a00      	cmp	r2, #0
 80194b8:	d133      	bne.n	8019522 <_malloc_r+0xde>
 80194ba:	9b00      	ldr	r3, [sp, #0]
 80194bc:	6033      	str	r3, [r6, #0]
 80194be:	e019      	b.n	80194f4 <_malloc_r+0xb0>
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	dac9      	bge.n	8019458 <_malloc_r+0x14>
 80194c4:	230c      	movs	r3, #12
 80194c6:	602b      	str	r3, [r5, #0]
 80194c8:	2000      	movs	r0, #0
 80194ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80194cc:	6821      	ldr	r1, [r4, #0]
 80194ce:	1bc9      	subs	r1, r1, r7
 80194d0:	d420      	bmi.n	8019514 <_malloc_r+0xd0>
 80194d2:	290b      	cmp	r1, #11
 80194d4:	d90a      	bls.n	80194ec <_malloc_r+0xa8>
 80194d6:	19e2      	adds	r2, r4, r7
 80194d8:	6027      	str	r7, [r4, #0]
 80194da:	42a3      	cmp	r3, r4
 80194dc:	d104      	bne.n	80194e8 <_malloc_r+0xa4>
 80194de:	6032      	str	r2, [r6, #0]
 80194e0:	6863      	ldr	r3, [r4, #4]
 80194e2:	6011      	str	r1, [r2, #0]
 80194e4:	6053      	str	r3, [r2, #4]
 80194e6:	e005      	b.n	80194f4 <_malloc_r+0xb0>
 80194e8:	605a      	str	r2, [r3, #4]
 80194ea:	e7f9      	b.n	80194e0 <_malloc_r+0x9c>
 80194ec:	6862      	ldr	r2, [r4, #4]
 80194ee:	42a3      	cmp	r3, r4
 80194f0:	d10e      	bne.n	8019510 <_malloc_r+0xcc>
 80194f2:	6032      	str	r2, [r6, #0]
 80194f4:	0028      	movs	r0, r5
 80194f6:	f000 f82d 	bl	8019554 <__malloc_unlock>
 80194fa:	0020      	movs	r0, r4
 80194fc:	2207      	movs	r2, #7
 80194fe:	300b      	adds	r0, #11
 8019500:	1d23      	adds	r3, r4, #4
 8019502:	4390      	bics	r0, r2
 8019504:	1ac2      	subs	r2, r0, r3
 8019506:	4298      	cmp	r0, r3
 8019508:	d0df      	beq.n	80194ca <_malloc_r+0x86>
 801950a:	1a1b      	subs	r3, r3, r0
 801950c:	50a3      	str	r3, [r4, r2]
 801950e:	e7dc      	b.n	80194ca <_malloc_r+0x86>
 8019510:	605a      	str	r2, [r3, #4]
 8019512:	e7ef      	b.n	80194f4 <_malloc_r+0xb0>
 8019514:	0023      	movs	r3, r4
 8019516:	6864      	ldr	r4, [r4, #4]
 8019518:	e7a6      	b.n	8019468 <_malloc_r+0x24>
 801951a:	9c00      	ldr	r4, [sp, #0]
 801951c:	6863      	ldr	r3, [r4, #4]
 801951e:	9300      	str	r3, [sp, #0]
 8019520:	e7ad      	b.n	801947e <_malloc_r+0x3a>
 8019522:	001a      	movs	r2, r3
 8019524:	685b      	ldr	r3, [r3, #4]
 8019526:	42a3      	cmp	r3, r4
 8019528:	d1fb      	bne.n	8019522 <_malloc_r+0xde>
 801952a:	2300      	movs	r3, #0
 801952c:	e7da      	b.n	80194e4 <_malloc_r+0xa0>
 801952e:	230c      	movs	r3, #12
 8019530:	0028      	movs	r0, r5
 8019532:	602b      	str	r3, [r5, #0]
 8019534:	f000 f80e 	bl	8019554 <__malloc_unlock>
 8019538:	e7c6      	b.n	80194c8 <_malloc_r+0x84>
 801953a:	6007      	str	r7, [r0, #0]
 801953c:	e7da      	b.n	80194f4 <_malloc_r+0xb0>
 801953e:	46c0      	nop			@ (mov r8, r8)
 8019540:	2000411c 	.word	0x2000411c

08019544 <__malloc_lock>:
 8019544:	b510      	push	{r4, lr}
 8019546:	4802      	ldr	r0, [pc, #8]	@ (8019550 <__malloc_lock+0xc>)
 8019548:	f7ff f86d 	bl	8018626 <__retarget_lock_acquire_recursive>
 801954c:	bd10      	pop	{r4, pc}
 801954e:	46c0      	nop			@ (mov r8, r8)
 8019550:	20004114 	.word	0x20004114

08019554 <__malloc_unlock>:
 8019554:	b510      	push	{r4, lr}
 8019556:	4802      	ldr	r0, [pc, #8]	@ (8019560 <__malloc_unlock+0xc>)
 8019558:	f7ff f866 	bl	8018628 <__retarget_lock_release_recursive>
 801955c:	bd10      	pop	{r4, pc}
 801955e:	46c0      	nop			@ (mov r8, r8)
 8019560:	20004114 	.word	0x20004114

08019564 <_Balloc>:
 8019564:	b570      	push	{r4, r5, r6, lr}
 8019566:	69c5      	ldr	r5, [r0, #28]
 8019568:	0006      	movs	r6, r0
 801956a:	000c      	movs	r4, r1
 801956c:	2d00      	cmp	r5, #0
 801956e:	d10e      	bne.n	801958e <_Balloc+0x2a>
 8019570:	2010      	movs	r0, #16
 8019572:	f7ff ff3b 	bl	80193ec <malloc>
 8019576:	1e02      	subs	r2, r0, #0
 8019578:	61f0      	str	r0, [r6, #28]
 801957a:	d104      	bne.n	8019586 <_Balloc+0x22>
 801957c:	216b      	movs	r1, #107	@ 0x6b
 801957e:	4b19      	ldr	r3, [pc, #100]	@ (80195e4 <_Balloc+0x80>)
 8019580:	4819      	ldr	r0, [pc, #100]	@ (80195e8 <_Balloc+0x84>)
 8019582:	f000 ffad 	bl	801a4e0 <__assert_func>
 8019586:	6045      	str	r5, [r0, #4]
 8019588:	6085      	str	r5, [r0, #8]
 801958a:	6005      	str	r5, [r0, #0]
 801958c:	60c5      	str	r5, [r0, #12]
 801958e:	69f5      	ldr	r5, [r6, #28]
 8019590:	68eb      	ldr	r3, [r5, #12]
 8019592:	2b00      	cmp	r3, #0
 8019594:	d013      	beq.n	80195be <_Balloc+0x5a>
 8019596:	69f3      	ldr	r3, [r6, #28]
 8019598:	00a2      	lsls	r2, r4, #2
 801959a:	68db      	ldr	r3, [r3, #12]
 801959c:	189b      	adds	r3, r3, r2
 801959e:	6818      	ldr	r0, [r3, #0]
 80195a0:	2800      	cmp	r0, #0
 80195a2:	d118      	bne.n	80195d6 <_Balloc+0x72>
 80195a4:	2101      	movs	r1, #1
 80195a6:	000d      	movs	r5, r1
 80195a8:	40a5      	lsls	r5, r4
 80195aa:	1d6a      	adds	r2, r5, #5
 80195ac:	0030      	movs	r0, r6
 80195ae:	0092      	lsls	r2, r2, #2
 80195b0:	f000 ffb4 	bl	801a51c <_calloc_r>
 80195b4:	2800      	cmp	r0, #0
 80195b6:	d00c      	beq.n	80195d2 <_Balloc+0x6e>
 80195b8:	6044      	str	r4, [r0, #4]
 80195ba:	6085      	str	r5, [r0, #8]
 80195bc:	e00d      	b.n	80195da <_Balloc+0x76>
 80195be:	2221      	movs	r2, #33	@ 0x21
 80195c0:	2104      	movs	r1, #4
 80195c2:	0030      	movs	r0, r6
 80195c4:	f000 ffaa 	bl	801a51c <_calloc_r>
 80195c8:	69f3      	ldr	r3, [r6, #28]
 80195ca:	60e8      	str	r0, [r5, #12]
 80195cc:	68db      	ldr	r3, [r3, #12]
 80195ce:	2b00      	cmp	r3, #0
 80195d0:	d1e1      	bne.n	8019596 <_Balloc+0x32>
 80195d2:	2000      	movs	r0, #0
 80195d4:	bd70      	pop	{r4, r5, r6, pc}
 80195d6:	6802      	ldr	r2, [r0, #0]
 80195d8:	601a      	str	r2, [r3, #0]
 80195da:	2300      	movs	r3, #0
 80195dc:	6103      	str	r3, [r0, #16]
 80195de:	60c3      	str	r3, [r0, #12]
 80195e0:	e7f8      	b.n	80195d4 <_Balloc+0x70>
 80195e2:	46c0      	nop			@ (mov r8, r8)
 80195e4:	0801c1f9 	.word	0x0801c1f9
 80195e8:	0801c279 	.word	0x0801c279

080195ec <_Bfree>:
 80195ec:	b570      	push	{r4, r5, r6, lr}
 80195ee:	69c6      	ldr	r6, [r0, #28]
 80195f0:	0005      	movs	r5, r0
 80195f2:	000c      	movs	r4, r1
 80195f4:	2e00      	cmp	r6, #0
 80195f6:	d10e      	bne.n	8019616 <_Bfree+0x2a>
 80195f8:	2010      	movs	r0, #16
 80195fa:	f7ff fef7 	bl	80193ec <malloc>
 80195fe:	1e02      	subs	r2, r0, #0
 8019600:	61e8      	str	r0, [r5, #28]
 8019602:	d104      	bne.n	801960e <_Bfree+0x22>
 8019604:	218f      	movs	r1, #143	@ 0x8f
 8019606:	4b09      	ldr	r3, [pc, #36]	@ (801962c <_Bfree+0x40>)
 8019608:	4809      	ldr	r0, [pc, #36]	@ (8019630 <_Bfree+0x44>)
 801960a:	f000 ff69 	bl	801a4e0 <__assert_func>
 801960e:	6046      	str	r6, [r0, #4]
 8019610:	6086      	str	r6, [r0, #8]
 8019612:	6006      	str	r6, [r0, #0]
 8019614:	60c6      	str	r6, [r0, #12]
 8019616:	2c00      	cmp	r4, #0
 8019618:	d007      	beq.n	801962a <_Bfree+0x3e>
 801961a:	69eb      	ldr	r3, [r5, #28]
 801961c:	6862      	ldr	r2, [r4, #4]
 801961e:	68db      	ldr	r3, [r3, #12]
 8019620:	0092      	lsls	r2, r2, #2
 8019622:	189b      	adds	r3, r3, r2
 8019624:	681a      	ldr	r2, [r3, #0]
 8019626:	6022      	str	r2, [r4, #0]
 8019628:	601c      	str	r4, [r3, #0]
 801962a:	bd70      	pop	{r4, r5, r6, pc}
 801962c:	0801c1f9 	.word	0x0801c1f9
 8019630:	0801c279 	.word	0x0801c279

08019634 <__multadd>:
 8019634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019636:	000f      	movs	r7, r1
 8019638:	9001      	str	r0, [sp, #4]
 801963a:	000c      	movs	r4, r1
 801963c:	001e      	movs	r6, r3
 801963e:	2000      	movs	r0, #0
 8019640:	690d      	ldr	r5, [r1, #16]
 8019642:	3714      	adds	r7, #20
 8019644:	683b      	ldr	r3, [r7, #0]
 8019646:	3001      	adds	r0, #1
 8019648:	b299      	uxth	r1, r3
 801964a:	4351      	muls	r1, r2
 801964c:	0c1b      	lsrs	r3, r3, #16
 801964e:	4353      	muls	r3, r2
 8019650:	1989      	adds	r1, r1, r6
 8019652:	0c0e      	lsrs	r6, r1, #16
 8019654:	199b      	adds	r3, r3, r6
 8019656:	0c1e      	lsrs	r6, r3, #16
 8019658:	b289      	uxth	r1, r1
 801965a:	041b      	lsls	r3, r3, #16
 801965c:	185b      	adds	r3, r3, r1
 801965e:	c708      	stmia	r7!, {r3}
 8019660:	4285      	cmp	r5, r0
 8019662:	dcef      	bgt.n	8019644 <__multadd+0x10>
 8019664:	2e00      	cmp	r6, #0
 8019666:	d022      	beq.n	80196ae <__multadd+0x7a>
 8019668:	68a3      	ldr	r3, [r4, #8]
 801966a:	42ab      	cmp	r3, r5
 801966c:	dc19      	bgt.n	80196a2 <__multadd+0x6e>
 801966e:	6861      	ldr	r1, [r4, #4]
 8019670:	9801      	ldr	r0, [sp, #4]
 8019672:	3101      	adds	r1, #1
 8019674:	f7ff ff76 	bl	8019564 <_Balloc>
 8019678:	1e07      	subs	r7, r0, #0
 801967a:	d105      	bne.n	8019688 <__multadd+0x54>
 801967c:	003a      	movs	r2, r7
 801967e:	21ba      	movs	r1, #186	@ 0xba
 8019680:	4b0c      	ldr	r3, [pc, #48]	@ (80196b4 <__multadd+0x80>)
 8019682:	480d      	ldr	r0, [pc, #52]	@ (80196b8 <__multadd+0x84>)
 8019684:	f000 ff2c 	bl	801a4e0 <__assert_func>
 8019688:	0021      	movs	r1, r4
 801968a:	6922      	ldr	r2, [r4, #16]
 801968c:	310c      	adds	r1, #12
 801968e:	3202      	adds	r2, #2
 8019690:	0092      	lsls	r2, r2, #2
 8019692:	300c      	adds	r0, #12
 8019694:	f7fe ffd4 	bl	8018640 <memcpy>
 8019698:	0021      	movs	r1, r4
 801969a:	9801      	ldr	r0, [sp, #4]
 801969c:	f7ff ffa6 	bl	80195ec <_Bfree>
 80196a0:	003c      	movs	r4, r7
 80196a2:	1d2b      	adds	r3, r5, #4
 80196a4:	009b      	lsls	r3, r3, #2
 80196a6:	18e3      	adds	r3, r4, r3
 80196a8:	3501      	adds	r5, #1
 80196aa:	605e      	str	r6, [r3, #4]
 80196ac:	6125      	str	r5, [r4, #16]
 80196ae:	0020      	movs	r0, r4
 80196b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80196b2:	46c0      	nop			@ (mov r8, r8)
 80196b4:	0801c268 	.word	0x0801c268
 80196b8:	0801c279 	.word	0x0801c279

080196bc <__hi0bits>:
 80196bc:	2280      	movs	r2, #128	@ 0x80
 80196be:	0003      	movs	r3, r0
 80196c0:	0252      	lsls	r2, r2, #9
 80196c2:	2000      	movs	r0, #0
 80196c4:	4293      	cmp	r3, r2
 80196c6:	d201      	bcs.n	80196cc <__hi0bits+0x10>
 80196c8:	041b      	lsls	r3, r3, #16
 80196ca:	3010      	adds	r0, #16
 80196cc:	2280      	movs	r2, #128	@ 0x80
 80196ce:	0452      	lsls	r2, r2, #17
 80196d0:	4293      	cmp	r3, r2
 80196d2:	d201      	bcs.n	80196d8 <__hi0bits+0x1c>
 80196d4:	3008      	adds	r0, #8
 80196d6:	021b      	lsls	r3, r3, #8
 80196d8:	2280      	movs	r2, #128	@ 0x80
 80196da:	0552      	lsls	r2, r2, #21
 80196dc:	4293      	cmp	r3, r2
 80196de:	d201      	bcs.n	80196e4 <__hi0bits+0x28>
 80196e0:	3004      	adds	r0, #4
 80196e2:	011b      	lsls	r3, r3, #4
 80196e4:	2280      	movs	r2, #128	@ 0x80
 80196e6:	05d2      	lsls	r2, r2, #23
 80196e8:	4293      	cmp	r3, r2
 80196ea:	d201      	bcs.n	80196f0 <__hi0bits+0x34>
 80196ec:	3002      	adds	r0, #2
 80196ee:	009b      	lsls	r3, r3, #2
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	db03      	blt.n	80196fc <__hi0bits+0x40>
 80196f4:	3001      	adds	r0, #1
 80196f6:	4213      	tst	r3, r2
 80196f8:	d100      	bne.n	80196fc <__hi0bits+0x40>
 80196fa:	2020      	movs	r0, #32
 80196fc:	4770      	bx	lr

080196fe <__lo0bits>:
 80196fe:	6803      	ldr	r3, [r0, #0]
 8019700:	0001      	movs	r1, r0
 8019702:	2207      	movs	r2, #7
 8019704:	0018      	movs	r0, r3
 8019706:	4010      	ands	r0, r2
 8019708:	4213      	tst	r3, r2
 801970a:	d00d      	beq.n	8019728 <__lo0bits+0x2a>
 801970c:	3a06      	subs	r2, #6
 801970e:	2000      	movs	r0, #0
 8019710:	4213      	tst	r3, r2
 8019712:	d105      	bne.n	8019720 <__lo0bits+0x22>
 8019714:	3002      	adds	r0, #2
 8019716:	4203      	tst	r3, r0
 8019718:	d003      	beq.n	8019722 <__lo0bits+0x24>
 801971a:	40d3      	lsrs	r3, r2
 801971c:	0010      	movs	r0, r2
 801971e:	600b      	str	r3, [r1, #0]
 8019720:	4770      	bx	lr
 8019722:	089b      	lsrs	r3, r3, #2
 8019724:	600b      	str	r3, [r1, #0]
 8019726:	e7fb      	b.n	8019720 <__lo0bits+0x22>
 8019728:	b29a      	uxth	r2, r3
 801972a:	2a00      	cmp	r2, #0
 801972c:	d101      	bne.n	8019732 <__lo0bits+0x34>
 801972e:	2010      	movs	r0, #16
 8019730:	0c1b      	lsrs	r3, r3, #16
 8019732:	b2da      	uxtb	r2, r3
 8019734:	2a00      	cmp	r2, #0
 8019736:	d101      	bne.n	801973c <__lo0bits+0x3e>
 8019738:	3008      	adds	r0, #8
 801973a:	0a1b      	lsrs	r3, r3, #8
 801973c:	071a      	lsls	r2, r3, #28
 801973e:	d101      	bne.n	8019744 <__lo0bits+0x46>
 8019740:	3004      	adds	r0, #4
 8019742:	091b      	lsrs	r3, r3, #4
 8019744:	079a      	lsls	r2, r3, #30
 8019746:	d101      	bne.n	801974c <__lo0bits+0x4e>
 8019748:	3002      	adds	r0, #2
 801974a:	089b      	lsrs	r3, r3, #2
 801974c:	07da      	lsls	r2, r3, #31
 801974e:	d4e9      	bmi.n	8019724 <__lo0bits+0x26>
 8019750:	3001      	adds	r0, #1
 8019752:	085b      	lsrs	r3, r3, #1
 8019754:	d1e6      	bne.n	8019724 <__lo0bits+0x26>
 8019756:	2020      	movs	r0, #32
 8019758:	e7e2      	b.n	8019720 <__lo0bits+0x22>
	...

0801975c <__i2b>:
 801975c:	b510      	push	{r4, lr}
 801975e:	000c      	movs	r4, r1
 8019760:	2101      	movs	r1, #1
 8019762:	f7ff feff 	bl	8019564 <_Balloc>
 8019766:	2800      	cmp	r0, #0
 8019768:	d107      	bne.n	801977a <__i2b+0x1e>
 801976a:	2146      	movs	r1, #70	@ 0x46
 801976c:	4c05      	ldr	r4, [pc, #20]	@ (8019784 <__i2b+0x28>)
 801976e:	0002      	movs	r2, r0
 8019770:	4b05      	ldr	r3, [pc, #20]	@ (8019788 <__i2b+0x2c>)
 8019772:	0020      	movs	r0, r4
 8019774:	31ff      	adds	r1, #255	@ 0xff
 8019776:	f000 feb3 	bl	801a4e0 <__assert_func>
 801977a:	2301      	movs	r3, #1
 801977c:	6144      	str	r4, [r0, #20]
 801977e:	6103      	str	r3, [r0, #16]
 8019780:	bd10      	pop	{r4, pc}
 8019782:	46c0      	nop			@ (mov r8, r8)
 8019784:	0801c279 	.word	0x0801c279
 8019788:	0801c268 	.word	0x0801c268

0801978c <__multiply>:
 801978c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801978e:	0014      	movs	r4, r2
 8019790:	690a      	ldr	r2, [r1, #16]
 8019792:	6923      	ldr	r3, [r4, #16]
 8019794:	000d      	movs	r5, r1
 8019796:	b08b      	sub	sp, #44	@ 0x2c
 8019798:	429a      	cmp	r2, r3
 801979a:	db02      	blt.n	80197a2 <__multiply+0x16>
 801979c:	0023      	movs	r3, r4
 801979e:	000c      	movs	r4, r1
 80197a0:	001d      	movs	r5, r3
 80197a2:	6927      	ldr	r7, [r4, #16]
 80197a4:	692e      	ldr	r6, [r5, #16]
 80197a6:	6861      	ldr	r1, [r4, #4]
 80197a8:	19bb      	adds	r3, r7, r6
 80197aa:	9303      	str	r3, [sp, #12]
 80197ac:	68a3      	ldr	r3, [r4, #8]
 80197ae:	19ba      	adds	r2, r7, r6
 80197b0:	4293      	cmp	r3, r2
 80197b2:	da00      	bge.n	80197b6 <__multiply+0x2a>
 80197b4:	3101      	adds	r1, #1
 80197b6:	f7ff fed5 	bl	8019564 <_Balloc>
 80197ba:	9002      	str	r0, [sp, #8]
 80197bc:	2800      	cmp	r0, #0
 80197be:	d106      	bne.n	80197ce <__multiply+0x42>
 80197c0:	21b1      	movs	r1, #177	@ 0xb1
 80197c2:	4b49      	ldr	r3, [pc, #292]	@ (80198e8 <__multiply+0x15c>)
 80197c4:	4849      	ldr	r0, [pc, #292]	@ (80198ec <__multiply+0x160>)
 80197c6:	9a02      	ldr	r2, [sp, #8]
 80197c8:	0049      	lsls	r1, r1, #1
 80197ca:	f000 fe89 	bl	801a4e0 <__assert_func>
 80197ce:	9b02      	ldr	r3, [sp, #8]
 80197d0:	2200      	movs	r2, #0
 80197d2:	3314      	adds	r3, #20
 80197d4:	469c      	mov	ip, r3
 80197d6:	19bb      	adds	r3, r7, r6
 80197d8:	009b      	lsls	r3, r3, #2
 80197da:	4463      	add	r3, ip
 80197dc:	9304      	str	r3, [sp, #16]
 80197de:	4663      	mov	r3, ip
 80197e0:	9904      	ldr	r1, [sp, #16]
 80197e2:	428b      	cmp	r3, r1
 80197e4:	d32a      	bcc.n	801983c <__multiply+0xb0>
 80197e6:	0023      	movs	r3, r4
 80197e8:	00bf      	lsls	r7, r7, #2
 80197ea:	3314      	adds	r3, #20
 80197ec:	3514      	adds	r5, #20
 80197ee:	9308      	str	r3, [sp, #32]
 80197f0:	00b6      	lsls	r6, r6, #2
 80197f2:	19db      	adds	r3, r3, r7
 80197f4:	9305      	str	r3, [sp, #20]
 80197f6:	19ab      	adds	r3, r5, r6
 80197f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80197fa:	2304      	movs	r3, #4
 80197fc:	9306      	str	r3, [sp, #24]
 80197fe:	0023      	movs	r3, r4
 8019800:	9a05      	ldr	r2, [sp, #20]
 8019802:	3315      	adds	r3, #21
 8019804:	9501      	str	r5, [sp, #4]
 8019806:	429a      	cmp	r2, r3
 8019808:	d305      	bcc.n	8019816 <__multiply+0x8a>
 801980a:	1b13      	subs	r3, r2, r4
 801980c:	3b15      	subs	r3, #21
 801980e:	089b      	lsrs	r3, r3, #2
 8019810:	3301      	adds	r3, #1
 8019812:	009b      	lsls	r3, r3, #2
 8019814:	9306      	str	r3, [sp, #24]
 8019816:	9b01      	ldr	r3, [sp, #4]
 8019818:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801981a:	4293      	cmp	r3, r2
 801981c:	d310      	bcc.n	8019840 <__multiply+0xb4>
 801981e:	9b03      	ldr	r3, [sp, #12]
 8019820:	2b00      	cmp	r3, #0
 8019822:	dd05      	ble.n	8019830 <__multiply+0xa4>
 8019824:	9b04      	ldr	r3, [sp, #16]
 8019826:	3b04      	subs	r3, #4
 8019828:	9304      	str	r3, [sp, #16]
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	2b00      	cmp	r3, #0
 801982e:	d056      	beq.n	80198de <__multiply+0x152>
 8019830:	9b02      	ldr	r3, [sp, #8]
 8019832:	9a03      	ldr	r2, [sp, #12]
 8019834:	0018      	movs	r0, r3
 8019836:	611a      	str	r2, [r3, #16]
 8019838:	b00b      	add	sp, #44	@ 0x2c
 801983a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801983c:	c304      	stmia	r3!, {r2}
 801983e:	e7cf      	b.n	80197e0 <__multiply+0x54>
 8019840:	9b01      	ldr	r3, [sp, #4]
 8019842:	6818      	ldr	r0, [r3, #0]
 8019844:	b280      	uxth	r0, r0
 8019846:	2800      	cmp	r0, #0
 8019848:	d01e      	beq.n	8019888 <__multiply+0xfc>
 801984a:	4667      	mov	r7, ip
 801984c:	2500      	movs	r5, #0
 801984e:	9e08      	ldr	r6, [sp, #32]
 8019850:	ce02      	ldmia	r6!, {r1}
 8019852:	683b      	ldr	r3, [r7, #0]
 8019854:	9307      	str	r3, [sp, #28]
 8019856:	b28b      	uxth	r3, r1
 8019858:	4343      	muls	r3, r0
 801985a:	001a      	movs	r2, r3
 801985c:	466b      	mov	r3, sp
 801985e:	0c09      	lsrs	r1, r1, #16
 8019860:	8b9b      	ldrh	r3, [r3, #28]
 8019862:	4341      	muls	r1, r0
 8019864:	18d3      	adds	r3, r2, r3
 8019866:	9a07      	ldr	r2, [sp, #28]
 8019868:	195b      	adds	r3, r3, r5
 801986a:	0c12      	lsrs	r2, r2, #16
 801986c:	1889      	adds	r1, r1, r2
 801986e:	0c1a      	lsrs	r2, r3, #16
 8019870:	188a      	adds	r2, r1, r2
 8019872:	b29b      	uxth	r3, r3
 8019874:	0c15      	lsrs	r5, r2, #16
 8019876:	0412      	lsls	r2, r2, #16
 8019878:	431a      	orrs	r2, r3
 801987a:	9b05      	ldr	r3, [sp, #20]
 801987c:	c704      	stmia	r7!, {r2}
 801987e:	42b3      	cmp	r3, r6
 8019880:	d8e6      	bhi.n	8019850 <__multiply+0xc4>
 8019882:	4663      	mov	r3, ip
 8019884:	9a06      	ldr	r2, [sp, #24]
 8019886:	509d      	str	r5, [r3, r2]
 8019888:	9b01      	ldr	r3, [sp, #4]
 801988a:	6818      	ldr	r0, [r3, #0]
 801988c:	0c00      	lsrs	r0, r0, #16
 801988e:	d020      	beq.n	80198d2 <__multiply+0x146>
 8019890:	4663      	mov	r3, ip
 8019892:	0025      	movs	r5, r4
 8019894:	4661      	mov	r1, ip
 8019896:	2700      	movs	r7, #0
 8019898:	681b      	ldr	r3, [r3, #0]
 801989a:	3514      	adds	r5, #20
 801989c:	682a      	ldr	r2, [r5, #0]
 801989e:	680e      	ldr	r6, [r1, #0]
 80198a0:	b292      	uxth	r2, r2
 80198a2:	4342      	muls	r2, r0
 80198a4:	0c36      	lsrs	r6, r6, #16
 80198a6:	1992      	adds	r2, r2, r6
 80198a8:	19d2      	adds	r2, r2, r7
 80198aa:	0416      	lsls	r6, r2, #16
 80198ac:	b29b      	uxth	r3, r3
 80198ae:	431e      	orrs	r6, r3
 80198b0:	600e      	str	r6, [r1, #0]
 80198b2:	cd40      	ldmia	r5!, {r6}
 80198b4:	684b      	ldr	r3, [r1, #4]
 80198b6:	0c36      	lsrs	r6, r6, #16
 80198b8:	4346      	muls	r6, r0
 80198ba:	b29b      	uxth	r3, r3
 80198bc:	0c12      	lsrs	r2, r2, #16
 80198be:	18f3      	adds	r3, r6, r3
 80198c0:	189b      	adds	r3, r3, r2
 80198c2:	9a05      	ldr	r2, [sp, #20]
 80198c4:	0c1f      	lsrs	r7, r3, #16
 80198c6:	3104      	adds	r1, #4
 80198c8:	42aa      	cmp	r2, r5
 80198ca:	d8e7      	bhi.n	801989c <__multiply+0x110>
 80198cc:	4662      	mov	r2, ip
 80198ce:	9906      	ldr	r1, [sp, #24]
 80198d0:	5053      	str	r3, [r2, r1]
 80198d2:	9b01      	ldr	r3, [sp, #4]
 80198d4:	3304      	adds	r3, #4
 80198d6:	9301      	str	r3, [sp, #4]
 80198d8:	2304      	movs	r3, #4
 80198da:	449c      	add	ip, r3
 80198dc:	e79b      	b.n	8019816 <__multiply+0x8a>
 80198de:	9b03      	ldr	r3, [sp, #12]
 80198e0:	3b01      	subs	r3, #1
 80198e2:	9303      	str	r3, [sp, #12]
 80198e4:	e79b      	b.n	801981e <__multiply+0x92>
 80198e6:	46c0      	nop			@ (mov r8, r8)
 80198e8:	0801c268 	.word	0x0801c268
 80198ec:	0801c279 	.word	0x0801c279

080198f0 <__pow5mult>:
 80198f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80198f2:	2303      	movs	r3, #3
 80198f4:	0015      	movs	r5, r2
 80198f6:	0007      	movs	r7, r0
 80198f8:	000e      	movs	r6, r1
 80198fa:	401a      	ands	r2, r3
 80198fc:	421d      	tst	r5, r3
 80198fe:	d008      	beq.n	8019912 <__pow5mult+0x22>
 8019900:	4925      	ldr	r1, [pc, #148]	@ (8019998 <__pow5mult+0xa8>)
 8019902:	3a01      	subs	r2, #1
 8019904:	0092      	lsls	r2, r2, #2
 8019906:	5852      	ldr	r2, [r2, r1]
 8019908:	2300      	movs	r3, #0
 801990a:	0031      	movs	r1, r6
 801990c:	f7ff fe92 	bl	8019634 <__multadd>
 8019910:	0006      	movs	r6, r0
 8019912:	10ad      	asrs	r5, r5, #2
 8019914:	d03d      	beq.n	8019992 <__pow5mult+0xa2>
 8019916:	69fc      	ldr	r4, [r7, #28]
 8019918:	2c00      	cmp	r4, #0
 801991a:	d10f      	bne.n	801993c <__pow5mult+0x4c>
 801991c:	2010      	movs	r0, #16
 801991e:	f7ff fd65 	bl	80193ec <malloc>
 8019922:	1e02      	subs	r2, r0, #0
 8019924:	61f8      	str	r0, [r7, #28]
 8019926:	d105      	bne.n	8019934 <__pow5mult+0x44>
 8019928:	21b4      	movs	r1, #180	@ 0xb4
 801992a:	4b1c      	ldr	r3, [pc, #112]	@ (801999c <__pow5mult+0xac>)
 801992c:	481c      	ldr	r0, [pc, #112]	@ (80199a0 <__pow5mult+0xb0>)
 801992e:	31ff      	adds	r1, #255	@ 0xff
 8019930:	f000 fdd6 	bl	801a4e0 <__assert_func>
 8019934:	6044      	str	r4, [r0, #4]
 8019936:	6084      	str	r4, [r0, #8]
 8019938:	6004      	str	r4, [r0, #0]
 801993a:	60c4      	str	r4, [r0, #12]
 801993c:	69fb      	ldr	r3, [r7, #28]
 801993e:	689c      	ldr	r4, [r3, #8]
 8019940:	9301      	str	r3, [sp, #4]
 8019942:	2c00      	cmp	r4, #0
 8019944:	d108      	bne.n	8019958 <__pow5mult+0x68>
 8019946:	0038      	movs	r0, r7
 8019948:	4916      	ldr	r1, [pc, #88]	@ (80199a4 <__pow5mult+0xb4>)
 801994a:	f7ff ff07 	bl	801975c <__i2b>
 801994e:	9b01      	ldr	r3, [sp, #4]
 8019950:	0004      	movs	r4, r0
 8019952:	6098      	str	r0, [r3, #8]
 8019954:	2300      	movs	r3, #0
 8019956:	6003      	str	r3, [r0, #0]
 8019958:	2301      	movs	r3, #1
 801995a:	421d      	tst	r5, r3
 801995c:	d00a      	beq.n	8019974 <__pow5mult+0x84>
 801995e:	0031      	movs	r1, r6
 8019960:	0022      	movs	r2, r4
 8019962:	0038      	movs	r0, r7
 8019964:	f7ff ff12 	bl	801978c <__multiply>
 8019968:	0031      	movs	r1, r6
 801996a:	9001      	str	r0, [sp, #4]
 801996c:	0038      	movs	r0, r7
 801996e:	f7ff fe3d 	bl	80195ec <_Bfree>
 8019972:	9e01      	ldr	r6, [sp, #4]
 8019974:	106d      	asrs	r5, r5, #1
 8019976:	d00c      	beq.n	8019992 <__pow5mult+0xa2>
 8019978:	6820      	ldr	r0, [r4, #0]
 801997a:	2800      	cmp	r0, #0
 801997c:	d107      	bne.n	801998e <__pow5mult+0x9e>
 801997e:	0022      	movs	r2, r4
 8019980:	0021      	movs	r1, r4
 8019982:	0038      	movs	r0, r7
 8019984:	f7ff ff02 	bl	801978c <__multiply>
 8019988:	2300      	movs	r3, #0
 801998a:	6020      	str	r0, [r4, #0]
 801998c:	6003      	str	r3, [r0, #0]
 801998e:	0004      	movs	r4, r0
 8019990:	e7e2      	b.n	8019958 <__pow5mult+0x68>
 8019992:	0030      	movs	r0, r6
 8019994:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019996:	46c0      	nop			@ (mov r8, r8)
 8019998:	0801c2d4 	.word	0x0801c2d4
 801999c:	0801c1f9 	.word	0x0801c1f9
 80199a0:	0801c279 	.word	0x0801c279
 80199a4:	00000271 	.word	0x00000271

080199a8 <__lshift>:
 80199a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80199aa:	000c      	movs	r4, r1
 80199ac:	0016      	movs	r6, r2
 80199ae:	6923      	ldr	r3, [r4, #16]
 80199b0:	1157      	asrs	r7, r2, #5
 80199b2:	b085      	sub	sp, #20
 80199b4:	18fb      	adds	r3, r7, r3
 80199b6:	9301      	str	r3, [sp, #4]
 80199b8:	3301      	adds	r3, #1
 80199ba:	9300      	str	r3, [sp, #0]
 80199bc:	6849      	ldr	r1, [r1, #4]
 80199be:	68a3      	ldr	r3, [r4, #8]
 80199c0:	9002      	str	r0, [sp, #8]
 80199c2:	9a00      	ldr	r2, [sp, #0]
 80199c4:	4293      	cmp	r3, r2
 80199c6:	db10      	blt.n	80199ea <__lshift+0x42>
 80199c8:	9802      	ldr	r0, [sp, #8]
 80199ca:	f7ff fdcb 	bl	8019564 <_Balloc>
 80199ce:	2300      	movs	r3, #0
 80199d0:	0001      	movs	r1, r0
 80199d2:	0005      	movs	r5, r0
 80199d4:	001a      	movs	r2, r3
 80199d6:	3114      	adds	r1, #20
 80199d8:	4298      	cmp	r0, r3
 80199da:	d10c      	bne.n	80199f6 <__lshift+0x4e>
 80199dc:	21ef      	movs	r1, #239	@ 0xef
 80199de:	002a      	movs	r2, r5
 80199e0:	4b25      	ldr	r3, [pc, #148]	@ (8019a78 <__lshift+0xd0>)
 80199e2:	4826      	ldr	r0, [pc, #152]	@ (8019a7c <__lshift+0xd4>)
 80199e4:	0049      	lsls	r1, r1, #1
 80199e6:	f000 fd7b 	bl	801a4e0 <__assert_func>
 80199ea:	3101      	adds	r1, #1
 80199ec:	005b      	lsls	r3, r3, #1
 80199ee:	e7e8      	b.n	80199c2 <__lshift+0x1a>
 80199f0:	0098      	lsls	r0, r3, #2
 80199f2:	500a      	str	r2, [r1, r0]
 80199f4:	3301      	adds	r3, #1
 80199f6:	42bb      	cmp	r3, r7
 80199f8:	dbfa      	blt.n	80199f0 <__lshift+0x48>
 80199fa:	43fb      	mvns	r3, r7
 80199fc:	17db      	asrs	r3, r3, #31
 80199fe:	401f      	ands	r7, r3
 8019a00:	00bf      	lsls	r7, r7, #2
 8019a02:	0023      	movs	r3, r4
 8019a04:	201f      	movs	r0, #31
 8019a06:	19c9      	adds	r1, r1, r7
 8019a08:	0037      	movs	r7, r6
 8019a0a:	6922      	ldr	r2, [r4, #16]
 8019a0c:	3314      	adds	r3, #20
 8019a0e:	0092      	lsls	r2, r2, #2
 8019a10:	189a      	adds	r2, r3, r2
 8019a12:	4007      	ands	r7, r0
 8019a14:	4206      	tst	r6, r0
 8019a16:	d029      	beq.n	8019a6c <__lshift+0xc4>
 8019a18:	3001      	adds	r0, #1
 8019a1a:	1bc0      	subs	r0, r0, r7
 8019a1c:	9003      	str	r0, [sp, #12]
 8019a1e:	468c      	mov	ip, r1
 8019a20:	2000      	movs	r0, #0
 8019a22:	681e      	ldr	r6, [r3, #0]
 8019a24:	40be      	lsls	r6, r7
 8019a26:	4306      	orrs	r6, r0
 8019a28:	4660      	mov	r0, ip
 8019a2a:	c040      	stmia	r0!, {r6}
 8019a2c:	4684      	mov	ip, r0
 8019a2e:	9e03      	ldr	r6, [sp, #12]
 8019a30:	cb01      	ldmia	r3!, {r0}
 8019a32:	40f0      	lsrs	r0, r6
 8019a34:	429a      	cmp	r2, r3
 8019a36:	d8f4      	bhi.n	8019a22 <__lshift+0x7a>
 8019a38:	0026      	movs	r6, r4
 8019a3a:	3615      	adds	r6, #21
 8019a3c:	2304      	movs	r3, #4
 8019a3e:	42b2      	cmp	r2, r6
 8019a40:	d304      	bcc.n	8019a4c <__lshift+0xa4>
 8019a42:	1b13      	subs	r3, r2, r4
 8019a44:	3b15      	subs	r3, #21
 8019a46:	089b      	lsrs	r3, r3, #2
 8019a48:	3301      	adds	r3, #1
 8019a4a:	009b      	lsls	r3, r3, #2
 8019a4c:	50c8      	str	r0, [r1, r3]
 8019a4e:	2800      	cmp	r0, #0
 8019a50:	d002      	beq.n	8019a58 <__lshift+0xb0>
 8019a52:	9b01      	ldr	r3, [sp, #4]
 8019a54:	3302      	adds	r3, #2
 8019a56:	9300      	str	r3, [sp, #0]
 8019a58:	9b00      	ldr	r3, [sp, #0]
 8019a5a:	9802      	ldr	r0, [sp, #8]
 8019a5c:	3b01      	subs	r3, #1
 8019a5e:	0021      	movs	r1, r4
 8019a60:	612b      	str	r3, [r5, #16]
 8019a62:	f7ff fdc3 	bl	80195ec <_Bfree>
 8019a66:	0028      	movs	r0, r5
 8019a68:	b005      	add	sp, #20
 8019a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a6c:	cb01      	ldmia	r3!, {r0}
 8019a6e:	c101      	stmia	r1!, {r0}
 8019a70:	429a      	cmp	r2, r3
 8019a72:	d8fb      	bhi.n	8019a6c <__lshift+0xc4>
 8019a74:	e7f0      	b.n	8019a58 <__lshift+0xb0>
 8019a76:	46c0      	nop			@ (mov r8, r8)
 8019a78:	0801c268 	.word	0x0801c268
 8019a7c:	0801c279 	.word	0x0801c279

08019a80 <__mcmp>:
 8019a80:	b530      	push	{r4, r5, lr}
 8019a82:	690b      	ldr	r3, [r1, #16]
 8019a84:	6904      	ldr	r4, [r0, #16]
 8019a86:	0002      	movs	r2, r0
 8019a88:	1ae0      	subs	r0, r4, r3
 8019a8a:	429c      	cmp	r4, r3
 8019a8c:	d10f      	bne.n	8019aae <__mcmp+0x2e>
 8019a8e:	3214      	adds	r2, #20
 8019a90:	009b      	lsls	r3, r3, #2
 8019a92:	3114      	adds	r1, #20
 8019a94:	0014      	movs	r4, r2
 8019a96:	18c9      	adds	r1, r1, r3
 8019a98:	18d2      	adds	r2, r2, r3
 8019a9a:	3a04      	subs	r2, #4
 8019a9c:	3904      	subs	r1, #4
 8019a9e:	6815      	ldr	r5, [r2, #0]
 8019aa0:	680b      	ldr	r3, [r1, #0]
 8019aa2:	429d      	cmp	r5, r3
 8019aa4:	d004      	beq.n	8019ab0 <__mcmp+0x30>
 8019aa6:	2001      	movs	r0, #1
 8019aa8:	429d      	cmp	r5, r3
 8019aaa:	d200      	bcs.n	8019aae <__mcmp+0x2e>
 8019aac:	3802      	subs	r0, #2
 8019aae:	bd30      	pop	{r4, r5, pc}
 8019ab0:	4294      	cmp	r4, r2
 8019ab2:	d3f2      	bcc.n	8019a9a <__mcmp+0x1a>
 8019ab4:	e7fb      	b.n	8019aae <__mcmp+0x2e>
	...

08019ab8 <__mdiff>:
 8019ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019aba:	000c      	movs	r4, r1
 8019abc:	b087      	sub	sp, #28
 8019abe:	9000      	str	r0, [sp, #0]
 8019ac0:	0011      	movs	r1, r2
 8019ac2:	0020      	movs	r0, r4
 8019ac4:	0017      	movs	r7, r2
 8019ac6:	f7ff ffdb 	bl	8019a80 <__mcmp>
 8019aca:	1e05      	subs	r5, r0, #0
 8019acc:	d110      	bne.n	8019af0 <__mdiff+0x38>
 8019ace:	0001      	movs	r1, r0
 8019ad0:	9800      	ldr	r0, [sp, #0]
 8019ad2:	f7ff fd47 	bl	8019564 <_Balloc>
 8019ad6:	1e02      	subs	r2, r0, #0
 8019ad8:	d104      	bne.n	8019ae4 <__mdiff+0x2c>
 8019ada:	4b40      	ldr	r3, [pc, #256]	@ (8019bdc <__mdiff+0x124>)
 8019adc:	4840      	ldr	r0, [pc, #256]	@ (8019be0 <__mdiff+0x128>)
 8019ade:	4941      	ldr	r1, [pc, #260]	@ (8019be4 <__mdiff+0x12c>)
 8019ae0:	f000 fcfe 	bl	801a4e0 <__assert_func>
 8019ae4:	2301      	movs	r3, #1
 8019ae6:	6145      	str	r5, [r0, #20]
 8019ae8:	6103      	str	r3, [r0, #16]
 8019aea:	0010      	movs	r0, r2
 8019aec:	b007      	add	sp, #28
 8019aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019af0:	2600      	movs	r6, #0
 8019af2:	42b0      	cmp	r0, r6
 8019af4:	da03      	bge.n	8019afe <__mdiff+0x46>
 8019af6:	0023      	movs	r3, r4
 8019af8:	003c      	movs	r4, r7
 8019afa:	001f      	movs	r7, r3
 8019afc:	3601      	adds	r6, #1
 8019afe:	6861      	ldr	r1, [r4, #4]
 8019b00:	9800      	ldr	r0, [sp, #0]
 8019b02:	f7ff fd2f 	bl	8019564 <_Balloc>
 8019b06:	1e02      	subs	r2, r0, #0
 8019b08:	d103      	bne.n	8019b12 <__mdiff+0x5a>
 8019b0a:	4b34      	ldr	r3, [pc, #208]	@ (8019bdc <__mdiff+0x124>)
 8019b0c:	4834      	ldr	r0, [pc, #208]	@ (8019be0 <__mdiff+0x128>)
 8019b0e:	4936      	ldr	r1, [pc, #216]	@ (8019be8 <__mdiff+0x130>)
 8019b10:	e7e6      	b.n	8019ae0 <__mdiff+0x28>
 8019b12:	6923      	ldr	r3, [r4, #16]
 8019b14:	3414      	adds	r4, #20
 8019b16:	9300      	str	r3, [sp, #0]
 8019b18:	009b      	lsls	r3, r3, #2
 8019b1a:	18e3      	adds	r3, r4, r3
 8019b1c:	0021      	movs	r1, r4
 8019b1e:	9401      	str	r4, [sp, #4]
 8019b20:	003c      	movs	r4, r7
 8019b22:	9302      	str	r3, [sp, #8]
 8019b24:	693b      	ldr	r3, [r7, #16]
 8019b26:	3414      	adds	r4, #20
 8019b28:	009b      	lsls	r3, r3, #2
 8019b2a:	18e3      	adds	r3, r4, r3
 8019b2c:	9303      	str	r3, [sp, #12]
 8019b2e:	0003      	movs	r3, r0
 8019b30:	60c6      	str	r6, [r0, #12]
 8019b32:	468c      	mov	ip, r1
 8019b34:	2000      	movs	r0, #0
 8019b36:	3314      	adds	r3, #20
 8019b38:	9304      	str	r3, [sp, #16]
 8019b3a:	9305      	str	r3, [sp, #20]
 8019b3c:	4663      	mov	r3, ip
 8019b3e:	cb20      	ldmia	r3!, {r5}
 8019b40:	b2a9      	uxth	r1, r5
 8019b42:	000e      	movs	r6, r1
 8019b44:	469c      	mov	ip, r3
 8019b46:	cc08      	ldmia	r4!, {r3}
 8019b48:	0c2d      	lsrs	r5, r5, #16
 8019b4a:	b299      	uxth	r1, r3
 8019b4c:	1a71      	subs	r1, r6, r1
 8019b4e:	1809      	adds	r1, r1, r0
 8019b50:	0c1b      	lsrs	r3, r3, #16
 8019b52:	1408      	asrs	r0, r1, #16
 8019b54:	1aeb      	subs	r3, r5, r3
 8019b56:	181b      	adds	r3, r3, r0
 8019b58:	1418      	asrs	r0, r3, #16
 8019b5a:	b289      	uxth	r1, r1
 8019b5c:	041b      	lsls	r3, r3, #16
 8019b5e:	4319      	orrs	r1, r3
 8019b60:	9b05      	ldr	r3, [sp, #20]
 8019b62:	c302      	stmia	r3!, {r1}
 8019b64:	9305      	str	r3, [sp, #20]
 8019b66:	9b03      	ldr	r3, [sp, #12]
 8019b68:	42a3      	cmp	r3, r4
 8019b6a:	d8e7      	bhi.n	8019b3c <__mdiff+0x84>
 8019b6c:	0039      	movs	r1, r7
 8019b6e:	9c03      	ldr	r4, [sp, #12]
 8019b70:	3115      	adds	r1, #21
 8019b72:	2304      	movs	r3, #4
 8019b74:	428c      	cmp	r4, r1
 8019b76:	d304      	bcc.n	8019b82 <__mdiff+0xca>
 8019b78:	1be3      	subs	r3, r4, r7
 8019b7a:	3b15      	subs	r3, #21
 8019b7c:	089b      	lsrs	r3, r3, #2
 8019b7e:	3301      	adds	r3, #1
 8019b80:	009b      	lsls	r3, r3, #2
 8019b82:	9901      	ldr	r1, [sp, #4]
 8019b84:	18cd      	adds	r5, r1, r3
 8019b86:	9904      	ldr	r1, [sp, #16]
 8019b88:	002e      	movs	r6, r5
 8019b8a:	18cb      	adds	r3, r1, r3
 8019b8c:	001f      	movs	r7, r3
 8019b8e:	9902      	ldr	r1, [sp, #8]
 8019b90:	428e      	cmp	r6, r1
 8019b92:	d311      	bcc.n	8019bb8 <__mdiff+0x100>
 8019b94:	9c02      	ldr	r4, [sp, #8]
 8019b96:	1ee9      	subs	r1, r5, #3
 8019b98:	2000      	movs	r0, #0
 8019b9a:	428c      	cmp	r4, r1
 8019b9c:	d304      	bcc.n	8019ba8 <__mdiff+0xf0>
 8019b9e:	0021      	movs	r1, r4
 8019ba0:	3103      	adds	r1, #3
 8019ba2:	1b49      	subs	r1, r1, r5
 8019ba4:	0889      	lsrs	r1, r1, #2
 8019ba6:	0088      	lsls	r0, r1, #2
 8019ba8:	181b      	adds	r3, r3, r0
 8019baa:	3b04      	subs	r3, #4
 8019bac:	6819      	ldr	r1, [r3, #0]
 8019bae:	2900      	cmp	r1, #0
 8019bb0:	d010      	beq.n	8019bd4 <__mdiff+0x11c>
 8019bb2:	9b00      	ldr	r3, [sp, #0]
 8019bb4:	6113      	str	r3, [r2, #16]
 8019bb6:	e798      	b.n	8019aea <__mdiff+0x32>
 8019bb8:	4684      	mov	ip, r0
 8019bba:	ce02      	ldmia	r6!, {r1}
 8019bbc:	b288      	uxth	r0, r1
 8019bbe:	4460      	add	r0, ip
 8019bc0:	1400      	asrs	r0, r0, #16
 8019bc2:	0c0c      	lsrs	r4, r1, #16
 8019bc4:	1904      	adds	r4, r0, r4
 8019bc6:	4461      	add	r1, ip
 8019bc8:	1420      	asrs	r0, r4, #16
 8019bca:	b289      	uxth	r1, r1
 8019bcc:	0424      	lsls	r4, r4, #16
 8019bce:	4321      	orrs	r1, r4
 8019bd0:	c702      	stmia	r7!, {r1}
 8019bd2:	e7dc      	b.n	8019b8e <__mdiff+0xd6>
 8019bd4:	9900      	ldr	r1, [sp, #0]
 8019bd6:	3901      	subs	r1, #1
 8019bd8:	9100      	str	r1, [sp, #0]
 8019bda:	e7e6      	b.n	8019baa <__mdiff+0xf2>
 8019bdc:	0801c268 	.word	0x0801c268
 8019be0:	0801c279 	.word	0x0801c279
 8019be4:	00000237 	.word	0x00000237
 8019be8:	00000245 	.word	0x00000245

08019bec <__d2b>:
 8019bec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019bee:	2101      	movs	r1, #1
 8019bf0:	0016      	movs	r6, r2
 8019bf2:	001f      	movs	r7, r3
 8019bf4:	f7ff fcb6 	bl	8019564 <_Balloc>
 8019bf8:	1e04      	subs	r4, r0, #0
 8019bfa:	d105      	bne.n	8019c08 <__d2b+0x1c>
 8019bfc:	0022      	movs	r2, r4
 8019bfe:	4b25      	ldr	r3, [pc, #148]	@ (8019c94 <__d2b+0xa8>)
 8019c00:	4825      	ldr	r0, [pc, #148]	@ (8019c98 <__d2b+0xac>)
 8019c02:	4926      	ldr	r1, [pc, #152]	@ (8019c9c <__d2b+0xb0>)
 8019c04:	f000 fc6c 	bl	801a4e0 <__assert_func>
 8019c08:	033b      	lsls	r3, r7, #12
 8019c0a:	007d      	lsls	r5, r7, #1
 8019c0c:	0b1b      	lsrs	r3, r3, #12
 8019c0e:	0d6d      	lsrs	r5, r5, #21
 8019c10:	d002      	beq.n	8019c18 <__d2b+0x2c>
 8019c12:	2280      	movs	r2, #128	@ 0x80
 8019c14:	0352      	lsls	r2, r2, #13
 8019c16:	4313      	orrs	r3, r2
 8019c18:	9301      	str	r3, [sp, #4]
 8019c1a:	2e00      	cmp	r6, #0
 8019c1c:	d025      	beq.n	8019c6a <__d2b+0x7e>
 8019c1e:	4668      	mov	r0, sp
 8019c20:	9600      	str	r6, [sp, #0]
 8019c22:	f7ff fd6c 	bl	80196fe <__lo0bits>
 8019c26:	9b01      	ldr	r3, [sp, #4]
 8019c28:	9900      	ldr	r1, [sp, #0]
 8019c2a:	2800      	cmp	r0, #0
 8019c2c:	d01b      	beq.n	8019c66 <__d2b+0x7a>
 8019c2e:	2220      	movs	r2, #32
 8019c30:	001e      	movs	r6, r3
 8019c32:	1a12      	subs	r2, r2, r0
 8019c34:	4096      	lsls	r6, r2
 8019c36:	0032      	movs	r2, r6
 8019c38:	40c3      	lsrs	r3, r0
 8019c3a:	430a      	orrs	r2, r1
 8019c3c:	6162      	str	r2, [r4, #20]
 8019c3e:	9301      	str	r3, [sp, #4]
 8019c40:	9e01      	ldr	r6, [sp, #4]
 8019c42:	61a6      	str	r6, [r4, #24]
 8019c44:	1e73      	subs	r3, r6, #1
 8019c46:	419e      	sbcs	r6, r3
 8019c48:	3601      	adds	r6, #1
 8019c4a:	6126      	str	r6, [r4, #16]
 8019c4c:	2d00      	cmp	r5, #0
 8019c4e:	d014      	beq.n	8019c7a <__d2b+0x8e>
 8019c50:	2635      	movs	r6, #53	@ 0x35
 8019c52:	4b13      	ldr	r3, [pc, #76]	@ (8019ca0 <__d2b+0xb4>)
 8019c54:	18ed      	adds	r5, r5, r3
 8019c56:	9b08      	ldr	r3, [sp, #32]
 8019c58:	182d      	adds	r5, r5, r0
 8019c5a:	601d      	str	r5, [r3, #0]
 8019c5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019c5e:	1a36      	subs	r6, r6, r0
 8019c60:	601e      	str	r6, [r3, #0]
 8019c62:	0020      	movs	r0, r4
 8019c64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019c66:	6161      	str	r1, [r4, #20]
 8019c68:	e7ea      	b.n	8019c40 <__d2b+0x54>
 8019c6a:	a801      	add	r0, sp, #4
 8019c6c:	f7ff fd47 	bl	80196fe <__lo0bits>
 8019c70:	9b01      	ldr	r3, [sp, #4]
 8019c72:	2601      	movs	r6, #1
 8019c74:	6163      	str	r3, [r4, #20]
 8019c76:	3020      	adds	r0, #32
 8019c78:	e7e7      	b.n	8019c4a <__d2b+0x5e>
 8019c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8019ca4 <__d2b+0xb8>)
 8019c7c:	18c0      	adds	r0, r0, r3
 8019c7e:	9b08      	ldr	r3, [sp, #32]
 8019c80:	6018      	str	r0, [r3, #0]
 8019c82:	4b09      	ldr	r3, [pc, #36]	@ (8019ca8 <__d2b+0xbc>)
 8019c84:	18f3      	adds	r3, r6, r3
 8019c86:	009b      	lsls	r3, r3, #2
 8019c88:	18e3      	adds	r3, r4, r3
 8019c8a:	6958      	ldr	r0, [r3, #20]
 8019c8c:	f7ff fd16 	bl	80196bc <__hi0bits>
 8019c90:	0176      	lsls	r6, r6, #5
 8019c92:	e7e3      	b.n	8019c5c <__d2b+0x70>
 8019c94:	0801c268 	.word	0x0801c268
 8019c98:	0801c279 	.word	0x0801c279
 8019c9c:	0000030f 	.word	0x0000030f
 8019ca0:	fffffbcd 	.word	0xfffffbcd
 8019ca4:	fffffbce 	.word	0xfffffbce
 8019ca8:	3fffffff 	.word	0x3fffffff

08019cac <__ssputs_r>:
 8019cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019cae:	688e      	ldr	r6, [r1, #8]
 8019cb0:	b085      	sub	sp, #20
 8019cb2:	001f      	movs	r7, r3
 8019cb4:	000c      	movs	r4, r1
 8019cb6:	680b      	ldr	r3, [r1, #0]
 8019cb8:	9002      	str	r0, [sp, #8]
 8019cba:	9203      	str	r2, [sp, #12]
 8019cbc:	42be      	cmp	r6, r7
 8019cbe:	d830      	bhi.n	8019d22 <__ssputs_r+0x76>
 8019cc0:	210c      	movs	r1, #12
 8019cc2:	5e62      	ldrsh	r2, [r4, r1]
 8019cc4:	2190      	movs	r1, #144	@ 0x90
 8019cc6:	00c9      	lsls	r1, r1, #3
 8019cc8:	420a      	tst	r2, r1
 8019cca:	d028      	beq.n	8019d1e <__ssputs_r+0x72>
 8019ccc:	2003      	movs	r0, #3
 8019cce:	6921      	ldr	r1, [r4, #16]
 8019cd0:	1a5b      	subs	r3, r3, r1
 8019cd2:	9301      	str	r3, [sp, #4]
 8019cd4:	6963      	ldr	r3, [r4, #20]
 8019cd6:	4343      	muls	r3, r0
 8019cd8:	9801      	ldr	r0, [sp, #4]
 8019cda:	0fdd      	lsrs	r5, r3, #31
 8019cdc:	18ed      	adds	r5, r5, r3
 8019cde:	1c7b      	adds	r3, r7, #1
 8019ce0:	181b      	adds	r3, r3, r0
 8019ce2:	106d      	asrs	r5, r5, #1
 8019ce4:	42ab      	cmp	r3, r5
 8019ce6:	d900      	bls.n	8019cea <__ssputs_r+0x3e>
 8019ce8:	001d      	movs	r5, r3
 8019cea:	0552      	lsls	r2, r2, #21
 8019cec:	d528      	bpl.n	8019d40 <__ssputs_r+0x94>
 8019cee:	0029      	movs	r1, r5
 8019cf0:	9802      	ldr	r0, [sp, #8]
 8019cf2:	f7ff fba7 	bl	8019444 <_malloc_r>
 8019cf6:	1e06      	subs	r6, r0, #0
 8019cf8:	d02c      	beq.n	8019d54 <__ssputs_r+0xa8>
 8019cfa:	9a01      	ldr	r2, [sp, #4]
 8019cfc:	6921      	ldr	r1, [r4, #16]
 8019cfe:	f7fe fc9f 	bl	8018640 <memcpy>
 8019d02:	89a2      	ldrh	r2, [r4, #12]
 8019d04:	4b18      	ldr	r3, [pc, #96]	@ (8019d68 <__ssputs_r+0xbc>)
 8019d06:	401a      	ands	r2, r3
 8019d08:	2380      	movs	r3, #128	@ 0x80
 8019d0a:	4313      	orrs	r3, r2
 8019d0c:	81a3      	strh	r3, [r4, #12]
 8019d0e:	9b01      	ldr	r3, [sp, #4]
 8019d10:	6126      	str	r6, [r4, #16]
 8019d12:	18f6      	adds	r6, r6, r3
 8019d14:	6026      	str	r6, [r4, #0]
 8019d16:	003e      	movs	r6, r7
 8019d18:	6165      	str	r5, [r4, #20]
 8019d1a:	1aed      	subs	r5, r5, r3
 8019d1c:	60a5      	str	r5, [r4, #8]
 8019d1e:	42be      	cmp	r6, r7
 8019d20:	d900      	bls.n	8019d24 <__ssputs_r+0x78>
 8019d22:	003e      	movs	r6, r7
 8019d24:	0032      	movs	r2, r6
 8019d26:	9903      	ldr	r1, [sp, #12]
 8019d28:	6820      	ldr	r0, [r4, #0]
 8019d2a:	f000 fbb3 	bl	801a494 <memmove>
 8019d2e:	2000      	movs	r0, #0
 8019d30:	68a3      	ldr	r3, [r4, #8]
 8019d32:	1b9b      	subs	r3, r3, r6
 8019d34:	60a3      	str	r3, [r4, #8]
 8019d36:	6823      	ldr	r3, [r4, #0]
 8019d38:	199b      	adds	r3, r3, r6
 8019d3a:	6023      	str	r3, [r4, #0]
 8019d3c:	b005      	add	sp, #20
 8019d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019d40:	002a      	movs	r2, r5
 8019d42:	9802      	ldr	r0, [sp, #8]
 8019d44:	f000 fc29 	bl	801a59a <_realloc_r>
 8019d48:	1e06      	subs	r6, r0, #0
 8019d4a:	d1e0      	bne.n	8019d0e <__ssputs_r+0x62>
 8019d4c:	6921      	ldr	r1, [r4, #16]
 8019d4e:	9802      	ldr	r0, [sp, #8]
 8019d50:	f7ff fb02 	bl	8019358 <_free_r>
 8019d54:	230c      	movs	r3, #12
 8019d56:	2001      	movs	r0, #1
 8019d58:	9a02      	ldr	r2, [sp, #8]
 8019d5a:	4240      	negs	r0, r0
 8019d5c:	6013      	str	r3, [r2, #0]
 8019d5e:	89a2      	ldrh	r2, [r4, #12]
 8019d60:	3334      	adds	r3, #52	@ 0x34
 8019d62:	4313      	orrs	r3, r2
 8019d64:	81a3      	strh	r3, [r4, #12]
 8019d66:	e7e9      	b.n	8019d3c <__ssputs_r+0x90>
 8019d68:	fffffb7f 	.word	0xfffffb7f

08019d6c <_svfiprintf_r>:
 8019d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d6e:	b0a1      	sub	sp, #132	@ 0x84
 8019d70:	9003      	str	r0, [sp, #12]
 8019d72:	001d      	movs	r5, r3
 8019d74:	898b      	ldrh	r3, [r1, #12]
 8019d76:	000f      	movs	r7, r1
 8019d78:	0016      	movs	r6, r2
 8019d7a:	061b      	lsls	r3, r3, #24
 8019d7c:	d511      	bpl.n	8019da2 <_svfiprintf_r+0x36>
 8019d7e:	690b      	ldr	r3, [r1, #16]
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	d10e      	bne.n	8019da2 <_svfiprintf_r+0x36>
 8019d84:	2140      	movs	r1, #64	@ 0x40
 8019d86:	f7ff fb5d 	bl	8019444 <_malloc_r>
 8019d8a:	6038      	str	r0, [r7, #0]
 8019d8c:	6138      	str	r0, [r7, #16]
 8019d8e:	2800      	cmp	r0, #0
 8019d90:	d105      	bne.n	8019d9e <_svfiprintf_r+0x32>
 8019d92:	230c      	movs	r3, #12
 8019d94:	9a03      	ldr	r2, [sp, #12]
 8019d96:	6013      	str	r3, [r2, #0]
 8019d98:	2001      	movs	r0, #1
 8019d9a:	4240      	negs	r0, r0
 8019d9c:	e0cf      	b.n	8019f3e <_svfiprintf_r+0x1d2>
 8019d9e:	2340      	movs	r3, #64	@ 0x40
 8019da0:	617b      	str	r3, [r7, #20]
 8019da2:	2300      	movs	r3, #0
 8019da4:	ac08      	add	r4, sp, #32
 8019da6:	6163      	str	r3, [r4, #20]
 8019da8:	3320      	adds	r3, #32
 8019daa:	7663      	strb	r3, [r4, #25]
 8019dac:	3310      	adds	r3, #16
 8019dae:	76a3      	strb	r3, [r4, #26]
 8019db0:	9507      	str	r5, [sp, #28]
 8019db2:	0035      	movs	r5, r6
 8019db4:	782b      	ldrb	r3, [r5, #0]
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	d001      	beq.n	8019dbe <_svfiprintf_r+0x52>
 8019dba:	2b25      	cmp	r3, #37	@ 0x25
 8019dbc:	d148      	bne.n	8019e50 <_svfiprintf_r+0xe4>
 8019dbe:	1bab      	subs	r3, r5, r6
 8019dc0:	9305      	str	r3, [sp, #20]
 8019dc2:	42b5      	cmp	r5, r6
 8019dc4:	d00b      	beq.n	8019dde <_svfiprintf_r+0x72>
 8019dc6:	0032      	movs	r2, r6
 8019dc8:	0039      	movs	r1, r7
 8019dca:	9803      	ldr	r0, [sp, #12]
 8019dcc:	f7ff ff6e 	bl	8019cac <__ssputs_r>
 8019dd0:	3001      	adds	r0, #1
 8019dd2:	d100      	bne.n	8019dd6 <_svfiprintf_r+0x6a>
 8019dd4:	e0ae      	b.n	8019f34 <_svfiprintf_r+0x1c8>
 8019dd6:	6963      	ldr	r3, [r4, #20]
 8019dd8:	9a05      	ldr	r2, [sp, #20]
 8019dda:	189b      	adds	r3, r3, r2
 8019ddc:	6163      	str	r3, [r4, #20]
 8019dde:	782b      	ldrb	r3, [r5, #0]
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	d100      	bne.n	8019de6 <_svfiprintf_r+0x7a>
 8019de4:	e0a6      	b.n	8019f34 <_svfiprintf_r+0x1c8>
 8019de6:	2201      	movs	r2, #1
 8019de8:	2300      	movs	r3, #0
 8019dea:	4252      	negs	r2, r2
 8019dec:	6062      	str	r2, [r4, #4]
 8019dee:	a904      	add	r1, sp, #16
 8019df0:	3254      	adds	r2, #84	@ 0x54
 8019df2:	1852      	adds	r2, r2, r1
 8019df4:	1c6e      	adds	r6, r5, #1
 8019df6:	6023      	str	r3, [r4, #0]
 8019df8:	60e3      	str	r3, [r4, #12]
 8019dfa:	60a3      	str	r3, [r4, #8]
 8019dfc:	7013      	strb	r3, [r2, #0]
 8019dfe:	65a3      	str	r3, [r4, #88]	@ 0x58
 8019e00:	4b54      	ldr	r3, [pc, #336]	@ (8019f54 <_svfiprintf_r+0x1e8>)
 8019e02:	2205      	movs	r2, #5
 8019e04:	0018      	movs	r0, r3
 8019e06:	7831      	ldrb	r1, [r6, #0]
 8019e08:	9305      	str	r3, [sp, #20]
 8019e0a:	f7fe fc0e 	bl	801862a <memchr>
 8019e0e:	1c75      	adds	r5, r6, #1
 8019e10:	2800      	cmp	r0, #0
 8019e12:	d11f      	bne.n	8019e54 <_svfiprintf_r+0xe8>
 8019e14:	6822      	ldr	r2, [r4, #0]
 8019e16:	06d3      	lsls	r3, r2, #27
 8019e18:	d504      	bpl.n	8019e24 <_svfiprintf_r+0xb8>
 8019e1a:	2353      	movs	r3, #83	@ 0x53
 8019e1c:	a904      	add	r1, sp, #16
 8019e1e:	185b      	adds	r3, r3, r1
 8019e20:	2120      	movs	r1, #32
 8019e22:	7019      	strb	r1, [r3, #0]
 8019e24:	0713      	lsls	r3, r2, #28
 8019e26:	d504      	bpl.n	8019e32 <_svfiprintf_r+0xc6>
 8019e28:	2353      	movs	r3, #83	@ 0x53
 8019e2a:	a904      	add	r1, sp, #16
 8019e2c:	185b      	adds	r3, r3, r1
 8019e2e:	212b      	movs	r1, #43	@ 0x2b
 8019e30:	7019      	strb	r1, [r3, #0]
 8019e32:	7833      	ldrb	r3, [r6, #0]
 8019e34:	2b2a      	cmp	r3, #42	@ 0x2a
 8019e36:	d016      	beq.n	8019e66 <_svfiprintf_r+0xfa>
 8019e38:	0035      	movs	r5, r6
 8019e3a:	2100      	movs	r1, #0
 8019e3c:	200a      	movs	r0, #10
 8019e3e:	68e3      	ldr	r3, [r4, #12]
 8019e40:	782a      	ldrb	r2, [r5, #0]
 8019e42:	1c6e      	adds	r6, r5, #1
 8019e44:	3a30      	subs	r2, #48	@ 0x30
 8019e46:	2a09      	cmp	r2, #9
 8019e48:	d950      	bls.n	8019eec <_svfiprintf_r+0x180>
 8019e4a:	2900      	cmp	r1, #0
 8019e4c:	d111      	bne.n	8019e72 <_svfiprintf_r+0x106>
 8019e4e:	e017      	b.n	8019e80 <_svfiprintf_r+0x114>
 8019e50:	3501      	adds	r5, #1
 8019e52:	e7af      	b.n	8019db4 <_svfiprintf_r+0x48>
 8019e54:	9b05      	ldr	r3, [sp, #20]
 8019e56:	6822      	ldr	r2, [r4, #0]
 8019e58:	1ac0      	subs	r0, r0, r3
 8019e5a:	2301      	movs	r3, #1
 8019e5c:	4083      	lsls	r3, r0
 8019e5e:	4313      	orrs	r3, r2
 8019e60:	002e      	movs	r6, r5
 8019e62:	6023      	str	r3, [r4, #0]
 8019e64:	e7cc      	b.n	8019e00 <_svfiprintf_r+0x94>
 8019e66:	9b07      	ldr	r3, [sp, #28]
 8019e68:	1d19      	adds	r1, r3, #4
 8019e6a:	681b      	ldr	r3, [r3, #0]
 8019e6c:	9107      	str	r1, [sp, #28]
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	db01      	blt.n	8019e76 <_svfiprintf_r+0x10a>
 8019e72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019e74:	e004      	b.n	8019e80 <_svfiprintf_r+0x114>
 8019e76:	425b      	negs	r3, r3
 8019e78:	60e3      	str	r3, [r4, #12]
 8019e7a:	2302      	movs	r3, #2
 8019e7c:	4313      	orrs	r3, r2
 8019e7e:	6023      	str	r3, [r4, #0]
 8019e80:	782b      	ldrb	r3, [r5, #0]
 8019e82:	2b2e      	cmp	r3, #46	@ 0x2e
 8019e84:	d10c      	bne.n	8019ea0 <_svfiprintf_r+0x134>
 8019e86:	786b      	ldrb	r3, [r5, #1]
 8019e88:	2b2a      	cmp	r3, #42	@ 0x2a
 8019e8a:	d134      	bne.n	8019ef6 <_svfiprintf_r+0x18a>
 8019e8c:	9b07      	ldr	r3, [sp, #28]
 8019e8e:	3502      	adds	r5, #2
 8019e90:	1d1a      	adds	r2, r3, #4
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	9207      	str	r2, [sp, #28]
 8019e96:	2b00      	cmp	r3, #0
 8019e98:	da01      	bge.n	8019e9e <_svfiprintf_r+0x132>
 8019e9a:	2301      	movs	r3, #1
 8019e9c:	425b      	negs	r3, r3
 8019e9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8019ea0:	4e2d      	ldr	r6, [pc, #180]	@ (8019f58 <_svfiprintf_r+0x1ec>)
 8019ea2:	2203      	movs	r2, #3
 8019ea4:	0030      	movs	r0, r6
 8019ea6:	7829      	ldrb	r1, [r5, #0]
 8019ea8:	f7fe fbbf 	bl	801862a <memchr>
 8019eac:	2800      	cmp	r0, #0
 8019eae:	d006      	beq.n	8019ebe <_svfiprintf_r+0x152>
 8019eb0:	2340      	movs	r3, #64	@ 0x40
 8019eb2:	1b80      	subs	r0, r0, r6
 8019eb4:	4083      	lsls	r3, r0
 8019eb6:	6822      	ldr	r2, [r4, #0]
 8019eb8:	3501      	adds	r5, #1
 8019eba:	4313      	orrs	r3, r2
 8019ebc:	6023      	str	r3, [r4, #0]
 8019ebe:	7829      	ldrb	r1, [r5, #0]
 8019ec0:	2206      	movs	r2, #6
 8019ec2:	4826      	ldr	r0, [pc, #152]	@ (8019f5c <_svfiprintf_r+0x1f0>)
 8019ec4:	1c6e      	adds	r6, r5, #1
 8019ec6:	7621      	strb	r1, [r4, #24]
 8019ec8:	f7fe fbaf 	bl	801862a <memchr>
 8019ecc:	2800      	cmp	r0, #0
 8019ece:	d038      	beq.n	8019f42 <_svfiprintf_r+0x1d6>
 8019ed0:	4b23      	ldr	r3, [pc, #140]	@ (8019f60 <_svfiprintf_r+0x1f4>)
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	d122      	bne.n	8019f1c <_svfiprintf_r+0x1b0>
 8019ed6:	2207      	movs	r2, #7
 8019ed8:	9b07      	ldr	r3, [sp, #28]
 8019eda:	3307      	adds	r3, #7
 8019edc:	4393      	bics	r3, r2
 8019ede:	3308      	adds	r3, #8
 8019ee0:	9307      	str	r3, [sp, #28]
 8019ee2:	6963      	ldr	r3, [r4, #20]
 8019ee4:	9a04      	ldr	r2, [sp, #16]
 8019ee6:	189b      	adds	r3, r3, r2
 8019ee8:	6163      	str	r3, [r4, #20]
 8019eea:	e762      	b.n	8019db2 <_svfiprintf_r+0x46>
 8019eec:	4343      	muls	r3, r0
 8019eee:	0035      	movs	r5, r6
 8019ef0:	2101      	movs	r1, #1
 8019ef2:	189b      	adds	r3, r3, r2
 8019ef4:	e7a4      	b.n	8019e40 <_svfiprintf_r+0xd4>
 8019ef6:	2300      	movs	r3, #0
 8019ef8:	200a      	movs	r0, #10
 8019efa:	0019      	movs	r1, r3
 8019efc:	3501      	adds	r5, #1
 8019efe:	6063      	str	r3, [r4, #4]
 8019f00:	782a      	ldrb	r2, [r5, #0]
 8019f02:	1c6e      	adds	r6, r5, #1
 8019f04:	3a30      	subs	r2, #48	@ 0x30
 8019f06:	2a09      	cmp	r2, #9
 8019f08:	d903      	bls.n	8019f12 <_svfiprintf_r+0x1a6>
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	d0c8      	beq.n	8019ea0 <_svfiprintf_r+0x134>
 8019f0e:	9109      	str	r1, [sp, #36]	@ 0x24
 8019f10:	e7c6      	b.n	8019ea0 <_svfiprintf_r+0x134>
 8019f12:	4341      	muls	r1, r0
 8019f14:	0035      	movs	r5, r6
 8019f16:	2301      	movs	r3, #1
 8019f18:	1889      	adds	r1, r1, r2
 8019f1a:	e7f1      	b.n	8019f00 <_svfiprintf_r+0x194>
 8019f1c:	aa07      	add	r2, sp, #28
 8019f1e:	9200      	str	r2, [sp, #0]
 8019f20:	0021      	movs	r1, r4
 8019f22:	003a      	movs	r2, r7
 8019f24:	4b0f      	ldr	r3, [pc, #60]	@ (8019f64 <_svfiprintf_r+0x1f8>)
 8019f26:	9803      	ldr	r0, [sp, #12]
 8019f28:	f7fd fd8c 	bl	8017a44 <_printf_float>
 8019f2c:	9004      	str	r0, [sp, #16]
 8019f2e:	9b04      	ldr	r3, [sp, #16]
 8019f30:	3301      	adds	r3, #1
 8019f32:	d1d6      	bne.n	8019ee2 <_svfiprintf_r+0x176>
 8019f34:	89bb      	ldrh	r3, [r7, #12]
 8019f36:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8019f38:	065b      	lsls	r3, r3, #25
 8019f3a:	d500      	bpl.n	8019f3e <_svfiprintf_r+0x1d2>
 8019f3c:	e72c      	b.n	8019d98 <_svfiprintf_r+0x2c>
 8019f3e:	b021      	add	sp, #132	@ 0x84
 8019f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f42:	aa07      	add	r2, sp, #28
 8019f44:	9200      	str	r2, [sp, #0]
 8019f46:	0021      	movs	r1, r4
 8019f48:	003a      	movs	r2, r7
 8019f4a:	4b06      	ldr	r3, [pc, #24]	@ (8019f64 <_svfiprintf_r+0x1f8>)
 8019f4c:	9803      	ldr	r0, [sp, #12]
 8019f4e:	f7fe f827 	bl	8017fa0 <_printf_i>
 8019f52:	e7eb      	b.n	8019f2c <_svfiprintf_r+0x1c0>
 8019f54:	0801c3d0 	.word	0x0801c3d0
 8019f58:	0801c3d6 	.word	0x0801c3d6
 8019f5c:	0801c3da 	.word	0x0801c3da
 8019f60:	08017a45 	.word	0x08017a45
 8019f64:	08019cad 	.word	0x08019cad

08019f68 <__sfputc_r>:
 8019f68:	6893      	ldr	r3, [r2, #8]
 8019f6a:	b510      	push	{r4, lr}
 8019f6c:	3b01      	subs	r3, #1
 8019f6e:	6093      	str	r3, [r2, #8]
 8019f70:	2b00      	cmp	r3, #0
 8019f72:	da04      	bge.n	8019f7e <__sfputc_r+0x16>
 8019f74:	6994      	ldr	r4, [r2, #24]
 8019f76:	42a3      	cmp	r3, r4
 8019f78:	db07      	blt.n	8019f8a <__sfputc_r+0x22>
 8019f7a:	290a      	cmp	r1, #10
 8019f7c:	d005      	beq.n	8019f8a <__sfputc_r+0x22>
 8019f7e:	6813      	ldr	r3, [r2, #0]
 8019f80:	1c58      	adds	r0, r3, #1
 8019f82:	6010      	str	r0, [r2, #0]
 8019f84:	7019      	strb	r1, [r3, #0]
 8019f86:	0008      	movs	r0, r1
 8019f88:	bd10      	pop	{r4, pc}
 8019f8a:	f000 f9e2 	bl	801a352 <__swbuf_r>
 8019f8e:	0001      	movs	r1, r0
 8019f90:	e7f9      	b.n	8019f86 <__sfputc_r+0x1e>

08019f92 <__sfputs_r>:
 8019f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f94:	0006      	movs	r6, r0
 8019f96:	000f      	movs	r7, r1
 8019f98:	0014      	movs	r4, r2
 8019f9a:	18d5      	adds	r5, r2, r3
 8019f9c:	42ac      	cmp	r4, r5
 8019f9e:	d101      	bne.n	8019fa4 <__sfputs_r+0x12>
 8019fa0:	2000      	movs	r0, #0
 8019fa2:	e007      	b.n	8019fb4 <__sfputs_r+0x22>
 8019fa4:	7821      	ldrb	r1, [r4, #0]
 8019fa6:	003a      	movs	r2, r7
 8019fa8:	0030      	movs	r0, r6
 8019faa:	f7ff ffdd 	bl	8019f68 <__sfputc_r>
 8019fae:	3401      	adds	r4, #1
 8019fb0:	1c43      	adds	r3, r0, #1
 8019fb2:	d1f3      	bne.n	8019f9c <__sfputs_r+0xa>
 8019fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019fb8 <_vfiprintf_r>:
 8019fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019fba:	b0a1      	sub	sp, #132	@ 0x84
 8019fbc:	000f      	movs	r7, r1
 8019fbe:	0015      	movs	r5, r2
 8019fc0:	001e      	movs	r6, r3
 8019fc2:	9003      	str	r0, [sp, #12]
 8019fc4:	2800      	cmp	r0, #0
 8019fc6:	d004      	beq.n	8019fd2 <_vfiprintf_r+0x1a>
 8019fc8:	6a03      	ldr	r3, [r0, #32]
 8019fca:	2b00      	cmp	r3, #0
 8019fcc:	d101      	bne.n	8019fd2 <_vfiprintf_r+0x1a>
 8019fce:	f7fe f985 	bl	80182dc <__sinit>
 8019fd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019fd4:	07db      	lsls	r3, r3, #31
 8019fd6:	d405      	bmi.n	8019fe4 <_vfiprintf_r+0x2c>
 8019fd8:	89bb      	ldrh	r3, [r7, #12]
 8019fda:	059b      	lsls	r3, r3, #22
 8019fdc:	d402      	bmi.n	8019fe4 <_vfiprintf_r+0x2c>
 8019fde:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019fe0:	f7fe fb21 	bl	8018626 <__retarget_lock_acquire_recursive>
 8019fe4:	89bb      	ldrh	r3, [r7, #12]
 8019fe6:	071b      	lsls	r3, r3, #28
 8019fe8:	d502      	bpl.n	8019ff0 <_vfiprintf_r+0x38>
 8019fea:	693b      	ldr	r3, [r7, #16]
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	d113      	bne.n	801a018 <_vfiprintf_r+0x60>
 8019ff0:	0039      	movs	r1, r7
 8019ff2:	9803      	ldr	r0, [sp, #12]
 8019ff4:	f000 f9f0 	bl	801a3d8 <__swsetup_r>
 8019ff8:	2800      	cmp	r0, #0
 8019ffa:	d00d      	beq.n	801a018 <_vfiprintf_r+0x60>
 8019ffc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019ffe:	07db      	lsls	r3, r3, #31
 801a000:	d503      	bpl.n	801a00a <_vfiprintf_r+0x52>
 801a002:	2001      	movs	r0, #1
 801a004:	4240      	negs	r0, r0
 801a006:	b021      	add	sp, #132	@ 0x84
 801a008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a00a:	89bb      	ldrh	r3, [r7, #12]
 801a00c:	059b      	lsls	r3, r3, #22
 801a00e:	d4f8      	bmi.n	801a002 <_vfiprintf_r+0x4a>
 801a010:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801a012:	f7fe fb09 	bl	8018628 <__retarget_lock_release_recursive>
 801a016:	e7f4      	b.n	801a002 <_vfiprintf_r+0x4a>
 801a018:	2300      	movs	r3, #0
 801a01a:	ac08      	add	r4, sp, #32
 801a01c:	6163      	str	r3, [r4, #20]
 801a01e:	3320      	adds	r3, #32
 801a020:	7663      	strb	r3, [r4, #25]
 801a022:	3310      	adds	r3, #16
 801a024:	76a3      	strb	r3, [r4, #26]
 801a026:	9607      	str	r6, [sp, #28]
 801a028:	002e      	movs	r6, r5
 801a02a:	7833      	ldrb	r3, [r6, #0]
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	d001      	beq.n	801a034 <_vfiprintf_r+0x7c>
 801a030:	2b25      	cmp	r3, #37	@ 0x25
 801a032:	d148      	bne.n	801a0c6 <_vfiprintf_r+0x10e>
 801a034:	1b73      	subs	r3, r6, r5
 801a036:	9305      	str	r3, [sp, #20]
 801a038:	42ae      	cmp	r6, r5
 801a03a:	d00b      	beq.n	801a054 <_vfiprintf_r+0x9c>
 801a03c:	002a      	movs	r2, r5
 801a03e:	0039      	movs	r1, r7
 801a040:	9803      	ldr	r0, [sp, #12]
 801a042:	f7ff ffa6 	bl	8019f92 <__sfputs_r>
 801a046:	3001      	adds	r0, #1
 801a048:	d100      	bne.n	801a04c <_vfiprintf_r+0x94>
 801a04a:	e0ae      	b.n	801a1aa <_vfiprintf_r+0x1f2>
 801a04c:	6963      	ldr	r3, [r4, #20]
 801a04e:	9a05      	ldr	r2, [sp, #20]
 801a050:	189b      	adds	r3, r3, r2
 801a052:	6163      	str	r3, [r4, #20]
 801a054:	7833      	ldrb	r3, [r6, #0]
 801a056:	2b00      	cmp	r3, #0
 801a058:	d100      	bne.n	801a05c <_vfiprintf_r+0xa4>
 801a05a:	e0a6      	b.n	801a1aa <_vfiprintf_r+0x1f2>
 801a05c:	2201      	movs	r2, #1
 801a05e:	2300      	movs	r3, #0
 801a060:	4252      	negs	r2, r2
 801a062:	6062      	str	r2, [r4, #4]
 801a064:	a904      	add	r1, sp, #16
 801a066:	3254      	adds	r2, #84	@ 0x54
 801a068:	1852      	adds	r2, r2, r1
 801a06a:	1c75      	adds	r5, r6, #1
 801a06c:	6023      	str	r3, [r4, #0]
 801a06e:	60e3      	str	r3, [r4, #12]
 801a070:	60a3      	str	r3, [r4, #8]
 801a072:	7013      	strb	r3, [r2, #0]
 801a074:	65a3      	str	r3, [r4, #88]	@ 0x58
 801a076:	4b59      	ldr	r3, [pc, #356]	@ (801a1dc <_vfiprintf_r+0x224>)
 801a078:	2205      	movs	r2, #5
 801a07a:	0018      	movs	r0, r3
 801a07c:	7829      	ldrb	r1, [r5, #0]
 801a07e:	9305      	str	r3, [sp, #20]
 801a080:	f7fe fad3 	bl	801862a <memchr>
 801a084:	1c6e      	adds	r6, r5, #1
 801a086:	2800      	cmp	r0, #0
 801a088:	d11f      	bne.n	801a0ca <_vfiprintf_r+0x112>
 801a08a:	6822      	ldr	r2, [r4, #0]
 801a08c:	06d3      	lsls	r3, r2, #27
 801a08e:	d504      	bpl.n	801a09a <_vfiprintf_r+0xe2>
 801a090:	2353      	movs	r3, #83	@ 0x53
 801a092:	a904      	add	r1, sp, #16
 801a094:	185b      	adds	r3, r3, r1
 801a096:	2120      	movs	r1, #32
 801a098:	7019      	strb	r1, [r3, #0]
 801a09a:	0713      	lsls	r3, r2, #28
 801a09c:	d504      	bpl.n	801a0a8 <_vfiprintf_r+0xf0>
 801a09e:	2353      	movs	r3, #83	@ 0x53
 801a0a0:	a904      	add	r1, sp, #16
 801a0a2:	185b      	adds	r3, r3, r1
 801a0a4:	212b      	movs	r1, #43	@ 0x2b
 801a0a6:	7019      	strb	r1, [r3, #0]
 801a0a8:	782b      	ldrb	r3, [r5, #0]
 801a0aa:	2b2a      	cmp	r3, #42	@ 0x2a
 801a0ac:	d016      	beq.n	801a0dc <_vfiprintf_r+0x124>
 801a0ae:	002e      	movs	r6, r5
 801a0b0:	2100      	movs	r1, #0
 801a0b2:	200a      	movs	r0, #10
 801a0b4:	68e3      	ldr	r3, [r4, #12]
 801a0b6:	7832      	ldrb	r2, [r6, #0]
 801a0b8:	1c75      	adds	r5, r6, #1
 801a0ba:	3a30      	subs	r2, #48	@ 0x30
 801a0bc:	2a09      	cmp	r2, #9
 801a0be:	d950      	bls.n	801a162 <_vfiprintf_r+0x1aa>
 801a0c0:	2900      	cmp	r1, #0
 801a0c2:	d111      	bne.n	801a0e8 <_vfiprintf_r+0x130>
 801a0c4:	e017      	b.n	801a0f6 <_vfiprintf_r+0x13e>
 801a0c6:	3601      	adds	r6, #1
 801a0c8:	e7af      	b.n	801a02a <_vfiprintf_r+0x72>
 801a0ca:	9b05      	ldr	r3, [sp, #20]
 801a0cc:	6822      	ldr	r2, [r4, #0]
 801a0ce:	1ac0      	subs	r0, r0, r3
 801a0d0:	2301      	movs	r3, #1
 801a0d2:	4083      	lsls	r3, r0
 801a0d4:	4313      	orrs	r3, r2
 801a0d6:	0035      	movs	r5, r6
 801a0d8:	6023      	str	r3, [r4, #0]
 801a0da:	e7cc      	b.n	801a076 <_vfiprintf_r+0xbe>
 801a0dc:	9b07      	ldr	r3, [sp, #28]
 801a0de:	1d19      	adds	r1, r3, #4
 801a0e0:	681b      	ldr	r3, [r3, #0]
 801a0e2:	9107      	str	r1, [sp, #28]
 801a0e4:	2b00      	cmp	r3, #0
 801a0e6:	db01      	blt.n	801a0ec <_vfiprintf_r+0x134>
 801a0e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a0ea:	e004      	b.n	801a0f6 <_vfiprintf_r+0x13e>
 801a0ec:	425b      	negs	r3, r3
 801a0ee:	60e3      	str	r3, [r4, #12]
 801a0f0:	2302      	movs	r3, #2
 801a0f2:	4313      	orrs	r3, r2
 801a0f4:	6023      	str	r3, [r4, #0]
 801a0f6:	7833      	ldrb	r3, [r6, #0]
 801a0f8:	2b2e      	cmp	r3, #46	@ 0x2e
 801a0fa:	d10c      	bne.n	801a116 <_vfiprintf_r+0x15e>
 801a0fc:	7873      	ldrb	r3, [r6, #1]
 801a0fe:	2b2a      	cmp	r3, #42	@ 0x2a
 801a100:	d134      	bne.n	801a16c <_vfiprintf_r+0x1b4>
 801a102:	9b07      	ldr	r3, [sp, #28]
 801a104:	3602      	adds	r6, #2
 801a106:	1d1a      	adds	r2, r3, #4
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	9207      	str	r2, [sp, #28]
 801a10c:	2b00      	cmp	r3, #0
 801a10e:	da01      	bge.n	801a114 <_vfiprintf_r+0x15c>
 801a110:	2301      	movs	r3, #1
 801a112:	425b      	negs	r3, r3
 801a114:	9309      	str	r3, [sp, #36]	@ 0x24
 801a116:	4d32      	ldr	r5, [pc, #200]	@ (801a1e0 <_vfiprintf_r+0x228>)
 801a118:	2203      	movs	r2, #3
 801a11a:	0028      	movs	r0, r5
 801a11c:	7831      	ldrb	r1, [r6, #0]
 801a11e:	f7fe fa84 	bl	801862a <memchr>
 801a122:	2800      	cmp	r0, #0
 801a124:	d006      	beq.n	801a134 <_vfiprintf_r+0x17c>
 801a126:	2340      	movs	r3, #64	@ 0x40
 801a128:	1b40      	subs	r0, r0, r5
 801a12a:	4083      	lsls	r3, r0
 801a12c:	6822      	ldr	r2, [r4, #0]
 801a12e:	3601      	adds	r6, #1
 801a130:	4313      	orrs	r3, r2
 801a132:	6023      	str	r3, [r4, #0]
 801a134:	7831      	ldrb	r1, [r6, #0]
 801a136:	2206      	movs	r2, #6
 801a138:	482a      	ldr	r0, [pc, #168]	@ (801a1e4 <_vfiprintf_r+0x22c>)
 801a13a:	1c75      	adds	r5, r6, #1
 801a13c:	7621      	strb	r1, [r4, #24]
 801a13e:	f7fe fa74 	bl	801862a <memchr>
 801a142:	2800      	cmp	r0, #0
 801a144:	d040      	beq.n	801a1c8 <_vfiprintf_r+0x210>
 801a146:	4b28      	ldr	r3, [pc, #160]	@ (801a1e8 <_vfiprintf_r+0x230>)
 801a148:	2b00      	cmp	r3, #0
 801a14a:	d122      	bne.n	801a192 <_vfiprintf_r+0x1da>
 801a14c:	2207      	movs	r2, #7
 801a14e:	9b07      	ldr	r3, [sp, #28]
 801a150:	3307      	adds	r3, #7
 801a152:	4393      	bics	r3, r2
 801a154:	3308      	adds	r3, #8
 801a156:	9307      	str	r3, [sp, #28]
 801a158:	6963      	ldr	r3, [r4, #20]
 801a15a:	9a04      	ldr	r2, [sp, #16]
 801a15c:	189b      	adds	r3, r3, r2
 801a15e:	6163      	str	r3, [r4, #20]
 801a160:	e762      	b.n	801a028 <_vfiprintf_r+0x70>
 801a162:	4343      	muls	r3, r0
 801a164:	002e      	movs	r6, r5
 801a166:	2101      	movs	r1, #1
 801a168:	189b      	adds	r3, r3, r2
 801a16a:	e7a4      	b.n	801a0b6 <_vfiprintf_r+0xfe>
 801a16c:	2300      	movs	r3, #0
 801a16e:	200a      	movs	r0, #10
 801a170:	0019      	movs	r1, r3
 801a172:	3601      	adds	r6, #1
 801a174:	6063      	str	r3, [r4, #4]
 801a176:	7832      	ldrb	r2, [r6, #0]
 801a178:	1c75      	adds	r5, r6, #1
 801a17a:	3a30      	subs	r2, #48	@ 0x30
 801a17c:	2a09      	cmp	r2, #9
 801a17e:	d903      	bls.n	801a188 <_vfiprintf_r+0x1d0>
 801a180:	2b00      	cmp	r3, #0
 801a182:	d0c8      	beq.n	801a116 <_vfiprintf_r+0x15e>
 801a184:	9109      	str	r1, [sp, #36]	@ 0x24
 801a186:	e7c6      	b.n	801a116 <_vfiprintf_r+0x15e>
 801a188:	4341      	muls	r1, r0
 801a18a:	002e      	movs	r6, r5
 801a18c:	2301      	movs	r3, #1
 801a18e:	1889      	adds	r1, r1, r2
 801a190:	e7f1      	b.n	801a176 <_vfiprintf_r+0x1be>
 801a192:	aa07      	add	r2, sp, #28
 801a194:	9200      	str	r2, [sp, #0]
 801a196:	0021      	movs	r1, r4
 801a198:	003a      	movs	r2, r7
 801a19a:	4b14      	ldr	r3, [pc, #80]	@ (801a1ec <_vfiprintf_r+0x234>)
 801a19c:	9803      	ldr	r0, [sp, #12]
 801a19e:	f7fd fc51 	bl	8017a44 <_printf_float>
 801a1a2:	9004      	str	r0, [sp, #16]
 801a1a4:	9b04      	ldr	r3, [sp, #16]
 801a1a6:	3301      	adds	r3, #1
 801a1a8:	d1d6      	bne.n	801a158 <_vfiprintf_r+0x1a0>
 801a1aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a1ac:	07db      	lsls	r3, r3, #31
 801a1ae:	d405      	bmi.n	801a1bc <_vfiprintf_r+0x204>
 801a1b0:	89bb      	ldrh	r3, [r7, #12]
 801a1b2:	059b      	lsls	r3, r3, #22
 801a1b4:	d402      	bmi.n	801a1bc <_vfiprintf_r+0x204>
 801a1b6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801a1b8:	f7fe fa36 	bl	8018628 <__retarget_lock_release_recursive>
 801a1bc:	89bb      	ldrh	r3, [r7, #12]
 801a1be:	065b      	lsls	r3, r3, #25
 801a1c0:	d500      	bpl.n	801a1c4 <_vfiprintf_r+0x20c>
 801a1c2:	e71e      	b.n	801a002 <_vfiprintf_r+0x4a>
 801a1c4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801a1c6:	e71e      	b.n	801a006 <_vfiprintf_r+0x4e>
 801a1c8:	aa07      	add	r2, sp, #28
 801a1ca:	9200      	str	r2, [sp, #0]
 801a1cc:	0021      	movs	r1, r4
 801a1ce:	003a      	movs	r2, r7
 801a1d0:	4b06      	ldr	r3, [pc, #24]	@ (801a1ec <_vfiprintf_r+0x234>)
 801a1d2:	9803      	ldr	r0, [sp, #12]
 801a1d4:	f7fd fee4 	bl	8017fa0 <_printf_i>
 801a1d8:	e7e3      	b.n	801a1a2 <_vfiprintf_r+0x1ea>
 801a1da:	46c0      	nop			@ (mov r8, r8)
 801a1dc:	0801c3d0 	.word	0x0801c3d0
 801a1e0:	0801c3d6 	.word	0x0801c3d6
 801a1e4:	0801c3da 	.word	0x0801c3da
 801a1e8:	08017a45 	.word	0x08017a45
 801a1ec:	08019f93 	.word	0x08019f93

0801a1f0 <__sflush_r>:
 801a1f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a1f2:	220c      	movs	r2, #12
 801a1f4:	5e8b      	ldrsh	r3, [r1, r2]
 801a1f6:	0005      	movs	r5, r0
 801a1f8:	000c      	movs	r4, r1
 801a1fa:	071a      	lsls	r2, r3, #28
 801a1fc:	d456      	bmi.n	801a2ac <__sflush_r+0xbc>
 801a1fe:	684a      	ldr	r2, [r1, #4]
 801a200:	2a00      	cmp	r2, #0
 801a202:	dc02      	bgt.n	801a20a <__sflush_r+0x1a>
 801a204:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 801a206:	2a00      	cmp	r2, #0
 801a208:	dd4e      	ble.n	801a2a8 <__sflush_r+0xb8>
 801a20a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801a20c:	2f00      	cmp	r7, #0
 801a20e:	d04b      	beq.n	801a2a8 <__sflush_r+0xb8>
 801a210:	2200      	movs	r2, #0
 801a212:	2080      	movs	r0, #128	@ 0x80
 801a214:	682e      	ldr	r6, [r5, #0]
 801a216:	602a      	str	r2, [r5, #0]
 801a218:	001a      	movs	r2, r3
 801a21a:	0140      	lsls	r0, r0, #5
 801a21c:	6a21      	ldr	r1, [r4, #32]
 801a21e:	4002      	ands	r2, r0
 801a220:	4203      	tst	r3, r0
 801a222:	d033      	beq.n	801a28c <__sflush_r+0x9c>
 801a224:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a226:	89a3      	ldrh	r3, [r4, #12]
 801a228:	075b      	lsls	r3, r3, #29
 801a22a:	d506      	bpl.n	801a23a <__sflush_r+0x4a>
 801a22c:	6863      	ldr	r3, [r4, #4]
 801a22e:	1ad2      	subs	r2, r2, r3
 801a230:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a232:	2b00      	cmp	r3, #0
 801a234:	d001      	beq.n	801a23a <__sflush_r+0x4a>
 801a236:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a238:	1ad2      	subs	r2, r2, r3
 801a23a:	2300      	movs	r3, #0
 801a23c:	0028      	movs	r0, r5
 801a23e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801a240:	6a21      	ldr	r1, [r4, #32]
 801a242:	47b8      	blx	r7
 801a244:	89a2      	ldrh	r2, [r4, #12]
 801a246:	1c43      	adds	r3, r0, #1
 801a248:	d106      	bne.n	801a258 <__sflush_r+0x68>
 801a24a:	6829      	ldr	r1, [r5, #0]
 801a24c:	291d      	cmp	r1, #29
 801a24e:	d846      	bhi.n	801a2de <__sflush_r+0xee>
 801a250:	4b29      	ldr	r3, [pc, #164]	@ (801a2f8 <__sflush_r+0x108>)
 801a252:	410b      	asrs	r3, r1
 801a254:	07db      	lsls	r3, r3, #31
 801a256:	d442      	bmi.n	801a2de <__sflush_r+0xee>
 801a258:	2300      	movs	r3, #0
 801a25a:	6063      	str	r3, [r4, #4]
 801a25c:	6923      	ldr	r3, [r4, #16]
 801a25e:	6023      	str	r3, [r4, #0]
 801a260:	04d2      	lsls	r2, r2, #19
 801a262:	d505      	bpl.n	801a270 <__sflush_r+0x80>
 801a264:	1c43      	adds	r3, r0, #1
 801a266:	d102      	bne.n	801a26e <__sflush_r+0x7e>
 801a268:	682b      	ldr	r3, [r5, #0]
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	d100      	bne.n	801a270 <__sflush_r+0x80>
 801a26e:	6560      	str	r0, [r4, #84]	@ 0x54
 801a270:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a272:	602e      	str	r6, [r5, #0]
 801a274:	2900      	cmp	r1, #0
 801a276:	d017      	beq.n	801a2a8 <__sflush_r+0xb8>
 801a278:	0023      	movs	r3, r4
 801a27a:	3344      	adds	r3, #68	@ 0x44
 801a27c:	4299      	cmp	r1, r3
 801a27e:	d002      	beq.n	801a286 <__sflush_r+0x96>
 801a280:	0028      	movs	r0, r5
 801a282:	f7ff f869 	bl	8019358 <_free_r>
 801a286:	2300      	movs	r3, #0
 801a288:	6363      	str	r3, [r4, #52]	@ 0x34
 801a28a:	e00d      	b.n	801a2a8 <__sflush_r+0xb8>
 801a28c:	2301      	movs	r3, #1
 801a28e:	0028      	movs	r0, r5
 801a290:	47b8      	blx	r7
 801a292:	0002      	movs	r2, r0
 801a294:	1c43      	adds	r3, r0, #1
 801a296:	d1c6      	bne.n	801a226 <__sflush_r+0x36>
 801a298:	682b      	ldr	r3, [r5, #0]
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d0c3      	beq.n	801a226 <__sflush_r+0x36>
 801a29e:	2b1d      	cmp	r3, #29
 801a2a0:	d001      	beq.n	801a2a6 <__sflush_r+0xb6>
 801a2a2:	2b16      	cmp	r3, #22
 801a2a4:	d11a      	bne.n	801a2dc <__sflush_r+0xec>
 801a2a6:	602e      	str	r6, [r5, #0]
 801a2a8:	2000      	movs	r0, #0
 801a2aa:	e01e      	b.n	801a2ea <__sflush_r+0xfa>
 801a2ac:	690e      	ldr	r6, [r1, #16]
 801a2ae:	2e00      	cmp	r6, #0
 801a2b0:	d0fa      	beq.n	801a2a8 <__sflush_r+0xb8>
 801a2b2:	680f      	ldr	r7, [r1, #0]
 801a2b4:	600e      	str	r6, [r1, #0]
 801a2b6:	1bba      	subs	r2, r7, r6
 801a2b8:	9201      	str	r2, [sp, #4]
 801a2ba:	2200      	movs	r2, #0
 801a2bc:	079b      	lsls	r3, r3, #30
 801a2be:	d100      	bne.n	801a2c2 <__sflush_r+0xd2>
 801a2c0:	694a      	ldr	r2, [r1, #20]
 801a2c2:	60a2      	str	r2, [r4, #8]
 801a2c4:	9b01      	ldr	r3, [sp, #4]
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	ddee      	ble.n	801a2a8 <__sflush_r+0xb8>
 801a2ca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801a2cc:	0032      	movs	r2, r6
 801a2ce:	001f      	movs	r7, r3
 801a2d0:	0028      	movs	r0, r5
 801a2d2:	9b01      	ldr	r3, [sp, #4]
 801a2d4:	6a21      	ldr	r1, [r4, #32]
 801a2d6:	47b8      	blx	r7
 801a2d8:	2800      	cmp	r0, #0
 801a2da:	dc07      	bgt.n	801a2ec <__sflush_r+0xfc>
 801a2dc:	89a2      	ldrh	r2, [r4, #12]
 801a2de:	2340      	movs	r3, #64	@ 0x40
 801a2e0:	2001      	movs	r0, #1
 801a2e2:	4313      	orrs	r3, r2
 801a2e4:	b21b      	sxth	r3, r3
 801a2e6:	81a3      	strh	r3, [r4, #12]
 801a2e8:	4240      	negs	r0, r0
 801a2ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a2ec:	9b01      	ldr	r3, [sp, #4]
 801a2ee:	1836      	adds	r6, r6, r0
 801a2f0:	1a1b      	subs	r3, r3, r0
 801a2f2:	9301      	str	r3, [sp, #4]
 801a2f4:	e7e6      	b.n	801a2c4 <__sflush_r+0xd4>
 801a2f6:	46c0      	nop			@ (mov r8, r8)
 801a2f8:	dfbffffe 	.word	0xdfbffffe

0801a2fc <_fflush_r>:
 801a2fc:	690b      	ldr	r3, [r1, #16]
 801a2fe:	b570      	push	{r4, r5, r6, lr}
 801a300:	0005      	movs	r5, r0
 801a302:	000c      	movs	r4, r1
 801a304:	2b00      	cmp	r3, #0
 801a306:	d102      	bne.n	801a30e <_fflush_r+0x12>
 801a308:	2500      	movs	r5, #0
 801a30a:	0028      	movs	r0, r5
 801a30c:	bd70      	pop	{r4, r5, r6, pc}
 801a30e:	2800      	cmp	r0, #0
 801a310:	d004      	beq.n	801a31c <_fflush_r+0x20>
 801a312:	6a03      	ldr	r3, [r0, #32]
 801a314:	2b00      	cmp	r3, #0
 801a316:	d101      	bne.n	801a31c <_fflush_r+0x20>
 801a318:	f7fd ffe0 	bl	80182dc <__sinit>
 801a31c:	220c      	movs	r2, #12
 801a31e:	5ea3      	ldrsh	r3, [r4, r2]
 801a320:	2b00      	cmp	r3, #0
 801a322:	d0f1      	beq.n	801a308 <_fflush_r+0xc>
 801a324:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a326:	07d2      	lsls	r2, r2, #31
 801a328:	d404      	bmi.n	801a334 <_fflush_r+0x38>
 801a32a:	059b      	lsls	r3, r3, #22
 801a32c:	d402      	bmi.n	801a334 <_fflush_r+0x38>
 801a32e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a330:	f7fe f979 	bl	8018626 <__retarget_lock_acquire_recursive>
 801a334:	0028      	movs	r0, r5
 801a336:	0021      	movs	r1, r4
 801a338:	f7ff ff5a 	bl	801a1f0 <__sflush_r>
 801a33c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a33e:	0005      	movs	r5, r0
 801a340:	07db      	lsls	r3, r3, #31
 801a342:	d4e2      	bmi.n	801a30a <_fflush_r+0xe>
 801a344:	89a3      	ldrh	r3, [r4, #12]
 801a346:	059b      	lsls	r3, r3, #22
 801a348:	d4df      	bmi.n	801a30a <_fflush_r+0xe>
 801a34a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a34c:	f7fe f96c 	bl	8018628 <__retarget_lock_release_recursive>
 801a350:	e7db      	b.n	801a30a <_fflush_r+0xe>

0801a352 <__swbuf_r>:
 801a352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a354:	0006      	movs	r6, r0
 801a356:	000d      	movs	r5, r1
 801a358:	0014      	movs	r4, r2
 801a35a:	2800      	cmp	r0, #0
 801a35c:	d004      	beq.n	801a368 <__swbuf_r+0x16>
 801a35e:	6a03      	ldr	r3, [r0, #32]
 801a360:	2b00      	cmp	r3, #0
 801a362:	d101      	bne.n	801a368 <__swbuf_r+0x16>
 801a364:	f7fd ffba 	bl	80182dc <__sinit>
 801a368:	69a3      	ldr	r3, [r4, #24]
 801a36a:	60a3      	str	r3, [r4, #8]
 801a36c:	89a3      	ldrh	r3, [r4, #12]
 801a36e:	071b      	lsls	r3, r3, #28
 801a370:	d502      	bpl.n	801a378 <__swbuf_r+0x26>
 801a372:	6923      	ldr	r3, [r4, #16]
 801a374:	2b00      	cmp	r3, #0
 801a376:	d109      	bne.n	801a38c <__swbuf_r+0x3a>
 801a378:	0021      	movs	r1, r4
 801a37a:	0030      	movs	r0, r6
 801a37c:	f000 f82c 	bl	801a3d8 <__swsetup_r>
 801a380:	2800      	cmp	r0, #0
 801a382:	d003      	beq.n	801a38c <__swbuf_r+0x3a>
 801a384:	2501      	movs	r5, #1
 801a386:	426d      	negs	r5, r5
 801a388:	0028      	movs	r0, r5
 801a38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a38c:	6923      	ldr	r3, [r4, #16]
 801a38e:	6820      	ldr	r0, [r4, #0]
 801a390:	b2ef      	uxtb	r7, r5
 801a392:	1ac0      	subs	r0, r0, r3
 801a394:	6963      	ldr	r3, [r4, #20]
 801a396:	b2ed      	uxtb	r5, r5
 801a398:	4283      	cmp	r3, r0
 801a39a:	dc05      	bgt.n	801a3a8 <__swbuf_r+0x56>
 801a39c:	0021      	movs	r1, r4
 801a39e:	0030      	movs	r0, r6
 801a3a0:	f7ff ffac 	bl	801a2fc <_fflush_r>
 801a3a4:	2800      	cmp	r0, #0
 801a3a6:	d1ed      	bne.n	801a384 <__swbuf_r+0x32>
 801a3a8:	68a3      	ldr	r3, [r4, #8]
 801a3aa:	3001      	adds	r0, #1
 801a3ac:	3b01      	subs	r3, #1
 801a3ae:	60a3      	str	r3, [r4, #8]
 801a3b0:	6823      	ldr	r3, [r4, #0]
 801a3b2:	1c5a      	adds	r2, r3, #1
 801a3b4:	6022      	str	r2, [r4, #0]
 801a3b6:	701f      	strb	r7, [r3, #0]
 801a3b8:	6963      	ldr	r3, [r4, #20]
 801a3ba:	4283      	cmp	r3, r0
 801a3bc:	d004      	beq.n	801a3c8 <__swbuf_r+0x76>
 801a3be:	89a3      	ldrh	r3, [r4, #12]
 801a3c0:	07db      	lsls	r3, r3, #31
 801a3c2:	d5e1      	bpl.n	801a388 <__swbuf_r+0x36>
 801a3c4:	2d0a      	cmp	r5, #10
 801a3c6:	d1df      	bne.n	801a388 <__swbuf_r+0x36>
 801a3c8:	0021      	movs	r1, r4
 801a3ca:	0030      	movs	r0, r6
 801a3cc:	f7ff ff96 	bl	801a2fc <_fflush_r>
 801a3d0:	2800      	cmp	r0, #0
 801a3d2:	d0d9      	beq.n	801a388 <__swbuf_r+0x36>
 801a3d4:	e7d6      	b.n	801a384 <__swbuf_r+0x32>
	...

0801a3d8 <__swsetup_r>:
 801a3d8:	4b2d      	ldr	r3, [pc, #180]	@ (801a490 <__swsetup_r+0xb8>)
 801a3da:	b570      	push	{r4, r5, r6, lr}
 801a3dc:	0005      	movs	r5, r0
 801a3de:	6818      	ldr	r0, [r3, #0]
 801a3e0:	000c      	movs	r4, r1
 801a3e2:	2800      	cmp	r0, #0
 801a3e4:	d004      	beq.n	801a3f0 <__swsetup_r+0x18>
 801a3e6:	6a03      	ldr	r3, [r0, #32]
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	d101      	bne.n	801a3f0 <__swsetup_r+0x18>
 801a3ec:	f7fd ff76 	bl	80182dc <__sinit>
 801a3f0:	230c      	movs	r3, #12
 801a3f2:	5ee2      	ldrsh	r2, [r4, r3]
 801a3f4:	0713      	lsls	r3, r2, #28
 801a3f6:	d423      	bmi.n	801a440 <__swsetup_r+0x68>
 801a3f8:	06d3      	lsls	r3, r2, #27
 801a3fa:	d407      	bmi.n	801a40c <__swsetup_r+0x34>
 801a3fc:	2309      	movs	r3, #9
 801a3fe:	602b      	str	r3, [r5, #0]
 801a400:	2340      	movs	r3, #64	@ 0x40
 801a402:	2001      	movs	r0, #1
 801a404:	4313      	orrs	r3, r2
 801a406:	81a3      	strh	r3, [r4, #12]
 801a408:	4240      	negs	r0, r0
 801a40a:	e03a      	b.n	801a482 <__swsetup_r+0xaa>
 801a40c:	0752      	lsls	r2, r2, #29
 801a40e:	d513      	bpl.n	801a438 <__swsetup_r+0x60>
 801a410:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a412:	2900      	cmp	r1, #0
 801a414:	d008      	beq.n	801a428 <__swsetup_r+0x50>
 801a416:	0023      	movs	r3, r4
 801a418:	3344      	adds	r3, #68	@ 0x44
 801a41a:	4299      	cmp	r1, r3
 801a41c:	d002      	beq.n	801a424 <__swsetup_r+0x4c>
 801a41e:	0028      	movs	r0, r5
 801a420:	f7fe ff9a 	bl	8019358 <_free_r>
 801a424:	2300      	movs	r3, #0
 801a426:	6363      	str	r3, [r4, #52]	@ 0x34
 801a428:	2224      	movs	r2, #36	@ 0x24
 801a42a:	89a3      	ldrh	r3, [r4, #12]
 801a42c:	4393      	bics	r3, r2
 801a42e:	81a3      	strh	r3, [r4, #12]
 801a430:	2300      	movs	r3, #0
 801a432:	6063      	str	r3, [r4, #4]
 801a434:	6923      	ldr	r3, [r4, #16]
 801a436:	6023      	str	r3, [r4, #0]
 801a438:	2308      	movs	r3, #8
 801a43a:	89a2      	ldrh	r2, [r4, #12]
 801a43c:	4313      	orrs	r3, r2
 801a43e:	81a3      	strh	r3, [r4, #12]
 801a440:	6923      	ldr	r3, [r4, #16]
 801a442:	2b00      	cmp	r3, #0
 801a444:	d10b      	bne.n	801a45e <__swsetup_r+0x86>
 801a446:	21a0      	movs	r1, #160	@ 0xa0
 801a448:	2280      	movs	r2, #128	@ 0x80
 801a44a:	89a3      	ldrh	r3, [r4, #12]
 801a44c:	0089      	lsls	r1, r1, #2
 801a44e:	0092      	lsls	r2, r2, #2
 801a450:	400b      	ands	r3, r1
 801a452:	4293      	cmp	r3, r2
 801a454:	d003      	beq.n	801a45e <__swsetup_r+0x86>
 801a456:	0021      	movs	r1, r4
 801a458:	0028      	movs	r0, r5
 801a45a:	f000 f915 	bl	801a688 <__smakebuf_r>
 801a45e:	230c      	movs	r3, #12
 801a460:	5ee2      	ldrsh	r2, [r4, r3]
 801a462:	2101      	movs	r1, #1
 801a464:	0013      	movs	r3, r2
 801a466:	400b      	ands	r3, r1
 801a468:	420a      	tst	r2, r1
 801a46a:	d00b      	beq.n	801a484 <__swsetup_r+0xac>
 801a46c:	2300      	movs	r3, #0
 801a46e:	60a3      	str	r3, [r4, #8]
 801a470:	6963      	ldr	r3, [r4, #20]
 801a472:	425b      	negs	r3, r3
 801a474:	61a3      	str	r3, [r4, #24]
 801a476:	2000      	movs	r0, #0
 801a478:	6923      	ldr	r3, [r4, #16]
 801a47a:	4283      	cmp	r3, r0
 801a47c:	d101      	bne.n	801a482 <__swsetup_r+0xaa>
 801a47e:	0613      	lsls	r3, r2, #24
 801a480:	d4be      	bmi.n	801a400 <__swsetup_r+0x28>
 801a482:	bd70      	pop	{r4, r5, r6, pc}
 801a484:	0791      	lsls	r1, r2, #30
 801a486:	d400      	bmi.n	801a48a <__swsetup_r+0xb2>
 801a488:	6963      	ldr	r3, [r4, #20]
 801a48a:	60a3      	str	r3, [r4, #8]
 801a48c:	e7f3      	b.n	801a476 <__swsetup_r+0x9e>
 801a48e:	46c0      	nop			@ (mov r8, r8)
 801a490:	200001f4 	.word	0x200001f4

0801a494 <memmove>:
 801a494:	b510      	push	{r4, lr}
 801a496:	4288      	cmp	r0, r1
 801a498:	d806      	bhi.n	801a4a8 <memmove+0x14>
 801a49a:	2300      	movs	r3, #0
 801a49c:	429a      	cmp	r2, r3
 801a49e:	d008      	beq.n	801a4b2 <memmove+0x1e>
 801a4a0:	5ccc      	ldrb	r4, [r1, r3]
 801a4a2:	54c4      	strb	r4, [r0, r3]
 801a4a4:	3301      	adds	r3, #1
 801a4a6:	e7f9      	b.n	801a49c <memmove+0x8>
 801a4a8:	188b      	adds	r3, r1, r2
 801a4aa:	4298      	cmp	r0, r3
 801a4ac:	d2f5      	bcs.n	801a49a <memmove+0x6>
 801a4ae:	3a01      	subs	r2, #1
 801a4b0:	d200      	bcs.n	801a4b4 <memmove+0x20>
 801a4b2:	bd10      	pop	{r4, pc}
 801a4b4:	5c8b      	ldrb	r3, [r1, r2]
 801a4b6:	5483      	strb	r3, [r0, r2]
 801a4b8:	e7f9      	b.n	801a4ae <memmove+0x1a>
	...

0801a4bc <_sbrk_r>:
 801a4bc:	2300      	movs	r3, #0
 801a4be:	b570      	push	{r4, r5, r6, lr}
 801a4c0:	4d06      	ldr	r5, [pc, #24]	@ (801a4dc <_sbrk_r+0x20>)
 801a4c2:	0004      	movs	r4, r0
 801a4c4:	0008      	movs	r0, r1
 801a4c6:	602b      	str	r3, [r5, #0]
 801a4c8:	f7ee ff56 	bl	8009378 <_sbrk>
 801a4cc:	1c43      	adds	r3, r0, #1
 801a4ce:	d103      	bne.n	801a4d8 <_sbrk_r+0x1c>
 801a4d0:	682b      	ldr	r3, [r5, #0]
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	d000      	beq.n	801a4d8 <_sbrk_r+0x1c>
 801a4d6:	6023      	str	r3, [r4, #0]
 801a4d8:	bd70      	pop	{r4, r5, r6, pc}
 801a4da:	46c0      	nop			@ (mov r8, r8)
 801a4dc:	20004110 	.word	0x20004110

0801a4e0 <__assert_func>:
 801a4e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a4e2:	0014      	movs	r4, r2
 801a4e4:	001a      	movs	r2, r3
 801a4e6:	4b09      	ldr	r3, [pc, #36]	@ (801a50c <__assert_func+0x2c>)
 801a4e8:	0005      	movs	r5, r0
 801a4ea:	681b      	ldr	r3, [r3, #0]
 801a4ec:	000e      	movs	r6, r1
 801a4ee:	68d8      	ldr	r0, [r3, #12]
 801a4f0:	4b07      	ldr	r3, [pc, #28]	@ (801a510 <__assert_func+0x30>)
 801a4f2:	2c00      	cmp	r4, #0
 801a4f4:	d101      	bne.n	801a4fa <__assert_func+0x1a>
 801a4f6:	4b07      	ldr	r3, [pc, #28]	@ (801a514 <__assert_func+0x34>)
 801a4f8:	001c      	movs	r4, r3
 801a4fa:	4907      	ldr	r1, [pc, #28]	@ (801a518 <__assert_func+0x38>)
 801a4fc:	9301      	str	r3, [sp, #4]
 801a4fe:	9402      	str	r4, [sp, #8]
 801a500:	002b      	movs	r3, r5
 801a502:	9600      	str	r6, [sp, #0]
 801a504:	f000 f886 	bl	801a614 <fiprintf>
 801a508:	f000 f924 	bl	801a754 <abort>
 801a50c:	200001f4 	.word	0x200001f4
 801a510:	0801c3eb 	.word	0x0801c3eb
 801a514:	0801c426 	.word	0x0801c426
 801a518:	0801c3f8 	.word	0x0801c3f8

0801a51c <_calloc_r>:
 801a51c:	b570      	push	{r4, r5, r6, lr}
 801a51e:	0c0b      	lsrs	r3, r1, #16
 801a520:	0c15      	lsrs	r5, r2, #16
 801a522:	2b00      	cmp	r3, #0
 801a524:	d11e      	bne.n	801a564 <_calloc_r+0x48>
 801a526:	2d00      	cmp	r5, #0
 801a528:	d10c      	bne.n	801a544 <_calloc_r+0x28>
 801a52a:	b289      	uxth	r1, r1
 801a52c:	b294      	uxth	r4, r2
 801a52e:	434c      	muls	r4, r1
 801a530:	0021      	movs	r1, r4
 801a532:	f7fe ff87 	bl	8019444 <_malloc_r>
 801a536:	1e05      	subs	r5, r0, #0
 801a538:	d01a      	beq.n	801a570 <_calloc_r+0x54>
 801a53a:	0022      	movs	r2, r4
 801a53c:	2100      	movs	r1, #0
 801a53e:	f7fd ffb5 	bl	80184ac <memset>
 801a542:	e016      	b.n	801a572 <_calloc_r+0x56>
 801a544:	1c2b      	adds	r3, r5, #0
 801a546:	1c0c      	adds	r4, r1, #0
 801a548:	b289      	uxth	r1, r1
 801a54a:	b292      	uxth	r2, r2
 801a54c:	434a      	muls	r2, r1
 801a54e:	b29b      	uxth	r3, r3
 801a550:	b2a1      	uxth	r1, r4
 801a552:	4359      	muls	r1, r3
 801a554:	0c14      	lsrs	r4, r2, #16
 801a556:	190c      	adds	r4, r1, r4
 801a558:	0c23      	lsrs	r3, r4, #16
 801a55a:	d107      	bne.n	801a56c <_calloc_r+0x50>
 801a55c:	0424      	lsls	r4, r4, #16
 801a55e:	b292      	uxth	r2, r2
 801a560:	4314      	orrs	r4, r2
 801a562:	e7e5      	b.n	801a530 <_calloc_r+0x14>
 801a564:	2d00      	cmp	r5, #0
 801a566:	d101      	bne.n	801a56c <_calloc_r+0x50>
 801a568:	1c14      	adds	r4, r2, #0
 801a56a:	e7ed      	b.n	801a548 <_calloc_r+0x2c>
 801a56c:	230c      	movs	r3, #12
 801a56e:	6003      	str	r3, [r0, #0]
 801a570:	2500      	movs	r5, #0
 801a572:	0028      	movs	r0, r5
 801a574:	bd70      	pop	{r4, r5, r6, pc}

0801a576 <__ascii_mbtowc>:
 801a576:	b082      	sub	sp, #8
 801a578:	2900      	cmp	r1, #0
 801a57a:	d100      	bne.n	801a57e <__ascii_mbtowc+0x8>
 801a57c:	a901      	add	r1, sp, #4
 801a57e:	1e10      	subs	r0, r2, #0
 801a580:	d006      	beq.n	801a590 <__ascii_mbtowc+0x1a>
 801a582:	2b00      	cmp	r3, #0
 801a584:	d006      	beq.n	801a594 <__ascii_mbtowc+0x1e>
 801a586:	7813      	ldrb	r3, [r2, #0]
 801a588:	600b      	str	r3, [r1, #0]
 801a58a:	7810      	ldrb	r0, [r2, #0]
 801a58c:	1e43      	subs	r3, r0, #1
 801a58e:	4198      	sbcs	r0, r3
 801a590:	b002      	add	sp, #8
 801a592:	4770      	bx	lr
 801a594:	2002      	movs	r0, #2
 801a596:	4240      	negs	r0, r0
 801a598:	e7fa      	b.n	801a590 <__ascii_mbtowc+0x1a>

0801a59a <_realloc_r>:
 801a59a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a59c:	0006      	movs	r6, r0
 801a59e:	000c      	movs	r4, r1
 801a5a0:	0015      	movs	r5, r2
 801a5a2:	2900      	cmp	r1, #0
 801a5a4:	d105      	bne.n	801a5b2 <_realloc_r+0x18>
 801a5a6:	0011      	movs	r1, r2
 801a5a8:	f7fe ff4c 	bl	8019444 <_malloc_r>
 801a5ac:	0004      	movs	r4, r0
 801a5ae:	0020      	movs	r0, r4
 801a5b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a5b2:	2a00      	cmp	r2, #0
 801a5b4:	d103      	bne.n	801a5be <_realloc_r+0x24>
 801a5b6:	f7fe fecf 	bl	8019358 <_free_r>
 801a5ba:	2400      	movs	r4, #0
 801a5bc:	e7f7      	b.n	801a5ae <_realloc_r+0x14>
 801a5be:	f000 f8d0 	bl	801a762 <_malloc_usable_size_r>
 801a5c2:	0007      	movs	r7, r0
 801a5c4:	4285      	cmp	r5, r0
 801a5c6:	d802      	bhi.n	801a5ce <_realloc_r+0x34>
 801a5c8:	0843      	lsrs	r3, r0, #1
 801a5ca:	42ab      	cmp	r3, r5
 801a5cc:	d3ef      	bcc.n	801a5ae <_realloc_r+0x14>
 801a5ce:	0029      	movs	r1, r5
 801a5d0:	0030      	movs	r0, r6
 801a5d2:	f7fe ff37 	bl	8019444 <_malloc_r>
 801a5d6:	9001      	str	r0, [sp, #4]
 801a5d8:	2800      	cmp	r0, #0
 801a5da:	d0ee      	beq.n	801a5ba <_realloc_r+0x20>
 801a5dc:	002a      	movs	r2, r5
 801a5de:	42bd      	cmp	r5, r7
 801a5e0:	d900      	bls.n	801a5e4 <_realloc_r+0x4a>
 801a5e2:	003a      	movs	r2, r7
 801a5e4:	0021      	movs	r1, r4
 801a5e6:	9801      	ldr	r0, [sp, #4]
 801a5e8:	f7fe f82a 	bl	8018640 <memcpy>
 801a5ec:	0021      	movs	r1, r4
 801a5ee:	0030      	movs	r0, r6
 801a5f0:	f7fe feb2 	bl	8019358 <_free_r>
 801a5f4:	9c01      	ldr	r4, [sp, #4]
 801a5f6:	e7da      	b.n	801a5ae <_realloc_r+0x14>

0801a5f8 <__ascii_wctomb>:
 801a5f8:	0003      	movs	r3, r0
 801a5fa:	1e08      	subs	r0, r1, #0
 801a5fc:	d005      	beq.n	801a60a <__ascii_wctomb+0x12>
 801a5fe:	2aff      	cmp	r2, #255	@ 0xff
 801a600:	d904      	bls.n	801a60c <__ascii_wctomb+0x14>
 801a602:	228a      	movs	r2, #138	@ 0x8a
 801a604:	2001      	movs	r0, #1
 801a606:	601a      	str	r2, [r3, #0]
 801a608:	4240      	negs	r0, r0
 801a60a:	4770      	bx	lr
 801a60c:	2001      	movs	r0, #1
 801a60e:	700a      	strb	r2, [r1, #0]
 801a610:	e7fb      	b.n	801a60a <__ascii_wctomb+0x12>
	...

0801a614 <fiprintf>:
 801a614:	b40e      	push	{r1, r2, r3}
 801a616:	b517      	push	{r0, r1, r2, r4, lr}
 801a618:	4c05      	ldr	r4, [pc, #20]	@ (801a630 <fiprintf+0x1c>)
 801a61a:	ab05      	add	r3, sp, #20
 801a61c:	cb04      	ldmia	r3!, {r2}
 801a61e:	0001      	movs	r1, r0
 801a620:	6820      	ldr	r0, [r4, #0]
 801a622:	9301      	str	r3, [sp, #4]
 801a624:	f7ff fcc8 	bl	8019fb8 <_vfiprintf_r>
 801a628:	bc1e      	pop	{r1, r2, r3, r4}
 801a62a:	bc08      	pop	{r3}
 801a62c:	b003      	add	sp, #12
 801a62e:	4718      	bx	r3
 801a630:	200001f4 	.word	0x200001f4

0801a634 <__swhatbuf_r>:
 801a634:	b570      	push	{r4, r5, r6, lr}
 801a636:	000e      	movs	r6, r1
 801a638:	001d      	movs	r5, r3
 801a63a:	230e      	movs	r3, #14
 801a63c:	5ec9      	ldrsh	r1, [r1, r3]
 801a63e:	0014      	movs	r4, r2
 801a640:	b096      	sub	sp, #88	@ 0x58
 801a642:	2900      	cmp	r1, #0
 801a644:	da0c      	bge.n	801a660 <__swhatbuf_r+0x2c>
 801a646:	89b2      	ldrh	r2, [r6, #12]
 801a648:	2380      	movs	r3, #128	@ 0x80
 801a64a:	0011      	movs	r1, r2
 801a64c:	4019      	ands	r1, r3
 801a64e:	421a      	tst	r2, r3
 801a650:	d114      	bne.n	801a67c <__swhatbuf_r+0x48>
 801a652:	2380      	movs	r3, #128	@ 0x80
 801a654:	00db      	lsls	r3, r3, #3
 801a656:	2000      	movs	r0, #0
 801a658:	6029      	str	r1, [r5, #0]
 801a65a:	6023      	str	r3, [r4, #0]
 801a65c:	b016      	add	sp, #88	@ 0x58
 801a65e:	bd70      	pop	{r4, r5, r6, pc}
 801a660:	466a      	mov	r2, sp
 801a662:	f000 f853 	bl	801a70c <_fstat_r>
 801a666:	2800      	cmp	r0, #0
 801a668:	dbed      	blt.n	801a646 <__swhatbuf_r+0x12>
 801a66a:	23f0      	movs	r3, #240	@ 0xf0
 801a66c:	9901      	ldr	r1, [sp, #4]
 801a66e:	021b      	lsls	r3, r3, #8
 801a670:	4019      	ands	r1, r3
 801a672:	4b04      	ldr	r3, [pc, #16]	@ (801a684 <__swhatbuf_r+0x50>)
 801a674:	18c9      	adds	r1, r1, r3
 801a676:	424b      	negs	r3, r1
 801a678:	4159      	adcs	r1, r3
 801a67a:	e7ea      	b.n	801a652 <__swhatbuf_r+0x1e>
 801a67c:	2100      	movs	r1, #0
 801a67e:	2340      	movs	r3, #64	@ 0x40
 801a680:	e7e9      	b.n	801a656 <__swhatbuf_r+0x22>
 801a682:	46c0      	nop			@ (mov r8, r8)
 801a684:	ffffe000 	.word	0xffffe000

0801a688 <__smakebuf_r>:
 801a688:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a68a:	2602      	movs	r6, #2
 801a68c:	898b      	ldrh	r3, [r1, #12]
 801a68e:	0005      	movs	r5, r0
 801a690:	000c      	movs	r4, r1
 801a692:	b085      	sub	sp, #20
 801a694:	4233      	tst	r3, r6
 801a696:	d007      	beq.n	801a6a8 <__smakebuf_r+0x20>
 801a698:	0023      	movs	r3, r4
 801a69a:	3347      	adds	r3, #71	@ 0x47
 801a69c:	6023      	str	r3, [r4, #0]
 801a69e:	6123      	str	r3, [r4, #16]
 801a6a0:	2301      	movs	r3, #1
 801a6a2:	6163      	str	r3, [r4, #20]
 801a6a4:	b005      	add	sp, #20
 801a6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a6a8:	ab03      	add	r3, sp, #12
 801a6aa:	aa02      	add	r2, sp, #8
 801a6ac:	f7ff ffc2 	bl	801a634 <__swhatbuf_r>
 801a6b0:	9f02      	ldr	r7, [sp, #8]
 801a6b2:	9001      	str	r0, [sp, #4]
 801a6b4:	0039      	movs	r1, r7
 801a6b6:	0028      	movs	r0, r5
 801a6b8:	f7fe fec4 	bl	8019444 <_malloc_r>
 801a6bc:	2800      	cmp	r0, #0
 801a6be:	d108      	bne.n	801a6d2 <__smakebuf_r+0x4a>
 801a6c0:	220c      	movs	r2, #12
 801a6c2:	5ea3      	ldrsh	r3, [r4, r2]
 801a6c4:	059a      	lsls	r2, r3, #22
 801a6c6:	d4ed      	bmi.n	801a6a4 <__smakebuf_r+0x1c>
 801a6c8:	2203      	movs	r2, #3
 801a6ca:	4393      	bics	r3, r2
 801a6cc:	431e      	orrs	r6, r3
 801a6ce:	81a6      	strh	r6, [r4, #12]
 801a6d0:	e7e2      	b.n	801a698 <__smakebuf_r+0x10>
 801a6d2:	2380      	movs	r3, #128	@ 0x80
 801a6d4:	89a2      	ldrh	r2, [r4, #12]
 801a6d6:	6020      	str	r0, [r4, #0]
 801a6d8:	4313      	orrs	r3, r2
 801a6da:	81a3      	strh	r3, [r4, #12]
 801a6dc:	9b03      	ldr	r3, [sp, #12]
 801a6de:	6120      	str	r0, [r4, #16]
 801a6e0:	6167      	str	r7, [r4, #20]
 801a6e2:	2b00      	cmp	r3, #0
 801a6e4:	d00c      	beq.n	801a700 <__smakebuf_r+0x78>
 801a6e6:	0028      	movs	r0, r5
 801a6e8:	230e      	movs	r3, #14
 801a6ea:	5ee1      	ldrsh	r1, [r4, r3]
 801a6ec:	f000 f820 	bl	801a730 <_isatty_r>
 801a6f0:	2800      	cmp	r0, #0
 801a6f2:	d005      	beq.n	801a700 <__smakebuf_r+0x78>
 801a6f4:	2303      	movs	r3, #3
 801a6f6:	89a2      	ldrh	r2, [r4, #12]
 801a6f8:	439a      	bics	r2, r3
 801a6fa:	3b02      	subs	r3, #2
 801a6fc:	4313      	orrs	r3, r2
 801a6fe:	81a3      	strh	r3, [r4, #12]
 801a700:	89a3      	ldrh	r3, [r4, #12]
 801a702:	9a01      	ldr	r2, [sp, #4]
 801a704:	4313      	orrs	r3, r2
 801a706:	81a3      	strh	r3, [r4, #12]
 801a708:	e7cc      	b.n	801a6a4 <__smakebuf_r+0x1c>
	...

0801a70c <_fstat_r>:
 801a70c:	2300      	movs	r3, #0
 801a70e:	b570      	push	{r4, r5, r6, lr}
 801a710:	4d06      	ldr	r5, [pc, #24]	@ (801a72c <_fstat_r+0x20>)
 801a712:	0004      	movs	r4, r0
 801a714:	0008      	movs	r0, r1
 801a716:	0011      	movs	r1, r2
 801a718:	602b      	str	r3, [r5, #0]
 801a71a:	f7ee fe0b 	bl	8009334 <_fstat>
 801a71e:	1c43      	adds	r3, r0, #1
 801a720:	d103      	bne.n	801a72a <_fstat_r+0x1e>
 801a722:	682b      	ldr	r3, [r5, #0]
 801a724:	2b00      	cmp	r3, #0
 801a726:	d000      	beq.n	801a72a <_fstat_r+0x1e>
 801a728:	6023      	str	r3, [r4, #0]
 801a72a:	bd70      	pop	{r4, r5, r6, pc}
 801a72c:	20004110 	.word	0x20004110

0801a730 <_isatty_r>:
 801a730:	2300      	movs	r3, #0
 801a732:	b570      	push	{r4, r5, r6, lr}
 801a734:	4d06      	ldr	r5, [pc, #24]	@ (801a750 <_isatty_r+0x20>)
 801a736:	0004      	movs	r4, r0
 801a738:	0008      	movs	r0, r1
 801a73a:	602b      	str	r3, [r5, #0]
 801a73c:	f7ee fe08 	bl	8009350 <_isatty>
 801a740:	1c43      	adds	r3, r0, #1
 801a742:	d103      	bne.n	801a74c <_isatty_r+0x1c>
 801a744:	682b      	ldr	r3, [r5, #0]
 801a746:	2b00      	cmp	r3, #0
 801a748:	d000      	beq.n	801a74c <_isatty_r+0x1c>
 801a74a:	6023      	str	r3, [r4, #0]
 801a74c:	bd70      	pop	{r4, r5, r6, pc}
 801a74e:	46c0      	nop			@ (mov r8, r8)
 801a750:	20004110 	.word	0x20004110

0801a754 <abort>:
 801a754:	2006      	movs	r0, #6
 801a756:	b510      	push	{r4, lr}
 801a758:	f000 f834 	bl	801a7c4 <raise>
 801a75c:	2001      	movs	r0, #1
 801a75e:	f7ee fdb5 	bl	80092cc <_exit>

0801a762 <_malloc_usable_size_r>:
 801a762:	1f0b      	subs	r3, r1, #4
 801a764:	681b      	ldr	r3, [r3, #0]
 801a766:	1f18      	subs	r0, r3, #4
 801a768:	2b00      	cmp	r3, #0
 801a76a:	da01      	bge.n	801a770 <_malloc_usable_size_r+0xe>
 801a76c:	580b      	ldr	r3, [r1, r0]
 801a76e:	18c0      	adds	r0, r0, r3
 801a770:	4770      	bx	lr

0801a772 <_raise_r>:
 801a772:	b570      	push	{r4, r5, r6, lr}
 801a774:	0004      	movs	r4, r0
 801a776:	000d      	movs	r5, r1
 801a778:	291f      	cmp	r1, #31
 801a77a:	d904      	bls.n	801a786 <_raise_r+0x14>
 801a77c:	2316      	movs	r3, #22
 801a77e:	6003      	str	r3, [r0, #0]
 801a780:	2001      	movs	r0, #1
 801a782:	4240      	negs	r0, r0
 801a784:	bd70      	pop	{r4, r5, r6, pc}
 801a786:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801a788:	2b00      	cmp	r3, #0
 801a78a:	d004      	beq.n	801a796 <_raise_r+0x24>
 801a78c:	008a      	lsls	r2, r1, #2
 801a78e:	189b      	adds	r3, r3, r2
 801a790:	681a      	ldr	r2, [r3, #0]
 801a792:	2a00      	cmp	r2, #0
 801a794:	d108      	bne.n	801a7a8 <_raise_r+0x36>
 801a796:	0020      	movs	r0, r4
 801a798:	f000 f830 	bl	801a7fc <_getpid_r>
 801a79c:	002a      	movs	r2, r5
 801a79e:	0001      	movs	r1, r0
 801a7a0:	0020      	movs	r0, r4
 801a7a2:	f000 f819 	bl	801a7d8 <_kill_r>
 801a7a6:	e7ed      	b.n	801a784 <_raise_r+0x12>
 801a7a8:	2a01      	cmp	r2, #1
 801a7aa:	d009      	beq.n	801a7c0 <_raise_r+0x4e>
 801a7ac:	1c51      	adds	r1, r2, #1
 801a7ae:	d103      	bne.n	801a7b8 <_raise_r+0x46>
 801a7b0:	2316      	movs	r3, #22
 801a7b2:	6003      	str	r3, [r0, #0]
 801a7b4:	2001      	movs	r0, #1
 801a7b6:	e7e5      	b.n	801a784 <_raise_r+0x12>
 801a7b8:	2100      	movs	r1, #0
 801a7ba:	0028      	movs	r0, r5
 801a7bc:	6019      	str	r1, [r3, #0]
 801a7be:	4790      	blx	r2
 801a7c0:	2000      	movs	r0, #0
 801a7c2:	e7df      	b.n	801a784 <_raise_r+0x12>

0801a7c4 <raise>:
 801a7c4:	b510      	push	{r4, lr}
 801a7c6:	4b03      	ldr	r3, [pc, #12]	@ (801a7d4 <raise+0x10>)
 801a7c8:	0001      	movs	r1, r0
 801a7ca:	6818      	ldr	r0, [r3, #0]
 801a7cc:	f7ff ffd1 	bl	801a772 <_raise_r>
 801a7d0:	bd10      	pop	{r4, pc}
 801a7d2:	46c0      	nop			@ (mov r8, r8)
 801a7d4:	200001f4 	.word	0x200001f4

0801a7d8 <_kill_r>:
 801a7d8:	2300      	movs	r3, #0
 801a7da:	b570      	push	{r4, r5, r6, lr}
 801a7dc:	4d06      	ldr	r5, [pc, #24]	@ (801a7f8 <_kill_r+0x20>)
 801a7de:	0004      	movs	r4, r0
 801a7e0:	0008      	movs	r0, r1
 801a7e2:	0011      	movs	r1, r2
 801a7e4:	602b      	str	r3, [r5, #0]
 801a7e6:	f7ee fd61 	bl	80092ac <_kill>
 801a7ea:	1c43      	adds	r3, r0, #1
 801a7ec:	d103      	bne.n	801a7f6 <_kill_r+0x1e>
 801a7ee:	682b      	ldr	r3, [r5, #0]
 801a7f0:	2b00      	cmp	r3, #0
 801a7f2:	d000      	beq.n	801a7f6 <_kill_r+0x1e>
 801a7f4:	6023      	str	r3, [r4, #0]
 801a7f6:	bd70      	pop	{r4, r5, r6, pc}
 801a7f8:	20004110 	.word	0x20004110

0801a7fc <_getpid_r>:
 801a7fc:	b510      	push	{r4, lr}
 801a7fe:	f7ee fd4f 	bl	80092a0 <_getpid>
 801a802:	bd10      	pop	{r4, pc}

0801a804 <log10>:
 801a804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a806:	0004      	movs	r4, r0
 801a808:	000d      	movs	r5, r1
 801a80a:	f000 fa0b 	bl	801ac24 <__ieee754_log10>
 801a80e:	0022      	movs	r2, r4
 801a810:	0006      	movs	r6, r0
 801a812:	000f      	movs	r7, r1
 801a814:	002b      	movs	r3, r5
 801a816:	0020      	movs	r0, r4
 801a818:	0029      	movs	r1, r5
 801a81a:	f7e8 fcf1 	bl	8003200 <__aeabi_dcmpun>
 801a81e:	2800      	cmp	r0, #0
 801a820:	d115      	bne.n	801a84e <log10+0x4a>
 801a822:	2200      	movs	r2, #0
 801a824:	2300      	movs	r3, #0
 801a826:	0020      	movs	r0, r4
 801a828:	0029      	movs	r1, r5
 801a82a:	f7e5 fe1f 	bl	800046c <__aeabi_dcmple>
 801a82e:	2800      	cmp	r0, #0
 801a830:	d00d      	beq.n	801a84e <log10+0x4a>
 801a832:	2200      	movs	r2, #0
 801a834:	2300      	movs	r3, #0
 801a836:	0020      	movs	r0, r4
 801a838:	0029      	movs	r1, r5
 801a83a:	f7e5 fe07 	bl	800044c <__aeabi_dcmpeq>
 801a83e:	2800      	cmp	r0, #0
 801a840:	d008      	beq.n	801a854 <log10+0x50>
 801a842:	f7fd fec5 	bl	80185d0 <__errno>
 801a846:	2322      	movs	r3, #34	@ 0x22
 801a848:	2600      	movs	r6, #0
 801a84a:	4f07      	ldr	r7, [pc, #28]	@ (801a868 <log10+0x64>)
 801a84c:	6003      	str	r3, [r0, #0]
 801a84e:	0030      	movs	r0, r6
 801a850:	0039      	movs	r1, r7
 801a852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a854:	f7fd febc 	bl	80185d0 <__errno>
 801a858:	2321      	movs	r3, #33	@ 0x21
 801a85a:	6003      	str	r3, [r0, #0]
 801a85c:	4803      	ldr	r0, [pc, #12]	@ (801a86c <log10+0x68>)
 801a85e:	f000 f871 	bl	801a944 <nan>
 801a862:	0006      	movs	r6, r0
 801a864:	000f      	movs	r7, r1
 801a866:	e7f2      	b.n	801a84e <log10+0x4a>
 801a868:	fff00000 	.word	0xfff00000
 801a86c:	0801c426 	.word	0x0801c426

0801a870 <sqrt>:
 801a870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a872:	0004      	movs	r4, r0
 801a874:	000d      	movs	r5, r1
 801a876:	f000 f875 	bl	801a964 <__ieee754_sqrt>
 801a87a:	0022      	movs	r2, r4
 801a87c:	0006      	movs	r6, r0
 801a87e:	000f      	movs	r7, r1
 801a880:	002b      	movs	r3, r5
 801a882:	0020      	movs	r0, r4
 801a884:	0029      	movs	r1, r5
 801a886:	f7e8 fcbb 	bl	8003200 <__aeabi_dcmpun>
 801a88a:	2800      	cmp	r0, #0
 801a88c:	d113      	bne.n	801a8b6 <sqrt+0x46>
 801a88e:	2200      	movs	r2, #0
 801a890:	2300      	movs	r3, #0
 801a892:	0020      	movs	r0, r4
 801a894:	0029      	movs	r1, r5
 801a896:	f7e5 fddf 	bl	8000458 <__aeabi_dcmplt>
 801a89a:	2800      	cmp	r0, #0
 801a89c:	d00b      	beq.n	801a8b6 <sqrt+0x46>
 801a89e:	f7fd fe97 	bl	80185d0 <__errno>
 801a8a2:	2321      	movs	r3, #33	@ 0x21
 801a8a4:	2200      	movs	r2, #0
 801a8a6:	6003      	str	r3, [r0, #0]
 801a8a8:	2300      	movs	r3, #0
 801a8aa:	0010      	movs	r0, r2
 801a8ac:	0019      	movs	r1, r3
 801a8ae:	f7e7 f9ff 	bl	8001cb0 <__aeabi_ddiv>
 801a8b2:	0006      	movs	r6, r0
 801a8b4:	000f      	movs	r7, r1
 801a8b6:	0030      	movs	r0, r6
 801a8b8:	0039      	movs	r1, r7
 801a8ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a8bc <expf>:
 801a8bc:	b570      	push	{r4, r5, r6, lr}
 801a8be:	1c04      	adds	r4, r0, #0
 801a8c0:	f000 fa2a 	bl	801ad18 <__ieee754_expf>
 801a8c4:	1c05      	adds	r5, r0, #0
 801a8c6:	1c20      	adds	r0, r4, #0
 801a8c8:	f000 f842 	bl	801a950 <finitef>
 801a8cc:	2800      	cmp	r0, #0
 801a8ce:	d00b      	beq.n	801a8e8 <expf+0x2c>
 801a8d0:	490c      	ldr	r1, [pc, #48]	@ (801a904 <expf+0x48>)
 801a8d2:	1c20      	adds	r0, r4, #0
 801a8d4:	f7e5 fe0e 	bl	80004f4 <__aeabi_fcmpgt>
 801a8d8:	2800      	cmp	r0, #0
 801a8da:	d007      	beq.n	801a8ec <expf+0x30>
 801a8dc:	f7fd fe78 	bl	80185d0 <__errno>
 801a8e0:	25ff      	movs	r5, #255	@ 0xff
 801a8e2:	2322      	movs	r3, #34	@ 0x22
 801a8e4:	05ed      	lsls	r5, r5, #23
 801a8e6:	6003      	str	r3, [r0, #0]
 801a8e8:	1c28      	adds	r0, r5, #0
 801a8ea:	bd70      	pop	{r4, r5, r6, pc}
 801a8ec:	4906      	ldr	r1, [pc, #24]	@ (801a908 <expf+0x4c>)
 801a8ee:	1c20      	adds	r0, r4, #0
 801a8f0:	f7e5 fdec 	bl	80004cc <__aeabi_fcmplt>
 801a8f4:	2800      	cmp	r0, #0
 801a8f6:	d0f7      	beq.n	801a8e8 <expf+0x2c>
 801a8f8:	f7fd fe6a 	bl	80185d0 <__errno>
 801a8fc:	2322      	movs	r3, #34	@ 0x22
 801a8fe:	2500      	movs	r5, #0
 801a900:	6003      	str	r3, [r0, #0]
 801a902:	e7f1      	b.n	801a8e8 <expf+0x2c>
 801a904:	42b17217 	.word	0x42b17217
 801a908:	c2cff1b5 	.word	0xc2cff1b5

0801a90c <sqrtf>:
 801a90c:	b570      	push	{r4, r5, r6, lr}
 801a90e:	1c05      	adds	r5, r0, #0
 801a910:	f000 f910 	bl	801ab34 <__ieee754_sqrtf>
 801a914:	1c29      	adds	r1, r5, #0
 801a916:	1c04      	adds	r4, r0, #0
 801a918:	1c28      	adds	r0, r5, #0
 801a91a:	f7e6 fda1 	bl	8001460 <__aeabi_fcmpun>
 801a91e:	2800      	cmp	r0, #0
 801a920:	d10e      	bne.n	801a940 <sqrtf+0x34>
 801a922:	2100      	movs	r1, #0
 801a924:	1c28      	adds	r0, r5, #0
 801a926:	f7e5 fdd1 	bl	80004cc <__aeabi_fcmplt>
 801a92a:	2800      	cmp	r0, #0
 801a92c:	d008      	beq.n	801a940 <sqrtf+0x34>
 801a92e:	f7fd fe4f 	bl	80185d0 <__errno>
 801a932:	2321      	movs	r3, #33	@ 0x21
 801a934:	2100      	movs	r1, #0
 801a936:	6003      	str	r3, [r0, #0]
 801a938:	1c08      	adds	r0, r1, #0
 801a93a:	f7e6 f8c9 	bl	8000ad0 <__aeabi_fdiv>
 801a93e:	1c04      	adds	r4, r0, #0
 801a940:	1c20      	adds	r0, r4, #0
 801a942:	bd70      	pop	{r4, r5, r6, pc}

0801a944 <nan>:
 801a944:	2000      	movs	r0, #0
 801a946:	4901      	ldr	r1, [pc, #4]	@ (801a94c <nan+0x8>)
 801a948:	4770      	bx	lr
 801a94a:	46c0      	nop			@ (mov r8, r8)
 801a94c:	7ff80000 	.word	0x7ff80000

0801a950 <finitef>:
 801a950:	22ff      	movs	r2, #255	@ 0xff
 801a952:	0043      	lsls	r3, r0, #1
 801a954:	085b      	lsrs	r3, r3, #1
 801a956:	2001      	movs	r0, #1
 801a958:	05d2      	lsls	r2, r2, #23
 801a95a:	4293      	cmp	r3, r2
 801a95c:	db00      	blt.n	801a960 <finitef+0x10>
 801a95e:	2000      	movs	r0, #0
 801a960:	4770      	bx	lr
	...

0801a964 <__ieee754_sqrt>:
 801a964:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a966:	000a      	movs	r2, r1
 801a968:	000d      	movs	r5, r1
 801a96a:	496d      	ldr	r1, [pc, #436]	@ (801ab20 <__ieee754_sqrt+0x1bc>)
 801a96c:	0004      	movs	r4, r0
 801a96e:	0003      	movs	r3, r0
 801a970:	0008      	movs	r0, r1
 801a972:	b087      	sub	sp, #28
 801a974:	4028      	ands	r0, r5
 801a976:	4288      	cmp	r0, r1
 801a978:	d111      	bne.n	801a99e <__ieee754_sqrt+0x3a>
 801a97a:	0022      	movs	r2, r4
 801a97c:	002b      	movs	r3, r5
 801a97e:	0020      	movs	r0, r4
 801a980:	0029      	movs	r1, r5
 801a982:	f7e7 fdd9 	bl	8002538 <__aeabi_dmul>
 801a986:	0002      	movs	r2, r0
 801a988:	000b      	movs	r3, r1
 801a98a:	0020      	movs	r0, r4
 801a98c:	0029      	movs	r1, r5
 801a98e:	f7e6 fe2b 	bl	80015e8 <__aeabi_dadd>
 801a992:	0004      	movs	r4, r0
 801a994:	000d      	movs	r5, r1
 801a996:	0020      	movs	r0, r4
 801a998:	0029      	movs	r1, r5
 801a99a:	b007      	add	sp, #28
 801a99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a99e:	2d00      	cmp	r5, #0
 801a9a0:	dc11      	bgt.n	801a9c6 <__ieee754_sqrt+0x62>
 801a9a2:	0069      	lsls	r1, r5, #1
 801a9a4:	0849      	lsrs	r1, r1, #1
 801a9a6:	4321      	orrs	r1, r4
 801a9a8:	d0f5      	beq.n	801a996 <__ieee754_sqrt+0x32>
 801a9aa:	2000      	movs	r0, #0
 801a9ac:	4285      	cmp	r5, r0
 801a9ae:	d010      	beq.n	801a9d2 <__ieee754_sqrt+0x6e>
 801a9b0:	0022      	movs	r2, r4
 801a9b2:	002b      	movs	r3, r5
 801a9b4:	0020      	movs	r0, r4
 801a9b6:	0029      	movs	r1, r5
 801a9b8:	f7e8 f886 	bl	8002ac8 <__aeabi_dsub>
 801a9bc:	0002      	movs	r2, r0
 801a9be:	000b      	movs	r3, r1
 801a9c0:	f7e7 f976 	bl	8001cb0 <__aeabi_ddiv>
 801a9c4:	e7e5      	b.n	801a992 <__ieee754_sqrt+0x2e>
 801a9c6:	1528      	asrs	r0, r5, #20
 801a9c8:	d115      	bne.n	801a9f6 <__ieee754_sqrt+0x92>
 801a9ca:	2480      	movs	r4, #128	@ 0x80
 801a9cc:	2100      	movs	r1, #0
 801a9ce:	0364      	lsls	r4, r4, #13
 801a9d0:	e007      	b.n	801a9e2 <__ieee754_sqrt+0x7e>
 801a9d2:	0ada      	lsrs	r2, r3, #11
 801a9d4:	3815      	subs	r0, #21
 801a9d6:	055b      	lsls	r3, r3, #21
 801a9d8:	2a00      	cmp	r2, #0
 801a9da:	d0fa      	beq.n	801a9d2 <__ieee754_sqrt+0x6e>
 801a9dc:	e7f5      	b.n	801a9ca <__ieee754_sqrt+0x66>
 801a9de:	0052      	lsls	r2, r2, #1
 801a9e0:	3101      	adds	r1, #1
 801a9e2:	4222      	tst	r2, r4
 801a9e4:	d0fb      	beq.n	801a9de <__ieee754_sqrt+0x7a>
 801a9e6:	1e4c      	subs	r4, r1, #1
 801a9e8:	1b00      	subs	r0, r0, r4
 801a9ea:	2420      	movs	r4, #32
 801a9ec:	001d      	movs	r5, r3
 801a9ee:	1a64      	subs	r4, r4, r1
 801a9f0:	40e5      	lsrs	r5, r4
 801a9f2:	408b      	lsls	r3, r1
 801a9f4:	432a      	orrs	r2, r5
 801a9f6:	494b      	ldr	r1, [pc, #300]	@ (801ab24 <__ieee754_sqrt+0x1c0>)
 801a9f8:	0312      	lsls	r2, r2, #12
 801a9fa:	1844      	adds	r4, r0, r1
 801a9fc:	2180      	movs	r1, #128	@ 0x80
 801a9fe:	0b12      	lsrs	r2, r2, #12
 801aa00:	0349      	lsls	r1, r1, #13
 801aa02:	4311      	orrs	r1, r2
 801aa04:	07c0      	lsls	r0, r0, #31
 801aa06:	d403      	bmi.n	801aa10 <__ieee754_sqrt+0xac>
 801aa08:	0fda      	lsrs	r2, r3, #31
 801aa0a:	0049      	lsls	r1, r1, #1
 801aa0c:	1851      	adds	r1, r2, r1
 801aa0e:	005b      	lsls	r3, r3, #1
 801aa10:	2500      	movs	r5, #0
 801aa12:	1062      	asrs	r2, r4, #1
 801aa14:	0049      	lsls	r1, r1, #1
 801aa16:	2480      	movs	r4, #128	@ 0x80
 801aa18:	9205      	str	r2, [sp, #20]
 801aa1a:	0fda      	lsrs	r2, r3, #31
 801aa1c:	1852      	adds	r2, r2, r1
 801aa1e:	2016      	movs	r0, #22
 801aa20:	0029      	movs	r1, r5
 801aa22:	005b      	lsls	r3, r3, #1
 801aa24:	03a4      	lsls	r4, r4, #14
 801aa26:	190e      	adds	r6, r1, r4
 801aa28:	4296      	cmp	r6, r2
 801aa2a:	dc02      	bgt.n	801aa32 <__ieee754_sqrt+0xce>
 801aa2c:	1931      	adds	r1, r6, r4
 801aa2e:	1b92      	subs	r2, r2, r6
 801aa30:	192d      	adds	r5, r5, r4
 801aa32:	0fde      	lsrs	r6, r3, #31
 801aa34:	0052      	lsls	r2, r2, #1
 801aa36:	3801      	subs	r0, #1
 801aa38:	1992      	adds	r2, r2, r6
 801aa3a:	005b      	lsls	r3, r3, #1
 801aa3c:	0864      	lsrs	r4, r4, #1
 801aa3e:	2800      	cmp	r0, #0
 801aa40:	d1f1      	bne.n	801aa26 <__ieee754_sqrt+0xc2>
 801aa42:	2620      	movs	r6, #32
 801aa44:	2780      	movs	r7, #128	@ 0x80
 801aa46:	0004      	movs	r4, r0
 801aa48:	9604      	str	r6, [sp, #16]
 801aa4a:	063f      	lsls	r7, r7, #24
 801aa4c:	19c6      	adds	r6, r0, r7
 801aa4e:	46b4      	mov	ip, r6
 801aa50:	4291      	cmp	r1, r2
 801aa52:	db02      	blt.n	801aa5a <__ieee754_sqrt+0xf6>
 801aa54:	d114      	bne.n	801aa80 <__ieee754_sqrt+0x11c>
 801aa56:	429e      	cmp	r6, r3
 801aa58:	d812      	bhi.n	801aa80 <__ieee754_sqrt+0x11c>
 801aa5a:	4660      	mov	r0, ip
 801aa5c:	4666      	mov	r6, ip
 801aa5e:	19c0      	adds	r0, r0, r7
 801aa60:	9100      	str	r1, [sp, #0]
 801aa62:	2e00      	cmp	r6, #0
 801aa64:	da03      	bge.n	801aa6e <__ieee754_sqrt+0x10a>
 801aa66:	43c6      	mvns	r6, r0
 801aa68:	0ff6      	lsrs	r6, r6, #31
 801aa6a:	198e      	adds	r6, r1, r6
 801aa6c:	9600      	str	r6, [sp, #0]
 801aa6e:	1a52      	subs	r2, r2, r1
 801aa70:	4563      	cmp	r3, ip
 801aa72:	4189      	sbcs	r1, r1
 801aa74:	4249      	negs	r1, r1
 801aa76:	1a52      	subs	r2, r2, r1
 801aa78:	4661      	mov	r1, ip
 801aa7a:	1a5b      	subs	r3, r3, r1
 801aa7c:	9900      	ldr	r1, [sp, #0]
 801aa7e:	19e4      	adds	r4, r4, r7
 801aa80:	0fde      	lsrs	r6, r3, #31
 801aa82:	0052      	lsls	r2, r2, #1
 801aa84:	1992      	adds	r2, r2, r6
 801aa86:	9e04      	ldr	r6, [sp, #16]
 801aa88:	005b      	lsls	r3, r3, #1
 801aa8a:	3e01      	subs	r6, #1
 801aa8c:	087f      	lsrs	r7, r7, #1
 801aa8e:	9604      	str	r6, [sp, #16]
 801aa90:	2e00      	cmp	r6, #0
 801aa92:	d1db      	bne.n	801aa4c <__ieee754_sqrt+0xe8>
 801aa94:	431a      	orrs	r2, r3
 801aa96:	d01f      	beq.n	801aad8 <__ieee754_sqrt+0x174>
 801aa98:	4e23      	ldr	r6, [pc, #140]	@ (801ab28 <__ieee754_sqrt+0x1c4>)
 801aa9a:	4f24      	ldr	r7, [pc, #144]	@ (801ab2c <__ieee754_sqrt+0x1c8>)
 801aa9c:	6830      	ldr	r0, [r6, #0]
 801aa9e:	6871      	ldr	r1, [r6, #4]
 801aaa0:	683a      	ldr	r2, [r7, #0]
 801aaa2:	687b      	ldr	r3, [r7, #4]
 801aaa4:	9200      	str	r2, [sp, #0]
 801aaa6:	9301      	str	r3, [sp, #4]
 801aaa8:	6832      	ldr	r2, [r6, #0]
 801aaaa:	6873      	ldr	r3, [r6, #4]
 801aaac:	9202      	str	r2, [sp, #8]
 801aaae:	9303      	str	r3, [sp, #12]
 801aab0:	9a00      	ldr	r2, [sp, #0]
 801aab2:	9b01      	ldr	r3, [sp, #4]
 801aab4:	f7e8 f808 	bl	8002ac8 <__aeabi_dsub>
 801aab8:	0002      	movs	r2, r0
 801aaba:	000b      	movs	r3, r1
 801aabc:	9802      	ldr	r0, [sp, #8]
 801aabe:	9903      	ldr	r1, [sp, #12]
 801aac0:	f7e5 fcd4 	bl	800046c <__aeabi_dcmple>
 801aac4:	2800      	cmp	r0, #0
 801aac6:	d007      	beq.n	801aad8 <__ieee754_sqrt+0x174>
 801aac8:	6830      	ldr	r0, [r6, #0]
 801aaca:	6871      	ldr	r1, [r6, #4]
 801aacc:	683a      	ldr	r2, [r7, #0]
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	1c67      	adds	r7, r4, #1
 801aad2:	d10f      	bne.n	801aaf4 <__ieee754_sqrt+0x190>
 801aad4:	9c04      	ldr	r4, [sp, #16]
 801aad6:	3501      	adds	r5, #1
 801aad8:	4b15      	ldr	r3, [pc, #84]	@ (801ab30 <__ieee754_sqrt+0x1cc>)
 801aada:	106a      	asrs	r2, r5, #1
 801aadc:	18d2      	adds	r2, r2, r3
 801aade:	0863      	lsrs	r3, r4, #1
 801aae0:	07ed      	lsls	r5, r5, #31
 801aae2:	d502      	bpl.n	801aaea <__ieee754_sqrt+0x186>
 801aae4:	2180      	movs	r1, #128	@ 0x80
 801aae6:	0609      	lsls	r1, r1, #24
 801aae8:	430b      	orrs	r3, r1
 801aaea:	9905      	ldr	r1, [sp, #20]
 801aaec:	001c      	movs	r4, r3
 801aaee:	0509      	lsls	r1, r1, #20
 801aaf0:	188d      	adds	r5, r1, r2
 801aaf2:	e750      	b.n	801a996 <__ieee754_sqrt+0x32>
 801aaf4:	f7e6 fd78 	bl	80015e8 <__aeabi_dadd>
 801aaf8:	6877      	ldr	r7, [r6, #4]
 801aafa:	6836      	ldr	r6, [r6, #0]
 801aafc:	0002      	movs	r2, r0
 801aafe:	000b      	movs	r3, r1
 801ab00:	0030      	movs	r0, r6
 801ab02:	0039      	movs	r1, r7
 801ab04:	f7e5 fca8 	bl	8000458 <__aeabi_dcmplt>
 801ab08:	2800      	cmp	r0, #0
 801ab0a:	d004      	beq.n	801ab16 <__ieee754_sqrt+0x1b2>
 801ab0c:	3402      	adds	r4, #2
 801ab0e:	4263      	negs	r3, r4
 801ab10:	4163      	adcs	r3, r4
 801ab12:	18ed      	adds	r5, r5, r3
 801ab14:	e7e0      	b.n	801aad8 <__ieee754_sqrt+0x174>
 801ab16:	2301      	movs	r3, #1
 801ab18:	3401      	adds	r4, #1
 801ab1a:	439c      	bics	r4, r3
 801ab1c:	e7dc      	b.n	801aad8 <__ieee754_sqrt+0x174>
 801ab1e:	46c0      	nop			@ (mov r8, r8)
 801ab20:	7ff00000 	.word	0x7ff00000
 801ab24:	fffffc01 	.word	0xfffffc01
 801ab28:	200003b8 	.word	0x200003b8
 801ab2c:	200003b0 	.word	0x200003b0
 801ab30:	3fe00000 	.word	0x3fe00000

0801ab34 <__ieee754_sqrtf>:
 801ab34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ab36:	0003      	movs	r3, r0
 801ab38:	0042      	lsls	r2, r0, #1
 801ab3a:	1c04      	adds	r4, r0, #0
 801ab3c:	20ff      	movs	r0, #255	@ 0xff
 801ab3e:	0852      	lsrs	r2, r2, #1
 801ab40:	05c0      	lsls	r0, r0, #23
 801ab42:	4282      	cmp	r2, r0
 801ab44:	d30a      	bcc.n	801ab5c <__ieee754_sqrtf+0x28>
 801ab46:	1c21      	adds	r1, r4, #0
 801ab48:	1c20      	adds	r0, r4, #0
 801ab4a:	f7e6 f9a7 	bl	8000e9c <__aeabi_fmul>
 801ab4e:	1c01      	adds	r1, r0, #0
 801ab50:	1c20      	adds	r0, r4, #0
 801ab52:	f7e5 fe33 	bl	80007bc <__aeabi_fadd>
 801ab56:	1c04      	adds	r4, r0, #0
 801ab58:	1c20      	adds	r0, r4, #0
 801ab5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ab5c:	2a00      	cmp	r2, #0
 801ab5e:	d0fb      	beq.n	801ab58 <__ieee754_sqrtf+0x24>
 801ab60:	2c00      	cmp	r4, #0
 801ab62:	da07      	bge.n	801ab74 <__ieee754_sqrtf+0x40>
 801ab64:	1c21      	adds	r1, r4, #0
 801ab66:	1c20      	adds	r0, r4, #0
 801ab68:	f7e6 fad6 	bl	8001118 <__aeabi_fsub>
 801ab6c:	1c01      	adds	r1, r0, #0
 801ab6e:	f7e5 ffaf 	bl	8000ad0 <__aeabi_fdiv>
 801ab72:	e7f0      	b.n	801ab56 <__ieee754_sqrtf+0x22>
 801ab74:	0022      	movs	r2, r4
 801ab76:	15e1      	asrs	r1, r4, #23
 801ab78:	4002      	ands	r2, r0
 801ab7a:	4204      	tst	r4, r0
 801ab7c:	d046      	beq.n	801ac0c <__ieee754_sqrtf+0xd8>
 801ab7e:	2280      	movs	r2, #128	@ 0x80
 801ab80:	000f      	movs	r7, r1
 801ab82:	025b      	lsls	r3, r3, #9
 801ab84:	0a5b      	lsrs	r3, r3, #9
 801ab86:	0412      	lsls	r2, r2, #16
 801ab88:	3f7f      	subs	r7, #127	@ 0x7f
 801ab8a:	4313      	orrs	r3, r2
 801ab8c:	07c9      	lsls	r1, r1, #31
 801ab8e:	d400      	bmi.n	801ab92 <__ieee754_sqrtf+0x5e>
 801ab90:	005b      	lsls	r3, r3, #1
 801ab92:	2400      	movs	r4, #0
 801ab94:	2180      	movs	r1, #128	@ 0x80
 801ab96:	2019      	movs	r0, #25
 801ab98:	0026      	movs	r6, r4
 801ab9a:	107f      	asrs	r7, r7, #1
 801ab9c:	005b      	lsls	r3, r3, #1
 801ab9e:	0449      	lsls	r1, r1, #17
 801aba0:	1875      	adds	r5, r6, r1
 801aba2:	001a      	movs	r2, r3
 801aba4:	429d      	cmp	r5, r3
 801aba6:	dc02      	bgt.n	801abae <__ieee754_sqrtf+0x7a>
 801aba8:	186e      	adds	r6, r5, r1
 801abaa:	1b5a      	subs	r2, r3, r5
 801abac:	1864      	adds	r4, r4, r1
 801abae:	3801      	subs	r0, #1
 801abb0:	0053      	lsls	r3, r2, #1
 801abb2:	0849      	lsrs	r1, r1, #1
 801abb4:	2800      	cmp	r0, #0
 801abb6:	d1f3      	bne.n	801aba0 <__ieee754_sqrtf+0x6c>
 801abb8:	2a00      	cmp	r2, #0
 801abba:	d019      	beq.n	801abf0 <__ieee754_sqrtf+0xbc>
 801abbc:	4d17      	ldr	r5, [pc, #92]	@ (801ac1c <__ieee754_sqrtf+0xe8>)
 801abbe:	4e18      	ldr	r6, [pc, #96]	@ (801ac20 <__ieee754_sqrtf+0xec>)
 801abc0:	6828      	ldr	r0, [r5, #0]
 801abc2:	6831      	ldr	r1, [r6, #0]
 801abc4:	682b      	ldr	r3, [r5, #0]
 801abc6:	9301      	str	r3, [sp, #4]
 801abc8:	f7e6 faa6 	bl	8001118 <__aeabi_fsub>
 801abcc:	1c01      	adds	r1, r0, #0
 801abce:	9801      	ldr	r0, [sp, #4]
 801abd0:	f7e5 fc86 	bl	80004e0 <__aeabi_fcmple>
 801abd4:	2800      	cmp	r0, #0
 801abd6:	d00b      	beq.n	801abf0 <__ieee754_sqrtf+0xbc>
 801abd8:	6828      	ldr	r0, [r5, #0]
 801abda:	6831      	ldr	r1, [r6, #0]
 801abdc:	f7e5 fdee 	bl	80007bc <__aeabi_fadd>
 801abe0:	682d      	ldr	r5, [r5, #0]
 801abe2:	1c01      	adds	r1, r0, #0
 801abe4:	1c28      	adds	r0, r5, #0
 801abe6:	f7e5 fc71 	bl	80004cc <__aeabi_fcmplt>
 801abea:	2800      	cmp	r0, #0
 801abec:	d011      	beq.n	801ac12 <__ieee754_sqrtf+0xde>
 801abee:	3402      	adds	r4, #2
 801abf0:	23fc      	movs	r3, #252	@ 0xfc
 801abf2:	1064      	asrs	r4, r4, #1
 801abf4:	059b      	lsls	r3, r3, #22
 801abf6:	18e3      	adds	r3, r4, r3
 801abf8:	05fc      	lsls	r4, r7, #23
 801abfa:	18e4      	adds	r4, r4, r3
 801abfc:	e7ac      	b.n	801ab58 <__ieee754_sqrtf+0x24>
 801abfe:	005b      	lsls	r3, r3, #1
 801ac00:	3201      	adds	r2, #1
 801ac02:	4203      	tst	r3, r0
 801ac04:	d0fb      	beq.n	801abfe <__ieee754_sqrtf+0xca>
 801ac06:	3a01      	subs	r2, #1
 801ac08:	1a89      	subs	r1, r1, r2
 801ac0a:	e7b8      	b.n	801ab7e <__ieee754_sqrtf+0x4a>
 801ac0c:	2080      	movs	r0, #128	@ 0x80
 801ac0e:	0400      	lsls	r0, r0, #16
 801ac10:	e7f7      	b.n	801ac02 <__ieee754_sqrtf+0xce>
 801ac12:	2301      	movs	r3, #1
 801ac14:	3401      	adds	r4, #1
 801ac16:	439c      	bics	r4, r3
 801ac18:	e7ea      	b.n	801abf0 <__ieee754_sqrtf+0xbc>
 801ac1a:	46c0      	nop			@ (mov r8, r8)
 801ac1c:	200003c4 	.word	0x200003c4
 801ac20:	200003c0 	.word	0x200003c0

0801ac24 <__ieee754_log10>:
 801ac24:	2280      	movs	r2, #128	@ 0x80
 801ac26:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ac28:	000b      	movs	r3, r1
 801ac2a:	0004      	movs	r4, r0
 801ac2c:	000d      	movs	r5, r1
 801ac2e:	b085      	sub	sp, #20
 801ac30:	0352      	lsls	r2, r2, #13
 801ac32:	4291      	cmp	r1, r2
 801ac34:	da26      	bge.n	801ac84 <__ieee754_log10+0x60>
 801ac36:	004a      	lsls	r2, r1, #1
 801ac38:	0852      	lsrs	r2, r2, #1
 801ac3a:	4302      	orrs	r2, r0
 801ac3c:	d107      	bne.n	801ac4e <__ieee754_log10+0x2a>
 801ac3e:	2200      	movs	r2, #0
 801ac40:	2300      	movs	r3, #0
 801ac42:	2000      	movs	r0, #0
 801ac44:	4929      	ldr	r1, [pc, #164]	@ (801acec <__ieee754_log10+0xc8>)
 801ac46:	f7e7 f833 	bl	8001cb0 <__aeabi_ddiv>
 801ac4a:	b005      	add	sp, #20
 801ac4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac4e:	2900      	cmp	r1, #0
 801ac50:	da05      	bge.n	801ac5e <__ieee754_log10+0x3a>
 801ac52:	0002      	movs	r2, r0
 801ac54:	f7e7 ff38 	bl	8002ac8 <__aeabi_dsub>
 801ac58:	2200      	movs	r2, #0
 801ac5a:	2300      	movs	r3, #0
 801ac5c:	e7f3      	b.n	801ac46 <__ieee754_log10+0x22>
 801ac5e:	2200      	movs	r2, #0
 801ac60:	4b23      	ldr	r3, [pc, #140]	@ (801acf0 <__ieee754_log10+0xcc>)
 801ac62:	f7e7 fc69 	bl	8002538 <__aeabi_dmul>
 801ac66:	2236      	movs	r2, #54	@ 0x36
 801ac68:	0004      	movs	r4, r0
 801ac6a:	000d      	movs	r5, r1
 801ac6c:	000b      	movs	r3, r1
 801ac6e:	4252      	negs	r2, r2
 801ac70:	4920      	ldr	r1, [pc, #128]	@ (801acf4 <__ieee754_log10+0xd0>)
 801ac72:	428b      	cmp	r3, r1
 801ac74:	dd08      	ble.n	801ac88 <__ieee754_log10+0x64>
 801ac76:	0022      	movs	r2, r4
 801ac78:	002b      	movs	r3, r5
 801ac7a:	0020      	movs	r0, r4
 801ac7c:	0029      	movs	r1, r5
 801ac7e:	f7e6 fcb3 	bl	80015e8 <__aeabi_dadd>
 801ac82:	e7e2      	b.n	801ac4a <__ieee754_log10+0x26>
 801ac84:	2200      	movs	r2, #0
 801ac86:	e7f3      	b.n	801ac70 <__ieee754_log10+0x4c>
 801ac88:	491b      	ldr	r1, [pc, #108]	@ (801acf8 <__ieee754_log10+0xd4>)
 801ac8a:	1518      	asrs	r0, r3, #20
 801ac8c:	1840      	adds	r0, r0, r1
 801ac8e:	1880      	adds	r0, r0, r2
 801ac90:	0fc2      	lsrs	r2, r0, #31
 801ac92:	031b      	lsls	r3, r3, #12
 801ac94:	0b1b      	lsrs	r3, r3, #12
 801ac96:	1880      	adds	r0, r0, r2
 801ac98:	9203      	str	r2, [sp, #12]
 801ac9a:	9300      	str	r3, [sp, #0]
 801ac9c:	f7e8 fb0e 	bl	80032bc <__aeabi_i2d>
 801aca0:	9a03      	ldr	r2, [sp, #12]
 801aca2:	4b16      	ldr	r3, [pc, #88]	@ (801acfc <__ieee754_log10+0xd8>)
 801aca4:	0006      	movs	r6, r0
 801aca6:	1a9b      	subs	r3, r3, r2
 801aca8:	9a00      	ldr	r2, [sp, #0]
 801acaa:	051b      	lsls	r3, r3, #20
 801acac:	431a      	orrs	r2, r3
 801acae:	0015      	movs	r5, r2
 801acb0:	4b13      	ldr	r3, [pc, #76]	@ (801ad00 <__ieee754_log10+0xdc>)
 801acb2:	4a14      	ldr	r2, [pc, #80]	@ (801ad04 <__ieee754_log10+0xe0>)
 801acb4:	000f      	movs	r7, r1
 801acb6:	f7e7 fc3f 	bl	8002538 <__aeabi_dmul>
 801acba:	9000      	str	r0, [sp, #0]
 801acbc:	9101      	str	r1, [sp, #4]
 801acbe:	0020      	movs	r0, r4
 801acc0:	0029      	movs	r1, r5
 801acc2:	f000 f93b 	bl	801af3c <__ieee754_log>
 801acc6:	4a10      	ldr	r2, [pc, #64]	@ (801ad08 <__ieee754_log10+0xe4>)
 801acc8:	4b10      	ldr	r3, [pc, #64]	@ (801ad0c <__ieee754_log10+0xe8>)
 801acca:	f7e7 fc35 	bl	8002538 <__aeabi_dmul>
 801acce:	9a00      	ldr	r2, [sp, #0]
 801acd0:	9b01      	ldr	r3, [sp, #4]
 801acd2:	f7e6 fc89 	bl	80015e8 <__aeabi_dadd>
 801acd6:	4a0e      	ldr	r2, [pc, #56]	@ (801ad10 <__ieee754_log10+0xec>)
 801acd8:	4b0e      	ldr	r3, [pc, #56]	@ (801ad14 <__ieee754_log10+0xf0>)
 801acda:	0004      	movs	r4, r0
 801acdc:	000d      	movs	r5, r1
 801acde:	0030      	movs	r0, r6
 801ace0:	0039      	movs	r1, r7
 801ace2:	f7e7 fc29 	bl	8002538 <__aeabi_dmul>
 801ace6:	0002      	movs	r2, r0
 801ace8:	000b      	movs	r3, r1
 801acea:	e7c6      	b.n	801ac7a <__ieee754_log10+0x56>
 801acec:	c3500000 	.word	0xc3500000
 801acf0:	43500000 	.word	0x43500000
 801acf4:	7fefffff 	.word	0x7fefffff
 801acf8:	fffffc01 	.word	0xfffffc01
 801acfc:	000003ff 	.word	0x000003ff
 801ad00:	3d59fef3 	.word	0x3d59fef3
 801ad04:	11f12b36 	.word	0x11f12b36
 801ad08:	1526e50e 	.word	0x1526e50e
 801ad0c:	3fdbcb7b 	.word	0x3fdbcb7b
 801ad10:	509f6000 	.word	0x509f6000
 801ad14:	3fd34413 	.word	0x3fd34413

0801ad18 <__ieee754_expf>:
 801ad18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ad1a:	21ff      	movs	r1, #255	@ 0xff
 801ad1c:	0043      	lsls	r3, r0, #1
 801ad1e:	1c04      	adds	r4, r0, #0
 801ad20:	085b      	lsrs	r3, r3, #1
 801ad22:	05c9      	lsls	r1, r1, #23
 801ad24:	428b      	cmp	r3, r1
 801ad26:	d904      	bls.n	801ad32 <__ieee754_expf+0x1a>
 801ad28:	1c01      	adds	r1, r0, #0
 801ad2a:	1c20      	adds	r0, r4, #0
 801ad2c:	f7e5 fd46 	bl	80007bc <__aeabi_fadd>
 801ad30:	e00d      	b.n	801ad4e <__ieee754_expf+0x36>
 801ad32:	0fc6      	lsrs	r6, r0, #31
 801ad34:	428b      	cmp	r3, r1
 801ad36:	d104      	bne.n	801ad42 <__ieee754_expf+0x2a>
 801ad38:	2e00      	cmp	r6, #0
 801ad3a:	d000      	beq.n	801ad3e <__ieee754_expf+0x26>
 801ad3c:	e0ba      	b.n	801aeb4 <__ieee754_expf+0x19c>
 801ad3e:	1c20      	adds	r0, r4, #0
 801ad40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ad42:	495d      	ldr	r1, [pc, #372]	@ (801aeb8 <__ieee754_expf+0x1a0>)
 801ad44:	4288      	cmp	r0, r1
 801ad46:	dd04      	ble.n	801ad52 <__ieee754_expf+0x3a>
 801ad48:	2000      	movs	r0, #0
 801ad4a:	f000 f8f1 	bl	801af30 <__math_oflowf>
 801ad4e:	1c04      	adds	r4, r0, #0
 801ad50:	e7f5      	b.n	801ad3e <__ieee754_expf+0x26>
 801ad52:	2800      	cmp	r0, #0
 801ad54:	da06      	bge.n	801ad64 <__ieee754_expf+0x4c>
 801ad56:	4a59      	ldr	r2, [pc, #356]	@ (801aebc <__ieee754_expf+0x1a4>)
 801ad58:	4293      	cmp	r3, r2
 801ad5a:	d903      	bls.n	801ad64 <__ieee754_expf+0x4c>
 801ad5c:	2000      	movs	r0, #0
 801ad5e:	f000 f8e1 	bl	801af24 <__math_uflowf>
 801ad62:	e7f4      	b.n	801ad4e <__ieee754_expf+0x36>
 801ad64:	4a56      	ldr	r2, [pc, #344]	@ (801aec0 <__ieee754_expf+0x1a8>)
 801ad66:	4293      	cmp	r3, r2
 801ad68:	d96e      	bls.n	801ae48 <__ieee754_expf+0x130>
 801ad6a:	4a56      	ldr	r2, [pc, #344]	@ (801aec4 <__ieee754_expf+0x1ac>)
 801ad6c:	00b5      	lsls	r5, r6, #2
 801ad6e:	4293      	cmp	r3, r2
 801ad70:	d84e      	bhi.n	801ae10 <__ieee754_expf+0xf8>
 801ad72:	4b55      	ldr	r3, [pc, #340]	@ (801aec8 <__ieee754_expf+0x1b0>)
 801ad74:	1c20      	adds	r0, r4, #0
 801ad76:	5959      	ldr	r1, [r3, r5]
 801ad78:	f7e6 f9ce 	bl	8001118 <__aeabi_fsub>
 801ad7c:	4b53      	ldr	r3, [pc, #332]	@ (801aecc <__ieee754_expf+0x1b4>)
 801ad7e:	1c07      	adds	r7, r0, #0
 801ad80:	595b      	ldr	r3, [r3, r5]
 801ad82:	2501      	movs	r5, #1
 801ad84:	1bad      	subs	r5, r5, r6
 801ad86:	9300      	str	r3, [sp, #0]
 801ad88:	1bad      	subs	r5, r5, r6
 801ad8a:	9900      	ldr	r1, [sp, #0]
 801ad8c:	1c38      	adds	r0, r7, #0
 801ad8e:	f7e6 f9c3 	bl	8001118 <__aeabi_fsub>
 801ad92:	1c04      	adds	r4, r0, #0
 801ad94:	1c21      	adds	r1, r4, #0
 801ad96:	1c20      	adds	r0, r4, #0
 801ad98:	f7e6 f880 	bl	8000e9c <__aeabi_fmul>
 801ad9c:	494c      	ldr	r1, [pc, #304]	@ (801aed0 <__ieee754_expf+0x1b8>)
 801ad9e:	1c06      	adds	r6, r0, #0
 801ada0:	f7e6 f87c 	bl	8000e9c <__aeabi_fmul>
 801ada4:	494b      	ldr	r1, [pc, #300]	@ (801aed4 <__ieee754_expf+0x1bc>)
 801ada6:	f7e6 f9b7 	bl	8001118 <__aeabi_fsub>
 801adaa:	1c31      	adds	r1, r6, #0
 801adac:	f7e6 f876 	bl	8000e9c <__aeabi_fmul>
 801adb0:	4949      	ldr	r1, [pc, #292]	@ (801aed8 <__ieee754_expf+0x1c0>)
 801adb2:	f7e5 fd03 	bl	80007bc <__aeabi_fadd>
 801adb6:	1c31      	adds	r1, r6, #0
 801adb8:	f7e6 f870 	bl	8000e9c <__aeabi_fmul>
 801adbc:	4947      	ldr	r1, [pc, #284]	@ (801aedc <__ieee754_expf+0x1c4>)
 801adbe:	f7e6 f9ab 	bl	8001118 <__aeabi_fsub>
 801adc2:	1c31      	adds	r1, r6, #0
 801adc4:	f7e6 f86a 	bl	8000e9c <__aeabi_fmul>
 801adc8:	4945      	ldr	r1, [pc, #276]	@ (801aee0 <__ieee754_expf+0x1c8>)
 801adca:	f7e5 fcf7 	bl	80007bc <__aeabi_fadd>
 801adce:	1c31      	adds	r1, r6, #0
 801add0:	f7e6 f864 	bl	8000e9c <__aeabi_fmul>
 801add4:	1c01      	adds	r1, r0, #0
 801add6:	1c20      	adds	r0, r4, #0
 801add8:	f7e6 f99e 	bl	8001118 <__aeabi_fsub>
 801addc:	1c01      	adds	r1, r0, #0
 801adde:	1c06      	adds	r6, r0, #0
 801ade0:	1c20      	adds	r0, r4, #0
 801ade2:	f7e6 f85b 	bl	8000e9c <__aeabi_fmul>
 801ade6:	9001      	str	r0, [sp, #4]
 801ade8:	2d00      	cmp	r5, #0
 801adea:	d140      	bne.n	801ae6e <__ieee754_expf+0x156>
 801adec:	2180      	movs	r1, #128	@ 0x80
 801adee:	1c30      	adds	r0, r6, #0
 801adf0:	05c9      	lsls	r1, r1, #23
 801adf2:	f7e6 f991 	bl	8001118 <__aeabi_fsub>
 801adf6:	1c01      	adds	r1, r0, #0
 801adf8:	9801      	ldr	r0, [sp, #4]
 801adfa:	f7e5 fe69 	bl	8000ad0 <__aeabi_fdiv>
 801adfe:	1c21      	adds	r1, r4, #0
 801ae00:	f7e6 f98a 	bl	8001118 <__aeabi_fsub>
 801ae04:	1c01      	adds	r1, r0, #0
 801ae06:	20fe      	movs	r0, #254	@ 0xfe
 801ae08:	0580      	lsls	r0, r0, #22
 801ae0a:	f7e6 f985 	bl	8001118 <__aeabi_fsub>
 801ae0e:	e79e      	b.n	801ad4e <__ieee754_expf+0x36>
 801ae10:	4934      	ldr	r1, [pc, #208]	@ (801aee4 <__ieee754_expf+0x1cc>)
 801ae12:	1c20      	adds	r0, r4, #0
 801ae14:	f7e6 f842 	bl	8000e9c <__aeabi_fmul>
 801ae18:	4b33      	ldr	r3, [pc, #204]	@ (801aee8 <__ieee754_expf+0x1d0>)
 801ae1a:	5959      	ldr	r1, [r3, r5]
 801ae1c:	f7e5 fcce 	bl	80007bc <__aeabi_fadd>
 801ae20:	f7e6 fb34 	bl	800148c <__aeabi_f2iz>
 801ae24:	0005      	movs	r5, r0
 801ae26:	f7e6 fb51 	bl	80014cc <__aeabi_i2f>
 801ae2a:	4930      	ldr	r1, [pc, #192]	@ (801aeec <__ieee754_expf+0x1d4>)
 801ae2c:	1c06      	adds	r6, r0, #0
 801ae2e:	f7e6 f835 	bl	8000e9c <__aeabi_fmul>
 801ae32:	1c01      	adds	r1, r0, #0
 801ae34:	1c20      	adds	r0, r4, #0
 801ae36:	f7e6 f96f 	bl	8001118 <__aeabi_fsub>
 801ae3a:	492d      	ldr	r1, [pc, #180]	@ (801aef0 <__ieee754_expf+0x1d8>)
 801ae3c:	1c07      	adds	r7, r0, #0
 801ae3e:	1c30      	adds	r0, r6, #0
 801ae40:	f7e6 f82c 	bl	8000e9c <__aeabi_fmul>
 801ae44:	9000      	str	r0, [sp, #0]
 801ae46:	e7a0      	b.n	801ad8a <__ieee754_expf+0x72>
 801ae48:	22d0      	movs	r2, #208	@ 0xd0
 801ae4a:	0592      	lsls	r2, r2, #22
 801ae4c:	4293      	cmp	r3, r2
 801ae4e:	d20c      	bcs.n	801ae6a <__ieee754_expf+0x152>
 801ae50:	4928      	ldr	r1, [pc, #160]	@ (801aef4 <__ieee754_expf+0x1dc>)
 801ae52:	1c20      	adds	r0, r4, #0
 801ae54:	f7e5 fcb2 	bl	80007bc <__aeabi_fadd>
 801ae58:	21fe      	movs	r1, #254	@ 0xfe
 801ae5a:	0589      	lsls	r1, r1, #22
 801ae5c:	f7e5 fb4a 	bl	80004f4 <__aeabi_fcmpgt>
 801ae60:	1e05      	subs	r5, r0, #0
 801ae62:	d097      	beq.n	801ad94 <__ieee754_expf+0x7c>
 801ae64:	21fe      	movs	r1, #254	@ 0xfe
 801ae66:	0589      	lsls	r1, r1, #22
 801ae68:	e75f      	b.n	801ad2a <__ieee754_expf+0x12>
 801ae6a:	2500      	movs	r5, #0
 801ae6c:	e792      	b.n	801ad94 <__ieee754_expf+0x7c>
 801ae6e:	2080      	movs	r0, #128	@ 0x80
 801ae70:	1c31      	adds	r1, r6, #0
 801ae72:	05c0      	lsls	r0, r0, #23
 801ae74:	f7e6 f950 	bl	8001118 <__aeabi_fsub>
 801ae78:	1c01      	adds	r1, r0, #0
 801ae7a:	9801      	ldr	r0, [sp, #4]
 801ae7c:	f7e5 fe28 	bl	8000ad0 <__aeabi_fdiv>
 801ae80:	1c01      	adds	r1, r0, #0
 801ae82:	9800      	ldr	r0, [sp, #0]
 801ae84:	f7e6 f948 	bl	8001118 <__aeabi_fsub>
 801ae88:	1c39      	adds	r1, r7, #0
 801ae8a:	f7e6 f945 	bl	8001118 <__aeabi_fsub>
 801ae8e:	1c01      	adds	r1, r0, #0
 801ae90:	20fe      	movs	r0, #254	@ 0xfe
 801ae92:	0580      	lsls	r0, r0, #22
 801ae94:	f7e6 f940 	bl	8001118 <__aeabi_fsub>
 801ae98:	002b      	movs	r3, r5
 801ae9a:	337d      	adds	r3, #125	@ 0x7d
 801ae9c:	db02      	blt.n	801aea4 <__ieee754_expf+0x18c>
 801ae9e:	05ec      	lsls	r4, r5, #23
 801aea0:	1824      	adds	r4, r4, r0
 801aea2:	e74c      	b.n	801ad3e <__ieee754_expf+0x26>
 801aea4:	21d8      	movs	r1, #216	@ 0xd8
 801aea6:	3564      	adds	r5, #100	@ 0x64
 801aea8:	05ed      	lsls	r5, r5, #23
 801aeaa:	1828      	adds	r0, r5, r0
 801aeac:	0509      	lsls	r1, r1, #20
 801aeae:	f7e5 fff5 	bl	8000e9c <__aeabi_fmul>
 801aeb2:	e74c      	b.n	801ad4e <__ieee754_expf+0x36>
 801aeb4:	2400      	movs	r4, #0
 801aeb6:	e742      	b.n	801ad3e <__ieee754_expf+0x26>
 801aeb8:	42b17217 	.word	0x42b17217
 801aebc:	42cff1b5 	.word	0x42cff1b5
 801aec0:	3eb17218 	.word	0x3eb17218
 801aec4:	3f851591 	.word	0x3f851591
 801aec8:	0801c530 	.word	0x0801c530
 801aecc:	0801c528 	.word	0x0801c528
 801aed0:	3331bb4c 	.word	0x3331bb4c
 801aed4:	35ddea0e 	.word	0x35ddea0e
 801aed8:	388ab355 	.word	0x388ab355
 801aedc:	3b360b61 	.word	0x3b360b61
 801aee0:	3e2aaaab 	.word	0x3e2aaaab
 801aee4:	3fb8aa3b 	.word	0x3fb8aa3b
 801aee8:	0801c538 	.word	0x0801c538
 801aeec:	3f317180 	.word	0x3f317180
 801aef0:	3717f7d1 	.word	0x3717f7d1
 801aef4:	7149f2ca 	.word	0x7149f2ca

0801aef8 <with_errnof>:
 801aef8:	b570      	push	{r4, r5, r6, lr}
 801aefa:	000d      	movs	r5, r1
 801aefc:	1c04      	adds	r4, r0, #0
 801aefe:	f7fd fb67 	bl	80185d0 <__errno>
 801af02:	6005      	str	r5, [r0, #0]
 801af04:	1c20      	adds	r0, r4, #0
 801af06:	bd70      	pop	{r4, r5, r6, pc}

0801af08 <xflowf>:
 801af08:	b510      	push	{r4, lr}
 801af0a:	1c0b      	adds	r3, r1, #0
 801af0c:	2800      	cmp	r0, #0
 801af0e:	d002      	beq.n	801af16 <xflowf+0xe>
 801af10:	2380      	movs	r3, #128	@ 0x80
 801af12:	061b      	lsls	r3, r3, #24
 801af14:	18cb      	adds	r3, r1, r3
 801af16:	1c18      	adds	r0, r3, #0
 801af18:	f7e5 ffc0 	bl	8000e9c <__aeabi_fmul>
 801af1c:	2122      	movs	r1, #34	@ 0x22
 801af1e:	f7ff ffeb 	bl	801aef8 <with_errnof>
 801af22:	bd10      	pop	{r4, pc}

0801af24 <__math_uflowf>:
 801af24:	2180      	movs	r1, #128	@ 0x80
 801af26:	b510      	push	{r4, lr}
 801af28:	0549      	lsls	r1, r1, #21
 801af2a:	f7ff ffed 	bl	801af08 <xflowf>
 801af2e:	bd10      	pop	{r4, pc}

0801af30 <__math_oflowf>:
 801af30:	21e0      	movs	r1, #224	@ 0xe0
 801af32:	b510      	push	{r4, lr}
 801af34:	05c9      	lsls	r1, r1, #23
 801af36:	f7ff ffe7 	bl	801af08 <xflowf>
 801af3a:	bd10      	pop	{r4, pc}

0801af3c <__ieee754_log>:
 801af3c:	2380      	movs	r3, #128	@ 0x80
 801af3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af40:	035b      	lsls	r3, r3, #13
 801af42:	000e      	movs	r6, r1
 801af44:	b08d      	sub	sp, #52	@ 0x34
 801af46:	4299      	cmp	r1, r3
 801af48:	da23      	bge.n	801af92 <__ieee754_log+0x56>
 801af4a:	004b      	lsls	r3, r1, #1
 801af4c:	085b      	lsrs	r3, r3, #1
 801af4e:	4303      	orrs	r3, r0
 801af50:	d107      	bne.n	801af62 <__ieee754_log+0x26>
 801af52:	2200      	movs	r2, #0
 801af54:	2300      	movs	r3, #0
 801af56:	2000      	movs	r0, #0
 801af58:	49b4      	ldr	r1, [pc, #720]	@ (801b22c <__ieee754_log+0x2f0>)
 801af5a:	f7e6 fea9 	bl	8001cb0 <__aeabi_ddiv>
 801af5e:	b00d      	add	sp, #52	@ 0x34
 801af60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af62:	2900      	cmp	r1, #0
 801af64:	da06      	bge.n	801af74 <__ieee754_log+0x38>
 801af66:	0002      	movs	r2, r0
 801af68:	000b      	movs	r3, r1
 801af6a:	f7e7 fdad 	bl	8002ac8 <__aeabi_dsub>
 801af6e:	2200      	movs	r2, #0
 801af70:	2300      	movs	r3, #0
 801af72:	e7f2      	b.n	801af5a <__ieee754_log+0x1e>
 801af74:	4bae      	ldr	r3, [pc, #696]	@ (801b230 <__ieee754_log+0x2f4>)
 801af76:	2200      	movs	r2, #0
 801af78:	f7e7 fade 	bl	8002538 <__aeabi_dmul>
 801af7c:	2336      	movs	r3, #54	@ 0x36
 801af7e:	000e      	movs	r6, r1
 801af80:	425b      	negs	r3, r3
 801af82:	4aac      	ldr	r2, [pc, #688]	@ (801b234 <__ieee754_log+0x2f8>)
 801af84:	4296      	cmp	r6, r2
 801af86:	dd06      	ble.n	801af96 <__ieee754_log+0x5a>
 801af88:	0002      	movs	r2, r0
 801af8a:	000b      	movs	r3, r1
 801af8c:	f7e6 fb2c 	bl	80015e8 <__aeabi_dadd>
 801af90:	e7e5      	b.n	801af5e <__ieee754_log+0x22>
 801af92:	2300      	movs	r3, #0
 801af94:	e7f5      	b.n	801af82 <__ieee754_log+0x46>
 801af96:	4ca8      	ldr	r4, [pc, #672]	@ (801b238 <__ieee754_log+0x2fc>)
 801af98:	1532      	asrs	r2, r6, #20
 801af9a:	1912      	adds	r2, r2, r4
 801af9c:	0336      	lsls	r6, r6, #12
 801af9e:	4ca7      	ldr	r4, [pc, #668]	@ (801b23c <__ieee754_log+0x300>)
 801afa0:	18d2      	adds	r2, r2, r3
 801afa2:	0b33      	lsrs	r3, r6, #12
 801afa4:	9302      	str	r3, [sp, #8]
 801afa6:	191b      	adds	r3, r3, r4
 801afa8:	2480      	movs	r4, #128	@ 0x80
 801afaa:	0364      	lsls	r4, r4, #13
 801afac:	4023      	ands	r3, r4
 801afae:	4ca4      	ldr	r4, [pc, #656]	@ (801b240 <__ieee754_log+0x304>)
 801afb0:	9d02      	ldr	r5, [sp, #8]
 801afb2:	405c      	eors	r4, r3
 801afb4:	151b      	asrs	r3, r3, #20
 801afb6:	189b      	adds	r3, r3, r2
 801afb8:	4325      	orrs	r5, r4
 801afba:	2200      	movs	r2, #0
 801afbc:	9300      	str	r3, [sp, #0]
 801afbe:	0029      	movs	r1, r5
 801afc0:	4b9f      	ldr	r3, [pc, #636]	@ (801b240 <__ieee754_log+0x304>)
 801afc2:	f7e7 fd81 	bl	8002ac8 <__aeabi_dsub>
 801afc6:	9b02      	ldr	r3, [sp, #8]
 801afc8:	0006      	movs	r6, r0
 801afca:	3302      	adds	r3, #2
 801afcc:	031b      	lsls	r3, r3, #12
 801afce:	000f      	movs	r7, r1
 801afd0:	2200      	movs	r2, #0
 801afd2:	0b1b      	lsrs	r3, r3, #12
 801afd4:	2b02      	cmp	r3, #2
 801afd6:	dc64      	bgt.n	801b0a2 <__ieee754_log+0x166>
 801afd8:	2300      	movs	r3, #0
 801afda:	f7e5 fa37 	bl	800044c <__aeabi_dcmpeq>
 801afde:	2800      	cmp	r0, #0
 801afe0:	d019      	beq.n	801b016 <__ieee754_log+0xda>
 801afe2:	9b00      	ldr	r3, [sp, #0]
 801afe4:	2b00      	cmp	r3, #0
 801afe6:	d100      	bne.n	801afea <__ieee754_log+0xae>
 801afe8:	e11c      	b.n	801b224 <__ieee754_log+0x2e8>
 801afea:	0018      	movs	r0, r3
 801afec:	f7e8 f966 	bl	80032bc <__aeabi_i2d>
 801aff0:	4a94      	ldr	r2, [pc, #592]	@ (801b244 <__ieee754_log+0x308>)
 801aff2:	4b95      	ldr	r3, [pc, #596]	@ (801b248 <__ieee754_log+0x30c>)
 801aff4:	0004      	movs	r4, r0
 801aff6:	000d      	movs	r5, r1
 801aff8:	f7e7 fa9e 	bl	8002538 <__aeabi_dmul>
 801affc:	4a93      	ldr	r2, [pc, #588]	@ (801b24c <__ieee754_log+0x310>)
 801affe:	0006      	movs	r6, r0
 801b000:	000f      	movs	r7, r1
 801b002:	4b93      	ldr	r3, [pc, #588]	@ (801b250 <__ieee754_log+0x314>)
 801b004:	0020      	movs	r0, r4
 801b006:	0029      	movs	r1, r5
 801b008:	f7e7 fa96 	bl	8002538 <__aeabi_dmul>
 801b00c:	0002      	movs	r2, r0
 801b00e:	000b      	movs	r3, r1
 801b010:	0030      	movs	r0, r6
 801b012:	0039      	movs	r1, r7
 801b014:	e7ba      	b.n	801af8c <__ieee754_log+0x50>
 801b016:	4a8f      	ldr	r2, [pc, #572]	@ (801b254 <__ieee754_log+0x318>)
 801b018:	4b8f      	ldr	r3, [pc, #572]	@ (801b258 <__ieee754_log+0x31c>)
 801b01a:	0030      	movs	r0, r6
 801b01c:	0039      	movs	r1, r7
 801b01e:	f7e7 fa8b 	bl	8002538 <__aeabi_dmul>
 801b022:	0002      	movs	r2, r0
 801b024:	000b      	movs	r3, r1
 801b026:	2000      	movs	r0, #0
 801b028:	498c      	ldr	r1, [pc, #560]	@ (801b25c <__ieee754_log+0x320>)
 801b02a:	f7e7 fd4d 	bl	8002ac8 <__aeabi_dsub>
 801b02e:	0032      	movs	r2, r6
 801b030:	0004      	movs	r4, r0
 801b032:	000d      	movs	r5, r1
 801b034:	003b      	movs	r3, r7
 801b036:	0030      	movs	r0, r6
 801b038:	0039      	movs	r1, r7
 801b03a:	f7e7 fa7d 	bl	8002538 <__aeabi_dmul>
 801b03e:	000b      	movs	r3, r1
 801b040:	0002      	movs	r2, r0
 801b042:	0029      	movs	r1, r5
 801b044:	0020      	movs	r0, r4
 801b046:	f7e7 fa77 	bl	8002538 <__aeabi_dmul>
 801b04a:	9b00      	ldr	r3, [sp, #0]
 801b04c:	9002      	str	r0, [sp, #8]
 801b04e:	9103      	str	r1, [sp, #12]
 801b050:	2b00      	cmp	r3, #0
 801b052:	d106      	bne.n	801b062 <__ieee754_log+0x126>
 801b054:	0002      	movs	r2, r0
 801b056:	000b      	movs	r3, r1
 801b058:	0030      	movs	r0, r6
 801b05a:	0039      	movs	r1, r7
 801b05c:	f7e7 fd34 	bl	8002ac8 <__aeabi_dsub>
 801b060:	e77d      	b.n	801af5e <__ieee754_log+0x22>
 801b062:	9800      	ldr	r0, [sp, #0]
 801b064:	f7e8 f92a 	bl	80032bc <__aeabi_i2d>
 801b068:	4a76      	ldr	r2, [pc, #472]	@ (801b244 <__ieee754_log+0x308>)
 801b06a:	4b77      	ldr	r3, [pc, #476]	@ (801b248 <__ieee754_log+0x30c>)
 801b06c:	0004      	movs	r4, r0
 801b06e:	000d      	movs	r5, r1
 801b070:	f7e7 fa62 	bl	8002538 <__aeabi_dmul>
 801b074:	4a75      	ldr	r2, [pc, #468]	@ (801b24c <__ieee754_log+0x310>)
 801b076:	9000      	str	r0, [sp, #0]
 801b078:	9101      	str	r1, [sp, #4]
 801b07a:	4b75      	ldr	r3, [pc, #468]	@ (801b250 <__ieee754_log+0x314>)
 801b07c:	0020      	movs	r0, r4
 801b07e:	0029      	movs	r1, r5
 801b080:	f7e7 fa5a 	bl	8002538 <__aeabi_dmul>
 801b084:	0002      	movs	r2, r0
 801b086:	000b      	movs	r3, r1
 801b088:	9802      	ldr	r0, [sp, #8]
 801b08a:	9903      	ldr	r1, [sp, #12]
 801b08c:	f7e7 fd1c 	bl	8002ac8 <__aeabi_dsub>
 801b090:	0032      	movs	r2, r6
 801b092:	003b      	movs	r3, r7
 801b094:	f7e7 fd18 	bl	8002ac8 <__aeabi_dsub>
 801b098:	0002      	movs	r2, r0
 801b09a:	000b      	movs	r3, r1
 801b09c:	9800      	ldr	r0, [sp, #0]
 801b09e:	9901      	ldr	r1, [sp, #4]
 801b0a0:	e7dc      	b.n	801b05c <__ieee754_log+0x120>
 801b0a2:	2380      	movs	r3, #128	@ 0x80
 801b0a4:	05db      	lsls	r3, r3, #23
 801b0a6:	f7e6 fa9f 	bl	80015e8 <__aeabi_dadd>
 801b0aa:	0002      	movs	r2, r0
 801b0ac:	000b      	movs	r3, r1
 801b0ae:	0030      	movs	r0, r6
 801b0b0:	0039      	movs	r1, r7
 801b0b2:	f7e6 fdfd 	bl	8001cb0 <__aeabi_ddiv>
 801b0b6:	9004      	str	r0, [sp, #16]
 801b0b8:	9105      	str	r1, [sp, #20]
 801b0ba:	9800      	ldr	r0, [sp, #0]
 801b0bc:	f7e8 f8fe 	bl	80032bc <__aeabi_i2d>
 801b0c0:	9a04      	ldr	r2, [sp, #16]
 801b0c2:	9b05      	ldr	r3, [sp, #20]
 801b0c4:	9006      	str	r0, [sp, #24]
 801b0c6:	9107      	str	r1, [sp, #28]
 801b0c8:	0010      	movs	r0, r2
 801b0ca:	0019      	movs	r1, r3
 801b0cc:	f7e7 fa34 	bl	8002538 <__aeabi_dmul>
 801b0d0:	4a63      	ldr	r2, [pc, #396]	@ (801b260 <__ieee754_log+0x324>)
 801b0d2:	9b02      	ldr	r3, [sp, #8]
 801b0d4:	4694      	mov	ip, r2
 801b0d6:	4463      	add	r3, ip
 801b0d8:	0002      	movs	r2, r0
 801b0da:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b0dc:	000b      	movs	r3, r1
 801b0de:	9008      	str	r0, [sp, #32]
 801b0e0:	9109      	str	r1, [sp, #36]	@ 0x24
 801b0e2:	f7e7 fa29 	bl	8002538 <__aeabi_dmul>
 801b0e6:	0004      	movs	r4, r0
 801b0e8:	000d      	movs	r5, r1
 801b0ea:	4a5e      	ldr	r2, [pc, #376]	@ (801b264 <__ieee754_log+0x328>)
 801b0ec:	4b5e      	ldr	r3, [pc, #376]	@ (801b268 <__ieee754_log+0x32c>)
 801b0ee:	f7e7 fa23 	bl	8002538 <__aeabi_dmul>
 801b0f2:	4a5e      	ldr	r2, [pc, #376]	@ (801b26c <__ieee754_log+0x330>)
 801b0f4:	4b5e      	ldr	r3, [pc, #376]	@ (801b270 <__ieee754_log+0x334>)
 801b0f6:	f7e6 fa77 	bl	80015e8 <__aeabi_dadd>
 801b0fa:	0022      	movs	r2, r4
 801b0fc:	002b      	movs	r3, r5
 801b0fe:	f7e7 fa1b 	bl	8002538 <__aeabi_dmul>
 801b102:	4a5c      	ldr	r2, [pc, #368]	@ (801b274 <__ieee754_log+0x338>)
 801b104:	4b5c      	ldr	r3, [pc, #368]	@ (801b278 <__ieee754_log+0x33c>)
 801b106:	f7e6 fa6f 	bl	80015e8 <__aeabi_dadd>
 801b10a:	0022      	movs	r2, r4
 801b10c:	002b      	movs	r3, r5
 801b10e:	f7e7 fa13 	bl	8002538 <__aeabi_dmul>
 801b112:	4a5a      	ldr	r2, [pc, #360]	@ (801b27c <__ieee754_log+0x340>)
 801b114:	4b5a      	ldr	r3, [pc, #360]	@ (801b280 <__ieee754_log+0x344>)
 801b116:	f7e6 fa67 	bl	80015e8 <__aeabi_dadd>
 801b11a:	9a08      	ldr	r2, [sp, #32]
 801b11c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b11e:	f7e7 fa0b 	bl	8002538 <__aeabi_dmul>
 801b122:	4a58      	ldr	r2, [pc, #352]	@ (801b284 <__ieee754_log+0x348>)
 801b124:	9008      	str	r0, [sp, #32]
 801b126:	9109      	str	r1, [sp, #36]	@ 0x24
 801b128:	4b57      	ldr	r3, [pc, #348]	@ (801b288 <__ieee754_log+0x34c>)
 801b12a:	0020      	movs	r0, r4
 801b12c:	0029      	movs	r1, r5
 801b12e:	f7e7 fa03 	bl	8002538 <__aeabi_dmul>
 801b132:	4a56      	ldr	r2, [pc, #344]	@ (801b28c <__ieee754_log+0x350>)
 801b134:	4b56      	ldr	r3, [pc, #344]	@ (801b290 <__ieee754_log+0x354>)
 801b136:	f7e6 fa57 	bl	80015e8 <__aeabi_dadd>
 801b13a:	0022      	movs	r2, r4
 801b13c:	002b      	movs	r3, r5
 801b13e:	f7e7 f9fb 	bl	8002538 <__aeabi_dmul>
 801b142:	4a54      	ldr	r2, [pc, #336]	@ (801b294 <__ieee754_log+0x358>)
 801b144:	4b54      	ldr	r3, [pc, #336]	@ (801b298 <__ieee754_log+0x35c>)
 801b146:	f7e6 fa4f 	bl	80015e8 <__aeabi_dadd>
 801b14a:	0022      	movs	r2, r4
 801b14c:	002b      	movs	r3, r5
 801b14e:	f7e7 f9f3 	bl	8002538 <__aeabi_dmul>
 801b152:	0002      	movs	r2, r0
 801b154:	000b      	movs	r3, r1
 801b156:	9808      	ldr	r0, [sp, #32]
 801b158:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801b15a:	f7e6 fa45 	bl	80015e8 <__aeabi_dadd>
 801b15e:	9a02      	ldr	r2, [sp, #8]
 801b160:	4b4e      	ldr	r3, [pc, #312]	@ (801b29c <__ieee754_log+0x360>)
 801b162:	0004      	movs	r4, r0
 801b164:	1a9b      	subs	r3, r3, r2
 801b166:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b168:	000d      	movs	r5, r1
 801b16a:	4313      	orrs	r3, r2
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	dd34      	ble.n	801b1da <__ieee754_log+0x29e>
 801b170:	2200      	movs	r2, #0
 801b172:	4b3a      	ldr	r3, [pc, #232]	@ (801b25c <__ieee754_log+0x320>)
 801b174:	0030      	movs	r0, r6
 801b176:	0039      	movs	r1, r7
 801b178:	f7e7 f9de 	bl	8002538 <__aeabi_dmul>
 801b17c:	0032      	movs	r2, r6
 801b17e:	003b      	movs	r3, r7
 801b180:	f7e7 f9da 	bl	8002538 <__aeabi_dmul>
 801b184:	0002      	movs	r2, r0
 801b186:	000b      	movs	r3, r1
 801b188:	9002      	str	r0, [sp, #8]
 801b18a:	9103      	str	r1, [sp, #12]
 801b18c:	0020      	movs	r0, r4
 801b18e:	0029      	movs	r1, r5
 801b190:	f7e6 fa2a 	bl	80015e8 <__aeabi_dadd>
 801b194:	9a04      	ldr	r2, [sp, #16]
 801b196:	9b05      	ldr	r3, [sp, #20]
 801b198:	f7e7 f9ce 	bl	8002538 <__aeabi_dmul>
 801b19c:	9b00      	ldr	r3, [sp, #0]
 801b19e:	0004      	movs	r4, r0
 801b1a0:	000d      	movs	r5, r1
 801b1a2:	2b00      	cmp	r3, #0
 801b1a4:	d106      	bne.n	801b1b4 <__ieee754_log+0x278>
 801b1a6:	0002      	movs	r2, r0
 801b1a8:	000b      	movs	r3, r1
 801b1aa:	9802      	ldr	r0, [sp, #8]
 801b1ac:	9903      	ldr	r1, [sp, #12]
 801b1ae:	f7e7 fc8b 	bl	8002ac8 <__aeabi_dsub>
 801b1b2:	e74f      	b.n	801b054 <__ieee754_log+0x118>
 801b1b4:	4a23      	ldr	r2, [pc, #140]	@ (801b244 <__ieee754_log+0x308>)
 801b1b6:	4b24      	ldr	r3, [pc, #144]	@ (801b248 <__ieee754_log+0x30c>)
 801b1b8:	9806      	ldr	r0, [sp, #24]
 801b1ba:	9907      	ldr	r1, [sp, #28]
 801b1bc:	f7e7 f9bc 	bl	8002538 <__aeabi_dmul>
 801b1c0:	4a22      	ldr	r2, [pc, #136]	@ (801b24c <__ieee754_log+0x310>)
 801b1c2:	9000      	str	r0, [sp, #0]
 801b1c4:	9101      	str	r1, [sp, #4]
 801b1c6:	9806      	ldr	r0, [sp, #24]
 801b1c8:	9907      	ldr	r1, [sp, #28]
 801b1ca:	4b21      	ldr	r3, [pc, #132]	@ (801b250 <__ieee754_log+0x314>)
 801b1cc:	f7e7 f9b4 	bl	8002538 <__aeabi_dmul>
 801b1d0:	0022      	movs	r2, r4
 801b1d2:	002b      	movs	r3, r5
 801b1d4:	f7e6 fa08 	bl	80015e8 <__aeabi_dadd>
 801b1d8:	e754      	b.n	801b084 <__ieee754_log+0x148>
 801b1da:	0002      	movs	r2, r0
 801b1dc:	000b      	movs	r3, r1
 801b1de:	0030      	movs	r0, r6
 801b1e0:	0039      	movs	r1, r7
 801b1e2:	f7e7 fc71 	bl	8002ac8 <__aeabi_dsub>
 801b1e6:	9a04      	ldr	r2, [sp, #16]
 801b1e8:	9b05      	ldr	r3, [sp, #20]
 801b1ea:	f7e7 f9a5 	bl	8002538 <__aeabi_dmul>
 801b1ee:	9b00      	ldr	r3, [sp, #0]
 801b1f0:	0004      	movs	r4, r0
 801b1f2:	000d      	movs	r5, r1
 801b1f4:	2b00      	cmp	r3, #0
 801b1f6:	d102      	bne.n	801b1fe <__ieee754_log+0x2c2>
 801b1f8:	0002      	movs	r2, r0
 801b1fa:	000b      	movs	r3, r1
 801b1fc:	e72c      	b.n	801b058 <__ieee754_log+0x11c>
 801b1fe:	4a11      	ldr	r2, [pc, #68]	@ (801b244 <__ieee754_log+0x308>)
 801b200:	4b11      	ldr	r3, [pc, #68]	@ (801b248 <__ieee754_log+0x30c>)
 801b202:	9806      	ldr	r0, [sp, #24]
 801b204:	9907      	ldr	r1, [sp, #28]
 801b206:	f7e7 f997 	bl	8002538 <__aeabi_dmul>
 801b20a:	4a10      	ldr	r2, [pc, #64]	@ (801b24c <__ieee754_log+0x310>)
 801b20c:	9000      	str	r0, [sp, #0]
 801b20e:	9101      	str	r1, [sp, #4]
 801b210:	9806      	ldr	r0, [sp, #24]
 801b212:	9907      	ldr	r1, [sp, #28]
 801b214:	4b0e      	ldr	r3, [pc, #56]	@ (801b250 <__ieee754_log+0x314>)
 801b216:	f7e7 f98f 	bl	8002538 <__aeabi_dmul>
 801b21a:	0002      	movs	r2, r0
 801b21c:	000b      	movs	r3, r1
 801b21e:	0020      	movs	r0, r4
 801b220:	0029      	movs	r1, r5
 801b222:	e733      	b.n	801b08c <__ieee754_log+0x150>
 801b224:	2000      	movs	r0, #0
 801b226:	2100      	movs	r1, #0
 801b228:	e699      	b.n	801af5e <__ieee754_log+0x22>
 801b22a:	46c0      	nop			@ (mov r8, r8)
 801b22c:	c3500000 	.word	0xc3500000
 801b230:	43500000 	.word	0x43500000
 801b234:	7fefffff 	.word	0x7fefffff
 801b238:	fffffc01 	.word	0xfffffc01
 801b23c:	00095f64 	.word	0x00095f64
 801b240:	3ff00000 	.word	0x3ff00000
 801b244:	fee00000 	.word	0xfee00000
 801b248:	3fe62e42 	.word	0x3fe62e42
 801b24c:	35793c76 	.word	0x35793c76
 801b250:	3dea39ef 	.word	0x3dea39ef
 801b254:	55555555 	.word	0x55555555
 801b258:	3fd55555 	.word	0x3fd55555
 801b25c:	3fe00000 	.word	0x3fe00000
 801b260:	fff9eb86 	.word	0xfff9eb86
 801b264:	df3e5244 	.word	0xdf3e5244
 801b268:	3fc2f112 	.word	0x3fc2f112
 801b26c:	96cb03de 	.word	0x96cb03de
 801b270:	3fc74664 	.word	0x3fc74664
 801b274:	94229359 	.word	0x94229359
 801b278:	3fd24924 	.word	0x3fd24924
 801b27c:	55555593 	.word	0x55555593
 801b280:	3fe55555 	.word	0x3fe55555
 801b284:	d078c69f 	.word	0xd078c69f
 801b288:	3fc39a09 	.word	0x3fc39a09
 801b28c:	1d8e78af 	.word	0x1d8e78af
 801b290:	3fcc71c5 	.word	0x3fcc71c5
 801b294:	9997fa04 	.word	0x9997fa04
 801b298:	3fd99999 	.word	0x3fd99999
 801b29c:	0006b851 	.word	0x0006b851

0801b2a0 <_init>:
 801b2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2a2:	46c0      	nop			@ (mov r8, r8)
 801b2a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b2a6:	bc08      	pop	{r3}
 801b2a8:	469e      	mov	lr, r3
 801b2aa:	4770      	bx	lr

0801b2ac <_fini>:
 801b2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2ae:	46c0      	nop			@ (mov r8, r8)
 801b2b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b2b2:	bc08      	pop	{r3}
 801b2b4:	469e      	mov	lr, r3
 801b2b6:	4770      	bx	lr
